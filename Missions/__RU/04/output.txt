// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1495 0 0
// Nef_PrepareNature ;
 250: CALL 4397 0 0
// MissionIntro ;
 254: CALL 10406 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: LD_OWVAR 67
 407: ARRAY
 408: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 409: LD_ADDR_EXP 33
 413: PUSH
 414: LD_INT 2
 416: NEG
 417: PUSH
 418: LD_INT 1
 420: NEG
 421: PUSH
 422: LD_INT 0
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 436: LD_ADDR_EXP 34
 440: PUSH
 441: LD_INT 135
 443: PUSH
 444: LD_INT 8
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 135
 453: PUSH
 454: LD_INT 4
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 134
 463: PUSH
 464: LD_INT 19
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 132
 473: PUSH
 474: LD_INT 26
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PUSH
 481: LD_INT 128
 483: PUSH
 484: LD_INT 31
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PUSH
 491: LD_INT 123
 493: PUSH
 494: LD_INT 37
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 118
 503: PUSH
 504: LD_INT 45
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: LD_INT 112
 513: PUSH
 514: LD_INT 51
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 106
 523: PUSH
 524: LD_INT 57
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 99
 533: PUSH
 534: LD_INT 62
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 93
 543: PUSH
 544: LD_INT 67
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: PUSH
 551: LD_INT 86
 553: PUSH
 554: LD_INT 72
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 78
 563: PUSH
 564: LD_INT 75
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 71
 573: PUSH
 574: LD_INT 81
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 69
 583: PUSH
 584: LD_INT 88
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 71
 593: PUSH
 594: LD_INT 95
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: LD_INT 74
 603: PUSH
 604: LD_INT 103
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 80
 613: PUSH
 614: LD_INT 113
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 84
 623: PUSH
 624: LD_INT 121
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 89
 633: PUSH
 634: LD_INT 132
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 92
 643: PUSH
 644: LD_INT 142
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 93
 653: PUSH
 654: LD_INT 151
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: LD_INT 91
 663: PUSH
 664: LD_INT 157
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 90
 673: PUSH
 674: LD_INT 163
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 93
 683: PUSH
 684: LD_INT 171
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 92
 693: PUSH
 694: LD_INT 177
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 729: LD_ADDR_EXP 35
 733: PUSH
 734: LD_INT 135
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 135
 746: PUSH
 747: LD_INT 4
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: LD_INT 134
 756: PUSH
 757: LD_INT 19
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 132
 766: PUSH
 767: LD_INT 26
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 128
 776: PUSH
 777: LD_INT 31
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 123
 786: PUSH
 787: LD_INT 37
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 118
 796: PUSH
 797: LD_INT 45
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 112
 806: PUSH
 807: LD_INT 51
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 106
 816: PUSH
 817: LD_INT 57
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 99
 826: PUSH
 827: LD_INT 62
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 104
 836: PUSH
 837: LD_INT 71
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 110
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 119
 856: PUSH
 857: LD_INT 88
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 128
 866: PUSH
 867: LD_INT 97
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PUSH
 874: LD_INT 135
 876: PUSH
 877: LD_INT 106
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 141
 886: PUSH
 887: LD_INT 120
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 143
 896: PUSH
 897: LD_INT 132
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 143
 906: PUSH
 907: LD_INT 142
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 140
 916: PUSH
 917: LD_INT 149
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 132
 926: PUSH
 927: LD_INT 153
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 125
 936: PUSH
 937: LD_INT 155
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: LD_INT 115
 946: PUSH
 947: LD_INT 154
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 105
 956: PUSH
 957: LD_INT 153
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 93
 966: PUSH
 967: LD_INT 151
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 91
 976: PUSH
 977: LD_INT 157
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 163
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 93
 996: PUSH
 997: LD_INT 171
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 92
1006: PUSH
1007: LD_INT 177
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1044: LD_ADDR_EXP 36
1048: PUSH
1049: LD_INT 40
1051: PUSH
1052: LD_INT 35
1054: PUSH
1055: LD_INT 30
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_OWVAR 67
1067: ARRAY
1068: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1069: LD_ADDR_EXP 37
1073: PUSH
1074: LD_INT 50
1076: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1077: LD_ADDR_EXP 14
1081: PUSH
1082: LD_INT 21
1084: PUSH
1085: LD_INT 19
1087: PUSH
1088: LD_INT 17
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_OWVAR 67
1100: ARRAY
1101: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1102: LD_ADDR_EXP 38
1106: PUSH
1107: LD_INT 3
1109: PUSH
1110: LD_INT 4
1112: PUSH
1113: LD_INT 4
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_OWVAR 67
1125: ARRAY
1126: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1127: LD_ADDR_EXP 39
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: LD_INT 4
1137: PUSH
1138: LD_INT 4
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_OWVAR 67
1150: ARRAY
1151: ST_TO_ADDR
// arabianTroopsMin = 7 ;
1152: LD_ADDR_EXP 40
1156: PUSH
1157: LD_INT 7
1159: ST_TO_ADDR
// arabianTroopsMax = 7 ;
1160: LD_ADDR_EXP 41
1164: PUSH
1165: LD_INT 7
1167: ST_TO_ADDR
// end ;
1168: LD_VAR 0 1
1172: RET
// every 0 0$1 trigger debugMode do var i ;
1173: LD_EXP 31
1177: IFFALSE 1492
1179: GO 1181
1181: DISABLE
1182: LD_INT 0
1184: PPUSH
// begin enable ;
1185: ENABLE
// FogOff ( your_side ) ;
1186: LD_OWVAR 2
1190: PPUSH
1191: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1195: LD_ADDR_VAR 0 1
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_OWVAR 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 2
1214: PUSH
1215: LD_INT 21
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 21
1227: PUSH
1228: LD_INT 2
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: PUSH
1249: FOR_IN
1250: IFFALSE 1266
// SetLives ( i , 1000 ) ;
1252: LD_VAR 0 1
1256: PPUSH
1257: LD_INT 1000
1259: PPUSH
1260: CALL_OW 234
1264: GO 1249
1266: POP
1267: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1268: LD_ADDR_VAR 0 1
1272: PUSH
1273: LD_INT 22
1275: PUSH
1276: LD_OWVAR 2
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: PUSH
1304: FOR_IN
1305: IFFALSE 1369
// begin SetSkill ( i , skill_combat , 10 ) ;
1307: LD_VAR 0 1
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_INT 10
1317: PPUSH
1318: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1322: LD_VAR 0 1
1326: PPUSH
1327: LD_INT 2
1329: PPUSH
1330: LD_INT 10
1332: PPUSH
1333: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1337: LD_VAR 0 1
1341: PPUSH
1342: LD_INT 3
1344: PPUSH
1345: LD_INT 10
1347: PPUSH
1348: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1352: LD_VAR 0 1
1356: PPUSH
1357: LD_INT 4
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: CALL_OW 237
// end ;
1367: GO 1304
1369: POP
1370: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1371: LD_ADDR_VAR 0 1
1375: PUSH
1376: LD_INT 22
1378: PUSH
1379: LD_OWVAR 2
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: LD_INT 30
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 30
1403: PUSH
1404: LD_INT 1
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: PUSH
1425: FOR_IN
1426: IFFALSE 1490
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1428: LD_VAR 0 1
1432: PPUSH
1433: CALL_OW 274
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 9999
1443: PPUSH
1444: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 274
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 9999
1463: PPUSH
1464: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1468: LD_VAR 0 1
1472: PPUSH
1473: CALL_OW 274
1477: PPUSH
1478: LD_INT 3
1480: PPUSH
1481: LD_INT 9999
1483: PPUSH
1484: CALL_OW 277
// end ;
1488: GO 1425
1490: POP
1491: POP
// end ; end_of_file
1492: PPOPN 1
1494: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1495: LD_INT 0
1497: PPUSH
// randomsToSave = [ ] ;
1498: LD_ADDR_EXP 62
1502: PUSH
1503: EMPTY
1504: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1505: LD_ADDR_EXP 57
1509: PUSH
1510: EMPTY
1511: ST_TO_ADDR
// ruCars = [ ] ;
1512: LD_ADDR_EXP 61
1516: PUSH
1517: EMPTY
1518: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1519: CALL 2327 0 0
// PrepareHeroes ;
1523: CALL 1532 0 0
// end ;
1527: LD_VAR 0 1
1531: RET
// function PrepareHeroes ; var i , current ; begin
1532: LD_INT 0
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation = 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1553: LD_ADDR_EXP 42
1557: PUSH
1558: LD_STRING Burlak
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_INT 3
1566: PPUSH
1567: CALL 9385 0 3
1571: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1572: LD_ADDR_EXP 43
1576: PUSH
1577: LD_STRING Gnyevko
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: LD_INT 3
1585: PPUSH
1586: CALL 9385 0 3
1590: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1591: LD_ADDR_EXP 45
1595: PUSH
1596: LD_STRING Kovalyuk
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: CALL 9385 0 3
1609: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1610: LD_ADDR_EXP 44
1614: PUSH
1615: LD_STRING Kirilenkova
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: LD_INT 4
1623: PPUSH
1624: CALL 9385 0 3
1628: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1629: LD_ADDR_EXP 46
1633: PUSH
1634: LD_STRING Belkov
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: CALL 9385 0 3
1647: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1648: LD_ADDR_EXP 47
1652: PUSH
1653: LD_STRING Belkov2
1655: PPUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL 9385 0 3
1666: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1667: LD_ADDR_EXP 48
1671: PUSH
1672: LD_STRING Scholtze
1674: PPUSH
1675: LD_INT 1
1677: PPUSH
1678: LD_INT 4
1680: PPUSH
1681: CALL 9385 0 3
1685: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1686: LD_ADDR_EXP 52
1690: PUSH
1691: LD_STRING Popov
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL 9385 0 3
1704: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1705: LD_ADDR_EXP 53
1709: PUSH
1710: LD_STRING Platonov
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL 9385 0 3
1723: ST_TO_ADDR
// uc_side = 6 ;
1724: LD_ADDR_OWVAR 20
1728: PUSH
1729: LD_INT 6
1731: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1732: LD_ADDR_EXP 54
1736: PUSH
1737: LD_STRING Gaydar
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL 9385 0 3
1750: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1751: LD_ADDR_EXP 49
1755: PUSH
1756: LD_STRING Kuzmov
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 9385 0 3
1769: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1770: LD_EXP 49
1774: PPUSH
1775: LD_INT 109
1777: PPUSH
1778: LD_INT 108
1780: PPUSH
1781: LD_INT 5
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 50
// ComHold ( Kuzmov ) ;
1791: LD_EXP 49
1795: PPUSH
1796: CALL_OW 140
// uc_side = 3 ;
1800: LD_ADDR_OWVAR 20
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1808: LD_EXP 42
1812: PUSH
1813: LD_EXP 43
1817: PUSH
1818: LD_EXP 44
1822: PUSH
1823: LD_EXP 45
1827: PUSH
1828: LD_EXP 46
1832: PUSH
1833: LD_EXP 47
1837: PUSH
1838: LD_EXP 48
1842: PUSH
1843: LD_EXP 52
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: LD_INT 2
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL 9468 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1868: LD_ADDR_EXP 50
1872: PUSH
1873: LD_STRING 03_other_survivors
1875: PPUSH
1876: CALL_OW 31
1880: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1881: LD_ADDR_EXP 51
1885: PUSH
1886: LD_STRING 03_other_kirov
1888: PPUSH
1889: CALL_OW 31
1893: ST_TO_ADDR
// for i in other_survivors do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: LD_EXP 50
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1970
// begin if ruCars then
1907: LD_EXP 61
1911: IFFALSE 1953
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_EXP 61
1922: PUSH
1923: LD_INT 1
1925: ARRAY
1926: PPUSH
1927: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1931: LD_ADDR_EXP 61
1935: PUSH
1936: LD_EXP 61
1940: PUSH
1941: LD_EXP 61
1945: PUSH
1946: LD_INT 1
1948: ARRAY
1949: DIFF
1950: ST_TO_ADDR
// end else
1951: GO 1968
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_INT 2
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 49
// end ;
1968: GO 1904
1970: POP
1971: POP
// for i in other_kirov_survivors do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: LD_EXP 51
1981: PUSH
1982: FOR_IN
1983: IFFALSE 2048
// begin if ruCars then
1985: LD_EXP 61
1989: IFFALSE 2031
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_EXP 61
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2009: LD_ADDR_EXP 61
2013: PUSH
2014: LD_EXP 61
2018: PUSH
2019: LD_EXP 61
2023: PUSH
2024: LD_INT 1
2026: ARRAY
2027: DIFF
2028: ST_TO_ADDR
// end else
2029: GO 2046
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ;
2046: GO 1982
2048: POP
2049: POP
// PrepareSoldier ( sex_male , 1 ) ;
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 381
// dialogRus = CreateHuman ;
2060: LD_ADDR_EXP 59
2064: PUSH
2065: CALL_OW 44
2069: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2070: LD_EXP 50
2074: PUSH
2075: LD_EXP 51
2079: PLUS
2080: PUSH
2081: LD_EXP 43
2085: PUSH
2086: LD_EXP 44
2090: PUSH
2091: LD_EXP 45
2095: PUSH
2096: LD_EXP 46
2100: PUSH
2101: LD_EXP 47
2105: PUSH
2106: LD_EXP 48
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: PLUS
2119: PUSH
2120: LD_INT 8
2122: LESS
2123: IFFALSE 2322
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 50
2134: PUSH
2135: LD_EXP 51
2139: PLUS
2140: PUSH
2141: LD_EXP 43
2145: PUSH
2146: LD_EXP 44
2150: PUSH
2151: LD_EXP 45
2155: PUSH
2156: LD_EXP 46
2160: PUSH
2161: LD_EXP 47
2165: PUSH
2166: LD_EXP 48
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PLUS
2179: ST_TO_ADDR
// current = 8 - current ;
2180: LD_ADDR_VAR 0 3
2184: PUSH
2185: LD_INT 8
2187: PUSH
2188: LD_VAR 0 3
2192: MINUS
2193: ST_TO_ADDR
// for i := 1 to current do
2194: LD_ADDR_VAR 0 2
2198: PUSH
2199: DOUBLE
2200: LD_INT 1
2202: DEC
2203: ST_TO_ADDR
2204: LD_VAR 0 3
2208: PUSH
2209: FOR_TO
2210: IFFALSE 2320
// begin uc_nation = 3 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 3
2219: ST_TO_ADDR
// uc_side = 3 ;
2220: LD_ADDR_OWVAR 20
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2228: LD_INT 0
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 4
2236: PPUSH
2237: CALL_OW 12
2241: PPUSH
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 3
2247: PPUSH
2248: CALL_OW 12
2252: PPUSH
2253: CALL_OW 380
// if ruCars then
2257: LD_EXP 61
2261: IFFALSE 2303
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2263: CALL_OW 44
2267: PPUSH
2268: LD_EXP 61
2272: PUSH
2273: LD_INT 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2281: LD_ADDR_EXP 61
2285: PUSH
2286: LD_EXP 61
2290: PUSH
2291: LD_EXP 61
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: DIFF
2300: ST_TO_ADDR
// end else
2301: GO 2318
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2303: CALL_OW 44
2307: PPUSH
2308: LD_INT 2
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 49
// end ;
2318: GO 2209
2320: POP
2321: POP
// end ; end ;
2322: LD_VAR 0 1
2326: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2327: LD_INT 0
2329: PPUSH
2330: PPUSH
2331: PPUSH
// uc_side = 3 ;
2332: LD_ADDR_OWVAR 20
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// uc_nation = 3 ;
2340: LD_ADDR_OWVAR 21
2344: PUSH
2345: LD_INT 3
2347: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_EXP 5
2362: PUSH
2363: FOR_TO
2364: IFFALSE 2513
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2366: LD_ADDR_OWVAR 37
2370: PUSH
2371: LD_EXP 5
2375: PUSH
2376: LD_VAR 0 2
2380: ARRAY
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2386: LD_ADDR_OWVAR 39
2390: PUSH
2391: LD_EXP 5
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: PUSH
2402: LD_INT 2
2404: ARRAY
2405: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2406: LD_ADDR_OWVAR 38
2410: PUSH
2411: LD_EXP 5
2415: PUSH
2416: LD_VAR 0 2
2420: ARRAY
2421: PUSH
2422: LD_INT 3
2424: ARRAY
2425: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2426: LD_ADDR_OWVAR 40
2430: PUSH
2431: LD_EXP 5
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 4
2444: ARRAY
2445: ST_TO_ADDR
// uc_direction := 3 ;
2446: LD_ADDR_OWVAR 24
2450: PUSH
2451: LD_INT 3
2453: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2454: LD_ADDR_OWVAR 41
2458: PUSH
2459: LD_INT 25
2461: PPUSH
2462: LD_INT 30
2464: PPUSH
2465: CALL_OW 12
2469: ST_TO_ADDR
// car := CreateVehicle ;
2470: LD_ADDR_VAR 0 3
2474: PUSH
2475: CALL_OW 45
2479: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2480: LD_ADDR_EXP 61
2484: PUSH
2485: LD_EXP 61
2489: PUSH
2490: LD_VAR 0 3
2494: ADD
2495: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL_OW 49
// end ;
2511: GO 2363
2513: POP
2514: POP
// end ;
2515: LD_VAR 0 1
2519: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
// rnd = rand ( 1 , 4 ) ;
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 4
2540: PPUSH
2541: CALL_OW 12
2545: ST_TO_ADDR
// uc_side = 6 ;
2546: LD_ADDR_OWVAR 20
2550: PUSH
2551: LD_INT 6
2553: ST_TO_ADDR
// uc_nation = 3 ;
2554: LD_ADDR_OWVAR 21
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// if rnd < 4 then
2562: LD_VAR 0 3
2566: PUSH
2567: LD_INT 4
2569: LESS
2570: IFFALSE 2946
// begin vc_chassis = ru_medium_wheeled ;
2572: LD_ADDR_OWVAR 37
2576: PUSH
2577: LD_INT 21
2579: ST_TO_ADDR
// vc_control = control_manual ;
2580: LD_ADDR_OWVAR 38
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// vc_engine = engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2596: LD_ADDR_VAR 0 5
2600: PUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 100
2606: PPUSH
2607: CALL_OW 12
2611: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2612: LD_VAR 0 5
2616: PUSH
2617: LD_EXP 37
2621: PUSH
2622: LD_INT 1
2624: PLUS
2625: LESS
2626: IFFALSE 2638
// vc_weapon = ru_cargo_bay else
2628: LD_ADDR_OWVAR 40
2632: PUSH
2633: LD_INT 51
2635: ST_TO_ADDR
2636: GO 2669
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 42
2645: PUSH
2646: LD_INT 43
2648: PUSH
2649: LD_INT 44
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 3
2662: PPUSH
2663: CALL_OW 12
2667: ARRAY
2668: ST_TO_ADDR
// vehicle = CreateVehicle ;
2669: LD_ADDR_VAR 0 7
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2679: LD_VAR 0 7
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2691: LD_VAR 0 7
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 4
2714: PPUSH
2715: CALL_OW 12
2719: PPUSH
2720: LD_INT 2
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: CALL_OW 12
2730: PPUSH
2731: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2735: CALL_OW 44
2739: PPUSH
2740: LD_VAR 0 7
2744: PPUSH
2745: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2749: LD_OWVAR 40
2753: PUSH
2754: LD_INT 51
2756: EQUAL
2757: IFFALSE 2774
// AddCargo ( vehicle , mat_cans , 100 ) ;
2759: LD_VAR 0 7
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2774: LD_VAR 0 7
2778: PPUSH
2779: LD_INT 500
2781: PPUSH
2782: LD_INT 1000
2784: PPUSH
2785: CALL_OW 12
2789: PPUSH
2790: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2794: LD_ADDR_VAR 0 3
2798: PUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_INT 2
2804: PPUSH
2805: CALL_OW 12
2809: ST_TO_ADDR
// if rnd = 1 then
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 1
2817: EQUAL
2818: IFFALSE 2883
// for i := 3 to russianCargoPath1 do
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: DOUBLE
2826: LD_INT 3
2828: DEC
2829: ST_TO_ADDR
2830: LD_EXP 34
2834: PUSH
2835: FOR_TO
2836: IFFALSE 2879
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2838: LD_VAR 0 7
2842: PPUSH
2843: LD_EXP 34
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: PUSH
2854: LD_INT 1
2856: ARRAY
2857: PPUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 2
2867: ARRAY
2868: PUSH
2869: LD_INT 2
2871: ARRAY
2872: PPUSH
2873: CALL_OW 171
2877: GO 2835
2879: POP
2880: POP
2881: GO 2944
// for i := 3 to russianCargoPath2 do
2883: LD_ADDR_VAR 0 2
2887: PUSH
2888: DOUBLE
2889: LD_INT 3
2891: DEC
2892: ST_TO_ADDR
2893: LD_EXP 35
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2942
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2901: LD_VAR 0 7
2905: PPUSH
2906: LD_EXP 35
2910: PUSH
2911: LD_VAR 0 2
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_EXP 35
2925: PUSH
2926: LD_VAR 0 2
2930: ARRAY
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PPUSH
2936: CALL_OW 171
2940: GO 2898
2942: POP
2943: POP
// end else
2944: GO 3285
// begin for i := 1 to rand ( 1 , 3 ) do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 1
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 12
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3046
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2970: LD_INT 0
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: LD_INT 4
2978: PPUSH
2979: CALL_OW 12
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: LD_INT 3
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: CALL_OW 380
// unit = CreateHuman ;
2999: LD_ADDR_VAR 0 6
3003: PUSH
3004: CALL_OW 44
3008: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3009: LD_VAR 0 6
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3024: LD_VAR 0 6
3028: PPUSH
3029: LD_INT 500
3031: PPUSH
3032: LD_INT 1000
3034: PPUSH
3035: CALL_OW 12
3039: PPUSH
3040: CALL_OW 234
// end ;
3044: GO 2967
3046: POP
3047: POP
// rnd2 = rand ( 1 , 2 ) ;
3048: LD_ADDR_VAR 0 4
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 12
3063: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3064: LD_ADDR_VAR 0 8
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 6
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 56
3091: PUSH
3092: EMPTY
3093: LIST
3094: PUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 60
3100: PUSH
3101: EMPTY
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: PPUSH
3114: CALL_OW 69
3118: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3119: LD_ADDR_VAR 0 8
3123: PUSH
3124: LD_VAR 0 8
3128: PUSH
3129: LD_EXP 56
3133: DIFF
3134: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: LD_VAR 0 8
3144: PUSH
3145: LD_EXP 57
3149: DIFF
3150: ST_TO_ADDR
// if rnd2 = 1 then
3151: LD_VAR 0 4
3155: PUSH
3156: LD_INT 1
3158: EQUAL
3159: IFFALSE 3224
// for i := 3 to russianCargoPath1 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 3
3169: DEC
3170: ST_TO_ADDR
3171: LD_EXP 34
3175: PUSH
3176: FOR_TO
3177: IFFALSE 3220
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3179: LD_VAR 0 8
3183: PPUSH
3184: LD_EXP 34
3188: PUSH
3189: LD_VAR 0 2
3193: ARRAY
3194: PUSH
3195: LD_INT 1
3197: ARRAY
3198: PPUSH
3199: LD_EXP 34
3203: PUSH
3204: LD_VAR 0 2
3208: ARRAY
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: CALL_OW 171
3218: GO 3176
3220: POP
3221: POP
3222: GO 3285
// for i := 3 to russianCargoPath2 do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 3
3232: DEC
3233: ST_TO_ADDR
3234: LD_EXP 35
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3283
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3242: LD_VAR 0 8
3246: PPUSH
3247: LD_EXP 35
3251: PUSH
3252: LD_VAR 0 2
3256: ARRAY
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: LD_EXP 35
3266: PUSH
3267: LD_VAR 0 2
3271: ARRAY
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: CALL_OW 171
3281: GO 3239
3283: POP
3284: POP
// end ; end ;
3285: LD_VAR 0 1
3289: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3290: LD_INT 0
3292: PPUSH
3293: PPUSH
3294: PPUSH
// for i := 1 to 2 do
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: DOUBLE
3301: LD_INT 1
3303: DEC
3304: ST_TO_ADDR
3305: LD_INT 2
3307: PUSH
3308: FOR_TO
3309: IFFALSE 3375
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3311: LD_INT 0
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: CALL_OW 12
3327: PPUSH
3328: CALL_OW 380
// unit = CreateHuman ;
3332: LD_ADDR_VAR 0 3
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3342: LD_VAR 0 3
3346: PPUSH
3347: LD_INT 3
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3357: LD_ADDR_EXP 57
3361: PUSH
3362: LD_EXP 57
3366: PUSH
3367: LD_VAR 0 3
3371: ADD
3372: ST_TO_ADDR
// end ;
3373: GO 3308
3375: POP
3376: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3377: LD_INT 0
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: LD_INT 2
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: CALL_OW 12
3393: PPUSH
3394: CALL_OW 380
// unit = CreateHuman ;
3398: LD_ADDR_VAR 0 3
3402: PUSH
3403: CALL_OW 44
3407: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3423: LD_ADDR_EXP 57
3427: PUSH
3428: LD_EXP 57
3432: PUSH
3433: LD_VAR 0 3
3437: ADD
3438: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3439: LD_EXP 57
3443: PPUSH
3444: LD_INT 100
3446: PPUSH
3447: LD_INT 54
3449: PPUSH
3450: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3454: LD_EXP 57
3458: PPUSH
3459: LD_INT 25
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 72
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 95
3479: PPUSH
3480: LD_INT 52
3482: PPUSH
3483: LD_INT 2
3485: PPUSH
3486: CALL_OW 205
// end ; end_of_file
3490: LD_VAR 0 1
3494: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3495: LD_INT 0
3497: PPUSH
// uc_side = 2 ;
3498: LD_ADDR_OWVAR 20
3502: PUSH
3503: LD_INT 2
3505: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3506: LD_ADDR_EXP 63
3510: PUSH
3511: LD_STRING Heike
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: LD_INT 0
3519: PPUSH
3520: CALL 9385 0 3
3524: ST_TO_ADDR
// if Difficulty >= 2 then
3525: LD_OWVAR 67
3529: PUSH
3530: LD_INT 2
3532: GREATEREQUAL
3533: IFFALSE 3548
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3535: LD_INT 51
3537: PPUSH
3538: LD_INT 2
3540: PPUSH
3541: LD_INT 2
3543: PPUSH
3544: CALL_OW 322
// end ;
3548: LD_VAR 0 1
3552: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
3557: PPUSH
// currentEnemyGroup = [ ] ;
3558: LD_ADDR_EXP 65
3562: PUSH
3563: EMPTY
3564: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_EXP 39
3579: PUSH
3580: FOR_TO
3581: IFFALSE 3836
// begin uc_side = 2 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_INT 2
3590: ST_TO_ADDR
// uc_nation = nation_arabian ;
3591: LD_ADDR_OWVAR 21
3595: PUSH
3596: LD_INT 2
3598: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3599: LD_ADDR_OWVAR 40
3603: PUSH
3604: LD_INT 23
3606: PUSH
3607: LD_INT 24
3609: PUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 26
3615: PUSH
3616: LD_INT 27
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 5
3631: PPUSH
3632: CALL_OW 12
3636: ARRAY
3637: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3638: LD_OWVAR 40
3642: PUSH
3643: LD_INT 25
3645: PUSH
3646: LD_INT 26
3648: PUSH
3649: LD_INT 27
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: IN
3657: IFFALSE 3688
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3659: LD_ADDR_OWVAR 37
3663: PUSH
3664: LD_INT 13
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 1
3676: PPUSH
3677: LD_INT 2
3679: PPUSH
3680: CALL_OW 12
3684: ARRAY
3685: ST_TO_ADDR
3686: GO 3719
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3688: LD_ADDR_OWVAR 37
3692: PUSH
3693: LD_INT 12
3695: PUSH
3696: LD_INT 13
3698: PUSH
3699: LD_INT 14
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 1
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: CALL_OW 12
3717: ARRAY
3718: ST_TO_ADDR
// vc_control = control_manual ;
3719: LD_ADDR_OWVAR 38
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// vc_engine = engine_combustion ;
3727: LD_ADDR_OWVAR 39
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3735: LD_ADDR_OWVAR 41
3739: PUSH
3740: LD_INT 100
3742: ST_TO_ADDR
// veh = CreateVehicle ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: CALL_OW 45
3752: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3753: LD_ADDR_EXP 65
3757: PUSH
3758: LD_EXP 65
3762: PUSH
3763: LD_VAR 0 3
3767: ADD
3768: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 7
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3784: LD_OWVAR 40
3788: PUSH
3789: LD_INT 26
3791: EQUAL
3792: IFFALSE 3808
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3794: LD_INT 0
3796: PPUSH
3797: LD_EXP 33
3801: PPUSH
3802: CALL_OW 383
3806: GO 3820
// PrepareMechanic ( false , enemySkillLevel ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_EXP 32
3815: PPUSH
3816: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3820: CALL_OW 44
3824: PPUSH
3825: LD_VAR 0 3
3829: PPUSH
3830: CALL_OW 52
// end ;
3834: GO 3580
3836: POP
3837: POP
// end ;
3838: LD_VAR 0 1
3842: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3843: LD_INT 0
3845: PPUSH
3846: PPUSH
3847: PPUSH
// currentEnemyGroup = [ ] ;
3848: LD_ADDR_EXP 65
3852: PUSH
3853: EMPTY
3854: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: DOUBLE
3861: LD_INT 1
3863: DEC
3864: ST_TO_ADDR
3865: LD_EXP 40
3869: PPUSH
3870: LD_EXP 41
3874: PPUSH
3875: CALL_OW 12
3879: PUSH
3880: FOR_TO
3881: IFFALSE 3960
// begin uc_side = 2 ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_INT 2
3890: ST_TO_ADDR
// uc_nation = nation_arabian ;
3891: LD_ADDR_OWVAR 21
3895: PUSH
3896: LD_INT 2
3898: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3899: LD_INT 0
3901: PPUSH
3902: LD_EXP 32
3906: PUSH
3907: LD_INT 1
3909: MINUS
3910: PPUSH
3911: CALL_OW 381
// unit = CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3925: LD_ADDR_EXP 65
3929: PUSH
3930: LD_EXP 65
3934: PUSH
3935: LD_VAR 0 4
3939: ADD
3940: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3941: LD_VAR 0 4
3945: PPUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 49
// end ;
3958: GO 3880
3960: POP
3961: POP
// for i := 1 to rand ( 1 , 3 ) do
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: DOUBLE
3968: LD_INT 1
3970: DEC
3971: ST_TO_ADDR
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 12
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4059
// begin uc_side = 2 ;
3986: LD_ADDR_OWVAR 20
3990: PUSH
3991: LD_INT 2
3993: ST_TO_ADDR
// uc_nation = nation_arabian ;
3994: LD_ADDR_OWVAR 21
3998: PUSH
3999: LD_INT 2
4001: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_EXP 32
4009: PPUSH
4010: CALL_OW 384
// unit = CreateHuman ;
4014: LD_ADDR_VAR 0 4
4018: PUSH
4019: CALL_OW 44
4023: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4024: LD_ADDR_EXP 65
4028: PUSH
4029: LD_EXP 65
4033: PUSH
4034: LD_VAR 0 4
4038: ADD
4039: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4040: LD_VAR 0 4
4044: PPUSH
4045: LD_VAR 0 1
4049: PPUSH
4050: LD_INT 0
4052: PPUSH
4053: CALL_OW 49
// end ;
4057: GO 3983
4059: POP
4060: POP
// end ;
4061: LD_VAR 0 2
4065: RET
// export function PrepareArabianKiller ; var un ; begin
4066: LD_INT 0
4068: PPUSH
4069: PPUSH
// uc_side = 5 ;
4070: LD_ADDR_OWVAR 20
4074: PUSH
4075: LD_INT 5
4077: ST_TO_ADDR
// uc_nation = nation_arabian ;
4078: LD_ADDR_OWVAR 21
4082: PUSH
4083: LD_INT 2
4085: ST_TO_ADDR
// hc_class = class_soldier ;
4086: LD_ADDR_OWVAR 28
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4094: LD_ADDR_OWVAR 31
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: ST_TO_ADDR
// un = CreateHuman ;
4117: LD_ADDR_VAR 0 2
4121: PUSH
4122: CALL_OW 44
4126: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4127: LD_VAR 0 2
4131: PPUSH
4132: LD_INT 12
4134: PPUSH
4135: LD_INT 0
4137: PPUSH
4138: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_EXP 54
4151: PPUSH
4152: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4156: LD_ADDR_EXP 23
4160: PUSH
4161: LD_EXP 23
4165: PUSH
4166: LD_INT 1
4168: PLUS
4169: ST_TO_ADDR
// end ;
4170: LD_VAR 0 1
4174: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4175: LD_INT 0
4177: PPUSH
4178: PPUSH
4179: PPUSH
4180: PPUSH
// firstAttackGroup = [ ] ;
4181: LD_ADDR_EXP 64
4185: PUSH
4186: EMPTY
4187: ST_TO_ADDR
// uc_side = 2 ;
4188: LD_ADDR_OWVAR 20
4192: PUSH
4193: LD_INT 2
4195: ST_TO_ADDR
// uc_nation = nation_arabian ;
4196: LD_ADDR_OWVAR 21
4200: PUSH
4201: LD_INT 2
4203: ST_TO_ADDR
// for i := 1 to 3 do
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_INT 3
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4279
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4220: LD_INT 0
4222: PPUSH
4223: LD_EXP 32
4227: PUSH
4228: LD_INT 2
4230: MINUS
4231: PPUSH
4232: CALL_OW 381
// unit = CreateHuman ;
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: CALL_OW 44
4245: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4246: LD_ADDR_EXP 64
4250: PUSH
4251: LD_EXP 64
4255: PUSH
4256: LD_VAR 0 3
4260: ADD
4261: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_INT 7
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 49
// end ;
4277: GO 4217
4279: POP
4280: POP
// vc_weapon = ar_light_gun ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 23
4288: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4289: LD_ADDR_OWVAR 37
4293: PUSH
4294: LD_INT 13
4296: ST_TO_ADDR
// vc_control = control_manual ;
4297: LD_ADDR_OWVAR 38
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// vc_engine = engine_combustion ;
4305: LD_ADDR_OWVAR 39
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4313: LD_ADDR_OWVAR 41
4317: PUSH
4318: LD_INT 100
4320: ST_TO_ADDR
// veh = CreateVehicle ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: CALL_OW 45
4330: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4331: LD_ADDR_EXP 64
4335: PUSH
4336: LD_EXP 64
4340: PUSH
4341: LD_VAR 0 4
4345: ADD
4346: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4347: LD_VAR 0 4
4351: PPUSH
4352: LD_INT 7
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_EXP 32
4369: PUSH
4370: LD_INT 1
4372: MINUS
4373: PPUSH
4374: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4378: CALL_OW 44
4382: PPUSH
4383: LD_VAR 0 4
4387: PPUSH
4388: CALL_OW 52
// end ; end_of_file
4392: LD_VAR 0 1
4396: RET
// export function Nef_PrepareNature ; var i , un ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4402: LD_ADDR_VAR 0 2
4406: PUSH
4407: DOUBLE
4408: LD_INT 1
4410: DEC
4411: ST_TO_ADDR
4412: LD_EXP 26
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4532
// begin uc_side = 0 ;
4424: LD_ADDR_OWVAR 20
4428: PUSH
4429: LD_INT 0
4431: ST_TO_ADDR
// uc_nation = nation_nature ;
4432: LD_ADDR_OWVAR 21
4436: PUSH
4437: LD_INT 0
4439: ST_TO_ADDR
// hc_class = class_apeman ;
4440: LD_ADDR_OWVAR 28
4444: PUSH
4445: LD_INT 12
4447: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4448: LD_ADDR_OWVAR 31
4452: PUSH
4453: LD_EXP 27
4457: PUSH
4458: LD_INT 1
4460: ARRAY
4461: PUSH
4462: LD_EXP 27
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: PUSH
4471: LD_EXP 27
4475: PUSH
4476: LD_INT 3
4478: ARRAY
4479: PUSH
4480: LD_EXP 27
4484: PUSH
4485: LD_INT 4
4487: ARRAY
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4495: LD_ADDR_OWVAR 35
4499: PUSH
4500: LD_EXP 28
4504: ST_TO_ADDR
// un = CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_INT 8
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
// end ;
4530: GO 4421
4532: POP
4533: POP
// for i := 1 to animalsAmount [ 2 ] do
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: DOUBLE
4540: LD_INT 1
4542: DEC
4543: ST_TO_ADDR
4544: LD_EXP 26
4548: PUSH
4549: LD_INT 2
4551: ARRAY
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4664
// begin uc_side = 0 ;
4556: LD_ADDR_OWVAR 20
4560: PUSH
4561: LD_INT 0
4563: ST_TO_ADDR
// uc_nation = nation_nature ;
4564: LD_ADDR_OWVAR 21
4568: PUSH
4569: LD_INT 0
4571: ST_TO_ADDR
// hc_class = class_phororhacos ;
4572: LD_ADDR_OWVAR 28
4576: PUSH
4577: LD_INT 18
4579: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4580: LD_ADDR_OWVAR 31
4584: PUSH
4585: LD_EXP 27
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PUSH
4594: LD_EXP 27
4598: PUSH
4599: LD_INT 2
4601: ARRAY
4602: PUSH
4603: LD_EXP 27
4607: PUSH
4608: LD_INT 3
4610: ARRAY
4611: PUSH
4612: LD_EXP 27
4616: PUSH
4617: LD_INT 4
4619: ARRAY
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4627: LD_ADDR_OWVAR 35
4631: PUSH
4632: LD_EXP 28
4636: ST_TO_ADDR
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 8
4654: PPUSH
4655: LD_INT 0
4657: PPUSH
4658: CALL_OW 49
// end ;
4662: GO 4553
4664: POP
4665: POP
// for i := 1 to animalsAmount [ 3 ] do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_EXP 26
4680: PUSH
4681: LD_INT 3
4683: ARRAY
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4796
// begin uc_side = 0 ;
4688: LD_ADDR_OWVAR 20
4692: PUSH
4693: LD_INT 0
4695: ST_TO_ADDR
// uc_nation = nation_nature ;
4696: LD_ADDR_OWVAR 21
4700: PUSH
4701: LD_INT 0
4703: ST_TO_ADDR
// hc_class = class_tiger ;
4704: LD_ADDR_OWVAR 28
4708: PUSH
4709: LD_INT 14
4711: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4712: LD_ADDR_OWVAR 31
4716: PUSH
4717: LD_EXP 27
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PUSH
4726: LD_EXP 27
4730: PUSH
4731: LD_INT 2
4733: ARRAY
4734: PUSH
4735: LD_EXP 27
4739: PUSH
4740: LD_INT 3
4742: ARRAY
4743: PUSH
4744: LD_EXP 27
4748: PUSH
4749: LD_INT 4
4751: ARRAY
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4759: LD_ADDR_OWVAR 35
4763: PUSH
4764: LD_EXP 28
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 8
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// end ;
4794: GO 4685
4796: POP
4797: POP
// for i := 1 to animalsAmount [ 4 ] do
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: DOUBLE
4804: LD_INT 1
4806: DEC
4807: ST_TO_ADDR
4808: LD_EXP 26
4812: PUSH
4813: LD_INT 4
4815: ARRAY
4816: PUSH
4817: FOR_TO
4818: IFFALSE 4928
// begin uc_side = 0 ;
4820: LD_ADDR_OWVAR 20
4824: PUSH
4825: LD_INT 0
4827: ST_TO_ADDR
// uc_nation = nation_nature ;
4828: LD_ADDR_OWVAR 21
4832: PUSH
4833: LD_INT 0
4835: ST_TO_ADDR
// hc_class = 21 ;
4836: LD_ADDR_OWVAR 28
4840: PUSH
4841: LD_INT 21
4843: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4844: LD_ADDR_OWVAR 31
4848: PUSH
4849: LD_EXP 27
4853: PUSH
4854: LD_INT 1
4856: ARRAY
4857: PUSH
4858: LD_EXP 27
4862: PUSH
4863: LD_INT 2
4865: ARRAY
4866: PUSH
4867: LD_EXP 27
4871: PUSH
4872: LD_INT 3
4874: ARRAY
4875: PUSH
4876: LD_EXP 27
4880: PUSH
4881: LD_INT 4
4883: ARRAY
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4891: LD_ADDR_OWVAR 35
4895: PUSH
4896: LD_EXP 28
4900: ST_TO_ADDR
// un = CreateHuman ;
4901: LD_ADDR_VAR 0 3
4905: PUSH
4906: CALL_OW 44
4910: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4911: LD_VAR 0 3
4915: PPUSH
4916: LD_INT 8
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 49
// end ;
4926: GO 4817
4928: POP
4929: POP
// for i := 1 to animalsAmount [ 5 ] do
4930: LD_ADDR_VAR 0 2
4934: PUSH
4935: DOUBLE
4936: LD_INT 1
4938: DEC
4939: ST_TO_ADDR
4940: LD_EXP 26
4944: PUSH
4945: LD_INT 5
4947: ARRAY
4948: PUSH
4949: FOR_TO
4950: IFFALSE 5011
// begin uc_side = 0 ;
4952: LD_ADDR_OWVAR 20
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// uc_nation = nation_nature ;
4960: LD_ADDR_OWVAR 21
4964: PUSH
4965: LD_INT 0
4967: ST_TO_ADDR
// vc_chassis := 31 ;
4968: LD_ADDR_OWVAR 37
4972: PUSH
4973: LD_INT 31
4975: ST_TO_ADDR
// vc_control := control_rider ;
4976: LD_ADDR_OWVAR 38
4980: PUSH
4981: LD_INT 4
4983: ST_TO_ADDR
// un := CreateVehicle ;
4984: LD_ADDR_VAR 0 3
4988: PUSH
4989: CALL_OW 45
4993: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4994: LD_VAR 0 3
4998: PPUSH
4999: LD_INT 8
5001: PPUSH
5002: LD_INT 0
5004: PPUSH
5005: CALL_OW 49
// end ;
5009: GO 4949
5011: POP
5012: POP
// end ; end_of_file
5013: LD_VAR 0 1
5017: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5018: LD_INT 0
5020: PPUSH
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
5025: PPUSH
5026: PPUSH
5027: PPUSH
5028: PPUSH
5029: PPUSH
5030: PPUSH
5031: PPUSH
5032: PPUSH
5033: PPUSH
5034: PPUSH
5035: PPUSH
5036: PPUSH
5037: PPUSH
// for unit in units do
5038: LD_ADDR_VAR 0 8
5042: PUSH
5043: LD_VAR 0 1
5047: PUSH
5048: FOR_IN
5049: IFFALSE 5086
// if not ignorePath then
5051: LD_VAR 0 3
5055: NOT
5056: IFFALSE 5072
// SetTag ( unit , 0 ) else
5058: LD_VAR 0 8
5062: PPUSH
5063: LD_INT 0
5065: PPUSH
5066: CALL_OW 109
5070: GO 5084
// SetTag ( unit , 1 ) ;
5072: LD_VAR 0 8
5076: PPUSH
5077: LD_INT 1
5079: PPUSH
5080: CALL_OW 109
5084: GO 5048
5086: POP
5087: POP
// startAttacks = false ;
5088: LD_ADDR_VAR 0 21
5092: PUSH
5093: LD_INT 0
5095: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5096: LD_ADDR_VAR 0 17
5100: PUSH
5101: LD_VAR 0 2
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PUSH
5112: LD_INT 1
5114: ARRAY
5115: PUSH
5116: LD_VAR 0 2
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: ST_TO_ADDR
// mechanics = [ ] ;
5135: LD_ADDR_VAR 0 12
5139: PUSH
5140: EMPTY
5141: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5142: LD_ADDR_VAR 0 9
5146: PUSH
5147: LD_VAR 0 1
5151: PPUSH
5152: LD_INT 50
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 72
5194: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5195: LD_ADDR_VAR 0 11
5199: PUSH
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_INT 50
5207: PUSH
5208: EMPTY
5209: LIST
5210: PUSH
5211: LD_INT 25
5213: PUSH
5214: LD_INT 4
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 72
5229: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5230: LD_ADDR_VAR 0 13
5234: PUSH
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_INT 21
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 24
5255: PUSH
5256: LD_INT 1000
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 72
5275: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5276: LD_ADDR_VAR 0 15
5280: PUSH
5281: LD_INT 9
5283: PPUSH
5284: CALL_OW 435
5288: ST_TO_ADDR
// if not ignorePath then
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 6276
// begin for unit in attackUnits do
5296: LD_ADDR_VAR 0 8
5300: PUSH
5301: LD_VAR 0 9
5305: PUSH
5306: FOR_IN
5307: IFFALSE 6050
// begin if path and not startAttacks then
5309: LD_VAR 0 2
5313: PUSH
5314: LD_VAR 0 21
5318: NOT
5319: AND
5320: IFFALSE 6039
// begin i = 1 ;
5322: LD_ADDR_VAR 0 7
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5330: LD_ADDR_VAR 0 15
5334: PUSH
5335: LD_INT 9
5337: PPUSH
5338: CALL_OW 435
5342: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5343: LD_ADDR_VAR 0 18
5347: PUSH
5348: LD_INT 81
5350: PUSH
5351: LD_VAR 0 8
5355: PPUSH
5356: CALL_OW 255
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_VAR 0 8
5374: PPUSH
5375: CALL_OW 74
5379: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5380: LD_ADDR_VAR 0 19
5384: PUSH
5385: LD_VAR 0 15
5389: PPUSH
5390: LD_VAR 0 8
5394: PPUSH
5395: CALL_OW 250
5399: PPUSH
5400: LD_VAR 0 8
5404: PPUSH
5405: CALL_OW 251
5409: PPUSH
5410: CALL_OW 439
5414: ST_TO_ADDR
// if damageUnits and medics then
5415: LD_VAR 0 13
5419: PUSH
5420: LD_VAR 0 11
5424: AND
5425: IFFALSE 5447
// ComHeal ( medics , damageUnits [ 1 ] ) else
5427: LD_VAR 0 11
5431: PPUSH
5432: LD_VAR 0 13
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: CALL_OW 128
5445: GO 5490
// if medics then
5447: LD_VAR 0 11
5451: IFFALSE 5490
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5453: LD_VAR 0 11
5457: PPUSH
5458: LD_VAR 0 9
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 250
5471: PPUSH
5472: LD_VAR 0 9
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 251
5485: PPUSH
5486: CALL_OW 111
// if not HasTask ( unit ) then
5490: LD_VAR 0 8
5494: PPUSH
5495: CALL_OW 314
5499: NOT
5500: IFFALSE 5739
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5502: LD_ADDR_VAR 0 19
5506: PUSH
5507: LD_VAR 0 15
5511: PPUSH
5512: LD_VAR 0 8
5516: PPUSH
5517: CALL_OW 250
5521: PPUSH
5522: LD_VAR 0 8
5526: PPUSH
5527: CALL_OW 251
5531: PPUSH
5532: CALL_OW 439
5536: ST_TO_ADDR
// if i > crates then
5537: LD_VAR 0 7
5541: PUSH
5542: LD_VAR 0 15
5546: GREATER
5547: IFFALSE 5557
// i = 1 ;
5549: LD_ADDR_VAR 0 7
5553: PUSH
5554: LD_INT 1
5556: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5557: LD_VAR 0 18
5561: PUSH
5562: LD_VAR 0 19
5566: AND
5567: IFFALSE 5682
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5569: LD_VAR 0 8
5573: PPUSH
5574: LD_VAR 0 18
5578: PPUSH
5579: CALL_OW 250
5583: PPUSH
5584: LD_VAR 0 18
5588: PPUSH
5589: CALL_OW 251
5593: PPUSH
5594: CALL_OW 297
5598: PUSH
5599: LD_VAR 0 8
5603: PPUSH
5604: LD_VAR 0 19
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 19
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 297
5626: LESS
5627: IFFALSE 5645
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5629: LD_VAR 0 9
5633: PPUSH
5634: LD_VAR 0 18
5638: PPUSH
5639: CALL_OW 115
5643: GO 5680
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5645: LD_VAR 0 9
5649: PPUSH
5650: LD_VAR 0 15
5654: PUSH
5655: LD_VAR 0 7
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 15
5665: PUSH
5666: LD_VAR 0 7
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: CALL_OW 116
// end else
5680: GO 5739
// if crates then
5682: LD_VAR 0 15
5686: IFFALSE 5725
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5688: LD_VAR 0 9
5692: PPUSH
5693: LD_VAR 0 15
5697: PUSH
5698: LD_VAR 0 7
5702: ARRAY
5703: PPUSH
5704: LD_VAR 0 15
5708: PUSH
5709: LD_VAR 0 7
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: ARRAY
5718: PPUSH
5719: CALL_OW 116
5723: GO 5739
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5725: LD_VAR 0 9
5729: PPUSH
5730: LD_VAR 0 18
5734: PPUSH
5735: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// if path then
5746: LD_VAR 0 2
5750: IFFALSE 5836
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5752: LD_ADDR_VAR 0 16
5756: PUSH
5757: LD_VAR 0 8
5761: PPUSH
5762: LD_VAR 0 2
5766: PPUSH
5767: CALL 7166 0 2
5771: ST_TO_ADDR
// if agressiveMove then
5772: LD_VAR 0 4
5776: IFFALSE 5807
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5778: LD_VAR 0 9
5782: PPUSH
5783: LD_VAR 0 16
5787: PUSH
5788: LD_INT 1
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 16
5796: PUSH
5797: LD_INT 2
5799: ARRAY
5800: PPUSH
5801: CALL_OW 114
5805: GO 5834
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5807: LD_VAR 0 9
5811: PPUSH
5812: LD_VAR 0 16
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: LD_VAR 0 16
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 111
// end else
5834: GO 5844
// startAttacks = true ;
5836: LD_ADDR_VAR 0 21
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// i = i + 2 ;
5844: LD_ADDR_VAR 0 7
5848: PUSH
5849: LD_VAR 0 7
5853: PUSH
5854: LD_INT 2
5856: PLUS
5857: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5858: LD_VAR 0 8
5862: PPUSH
5863: CALL_OW 314
5867: NOT
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_VAR 0 8
5876: PPUSH
5877: CALL_OW 255
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 92
5888: PUSH
5889: LD_VAR 0 16
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PUSH
5898: LD_VAR 0 16
5902: PUSH
5903: LD_INT 2
5905: ARRAY
5906: PUSH
5907: LD_INT 4
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_INT 3
5927: GREATER
5928: AND
5929: PUSH
5930: LD_VAR 0 21
5934: NOT
5935: AND
5936: IFFALSE 5330
// for i := 1 to path do
5938: LD_ADDR_VAR 0 7
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6037
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5956: LD_VAR 0 2
5960: PUSH
5961: LD_VAR 0 7
5965: ARRAY
5966: PUSH
5967: LD_INT 1
5969: ARRAY
5970: PUSH
5971: LD_VAR 0 16
5975: PUSH
5976: LD_INT 1
5978: ARRAY
5979: EQUAL
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_VAR 0 7
5990: ARRAY
5991: PUSH
5992: LD_INT 2
5994: ARRAY
5995: PUSH
5996: LD_VAR 0 16
6000: PUSH
6001: LD_INT 2
6003: ARRAY
6004: EQUAL
6005: AND
6006: IFFALSE 6035
// begin path = path diff [ path [ i ] ] ;
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: LD_VAR 0 2
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_VAR 0 7
6027: ARRAY
6028: PUSH
6029: EMPTY
6030: LIST
6031: DIFF
6032: ST_TO_ADDR
// break ;
6033: GO 6037
// end ;
6035: GO 5953
6037: POP
6038: POP
// end ; if not path then
6039: LD_VAR 0 2
6043: NOT
6044: IFFALSE 6048
// break ;
6046: GO 6050
// end ;
6048: GO 5306
6050: POP
6051: POP
// repeat unitsReachPathEnd = 0 ;
6052: LD_ADDR_VAR 0 20
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// for attackUnit in attackUnits do
6060: LD_ADDR_VAR 0 10
6064: PUSH
6065: LD_VAR 0 9
6069: PUSH
6070: FOR_IN
6071: IFFALSE 6244
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6073: LD_VAR 0 10
6077: PPUSH
6078: LD_VAR 0 17
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: LD_VAR 0 17
6091: PUSH
6092: LD_INT 2
6094: ARRAY
6095: PPUSH
6096: CALL_OW 297
6100: PUSH
6101: LD_INT 7
6103: LESS
6104: NOT
6105: PUSH
6106: LD_VAR 0 10
6110: PPUSH
6111: CALL_OW 110
6115: PUSH
6116: LD_INT 0
6118: EQUAL
6119: AND
6120: IFFALSE 6186
// begin if agressiveMove then
6122: LD_VAR 0 4
6126: IFFALSE 6157
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6128: LD_VAR 0 10
6132: PPUSH
6133: LD_VAR 0 17
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: LD_VAR 0 17
6146: PUSH
6147: LD_INT 2
6149: ARRAY
6150: PPUSH
6151: CALL_OW 114
6155: GO 6184
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6157: LD_VAR 0 10
6161: PPUSH
6162: LD_VAR 0 17
6166: PUSH
6167: LD_INT 1
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 17
6175: PUSH
6176: LD_INT 2
6178: ARRAY
6179: PPUSH
6180: CALL_OW 111
// end else
6184: GO 6213
// if GetTag ( attackUnit ) = 0 then
6186: LD_VAR 0 10
6190: PPUSH
6191: CALL_OW 110
6195: PUSH
6196: LD_INT 0
6198: EQUAL
6199: IFFALSE 6213
// SetTag ( attackUnit , 1 ) ;
6201: LD_VAR 0 10
6205: PPUSH
6206: LD_INT 1
6208: PPUSH
6209: CALL_OW 109
// if GetTag ( unit ) = 1 then
6213: LD_VAR 0 8
6217: PPUSH
6218: CALL_OW 110
6222: PUSH
6223: LD_INT 1
6225: EQUAL
6226: IFFALSE 6242
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6228: LD_ADDR_VAR 0 20
6232: PUSH
6233: LD_VAR 0 20
6237: PUSH
6238: LD_INT 1
6240: PLUS
6241: ST_TO_ADDR
// end ;
6242: GO 6070
6244: POP
6245: POP
// wait ( 0 0$1 ) ;
6246: LD_INT 35
6248: PPUSH
6249: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6253: LD_VAR 0 20
6257: PUSH
6258: LD_VAR 0 9
6262: PUSH
6263: LD_INT 3
6265: MINUS
6266: GREATER
6267: IFFALSE 6052
// wait ( 0 0$10 ) ;
6269: LD_INT 350
6271: PPUSH
6272: CALL_OW 67
// end ; for attackUnit in attackUnits do
6276: LD_ADDR_VAR 0 10
6280: PUSH
6281: LD_VAR 0 9
6285: PUSH
6286: FOR_IN
6287: IFFALSE 6303
// SetTag ( attackUnit , 2 ) ;
6289: LD_VAR 0 10
6293: PPUSH
6294: LD_INT 2
6296: PPUSH
6297: CALL_OW 109
6301: GO 6286
6303: POP
6304: POP
// startAttacks = true ;
6305: LD_ADDR_VAR 0 21
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// if startAttacks then
6313: LD_VAR 0 21
6317: IFFALSE 7136
// begin repeat wait ( 0 0$1 ) ;
6319: LD_INT 35
6321: PPUSH
6322: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6326: LD_ADDR_VAR 0 11
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 50
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 72
6360: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6361: LD_ADDR_VAR 0 13
6365: PUSH
6366: LD_VAR 0 1
6370: PPUSH
6371: LD_INT 21
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: LD_INT 25
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 24
6396: PUSH
6397: LD_INT 1000
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: ST_TO_ADDR
// if damageUnits and medics then
6418: LD_VAR 0 13
6422: PUSH
6423: LD_VAR 0 11
6427: AND
6428: IFFALSE 6450
// ComHeal ( medics , damageUnits [ 1 ] ) else
6430: LD_VAR 0 11
6434: PPUSH
6435: LD_VAR 0 13
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: CALL_OW 128
6448: GO 6500
// if medics and not damageUnits then
6450: LD_VAR 0 11
6454: PUSH
6455: LD_VAR 0 13
6459: NOT
6460: AND
6461: IFFALSE 6500
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6463: LD_VAR 0 11
6467: PPUSH
6468: LD_VAR 0 9
6472: PUSH
6473: LD_INT 1
6475: ARRAY
6476: PPUSH
6477: CALL_OW 250
6481: PPUSH
6482: LD_VAR 0 9
6486: PUSH
6487: LD_INT 1
6489: ARRAY
6490: PPUSH
6491: CALL_OW 251
6495: PPUSH
6496: CALL_OW 111
// for attackUnit in attackUnits do
6500: LD_ADDR_VAR 0 10
6504: PUSH
6505: LD_VAR 0 9
6509: PUSH
6510: FOR_IN
6511: IFFALSE 7127
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6513: LD_ADDR_VAR 0 22
6517: PUSH
6518: LD_INT 81
6520: PUSH
6521: LD_VAR 0 10
6525: PPUSH
6526: CALL_OW 255
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: PPUSH
6540: LD_VAR 0 10
6544: PPUSH
6545: CALL_OW 74
6549: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6550: LD_ADDR_VAR 0 23
6554: PUSH
6555: LD_INT 81
6557: PUSH
6558: LD_VAR 0 10
6562: PPUSH
6563: CALL_OW 255
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 59
6577: PUSH
6578: EMPTY
6579: LIST
6580: PUSH
6581: LD_INT 21
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 21
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: PPUSH
6619: LD_VAR 0 10
6623: PPUSH
6624: CALL_OW 74
6628: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6629: LD_VAR 0 10
6633: PPUSH
6634: CALL_OW 110
6638: PUSH
6639: LD_INT 2
6641: EQUAL
6642: IFFALSE 6802
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6644: LD_VAR 0 10
6648: PPUSH
6649: LD_VAR 0 22
6653: PPUSH
6654: CALL_OW 296
6658: PUSH
6659: LD_INT 10
6661: PLUS
6662: PUSH
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 23
6672: PPUSH
6673: CALL_OW 296
6677: LESS
6678: IFFALSE 6696
// ComAttackUnit ( attackUnit , target1 ) else
6680: LD_VAR 0 10
6684: PPUSH
6685: LD_VAR 0 22
6689: PPUSH
6690: CALL_OW 115
6694: GO 6710
// ComAttackUnit ( attackUnit , target2 ) ;
6696: LD_VAR 0 10
6700: PPUSH
6701: LD_VAR 0 23
6705: PPUSH
6706: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6710: LD_VAR 0 10
6714: PPUSH
6715: CALL_OW 256
6719: PUSH
6720: LD_INT 650
6722: LESS
6723: PUSH
6724: LD_VAR 0 10
6728: PPUSH
6729: CALL_OW 247
6733: PUSH
6734: LD_INT 2
6736: EQUAL
6737: AND
6738: PUSH
6739: LD_VAR 0 10
6743: PPUSH
6744: CALL_OW 263
6748: PUSH
6749: LD_INT 1
6751: EQUAL
6752: AND
6753: IFFALSE 6802
// begin SetTag ( attackUnit , 3 ) ;
6755: LD_VAR 0 10
6759: PPUSH
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 313
6776: PUSH
6777: LD_INT 1
6779: ARRAY
6780: PPUSH
6781: LD_INT 3
6783: PPUSH
6784: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6788: LD_VAR 0 10
6792: PPUSH
6793: LD_VAR 0 5
6797: PPUSH
6798: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6802: LD_VAR 0 10
6806: PPUSH
6807: LD_VAR 0 5
6811: PPUSH
6812: CALL_OW 308
6816: PUSH
6817: LD_VAR 0 10
6821: PPUSH
6822: CALL_OW 110
6826: PUSH
6827: LD_INT 3
6829: EQUAL
6830: AND
6831: PUSH
6832: LD_VAR 0 10
6836: PPUSH
6837: CALL_OW 313
6841: AND
6842: IFFALSE 6915
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6844: LD_ADDR_VAR 0 14
6848: PUSH
6849: LD_VAR 0 10
6853: PPUSH
6854: CALL_OW 313
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: ST_TO_ADDR
// if not driver in mechanics then
6863: LD_VAR 0 14
6867: PUSH
6868: LD_VAR 0 12
6872: IN
6873: NOT
6874: IFFALSE 6892
// mechanics = mechanics ^ driver ;
6876: LD_ADDR_VAR 0 12
6880: PUSH
6881: LD_VAR 0 12
6885: PUSH
6886: LD_VAR 0 14
6890: ADD
6891: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6892: LD_VAR 0 14
6896: PPUSH
6897: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6901: LD_VAR 0 14
6905: PPUSH
6906: LD_VAR 0 10
6910: PPUSH
6911: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6915: LD_VAR 0 10
6919: PPUSH
6920: CALL_OW 256
6924: PUSH
6925: LD_INT 1000
6927: EQUAL
6928: IFFALSE 7046
// begin SetTag ( attackUnit , 2 ) ;
6930: LD_VAR 0 10
6934: PPUSH
6935: LD_INT 2
6937: PPUSH
6938: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6942: LD_VAR 0 10
6946: PPUSH
6947: CALL_OW 247
6951: PUSH
6952: LD_INT 2
6954: EQUAL
6955: PUSH
6956: LD_VAR 0 10
6960: PPUSH
6961: CALL_OW 263
6965: PUSH
6966: LD_INT 1
6968: EQUAL
6969: AND
6970: PUSH
6971: LD_VAR 0 10
6975: PPUSH
6976: CALL_OW 313
6980: NOT
6981: AND
6982: IFFALSE 7046
// begin SetFuel ( attackUnit , 100 ) ;
6984: LD_VAR 0 10
6988: PPUSH
6989: LD_INT 100
6991: PPUSH
6992: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6996: LD_VAR 0 12
7000: PPUSH
7001: LD_VAR 0 10
7005: PPUSH
7006: CALL_OW 74
7010: PPUSH
7011: LD_VAR 0 10
7015: PPUSH
7016: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7020: LD_ADDR_VAR 0 12
7024: PUSH
7025: LD_VAR 0 12
7029: PUSH
7030: LD_VAR 0 12
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 74
7044: DIFF
7045: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7046: LD_ADDR_VAR 0 8
7050: PUSH
7051: LD_VAR 0 12
7055: PUSH
7056: FOR_IN
7057: IFFALSE 7123
// begin if not IsInArea ( unit , retreatArea ) then
7059: LD_VAR 0 8
7063: PPUSH
7064: LD_VAR 0 5
7068: PPUSH
7069: CALL_OW 308
7073: NOT
7074: IFFALSE 7090
// ComMoveToArea ( unit , retreatArea ) ;
7076: LD_VAR 0 8
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 113
// if GetLives ( unit ) < 250 then
7090: LD_VAR 0 8
7094: PPUSH
7095: CALL_OW 256
7099: PUSH
7100: LD_INT 250
7102: LESS
7103: IFFALSE 7121
// mechanics = mechanics diff unit ;
7105: LD_ADDR_VAR 0 12
7109: PUSH
7110: LD_VAR 0 12
7114: PUSH
7115: LD_VAR 0 8
7119: DIFF
7120: ST_TO_ADDR
// end ;
7121: GO 7056
7123: POP
7124: POP
// end ;
7125: GO 6510
7127: POP
7128: POP
// until not attackUnits ;
7129: LD_VAR 0 9
7133: NOT
7134: IFFALSE 6319
// end ; wait ( 0 0$1 ) ;
7136: LD_INT 35
7138: PPUSH
7139: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7143: LD_VAR 0 1
7147: PPUSH
7148: LD_INT 50
7150: PUSH
7151: EMPTY
7152: LIST
7153: PPUSH
7154: CALL_OW 72
7158: NOT
7159: IFFALSE 5142
// end ;
7161: LD_VAR 0 6
7165: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7166: LD_INT 0
7168: PPUSH
7169: PPUSH
7170: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7171: LD_ADDR_VAR 0 5
7175: PUSH
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PUSH
7185: LD_INT 1
7187: ARRAY
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: LD_INT 1
7196: ARRAY
7197: PUSH
7198: LD_INT 2
7200: ARRAY
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// for i := 2 to path do
7206: LD_ADDR_VAR 0 4
7210: PUSH
7211: DOUBLE
7212: LD_INT 2
7214: DEC
7215: ST_TO_ADDR
7216: LD_VAR 0 2
7220: PUSH
7221: FOR_TO
7222: IFFALSE 7362
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_VAR 0 2
7233: PUSH
7234: LD_VAR 0 4
7238: ARRAY
7239: PUSH
7240: LD_INT 1
7242: ARRAY
7243: PPUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_VAR 0 4
7253: ARRAY
7254: PUSH
7255: LD_INT 2
7257: ARRAY
7258: PPUSH
7259: CALL_OW 297
7263: PUSH
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 5
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL_OW 297
7291: LESS
7292: IFFALSE 7360
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7294: LD_ADDR_VAR 0 5
7298: PUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_VAR 0 4
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: CALL_OW 1
7326: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7327: LD_ADDR_VAR 0 5
7331: PUSH
7332: LD_VAR 0 5
7336: PPUSH
7337: LD_INT 2
7339: PPUSH
7340: LD_VAR 0 2
7344: PUSH
7345: LD_VAR 0 4
7349: ARRAY
7350: PUSH
7351: LD_INT 2
7353: ARRAY
7354: PPUSH
7355: CALL_OW 1
7359: ST_TO_ADDR
// end ; end ;
7360: GO 7221
7362: POP
7363: POP
// result = nearPosition ;
7364: LD_ADDR_VAR 0 3
7368: PUSH
7369: LD_VAR 0 5
7373: ST_TO_ADDR
// end ;
7374: LD_VAR 0 3
7378: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7379: LD_EXP 58
7383: PPUSH
7384: CALL_OW 274
7388: PPUSH
7389: LD_INT 1
7391: PPUSH
7392: CALL_OW 275
7396: PUSH
7397: LD_INT 0
7399: GREATER
7400: IFFALSE 7506
7402: GO 7404
7404: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7405: LD_EXP 57
7409: PPUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 72
7424: PPUSH
7425: LD_INT 31
7427: PPUSH
7428: LD_INT 105
7430: PPUSH
7431: LD_INT 51
7433: PPUSH
7434: LD_INT 3
7436: PPUSH
7437: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7441: LD_EXP 57
7445: PPUSH
7446: LD_INT 25
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 72
7460: PPUSH
7461: LD_INT 31
7463: PPUSH
7464: LD_INT 114
7466: PPUSH
7467: LD_INT 58
7469: PPUSH
7470: LD_INT 3
7472: PPUSH
7473: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7477: LD_EXP 57
7481: PPUSH
7482: LD_INT 25
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 72
7496: PPUSH
7497: LD_EXP 58
7501: PPUSH
7502: CALL_OW 180
// end ; end_of_file
7506: END
// export function Lose_Burlak ; begin
7507: LD_INT 0
7509: PPUSH
// YouLost ( Burlak ) ;
7510: LD_STRING Burlak
7512: PPUSH
7513: CALL_OW 104
// end ;
7517: LD_VAR 0 1
7521: RET
// export function Lose_Gaydar ; begin
7522: LD_INT 0
7524: PPUSH
// YouLost ( Gaydar ) ;
7525: LD_STRING Gaydar
7527: PPUSH
7528: CALL_OW 104
// end ;
7532: LD_VAR 0 1
7536: RET
// export function Lose_SelfAttack ; begin
7537: LD_INT 0
7539: PPUSH
// YouLost ( SelfAttack ) ;
7540: LD_STRING SelfAttack
7542: PPUSH
7543: CALL_OW 104
// end ;
7547: LD_VAR 0 1
7551: RET
// export function Lose_Arrest ; begin
7552: LD_INT 0
7554: PPUSH
// YouLost ( Arrest ) ;
7555: LD_STRING Arrest
7557: PPUSH
7558: CALL_OW 104
// end ;
7562: LD_VAR 0 1
7566: RET
// export function Lose_ArabBreakthrough ; begin
7567: LD_INT 0
7569: PPUSH
// YouLost ( ArabBreakthrough ) ;
7570: LD_STRING ArabBreakthrough
7572: PPUSH
7573: CALL_OW 104
// end ;
7577: LD_VAR 0 1
7581: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7582: LD_EXP 7
7586: NOT
7587: PUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 21
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 25
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: NOT
7628: AND
7629: PUSH
7630: LD_INT 22
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 21
7642: PUSH
7643: LD_INT 3
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 30
7652: PUSH
7653: LD_INT 0
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: PPUSH
7665: CALL_OW 69
7669: NOT
7670: AND
7671: IFFALSE 7684
7673: GO 7675
7675: DISABLE
// begin enable ;
7676: ENABLE
// YouLost ( Engineer ) ;
7677: LD_STRING Engineer
7679: PPUSH
7680: CALL_OW 104
// end ; end_of_file
7684: END
// export function FinishMission ; begin
7685: LD_INT 0
7687: PPUSH
// SetRewards ;
7688: CALL 7709 0 0
// SavePlayerCharacters ;
7692: CALL 8134 0 0
// SaveGlobalVariables ;
7696: CALL 8362 0 0
// YouWin ;
7700: CALL_OW 103
// end ;
7704: LD_VAR 0 1
7708: RET
// function SetRewards ; var unitsToReward ; begin
7709: LD_INT 0
7711: PPUSH
7712: PPUSH
// SetAchievements ;
7713: CALL 18515 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7717: LD_INT 22
7719: PUSH
7720: LD_INT 3
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 3
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 69
7745: NOT
7746: IFFALSE 7760
// AddMedal ( Dismantle , 1 ) else
7748: LD_STRING Dismantle
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 101
7758: GO 7771
// AddMedal ( Dismantle , - 1 ) ;
7760: LD_STRING Dismantle
7762: PPUSH
7763: LD_INT 1
7765: NEG
7766: PPUSH
7767: CALL_OW 101
// if killedArabianUnits >= 25 then
7771: LD_EXP 22
7775: PUSH
7776: LD_INT 25
7778: GREATEREQUAL
7779: IFFALSE 7801
// begin AddMedal ( EnemyLosses , 1 ) ;
7781: LD_STRING EnemyLosses
7783: PPUSH
7784: LD_INT 1
7786: PPUSH
7787: CALL_OW 101
// heikeHeavyLosses = true ;
7791: LD_ADDR_EXP 4
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// end else
7799: GO 7812
// AddMedal ( EnemyLosses , - 1 ) ;
7801: LD_STRING EnemyLosses
7803: PPUSH
7804: LD_INT 1
7806: NEG
7807: PPUSH
7808: CALL_OW 101
// if not lostUnits then
7812: LD_EXP 24
7816: NOT
7817: IFFALSE 7831
// AddMedal ( LittleLosses , 1 ) else
7819: LD_STRING LittleLosses
7821: PPUSH
7822: LD_INT 1
7824: PPUSH
7825: CALL_OW 101
7829: GO 7842
// AddMedal ( LittleLosses , - 1 ) ;
7831: LD_STRING LittleLosses
7833: PPUSH
7834: LD_INT 1
7836: NEG
7837: PPUSH
7838: CALL_OW 101
// GiveMedals ( Main ) ;
7842: LD_STRING Main
7844: PPUSH
7845: CALL_OW 102
// unitsToReward = [ ] ;
7849: LD_ADDR_VAR 0 2
7853: PUSH
7854: EMPTY
7855: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7856: LD_EXP 42
7860: PPUSH
7861: CALL_OW 255
7865: PUSH
7866: LD_INT 3
7868: EQUAL
7869: IFFALSE 7887
// unitsToReward = unitsToReward ^ Burlak ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_VAR 0 2
7880: PUSH
7881: LD_EXP 42
7885: ADD
7886: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7887: LD_EXP 43
7891: PPUSH
7892: CALL_OW 255
7896: PUSH
7897: LD_INT 3
7899: EQUAL
7900: IFFALSE 7918
// unitsToReward = unitsToReward ^ Gnyevko ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 2
7911: PUSH
7912: LD_EXP 43
7916: ADD
7917: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7918: LD_EXP 44
7922: PPUSH
7923: CALL_OW 255
7927: PUSH
7928: LD_INT 3
7930: EQUAL
7931: IFFALSE 7949
// unitsToReward = unitsToReward ^ Kirilenkova ;
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_VAR 0 2
7942: PUSH
7943: LD_EXP 44
7947: ADD
7948: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7949: LD_EXP 45
7953: PPUSH
7954: CALL_OW 255
7958: PUSH
7959: LD_INT 3
7961: EQUAL
7962: IFFALSE 7980
// unitsToReward = unitsToReward ^ Kovalyuk ;
7964: LD_ADDR_VAR 0 2
7968: PUSH
7969: LD_VAR 0 2
7973: PUSH
7974: LD_EXP 45
7978: ADD
7979: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
7980: LD_EXP 46
7984: PPUSH
7985: CALL_OW 255
7989: PUSH
7990: LD_INT 3
7992: EQUAL
7993: IFFALSE 8011
// unitsToReward = unitsToReward ^ Belkov ;
7995: LD_ADDR_VAR 0 2
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_EXP 46
8009: ADD
8010: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8011: LD_EXP 47
8015: PPUSH
8016: CALL_OW 255
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8042
// unitsToReward = unitsToReward ^ Belkov2 ;
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 2
8035: PUSH
8036: LD_EXP 47
8040: ADD
8041: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8042: LD_EXP 48
8046: PPUSH
8047: CALL_OW 255
8051: PUSH
8052: LD_INT 3
8054: EQUAL
8055: IFFALSE 8073
// unitsToReward = unitsToReward ^ Scholtze ;
8057: LD_ADDR_VAR 0 2
8061: PUSH
8062: LD_VAR 0 2
8066: PUSH
8067: LD_EXP 48
8071: ADD
8072: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8073: LD_EXP 49
8077: PPUSH
8078: CALL_OW 255
8082: PUSH
8083: LD_INT 3
8085: EQUAL
8086: IFFALSE 8104
// unitsToReward = unitsToReward ^ Kuzmov ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_VAR 0 2
8097: PUSH
8098: LD_EXP 49
8102: ADD
8103: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_EXP 62
8118: ADD
8119: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: CALL_OW 43
// end ;
8129: LD_VAR 0 1
8133: RET
// function SavePlayerCharacters ; var othersYour ; begin
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8138: LD_EXP 42
8142: PPUSH
8143: LD_STRING 04_Burlak
8145: PPUSH
8146: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8150: LD_EXP 43
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_INT 3
8162: EQUAL
8163: IFFALSE 8177
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8165: LD_EXP 43
8169: PPUSH
8170: LD_STRING 04_Gnyevko
8172: PPUSH
8173: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8177: LD_EXP 45
8181: PPUSH
8182: CALL_OW 255
8186: PUSH
8187: LD_INT 3
8189: EQUAL
8190: IFFALSE 8204
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8192: LD_EXP 45
8196: PPUSH
8197: LD_STRING 04_Kovalyuk
8199: PPUSH
8200: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8204: LD_EXP 44
8208: PPUSH
8209: CALL_OW 255
8213: PUSH
8214: LD_INT 3
8216: EQUAL
8217: IFFALSE 8231
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8219: LD_EXP 44
8223: PPUSH
8224: LD_STRING 04_Kirilenkova
8226: PPUSH
8227: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8231: LD_EXP 48
8235: PPUSH
8236: CALL_OW 255
8240: PUSH
8241: LD_INT 3
8243: EQUAL
8244: IFFALSE 8258
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8246: LD_EXP 48
8250: PPUSH
8251: LD_STRING 04_Scholtze
8253: PPUSH
8254: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8258: LD_EXP 46
8262: PPUSH
8263: CALL_OW 255
8267: PUSH
8268: LD_INT 3
8270: EQUAL
8271: IFFALSE 8285
// SaveCharacters ( Belkov , 04_Belkov ) ;
8273: LD_EXP 46
8277: PPUSH
8278: LD_STRING 04_Belkov
8280: PPUSH
8281: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8285: LD_EXP 47
8289: PPUSH
8290: CALL_OW 255
8294: PUSH
8295: LD_INT 3
8297: EQUAL
8298: IFFALSE 8312
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8300: LD_EXP 47
8304: PPUSH
8305: LD_STRING 04_Belkov2
8307: PPUSH
8308: CALL_OW 38
// if IsOK ( Kuzmov ) then
8312: LD_EXP 49
8316: PPUSH
8317: CALL_OW 302
8321: IFFALSE 8335
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8323: LD_EXP 49
8327: PPUSH
8328: LD_STRING 04_Kuzmov
8330: PPUSH
8331: CALL_OW 38
// othersYour = randomsToSave ;
8335: LD_ADDR_VAR 0 2
8339: PUSH
8340: LD_EXP 62
8344: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8345: LD_EXP 62
8349: PPUSH
8350: LD_STRING 04_other_survivors
8352: PPUSH
8353: CALL_OW 38
// end ;
8357: LD_VAR 0 1
8361: RET
// function SaveGlobalVariables ; begin
8362: LD_INT 0
8364: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8365: LD_EXP 4
8369: PPUSH
8370: LD_STRING 04_HeikeHeavyLosses_1
8372: PPUSH
8373: CALL_OW 39
// end ; end_of_file
8377: LD_VAR 0 1
8381: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 255
8391: PUSH
8392: LD_INT 3
8394: EQUAL
8395: PUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 266
8405: PUSH
8406: LD_INT 0
8408: EQUAL
8409: AND
8410: PUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: LD_INT 5
8418: PPUSH
8419: CALL_OW 308
8423: NOT
8424: AND
8425: IFFALSE 8436
// Dial_DepotInWrongPlace ( building ) ;
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL 11025 0 1
// end ;
8436: PPOPN 2
8438: END
// on BuildingComplete ( building ) do var i , cargo ;
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 255
8452: PUSH
8453: LD_INT 3
8455: EQUAL
8456: PUSH
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 266
8466: PUSH
8467: LD_INT 0
8469: EQUAL
8470: AND
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: LD_INT 5
8479: PPUSH
8480: CALL_OW 308
8484: AND
8485: PUSH
8486: LD_EXP 8
8490: NOT
8491: AND
8492: PUSH
8493: LD_EXP 9
8497: NOT
8498: AND
8499: IFFALSE 8525
// begin namedBase = true ;
8501: LD_ADDR_EXP 9
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8509: LD_VAR 0 1
8513: PPUSH
8514: LD_STRING chuikov
8516: PPUSH
8517: CALL_OW 500
// Dial_FinishDepot ;
8521: CALL 11299 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 255
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 266
8548: PUSH
8549: LD_INT 32
8551: EQUAL
8552: AND
8553: IFFALSE 8569
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8555: LD_ADDR_EXP 25
8559: PUSH
8560: LD_EXP 25
8564: PUSH
8565: LD_INT 1
8567: PLUS
8568: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 255
8578: PUSH
8579: LD_INT 6
8581: EQUAL
8582: PUSH
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 266
8592: PUSH
8593: LD_INT 0
8595: EQUAL
8596: AND
8597: IFFALSE 8796
// begin secondBaseDepot = building ;
8599: LD_ADDR_EXP 58
8603: PUSH
8604: LD_VAR 0 1
8608: ST_TO_ADDR
// uc_side = 6 ;
8609: LD_ADDR_OWVAR 20
8613: PUSH
8614: LD_INT 6
8616: ST_TO_ADDR
// uc_nation = nation_russian ;
8617: LD_ADDR_OWVAR 21
8621: PUSH
8622: LD_INT 3
8624: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8625: LD_ADDR_OWVAR 37
8629: PUSH
8630: LD_INT 21
8632: ST_TO_ADDR
// vc_control = control_manual ;
8633: LD_ADDR_OWVAR 38
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// vc_engine = engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8649: LD_ADDR_OWVAR 40
8653: PUSH
8654: LD_INT 51
8656: ST_TO_ADDR
// cargo = CreateVehicle ;
8657: LD_ADDR_VAR 0 3
8661: PUSH
8662: CALL_OW 45
8666: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_INT 3
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_INT 100
8692: PPUSH
8693: CALL_OW 291
// ComGive ( cargo , building ) ;
8697: LD_VAR 0 3
8701: PPUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8721: CALL_OW 44
8725: PPUSH
8726: LD_VAR 0 3
8730: PPUSH
8731: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: DOUBLE
8741: LD_INT 10
8743: DEC
8744: ST_TO_ADDR
8745: LD_EXP 34
8749: PUSH
8750: FOR_TO
8751: IFFALSE 8794
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8753: LD_VAR 0 3
8757: PPUSH
8758: LD_EXP 34
8762: PUSH
8763: LD_VAR 0 2
8767: ARRAY
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_EXP 34
8777: PUSH
8778: LD_VAR 0 2
8782: ARRAY
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PPUSH
8788: CALL_OW 171
8792: GO 8750
8794: POP
8795: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 255
8805: PUSH
8806: LD_INT 6
8808: EQUAL
8809: PUSH
8810: LD_VAR 0 1
8814: PPUSH
8815: CALL_OW 266
8819: PUSH
8820: LD_INT 31
8822: EQUAL
8823: AND
8824: IFFALSE 8869
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8826: LD_EXP 57
8830: PPUSH
8831: LD_INT 25
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 56
8843: PUSH
8844: EMPTY
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 72
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 120
// end ;
8869: PPOPN 3
8871: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 266
8881: PUSH
8882: LD_INT 7
8884: EQUAL
8885: PUSH
8886: LD_EXP 15
8890: NOT
8891: AND
8892: IFFALSE 8898
// Dial_LabUpgraded ;
8894: CALL 11619 0 0
// end ;
8898: PPOPN 1
8900: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8901: LD_VAR 0 1
8905: PUSH
8906: LD_INT 3
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PUSH
8915: LD_INT 2
8917: EQUAL
8918: AND
8919: PUSH
8920: LD_VAR 0 1
8924: PUSH
8925: LD_INT 2
8927: EQUAL
8928: PUSH
8929: LD_VAR 0 2
8933: PUSH
8934: LD_INT 3
8936: EQUAL
8937: AND
8938: OR
8939: IFFALSE 8961
// begin if dial_contactBlock then
8941: LD_EXP 16
8945: IFFALSE 8949
// exit ;
8947: GO 9005
// dial_contactBlock = true ;
8949: LD_ADDR_EXP 16
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// Dial_Contact ;
8957: CALL 13834 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8961: LD_VAR 0 1
8965: PUSH
8966: LD_INT 3
8968: EQUAL
8969: PUSH
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 6
8977: EQUAL
8978: AND
8979: PUSH
8980: LD_VAR 0 1
8984: PUSH
8985: LD_INT 6
8987: EQUAL
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: LD_INT 3
8996: EQUAL
8997: AND
8998: OR
8999: IFFALSE 9005
// Lose_SelfAttack ;
9001: CALL 7537 0 0
// end ;
9005: PPOPN 2
9007: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9008: LD_VAR 0 1
9012: PUSH
9013: LD_EXP 42
9017: EQUAL
9018: IFFALSE 9024
// Lose_Burlak ;
9020: CALL 7507 0 0
// if unit = Gaydar then
9024: LD_VAR 0 1
9028: PUSH
9029: LD_EXP 54
9033: EQUAL
9034: IFFALSE 9040
// Lose_Gaydar ;
9036: CALL 7522 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9040: LD_VAR 0 1
9044: PPUSH
9045: CALL_OW 255
9049: PUSH
9050: LD_INT 3
9052: EQUAL
9053: PUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 247
9063: PUSH
9064: LD_INT 1
9066: EQUAL
9067: AND
9068: IFFALSE 9084
// lostUnits = lostUnits + 1 ;
9070: LD_ADDR_EXP 24
9074: PUSH
9075: LD_EXP 24
9079: PUSH
9080: LD_INT 1
9082: PLUS
9083: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PUSH
9094: LD_INT 2
9096: EQUAL
9097: PUSH
9098: LD_VAR 0 1
9102: PPUSH
9103: CALL_OW 247
9107: PUSH
9108: LD_INT 1
9110: EQUAL
9111: AND
9112: PUSH
9113: LD_EXP 54
9117: PPUSH
9118: CALL_OW 305
9122: NOT
9123: AND
9124: IFFALSE 9140
// killedArabianUnits = killedArabianUnits + 1 ;
9126: LD_ADDR_EXP 22
9130: PUSH
9131: LD_EXP 22
9135: PUSH
9136: LD_INT 1
9138: PLUS
9139: ST_TO_ADDR
// if unit in firstAttackGroup then
9140: LD_VAR 0 1
9144: PUSH
9145: LD_EXP 64
9149: IN
9150: IFFALSE 9168
// firstAttackGroup = firstAttackGroup diff unit ;
9152: LD_ADDR_EXP 64
9156: PUSH
9157: LD_EXP 64
9161: PUSH
9162: LD_VAR 0 1
9166: DIFF
9167: ST_TO_ADDR
// end ;
9168: PPOPN 1
9170: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9171: LD_VAR 0 2
9175: PUSH
9176: LD_INT 6
9178: EQUAL
9179: IFFALSE 9193
// SetSide ( building , 6 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 6
9188: PPUSH
9189: CALL_OW 235
// end ;
9193: PPOPN 3
9195: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 34
9225: PUSH
9226: LD_INT 51
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 21
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PPUSH
9252: CALL_OW 69
9256: PUSH
9257: FOR_IN
9258: IFFALSE 9380
// if GetTaskList ( i ) > 0 then
9260: LD_VAR 0 2
9264: PPUSH
9265: CALL_OW 437
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9378
// for j = 1 to GetTaskList ( i ) do
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: DOUBLE
9281: LD_INT 1
9283: DEC
9284: ST_TO_ADDR
9285: LD_VAR 0 2
9289: PPUSH
9290: CALL_OW 437
9294: PUSH
9295: FOR_TO
9296: IFFALSE 9376
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9298: LD_ADDR_VAR 0 4
9302: PUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: CALL_OW 437
9312: PUSH
9313: LD_VAR 0 3
9317: ARRAY
9318: PUSH
9319: LD_INT 4
9321: ARRAY
9322: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9323: LD_VAR 0 4
9327: PPUSH
9328: CALL_OW 255
9332: PUSH
9333: LD_INT 6
9335: EQUAL
9336: PUSH
9337: LD_VAR 0 2
9341: PPUSH
9342: CALL_OW 437
9346: PUSH
9347: LD_VAR 0 3
9351: ARRAY
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PUSH
9357: LD_STRING <
9359: EQUAL
9360: AND
9361: IFFALSE 9374
// SetTaskList ( i , [ ] ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: EMPTY
9369: PPUSH
9370: CALL_OW 446
// end ;
9374: GO 9295
9376: POP
9377: POP
9378: GO 9257
9380: POP
9381: POP
// end ; end_of_file
9382: PPOPN 8
9384: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9385: LD_INT 0
9387: PPUSH
9388: PPUSH
// if exist_mode then
9389: LD_VAR 0 2
9393: IFFALSE 9418
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_EXP 30
9404: PUSH
9405: LD_VAR 0 1
9409: STR
9410: PPUSH
9411: CALL_OW 34
9415: ST_TO_ADDR
9416: GO 9433
// unit := NewCharacter ( ident ) ;
9418: LD_ADDR_VAR 0 5
9422: PUSH
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 25
9432: ST_TO_ADDR
// if class then
9433: LD_VAR 0 3
9437: IFFALSE 9453
// SetClass ( unit , class ) ;
9439: LD_VAR 0 5
9443: PPUSH
9444: LD_VAR 0 3
9448: PPUSH
9449: CALL_OW 336
// result := unit ;
9453: LD_ADDR_VAR 0 4
9457: PUSH
9458: LD_VAR 0 5
9462: ST_TO_ADDR
// end ;
9463: LD_VAR 0 4
9467: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9468: LD_INT 0
9470: PPUSH
9471: PPUSH
// for unit in units do
9472: LD_ADDR_VAR 0 5
9476: PUSH
9477: LD_VAR 0 1
9481: PUSH
9482: FOR_IN
9483: IFFALSE 9506
// PlaceUnitArea ( unit , area , spawnMode ) ;
9485: LD_VAR 0 5
9489: PPUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: LD_VAR 0 3
9499: PPUSH
9500: CALL_OW 49
9504: GO 9482
9506: POP
9507: POP
// end ;
9508: LD_VAR 0 4
9512: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9513: LD_INT 0
9515: PPUSH
9516: PPUSH
9517: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9518: LD_ADDR_VAR 0 1
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: LD_EXP 42
9532: PUSH
9533: LD_EXP 43
9537: PUSH
9538: LD_EXP 46
9542: PUSH
9543: LD_EXP 47
9547: PUSH
9548: LD_EXP 44
9552: PUSH
9553: LD_EXP 45
9557: PUSH
9558: LD_EXP 48
9562: PUSH
9563: LD_EXP 49
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: DIFF
9578: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9579: LD_ADDR_VAR 0 7
9583: PUSH
9584: LD_VAR 0 1
9588: PUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_VAR 0 1
9596: PPUSH
9597: CALL_OW 12
9601: ARRAY
9602: ST_TO_ADDR
// if radio then
9603: LD_VAR 0 4
9607: IFFALSE 9656
// begin if GetSex ( speaker ) = sex_male then
9609: LD_VAR 0 7
9613: PPUSH
9614: CALL_OW 258
9618: PUSH
9619: LD_INT 1
9621: EQUAL
9622: IFFALSE 9640
// SayRadio ( speaker , dialogMID ) else
9624: LD_VAR 0 7
9628: PPUSH
9629: LD_VAR 0 2
9633: PPUSH
9634: CALL_OW 94
9638: GO 9654
// SayRadio ( speaker , dialogFID ) ;
9640: LD_VAR 0 7
9644: PPUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: CALL_OW 94
// end else
9654: GO 9701
// begin if GetSex ( speaker ) = sex_male then
9656: LD_VAR 0 7
9660: PPUSH
9661: CALL_OW 258
9665: PUSH
9666: LD_INT 1
9668: EQUAL
9669: IFFALSE 9687
// Say ( speaker , dialogMID ) else
9671: LD_VAR 0 7
9675: PPUSH
9676: LD_VAR 0 2
9680: PPUSH
9681: CALL_OW 88
9685: GO 9701
// Say ( speaker , dialogFID ) ;
9687: LD_VAR 0 7
9691: PPUSH
9692: LD_VAR 0 3
9696: PPUSH
9697: CALL_OW 88
// end ; result := speaker ;
9701: LD_ADDR_VAR 0 5
9705: PUSH
9706: LD_VAR 0 7
9710: ST_TO_ADDR
// end ;
9711: LD_VAR 0 5
9715: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9716: LD_INT 0
9718: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 255
9728: PUSH
9729: LD_VAR 0 3
9733: EQUAL
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL_OW 302
9744: AND
9745: IFFALSE 9767
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_EXP 29
9756: PUSH
9757: LD_VAR 0 2
9761: STR
9762: PPUSH
9763: CALL_OW 38
// end ;
9767: LD_VAR 0 4
9771: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9772: LD_INT 0
9774: PPUSH
9775: PPUSH
9776: PPUSH
// resultCharactersToSave = [ ] ;
9777: LD_ADDR_VAR 0 6
9781: PUSH
9782: EMPTY
9783: ST_TO_ADDR
// for unit in characters do
9784: LD_ADDR_VAR 0 5
9788: PUSH
9789: LD_VAR 0 1
9793: PUSH
9794: FOR_IN
9795: IFFALSE 9843
// if GetSide ( unit ) = side and IsOK ( unit ) then
9797: LD_VAR 0 5
9801: PPUSH
9802: CALL_OW 255
9806: PUSH
9807: LD_VAR 0 3
9811: EQUAL
9812: PUSH
9813: LD_VAR 0 5
9817: PPUSH
9818: CALL_OW 302
9822: AND
9823: IFFALSE 9841
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9825: LD_ADDR_VAR 0 6
9829: PUSH
9830: LD_VAR 0 6
9834: PUSH
9835: LD_VAR 0 5
9839: ADD
9840: ST_TO_ADDR
9841: GO 9794
9843: POP
9844: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9845: LD_VAR 0 6
9849: PPUSH
9850: LD_EXP 29
9854: PUSH
9855: LD_VAR 0 2
9859: STR
9860: PPUSH
9861: CALL_OW 38
// end ;
9865: LD_VAR 0 4
9869: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9870: LD_INT 0
9872: PPUSH
9873: PPUSH
9874: PPUSH
9875: PPUSH
9876: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9877: LD_ADDR_VAR 0 3
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 21
9894: PUSH
9895: LD_INT 1
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 50
9904: PUSH
9905: EMPTY
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: PPUSH
9913: CALL_OW 69
9917: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9918: LD_ADDR_VAR 0 3
9922: PUSH
9923: LD_VAR 0 3
9927: PUSH
9928: LD_EXP 42
9932: DIFF
9933: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9934: LD_ADDR_VAR 0 3
9938: PUSH
9939: LD_VAR 0 3
9943: PUSH
9944: LD_EXP 52
9948: DIFF
9949: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_STRING text
9957: PPUSH
9958: LD_INT 8
9960: PPUSH
9961: LD_INT 8
9963: PPUSH
9964: LD_INT -5
9966: PUSH
9967: LD_EXP 42
9971: PUSH
9972: LD_INT -6
9974: PUSH
9975: LD_INT -2
9977: PUSH
9978: LD_INT -3
9980: PUSH
9981: LD_INT -5
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_VAR 0 3
9996: ADD
9997: PUSH
9998: LD_INT -6
10000: PUSH
10001: LD_INT -4
10003: PUSH
10004: LD_EXP 52
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: ADD
10014: PPUSH
10015: LD_INT 1
10017: PUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 4
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 42
10044: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10045: LD_VAR 0 3
10049: PPUSH
10050: LD_INT 6
10052: PPUSH
10053: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10057: LD_EXP 52
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10069: LD_VAR 0 4
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: CALL_OW 235
// burlakTeam = selectedPeople ;
10081: LD_ADDR_EXP 55
10085: PUSH
10086: LD_VAR 0 4
10090: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10091: LD_ADDR_EXP 56
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 6
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10125: LD_ADDR_EXP 56
10129: PUSH
10130: LD_EXP 56
10134: PUSH
10135: LD_EXP 49
10139: DIFF
10140: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10141: LD_ADDR_VAR 0 2
10145: PUSH
10146: LD_INT 22
10148: PUSH
10149: LD_INT 6
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 21
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: CALL_OW 69
10174: PUSH
10175: FOR_IN
10176: IFFALSE 10200
// if IsInUnit ( i ) then
10178: LD_VAR 0 2
10182: PPUSH
10183: CALL_OW 310
10187: IFFALSE 10198
// ComExitVehicle ( i ) ;
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 121
10198: GO 10175
10200: POP
10201: POP
// if not Gnyevko in selectedPeople then
10202: LD_EXP 43
10206: PUSH
10207: LD_VAR 0 4
10211: IN
10212: NOT
10213: IFFALSE 10230
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10215: LD_EXP 43
10219: PPUSH
10220: LD_STRING Gnyevko
10222: PPUSH
10223: LD_INT 6
10225: PPUSH
10226: CALL 9716 0 3
// if not Kovalyuk in selectedPeople then
10230: LD_EXP 45
10234: PUSH
10235: LD_VAR 0 4
10239: IN
10240: NOT
10241: IFFALSE 10258
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10243: LD_EXP 45
10247: PPUSH
10248: LD_STRING Kovalyuk
10250: PPUSH
10251: LD_INT 6
10253: PPUSH
10254: CALL 9716 0 3
// if not Kirilenkova in selectedPeople then
10258: LD_EXP 44
10262: PUSH
10263: LD_VAR 0 4
10267: IN
10268: NOT
10269: IFFALSE 10286
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10271: LD_EXP 44
10275: PPUSH
10276: LD_STRING Kirilenkova
10278: PPUSH
10279: LD_INT 6
10281: PPUSH
10282: CALL 9716 0 3
// if not Scholtze in selectedPeople then
10286: LD_EXP 48
10290: PUSH
10291: LD_VAR 0 4
10295: IN
10296: NOT
10297: IFFALSE 10314
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10299: LD_EXP 48
10303: PPUSH
10304: LD_STRING Scholtze
10306: PPUSH
10307: LD_INT 6
10309: PPUSH
10310: CALL 9716 0 3
// if not Belkov in selectedPeople then
10314: LD_EXP 46
10318: PUSH
10319: LD_VAR 0 4
10323: IN
10324: NOT
10325: IFFALSE 10342
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10327: LD_EXP 46
10331: PPUSH
10332: LD_STRING Belkov
10334: PPUSH
10335: LD_INT 6
10337: PPUSH
10338: CALL 9716 0 3
// if not Belkov2 in selectedPeople then
10342: LD_EXP 47
10346: PUSH
10347: LD_VAR 0 4
10351: IN
10352: NOT
10353: IFFALSE 10370
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10355: LD_EXP 47
10359: PPUSH
10360: LD_STRING Belkov2
10362: PPUSH
10363: LD_INT 6
10365: PPUSH
10366: CALL 9716 0 3
// others = popovTeam diff Popov ;
10370: LD_ADDR_VAR 0 5
10374: PUSH
10375: LD_EXP 56
10379: PUSH
10380: LD_EXP 52
10384: DIFF
10385: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10386: LD_VAR 0 5
10390: PPUSH
10391: LD_STRING other_survivors_with_popov
10393: PPUSH
10394: LD_INT 6
10396: PPUSH
10397: CALL 9772 0 3
// end ; end_of_file
10401: LD_VAR 0 1
10405: RET
// export function MissionIntro ; var i , unit ; begin
10406: LD_INT 0
10408: PPUSH
10409: PPUSH
10410: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10411: LD_EXP 42
10415: PPUSH
10416: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10420: LD_EXP 59
10424: PPUSH
10425: LD_STRING D1-RSol1-1
10427: PPUSH
10428: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10432: LD_EXP 53
10436: PPUSH
10437: LD_STRING D1-Pla-1
10439: PPUSH
10440: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10444: LD_EXP 42
10448: PPUSH
10449: LD_STRING D1-Bur-1
10451: PPUSH
10452: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-2
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-2
10475: PPUSH
10476: CALL_OW 88
// SelectCharacters ;
10480: CALL 9870 0 0
// InGameOff ;
10484: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10488: LD_STRING M1
10490: PPUSH
10491: CALL_OW 337
// SaveForQuickRestart ;
10495: CALL_OW 22
// for unit in popovTeam do
10499: LD_ADDR_VAR 0 3
10503: PUSH
10504: LD_EXP 56
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10582
// begin for i := 3 to russianCargoPath1 do
10512: LD_ADDR_VAR 0 2
10516: PUSH
10517: DOUBLE
10518: LD_INT 3
10520: DEC
10521: ST_TO_ADDR
10522: LD_EXP 34
10526: PUSH
10527: FOR_TO
10528: IFFALSE 10571
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_EXP 34
10539: PUSH
10540: LD_VAR 0 2
10544: ARRAY
10545: PUSH
10546: LD_INT 1
10548: ARRAY
10549: PPUSH
10550: LD_EXP 34
10554: PUSH
10555: LD_VAR 0 2
10559: ARRAY
10560: PUSH
10561: LD_INT 2
10563: ARRAY
10564: PPUSH
10565: CALL_OW 171
10569: GO 10527
10571: POP
10572: POP
// wait ( 0 0$01 ) ;
10573: LD_INT 35
10575: PPUSH
10576: CALL_OW 67
// end ;
10580: GO 10509
10582: POP
10583: POP
// end ;
10584: LD_VAR 0 1
10588: RET
// every 0 0$1 do var unit , driver ;
10589: GO 10591
10591: DISABLE
10592: LD_INT 0
10594: PPUSH
10595: PPUSH
// begin enable ;
10596: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10597: LD_INT 4
10599: PPUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 6
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 70
10614: NOT
10615: PUSH
10616: LD_INT 4
10618: PPUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: LD_INT 21
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 2
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 70
10665: NOT
10666: AND
10667: IFFALSE 10671
// exit ;
10669: GO 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10671: LD_ADDR_VAR 0 1
10675: PUSH
10676: LD_INT 4
10678: PPUSH
10679: LD_INT 22
10681: PUSH
10682: LD_INT 6
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PPUSH
10689: CALL_OW 70
10693: PUSH
10694: FOR_IN
10695: IFFALSE 10750
// begin RemoveUnit ( unit ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10706: LD_VAR 0 1
10710: PUSH
10711: LD_EXP 56
10715: IN
10716: NOT
10717: PUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 264
10727: PUSH
10728: LD_INT 51
10730: EQUAL
10731: AND
10732: IFFALSE 10748
// evacuatedCargos = evacuatedCargos + 1 ;
10734: LD_ADDR_EXP 10
10738: PUSH
10739: LD_EXP 10
10743: PUSH
10744: LD_INT 1
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: GO 10694
10750: POP
10751: POP
// if canExitMap then
10752: LD_EXP 6
10756: IFFALSE 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10758: LD_ADDR_VAR 0 1
10762: PUSH
10763: LD_INT 4
10765: PPUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: LD_INT 21
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 21
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 70
10812: PUSH
10813: FOR_IN
10814: IFFALSE 11020
// begin if GetType ( unit ) = unit_vehicle then
10816: LD_VAR 0 1
10820: PPUSH
10821: CALL_OW 247
10825: PUSH
10826: LD_INT 2
10828: EQUAL
10829: IFFALSE 10929
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 313
10840: PUSH
10841: LD_INT 1
10843: ARRAY
10844: PUSH
10845: LD_EXP 42
10849: PUSH
10850: LD_EXP 43
10854: PUSH
10855: LD_EXP 44
10859: PUSH
10860: LD_EXP 45
10864: PUSH
10865: LD_EXP 46
10869: PUSH
10870: LD_EXP 47
10874: PUSH
10875: LD_EXP 48
10879: PUSH
10880: LD_EXP 49
10884: PUSH
10885: LD_EXP 54
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: IN
10901: NOT
10902: IFFALSE 10929
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10904: LD_ADDR_EXP 62
10908: PUSH
10909: LD_EXP 62
10913: PUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 313
10923: PUSH
10924: LD_INT 1
10926: ARRAY
10927: ADD
10928: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10929: LD_VAR 0 1
10933: PUSH
10934: LD_EXP 42
10938: PUSH
10939: LD_EXP 43
10943: PUSH
10944: LD_EXP 44
10948: PUSH
10949: LD_EXP 45
10953: PUSH
10954: LD_EXP 46
10958: PUSH
10959: LD_EXP 47
10963: PUSH
10964: LD_EXP 48
10968: PUSH
10969: LD_EXP 49
10973: PUSH
10974: LD_EXP 54
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: IN
10990: NOT
10991: IFFALSE 11009
// randomsToSave = randomsToSave ^ unit ;
10993: LD_ADDR_EXP 62
10997: PUSH
10998: LD_EXP 62
11002: PUSH
11003: LD_VAR 0 1
11007: ADD
11008: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 64
// end ;
11018: GO 10813
11020: POP
11021: POP
// end ;
11022: PPOPN 2
11024: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11025: LD_INT 0
11027: PPUSH
11028: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11029: LD_INT 22
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: PPUSH
11058: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11062: LD_VAR 0 1
11066: PPUSH
11067: CALL_OW 87
// InGameOn ;
11071: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11075: LD_EXP 53
11079: PPUSH
11080: LD_STRING D2a-Pla-1
11082: PPUSH
11083: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 21
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 25
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: PPUSH
11127: CALL_OW 69
11131: PUSH
11132: FOR_IN
11133: IFFALSE 11171
// if GetDistUnits ( building , unit ) < 10 then
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: CALL_OW 296
11149: PUSH
11150: LD_INT 10
11152: LESS
11153: IFFALSE 11169
// ComDismantle ( unit , building ) ;
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 167
11169: GO 11132
11171: POP
11172: POP
// repeat wait ( 0 0$1 ) ;
11173: LD_INT 35
11175: PPUSH
11176: CALL_OW 67
// until not IsPlaced ( building ) ;
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 305
11189: NOT
11190: IFFALSE 11173
// InGameOff ;
11192: CALL_OW 9
// end ;
11196: LD_VAR 0 2
11200: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11201: LD_EXP 49
11205: PPUSH
11206: CALL_OW 255
11210: PUSH
11211: LD_INT 6
11213: EQUAL
11214: IFFALSE 11296
11216: GO 11218
11218: DISABLE
11219: LD_INT 0
11221: PPUSH
// begin enable ;
11222: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: LD_INT 22
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11294
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11260: LD_VAR 0 1
11264: PPUSH
11265: LD_EXP 49
11269: PPUSH
11270: CALL_OW 296
11274: PUSH
11275: LD_INT 9
11277: LESS
11278: IFFALSE 11292
// SetSide ( Kuzmov , 3 ) ;
11280: LD_EXP 49
11284: PPUSH
11285: LD_INT 3
11287: PPUSH
11288: CALL_OW 235
11292: GO 11257
11294: POP
11295: POP
// end ;
11296: PPOPN 1
11298: END
// export function Dial_FinishDepot ; var i ; begin
11299: LD_INT 0
11301: PPUSH
11302: PPUSH
// startEvacuation = true ;
11303: LD_ADDR_EXP 8
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11311: LD_STRING MOutBuild
11313: PPUSH
11314: CALL_OW 337
// uc_side = 6 ;
11318: LD_ADDR_OWVAR 20
11322: PUSH
11323: LD_INT 6
11325: ST_TO_ADDR
// uc_nation = 3 ;
11326: LD_ADDR_OWVAR 21
11330: PUSH
11331: LD_INT 3
11333: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11334: LD_ADDR_OWVAR 37
11338: PUSH
11339: LD_INT 21
11341: ST_TO_ADDR
// vc_control = control_manual ;
11342: LD_ADDR_OWVAR 38
11346: PUSH
11347: LD_INT 1
11349: ST_TO_ADDR
// vc_engine = engine_combustion ;
11350: LD_ADDR_OWVAR 39
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11358: LD_ADDR_OWVAR 40
11362: PUSH
11363: LD_INT 51
11365: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11366: LD_ADDR_EXP 60
11370: PUSH
11371: CALL_OW 45
11375: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11376: LD_EXP 60
11380: PPUSH
11381: LD_INT 3
11383: PPUSH
11384: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11388: LD_EXP 60
11392: PPUSH
11393: LD_INT 3
11395: PPUSH
11396: LD_INT 0
11398: PPUSH
11399: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11403: LD_INT 1
11405: PPUSH
11406: LD_INT 3
11408: PPUSH
11409: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11413: CALL_OW 44
11417: PPUSH
11418: LD_EXP 60
11422: PPUSH
11423: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11427: LD_EXP 60
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_INT 100
11437: PPUSH
11438: CALL_OW 291
// for i := 1 to 19 do
11442: LD_ADDR_VAR 0 2
11446: PUSH
11447: DOUBLE
11448: LD_INT 1
11450: DEC
11451: ST_TO_ADDR
11452: LD_INT 19
11454: PUSH
11455: FOR_TO
11456: IFFALSE 11499
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11458: LD_EXP 60
11462: PPUSH
11463: LD_EXP 34
11467: PUSH
11468: LD_VAR 0 2
11472: ARRAY
11473: PUSH
11474: LD_INT 1
11476: ARRAY
11477: PPUSH
11478: LD_EXP 34
11482: PUSH
11483: LD_VAR 0 2
11487: ARRAY
11488: PUSH
11489: LD_INT 2
11491: ARRAY
11492: PPUSH
11493: CALL_OW 171
11497: GO 11455
11499: POP
11500: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11501: LD_EXP 60
11505: PPUSH
11506: LD_INT 105
11508: PPUSH
11509: LD_INT 123
11511: PPUSH
11512: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11516: LD_EXP 60
11520: PPUSH
11521: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: DOUBLE
11531: LD_INT 21
11533: DEC
11534: ST_TO_ADDR
11535: LD_EXP 34
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11584
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11543: LD_EXP 60
11547: PPUSH
11548: LD_EXP 34
11552: PUSH
11553: LD_VAR 0 2
11557: ARRAY
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PPUSH
11563: LD_EXP 34
11567: PUSH
11568: LD_VAR 0 2
11572: ARRAY
11573: PUSH
11574: LD_INT 2
11576: ARRAY
11577: PPUSH
11578: CALL_OW 171
11582: GO 11540
11584: POP
11585: POP
// Say ( Burlak , D2-Bur-1 ) ;
11586: LD_EXP 42
11590: PPUSH
11591: LD_STRING D2-Bur-1
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11598: LD_EXP 53
11602: PPUSH
11603: LD_STRING D2-Pla-1
11605: PPUSH
11606: CALL_OW 94
// PrepareSecondBaseTeam ;
11610: CALL 3290 0 0
// end ;
11614: LD_VAR 0 1
11618: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
// dial_labUpgradedBlock = true ;
11623: LD_ADDR_EXP 15
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11631: LD_ADDR_VAR 0 2
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 21
11648: PUSH
11649: LD_INT 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 26
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 25
11668: PUSH
11669: LD_INT 4
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PUSH
11687: LD_EXP 42
11691: PUSH
11692: LD_EXP 43
11696: PUSH
11697: LD_EXP 44
11701: PUSH
11702: LD_EXP 45
11706: PUSH
11707: LD_EXP 46
11711: PUSH
11712: LD_EXP 47
11716: PUSH
11717: LD_EXP 48
11721: PUSH
11722: LD_EXP 49
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: DIFF
11737: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11738: LD_EXP 48
11742: PPUSH
11743: CALL_OW 302
11747: PUSH
11748: LD_EXP 48
11752: PPUSH
11753: CALL_OW 255
11757: PUSH
11758: LD_INT 3
11760: EQUAL
11761: AND
11762: IFFALSE 11790
// begin Say ( Scholtze , D5-Sch-1 ) ;
11764: LD_EXP 48
11768: PPUSH
11769: LD_STRING D5-Sch-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11776: LD_EXP 42
11780: PPUSH
11781: LD_STRING D5-Bur-1
11783: PPUSH
11784: CALL_OW 88
// end else
11788: GO 11925
// if randomMaleSci then
11790: LD_VAR 0 2
11794: IFFALSE 11826
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11796: LD_VAR 0 2
11800: PUSH
11801: LD_INT 1
11803: ARRAY
11804: PPUSH
11805: LD_STRING D5-RSci1-1
11807: PPUSH
11808: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11812: LD_EXP 42
11816: PPUSH
11817: LD_STRING D5-Bur-1
11819: PPUSH
11820: CALL_OW 88
// end else
11824: GO 11925
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11826: LD_ADDR_VAR 0 2
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_INT 3
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 21
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 26
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 25
11863: PUSH
11864: LD_INT 4
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PUSH
11882: LD_EXP 42
11886: PUSH
11887: EMPTY
11888: LIST
11889: DIFF
11890: ST_TO_ADDR
// if randomMaleSci then
11891: LD_VAR 0 2
11895: IFFALSE 11925
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11897: LD_VAR 0 2
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_STRING D5-RSci1-1
11908: PPUSH
11909: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11913: LD_EXP 42
11917: PPUSH
11918: LD_STRING D5-Bur-1
11920: PPUSH
11921: CALL_OW 88
// end ; end ; end ;
11925: LD_VAR 0 1
11929: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11930: LD_EXP 60
11934: PPUSH
11935: LD_INT 105
11937: PPUSH
11938: LD_INT 123
11940: PPUSH
11941: CALL_OW 297
11945: PUSH
11946: LD_INT 12
11948: LESS
11949: IFFALSE 11975
11951: GO 11953
11953: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11954: LD_EXP 60
11958: PPUSH
11959: CALL_OW 313
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PPUSH
11968: LD_STRING D2a-RSol1-1
11970: PPUSH
11971: CALL_OW 88
11975: END
// every 0 0$15 trigger startEvacuation do
11976: LD_EXP 8
11980: IFFALSE 11990
11982: GO 11984
11984: DISABLE
// begin enable ;
11985: ENABLE
// CreateEvacuateUnit ;
11986: CALL 2520 0 0
// end ;
11990: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
11991: LD_EXP 10
11995: PUSH
11996: LD_INT 3
11998: GREATEREQUAL
11999: IFFALSE 12098
12001: GO 12003
12003: DISABLE
// begin if IsOk ( Kuzmov ) then
12004: LD_EXP 49
12008: PPUSH
12009: CALL_OW 302
12013: IFFALSE 12083
// begin DialogueOn ;
12015: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12019: LD_EXP 49
12023: PPUSH
12024: LD_STRING D2b-Kuz-1
12026: PPUSH
12027: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12031: LD_EXP 42
12035: PPUSH
12036: LD_STRING D2b-Bur-1
12038: PPUSH
12039: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-2
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-2
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-3
12074: PPUSH
12075: CALL_OW 88
// DialogueOff ;
12079: CALL_OW 7
// end ; Query ( Q1 ) ;
12083: LD_STRING Q1
12085: PPUSH
12086: CALL_OW 97
// canStealCargo = true ;
12090: LD_ADDR_EXP 11
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// end ;
12098: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12099: LD_EXP 11
12103: IFFALSE 12401
12105: GO 12107
12107: DISABLE
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
// begin enable ;
12112: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 34
12140: PUSH
12141: LD_INT 51
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12399
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_INT 22
12168: PUSH
12169: LD_INT 3
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 50
12188: PUSH
12189: EMPTY
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 69
12201: PUSH
12202: FOR_IN
12203: IFFALSE 12395
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12205: LD_VAR 0 2
12209: PPUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 296
12219: PUSH
12220: LD_INT 8
12222: LESS
12223: PUSH
12224: LD_VAR 0 2
12228: PUSH
12229: LD_EXP 13
12233: IN
12234: NOT
12235: AND
12236: PUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 289
12249: PUSH
12250: LD_INT 0
12252: GREATER
12253: AND
12254: IFFALSE 12393
// begin stealCargos = stealCargos ^ cargo ;
12256: LD_ADDR_EXP 13
12260: PUSH
12261: LD_EXP 13
12265: PUSH
12266: LD_VAR 0 2
12270: ADD
12271: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12272: LD_STRING QQrSteal
12274: PPUSH
12275: CALL_OW 97
12279: PUSH
12280: LD_INT 1
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12361
12288: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12289: LD_ADDR_EXP 12
12293: PUSH
12294: LD_EXP 12
12298: PUSH
12299: LD_INT 1
12301: PLUS
12302: ST_TO_ADDR
// DialogueOn ;
12303: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12307: LD_EXP 42
12311: PPUSH
12312: LD_STRING DQrSteal#1-Bur-1
12314: PPUSH
12315: CALL_OW 88
// DialogueOff ;
12319: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12323: LD_VAR 0 2
12327: PPUSH
12328: LD_INT 14
12330: PPUSH
12331: CALL_OW 113
// AddComUnload ( cargo ) ;
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12344: LD_VAR 0 2
12348: PPUSH
12349: LD_INT 92
12351: PPUSH
12352: LD_INT 177
12354: PPUSH
12355: CALL_OW 171
// end ; 2 :
12359: GO 12393
12361: LD_INT 2
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12369
12367: GO 12392
12369: POP
// begin DialogueOn ;
12370: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12374: LD_EXP 42
12378: PPUSH
12379: LD_STRING DQrSteal#2-Bur-1
12381: PPUSH
12382: CALL_OW 88
// DialogueOff ;
12386: CALL_OW 7
// end ; end ;
12390: GO 12393
12392: POP
// end ;
12393: GO 12202
12395: POP
12396: POP
12397: GO 12158
12399: POP
12400: POP
// end ;
12401: PPOPN 2
12403: END
// every 0 0$12 trigger stealWarmCount = 3 do
12404: LD_EXP 12
12408: PUSH
12409: LD_INT 3
12411: EQUAL
12412: IFFALSE 12484
12414: GO 12416
12416: DISABLE
// begin DialogueOn ;
12417: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12421: LD_EXP 53
12425: PPUSH
12426: LD_STRING D3A-Pla-1
12428: PPUSH
12429: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12433: LD_EXP 42
12437: PPUSH
12438: LD_STRING D3A-Bur-1
12440: PPUSH
12441: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-2
12452: PPUSH
12453: CALL_OW 94
// if IsOK ( Kuzmov ) then
12457: LD_EXP 49
12461: PPUSH
12462: CALL_OW 302
12466: IFFALSE 12480
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12468: LD_EXP 49
12472: PPUSH
12473: LD_STRING D3A-Kuz-2
12475: PPUSH
12476: CALL_OW 88
// DialogueOff ;
12480: CALL_OW 7
// end ;
12484: END
// every 0 0$10 trigger stealWarmCount = 6 do
12485: LD_EXP 12
12489: PUSH
12490: LD_INT 6
12492: EQUAL
12493: IFFALSE 12542
12495: GO 12497
12497: DISABLE
// begin DialogueOn ;
12498: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12502: LD_EXP 53
12506: PPUSH
12507: LD_STRING D3B-Pla-1
12509: PPUSH
12510: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12514: LD_EXP 42
12518: PPUSH
12519: LD_STRING D3B-Bur-1
12521: PPUSH
12522: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-2
12533: PPUSH
12534: CALL_OW 94
// DialogueOff ;
12538: CALL_OW 7
// end ;
12542: END
// every 0 0$10 trigger stealWarmCount = 7 do
12543: LD_EXP 12
12547: PUSH
12548: LD_INT 7
12550: EQUAL
12551: IFFALSE 12635
12553: GO 12555
12555: DISABLE
// begin DialogueOn ;
12556: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12560: LD_EXP 53
12564: PPUSH
12565: LD_STRING D3C-Pla-1
12567: PPUSH
12568: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12572: LD_EXP 42
12576: PPUSH
12577: LD_STRING D3C-Bur-1
12579: PPUSH
12580: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-2
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-2
12603: PPUSH
12604: CALL_OW 88
// if IsOK ( Kuzmov ) then
12608: LD_EXP 49
12612: PPUSH
12613: CALL_OW 302
12617: IFFALSE 12631
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12619: LD_EXP 49
12623: PPUSH
12624: LD_STRING D3C-Kuz-2
12626: PPUSH
12627: CALL_OW 88
// DialogueOff ;
12631: CALL_OW 7
// end ;
12635: END
// every 0 0$10 trigger stealWarmCount = 8 do
12636: LD_EXP 12
12640: PUSH
12641: LD_INT 8
12643: EQUAL
12644: IFFALSE 12836
12646: GO 12648
12648: DISABLE
// begin canStealCargo = false ;
12649: LD_ADDR_EXP 11
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// DialogueOn ;
12657: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12661: LD_EXP 53
12665: PPUSH
12666: LD_STRING D3D-Pla-1
12668: PPUSH
12669: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12673: LD_EXP 42
12677: PPUSH
12678: LD_STRING D3D-Bur-1
12680: PPUSH
12681: CALL_OW 88
// if kurinOpinion = 0 then
12685: LD_EXP 2
12689: PUSH
12690: LD_INT 0
12692: EQUAL
12693: IFFALSE 12713
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12695: LD_EXP 53
12699: PPUSH
12700: LD_STRING D3E-Pla-1
12702: PPUSH
12703: CALL_OW 94
// Lose_Arrest ;
12707: CALL 7552 0 0
// exit ;
12711: GO 12836
// end ; if meetBelkovBrother = 1 then
12713: LD_EXP 3
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: IFFALSE 12741
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12723: LD_EXP 53
12727: PPUSH
12728: LD_STRING D3E-Pla-1a
12730: PPUSH
12731: CALL_OW 94
// Lose_Arrest ;
12735: CALL 7552 0 0
// exit ;
12739: GO 12836
// end ; if platonovOpinion = 0 then
12741: LD_EXP 1
12745: PUSH
12746: LD_INT 0
12748: EQUAL
12749: IFFALSE 12769
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12751: LD_EXP 53
12755: PPUSH
12756: LD_STRING D3E-Pla-1b
12758: PPUSH
12759: CALL_OW 94
// Lose_Arrest ;
12763: CALL 7552 0 0
// exit ;
12767: GO 12836
// end ; if platonovOpinion = 1 then
12769: LD_EXP 1
12773: PUSH
12774: LD_INT 1
12776: EQUAL
12777: IFFALSE 12797
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12779: LD_EXP 53
12783: PPUSH
12784: LD_STRING D3E-Pla-1c
12786: PPUSH
12787: CALL_OW 94
// Lose_Arrest ;
12791: CALL 7552 0 0
// exit ;
12795: GO 12836
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12797: LD_EXP 53
12801: PPUSH
12802: LD_STRING D3D-Pla-2
12804: PPUSH
12805: CALL_OW 94
// if IsOK ( Kuzmov ) then
12809: LD_EXP 49
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12832
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12820: LD_EXP 49
12824: PPUSH
12825: LD_STRING D3D-Kuz-2
12827: PPUSH
12828: CALL_OW 88
// DialogueOff ;
12832: CALL_OW 7
// end ;
12836: END
// every 0 0$20 do var allyUntis ;
12837: GO 12839
12839: DISABLE
12840: LD_INT 0
12842: PPUSH
// begin enable ;
12843: ENABLE
// wait ( 0 0$10 ) ;
12844: LD_INT 350
12846: PPUSH
12847: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 6
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 60
12871: PUSH
12872: EMPTY
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: PUSH
12888: LD_EXP 56
12892: DIFF
12893: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_VAR 0 1
12903: PUSH
12904: LD_EXP 54
12908: DIFF
12909: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_VAR 0 1
12919: PUSH
12920: LD_EXP 49
12924: DIFF
12925: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_VAR 0 1
12935: PUSH
12936: LD_EXP 57
12940: DIFF
12941: ST_TO_ADDR
// if not allyUntis then
12942: LD_VAR 0 1
12946: NOT
12947: IFFALSE 12951
// exit ;
12949: GO 12975
// ComUnload ( allyUntis ) ;
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 92
12967: PPUSH
12968: LD_INT 176
12970: PPUSH
12971: CALL_OW 171
// end ;
12975: PPOPN 1
12977: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
12978: LD_EXP 10
12982: PUSH
12983: LD_EXP 14
12987: GREATEREQUAL
12988: IFFALSE 13001
12990: GO 12992
12992: DISABLE
// begin startEvacuation = false ;
12993: LD_ADDR_EXP 8
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// end ;
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: PUSH
13013: LD_INT 22
13015: PUSH
13016: LD_INT 6
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 2
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 69
13059: PUSH
13060: LD_EXP 57
13064: DIFF
13065: NOT
13066: AND
13067: IFFALSE 13662
13069: GO 13071
13071: DISABLE
// begin wait ( 1 1$00 ) ;
13072: LD_INT 2100
13074: PPUSH
13075: CALL_OW 67
// DialogueOn ;
13079: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13083: LD_EXP 53
13087: PPUSH
13088: LD_STRING D4-Pla-1
13090: PPUSH
13091: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13095: LD_EXP 42
13099: PPUSH
13100: LD_STRING D4-Bur-1
13102: PPUSH
13103: CALL_OW 88
// DialogueOff ;
13107: CALL_OW 7
// wait ( 0 0$2 ) ;
13111: LD_INT 70
13113: PPUSH
13114: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13118: LD_EXP 49
13122: PPUSH
13123: CALL_OW 302
13127: PUSH
13128: LD_EXP 49
13132: PPUSH
13133: CALL_OW 255
13137: PUSH
13138: LD_INT 3
13140: EQUAL
13141: AND
13142: IFFALSE 13424
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13144: LD_EXP 49
13148: PPUSH
13149: LD_STRING D4-Kuz-1
13151: PPUSH
13152: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13156: LD_EXP 46
13160: PPUSH
13161: CALL_OW 302
13165: PUSH
13166: LD_EXP 46
13170: PPUSH
13171: CALL_OW 255
13175: PUSH
13176: LD_INT 3
13178: EQUAL
13179: AND
13180: IFFALSE 13196
// Say ( Belkov , D4-Bel-1 ) else
13182: LD_EXP 46
13186: PPUSH
13187: LD_STRING D4-Bel-1
13189: PPUSH
13190: CALL_OW 88
13194: GO 13234
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13196: LD_EXP 47
13200: PPUSH
13201: CALL_OW 302
13205: PUSH
13206: LD_EXP 47
13210: PPUSH
13211: CALL_OW 255
13215: PUSH
13216: LD_INT 3
13218: EQUAL
13219: AND
13220: IFFALSE 13234
// Say ( Belkov2 , D4-Bel-1 ) ;
13222: LD_EXP 47
13226: PPUSH
13227: LD_STRING D4-Bel-1
13229: PPUSH
13230: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13234: LD_EXP 42
13238: PPUSH
13239: LD_STRING D4-Bur-2
13241: PPUSH
13242: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13246: LD_EXP 43
13250: PPUSH
13251: CALL_OW 302
13255: PUSH
13256: LD_EXP 43
13260: PPUSH
13261: CALL_OW 255
13265: PUSH
13266: LD_INT 3
13268: EQUAL
13269: AND
13270: IFFALSE 13296
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13272: LD_EXP 43
13276: PPUSH
13277: LD_STRING D4-Gny-2
13279: PPUSH
13280: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13284: LD_EXP 42
13288: PPUSH
13289: LD_STRING D4-Bur-3
13291: PPUSH
13292: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13296: LD_EXP 42
13300: PPUSH
13301: LD_STRING D4-Bur-3a
13303: PPUSH
13304: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13308: LD_EXP 46
13312: PPUSH
13313: CALL_OW 302
13317: PUSH
13318: LD_EXP 46
13322: PPUSH
13323: CALL_OW 255
13327: PUSH
13328: LD_INT 3
13330: EQUAL
13331: AND
13332: IFFALSE 13348
// Say ( Belkov , D4-Bel-3 ) else
13334: LD_EXP 46
13338: PPUSH
13339: LD_STRING D4-Bel-3
13341: PPUSH
13342: CALL_OW 88
13346: GO 13386
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13348: LD_EXP 47
13352: PPUSH
13353: CALL_OW 302
13357: PUSH
13358: LD_EXP 47
13362: PPUSH
13363: CALL_OW 255
13367: PUSH
13368: LD_INT 3
13370: EQUAL
13371: AND
13372: IFFALSE 13386
// Say ( Belkov2 , D4-Bel-3 ) ;
13374: LD_EXP 47
13378: PPUSH
13379: LD_STRING D4-Bel-3
13381: PPUSH
13382: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13386: LD_EXP 45
13390: PPUSH
13391: CALL_OW 302
13395: PUSH
13396: LD_EXP 45
13400: PPUSH
13401: CALL_OW 255
13405: PUSH
13406: LD_INT 3
13408: EQUAL
13409: AND
13410: IFFALSE 13424
// Say ( Kovalyuk , D4-Kov-3 ) ;
13412: LD_EXP 45
13416: PPUSH
13417: LD_STRING D4-Kov-3
13419: PPUSH
13420: CALL_OW 88
// end ; PrepareFirstAttack ;
13424: CALL 4175 0 0
// firstAttack = true ;
13428: LD_ADDR_EXP 18
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13436: LD_INT 350
13438: PPUSH
13439: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13443: LD_EXP 42
13447: PPUSH
13448: LD_STRING D7-Bur-1
13450: PPUSH
13451: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13455: LD_EXP 64
13459: PPUSH
13460: LD_INT 135
13462: PUSH
13463: LD_INT 4
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 134
13472: PUSH
13473: LD_INT 19
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 132
13482: PUSH
13483: LD_INT 26
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 128
13492: PUSH
13493: LD_INT 31
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 123
13502: PUSH
13503: LD_INT 37
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 118
13512: PUSH
13513: LD_INT 45
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 112
13522: PUSH
13523: LD_INT 51
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 106
13532: PUSH
13533: LD_INT 57
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 99
13542: PUSH
13543: LD_INT 62
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 93
13552: PUSH
13553: LD_INT 67
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 86
13562: PUSH
13563: LD_INT 72
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 78
13572: PUSH
13573: LD_INT 75
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 71
13582: PUSH
13583: LD_INT 81
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 69
13592: PUSH
13593: LD_INT 88
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 71
13602: PUSH
13603: LD_INT 95
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 74
13612: PUSH
13613: LD_INT 103
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 80
13622: PUSH
13623: LD_INT 113
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: LD_INT 11
13657: PPUSH
13658: CALL 5018 0 5
// end ;
13662: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13663: LD_EXP 64
13667: PPUSH
13668: LD_INT 21
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 72
13682: NOT
13683: PUSH
13684: LD_EXP 18
13688: AND
13689: IFFALSE 13748
13691: GO 13693
13693: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13694: LD_EXP 57
13698: PPUSH
13699: CALL_OW 122
// wait ( 0 0$1 ) ;
13703: LD_INT 35
13705: PPUSH
13706: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13710: LD_EXP 57
13714: PPUSH
13715: LD_INT 114
13717: PPUSH
13718: LD_INT 114
13720: PPUSH
13721: CALL_OW 111
// wait ( 0 0$15 ) ;
13725: LD_INT 525
13727: PPUSH
13728: CALL_OW 67
// firstAttack = false ;
13732: LD_ADDR_EXP 18
13736: PUSH
13737: LD_INT 0
13739: ST_TO_ADDR
// enableAttacks = true ;
13740: LD_ADDR_EXP 17
13744: PUSH
13745: LD_INT 1
13747: ST_TO_ADDR
// end ;
13748: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13749: LD_OWVAR 67
13753: PUSH
13754: LD_INT 1
13756: EQUAL
13757: PUSH
13758: LD_EXP 57
13762: AND
13763: IFFALSE 13831
13765: GO 13767
13767: DISABLE
13768: LD_INT 0
13770: PPUSH
// begin enable ;
13771: ENABLE
// for un in secondBaseTeam do
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: LD_EXP 57
13781: PUSH
13782: FOR_IN
13783: IFFALSE 13829
// if IsInArea ( un , HillArea ) then
13785: LD_VAR 0 1
13789: PPUSH
13790: LD_INT 5
13792: PPUSH
13793: CALL_OW 308
13797: IFFALSE 13827
// begin SetSide ( un , 3 ) ;
13799: LD_VAR 0 1
13803: PPUSH
13804: LD_INT 3
13806: PPUSH
13807: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13811: LD_ADDR_EXP 57
13815: PUSH
13816: LD_EXP 57
13820: PUSH
13821: LD_VAR 0 1
13825: DIFF
13826: ST_TO_ADDR
// end ;
13827: GO 13782
13829: POP
13830: POP
// end ;
13831: PPOPN 1
13833: END
// export function Dial_Contact ; begin
13834: LD_INT 0
13836: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13837: LD_EXP 42
13841: PPUSH
13842: LD_STRING D7-Bur-1a
13844: PPUSH
13845: CALL_OW 88
// wait ( 0 0$12 ) ;
13849: LD_INT 420
13851: PPUSH
13852: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13856: LD_EXP 42
13860: PPUSH
13861: LD_STRING D7-Bur-1b
13863: PPUSH
13864: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13868: LD_EXP 46
13872: PPUSH
13873: CALL_OW 302
13877: PUSH
13878: LD_EXP 46
13882: PPUSH
13883: CALL_OW 255
13887: PUSH
13888: LD_INT 3
13890: EQUAL
13891: AND
13892: IFFALSE 13908
// Say ( Belkov , D7-Bel-1 ) else
13894: LD_EXP 46
13898: PPUSH
13899: LD_STRING D7-Bel-1
13901: PPUSH
13902: CALL_OW 88
13906: GO 13946
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13908: LD_EXP 47
13912: PPUSH
13913: CALL_OW 302
13917: PUSH
13918: LD_EXP 47
13922: PPUSH
13923: CALL_OW 255
13927: PUSH
13928: LD_INT 3
13930: EQUAL
13931: AND
13932: IFFALSE 13946
// Say ( Belkov2 , D7-Bel-1 ) ;
13934: LD_EXP 47
13938: PPUSH
13939: LD_STRING D7-Bel-1
13941: PPUSH
13942: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13946: LD_EXP 49
13950: PPUSH
13951: CALL_OW 302
13955: PUSH
13956: LD_EXP 49
13960: PPUSH
13961: CALL_OW 255
13965: PUSH
13966: LD_INT 3
13968: EQUAL
13969: AND
13970: IFFALSE 13984
// Say ( Kuzmov , D7-Kuz-1 ) ;
13972: LD_EXP 49
13976: PPUSH
13977: LD_STRING D7-Kuz-1
13979: PPUSH
13980: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13984: LD_EXP 45
13988: PPUSH
13989: CALL_OW 302
13993: PUSH
13994: LD_EXP 45
13998: PPUSH
13999: CALL_OW 255
14003: PUSH
14004: LD_INT 3
14006: EQUAL
14007: AND
14008: IFFALSE 14022
// Say ( Kovalyuk , D7-Kov-1 ) ;
14010: LD_EXP 45
14014: PPUSH
14015: LD_STRING D7-Kov-1
14017: PPUSH
14018: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14022: LD_EXP 48
14026: PPUSH
14027: CALL_OW 302
14031: PUSH
14032: LD_EXP 48
14036: PPUSH
14037: CALL_OW 255
14041: PUSH
14042: LD_INT 3
14044: EQUAL
14045: AND
14046: IFFALSE 14060
// Say ( Scholtze , D7-Sch-1 ) ;
14048: LD_EXP 48
14052: PPUSH
14053: LD_STRING D7-Sch-1
14055: PPUSH
14056: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14060: LD_INT 22
14062: PUSH
14063: LD_INT 3
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 26
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: PPUSH
14100: LD_STRING D7-RSol1-1
14102: PPUSH
14103: LD_STRING 
14105: PPUSH
14106: LD_INT 0
14108: PPUSH
14109: CALL 9513 0 4
// PrepareHeike ;
14113: CALL 3495 0 0
// wait ( 0 0$10 ) ;
14117: LD_INT 350
14119: PPUSH
14120: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14124: LD_EXP 63
14128: PPUSH
14129: LD_STRING D7a-Hke-1
14131: PPUSH
14132: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14136: LD_EXP 42
14140: PPUSH
14141: LD_STRING D7a-Bur-1
14143: PPUSH
14144: CALL_OW 88
// wait ( 0 0$50 ) ;
14148: LD_INT 1750
14150: PPUSH
14151: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14155: LD_EXP 49
14159: PPUSH
14160: CALL_OW 302
14164: PUSH
14165: LD_EXP 49
14169: PPUSH
14170: CALL_OW 255
14174: PUSH
14175: LD_INT 3
14177: EQUAL
14178: AND
14179: IFFALSE 14195
// Say ( Kuzmov , D8-Kuz-1 ) else
14181: LD_EXP 49
14185: PPUSH
14186: LD_STRING D8-Kuz-1
14188: PPUSH
14189: CALL_OW 88
14193: GO 14248
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14195: LD_INT 22
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 1
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 26
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PPUSH
14235: LD_STRING D8-RSol1-1
14237: PPUSH
14238: LD_STRING 
14240: PPUSH
14241: LD_INT 0
14243: PPUSH
14244: CALL 9513 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14248: LD_EXP 42
14252: PPUSH
14253: LD_STRING D8-Bur-1
14255: PPUSH
14256: CALL_OW 88
// end ;
14260: LD_VAR 0 1
14264: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14265: LD_EXP 54
14269: PPUSH
14270: CALL_OW 305
14274: NOT
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 50
14298: PUSH
14299: EMPTY
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: NOT
14312: AND
14313: PUSH
14314: LD_INT 22
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 21
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 50
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: PPUSH
14345: CALL_OW 69
14349: PUSH
14350: LD_INT 5
14352: LESS
14353: AND
14354: PUSH
14355: LD_INT 5
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: PPUSH
14371: CALL_OW 70
14375: PUSH
14376: LD_INT 3
14378: GREATER
14379: AND
14380: IFFALSE 14389
14382: GO 14384
14384: DISABLE
// Lose_ArabBreakthrough ;
14385: CALL 7567 0 0
14389: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14390: LD_EXP 19
14394: PUSH
14395: LD_EXP 38
14399: GREATEREQUAL
14400: IFFALSE 14624
14402: GO 14404
14404: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14405: LD_EXP 53
14409: PPUSH
14410: LD_STRING D9-Pla-1
14412: PPUSH
14413: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14417: LD_EXP 42
14421: PPUSH
14422: LD_STRING D9-Bur-1
14424: PPUSH
14425: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-2
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-2
14448: PPUSH
14449: CALL_OW 88
// wait ( 2 2$0 ) ;
14453: LD_INT 4200
14455: PPUSH
14456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14460: LD_INT 35
14462: PPUSH
14463: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14467: LD_INT 12
14469: PPUSH
14470: LD_INT 3
14472: PPUSH
14473: CALL_OW 428
14477: NOT
14478: IFFALSE 14460
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14480: LD_EXP 54
14484: PPUSH
14485: LD_INT 12
14487: PPUSH
14488: LD_INT 3
14490: PPUSH
14491: LD_INT 2
14493: PPUSH
14494: LD_INT 0
14496: PPUSH
14497: CALL_OW 50
// arabianCanExitMap = true ;
14501: LD_ADDR_EXP 7
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14509: LD_INT 35
14511: PPUSH
14512: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14516: LD_EXP 54
14520: PPUSH
14521: CALL_OW 87
// DialogueOn ;
14525: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14529: LD_EXP 54
14533: PPUSH
14534: LD_STRING D10-Gay-1
14536: PPUSH
14537: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14541: LD_EXP 42
14545: PPUSH
14546: LD_STRING D10-Bur-1
14548: PPUSH
14549: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-2
14560: PPUSH
14561: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14565: LD_EXP 52
14569: PPUSH
14570: LD_STRING D10-Pop-2
14572: PPUSH
14573: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-3
14584: PPUSH
14585: CALL_OW 94
// DialogueOff ;
14589: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14593: LD_EXP 54
14597: PPUSH
14598: LD_INT 36
14600: PPUSH
14601: LD_INT 38
14603: PPUSH
14604: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14608: LD_EXP 54
14612: PPUSH
14613: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14617: LD_STRING M2
14619: PPUSH
14620: CALL_OW 337
// end ;
14624: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14625: LD_EXP 7
14629: IFFALSE 14702
14631: GO 14633
14633: DISABLE
14634: LD_INT 0
14636: PPUSH
// begin enable ;
14637: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14638: LD_INT 22
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: PPUSH
14651: CALL_OW 69
14655: PPUSH
14656: LD_INT 13
14658: PPUSH
14659: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14663: LD_ADDR_VAR 0 1
14667: PUSH
14668: LD_INT 13
14670: PPUSH
14671: LD_INT 22
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PPUSH
14681: CALL_OW 70
14685: PUSH
14686: FOR_IN
14687: IFFALSE 14700
// RemoveUnit ( unit ) ;
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 64
14698: GO 14686
14700: POP
14701: POP
// end ;
14702: PPOPN 1
14704: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14705: LD_EXP 20
14709: NOT
14710: IFFALSE 15100
14712: GO 14714
14714: DISABLE
14715: LD_INT 0
14717: PPUSH
14718: PPUSH
// begin enable ;
14719: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14720: LD_ADDR_VAR 0 1
14724: PUSH
14725: LD_INT 22
14727: PUSH
14728: LD_INT 3
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 21
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PPUSH
14749: CALL_OW 69
14753: PUSH
14754: FOR_IN
14755: IFFALSE 15098
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_EXP 54
14766: PPUSH
14767: CALL_OW 296
14771: PUSH
14772: LD_INT 6
14774: LESS
14775: IFFALSE 15096
// begin SetSide ( Gaydar , 3 ) ;
14777: LD_EXP 54
14781: PPUSH
14782: LD_INT 3
14784: PPUSH
14785: CALL_OW 235
// ComWalk ( Gaydar ) ;
14789: LD_EXP 54
14793: PPUSH
14794: CALL_OW 138
// saveGaydar = true ;
14798: LD_ADDR_EXP 20
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14806: LD_INT 35
14808: PPUSH
14809: CALL_OW 67
// DialogueOn ;
14813: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14817: LD_EXP 54
14821: PPUSH
14822: LD_STRING D11-Gay-1
14824: PPUSH
14825: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14829: LD_EXP 42
14833: PPUSH
14834: LD_EXP 54
14838: PPUSH
14839: CALL_OW 296
14843: PUSH
14844: LD_INT 6
14846: LESS
14847: NOT
14848: IFFALSE 14948
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14850: LD_ADDR_VAR 0 2
14854: PUSH
14855: LD_INT 22
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 21
14867: PUSH
14868: LD_INT 1
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 26
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 50
14887: PUSH
14888: EMPTY
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: PUSH
14902: LD_EXP 54
14906: DIFF
14907: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14908: LD_VAR 0 2
14912: PPUSH
14913: LD_EXP 54
14917: PPUSH
14918: CALL_OW 74
14922: PPUSH
14923: LD_STRING D11-RSol1-1
14925: PPUSH
14926: CALL_OW 88
// gaydarWaitForBurlak = true ;
14930: LD_ADDR_EXP 21
14934: PUSH
14935: LD_INT 1
14937: ST_TO_ADDR
// DialogueOff ;
14938: CALL_OW 7
// exit ;
14942: POP
14943: POP
14944: GO 15100
// end else
14946: GO 15096
// begin Say ( Gaydar , D11-Gay-2 ) ;
14948: LD_EXP 54
14952: PPUSH
14953: LD_STRING D11-Gay-2
14955: PPUSH
14956: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14960: LD_EXP 42
14964: PPUSH
14965: LD_STRING D11-Bur-2
14967: PPUSH
14968: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-3
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-3
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-4
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-4
15015: PPUSH
15016: CALL_OW 88
// wait ( 0 0$2 ) ;
15020: LD_INT 70
15022: PPUSH
15023: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15027: LD_EXP 52
15031: PPUSH
15032: LD_STRING D12-Pop-1
15034: PPUSH
15035: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15039: LD_EXP 42
15043: PPUSH
15044: LD_STRING D12-Bur-1
15046: PPUSH
15047: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15051: LD_EXP 53
15055: PPUSH
15056: LD_STRING D12-Pla-1
15058: PPUSH
15059: CALL_OW 94
// DialogueOff ;
15063: CALL_OW 7
// canExitMap = true ;
15067: LD_ADDR_EXP 6
15071: PUSH
15072: LD_INT 1
15074: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15075: LD_STRING MFinal
15077: PPUSH
15078: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15082: LD_INT 4
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 424
// exit ;
15092: POP
15093: POP
15094: GO 15100
// end ; end ; end ;
15096: GO 14754
15098: POP
15099: POP
// end ;
15100: PPOPN 2
15102: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15103: LD_EXP 42
15107: PPUSH
15108: LD_EXP 54
15112: PPUSH
15113: CALL_OW 296
15117: PUSH
15118: LD_INT 6
15120: LESS
15121: PUSH
15122: LD_EXP 21
15126: AND
15127: IFFALSE 15280
15129: GO 15131
15131: DISABLE
// begin DialogueOn ;
15132: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15136: LD_EXP 54
15140: PPUSH
15141: LD_STRING D11-Gay-2
15143: PPUSH
15144: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15148: LD_EXP 42
15152: PPUSH
15153: LD_STRING D11-Bur-2
15155: PPUSH
15156: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-3
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-3
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-4
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-4
15203: PPUSH
15204: CALL_OW 88
// wait ( 0 0$2 ) ;
15208: LD_INT 70
15210: PPUSH
15211: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15215: LD_EXP 52
15219: PPUSH
15220: LD_STRING D12-Pop-1
15222: PPUSH
15223: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15227: LD_EXP 42
15231: PPUSH
15232: LD_STRING D12-Bur-1
15234: PPUSH
15235: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15239: LD_EXP 53
15243: PPUSH
15244: LD_STRING D12-Pla-1
15246: PPUSH
15247: CALL_OW 94
// DialogueOff ;
15251: CALL_OW 7
// canExitMap = true ;
15255: LD_ADDR_EXP 6
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15263: LD_STRING MFinal
15265: PPUSH
15266: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15270: LD_INT 4
15272: PPUSH
15273: LD_INT 1
15275: PPUSH
15276: CALL_OW 424
// end ;
15280: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15281: LD_INT 22
15283: PUSH
15284: LD_INT 3
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 21
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PPUSH
15305: CALL_OW 69
15309: PUSH
15310: LD_INT 0
15312: EQUAL
15313: PUSH
15314: LD_EXP 6
15318: AND
15319: IFFALSE 15328
15321: GO 15323
15323: DISABLE
// FinishMission ; end_of_file
15324: CALL 7685 0 0
15328: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15329: LD_EXP 17
15333: PUSH
15334: LD_EXP 19
15338: PUSH
15339: LD_INT 0
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_EXP 19
15348: PUSH
15349: LD_EXP 38
15353: LESS
15354: AND
15355: IFFALSE 15407
15357: GO 15359
15359: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15360: LD_INT 7
15362: PUSH
15363: LD_INT 10
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 1
15372: PPUSH
15373: LD_INT 2
15375: PPUSH
15376: CALL_OW 12
15380: ARRAY
15381: PPUSH
15382: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15386: LD_EXP 65
15390: PPUSH
15391: EMPTY
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: LD_INT 1
15398: PPUSH
15399: LD_INT 1
15401: NEG
15402: PPUSH
15403: CALL 5018 0 5
// end ;
15407: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15408: LD_EXP 17
15412: PUSH
15413: LD_EXP 19
15417: PUSH
15418: LD_INT 0
15420: GREATEREQUAL
15421: AND
15422: PUSH
15423: LD_EXP 19
15427: PUSH
15428: LD_EXP 38
15432: LESS
15433: AND
15434: IFFALSE 15664
15436: GO 15438
15438: DISABLE
// begin currentWave = currentWave + 1 ;
15439: LD_ADDR_EXP 19
15443: PUSH
15444: LD_EXP 19
15448: PUSH
15449: LD_INT 1
15451: PLUS
15452: ST_TO_ADDR
// PrepareArabianVehicles ;
15453: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15457: LD_EXP 65
15461: PPUSH
15462: LD_INT 135
15464: PUSH
15465: LD_INT 4
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 134
15474: PUSH
15475: LD_INT 19
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 132
15484: PUSH
15485: LD_INT 26
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 128
15494: PUSH
15495: LD_INT 31
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 123
15504: PUSH
15505: LD_INT 37
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 118
15514: PUSH
15515: LD_INT 45
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 112
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 106
15534: PUSH
15535: LD_INT 57
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 99
15544: PUSH
15545: LD_INT 62
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 93
15554: PUSH
15555: LD_INT 67
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 86
15564: PUSH
15565: LD_INT 72
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 78
15574: PUSH
15575: LD_INT 75
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 71
15584: PUSH
15585: LD_INT 81
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 69
15594: PUSH
15595: LD_INT 88
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 71
15604: PUSH
15605: LD_INT 95
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 74
15614: PUSH
15615: LD_INT 103
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 80
15624: PUSH
15625: LD_INT 113
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: PPUSH
15651: LD_INT 0
15653: PPUSH
15654: LD_INT 1
15656: PPUSH
15657: LD_INT 11
15659: PPUSH
15660: CALL 5018 0 5
// end ;
15664: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15665: LD_EXP 17
15669: PUSH
15670: LD_OWVAR 67
15674: PUSH
15675: LD_INT 2
15677: EQUAL
15678: AND
15679: PUSH
15680: LD_EXP 19
15684: PUSH
15685: LD_INT 0
15687: GREATEREQUAL
15688: AND
15689: PUSH
15690: LD_EXP 19
15694: PUSH
15695: LD_EXP 38
15699: LESS
15700: AND
15701: IFFALSE 15829
15703: GO 15705
15705: DISABLE
// begin PrepareArabianVehicles ;
15706: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15710: LD_EXP 65
15714: PPUSH
15715: LD_INT 135
15717: PUSH
15718: LD_INT 4
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 134
15727: PUSH
15728: LD_INT 19
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 132
15737: PUSH
15738: LD_INT 26
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 128
15747: PUSH
15748: LD_INT 31
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 123
15757: PUSH
15758: LD_INT 37
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 118
15767: PUSH
15768: LD_INT 45
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 112
15777: PUSH
15778: LD_INT 51
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 106
15787: PUSH
15788: LD_INT 57
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 99
15797: PUSH
15798: LD_INT 62
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: PPUSH
15816: LD_INT 0
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: LD_INT 11
15824: PPUSH
15825: CALL 5018 0 5
// end ;
15829: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
15830: LD_EXP 17
15834: PUSH
15835: LD_OWVAR 67
15839: PUSH
15840: LD_INT 3
15842: EQUAL
15843: AND
15844: PUSH
15845: LD_EXP 19
15849: PUSH
15850: LD_INT 0
15852: GREATEREQUAL
15853: AND
15854: PUSH
15855: LD_EXP 19
15859: PUSH
15860: LD_EXP 38
15864: LESS
15865: AND
15866: IFFALSE 16060
15868: GO 15870
15870: DISABLE
// begin PrepareArabianVehicles ;
15871: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15875: LD_EXP 65
15879: PPUSH
15880: LD_INT 135
15882: PUSH
15883: LD_INT 4
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 134
15892: PUSH
15893: LD_INT 19
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 132
15902: PUSH
15903: LD_INT 26
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 128
15912: PUSH
15913: LD_INT 31
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 123
15922: PUSH
15923: LD_INT 37
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 118
15932: PUSH
15933: LD_INT 45
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 112
15942: PUSH
15943: LD_INT 51
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 106
15952: PUSH
15953: LD_INT 57
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 99
15962: PUSH
15963: LD_INT 62
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 104
15972: PUSH
15973: LD_INT 71
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 110
15982: PUSH
15983: LD_INT 78
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 119
15992: PUSH
15993: LD_INT 88
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 128
16002: PUSH
16003: LD_INT 97
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 135
16012: PUSH
16013: LD_INT 106
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 140
16022: PUSH
16023: LD_INT 153
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: PPUSH
16047: LD_INT 0
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: LD_INT 11
16055: PPUSH
16056: CALL 5018 0 5
// end ;
16060: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16061: LD_EXP 17
16065: PUSH
16066: LD_EXP 19
16070: PUSH
16071: LD_INT 1
16073: EQUAL
16074: AND
16075: PUSH
16076: LD_EXP 19
16080: PUSH
16081: LD_EXP 38
16085: LESS
16086: AND
16087: IFFALSE 16164
16089: GO 16091
16091: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16092: LD_INT 7
16094: PPUSH
16095: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16099: LD_EXP 65
16103: PPUSH
16104: LD_INT 157
16106: PUSH
16107: LD_INT 31
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 194
16116: PUSH
16117: LD_INT 124
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 174
16126: PUSH
16127: LD_INT 158
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 151
16136: PUSH
16137: LD_INT 164
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: PPUSH
16150: LD_INT 0
16152: PPUSH
16153: LD_INT 1
16155: PPUSH
16156: LD_INT 1
16158: NEG
16159: PPUSH
16160: CALL 5018 0 5
// end ;
16164: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16165: LD_EXP 17
16169: PUSH
16170: LD_EXP 19
16174: PUSH
16175: LD_INT 1
16177: EQUAL
16178: AND
16179: PUSH
16180: LD_EXP 19
16184: PUSH
16185: LD_EXP 38
16189: LESS
16190: AND
16191: IFFALSE 16340
16193: GO 16195
16195: DISABLE
// begin wait ( 1 1$30 ) ;
16196: LD_INT 3150
16198: PPUSH
16199: CALL_OW 67
// currentWave = currentWave + 1 ;
16203: LD_ADDR_EXP 19
16207: PUSH
16208: LD_EXP 19
16212: PUSH
16213: LD_INT 1
16215: PLUS
16216: ST_TO_ADDR
// PrepareArabianVehicles ;
16217: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16221: LD_EXP 65
16225: PPUSH
16226: LD_INT 135
16228: PUSH
16229: LD_INT 4
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 134
16238: PUSH
16239: LD_INT 19
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 132
16248: PUSH
16249: LD_INT 26
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 128
16258: PUSH
16259: LD_INT 31
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 123
16268: PUSH
16269: LD_INT 37
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 118
16278: PUSH
16279: LD_INT 45
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 112
16288: PUSH
16289: LD_INT 51
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 106
16298: PUSH
16299: LD_INT 57
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 99
16308: PUSH
16309: LD_INT 62
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: PPUSH
16327: LD_INT 0
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: LD_INT 11
16335: PPUSH
16336: CALL 5018 0 5
// end ;
16340: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16341: LD_EXP 17
16345: PUSH
16346: LD_OWVAR 67
16350: PUSH
16351: LD_INT 2
16353: EQUAL
16354: AND
16355: PUSH
16356: LD_EXP 19
16360: PUSH
16361: LD_INT 1
16363: EQUAL
16364: AND
16365: PUSH
16366: LD_EXP 19
16370: PUSH
16371: LD_EXP 38
16375: LESS
16376: AND
16377: IFFALSE 16571
16379: GO 16381
16381: DISABLE
// begin PrepareArabianVehicles ;
16382: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16386: LD_EXP 65
16390: PPUSH
16391: LD_INT 135
16393: PUSH
16394: LD_INT 4
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 134
16403: PUSH
16404: LD_INT 19
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 132
16413: PUSH
16414: LD_INT 26
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 128
16423: PUSH
16424: LD_INT 31
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 123
16433: PUSH
16434: LD_INT 37
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 118
16443: PUSH
16444: LD_INT 45
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 112
16453: PUSH
16454: LD_INT 51
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 106
16463: PUSH
16464: LD_INT 57
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 99
16473: PUSH
16474: LD_INT 62
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 104
16483: PUSH
16484: LD_INT 71
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 110
16493: PUSH
16494: LD_INT 78
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 119
16503: PUSH
16504: LD_INT 88
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 128
16513: PUSH
16514: LD_INT 97
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 135
16523: PUSH
16524: LD_INT 106
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 140
16533: PUSH
16534: LD_INT 153
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: PPUSH
16558: LD_INT 0
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 11
16566: PPUSH
16567: CALL 5018 0 5
// end ;
16571: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
16572: LD_EXP 17
16576: PUSH
16577: LD_OWVAR 67
16581: PUSH
16582: LD_INT 3
16584: EQUAL
16585: AND
16586: PUSH
16587: LD_EXP 19
16591: PUSH
16592: LD_INT 1
16594: EQUAL
16595: AND
16596: PUSH
16597: LD_EXP 19
16601: PUSH
16602: LD_EXP 38
16606: LESS
16607: AND
16608: IFFALSE 16824
16610: GO 16612
16612: DISABLE
// begin PrepareArabianVehicles ;
16613: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16617: LD_EXP 65
16621: PPUSH
16622: LD_INT 135
16624: PUSH
16625: LD_INT 4
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 134
16634: PUSH
16635: LD_INT 19
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 132
16644: PUSH
16645: LD_INT 26
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 128
16654: PUSH
16655: LD_INT 31
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 123
16664: PUSH
16665: LD_INT 37
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 118
16674: PUSH
16675: LD_INT 45
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 112
16684: PUSH
16685: LD_INT 51
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 106
16694: PUSH
16695: LD_INT 57
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 99
16704: PUSH
16705: LD_INT 62
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 93
16714: PUSH
16715: LD_INT 67
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 86
16724: PUSH
16725: LD_INT 72
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 78
16734: PUSH
16735: LD_INT 75
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 71
16744: PUSH
16745: LD_INT 81
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 69
16754: PUSH
16755: LD_INT 88
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 71
16764: PUSH
16765: LD_INT 95
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 74
16774: PUSH
16775: LD_INT 103
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 80
16784: PUSH
16785: LD_INT 113
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: PPUSH
16811: LD_INT 0
16813: PPUSH
16814: LD_INT 1
16816: PPUSH
16817: LD_INT 11
16819: PPUSH
16820: CALL 5018 0 5
// end ;
16824: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16825: LD_EXP 17
16829: PUSH
16830: LD_EXP 19
16834: PUSH
16835: LD_INT 2
16837: EQUAL
16838: AND
16839: PUSH
16840: LD_EXP 19
16844: PUSH
16845: LD_EXP 38
16849: LESS
16850: AND
16851: IFFALSE 16928
16853: GO 16855
16855: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16856: LD_INT 7
16858: PPUSH
16859: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16863: LD_EXP 65
16867: PPUSH
16868: LD_INT 157
16870: PUSH
16871: LD_INT 31
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 194
16880: PUSH
16881: LD_INT 124
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 174
16890: PUSH
16891: LD_INT 158
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 151
16900: PUSH
16901: LD_INT 164
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: PPUSH
16914: LD_INT 0
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: LD_INT 1
16922: NEG
16923: PPUSH
16924: CALL 5018 0 5
// end ;
16928: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16929: LD_EXP 17
16933: PUSH
16934: LD_EXP 19
16938: PUSH
16939: LD_INT 2
16941: EQUAL
16942: AND
16943: PUSH
16944: LD_EXP 19
16948: PUSH
16949: LD_EXP 38
16953: LESS
16954: AND
16955: IFFALSE 17192
16957: GO 16959
16959: DISABLE
// begin wait ( 1 1$30 ) ;
16960: LD_INT 3150
16962: PPUSH
16963: CALL_OW 67
// currentWave = currentWave + 1 ;
16967: LD_ADDR_EXP 19
16971: PUSH
16972: LD_EXP 19
16976: PUSH
16977: LD_INT 1
16979: PLUS
16980: ST_TO_ADDR
// PrepareArabianVehicles ;
16981: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16985: LD_EXP 65
16989: PPUSH
16990: LD_INT 135
16992: PUSH
16993: LD_INT 4
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 134
17002: PUSH
17003: LD_INT 19
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 132
17012: PUSH
17013: LD_INT 26
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 128
17022: PUSH
17023: LD_INT 31
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 123
17032: PUSH
17033: LD_INT 37
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 118
17042: PUSH
17043: LD_INT 45
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 112
17052: PUSH
17053: LD_INT 51
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 106
17062: PUSH
17063: LD_INT 57
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 99
17072: PUSH
17073: LD_INT 62
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 93
17082: PUSH
17083: LD_INT 67
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 86
17092: PUSH
17093: LD_INT 72
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 78
17102: PUSH
17103: LD_INT 75
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 71
17112: PUSH
17113: LD_INT 81
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 69
17122: PUSH
17123: LD_INT 88
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 71
17132: PUSH
17133: LD_INT 95
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 74
17142: PUSH
17143: LD_INT 103
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 80
17152: PUSH
17153: LD_INT 113
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_INT 11
17187: PPUSH
17188: CALL 5018 0 5
// end ;
17192: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17193: LD_EXP 17
17197: PUSH
17198: LD_OWVAR 67
17202: PUSH
17203: LD_INT 2
17205: EQUAL
17206: AND
17207: PUSH
17208: LD_EXP 19
17212: PUSH
17213: LD_INT 2
17215: EQUAL
17216: AND
17217: PUSH
17218: LD_EXP 19
17222: PUSH
17223: LD_EXP 38
17227: LESS
17228: AND
17229: IFFALSE 17423
17231: GO 17233
17233: DISABLE
// begin PrepareArabianVehicles ;
17234: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17238: LD_EXP 65
17242: PPUSH
17243: LD_INT 135
17245: PUSH
17246: LD_INT 4
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 134
17255: PUSH
17256: LD_INT 19
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 132
17265: PUSH
17266: LD_INT 26
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 128
17275: PUSH
17276: LD_INT 31
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 123
17285: PUSH
17286: LD_INT 37
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 118
17295: PUSH
17296: LD_INT 45
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 112
17305: PUSH
17306: LD_INT 51
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 106
17315: PUSH
17316: LD_INT 57
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 99
17325: PUSH
17326: LD_INT 62
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 104
17335: PUSH
17336: LD_INT 71
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 110
17345: PUSH
17346: LD_INT 78
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 119
17355: PUSH
17356: LD_INT 88
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 128
17365: PUSH
17366: LD_INT 97
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 135
17375: PUSH
17376: LD_INT 106
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 140
17385: PUSH
17386: LD_INT 153
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: PPUSH
17410: LD_INT 0
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_INT 11
17418: PPUSH
17419: CALL 5018 0 5
// end ;
17423: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
17424: LD_EXP 17
17428: PUSH
17429: LD_OWVAR 67
17433: PUSH
17434: LD_INT 3
17436: EQUAL
17437: AND
17438: PUSH
17439: LD_EXP 19
17443: PUSH
17444: LD_INT 2
17446: EQUAL
17447: AND
17448: PUSH
17449: LD_EXP 19
17453: PUSH
17454: LD_EXP 38
17458: LESS
17459: AND
17460: IFFALSE 17654
17462: GO 17464
17464: DISABLE
// begin PrepareArabianVehicles ;
17465: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17469: LD_EXP 65
17473: PPUSH
17474: LD_INT 135
17476: PUSH
17477: LD_INT 4
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 134
17486: PUSH
17487: LD_INT 19
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 132
17496: PUSH
17497: LD_INT 26
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 128
17506: PUSH
17507: LD_INT 31
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 123
17516: PUSH
17517: LD_INT 37
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 118
17526: PUSH
17527: LD_INT 45
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 112
17536: PUSH
17537: LD_INT 51
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 106
17546: PUSH
17547: LD_INT 57
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 99
17556: PUSH
17557: LD_INT 62
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 104
17566: PUSH
17567: LD_INT 71
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 110
17576: PUSH
17577: LD_INT 78
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 119
17586: PUSH
17587: LD_INT 88
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 128
17596: PUSH
17597: LD_INT 97
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 135
17606: PUSH
17607: LD_INT 106
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 140
17616: PUSH
17617: LD_INT 153
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: LD_INT 11
17649: PPUSH
17650: CALL 5018 0 5
// end ;
17654: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17655: LD_EXP 17
17659: PUSH
17660: LD_EXP 19
17664: PUSH
17665: LD_INT 3
17667: EQUAL
17668: AND
17669: PUSH
17670: LD_EXP 19
17674: PUSH
17675: LD_EXP 38
17679: LESS
17680: AND
17681: IFFALSE 17758
17683: GO 17685
17685: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17686: LD_INT 7
17688: PPUSH
17689: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17693: LD_EXP 65
17697: PPUSH
17698: LD_INT 157
17700: PUSH
17701: LD_INT 31
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 194
17710: PUSH
17711: LD_INT 124
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 174
17720: PUSH
17721: LD_INT 158
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 151
17730: PUSH
17731: LD_INT 164
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: PPUSH
17744: LD_INT 0
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: LD_INT 1
17752: NEG
17753: PPUSH
17754: CALL 5018 0 5
// end ;
17758: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17759: LD_EXP 17
17763: PUSH
17764: LD_EXP 19
17768: PUSH
17769: LD_INT 3
17771: EQUAL
17772: AND
17773: PUSH
17774: LD_EXP 19
17778: PUSH
17779: LD_EXP 38
17783: LESS
17784: AND
17785: IFFALSE 18022
17787: GO 17789
17789: DISABLE
// begin wait ( 1 1$30 ) ;
17790: LD_INT 3150
17792: PPUSH
17793: CALL_OW 67
// currentWave = currentWave + 1 ;
17797: LD_ADDR_EXP 19
17801: PUSH
17802: LD_EXP 19
17806: PUSH
17807: LD_INT 1
17809: PLUS
17810: ST_TO_ADDR
// PrepareArabianVehicles ;
17811: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17815: LD_EXP 65
17819: PPUSH
17820: LD_INT 135
17822: PUSH
17823: LD_INT 4
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 134
17832: PUSH
17833: LD_INT 19
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 132
17842: PUSH
17843: LD_INT 26
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 128
17852: PUSH
17853: LD_INT 31
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 123
17862: PUSH
17863: LD_INT 37
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 118
17872: PUSH
17873: LD_INT 45
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 112
17882: PUSH
17883: LD_INT 51
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 106
17892: PUSH
17893: LD_INT 57
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 99
17902: PUSH
17903: LD_INT 62
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 93
17912: PUSH
17913: LD_INT 67
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 86
17922: PUSH
17923: LD_INT 72
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 78
17932: PUSH
17933: LD_INT 75
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 71
17942: PUSH
17943: LD_INT 81
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 69
17952: PUSH
17953: LD_INT 88
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 71
17962: PUSH
17963: LD_INT 95
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 74
17972: PUSH
17973: LD_INT 103
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 80
17982: PUSH
17983: LD_INT 113
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: PPUSH
18009: LD_INT 0
18011: PPUSH
18012: LD_INT 1
18014: PPUSH
18015: LD_INT 11
18017: PPUSH
18018: CALL 5018 0 5
// end ;
18022: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18023: LD_EXP 17
18027: PUSH
18028: LD_OWVAR 67
18032: PUSH
18033: LD_INT 2
18035: EQUAL
18036: AND
18037: PUSH
18038: LD_EXP 19
18042: PUSH
18043: LD_INT 3
18045: EQUAL
18046: AND
18047: PUSH
18048: LD_EXP 19
18052: PUSH
18053: LD_EXP 38
18057: LESS
18058: AND
18059: IFFALSE 18253
18061: GO 18063
18063: DISABLE
// begin PrepareArabianVehicles ;
18064: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18068: LD_EXP 65
18072: PPUSH
18073: LD_INT 135
18075: PUSH
18076: LD_INT 4
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 134
18085: PUSH
18086: LD_INT 19
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 132
18095: PUSH
18096: LD_INT 26
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 128
18105: PUSH
18106: LD_INT 31
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 123
18115: PUSH
18116: LD_INT 37
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 118
18125: PUSH
18126: LD_INT 45
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 112
18135: PUSH
18136: LD_INT 51
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 106
18145: PUSH
18146: LD_INT 57
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 99
18155: PUSH
18156: LD_INT 62
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 104
18165: PUSH
18166: LD_INT 71
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 110
18175: PUSH
18176: LD_INT 78
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 119
18185: PUSH
18186: LD_INT 88
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 128
18195: PUSH
18196: LD_INT 97
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 135
18205: PUSH
18206: LD_INT 106
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 140
18215: PUSH
18216: LD_INT 153
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: PPUSH
18240: LD_INT 0
18242: PPUSH
18243: LD_INT 1
18245: PPUSH
18246: LD_INT 11
18248: PPUSH
18249: CALL 5018 0 5
// end ;
18253: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
18254: LD_EXP 17
18258: PUSH
18259: LD_OWVAR 67
18263: PUSH
18264: LD_INT 3
18266: EQUAL
18267: AND
18268: PUSH
18269: LD_EXP 19
18273: PUSH
18274: LD_INT 3
18276: EQUAL
18277: AND
18278: PUSH
18279: LD_EXP 19
18283: PUSH
18284: LD_EXP 38
18288: LESS
18289: AND
18290: IFFALSE 18484
18292: GO 18294
18294: DISABLE
// begin PrepareArabianVehicles ;
18295: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18299: LD_EXP 65
18303: PPUSH
18304: LD_INT 135
18306: PUSH
18307: LD_INT 4
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 134
18316: PUSH
18317: LD_INT 19
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 132
18326: PUSH
18327: LD_INT 26
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 128
18336: PUSH
18337: LD_INT 31
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 123
18346: PUSH
18347: LD_INT 37
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 118
18356: PUSH
18357: LD_INT 45
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 112
18366: PUSH
18367: LD_INT 51
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 106
18376: PUSH
18377: LD_INT 57
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 99
18386: PUSH
18387: LD_INT 62
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 104
18396: PUSH
18397: LD_INT 71
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 110
18406: PUSH
18407: LD_INT 78
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 119
18416: PUSH
18417: LD_INT 88
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 128
18426: PUSH
18427: LD_INT 97
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 135
18436: PUSH
18437: LD_INT 106
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 140
18446: PUSH
18447: LD_INT 153
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PPUSH
18471: LD_INT 0
18473: PPUSH
18474: LD_INT 1
18476: PPUSH
18477: LD_INT 11
18479: PPUSH
18480: CALL 5018 0 5
// end ;
18484: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18485: LD_EXP 54
18489: PPUSH
18490: CALL_OW 305
18494: PUSH
18495: LD_EXP 23
18499: PUSH
18500: LD_INT 5
18502: LESS
18503: AND
18504: IFFALSE 18514
18506: GO 18508
18508: DISABLE
// begin PrepareArabianKiller ;
18509: CALL 4066 0 0
// enable ;
18513: ENABLE
// end ; end_of_file
18514: END
// export function SetAchievements ; begin
18515: LD_INT 0
18517: PPUSH
// if stealWarmCount = 0 then
18518: LD_EXP 12
18522: PUSH
18523: LD_INT 0
18525: EQUAL
18526: IFFALSE 18535
// SetAchievement ( ACH_ENO ) ;
18528: LD_STRING ACH_ENO
18530: PPUSH
18531: CALL_OW 543
// end ;
18535: LD_VAR 0 1
18539: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18540: LD_EXP 25
18544: PUSH
18545: LD_INT 6
18547: GREATEREQUAL
18548: IFFALSE 18560
18550: GO 18552
18552: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18553: LD_STRING ACH_DEFENSE
18555: PPUSH
18556: CALL_OW 543
18560: END
// every 1 trigger killedArabianUnits >= 25 do
18561: LD_EXP 22
18565: PUSH
18566: LD_INT 25
18568: GREATEREQUAL
18569: IFFALSE 18581
18571: GO 18573
18573: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18574: LD_STRING ACH_ARAB
18576: PPUSH
18577: CALL_OW 543
18581: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18582: LD_VAR 0 2
18586: PUSH
18587: LD_INT 100
18589: EQUAL
18590: IFFALSE 19539
// begin if not StreamModeActive then
18592: LD_EXP 66
18596: NOT
18597: IFFALSE 18607
// StreamModeActive := true ;
18599: LD_ADDR_EXP 66
18603: PUSH
18604: LD_INT 1
18606: ST_TO_ADDR
// if p3 = 0 then
18607: LD_VAR 0 3
18611: PUSH
18612: LD_INT 0
18614: EQUAL
18615: IFFALSE 18621
// InitStreamMode ;
18617: CALL 19697 0 0
// if p3 = 1 then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_INT 1
18628: EQUAL
18629: IFFALSE 18639
// sRocket := true ;
18631: LD_ADDR_EXP 71
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// if p3 = 2 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 2
18646: EQUAL
18647: IFFALSE 18657
// sSpeed := true ;
18649: LD_ADDR_EXP 70
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 3 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 3
18664: EQUAL
18665: IFFALSE 18675
// sEngine := true ;
18667: LD_ADDR_EXP 72
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 4 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 4
18682: EQUAL
18683: IFFALSE 18693
// sSpec := true ;
18685: LD_ADDR_EXP 69
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 5 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 5
18700: EQUAL
18701: IFFALSE 18711
// sLevel := true ;
18703: LD_ADDR_EXP 73
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 6 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 6
18718: EQUAL
18719: IFFALSE 18729
// sArmoury := true ;
18721: LD_ADDR_EXP 74
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 7 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 7
18736: EQUAL
18737: IFFALSE 18747
// sRadar := true ;
18739: LD_ADDR_EXP 75
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 8 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 8
18754: EQUAL
18755: IFFALSE 18765
// sBunker := true ;
18757: LD_ADDR_EXP 76
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 9 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 9
18772: EQUAL
18773: IFFALSE 18783
// sHack := true ;
18775: LD_ADDR_EXP 77
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 10 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 10
18790: EQUAL
18791: IFFALSE 18801
// sFire := true ;
18793: LD_ADDR_EXP 78
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 11 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 11
18808: EQUAL
18809: IFFALSE 18819
// sRefresh := true ;
18811: LD_ADDR_EXP 79
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 12 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 12
18826: EQUAL
18827: IFFALSE 18837
// sExp := true ;
18829: LD_ADDR_EXP 80
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// if p3 = 13 then
18837: LD_VAR 0 3
18841: PUSH
18842: LD_INT 13
18844: EQUAL
18845: IFFALSE 18855
// sDepot := true ;
18847: LD_ADDR_EXP 81
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// if p3 = 14 then
18855: LD_VAR 0 3
18859: PUSH
18860: LD_INT 14
18862: EQUAL
18863: IFFALSE 18873
// sFlag := true ;
18865: LD_ADDR_EXP 82
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// if p3 = 15 then
18873: LD_VAR 0 3
18877: PUSH
18878: LD_INT 15
18880: EQUAL
18881: IFFALSE 18891
// sKamikadze := true ;
18883: LD_ADDR_EXP 90
18887: PUSH
18888: LD_INT 1
18890: ST_TO_ADDR
// if p3 = 16 then
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 16
18898: EQUAL
18899: IFFALSE 18909
// sTroll := true ;
18901: LD_ADDR_EXP 91
18905: PUSH
18906: LD_INT 1
18908: ST_TO_ADDR
// if p3 = 17 then
18909: LD_VAR 0 3
18913: PUSH
18914: LD_INT 17
18916: EQUAL
18917: IFFALSE 18927
// sSlow := true ;
18919: LD_ADDR_EXP 92
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// if p3 = 18 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 18
18934: EQUAL
18935: IFFALSE 18945
// sLack := true ;
18937: LD_ADDR_EXP 93
18941: PUSH
18942: LD_INT 1
18944: ST_TO_ADDR
// if p3 = 19 then
18945: LD_VAR 0 3
18949: PUSH
18950: LD_INT 19
18952: EQUAL
18953: IFFALSE 18963
// sTank := true ;
18955: LD_ADDR_EXP 95
18959: PUSH
18960: LD_INT 1
18962: ST_TO_ADDR
// if p3 = 20 then
18963: LD_VAR 0 3
18967: PUSH
18968: LD_INT 20
18970: EQUAL
18971: IFFALSE 18981
// sRemote := true ;
18973: LD_ADDR_EXP 96
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if p3 = 21 then
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 21
18988: EQUAL
18989: IFFALSE 18999
// sPowell := true ;
18991: LD_ADDR_EXP 97
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// if p3 = 22 then
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 22
19006: EQUAL
19007: IFFALSE 19017
// sTeleport := true ;
19009: LD_ADDR_EXP 100
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
// if p3 = 23 then
19017: LD_VAR 0 3
19021: PUSH
19022: LD_INT 23
19024: EQUAL
19025: IFFALSE 19035
// sOilTower := true ;
19027: LD_ADDR_EXP 102
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// if p3 = 24 then
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 24
19042: EQUAL
19043: IFFALSE 19053
// sShovel := true ;
19045: LD_ADDR_EXP 103
19049: PUSH
19050: LD_INT 1
19052: ST_TO_ADDR
// if p3 = 25 then
19053: LD_VAR 0 3
19057: PUSH
19058: LD_INT 25
19060: EQUAL
19061: IFFALSE 19071
// sSheik := true ;
19063: LD_ADDR_EXP 104
19067: PUSH
19068: LD_INT 1
19070: ST_TO_ADDR
// if p3 = 26 then
19071: LD_VAR 0 3
19075: PUSH
19076: LD_INT 26
19078: EQUAL
19079: IFFALSE 19089
// sEarthquake := true ;
19081: LD_ADDR_EXP 106
19085: PUSH
19086: LD_INT 1
19088: ST_TO_ADDR
// if p3 = 27 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_INT 27
19096: EQUAL
19097: IFFALSE 19107
// sAI := true ;
19099: LD_ADDR_EXP 107
19103: PUSH
19104: LD_INT 1
19106: ST_TO_ADDR
// if p3 = 28 then
19107: LD_VAR 0 3
19111: PUSH
19112: LD_INT 28
19114: EQUAL
19115: IFFALSE 19125
// sCargo := true ;
19117: LD_ADDR_EXP 110
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// if p3 = 29 then
19125: LD_VAR 0 3
19129: PUSH
19130: LD_INT 29
19132: EQUAL
19133: IFFALSE 19143
// sDLaser := true ;
19135: LD_ADDR_EXP 111
19139: PUSH
19140: LD_INT 1
19142: ST_TO_ADDR
// if p3 = 30 then
19143: LD_VAR 0 3
19147: PUSH
19148: LD_INT 30
19150: EQUAL
19151: IFFALSE 19161
// sExchange := true ;
19153: LD_ADDR_EXP 112
19157: PUSH
19158: LD_INT 1
19160: ST_TO_ADDR
// if p3 = 31 then
19161: LD_VAR 0 3
19165: PUSH
19166: LD_INT 31
19168: EQUAL
19169: IFFALSE 19179
// sFac := true ;
19171: LD_ADDR_EXP 113
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// if p3 = 32 then
19179: LD_VAR 0 3
19183: PUSH
19184: LD_INT 32
19186: EQUAL
19187: IFFALSE 19197
// sPower := true ;
19189: LD_ADDR_EXP 114
19193: PUSH
19194: LD_INT 1
19196: ST_TO_ADDR
// if p3 = 33 then
19197: LD_VAR 0 3
19201: PUSH
19202: LD_INT 33
19204: EQUAL
19205: IFFALSE 19215
// sRandom := true ;
19207: LD_ADDR_EXP 115
19211: PUSH
19212: LD_INT 1
19214: ST_TO_ADDR
// if p3 = 34 then
19215: LD_VAR 0 3
19219: PUSH
19220: LD_INT 34
19222: EQUAL
19223: IFFALSE 19233
// sShield := true ;
19225: LD_ADDR_EXP 116
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if p3 = 35 then
19233: LD_VAR 0 3
19237: PUSH
19238: LD_INT 35
19240: EQUAL
19241: IFFALSE 19251
// sTime := true ;
19243: LD_ADDR_EXP 117
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// if p3 = 36 then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_INT 36
19258: EQUAL
19259: IFFALSE 19269
// sTools := true ;
19261: LD_ADDR_EXP 118
19265: PUSH
19266: LD_INT 1
19268: ST_TO_ADDR
// if p3 = 101 then
19269: LD_VAR 0 3
19273: PUSH
19274: LD_INT 101
19276: EQUAL
19277: IFFALSE 19287
// sSold := true ;
19279: LD_ADDR_EXP 83
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// if p3 = 102 then
19287: LD_VAR 0 3
19291: PUSH
19292: LD_INT 102
19294: EQUAL
19295: IFFALSE 19305
// sDiff := true ;
19297: LD_ADDR_EXP 84
19301: PUSH
19302: LD_INT 1
19304: ST_TO_ADDR
// if p3 = 103 then
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 103
19312: EQUAL
19313: IFFALSE 19323
// sFog := true ;
19315: LD_ADDR_EXP 87
19319: PUSH
19320: LD_INT 1
19322: ST_TO_ADDR
// if p3 = 104 then
19323: LD_VAR 0 3
19327: PUSH
19328: LD_INT 104
19330: EQUAL
19331: IFFALSE 19341
// sReset := true ;
19333: LD_ADDR_EXP 88
19337: PUSH
19338: LD_INT 1
19340: ST_TO_ADDR
// if p3 = 105 then
19341: LD_VAR 0 3
19345: PUSH
19346: LD_INT 105
19348: EQUAL
19349: IFFALSE 19359
// sSun := true ;
19351: LD_ADDR_EXP 89
19355: PUSH
19356: LD_INT 1
19358: ST_TO_ADDR
// if p3 = 106 then
19359: LD_VAR 0 3
19363: PUSH
19364: LD_INT 106
19366: EQUAL
19367: IFFALSE 19377
// sTiger := true ;
19369: LD_ADDR_EXP 85
19373: PUSH
19374: LD_INT 1
19376: ST_TO_ADDR
// if p3 = 107 then
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 107
19384: EQUAL
19385: IFFALSE 19395
// sBomb := true ;
19387: LD_ADDR_EXP 86
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// if p3 = 108 then
19395: LD_VAR 0 3
19399: PUSH
19400: LD_INT 108
19402: EQUAL
19403: IFFALSE 19413
// sWound := true ;
19405: LD_ADDR_EXP 94
19409: PUSH
19410: LD_INT 1
19412: ST_TO_ADDR
// if p3 = 109 then
19413: LD_VAR 0 3
19417: PUSH
19418: LD_INT 109
19420: EQUAL
19421: IFFALSE 19431
// sBetray := true ;
19423: LD_ADDR_EXP 98
19427: PUSH
19428: LD_INT 1
19430: ST_TO_ADDR
// if p3 = 110 then
19431: LD_VAR 0 3
19435: PUSH
19436: LD_INT 110
19438: EQUAL
19439: IFFALSE 19449
// sContamin := true ;
19441: LD_ADDR_EXP 99
19445: PUSH
19446: LD_INT 1
19448: ST_TO_ADDR
// if p3 = 111 then
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 111
19456: EQUAL
19457: IFFALSE 19467
// sOil := true ;
19459: LD_ADDR_EXP 101
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 112 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 112
19474: EQUAL
19475: IFFALSE 19485
// sStu := true ;
19477: LD_ADDR_EXP 105
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// if p3 = 113 then
19485: LD_VAR 0 3
19489: PUSH
19490: LD_INT 113
19492: EQUAL
19493: IFFALSE 19503
// sBazooka := true ;
19495: LD_ADDR_EXP 108
19499: PUSH
19500: LD_INT 1
19502: ST_TO_ADDR
// if p3 = 114 then
19503: LD_VAR 0 3
19507: PUSH
19508: LD_INT 114
19510: EQUAL
19511: IFFALSE 19521
// sMortar := true ;
19513: LD_ADDR_EXP 109
19517: PUSH
19518: LD_INT 1
19520: ST_TO_ADDR
// if p3 = 115 then
19521: LD_VAR 0 3
19525: PUSH
19526: LD_INT 115
19528: EQUAL
19529: IFFALSE 19539
// sRanger := true ;
19531: LD_ADDR_EXP 119
19535: PUSH
19536: LD_INT 1
19538: ST_TO_ADDR
// end ; if p2 = 101 then
19539: LD_VAR 0 2
19543: PUSH
19544: LD_INT 101
19546: EQUAL
19547: IFFALSE 19675
// begin case p3 of 1 :
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 1
19556: DOUBLE
19557: EQUAL
19558: IFTRUE 19562
19560: GO 19569
19562: POP
// hHackUnlimitedResources ; 2 :
19563: CALL 30710 0 0
19567: GO 19675
19569: LD_INT 2
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19584
19577: POP
// hHackSetLevel10 ; 3 :
19578: CALL 30843 0 0
19582: GO 19675
19584: LD_INT 3
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19599
19592: POP
// hHackSetLevel10YourUnits ; 4 :
19593: CALL 30928 0 0
19597: GO 19675
19599: LD_INT 4
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19614
19607: POP
// hHackInvincible ; 5 :
19608: CALL 31376 0 0
19612: GO 19675
19614: LD_INT 5
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19629
19622: POP
// hHackInvisible ; 6 :
19623: CALL 31487 0 0
19627: GO 19675
19629: LD_INT 6
19631: DOUBLE
19632: EQUAL
19633: IFTRUE 19637
19635: GO 19644
19637: POP
// hHackChangeYourSide ; 7 :
19638: CALL 31544 0 0
19642: GO 19675
19644: LD_INT 7
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19659
19652: POP
// hHackChangeUnitSide ; 8 :
19653: CALL 31586 0 0
19657: GO 19675
19659: LD_INT 8
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19674
19667: POP
// hHackFog ; end ;
19668: CALL 31687 0 0
19672: GO 19675
19674: POP
// end ; end ;
19675: PPOPN 6
19677: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19678: GO 19680
19680: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19681: LD_STRING initStreamRollete();
19683: PPUSH
19684: CALL_OW 559
// InitStreamMode ;
19688: CALL 19697 0 0
// DefineStreamItems ( ) ;
19692: CALL 20137 0 0
// end ;
19696: END
// function InitStreamMode ; begin
19697: LD_INT 0
19699: PPUSH
// streamModeActive := false ;
19700: LD_ADDR_EXP 66
19704: PUSH
19705: LD_INT 0
19707: ST_TO_ADDR
// normalCounter := 36 ;
19708: LD_ADDR_EXP 67
19712: PUSH
19713: LD_INT 36
19715: ST_TO_ADDR
// hardcoreCounter := 16 ;
19716: LD_ADDR_EXP 68
19720: PUSH
19721: LD_INT 16
19723: ST_TO_ADDR
// sRocket := false ;
19724: LD_ADDR_EXP 71
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// sSpeed := false ;
19732: LD_ADDR_EXP 70
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// sEngine := false ;
19740: LD_ADDR_EXP 72
19744: PUSH
19745: LD_INT 0
19747: ST_TO_ADDR
// sSpec := false ;
19748: LD_ADDR_EXP 69
19752: PUSH
19753: LD_INT 0
19755: ST_TO_ADDR
// sLevel := false ;
19756: LD_ADDR_EXP 73
19760: PUSH
19761: LD_INT 0
19763: ST_TO_ADDR
// sArmoury := false ;
19764: LD_ADDR_EXP 74
19768: PUSH
19769: LD_INT 0
19771: ST_TO_ADDR
// sRadar := false ;
19772: LD_ADDR_EXP 75
19776: PUSH
19777: LD_INT 0
19779: ST_TO_ADDR
// sBunker := false ;
19780: LD_ADDR_EXP 76
19784: PUSH
19785: LD_INT 0
19787: ST_TO_ADDR
// sHack := false ;
19788: LD_ADDR_EXP 77
19792: PUSH
19793: LD_INT 0
19795: ST_TO_ADDR
// sFire := false ;
19796: LD_ADDR_EXP 78
19800: PUSH
19801: LD_INT 0
19803: ST_TO_ADDR
// sRefresh := false ;
19804: LD_ADDR_EXP 79
19808: PUSH
19809: LD_INT 0
19811: ST_TO_ADDR
// sExp := false ;
19812: LD_ADDR_EXP 80
19816: PUSH
19817: LD_INT 0
19819: ST_TO_ADDR
// sDepot := false ;
19820: LD_ADDR_EXP 81
19824: PUSH
19825: LD_INT 0
19827: ST_TO_ADDR
// sFlag := false ;
19828: LD_ADDR_EXP 82
19832: PUSH
19833: LD_INT 0
19835: ST_TO_ADDR
// sKamikadze := false ;
19836: LD_ADDR_EXP 90
19840: PUSH
19841: LD_INT 0
19843: ST_TO_ADDR
// sTroll := false ;
19844: LD_ADDR_EXP 91
19848: PUSH
19849: LD_INT 0
19851: ST_TO_ADDR
// sSlow := false ;
19852: LD_ADDR_EXP 92
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// sLack := false ;
19860: LD_ADDR_EXP 93
19864: PUSH
19865: LD_INT 0
19867: ST_TO_ADDR
// sTank := false ;
19868: LD_ADDR_EXP 95
19872: PUSH
19873: LD_INT 0
19875: ST_TO_ADDR
// sRemote := false ;
19876: LD_ADDR_EXP 96
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
// sPowell := false ;
19884: LD_ADDR_EXP 97
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// sTeleport := false ;
19892: LD_ADDR_EXP 100
19896: PUSH
19897: LD_INT 0
19899: ST_TO_ADDR
// sOilTower := false ;
19900: LD_ADDR_EXP 102
19904: PUSH
19905: LD_INT 0
19907: ST_TO_ADDR
// sShovel := false ;
19908: LD_ADDR_EXP 103
19912: PUSH
19913: LD_INT 0
19915: ST_TO_ADDR
// sSheik := false ;
19916: LD_ADDR_EXP 104
19920: PUSH
19921: LD_INT 0
19923: ST_TO_ADDR
// sEarthquake := false ;
19924: LD_ADDR_EXP 106
19928: PUSH
19929: LD_INT 0
19931: ST_TO_ADDR
// sAI := false ;
19932: LD_ADDR_EXP 107
19936: PUSH
19937: LD_INT 0
19939: ST_TO_ADDR
// sCargo := false ;
19940: LD_ADDR_EXP 110
19944: PUSH
19945: LD_INT 0
19947: ST_TO_ADDR
// sDLaser := false ;
19948: LD_ADDR_EXP 111
19952: PUSH
19953: LD_INT 0
19955: ST_TO_ADDR
// sExchange := false ;
19956: LD_ADDR_EXP 112
19960: PUSH
19961: LD_INT 0
19963: ST_TO_ADDR
// sFac := false ;
19964: LD_ADDR_EXP 113
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// sPower := false ;
19972: LD_ADDR_EXP 114
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// sRandom := false ;
19980: LD_ADDR_EXP 115
19984: PUSH
19985: LD_INT 0
19987: ST_TO_ADDR
// sShield := false ;
19988: LD_ADDR_EXP 116
19992: PUSH
19993: LD_INT 0
19995: ST_TO_ADDR
// sTime := false ;
19996: LD_ADDR_EXP 117
20000: PUSH
20001: LD_INT 0
20003: ST_TO_ADDR
// sTools := false ;
20004: LD_ADDR_EXP 118
20008: PUSH
20009: LD_INT 0
20011: ST_TO_ADDR
// sSold := false ;
20012: LD_ADDR_EXP 83
20016: PUSH
20017: LD_INT 0
20019: ST_TO_ADDR
// sDiff := false ;
20020: LD_ADDR_EXP 84
20024: PUSH
20025: LD_INT 0
20027: ST_TO_ADDR
// sFog := false ;
20028: LD_ADDR_EXP 87
20032: PUSH
20033: LD_INT 0
20035: ST_TO_ADDR
// sReset := false ;
20036: LD_ADDR_EXP 88
20040: PUSH
20041: LD_INT 0
20043: ST_TO_ADDR
// sSun := false ;
20044: LD_ADDR_EXP 89
20048: PUSH
20049: LD_INT 0
20051: ST_TO_ADDR
// sTiger := false ;
20052: LD_ADDR_EXP 85
20056: PUSH
20057: LD_INT 0
20059: ST_TO_ADDR
// sBomb := false ;
20060: LD_ADDR_EXP 86
20064: PUSH
20065: LD_INT 0
20067: ST_TO_ADDR
// sWound := false ;
20068: LD_ADDR_EXP 94
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
// sBetray := false ;
20076: LD_ADDR_EXP 98
20080: PUSH
20081: LD_INT 0
20083: ST_TO_ADDR
// sContamin := false ;
20084: LD_ADDR_EXP 99
20088: PUSH
20089: LD_INT 0
20091: ST_TO_ADDR
// sOil := false ;
20092: LD_ADDR_EXP 101
20096: PUSH
20097: LD_INT 0
20099: ST_TO_ADDR
// sStu := false ;
20100: LD_ADDR_EXP 105
20104: PUSH
20105: LD_INT 0
20107: ST_TO_ADDR
// sBazooka := false ;
20108: LD_ADDR_EXP 108
20112: PUSH
20113: LD_INT 0
20115: ST_TO_ADDR
// sMortar := false ;
20116: LD_ADDR_EXP 109
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// sRanger := false ;
20124: LD_ADDR_EXP 119
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// end ;
20132: LD_VAR 0 1
20136: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20137: LD_INT 0
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
20143: PPUSH
// result := [ ] ;
20144: LD_ADDR_VAR 0 1
20148: PUSH
20149: EMPTY
20150: ST_TO_ADDR
// if campaign_id = 1 then
20151: LD_OWVAR 69
20155: PUSH
20156: LD_INT 1
20158: EQUAL
20159: IFFALSE 23097
// begin case mission_number of 1 :
20161: LD_OWVAR 70
20165: PUSH
20166: LD_INT 1
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20238
20174: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20175: LD_ADDR_VAR 0 1
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 4
20185: PUSH
20186: LD_INT 11
20188: PUSH
20189: LD_INT 12
20191: PUSH
20192: LD_INT 15
20194: PUSH
20195: LD_INT 16
20197: PUSH
20198: LD_INT 22
20200: PUSH
20201: LD_INT 23
20203: PUSH
20204: LD_INT 26
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 101
20220: PUSH
20221: LD_INT 102
20223: PUSH
20224: LD_INT 106
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: ST_TO_ADDR
20236: GO 23095
20238: LD_INT 2
20240: DOUBLE
20241: EQUAL
20242: IFTRUE 20246
20244: GO 20318
20246: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20247: LD_ADDR_VAR 0 1
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 4
20257: PUSH
20258: LD_INT 11
20260: PUSH
20261: LD_INT 12
20263: PUSH
20264: LD_INT 15
20266: PUSH
20267: LD_INT 16
20269: PUSH
20270: LD_INT 22
20272: PUSH
20273: LD_INT 23
20275: PUSH
20276: LD_INT 26
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 101
20292: PUSH
20293: LD_INT 102
20295: PUSH
20296: LD_INT 105
20298: PUSH
20299: LD_INT 106
20301: PUSH
20302: LD_INT 108
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: ST_TO_ADDR
20316: GO 23095
20318: LD_INT 3
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20402
20326: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 4
20337: PUSH
20338: LD_INT 5
20340: PUSH
20341: LD_INT 11
20343: PUSH
20344: LD_INT 12
20346: PUSH
20347: LD_INT 15
20349: PUSH
20350: LD_INT 16
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_INT 26
20358: PUSH
20359: LD_INT 36
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 101
20376: PUSH
20377: LD_INT 102
20379: PUSH
20380: LD_INT 105
20382: PUSH
20383: LD_INT 106
20385: PUSH
20386: LD_INT 108
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: ST_TO_ADDR
20400: GO 23095
20402: LD_INT 4
20404: DOUBLE
20405: EQUAL
20406: IFTRUE 20410
20408: GO 20494
20410: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20411: LD_ADDR_VAR 0 1
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: LD_INT 4
20421: PUSH
20422: LD_INT 5
20424: PUSH
20425: LD_INT 8
20427: PUSH
20428: LD_INT 11
20430: PUSH
20431: LD_INT 12
20433: PUSH
20434: LD_INT 15
20436: PUSH
20437: LD_INT 16
20439: PUSH
20440: LD_INT 22
20442: PUSH
20443: LD_INT 23
20445: PUSH
20446: LD_INT 26
20448: PUSH
20449: LD_INT 36
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 101
20468: PUSH
20469: LD_INT 102
20471: PUSH
20472: LD_INT 105
20474: PUSH
20475: LD_INT 106
20477: PUSH
20478: LD_INT 108
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: ST_TO_ADDR
20492: GO 23095
20494: LD_INT 5
20496: DOUBLE
20497: EQUAL
20498: IFTRUE 20502
20500: GO 20602
20502: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20503: LD_ADDR_VAR 0 1
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: LD_INT 4
20513: PUSH
20514: LD_INT 5
20516: PUSH
20517: LD_INT 6
20519: PUSH
20520: LD_INT 8
20522: PUSH
20523: LD_INT 11
20525: PUSH
20526: LD_INT 12
20528: PUSH
20529: LD_INT 15
20531: PUSH
20532: LD_INT 16
20534: PUSH
20535: LD_INT 22
20537: PUSH
20538: LD_INT 23
20540: PUSH
20541: LD_INT 25
20543: PUSH
20544: LD_INT 26
20546: PUSH
20547: LD_INT 36
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 101
20568: PUSH
20569: LD_INT 102
20571: PUSH
20572: LD_INT 105
20574: PUSH
20575: LD_INT 106
20577: PUSH
20578: LD_INT 108
20580: PUSH
20581: LD_INT 109
20583: PUSH
20584: LD_INT 112
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: ST_TO_ADDR
20600: GO 23095
20602: LD_INT 6
20604: DOUBLE
20605: EQUAL
20606: IFTRUE 20610
20608: GO 20730
20610: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20611: LD_ADDR_VAR 0 1
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 4
20621: PUSH
20622: LD_INT 5
20624: PUSH
20625: LD_INT 6
20627: PUSH
20628: LD_INT 8
20630: PUSH
20631: LD_INT 11
20633: PUSH
20634: LD_INT 12
20636: PUSH
20637: LD_INT 15
20639: PUSH
20640: LD_INT 16
20642: PUSH
20643: LD_INT 20
20645: PUSH
20646: LD_INT 21
20648: PUSH
20649: LD_INT 22
20651: PUSH
20652: LD_INT 23
20654: PUSH
20655: LD_INT 25
20657: PUSH
20658: LD_INT 26
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 31
20666: PUSH
20667: LD_INT 32
20669: PUSH
20670: LD_INT 36
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 101
20696: PUSH
20697: LD_INT 102
20699: PUSH
20700: LD_INT 105
20702: PUSH
20703: LD_INT 106
20705: PUSH
20706: LD_INT 108
20708: PUSH
20709: LD_INT 109
20711: PUSH
20712: LD_INT 112
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: ST_TO_ADDR
20728: GO 23095
20730: LD_INT 7
20732: DOUBLE
20733: EQUAL
20734: IFTRUE 20738
20736: GO 20838
20738: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20739: LD_ADDR_VAR 0 1
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: LD_INT 4
20749: PUSH
20750: LD_INT 5
20752: PUSH
20753: LD_INT 7
20755: PUSH
20756: LD_INT 11
20758: PUSH
20759: LD_INT 12
20761: PUSH
20762: LD_INT 15
20764: PUSH
20765: LD_INT 16
20767: PUSH
20768: LD_INT 20
20770: PUSH
20771: LD_INT 21
20773: PUSH
20774: LD_INT 22
20776: PUSH
20777: LD_INT 23
20779: PUSH
20780: LD_INT 25
20782: PUSH
20783: LD_INT 26
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 101
20804: PUSH
20805: LD_INT 102
20807: PUSH
20808: LD_INT 103
20810: PUSH
20811: LD_INT 105
20813: PUSH
20814: LD_INT 106
20816: PUSH
20817: LD_INT 108
20819: PUSH
20820: LD_INT 112
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: ST_TO_ADDR
20836: GO 23095
20838: LD_INT 8
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20974
20846: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20847: LD_ADDR_VAR 0 1
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 4
20857: PUSH
20858: LD_INT 5
20860: PUSH
20861: LD_INT 6
20863: PUSH
20864: LD_INT 7
20866: PUSH
20867: LD_INT 8
20869: PUSH
20870: LD_INT 11
20872: PUSH
20873: LD_INT 12
20875: PUSH
20876: LD_INT 15
20878: PUSH
20879: LD_INT 16
20881: PUSH
20882: LD_INT 20
20884: PUSH
20885: LD_INT 21
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 23
20893: PUSH
20894: LD_INT 25
20896: PUSH
20897: LD_INT 26
20899: PUSH
20900: LD_INT 30
20902: PUSH
20903: LD_INT 31
20905: PUSH
20906: LD_INT 32
20908: PUSH
20909: LD_INT 36
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 101
20936: PUSH
20937: LD_INT 102
20939: PUSH
20940: LD_INT 103
20942: PUSH
20943: LD_INT 105
20945: PUSH
20946: LD_INT 106
20948: PUSH
20949: LD_INT 108
20951: PUSH
20952: LD_INT 109
20954: PUSH
20955: LD_INT 112
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: ST_TO_ADDR
20972: GO 23095
20974: LD_INT 9
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 21118
20982: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20983: LD_ADDR_VAR 0 1
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: LD_INT 4
20993: PUSH
20994: LD_INT 5
20996: PUSH
20997: LD_INT 6
20999: PUSH
21000: LD_INT 7
21002: PUSH
21003: LD_INT 8
21005: PUSH
21006: LD_INT 11
21008: PUSH
21009: LD_INT 12
21011: PUSH
21012: LD_INT 15
21014: PUSH
21015: LD_INT 16
21017: PUSH
21018: LD_INT 20
21020: PUSH
21021: LD_INT 21
21023: PUSH
21024: LD_INT 22
21026: PUSH
21027: LD_INT 23
21029: PUSH
21030: LD_INT 25
21032: PUSH
21033: LD_INT 26
21035: PUSH
21036: LD_INT 28
21038: PUSH
21039: LD_INT 30
21041: PUSH
21042: LD_INT 31
21044: PUSH
21045: LD_INT 32
21047: PUSH
21048: LD_INT 36
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 101
21076: PUSH
21077: LD_INT 102
21079: PUSH
21080: LD_INT 103
21082: PUSH
21083: LD_INT 105
21085: PUSH
21086: LD_INT 106
21088: PUSH
21089: LD_INT 108
21091: PUSH
21092: LD_INT 109
21094: PUSH
21095: LD_INT 112
21097: PUSH
21098: LD_INT 114
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: ST_TO_ADDR
21116: GO 23095
21118: LD_INT 10
21120: DOUBLE
21121: EQUAL
21122: IFTRUE 21126
21124: GO 21310
21126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21127: LD_ADDR_VAR 0 1
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: LD_INT 4
21137: PUSH
21138: LD_INT 5
21140: PUSH
21141: LD_INT 6
21143: PUSH
21144: LD_INT 7
21146: PUSH
21147: LD_INT 8
21149: PUSH
21150: LD_INT 9
21152: PUSH
21153: LD_INT 10
21155: PUSH
21156: LD_INT 11
21158: PUSH
21159: LD_INT 12
21161: PUSH
21162: LD_INT 13
21164: PUSH
21165: LD_INT 14
21167: PUSH
21168: LD_INT 15
21170: PUSH
21171: LD_INT 16
21173: PUSH
21174: LD_INT 17
21176: PUSH
21177: LD_INT 18
21179: PUSH
21180: LD_INT 19
21182: PUSH
21183: LD_INT 20
21185: PUSH
21186: LD_INT 21
21188: PUSH
21189: LD_INT 22
21191: PUSH
21192: LD_INT 23
21194: PUSH
21195: LD_INT 24
21197: PUSH
21198: LD_INT 25
21200: PUSH
21201: LD_INT 26
21203: PUSH
21204: LD_INT 28
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 31
21212: PUSH
21213: LD_INT 32
21215: PUSH
21216: LD_INT 36
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 101
21252: PUSH
21253: LD_INT 102
21255: PUSH
21256: LD_INT 103
21258: PUSH
21259: LD_INT 104
21261: PUSH
21262: LD_INT 105
21264: PUSH
21265: LD_INT 106
21267: PUSH
21268: LD_INT 107
21270: PUSH
21271: LD_INT 108
21273: PUSH
21274: LD_INT 109
21276: PUSH
21277: LD_INT 110
21279: PUSH
21280: LD_INT 111
21282: PUSH
21283: LD_INT 112
21285: PUSH
21286: LD_INT 114
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: ST_TO_ADDR
21308: GO 23095
21310: LD_INT 11
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21510
21318: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21319: LD_ADDR_VAR 0 1
21323: PUSH
21324: LD_INT 2
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: LD_INT 4
21332: PUSH
21333: LD_INT 5
21335: PUSH
21336: LD_INT 6
21338: PUSH
21339: LD_INT 7
21341: PUSH
21342: LD_INT 8
21344: PUSH
21345: LD_INT 9
21347: PUSH
21348: LD_INT 10
21350: PUSH
21351: LD_INT 11
21353: PUSH
21354: LD_INT 12
21356: PUSH
21357: LD_INT 13
21359: PUSH
21360: LD_INT 14
21362: PUSH
21363: LD_INT 15
21365: PUSH
21366: LD_INT 16
21368: PUSH
21369: LD_INT 17
21371: PUSH
21372: LD_INT 18
21374: PUSH
21375: LD_INT 19
21377: PUSH
21378: LD_INT 20
21380: PUSH
21381: LD_INT 21
21383: PUSH
21384: LD_INT 22
21386: PUSH
21387: LD_INT 23
21389: PUSH
21390: LD_INT 24
21392: PUSH
21393: LD_INT 25
21395: PUSH
21396: LD_INT 26
21398: PUSH
21399: LD_INT 28
21401: PUSH
21402: LD_INT 30
21404: PUSH
21405: LD_INT 31
21407: PUSH
21408: LD_INT 32
21410: PUSH
21411: LD_INT 34
21413: PUSH
21414: LD_INT 36
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 101
21452: PUSH
21453: LD_INT 102
21455: PUSH
21456: LD_INT 103
21458: PUSH
21459: LD_INT 104
21461: PUSH
21462: LD_INT 105
21464: PUSH
21465: LD_INT 106
21467: PUSH
21468: LD_INT 107
21470: PUSH
21471: LD_INT 108
21473: PUSH
21474: LD_INT 109
21476: PUSH
21477: LD_INT 110
21479: PUSH
21480: LD_INT 111
21482: PUSH
21483: LD_INT 112
21485: PUSH
21486: LD_INT 114
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: ST_TO_ADDR
21508: GO 23095
21510: LD_INT 12
21512: DOUBLE
21513: EQUAL
21514: IFTRUE 21518
21516: GO 21726
21518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: LD_INT 3
21532: PUSH
21533: LD_INT 4
21535: PUSH
21536: LD_INT 5
21538: PUSH
21539: LD_INT 6
21541: PUSH
21542: LD_INT 7
21544: PUSH
21545: LD_INT 8
21547: PUSH
21548: LD_INT 9
21550: PUSH
21551: LD_INT 10
21553: PUSH
21554: LD_INT 11
21556: PUSH
21557: LD_INT 12
21559: PUSH
21560: LD_INT 13
21562: PUSH
21563: LD_INT 14
21565: PUSH
21566: LD_INT 15
21568: PUSH
21569: LD_INT 16
21571: PUSH
21572: LD_INT 17
21574: PUSH
21575: LD_INT 18
21577: PUSH
21578: LD_INT 19
21580: PUSH
21581: LD_INT 20
21583: PUSH
21584: LD_INT 21
21586: PUSH
21587: LD_INT 22
21589: PUSH
21590: LD_INT 23
21592: PUSH
21593: LD_INT 24
21595: PUSH
21596: LD_INT 25
21598: PUSH
21599: LD_INT 26
21601: PUSH
21602: LD_INT 27
21604: PUSH
21605: LD_INT 28
21607: PUSH
21608: LD_INT 30
21610: PUSH
21611: LD_INT 31
21613: PUSH
21614: LD_INT 32
21616: PUSH
21617: LD_INT 33
21619: PUSH
21620: LD_INT 34
21622: PUSH
21623: LD_INT 36
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 101
21664: PUSH
21665: LD_INT 102
21667: PUSH
21668: LD_INT 103
21670: PUSH
21671: LD_INT 104
21673: PUSH
21674: LD_INT 105
21676: PUSH
21677: LD_INT 106
21679: PUSH
21680: LD_INT 107
21682: PUSH
21683: LD_INT 108
21685: PUSH
21686: LD_INT 109
21688: PUSH
21689: LD_INT 110
21691: PUSH
21692: LD_INT 111
21694: PUSH
21695: LD_INT 112
21697: PUSH
21698: LD_INT 113
21700: PUSH
21701: LD_INT 114
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: ST_TO_ADDR
21724: GO 23095
21726: LD_INT 13
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21930
21734: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21735: LD_ADDR_VAR 0 1
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: LD_INT 3
21748: PUSH
21749: LD_INT 4
21751: PUSH
21752: LD_INT 5
21754: PUSH
21755: LD_INT 8
21757: PUSH
21758: LD_INT 9
21760: PUSH
21761: LD_INT 10
21763: PUSH
21764: LD_INT 11
21766: PUSH
21767: LD_INT 12
21769: PUSH
21770: LD_INT 14
21772: PUSH
21773: LD_INT 15
21775: PUSH
21776: LD_INT 16
21778: PUSH
21779: LD_INT 17
21781: PUSH
21782: LD_INT 18
21784: PUSH
21785: LD_INT 19
21787: PUSH
21788: LD_INT 20
21790: PUSH
21791: LD_INT 21
21793: PUSH
21794: LD_INT 22
21796: PUSH
21797: LD_INT 23
21799: PUSH
21800: LD_INT 24
21802: PUSH
21803: LD_INT 25
21805: PUSH
21806: LD_INT 26
21808: PUSH
21809: LD_INT 27
21811: PUSH
21812: LD_INT 28
21814: PUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 31
21820: PUSH
21821: LD_INT 32
21823: PUSH
21824: LD_INT 33
21826: PUSH
21827: LD_INT 34
21829: PUSH
21830: LD_INT 36
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 101
21868: PUSH
21869: LD_INT 102
21871: PUSH
21872: LD_INT 103
21874: PUSH
21875: LD_INT 104
21877: PUSH
21878: LD_INT 105
21880: PUSH
21881: LD_INT 106
21883: PUSH
21884: LD_INT 107
21886: PUSH
21887: LD_INT 108
21889: PUSH
21890: LD_INT 109
21892: PUSH
21893: LD_INT 110
21895: PUSH
21896: LD_INT 111
21898: PUSH
21899: LD_INT 112
21901: PUSH
21902: LD_INT 113
21904: PUSH
21905: LD_INT 114
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: ST_TO_ADDR
21928: GO 23095
21930: LD_INT 14
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 22150
21938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21939: LD_ADDR_VAR 0 1
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 3
21952: PUSH
21953: LD_INT 4
21955: PUSH
21956: LD_INT 5
21958: PUSH
21959: LD_INT 6
21961: PUSH
21962: LD_INT 7
21964: PUSH
21965: LD_INT 8
21967: PUSH
21968: LD_INT 9
21970: PUSH
21971: LD_INT 10
21973: PUSH
21974: LD_INT 11
21976: PUSH
21977: LD_INT 12
21979: PUSH
21980: LD_INT 13
21982: PUSH
21983: LD_INT 14
21985: PUSH
21986: LD_INT 15
21988: PUSH
21989: LD_INT 16
21991: PUSH
21992: LD_INT 17
21994: PUSH
21995: LD_INT 18
21997: PUSH
21998: LD_INT 19
22000: PUSH
22001: LD_INT 20
22003: PUSH
22004: LD_INT 21
22006: PUSH
22007: LD_INT 22
22009: PUSH
22010: LD_INT 23
22012: PUSH
22013: LD_INT 24
22015: PUSH
22016: LD_INT 25
22018: PUSH
22019: LD_INT 26
22021: PUSH
22022: LD_INT 27
22024: PUSH
22025: LD_INT 28
22027: PUSH
22028: LD_INT 29
22030: PUSH
22031: LD_INT 30
22033: PUSH
22034: LD_INT 31
22036: PUSH
22037: LD_INT 32
22039: PUSH
22040: LD_INT 33
22042: PUSH
22043: LD_INT 34
22045: PUSH
22046: LD_INT 36
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 101
22088: PUSH
22089: LD_INT 102
22091: PUSH
22092: LD_INT 103
22094: PUSH
22095: LD_INT 104
22097: PUSH
22098: LD_INT 105
22100: PUSH
22101: LD_INT 106
22103: PUSH
22104: LD_INT 107
22106: PUSH
22107: LD_INT 108
22109: PUSH
22110: LD_INT 109
22112: PUSH
22113: LD_INT 110
22115: PUSH
22116: LD_INT 111
22118: PUSH
22119: LD_INT 112
22121: PUSH
22122: LD_INT 113
22124: PUSH
22125: LD_INT 114
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: ST_TO_ADDR
22148: GO 23095
22150: LD_INT 15
22152: DOUBLE
22153: EQUAL
22154: IFTRUE 22158
22156: GO 22370
22158: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22159: LD_ADDR_VAR 0 1
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: LD_INT 3
22172: PUSH
22173: LD_INT 4
22175: PUSH
22176: LD_INT 5
22178: PUSH
22179: LD_INT 6
22181: PUSH
22182: LD_INT 7
22184: PUSH
22185: LD_INT 8
22187: PUSH
22188: LD_INT 9
22190: PUSH
22191: LD_INT 10
22193: PUSH
22194: LD_INT 11
22196: PUSH
22197: LD_INT 12
22199: PUSH
22200: LD_INT 13
22202: PUSH
22203: LD_INT 14
22205: PUSH
22206: LD_INT 15
22208: PUSH
22209: LD_INT 16
22211: PUSH
22212: LD_INT 17
22214: PUSH
22215: LD_INT 18
22217: PUSH
22218: LD_INT 19
22220: PUSH
22221: LD_INT 20
22223: PUSH
22224: LD_INT 21
22226: PUSH
22227: LD_INT 22
22229: PUSH
22230: LD_INT 23
22232: PUSH
22233: LD_INT 24
22235: PUSH
22236: LD_INT 25
22238: PUSH
22239: LD_INT 26
22241: PUSH
22242: LD_INT 27
22244: PUSH
22245: LD_INT 28
22247: PUSH
22248: LD_INT 29
22250: PUSH
22251: LD_INT 30
22253: PUSH
22254: LD_INT 31
22256: PUSH
22257: LD_INT 32
22259: PUSH
22260: LD_INT 33
22262: PUSH
22263: LD_INT 34
22265: PUSH
22266: LD_INT 36
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 101
22308: PUSH
22309: LD_INT 102
22311: PUSH
22312: LD_INT 103
22314: PUSH
22315: LD_INT 104
22317: PUSH
22318: LD_INT 105
22320: PUSH
22321: LD_INT 106
22323: PUSH
22324: LD_INT 107
22326: PUSH
22327: LD_INT 108
22329: PUSH
22330: LD_INT 109
22332: PUSH
22333: LD_INT 110
22335: PUSH
22336: LD_INT 111
22338: PUSH
22339: LD_INT 112
22341: PUSH
22342: LD_INT 113
22344: PUSH
22345: LD_INT 114
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: ST_TO_ADDR
22368: GO 23095
22370: LD_INT 16
22372: DOUBLE
22373: EQUAL
22374: IFTRUE 22378
22376: GO 22502
22378: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22379: LD_ADDR_VAR 0 1
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: LD_INT 4
22389: PUSH
22390: LD_INT 5
22392: PUSH
22393: LD_INT 7
22395: PUSH
22396: LD_INT 11
22398: PUSH
22399: LD_INT 12
22401: PUSH
22402: LD_INT 15
22404: PUSH
22405: LD_INT 16
22407: PUSH
22408: LD_INT 20
22410: PUSH
22411: LD_INT 21
22413: PUSH
22414: LD_INT 22
22416: PUSH
22417: LD_INT 23
22419: PUSH
22420: LD_INT 25
22422: PUSH
22423: LD_INT 26
22425: PUSH
22426: LD_INT 30
22428: PUSH
22429: LD_INT 31
22431: PUSH
22432: LD_INT 32
22434: PUSH
22435: LD_INT 33
22437: PUSH
22438: LD_INT 34
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 101
22464: PUSH
22465: LD_INT 102
22467: PUSH
22468: LD_INT 103
22470: PUSH
22471: LD_INT 106
22473: PUSH
22474: LD_INT 108
22476: PUSH
22477: LD_INT 112
22479: PUSH
22480: LD_INT 113
22482: PUSH
22483: LD_INT 114
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: ST_TO_ADDR
22500: GO 23095
22502: LD_INT 17
22504: DOUBLE
22505: EQUAL
22506: IFTRUE 22510
22508: GO 22722
22510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22511: LD_ADDR_VAR 0 1
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: LD_INT 4
22527: PUSH
22528: LD_INT 5
22530: PUSH
22531: LD_INT 6
22533: PUSH
22534: LD_INT 7
22536: PUSH
22537: LD_INT 8
22539: PUSH
22540: LD_INT 9
22542: PUSH
22543: LD_INT 10
22545: PUSH
22546: LD_INT 11
22548: PUSH
22549: LD_INT 12
22551: PUSH
22552: LD_INT 13
22554: PUSH
22555: LD_INT 14
22557: PUSH
22558: LD_INT 15
22560: PUSH
22561: LD_INT 16
22563: PUSH
22564: LD_INT 17
22566: PUSH
22567: LD_INT 18
22569: PUSH
22570: LD_INT 19
22572: PUSH
22573: LD_INT 20
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 22
22581: PUSH
22582: LD_INT 23
22584: PUSH
22585: LD_INT 24
22587: PUSH
22588: LD_INT 25
22590: PUSH
22591: LD_INT 26
22593: PUSH
22594: LD_INT 27
22596: PUSH
22597: LD_INT 28
22599: PUSH
22600: LD_INT 29
22602: PUSH
22603: LD_INT 30
22605: PUSH
22606: LD_INT 31
22608: PUSH
22609: LD_INT 32
22611: PUSH
22612: LD_INT 33
22614: PUSH
22615: LD_INT 34
22617: PUSH
22618: LD_INT 36
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 101
22660: PUSH
22661: LD_INT 102
22663: PUSH
22664: LD_INT 103
22666: PUSH
22667: LD_INT 104
22669: PUSH
22670: LD_INT 105
22672: PUSH
22673: LD_INT 106
22675: PUSH
22676: LD_INT 107
22678: PUSH
22679: LD_INT 108
22681: PUSH
22682: LD_INT 109
22684: PUSH
22685: LD_INT 110
22687: PUSH
22688: LD_INT 111
22690: PUSH
22691: LD_INT 112
22693: PUSH
22694: LD_INT 113
22696: PUSH
22697: LD_INT 114
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: ST_TO_ADDR
22720: GO 23095
22722: LD_INT 18
22724: DOUBLE
22725: EQUAL
22726: IFTRUE 22730
22728: GO 22866
22730: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22731: LD_ADDR_VAR 0 1
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: LD_INT 4
22741: PUSH
22742: LD_INT 5
22744: PUSH
22745: LD_INT 7
22747: PUSH
22748: LD_INT 11
22750: PUSH
22751: LD_INT 12
22753: PUSH
22754: LD_INT 15
22756: PUSH
22757: LD_INT 16
22759: PUSH
22760: LD_INT 20
22762: PUSH
22763: LD_INT 21
22765: PUSH
22766: LD_INT 22
22768: PUSH
22769: LD_INT 23
22771: PUSH
22772: LD_INT 25
22774: PUSH
22775: LD_INT 26
22777: PUSH
22778: LD_INT 30
22780: PUSH
22781: LD_INT 31
22783: PUSH
22784: LD_INT 32
22786: PUSH
22787: LD_INT 33
22789: PUSH
22790: LD_INT 34
22792: PUSH
22793: LD_INT 35
22795: PUSH
22796: LD_INT 36
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 101
22824: PUSH
22825: LD_INT 102
22827: PUSH
22828: LD_INT 103
22830: PUSH
22831: LD_INT 106
22833: PUSH
22834: LD_INT 108
22836: PUSH
22837: LD_INT 112
22839: PUSH
22840: LD_INT 113
22842: PUSH
22843: LD_INT 114
22845: PUSH
22846: LD_INT 115
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: ST_TO_ADDR
22864: GO 23095
22866: LD_INT 19
22868: DOUBLE
22869: EQUAL
22870: IFTRUE 22874
22872: GO 23094
22874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22875: LD_ADDR_VAR 0 1
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: LD_INT 4
22891: PUSH
22892: LD_INT 5
22894: PUSH
22895: LD_INT 6
22897: PUSH
22898: LD_INT 7
22900: PUSH
22901: LD_INT 8
22903: PUSH
22904: LD_INT 9
22906: PUSH
22907: LD_INT 10
22909: PUSH
22910: LD_INT 11
22912: PUSH
22913: LD_INT 12
22915: PUSH
22916: LD_INT 13
22918: PUSH
22919: LD_INT 14
22921: PUSH
22922: LD_INT 15
22924: PUSH
22925: LD_INT 16
22927: PUSH
22928: LD_INT 17
22930: PUSH
22931: LD_INT 18
22933: PUSH
22934: LD_INT 19
22936: PUSH
22937: LD_INT 20
22939: PUSH
22940: LD_INT 21
22942: PUSH
22943: LD_INT 22
22945: PUSH
22946: LD_INT 23
22948: PUSH
22949: LD_INT 24
22951: PUSH
22952: LD_INT 25
22954: PUSH
22955: LD_INT 26
22957: PUSH
22958: LD_INT 27
22960: PUSH
22961: LD_INT 28
22963: PUSH
22964: LD_INT 29
22966: PUSH
22967: LD_INT 30
22969: PUSH
22970: LD_INT 31
22972: PUSH
22973: LD_INT 32
22975: PUSH
22976: LD_INT 33
22978: PUSH
22979: LD_INT 34
22981: PUSH
22982: LD_INT 35
22984: PUSH
22985: LD_INT 36
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 101
23028: PUSH
23029: LD_INT 102
23031: PUSH
23032: LD_INT 103
23034: PUSH
23035: LD_INT 104
23037: PUSH
23038: LD_INT 105
23040: PUSH
23041: LD_INT 106
23043: PUSH
23044: LD_INT 107
23046: PUSH
23047: LD_INT 108
23049: PUSH
23050: LD_INT 109
23052: PUSH
23053: LD_INT 110
23055: PUSH
23056: LD_INT 111
23058: PUSH
23059: LD_INT 112
23061: PUSH
23062: LD_INT 113
23064: PUSH
23065: LD_INT 114
23067: PUSH
23068: LD_INT 115
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: ST_TO_ADDR
23092: GO 23095
23094: POP
// end else
23095: GO 23314
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23097: LD_ADDR_VAR 0 1
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: LD_INT 4
23113: PUSH
23114: LD_INT 5
23116: PUSH
23117: LD_INT 6
23119: PUSH
23120: LD_INT 7
23122: PUSH
23123: LD_INT 8
23125: PUSH
23126: LD_INT 9
23128: PUSH
23129: LD_INT 10
23131: PUSH
23132: LD_INT 11
23134: PUSH
23135: LD_INT 12
23137: PUSH
23138: LD_INT 13
23140: PUSH
23141: LD_INT 14
23143: PUSH
23144: LD_INT 15
23146: PUSH
23147: LD_INT 16
23149: PUSH
23150: LD_INT 17
23152: PUSH
23153: LD_INT 18
23155: PUSH
23156: LD_INT 19
23158: PUSH
23159: LD_INT 20
23161: PUSH
23162: LD_INT 21
23164: PUSH
23165: LD_INT 22
23167: PUSH
23168: LD_INT 23
23170: PUSH
23171: LD_INT 24
23173: PUSH
23174: LD_INT 25
23176: PUSH
23177: LD_INT 26
23179: PUSH
23180: LD_INT 27
23182: PUSH
23183: LD_INT 28
23185: PUSH
23186: LD_INT 29
23188: PUSH
23189: LD_INT 30
23191: PUSH
23192: LD_INT 31
23194: PUSH
23195: LD_INT 32
23197: PUSH
23198: LD_INT 33
23200: PUSH
23201: LD_INT 34
23203: PUSH
23204: LD_INT 35
23206: PUSH
23207: LD_INT 36
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 101
23250: PUSH
23251: LD_INT 102
23253: PUSH
23254: LD_INT 103
23256: PUSH
23257: LD_INT 104
23259: PUSH
23260: LD_INT 105
23262: PUSH
23263: LD_INT 106
23265: PUSH
23266: LD_INT 107
23268: PUSH
23269: LD_INT 108
23271: PUSH
23272: LD_INT 109
23274: PUSH
23275: LD_INT 110
23277: PUSH
23278: LD_INT 111
23280: PUSH
23281: LD_INT 112
23283: PUSH
23284: LD_INT 113
23286: PUSH
23287: LD_INT 114
23289: PUSH
23290: LD_INT 115
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: ST_TO_ADDR
// if result then
23314: LD_VAR 0 1
23318: IFFALSE 23607
// begin normal :=  ;
23320: LD_ADDR_VAR 0 3
23324: PUSH
23325: LD_STRING 
23327: ST_TO_ADDR
// hardcore :=  ;
23328: LD_ADDR_VAR 0 4
23332: PUSH
23333: LD_STRING 
23335: ST_TO_ADDR
// for i = 1 to normalCounter do
23336: LD_ADDR_VAR 0 5
23340: PUSH
23341: DOUBLE
23342: LD_INT 1
23344: DEC
23345: ST_TO_ADDR
23346: LD_EXP 67
23350: PUSH
23351: FOR_TO
23352: IFFALSE 23453
// begin tmp := 0 ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_STRING 0
23361: ST_TO_ADDR
// if result [ 1 ] then
23362: LD_VAR 0 1
23366: PUSH
23367: LD_INT 1
23369: ARRAY
23370: IFFALSE 23435
// if result [ 1 ] [ 1 ] = i then
23372: LD_VAR 0 1
23376: PUSH
23377: LD_INT 1
23379: ARRAY
23380: PUSH
23381: LD_INT 1
23383: ARRAY
23384: PUSH
23385: LD_VAR 0 5
23389: EQUAL
23390: IFFALSE 23435
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23392: LD_ADDR_VAR 0 1
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: LD_INT 1
23404: PPUSH
23405: LD_VAR 0 1
23409: PUSH
23410: LD_INT 1
23412: ARRAY
23413: PPUSH
23414: LD_INT 1
23416: PPUSH
23417: CALL_OW 3
23421: PPUSH
23422: CALL_OW 1
23426: ST_TO_ADDR
// tmp := 1 ;
23427: LD_ADDR_VAR 0 2
23431: PUSH
23432: LD_STRING 1
23434: ST_TO_ADDR
// end ; normal := normal & tmp ;
23435: LD_ADDR_VAR 0 3
23439: PUSH
23440: LD_VAR 0 3
23444: PUSH
23445: LD_VAR 0 2
23449: STR
23450: ST_TO_ADDR
// end ;
23451: GO 23351
23453: POP
23454: POP
// for i = 1 to hardcoreCounter do
23455: LD_ADDR_VAR 0 5
23459: PUSH
23460: DOUBLE
23461: LD_INT 1
23463: DEC
23464: ST_TO_ADDR
23465: LD_EXP 68
23469: PUSH
23470: FOR_TO
23471: IFFALSE 23576
// begin tmp := 0 ;
23473: LD_ADDR_VAR 0 2
23477: PUSH
23478: LD_STRING 0
23480: ST_TO_ADDR
// if result [ 2 ] then
23481: LD_VAR 0 1
23485: PUSH
23486: LD_INT 2
23488: ARRAY
23489: IFFALSE 23558
// if result [ 2 ] [ 1 ] = 100 + i then
23491: LD_VAR 0 1
23495: PUSH
23496: LD_INT 2
23498: ARRAY
23499: PUSH
23500: LD_INT 1
23502: ARRAY
23503: PUSH
23504: LD_INT 100
23506: PUSH
23507: LD_VAR 0 5
23511: PLUS
23512: EQUAL
23513: IFFALSE 23558
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23515: LD_ADDR_VAR 0 1
23519: PUSH
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_INT 2
23527: PPUSH
23528: LD_VAR 0 1
23532: PUSH
23533: LD_INT 2
23535: ARRAY
23536: PPUSH
23537: LD_INT 1
23539: PPUSH
23540: CALL_OW 3
23544: PPUSH
23545: CALL_OW 1
23549: ST_TO_ADDR
// tmp := 1 ;
23550: LD_ADDR_VAR 0 2
23554: PUSH
23555: LD_STRING 1
23557: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23558: LD_ADDR_VAR 0 4
23562: PUSH
23563: LD_VAR 0 4
23567: PUSH
23568: LD_VAR 0 2
23572: STR
23573: ST_TO_ADDR
// end ;
23574: GO 23470
23576: POP
23577: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23578: LD_STRING getStreamItemsFromMission("
23580: PUSH
23581: LD_VAR 0 3
23585: STR
23586: PUSH
23587: LD_STRING ","
23589: STR
23590: PUSH
23591: LD_VAR 0 4
23595: STR
23596: PUSH
23597: LD_STRING ")
23599: STR
23600: PPUSH
23601: CALL_OW 559
// end else
23605: GO 23614
// ToLua ( getStreamItemsFromMission("","") ) ;
23607: LD_STRING getStreamItemsFromMission("","")
23609: PPUSH
23610: CALL_OW 559
// end ;
23614: LD_VAR 0 1
23618: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23619: LD_EXP 66
23623: PUSH
23624: LD_EXP 71
23628: AND
23629: IFFALSE 23753
23631: GO 23633
23633: DISABLE
23634: LD_INT 0
23636: PPUSH
23637: PPUSH
// begin enable ;
23638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23639: LD_ADDR_VAR 0 2
23643: PUSH
23644: LD_INT 22
23646: PUSH
23647: LD_OWVAR 2
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 34
23661: PUSH
23662: LD_INT 7
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 34
23671: PUSH
23672: LD_INT 45
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 34
23681: PUSH
23682: LD_INT 28
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 34
23691: PUSH
23692: LD_INT 47
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PPUSH
23710: CALL_OW 69
23714: ST_TO_ADDR
// if not tmp then
23715: LD_VAR 0 2
23719: NOT
23720: IFFALSE 23724
// exit ;
23722: GO 23753
// for i in tmp do
23724: LD_ADDR_VAR 0 1
23728: PUSH
23729: LD_VAR 0 2
23733: PUSH
23734: FOR_IN
23735: IFFALSE 23751
// begin SetLives ( i , 0 ) ;
23737: LD_VAR 0 1
23741: PPUSH
23742: LD_INT 0
23744: PPUSH
23745: CALL_OW 234
// end ;
23749: GO 23734
23751: POP
23752: POP
// end ;
23753: PPOPN 2
23755: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23756: LD_EXP 66
23760: PUSH
23761: LD_EXP 72
23765: AND
23766: IFFALSE 23850
23768: GO 23770
23770: DISABLE
23771: LD_INT 0
23773: PPUSH
23774: PPUSH
// begin enable ;
23775: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23776: LD_ADDR_VAR 0 2
23780: PUSH
23781: LD_INT 22
23783: PUSH
23784: LD_OWVAR 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 32
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PPUSH
23807: CALL_OW 69
23811: ST_TO_ADDR
// if not tmp then
23812: LD_VAR 0 2
23816: NOT
23817: IFFALSE 23821
// exit ;
23819: GO 23850
// for i in tmp do
23821: LD_ADDR_VAR 0 1
23825: PUSH
23826: LD_VAR 0 2
23830: PUSH
23831: FOR_IN
23832: IFFALSE 23848
// begin SetLives ( i , 0 ) ;
23834: LD_VAR 0 1
23838: PPUSH
23839: LD_INT 0
23841: PPUSH
23842: CALL_OW 234
// end ;
23846: GO 23831
23848: POP
23849: POP
// end ;
23850: PPOPN 2
23852: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23853: LD_EXP 66
23857: PUSH
23858: LD_EXP 69
23862: AND
23863: IFFALSE 23956
23865: GO 23867
23867: DISABLE
23868: LD_INT 0
23870: PPUSH
// begin enable ;
23871: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23872: LD_ADDR_VAR 0 1
23876: PUSH
23877: LD_INT 22
23879: PUSH
23880: LD_OWVAR 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: LD_INT 25
23894: PUSH
23895: LD_INT 5
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 25
23904: PUSH
23905: LD_INT 9
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 25
23914: PUSH
23915: LD_INT 8
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23954
// begin SetClass ( i , 1 ) ;
23940: LD_VAR 0 1
23944: PPUSH
23945: LD_INT 1
23947: PPUSH
23948: CALL_OW 336
// end ;
23952: GO 23937
23954: POP
23955: POP
// end ;
23956: PPOPN 1
23958: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23959: LD_EXP 66
23963: PUSH
23964: LD_EXP 70
23968: AND
23969: PUSH
23970: LD_OWVAR 65
23974: PUSH
23975: LD_INT 7
23977: LESS
23978: AND
23979: IFFALSE 23993
23981: GO 23983
23983: DISABLE
// begin enable ;
23984: ENABLE
// game_speed := 7 ;
23985: LD_ADDR_OWVAR 65
23989: PUSH
23990: LD_INT 7
23992: ST_TO_ADDR
// end ;
23993: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23994: LD_EXP 66
23998: PUSH
23999: LD_EXP 73
24003: AND
24004: IFFALSE 24206
24006: GO 24008
24008: DISABLE
24009: LD_INT 0
24011: PPUSH
24012: PPUSH
24013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24014: LD_ADDR_VAR 0 3
24018: PUSH
24019: LD_INT 81
24021: PUSH
24022: LD_OWVAR 2
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 21
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PPUSH
24045: CALL_OW 69
24049: ST_TO_ADDR
// if not tmp then
24050: LD_VAR 0 3
24054: NOT
24055: IFFALSE 24059
// exit ;
24057: GO 24206
// if tmp > 5 then
24059: LD_VAR 0 3
24063: PUSH
24064: LD_INT 5
24066: GREATER
24067: IFFALSE 24079
// k := 5 else
24069: LD_ADDR_VAR 0 2
24073: PUSH
24074: LD_INT 5
24076: ST_TO_ADDR
24077: GO 24089
// k := tmp ;
24079: LD_ADDR_VAR 0 2
24083: PUSH
24084: LD_VAR 0 3
24088: ST_TO_ADDR
// for i := 1 to k do
24089: LD_ADDR_VAR 0 1
24093: PUSH
24094: DOUBLE
24095: LD_INT 1
24097: DEC
24098: ST_TO_ADDR
24099: LD_VAR 0 2
24103: PUSH
24104: FOR_TO
24105: IFFALSE 24204
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24107: LD_VAR 0 3
24111: PUSH
24112: LD_VAR 0 1
24116: ARRAY
24117: PPUSH
24118: LD_VAR 0 1
24122: PUSH
24123: LD_INT 4
24125: MOD
24126: PUSH
24127: LD_INT 1
24129: PLUS
24130: PPUSH
24131: CALL_OW 259
24135: PUSH
24136: LD_INT 10
24138: LESS
24139: IFFALSE 24202
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24141: LD_VAR 0 3
24145: PUSH
24146: LD_VAR 0 1
24150: ARRAY
24151: PPUSH
24152: LD_VAR 0 1
24156: PUSH
24157: LD_INT 4
24159: MOD
24160: PUSH
24161: LD_INT 1
24163: PLUS
24164: PPUSH
24165: LD_VAR 0 3
24169: PUSH
24170: LD_VAR 0 1
24174: ARRAY
24175: PPUSH
24176: LD_VAR 0 1
24180: PUSH
24181: LD_INT 4
24183: MOD
24184: PUSH
24185: LD_INT 1
24187: PLUS
24188: PPUSH
24189: CALL_OW 259
24193: PUSH
24194: LD_INT 1
24196: PLUS
24197: PPUSH
24198: CALL_OW 237
24202: GO 24104
24204: POP
24205: POP
// end ;
24206: PPOPN 3
24208: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24209: LD_EXP 66
24213: PUSH
24214: LD_EXP 74
24218: AND
24219: IFFALSE 24239
24221: GO 24223
24223: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24224: LD_INT 4
24226: PPUSH
24227: LD_OWVAR 2
24231: PPUSH
24232: LD_INT 0
24234: PPUSH
24235: CALL_OW 324
24239: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24240: LD_EXP 66
24244: PUSH
24245: LD_EXP 103
24249: AND
24250: IFFALSE 24270
24252: GO 24254
24254: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24255: LD_INT 19
24257: PPUSH
24258: LD_OWVAR 2
24262: PPUSH
24263: LD_INT 0
24265: PPUSH
24266: CALL_OW 324
24270: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24271: LD_EXP 66
24275: PUSH
24276: LD_EXP 75
24280: AND
24281: IFFALSE 24383
24283: GO 24285
24285: DISABLE
24286: LD_INT 0
24288: PPUSH
24289: PPUSH
// begin enable ;
24290: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24291: LD_ADDR_VAR 0 2
24295: PUSH
24296: LD_INT 22
24298: PUSH
24299: LD_OWVAR 2
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 2
24310: PUSH
24311: LD_INT 34
24313: PUSH
24314: LD_INT 11
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 34
24323: PUSH
24324: LD_INT 30
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PPUSH
24340: CALL_OW 69
24344: ST_TO_ADDR
// if not tmp then
24345: LD_VAR 0 2
24349: NOT
24350: IFFALSE 24354
// exit ;
24352: GO 24383
// for i in tmp do
24354: LD_ADDR_VAR 0 1
24358: PUSH
24359: LD_VAR 0 2
24363: PUSH
24364: FOR_IN
24365: IFFALSE 24381
// begin SetLives ( i , 0 ) ;
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_INT 0
24374: PPUSH
24375: CALL_OW 234
// end ;
24379: GO 24364
24381: POP
24382: POP
// end ;
24383: PPOPN 2
24385: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24386: LD_EXP 66
24390: PUSH
24391: LD_EXP 76
24395: AND
24396: IFFALSE 24416
24398: GO 24400
24400: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24401: LD_INT 32
24403: PPUSH
24404: LD_OWVAR 2
24408: PPUSH
24409: LD_INT 0
24411: PPUSH
24412: CALL_OW 324
24416: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24417: LD_EXP 66
24421: PUSH
24422: LD_EXP 77
24426: AND
24427: IFFALSE 24608
24429: GO 24431
24431: DISABLE
24432: LD_INT 0
24434: PPUSH
24435: PPUSH
24436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24437: LD_ADDR_VAR 0 2
24441: PUSH
24442: LD_INT 22
24444: PUSH
24445: LD_OWVAR 2
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 33
24456: PUSH
24457: LD_INT 3
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 69
24472: ST_TO_ADDR
// if not tmp then
24473: LD_VAR 0 2
24477: NOT
24478: IFFALSE 24482
// exit ;
24480: GO 24608
// side := 0 ;
24482: LD_ADDR_VAR 0 3
24486: PUSH
24487: LD_INT 0
24489: ST_TO_ADDR
// for i := 1 to 8 do
24490: LD_ADDR_VAR 0 1
24494: PUSH
24495: DOUBLE
24496: LD_INT 1
24498: DEC
24499: ST_TO_ADDR
24500: LD_INT 8
24502: PUSH
24503: FOR_TO
24504: IFFALSE 24552
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24506: LD_OWVAR 2
24510: PUSH
24511: LD_VAR 0 1
24515: NONEQUAL
24516: PUSH
24517: LD_OWVAR 2
24521: PPUSH
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL_OW 81
24531: PUSH
24532: LD_INT 2
24534: EQUAL
24535: AND
24536: IFFALSE 24550
// begin side := i ;
24538: LD_ADDR_VAR 0 3
24542: PUSH
24543: LD_VAR 0 1
24547: ST_TO_ADDR
// break ;
24548: GO 24552
// end ;
24550: GO 24503
24552: POP
24553: POP
// if not side then
24554: LD_VAR 0 3
24558: NOT
24559: IFFALSE 24563
// exit ;
24561: GO 24608
// for i := 1 to tmp do
24563: LD_ADDR_VAR 0 1
24567: PUSH
24568: DOUBLE
24569: LD_INT 1
24571: DEC
24572: ST_TO_ADDR
24573: LD_VAR 0 2
24577: PUSH
24578: FOR_TO
24579: IFFALSE 24606
// if Prob ( 60 ) then
24581: LD_INT 60
24583: PPUSH
24584: CALL_OW 13
24588: IFFALSE 24604
// SetSide ( i , side ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: CALL_OW 235
24604: GO 24578
24606: POP
24607: POP
// end ;
24608: PPOPN 3
24610: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24611: LD_EXP 66
24615: PUSH
24616: LD_EXP 79
24620: AND
24621: IFFALSE 24740
24623: GO 24625
24625: DISABLE
24626: LD_INT 0
24628: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24629: LD_ADDR_VAR 0 1
24633: PUSH
24634: LD_INT 22
24636: PUSH
24637: LD_OWVAR 2
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 21
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: LD_INT 23
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: PPUSH
24678: CALL_OW 69
24682: PUSH
24683: FOR_IN
24684: IFFALSE 24738
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 257
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 2
24701: PUSH
24702: LD_INT 3
24704: PUSH
24705: LD_INT 4
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: IN
24714: IFFALSE 24736
// SetClass ( un , rand ( 1 , 4 ) ) ;
24716: LD_VAR 0 1
24720: PPUSH
24721: LD_INT 1
24723: PPUSH
24724: LD_INT 4
24726: PPUSH
24727: CALL_OW 12
24731: PPUSH
24732: CALL_OW 336
24736: GO 24683
24738: POP
24739: POP
// end ;
24740: PPOPN 1
24742: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24743: LD_EXP 66
24747: PUSH
24748: LD_EXP 78
24752: AND
24753: IFFALSE 24832
24755: GO 24757
24757: DISABLE
24758: LD_INT 0
24760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24761: LD_ADDR_VAR 0 1
24765: PUSH
24766: LD_INT 22
24768: PUSH
24769: LD_OWVAR 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 3
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PPUSH
24792: CALL_OW 69
24796: ST_TO_ADDR
// if not tmp then
24797: LD_VAR 0 1
24801: NOT
24802: IFFALSE 24806
// exit ;
24804: GO 24832
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24806: LD_VAR 0 1
24810: PUSH
24811: LD_INT 1
24813: PPUSH
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 12
24823: ARRAY
24824: PPUSH
24825: LD_INT 100
24827: PPUSH
24828: CALL_OW 234
// end ;
24832: PPOPN 1
24834: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24835: LD_EXP 66
24839: PUSH
24840: LD_EXP 80
24844: AND
24845: IFFALSE 24943
24847: GO 24849
24849: DISABLE
24850: LD_INT 0
24852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24853: LD_ADDR_VAR 0 1
24857: PUSH
24858: LD_INT 22
24860: PUSH
24861: LD_OWVAR 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 21
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PPUSH
24884: CALL_OW 69
24888: ST_TO_ADDR
// if not tmp then
24889: LD_VAR 0 1
24893: NOT
24894: IFFALSE 24898
// exit ;
24896: GO 24943
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24898: LD_VAR 0 1
24902: PUSH
24903: LD_INT 1
24905: PPUSH
24906: LD_VAR 0 1
24910: PPUSH
24911: CALL_OW 12
24915: ARRAY
24916: PPUSH
24917: LD_INT 1
24919: PPUSH
24920: LD_INT 4
24922: PPUSH
24923: CALL_OW 12
24927: PPUSH
24928: LD_INT 3000
24930: PPUSH
24931: LD_INT 9000
24933: PPUSH
24934: CALL_OW 12
24938: PPUSH
24939: CALL_OW 492
// end ;
24943: PPOPN 1
24945: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24946: LD_EXP 66
24950: PUSH
24951: LD_EXP 81
24955: AND
24956: IFFALSE 24976
24958: GO 24960
24960: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24961: LD_INT 1
24963: PPUSH
24964: LD_OWVAR 2
24968: PPUSH
24969: LD_INT 0
24971: PPUSH
24972: CALL_OW 324
24976: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24977: LD_EXP 66
24981: PUSH
24982: LD_EXP 82
24986: AND
24987: IFFALSE 25070
24989: GO 24991
24991: DISABLE
24992: LD_INT 0
24994: PPUSH
24995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24996: LD_ADDR_VAR 0 2
25000: PUSH
25001: LD_INT 22
25003: PUSH
25004: LD_OWVAR 2
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 21
25015: PUSH
25016: LD_INT 3
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PPUSH
25027: CALL_OW 69
25031: ST_TO_ADDR
// if not tmp then
25032: LD_VAR 0 2
25036: NOT
25037: IFFALSE 25041
// exit ;
25039: GO 25070
// for i in tmp do
25041: LD_ADDR_VAR 0 1
25045: PUSH
25046: LD_VAR 0 2
25050: PUSH
25051: FOR_IN
25052: IFFALSE 25068
// SetBLevel ( i , 10 ) ;
25054: LD_VAR 0 1
25058: PPUSH
25059: LD_INT 10
25061: PPUSH
25062: CALL_OW 241
25066: GO 25051
25068: POP
25069: POP
// end ;
25070: PPOPN 2
25072: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25073: LD_EXP 66
25077: PUSH
25078: LD_EXP 83
25082: AND
25083: IFFALSE 25194
25085: GO 25087
25087: DISABLE
25088: LD_INT 0
25090: PPUSH
25091: PPUSH
25092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_INT 22
25100: PUSH
25101: LD_OWVAR 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 25
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PPUSH
25124: CALL_OW 69
25128: ST_TO_ADDR
// if not tmp then
25129: LD_VAR 0 3
25133: NOT
25134: IFFALSE 25138
// exit ;
25136: GO 25194
// un := tmp [ rand ( 1 , tmp ) ] ;
25138: LD_ADDR_VAR 0 2
25142: PUSH
25143: LD_VAR 0 3
25147: PUSH
25148: LD_INT 1
25150: PPUSH
25151: LD_VAR 0 3
25155: PPUSH
25156: CALL_OW 12
25160: ARRAY
25161: ST_TO_ADDR
// if Crawls ( un ) then
25162: LD_VAR 0 2
25166: PPUSH
25167: CALL_OW 318
25171: IFFALSE 25182
// ComWalk ( un ) ;
25173: LD_VAR 0 2
25177: PPUSH
25178: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25182: LD_VAR 0 2
25186: PPUSH
25187: LD_INT 5
25189: PPUSH
25190: CALL_OW 336
// end ;
25194: PPOPN 3
25196: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25197: LD_EXP 66
25201: PUSH
25202: LD_EXP 84
25206: AND
25207: PUSH
25208: LD_OWVAR 67
25212: PUSH
25213: LD_INT 3
25215: LESS
25216: AND
25217: IFFALSE 25236
25219: GO 25221
25221: DISABLE
// Difficulty := Difficulty + 1 ;
25222: LD_ADDR_OWVAR 67
25226: PUSH
25227: LD_OWVAR 67
25231: PUSH
25232: LD_INT 1
25234: PLUS
25235: ST_TO_ADDR
25236: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25237: LD_EXP 66
25241: PUSH
25242: LD_EXP 85
25246: AND
25247: IFFALSE 25350
25249: GO 25251
25251: DISABLE
25252: LD_INT 0
25254: PPUSH
// begin for i := 1 to 5 do
25255: LD_ADDR_VAR 0 1
25259: PUSH
25260: DOUBLE
25261: LD_INT 1
25263: DEC
25264: ST_TO_ADDR
25265: LD_INT 5
25267: PUSH
25268: FOR_TO
25269: IFFALSE 25348
// begin uc_nation := nation_nature ;
25271: LD_ADDR_OWVAR 21
25275: PUSH
25276: LD_INT 0
25278: ST_TO_ADDR
// uc_side := 0 ;
25279: LD_ADDR_OWVAR 20
25283: PUSH
25284: LD_INT 0
25286: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25287: LD_ADDR_OWVAR 29
25291: PUSH
25292: LD_INT 12
25294: PUSH
25295: LD_INT 12
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: ST_TO_ADDR
// hc_agressivity := 20 ;
25302: LD_ADDR_OWVAR 35
25306: PUSH
25307: LD_INT 20
25309: ST_TO_ADDR
// hc_class := class_tiger ;
25310: LD_ADDR_OWVAR 28
25314: PUSH
25315: LD_INT 14
25317: ST_TO_ADDR
// hc_gallery :=  ;
25318: LD_ADDR_OWVAR 33
25322: PUSH
25323: LD_STRING 
25325: ST_TO_ADDR
// hc_name :=  ;
25326: LD_ADDR_OWVAR 26
25330: PUSH
25331: LD_STRING 
25333: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25334: CALL_OW 44
25338: PPUSH
25339: LD_INT 0
25341: PPUSH
25342: CALL_OW 51
// end ;
25346: GO 25268
25348: POP
25349: POP
// end ;
25350: PPOPN 1
25352: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25353: LD_EXP 66
25357: PUSH
25358: LD_EXP 86
25362: AND
25363: IFFALSE 25372
25365: GO 25367
25367: DISABLE
// StreamSibBomb ;
25368: CALL 25373 0 0
25372: END
// export function StreamSibBomb ; var i , x , y ; begin
25373: LD_INT 0
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
// result := false ;
25379: LD_ADDR_VAR 0 1
25383: PUSH
25384: LD_INT 0
25386: ST_TO_ADDR
// for i := 1 to 16 do
25387: LD_ADDR_VAR 0 2
25391: PUSH
25392: DOUBLE
25393: LD_INT 1
25395: DEC
25396: ST_TO_ADDR
25397: LD_INT 16
25399: PUSH
25400: FOR_TO
25401: IFFALSE 25600
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25403: LD_ADDR_VAR 0 3
25407: PUSH
25408: LD_INT 10
25410: PUSH
25411: LD_INT 20
25413: PUSH
25414: LD_INT 30
25416: PUSH
25417: LD_INT 40
25419: PUSH
25420: LD_INT 50
25422: PUSH
25423: LD_INT 60
25425: PUSH
25426: LD_INT 70
25428: PUSH
25429: LD_INT 80
25431: PUSH
25432: LD_INT 90
25434: PUSH
25435: LD_INT 100
25437: PUSH
25438: LD_INT 110
25440: PUSH
25441: LD_INT 120
25443: PUSH
25444: LD_INT 130
25446: PUSH
25447: LD_INT 140
25449: PUSH
25450: LD_INT 150
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: PPUSH
25473: LD_INT 15
25475: PPUSH
25476: CALL_OW 12
25480: ARRAY
25481: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25482: LD_ADDR_VAR 0 4
25486: PUSH
25487: LD_INT 10
25489: PUSH
25490: LD_INT 20
25492: PUSH
25493: LD_INT 30
25495: PUSH
25496: LD_INT 40
25498: PUSH
25499: LD_INT 50
25501: PUSH
25502: LD_INT 60
25504: PUSH
25505: LD_INT 70
25507: PUSH
25508: LD_INT 80
25510: PUSH
25511: LD_INT 90
25513: PUSH
25514: LD_INT 100
25516: PUSH
25517: LD_INT 110
25519: PUSH
25520: LD_INT 120
25522: PUSH
25523: LD_INT 130
25525: PUSH
25526: LD_INT 140
25528: PUSH
25529: LD_INT 150
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: PPUSH
25552: LD_INT 15
25554: PPUSH
25555: CALL_OW 12
25559: ARRAY
25560: ST_TO_ADDR
// if ValidHex ( x , y ) then
25561: LD_VAR 0 3
25565: PPUSH
25566: LD_VAR 0 4
25570: PPUSH
25571: CALL_OW 488
25575: IFFALSE 25598
// begin result := [ x , y ] ;
25577: LD_ADDR_VAR 0 1
25581: PUSH
25582: LD_VAR 0 3
25586: PUSH
25587: LD_VAR 0 4
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: ST_TO_ADDR
// break ;
25596: GO 25600
// end ; end ;
25598: GO 25400
25600: POP
25601: POP
// if result then
25602: LD_VAR 0 1
25606: IFFALSE 25666
// begin ToLua ( playSibBomb() ) ;
25608: LD_STRING playSibBomb()
25610: PPUSH
25611: CALL_OW 559
// wait ( 0 0$14 ) ;
25615: LD_INT 490
25617: PPUSH
25618: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25622: LD_VAR 0 1
25626: PUSH
25627: LD_INT 1
25629: ARRAY
25630: PPUSH
25631: LD_VAR 0 1
25635: PUSH
25636: LD_INT 2
25638: ARRAY
25639: PPUSH
25640: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25644: LD_VAR 0 1
25648: PUSH
25649: LD_INT 1
25651: ARRAY
25652: PPUSH
25653: LD_VAR 0 1
25657: PUSH
25658: LD_INT 2
25660: ARRAY
25661: PPUSH
25662: CALL_OW 429
// end ; end ;
25666: LD_VAR 0 1
25670: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25671: LD_EXP 66
25675: PUSH
25676: LD_EXP 88
25680: AND
25681: IFFALSE 25693
25683: GO 25685
25685: DISABLE
// YouLost (  ) ;
25686: LD_STRING 
25688: PPUSH
25689: CALL_OW 104
25693: END
// every 0 0$1 trigger StreamModeActive and sFog do
25694: LD_EXP 66
25698: PUSH
25699: LD_EXP 87
25703: AND
25704: IFFALSE 25718
25706: GO 25708
25708: DISABLE
// FogOff ( your_side ) ;
25709: LD_OWVAR 2
25713: PPUSH
25714: CALL_OW 344
25718: END
// every 0 0$1 trigger StreamModeActive and sSun do
25719: LD_EXP 66
25723: PUSH
25724: LD_EXP 89
25728: AND
25729: IFFALSE 25757
25731: GO 25733
25733: DISABLE
// begin solar_recharge_percent := 0 ;
25734: LD_ADDR_OWVAR 79
25738: PUSH
25739: LD_INT 0
25741: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25742: LD_INT 10500
25744: PPUSH
25745: CALL_OW 67
// solar_recharge_percent := 100 ;
25749: LD_ADDR_OWVAR 79
25753: PUSH
25754: LD_INT 100
25756: ST_TO_ADDR
// end ;
25757: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25758: LD_EXP 66
25762: PUSH
25763: LD_EXP 90
25767: AND
25768: IFFALSE 26007
25770: GO 25772
25772: DISABLE
25773: LD_INT 0
25775: PPUSH
25776: PPUSH
25777: PPUSH
// begin tmp := [ ] ;
25778: LD_ADDR_VAR 0 3
25782: PUSH
25783: EMPTY
25784: ST_TO_ADDR
// for i := 1 to 6 do
25785: LD_ADDR_VAR 0 1
25789: PUSH
25790: DOUBLE
25791: LD_INT 1
25793: DEC
25794: ST_TO_ADDR
25795: LD_INT 6
25797: PUSH
25798: FOR_TO
25799: IFFALSE 25904
// begin uc_nation := nation_nature ;
25801: LD_ADDR_OWVAR 21
25805: PUSH
25806: LD_INT 0
25808: ST_TO_ADDR
// uc_side := 0 ;
25809: LD_ADDR_OWVAR 20
25813: PUSH
25814: LD_INT 0
25816: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25817: LD_ADDR_OWVAR 29
25821: PUSH
25822: LD_INT 12
25824: PUSH
25825: LD_INT 12
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: ST_TO_ADDR
// hc_agressivity := 20 ;
25832: LD_ADDR_OWVAR 35
25836: PUSH
25837: LD_INT 20
25839: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25840: LD_ADDR_OWVAR 28
25844: PUSH
25845: LD_INT 17
25847: ST_TO_ADDR
// hc_gallery :=  ;
25848: LD_ADDR_OWVAR 33
25852: PUSH
25853: LD_STRING 
25855: ST_TO_ADDR
// hc_name :=  ;
25856: LD_ADDR_OWVAR 26
25860: PUSH
25861: LD_STRING 
25863: ST_TO_ADDR
// un := CreateHuman ;
25864: LD_ADDR_VAR 0 2
25868: PUSH
25869: CALL_OW 44
25873: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25874: LD_VAR 0 2
25878: PPUSH
25879: LD_INT 1
25881: PPUSH
25882: CALL_OW 51
// tmp := tmp ^ un ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_VAR 0 3
25895: PUSH
25896: LD_VAR 0 2
25900: ADD
25901: ST_TO_ADDR
// end ;
25902: GO 25798
25904: POP
25905: POP
// repeat wait ( 0 0$1 ) ;
25906: LD_INT 35
25908: PPUSH
25909: CALL_OW 67
// for un in tmp do
25913: LD_ADDR_VAR 0 2
25917: PUSH
25918: LD_VAR 0 3
25922: PUSH
25923: FOR_IN
25924: IFFALSE 25998
// begin if IsDead ( un ) then
25926: LD_VAR 0 2
25930: PPUSH
25931: CALL_OW 301
25935: IFFALSE 25955
// begin tmp := tmp diff un ;
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_VAR 0 3
25946: PUSH
25947: LD_VAR 0 2
25951: DIFF
25952: ST_TO_ADDR
// continue ;
25953: GO 25923
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25955: LD_VAR 0 2
25959: PPUSH
25960: LD_INT 3
25962: PUSH
25963: LD_INT 22
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PPUSH
25977: CALL_OW 69
25981: PPUSH
25982: LD_VAR 0 2
25986: PPUSH
25987: CALL_OW 74
25991: PPUSH
25992: CALL_OW 115
// end ;
25996: GO 25923
25998: POP
25999: POP
// until not tmp ;
26000: LD_VAR 0 3
26004: NOT
26005: IFFALSE 25906
// end ;
26007: PPOPN 3
26009: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26010: LD_EXP 66
26014: PUSH
26015: LD_EXP 91
26019: AND
26020: IFFALSE 26074
26022: GO 26024
26024: DISABLE
// begin ToLua ( displayTroll(); ) ;
26025: LD_STRING displayTroll();
26027: PPUSH
26028: CALL_OW 559
// wait ( 3 3$00 ) ;
26032: LD_INT 6300
26034: PPUSH
26035: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26039: LD_STRING hideTroll();
26041: PPUSH
26042: CALL_OW 559
// wait ( 1 1$00 ) ;
26046: LD_INT 2100
26048: PPUSH
26049: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26053: LD_STRING displayTroll();
26055: PPUSH
26056: CALL_OW 559
// wait ( 1 1$00 ) ;
26060: LD_INT 2100
26062: PPUSH
26063: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26067: LD_STRING hideTroll();
26069: PPUSH
26070: CALL_OW 559
// end ;
26074: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26075: LD_EXP 66
26079: PUSH
26080: LD_EXP 92
26084: AND
26085: IFFALSE 26148
26087: GO 26089
26089: DISABLE
26090: LD_INT 0
26092: PPUSH
// begin p := 0 ;
26093: LD_ADDR_VAR 0 1
26097: PUSH
26098: LD_INT 0
26100: ST_TO_ADDR
// repeat game_speed := 1 ;
26101: LD_ADDR_OWVAR 65
26105: PUSH
26106: LD_INT 1
26108: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26109: LD_INT 35
26111: PPUSH
26112: CALL_OW 67
// p := p + 1 ;
26116: LD_ADDR_VAR 0 1
26120: PUSH
26121: LD_VAR 0 1
26125: PUSH
26126: LD_INT 1
26128: PLUS
26129: ST_TO_ADDR
// until p >= 60 ;
26130: LD_VAR 0 1
26134: PUSH
26135: LD_INT 60
26137: GREATEREQUAL
26138: IFFALSE 26101
// game_speed := 4 ;
26140: LD_ADDR_OWVAR 65
26144: PUSH
26145: LD_INT 4
26147: ST_TO_ADDR
// end ;
26148: PPOPN 1
26150: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26151: LD_EXP 66
26155: PUSH
26156: LD_EXP 93
26160: AND
26161: IFFALSE 26307
26163: GO 26165
26165: DISABLE
26166: LD_INT 0
26168: PPUSH
26169: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26170: LD_ADDR_VAR 0 1
26174: PUSH
26175: LD_INT 22
26177: PUSH
26178: LD_OWVAR 2
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 30
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 30
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PPUSH
26219: CALL_OW 69
26223: ST_TO_ADDR
// if not depot then
26224: LD_VAR 0 1
26228: NOT
26229: IFFALSE 26233
// exit ;
26231: GO 26307
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26233: LD_ADDR_VAR 0 2
26237: PUSH
26238: LD_VAR 0 1
26242: PUSH
26243: LD_INT 1
26245: PPUSH
26246: LD_VAR 0 1
26250: PPUSH
26251: CALL_OW 12
26255: ARRAY
26256: PPUSH
26257: CALL_OW 274
26261: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26262: LD_VAR 0 2
26266: PPUSH
26267: LD_INT 1
26269: PPUSH
26270: LD_INT 0
26272: PPUSH
26273: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26277: LD_VAR 0 2
26281: PPUSH
26282: LD_INT 2
26284: PPUSH
26285: LD_INT 0
26287: PPUSH
26288: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26292: LD_VAR 0 2
26296: PPUSH
26297: LD_INT 3
26299: PPUSH
26300: LD_INT 0
26302: PPUSH
26303: CALL_OW 277
// end ;
26307: PPOPN 2
26309: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26310: LD_EXP 66
26314: PUSH
26315: LD_EXP 94
26319: AND
26320: IFFALSE 26417
26322: GO 26324
26324: DISABLE
26325: LD_INT 0
26327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26328: LD_ADDR_VAR 0 1
26332: PUSH
26333: LD_INT 22
26335: PUSH
26336: LD_OWVAR 2
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 21
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: LD_INT 23
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: PPUSH
26377: CALL_OW 69
26381: ST_TO_ADDR
// if not tmp then
26382: LD_VAR 0 1
26386: NOT
26387: IFFALSE 26391
// exit ;
26389: GO 26417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26391: LD_VAR 0 1
26395: PUSH
26396: LD_INT 1
26398: PPUSH
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL_OW 12
26408: ARRAY
26409: PPUSH
26410: LD_INT 200
26412: PPUSH
26413: CALL_OW 234
// end ;
26417: PPOPN 1
26419: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26420: LD_EXP 66
26424: PUSH
26425: LD_EXP 95
26429: AND
26430: IFFALSE 26509
26432: GO 26434
26434: DISABLE
26435: LD_INT 0
26437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26438: LD_ADDR_VAR 0 1
26442: PUSH
26443: LD_INT 22
26445: PUSH
26446: LD_OWVAR 2
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 21
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PPUSH
26469: CALL_OW 69
26473: ST_TO_ADDR
// if not tmp then
26474: LD_VAR 0 1
26478: NOT
26479: IFFALSE 26483
// exit ;
26481: GO 26509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26483: LD_VAR 0 1
26487: PUSH
26488: LD_INT 1
26490: PPUSH
26491: LD_VAR 0 1
26495: PPUSH
26496: CALL_OW 12
26500: ARRAY
26501: PPUSH
26502: LD_INT 60
26504: PPUSH
26505: CALL_OW 234
// end ;
26509: PPOPN 1
26511: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26512: LD_EXP 66
26516: PUSH
26517: LD_EXP 96
26521: AND
26522: IFFALSE 26621
26524: GO 26526
26526: DISABLE
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
// begin enable ;
26531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26532: LD_ADDR_VAR 0 1
26536: PUSH
26537: LD_INT 22
26539: PUSH
26540: LD_OWVAR 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 61
26551: PUSH
26552: EMPTY
26553: LIST
26554: PUSH
26555: LD_INT 33
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: PPUSH
26570: CALL_OW 69
26574: ST_TO_ADDR
// if not tmp then
26575: LD_VAR 0 1
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 26621
// for i in tmp do
26584: LD_ADDR_VAR 0 2
26588: PUSH
26589: LD_VAR 0 1
26593: PUSH
26594: FOR_IN
26595: IFFALSE 26619
// if IsControledBy ( i ) then
26597: LD_VAR 0 2
26601: PPUSH
26602: CALL_OW 312
26606: IFFALSE 26617
// ComUnlink ( i ) ;
26608: LD_VAR 0 2
26612: PPUSH
26613: CALL_OW 136
26617: GO 26594
26619: POP
26620: POP
// end ;
26621: PPOPN 2
26623: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26624: LD_EXP 66
26628: PUSH
26629: LD_EXP 97
26633: AND
26634: IFFALSE 26774
26636: GO 26638
26638: DISABLE
26639: LD_INT 0
26641: PPUSH
26642: PPUSH
// begin ToLua ( displayPowell(); ) ;
26643: LD_STRING displayPowell();
26645: PPUSH
26646: CALL_OW 559
// uc_side := 0 ;
26650: LD_ADDR_OWVAR 20
26654: PUSH
26655: LD_INT 0
26657: ST_TO_ADDR
// uc_nation := 2 ;
26658: LD_ADDR_OWVAR 21
26662: PUSH
26663: LD_INT 2
26665: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26666: LD_ADDR_OWVAR 37
26670: PUSH
26671: LD_INT 14
26673: ST_TO_ADDR
// vc_engine := engine_siberite ;
26674: LD_ADDR_OWVAR 39
26678: PUSH
26679: LD_INT 3
26681: ST_TO_ADDR
// vc_control := control_apeman ;
26682: LD_ADDR_OWVAR 38
26686: PUSH
26687: LD_INT 5
26689: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26690: LD_ADDR_OWVAR 40
26694: PUSH
26695: LD_INT 29
26697: ST_TO_ADDR
// un := CreateVehicle ;
26698: LD_ADDR_VAR 0 2
26702: PUSH
26703: CALL_OW 45
26707: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26708: LD_VAR 0 2
26712: PPUSH
26713: LD_INT 1
26715: PPUSH
26716: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26720: LD_INT 35
26722: PPUSH
26723: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26727: LD_VAR 0 2
26731: PPUSH
26732: LD_INT 22
26734: PUSH
26735: LD_OWVAR 2
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PPUSH
26744: CALL_OW 69
26748: PPUSH
26749: LD_VAR 0 2
26753: PPUSH
26754: CALL_OW 74
26758: PPUSH
26759: CALL_OW 115
// until IsDead ( un ) ;
26763: LD_VAR 0 2
26767: PPUSH
26768: CALL_OW 301
26772: IFFALSE 26720
// end ;
26774: PPOPN 2
26776: END
// every 0 0$1 trigger StreamModeActive and sStu do
26777: LD_EXP 66
26781: PUSH
26782: LD_EXP 105
26786: AND
26787: IFFALSE 26803
26789: GO 26791
26791: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26792: LD_STRING displayStucuk();
26794: PPUSH
26795: CALL_OW 559
// ResetFog ;
26799: CALL_OW 335
// end ;
26803: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26804: LD_EXP 66
26808: PUSH
26809: LD_EXP 98
26813: AND
26814: IFFALSE 26955
26816: GO 26818
26818: DISABLE
26819: LD_INT 0
26821: PPUSH
26822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26823: LD_ADDR_VAR 0 2
26827: PUSH
26828: LD_INT 22
26830: PUSH
26831: LD_OWVAR 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 21
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 69
26858: ST_TO_ADDR
// if not tmp then
26859: LD_VAR 0 2
26863: NOT
26864: IFFALSE 26868
// exit ;
26866: GO 26955
// un := tmp [ rand ( 1 , tmp ) ] ;
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: LD_VAR 0 2
26877: PUSH
26878: LD_INT 1
26880: PPUSH
26881: LD_VAR 0 2
26885: PPUSH
26886: CALL_OW 12
26890: ARRAY
26891: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26892: LD_VAR 0 1
26896: PPUSH
26897: LD_INT 0
26899: PPUSH
26900: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26904: LD_VAR 0 1
26908: PPUSH
26909: LD_OWVAR 3
26913: PUSH
26914: LD_VAR 0 1
26918: DIFF
26919: PPUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 74
26929: PPUSH
26930: CALL_OW 115
// wait ( 0 0$20 ) ;
26934: LD_INT 700
26936: PPUSH
26937: CALL_OW 67
// SetSide ( un , your_side ) ;
26941: LD_VAR 0 1
26945: PPUSH
26946: LD_OWVAR 2
26950: PPUSH
26951: CALL_OW 235
// end ;
26955: PPOPN 2
26957: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26958: LD_EXP 66
26962: PUSH
26963: LD_EXP 99
26967: AND
26968: IFFALSE 27074
26970: GO 26972
26972: DISABLE
26973: LD_INT 0
26975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: LD_INT 22
26983: PUSH
26984: LD_OWVAR 2
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: LD_INT 30
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 30
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PPUSH
27025: CALL_OW 69
27029: ST_TO_ADDR
// if not depot then
27030: LD_VAR 0 1
27034: NOT
27035: IFFALSE 27039
// exit ;
27037: GO 27074
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27039: LD_VAR 0 1
27043: PUSH
27044: LD_INT 1
27046: ARRAY
27047: PPUSH
27048: CALL_OW 250
27052: PPUSH
27053: LD_VAR 0 1
27057: PUSH
27058: LD_INT 1
27060: ARRAY
27061: PPUSH
27062: CALL_OW 251
27066: PPUSH
27067: LD_INT 70
27069: PPUSH
27070: CALL_OW 495
// end ;
27074: PPOPN 1
27076: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27077: LD_EXP 66
27081: PUSH
27082: LD_EXP 100
27086: AND
27087: IFFALSE 27298
27089: GO 27091
27091: DISABLE
27092: LD_INT 0
27094: PPUSH
27095: PPUSH
27096: PPUSH
27097: PPUSH
27098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27099: LD_ADDR_VAR 0 5
27103: PUSH
27104: LD_INT 22
27106: PUSH
27107: LD_OWVAR 2
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 21
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PPUSH
27130: CALL_OW 69
27134: ST_TO_ADDR
// if not tmp then
27135: LD_VAR 0 5
27139: NOT
27140: IFFALSE 27144
// exit ;
27142: GO 27298
// for i in tmp do
27144: LD_ADDR_VAR 0 1
27148: PUSH
27149: LD_VAR 0 5
27153: PUSH
27154: FOR_IN
27155: IFFALSE 27296
// begin d := rand ( 0 , 5 ) ;
27157: LD_ADDR_VAR 0 4
27161: PUSH
27162: LD_INT 0
27164: PPUSH
27165: LD_INT 5
27167: PPUSH
27168: CALL_OW 12
27172: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27173: LD_ADDR_VAR 0 2
27177: PUSH
27178: LD_VAR 0 1
27182: PPUSH
27183: CALL_OW 250
27187: PPUSH
27188: LD_VAR 0 4
27192: PPUSH
27193: LD_INT 3
27195: PPUSH
27196: LD_INT 12
27198: PPUSH
27199: CALL_OW 12
27203: PPUSH
27204: CALL_OW 272
27208: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27209: LD_ADDR_VAR 0 3
27213: PUSH
27214: LD_VAR 0 1
27218: PPUSH
27219: CALL_OW 251
27223: PPUSH
27224: LD_VAR 0 4
27228: PPUSH
27229: LD_INT 3
27231: PPUSH
27232: LD_INT 12
27234: PPUSH
27235: CALL_OW 12
27239: PPUSH
27240: CALL_OW 273
27244: ST_TO_ADDR
// if ValidHex ( x , y ) then
27245: LD_VAR 0 2
27249: PPUSH
27250: LD_VAR 0 3
27254: PPUSH
27255: CALL_OW 488
27259: IFFALSE 27294
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_VAR 0 2
27270: PPUSH
27271: LD_VAR 0 3
27275: PPUSH
27276: LD_INT 3
27278: PPUSH
27279: LD_INT 6
27281: PPUSH
27282: CALL_OW 12
27286: PPUSH
27287: LD_INT 1
27289: PPUSH
27290: CALL_OW 483
// end ;
27294: GO 27154
27296: POP
27297: POP
// end ;
27298: PPOPN 5
27300: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27301: LD_EXP 66
27305: PUSH
27306: LD_EXP 101
27310: AND
27311: IFFALSE 27405
27313: GO 27315
27315: DISABLE
27316: LD_INT 0
27318: PPUSH
27319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27320: LD_ADDR_VAR 0 2
27324: PUSH
27325: LD_INT 22
27327: PUSH
27328: LD_OWVAR 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 32
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 21
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: PPUSH
27362: CALL_OW 69
27366: ST_TO_ADDR
// if not tmp then
27367: LD_VAR 0 2
27371: NOT
27372: IFFALSE 27376
// exit ;
27374: GO 27405
// for i in tmp do
27376: LD_ADDR_VAR 0 1
27380: PUSH
27381: LD_VAR 0 2
27385: PUSH
27386: FOR_IN
27387: IFFALSE 27403
// SetFuel ( i , 0 ) ;
27389: LD_VAR 0 1
27393: PPUSH
27394: LD_INT 0
27396: PPUSH
27397: CALL_OW 240
27401: GO 27386
27403: POP
27404: POP
// end ;
27405: PPOPN 2
27407: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27408: LD_EXP 66
27412: PUSH
27413: LD_EXP 102
27417: AND
27418: IFFALSE 27484
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_INT 22
27433: PUSH
27434: LD_OWVAR 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 30
27445: PUSH
27446: LD_INT 29
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: ST_TO_ADDR
// if not tmp then
27462: LD_VAR 0 1
27466: NOT
27467: IFFALSE 27471
// exit ;
27469: GO 27484
// DestroyUnit ( tmp [ 1 ] ) ;
27471: LD_VAR 0 1
27475: PUSH
27476: LD_INT 1
27478: ARRAY
27479: PPUSH
27480: CALL_OW 65
// end ;
27484: PPOPN 1
27486: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27487: LD_EXP 66
27491: PUSH
27492: LD_EXP 104
27496: AND
27497: IFFALSE 27626
27499: GO 27501
27501: DISABLE
27502: LD_INT 0
27504: PPUSH
// begin uc_side := 0 ;
27505: LD_ADDR_OWVAR 20
27509: PUSH
27510: LD_INT 0
27512: ST_TO_ADDR
// uc_nation := nation_arabian ;
27513: LD_ADDR_OWVAR 21
27517: PUSH
27518: LD_INT 2
27520: ST_TO_ADDR
// hc_gallery :=  ;
27521: LD_ADDR_OWVAR 33
27525: PUSH
27526: LD_STRING 
27528: ST_TO_ADDR
// hc_name :=  ;
27529: LD_ADDR_OWVAR 26
27533: PUSH
27534: LD_STRING 
27536: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27537: LD_INT 1
27539: PPUSH
27540: LD_INT 11
27542: PPUSH
27543: LD_INT 10
27545: PPUSH
27546: CALL_OW 380
// un := CreateHuman ;
27550: LD_ADDR_VAR 0 1
27554: PUSH
27555: CALL_OW 44
27559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27560: LD_VAR 0 1
27564: PPUSH
27565: LD_INT 1
27567: PPUSH
27568: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27572: LD_INT 35
27574: PPUSH
27575: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27579: LD_VAR 0 1
27583: PPUSH
27584: LD_INT 22
27586: PUSH
27587: LD_OWVAR 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PPUSH
27596: CALL_OW 69
27600: PPUSH
27601: LD_VAR 0 1
27605: PPUSH
27606: CALL_OW 74
27610: PPUSH
27611: CALL_OW 115
// until IsDead ( un ) ;
27615: LD_VAR 0 1
27619: PPUSH
27620: CALL_OW 301
27624: IFFALSE 27572
// end ;
27626: PPOPN 1
27628: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27629: LD_EXP 66
27633: PUSH
27634: LD_EXP 106
27638: AND
27639: IFFALSE 27651
27641: GO 27643
27643: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27644: LD_STRING earthquake(getX(game), 0, 32)
27646: PPUSH
27647: CALL_OW 559
27651: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27652: LD_EXP 66
27656: PUSH
27657: LD_EXP 107
27661: AND
27662: IFFALSE 27753
27664: GO 27666
27666: DISABLE
27667: LD_INT 0
27669: PPUSH
// begin enable ;
27670: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27671: LD_ADDR_VAR 0 1
27675: PUSH
27676: LD_INT 22
27678: PUSH
27679: LD_OWVAR 2
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 21
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 33
27700: PUSH
27701: LD_INT 3
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: PPUSH
27713: CALL_OW 69
27717: ST_TO_ADDR
// if not tmp then
27718: LD_VAR 0 1
27722: NOT
27723: IFFALSE 27727
// exit ;
27725: GO 27753
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27727: LD_VAR 0 1
27731: PUSH
27732: LD_INT 1
27734: PPUSH
27735: LD_VAR 0 1
27739: PPUSH
27740: CALL_OW 12
27744: ARRAY
27745: PPUSH
27746: LD_INT 1
27748: PPUSH
27749: CALL_OW 234
// end ;
27753: PPOPN 1
27755: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27756: LD_EXP 66
27760: PUSH
27761: LD_EXP 108
27765: AND
27766: IFFALSE 27907
27768: GO 27770
27770: DISABLE
27771: LD_INT 0
27773: PPUSH
27774: PPUSH
27775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27776: LD_ADDR_VAR 0 3
27780: PUSH
27781: LD_INT 22
27783: PUSH
27784: LD_OWVAR 2
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 25
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PPUSH
27807: CALL_OW 69
27811: ST_TO_ADDR
// if not tmp then
27812: LD_VAR 0 3
27816: NOT
27817: IFFALSE 27821
// exit ;
27819: GO 27907
// un := tmp [ rand ( 1 , tmp ) ] ;
27821: LD_ADDR_VAR 0 2
27825: PUSH
27826: LD_VAR 0 3
27830: PUSH
27831: LD_INT 1
27833: PPUSH
27834: LD_VAR 0 3
27838: PPUSH
27839: CALL_OW 12
27843: ARRAY
27844: ST_TO_ADDR
// if Crawls ( un ) then
27845: LD_VAR 0 2
27849: PPUSH
27850: CALL_OW 318
27854: IFFALSE 27865
// ComWalk ( un ) ;
27856: LD_VAR 0 2
27860: PPUSH
27861: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27865: LD_VAR 0 2
27869: PPUSH
27870: LD_INT 9
27872: PPUSH
27873: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27877: LD_INT 28
27879: PPUSH
27880: LD_OWVAR 2
27884: PPUSH
27885: LD_INT 2
27887: PPUSH
27888: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27892: LD_INT 29
27894: PPUSH
27895: LD_OWVAR 2
27899: PPUSH
27900: LD_INT 2
27902: PPUSH
27903: CALL_OW 322
// end ;
27907: PPOPN 3
27909: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27910: LD_EXP 66
27914: PUSH
27915: LD_EXP 109
27919: AND
27920: IFFALSE 28031
27922: GO 27924
27924: DISABLE
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27930: LD_ADDR_VAR 0 3
27934: PUSH
27935: LD_INT 22
27937: PUSH
27938: LD_OWVAR 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 25
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PPUSH
27961: CALL_OW 69
27965: ST_TO_ADDR
// if not tmp then
27966: LD_VAR 0 3
27970: NOT
27971: IFFALSE 27975
// exit ;
27973: GO 28031
// un := tmp [ rand ( 1 , tmp ) ] ;
27975: LD_ADDR_VAR 0 2
27979: PUSH
27980: LD_VAR 0 3
27984: PUSH
27985: LD_INT 1
27987: PPUSH
27988: LD_VAR 0 3
27992: PPUSH
27993: CALL_OW 12
27997: ARRAY
27998: ST_TO_ADDR
// if Crawls ( un ) then
27999: LD_VAR 0 2
28003: PPUSH
28004: CALL_OW 318
28008: IFFALSE 28019
// ComWalk ( un ) ;
28010: LD_VAR 0 2
28014: PPUSH
28015: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28019: LD_VAR 0 2
28023: PPUSH
28024: LD_INT 8
28026: PPUSH
28027: CALL_OW 336
// end ;
28031: PPOPN 3
28033: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28034: LD_EXP 66
28038: PUSH
28039: LD_EXP 110
28043: AND
28044: IFFALSE 28188
28046: GO 28048
28048: DISABLE
28049: LD_INT 0
28051: PPUSH
28052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28053: LD_ADDR_VAR 0 2
28057: PUSH
28058: LD_INT 22
28060: PUSH
28061: LD_OWVAR 2
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 21
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 34
28085: PUSH
28086: LD_INT 12
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 34
28095: PUSH
28096: LD_INT 51
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 34
28105: PUSH
28106: LD_INT 32
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: PPUSH
28124: CALL_OW 69
28128: ST_TO_ADDR
// if not tmp then
28129: LD_VAR 0 2
28133: NOT
28134: IFFALSE 28138
// exit ;
28136: GO 28188
// for i in tmp do
28138: LD_ADDR_VAR 0 1
28142: PUSH
28143: LD_VAR 0 2
28147: PUSH
28148: FOR_IN
28149: IFFALSE 28186
// if GetCargo ( i , mat_artifact ) = 0 then
28151: LD_VAR 0 1
28155: PPUSH
28156: LD_INT 4
28158: PPUSH
28159: CALL_OW 289
28163: PUSH
28164: LD_INT 0
28166: EQUAL
28167: IFFALSE 28184
// SetCargo ( i , mat_siberit , 100 ) ;
28169: LD_VAR 0 1
28173: PPUSH
28174: LD_INT 3
28176: PPUSH
28177: LD_INT 100
28179: PPUSH
28180: CALL_OW 290
28184: GO 28148
28186: POP
28187: POP
// end ;
28188: PPOPN 2
28190: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28191: LD_EXP 66
28195: PUSH
28196: LD_EXP 111
28200: AND
28201: IFFALSE 28384
28203: GO 28205
28205: DISABLE
28206: LD_INT 0
28208: PPUSH
28209: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28210: LD_ADDR_VAR 0 2
28214: PUSH
28215: LD_INT 22
28217: PUSH
28218: LD_OWVAR 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PPUSH
28227: CALL_OW 69
28231: ST_TO_ADDR
// if not tmp then
28232: LD_VAR 0 2
28236: NOT
28237: IFFALSE 28241
// exit ;
28239: GO 28384
// for i := 1 to 2 do
28241: LD_ADDR_VAR 0 1
28245: PUSH
28246: DOUBLE
28247: LD_INT 1
28249: DEC
28250: ST_TO_ADDR
28251: LD_INT 2
28253: PUSH
28254: FOR_TO
28255: IFFALSE 28382
// begin uc_side := your_side ;
28257: LD_ADDR_OWVAR 20
28261: PUSH
28262: LD_OWVAR 2
28266: ST_TO_ADDR
// uc_nation := nation_american ;
28267: LD_ADDR_OWVAR 21
28271: PUSH
28272: LD_INT 1
28274: ST_TO_ADDR
// vc_chassis := us_morphling ;
28275: LD_ADDR_OWVAR 37
28279: PUSH
28280: LD_INT 5
28282: ST_TO_ADDR
// vc_engine := engine_siberite ;
28283: LD_ADDR_OWVAR 39
28287: PUSH
28288: LD_INT 3
28290: ST_TO_ADDR
// vc_control := control_computer ;
28291: LD_ADDR_OWVAR 38
28295: PUSH
28296: LD_INT 3
28298: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28299: LD_ADDR_OWVAR 40
28303: PUSH
28304: LD_INT 10
28306: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28307: LD_VAR 0 2
28311: PUSH
28312: LD_INT 1
28314: ARRAY
28315: PPUSH
28316: CALL_OW 310
28320: NOT
28321: IFFALSE 28368
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28323: CALL_OW 45
28327: PPUSH
28328: LD_VAR 0 2
28332: PUSH
28333: LD_INT 1
28335: ARRAY
28336: PPUSH
28337: CALL_OW 250
28341: PPUSH
28342: LD_VAR 0 2
28346: PUSH
28347: LD_INT 1
28349: ARRAY
28350: PPUSH
28351: CALL_OW 251
28355: PPUSH
28356: LD_INT 12
28358: PPUSH
28359: LD_INT 1
28361: PPUSH
28362: CALL_OW 50
28366: GO 28380
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28368: CALL_OW 45
28372: PPUSH
28373: LD_INT 1
28375: PPUSH
28376: CALL_OW 51
// end ;
28380: GO 28254
28382: POP
28383: POP
// end ;
28384: PPOPN 2
28386: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28387: LD_EXP 66
28391: PUSH
28392: LD_EXP 112
28396: AND
28397: IFFALSE 28619
28399: GO 28401
28401: DISABLE
28402: LD_INT 0
28404: PPUSH
28405: PPUSH
28406: PPUSH
28407: PPUSH
28408: PPUSH
28409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28410: LD_ADDR_VAR 0 6
28414: PUSH
28415: LD_INT 22
28417: PUSH
28418: LD_OWVAR 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 21
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 3
28439: PUSH
28440: LD_INT 23
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: PPUSH
28459: CALL_OW 69
28463: ST_TO_ADDR
// if not tmp then
28464: LD_VAR 0 6
28468: NOT
28469: IFFALSE 28473
// exit ;
28471: GO 28619
// s1 := rand ( 1 , 4 ) ;
28473: LD_ADDR_VAR 0 2
28477: PUSH
28478: LD_INT 1
28480: PPUSH
28481: LD_INT 4
28483: PPUSH
28484: CALL_OW 12
28488: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28489: LD_ADDR_VAR 0 4
28493: PUSH
28494: LD_VAR 0 6
28498: PUSH
28499: LD_INT 1
28501: ARRAY
28502: PPUSH
28503: LD_VAR 0 2
28507: PPUSH
28508: CALL_OW 259
28512: ST_TO_ADDR
// if s1 = 1 then
28513: LD_VAR 0 2
28517: PUSH
28518: LD_INT 1
28520: EQUAL
28521: IFFALSE 28541
// s2 := rand ( 2 , 4 ) else
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_INT 2
28530: PPUSH
28531: LD_INT 4
28533: PPUSH
28534: CALL_OW 12
28538: ST_TO_ADDR
28539: GO 28549
// s2 := 1 ;
28541: LD_ADDR_VAR 0 3
28545: PUSH
28546: LD_INT 1
28548: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28549: LD_ADDR_VAR 0 5
28553: PUSH
28554: LD_VAR 0 6
28558: PUSH
28559: LD_INT 1
28561: ARRAY
28562: PPUSH
28563: LD_VAR 0 3
28567: PPUSH
28568: CALL_OW 259
28572: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28573: LD_VAR 0 6
28577: PUSH
28578: LD_INT 1
28580: ARRAY
28581: PPUSH
28582: LD_VAR 0 2
28586: PPUSH
28587: LD_VAR 0 5
28591: PPUSH
28592: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28596: LD_VAR 0 6
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: PPUSH
28605: LD_VAR 0 3
28609: PPUSH
28610: LD_VAR 0 4
28614: PPUSH
28615: CALL_OW 237
// end ;
28619: PPOPN 6
28621: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28622: LD_EXP 66
28626: PUSH
28627: LD_EXP 113
28631: AND
28632: IFFALSE 28711
28634: GO 28636
28636: DISABLE
28637: LD_INT 0
28639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28640: LD_ADDR_VAR 0 1
28644: PUSH
28645: LD_INT 22
28647: PUSH
28648: LD_OWVAR 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 30
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PPUSH
28671: CALL_OW 69
28675: ST_TO_ADDR
// if not tmp then
28676: LD_VAR 0 1
28680: NOT
28681: IFFALSE 28685
// exit ;
28683: GO 28711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28685: LD_VAR 0 1
28689: PUSH
28690: LD_INT 1
28692: PPUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: CALL_OW 12
28702: ARRAY
28703: PPUSH
28704: LD_INT 1
28706: PPUSH
28707: CALL_OW 234
// end ;
28711: PPOPN 1
28713: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28714: LD_EXP 66
28718: PUSH
28719: LD_EXP 114
28723: AND
28724: IFFALSE 28836
28726: GO 28728
28728: DISABLE
28729: LD_INT 0
28731: PPUSH
28732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28733: LD_ADDR_VAR 0 2
28737: PUSH
28738: LD_INT 22
28740: PUSH
28741: LD_OWVAR 2
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 30
28755: PUSH
28756: LD_INT 27
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: LD_INT 26
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 30
28775: PUSH
28776: LD_INT 28
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PPUSH
28793: CALL_OW 69
28797: ST_TO_ADDR
// if not tmp then
28798: LD_VAR 0 2
28802: NOT
28803: IFFALSE 28807
// exit ;
28805: GO 28836
// for i in tmp do
28807: LD_ADDR_VAR 0 1
28811: PUSH
28812: LD_VAR 0 2
28816: PUSH
28817: FOR_IN
28818: IFFALSE 28834
// SetLives ( i , 1 ) ;
28820: LD_VAR 0 1
28824: PPUSH
28825: LD_INT 1
28827: PPUSH
28828: CALL_OW 234
28832: GO 28817
28834: POP
28835: POP
// end ;
28836: PPOPN 2
28838: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28839: LD_EXP 66
28843: PUSH
28844: LD_EXP 115
28848: AND
28849: IFFALSE 29123
28851: GO 28853
28853: DISABLE
28854: LD_INT 0
28856: PPUSH
28857: PPUSH
28858: PPUSH
// begin i := rand ( 1 , 7 ) ;
28859: LD_ADDR_VAR 0 1
28863: PUSH
28864: LD_INT 1
28866: PPUSH
28867: LD_INT 7
28869: PPUSH
28870: CALL_OW 12
28874: ST_TO_ADDR
// case i of 1 :
28875: LD_VAR 0 1
28879: PUSH
28880: LD_INT 1
28882: DOUBLE
28883: EQUAL
28884: IFTRUE 28888
28886: GO 28898
28888: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28889: LD_STRING earthquake(getX(game), 0, 32)
28891: PPUSH
28892: CALL_OW 559
28896: GO 29123
28898: LD_INT 2
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28906
28904: GO 28920
28906: POP
// begin ToLua ( displayStucuk(); ) ;
28907: LD_STRING displayStucuk();
28909: PPUSH
28910: CALL_OW 559
// ResetFog ;
28914: CALL_OW 335
// end ; 3 :
28918: GO 29123
28920: LD_INT 3
28922: DOUBLE
28923: EQUAL
28924: IFTRUE 28928
28926: GO 29032
28928: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28929: LD_ADDR_VAR 0 2
28933: PUSH
28934: LD_INT 22
28936: PUSH
28937: LD_OWVAR 2
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 25
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PPUSH
28960: CALL_OW 69
28964: ST_TO_ADDR
// if not tmp then
28965: LD_VAR 0 2
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29123
// un := tmp [ rand ( 1 , tmp ) ] ;
28974: LD_ADDR_VAR 0 3
28978: PUSH
28979: LD_VAR 0 2
28983: PUSH
28984: LD_INT 1
28986: PPUSH
28987: LD_VAR 0 2
28991: PPUSH
28992: CALL_OW 12
28996: ARRAY
28997: ST_TO_ADDR
// if Crawls ( un ) then
28998: LD_VAR 0 3
29002: PPUSH
29003: CALL_OW 318
29007: IFFALSE 29018
// ComWalk ( un ) ;
29009: LD_VAR 0 3
29013: PPUSH
29014: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29018: LD_VAR 0 3
29022: PPUSH
29023: LD_INT 8
29025: PPUSH
29026: CALL_OW 336
// end ; 4 :
29030: GO 29123
29032: LD_INT 4
29034: DOUBLE
29035: EQUAL
29036: IFTRUE 29040
29038: GO 29101
29040: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_OWVAR 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 30
29060: PUSH
29061: LD_INT 29
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PPUSH
29072: CALL_OW 69
29076: ST_TO_ADDR
// if not tmp then
29077: LD_VAR 0 2
29081: NOT
29082: IFFALSE 29086
// exit ;
29084: GO 29123
// DestroyUnit ( tmp [ 1 ] ) ;
29086: LD_VAR 0 2
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: CALL_OW 65
// end ; 5 .. 7 :
29099: GO 29123
29101: LD_INT 5
29103: DOUBLE
29104: GREATEREQUAL
29105: IFFALSE 29113
29107: LD_INT 7
29109: DOUBLE
29110: LESSEQUAL
29111: IFTRUE 29115
29113: GO 29122
29115: POP
// StreamSibBomb ; end ;
29116: CALL 25373 0 0
29120: GO 29123
29122: POP
// end ;
29123: PPOPN 3
29125: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29126: LD_EXP 66
29130: PUSH
29131: LD_EXP 116
29135: AND
29136: IFFALSE 29292
29138: GO 29140
29140: DISABLE
29141: LD_INT 0
29143: PPUSH
29144: PPUSH
29145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29146: LD_ADDR_VAR 0 2
29150: PUSH
29151: LD_INT 81
29153: PUSH
29154: LD_OWVAR 2
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: LD_INT 21
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 21
29178: PUSH
29179: LD_INT 2
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PPUSH
29195: CALL_OW 69
29199: ST_TO_ADDR
// if not tmp then
29200: LD_VAR 0 2
29204: NOT
29205: IFFALSE 29209
// exit ;
29207: GO 29292
// p := 0 ;
29209: LD_ADDR_VAR 0 3
29213: PUSH
29214: LD_INT 0
29216: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29217: LD_INT 35
29219: PPUSH
29220: CALL_OW 67
// p := p + 1 ;
29224: LD_ADDR_VAR 0 3
29228: PUSH
29229: LD_VAR 0 3
29233: PUSH
29234: LD_INT 1
29236: PLUS
29237: ST_TO_ADDR
// for i in tmp do
29238: LD_ADDR_VAR 0 1
29242: PUSH
29243: LD_VAR 0 2
29247: PUSH
29248: FOR_IN
29249: IFFALSE 29280
// if GetLives ( i ) < 1000 then
29251: LD_VAR 0 1
29255: PPUSH
29256: CALL_OW 256
29260: PUSH
29261: LD_INT 1000
29263: LESS
29264: IFFALSE 29278
// SetLives ( i , 1000 ) ;
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_INT 1000
29273: PPUSH
29274: CALL_OW 234
29278: GO 29248
29280: POP
29281: POP
// until p > 20 ;
29282: LD_VAR 0 3
29286: PUSH
29287: LD_INT 20
29289: GREATER
29290: IFFALSE 29217
// end ;
29292: PPOPN 3
29294: END
// every 0 0$1 trigger StreamModeActive and sTime do
29295: LD_EXP 66
29299: PUSH
29300: LD_EXP 117
29304: AND
29305: IFFALSE 29340
29307: GO 29309
29309: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29310: LD_INT 28
29312: PPUSH
29313: LD_OWVAR 2
29317: PPUSH
29318: LD_INT 2
29320: PPUSH
29321: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29325: LD_INT 30
29327: PPUSH
29328: LD_OWVAR 2
29332: PPUSH
29333: LD_INT 2
29335: PPUSH
29336: CALL_OW 322
// end ;
29340: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29341: LD_EXP 66
29345: PUSH
29346: LD_EXP 118
29350: AND
29351: IFFALSE 29472
29353: GO 29355
29355: DISABLE
29356: LD_INT 0
29358: PPUSH
29359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29360: LD_ADDR_VAR 0 2
29364: PUSH
29365: LD_INT 22
29367: PUSH
29368: LD_OWVAR 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 21
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: LD_INT 23
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: ST_TO_ADDR
// if not tmp then
29414: LD_VAR 0 2
29418: NOT
29419: IFFALSE 29423
// exit ;
29421: GO 29472
// for i in tmp do
29423: LD_ADDR_VAR 0 1
29427: PUSH
29428: LD_VAR 0 2
29432: PUSH
29433: FOR_IN
29434: IFFALSE 29470
// begin if Crawls ( i ) then
29436: LD_VAR 0 1
29440: PPUSH
29441: CALL_OW 318
29445: IFFALSE 29456
// ComWalk ( i ) ;
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL_OW 138
// SetClass ( i , 2 ) ;
29456: LD_VAR 0 1
29460: PPUSH
29461: LD_INT 2
29463: PPUSH
29464: CALL_OW 336
// end ;
29468: GO 29433
29470: POP
29471: POP
// end ;
29472: PPOPN 2
29474: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29475: LD_EXP 66
29479: PUSH
29480: LD_EXP 119
29484: AND
29485: IFFALSE 29766
29487: GO 29489
29489: DISABLE
29490: LD_INT 0
29492: PPUSH
29493: PPUSH
29494: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29495: LD_OWVAR 2
29499: PPUSH
29500: LD_INT 9
29502: PPUSH
29503: LD_INT 1
29505: PPUSH
29506: LD_INT 1
29508: PPUSH
29509: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29513: LD_INT 9
29515: PPUSH
29516: LD_OWVAR 2
29520: PPUSH
29521: CALL_OW 343
// uc_side := 9 ;
29525: LD_ADDR_OWVAR 20
29529: PUSH
29530: LD_INT 9
29532: ST_TO_ADDR
// uc_nation := 2 ;
29533: LD_ADDR_OWVAR 21
29537: PUSH
29538: LD_INT 2
29540: ST_TO_ADDR
// hc_name := Dark Warrior ;
29541: LD_ADDR_OWVAR 26
29545: PUSH
29546: LD_STRING Dark Warrior
29548: ST_TO_ADDR
// hc_gallery :=  ;
29549: LD_ADDR_OWVAR 33
29553: PUSH
29554: LD_STRING 
29556: ST_TO_ADDR
// hc_noskilllimit := true ;
29557: LD_ADDR_OWVAR 76
29561: PUSH
29562: LD_INT 1
29564: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29565: LD_ADDR_OWVAR 31
29569: PUSH
29570: LD_INT 30
29572: PUSH
29573: LD_INT 30
29575: PUSH
29576: LD_INT 30
29578: PUSH
29579: LD_INT 30
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
// un := CreateHuman ;
29588: LD_ADDR_VAR 0 3
29592: PUSH
29593: CALL_OW 44
29597: ST_TO_ADDR
// hc_noskilllimit := false ;
29598: LD_ADDR_OWVAR 76
29602: PUSH
29603: LD_INT 0
29605: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29606: LD_VAR 0 3
29610: PPUSH
29611: LD_INT 1
29613: PPUSH
29614: CALL_OW 51
// p := 0 ;
29618: LD_ADDR_VAR 0 2
29622: PUSH
29623: LD_INT 0
29625: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29626: LD_INT 35
29628: PPUSH
29629: CALL_OW 67
// p := p + 1 ;
29633: LD_ADDR_VAR 0 2
29637: PUSH
29638: LD_VAR 0 2
29642: PUSH
29643: LD_INT 1
29645: PLUS
29646: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29647: LD_VAR 0 3
29651: PPUSH
29652: CALL_OW 256
29656: PUSH
29657: LD_INT 1000
29659: LESS
29660: IFFALSE 29674
// SetLives ( un , 1000 ) ;
29662: LD_VAR 0 3
29666: PPUSH
29667: LD_INT 1000
29669: PPUSH
29670: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29674: LD_VAR 0 3
29678: PPUSH
29679: LD_INT 81
29681: PUSH
29682: LD_OWVAR 2
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 91
29693: PUSH
29694: LD_VAR 0 3
29698: PUSH
29699: LD_INT 30
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PPUSH
29711: CALL_OW 69
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: CALL_OW 74
29725: PPUSH
29726: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29730: LD_VAR 0 2
29734: PUSH
29735: LD_INT 60
29737: GREATER
29738: PUSH
29739: LD_VAR 0 3
29743: PPUSH
29744: CALL_OW 301
29748: OR
29749: IFFALSE 29626
// if un then
29751: LD_VAR 0 3
29755: IFFALSE 29766
// RemoveUnit ( un ) ;
29757: LD_VAR 0 3
29761: PPUSH
29762: CALL_OW 64
// end ;
29766: PPOPN 3
29768: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29769: LD_INT 0
29771: PPUSH
// case cmd of 301 :
29772: LD_VAR 0 1
29776: PUSH
29777: LD_INT 301
29779: DOUBLE
29780: EQUAL
29781: IFTRUE 29785
29783: GO 29817
29785: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29786: LD_VAR 0 6
29790: PPUSH
29791: LD_VAR 0 7
29795: PPUSH
29796: LD_VAR 0 8
29800: PPUSH
29801: LD_VAR 0 4
29805: PPUSH
29806: LD_VAR 0 5
29810: PPUSH
29811: CALL 31018 0 5
29815: GO 29938
29817: LD_INT 302
29819: DOUBLE
29820: EQUAL
29821: IFTRUE 29825
29823: GO 29862
29825: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29826: LD_VAR 0 6
29830: PPUSH
29831: LD_VAR 0 7
29835: PPUSH
29836: LD_VAR 0 8
29840: PPUSH
29841: LD_VAR 0 9
29845: PPUSH
29846: LD_VAR 0 4
29850: PPUSH
29851: LD_VAR 0 5
29855: PPUSH
29856: CALL 31109 0 6
29860: GO 29938
29862: LD_INT 303
29864: DOUBLE
29865: EQUAL
29866: IFTRUE 29870
29868: GO 29907
29870: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29871: LD_VAR 0 6
29875: PPUSH
29876: LD_VAR 0 7
29880: PPUSH
29881: LD_VAR 0 8
29885: PPUSH
29886: LD_VAR 0 9
29890: PPUSH
29891: LD_VAR 0 4
29895: PPUSH
29896: LD_VAR 0 5
29900: PPUSH
29901: CALL 29943 0 6
29905: GO 29938
29907: LD_INT 304
29909: DOUBLE
29910: EQUAL
29911: IFTRUE 29915
29913: GO 29937
29915: POP
// hHackTeleport ( unit , x , y ) ; end ;
29916: LD_VAR 0 2
29920: PPUSH
29921: LD_VAR 0 4
29925: PPUSH
29926: LD_VAR 0 5
29930: PPUSH
29931: CALL 31702 0 3
29935: GO 29938
29937: POP
// end ;
29938: LD_VAR 0 12
29942: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29947: LD_VAR 0 1
29951: PUSH
29952: LD_INT 1
29954: LESS
29955: PUSH
29956: LD_VAR 0 1
29960: PUSH
29961: LD_INT 3
29963: GREATER
29964: OR
29965: PUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: LD_VAR 0 6
29975: PPUSH
29976: CALL_OW 428
29980: OR
29981: IFFALSE 29985
// exit ;
29983: GO 30705
// uc_side := your_side ;
29985: LD_ADDR_OWVAR 20
29989: PUSH
29990: LD_OWVAR 2
29994: ST_TO_ADDR
// uc_nation := nation ;
29995: LD_ADDR_OWVAR 21
29999: PUSH
30000: LD_VAR 0 1
30004: ST_TO_ADDR
// bc_level = 1 ;
30005: LD_ADDR_OWVAR 43
30009: PUSH
30010: LD_INT 1
30012: ST_TO_ADDR
// case btype of 1 :
30013: LD_VAR 0 2
30017: PUSH
30018: LD_INT 1
30020: DOUBLE
30021: EQUAL
30022: IFTRUE 30026
30024: GO 30037
30026: POP
// bc_type := b_depot ; 2 :
30027: LD_ADDR_OWVAR 42
30031: PUSH
30032: LD_INT 0
30034: ST_TO_ADDR
30035: GO 30649
30037: LD_INT 2
30039: DOUBLE
30040: EQUAL
30041: IFTRUE 30045
30043: GO 30056
30045: POP
// bc_type := b_warehouse ; 3 :
30046: LD_ADDR_OWVAR 42
30050: PUSH
30051: LD_INT 1
30053: ST_TO_ADDR
30054: GO 30649
30056: LD_INT 3
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 30075
30064: POP
// bc_type := b_lab ; 4 .. 9 :
30065: LD_ADDR_OWVAR 42
30069: PUSH
30070: LD_INT 6
30072: ST_TO_ADDR
30073: GO 30649
30075: LD_INT 4
30077: DOUBLE
30078: GREATEREQUAL
30079: IFFALSE 30087
30081: LD_INT 9
30083: DOUBLE
30084: LESSEQUAL
30085: IFTRUE 30089
30087: GO 30141
30089: POP
// begin bc_type := b_lab_half ;
30090: LD_ADDR_OWVAR 42
30094: PUSH
30095: LD_INT 7
30097: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30098: LD_ADDR_OWVAR 44
30102: PUSH
30103: LD_INT 10
30105: PUSH
30106: LD_INT 11
30108: PUSH
30109: LD_INT 12
30111: PUSH
30112: LD_INT 15
30114: PUSH
30115: LD_INT 14
30117: PUSH
30118: LD_INT 13
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: PUSH
30129: LD_VAR 0 2
30133: PUSH
30134: LD_INT 3
30136: MINUS
30137: ARRAY
30138: ST_TO_ADDR
// end ; 10 .. 13 :
30139: GO 30649
30141: LD_INT 10
30143: DOUBLE
30144: GREATEREQUAL
30145: IFFALSE 30153
30147: LD_INT 13
30149: DOUBLE
30150: LESSEQUAL
30151: IFTRUE 30155
30153: GO 30232
30155: POP
// begin bc_type := b_lab_full ;
30156: LD_ADDR_OWVAR 42
30160: PUSH
30161: LD_INT 8
30163: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30164: LD_ADDR_OWVAR 44
30168: PUSH
30169: LD_INT 10
30171: PUSH
30172: LD_INT 12
30174: PUSH
30175: LD_INT 14
30177: PUSH
30178: LD_INT 13
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: PUSH
30187: LD_VAR 0 2
30191: PUSH
30192: LD_INT 9
30194: MINUS
30195: ARRAY
30196: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30197: LD_ADDR_OWVAR 45
30201: PUSH
30202: LD_INT 11
30204: PUSH
30205: LD_INT 15
30207: PUSH
30208: LD_INT 12
30210: PUSH
30211: LD_INT 15
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: PUSH
30220: LD_VAR 0 2
30224: PUSH
30225: LD_INT 9
30227: MINUS
30228: ARRAY
30229: ST_TO_ADDR
// end ; 14 :
30230: GO 30649
30232: LD_INT 14
30234: DOUBLE
30235: EQUAL
30236: IFTRUE 30240
30238: GO 30251
30240: POP
// bc_type := b_workshop ; 15 :
30241: LD_ADDR_OWVAR 42
30245: PUSH
30246: LD_INT 2
30248: ST_TO_ADDR
30249: GO 30649
30251: LD_INT 15
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30270
30259: POP
// bc_type := b_factory ; 16 :
30260: LD_ADDR_OWVAR 42
30264: PUSH
30265: LD_INT 3
30267: ST_TO_ADDR
30268: GO 30649
30270: LD_INT 16
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30289
30278: POP
// bc_type := b_ext_gun ; 17 :
30279: LD_ADDR_OWVAR 42
30283: PUSH
30284: LD_INT 17
30286: ST_TO_ADDR
30287: GO 30649
30289: LD_INT 17
30291: DOUBLE
30292: EQUAL
30293: IFTRUE 30297
30295: GO 30325
30297: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30298: LD_ADDR_OWVAR 42
30302: PUSH
30303: LD_INT 19
30305: PUSH
30306: LD_INT 23
30308: PUSH
30309: LD_INT 19
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: PUSH
30317: LD_VAR 0 1
30321: ARRAY
30322: ST_TO_ADDR
30323: GO 30649
30325: LD_INT 18
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30333
30331: GO 30344
30333: POP
// bc_type := b_ext_radar ; 19 :
30334: LD_ADDR_OWVAR 42
30338: PUSH
30339: LD_INT 20
30341: ST_TO_ADDR
30342: GO 30649
30344: LD_INT 19
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30363
30352: POP
// bc_type := b_ext_radio ; 20 :
30353: LD_ADDR_OWVAR 42
30357: PUSH
30358: LD_INT 22
30360: ST_TO_ADDR
30361: GO 30649
30363: LD_INT 20
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30382
30371: POP
// bc_type := b_ext_siberium ; 21 :
30372: LD_ADDR_OWVAR 42
30376: PUSH
30377: LD_INT 21
30379: ST_TO_ADDR
30380: GO 30649
30382: LD_INT 21
30384: DOUBLE
30385: EQUAL
30386: IFTRUE 30390
30388: GO 30401
30390: POP
// bc_type := b_ext_computer ; 22 :
30391: LD_ADDR_OWVAR 42
30395: PUSH
30396: LD_INT 24
30398: ST_TO_ADDR
30399: GO 30649
30401: LD_INT 22
30403: DOUBLE
30404: EQUAL
30405: IFTRUE 30409
30407: GO 30420
30409: POP
// bc_type := b_ext_track ; 23 :
30410: LD_ADDR_OWVAR 42
30414: PUSH
30415: LD_INT 16
30417: ST_TO_ADDR
30418: GO 30649
30420: LD_INT 23
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30439
30428: POP
// bc_type := b_ext_laser ; 24 :
30429: LD_ADDR_OWVAR 42
30433: PUSH
30434: LD_INT 25
30436: ST_TO_ADDR
30437: GO 30649
30439: LD_INT 24
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30458
30447: POP
// bc_type := b_control_tower ; 25 :
30448: LD_ADDR_OWVAR 42
30452: PUSH
30453: LD_INT 36
30455: ST_TO_ADDR
30456: GO 30649
30458: LD_INT 25
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30477
30466: POP
// bc_type := b_breastwork ; 26 :
30467: LD_ADDR_OWVAR 42
30471: PUSH
30472: LD_INT 31
30474: ST_TO_ADDR
30475: GO 30649
30477: LD_INT 26
30479: DOUBLE
30480: EQUAL
30481: IFTRUE 30485
30483: GO 30496
30485: POP
// bc_type := b_bunker ; 27 :
30486: LD_ADDR_OWVAR 42
30490: PUSH
30491: LD_INT 32
30493: ST_TO_ADDR
30494: GO 30649
30496: LD_INT 27
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30515
30504: POP
// bc_type := b_turret ; 28 :
30505: LD_ADDR_OWVAR 42
30509: PUSH
30510: LD_INT 33
30512: ST_TO_ADDR
30513: GO 30649
30515: LD_INT 28
30517: DOUBLE
30518: EQUAL
30519: IFTRUE 30523
30521: GO 30534
30523: POP
// bc_type := b_armoury ; 29 :
30524: LD_ADDR_OWVAR 42
30528: PUSH
30529: LD_INT 4
30531: ST_TO_ADDR
30532: GO 30649
30534: LD_INT 29
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30553
30542: POP
// bc_type := b_barracks ; 30 :
30543: LD_ADDR_OWVAR 42
30547: PUSH
30548: LD_INT 5
30550: ST_TO_ADDR
30551: GO 30649
30553: LD_INT 30
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 30572
30561: POP
// bc_type := b_solar_power ; 31 :
30562: LD_ADDR_OWVAR 42
30566: PUSH
30567: LD_INT 27
30569: ST_TO_ADDR
30570: GO 30649
30572: LD_INT 31
30574: DOUBLE
30575: EQUAL
30576: IFTRUE 30580
30578: GO 30591
30580: POP
// bc_type := b_oil_power ; 32 :
30581: LD_ADDR_OWVAR 42
30585: PUSH
30586: LD_INT 26
30588: ST_TO_ADDR
30589: GO 30649
30591: LD_INT 32
30593: DOUBLE
30594: EQUAL
30595: IFTRUE 30599
30597: GO 30610
30599: POP
// bc_type := b_siberite_power ; 33 :
30600: LD_ADDR_OWVAR 42
30604: PUSH
30605: LD_INT 28
30607: ST_TO_ADDR
30608: GO 30649
30610: LD_INT 33
30612: DOUBLE
30613: EQUAL
30614: IFTRUE 30618
30616: GO 30629
30618: POP
// bc_type := b_oil_mine ; 34 :
30619: LD_ADDR_OWVAR 42
30623: PUSH
30624: LD_INT 29
30626: ST_TO_ADDR
30627: GO 30649
30629: LD_INT 34
30631: DOUBLE
30632: EQUAL
30633: IFTRUE 30637
30635: GO 30648
30637: POP
// bc_type := b_siberite_mine ; end ;
30638: LD_ADDR_OWVAR 42
30642: PUSH
30643: LD_INT 30
30645: ST_TO_ADDR
30646: GO 30649
30648: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30649: LD_ADDR_VAR 0 8
30653: PUSH
30654: LD_VAR 0 5
30658: PPUSH
30659: LD_VAR 0 6
30663: PPUSH
30664: LD_VAR 0 3
30668: PPUSH
30669: CALL_OW 47
30673: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30674: LD_OWVAR 42
30678: PUSH
30679: LD_INT 32
30681: PUSH
30682: LD_INT 33
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: IN
30689: IFFALSE 30705
// PlaceWeaponTurret ( b , weapon ) ;
30691: LD_VAR 0 8
30695: PPUSH
30696: LD_VAR 0 4
30700: PPUSH
30701: CALL_OW 431
// end ;
30705: LD_VAR 0 7
30709: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
30715: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30716: LD_ADDR_VAR 0 4
30720: PUSH
30721: LD_INT 22
30723: PUSH
30724: LD_OWVAR 2
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: LD_INT 30
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 30
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: LIST
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PPUSH
30765: CALL_OW 69
30769: ST_TO_ADDR
// if not tmp then
30770: LD_VAR 0 4
30774: NOT
30775: IFFALSE 30779
// exit ;
30777: GO 30838
// for i in tmp do
30779: LD_ADDR_VAR 0 2
30783: PUSH
30784: LD_VAR 0 4
30788: PUSH
30789: FOR_IN
30790: IFFALSE 30836
// for j = 1 to 3 do
30792: LD_ADDR_VAR 0 3
30796: PUSH
30797: DOUBLE
30798: LD_INT 1
30800: DEC
30801: ST_TO_ADDR
30802: LD_INT 3
30804: PUSH
30805: FOR_TO
30806: IFFALSE 30832
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30808: LD_VAR 0 2
30812: PPUSH
30813: CALL_OW 274
30817: PPUSH
30818: LD_VAR 0 3
30822: PPUSH
30823: LD_INT 99999
30825: PPUSH
30826: CALL_OW 277
30830: GO 30805
30832: POP
30833: POP
30834: GO 30789
30836: POP
30837: POP
// end ;
30838: LD_VAR 0 1
30842: RET
// export function hHackSetLevel10 ; var i , j ; begin
30843: LD_INT 0
30845: PPUSH
30846: PPUSH
30847: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30848: LD_ADDR_VAR 0 2
30852: PUSH
30853: LD_INT 21
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PPUSH
30863: CALL_OW 69
30867: PUSH
30868: FOR_IN
30869: IFFALSE 30921
// if IsSelected ( i ) then
30871: LD_VAR 0 2
30875: PPUSH
30876: CALL_OW 306
30880: IFFALSE 30919
// begin for j := 1 to 4 do
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: DOUBLE
30888: LD_INT 1
30890: DEC
30891: ST_TO_ADDR
30892: LD_INT 4
30894: PUSH
30895: FOR_TO
30896: IFFALSE 30917
// SetSkill ( i , j , 10 ) ;
30898: LD_VAR 0 2
30902: PPUSH
30903: LD_VAR 0 3
30907: PPUSH
30908: LD_INT 10
30910: PPUSH
30911: CALL_OW 237
30915: GO 30895
30917: POP
30918: POP
// end ;
30919: GO 30868
30921: POP
30922: POP
// end ;
30923: LD_VAR 0 1
30927: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30928: LD_INT 0
30930: PPUSH
30931: PPUSH
30932: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30933: LD_ADDR_VAR 0 2
30937: PUSH
30938: LD_INT 22
30940: PUSH
30941: LD_OWVAR 2
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 21
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PPUSH
30964: CALL_OW 69
30968: PUSH
30969: FOR_IN
30970: IFFALSE 31011
// begin for j := 1 to 4 do
30972: LD_ADDR_VAR 0 3
30976: PUSH
30977: DOUBLE
30978: LD_INT 1
30980: DEC
30981: ST_TO_ADDR
30982: LD_INT 4
30984: PUSH
30985: FOR_TO
30986: IFFALSE 31007
// SetSkill ( i , j , 10 ) ;
30988: LD_VAR 0 2
30992: PPUSH
30993: LD_VAR 0 3
30997: PPUSH
30998: LD_INT 10
31000: PPUSH
31001: CALL_OW 237
31005: GO 30985
31007: POP
31008: POP
// end ;
31009: GO 30969
31011: POP
31012: POP
// end ;
31013: LD_VAR 0 1
31017: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31018: LD_INT 0
31020: PPUSH
// uc_side := your_side ;
31021: LD_ADDR_OWVAR 20
31025: PUSH
31026: LD_OWVAR 2
31030: ST_TO_ADDR
// uc_nation := nation ;
31031: LD_ADDR_OWVAR 21
31035: PUSH
31036: LD_VAR 0 1
31040: ST_TO_ADDR
// InitHc ;
31041: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31045: LD_INT 0
31047: PPUSH
31048: LD_VAR 0 2
31052: PPUSH
31053: LD_VAR 0 3
31057: PPUSH
31058: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31062: LD_VAR 0 4
31066: PPUSH
31067: LD_VAR 0 5
31071: PPUSH
31072: CALL_OW 428
31076: PUSH
31077: LD_INT 0
31079: EQUAL
31080: IFFALSE 31104
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31082: CALL_OW 44
31086: PPUSH
31087: LD_VAR 0 4
31091: PPUSH
31092: LD_VAR 0 5
31096: PPUSH
31097: LD_INT 1
31099: PPUSH
31100: CALL_OW 48
// end ;
31104: LD_VAR 0 6
31108: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31109: LD_INT 0
31111: PPUSH
31112: PPUSH
// uc_side := your_side ;
31113: LD_ADDR_OWVAR 20
31117: PUSH
31118: LD_OWVAR 2
31122: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31123: LD_VAR 0 1
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: LD_INT 4
31139: PUSH
31140: LD_INT 5
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: IN
31150: IFFALSE 31162
// uc_nation := nation_american else
31152: LD_ADDR_OWVAR 21
31156: PUSH
31157: LD_INT 1
31159: ST_TO_ADDR
31160: GO 31205
// if chassis in [ 11 , 12 , 13 , 14 ] then
31162: LD_VAR 0 1
31166: PUSH
31167: LD_INT 11
31169: PUSH
31170: LD_INT 12
31172: PUSH
31173: LD_INT 13
31175: PUSH
31176: LD_INT 14
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: IN
31185: IFFALSE 31197
// uc_nation := nation_arabian else
31187: LD_ADDR_OWVAR 21
31191: PUSH
31192: LD_INT 2
31194: ST_TO_ADDR
31195: GO 31205
// uc_nation := nation_russian ;
31197: LD_ADDR_OWVAR 21
31201: PUSH
31202: LD_INT 3
31204: ST_TO_ADDR
// vc_chassis := chassis ;
31205: LD_ADDR_OWVAR 37
31209: PUSH
31210: LD_VAR 0 1
31214: ST_TO_ADDR
// vc_engine := engine ;
31215: LD_ADDR_OWVAR 39
31219: PUSH
31220: LD_VAR 0 2
31224: ST_TO_ADDR
// vc_control := control ;
31225: LD_ADDR_OWVAR 38
31229: PUSH
31230: LD_VAR 0 3
31234: ST_TO_ADDR
// vc_weapon := weapon ;
31235: LD_ADDR_OWVAR 40
31239: PUSH
31240: LD_VAR 0 4
31244: ST_TO_ADDR
// un := CreateVehicle ;
31245: LD_ADDR_VAR 0 8
31249: PUSH
31250: CALL_OW 45
31254: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31255: LD_VAR 0 8
31259: PPUSH
31260: LD_INT 0
31262: PPUSH
31263: LD_INT 5
31265: PPUSH
31266: CALL_OW 12
31270: PPUSH
31271: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_VAR 0 5
31284: PPUSH
31285: LD_VAR 0 6
31289: PPUSH
31290: LD_INT 1
31292: PPUSH
31293: CALL_OW 48
// end ;
31297: LD_VAR 0 7
31301: RET
// export hInvincible ; every 1 do
31302: GO 31304
31304: DISABLE
// hInvincible := [ ] ;
31305: LD_ADDR_EXP 120
31309: PUSH
31310: EMPTY
31311: ST_TO_ADDR
31312: END
// every 10 do var i ;
31313: GO 31315
31315: DISABLE
31316: LD_INT 0
31318: PPUSH
// begin enable ;
31319: ENABLE
// if not hInvincible then
31320: LD_EXP 120
31324: NOT
31325: IFFALSE 31329
// exit ;
31327: GO 31373
// for i in hInvincible do
31329: LD_ADDR_VAR 0 1
31333: PUSH
31334: LD_EXP 120
31338: PUSH
31339: FOR_IN
31340: IFFALSE 31371
// if GetLives ( i ) < 1000 then
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 256
31351: PUSH
31352: LD_INT 1000
31354: LESS
31355: IFFALSE 31369
// SetLives ( i , 1000 ) ;
31357: LD_VAR 0 1
31361: PPUSH
31362: LD_INT 1000
31364: PPUSH
31365: CALL_OW 234
31369: GO 31339
31371: POP
31372: POP
// end ;
31373: PPOPN 1
31375: END
// export function hHackInvincible ; var i ; begin
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31380: LD_ADDR_VAR 0 2
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 21
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 21
31400: PUSH
31401: LD_INT 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: PPUSH
31413: CALL_OW 69
31417: PUSH
31418: FOR_IN
31419: IFFALSE 31480
// if IsSelected ( i ) then
31421: LD_VAR 0 2
31425: PPUSH
31426: CALL_OW 306
31430: IFFALSE 31478
// begin if i in hInvincible then
31432: LD_VAR 0 2
31436: PUSH
31437: LD_EXP 120
31441: IN
31442: IFFALSE 31462
// hInvincible := hInvincible diff i else
31444: LD_ADDR_EXP 120
31448: PUSH
31449: LD_EXP 120
31453: PUSH
31454: LD_VAR 0 2
31458: DIFF
31459: ST_TO_ADDR
31460: GO 31478
// hInvincible := hInvincible union i ;
31462: LD_ADDR_EXP 120
31466: PUSH
31467: LD_EXP 120
31471: PUSH
31472: LD_VAR 0 2
31476: UNION
31477: ST_TO_ADDR
// end ;
31478: GO 31418
31480: POP
31481: POP
// end ;
31482: LD_VAR 0 1
31486: RET
// export function hHackInvisible ; var i , j ; begin
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
31491: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31492: LD_ADDR_VAR 0 2
31496: PUSH
31497: LD_INT 21
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PPUSH
31507: CALL_OW 69
31511: PUSH
31512: FOR_IN
31513: IFFALSE 31537
// if IsSelected ( i ) then
31515: LD_VAR 0 2
31519: PPUSH
31520: CALL_OW 306
31524: IFFALSE 31535
// ComForceInvisible ( i ) ;
31526: LD_VAR 0 2
31530: PPUSH
31531: CALL_OW 496
31535: GO 31512
31537: POP
31538: POP
// end ;
31539: LD_VAR 0 1
31543: RET
// export function hHackChangeYourSide ; begin
31544: LD_INT 0
31546: PPUSH
// if your_side = 8 then
31547: LD_OWVAR 2
31551: PUSH
31552: LD_INT 8
31554: EQUAL
31555: IFFALSE 31567
// your_side := 0 else
31557: LD_ADDR_OWVAR 2
31561: PUSH
31562: LD_INT 0
31564: ST_TO_ADDR
31565: GO 31581
// your_side := your_side + 1 ;
31567: LD_ADDR_OWVAR 2
31571: PUSH
31572: LD_OWVAR 2
31576: PUSH
31577: LD_INT 1
31579: PLUS
31580: ST_TO_ADDR
// end ;
31581: LD_VAR 0 1
31585: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31586: LD_INT 0
31588: PPUSH
31589: PPUSH
31590: PPUSH
// for i in all_units do
31591: LD_ADDR_VAR 0 2
31595: PUSH
31596: LD_OWVAR 3
31600: PUSH
31601: FOR_IN
31602: IFFALSE 31680
// if IsSelected ( i ) then
31604: LD_VAR 0 2
31608: PPUSH
31609: CALL_OW 306
31613: IFFALSE 31678
// begin j := GetSide ( i ) ;
31615: LD_ADDR_VAR 0 3
31619: PUSH
31620: LD_VAR 0 2
31624: PPUSH
31625: CALL_OW 255
31629: ST_TO_ADDR
// if j = 8 then
31630: LD_VAR 0 3
31634: PUSH
31635: LD_INT 8
31637: EQUAL
31638: IFFALSE 31650
// j := 0 else
31640: LD_ADDR_VAR 0 3
31644: PUSH
31645: LD_INT 0
31647: ST_TO_ADDR
31648: GO 31664
// j := j + 1 ;
31650: LD_ADDR_VAR 0 3
31654: PUSH
31655: LD_VAR 0 3
31659: PUSH
31660: LD_INT 1
31662: PLUS
31663: ST_TO_ADDR
// SetSide ( i , j ) ;
31664: LD_VAR 0 2
31668: PPUSH
31669: LD_VAR 0 3
31673: PPUSH
31674: CALL_OW 235
// end ;
31678: GO 31601
31680: POP
31681: POP
// end ;
31682: LD_VAR 0 1
31686: RET
// export function hHackFog ; begin
31687: LD_INT 0
31689: PPUSH
// FogOff ( true ) ;
31690: LD_INT 1
31692: PPUSH
31693: CALL_OW 344
// end ;
31697: LD_VAR 0 1
31701: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31702: LD_INT 0
31704: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31705: LD_VAR 0 1
31709: PPUSH
31710: LD_VAR 0 2
31714: PPUSH
31715: LD_VAR 0 3
31719: PPUSH
31720: LD_INT 1
31722: PPUSH
31723: LD_INT 1
31725: PPUSH
31726: CALL_OW 483
// CenterOnXY ( x , y ) ;
31730: LD_VAR 0 2
31734: PPUSH
31735: LD_VAR 0 3
31739: PPUSH
31740: CALL_OW 84
// end ; end_of_file
31744: LD_VAR 0 4
31748: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
31749: LD_VAR 0 1
31753: PUSH
31754: LD_INT 200
31756: DOUBLE
31757: GREATEREQUAL
31758: IFFALSE 31766
31760: LD_INT 299
31762: DOUBLE
31763: LESSEQUAL
31764: IFTRUE 31768
31766: GO 31800
31768: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
31769: LD_VAR 0 1
31773: PPUSH
31774: LD_VAR 0 2
31778: PPUSH
31779: LD_VAR 0 3
31783: PPUSH
31784: LD_VAR 0 4
31788: PPUSH
31789: LD_VAR 0 5
31793: PPUSH
31794: CALL 31994 0 5
31798: GO 31877
31800: LD_INT 300
31802: DOUBLE
31803: GREATEREQUAL
31804: IFFALSE 31812
31806: LD_INT 399
31808: DOUBLE
31809: LESSEQUAL
31810: IFTRUE 31814
31812: GO 31876
31814: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
31815: LD_VAR 0 1
31819: PPUSH
31820: LD_VAR 0 2
31824: PPUSH
31825: LD_VAR 0 3
31829: PPUSH
31830: LD_VAR 0 4
31834: PPUSH
31835: LD_VAR 0 5
31839: PPUSH
31840: LD_VAR 0 6
31844: PPUSH
31845: LD_VAR 0 7
31849: PPUSH
31850: LD_VAR 0 8
31854: PPUSH
31855: LD_VAR 0 9
31859: PPUSH
31860: LD_VAR 0 10
31864: PPUSH
31865: LD_VAR 0 11
31869: PPUSH
31870: CALL 29769 0 11
31874: GO 31877
31876: POP
// end ; end_of_file end_of_file
31877: PPOPN 11
31879: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31880: LD_INT 0
31882: PPUSH
31883: PPUSH
31884: PPUSH
31885: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31886: LD_VAR 0 1
31890: PPUSH
31891: CALL_OW 264
31895: PUSH
31896: LD_EXP 135
31900: EQUAL
31901: IFFALSE 31973
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31903: LD_INT 68
31905: PPUSH
31906: LD_VAR 0 1
31910: PPUSH
31911: CALL_OW 255
31915: PPUSH
31916: CALL_OW 321
31920: PUSH
31921: LD_INT 2
31923: EQUAL
31924: IFFALSE 31936
// eff := 70 else
31926: LD_ADDR_VAR 0 4
31930: PUSH
31931: LD_INT 70
31933: ST_TO_ADDR
31934: GO 31944
// eff := 30 ;
31936: LD_ADDR_VAR 0 4
31940: PUSH
31941: LD_INT 30
31943: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31944: LD_VAR 0 1
31948: PPUSH
31949: CALL_OW 250
31953: PPUSH
31954: LD_VAR 0 1
31958: PPUSH
31959: CALL_OW 251
31963: PPUSH
31964: LD_VAR 0 4
31968: PPUSH
31969: CALL_OW 495
// end ; end ;
31973: LD_VAR 0 2
31977: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31978: LD_INT 0
31980: PPUSH
// end ;
31981: LD_VAR 0 4
31985: RET
// export function SOS_Command ( cmd ) ; begin
31986: LD_INT 0
31988: PPUSH
// end ;
31989: LD_VAR 0 2
31993: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31994: LD_INT 0
31996: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31997: LD_VAR 0 1
32001: PUSH
32002: LD_INT 250
32004: EQUAL
32005: PUSH
32006: LD_VAR 0 2
32010: PPUSH
32011: CALL_OW 264
32015: PUSH
32016: LD_EXP 138
32020: EQUAL
32021: AND
32022: IFFALSE 32043
// MinerPlaceMine ( unit , x , y ) ;
32024: LD_VAR 0 2
32028: PPUSH
32029: LD_VAR 0 4
32033: PPUSH
32034: LD_VAR 0 5
32038: PPUSH
32039: CALL 34384 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32043: LD_VAR 0 1
32047: PUSH
32048: LD_INT 251
32050: EQUAL
32051: PUSH
32052: LD_VAR 0 2
32056: PPUSH
32057: CALL_OW 264
32061: PUSH
32062: LD_EXP 138
32066: EQUAL
32067: AND
32068: IFFALSE 32089
// MinerDetonateMine ( unit , x , y ) ;
32070: LD_VAR 0 2
32074: PPUSH
32075: LD_VAR 0 4
32079: PPUSH
32080: LD_VAR 0 5
32084: PPUSH
32085: CALL 34661 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32089: LD_VAR 0 1
32093: PUSH
32094: LD_INT 252
32096: EQUAL
32097: PUSH
32098: LD_VAR 0 2
32102: PPUSH
32103: CALL_OW 264
32107: PUSH
32108: LD_EXP 138
32112: EQUAL
32113: AND
32114: IFFALSE 32135
// MinerCreateMinefield ( unit , x , y ) ;
32116: LD_VAR 0 2
32120: PPUSH
32121: LD_VAR 0 4
32125: PPUSH
32126: LD_VAR 0 5
32130: PPUSH
32131: CALL 35078 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32135: LD_VAR 0 1
32139: PUSH
32140: LD_INT 253
32142: EQUAL
32143: PUSH
32144: LD_VAR 0 2
32148: PPUSH
32149: CALL_OW 257
32153: PUSH
32154: LD_INT 5
32156: EQUAL
32157: AND
32158: IFFALSE 32179
// ComBinocular ( unit , x , y ) ;
32160: LD_VAR 0 2
32164: PPUSH
32165: LD_VAR 0 4
32169: PPUSH
32170: LD_VAR 0 5
32174: PPUSH
32175: CALL 35449 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32179: LD_VAR 0 1
32183: PUSH
32184: LD_INT 254
32186: EQUAL
32187: PUSH
32188: LD_VAR 0 2
32192: PPUSH
32193: CALL_OW 264
32197: PUSH
32198: LD_EXP 133
32202: EQUAL
32203: AND
32204: PUSH
32205: LD_VAR 0 3
32209: PPUSH
32210: CALL_OW 263
32214: PUSH
32215: LD_INT 3
32217: EQUAL
32218: AND
32219: IFFALSE 32235
// HackDestroyVehicle ( unit , selectedUnit ) ;
32221: LD_VAR 0 2
32225: PPUSH
32226: LD_VAR 0 3
32230: PPUSH
32231: CALL 33744 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32235: LD_VAR 0 1
32239: PUSH
32240: LD_INT 255
32242: EQUAL
32243: PUSH
32244: LD_VAR 0 2
32248: PPUSH
32249: CALL_OW 264
32253: PUSH
32254: LD_INT 14
32256: PUSH
32257: LD_INT 53
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: IN
32264: AND
32265: PUSH
32266: LD_VAR 0 4
32270: PPUSH
32271: LD_VAR 0 5
32275: PPUSH
32276: CALL_OW 488
32280: AND
32281: IFFALSE 32305
// CutTreeXYR ( unit , x , y , 12 ) ;
32283: LD_VAR 0 2
32287: PPUSH
32288: LD_VAR 0 4
32292: PPUSH
32293: LD_VAR 0 5
32297: PPUSH
32298: LD_INT 12
32300: PPUSH
32301: CALL 32310 0 4
// end ;
32305: LD_VAR 0 6
32309: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32310: LD_INT 0
32312: PPUSH
32313: PPUSH
32314: PPUSH
32315: PPUSH
32316: PPUSH
32317: PPUSH
32318: PPUSH
32319: PPUSH
32320: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32321: LD_VAR 0 1
32325: NOT
32326: PUSH
32327: LD_VAR 0 2
32331: PPUSH
32332: LD_VAR 0 3
32336: PPUSH
32337: CALL_OW 488
32341: NOT
32342: OR
32343: PUSH
32344: LD_VAR 0 4
32348: NOT
32349: OR
32350: IFFALSE 32354
// exit ;
32352: GO 32694
// list := [ ] ;
32354: LD_ADDR_VAR 0 13
32358: PUSH
32359: EMPTY
32360: ST_TO_ADDR
// if x - r < 0 then
32361: LD_VAR 0 2
32365: PUSH
32366: LD_VAR 0 4
32370: MINUS
32371: PUSH
32372: LD_INT 0
32374: LESS
32375: IFFALSE 32387
// min_x := 0 else
32377: LD_ADDR_VAR 0 7
32381: PUSH
32382: LD_INT 0
32384: ST_TO_ADDR
32385: GO 32403
// min_x := x - r ;
32387: LD_ADDR_VAR 0 7
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: LD_VAR 0 4
32401: MINUS
32402: ST_TO_ADDR
// if y - r < 0 then
32403: LD_VAR 0 3
32407: PUSH
32408: LD_VAR 0 4
32412: MINUS
32413: PUSH
32414: LD_INT 0
32416: LESS
32417: IFFALSE 32429
// min_y := 0 else
32419: LD_ADDR_VAR 0 8
32423: PUSH
32424: LD_INT 0
32426: ST_TO_ADDR
32427: GO 32445
// min_y := y - r ;
32429: LD_ADDR_VAR 0 8
32433: PUSH
32434: LD_VAR 0 3
32438: PUSH
32439: LD_VAR 0 4
32443: MINUS
32444: ST_TO_ADDR
// max_x := x + r ;
32445: LD_ADDR_VAR 0 9
32449: PUSH
32450: LD_VAR 0 2
32454: PUSH
32455: LD_VAR 0 4
32459: PLUS
32460: ST_TO_ADDR
// max_y := y + r ;
32461: LD_ADDR_VAR 0 10
32465: PUSH
32466: LD_VAR 0 3
32470: PUSH
32471: LD_VAR 0 4
32475: PLUS
32476: ST_TO_ADDR
// for _x = min_x to max_x do
32477: LD_ADDR_VAR 0 11
32481: PUSH
32482: DOUBLE
32483: LD_VAR 0 7
32487: DEC
32488: ST_TO_ADDR
32489: LD_VAR 0 9
32493: PUSH
32494: FOR_TO
32495: IFFALSE 32612
// for _y = min_y to max_y do
32497: LD_ADDR_VAR 0 12
32501: PUSH
32502: DOUBLE
32503: LD_VAR 0 8
32507: DEC
32508: ST_TO_ADDR
32509: LD_VAR 0 10
32513: PUSH
32514: FOR_TO
32515: IFFALSE 32608
// begin if not ValidHex ( _x , _y ) then
32517: LD_VAR 0 11
32521: PPUSH
32522: LD_VAR 0 12
32526: PPUSH
32527: CALL_OW 488
32531: NOT
32532: IFFALSE 32536
// continue ;
32534: GO 32514
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32536: LD_VAR 0 11
32540: PPUSH
32541: LD_VAR 0 12
32545: PPUSH
32546: CALL_OW 351
32550: PUSH
32551: LD_VAR 0 11
32555: PPUSH
32556: LD_VAR 0 12
32560: PPUSH
32561: CALL_OW 554
32565: AND
32566: IFFALSE 32606
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32568: LD_ADDR_VAR 0 13
32572: PUSH
32573: LD_VAR 0 13
32577: PPUSH
32578: LD_VAR 0 13
32582: PUSH
32583: LD_INT 1
32585: PLUS
32586: PPUSH
32587: LD_VAR 0 11
32591: PUSH
32592: LD_VAR 0 12
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PPUSH
32601: CALL_OW 2
32605: ST_TO_ADDR
// end ;
32606: GO 32514
32608: POP
32609: POP
32610: GO 32494
32612: POP
32613: POP
// if not list then
32614: LD_VAR 0 13
32618: NOT
32619: IFFALSE 32623
// exit ;
32621: GO 32694
// for i in list do
32623: LD_ADDR_VAR 0 6
32627: PUSH
32628: LD_VAR 0 13
32632: PUSH
32633: FOR_IN
32634: IFFALSE 32692
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32636: LD_VAR 0 1
32640: PPUSH
32641: LD_STRING M
32643: PUSH
32644: LD_VAR 0 6
32648: PUSH
32649: LD_INT 1
32651: ARRAY
32652: PUSH
32653: LD_VAR 0 6
32657: PUSH
32658: LD_INT 2
32660: ARRAY
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: PUSH
32683: EMPTY
32684: LIST
32685: PPUSH
32686: CALL_OW 447
32690: GO 32633
32692: POP
32693: POP
// end ;
32694: LD_VAR 0 5
32698: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32699: LD_EXP 121
32703: NOT
32704: IFFALSE 32754
32706: GO 32708
32708: DISABLE
// begin initHack := true ;
32709: LD_ADDR_EXP 121
32713: PUSH
32714: LD_INT 1
32716: ST_TO_ADDR
// hackTanks := [ ] ;
32717: LD_ADDR_EXP 122
32721: PUSH
32722: EMPTY
32723: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32724: LD_ADDR_EXP 123
32728: PUSH
32729: EMPTY
32730: ST_TO_ADDR
// hackLimit := 3 ;
32731: LD_ADDR_EXP 124
32735: PUSH
32736: LD_INT 3
32738: ST_TO_ADDR
// hackDist := 12 ;
32739: LD_ADDR_EXP 125
32743: PUSH
32744: LD_INT 12
32746: ST_TO_ADDR
// hackCounter := [ ] ;
32747: LD_ADDR_EXP 126
32751: PUSH
32752: EMPTY
32753: ST_TO_ADDR
// end ;
32754: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32755: LD_EXP 121
32759: PUSH
32760: LD_INT 34
32762: PUSH
32763: LD_EXP 133
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PPUSH
32772: CALL_OW 69
32776: AND
32777: IFFALSE 33032
32779: GO 32781
32781: DISABLE
32782: LD_INT 0
32784: PPUSH
32785: PPUSH
// begin enable ;
32786: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32787: LD_ADDR_VAR 0 1
32791: PUSH
32792: LD_INT 34
32794: PUSH
32795: LD_EXP 133
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PPUSH
32804: CALL_OW 69
32808: PUSH
32809: FOR_IN
32810: IFFALSE 33030
// begin if not i in hackTanks then
32812: LD_VAR 0 1
32816: PUSH
32817: LD_EXP 122
32821: IN
32822: NOT
32823: IFFALSE 32906
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32825: LD_ADDR_EXP 122
32829: PUSH
32830: LD_EXP 122
32834: PPUSH
32835: LD_EXP 122
32839: PUSH
32840: LD_INT 1
32842: PLUS
32843: PPUSH
32844: LD_VAR 0 1
32848: PPUSH
32849: CALL_OW 1
32853: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32854: LD_ADDR_EXP 123
32858: PUSH
32859: LD_EXP 123
32863: PPUSH
32864: LD_EXP 123
32868: PUSH
32869: LD_INT 1
32871: PLUS
32872: PPUSH
32873: EMPTY
32874: PPUSH
32875: CALL_OW 1
32879: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32880: LD_ADDR_EXP 126
32884: PUSH
32885: LD_EXP 126
32889: PPUSH
32890: LD_EXP 126
32894: PUSH
32895: LD_INT 1
32897: PLUS
32898: PPUSH
32899: EMPTY
32900: PPUSH
32901: CALL_OW 1
32905: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 302
32915: NOT
32916: IFFALSE 32929
// begin HackUnlinkAll ( i ) ;
32918: LD_VAR 0 1
32922: PPUSH
32923: CALL 33035 0 1
// continue ;
32927: GO 32809
// end ; HackCheckCapturedStatus ( i ) ;
32929: LD_VAR 0 1
32933: PPUSH
32934: CALL 33478 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32938: LD_ADDR_VAR 0 2
32942: PUSH
32943: LD_INT 81
32945: PUSH
32946: LD_VAR 0 1
32950: PPUSH
32951: CALL_OW 255
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 33
32962: PUSH
32963: LD_INT 3
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 91
32972: PUSH
32973: LD_VAR 0 1
32977: PUSH
32978: LD_EXP 125
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 50
32990: PUSH
32991: EMPTY
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: PPUSH
33000: CALL_OW 69
33004: ST_TO_ADDR
// if not tmp then
33005: LD_VAR 0 2
33009: NOT
33010: IFFALSE 33014
// continue ;
33012: GO 32809
// HackLink ( i , tmp ) ;
33014: LD_VAR 0 1
33018: PPUSH
33019: LD_VAR 0 2
33023: PPUSH
33024: CALL 33171 0 2
// end ;
33028: GO 32809
33030: POP
33031: POP
// end ;
33032: PPOPN 2
33034: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33035: LD_INT 0
33037: PPUSH
33038: PPUSH
33039: PPUSH
// if not hack in hackTanks then
33040: LD_VAR 0 1
33044: PUSH
33045: LD_EXP 122
33049: IN
33050: NOT
33051: IFFALSE 33055
// exit ;
33053: GO 33166
// index := GetElementIndex ( hackTanks , hack ) ;
33055: LD_ADDR_VAR 0 4
33059: PUSH
33060: LD_EXP 122
33064: PPUSH
33065: LD_VAR 0 1
33069: PPUSH
33070: CALL 40744 0 2
33074: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33075: LD_EXP 123
33079: PUSH
33080: LD_VAR 0 4
33084: ARRAY
33085: IFFALSE 33166
// begin for i in hackTanksCaptured [ index ] do
33087: LD_ADDR_VAR 0 3
33091: PUSH
33092: LD_EXP 123
33096: PUSH
33097: LD_VAR 0 4
33101: ARRAY
33102: PUSH
33103: FOR_IN
33104: IFFALSE 33130
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33106: LD_VAR 0 3
33110: PUSH
33111: LD_INT 1
33113: ARRAY
33114: PPUSH
33115: LD_VAR 0 3
33119: PUSH
33120: LD_INT 2
33122: ARRAY
33123: PPUSH
33124: CALL_OW 235
33128: GO 33103
33130: POP
33131: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33132: LD_ADDR_EXP 123
33136: PUSH
33137: LD_EXP 123
33141: PPUSH
33142: LD_VAR 0 4
33146: PPUSH
33147: EMPTY
33148: PPUSH
33149: CALL_OW 1
33153: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33154: LD_VAR 0 1
33158: PPUSH
33159: LD_INT 0
33161: PPUSH
33162: CALL_OW 505
// end ; end ;
33166: LD_VAR 0 2
33170: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33171: LD_INT 0
33173: PPUSH
33174: PPUSH
33175: PPUSH
// if not hack in hackTanks or not vehicles then
33176: LD_VAR 0 1
33180: PUSH
33181: LD_EXP 122
33185: IN
33186: NOT
33187: PUSH
33188: LD_VAR 0 2
33192: NOT
33193: OR
33194: IFFALSE 33198
// exit ;
33196: GO 33473
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33198: LD_ADDR_VAR 0 2
33202: PUSH
33203: LD_VAR 0 1
33207: PPUSH
33208: LD_VAR 0 2
33212: PPUSH
33213: LD_INT 1
33215: PPUSH
33216: LD_INT 1
33218: PPUSH
33219: CALL 41394 0 4
33223: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33224: LD_ADDR_VAR 0 5
33228: PUSH
33229: LD_EXP 122
33233: PPUSH
33234: LD_VAR 0 1
33238: PPUSH
33239: CALL 40744 0 2
33243: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33244: LD_EXP 123
33248: PUSH
33249: LD_VAR 0 5
33253: ARRAY
33254: PUSH
33255: LD_EXP 124
33259: LESS
33260: IFFALSE 33449
// begin for i := 1 to vehicles do
33262: LD_ADDR_VAR 0 4
33266: PUSH
33267: DOUBLE
33268: LD_INT 1
33270: DEC
33271: ST_TO_ADDR
33272: LD_VAR 0 2
33276: PUSH
33277: FOR_TO
33278: IFFALSE 33447
// begin if hackTanksCaptured [ index ] = hackLimit then
33280: LD_EXP 123
33284: PUSH
33285: LD_VAR 0 5
33289: ARRAY
33290: PUSH
33291: LD_EXP 124
33295: EQUAL
33296: IFFALSE 33300
// break ;
33298: GO 33447
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33300: LD_ADDR_EXP 126
33304: PUSH
33305: LD_EXP 126
33309: PPUSH
33310: LD_VAR 0 5
33314: PPUSH
33315: LD_EXP 126
33319: PUSH
33320: LD_VAR 0 5
33324: ARRAY
33325: PUSH
33326: LD_INT 1
33328: PLUS
33329: PPUSH
33330: CALL_OW 1
33334: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33335: LD_ADDR_EXP 123
33339: PUSH
33340: LD_EXP 123
33344: PPUSH
33345: LD_VAR 0 5
33349: PUSH
33350: LD_EXP 123
33354: PUSH
33355: LD_VAR 0 5
33359: ARRAY
33360: PUSH
33361: LD_INT 1
33363: PLUS
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PPUSH
33369: LD_VAR 0 2
33373: PUSH
33374: LD_VAR 0 4
33378: ARRAY
33379: PUSH
33380: LD_VAR 0 2
33384: PUSH
33385: LD_VAR 0 4
33389: ARRAY
33390: PPUSH
33391: CALL_OW 255
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PPUSH
33400: CALL 40959 0 3
33404: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33405: LD_VAR 0 2
33409: PUSH
33410: LD_VAR 0 4
33414: ARRAY
33415: PPUSH
33416: LD_VAR 0 1
33420: PPUSH
33421: CALL_OW 255
33425: PPUSH
33426: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33430: LD_VAR 0 2
33434: PUSH
33435: LD_VAR 0 4
33439: ARRAY
33440: PPUSH
33441: CALL_OW 141
// end ;
33445: GO 33277
33447: POP
33448: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33449: LD_VAR 0 1
33453: PPUSH
33454: LD_EXP 123
33458: PUSH
33459: LD_VAR 0 5
33463: ARRAY
33464: PUSH
33465: LD_INT 0
33467: PLUS
33468: PPUSH
33469: CALL_OW 505
// end ;
33473: LD_VAR 0 3
33477: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33478: LD_INT 0
33480: PPUSH
33481: PPUSH
33482: PPUSH
33483: PPUSH
// if not hack in hackTanks then
33484: LD_VAR 0 1
33488: PUSH
33489: LD_EXP 122
33493: IN
33494: NOT
33495: IFFALSE 33499
// exit ;
33497: GO 33739
// index := GetElementIndex ( hackTanks , hack ) ;
33499: LD_ADDR_VAR 0 4
33503: PUSH
33504: LD_EXP 122
33508: PPUSH
33509: LD_VAR 0 1
33513: PPUSH
33514: CALL 40744 0 2
33518: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: DOUBLE
33525: LD_EXP 123
33529: PUSH
33530: LD_VAR 0 4
33534: ARRAY
33535: INC
33536: ST_TO_ADDR
33537: LD_INT 1
33539: PUSH
33540: FOR_DOWNTO
33541: IFFALSE 33713
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33543: LD_ADDR_VAR 0 5
33547: PUSH
33548: LD_EXP 123
33552: PUSH
33553: LD_VAR 0 4
33557: ARRAY
33558: PUSH
33559: LD_VAR 0 3
33563: ARRAY
33564: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33565: LD_VAR 0 5
33569: PUSH
33570: LD_INT 1
33572: ARRAY
33573: PPUSH
33574: CALL_OW 302
33578: NOT
33579: PUSH
33580: LD_VAR 0 5
33584: PUSH
33585: LD_INT 1
33587: ARRAY
33588: PPUSH
33589: CALL_OW 255
33593: PUSH
33594: LD_VAR 0 1
33598: PPUSH
33599: CALL_OW 255
33603: NONEQUAL
33604: OR
33605: IFFALSE 33711
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33607: LD_VAR 0 5
33611: PUSH
33612: LD_INT 1
33614: ARRAY
33615: PPUSH
33616: CALL_OW 305
33620: PUSH
33621: LD_VAR 0 5
33625: PUSH
33626: LD_INT 1
33628: ARRAY
33629: PPUSH
33630: CALL_OW 255
33634: PUSH
33635: LD_VAR 0 1
33639: PPUSH
33640: CALL_OW 255
33644: EQUAL
33645: AND
33646: IFFALSE 33670
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33648: LD_VAR 0 5
33652: PUSH
33653: LD_INT 1
33655: ARRAY
33656: PPUSH
33657: LD_VAR 0 5
33661: PUSH
33662: LD_INT 2
33664: ARRAY
33665: PPUSH
33666: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33670: LD_ADDR_EXP 123
33674: PUSH
33675: LD_EXP 123
33679: PPUSH
33680: LD_VAR 0 4
33684: PPUSH
33685: LD_EXP 123
33689: PUSH
33690: LD_VAR 0 4
33694: ARRAY
33695: PPUSH
33696: LD_VAR 0 3
33700: PPUSH
33701: CALL_OW 3
33705: PPUSH
33706: CALL_OW 1
33710: ST_TO_ADDR
// end ; end ;
33711: GO 33540
33713: POP
33714: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33715: LD_VAR 0 1
33719: PPUSH
33720: LD_EXP 123
33724: PUSH
33725: LD_VAR 0 4
33729: ARRAY
33730: PUSH
33731: LD_INT 0
33733: PLUS
33734: PPUSH
33735: CALL_OW 505
// end ;
33739: LD_VAR 0 2
33743: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33744: LD_INT 0
33746: PPUSH
33747: PPUSH
33748: PPUSH
33749: PPUSH
// if not hack in hackTanks then
33750: LD_VAR 0 1
33754: PUSH
33755: LD_EXP 122
33759: IN
33760: NOT
33761: IFFALSE 33765
// exit ;
33763: GO 33850
// index := GetElementIndex ( hackTanks , hack ) ;
33765: LD_ADDR_VAR 0 5
33769: PUSH
33770: LD_EXP 122
33774: PPUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL 40744 0 2
33784: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33785: LD_ADDR_VAR 0 4
33789: PUSH
33790: DOUBLE
33791: LD_INT 1
33793: DEC
33794: ST_TO_ADDR
33795: LD_EXP 123
33799: PUSH
33800: LD_VAR 0 5
33804: ARRAY
33805: PUSH
33806: FOR_TO
33807: IFFALSE 33848
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33809: LD_EXP 123
33813: PUSH
33814: LD_VAR 0 5
33818: ARRAY
33819: PUSH
33820: LD_VAR 0 4
33824: ARRAY
33825: PUSH
33826: LD_INT 1
33828: ARRAY
33829: PUSH
33830: LD_VAR 0 2
33834: EQUAL
33835: IFFALSE 33846
// KillUnit ( vehicle ) ;
33837: LD_VAR 0 2
33841: PPUSH
33842: CALL_OW 66
33846: GO 33806
33848: POP
33849: POP
// end ;
33850: LD_VAR 0 3
33854: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33855: LD_EXP 127
33859: NOT
33860: IFFALSE 33895
33862: GO 33864
33864: DISABLE
// begin initMiner := true ;
33865: LD_ADDR_EXP 127
33869: PUSH
33870: LD_INT 1
33872: ST_TO_ADDR
// minersList := [ ] ;
33873: LD_ADDR_EXP 128
33877: PUSH
33878: EMPTY
33879: ST_TO_ADDR
// minerMinesList := [ ] ;
33880: LD_ADDR_EXP 129
33884: PUSH
33885: EMPTY
33886: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33887: LD_ADDR_EXP 130
33891: PUSH
33892: LD_INT 5
33894: ST_TO_ADDR
// end ;
33895: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33896: LD_EXP 127
33900: PUSH
33901: LD_INT 34
33903: PUSH
33904: LD_EXP 138
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PPUSH
33913: CALL_OW 69
33917: AND
33918: IFFALSE 34381
33920: GO 33922
33922: DISABLE
33923: LD_INT 0
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
// begin enable ;
33929: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33930: LD_ADDR_VAR 0 1
33934: PUSH
33935: LD_INT 34
33937: PUSH
33938: LD_EXP 138
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PPUSH
33947: CALL_OW 69
33951: PUSH
33952: FOR_IN
33953: IFFALSE 34025
// begin if not i in minersList then
33955: LD_VAR 0 1
33959: PUSH
33960: LD_EXP 128
33964: IN
33965: NOT
33966: IFFALSE 34023
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33968: LD_ADDR_EXP 128
33972: PUSH
33973: LD_EXP 128
33977: PPUSH
33978: LD_EXP 128
33982: PUSH
33983: LD_INT 1
33985: PLUS
33986: PPUSH
33987: LD_VAR 0 1
33991: PPUSH
33992: CALL_OW 1
33996: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33997: LD_ADDR_EXP 129
34001: PUSH
34002: LD_EXP 129
34006: PPUSH
34007: LD_EXP 129
34011: PUSH
34012: LD_INT 1
34014: PLUS
34015: PPUSH
34016: EMPTY
34017: PPUSH
34018: CALL_OW 1
34022: ST_TO_ADDR
// end end ;
34023: GO 33952
34025: POP
34026: POP
// for i := minerMinesList downto 1 do
34027: LD_ADDR_VAR 0 1
34031: PUSH
34032: DOUBLE
34033: LD_EXP 129
34037: INC
34038: ST_TO_ADDR
34039: LD_INT 1
34041: PUSH
34042: FOR_DOWNTO
34043: IFFALSE 34379
// begin if IsLive ( minersList [ i ] ) then
34045: LD_EXP 128
34049: PUSH
34050: LD_VAR 0 1
34054: ARRAY
34055: PPUSH
34056: CALL_OW 300
34060: IFFALSE 34088
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34062: LD_EXP 128
34066: PUSH
34067: LD_VAR 0 1
34071: ARRAY
34072: PPUSH
34073: LD_EXP 129
34077: PUSH
34078: LD_VAR 0 1
34082: ARRAY
34083: PPUSH
34084: CALL_OW 505
// if not minerMinesList [ i ] then
34088: LD_EXP 129
34092: PUSH
34093: LD_VAR 0 1
34097: ARRAY
34098: NOT
34099: IFFALSE 34103
// continue ;
34101: GO 34042
// for j := minerMinesList [ i ] downto 1 do
34103: LD_ADDR_VAR 0 2
34107: PUSH
34108: DOUBLE
34109: LD_EXP 129
34113: PUSH
34114: LD_VAR 0 1
34118: ARRAY
34119: INC
34120: ST_TO_ADDR
34121: LD_INT 1
34123: PUSH
34124: FOR_DOWNTO
34125: IFFALSE 34375
// begin side := GetSide ( minersList [ i ] ) ;
34127: LD_ADDR_VAR 0 3
34131: PUSH
34132: LD_EXP 128
34136: PUSH
34137: LD_VAR 0 1
34141: ARRAY
34142: PPUSH
34143: CALL_OW 255
34147: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34148: LD_ADDR_VAR 0 4
34152: PUSH
34153: LD_EXP 129
34157: PUSH
34158: LD_VAR 0 1
34162: ARRAY
34163: PUSH
34164: LD_VAR 0 2
34168: ARRAY
34169: PUSH
34170: LD_INT 1
34172: ARRAY
34173: PPUSH
34174: LD_EXP 129
34178: PUSH
34179: LD_VAR 0 1
34183: ARRAY
34184: PUSH
34185: LD_VAR 0 2
34189: ARRAY
34190: PUSH
34191: LD_INT 2
34193: ARRAY
34194: PPUSH
34195: CALL_OW 428
34199: ST_TO_ADDR
// if not tmp then
34200: LD_VAR 0 4
34204: NOT
34205: IFFALSE 34209
// continue ;
34207: GO 34124
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34209: LD_VAR 0 4
34213: PUSH
34214: LD_INT 81
34216: PUSH
34217: LD_VAR 0 3
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PPUSH
34226: CALL_OW 69
34230: IN
34231: PUSH
34232: LD_EXP 129
34236: PUSH
34237: LD_VAR 0 1
34241: ARRAY
34242: PUSH
34243: LD_VAR 0 2
34247: ARRAY
34248: PUSH
34249: LD_INT 1
34251: ARRAY
34252: PPUSH
34253: LD_EXP 129
34257: PUSH
34258: LD_VAR 0 1
34262: ARRAY
34263: PUSH
34264: LD_VAR 0 2
34268: ARRAY
34269: PUSH
34270: LD_INT 2
34272: ARRAY
34273: PPUSH
34274: CALL_OW 458
34278: AND
34279: IFFALSE 34373
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34281: LD_EXP 129
34285: PUSH
34286: LD_VAR 0 1
34290: ARRAY
34291: PUSH
34292: LD_VAR 0 2
34296: ARRAY
34297: PUSH
34298: LD_INT 1
34300: ARRAY
34301: PPUSH
34302: LD_EXP 129
34306: PUSH
34307: LD_VAR 0 1
34311: ARRAY
34312: PUSH
34313: LD_VAR 0 2
34317: ARRAY
34318: PUSH
34319: LD_INT 2
34321: ARRAY
34322: PPUSH
34323: LD_VAR 0 3
34327: PPUSH
34328: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34332: LD_ADDR_EXP 129
34336: PUSH
34337: LD_EXP 129
34341: PPUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: LD_EXP 129
34351: PUSH
34352: LD_VAR 0 1
34356: ARRAY
34357: PPUSH
34358: LD_VAR 0 2
34362: PPUSH
34363: CALL_OW 3
34367: PPUSH
34368: CALL_OW 1
34372: ST_TO_ADDR
// end ; end ;
34373: GO 34124
34375: POP
34376: POP
// end ;
34377: GO 34042
34379: POP
34380: POP
// end ;
34381: PPOPN 4
34383: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34384: LD_INT 0
34386: PPUSH
34387: PPUSH
// result := false ;
34388: LD_ADDR_VAR 0 4
34392: PUSH
34393: LD_INT 0
34395: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34396: LD_VAR 0 1
34400: PPUSH
34401: CALL_OW 264
34405: PUSH
34406: LD_EXP 138
34410: EQUAL
34411: NOT
34412: IFFALSE 34416
// exit ;
34414: GO 34656
// index := GetElementIndex ( minersList , unit ) ;
34416: LD_ADDR_VAR 0 5
34420: PUSH
34421: LD_EXP 128
34425: PPUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL 40744 0 2
34435: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34436: LD_EXP 129
34440: PUSH
34441: LD_VAR 0 5
34445: ARRAY
34446: PUSH
34447: LD_EXP 130
34451: GREATEREQUAL
34452: IFFALSE 34456
// exit ;
34454: GO 34656
// ComMoveXY ( unit , x , y ) ;
34456: LD_VAR 0 1
34460: PPUSH
34461: LD_VAR 0 2
34465: PPUSH
34466: LD_VAR 0 3
34470: PPUSH
34471: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34475: LD_INT 35
34477: PPUSH
34478: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34482: LD_VAR 0 1
34486: PPUSH
34487: LD_VAR 0 2
34491: PPUSH
34492: LD_VAR 0 3
34496: PPUSH
34497: CALL 70808 0 3
34501: NOT
34502: PUSH
34503: LD_VAR 0 1
34507: PPUSH
34508: CALL_OW 314
34512: AND
34513: IFFALSE 34517
// exit ;
34515: GO 34656
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34517: LD_VAR 0 2
34521: PPUSH
34522: LD_VAR 0 3
34526: PPUSH
34527: CALL_OW 428
34531: PUSH
34532: LD_VAR 0 1
34536: EQUAL
34537: PUSH
34538: LD_VAR 0 1
34542: PPUSH
34543: CALL_OW 314
34547: NOT
34548: AND
34549: IFFALSE 34475
// PlaySoundXY ( x , y , PlantMine ) ;
34551: LD_VAR 0 2
34555: PPUSH
34556: LD_VAR 0 3
34560: PPUSH
34561: LD_STRING PlantMine
34563: PPUSH
34564: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34568: LD_VAR 0 2
34572: PPUSH
34573: LD_VAR 0 3
34577: PPUSH
34578: LD_VAR 0 1
34582: PPUSH
34583: CALL_OW 255
34587: PPUSH
34588: LD_INT 0
34590: PPUSH
34591: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34595: LD_ADDR_EXP 129
34599: PUSH
34600: LD_EXP 129
34604: PPUSH
34605: LD_VAR 0 5
34609: PUSH
34610: LD_EXP 129
34614: PUSH
34615: LD_VAR 0 5
34619: ARRAY
34620: PUSH
34621: LD_INT 1
34623: PLUS
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PPUSH
34629: LD_VAR 0 2
34633: PUSH
34634: LD_VAR 0 3
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PPUSH
34643: CALL 40959 0 3
34647: ST_TO_ADDR
// result := true ;
34648: LD_ADDR_VAR 0 4
34652: PUSH
34653: LD_INT 1
34655: ST_TO_ADDR
// end ;
34656: LD_VAR 0 4
34660: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34661: LD_INT 0
34663: PPUSH
34664: PPUSH
34665: PPUSH
// if not unit in minersList then
34666: LD_VAR 0 1
34670: PUSH
34671: LD_EXP 128
34675: IN
34676: NOT
34677: IFFALSE 34681
// exit ;
34679: GO 35073
// index := GetElementIndex ( minersList , unit ) ;
34681: LD_ADDR_VAR 0 6
34685: PUSH
34686: LD_EXP 128
34690: PPUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL 40744 0 2
34700: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34701: LD_ADDR_VAR 0 5
34705: PUSH
34706: DOUBLE
34707: LD_EXP 129
34711: PUSH
34712: LD_VAR 0 6
34716: ARRAY
34717: INC
34718: ST_TO_ADDR
34719: LD_INT 1
34721: PUSH
34722: FOR_DOWNTO
34723: IFFALSE 34884
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34725: LD_EXP 129
34729: PUSH
34730: LD_VAR 0 6
34734: ARRAY
34735: PUSH
34736: LD_VAR 0 5
34740: ARRAY
34741: PUSH
34742: LD_INT 1
34744: ARRAY
34745: PUSH
34746: LD_VAR 0 2
34750: EQUAL
34751: PUSH
34752: LD_EXP 129
34756: PUSH
34757: LD_VAR 0 6
34761: ARRAY
34762: PUSH
34763: LD_VAR 0 5
34767: ARRAY
34768: PUSH
34769: LD_INT 2
34771: ARRAY
34772: PUSH
34773: LD_VAR 0 3
34777: EQUAL
34778: AND
34779: IFFALSE 34882
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34781: LD_EXP 129
34785: PUSH
34786: LD_VAR 0 6
34790: ARRAY
34791: PUSH
34792: LD_VAR 0 5
34796: ARRAY
34797: PUSH
34798: LD_INT 1
34800: ARRAY
34801: PPUSH
34802: LD_EXP 129
34806: PUSH
34807: LD_VAR 0 6
34811: ARRAY
34812: PUSH
34813: LD_VAR 0 5
34817: ARRAY
34818: PUSH
34819: LD_INT 2
34821: ARRAY
34822: PPUSH
34823: LD_VAR 0 1
34827: PPUSH
34828: CALL_OW 255
34832: PPUSH
34833: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34837: LD_ADDR_EXP 129
34841: PUSH
34842: LD_EXP 129
34846: PPUSH
34847: LD_VAR 0 6
34851: PPUSH
34852: LD_EXP 129
34856: PUSH
34857: LD_VAR 0 6
34861: ARRAY
34862: PPUSH
34863: LD_VAR 0 5
34867: PPUSH
34868: CALL_OW 3
34872: PPUSH
34873: CALL_OW 1
34877: ST_TO_ADDR
// exit ;
34878: POP
34879: POP
34880: GO 35073
// end ; end ;
34882: GO 34722
34884: POP
34885: POP
// for i := minerMinesList [ index ] downto 1 do
34886: LD_ADDR_VAR 0 5
34890: PUSH
34891: DOUBLE
34892: LD_EXP 129
34896: PUSH
34897: LD_VAR 0 6
34901: ARRAY
34902: INC
34903: ST_TO_ADDR
34904: LD_INT 1
34906: PUSH
34907: FOR_DOWNTO
34908: IFFALSE 35071
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34910: LD_EXP 129
34914: PUSH
34915: LD_VAR 0 6
34919: ARRAY
34920: PUSH
34921: LD_VAR 0 5
34925: ARRAY
34926: PUSH
34927: LD_INT 1
34929: ARRAY
34930: PPUSH
34931: LD_EXP 129
34935: PUSH
34936: LD_VAR 0 6
34940: ARRAY
34941: PUSH
34942: LD_VAR 0 5
34946: ARRAY
34947: PUSH
34948: LD_INT 2
34950: ARRAY
34951: PPUSH
34952: LD_VAR 0 2
34956: PPUSH
34957: LD_VAR 0 3
34961: PPUSH
34962: CALL_OW 298
34966: PUSH
34967: LD_INT 6
34969: LESS
34970: IFFALSE 35069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34972: LD_EXP 129
34976: PUSH
34977: LD_VAR 0 6
34981: ARRAY
34982: PUSH
34983: LD_VAR 0 5
34987: ARRAY
34988: PUSH
34989: LD_INT 1
34991: ARRAY
34992: PPUSH
34993: LD_EXP 129
34997: PUSH
34998: LD_VAR 0 6
35002: ARRAY
35003: PUSH
35004: LD_VAR 0 5
35008: ARRAY
35009: PUSH
35010: LD_INT 2
35012: ARRAY
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 255
35023: PPUSH
35024: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35028: LD_ADDR_EXP 129
35032: PUSH
35033: LD_EXP 129
35037: PPUSH
35038: LD_VAR 0 6
35042: PPUSH
35043: LD_EXP 129
35047: PUSH
35048: LD_VAR 0 6
35052: ARRAY
35053: PPUSH
35054: LD_VAR 0 5
35058: PPUSH
35059: CALL_OW 3
35063: PPUSH
35064: CALL_OW 1
35068: ST_TO_ADDR
// end ; end ;
35069: GO 34907
35071: POP
35072: POP
// end ;
35073: LD_VAR 0 4
35077: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35078: LD_INT 0
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
35088: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35089: LD_VAR 0 1
35093: PPUSH
35094: CALL_OW 264
35098: PUSH
35099: LD_EXP 138
35103: EQUAL
35104: NOT
35105: PUSH
35106: LD_VAR 0 1
35110: PUSH
35111: LD_EXP 128
35115: IN
35116: NOT
35117: OR
35118: IFFALSE 35122
// exit ;
35120: GO 35444
// index := GetElementIndex ( minersList , unit ) ;
35122: LD_ADDR_VAR 0 6
35126: PUSH
35127: LD_EXP 128
35131: PPUSH
35132: LD_VAR 0 1
35136: PPUSH
35137: CALL 40744 0 2
35141: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35142: LD_ADDR_VAR 0 8
35146: PUSH
35147: LD_EXP 130
35151: PUSH
35152: LD_EXP 129
35156: PUSH
35157: LD_VAR 0 6
35161: ARRAY
35162: MINUS
35163: ST_TO_ADDR
// if not minesFreeAmount then
35164: LD_VAR 0 8
35168: NOT
35169: IFFALSE 35173
// exit ;
35171: GO 35444
// tmp := [ ] ;
35173: LD_ADDR_VAR 0 7
35177: PUSH
35178: EMPTY
35179: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35180: LD_ADDR_VAR 0 5
35184: PUSH
35185: DOUBLE
35186: LD_INT 1
35188: DEC
35189: ST_TO_ADDR
35190: LD_VAR 0 8
35194: PUSH
35195: FOR_TO
35196: IFFALSE 35391
// begin _d := rand ( 0 , 5 ) ;
35198: LD_ADDR_VAR 0 11
35202: PUSH
35203: LD_INT 0
35205: PPUSH
35206: LD_INT 5
35208: PPUSH
35209: CALL_OW 12
35213: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35214: LD_ADDR_VAR 0 12
35218: PUSH
35219: LD_INT 2
35221: PPUSH
35222: LD_INT 6
35224: PPUSH
35225: CALL_OW 12
35229: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35230: LD_ADDR_VAR 0 9
35234: PUSH
35235: LD_VAR 0 2
35239: PPUSH
35240: LD_VAR 0 11
35244: PPUSH
35245: LD_VAR 0 12
35249: PPUSH
35250: CALL_OW 272
35254: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35255: LD_ADDR_VAR 0 10
35259: PUSH
35260: LD_VAR 0 3
35264: PPUSH
35265: LD_VAR 0 11
35269: PPUSH
35270: LD_VAR 0 12
35274: PPUSH
35275: CALL_OW 273
35279: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35280: LD_VAR 0 9
35284: PPUSH
35285: LD_VAR 0 10
35289: PPUSH
35290: CALL_OW 488
35294: PUSH
35295: LD_VAR 0 9
35299: PUSH
35300: LD_VAR 0 10
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_VAR 0 7
35313: IN
35314: NOT
35315: AND
35316: PUSH
35317: LD_VAR 0 9
35321: PPUSH
35322: LD_VAR 0 10
35326: PPUSH
35327: CALL_OW 458
35331: NOT
35332: AND
35333: IFFALSE 35375
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35335: LD_ADDR_VAR 0 7
35339: PUSH
35340: LD_VAR 0 7
35344: PPUSH
35345: LD_VAR 0 7
35349: PUSH
35350: LD_INT 1
35352: PLUS
35353: PPUSH
35354: LD_VAR 0 9
35358: PUSH
35359: LD_VAR 0 10
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PPUSH
35368: CALL_OW 1
35372: ST_TO_ADDR
35373: GO 35389
// i := i - 1 ;
35375: LD_ADDR_VAR 0 5
35379: PUSH
35380: LD_VAR 0 5
35384: PUSH
35385: LD_INT 1
35387: MINUS
35388: ST_TO_ADDR
// end ;
35389: GO 35195
35391: POP
35392: POP
// for i in tmp do
35393: LD_ADDR_VAR 0 5
35397: PUSH
35398: LD_VAR 0 7
35402: PUSH
35403: FOR_IN
35404: IFFALSE 35442
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35406: LD_VAR 0 1
35410: PPUSH
35411: LD_VAR 0 5
35415: PUSH
35416: LD_INT 1
35418: ARRAY
35419: PPUSH
35420: LD_VAR 0 5
35424: PUSH
35425: LD_INT 2
35427: ARRAY
35428: PPUSH
35429: CALL 34384 0 3
35433: NOT
35434: IFFALSE 35440
// exit ;
35436: POP
35437: POP
35438: GO 35444
35440: GO 35403
35442: POP
35443: POP
// end ;
35444: LD_VAR 0 4
35448: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35449: LD_INT 0
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
// if not GetClass ( unit ) = class_sniper then
35458: LD_VAR 0 1
35462: PPUSH
35463: CALL_OW 257
35467: PUSH
35468: LD_INT 5
35470: EQUAL
35471: NOT
35472: IFFALSE 35476
// exit ;
35474: GO 35864
// dist := 8 ;
35476: LD_ADDR_VAR 0 5
35480: PUSH
35481: LD_INT 8
35483: ST_TO_ADDR
// viewRange := 12 ;
35484: LD_ADDR_VAR 0 7
35488: PUSH
35489: LD_INT 12
35491: ST_TO_ADDR
// side := GetSide ( unit ) ;
35492: LD_ADDR_VAR 0 6
35496: PUSH
35497: LD_VAR 0 1
35501: PPUSH
35502: CALL_OW 255
35506: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35507: LD_INT 61
35509: PPUSH
35510: LD_VAR 0 6
35514: PPUSH
35515: CALL_OW 321
35519: PUSH
35520: LD_INT 2
35522: EQUAL
35523: IFFALSE 35533
// viewRange := 16 ;
35525: LD_ADDR_VAR 0 7
35529: PUSH
35530: LD_INT 16
35532: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35533: LD_VAR 0 1
35537: PPUSH
35538: LD_VAR 0 2
35542: PPUSH
35543: LD_VAR 0 3
35547: PPUSH
35548: CALL_OW 297
35552: PUSH
35553: LD_VAR 0 5
35557: GREATER
35558: IFFALSE 35637
// begin ComMoveXY ( unit , x , y ) ;
35560: LD_VAR 0 1
35564: PPUSH
35565: LD_VAR 0 2
35569: PPUSH
35570: LD_VAR 0 3
35574: PPUSH
35575: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35579: LD_INT 35
35581: PPUSH
35582: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35586: LD_VAR 0 1
35590: PPUSH
35591: LD_VAR 0 2
35595: PPUSH
35596: LD_VAR 0 3
35600: PPUSH
35601: CALL 70808 0 3
35605: NOT
35606: IFFALSE 35610
// exit ;
35608: GO 35864
// until GetDistUnitXY ( unit , x , y ) < dist ;
35610: LD_VAR 0 1
35614: PPUSH
35615: LD_VAR 0 2
35619: PPUSH
35620: LD_VAR 0 3
35624: PPUSH
35625: CALL_OW 297
35629: PUSH
35630: LD_VAR 0 5
35634: LESS
35635: IFFALSE 35579
// end ; ComTurnXY ( unit , x , y ) ;
35637: LD_VAR 0 1
35641: PPUSH
35642: LD_VAR 0 2
35646: PPUSH
35647: LD_VAR 0 3
35651: PPUSH
35652: CALL_OW 118
// wait ( 5 ) ;
35656: LD_INT 5
35658: PPUSH
35659: CALL_OW 67
// _d := GetDir ( unit ) ;
35663: LD_ADDR_VAR 0 10
35667: PUSH
35668: LD_VAR 0 1
35672: PPUSH
35673: CALL_OW 254
35677: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35678: LD_ADDR_VAR 0 8
35682: PUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: CALL_OW 250
35692: PPUSH
35693: LD_VAR 0 10
35697: PPUSH
35698: LD_VAR 0 5
35702: PPUSH
35703: CALL_OW 272
35707: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35708: LD_ADDR_VAR 0 9
35712: PUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 251
35722: PPUSH
35723: LD_VAR 0 10
35727: PPUSH
35728: LD_VAR 0 5
35732: PPUSH
35733: CALL_OW 273
35737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35738: LD_VAR 0 8
35742: PPUSH
35743: LD_VAR 0 9
35747: PPUSH
35748: CALL_OW 488
35752: NOT
35753: IFFALSE 35757
// exit ;
35755: GO 35864
// ComAnimCustom ( unit , 1 ) ;
35757: LD_VAR 0 1
35761: PPUSH
35762: LD_INT 1
35764: PPUSH
35765: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35769: LD_VAR 0 8
35773: PPUSH
35774: LD_VAR 0 9
35778: PPUSH
35779: LD_VAR 0 6
35783: PPUSH
35784: LD_VAR 0 7
35788: PPUSH
35789: CALL_OW 330
// repeat wait ( 1 ) ;
35793: LD_INT 1
35795: PPUSH
35796: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35800: LD_VAR 0 1
35804: PPUSH
35805: CALL_OW 316
35809: PUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: CALL_OW 314
35819: OR
35820: PUSH
35821: LD_VAR 0 1
35825: PPUSH
35826: CALL_OW 302
35830: NOT
35831: OR
35832: PUSH
35833: LD_VAR 0 1
35837: PPUSH
35838: CALL_OW 301
35842: OR
35843: IFFALSE 35793
// RemoveSeeing ( _x , _y , side ) ;
35845: LD_VAR 0 8
35849: PPUSH
35850: LD_VAR 0 9
35854: PPUSH
35855: LD_VAR 0 6
35859: PPUSH
35860: CALL_OW 331
// end ; end_of_file
35864: LD_VAR 0 4
35868: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
35869: LD_INT 0
35871: PPUSH
// ar_miner := 81 ;
35872: LD_ADDR_EXP 138
35876: PUSH
35877: LD_INT 81
35879: ST_TO_ADDR
// ar_crane := 88 ;
35880: LD_ADDR_EXP 137
35884: PUSH
35885: LD_INT 88
35887: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
35888: LD_ADDR_EXP 132
35892: PUSH
35893: LD_INT 89
35895: ST_TO_ADDR
// us_hack := 99 ;
35896: LD_ADDR_EXP 133
35900: PUSH
35901: LD_INT 99
35903: ST_TO_ADDR
// us_artillery := 97 ;
35904: LD_ADDR_EXP 134
35908: PUSH
35909: LD_INT 97
35911: ST_TO_ADDR
// ar_bio_bomb := 91 ;
35912: LD_ADDR_EXP 135
35916: PUSH
35917: LD_INT 91
35919: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
35920: LD_ADDR_EXP 136
35924: PUSH
35925: LD_INT 92
35927: ST_TO_ADDR
// ru_radar := 98 ;
35928: LD_ADDR_EXP 131
35932: PUSH
35933: LD_INT 98
35935: ST_TO_ADDR
// tech_Artillery := 80 ;
35936: LD_ADDR_EXP 139
35940: PUSH
35941: LD_INT 80
35943: ST_TO_ADDR
// tech_RadMat := 81 ;
35944: LD_ADDR_EXP 140
35948: PUSH
35949: LD_INT 81
35951: ST_TO_ADDR
// tech_BasicTools := 82 ;
35952: LD_ADDR_EXP 141
35956: PUSH
35957: LD_INT 82
35959: ST_TO_ADDR
// tech_Cargo := 83 ;
35960: LD_ADDR_EXP 142
35964: PUSH
35965: LD_INT 83
35967: ST_TO_ADDR
// tech_Track := 84 ;
35968: LD_ADDR_EXP 143
35972: PUSH
35973: LD_INT 84
35975: ST_TO_ADDR
// tech_Crane := 85 ;
35976: LD_ADDR_EXP 144
35980: PUSH
35981: LD_INT 85
35983: ST_TO_ADDR
// tech_Bulldozer := 86 ;
35984: LD_ADDR_EXP 145
35988: PUSH
35989: LD_INT 86
35991: ST_TO_ADDR
// tech_Hovercraft := 87 ;
35992: LD_ADDR_EXP 146
35996: PUSH
35997: LD_INT 87
35999: ST_TO_ADDR
// end ;
36000: LD_VAR 0 1
36004: RET
// every 1 do
36005: GO 36007
36007: DISABLE
// InitGlobalVariables ; end_of_file
36008: CALL 35869 0 0
36012: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36013: LD_INT 0
36015: PPUSH
36016: PPUSH
// if exist_mode then
36017: LD_VAR 0 2
36021: IFFALSE 36046
// unit := CreateCharacter ( prefix & ident ) else
36023: LD_ADDR_VAR 0 5
36027: PUSH
36028: LD_VAR 0 3
36032: PUSH
36033: LD_VAR 0 1
36037: STR
36038: PPUSH
36039: CALL_OW 34
36043: ST_TO_ADDR
36044: GO 36061
// unit := NewCharacter ( ident ) ;
36046: LD_ADDR_VAR 0 5
36050: PUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: CALL_OW 25
36060: ST_TO_ADDR
// result := unit ;
36061: LD_ADDR_VAR 0 4
36065: PUSH
36066: LD_VAR 0 5
36070: ST_TO_ADDR
// end ;
36071: LD_VAR 0 4
36075: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36076: LD_INT 0
36078: PPUSH
36079: PPUSH
// if not side or not nation then
36080: LD_VAR 0 1
36084: NOT
36085: PUSH
36086: LD_VAR 0 2
36090: NOT
36091: OR
36092: IFFALSE 36096
// exit ;
36094: GO 36860
// case nation of nation_american :
36096: LD_VAR 0 2
36100: PUSH
36101: LD_INT 1
36103: DOUBLE
36104: EQUAL
36105: IFTRUE 36109
36107: GO 36323
36109: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36110: LD_ADDR_VAR 0 4
36114: PUSH
36115: LD_INT 35
36117: PUSH
36118: LD_INT 45
36120: PUSH
36121: LD_INT 46
36123: PUSH
36124: LD_INT 47
36126: PUSH
36127: LD_INT 82
36129: PUSH
36130: LD_INT 83
36132: PUSH
36133: LD_INT 84
36135: PUSH
36136: LD_INT 85
36138: PUSH
36139: LD_INT 86
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 2
36147: PUSH
36148: LD_INT 6
36150: PUSH
36151: LD_INT 15
36153: PUSH
36154: LD_INT 16
36156: PUSH
36157: LD_INT 7
36159: PUSH
36160: LD_INT 12
36162: PUSH
36163: LD_INT 13
36165: PUSH
36166: LD_INT 10
36168: PUSH
36169: LD_INT 14
36171: PUSH
36172: LD_INT 20
36174: PUSH
36175: LD_INT 21
36177: PUSH
36178: LD_INT 22
36180: PUSH
36181: LD_INT 25
36183: PUSH
36184: LD_INT 32
36186: PUSH
36187: LD_INT 27
36189: PUSH
36190: LD_INT 36
36192: PUSH
36193: LD_INT 69
36195: PUSH
36196: LD_INT 39
36198: PUSH
36199: LD_INT 34
36201: PUSH
36202: LD_INT 40
36204: PUSH
36205: LD_INT 48
36207: PUSH
36208: LD_INT 49
36210: PUSH
36211: LD_INT 50
36213: PUSH
36214: LD_INT 51
36216: PUSH
36217: LD_INT 52
36219: PUSH
36220: LD_INT 53
36222: PUSH
36223: LD_INT 54
36225: PUSH
36226: LD_INT 55
36228: PUSH
36229: LD_INT 56
36231: PUSH
36232: LD_INT 57
36234: PUSH
36235: LD_INT 58
36237: PUSH
36238: LD_INT 59
36240: PUSH
36241: LD_INT 60
36243: PUSH
36244: LD_INT 61
36246: PUSH
36247: LD_INT 62
36249: PUSH
36250: LD_INT 80
36252: PUSH
36253: LD_INT 82
36255: PUSH
36256: LD_INT 83
36258: PUSH
36259: LD_INT 84
36261: PUSH
36262: LD_INT 85
36264: PUSH
36265: LD_INT 86
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: ST_TO_ADDR
36321: GO 36784
36323: LD_INT 2
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36331
36329: GO 36553
36331: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36332: LD_ADDR_VAR 0 4
36336: PUSH
36337: LD_INT 35
36339: PUSH
36340: LD_INT 45
36342: PUSH
36343: LD_INT 46
36345: PUSH
36346: LD_INT 47
36348: PUSH
36349: LD_INT 82
36351: PUSH
36352: LD_INT 83
36354: PUSH
36355: LD_INT 84
36357: PUSH
36358: LD_INT 85
36360: PUSH
36361: LD_INT 87
36363: PUSH
36364: LD_INT 70
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: LD_INT 11
36372: PUSH
36373: LD_INT 3
36375: PUSH
36376: LD_INT 4
36378: PUSH
36379: LD_INT 5
36381: PUSH
36382: LD_INT 6
36384: PUSH
36385: LD_INT 15
36387: PUSH
36388: LD_INT 18
36390: PUSH
36391: LD_INT 7
36393: PUSH
36394: LD_INT 17
36396: PUSH
36397: LD_INT 8
36399: PUSH
36400: LD_INT 20
36402: PUSH
36403: LD_INT 21
36405: PUSH
36406: LD_INT 22
36408: PUSH
36409: LD_INT 72
36411: PUSH
36412: LD_INT 26
36414: PUSH
36415: LD_INT 69
36417: PUSH
36418: LD_INT 39
36420: PUSH
36421: LD_INT 40
36423: PUSH
36424: LD_INT 41
36426: PUSH
36427: LD_INT 42
36429: PUSH
36430: LD_INT 43
36432: PUSH
36433: LD_INT 48
36435: PUSH
36436: LD_INT 49
36438: PUSH
36439: LD_INT 50
36441: PUSH
36442: LD_INT 51
36444: PUSH
36445: LD_INT 52
36447: PUSH
36448: LD_INT 53
36450: PUSH
36451: LD_INT 54
36453: PUSH
36454: LD_INT 55
36456: PUSH
36457: LD_INT 56
36459: PUSH
36460: LD_INT 60
36462: PUSH
36463: LD_INT 61
36465: PUSH
36466: LD_INT 62
36468: PUSH
36469: LD_INT 66
36471: PUSH
36472: LD_INT 67
36474: PUSH
36475: LD_INT 68
36477: PUSH
36478: LD_INT 81
36480: PUSH
36481: LD_INT 82
36483: PUSH
36484: LD_INT 83
36486: PUSH
36487: LD_INT 84
36489: PUSH
36490: LD_INT 85
36492: PUSH
36493: LD_INT 87
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
36551: GO 36784
36553: LD_INT 3
36555: DOUBLE
36556: EQUAL
36557: IFTRUE 36561
36559: GO 36783
36561: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36562: LD_ADDR_VAR 0 4
36566: PUSH
36567: LD_INT 46
36569: PUSH
36570: LD_INT 47
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: LD_INT 82
36581: PUSH
36582: LD_INT 83
36584: PUSH
36585: LD_INT 84
36587: PUSH
36588: LD_INT 85
36590: PUSH
36591: LD_INT 86
36593: PUSH
36594: LD_INT 11
36596: PUSH
36597: LD_INT 9
36599: PUSH
36600: LD_INT 20
36602: PUSH
36603: LD_INT 19
36605: PUSH
36606: LD_INT 21
36608: PUSH
36609: LD_INT 24
36611: PUSH
36612: LD_INT 22
36614: PUSH
36615: LD_INT 25
36617: PUSH
36618: LD_INT 28
36620: PUSH
36621: LD_INT 29
36623: PUSH
36624: LD_INT 30
36626: PUSH
36627: LD_INT 31
36629: PUSH
36630: LD_INT 37
36632: PUSH
36633: LD_INT 38
36635: PUSH
36636: LD_INT 32
36638: PUSH
36639: LD_INT 27
36641: PUSH
36642: LD_INT 33
36644: PUSH
36645: LD_INT 69
36647: PUSH
36648: LD_INT 39
36650: PUSH
36651: LD_INT 34
36653: PUSH
36654: LD_INT 40
36656: PUSH
36657: LD_INT 71
36659: PUSH
36660: LD_INT 23
36662: PUSH
36663: LD_INT 44
36665: PUSH
36666: LD_INT 48
36668: PUSH
36669: LD_INT 49
36671: PUSH
36672: LD_INT 50
36674: PUSH
36675: LD_INT 51
36677: PUSH
36678: LD_INT 52
36680: PUSH
36681: LD_INT 53
36683: PUSH
36684: LD_INT 54
36686: PUSH
36687: LD_INT 55
36689: PUSH
36690: LD_INT 56
36692: PUSH
36693: LD_INT 57
36695: PUSH
36696: LD_INT 58
36698: PUSH
36699: LD_INT 59
36701: PUSH
36702: LD_INT 63
36704: PUSH
36705: LD_INT 64
36707: PUSH
36708: LD_INT 65
36710: PUSH
36711: LD_INT 82
36713: PUSH
36714: LD_INT 83
36716: PUSH
36717: LD_INT 84
36719: PUSH
36720: LD_INT 85
36722: PUSH
36723: LD_INT 86
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: ST_TO_ADDR
36781: GO 36784
36783: POP
// if state > - 1 and state < 3 then
36784: LD_VAR 0 3
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: GREATER
36793: PUSH
36794: LD_VAR 0 3
36798: PUSH
36799: LD_INT 3
36801: LESS
36802: AND
36803: IFFALSE 36860
// for i in result do
36805: LD_ADDR_VAR 0 5
36809: PUSH
36810: LD_VAR 0 4
36814: PUSH
36815: FOR_IN
36816: IFFALSE 36858
// if GetTech ( i , side ) <> state then
36818: LD_VAR 0 5
36822: PPUSH
36823: LD_VAR 0 1
36827: PPUSH
36828: CALL_OW 321
36832: PUSH
36833: LD_VAR 0 3
36837: NONEQUAL
36838: IFFALSE 36856
// result := result diff i ;
36840: LD_ADDR_VAR 0 4
36844: PUSH
36845: LD_VAR 0 4
36849: PUSH
36850: LD_VAR 0 5
36854: DIFF
36855: ST_TO_ADDR
36856: GO 36815
36858: POP
36859: POP
// end ;
36860: LD_VAR 0 4
36864: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36865: LD_INT 0
36867: PPUSH
36868: PPUSH
36869: PPUSH
// result := true ;
36870: LD_ADDR_VAR 0 3
36874: PUSH
36875: LD_INT 1
36877: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36878: LD_ADDR_VAR 0 5
36882: PUSH
36883: LD_VAR 0 2
36887: PPUSH
36888: CALL_OW 480
36892: ST_TO_ADDR
// if not tmp then
36893: LD_VAR 0 5
36897: NOT
36898: IFFALSE 36902
// exit ;
36900: GO 36951
// for i in tmp do
36902: LD_ADDR_VAR 0 4
36906: PUSH
36907: LD_VAR 0 5
36911: PUSH
36912: FOR_IN
36913: IFFALSE 36949
// if GetTech ( i , side ) <> state_researched then
36915: LD_VAR 0 4
36919: PPUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 321
36929: PUSH
36930: LD_INT 2
36932: NONEQUAL
36933: IFFALSE 36947
// begin result := false ;
36935: LD_ADDR_VAR 0 3
36939: PUSH
36940: LD_INT 0
36942: ST_TO_ADDR
// exit ;
36943: POP
36944: POP
36945: GO 36951
// end ;
36947: GO 36912
36949: POP
36950: POP
// end ;
36951: LD_VAR 0 3
36955: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36956: LD_INT 0
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36971: LD_VAR 0 1
36975: NOT
36976: PUSH
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 257
36986: PUSH
36987: LD_INT 9
36989: NONEQUAL
36990: OR
36991: IFFALSE 36995
// exit ;
36993: GO 37568
// side := GetSide ( unit ) ;
36995: LD_ADDR_VAR 0 9
36999: PUSH
37000: LD_VAR 0 1
37004: PPUSH
37005: CALL_OW 255
37009: ST_TO_ADDR
// tech_space := tech_spacanom ;
37010: LD_ADDR_VAR 0 12
37014: PUSH
37015: LD_INT 29
37017: ST_TO_ADDR
// tech_time := tech_taurad ;
37018: LD_ADDR_VAR 0 13
37022: PUSH
37023: LD_INT 28
37025: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37026: LD_ADDR_VAR 0 11
37030: PUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: CALL_OW 310
37040: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37041: LD_VAR 0 11
37045: PPUSH
37046: CALL_OW 247
37050: PUSH
37051: LD_INT 2
37053: EQUAL
37054: IFFALSE 37058
// exit ;
37056: GO 37568
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37058: LD_ADDR_VAR 0 8
37062: PUSH
37063: LD_INT 81
37065: PUSH
37066: LD_VAR 0 9
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 3
37077: PUSH
37078: LD_INT 21
37080: PUSH
37081: LD_INT 3
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PPUSH
37096: CALL_OW 69
37100: ST_TO_ADDR
// if not tmp then
37101: LD_VAR 0 8
37105: NOT
37106: IFFALSE 37110
// exit ;
37108: GO 37568
// if in_unit then
37110: LD_VAR 0 11
37114: IFFALSE 37138
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37116: LD_ADDR_VAR 0 10
37120: PUSH
37121: LD_VAR 0 8
37125: PPUSH
37126: LD_VAR 0 11
37130: PPUSH
37131: CALL_OW 74
37135: ST_TO_ADDR
37136: GO 37158
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37138: LD_ADDR_VAR 0 10
37142: PUSH
37143: LD_VAR 0 8
37147: PPUSH
37148: LD_VAR 0 1
37152: PPUSH
37153: CALL_OW 74
37157: ST_TO_ADDR
// if not enemy then
37158: LD_VAR 0 10
37162: NOT
37163: IFFALSE 37167
// exit ;
37165: GO 37568
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37167: LD_VAR 0 11
37171: PUSH
37172: LD_VAR 0 11
37176: PPUSH
37177: LD_VAR 0 10
37181: PPUSH
37182: CALL_OW 296
37186: PUSH
37187: LD_INT 13
37189: GREATER
37190: AND
37191: PUSH
37192: LD_VAR 0 1
37196: PPUSH
37197: LD_VAR 0 10
37201: PPUSH
37202: CALL_OW 296
37206: PUSH
37207: LD_INT 12
37209: GREATER
37210: OR
37211: IFFALSE 37215
// exit ;
37213: GO 37568
// missile := [ 1 ] ;
37215: LD_ADDR_VAR 0 14
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: EMPTY
37224: LIST
37225: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37226: LD_VAR 0 9
37230: PPUSH
37231: LD_VAR 0 12
37235: PPUSH
37236: CALL_OW 325
37240: IFFALSE 37269
// missile := Insert ( missile , missile + 1 , 2 ) ;
37242: LD_ADDR_VAR 0 14
37246: PUSH
37247: LD_VAR 0 14
37251: PPUSH
37252: LD_VAR 0 14
37256: PUSH
37257: LD_INT 1
37259: PLUS
37260: PPUSH
37261: LD_INT 2
37263: PPUSH
37264: CALL_OW 2
37268: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37269: LD_VAR 0 9
37273: PPUSH
37274: LD_VAR 0 13
37278: PPUSH
37279: CALL_OW 325
37283: PUSH
37284: LD_VAR 0 10
37288: PPUSH
37289: CALL_OW 255
37293: PPUSH
37294: LD_VAR 0 13
37298: PPUSH
37299: CALL_OW 325
37303: NOT
37304: AND
37305: IFFALSE 37334
// missile := Insert ( missile , missile + 1 , 3 ) ;
37307: LD_ADDR_VAR 0 14
37311: PUSH
37312: LD_VAR 0 14
37316: PPUSH
37317: LD_VAR 0 14
37321: PUSH
37322: LD_INT 1
37324: PLUS
37325: PPUSH
37326: LD_INT 3
37328: PPUSH
37329: CALL_OW 2
37333: ST_TO_ADDR
// if missile < 2 then
37334: LD_VAR 0 14
37338: PUSH
37339: LD_INT 2
37341: LESS
37342: IFFALSE 37346
// exit ;
37344: GO 37568
// x := GetX ( enemy ) ;
37346: LD_ADDR_VAR 0 4
37350: PUSH
37351: LD_VAR 0 10
37355: PPUSH
37356: CALL_OW 250
37360: ST_TO_ADDR
// y := GetY ( enemy ) ;
37361: LD_ADDR_VAR 0 5
37365: PUSH
37366: LD_VAR 0 10
37370: PPUSH
37371: CALL_OW 251
37375: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37376: LD_ADDR_VAR 0 6
37380: PUSH
37381: LD_VAR 0 4
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PPUSH
37390: LD_INT 1
37392: PPUSH
37393: CALL_OW 12
37397: PLUS
37398: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37399: LD_ADDR_VAR 0 7
37403: PUSH
37404: LD_VAR 0 5
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PPUSH
37413: LD_INT 1
37415: PPUSH
37416: CALL_OW 12
37420: PLUS
37421: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37422: LD_VAR 0 6
37426: PPUSH
37427: LD_VAR 0 7
37431: PPUSH
37432: CALL_OW 488
37436: NOT
37437: IFFALSE 37459
// begin _x := x ;
37439: LD_ADDR_VAR 0 6
37443: PUSH
37444: LD_VAR 0 4
37448: ST_TO_ADDR
// _y := y ;
37449: LD_ADDR_VAR 0 7
37453: PUSH
37454: LD_VAR 0 5
37458: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37459: LD_ADDR_VAR 0 3
37463: PUSH
37464: LD_INT 1
37466: PPUSH
37467: LD_VAR 0 14
37471: PPUSH
37472: CALL_OW 12
37476: ST_TO_ADDR
// case i of 1 :
37477: LD_VAR 0 3
37481: PUSH
37482: LD_INT 1
37484: DOUBLE
37485: EQUAL
37486: IFTRUE 37490
37488: GO 37507
37490: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37491: LD_VAR 0 1
37495: PPUSH
37496: LD_VAR 0 10
37500: PPUSH
37501: CALL_OW 115
37505: GO 37568
37507: LD_INT 2
37509: DOUBLE
37510: EQUAL
37511: IFTRUE 37515
37513: GO 37537
37515: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37516: LD_VAR 0 1
37520: PPUSH
37521: LD_VAR 0 6
37525: PPUSH
37526: LD_VAR 0 7
37530: PPUSH
37531: CALL_OW 153
37535: GO 37568
37537: LD_INT 3
37539: DOUBLE
37540: EQUAL
37541: IFTRUE 37545
37543: GO 37567
37545: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37546: LD_VAR 0 1
37550: PPUSH
37551: LD_VAR 0 6
37555: PPUSH
37556: LD_VAR 0 7
37560: PPUSH
37561: CALL_OW 154
37565: GO 37568
37567: POP
// end ;
37568: LD_VAR 0 2
37572: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37573: LD_INT 0
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
// if not unit or not building then
37581: LD_VAR 0 1
37585: NOT
37586: PUSH
37587: LD_VAR 0 2
37591: NOT
37592: OR
37593: IFFALSE 37597
// exit ;
37595: GO 37755
// x := GetX ( building ) ;
37597: LD_ADDR_VAR 0 5
37601: PUSH
37602: LD_VAR 0 2
37606: PPUSH
37607: CALL_OW 250
37611: ST_TO_ADDR
// y := GetY ( building ) ;
37612: LD_ADDR_VAR 0 6
37616: PUSH
37617: LD_VAR 0 2
37621: PPUSH
37622: CALL_OW 251
37626: ST_TO_ADDR
// for i = 0 to 5 do
37627: LD_ADDR_VAR 0 4
37631: PUSH
37632: DOUBLE
37633: LD_INT 0
37635: DEC
37636: ST_TO_ADDR
37637: LD_INT 5
37639: PUSH
37640: FOR_TO
37641: IFFALSE 37753
// begin _x := ShiftX ( x , i , 3 ) ;
37643: LD_ADDR_VAR 0 7
37647: PUSH
37648: LD_VAR 0 5
37652: PPUSH
37653: LD_VAR 0 4
37657: PPUSH
37658: LD_INT 3
37660: PPUSH
37661: CALL_OW 272
37665: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37666: LD_ADDR_VAR 0 8
37670: PUSH
37671: LD_VAR 0 6
37675: PPUSH
37676: LD_VAR 0 4
37680: PPUSH
37681: LD_INT 3
37683: PPUSH
37684: CALL_OW 273
37688: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37689: LD_VAR 0 7
37693: PPUSH
37694: LD_VAR 0 8
37698: PPUSH
37699: CALL_OW 488
37703: NOT
37704: IFFALSE 37708
// continue ;
37706: GO 37640
// if HexInfo ( _x , _y ) = 0 then
37708: LD_VAR 0 7
37712: PPUSH
37713: LD_VAR 0 8
37717: PPUSH
37718: CALL_OW 428
37722: PUSH
37723: LD_INT 0
37725: EQUAL
37726: IFFALSE 37751
// begin ComMoveXY ( unit , _x , _y ) ;
37728: LD_VAR 0 1
37732: PPUSH
37733: LD_VAR 0 7
37737: PPUSH
37738: LD_VAR 0 8
37742: PPUSH
37743: CALL_OW 111
// exit ;
37747: POP
37748: POP
37749: GO 37755
// end ; end ;
37751: GO 37640
37753: POP
37754: POP
// end ;
37755: LD_VAR 0 3
37759: RET
// export function ScanBase ( side , base_area ) ; begin
37760: LD_INT 0
37762: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37763: LD_ADDR_VAR 0 3
37767: PUSH
37768: LD_VAR 0 2
37772: PPUSH
37773: LD_INT 81
37775: PUSH
37776: LD_VAR 0 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PPUSH
37785: CALL_OW 70
37789: ST_TO_ADDR
// end ;
37790: LD_VAR 0 3
37794: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37795: LD_INT 0
37797: PPUSH
37798: PPUSH
37799: PPUSH
37800: PPUSH
// result := false ;
37801: LD_ADDR_VAR 0 2
37805: PUSH
37806: LD_INT 0
37808: ST_TO_ADDR
// side := GetSide ( unit ) ;
37809: LD_ADDR_VAR 0 3
37813: PUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 255
37823: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37824: LD_ADDR_VAR 0 4
37828: PUSH
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL_OW 248
37838: ST_TO_ADDR
// case nat of 1 :
37839: LD_VAR 0 4
37843: PUSH
37844: LD_INT 1
37846: DOUBLE
37847: EQUAL
37848: IFTRUE 37852
37850: GO 37863
37852: POP
// tech := tech_lassight ; 2 :
37853: LD_ADDR_VAR 0 5
37857: PUSH
37858: LD_INT 12
37860: ST_TO_ADDR
37861: GO 37902
37863: LD_INT 2
37865: DOUBLE
37866: EQUAL
37867: IFTRUE 37871
37869: GO 37882
37871: POP
// tech := tech_mortar ; 3 :
37872: LD_ADDR_VAR 0 5
37876: PUSH
37877: LD_INT 41
37879: ST_TO_ADDR
37880: GO 37902
37882: LD_INT 3
37884: DOUBLE
37885: EQUAL
37886: IFTRUE 37890
37888: GO 37901
37890: POP
// tech := tech_bazooka ; end ;
37891: LD_ADDR_VAR 0 5
37895: PUSH
37896: LD_INT 44
37898: ST_TO_ADDR
37899: GO 37902
37901: POP
// if Researched ( side , tech ) then
37902: LD_VAR 0 3
37906: PPUSH
37907: LD_VAR 0 5
37911: PPUSH
37912: CALL_OW 325
37916: IFFALSE 37943
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37918: LD_ADDR_VAR 0 2
37922: PUSH
37923: LD_INT 5
37925: PUSH
37926: LD_INT 8
37928: PUSH
37929: LD_INT 9
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: PUSH
37937: LD_VAR 0 4
37941: ARRAY
37942: ST_TO_ADDR
// end ;
37943: LD_VAR 0 2
37947: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37948: LD_INT 0
37950: PPUSH
37951: PPUSH
37952: PPUSH
// if not mines then
37953: LD_VAR 0 2
37957: NOT
37958: IFFALSE 37962
// exit ;
37960: GO 38106
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37962: LD_ADDR_VAR 0 5
37966: PUSH
37967: LD_INT 81
37969: PUSH
37970: LD_VAR 0 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: LD_INT 21
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PPUSH
38000: CALL_OW 69
38004: ST_TO_ADDR
// for i in mines do
38005: LD_ADDR_VAR 0 4
38009: PUSH
38010: LD_VAR 0 2
38014: PUSH
38015: FOR_IN
38016: IFFALSE 38104
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38018: LD_VAR 0 4
38022: PUSH
38023: LD_INT 1
38025: ARRAY
38026: PPUSH
38027: LD_VAR 0 4
38031: PUSH
38032: LD_INT 2
38034: ARRAY
38035: PPUSH
38036: CALL_OW 458
38040: NOT
38041: IFFALSE 38045
// continue ;
38043: GO 38015
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38045: LD_VAR 0 4
38049: PUSH
38050: LD_INT 1
38052: ARRAY
38053: PPUSH
38054: LD_VAR 0 4
38058: PUSH
38059: LD_INT 2
38061: ARRAY
38062: PPUSH
38063: CALL_OW 428
38067: PUSH
38068: LD_VAR 0 5
38072: IN
38073: IFFALSE 38102
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38075: LD_VAR 0 4
38079: PUSH
38080: LD_INT 1
38082: ARRAY
38083: PPUSH
38084: LD_VAR 0 4
38088: PUSH
38089: LD_INT 2
38091: ARRAY
38092: PPUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 456
// end ;
38102: GO 38015
38104: POP
38105: POP
// end ;
38106: LD_VAR 0 3
38110: RET
// export function Count ( array ) ; var i ; begin
38111: LD_INT 0
38113: PPUSH
38114: PPUSH
// result := 0 ;
38115: LD_ADDR_VAR 0 2
38119: PUSH
38120: LD_INT 0
38122: ST_TO_ADDR
// for i in array do
38123: LD_ADDR_VAR 0 3
38127: PUSH
38128: LD_VAR 0 1
38132: PUSH
38133: FOR_IN
38134: IFFALSE 38158
// if i then
38136: LD_VAR 0 3
38140: IFFALSE 38156
// result := result + 1 ;
38142: LD_ADDR_VAR 0 2
38146: PUSH
38147: LD_VAR 0 2
38151: PUSH
38152: LD_INT 1
38154: PLUS
38155: ST_TO_ADDR
38156: GO 38133
38158: POP
38159: POP
// end ;
38160: LD_VAR 0 2
38164: RET
// export function IsEmpty ( building ) ; begin
38165: LD_INT 0
38167: PPUSH
// if not building then
38168: LD_VAR 0 1
38172: NOT
38173: IFFALSE 38177
// exit ;
38175: GO 38220
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38177: LD_ADDR_VAR 0 2
38181: PUSH
38182: LD_VAR 0 1
38186: PUSH
38187: LD_INT 22
38189: PUSH
38190: LD_VAR 0 1
38194: PPUSH
38195: CALL_OW 255
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 58
38206: PUSH
38207: EMPTY
38208: LIST
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PPUSH
38214: CALL_OW 69
38218: IN
38219: ST_TO_ADDR
// end ;
38220: LD_VAR 0 2
38224: RET
// export function IsNotFull ( building ) ; begin
38225: LD_INT 0
38227: PPUSH
// if not building then
38228: LD_VAR 0 1
38232: NOT
38233: IFFALSE 38237
// exit ;
38235: GO 38256
// result := UnitsInside ( building ) < 6 ;
38237: LD_ADDR_VAR 0 2
38241: PUSH
38242: LD_VAR 0 1
38246: PPUSH
38247: CALL_OW 313
38251: PUSH
38252: LD_INT 6
38254: LESS
38255: ST_TO_ADDR
// end ;
38256: LD_VAR 0 2
38260: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38261: LD_INT 0
38263: PPUSH
38264: PPUSH
38265: PPUSH
38266: PPUSH
// tmp := [ ] ;
38267: LD_ADDR_VAR 0 3
38271: PUSH
38272: EMPTY
38273: ST_TO_ADDR
// list := [ ] ;
38274: LD_ADDR_VAR 0 5
38278: PUSH
38279: EMPTY
38280: ST_TO_ADDR
// for i = 16 to 25 do
38281: LD_ADDR_VAR 0 4
38285: PUSH
38286: DOUBLE
38287: LD_INT 16
38289: DEC
38290: ST_TO_ADDR
38291: LD_INT 25
38293: PUSH
38294: FOR_TO
38295: IFFALSE 38368
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38297: LD_ADDR_VAR 0 3
38301: PUSH
38302: LD_VAR 0 3
38306: PUSH
38307: LD_INT 22
38309: PUSH
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 255
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 91
38326: PUSH
38327: LD_VAR 0 1
38331: PUSH
38332: LD_INT 6
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 30
38342: PUSH
38343: LD_VAR 0 4
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: PUSH
38357: EMPTY
38358: LIST
38359: PPUSH
38360: CALL_OW 69
38364: ADD
38365: ST_TO_ADDR
38366: GO 38294
38368: POP
38369: POP
// for i = 1 to tmp do
38370: LD_ADDR_VAR 0 4
38374: PUSH
38375: DOUBLE
38376: LD_INT 1
38378: DEC
38379: ST_TO_ADDR
38380: LD_VAR 0 3
38384: PUSH
38385: FOR_TO
38386: IFFALSE 38474
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38388: LD_ADDR_VAR 0 5
38392: PUSH
38393: LD_VAR 0 5
38397: PUSH
38398: LD_VAR 0 3
38402: PUSH
38403: LD_VAR 0 4
38407: ARRAY
38408: PPUSH
38409: CALL_OW 266
38413: PUSH
38414: LD_VAR 0 3
38418: PUSH
38419: LD_VAR 0 4
38423: ARRAY
38424: PPUSH
38425: CALL_OW 250
38429: PUSH
38430: LD_VAR 0 3
38434: PUSH
38435: LD_VAR 0 4
38439: ARRAY
38440: PPUSH
38441: CALL_OW 251
38445: PUSH
38446: LD_VAR 0 3
38450: PUSH
38451: LD_VAR 0 4
38455: ARRAY
38456: PPUSH
38457: CALL_OW 254
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: PUSH
38468: EMPTY
38469: LIST
38470: ADD
38471: ST_TO_ADDR
38472: GO 38385
38474: POP
38475: POP
// result := list ;
38476: LD_ADDR_VAR 0 2
38480: PUSH
38481: LD_VAR 0 5
38485: ST_TO_ADDR
// end ;
38486: LD_VAR 0 2
38490: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38491: LD_INT 0
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
// if not factory then
38500: LD_VAR 0 1
38504: NOT
38505: IFFALSE 38509
// exit ;
38507: GO 39102
// if control = control_apeman then
38509: LD_VAR 0 4
38513: PUSH
38514: LD_INT 5
38516: EQUAL
38517: IFFALSE 38626
// begin tmp := UnitsInside ( factory ) ;
38519: LD_ADDR_VAR 0 8
38523: PUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: CALL_OW 313
38533: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38534: LD_VAR 0 8
38538: PPUSH
38539: LD_INT 25
38541: PUSH
38542: LD_INT 12
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PPUSH
38549: CALL_OW 72
38553: NOT
38554: IFFALSE 38564
// control := control_manual ;
38556: LD_ADDR_VAR 0 4
38560: PUSH
38561: LD_INT 1
38563: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38564: LD_ADDR_VAR 0 8
38568: PUSH
38569: LD_VAR 0 1
38573: PPUSH
38574: CALL 38261 0 1
38578: ST_TO_ADDR
// if tmp then
38579: LD_VAR 0 8
38583: IFFALSE 38626
// begin for i in tmp do
38585: LD_ADDR_VAR 0 7
38589: PUSH
38590: LD_VAR 0 8
38594: PUSH
38595: FOR_IN
38596: IFFALSE 38624
// if i [ 1 ] = b_ext_radio then
38598: LD_VAR 0 7
38602: PUSH
38603: LD_INT 1
38605: ARRAY
38606: PUSH
38607: LD_INT 22
38609: EQUAL
38610: IFFALSE 38622
// begin control := control_remote ;
38612: LD_ADDR_VAR 0 4
38616: PUSH
38617: LD_INT 2
38619: ST_TO_ADDR
// break ;
38620: GO 38624
// end ;
38622: GO 38595
38624: POP
38625: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38626: LD_VAR 0 1
38630: PPUSH
38631: LD_VAR 0 2
38635: PPUSH
38636: LD_VAR 0 3
38640: PPUSH
38641: LD_VAR 0 4
38645: PPUSH
38646: LD_VAR 0 5
38650: PPUSH
38651: CALL_OW 448
38655: IFFALSE 38690
// begin result := [ chassis , engine , control , weapon ] ;
38657: LD_ADDR_VAR 0 6
38661: PUSH
38662: LD_VAR 0 2
38666: PUSH
38667: LD_VAR 0 3
38671: PUSH
38672: LD_VAR 0 4
38676: PUSH
38677: LD_VAR 0 5
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: ST_TO_ADDR
// exit ;
38688: GO 39102
// end ; _chassis := AvailableChassisList ( factory ) ;
38690: LD_ADDR_VAR 0 9
38694: PUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: CALL_OW 475
38704: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38705: LD_ADDR_VAR 0 11
38709: PUSH
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 476
38719: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38720: LD_ADDR_VAR 0 12
38724: PUSH
38725: LD_VAR 0 1
38729: PPUSH
38730: CALL_OW 477
38734: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38735: LD_ADDR_VAR 0 10
38739: PUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: CALL_OW 478
38749: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38750: LD_VAR 0 9
38754: NOT
38755: PUSH
38756: LD_VAR 0 11
38760: NOT
38761: OR
38762: PUSH
38763: LD_VAR 0 12
38767: NOT
38768: OR
38769: PUSH
38770: LD_VAR 0 10
38774: NOT
38775: OR
38776: IFFALSE 38811
// begin result := [ chassis , engine , control , weapon ] ;
38778: LD_ADDR_VAR 0 6
38782: PUSH
38783: LD_VAR 0 2
38787: PUSH
38788: LD_VAR 0 3
38792: PUSH
38793: LD_VAR 0 4
38797: PUSH
38798: LD_VAR 0 5
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: ST_TO_ADDR
// exit ;
38809: GO 39102
// end ; if not chassis in _chassis then
38811: LD_VAR 0 2
38815: PUSH
38816: LD_VAR 0 9
38820: IN
38821: NOT
38822: IFFALSE 38848
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38824: LD_ADDR_VAR 0 2
38828: PUSH
38829: LD_VAR 0 9
38833: PUSH
38834: LD_INT 1
38836: PPUSH
38837: LD_VAR 0 9
38841: PPUSH
38842: CALL_OW 12
38846: ARRAY
38847: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38848: LD_VAR 0 2
38852: PPUSH
38853: LD_VAR 0 3
38857: PPUSH
38858: CALL 39107 0 2
38862: NOT
38863: IFFALSE 38922
// repeat engine := _engine [ 1 ] ;
38865: LD_ADDR_VAR 0 3
38869: PUSH
38870: LD_VAR 0 11
38874: PUSH
38875: LD_INT 1
38877: ARRAY
38878: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38879: LD_ADDR_VAR 0 11
38883: PUSH
38884: LD_VAR 0 11
38888: PPUSH
38889: LD_INT 1
38891: PPUSH
38892: CALL_OW 3
38896: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38897: LD_VAR 0 2
38901: PPUSH
38902: LD_VAR 0 3
38906: PPUSH
38907: CALL 39107 0 2
38911: PUSH
38912: LD_VAR 0 11
38916: PUSH
38917: EMPTY
38918: EQUAL
38919: OR
38920: IFFALSE 38865
// if not control in _control then
38922: LD_VAR 0 4
38926: PUSH
38927: LD_VAR 0 12
38931: IN
38932: NOT
38933: IFFALSE 38959
// control := _control [ rand ( 1 , _control ) ] ;
38935: LD_ADDR_VAR 0 4
38939: PUSH
38940: LD_VAR 0 12
38944: PUSH
38945: LD_INT 1
38947: PPUSH
38948: LD_VAR 0 12
38952: PPUSH
38953: CALL_OW 12
38957: ARRAY
38958: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38959: LD_VAR 0 2
38963: PPUSH
38964: LD_VAR 0 5
38968: PPUSH
38969: CALL 39327 0 2
38973: NOT
38974: IFFALSE 39033
// repeat weapon := _weapon [ 1 ] ;
38976: LD_ADDR_VAR 0 5
38980: PUSH
38981: LD_VAR 0 10
38985: PUSH
38986: LD_INT 1
38988: ARRAY
38989: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38990: LD_ADDR_VAR 0 10
38994: PUSH
38995: LD_VAR 0 10
38999: PPUSH
39000: LD_INT 1
39002: PPUSH
39003: CALL_OW 3
39007: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39008: LD_VAR 0 2
39012: PPUSH
39013: LD_VAR 0 5
39017: PPUSH
39018: CALL 39327 0 2
39022: PUSH
39023: LD_VAR 0 10
39027: PUSH
39028: EMPTY
39029: EQUAL
39030: OR
39031: IFFALSE 38976
// result := [ ] ;
39033: LD_ADDR_VAR 0 6
39037: PUSH
39038: EMPTY
39039: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39040: LD_VAR 0 1
39044: PPUSH
39045: LD_VAR 0 2
39049: PPUSH
39050: LD_VAR 0 3
39054: PPUSH
39055: LD_VAR 0 4
39059: PPUSH
39060: LD_VAR 0 5
39064: PPUSH
39065: CALL_OW 448
39069: IFFALSE 39102
// result := [ chassis , engine , control , weapon ] ;
39071: LD_ADDR_VAR 0 6
39075: PUSH
39076: LD_VAR 0 2
39080: PUSH
39081: LD_VAR 0 3
39085: PUSH
39086: LD_VAR 0 4
39090: PUSH
39091: LD_VAR 0 5
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: ST_TO_ADDR
// end ;
39102: LD_VAR 0 6
39106: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39107: LD_INT 0
39109: PPUSH
// if not chassis or not engine then
39110: LD_VAR 0 1
39114: NOT
39115: PUSH
39116: LD_VAR 0 2
39120: NOT
39121: OR
39122: IFFALSE 39126
// exit ;
39124: GO 39322
// case engine of engine_solar :
39126: LD_VAR 0 2
39130: PUSH
39131: LD_INT 2
39133: DOUBLE
39134: EQUAL
39135: IFTRUE 39139
39137: GO 39177
39139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39140: LD_ADDR_VAR 0 3
39144: PUSH
39145: LD_INT 11
39147: PUSH
39148: LD_INT 12
39150: PUSH
39151: LD_INT 13
39153: PUSH
39154: LD_INT 14
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: ST_TO_ADDR
39175: GO 39306
39177: LD_INT 1
39179: DOUBLE
39180: EQUAL
39181: IFTRUE 39185
39183: GO 39247
39185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39186: LD_ADDR_VAR 0 3
39190: PUSH
39191: LD_INT 11
39193: PUSH
39194: LD_INT 12
39196: PUSH
39197: LD_INT 13
39199: PUSH
39200: LD_INT 14
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 3
39211: PUSH
39212: LD_INT 4
39214: PUSH
39215: LD_INT 5
39217: PUSH
39218: LD_INT 21
39220: PUSH
39221: LD_INT 23
39223: PUSH
39224: LD_INT 22
39226: PUSH
39227: LD_INT 24
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: ST_TO_ADDR
39245: GO 39306
39247: LD_INT 3
39249: DOUBLE
39250: EQUAL
39251: IFTRUE 39255
39253: GO 39305
39255: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39256: LD_ADDR_VAR 0 3
39260: PUSH
39261: LD_INT 13
39263: PUSH
39264: LD_INT 14
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: LD_INT 4
39275: PUSH
39276: LD_INT 5
39278: PUSH
39279: LD_INT 21
39281: PUSH
39282: LD_INT 22
39284: PUSH
39285: LD_INT 23
39287: PUSH
39288: LD_INT 24
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: ST_TO_ADDR
39303: GO 39306
39305: POP
// result := ( chassis in result ) ;
39306: LD_ADDR_VAR 0 3
39310: PUSH
39311: LD_VAR 0 1
39315: PUSH
39316: LD_VAR 0 3
39320: IN
39321: ST_TO_ADDR
// end ;
39322: LD_VAR 0 3
39326: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39327: LD_INT 0
39329: PPUSH
// if not chassis or not weapon then
39330: LD_VAR 0 1
39334: NOT
39335: PUSH
39336: LD_VAR 0 2
39340: NOT
39341: OR
39342: IFFALSE 39346
// exit ;
39344: GO 40372
// case weapon of us_machine_gun :
39346: LD_VAR 0 2
39350: PUSH
39351: LD_INT 2
39353: DOUBLE
39354: EQUAL
39355: IFTRUE 39359
39357: GO 39389
39359: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39360: LD_ADDR_VAR 0 3
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 3
39373: PUSH
39374: LD_INT 4
39376: PUSH
39377: LD_INT 5
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: ST_TO_ADDR
39387: GO 40356
39389: LD_INT 3
39391: DOUBLE
39392: EQUAL
39393: IFTRUE 39397
39395: GO 39427
39397: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39398: LD_ADDR_VAR 0 3
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: LD_INT 3
39411: PUSH
39412: LD_INT 4
39414: PUSH
39415: LD_INT 5
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: ST_TO_ADDR
39425: GO 40356
39427: LD_INT 11
39429: DOUBLE
39430: EQUAL
39431: IFTRUE 39435
39433: GO 39465
39435: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39436: LD_ADDR_VAR 0 3
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: LD_INT 3
39449: PUSH
39450: LD_INT 4
39452: PUSH
39453: LD_INT 5
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: ST_TO_ADDR
39463: GO 40356
39465: LD_INT 4
39467: DOUBLE
39468: EQUAL
39469: IFTRUE 39473
39471: GO 39499
39473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39474: LD_ADDR_VAR 0 3
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: LD_INT 4
39487: PUSH
39488: LD_INT 5
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: ST_TO_ADDR
39497: GO 40356
39499: LD_INT 5
39501: DOUBLE
39502: EQUAL
39503: IFTRUE 39507
39505: GO 39533
39507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39508: LD_ADDR_VAR 0 3
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 3
39518: PUSH
39519: LD_INT 4
39521: PUSH
39522: LD_INT 5
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: ST_TO_ADDR
39531: GO 40356
39533: LD_INT 9
39535: DOUBLE
39536: EQUAL
39537: IFTRUE 39541
39539: GO 39567
39541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39542: LD_ADDR_VAR 0 3
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: LD_INT 4
39555: PUSH
39556: LD_INT 5
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
39565: GO 40356
39567: LD_INT 7
39569: DOUBLE
39570: EQUAL
39571: IFTRUE 39575
39573: GO 39601
39575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39576: LD_ADDR_VAR 0 3
39580: PUSH
39581: LD_INT 2
39583: PUSH
39584: LD_INT 3
39586: PUSH
39587: LD_INT 4
39589: PUSH
39590: LD_INT 5
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: ST_TO_ADDR
39599: GO 40356
39601: LD_INT 12
39603: DOUBLE
39604: EQUAL
39605: IFTRUE 39609
39607: GO 39635
39609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39610: LD_ADDR_VAR 0 3
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: LD_INT 4
39623: PUSH
39624: LD_INT 5
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: ST_TO_ADDR
39633: GO 40356
39635: LD_INT 13
39637: DOUBLE
39638: EQUAL
39639: IFTRUE 39643
39641: GO 39669
39643: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39644: LD_ADDR_VAR 0 3
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: LD_INT 4
39657: PUSH
39658: LD_INT 5
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: ST_TO_ADDR
39667: GO 40356
39669: LD_INT 14
39671: DOUBLE
39672: EQUAL
39673: IFTRUE 39677
39675: GO 39695
39677: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39678: LD_ADDR_VAR 0 3
39682: PUSH
39683: LD_INT 4
39685: PUSH
39686: LD_INT 5
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: ST_TO_ADDR
39693: GO 40356
39695: LD_INT 6
39697: DOUBLE
39698: EQUAL
39699: IFTRUE 39703
39701: GO 39721
39703: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39704: LD_ADDR_VAR 0 3
39708: PUSH
39709: LD_INT 4
39711: PUSH
39712: LD_INT 5
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: ST_TO_ADDR
39719: GO 40356
39721: LD_INT 10
39723: DOUBLE
39724: EQUAL
39725: IFTRUE 39729
39727: GO 39747
39729: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39730: LD_ADDR_VAR 0 3
39734: PUSH
39735: LD_INT 4
39737: PUSH
39738: LD_INT 5
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: ST_TO_ADDR
39745: GO 40356
39747: LD_INT 22
39749: DOUBLE
39750: EQUAL
39751: IFTRUE 39755
39753: GO 39781
39755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39756: LD_ADDR_VAR 0 3
39760: PUSH
39761: LD_INT 11
39763: PUSH
39764: LD_INT 12
39766: PUSH
39767: LD_INT 13
39769: PUSH
39770: LD_INT 14
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: ST_TO_ADDR
39779: GO 40356
39781: LD_INT 23
39783: DOUBLE
39784: EQUAL
39785: IFTRUE 39789
39787: GO 39815
39789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39790: LD_ADDR_VAR 0 3
39794: PUSH
39795: LD_INT 11
39797: PUSH
39798: LD_INT 12
39800: PUSH
39801: LD_INT 13
39803: PUSH
39804: LD_INT 14
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: ST_TO_ADDR
39813: GO 40356
39815: LD_INT 24
39817: DOUBLE
39818: EQUAL
39819: IFTRUE 39823
39821: GO 39849
39823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39824: LD_ADDR_VAR 0 3
39828: PUSH
39829: LD_INT 11
39831: PUSH
39832: LD_INT 12
39834: PUSH
39835: LD_INT 13
39837: PUSH
39838: LD_INT 14
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: ST_TO_ADDR
39847: GO 40356
39849: LD_INT 30
39851: DOUBLE
39852: EQUAL
39853: IFTRUE 39857
39855: GO 39883
39857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39858: LD_ADDR_VAR 0 3
39862: PUSH
39863: LD_INT 11
39865: PUSH
39866: LD_INT 12
39868: PUSH
39869: LD_INT 13
39871: PUSH
39872: LD_INT 14
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: ST_TO_ADDR
39881: GO 40356
39883: LD_INT 25
39885: DOUBLE
39886: EQUAL
39887: IFTRUE 39891
39889: GO 39909
39891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39892: LD_ADDR_VAR 0 3
39896: PUSH
39897: LD_INT 13
39899: PUSH
39900: LD_INT 14
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: ST_TO_ADDR
39907: GO 40356
39909: LD_INT 27
39911: DOUBLE
39912: EQUAL
39913: IFTRUE 39917
39915: GO 39935
39917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39918: LD_ADDR_VAR 0 3
39922: PUSH
39923: LD_INT 13
39925: PUSH
39926: LD_INT 14
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: ST_TO_ADDR
39933: GO 40356
39935: LD_INT 28
39937: DOUBLE
39938: EQUAL
39939: IFTRUE 39943
39941: GO 39961
39943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39944: LD_ADDR_VAR 0 3
39948: PUSH
39949: LD_INT 13
39951: PUSH
39952: LD_INT 14
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: ST_TO_ADDR
39959: GO 40356
39961: LD_INT 29
39963: DOUBLE
39964: EQUAL
39965: IFTRUE 39969
39967: GO 39987
39969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39970: LD_ADDR_VAR 0 3
39974: PUSH
39975: LD_INT 13
39977: PUSH
39978: LD_INT 14
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: ST_TO_ADDR
39985: GO 40356
39987: LD_INT 31
39989: DOUBLE
39990: EQUAL
39991: IFTRUE 39995
39993: GO 40013
39995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39996: LD_ADDR_VAR 0 3
40000: PUSH
40001: LD_INT 13
40003: PUSH
40004: LD_INT 14
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: ST_TO_ADDR
40011: GO 40356
40013: LD_INT 26
40015: DOUBLE
40016: EQUAL
40017: IFTRUE 40021
40019: GO 40039
40021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40022: LD_ADDR_VAR 0 3
40026: PUSH
40027: LD_INT 13
40029: PUSH
40030: LD_INT 14
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: ST_TO_ADDR
40037: GO 40356
40039: LD_INT 42
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40047
40045: GO 40073
40047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40048: LD_ADDR_VAR 0 3
40052: PUSH
40053: LD_INT 21
40055: PUSH
40056: LD_INT 22
40058: PUSH
40059: LD_INT 23
40061: PUSH
40062: LD_INT 24
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: ST_TO_ADDR
40071: GO 40356
40073: LD_INT 43
40075: DOUBLE
40076: EQUAL
40077: IFTRUE 40081
40079: GO 40107
40081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40082: LD_ADDR_VAR 0 3
40086: PUSH
40087: LD_INT 21
40089: PUSH
40090: LD_INT 22
40092: PUSH
40093: LD_INT 23
40095: PUSH
40096: LD_INT 24
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: ST_TO_ADDR
40105: GO 40356
40107: LD_INT 44
40109: DOUBLE
40110: EQUAL
40111: IFTRUE 40115
40113: GO 40141
40115: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40116: LD_ADDR_VAR 0 3
40120: PUSH
40121: LD_INT 21
40123: PUSH
40124: LD_INT 22
40126: PUSH
40127: LD_INT 23
40129: PUSH
40130: LD_INT 24
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: ST_TO_ADDR
40139: GO 40356
40141: LD_INT 45
40143: DOUBLE
40144: EQUAL
40145: IFTRUE 40149
40147: GO 40175
40149: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40150: LD_ADDR_VAR 0 3
40154: PUSH
40155: LD_INT 21
40157: PUSH
40158: LD_INT 22
40160: PUSH
40161: LD_INT 23
40163: PUSH
40164: LD_INT 24
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: ST_TO_ADDR
40173: GO 40356
40175: LD_INT 49
40177: DOUBLE
40178: EQUAL
40179: IFTRUE 40183
40181: GO 40209
40183: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40184: LD_ADDR_VAR 0 3
40188: PUSH
40189: LD_INT 21
40191: PUSH
40192: LD_INT 22
40194: PUSH
40195: LD_INT 23
40197: PUSH
40198: LD_INT 24
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
40207: GO 40356
40209: LD_INT 51
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40243
40217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: LD_INT 21
40225: PUSH
40226: LD_INT 22
40228: PUSH
40229: LD_INT 23
40231: PUSH
40232: LD_INT 24
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: ST_TO_ADDR
40241: GO 40356
40243: LD_INT 52
40245: DOUBLE
40246: EQUAL
40247: IFTRUE 40251
40249: GO 40277
40251: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40252: LD_ADDR_VAR 0 3
40256: PUSH
40257: LD_INT 21
40259: PUSH
40260: LD_INT 22
40262: PUSH
40263: LD_INT 23
40265: PUSH
40266: LD_INT 24
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: ST_TO_ADDR
40275: GO 40356
40277: LD_INT 53
40279: DOUBLE
40280: EQUAL
40281: IFTRUE 40285
40283: GO 40303
40285: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40286: LD_ADDR_VAR 0 3
40290: PUSH
40291: LD_INT 23
40293: PUSH
40294: LD_INT 24
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: ST_TO_ADDR
40301: GO 40356
40303: LD_INT 46
40305: DOUBLE
40306: EQUAL
40307: IFTRUE 40311
40309: GO 40329
40311: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40312: LD_ADDR_VAR 0 3
40316: PUSH
40317: LD_INT 23
40319: PUSH
40320: LD_INT 24
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: ST_TO_ADDR
40327: GO 40356
40329: LD_INT 47
40331: DOUBLE
40332: EQUAL
40333: IFTRUE 40337
40335: GO 40355
40337: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40338: LD_ADDR_VAR 0 3
40342: PUSH
40343: LD_INT 23
40345: PUSH
40346: LD_INT 24
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: ST_TO_ADDR
40353: GO 40356
40355: POP
// result := ( chassis in result ) ;
40356: LD_ADDR_VAR 0 3
40360: PUSH
40361: LD_VAR 0 1
40365: PUSH
40366: LD_VAR 0 3
40370: IN
40371: ST_TO_ADDR
// end ;
40372: LD_VAR 0 3
40376: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40377: LD_INT 0
40379: PPUSH
40380: PPUSH
40381: PPUSH
40382: PPUSH
40383: PPUSH
40384: PPUSH
40385: PPUSH
// result := array ;
40386: LD_ADDR_VAR 0 5
40390: PUSH
40391: LD_VAR 0 1
40395: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40396: LD_VAR 0 1
40400: NOT
40401: PUSH
40402: LD_VAR 0 2
40406: NOT
40407: OR
40408: PUSH
40409: LD_VAR 0 3
40413: NOT
40414: OR
40415: PUSH
40416: LD_VAR 0 2
40420: PUSH
40421: LD_VAR 0 1
40425: GREATER
40426: OR
40427: PUSH
40428: LD_VAR 0 3
40432: PUSH
40433: LD_VAR 0 1
40437: GREATER
40438: OR
40439: IFFALSE 40443
// exit ;
40441: GO 40739
// if direction then
40443: LD_VAR 0 4
40447: IFFALSE 40511
// begin d := 1 ;
40449: LD_ADDR_VAR 0 9
40453: PUSH
40454: LD_INT 1
40456: ST_TO_ADDR
// if i_from > i_to then
40457: LD_VAR 0 2
40461: PUSH
40462: LD_VAR 0 3
40466: GREATER
40467: IFFALSE 40493
// length := ( array - i_from ) + i_to else
40469: LD_ADDR_VAR 0 11
40473: PUSH
40474: LD_VAR 0 1
40478: PUSH
40479: LD_VAR 0 2
40483: MINUS
40484: PUSH
40485: LD_VAR 0 3
40489: PLUS
40490: ST_TO_ADDR
40491: GO 40509
// length := i_to - i_from ;
40493: LD_ADDR_VAR 0 11
40497: PUSH
40498: LD_VAR 0 3
40502: PUSH
40503: LD_VAR 0 2
40507: MINUS
40508: ST_TO_ADDR
// end else
40509: GO 40572
// begin d := - 1 ;
40511: LD_ADDR_VAR 0 9
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: ST_TO_ADDR
// if i_from > i_to then
40520: LD_VAR 0 2
40524: PUSH
40525: LD_VAR 0 3
40529: GREATER
40530: IFFALSE 40550
// length := i_from - i_to else
40532: LD_ADDR_VAR 0 11
40536: PUSH
40537: LD_VAR 0 2
40541: PUSH
40542: LD_VAR 0 3
40546: MINUS
40547: ST_TO_ADDR
40548: GO 40572
// length := ( array - i_to ) + i_from ;
40550: LD_ADDR_VAR 0 11
40554: PUSH
40555: LD_VAR 0 1
40559: PUSH
40560: LD_VAR 0 3
40564: MINUS
40565: PUSH
40566: LD_VAR 0 2
40570: PLUS
40571: ST_TO_ADDR
// end ; if not length then
40572: LD_VAR 0 11
40576: NOT
40577: IFFALSE 40581
// exit ;
40579: GO 40739
// tmp := array ;
40581: LD_ADDR_VAR 0 10
40585: PUSH
40586: LD_VAR 0 1
40590: ST_TO_ADDR
// for i = 1 to length do
40591: LD_ADDR_VAR 0 6
40595: PUSH
40596: DOUBLE
40597: LD_INT 1
40599: DEC
40600: ST_TO_ADDR
40601: LD_VAR 0 11
40605: PUSH
40606: FOR_TO
40607: IFFALSE 40727
// begin for j = 1 to array do
40609: LD_ADDR_VAR 0 7
40613: PUSH
40614: DOUBLE
40615: LD_INT 1
40617: DEC
40618: ST_TO_ADDR
40619: LD_VAR 0 1
40623: PUSH
40624: FOR_TO
40625: IFFALSE 40713
// begin k := j + d ;
40627: LD_ADDR_VAR 0 8
40631: PUSH
40632: LD_VAR 0 7
40636: PUSH
40637: LD_VAR 0 9
40641: PLUS
40642: ST_TO_ADDR
// if k > array then
40643: LD_VAR 0 8
40647: PUSH
40648: LD_VAR 0 1
40652: GREATER
40653: IFFALSE 40663
// k := 1 ;
40655: LD_ADDR_VAR 0 8
40659: PUSH
40660: LD_INT 1
40662: ST_TO_ADDR
// if not k then
40663: LD_VAR 0 8
40667: NOT
40668: IFFALSE 40680
// k := array ;
40670: LD_ADDR_VAR 0 8
40674: PUSH
40675: LD_VAR 0 1
40679: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40680: LD_ADDR_VAR 0 10
40684: PUSH
40685: LD_VAR 0 10
40689: PPUSH
40690: LD_VAR 0 8
40694: PPUSH
40695: LD_VAR 0 1
40699: PUSH
40700: LD_VAR 0 7
40704: ARRAY
40705: PPUSH
40706: CALL_OW 1
40710: ST_TO_ADDR
// end ;
40711: GO 40624
40713: POP
40714: POP
// array := tmp ;
40715: LD_ADDR_VAR 0 1
40719: PUSH
40720: LD_VAR 0 10
40724: ST_TO_ADDR
// end ;
40725: GO 40606
40727: POP
40728: POP
// result := array ;
40729: LD_ADDR_VAR 0 5
40733: PUSH
40734: LD_VAR 0 1
40738: ST_TO_ADDR
// end ;
40739: LD_VAR 0 5
40743: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40744: LD_INT 0
40746: PPUSH
40747: PPUSH
// result := 0 ;
40748: LD_ADDR_VAR 0 3
40752: PUSH
40753: LD_INT 0
40755: ST_TO_ADDR
// if not array or not value in array then
40756: LD_VAR 0 1
40760: NOT
40761: PUSH
40762: LD_VAR 0 2
40766: PUSH
40767: LD_VAR 0 1
40771: IN
40772: NOT
40773: OR
40774: IFFALSE 40778
// exit ;
40776: GO 40832
// for i = 1 to array do
40778: LD_ADDR_VAR 0 4
40782: PUSH
40783: DOUBLE
40784: LD_INT 1
40786: DEC
40787: ST_TO_ADDR
40788: LD_VAR 0 1
40792: PUSH
40793: FOR_TO
40794: IFFALSE 40830
// if value = array [ i ] then
40796: LD_VAR 0 2
40800: PUSH
40801: LD_VAR 0 1
40805: PUSH
40806: LD_VAR 0 4
40810: ARRAY
40811: EQUAL
40812: IFFALSE 40828
// begin result := i ;
40814: LD_ADDR_VAR 0 3
40818: PUSH
40819: LD_VAR 0 4
40823: ST_TO_ADDR
// exit ;
40824: POP
40825: POP
40826: GO 40832
// end ;
40828: GO 40793
40830: POP
40831: POP
// end ;
40832: LD_VAR 0 3
40836: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40837: LD_INT 0
40839: PPUSH
// vc_chassis := chassis ;
40840: LD_ADDR_OWVAR 37
40844: PUSH
40845: LD_VAR 0 1
40849: ST_TO_ADDR
// vc_engine := engine ;
40850: LD_ADDR_OWVAR 39
40854: PUSH
40855: LD_VAR 0 2
40859: ST_TO_ADDR
// vc_control := control ;
40860: LD_ADDR_OWVAR 38
40864: PUSH
40865: LD_VAR 0 3
40869: ST_TO_ADDR
// vc_weapon := weapon ;
40870: LD_ADDR_OWVAR 40
40874: PUSH
40875: LD_VAR 0 4
40879: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40880: LD_ADDR_OWVAR 41
40884: PUSH
40885: LD_VAR 0 5
40889: ST_TO_ADDR
// end ;
40890: LD_VAR 0 6
40894: RET
// export function WantPlant ( unit ) ; var task ; begin
40895: LD_INT 0
40897: PPUSH
40898: PPUSH
// result := false ;
40899: LD_ADDR_VAR 0 2
40903: PUSH
40904: LD_INT 0
40906: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40907: LD_ADDR_VAR 0 3
40911: PUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 437
40921: ST_TO_ADDR
// if task then
40922: LD_VAR 0 3
40926: IFFALSE 40954
// if task [ 1 ] [ 1 ] = p then
40928: LD_VAR 0 3
40932: PUSH
40933: LD_INT 1
40935: ARRAY
40936: PUSH
40937: LD_INT 1
40939: ARRAY
40940: PUSH
40941: LD_STRING p
40943: EQUAL
40944: IFFALSE 40954
// result := true ;
40946: LD_ADDR_VAR 0 2
40950: PUSH
40951: LD_INT 1
40953: ST_TO_ADDR
// end ;
40954: LD_VAR 0 2
40958: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40959: LD_INT 0
40961: PPUSH
40962: PPUSH
40963: PPUSH
40964: PPUSH
// if pos < 1 then
40965: LD_VAR 0 2
40969: PUSH
40970: LD_INT 1
40972: LESS
40973: IFFALSE 40977
// exit ;
40975: GO 41280
// if pos = 1 then
40977: LD_VAR 0 2
40981: PUSH
40982: LD_INT 1
40984: EQUAL
40985: IFFALSE 41018
// result := Replace ( arr , pos [ 1 ] , value ) else
40987: LD_ADDR_VAR 0 4
40991: PUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: LD_VAR 0 2
41001: PUSH
41002: LD_INT 1
41004: ARRAY
41005: PPUSH
41006: LD_VAR 0 3
41010: PPUSH
41011: CALL_OW 1
41015: ST_TO_ADDR
41016: GO 41280
// begin tmp := arr ;
41018: LD_ADDR_VAR 0 6
41022: PUSH
41023: LD_VAR 0 1
41027: ST_TO_ADDR
// s_arr := [ tmp ] ;
41028: LD_ADDR_VAR 0 7
41032: PUSH
41033: LD_VAR 0 6
41037: PUSH
41038: EMPTY
41039: LIST
41040: ST_TO_ADDR
// for i = 1 to pos - 1 do
41041: LD_ADDR_VAR 0 5
41045: PUSH
41046: DOUBLE
41047: LD_INT 1
41049: DEC
41050: ST_TO_ADDR
41051: LD_VAR 0 2
41055: PUSH
41056: LD_INT 1
41058: MINUS
41059: PUSH
41060: FOR_TO
41061: IFFALSE 41106
// begin tmp := tmp [ pos [ i ] ] ;
41063: LD_ADDR_VAR 0 6
41067: PUSH
41068: LD_VAR 0 6
41072: PUSH
41073: LD_VAR 0 2
41077: PUSH
41078: LD_VAR 0 5
41082: ARRAY
41083: ARRAY
41084: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41085: LD_ADDR_VAR 0 7
41089: PUSH
41090: LD_VAR 0 7
41094: PUSH
41095: LD_VAR 0 6
41099: PUSH
41100: EMPTY
41101: LIST
41102: ADD
41103: ST_TO_ADDR
// end ;
41104: GO 41060
41106: POP
41107: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41108: LD_ADDR_VAR 0 6
41112: PUSH
41113: LD_VAR 0 6
41117: PPUSH
41118: LD_VAR 0 2
41122: PUSH
41123: LD_VAR 0 2
41127: ARRAY
41128: PPUSH
41129: LD_VAR 0 3
41133: PPUSH
41134: CALL_OW 1
41138: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41139: LD_ADDR_VAR 0 7
41143: PUSH
41144: LD_VAR 0 7
41148: PPUSH
41149: LD_VAR 0 7
41153: PPUSH
41154: LD_VAR 0 6
41158: PPUSH
41159: CALL_OW 1
41163: ST_TO_ADDR
// for i = s_arr downto 2 do
41164: LD_ADDR_VAR 0 5
41168: PUSH
41169: DOUBLE
41170: LD_VAR 0 7
41174: INC
41175: ST_TO_ADDR
41176: LD_INT 2
41178: PUSH
41179: FOR_DOWNTO
41180: IFFALSE 41264
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41182: LD_ADDR_VAR 0 6
41186: PUSH
41187: LD_VAR 0 7
41191: PUSH
41192: LD_VAR 0 5
41196: PUSH
41197: LD_INT 1
41199: MINUS
41200: ARRAY
41201: PPUSH
41202: LD_VAR 0 2
41206: PUSH
41207: LD_VAR 0 5
41211: PUSH
41212: LD_INT 1
41214: MINUS
41215: ARRAY
41216: PPUSH
41217: LD_VAR 0 7
41221: PUSH
41222: LD_VAR 0 5
41226: ARRAY
41227: PPUSH
41228: CALL_OW 1
41232: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41233: LD_ADDR_VAR 0 7
41237: PUSH
41238: LD_VAR 0 7
41242: PPUSH
41243: LD_VAR 0 5
41247: PUSH
41248: LD_INT 1
41250: MINUS
41251: PPUSH
41252: LD_VAR 0 6
41256: PPUSH
41257: CALL_OW 1
41261: ST_TO_ADDR
// end ;
41262: GO 41179
41264: POP
41265: POP
// result := s_arr [ 1 ] ;
41266: LD_ADDR_VAR 0 4
41270: PUSH
41271: LD_VAR 0 7
41275: PUSH
41276: LD_INT 1
41278: ARRAY
41279: ST_TO_ADDR
// end ; end ;
41280: LD_VAR 0 4
41284: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41285: LD_INT 0
41287: PPUSH
41288: PPUSH
// if not list then
41289: LD_VAR 0 1
41293: NOT
41294: IFFALSE 41298
// exit ;
41296: GO 41389
// i := list [ pos1 ] ;
41298: LD_ADDR_VAR 0 5
41302: PUSH
41303: LD_VAR 0 1
41307: PUSH
41308: LD_VAR 0 2
41312: ARRAY
41313: ST_TO_ADDR
// if not i then
41314: LD_VAR 0 5
41318: NOT
41319: IFFALSE 41323
// exit ;
41321: GO 41389
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41323: LD_ADDR_VAR 0 1
41327: PUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: LD_VAR 0 2
41337: PPUSH
41338: LD_VAR 0 1
41342: PUSH
41343: LD_VAR 0 3
41347: ARRAY
41348: PPUSH
41349: CALL_OW 1
41353: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41354: LD_ADDR_VAR 0 1
41358: PUSH
41359: LD_VAR 0 1
41363: PPUSH
41364: LD_VAR 0 3
41368: PPUSH
41369: LD_VAR 0 5
41373: PPUSH
41374: CALL_OW 1
41378: ST_TO_ADDR
// result := list ;
41379: LD_ADDR_VAR 0 4
41383: PUSH
41384: LD_VAR 0 1
41388: ST_TO_ADDR
// end ;
41389: LD_VAR 0 4
41393: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41394: LD_INT 0
41396: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41397: LD_ADDR_VAR 0 5
41401: PUSH
41402: LD_VAR 0 1
41406: PPUSH
41407: CALL_OW 250
41411: PPUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: CALL_OW 251
41421: PPUSH
41422: LD_VAR 0 2
41426: PPUSH
41427: LD_VAR 0 3
41431: PPUSH
41432: LD_VAR 0 4
41436: PPUSH
41437: CALL 41447 0 5
41441: ST_TO_ADDR
// end ;
41442: LD_VAR 0 5
41446: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41447: LD_INT 0
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
// if not list then
41453: LD_VAR 0 3
41457: NOT
41458: IFFALSE 41462
// exit ;
41460: GO 41850
// result := [ ] ;
41462: LD_ADDR_VAR 0 6
41466: PUSH
41467: EMPTY
41468: ST_TO_ADDR
// for i in list do
41469: LD_ADDR_VAR 0 7
41473: PUSH
41474: LD_VAR 0 3
41478: PUSH
41479: FOR_IN
41480: IFFALSE 41682
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41482: LD_ADDR_VAR 0 9
41486: PUSH
41487: LD_VAR 0 7
41491: PPUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: LD_VAR 0 2
41501: PPUSH
41502: CALL_OW 297
41506: ST_TO_ADDR
// if not result then
41507: LD_VAR 0 6
41511: NOT
41512: IFFALSE 41538
// result := [ [ i , tmp ] ] else
41514: LD_ADDR_VAR 0 6
41518: PUSH
41519: LD_VAR 0 7
41523: PUSH
41524: LD_VAR 0 9
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: EMPTY
41534: LIST
41535: ST_TO_ADDR
41536: GO 41680
// begin if result [ result ] [ 2 ] < tmp then
41538: LD_VAR 0 6
41542: PUSH
41543: LD_VAR 0 6
41547: ARRAY
41548: PUSH
41549: LD_INT 2
41551: ARRAY
41552: PUSH
41553: LD_VAR 0 9
41557: LESS
41558: IFFALSE 41600
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41560: LD_ADDR_VAR 0 6
41564: PUSH
41565: LD_VAR 0 6
41569: PPUSH
41570: LD_VAR 0 6
41574: PUSH
41575: LD_INT 1
41577: PLUS
41578: PPUSH
41579: LD_VAR 0 7
41583: PUSH
41584: LD_VAR 0 9
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PPUSH
41593: CALL_OW 2
41597: ST_TO_ADDR
41598: GO 41680
// for j = 1 to result do
41600: LD_ADDR_VAR 0 8
41604: PUSH
41605: DOUBLE
41606: LD_INT 1
41608: DEC
41609: ST_TO_ADDR
41610: LD_VAR 0 6
41614: PUSH
41615: FOR_TO
41616: IFFALSE 41678
// begin if tmp < result [ j ] [ 2 ] then
41618: LD_VAR 0 9
41622: PUSH
41623: LD_VAR 0 6
41627: PUSH
41628: LD_VAR 0 8
41632: ARRAY
41633: PUSH
41634: LD_INT 2
41636: ARRAY
41637: LESS
41638: IFFALSE 41676
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41640: LD_ADDR_VAR 0 6
41644: PUSH
41645: LD_VAR 0 6
41649: PPUSH
41650: LD_VAR 0 8
41654: PPUSH
41655: LD_VAR 0 7
41659: PUSH
41660: LD_VAR 0 9
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PPUSH
41669: CALL_OW 2
41673: ST_TO_ADDR
// break ;
41674: GO 41678
// end ; end ;
41676: GO 41615
41678: POP
41679: POP
// end ; end ;
41680: GO 41479
41682: POP
41683: POP
// if result and not asc then
41684: LD_VAR 0 6
41688: PUSH
41689: LD_VAR 0 4
41693: NOT
41694: AND
41695: IFFALSE 41770
// begin tmp := result ;
41697: LD_ADDR_VAR 0 9
41701: PUSH
41702: LD_VAR 0 6
41706: ST_TO_ADDR
// for i = tmp downto 1 do
41707: LD_ADDR_VAR 0 7
41711: PUSH
41712: DOUBLE
41713: LD_VAR 0 9
41717: INC
41718: ST_TO_ADDR
41719: LD_INT 1
41721: PUSH
41722: FOR_DOWNTO
41723: IFFALSE 41768
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41725: LD_ADDR_VAR 0 6
41729: PUSH
41730: LD_VAR 0 6
41734: PPUSH
41735: LD_VAR 0 9
41739: PUSH
41740: LD_VAR 0 7
41744: MINUS
41745: PUSH
41746: LD_INT 1
41748: PLUS
41749: PPUSH
41750: LD_VAR 0 9
41754: PUSH
41755: LD_VAR 0 7
41759: ARRAY
41760: PPUSH
41761: CALL_OW 1
41765: ST_TO_ADDR
41766: GO 41722
41768: POP
41769: POP
// end ; tmp := [ ] ;
41770: LD_ADDR_VAR 0 9
41774: PUSH
41775: EMPTY
41776: ST_TO_ADDR
// if mode then
41777: LD_VAR 0 5
41781: IFFALSE 41850
// begin for i = 1 to result do
41783: LD_ADDR_VAR 0 7
41787: PUSH
41788: DOUBLE
41789: LD_INT 1
41791: DEC
41792: ST_TO_ADDR
41793: LD_VAR 0 6
41797: PUSH
41798: FOR_TO
41799: IFFALSE 41838
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41801: LD_ADDR_VAR 0 9
41805: PUSH
41806: LD_VAR 0 9
41810: PPUSH
41811: LD_VAR 0 7
41815: PPUSH
41816: LD_VAR 0 6
41820: PUSH
41821: LD_VAR 0 7
41825: ARRAY
41826: PUSH
41827: LD_INT 1
41829: ARRAY
41830: PPUSH
41831: CALL_OW 1
41835: ST_TO_ADDR
41836: GO 41798
41838: POP
41839: POP
// result := tmp ;
41840: LD_ADDR_VAR 0 6
41844: PUSH
41845: LD_VAR 0 9
41849: ST_TO_ADDR
// end ; end ;
41850: LD_VAR 0 6
41854: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41855: LD_INT 0
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41863: LD_ADDR_VAR 0 5
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: EMPTY
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// if not x or not y then
41885: LD_VAR 0 2
41889: NOT
41890: PUSH
41891: LD_VAR 0 3
41895: NOT
41896: OR
41897: IFFALSE 41901
// exit ;
41899: GO 43547
// if not range then
41901: LD_VAR 0 4
41905: NOT
41906: IFFALSE 41916
// range := 10 ;
41908: LD_ADDR_VAR 0 4
41912: PUSH
41913: LD_INT 10
41915: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41916: LD_ADDR_VAR 0 8
41920: PUSH
41921: LD_INT 81
41923: PUSH
41924: LD_VAR 0 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 92
41935: PUSH
41936: LD_VAR 0 2
41940: PUSH
41941: LD_VAR 0 3
41945: PUSH
41946: LD_VAR 0 4
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 3
41959: PUSH
41960: LD_INT 21
41962: PUSH
41963: LD_INT 3
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: LIST
41978: PPUSH
41979: CALL_OW 69
41983: ST_TO_ADDR
// if not tmp then
41984: LD_VAR 0 8
41988: NOT
41989: IFFALSE 41993
// exit ;
41991: GO 43547
// for i in tmp do
41993: LD_ADDR_VAR 0 6
41997: PUSH
41998: LD_VAR 0 8
42002: PUSH
42003: FOR_IN
42004: IFFALSE 43522
// begin points := [ 0 , 0 , 0 ] ;
42006: LD_ADDR_VAR 0 9
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: ST_TO_ADDR
// bpoints := 1 ;
42025: LD_ADDR_VAR 0 10
42029: PUSH
42030: LD_INT 1
42032: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42033: LD_VAR 0 6
42037: PPUSH
42038: CALL_OW 247
42042: PUSH
42043: LD_INT 1
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42051
42049: GO 42629
42051: POP
// begin if GetClass ( i ) = 1 then
42052: LD_VAR 0 6
42056: PPUSH
42057: CALL_OW 257
42061: PUSH
42062: LD_INT 1
42064: EQUAL
42065: IFFALSE 42086
// points := [ 10 , 5 , 3 ] ;
42067: LD_ADDR_VAR 0 9
42071: PUSH
42072: LD_INT 10
42074: PUSH
42075: LD_INT 5
42077: PUSH
42078: LD_INT 3
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: LIST
42085: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42086: LD_VAR 0 6
42090: PPUSH
42091: CALL_OW 257
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 3
42101: PUSH
42102: LD_INT 4
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: IN
42110: IFFALSE 42131
// points := [ 3 , 2 , 1 ] ;
42112: LD_ADDR_VAR 0 9
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42131: LD_VAR 0 6
42135: PPUSH
42136: CALL_OW 257
42140: PUSH
42141: LD_INT 5
42143: EQUAL
42144: IFFALSE 42165
// points := [ 130 , 5 , 2 ] ;
42146: LD_ADDR_VAR 0 9
42150: PUSH
42151: LD_INT 130
42153: PUSH
42154: LD_INT 5
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42165: LD_VAR 0 6
42169: PPUSH
42170: CALL_OW 257
42174: PUSH
42175: LD_INT 8
42177: EQUAL
42178: IFFALSE 42199
// points := [ 35 , 35 , 30 ] ;
42180: LD_ADDR_VAR 0 9
42184: PUSH
42185: LD_INT 35
42187: PUSH
42188: LD_INT 35
42190: PUSH
42191: LD_INT 30
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42199: LD_VAR 0 6
42203: PPUSH
42204: CALL_OW 257
42208: PUSH
42209: LD_INT 9
42211: EQUAL
42212: IFFALSE 42233
// points := [ 20 , 55 , 40 ] ;
42214: LD_ADDR_VAR 0 9
42218: PUSH
42219: LD_INT 20
42221: PUSH
42222: LD_INT 55
42224: PUSH
42225: LD_INT 40
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42233: LD_VAR 0 6
42237: PPUSH
42238: CALL_OW 257
42242: PUSH
42243: LD_INT 12
42245: PUSH
42246: LD_INT 16
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: IN
42253: IFFALSE 42274
// points := [ 5 , 3 , 2 ] ;
42255: LD_ADDR_VAR 0 9
42259: PUSH
42260: LD_INT 5
42262: PUSH
42263: LD_INT 3
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42274: LD_VAR 0 6
42278: PPUSH
42279: CALL_OW 257
42283: PUSH
42284: LD_INT 17
42286: EQUAL
42287: IFFALSE 42308
// points := [ 100 , 50 , 75 ] ;
42289: LD_ADDR_VAR 0 9
42293: PUSH
42294: LD_INT 100
42296: PUSH
42297: LD_INT 50
42299: PUSH
42300: LD_INT 75
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42308: LD_VAR 0 6
42312: PPUSH
42313: CALL_OW 257
42317: PUSH
42318: LD_INT 15
42320: EQUAL
42321: IFFALSE 42342
// points := [ 10 , 5 , 3 ] ;
42323: LD_ADDR_VAR 0 9
42327: PUSH
42328: LD_INT 10
42330: PUSH
42331: LD_INT 5
42333: PUSH
42334: LD_INT 3
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42342: LD_VAR 0 6
42346: PPUSH
42347: CALL_OW 257
42351: PUSH
42352: LD_INT 14
42354: EQUAL
42355: IFFALSE 42376
// points := [ 10 , 0 , 0 ] ;
42357: LD_ADDR_VAR 0 9
42361: PUSH
42362: LD_INT 10
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42376: LD_VAR 0 6
42380: PPUSH
42381: CALL_OW 257
42385: PUSH
42386: LD_INT 11
42388: EQUAL
42389: IFFALSE 42410
// points := [ 30 , 10 , 5 ] ;
42391: LD_ADDR_VAR 0 9
42395: PUSH
42396: LD_INT 30
42398: PUSH
42399: LD_INT 10
42401: PUSH
42402: LD_INT 5
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: LIST
42409: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42410: LD_VAR 0 1
42414: PPUSH
42415: LD_INT 5
42417: PPUSH
42418: CALL_OW 321
42422: PUSH
42423: LD_INT 2
42425: EQUAL
42426: IFFALSE 42443
// bpoints := bpoints * 1.8 ;
42428: LD_ADDR_VAR 0 10
42432: PUSH
42433: LD_VAR 0 10
42437: PUSH
42438: LD_REAL  1.80000000000000E+0000
42441: MUL
42442: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42443: LD_VAR 0 6
42447: PPUSH
42448: CALL_OW 257
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: LD_INT 4
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: IN
42471: PUSH
42472: LD_VAR 0 1
42476: PPUSH
42477: LD_INT 51
42479: PPUSH
42480: CALL_OW 321
42484: PUSH
42485: LD_INT 2
42487: EQUAL
42488: AND
42489: IFFALSE 42506
// bpoints := bpoints * 1.2 ;
42491: LD_ADDR_VAR 0 10
42495: PUSH
42496: LD_VAR 0 10
42500: PUSH
42501: LD_REAL  1.20000000000000E+0000
42504: MUL
42505: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42506: LD_VAR 0 6
42510: PPUSH
42511: CALL_OW 257
42515: PUSH
42516: LD_INT 5
42518: PUSH
42519: LD_INT 7
42521: PUSH
42522: LD_INT 9
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: IN
42530: PUSH
42531: LD_VAR 0 1
42535: PPUSH
42536: LD_INT 52
42538: PPUSH
42539: CALL_OW 321
42543: PUSH
42544: LD_INT 2
42546: EQUAL
42547: AND
42548: IFFALSE 42565
// bpoints := bpoints * 1.5 ;
42550: LD_ADDR_VAR 0 10
42554: PUSH
42555: LD_VAR 0 10
42559: PUSH
42560: LD_REAL  1.50000000000000E+0000
42563: MUL
42564: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42565: LD_VAR 0 1
42569: PPUSH
42570: LD_INT 66
42572: PPUSH
42573: CALL_OW 321
42577: PUSH
42578: LD_INT 2
42580: EQUAL
42581: IFFALSE 42598
// bpoints := bpoints * 1.1 ;
42583: LD_ADDR_VAR 0 10
42587: PUSH
42588: LD_VAR 0 10
42592: PUSH
42593: LD_REAL  1.10000000000000E+0000
42596: MUL
42597: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42598: LD_ADDR_VAR 0 10
42602: PUSH
42603: LD_VAR 0 10
42607: PUSH
42608: LD_VAR 0 6
42612: PPUSH
42613: LD_INT 1
42615: PPUSH
42616: CALL_OW 259
42620: PUSH
42621: LD_REAL  1.15000000000000E+0000
42624: MUL
42625: MUL
42626: ST_TO_ADDR
// end ; unit_vehicle :
42627: GO 43451
42629: LD_INT 2
42631: DOUBLE
42632: EQUAL
42633: IFTRUE 42637
42635: GO 43439
42637: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42638: LD_VAR 0 6
42642: PPUSH
42643: CALL_OW 264
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: LD_INT 42
42653: PUSH
42654: LD_INT 24
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: IN
42662: IFFALSE 42683
// points := [ 25 , 5 , 3 ] ;
42664: LD_ADDR_VAR 0 9
42668: PUSH
42669: LD_INT 25
42671: PUSH
42672: LD_INT 5
42674: PUSH
42675: LD_INT 3
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42683: LD_VAR 0 6
42687: PPUSH
42688: CALL_OW 264
42692: PUSH
42693: LD_INT 4
42695: PUSH
42696: LD_INT 43
42698: PUSH
42699: LD_INT 25
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: IN
42707: IFFALSE 42728
// points := [ 40 , 15 , 5 ] ;
42709: LD_ADDR_VAR 0 9
42713: PUSH
42714: LD_INT 40
42716: PUSH
42717: LD_INT 15
42719: PUSH
42720: LD_INT 5
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: LIST
42727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42728: LD_VAR 0 6
42732: PPUSH
42733: CALL_OW 264
42737: PUSH
42738: LD_INT 3
42740: PUSH
42741: LD_INT 23
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: IN
42748: IFFALSE 42769
// points := [ 7 , 25 , 8 ] ;
42750: LD_ADDR_VAR 0 9
42754: PUSH
42755: LD_INT 7
42757: PUSH
42758: LD_INT 25
42760: PUSH
42761: LD_INT 8
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42769: LD_VAR 0 6
42773: PPUSH
42774: CALL_OW 264
42778: PUSH
42779: LD_INT 5
42781: PUSH
42782: LD_INT 27
42784: PUSH
42785: LD_INT 44
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: LIST
42792: IN
42793: IFFALSE 42814
// points := [ 14 , 50 , 16 ] ;
42795: LD_ADDR_VAR 0 9
42799: PUSH
42800: LD_INT 14
42802: PUSH
42803: LD_INT 50
42805: PUSH
42806: LD_INT 16
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42814: LD_VAR 0 6
42818: PPUSH
42819: CALL_OW 264
42823: PUSH
42824: LD_INT 6
42826: PUSH
42827: LD_INT 46
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: IN
42834: IFFALSE 42855
// points := [ 32 , 120 , 70 ] ;
42836: LD_ADDR_VAR 0 9
42840: PUSH
42841: LD_INT 32
42843: PUSH
42844: LD_INT 120
42846: PUSH
42847: LD_INT 70
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42855: LD_VAR 0 6
42859: PPUSH
42860: CALL_OW 264
42864: PUSH
42865: LD_INT 7
42867: PUSH
42868: LD_INT 28
42870: PUSH
42871: LD_INT 45
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: IN
42879: IFFALSE 42900
// points := [ 35 , 20 , 45 ] ;
42881: LD_ADDR_VAR 0 9
42885: PUSH
42886: LD_INT 35
42888: PUSH
42889: LD_INT 20
42891: PUSH
42892: LD_INT 45
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42900: LD_VAR 0 6
42904: PPUSH
42905: CALL_OW 264
42909: PUSH
42910: LD_INT 47
42912: PUSH
42913: EMPTY
42914: LIST
42915: IN
42916: IFFALSE 42937
// points := [ 67 , 45 , 75 ] ;
42918: LD_ADDR_VAR 0 9
42922: PUSH
42923: LD_INT 67
42925: PUSH
42926: LD_INT 45
42928: PUSH
42929: LD_INT 75
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42937: LD_VAR 0 6
42941: PPUSH
42942: CALL_OW 264
42946: PUSH
42947: LD_INT 26
42949: PUSH
42950: EMPTY
42951: LIST
42952: IN
42953: IFFALSE 42974
// points := [ 120 , 30 , 80 ] ;
42955: LD_ADDR_VAR 0 9
42959: PUSH
42960: LD_INT 120
42962: PUSH
42963: LD_INT 30
42965: PUSH
42966: LD_INT 80
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: LIST
42973: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42974: LD_VAR 0 6
42978: PPUSH
42979: CALL_OW 264
42983: PUSH
42984: LD_INT 22
42986: PUSH
42987: EMPTY
42988: LIST
42989: IN
42990: IFFALSE 43011
// points := [ 40 , 1 , 1 ] ;
42992: LD_ADDR_VAR 0 9
42996: PUSH
42997: LD_INT 40
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43011: LD_VAR 0 6
43015: PPUSH
43016: CALL_OW 264
43020: PUSH
43021: LD_INT 29
43023: PUSH
43024: EMPTY
43025: LIST
43026: IN
43027: IFFALSE 43048
// points := [ 70 , 200 , 400 ] ;
43029: LD_ADDR_VAR 0 9
43033: PUSH
43034: LD_INT 70
43036: PUSH
43037: LD_INT 200
43039: PUSH
43040: LD_INT 400
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43048: LD_VAR 0 6
43052: PPUSH
43053: CALL_OW 264
43057: PUSH
43058: LD_INT 14
43060: PUSH
43061: LD_INT 53
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: IN
43068: IFFALSE 43089
// points := [ 40 , 10 , 20 ] ;
43070: LD_ADDR_VAR 0 9
43074: PUSH
43075: LD_INT 40
43077: PUSH
43078: LD_INT 10
43080: PUSH
43081: LD_INT 20
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43089: LD_VAR 0 6
43093: PPUSH
43094: CALL_OW 264
43098: PUSH
43099: LD_INT 9
43101: PUSH
43102: EMPTY
43103: LIST
43104: IN
43105: IFFALSE 43126
// points := [ 5 , 70 , 20 ] ;
43107: LD_ADDR_VAR 0 9
43111: PUSH
43112: LD_INT 5
43114: PUSH
43115: LD_INT 70
43117: PUSH
43118: LD_INT 20
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43126: LD_VAR 0 6
43130: PPUSH
43131: CALL_OW 264
43135: PUSH
43136: LD_INT 10
43138: PUSH
43139: EMPTY
43140: LIST
43141: IN
43142: IFFALSE 43163
// points := [ 35 , 110 , 70 ] ;
43144: LD_ADDR_VAR 0 9
43148: PUSH
43149: LD_INT 35
43151: PUSH
43152: LD_INT 110
43154: PUSH
43155: LD_INT 70
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43163: LD_VAR 0 6
43167: PPUSH
43168: CALL_OW 265
43172: PUSH
43173: LD_INT 25
43175: EQUAL
43176: IFFALSE 43197
// points := [ 80 , 65 , 100 ] ;
43178: LD_ADDR_VAR 0 9
43182: PUSH
43183: LD_INT 80
43185: PUSH
43186: LD_INT 65
43188: PUSH
43189: LD_INT 100
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43197: LD_VAR 0 6
43201: PPUSH
43202: CALL_OW 263
43206: PUSH
43207: LD_INT 1
43209: EQUAL
43210: IFFALSE 43245
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43212: LD_ADDR_VAR 0 10
43216: PUSH
43217: LD_VAR 0 10
43221: PUSH
43222: LD_VAR 0 6
43226: PPUSH
43227: CALL_OW 311
43231: PPUSH
43232: LD_INT 3
43234: PPUSH
43235: CALL_OW 259
43239: PUSH
43240: LD_INT 4
43242: MUL
43243: MUL
43244: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43245: LD_VAR 0 6
43249: PPUSH
43250: CALL_OW 263
43254: PUSH
43255: LD_INT 2
43257: EQUAL
43258: IFFALSE 43309
// begin j := IsControledBy ( i ) ;
43260: LD_ADDR_VAR 0 7
43264: PUSH
43265: LD_VAR 0 6
43269: PPUSH
43270: CALL_OW 312
43274: ST_TO_ADDR
// if j then
43275: LD_VAR 0 7
43279: IFFALSE 43309
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43281: LD_ADDR_VAR 0 10
43285: PUSH
43286: LD_VAR 0 10
43290: PUSH
43291: LD_VAR 0 7
43295: PPUSH
43296: LD_INT 3
43298: PPUSH
43299: CALL_OW 259
43303: PUSH
43304: LD_INT 3
43306: MUL
43307: MUL
43308: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43309: LD_VAR 0 6
43313: PPUSH
43314: CALL_OW 264
43318: PUSH
43319: LD_INT 5
43321: PUSH
43322: LD_INT 6
43324: PUSH
43325: LD_INT 46
43327: PUSH
43328: LD_INT 44
43330: PUSH
43331: LD_INT 47
43333: PUSH
43334: LD_INT 45
43336: PUSH
43337: LD_INT 28
43339: PUSH
43340: LD_INT 7
43342: PUSH
43343: LD_INT 27
43345: PUSH
43346: LD_INT 29
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: IN
43361: PUSH
43362: LD_VAR 0 1
43366: PPUSH
43367: LD_INT 52
43369: PPUSH
43370: CALL_OW 321
43374: PUSH
43375: LD_INT 2
43377: EQUAL
43378: AND
43379: IFFALSE 43396
// bpoints := bpoints * 1.2 ;
43381: LD_ADDR_VAR 0 10
43385: PUSH
43386: LD_VAR 0 10
43390: PUSH
43391: LD_REAL  1.20000000000000E+0000
43394: MUL
43395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43396: LD_VAR 0 6
43400: PPUSH
43401: CALL_OW 264
43405: PUSH
43406: LD_INT 6
43408: PUSH
43409: LD_INT 46
43411: PUSH
43412: LD_INT 47
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: LIST
43419: IN
43420: IFFALSE 43437
// bpoints := bpoints * 1.2 ;
43422: LD_ADDR_VAR 0 10
43426: PUSH
43427: LD_VAR 0 10
43431: PUSH
43432: LD_REAL  1.20000000000000E+0000
43435: MUL
43436: ST_TO_ADDR
// end ; unit_building :
43437: GO 43451
43439: LD_INT 3
43441: DOUBLE
43442: EQUAL
43443: IFTRUE 43447
43445: GO 43450
43447: POP
// ; end ;
43448: GO 43451
43450: POP
// for j = 1 to 3 do
43451: LD_ADDR_VAR 0 7
43455: PUSH
43456: DOUBLE
43457: LD_INT 1
43459: DEC
43460: ST_TO_ADDR
43461: LD_INT 3
43463: PUSH
43464: FOR_TO
43465: IFFALSE 43518
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43467: LD_ADDR_VAR 0 5
43471: PUSH
43472: LD_VAR 0 5
43476: PPUSH
43477: LD_VAR 0 7
43481: PPUSH
43482: LD_VAR 0 5
43486: PUSH
43487: LD_VAR 0 7
43491: ARRAY
43492: PUSH
43493: LD_VAR 0 9
43497: PUSH
43498: LD_VAR 0 7
43502: ARRAY
43503: PUSH
43504: LD_VAR 0 10
43508: MUL
43509: PLUS
43510: PPUSH
43511: CALL_OW 1
43515: ST_TO_ADDR
43516: GO 43464
43518: POP
43519: POP
// end ;
43520: GO 42003
43522: POP
43523: POP
// result := Replace ( result , 4 , tmp ) ;
43524: LD_ADDR_VAR 0 5
43528: PUSH
43529: LD_VAR 0 5
43533: PPUSH
43534: LD_INT 4
43536: PPUSH
43537: LD_VAR 0 8
43541: PPUSH
43542: CALL_OW 1
43546: ST_TO_ADDR
// end ;
43547: LD_VAR 0 5
43551: RET
// export function DangerAtRange ( unit , range ) ; begin
43552: LD_INT 0
43554: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43555: LD_ADDR_VAR 0 3
43559: PUSH
43560: LD_VAR 0 1
43564: PPUSH
43565: CALL_OW 255
43569: PPUSH
43570: LD_VAR 0 1
43574: PPUSH
43575: CALL_OW 250
43579: PPUSH
43580: LD_VAR 0 1
43584: PPUSH
43585: CALL_OW 251
43589: PPUSH
43590: LD_VAR 0 2
43594: PPUSH
43595: CALL 41855 0 4
43599: ST_TO_ADDR
// end ;
43600: LD_VAR 0 3
43604: RET
// export function DangerInArea ( side , area ) ; begin
43605: LD_INT 0
43607: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43608: LD_ADDR_VAR 0 3
43612: PUSH
43613: LD_VAR 0 2
43617: PPUSH
43618: LD_INT 81
43620: PUSH
43621: LD_VAR 0 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PPUSH
43630: CALL_OW 70
43634: ST_TO_ADDR
// end ;
43635: LD_VAR 0 3
43639: RET
// export function IsExtension ( b ) ; begin
43640: LD_INT 0
43642: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43643: LD_ADDR_VAR 0 2
43647: PUSH
43648: LD_VAR 0 1
43652: PUSH
43653: LD_INT 23
43655: PUSH
43656: LD_INT 20
43658: PUSH
43659: LD_INT 22
43661: PUSH
43662: LD_INT 17
43664: PUSH
43665: LD_INT 24
43667: PUSH
43668: LD_INT 21
43670: PUSH
43671: LD_INT 19
43673: PUSH
43674: LD_INT 16
43676: PUSH
43677: LD_INT 25
43679: PUSH
43680: LD_INT 18
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: IN
43695: ST_TO_ADDR
// end ;
43696: LD_VAR 0 2
43700: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
43701: LD_INT 0
43703: PPUSH
43704: PPUSH
43705: PPUSH
// result := [ ] ;
43706: LD_ADDR_VAR 0 3
43710: PUSH
43711: EMPTY
43712: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43713: LD_ADDR_VAR 0 4
43717: PUSH
43718: LD_VAR 0 2
43722: PPUSH
43723: LD_INT 21
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PPUSH
43733: CALL_OW 70
43737: ST_TO_ADDR
// if not tmp then
43738: LD_VAR 0 4
43742: NOT
43743: IFFALSE 43747
// exit ;
43745: GO 43805
// for i in tmp do
43747: LD_ADDR_VAR 0 5
43751: PUSH
43752: LD_VAR 0 4
43756: PUSH
43757: FOR_IN
43758: IFFALSE 43793
// if GetBase ( i ) <> base then
43760: LD_VAR 0 5
43764: PPUSH
43765: CALL_OW 274
43769: PUSH
43770: LD_VAR 0 1
43774: NONEQUAL
43775: IFFALSE 43791
// ComLinkToBase ( base , i ) ;
43777: LD_VAR 0 1
43781: PPUSH
43782: LD_VAR 0 5
43786: PPUSH
43787: CALL_OW 169
43791: GO 43757
43793: POP
43794: POP
// result := tmp ;
43795: LD_ADDR_VAR 0 3
43799: PUSH
43800: LD_VAR 0 4
43804: ST_TO_ADDR
// end ;
43805: LD_VAR 0 3
43809: RET
// export function ComComplete ( unit , b ) ; var i ; begin
43810: LD_INT 0
43812: PPUSH
43813: PPUSH
// if BuildingStatus ( b ) = bs_build then
43814: LD_VAR 0 2
43818: PPUSH
43819: CALL_OW 461
43823: PUSH
43824: LD_INT 1
43826: EQUAL
43827: IFFALSE 43887
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43829: LD_VAR 0 1
43833: PPUSH
43834: LD_STRING h
43836: PUSH
43837: LD_VAR 0 2
43841: PPUSH
43842: CALL_OW 250
43846: PUSH
43847: LD_VAR 0 2
43851: PPUSH
43852: CALL_OW 251
43856: PUSH
43857: LD_VAR 0 2
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: PUSH
43880: EMPTY
43881: LIST
43882: PPUSH
43883: CALL_OW 446
// end ;
43887: LD_VAR 0 3
43891: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43892: LD_INT 0
43894: PPUSH
43895: PPUSH
43896: PPUSH
43897: PPUSH
43898: PPUSH
43899: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43900: LD_VAR 0 1
43904: NOT
43905: PUSH
43906: LD_VAR 0 1
43910: PPUSH
43911: CALL_OW 263
43915: PUSH
43916: LD_INT 2
43918: EQUAL
43919: NOT
43920: OR
43921: IFFALSE 43925
// exit ;
43923: GO 44241
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43925: LD_ADDR_VAR 0 6
43929: PUSH
43930: LD_INT 22
43932: PUSH
43933: LD_VAR 0 1
43937: PPUSH
43938: CALL_OW 255
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 30
43952: PUSH
43953: LD_INT 36
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 34
43962: PUSH
43963: LD_INT 31
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PPUSH
43979: CALL_OW 69
43983: ST_TO_ADDR
// if not tmp then
43984: LD_VAR 0 6
43988: NOT
43989: IFFALSE 43993
// exit ;
43991: GO 44241
// result := [ ] ;
43993: LD_ADDR_VAR 0 2
43997: PUSH
43998: EMPTY
43999: ST_TO_ADDR
// for i in tmp do
44000: LD_ADDR_VAR 0 3
44004: PUSH
44005: LD_VAR 0 6
44009: PUSH
44010: FOR_IN
44011: IFFALSE 44082
// begin t := UnitsInside ( i ) ;
44013: LD_ADDR_VAR 0 4
44017: PUSH
44018: LD_VAR 0 3
44022: PPUSH
44023: CALL_OW 313
44027: ST_TO_ADDR
// if t then
44028: LD_VAR 0 4
44032: IFFALSE 44080
// for j in t do
44034: LD_ADDR_VAR 0 7
44038: PUSH
44039: LD_VAR 0 4
44043: PUSH
44044: FOR_IN
44045: IFFALSE 44078
// result := Insert ( result , result + 1 , j ) ;
44047: LD_ADDR_VAR 0 2
44051: PUSH
44052: LD_VAR 0 2
44056: PPUSH
44057: LD_VAR 0 2
44061: PUSH
44062: LD_INT 1
44064: PLUS
44065: PPUSH
44066: LD_VAR 0 7
44070: PPUSH
44071: CALL_OW 2
44075: ST_TO_ADDR
44076: GO 44044
44078: POP
44079: POP
// end ;
44080: GO 44010
44082: POP
44083: POP
// if not result then
44084: LD_VAR 0 2
44088: NOT
44089: IFFALSE 44093
// exit ;
44091: GO 44241
// mech := result [ 1 ] ;
44093: LD_ADDR_VAR 0 5
44097: PUSH
44098: LD_VAR 0 2
44102: PUSH
44103: LD_INT 1
44105: ARRAY
44106: ST_TO_ADDR
// if result > 1 then
44107: LD_VAR 0 2
44111: PUSH
44112: LD_INT 1
44114: GREATER
44115: IFFALSE 44227
// for i = 2 to result do
44117: LD_ADDR_VAR 0 3
44121: PUSH
44122: DOUBLE
44123: LD_INT 2
44125: DEC
44126: ST_TO_ADDR
44127: LD_VAR 0 2
44131: PUSH
44132: FOR_TO
44133: IFFALSE 44225
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44135: LD_ADDR_VAR 0 4
44139: PUSH
44140: LD_VAR 0 2
44144: PUSH
44145: LD_VAR 0 3
44149: ARRAY
44150: PPUSH
44151: LD_INT 3
44153: PPUSH
44154: CALL_OW 259
44158: PUSH
44159: LD_VAR 0 2
44163: PUSH
44164: LD_VAR 0 3
44168: ARRAY
44169: PPUSH
44170: CALL_OW 432
44174: MINUS
44175: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44176: LD_VAR 0 4
44180: PUSH
44181: LD_VAR 0 5
44185: PPUSH
44186: LD_INT 3
44188: PPUSH
44189: CALL_OW 259
44193: PUSH
44194: LD_VAR 0 5
44198: PPUSH
44199: CALL_OW 432
44203: MINUS
44204: GREATEREQUAL
44205: IFFALSE 44223
// mech := result [ i ] ;
44207: LD_ADDR_VAR 0 5
44211: PUSH
44212: LD_VAR 0 2
44216: PUSH
44217: LD_VAR 0 3
44221: ARRAY
44222: ST_TO_ADDR
// end ;
44223: GO 44132
44225: POP
44226: POP
// ComLinkTo ( vehicle , mech ) ;
44227: LD_VAR 0 1
44231: PPUSH
44232: LD_VAR 0 5
44236: PPUSH
44237: CALL_OW 135
// end ;
44241: LD_VAR 0 2
44245: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44246: LD_INT 0
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
// result := [ ] ;
44261: LD_ADDR_VAR 0 7
44265: PUSH
44266: EMPTY
44267: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44268: LD_VAR 0 1
44272: PPUSH
44273: CALL_OW 266
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: IN
44288: NOT
44289: IFFALSE 44293
// exit ;
44291: GO 45924
// if name then
44293: LD_VAR 0 3
44297: IFFALSE 44313
// SetBName ( base_dep , name ) ;
44299: LD_VAR 0 1
44303: PPUSH
44304: LD_VAR 0 3
44308: PPUSH
44309: CALL_OW 500
// base := GetBase ( base_dep ) ;
44313: LD_ADDR_VAR 0 15
44317: PUSH
44318: LD_VAR 0 1
44322: PPUSH
44323: CALL_OW 274
44327: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44328: LD_ADDR_VAR 0 16
44332: PUSH
44333: LD_VAR 0 1
44337: PPUSH
44338: CALL_OW 255
44342: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44343: LD_ADDR_VAR 0 17
44347: PUSH
44348: LD_VAR 0 1
44352: PPUSH
44353: CALL_OW 248
44357: ST_TO_ADDR
// if sources then
44358: LD_VAR 0 5
44362: IFFALSE 44409
// for i = 1 to 3 do
44364: LD_ADDR_VAR 0 8
44368: PUSH
44369: DOUBLE
44370: LD_INT 1
44372: DEC
44373: ST_TO_ADDR
44374: LD_INT 3
44376: PUSH
44377: FOR_TO
44378: IFFALSE 44407
// AddResourceType ( base , i , sources [ i ] ) ;
44380: LD_VAR 0 15
44384: PPUSH
44385: LD_VAR 0 8
44389: PPUSH
44390: LD_VAR 0 5
44394: PUSH
44395: LD_VAR 0 8
44399: ARRAY
44400: PPUSH
44401: CALL_OW 276
44405: GO 44377
44407: POP
44408: POP
// buildings := GetBaseBuildings ( base , area ) ;
44409: LD_ADDR_VAR 0 18
44413: PUSH
44414: LD_VAR 0 15
44418: PPUSH
44419: LD_VAR 0 2
44423: PPUSH
44424: CALL 43701 0 2
44428: ST_TO_ADDR
// InitHc ;
44429: CALL_OW 19
// InitUc ;
44433: CALL_OW 18
// uc_side := side ;
44437: LD_ADDR_OWVAR 20
44441: PUSH
44442: LD_VAR 0 16
44446: ST_TO_ADDR
// uc_nation := nation ;
44447: LD_ADDR_OWVAR 21
44451: PUSH
44452: LD_VAR 0 17
44456: ST_TO_ADDR
// if buildings then
44457: LD_VAR 0 18
44461: IFFALSE 45783
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44463: LD_ADDR_VAR 0 19
44467: PUSH
44468: LD_VAR 0 18
44472: PPUSH
44473: LD_INT 2
44475: PUSH
44476: LD_INT 30
44478: PUSH
44479: LD_INT 29
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 30
44488: PUSH
44489: LD_INT 30
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: LIST
44500: PPUSH
44501: CALL_OW 72
44505: ST_TO_ADDR
// if tmp then
44506: LD_VAR 0 19
44510: IFFALSE 44558
// for i in tmp do
44512: LD_ADDR_VAR 0 8
44516: PUSH
44517: LD_VAR 0 19
44521: PUSH
44522: FOR_IN
44523: IFFALSE 44556
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44525: LD_VAR 0 8
44529: PPUSH
44530: CALL_OW 250
44534: PPUSH
44535: LD_VAR 0 8
44539: PPUSH
44540: CALL_OW 251
44544: PPUSH
44545: LD_VAR 0 16
44549: PPUSH
44550: CALL_OW 441
44554: GO 44522
44556: POP
44557: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44558: LD_VAR 0 18
44562: PPUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 30
44568: PUSH
44569: LD_INT 32
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 30
44578: PUSH
44579: LD_INT 33
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: LIST
44590: PPUSH
44591: CALL_OW 72
44595: IFFALSE 44683
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44597: LD_ADDR_VAR 0 8
44601: PUSH
44602: LD_VAR 0 18
44606: PPUSH
44607: LD_INT 2
44609: PUSH
44610: LD_INT 30
44612: PUSH
44613: LD_INT 32
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 30
44622: PUSH
44623: LD_INT 33
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: PPUSH
44635: CALL_OW 72
44639: PUSH
44640: FOR_IN
44641: IFFALSE 44681
// begin if not GetBWeapon ( i ) then
44643: LD_VAR 0 8
44647: PPUSH
44648: CALL_OW 269
44652: NOT
44653: IFFALSE 44679
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44655: LD_VAR 0 8
44659: PPUSH
44660: LD_VAR 0 8
44664: PPUSH
44665: LD_VAR 0 2
44669: PPUSH
44670: CALL 45929 0 2
44674: PPUSH
44675: CALL_OW 431
// end ;
44679: GO 44640
44681: POP
44682: POP
// end ; for i = 1 to personel do
44683: LD_ADDR_VAR 0 8
44687: PUSH
44688: DOUBLE
44689: LD_INT 1
44691: DEC
44692: ST_TO_ADDR
44693: LD_VAR 0 6
44697: PUSH
44698: FOR_TO
44699: IFFALSE 45763
// begin if i > 4 then
44701: LD_VAR 0 8
44705: PUSH
44706: LD_INT 4
44708: GREATER
44709: IFFALSE 44713
// break ;
44711: GO 45763
// case i of 1 :
44713: LD_VAR 0 8
44717: PUSH
44718: LD_INT 1
44720: DOUBLE
44721: EQUAL
44722: IFTRUE 44726
44724: GO 44806
44726: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44727: LD_ADDR_VAR 0 12
44731: PUSH
44732: LD_VAR 0 18
44736: PPUSH
44737: LD_INT 22
44739: PUSH
44740: LD_VAR 0 16
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 58
44751: PUSH
44752: EMPTY
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 30
44760: PUSH
44761: LD_INT 32
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 30
44770: PUSH
44771: LD_INT 4
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 30
44780: PUSH
44781: LD_INT 5
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: PPUSH
44799: CALL_OW 72
44803: ST_TO_ADDR
44804: GO 45028
44806: LD_INT 2
44808: DOUBLE
44809: EQUAL
44810: IFTRUE 44814
44812: GO 44876
44814: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44815: LD_ADDR_VAR 0 12
44819: PUSH
44820: LD_VAR 0 18
44824: PPUSH
44825: LD_INT 22
44827: PUSH
44828: LD_VAR 0 16
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: LD_INT 30
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 30
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PPUSH
44869: CALL_OW 72
44873: ST_TO_ADDR
44874: GO 45028
44876: LD_INT 3
44878: DOUBLE
44879: EQUAL
44880: IFTRUE 44884
44882: GO 44946
44884: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44885: LD_ADDR_VAR 0 12
44889: PUSH
44890: LD_VAR 0 18
44894: PPUSH
44895: LD_INT 22
44897: PUSH
44898: LD_VAR 0 16
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 30
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 30
44922: PUSH
44923: LD_INT 3
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PPUSH
44939: CALL_OW 72
44943: ST_TO_ADDR
44944: GO 45028
44946: LD_INT 4
44948: DOUBLE
44949: EQUAL
44950: IFTRUE 44954
44952: GO 45027
44954: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44955: LD_ADDR_VAR 0 12
44959: PUSH
44960: LD_VAR 0 18
44964: PPUSH
44965: LD_INT 22
44967: PUSH
44968: LD_VAR 0 16
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: LD_INT 30
44982: PUSH
44983: LD_INT 6
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 30
44992: PUSH
44993: LD_INT 7
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 30
45002: PUSH
45003: LD_INT 8
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PPUSH
45020: CALL_OW 72
45024: ST_TO_ADDR
45025: GO 45028
45027: POP
// if i = 1 then
45028: LD_VAR 0 8
45032: PUSH
45033: LD_INT 1
45035: EQUAL
45036: IFFALSE 45147
// begin tmp := [ ] ;
45038: LD_ADDR_VAR 0 19
45042: PUSH
45043: EMPTY
45044: ST_TO_ADDR
// for j in f do
45045: LD_ADDR_VAR 0 9
45049: PUSH
45050: LD_VAR 0 12
45054: PUSH
45055: FOR_IN
45056: IFFALSE 45129
// if GetBType ( j ) = b_bunker then
45058: LD_VAR 0 9
45062: PPUSH
45063: CALL_OW 266
45067: PUSH
45068: LD_INT 32
45070: EQUAL
45071: IFFALSE 45098
// tmp := Insert ( tmp , 1 , j ) else
45073: LD_ADDR_VAR 0 19
45077: PUSH
45078: LD_VAR 0 19
45082: PPUSH
45083: LD_INT 1
45085: PPUSH
45086: LD_VAR 0 9
45090: PPUSH
45091: CALL_OW 2
45095: ST_TO_ADDR
45096: GO 45127
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45098: LD_ADDR_VAR 0 19
45102: PUSH
45103: LD_VAR 0 19
45107: PPUSH
45108: LD_VAR 0 19
45112: PUSH
45113: LD_INT 1
45115: PLUS
45116: PPUSH
45117: LD_VAR 0 9
45121: PPUSH
45122: CALL_OW 2
45126: ST_TO_ADDR
45127: GO 45055
45129: POP
45130: POP
// if tmp then
45131: LD_VAR 0 19
45135: IFFALSE 45147
// f := tmp ;
45137: LD_ADDR_VAR 0 12
45141: PUSH
45142: LD_VAR 0 19
45146: ST_TO_ADDR
// end ; x := personel [ i ] ;
45147: LD_ADDR_VAR 0 13
45151: PUSH
45152: LD_VAR 0 6
45156: PUSH
45157: LD_VAR 0 8
45161: ARRAY
45162: ST_TO_ADDR
// if x = - 1 then
45163: LD_VAR 0 13
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: EQUAL
45172: IFFALSE 45381
// begin for j in f do
45174: LD_ADDR_VAR 0 9
45178: PUSH
45179: LD_VAR 0 12
45183: PUSH
45184: FOR_IN
45185: IFFALSE 45377
// repeat InitHc ;
45187: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45191: LD_VAR 0 9
45195: PPUSH
45196: CALL_OW 266
45200: PUSH
45201: LD_INT 5
45203: EQUAL
45204: IFFALSE 45274
// begin if UnitsInside ( j ) < 3 then
45206: LD_VAR 0 9
45210: PPUSH
45211: CALL_OW 313
45215: PUSH
45216: LD_INT 3
45218: LESS
45219: IFFALSE 45255
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45221: LD_INT 0
45223: PPUSH
45224: LD_INT 5
45226: PUSH
45227: LD_INT 8
45229: PUSH
45230: LD_INT 9
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: PUSH
45238: LD_VAR 0 17
45242: ARRAY
45243: PPUSH
45244: LD_VAR 0 4
45248: PPUSH
45249: CALL_OW 380
45253: GO 45272
// PrepareHuman ( false , i , skill ) ;
45255: LD_INT 0
45257: PPUSH
45258: LD_VAR 0 8
45262: PPUSH
45263: LD_VAR 0 4
45267: PPUSH
45268: CALL_OW 380
// end else
45272: GO 45291
// PrepareHuman ( false , i , skill ) ;
45274: LD_INT 0
45276: PPUSH
45277: LD_VAR 0 8
45281: PPUSH
45282: LD_VAR 0 4
45286: PPUSH
45287: CALL_OW 380
// un := CreateHuman ;
45291: LD_ADDR_VAR 0 14
45295: PUSH
45296: CALL_OW 44
45300: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45301: LD_ADDR_VAR 0 7
45305: PUSH
45306: LD_VAR 0 7
45310: PPUSH
45311: LD_INT 1
45313: PPUSH
45314: LD_VAR 0 14
45318: PPUSH
45319: CALL_OW 2
45323: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45324: LD_VAR 0 14
45328: PPUSH
45329: LD_VAR 0 9
45333: PPUSH
45334: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45338: LD_VAR 0 9
45342: PPUSH
45343: CALL_OW 313
45347: PUSH
45348: LD_INT 6
45350: EQUAL
45351: PUSH
45352: LD_VAR 0 9
45356: PPUSH
45357: CALL_OW 266
45361: PUSH
45362: LD_INT 32
45364: PUSH
45365: LD_INT 31
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: IN
45372: OR
45373: IFFALSE 45187
45375: GO 45184
45377: POP
45378: POP
// end else
45379: GO 45761
// for j = 1 to x do
45381: LD_ADDR_VAR 0 9
45385: PUSH
45386: DOUBLE
45387: LD_INT 1
45389: DEC
45390: ST_TO_ADDR
45391: LD_VAR 0 13
45395: PUSH
45396: FOR_TO
45397: IFFALSE 45759
// begin InitHc ;
45399: CALL_OW 19
// if not f then
45403: LD_VAR 0 12
45407: NOT
45408: IFFALSE 45497
// begin PrepareHuman ( false , i , skill ) ;
45410: LD_INT 0
45412: PPUSH
45413: LD_VAR 0 8
45417: PPUSH
45418: LD_VAR 0 4
45422: PPUSH
45423: CALL_OW 380
// un := CreateHuman ;
45427: LD_ADDR_VAR 0 14
45431: PUSH
45432: CALL_OW 44
45436: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45437: LD_ADDR_VAR 0 7
45441: PUSH
45442: LD_VAR 0 7
45446: PPUSH
45447: LD_INT 1
45449: PPUSH
45450: LD_VAR 0 14
45454: PPUSH
45455: CALL_OW 2
45459: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45460: LD_VAR 0 14
45464: PPUSH
45465: LD_VAR 0 1
45469: PPUSH
45470: CALL_OW 250
45474: PPUSH
45475: LD_VAR 0 1
45479: PPUSH
45480: CALL_OW 251
45484: PPUSH
45485: LD_INT 10
45487: PPUSH
45488: LD_INT 0
45490: PPUSH
45491: CALL_OW 50
// continue ;
45495: GO 45396
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45497: LD_VAR 0 12
45501: PUSH
45502: LD_INT 1
45504: ARRAY
45505: PPUSH
45506: CALL_OW 313
45510: PUSH
45511: LD_VAR 0 12
45515: PUSH
45516: LD_INT 1
45518: ARRAY
45519: PPUSH
45520: CALL_OW 266
45524: PUSH
45525: LD_INT 32
45527: PUSH
45528: LD_INT 31
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: IN
45535: AND
45536: PUSH
45537: LD_VAR 0 12
45541: PUSH
45542: LD_INT 1
45544: ARRAY
45545: PPUSH
45546: CALL_OW 313
45550: PUSH
45551: LD_INT 6
45553: EQUAL
45554: OR
45555: IFFALSE 45575
// f := Delete ( f , 1 ) ;
45557: LD_ADDR_VAR 0 12
45561: PUSH
45562: LD_VAR 0 12
45566: PPUSH
45567: LD_INT 1
45569: PPUSH
45570: CALL_OW 3
45574: ST_TO_ADDR
// if not f then
45575: LD_VAR 0 12
45579: NOT
45580: IFFALSE 45598
// begin x := x + 2 ;
45582: LD_ADDR_VAR 0 13
45586: PUSH
45587: LD_VAR 0 13
45591: PUSH
45592: LD_INT 2
45594: PLUS
45595: ST_TO_ADDR
// continue ;
45596: GO 45396
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45598: LD_VAR 0 12
45602: PUSH
45603: LD_INT 1
45605: ARRAY
45606: PPUSH
45607: CALL_OW 266
45611: PUSH
45612: LD_INT 5
45614: EQUAL
45615: IFFALSE 45689
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45617: LD_VAR 0 12
45621: PUSH
45622: LD_INT 1
45624: ARRAY
45625: PPUSH
45626: CALL_OW 313
45630: PUSH
45631: LD_INT 3
45633: LESS
45634: IFFALSE 45670
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45636: LD_INT 0
45638: PPUSH
45639: LD_INT 5
45641: PUSH
45642: LD_INT 8
45644: PUSH
45645: LD_INT 9
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: PUSH
45653: LD_VAR 0 17
45657: ARRAY
45658: PPUSH
45659: LD_VAR 0 4
45663: PPUSH
45664: CALL_OW 380
45668: GO 45687
// PrepareHuman ( false , i , skill ) ;
45670: LD_INT 0
45672: PPUSH
45673: LD_VAR 0 8
45677: PPUSH
45678: LD_VAR 0 4
45682: PPUSH
45683: CALL_OW 380
// end else
45687: GO 45706
// PrepareHuman ( false , i , skill ) ;
45689: LD_INT 0
45691: PPUSH
45692: LD_VAR 0 8
45696: PPUSH
45697: LD_VAR 0 4
45701: PPUSH
45702: CALL_OW 380
// un := CreateHuman ;
45706: LD_ADDR_VAR 0 14
45710: PUSH
45711: CALL_OW 44
45715: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45716: LD_ADDR_VAR 0 7
45720: PUSH
45721: LD_VAR 0 7
45725: PPUSH
45726: LD_INT 1
45728: PPUSH
45729: LD_VAR 0 14
45733: PPUSH
45734: CALL_OW 2
45738: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45739: LD_VAR 0 14
45743: PPUSH
45744: LD_VAR 0 12
45748: PUSH
45749: LD_INT 1
45751: ARRAY
45752: PPUSH
45753: CALL_OW 52
// end ;
45757: GO 45396
45759: POP
45760: POP
// end ;
45761: GO 44698
45763: POP
45764: POP
// result := result ^ buildings ;
45765: LD_ADDR_VAR 0 7
45769: PUSH
45770: LD_VAR 0 7
45774: PUSH
45775: LD_VAR 0 18
45779: ADD
45780: ST_TO_ADDR
// end else
45781: GO 45924
// begin for i = 1 to personel do
45783: LD_ADDR_VAR 0 8
45787: PUSH
45788: DOUBLE
45789: LD_INT 1
45791: DEC
45792: ST_TO_ADDR
45793: LD_VAR 0 6
45797: PUSH
45798: FOR_TO
45799: IFFALSE 45922
// begin if i > 4 then
45801: LD_VAR 0 8
45805: PUSH
45806: LD_INT 4
45808: GREATER
45809: IFFALSE 45813
// break ;
45811: GO 45922
// x := personel [ i ] ;
45813: LD_ADDR_VAR 0 13
45817: PUSH
45818: LD_VAR 0 6
45822: PUSH
45823: LD_VAR 0 8
45827: ARRAY
45828: ST_TO_ADDR
// if x = - 1 then
45829: LD_VAR 0 13
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: EQUAL
45838: IFFALSE 45842
// continue ;
45840: GO 45798
// PrepareHuman ( false , i , skill ) ;
45842: LD_INT 0
45844: PPUSH
45845: LD_VAR 0 8
45849: PPUSH
45850: LD_VAR 0 4
45854: PPUSH
45855: CALL_OW 380
// un := CreateHuman ;
45859: LD_ADDR_VAR 0 14
45863: PUSH
45864: CALL_OW 44
45868: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45869: LD_VAR 0 14
45873: PPUSH
45874: LD_VAR 0 1
45878: PPUSH
45879: CALL_OW 250
45883: PPUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: CALL_OW 251
45893: PPUSH
45894: LD_INT 10
45896: PPUSH
45897: LD_INT 0
45899: PPUSH
45900: CALL_OW 50
// result := result ^ un ;
45904: LD_ADDR_VAR 0 7
45908: PUSH
45909: LD_VAR 0 7
45913: PUSH
45914: LD_VAR 0 14
45918: ADD
45919: ST_TO_ADDR
// end ;
45920: GO 45798
45922: POP
45923: POP
// end ; end ;
45924: LD_VAR 0 7
45928: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45929: LD_INT 0
45931: PPUSH
45932: PPUSH
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
45940: PPUSH
45941: PPUSH
45942: PPUSH
45943: PPUSH
45944: PPUSH
45945: PPUSH
45946: PPUSH
// result := false ;
45947: LD_ADDR_VAR 0 3
45951: PUSH
45952: LD_INT 0
45954: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45955: LD_VAR 0 1
45959: NOT
45960: PUSH
45961: LD_VAR 0 1
45965: PPUSH
45966: CALL_OW 266
45970: PUSH
45971: LD_INT 32
45973: PUSH
45974: LD_INT 33
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: IN
45981: NOT
45982: OR
45983: IFFALSE 45987
// exit ;
45985: GO 47123
// nat := GetNation ( tower ) ;
45987: LD_ADDR_VAR 0 12
45991: PUSH
45992: LD_VAR 0 1
45996: PPUSH
45997: CALL_OW 248
46001: ST_TO_ADDR
// side := GetSide ( tower ) ;
46002: LD_ADDR_VAR 0 16
46006: PUSH
46007: LD_VAR 0 1
46011: PPUSH
46012: CALL_OW 255
46016: ST_TO_ADDR
// x := GetX ( tower ) ;
46017: LD_ADDR_VAR 0 10
46021: PUSH
46022: LD_VAR 0 1
46026: PPUSH
46027: CALL_OW 250
46031: ST_TO_ADDR
// y := GetY ( tower ) ;
46032: LD_ADDR_VAR 0 11
46036: PUSH
46037: LD_VAR 0 1
46041: PPUSH
46042: CALL_OW 251
46046: ST_TO_ADDR
// if not x or not y then
46047: LD_VAR 0 10
46051: NOT
46052: PUSH
46053: LD_VAR 0 11
46057: NOT
46058: OR
46059: IFFALSE 46063
// exit ;
46061: GO 47123
// weapon := 0 ;
46063: LD_ADDR_VAR 0 18
46067: PUSH
46068: LD_INT 0
46070: ST_TO_ADDR
// fac_list := [ ] ;
46071: LD_ADDR_VAR 0 17
46075: PUSH
46076: EMPTY
46077: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
46078: LD_ADDR_VAR 0 6
46082: PUSH
46083: LD_VAR 0 1
46087: PPUSH
46088: CALL_OW 274
46092: PPUSH
46093: LD_VAR 0 2
46097: PPUSH
46098: CALL 43701 0 2
46102: PPUSH
46103: LD_INT 30
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PPUSH
46113: CALL_OW 72
46117: ST_TO_ADDR
// if not factories then
46118: LD_VAR 0 6
46122: NOT
46123: IFFALSE 46127
// exit ;
46125: GO 47123
// for i in factories do
46127: LD_ADDR_VAR 0 8
46131: PUSH
46132: LD_VAR 0 6
46136: PUSH
46137: FOR_IN
46138: IFFALSE 46163
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46140: LD_ADDR_VAR 0 17
46144: PUSH
46145: LD_VAR 0 17
46149: PUSH
46150: LD_VAR 0 8
46154: PPUSH
46155: CALL_OW 478
46159: UNION
46160: ST_TO_ADDR
46161: GO 46137
46163: POP
46164: POP
// if not fac_list then
46165: LD_VAR 0 17
46169: NOT
46170: IFFALSE 46174
// exit ;
46172: GO 47123
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46174: LD_ADDR_VAR 0 5
46178: PUSH
46179: LD_INT 4
46181: PUSH
46182: LD_INT 5
46184: PUSH
46185: LD_INT 9
46187: PUSH
46188: LD_INT 10
46190: PUSH
46191: LD_INT 6
46193: PUSH
46194: LD_INT 7
46196: PUSH
46197: LD_INT 11
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 27
46211: PUSH
46212: LD_INT 28
46214: PUSH
46215: LD_INT 26
46217: PUSH
46218: LD_INT 30
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 43
46229: PUSH
46230: LD_INT 44
46232: PUSH
46233: LD_INT 46
46235: PUSH
46236: LD_INT 45
46238: PUSH
46239: LD_INT 47
46241: PUSH
46242: LD_INT 49
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: PUSH
46258: LD_VAR 0 12
46262: ARRAY
46263: ST_TO_ADDR
// for i in list do
46264: LD_ADDR_VAR 0 8
46268: PUSH
46269: LD_VAR 0 5
46273: PUSH
46274: FOR_IN
46275: IFFALSE 46308
// if not i in fac_list then
46277: LD_VAR 0 8
46281: PUSH
46282: LD_VAR 0 17
46286: IN
46287: NOT
46288: IFFALSE 46306
// list := list diff i ;
46290: LD_ADDR_VAR 0 5
46294: PUSH
46295: LD_VAR 0 5
46299: PUSH
46300: LD_VAR 0 8
46304: DIFF
46305: ST_TO_ADDR
46306: GO 46274
46308: POP
46309: POP
// if not list then
46310: LD_VAR 0 5
46314: NOT
46315: IFFALSE 46319
// exit ;
46317: GO 47123
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46319: LD_VAR 0 12
46323: PUSH
46324: LD_INT 3
46326: EQUAL
46327: PUSH
46328: LD_INT 49
46330: PUSH
46331: LD_VAR 0 5
46335: IN
46336: AND
46337: PUSH
46338: LD_INT 31
46340: PPUSH
46341: LD_VAR 0 16
46345: PPUSH
46346: CALL_OW 321
46350: PUSH
46351: LD_INT 2
46353: EQUAL
46354: AND
46355: IFFALSE 46415
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46357: LD_INT 22
46359: PUSH
46360: LD_VAR 0 16
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 35
46371: PUSH
46372: LD_INT 49
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 91
46381: PUSH
46382: LD_VAR 0 1
46386: PUSH
46387: LD_INT 10
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: PPUSH
46400: CALL_OW 69
46404: NOT
46405: IFFALSE 46415
// weapon := ru_time_lapser ;
46407: LD_ADDR_VAR 0 18
46411: PUSH
46412: LD_INT 49
46414: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46415: LD_VAR 0 12
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: IN
46430: PUSH
46431: LD_INT 11
46433: PUSH
46434: LD_VAR 0 5
46438: IN
46439: PUSH
46440: LD_INT 30
46442: PUSH
46443: LD_VAR 0 5
46447: IN
46448: OR
46449: AND
46450: PUSH
46451: LD_INT 6
46453: PPUSH
46454: LD_VAR 0 16
46458: PPUSH
46459: CALL_OW 321
46463: PUSH
46464: LD_INT 2
46466: EQUAL
46467: AND
46468: IFFALSE 46633
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46470: LD_INT 22
46472: PUSH
46473: LD_VAR 0 16
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 35
46487: PUSH
46488: LD_INT 11
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 35
46497: PUSH
46498: LD_INT 30
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 91
46512: PUSH
46513: LD_VAR 0 1
46517: PUSH
46518: LD_INT 18
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: PPUSH
46531: CALL_OW 69
46535: NOT
46536: PUSH
46537: LD_INT 22
46539: PUSH
46540: LD_VAR 0 16
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 30
46554: PUSH
46555: LD_INT 32
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 30
46564: PUSH
46565: LD_INT 33
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 91
46579: PUSH
46580: LD_VAR 0 1
46584: PUSH
46585: LD_INT 12
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: PUSH
46598: EMPTY
46599: LIST
46600: PPUSH
46601: CALL_OW 69
46605: PUSH
46606: LD_INT 2
46608: GREATER
46609: AND
46610: IFFALSE 46633
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46612: LD_ADDR_VAR 0 18
46616: PUSH
46617: LD_INT 11
46619: PUSH
46620: LD_INT 30
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_VAR 0 12
46631: ARRAY
46632: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46633: LD_VAR 0 18
46637: NOT
46638: PUSH
46639: LD_INT 40
46641: PPUSH
46642: LD_VAR 0 16
46646: PPUSH
46647: CALL_OW 321
46651: PUSH
46652: LD_INT 2
46654: EQUAL
46655: AND
46656: PUSH
46657: LD_INT 7
46659: PUSH
46660: LD_VAR 0 5
46664: IN
46665: PUSH
46666: LD_INT 28
46668: PUSH
46669: LD_VAR 0 5
46673: IN
46674: OR
46675: PUSH
46676: LD_INT 45
46678: PUSH
46679: LD_VAR 0 5
46683: IN
46684: OR
46685: AND
46686: IFFALSE 46940
// begin hex := GetHexInfo ( x , y ) ;
46688: LD_ADDR_VAR 0 4
46692: PUSH
46693: LD_VAR 0 10
46697: PPUSH
46698: LD_VAR 0 11
46702: PPUSH
46703: CALL_OW 546
46707: ST_TO_ADDR
// if hex [ 1 ] then
46708: LD_VAR 0 4
46712: PUSH
46713: LD_INT 1
46715: ARRAY
46716: IFFALSE 46720
// exit ;
46718: GO 47123
// height := hex [ 2 ] ;
46720: LD_ADDR_VAR 0 15
46724: PUSH
46725: LD_VAR 0 4
46729: PUSH
46730: LD_INT 2
46732: ARRAY
46733: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46734: LD_ADDR_VAR 0 14
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 3
46747: PUSH
46748: LD_INT 5
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: ST_TO_ADDR
// for i in tmp do
46757: LD_ADDR_VAR 0 8
46761: PUSH
46762: LD_VAR 0 14
46766: PUSH
46767: FOR_IN
46768: IFFALSE 46938
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46770: LD_ADDR_VAR 0 9
46774: PUSH
46775: LD_VAR 0 10
46779: PPUSH
46780: LD_VAR 0 8
46784: PPUSH
46785: LD_INT 5
46787: PPUSH
46788: CALL_OW 272
46792: PUSH
46793: LD_VAR 0 11
46797: PPUSH
46798: LD_VAR 0 8
46802: PPUSH
46803: LD_INT 5
46805: PPUSH
46806: CALL_OW 273
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46815: LD_VAR 0 9
46819: PUSH
46820: LD_INT 1
46822: ARRAY
46823: PPUSH
46824: LD_VAR 0 9
46828: PUSH
46829: LD_INT 2
46831: ARRAY
46832: PPUSH
46833: CALL_OW 488
46837: IFFALSE 46936
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46839: LD_ADDR_VAR 0 4
46843: PUSH
46844: LD_VAR 0 9
46848: PUSH
46849: LD_INT 1
46851: ARRAY
46852: PPUSH
46853: LD_VAR 0 9
46857: PUSH
46858: LD_INT 2
46860: ARRAY
46861: PPUSH
46862: CALL_OW 546
46866: ST_TO_ADDR
// if hex [ 1 ] then
46867: LD_VAR 0 4
46871: PUSH
46872: LD_INT 1
46874: ARRAY
46875: IFFALSE 46879
// continue ;
46877: GO 46767
// h := hex [ 2 ] ;
46879: LD_ADDR_VAR 0 13
46883: PUSH
46884: LD_VAR 0 4
46888: PUSH
46889: LD_INT 2
46891: ARRAY
46892: ST_TO_ADDR
// if h + 7 < height then
46893: LD_VAR 0 13
46897: PUSH
46898: LD_INT 7
46900: PLUS
46901: PUSH
46902: LD_VAR 0 15
46906: LESS
46907: IFFALSE 46936
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46909: LD_ADDR_VAR 0 18
46913: PUSH
46914: LD_INT 7
46916: PUSH
46917: LD_INT 28
46919: PUSH
46920: LD_INT 45
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: LIST
46927: PUSH
46928: LD_VAR 0 12
46932: ARRAY
46933: ST_TO_ADDR
// break ;
46934: GO 46938
// end ; end ; end ;
46936: GO 46767
46938: POP
46939: POP
// end ; if not weapon then
46940: LD_VAR 0 18
46944: NOT
46945: IFFALSE 47005
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46947: LD_ADDR_VAR 0 5
46951: PUSH
46952: LD_VAR 0 5
46956: PUSH
46957: LD_INT 11
46959: PUSH
46960: LD_INT 30
46962: PUSH
46963: LD_INT 49
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: DIFF
46971: ST_TO_ADDR
// if not list then
46972: LD_VAR 0 5
46976: NOT
46977: IFFALSE 46981
// exit ;
46979: GO 47123
// weapon := list [ rand ( 1 , list ) ] ;
46981: LD_ADDR_VAR 0 18
46985: PUSH
46986: LD_VAR 0 5
46990: PUSH
46991: LD_INT 1
46993: PPUSH
46994: LD_VAR 0 5
46998: PPUSH
46999: CALL_OW 12
47003: ARRAY
47004: ST_TO_ADDR
// end ; if weapon then
47005: LD_VAR 0 18
47009: IFFALSE 47123
// begin tmp := CostOfWeapon ( weapon ) ;
47011: LD_ADDR_VAR 0 14
47015: PUSH
47016: LD_VAR 0 18
47020: PPUSH
47021: CALL_OW 451
47025: ST_TO_ADDR
// j := GetBase ( tower ) ;
47026: LD_ADDR_VAR 0 9
47030: PUSH
47031: LD_VAR 0 1
47035: PPUSH
47036: CALL_OW 274
47040: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47041: LD_VAR 0 9
47045: PPUSH
47046: LD_INT 1
47048: PPUSH
47049: CALL_OW 275
47053: PUSH
47054: LD_VAR 0 14
47058: PUSH
47059: LD_INT 1
47061: ARRAY
47062: GREATEREQUAL
47063: PUSH
47064: LD_VAR 0 9
47068: PPUSH
47069: LD_INT 2
47071: PPUSH
47072: CALL_OW 275
47076: PUSH
47077: LD_VAR 0 14
47081: PUSH
47082: LD_INT 2
47084: ARRAY
47085: GREATEREQUAL
47086: AND
47087: PUSH
47088: LD_VAR 0 9
47092: PPUSH
47093: LD_INT 3
47095: PPUSH
47096: CALL_OW 275
47100: PUSH
47101: LD_VAR 0 14
47105: PUSH
47106: LD_INT 3
47108: ARRAY
47109: GREATEREQUAL
47110: AND
47111: IFFALSE 47123
// result := weapon ;
47113: LD_ADDR_VAR 0 3
47117: PUSH
47118: LD_VAR 0 18
47122: ST_TO_ADDR
// end ; end ;
47123: LD_VAR 0 3
47127: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47128: LD_INT 0
47130: PPUSH
47131: PPUSH
// result := true ;
47132: LD_ADDR_VAR 0 3
47136: PUSH
47137: LD_INT 1
47139: ST_TO_ADDR
// if array1 = array2 then
47140: LD_VAR 0 1
47144: PUSH
47145: LD_VAR 0 2
47149: EQUAL
47150: IFFALSE 47210
// begin for i = 1 to array1 do
47152: LD_ADDR_VAR 0 4
47156: PUSH
47157: DOUBLE
47158: LD_INT 1
47160: DEC
47161: ST_TO_ADDR
47162: LD_VAR 0 1
47166: PUSH
47167: FOR_TO
47168: IFFALSE 47206
// if array1 [ i ] <> array2 [ i ] then
47170: LD_VAR 0 1
47174: PUSH
47175: LD_VAR 0 4
47179: ARRAY
47180: PUSH
47181: LD_VAR 0 2
47185: PUSH
47186: LD_VAR 0 4
47190: ARRAY
47191: NONEQUAL
47192: IFFALSE 47204
// begin result := false ;
47194: LD_ADDR_VAR 0 3
47198: PUSH
47199: LD_INT 0
47201: ST_TO_ADDR
// break ;
47202: GO 47206
// end ;
47204: GO 47167
47206: POP
47207: POP
// end else
47208: GO 47218
// result := false ;
47210: LD_ADDR_VAR 0 3
47214: PUSH
47215: LD_INT 0
47217: ST_TO_ADDR
// end ;
47218: LD_VAR 0 3
47222: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47223: LD_INT 0
47225: PPUSH
47226: PPUSH
47227: PPUSH
// pom := GetBase ( fac ) ;
47228: LD_ADDR_VAR 0 5
47232: PUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 274
47242: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47243: LD_ADDR_VAR 0 4
47247: PUSH
47248: LD_VAR 0 2
47252: PUSH
47253: LD_INT 1
47255: ARRAY
47256: PPUSH
47257: LD_VAR 0 2
47261: PUSH
47262: LD_INT 2
47264: ARRAY
47265: PPUSH
47266: LD_VAR 0 2
47270: PUSH
47271: LD_INT 3
47273: ARRAY
47274: PPUSH
47275: LD_VAR 0 2
47279: PUSH
47280: LD_INT 4
47282: ARRAY
47283: PPUSH
47284: CALL_OW 449
47288: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47289: LD_ADDR_VAR 0 3
47293: PUSH
47294: LD_VAR 0 5
47298: PPUSH
47299: LD_INT 1
47301: PPUSH
47302: CALL_OW 275
47306: PUSH
47307: LD_VAR 0 4
47311: PUSH
47312: LD_INT 1
47314: ARRAY
47315: GREATEREQUAL
47316: PUSH
47317: LD_VAR 0 5
47321: PPUSH
47322: LD_INT 2
47324: PPUSH
47325: CALL_OW 275
47329: PUSH
47330: LD_VAR 0 4
47334: PUSH
47335: LD_INT 2
47337: ARRAY
47338: GREATEREQUAL
47339: AND
47340: PUSH
47341: LD_VAR 0 5
47345: PPUSH
47346: LD_INT 3
47348: PPUSH
47349: CALL_OW 275
47353: PUSH
47354: LD_VAR 0 4
47358: PUSH
47359: LD_INT 3
47361: ARRAY
47362: GREATEREQUAL
47363: AND
47364: ST_TO_ADDR
// end ;
47365: LD_VAR 0 3
47369: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47370: LD_INT 0
47372: PPUSH
47373: PPUSH
47374: PPUSH
47375: PPUSH
// pom := GetBase ( building ) ;
47376: LD_ADDR_VAR 0 3
47380: PUSH
47381: LD_VAR 0 1
47385: PPUSH
47386: CALL_OW 274
47390: ST_TO_ADDR
// if not pom then
47391: LD_VAR 0 3
47395: NOT
47396: IFFALSE 47400
// exit ;
47398: GO 47570
// btype := GetBType ( building ) ;
47400: LD_ADDR_VAR 0 5
47404: PUSH
47405: LD_VAR 0 1
47409: PPUSH
47410: CALL_OW 266
47414: ST_TO_ADDR
// if btype = b_armoury then
47415: LD_VAR 0 5
47419: PUSH
47420: LD_INT 4
47422: EQUAL
47423: IFFALSE 47433
// btype := b_barracks ;
47425: LD_ADDR_VAR 0 5
47429: PUSH
47430: LD_INT 5
47432: ST_TO_ADDR
// if btype = b_depot then
47433: LD_VAR 0 5
47437: PUSH
47438: LD_INT 0
47440: EQUAL
47441: IFFALSE 47451
// btype := b_warehouse ;
47443: LD_ADDR_VAR 0 5
47447: PUSH
47448: LD_INT 1
47450: ST_TO_ADDR
// if btype = b_workshop then
47451: LD_VAR 0 5
47455: PUSH
47456: LD_INT 2
47458: EQUAL
47459: IFFALSE 47469
// btype := b_factory ;
47461: LD_ADDR_VAR 0 5
47465: PUSH
47466: LD_INT 3
47468: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47469: LD_ADDR_VAR 0 4
47473: PUSH
47474: LD_VAR 0 5
47478: PPUSH
47479: LD_VAR 0 1
47483: PPUSH
47484: CALL_OW 248
47488: PPUSH
47489: CALL_OW 450
47493: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47494: LD_ADDR_VAR 0 2
47498: PUSH
47499: LD_VAR 0 3
47503: PPUSH
47504: LD_INT 1
47506: PPUSH
47507: CALL_OW 275
47511: PUSH
47512: LD_VAR 0 4
47516: PUSH
47517: LD_INT 1
47519: ARRAY
47520: GREATEREQUAL
47521: PUSH
47522: LD_VAR 0 3
47526: PPUSH
47527: LD_INT 2
47529: PPUSH
47530: CALL_OW 275
47534: PUSH
47535: LD_VAR 0 4
47539: PUSH
47540: LD_INT 2
47542: ARRAY
47543: GREATEREQUAL
47544: AND
47545: PUSH
47546: LD_VAR 0 3
47550: PPUSH
47551: LD_INT 3
47553: PPUSH
47554: CALL_OW 275
47558: PUSH
47559: LD_VAR 0 4
47563: PUSH
47564: LD_INT 3
47566: ARRAY
47567: GREATEREQUAL
47568: AND
47569: ST_TO_ADDR
// end ;
47570: LD_VAR 0 2
47574: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47575: LD_INT 0
47577: PPUSH
47578: PPUSH
47579: PPUSH
// pom := GetBase ( building ) ;
47580: LD_ADDR_VAR 0 4
47584: PUSH
47585: LD_VAR 0 1
47589: PPUSH
47590: CALL_OW 274
47594: ST_TO_ADDR
// if not pom then
47595: LD_VAR 0 4
47599: NOT
47600: IFFALSE 47604
// exit ;
47602: GO 47705
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47604: LD_ADDR_VAR 0 5
47608: PUSH
47609: LD_VAR 0 2
47613: PPUSH
47614: LD_VAR 0 1
47618: PPUSH
47619: CALL_OW 248
47623: PPUSH
47624: CALL_OW 450
47628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47629: LD_ADDR_VAR 0 3
47633: PUSH
47634: LD_VAR 0 4
47638: PPUSH
47639: LD_INT 1
47641: PPUSH
47642: CALL_OW 275
47646: PUSH
47647: LD_VAR 0 5
47651: PUSH
47652: LD_INT 1
47654: ARRAY
47655: GREATEREQUAL
47656: PUSH
47657: LD_VAR 0 4
47661: PPUSH
47662: LD_INT 2
47664: PPUSH
47665: CALL_OW 275
47669: PUSH
47670: LD_VAR 0 5
47674: PUSH
47675: LD_INT 2
47677: ARRAY
47678: GREATEREQUAL
47679: AND
47680: PUSH
47681: LD_VAR 0 4
47685: PPUSH
47686: LD_INT 3
47688: PPUSH
47689: CALL_OW 275
47693: PUSH
47694: LD_VAR 0 5
47698: PUSH
47699: LD_INT 3
47701: ARRAY
47702: GREATEREQUAL
47703: AND
47704: ST_TO_ADDR
// end ;
47705: LD_VAR 0 3
47709: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
47710: LD_INT 0
47712: PPUSH
47713: PPUSH
47714: PPUSH
47715: PPUSH
47716: PPUSH
47717: PPUSH
47718: PPUSH
47719: PPUSH
47720: PPUSH
47721: PPUSH
// result := false ;
47722: LD_ADDR_VAR 0 6
47726: PUSH
47727: LD_INT 0
47729: ST_TO_ADDR
// if not base or not btype or not x or not y then
47730: LD_VAR 0 1
47734: NOT
47735: PUSH
47736: LD_VAR 0 2
47740: NOT
47741: OR
47742: PUSH
47743: LD_VAR 0 3
47747: NOT
47748: OR
47749: PUSH
47750: LD_VAR 0 4
47754: NOT
47755: OR
47756: IFFALSE 47760
// exit ;
47758: GO 48369
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
47760: LD_ADDR_VAR 0 12
47764: PUSH
47765: LD_VAR 0 2
47769: PPUSH
47770: LD_VAR 0 3
47774: PPUSH
47775: LD_VAR 0 4
47779: PPUSH
47780: LD_VAR 0 5
47784: PPUSH
47785: LD_VAR 0 1
47789: PUSH
47790: LD_INT 1
47792: ARRAY
47793: PPUSH
47794: CALL_OW 248
47798: PPUSH
47799: LD_INT 0
47801: PPUSH
47802: CALL 49206 0 6
47806: ST_TO_ADDR
// if not hexes then
47807: LD_VAR 0 12
47811: NOT
47812: IFFALSE 47816
// exit ;
47814: GO 48369
// for i = 1 to hexes do
47816: LD_ADDR_VAR 0 7
47820: PUSH
47821: DOUBLE
47822: LD_INT 1
47824: DEC
47825: ST_TO_ADDR
47826: LD_VAR 0 12
47830: PUSH
47831: FOR_TO
47832: IFFALSE 48367
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47834: LD_ADDR_VAR 0 11
47838: PUSH
47839: LD_VAR 0 12
47843: PUSH
47844: LD_VAR 0 7
47848: ARRAY
47849: PUSH
47850: LD_INT 1
47852: ARRAY
47853: PPUSH
47854: LD_VAR 0 12
47858: PUSH
47859: LD_VAR 0 7
47863: ARRAY
47864: PUSH
47865: LD_INT 2
47867: ARRAY
47868: PPUSH
47869: CALL_OW 428
47873: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47874: LD_VAR 0 12
47878: PUSH
47879: LD_VAR 0 7
47883: ARRAY
47884: PUSH
47885: LD_INT 1
47887: ARRAY
47888: PPUSH
47889: LD_VAR 0 12
47893: PUSH
47894: LD_VAR 0 7
47898: ARRAY
47899: PUSH
47900: LD_INT 2
47902: ARRAY
47903: PPUSH
47904: CALL_OW 351
47908: PUSH
47909: LD_VAR 0 12
47913: PUSH
47914: LD_VAR 0 7
47918: ARRAY
47919: PUSH
47920: LD_INT 1
47922: ARRAY
47923: PPUSH
47924: LD_VAR 0 12
47928: PUSH
47929: LD_VAR 0 7
47933: ARRAY
47934: PUSH
47935: LD_INT 2
47937: ARRAY
47938: PPUSH
47939: CALL_OW 488
47943: NOT
47944: OR
47945: PUSH
47946: LD_VAR 0 11
47950: PPUSH
47951: CALL_OW 247
47955: PUSH
47956: LD_INT 3
47958: EQUAL
47959: OR
47960: IFFALSE 47966
// exit ;
47962: POP
47963: POP
47964: GO 48369
// if not tmp or not tmp in base then
47966: LD_VAR 0 11
47970: NOT
47971: PUSH
47972: LD_VAR 0 11
47976: PUSH
47977: LD_VAR 0 1
47981: IN
47982: NOT
47983: OR
47984: IFFALSE 47988
// continue ;
47986: GO 47831
// result := true ;
47988: LD_ADDR_VAR 0 6
47992: PUSH
47993: LD_INT 1
47995: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47996: LD_ADDR_VAR 0 15
48000: PUSH
48001: LD_VAR 0 1
48005: PPUSH
48006: LD_INT 22
48008: PUSH
48009: LD_VAR 0 11
48013: PPUSH
48014: CALL_OW 255
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 30
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 30
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PPUSH
48055: CALL_OW 72
48059: ST_TO_ADDR
// if dep then
48060: LD_VAR 0 15
48064: IFFALSE 48200
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48066: LD_ADDR_VAR 0 14
48070: PUSH
48071: LD_VAR 0 15
48075: PUSH
48076: LD_INT 1
48078: ARRAY
48079: PPUSH
48080: CALL_OW 250
48084: PPUSH
48085: LD_VAR 0 15
48089: PUSH
48090: LD_INT 1
48092: ARRAY
48093: PPUSH
48094: CALL_OW 254
48098: PPUSH
48099: LD_INT 5
48101: PPUSH
48102: CALL_OW 272
48106: PUSH
48107: LD_VAR 0 15
48111: PUSH
48112: LD_INT 1
48114: ARRAY
48115: PPUSH
48116: CALL_OW 251
48120: PPUSH
48121: LD_VAR 0 15
48125: PUSH
48126: LD_INT 1
48128: ARRAY
48129: PPUSH
48130: CALL_OW 254
48134: PPUSH
48135: LD_INT 5
48137: PPUSH
48138: CALL_OW 273
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48147: LD_VAR 0 14
48151: PUSH
48152: LD_INT 1
48154: ARRAY
48155: PPUSH
48156: LD_VAR 0 14
48160: PUSH
48161: LD_INT 2
48163: ARRAY
48164: PPUSH
48165: CALL_OW 488
48169: IFFALSE 48200
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48171: LD_VAR 0 11
48175: PPUSH
48176: LD_VAR 0 14
48180: PUSH
48181: LD_INT 1
48183: ARRAY
48184: PPUSH
48185: LD_VAR 0 14
48189: PUSH
48190: LD_INT 2
48192: ARRAY
48193: PPUSH
48194: CALL_OW 111
// continue ;
48198: GO 47831
// end ; end ; r := GetDir ( tmp ) ;
48200: LD_ADDR_VAR 0 13
48204: PUSH
48205: LD_VAR 0 11
48209: PPUSH
48210: CALL_OW 254
48214: ST_TO_ADDR
// if r = 5 then
48215: LD_VAR 0 13
48219: PUSH
48220: LD_INT 5
48222: EQUAL
48223: IFFALSE 48233
// r := 0 ;
48225: LD_ADDR_VAR 0 13
48229: PUSH
48230: LD_INT 0
48232: ST_TO_ADDR
// for j = r to 5 do
48233: LD_ADDR_VAR 0 8
48237: PUSH
48238: DOUBLE
48239: LD_VAR 0 13
48243: DEC
48244: ST_TO_ADDR
48245: LD_INT 5
48247: PUSH
48248: FOR_TO
48249: IFFALSE 48363
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48251: LD_ADDR_VAR 0 9
48255: PUSH
48256: LD_VAR 0 11
48260: PPUSH
48261: CALL_OW 250
48265: PPUSH
48266: LD_VAR 0 8
48270: PPUSH
48271: LD_INT 2
48273: PPUSH
48274: CALL_OW 272
48278: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48279: LD_ADDR_VAR 0 10
48283: PUSH
48284: LD_VAR 0 11
48288: PPUSH
48289: CALL_OW 251
48293: PPUSH
48294: LD_VAR 0 8
48298: PPUSH
48299: LD_INT 2
48301: PPUSH
48302: CALL_OW 273
48306: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48307: LD_VAR 0 9
48311: PPUSH
48312: LD_VAR 0 10
48316: PPUSH
48317: CALL_OW 488
48321: PUSH
48322: LD_VAR 0 9
48326: PPUSH
48327: LD_VAR 0 10
48331: PPUSH
48332: CALL_OW 428
48336: NOT
48337: AND
48338: IFFALSE 48361
// begin ComMoveXY ( tmp , _x , _y ) ;
48340: LD_VAR 0 11
48344: PPUSH
48345: LD_VAR 0 9
48349: PPUSH
48350: LD_VAR 0 10
48354: PPUSH
48355: CALL_OW 111
// break ;
48359: GO 48363
// end ; end ;
48361: GO 48248
48363: POP
48364: POP
// end ;
48365: GO 47831
48367: POP
48368: POP
// end ;
48369: LD_VAR 0 6
48373: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48374: LD_INT 0
48376: PPUSH
48377: PPUSH
48378: PPUSH
48379: PPUSH
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
// result := false ;
48386: LD_ADDR_VAR 0 6
48390: PUSH
48391: LD_INT 0
48393: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48394: LD_VAR 0 1
48398: NOT
48399: PUSH
48400: LD_VAR 0 1
48404: PPUSH
48405: CALL_OW 266
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: IN
48420: NOT
48421: OR
48422: PUSH
48423: LD_VAR 0 2
48427: NOT
48428: OR
48429: PUSH
48430: LD_VAR 0 5
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: LD_INT 4
48449: PUSH
48450: LD_INT 5
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: IN
48461: NOT
48462: OR
48463: PUSH
48464: LD_VAR 0 3
48468: PPUSH
48469: LD_VAR 0 4
48473: PPUSH
48474: CALL_OW 488
48478: NOT
48479: OR
48480: IFFALSE 48484
// exit ;
48482: GO 49201
// pom := GetBase ( depot ) ;
48484: LD_ADDR_VAR 0 10
48488: PUSH
48489: LD_VAR 0 1
48493: PPUSH
48494: CALL_OW 274
48498: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48499: LD_ADDR_VAR 0 11
48503: PUSH
48504: LD_VAR 0 2
48508: PPUSH
48509: LD_VAR 0 1
48513: PPUSH
48514: CALL_OW 248
48518: PPUSH
48519: CALL_OW 450
48523: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48524: LD_VAR 0 10
48528: PPUSH
48529: LD_INT 1
48531: PPUSH
48532: CALL_OW 275
48536: PUSH
48537: LD_VAR 0 11
48541: PUSH
48542: LD_INT 1
48544: ARRAY
48545: GREATEREQUAL
48546: PUSH
48547: LD_VAR 0 10
48551: PPUSH
48552: LD_INT 2
48554: PPUSH
48555: CALL_OW 275
48559: PUSH
48560: LD_VAR 0 11
48564: PUSH
48565: LD_INT 2
48567: ARRAY
48568: GREATEREQUAL
48569: AND
48570: PUSH
48571: LD_VAR 0 10
48575: PPUSH
48576: LD_INT 3
48578: PPUSH
48579: CALL_OW 275
48583: PUSH
48584: LD_VAR 0 11
48588: PUSH
48589: LD_INT 3
48591: ARRAY
48592: GREATEREQUAL
48593: AND
48594: NOT
48595: IFFALSE 48599
// exit ;
48597: GO 49201
// if GetBType ( depot ) = b_depot then
48599: LD_VAR 0 1
48603: PPUSH
48604: CALL_OW 266
48608: PUSH
48609: LD_INT 0
48611: EQUAL
48612: IFFALSE 48624
// dist := 28 else
48614: LD_ADDR_VAR 0 14
48618: PUSH
48619: LD_INT 28
48621: ST_TO_ADDR
48622: GO 48632
// dist := 36 ;
48624: LD_ADDR_VAR 0 14
48628: PUSH
48629: LD_INT 36
48631: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48632: LD_VAR 0 1
48636: PPUSH
48637: LD_VAR 0 3
48641: PPUSH
48642: LD_VAR 0 4
48646: PPUSH
48647: CALL_OW 297
48651: PUSH
48652: LD_VAR 0 14
48656: GREATER
48657: IFFALSE 48661
// exit ;
48659: GO 49201
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48661: LD_ADDR_VAR 0 12
48665: PUSH
48666: LD_VAR 0 2
48670: PPUSH
48671: LD_VAR 0 3
48675: PPUSH
48676: LD_VAR 0 4
48680: PPUSH
48681: LD_VAR 0 5
48685: PPUSH
48686: LD_VAR 0 1
48690: PPUSH
48691: CALL_OW 248
48695: PPUSH
48696: LD_INT 0
48698: PPUSH
48699: CALL 49206 0 6
48703: ST_TO_ADDR
// if not hexes then
48704: LD_VAR 0 12
48708: NOT
48709: IFFALSE 48713
// exit ;
48711: GO 49201
// hex := GetHexInfo ( x , y ) ;
48713: LD_ADDR_VAR 0 15
48717: PUSH
48718: LD_VAR 0 3
48722: PPUSH
48723: LD_VAR 0 4
48727: PPUSH
48728: CALL_OW 546
48732: ST_TO_ADDR
// if hex [ 1 ] then
48733: LD_VAR 0 15
48737: PUSH
48738: LD_INT 1
48740: ARRAY
48741: IFFALSE 48745
// exit ;
48743: GO 49201
// height := hex [ 2 ] ;
48745: LD_ADDR_VAR 0 13
48749: PUSH
48750: LD_VAR 0 15
48754: PUSH
48755: LD_INT 2
48757: ARRAY
48758: ST_TO_ADDR
// for i = 1 to hexes do
48759: LD_ADDR_VAR 0 7
48763: PUSH
48764: DOUBLE
48765: LD_INT 1
48767: DEC
48768: ST_TO_ADDR
48769: LD_VAR 0 12
48773: PUSH
48774: FOR_TO
48775: IFFALSE 49105
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48777: LD_VAR 0 12
48781: PUSH
48782: LD_VAR 0 7
48786: ARRAY
48787: PUSH
48788: LD_INT 1
48790: ARRAY
48791: PPUSH
48792: LD_VAR 0 12
48796: PUSH
48797: LD_VAR 0 7
48801: ARRAY
48802: PUSH
48803: LD_INT 2
48805: ARRAY
48806: PPUSH
48807: CALL_OW 488
48811: NOT
48812: PUSH
48813: LD_VAR 0 12
48817: PUSH
48818: LD_VAR 0 7
48822: ARRAY
48823: PUSH
48824: LD_INT 1
48826: ARRAY
48827: PPUSH
48828: LD_VAR 0 12
48832: PUSH
48833: LD_VAR 0 7
48837: ARRAY
48838: PUSH
48839: LD_INT 2
48841: ARRAY
48842: PPUSH
48843: CALL_OW 428
48847: PUSH
48848: LD_INT 0
48850: GREATER
48851: OR
48852: PUSH
48853: LD_VAR 0 12
48857: PUSH
48858: LD_VAR 0 7
48862: ARRAY
48863: PUSH
48864: LD_INT 1
48866: ARRAY
48867: PPUSH
48868: LD_VAR 0 12
48872: PUSH
48873: LD_VAR 0 7
48877: ARRAY
48878: PUSH
48879: LD_INT 2
48881: ARRAY
48882: PPUSH
48883: CALL_OW 351
48887: OR
48888: IFFALSE 48894
// exit ;
48890: POP
48891: POP
48892: GO 49201
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48894: LD_ADDR_VAR 0 8
48898: PUSH
48899: LD_VAR 0 12
48903: PUSH
48904: LD_VAR 0 7
48908: ARRAY
48909: PUSH
48910: LD_INT 1
48912: ARRAY
48913: PPUSH
48914: LD_VAR 0 12
48918: PUSH
48919: LD_VAR 0 7
48923: ARRAY
48924: PUSH
48925: LD_INT 2
48927: ARRAY
48928: PPUSH
48929: CALL_OW 546
48933: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48934: LD_VAR 0 8
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: PUSH
48943: LD_VAR 0 8
48947: PUSH
48948: LD_INT 2
48950: ARRAY
48951: PUSH
48952: LD_VAR 0 13
48956: PUSH
48957: LD_INT 2
48959: PLUS
48960: GREATER
48961: OR
48962: PUSH
48963: LD_VAR 0 8
48967: PUSH
48968: LD_INT 2
48970: ARRAY
48971: PUSH
48972: LD_VAR 0 13
48976: PUSH
48977: LD_INT 2
48979: MINUS
48980: LESS
48981: OR
48982: PUSH
48983: LD_VAR 0 8
48987: PUSH
48988: LD_INT 3
48990: ARRAY
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 8
48997: PUSH
48998: LD_INT 9
49000: PUSH
49001: LD_INT 10
49003: PUSH
49004: LD_INT 11
49006: PUSH
49007: LD_INT 12
49009: PUSH
49010: LD_INT 13
49012: PUSH
49013: LD_INT 16
49015: PUSH
49016: LD_INT 17
49018: PUSH
49019: LD_INT 18
49021: PUSH
49022: LD_INT 19
49024: PUSH
49025: LD_INT 20
49027: PUSH
49028: LD_INT 21
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: IN
49046: NOT
49047: OR
49048: PUSH
49049: LD_VAR 0 8
49053: PUSH
49054: LD_INT 5
49056: ARRAY
49057: NOT
49058: OR
49059: PUSH
49060: LD_VAR 0 8
49064: PUSH
49065: LD_INT 6
49067: ARRAY
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 7
49077: PUSH
49078: LD_INT 9
49080: PUSH
49081: LD_INT 10
49083: PUSH
49084: LD_INT 11
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: IN
49095: NOT
49096: OR
49097: IFFALSE 49103
// exit ;
49099: POP
49100: POP
49101: GO 49201
// end ;
49103: GO 48774
49105: POP
49106: POP
// side := GetSide ( depot ) ;
49107: LD_ADDR_VAR 0 9
49111: PUSH
49112: LD_VAR 0 1
49116: PPUSH
49117: CALL_OW 255
49121: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49122: LD_VAR 0 9
49126: PPUSH
49127: LD_VAR 0 3
49131: PPUSH
49132: LD_VAR 0 4
49136: PPUSH
49137: LD_INT 20
49139: PPUSH
49140: CALL 41855 0 4
49144: PUSH
49145: LD_INT 4
49147: ARRAY
49148: IFFALSE 49152
// exit ;
49150: GO 49201
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49152: LD_VAR 0 2
49156: PUSH
49157: LD_INT 29
49159: PUSH
49160: LD_INT 30
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: IN
49167: PUSH
49168: LD_VAR 0 3
49172: PPUSH
49173: LD_VAR 0 4
49177: PPUSH
49178: LD_VAR 0 9
49182: PPUSH
49183: CALL_OW 440
49187: NOT
49188: AND
49189: IFFALSE 49193
// exit ;
49191: GO 49201
// result := true ;
49193: LD_ADDR_VAR 0 6
49197: PUSH
49198: LD_INT 1
49200: ST_TO_ADDR
// end ;
49201: LD_VAR 0 6
49205: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49206: LD_INT 0
49208: PPUSH
49209: PPUSH
49210: PPUSH
49211: PPUSH
49212: PPUSH
49213: PPUSH
49214: PPUSH
49215: PPUSH
49216: PPUSH
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
49225: PPUSH
49226: PPUSH
49227: PPUSH
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
49249: PPUSH
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
49259: PPUSH
49260: PPUSH
49261: PPUSH
49262: PPUSH
49263: PPUSH
49264: PPUSH
49265: PPUSH
// result = [ ] ;
49266: LD_ADDR_VAR 0 7
49270: PUSH
49271: EMPTY
49272: ST_TO_ADDR
// temp_list = [ ] ;
49273: LD_ADDR_VAR 0 9
49277: PUSH
49278: EMPTY
49279: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49280: LD_VAR 0 4
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: LD_INT 4
49299: PUSH
49300: LD_INT 5
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: IN
49311: NOT
49312: PUSH
49313: LD_VAR 0 1
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: IN
49328: PUSH
49329: LD_VAR 0 5
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: IN
49348: NOT
49349: AND
49350: OR
49351: IFFALSE 49355
// exit ;
49353: GO 67746
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49355: LD_VAR 0 1
49359: PUSH
49360: LD_INT 6
49362: PUSH
49363: LD_INT 7
49365: PUSH
49366: LD_INT 8
49368: PUSH
49369: LD_INT 13
49371: PUSH
49372: LD_INT 12
49374: PUSH
49375: LD_INT 15
49377: PUSH
49378: LD_INT 11
49380: PUSH
49381: LD_INT 14
49383: PUSH
49384: LD_INT 10
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: IN
49398: IFFALSE 49408
// btype = b_lab ;
49400: LD_ADDR_VAR 0 1
49404: PUSH
49405: LD_INT 6
49407: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49408: LD_VAR 0 6
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: IN
49427: NOT
49428: PUSH
49429: LD_VAR 0 1
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: LD_INT 6
49448: PUSH
49449: LD_INT 36
49451: PUSH
49452: LD_INT 4
49454: PUSH
49455: LD_INT 5
49457: PUSH
49458: LD_INT 31
49460: PUSH
49461: LD_INT 32
49463: PUSH
49464: LD_INT 33
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: IN
49480: NOT
49481: PUSH
49482: LD_VAR 0 6
49486: PUSH
49487: LD_INT 1
49489: EQUAL
49490: AND
49491: OR
49492: PUSH
49493: LD_VAR 0 1
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: IN
49508: NOT
49509: PUSH
49510: LD_VAR 0 6
49514: PUSH
49515: LD_INT 2
49517: EQUAL
49518: AND
49519: OR
49520: IFFALSE 49530
// mode = 0 ;
49522: LD_ADDR_VAR 0 6
49526: PUSH
49527: LD_INT 0
49529: ST_TO_ADDR
// case mode of 0 :
49530: LD_VAR 0 6
49534: PUSH
49535: LD_INT 0
49537: DOUBLE
49538: EQUAL
49539: IFTRUE 49543
49541: GO 60996
49543: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49544: LD_ADDR_VAR 0 11
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 3
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49737: LD_ADDR_VAR 0 12
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 3
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 3
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49933: LD_ADDR_VAR 0 13
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: LD_INT 3
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50132: LD_ADDR_VAR 0 14
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 3
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 3
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50328: LD_ADDR_VAR 0 15
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50521: LD_ADDR_VAR 0 16
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 3
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50714: LD_ADDR_VAR 0 17
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50944: LD_ADDR_VAR 0 18
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51174: LD_ADDR_VAR 0 19
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51404: LD_ADDR_VAR 0 20
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51634: LD_ADDR_VAR 0 21
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51864: LD_ADDR_VAR 0 22
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52094: LD_ADDR_VAR 0 23
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52374: LD_ADDR_VAR 0 24
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52650: LD_ADDR_VAR 0 25
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 3
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: LD_INT 3
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52924: LD_ADDR_VAR 0 26
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 2
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53200: LD_ADDR_VAR 0 27
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53480: LD_ADDR_VAR 0 28
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 3
53715: NEG
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 3
53727: NEG
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53762: LD_ADDR_VAR 0 29
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 3
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54041: LD_ADDR_VAR 0 30
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 3
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54319: LD_ADDR_VAR 0 31
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: LD_INT 3
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 2
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54597: LD_ADDR_VAR 0 32
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 3
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54875: LD_ADDR_VAR 0 33
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55154: LD_ADDR_VAR 0 34
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55434: LD_ADDR_VAR 0 35
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55546: LD_ADDR_VAR 0 36
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55658: LD_ADDR_VAR 0 37
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55770: LD_ADDR_VAR 0 38
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55882: LD_ADDR_VAR 0 39
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55994: LD_ADDR_VAR 0 40
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56106: LD_ADDR_VAR 0 41
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 3
56391: NEG
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56456: LD_ADDR_VAR 0 42
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 3
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: LD_INT 3
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56806: LD_ADDR_VAR 0 43
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 3
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: LD_INT 3
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 3
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 3
57102: NEG
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57154: LD_ADDR_VAR 0 44
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: LD_INT 2
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 3
57428: NEG
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57504: LD_ADDR_VAR 0 45
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 2
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 3
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 3
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: LD_INT 3
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57854: LD_ADDR_VAR 0 46
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 3
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 3
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 3
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58202: LD_ADDR_VAR 0 47
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58353: LD_ADDR_VAR 0 48
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58500: LD_ADDR_VAR 0 49
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58644: LD_ADDR_VAR 0 50
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58788: LD_ADDR_VAR 0 51
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58935: LD_ADDR_VAR 0 52
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 2
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59086: LD_ADDR_VAR 0 53
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59316: LD_ADDR_VAR 0 54
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: LD_INT 2
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 2
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59546: LD_ADDR_VAR 0 55
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: NEG
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59776: LD_ADDR_VAR 0 56
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 2
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: NEG
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60006: LD_ADDR_VAR 0 57
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60236: LD_ADDR_VAR 0 58
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 2
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60466: LD_ADDR_VAR 0 59
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60554: LD_ADDR_VAR 0 60
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60642: LD_ADDR_VAR 0 61
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60730: LD_ADDR_VAR 0 62
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60818: LD_ADDR_VAR 0 63
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60906: LD_ADDR_VAR 0 64
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// end ; 1 :
60994: GO 66891
60996: LD_INT 1
60998: DOUBLE
60999: EQUAL
61000: IFTRUE 61004
61002: GO 63627
61004: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61005: LD_ADDR_VAR 0 11
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 3
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61049: LD_ADDR_VAR 0 12
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: LIST
61089: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61090: LD_ADDR_VAR 0 13
61094: PUSH
61095: LD_INT 3
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: LIST
61129: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61130: LD_ADDR_VAR 0 14
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 2
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: LIST
61170: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61171: LD_ADDR_VAR 0 15
61175: PUSH
61176: LD_INT 2
61178: NEG
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 3
61189: NEG
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: LIST
61214: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61215: LD_ADDR_VAR 0 16
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: LD_INT 3
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 3
61234: NEG
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: LD_INT 3
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: LIST
61260: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61261: LD_ADDR_VAR 0 17
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: LIST
61304: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61305: LD_ADDR_VAR 0 18
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: LIST
61345: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61346: LD_ADDR_VAR 0 19
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: LD_INT 3
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: LIST
61385: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61386: LD_ADDR_VAR 0 20
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: LD_INT 3
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: LD_INT 2
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: LIST
61426: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61427: LD_ADDR_VAR 0 21
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: NEG
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: LIST
61470: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61471: LD_ADDR_VAR 0 22
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: LD_INT 3
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61517: LD_ADDR_VAR 0 23
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: LD_INT 3
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: LD_INT 4
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: LIST
61560: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61561: LD_ADDR_VAR 0 24
61565: PUSH
61566: LD_INT 3
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 4
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: LIST
61601: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61602: LD_ADDR_VAR 0 25
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 4
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 3
61629: PUSH
61630: LD_INT 4
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61642: LD_ADDR_VAR 0 26
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 3
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 4
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: LD_INT 3
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: LIST
61682: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61683: LD_ADDR_VAR 0 27
61687: PUSH
61688: LD_INT 3
61690: NEG
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: LIST
61726: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61727: LD_ADDR_VAR 0 28
61731: PUSH
61732: LD_INT 3
61734: NEG
61735: PUSH
61736: LD_INT 3
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: NEG
61747: PUSH
61748: LD_INT 4
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 4
61758: NEG
61759: PUSH
61760: LD_INT 3
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: LIST
61772: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61773: LD_ADDR_VAR 0 29
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: LD_INT 4
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 4
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 5
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 5
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: LD_INT 4
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 6
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 6
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: LD_INT 5
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61928: LD_ADDR_VAR 0 30
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 4
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 4
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 4
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 5
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 5
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 5
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 6
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 6
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62071: LD_ADDR_VAR 0 31
62075: PUSH
62076: LD_INT 3
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: LD_INT 3
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 2
62098: PUSH
62099: LD_INT 3
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 4
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 4
62118: PUSH
62119: LD_INT 4
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: LD_INT 4
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 5
62138: PUSH
62139: LD_INT 4
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 5
62148: PUSH
62149: LD_INT 5
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 4
62158: PUSH
62159: LD_INT 5
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 6
62168: PUSH
62169: LD_INT 5
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 6
62178: PUSH
62179: LD_INT 6
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 5
62188: PUSH
62189: LD_INT 6
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62210: LD_ADDR_VAR 0 32
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: LD_INT 3
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 3
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 4
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 4
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 3
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: LD_INT 5
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 5
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: LD_INT 4
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: LD_INT 6
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: LD_INT 6
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: LD_INT 5
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62353: LD_ADDR_VAR 0 33
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 3
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: NEG
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 4
62405: NEG
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 4
62416: NEG
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 4
62428: NEG
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 5
62439: NEG
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 5
62450: NEG
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 5
62462: NEG
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 6
62473: NEG
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 6
62484: NEG
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62508: LD_ADDR_VAR 0 34
62512: PUSH
62513: LD_INT 2
62515: NEG
62516: PUSH
62517: LD_INT 3
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 3
62527: NEG
62528: PUSH
62529: LD_INT 2
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 3
62539: NEG
62540: PUSH
62541: LD_INT 3
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 3
62551: NEG
62552: PUSH
62553: LD_INT 4
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 4
62563: NEG
62564: PUSH
62565: LD_INT 3
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 4
62575: NEG
62576: PUSH
62577: LD_INT 4
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 4
62587: NEG
62588: PUSH
62589: LD_INT 5
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 5
62599: NEG
62600: PUSH
62601: LD_INT 4
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 5
62611: NEG
62612: PUSH
62613: LD_INT 5
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 5
62623: NEG
62624: PUSH
62625: LD_INT 6
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 6
62635: NEG
62636: PUSH
62637: LD_INT 5
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 6
62647: NEG
62648: PUSH
62649: LD_INT 6
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62671: LD_ADDR_VAR 0 41
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 2
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62715: LD_ADDR_VAR 0 42
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 3
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62756: LD_ADDR_VAR 0 43
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: LD_INT 2
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 3
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 2
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: LIST
62795: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62796: LD_ADDR_VAR 0 44
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 2
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 3
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: LIST
62836: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62837: LD_ADDR_VAR 0 45
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: LIST
62880: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62881: LD_ADDR_VAR 0 46
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: LD_INT 2
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: LD_INT 3
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 3
62912: NEG
62913: PUSH
62914: LD_INT 2
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: LIST
62926: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62927: LD_ADDR_VAR 0 47
62931: PUSH
62932: LD_INT 2
62934: NEG
62935: PUSH
62936: LD_INT 3
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 3
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62960: LD_ADDR_VAR 0 48
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62991: LD_ADDR_VAR 0 49
62995: PUSH
62996: LD_INT 3
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 3
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63020: LD_ADDR_VAR 0 50
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 3
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 3
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63049: LD_ADDR_VAR 0 51
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 2
63067: NEG
63068: PUSH
63069: LD_INT 1
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63080: LD_ADDR_VAR 0 52
63084: PUSH
63085: LD_INT 3
63087: NEG
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 3
63099: NEG
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63113: LD_ADDR_VAR 0 53
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: LD_INT 3
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 3
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63157: LD_ADDR_VAR 0 54
63161: PUSH
63162: LD_INT 2
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: LD_INT 1
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63198: LD_ADDR_VAR 0 55
63202: PUSH
63203: LD_INT 3
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 3
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 2
63225: PUSH
63226: LD_INT 3
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63238: LD_ADDR_VAR 0 56
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: LD_INT 3
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: LD_INT 3
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: LD_INT 2
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63279: LD_ADDR_VAR 0 57
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 3
63297: NEG
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 3
63308: NEG
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63323: LD_ADDR_VAR 0 58
63327: PUSH
63328: LD_INT 2
63330: NEG
63331: PUSH
63332: LD_INT 3
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 3
63342: NEG
63343: PUSH
63344: LD_INT 2
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 3
63354: NEG
63355: PUSH
63356: LD_INT 3
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: LIST
63368: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63369: LD_ADDR_VAR 0 59
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63413: LD_ADDR_VAR 0 60
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 1
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63454: LD_ADDR_VAR 0 61
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63494: LD_ADDR_VAR 0 62
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 2
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 2
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63535: LD_ADDR_VAR 0 63
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 2
63564: NEG
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: LIST
63578: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63579: LD_ADDR_VAR 0 64
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: LD_INT 2
63590: NEG
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: NEG
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: LD_INT 2
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: ST_TO_ADDR
// end ; 2 :
63625: GO 66891
63627: LD_INT 2
63629: DOUBLE
63630: EQUAL
63631: IFTRUE 63635
63633: GO 66890
63635: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63636: LD_ADDR_VAR 0 29
63640: PUSH
63641: LD_INT 4
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 4
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 5
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 5
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 4
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 3
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 3
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 5
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 3
63736: PUSH
63737: LD_INT 3
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 4
63756: PUSH
63757: LD_INT 3
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 4
63766: PUSH
63767: LD_INT 4
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 3
63776: PUSH
63777: LD_INT 4
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: LD_INT 3
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 2
63796: PUSH
63797: LD_INT 2
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 4
63806: PUSH
63807: LD_INT 2
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: LD_INT 4
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: LD_INT 4
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 3
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: PUSH
63847: LD_INT 4
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: PUSH
63857: LD_INT 5
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: LD_INT 5
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: LD_INT 4
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: LD_INT 3
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: PUSH
63899: LD_INT 5
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 2
63908: NEG
63909: PUSH
63910: LD_INT 3
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 3
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: NEG
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 3
63964: NEG
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 4
63975: NEG
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 4
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 4
63998: NEG
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 4
64021: NEG
64022: PUSH
64023: LD_INT 4
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 4
64033: NEG
64034: PUSH
64035: LD_INT 5
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 3
64045: NEG
64046: PUSH
64047: LD_INT 4
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 3
64057: NEG
64058: PUSH
64059: LD_INT 3
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 4
64069: NEG
64070: PUSH
64071: LD_INT 3
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 5
64081: NEG
64082: PUSH
64083: LD_INT 4
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 5
64093: NEG
64094: PUSH
64095: LD_INT 5
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 3
64105: NEG
64106: PUSH
64107: LD_INT 5
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 5
64117: NEG
64118: PUSH
64119: LD_INT 3
64121: NEG
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64174: LD_ADDR_VAR 0 30
64178: PUSH
64179: LD_INT 4
64181: PUSH
64182: LD_INT 4
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 4
64191: PUSH
64192: LD_INT 3
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 5
64201: PUSH
64202: LD_INT 4
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 5
64211: PUSH
64212: LD_INT 5
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 4
64221: PUSH
64222: LD_INT 5
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 3
64231: PUSH
64232: LD_INT 4
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 3
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 5
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 3
64261: PUSH
64262: LD_INT 5
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 3
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: LD_INT 4
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: LD_INT 4
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 2
64343: PUSH
64344: LD_INT 4
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 2
64353: NEG
64354: PUSH
64355: LD_INT 2
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 4
64364: NEG
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 4
64375: NEG
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 3
64387: NEG
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 4
64409: NEG
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 5
64420: NEG
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 5
64431: NEG
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 5
64443: NEG
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 3
64466: NEG
64467: PUSH
64468: LD_INT 3
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 3
64478: NEG
64479: PUSH
64480: LD_INT 4
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 2
64490: NEG
64491: PUSH
64492: LD_INT 3
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: LD_INT 2
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 3
64514: NEG
64515: PUSH
64516: LD_INT 2
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 4
64526: NEG
64527: PUSH
64528: LD_INT 3
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 4
64538: NEG
64539: PUSH
64540: LD_INT 4
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: LD_INT 4
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 4
64562: NEG
64563: PUSH
64564: LD_INT 2
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 4
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: LD_INT 5
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: LD_INT 4
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: LD_INT 3
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: LD_INT 4
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: LD_INT 5
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: LD_INT 3
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: LD_INT 5
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64721: LD_ADDR_VAR 0 31
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: LD_INT 4
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: LD_INT 3
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: LD_INT 4
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: LD_INT 5
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: LD_INT 5
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: LD_INT 4
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: LD_INT 3
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 2
64800: PUSH
64801: LD_INT 5
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 3
64821: NEG
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 3
64832: NEG
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: NEG
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 2
64855: NEG
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 3
64866: NEG
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 4
64877: NEG
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 4
64888: NEG
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 4
64900: NEG
64901: PUSH
64902: LD_INT 2
64904: NEG
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: LD_INT 2
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 4
64923: NEG
64924: PUSH
64925: LD_INT 4
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 4
64935: NEG
64936: PUSH
64937: LD_INT 5
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 3
64947: NEG
64948: PUSH
64949: LD_INT 4
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 3
64959: NEG
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 4
64971: NEG
64972: PUSH
64973: LD_INT 3
64975: NEG
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 5
64983: NEG
64984: PUSH
64985: LD_INT 4
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 5
64995: NEG
64996: PUSH
64997: LD_INT 5
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 3
65007: NEG
65008: PUSH
65009: LD_INT 5
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 5
65019: NEG
65020: PUSH
65021: LD_INT 3
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 3
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 4
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: PUSH
65054: LD_INT 3
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: LD_INT 2
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: LD_INT 2
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: LD_INT 3
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: LD_INT 4
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 2
65121: NEG
65122: PUSH
65123: LD_INT 4
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 4
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 4
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 5
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 5
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 4
65174: PUSH
65175: LD_INT 1
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 3
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 3
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 3
65205: PUSH
65206: LD_INT 2
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 5
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65271: LD_ADDR_VAR 0 32
65275: PUSH
65276: LD_INT 4
65278: NEG
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 4
65289: NEG
65290: PUSH
65291: LD_INT 1
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 3
65301: NEG
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 3
65312: NEG
65313: PUSH
65314: LD_INT 1
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 4
65323: NEG
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 5
65334: NEG
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 5
65345: NEG
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 5
65357: NEG
65358: PUSH
65359: LD_INT 2
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 3
65369: NEG
65370: PUSH
65371: LD_INT 2
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 3
65380: NEG
65381: PUSH
65382: LD_INT 3
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 3
65392: NEG
65393: PUSH
65394: LD_INT 4
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 2
65404: NEG
65405: PUSH
65406: LD_INT 3
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 3
65428: NEG
65429: PUSH
65430: LD_INT 2
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 4
65440: NEG
65441: PUSH
65442: LD_INT 3
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 4
65452: NEG
65453: PUSH
65454: LD_INT 4
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 2
65464: NEG
65465: PUSH
65466: LD_INT 4
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 4
65476: NEG
65477: PUSH
65478: LD_INT 2
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: LD_INT 4
65491: NEG
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 5
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: LD_INT 4
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: LD_INT 3
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 1
65543: NEG
65544: PUSH
65545: LD_INT 4
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: NEG
65556: PUSH
65557: LD_INT 5
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 2
65567: PUSH
65568: LD_INT 3
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 2
65578: NEG
65579: PUSH
65580: LD_INT 5
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 3
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 3
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 4
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 4
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 3
65631: PUSH
65632: LD_INT 1
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 2
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 2
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: LD_INT 2
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 4
65673: PUSH
65674: LD_INT 2
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 4
65683: PUSH
65684: LD_INT 4
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 4
65693: PUSH
65694: LD_INT 3
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 5
65703: PUSH
65704: LD_INT 4
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 5
65713: PUSH
65714: LD_INT 5
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 4
65723: PUSH
65724: LD_INT 5
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 3
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 3
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 5
65753: PUSH
65754: LD_INT 3
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: LD_INT 5
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65818: LD_ADDR_VAR 0 33
65822: PUSH
65823: LD_INT 4
65825: NEG
65826: PUSH
65827: LD_INT 4
65829: NEG
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 4
65837: NEG
65838: PUSH
65839: LD_INT 5
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 3
65849: NEG
65850: PUSH
65851: LD_INT 4
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 3
65861: NEG
65862: PUSH
65863: LD_INT 3
65865: NEG
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 4
65873: NEG
65874: PUSH
65875: LD_INT 3
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 5
65885: NEG
65886: PUSH
65887: LD_INT 4
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 5
65897: NEG
65898: PUSH
65899: LD_INT 5
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 3
65909: NEG
65910: PUSH
65911: LD_INT 5
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 5
65921: NEG
65922: PUSH
65923: LD_INT 3
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: LD_INT 3
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 0
65944: PUSH
65945: LD_INT 4
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: LD_INT 3
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: LD_INT 2
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: LD_INT 2
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: LD_INT 3
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: LD_INT 4
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: LD_INT 2
66015: NEG
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: LD_INT 4
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 4
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 4
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 5
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 5
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 4
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 3
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: PUSH
66097: LD_INT 1
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 3
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 5
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: LD_INT 3
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 3
66138: PUSH
66139: LD_INT 2
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 4
66148: PUSH
66149: LD_INT 3
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 4
66158: PUSH
66159: LD_INT 4
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 3
66168: PUSH
66169: LD_INT 4
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 2
66178: PUSH
66179: LD_INT 3
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 2
66188: PUSH
66189: LD_INT 2
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 4
66198: PUSH
66199: LD_INT 2
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 4
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 0
66218: PUSH
66219: LD_INT 4
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: LD_INT 3
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: PUSH
66239: LD_INT 4
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: LD_INT 5
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: LD_INT 5
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: NEG
66269: PUSH
66270: LD_INT 4
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: LD_INT 3
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 2
66290: PUSH
66291: LD_INT 5
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: LD_INT 3
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66356: LD_ADDR_VAR 0 34
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: LD_INT 4
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: LD_INT 5
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: LD_INT 4
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: PUSH
66397: LD_INT 3
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: LD_INT 3
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: PUSH
66420: LD_INT 4
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: NEG
66431: PUSH
66432: LD_INT 5
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: LD_INT 3
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 2
66453: NEG
66454: PUSH
66455: LD_INT 5
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 3
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: LD_INT 1
66478: NEG
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 4
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 4
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 3
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 2
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 2
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 4
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 4
66558: PUSH
66559: LD_INT 4
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 4
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 5
66578: PUSH
66579: LD_INT 4
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 5
66588: PUSH
66589: LD_INT 5
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 4
66598: PUSH
66599: LD_INT 5
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 3
66608: PUSH
66609: LD_INT 4
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 3
66618: PUSH
66619: LD_INT 3
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 5
66628: PUSH
66629: LD_INT 3
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 3
66638: PUSH
66639: LD_INT 5
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: LD_INT 3
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: LD_INT 2
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: LD_INT 4
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 0
66688: PUSH
66689: LD_INT 4
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 1
66698: NEG
66699: PUSH
66700: LD_INT 3
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: NEG
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: LD_INT 4
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: NEG
66731: PUSH
66732: LD_INT 2
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 4
66741: NEG
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 4
66752: NEG
66753: PUSH
66754: LD_INT 1
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 3
66764: NEG
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 3
66775: NEG
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 4
66786: NEG
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 5
66797: NEG
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 5
66808: NEG
66809: PUSH
66810: LD_INT 1
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 5
66820: NEG
66821: PUSH
66822: LD_INT 2
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 3
66832: NEG
66833: PUSH
66834: LD_INT 2
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: ST_TO_ADDR
// end ; end ;
66888: GO 66891
66890: POP
// case btype of b_depot , b_warehouse :
66891: LD_VAR 0 1
66895: PUSH
66896: LD_INT 0
66898: DOUBLE
66899: EQUAL
66900: IFTRUE 66910
66902: LD_INT 1
66904: DOUBLE
66905: EQUAL
66906: IFTRUE 66910
66908: GO 67111
66910: POP
// case nation of nation_american :
66911: LD_VAR 0 5
66915: PUSH
66916: LD_INT 1
66918: DOUBLE
66919: EQUAL
66920: IFTRUE 66924
66922: GO 66980
66924: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66925: LD_ADDR_VAR 0 9
66929: PUSH
66930: LD_VAR 0 11
66934: PUSH
66935: LD_VAR 0 12
66939: PUSH
66940: LD_VAR 0 13
66944: PUSH
66945: LD_VAR 0 14
66949: PUSH
66950: LD_VAR 0 15
66954: PUSH
66955: LD_VAR 0 16
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: PUSH
66968: LD_VAR 0 4
66972: PUSH
66973: LD_INT 1
66975: PLUS
66976: ARRAY
66977: ST_TO_ADDR
66978: GO 67109
66980: LD_INT 2
66982: DOUBLE
66983: EQUAL
66984: IFTRUE 66988
66986: GO 67044
66988: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66989: LD_ADDR_VAR 0 9
66993: PUSH
66994: LD_VAR 0 17
66998: PUSH
66999: LD_VAR 0 18
67003: PUSH
67004: LD_VAR 0 19
67008: PUSH
67009: LD_VAR 0 20
67013: PUSH
67014: LD_VAR 0 21
67018: PUSH
67019: LD_VAR 0 22
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: PUSH
67032: LD_VAR 0 4
67036: PUSH
67037: LD_INT 1
67039: PLUS
67040: ARRAY
67041: ST_TO_ADDR
67042: GO 67109
67044: LD_INT 3
67046: DOUBLE
67047: EQUAL
67048: IFTRUE 67052
67050: GO 67108
67052: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67053: LD_ADDR_VAR 0 9
67057: PUSH
67058: LD_VAR 0 23
67062: PUSH
67063: LD_VAR 0 24
67067: PUSH
67068: LD_VAR 0 25
67072: PUSH
67073: LD_VAR 0 26
67077: PUSH
67078: LD_VAR 0 27
67082: PUSH
67083: LD_VAR 0 28
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: PUSH
67096: LD_VAR 0 4
67100: PUSH
67101: LD_INT 1
67103: PLUS
67104: ARRAY
67105: ST_TO_ADDR
67106: GO 67109
67108: POP
67109: GO 67664
67111: LD_INT 2
67113: DOUBLE
67114: EQUAL
67115: IFTRUE 67125
67117: LD_INT 3
67119: DOUBLE
67120: EQUAL
67121: IFTRUE 67125
67123: GO 67181
67125: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67126: LD_ADDR_VAR 0 9
67130: PUSH
67131: LD_VAR 0 29
67135: PUSH
67136: LD_VAR 0 30
67140: PUSH
67141: LD_VAR 0 31
67145: PUSH
67146: LD_VAR 0 32
67150: PUSH
67151: LD_VAR 0 33
67155: PUSH
67156: LD_VAR 0 34
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: PUSH
67169: LD_VAR 0 4
67173: PUSH
67174: LD_INT 1
67176: PLUS
67177: ARRAY
67178: ST_TO_ADDR
67179: GO 67664
67181: LD_INT 16
67183: DOUBLE
67184: EQUAL
67185: IFTRUE 67243
67187: LD_INT 17
67189: DOUBLE
67190: EQUAL
67191: IFTRUE 67243
67193: LD_INT 18
67195: DOUBLE
67196: EQUAL
67197: IFTRUE 67243
67199: LD_INT 19
67201: DOUBLE
67202: EQUAL
67203: IFTRUE 67243
67205: LD_INT 22
67207: DOUBLE
67208: EQUAL
67209: IFTRUE 67243
67211: LD_INT 20
67213: DOUBLE
67214: EQUAL
67215: IFTRUE 67243
67217: LD_INT 21
67219: DOUBLE
67220: EQUAL
67221: IFTRUE 67243
67223: LD_INT 23
67225: DOUBLE
67226: EQUAL
67227: IFTRUE 67243
67229: LD_INT 24
67231: DOUBLE
67232: EQUAL
67233: IFTRUE 67243
67235: LD_INT 25
67237: DOUBLE
67238: EQUAL
67239: IFTRUE 67243
67241: GO 67299
67243: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67244: LD_ADDR_VAR 0 9
67248: PUSH
67249: LD_VAR 0 35
67253: PUSH
67254: LD_VAR 0 36
67258: PUSH
67259: LD_VAR 0 37
67263: PUSH
67264: LD_VAR 0 38
67268: PUSH
67269: LD_VAR 0 39
67273: PUSH
67274: LD_VAR 0 40
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: PUSH
67287: LD_VAR 0 4
67291: PUSH
67292: LD_INT 1
67294: PLUS
67295: ARRAY
67296: ST_TO_ADDR
67297: GO 67664
67299: LD_INT 6
67301: DOUBLE
67302: EQUAL
67303: IFTRUE 67355
67305: LD_INT 7
67307: DOUBLE
67308: EQUAL
67309: IFTRUE 67355
67311: LD_INT 8
67313: DOUBLE
67314: EQUAL
67315: IFTRUE 67355
67317: LD_INT 13
67319: DOUBLE
67320: EQUAL
67321: IFTRUE 67355
67323: LD_INT 12
67325: DOUBLE
67326: EQUAL
67327: IFTRUE 67355
67329: LD_INT 15
67331: DOUBLE
67332: EQUAL
67333: IFTRUE 67355
67335: LD_INT 11
67337: DOUBLE
67338: EQUAL
67339: IFTRUE 67355
67341: LD_INT 14
67343: DOUBLE
67344: EQUAL
67345: IFTRUE 67355
67347: LD_INT 10
67349: DOUBLE
67350: EQUAL
67351: IFTRUE 67355
67353: GO 67411
67355: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67356: LD_ADDR_VAR 0 9
67360: PUSH
67361: LD_VAR 0 41
67365: PUSH
67366: LD_VAR 0 42
67370: PUSH
67371: LD_VAR 0 43
67375: PUSH
67376: LD_VAR 0 44
67380: PUSH
67381: LD_VAR 0 45
67385: PUSH
67386: LD_VAR 0 46
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: PUSH
67399: LD_VAR 0 4
67403: PUSH
67404: LD_INT 1
67406: PLUS
67407: ARRAY
67408: ST_TO_ADDR
67409: GO 67664
67411: LD_INT 36
67413: DOUBLE
67414: EQUAL
67415: IFTRUE 67419
67417: GO 67475
67419: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67420: LD_ADDR_VAR 0 9
67424: PUSH
67425: LD_VAR 0 47
67429: PUSH
67430: LD_VAR 0 48
67434: PUSH
67435: LD_VAR 0 49
67439: PUSH
67440: LD_VAR 0 50
67444: PUSH
67445: LD_VAR 0 51
67449: PUSH
67450: LD_VAR 0 52
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: PUSH
67463: LD_VAR 0 4
67467: PUSH
67468: LD_INT 1
67470: PLUS
67471: ARRAY
67472: ST_TO_ADDR
67473: GO 67664
67475: LD_INT 4
67477: DOUBLE
67478: EQUAL
67479: IFTRUE 67501
67481: LD_INT 5
67483: DOUBLE
67484: EQUAL
67485: IFTRUE 67501
67487: LD_INT 34
67489: DOUBLE
67490: EQUAL
67491: IFTRUE 67501
67493: LD_INT 37
67495: DOUBLE
67496: EQUAL
67497: IFTRUE 67501
67499: GO 67557
67501: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67502: LD_ADDR_VAR 0 9
67506: PUSH
67507: LD_VAR 0 53
67511: PUSH
67512: LD_VAR 0 54
67516: PUSH
67517: LD_VAR 0 55
67521: PUSH
67522: LD_VAR 0 56
67526: PUSH
67527: LD_VAR 0 57
67531: PUSH
67532: LD_VAR 0 58
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: PUSH
67545: LD_VAR 0 4
67549: PUSH
67550: LD_INT 1
67552: PLUS
67553: ARRAY
67554: ST_TO_ADDR
67555: GO 67664
67557: LD_INT 31
67559: DOUBLE
67560: EQUAL
67561: IFTRUE 67607
67563: LD_INT 32
67565: DOUBLE
67566: EQUAL
67567: IFTRUE 67607
67569: LD_INT 33
67571: DOUBLE
67572: EQUAL
67573: IFTRUE 67607
67575: LD_INT 27
67577: DOUBLE
67578: EQUAL
67579: IFTRUE 67607
67581: LD_INT 26
67583: DOUBLE
67584: EQUAL
67585: IFTRUE 67607
67587: LD_INT 28
67589: DOUBLE
67590: EQUAL
67591: IFTRUE 67607
67593: LD_INT 29
67595: DOUBLE
67596: EQUAL
67597: IFTRUE 67607
67599: LD_INT 30
67601: DOUBLE
67602: EQUAL
67603: IFTRUE 67607
67605: GO 67663
67607: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67608: LD_ADDR_VAR 0 9
67612: PUSH
67613: LD_VAR 0 59
67617: PUSH
67618: LD_VAR 0 60
67622: PUSH
67623: LD_VAR 0 61
67627: PUSH
67628: LD_VAR 0 62
67632: PUSH
67633: LD_VAR 0 63
67637: PUSH
67638: LD_VAR 0 64
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: PUSH
67651: LD_VAR 0 4
67655: PUSH
67656: LD_INT 1
67658: PLUS
67659: ARRAY
67660: ST_TO_ADDR
67661: GO 67664
67663: POP
// temp_list2 = [ ] ;
67664: LD_ADDR_VAR 0 10
67668: PUSH
67669: EMPTY
67670: ST_TO_ADDR
// for i in temp_list do
67671: LD_ADDR_VAR 0 8
67675: PUSH
67676: LD_VAR 0 9
67680: PUSH
67681: FOR_IN
67682: IFFALSE 67734
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67684: LD_ADDR_VAR 0 10
67688: PUSH
67689: LD_VAR 0 10
67693: PUSH
67694: LD_VAR 0 8
67698: PUSH
67699: LD_INT 1
67701: ARRAY
67702: PUSH
67703: LD_VAR 0 2
67707: PLUS
67708: PUSH
67709: LD_VAR 0 8
67713: PUSH
67714: LD_INT 2
67716: ARRAY
67717: PUSH
67718: LD_VAR 0 3
67722: PLUS
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: EMPTY
67729: LIST
67730: ADD
67731: ST_TO_ADDR
67732: GO 67681
67734: POP
67735: POP
// result = temp_list2 ;
67736: LD_ADDR_VAR 0 7
67740: PUSH
67741: LD_VAR 0 10
67745: ST_TO_ADDR
// end ;
67746: LD_VAR 0 7
67750: RET
// export function EnemyInRange ( unit , dist ) ; begin
67751: LD_INT 0
67753: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67754: LD_ADDR_VAR 0 3
67758: PUSH
67759: LD_VAR 0 1
67763: PPUSH
67764: CALL_OW 255
67768: PPUSH
67769: LD_VAR 0 1
67773: PPUSH
67774: CALL_OW 250
67778: PPUSH
67779: LD_VAR 0 1
67783: PPUSH
67784: CALL_OW 251
67788: PPUSH
67789: LD_VAR 0 2
67793: PPUSH
67794: CALL 41855 0 4
67798: PUSH
67799: LD_INT 4
67801: ARRAY
67802: ST_TO_ADDR
// end ;
67803: LD_VAR 0 3
67807: RET
// export function PlayerSeeMe ( unit ) ; begin
67808: LD_INT 0
67810: PPUSH
// result := See ( your_side , unit ) ;
67811: LD_ADDR_VAR 0 2
67815: PUSH
67816: LD_OWVAR 2
67820: PPUSH
67821: LD_VAR 0 1
67825: PPUSH
67826: CALL_OW 292
67830: ST_TO_ADDR
// end ;
67831: LD_VAR 0 2
67835: RET
// export function ReverseDir ( unit ) ; begin
67836: LD_INT 0
67838: PPUSH
// if not unit then
67839: LD_VAR 0 1
67843: NOT
67844: IFFALSE 67848
// exit ;
67846: GO 67871
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67848: LD_ADDR_VAR 0 2
67852: PUSH
67853: LD_VAR 0 1
67857: PPUSH
67858: CALL_OW 254
67862: PUSH
67863: LD_INT 3
67865: PLUS
67866: PUSH
67867: LD_INT 6
67869: MOD
67870: ST_TO_ADDR
// end ;
67871: LD_VAR 0 2
67875: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67876: LD_INT 0
67878: PPUSH
67879: PPUSH
67880: PPUSH
67881: PPUSH
67882: PPUSH
// if not hexes then
67883: LD_VAR 0 2
67887: NOT
67888: IFFALSE 67892
// exit ;
67890: GO 68040
// dist := 9999 ;
67892: LD_ADDR_VAR 0 5
67896: PUSH
67897: LD_INT 9999
67899: ST_TO_ADDR
// for i = 1 to hexes do
67900: LD_ADDR_VAR 0 4
67904: PUSH
67905: DOUBLE
67906: LD_INT 1
67908: DEC
67909: ST_TO_ADDR
67910: LD_VAR 0 2
67914: PUSH
67915: FOR_TO
67916: IFFALSE 68028
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67918: LD_VAR 0 1
67922: PPUSH
67923: LD_VAR 0 2
67927: PUSH
67928: LD_VAR 0 4
67932: ARRAY
67933: PUSH
67934: LD_INT 1
67936: ARRAY
67937: PPUSH
67938: LD_VAR 0 2
67942: PUSH
67943: LD_VAR 0 4
67947: ARRAY
67948: PUSH
67949: LD_INT 2
67951: ARRAY
67952: PPUSH
67953: CALL_OW 297
67957: PUSH
67958: LD_VAR 0 5
67962: LESS
67963: IFFALSE 68026
// begin hex := hexes [ i ] ;
67965: LD_ADDR_VAR 0 7
67969: PUSH
67970: LD_VAR 0 2
67974: PUSH
67975: LD_VAR 0 4
67979: ARRAY
67980: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67981: LD_ADDR_VAR 0 5
67985: PUSH
67986: LD_VAR 0 1
67990: PPUSH
67991: LD_VAR 0 2
67995: PUSH
67996: LD_VAR 0 4
68000: ARRAY
68001: PUSH
68002: LD_INT 1
68004: ARRAY
68005: PPUSH
68006: LD_VAR 0 2
68010: PUSH
68011: LD_VAR 0 4
68015: ARRAY
68016: PUSH
68017: LD_INT 2
68019: ARRAY
68020: PPUSH
68021: CALL_OW 297
68025: ST_TO_ADDR
// end ; end ;
68026: GO 67915
68028: POP
68029: POP
// result := hex ;
68030: LD_ADDR_VAR 0 3
68034: PUSH
68035: LD_VAR 0 7
68039: ST_TO_ADDR
// end ;
68040: LD_VAR 0 3
68044: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68045: LD_INT 0
68047: PPUSH
68048: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68049: LD_VAR 0 1
68053: NOT
68054: PUSH
68055: LD_VAR 0 1
68059: PUSH
68060: LD_INT 21
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 23
68072: PUSH
68073: LD_INT 2
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PPUSH
68084: CALL_OW 69
68088: IN
68089: NOT
68090: OR
68091: IFFALSE 68095
// exit ;
68093: GO 68142
// for i = 1 to 3 do
68095: LD_ADDR_VAR 0 3
68099: PUSH
68100: DOUBLE
68101: LD_INT 1
68103: DEC
68104: ST_TO_ADDR
68105: LD_INT 3
68107: PUSH
68108: FOR_TO
68109: IFFALSE 68140
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68111: LD_VAR 0 1
68115: PPUSH
68116: CALL_OW 250
68120: PPUSH
68121: LD_VAR 0 1
68125: PPUSH
68126: CALL_OW 251
68130: PPUSH
68131: LD_INT 1
68133: PPUSH
68134: CALL_OW 453
68138: GO 68108
68140: POP
68141: POP
// end ;
68142: LD_VAR 0 2
68146: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68147: LD_INT 0
68149: PPUSH
68150: PPUSH
68151: PPUSH
68152: PPUSH
68153: PPUSH
68154: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68155: LD_VAR 0 1
68159: NOT
68160: PUSH
68161: LD_VAR 0 2
68165: NOT
68166: OR
68167: PUSH
68168: LD_VAR 0 1
68172: PPUSH
68173: CALL_OW 314
68177: OR
68178: IFFALSE 68182
// exit ;
68180: GO 68623
// x := GetX ( enemy_unit ) ;
68182: LD_ADDR_VAR 0 7
68186: PUSH
68187: LD_VAR 0 2
68191: PPUSH
68192: CALL_OW 250
68196: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68197: LD_ADDR_VAR 0 8
68201: PUSH
68202: LD_VAR 0 2
68206: PPUSH
68207: CALL_OW 251
68211: ST_TO_ADDR
// if not x or not y then
68212: LD_VAR 0 7
68216: NOT
68217: PUSH
68218: LD_VAR 0 8
68222: NOT
68223: OR
68224: IFFALSE 68228
// exit ;
68226: GO 68623
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68228: LD_ADDR_VAR 0 6
68232: PUSH
68233: LD_VAR 0 7
68237: PPUSH
68238: LD_INT 0
68240: PPUSH
68241: LD_INT 4
68243: PPUSH
68244: CALL_OW 272
68248: PUSH
68249: LD_VAR 0 8
68253: PPUSH
68254: LD_INT 0
68256: PPUSH
68257: LD_INT 4
68259: PPUSH
68260: CALL_OW 273
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_VAR 0 7
68273: PPUSH
68274: LD_INT 1
68276: PPUSH
68277: LD_INT 4
68279: PPUSH
68280: CALL_OW 272
68284: PUSH
68285: LD_VAR 0 8
68289: PPUSH
68290: LD_INT 1
68292: PPUSH
68293: LD_INT 4
68295: PPUSH
68296: CALL_OW 273
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_VAR 0 7
68309: PPUSH
68310: LD_INT 2
68312: PPUSH
68313: LD_INT 4
68315: PPUSH
68316: CALL_OW 272
68320: PUSH
68321: LD_VAR 0 8
68325: PPUSH
68326: LD_INT 2
68328: PPUSH
68329: LD_INT 4
68331: PPUSH
68332: CALL_OW 273
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_VAR 0 7
68345: PPUSH
68346: LD_INT 3
68348: PPUSH
68349: LD_INT 4
68351: PPUSH
68352: CALL_OW 272
68356: PUSH
68357: LD_VAR 0 8
68361: PPUSH
68362: LD_INT 3
68364: PPUSH
68365: LD_INT 4
68367: PPUSH
68368: CALL_OW 273
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_VAR 0 7
68381: PPUSH
68382: LD_INT 4
68384: PPUSH
68385: LD_INT 4
68387: PPUSH
68388: CALL_OW 272
68392: PUSH
68393: LD_VAR 0 8
68397: PPUSH
68398: LD_INT 4
68400: PPUSH
68401: LD_INT 4
68403: PPUSH
68404: CALL_OW 273
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_VAR 0 7
68417: PPUSH
68418: LD_INT 5
68420: PPUSH
68421: LD_INT 4
68423: PPUSH
68424: CALL_OW 272
68428: PUSH
68429: LD_VAR 0 8
68433: PPUSH
68434: LD_INT 5
68436: PPUSH
68437: LD_INT 4
68439: PPUSH
68440: CALL_OW 273
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: ST_TO_ADDR
// for i = tmp downto 1 do
68457: LD_ADDR_VAR 0 4
68461: PUSH
68462: DOUBLE
68463: LD_VAR 0 6
68467: INC
68468: ST_TO_ADDR
68469: LD_INT 1
68471: PUSH
68472: FOR_DOWNTO
68473: IFFALSE 68574
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68475: LD_VAR 0 6
68479: PUSH
68480: LD_VAR 0 4
68484: ARRAY
68485: PUSH
68486: LD_INT 1
68488: ARRAY
68489: PPUSH
68490: LD_VAR 0 6
68494: PUSH
68495: LD_VAR 0 4
68499: ARRAY
68500: PUSH
68501: LD_INT 2
68503: ARRAY
68504: PPUSH
68505: CALL_OW 488
68509: NOT
68510: PUSH
68511: LD_VAR 0 6
68515: PUSH
68516: LD_VAR 0 4
68520: ARRAY
68521: PUSH
68522: LD_INT 1
68524: ARRAY
68525: PPUSH
68526: LD_VAR 0 6
68530: PUSH
68531: LD_VAR 0 4
68535: ARRAY
68536: PUSH
68537: LD_INT 2
68539: ARRAY
68540: PPUSH
68541: CALL_OW 428
68545: PUSH
68546: LD_INT 0
68548: NONEQUAL
68549: OR
68550: IFFALSE 68572
// tmp := Delete ( tmp , i ) ;
68552: LD_ADDR_VAR 0 6
68556: PUSH
68557: LD_VAR 0 6
68561: PPUSH
68562: LD_VAR 0 4
68566: PPUSH
68567: CALL_OW 3
68571: ST_TO_ADDR
68572: GO 68472
68574: POP
68575: POP
// j := GetClosestHex ( unit , tmp ) ;
68576: LD_ADDR_VAR 0 5
68580: PUSH
68581: LD_VAR 0 1
68585: PPUSH
68586: LD_VAR 0 6
68590: PPUSH
68591: CALL 67876 0 2
68595: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68596: LD_VAR 0 1
68600: PPUSH
68601: LD_VAR 0 5
68605: PUSH
68606: LD_INT 1
68608: ARRAY
68609: PPUSH
68610: LD_VAR 0 5
68614: PUSH
68615: LD_INT 2
68617: ARRAY
68618: PPUSH
68619: CALL_OW 111
// end ;
68623: LD_VAR 0 3
68627: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68628: LD_INT 0
68630: PPUSH
68631: PPUSH
68632: PPUSH
// uc_side = 0 ;
68633: LD_ADDR_OWVAR 20
68637: PUSH
68638: LD_INT 0
68640: ST_TO_ADDR
// uc_nation = 0 ;
68641: LD_ADDR_OWVAR 21
68645: PUSH
68646: LD_INT 0
68648: ST_TO_ADDR
// InitHc_All ( ) ;
68649: CALL_OW 584
// InitVc ;
68653: CALL_OW 20
// if mastodonts then
68657: LD_VAR 0 6
68661: IFFALSE 68728
// for i = 1 to mastodonts do
68663: LD_ADDR_VAR 0 11
68667: PUSH
68668: DOUBLE
68669: LD_INT 1
68671: DEC
68672: ST_TO_ADDR
68673: LD_VAR 0 6
68677: PUSH
68678: FOR_TO
68679: IFFALSE 68726
// begin vc_chassis := 31 ;
68681: LD_ADDR_OWVAR 37
68685: PUSH
68686: LD_INT 31
68688: ST_TO_ADDR
// vc_control := control_rider ;
68689: LD_ADDR_OWVAR 38
68693: PUSH
68694: LD_INT 4
68696: ST_TO_ADDR
// animal := CreateVehicle ;
68697: LD_ADDR_VAR 0 12
68701: PUSH
68702: CALL_OW 45
68706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68707: LD_VAR 0 12
68711: PPUSH
68712: LD_VAR 0 8
68716: PPUSH
68717: LD_INT 0
68719: PPUSH
68720: CALL 70916 0 3
// end ;
68724: GO 68678
68726: POP
68727: POP
// if horses then
68728: LD_VAR 0 5
68732: IFFALSE 68799
// for i = 1 to horses do
68734: LD_ADDR_VAR 0 11
68738: PUSH
68739: DOUBLE
68740: LD_INT 1
68742: DEC
68743: ST_TO_ADDR
68744: LD_VAR 0 5
68748: PUSH
68749: FOR_TO
68750: IFFALSE 68797
// begin hc_class := 21 ;
68752: LD_ADDR_OWVAR 28
68756: PUSH
68757: LD_INT 21
68759: ST_TO_ADDR
// hc_gallery :=  ;
68760: LD_ADDR_OWVAR 33
68764: PUSH
68765: LD_STRING 
68767: ST_TO_ADDR
// animal := CreateHuman ;
68768: LD_ADDR_VAR 0 12
68772: PUSH
68773: CALL_OW 44
68777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68778: LD_VAR 0 12
68782: PPUSH
68783: LD_VAR 0 8
68787: PPUSH
68788: LD_INT 0
68790: PPUSH
68791: CALL 70916 0 3
// end ;
68795: GO 68749
68797: POP
68798: POP
// if birds then
68799: LD_VAR 0 1
68803: IFFALSE 68870
// for i = 1 to birds do
68805: LD_ADDR_VAR 0 11
68809: PUSH
68810: DOUBLE
68811: LD_INT 1
68813: DEC
68814: ST_TO_ADDR
68815: LD_VAR 0 1
68819: PUSH
68820: FOR_TO
68821: IFFALSE 68868
// begin hc_class = 18 ;
68823: LD_ADDR_OWVAR 28
68827: PUSH
68828: LD_INT 18
68830: ST_TO_ADDR
// hc_gallery =  ;
68831: LD_ADDR_OWVAR 33
68835: PUSH
68836: LD_STRING 
68838: ST_TO_ADDR
// animal := CreateHuman ;
68839: LD_ADDR_VAR 0 12
68843: PUSH
68844: CALL_OW 44
68848: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68849: LD_VAR 0 12
68853: PPUSH
68854: LD_VAR 0 8
68858: PPUSH
68859: LD_INT 0
68861: PPUSH
68862: CALL 70916 0 3
// end ;
68866: GO 68820
68868: POP
68869: POP
// if tigers then
68870: LD_VAR 0 2
68874: IFFALSE 68958
// for i = 1 to tigers do
68876: LD_ADDR_VAR 0 11
68880: PUSH
68881: DOUBLE
68882: LD_INT 1
68884: DEC
68885: ST_TO_ADDR
68886: LD_VAR 0 2
68890: PUSH
68891: FOR_TO
68892: IFFALSE 68956
// begin hc_class = class_tiger ;
68894: LD_ADDR_OWVAR 28
68898: PUSH
68899: LD_INT 14
68901: ST_TO_ADDR
// hc_gallery =  ;
68902: LD_ADDR_OWVAR 33
68906: PUSH
68907: LD_STRING 
68909: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68910: LD_ADDR_OWVAR 35
68914: PUSH
68915: LD_INT 7
68917: NEG
68918: PPUSH
68919: LD_INT 7
68921: PPUSH
68922: CALL_OW 12
68926: ST_TO_ADDR
// animal := CreateHuman ;
68927: LD_ADDR_VAR 0 12
68931: PUSH
68932: CALL_OW 44
68936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68937: LD_VAR 0 12
68941: PPUSH
68942: LD_VAR 0 8
68946: PPUSH
68947: LD_INT 0
68949: PPUSH
68950: CALL 70916 0 3
// end ;
68954: GO 68891
68956: POP
68957: POP
// if apemans then
68958: LD_VAR 0 3
68962: IFFALSE 69085
// for i = 1 to apemans do
68964: LD_ADDR_VAR 0 11
68968: PUSH
68969: DOUBLE
68970: LD_INT 1
68972: DEC
68973: ST_TO_ADDR
68974: LD_VAR 0 3
68978: PUSH
68979: FOR_TO
68980: IFFALSE 69083
// begin hc_class = class_apeman ;
68982: LD_ADDR_OWVAR 28
68986: PUSH
68987: LD_INT 12
68989: ST_TO_ADDR
// hc_gallery =  ;
68990: LD_ADDR_OWVAR 33
68994: PUSH
68995: LD_STRING 
68997: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
68998: LD_ADDR_OWVAR 35
69002: PUSH
69003: LD_INT 5
69005: NEG
69006: PPUSH
69007: LD_INT 5
69009: PPUSH
69010: CALL_OW 12
69014: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69015: LD_ADDR_OWVAR 31
69019: PUSH
69020: LD_INT 1
69022: PPUSH
69023: LD_INT 3
69025: PPUSH
69026: CALL_OW 12
69030: PUSH
69031: LD_INT 1
69033: PPUSH
69034: LD_INT 3
69036: PPUSH
69037: CALL_OW 12
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: LD_INT 0
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: ST_TO_ADDR
// animal := CreateHuman ;
69054: LD_ADDR_VAR 0 12
69058: PUSH
69059: CALL_OW 44
69063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69064: LD_VAR 0 12
69068: PPUSH
69069: LD_VAR 0 8
69073: PPUSH
69074: LD_INT 0
69076: PPUSH
69077: CALL 70916 0 3
// end ;
69081: GO 68979
69083: POP
69084: POP
// if enchidnas then
69085: LD_VAR 0 4
69089: IFFALSE 69156
// for i = 1 to enchidnas do
69091: LD_ADDR_VAR 0 11
69095: PUSH
69096: DOUBLE
69097: LD_INT 1
69099: DEC
69100: ST_TO_ADDR
69101: LD_VAR 0 4
69105: PUSH
69106: FOR_TO
69107: IFFALSE 69154
// begin hc_class = 13 ;
69109: LD_ADDR_OWVAR 28
69113: PUSH
69114: LD_INT 13
69116: ST_TO_ADDR
// hc_gallery =  ;
69117: LD_ADDR_OWVAR 33
69121: PUSH
69122: LD_STRING 
69124: ST_TO_ADDR
// animal := CreateHuman ;
69125: LD_ADDR_VAR 0 12
69129: PUSH
69130: CALL_OW 44
69134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69135: LD_VAR 0 12
69139: PPUSH
69140: LD_VAR 0 8
69144: PPUSH
69145: LD_INT 0
69147: PPUSH
69148: CALL 70916 0 3
// end ;
69152: GO 69106
69154: POP
69155: POP
// if fishes then
69156: LD_VAR 0 7
69160: IFFALSE 69227
// for i = 1 to fishes do
69162: LD_ADDR_VAR 0 11
69166: PUSH
69167: DOUBLE
69168: LD_INT 1
69170: DEC
69171: ST_TO_ADDR
69172: LD_VAR 0 7
69176: PUSH
69177: FOR_TO
69178: IFFALSE 69225
// begin hc_class = 20 ;
69180: LD_ADDR_OWVAR 28
69184: PUSH
69185: LD_INT 20
69187: ST_TO_ADDR
// hc_gallery =  ;
69188: LD_ADDR_OWVAR 33
69192: PUSH
69193: LD_STRING 
69195: ST_TO_ADDR
// animal := CreateHuman ;
69196: LD_ADDR_VAR 0 12
69200: PUSH
69201: CALL_OW 44
69205: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69206: LD_VAR 0 12
69210: PPUSH
69211: LD_VAR 0 9
69215: PPUSH
69216: LD_INT 0
69218: PPUSH
69219: CALL 70916 0 3
// end ;
69223: GO 69177
69225: POP
69226: POP
// end ;
69227: LD_VAR 0 10
69231: RET
// export function WantHeal ( sci , unit ) ; begin
69232: LD_INT 0
69234: PPUSH
// if GetTaskList ( sci ) > 0 then
69235: LD_VAR 0 1
69239: PPUSH
69240: CALL_OW 437
69244: PUSH
69245: LD_INT 0
69247: GREATER
69248: IFFALSE 69318
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69250: LD_VAR 0 1
69254: PPUSH
69255: CALL_OW 437
69259: PUSH
69260: LD_INT 1
69262: ARRAY
69263: PUSH
69264: LD_INT 1
69266: ARRAY
69267: PUSH
69268: LD_STRING l
69270: EQUAL
69271: PUSH
69272: LD_VAR 0 1
69276: PPUSH
69277: CALL_OW 437
69281: PUSH
69282: LD_INT 1
69284: ARRAY
69285: PUSH
69286: LD_INT 4
69288: ARRAY
69289: PUSH
69290: LD_VAR 0 2
69294: EQUAL
69295: AND
69296: IFFALSE 69308
// result := true else
69298: LD_ADDR_VAR 0 3
69302: PUSH
69303: LD_INT 1
69305: ST_TO_ADDR
69306: GO 69316
// result := false ;
69308: LD_ADDR_VAR 0 3
69312: PUSH
69313: LD_INT 0
69315: ST_TO_ADDR
// end else
69316: GO 69326
// result := false ;
69318: LD_ADDR_VAR 0 3
69322: PUSH
69323: LD_INT 0
69325: ST_TO_ADDR
// end ;
69326: LD_VAR 0 3
69330: RET
// export function HealTarget ( sci ) ; begin
69331: LD_INT 0
69333: PPUSH
// if not sci then
69334: LD_VAR 0 1
69338: NOT
69339: IFFALSE 69343
// exit ;
69341: GO 69408
// result := 0 ;
69343: LD_ADDR_VAR 0 2
69347: PUSH
69348: LD_INT 0
69350: ST_TO_ADDR
// if GetTaskList ( sci ) then
69351: LD_VAR 0 1
69355: PPUSH
69356: CALL_OW 437
69360: IFFALSE 69408
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69362: LD_VAR 0 1
69366: PPUSH
69367: CALL_OW 437
69371: PUSH
69372: LD_INT 1
69374: ARRAY
69375: PUSH
69376: LD_INT 1
69378: ARRAY
69379: PUSH
69380: LD_STRING l
69382: EQUAL
69383: IFFALSE 69408
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69385: LD_ADDR_VAR 0 2
69389: PUSH
69390: LD_VAR 0 1
69394: PPUSH
69395: CALL_OW 437
69399: PUSH
69400: LD_INT 1
69402: ARRAY
69403: PUSH
69404: LD_INT 4
69406: ARRAY
69407: ST_TO_ADDR
// end ;
69408: LD_VAR 0 2
69412: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69413: LD_INT 0
69415: PPUSH
69416: PPUSH
69417: PPUSH
69418: PPUSH
// if not base_units then
69419: LD_VAR 0 1
69423: NOT
69424: IFFALSE 69428
// exit ;
69426: GO 69515
// result := false ;
69428: LD_ADDR_VAR 0 2
69432: PUSH
69433: LD_INT 0
69435: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69436: LD_ADDR_VAR 0 5
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: LD_INT 21
69448: PUSH
69449: LD_INT 3
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PPUSH
69456: CALL_OW 72
69460: ST_TO_ADDR
// if not tmp then
69461: LD_VAR 0 5
69465: NOT
69466: IFFALSE 69470
// exit ;
69468: GO 69515
// for i in tmp do
69470: LD_ADDR_VAR 0 3
69474: PUSH
69475: LD_VAR 0 5
69479: PUSH
69480: FOR_IN
69481: IFFALSE 69513
// begin result := EnemyInRange ( i , 22 ) ;
69483: LD_ADDR_VAR 0 2
69487: PUSH
69488: LD_VAR 0 3
69492: PPUSH
69493: LD_INT 22
69495: PPUSH
69496: CALL 67751 0 2
69500: ST_TO_ADDR
// if result then
69501: LD_VAR 0 2
69505: IFFALSE 69511
// exit ;
69507: POP
69508: POP
69509: GO 69515
// end ;
69511: GO 69480
69513: POP
69514: POP
// end ;
69515: LD_VAR 0 2
69519: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69520: LD_INT 0
69522: PPUSH
69523: PPUSH
// if not units then
69524: LD_VAR 0 1
69528: NOT
69529: IFFALSE 69533
// exit ;
69531: GO 69603
// result := [ ] ;
69533: LD_ADDR_VAR 0 3
69537: PUSH
69538: EMPTY
69539: ST_TO_ADDR
// for i in units do
69540: LD_ADDR_VAR 0 4
69544: PUSH
69545: LD_VAR 0 1
69549: PUSH
69550: FOR_IN
69551: IFFALSE 69601
// if GetTag ( i ) = tag then
69553: LD_VAR 0 4
69557: PPUSH
69558: CALL_OW 110
69562: PUSH
69563: LD_VAR 0 2
69567: EQUAL
69568: IFFALSE 69599
// result := Insert ( result , result + 1 , i ) ;
69570: LD_ADDR_VAR 0 3
69574: PUSH
69575: LD_VAR 0 3
69579: PPUSH
69580: LD_VAR 0 3
69584: PUSH
69585: LD_INT 1
69587: PLUS
69588: PPUSH
69589: LD_VAR 0 4
69593: PPUSH
69594: CALL_OW 2
69598: ST_TO_ADDR
69599: GO 69550
69601: POP
69602: POP
// end ;
69603: LD_VAR 0 3
69607: RET
// export function IsDriver ( un ) ; begin
69608: LD_INT 0
69610: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69611: LD_ADDR_VAR 0 2
69615: PUSH
69616: LD_VAR 0 1
69620: PUSH
69621: LD_INT 55
69623: PUSH
69624: EMPTY
69625: LIST
69626: PPUSH
69627: CALL_OW 69
69631: IN
69632: ST_TO_ADDR
// end ;
69633: LD_VAR 0 2
69637: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69638: LD_INT 0
69640: PPUSH
69641: PPUSH
// list := [ ] ;
69642: LD_ADDR_VAR 0 5
69646: PUSH
69647: EMPTY
69648: ST_TO_ADDR
// case d of 0 :
69649: LD_VAR 0 3
69653: PUSH
69654: LD_INT 0
69656: DOUBLE
69657: EQUAL
69658: IFTRUE 69662
69660: GO 69795
69662: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69663: LD_ADDR_VAR 0 5
69667: PUSH
69668: LD_VAR 0 1
69672: PUSH
69673: LD_INT 4
69675: MINUS
69676: PUSH
69677: LD_VAR 0 2
69681: PUSH
69682: LD_INT 4
69684: MINUS
69685: PUSH
69686: LD_INT 2
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: PUSH
69694: LD_VAR 0 1
69698: PUSH
69699: LD_INT 3
69701: MINUS
69702: PUSH
69703: LD_VAR 0 2
69707: PUSH
69708: LD_INT 1
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: LIST
69715: PUSH
69716: LD_VAR 0 1
69720: PUSH
69721: LD_INT 4
69723: PLUS
69724: PUSH
69725: LD_VAR 0 2
69729: PUSH
69730: LD_INT 4
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: LIST
69737: PUSH
69738: LD_VAR 0 1
69742: PUSH
69743: LD_INT 3
69745: PLUS
69746: PUSH
69747: LD_VAR 0 2
69751: PUSH
69752: LD_INT 3
69754: PLUS
69755: PUSH
69756: LD_INT 5
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: PUSH
69764: LD_VAR 0 1
69768: PUSH
69769: LD_VAR 0 2
69773: PUSH
69774: LD_INT 4
69776: PLUS
69777: PUSH
69778: LD_INT 0
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: LIST
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: ST_TO_ADDR
// end ; 1 :
69793: GO 70493
69795: LD_INT 1
69797: DOUBLE
69798: EQUAL
69799: IFTRUE 69803
69801: GO 69936
69803: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69804: LD_ADDR_VAR 0 5
69808: PUSH
69809: LD_VAR 0 1
69813: PUSH
69814: LD_VAR 0 2
69818: PUSH
69819: LD_INT 4
69821: MINUS
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: LIST
69830: PUSH
69831: LD_VAR 0 1
69835: PUSH
69836: LD_INT 3
69838: MINUS
69839: PUSH
69840: LD_VAR 0 2
69844: PUSH
69845: LD_INT 3
69847: MINUS
69848: PUSH
69849: LD_INT 2
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: LIST
69856: PUSH
69857: LD_VAR 0 1
69861: PUSH
69862: LD_INT 4
69864: MINUS
69865: PUSH
69866: LD_VAR 0 2
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: LIST
69878: PUSH
69879: LD_VAR 0 1
69883: PUSH
69884: LD_VAR 0 2
69888: PUSH
69889: LD_INT 3
69891: PLUS
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: LIST
69900: PUSH
69901: LD_VAR 0 1
69905: PUSH
69906: LD_INT 4
69908: PLUS
69909: PUSH
69910: LD_VAR 0 2
69914: PUSH
69915: LD_INT 4
69917: PLUS
69918: PUSH
69919: LD_INT 5
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: LIST
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: ST_TO_ADDR
// end ; 2 :
69934: GO 70493
69936: LD_INT 2
69938: DOUBLE
69939: EQUAL
69940: IFTRUE 69944
69942: GO 70073
69944: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69945: LD_ADDR_VAR 0 5
69949: PUSH
69950: LD_VAR 0 1
69954: PUSH
69955: LD_VAR 0 2
69959: PUSH
69960: LD_INT 3
69962: MINUS
69963: PUSH
69964: LD_INT 3
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: LIST
69971: PUSH
69972: LD_VAR 0 1
69976: PUSH
69977: LD_INT 4
69979: PLUS
69980: PUSH
69981: LD_VAR 0 2
69985: PUSH
69986: LD_INT 4
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: PUSH
69994: LD_VAR 0 1
69998: PUSH
69999: LD_VAR 0 2
70003: PUSH
70004: LD_INT 4
70006: PLUS
70007: PUSH
70008: LD_INT 0
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: LIST
70015: PUSH
70016: LD_VAR 0 1
70020: PUSH
70021: LD_INT 3
70023: MINUS
70024: PUSH
70025: LD_VAR 0 2
70029: PUSH
70030: LD_INT 1
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: LIST
70037: PUSH
70038: LD_VAR 0 1
70042: PUSH
70043: LD_INT 4
70045: MINUS
70046: PUSH
70047: LD_VAR 0 2
70051: PUSH
70052: LD_INT 4
70054: MINUS
70055: PUSH
70056: LD_INT 2
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: LIST
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: ST_TO_ADDR
// end ; 3 :
70071: GO 70493
70073: LD_INT 3
70075: DOUBLE
70076: EQUAL
70077: IFTRUE 70081
70079: GO 70214
70081: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70082: LD_ADDR_VAR 0 5
70086: PUSH
70087: LD_VAR 0 1
70091: PUSH
70092: LD_INT 3
70094: PLUS
70095: PUSH
70096: LD_VAR 0 2
70100: PUSH
70101: LD_INT 4
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: LIST
70108: PUSH
70109: LD_VAR 0 1
70113: PUSH
70114: LD_INT 4
70116: PLUS
70117: PUSH
70118: LD_VAR 0 2
70122: PUSH
70123: LD_INT 4
70125: PLUS
70126: PUSH
70127: LD_INT 5
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: LIST
70134: PUSH
70135: LD_VAR 0 1
70139: PUSH
70140: LD_INT 4
70142: MINUS
70143: PUSH
70144: LD_VAR 0 2
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: LIST
70156: PUSH
70157: LD_VAR 0 1
70161: PUSH
70162: LD_VAR 0 2
70166: PUSH
70167: LD_INT 4
70169: MINUS
70170: PUSH
70171: LD_INT 3
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: LIST
70178: PUSH
70179: LD_VAR 0 1
70183: PUSH
70184: LD_INT 3
70186: MINUS
70187: PUSH
70188: LD_VAR 0 2
70192: PUSH
70193: LD_INT 3
70195: MINUS
70196: PUSH
70197: LD_INT 2
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: LIST
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: ST_TO_ADDR
// end ; 4 :
70212: GO 70493
70214: LD_INT 4
70216: DOUBLE
70217: EQUAL
70218: IFTRUE 70222
70220: GO 70355
70222: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70223: LD_ADDR_VAR 0 5
70227: PUSH
70228: LD_VAR 0 1
70232: PUSH
70233: LD_VAR 0 2
70237: PUSH
70238: LD_INT 4
70240: PLUS
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: LIST
70249: PUSH
70250: LD_VAR 0 1
70254: PUSH
70255: LD_INT 3
70257: PLUS
70258: PUSH
70259: LD_VAR 0 2
70263: PUSH
70264: LD_INT 3
70266: PLUS
70267: PUSH
70268: LD_INT 5
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: LIST
70275: PUSH
70276: LD_VAR 0 1
70280: PUSH
70281: LD_INT 4
70283: PLUS
70284: PUSH
70285: LD_VAR 0 2
70289: PUSH
70290: LD_INT 4
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: LIST
70297: PUSH
70298: LD_VAR 0 1
70302: PUSH
70303: LD_VAR 0 2
70307: PUSH
70308: LD_INT 3
70310: MINUS
70311: PUSH
70312: LD_INT 3
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: LIST
70319: PUSH
70320: LD_VAR 0 1
70324: PUSH
70325: LD_INT 4
70327: MINUS
70328: PUSH
70329: LD_VAR 0 2
70333: PUSH
70334: LD_INT 4
70336: MINUS
70337: PUSH
70338: LD_INT 2
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: LIST
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: ST_TO_ADDR
// end ; 5 :
70353: GO 70493
70355: LD_INT 5
70357: DOUBLE
70358: EQUAL
70359: IFTRUE 70363
70361: GO 70492
70363: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70364: LD_ADDR_VAR 0 5
70368: PUSH
70369: LD_VAR 0 1
70373: PUSH
70374: LD_INT 4
70376: MINUS
70377: PUSH
70378: LD_VAR 0 2
70382: PUSH
70383: LD_INT 1
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: LIST
70390: PUSH
70391: LD_VAR 0 1
70395: PUSH
70396: LD_VAR 0 2
70400: PUSH
70401: LD_INT 4
70403: MINUS
70404: PUSH
70405: LD_INT 3
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: LIST
70412: PUSH
70413: LD_VAR 0 1
70417: PUSH
70418: LD_INT 4
70420: PLUS
70421: PUSH
70422: LD_VAR 0 2
70426: PUSH
70427: LD_INT 4
70429: PLUS
70430: PUSH
70431: LD_INT 5
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: LIST
70438: PUSH
70439: LD_VAR 0 1
70443: PUSH
70444: LD_INT 3
70446: PLUS
70447: PUSH
70448: LD_VAR 0 2
70452: PUSH
70453: LD_INT 4
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: LIST
70460: PUSH
70461: LD_VAR 0 1
70465: PUSH
70466: LD_VAR 0 2
70470: PUSH
70471: LD_INT 3
70473: PLUS
70474: PUSH
70475: LD_INT 0
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: LIST
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: ST_TO_ADDR
// end ; end ;
70490: GO 70493
70492: POP
// result := list ;
70493: LD_ADDR_VAR 0 4
70497: PUSH
70498: LD_VAR 0 5
70502: ST_TO_ADDR
// end ;
70503: LD_VAR 0 4
70507: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70508: LD_INT 0
70510: PPUSH
70511: PPUSH
70512: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70513: LD_VAR 0 1
70517: NOT
70518: PUSH
70519: LD_VAR 0 2
70523: PUSH
70524: LD_INT 1
70526: PUSH
70527: LD_INT 2
70529: PUSH
70530: LD_INT 3
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: IN
70542: NOT
70543: OR
70544: IFFALSE 70548
// exit ;
70546: GO 70640
// tmp := [ ] ;
70548: LD_ADDR_VAR 0 5
70552: PUSH
70553: EMPTY
70554: ST_TO_ADDR
// for i in units do
70555: LD_ADDR_VAR 0 4
70559: PUSH
70560: LD_VAR 0 1
70564: PUSH
70565: FOR_IN
70566: IFFALSE 70609
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70568: LD_ADDR_VAR 0 5
70572: PUSH
70573: LD_VAR 0 5
70577: PPUSH
70578: LD_VAR 0 5
70582: PUSH
70583: LD_INT 1
70585: PLUS
70586: PPUSH
70587: LD_VAR 0 4
70591: PPUSH
70592: LD_VAR 0 2
70596: PPUSH
70597: CALL_OW 259
70601: PPUSH
70602: CALL_OW 2
70606: ST_TO_ADDR
70607: GO 70565
70609: POP
70610: POP
// if not tmp then
70611: LD_VAR 0 5
70615: NOT
70616: IFFALSE 70620
// exit ;
70618: GO 70640
// result := SortListByListDesc ( units , tmp ) ;
70620: LD_ADDR_VAR 0 3
70624: PUSH
70625: LD_VAR 0 1
70629: PPUSH
70630: LD_VAR 0 5
70634: PPUSH
70635: CALL_OW 77
70639: ST_TO_ADDR
// end ;
70640: LD_VAR 0 3
70644: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70645: LD_INT 0
70647: PPUSH
70648: PPUSH
70649: PPUSH
// result := false ;
70650: LD_ADDR_VAR 0 3
70654: PUSH
70655: LD_INT 0
70657: ST_TO_ADDR
// x := GetX ( building ) ;
70658: LD_ADDR_VAR 0 4
70662: PUSH
70663: LD_VAR 0 2
70667: PPUSH
70668: CALL_OW 250
70672: ST_TO_ADDR
// y := GetY ( building ) ;
70673: LD_ADDR_VAR 0 5
70677: PUSH
70678: LD_VAR 0 2
70682: PPUSH
70683: CALL_OW 251
70687: ST_TO_ADDR
// if not building or not x or not y then
70688: LD_VAR 0 2
70692: NOT
70693: PUSH
70694: LD_VAR 0 4
70698: NOT
70699: OR
70700: PUSH
70701: LD_VAR 0 5
70705: NOT
70706: OR
70707: IFFALSE 70711
// exit ;
70709: GO 70803
// if GetTaskList ( unit ) then
70711: LD_VAR 0 1
70715: PPUSH
70716: CALL_OW 437
70720: IFFALSE 70803
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70722: LD_STRING e
70724: PUSH
70725: LD_VAR 0 1
70729: PPUSH
70730: CALL_OW 437
70734: PUSH
70735: LD_INT 1
70737: ARRAY
70738: PUSH
70739: LD_INT 1
70741: ARRAY
70742: EQUAL
70743: PUSH
70744: LD_VAR 0 4
70748: PUSH
70749: LD_VAR 0 1
70753: PPUSH
70754: CALL_OW 437
70758: PUSH
70759: LD_INT 1
70761: ARRAY
70762: PUSH
70763: LD_INT 2
70765: ARRAY
70766: EQUAL
70767: AND
70768: PUSH
70769: LD_VAR 0 5
70773: PUSH
70774: LD_VAR 0 1
70778: PPUSH
70779: CALL_OW 437
70783: PUSH
70784: LD_INT 1
70786: ARRAY
70787: PUSH
70788: LD_INT 3
70790: ARRAY
70791: EQUAL
70792: AND
70793: IFFALSE 70803
// result := true end ;
70795: LD_ADDR_VAR 0 3
70799: PUSH
70800: LD_INT 1
70802: ST_TO_ADDR
// end ;
70803: LD_VAR 0 3
70807: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70808: LD_INT 0
70810: PPUSH
// result := false ;
70811: LD_ADDR_VAR 0 4
70815: PUSH
70816: LD_INT 0
70818: ST_TO_ADDR
// if GetTaskList ( unit ) then
70819: LD_VAR 0 1
70823: PPUSH
70824: CALL_OW 437
70828: IFFALSE 70911
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70830: LD_STRING M
70832: PUSH
70833: LD_VAR 0 1
70837: PPUSH
70838: CALL_OW 437
70842: PUSH
70843: LD_INT 1
70845: ARRAY
70846: PUSH
70847: LD_INT 1
70849: ARRAY
70850: EQUAL
70851: PUSH
70852: LD_VAR 0 2
70856: PUSH
70857: LD_VAR 0 1
70861: PPUSH
70862: CALL_OW 437
70866: PUSH
70867: LD_INT 1
70869: ARRAY
70870: PUSH
70871: LD_INT 2
70873: ARRAY
70874: EQUAL
70875: AND
70876: PUSH
70877: LD_VAR 0 3
70881: PUSH
70882: LD_VAR 0 1
70886: PPUSH
70887: CALL_OW 437
70891: PUSH
70892: LD_INT 1
70894: ARRAY
70895: PUSH
70896: LD_INT 3
70898: ARRAY
70899: EQUAL
70900: AND
70901: IFFALSE 70911
// result := true ;
70903: LD_ADDR_VAR 0 4
70907: PUSH
70908: LD_INT 1
70910: ST_TO_ADDR
// end ; end ;
70911: LD_VAR 0 4
70915: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70916: LD_INT 0
70918: PPUSH
70919: PPUSH
70920: PPUSH
70921: PPUSH
// if not unit or not area then
70922: LD_VAR 0 1
70926: NOT
70927: PUSH
70928: LD_VAR 0 2
70932: NOT
70933: OR
70934: IFFALSE 70938
// exit ;
70936: GO 71102
// tmp := AreaToList ( area , i ) ;
70938: LD_ADDR_VAR 0 6
70942: PUSH
70943: LD_VAR 0 2
70947: PPUSH
70948: LD_VAR 0 5
70952: PPUSH
70953: CALL_OW 517
70957: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70958: LD_ADDR_VAR 0 5
70962: PUSH
70963: DOUBLE
70964: LD_INT 1
70966: DEC
70967: ST_TO_ADDR
70968: LD_VAR 0 6
70972: PUSH
70973: LD_INT 1
70975: ARRAY
70976: PUSH
70977: FOR_TO
70978: IFFALSE 71100
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70980: LD_ADDR_VAR 0 7
70984: PUSH
70985: LD_VAR 0 6
70989: PUSH
70990: LD_INT 1
70992: ARRAY
70993: PUSH
70994: LD_VAR 0 5
70998: ARRAY
70999: PUSH
71000: LD_VAR 0 6
71004: PUSH
71005: LD_INT 2
71007: ARRAY
71008: PUSH
71009: LD_VAR 0 5
71013: ARRAY
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71019: LD_VAR 0 7
71023: PUSH
71024: LD_INT 1
71026: ARRAY
71027: PPUSH
71028: LD_VAR 0 7
71032: PUSH
71033: LD_INT 2
71035: ARRAY
71036: PPUSH
71037: CALL_OW 428
71041: PUSH
71042: LD_INT 0
71044: EQUAL
71045: IFFALSE 71098
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71047: LD_VAR 0 1
71051: PPUSH
71052: LD_VAR 0 7
71056: PUSH
71057: LD_INT 1
71059: ARRAY
71060: PPUSH
71061: LD_VAR 0 7
71065: PUSH
71066: LD_INT 2
71068: ARRAY
71069: PPUSH
71070: LD_VAR 0 3
71074: PPUSH
71075: CALL_OW 48
// result := IsPlaced ( unit ) ;
71079: LD_ADDR_VAR 0 4
71083: PUSH
71084: LD_VAR 0 1
71088: PPUSH
71089: CALL_OW 305
71093: ST_TO_ADDR
// exit ;
71094: POP
71095: POP
71096: GO 71102
// end ; end ;
71098: GO 70977
71100: POP
71101: POP
// end ;
71102: LD_VAR 0 4
71106: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71107: LD_INT 0
71109: PPUSH
71110: PPUSH
71111: PPUSH
// if not side or side > 8 then
71112: LD_VAR 0 1
71116: NOT
71117: PUSH
71118: LD_VAR 0 1
71122: PUSH
71123: LD_INT 8
71125: GREATER
71126: OR
71127: IFFALSE 71131
// exit ;
71129: GO 71318
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71131: LD_ADDR_VAR 0 4
71135: PUSH
71136: LD_INT 22
71138: PUSH
71139: LD_VAR 0 1
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 21
71150: PUSH
71151: LD_INT 3
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PPUSH
71162: CALL_OW 69
71166: ST_TO_ADDR
// if not tmp then
71167: LD_VAR 0 4
71171: NOT
71172: IFFALSE 71176
// exit ;
71174: GO 71318
// enable_addtolog := true ;
71176: LD_ADDR_OWVAR 81
71180: PUSH
71181: LD_INT 1
71183: ST_TO_ADDR
// AddToLog ( [ ) ;
71184: LD_STRING [
71186: PPUSH
71187: CALL_OW 561
// for i in tmp do
71191: LD_ADDR_VAR 0 3
71195: PUSH
71196: LD_VAR 0 4
71200: PUSH
71201: FOR_IN
71202: IFFALSE 71309
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71204: LD_STRING [
71206: PUSH
71207: LD_VAR 0 3
71211: PPUSH
71212: CALL_OW 266
71216: STR
71217: PUSH
71218: LD_STRING , 
71220: STR
71221: PUSH
71222: LD_VAR 0 3
71226: PPUSH
71227: CALL_OW 250
71231: STR
71232: PUSH
71233: LD_STRING , 
71235: STR
71236: PUSH
71237: LD_VAR 0 3
71241: PPUSH
71242: CALL_OW 251
71246: STR
71247: PUSH
71248: LD_STRING , 
71250: STR
71251: PUSH
71252: LD_VAR 0 3
71256: PPUSH
71257: CALL_OW 254
71261: STR
71262: PUSH
71263: LD_STRING , 
71265: STR
71266: PUSH
71267: LD_VAR 0 3
71271: PPUSH
71272: LD_INT 1
71274: PPUSH
71275: CALL_OW 268
71279: STR
71280: PUSH
71281: LD_STRING , 
71283: STR
71284: PUSH
71285: LD_VAR 0 3
71289: PPUSH
71290: LD_INT 2
71292: PPUSH
71293: CALL_OW 268
71297: STR
71298: PUSH
71299: LD_STRING ],
71301: STR
71302: PPUSH
71303: CALL_OW 561
// end ;
71307: GO 71201
71309: POP
71310: POP
// AddToLog ( ]; ) ;
71311: LD_STRING ];
71313: PPUSH
71314: CALL_OW 561
// end ;
71318: LD_VAR 0 2
71322: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71323: LD_INT 0
71325: PPUSH
71326: PPUSH
71327: PPUSH
71328: PPUSH
71329: PPUSH
// if not area or not rate or not max then
71330: LD_VAR 0 1
71334: NOT
71335: PUSH
71336: LD_VAR 0 2
71340: NOT
71341: OR
71342: PUSH
71343: LD_VAR 0 4
71347: NOT
71348: OR
71349: IFFALSE 71353
// exit ;
71351: GO 71545
// while 1 do
71353: LD_INT 1
71355: IFFALSE 71545
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71357: LD_ADDR_VAR 0 9
71361: PUSH
71362: LD_VAR 0 1
71366: PPUSH
71367: LD_INT 1
71369: PPUSH
71370: CALL_OW 287
71374: PUSH
71375: LD_INT 10
71377: MUL
71378: ST_TO_ADDR
// r := rate / 10 ;
71379: LD_ADDR_VAR 0 7
71383: PUSH
71384: LD_VAR 0 2
71388: PUSH
71389: LD_INT 10
71391: DIVREAL
71392: ST_TO_ADDR
// time := 1 1$00 ;
71393: LD_ADDR_VAR 0 8
71397: PUSH
71398: LD_INT 2100
71400: ST_TO_ADDR
// if amount < min then
71401: LD_VAR 0 9
71405: PUSH
71406: LD_VAR 0 3
71410: LESS
71411: IFFALSE 71429
// r := r * 2 else
71413: LD_ADDR_VAR 0 7
71417: PUSH
71418: LD_VAR 0 7
71422: PUSH
71423: LD_INT 2
71425: MUL
71426: ST_TO_ADDR
71427: GO 71455
// if amount > max then
71429: LD_VAR 0 9
71433: PUSH
71434: LD_VAR 0 4
71438: GREATER
71439: IFFALSE 71455
// r := r / 2 ;
71441: LD_ADDR_VAR 0 7
71445: PUSH
71446: LD_VAR 0 7
71450: PUSH
71451: LD_INT 2
71453: DIVREAL
71454: ST_TO_ADDR
// time := time / r ;
71455: LD_ADDR_VAR 0 8
71459: PUSH
71460: LD_VAR 0 8
71464: PUSH
71465: LD_VAR 0 7
71469: DIVREAL
71470: ST_TO_ADDR
// if time < 0 then
71471: LD_VAR 0 8
71475: PUSH
71476: LD_INT 0
71478: LESS
71479: IFFALSE 71496
// time := time * - 1 ;
71481: LD_ADDR_VAR 0 8
71485: PUSH
71486: LD_VAR 0 8
71490: PUSH
71491: LD_INT 1
71493: NEG
71494: MUL
71495: ST_TO_ADDR
// wait ( time ) ;
71496: LD_VAR 0 8
71500: PPUSH
71501: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71505: LD_INT 35
71507: PPUSH
71508: LD_INT 875
71510: PPUSH
71511: CALL_OW 12
71515: PPUSH
71516: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71520: LD_INT 1
71522: PPUSH
71523: LD_INT 5
71525: PPUSH
71526: CALL_OW 12
71530: PPUSH
71531: LD_VAR 0 1
71535: PPUSH
71536: LD_INT 1
71538: PPUSH
71539: CALL_OW 55
// end ;
71543: GO 71353
// end ;
71545: LD_VAR 0 5
71549: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71550: LD_INT 0
71552: PPUSH
71553: PPUSH
71554: PPUSH
71555: PPUSH
71556: PPUSH
71557: PPUSH
71558: PPUSH
71559: PPUSH
// if not turrets or not factories then
71560: LD_VAR 0 1
71564: NOT
71565: PUSH
71566: LD_VAR 0 2
71570: NOT
71571: OR
71572: IFFALSE 71576
// exit ;
71574: GO 71883
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71576: LD_ADDR_VAR 0 10
71580: PUSH
71581: LD_INT 5
71583: PUSH
71584: LD_INT 6
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 2
71593: PUSH
71594: LD_INT 4
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 3
71603: PUSH
71604: LD_INT 5
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 24
71618: PUSH
71619: LD_INT 25
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 23
71628: PUSH
71629: LD_INT 27
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 42
71642: PUSH
71643: LD_INT 43
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 44
71652: PUSH
71653: LD_INT 46
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 45
71662: PUSH
71663: LD_INT 47
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: LIST
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: LIST
71679: ST_TO_ADDR
// result := [ ] ;
71680: LD_ADDR_VAR 0 3
71684: PUSH
71685: EMPTY
71686: ST_TO_ADDR
// for i in turrets do
71687: LD_ADDR_VAR 0 4
71691: PUSH
71692: LD_VAR 0 1
71696: PUSH
71697: FOR_IN
71698: IFFALSE 71881
// begin nat := GetNation ( i ) ;
71700: LD_ADDR_VAR 0 7
71704: PUSH
71705: LD_VAR 0 4
71709: PPUSH
71710: CALL_OW 248
71714: ST_TO_ADDR
// weapon := 0 ;
71715: LD_ADDR_VAR 0 8
71719: PUSH
71720: LD_INT 0
71722: ST_TO_ADDR
// if not nat then
71723: LD_VAR 0 7
71727: NOT
71728: IFFALSE 71732
// continue ;
71730: GO 71697
// for j in list [ nat ] do
71732: LD_ADDR_VAR 0 5
71736: PUSH
71737: LD_VAR 0 10
71741: PUSH
71742: LD_VAR 0 7
71746: ARRAY
71747: PUSH
71748: FOR_IN
71749: IFFALSE 71790
// if GetBWeapon ( i ) = j [ 1 ] then
71751: LD_VAR 0 4
71755: PPUSH
71756: CALL_OW 269
71760: PUSH
71761: LD_VAR 0 5
71765: PUSH
71766: LD_INT 1
71768: ARRAY
71769: EQUAL
71770: IFFALSE 71788
// begin weapon := j [ 2 ] ;
71772: LD_ADDR_VAR 0 8
71776: PUSH
71777: LD_VAR 0 5
71781: PUSH
71782: LD_INT 2
71784: ARRAY
71785: ST_TO_ADDR
// break ;
71786: GO 71790
// end ;
71788: GO 71748
71790: POP
71791: POP
// if not weapon then
71792: LD_VAR 0 8
71796: NOT
71797: IFFALSE 71801
// continue ;
71799: GO 71697
// for k in factories do
71801: LD_ADDR_VAR 0 6
71805: PUSH
71806: LD_VAR 0 2
71810: PUSH
71811: FOR_IN
71812: IFFALSE 71877
// begin weapons := AvailableWeaponList ( k ) ;
71814: LD_ADDR_VAR 0 9
71818: PUSH
71819: LD_VAR 0 6
71823: PPUSH
71824: CALL_OW 478
71828: ST_TO_ADDR
// if not weapons then
71829: LD_VAR 0 9
71833: NOT
71834: IFFALSE 71838
// continue ;
71836: GO 71811
// if weapon in weapons then
71838: LD_VAR 0 8
71842: PUSH
71843: LD_VAR 0 9
71847: IN
71848: IFFALSE 71875
// begin result := [ i , weapon ] ;
71850: LD_ADDR_VAR 0 3
71854: PUSH
71855: LD_VAR 0 4
71859: PUSH
71860: LD_VAR 0 8
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: ST_TO_ADDR
// exit ;
71869: POP
71870: POP
71871: POP
71872: POP
71873: GO 71883
// end ; end ;
71875: GO 71811
71877: POP
71878: POP
// end ;
71879: GO 71697
71881: POP
71882: POP
// end ;
71883: LD_VAR 0 3
71887: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71888: LD_INT 0
71890: PPUSH
// if not side or side > 8 then
71891: LD_VAR 0 3
71895: NOT
71896: PUSH
71897: LD_VAR 0 3
71901: PUSH
71902: LD_INT 8
71904: GREATER
71905: OR
71906: IFFALSE 71910
// exit ;
71908: GO 71969
// if not range then
71910: LD_VAR 0 4
71914: NOT
71915: IFFALSE 71926
// range := - 12 ;
71917: LD_ADDR_VAR 0 4
71921: PUSH
71922: LD_INT 12
71924: NEG
71925: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71926: LD_VAR 0 1
71930: PPUSH
71931: LD_VAR 0 2
71935: PPUSH
71936: LD_VAR 0 3
71940: PPUSH
71941: LD_VAR 0 4
71945: PPUSH
71946: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71950: LD_VAR 0 1
71954: PPUSH
71955: LD_VAR 0 2
71959: PPUSH
71960: LD_VAR 0 3
71964: PPUSH
71965: CALL_OW 331
// end ;
71969: LD_VAR 0 5
71973: RET
// export function Video ( mode ) ; begin
71974: LD_INT 0
71976: PPUSH
// ingame_video = mode ;
71977: LD_ADDR_OWVAR 52
71981: PUSH
71982: LD_VAR 0 1
71986: ST_TO_ADDR
// interface_hidden = mode ;
71987: LD_ADDR_OWVAR 54
71991: PUSH
71992: LD_VAR 0 1
71996: ST_TO_ADDR
// end ;
71997: LD_VAR 0 2
72001: RET
// export function Join ( array , element ) ; begin
72002: LD_INT 0
72004: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72005: LD_ADDR_VAR 0 3
72009: PUSH
72010: LD_VAR 0 1
72014: PPUSH
72015: LD_VAR 0 1
72019: PUSH
72020: LD_INT 1
72022: PLUS
72023: PPUSH
72024: LD_VAR 0 2
72028: PPUSH
72029: CALL_OW 1
72033: ST_TO_ADDR
// end ;
72034: LD_VAR 0 3
72038: RET
// export function JoinUnion ( array , element ) ; begin
72039: LD_INT 0
72041: PPUSH
// result := array union element ;
72042: LD_ADDR_VAR 0 3
72046: PUSH
72047: LD_VAR 0 1
72051: PUSH
72052: LD_VAR 0 2
72056: UNION
72057: ST_TO_ADDR
// end ;
72058: LD_VAR 0 3
72062: RET
// export function GetBehemoths ( side ) ; begin
72063: LD_INT 0
72065: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72066: LD_ADDR_VAR 0 2
72070: PUSH
72071: LD_INT 22
72073: PUSH
72074: LD_VAR 0 1
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 31
72085: PUSH
72086: LD_INT 25
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PPUSH
72097: CALL_OW 69
72101: ST_TO_ADDR
// end ;
72102: LD_VAR 0 2
72106: RET
// export function Shuffle ( array ) ; var i , index ; begin
72107: LD_INT 0
72109: PPUSH
72110: PPUSH
72111: PPUSH
// result := [ ] ;
72112: LD_ADDR_VAR 0 2
72116: PUSH
72117: EMPTY
72118: ST_TO_ADDR
// if not array then
72119: LD_VAR 0 1
72123: NOT
72124: IFFALSE 72128
// exit ;
72126: GO 72227
// Randomize ;
72128: CALL_OW 10
// for i = array downto 1 do
72132: LD_ADDR_VAR 0 3
72136: PUSH
72137: DOUBLE
72138: LD_VAR 0 1
72142: INC
72143: ST_TO_ADDR
72144: LD_INT 1
72146: PUSH
72147: FOR_DOWNTO
72148: IFFALSE 72225
// begin index := rand ( 1 , array ) ;
72150: LD_ADDR_VAR 0 4
72154: PUSH
72155: LD_INT 1
72157: PPUSH
72158: LD_VAR 0 1
72162: PPUSH
72163: CALL_OW 12
72167: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72168: LD_ADDR_VAR 0 2
72172: PUSH
72173: LD_VAR 0 2
72177: PPUSH
72178: LD_VAR 0 2
72182: PUSH
72183: LD_INT 1
72185: PLUS
72186: PPUSH
72187: LD_VAR 0 1
72191: PUSH
72192: LD_VAR 0 4
72196: ARRAY
72197: PPUSH
72198: CALL_OW 2
72202: ST_TO_ADDR
// array := Delete ( array , index ) ;
72203: LD_ADDR_VAR 0 1
72207: PUSH
72208: LD_VAR 0 1
72212: PPUSH
72213: LD_VAR 0 4
72217: PPUSH
72218: CALL_OW 3
72222: ST_TO_ADDR
// end ;
72223: GO 72147
72225: POP
72226: POP
// end ;
72227: LD_VAR 0 2
72231: RET
// export function GetBaseMaterials ( base ) ; begin
72232: LD_INT 0
72234: PPUSH
// result := [ 0 , 0 , 0 ] ;
72235: LD_ADDR_VAR 0 2
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 0
72245: PUSH
72246: LD_INT 0
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: LIST
72253: ST_TO_ADDR
// if not base then
72254: LD_VAR 0 1
72258: NOT
72259: IFFALSE 72263
// exit ;
72261: GO 72312
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72263: LD_ADDR_VAR 0 2
72267: PUSH
72268: LD_VAR 0 1
72272: PPUSH
72273: LD_INT 1
72275: PPUSH
72276: CALL_OW 275
72280: PUSH
72281: LD_VAR 0 1
72285: PPUSH
72286: LD_INT 2
72288: PPUSH
72289: CALL_OW 275
72293: PUSH
72294: LD_VAR 0 1
72298: PPUSH
72299: LD_INT 3
72301: PPUSH
72302: CALL_OW 275
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: LIST
72311: ST_TO_ADDR
// end ;
72312: LD_VAR 0 2
72316: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72317: LD_INT 0
72319: PPUSH
72320: PPUSH
// result := array ;
72321: LD_ADDR_VAR 0 3
72325: PUSH
72326: LD_VAR 0 1
72330: ST_TO_ADDR
// if size > 0 then
72331: LD_VAR 0 2
72335: PUSH
72336: LD_INT 0
72338: GREATER
72339: IFFALSE 72385
// for i := array downto size do
72341: LD_ADDR_VAR 0 4
72345: PUSH
72346: DOUBLE
72347: LD_VAR 0 1
72351: INC
72352: ST_TO_ADDR
72353: LD_VAR 0 2
72357: PUSH
72358: FOR_DOWNTO
72359: IFFALSE 72383
// result := Delete ( result , result ) ;
72361: LD_ADDR_VAR 0 3
72365: PUSH
72366: LD_VAR 0 3
72370: PPUSH
72371: LD_VAR 0 3
72375: PPUSH
72376: CALL_OW 3
72380: ST_TO_ADDR
72381: GO 72358
72383: POP
72384: POP
// end ;
72385: LD_VAR 0 3
72389: RET
// export function ComExit ( unit ) ; var tmp ; begin
72390: LD_INT 0
72392: PPUSH
72393: PPUSH
// if not IsInUnit ( unit ) then
72394: LD_VAR 0 1
72398: PPUSH
72399: CALL_OW 310
72403: NOT
72404: IFFALSE 72408
// exit ;
72406: GO 72468
// tmp := IsInUnit ( unit ) ;
72408: LD_ADDR_VAR 0 3
72412: PUSH
72413: LD_VAR 0 1
72417: PPUSH
72418: CALL_OW 310
72422: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72423: LD_VAR 0 3
72427: PPUSH
72428: CALL_OW 247
72432: PUSH
72433: LD_INT 2
72435: EQUAL
72436: IFFALSE 72449
// ComExitVehicle ( unit ) else
72438: LD_VAR 0 1
72442: PPUSH
72443: CALL_OW 121
72447: GO 72458
// ComExitBuilding ( unit ) ;
72449: LD_VAR 0 1
72453: PPUSH
72454: CALL_OW 122
// result := tmp ;
72458: LD_ADDR_VAR 0 2
72462: PUSH
72463: LD_VAR 0 3
72467: ST_TO_ADDR
// end ;
72468: LD_VAR 0 2
72472: RET
// export function ResetHc ; begin
72473: LD_INT 0
72475: PPUSH
// InitHc ;
72476: CALL_OW 19
// hc_importance := 0 ;
72480: LD_ADDR_OWVAR 32
72484: PUSH
72485: LD_INT 0
72487: ST_TO_ADDR
// end ;
72488: LD_VAR 0 1
72492: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72493: LD_INT 0
72495: PPUSH
72496: PPUSH
72497: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72498: LD_ADDR_VAR 0 6
72502: PUSH
72503: LD_VAR 0 1
72507: PUSH
72508: LD_VAR 0 3
72512: PLUS
72513: PUSH
72514: LD_INT 2
72516: DIV
72517: ST_TO_ADDR
// if _x < 0 then
72518: LD_VAR 0 6
72522: PUSH
72523: LD_INT 0
72525: LESS
72526: IFFALSE 72543
// _x := _x * - 1 ;
72528: LD_ADDR_VAR 0 6
72532: PUSH
72533: LD_VAR 0 6
72537: PUSH
72538: LD_INT 1
72540: NEG
72541: MUL
72542: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72543: LD_ADDR_VAR 0 7
72547: PUSH
72548: LD_VAR 0 2
72552: PUSH
72553: LD_VAR 0 4
72557: PLUS
72558: PUSH
72559: LD_INT 2
72561: DIV
72562: ST_TO_ADDR
// if _y < 0 then
72563: LD_VAR 0 7
72567: PUSH
72568: LD_INT 0
72570: LESS
72571: IFFALSE 72588
// _y := _y * - 1 ;
72573: LD_ADDR_VAR 0 7
72577: PUSH
72578: LD_VAR 0 7
72582: PUSH
72583: LD_INT 1
72585: NEG
72586: MUL
72587: ST_TO_ADDR
// result := [ _x , _y ] ;
72588: LD_ADDR_VAR 0 5
72592: PUSH
72593: LD_VAR 0 6
72597: PUSH
72598: LD_VAR 0 7
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: ST_TO_ADDR
// end ;
72607: LD_VAR 0 5
72611: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72612: LD_INT 0
72614: PPUSH
72615: PPUSH
72616: PPUSH
72617: PPUSH
// task := GetTaskList ( unit ) ;
72618: LD_ADDR_VAR 0 7
72622: PUSH
72623: LD_VAR 0 1
72627: PPUSH
72628: CALL_OW 437
72632: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72633: LD_VAR 0 7
72637: NOT
72638: PUSH
72639: LD_VAR 0 1
72643: PPUSH
72644: LD_VAR 0 2
72648: PPUSH
72649: CALL_OW 308
72653: NOT
72654: AND
72655: IFFALSE 72659
// exit ;
72657: GO 72777
// if IsInArea ( unit , area ) then
72659: LD_VAR 0 1
72663: PPUSH
72664: LD_VAR 0 2
72668: PPUSH
72669: CALL_OW 308
72673: IFFALSE 72691
// begin ComMoveToArea ( unit , goAway ) ;
72675: LD_VAR 0 1
72679: PPUSH
72680: LD_VAR 0 3
72684: PPUSH
72685: CALL_OW 113
// exit ;
72689: GO 72777
// end ; if task [ 1 ] [ 1 ] <> M then
72691: LD_VAR 0 7
72695: PUSH
72696: LD_INT 1
72698: ARRAY
72699: PUSH
72700: LD_INT 1
72702: ARRAY
72703: PUSH
72704: LD_STRING M
72706: NONEQUAL
72707: IFFALSE 72711
// exit ;
72709: GO 72777
// x := task [ 1 ] [ 2 ] ;
72711: LD_ADDR_VAR 0 5
72715: PUSH
72716: LD_VAR 0 7
72720: PUSH
72721: LD_INT 1
72723: ARRAY
72724: PUSH
72725: LD_INT 2
72727: ARRAY
72728: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72729: LD_ADDR_VAR 0 6
72733: PUSH
72734: LD_VAR 0 7
72738: PUSH
72739: LD_INT 1
72741: ARRAY
72742: PUSH
72743: LD_INT 3
72745: ARRAY
72746: ST_TO_ADDR
// if InArea ( x , y , area ) then
72747: LD_VAR 0 5
72751: PPUSH
72752: LD_VAR 0 6
72756: PPUSH
72757: LD_VAR 0 2
72761: PPUSH
72762: CALL_OW 309
72766: IFFALSE 72777
// ComStop ( unit ) ;
72768: LD_VAR 0 1
72772: PPUSH
72773: CALL_OW 141
// end ;
72777: LD_VAR 0 4
72781: RET
// export function Abs ( value ) ; begin
72782: LD_INT 0
72784: PPUSH
// result := value ;
72785: LD_ADDR_VAR 0 2
72789: PUSH
72790: LD_VAR 0 1
72794: ST_TO_ADDR
// if value < 0 then
72795: LD_VAR 0 1
72799: PUSH
72800: LD_INT 0
72802: LESS
72803: IFFALSE 72820
// result := value * - 1 ;
72805: LD_ADDR_VAR 0 2
72809: PUSH
72810: LD_VAR 0 1
72814: PUSH
72815: LD_INT 1
72817: NEG
72818: MUL
72819: ST_TO_ADDR
// end ;
72820: LD_VAR 0 2
72824: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72825: LD_INT 0
72827: PPUSH
72828: PPUSH
72829: PPUSH
72830: PPUSH
72831: PPUSH
72832: PPUSH
72833: PPUSH
72834: PPUSH
// if not unit or not building then
72835: LD_VAR 0 1
72839: NOT
72840: PUSH
72841: LD_VAR 0 2
72845: NOT
72846: OR
72847: IFFALSE 72851
// exit ;
72849: GO 73077
// x := GetX ( building ) ;
72851: LD_ADDR_VAR 0 4
72855: PUSH
72856: LD_VAR 0 2
72860: PPUSH
72861: CALL_OW 250
72865: ST_TO_ADDR
// y := GetY ( building ) ;
72866: LD_ADDR_VAR 0 6
72870: PUSH
72871: LD_VAR 0 2
72875: PPUSH
72876: CALL_OW 251
72880: ST_TO_ADDR
// d := GetDir ( building ) ;
72881: LD_ADDR_VAR 0 8
72885: PUSH
72886: LD_VAR 0 2
72890: PPUSH
72891: CALL_OW 254
72895: ST_TO_ADDR
// r := 4 ;
72896: LD_ADDR_VAR 0 9
72900: PUSH
72901: LD_INT 4
72903: ST_TO_ADDR
// for i := 1 to 5 do
72904: LD_ADDR_VAR 0 10
72908: PUSH
72909: DOUBLE
72910: LD_INT 1
72912: DEC
72913: ST_TO_ADDR
72914: LD_INT 5
72916: PUSH
72917: FOR_TO
72918: IFFALSE 73075
// begin _x := ShiftX ( x , d , r + i ) ;
72920: LD_ADDR_VAR 0 5
72924: PUSH
72925: LD_VAR 0 4
72929: PPUSH
72930: LD_VAR 0 8
72934: PPUSH
72935: LD_VAR 0 9
72939: PUSH
72940: LD_VAR 0 10
72944: PLUS
72945: PPUSH
72946: CALL_OW 272
72950: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72951: LD_ADDR_VAR 0 7
72955: PUSH
72956: LD_VAR 0 6
72960: PPUSH
72961: LD_VAR 0 8
72965: PPUSH
72966: LD_VAR 0 9
72970: PUSH
72971: LD_VAR 0 10
72975: PLUS
72976: PPUSH
72977: CALL_OW 273
72981: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72982: LD_VAR 0 5
72986: PPUSH
72987: LD_VAR 0 7
72991: PPUSH
72992: CALL_OW 488
72996: PUSH
72997: LD_VAR 0 5
73001: PPUSH
73002: LD_VAR 0 7
73006: PPUSH
73007: CALL_OW 428
73011: PPUSH
73012: CALL_OW 247
73016: PUSH
73017: LD_INT 3
73019: PUSH
73020: LD_INT 2
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: IN
73027: NOT
73028: AND
73029: IFFALSE 73073
// begin ComMoveXY ( unit , _x , _y ) ;
73031: LD_VAR 0 1
73035: PPUSH
73036: LD_VAR 0 5
73040: PPUSH
73041: LD_VAR 0 7
73045: PPUSH
73046: CALL_OW 111
// result := [ _x , _y ] ;
73050: LD_ADDR_VAR 0 3
73054: PUSH
73055: LD_VAR 0 5
73059: PUSH
73060: LD_VAR 0 7
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: ST_TO_ADDR
// exit ;
73069: POP
73070: POP
73071: GO 73077
// end ; end ;
73073: GO 72917
73075: POP
73076: POP
// end ;
73077: LD_VAR 0 3
73081: RET
