// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1495 0 0
// Nef_PrepareNature ;
 250: CALL 4397 0 0
// MissionIntro ;
 254: CALL 10406 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: LD_OWVAR 67
 407: ARRAY
 408: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 409: LD_ADDR_EXP 33
 413: PUSH
 414: LD_INT 2
 416: NEG
 417: PUSH
 418: LD_INT 1
 420: NEG
 421: PUSH
 422: LD_INT 0
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 436: LD_ADDR_EXP 34
 440: PUSH
 441: LD_INT 135
 443: PUSH
 444: LD_INT 8
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 135
 453: PUSH
 454: LD_INT 4
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 134
 463: PUSH
 464: LD_INT 19
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 132
 473: PUSH
 474: LD_INT 26
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PUSH
 481: LD_INT 128
 483: PUSH
 484: LD_INT 31
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PUSH
 491: LD_INT 123
 493: PUSH
 494: LD_INT 37
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 118
 503: PUSH
 504: LD_INT 45
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: LD_INT 112
 513: PUSH
 514: LD_INT 51
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 106
 523: PUSH
 524: LD_INT 57
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 99
 533: PUSH
 534: LD_INT 62
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 93
 543: PUSH
 544: LD_INT 67
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: PUSH
 551: LD_INT 86
 553: PUSH
 554: LD_INT 72
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 78
 563: PUSH
 564: LD_INT 75
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 71
 573: PUSH
 574: LD_INT 81
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 69
 583: PUSH
 584: LD_INT 88
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 71
 593: PUSH
 594: LD_INT 95
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: LD_INT 74
 603: PUSH
 604: LD_INT 103
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 80
 613: PUSH
 614: LD_INT 113
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 84
 623: PUSH
 624: LD_INT 121
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 89
 633: PUSH
 634: LD_INT 132
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 92
 643: PUSH
 644: LD_INT 142
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 93
 653: PUSH
 654: LD_INT 151
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: LD_INT 91
 663: PUSH
 664: LD_INT 157
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 90
 673: PUSH
 674: LD_INT 163
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 93
 683: PUSH
 684: LD_INT 171
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 92
 693: PUSH
 694: LD_INT 177
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 729: LD_ADDR_EXP 35
 733: PUSH
 734: LD_INT 135
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 135
 746: PUSH
 747: LD_INT 4
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: LD_INT 134
 756: PUSH
 757: LD_INT 19
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 132
 766: PUSH
 767: LD_INT 26
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 128
 776: PUSH
 777: LD_INT 31
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 123
 786: PUSH
 787: LD_INT 37
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 118
 796: PUSH
 797: LD_INT 45
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 112
 806: PUSH
 807: LD_INT 51
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 106
 816: PUSH
 817: LD_INT 57
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 99
 826: PUSH
 827: LD_INT 62
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 104
 836: PUSH
 837: LD_INT 71
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 110
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 119
 856: PUSH
 857: LD_INT 88
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 128
 866: PUSH
 867: LD_INT 97
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PUSH
 874: LD_INT 135
 876: PUSH
 877: LD_INT 106
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 141
 886: PUSH
 887: LD_INT 120
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 143
 896: PUSH
 897: LD_INT 132
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 143
 906: PUSH
 907: LD_INT 142
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 140
 916: PUSH
 917: LD_INT 149
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 132
 926: PUSH
 927: LD_INT 153
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 125
 936: PUSH
 937: LD_INT 155
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: LD_INT 115
 946: PUSH
 947: LD_INT 154
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 105
 956: PUSH
 957: LD_INT 153
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 93
 966: PUSH
 967: LD_INT 151
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 91
 976: PUSH
 977: LD_INT 157
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 163
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 93
 996: PUSH
 997: LD_INT 171
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 92
1006: PUSH
1007: LD_INT 177
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1044: LD_ADDR_EXP 36
1048: PUSH
1049: LD_INT 40
1051: PUSH
1052: LD_INT 35
1054: PUSH
1055: LD_INT 30
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_OWVAR 67
1067: ARRAY
1068: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1069: LD_ADDR_EXP 37
1073: PUSH
1074: LD_INT 50
1076: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1077: LD_ADDR_EXP 14
1081: PUSH
1082: LD_INT 21
1084: PUSH
1085: LD_INT 19
1087: PUSH
1088: LD_INT 17
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_OWVAR 67
1100: ARRAY
1101: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1102: LD_ADDR_EXP 38
1106: PUSH
1107: LD_INT 3
1109: PUSH
1110: LD_INT 4
1112: PUSH
1113: LD_INT 4
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_OWVAR 67
1125: ARRAY
1126: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1127: LD_ADDR_EXP 39
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: LD_INT 4
1137: PUSH
1138: LD_INT 4
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_OWVAR 67
1150: ARRAY
1151: ST_TO_ADDR
// arabianTroopsMin = 7 ;
1152: LD_ADDR_EXP 40
1156: PUSH
1157: LD_INT 7
1159: ST_TO_ADDR
// arabianTroopsMax = 7 ;
1160: LD_ADDR_EXP 41
1164: PUSH
1165: LD_INT 7
1167: ST_TO_ADDR
// end ;
1168: LD_VAR 0 1
1172: RET
// every 0 0$1 trigger debugMode do var i ;
1173: LD_EXP 31
1177: IFFALSE 1492
1179: GO 1181
1181: DISABLE
1182: LD_INT 0
1184: PPUSH
// begin enable ;
1185: ENABLE
// FogOff ( your_side ) ;
1186: LD_OWVAR 2
1190: PPUSH
1191: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1195: LD_ADDR_VAR 0 1
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_OWVAR 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 2
1214: PUSH
1215: LD_INT 21
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 21
1227: PUSH
1228: LD_INT 2
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: PUSH
1249: FOR_IN
1250: IFFALSE 1266
// SetLives ( i , 1000 ) ;
1252: LD_VAR 0 1
1256: PPUSH
1257: LD_INT 1000
1259: PPUSH
1260: CALL_OW 234
1264: GO 1249
1266: POP
1267: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1268: LD_ADDR_VAR 0 1
1272: PUSH
1273: LD_INT 22
1275: PUSH
1276: LD_OWVAR 2
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: PUSH
1304: FOR_IN
1305: IFFALSE 1369
// begin SetSkill ( i , skill_combat , 10 ) ;
1307: LD_VAR 0 1
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_INT 10
1317: PPUSH
1318: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1322: LD_VAR 0 1
1326: PPUSH
1327: LD_INT 2
1329: PPUSH
1330: LD_INT 10
1332: PPUSH
1333: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1337: LD_VAR 0 1
1341: PPUSH
1342: LD_INT 3
1344: PPUSH
1345: LD_INT 10
1347: PPUSH
1348: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1352: LD_VAR 0 1
1356: PPUSH
1357: LD_INT 4
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: CALL_OW 237
// end ;
1367: GO 1304
1369: POP
1370: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1371: LD_ADDR_VAR 0 1
1375: PUSH
1376: LD_INT 22
1378: PUSH
1379: LD_OWVAR 2
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: LD_INT 30
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 30
1403: PUSH
1404: LD_INT 1
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: PUSH
1425: FOR_IN
1426: IFFALSE 1490
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1428: LD_VAR 0 1
1432: PPUSH
1433: CALL_OW 274
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 9999
1443: PPUSH
1444: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 274
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 9999
1463: PPUSH
1464: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1468: LD_VAR 0 1
1472: PPUSH
1473: CALL_OW 274
1477: PPUSH
1478: LD_INT 3
1480: PPUSH
1481: LD_INT 9999
1483: PPUSH
1484: CALL_OW 277
// end ;
1488: GO 1425
1490: POP
1491: POP
// end ; end_of_file
1492: PPOPN 1
1494: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1495: LD_INT 0
1497: PPUSH
// randomsToSave = [ ] ;
1498: LD_ADDR_EXP 62
1502: PUSH
1503: EMPTY
1504: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1505: LD_ADDR_EXP 57
1509: PUSH
1510: EMPTY
1511: ST_TO_ADDR
// ruCars = [ ] ;
1512: LD_ADDR_EXP 61
1516: PUSH
1517: EMPTY
1518: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1519: CALL 2327 0 0
// PrepareHeroes ;
1523: CALL 1532 0 0
// end ;
1527: LD_VAR 0 1
1531: RET
// function PrepareHeroes ; var i , current ; begin
1532: LD_INT 0
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation = 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1553: LD_ADDR_EXP 42
1557: PUSH
1558: LD_STRING Burlak
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_INT 3
1566: PPUSH
1567: CALL 9385 0 3
1571: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1572: LD_ADDR_EXP 43
1576: PUSH
1577: LD_STRING Gnyevko
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: LD_INT 3
1585: PPUSH
1586: CALL 9385 0 3
1590: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1591: LD_ADDR_EXP 45
1595: PUSH
1596: LD_STRING Kovalyuk
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: CALL 9385 0 3
1609: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1610: LD_ADDR_EXP 44
1614: PUSH
1615: LD_STRING Kirilenkova
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: LD_INT 4
1623: PPUSH
1624: CALL 9385 0 3
1628: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1629: LD_ADDR_EXP 46
1633: PUSH
1634: LD_STRING Belkov
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: CALL 9385 0 3
1647: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1648: LD_ADDR_EXP 47
1652: PUSH
1653: LD_STRING Belkov2
1655: PPUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL 9385 0 3
1666: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1667: LD_ADDR_EXP 48
1671: PUSH
1672: LD_STRING Scholtze
1674: PPUSH
1675: LD_INT 1
1677: PPUSH
1678: LD_INT 4
1680: PPUSH
1681: CALL 9385 0 3
1685: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1686: LD_ADDR_EXP 52
1690: PUSH
1691: LD_STRING Popov
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL 9385 0 3
1704: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1705: LD_ADDR_EXP 53
1709: PUSH
1710: LD_STRING Platonov
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL 9385 0 3
1723: ST_TO_ADDR
// uc_side = 6 ;
1724: LD_ADDR_OWVAR 20
1728: PUSH
1729: LD_INT 6
1731: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1732: LD_ADDR_EXP 54
1736: PUSH
1737: LD_STRING Gaydar
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL 9385 0 3
1750: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1751: LD_ADDR_EXP 49
1755: PUSH
1756: LD_STRING Kuzmov
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 9385 0 3
1769: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1770: LD_EXP 49
1774: PPUSH
1775: LD_INT 109
1777: PPUSH
1778: LD_INT 108
1780: PPUSH
1781: LD_INT 5
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 50
// ComHold ( Kuzmov ) ;
1791: LD_EXP 49
1795: PPUSH
1796: CALL_OW 140
// uc_side = 3 ;
1800: LD_ADDR_OWVAR 20
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1808: LD_EXP 42
1812: PUSH
1813: LD_EXP 43
1817: PUSH
1818: LD_EXP 44
1822: PUSH
1823: LD_EXP 45
1827: PUSH
1828: LD_EXP 46
1832: PUSH
1833: LD_EXP 47
1837: PUSH
1838: LD_EXP 48
1842: PUSH
1843: LD_EXP 52
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: LD_INT 2
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL 9468 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1868: LD_ADDR_EXP 50
1872: PUSH
1873: LD_STRING 03_other_survivors
1875: PPUSH
1876: CALL_OW 31
1880: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1881: LD_ADDR_EXP 51
1885: PUSH
1886: LD_STRING 03_other_kirov
1888: PPUSH
1889: CALL_OW 31
1893: ST_TO_ADDR
// for i in other_survivors do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: LD_EXP 50
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1970
// begin if ruCars then
1907: LD_EXP 61
1911: IFFALSE 1953
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_EXP 61
1922: PUSH
1923: LD_INT 1
1925: ARRAY
1926: PPUSH
1927: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1931: LD_ADDR_EXP 61
1935: PUSH
1936: LD_EXP 61
1940: PUSH
1941: LD_EXP 61
1945: PUSH
1946: LD_INT 1
1948: ARRAY
1949: DIFF
1950: ST_TO_ADDR
// end else
1951: GO 1968
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_INT 2
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 49
// end ;
1968: GO 1904
1970: POP
1971: POP
// for i in other_kirov_survivors do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: LD_EXP 51
1981: PUSH
1982: FOR_IN
1983: IFFALSE 2048
// begin if ruCars then
1985: LD_EXP 61
1989: IFFALSE 2031
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_EXP 61
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2009: LD_ADDR_EXP 61
2013: PUSH
2014: LD_EXP 61
2018: PUSH
2019: LD_EXP 61
2023: PUSH
2024: LD_INT 1
2026: ARRAY
2027: DIFF
2028: ST_TO_ADDR
// end else
2029: GO 2046
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ;
2046: GO 1982
2048: POP
2049: POP
// PrepareSoldier ( sex_male , 1 ) ;
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 381
// dialogRus = CreateHuman ;
2060: LD_ADDR_EXP 59
2064: PUSH
2065: CALL_OW 44
2069: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2070: LD_EXP 50
2074: PUSH
2075: LD_EXP 51
2079: PLUS
2080: PUSH
2081: LD_EXP 43
2085: PUSH
2086: LD_EXP 44
2090: PUSH
2091: LD_EXP 45
2095: PUSH
2096: LD_EXP 46
2100: PUSH
2101: LD_EXP 47
2105: PUSH
2106: LD_EXP 48
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: PLUS
2119: PUSH
2120: LD_INT 8
2122: LESS
2123: IFFALSE 2322
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 50
2134: PUSH
2135: LD_EXP 51
2139: PLUS
2140: PUSH
2141: LD_EXP 43
2145: PUSH
2146: LD_EXP 44
2150: PUSH
2151: LD_EXP 45
2155: PUSH
2156: LD_EXP 46
2160: PUSH
2161: LD_EXP 47
2165: PUSH
2166: LD_EXP 48
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PLUS
2179: ST_TO_ADDR
// current = 8 - current ;
2180: LD_ADDR_VAR 0 3
2184: PUSH
2185: LD_INT 8
2187: PUSH
2188: LD_VAR 0 3
2192: MINUS
2193: ST_TO_ADDR
// for i := 1 to current do
2194: LD_ADDR_VAR 0 2
2198: PUSH
2199: DOUBLE
2200: LD_INT 1
2202: DEC
2203: ST_TO_ADDR
2204: LD_VAR 0 3
2208: PUSH
2209: FOR_TO
2210: IFFALSE 2320
// begin uc_nation = 3 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 3
2219: ST_TO_ADDR
// uc_side = 3 ;
2220: LD_ADDR_OWVAR 20
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2228: LD_INT 0
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 4
2236: PPUSH
2237: CALL_OW 12
2241: PPUSH
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 3
2247: PPUSH
2248: CALL_OW 12
2252: PPUSH
2253: CALL_OW 380
// if ruCars then
2257: LD_EXP 61
2261: IFFALSE 2303
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2263: CALL_OW 44
2267: PPUSH
2268: LD_EXP 61
2272: PUSH
2273: LD_INT 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2281: LD_ADDR_EXP 61
2285: PUSH
2286: LD_EXP 61
2290: PUSH
2291: LD_EXP 61
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: DIFF
2300: ST_TO_ADDR
// end else
2301: GO 2318
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2303: CALL_OW 44
2307: PPUSH
2308: LD_INT 2
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 49
// end ;
2318: GO 2209
2320: POP
2321: POP
// end ; end ;
2322: LD_VAR 0 1
2326: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2327: LD_INT 0
2329: PPUSH
2330: PPUSH
2331: PPUSH
// uc_side = 3 ;
2332: LD_ADDR_OWVAR 20
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// uc_nation = 3 ;
2340: LD_ADDR_OWVAR 21
2344: PUSH
2345: LD_INT 3
2347: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_EXP 5
2362: PUSH
2363: FOR_TO
2364: IFFALSE 2513
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2366: LD_ADDR_OWVAR 37
2370: PUSH
2371: LD_EXP 5
2375: PUSH
2376: LD_VAR 0 2
2380: ARRAY
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2386: LD_ADDR_OWVAR 39
2390: PUSH
2391: LD_EXP 5
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: PUSH
2402: LD_INT 2
2404: ARRAY
2405: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2406: LD_ADDR_OWVAR 38
2410: PUSH
2411: LD_EXP 5
2415: PUSH
2416: LD_VAR 0 2
2420: ARRAY
2421: PUSH
2422: LD_INT 3
2424: ARRAY
2425: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2426: LD_ADDR_OWVAR 40
2430: PUSH
2431: LD_EXP 5
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 4
2444: ARRAY
2445: ST_TO_ADDR
// uc_direction := 3 ;
2446: LD_ADDR_OWVAR 24
2450: PUSH
2451: LD_INT 3
2453: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2454: LD_ADDR_OWVAR 41
2458: PUSH
2459: LD_INT 25
2461: PPUSH
2462: LD_INT 30
2464: PPUSH
2465: CALL_OW 12
2469: ST_TO_ADDR
// car := CreateVehicle ;
2470: LD_ADDR_VAR 0 3
2474: PUSH
2475: CALL_OW 45
2479: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2480: LD_ADDR_EXP 61
2484: PUSH
2485: LD_EXP 61
2489: PUSH
2490: LD_VAR 0 3
2494: ADD
2495: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL_OW 49
// end ;
2511: GO 2363
2513: POP
2514: POP
// end ;
2515: LD_VAR 0 1
2519: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
// rnd = rand ( 1 , 4 ) ;
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 4
2540: PPUSH
2541: CALL_OW 12
2545: ST_TO_ADDR
// uc_side = 6 ;
2546: LD_ADDR_OWVAR 20
2550: PUSH
2551: LD_INT 6
2553: ST_TO_ADDR
// uc_nation = 3 ;
2554: LD_ADDR_OWVAR 21
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// if rnd < 4 then
2562: LD_VAR 0 3
2566: PUSH
2567: LD_INT 4
2569: LESS
2570: IFFALSE 2946
// begin vc_chassis = ru_medium_wheeled ;
2572: LD_ADDR_OWVAR 37
2576: PUSH
2577: LD_INT 21
2579: ST_TO_ADDR
// vc_control = control_manual ;
2580: LD_ADDR_OWVAR 38
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// vc_engine = engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2596: LD_ADDR_VAR 0 5
2600: PUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 100
2606: PPUSH
2607: CALL_OW 12
2611: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2612: LD_VAR 0 5
2616: PUSH
2617: LD_EXP 37
2621: PUSH
2622: LD_INT 1
2624: PLUS
2625: LESS
2626: IFFALSE 2638
// vc_weapon = ru_cargo_bay else
2628: LD_ADDR_OWVAR 40
2632: PUSH
2633: LD_INT 51
2635: ST_TO_ADDR
2636: GO 2669
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 42
2645: PUSH
2646: LD_INT 43
2648: PUSH
2649: LD_INT 44
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 3
2662: PPUSH
2663: CALL_OW 12
2667: ARRAY
2668: ST_TO_ADDR
// vehicle = CreateVehicle ;
2669: LD_ADDR_VAR 0 7
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2679: LD_VAR 0 7
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2691: LD_VAR 0 7
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 4
2714: PPUSH
2715: CALL_OW 12
2719: PPUSH
2720: LD_INT 2
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: CALL_OW 12
2730: PPUSH
2731: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2735: CALL_OW 44
2739: PPUSH
2740: LD_VAR 0 7
2744: PPUSH
2745: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2749: LD_OWVAR 40
2753: PUSH
2754: LD_INT 51
2756: EQUAL
2757: IFFALSE 2774
// AddCargo ( vehicle , mat_cans , 100 ) ;
2759: LD_VAR 0 7
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2774: LD_VAR 0 7
2778: PPUSH
2779: LD_INT 500
2781: PPUSH
2782: LD_INT 1000
2784: PPUSH
2785: CALL_OW 12
2789: PPUSH
2790: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2794: LD_ADDR_VAR 0 3
2798: PUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_INT 2
2804: PPUSH
2805: CALL_OW 12
2809: ST_TO_ADDR
// if rnd = 1 then
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 1
2817: EQUAL
2818: IFFALSE 2883
// for i := 3 to russianCargoPath1 do
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: DOUBLE
2826: LD_INT 3
2828: DEC
2829: ST_TO_ADDR
2830: LD_EXP 34
2834: PUSH
2835: FOR_TO
2836: IFFALSE 2879
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2838: LD_VAR 0 7
2842: PPUSH
2843: LD_EXP 34
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: PUSH
2854: LD_INT 1
2856: ARRAY
2857: PPUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 2
2867: ARRAY
2868: PUSH
2869: LD_INT 2
2871: ARRAY
2872: PPUSH
2873: CALL_OW 171
2877: GO 2835
2879: POP
2880: POP
2881: GO 2944
// for i := 3 to russianCargoPath2 do
2883: LD_ADDR_VAR 0 2
2887: PUSH
2888: DOUBLE
2889: LD_INT 3
2891: DEC
2892: ST_TO_ADDR
2893: LD_EXP 35
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2942
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2901: LD_VAR 0 7
2905: PPUSH
2906: LD_EXP 35
2910: PUSH
2911: LD_VAR 0 2
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_EXP 35
2925: PUSH
2926: LD_VAR 0 2
2930: ARRAY
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PPUSH
2936: CALL_OW 171
2940: GO 2898
2942: POP
2943: POP
// end else
2944: GO 3285
// begin for i := 1 to rand ( 1 , 3 ) do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 1
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 12
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3046
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2970: LD_INT 0
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: LD_INT 4
2978: PPUSH
2979: CALL_OW 12
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: LD_INT 3
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: CALL_OW 380
// unit = CreateHuman ;
2999: LD_ADDR_VAR 0 6
3003: PUSH
3004: CALL_OW 44
3008: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3009: LD_VAR 0 6
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3024: LD_VAR 0 6
3028: PPUSH
3029: LD_INT 500
3031: PPUSH
3032: LD_INT 1000
3034: PPUSH
3035: CALL_OW 12
3039: PPUSH
3040: CALL_OW 234
// end ;
3044: GO 2967
3046: POP
3047: POP
// rnd2 = rand ( 1 , 2 ) ;
3048: LD_ADDR_VAR 0 4
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 12
3063: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3064: LD_ADDR_VAR 0 8
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 6
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 56
3091: PUSH
3092: EMPTY
3093: LIST
3094: PUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 60
3100: PUSH
3101: EMPTY
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: PPUSH
3114: CALL_OW 69
3118: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3119: LD_ADDR_VAR 0 8
3123: PUSH
3124: LD_VAR 0 8
3128: PUSH
3129: LD_EXP 56
3133: DIFF
3134: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: LD_VAR 0 8
3144: PUSH
3145: LD_EXP 57
3149: DIFF
3150: ST_TO_ADDR
// if rnd2 = 1 then
3151: LD_VAR 0 4
3155: PUSH
3156: LD_INT 1
3158: EQUAL
3159: IFFALSE 3224
// for i := 3 to russianCargoPath1 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 3
3169: DEC
3170: ST_TO_ADDR
3171: LD_EXP 34
3175: PUSH
3176: FOR_TO
3177: IFFALSE 3220
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3179: LD_VAR 0 8
3183: PPUSH
3184: LD_EXP 34
3188: PUSH
3189: LD_VAR 0 2
3193: ARRAY
3194: PUSH
3195: LD_INT 1
3197: ARRAY
3198: PPUSH
3199: LD_EXP 34
3203: PUSH
3204: LD_VAR 0 2
3208: ARRAY
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: CALL_OW 171
3218: GO 3176
3220: POP
3221: POP
3222: GO 3285
// for i := 3 to russianCargoPath2 do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 3
3232: DEC
3233: ST_TO_ADDR
3234: LD_EXP 35
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3283
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3242: LD_VAR 0 8
3246: PPUSH
3247: LD_EXP 35
3251: PUSH
3252: LD_VAR 0 2
3256: ARRAY
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: LD_EXP 35
3266: PUSH
3267: LD_VAR 0 2
3271: ARRAY
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: CALL_OW 171
3281: GO 3239
3283: POP
3284: POP
// end ; end ;
3285: LD_VAR 0 1
3289: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3290: LD_INT 0
3292: PPUSH
3293: PPUSH
3294: PPUSH
// for i := 1 to 2 do
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: DOUBLE
3301: LD_INT 1
3303: DEC
3304: ST_TO_ADDR
3305: LD_INT 2
3307: PUSH
3308: FOR_TO
3309: IFFALSE 3375
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3311: LD_INT 0
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: CALL_OW 12
3327: PPUSH
3328: CALL_OW 380
// unit = CreateHuman ;
3332: LD_ADDR_VAR 0 3
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3342: LD_VAR 0 3
3346: PPUSH
3347: LD_INT 3
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3357: LD_ADDR_EXP 57
3361: PUSH
3362: LD_EXP 57
3366: PUSH
3367: LD_VAR 0 3
3371: ADD
3372: ST_TO_ADDR
// end ;
3373: GO 3308
3375: POP
3376: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3377: LD_INT 0
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: LD_INT 2
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: CALL_OW 12
3393: PPUSH
3394: CALL_OW 380
// unit = CreateHuman ;
3398: LD_ADDR_VAR 0 3
3402: PUSH
3403: CALL_OW 44
3407: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3423: LD_ADDR_EXP 57
3427: PUSH
3428: LD_EXP 57
3432: PUSH
3433: LD_VAR 0 3
3437: ADD
3438: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3439: LD_EXP 57
3443: PPUSH
3444: LD_INT 100
3446: PPUSH
3447: LD_INT 54
3449: PPUSH
3450: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3454: LD_EXP 57
3458: PPUSH
3459: LD_INT 25
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 72
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 95
3479: PPUSH
3480: LD_INT 52
3482: PPUSH
3483: LD_INT 2
3485: PPUSH
3486: CALL_OW 205
// end ; end_of_file
3490: LD_VAR 0 1
3494: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3495: LD_INT 0
3497: PPUSH
// uc_side = 2 ;
3498: LD_ADDR_OWVAR 20
3502: PUSH
3503: LD_INT 2
3505: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3506: LD_ADDR_EXP 63
3510: PUSH
3511: LD_STRING Heike
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: LD_INT 0
3519: PPUSH
3520: CALL 9385 0 3
3524: ST_TO_ADDR
// if Difficulty >= 2 then
3525: LD_OWVAR 67
3529: PUSH
3530: LD_INT 2
3532: GREATEREQUAL
3533: IFFALSE 3548
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3535: LD_INT 51
3537: PPUSH
3538: LD_INT 2
3540: PPUSH
3541: LD_INT 2
3543: PPUSH
3544: CALL_OW 322
// end ;
3548: LD_VAR 0 1
3552: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
3557: PPUSH
// currentEnemyGroup = [ ] ;
3558: LD_ADDR_EXP 65
3562: PUSH
3563: EMPTY
3564: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_EXP 39
3579: PUSH
3580: FOR_TO
3581: IFFALSE 3836
// begin uc_side = 2 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_INT 2
3590: ST_TO_ADDR
// uc_nation = nation_arabian ;
3591: LD_ADDR_OWVAR 21
3595: PUSH
3596: LD_INT 2
3598: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3599: LD_ADDR_OWVAR 40
3603: PUSH
3604: LD_INT 23
3606: PUSH
3607: LD_INT 24
3609: PUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 26
3615: PUSH
3616: LD_INT 27
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 5
3631: PPUSH
3632: CALL_OW 12
3636: ARRAY
3637: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3638: LD_OWVAR 40
3642: PUSH
3643: LD_INT 25
3645: PUSH
3646: LD_INT 26
3648: PUSH
3649: LD_INT 27
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: IN
3657: IFFALSE 3688
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3659: LD_ADDR_OWVAR 37
3663: PUSH
3664: LD_INT 13
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 1
3676: PPUSH
3677: LD_INT 2
3679: PPUSH
3680: CALL_OW 12
3684: ARRAY
3685: ST_TO_ADDR
3686: GO 3719
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3688: LD_ADDR_OWVAR 37
3692: PUSH
3693: LD_INT 12
3695: PUSH
3696: LD_INT 13
3698: PUSH
3699: LD_INT 14
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 1
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: CALL_OW 12
3717: ARRAY
3718: ST_TO_ADDR
// vc_control = control_manual ;
3719: LD_ADDR_OWVAR 38
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// vc_engine = engine_combustion ;
3727: LD_ADDR_OWVAR 39
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3735: LD_ADDR_OWVAR 41
3739: PUSH
3740: LD_INT 100
3742: ST_TO_ADDR
// veh = CreateVehicle ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: CALL_OW 45
3752: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3753: LD_ADDR_EXP 65
3757: PUSH
3758: LD_EXP 65
3762: PUSH
3763: LD_VAR 0 3
3767: ADD
3768: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 7
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3784: LD_OWVAR 40
3788: PUSH
3789: LD_INT 26
3791: EQUAL
3792: IFFALSE 3808
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3794: LD_INT 0
3796: PPUSH
3797: LD_EXP 33
3801: PPUSH
3802: CALL_OW 383
3806: GO 3820
// PrepareMechanic ( false , enemySkillLevel ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_EXP 32
3815: PPUSH
3816: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3820: CALL_OW 44
3824: PPUSH
3825: LD_VAR 0 3
3829: PPUSH
3830: CALL_OW 52
// end ;
3834: GO 3580
3836: POP
3837: POP
// end ;
3838: LD_VAR 0 1
3842: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3843: LD_INT 0
3845: PPUSH
3846: PPUSH
3847: PPUSH
// currentEnemyGroup = [ ] ;
3848: LD_ADDR_EXP 65
3852: PUSH
3853: EMPTY
3854: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: DOUBLE
3861: LD_INT 1
3863: DEC
3864: ST_TO_ADDR
3865: LD_EXP 40
3869: PPUSH
3870: LD_EXP 41
3874: PPUSH
3875: CALL_OW 12
3879: PUSH
3880: FOR_TO
3881: IFFALSE 3960
// begin uc_side = 2 ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_INT 2
3890: ST_TO_ADDR
// uc_nation = nation_arabian ;
3891: LD_ADDR_OWVAR 21
3895: PUSH
3896: LD_INT 2
3898: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3899: LD_INT 0
3901: PPUSH
3902: LD_EXP 32
3906: PUSH
3907: LD_INT 1
3909: MINUS
3910: PPUSH
3911: CALL_OW 381
// unit = CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3925: LD_ADDR_EXP 65
3929: PUSH
3930: LD_EXP 65
3934: PUSH
3935: LD_VAR 0 4
3939: ADD
3940: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3941: LD_VAR 0 4
3945: PPUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 49
// end ;
3958: GO 3880
3960: POP
3961: POP
// for i := 1 to rand ( 1 , 3 ) do
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: DOUBLE
3968: LD_INT 1
3970: DEC
3971: ST_TO_ADDR
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 12
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4059
// begin uc_side = 2 ;
3986: LD_ADDR_OWVAR 20
3990: PUSH
3991: LD_INT 2
3993: ST_TO_ADDR
// uc_nation = nation_arabian ;
3994: LD_ADDR_OWVAR 21
3998: PUSH
3999: LD_INT 2
4001: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_EXP 32
4009: PPUSH
4010: CALL_OW 384
// unit = CreateHuman ;
4014: LD_ADDR_VAR 0 4
4018: PUSH
4019: CALL_OW 44
4023: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4024: LD_ADDR_EXP 65
4028: PUSH
4029: LD_EXP 65
4033: PUSH
4034: LD_VAR 0 4
4038: ADD
4039: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4040: LD_VAR 0 4
4044: PPUSH
4045: LD_VAR 0 1
4049: PPUSH
4050: LD_INT 0
4052: PPUSH
4053: CALL_OW 49
// end ;
4057: GO 3983
4059: POP
4060: POP
// end ;
4061: LD_VAR 0 2
4065: RET
// export function PrepareArabianKiller ; var un ; begin
4066: LD_INT 0
4068: PPUSH
4069: PPUSH
// uc_side = 5 ;
4070: LD_ADDR_OWVAR 20
4074: PUSH
4075: LD_INT 5
4077: ST_TO_ADDR
// uc_nation = nation_arabian ;
4078: LD_ADDR_OWVAR 21
4082: PUSH
4083: LD_INT 2
4085: ST_TO_ADDR
// hc_class = class_soldier ;
4086: LD_ADDR_OWVAR 28
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4094: LD_ADDR_OWVAR 31
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: ST_TO_ADDR
// un = CreateHuman ;
4117: LD_ADDR_VAR 0 2
4121: PUSH
4122: CALL_OW 44
4126: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4127: LD_VAR 0 2
4131: PPUSH
4132: LD_INT 12
4134: PPUSH
4135: LD_INT 0
4137: PPUSH
4138: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_EXP 54
4151: PPUSH
4152: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4156: LD_ADDR_EXP 23
4160: PUSH
4161: LD_EXP 23
4165: PUSH
4166: LD_INT 1
4168: PLUS
4169: ST_TO_ADDR
// end ;
4170: LD_VAR 0 1
4174: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4175: LD_INT 0
4177: PPUSH
4178: PPUSH
4179: PPUSH
4180: PPUSH
// firstAttackGroup = [ ] ;
4181: LD_ADDR_EXP 64
4185: PUSH
4186: EMPTY
4187: ST_TO_ADDR
// uc_side = 2 ;
4188: LD_ADDR_OWVAR 20
4192: PUSH
4193: LD_INT 2
4195: ST_TO_ADDR
// uc_nation = nation_arabian ;
4196: LD_ADDR_OWVAR 21
4200: PUSH
4201: LD_INT 2
4203: ST_TO_ADDR
// for i := 1 to 3 do
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_INT 3
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4279
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4220: LD_INT 0
4222: PPUSH
4223: LD_EXP 32
4227: PUSH
4228: LD_INT 2
4230: MINUS
4231: PPUSH
4232: CALL_OW 381
// unit = CreateHuman ;
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: CALL_OW 44
4245: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4246: LD_ADDR_EXP 64
4250: PUSH
4251: LD_EXP 64
4255: PUSH
4256: LD_VAR 0 3
4260: ADD
4261: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_INT 7
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 49
// end ;
4277: GO 4217
4279: POP
4280: POP
// vc_weapon = ar_light_gun ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 23
4288: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4289: LD_ADDR_OWVAR 37
4293: PUSH
4294: LD_INT 13
4296: ST_TO_ADDR
// vc_control = control_manual ;
4297: LD_ADDR_OWVAR 38
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// vc_engine = engine_combustion ;
4305: LD_ADDR_OWVAR 39
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4313: LD_ADDR_OWVAR 41
4317: PUSH
4318: LD_INT 100
4320: ST_TO_ADDR
// veh = CreateVehicle ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: CALL_OW 45
4330: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4331: LD_ADDR_EXP 64
4335: PUSH
4336: LD_EXP 64
4340: PUSH
4341: LD_VAR 0 4
4345: ADD
4346: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4347: LD_VAR 0 4
4351: PPUSH
4352: LD_INT 7
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_EXP 32
4369: PUSH
4370: LD_INT 1
4372: MINUS
4373: PPUSH
4374: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4378: CALL_OW 44
4382: PPUSH
4383: LD_VAR 0 4
4387: PPUSH
4388: CALL_OW 52
// end ; end_of_file
4392: LD_VAR 0 1
4396: RET
// export function Nef_PrepareNature ; var i , un ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4402: LD_ADDR_VAR 0 2
4406: PUSH
4407: DOUBLE
4408: LD_INT 1
4410: DEC
4411: ST_TO_ADDR
4412: LD_EXP 26
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4532
// begin uc_side = 0 ;
4424: LD_ADDR_OWVAR 20
4428: PUSH
4429: LD_INT 0
4431: ST_TO_ADDR
// uc_nation = nation_nature ;
4432: LD_ADDR_OWVAR 21
4436: PUSH
4437: LD_INT 0
4439: ST_TO_ADDR
// hc_class = class_apeman ;
4440: LD_ADDR_OWVAR 28
4444: PUSH
4445: LD_INT 12
4447: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4448: LD_ADDR_OWVAR 31
4452: PUSH
4453: LD_EXP 27
4457: PUSH
4458: LD_INT 1
4460: ARRAY
4461: PUSH
4462: LD_EXP 27
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: PUSH
4471: LD_EXP 27
4475: PUSH
4476: LD_INT 3
4478: ARRAY
4479: PUSH
4480: LD_EXP 27
4484: PUSH
4485: LD_INT 4
4487: ARRAY
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4495: LD_ADDR_OWVAR 35
4499: PUSH
4500: LD_EXP 28
4504: ST_TO_ADDR
// un = CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_INT 8
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
// end ;
4530: GO 4421
4532: POP
4533: POP
// for i := 1 to animalsAmount [ 2 ] do
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: DOUBLE
4540: LD_INT 1
4542: DEC
4543: ST_TO_ADDR
4544: LD_EXP 26
4548: PUSH
4549: LD_INT 2
4551: ARRAY
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4664
// begin uc_side = 0 ;
4556: LD_ADDR_OWVAR 20
4560: PUSH
4561: LD_INT 0
4563: ST_TO_ADDR
// uc_nation = nation_nature ;
4564: LD_ADDR_OWVAR 21
4568: PUSH
4569: LD_INT 0
4571: ST_TO_ADDR
// hc_class = class_phororhacos ;
4572: LD_ADDR_OWVAR 28
4576: PUSH
4577: LD_INT 18
4579: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4580: LD_ADDR_OWVAR 31
4584: PUSH
4585: LD_EXP 27
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PUSH
4594: LD_EXP 27
4598: PUSH
4599: LD_INT 2
4601: ARRAY
4602: PUSH
4603: LD_EXP 27
4607: PUSH
4608: LD_INT 3
4610: ARRAY
4611: PUSH
4612: LD_EXP 27
4616: PUSH
4617: LD_INT 4
4619: ARRAY
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4627: LD_ADDR_OWVAR 35
4631: PUSH
4632: LD_EXP 28
4636: ST_TO_ADDR
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 8
4654: PPUSH
4655: LD_INT 0
4657: PPUSH
4658: CALL_OW 49
// end ;
4662: GO 4553
4664: POP
4665: POP
// for i := 1 to animalsAmount [ 3 ] do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_EXP 26
4680: PUSH
4681: LD_INT 3
4683: ARRAY
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4796
// begin uc_side = 0 ;
4688: LD_ADDR_OWVAR 20
4692: PUSH
4693: LD_INT 0
4695: ST_TO_ADDR
// uc_nation = nation_nature ;
4696: LD_ADDR_OWVAR 21
4700: PUSH
4701: LD_INT 0
4703: ST_TO_ADDR
// hc_class = class_tiger ;
4704: LD_ADDR_OWVAR 28
4708: PUSH
4709: LD_INT 14
4711: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4712: LD_ADDR_OWVAR 31
4716: PUSH
4717: LD_EXP 27
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PUSH
4726: LD_EXP 27
4730: PUSH
4731: LD_INT 2
4733: ARRAY
4734: PUSH
4735: LD_EXP 27
4739: PUSH
4740: LD_INT 3
4742: ARRAY
4743: PUSH
4744: LD_EXP 27
4748: PUSH
4749: LD_INT 4
4751: ARRAY
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4759: LD_ADDR_OWVAR 35
4763: PUSH
4764: LD_EXP 28
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 8
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// end ;
4794: GO 4685
4796: POP
4797: POP
// for i := 1 to animalsAmount [ 4 ] do
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: DOUBLE
4804: LD_INT 1
4806: DEC
4807: ST_TO_ADDR
4808: LD_EXP 26
4812: PUSH
4813: LD_INT 4
4815: ARRAY
4816: PUSH
4817: FOR_TO
4818: IFFALSE 4928
// begin uc_side = 0 ;
4820: LD_ADDR_OWVAR 20
4824: PUSH
4825: LD_INT 0
4827: ST_TO_ADDR
// uc_nation = nation_nature ;
4828: LD_ADDR_OWVAR 21
4832: PUSH
4833: LD_INT 0
4835: ST_TO_ADDR
// hc_class = 21 ;
4836: LD_ADDR_OWVAR 28
4840: PUSH
4841: LD_INT 21
4843: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4844: LD_ADDR_OWVAR 31
4848: PUSH
4849: LD_EXP 27
4853: PUSH
4854: LD_INT 1
4856: ARRAY
4857: PUSH
4858: LD_EXP 27
4862: PUSH
4863: LD_INT 2
4865: ARRAY
4866: PUSH
4867: LD_EXP 27
4871: PUSH
4872: LD_INT 3
4874: ARRAY
4875: PUSH
4876: LD_EXP 27
4880: PUSH
4881: LD_INT 4
4883: ARRAY
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4891: LD_ADDR_OWVAR 35
4895: PUSH
4896: LD_EXP 28
4900: ST_TO_ADDR
// un = CreateHuman ;
4901: LD_ADDR_VAR 0 3
4905: PUSH
4906: CALL_OW 44
4910: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4911: LD_VAR 0 3
4915: PPUSH
4916: LD_INT 8
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 49
// end ;
4926: GO 4817
4928: POP
4929: POP
// for i := 1 to animalsAmount [ 5 ] do
4930: LD_ADDR_VAR 0 2
4934: PUSH
4935: DOUBLE
4936: LD_INT 1
4938: DEC
4939: ST_TO_ADDR
4940: LD_EXP 26
4944: PUSH
4945: LD_INT 5
4947: ARRAY
4948: PUSH
4949: FOR_TO
4950: IFFALSE 5011
// begin uc_side = 0 ;
4952: LD_ADDR_OWVAR 20
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// uc_nation = nation_nature ;
4960: LD_ADDR_OWVAR 21
4964: PUSH
4965: LD_INT 0
4967: ST_TO_ADDR
// vc_chassis := 31 ;
4968: LD_ADDR_OWVAR 37
4972: PUSH
4973: LD_INT 31
4975: ST_TO_ADDR
// vc_control := control_rider ;
4976: LD_ADDR_OWVAR 38
4980: PUSH
4981: LD_INT 4
4983: ST_TO_ADDR
// un := CreateVehicle ;
4984: LD_ADDR_VAR 0 3
4988: PUSH
4989: CALL_OW 45
4993: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4994: LD_VAR 0 3
4998: PPUSH
4999: LD_INT 8
5001: PPUSH
5002: LD_INT 0
5004: PPUSH
5005: CALL_OW 49
// end ;
5009: GO 4949
5011: POP
5012: POP
// end ; end_of_file
5013: LD_VAR 0 1
5017: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5018: LD_INT 0
5020: PPUSH
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
5025: PPUSH
5026: PPUSH
5027: PPUSH
5028: PPUSH
5029: PPUSH
5030: PPUSH
5031: PPUSH
5032: PPUSH
5033: PPUSH
5034: PPUSH
5035: PPUSH
5036: PPUSH
5037: PPUSH
// for unit in units do
5038: LD_ADDR_VAR 0 8
5042: PUSH
5043: LD_VAR 0 1
5047: PUSH
5048: FOR_IN
5049: IFFALSE 5086
// if not ignorePath then
5051: LD_VAR 0 3
5055: NOT
5056: IFFALSE 5072
// SetTag ( unit , 0 ) else
5058: LD_VAR 0 8
5062: PPUSH
5063: LD_INT 0
5065: PPUSH
5066: CALL_OW 109
5070: GO 5084
// SetTag ( unit , 1 ) ;
5072: LD_VAR 0 8
5076: PPUSH
5077: LD_INT 1
5079: PPUSH
5080: CALL_OW 109
5084: GO 5048
5086: POP
5087: POP
// startAttacks = false ;
5088: LD_ADDR_VAR 0 21
5092: PUSH
5093: LD_INT 0
5095: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5096: LD_ADDR_VAR 0 17
5100: PUSH
5101: LD_VAR 0 2
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PUSH
5112: LD_INT 1
5114: ARRAY
5115: PUSH
5116: LD_VAR 0 2
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: ST_TO_ADDR
// mechanics = [ ] ;
5135: LD_ADDR_VAR 0 12
5139: PUSH
5140: EMPTY
5141: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5142: LD_ADDR_VAR 0 9
5146: PUSH
5147: LD_VAR 0 1
5151: PPUSH
5152: LD_INT 50
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 72
5194: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5195: LD_ADDR_VAR 0 11
5199: PUSH
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_INT 50
5207: PUSH
5208: EMPTY
5209: LIST
5210: PUSH
5211: LD_INT 25
5213: PUSH
5214: LD_INT 4
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 72
5229: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5230: LD_ADDR_VAR 0 13
5234: PUSH
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_INT 21
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 24
5255: PUSH
5256: LD_INT 1000
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 72
5275: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5276: LD_ADDR_VAR 0 15
5280: PUSH
5281: LD_INT 9
5283: PPUSH
5284: CALL_OW 435
5288: ST_TO_ADDR
// if not ignorePath then
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 6276
// begin for unit in attackUnits do
5296: LD_ADDR_VAR 0 8
5300: PUSH
5301: LD_VAR 0 9
5305: PUSH
5306: FOR_IN
5307: IFFALSE 6050
// begin if path and not startAttacks then
5309: LD_VAR 0 2
5313: PUSH
5314: LD_VAR 0 21
5318: NOT
5319: AND
5320: IFFALSE 6039
// begin i = 1 ;
5322: LD_ADDR_VAR 0 7
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5330: LD_ADDR_VAR 0 15
5334: PUSH
5335: LD_INT 9
5337: PPUSH
5338: CALL_OW 435
5342: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5343: LD_ADDR_VAR 0 18
5347: PUSH
5348: LD_INT 81
5350: PUSH
5351: LD_VAR 0 8
5355: PPUSH
5356: CALL_OW 255
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_VAR 0 8
5374: PPUSH
5375: CALL_OW 74
5379: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5380: LD_ADDR_VAR 0 19
5384: PUSH
5385: LD_VAR 0 15
5389: PPUSH
5390: LD_VAR 0 8
5394: PPUSH
5395: CALL_OW 250
5399: PPUSH
5400: LD_VAR 0 8
5404: PPUSH
5405: CALL_OW 251
5409: PPUSH
5410: CALL_OW 439
5414: ST_TO_ADDR
// if damageUnits and medics then
5415: LD_VAR 0 13
5419: PUSH
5420: LD_VAR 0 11
5424: AND
5425: IFFALSE 5447
// ComHeal ( medics , damageUnits [ 1 ] ) else
5427: LD_VAR 0 11
5431: PPUSH
5432: LD_VAR 0 13
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: CALL_OW 128
5445: GO 5490
// if medics then
5447: LD_VAR 0 11
5451: IFFALSE 5490
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5453: LD_VAR 0 11
5457: PPUSH
5458: LD_VAR 0 9
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 250
5471: PPUSH
5472: LD_VAR 0 9
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 251
5485: PPUSH
5486: CALL_OW 111
// if not HasTask ( unit ) then
5490: LD_VAR 0 8
5494: PPUSH
5495: CALL_OW 314
5499: NOT
5500: IFFALSE 5739
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5502: LD_ADDR_VAR 0 19
5506: PUSH
5507: LD_VAR 0 15
5511: PPUSH
5512: LD_VAR 0 8
5516: PPUSH
5517: CALL_OW 250
5521: PPUSH
5522: LD_VAR 0 8
5526: PPUSH
5527: CALL_OW 251
5531: PPUSH
5532: CALL_OW 439
5536: ST_TO_ADDR
// if i > crates then
5537: LD_VAR 0 7
5541: PUSH
5542: LD_VAR 0 15
5546: GREATER
5547: IFFALSE 5557
// i = 1 ;
5549: LD_ADDR_VAR 0 7
5553: PUSH
5554: LD_INT 1
5556: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5557: LD_VAR 0 18
5561: PUSH
5562: LD_VAR 0 19
5566: AND
5567: IFFALSE 5682
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5569: LD_VAR 0 8
5573: PPUSH
5574: LD_VAR 0 18
5578: PPUSH
5579: CALL_OW 250
5583: PPUSH
5584: LD_VAR 0 18
5588: PPUSH
5589: CALL_OW 251
5593: PPUSH
5594: CALL_OW 297
5598: PUSH
5599: LD_VAR 0 8
5603: PPUSH
5604: LD_VAR 0 19
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 19
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 297
5626: LESS
5627: IFFALSE 5645
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5629: LD_VAR 0 9
5633: PPUSH
5634: LD_VAR 0 18
5638: PPUSH
5639: CALL_OW 115
5643: GO 5680
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5645: LD_VAR 0 9
5649: PPUSH
5650: LD_VAR 0 15
5654: PUSH
5655: LD_VAR 0 7
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 15
5665: PUSH
5666: LD_VAR 0 7
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: CALL_OW 116
// end else
5680: GO 5739
// if crates then
5682: LD_VAR 0 15
5686: IFFALSE 5725
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5688: LD_VAR 0 9
5692: PPUSH
5693: LD_VAR 0 15
5697: PUSH
5698: LD_VAR 0 7
5702: ARRAY
5703: PPUSH
5704: LD_VAR 0 15
5708: PUSH
5709: LD_VAR 0 7
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: ARRAY
5718: PPUSH
5719: CALL_OW 116
5723: GO 5739
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5725: LD_VAR 0 9
5729: PPUSH
5730: LD_VAR 0 18
5734: PPUSH
5735: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// if path then
5746: LD_VAR 0 2
5750: IFFALSE 5836
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5752: LD_ADDR_VAR 0 16
5756: PUSH
5757: LD_VAR 0 8
5761: PPUSH
5762: LD_VAR 0 2
5766: PPUSH
5767: CALL 7166 0 2
5771: ST_TO_ADDR
// if agressiveMove then
5772: LD_VAR 0 4
5776: IFFALSE 5807
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5778: LD_VAR 0 9
5782: PPUSH
5783: LD_VAR 0 16
5787: PUSH
5788: LD_INT 1
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 16
5796: PUSH
5797: LD_INT 2
5799: ARRAY
5800: PPUSH
5801: CALL_OW 114
5805: GO 5834
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5807: LD_VAR 0 9
5811: PPUSH
5812: LD_VAR 0 16
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: LD_VAR 0 16
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 111
// end else
5834: GO 5844
// startAttacks = true ;
5836: LD_ADDR_VAR 0 21
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// i = i + 2 ;
5844: LD_ADDR_VAR 0 7
5848: PUSH
5849: LD_VAR 0 7
5853: PUSH
5854: LD_INT 2
5856: PLUS
5857: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5858: LD_VAR 0 8
5862: PPUSH
5863: CALL_OW 314
5867: NOT
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_VAR 0 8
5876: PPUSH
5877: CALL_OW 255
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 92
5888: PUSH
5889: LD_VAR 0 16
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PUSH
5898: LD_VAR 0 16
5902: PUSH
5903: LD_INT 2
5905: ARRAY
5906: PUSH
5907: LD_INT 4
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_INT 3
5927: GREATER
5928: AND
5929: PUSH
5930: LD_VAR 0 21
5934: NOT
5935: AND
5936: IFFALSE 5330
// for i := 1 to path do
5938: LD_ADDR_VAR 0 7
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6037
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5956: LD_VAR 0 2
5960: PUSH
5961: LD_VAR 0 7
5965: ARRAY
5966: PUSH
5967: LD_INT 1
5969: ARRAY
5970: PUSH
5971: LD_VAR 0 16
5975: PUSH
5976: LD_INT 1
5978: ARRAY
5979: EQUAL
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_VAR 0 7
5990: ARRAY
5991: PUSH
5992: LD_INT 2
5994: ARRAY
5995: PUSH
5996: LD_VAR 0 16
6000: PUSH
6001: LD_INT 2
6003: ARRAY
6004: EQUAL
6005: AND
6006: IFFALSE 6035
// begin path = path diff [ path [ i ] ] ;
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: LD_VAR 0 2
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_VAR 0 7
6027: ARRAY
6028: PUSH
6029: EMPTY
6030: LIST
6031: DIFF
6032: ST_TO_ADDR
// break ;
6033: GO 6037
// end ;
6035: GO 5953
6037: POP
6038: POP
// end ; if not path then
6039: LD_VAR 0 2
6043: NOT
6044: IFFALSE 6048
// break ;
6046: GO 6050
// end ;
6048: GO 5306
6050: POP
6051: POP
// repeat unitsReachPathEnd = 0 ;
6052: LD_ADDR_VAR 0 20
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// for attackUnit in attackUnits do
6060: LD_ADDR_VAR 0 10
6064: PUSH
6065: LD_VAR 0 9
6069: PUSH
6070: FOR_IN
6071: IFFALSE 6244
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6073: LD_VAR 0 10
6077: PPUSH
6078: LD_VAR 0 17
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: LD_VAR 0 17
6091: PUSH
6092: LD_INT 2
6094: ARRAY
6095: PPUSH
6096: CALL_OW 297
6100: PUSH
6101: LD_INT 7
6103: LESS
6104: NOT
6105: PUSH
6106: LD_VAR 0 10
6110: PPUSH
6111: CALL_OW 110
6115: PUSH
6116: LD_INT 0
6118: EQUAL
6119: AND
6120: IFFALSE 6186
// begin if agressiveMove then
6122: LD_VAR 0 4
6126: IFFALSE 6157
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6128: LD_VAR 0 10
6132: PPUSH
6133: LD_VAR 0 17
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: LD_VAR 0 17
6146: PUSH
6147: LD_INT 2
6149: ARRAY
6150: PPUSH
6151: CALL_OW 114
6155: GO 6184
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6157: LD_VAR 0 10
6161: PPUSH
6162: LD_VAR 0 17
6166: PUSH
6167: LD_INT 1
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 17
6175: PUSH
6176: LD_INT 2
6178: ARRAY
6179: PPUSH
6180: CALL_OW 111
// end else
6184: GO 6213
// if GetTag ( attackUnit ) = 0 then
6186: LD_VAR 0 10
6190: PPUSH
6191: CALL_OW 110
6195: PUSH
6196: LD_INT 0
6198: EQUAL
6199: IFFALSE 6213
// SetTag ( attackUnit , 1 ) ;
6201: LD_VAR 0 10
6205: PPUSH
6206: LD_INT 1
6208: PPUSH
6209: CALL_OW 109
// if GetTag ( unit ) = 1 then
6213: LD_VAR 0 8
6217: PPUSH
6218: CALL_OW 110
6222: PUSH
6223: LD_INT 1
6225: EQUAL
6226: IFFALSE 6242
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6228: LD_ADDR_VAR 0 20
6232: PUSH
6233: LD_VAR 0 20
6237: PUSH
6238: LD_INT 1
6240: PLUS
6241: ST_TO_ADDR
// end ;
6242: GO 6070
6244: POP
6245: POP
// wait ( 0 0$1 ) ;
6246: LD_INT 35
6248: PPUSH
6249: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6253: LD_VAR 0 20
6257: PUSH
6258: LD_VAR 0 9
6262: PUSH
6263: LD_INT 3
6265: MINUS
6266: GREATER
6267: IFFALSE 6052
// wait ( 0 0$10 ) ;
6269: LD_INT 350
6271: PPUSH
6272: CALL_OW 67
// end ; for attackUnit in attackUnits do
6276: LD_ADDR_VAR 0 10
6280: PUSH
6281: LD_VAR 0 9
6285: PUSH
6286: FOR_IN
6287: IFFALSE 6303
// SetTag ( attackUnit , 2 ) ;
6289: LD_VAR 0 10
6293: PPUSH
6294: LD_INT 2
6296: PPUSH
6297: CALL_OW 109
6301: GO 6286
6303: POP
6304: POP
// startAttacks = true ;
6305: LD_ADDR_VAR 0 21
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// if startAttacks then
6313: LD_VAR 0 21
6317: IFFALSE 7136
// begin repeat wait ( 0 0$1 ) ;
6319: LD_INT 35
6321: PPUSH
6322: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6326: LD_ADDR_VAR 0 11
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 50
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 72
6360: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6361: LD_ADDR_VAR 0 13
6365: PUSH
6366: LD_VAR 0 1
6370: PPUSH
6371: LD_INT 21
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: LD_INT 25
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 24
6396: PUSH
6397: LD_INT 1000
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: ST_TO_ADDR
// if damageUnits and medics then
6418: LD_VAR 0 13
6422: PUSH
6423: LD_VAR 0 11
6427: AND
6428: IFFALSE 6450
// ComHeal ( medics , damageUnits [ 1 ] ) else
6430: LD_VAR 0 11
6434: PPUSH
6435: LD_VAR 0 13
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: CALL_OW 128
6448: GO 6500
// if medics and not damageUnits then
6450: LD_VAR 0 11
6454: PUSH
6455: LD_VAR 0 13
6459: NOT
6460: AND
6461: IFFALSE 6500
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6463: LD_VAR 0 11
6467: PPUSH
6468: LD_VAR 0 9
6472: PUSH
6473: LD_INT 1
6475: ARRAY
6476: PPUSH
6477: CALL_OW 250
6481: PPUSH
6482: LD_VAR 0 9
6486: PUSH
6487: LD_INT 1
6489: ARRAY
6490: PPUSH
6491: CALL_OW 251
6495: PPUSH
6496: CALL_OW 111
// for attackUnit in attackUnits do
6500: LD_ADDR_VAR 0 10
6504: PUSH
6505: LD_VAR 0 9
6509: PUSH
6510: FOR_IN
6511: IFFALSE 7127
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6513: LD_ADDR_VAR 0 22
6517: PUSH
6518: LD_INT 81
6520: PUSH
6521: LD_VAR 0 10
6525: PPUSH
6526: CALL_OW 255
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: PPUSH
6540: LD_VAR 0 10
6544: PPUSH
6545: CALL_OW 74
6549: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6550: LD_ADDR_VAR 0 23
6554: PUSH
6555: LD_INT 81
6557: PUSH
6558: LD_VAR 0 10
6562: PPUSH
6563: CALL_OW 255
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 59
6577: PUSH
6578: EMPTY
6579: LIST
6580: PUSH
6581: LD_INT 21
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 21
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: PPUSH
6619: LD_VAR 0 10
6623: PPUSH
6624: CALL_OW 74
6628: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6629: LD_VAR 0 10
6633: PPUSH
6634: CALL_OW 110
6638: PUSH
6639: LD_INT 2
6641: EQUAL
6642: IFFALSE 6802
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6644: LD_VAR 0 10
6648: PPUSH
6649: LD_VAR 0 22
6653: PPUSH
6654: CALL_OW 296
6658: PUSH
6659: LD_INT 10
6661: PLUS
6662: PUSH
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 23
6672: PPUSH
6673: CALL_OW 296
6677: LESS
6678: IFFALSE 6696
// ComAttackUnit ( attackUnit , target1 ) else
6680: LD_VAR 0 10
6684: PPUSH
6685: LD_VAR 0 22
6689: PPUSH
6690: CALL_OW 115
6694: GO 6710
// ComAttackUnit ( attackUnit , target2 ) ;
6696: LD_VAR 0 10
6700: PPUSH
6701: LD_VAR 0 23
6705: PPUSH
6706: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6710: LD_VAR 0 10
6714: PPUSH
6715: CALL_OW 256
6719: PUSH
6720: LD_INT 650
6722: LESS
6723: PUSH
6724: LD_VAR 0 10
6728: PPUSH
6729: CALL_OW 247
6733: PUSH
6734: LD_INT 2
6736: EQUAL
6737: AND
6738: PUSH
6739: LD_VAR 0 10
6743: PPUSH
6744: CALL_OW 263
6748: PUSH
6749: LD_INT 1
6751: EQUAL
6752: AND
6753: IFFALSE 6802
// begin SetTag ( attackUnit , 3 ) ;
6755: LD_VAR 0 10
6759: PPUSH
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 313
6776: PUSH
6777: LD_INT 1
6779: ARRAY
6780: PPUSH
6781: LD_INT 3
6783: PPUSH
6784: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6788: LD_VAR 0 10
6792: PPUSH
6793: LD_VAR 0 5
6797: PPUSH
6798: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6802: LD_VAR 0 10
6806: PPUSH
6807: LD_VAR 0 5
6811: PPUSH
6812: CALL_OW 308
6816: PUSH
6817: LD_VAR 0 10
6821: PPUSH
6822: CALL_OW 110
6826: PUSH
6827: LD_INT 3
6829: EQUAL
6830: AND
6831: PUSH
6832: LD_VAR 0 10
6836: PPUSH
6837: CALL_OW 313
6841: AND
6842: IFFALSE 6915
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6844: LD_ADDR_VAR 0 14
6848: PUSH
6849: LD_VAR 0 10
6853: PPUSH
6854: CALL_OW 313
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: ST_TO_ADDR
// if not driver in mechanics then
6863: LD_VAR 0 14
6867: PUSH
6868: LD_VAR 0 12
6872: IN
6873: NOT
6874: IFFALSE 6892
// mechanics = mechanics ^ driver ;
6876: LD_ADDR_VAR 0 12
6880: PUSH
6881: LD_VAR 0 12
6885: PUSH
6886: LD_VAR 0 14
6890: ADD
6891: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6892: LD_VAR 0 14
6896: PPUSH
6897: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6901: LD_VAR 0 14
6905: PPUSH
6906: LD_VAR 0 10
6910: PPUSH
6911: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6915: LD_VAR 0 10
6919: PPUSH
6920: CALL_OW 256
6924: PUSH
6925: LD_INT 1000
6927: EQUAL
6928: IFFALSE 7046
// begin SetTag ( attackUnit , 2 ) ;
6930: LD_VAR 0 10
6934: PPUSH
6935: LD_INT 2
6937: PPUSH
6938: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6942: LD_VAR 0 10
6946: PPUSH
6947: CALL_OW 247
6951: PUSH
6952: LD_INT 2
6954: EQUAL
6955: PUSH
6956: LD_VAR 0 10
6960: PPUSH
6961: CALL_OW 263
6965: PUSH
6966: LD_INT 1
6968: EQUAL
6969: AND
6970: PUSH
6971: LD_VAR 0 10
6975: PPUSH
6976: CALL_OW 313
6980: NOT
6981: AND
6982: IFFALSE 7046
// begin SetFuel ( attackUnit , 100 ) ;
6984: LD_VAR 0 10
6988: PPUSH
6989: LD_INT 100
6991: PPUSH
6992: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6996: LD_VAR 0 12
7000: PPUSH
7001: LD_VAR 0 10
7005: PPUSH
7006: CALL_OW 74
7010: PPUSH
7011: LD_VAR 0 10
7015: PPUSH
7016: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7020: LD_ADDR_VAR 0 12
7024: PUSH
7025: LD_VAR 0 12
7029: PUSH
7030: LD_VAR 0 12
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 74
7044: DIFF
7045: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7046: LD_ADDR_VAR 0 8
7050: PUSH
7051: LD_VAR 0 12
7055: PUSH
7056: FOR_IN
7057: IFFALSE 7123
// begin if not IsInArea ( unit , retreatArea ) then
7059: LD_VAR 0 8
7063: PPUSH
7064: LD_VAR 0 5
7068: PPUSH
7069: CALL_OW 308
7073: NOT
7074: IFFALSE 7090
// ComMoveToArea ( unit , retreatArea ) ;
7076: LD_VAR 0 8
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 113
// if GetLives ( unit ) < 250 then
7090: LD_VAR 0 8
7094: PPUSH
7095: CALL_OW 256
7099: PUSH
7100: LD_INT 250
7102: LESS
7103: IFFALSE 7121
// mechanics = mechanics diff unit ;
7105: LD_ADDR_VAR 0 12
7109: PUSH
7110: LD_VAR 0 12
7114: PUSH
7115: LD_VAR 0 8
7119: DIFF
7120: ST_TO_ADDR
// end ;
7121: GO 7056
7123: POP
7124: POP
// end ;
7125: GO 6510
7127: POP
7128: POP
// until not attackUnits ;
7129: LD_VAR 0 9
7133: NOT
7134: IFFALSE 6319
// end ; wait ( 0 0$1 ) ;
7136: LD_INT 35
7138: PPUSH
7139: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7143: LD_VAR 0 1
7147: PPUSH
7148: LD_INT 50
7150: PUSH
7151: EMPTY
7152: LIST
7153: PPUSH
7154: CALL_OW 72
7158: NOT
7159: IFFALSE 5142
// end ;
7161: LD_VAR 0 6
7165: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7166: LD_INT 0
7168: PPUSH
7169: PPUSH
7170: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7171: LD_ADDR_VAR 0 5
7175: PUSH
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PUSH
7185: LD_INT 1
7187: ARRAY
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: LD_INT 1
7196: ARRAY
7197: PUSH
7198: LD_INT 2
7200: ARRAY
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// for i := 2 to path do
7206: LD_ADDR_VAR 0 4
7210: PUSH
7211: DOUBLE
7212: LD_INT 2
7214: DEC
7215: ST_TO_ADDR
7216: LD_VAR 0 2
7220: PUSH
7221: FOR_TO
7222: IFFALSE 7362
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_VAR 0 2
7233: PUSH
7234: LD_VAR 0 4
7238: ARRAY
7239: PUSH
7240: LD_INT 1
7242: ARRAY
7243: PPUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_VAR 0 4
7253: ARRAY
7254: PUSH
7255: LD_INT 2
7257: ARRAY
7258: PPUSH
7259: CALL_OW 297
7263: PUSH
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 5
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL_OW 297
7291: LESS
7292: IFFALSE 7360
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7294: LD_ADDR_VAR 0 5
7298: PUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_VAR 0 4
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: CALL_OW 1
7326: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7327: LD_ADDR_VAR 0 5
7331: PUSH
7332: LD_VAR 0 5
7336: PPUSH
7337: LD_INT 2
7339: PPUSH
7340: LD_VAR 0 2
7344: PUSH
7345: LD_VAR 0 4
7349: ARRAY
7350: PUSH
7351: LD_INT 2
7353: ARRAY
7354: PPUSH
7355: CALL_OW 1
7359: ST_TO_ADDR
// end ; end ;
7360: GO 7221
7362: POP
7363: POP
// result = nearPosition ;
7364: LD_ADDR_VAR 0 3
7368: PUSH
7369: LD_VAR 0 5
7373: ST_TO_ADDR
// end ;
7374: LD_VAR 0 3
7378: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7379: LD_EXP 58
7383: PPUSH
7384: CALL_OW 274
7388: PPUSH
7389: LD_INT 1
7391: PPUSH
7392: CALL_OW 275
7396: PUSH
7397: LD_INT 0
7399: GREATER
7400: IFFALSE 7506
7402: GO 7404
7404: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7405: LD_EXP 57
7409: PPUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 72
7424: PPUSH
7425: LD_INT 31
7427: PPUSH
7428: LD_INT 105
7430: PPUSH
7431: LD_INT 51
7433: PPUSH
7434: LD_INT 3
7436: PPUSH
7437: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7441: LD_EXP 57
7445: PPUSH
7446: LD_INT 25
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 72
7460: PPUSH
7461: LD_INT 31
7463: PPUSH
7464: LD_INT 114
7466: PPUSH
7467: LD_INT 58
7469: PPUSH
7470: LD_INT 3
7472: PPUSH
7473: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7477: LD_EXP 57
7481: PPUSH
7482: LD_INT 25
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 72
7496: PPUSH
7497: LD_EXP 58
7501: PPUSH
7502: CALL_OW 180
// end ; end_of_file
7506: END
// export function Lose_Burlak ; begin
7507: LD_INT 0
7509: PPUSH
// YouLost ( Burlak ) ;
7510: LD_STRING Burlak
7512: PPUSH
7513: CALL_OW 104
// end ;
7517: LD_VAR 0 1
7521: RET
// export function Lose_Gaydar ; begin
7522: LD_INT 0
7524: PPUSH
// YouLost ( Gaydar ) ;
7525: LD_STRING Gaydar
7527: PPUSH
7528: CALL_OW 104
// end ;
7532: LD_VAR 0 1
7536: RET
// export function Lose_SelfAttack ; begin
7537: LD_INT 0
7539: PPUSH
// YouLost ( SelfAttack ) ;
7540: LD_STRING SelfAttack
7542: PPUSH
7543: CALL_OW 104
// end ;
7547: LD_VAR 0 1
7551: RET
// export function Lose_Arrest ; begin
7552: LD_INT 0
7554: PPUSH
// YouLost ( Arrest ) ;
7555: LD_STRING Arrest
7557: PPUSH
7558: CALL_OW 104
// end ;
7562: LD_VAR 0 1
7566: RET
// export function Lose_ArabBreakthrough ; begin
7567: LD_INT 0
7569: PPUSH
// YouLost ( ArabBreakthrough ) ;
7570: LD_STRING ArabBreakthrough
7572: PPUSH
7573: CALL_OW 104
// end ;
7577: LD_VAR 0 1
7581: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7582: LD_EXP 7
7586: NOT
7587: PUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 21
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 25
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: NOT
7628: AND
7629: PUSH
7630: LD_INT 22
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 21
7642: PUSH
7643: LD_INT 3
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 30
7652: PUSH
7653: LD_INT 0
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: PPUSH
7665: CALL_OW 69
7669: NOT
7670: AND
7671: IFFALSE 7684
7673: GO 7675
7675: DISABLE
// begin enable ;
7676: ENABLE
// YouLost ( Engineer ) ;
7677: LD_STRING Engineer
7679: PPUSH
7680: CALL_OW 104
// end ; end_of_file
7684: END
// export function FinishMission ; begin
7685: LD_INT 0
7687: PPUSH
// SetRewards ;
7688: CALL 7709 0 0
// SavePlayerCharacters ;
7692: CALL 8134 0 0
// SaveGlobalVariables ;
7696: CALL 8362 0 0
// YouWin ;
7700: CALL_OW 103
// end ;
7704: LD_VAR 0 1
7708: RET
// function SetRewards ; var unitsToReward ; begin
7709: LD_INT 0
7711: PPUSH
7712: PPUSH
// SetAchievements ;
7713: CALL 18509 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7717: LD_INT 22
7719: PUSH
7720: LD_INT 3
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 3
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 69
7745: NOT
7746: IFFALSE 7760
// AddMedal ( Dismantle , 1 ) else
7748: LD_STRING Dismantle
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 101
7758: GO 7771
// AddMedal ( Dismantle , - 1 ) ;
7760: LD_STRING Dismantle
7762: PPUSH
7763: LD_INT 1
7765: NEG
7766: PPUSH
7767: CALL_OW 101
// if killedArabianUnits >= 25 then
7771: LD_EXP 22
7775: PUSH
7776: LD_INT 25
7778: GREATEREQUAL
7779: IFFALSE 7801
// begin AddMedal ( EnemyLosses , 1 ) ;
7781: LD_STRING EnemyLosses
7783: PPUSH
7784: LD_INT 1
7786: PPUSH
7787: CALL_OW 101
// heikeHeavyLosses = true ;
7791: LD_ADDR_EXP 4
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// end else
7799: GO 7812
// AddMedal ( EnemyLosses , - 1 ) ;
7801: LD_STRING EnemyLosses
7803: PPUSH
7804: LD_INT 1
7806: NEG
7807: PPUSH
7808: CALL_OW 101
// if not lostUnits then
7812: LD_EXP 24
7816: NOT
7817: IFFALSE 7831
// AddMedal ( LittleLosses , 1 ) else
7819: LD_STRING LittleLosses
7821: PPUSH
7822: LD_INT 1
7824: PPUSH
7825: CALL_OW 101
7829: GO 7842
// AddMedal ( LittleLosses , - 1 ) ;
7831: LD_STRING LittleLosses
7833: PPUSH
7834: LD_INT 1
7836: NEG
7837: PPUSH
7838: CALL_OW 101
// GiveMedals ( Main ) ;
7842: LD_STRING Main
7844: PPUSH
7845: CALL_OW 102
// unitsToReward = [ ] ;
7849: LD_ADDR_VAR 0 2
7853: PUSH
7854: EMPTY
7855: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7856: LD_EXP 42
7860: PPUSH
7861: CALL_OW 255
7865: PUSH
7866: LD_INT 3
7868: EQUAL
7869: IFFALSE 7887
// unitsToReward = unitsToReward ^ Burlak ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_VAR 0 2
7880: PUSH
7881: LD_EXP 42
7885: ADD
7886: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7887: LD_EXP 43
7891: PPUSH
7892: CALL_OW 255
7896: PUSH
7897: LD_INT 3
7899: EQUAL
7900: IFFALSE 7918
// unitsToReward = unitsToReward ^ Gnyevko ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 2
7911: PUSH
7912: LD_EXP 43
7916: ADD
7917: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7918: LD_EXP 44
7922: PPUSH
7923: CALL_OW 255
7927: PUSH
7928: LD_INT 3
7930: EQUAL
7931: IFFALSE 7949
// unitsToReward = unitsToReward ^ Kirilenkova ;
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_VAR 0 2
7942: PUSH
7943: LD_EXP 44
7947: ADD
7948: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7949: LD_EXP 45
7953: PPUSH
7954: CALL_OW 255
7958: PUSH
7959: LD_INT 3
7961: EQUAL
7962: IFFALSE 7980
// unitsToReward = unitsToReward ^ Kovalyuk ;
7964: LD_ADDR_VAR 0 2
7968: PUSH
7969: LD_VAR 0 2
7973: PUSH
7974: LD_EXP 45
7978: ADD
7979: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
7980: LD_EXP 46
7984: PPUSH
7985: CALL_OW 255
7989: PUSH
7990: LD_INT 3
7992: EQUAL
7993: IFFALSE 8011
// unitsToReward = unitsToReward ^ Belkov ;
7995: LD_ADDR_VAR 0 2
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_EXP 46
8009: ADD
8010: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8011: LD_EXP 47
8015: PPUSH
8016: CALL_OW 255
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8042
// unitsToReward = unitsToReward ^ Belkov2 ;
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 2
8035: PUSH
8036: LD_EXP 47
8040: ADD
8041: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8042: LD_EXP 48
8046: PPUSH
8047: CALL_OW 255
8051: PUSH
8052: LD_INT 3
8054: EQUAL
8055: IFFALSE 8073
// unitsToReward = unitsToReward ^ Scholtze ;
8057: LD_ADDR_VAR 0 2
8061: PUSH
8062: LD_VAR 0 2
8066: PUSH
8067: LD_EXP 48
8071: ADD
8072: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8073: LD_EXP 49
8077: PPUSH
8078: CALL_OW 255
8082: PUSH
8083: LD_INT 3
8085: EQUAL
8086: IFFALSE 8104
// unitsToReward = unitsToReward ^ Kuzmov ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_VAR 0 2
8097: PUSH
8098: LD_EXP 49
8102: ADD
8103: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_EXP 62
8118: ADD
8119: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: CALL_OW 43
// end ;
8129: LD_VAR 0 1
8133: RET
// function SavePlayerCharacters ; var othersYour ; begin
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8138: LD_EXP 42
8142: PPUSH
8143: LD_STRING 04_Burlak
8145: PPUSH
8146: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8150: LD_EXP 43
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_INT 3
8162: EQUAL
8163: IFFALSE 8177
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8165: LD_EXP 43
8169: PPUSH
8170: LD_STRING 04_Gnyevko
8172: PPUSH
8173: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8177: LD_EXP 45
8181: PPUSH
8182: CALL_OW 255
8186: PUSH
8187: LD_INT 3
8189: EQUAL
8190: IFFALSE 8204
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8192: LD_EXP 45
8196: PPUSH
8197: LD_STRING 04_Kovalyuk
8199: PPUSH
8200: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8204: LD_EXP 44
8208: PPUSH
8209: CALL_OW 255
8213: PUSH
8214: LD_INT 3
8216: EQUAL
8217: IFFALSE 8231
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8219: LD_EXP 44
8223: PPUSH
8224: LD_STRING 04_Kirilenkova
8226: PPUSH
8227: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8231: LD_EXP 48
8235: PPUSH
8236: CALL_OW 255
8240: PUSH
8241: LD_INT 3
8243: EQUAL
8244: IFFALSE 8258
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8246: LD_EXP 48
8250: PPUSH
8251: LD_STRING 04_Scholtze
8253: PPUSH
8254: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8258: LD_EXP 46
8262: PPUSH
8263: CALL_OW 255
8267: PUSH
8268: LD_INT 3
8270: EQUAL
8271: IFFALSE 8285
// SaveCharacters ( Belkov , 04_Belkov ) ;
8273: LD_EXP 46
8277: PPUSH
8278: LD_STRING 04_Belkov
8280: PPUSH
8281: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8285: LD_EXP 47
8289: PPUSH
8290: CALL_OW 255
8294: PUSH
8295: LD_INT 3
8297: EQUAL
8298: IFFALSE 8312
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8300: LD_EXP 47
8304: PPUSH
8305: LD_STRING 04_Belkov2
8307: PPUSH
8308: CALL_OW 38
// if IsOK ( Kuzmov ) then
8312: LD_EXP 49
8316: PPUSH
8317: CALL_OW 302
8321: IFFALSE 8335
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8323: LD_EXP 49
8327: PPUSH
8328: LD_STRING 04_Kuzmov
8330: PPUSH
8331: CALL_OW 38
// othersYour = randomsToSave ;
8335: LD_ADDR_VAR 0 2
8339: PUSH
8340: LD_EXP 62
8344: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8345: LD_EXP 62
8349: PPUSH
8350: LD_STRING 04_other_survivors
8352: PPUSH
8353: CALL_OW 38
// end ;
8357: LD_VAR 0 1
8361: RET
// function SaveGlobalVariables ; begin
8362: LD_INT 0
8364: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8365: LD_EXP 4
8369: PPUSH
8370: LD_STRING 04_HeikeHeavyLosses_1
8372: PPUSH
8373: CALL_OW 39
// end ; end_of_file
8377: LD_VAR 0 1
8381: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 255
8391: PUSH
8392: LD_INT 3
8394: EQUAL
8395: PUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 266
8405: PUSH
8406: LD_INT 0
8408: EQUAL
8409: AND
8410: PUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: LD_INT 5
8418: PPUSH
8419: CALL_OW 308
8423: NOT
8424: AND
8425: IFFALSE 8436
// Dial_DepotInWrongPlace ( building ) ;
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL 11025 0 1
// end ;
8436: PPOPN 2
8438: END
// on BuildingComplete ( building ) do var i , cargo ;
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 255
8452: PUSH
8453: LD_INT 3
8455: EQUAL
8456: PUSH
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 266
8466: PUSH
8467: LD_INT 0
8469: EQUAL
8470: AND
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: LD_INT 5
8479: PPUSH
8480: CALL_OW 308
8484: AND
8485: PUSH
8486: LD_EXP 8
8490: NOT
8491: AND
8492: PUSH
8493: LD_EXP 9
8497: NOT
8498: AND
8499: IFFALSE 8525
// begin namedBase = true ;
8501: LD_ADDR_EXP 9
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8509: LD_VAR 0 1
8513: PPUSH
8514: LD_STRING chuikov
8516: PPUSH
8517: CALL_OW 500
// Dial_FinishDepot ;
8521: CALL 11299 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 255
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 266
8548: PUSH
8549: LD_INT 32
8551: EQUAL
8552: AND
8553: IFFALSE 8569
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8555: LD_ADDR_EXP 25
8559: PUSH
8560: LD_EXP 25
8564: PUSH
8565: LD_INT 1
8567: PLUS
8568: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 255
8578: PUSH
8579: LD_INT 6
8581: EQUAL
8582: PUSH
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 266
8592: PUSH
8593: LD_INT 0
8595: EQUAL
8596: AND
8597: IFFALSE 8796
// begin secondBaseDepot = building ;
8599: LD_ADDR_EXP 58
8603: PUSH
8604: LD_VAR 0 1
8608: ST_TO_ADDR
// uc_side = 6 ;
8609: LD_ADDR_OWVAR 20
8613: PUSH
8614: LD_INT 6
8616: ST_TO_ADDR
// uc_nation = nation_russian ;
8617: LD_ADDR_OWVAR 21
8621: PUSH
8622: LD_INT 3
8624: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8625: LD_ADDR_OWVAR 37
8629: PUSH
8630: LD_INT 21
8632: ST_TO_ADDR
// vc_control = control_manual ;
8633: LD_ADDR_OWVAR 38
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// vc_engine = engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8649: LD_ADDR_OWVAR 40
8653: PUSH
8654: LD_INT 51
8656: ST_TO_ADDR
// cargo = CreateVehicle ;
8657: LD_ADDR_VAR 0 3
8661: PUSH
8662: CALL_OW 45
8666: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_INT 3
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_INT 100
8692: PPUSH
8693: CALL_OW 291
// ComGive ( cargo , building ) ;
8697: LD_VAR 0 3
8701: PPUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8721: CALL_OW 44
8725: PPUSH
8726: LD_VAR 0 3
8730: PPUSH
8731: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: DOUBLE
8741: LD_INT 10
8743: DEC
8744: ST_TO_ADDR
8745: LD_EXP 34
8749: PUSH
8750: FOR_TO
8751: IFFALSE 8794
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8753: LD_VAR 0 3
8757: PPUSH
8758: LD_EXP 34
8762: PUSH
8763: LD_VAR 0 2
8767: ARRAY
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_EXP 34
8777: PUSH
8778: LD_VAR 0 2
8782: ARRAY
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PPUSH
8788: CALL_OW 171
8792: GO 8750
8794: POP
8795: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 255
8805: PUSH
8806: LD_INT 6
8808: EQUAL
8809: PUSH
8810: LD_VAR 0 1
8814: PPUSH
8815: CALL_OW 266
8819: PUSH
8820: LD_INT 31
8822: EQUAL
8823: AND
8824: IFFALSE 8869
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8826: LD_EXP 57
8830: PPUSH
8831: LD_INT 25
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 56
8843: PUSH
8844: EMPTY
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 72
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 120
// end ;
8869: PPOPN 3
8871: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 266
8881: PUSH
8882: LD_INT 7
8884: EQUAL
8885: PUSH
8886: LD_EXP 15
8890: NOT
8891: AND
8892: IFFALSE 8898
// Dial_LabUpgraded ;
8894: CALL 11619 0 0
// end ;
8898: PPOPN 1
8900: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8901: LD_VAR 0 1
8905: PUSH
8906: LD_INT 3
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PUSH
8915: LD_INT 2
8917: EQUAL
8918: AND
8919: PUSH
8920: LD_VAR 0 1
8924: PUSH
8925: LD_INT 2
8927: EQUAL
8928: PUSH
8929: LD_VAR 0 2
8933: PUSH
8934: LD_INT 3
8936: EQUAL
8937: AND
8938: OR
8939: IFFALSE 8961
// begin if dial_contactBlock then
8941: LD_EXP 16
8945: IFFALSE 8949
// exit ;
8947: GO 9005
// dial_contactBlock = true ;
8949: LD_ADDR_EXP 16
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// Dial_Contact ;
8957: CALL 13834 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8961: LD_VAR 0 1
8965: PUSH
8966: LD_INT 3
8968: EQUAL
8969: PUSH
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 6
8977: EQUAL
8978: AND
8979: PUSH
8980: LD_VAR 0 1
8984: PUSH
8985: LD_INT 6
8987: EQUAL
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: LD_INT 3
8996: EQUAL
8997: AND
8998: OR
8999: IFFALSE 9005
// Lose_SelfAttack ;
9001: CALL 7537 0 0
// end ;
9005: PPOPN 2
9007: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9008: LD_VAR 0 1
9012: PUSH
9013: LD_EXP 42
9017: EQUAL
9018: IFFALSE 9024
// Lose_Burlak ;
9020: CALL 7507 0 0
// if unit = Gaydar then
9024: LD_VAR 0 1
9028: PUSH
9029: LD_EXP 54
9033: EQUAL
9034: IFFALSE 9040
// Lose_Gaydar ;
9036: CALL 7522 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9040: LD_VAR 0 1
9044: PPUSH
9045: CALL_OW 255
9049: PUSH
9050: LD_INT 3
9052: EQUAL
9053: PUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 247
9063: PUSH
9064: LD_INT 1
9066: EQUAL
9067: AND
9068: IFFALSE 9084
// lostUnits = lostUnits + 1 ;
9070: LD_ADDR_EXP 24
9074: PUSH
9075: LD_EXP 24
9079: PUSH
9080: LD_INT 1
9082: PLUS
9083: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PUSH
9094: LD_INT 2
9096: EQUAL
9097: PUSH
9098: LD_VAR 0 1
9102: PPUSH
9103: CALL_OW 247
9107: PUSH
9108: LD_INT 1
9110: EQUAL
9111: AND
9112: PUSH
9113: LD_EXP 54
9117: PPUSH
9118: CALL_OW 305
9122: NOT
9123: AND
9124: IFFALSE 9140
// killedArabianUnits = killedArabianUnits + 1 ;
9126: LD_ADDR_EXP 22
9130: PUSH
9131: LD_EXP 22
9135: PUSH
9136: LD_INT 1
9138: PLUS
9139: ST_TO_ADDR
// if unit in firstAttackGroup then
9140: LD_VAR 0 1
9144: PUSH
9145: LD_EXP 64
9149: IN
9150: IFFALSE 9168
// firstAttackGroup = firstAttackGroup diff unit ;
9152: LD_ADDR_EXP 64
9156: PUSH
9157: LD_EXP 64
9161: PUSH
9162: LD_VAR 0 1
9166: DIFF
9167: ST_TO_ADDR
// end ;
9168: PPOPN 1
9170: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9171: LD_VAR 0 2
9175: PUSH
9176: LD_INT 6
9178: EQUAL
9179: IFFALSE 9193
// SetSide ( building , 6 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 6
9188: PPUSH
9189: CALL_OW 235
// end ;
9193: PPOPN 3
9195: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 34
9225: PUSH
9226: LD_INT 51
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 21
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PPUSH
9252: CALL_OW 69
9256: PUSH
9257: FOR_IN
9258: IFFALSE 9380
// if GetTaskList ( i ) > 0 then
9260: LD_VAR 0 2
9264: PPUSH
9265: CALL_OW 437
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9378
// for j = 1 to GetTaskList ( i ) do
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: DOUBLE
9281: LD_INT 1
9283: DEC
9284: ST_TO_ADDR
9285: LD_VAR 0 2
9289: PPUSH
9290: CALL_OW 437
9294: PUSH
9295: FOR_TO
9296: IFFALSE 9376
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9298: LD_ADDR_VAR 0 4
9302: PUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: CALL_OW 437
9312: PUSH
9313: LD_VAR 0 3
9317: ARRAY
9318: PUSH
9319: LD_INT 4
9321: ARRAY
9322: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9323: LD_VAR 0 4
9327: PPUSH
9328: CALL_OW 255
9332: PUSH
9333: LD_INT 6
9335: EQUAL
9336: PUSH
9337: LD_VAR 0 2
9341: PPUSH
9342: CALL_OW 437
9346: PUSH
9347: LD_VAR 0 3
9351: ARRAY
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PUSH
9357: LD_STRING <
9359: EQUAL
9360: AND
9361: IFFALSE 9374
// SetTaskList ( i , [ ] ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: EMPTY
9369: PPUSH
9370: CALL_OW 446
// end ;
9374: GO 9295
9376: POP
9377: POP
9378: GO 9257
9380: POP
9381: POP
// end ; end_of_file
9382: PPOPN 8
9384: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9385: LD_INT 0
9387: PPUSH
9388: PPUSH
// if exist_mode then
9389: LD_VAR 0 2
9393: IFFALSE 9418
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_EXP 30
9404: PUSH
9405: LD_VAR 0 1
9409: STR
9410: PPUSH
9411: CALL_OW 34
9415: ST_TO_ADDR
9416: GO 9433
// unit := NewCharacter ( ident ) ;
9418: LD_ADDR_VAR 0 5
9422: PUSH
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 25
9432: ST_TO_ADDR
// if class then
9433: LD_VAR 0 3
9437: IFFALSE 9453
// SetClass ( unit , class ) ;
9439: LD_VAR 0 5
9443: PPUSH
9444: LD_VAR 0 3
9448: PPUSH
9449: CALL_OW 336
// result := unit ;
9453: LD_ADDR_VAR 0 4
9457: PUSH
9458: LD_VAR 0 5
9462: ST_TO_ADDR
// end ;
9463: LD_VAR 0 4
9467: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9468: LD_INT 0
9470: PPUSH
9471: PPUSH
// for unit in units do
9472: LD_ADDR_VAR 0 5
9476: PUSH
9477: LD_VAR 0 1
9481: PUSH
9482: FOR_IN
9483: IFFALSE 9506
// PlaceUnitArea ( unit , area , spawnMode ) ;
9485: LD_VAR 0 5
9489: PPUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: LD_VAR 0 3
9499: PPUSH
9500: CALL_OW 49
9504: GO 9482
9506: POP
9507: POP
// end ;
9508: LD_VAR 0 4
9512: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9513: LD_INT 0
9515: PPUSH
9516: PPUSH
9517: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9518: LD_ADDR_VAR 0 1
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: LD_EXP 42
9532: PUSH
9533: LD_EXP 43
9537: PUSH
9538: LD_EXP 46
9542: PUSH
9543: LD_EXP 47
9547: PUSH
9548: LD_EXP 44
9552: PUSH
9553: LD_EXP 45
9557: PUSH
9558: LD_EXP 48
9562: PUSH
9563: LD_EXP 49
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: DIFF
9578: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9579: LD_ADDR_VAR 0 7
9583: PUSH
9584: LD_VAR 0 1
9588: PUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_VAR 0 1
9596: PPUSH
9597: CALL_OW 12
9601: ARRAY
9602: ST_TO_ADDR
// if radio then
9603: LD_VAR 0 4
9607: IFFALSE 9656
// begin if GetSex ( speaker ) = sex_male then
9609: LD_VAR 0 7
9613: PPUSH
9614: CALL_OW 258
9618: PUSH
9619: LD_INT 1
9621: EQUAL
9622: IFFALSE 9640
// SayRadio ( speaker , dialogMID ) else
9624: LD_VAR 0 7
9628: PPUSH
9629: LD_VAR 0 2
9633: PPUSH
9634: CALL_OW 94
9638: GO 9654
// SayRadio ( speaker , dialogFID ) ;
9640: LD_VAR 0 7
9644: PPUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: CALL_OW 94
// end else
9654: GO 9701
// begin if GetSex ( speaker ) = sex_male then
9656: LD_VAR 0 7
9660: PPUSH
9661: CALL_OW 258
9665: PUSH
9666: LD_INT 1
9668: EQUAL
9669: IFFALSE 9687
// Say ( speaker , dialogMID ) else
9671: LD_VAR 0 7
9675: PPUSH
9676: LD_VAR 0 2
9680: PPUSH
9681: CALL_OW 88
9685: GO 9701
// Say ( speaker , dialogFID ) ;
9687: LD_VAR 0 7
9691: PPUSH
9692: LD_VAR 0 3
9696: PPUSH
9697: CALL_OW 88
// end ; result := speaker ;
9701: LD_ADDR_VAR 0 5
9705: PUSH
9706: LD_VAR 0 7
9710: ST_TO_ADDR
// end ;
9711: LD_VAR 0 5
9715: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9716: LD_INT 0
9718: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 255
9728: PUSH
9729: LD_VAR 0 3
9733: EQUAL
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL_OW 302
9744: AND
9745: IFFALSE 9767
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_EXP 29
9756: PUSH
9757: LD_VAR 0 2
9761: STR
9762: PPUSH
9763: CALL_OW 38
// end ;
9767: LD_VAR 0 4
9771: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9772: LD_INT 0
9774: PPUSH
9775: PPUSH
9776: PPUSH
// resultCharactersToSave = [ ] ;
9777: LD_ADDR_VAR 0 6
9781: PUSH
9782: EMPTY
9783: ST_TO_ADDR
// for unit in characters do
9784: LD_ADDR_VAR 0 5
9788: PUSH
9789: LD_VAR 0 1
9793: PUSH
9794: FOR_IN
9795: IFFALSE 9843
// if GetSide ( unit ) = side and IsOK ( unit ) then
9797: LD_VAR 0 5
9801: PPUSH
9802: CALL_OW 255
9806: PUSH
9807: LD_VAR 0 3
9811: EQUAL
9812: PUSH
9813: LD_VAR 0 5
9817: PPUSH
9818: CALL_OW 302
9822: AND
9823: IFFALSE 9841
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9825: LD_ADDR_VAR 0 6
9829: PUSH
9830: LD_VAR 0 6
9834: PUSH
9835: LD_VAR 0 5
9839: ADD
9840: ST_TO_ADDR
9841: GO 9794
9843: POP
9844: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9845: LD_VAR 0 6
9849: PPUSH
9850: LD_EXP 29
9854: PUSH
9855: LD_VAR 0 2
9859: STR
9860: PPUSH
9861: CALL_OW 38
// end ;
9865: LD_VAR 0 4
9869: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9870: LD_INT 0
9872: PPUSH
9873: PPUSH
9874: PPUSH
9875: PPUSH
9876: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9877: LD_ADDR_VAR 0 3
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 21
9894: PUSH
9895: LD_INT 1
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 50
9904: PUSH
9905: EMPTY
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: PPUSH
9913: CALL_OW 69
9917: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9918: LD_ADDR_VAR 0 3
9922: PUSH
9923: LD_VAR 0 3
9927: PUSH
9928: LD_EXP 42
9932: DIFF
9933: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9934: LD_ADDR_VAR 0 3
9938: PUSH
9939: LD_VAR 0 3
9943: PUSH
9944: LD_EXP 52
9948: DIFF
9949: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_STRING text
9957: PPUSH
9958: LD_INT 8
9960: PPUSH
9961: LD_INT 8
9963: PPUSH
9964: LD_INT -5
9966: PUSH
9967: LD_EXP 42
9971: PUSH
9972: LD_INT -6
9974: PUSH
9975: LD_INT -2
9977: PUSH
9978: LD_INT -3
9980: PUSH
9981: LD_INT -5
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_VAR 0 3
9996: ADD
9997: PUSH
9998: LD_INT -6
10000: PUSH
10001: LD_INT -4
10003: PUSH
10004: LD_EXP 52
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: ADD
10014: PPUSH
10015: LD_INT 1
10017: PUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 4
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 42
10044: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10045: LD_VAR 0 3
10049: PPUSH
10050: LD_INT 6
10052: PPUSH
10053: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10057: LD_EXP 52
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10069: LD_VAR 0 4
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: CALL_OW 235
// burlakTeam = selectedPeople ;
10081: LD_ADDR_EXP 55
10085: PUSH
10086: LD_VAR 0 4
10090: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10091: LD_ADDR_EXP 56
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 6
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10125: LD_ADDR_EXP 56
10129: PUSH
10130: LD_EXP 56
10134: PUSH
10135: LD_EXP 49
10139: DIFF
10140: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10141: LD_ADDR_VAR 0 2
10145: PUSH
10146: LD_INT 22
10148: PUSH
10149: LD_INT 6
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 21
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: CALL_OW 69
10174: PUSH
10175: FOR_IN
10176: IFFALSE 10200
// if IsInUnit ( i ) then
10178: LD_VAR 0 2
10182: PPUSH
10183: CALL_OW 310
10187: IFFALSE 10198
// ComExitVehicle ( i ) ;
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 121
10198: GO 10175
10200: POP
10201: POP
// if not Gnyevko in selectedPeople then
10202: LD_EXP 43
10206: PUSH
10207: LD_VAR 0 4
10211: IN
10212: NOT
10213: IFFALSE 10230
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10215: LD_EXP 43
10219: PPUSH
10220: LD_STRING Gnyevko
10222: PPUSH
10223: LD_INT 6
10225: PPUSH
10226: CALL 9716 0 3
// if not Kovalyuk in selectedPeople then
10230: LD_EXP 45
10234: PUSH
10235: LD_VAR 0 4
10239: IN
10240: NOT
10241: IFFALSE 10258
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10243: LD_EXP 45
10247: PPUSH
10248: LD_STRING Kovalyuk
10250: PPUSH
10251: LD_INT 6
10253: PPUSH
10254: CALL 9716 0 3
// if not Kirilenkova in selectedPeople then
10258: LD_EXP 44
10262: PUSH
10263: LD_VAR 0 4
10267: IN
10268: NOT
10269: IFFALSE 10286
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10271: LD_EXP 44
10275: PPUSH
10276: LD_STRING Kirilenkova
10278: PPUSH
10279: LD_INT 6
10281: PPUSH
10282: CALL 9716 0 3
// if not Scholtze in selectedPeople then
10286: LD_EXP 48
10290: PUSH
10291: LD_VAR 0 4
10295: IN
10296: NOT
10297: IFFALSE 10314
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10299: LD_EXP 48
10303: PPUSH
10304: LD_STRING Scholtze
10306: PPUSH
10307: LD_INT 6
10309: PPUSH
10310: CALL 9716 0 3
// if not Belkov in selectedPeople then
10314: LD_EXP 46
10318: PUSH
10319: LD_VAR 0 4
10323: IN
10324: NOT
10325: IFFALSE 10342
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10327: LD_EXP 46
10331: PPUSH
10332: LD_STRING Belkov
10334: PPUSH
10335: LD_INT 6
10337: PPUSH
10338: CALL 9716 0 3
// if not Belkov2 in selectedPeople then
10342: LD_EXP 47
10346: PUSH
10347: LD_VAR 0 4
10351: IN
10352: NOT
10353: IFFALSE 10370
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10355: LD_EXP 47
10359: PPUSH
10360: LD_STRING Belkov2
10362: PPUSH
10363: LD_INT 6
10365: PPUSH
10366: CALL 9716 0 3
// others = popovTeam diff Popov ;
10370: LD_ADDR_VAR 0 5
10374: PUSH
10375: LD_EXP 56
10379: PUSH
10380: LD_EXP 52
10384: DIFF
10385: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10386: LD_VAR 0 5
10390: PPUSH
10391: LD_STRING other_survivors_with_popov
10393: PPUSH
10394: LD_INT 6
10396: PPUSH
10397: CALL 9772 0 3
// end ; end_of_file
10401: LD_VAR 0 1
10405: RET
// export function MissionIntro ; var i , unit ; begin
10406: LD_INT 0
10408: PPUSH
10409: PPUSH
10410: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10411: LD_EXP 42
10415: PPUSH
10416: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10420: LD_EXP 59
10424: PPUSH
10425: LD_STRING D1-RSol1-1
10427: PPUSH
10428: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10432: LD_EXP 53
10436: PPUSH
10437: LD_STRING D1-Pla-1
10439: PPUSH
10440: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10444: LD_EXP 42
10448: PPUSH
10449: LD_STRING D1-Bur-1
10451: PPUSH
10452: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-2
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-2
10475: PPUSH
10476: CALL_OW 88
// SelectCharacters ;
10480: CALL 9870 0 0
// InGameOff ;
10484: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10488: LD_STRING M1
10490: PPUSH
10491: CALL_OW 337
// SaveForQuickRestart ;
10495: CALL_OW 22
// for unit in popovTeam do
10499: LD_ADDR_VAR 0 3
10503: PUSH
10504: LD_EXP 56
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10582
// begin for i := 3 to russianCargoPath1 do
10512: LD_ADDR_VAR 0 2
10516: PUSH
10517: DOUBLE
10518: LD_INT 3
10520: DEC
10521: ST_TO_ADDR
10522: LD_EXP 34
10526: PUSH
10527: FOR_TO
10528: IFFALSE 10571
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_EXP 34
10539: PUSH
10540: LD_VAR 0 2
10544: ARRAY
10545: PUSH
10546: LD_INT 1
10548: ARRAY
10549: PPUSH
10550: LD_EXP 34
10554: PUSH
10555: LD_VAR 0 2
10559: ARRAY
10560: PUSH
10561: LD_INT 2
10563: ARRAY
10564: PPUSH
10565: CALL_OW 171
10569: GO 10527
10571: POP
10572: POP
// wait ( 0 0$01 ) ;
10573: LD_INT 35
10575: PPUSH
10576: CALL_OW 67
// end ;
10580: GO 10509
10582: POP
10583: POP
// end ;
10584: LD_VAR 0 1
10588: RET
// every 0 0$1 do var unit , driver ;
10589: GO 10591
10591: DISABLE
10592: LD_INT 0
10594: PPUSH
10595: PPUSH
// begin enable ;
10596: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10597: LD_INT 4
10599: PPUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 6
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 70
10614: NOT
10615: PUSH
10616: LD_INT 4
10618: PPUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: LD_INT 21
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 2
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 70
10665: NOT
10666: AND
10667: IFFALSE 10671
// exit ;
10669: GO 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10671: LD_ADDR_VAR 0 1
10675: PUSH
10676: LD_INT 4
10678: PPUSH
10679: LD_INT 22
10681: PUSH
10682: LD_INT 6
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PPUSH
10689: CALL_OW 70
10693: PUSH
10694: FOR_IN
10695: IFFALSE 10750
// begin RemoveUnit ( unit ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10706: LD_VAR 0 1
10710: PUSH
10711: LD_EXP 56
10715: IN
10716: NOT
10717: PUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 264
10727: PUSH
10728: LD_INT 51
10730: EQUAL
10731: AND
10732: IFFALSE 10748
// evacuatedCargos = evacuatedCargos + 1 ;
10734: LD_ADDR_EXP 10
10738: PUSH
10739: LD_EXP 10
10743: PUSH
10744: LD_INT 1
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: GO 10694
10750: POP
10751: POP
// if canExitMap then
10752: LD_EXP 6
10756: IFFALSE 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10758: LD_ADDR_VAR 0 1
10762: PUSH
10763: LD_INT 4
10765: PPUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: LD_INT 21
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 21
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 70
10812: PUSH
10813: FOR_IN
10814: IFFALSE 11020
// begin if GetType ( unit ) = unit_vehicle then
10816: LD_VAR 0 1
10820: PPUSH
10821: CALL_OW 247
10825: PUSH
10826: LD_INT 2
10828: EQUAL
10829: IFFALSE 10929
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 313
10840: PUSH
10841: LD_INT 1
10843: ARRAY
10844: PUSH
10845: LD_EXP 42
10849: PUSH
10850: LD_EXP 43
10854: PUSH
10855: LD_EXP 44
10859: PUSH
10860: LD_EXP 45
10864: PUSH
10865: LD_EXP 46
10869: PUSH
10870: LD_EXP 47
10874: PUSH
10875: LD_EXP 48
10879: PUSH
10880: LD_EXP 49
10884: PUSH
10885: LD_EXP 54
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: IN
10901: NOT
10902: IFFALSE 10929
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10904: LD_ADDR_EXP 62
10908: PUSH
10909: LD_EXP 62
10913: PUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 313
10923: PUSH
10924: LD_INT 1
10926: ARRAY
10927: ADD
10928: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10929: LD_VAR 0 1
10933: PUSH
10934: LD_EXP 42
10938: PUSH
10939: LD_EXP 43
10943: PUSH
10944: LD_EXP 44
10948: PUSH
10949: LD_EXP 45
10953: PUSH
10954: LD_EXP 46
10958: PUSH
10959: LD_EXP 47
10963: PUSH
10964: LD_EXP 48
10968: PUSH
10969: LD_EXP 49
10973: PUSH
10974: LD_EXP 54
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: IN
10990: NOT
10991: IFFALSE 11009
// randomsToSave = randomsToSave ^ unit ;
10993: LD_ADDR_EXP 62
10997: PUSH
10998: LD_EXP 62
11002: PUSH
11003: LD_VAR 0 1
11007: ADD
11008: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 64
// end ;
11018: GO 10813
11020: POP
11021: POP
// end ;
11022: PPOPN 2
11024: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11025: LD_INT 0
11027: PPUSH
11028: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11029: LD_INT 22
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: PPUSH
11058: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11062: LD_VAR 0 1
11066: PPUSH
11067: CALL_OW 87
// InGameOn ;
11071: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11075: LD_EXP 53
11079: PPUSH
11080: LD_STRING D2a-Pla-1
11082: PPUSH
11083: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 21
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 25
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: PPUSH
11127: CALL_OW 69
11131: PUSH
11132: FOR_IN
11133: IFFALSE 11171
// if GetDistUnits ( building , unit ) < 10 then
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: CALL_OW 296
11149: PUSH
11150: LD_INT 10
11152: LESS
11153: IFFALSE 11169
// ComDismantle ( unit , building ) ;
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 167
11169: GO 11132
11171: POP
11172: POP
// repeat wait ( 0 0$1 ) ;
11173: LD_INT 35
11175: PPUSH
11176: CALL_OW 67
// until not IsPlaced ( building ) ;
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 305
11189: NOT
11190: IFFALSE 11173
// InGameOff ;
11192: CALL_OW 9
// end ;
11196: LD_VAR 0 2
11200: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11201: LD_EXP 49
11205: PPUSH
11206: CALL_OW 255
11210: PUSH
11211: LD_INT 6
11213: EQUAL
11214: IFFALSE 11296
11216: GO 11218
11218: DISABLE
11219: LD_INT 0
11221: PPUSH
// begin enable ;
11222: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: LD_INT 22
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11294
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11260: LD_VAR 0 1
11264: PPUSH
11265: LD_EXP 49
11269: PPUSH
11270: CALL_OW 296
11274: PUSH
11275: LD_INT 9
11277: LESS
11278: IFFALSE 11292
// SetSide ( Kuzmov , 3 ) ;
11280: LD_EXP 49
11284: PPUSH
11285: LD_INT 3
11287: PPUSH
11288: CALL_OW 235
11292: GO 11257
11294: POP
11295: POP
// end ;
11296: PPOPN 1
11298: END
// export function Dial_FinishDepot ; var i ; begin
11299: LD_INT 0
11301: PPUSH
11302: PPUSH
// startEvacuation = true ;
11303: LD_ADDR_EXP 8
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11311: LD_STRING MOutBuild
11313: PPUSH
11314: CALL_OW 337
// uc_side = 6 ;
11318: LD_ADDR_OWVAR 20
11322: PUSH
11323: LD_INT 6
11325: ST_TO_ADDR
// uc_nation = 3 ;
11326: LD_ADDR_OWVAR 21
11330: PUSH
11331: LD_INT 3
11333: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11334: LD_ADDR_OWVAR 37
11338: PUSH
11339: LD_INT 21
11341: ST_TO_ADDR
// vc_control = control_manual ;
11342: LD_ADDR_OWVAR 38
11346: PUSH
11347: LD_INT 1
11349: ST_TO_ADDR
// vc_engine = engine_combustion ;
11350: LD_ADDR_OWVAR 39
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11358: LD_ADDR_OWVAR 40
11362: PUSH
11363: LD_INT 51
11365: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11366: LD_ADDR_EXP 60
11370: PUSH
11371: CALL_OW 45
11375: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11376: LD_EXP 60
11380: PPUSH
11381: LD_INT 3
11383: PPUSH
11384: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11388: LD_EXP 60
11392: PPUSH
11393: LD_INT 3
11395: PPUSH
11396: LD_INT 0
11398: PPUSH
11399: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11403: LD_INT 1
11405: PPUSH
11406: LD_INT 3
11408: PPUSH
11409: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11413: CALL_OW 44
11417: PPUSH
11418: LD_EXP 60
11422: PPUSH
11423: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11427: LD_EXP 60
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_INT 100
11437: PPUSH
11438: CALL_OW 291
// for i := 1 to 19 do
11442: LD_ADDR_VAR 0 2
11446: PUSH
11447: DOUBLE
11448: LD_INT 1
11450: DEC
11451: ST_TO_ADDR
11452: LD_INT 19
11454: PUSH
11455: FOR_TO
11456: IFFALSE 11499
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11458: LD_EXP 60
11462: PPUSH
11463: LD_EXP 34
11467: PUSH
11468: LD_VAR 0 2
11472: ARRAY
11473: PUSH
11474: LD_INT 1
11476: ARRAY
11477: PPUSH
11478: LD_EXP 34
11482: PUSH
11483: LD_VAR 0 2
11487: ARRAY
11488: PUSH
11489: LD_INT 2
11491: ARRAY
11492: PPUSH
11493: CALL_OW 171
11497: GO 11455
11499: POP
11500: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11501: LD_EXP 60
11505: PPUSH
11506: LD_INT 105
11508: PPUSH
11509: LD_INT 123
11511: PPUSH
11512: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11516: LD_EXP 60
11520: PPUSH
11521: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: DOUBLE
11531: LD_INT 21
11533: DEC
11534: ST_TO_ADDR
11535: LD_EXP 34
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11584
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11543: LD_EXP 60
11547: PPUSH
11548: LD_EXP 34
11552: PUSH
11553: LD_VAR 0 2
11557: ARRAY
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PPUSH
11563: LD_EXP 34
11567: PUSH
11568: LD_VAR 0 2
11572: ARRAY
11573: PUSH
11574: LD_INT 2
11576: ARRAY
11577: PPUSH
11578: CALL_OW 171
11582: GO 11540
11584: POP
11585: POP
// Say ( Burlak , D2-Bur-1 ) ;
11586: LD_EXP 42
11590: PPUSH
11591: LD_STRING D2-Bur-1
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11598: LD_EXP 53
11602: PPUSH
11603: LD_STRING D2-Pla-1
11605: PPUSH
11606: CALL_OW 94
// PrepareSecondBaseTeam ;
11610: CALL 3290 0 0
// end ;
11614: LD_VAR 0 1
11618: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
// dial_labUpgradedBlock = true ;
11623: LD_ADDR_EXP 15
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11631: LD_ADDR_VAR 0 2
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 21
11648: PUSH
11649: LD_INT 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 26
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 25
11668: PUSH
11669: LD_INT 4
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PUSH
11687: LD_EXP 42
11691: PUSH
11692: LD_EXP 43
11696: PUSH
11697: LD_EXP 44
11701: PUSH
11702: LD_EXP 45
11706: PUSH
11707: LD_EXP 46
11711: PUSH
11712: LD_EXP 47
11716: PUSH
11717: LD_EXP 48
11721: PUSH
11722: LD_EXP 49
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: DIFF
11737: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11738: LD_EXP 48
11742: PPUSH
11743: CALL_OW 302
11747: PUSH
11748: LD_EXP 48
11752: PPUSH
11753: CALL_OW 255
11757: PUSH
11758: LD_INT 3
11760: EQUAL
11761: AND
11762: IFFALSE 11790
// begin Say ( Scholtze , D5-Sch-1 ) ;
11764: LD_EXP 48
11768: PPUSH
11769: LD_STRING D5-Sch-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11776: LD_EXP 42
11780: PPUSH
11781: LD_STRING D5-Bur-1
11783: PPUSH
11784: CALL_OW 88
// end else
11788: GO 11925
// if randomMaleSci then
11790: LD_VAR 0 2
11794: IFFALSE 11826
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11796: LD_VAR 0 2
11800: PUSH
11801: LD_INT 1
11803: ARRAY
11804: PPUSH
11805: LD_STRING D5-RSci1-1
11807: PPUSH
11808: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11812: LD_EXP 42
11816: PPUSH
11817: LD_STRING D5-Bur-1
11819: PPUSH
11820: CALL_OW 88
// end else
11824: GO 11925
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11826: LD_ADDR_VAR 0 2
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_INT 3
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 21
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 26
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 25
11863: PUSH
11864: LD_INT 4
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PUSH
11882: LD_EXP 42
11886: PUSH
11887: EMPTY
11888: LIST
11889: DIFF
11890: ST_TO_ADDR
// if randomMaleSci then
11891: LD_VAR 0 2
11895: IFFALSE 11925
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11897: LD_VAR 0 2
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_STRING D5-RSci1-1
11908: PPUSH
11909: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11913: LD_EXP 42
11917: PPUSH
11918: LD_STRING D5-Bur-1
11920: PPUSH
11921: CALL_OW 88
// end ; end ; end ;
11925: LD_VAR 0 1
11929: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11930: LD_EXP 60
11934: PPUSH
11935: LD_INT 105
11937: PPUSH
11938: LD_INT 123
11940: PPUSH
11941: CALL_OW 297
11945: PUSH
11946: LD_INT 12
11948: LESS
11949: IFFALSE 11975
11951: GO 11953
11953: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11954: LD_EXP 60
11958: PPUSH
11959: CALL_OW 313
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PPUSH
11968: LD_STRING D2a-RSol1-1
11970: PPUSH
11971: CALL_OW 88
11975: END
// every 0 0$15 trigger startEvacuation do
11976: LD_EXP 8
11980: IFFALSE 11990
11982: GO 11984
11984: DISABLE
// begin enable ;
11985: ENABLE
// CreateEvacuateUnit ;
11986: CALL 2520 0 0
// end ;
11990: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
11991: LD_EXP 10
11995: PUSH
11996: LD_INT 3
11998: GREATEREQUAL
11999: IFFALSE 12098
12001: GO 12003
12003: DISABLE
// begin if IsOk ( Kuzmov ) then
12004: LD_EXP 49
12008: PPUSH
12009: CALL_OW 302
12013: IFFALSE 12083
// begin DialogueOn ;
12015: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12019: LD_EXP 49
12023: PPUSH
12024: LD_STRING D2b-Kuz-1
12026: PPUSH
12027: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12031: LD_EXP 42
12035: PPUSH
12036: LD_STRING D2b-Bur-1
12038: PPUSH
12039: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-2
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-2
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-3
12074: PPUSH
12075: CALL_OW 88
// DialogueOff ;
12079: CALL_OW 7
// end ; Query ( Q1 ) ;
12083: LD_STRING Q1
12085: PPUSH
12086: CALL_OW 97
// canStealCargo = true ;
12090: LD_ADDR_EXP 11
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// end ;
12098: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12099: LD_EXP 11
12103: IFFALSE 12401
12105: GO 12107
12107: DISABLE
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
// begin enable ;
12112: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 34
12140: PUSH
12141: LD_INT 51
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12399
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_INT 22
12168: PUSH
12169: LD_INT 3
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 50
12188: PUSH
12189: EMPTY
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 69
12201: PUSH
12202: FOR_IN
12203: IFFALSE 12395
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12205: LD_VAR 0 2
12209: PPUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 296
12219: PUSH
12220: LD_INT 8
12222: LESS
12223: PUSH
12224: LD_VAR 0 2
12228: PUSH
12229: LD_EXP 13
12233: IN
12234: NOT
12235: AND
12236: PUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 289
12249: PUSH
12250: LD_INT 0
12252: GREATER
12253: AND
12254: IFFALSE 12393
// begin stealCargos = stealCargos ^ cargo ;
12256: LD_ADDR_EXP 13
12260: PUSH
12261: LD_EXP 13
12265: PUSH
12266: LD_VAR 0 2
12270: ADD
12271: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12272: LD_STRING QQrSteal
12274: PPUSH
12275: CALL_OW 97
12279: PUSH
12280: LD_INT 1
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12361
12288: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12289: LD_ADDR_EXP 12
12293: PUSH
12294: LD_EXP 12
12298: PUSH
12299: LD_INT 1
12301: PLUS
12302: ST_TO_ADDR
// DialogueOn ;
12303: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12307: LD_EXP 42
12311: PPUSH
12312: LD_STRING DQrSteal#1-Bur-1
12314: PPUSH
12315: CALL_OW 88
// DialogueOff ;
12319: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12323: LD_VAR 0 2
12327: PPUSH
12328: LD_INT 14
12330: PPUSH
12331: CALL_OW 113
// AddComUnload ( cargo ) ;
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12344: LD_VAR 0 2
12348: PPUSH
12349: LD_INT 92
12351: PPUSH
12352: LD_INT 177
12354: PPUSH
12355: CALL_OW 171
// end ; 2 :
12359: GO 12393
12361: LD_INT 2
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12369
12367: GO 12392
12369: POP
// begin DialogueOn ;
12370: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12374: LD_EXP 42
12378: PPUSH
12379: LD_STRING DQrSteal#2-Bur-1
12381: PPUSH
12382: CALL_OW 88
// DialogueOff ;
12386: CALL_OW 7
// end ; end ;
12390: GO 12393
12392: POP
// end ;
12393: GO 12202
12395: POP
12396: POP
12397: GO 12158
12399: POP
12400: POP
// end ;
12401: PPOPN 2
12403: END
// every 0 0$12 trigger stealWarmCount = 3 do
12404: LD_EXP 12
12408: PUSH
12409: LD_INT 3
12411: EQUAL
12412: IFFALSE 12484
12414: GO 12416
12416: DISABLE
// begin DialogueOn ;
12417: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12421: LD_EXP 53
12425: PPUSH
12426: LD_STRING D3A-Pla-1
12428: PPUSH
12429: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12433: LD_EXP 42
12437: PPUSH
12438: LD_STRING D3A-Bur-1
12440: PPUSH
12441: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-2
12452: PPUSH
12453: CALL_OW 94
// if IsOK ( Kuzmov ) then
12457: LD_EXP 49
12461: PPUSH
12462: CALL_OW 302
12466: IFFALSE 12480
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12468: LD_EXP 49
12472: PPUSH
12473: LD_STRING D3A-Kuz-2
12475: PPUSH
12476: CALL_OW 88
// DialogueOff ;
12480: CALL_OW 7
// end ;
12484: END
// every 0 0$10 trigger stealWarmCount = 6 do
12485: LD_EXP 12
12489: PUSH
12490: LD_INT 6
12492: EQUAL
12493: IFFALSE 12542
12495: GO 12497
12497: DISABLE
// begin DialogueOn ;
12498: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12502: LD_EXP 53
12506: PPUSH
12507: LD_STRING D3B-Pla-1
12509: PPUSH
12510: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12514: LD_EXP 42
12518: PPUSH
12519: LD_STRING D3B-Bur-1
12521: PPUSH
12522: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-2
12533: PPUSH
12534: CALL_OW 94
// DialogueOff ;
12538: CALL_OW 7
// end ;
12542: END
// every 0 0$10 trigger stealWarmCount = 7 do
12543: LD_EXP 12
12547: PUSH
12548: LD_INT 7
12550: EQUAL
12551: IFFALSE 12635
12553: GO 12555
12555: DISABLE
// begin DialogueOn ;
12556: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12560: LD_EXP 53
12564: PPUSH
12565: LD_STRING D3C-Pla-1
12567: PPUSH
12568: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12572: LD_EXP 42
12576: PPUSH
12577: LD_STRING D3C-Bur-1
12579: PPUSH
12580: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-2
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-2
12603: PPUSH
12604: CALL_OW 88
// if IsOK ( Kuzmov ) then
12608: LD_EXP 49
12612: PPUSH
12613: CALL_OW 302
12617: IFFALSE 12631
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12619: LD_EXP 49
12623: PPUSH
12624: LD_STRING D3C-Kuz-2
12626: PPUSH
12627: CALL_OW 88
// DialogueOff ;
12631: CALL_OW 7
// end ;
12635: END
// every 0 0$10 trigger stealWarmCount = 8 do
12636: LD_EXP 12
12640: PUSH
12641: LD_INT 8
12643: EQUAL
12644: IFFALSE 12836
12646: GO 12648
12648: DISABLE
// begin canStealCargo = false ;
12649: LD_ADDR_EXP 11
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// DialogueOn ;
12657: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12661: LD_EXP 53
12665: PPUSH
12666: LD_STRING D3D-Pla-1
12668: PPUSH
12669: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12673: LD_EXP 42
12677: PPUSH
12678: LD_STRING D3D-Bur-1
12680: PPUSH
12681: CALL_OW 88
// if kurinOpinion = 0 then
12685: LD_EXP 2
12689: PUSH
12690: LD_INT 0
12692: EQUAL
12693: IFFALSE 12713
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12695: LD_EXP 53
12699: PPUSH
12700: LD_STRING D3E-Pla-1
12702: PPUSH
12703: CALL_OW 94
// Lose_Arrest ;
12707: CALL 7552 0 0
// exit ;
12711: GO 12836
// end ; if meetBelkovBrother = 1 then
12713: LD_EXP 3
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: IFFALSE 12741
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12723: LD_EXP 53
12727: PPUSH
12728: LD_STRING D3E-Pla-1a
12730: PPUSH
12731: CALL_OW 94
// Lose_Arrest ;
12735: CALL 7552 0 0
// exit ;
12739: GO 12836
// end ; if platonovOpinion = 0 then
12741: LD_EXP 1
12745: PUSH
12746: LD_INT 0
12748: EQUAL
12749: IFFALSE 12769
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12751: LD_EXP 53
12755: PPUSH
12756: LD_STRING D3E-Pla-1b
12758: PPUSH
12759: CALL_OW 94
// Lose_Arrest ;
12763: CALL 7552 0 0
// exit ;
12767: GO 12836
// end ; if platonovOpinion = 1 then
12769: LD_EXP 1
12773: PUSH
12774: LD_INT 1
12776: EQUAL
12777: IFFALSE 12797
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12779: LD_EXP 53
12783: PPUSH
12784: LD_STRING D3E-Pla-1c
12786: PPUSH
12787: CALL_OW 94
// Lose_Arrest ;
12791: CALL 7552 0 0
// exit ;
12795: GO 12836
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12797: LD_EXP 53
12801: PPUSH
12802: LD_STRING D3D-Pla-2
12804: PPUSH
12805: CALL_OW 94
// if IsOK ( Kuzmov ) then
12809: LD_EXP 49
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12832
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12820: LD_EXP 49
12824: PPUSH
12825: LD_STRING D3D-Kuz-2
12827: PPUSH
12828: CALL_OW 88
// DialogueOff ;
12832: CALL_OW 7
// end ;
12836: END
// every 0 0$20 do var allyUntis ;
12837: GO 12839
12839: DISABLE
12840: LD_INT 0
12842: PPUSH
// begin enable ;
12843: ENABLE
// wait ( 0 0$10 ) ;
12844: LD_INT 350
12846: PPUSH
12847: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 6
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 60
12871: PUSH
12872: EMPTY
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: PUSH
12888: LD_EXP 56
12892: DIFF
12893: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_VAR 0 1
12903: PUSH
12904: LD_EXP 54
12908: DIFF
12909: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_VAR 0 1
12919: PUSH
12920: LD_EXP 49
12924: DIFF
12925: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_VAR 0 1
12935: PUSH
12936: LD_EXP 57
12940: DIFF
12941: ST_TO_ADDR
// if not allyUntis then
12942: LD_VAR 0 1
12946: NOT
12947: IFFALSE 12951
// exit ;
12949: GO 12975
// ComUnload ( allyUntis ) ;
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 92
12967: PPUSH
12968: LD_INT 176
12970: PPUSH
12971: CALL_OW 171
// end ;
12975: PPOPN 1
12977: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
12978: LD_EXP 10
12982: PUSH
12983: LD_EXP 14
12987: GREATEREQUAL
12988: IFFALSE 13001
12990: GO 12992
12992: DISABLE
// begin startEvacuation = false ;
12993: LD_ADDR_EXP 8
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// end ;
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: PUSH
13013: LD_INT 22
13015: PUSH
13016: LD_INT 6
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 2
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 69
13059: PUSH
13060: LD_EXP 57
13064: DIFF
13065: NOT
13066: AND
13067: IFFALSE 13662
13069: GO 13071
13071: DISABLE
// begin wait ( 1 1$00 ) ;
13072: LD_INT 2100
13074: PPUSH
13075: CALL_OW 67
// DialogueOn ;
13079: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13083: LD_EXP 53
13087: PPUSH
13088: LD_STRING D4-Pla-1
13090: PPUSH
13091: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13095: LD_EXP 42
13099: PPUSH
13100: LD_STRING D4-Bur-1
13102: PPUSH
13103: CALL_OW 88
// DialogueOff ;
13107: CALL_OW 7
// wait ( 0 0$2 ) ;
13111: LD_INT 70
13113: PPUSH
13114: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13118: LD_EXP 49
13122: PPUSH
13123: CALL_OW 302
13127: PUSH
13128: LD_EXP 49
13132: PPUSH
13133: CALL_OW 255
13137: PUSH
13138: LD_INT 3
13140: EQUAL
13141: AND
13142: IFFALSE 13424
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13144: LD_EXP 49
13148: PPUSH
13149: LD_STRING D4-Kuz-1
13151: PPUSH
13152: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13156: LD_EXP 46
13160: PPUSH
13161: CALL_OW 302
13165: PUSH
13166: LD_EXP 46
13170: PPUSH
13171: CALL_OW 255
13175: PUSH
13176: LD_INT 3
13178: EQUAL
13179: AND
13180: IFFALSE 13196
// Say ( Belkov , D4-Bel-1 ) else
13182: LD_EXP 46
13186: PPUSH
13187: LD_STRING D4-Bel-1
13189: PPUSH
13190: CALL_OW 88
13194: GO 13234
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13196: LD_EXP 47
13200: PPUSH
13201: CALL_OW 302
13205: PUSH
13206: LD_EXP 47
13210: PPUSH
13211: CALL_OW 255
13215: PUSH
13216: LD_INT 3
13218: EQUAL
13219: AND
13220: IFFALSE 13234
// Say ( Belkov2 , D4-Bel-1 ) ;
13222: LD_EXP 47
13226: PPUSH
13227: LD_STRING D4-Bel-1
13229: PPUSH
13230: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13234: LD_EXP 42
13238: PPUSH
13239: LD_STRING D4-Bur-2
13241: PPUSH
13242: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13246: LD_EXP 43
13250: PPUSH
13251: CALL_OW 302
13255: PUSH
13256: LD_EXP 43
13260: PPUSH
13261: CALL_OW 255
13265: PUSH
13266: LD_INT 3
13268: EQUAL
13269: AND
13270: IFFALSE 13296
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13272: LD_EXP 43
13276: PPUSH
13277: LD_STRING D4-Gny-2
13279: PPUSH
13280: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13284: LD_EXP 42
13288: PPUSH
13289: LD_STRING D4-Bur-3
13291: PPUSH
13292: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13296: LD_EXP 42
13300: PPUSH
13301: LD_STRING D4-Bur-3a
13303: PPUSH
13304: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13308: LD_EXP 46
13312: PPUSH
13313: CALL_OW 302
13317: PUSH
13318: LD_EXP 46
13322: PPUSH
13323: CALL_OW 255
13327: PUSH
13328: LD_INT 3
13330: EQUAL
13331: AND
13332: IFFALSE 13348
// Say ( Belkov , D4-Bel-3 ) else
13334: LD_EXP 46
13338: PPUSH
13339: LD_STRING D4-Bel-3
13341: PPUSH
13342: CALL_OW 88
13346: GO 13386
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13348: LD_EXP 47
13352: PPUSH
13353: CALL_OW 302
13357: PUSH
13358: LD_EXP 47
13362: PPUSH
13363: CALL_OW 255
13367: PUSH
13368: LD_INT 3
13370: EQUAL
13371: AND
13372: IFFALSE 13386
// Say ( Belkov2 , D4-Bel-3 ) ;
13374: LD_EXP 47
13378: PPUSH
13379: LD_STRING D4-Bel-3
13381: PPUSH
13382: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13386: LD_EXP 45
13390: PPUSH
13391: CALL_OW 302
13395: PUSH
13396: LD_EXP 45
13400: PPUSH
13401: CALL_OW 255
13405: PUSH
13406: LD_INT 3
13408: EQUAL
13409: AND
13410: IFFALSE 13424
// Say ( Kovalyuk , D4-Kov-3 ) ;
13412: LD_EXP 45
13416: PPUSH
13417: LD_STRING D4-Kov-3
13419: PPUSH
13420: CALL_OW 88
// end ; PrepareFirstAttack ;
13424: CALL 4175 0 0
// firstAttack = true ;
13428: LD_ADDR_EXP 18
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13436: LD_INT 350
13438: PPUSH
13439: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13443: LD_EXP 42
13447: PPUSH
13448: LD_STRING D7-Bur-1
13450: PPUSH
13451: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13455: LD_EXP 64
13459: PPUSH
13460: LD_INT 135
13462: PUSH
13463: LD_INT 4
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 134
13472: PUSH
13473: LD_INT 19
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 132
13482: PUSH
13483: LD_INT 26
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 128
13492: PUSH
13493: LD_INT 31
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 123
13502: PUSH
13503: LD_INT 37
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 118
13512: PUSH
13513: LD_INT 45
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 112
13522: PUSH
13523: LD_INT 51
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 106
13532: PUSH
13533: LD_INT 57
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 99
13542: PUSH
13543: LD_INT 62
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 93
13552: PUSH
13553: LD_INT 67
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 86
13562: PUSH
13563: LD_INT 72
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 78
13572: PUSH
13573: LD_INT 75
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 71
13582: PUSH
13583: LD_INT 81
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 69
13592: PUSH
13593: LD_INT 88
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 71
13602: PUSH
13603: LD_INT 95
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 74
13612: PUSH
13613: LD_INT 103
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 80
13622: PUSH
13623: LD_INT 113
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: LD_INT 11
13657: PPUSH
13658: CALL 5018 0 5
// end ;
13662: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13663: LD_EXP 64
13667: PPUSH
13668: LD_INT 21
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 72
13682: NOT
13683: PUSH
13684: LD_EXP 18
13688: AND
13689: IFFALSE 13748
13691: GO 13693
13693: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13694: LD_EXP 57
13698: PPUSH
13699: CALL_OW 122
// wait ( 0 0$1 ) ;
13703: LD_INT 35
13705: PPUSH
13706: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13710: LD_EXP 57
13714: PPUSH
13715: LD_INT 114
13717: PPUSH
13718: LD_INT 114
13720: PPUSH
13721: CALL_OW 111
// wait ( 0 0$15 ) ;
13725: LD_INT 525
13727: PPUSH
13728: CALL_OW 67
// firstAttack = false ;
13732: LD_ADDR_EXP 18
13736: PUSH
13737: LD_INT 0
13739: ST_TO_ADDR
// enableAttacks = true ;
13740: LD_ADDR_EXP 17
13744: PUSH
13745: LD_INT 1
13747: ST_TO_ADDR
// end ;
13748: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13749: LD_OWVAR 67
13753: PUSH
13754: LD_INT 1
13756: EQUAL
13757: PUSH
13758: LD_EXP 57
13762: AND
13763: IFFALSE 13831
13765: GO 13767
13767: DISABLE
13768: LD_INT 0
13770: PPUSH
// begin enable ;
13771: ENABLE
// for un in secondBaseTeam do
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: LD_EXP 57
13781: PUSH
13782: FOR_IN
13783: IFFALSE 13829
// if IsInArea ( un , HillArea ) then
13785: LD_VAR 0 1
13789: PPUSH
13790: LD_INT 5
13792: PPUSH
13793: CALL_OW 308
13797: IFFALSE 13827
// begin SetSide ( un , 3 ) ;
13799: LD_VAR 0 1
13803: PPUSH
13804: LD_INT 3
13806: PPUSH
13807: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13811: LD_ADDR_EXP 57
13815: PUSH
13816: LD_EXP 57
13820: PUSH
13821: LD_VAR 0 1
13825: DIFF
13826: ST_TO_ADDR
// end ;
13827: GO 13782
13829: POP
13830: POP
// end ;
13831: PPOPN 1
13833: END
// export function Dial_Contact ; begin
13834: LD_INT 0
13836: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13837: LD_EXP 42
13841: PPUSH
13842: LD_STRING D7-Bur-1a
13844: PPUSH
13845: CALL_OW 88
// wait ( 0 0$12 ) ;
13849: LD_INT 420
13851: PPUSH
13852: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13856: LD_EXP 42
13860: PPUSH
13861: LD_STRING D7-Bur-1b
13863: PPUSH
13864: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13868: LD_EXP 46
13872: PPUSH
13873: CALL_OW 302
13877: PUSH
13878: LD_EXP 46
13882: PPUSH
13883: CALL_OW 255
13887: PUSH
13888: LD_INT 3
13890: EQUAL
13891: AND
13892: IFFALSE 13908
// Say ( Belkov , D7-Bel-1 ) else
13894: LD_EXP 46
13898: PPUSH
13899: LD_STRING D7-Bel-1
13901: PPUSH
13902: CALL_OW 88
13906: GO 13946
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13908: LD_EXP 47
13912: PPUSH
13913: CALL_OW 302
13917: PUSH
13918: LD_EXP 47
13922: PPUSH
13923: CALL_OW 255
13927: PUSH
13928: LD_INT 3
13930: EQUAL
13931: AND
13932: IFFALSE 13946
// Say ( Belkov2 , D7-Bel-1 ) ;
13934: LD_EXP 47
13938: PPUSH
13939: LD_STRING D7-Bel-1
13941: PPUSH
13942: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13946: LD_EXP 49
13950: PPUSH
13951: CALL_OW 302
13955: PUSH
13956: LD_EXP 49
13960: PPUSH
13961: CALL_OW 255
13965: PUSH
13966: LD_INT 3
13968: EQUAL
13969: AND
13970: IFFALSE 13984
// Say ( Kuzmov , D7-Kuz-1 ) ;
13972: LD_EXP 49
13976: PPUSH
13977: LD_STRING D7-Kuz-1
13979: PPUSH
13980: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13984: LD_EXP 45
13988: PPUSH
13989: CALL_OW 302
13993: PUSH
13994: LD_EXP 45
13998: PPUSH
13999: CALL_OW 255
14003: PUSH
14004: LD_INT 3
14006: EQUAL
14007: AND
14008: IFFALSE 14022
// Say ( Kovalyuk , D7-Kov-1 ) ;
14010: LD_EXP 45
14014: PPUSH
14015: LD_STRING D7-Kov-1
14017: PPUSH
14018: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14022: LD_EXP 48
14026: PPUSH
14027: CALL_OW 302
14031: PUSH
14032: LD_EXP 48
14036: PPUSH
14037: CALL_OW 255
14041: PUSH
14042: LD_INT 3
14044: EQUAL
14045: AND
14046: IFFALSE 14060
// Say ( Scholtze , D7-Sch-1 ) ;
14048: LD_EXP 48
14052: PPUSH
14053: LD_STRING D7-Sch-1
14055: PPUSH
14056: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14060: LD_INT 22
14062: PUSH
14063: LD_INT 3
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 26
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: PPUSH
14100: LD_STRING D7-RSol1-1
14102: PPUSH
14103: LD_STRING 
14105: PPUSH
14106: LD_INT 0
14108: PPUSH
14109: CALL 9513 0 4
// PrepareHeike ;
14113: CALL 3495 0 0
// wait ( 0 0$10 ) ;
14117: LD_INT 350
14119: PPUSH
14120: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14124: LD_EXP 63
14128: PPUSH
14129: LD_STRING D7a-Hke-1
14131: PPUSH
14132: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14136: LD_EXP 42
14140: PPUSH
14141: LD_STRING D7a-Bur-1
14143: PPUSH
14144: CALL_OW 88
// wait ( 0 0$50 ) ;
14148: LD_INT 1750
14150: PPUSH
14151: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14155: LD_EXP 49
14159: PPUSH
14160: CALL_OW 302
14164: PUSH
14165: LD_EXP 49
14169: PPUSH
14170: CALL_OW 255
14174: PUSH
14175: LD_INT 3
14177: EQUAL
14178: AND
14179: IFFALSE 14195
// Say ( Kuzmov , D8-Kuz-1 ) else
14181: LD_EXP 49
14185: PPUSH
14186: LD_STRING D8-Kuz-1
14188: PPUSH
14189: CALL_OW 88
14193: GO 14248
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14195: LD_INT 22
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 1
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 26
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PPUSH
14235: LD_STRING D8-RSol1-1
14237: PPUSH
14238: LD_STRING 
14240: PPUSH
14241: LD_INT 0
14243: PPUSH
14244: CALL 9513 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14248: LD_EXP 42
14252: PPUSH
14253: LD_STRING D8-Bur-1
14255: PPUSH
14256: CALL_OW 88
// end ;
14260: LD_VAR 0 1
14264: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14265: LD_EXP 54
14269: PPUSH
14270: CALL_OW 305
14274: NOT
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 50
14298: PUSH
14299: EMPTY
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: NOT
14312: AND
14313: PUSH
14314: LD_INT 22
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 21
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 50
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: PPUSH
14345: CALL_OW 69
14349: PUSH
14350: LD_INT 5
14352: LESS
14353: AND
14354: PUSH
14355: LD_INT 5
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: PPUSH
14371: CALL_OW 70
14375: PUSH
14376: LD_INT 3
14378: GREATER
14379: AND
14380: IFFALSE 14389
14382: GO 14384
14384: DISABLE
// Lose_ArabBreakthrough ;
14385: CALL 7567 0 0
14389: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14390: LD_EXP 19
14394: PUSH
14395: LD_EXP 38
14399: GREATEREQUAL
14400: IFFALSE 14618
14402: GO 14404
14404: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14405: LD_EXP 53
14409: PPUSH
14410: LD_STRING D9-Pla-1
14412: PPUSH
14413: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14417: LD_EXP 42
14421: PPUSH
14422: LD_STRING D9-Bur-1
14424: PPUSH
14425: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-2
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-2
14448: PPUSH
14449: CALL_OW 88
// wait ( 2 2$0 ) ;
14453: LD_INT 4200
14455: PPUSH
14456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14460: LD_INT 35
14462: PPUSH
14463: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14467: LD_INT 12
14469: PPUSH
14470: LD_INT 3
14472: PPUSH
14473: CALL_OW 428
14477: NOT
14478: IFFALSE 14460
// PlaceUnitArea ( Gaydar , GaydarSpawnArea , false ) ;
14480: LD_EXP 54
14484: PPUSH
14485: LD_INT 6
14487: PPUSH
14488: LD_INT 0
14490: PPUSH
14491: CALL_OW 49
// arabianCanExitMap = true ;
14495: LD_ADDR_EXP 7
14499: PUSH
14500: LD_INT 1
14502: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14503: LD_INT 35
14505: PPUSH
14506: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14510: LD_EXP 54
14514: PPUSH
14515: CALL_OW 87
// DialogueOn ;
14519: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14523: LD_EXP 54
14527: PPUSH
14528: LD_STRING D10-Gay-1
14530: PPUSH
14531: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14535: LD_EXP 42
14539: PPUSH
14540: LD_STRING D10-Bur-1
14542: PPUSH
14543: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14547: LD_EXP 54
14551: PPUSH
14552: LD_STRING D10-Gay-2
14554: PPUSH
14555: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14559: LD_EXP 52
14563: PPUSH
14564: LD_STRING D10-Pop-2
14566: PPUSH
14567: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14571: LD_EXP 54
14575: PPUSH
14576: LD_STRING D10-Gay-3
14578: PPUSH
14579: CALL_OW 94
// DialogueOff ;
14583: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14587: LD_EXP 54
14591: PPUSH
14592: LD_INT 36
14594: PPUSH
14595: LD_INT 38
14597: PPUSH
14598: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14602: LD_EXP 54
14606: PPUSH
14607: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14611: LD_STRING M2
14613: PPUSH
14614: CALL_OW 337
// end ;
14618: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14619: LD_EXP 7
14623: IFFALSE 14696
14625: GO 14627
14627: DISABLE
14628: LD_INT 0
14630: PPUSH
// begin enable ;
14631: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14632: LD_INT 22
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: PPUSH
14645: CALL_OW 69
14649: PPUSH
14650: LD_INT 13
14652: PPUSH
14653: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14657: LD_ADDR_VAR 0 1
14661: PUSH
14662: LD_INT 13
14664: PPUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 2
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PPUSH
14675: CALL_OW 70
14679: PUSH
14680: FOR_IN
14681: IFFALSE 14694
// RemoveUnit ( unit ) ;
14683: LD_VAR 0 1
14687: PPUSH
14688: CALL_OW 64
14692: GO 14680
14694: POP
14695: POP
// end ;
14696: PPOPN 1
14698: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14699: LD_EXP 20
14703: NOT
14704: IFFALSE 15094
14706: GO 14708
14708: DISABLE
14709: LD_INT 0
14711: PPUSH
14712: PPUSH
// begin enable ;
14713: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_INT 3
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 21
14731: PUSH
14732: LD_INT 1
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: PUSH
14748: FOR_IN
14749: IFFALSE 15092
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_EXP 54
14760: PPUSH
14761: CALL_OW 296
14765: PUSH
14766: LD_INT 6
14768: LESS
14769: IFFALSE 15090
// begin SetSide ( Gaydar , 3 ) ;
14771: LD_EXP 54
14775: PPUSH
14776: LD_INT 3
14778: PPUSH
14779: CALL_OW 235
// ComWalk ( Gaydar ) ;
14783: LD_EXP 54
14787: PPUSH
14788: CALL_OW 138
// saveGaydar = true ;
14792: LD_ADDR_EXP 20
14796: PUSH
14797: LD_INT 1
14799: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14800: LD_INT 35
14802: PPUSH
14803: CALL_OW 67
// DialogueOn ;
14807: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14811: LD_EXP 54
14815: PPUSH
14816: LD_STRING D11-Gay-1
14818: PPUSH
14819: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14823: LD_EXP 42
14827: PPUSH
14828: LD_EXP 54
14832: PPUSH
14833: CALL_OW 296
14837: PUSH
14838: LD_INT 6
14840: LESS
14841: NOT
14842: IFFALSE 14942
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14844: LD_ADDR_VAR 0 2
14848: PUSH
14849: LD_INT 22
14851: PUSH
14852: LD_INT 3
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 21
14861: PUSH
14862: LD_INT 1
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 26
14871: PUSH
14872: LD_INT 1
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 50
14881: PUSH
14882: EMPTY
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: PUSH
14896: LD_EXP 54
14900: DIFF
14901: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14902: LD_VAR 0 2
14906: PPUSH
14907: LD_EXP 54
14911: PPUSH
14912: CALL_OW 74
14916: PPUSH
14917: LD_STRING D11-RSol1-1
14919: PPUSH
14920: CALL_OW 88
// gaydarWaitForBurlak = true ;
14924: LD_ADDR_EXP 21
14928: PUSH
14929: LD_INT 1
14931: ST_TO_ADDR
// DialogueOff ;
14932: CALL_OW 7
// exit ;
14936: POP
14937: POP
14938: GO 15094
// end else
14940: GO 15090
// begin Say ( Gaydar , D11-Gay-2 ) ;
14942: LD_EXP 54
14946: PPUSH
14947: LD_STRING D11-Gay-2
14949: PPUSH
14950: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14954: LD_EXP 42
14958: PPUSH
14959: LD_STRING D11-Bur-2
14961: PPUSH
14962: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14966: LD_EXP 54
14970: PPUSH
14971: LD_STRING D11-Gay-3
14973: PPUSH
14974: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
14978: LD_EXP 42
14982: PPUSH
14983: LD_STRING D11-Bur-3
14985: PPUSH
14986: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
14990: LD_EXP 54
14994: PPUSH
14995: LD_STRING D11-Gay-4
14997: PPUSH
14998: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15002: LD_EXP 42
15006: PPUSH
15007: LD_STRING D11-Bur-4
15009: PPUSH
15010: CALL_OW 88
// wait ( 0 0$2 ) ;
15014: LD_INT 70
15016: PPUSH
15017: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15021: LD_EXP 52
15025: PPUSH
15026: LD_STRING D12-Pop-1
15028: PPUSH
15029: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15033: LD_EXP 42
15037: PPUSH
15038: LD_STRING D12-Bur-1
15040: PPUSH
15041: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15045: LD_EXP 53
15049: PPUSH
15050: LD_STRING D12-Pla-1
15052: PPUSH
15053: CALL_OW 94
// DialogueOff ;
15057: CALL_OW 7
// canExitMap = true ;
15061: LD_ADDR_EXP 6
15065: PUSH
15066: LD_INT 1
15068: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15069: LD_STRING MFinal
15071: PPUSH
15072: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15076: LD_INT 4
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: CALL_OW 424
// exit ;
15086: POP
15087: POP
15088: GO 15094
// end ; end ; end ;
15090: GO 14748
15092: POP
15093: POP
// end ;
15094: PPOPN 2
15096: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15097: LD_EXP 42
15101: PPUSH
15102: LD_EXP 54
15106: PPUSH
15107: CALL_OW 296
15111: PUSH
15112: LD_INT 6
15114: LESS
15115: PUSH
15116: LD_EXP 21
15120: AND
15121: IFFALSE 15274
15123: GO 15125
15125: DISABLE
// begin DialogueOn ;
15126: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15130: LD_EXP 54
15134: PPUSH
15135: LD_STRING D11-Gay-2
15137: PPUSH
15138: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15142: LD_EXP 42
15146: PPUSH
15147: LD_STRING D11-Bur-2
15149: PPUSH
15150: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15154: LD_EXP 54
15158: PPUSH
15159: LD_STRING D11-Gay-3
15161: PPUSH
15162: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15166: LD_EXP 42
15170: PPUSH
15171: LD_STRING D11-Bur-3
15173: PPUSH
15174: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15178: LD_EXP 54
15182: PPUSH
15183: LD_STRING D11-Gay-4
15185: PPUSH
15186: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15190: LD_EXP 42
15194: PPUSH
15195: LD_STRING D11-Bur-4
15197: PPUSH
15198: CALL_OW 88
// wait ( 0 0$2 ) ;
15202: LD_INT 70
15204: PPUSH
15205: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15209: LD_EXP 52
15213: PPUSH
15214: LD_STRING D12-Pop-1
15216: PPUSH
15217: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15221: LD_EXP 42
15225: PPUSH
15226: LD_STRING D12-Bur-1
15228: PPUSH
15229: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15233: LD_EXP 53
15237: PPUSH
15238: LD_STRING D12-Pla-1
15240: PPUSH
15241: CALL_OW 94
// DialogueOff ;
15245: CALL_OW 7
// canExitMap = true ;
15249: LD_ADDR_EXP 6
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15257: LD_STRING MFinal
15259: PPUSH
15260: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15264: LD_INT 4
15266: PPUSH
15267: LD_INT 1
15269: PPUSH
15270: CALL_OW 424
// end ;
15274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15275: LD_INT 22
15277: PUSH
15278: LD_INT 3
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 21
15287: PUSH
15288: LD_INT 1
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PPUSH
15299: CALL_OW 69
15303: PUSH
15304: LD_INT 0
15306: EQUAL
15307: PUSH
15308: LD_EXP 6
15312: AND
15313: IFFALSE 15322
15315: GO 15317
15317: DISABLE
// FinishMission ; end_of_file
15318: CALL 7685 0 0
15322: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15323: LD_EXP 17
15327: PUSH
15328: LD_EXP 19
15332: PUSH
15333: LD_INT 0
15335: EQUAL
15336: AND
15337: PUSH
15338: LD_EXP 19
15342: PUSH
15343: LD_EXP 38
15347: LESS
15348: AND
15349: IFFALSE 15401
15351: GO 15353
15353: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15354: LD_INT 7
15356: PUSH
15357: LD_INT 10
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 1
15366: PPUSH
15367: LD_INT 2
15369: PPUSH
15370: CALL_OW 12
15374: ARRAY
15375: PPUSH
15376: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15380: LD_EXP 65
15384: PPUSH
15385: EMPTY
15386: PPUSH
15387: LD_INT 1
15389: PPUSH
15390: LD_INT 1
15392: PPUSH
15393: LD_INT 1
15395: NEG
15396: PPUSH
15397: CALL 5018 0 5
// end ;
15401: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15402: LD_EXP 17
15406: PUSH
15407: LD_EXP 19
15411: PUSH
15412: LD_INT 0
15414: GREATEREQUAL
15415: AND
15416: PUSH
15417: LD_EXP 19
15421: PUSH
15422: LD_EXP 38
15426: LESS
15427: AND
15428: IFFALSE 15658
15430: GO 15432
15432: DISABLE
// begin currentWave = currentWave + 1 ;
15433: LD_ADDR_EXP 19
15437: PUSH
15438: LD_EXP 19
15442: PUSH
15443: LD_INT 1
15445: PLUS
15446: ST_TO_ADDR
// PrepareArabianVehicles ;
15447: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15451: LD_EXP 65
15455: PPUSH
15456: LD_INT 135
15458: PUSH
15459: LD_INT 4
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 134
15468: PUSH
15469: LD_INT 19
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 132
15478: PUSH
15479: LD_INT 26
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 128
15488: PUSH
15489: LD_INT 31
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 123
15498: PUSH
15499: LD_INT 37
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 118
15508: PUSH
15509: LD_INT 45
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 112
15518: PUSH
15519: LD_INT 51
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 106
15528: PUSH
15529: LD_INT 57
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 99
15538: PUSH
15539: LD_INT 62
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 93
15548: PUSH
15549: LD_INT 67
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 86
15558: PUSH
15559: LD_INT 72
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 78
15568: PUSH
15569: LD_INT 75
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 71
15578: PUSH
15579: LD_INT 81
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 69
15588: PUSH
15589: LD_INT 88
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 71
15598: PUSH
15599: LD_INT 95
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 74
15608: PUSH
15609: LD_INT 103
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 80
15618: PUSH
15619: LD_INT 113
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: PPUSH
15645: LD_INT 0
15647: PPUSH
15648: LD_INT 1
15650: PPUSH
15651: LD_INT 11
15653: PPUSH
15654: CALL 5018 0 5
// end ;
15658: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15659: LD_EXP 17
15663: PUSH
15664: LD_OWVAR 67
15668: PUSH
15669: LD_INT 2
15671: EQUAL
15672: AND
15673: PUSH
15674: LD_EXP 19
15678: PUSH
15679: LD_INT 0
15681: GREATEREQUAL
15682: AND
15683: PUSH
15684: LD_EXP 19
15688: PUSH
15689: LD_EXP 38
15693: LESS
15694: AND
15695: IFFALSE 15823
15697: GO 15699
15699: DISABLE
// begin PrepareArabianVehicles ;
15700: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15704: LD_EXP 65
15708: PPUSH
15709: LD_INT 135
15711: PUSH
15712: LD_INT 4
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 134
15721: PUSH
15722: LD_INT 19
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 132
15731: PUSH
15732: LD_INT 26
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 128
15741: PUSH
15742: LD_INT 31
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 123
15751: PUSH
15752: LD_INT 37
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 118
15761: PUSH
15762: LD_INT 45
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 112
15771: PUSH
15772: LD_INT 51
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 106
15781: PUSH
15782: LD_INT 57
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 99
15791: PUSH
15792: LD_INT 62
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: PPUSH
15810: LD_INT 0
15812: PPUSH
15813: LD_INT 1
15815: PPUSH
15816: LD_INT 11
15818: PPUSH
15819: CALL 5018 0 5
// end ;
15823: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
15824: LD_EXP 17
15828: PUSH
15829: LD_OWVAR 67
15833: PUSH
15834: LD_INT 3
15836: EQUAL
15837: AND
15838: PUSH
15839: LD_EXP 19
15843: PUSH
15844: LD_INT 0
15846: GREATEREQUAL
15847: AND
15848: PUSH
15849: LD_EXP 19
15853: PUSH
15854: LD_EXP 38
15858: LESS
15859: AND
15860: IFFALSE 16054
15862: GO 15864
15864: DISABLE
// begin PrepareArabianVehicles ;
15865: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15869: LD_EXP 65
15873: PPUSH
15874: LD_INT 135
15876: PUSH
15877: LD_INT 4
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 134
15886: PUSH
15887: LD_INT 19
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 132
15896: PUSH
15897: LD_INT 26
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 128
15906: PUSH
15907: LD_INT 31
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 123
15916: PUSH
15917: LD_INT 37
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 118
15926: PUSH
15927: LD_INT 45
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 112
15936: PUSH
15937: LD_INT 51
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 106
15946: PUSH
15947: LD_INT 57
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 99
15956: PUSH
15957: LD_INT 62
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 104
15966: PUSH
15967: LD_INT 71
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 110
15976: PUSH
15977: LD_INT 78
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 119
15986: PUSH
15987: LD_INT 88
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 128
15996: PUSH
15997: LD_INT 97
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 135
16006: PUSH
16007: LD_INT 106
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 140
16016: PUSH
16017: LD_INT 153
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: PPUSH
16041: LD_INT 0
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: LD_INT 11
16049: PPUSH
16050: CALL 5018 0 5
// end ;
16054: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16055: LD_EXP 17
16059: PUSH
16060: LD_EXP 19
16064: PUSH
16065: LD_INT 1
16067: EQUAL
16068: AND
16069: PUSH
16070: LD_EXP 19
16074: PUSH
16075: LD_EXP 38
16079: LESS
16080: AND
16081: IFFALSE 16158
16083: GO 16085
16085: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16086: LD_INT 7
16088: PPUSH
16089: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16093: LD_EXP 65
16097: PPUSH
16098: LD_INT 157
16100: PUSH
16101: LD_INT 31
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 194
16110: PUSH
16111: LD_INT 124
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 174
16120: PUSH
16121: LD_INT 158
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 151
16130: PUSH
16131: LD_INT 164
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: PPUSH
16144: LD_INT 0
16146: PPUSH
16147: LD_INT 1
16149: PPUSH
16150: LD_INT 1
16152: NEG
16153: PPUSH
16154: CALL 5018 0 5
// end ;
16158: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16159: LD_EXP 17
16163: PUSH
16164: LD_EXP 19
16168: PUSH
16169: LD_INT 1
16171: EQUAL
16172: AND
16173: PUSH
16174: LD_EXP 19
16178: PUSH
16179: LD_EXP 38
16183: LESS
16184: AND
16185: IFFALSE 16334
16187: GO 16189
16189: DISABLE
// begin wait ( 1 1$30 ) ;
16190: LD_INT 3150
16192: PPUSH
16193: CALL_OW 67
// currentWave = currentWave + 1 ;
16197: LD_ADDR_EXP 19
16201: PUSH
16202: LD_EXP 19
16206: PUSH
16207: LD_INT 1
16209: PLUS
16210: ST_TO_ADDR
// PrepareArabianVehicles ;
16211: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16215: LD_EXP 65
16219: PPUSH
16220: LD_INT 135
16222: PUSH
16223: LD_INT 4
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 134
16232: PUSH
16233: LD_INT 19
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 132
16242: PUSH
16243: LD_INT 26
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 128
16252: PUSH
16253: LD_INT 31
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 123
16262: PUSH
16263: LD_INT 37
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 118
16272: PUSH
16273: LD_INT 45
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 112
16282: PUSH
16283: LD_INT 51
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 106
16292: PUSH
16293: LD_INT 57
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 99
16302: PUSH
16303: LD_INT 62
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: PPUSH
16321: LD_INT 0
16323: PPUSH
16324: LD_INT 1
16326: PPUSH
16327: LD_INT 11
16329: PPUSH
16330: CALL 5018 0 5
// end ;
16334: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16335: LD_EXP 17
16339: PUSH
16340: LD_OWVAR 67
16344: PUSH
16345: LD_INT 2
16347: EQUAL
16348: AND
16349: PUSH
16350: LD_EXP 19
16354: PUSH
16355: LD_INT 1
16357: EQUAL
16358: AND
16359: PUSH
16360: LD_EXP 19
16364: PUSH
16365: LD_EXP 38
16369: LESS
16370: AND
16371: IFFALSE 16565
16373: GO 16375
16375: DISABLE
// begin PrepareArabianVehicles ;
16376: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16380: LD_EXP 65
16384: PPUSH
16385: LD_INT 135
16387: PUSH
16388: LD_INT 4
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 134
16397: PUSH
16398: LD_INT 19
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 132
16407: PUSH
16408: LD_INT 26
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 128
16417: PUSH
16418: LD_INT 31
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 123
16427: PUSH
16428: LD_INT 37
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 118
16437: PUSH
16438: LD_INT 45
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 112
16447: PUSH
16448: LD_INT 51
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 106
16457: PUSH
16458: LD_INT 57
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 99
16467: PUSH
16468: LD_INT 62
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 104
16477: PUSH
16478: LD_INT 71
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 110
16487: PUSH
16488: LD_INT 78
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 119
16497: PUSH
16498: LD_INT 88
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 128
16507: PUSH
16508: LD_INT 97
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 135
16517: PUSH
16518: LD_INT 106
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 140
16527: PUSH
16528: LD_INT 153
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: PPUSH
16552: LD_INT 0
16554: PPUSH
16555: LD_INT 1
16557: PPUSH
16558: LD_INT 11
16560: PPUSH
16561: CALL 5018 0 5
// end ;
16565: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
16566: LD_EXP 17
16570: PUSH
16571: LD_OWVAR 67
16575: PUSH
16576: LD_INT 3
16578: EQUAL
16579: AND
16580: PUSH
16581: LD_EXP 19
16585: PUSH
16586: LD_INT 1
16588: EQUAL
16589: AND
16590: PUSH
16591: LD_EXP 19
16595: PUSH
16596: LD_EXP 38
16600: LESS
16601: AND
16602: IFFALSE 16818
16604: GO 16606
16606: DISABLE
// begin PrepareArabianVehicles ;
16607: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16611: LD_EXP 65
16615: PPUSH
16616: LD_INT 135
16618: PUSH
16619: LD_INT 4
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 134
16628: PUSH
16629: LD_INT 19
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 132
16638: PUSH
16639: LD_INT 26
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 128
16648: PUSH
16649: LD_INT 31
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 123
16658: PUSH
16659: LD_INT 37
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 118
16668: PUSH
16669: LD_INT 45
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 112
16678: PUSH
16679: LD_INT 51
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 106
16688: PUSH
16689: LD_INT 57
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 99
16698: PUSH
16699: LD_INT 62
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 93
16708: PUSH
16709: LD_INT 67
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 86
16718: PUSH
16719: LD_INT 72
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 78
16728: PUSH
16729: LD_INT 75
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 71
16738: PUSH
16739: LD_INT 81
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 69
16748: PUSH
16749: LD_INT 88
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 71
16758: PUSH
16759: LD_INT 95
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 74
16768: PUSH
16769: LD_INT 103
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 80
16778: PUSH
16779: LD_INT 113
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: PPUSH
16805: LD_INT 0
16807: PPUSH
16808: LD_INT 1
16810: PPUSH
16811: LD_INT 11
16813: PPUSH
16814: CALL 5018 0 5
// end ;
16818: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16819: LD_EXP 17
16823: PUSH
16824: LD_EXP 19
16828: PUSH
16829: LD_INT 2
16831: EQUAL
16832: AND
16833: PUSH
16834: LD_EXP 19
16838: PUSH
16839: LD_EXP 38
16843: LESS
16844: AND
16845: IFFALSE 16922
16847: GO 16849
16849: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16850: LD_INT 7
16852: PPUSH
16853: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16857: LD_EXP 65
16861: PPUSH
16862: LD_INT 157
16864: PUSH
16865: LD_INT 31
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 194
16874: PUSH
16875: LD_INT 124
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 174
16884: PUSH
16885: LD_INT 158
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 151
16894: PUSH
16895: LD_INT 164
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: PPUSH
16908: LD_INT 0
16910: PPUSH
16911: LD_INT 1
16913: PPUSH
16914: LD_INT 1
16916: NEG
16917: PPUSH
16918: CALL 5018 0 5
// end ;
16922: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16923: LD_EXP 17
16927: PUSH
16928: LD_EXP 19
16932: PUSH
16933: LD_INT 2
16935: EQUAL
16936: AND
16937: PUSH
16938: LD_EXP 19
16942: PUSH
16943: LD_EXP 38
16947: LESS
16948: AND
16949: IFFALSE 17186
16951: GO 16953
16953: DISABLE
// begin wait ( 1 1$30 ) ;
16954: LD_INT 3150
16956: PPUSH
16957: CALL_OW 67
// currentWave = currentWave + 1 ;
16961: LD_ADDR_EXP 19
16965: PUSH
16966: LD_EXP 19
16970: PUSH
16971: LD_INT 1
16973: PLUS
16974: ST_TO_ADDR
// PrepareArabianVehicles ;
16975: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16979: LD_EXP 65
16983: PPUSH
16984: LD_INT 135
16986: PUSH
16987: LD_INT 4
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 134
16996: PUSH
16997: LD_INT 19
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 132
17006: PUSH
17007: LD_INT 26
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 128
17016: PUSH
17017: LD_INT 31
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 123
17026: PUSH
17027: LD_INT 37
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 118
17036: PUSH
17037: LD_INT 45
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 112
17046: PUSH
17047: LD_INT 51
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 106
17056: PUSH
17057: LD_INT 57
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 99
17066: PUSH
17067: LD_INT 62
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 93
17076: PUSH
17077: LD_INT 67
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 86
17086: PUSH
17087: LD_INT 72
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 78
17096: PUSH
17097: LD_INT 75
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 71
17106: PUSH
17107: LD_INT 81
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 69
17116: PUSH
17117: LD_INT 88
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 71
17126: PUSH
17127: LD_INT 95
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 74
17136: PUSH
17137: LD_INT 103
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 80
17146: PUSH
17147: LD_INT 113
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: PPUSH
17173: LD_INT 0
17175: PPUSH
17176: LD_INT 1
17178: PPUSH
17179: LD_INT 11
17181: PPUSH
17182: CALL 5018 0 5
// end ;
17186: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17187: LD_EXP 17
17191: PUSH
17192: LD_OWVAR 67
17196: PUSH
17197: LD_INT 2
17199: EQUAL
17200: AND
17201: PUSH
17202: LD_EXP 19
17206: PUSH
17207: LD_INT 2
17209: EQUAL
17210: AND
17211: PUSH
17212: LD_EXP 19
17216: PUSH
17217: LD_EXP 38
17221: LESS
17222: AND
17223: IFFALSE 17417
17225: GO 17227
17227: DISABLE
// begin PrepareArabianVehicles ;
17228: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17232: LD_EXP 65
17236: PPUSH
17237: LD_INT 135
17239: PUSH
17240: LD_INT 4
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 134
17249: PUSH
17250: LD_INT 19
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 132
17259: PUSH
17260: LD_INT 26
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 128
17269: PUSH
17270: LD_INT 31
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 123
17279: PUSH
17280: LD_INT 37
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 118
17289: PUSH
17290: LD_INT 45
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 112
17299: PUSH
17300: LD_INT 51
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 106
17309: PUSH
17310: LD_INT 57
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 99
17319: PUSH
17320: LD_INT 62
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 104
17329: PUSH
17330: LD_INT 71
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 110
17339: PUSH
17340: LD_INT 78
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 119
17349: PUSH
17350: LD_INT 88
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 128
17359: PUSH
17360: LD_INT 97
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 135
17369: PUSH
17370: LD_INT 106
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 140
17379: PUSH
17380: LD_INT 153
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: PPUSH
17404: LD_INT 0
17406: PPUSH
17407: LD_INT 1
17409: PPUSH
17410: LD_INT 11
17412: PPUSH
17413: CALL 5018 0 5
// end ;
17417: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
17418: LD_EXP 17
17422: PUSH
17423: LD_OWVAR 67
17427: PUSH
17428: LD_INT 3
17430: EQUAL
17431: AND
17432: PUSH
17433: LD_EXP 19
17437: PUSH
17438: LD_INT 2
17440: EQUAL
17441: AND
17442: PUSH
17443: LD_EXP 19
17447: PUSH
17448: LD_EXP 38
17452: LESS
17453: AND
17454: IFFALSE 17648
17456: GO 17458
17458: DISABLE
// begin PrepareArabianVehicles ;
17459: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17463: LD_EXP 65
17467: PPUSH
17468: LD_INT 135
17470: PUSH
17471: LD_INT 4
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 134
17480: PUSH
17481: LD_INT 19
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 132
17490: PUSH
17491: LD_INT 26
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 128
17500: PUSH
17501: LD_INT 31
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 123
17510: PUSH
17511: LD_INT 37
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 118
17520: PUSH
17521: LD_INT 45
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 112
17530: PUSH
17531: LD_INT 51
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 106
17540: PUSH
17541: LD_INT 57
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 99
17550: PUSH
17551: LD_INT 62
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 104
17560: PUSH
17561: LD_INT 71
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 110
17570: PUSH
17571: LD_INT 78
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 119
17580: PUSH
17581: LD_INT 88
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 128
17590: PUSH
17591: LD_INT 97
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 135
17600: PUSH
17601: LD_INT 106
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 140
17610: PUSH
17611: LD_INT 153
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: PPUSH
17635: LD_INT 0
17637: PPUSH
17638: LD_INT 1
17640: PPUSH
17641: LD_INT 11
17643: PPUSH
17644: CALL 5018 0 5
// end ;
17648: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17649: LD_EXP 17
17653: PUSH
17654: LD_EXP 19
17658: PUSH
17659: LD_INT 3
17661: EQUAL
17662: AND
17663: PUSH
17664: LD_EXP 19
17668: PUSH
17669: LD_EXP 38
17673: LESS
17674: AND
17675: IFFALSE 17752
17677: GO 17679
17679: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17680: LD_INT 7
17682: PPUSH
17683: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17687: LD_EXP 65
17691: PPUSH
17692: LD_INT 157
17694: PUSH
17695: LD_INT 31
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 194
17704: PUSH
17705: LD_INT 124
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 174
17714: PUSH
17715: LD_INT 158
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 151
17724: PUSH
17725: LD_INT 164
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: PPUSH
17738: LD_INT 0
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: LD_INT 1
17746: NEG
17747: PPUSH
17748: CALL 5018 0 5
// end ;
17752: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17753: LD_EXP 17
17757: PUSH
17758: LD_EXP 19
17762: PUSH
17763: LD_INT 3
17765: EQUAL
17766: AND
17767: PUSH
17768: LD_EXP 19
17772: PUSH
17773: LD_EXP 38
17777: LESS
17778: AND
17779: IFFALSE 18016
17781: GO 17783
17783: DISABLE
// begin wait ( 1 1$30 ) ;
17784: LD_INT 3150
17786: PPUSH
17787: CALL_OW 67
// currentWave = currentWave + 1 ;
17791: LD_ADDR_EXP 19
17795: PUSH
17796: LD_EXP 19
17800: PUSH
17801: LD_INT 1
17803: PLUS
17804: ST_TO_ADDR
// PrepareArabianVehicles ;
17805: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17809: LD_EXP 65
17813: PPUSH
17814: LD_INT 135
17816: PUSH
17817: LD_INT 4
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 134
17826: PUSH
17827: LD_INT 19
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 132
17836: PUSH
17837: LD_INT 26
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 128
17846: PUSH
17847: LD_INT 31
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 123
17856: PUSH
17857: LD_INT 37
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 118
17866: PUSH
17867: LD_INT 45
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 112
17876: PUSH
17877: LD_INT 51
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 106
17886: PUSH
17887: LD_INT 57
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 99
17896: PUSH
17897: LD_INT 62
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 93
17906: PUSH
17907: LD_INT 67
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 86
17916: PUSH
17917: LD_INT 72
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 78
17926: PUSH
17927: LD_INT 75
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 71
17936: PUSH
17937: LD_INT 81
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 69
17946: PUSH
17947: LD_INT 88
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 71
17956: PUSH
17957: LD_INT 95
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 74
17966: PUSH
17967: LD_INT 103
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 80
17976: PUSH
17977: LD_INT 113
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: PPUSH
18003: LD_INT 0
18005: PPUSH
18006: LD_INT 1
18008: PPUSH
18009: LD_INT 11
18011: PPUSH
18012: CALL 5018 0 5
// end ;
18016: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18017: LD_EXP 17
18021: PUSH
18022: LD_OWVAR 67
18026: PUSH
18027: LD_INT 2
18029: EQUAL
18030: AND
18031: PUSH
18032: LD_EXP 19
18036: PUSH
18037: LD_INT 3
18039: EQUAL
18040: AND
18041: PUSH
18042: LD_EXP 19
18046: PUSH
18047: LD_EXP 38
18051: LESS
18052: AND
18053: IFFALSE 18247
18055: GO 18057
18057: DISABLE
// begin PrepareArabianVehicles ;
18058: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18062: LD_EXP 65
18066: PPUSH
18067: LD_INT 135
18069: PUSH
18070: LD_INT 4
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 134
18079: PUSH
18080: LD_INT 19
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 132
18089: PUSH
18090: LD_INT 26
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 128
18099: PUSH
18100: LD_INT 31
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 123
18109: PUSH
18110: LD_INT 37
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 118
18119: PUSH
18120: LD_INT 45
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 112
18129: PUSH
18130: LD_INT 51
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 106
18139: PUSH
18140: LD_INT 57
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 99
18149: PUSH
18150: LD_INT 62
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 104
18159: PUSH
18160: LD_INT 71
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 110
18169: PUSH
18170: LD_INT 78
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 119
18179: PUSH
18180: LD_INT 88
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 128
18189: PUSH
18190: LD_INT 97
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 135
18199: PUSH
18200: LD_INT 106
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 140
18209: PUSH
18210: LD_INT 153
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: PPUSH
18234: LD_INT 0
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: LD_INT 11
18242: PPUSH
18243: CALL 5018 0 5
// end ;
18247: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
18248: LD_EXP 17
18252: PUSH
18253: LD_OWVAR 67
18257: PUSH
18258: LD_INT 3
18260: EQUAL
18261: AND
18262: PUSH
18263: LD_EXP 19
18267: PUSH
18268: LD_INT 3
18270: EQUAL
18271: AND
18272: PUSH
18273: LD_EXP 19
18277: PUSH
18278: LD_EXP 38
18282: LESS
18283: AND
18284: IFFALSE 18478
18286: GO 18288
18288: DISABLE
// begin PrepareArabianVehicles ;
18289: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18293: LD_EXP 65
18297: PPUSH
18298: LD_INT 135
18300: PUSH
18301: LD_INT 4
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 134
18310: PUSH
18311: LD_INT 19
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 132
18320: PUSH
18321: LD_INT 26
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 128
18330: PUSH
18331: LD_INT 31
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 123
18340: PUSH
18341: LD_INT 37
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 118
18350: PUSH
18351: LD_INT 45
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 112
18360: PUSH
18361: LD_INT 51
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 106
18370: PUSH
18371: LD_INT 57
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 99
18380: PUSH
18381: LD_INT 62
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 104
18390: PUSH
18391: LD_INT 71
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 110
18400: PUSH
18401: LD_INT 78
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 119
18410: PUSH
18411: LD_INT 88
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 128
18420: PUSH
18421: LD_INT 97
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 135
18430: PUSH
18431: LD_INT 106
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 140
18440: PUSH
18441: LD_INT 153
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: PPUSH
18465: LD_INT 0
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: LD_INT 11
18473: PPUSH
18474: CALL 5018 0 5
// end ;
18478: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18479: LD_EXP 54
18483: PPUSH
18484: CALL_OW 305
18488: PUSH
18489: LD_EXP 23
18493: PUSH
18494: LD_INT 5
18496: LESS
18497: AND
18498: IFFALSE 18508
18500: GO 18502
18502: DISABLE
// begin PrepareArabianKiller ;
18503: CALL 4066 0 0
// enable ;
18507: ENABLE
// end ; end_of_file
18508: END
// export function SetAchievements ; begin
18509: LD_INT 0
18511: PPUSH
// if stealWarmCount = 0 then
18512: LD_EXP 12
18516: PUSH
18517: LD_INT 0
18519: EQUAL
18520: IFFALSE 18529
// SetAchievement ( ACH_ENO ) ;
18522: LD_STRING ACH_ENO
18524: PPUSH
18525: CALL_OW 543
// end ;
18529: LD_VAR 0 1
18533: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18534: LD_EXP 25
18538: PUSH
18539: LD_INT 6
18541: GREATEREQUAL
18542: IFFALSE 18554
18544: GO 18546
18546: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18547: LD_STRING ACH_DEFENSE
18549: PPUSH
18550: CALL_OW 543
18554: END
// every 1 trigger killedArabianUnits >= 25 do
18555: LD_EXP 22
18559: PUSH
18560: LD_INT 25
18562: GREATEREQUAL
18563: IFFALSE 18575
18565: GO 18567
18567: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18568: LD_STRING ACH_ARAB
18570: PPUSH
18571: CALL_OW 543
18575: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18576: LD_VAR 0 2
18580: PUSH
18581: LD_INT 100
18583: EQUAL
18584: IFFALSE 19533
// begin if not StreamModeActive then
18586: LD_EXP 66
18590: NOT
18591: IFFALSE 18601
// StreamModeActive := true ;
18593: LD_ADDR_EXP 66
18597: PUSH
18598: LD_INT 1
18600: ST_TO_ADDR
// if p3 = 0 then
18601: LD_VAR 0 3
18605: PUSH
18606: LD_INT 0
18608: EQUAL
18609: IFFALSE 18615
// InitStreamMode ;
18611: CALL 19691 0 0
// if p3 = 1 then
18615: LD_VAR 0 3
18619: PUSH
18620: LD_INT 1
18622: EQUAL
18623: IFFALSE 18633
// sRocket := true ;
18625: LD_ADDR_EXP 71
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if p3 = 2 then
18633: LD_VAR 0 3
18637: PUSH
18638: LD_INT 2
18640: EQUAL
18641: IFFALSE 18651
// sSpeed := true ;
18643: LD_ADDR_EXP 70
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// if p3 = 3 then
18651: LD_VAR 0 3
18655: PUSH
18656: LD_INT 3
18658: EQUAL
18659: IFFALSE 18669
// sEngine := true ;
18661: LD_ADDR_EXP 72
18665: PUSH
18666: LD_INT 1
18668: ST_TO_ADDR
// if p3 = 4 then
18669: LD_VAR 0 3
18673: PUSH
18674: LD_INT 4
18676: EQUAL
18677: IFFALSE 18687
// sSpec := true ;
18679: LD_ADDR_EXP 69
18683: PUSH
18684: LD_INT 1
18686: ST_TO_ADDR
// if p3 = 5 then
18687: LD_VAR 0 3
18691: PUSH
18692: LD_INT 5
18694: EQUAL
18695: IFFALSE 18705
// sLevel := true ;
18697: LD_ADDR_EXP 73
18701: PUSH
18702: LD_INT 1
18704: ST_TO_ADDR
// if p3 = 6 then
18705: LD_VAR 0 3
18709: PUSH
18710: LD_INT 6
18712: EQUAL
18713: IFFALSE 18723
// sArmoury := true ;
18715: LD_ADDR_EXP 74
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
// if p3 = 7 then
18723: LD_VAR 0 3
18727: PUSH
18728: LD_INT 7
18730: EQUAL
18731: IFFALSE 18741
// sRadar := true ;
18733: LD_ADDR_EXP 75
18737: PUSH
18738: LD_INT 1
18740: ST_TO_ADDR
// if p3 = 8 then
18741: LD_VAR 0 3
18745: PUSH
18746: LD_INT 8
18748: EQUAL
18749: IFFALSE 18759
// sBunker := true ;
18751: LD_ADDR_EXP 76
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// if p3 = 9 then
18759: LD_VAR 0 3
18763: PUSH
18764: LD_INT 9
18766: EQUAL
18767: IFFALSE 18777
// sHack := true ;
18769: LD_ADDR_EXP 77
18773: PUSH
18774: LD_INT 1
18776: ST_TO_ADDR
// if p3 = 10 then
18777: LD_VAR 0 3
18781: PUSH
18782: LD_INT 10
18784: EQUAL
18785: IFFALSE 18795
// sFire := true ;
18787: LD_ADDR_EXP 78
18791: PUSH
18792: LD_INT 1
18794: ST_TO_ADDR
// if p3 = 11 then
18795: LD_VAR 0 3
18799: PUSH
18800: LD_INT 11
18802: EQUAL
18803: IFFALSE 18813
// sRefresh := true ;
18805: LD_ADDR_EXP 79
18809: PUSH
18810: LD_INT 1
18812: ST_TO_ADDR
// if p3 = 12 then
18813: LD_VAR 0 3
18817: PUSH
18818: LD_INT 12
18820: EQUAL
18821: IFFALSE 18831
// sExp := true ;
18823: LD_ADDR_EXP 80
18827: PUSH
18828: LD_INT 1
18830: ST_TO_ADDR
// if p3 = 13 then
18831: LD_VAR 0 3
18835: PUSH
18836: LD_INT 13
18838: EQUAL
18839: IFFALSE 18849
// sDepot := true ;
18841: LD_ADDR_EXP 81
18845: PUSH
18846: LD_INT 1
18848: ST_TO_ADDR
// if p3 = 14 then
18849: LD_VAR 0 3
18853: PUSH
18854: LD_INT 14
18856: EQUAL
18857: IFFALSE 18867
// sFlag := true ;
18859: LD_ADDR_EXP 82
18863: PUSH
18864: LD_INT 1
18866: ST_TO_ADDR
// if p3 = 15 then
18867: LD_VAR 0 3
18871: PUSH
18872: LD_INT 15
18874: EQUAL
18875: IFFALSE 18885
// sKamikadze := true ;
18877: LD_ADDR_EXP 90
18881: PUSH
18882: LD_INT 1
18884: ST_TO_ADDR
// if p3 = 16 then
18885: LD_VAR 0 3
18889: PUSH
18890: LD_INT 16
18892: EQUAL
18893: IFFALSE 18903
// sTroll := true ;
18895: LD_ADDR_EXP 91
18899: PUSH
18900: LD_INT 1
18902: ST_TO_ADDR
// if p3 = 17 then
18903: LD_VAR 0 3
18907: PUSH
18908: LD_INT 17
18910: EQUAL
18911: IFFALSE 18921
// sSlow := true ;
18913: LD_ADDR_EXP 92
18917: PUSH
18918: LD_INT 1
18920: ST_TO_ADDR
// if p3 = 18 then
18921: LD_VAR 0 3
18925: PUSH
18926: LD_INT 18
18928: EQUAL
18929: IFFALSE 18939
// sLack := true ;
18931: LD_ADDR_EXP 93
18935: PUSH
18936: LD_INT 1
18938: ST_TO_ADDR
// if p3 = 19 then
18939: LD_VAR 0 3
18943: PUSH
18944: LD_INT 19
18946: EQUAL
18947: IFFALSE 18957
// sTank := true ;
18949: LD_ADDR_EXP 95
18953: PUSH
18954: LD_INT 1
18956: ST_TO_ADDR
// if p3 = 20 then
18957: LD_VAR 0 3
18961: PUSH
18962: LD_INT 20
18964: EQUAL
18965: IFFALSE 18975
// sRemote := true ;
18967: LD_ADDR_EXP 96
18971: PUSH
18972: LD_INT 1
18974: ST_TO_ADDR
// if p3 = 21 then
18975: LD_VAR 0 3
18979: PUSH
18980: LD_INT 21
18982: EQUAL
18983: IFFALSE 18993
// sPowell := true ;
18985: LD_ADDR_EXP 97
18989: PUSH
18990: LD_INT 1
18992: ST_TO_ADDR
// if p3 = 22 then
18993: LD_VAR 0 3
18997: PUSH
18998: LD_INT 22
19000: EQUAL
19001: IFFALSE 19011
// sTeleport := true ;
19003: LD_ADDR_EXP 100
19007: PUSH
19008: LD_INT 1
19010: ST_TO_ADDR
// if p3 = 23 then
19011: LD_VAR 0 3
19015: PUSH
19016: LD_INT 23
19018: EQUAL
19019: IFFALSE 19029
// sOilTower := true ;
19021: LD_ADDR_EXP 102
19025: PUSH
19026: LD_INT 1
19028: ST_TO_ADDR
// if p3 = 24 then
19029: LD_VAR 0 3
19033: PUSH
19034: LD_INT 24
19036: EQUAL
19037: IFFALSE 19047
// sShovel := true ;
19039: LD_ADDR_EXP 103
19043: PUSH
19044: LD_INT 1
19046: ST_TO_ADDR
// if p3 = 25 then
19047: LD_VAR 0 3
19051: PUSH
19052: LD_INT 25
19054: EQUAL
19055: IFFALSE 19065
// sSheik := true ;
19057: LD_ADDR_EXP 104
19061: PUSH
19062: LD_INT 1
19064: ST_TO_ADDR
// if p3 = 26 then
19065: LD_VAR 0 3
19069: PUSH
19070: LD_INT 26
19072: EQUAL
19073: IFFALSE 19083
// sEarthquake := true ;
19075: LD_ADDR_EXP 106
19079: PUSH
19080: LD_INT 1
19082: ST_TO_ADDR
// if p3 = 27 then
19083: LD_VAR 0 3
19087: PUSH
19088: LD_INT 27
19090: EQUAL
19091: IFFALSE 19101
// sAI := true ;
19093: LD_ADDR_EXP 107
19097: PUSH
19098: LD_INT 1
19100: ST_TO_ADDR
// if p3 = 28 then
19101: LD_VAR 0 3
19105: PUSH
19106: LD_INT 28
19108: EQUAL
19109: IFFALSE 19119
// sCargo := true ;
19111: LD_ADDR_EXP 110
19115: PUSH
19116: LD_INT 1
19118: ST_TO_ADDR
// if p3 = 29 then
19119: LD_VAR 0 3
19123: PUSH
19124: LD_INT 29
19126: EQUAL
19127: IFFALSE 19137
// sDLaser := true ;
19129: LD_ADDR_EXP 111
19133: PUSH
19134: LD_INT 1
19136: ST_TO_ADDR
// if p3 = 30 then
19137: LD_VAR 0 3
19141: PUSH
19142: LD_INT 30
19144: EQUAL
19145: IFFALSE 19155
// sExchange := true ;
19147: LD_ADDR_EXP 112
19151: PUSH
19152: LD_INT 1
19154: ST_TO_ADDR
// if p3 = 31 then
19155: LD_VAR 0 3
19159: PUSH
19160: LD_INT 31
19162: EQUAL
19163: IFFALSE 19173
// sFac := true ;
19165: LD_ADDR_EXP 113
19169: PUSH
19170: LD_INT 1
19172: ST_TO_ADDR
// if p3 = 32 then
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 32
19180: EQUAL
19181: IFFALSE 19191
// sPower := true ;
19183: LD_ADDR_EXP 114
19187: PUSH
19188: LD_INT 1
19190: ST_TO_ADDR
// if p3 = 33 then
19191: LD_VAR 0 3
19195: PUSH
19196: LD_INT 33
19198: EQUAL
19199: IFFALSE 19209
// sRandom := true ;
19201: LD_ADDR_EXP 115
19205: PUSH
19206: LD_INT 1
19208: ST_TO_ADDR
// if p3 = 34 then
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 34
19216: EQUAL
19217: IFFALSE 19227
// sShield := true ;
19219: LD_ADDR_EXP 116
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// if p3 = 35 then
19227: LD_VAR 0 3
19231: PUSH
19232: LD_INT 35
19234: EQUAL
19235: IFFALSE 19245
// sTime := true ;
19237: LD_ADDR_EXP 117
19241: PUSH
19242: LD_INT 1
19244: ST_TO_ADDR
// if p3 = 36 then
19245: LD_VAR 0 3
19249: PUSH
19250: LD_INT 36
19252: EQUAL
19253: IFFALSE 19263
// sTools := true ;
19255: LD_ADDR_EXP 118
19259: PUSH
19260: LD_INT 1
19262: ST_TO_ADDR
// if p3 = 101 then
19263: LD_VAR 0 3
19267: PUSH
19268: LD_INT 101
19270: EQUAL
19271: IFFALSE 19281
// sSold := true ;
19273: LD_ADDR_EXP 83
19277: PUSH
19278: LD_INT 1
19280: ST_TO_ADDR
// if p3 = 102 then
19281: LD_VAR 0 3
19285: PUSH
19286: LD_INT 102
19288: EQUAL
19289: IFFALSE 19299
// sDiff := true ;
19291: LD_ADDR_EXP 84
19295: PUSH
19296: LD_INT 1
19298: ST_TO_ADDR
// if p3 = 103 then
19299: LD_VAR 0 3
19303: PUSH
19304: LD_INT 103
19306: EQUAL
19307: IFFALSE 19317
// sFog := true ;
19309: LD_ADDR_EXP 87
19313: PUSH
19314: LD_INT 1
19316: ST_TO_ADDR
// if p3 = 104 then
19317: LD_VAR 0 3
19321: PUSH
19322: LD_INT 104
19324: EQUAL
19325: IFFALSE 19335
// sReset := true ;
19327: LD_ADDR_EXP 88
19331: PUSH
19332: LD_INT 1
19334: ST_TO_ADDR
// if p3 = 105 then
19335: LD_VAR 0 3
19339: PUSH
19340: LD_INT 105
19342: EQUAL
19343: IFFALSE 19353
// sSun := true ;
19345: LD_ADDR_EXP 89
19349: PUSH
19350: LD_INT 1
19352: ST_TO_ADDR
// if p3 = 106 then
19353: LD_VAR 0 3
19357: PUSH
19358: LD_INT 106
19360: EQUAL
19361: IFFALSE 19371
// sTiger := true ;
19363: LD_ADDR_EXP 85
19367: PUSH
19368: LD_INT 1
19370: ST_TO_ADDR
// if p3 = 107 then
19371: LD_VAR 0 3
19375: PUSH
19376: LD_INT 107
19378: EQUAL
19379: IFFALSE 19389
// sBomb := true ;
19381: LD_ADDR_EXP 86
19385: PUSH
19386: LD_INT 1
19388: ST_TO_ADDR
// if p3 = 108 then
19389: LD_VAR 0 3
19393: PUSH
19394: LD_INT 108
19396: EQUAL
19397: IFFALSE 19407
// sWound := true ;
19399: LD_ADDR_EXP 94
19403: PUSH
19404: LD_INT 1
19406: ST_TO_ADDR
// if p3 = 109 then
19407: LD_VAR 0 3
19411: PUSH
19412: LD_INT 109
19414: EQUAL
19415: IFFALSE 19425
// sBetray := true ;
19417: LD_ADDR_EXP 98
19421: PUSH
19422: LD_INT 1
19424: ST_TO_ADDR
// if p3 = 110 then
19425: LD_VAR 0 3
19429: PUSH
19430: LD_INT 110
19432: EQUAL
19433: IFFALSE 19443
// sContamin := true ;
19435: LD_ADDR_EXP 99
19439: PUSH
19440: LD_INT 1
19442: ST_TO_ADDR
// if p3 = 111 then
19443: LD_VAR 0 3
19447: PUSH
19448: LD_INT 111
19450: EQUAL
19451: IFFALSE 19461
// sOil := true ;
19453: LD_ADDR_EXP 101
19457: PUSH
19458: LD_INT 1
19460: ST_TO_ADDR
// if p3 = 112 then
19461: LD_VAR 0 3
19465: PUSH
19466: LD_INT 112
19468: EQUAL
19469: IFFALSE 19479
// sStu := true ;
19471: LD_ADDR_EXP 105
19475: PUSH
19476: LD_INT 1
19478: ST_TO_ADDR
// if p3 = 113 then
19479: LD_VAR 0 3
19483: PUSH
19484: LD_INT 113
19486: EQUAL
19487: IFFALSE 19497
// sBazooka := true ;
19489: LD_ADDR_EXP 108
19493: PUSH
19494: LD_INT 1
19496: ST_TO_ADDR
// if p3 = 114 then
19497: LD_VAR 0 3
19501: PUSH
19502: LD_INT 114
19504: EQUAL
19505: IFFALSE 19515
// sMortar := true ;
19507: LD_ADDR_EXP 109
19511: PUSH
19512: LD_INT 1
19514: ST_TO_ADDR
// if p3 = 115 then
19515: LD_VAR 0 3
19519: PUSH
19520: LD_INT 115
19522: EQUAL
19523: IFFALSE 19533
// sRanger := true ;
19525: LD_ADDR_EXP 119
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
// end ; if p2 = 101 then
19533: LD_VAR 0 2
19537: PUSH
19538: LD_INT 101
19540: EQUAL
19541: IFFALSE 19669
// begin case p3 of 1 :
19543: LD_VAR 0 3
19547: PUSH
19548: LD_INT 1
19550: DOUBLE
19551: EQUAL
19552: IFTRUE 19556
19554: GO 19563
19556: POP
// hHackUnlimitedResources ; 2 :
19557: CALL 30704 0 0
19561: GO 19669
19563: LD_INT 2
19565: DOUBLE
19566: EQUAL
19567: IFTRUE 19571
19569: GO 19578
19571: POP
// hHackSetLevel10 ; 3 :
19572: CALL 30837 0 0
19576: GO 19669
19578: LD_INT 3
19580: DOUBLE
19581: EQUAL
19582: IFTRUE 19586
19584: GO 19593
19586: POP
// hHackSetLevel10YourUnits ; 4 :
19587: CALL 30922 0 0
19591: GO 19669
19593: LD_INT 4
19595: DOUBLE
19596: EQUAL
19597: IFTRUE 19601
19599: GO 19608
19601: POP
// hHackInvincible ; 5 :
19602: CALL 31370 0 0
19606: GO 19669
19608: LD_INT 5
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19623
19616: POP
// hHackInvisible ; 6 :
19617: CALL 31481 0 0
19621: GO 19669
19623: LD_INT 6
19625: DOUBLE
19626: EQUAL
19627: IFTRUE 19631
19629: GO 19638
19631: POP
// hHackChangeYourSide ; 7 :
19632: CALL 31538 0 0
19636: GO 19669
19638: LD_INT 7
19640: DOUBLE
19641: EQUAL
19642: IFTRUE 19646
19644: GO 19653
19646: POP
// hHackChangeUnitSide ; 8 :
19647: CALL 31580 0 0
19651: GO 19669
19653: LD_INT 8
19655: DOUBLE
19656: EQUAL
19657: IFTRUE 19661
19659: GO 19668
19661: POP
// hHackFog ; end ;
19662: CALL 31681 0 0
19666: GO 19669
19668: POP
// end ; end ;
19669: PPOPN 6
19671: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19672: GO 19674
19674: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19675: LD_STRING initStreamRollete();
19677: PPUSH
19678: CALL_OW 559
// InitStreamMode ;
19682: CALL 19691 0 0
// DefineStreamItems ( ) ;
19686: CALL 20131 0 0
// end ;
19690: END
// function InitStreamMode ; begin
19691: LD_INT 0
19693: PPUSH
// streamModeActive := false ;
19694: LD_ADDR_EXP 66
19698: PUSH
19699: LD_INT 0
19701: ST_TO_ADDR
// normalCounter := 36 ;
19702: LD_ADDR_EXP 67
19706: PUSH
19707: LD_INT 36
19709: ST_TO_ADDR
// hardcoreCounter := 16 ;
19710: LD_ADDR_EXP 68
19714: PUSH
19715: LD_INT 16
19717: ST_TO_ADDR
// sRocket := false ;
19718: LD_ADDR_EXP 71
19722: PUSH
19723: LD_INT 0
19725: ST_TO_ADDR
// sSpeed := false ;
19726: LD_ADDR_EXP 70
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// sEngine := false ;
19734: LD_ADDR_EXP 72
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// sSpec := false ;
19742: LD_ADDR_EXP 69
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
// sLevel := false ;
19750: LD_ADDR_EXP 73
19754: PUSH
19755: LD_INT 0
19757: ST_TO_ADDR
// sArmoury := false ;
19758: LD_ADDR_EXP 74
19762: PUSH
19763: LD_INT 0
19765: ST_TO_ADDR
// sRadar := false ;
19766: LD_ADDR_EXP 75
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// sBunker := false ;
19774: LD_ADDR_EXP 76
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// sHack := false ;
19782: LD_ADDR_EXP 77
19786: PUSH
19787: LD_INT 0
19789: ST_TO_ADDR
// sFire := false ;
19790: LD_ADDR_EXP 78
19794: PUSH
19795: LD_INT 0
19797: ST_TO_ADDR
// sRefresh := false ;
19798: LD_ADDR_EXP 79
19802: PUSH
19803: LD_INT 0
19805: ST_TO_ADDR
// sExp := false ;
19806: LD_ADDR_EXP 80
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// sDepot := false ;
19814: LD_ADDR_EXP 81
19818: PUSH
19819: LD_INT 0
19821: ST_TO_ADDR
// sFlag := false ;
19822: LD_ADDR_EXP 82
19826: PUSH
19827: LD_INT 0
19829: ST_TO_ADDR
// sKamikadze := false ;
19830: LD_ADDR_EXP 90
19834: PUSH
19835: LD_INT 0
19837: ST_TO_ADDR
// sTroll := false ;
19838: LD_ADDR_EXP 91
19842: PUSH
19843: LD_INT 0
19845: ST_TO_ADDR
// sSlow := false ;
19846: LD_ADDR_EXP 92
19850: PUSH
19851: LD_INT 0
19853: ST_TO_ADDR
// sLack := false ;
19854: LD_ADDR_EXP 93
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// sTank := false ;
19862: LD_ADDR_EXP 95
19866: PUSH
19867: LD_INT 0
19869: ST_TO_ADDR
// sRemote := false ;
19870: LD_ADDR_EXP 96
19874: PUSH
19875: LD_INT 0
19877: ST_TO_ADDR
// sPowell := false ;
19878: LD_ADDR_EXP 97
19882: PUSH
19883: LD_INT 0
19885: ST_TO_ADDR
// sTeleport := false ;
19886: LD_ADDR_EXP 100
19890: PUSH
19891: LD_INT 0
19893: ST_TO_ADDR
// sOilTower := false ;
19894: LD_ADDR_EXP 102
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// sShovel := false ;
19902: LD_ADDR_EXP 103
19906: PUSH
19907: LD_INT 0
19909: ST_TO_ADDR
// sSheik := false ;
19910: LD_ADDR_EXP 104
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// sEarthquake := false ;
19918: LD_ADDR_EXP 106
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// sAI := false ;
19926: LD_ADDR_EXP 107
19930: PUSH
19931: LD_INT 0
19933: ST_TO_ADDR
// sCargo := false ;
19934: LD_ADDR_EXP 110
19938: PUSH
19939: LD_INT 0
19941: ST_TO_ADDR
// sDLaser := false ;
19942: LD_ADDR_EXP 111
19946: PUSH
19947: LD_INT 0
19949: ST_TO_ADDR
// sExchange := false ;
19950: LD_ADDR_EXP 112
19954: PUSH
19955: LD_INT 0
19957: ST_TO_ADDR
// sFac := false ;
19958: LD_ADDR_EXP 113
19962: PUSH
19963: LD_INT 0
19965: ST_TO_ADDR
// sPower := false ;
19966: LD_ADDR_EXP 114
19970: PUSH
19971: LD_INT 0
19973: ST_TO_ADDR
// sRandom := false ;
19974: LD_ADDR_EXP 115
19978: PUSH
19979: LD_INT 0
19981: ST_TO_ADDR
// sShield := false ;
19982: LD_ADDR_EXP 116
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// sTime := false ;
19990: LD_ADDR_EXP 117
19994: PUSH
19995: LD_INT 0
19997: ST_TO_ADDR
// sTools := false ;
19998: LD_ADDR_EXP 118
20002: PUSH
20003: LD_INT 0
20005: ST_TO_ADDR
// sSold := false ;
20006: LD_ADDR_EXP 83
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// sDiff := false ;
20014: LD_ADDR_EXP 84
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// sFog := false ;
20022: LD_ADDR_EXP 87
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// sReset := false ;
20030: LD_ADDR_EXP 88
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// sSun := false ;
20038: LD_ADDR_EXP 89
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// sTiger := false ;
20046: LD_ADDR_EXP 85
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sBomb := false ;
20054: LD_ADDR_EXP 86
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sWound := false ;
20062: LD_ADDR_EXP 94
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sBetray := false ;
20070: LD_ADDR_EXP 98
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sContamin := false ;
20078: LD_ADDR_EXP 99
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sOil := false ;
20086: LD_ADDR_EXP 101
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sStu := false ;
20094: LD_ADDR_EXP 105
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// sBazooka := false ;
20102: LD_ADDR_EXP 108
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// sMortar := false ;
20110: LD_ADDR_EXP 109
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
// sRanger := false ;
20118: LD_ADDR_EXP 119
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// end ;
20126: LD_VAR 0 1
20130: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20131: LD_INT 0
20133: PPUSH
20134: PPUSH
20135: PPUSH
20136: PPUSH
20137: PPUSH
// result := [ ] ;
20138: LD_ADDR_VAR 0 1
20142: PUSH
20143: EMPTY
20144: ST_TO_ADDR
// if campaign_id = 1 then
20145: LD_OWVAR 69
20149: PUSH
20150: LD_INT 1
20152: EQUAL
20153: IFFALSE 23091
// begin case mission_number of 1 :
20155: LD_OWVAR 70
20159: PUSH
20160: LD_INT 1
20162: DOUBLE
20163: EQUAL
20164: IFTRUE 20168
20166: GO 20232
20168: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20169: LD_ADDR_VAR 0 1
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 4
20179: PUSH
20180: LD_INT 11
20182: PUSH
20183: LD_INT 12
20185: PUSH
20186: LD_INT 15
20188: PUSH
20189: LD_INT 16
20191: PUSH
20192: LD_INT 22
20194: PUSH
20195: LD_INT 23
20197: PUSH
20198: LD_INT 26
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 101
20214: PUSH
20215: LD_INT 102
20217: PUSH
20218: LD_INT 106
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: ST_TO_ADDR
20230: GO 23089
20232: LD_INT 2
20234: DOUBLE
20235: EQUAL
20236: IFTRUE 20240
20238: GO 20312
20240: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20241: LD_ADDR_VAR 0 1
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: LD_INT 4
20251: PUSH
20252: LD_INT 11
20254: PUSH
20255: LD_INT 12
20257: PUSH
20258: LD_INT 15
20260: PUSH
20261: LD_INT 16
20263: PUSH
20264: LD_INT 22
20266: PUSH
20267: LD_INT 23
20269: PUSH
20270: LD_INT 26
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 101
20286: PUSH
20287: LD_INT 102
20289: PUSH
20290: LD_INT 105
20292: PUSH
20293: LD_INT 106
20295: PUSH
20296: LD_INT 108
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: ST_TO_ADDR
20310: GO 23089
20312: LD_INT 3
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20396
20320: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20321: LD_ADDR_VAR 0 1
20325: PUSH
20326: LD_INT 2
20328: PUSH
20329: LD_INT 4
20331: PUSH
20332: LD_INT 5
20334: PUSH
20335: LD_INT 11
20337: PUSH
20338: LD_INT 12
20340: PUSH
20341: LD_INT 15
20343: PUSH
20344: LD_INT 16
20346: PUSH
20347: LD_INT 22
20349: PUSH
20350: LD_INT 26
20352: PUSH
20353: LD_INT 36
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 101
20370: PUSH
20371: LD_INT 102
20373: PUSH
20374: LD_INT 105
20376: PUSH
20377: LD_INT 106
20379: PUSH
20380: LD_INT 108
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: ST_TO_ADDR
20394: GO 23089
20396: LD_INT 4
20398: DOUBLE
20399: EQUAL
20400: IFTRUE 20404
20402: GO 20488
20404: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20405: LD_ADDR_VAR 0 1
20409: PUSH
20410: LD_INT 2
20412: PUSH
20413: LD_INT 4
20415: PUSH
20416: LD_INT 5
20418: PUSH
20419: LD_INT 8
20421: PUSH
20422: LD_INT 11
20424: PUSH
20425: LD_INT 12
20427: PUSH
20428: LD_INT 15
20430: PUSH
20431: LD_INT 16
20433: PUSH
20434: LD_INT 22
20436: PUSH
20437: LD_INT 23
20439: PUSH
20440: LD_INT 26
20442: PUSH
20443: LD_INT 36
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 101
20462: PUSH
20463: LD_INT 102
20465: PUSH
20466: LD_INT 105
20468: PUSH
20469: LD_INT 106
20471: PUSH
20472: LD_INT 108
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: ST_TO_ADDR
20486: GO 23089
20488: LD_INT 5
20490: DOUBLE
20491: EQUAL
20492: IFTRUE 20496
20494: GO 20596
20496: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20497: LD_ADDR_VAR 0 1
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 4
20507: PUSH
20508: LD_INT 5
20510: PUSH
20511: LD_INT 6
20513: PUSH
20514: LD_INT 8
20516: PUSH
20517: LD_INT 11
20519: PUSH
20520: LD_INT 12
20522: PUSH
20523: LD_INT 15
20525: PUSH
20526: LD_INT 16
20528: PUSH
20529: LD_INT 22
20531: PUSH
20532: LD_INT 23
20534: PUSH
20535: LD_INT 25
20537: PUSH
20538: LD_INT 26
20540: PUSH
20541: LD_INT 36
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 101
20562: PUSH
20563: LD_INT 102
20565: PUSH
20566: LD_INT 105
20568: PUSH
20569: LD_INT 106
20571: PUSH
20572: LD_INT 108
20574: PUSH
20575: LD_INT 109
20577: PUSH
20578: LD_INT 112
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 23089
20596: LD_INT 6
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20724
20604: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20605: LD_ADDR_VAR 0 1
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: LD_INT 4
20615: PUSH
20616: LD_INT 5
20618: PUSH
20619: LD_INT 6
20621: PUSH
20622: LD_INT 8
20624: PUSH
20625: LD_INT 11
20627: PUSH
20628: LD_INT 12
20630: PUSH
20631: LD_INT 15
20633: PUSH
20634: LD_INT 16
20636: PUSH
20637: LD_INT 20
20639: PUSH
20640: LD_INT 21
20642: PUSH
20643: LD_INT 22
20645: PUSH
20646: LD_INT 23
20648: PUSH
20649: LD_INT 25
20651: PUSH
20652: LD_INT 26
20654: PUSH
20655: LD_INT 30
20657: PUSH
20658: LD_INT 31
20660: PUSH
20661: LD_INT 32
20663: PUSH
20664: LD_INT 36
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 101
20690: PUSH
20691: LD_INT 102
20693: PUSH
20694: LD_INT 105
20696: PUSH
20697: LD_INT 106
20699: PUSH
20700: LD_INT 108
20702: PUSH
20703: LD_INT 109
20705: PUSH
20706: LD_INT 112
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: ST_TO_ADDR
20722: GO 23089
20724: LD_INT 7
20726: DOUBLE
20727: EQUAL
20728: IFTRUE 20732
20730: GO 20832
20732: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20733: LD_ADDR_VAR 0 1
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: LD_INT 4
20743: PUSH
20744: LD_INT 5
20746: PUSH
20747: LD_INT 7
20749: PUSH
20750: LD_INT 11
20752: PUSH
20753: LD_INT 12
20755: PUSH
20756: LD_INT 15
20758: PUSH
20759: LD_INT 16
20761: PUSH
20762: LD_INT 20
20764: PUSH
20765: LD_INT 21
20767: PUSH
20768: LD_INT 22
20770: PUSH
20771: LD_INT 23
20773: PUSH
20774: LD_INT 25
20776: PUSH
20777: LD_INT 26
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 101
20798: PUSH
20799: LD_INT 102
20801: PUSH
20802: LD_INT 103
20804: PUSH
20805: LD_INT 105
20807: PUSH
20808: LD_INT 106
20810: PUSH
20811: LD_INT 108
20813: PUSH
20814: LD_INT 112
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: ST_TO_ADDR
20830: GO 23089
20832: LD_INT 8
20834: DOUBLE
20835: EQUAL
20836: IFTRUE 20840
20838: GO 20968
20840: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20841: LD_ADDR_VAR 0 1
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: LD_INT 4
20851: PUSH
20852: LD_INT 5
20854: PUSH
20855: LD_INT 6
20857: PUSH
20858: LD_INT 7
20860: PUSH
20861: LD_INT 8
20863: PUSH
20864: LD_INT 11
20866: PUSH
20867: LD_INT 12
20869: PUSH
20870: LD_INT 15
20872: PUSH
20873: LD_INT 16
20875: PUSH
20876: LD_INT 20
20878: PUSH
20879: LD_INT 21
20881: PUSH
20882: LD_INT 22
20884: PUSH
20885: LD_INT 23
20887: PUSH
20888: LD_INT 25
20890: PUSH
20891: LD_INT 26
20893: PUSH
20894: LD_INT 30
20896: PUSH
20897: LD_INT 31
20899: PUSH
20900: LD_INT 32
20902: PUSH
20903: LD_INT 36
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 101
20930: PUSH
20931: LD_INT 102
20933: PUSH
20934: LD_INT 103
20936: PUSH
20937: LD_INT 105
20939: PUSH
20940: LD_INT 106
20942: PUSH
20943: LD_INT 108
20945: PUSH
20946: LD_INT 109
20948: PUSH
20949: LD_INT 112
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: ST_TO_ADDR
20966: GO 23089
20968: LD_INT 9
20970: DOUBLE
20971: EQUAL
20972: IFTRUE 20976
20974: GO 21112
20976: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20977: LD_ADDR_VAR 0 1
20981: PUSH
20982: LD_INT 2
20984: PUSH
20985: LD_INT 4
20987: PUSH
20988: LD_INT 5
20990: PUSH
20991: LD_INT 6
20993: PUSH
20994: LD_INT 7
20996: PUSH
20997: LD_INT 8
20999: PUSH
21000: LD_INT 11
21002: PUSH
21003: LD_INT 12
21005: PUSH
21006: LD_INT 15
21008: PUSH
21009: LD_INT 16
21011: PUSH
21012: LD_INT 20
21014: PUSH
21015: LD_INT 21
21017: PUSH
21018: LD_INT 22
21020: PUSH
21021: LD_INT 23
21023: PUSH
21024: LD_INT 25
21026: PUSH
21027: LD_INT 26
21029: PUSH
21030: LD_INT 28
21032: PUSH
21033: LD_INT 30
21035: PUSH
21036: LD_INT 31
21038: PUSH
21039: LD_INT 32
21041: PUSH
21042: LD_INT 36
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 101
21070: PUSH
21071: LD_INT 102
21073: PUSH
21074: LD_INT 103
21076: PUSH
21077: LD_INT 105
21079: PUSH
21080: LD_INT 106
21082: PUSH
21083: LD_INT 108
21085: PUSH
21086: LD_INT 109
21088: PUSH
21089: LD_INT 112
21091: PUSH
21092: LD_INT 114
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: ST_TO_ADDR
21110: GO 23089
21112: LD_INT 10
21114: DOUBLE
21115: EQUAL
21116: IFTRUE 21120
21118: GO 21304
21120: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21121: LD_ADDR_VAR 0 1
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: LD_INT 4
21131: PUSH
21132: LD_INT 5
21134: PUSH
21135: LD_INT 6
21137: PUSH
21138: LD_INT 7
21140: PUSH
21141: LD_INT 8
21143: PUSH
21144: LD_INT 9
21146: PUSH
21147: LD_INT 10
21149: PUSH
21150: LD_INT 11
21152: PUSH
21153: LD_INT 12
21155: PUSH
21156: LD_INT 13
21158: PUSH
21159: LD_INT 14
21161: PUSH
21162: LD_INT 15
21164: PUSH
21165: LD_INT 16
21167: PUSH
21168: LD_INT 17
21170: PUSH
21171: LD_INT 18
21173: PUSH
21174: LD_INT 19
21176: PUSH
21177: LD_INT 20
21179: PUSH
21180: LD_INT 21
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_INT 23
21188: PUSH
21189: LD_INT 24
21191: PUSH
21192: LD_INT 25
21194: PUSH
21195: LD_INT 26
21197: PUSH
21198: LD_INT 28
21200: PUSH
21201: LD_INT 30
21203: PUSH
21204: LD_INT 31
21206: PUSH
21207: LD_INT 32
21209: PUSH
21210: LD_INT 36
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 101
21246: PUSH
21247: LD_INT 102
21249: PUSH
21250: LD_INT 103
21252: PUSH
21253: LD_INT 104
21255: PUSH
21256: LD_INT 105
21258: PUSH
21259: LD_INT 106
21261: PUSH
21262: LD_INT 107
21264: PUSH
21265: LD_INT 108
21267: PUSH
21268: LD_INT 109
21270: PUSH
21271: LD_INT 110
21273: PUSH
21274: LD_INT 111
21276: PUSH
21277: LD_INT 112
21279: PUSH
21280: LD_INT 114
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: ST_TO_ADDR
21302: GO 23089
21304: LD_INT 11
21306: DOUBLE
21307: EQUAL
21308: IFTRUE 21312
21310: GO 21504
21312: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21313: LD_ADDR_VAR 0 1
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 3
21323: PUSH
21324: LD_INT 4
21326: PUSH
21327: LD_INT 5
21329: PUSH
21330: LD_INT 6
21332: PUSH
21333: LD_INT 7
21335: PUSH
21336: LD_INT 8
21338: PUSH
21339: LD_INT 9
21341: PUSH
21342: LD_INT 10
21344: PUSH
21345: LD_INT 11
21347: PUSH
21348: LD_INT 12
21350: PUSH
21351: LD_INT 13
21353: PUSH
21354: LD_INT 14
21356: PUSH
21357: LD_INT 15
21359: PUSH
21360: LD_INT 16
21362: PUSH
21363: LD_INT 17
21365: PUSH
21366: LD_INT 18
21368: PUSH
21369: LD_INT 19
21371: PUSH
21372: LD_INT 20
21374: PUSH
21375: LD_INT 21
21377: PUSH
21378: LD_INT 22
21380: PUSH
21381: LD_INT 23
21383: PUSH
21384: LD_INT 24
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 26
21392: PUSH
21393: LD_INT 28
21395: PUSH
21396: LD_INT 30
21398: PUSH
21399: LD_INT 31
21401: PUSH
21402: LD_INT 32
21404: PUSH
21405: LD_INT 34
21407: PUSH
21408: LD_INT 36
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 101
21446: PUSH
21447: LD_INT 102
21449: PUSH
21450: LD_INT 103
21452: PUSH
21453: LD_INT 104
21455: PUSH
21456: LD_INT 105
21458: PUSH
21459: LD_INT 106
21461: PUSH
21462: LD_INT 107
21464: PUSH
21465: LD_INT 108
21467: PUSH
21468: LD_INT 109
21470: PUSH
21471: LD_INT 110
21473: PUSH
21474: LD_INT 111
21476: PUSH
21477: LD_INT 112
21479: PUSH
21480: LD_INT 114
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: ST_TO_ADDR
21502: GO 23089
21504: LD_INT 12
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21720
21512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21513: LD_ADDR_VAR 0 1
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 3
21526: PUSH
21527: LD_INT 4
21529: PUSH
21530: LD_INT 5
21532: PUSH
21533: LD_INT 6
21535: PUSH
21536: LD_INT 7
21538: PUSH
21539: LD_INT 8
21541: PUSH
21542: LD_INT 9
21544: PUSH
21545: LD_INT 10
21547: PUSH
21548: LD_INT 11
21550: PUSH
21551: LD_INT 12
21553: PUSH
21554: LD_INT 13
21556: PUSH
21557: LD_INT 14
21559: PUSH
21560: LD_INT 15
21562: PUSH
21563: LD_INT 16
21565: PUSH
21566: LD_INT 17
21568: PUSH
21569: LD_INT 18
21571: PUSH
21572: LD_INT 19
21574: PUSH
21575: LD_INT 20
21577: PUSH
21578: LD_INT 21
21580: PUSH
21581: LD_INT 22
21583: PUSH
21584: LD_INT 23
21586: PUSH
21587: LD_INT 24
21589: PUSH
21590: LD_INT 25
21592: PUSH
21593: LD_INT 26
21595: PUSH
21596: LD_INT 27
21598: PUSH
21599: LD_INT 28
21601: PUSH
21602: LD_INT 30
21604: PUSH
21605: LD_INT 31
21607: PUSH
21608: LD_INT 32
21610: PUSH
21611: LD_INT 33
21613: PUSH
21614: LD_INT 34
21616: PUSH
21617: LD_INT 36
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 101
21658: PUSH
21659: LD_INT 102
21661: PUSH
21662: LD_INT 103
21664: PUSH
21665: LD_INT 104
21667: PUSH
21668: LD_INT 105
21670: PUSH
21671: LD_INT 106
21673: PUSH
21674: LD_INT 107
21676: PUSH
21677: LD_INT 108
21679: PUSH
21680: LD_INT 109
21682: PUSH
21683: LD_INT 110
21685: PUSH
21686: LD_INT 111
21688: PUSH
21689: LD_INT 112
21691: PUSH
21692: LD_INT 113
21694: PUSH
21695: LD_INT 114
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: ST_TO_ADDR
21718: GO 23089
21720: LD_INT 13
21722: DOUBLE
21723: EQUAL
21724: IFTRUE 21728
21726: GO 21924
21728: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21729: LD_ADDR_VAR 0 1
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 3
21742: PUSH
21743: LD_INT 4
21745: PUSH
21746: LD_INT 5
21748: PUSH
21749: LD_INT 8
21751: PUSH
21752: LD_INT 9
21754: PUSH
21755: LD_INT 10
21757: PUSH
21758: LD_INT 11
21760: PUSH
21761: LD_INT 12
21763: PUSH
21764: LD_INT 14
21766: PUSH
21767: LD_INT 15
21769: PUSH
21770: LD_INT 16
21772: PUSH
21773: LD_INT 17
21775: PUSH
21776: LD_INT 18
21778: PUSH
21779: LD_INT 19
21781: PUSH
21782: LD_INT 20
21784: PUSH
21785: LD_INT 21
21787: PUSH
21788: LD_INT 22
21790: PUSH
21791: LD_INT 23
21793: PUSH
21794: LD_INT 24
21796: PUSH
21797: LD_INT 25
21799: PUSH
21800: LD_INT 26
21802: PUSH
21803: LD_INT 27
21805: PUSH
21806: LD_INT 28
21808: PUSH
21809: LD_INT 30
21811: PUSH
21812: LD_INT 31
21814: PUSH
21815: LD_INT 32
21817: PUSH
21818: LD_INT 33
21820: PUSH
21821: LD_INT 34
21823: PUSH
21824: LD_INT 36
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 101
21862: PUSH
21863: LD_INT 102
21865: PUSH
21866: LD_INT 103
21868: PUSH
21869: LD_INT 104
21871: PUSH
21872: LD_INT 105
21874: PUSH
21875: LD_INT 106
21877: PUSH
21878: LD_INT 107
21880: PUSH
21881: LD_INT 108
21883: PUSH
21884: LD_INT 109
21886: PUSH
21887: LD_INT 110
21889: PUSH
21890: LD_INT 111
21892: PUSH
21893: LD_INT 112
21895: PUSH
21896: LD_INT 113
21898: PUSH
21899: LD_INT 114
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: ST_TO_ADDR
21922: GO 23089
21924: LD_INT 14
21926: DOUBLE
21927: EQUAL
21928: IFTRUE 21932
21930: GO 22144
21932: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21933: LD_ADDR_VAR 0 1
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: LD_INT 3
21946: PUSH
21947: LD_INT 4
21949: PUSH
21950: LD_INT 5
21952: PUSH
21953: LD_INT 6
21955: PUSH
21956: LD_INT 7
21958: PUSH
21959: LD_INT 8
21961: PUSH
21962: LD_INT 9
21964: PUSH
21965: LD_INT 10
21967: PUSH
21968: LD_INT 11
21970: PUSH
21971: LD_INT 12
21973: PUSH
21974: LD_INT 13
21976: PUSH
21977: LD_INT 14
21979: PUSH
21980: LD_INT 15
21982: PUSH
21983: LD_INT 16
21985: PUSH
21986: LD_INT 17
21988: PUSH
21989: LD_INT 18
21991: PUSH
21992: LD_INT 19
21994: PUSH
21995: LD_INT 20
21997: PUSH
21998: LD_INT 21
22000: PUSH
22001: LD_INT 22
22003: PUSH
22004: LD_INT 23
22006: PUSH
22007: LD_INT 24
22009: PUSH
22010: LD_INT 25
22012: PUSH
22013: LD_INT 26
22015: PUSH
22016: LD_INT 27
22018: PUSH
22019: LD_INT 28
22021: PUSH
22022: LD_INT 29
22024: PUSH
22025: LD_INT 30
22027: PUSH
22028: LD_INT 31
22030: PUSH
22031: LD_INT 32
22033: PUSH
22034: LD_INT 33
22036: PUSH
22037: LD_INT 34
22039: PUSH
22040: LD_INT 36
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 101
22082: PUSH
22083: LD_INT 102
22085: PUSH
22086: LD_INT 103
22088: PUSH
22089: LD_INT 104
22091: PUSH
22092: LD_INT 105
22094: PUSH
22095: LD_INT 106
22097: PUSH
22098: LD_INT 107
22100: PUSH
22101: LD_INT 108
22103: PUSH
22104: LD_INT 109
22106: PUSH
22107: LD_INT 110
22109: PUSH
22110: LD_INT 111
22112: PUSH
22113: LD_INT 112
22115: PUSH
22116: LD_INT 113
22118: PUSH
22119: LD_INT 114
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: ST_TO_ADDR
22142: GO 23089
22144: LD_INT 15
22146: DOUBLE
22147: EQUAL
22148: IFTRUE 22152
22150: GO 22364
22152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22153: LD_ADDR_VAR 0 1
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: LD_INT 4
22169: PUSH
22170: LD_INT 5
22172: PUSH
22173: LD_INT 6
22175: PUSH
22176: LD_INT 7
22178: PUSH
22179: LD_INT 8
22181: PUSH
22182: LD_INT 9
22184: PUSH
22185: LD_INT 10
22187: PUSH
22188: LD_INT 11
22190: PUSH
22191: LD_INT 12
22193: PUSH
22194: LD_INT 13
22196: PUSH
22197: LD_INT 14
22199: PUSH
22200: LD_INT 15
22202: PUSH
22203: LD_INT 16
22205: PUSH
22206: LD_INT 17
22208: PUSH
22209: LD_INT 18
22211: PUSH
22212: LD_INT 19
22214: PUSH
22215: LD_INT 20
22217: PUSH
22218: LD_INT 21
22220: PUSH
22221: LD_INT 22
22223: PUSH
22224: LD_INT 23
22226: PUSH
22227: LD_INT 24
22229: PUSH
22230: LD_INT 25
22232: PUSH
22233: LD_INT 26
22235: PUSH
22236: LD_INT 27
22238: PUSH
22239: LD_INT 28
22241: PUSH
22242: LD_INT 29
22244: PUSH
22245: LD_INT 30
22247: PUSH
22248: LD_INT 31
22250: PUSH
22251: LD_INT 32
22253: PUSH
22254: LD_INT 33
22256: PUSH
22257: LD_INT 34
22259: PUSH
22260: LD_INT 36
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 101
22302: PUSH
22303: LD_INT 102
22305: PUSH
22306: LD_INT 103
22308: PUSH
22309: LD_INT 104
22311: PUSH
22312: LD_INT 105
22314: PUSH
22315: LD_INT 106
22317: PUSH
22318: LD_INT 107
22320: PUSH
22321: LD_INT 108
22323: PUSH
22324: LD_INT 109
22326: PUSH
22327: LD_INT 110
22329: PUSH
22330: LD_INT 111
22332: PUSH
22333: LD_INT 112
22335: PUSH
22336: LD_INT 113
22338: PUSH
22339: LD_INT 114
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: ST_TO_ADDR
22362: GO 23089
22364: LD_INT 16
22366: DOUBLE
22367: EQUAL
22368: IFTRUE 22372
22370: GO 22496
22372: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22373: LD_ADDR_VAR 0 1
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 4
22383: PUSH
22384: LD_INT 5
22386: PUSH
22387: LD_INT 7
22389: PUSH
22390: LD_INT 11
22392: PUSH
22393: LD_INT 12
22395: PUSH
22396: LD_INT 15
22398: PUSH
22399: LD_INT 16
22401: PUSH
22402: LD_INT 20
22404: PUSH
22405: LD_INT 21
22407: PUSH
22408: LD_INT 22
22410: PUSH
22411: LD_INT 23
22413: PUSH
22414: LD_INT 25
22416: PUSH
22417: LD_INT 26
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: LD_INT 31
22425: PUSH
22426: LD_INT 32
22428: PUSH
22429: LD_INT 33
22431: PUSH
22432: LD_INT 34
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 101
22458: PUSH
22459: LD_INT 102
22461: PUSH
22462: LD_INT 103
22464: PUSH
22465: LD_INT 106
22467: PUSH
22468: LD_INT 108
22470: PUSH
22471: LD_INT 112
22473: PUSH
22474: LD_INT 113
22476: PUSH
22477: LD_INT 114
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: ST_TO_ADDR
22494: GO 23089
22496: LD_INT 17
22498: DOUBLE
22499: EQUAL
22500: IFTRUE 22504
22502: GO 22716
22504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22505: LD_ADDR_VAR 0 1
22509: PUSH
22510: LD_INT 1
22512: PUSH
22513: LD_INT 2
22515: PUSH
22516: LD_INT 3
22518: PUSH
22519: LD_INT 4
22521: PUSH
22522: LD_INT 5
22524: PUSH
22525: LD_INT 6
22527: PUSH
22528: LD_INT 7
22530: PUSH
22531: LD_INT 8
22533: PUSH
22534: LD_INT 9
22536: PUSH
22537: LD_INT 10
22539: PUSH
22540: LD_INT 11
22542: PUSH
22543: LD_INT 12
22545: PUSH
22546: LD_INT 13
22548: PUSH
22549: LD_INT 14
22551: PUSH
22552: LD_INT 15
22554: PUSH
22555: LD_INT 16
22557: PUSH
22558: LD_INT 17
22560: PUSH
22561: LD_INT 18
22563: PUSH
22564: LD_INT 19
22566: PUSH
22567: LD_INT 20
22569: PUSH
22570: LD_INT 21
22572: PUSH
22573: LD_INT 22
22575: PUSH
22576: LD_INT 23
22578: PUSH
22579: LD_INT 24
22581: PUSH
22582: LD_INT 25
22584: PUSH
22585: LD_INT 26
22587: PUSH
22588: LD_INT 27
22590: PUSH
22591: LD_INT 28
22593: PUSH
22594: LD_INT 29
22596: PUSH
22597: LD_INT 30
22599: PUSH
22600: LD_INT 31
22602: PUSH
22603: LD_INT 32
22605: PUSH
22606: LD_INT 33
22608: PUSH
22609: LD_INT 34
22611: PUSH
22612: LD_INT 36
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 101
22654: PUSH
22655: LD_INT 102
22657: PUSH
22658: LD_INT 103
22660: PUSH
22661: LD_INT 104
22663: PUSH
22664: LD_INT 105
22666: PUSH
22667: LD_INT 106
22669: PUSH
22670: LD_INT 107
22672: PUSH
22673: LD_INT 108
22675: PUSH
22676: LD_INT 109
22678: PUSH
22679: LD_INT 110
22681: PUSH
22682: LD_INT 111
22684: PUSH
22685: LD_INT 112
22687: PUSH
22688: LD_INT 113
22690: PUSH
22691: LD_INT 114
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: ST_TO_ADDR
22714: GO 23089
22716: LD_INT 18
22718: DOUBLE
22719: EQUAL
22720: IFTRUE 22724
22722: GO 22860
22724: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22725: LD_ADDR_VAR 0 1
22729: PUSH
22730: LD_INT 2
22732: PUSH
22733: LD_INT 4
22735: PUSH
22736: LD_INT 5
22738: PUSH
22739: LD_INT 7
22741: PUSH
22742: LD_INT 11
22744: PUSH
22745: LD_INT 12
22747: PUSH
22748: LD_INT 15
22750: PUSH
22751: LD_INT 16
22753: PUSH
22754: LD_INT 20
22756: PUSH
22757: LD_INT 21
22759: PUSH
22760: LD_INT 22
22762: PUSH
22763: LD_INT 23
22765: PUSH
22766: LD_INT 25
22768: PUSH
22769: LD_INT 26
22771: PUSH
22772: LD_INT 30
22774: PUSH
22775: LD_INT 31
22777: PUSH
22778: LD_INT 32
22780: PUSH
22781: LD_INT 33
22783: PUSH
22784: LD_INT 34
22786: PUSH
22787: LD_INT 35
22789: PUSH
22790: LD_INT 36
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 101
22818: PUSH
22819: LD_INT 102
22821: PUSH
22822: LD_INT 103
22824: PUSH
22825: LD_INT 106
22827: PUSH
22828: LD_INT 108
22830: PUSH
22831: LD_INT 112
22833: PUSH
22834: LD_INT 113
22836: PUSH
22837: LD_INT 114
22839: PUSH
22840: LD_INT 115
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: ST_TO_ADDR
22858: GO 23089
22860: LD_INT 19
22862: DOUBLE
22863: EQUAL
22864: IFTRUE 22868
22866: GO 23088
22868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22869: LD_ADDR_VAR 0 1
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: LD_INT 3
22882: PUSH
22883: LD_INT 4
22885: PUSH
22886: LD_INT 5
22888: PUSH
22889: LD_INT 6
22891: PUSH
22892: LD_INT 7
22894: PUSH
22895: LD_INT 8
22897: PUSH
22898: LD_INT 9
22900: PUSH
22901: LD_INT 10
22903: PUSH
22904: LD_INT 11
22906: PUSH
22907: LD_INT 12
22909: PUSH
22910: LD_INT 13
22912: PUSH
22913: LD_INT 14
22915: PUSH
22916: LD_INT 15
22918: PUSH
22919: LD_INT 16
22921: PUSH
22922: LD_INT 17
22924: PUSH
22925: LD_INT 18
22927: PUSH
22928: LD_INT 19
22930: PUSH
22931: LD_INT 20
22933: PUSH
22934: LD_INT 21
22936: PUSH
22937: LD_INT 22
22939: PUSH
22940: LD_INT 23
22942: PUSH
22943: LD_INT 24
22945: PUSH
22946: LD_INT 25
22948: PUSH
22949: LD_INT 26
22951: PUSH
22952: LD_INT 27
22954: PUSH
22955: LD_INT 28
22957: PUSH
22958: LD_INT 29
22960: PUSH
22961: LD_INT 30
22963: PUSH
22964: LD_INT 31
22966: PUSH
22967: LD_INT 32
22969: PUSH
22970: LD_INT 33
22972: PUSH
22973: LD_INT 34
22975: PUSH
22976: LD_INT 35
22978: PUSH
22979: LD_INT 36
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 101
23022: PUSH
23023: LD_INT 102
23025: PUSH
23026: LD_INT 103
23028: PUSH
23029: LD_INT 104
23031: PUSH
23032: LD_INT 105
23034: PUSH
23035: LD_INT 106
23037: PUSH
23038: LD_INT 107
23040: PUSH
23041: LD_INT 108
23043: PUSH
23044: LD_INT 109
23046: PUSH
23047: LD_INT 110
23049: PUSH
23050: LD_INT 111
23052: PUSH
23053: LD_INT 112
23055: PUSH
23056: LD_INT 113
23058: PUSH
23059: LD_INT 114
23061: PUSH
23062: LD_INT 115
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: ST_TO_ADDR
23086: GO 23089
23088: POP
// end else
23089: GO 23308
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23091: LD_ADDR_VAR 0 1
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: LD_INT 2
23101: PUSH
23102: LD_INT 3
23104: PUSH
23105: LD_INT 4
23107: PUSH
23108: LD_INT 5
23110: PUSH
23111: LD_INT 6
23113: PUSH
23114: LD_INT 7
23116: PUSH
23117: LD_INT 8
23119: PUSH
23120: LD_INT 9
23122: PUSH
23123: LD_INT 10
23125: PUSH
23126: LD_INT 11
23128: PUSH
23129: LD_INT 12
23131: PUSH
23132: LD_INT 13
23134: PUSH
23135: LD_INT 14
23137: PUSH
23138: LD_INT 15
23140: PUSH
23141: LD_INT 16
23143: PUSH
23144: LD_INT 17
23146: PUSH
23147: LD_INT 18
23149: PUSH
23150: LD_INT 19
23152: PUSH
23153: LD_INT 20
23155: PUSH
23156: LD_INT 21
23158: PUSH
23159: LD_INT 22
23161: PUSH
23162: LD_INT 23
23164: PUSH
23165: LD_INT 24
23167: PUSH
23168: LD_INT 25
23170: PUSH
23171: LD_INT 26
23173: PUSH
23174: LD_INT 27
23176: PUSH
23177: LD_INT 28
23179: PUSH
23180: LD_INT 29
23182: PUSH
23183: LD_INT 30
23185: PUSH
23186: LD_INT 31
23188: PUSH
23189: LD_INT 32
23191: PUSH
23192: LD_INT 33
23194: PUSH
23195: LD_INT 34
23197: PUSH
23198: LD_INT 35
23200: PUSH
23201: LD_INT 36
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 101
23244: PUSH
23245: LD_INT 102
23247: PUSH
23248: LD_INT 103
23250: PUSH
23251: LD_INT 104
23253: PUSH
23254: LD_INT 105
23256: PUSH
23257: LD_INT 106
23259: PUSH
23260: LD_INT 107
23262: PUSH
23263: LD_INT 108
23265: PUSH
23266: LD_INT 109
23268: PUSH
23269: LD_INT 110
23271: PUSH
23272: LD_INT 111
23274: PUSH
23275: LD_INT 112
23277: PUSH
23278: LD_INT 113
23280: PUSH
23281: LD_INT 114
23283: PUSH
23284: LD_INT 115
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: ST_TO_ADDR
// if result then
23308: LD_VAR 0 1
23312: IFFALSE 23601
// begin normal :=  ;
23314: LD_ADDR_VAR 0 3
23318: PUSH
23319: LD_STRING 
23321: ST_TO_ADDR
// hardcore :=  ;
23322: LD_ADDR_VAR 0 4
23326: PUSH
23327: LD_STRING 
23329: ST_TO_ADDR
// for i = 1 to normalCounter do
23330: LD_ADDR_VAR 0 5
23334: PUSH
23335: DOUBLE
23336: LD_INT 1
23338: DEC
23339: ST_TO_ADDR
23340: LD_EXP 67
23344: PUSH
23345: FOR_TO
23346: IFFALSE 23447
// begin tmp := 0 ;
23348: LD_ADDR_VAR 0 2
23352: PUSH
23353: LD_STRING 0
23355: ST_TO_ADDR
// if result [ 1 ] then
23356: LD_VAR 0 1
23360: PUSH
23361: LD_INT 1
23363: ARRAY
23364: IFFALSE 23429
// if result [ 1 ] [ 1 ] = i then
23366: LD_VAR 0 1
23370: PUSH
23371: LD_INT 1
23373: ARRAY
23374: PUSH
23375: LD_INT 1
23377: ARRAY
23378: PUSH
23379: LD_VAR 0 5
23383: EQUAL
23384: IFFALSE 23429
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23386: LD_ADDR_VAR 0 1
23390: PUSH
23391: LD_VAR 0 1
23395: PPUSH
23396: LD_INT 1
23398: PPUSH
23399: LD_VAR 0 1
23403: PUSH
23404: LD_INT 1
23406: ARRAY
23407: PPUSH
23408: LD_INT 1
23410: PPUSH
23411: CALL_OW 3
23415: PPUSH
23416: CALL_OW 1
23420: ST_TO_ADDR
// tmp := 1 ;
23421: LD_ADDR_VAR 0 2
23425: PUSH
23426: LD_STRING 1
23428: ST_TO_ADDR
// end ; normal := normal & tmp ;
23429: LD_ADDR_VAR 0 3
23433: PUSH
23434: LD_VAR 0 3
23438: PUSH
23439: LD_VAR 0 2
23443: STR
23444: ST_TO_ADDR
// end ;
23445: GO 23345
23447: POP
23448: POP
// for i = 1 to hardcoreCounter do
23449: LD_ADDR_VAR 0 5
23453: PUSH
23454: DOUBLE
23455: LD_INT 1
23457: DEC
23458: ST_TO_ADDR
23459: LD_EXP 68
23463: PUSH
23464: FOR_TO
23465: IFFALSE 23570
// begin tmp := 0 ;
23467: LD_ADDR_VAR 0 2
23471: PUSH
23472: LD_STRING 0
23474: ST_TO_ADDR
// if result [ 2 ] then
23475: LD_VAR 0 1
23479: PUSH
23480: LD_INT 2
23482: ARRAY
23483: IFFALSE 23552
// if result [ 2 ] [ 1 ] = 100 + i then
23485: LD_VAR 0 1
23489: PUSH
23490: LD_INT 2
23492: ARRAY
23493: PUSH
23494: LD_INT 1
23496: ARRAY
23497: PUSH
23498: LD_INT 100
23500: PUSH
23501: LD_VAR 0 5
23505: PLUS
23506: EQUAL
23507: IFFALSE 23552
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23509: LD_ADDR_VAR 0 1
23513: PUSH
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 2
23521: PPUSH
23522: LD_VAR 0 1
23526: PUSH
23527: LD_INT 2
23529: ARRAY
23530: PPUSH
23531: LD_INT 1
23533: PPUSH
23534: CALL_OW 3
23538: PPUSH
23539: CALL_OW 1
23543: ST_TO_ADDR
// tmp := 1 ;
23544: LD_ADDR_VAR 0 2
23548: PUSH
23549: LD_STRING 1
23551: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23552: LD_ADDR_VAR 0 4
23556: PUSH
23557: LD_VAR 0 4
23561: PUSH
23562: LD_VAR 0 2
23566: STR
23567: ST_TO_ADDR
// end ;
23568: GO 23464
23570: POP
23571: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23572: LD_STRING getStreamItemsFromMission("
23574: PUSH
23575: LD_VAR 0 3
23579: STR
23580: PUSH
23581: LD_STRING ","
23583: STR
23584: PUSH
23585: LD_VAR 0 4
23589: STR
23590: PUSH
23591: LD_STRING ")
23593: STR
23594: PPUSH
23595: CALL_OW 559
// end else
23599: GO 23608
// ToLua ( getStreamItemsFromMission("","") ) ;
23601: LD_STRING getStreamItemsFromMission("","")
23603: PPUSH
23604: CALL_OW 559
// end ;
23608: LD_VAR 0 1
23612: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23613: LD_EXP 66
23617: PUSH
23618: LD_EXP 71
23622: AND
23623: IFFALSE 23747
23625: GO 23627
23627: DISABLE
23628: LD_INT 0
23630: PPUSH
23631: PPUSH
// begin enable ;
23632: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23633: LD_ADDR_VAR 0 2
23637: PUSH
23638: LD_INT 22
23640: PUSH
23641: LD_OWVAR 2
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: LD_INT 34
23655: PUSH
23656: LD_INT 7
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 34
23665: PUSH
23666: LD_INT 45
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 34
23675: PUSH
23676: LD_INT 28
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 34
23685: PUSH
23686: LD_INT 47
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PPUSH
23704: CALL_OW 69
23708: ST_TO_ADDR
// if not tmp then
23709: LD_VAR 0 2
23713: NOT
23714: IFFALSE 23718
// exit ;
23716: GO 23747
// for i in tmp do
23718: LD_ADDR_VAR 0 1
23722: PUSH
23723: LD_VAR 0 2
23727: PUSH
23728: FOR_IN
23729: IFFALSE 23745
// begin SetLives ( i , 0 ) ;
23731: LD_VAR 0 1
23735: PPUSH
23736: LD_INT 0
23738: PPUSH
23739: CALL_OW 234
// end ;
23743: GO 23728
23745: POP
23746: POP
// end ;
23747: PPOPN 2
23749: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23750: LD_EXP 66
23754: PUSH
23755: LD_EXP 72
23759: AND
23760: IFFALSE 23844
23762: GO 23764
23764: DISABLE
23765: LD_INT 0
23767: PPUSH
23768: PPUSH
// begin enable ;
23769: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23770: LD_ADDR_VAR 0 2
23774: PUSH
23775: LD_INT 22
23777: PUSH
23778: LD_OWVAR 2
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 32
23789: PUSH
23790: LD_INT 3
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 69
23805: ST_TO_ADDR
// if not tmp then
23806: LD_VAR 0 2
23810: NOT
23811: IFFALSE 23815
// exit ;
23813: GO 23844
// for i in tmp do
23815: LD_ADDR_VAR 0 1
23819: PUSH
23820: LD_VAR 0 2
23824: PUSH
23825: FOR_IN
23826: IFFALSE 23842
// begin SetLives ( i , 0 ) ;
23828: LD_VAR 0 1
23832: PPUSH
23833: LD_INT 0
23835: PPUSH
23836: CALL_OW 234
// end ;
23840: GO 23825
23842: POP
23843: POP
// end ;
23844: PPOPN 2
23846: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23847: LD_EXP 66
23851: PUSH
23852: LD_EXP 69
23856: AND
23857: IFFALSE 23950
23859: GO 23861
23861: DISABLE
23862: LD_INT 0
23864: PPUSH
// begin enable ;
23865: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23866: LD_ADDR_VAR 0 1
23870: PUSH
23871: LD_INT 22
23873: PUSH
23874: LD_OWVAR 2
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 2
23885: PUSH
23886: LD_INT 25
23888: PUSH
23889: LD_INT 5
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 25
23898: PUSH
23899: LD_INT 9
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 25
23908: PUSH
23909: LD_INT 8
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PPUSH
23926: CALL_OW 69
23930: PUSH
23931: FOR_IN
23932: IFFALSE 23948
// begin SetClass ( i , 1 ) ;
23934: LD_VAR 0 1
23938: PPUSH
23939: LD_INT 1
23941: PPUSH
23942: CALL_OW 336
// end ;
23946: GO 23931
23948: POP
23949: POP
// end ;
23950: PPOPN 1
23952: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23953: LD_EXP 66
23957: PUSH
23958: LD_EXP 70
23962: AND
23963: PUSH
23964: LD_OWVAR 65
23968: PUSH
23969: LD_INT 7
23971: LESS
23972: AND
23973: IFFALSE 23987
23975: GO 23977
23977: DISABLE
// begin enable ;
23978: ENABLE
// game_speed := 7 ;
23979: LD_ADDR_OWVAR 65
23983: PUSH
23984: LD_INT 7
23986: ST_TO_ADDR
// end ;
23987: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23988: LD_EXP 66
23992: PUSH
23993: LD_EXP 73
23997: AND
23998: IFFALSE 24200
24000: GO 24002
24002: DISABLE
24003: LD_INT 0
24005: PPUSH
24006: PPUSH
24007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24008: LD_ADDR_VAR 0 3
24012: PUSH
24013: LD_INT 81
24015: PUSH
24016: LD_OWVAR 2
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 21
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 69
24043: ST_TO_ADDR
// if not tmp then
24044: LD_VAR 0 3
24048: NOT
24049: IFFALSE 24053
// exit ;
24051: GO 24200
// if tmp > 5 then
24053: LD_VAR 0 3
24057: PUSH
24058: LD_INT 5
24060: GREATER
24061: IFFALSE 24073
// k := 5 else
24063: LD_ADDR_VAR 0 2
24067: PUSH
24068: LD_INT 5
24070: ST_TO_ADDR
24071: GO 24083
// k := tmp ;
24073: LD_ADDR_VAR 0 2
24077: PUSH
24078: LD_VAR 0 3
24082: ST_TO_ADDR
// for i := 1 to k do
24083: LD_ADDR_VAR 0 1
24087: PUSH
24088: DOUBLE
24089: LD_INT 1
24091: DEC
24092: ST_TO_ADDR
24093: LD_VAR 0 2
24097: PUSH
24098: FOR_TO
24099: IFFALSE 24198
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24101: LD_VAR 0 3
24105: PUSH
24106: LD_VAR 0 1
24110: ARRAY
24111: PPUSH
24112: LD_VAR 0 1
24116: PUSH
24117: LD_INT 4
24119: MOD
24120: PUSH
24121: LD_INT 1
24123: PLUS
24124: PPUSH
24125: CALL_OW 259
24129: PUSH
24130: LD_INT 10
24132: LESS
24133: IFFALSE 24196
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24135: LD_VAR 0 3
24139: PUSH
24140: LD_VAR 0 1
24144: ARRAY
24145: PPUSH
24146: LD_VAR 0 1
24150: PUSH
24151: LD_INT 4
24153: MOD
24154: PUSH
24155: LD_INT 1
24157: PLUS
24158: PPUSH
24159: LD_VAR 0 3
24163: PUSH
24164: LD_VAR 0 1
24168: ARRAY
24169: PPUSH
24170: LD_VAR 0 1
24174: PUSH
24175: LD_INT 4
24177: MOD
24178: PUSH
24179: LD_INT 1
24181: PLUS
24182: PPUSH
24183: CALL_OW 259
24187: PUSH
24188: LD_INT 1
24190: PLUS
24191: PPUSH
24192: CALL_OW 237
24196: GO 24098
24198: POP
24199: POP
// end ;
24200: PPOPN 3
24202: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24203: LD_EXP 66
24207: PUSH
24208: LD_EXP 74
24212: AND
24213: IFFALSE 24233
24215: GO 24217
24217: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24218: LD_INT 4
24220: PPUSH
24221: LD_OWVAR 2
24225: PPUSH
24226: LD_INT 0
24228: PPUSH
24229: CALL_OW 324
24233: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24234: LD_EXP 66
24238: PUSH
24239: LD_EXP 103
24243: AND
24244: IFFALSE 24264
24246: GO 24248
24248: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24249: LD_INT 19
24251: PPUSH
24252: LD_OWVAR 2
24256: PPUSH
24257: LD_INT 0
24259: PPUSH
24260: CALL_OW 324
24264: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24265: LD_EXP 66
24269: PUSH
24270: LD_EXP 75
24274: AND
24275: IFFALSE 24377
24277: GO 24279
24279: DISABLE
24280: LD_INT 0
24282: PPUSH
24283: PPUSH
// begin enable ;
24284: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24285: LD_ADDR_VAR 0 2
24289: PUSH
24290: LD_INT 22
24292: PUSH
24293: LD_OWVAR 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: LD_INT 34
24307: PUSH
24308: LD_INT 11
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 34
24317: PUSH
24318: LD_INT 30
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: LIST
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PPUSH
24334: CALL_OW 69
24338: ST_TO_ADDR
// if not tmp then
24339: LD_VAR 0 2
24343: NOT
24344: IFFALSE 24348
// exit ;
24346: GO 24377
// for i in tmp do
24348: LD_ADDR_VAR 0 1
24352: PUSH
24353: LD_VAR 0 2
24357: PUSH
24358: FOR_IN
24359: IFFALSE 24375
// begin SetLives ( i , 0 ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_INT 0
24368: PPUSH
24369: CALL_OW 234
// end ;
24373: GO 24358
24375: POP
24376: POP
// end ;
24377: PPOPN 2
24379: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24380: LD_EXP 66
24384: PUSH
24385: LD_EXP 76
24389: AND
24390: IFFALSE 24410
24392: GO 24394
24394: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24395: LD_INT 32
24397: PPUSH
24398: LD_OWVAR 2
24402: PPUSH
24403: LD_INT 0
24405: PPUSH
24406: CALL_OW 324
24410: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24411: LD_EXP 66
24415: PUSH
24416: LD_EXP 77
24420: AND
24421: IFFALSE 24602
24423: GO 24425
24425: DISABLE
24426: LD_INT 0
24428: PPUSH
24429: PPUSH
24430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24431: LD_ADDR_VAR 0 2
24435: PUSH
24436: LD_INT 22
24438: PUSH
24439: LD_OWVAR 2
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 33
24450: PUSH
24451: LD_INT 3
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PPUSH
24462: CALL_OW 69
24466: ST_TO_ADDR
// if not tmp then
24467: LD_VAR 0 2
24471: NOT
24472: IFFALSE 24476
// exit ;
24474: GO 24602
// side := 0 ;
24476: LD_ADDR_VAR 0 3
24480: PUSH
24481: LD_INT 0
24483: ST_TO_ADDR
// for i := 1 to 8 do
24484: LD_ADDR_VAR 0 1
24488: PUSH
24489: DOUBLE
24490: LD_INT 1
24492: DEC
24493: ST_TO_ADDR
24494: LD_INT 8
24496: PUSH
24497: FOR_TO
24498: IFFALSE 24546
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24500: LD_OWVAR 2
24504: PUSH
24505: LD_VAR 0 1
24509: NONEQUAL
24510: PUSH
24511: LD_OWVAR 2
24515: PPUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 81
24525: PUSH
24526: LD_INT 2
24528: EQUAL
24529: AND
24530: IFFALSE 24544
// begin side := i ;
24532: LD_ADDR_VAR 0 3
24536: PUSH
24537: LD_VAR 0 1
24541: ST_TO_ADDR
// break ;
24542: GO 24546
// end ;
24544: GO 24497
24546: POP
24547: POP
// if not side then
24548: LD_VAR 0 3
24552: NOT
24553: IFFALSE 24557
// exit ;
24555: GO 24602
// for i := 1 to tmp do
24557: LD_ADDR_VAR 0 1
24561: PUSH
24562: DOUBLE
24563: LD_INT 1
24565: DEC
24566: ST_TO_ADDR
24567: LD_VAR 0 2
24571: PUSH
24572: FOR_TO
24573: IFFALSE 24600
// if Prob ( 60 ) then
24575: LD_INT 60
24577: PPUSH
24578: CALL_OW 13
24582: IFFALSE 24598
// SetSide ( i , side ) ;
24584: LD_VAR 0 1
24588: PPUSH
24589: LD_VAR 0 3
24593: PPUSH
24594: CALL_OW 235
24598: GO 24572
24600: POP
24601: POP
// end ;
24602: PPOPN 3
24604: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24605: LD_EXP 66
24609: PUSH
24610: LD_EXP 79
24614: AND
24615: IFFALSE 24734
24617: GO 24619
24619: DISABLE
24620: LD_INT 0
24622: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24623: LD_ADDR_VAR 0 1
24627: PUSH
24628: LD_INT 22
24630: PUSH
24631: LD_OWVAR 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 21
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 3
24652: PUSH
24653: LD_INT 23
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: PPUSH
24672: CALL_OW 69
24676: PUSH
24677: FOR_IN
24678: IFFALSE 24732
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24680: LD_VAR 0 1
24684: PPUSH
24685: CALL_OW 257
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 3
24698: PUSH
24699: LD_INT 4
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: IN
24708: IFFALSE 24730
// SetClass ( un , rand ( 1 , 4 ) ) ;
24710: LD_VAR 0 1
24714: PPUSH
24715: LD_INT 1
24717: PPUSH
24718: LD_INT 4
24720: PPUSH
24721: CALL_OW 12
24725: PPUSH
24726: CALL_OW 336
24730: GO 24677
24732: POP
24733: POP
// end ;
24734: PPOPN 1
24736: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24737: LD_EXP 66
24741: PUSH
24742: LD_EXP 78
24746: AND
24747: IFFALSE 24826
24749: GO 24751
24751: DISABLE
24752: LD_INT 0
24754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24755: LD_ADDR_VAR 0 1
24759: PUSH
24760: LD_INT 22
24762: PUSH
24763: LD_OWVAR 2
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 21
24774: PUSH
24775: LD_INT 3
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PPUSH
24786: CALL_OW 69
24790: ST_TO_ADDR
// if not tmp then
24791: LD_VAR 0 1
24795: NOT
24796: IFFALSE 24800
// exit ;
24798: GO 24826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24800: LD_VAR 0 1
24804: PUSH
24805: LD_INT 1
24807: PPUSH
24808: LD_VAR 0 1
24812: PPUSH
24813: CALL_OW 12
24817: ARRAY
24818: PPUSH
24819: LD_INT 100
24821: PPUSH
24822: CALL_OW 234
// end ;
24826: PPOPN 1
24828: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24829: LD_EXP 66
24833: PUSH
24834: LD_EXP 80
24838: AND
24839: IFFALSE 24937
24841: GO 24843
24843: DISABLE
24844: LD_INT 0
24846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24847: LD_ADDR_VAR 0 1
24851: PUSH
24852: LD_INT 22
24854: PUSH
24855: LD_OWVAR 2
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 21
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PPUSH
24878: CALL_OW 69
24882: ST_TO_ADDR
// if not tmp then
24883: LD_VAR 0 1
24887: NOT
24888: IFFALSE 24892
// exit ;
24890: GO 24937
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24892: LD_VAR 0 1
24896: PUSH
24897: LD_INT 1
24899: PPUSH
24900: LD_VAR 0 1
24904: PPUSH
24905: CALL_OW 12
24909: ARRAY
24910: PPUSH
24911: LD_INT 1
24913: PPUSH
24914: LD_INT 4
24916: PPUSH
24917: CALL_OW 12
24921: PPUSH
24922: LD_INT 3000
24924: PPUSH
24925: LD_INT 9000
24927: PPUSH
24928: CALL_OW 12
24932: PPUSH
24933: CALL_OW 492
// end ;
24937: PPOPN 1
24939: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24940: LD_EXP 66
24944: PUSH
24945: LD_EXP 81
24949: AND
24950: IFFALSE 24970
24952: GO 24954
24954: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24955: LD_INT 1
24957: PPUSH
24958: LD_OWVAR 2
24962: PPUSH
24963: LD_INT 0
24965: PPUSH
24966: CALL_OW 324
24970: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24971: LD_EXP 66
24975: PUSH
24976: LD_EXP 82
24980: AND
24981: IFFALSE 25064
24983: GO 24985
24985: DISABLE
24986: LD_INT 0
24988: PPUSH
24989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24990: LD_ADDR_VAR 0 2
24994: PUSH
24995: LD_INT 22
24997: PUSH
24998: LD_OWVAR 2
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 21
25009: PUSH
25010: LD_INT 3
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PPUSH
25021: CALL_OW 69
25025: ST_TO_ADDR
// if not tmp then
25026: LD_VAR 0 2
25030: NOT
25031: IFFALSE 25035
// exit ;
25033: GO 25064
// for i in tmp do
25035: LD_ADDR_VAR 0 1
25039: PUSH
25040: LD_VAR 0 2
25044: PUSH
25045: FOR_IN
25046: IFFALSE 25062
// SetBLevel ( i , 10 ) ;
25048: LD_VAR 0 1
25052: PPUSH
25053: LD_INT 10
25055: PPUSH
25056: CALL_OW 241
25060: GO 25045
25062: POP
25063: POP
// end ;
25064: PPOPN 2
25066: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25067: LD_EXP 66
25071: PUSH
25072: LD_EXP 83
25076: AND
25077: IFFALSE 25188
25079: GO 25081
25081: DISABLE
25082: LD_INT 0
25084: PPUSH
25085: PPUSH
25086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25087: LD_ADDR_VAR 0 3
25091: PUSH
25092: LD_INT 22
25094: PUSH
25095: LD_OWVAR 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 25
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PPUSH
25118: CALL_OW 69
25122: ST_TO_ADDR
// if not tmp then
25123: LD_VAR 0 3
25127: NOT
25128: IFFALSE 25132
// exit ;
25130: GO 25188
// un := tmp [ rand ( 1 , tmp ) ] ;
25132: LD_ADDR_VAR 0 2
25136: PUSH
25137: LD_VAR 0 3
25141: PUSH
25142: LD_INT 1
25144: PPUSH
25145: LD_VAR 0 3
25149: PPUSH
25150: CALL_OW 12
25154: ARRAY
25155: ST_TO_ADDR
// if Crawls ( un ) then
25156: LD_VAR 0 2
25160: PPUSH
25161: CALL_OW 318
25165: IFFALSE 25176
// ComWalk ( un ) ;
25167: LD_VAR 0 2
25171: PPUSH
25172: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25176: LD_VAR 0 2
25180: PPUSH
25181: LD_INT 5
25183: PPUSH
25184: CALL_OW 336
// end ;
25188: PPOPN 3
25190: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25191: LD_EXP 66
25195: PUSH
25196: LD_EXP 84
25200: AND
25201: PUSH
25202: LD_OWVAR 67
25206: PUSH
25207: LD_INT 3
25209: LESS
25210: AND
25211: IFFALSE 25230
25213: GO 25215
25215: DISABLE
// Difficulty := Difficulty + 1 ;
25216: LD_ADDR_OWVAR 67
25220: PUSH
25221: LD_OWVAR 67
25225: PUSH
25226: LD_INT 1
25228: PLUS
25229: ST_TO_ADDR
25230: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25231: LD_EXP 66
25235: PUSH
25236: LD_EXP 85
25240: AND
25241: IFFALSE 25344
25243: GO 25245
25245: DISABLE
25246: LD_INT 0
25248: PPUSH
// begin for i := 1 to 5 do
25249: LD_ADDR_VAR 0 1
25253: PUSH
25254: DOUBLE
25255: LD_INT 1
25257: DEC
25258: ST_TO_ADDR
25259: LD_INT 5
25261: PUSH
25262: FOR_TO
25263: IFFALSE 25342
// begin uc_nation := nation_nature ;
25265: LD_ADDR_OWVAR 21
25269: PUSH
25270: LD_INT 0
25272: ST_TO_ADDR
// uc_side := 0 ;
25273: LD_ADDR_OWVAR 20
25277: PUSH
25278: LD_INT 0
25280: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25281: LD_ADDR_OWVAR 29
25285: PUSH
25286: LD_INT 12
25288: PUSH
25289: LD_INT 12
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: ST_TO_ADDR
// hc_agressivity := 20 ;
25296: LD_ADDR_OWVAR 35
25300: PUSH
25301: LD_INT 20
25303: ST_TO_ADDR
// hc_class := class_tiger ;
25304: LD_ADDR_OWVAR 28
25308: PUSH
25309: LD_INT 14
25311: ST_TO_ADDR
// hc_gallery :=  ;
25312: LD_ADDR_OWVAR 33
25316: PUSH
25317: LD_STRING 
25319: ST_TO_ADDR
// hc_name :=  ;
25320: LD_ADDR_OWVAR 26
25324: PUSH
25325: LD_STRING 
25327: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25328: CALL_OW 44
25332: PPUSH
25333: LD_INT 0
25335: PPUSH
25336: CALL_OW 51
// end ;
25340: GO 25262
25342: POP
25343: POP
// end ;
25344: PPOPN 1
25346: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25347: LD_EXP 66
25351: PUSH
25352: LD_EXP 86
25356: AND
25357: IFFALSE 25366
25359: GO 25361
25361: DISABLE
// StreamSibBomb ;
25362: CALL 25367 0 0
25366: END
// export function StreamSibBomb ; var i , x , y ; begin
25367: LD_INT 0
25369: PPUSH
25370: PPUSH
25371: PPUSH
25372: PPUSH
// result := false ;
25373: LD_ADDR_VAR 0 1
25377: PUSH
25378: LD_INT 0
25380: ST_TO_ADDR
// for i := 1 to 16 do
25381: LD_ADDR_VAR 0 2
25385: PUSH
25386: DOUBLE
25387: LD_INT 1
25389: DEC
25390: ST_TO_ADDR
25391: LD_INT 16
25393: PUSH
25394: FOR_TO
25395: IFFALSE 25594
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_INT 10
25404: PUSH
25405: LD_INT 20
25407: PUSH
25408: LD_INT 30
25410: PUSH
25411: LD_INT 40
25413: PUSH
25414: LD_INT 50
25416: PUSH
25417: LD_INT 60
25419: PUSH
25420: LD_INT 70
25422: PUSH
25423: LD_INT 80
25425: PUSH
25426: LD_INT 90
25428: PUSH
25429: LD_INT 100
25431: PUSH
25432: LD_INT 110
25434: PUSH
25435: LD_INT 120
25437: PUSH
25438: LD_INT 130
25440: PUSH
25441: LD_INT 140
25443: PUSH
25444: LD_INT 150
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 1
25466: PPUSH
25467: LD_INT 15
25469: PPUSH
25470: CALL_OW 12
25474: ARRAY
25475: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25476: LD_ADDR_VAR 0 4
25480: PUSH
25481: LD_INT 10
25483: PUSH
25484: LD_INT 20
25486: PUSH
25487: LD_INT 30
25489: PUSH
25490: LD_INT 40
25492: PUSH
25493: LD_INT 50
25495: PUSH
25496: LD_INT 60
25498: PUSH
25499: LD_INT 70
25501: PUSH
25502: LD_INT 80
25504: PUSH
25505: LD_INT 90
25507: PUSH
25508: LD_INT 100
25510: PUSH
25511: LD_INT 110
25513: PUSH
25514: LD_INT 120
25516: PUSH
25517: LD_INT 130
25519: PUSH
25520: LD_INT 140
25522: PUSH
25523: LD_INT 150
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: PPUSH
25546: LD_INT 15
25548: PPUSH
25549: CALL_OW 12
25553: ARRAY
25554: ST_TO_ADDR
// if ValidHex ( x , y ) then
25555: LD_VAR 0 3
25559: PPUSH
25560: LD_VAR 0 4
25564: PPUSH
25565: CALL_OW 488
25569: IFFALSE 25592
// begin result := [ x , y ] ;
25571: LD_ADDR_VAR 0 1
25575: PUSH
25576: LD_VAR 0 3
25580: PUSH
25581: LD_VAR 0 4
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: ST_TO_ADDR
// break ;
25590: GO 25594
// end ; end ;
25592: GO 25394
25594: POP
25595: POP
// if result then
25596: LD_VAR 0 1
25600: IFFALSE 25660
// begin ToLua ( playSibBomb() ) ;
25602: LD_STRING playSibBomb()
25604: PPUSH
25605: CALL_OW 559
// wait ( 0 0$14 ) ;
25609: LD_INT 490
25611: PPUSH
25612: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25616: LD_VAR 0 1
25620: PUSH
25621: LD_INT 1
25623: ARRAY
25624: PPUSH
25625: LD_VAR 0 1
25629: PUSH
25630: LD_INT 2
25632: ARRAY
25633: PPUSH
25634: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25638: LD_VAR 0 1
25642: PUSH
25643: LD_INT 1
25645: ARRAY
25646: PPUSH
25647: LD_VAR 0 1
25651: PUSH
25652: LD_INT 2
25654: ARRAY
25655: PPUSH
25656: CALL_OW 429
// end ; end ;
25660: LD_VAR 0 1
25664: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25665: LD_EXP 66
25669: PUSH
25670: LD_EXP 88
25674: AND
25675: IFFALSE 25687
25677: GO 25679
25679: DISABLE
// YouLost (  ) ;
25680: LD_STRING 
25682: PPUSH
25683: CALL_OW 104
25687: END
// every 0 0$1 trigger StreamModeActive and sFog do
25688: LD_EXP 66
25692: PUSH
25693: LD_EXP 87
25697: AND
25698: IFFALSE 25712
25700: GO 25702
25702: DISABLE
// FogOff ( your_side ) ;
25703: LD_OWVAR 2
25707: PPUSH
25708: CALL_OW 344
25712: END
// every 0 0$1 trigger StreamModeActive and sSun do
25713: LD_EXP 66
25717: PUSH
25718: LD_EXP 89
25722: AND
25723: IFFALSE 25751
25725: GO 25727
25727: DISABLE
// begin solar_recharge_percent := 0 ;
25728: LD_ADDR_OWVAR 79
25732: PUSH
25733: LD_INT 0
25735: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25736: LD_INT 10500
25738: PPUSH
25739: CALL_OW 67
// solar_recharge_percent := 100 ;
25743: LD_ADDR_OWVAR 79
25747: PUSH
25748: LD_INT 100
25750: ST_TO_ADDR
// end ;
25751: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25752: LD_EXP 66
25756: PUSH
25757: LD_EXP 90
25761: AND
25762: IFFALSE 26001
25764: GO 25766
25766: DISABLE
25767: LD_INT 0
25769: PPUSH
25770: PPUSH
25771: PPUSH
// begin tmp := [ ] ;
25772: LD_ADDR_VAR 0 3
25776: PUSH
25777: EMPTY
25778: ST_TO_ADDR
// for i := 1 to 6 do
25779: LD_ADDR_VAR 0 1
25783: PUSH
25784: DOUBLE
25785: LD_INT 1
25787: DEC
25788: ST_TO_ADDR
25789: LD_INT 6
25791: PUSH
25792: FOR_TO
25793: IFFALSE 25898
// begin uc_nation := nation_nature ;
25795: LD_ADDR_OWVAR 21
25799: PUSH
25800: LD_INT 0
25802: ST_TO_ADDR
// uc_side := 0 ;
25803: LD_ADDR_OWVAR 20
25807: PUSH
25808: LD_INT 0
25810: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25811: LD_ADDR_OWVAR 29
25815: PUSH
25816: LD_INT 12
25818: PUSH
25819: LD_INT 12
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: ST_TO_ADDR
// hc_agressivity := 20 ;
25826: LD_ADDR_OWVAR 35
25830: PUSH
25831: LD_INT 20
25833: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25834: LD_ADDR_OWVAR 28
25838: PUSH
25839: LD_INT 17
25841: ST_TO_ADDR
// hc_gallery :=  ;
25842: LD_ADDR_OWVAR 33
25846: PUSH
25847: LD_STRING 
25849: ST_TO_ADDR
// hc_name :=  ;
25850: LD_ADDR_OWVAR 26
25854: PUSH
25855: LD_STRING 
25857: ST_TO_ADDR
// un := CreateHuman ;
25858: LD_ADDR_VAR 0 2
25862: PUSH
25863: CALL_OW 44
25867: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25868: LD_VAR 0 2
25872: PPUSH
25873: LD_INT 1
25875: PPUSH
25876: CALL_OW 51
// tmp := tmp ^ un ;
25880: LD_ADDR_VAR 0 3
25884: PUSH
25885: LD_VAR 0 3
25889: PUSH
25890: LD_VAR 0 2
25894: ADD
25895: ST_TO_ADDR
// end ;
25896: GO 25792
25898: POP
25899: POP
// repeat wait ( 0 0$1 ) ;
25900: LD_INT 35
25902: PPUSH
25903: CALL_OW 67
// for un in tmp do
25907: LD_ADDR_VAR 0 2
25911: PUSH
25912: LD_VAR 0 3
25916: PUSH
25917: FOR_IN
25918: IFFALSE 25992
// begin if IsDead ( un ) then
25920: LD_VAR 0 2
25924: PPUSH
25925: CALL_OW 301
25929: IFFALSE 25949
// begin tmp := tmp diff un ;
25931: LD_ADDR_VAR 0 3
25935: PUSH
25936: LD_VAR 0 3
25940: PUSH
25941: LD_VAR 0 2
25945: DIFF
25946: ST_TO_ADDR
// continue ;
25947: GO 25917
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25949: LD_VAR 0 2
25953: PPUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 22
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PPUSH
25971: CALL_OW 69
25975: PPUSH
25976: LD_VAR 0 2
25980: PPUSH
25981: CALL_OW 74
25985: PPUSH
25986: CALL_OW 115
// end ;
25990: GO 25917
25992: POP
25993: POP
// until not tmp ;
25994: LD_VAR 0 3
25998: NOT
25999: IFFALSE 25900
// end ;
26001: PPOPN 3
26003: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26004: LD_EXP 66
26008: PUSH
26009: LD_EXP 91
26013: AND
26014: IFFALSE 26068
26016: GO 26018
26018: DISABLE
// begin ToLua ( displayTroll(); ) ;
26019: LD_STRING displayTroll();
26021: PPUSH
26022: CALL_OW 559
// wait ( 3 3$00 ) ;
26026: LD_INT 6300
26028: PPUSH
26029: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26033: LD_STRING hideTroll();
26035: PPUSH
26036: CALL_OW 559
// wait ( 1 1$00 ) ;
26040: LD_INT 2100
26042: PPUSH
26043: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26047: LD_STRING displayTroll();
26049: PPUSH
26050: CALL_OW 559
// wait ( 1 1$00 ) ;
26054: LD_INT 2100
26056: PPUSH
26057: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26061: LD_STRING hideTroll();
26063: PPUSH
26064: CALL_OW 559
// end ;
26068: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26069: LD_EXP 66
26073: PUSH
26074: LD_EXP 92
26078: AND
26079: IFFALSE 26142
26081: GO 26083
26083: DISABLE
26084: LD_INT 0
26086: PPUSH
// begin p := 0 ;
26087: LD_ADDR_VAR 0 1
26091: PUSH
26092: LD_INT 0
26094: ST_TO_ADDR
// repeat game_speed := 1 ;
26095: LD_ADDR_OWVAR 65
26099: PUSH
26100: LD_INT 1
26102: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26103: LD_INT 35
26105: PPUSH
26106: CALL_OW 67
// p := p + 1 ;
26110: LD_ADDR_VAR 0 1
26114: PUSH
26115: LD_VAR 0 1
26119: PUSH
26120: LD_INT 1
26122: PLUS
26123: ST_TO_ADDR
// until p >= 60 ;
26124: LD_VAR 0 1
26128: PUSH
26129: LD_INT 60
26131: GREATEREQUAL
26132: IFFALSE 26095
// game_speed := 4 ;
26134: LD_ADDR_OWVAR 65
26138: PUSH
26139: LD_INT 4
26141: ST_TO_ADDR
// end ;
26142: PPOPN 1
26144: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26145: LD_EXP 66
26149: PUSH
26150: LD_EXP 93
26154: AND
26155: IFFALSE 26301
26157: GO 26159
26159: DISABLE
26160: LD_INT 0
26162: PPUSH
26163: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26164: LD_ADDR_VAR 0 1
26168: PUSH
26169: LD_INT 22
26171: PUSH
26172: LD_OWVAR 2
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 2
26183: PUSH
26184: LD_INT 30
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 30
26196: PUSH
26197: LD_INT 1
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: LIST
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PPUSH
26213: CALL_OW 69
26217: ST_TO_ADDR
// if not depot then
26218: LD_VAR 0 1
26222: NOT
26223: IFFALSE 26227
// exit ;
26225: GO 26301
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26227: LD_ADDR_VAR 0 2
26231: PUSH
26232: LD_VAR 0 1
26236: PUSH
26237: LD_INT 1
26239: PPUSH
26240: LD_VAR 0 1
26244: PPUSH
26245: CALL_OW 12
26249: ARRAY
26250: PPUSH
26251: CALL_OW 274
26255: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26256: LD_VAR 0 2
26260: PPUSH
26261: LD_INT 1
26263: PPUSH
26264: LD_INT 0
26266: PPUSH
26267: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26271: LD_VAR 0 2
26275: PPUSH
26276: LD_INT 2
26278: PPUSH
26279: LD_INT 0
26281: PPUSH
26282: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26286: LD_VAR 0 2
26290: PPUSH
26291: LD_INT 3
26293: PPUSH
26294: LD_INT 0
26296: PPUSH
26297: CALL_OW 277
// end ;
26301: PPOPN 2
26303: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26304: LD_EXP 66
26308: PUSH
26309: LD_EXP 94
26313: AND
26314: IFFALSE 26411
26316: GO 26318
26318: DISABLE
26319: LD_INT 0
26321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26322: LD_ADDR_VAR 0 1
26326: PUSH
26327: LD_INT 22
26329: PUSH
26330: LD_OWVAR 2
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 21
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 3
26351: PUSH
26352: LD_INT 23
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: LIST
26370: PPUSH
26371: CALL_OW 69
26375: ST_TO_ADDR
// if not tmp then
26376: LD_VAR 0 1
26380: NOT
26381: IFFALSE 26385
// exit ;
26383: GO 26411
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26385: LD_VAR 0 1
26389: PUSH
26390: LD_INT 1
26392: PPUSH
26393: LD_VAR 0 1
26397: PPUSH
26398: CALL_OW 12
26402: ARRAY
26403: PPUSH
26404: LD_INT 200
26406: PPUSH
26407: CALL_OW 234
// end ;
26411: PPOPN 1
26413: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26414: LD_EXP 66
26418: PUSH
26419: LD_EXP 95
26423: AND
26424: IFFALSE 26503
26426: GO 26428
26428: DISABLE
26429: LD_INT 0
26431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26432: LD_ADDR_VAR 0 1
26436: PUSH
26437: LD_INT 22
26439: PUSH
26440: LD_OWVAR 2
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 21
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 69
26467: ST_TO_ADDR
// if not tmp then
26468: LD_VAR 0 1
26472: NOT
26473: IFFALSE 26477
// exit ;
26475: GO 26503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26477: LD_VAR 0 1
26481: PUSH
26482: LD_INT 1
26484: PPUSH
26485: LD_VAR 0 1
26489: PPUSH
26490: CALL_OW 12
26494: ARRAY
26495: PPUSH
26496: LD_INT 60
26498: PPUSH
26499: CALL_OW 234
// end ;
26503: PPOPN 1
26505: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26506: LD_EXP 66
26510: PUSH
26511: LD_EXP 96
26515: AND
26516: IFFALSE 26615
26518: GO 26520
26520: DISABLE
26521: LD_INT 0
26523: PPUSH
26524: PPUSH
// begin enable ;
26525: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26526: LD_ADDR_VAR 0 1
26530: PUSH
26531: LD_INT 22
26533: PUSH
26534: LD_OWVAR 2
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 61
26545: PUSH
26546: EMPTY
26547: LIST
26548: PUSH
26549: LD_INT 33
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: PPUSH
26564: CALL_OW 69
26568: ST_TO_ADDR
// if not tmp then
26569: LD_VAR 0 1
26573: NOT
26574: IFFALSE 26578
// exit ;
26576: GO 26615
// for i in tmp do
26578: LD_ADDR_VAR 0 2
26582: PUSH
26583: LD_VAR 0 1
26587: PUSH
26588: FOR_IN
26589: IFFALSE 26613
// if IsControledBy ( i ) then
26591: LD_VAR 0 2
26595: PPUSH
26596: CALL_OW 312
26600: IFFALSE 26611
// ComUnlink ( i ) ;
26602: LD_VAR 0 2
26606: PPUSH
26607: CALL_OW 136
26611: GO 26588
26613: POP
26614: POP
// end ;
26615: PPOPN 2
26617: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26618: LD_EXP 66
26622: PUSH
26623: LD_EXP 97
26627: AND
26628: IFFALSE 26768
26630: GO 26632
26632: DISABLE
26633: LD_INT 0
26635: PPUSH
26636: PPUSH
// begin ToLua ( displayPowell(); ) ;
26637: LD_STRING displayPowell();
26639: PPUSH
26640: CALL_OW 559
// uc_side := 0 ;
26644: LD_ADDR_OWVAR 20
26648: PUSH
26649: LD_INT 0
26651: ST_TO_ADDR
// uc_nation := 2 ;
26652: LD_ADDR_OWVAR 21
26656: PUSH
26657: LD_INT 2
26659: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26660: LD_ADDR_OWVAR 37
26664: PUSH
26665: LD_INT 14
26667: ST_TO_ADDR
// vc_engine := engine_siberite ;
26668: LD_ADDR_OWVAR 39
26672: PUSH
26673: LD_INT 3
26675: ST_TO_ADDR
// vc_control := control_apeman ;
26676: LD_ADDR_OWVAR 38
26680: PUSH
26681: LD_INT 5
26683: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26684: LD_ADDR_OWVAR 40
26688: PUSH
26689: LD_INT 29
26691: ST_TO_ADDR
// un := CreateVehicle ;
26692: LD_ADDR_VAR 0 2
26696: PUSH
26697: CALL_OW 45
26701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26702: LD_VAR 0 2
26706: PPUSH
26707: LD_INT 1
26709: PPUSH
26710: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26714: LD_INT 35
26716: PPUSH
26717: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26721: LD_VAR 0 2
26725: PPUSH
26726: LD_INT 22
26728: PUSH
26729: LD_OWVAR 2
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PPUSH
26738: CALL_OW 69
26742: PPUSH
26743: LD_VAR 0 2
26747: PPUSH
26748: CALL_OW 74
26752: PPUSH
26753: CALL_OW 115
// until IsDead ( un ) ;
26757: LD_VAR 0 2
26761: PPUSH
26762: CALL_OW 301
26766: IFFALSE 26714
// end ;
26768: PPOPN 2
26770: END
// every 0 0$1 trigger StreamModeActive and sStu do
26771: LD_EXP 66
26775: PUSH
26776: LD_EXP 105
26780: AND
26781: IFFALSE 26797
26783: GO 26785
26785: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26786: LD_STRING displayStucuk();
26788: PPUSH
26789: CALL_OW 559
// ResetFog ;
26793: CALL_OW 335
// end ;
26797: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26798: LD_EXP 66
26802: PUSH
26803: LD_EXP 98
26807: AND
26808: IFFALSE 26949
26810: GO 26812
26812: DISABLE
26813: LD_INT 0
26815: PPUSH
26816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26817: LD_ADDR_VAR 0 2
26821: PUSH
26822: LD_INT 22
26824: PUSH
26825: LD_OWVAR 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 21
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PPUSH
26848: CALL_OW 69
26852: ST_TO_ADDR
// if not tmp then
26853: LD_VAR 0 2
26857: NOT
26858: IFFALSE 26862
// exit ;
26860: GO 26949
// un := tmp [ rand ( 1 , tmp ) ] ;
26862: LD_ADDR_VAR 0 1
26866: PUSH
26867: LD_VAR 0 2
26871: PUSH
26872: LD_INT 1
26874: PPUSH
26875: LD_VAR 0 2
26879: PPUSH
26880: CALL_OW 12
26884: ARRAY
26885: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26886: LD_VAR 0 1
26890: PPUSH
26891: LD_INT 0
26893: PPUSH
26894: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26898: LD_VAR 0 1
26902: PPUSH
26903: LD_OWVAR 3
26907: PUSH
26908: LD_VAR 0 1
26912: DIFF
26913: PPUSH
26914: LD_VAR 0 1
26918: PPUSH
26919: CALL_OW 74
26923: PPUSH
26924: CALL_OW 115
// wait ( 0 0$20 ) ;
26928: LD_INT 700
26930: PPUSH
26931: CALL_OW 67
// SetSide ( un , your_side ) ;
26935: LD_VAR 0 1
26939: PPUSH
26940: LD_OWVAR 2
26944: PPUSH
26945: CALL_OW 235
// end ;
26949: PPOPN 2
26951: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26952: LD_EXP 66
26956: PUSH
26957: LD_EXP 99
26961: AND
26962: IFFALSE 27068
26964: GO 26966
26966: DISABLE
26967: LD_INT 0
26969: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26970: LD_ADDR_VAR 0 1
26974: PUSH
26975: LD_INT 22
26977: PUSH
26978: LD_OWVAR 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: LD_INT 30
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 30
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PPUSH
27019: CALL_OW 69
27023: ST_TO_ADDR
// if not depot then
27024: LD_VAR 0 1
27028: NOT
27029: IFFALSE 27033
// exit ;
27031: GO 27068
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27033: LD_VAR 0 1
27037: PUSH
27038: LD_INT 1
27040: ARRAY
27041: PPUSH
27042: CALL_OW 250
27046: PPUSH
27047: LD_VAR 0 1
27051: PUSH
27052: LD_INT 1
27054: ARRAY
27055: PPUSH
27056: CALL_OW 251
27060: PPUSH
27061: LD_INT 70
27063: PPUSH
27064: CALL_OW 495
// end ;
27068: PPOPN 1
27070: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27071: LD_EXP 66
27075: PUSH
27076: LD_EXP 100
27080: AND
27081: IFFALSE 27292
27083: GO 27085
27085: DISABLE
27086: LD_INT 0
27088: PPUSH
27089: PPUSH
27090: PPUSH
27091: PPUSH
27092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27093: LD_ADDR_VAR 0 5
27097: PUSH
27098: LD_INT 22
27100: PUSH
27101: LD_OWVAR 2
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 21
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PPUSH
27124: CALL_OW 69
27128: ST_TO_ADDR
// if not tmp then
27129: LD_VAR 0 5
27133: NOT
27134: IFFALSE 27138
// exit ;
27136: GO 27292
// for i in tmp do
27138: LD_ADDR_VAR 0 1
27142: PUSH
27143: LD_VAR 0 5
27147: PUSH
27148: FOR_IN
27149: IFFALSE 27290
// begin d := rand ( 0 , 5 ) ;
27151: LD_ADDR_VAR 0 4
27155: PUSH
27156: LD_INT 0
27158: PPUSH
27159: LD_INT 5
27161: PPUSH
27162: CALL_OW 12
27166: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27167: LD_ADDR_VAR 0 2
27171: PUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 250
27181: PPUSH
27182: LD_VAR 0 4
27186: PPUSH
27187: LD_INT 3
27189: PPUSH
27190: LD_INT 12
27192: PPUSH
27193: CALL_OW 12
27197: PPUSH
27198: CALL_OW 272
27202: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27203: LD_ADDR_VAR 0 3
27207: PUSH
27208: LD_VAR 0 1
27212: PPUSH
27213: CALL_OW 251
27217: PPUSH
27218: LD_VAR 0 4
27222: PPUSH
27223: LD_INT 3
27225: PPUSH
27226: LD_INT 12
27228: PPUSH
27229: CALL_OW 12
27233: PPUSH
27234: CALL_OW 273
27238: ST_TO_ADDR
// if ValidHex ( x , y ) then
27239: LD_VAR 0 2
27243: PPUSH
27244: LD_VAR 0 3
27248: PPUSH
27249: CALL_OW 488
27253: IFFALSE 27288
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27255: LD_VAR 0 1
27259: PPUSH
27260: LD_VAR 0 2
27264: PPUSH
27265: LD_VAR 0 3
27269: PPUSH
27270: LD_INT 3
27272: PPUSH
27273: LD_INT 6
27275: PPUSH
27276: CALL_OW 12
27280: PPUSH
27281: LD_INT 1
27283: PPUSH
27284: CALL_OW 483
// end ;
27288: GO 27148
27290: POP
27291: POP
// end ;
27292: PPOPN 5
27294: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27295: LD_EXP 66
27299: PUSH
27300: LD_EXP 101
27304: AND
27305: IFFALSE 27399
27307: GO 27309
27309: DISABLE
27310: LD_INT 0
27312: PPUSH
27313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27314: LD_ADDR_VAR 0 2
27318: PUSH
27319: LD_INT 22
27321: PUSH
27322: LD_OWVAR 2
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 32
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 21
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: PPUSH
27356: CALL_OW 69
27360: ST_TO_ADDR
// if not tmp then
27361: LD_VAR 0 2
27365: NOT
27366: IFFALSE 27370
// exit ;
27368: GO 27399
// for i in tmp do
27370: LD_ADDR_VAR 0 1
27374: PUSH
27375: LD_VAR 0 2
27379: PUSH
27380: FOR_IN
27381: IFFALSE 27397
// SetFuel ( i , 0 ) ;
27383: LD_VAR 0 1
27387: PPUSH
27388: LD_INT 0
27390: PPUSH
27391: CALL_OW 240
27395: GO 27380
27397: POP
27398: POP
// end ;
27399: PPOPN 2
27401: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27402: LD_EXP 66
27406: PUSH
27407: LD_EXP 102
27411: AND
27412: IFFALSE 27478
27414: GO 27416
27416: DISABLE
27417: LD_INT 0
27419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27420: LD_ADDR_VAR 0 1
27424: PUSH
27425: LD_INT 22
27427: PUSH
27428: LD_OWVAR 2
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 30
27439: PUSH
27440: LD_INT 29
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL_OW 69
27455: ST_TO_ADDR
// if not tmp then
27456: LD_VAR 0 1
27460: NOT
27461: IFFALSE 27465
// exit ;
27463: GO 27478
// DestroyUnit ( tmp [ 1 ] ) ;
27465: LD_VAR 0 1
27469: PUSH
27470: LD_INT 1
27472: ARRAY
27473: PPUSH
27474: CALL_OW 65
// end ;
27478: PPOPN 1
27480: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27481: LD_EXP 66
27485: PUSH
27486: LD_EXP 104
27490: AND
27491: IFFALSE 27620
27493: GO 27495
27495: DISABLE
27496: LD_INT 0
27498: PPUSH
// begin uc_side := 0 ;
27499: LD_ADDR_OWVAR 20
27503: PUSH
27504: LD_INT 0
27506: ST_TO_ADDR
// uc_nation := nation_arabian ;
27507: LD_ADDR_OWVAR 21
27511: PUSH
27512: LD_INT 2
27514: ST_TO_ADDR
// hc_gallery :=  ;
27515: LD_ADDR_OWVAR 33
27519: PUSH
27520: LD_STRING 
27522: ST_TO_ADDR
// hc_name :=  ;
27523: LD_ADDR_OWVAR 26
27527: PUSH
27528: LD_STRING 
27530: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27531: LD_INT 1
27533: PPUSH
27534: LD_INT 11
27536: PPUSH
27537: LD_INT 10
27539: PPUSH
27540: CALL_OW 380
// un := CreateHuman ;
27544: LD_ADDR_VAR 0 1
27548: PUSH
27549: CALL_OW 44
27553: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27554: LD_VAR 0 1
27558: PPUSH
27559: LD_INT 1
27561: PPUSH
27562: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27566: LD_INT 35
27568: PPUSH
27569: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27573: LD_VAR 0 1
27577: PPUSH
27578: LD_INT 22
27580: PUSH
27581: LD_OWVAR 2
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PPUSH
27590: CALL_OW 69
27594: PPUSH
27595: LD_VAR 0 1
27599: PPUSH
27600: CALL_OW 74
27604: PPUSH
27605: CALL_OW 115
// until IsDead ( un ) ;
27609: LD_VAR 0 1
27613: PPUSH
27614: CALL_OW 301
27618: IFFALSE 27566
// end ;
27620: PPOPN 1
27622: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27623: LD_EXP 66
27627: PUSH
27628: LD_EXP 106
27632: AND
27633: IFFALSE 27645
27635: GO 27637
27637: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27638: LD_STRING earthquake(getX(game), 0, 32)
27640: PPUSH
27641: CALL_OW 559
27645: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27646: LD_EXP 66
27650: PUSH
27651: LD_EXP 107
27655: AND
27656: IFFALSE 27747
27658: GO 27660
27660: DISABLE
27661: LD_INT 0
27663: PPUSH
// begin enable ;
27664: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27665: LD_ADDR_VAR 0 1
27669: PUSH
27670: LD_INT 22
27672: PUSH
27673: LD_OWVAR 2
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 21
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 33
27694: PUSH
27695: LD_INT 3
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: PPUSH
27707: CALL_OW 69
27711: ST_TO_ADDR
// if not tmp then
27712: LD_VAR 0 1
27716: NOT
27717: IFFALSE 27721
// exit ;
27719: GO 27747
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27721: LD_VAR 0 1
27725: PUSH
27726: LD_INT 1
27728: PPUSH
27729: LD_VAR 0 1
27733: PPUSH
27734: CALL_OW 12
27738: ARRAY
27739: PPUSH
27740: LD_INT 1
27742: PPUSH
27743: CALL_OW 234
// end ;
27747: PPOPN 1
27749: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27750: LD_EXP 66
27754: PUSH
27755: LD_EXP 108
27759: AND
27760: IFFALSE 27901
27762: GO 27764
27764: DISABLE
27765: LD_INT 0
27767: PPUSH
27768: PPUSH
27769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27770: LD_ADDR_VAR 0 3
27774: PUSH
27775: LD_INT 22
27777: PUSH
27778: LD_OWVAR 2
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 25
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PPUSH
27801: CALL_OW 69
27805: ST_TO_ADDR
// if not tmp then
27806: LD_VAR 0 3
27810: NOT
27811: IFFALSE 27815
// exit ;
27813: GO 27901
// un := tmp [ rand ( 1 , tmp ) ] ;
27815: LD_ADDR_VAR 0 2
27819: PUSH
27820: LD_VAR 0 3
27824: PUSH
27825: LD_INT 1
27827: PPUSH
27828: LD_VAR 0 3
27832: PPUSH
27833: CALL_OW 12
27837: ARRAY
27838: ST_TO_ADDR
// if Crawls ( un ) then
27839: LD_VAR 0 2
27843: PPUSH
27844: CALL_OW 318
27848: IFFALSE 27859
// ComWalk ( un ) ;
27850: LD_VAR 0 2
27854: PPUSH
27855: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27859: LD_VAR 0 2
27863: PPUSH
27864: LD_INT 9
27866: PPUSH
27867: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27871: LD_INT 28
27873: PPUSH
27874: LD_OWVAR 2
27878: PPUSH
27879: LD_INT 2
27881: PPUSH
27882: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27886: LD_INT 29
27888: PPUSH
27889: LD_OWVAR 2
27893: PPUSH
27894: LD_INT 2
27896: PPUSH
27897: CALL_OW 322
// end ;
27901: PPOPN 3
27903: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27904: LD_EXP 66
27908: PUSH
27909: LD_EXP 109
27913: AND
27914: IFFALSE 28025
27916: GO 27918
27918: DISABLE
27919: LD_INT 0
27921: PPUSH
27922: PPUSH
27923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27924: LD_ADDR_VAR 0 3
27928: PUSH
27929: LD_INT 22
27931: PUSH
27932: LD_OWVAR 2
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 25
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PPUSH
27955: CALL_OW 69
27959: ST_TO_ADDR
// if not tmp then
27960: LD_VAR 0 3
27964: NOT
27965: IFFALSE 27969
// exit ;
27967: GO 28025
// un := tmp [ rand ( 1 , tmp ) ] ;
27969: LD_ADDR_VAR 0 2
27973: PUSH
27974: LD_VAR 0 3
27978: PUSH
27979: LD_INT 1
27981: PPUSH
27982: LD_VAR 0 3
27986: PPUSH
27987: CALL_OW 12
27991: ARRAY
27992: ST_TO_ADDR
// if Crawls ( un ) then
27993: LD_VAR 0 2
27997: PPUSH
27998: CALL_OW 318
28002: IFFALSE 28013
// ComWalk ( un ) ;
28004: LD_VAR 0 2
28008: PPUSH
28009: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28013: LD_VAR 0 2
28017: PPUSH
28018: LD_INT 8
28020: PPUSH
28021: CALL_OW 336
// end ;
28025: PPOPN 3
28027: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28028: LD_EXP 66
28032: PUSH
28033: LD_EXP 110
28037: AND
28038: IFFALSE 28182
28040: GO 28042
28042: DISABLE
28043: LD_INT 0
28045: PPUSH
28046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28047: LD_ADDR_VAR 0 2
28051: PUSH
28052: LD_INT 22
28054: PUSH
28055: LD_OWVAR 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 21
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: LD_INT 34
28079: PUSH
28080: LD_INT 12
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 34
28089: PUSH
28090: LD_INT 51
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 34
28099: PUSH
28100: LD_INT 32
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: PPUSH
28118: CALL_OW 69
28122: ST_TO_ADDR
// if not tmp then
28123: LD_VAR 0 2
28127: NOT
28128: IFFALSE 28132
// exit ;
28130: GO 28182
// for i in tmp do
28132: LD_ADDR_VAR 0 1
28136: PUSH
28137: LD_VAR 0 2
28141: PUSH
28142: FOR_IN
28143: IFFALSE 28180
// if GetCargo ( i , mat_artifact ) = 0 then
28145: LD_VAR 0 1
28149: PPUSH
28150: LD_INT 4
28152: PPUSH
28153: CALL_OW 289
28157: PUSH
28158: LD_INT 0
28160: EQUAL
28161: IFFALSE 28178
// SetCargo ( i , mat_siberit , 100 ) ;
28163: LD_VAR 0 1
28167: PPUSH
28168: LD_INT 3
28170: PPUSH
28171: LD_INT 100
28173: PPUSH
28174: CALL_OW 290
28178: GO 28142
28180: POP
28181: POP
// end ;
28182: PPOPN 2
28184: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28185: LD_EXP 66
28189: PUSH
28190: LD_EXP 111
28194: AND
28195: IFFALSE 28378
28197: GO 28199
28199: DISABLE
28200: LD_INT 0
28202: PPUSH
28203: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28204: LD_ADDR_VAR 0 2
28208: PUSH
28209: LD_INT 22
28211: PUSH
28212: LD_OWVAR 2
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PPUSH
28221: CALL_OW 69
28225: ST_TO_ADDR
// if not tmp then
28226: LD_VAR 0 2
28230: NOT
28231: IFFALSE 28235
// exit ;
28233: GO 28378
// for i := 1 to 2 do
28235: LD_ADDR_VAR 0 1
28239: PUSH
28240: DOUBLE
28241: LD_INT 1
28243: DEC
28244: ST_TO_ADDR
28245: LD_INT 2
28247: PUSH
28248: FOR_TO
28249: IFFALSE 28376
// begin uc_side := your_side ;
28251: LD_ADDR_OWVAR 20
28255: PUSH
28256: LD_OWVAR 2
28260: ST_TO_ADDR
// uc_nation := nation_american ;
28261: LD_ADDR_OWVAR 21
28265: PUSH
28266: LD_INT 1
28268: ST_TO_ADDR
// vc_chassis := us_morphling ;
28269: LD_ADDR_OWVAR 37
28273: PUSH
28274: LD_INT 5
28276: ST_TO_ADDR
// vc_engine := engine_siberite ;
28277: LD_ADDR_OWVAR 39
28281: PUSH
28282: LD_INT 3
28284: ST_TO_ADDR
// vc_control := control_computer ;
28285: LD_ADDR_OWVAR 38
28289: PUSH
28290: LD_INT 3
28292: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28293: LD_ADDR_OWVAR 40
28297: PUSH
28298: LD_INT 10
28300: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28301: LD_VAR 0 2
28305: PUSH
28306: LD_INT 1
28308: ARRAY
28309: PPUSH
28310: CALL_OW 310
28314: NOT
28315: IFFALSE 28362
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28317: CALL_OW 45
28321: PPUSH
28322: LD_VAR 0 2
28326: PUSH
28327: LD_INT 1
28329: ARRAY
28330: PPUSH
28331: CALL_OW 250
28335: PPUSH
28336: LD_VAR 0 2
28340: PUSH
28341: LD_INT 1
28343: ARRAY
28344: PPUSH
28345: CALL_OW 251
28349: PPUSH
28350: LD_INT 12
28352: PPUSH
28353: LD_INT 1
28355: PPUSH
28356: CALL_OW 50
28360: GO 28374
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28362: CALL_OW 45
28366: PPUSH
28367: LD_INT 1
28369: PPUSH
28370: CALL_OW 51
// end ;
28374: GO 28248
28376: POP
28377: POP
// end ;
28378: PPOPN 2
28380: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28381: LD_EXP 66
28385: PUSH
28386: LD_EXP 112
28390: AND
28391: IFFALSE 28613
28393: GO 28395
28395: DISABLE
28396: LD_INT 0
28398: PPUSH
28399: PPUSH
28400: PPUSH
28401: PPUSH
28402: PPUSH
28403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28404: LD_ADDR_VAR 0 6
28408: PUSH
28409: LD_INT 22
28411: PUSH
28412: LD_OWVAR 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 21
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: LD_INT 23
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: LIST
28452: PPUSH
28453: CALL_OW 69
28457: ST_TO_ADDR
// if not tmp then
28458: LD_VAR 0 6
28462: NOT
28463: IFFALSE 28467
// exit ;
28465: GO 28613
// s1 := rand ( 1 , 4 ) ;
28467: LD_ADDR_VAR 0 2
28471: PUSH
28472: LD_INT 1
28474: PPUSH
28475: LD_INT 4
28477: PPUSH
28478: CALL_OW 12
28482: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28483: LD_ADDR_VAR 0 4
28487: PUSH
28488: LD_VAR 0 6
28492: PUSH
28493: LD_INT 1
28495: ARRAY
28496: PPUSH
28497: LD_VAR 0 2
28501: PPUSH
28502: CALL_OW 259
28506: ST_TO_ADDR
// if s1 = 1 then
28507: LD_VAR 0 2
28511: PUSH
28512: LD_INT 1
28514: EQUAL
28515: IFFALSE 28535
// s2 := rand ( 2 , 4 ) else
28517: LD_ADDR_VAR 0 3
28521: PUSH
28522: LD_INT 2
28524: PPUSH
28525: LD_INT 4
28527: PPUSH
28528: CALL_OW 12
28532: ST_TO_ADDR
28533: GO 28543
// s2 := 1 ;
28535: LD_ADDR_VAR 0 3
28539: PUSH
28540: LD_INT 1
28542: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28543: LD_ADDR_VAR 0 5
28547: PUSH
28548: LD_VAR 0 6
28552: PUSH
28553: LD_INT 1
28555: ARRAY
28556: PPUSH
28557: LD_VAR 0 3
28561: PPUSH
28562: CALL_OW 259
28566: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28567: LD_VAR 0 6
28571: PUSH
28572: LD_INT 1
28574: ARRAY
28575: PPUSH
28576: LD_VAR 0 2
28580: PPUSH
28581: LD_VAR 0 5
28585: PPUSH
28586: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28590: LD_VAR 0 6
28594: PUSH
28595: LD_INT 1
28597: ARRAY
28598: PPUSH
28599: LD_VAR 0 3
28603: PPUSH
28604: LD_VAR 0 4
28608: PPUSH
28609: CALL_OW 237
// end ;
28613: PPOPN 6
28615: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28616: LD_EXP 66
28620: PUSH
28621: LD_EXP 113
28625: AND
28626: IFFALSE 28705
28628: GO 28630
28630: DISABLE
28631: LD_INT 0
28633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28634: LD_ADDR_VAR 0 1
28638: PUSH
28639: LD_INT 22
28641: PUSH
28642: LD_OWVAR 2
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 30
28653: PUSH
28654: LD_INT 3
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PPUSH
28665: CALL_OW 69
28669: ST_TO_ADDR
// if not tmp then
28670: LD_VAR 0 1
28674: NOT
28675: IFFALSE 28679
// exit ;
28677: GO 28705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28679: LD_VAR 0 1
28683: PUSH
28684: LD_INT 1
28686: PPUSH
28687: LD_VAR 0 1
28691: PPUSH
28692: CALL_OW 12
28696: ARRAY
28697: PPUSH
28698: LD_INT 1
28700: PPUSH
28701: CALL_OW 234
// end ;
28705: PPOPN 1
28707: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28708: LD_EXP 66
28712: PUSH
28713: LD_EXP 114
28717: AND
28718: IFFALSE 28830
28720: GO 28722
28722: DISABLE
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28727: LD_ADDR_VAR 0 2
28731: PUSH
28732: LD_INT 22
28734: PUSH
28735: LD_OWVAR 2
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: LD_INT 30
28749: PUSH
28750: LD_INT 27
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 30
28759: PUSH
28760: LD_INT 26
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 30
28769: PUSH
28770: LD_INT 28
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PPUSH
28787: CALL_OW 69
28791: ST_TO_ADDR
// if not tmp then
28792: LD_VAR 0 2
28796: NOT
28797: IFFALSE 28801
// exit ;
28799: GO 28830
// for i in tmp do
28801: LD_ADDR_VAR 0 1
28805: PUSH
28806: LD_VAR 0 2
28810: PUSH
28811: FOR_IN
28812: IFFALSE 28828
// SetLives ( i , 1 ) ;
28814: LD_VAR 0 1
28818: PPUSH
28819: LD_INT 1
28821: PPUSH
28822: CALL_OW 234
28826: GO 28811
28828: POP
28829: POP
// end ;
28830: PPOPN 2
28832: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28833: LD_EXP 66
28837: PUSH
28838: LD_EXP 115
28842: AND
28843: IFFALSE 29117
28845: GO 28847
28847: DISABLE
28848: LD_INT 0
28850: PPUSH
28851: PPUSH
28852: PPUSH
// begin i := rand ( 1 , 7 ) ;
28853: LD_ADDR_VAR 0 1
28857: PUSH
28858: LD_INT 1
28860: PPUSH
28861: LD_INT 7
28863: PPUSH
28864: CALL_OW 12
28868: ST_TO_ADDR
// case i of 1 :
28869: LD_VAR 0 1
28873: PUSH
28874: LD_INT 1
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28892
28882: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28883: LD_STRING earthquake(getX(game), 0, 32)
28885: PPUSH
28886: CALL_OW 559
28890: GO 29117
28892: LD_INT 2
28894: DOUBLE
28895: EQUAL
28896: IFTRUE 28900
28898: GO 28914
28900: POP
// begin ToLua ( displayStucuk(); ) ;
28901: LD_STRING displayStucuk();
28903: PPUSH
28904: CALL_OW 559
// ResetFog ;
28908: CALL_OW 335
// end ; 3 :
28912: GO 29117
28914: LD_INT 3
28916: DOUBLE
28917: EQUAL
28918: IFTRUE 28922
28920: GO 29026
28922: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28923: LD_ADDR_VAR 0 2
28927: PUSH
28928: LD_INT 22
28930: PUSH
28931: LD_OWVAR 2
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 25
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PPUSH
28954: CALL_OW 69
28958: ST_TO_ADDR
// if not tmp then
28959: LD_VAR 0 2
28963: NOT
28964: IFFALSE 28968
// exit ;
28966: GO 29117
// un := tmp [ rand ( 1 , tmp ) ] ;
28968: LD_ADDR_VAR 0 3
28972: PUSH
28973: LD_VAR 0 2
28977: PUSH
28978: LD_INT 1
28980: PPUSH
28981: LD_VAR 0 2
28985: PPUSH
28986: CALL_OW 12
28990: ARRAY
28991: ST_TO_ADDR
// if Crawls ( un ) then
28992: LD_VAR 0 3
28996: PPUSH
28997: CALL_OW 318
29001: IFFALSE 29012
// ComWalk ( un ) ;
29003: LD_VAR 0 3
29007: PPUSH
29008: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29012: LD_VAR 0 3
29016: PPUSH
29017: LD_INT 8
29019: PPUSH
29020: CALL_OW 336
// end ; 4 :
29024: GO 29117
29026: LD_INT 4
29028: DOUBLE
29029: EQUAL
29030: IFTRUE 29034
29032: GO 29095
29034: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29035: LD_ADDR_VAR 0 2
29039: PUSH
29040: LD_INT 22
29042: PUSH
29043: LD_OWVAR 2
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 30
29054: PUSH
29055: LD_INT 29
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PPUSH
29066: CALL_OW 69
29070: ST_TO_ADDR
// if not tmp then
29071: LD_VAR 0 2
29075: NOT
29076: IFFALSE 29080
// exit ;
29078: GO 29117
// DestroyUnit ( tmp [ 1 ] ) ;
29080: LD_VAR 0 2
29084: PUSH
29085: LD_INT 1
29087: ARRAY
29088: PPUSH
29089: CALL_OW 65
// end ; 5 .. 7 :
29093: GO 29117
29095: LD_INT 5
29097: DOUBLE
29098: GREATEREQUAL
29099: IFFALSE 29107
29101: LD_INT 7
29103: DOUBLE
29104: LESSEQUAL
29105: IFTRUE 29109
29107: GO 29116
29109: POP
// StreamSibBomb ; end ;
29110: CALL 25367 0 0
29114: GO 29117
29116: POP
// end ;
29117: PPOPN 3
29119: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29120: LD_EXP 66
29124: PUSH
29125: LD_EXP 116
29129: AND
29130: IFFALSE 29286
29132: GO 29134
29134: DISABLE
29135: LD_INT 0
29137: PPUSH
29138: PPUSH
29139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29140: LD_ADDR_VAR 0 2
29144: PUSH
29145: LD_INT 81
29147: PUSH
29148: LD_OWVAR 2
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: LD_INT 21
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 21
29172: PUSH
29173: LD_INT 2
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PPUSH
29189: CALL_OW 69
29193: ST_TO_ADDR
// if not tmp then
29194: LD_VAR 0 2
29198: NOT
29199: IFFALSE 29203
// exit ;
29201: GO 29286
// p := 0 ;
29203: LD_ADDR_VAR 0 3
29207: PUSH
29208: LD_INT 0
29210: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29211: LD_INT 35
29213: PPUSH
29214: CALL_OW 67
// p := p + 1 ;
29218: LD_ADDR_VAR 0 3
29222: PUSH
29223: LD_VAR 0 3
29227: PUSH
29228: LD_INT 1
29230: PLUS
29231: ST_TO_ADDR
// for i in tmp do
29232: LD_ADDR_VAR 0 1
29236: PUSH
29237: LD_VAR 0 2
29241: PUSH
29242: FOR_IN
29243: IFFALSE 29274
// if GetLives ( i ) < 1000 then
29245: LD_VAR 0 1
29249: PPUSH
29250: CALL_OW 256
29254: PUSH
29255: LD_INT 1000
29257: LESS
29258: IFFALSE 29272
// SetLives ( i , 1000 ) ;
29260: LD_VAR 0 1
29264: PPUSH
29265: LD_INT 1000
29267: PPUSH
29268: CALL_OW 234
29272: GO 29242
29274: POP
29275: POP
// until p > 20 ;
29276: LD_VAR 0 3
29280: PUSH
29281: LD_INT 20
29283: GREATER
29284: IFFALSE 29211
// end ;
29286: PPOPN 3
29288: END
// every 0 0$1 trigger StreamModeActive and sTime do
29289: LD_EXP 66
29293: PUSH
29294: LD_EXP 117
29298: AND
29299: IFFALSE 29334
29301: GO 29303
29303: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29304: LD_INT 28
29306: PPUSH
29307: LD_OWVAR 2
29311: PPUSH
29312: LD_INT 2
29314: PPUSH
29315: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29319: LD_INT 30
29321: PPUSH
29322: LD_OWVAR 2
29326: PPUSH
29327: LD_INT 2
29329: PPUSH
29330: CALL_OW 322
// end ;
29334: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29335: LD_EXP 66
29339: PUSH
29340: LD_EXP 118
29344: AND
29345: IFFALSE 29466
29347: GO 29349
29349: DISABLE
29350: LD_INT 0
29352: PPUSH
29353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29354: LD_ADDR_VAR 0 2
29358: PUSH
29359: LD_INT 22
29361: PUSH
29362: LD_OWVAR 2
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 21
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 3
29383: PUSH
29384: LD_INT 23
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: PPUSH
29403: CALL_OW 69
29407: ST_TO_ADDR
// if not tmp then
29408: LD_VAR 0 2
29412: NOT
29413: IFFALSE 29417
// exit ;
29415: GO 29466
// for i in tmp do
29417: LD_ADDR_VAR 0 1
29421: PUSH
29422: LD_VAR 0 2
29426: PUSH
29427: FOR_IN
29428: IFFALSE 29464
// begin if Crawls ( i ) then
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 318
29439: IFFALSE 29450
// ComWalk ( i ) ;
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL_OW 138
// SetClass ( i , 2 ) ;
29450: LD_VAR 0 1
29454: PPUSH
29455: LD_INT 2
29457: PPUSH
29458: CALL_OW 336
// end ;
29462: GO 29427
29464: POP
29465: POP
// end ;
29466: PPOPN 2
29468: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29469: LD_EXP 66
29473: PUSH
29474: LD_EXP 119
29478: AND
29479: IFFALSE 29760
29481: GO 29483
29483: DISABLE
29484: LD_INT 0
29486: PPUSH
29487: PPUSH
29488: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29489: LD_OWVAR 2
29493: PPUSH
29494: LD_INT 9
29496: PPUSH
29497: LD_INT 1
29499: PPUSH
29500: LD_INT 1
29502: PPUSH
29503: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29507: LD_INT 9
29509: PPUSH
29510: LD_OWVAR 2
29514: PPUSH
29515: CALL_OW 343
// uc_side := 9 ;
29519: LD_ADDR_OWVAR 20
29523: PUSH
29524: LD_INT 9
29526: ST_TO_ADDR
// uc_nation := 2 ;
29527: LD_ADDR_OWVAR 21
29531: PUSH
29532: LD_INT 2
29534: ST_TO_ADDR
// hc_name := Dark Warrior ;
29535: LD_ADDR_OWVAR 26
29539: PUSH
29540: LD_STRING Dark Warrior
29542: ST_TO_ADDR
// hc_gallery :=  ;
29543: LD_ADDR_OWVAR 33
29547: PUSH
29548: LD_STRING 
29550: ST_TO_ADDR
// hc_noskilllimit := true ;
29551: LD_ADDR_OWVAR 76
29555: PUSH
29556: LD_INT 1
29558: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29559: LD_ADDR_OWVAR 31
29563: PUSH
29564: LD_INT 30
29566: PUSH
29567: LD_INT 30
29569: PUSH
29570: LD_INT 30
29572: PUSH
29573: LD_INT 30
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: ST_TO_ADDR
// un := CreateHuman ;
29582: LD_ADDR_VAR 0 3
29586: PUSH
29587: CALL_OW 44
29591: ST_TO_ADDR
// hc_noskilllimit := false ;
29592: LD_ADDR_OWVAR 76
29596: PUSH
29597: LD_INT 0
29599: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29600: LD_VAR 0 3
29604: PPUSH
29605: LD_INT 1
29607: PPUSH
29608: CALL_OW 51
// p := 0 ;
29612: LD_ADDR_VAR 0 2
29616: PUSH
29617: LD_INT 0
29619: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29620: LD_INT 35
29622: PPUSH
29623: CALL_OW 67
// p := p + 1 ;
29627: LD_ADDR_VAR 0 2
29631: PUSH
29632: LD_VAR 0 2
29636: PUSH
29637: LD_INT 1
29639: PLUS
29640: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29641: LD_VAR 0 3
29645: PPUSH
29646: CALL_OW 256
29650: PUSH
29651: LD_INT 1000
29653: LESS
29654: IFFALSE 29668
// SetLives ( un , 1000 ) ;
29656: LD_VAR 0 3
29660: PPUSH
29661: LD_INT 1000
29663: PPUSH
29664: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29668: LD_VAR 0 3
29672: PPUSH
29673: LD_INT 81
29675: PUSH
29676: LD_OWVAR 2
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 91
29687: PUSH
29688: LD_VAR 0 3
29692: PUSH
29693: LD_INT 30
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PPUSH
29705: CALL_OW 69
29709: PPUSH
29710: LD_VAR 0 3
29714: PPUSH
29715: CALL_OW 74
29719: PPUSH
29720: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29724: LD_VAR 0 2
29728: PUSH
29729: LD_INT 60
29731: GREATER
29732: PUSH
29733: LD_VAR 0 3
29737: PPUSH
29738: CALL_OW 301
29742: OR
29743: IFFALSE 29620
// if un then
29745: LD_VAR 0 3
29749: IFFALSE 29760
// RemoveUnit ( un ) ;
29751: LD_VAR 0 3
29755: PPUSH
29756: CALL_OW 64
// end ;
29760: PPOPN 3
29762: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29763: LD_INT 0
29765: PPUSH
// case cmd of 301 :
29766: LD_VAR 0 1
29770: PUSH
29771: LD_INT 301
29773: DOUBLE
29774: EQUAL
29775: IFTRUE 29779
29777: GO 29811
29779: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29780: LD_VAR 0 6
29784: PPUSH
29785: LD_VAR 0 7
29789: PPUSH
29790: LD_VAR 0 8
29794: PPUSH
29795: LD_VAR 0 4
29799: PPUSH
29800: LD_VAR 0 5
29804: PPUSH
29805: CALL 31012 0 5
29809: GO 29932
29811: LD_INT 302
29813: DOUBLE
29814: EQUAL
29815: IFTRUE 29819
29817: GO 29856
29819: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29820: LD_VAR 0 6
29824: PPUSH
29825: LD_VAR 0 7
29829: PPUSH
29830: LD_VAR 0 8
29834: PPUSH
29835: LD_VAR 0 9
29839: PPUSH
29840: LD_VAR 0 4
29844: PPUSH
29845: LD_VAR 0 5
29849: PPUSH
29850: CALL 31103 0 6
29854: GO 29932
29856: LD_INT 303
29858: DOUBLE
29859: EQUAL
29860: IFTRUE 29864
29862: GO 29901
29864: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29865: LD_VAR 0 6
29869: PPUSH
29870: LD_VAR 0 7
29874: PPUSH
29875: LD_VAR 0 8
29879: PPUSH
29880: LD_VAR 0 9
29884: PPUSH
29885: LD_VAR 0 4
29889: PPUSH
29890: LD_VAR 0 5
29894: PPUSH
29895: CALL 29937 0 6
29899: GO 29932
29901: LD_INT 304
29903: DOUBLE
29904: EQUAL
29905: IFTRUE 29909
29907: GO 29931
29909: POP
// hHackTeleport ( unit , x , y ) ; end ;
29910: LD_VAR 0 2
29914: PPUSH
29915: LD_VAR 0 4
29919: PPUSH
29920: LD_VAR 0 5
29924: PPUSH
29925: CALL 31696 0 3
29929: GO 29932
29931: POP
// end ;
29932: LD_VAR 0 12
29936: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29937: LD_INT 0
29939: PPUSH
29940: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29941: LD_VAR 0 1
29945: PUSH
29946: LD_INT 1
29948: LESS
29949: PUSH
29950: LD_VAR 0 1
29954: PUSH
29955: LD_INT 3
29957: GREATER
29958: OR
29959: PUSH
29960: LD_VAR 0 5
29964: PPUSH
29965: LD_VAR 0 6
29969: PPUSH
29970: CALL_OW 428
29974: OR
29975: IFFALSE 29979
// exit ;
29977: GO 30699
// uc_side := your_side ;
29979: LD_ADDR_OWVAR 20
29983: PUSH
29984: LD_OWVAR 2
29988: ST_TO_ADDR
// uc_nation := nation ;
29989: LD_ADDR_OWVAR 21
29993: PUSH
29994: LD_VAR 0 1
29998: ST_TO_ADDR
// bc_level = 1 ;
29999: LD_ADDR_OWVAR 43
30003: PUSH
30004: LD_INT 1
30006: ST_TO_ADDR
// case btype of 1 :
30007: LD_VAR 0 2
30011: PUSH
30012: LD_INT 1
30014: DOUBLE
30015: EQUAL
30016: IFTRUE 30020
30018: GO 30031
30020: POP
// bc_type := b_depot ; 2 :
30021: LD_ADDR_OWVAR 42
30025: PUSH
30026: LD_INT 0
30028: ST_TO_ADDR
30029: GO 30643
30031: LD_INT 2
30033: DOUBLE
30034: EQUAL
30035: IFTRUE 30039
30037: GO 30050
30039: POP
// bc_type := b_warehouse ; 3 :
30040: LD_ADDR_OWVAR 42
30044: PUSH
30045: LD_INT 1
30047: ST_TO_ADDR
30048: GO 30643
30050: LD_INT 3
30052: DOUBLE
30053: EQUAL
30054: IFTRUE 30058
30056: GO 30069
30058: POP
// bc_type := b_lab ; 4 .. 9 :
30059: LD_ADDR_OWVAR 42
30063: PUSH
30064: LD_INT 6
30066: ST_TO_ADDR
30067: GO 30643
30069: LD_INT 4
30071: DOUBLE
30072: GREATEREQUAL
30073: IFFALSE 30081
30075: LD_INT 9
30077: DOUBLE
30078: LESSEQUAL
30079: IFTRUE 30083
30081: GO 30135
30083: POP
// begin bc_type := b_lab_half ;
30084: LD_ADDR_OWVAR 42
30088: PUSH
30089: LD_INT 7
30091: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30092: LD_ADDR_OWVAR 44
30096: PUSH
30097: LD_INT 10
30099: PUSH
30100: LD_INT 11
30102: PUSH
30103: LD_INT 12
30105: PUSH
30106: LD_INT 15
30108: PUSH
30109: LD_INT 14
30111: PUSH
30112: LD_INT 13
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: PUSH
30123: LD_VAR 0 2
30127: PUSH
30128: LD_INT 3
30130: MINUS
30131: ARRAY
30132: ST_TO_ADDR
// end ; 10 .. 13 :
30133: GO 30643
30135: LD_INT 10
30137: DOUBLE
30138: GREATEREQUAL
30139: IFFALSE 30147
30141: LD_INT 13
30143: DOUBLE
30144: LESSEQUAL
30145: IFTRUE 30149
30147: GO 30226
30149: POP
// begin bc_type := b_lab_full ;
30150: LD_ADDR_OWVAR 42
30154: PUSH
30155: LD_INT 8
30157: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30158: LD_ADDR_OWVAR 44
30162: PUSH
30163: LD_INT 10
30165: PUSH
30166: LD_INT 12
30168: PUSH
30169: LD_INT 14
30171: PUSH
30172: LD_INT 13
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: PUSH
30181: LD_VAR 0 2
30185: PUSH
30186: LD_INT 9
30188: MINUS
30189: ARRAY
30190: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30191: LD_ADDR_OWVAR 45
30195: PUSH
30196: LD_INT 11
30198: PUSH
30199: LD_INT 15
30201: PUSH
30202: LD_INT 12
30204: PUSH
30205: LD_INT 15
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: PUSH
30214: LD_VAR 0 2
30218: PUSH
30219: LD_INT 9
30221: MINUS
30222: ARRAY
30223: ST_TO_ADDR
// end ; 14 :
30224: GO 30643
30226: LD_INT 14
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30245
30234: POP
// bc_type := b_workshop ; 15 :
30235: LD_ADDR_OWVAR 42
30239: PUSH
30240: LD_INT 2
30242: ST_TO_ADDR
30243: GO 30643
30245: LD_INT 15
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30264
30253: POP
// bc_type := b_factory ; 16 :
30254: LD_ADDR_OWVAR 42
30258: PUSH
30259: LD_INT 3
30261: ST_TO_ADDR
30262: GO 30643
30264: LD_INT 16
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30283
30272: POP
// bc_type := b_ext_gun ; 17 :
30273: LD_ADDR_OWVAR 42
30277: PUSH
30278: LD_INT 17
30280: ST_TO_ADDR
30281: GO 30643
30283: LD_INT 17
30285: DOUBLE
30286: EQUAL
30287: IFTRUE 30291
30289: GO 30319
30291: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30292: LD_ADDR_OWVAR 42
30296: PUSH
30297: LD_INT 19
30299: PUSH
30300: LD_INT 23
30302: PUSH
30303: LD_INT 19
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: PUSH
30311: LD_VAR 0 1
30315: ARRAY
30316: ST_TO_ADDR
30317: GO 30643
30319: LD_INT 18
30321: DOUBLE
30322: EQUAL
30323: IFTRUE 30327
30325: GO 30338
30327: POP
// bc_type := b_ext_radar ; 19 :
30328: LD_ADDR_OWVAR 42
30332: PUSH
30333: LD_INT 20
30335: ST_TO_ADDR
30336: GO 30643
30338: LD_INT 19
30340: DOUBLE
30341: EQUAL
30342: IFTRUE 30346
30344: GO 30357
30346: POP
// bc_type := b_ext_radio ; 20 :
30347: LD_ADDR_OWVAR 42
30351: PUSH
30352: LD_INT 22
30354: ST_TO_ADDR
30355: GO 30643
30357: LD_INT 20
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30376
30365: POP
// bc_type := b_ext_siberium ; 21 :
30366: LD_ADDR_OWVAR 42
30370: PUSH
30371: LD_INT 21
30373: ST_TO_ADDR
30374: GO 30643
30376: LD_INT 21
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30395
30384: POP
// bc_type := b_ext_computer ; 22 :
30385: LD_ADDR_OWVAR 42
30389: PUSH
30390: LD_INT 24
30392: ST_TO_ADDR
30393: GO 30643
30395: LD_INT 22
30397: DOUBLE
30398: EQUAL
30399: IFTRUE 30403
30401: GO 30414
30403: POP
// bc_type := b_ext_track ; 23 :
30404: LD_ADDR_OWVAR 42
30408: PUSH
30409: LD_INT 16
30411: ST_TO_ADDR
30412: GO 30643
30414: LD_INT 23
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30433
30422: POP
// bc_type := b_ext_laser ; 24 :
30423: LD_ADDR_OWVAR 42
30427: PUSH
30428: LD_INT 25
30430: ST_TO_ADDR
30431: GO 30643
30433: LD_INT 24
30435: DOUBLE
30436: EQUAL
30437: IFTRUE 30441
30439: GO 30452
30441: POP
// bc_type := b_control_tower ; 25 :
30442: LD_ADDR_OWVAR 42
30446: PUSH
30447: LD_INT 36
30449: ST_TO_ADDR
30450: GO 30643
30452: LD_INT 25
30454: DOUBLE
30455: EQUAL
30456: IFTRUE 30460
30458: GO 30471
30460: POP
// bc_type := b_breastwork ; 26 :
30461: LD_ADDR_OWVAR 42
30465: PUSH
30466: LD_INT 31
30468: ST_TO_ADDR
30469: GO 30643
30471: LD_INT 26
30473: DOUBLE
30474: EQUAL
30475: IFTRUE 30479
30477: GO 30490
30479: POP
// bc_type := b_bunker ; 27 :
30480: LD_ADDR_OWVAR 42
30484: PUSH
30485: LD_INT 32
30487: ST_TO_ADDR
30488: GO 30643
30490: LD_INT 27
30492: DOUBLE
30493: EQUAL
30494: IFTRUE 30498
30496: GO 30509
30498: POP
// bc_type := b_turret ; 28 :
30499: LD_ADDR_OWVAR 42
30503: PUSH
30504: LD_INT 33
30506: ST_TO_ADDR
30507: GO 30643
30509: LD_INT 28
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30528
30517: POP
// bc_type := b_armoury ; 29 :
30518: LD_ADDR_OWVAR 42
30522: PUSH
30523: LD_INT 4
30525: ST_TO_ADDR
30526: GO 30643
30528: LD_INT 29
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30547
30536: POP
// bc_type := b_barracks ; 30 :
30537: LD_ADDR_OWVAR 42
30541: PUSH
30542: LD_INT 5
30544: ST_TO_ADDR
30545: GO 30643
30547: LD_INT 30
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30566
30555: POP
// bc_type := b_solar_power ; 31 :
30556: LD_ADDR_OWVAR 42
30560: PUSH
30561: LD_INT 27
30563: ST_TO_ADDR
30564: GO 30643
30566: LD_INT 31
30568: DOUBLE
30569: EQUAL
30570: IFTRUE 30574
30572: GO 30585
30574: POP
// bc_type := b_oil_power ; 32 :
30575: LD_ADDR_OWVAR 42
30579: PUSH
30580: LD_INT 26
30582: ST_TO_ADDR
30583: GO 30643
30585: LD_INT 32
30587: DOUBLE
30588: EQUAL
30589: IFTRUE 30593
30591: GO 30604
30593: POP
// bc_type := b_siberite_power ; 33 :
30594: LD_ADDR_OWVAR 42
30598: PUSH
30599: LD_INT 28
30601: ST_TO_ADDR
30602: GO 30643
30604: LD_INT 33
30606: DOUBLE
30607: EQUAL
30608: IFTRUE 30612
30610: GO 30623
30612: POP
// bc_type := b_oil_mine ; 34 :
30613: LD_ADDR_OWVAR 42
30617: PUSH
30618: LD_INT 29
30620: ST_TO_ADDR
30621: GO 30643
30623: LD_INT 34
30625: DOUBLE
30626: EQUAL
30627: IFTRUE 30631
30629: GO 30642
30631: POP
// bc_type := b_siberite_mine ; end ;
30632: LD_ADDR_OWVAR 42
30636: PUSH
30637: LD_INT 30
30639: ST_TO_ADDR
30640: GO 30643
30642: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30643: LD_ADDR_VAR 0 8
30647: PUSH
30648: LD_VAR 0 5
30652: PPUSH
30653: LD_VAR 0 6
30657: PPUSH
30658: LD_VAR 0 3
30662: PPUSH
30663: CALL_OW 47
30667: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30668: LD_OWVAR 42
30672: PUSH
30673: LD_INT 32
30675: PUSH
30676: LD_INT 33
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: IN
30683: IFFALSE 30699
// PlaceWeaponTurret ( b , weapon ) ;
30685: LD_VAR 0 8
30689: PPUSH
30690: LD_VAR 0 4
30694: PPUSH
30695: CALL_OW 431
// end ;
30699: LD_VAR 0 7
30703: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30704: LD_INT 0
30706: PPUSH
30707: PPUSH
30708: PPUSH
30709: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30710: LD_ADDR_VAR 0 4
30714: PUSH
30715: LD_INT 22
30717: PUSH
30718: LD_OWVAR 2
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: LD_INT 30
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 30
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PPUSH
30759: CALL_OW 69
30763: ST_TO_ADDR
// if not tmp then
30764: LD_VAR 0 4
30768: NOT
30769: IFFALSE 30773
// exit ;
30771: GO 30832
// for i in tmp do
30773: LD_ADDR_VAR 0 2
30777: PUSH
30778: LD_VAR 0 4
30782: PUSH
30783: FOR_IN
30784: IFFALSE 30830
// for j = 1 to 3 do
30786: LD_ADDR_VAR 0 3
30790: PUSH
30791: DOUBLE
30792: LD_INT 1
30794: DEC
30795: ST_TO_ADDR
30796: LD_INT 3
30798: PUSH
30799: FOR_TO
30800: IFFALSE 30826
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30802: LD_VAR 0 2
30806: PPUSH
30807: CALL_OW 274
30811: PPUSH
30812: LD_VAR 0 3
30816: PPUSH
30817: LD_INT 99999
30819: PPUSH
30820: CALL_OW 277
30824: GO 30799
30826: POP
30827: POP
30828: GO 30783
30830: POP
30831: POP
// end ;
30832: LD_VAR 0 1
30836: RET
// export function hHackSetLevel10 ; var i , j ; begin
30837: LD_INT 0
30839: PPUSH
30840: PPUSH
30841: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30842: LD_ADDR_VAR 0 2
30846: PUSH
30847: LD_INT 21
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PPUSH
30857: CALL_OW 69
30861: PUSH
30862: FOR_IN
30863: IFFALSE 30915
// if IsSelected ( i ) then
30865: LD_VAR 0 2
30869: PPUSH
30870: CALL_OW 306
30874: IFFALSE 30913
// begin for j := 1 to 4 do
30876: LD_ADDR_VAR 0 3
30880: PUSH
30881: DOUBLE
30882: LD_INT 1
30884: DEC
30885: ST_TO_ADDR
30886: LD_INT 4
30888: PUSH
30889: FOR_TO
30890: IFFALSE 30911
// SetSkill ( i , j , 10 ) ;
30892: LD_VAR 0 2
30896: PPUSH
30897: LD_VAR 0 3
30901: PPUSH
30902: LD_INT 10
30904: PPUSH
30905: CALL_OW 237
30909: GO 30889
30911: POP
30912: POP
// end ;
30913: GO 30862
30915: POP
30916: POP
// end ;
30917: LD_VAR 0 1
30921: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30922: LD_INT 0
30924: PPUSH
30925: PPUSH
30926: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30927: LD_ADDR_VAR 0 2
30931: PUSH
30932: LD_INT 22
30934: PUSH
30935: LD_OWVAR 2
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 21
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PPUSH
30958: CALL_OW 69
30962: PUSH
30963: FOR_IN
30964: IFFALSE 31005
// begin for j := 1 to 4 do
30966: LD_ADDR_VAR 0 3
30970: PUSH
30971: DOUBLE
30972: LD_INT 1
30974: DEC
30975: ST_TO_ADDR
30976: LD_INT 4
30978: PUSH
30979: FOR_TO
30980: IFFALSE 31001
// SetSkill ( i , j , 10 ) ;
30982: LD_VAR 0 2
30986: PPUSH
30987: LD_VAR 0 3
30991: PPUSH
30992: LD_INT 10
30994: PPUSH
30995: CALL_OW 237
30999: GO 30979
31001: POP
31002: POP
// end ;
31003: GO 30963
31005: POP
31006: POP
// end ;
31007: LD_VAR 0 1
31011: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31012: LD_INT 0
31014: PPUSH
// uc_side := your_side ;
31015: LD_ADDR_OWVAR 20
31019: PUSH
31020: LD_OWVAR 2
31024: ST_TO_ADDR
// uc_nation := nation ;
31025: LD_ADDR_OWVAR 21
31029: PUSH
31030: LD_VAR 0 1
31034: ST_TO_ADDR
// InitHc ;
31035: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31039: LD_INT 0
31041: PPUSH
31042: LD_VAR 0 2
31046: PPUSH
31047: LD_VAR 0 3
31051: PPUSH
31052: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31056: LD_VAR 0 4
31060: PPUSH
31061: LD_VAR 0 5
31065: PPUSH
31066: CALL_OW 428
31070: PUSH
31071: LD_INT 0
31073: EQUAL
31074: IFFALSE 31098
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31076: CALL_OW 44
31080: PPUSH
31081: LD_VAR 0 4
31085: PPUSH
31086: LD_VAR 0 5
31090: PPUSH
31091: LD_INT 1
31093: PPUSH
31094: CALL_OW 48
// end ;
31098: LD_VAR 0 6
31102: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31103: LD_INT 0
31105: PPUSH
31106: PPUSH
// uc_side := your_side ;
31107: LD_ADDR_OWVAR 20
31111: PUSH
31112: LD_OWVAR 2
31116: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31117: LD_VAR 0 1
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: LD_INT 4
31133: PUSH
31134: LD_INT 5
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: IN
31144: IFFALSE 31156
// uc_nation := nation_american else
31146: LD_ADDR_OWVAR 21
31150: PUSH
31151: LD_INT 1
31153: ST_TO_ADDR
31154: GO 31199
// if chassis in [ 11 , 12 , 13 , 14 ] then
31156: LD_VAR 0 1
31160: PUSH
31161: LD_INT 11
31163: PUSH
31164: LD_INT 12
31166: PUSH
31167: LD_INT 13
31169: PUSH
31170: LD_INT 14
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: IN
31179: IFFALSE 31191
// uc_nation := nation_arabian else
31181: LD_ADDR_OWVAR 21
31185: PUSH
31186: LD_INT 2
31188: ST_TO_ADDR
31189: GO 31199
// uc_nation := nation_russian ;
31191: LD_ADDR_OWVAR 21
31195: PUSH
31196: LD_INT 3
31198: ST_TO_ADDR
// vc_chassis := chassis ;
31199: LD_ADDR_OWVAR 37
31203: PUSH
31204: LD_VAR 0 1
31208: ST_TO_ADDR
// vc_engine := engine ;
31209: LD_ADDR_OWVAR 39
31213: PUSH
31214: LD_VAR 0 2
31218: ST_TO_ADDR
// vc_control := control ;
31219: LD_ADDR_OWVAR 38
31223: PUSH
31224: LD_VAR 0 3
31228: ST_TO_ADDR
// vc_weapon := weapon ;
31229: LD_ADDR_OWVAR 40
31233: PUSH
31234: LD_VAR 0 4
31238: ST_TO_ADDR
// un := CreateVehicle ;
31239: LD_ADDR_VAR 0 8
31243: PUSH
31244: CALL_OW 45
31248: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31249: LD_VAR 0 8
31253: PPUSH
31254: LD_INT 0
31256: PPUSH
31257: LD_INT 5
31259: PPUSH
31260: CALL_OW 12
31264: PPUSH
31265: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31269: LD_VAR 0 8
31273: PPUSH
31274: LD_VAR 0 5
31278: PPUSH
31279: LD_VAR 0 6
31283: PPUSH
31284: LD_INT 1
31286: PPUSH
31287: CALL_OW 48
// end ;
31291: LD_VAR 0 7
31295: RET
// export hInvincible ; every 1 do
31296: GO 31298
31298: DISABLE
// hInvincible := [ ] ;
31299: LD_ADDR_EXP 120
31303: PUSH
31304: EMPTY
31305: ST_TO_ADDR
31306: END
// every 10 do var i ;
31307: GO 31309
31309: DISABLE
31310: LD_INT 0
31312: PPUSH
// begin enable ;
31313: ENABLE
// if not hInvincible then
31314: LD_EXP 120
31318: NOT
31319: IFFALSE 31323
// exit ;
31321: GO 31367
// for i in hInvincible do
31323: LD_ADDR_VAR 0 1
31327: PUSH
31328: LD_EXP 120
31332: PUSH
31333: FOR_IN
31334: IFFALSE 31365
// if GetLives ( i ) < 1000 then
31336: LD_VAR 0 1
31340: PPUSH
31341: CALL_OW 256
31345: PUSH
31346: LD_INT 1000
31348: LESS
31349: IFFALSE 31363
// SetLives ( i , 1000 ) ;
31351: LD_VAR 0 1
31355: PPUSH
31356: LD_INT 1000
31358: PPUSH
31359: CALL_OW 234
31363: GO 31333
31365: POP
31366: POP
// end ;
31367: PPOPN 1
31369: END
// export function hHackInvincible ; var i ; begin
31370: LD_INT 0
31372: PPUSH
31373: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31374: LD_ADDR_VAR 0 2
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: LD_INT 21
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 21
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: PPUSH
31407: CALL_OW 69
31411: PUSH
31412: FOR_IN
31413: IFFALSE 31474
// if IsSelected ( i ) then
31415: LD_VAR 0 2
31419: PPUSH
31420: CALL_OW 306
31424: IFFALSE 31472
// begin if i in hInvincible then
31426: LD_VAR 0 2
31430: PUSH
31431: LD_EXP 120
31435: IN
31436: IFFALSE 31456
// hInvincible := hInvincible diff i else
31438: LD_ADDR_EXP 120
31442: PUSH
31443: LD_EXP 120
31447: PUSH
31448: LD_VAR 0 2
31452: DIFF
31453: ST_TO_ADDR
31454: GO 31472
// hInvincible := hInvincible union i ;
31456: LD_ADDR_EXP 120
31460: PUSH
31461: LD_EXP 120
31465: PUSH
31466: LD_VAR 0 2
31470: UNION
31471: ST_TO_ADDR
// end ;
31472: GO 31412
31474: POP
31475: POP
// end ;
31476: LD_VAR 0 1
31480: RET
// export function hHackInvisible ; var i , j ; begin
31481: LD_INT 0
31483: PPUSH
31484: PPUSH
31485: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31486: LD_ADDR_VAR 0 2
31490: PUSH
31491: LD_INT 21
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PPUSH
31501: CALL_OW 69
31505: PUSH
31506: FOR_IN
31507: IFFALSE 31531
// if IsSelected ( i ) then
31509: LD_VAR 0 2
31513: PPUSH
31514: CALL_OW 306
31518: IFFALSE 31529
// ComForceInvisible ( i ) ;
31520: LD_VAR 0 2
31524: PPUSH
31525: CALL_OW 496
31529: GO 31506
31531: POP
31532: POP
// end ;
31533: LD_VAR 0 1
31537: RET
// export function hHackChangeYourSide ; begin
31538: LD_INT 0
31540: PPUSH
// if your_side = 8 then
31541: LD_OWVAR 2
31545: PUSH
31546: LD_INT 8
31548: EQUAL
31549: IFFALSE 31561
// your_side := 0 else
31551: LD_ADDR_OWVAR 2
31555: PUSH
31556: LD_INT 0
31558: ST_TO_ADDR
31559: GO 31575
// your_side := your_side + 1 ;
31561: LD_ADDR_OWVAR 2
31565: PUSH
31566: LD_OWVAR 2
31570: PUSH
31571: LD_INT 1
31573: PLUS
31574: ST_TO_ADDR
// end ;
31575: LD_VAR 0 1
31579: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31580: LD_INT 0
31582: PPUSH
31583: PPUSH
31584: PPUSH
// for i in all_units do
31585: LD_ADDR_VAR 0 2
31589: PUSH
31590: LD_OWVAR 3
31594: PUSH
31595: FOR_IN
31596: IFFALSE 31674
// if IsSelected ( i ) then
31598: LD_VAR 0 2
31602: PPUSH
31603: CALL_OW 306
31607: IFFALSE 31672
// begin j := GetSide ( i ) ;
31609: LD_ADDR_VAR 0 3
31613: PUSH
31614: LD_VAR 0 2
31618: PPUSH
31619: CALL_OW 255
31623: ST_TO_ADDR
// if j = 8 then
31624: LD_VAR 0 3
31628: PUSH
31629: LD_INT 8
31631: EQUAL
31632: IFFALSE 31644
// j := 0 else
31634: LD_ADDR_VAR 0 3
31638: PUSH
31639: LD_INT 0
31641: ST_TO_ADDR
31642: GO 31658
// j := j + 1 ;
31644: LD_ADDR_VAR 0 3
31648: PUSH
31649: LD_VAR 0 3
31653: PUSH
31654: LD_INT 1
31656: PLUS
31657: ST_TO_ADDR
// SetSide ( i , j ) ;
31658: LD_VAR 0 2
31662: PPUSH
31663: LD_VAR 0 3
31667: PPUSH
31668: CALL_OW 235
// end ;
31672: GO 31595
31674: POP
31675: POP
// end ;
31676: LD_VAR 0 1
31680: RET
// export function hHackFog ; begin
31681: LD_INT 0
31683: PPUSH
// FogOff ( true ) ;
31684: LD_INT 1
31686: PPUSH
31687: CALL_OW 344
// end ;
31691: LD_VAR 0 1
31695: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31696: LD_INT 0
31698: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31699: LD_VAR 0 1
31703: PPUSH
31704: LD_VAR 0 2
31708: PPUSH
31709: LD_VAR 0 3
31713: PPUSH
31714: LD_INT 1
31716: PPUSH
31717: LD_INT 1
31719: PPUSH
31720: CALL_OW 483
// CenterOnXY ( x , y ) ;
31724: LD_VAR 0 2
31728: PPUSH
31729: LD_VAR 0 3
31733: PPUSH
31734: CALL_OW 84
// end ;
31738: LD_VAR 0 4
31742: RET
