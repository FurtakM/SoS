// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1519 0 0
// Nef_PrepareNature ;
 250: CALL 4421 0 0
// MissionIntro ;
 254: CALL 10430 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 , 4 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 , 0 ] [ Difficulty ] ;
 413: LD_ADDR_EXP 33
 417: PUSH
 418: LD_INT 2
 420: NEG
 421: PUSH
 422: LD_INT 1
 424: NEG
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 444: LD_ADDR_EXP 34
 448: PUSH
 449: LD_INT 135
 451: PUSH
 452: LD_INT 8
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 135
 461: PUSH
 462: LD_INT 4
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 134
 471: PUSH
 472: LD_INT 19
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 132
 481: PUSH
 482: LD_INT 26
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 128
 491: PUSH
 492: LD_INT 31
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 123
 501: PUSH
 502: LD_INT 37
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 118
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 112
 521: PUSH
 522: LD_INT 51
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 106
 531: PUSH
 532: LD_INT 57
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 99
 541: PUSH
 542: LD_INT 62
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 93
 551: PUSH
 552: LD_INT 67
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 86
 561: PUSH
 562: LD_INT 72
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 78
 571: PUSH
 572: LD_INT 75
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 71
 581: PUSH
 582: LD_INT 81
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 69
 591: PUSH
 592: LD_INT 88
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: LD_INT 71
 601: PUSH
 602: LD_INT 95
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 74
 611: PUSH
 612: LD_INT 103
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 80
 621: PUSH
 622: LD_INT 113
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 84
 631: PUSH
 632: LD_INT 121
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 89
 641: PUSH
 642: LD_INT 132
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 92
 651: PUSH
 652: LD_INT 142
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 93
 661: PUSH
 662: LD_INT 151
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PUSH
 669: LD_INT 91
 671: PUSH
 672: LD_INT 157
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 90
 681: PUSH
 682: LD_INT 163
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 93
 691: PUSH
 692: LD_INT 171
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 92
 701: PUSH
 702: LD_INT 177
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 737: LD_ADDR_EXP 35
 741: PUSH
 742: LD_INT 135
 744: PUSH
 745: LD_INT 8
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 135
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 134
 764: PUSH
 765: LD_INT 19
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 132
 774: PUSH
 775: LD_INT 26
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 128
 784: PUSH
 785: LD_INT 31
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 123
 794: PUSH
 795: LD_INT 37
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 118
 804: PUSH
 805: LD_INT 45
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 112
 814: PUSH
 815: LD_INT 51
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 106
 824: PUSH
 825: LD_INT 57
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 99
 834: PUSH
 835: LD_INT 62
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 104
 844: PUSH
 845: LD_INT 71
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 110
 854: PUSH
 855: LD_INT 78
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: LD_INT 119
 864: PUSH
 865: LD_INT 88
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 128
 874: PUSH
 875: LD_INT 97
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PUSH
 882: LD_INT 135
 884: PUSH
 885: LD_INT 106
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 141
 894: PUSH
 895: LD_INT 120
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 143
 904: PUSH
 905: LD_INT 132
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 143
 914: PUSH
 915: LD_INT 142
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PUSH
 922: LD_INT 140
 924: PUSH
 925: LD_INT 149
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 132
 934: PUSH
 935: LD_INT 153
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 125
 944: PUSH
 945: LD_INT 155
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 115
 954: PUSH
 955: LD_INT 154
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 105
 964: PUSH
 965: LD_INT 153
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 93
 974: PUSH
 975: LD_INT 151
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 91
 984: PUSH
 985: LD_INT 157
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 90
 994: PUSH
 995: LD_INT 163
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 93
1004: PUSH
1005: LD_INT 171
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 92
1014: PUSH
1015: LD_INT 177
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 , 25 ] [ Difficulty ] ;
1052: LD_ADDR_EXP 36
1056: PUSH
1057: LD_INT 40
1059: PUSH
1060: LD_INT 35
1062: PUSH
1063: LD_INT 30
1065: PUSH
1066: LD_INT 25
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_OWVAR 67
1079: ARRAY
1080: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1081: LD_ADDR_EXP 37
1085: PUSH
1086: LD_INT 50
1088: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 , 15 ] [ Difficulty ] ;
1089: LD_ADDR_EXP 14
1093: PUSH
1094: LD_INT 21
1096: PUSH
1097: LD_INT 19
1099: PUSH
1100: LD_INT 17
1102: PUSH
1103: LD_INT 15
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_OWVAR 67
1116: ARRAY
1117: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1118: LD_ADDR_EXP 38
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 4
1131: PUSH
1132: LD_INT 4
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_OWVAR 67
1145: ARRAY
1146: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 4
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// arabianTroopsMin = 2 ;
1176: LD_ADDR_EXP 40
1180: PUSH
1181: LD_INT 2
1183: ST_TO_ADDR
// arabianTroopsMax = 4 ;
1184: LD_ADDR_EXP 41
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// end ;
1192: LD_VAR 0 1
1196: RET
// every 0 0$1 trigger debugMode do var i ;
1197: LD_EXP 31
1201: IFFALSE 1516
1203: GO 1205
1205: DISABLE
1206: LD_INT 0
1208: PPUSH
// begin enable ;
1209: ENABLE
// FogOff ( your_side ) ;
1210: LD_OWVAR 2
1214: PPUSH
1215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1219: LD_ADDR_VAR 0 1
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_OWVAR 2
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 2
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 21
1251: PUSH
1252: LD_INT 2
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1290
// SetLives ( i , 1000 ) ;
1276: LD_VAR 0 1
1280: PPUSH
1281: LD_INT 1000
1283: PPUSH
1284: CALL_OW 234
1288: GO 1273
1290: POP
1291: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 22
1299: PUSH
1300: LD_OWVAR 2
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 21
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: FOR_IN
1329: IFFALSE 1393
// begin SetSkill ( i , skill_combat , 10 ) ;
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_INT 10
1341: PPUSH
1342: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1346: LD_VAR 0 1
1350: PPUSH
1351: LD_INT 2
1353: PPUSH
1354: LD_INT 10
1356: PPUSH
1357: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1361: LD_VAR 0 1
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 10
1371: PPUSH
1372: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 237
// end ;
1391: GO 1328
1393: POP
1394: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_OWVAR 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 30
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 30
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 69
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1514
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL_OW 274
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 9999
1467: PPUSH
1468: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1472: LD_VAR 0 1
1476: PPUSH
1477: CALL_OW 274
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 9999
1487: PPUSH
1488: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 274
1501: PPUSH
1502: LD_INT 3
1504: PPUSH
1505: LD_INT 9999
1507: PPUSH
1508: CALL_OW 277
// end ;
1512: GO 1449
1514: POP
1515: POP
// end ; end_of_file
1516: PPOPN 1
1518: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1519: LD_INT 0
1521: PPUSH
// randomsToSave = [ ] ;
1522: LD_ADDR_EXP 62
1526: PUSH
1527: EMPTY
1528: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1529: LD_ADDR_EXP 57
1533: PUSH
1534: EMPTY
1535: ST_TO_ADDR
// ruCars = [ ] ;
1536: LD_ADDR_EXP 61
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1543: CALL 2351 0 0
// PrepareHeroes ;
1547: CALL 1556 0 0
// end ;
1551: LD_VAR 0 1
1555: RET
// function PrepareHeroes ; var i , current ; begin
1556: LD_INT 0
1558: PPUSH
1559: PPUSH
1560: PPUSH
// uc_side = 3 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 3
1568: ST_TO_ADDR
// uc_nation = 3 ;
1569: LD_ADDR_OWVAR 21
1573: PUSH
1574: LD_INT 3
1576: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1577: LD_ADDR_EXP 42
1581: PUSH
1582: LD_STRING Burlak
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: CALL 9409 0 3
1595: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1596: LD_ADDR_EXP 43
1600: PUSH
1601: LD_STRING Gnyevko
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: CALL 9409 0 3
1614: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1615: LD_ADDR_EXP 45
1619: PUSH
1620: LD_STRING Kovalyuk
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 3
1628: PPUSH
1629: CALL 9409 0 3
1633: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1634: LD_ADDR_EXP 44
1638: PUSH
1639: LD_STRING Kirilenkova
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 4
1647: PPUSH
1648: CALL 9409 0 3
1652: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1653: LD_ADDR_EXP 46
1657: PUSH
1658: LD_STRING Belkov
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL 9409 0 3
1671: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1672: LD_ADDR_EXP 47
1676: PUSH
1677: LD_STRING Belkov2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 9409 0 3
1690: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1691: LD_ADDR_EXP 48
1695: PUSH
1696: LD_STRING Scholtze
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 4
1704: PPUSH
1705: CALL 9409 0 3
1709: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1710: LD_ADDR_EXP 52
1714: PUSH
1715: LD_STRING Popov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL 9409 0 3
1728: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1729: LD_ADDR_EXP 53
1733: PUSH
1734: LD_STRING Platonov
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL 9409 0 3
1747: ST_TO_ADDR
// uc_side = 6 ;
1748: LD_ADDR_OWVAR 20
1752: PUSH
1753: LD_INT 6
1755: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1756: LD_ADDR_EXP 54
1760: PUSH
1761: LD_STRING Gaydar
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 9409 0 3
1774: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1775: LD_ADDR_EXP 49
1779: PUSH
1780: LD_STRING Kuzmov
1782: PPUSH
1783: LD_INT 0
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL 9409 0 3
1793: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1794: LD_EXP 49
1798: PPUSH
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 108
1804: PPUSH
1805: LD_INT 5
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 50
// ComHold ( Kuzmov ) ;
1815: LD_EXP 49
1819: PPUSH
1820: CALL_OW 140
// uc_side = 3 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1832: LD_EXP 42
1836: PUSH
1837: LD_EXP 43
1841: PUSH
1842: LD_EXP 44
1846: PUSH
1847: LD_EXP 45
1851: PUSH
1852: LD_EXP 46
1856: PUSH
1857: LD_EXP 47
1861: PUSH
1862: LD_EXP 48
1866: PUSH
1867: LD_EXP 52
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 9492 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1892: LD_ADDR_EXP 50
1896: PUSH
1897: LD_STRING 03_other_survivors
1899: PPUSH
1900: CALL_OW 31
1904: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1905: LD_ADDR_EXP 51
1909: PUSH
1910: LD_STRING 03_other_kirov
1912: PPUSH
1913: CALL_OW 31
1917: ST_TO_ADDR
// for i in other_survivors do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_EXP 50
1927: PUSH
1928: FOR_IN
1929: IFFALSE 1994
// begin if ruCars then
1931: LD_EXP 61
1935: IFFALSE 1977
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_EXP 61
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1955: LD_ADDR_EXP 61
1959: PUSH
1960: LD_EXP 61
1964: PUSH
1965: LD_EXP 61
1969: PUSH
1970: LD_INT 1
1972: ARRAY
1973: DIFF
1974: ST_TO_ADDR
// end else
1975: GO 1992
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1977: LD_VAR 0 2
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 49
// end ;
1992: GO 1928
1994: POP
1995: POP
// for i in other_kirov_survivors do
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_EXP 51
2005: PUSH
2006: FOR_IN
2007: IFFALSE 2072
// begin if ruCars then
2009: LD_EXP 61
2013: IFFALSE 2055
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_EXP 61
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PPUSH
2029: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2033: LD_ADDR_EXP 61
2037: PUSH
2038: LD_EXP 61
2042: PUSH
2043: LD_EXP 61
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: DIFF
2052: ST_TO_ADDR
// end else
2053: GO 2070
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2055: LD_VAR 0 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 0
2065: PPUSH
2066: CALL_OW 49
// end ;
2070: GO 2006
2072: POP
2073: POP
// PrepareSoldier ( sex_male , 1 ) ;
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 381
// dialogRus = CreateHuman ;
2084: LD_ADDR_EXP 59
2088: PUSH
2089: CALL_OW 44
2093: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2094: LD_EXP 50
2098: PUSH
2099: LD_EXP 51
2103: PLUS
2104: PUSH
2105: LD_EXP 43
2109: PUSH
2110: LD_EXP 44
2114: PUSH
2115: LD_EXP 45
2119: PUSH
2120: LD_EXP 46
2124: PUSH
2125: LD_EXP 47
2129: PUSH
2130: LD_EXP 48
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PLUS
2143: PUSH
2144: LD_INT 8
2146: LESS
2147: IFFALSE 2346
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_EXP 50
2158: PUSH
2159: LD_EXP 51
2163: PLUS
2164: PUSH
2165: LD_EXP 43
2169: PUSH
2170: LD_EXP 44
2174: PUSH
2175: LD_EXP 45
2179: PUSH
2180: LD_EXP 46
2184: PUSH
2185: LD_EXP 47
2189: PUSH
2190: LD_EXP 48
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PLUS
2203: ST_TO_ADDR
// current = 8 - current ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 8
2211: PUSH
2212: LD_VAR 0 3
2216: MINUS
2217: ST_TO_ADDR
// for i := 1 to current do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_VAR 0 3
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2344
// begin uc_nation = 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// uc_side = 3 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2252: LD_INT 0
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 4
2260: PPUSH
2261: CALL_OW 12
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 3
2271: PPUSH
2272: CALL_OW 12
2276: PPUSH
2277: CALL_OW 380
// if ruCars then
2281: LD_EXP 61
2285: IFFALSE 2327
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2287: CALL_OW 44
2291: PPUSH
2292: LD_EXP 61
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2305: LD_ADDR_EXP 61
2309: PUSH
2310: LD_EXP 61
2314: PUSH
2315: LD_EXP 61
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: DIFF
2324: ST_TO_ADDR
// end else
2325: GO 2342
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_INT 2
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL_OW 49
// end ;
2342: GO 2233
2344: POP
2345: POP
// end ; end ;
2346: LD_VAR 0 1
2350: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2351: LD_INT 0
2353: PPUSH
2354: PPUSH
2355: PPUSH
// uc_side = 3 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 3
2363: ST_TO_ADDR
// uc_nation = 3 ;
2364: LD_ADDR_OWVAR 21
2368: PUSH
2369: LD_INT 3
2371: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_EXP 5
2386: PUSH
2387: FOR_TO
2388: IFFALSE 2537
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2390: LD_ADDR_OWVAR 37
2394: PUSH
2395: LD_EXP 5
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_EXP 5
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_INT 2
2428: ARRAY
2429: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2430: LD_ADDR_OWVAR 38
2434: PUSH
2435: LD_EXP 5
2439: PUSH
2440: LD_VAR 0 2
2444: ARRAY
2445: PUSH
2446: LD_INT 3
2448: ARRAY
2449: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_EXP 5
2459: PUSH
2460: LD_VAR 0 2
2464: ARRAY
2465: PUSH
2466: LD_INT 4
2468: ARRAY
2469: ST_TO_ADDR
// uc_direction := 3 ;
2470: LD_ADDR_OWVAR 24
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2478: LD_ADDR_OWVAR 41
2482: PUSH
2483: LD_INT 25
2485: PPUSH
2486: LD_INT 30
2488: PPUSH
2489: CALL_OW 12
2493: ST_TO_ADDR
// car := CreateVehicle ;
2494: LD_ADDR_VAR 0 3
2498: PUSH
2499: CALL_OW 45
2503: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2504: LD_ADDR_EXP 61
2508: PUSH
2509: LD_EXP 61
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 2
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// end ;
2535: GO 2387
2537: POP
2538: POP
// end ;
2539: LD_VAR 0 1
2543: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2544: LD_INT 0
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// rnd = rand ( 1 , 4 ) ;
2554: LD_ADDR_VAR 0 3
2558: PUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 12
2569: ST_TO_ADDR
// uc_side = 6 ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_INT 6
2577: ST_TO_ADDR
// uc_nation = 3 ;
2578: LD_ADDR_OWVAR 21
2582: PUSH
2583: LD_INT 3
2585: ST_TO_ADDR
// if rnd < 4 then
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 4
2593: LESS
2594: IFFALSE 2970
// begin vc_chassis = ru_medium_wheeled ;
2596: LD_ADDR_OWVAR 37
2600: PUSH
2601: LD_INT 21
2603: ST_TO_ADDR
// vc_control = control_manual ;
2604: LD_ADDR_OWVAR 38
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_engine = engine_combustion ;
2612: LD_ADDR_OWVAR 39
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2620: LD_ADDR_VAR 0 5
2624: PUSH
2625: LD_INT 1
2627: PPUSH
2628: LD_INT 100
2630: PPUSH
2631: CALL_OW 12
2635: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2636: LD_VAR 0 5
2640: PUSH
2641: LD_EXP 37
2645: PUSH
2646: LD_INT 1
2648: PLUS
2649: LESS
2650: IFFALSE 2662
// vc_weapon = ru_cargo_bay else
2652: LD_ADDR_OWVAR 40
2656: PUSH
2657: LD_INT 51
2659: ST_TO_ADDR
2660: GO 2693
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2662: LD_ADDR_OWVAR 40
2666: PUSH
2667: LD_INT 42
2669: PUSH
2670: LD_INT 43
2672: PUSH
2673: LD_INT 44
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 12
2691: ARRAY
2692: ST_TO_ADDR
// vehicle = CreateVehicle ;
2693: LD_ADDR_VAR 0 7
2697: PUSH
2698: CALL_OW 45
2702: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2703: LD_VAR 0 7
2707: PPUSH
2708: LD_INT 3
2710: PPUSH
2711: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2715: LD_VAR 0 7
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 12
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: CALL_OW 12
2754: PPUSH
2755: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2759: CALL_OW 44
2763: PPUSH
2764: LD_VAR 0 7
2768: PPUSH
2769: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2773: LD_OWVAR 40
2777: PUSH
2778: LD_INT 51
2780: EQUAL
2781: IFFALSE 2798
// AddCargo ( vehicle , mat_cans , 100 ) ;
2783: LD_VAR 0 7
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2798: LD_VAR 0 7
2802: PPUSH
2803: LD_INT 500
2805: PPUSH
2806: LD_INT 1000
2808: PPUSH
2809: CALL_OW 12
2813: PPUSH
2814: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_INT 2
2828: PPUSH
2829: CALL_OW 12
2833: ST_TO_ADDR
// if rnd = 1 then
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 1
2841: EQUAL
2842: IFFALSE 2907
// for i := 3 to russianCargoPath1 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 3
2852: DEC
2853: ST_TO_ADDR
2854: LD_EXP 34
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2903
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2862: LD_VAR 0 7
2866: PPUSH
2867: LD_EXP 34
2871: PUSH
2872: LD_VAR 0 2
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: LD_EXP 34
2886: PUSH
2887: LD_VAR 0 2
2891: ARRAY
2892: PUSH
2893: LD_INT 2
2895: ARRAY
2896: PPUSH
2897: CALL_OW 171
2901: GO 2859
2903: POP
2904: POP
2905: GO 2968
// for i := 3 to russianCargoPath2 do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: DOUBLE
2913: LD_INT 3
2915: DEC
2916: ST_TO_ADDR
2917: LD_EXP 35
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2966
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2925: LD_VAR 0 7
2929: PPUSH
2930: LD_EXP 35
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 2
2954: ARRAY
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PPUSH
2960: CALL_OW 171
2964: GO 2922
2966: POP
2967: POP
// end else
2968: GO 3309
// begin for i := 1 to rand ( 1 , 3 ) do
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: DOUBLE
2976: LD_INT 1
2978: DEC
2979: ST_TO_ADDR
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 12
2990: PUSH
2991: FOR_TO
2992: IFFALSE 3070
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: CALL_OW 12
3007: PPUSH
3008: LD_INT 2
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 12
3018: PPUSH
3019: CALL_OW 380
// unit = CreateHuman ;
3023: LD_ADDR_VAR 0 6
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3033: LD_VAR 0 6
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3048: LD_VAR 0 6
3052: PPUSH
3053: LD_INT 500
3055: PPUSH
3056: LD_INT 1000
3058: PPUSH
3059: CALL_OW 12
3063: PPUSH
3064: CALL_OW 234
// end ;
3068: GO 2991
3070: POP
3071: POP
// rnd2 = rand ( 1 , 2 ) ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: CALL_OW 12
3087: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3088: LD_ADDR_VAR 0 8
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_INT 6
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 21
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: EMPTY
3117: LIST
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 60
3124: PUSH
3125: EMPTY
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3143: LD_ADDR_VAR 0 8
3147: PUSH
3148: LD_VAR 0 8
3152: PUSH
3153: LD_EXP 56
3157: DIFF
3158: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3159: LD_ADDR_VAR 0 8
3163: PUSH
3164: LD_VAR 0 8
3168: PUSH
3169: LD_EXP 57
3173: DIFF
3174: ST_TO_ADDR
// if rnd2 = 1 then
3175: LD_VAR 0 4
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: IFFALSE 3248
// for i := 3 to russianCargoPath1 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 3
3193: DEC
3194: ST_TO_ADDR
3195: LD_EXP 34
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3244
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3203: LD_VAR 0 8
3207: PPUSH
3208: LD_EXP 34
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PPUSH
3223: LD_EXP 34
3227: PUSH
3228: LD_VAR 0 2
3232: ARRAY
3233: PUSH
3234: LD_INT 2
3236: ARRAY
3237: PPUSH
3238: CALL_OW 171
3242: GO 3200
3244: POP
3245: POP
3246: GO 3309
// for i := 3 to russianCargoPath2 do
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: DOUBLE
3254: LD_INT 3
3256: DEC
3257: ST_TO_ADDR
3258: LD_EXP 35
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3307
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3266: LD_VAR 0 8
3270: PPUSH
3271: LD_EXP 35
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 1
3284: ARRAY
3285: PPUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 2
3299: ARRAY
3300: PPUSH
3301: CALL_OW 171
3305: GO 3263
3307: POP
3308: POP
// end ; end ;
3309: LD_VAR 0 1
3313: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
// for i := 1 to 2 do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_INT 2
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3399
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3335: LD_INT 0
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 3
3346: PPUSH
3347: CALL_OW 12
3351: PPUSH
3352: CALL_OW 380
// unit = CreateHuman ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: CALL_OW 44
3365: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3381: LD_ADDR_EXP 57
3385: PUSH
3386: LD_EXP 57
3390: PUSH
3391: LD_VAR 0 3
3395: ADD
3396: ST_TO_ADDR
// end ;
3397: GO 3332
3399: POP
3400: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 380
// unit = CreateHuman ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3447: LD_ADDR_EXP 57
3451: PUSH
3452: LD_EXP 57
3456: PUSH
3457: LD_VAR 0 3
3461: ADD
3462: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3463: LD_EXP 57
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: LD_INT 54
3473: PPUSH
3474: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3478: LD_EXP 57
3482: PPUSH
3483: LD_INT 25
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 72
3497: PPUSH
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 95
3503: PPUSH
3504: LD_INT 52
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: CALL_OW 205
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3519: LD_INT 0
3521: PPUSH
// uc_side = 2 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 2
3529: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3530: LD_ADDR_EXP 63
3534: PUSH
3535: LD_STRING Heike
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL 9409 0 3
3548: ST_TO_ADDR
// if Difficulty >= 2 then
3549: LD_OWVAR 67
3553: PUSH
3554: LD_INT 2
3556: GREATEREQUAL
3557: IFFALSE 3572
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3559: LD_INT 51
3561: PPUSH
3562: LD_INT 2
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 322
// end ;
3572: LD_VAR 0 1
3576: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
// currentEnemyGroup = [ ] ;
3582: LD_ADDR_EXP 65
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: DOUBLE
3595: LD_INT 1
3597: DEC
3598: ST_TO_ADDR
3599: LD_EXP 39
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3860
// begin uc_side = 2 ;
3607: LD_ADDR_OWVAR 20
3611: PUSH
3612: LD_INT 2
3614: ST_TO_ADDR
// uc_nation = nation_arabian ;
3615: LD_ADDR_OWVAR 21
3619: PUSH
3620: LD_INT 2
3622: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3623: LD_ADDR_OWVAR 40
3627: PUSH
3628: LD_INT 23
3630: PUSH
3631: LD_INT 24
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 26
3639: PUSH
3640: LD_INT 27
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 5
3655: PPUSH
3656: CALL_OW 12
3660: ARRAY
3661: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3662: LD_OWVAR 40
3666: PUSH
3667: LD_INT 25
3669: PUSH
3670: LD_INT 26
3672: PUSH
3673: LD_INT 27
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: IN
3681: IFFALSE 3712
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3683: LD_ADDR_OWVAR 37
3687: PUSH
3688: LD_INT 13
3690: PUSH
3691: LD_INT 14
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: ST_TO_ADDR
3710: GO 3743
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3712: LD_ADDR_OWVAR 37
3716: PUSH
3717: LD_INT 12
3719: PUSH
3720: LD_INT 13
3722: PUSH
3723: LD_INT 14
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: ST_TO_ADDR
// vc_control = control_manual ;
3743: LD_ADDR_OWVAR 38
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// vc_engine = engine_combustion ;
3751: LD_ADDR_OWVAR 39
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3759: LD_ADDR_OWVAR 41
3763: PUSH
3764: LD_INT 100
3766: ST_TO_ADDR
// veh = CreateVehicle ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: CALL_OW 45
3776: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3777: LD_ADDR_EXP 65
3781: PUSH
3782: LD_EXP 65
3786: PUSH
3787: LD_VAR 0 3
3791: ADD
3792: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_INT 7
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 26
3815: EQUAL
3816: IFFALSE 3832
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3818: LD_INT 0
3820: PPUSH
3821: LD_EXP 33
3825: PPUSH
3826: CALL_OW 383
3830: GO 3844
// PrepareMechanic ( false , enemySkillLevel ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_EXP 32
3839: PPUSH
3840: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3844: CALL_OW 44
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3604
3860: POP
3861: POP
// end ;
3862: LD_VAR 0 1
3866: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
// currentEnemyGroup = [ ] ;
3872: LD_ADDR_EXP 65
3876: PUSH
3877: EMPTY
3878: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_EXP 40
3893: PPUSH
3894: LD_EXP 41
3898: PPUSH
3899: CALL_OW 12
3903: PUSH
3904: FOR_TO
3905: IFFALSE 3984
// begin uc_side = 2 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 2
3914: ST_TO_ADDR
// uc_nation = nation_arabian ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 2
3922: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_EXP 32
3930: PUSH
3931: LD_INT 1
3933: MINUS
3934: PPUSH
3935: CALL_OW 381
// unit = CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3949: LD_ADDR_EXP 65
3953: PUSH
3954: LD_EXP 65
3958: PUSH
3959: LD_VAR 0 4
3963: ADD
3964: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 1
3974: PPUSH
3975: LD_INT 0
3977: PPUSH
3978: CALL_OW 49
// end ;
3982: GO 3904
3984: POP
3985: POP
// for i := 1 to rand ( 1 , 3 ) do
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 12
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4083
// begin uc_side = 2 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 2
4017: ST_TO_ADDR
// uc_nation = nation_arabian ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 32
4033: PPUSH
4034: CALL_OW 384
// unit = CreateHuman ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4048: LD_ADDR_EXP 65
4052: PUSH
4053: LD_EXP 65
4057: PUSH
4058: LD_VAR 0 4
4062: ADD
4063: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4064: LD_VAR 0 4
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_INT 0
4076: PPUSH
4077: CALL_OW 49
// end ;
4081: GO 4007
4083: POP
4084: POP
// end ;
4085: LD_VAR 0 2
4089: RET
// export function PrepareArabianKiller ; var un ; begin
4090: LD_INT 0
4092: PPUSH
4093: PPUSH
// uc_side = 5 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 5
4101: ST_TO_ADDR
// uc_nation = nation_arabian ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// hc_class = class_soldier ;
4110: LD_ADDR_OWVAR 28
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// un = CreateHuman ;
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_EXP 54
4175: PPUSH
4176: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4180: LD_ADDR_EXP 23
4184: PUSH
4185: LD_EXP 23
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: ST_TO_ADDR
// end ;
4194: LD_VAR 0 1
4198: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
// firstAttackGroup = [ ] ;
4205: LD_ADDR_EXP 64
4209: PUSH
4210: EMPTY
4211: ST_TO_ADDR
// uc_side = 2 ;
4212: LD_ADDR_OWVAR 20
4216: PUSH
4217: LD_INT 2
4219: ST_TO_ADDR
// uc_nation = nation_arabian ;
4220: LD_ADDR_OWVAR 21
4224: PUSH
4225: LD_INT 2
4227: ST_TO_ADDR
// for i := 1 to 3 do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4303
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4244: LD_INT 0
4246: PPUSH
4247: LD_EXP 32
4251: PUSH
4252: LD_INT 2
4254: MINUS
4255: PPUSH
4256: CALL_OW 381
// unit = CreateHuman ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: CALL_OW 44
4269: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4270: LD_ADDR_EXP 64
4274: PUSH
4275: LD_EXP 64
4279: PUSH
4280: LD_VAR 0 3
4284: ADD
4285: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 7
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// end ;
4301: GO 4241
4303: POP
4304: POP
// vc_weapon = ar_light_gun ;
4305: LD_ADDR_OWVAR 40
4309: PUSH
4310: LD_INT 23
4312: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4313: LD_ADDR_OWVAR 37
4317: PUSH
4318: LD_INT 13
4320: ST_TO_ADDR
// vc_control = control_manual ;
4321: LD_ADDR_OWVAR 38
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// vc_engine = engine_combustion ;
4329: LD_ADDR_OWVAR 39
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4337: LD_ADDR_OWVAR 41
4341: PUSH
4342: LD_INT 100
4344: ST_TO_ADDR
// veh = CreateVehicle ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: CALL_OW 45
4354: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4355: LD_ADDR_EXP 64
4359: PUSH
4360: LD_EXP 64
4364: PUSH
4365: LD_VAR 0 4
4369: ADD
4370: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4371: LD_VAR 0 4
4375: PPUSH
4376: LD_INT 7
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4386: LD_INT 0
4388: PPUSH
4389: LD_EXP 32
4393: PUSH
4394: LD_INT 1
4396: MINUS
4397: PPUSH
4398: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4402: CALL_OW 44
4406: PPUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: CALL_OW 52
// end ; end_of_file
4416: LD_VAR 0 1
4420: RET
// export function Nef_PrepareNature ; var i , un ; begin
4421: LD_INT 0
4423: PPUSH
4424: PPUSH
4425: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_EXP 26
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4556
// begin uc_side = 0 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 0
4455: ST_TO_ADDR
// uc_nation = nation_nature ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 0
4463: ST_TO_ADDR
// hc_class = class_apeman ;
4464: LD_ADDR_OWVAR 28
4468: PUSH
4469: LD_INT 12
4471: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4472: LD_ADDR_OWVAR 31
4476: PUSH
4477: LD_EXP 27
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_INT 2
4493: ARRAY
4494: PUSH
4495: LD_EXP 27
4499: PUSH
4500: LD_INT 3
4502: ARRAY
4503: PUSH
4504: LD_EXP 27
4508: PUSH
4509: LD_INT 4
4511: ARRAY
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4519: LD_ADDR_OWVAR 35
4523: PUSH
4524: LD_EXP 28
4528: ST_TO_ADDR
// un = CreateHuman ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: CALL_OW 44
4538: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_INT 8
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
// end ;
4554: GO 4445
4556: POP
4557: POP
// for i := 1 to animalsAmount [ 2 ] do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 26
4572: PUSH
4573: LD_INT 2
4575: ARRAY
4576: PUSH
4577: FOR_TO
4578: IFFALSE 4688
// begin uc_side = 0 ;
4580: LD_ADDR_OWVAR 20
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// uc_nation = nation_nature ;
4588: LD_ADDR_OWVAR 21
4592: PUSH
4593: LD_INT 0
4595: ST_TO_ADDR
// hc_class = class_phororhacos ;
4596: LD_ADDR_OWVAR 28
4600: PUSH
4601: LD_INT 18
4603: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4604: LD_ADDR_OWVAR 31
4608: PUSH
4609: LD_EXP 27
4613: PUSH
4614: LD_INT 1
4616: ARRAY
4617: PUSH
4618: LD_EXP 27
4622: PUSH
4623: LD_INT 2
4625: ARRAY
4626: PUSH
4627: LD_EXP 27
4631: PUSH
4632: LD_INT 3
4634: ARRAY
4635: PUSH
4636: LD_EXP 27
4640: PUSH
4641: LD_INT 4
4643: ARRAY
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4651: LD_ADDR_OWVAR 35
4655: PUSH
4656: LD_EXP 28
4660: ST_TO_ADDR
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 8
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4577
4688: POP
4689: POP
// for i := 1 to animalsAmount [ 3 ] do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_EXP 26
4704: PUSH
4705: LD_INT 3
4707: ARRAY
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4820
// begin uc_side = 0 ;
4712: LD_ADDR_OWVAR 20
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// uc_nation = nation_nature ;
4720: LD_ADDR_OWVAR 21
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// hc_class = class_tiger ;
4728: LD_ADDR_OWVAR 28
4732: PUSH
4733: LD_INT 14
4735: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4736: LD_ADDR_OWVAR 31
4740: PUSH
4741: LD_EXP 27
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PUSH
4750: LD_EXP 27
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PUSH
4759: LD_EXP 27
4763: PUSH
4764: LD_INT 3
4766: ARRAY
4767: PUSH
4768: LD_EXP 27
4772: PUSH
4773: LD_INT 4
4775: ARRAY
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4783: LD_ADDR_OWVAR 35
4787: PUSH
4788: LD_EXP 28
4792: ST_TO_ADDR
// un = CreateHuman ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: CALL_OW 44
4802: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 8
4810: PPUSH
4811: LD_INT 0
4813: PPUSH
4814: CALL_OW 49
// end ;
4818: GO 4709
4820: POP
4821: POP
// for i := 1 to animalsAmount [ 4 ] do
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 26
4836: PUSH
4837: LD_INT 4
4839: ARRAY
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4952
// begin uc_side = 0 ;
4844: LD_ADDR_OWVAR 20
4848: PUSH
4849: LD_INT 0
4851: ST_TO_ADDR
// uc_nation = nation_nature ;
4852: LD_ADDR_OWVAR 21
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// hc_class = 21 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 21
4867: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4868: LD_ADDR_OWVAR 31
4872: PUSH
4873: LD_EXP 27
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PUSH
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 2
4889: ARRAY
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: LD_EXP 27
4904: PUSH
4905: LD_INT 4
4907: ARRAY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4915: LD_ADDR_OWVAR 35
4919: PUSH
4920: LD_EXP 28
4924: ST_TO_ADDR
// un = CreateHuman ;
4925: LD_ADDR_VAR 0 3
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 8
4942: PPUSH
4943: LD_INT 0
4945: PPUSH
4946: CALL_OW 49
// end ;
4950: GO 4841
4952: POP
4953: POP
// for i := 1 to animalsAmount [ 5 ] do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: DOUBLE
4960: LD_INT 1
4962: DEC
4963: ST_TO_ADDR
4964: LD_EXP 26
4968: PUSH
4969: LD_INT 5
4971: ARRAY
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5035
// begin uc_side = 0 ;
4976: LD_ADDR_OWVAR 20
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// uc_nation = nation_nature ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// vc_chassis := 31 ;
4992: LD_ADDR_OWVAR 37
4996: PUSH
4997: LD_INT 31
4999: ST_TO_ADDR
// vc_control := control_rider ;
5000: LD_ADDR_OWVAR 38
5004: PUSH
5005: LD_INT 4
5007: ST_TO_ADDR
// un := CreateVehicle ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 45
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 8
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4973
5035: POP
5036: POP
// end ; end_of_file
5037: LD_VAR 0 1
5041: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
5051: PPUSH
5052: PPUSH
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
// for unit in units do
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5110
// if not ignorePath then
5075: LD_VAR 0 3
5079: NOT
5080: IFFALSE 5096
// SetTag ( unit , 0 ) else
5082: LD_VAR 0 8
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: CALL_OW 109
5094: GO 5108
// SetTag ( unit , 1 ) ;
5096: LD_VAR 0 8
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 109
5108: GO 5072
5110: POP
5111: POP
// startAttacks = false ;
5112: LD_ADDR_VAR 0 21
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5120: LD_ADDR_VAR 0 17
5124: PUSH
5125: LD_VAR 0 2
5129: PUSH
5130: LD_VAR 0 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_VAR 0 2
5149: ARRAY
5150: PUSH
5151: LD_INT 2
5153: ARRAY
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// mechanics = [ ] ;
5159: LD_ADDR_VAR 0 12
5163: PUSH
5164: EMPTY
5165: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5166: LD_ADDR_VAR 0 9
5170: PUSH
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 50
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5219: LD_ADDR_VAR 0 11
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 4
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 72
5253: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5254: LD_ADDR_VAR 0 13
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 1
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 24
5279: PUSH
5280: LD_INT 1000
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 72
5299: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5300: LD_ADDR_VAR 0 15
5304: PUSH
5305: LD_INT 9
5307: PPUSH
5308: CALL_OW 435
5312: ST_TO_ADDR
// if not ignorePath then
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 6300
// begin for unit in attackUnits do
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: FOR_IN
5331: IFFALSE 6074
// begin if path and not startAttacks then
5333: LD_VAR 0 2
5337: PUSH
5338: LD_VAR 0 21
5342: NOT
5343: AND
5344: IFFALSE 6063
// begin i = 1 ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5354: LD_ADDR_VAR 0 15
5358: PUSH
5359: LD_INT 9
5361: PPUSH
5362: CALL_OW 435
5366: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5367: LD_ADDR_VAR 0 18
5371: PUSH
5372: LD_INT 81
5374: PUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 255
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PPUSH
5394: LD_VAR 0 8
5398: PPUSH
5399: CALL_OW 74
5403: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5404: LD_ADDR_VAR 0 19
5408: PUSH
5409: LD_VAR 0 15
5413: PPUSH
5414: LD_VAR 0 8
5418: PPUSH
5419: CALL_OW 250
5423: PPUSH
5424: LD_VAR 0 8
5428: PPUSH
5429: CALL_OW 251
5433: PPUSH
5434: CALL_OW 439
5438: ST_TO_ADDR
// if damageUnits and medics then
5439: LD_VAR 0 13
5443: PUSH
5444: LD_VAR 0 11
5448: AND
5449: IFFALSE 5471
// ComHeal ( medics , damageUnits [ 1 ] ) else
5451: LD_VAR 0 11
5455: PPUSH
5456: LD_VAR 0 13
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 128
5469: GO 5514
// if medics then
5471: LD_VAR 0 11
5475: IFFALSE 5514
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5477: LD_VAR 0 11
5481: PPUSH
5482: LD_VAR 0 9
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PPUSH
5491: CALL_OW 250
5495: PPUSH
5496: LD_VAR 0 9
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: CALL_OW 251
5509: PPUSH
5510: CALL_OW 111
// if not HasTask ( unit ) then
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 314
5523: NOT
5524: IFFALSE 5763
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5526: LD_ADDR_VAR 0 19
5530: PUSH
5531: LD_VAR 0 15
5535: PPUSH
5536: LD_VAR 0 8
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 8
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: CALL_OW 439
5560: ST_TO_ADDR
// if i > crates then
5561: LD_VAR 0 7
5565: PUSH
5566: LD_VAR 0 15
5570: GREATER
5571: IFFALSE 5581
// i = 1 ;
5573: LD_ADDR_VAR 0 7
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5581: LD_VAR 0 18
5585: PUSH
5586: LD_VAR 0 19
5590: AND
5591: IFFALSE 5706
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5593: LD_VAR 0 8
5597: PPUSH
5598: LD_VAR 0 18
5602: PPUSH
5603: CALL_OW 250
5607: PPUSH
5608: LD_VAR 0 18
5612: PPUSH
5613: CALL_OW 251
5617: PPUSH
5618: CALL_OW 297
5622: PUSH
5623: LD_VAR 0 8
5627: PPUSH
5628: LD_VAR 0 19
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 19
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 297
5650: LESS
5651: IFFALSE 5669
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5653: LD_VAR 0 9
5657: PPUSH
5658: LD_VAR 0 18
5662: PPUSH
5663: CALL_OW 115
5667: GO 5704
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5669: LD_VAR 0 9
5673: PPUSH
5674: LD_VAR 0 15
5678: PUSH
5679: LD_VAR 0 7
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 15
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: PLUS
5698: ARRAY
5699: PPUSH
5700: CALL_OW 116
// end else
5704: GO 5763
// if crates then
5706: LD_VAR 0 15
5710: IFFALSE 5749
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5712: LD_VAR 0 9
5716: PPUSH
5717: LD_VAR 0 15
5721: PUSH
5722: LD_VAR 0 7
5726: ARRAY
5727: PPUSH
5728: LD_VAR 0 15
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: ARRAY
5742: PPUSH
5743: CALL_OW 116
5747: GO 5763
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5749: LD_VAR 0 9
5753: PPUSH
5754: LD_VAR 0 18
5758: PPUSH
5759: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5763: LD_INT 35
5765: PPUSH
5766: CALL_OW 67
// if path then
5770: LD_VAR 0 2
5774: IFFALSE 5860
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5776: LD_ADDR_VAR 0 16
5780: PUSH
5781: LD_VAR 0 8
5785: PPUSH
5786: LD_VAR 0 2
5790: PPUSH
5791: CALL 7190 0 2
5795: ST_TO_ADDR
// if agressiveMove then
5796: LD_VAR 0 4
5800: IFFALSE 5831
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5802: LD_VAR 0 9
5806: PPUSH
5807: LD_VAR 0 16
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_VAR 0 16
5820: PUSH
5821: LD_INT 2
5823: ARRAY
5824: PPUSH
5825: CALL_OW 114
5829: GO 5858
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5831: LD_VAR 0 9
5835: PPUSH
5836: LD_VAR 0 16
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 16
5849: PUSH
5850: LD_INT 2
5852: ARRAY
5853: PPUSH
5854: CALL_OW 111
// end else
5858: GO 5868
// startAttacks = true ;
5860: LD_ADDR_VAR 0 21
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// i = i + 2 ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_INT 2
5880: PLUS
5881: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5882: LD_VAR 0 8
5886: PPUSH
5887: CALL_OW 314
5891: NOT
5892: PUSH
5893: LD_INT 22
5895: PUSH
5896: LD_VAR 0 8
5900: PPUSH
5901: CALL_OW 255
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 92
5912: PUSH
5913: LD_VAR 0 16
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 16
5926: PUSH
5927: LD_INT 2
5929: ARRAY
5930: PUSH
5931: LD_INT 4
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: LD_INT 3
5951: GREATER
5952: AND
5953: PUSH
5954: LD_VAR 0 21
5958: NOT
5959: AND
5960: IFFALSE 5354
// for i := 1 to path do
5962: LD_ADDR_VAR 0 7
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_VAR 0 2
5976: PUSH
5977: FOR_TO
5978: IFFALSE 6061
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 7
5989: ARRAY
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_VAR 0 16
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: EQUAL
6004: PUSH
6005: LD_VAR 0 2
6009: PUSH
6010: LD_VAR 0 7
6014: ARRAY
6015: PUSH
6016: LD_INT 2
6018: ARRAY
6019: PUSH
6020: LD_VAR 0 16
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: EQUAL
6029: AND
6030: IFFALSE 6059
// begin path = path diff [ path [ i ] ] ;
6032: LD_ADDR_VAR 0 2
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: LD_VAR 0 7
6051: ARRAY
6052: PUSH
6053: EMPTY
6054: LIST
6055: DIFF
6056: ST_TO_ADDR
// break ;
6057: GO 6061
// end ;
6059: GO 5977
6061: POP
6062: POP
// end ; if not path then
6063: LD_VAR 0 2
6067: NOT
6068: IFFALSE 6072
// break ;
6070: GO 6074
// end ;
6072: GO 5330
6074: POP
6075: POP
// repeat unitsReachPathEnd = 0 ;
6076: LD_ADDR_VAR 0 20
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// for attackUnit in attackUnits do
6084: LD_ADDR_VAR 0 10
6088: PUSH
6089: LD_VAR 0 9
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6268
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_VAR 0 17
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 17
6115: PUSH
6116: LD_INT 2
6118: ARRAY
6119: PPUSH
6120: CALL_OW 297
6124: PUSH
6125: LD_INT 7
6127: LESS
6128: NOT
6129: PUSH
6130: LD_VAR 0 10
6134: PPUSH
6135: CALL_OW 110
6139: PUSH
6140: LD_INT 0
6142: EQUAL
6143: AND
6144: IFFALSE 6210
// begin if agressiveMove then
6146: LD_VAR 0 4
6150: IFFALSE 6181
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6152: LD_VAR 0 10
6156: PPUSH
6157: LD_VAR 0 17
6161: PUSH
6162: LD_INT 1
6164: ARRAY
6165: PPUSH
6166: LD_VAR 0 17
6170: PUSH
6171: LD_INT 2
6173: ARRAY
6174: PPUSH
6175: CALL_OW 114
6179: GO 6208
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6181: LD_VAR 0 10
6185: PPUSH
6186: LD_VAR 0 17
6190: PUSH
6191: LD_INT 1
6193: ARRAY
6194: PPUSH
6195: LD_VAR 0 17
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: CALL_OW 111
// end else
6208: GO 6237
// if GetTag ( attackUnit ) = 0 then
6210: LD_VAR 0 10
6214: PPUSH
6215: CALL_OW 110
6219: PUSH
6220: LD_INT 0
6222: EQUAL
6223: IFFALSE 6237
// SetTag ( attackUnit , 1 ) ;
6225: LD_VAR 0 10
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: CALL_OW 109
// if GetTag ( unit ) = 1 then
6237: LD_VAR 0 8
6241: PPUSH
6242: CALL_OW 110
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6266
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6252: LD_ADDR_VAR 0 20
6256: PUSH
6257: LD_VAR 0 20
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6094
6268: POP
6269: POP
// wait ( 0 0$1 ) ;
6270: LD_INT 35
6272: PPUSH
6273: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6277: LD_VAR 0 20
6281: PUSH
6282: LD_VAR 0 9
6286: PUSH
6287: LD_INT 3
6289: MINUS
6290: GREATER
6291: IFFALSE 6076
// wait ( 0 0$10 ) ;
6293: LD_INT 350
6295: PPUSH
6296: CALL_OW 67
// end ; for attackUnit in attackUnits do
6300: LD_ADDR_VAR 0 10
6304: PUSH
6305: LD_VAR 0 9
6309: PUSH
6310: FOR_IN
6311: IFFALSE 6327
// SetTag ( attackUnit , 2 ) ;
6313: LD_VAR 0 10
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 109
6325: GO 6310
6327: POP
6328: POP
// startAttacks = true ;
6329: LD_ADDR_VAR 0 21
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// if startAttacks then
6337: LD_VAR 0 21
6341: IFFALSE 7160
// begin repeat wait ( 0 0$1 ) ;
6343: LD_INT 35
6345: PPUSH
6346: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6350: LD_ADDR_VAR 0 11
6354: PUSH
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 50
6362: PUSH
6363: EMPTY
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 72
6384: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6385: LD_ADDR_VAR 0 13
6389: PUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 1000
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 72
6441: ST_TO_ADDR
// if damageUnits and medics then
6442: LD_VAR 0 13
6446: PUSH
6447: LD_VAR 0 11
6451: AND
6452: IFFALSE 6474
// ComHeal ( medics , damageUnits [ 1 ] ) else
6454: LD_VAR 0 11
6458: PPUSH
6459: LD_VAR 0 13
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: CALL_OW 128
6472: GO 6524
// if medics and not damageUnits then
6474: LD_VAR 0 11
6478: PUSH
6479: LD_VAR 0 13
6483: NOT
6484: AND
6485: IFFALSE 6524
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6487: LD_VAR 0 11
6491: PPUSH
6492: LD_VAR 0 9
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: CALL_OW 250
6505: PPUSH
6506: LD_VAR 0 9
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: PPUSH
6515: CALL_OW 251
6519: PPUSH
6520: CALL_OW 111
// for attackUnit in attackUnits do
6524: LD_ADDR_VAR 0 10
6528: PUSH
6529: LD_VAR 0 9
6533: PUSH
6534: FOR_IN
6535: IFFALSE 7151
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6537: LD_ADDR_VAR 0 22
6541: PUSH
6542: LD_INT 81
6544: PUSH
6545: LD_VAR 0 10
6549: PPUSH
6550: CALL_OW 255
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PPUSH
6564: LD_VAR 0 10
6568: PPUSH
6569: CALL_OW 74
6573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6574: LD_ADDR_VAR 0 23
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_VAR 0 10
6586: PPUSH
6587: CALL_OW 255
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 59
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 21
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: PPUSH
6643: LD_VAR 0 10
6647: PPUSH
6648: CALL_OW 74
6652: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6653: LD_VAR 0 10
6657: PPUSH
6658: CALL_OW 110
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: IFFALSE 6826
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6668: LD_VAR 0 10
6672: PPUSH
6673: LD_VAR 0 22
6677: PPUSH
6678: CALL_OW 296
6682: PUSH
6683: LD_INT 10
6685: PLUS
6686: PUSH
6687: LD_VAR 0 10
6691: PPUSH
6692: LD_VAR 0 23
6696: PPUSH
6697: CALL_OW 296
6701: LESS
6702: IFFALSE 6720
// ComAttackUnit ( attackUnit , target1 ) else
6704: LD_VAR 0 10
6708: PPUSH
6709: LD_VAR 0 22
6713: PPUSH
6714: CALL_OW 115
6718: GO 6734
// ComAttackUnit ( attackUnit , target2 ) ;
6720: LD_VAR 0 10
6724: PPUSH
6725: LD_VAR 0 23
6729: PPUSH
6730: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6734: LD_VAR 0 10
6738: PPUSH
6739: CALL_OW 256
6743: PUSH
6744: LD_INT 650
6746: LESS
6747: PUSH
6748: LD_VAR 0 10
6752: PPUSH
6753: CALL_OW 247
6757: PUSH
6758: LD_INT 2
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 10
6767: PPUSH
6768: CALL_OW 263
6772: PUSH
6773: LD_INT 1
6775: EQUAL
6776: AND
6777: IFFALSE 6826
// begin SetTag ( attackUnit , 3 ) ;
6779: LD_VAR 0 10
6783: PPUSH
6784: LD_INT 3
6786: PPUSH
6787: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6791: LD_VAR 0 10
6795: PPUSH
6796: CALL_OW 313
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: LD_INT 3
6807: PPUSH
6808: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6812: LD_VAR 0 10
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6826: LD_VAR 0 10
6830: PPUSH
6831: LD_VAR 0 5
6835: PPUSH
6836: CALL_OW 308
6840: PUSH
6841: LD_VAR 0 10
6845: PPUSH
6846: CALL_OW 110
6850: PUSH
6851: LD_INT 3
6853: EQUAL
6854: AND
6855: PUSH
6856: LD_VAR 0 10
6860: PPUSH
6861: CALL_OW 313
6865: AND
6866: IFFALSE 6939
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6868: LD_ADDR_VAR 0 14
6872: PUSH
6873: LD_VAR 0 10
6877: PPUSH
6878: CALL_OW 313
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: ST_TO_ADDR
// if not driver in mechanics then
6887: LD_VAR 0 14
6891: PUSH
6892: LD_VAR 0 12
6896: IN
6897: NOT
6898: IFFALSE 6916
// mechanics = mechanics ^ driver ;
6900: LD_ADDR_VAR 0 12
6904: PUSH
6905: LD_VAR 0 12
6909: PUSH
6910: LD_VAR 0 14
6914: ADD
6915: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6916: LD_VAR 0 14
6920: PPUSH
6921: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6925: LD_VAR 0 14
6929: PPUSH
6930: LD_VAR 0 10
6934: PPUSH
6935: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6939: LD_VAR 0 10
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: EQUAL
6952: IFFALSE 7070
// begin SetTag ( attackUnit , 2 ) ;
6954: LD_VAR 0 10
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6966: LD_VAR 0 10
6970: PPUSH
6971: CALL_OW 247
6975: PUSH
6976: LD_INT 2
6978: EQUAL
6979: PUSH
6980: LD_VAR 0 10
6984: PPUSH
6985: CALL_OW 263
6989: PUSH
6990: LD_INT 1
6992: EQUAL
6993: AND
6994: PUSH
6995: LD_VAR 0 10
6999: PPUSH
7000: CALL_OW 313
7004: NOT
7005: AND
7006: IFFALSE 7070
// begin SetFuel ( attackUnit , 100 ) ;
7008: LD_VAR 0 10
7012: PPUSH
7013: LD_INT 100
7015: PPUSH
7016: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
7020: LD_VAR 0 12
7024: PPUSH
7025: LD_VAR 0 10
7029: PPUSH
7030: CALL_OW 74
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7044: LD_ADDR_VAR 0 12
7048: PUSH
7049: LD_VAR 0 12
7053: PUSH
7054: LD_VAR 0 12
7058: PPUSH
7059: LD_VAR 0 10
7063: PPUSH
7064: CALL_OW 74
7068: DIFF
7069: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7070: LD_ADDR_VAR 0 8
7074: PUSH
7075: LD_VAR 0 12
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7147
// begin if not IsInArea ( unit , retreatArea ) then
7083: LD_VAR 0 8
7087: PPUSH
7088: LD_VAR 0 5
7092: PPUSH
7093: CALL_OW 308
7097: NOT
7098: IFFALSE 7114
// ComMoveToArea ( unit , retreatArea ) ;
7100: LD_VAR 0 8
7104: PPUSH
7105: LD_VAR 0 5
7109: PPUSH
7110: CALL_OW 113
// if GetLives ( unit ) < 250 then
7114: LD_VAR 0 8
7118: PPUSH
7119: CALL_OW 256
7123: PUSH
7124: LD_INT 250
7126: LESS
7127: IFFALSE 7145
// mechanics = mechanics diff unit ;
7129: LD_ADDR_VAR 0 12
7133: PUSH
7134: LD_VAR 0 12
7138: PUSH
7139: LD_VAR 0 8
7143: DIFF
7144: ST_TO_ADDR
// end ;
7145: GO 7080
7147: POP
7148: POP
// end ;
7149: GO 6534
7151: POP
7152: POP
// until not attackUnits ;
7153: LD_VAR 0 9
7157: NOT
7158: IFFALSE 6343
// end ; wait ( 0 0$1 ) ;
7160: LD_INT 35
7162: PPUSH
7163: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PPUSH
7178: CALL_OW 72
7182: NOT
7183: IFFALSE 5166
// end ;
7185: LD_VAR 0 6
7189: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// for i := 2 to path do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 2
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 2
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7386
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: LD_VAR 0 2
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 4
7277: ARRAY
7278: PUSH
7279: LD_INT 2
7281: ARRAY
7282: PPUSH
7283: CALL_OW 297
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_VAR 0 5
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 2
7309: ARRAY
7310: PPUSH
7311: CALL_OW 297
7315: LESS
7316: IFFALSE 7384
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7318: LD_ADDR_VAR 0 5
7322: PUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 4
7340: ARRAY
7341: PUSH
7342: LD_INT 1
7344: ARRAY
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 4
7373: ARRAY
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PPUSH
7379: CALL_OW 1
7383: ST_TO_ADDR
// end ; end ;
7384: GO 7245
7386: POP
7387: POP
// result = nearPosition ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 3
7402: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7403: LD_EXP 58
7407: PPUSH
7408: CALL_OW 274
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 275
7420: PUSH
7421: LD_INT 0
7423: GREATER
7424: IFFALSE 7530
7426: GO 7428
7428: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7429: LD_EXP 57
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 72
7448: PPUSH
7449: LD_INT 31
7451: PPUSH
7452: LD_INT 105
7454: PPUSH
7455: LD_INT 51
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7465: LD_EXP 57
7469: PPUSH
7470: LD_INT 25
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: PPUSH
7485: LD_INT 31
7487: PPUSH
7488: LD_INT 114
7490: PPUSH
7491: LD_INT 58
7493: PPUSH
7494: LD_INT 3
7496: PPUSH
7497: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7501: LD_EXP 57
7505: PPUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 72
7520: PPUSH
7521: LD_EXP 58
7525: PPUSH
7526: CALL_OW 180
// end ; end_of_file
7530: END
// export function Lose_Burlak ; begin
7531: LD_INT 0
7533: PPUSH
// YouLost ( Burlak ) ;
7534: LD_STRING Burlak
7536: PPUSH
7537: CALL_OW 104
// end ;
7541: LD_VAR 0 1
7545: RET
// export function Lose_Gaydar ; begin
7546: LD_INT 0
7548: PPUSH
// YouLost ( Gaydar ) ;
7549: LD_STRING Gaydar
7551: PPUSH
7552: CALL_OW 104
// end ;
7556: LD_VAR 0 1
7560: RET
// export function Lose_SelfAttack ; begin
7561: LD_INT 0
7563: PPUSH
// YouLost ( SelfAttack ) ;
7564: LD_STRING SelfAttack
7566: PPUSH
7567: CALL_OW 104
// end ;
7571: LD_VAR 0 1
7575: RET
// export function Lose_Arrest ; begin
7576: LD_INT 0
7578: PPUSH
// YouLost ( Arrest ) ;
7579: LD_STRING Arrest
7581: PPUSH
7582: CALL_OW 104
// end ;
7586: LD_VAR 0 1
7590: RET
// export function Lose_ArabBreakthrough ; begin
7591: LD_INT 0
7593: PPUSH
// YouLost ( ArabBreakthrough ) ;
7594: LD_STRING ArabBreakthrough
7596: PPUSH
7597: CALL_OW 104
// end ;
7601: LD_VAR 0 1
7605: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7606: LD_EXP 7
7610: NOT
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: NOT
7652: AND
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: NOT
7694: AND
7695: IFFALSE 7708
7697: GO 7699
7699: DISABLE
// begin enable ;
7700: ENABLE
// YouLost ( Engineer ) ;
7701: LD_STRING Engineer
7703: PPUSH
7704: CALL_OW 104
// end ; end_of_file
7708: END
// export function FinishMission ; begin
7709: LD_INT 0
7711: PPUSH
// SetRewards ;
7712: CALL 7733 0 0
// SavePlayerCharacters ;
7716: CALL 8158 0 0
// SaveGlobalVariables ;
7720: CALL 8386 0 0
// YouWin ;
7724: CALL_OW 103
// end ;
7728: LD_VAR 0 1
7732: RET
// function SetRewards ; var unitsToReward ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
// SetAchievements ;
7737: CALL 18539 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7741: LD_INT 22
7743: PUSH
7744: LD_INT 3
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: NOT
7770: IFFALSE 7784
// AddMedal ( Dismantle , 1 ) else
7772: LD_STRING Dismantle
7774: PPUSH
7775: LD_INT 1
7777: PPUSH
7778: CALL_OW 101
7782: GO 7795
// AddMedal ( Dismantle , - 1 ) ;
7784: LD_STRING Dismantle
7786: PPUSH
7787: LD_INT 1
7789: NEG
7790: PPUSH
7791: CALL_OW 101
// if killedArabianUnits >= 25 then
7795: LD_EXP 22
7799: PUSH
7800: LD_INT 25
7802: GREATEREQUAL
7803: IFFALSE 7825
// begin AddMedal ( EnemyLosses , 1 ) ;
7805: LD_STRING EnemyLosses
7807: PPUSH
7808: LD_INT 1
7810: PPUSH
7811: CALL_OW 101
// heikeHeavyLosses = true ;
7815: LD_ADDR_EXP 4
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// end else
7823: GO 7836
// AddMedal ( EnemyLosses , - 1 ) ;
7825: LD_STRING EnemyLosses
7827: PPUSH
7828: LD_INT 1
7830: NEG
7831: PPUSH
7832: CALL_OW 101
// if not lostUnits then
7836: LD_EXP 24
7840: NOT
7841: IFFALSE 7855
// AddMedal ( LittleLosses , 1 ) else
7843: LD_STRING LittleLosses
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 101
7853: GO 7866
// AddMedal ( LittleLosses , - 1 ) ;
7855: LD_STRING LittleLosses
7857: PPUSH
7858: LD_INT 1
7860: NEG
7861: PPUSH
7862: CALL_OW 101
// GiveMedals ( Main ) ;
7866: LD_STRING Main
7868: PPUSH
7869: CALL_OW 102
// unitsToReward = [ ] ;
7873: LD_ADDR_VAR 0 2
7877: PUSH
7878: EMPTY
7879: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7880: LD_EXP 42
7884: PPUSH
7885: CALL_OW 255
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: IFFALSE 7911
// unitsToReward = unitsToReward ^ Burlak ;
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 2
7904: PUSH
7905: LD_EXP 42
7909: ADD
7910: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7911: LD_EXP 43
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 3
7923: EQUAL
7924: IFFALSE 7942
// unitsToReward = unitsToReward ^ Gnyevko ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_EXP 43
7940: ADD
7941: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7942: LD_EXP 44
7946: PPUSH
7947: CALL_OW 255
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: IFFALSE 7973
// unitsToReward = unitsToReward ^ Kirilenkova ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 2
7966: PUSH
7967: LD_EXP 44
7971: ADD
7972: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7973: LD_EXP 45
7977: PPUSH
7978: CALL_OW 255
7982: PUSH
7983: LD_INT 3
7985: EQUAL
7986: IFFALSE 8004
// unitsToReward = unitsToReward ^ Kovalyuk ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_EXP 45
8002: ADD
8003: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
8004: LD_EXP 46
8008: PPUSH
8009: CALL_OW 255
8013: PUSH
8014: LD_INT 3
8016: EQUAL
8017: IFFALSE 8035
// unitsToReward = unitsToReward ^ Belkov ;
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: LD_VAR 0 2
8028: PUSH
8029: LD_EXP 46
8033: ADD
8034: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8035: LD_EXP 47
8039: PPUSH
8040: CALL_OW 255
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: IFFALSE 8066
// unitsToReward = unitsToReward ^ Belkov2 ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: LD_VAR 0 2
8059: PUSH
8060: LD_EXP 47
8064: ADD
8065: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8066: LD_EXP 48
8070: PPUSH
8071: CALL_OW 255
8075: PUSH
8076: LD_INT 3
8078: EQUAL
8079: IFFALSE 8097
// unitsToReward = unitsToReward ^ Scholtze ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_EXP 48
8095: ADD
8096: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8097: LD_EXP 49
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: IFFALSE 8128
// unitsToReward = unitsToReward ^ Kuzmov ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_EXP 49
8126: ADD
8127: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_EXP 62
8142: ADD
8143: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 43
// end ;
8153: LD_VAR 0 1
8157: RET
// function SavePlayerCharacters ; var othersYour ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8162: LD_EXP 42
8166: PPUSH
8167: LD_STRING 04_Burlak
8169: PPUSH
8170: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8174: LD_EXP 43
8178: PPUSH
8179: CALL_OW 255
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8201
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8189: LD_EXP 43
8193: PPUSH
8194: LD_STRING 04_Gnyevko
8196: PPUSH
8197: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8201: LD_EXP 45
8205: PPUSH
8206: CALL_OW 255
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: IFFALSE 8228
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8216: LD_EXP 45
8220: PPUSH
8221: LD_STRING 04_Kovalyuk
8223: PPUSH
8224: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8228: LD_EXP 44
8232: PPUSH
8233: CALL_OW 255
8237: PUSH
8238: LD_INT 3
8240: EQUAL
8241: IFFALSE 8255
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8243: LD_EXP 44
8247: PPUSH
8248: LD_STRING 04_Kirilenkova
8250: PPUSH
8251: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8255: LD_EXP 48
8259: PPUSH
8260: CALL_OW 255
8264: PUSH
8265: LD_INT 3
8267: EQUAL
8268: IFFALSE 8282
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8270: LD_EXP 48
8274: PPUSH
8275: LD_STRING 04_Scholtze
8277: PPUSH
8278: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8282: LD_EXP 46
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 3
8294: EQUAL
8295: IFFALSE 8309
// SaveCharacters ( Belkov , 04_Belkov ) ;
8297: LD_EXP 46
8301: PPUSH
8302: LD_STRING 04_Belkov
8304: PPUSH
8305: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8309: LD_EXP 47
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: IFFALSE 8336
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8324: LD_EXP 47
8328: PPUSH
8329: LD_STRING 04_Belkov2
8331: PPUSH
8332: CALL_OW 38
// if IsOK ( Kuzmov ) then
8336: LD_EXP 49
8340: PPUSH
8341: CALL_OW 302
8345: IFFALSE 8359
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8347: LD_EXP 49
8351: PPUSH
8352: LD_STRING 04_Kuzmov
8354: PPUSH
8355: CALL_OW 38
// othersYour = randomsToSave ;
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_EXP 62
8368: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8369: LD_EXP 62
8373: PPUSH
8374: LD_STRING 04_other_survivors
8376: PPUSH
8377: CALL_OW 38
// end ;
8381: LD_VAR 0 1
8385: RET
// function SaveGlobalVariables ; begin
8386: LD_INT 0
8388: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8389: LD_EXP 4
8393: PPUSH
8394: LD_STRING 04_HeikeHeavyLosses_1
8396: PPUSH
8397: CALL_OW 39
// end ; end_of_file
8401: LD_VAR 0 1
8405: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 255
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 266
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_INT 5
8442: PPUSH
8443: CALL_OW 308
8447: NOT
8448: AND
8449: IFFALSE 8460
// Dial_DepotInWrongPlace ( building ) ;
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL 11049 0 1
// end ;
8460: PPOPN 2
8462: END
// on BuildingComplete ( building ) do var i , cargo ;
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8467: LD_VAR 0 1
8471: PPUSH
8472: CALL_OW 255
8476: PUSH
8477: LD_INT 3
8479: EQUAL
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 266
8490: PUSH
8491: LD_INT 0
8493: EQUAL
8494: AND
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: LD_INT 5
8503: PPUSH
8504: CALL_OW 308
8508: AND
8509: PUSH
8510: LD_EXP 8
8514: NOT
8515: AND
8516: PUSH
8517: LD_EXP 9
8521: NOT
8522: AND
8523: IFFALSE 8549
// begin namedBase = true ;
8525: LD_ADDR_EXP 9
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_STRING chuikov
8540: PPUSH
8541: CALL_OW 500
// Dial_FinishDepot ;
8545: CALL 11323 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 255
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 266
8572: PUSH
8573: LD_INT 32
8575: EQUAL
8576: AND
8577: IFFALSE 8593
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8579: LD_ADDR_EXP 25
8583: PUSH
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 1
8591: PLUS
8592: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 255
8602: PUSH
8603: LD_INT 6
8605: EQUAL
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 266
8616: PUSH
8617: LD_INT 0
8619: EQUAL
8620: AND
8621: IFFALSE 8820
// begin secondBaseDepot = building ;
8623: LD_ADDR_EXP 58
8627: PUSH
8628: LD_VAR 0 1
8632: ST_TO_ADDR
// uc_side = 6 ;
8633: LD_ADDR_OWVAR 20
8637: PUSH
8638: LD_INT 6
8640: ST_TO_ADDR
// uc_nation = nation_russian ;
8641: LD_ADDR_OWVAR 21
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8649: LD_ADDR_OWVAR 37
8653: PUSH
8654: LD_INT 21
8656: ST_TO_ADDR
// vc_control = control_manual ;
8657: LD_ADDR_OWVAR 38
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// vc_engine = engine_combustion ;
8665: LD_ADDR_OWVAR 39
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8673: LD_ADDR_OWVAR 40
8677: PUSH
8678: LD_INT 51
8680: ST_TO_ADDR
// cargo = CreateVehicle ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: CALL_OW 45
8690: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8691: LD_VAR 0 3
8695: PPUSH
8696: LD_INT 3
8698: PPUSH
8699: LD_INT 0
8701: PPUSH
8702: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8706: LD_VAR 0 3
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 100
8716: PPUSH
8717: CALL_OW 291
// ComGive ( cargo , building ) ;
8721: LD_VAR 0 3
8725: PPUSH
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8735: LD_INT 0
8737: PPUSH
8738: LD_INT 2
8740: PPUSH
8741: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8745: CALL_OW 44
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: DOUBLE
8765: LD_INT 10
8767: DEC
8768: ST_TO_ADDR
8769: LD_EXP 34
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8818
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_EXP 34
8786: PUSH
8787: LD_VAR 0 2
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_EXP 34
8801: PUSH
8802: LD_VAR 0 2
8806: ARRAY
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: PPUSH
8812: CALL_OW 171
8816: GO 8774
8818: POP
8819: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 255
8829: PUSH
8830: LD_INT 6
8832: EQUAL
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 266
8843: PUSH
8844: LD_INT 31
8846: EQUAL
8847: AND
8848: IFFALSE 8893
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8850: LD_EXP 57
8854: PPUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 56
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 120
// end ;
8893: PPOPN 3
8895: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 266
8905: PUSH
8906: LD_INT 7
8908: EQUAL
8909: PUSH
8910: LD_EXP 15
8914: NOT
8915: AND
8916: IFFALSE 8922
// Dial_LabUpgraded ;
8918: CALL 11643 0 0
// end ;
8922: PPOPN 1
8924: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8925: LD_VAR 0 1
8929: PUSH
8930: LD_INT 3
8932: EQUAL
8933: PUSH
8934: LD_VAR 0 2
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: AND
8943: PUSH
8944: LD_VAR 0 1
8948: PUSH
8949: LD_INT 2
8951: EQUAL
8952: PUSH
8953: LD_VAR 0 2
8957: PUSH
8958: LD_INT 3
8960: EQUAL
8961: AND
8962: OR
8963: IFFALSE 8985
// begin if dial_contactBlock then
8965: LD_EXP 16
8969: IFFALSE 8973
// exit ;
8971: GO 9029
// dial_contactBlock = true ;
8973: LD_ADDR_EXP 16
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// Dial_Contact ;
8981: CALL 13858 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 3
8992: EQUAL
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: LD_INT 6
9001: EQUAL
9002: AND
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: LD_INT 6
9011: EQUAL
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: LD_INT 3
9020: EQUAL
9021: AND
9022: OR
9023: IFFALSE 9029
// Lose_SelfAttack ;
9025: CALL 7561 0 0
// end ;
9029: PPOPN 2
9031: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9032: LD_VAR 0 1
9036: PUSH
9037: LD_EXP 42
9041: EQUAL
9042: IFFALSE 9048
// Lose_Burlak ;
9044: CALL 7531 0 0
// if unit = Gaydar then
9048: LD_VAR 0 1
9052: PUSH
9053: LD_EXP 54
9057: EQUAL
9058: IFFALSE 9064
// Lose_Gaydar ;
9060: CALL 7546 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9064: LD_VAR 0 1
9068: PPUSH
9069: CALL_OW 255
9073: PUSH
9074: LD_INT 3
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 247
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: AND
9092: IFFALSE 9108
// lostUnits = lostUnits + 1 ;
9094: LD_ADDR_EXP 24
9098: PUSH
9099: LD_EXP 24
9103: PUSH
9104: LD_INT 1
9106: PLUS
9107: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 255
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 247
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: AND
9136: PUSH
9137: LD_EXP 54
9141: PPUSH
9142: CALL_OW 305
9146: NOT
9147: AND
9148: IFFALSE 9164
// killedArabianUnits = killedArabianUnits + 1 ;
9150: LD_ADDR_EXP 22
9154: PUSH
9155: LD_EXP 22
9159: PUSH
9160: LD_INT 1
9162: PLUS
9163: ST_TO_ADDR
// if unit in firstAttackGroup then
9164: LD_VAR 0 1
9168: PUSH
9169: LD_EXP 64
9173: IN
9174: IFFALSE 9192
// firstAttackGroup = firstAttackGroup diff unit ;
9176: LD_ADDR_EXP 64
9180: PUSH
9181: LD_EXP 64
9185: PUSH
9186: LD_VAR 0 1
9190: DIFF
9191: ST_TO_ADDR
// end ;
9192: PPOPN 1
9194: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 6
9202: EQUAL
9203: IFFALSE 9217
// SetSide ( building , 6 ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 6
9212: PPUSH
9213: CALL_OW 235
// end ;
9217: PPOPN 3
9219: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_INT 22
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 51
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9404
// if GetTaskList ( i ) > 0 then
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 437
9293: PUSH
9294: LD_INT 0
9296: GREATER
9297: IFFALSE 9402
// for j = 1 to GetTaskList ( i ) do
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 437
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9400
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9322: LD_ADDR_VAR 0 4
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: CALL_OW 437
9336: PUSH
9337: LD_VAR 0 3
9341: ARRAY
9342: PUSH
9343: LD_INT 4
9345: ARRAY
9346: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 255
9356: PUSH
9357: LD_INT 6
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 2
9365: PPUSH
9366: CALL_OW 437
9370: PUSH
9371: LD_VAR 0 3
9375: ARRAY
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PUSH
9381: LD_STRING <
9383: EQUAL
9384: AND
9385: IFFALSE 9398
// SetTaskList ( i , [ ] ) ;
9387: LD_VAR 0 2
9391: PPUSH
9392: EMPTY
9393: PPUSH
9394: CALL_OW 446
// end ;
9398: GO 9319
9400: POP
9401: POP
9402: GO 9281
9404: POP
9405: POP
// end ; end_of_file
9406: PPOPN 8
9408: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9409: LD_INT 0
9411: PPUSH
9412: PPUSH
// if exist_mode then
9413: LD_VAR 0 2
9417: IFFALSE 9442
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_EXP 30
9428: PUSH
9429: LD_VAR 0 1
9433: STR
9434: PPUSH
9435: CALL_OW 34
9439: ST_TO_ADDR
9440: GO 9457
// unit := NewCharacter ( ident ) ;
9442: LD_ADDR_VAR 0 5
9446: PUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 25
9456: ST_TO_ADDR
// if class then
9457: LD_VAR 0 3
9461: IFFALSE 9477
// SetClass ( unit , class ) ;
9463: LD_VAR 0 5
9467: PPUSH
9468: LD_VAR 0 3
9472: PPUSH
9473: CALL_OW 336
// result := unit ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_VAR 0 5
9486: ST_TO_ADDR
// end ;
9487: LD_VAR 0 4
9491: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9492: LD_INT 0
9494: PPUSH
9495: PPUSH
// for unit in units do
9496: LD_ADDR_VAR 0 5
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9530
// PlaceUnitArea ( unit , area , spawnMode ) ;
9509: LD_VAR 0 5
9513: PPUSH
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: CALL_OW 49
9528: GO 9506
9530: POP
9531: POP
// end ;
9532: LD_VAR 0 4
9536: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9537: LD_INT 0
9539: PPUSH
9540: PPUSH
9541: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_VAR 0 1
9551: PUSH
9552: LD_EXP 42
9556: PUSH
9557: LD_EXP 43
9561: PUSH
9562: LD_EXP 46
9566: PUSH
9567: LD_EXP 47
9571: PUSH
9572: LD_EXP 44
9576: PUSH
9577: LD_EXP 45
9581: PUSH
9582: LD_EXP 48
9586: PUSH
9587: LD_EXP 49
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: DIFF
9602: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: ST_TO_ADDR
// if radio then
9627: LD_VAR 0 4
9631: IFFALSE 9680
// begin if GetSex ( speaker ) = sex_male then
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL_OW 258
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9664
// SayRadio ( speaker , dialogMID ) else
9648: LD_VAR 0 7
9652: PPUSH
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL_OW 94
9662: GO 9678
// SayRadio ( speaker , dialogFID ) ;
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: CALL_OW 94
// end else
9678: GO 9725
// begin if GetSex ( speaker ) = sex_male then
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 258
9689: PUSH
9690: LD_INT 1
9692: EQUAL
9693: IFFALSE 9711
// Say ( speaker , dialogMID ) else
9695: LD_VAR 0 7
9699: PPUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 88
9709: GO 9725
// Say ( speaker , dialogFID ) ;
9711: LD_VAR 0 7
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: CALL_OW 88
// end ; result := speaker ;
9725: LD_ADDR_VAR 0 5
9729: PUSH
9730: LD_VAR 0 7
9734: ST_TO_ADDR
// end ;
9735: LD_VAR 0 5
9739: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9740: LD_INT 0
9742: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 255
9752: PUSH
9753: LD_VAR 0 3
9757: EQUAL
9758: PUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 302
9768: AND
9769: IFFALSE 9791
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9771: LD_VAR 0 1
9775: PPUSH
9776: LD_EXP 29
9780: PUSH
9781: LD_VAR 0 2
9785: STR
9786: PPUSH
9787: CALL_OW 38
// end ;
9791: LD_VAR 0 4
9795: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// resultCharactersToSave = [ ] ;
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// for unit in characters do
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_VAR 0 1
9817: PUSH
9818: FOR_IN
9819: IFFALSE 9867
// if GetSide ( unit ) = side and IsOK ( unit ) then
9821: LD_VAR 0 5
9825: PPUSH
9826: CALL_OW 255
9830: PUSH
9831: LD_VAR 0 3
9835: EQUAL
9836: PUSH
9837: LD_VAR 0 5
9841: PPUSH
9842: CALL_OW 302
9846: AND
9847: IFFALSE 9865
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 6
9858: PUSH
9859: LD_VAR 0 5
9863: ADD
9864: ST_TO_ADDR
9865: GO 9818
9867: POP
9868: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9869: LD_VAR 0 6
9873: PPUSH
9874: LD_EXP 29
9878: PUSH
9879: LD_VAR 0 2
9883: STR
9884: PPUSH
9885: CALL_OW 38
// end ;
9889: LD_VAR 0 4
9893: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9901: LD_ADDR_VAR 0 3
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 3
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 50
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_VAR 0 3
9951: PUSH
9952: LD_EXP 42
9956: DIFF
9957: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_VAR 0 3
9967: PUSH
9968: LD_EXP 52
9972: DIFF
9973: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_STRING text
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: LD_INT 8
9987: PPUSH
9988: LD_INT -5
9990: PUSH
9991: LD_EXP 42
9995: PUSH
9996: LD_INT -6
9998: PUSH
9999: LD_INT -2
10001: PUSH
10002: LD_INT -3
10004: PUSH
10005: LD_INT -5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_VAR 0 3
10020: ADD
10021: PUSH
10022: LD_INT -6
10024: PUSH
10025: LD_INT -4
10027: PUSH
10028: LD_EXP 52
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: PPUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 42
10068: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 6
10076: PPUSH
10077: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10081: LD_EXP 52
10085: PPUSH
10086: LD_INT 6
10088: PPUSH
10089: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10093: LD_VAR 0 4
10097: PPUSH
10098: LD_INT 3
10100: PPUSH
10101: CALL_OW 235
// burlakTeam = selectedPeople ;
10105: LD_ADDR_EXP 55
10109: PUSH
10110: LD_VAR 0 4
10114: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10115: LD_ADDR_EXP 56
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 6
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10149: LD_ADDR_EXP 56
10153: PUSH
10154: LD_EXP 56
10158: PUSH
10159: LD_EXP 49
10163: DIFF
10164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_INT 6
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: PUSH
10199: FOR_IN
10200: IFFALSE 10224
// if IsInUnit ( i ) then
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 310
10211: IFFALSE 10222
// ComExitVehicle ( i ) ;
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 121
10222: GO 10199
10224: POP
10225: POP
// if not Gnyevko in selectedPeople then
10226: LD_EXP 43
10230: PUSH
10231: LD_VAR 0 4
10235: IN
10236: NOT
10237: IFFALSE 10254
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10239: LD_EXP 43
10243: PPUSH
10244: LD_STRING Gnyevko
10246: PPUSH
10247: LD_INT 6
10249: PPUSH
10250: CALL 9740 0 3
// if not Kovalyuk in selectedPeople then
10254: LD_EXP 45
10258: PUSH
10259: LD_VAR 0 4
10263: IN
10264: NOT
10265: IFFALSE 10282
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10267: LD_EXP 45
10271: PPUSH
10272: LD_STRING Kovalyuk
10274: PPUSH
10275: LD_INT 6
10277: PPUSH
10278: CALL 9740 0 3
// if not Kirilenkova in selectedPeople then
10282: LD_EXP 44
10286: PUSH
10287: LD_VAR 0 4
10291: IN
10292: NOT
10293: IFFALSE 10310
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10295: LD_EXP 44
10299: PPUSH
10300: LD_STRING Kirilenkova
10302: PPUSH
10303: LD_INT 6
10305: PPUSH
10306: CALL 9740 0 3
// if not Scholtze in selectedPeople then
10310: LD_EXP 48
10314: PUSH
10315: LD_VAR 0 4
10319: IN
10320: NOT
10321: IFFALSE 10338
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10323: LD_EXP 48
10327: PPUSH
10328: LD_STRING Scholtze
10330: PPUSH
10331: LD_INT 6
10333: PPUSH
10334: CALL 9740 0 3
// if not Belkov in selectedPeople then
10338: LD_EXP 46
10342: PUSH
10343: LD_VAR 0 4
10347: IN
10348: NOT
10349: IFFALSE 10366
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10351: LD_EXP 46
10355: PPUSH
10356: LD_STRING Belkov
10358: PPUSH
10359: LD_INT 6
10361: PPUSH
10362: CALL 9740 0 3
// if not Belkov2 in selectedPeople then
10366: LD_EXP 47
10370: PUSH
10371: LD_VAR 0 4
10375: IN
10376: NOT
10377: IFFALSE 10394
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_STRING Belkov2
10386: PPUSH
10387: LD_INT 6
10389: PPUSH
10390: CALL 9740 0 3
// others = popovTeam diff Popov ;
10394: LD_ADDR_VAR 0 5
10398: PUSH
10399: LD_EXP 56
10403: PUSH
10404: LD_EXP 52
10408: DIFF
10409: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_STRING other_survivors_with_popov
10417: PPUSH
10418: LD_INT 6
10420: PPUSH
10421: CALL 9796 0 3
// end ; end_of_file
10425: LD_VAR 0 1
10429: RET
// export function MissionIntro ; var i , unit ; begin
10430: LD_INT 0
10432: PPUSH
10433: PPUSH
10434: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10435: LD_EXP 42
10439: PPUSH
10440: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10444: LD_EXP 59
10448: PPUSH
10449: LD_STRING D1-RSol1-1
10451: PPUSH
10452: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-1
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-1
10475: PPUSH
10476: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10480: LD_EXP 53
10484: PPUSH
10485: LD_STRING D1-Pla-2
10487: PPUSH
10488: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10492: LD_EXP 42
10496: PPUSH
10497: LD_STRING D1-Bur-2
10499: PPUSH
10500: CALL_OW 88
// SelectCharacters ;
10504: CALL 9894 0 0
// InGameOff ;
10508: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10512: LD_STRING M1
10514: PPUSH
10515: CALL_OW 337
// SaveForQuickRestart ;
10519: CALL_OW 22
// for unit in popovTeam do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: LD_EXP 56
10532: PUSH
10533: FOR_IN
10534: IFFALSE 10606
// begin for i := 3 to russianCargoPath1 do
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: DOUBLE
10542: LD_INT 3
10544: DEC
10545: ST_TO_ADDR
10546: LD_EXP 34
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10595
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_EXP 34
10563: PUSH
10564: LD_VAR 0 2
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: LD_EXP 34
10578: PUSH
10579: LD_VAR 0 2
10583: ARRAY
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PPUSH
10589: CALL_OW 171
10593: GO 10551
10595: POP
10596: POP
// wait ( 0 0$01 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// end ;
10604: GO 10533
10606: POP
10607: POP
// end ;
10608: LD_VAR 0 1
10612: RET
// every 0 0$1 do var unit , driver ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin enable ;
10620: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10621: LD_INT 4
10623: PPUSH
10624: LD_INT 22
10626: PUSH
10627: LD_INT 6
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: NOT
10639: PUSH
10640: LD_INT 4
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 2
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: NOT
10690: AND
10691: IFFALSE 10695
// exit ;
10693: GO 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 4
10702: PPUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 6
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10774
// begin RemoveUnit ( unit ) ;
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10730: LD_VAR 0 1
10734: PUSH
10735: LD_EXP 56
10739: IN
10740: NOT
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 264
10751: PUSH
10752: LD_INT 51
10754: EQUAL
10755: AND
10756: IFFALSE 10772
// evacuatedCargos = evacuatedCargos + 1 ;
10758: LD_ADDR_EXP 10
10762: PUSH
10763: LD_EXP 10
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ST_TO_ADDR
// end ;
10772: GO 10718
10774: POP
10775: POP
// if canExitMap then
10776: LD_EXP 6
10780: IFFALSE 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 4
10789: PPUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 70
10836: PUSH
10837: FOR_IN
10838: IFFALSE 11044
// begin if GetType ( unit ) = unit_vehicle then
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 247
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: IFFALSE 10953
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 313
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 42
10873: PUSH
10874: LD_EXP 43
10878: PUSH
10879: LD_EXP 44
10883: PUSH
10884: LD_EXP 45
10888: PUSH
10889: LD_EXP 46
10893: PUSH
10894: LD_EXP 47
10898: PUSH
10899: LD_EXP 48
10903: PUSH
10904: LD_EXP 49
10908: PUSH
10909: LD_EXP 54
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: IN
10925: NOT
10926: IFFALSE 10953
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10928: LD_ADDR_EXP 62
10932: PUSH
10933: LD_EXP 62
10937: PUSH
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 313
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: ADD
10952: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 42
10962: PUSH
10963: LD_EXP 43
10967: PUSH
10968: LD_EXP 44
10972: PUSH
10973: LD_EXP 45
10977: PUSH
10978: LD_EXP 46
10982: PUSH
10983: LD_EXP 47
10987: PUSH
10988: LD_EXP 48
10992: PUSH
10993: LD_EXP 49
10997: PUSH
10998: LD_EXP 54
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: IN
11014: NOT
11015: IFFALSE 11033
// randomsToSave = randomsToSave ^ unit ;
11017: LD_ADDR_EXP 62
11021: PUSH
11022: LD_EXP 62
11026: PUSH
11027: LD_VAR 0 1
11031: ADD
11032: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 64
// end ;
11042: GO 10837
11044: POP
11045: POP
// end ;
11046: PPOPN 2
11048: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: PPUSH
11082: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 87
// InGameOn ;
11095: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11099: LD_EXP 53
11103: PPUSH
11104: LD_STRING D2a-Pla-1
11106: PPUSH
11107: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_INT 3
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 21
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: PUSH
11156: FOR_IN
11157: IFFALSE 11195
// if GetDistUnits ( building , unit ) < 10 then
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: CALL_OW 296
11173: PUSH
11174: LD_INT 10
11176: LESS
11177: IFFALSE 11193
// ComDismantle ( unit , building ) ;
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 167
11193: GO 11156
11195: POP
11196: POP
// repeat wait ( 0 0$1 ) ;
11197: LD_INT 35
11199: PPUSH
11200: CALL_OW 67
// until not IsPlaced ( building ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 305
11213: NOT
11214: IFFALSE 11197
// InGameOff ;
11216: CALL_OW 9
// end ;
11220: LD_VAR 0 2
11224: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11225: LD_EXP 49
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 6
11237: EQUAL
11238: IFFALSE 11320
11240: GO 11242
11242: DISABLE
11243: LD_INT 0
11245: PPUSH
// begin enable ;
11246: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11318
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_EXP 49
11293: PPUSH
11294: CALL_OW 296
11298: PUSH
11299: LD_INT 9
11301: LESS
11302: IFFALSE 11316
// SetSide ( Kuzmov , 3 ) ;
11304: LD_EXP 49
11308: PPUSH
11309: LD_INT 3
11311: PPUSH
11312: CALL_OW 235
11316: GO 11281
11318: POP
11319: POP
// end ;
11320: PPOPN 1
11322: END
// export function Dial_FinishDepot ; var i ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// startEvacuation = true ;
11327: LD_ADDR_EXP 8
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11335: LD_STRING MOutBuild
11337: PPUSH
11338: CALL_OW 337
// uc_side = 6 ;
11342: LD_ADDR_OWVAR 20
11346: PUSH
11347: LD_INT 6
11349: ST_TO_ADDR
// uc_nation = 3 ;
11350: LD_ADDR_OWVAR 21
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11358: LD_ADDR_OWVAR 37
11362: PUSH
11363: LD_INT 21
11365: ST_TO_ADDR
// vc_control = control_manual ;
11366: LD_ADDR_OWVAR 38
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// vc_engine = engine_combustion ;
11374: LD_ADDR_OWVAR 39
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11382: LD_ADDR_OWVAR 40
11386: PUSH
11387: LD_INT 51
11389: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11390: LD_ADDR_EXP 60
11394: PUSH
11395: CALL_OW 45
11399: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11400: LD_EXP 60
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11412: LD_EXP 60
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11427: LD_INT 1
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11437: CALL_OW 44
11441: PPUSH
11442: LD_EXP 60
11446: PPUSH
11447: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11451: LD_EXP 60
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 100
11461: PPUSH
11462: CALL_OW 291
// for i := 1 to 19 do
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 19
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11523
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11482: LD_EXP 60
11486: PPUSH
11487: LD_EXP 34
11491: PUSH
11492: LD_VAR 0 2
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_EXP 34
11506: PUSH
11507: LD_VAR 0 2
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: CALL_OW 171
11521: GO 11479
11523: POP
11524: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11525: LD_EXP 60
11529: PPUSH
11530: LD_INT 105
11532: PPUSH
11533: LD_INT 123
11535: PPUSH
11536: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11540: LD_EXP 60
11544: PPUSH
11545: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 21
11557: DEC
11558: ST_TO_ADDR
11559: LD_EXP 34
11563: PUSH
11564: FOR_TO
11565: IFFALSE 11608
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11567: LD_EXP 60
11571: PPUSH
11572: LD_EXP 34
11576: PUSH
11577: LD_VAR 0 2
11581: ARRAY
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_EXP 34
11591: PUSH
11592: LD_VAR 0 2
11596: ARRAY
11597: PUSH
11598: LD_INT 2
11600: ARRAY
11601: PPUSH
11602: CALL_OW 171
11606: GO 11564
11608: POP
11609: POP
// Say ( Burlak , D2-Bur-1 ) ;
11610: LD_EXP 42
11614: PPUSH
11615: LD_STRING D2-Bur-1
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11622: LD_EXP 53
11626: PPUSH
11627: LD_STRING D2-Pla-1
11629: PPUSH
11630: CALL_OW 94
// PrepareSecondBaseTeam ;
11634: CALL 3314 0 0
// end ;
11638: LD_VAR 0 1
11642: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
// dial_labUpgradedBlock = true ;
11647: LD_ADDR_EXP 15
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 3
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 26
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: PUSH
11711: LD_EXP 42
11715: PUSH
11716: LD_EXP 43
11720: PUSH
11721: LD_EXP 44
11725: PUSH
11726: LD_EXP 45
11730: PUSH
11731: LD_EXP 46
11735: PUSH
11736: LD_EXP 47
11740: PUSH
11741: LD_EXP 48
11745: PUSH
11746: LD_EXP 49
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11762: LD_EXP 48
11766: PPUSH
11767: CALL_OW 302
11771: PUSH
11772: LD_EXP 48
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_INT 3
11784: EQUAL
11785: AND
11786: IFFALSE 11814
// begin Say ( Scholtze , D5-Sch-1 ) ;
11788: LD_EXP 48
11792: PPUSH
11793: LD_STRING D5-Sch-1
11795: PPUSH
11796: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11800: LD_EXP 42
11804: PPUSH
11805: LD_STRING D5-Bur-1
11807: PPUSH
11808: CALL_OW 88
// end else
11812: GO 11949
// if randomMaleSci then
11814: LD_VAR 0 2
11818: IFFALSE 11850
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11820: LD_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_STRING D5-RSci1-1
11831: PPUSH
11832: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11836: LD_EXP 42
11840: PPUSH
11841: LD_STRING D5-Bur-1
11843: PPUSH
11844: CALL_OW 88
// end else
11848: GO 11949
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11850: LD_ADDR_VAR 0 2
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 4
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: PUSH
11906: LD_EXP 42
11910: PUSH
11911: EMPTY
11912: LIST
11913: DIFF
11914: ST_TO_ADDR
// if randomMaleSci then
11915: LD_VAR 0 2
11919: IFFALSE 11949
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_STRING D5-RSci1-1
11932: PPUSH
11933: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11937: LD_EXP 42
11941: PPUSH
11942: LD_STRING D5-Bur-1
11944: PPUSH
11945: CALL_OW 88
// end ; end ; end ;
11949: LD_VAR 0 1
11953: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11954: LD_EXP 60
11958: PPUSH
11959: LD_INT 105
11961: PPUSH
11962: LD_INT 123
11964: PPUSH
11965: CALL_OW 297
11969: PUSH
11970: LD_INT 12
11972: LESS
11973: IFFALSE 11999
11975: GO 11977
11977: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11978: LD_EXP 60
11982: PPUSH
11983: CALL_OW 313
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_STRING D2a-RSol1-1
11994: PPUSH
11995: CALL_OW 88
11999: END
// every 0 0$15 trigger startEvacuation do
12000: LD_EXP 8
12004: IFFALSE 12014
12006: GO 12008
12008: DISABLE
// begin enable ;
12009: ENABLE
// CreateEvacuateUnit ;
12010: CALL 2544 0 0
// end ;
12014: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
12015: LD_EXP 10
12019: PUSH
12020: LD_INT 3
12022: GREATEREQUAL
12023: IFFALSE 12122
12025: GO 12027
12027: DISABLE
// begin if IsOk ( Kuzmov ) then
12028: LD_EXP 49
12032: PPUSH
12033: CALL_OW 302
12037: IFFALSE 12107
// begin DialogueOn ;
12039: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-1
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-1
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-2
12074: PPUSH
12075: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12079: LD_EXP 42
12083: PPUSH
12084: LD_STRING D2b-Bur-2
12086: PPUSH
12087: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12091: LD_EXP 49
12095: PPUSH
12096: LD_STRING D2b-Kuz-3
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// end ; Query ( Q1 ) ;
12107: LD_STRING Q1
12109: PPUSH
12110: CALL_OW 97
// canStealCargo = true ;
12114: LD_ADDR_EXP 11
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ;
12122: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12123: LD_EXP 11
12127: IFFALSE 12425
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
// begin enable ;
12136: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 6
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 34
12164: PUSH
12165: LD_INT 51
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PUSH
12182: FOR_IN
12183: IFFALSE 12423
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 3
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 50
12212: PUSH
12213: EMPTY
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12419
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 296
12243: PUSH
12244: LD_INT 8
12246: LESS
12247: PUSH
12248: LD_VAR 0 2
12252: PUSH
12253: LD_EXP 13
12257: IN
12258: NOT
12259: AND
12260: PUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 289
12273: PUSH
12274: LD_INT 0
12276: GREATER
12277: AND
12278: IFFALSE 12417
// begin stealCargos = stealCargos ^ cargo ;
12280: LD_ADDR_EXP 13
12284: PUSH
12285: LD_EXP 13
12289: PUSH
12290: LD_VAR 0 2
12294: ADD
12295: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12296: LD_STRING QQrSteal
12298: PPUSH
12299: CALL_OW 97
12303: PUSH
12304: LD_INT 1
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12385
12312: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12313: LD_ADDR_EXP 12
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_INT 1
12325: PLUS
12326: ST_TO_ADDR
// DialogueOn ;
12327: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12331: LD_EXP 42
12335: PPUSH
12336: LD_STRING DQrSteal#1-Bur-1
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 14
12354: PPUSH
12355: CALL_OW 113
// AddComUnload ( cargo ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 92
12375: PPUSH
12376: LD_INT 177
12378: PPUSH
12379: CALL_OW 171
// end ; 2 :
12383: GO 12417
12385: LD_INT 2
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12416
12393: POP
// begin DialogueOn ;
12394: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12398: LD_EXP 42
12402: PPUSH
12403: LD_STRING DQrSteal#2-Bur-1
12405: PPUSH
12406: CALL_OW 88
// DialogueOff ;
12410: CALL_OW 7
// end ; end ;
12414: GO 12417
12416: POP
// end ;
12417: GO 12226
12419: POP
12420: POP
12421: GO 12182
12423: POP
12424: POP
// end ;
12425: PPOPN 2
12427: END
// every 0 0$12 trigger stealWarmCount = 3 do
12428: LD_EXP 12
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: IFFALSE 12508
12438: GO 12440
12440: DISABLE
// begin DialogueOn ;
12441: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-1
12452: PPUSH
12453: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12457: LD_EXP 42
12461: PPUSH
12462: LD_STRING D3A-Bur-1
12464: PPUSH
12465: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12469: LD_EXP 53
12473: PPUSH
12474: LD_STRING D3A-Pla-2
12476: PPUSH
12477: CALL_OW 94
// if IsOK ( Kuzmov ) then
12481: LD_EXP 49
12485: PPUSH
12486: CALL_OW 302
12490: IFFALSE 12504
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12492: LD_EXP 49
12496: PPUSH
12497: LD_STRING D3A-Kuz-2
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$10 trigger stealWarmCount = 6 do
12509: LD_EXP 12
12513: PUSH
12514: LD_INT 6
12516: EQUAL
12517: IFFALSE 12566
12519: GO 12521
12521: DISABLE
// begin DialogueOn ;
12522: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-1
12533: PPUSH
12534: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12538: LD_EXP 42
12542: PPUSH
12543: LD_STRING D3B-Bur-1
12545: PPUSH
12546: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12550: LD_EXP 53
12554: PPUSH
12555: LD_STRING D3B-Pla-2
12557: PPUSH
12558: CALL_OW 94
// DialogueOff ;
12562: CALL_OW 7
// end ;
12566: END
// every 0 0$10 trigger stealWarmCount = 7 do
12567: LD_EXP 12
12571: PUSH
12572: LD_INT 7
12574: EQUAL
12575: IFFALSE 12659
12577: GO 12579
12579: DISABLE
// begin DialogueOn ;
12580: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-1
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-1
12603: PPUSH
12604: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12608: LD_EXP 53
12612: PPUSH
12613: LD_STRING D3C-Pla-2
12615: PPUSH
12616: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12620: LD_EXP 42
12624: PPUSH
12625: LD_STRING D3C-Bur-2
12627: PPUSH
12628: CALL_OW 88
// if IsOK ( Kuzmov ) then
12632: LD_EXP 49
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12655
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12643: LD_EXP 49
12647: PPUSH
12648: LD_STRING D3C-Kuz-2
12650: PPUSH
12651: CALL_OW 88
// DialogueOff ;
12655: CALL_OW 7
// end ;
12659: END
// every 0 0$10 trigger stealWarmCount = 8 do
12660: LD_EXP 12
12664: PUSH
12665: LD_INT 8
12667: EQUAL
12668: IFFALSE 12860
12670: GO 12672
12672: DISABLE
// begin canStealCargo = false ;
12673: LD_ADDR_EXP 11
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// DialogueOn ;
12681: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12685: LD_EXP 53
12689: PPUSH
12690: LD_STRING D3D-Pla-1
12692: PPUSH
12693: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12697: LD_EXP 42
12701: PPUSH
12702: LD_STRING D3D-Bur-1
12704: PPUSH
12705: CALL_OW 88
// if kurinOpinion = 0 then
12709: LD_EXP 2
12713: PUSH
12714: LD_INT 0
12716: EQUAL
12717: IFFALSE 12737
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12719: LD_EXP 53
12723: PPUSH
12724: LD_STRING D3E-Pla-1
12726: PPUSH
12727: CALL_OW 94
// Lose_Arrest ;
12731: CALL 7576 0 0
// exit ;
12735: GO 12860
// end ; if meetBelkovBrother = 1 then
12737: LD_EXP 3
12741: PUSH
12742: LD_INT 1
12744: EQUAL
12745: IFFALSE 12765
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12747: LD_EXP 53
12751: PPUSH
12752: LD_STRING D3E-Pla-1a
12754: PPUSH
12755: CALL_OW 94
// Lose_Arrest ;
12759: CALL 7576 0 0
// exit ;
12763: GO 12860
// end ; if platonovOpinion = 0 then
12765: LD_EXP 1
12769: PUSH
12770: LD_INT 0
12772: EQUAL
12773: IFFALSE 12793
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12775: LD_EXP 53
12779: PPUSH
12780: LD_STRING D3E-Pla-1b
12782: PPUSH
12783: CALL_OW 94
// Lose_Arrest ;
12787: CALL 7576 0 0
// exit ;
12791: GO 12860
// end ; if platonovOpinion = 1 then
12793: LD_EXP 1
12797: PUSH
12798: LD_INT 1
12800: EQUAL
12801: IFFALSE 12821
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12803: LD_EXP 53
12807: PPUSH
12808: LD_STRING D3E-Pla-1c
12810: PPUSH
12811: CALL_OW 94
// Lose_Arrest ;
12815: CALL 7576 0 0
// exit ;
12819: GO 12860
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12821: LD_EXP 53
12825: PPUSH
12826: LD_STRING D3D-Pla-2
12828: PPUSH
12829: CALL_OW 94
// if IsOK ( Kuzmov ) then
12833: LD_EXP 49
12837: PPUSH
12838: CALL_OW 302
12842: IFFALSE 12856
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12844: LD_EXP 49
12848: PPUSH
12849: LD_STRING D3D-Kuz-2
12851: PPUSH
12852: CALL_OW 88
// DialogueOff ;
12856: CALL_OW 7
// end ;
12860: END
// every 0 0$20 do var allyUntis ;
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// wait ( 0 0$10 ) ;
12868: LD_INT 350
12870: PPUSH
12871: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 60
12895: PUSH
12896: EMPTY
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 56
12916: DIFF
12917: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 1
12927: PUSH
12928: LD_EXP 54
12932: DIFF
12933: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_VAR 0 1
12943: PUSH
12944: LD_EXP 49
12948: DIFF
12949: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12950: LD_ADDR_VAR 0 1
12954: PUSH
12955: LD_VAR 0 1
12959: PUSH
12960: LD_EXP 57
12964: DIFF
12965: ST_TO_ADDR
// if not allyUntis then
12966: LD_VAR 0 1
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 12999
// ComUnload ( allyUntis ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12984: LD_VAR 0 1
12988: PPUSH
12989: LD_INT 92
12991: PPUSH
12992: LD_INT 176
12994: PPUSH
12995: CALL_OW 171
// end ;
12999: PPOPN 1
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: IFFALSE 13025
13014: GO 13016
13016: DISABLE
// begin startEvacuation = false ;
13017: LD_ADDR_EXP 8
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// end ;
13025: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13026: LD_EXP 10
13030: PUSH
13031: LD_EXP 14
13035: GREATEREQUAL
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 6
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 69
13083: PUSH
13084: LD_EXP 57
13088: DIFF
13089: NOT
13090: AND
13091: IFFALSE 13686
13093: GO 13095
13095: DISABLE
// begin wait ( 1 1$00 ) ;
13096: LD_INT 2100
13098: PPUSH
13099: CALL_OW 67
// DialogueOn ;
13103: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13107: LD_EXP 53
13111: PPUSH
13112: LD_STRING D4-Pla-1
13114: PPUSH
13115: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13119: LD_EXP 42
13123: PPUSH
13124: LD_STRING D4-Bur-1
13126: PPUSH
13127: CALL_OW 88
// DialogueOff ;
13131: CALL_OW 7
// wait ( 0 0$2 ) ;
13135: LD_INT 70
13137: PPUSH
13138: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13142: LD_EXP 49
13146: PPUSH
13147: CALL_OW 302
13151: PUSH
13152: LD_EXP 49
13156: PPUSH
13157: CALL_OW 255
13161: PUSH
13162: LD_INT 3
13164: EQUAL
13165: AND
13166: IFFALSE 13448
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13168: LD_EXP 49
13172: PPUSH
13173: LD_STRING D4-Kuz-1
13175: PPUSH
13176: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13180: LD_EXP 46
13184: PPUSH
13185: CALL_OW 302
13189: PUSH
13190: LD_EXP 46
13194: PPUSH
13195: CALL_OW 255
13199: PUSH
13200: LD_INT 3
13202: EQUAL
13203: AND
13204: IFFALSE 13220
// Say ( Belkov , D4-Bel-1 ) else
13206: LD_EXP 46
13210: PPUSH
13211: LD_STRING D4-Bel-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13258
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13220: LD_EXP 47
13224: PPUSH
13225: CALL_OW 302
13229: PUSH
13230: LD_EXP 47
13234: PPUSH
13235: CALL_OW 255
13239: PUSH
13240: LD_INT 3
13242: EQUAL
13243: AND
13244: IFFALSE 13258
// Say ( Belkov2 , D4-Bel-1 ) ;
13246: LD_EXP 47
13250: PPUSH
13251: LD_STRING D4-Bel-1
13253: PPUSH
13254: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13258: LD_EXP 42
13262: PPUSH
13263: LD_STRING D4-Bur-2
13265: PPUSH
13266: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13270: LD_EXP 43
13274: PPUSH
13275: CALL_OW 302
13279: PUSH
13280: LD_EXP 43
13284: PPUSH
13285: CALL_OW 255
13289: PUSH
13290: LD_INT 3
13292: EQUAL
13293: AND
13294: IFFALSE 13320
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13296: LD_EXP 43
13300: PPUSH
13301: LD_STRING D4-Gny-2
13303: PPUSH
13304: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13308: LD_EXP 42
13312: PPUSH
13313: LD_STRING D4-Bur-3
13315: PPUSH
13316: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13320: LD_EXP 42
13324: PPUSH
13325: LD_STRING D4-Bur-3a
13327: PPUSH
13328: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13332: LD_EXP 46
13336: PPUSH
13337: CALL_OW 302
13341: PUSH
13342: LD_EXP 46
13346: PPUSH
13347: CALL_OW 255
13351: PUSH
13352: LD_INT 3
13354: EQUAL
13355: AND
13356: IFFALSE 13372
// Say ( Belkov , D4-Bel-3 ) else
13358: LD_EXP 46
13362: PPUSH
13363: LD_STRING D4-Bel-3
13365: PPUSH
13366: CALL_OW 88
13370: GO 13410
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13372: LD_EXP 47
13376: PPUSH
13377: CALL_OW 302
13381: PUSH
13382: LD_EXP 47
13386: PPUSH
13387: CALL_OW 255
13391: PUSH
13392: LD_INT 3
13394: EQUAL
13395: AND
13396: IFFALSE 13410
// Say ( Belkov2 , D4-Bel-3 ) ;
13398: LD_EXP 47
13402: PPUSH
13403: LD_STRING D4-Bel-3
13405: PPUSH
13406: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13410: LD_EXP 45
13414: PPUSH
13415: CALL_OW 302
13419: PUSH
13420: LD_EXP 45
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: AND
13434: IFFALSE 13448
// Say ( Kovalyuk , D4-Kov-3 ) ;
13436: LD_EXP 45
13440: PPUSH
13441: LD_STRING D4-Kov-3
13443: PPUSH
13444: CALL_OW 88
// end ; PrepareFirstAttack ;
13448: CALL 4199 0 0
// firstAttack = true ;
13452: LD_ADDR_EXP 18
13456: PUSH
13457: LD_INT 1
13459: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13460: LD_INT 350
13462: PPUSH
13463: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13467: LD_EXP 42
13471: PPUSH
13472: LD_STRING D7-Bur-1
13474: PPUSH
13475: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13479: LD_EXP 64
13483: PPUSH
13484: LD_INT 135
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 134
13496: PUSH
13497: LD_INT 19
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 132
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 128
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 123
13526: PUSH
13527: LD_INT 37
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 118
13536: PUSH
13537: LD_INT 45
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 51
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 106
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 99
13566: PUSH
13567: LD_INT 62
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 93
13576: PUSH
13577: LD_INT 67
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 86
13586: PUSH
13587: LD_INT 72
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 78
13596: PUSH
13597: LD_INT 75
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 71
13606: PUSH
13607: LD_INT 81
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 69
13616: PUSH
13617: LD_INT 88
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 71
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 74
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 80
13646: PUSH
13647: LD_INT 113
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 11
13681: PPUSH
13682: CALL 5042 0 5
// end ;
13686: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13687: LD_EXP 64
13691: PPUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: NOT
13707: PUSH
13708: LD_EXP 18
13712: AND
13713: IFFALSE 13772
13715: GO 13717
13717: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13718: LD_EXP 57
13722: PPUSH
13723: CALL_OW 122
// wait ( 0 0$1 ) ;
13727: LD_INT 35
13729: PPUSH
13730: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13734: LD_EXP 57
13738: PPUSH
13739: LD_INT 114
13741: PPUSH
13742: LD_INT 114
13744: PPUSH
13745: CALL_OW 111
// wait ( 0 0$15 ) ;
13749: LD_INT 525
13751: PPUSH
13752: CALL_OW 67
// firstAttack = false ;
13756: LD_ADDR_EXP 18
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// enableAttacks = true ;
13764: LD_ADDR_EXP 17
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// end ;
13772: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13773: LD_OWVAR 67
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: PUSH
13782: LD_EXP 57
13786: AND
13787: IFFALSE 13855
13789: GO 13791
13791: DISABLE
13792: LD_INT 0
13794: PPUSH
// begin enable ;
13795: ENABLE
// for un in secondBaseTeam do
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_EXP 57
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13853
// if IsInArea ( un , HillArea ) then
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 5
13816: PPUSH
13817: CALL_OW 308
13821: IFFALSE 13851
// begin SetSide ( un , 3 ) ;
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13835: LD_ADDR_EXP 57
13839: PUSH
13840: LD_EXP 57
13844: PUSH
13845: LD_VAR 0 1
13849: DIFF
13850: ST_TO_ADDR
// end ;
13851: GO 13806
13853: POP
13854: POP
// end ;
13855: PPOPN 1
13857: END
// export function Dial_Contact ; begin
13858: LD_INT 0
13860: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13861: LD_EXP 42
13865: PPUSH
13866: LD_STRING D7-Bur-1a
13868: PPUSH
13869: CALL_OW 88
// wait ( 0 0$12 ) ;
13873: LD_INT 420
13875: PPUSH
13876: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13880: LD_EXP 42
13884: PPUSH
13885: LD_STRING D7-Bur-1b
13887: PPUSH
13888: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13892: LD_EXP 46
13896: PPUSH
13897: CALL_OW 302
13901: PUSH
13902: LD_EXP 46
13906: PPUSH
13907: CALL_OW 255
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: AND
13916: IFFALSE 13932
// Say ( Belkov , D7-Bel-1 ) else
13918: LD_EXP 46
13922: PPUSH
13923: LD_STRING D7-Bel-1
13925: PPUSH
13926: CALL_OW 88
13930: GO 13970
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13932: LD_EXP 47
13936: PPUSH
13937: CALL_OW 302
13941: PUSH
13942: LD_EXP 47
13946: PPUSH
13947: CALL_OW 255
13951: PUSH
13952: LD_INT 3
13954: EQUAL
13955: AND
13956: IFFALSE 13970
// Say ( Belkov2 , D7-Bel-1 ) ;
13958: LD_EXP 47
13962: PPUSH
13963: LD_STRING D7-Bel-1
13965: PPUSH
13966: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13970: LD_EXP 49
13974: PPUSH
13975: CALL_OW 302
13979: PUSH
13980: LD_EXP 49
13984: PPUSH
13985: CALL_OW 255
13989: PUSH
13990: LD_INT 3
13992: EQUAL
13993: AND
13994: IFFALSE 14008
// Say ( Kuzmov , D7-Kuz-1 ) ;
13996: LD_EXP 49
14000: PPUSH
14001: LD_STRING D7-Kuz-1
14003: PPUSH
14004: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
14008: LD_EXP 45
14012: PPUSH
14013: CALL_OW 302
14017: PUSH
14018: LD_EXP 45
14022: PPUSH
14023: CALL_OW 255
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: AND
14032: IFFALSE 14046
// Say ( Kovalyuk , D7-Kov-1 ) ;
14034: LD_EXP 45
14038: PPUSH
14039: LD_STRING D7-Kov-1
14041: PPUSH
14042: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14046: LD_EXP 48
14050: PPUSH
14051: CALL_OW 302
14055: PUSH
14056: LD_EXP 48
14060: PPUSH
14061: CALL_OW 255
14065: PUSH
14066: LD_INT 3
14068: EQUAL
14069: AND
14070: IFFALSE 14084
// Say ( Scholtze , D7-Sch-1 ) ;
14072: LD_EXP 48
14076: PPUSH
14077: LD_STRING D7-Sch-1
14079: PPUSH
14080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 21
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: PPUSH
14124: LD_STRING D7-RSol1-1
14126: PPUSH
14127: LD_STRING 
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: CALL 9537 0 4
// PrepareHeike ;
14137: CALL 3519 0 0
// wait ( 0 0$10 ) ;
14141: LD_INT 350
14143: PPUSH
14144: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14148: LD_EXP 63
14152: PPUSH
14153: LD_STRING D7a-Hke-1
14155: PPUSH
14156: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14160: LD_EXP 42
14164: PPUSH
14165: LD_STRING D7a-Bur-1
14167: PPUSH
14168: CALL_OW 88
// wait ( 0 0$50 ) ;
14172: LD_INT 1750
14174: PPUSH
14175: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14179: LD_EXP 49
14183: PPUSH
14184: CALL_OW 302
14188: PUSH
14189: LD_EXP 49
14193: PPUSH
14194: CALL_OW 255
14198: PUSH
14199: LD_INT 3
14201: EQUAL
14202: AND
14203: IFFALSE 14219
// Say ( Kuzmov , D8-Kuz-1 ) else
14205: LD_EXP 49
14209: PPUSH
14210: LD_STRING D8-Kuz-1
14212: PPUSH
14213: CALL_OW 88
14217: GO 14272
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14219: LD_INT 22
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 26
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: PPUSH
14259: LD_STRING D8-RSol1-1
14261: PPUSH
14262: LD_STRING 
14264: PPUSH
14265: LD_INT 0
14267: PPUSH
14268: CALL 9537 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14272: LD_EXP 42
14276: PPUSH
14277: LD_STRING D8-Bur-1
14279: PPUSH
14280: CALL_OW 88
// end ;
14284: LD_VAR 0 1
14288: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14289: LD_EXP 54
14293: PPUSH
14294: CALL_OW 305
14298: NOT
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 50
14322: PUSH
14323: EMPTY
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: AND
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 3
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 50
14360: PUSH
14361: EMPTY
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: PUSH
14374: LD_INT 5
14376: LESS
14377: AND
14378: PUSH
14379: LD_INT 5
14381: PPUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: PUSH
14400: LD_INT 3
14402: GREATER
14403: AND
14404: IFFALSE 14413
14406: GO 14408
14408: DISABLE
// Lose_ArabBreakthrough ;
14409: CALL 7591 0 0
14413: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14414: LD_EXP 19
14418: PUSH
14419: LD_EXP 38
14423: GREATEREQUAL
14424: IFFALSE 14648
14426: GO 14428
14428: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-1
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-1
14448: PPUSH
14449: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14453: LD_EXP 53
14457: PPUSH
14458: LD_STRING D9-Pla-2
14460: PPUSH
14461: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14465: LD_EXP 42
14469: PPUSH
14470: LD_STRING D9-Bur-2
14472: PPUSH
14473: CALL_OW 88
// wait ( 2 2$0 ) ;
14477: LD_INT 4200
14479: PPUSH
14480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14491: LD_INT 12
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 428
14501: NOT
14502: IFFALSE 14484
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14504: LD_EXP 54
14508: PPUSH
14509: LD_INT 12
14511: PPUSH
14512: LD_INT 3
14514: PPUSH
14515: LD_INT 2
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 50
// arabianCanExitMap = true ;
14525: LD_ADDR_EXP 7
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14533: LD_INT 35
14535: PPUSH
14536: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14540: LD_EXP 54
14544: PPUSH
14545: CALL_OW 87
// DialogueOn ;
14549: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-1
14560: PPUSH
14561: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14565: LD_EXP 42
14569: PPUSH
14570: LD_STRING D10-Bur-1
14572: PPUSH
14573: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-2
14584: PPUSH
14585: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14589: LD_EXP 52
14593: PPUSH
14594: LD_STRING D10-Pop-2
14596: PPUSH
14597: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14601: LD_EXP 54
14605: PPUSH
14606: LD_STRING D10-Gay-3
14608: PPUSH
14609: CALL_OW 94
// DialogueOff ;
14613: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14617: LD_EXP 54
14621: PPUSH
14622: LD_INT 36
14624: PPUSH
14625: LD_INT 38
14627: PPUSH
14628: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14632: LD_EXP 54
14636: PPUSH
14637: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14641: LD_STRING M2
14643: PPUSH
14644: CALL_OW 337
// end ;
14648: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14649: LD_EXP 7
14653: IFFALSE 14726
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
// begin enable ;
14661: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14662: LD_INT 22
14664: PUSH
14665: LD_INT 2
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: PPUSH
14675: CALL_OW 69
14679: PPUSH
14680: LD_INT 13
14682: PPUSH
14683: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 13
14694: PPUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 70
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14724
// RemoveUnit ( unit ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 64
14722: GO 14710
14724: POP
14725: POP
// end ;
14726: PPOPN 1
14728: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14729: LD_EXP 20
14733: NOT
14734: IFFALSE 15124
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
// begin enable ;
14743: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: PUSH
14778: FOR_IN
14779: IFFALSE 15122
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_EXP 54
14790: PPUSH
14791: CALL_OW 296
14795: PUSH
14796: LD_INT 6
14798: LESS
14799: IFFALSE 15120
// begin SetSide ( Gaydar , 3 ) ;
14801: LD_EXP 54
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: CALL_OW 235
// ComWalk ( Gaydar ) ;
14813: LD_EXP 54
14817: PPUSH
14818: CALL_OW 138
// saveGaydar = true ;
14822: LD_ADDR_EXP 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14830: LD_INT 35
14832: PPUSH
14833: CALL_OW 67
// DialogueOn ;
14837: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14841: LD_EXP 54
14845: PPUSH
14846: LD_STRING D11-Gay-1
14848: PPUSH
14849: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14853: LD_EXP 42
14857: PPUSH
14858: LD_EXP 54
14862: PPUSH
14863: CALL_OW 296
14867: PUSH
14868: LD_INT 6
14870: LESS
14871: NOT
14872: IFFALSE 14972
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 50
14911: PUSH
14912: EMPTY
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_EXP 54
14930: DIFF
14931: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_EXP 54
14941: PPUSH
14942: CALL_OW 74
14946: PPUSH
14947: LD_STRING D11-RSol1-1
14949: PPUSH
14950: CALL_OW 88
// gaydarWaitForBurlak = true ;
14954: LD_ADDR_EXP 21
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// DialogueOff ;
14962: CALL_OW 7
// exit ;
14966: POP
14967: POP
14968: GO 15124
// end else
14970: GO 15120
// begin Say ( Gaydar , D11-Gay-2 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-2
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-2
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-3
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-3
15015: PPUSH
15016: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15020: LD_EXP 54
15024: PPUSH
15025: LD_STRING D11-Gay-4
15027: PPUSH
15028: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15032: LD_EXP 42
15036: PPUSH
15037: LD_STRING D11-Bur-4
15039: PPUSH
15040: CALL_OW 88
// wait ( 0 0$2 ) ;
15044: LD_INT 70
15046: PPUSH
15047: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15051: LD_EXP 52
15055: PPUSH
15056: LD_STRING D12-Pop-1
15058: PPUSH
15059: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15063: LD_EXP 42
15067: PPUSH
15068: LD_STRING D12-Bur-1
15070: PPUSH
15071: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15075: LD_EXP 53
15079: PPUSH
15080: LD_STRING D12-Pla-1
15082: PPUSH
15083: CALL_OW 94
// DialogueOff ;
15087: CALL_OW 7
// canExitMap = true ;
15091: LD_ADDR_EXP 6
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15099: LD_STRING MFinal
15101: PPUSH
15102: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15106: LD_INT 4
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 424
// exit ;
15116: POP
15117: POP
15118: GO 15124
// end ; end ; end ;
15120: GO 14778
15122: POP
15123: POP
// end ;
15124: PPOPN 2
15126: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15127: LD_EXP 42
15131: PPUSH
15132: LD_EXP 54
15136: PPUSH
15137: CALL_OW 296
15141: PUSH
15142: LD_INT 6
15144: LESS
15145: PUSH
15146: LD_EXP 21
15150: AND
15151: IFFALSE 15304
15153: GO 15155
15155: DISABLE
// begin DialogueOn ;
15156: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-2
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-2
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-3
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-3
15203: PPUSH
15204: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15208: LD_EXP 54
15212: PPUSH
15213: LD_STRING D11-Gay-4
15215: PPUSH
15216: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15220: LD_EXP 42
15224: PPUSH
15225: LD_STRING D11-Bur-4
15227: PPUSH
15228: CALL_OW 88
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15239: LD_EXP 52
15243: PPUSH
15244: LD_STRING D12-Pop-1
15246: PPUSH
15247: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15251: LD_EXP 42
15255: PPUSH
15256: LD_STRING D12-Bur-1
15258: PPUSH
15259: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15263: LD_EXP 53
15267: PPUSH
15268: LD_STRING D12-Pla-1
15270: PPUSH
15271: CALL_OW 94
// DialogueOff ;
15275: CALL_OW 7
// canExitMap = true ;
15279: LD_ADDR_EXP 6
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15287: LD_STRING MFinal
15289: PPUSH
15290: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15294: LD_INT 4
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 424
// end ;
15304: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15305: LD_INT 22
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: PUSH
15334: LD_INT 0
15336: EQUAL
15337: PUSH
15338: LD_EXP 6
15342: AND
15343: IFFALSE 15352
15345: GO 15347
15347: DISABLE
// FinishMission ; end_of_file
15348: CALL 7709 0 0
15352: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15353: LD_EXP 17
15357: PUSH
15358: LD_EXP 19
15362: PUSH
15363: LD_INT 0
15365: EQUAL
15366: AND
15367: PUSH
15368: LD_EXP 19
15372: PUSH
15373: LD_EXP 38
15377: LESS
15378: AND
15379: IFFALSE 15431
15381: GO 15383
15383: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15384: LD_INT 7
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 2
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15410: LD_EXP 65
15414: PPUSH
15415: EMPTY
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 1
15425: NEG
15426: PPUSH
15427: CALL 5042 0 5
// end ;
15431: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15432: LD_EXP 17
15436: PUSH
15437: LD_EXP 19
15441: PUSH
15442: LD_INT 0
15444: GREATEREQUAL
15445: AND
15446: PUSH
15447: LD_EXP 19
15451: PUSH
15452: LD_EXP 38
15456: LESS
15457: AND
15458: IFFALSE 15688
15460: GO 15462
15462: DISABLE
// begin currentWave = currentWave + 1 ;
15463: LD_ADDR_EXP 19
15467: PUSH
15468: LD_EXP 19
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// PrepareArabianVehicles ;
15477: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15481: LD_EXP 65
15485: PPUSH
15486: LD_INT 135
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 134
15498: PUSH
15499: LD_INT 19
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 132
15508: PUSH
15509: LD_INT 26
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 128
15518: PUSH
15519: LD_INT 31
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 123
15528: PUSH
15529: LD_INT 37
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 118
15538: PUSH
15539: LD_INT 45
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 112
15548: PUSH
15549: LD_INT 51
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 106
15558: PUSH
15559: LD_INT 57
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 99
15568: PUSH
15569: LD_INT 62
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 93
15578: PUSH
15579: LD_INT 67
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 86
15588: PUSH
15589: LD_INT 72
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 78
15598: PUSH
15599: LD_INT 75
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 71
15608: PUSH
15609: LD_INT 81
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 69
15618: PUSH
15619: LD_INT 88
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 71
15628: PUSH
15629: LD_INT 95
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 74
15638: PUSH
15639: LD_INT 103
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 80
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: LD_INT 0
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: LD_INT 11
15683: PPUSH
15684: CALL 5042 0 5
// end ;
15688: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15689: LD_EXP 17
15693: PUSH
15694: LD_OWVAR 67
15698: PUSH
15699: LD_INT 2
15701: EQUAL
15702: AND
15703: PUSH
15704: LD_EXP 19
15708: PUSH
15709: LD_INT 0
15711: GREATEREQUAL
15712: AND
15713: PUSH
15714: LD_EXP 19
15718: PUSH
15719: LD_EXP 38
15723: LESS
15724: AND
15725: IFFALSE 15853
15727: GO 15729
15729: DISABLE
// begin PrepareArabianVehicles ;
15730: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15734: LD_EXP 65
15738: PPUSH
15739: LD_INT 135
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 134
15751: PUSH
15752: LD_INT 19
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 132
15761: PUSH
15762: LD_INT 26
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 128
15771: PUSH
15772: LD_INT 31
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 123
15781: PUSH
15782: LD_INT 37
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 118
15791: PUSH
15792: LD_INT 45
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 112
15801: PUSH
15802: LD_INT 51
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: LD_INT 57
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 99
15821: PUSH
15822: LD_INT 62
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PPUSH
15840: LD_INT 0
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: LD_INT 11
15848: PPUSH
15849: CALL 5042 0 5
// end ;
15853: END
// every 1 1$0 trigger enableAttacks and Difficulty >= 3 and currentWave >= 0 and currentWave < enemyWaves do
15854: LD_EXP 17
15858: PUSH
15859: LD_OWVAR 67
15863: PUSH
15864: LD_INT 3
15866: GREATEREQUAL
15867: AND
15868: PUSH
15869: LD_EXP 19
15873: PUSH
15874: LD_INT 0
15876: GREATEREQUAL
15877: AND
15878: PUSH
15879: LD_EXP 19
15883: PUSH
15884: LD_EXP 38
15888: LESS
15889: AND
15890: IFFALSE 16084
15892: GO 15894
15894: DISABLE
// begin PrepareArabianVehicles ;
15895: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15899: LD_EXP 65
15903: PPUSH
15904: LD_INT 135
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 134
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 132
15926: PUSH
15927: LD_INT 26
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 128
15936: PUSH
15937: LD_INT 31
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 123
15946: PUSH
15947: LD_INT 37
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 118
15956: PUSH
15957: LD_INT 45
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 112
15966: PUSH
15967: LD_INT 51
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 57
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 99
15986: PUSH
15987: LD_INT 62
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 104
15996: PUSH
15997: LD_INT 71
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 110
16006: PUSH
16007: LD_INT 78
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 119
16016: PUSH
16017: LD_INT 88
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 128
16026: PUSH
16027: LD_INT 97
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 135
16036: PUSH
16037: LD_INT 106
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 140
16046: PUSH
16047: LD_INT 153
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_INT 11
16079: PPUSH
16080: CALL 5042 0 5
// end ;
16084: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16085: LD_EXP 17
16089: PUSH
16090: LD_EXP 19
16094: PUSH
16095: LD_INT 1
16097: EQUAL
16098: AND
16099: PUSH
16100: LD_EXP 19
16104: PUSH
16105: LD_EXP 38
16109: LESS
16110: AND
16111: IFFALSE 16188
16113: GO 16115
16115: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16116: LD_INT 7
16118: PPUSH
16119: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16123: LD_EXP 65
16127: PPUSH
16128: LD_INT 157
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 194
16140: PUSH
16141: LD_INT 124
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 174
16150: PUSH
16151: LD_INT 158
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 151
16160: PUSH
16161: LD_INT 164
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: LD_INT 0
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 1
16182: NEG
16183: PPUSH
16184: CALL 5042 0 5
// end ;
16188: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16189: LD_EXP 17
16193: PUSH
16194: LD_EXP 19
16198: PUSH
16199: LD_INT 1
16201: EQUAL
16202: AND
16203: PUSH
16204: LD_EXP 19
16208: PUSH
16209: LD_EXP 38
16213: LESS
16214: AND
16215: IFFALSE 16364
16217: GO 16219
16219: DISABLE
// begin wait ( 1 1$30 ) ;
16220: LD_INT 3150
16222: PPUSH
16223: CALL_OW 67
// currentWave = currentWave + 1 ;
16227: LD_ADDR_EXP 19
16231: PUSH
16232: LD_EXP 19
16236: PUSH
16237: LD_INT 1
16239: PLUS
16240: ST_TO_ADDR
// PrepareArabianVehicles ;
16241: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16245: LD_EXP 65
16249: PPUSH
16250: LD_INT 135
16252: PUSH
16253: LD_INT 4
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 134
16262: PUSH
16263: LD_INT 19
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 132
16272: PUSH
16273: LD_INT 26
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 128
16282: PUSH
16283: LD_INT 31
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 123
16292: PUSH
16293: LD_INT 37
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 118
16302: PUSH
16303: LD_INT 45
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 112
16312: PUSH
16313: LD_INT 51
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 106
16322: PUSH
16323: LD_INT 57
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 99
16332: PUSH
16333: LD_INT 62
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 11
16359: PPUSH
16360: CALL 5042 0 5
// end ;
16364: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16365: LD_EXP 17
16369: PUSH
16370: LD_OWVAR 67
16374: PUSH
16375: LD_INT 2
16377: EQUAL
16378: AND
16379: PUSH
16380: LD_EXP 19
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: AND
16389: PUSH
16390: LD_EXP 19
16394: PUSH
16395: LD_EXP 38
16399: LESS
16400: AND
16401: IFFALSE 16595
16403: GO 16405
16405: DISABLE
// begin PrepareArabianVehicles ;
16406: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16410: LD_EXP 65
16414: PPUSH
16415: LD_INT 135
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 134
16427: PUSH
16428: LD_INT 19
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 132
16437: PUSH
16438: LD_INT 26
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 128
16447: PUSH
16448: LD_INT 31
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 123
16457: PUSH
16458: LD_INT 37
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 118
16467: PUSH
16468: LD_INT 45
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: LD_INT 51
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: LD_INT 57
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 99
16497: PUSH
16498: LD_INT 62
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 104
16507: PUSH
16508: LD_INT 71
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 110
16517: PUSH
16518: LD_INT 78
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 119
16527: PUSH
16528: LD_INT 88
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 128
16537: PUSH
16538: LD_INT 97
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 135
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 140
16557: PUSH
16558: LD_INT 153
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: LD_INT 11
16590: PPUSH
16591: CALL 5042 0 5
// end ;
16595: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 1 and currentWave < enemyWaves do
16596: LD_EXP 17
16600: PUSH
16601: LD_OWVAR 67
16605: PUSH
16606: LD_INT 3
16608: GREATEREQUAL
16609: AND
16610: PUSH
16611: LD_EXP 19
16615: PUSH
16616: LD_INT 1
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_EXP 19
16625: PUSH
16626: LD_EXP 38
16630: LESS
16631: AND
16632: IFFALSE 16848
16634: GO 16636
16636: DISABLE
// begin PrepareArabianVehicles ;
16637: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16641: LD_EXP 65
16645: PPUSH
16646: LD_INT 135
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 134
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 132
16668: PUSH
16669: LD_INT 26
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 128
16678: PUSH
16679: LD_INT 31
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 123
16688: PUSH
16689: LD_INT 37
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: LD_INT 45
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 112
16708: PUSH
16709: LD_INT 51
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 57
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 99
16728: PUSH
16729: LD_INT 62
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 93
16738: PUSH
16739: LD_INT 67
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 86
16748: PUSH
16749: LD_INT 72
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 78
16758: PUSH
16759: LD_INT 75
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 71
16768: PUSH
16769: LD_INT 81
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 69
16778: PUSH
16779: LD_INT 88
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 71
16788: PUSH
16789: LD_INT 95
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 74
16798: PUSH
16799: LD_INT 103
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 80
16808: PUSH
16809: LD_INT 113
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: LD_INT 0
16837: PPUSH
16838: LD_INT 1
16840: PPUSH
16841: LD_INT 11
16843: PPUSH
16844: CALL 5042 0 5
// end ;
16848: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16849: LD_EXP 17
16853: PUSH
16854: LD_EXP 19
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: AND
16863: PUSH
16864: LD_EXP 19
16868: PUSH
16869: LD_EXP 38
16873: LESS
16874: AND
16875: IFFALSE 16952
16877: GO 16879
16879: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16880: LD_INT 7
16882: PPUSH
16883: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16887: LD_EXP 65
16891: PPUSH
16892: LD_INT 157
16894: PUSH
16895: LD_INT 31
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 194
16904: PUSH
16905: LD_INT 124
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 174
16914: PUSH
16915: LD_INT 158
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 151
16924: PUSH
16925: LD_INT 164
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: LD_INT 1
16946: NEG
16947: PPUSH
16948: CALL 5042 0 5
// end ;
16952: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16953: LD_EXP 17
16957: PUSH
16958: LD_EXP 19
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: AND
16967: PUSH
16968: LD_EXP 19
16972: PUSH
16973: LD_EXP 38
16977: LESS
16978: AND
16979: IFFALSE 17216
16981: GO 16983
16983: DISABLE
// begin wait ( 1 1$30 ) ;
16984: LD_INT 3150
16986: PPUSH
16987: CALL_OW 67
// currentWave = currentWave + 1 ;
16991: LD_ADDR_EXP 19
16995: PUSH
16996: LD_EXP 19
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: ST_TO_ADDR
// PrepareArabianVehicles ;
17005: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17009: LD_EXP 65
17013: PPUSH
17014: LD_INT 135
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 134
17026: PUSH
17027: LD_INT 19
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 132
17036: PUSH
17037: LD_INT 26
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 128
17046: PUSH
17047: LD_INT 31
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 123
17056: PUSH
17057: LD_INT 37
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 118
17066: PUSH
17067: LD_INT 45
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 112
17076: PUSH
17077: LD_INT 51
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 57
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 99
17096: PUSH
17097: LD_INT 62
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 93
17106: PUSH
17107: LD_INT 67
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 86
17116: PUSH
17117: LD_INT 72
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 78
17126: PUSH
17127: LD_INT 75
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 71
17136: PUSH
17137: LD_INT 81
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 69
17146: PUSH
17147: LD_INT 88
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 71
17156: PUSH
17157: LD_INT 95
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 74
17166: PUSH
17167: LD_INT 103
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 80
17176: PUSH
17177: LD_INT 113
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: LD_INT 11
17211: PPUSH
17212: CALL 5042 0 5
// end ;
17216: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17217: LD_EXP 17
17221: PUSH
17222: LD_OWVAR 67
17226: PUSH
17227: LD_INT 2
17229: EQUAL
17230: AND
17231: PUSH
17232: LD_EXP 19
17236: PUSH
17237: LD_INT 2
17239: EQUAL
17240: AND
17241: PUSH
17242: LD_EXP 19
17246: PUSH
17247: LD_EXP 38
17251: LESS
17252: AND
17253: IFFALSE 17447
17255: GO 17257
17257: DISABLE
// begin PrepareArabianVehicles ;
17258: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17262: LD_EXP 65
17266: PPUSH
17267: LD_INT 135
17269: PUSH
17270: LD_INT 4
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 134
17279: PUSH
17280: LD_INT 19
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 132
17289: PUSH
17290: LD_INT 26
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 128
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 123
17309: PUSH
17310: LD_INT 37
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 118
17319: PUSH
17320: LD_INT 45
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 112
17329: PUSH
17330: LD_INT 51
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 106
17339: PUSH
17340: LD_INT 57
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 99
17349: PUSH
17350: LD_INT 62
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 104
17359: PUSH
17360: LD_INT 71
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 110
17369: PUSH
17370: LD_INT 78
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 119
17379: PUSH
17380: LD_INT 88
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 128
17389: PUSH
17390: LD_INT 97
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 135
17399: PUSH
17400: LD_INT 106
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 140
17409: PUSH
17410: LD_INT 153
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 11
17442: PPUSH
17443: CALL 5042 0 5
// end ;
17447: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 2 and currentWave < enemyWaves do
17448: LD_EXP 17
17452: PUSH
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 3
17460: GREATEREQUAL
17461: AND
17462: PUSH
17463: LD_EXP 19
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_EXP 19
17477: PUSH
17478: LD_EXP 38
17482: LESS
17483: AND
17484: IFFALSE 17678
17486: GO 17488
17488: DISABLE
// begin PrepareArabianVehicles ;
17489: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17493: LD_EXP 65
17497: PPUSH
17498: LD_INT 135
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 134
17510: PUSH
17511: LD_INT 19
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 132
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 128
17530: PUSH
17531: LD_INT 31
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 123
17540: PUSH
17541: LD_INT 37
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: LD_INT 45
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 112
17560: PUSH
17561: LD_INT 51
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 106
17570: PUSH
17571: LD_INT 57
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 99
17580: PUSH
17581: LD_INT 62
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 104
17590: PUSH
17591: LD_INT 71
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 110
17600: PUSH
17601: LD_INT 78
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 119
17610: PUSH
17611: LD_INT 88
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 128
17620: PUSH
17621: LD_INT 97
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 135
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 153
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PPUSH
17665: LD_INT 0
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 11
17673: PPUSH
17674: CALL 5042 0 5
// end ;
17678: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17679: LD_EXP 17
17683: PUSH
17684: LD_EXP 19
17688: PUSH
17689: LD_INT 3
17691: EQUAL
17692: AND
17693: PUSH
17694: LD_EXP 19
17698: PUSH
17699: LD_EXP 38
17703: LESS
17704: AND
17705: IFFALSE 17782
17707: GO 17709
17709: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17710: LD_INT 7
17712: PPUSH
17713: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17717: LD_EXP 65
17721: PPUSH
17722: LD_INT 157
17724: PUSH
17725: LD_INT 31
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 194
17734: PUSH
17735: LD_INT 124
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 174
17744: PUSH
17745: LD_INT 158
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 151
17754: PUSH
17755: LD_INT 164
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PPUSH
17768: LD_INT 0
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 1
17776: NEG
17777: PPUSH
17778: CALL 5042 0 5
// end ;
17782: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17783: LD_EXP 17
17787: PUSH
17788: LD_EXP 19
17792: PUSH
17793: LD_INT 3
17795: EQUAL
17796: AND
17797: PUSH
17798: LD_EXP 19
17802: PUSH
17803: LD_EXP 38
17807: LESS
17808: AND
17809: IFFALSE 18046
17811: GO 17813
17813: DISABLE
// begin wait ( 1 1$30 ) ;
17814: LD_INT 3150
17816: PPUSH
17817: CALL_OW 67
// currentWave = currentWave + 1 ;
17821: LD_ADDR_EXP 19
17825: PUSH
17826: LD_EXP 19
17830: PUSH
17831: LD_INT 1
17833: PLUS
17834: ST_TO_ADDR
// PrepareArabianVehicles ;
17835: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17839: LD_EXP 65
17843: PPUSH
17844: LD_INT 135
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 134
17856: PUSH
17857: LD_INT 19
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 132
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 128
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 123
17886: PUSH
17887: LD_INT 37
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: LD_INT 45
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 112
17906: PUSH
17907: LD_INT 51
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 106
17916: PUSH
17917: LD_INT 57
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 99
17926: PUSH
17927: LD_INT 62
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 93
17936: PUSH
17937: LD_INT 67
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 86
17946: PUSH
17947: LD_INT 72
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 78
17956: PUSH
17957: LD_INT 75
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 71
17966: PUSH
17967: LD_INT 81
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 69
17976: PUSH
17977: LD_INT 88
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 71
17986: PUSH
17987: LD_INT 95
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 74
17996: PUSH
17997: LD_INT 103
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 80
18006: PUSH
18007: LD_INT 113
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_INT 11
18041: PPUSH
18042: CALL 5042 0 5
// end ;
18046: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18047: LD_EXP 17
18051: PUSH
18052: LD_OWVAR 67
18056: PUSH
18057: LD_INT 2
18059: EQUAL
18060: AND
18061: PUSH
18062: LD_EXP 19
18066: PUSH
18067: LD_INT 3
18069: EQUAL
18070: AND
18071: PUSH
18072: LD_EXP 19
18076: PUSH
18077: LD_EXP 38
18081: LESS
18082: AND
18083: IFFALSE 18277
18085: GO 18087
18087: DISABLE
// begin PrepareArabianVehicles ;
18088: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18092: LD_EXP 65
18096: PPUSH
18097: LD_INT 135
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 134
18109: PUSH
18110: LD_INT 19
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 132
18119: PUSH
18120: LD_INT 26
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 128
18129: PUSH
18130: LD_INT 31
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 123
18139: PUSH
18140: LD_INT 37
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 118
18149: PUSH
18150: LD_INT 45
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 112
18159: PUSH
18160: LD_INT 51
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 57
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 99
18179: PUSH
18180: LD_INT 62
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 104
18189: PUSH
18190: LD_INT 71
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 110
18199: PUSH
18200: LD_INT 78
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 119
18209: PUSH
18210: LD_INT 88
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 128
18219: PUSH
18220: LD_INT 97
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 135
18229: PUSH
18230: LD_INT 106
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 140
18239: PUSH
18240: LD_INT 153
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PPUSH
18264: LD_INT 0
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_INT 11
18272: PPUSH
18273: CALL 5042 0 5
// end ;
18277: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 3 and currentWave < enemyWaves do
18278: LD_EXP 17
18282: PUSH
18283: LD_OWVAR 67
18287: PUSH
18288: LD_INT 3
18290: GREATEREQUAL
18291: AND
18292: PUSH
18293: LD_EXP 19
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: AND
18302: PUSH
18303: LD_EXP 19
18307: PUSH
18308: LD_EXP 38
18312: LESS
18313: AND
18314: IFFALSE 18508
18316: GO 18318
18318: DISABLE
// begin PrepareArabianVehicles ;
18319: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18323: LD_EXP 65
18327: PPUSH
18328: LD_INT 135
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 134
18340: PUSH
18341: LD_INT 19
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 132
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 128
18360: PUSH
18361: LD_INT 31
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 123
18370: PUSH
18371: LD_INT 37
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 118
18380: PUSH
18381: LD_INT 45
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 112
18390: PUSH
18391: LD_INT 51
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 106
18400: PUSH
18401: LD_INT 57
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 99
18410: PUSH
18411: LD_INT 62
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 104
18420: PUSH
18421: LD_INT 71
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 110
18430: PUSH
18431: LD_INT 78
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 119
18440: PUSH
18441: LD_INT 88
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 128
18450: PUSH
18451: LD_INT 97
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 135
18460: PUSH
18461: LD_INT 106
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 140
18470: PUSH
18471: LD_INT 153
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_INT 11
18503: PPUSH
18504: CALL 5042 0 5
// end ;
18508: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18509: LD_EXP 54
18513: PPUSH
18514: CALL_OW 305
18518: PUSH
18519: LD_EXP 23
18523: PUSH
18524: LD_INT 5
18526: LESS
18527: AND
18528: IFFALSE 18538
18530: GO 18532
18532: DISABLE
// begin PrepareArabianKiller ;
18533: CALL 4090 0 0
// enable ;
18537: ENABLE
// end ; end_of_file
18538: END
// export function SetAchievements ; begin
18539: LD_INT 0
18541: PPUSH
// if stealWarmCount = 0 then
18542: LD_EXP 12
18546: PUSH
18547: LD_INT 0
18549: EQUAL
18550: IFFALSE 18559
// SetAchievement ( ACH_ENO ) ;
18552: LD_STRING ACH_ENO
18554: PPUSH
18555: CALL_OW 543
// end ;
18559: LD_VAR 0 1
18563: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18564: LD_EXP 25
18568: PUSH
18569: LD_INT 6
18571: GREATEREQUAL
18572: IFFALSE 18584
18574: GO 18576
18576: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18577: LD_STRING ACH_DEFENSE
18579: PPUSH
18580: CALL_OW 543
18584: END
// every 1 trigger killedArabianUnits >= 25 do
18585: LD_EXP 22
18589: PUSH
18590: LD_INT 25
18592: GREATEREQUAL
18593: IFFALSE 18605
18595: GO 18597
18597: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18598: LD_STRING ACH_ARAB
18600: PPUSH
18601: CALL_OW 543
18605: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18606: LD_INT 0
18608: PPUSH
// if p2 = 100 then
18609: LD_VAR 0 2
18613: PUSH
18614: LD_INT 100
18616: EQUAL
18617: IFFALSE 19620
// begin if not StreamModeActive then
18619: LD_EXP 66
18623: NOT
18624: IFFALSE 18634
// StreamModeActive := true ;
18626: LD_ADDR_EXP 66
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// if p3 = 0 then
18634: LD_VAR 0 3
18638: PUSH
18639: LD_INT 0
18641: EQUAL
18642: IFFALSE 18648
// InitStreamMode ;
18644: CALL 19780 0 0
// if p3 = 1 then
18648: LD_VAR 0 3
18652: PUSH
18653: LD_INT 1
18655: EQUAL
18656: IFFALSE 18666
// sRocket := true ;
18658: LD_ADDR_EXP 71
18662: PUSH
18663: LD_INT 1
18665: ST_TO_ADDR
// if p3 = 2 then
18666: LD_VAR 0 3
18670: PUSH
18671: LD_INT 2
18673: EQUAL
18674: IFFALSE 18684
// sSpeed := true ;
18676: LD_ADDR_EXP 70
18680: PUSH
18681: LD_INT 1
18683: ST_TO_ADDR
// if p3 = 3 then
18684: LD_VAR 0 3
18688: PUSH
18689: LD_INT 3
18691: EQUAL
18692: IFFALSE 18702
// sEngine := true ;
18694: LD_ADDR_EXP 72
18698: PUSH
18699: LD_INT 1
18701: ST_TO_ADDR
// if p3 = 4 then
18702: LD_VAR 0 3
18706: PUSH
18707: LD_INT 4
18709: EQUAL
18710: IFFALSE 18720
// sSpec := true ;
18712: LD_ADDR_EXP 69
18716: PUSH
18717: LD_INT 1
18719: ST_TO_ADDR
// if p3 = 5 then
18720: LD_VAR 0 3
18724: PUSH
18725: LD_INT 5
18727: EQUAL
18728: IFFALSE 18738
// sLevel := true ;
18730: LD_ADDR_EXP 73
18734: PUSH
18735: LD_INT 1
18737: ST_TO_ADDR
// if p3 = 6 then
18738: LD_VAR 0 3
18742: PUSH
18743: LD_INT 6
18745: EQUAL
18746: IFFALSE 18756
// sArmoury := true ;
18748: LD_ADDR_EXP 74
18752: PUSH
18753: LD_INT 1
18755: ST_TO_ADDR
// if p3 = 7 then
18756: LD_VAR 0 3
18760: PUSH
18761: LD_INT 7
18763: EQUAL
18764: IFFALSE 18774
// sRadar := true ;
18766: LD_ADDR_EXP 75
18770: PUSH
18771: LD_INT 1
18773: ST_TO_ADDR
// if p3 = 8 then
18774: LD_VAR 0 3
18778: PUSH
18779: LD_INT 8
18781: EQUAL
18782: IFFALSE 18792
// sBunker := true ;
18784: LD_ADDR_EXP 76
18788: PUSH
18789: LD_INT 1
18791: ST_TO_ADDR
// if p3 = 9 then
18792: LD_VAR 0 3
18796: PUSH
18797: LD_INT 9
18799: EQUAL
18800: IFFALSE 18810
// sHack := true ;
18802: LD_ADDR_EXP 77
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// if p3 = 10 then
18810: LD_VAR 0 3
18814: PUSH
18815: LD_INT 10
18817: EQUAL
18818: IFFALSE 18828
// sFire := true ;
18820: LD_ADDR_EXP 78
18824: PUSH
18825: LD_INT 1
18827: ST_TO_ADDR
// if p3 = 11 then
18828: LD_VAR 0 3
18832: PUSH
18833: LD_INT 11
18835: EQUAL
18836: IFFALSE 18846
// sRefresh := true ;
18838: LD_ADDR_EXP 79
18842: PUSH
18843: LD_INT 1
18845: ST_TO_ADDR
// if p3 = 12 then
18846: LD_VAR 0 3
18850: PUSH
18851: LD_INT 12
18853: EQUAL
18854: IFFALSE 18864
// sExp := true ;
18856: LD_ADDR_EXP 80
18860: PUSH
18861: LD_INT 1
18863: ST_TO_ADDR
// if p3 = 13 then
18864: LD_VAR 0 3
18868: PUSH
18869: LD_INT 13
18871: EQUAL
18872: IFFALSE 18882
// sDepot := true ;
18874: LD_ADDR_EXP 81
18878: PUSH
18879: LD_INT 1
18881: ST_TO_ADDR
// if p3 = 14 then
18882: LD_VAR 0 3
18886: PUSH
18887: LD_INT 14
18889: EQUAL
18890: IFFALSE 18900
// sFlag := true ;
18892: LD_ADDR_EXP 82
18896: PUSH
18897: LD_INT 1
18899: ST_TO_ADDR
// if p3 = 15 then
18900: LD_VAR 0 3
18904: PUSH
18905: LD_INT 15
18907: EQUAL
18908: IFFALSE 18918
// sKamikadze := true ;
18910: LD_ADDR_EXP 90
18914: PUSH
18915: LD_INT 1
18917: ST_TO_ADDR
// if p3 = 16 then
18918: LD_VAR 0 3
18922: PUSH
18923: LD_INT 16
18925: EQUAL
18926: IFFALSE 18936
// sTroll := true ;
18928: LD_ADDR_EXP 91
18932: PUSH
18933: LD_INT 1
18935: ST_TO_ADDR
// if p3 = 17 then
18936: LD_VAR 0 3
18940: PUSH
18941: LD_INT 17
18943: EQUAL
18944: IFFALSE 18954
// sSlow := true ;
18946: LD_ADDR_EXP 92
18950: PUSH
18951: LD_INT 1
18953: ST_TO_ADDR
// if p3 = 18 then
18954: LD_VAR 0 3
18958: PUSH
18959: LD_INT 18
18961: EQUAL
18962: IFFALSE 18972
// sLack := true ;
18964: LD_ADDR_EXP 93
18968: PUSH
18969: LD_INT 1
18971: ST_TO_ADDR
// if p3 = 19 then
18972: LD_VAR 0 3
18976: PUSH
18977: LD_INT 19
18979: EQUAL
18980: IFFALSE 18990
// sTank := true ;
18982: LD_ADDR_EXP 95
18986: PUSH
18987: LD_INT 1
18989: ST_TO_ADDR
// if p3 = 20 then
18990: LD_VAR 0 3
18994: PUSH
18995: LD_INT 20
18997: EQUAL
18998: IFFALSE 19008
// sRemote := true ;
19000: LD_ADDR_EXP 96
19004: PUSH
19005: LD_INT 1
19007: ST_TO_ADDR
// if p3 = 21 then
19008: LD_VAR 0 3
19012: PUSH
19013: LD_INT 21
19015: EQUAL
19016: IFFALSE 19026
// sPowell := true ;
19018: LD_ADDR_EXP 97
19022: PUSH
19023: LD_INT 1
19025: ST_TO_ADDR
// if p3 = 22 then
19026: LD_VAR 0 3
19030: PUSH
19031: LD_INT 22
19033: EQUAL
19034: IFFALSE 19044
// sTeleport := true ;
19036: LD_ADDR_EXP 100
19040: PUSH
19041: LD_INT 1
19043: ST_TO_ADDR
// if p3 = 23 then
19044: LD_VAR 0 3
19048: PUSH
19049: LD_INT 23
19051: EQUAL
19052: IFFALSE 19062
// sOilTower := true ;
19054: LD_ADDR_EXP 102
19058: PUSH
19059: LD_INT 1
19061: ST_TO_ADDR
// if p3 = 24 then
19062: LD_VAR 0 3
19066: PUSH
19067: LD_INT 24
19069: EQUAL
19070: IFFALSE 19080
// sShovel := true ;
19072: LD_ADDR_EXP 103
19076: PUSH
19077: LD_INT 1
19079: ST_TO_ADDR
// if p3 = 25 then
19080: LD_VAR 0 3
19084: PUSH
19085: LD_INT 25
19087: EQUAL
19088: IFFALSE 19098
// sSheik := true ;
19090: LD_ADDR_EXP 104
19094: PUSH
19095: LD_INT 1
19097: ST_TO_ADDR
// if p3 = 26 then
19098: LD_VAR 0 3
19102: PUSH
19103: LD_INT 26
19105: EQUAL
19106: IFFALSE 19116
// sEarthquake := true ;
19108: LD_ADDR_EXP 106
19112: PUSH
19113: LD_INT 1
19115: ST_TO_ADDR
// if p3 = 27 then
19116: LD_VAR 0 3
19120: PUSH
19121: LD_INT 27
19123: EQUAL
19124: IFFALSE 19134
// sAI := true ;
19126: LD_ADDR_EXP 107
19130: PUSH
19131: LD_INT 1
19133: ST_TO_ADDR
// if p3 = 28 then
19134: LD_VAR 0 3
19138: PUSH
19139: LD_INT 28
19141: EQUAL
19142: IFFALSE 19152
// sCargo := true ;
19144: LD_ADDR_EXP 110
19148: PUSH
19149: LD_INT 1
19151: ST_TO_ADDR
// if p3 = 29 then
19152: LD_VAR 0 3
19156: PUSH
19157: LD_INT 29
19159: EQUAL
19160: IFFALSE 19170
// sDLaser := true ;
19162: LD_ADDR_EXP 111
19166: PUSH
19167: LD_INT 1
19169: ST_TO_ADDR
// if p3 = 30 then
19170: LD_VAR 0 3
19174: PUSH
19175: LD_INT 30
19177: EQUAL
19178: IFFALSE 19188
// sExchange := true ;
19180: LD_ADDR_EXP 112
19184: PUSH
19185: LD_INT 1
19187: ST_TO_ADDR
// if p3 = 31 then
19188: LD_VAR 0 3
19192: PUSH
19193: LD_INT 31
19195: EQUAL
19196: IFFALSE 19206
// sFac := true ;
19198: LD_ADDR_EXP 113
19202: PUSH
19203: LD_INT 1
19205: ST_TO_ADDR
// if p3 = 32 then
19206: LD_VAR 0 3
19210: PUSH
19211: LD_INT 32
19213: EQUAL
19214: IFFALSE 19224
// sPower := true ;
19216: LD_ADDR_EXP 114
19220: PUSH
19221: LD_INT 1
19223: ST_TO_ADDR
// if p3 = 33 then
19224: LD_VAR 0 3
19228: PUSH
19229: LD_INT 33
19231: EQUAL
19232: IFFALSE 19242
// sRandom := true ;
19234: LD_ADDR_EXP 115
19238: PUSH
19239: LD_INT 1
19241: ST_TO_ADDR
// if p3 = 34 then
19242: LD_VAR 0 3
19246: PUSH
19247: LD_INT 34
19249: EQUAL
19250: IFFALSE 19260
// sShield := true ;
19252: LD_ADDR_EXP 116
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// if p3 = 35 then
19260: LD_VAR 0 3
19264: PUSH
19265: LD_INT 35
19267: EQUAL
19268: IFFALSE 19278
// sTime := true ;
19270: LD_ADDR_EXP 117
19274: PUSH
19275: LD_INT 1
19277: ST_TO_ADDR
// if p3 = 36 then
19278: LD_VAR 0 3
19282: PUSH
19283: LD_INT 36
19285: EQUAL
19286: IFFALSE 19296
// sTools := true ;
19288: LD_ADDR_EXP 118
19292: PUSH
19293: LD_INT 1
19295: ST_TO_ADDR
// if p3 = 101 then
19296: LD_VAR 0 3
19300: PUSH
19301: LD_INT 101
19303: EQUAL
19304: IFFALSE 19314
// sSold := true ;
19306: LD_ADDR_EXP 83
19310: PUSH
19311: LD_INT 1
19313: ST_TO_ADDR
// if p3 = 102 then
19314: LD_VAR 0 3
19318: PUSH
19319: LD_INT 102
19321: EQUAL
19322: IFFALSE 19332
// sDiff := true ;
19324: LD_ADDR_EXP 84
19328: PUSH
19329: LD_INT 1
19331: ST_TO_ADDR
// if p3 = 103 then
19332: LD_VAR 0 3
19336: PUSH
19337: LD_INT 103
19339: EQUAL
19340: IFFALSE 19350
// sFog := true ;
19342: LD_ADDR_EXP 87
19346: PUSH
19347: LD_INT 1
19349: ST_TO_ADDR
// if p3 = 104 then
19350: LD_VAR 0 3
19354: PUSH
19355: LD_INT 104
19357: EQUAL
19358: IFFALSE 19368
// sReset := true ;
19360: LD_ADDR_EXP 88
19364: PUSH
19365: LD_INT 1
19367: ST_TO_ADDR
// if p3 = 105 then
19368: LD_VAR 0 3
19372: PUSH
19373: LD_INT 105
19375: EQUAL
19376: IFFALSE 19386
// sSun := true ;
19378: LD_ADDR_EXP 89
19382: PUSH
19383: LD_INT 1
19385: ST_TO_ADDR
// if p3 = 106 then
19386: LD_VAR 0 3
19390: PUSH
19391: LD_INT 106
19393: EQUAL
19394: IFFALSE 19404
// sTiger := true ;
19396: LD_ADDR_EXP 85
19400: PUSH
19401: LD_INT 1
19403: ST_TO_ADDR
// if p3 = 107 then
19404: LD_VAR 0 3
19408: PUSH
19409: LD_INT 107
19411: EQUAL
19412: IFFALSE 19422
// sBomb := true ;
19414: LD_ADDR_EXP 86
19418: PUSH
19419: LD_INT 1
19421: ST_TO_ADDR
// if p3 = 108 then
19422: LD_VAR 0 3
19426: PUSH
19427: LD_INT 108
19429: EQUAL
19430: IFFALSE 19440
// sWound := true ;
19432: LD_ADDR_EXP 94
19436: PUSH
19437: LD_INT 1
19439: ST_TO_ADDR
// if p3 = 109 then
19440: LD_VAR 0 3
19444: PUSH
19445: LD_INT 109
19447: EQUAL
19448: IFFALSE 19458
// sBetray := true ;
19450: LD_ADDR_EXP 98
19454: PUSH
19455: LD_INT 1
19457: ST_TO_ADDR
// if p3 = 110 then
19458: LD_VAR 0 3
19462: PUSH
19463: LD_INT 110
19465: EQUAL
19466: IFFALSE 19476
// sContamin := true ;
19468: LD_ADDR_EXP 99
19472: PUSH
19473: LD_INT 1
19475: ST_TO_ADDR
// if p3 = 111 then
19476: LD_VAR 0 3
19480: PUSH
19481: LD_INT 111
19483: EQUAL
19484: IFFALSE 19494
// sOil := true ;
19486: LD_ADDR_EXP 101
19490: PUSH
19491: LD_INT 1
19493: ST_TO_ADDR
// if p3 = 112 then
19494: LD_VAR 0 3
19498: PUSH
19499: LD_INT 112
19501: EQUAL
19502: IFFALSE 19512
// sStu := true ;
19504: LD_ADDR_EXP 105
19508: PUSH
19509: LD_INT 1
19511: ST_TO_ADDR
// if p3 = 113 then
19512: LD_VAR 0 3
19516: PUSH
19517: LD_INT 113
19519: EQUAL
19520: IFFALSE 19530
// sBazooka := true ;
19522: LD_ADDR_EXP 108
19526: PUSH
19527: LD_INT 1
19529: ST_TO_ADDR
// if p3 = 114 then
19530: LD_VAR 0 3
19534: PUSH
19535: LD_INT 114
19537: EQUAL
19538: IFFALSE 19548
// sMortar := true ;
19540: LD_ADDR_EXP 109
19544: PUSH
19545: LD_INT 1
19547: ST_TO_ADDR
// if p3 = 115 then
19548: LD_VAR 0 3
19552: PUSH
19553: LD_INT 115
19555: EQUAL
19556: IFFALSE 19566
// sRanger := true ;
19558: LD_ADDR_EXP 119
19562: PUSH
19563: LD_INT 1
19565: ST_TO_ADDR
// if p3 = 116 then
19566: LD_VAR 0 3
19570: PUSH
19571: LD_INT 116
19573: EQUAL
19574: IFFALSE 19584
// sComputer := true ;
19576: LD_ADDR_EXP 120
19580: PUSH
19581: LD_INT 1
19583: ST_TO_ADDR
// if p3 = 117 then
19584: LD_VAR 0 3
19588: PUSH
19589: LD_INT 117
19591: EQUAL
19592: IFFALSE 19602
// s30 := true ;
19594: LD_ADDR_EXP 121
19598: PUSH
19599: LD_INT 1
19601: ST_TO_ADDR
// if p3 = 118 then
19602: LD_VAR 0 3
19606: PUSH
19607: LD_INT 118
19609: EQUAL
19610: IFFALSE 19620
// s60 := true ;
19612: LD_ADDR_EXP 122
19616: PUSH
19617: LD_INT 1
19619: ST_TO_ADDR
// end ; if p2 = 101 then
19620: LD_VAR 0 2
19624: PUSH
19625: LD_INT 101
19627: EQUAL
19628: IFFALSE 19756
// begin case p3 of 1 :
19630: LD_VAR 0 3
19634: PUSH
19635: LD_INT 1
19637: DOUBLE
19638: EQUAL
19639: IFTRUE 19643
19641: GO 19650
19643: POP
// hHackUnlimitedResources ; 2 :
19644: CALL 31352 0 0
19648: GO 19756
19650: LD_INT 2
19652: DOUBLE
19653: EQUAL
19654: IFTRUE 19658
19656: GO 19665
19658: POP
// hHackSetLevel10 ; 3 :
19659: CALL 31485 0 0
19663: GO 19756
19665: LD_INT 3
19667: DOUBLE
19668: EQUAL
19669: IFTRUE 19673
19671: GO 19680
19673: POP
// hHackSetLevel10YourUnits ; 4 :
19674: CALL 31570 0 0
19678: GO 19756
19680: LD_INT 4
19682: DOUBLE
19683: EQUAL
19684: IFTRUE 19688
19686: GO 19695
19688: POP
// hHackInvincible ; 5 :
19689: CALL 32018 0 0
19693: GO 19756
19695: LD_INT 5
19697: DOUBLE
19698: EQUAL
19699: IFTRUE 19703
19701: GO 19710
19703: POP
// hHackInvisible ; 6 :
19704: CALL 32129 0 0
19708: GO 19756
19710: LD_INT 6
19712: DOUBLE
19713: EQUAL
19714: IFTRUE 19718
19716: GO 19725
19718: POP
// hHackChangeYourSide ; 7 :
19719: CALL 32186 0 0
19723: GO 19756
19725: LD_INT 7
19727: DOUBLE
19728: EQUAL
19729: IFTRUE 19733
19731: GO 19740
19733: POP
// hHackChangeUnitSide ; 8 :
19734: CALL 32228 0 0
19738: GO 19756
19740: LD_INT 8
19742: DOUBLE
19743: EQUAL
19744: IFTRUE 19748
19746: GO 19755
19748: POP
// hHackFog ; end ;
19749: CALL 32329 0 0
19753: GO 19756
19755: POP
// end ; end ;
19756: LD_VAR 0 7
19760: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19761: GO 19763
19763: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19764: LD_STRING initStreamRollete();
19766: PPUSH
19767: CALL_OW 559
// InitStreamMode ;
19771: CALL 19780 0 0
// DefineStreamItems ( ) ;
19775: CALL 20244 0 0
// end ;
19779: END
// function InitStreamMode ; begin
19780: LD_INT 0
19782: PPUSH
// streamModeActive := false ;
19783: LD_ADDR_EXP 66
19787: PUSH
19788: LD_INT 0
19790: ST_TO_ADDR
// normalCounter := 36 ;
19791: LD_ADDR_EXP 67
19795: PUSH
19796: LD_INT 36
19798: ST_TO_ADDR
// hardcoreCounter := 16 ;
19799: LD_ADDR_EXP 68
19803: PUSH
19804: LD_INT 16
19806: ST_TO_ADDR
// sRocket := false ;
19807: LD_ADDR_EXP 71
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
// sSpeed := false ;
19815: LD_ADDR_EXP 70
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// sEngine := false ;
19823: LD_ADDR_EXP 72
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// sSpec := false ;
19831: LD_ADDR_EXP 69
19835: PUSH
19836: LD_INT 0
19838: ST_TO_ADDR
// sLevel := false ;
19839: LD_ADDR_EXP 73
19843: PUSH
19844: LD_INT 0
19846: ST_TO_ADDR
// sArmoury := false ;
19847: LD_ADDR_EXP 74
19851: PUSH
19852: LD_INT 0
19854: ST_TO_ADDR
// sRadar := false ;
19855: LD_ADDR_EXP 75
19859: PUSH
19860: LD_INT 0
19862: ST_TO_ADDR
// sBunker := false ;
19863: LD_ADDR_EXP 76
19867: PUSH
19868: LD_INT 0
19870: ST_TO_ADDR
// sHack := false ;
19871: LD_ADDR_EXP 77
19875: PUSH
19876: LD_INT 0
19878: ST_TO_ADDR
// sFire := false ;
19879: LD_ADDR_EXP 78
19883: PUSH
19884: LD_INT 0
19886: ST_TO_ADDR
// sRefresh := false ;
19887: LD_ADDR_EXP 79
19891: PUSH
19892: LD_INT 0
19894: ST_TO_ADDR
// sExp := false ;
19895: LD_ADDR_EXP 80
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
// sDepot := false ;
19903: LD_ADDR_EXP 81
19907: PUSH
19908: LD_INT 0
19910: ST_TO_ADDR
// sFlag := false ;
19911: LD_ADDR_EXP 82
19915: PUSH
19916: LD_INT 0
19918: ST_TO_ADDR
// sKamikadze := false ;
19919: LD_ADDR_EXP 90
19923: PUSH
19924: LD_INT 0
19926: ST_TO_ADDR
// sTroll := false ;
19927: LD_ADDR_EXP 91
19931: PUSH
19932: LD_INT 0
19934: ST_TO_ADDR
// sSlow := false ;
19935: LD_ADDR_EXP 92
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// sLack := false ;
19943: LD_ADDR_EXP 93
19947: PUSH
19948: LD_INT 0
19950: ST_TO_ADDR
// sTank := false ;
19951: LD_ADDR_EXP 95
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// sRemote := false ;
19959: LD_ADDR_EXP 96
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// sPowell := false ;
19967: LD_ADDR_EXP 97
19971: PUSH
19972: LD_INT 0
19974: ST_TO_ADDR
// sTeleport := false ;
19975: LD_ADDR_EXP 100
19979: PUSH
19980: LD_INT 0
19982: ST_TO_ADDR
// sOilTower := false ;
19983: LD_ADDR_EXP 102
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
// sShovel := false ;
19991: LD_ADDR_EXP 103
19995: PUSH
19996: LD_INT 0
19998: ST_TO_ADDR
// sSheik := false ;
19999: LD_ADDR_EXP 104
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
// sEarthquake := false ;
20007: LD_ADDR_EXP 106
20011: PUSH
20012: LD_INT 0
20014: ST_TO_ADDR
// sAI := false ;
20015: LD_ADDR_EXP 107
20019: PUSH
20020: LD_INT 0
20022: ST_TO_ADDR
// sCargo := false ;
20023: LD_ADDR_EXP 110
20027: PUSH
20028: LD_INT 0
20030: ST_TO_ADDR
// sDLaser := false ;
20031: LD_ADDR_EXP 111
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// sExchange := false ;
20039: LD_ADDR_EXP 112
20043: PUSH
20044: LD_INT 0
20046: ST_TO_ADDR
// sFac := false ;
20047: LD_ADDR_EXP 113
20051: PUSH
20052: LD_INT 0
20054: ST_TO_ADDR
// sPower := false ;
20055: LD_ADDR_EXP 114
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// sRandom := false ;
20063: LD_ADDR_EXP 115
20067: PUSH
20068: LD_INT 0
20070: ST_TO_ADDR
// sShield := false ;
20071: LD_ADDR_EXP 116
20075: PUSH
20076: LD_INT 0
20078: ST_TO_ADDR
// sTime := false ;
20079: LD_ADDR_EXP 117
20083: PUSH
20084: LD_INT 0
20086: ST_TO_ADDR
// sTools := false ;
20087: LD_ADDR_EXP 118
20091: PUSH
20092: LD_INT 0
20094: ST_TO_ADDR
// sSold := false ;
20095: LD_ADDR_EXP 83
20099: PUSH
20100: LD_INT 0
20102: ST_TO_ADDR
// sDiff := false ;
20103: LD_ADDR_EXP 84
20107: PUSH
20108: LD_INT 0
20110: ST_TO_ADDR
// sFog := false ;
20111: LD_ADDR_EXP 87
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// sReset := false ;
20119: LD_ADDR_EXP 88
20123: PUSH
20124: LD_INT 0
20126: ST_TO_ADDR
// sSun := false ;
20127: LD_ADDR_EXP 89
20131: PUSH
20132: LD_INT 0
20134: ST_TO_ADDR
// sTiger := false ;
20135: LD_ADDR_EXP 85
20139: PUSH
20140: LD_INT 0
20142: ST_TO_ADDR
// sBomb := false ;
20143: LD_ADDR_EXP 86
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// sWound := false ;
20151: LD_ADDR_EXP 94
20155: PUSH
20156: LD_INT 0
20158: ST_TO_ADDR
// sBetray := false ;
20159: LD_ADDR_EXP 98
20163: PUSH
20164: LD_INT 0
20166: ST_TO_ADDR
// sContamin := false ;
20167: LD_ADDR_EXP 99
20171: PUSH
20172: LD_INT 0
20174: ST_TO_ADDR
// sOil := false ;
20175: LD_ADDR_EXP 101
20179: PUSH
20180: LD_INT 0
20182: ST_TO_ADDR
// sStu := false ;
20183: LD_ADDR_EXP 105
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// sBazooka := false ;
20191: LD_ADDR_EXP 108
20195: PUSH
20196: LD_INT 0
20198: ST_TO_ADDR
// sMortar := false ;
20199: LD_ADDR_EXP 109
20203: PUSH
20204: LD_INT 0
20206: ST_TO_ADDR
// sRanger := false ;
20207: LD_ADDR_EXP 119
20211: PUSH
20212: LD_INT 0
20214: ST_TO_ADDR
// sComputer := false ;
20215: LD_ADDR_EXP 120
20219: PUSH
20220: LD_INT 0
20222: ST_TO_ADDR
// s30 := false ;
20223: LD_ADDR_EXP 121
20227: PUSH
20228: LD_INT 0
20230: ST_TO_ADDR
// s60 := false ;
20231: LD_ADDR_EXP 122
20235: PUSH
20236: LD_INT 0
20238: ST_TO_ADDR
// end ;
20239: LD_VAR 0 1
20243: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20244: LD_INT 0
20246: PPUSH
20247: PPUSH
20248: PPUSH
20249: PPUSH
20250: PPUSH
// result := [ ] ;
20251: LD_ADDR_VAR 0 1
20255: PUSH
20256: EMPTY
20257: ST_TO_ADDR
// if campaign_id = 1 then
20258: LD_OWVAR 69
20262: PUSH
20263: LD_INT 1
20265: EQUAL
20266: IFFALSE 23432
// begin case mission_number of 1 :
20268: LD_OWVAR 70
20272: PUSH
20273: LD_INT 1
20275: DOUBLE
20276: EQUAL
20277: IFTRUE 20281
20279: GO 20357
20281: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20282: LD_ADDR_VAR 0 1
20286: PUSH
20287: LD_INT 2
20289: PUSH
20290: LD_INT 4
20292: PUSH
20293: LD_INT 11
20295: PUSH
20296: LD_INT 12
20298: PUSH
20299: LD_INT 15
20301: PUSH
20302: LD_INT 16
20304: PUSH
20305: LD_INT 22
20307: PUSH
20308: LD_INT 23
20310: PUSH
20311: LD_INT 26
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 101
20327: PUSH
20328: LD_INT 102
20330: PUSH
20331: LD_INT 106
20333: PUSH
20334: LD_INT 116
20336: PUSH
20337: LD_INT 117
20339: PUSH
20340: LD_INT 118
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: ST_TO_ADDR
20355: GO 23430
20357: LD_INT 2
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20449
20365: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20366: LD_ADDR_VAR 0 1
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: LD_INT 4
20376: PUSH
20377: LD_INT 11
20379: PUSH
20380: LD_INT 12
20382: PUSH
20383: LD_INT 15
20385: PUSH
20386: LD_INT 16
20388: PUSH
20389: LD_INT 22
20391: PUSH
20392: LD_INT 23
20394: PUSH
20395: LD_INT 26
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 101
20411: PUSH
20412: LD_INT 102
20414: PUSH
20415: LD_INT 105
20417: PUSH
20418: LD_INT 106
20420: PUSH
20421: LD_INT 108
20423: PUSH
20424: LD_INT 116
20426: PUSH
20427: LD_INT 117
20429: PUSH
20430: LD_INT 118
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: ST_TO_ADDR
20447: GO 23430
20449: LD_INT 3
20451: DOUBLE
20452: EQUAL
20453: IFTRUE 20457
20455: GO 20545
20457: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20458: LD_ADDR_VAR 0 1
20462: PUSH
20463: LD_INT 2
20465: PUSH
20466: LD_INT 4
20468: PUSH
20469: LD_INT 5
20471: PUSH
20472: LD_INT 11
20474: PUSH
20475: LD_INT 12
20477: PUSH
20478: LD_INT 15
20480: PUSH
20481: LD_INT 16
20483: PUSH
20484: LD_INT 22
20486: PUSH
20487: LD_INT 26
20489: PUSH
20490: LD_INT 36
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 101
20507: PUSH
20508: LD_INT 102
20510: PUSH
20511: LD_INT 105
20513: PUSH
20514: LD_INT 106
20516: PUSH
20517: LD_INT 108
20519: PUSH
20520: LD_INT 116
20522: PUSH
20523: LD_INT 117
20525: PUSH
20526: LD_INT 118
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: ST_TO_ADDR
20543: GO 23430
20545: LD_INT 4
20547: DOUBLE
20548: EQUAL
20549: IFTRUE 20553
20551: GO 20649
20553: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20554: LD_ADDR_VAR 0 1
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: LD_INT 4
20564: PUSH
20565: LD_INT 5
20567: PUSH
20568: LD_INT 8
20570: PUSH
20571: LD_INT 11
20573: PUSH
20574: LD_INT 12
20576: PUSH
20577: LD_INT 15
20579: PUSH
20580: LD_INT 16
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_INT 23
20588: PUSH
20589: LD_INT 26
20591: PUSH
20592: LD_INT 36
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 101
20611: PUSH
20612: LD_INT 102
20614: PUSH
20615: LD_INT 105
20617: PUSH
20618: LD_INT 106
20620: PUSH
20621: LD_INT 108
20623: PUSH
20624: LD_INT 116
20626: PUSH
20627: LD_INT 117
20629: PUSH
20630: LD_INT 118
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: ST_TO_ADDR
20647: GO 23430
20649: LD_INT 5
20651: DOUBLE
20652: EQUAL
20653: IFTRUE 20657
20655: GO 20769
20657: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20658: LD_ADDR_VAR 0 1
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 4
20668: PUSH
20669: LD_INT 5
20671: PUSH
20672: LD_INT 6
20674: PUSH
20675: LD_INT 8
20677: PUSH
20678: LD_INT 11
20680: PUSH
20681: LD_INT 12
20683: PUSH
20684: LD_INT 15
20686: PUSH
20687: LD_INT 16
20689: PUSH
20690: LD_INT 22
20692: PUSH
20693: LD_INT 23
20695: PUSH
20696: LD_INT 25
20698: PUSH
20699: LD_INT 26
20701: PUSH
20702: LD_INT 36
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 101
20723: PUSH
20724: LD_INT 102
20726: PUSH
20727: LD_INT 105
20729: PUSH
20730: LD_INT 106
20732: PUSH
20733: LD_INT 108
20735: PUSH
20736: LD_INT 109
20738: PUSH
20739: LD_INT 112
20741: PUSH
20742: LD_INT 116
20744: PUSH
20745: LD_INT 117
20747: PUSH
20748: LD_INT 118
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: ST_TO_ADDR
20767: GO 23430
20769: LD_INT 6
20771: DOUBLE
20772: EQUAL
20773: IFTRUE 20777
20775: GO 20909
20777: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20778: LD_ADDR_VAR 0 1
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 4
20788: PUSH
20789: LD_INT 5
20791: PUSH
20792: LD_INT 6
20794: PUSH
20795: LD_INT 8
20797: PUSH
20798: LD_INT 11
20800: PUSH
20801: LD_INT 12
20803: PUSH
20804: LD_INT 15
20806: PUSH
20807: LD_INT 16
20809: PUSH
20810: LD_INT 20
20812: PUSH
20813: LD_INT 21
20815: PUSH
20816: LD_INT 22
20818: PUSH
20819: LD_INT 23
20821: PUSH
20822: LD_INT 25
20824: PUSH
20825: LD_INT 26
20827: PUSH
20828: LD_INT 30
20830: PUSH
20831: LD_INT 31
20833: PUSH
20834: LD_INT 32
20836: PUSH
20837: LD_INT 36
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 101
20863: PUSH
20864: LD_INT 102
20866: PUSH
20867: LD_INT 105
20869: PUSH
20870: LD_INT 106
20872: PUSH
20873: LD_INT 108
20875: PUSH
20876: LD_INT 109
20878: PUSH
20879: LD_INT 112
20881: PUSH
20882: LD_INT 116
20884: PUSH
20885: LD_INT 117
20887: PUSH
20888: LD_INT 118
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: ST_TO_ADDR
20907: GO 23430
20909: LD_INT 7
20911: DOUBLE
20912: EQUAL
20913: IFTRUE 20917
20915: GO 21029
20917: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20918: LD_ADDR_VAR 0 1
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: LD_INT 4
20928: PUSH
20929: LD_INT 5
20931: PUSH
20932: LD_INT 7
20934: PUSH
20935: LD_INT 11
20937: PUSH
20938: LD_INT 12
20940: PUSH
20941: LD_INT 15
20943: PUSH
20944: LD_INT 16
20946: PUSH
20947: LD_INT 20
20949: PUSH
20950: LD_INT 21
20952: PUSH
20953: LD_INT 22
20955: PUSH
20956: LD_INT 23
20958: PUSH
20959: LD_INT 25
20961: PUSH
20962: LD_INT 26
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 101
20983: PUSH
20984: LD_INT 102
20986: PUSH
20987: LD_INT 103
20989: PUSH
20990: LD_INT 105
20992: PUSH
20993: LD_INT 106
20995: PUSH
20996: LD_INT 108
20998: PUSH
20999: LD_INT 112
21001: PUSH
21002: LD_INT 116
21004: PUSH
21005: LD_INT 117
21007: PUSH
21008: LD_INT 118
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: ST_TO_ADDR
21027: GO 23430
21029: LD_INT 8
21031: DOUBLE
21032: EQUAL
21033: IFTRUE 21037
21035: GO 21177
21037: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21038: LD_ADDR_VAR 0 1
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 4
21048: PUSH
21049: LD_INT 5
21051: PUSH
21052: LD_INT 6
21054: PUSH
21055: LD_INT 7
21057: PUSH
21058: LD_INT 8
21060: PUSH
21061: LD_INT 11
21063: PUSH
21064: LD_INT 12
21066: PUSH
21067: LD_INT 15
21069: PUSH
21070: LD_INT 16
21072: PUSH
21073: LD_INT 20
21075: PUSH
21076: LD_INT 21
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: LD_INT 23
21084: PUSH
21085: LD_INT 25
21087: PUSH
21088: LD_INT 26
21090: PUSH
21091: LD_INT 30
21093: PUSH
21094: LD_INT 31
21096: PUSH
21097: LD_INT 32
21099: PUSH
21100: LD_INT 36
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 101
21127: PUSH
21128: LD_INT 102
21130: PUSH
21131: LD_INT 103
21133: PUSH
21134: LD_INT 105
21136: PUSH
21137: LD_INT 106
21139: PUSH
21140: LD_INT 108
21142: PUSH
21143: LD_INT 109
21145: PUSH
21146: LD_INT 112
21148: PUSH
21149: LD_INT 116
21151: PUSH
21152: LD_INT 117
21154: PUSH
21155: LD_INT 118
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: ST_TO_ADDR
21175: GO 23430
21177: LD_INT 9
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21333
21185: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21186: LD_ADDR_VAR 0 1
21190: PUSH
21191: LD_INT 2
21193: PUSH
21194: LD_INT 4
21196: PUSH
21197: LD_INT 5
21199: PUSH
21200: LD_INT 6
21202: PUSH
21203: LD_INT 7
21205: PUSH
21206: LD_INT 8
21208: PUSH
21209: LD_INT 11
21211: PUSH
21212: LD_INT 12
21214: PUSH
21215: LD_INT 15
21217: PUSH
21218: LD_INT 16
21220: PUSH
21221: LD_INT 20
21223: PUSH
21224: LD_INT 21
21226: PUSH
21227: LD_INT 22
21229: PUSH
21230: LD_INT 23
21232: PUSH
21233: LD_INT 25
21235: PUSH
21236: LD_INT 26
21238: PUSH
21239: LD_INT 28
21241: PUSH
21242: LD_INT 30
21244: PUSH
21245: LD_INT 31
21247: PUSH
21248: LD_INT 32
21250: PUSH
21251: LD_INT 36
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 101
21279: PUSH
21280: LD_INT 102
21282: PUSH
21283: LD_INT 103
21285: PUSH
21286: LD_INT 105
21288: PUSH
21289: LD_INT 106
21291: PUSH
21292: LD_INT 108
21294: PUSH
21295: LD_INT 109
21297: PUSH
21298: LD_INT 112
21300: PUSH
21301: LD_INT 114
21303: PUSH
21304: LD_INT 116
21306: PUSH
21307: LD_INT 117
21309: PUSH
21310: LD_INT 118
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: ST_TO_ADDR
21331: GO 23430
21333: LD_INT 10
21335: DOUBLE
21336: EQUAL
21337: IFTRUE 21341
21339: GO 21537
21341: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21342: LD_ADDR_VAR 0 1
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: LD_INT 4
21352: PUSH
21353: LD_INT 5
21355: PUSH
21356: LD_INT 6
21358: PUSH
21359: LD_INT 7
21361: PUSH
21362: LD_INT 8
21364: PUSH
21365: LD_INT 9
21367: PUSH
21368: LD_INT 10
21370: PUSH
21371: LD_INT 11
21373: PUSH
21374: LD_INT 12
21376: PUSH
21377: LD_INT 13
21379: PUSH
21380: LD_INT 14
21382: PUSH
21383: LD_INT 15
21385: PUSH
21386: LD_INT 16
21388: PUSH
21389: LD_INT 17
21391: PUSH
21392: LD_INT 18
21394: PUSH
21395: LD_INT 19
21397: PUSH
21398: LD_INT 20
21400: PUSH
21401: LD_INT 21
21403: PUSH
21404: LD_INT 22
21406: PUSH
21407: LD_INT 23
21409: PUSH
21410: LD_INT 24
21412: PUSH
21413: LD_INT 25
21415: PUSH
21416: LD_INT 26
21418: PUSH
21419: LD_INT 28
21421: PUSH
21422: LD_INT 30
21424: PUSH
21425: LD_INT 31
21427: PUSH
21428: LD_INT 32
21430: PUSH
21431: LD_INT 36
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 101
21467: PUSH
21468: LD_INT 102
21470: PUSH
21471: LD_INT 103
21473: PUSH
21474: LD_INT 104
21476: PUSH
21477: LD_INT 105
21479: PUSH
21480: LD_INT 106
21482: PUSH
21483: LD_INT 107
21485: PUSH
21486: LD_INT 108
21488: PUSH
21489: LD_INT 109
21491: PUSH
21492: LD_INT 110
21494: PUSH
21495: LD_INT 111
21497: PUSH
21498: LD_INT 112
21500: PUSH
21501: LD_INT 114
21503: PUSH
21504: LD_INT 116
21506: PUSH
21507: LD_INT 117
21509: PUSH
21510: LD_INT 118
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: ST_TO_ADDR
21535: GO 23430
21537: LD_INT 11
21539: DOUBLE
21540: EQUAL
21541: IFTRUE 21545
21543: GO 21749
21545: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21546: LD_ADDR_VAR 0 1
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 3
21556: PUSH
21557: LD_INT 4
21559: PUSH
21560: LD_INT 5
21562: PUSH
21563: LD_INT 6
21565: PUSH
21566: LD_INT 7
21568: PUSH
21569: LD_INT 8
21571: PUSH
21572: LD_INT 9
21574: PUSH
21575: LD_INT 10
21577: PUSH
21578: LD_INT 11
21580: PUSH
21581: LD_INT 12
21583: PUSH
21584: LD_INT 13
21586: PUSH
21587: LD_INT 14
21589: PUSH
21590: LD_INT 15
21592: PUSH
21593: LD_INT 16
21595: PUSH
21596: LD_INT 17
21598: PUSH
21599: LD_INT 18
21601: PUSH
21602: LD_INT 19
21604: PUSH
21605: LD_INT 20
21607: PUSH
21608: LD_INT 21
21610: PUSH
21611: LD_INT 22
21613: PUSH
21614: LD_INT 23
21616: PUSH
21617: LD_INT 24
21619: PUSH
21620: LD_INT 25
21622: PUSH
21623: LD_INT 26
21625: PUSH
21626: LD_INT 28
21628: PUSH
21629: LD_INT 30
21631: PUSH
21632: LD_INT 31
21634: PUSH
21635: LD_INT 32
21637: PUSH
21638: LD_INT 34
21640: PUSH
21641: LD_INT 36
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 101
21679: PUSH
21680: LD_INT 102
21682: PUSH
21683: LD_INT 103
21685: PUSH
21686: LD_INT 104
21688: PUSH
21689: LD_INT 105
21691: PUSH
21692: LD_INT 106
21694: PUSH
21695: LD_INT 107
21697: PUSH
21698: LD_INT 108
21700: PUSH
21701: LD_INT 109
21703: PUSH
21704: LD_INT 110
21706: PUSH
21707: LD_INT 111
21709: PUSH
21710: LD_INT 112
21712: PUSH
21713: LD_INT 114
21715: PUSH
21716: LD_INT 116
21718: PUSH
21719: LD_INT 117
21721: PUSH
21722: LD_INT 118
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: ST_TO_ADDR
21747: GO 23430
21749: LD_INT 12
21751: DOUBLE
21752: EQUAL
21753: IFTRUE 21757
21755: GO 21977
21757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21758: LD_ADDR_VAR 0 1
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: LD_INT 3
21771: PUSH
21772: LD_INT 4
21774: PUSH
21775: LD_INT 5
21777: PUSH
21778: LD_INT 6
21780: PUSH
21781: LD_INT 7
21783: PUSH
21784: LD_INT 8
21786: PUSH
21787: LD_INT 9
21789: PUSH
21790: LD_INT 10
21792: PUSH
21793: LD_INT 11
21795: PUSH
21796: LD_INT 12
21798: PUSH
21799: LD_INT 13
21801: PUSH
21802: LD_INT 14
21804: PUSH
21805: LD_INT 15
21807: PUSH
21808: LD_INT 16
21810: PUSH
21811: LD_INT 17
21813: PUSH
21814: LD_INT 18
21816: PUSH
21817: LD_INT 19
21819: PUSH
21820: LD_INT 20
21822: PUSH
21823: LD_INT 21
21825: PUSH
21826: LD_INT 22
21828: PUSH
21829: LD_INT 23
21831: PUSH
21832: LD_INT 24
21834: PUSH
21835: LD_INT 25
21837: PUSH
21838: LD_INT 26
21840: PUSH
21841: LD_INT 27
21843: PUSH
21844: LD_INT 28
21846: PUSH
21847: LD_INT 30
21849: PUSH
21850: LD_INT 31
21852: PUSH
21853: LD_INT 32
21855: PUSH
21856: LD_INT 33
21858: PUSH
21859: LD_INT 34
21861: PUSH
21862: LD_INT 36
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 101
21903: PUSH
21904: LD_INT 102
21906: PUSH
21907: LD_INT 103
21909: PUSH
21910: LD_INT 104
21912: PUSH
21913: LD_INT 105
21915: PUSH
21916: LD_INT 106
21918: PUSH
21919: LD_INT 107
21921: PUSH
21922: LD_INT 108
21924: PUSH
21925: LD_INT 109
21927: PUSH
21928: LD_INT 110
21930: PUSH
21931: LD_INT 111
21933: PUSH
21934: LD_INT 112
21936: PUSH
21937: LD_INT 113
21939: PUSH
21940: LD_INT 114
21942: PUSH
21943: LD_INT 116
21945: PUSH
21946: LD_INT 117
21948: PUSH
21949: LD_INT 118
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: ST_TO_ADDR
21975: GO 23430
21977: LD_INT 13
21979: DOUBLE
21980: EQUAL
21981: IFTRUE 21985
21983: GO 22193
21985: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21986: LD_ADDR_VAR 0 1
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: LD_INT 2
21996: PUSH
21997: LD_INT 3
21999: PUSH
22000: LD_INT 4
22002: PUSH
22003: LD_INT 5
22005: PUSH
22006: LD_INT 8
22008: PUSH
22009: LD_INT 9
22011: PUSH
22012: LD_INT 10
22014: PUSH
22015: LD_INT 11
22017: PUSH
22018: LD_INT 12
22020: PUSH
22021: LD_INT 14
22023: PUSH
22024: LD_INT 15
22026: PUSH
22027: LD_INT 16
22029: PUSH
22030: LD_INT 17
22032: PUSH
22033: LD_INT 18
22035: PUSH
22036: LD_INT 19
22038: PUSH
22039: LD_INT 20
22041: PUSH
22042: LD_INT 21
22044: PUSH
22045: LD_INT 22
22047: PUSH
22048: LD_INT 23
22050: PUSH
22051: LD_INT 24
22053: PUSH
22054: LD_INT 25
22056: PUSH
22057: LD_INT 26
22059: PUSH
22060: LD_INT 27
22062: PUSH
22063: LD_INT 28
22065: PUSH
22066: LD_INT 30
22068: PUSH
22069: LD_INT 31
22071: PUSH
22072: LD_INT 32
22074: PUSH
22075: LD_INT 33
22077: PUSH
22078: LD_INT 34
22080: PUSH
22081: LD_INT 36
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 101
22119: PUSH
22120: LD_INT 102
22122: PUSH
22123: LD_INT 103
22125: PUSH
22126: LD_INT 104
22128: PUSH
22129: LD_INT 105
22131: PUSH
22132: LD_INT 106
22134: PUSH
22135: LD_INT 107
22137: PUSH
22138: LD_INT 108
22140: PUSH
22141: LD_INT 109
22143: PUSH
22144: LD_INT 110
22146: PUSH
22147: LD_INT 111
22149: PUSH
22150: LD_INT 112
22152: PUSH
22153: LD_INT 113
22155: PUSH
22156: LD_INT 114
22158: PUSH
22159: LD_INT 116
22161: PUSH
22162: LD_INT 117
22164: PUSH
22165: LD_INT 118
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: ST_TO_ADDR
22191: GO 23430
22193: LD_INT 14
22195: DOUBLE
22196: EQUAL
22197: IFTRUE 22201
22199: GO 22425
22201: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22202: LD_ADDR_VAR 0 1
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: LD_INT 3
22215: PUSH
22216: LD_INT 4
22218: PUSH
22219: LD_INT 5
22221: PUSH
22222: LD_INT 6
22224: PUSH
22225: LD_INT 7
22227: PUSH
22228: LD_INT 8
22230: PUSH
22231: LD_INT 9
22233: PUSH
22234: LD_INT 10
22236: PUSH
22237: LD_INT 11
22239: PUSH
22240: LD_INT 12
22242: PUSH
22243: LD_INT 13
22245: PUSH
22246: LD_INT 14
22248: PUSH
22249: LD_INT 15
22251: PUSH
22252: LD_INT 16
22254: PUSH
22255: LD_INT 17
22257: PUSH
22258: LD_INT 18
22260: PUSH
22261: LD_INT 19
22263: PUSH
22264: LD_INT 20
22266: PUSH
22267: LD_INT 21
22269: PUSH
22270: LD_INT 22
22272: PUSH
22273: LD_INT 23
22275: PUSH
22276: LD_INT 24
22278: PUSH
22279: LD_INT 25
22281: PUSH
22282: LD_INT 26
22284: PUSH
22285: LD_INT 27
22287: PUSH
22288: LD_INT 28
22290: PUSH
22291: LD_INT 29
22293: PUSH
22294: LD_INT 30
22296: PUSH
22297: LD_INT 31
22299: PUSH
22300: LD_INT 32
22302: PUSH
22303: LD_INT 33
22305: PUSH
22306: LD_INT 34
22308: PUSH
22309: LD_INT 36
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 101
22351: PUSH
22352: LD_INT 102
22354: PUSH
22355: LD_INT 103
22357: PUSH
22358: LD_INT 104
22360: PUSH
22361: LD_INT 105
22363: PUSH
22364: LD_INT 106
22366: PUSH
22367: LD_INT 107
22369: PUSH
22370: LD_INT 108
22372: PUSH
22373: LD_INT 109
22375: PUSH
22376: LD_INT 110
22378: PUSH
22379: LD_INT 111
22381: PUSH
22382: LD_INT 112
22384: PUSH
22385: LD_INT 113
22387: PUSH
22388: LD_INT 114
22390: PUSH
22391: LD_INT 116
22393: PUSH
22394: LD_INT 117
22396: PUSH
22397: LD_INT 118
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: ST_TO_ADDR
22423: GO 23430
22425: LD_INT 15
22427: DOUBLE
22428: EQUAL
22429: IFTRUE 22433
22431: GO 22657
22433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22434: LD_ADDR_VAR 0 1
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 2
22444: PUSH
22445: LD_INT 3
22447: PUSH
22448: LD_INT 4
22450: PUSH
22451: LD_INT 5
22453: PUSH
22454: LD_INT 6
22456: PUSH
22457: LD_INT 7
22459: PUSH
22460: LD_INT 8
22462: PUSH
22463: LD_INT 9
22465: PUSH
22466: LD_INT 10
22468: PUSH
22469: LD_INT 11
22471: PUSH
22472: LD_INT 12
22474: PUSH
22475: LD_INT 13
22477: PUSH
22478: LD_INT 14
22480: PUSH
22481: LD_INT 15
22483: PUSH
22484: LD_INT 16
22486: PUSH
22487: LD_INT 17
22489: PUSH
22490: LD_INT 18
22492: PUSH
22493: LD_INT 19
22495: PUSH
22496: LD_INT 20
22498: PUSH
22499: LD_INT 21
22501: PUSH
22502: LD_INT 22
22504: PUSH
22505: LD_INT 23
22507: PUSH
22508: LD_INT 24
22510: PUSH
22511: LD_INT 25
22513: PUSH
22514: LD_INT 26
22516: PUSH
22517: LD_INT 27
22519: PUSH
22520: LD_INT 28
22522: PUSH
22523: LD_INT 29
22525: PUSH
22526: LD_INT 30
22528: PUSH
22529: LD_INT 31
22531: PUSH
22532: LD_INT 32
22534: PUSH
22535: LD_INT 33
22537: PUSH
22538: LD_INT 34
22540: PUSH
22541: LD_INT 36
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 101
22583: PUSH
22584: LD_INT 102
22586: PUSH
22587: LD_INT 103
22589: PUSH
22590: LD_INT 104
22592: PUSH
22593: LD_INT 105
22595: PUSH
22596: LD_INT 106
22598: PUSH
22599: LD_INT 107
22601: PUSH
22602: LD_INT 108
22604: PUSH
22605: LD_INT 109
22607: PUSH
22608: LD_INT 110
22610: PUSH
22611: LD_INT 111
22613: PUSH
22614: LD_INT 112
22616: PUSH
22617: LD_INT 113
22619: PUSH
22620: LD_INT 114
22622: PUSH
22623: LD_INT 116
22625: PUSH
22626: LD_INT 117
22628: PUSH
22629: LD_INT 118
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: ST_TO_ADDR
22655: GO 23430
22657: LD_INT 16
22659: DOUBLE
22660: EQUAL
22661: IFTRUE 22665
22663: GO 22801
22665: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22666: LD_ADDR_VAR 0 1
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: LD_INT 4
22676: PUSH
22677: LD_INT 5
22679: PUSH
22680: LD_INT 7
22682: PUSH
22683: LD_INT 11
22685: PUSH
22686: LD_INT 12
22688: PUSH
22689: LD_INT 15
22691: PUSH
22692: LD_INT 16
22694: PUSH
22695: LD_INT 20
22697: PUSH
22698: LD_INT 21
22700: PUSH
22701: LD_INT 22
22703: PUSH
22704: LD_INT 23
22706: PUSH
22707: LD_INT 25
22709: PUSH
22710: LD_INT 26
22712: PUSH
22713: LD_INT 30
22715: PUSH
22716: LD_INT 31
22718: PUSH
22719: LD_INT 32
22721: PUSH
22722: LD_INT 33
22724: PUSH
22725: LD_INT 34
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 101
22751: PUSH
22752: LD_INT 102
22754: PUSH
22755: LD_INT 103
22757: PUSH
22758: LD_INT 106
22760: PUSH
22761: LD_INT 108
22763: PUSH
22764: LD_INT 112
22766: PUSH
22767: LD_INT 113
22769: PUSH
22770: LD_INT 114
22772: PUSH
22773: LD_INT 116
22775: PUSH
22776: LD_INT 117
22778: PUSH
22779: LD_INT 118
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: ST_TO_ADDR
22799: GO 23430
22801: LD_INT 17
22803: DOUBLE
22804: EQUAL
22805: IFTRUE 22809
22807: GO 23033
22809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22810: LD_ADDR_VAR 0 1
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: LD_INT 3
22823: PUSH
22824: LD_INT 4
22826: PUSH
22827: LD_INT 5
22829: PUSH
22830: LD_INT 6
22832: PUSH
22833: LD_INT 7
22835: PUSH
22836: LD_INT 8
22838: PUSH
22839: LD_INT 9
22841: PUSH
22842: LD_INT 10
22844: PUSH
22845: LD_INT 11
22847: PUSH
22848: LD_INT 12
22850: PUSH
22851: LD_INT 13
22853: PUSH
22854: LD_INT 14
22856: PUSH
22857: LD_INT 15
22859: PUSH
22860: LD_INT 16
22862: PUSH
22863: LD_INT 17
22865: PUSH
22866: LD_INT 18
22868: PUSH
22869: LD_INT 19
22871: PUSH
22872: LD_INT 20
22874: PUSH
22875: LD_INT 21
22877: PUSH
22878: LD_INT 22
22880: PUSH
22881: LD_INT 23
22883: PUSH
22884: LD_INT 24
22886: PUSH
22887: LD_INT 25
22889: PUSH
22890: LD_INT 26
22892: PUSH
22893: LD_INT 27
22895: PUSH
22896: LD_INT 28
22898: PUSH
22899: LD_INT 29
22901: PUSH
22902: LD_INT 30
22904: PUSH
22905: LD_INT 31
22907: PUSH
22908: LD_INT 32
22910: PUSH
22911: LD_INT 33
22913: PUSH
22914: LD_INT 34
22916: PUSH
22917: LD_INT 36
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 101
22959: PUSH
22960: LD_INT 102
22962: PUSH
22963: LD_INT 103
22965: PUSH
22966: LD_INT 104
22968: PUSH
22969: LD_INT 105
22971: PUSH
22972: LD_INT 106
22974: PUSH
22975: LD_INT 107
22977: PUSH
22978: LD_INT 108
22980: PUSH
22981: LD_INT 109
22983: PUSH
22984: LD_INT 110
22986: PUSH
22987: LD_INT 111
22989: PUSH
22990: LD_INT 112
22992: PUSH
22993: LD_INT 113
22995: PUSH
22996: LD_INT 114
22998: PUSH
22999: LD_INT 116
23001: PUSH
23002: LD_INT 117
23004: PUSH
23005: LD_INT 118
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: ST_TO_ADDR
23031: GO 23430
23033: LD_INT 18
23035: DOUBLE
23036: EQUAL
23037: IFTRUE 23041
23039: GO 23189
23041: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23042: LD_ADDR_VAR 0 1
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 4
23052: PUSH
23053: LD_INT 5
23055: PUSH
23056: LD_INT 7
23058: PUSH
23059: LD_INT 11
23061: PUSH
23062: LD_INT 12
23064: PUSH
23065: LD_INT 15
23067: PUSH
23068: LD_INT 16
23070: PUSH
23071: LD_INT 20
23073: PUSH
23074: LD_INT 21
23076: PUSH
23077: LD_INT 22
23079: PUSH
23080: LD_INT 23
23082: PUSH
23083: LD_INT 25
23085: PUSH
23086: LD_INT 26
23088: PUSH
23089: LD_INT 30
23091: PUSH
23092: LD_INT 31
23094: PUSH
23095: LD_INT 32
23097: PUSH
23098: LD_INT 33
23100: PUSH
23101: LD_INT 34
23103: PUSH
23104: LD_INT 35
23106: PUSH
23107: LD_INT 36
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 101
23135: PUSH
23136: LD_INT 102
23138: PUSH
23139: LD_INT 103
23141: PUSH
23142: LD_INT 106
23144: PUSH
23145: LD_INT 108
23147: PUSH
23148: LD_INT 112
23150: PUSH
23151: LD_INT 113
23153: PUSH
23154: LD_INT 114
23156: PUSH
23157: LD_INT 115
23159: PUSH
23160: LD_INT 116
23162: PUSH
23163: LD_INT 117
23165: PUSH
23166: LD_INT 118
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: ST_TO_ADDR
23187: GO 23430
23189: LD_INT 19
23191: DOUBLE
23192: EQUAL
23193: IFTRUE 23197
23195: GO 23429
23197: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23198: LD_ADDR_VAR 0 1
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: LD_INT 2
23208: PUSH
23209: LD_INT 3
23211: PUSH
23212: LD_INT 4
23214: PUSH
23215: LD_INT 5
23217: PUSH
23218: LD_INT 6
23220: PUSH
23221: LD_INT 7
23223: PUSH
23224: LD_INT 8
23226: PUSH
23227: LD_INT 9
23229: PUSH
23230: LD_INT 10
23232: PUSH
23233: LD_INT 11
23235: PUSH
23236: LD_INT 12
23238: PUSH
23239: LD_INT 13
23241: PUSH
23242: LD_INT 14
23244: PUSH
23245: LD_INT 15
23247: PUSH
23248: LD_INT 16
23250: PUSH
23251: LD_INT 17
23253: PUSH
23254: LD_INT 18
23256: PUSH
23257: LD_INT 19
23259: PUSH
23260: LD_INT 20
23262: PUSH
23263: LD_INT 21
23265: PUSH
23266: LD_INT 22
23268: PUSH
23269: LD_INT 23
23271: PUSH
23272: LD_INT 24
23274: PUSH
23275: LD_INT 25
23277: PUSH
23278: LD_INT 26
23280: PUSH
23281: LD_INT 27
23283: PUSH
23284: LD_INT 28
23286: PUSH
23287: LD_INT 29
23289: PUSH
23290: LD_INT 30
23292: PUSH
23293: LD_INT 31
23295: PUSH
23296: LD_INT 32
23298: PUSH
23299: LD_INT 33
23301: PUSH
23302: LD_INT 34
23304: PUSH
23305: LD_INT 35
23307: PUSH
23308: LD_INT 36
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 101
23351: PUSH
23352: LD_INT 102
23354: PUSH
23355: LD_INT 103
23357: PUSH
23358: LD_INT 104
23360: PUSH
23361: LD_INT 105
23363: PUSH
23364: LD_INT 106
23366: PUSH
23367: LD_INT 107
23369: PUSH
23370: LD_INT 108
23372: PUSH
23373: LD_INT 109
23375: PUSH
23376: LD_INT 110
23378: PUSH
23379: LD_INT 111
23381: PUSH
23382: LD_INT 112
23384: PUSH
23385: LD_INT 113
23387: PUSH
23388: LD_INT 114
23390: PUSH
23391: LD_INT 115
23393: PUSH
23394: LD_INT 116
23396: PUSH
23397: LD_INT 117
23399: PUSH
23400: LD_INT 118
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: ST_TO_ADDR
23427: GO 23430
23429: POP
// end else
23430: GO 23661
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23432: LD_ADDR_VAR 0 1
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: LD_INT 2
23442: PUSH
23443: LD_INT 3
23445: PUSH
23446: LD_INT 4
23448: PUSH
23449: LD_INT 5
23451: PUSH
23452: LD_INT 6
23454: PUSH
23455: LD_INT 7
23457: PUSH
23458: LD_INT 8
23460: PUSH
23461: LD_INT 9
23463: PUSH
23464: LD_INT 10
23466: PUSH
23467: LD_INT 11
23469: PUSH
23470: LD_INT 12
23472: PUSH
23473: LD_INT 13
23475: PUSH
23476: LD_INT 14
23478: PUSH
23479: LD_INT 15
23481: PUSH
23482: LD_INT 16
23484: PUSH
23485: LD_INT 17
23487: PUSH
23488: LD_INT 18
23490: PUSH
23491: LD_INT 19
23493: PUSH
23494: LD_INT 20
23496: PUSH
23497: LD_INT 21
23499: PUSH
23500: LD_INT 22
23502: PUSH
23503: LD_INT 23
23505: PUSH
23506: LD_INT 24
23508: PUSH
23509: LD_INT 25
23511: PUSH
23512: LD_INT 26
23514: PUSH
23515: LD_INT 27
23517: PUSH
23518: LD_INT 28
23520: PUSH
23521: LD_INT 29
23523: PUSH
23524: LD_INT 30
23526: PUSH
23527: LD_INT 31
23529: PUSH
23530: LD_INT 32
23532: PUSH
23533: LD_INT 33
23535: PUSH
23536: LD_INT 34
23538: PUSH
23539: LD_INT 35
23541: PUSH
23542: LD_INT 36
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 101
23585: PUSH
23586: LD_INT 102
23588: PUSH
23589: LD_INT 103
23591: PUSH
23592: LD_INT 104
23594: PUSH
23595: LD_INT 105
23597: PUSH
23598: LD_INT 106
23600: PUSH
23601: LD_INT 107
23603: PUSH
23604: LD_INT 108
23606: PUSH
23607: LD_INT 109
23609: PUSH
23610: LD_INT 110
23612: PUSH
23613: LD_INT 111
23615: PUSH
23616: LD_INT 112
23618: PUSH
23619: LD_INT 113
23621: PUSH
23622: LD_INT 114
23624: PUSH
23625: LD_INT 115
23627: PUSH
23628: LD_INT 116
23630: PUSH
23631: LD_INT 117
23633: PUSH
23634: LD_INT 118
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: ST_TO_ADDR
// if result then
23661: LD_VAR 0 1
23665: IFFALSE 23954
// begin normal :=  ;
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_STRING 
23674: ST_TO_ADDR
// hardcore :=  ;
23675: LD_ADDR_VAR 0 4
23679: PUSH
23680: LD_STRING 
23682: ST_TO_ADDR
// for i = 1 to normalCounter do
23683: LD_ADDR_VAR 0 5
23687: PUSH
23688: DOUBLE
23689: LD_INT 1
23691: DEC
23692: ST_TO_ADDR
23693: LD_EXP 67
23697: PUSH
23698: FOR_TO
23699: IFFALSE 23800
// begin tmp := 0 ;
23701: LD_ADDR_VAR 0 2
23705: PUSH
23706: LD_STRING 0
23708: ST_TO_ADDR
// if result [ 1 ] then
23709: LD_VAR 0 1
23713: PUSH
23714: LD_INT 1
23716: ARRAY
23717: IFFALSE 23782
// if result [ 1 ] [ 1 ] = i then
23719: LD_VAR 0 1
23723: PUSH
23724: LD_INT 1
23726: ARRAY
23727: PUSH
23728: LD_INT 1
23730: ARRAY
23731: PUSH
23732: LD_VAR 0 5
23736: EQUAL
23737: IFFALSE 23782
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23739: LD_ADDR_VAR 0 1
23743: PUSH
23744: LD_VAR 0 1
23748: PPUSH
23749: LD_INT 1
23751: PPUSH
23752: LD_VAR 0 1
23756: PUSH
23757: LD_INT 1
23759: ARRAY
23760: PPUSH
23761: LD_INT 1
23763: PPUSH
23764: CALL_OW 3
23768: PPUSH
23769: CALL_OW 1
23773: ST_TO_ADDR
// tmp := 1 ;
23774: LD_ADDR_VAR 0 2
23778: PUSH
23779: LD_STRING 1
23781: ST_TO_ADDR
// end ; normal := normal & tmp ;
23782: LD_ADDR_VAR 0 3
23786: PUSH
23787: LD_VAR 0 3
23791: PUSH
23792: LD_VAR 0 2
23796: STR
23797: ST_TO_ADDR
// end ;
23798: GO 23698
23800: POP
23801: POP
// for i = 1 to hardcoreCounter do
23802: LD_ADDR_VAR 0 5
23806: PUSH
23807: DOUBLE
23808: LD_INT 1
23810: DEC
23811: ST_TO_ADDR
23812: LD_EXP 68
23816: PUSH
23817: FOR_TO
23818: IFFALSE 23923
// begin tmp := 0 ;
23820: LD_ADDR_VAR 0 2
23824: PUSH
23825: LD_STRING 0
23827: ST_TO_ADDR
// if result [ 2 ] then
23828: LD_VAR 0 1
23832: PUSH
23833: LD_INT 2
23835: ARRAY
23836: IFFALSE 23905
// if result [ 2 ] [ 1 ] = 100 + i then
23838: LD_VAR 0 1
23842: PUSH
23843: LD_INT 2
23845: ARRAY
23846: PUSH
23847: LD_INT 1
23849: ARRAY
23850: PUSH
23851: LD_INT 100
23853: PUSH
23854: LD_VAR 0 5
23858: PLUS
23859: EQUAL
23860: IFFALSE 23905
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23862: LD_ADDR_VAR 0 1
23866: PUSH
23867: LD_VAR 0 1
23871: PPUSH
23872: LD_INT 2
23874: PPUSH
23875: LD_VAR 0 1
23879: PUSH
23880: LD_INT 2
23882: ARRAY
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: CALL_OW 3
23891: PPUSH
23892: CALL_OW 1
23896: ST_TO_ADDR
// tmp := 1 ;
23897: LD_ADDR_VAR 0 2
23901: PUSH
23902: LD_STRING 1
23904: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23905: LD_ADDR_VAR 0 4
23909: PUSH
23910: LD_VAR 0 4
23914: PUSH
23915: LD_VAR 0 2
23919: STR
23920: ST_TO_ADDR
// end ;
23921: GO 23817
23923: POP
23924: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23925: LD_STRING getStreamItemsFromMission("
23927: PUSH
23928: LD_VAR 0 3
23932: STR
23933: PUSH
23934: LD_STRING ","
23936: STR
23937: PUSH
23938: LD_VAR 0 4
23942: STR
23943: PUSH
23944: LD_STRING ")
23946: STR
23947: PPUSH
23948: CALL_OW 559
// end else
23952: GO 23961
// ToLua ( getStreamItemsFromMission("","") ) ;
23954: LD_STRING getStreamItemsFromMission("","")
23956: PPUSH
23957: CALL_OW 559
// end ;
23961: LD_VAR 0 1
23965: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23966: LD_EXP 66
23970: PUSH
23971: LD_EXP 71
23975: AND
23976: IFFALSE 24100
23978: GO 23980
23980: DISABLE
23981: LD_INT 0
23983: PPUSH
23984: PPUSH
// begin enable ;
23985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23986: LD_ADDR_VAR 0 2
23990: PUSH
23991: LD_INT 22
23993: PUSH
23994: LD_OWVAR 2
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: LD_INT 34
24008: PUSH
24009: LD_INT 7
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 34
24018: PUSH
24019: LD_INT 45
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 34
24028: PUSH
24029: LD_INT 28
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 34
24038: PUSH
24039: LD_INT 47
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PPUSH
24057: CALL_OW 69
24061: ST_TO_ADDR
// if not tmp then
24062: LD_VAR 0 2
24066: NOT
24067: IFFALSE 24071
// exit ;
24069: GO 24100
// for i in tmp do
24071: LD_ADDR_VAR 0 1
24075: PUSH
24076: LD_VAR 0 2
24080: PUSH
24081: FOR_IN
24082: IFFALSE 24098
// begin SetLives ( i , 0 ) ;
24084: LD_VAR 0 1
24088: PPUSH
24089: LD_INT 0
24091: PPUSH
24092: CALL_OW 234
// end ;
24096: GO 24081
24098: POP
24099: POP
// end ;
24100: PPOPN 2
24102: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24103: LD_EXP 66
24107: PUSH
24108: LD_EXP 72
24112: AND
24113: IFFALSE 24197
24115: GO 24117
24117: DISABLE
24118: LD_INT 0
24120: PPUSH
24121: PPUSH
// begin enable ;
24122: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24123: LD_ADDR_VAR 0 2
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_OWVAR 2
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 32
24142: PUSH
24143: LD_INT 3
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PPUSH
24154: CALL_OW 69
24158: ST_TO_ADDR
// if not tmp then
24159: LD_VAR 0 2
24163: NOT
24164: IFFALSE 24168
// exit ;
24166: GO 24197
// for i in tmp do
24168: LD_ADDR_VAR 0 1
24172: PUSH
24173: LD_VAR 0 2
24177: PUSH
24178: FOR_IN
24179: IFFALSE 24195
// begin SetLives ( i , 0 ) ;
24181: LD_VAR 0 1
24185: PPUSH
24186: LD_INT 0
24188: PPUSH
24189: CALL_OW 234
// end ;
24193: GO 24178
24195: POP
24196: POP
// end ;
24197: PPOPN 2
24199: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24200: LD_EXP 66
24204: PUSH
24205: LD_EXP 69
24209: AND
24210: IFFALSE 24303
24212: GO 24214
24214: DISABLE
24215: LD_INT 0
24217: PPUSH
// begin enable ;
24218: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24219: LD_ADDR_VAR 0 1
24223: PUSH
24224: LD_INT 22
24226: PUSH
24227: LD_OWVAR 2
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 25
24241: PUSH
24242: LD_INT 5
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 25
24251: PUSH
24252: LD_INT 9
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 25
24261: PUSH
24262: LD_INT 8
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PPUSH
24279: CALL_OW 69
24283: PUSH
24284: FOR_IN
24285: IFFALSE 24301
// begin SetClass ( i , 1 ) ;
24287: LD_VAR 0 1
24291: PPUSH
24292: LD_INT 1
24294: PPUSH
24295: CALL_OW 336
// end ;
24299: GO 24284
24301: POP
24302: POP
// end ;
24303: PPOPN 1
24305: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24306: LD_EXP 66
24310: PUSH
24311: LD_EXP 70
24315: AND
24316: PUSH
24317: LD_OWVAR 65
24321: PUSH
24322: LD_INT 7
24324: LESS
24325: AND
24326: IFFALSE 24340
24328: GO 24330
24330: DISABLE
// begin enable ;
24331: ENABLE
// game_speed := 7 ;
24332: LD_ADDR_OWVAR 65
24336: PUSH
24337: LD_INT 7
24339: ST_TO_ADDR
// end ;
24340: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24341: LD_EXP 66
24345: PUSH
24346: LD_EXP 73
24350: AND
24351: IFFALSE 24553
24353: GO 24355
24355: DISABLE
24356: LD_INT 0
24358: PPUSH
24359: PPUSH
24360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24361: LD_ADDR_VAR 0 3
24365: PUSH
24366: LD_INT 81
24368: PUSH
24369: LD_OWVAR 2
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 21
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PPUSH
24392: CALL_OW 69
24396: ST_TO_ADDR
// if not tmp then
24397: LD_VAR 0 3
24401: NOT
24402: IFFALSE 24406
// exit ;
24404: GO 24553
// if tmp > 5 then
24406: LD_VAR 0 3
24410: PUSH
24411: LD_INT 5
24413: GREATER
24414: IFFALSE 24426
// k := 5 else
24416: LD_ADDR_VAR 0 2
24420: PUSH
24421: LD_INT 5
24423: ST_TO_ADDR
24424: GO 24436
// k := tmp ;
24426: LD_ADDR_VAR 0 2
24430: PUSH
24431: LD_VAR 0 3
24435: ST_TO_ADDR
// for i := 1 to k do
24436: LD_ADDR_VAR 0 1
24440: PUSH
24441: DOUBLE
24442: LD_INT 1
24444: DEC
24445: ST_TO_ADDR
24446: LD_VAR 0 2
24450: PUSH
24451: FOR_TO
24452: IFFALSE 24551
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24454: LD_VAR 0 3
24458: PUSH
24459: LD_VAR 0 1
24463: ARRAY
24464: PPUSH
24465: LD_VAR 0 1
24469: PUSH
24470: LD_INT 4
24472: MOD
24473: PUSH
24474: LD_INT 1
24476: PLUS
24477: PPUSH
24478: CALL_OW 259
24482: PUSH
24483: LD_INT 10
24485: LESS
24486: IFFALSE 24549
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24488: LD_VAR 0 3
24492: PUSH
24493: LD_VAR 0 1
24497: ARRAY
24498: PPUSH
24499: LD_VAR 0 1
24503: PUSH
24504: LD_INT 4
24506: MOD
24507: PUSH
24508: LD_INT 1
24510: PLUS
24511: PPUSH
24512: LD_VAR 0 3
24516: PUSH
24517: LD_VAR 0 1
24521: ARRAY
24522: PPUSH
24523: LD_VAR 0 1
24527: PUSH
24528: LD_INT 4
24530: MOD
24531: PUSH
24532: LD_INT 1
24534: PLUS
24535: PPUSH
24536: CALL_OW 259
24540: PUSH
24541: LD_INT 1
24543: PLUS
24544: PPUSH
24545: CALL_OW 237
24549: GO 24451
24551: POP
24552: POP
// end ;
24553: PPOPN 3
24555: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24556: LD_EXP 66
24560: PUSH
24561: LD_EXP 74
24565: AND
24566: IFFALSE 24586
24568: GO 24570
24570: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24571: LD_INT 4
24573: PPUSH
24574: LD_OWVAR 2
24578: PPUSH
24579: LD_INT 0
24581: PPUSH
24582: CALL_OW 324
24586: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24587: LD_EXP 66
24591: PUSH
24592: LD_EXP 103
24596: AND
24597: IFFALSE 24617
24599: GO 24601
24601: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24602: LD_INT 19
24604: PPUSH
24605: LD_OWVAR 2
24609: PPUSH
24610: LD_INT 0
24612: PPUSH
24613: CALL_OW 324
24617: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24618: LD_EXP 66
24622: PUSH
24623: LD_EXP 75
24627: AND
24628: IFFALSE 24730
24630: GO 24632
24632: DISABLE
24633: LD_INT 0
24635: PPUSH
24636: PPUSH
// begin enable ;
24637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24638: LD_ADDR_VAR 0 2
24642: PUSH
24643: LD_INT 22
24645: PUSH
24646: LD_OWVAR 2
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 34
24660: PUSH
24661: LD_INT 11
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 34
24670: PUSH
24671: LD_INT 30
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: LIST
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PPUSH
24687: CALL_OW 69
24691: ST_TO_ADDR
// if not tmp then
24692: LD_VAR 0 2
24696: NOT
24697: IFFALSE 24701
// exit ;
24699: GO 24730
// for i in tmp do
24701: LD_ADDR_VAR 0 1
24705: PUSH
24706: LD_VAR 0 2
24710: PUSH
24711: FOR_IN
24712: IFFALSE 24728
// begin SetLives ( i , 0 ) ;
24714: LD_VAR 0 1
24718: PPUSH
24719: LD_INT 0
24721: PPUSH
24722: CALL_OW 234
// end ;
24726: GO 24711
24728: POP
24729: POP
// end ;
24730: PPOPN 2
24732: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24733: LD_EXP 66
24737: PUSH
24738: LD_EXP 76
24742: AND
24743: IFFALSE 24763
24745: GO 24747
24747: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24748: LD_INT 32
24750: PPUSH
24751: LD_OWVAR 2
24755: PPUSH
24756: LD_INT 0
24758: PPUSH
24759: CALL_OW 324
24763: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24764: LD_EXP 66
24768: PUSH
24769: LD_EXP 77
24773: AND
24774: IFFALSE 24955
24776: GO 24778
24778: DISABLE
24779: LD_INT 0
24781: PPUSH
24782: PPUSH
24783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24784: LD_ADDR_VAR 0 2
24788: PUSH
24789: LD_INT 22
24791: PUSH
24792: LD_OWVAR 2
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 33
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PPUSH
24815: CALL_OW 69
24819: ST_TO_ADDR
// if not tmp then
24820: LD_VAR 0 2
24824: NOT
24825: IFFALSE 24829
// exit ;
24827: GO 24955
// side := 0 ;
24829: LD_ADDR_VAR 0 3
24833: PUSH
24834: LD_INT 0
24836: ST_TO_ADDR
// for i := 1 to 8 do
24837: LD_ADDR_VAR 0 1
24841: PUSH
24842: DOUBLE
24843: LD_INT 1
24845: DEC
24846: ST_TO_ADDR
24847: LD_INT 8
24849: PUSH
24850: FOR_TO
24851: IFFALSE 24899
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24853: LD_OWVAR 2
24857: PUSH
24858: LD_VAR 0 1
24862: NONEQUAL
24863: PUSH
24864: LD_OWVAR 2
24868: PPUSH
24869: LD_VAR 0 1
24873: PPUSH
24874: CALL_OW 81
24878: PUSH
24879: LD_INT 2
24881: EQUAL
24882: AND
24883: IFFALSE 24897
// begin side := i ;
24885: LD_ADDR_VAR 0 3
24889: PUSH
24890: LD_VAR 0 1
24894: ST_TO_ADDR
// break ;
24895: GO 24899
// end ;
24897: GO 24850
24899: POP
24900: POP
// if not side then
24901: LD_VAR 0 3
24905: NOT
24906: IFFALSE 24910
// exit ;
24908: GO 24955
// for i := 1 to tmp do
24910: LD_ADDR_VAR 0 1
24914: PUSH
24915: DOUBLE
24916: LD_INT 1
24918: DEC
24919: ST_TO_ADDR
24920: LD_VAR 0 2
24924: PUSH
24925: FOR_TO
24926: IFFALSE 24953
// if Prob ( 60 ) then
24928: LD_INT 60
24930: PPUSH
24931: CALL_OW 13
24935: IFFALSE 24951
// SetSide ( i , side ) ;
24937: LD_VAR 0 1
24941: PPUSH
24942: LD_VAR 0 3
24946: PPUSH
24947: CALL_OW 235
24951: GO 24925
24953: POP
24954: POP
// end ;
24955: PPOPN 3
24957: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24958: LD_EXP 66
24962: PUSH
24963: LD_EXP 79
24967: AND
24968: IFFALSE 25087
24970: GO 24972
24972: DISABLE
24973: LD_INT 0
24975: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24976: LD_ADDR_VAR 0 1
24980: PUSH
24981: LD_INT 22
24983: PUSH
24984: LD_OWVAR 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 21
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: LD_INT 23
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: LIST
25024: PPUSH
25025: CALL_OW 69
25029: PUSH
25030: FOR_IN
25031: IFFALSE 25085
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25033: LD_VAR 0 1
25037: PPUSH
25038: CALL_OW 257
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: LD_INT 2
25048: PUSH
25049: LD_INT 3
25051: PUSH
25052: LD_INT 4
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: IN
25061: IFFALSE 25083
// SetClass ( un , rand ( 1 , 4 ) ) ;
25063: LD_VAR 0 1
25067: PPUSH
25068: LD_INT 1
25070: PPUSH
25071: LD_INT 4
25073: PPUSH
25074: CALL_OW 12
25078: PPUSH
25079: CALL_OW 336
25083: GO 25030
25085: POP
25086: POP
// end ;
25087: PPOPN 1
25089: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25090: LD_EXP 66
25094: PUSH
25095: LD_EXP 78
25099: AND
25100: IFFALSE 25179
25102: GO 25104
25104: DISABLE
25105: LD_INT 0
25107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25108: LD_ADDR_VAR 0 1
25112: PUSH
25113: LD_INT 22
25115: PUSH
25116: LD_OWVAR 2
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 21
25127: PUSH
25128: LD_INT 3
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PPUSH
25139: CALL_OW 69
25143: ST_TO_ADDR
// if not tmp then
25144: LD_VAR 0 1
25148: NOT
25149: IFFALSE 25153
// exit ;
25151: GO 25179
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25153: LD_VAR 0 1
25157: PUSH
25158: LD_INT 1
25160: PPUSH
25161: LD_VAR 0 1
25165: PPUSH
25166: CALL_OW 12
25170: ARRAY
25171: PPUSH
25172: LD_INT 100
25174: PPUSH
25175: CALL_OW 234
// end ;
25179: PPOPN 1
25181: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25182: LD_EXP 66
25186: PUSH
25187: LD_EXP 80
25191: AND
25192: IFFALSE 25290
25194: GO 25196
25196: DISABLE
25197: LD_INT 0
25199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25200: LD_ADDR_VAR 0 1
25204: PUSH
25205: LD_INT 22
25207: PUSH
25208: LD_OWVAR 2
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 21
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: ST_TO_ADDR
// if not tmp then
25236: LD_VAR 0 1
25240: NOT
25241: IFFALSE 25245
// exit ;
25243: GO 25290
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25245: LD_VAR 0 1
25249: PUSH
25250: LD_INT 1
25252: PPUSH
25253: LD_VAR 0 1
25257: PPUSH
25258: CALL_OW 12
25262: ARRAY
25263: PPUSH
25264: LD_INT 1
25266: PPUSH
25267: LD_INT 4
25269: PPUSH
25270: CALL_OW 12
25274: PPUSH
25275: LD_INT 3000
25277: PPUSH
25278: LD_INT 9000
25280: PPUSH
25281: CALL_OW 12
25285: PPUSH
25286: CALL_OW 492
// end ;
25290: PPOPN 1
25292: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25293: LD_EXP 66
25297: PUSH
25298: LD_EXP 81
25302: AND
25303: IFFALSE 25323
25305: GO 25307
25307: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25308: LD_INT 1
25310: PPUSH
25311: LD_OWVAR 2
25315: PPUSH
25316: LD_INT 0
25318: PPUSH
25319: CALL_OW 324
25323: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25324: LD_EXP 66
25328: PUSH
25329: LD_EXP 82
25333: AND
25334: IFFALSE 25417
25336: GO 25338
25338: DISABLE
25339: LD_INT 0
25341: PPUSH
25342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25343: LD_ADDR_VAR 0 2
25347: PUSH
25348: LD_INT 22
25350: PUSH
25351: LD_OWVAR 2
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 21
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PPUSH
25374: CALL_OW 69
25378: ST_TO_ADDR
// if not tmp then
25379: LD_VAR 0 2
25383: NOT
25384: IFFALSE 25388
// exit ;
25386: GO 25417
// for i in tmp do
25388: LD_ADDR_VAR 0 1
25392: PUSH
25393: LD_VAR 0 2
25397: PUSH
25398: FOR_IN
25399: IFFALSE 25415
// SetBLevel ( i , 10 ) ;
25401: LD_VAR 0 1
25405: PPUSH
25406: LD_INT 10
25408: PPUSH
25409: CALL_OW 241
25413: GO 25398
25415: POP
25416: POP
// end ;
25417: PPOPN 2
25419: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25420: LD_EXP 66
25424: PUSH
25425: LD_EXP 83
25429: AND
25430: IFFALSE 25541
25432: GO 25434
25434: DISABLE
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
25439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25440: LD_ADDR_VAR 0 3
25444: PUSH
25445: LD_INT 22
25447: PUSH
25448: LD_OWVAR 2
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 25
25459: PUSH
25460: LD_INT 1
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PPUSH
25471: CALL_OW 69
25475: ST_TO_ADDR
// if not tmp then
25476: LD_VAR 0 3
25480: NOT
25481: IFFALSE 25485
// exit ;
25483: GO 25541
// un := tmp [ rand ( 1 , tmp ) ] ;
25485: LD_ADDR_VAR 0 2
25489: PUSH
25490: LD_VAR 0 3
25494: PUSH
25495: LD_INT 1
25497: PPUSH
25498: LD_VAR 0 3
25502: PPUSH
25503: CALL_OW 12
25507: ARRAY
25508: ST_TO_ADDR
// if Crawls ( un ) then
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 318
25518: IFFALSE 25529
// ComWalk ( un ) ;
25520: LD_VAR 0 2
25524: PPUSH
25525: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25529: LD_VAR 0 2
25533: PPUSH
25534: LD_INT 5
25536: PPUSH
25537: CALL_OW 336
// end ;
25541: PPOPN 3
25543: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25544: LD_EXP 66
25548: PUSH
25549: LD_EXP 84
25553: AND
25554: PUSH
25555: LD_OWVAR 67
25559: PUSH
25560: LD_INT 4
25562: LESS
25563: AND
25564: IFFALSE 25583
25566: GO 25568
25568: DISABLE
// begin Difficulty := Difficulty + 1 ;
25569: LD_ADDR_OWVAR 67
25573: PUSH
25574: LD_OWVAR 67
25578: PUSH
25579: LD_INT 1
25581: PLUS
25582: ST_TO_ADDR
// end ;
25583: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25584: LD_EXP 66
25588: PUSH
25589: LD_EXP 85
25593: AND
25594: IFFALSE 25697
25596: GO 25598
25598: DISABLE
25599: LD_INT 0
25601: PPUSH
// begin for i := 1 to 5 do
25602: LD_ADDR_VAR 0 1
25606: PUSH
25607: DOUBLE
25608: LD_INT 1
25610: DEC
25611: ST_TO_ADDR
25612: LD_INT 5
25614: PUSH
25615: FOR_TO
25616: IFFALSE 25695
// begin uc_nation := nation_nature ;
25618: LD_ADDR_OWVAR 21
25622: PUSH
25623: LD_INT 0
25625: ST_TO_ADDR
// uc_side := 0 ;
25626: LD_ADDR_OWVAR 20
25630: PUSH
25631: LD_INT 0
25633: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25634: LD_ADDR_OWVAR 29
25638: PUSH
25639: LD_INT 12
25641: PUSH
25642: LD_INT 12
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: ST_TO_ADDR
// hc_agressivity := 20 ;
25649: LD_ADDR_OWVAR 35
25653: PUSH
25654: LD_INT 20
25656: ST_TO_ADDR
// hc_class := class_tiger ;
25657: LD_ADDR_OWVAR 28
25661: PUSH
25662: LD_INT 14
25664: ST_TO_ADDR
// hc_gallery :=  ;
25665: LD_ADDR_OWVAR 33
25669: PUSH
25670: LD_STRING 
25672: ST_TO_ADDR
// hc_name :=  ;
25673: LD_ADDR_OWVAR 26
25677: PUSH
25678: LD_STRING 
25680: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25681: CALL_OW 44
25685: PPUSH
25686: LD_INT 0
25688: PPUSH
25689: CALL_OW 51
// end ;
25693: GO 25615
25695: POP
25696: POP
// end ;
25697: PPOPN 1
25699: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25700: LD_EXP 66
25704: PUSH
25705: LD_EXP 86
25709: AND
25710: IFFALSE 25719
25712: GO 25714
25714: DISABLE
// StreamSibBomb ;
25715: CALL 25720 0 0
25719: END
// export function StreamSibBomb ; var i , x , y ; begin
25720: LD_INT 0
25722: PPUSH
25723: PPUSH
25724: PPUSH
25725: PPUSH
// result := false ;
25726: LD_ADDR_VAR 0 1
25730: PUSH
25731: LD_INT 0
25733: ST_TO_ADDR
// for i := 1 to 16 do
25734: LD_ADDR_VAR 0 2
25738: PUSH
25739: DOUBLE
25740: LD_INT 1
25742: DEC
25743: ST_TO_ADDR
25744: LD_INT 16
25746: PUSH
25747: FOR_TO
25748: IFFALSE 25947
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25750: LD_ADDR_VAR 0 3
25754: PUSH
25755: LD_INT 10
25757: PUSH
25758: LD_INT 20
25760: PUSH
25761: LD_INT 30
25763: PUSH
25764: LD_INT 40
25766: PUSH
25767: LD_INT 50
25769: PUSH
25770: LD_INT 60
25772: PUSH
25773: LD_INT 70
25775: PUSH
25776: LD_INT 80
25778: PUSH
25779: LD_INT 90
25781: PUSH
25782: LD_INT 100
25784: PUSH
25785: LD_INT 110
25787: PUSH
25788: LD_INT 120
25790: PUSH
25791: LD_INT 130
25793: PUSH
25794: LD_INT 140
25796: PUSH
25797: LD_INT 150
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: PPUSH
25820: LD_INT 15
25822: PPUSH
25823: CALL_OW 12
25827: ARRAY
25828: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25829: LD_ADDR_VAR 0 4
25833: PUSH
25834: LD_INT 10
25836: PUSH
25837: LD_INT 20
25839: PUSH
25840: LD_INT 30
25842: PUSH
25843: LD_INT 40
25845: PUSH
25846: LD_INT 50
25848: PUSH
25849: LD_INT 60
25851: PUSH
25852: LD_INT 70
25854: PUSH
25855: LD_INT 80
25857: PUSH
25858: LD_INT 90
25860: PUSH
25861: LD_INT 100
25863: PUSH
25864: LD_INT 110
25866: PUSH
25867: LD_INT 120
25869: PUSH
25870: LD_INT 130
25872: PUSH
25873: LD_INT 140
25875: PUSH
25876: LD_INT 150
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: PPUSH
25899: LD_INT 15
25901: PPUSH
25902: CALL_OW 12
25906: ARRAY
25907: ST_TO_ADDR
// if ValidHex ( x , y ) then
25908: LD_VAR 0 3
25912: PPUSH
25913: LD_VAR 0 4
25917: PPUSH
25918: CALL_OW 488
25922: IFFALSE 25945
// begin result := [ x , y ] ;
25924: LD_ADDR_VAR 0 1
25928: PUSH
25929: LD_VAR 0 3
25933: PUSH
25934: LD_VAR 0 4
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: ST_TO_ADDR
// break ;
25943: GO 25947
// end ; end ;
25945: GO 25747
25947: POP
25948: POP
// if result then
25949: LD_VAR 0 1
25953: IFFALSE 26013
// begin ToLua ( playSibBomb() ) ;
25955: LD_STRING playSibBomb()
25957: PPUSH
25958: CALL_OW 559
// wait ( 0 0$14 ) ;
25962: LD_INT 490
25964: PPUSH
25965: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25969: LD_VAR 0 1
25973: PUSH
25974: LD_INT 1
25976: ARRAY
25977: PPUSH
25978: LD_VAR 0 1
25982: PUSH
25983: LD_INT 2
25985: ARRAY
25986: PPUSH
25987: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25991: LD_VAR 0 1
25995: PUSH
25996: LD_INT 1
25998: ARRAY
25999: PPUSH
26000: LD_VAR 0 1
26004: PUSH
26005: LD_INT 2
26007: ARRAY
26008: PPUSH
26009: CALL_OW 429
// end ; end ;
26013: LD_VAR 0 1
26017: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26018: LD_EXP 66
26022: PUSH
26023: LD_EXP 88
26027: AND
26028: IFFALSE 26040
26030: GO 26032
26032: DISABLE
// YouLost (  ) ;
26033: LD_STRING 
26035: PPUSH
26036: CALL_OW 104
26040: END
// every 0 0$1 trigger StreamModeActive and sFog do
26041: LD_EXP 66
26045: PUSH
26046: LD_EXP 87
26050: AND
26051: IFFALSE 26065
26053: GO 26055
26055: DISABLE
// FogOff ( your_side ) ;
26056: LD_OWVAR 2
26060: PPUSH
26061: CALL_OW 344
26065: END
// every 0 0$1 trigger StreamModeActive and sSun do
26066: LD_EXP 66
26070: PUSH
26071: LD_EXP 89
26075: AND
26076: IFFALSE 26104
26078: GO 26080
26080: DISABLE
// begin solar_recharge_percent := 0 ;
26081: LD_ADDR_OWVAR 79
26085: PUSH
26086: LD_INT 0
26088: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26089: LD_INT 10500
26091: PPUSH
26092: CALL_OW 67
// solar_recharge_percent := 100 ;
26096: LD_ADDR_OWVAR 79
26100: PUSH
26101: LD_INT 100
26103: ST_TO_ADDR
// end ;
26104: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26105: LD_EXP 66
26109: PUSH
26110: LD_EXP 90
26114: AND
26115: IFFALSE 26354
26117: GO 26119
26119: DISABLE
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
26124: PPUSH
// begin tmp := [ ] ;
26125: LD_ADDR_VAR 0 3
26129: PUSH
26130: EMPTY
26131: ST_TO_ADDR
// for i := 1 to 6 do
26132: LD_ADDR_VAR 0 1
26136: PUSH
26137: DOUBLE
26138: LD_INT 1
26140: DEC
26141: ST_TO_ADDR
26142: LD_INT 6
26144: PUSH
26145: FOR_TO
26146: IFFALSE 26251
// begin uc_nation := nation_nature ;
26148: LD_ADDR_OWVAR 21
26152: PUSH
26153: LD_INT 0
26155: ST_TO_ADDR
// uc_side := 0 ;
26156: LD_ADDR_OWVAR 20
26160: PUSH
26161: LD_INT 0
26163: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26164: LD_ADDR_OWVAR 29
26168: PUSH
26169: LD_INT 12
26171: PUSH
26172: LD_INT 12
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: ST_TO_ADDR
// hc_agressivity := 20 ;
26179: LD_ADDR_OWVAR 35
26183: PUSH
26184: LD_INT 20
26186: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26187: LD_ADDR_OWVAR 28
26191: PUSH
26192: LD_INT 17
26194: ST_TO_ADDR
// hc_gallery :=  ;
26195: LD_ADDR_OWVAR 33
26199: PUSH
26200: LD_STRING 
26202: ST_TO_ADDR
// hc_name :=  ;
26203: LD_ADDR_OWVAR 26
26207: PUSH
26208: LD_STRING 
26210: ST_TO_ADDR
// un := CreateHuman ;
26211: LD_ADDR_VAR 0 2
26215: PUSH
26216: CALL_OW 44
26220: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26221: LD_VAR 0 2
26225: PPUSH
26226: LD_INT 1
26228: PPUSH
26229: CALL_OW 51
// tmp := tmp ^ un ;
26233: LD_ADDR_VAR 0 3
26237: PUSH
26238: LD_VAR 0 3
26242: PUSH
26243: LD_VAR 0 2
26247: ADD
26248: ST_TO_ADDR
// end ;
26249: GO 26145
26251: POP
26252: POP
// repeat wait ( 0 0$1 ) ;
26253: LD_INT 35
26255: PPUSH
26256: CALL_OW 67
// for un in tmp do
26260: LD_ADDR_VAR 0 2
26264: PUSH
26265: LD_VAR 0 3
26269: PUSH
26270: FOR_IN
26271: IFFALSE 26345
// begin if IsDead ( un ) then
26273: LD_VAR 0 2
26277: PPUSH
26278: CALL_OW 301
26282: IFFALSE 26302
// begin tmp := tmp diff un ;
26284: LD_ADDR_VAR 0 3
26288: PUSH
26289: LD_VAR 0 3
26293: PUSH
26294: LD_VAR 0 2
26298: DIFF
26299: ST_TO_ADDR
// continue ;
26300: GO 26270
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26302: LD_VAR 0 2
26306: PPUSH
26307: LD_INT 3
26309: PUSH
26310: LD_INT 22
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PPUSH
26324: CALL_OW 69
26328: PPUSH
26329: LD_VAR 0 2
26333: PPUSH
26334: CALL_OW 74
26338: PPUSH
26339: CALL_OW 115
// end ;
26343: GO 26270
26345: POP
26346: POP
// until not tmp ;
26347: LD_VAR 0 3
26351: NOT
26352: IFFALSE 26253
// end ;
26354: PPOPN 3
26356: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26357: LD_EXP 66
26361: PUSH
26362: LD_EXP 91
26366: AND
26367: IFFALSE 26421
26369: GO 26371
26371: DISABLE
// begin ToLua ( displayTroll(); ) ;
26372: LD_STRING displayTroll();
26374: PPUSH
26375: CALL_OW 559
// wait ( 3 3$00 ) ;
26379: LD_INT 6300
26381: PPUSH
26382: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26386: LD_STRING hideTroll();
26388: PPUSH
26389: CALL_OW 559
// wait ( 1 1$00 ) ;
26393: LD_INT 2100
26395: PPUSH
26396: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26400: LD_STRING displayTroll();
26402: PPUSH
26403: CALL_OW 559
// wait ( 1 1$00 ) ;
26407: LD_INT 2100
26409: PPUSH
26410: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26414: LD_STRING hideTroll();
26416: PPUSH
26417: CALL_OW 559
// end ;
26421: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26422: LD_EXP 66
26426: PUSH
26427: LD_EXP 92
26431: AND
26432: IFFALSE 26495
26434: GO 26436
26436: DISABLE
26437: LD_INT 0
26439: PPUSH
// begin p := 0 ;
26440: LD_ADDR_VAR 0 1
26444: PUSH
26445: LD_INT 0
26447: ST_TO_ADDR
// repeat game_speed := 1 ;
26448: LD_ADDR_OWVAR 65
26452: PUSH
26453: LD_INT 1
26455: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26456: LD_INT 35
26458: PPUSH
26459: CALL_OW 67
// p := p + 1 ;
26463: LD_ADDR_VAR 0 1
26467: PUSH
26468: LD_VAR 0 1
26472: PUSH
26473: LD_INT 1
26475: PLUS
26476: ST_TO_ADDR
// until p >= 60 ;
26477: LD_VAR 0 1
26481: PUSH
26482: LD_INT 60
26484: GREATEREQUAL
26485: IFFALSE 26448
// game_speed := 4 ;
26487: LD_ADDR_OWVAR 65
26491: PUSH
26492: LD_INT 4
26494: ST_TO_ADDR
// end ;
26495: PPOPN 1
26497: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26498: LD_EXP 66
26502: PUSH
26503: LD_EXP 93
26507: AND
26508: IFFALSE 26654
26510: GO 26512
26512: DISABLE
26513: LD_INT 0
26515: PPUSH
26516: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26517: LD_ADDR_VAR 0 1
26521: PUSH
26522: LD_INT 22
26524: PUSH
26525: LD_OWVAR 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 2
26536: PUSH
26537: LD_INT 30
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 30
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PPUSH
26566: CALL_OW 69
26570: ST_TO_ADDR
// if not depot then
26571: LD_VAR 0 1
26575: NOT
26576: IFFALSE 26580
// exit ;
26578: GO 26654
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26580: LD_ADDR_VAR 0 2
26584: PUSH
26585: LD_VAR 0 1
26589: PUSH
26590: LD_INT 1
26592: PPUSH
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL_OW 12
26602: ARRAY
26603: PPUSH
26604: CALL_OW 274
26608: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26609: LD_VAR 0 2
26613: PPUSH
26614: LD_INT 1
26616: PPUSH
26617: LD_INT 0
26619: PPUSH
26620: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26624: LD_VAR 0 2
26628: PPUSH
26629: LD_INT 2
26631: PPUSH
26632: LD_INT 0
26634: PPUSH
26635: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26639: LD_VAR 0 2
26643: PPUSH
26644: LD_INT 3
26646: PPUSH
26647: LD_INT 0
26649: PPUSH
26650: CALL_OW 277
// end ;
26654: PPOPN 2
26656: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26657: LD_EXP 66
26661: PUSH
26662: LD_EXP 94
26666: AND
26667: IFFALSE 26764
26669: GO 26671
26671: DISABLE
26672: LD_INT 0
26674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26675: LD_ADDR_VAR 0 1
26679: PUSH
26680: LD_INT 22
26682: PUSH
26683: LD_OWVAR 2
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 21
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 3
26704: PUSH
26705: LD_INT 23
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: LIST
26723: PPUSH
26724: CALL_OW 69
26728: ST_TO_ADDR
// if not tmp then
26729: LD_VAR 0 1
26733: NOT
26734: IFFALSE 26738
// exit ;
26736: GO 26764
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26738: LD_VAR 0 1
26742: PUSH
26743: LD_INT 1
26745: PPUSH
26746: LD_VAR 0 1
26750: PPUSH
26751: CALL_OW 12
26755: ARRAY
26756: PPUSH
26757: LD_INT 200
26759: PPUSH
26760: CALL_OW 234
// end ;
26764: PPOPN 1
26766: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26767: LD_EXP 66
26771: PUSH
26772: LD_EXP 95
26776: AND
26777: IFFALSE 26856
26779: GO 26781
26781: DISABLE
26782: LD_INT 0
26784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26785: LD_ADDR_VAR 0 1
26789: PUSH
26790: LD_INT 22
26792: PUSH
26793: LD_OWVAR 2
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 21
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PPUSH
26816: CALL_OW 69
26820: ST_TO_ADDR
// if not tmp then
26821: LD_VAR 0 1
26825: NOT
26826: IFFALSE 26830
// exit ;
26828: GO 26856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26830: LD_VAR 0 1
26834: PUSH
26835: LD_INT 1
26837: PPUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 12
26847: ARRAY
26848: PPUSH
26849: LD_INT 60
26851: PPUSH
26852: CALL_OW 234
// end ;
26856: PPOPN 1
26858: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26859: LD_EXP 66
26863: PUSH
26864: LD_EXP 96
26868: AND
26869: IFFALSE 26968
26871: GO 26873
26873: DISABLE
26874: LD_INT 0
26876: PPUSH
26877: PPUSH
// begin enable ;
26878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26879: LD_ADDR_VAR 0 1
26883: PUSH
26884: LD_INT 22
26886: PUSH
26887: LD_OWVAR 2
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 61
26898: PUSH
26899: EMPTY
26900: LIST
26901: PUSH
26902: LD_INT 33
26904: PUSH
26905: LD_INT 2
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: PPUSH
26917: CALL_OW 69
26921: ST_TO_ADDR
// if not tmp then
26922: LD_VAR 0 1
26926: NOT
26927: IFFALSE 26931
// exit ;
26929: GO 26968
// for i in tmp do
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_VAR 0 1
26940: PUSH
26941: FOR_IN
26942: IFFALSE 26966
// if IsControledBy ( i ) then
26944: LD_VAR 0 2
26948: PPUSH
26949: CALL_OW 312
26953: IFFALSE 26964
// ComUnlink ( i ) ;
26955: LD_VAR 0 2
26959: PPUSH
26960: CALL_OW 136
26964: GO 26941
26966: POP
26967: POP
// end ;
26968: PPOPN 2
26970: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26971: LD_EXP 66
26975: PUSH
26976: LD_EXP 97
26980: AND
26981: IFFALSE 27121
26983: GO 26985
26985: DISABLE
26986: LD_INT 0
26988: PPUSH
26989: PPUSH
// begin ToLua ( displayPowell(); ) ;
26990: LD_STRING displayPowell();
26992: PPUSH
26993: CALL_OW 559
// uc_side := 0 ;
26997: LD_ADDR_OWVAR 20
27001: PUSH
27002: LD_INT 0
27004: ST_TO_ADDR
// uc_nation := 2 ;
27005: LD_ADDR_OWVAR 21
27009: PUSH
27010: LD_INT 2
27012: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27013: LD_ADDR_OWVAR 37
27017: PUSH
27018: LD_INT 14
27020: ST_TO_ADDR
// vc_engine := engine_siberite ;
27021: LD_ADDR_OWVAR 39
27025: PUSH
27026: LD_INT 3
27028: ST_TO_ADDR
// vc_control := control_apeman ;
27029: LD_ADDR_OWVAR 38
27033: PUSH
27034: LD_INT 5
27036: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27037: LD_ADDR_OWVAR 40
27041: PUSH
27042: LD_INT 29
27044: ST_TO_ADDR
// un := CreateVehicle ;
27045: LD_ADDR_VAR 0 2
27049: PUSH
27050: CALL_OW 45
27054: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27055: LD_VAR 0 2
27059: PPUSH
27060: LD_INT 1
27062: PPUSH
27063: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27067: LD_INT 35
27069: PPUSH
27070: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27074: LD_VAR 0 2
27078: PPUSH
27079: LD_INT 22
27081: PUSH
27082: LD_OWVAR 2
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PPUSH
27091: CALL_OW 69
27095: PPUSH
27096: LD_VAR 0 2
27100: PPUSH
27101: CALL_OW 74
27105: PPUSH
27106: CALL_OW 115
// until IsDead ( un ) ;
27110: LD_VAR 0 2
27114: PPUSH
27115: CALL_OW 301
27119: IFFALSE 27067
// end ;
27121: PPOPN 2
27123: END
// every 0 0$1 trigger StreamModeActive and sStu do
27124: LD_EXP 66
27128: PUSH
27129: LD_EXP 105
27133: AND
27134: IFFALSE 27150
27136: GO 27138
27138: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27139: LD_STRING displayStucuk();
27141: PPUSH
27142: CALL_OW 559
// ResetFog ;
27146: CALL_OW 335
// end ;
27150: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27151: LD_EXP 66
27155: PUSH
27156: LD_EXP 98
27160: AND
27161: IFFALSE 27302
27163: GO 27165
27165: DISABLE
27166: LD_INT 0
27168: PPUSH
27169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27170: LD_ADDR_VAR 0 2
27174: PUSH
27175: LD_INT 22
27177: PUSH
27178: LD_OWVAR 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 21
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PPUSH
27201: CALL_OW 69
27205: ST_TO_ADDR
// if not tmp then
27206: LD_VAR 0 2
27210: NOT
27211: IFFALSE 27215
// exit ;
27213: GO 27302
// un := tmp [ rand ( 1 , tmp ) ] ;
27215: LD_ADDR_VAR 0 1
27219: PUSH
27220: LD_VAR 0 2
27224: PUSH
27225: LD_INT 1
27227: PPUSH
27228: LD_VAR 0 2
27232: PPUSH
27233: CALL_OW 12
27237: ARRAY
27238: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27239: LD_VAR 0 1
27243: PPUSH
27244: LD_INT 0
27246: PPUSH
27247: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27251: LD_VAR 0 1
27255: PPUSH
27256: LD_OWVAR 3
27260: PUSH
27261: LD_VAR 0 1
27265: DIFF
27266: PPUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: CALL_OW 74
27276: PPUSH
27277: CALL_OW 115
// wait ( 0 0$20 ) ;
27281: LD_INT 700
27283: PPUSH
27284: CALL_OW 67
// SetSide ( un , your_side ) ;
27288: LD_VAR 0 1
27292: PPUSH
27293: LD_OWVAR 2
27297: PPUSH
27298: CALL_OW 235
// end ;
27302: PPOPN 2
27304: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27305: LD_EXP 66
27309: PUSH
27310: LD_EXP 99
27314: AND
27315: IFFALSE 27421
27317: GO 27319
27319: DISABLE
27320: LD_INT 0
27322: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27323: LD_ADDR_VAR 0 1
27327: PUSH
27328: LD_INT 22
27330: PUSH
27331: LD_OWVAR 2
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: LD_INT 30
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 30
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PPUSH
27372: CALL_OW 69
27376: ST_TO_ADDR
// if not depot then
27377: LD_VAR 0 1
27381: NOT
27382: IFFALSE 27386
// exit ;
27384: GO 27421
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27386: LD_VAR 0 1
27390: PUSH
27391: LD_INT 1
27393: ARRAY
27394: PPUSH
27395: CALL_OW 250
27399: PPUSH
27400: LD_VAR 0 1
27404: PUSH
27405: LD_INT 1
27407: ARRAY
27408: PPUSH
27409: CALL_OW 251
27413: PPUSH
27414: LD_INT 70
27416: PPUSH
27417: CALL_OW 495
// end ;
27421: PPOPN 1
27423: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27424: LD_EXP 66
27428: PUSH
27429: LD_EXP 100
27433: AND
27434: IFFALSE 27645
27436: GO 27438
27438: DISABLE
27439: LD_INT 0
27441: PPUSH
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27446: LD_ADDR_VAR 0 5
27450: PUSH
27451: LD_INT 22
27453: PUSH
27454: LD_OWVAR 2
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 21
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PPUSH
27477: CALL_OW 69
27481: ST_TO_ADDR
// if not tmp then
27482: LD_VAR 0 5
27486: NOT
27487: IFFALSE 27491
// exit ;
27489: GO 27645
// for i in tmp do
27491: LD_ADDR_VAR 0 1
27495: PUSH
27496: LD_VAR 0 5
27500: PUSH
27501: FOR_IN
27502: IFFALSE 27643
// begin d := rand ( 0 , 5 ) ;
27504: LD_ADDR_VAR 0 4
27508: PUSH
27509: LD_INT 0
27511: PPUSH
27512: LD_INT 5
27514: PPUSH
27515: CALL_OW 12
27519: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27520: LD_ADDR_VAR 0 2
27524: PUSH
27525: LD_VAR 0 1
27529: PPUSH
27530: CALL_OW 250
27534: PPUSH
27535: LD_VAR 0 4
27539: PPUSH
27540: LD_INT 3
27542: PPUSH
27543: LD_INT 12
27545: PPUSH
27546: CALL_OW 12
27550: PPUSH
27551: CALL_OW 272
27555: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27556: LD_ADDR_VAR 0 3
27560: PUSH
27561: LD_VAR 0 1
27565: PPUSH
27566: CALL_OW 251
27570: PPUSH
27571: LD_VAR 0 4
27575: PPUSH
27576: LD_INT 3
27578: PPUSH
27579: LD_INT 12
27581: PPUSH
27582: CALL_OW 12
27586: PPUSH
27587: CALL_OW 273
27591: ST_TO_ADDR
// if ValidHex ( x , y ) then
27592: LD_VAR 0 2
27596: PPUSH
27597: LD_VAR 0 3
27601: PPUSH
27602: CALL_OW 488
27606: IFFALSE 27641
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27608: LD_VAR 0 1
27612: PPUSH
27613: LD_VAR 0 2
27617: PPUSH
27618: LD_VAR 0 3
27622: PPUSH
27623: LD_INT 3
27625: PPUSH
27626: LD_INT 6
27628: PPUSH
27629: CALL_OW 12
27633: PPUSH
27634: LD_INT 1
27636: PPUSH
27637: CALL_OW 483
// end ;
27641: GO 27501
27643: POP
27644: POP
// end ;
27645: PPOPN 5
27647: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27648: LD_EXP 66
27652: PUSH
27653: LD_EXP 101
27657: AND
27658: IFFALSE 27752
27660: GO 27662
27662: DISABLE
27663: LD_INT 0
27665: PPUSH
27666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27667: LD_ADDR_VAR 0 2
27671: PUSH
27672: LD_INT 22
27674: PUSH
27675: LD_OWVAR 2
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 32
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 21
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: PPUSH
27709: CALL_OW 69
27713: ST_TO_ADDR
// if not tmp then
27714: LD_VAR 0 2
27718: NOT
27719: IFFALSE 27723
// exit ;
27721: GO 27752
// for i in tmp do
27723: LD_ADDR_VAR 0 1
27727: PUSH
27728: LD_VAR 0 2
27732: PUSH
27733: FOR_IN
27734: IFFALSE 27750
// SetFuel ( i , 0 ) ;
27736: LD_VAR 0 1
27740: PPUSH
27741: LD_INT 0
27743: PPUSH
27744: CALL_OW 240
27748: GO 27733
27750: POP
27751: POP
// end ;
27752: PPOPN 2
27754: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27755: LD_EXP 66
27759: PUSH
27760: LD_EXP 102
27764: AND
27765: IFFALSE 27831
27767: GO 27769
27769: DISABLE
27770: LD_INT 0
27772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27773: LD_ADDR_VAR 0 1
27777: PUSH
27778: LD_INT 22
27780: PUSH
27781: LD_OWVAR 2
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 30
27792: PUSH
27793: LD_INT 29
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PPUSH
27804: CALL_OW 69
27808: ST_TO_ADDR
// if not tmp then
27809: LD_VAR 0 1
27813: NOT
27814: IFFALSE 27818
// exit ;
27816: GO 27831
// DestroyUnit ( tmp [ 1 ] ) ;
27818: LD_VAR 0 1
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: PPUSH
27827: CALL_OW 65
// end ;
27831: PPOPN 1
27833: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27834: LD_EXP 66
27838: PUSH
27839: LD_EXP 104
27843: AND
27844: IFFALSE 27973
27846: GO 27848
27848: DISABLE
27849: LD_INT 0
27851: PPUSH
// begin uc_side := 0 ;
27852: LD_ADDR_OWVAR 20
27856: PUSH
27857: LD_INT 0
27859: ST_TO_ADDR
// uc_nation := nation_arabian ;
27860: LD_ADDR_OWVAR 21
27864: PUSH
27865: LD_INT 2
27867: ST_TO_ADDR
// hc_gallery :=  ;
27868: LD_ADDR_OWVAR 33
27872: PUSH
27873: LD_STRING 
27875: ST_TO_ADDR
// hc_name :=  ;
27876: LD_ADDR_OWVAR 26
27880: PUSH
27881: LD_STRING 
27883: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27884: LD_INT 1
27886: PPUSH
27887: LD_INT 11
27889: PPUSH
27890: LD_INT 10
27892: PPUSH
27893: CALL_OW 380
// un := CreateHuman ;
27897: LD_ADDR_VAR 0 1
27901: PUSH
27902: CALL_OW 44
27906: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27907: LD_VAR 0 1
27911: PPUSH
27912: LD_INT 1
27914: PPUSH
27915: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27919: LD_INT 35
27921: PPUSH
27922: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27926: LD_VAR 0 1
27930: PPUSH
27931: LD_INT 22
27933: PUSH
27934: LD_OWVAR 2
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PPUSH
27943: CALL_OW 69
27947: PPUSH
27948: LD_VAR 0 1
27952: PPUSH
27953: CALL_OW 74
27957: PPUSH
27958: CALL_OW 115
// until IsDead ( un ) ;
27962: LD_VAR 0 1
27966: PPUSH
27967: CALL_OW 301
27971: IFFALSE 27919
// end ;
27973: PPOPN 1
27975: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27976: LD_EXP 66
27980: PUSH
27981: LD_EXP 106
27985: AND
27986: IFFALSE 27998
27988: GO 27990
27990: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27991: LD_STRING earthquake(getX(game), 0, 32)
27993: PPUSH
27994: CALL_OW 559
27998: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27999: LD_EXP 66
28003: PUSH
28004: LD_EXP 107
28008: AND
28009: IFFALSE 28100
28011: GO 28013
28013: DISABLE
28014: LD_INT 0
28016: PPUSH
// begin enable ;
28017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28018: LD_ADDR_VAR 0 1
28022: PUSH
28023: LD_INT 22
28025: PUSH
28026: LD_OWVAR 2
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 21
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 33
28047: PUSH
28048: LD_INT 3
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: PPUSH
28060: CALL_OW 69
28064: ST_TO_ADDR
// if not tmp then
28065: LD_VAR 0 1
28069: NOT
28070: IFFALSE 28074
// exit ;
28072: GO 28100
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28074: LD_VAR 0 1
28078: PUSH
28079: LD_INT 1
28081: PPUSH
28082: LD_VAR 0 1
28086: PPUSH
28087: CALL_OW 12
28091: ARRAY
28092: PPUSH
28093: LD_INT 1
28095: PPUSH
28096: CALL_OW 234
// end ;
28100: PPOPN 1
28102: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28103: LD_EXP 66
28107: PUSH
28108: LD_EXP 108
28112: AND
28113: IFFALSE 28254
28115: GO 28117
28117: DISABLE
28118: LD_INT 0
28120: PPUSH
28121: PPUSH
28122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_INT 22
28130: PUSH
28131: LD_OWVAR 2
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 25
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PPUSH
28154: CALL_OW 69
28158: ST_TO_ADDR
// if not tmp then
28159: LD_VAR 0 3
28163: NOT
28164: IFFALSE 28168
// exit ;
28166: GO 28254
// un := tmp [ rand ( 1 , tmp ) ] ;
28168: LD_ADDR_VAR 0 2
28172: PUSH
28173: LD_VAR 0 3
28177: PUSH
28178: LD_INT 1
28180: PPUSH
28181: LD_VAR 0 3
28185: PPUSH
28186: CALL_OW 12
28190: ARRAY
28191: ST_TO_ADDR
// if Crawls ( un ) then
28192: LD_VAR 0 2
28196: PPUSH
28197: CALL_OW 318
28201: IFFALSE 28212
// ComWalk ( un ) ;
28203: LD_VAR 0 2
28207: PPUSH
28208: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28212: LD_VAR 0 2
28216: PPUSH
28217: LD_INT 9
28219: PPUSH
28220: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28224: LD_INT 28
28226: PPUSH
28227: LD_OWVAR 2
28231: PPUSH
28232: LD_INT 2
28234: PPUSH
28235: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28239: LD_INT 29
28241: PPUSH
28242: LD_OWVAR 2
28246: PPUSH
28247: LD_INT 2
28249: PPUSH
28250: CALL_OW 322
// end ;
28254: PPOPN 3
28256: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28257: LD_EXP 66
28261: PUSH
28262: LD_EXP 109
28266: AND
28267: IFFALSE 28378
28269: GO 28271
28271: DISABLE
28272: LD_INT 0
28274: PPUSH
28275: PPUSH
28276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28277: LD_ADDR_VAR 0 3
28281: PUSH
28282: LD_INT 22
28284: PUSH
28285: LD_OWVAR 2
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 25
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PPUSH
28308: CALL_OW 69
28312: ST_TO_ADDR
// if not tmp then
28313: LD_VAR 0 3
28317: NOT
28318: IFFALSE 28322
// exit ;
28320: GO 28378
// un := tmp [ rand ( 1 , tmp ) ] ;
28322: LD_ADDR_VAR 0 2
28326: PUSH
28327: LD_VAR 0 3
28331: PUSH
28332: LD_INT 1
28334: PPUSH
28335: LD_VAR 0 3
28339: PPUSH
28340: CALL_OW 12
28344: ARRAY
28345: ST_TO_ADDR
// if Crawls ( un ) then
28346: LD_VAR 0 2
28350: PPUSH
28351: CALL_OW 318
28355: IFFALSE 28366
// ComWalk ( un ) ;
28357: LD_VAR 0 2
28361: PPUSH
28362: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28366: LD_VAR 0 2
28370: PPUSH
28371: LD_INT 8
28373: PPUSH
28374: CALL_OW 336
// end ;
28378: PPOPN 3
28380: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28381: LD_EXP 66
28385: PUSH
28386: LD_EXP 110
28390: AND
28391: IFFALSE 28535
28393: GO 28395
28395: DISABLE
28396: LD_INT 0
28398: PPUSH
28399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28400: LD_ADDR_VAR 0 2
28404: PUSH
28405: LD_INT 22
28407: PUSH
28408: LD_OWVAR 2
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 21
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 34
28432: PUSH
28433: LD_INT 12
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 34
28442: PUSH
28443: LD_INT 51
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 34
28452: PUSH
28453: LD_INT 32
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: PPUSH
28471: CALL_OW 69
28475: ST_TO_ADDR
// if not tmp then
28476: LD_VAR 0 2
28480: NOT
28481: IFFALSE 28485
// exit ;
28483: GO 28535
// for i in tmp do
28485: LD_ADDR_VAR 0 1
28489: PUSH
28490: LD_VAR 0 2
28494: PUSH
28495: FOR_IN
28496: IFFALSE 28533
// if GetCargo ( i , mat_artifact ) = 0 then
28498: LD_VAR 0 1
28502: PPUSH
28503: LD_INT 4
28505: PPUSH
28506: CALL_OW 289
28510: PUSH
28511: LD_INT 0
28513: EQUAL
28514: IFFALSE 28531
// SetCargo ( i , mat_siberit , 100 ) ;
28516: LD_VAR 0 1
28520: PPUSH
28521: LD_INT 3
28523: PPUSH
28524: LD_INT 100
28526: PPUSH
28527: CALL_OW 290
28531: GO 28495
28533: POP
28534: POP
// end ;
28535: PPOPN 2
28537: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28538: LD_EXP 66
28542: PUSH
28543: LD_EXP 111
28547: AND
28548: IFFALSE 28731
28550: GO 28552
28552: DISABLE
28553: LD_INT 0
28555: PPUSH
28556: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28557: LD_ADDR_VAR 0 2
28561: PUSH
28562: LD_INT 22
28564: PUSH
28565: LD_OWVAR 2
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL_OW 69
28578: ST_TO_ADDR
// if not tmp then
28579: LD_VAR 0 2
28583: NOT
28584: IFFALSE 28588
// exit ;
28586: GO 28731
// for i := 1 to 2 do
28588: LD_ADDR_VAR 0 1
28592: PUSH
28593: DOUBLE
28594: LD_INT 1
28596: DEC
28597: ST_TO_ADDR
28598: LD_INT 2
28600: PUSH
28601: FOR_TO
28602: IFFALSE 28729
// begin uc_side := your_side ;
28604: LD_ADDR_OWVAR 20
28608: PUSH
28609: LD_OWVAR 2
28613: ST_TO_ADDR
// uc_nation := nation_american ;
28614: LD_ADDR_OWVAR 21
28618: PUSH
28619: LD_INT 1
28621: ST_TO_ADDR
// vc_chassis := us_morphling ;
28622: LD_ADDR_OWVAR 37
28626: PUSH
28627: LD_INT 5
28629: ST_TO_ADDR
// vc_engine := engine_siberite ;
28630: LD_ADDR_OWVAR 39
28634: PUSH
28635: LD_INT 3
28637: ST_TO_ADDR
// vc_control := control_computer ;
28638: LD_ADDR_OWVAR 38
28642: PUSH
28643: LD_INT 3
28645: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28646: LD_ADDR_OWVAR 40
28650: PUSH
28651: LD_INT 10
28653: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28654: LD_VAR 0 2
28658: PUSH
28659: LD_INT 1
28661: ARRAY
28662: PPUSH
28663: CALL_OW 310
28667: NOT
28668: IFFALSE 28715
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28670: CALL_OW 45
28674: PPUSH
28675: LD_VAR 0 2
28679: PUSH
28680: LD_INT 1
28682: ARRAY
28683: PPUSH
28684: CALL_OW 250
28688: PPUSH
28689: LD_VAR 0 2
28693: PUSH
28694: LD_INT 1
28696: ARRAY
28697: PPUSH
28698: CALL_OW 251
28702: PPUSH
28703: LD_INT 12
28705: PPUSH
28706: LD_INT 1
28708: PPUSH
28709: CALL_OW 50
28713: GO 28727
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28715: CALL_OW 45
28719: PPUSH
28720: LD_INT 1
28722: PPUSH
28723: CALL_OW 51
// end ;
28727: GO 28601
28729: POP
28730: POP
// end ;
28731: PPOPN 2
28733: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28734: LD_EXP 66
28738: PUSH
28739: LD_EXP 112
28743: AND
28744: IFFALSE 28966
28746: GO 28748
28748: DISABLE
28749: LD_INT 0
28751: PPUSH
28752: PPUSH
28753: PPUSH
28754: PPUSH
28755: PPUSH
28756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28757: LD_ADDR_VAR 0 6
28761: PUSH
28762: LD_INT 22
28764: PUSH
28765: LD_OWVAR 2
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 21
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 3
28786: PUSH
28787: LD_INT 23
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: LIST
28805: PPUSH
28806: CALL_OW 69
28810: ST_TO_ADDR
// if not tmp then
28811: LD_VAR 0 6
28815: NOT
28816: IFFALSE 28820
// exit ;
28818: GO 28966
// s1 := rand ( 1 , 4 ) ;
28820: LD_ADDR_VAR 0 2
28824: PUSH
28825: LD_INT 1
28827: PPUSH
28828: LD_INT 4
28830: PPUSH
28831: CALL_OW 12
28835: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28836: LD_ADDR_VAR 0 4
28840: PUSH
28841: LD_VAR 0 6
28845: PUSH
28846: LD_INT 1
28848: ARRAY
28849: PPUSH
28850: LD_VAR 0 2
28854: PPUSH
28855: CALL_OW 259
28859: ST_TO_ADDR
// if s1 = 1 then
28860: LD_VAR 0 2
28864: PUSH
28865: LD_INT 1
28867: EQUAL
28868: IFFALSE 28888
// s2 := rand ( 2 , 4 ) else
28870: LD_ADDR_VAR 0 3
28874: PUSH
28875: LD_INT 2
28877: PPUSH
28878: LD_INT 4
28880: PPUSH
28881: CALL_OW 12
28885: ST_TO_ADDR
28886: GO 28896
// s2 := 1 ;
28888: LD_ADDR_VAR 0 3
28892: PUSH
28893: LD_INT 1
28895: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28896: LD_ADDR_VAR 0 5
28900: PUSH
28901: LD_VAR 0 6
28905: PUSH
28906: LD_INT 1
28908: ARRAY
28909: PPUSH
28910: LD_VAR 0 3
28914: PPUSH
28915: CALL_OW 259
28919: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28920: LD_VAR 0 6
28924: PUSH
28925: LD_INT 1
28927: ARRAY
28928: PPUSH
28929: LD_VAR 0 2
28933: PPUSH
28934: LD_VAR 0 5
28938: PPUSH
28939: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28943: LD_VAR 0 6
28947: PUSH
28948: LD_INT 1
28950: ARRAY
28951: PPUSH
28952: LD_VAR 0 3
28956: PPUSH
28957: LD_VAR 0 4
28961: PPUSH
28962: CALL_OW 237
// end ;
28966: PPOPN 6
28968: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28969: LD_EXP 66
28973: PUSH
28974: LD_EXP 113
28978: AND
28979: IFFALSE 29058
28981: GO 28983
28983: DISABLE
28984: LD_INT 0
28986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28987: LD_ADDR_VAR 0 1
28991: PUSH
28992: LD_INT 22
28994: PUSH
28995: LD_OWVAR 2
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 30
29006: PUSH
29007: LD_INT 3
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PPUSH
29018: CALL_OW 69
29022: ST_TO_ADDR
// if not tmp then
29023: LD_VAR 0 1
29027: NOT
29028: IFFALSE 29032
// exit ;
29030: GO 29058
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29032: LD_VAR 0 1
29036: PUSH
29037: LD_INT 1
29039: PPUSH
29040: LD_VAR 0 1
29044: PPUSH
29045: CALL_OW 12
29049: ARRAY
29050: PPUSH
29051: LD_INT 1
29053: PPUSH
29054: CALL_OW 234
// end ;
29058: PPOPN 1
29060: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29061: LD_EXP 66
29065: PUSH
29066: LD_EXP 114
29070: AND
29071: IFFALSE 29183
29073: GO 29075
29075: DISABLE
29076: LD_INT 0
29078: PPUSH
29079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29080: LD_ADDR_VAR 0 2
29084: PUSH
29085: LD_INT 22
29087: PUSH
29088: LD_OWVAR 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 2
29099: PUSH
29100: LD_INT 30
29102: PUSH
29103: LD_INT 27
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 30
29112: PUSH
29113: LD_INT 26
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 30
29122: PUSH
29123: LD_INT 28
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PPUSH
29140: CALL_OW 69
29144: ST_TO_ADDR
// if not tmp then
29145: LD_VAR 0 2
29149: NOT
29150: IFFALSE 29154
// exit ;
29152: GO 29183
// for i in tmp do
29154: LD_ADDR_VAR 0 1
29158: PUSH
29159: LD_VAR 0 2
29163: PUSH
29164: FOR_IN
29165: IFFALSE 29181
// SetLives ( i , 1 ) ;
29167: LD_VAR 0 1
29171: PPUSH
29172: LD_INT 1
29174: PPUSH
29175: CALL_OW 234
29179: GO 29164
29181: POP
29182: POP
// end ;
29183: PPOPN 2
29185: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29186: LD_EXP 66
29190: PUSH
29191: LD_EXP 115
29195: AND
29196: IFFALSE 29483
29198: GO 29200
29200: DISABLE
29201: LD_INT 0
29203: PPUSH
29204: PPUSH
29205: PPUSH
// begin i := rand ( 1 , 7 ) ;
29206: LD_ADDR_VAR 0 1
29210: PUSH
29211: LD_INT 1
29213: PPUSH
29214: LD_INT 7
29216: PPUSH
29217: CALL_OW 12
29221: ST_TO_ADDR
// case i of 1 :
29222: LD_VAR 0 1
29226: PUSH
29227: LD_INT 1
29229: DOUBLE
29230: EQUAL
29231: IFTRUE 29235
29233: GO 29245
29235: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29236: LD_STRING earthquake(getX(game), 0, 32)
29238: PPUSH
29239: CALL_OW 559
29243: GO 29483
29245: LD_INT 2
29247: DOUBLE
29248: EQUAL
29249: IFTRUE 29253
29251: GO 29267
29253: POP
// begin ToLua ( displayStucuk(); ) ;
29254: LD_STRING displayStucuk();
29256: PPUSH
29257: CALL_OW 559
// ResetFog ;
29261: CALL_OW 335
// end ; 3 :
29265: GO 29483
29267: LD_INT 3
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29275
29273: GO 29379
29275: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29276: LD_ADDR_VAR 0 2
29280: PUSH
29281: LD_INT 22
29283: PUSH
29284: LD_OWVAR 2
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 25
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PPUSH
29307: CALL_OW 69
29311: ST_TO_ADDR
// if not tmp then
29312: LD_VAR 0 2
29316: NOT
29317: IFFALSE 29321
// exit ;
29319: GO 29483
// un := tmp [ rand ( 1 , tmp ) ] ;
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: LD_VAR 0 2
29330: PUSH
29331: LD_INT 1
29333: PPUSH
29334: LD_VAR 0 2
29338: PPUSH
29339: CALL_OW 12
29343: ARRAY
29344: ST_TO_ADDR
// if Crawls ( un ) then
29345: LD_VAR 0 3
29349: PPUSH
29350: CALL_OW 318
29354: IFFALSE 29365
// ComWalk ( un ) ;
29356: LD_VAR 0 3
29360: PPUSH
29361: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29365: LD_VAR 0 3
29369: PPUSH
29370: LD_INT 8
29372: PPUSH
29373: CALL_OW 336
// end ; 4 :
29377: GO 29483
29379: LD_INT 4
29381: DOUBLE
29382: EQUAL
29383: IFTRUE 29387
29385: GO 29461
29387: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29388: LD_ADDR_VAR 0 2
29392: PUSH
29393: LD_INT 22
29395: PUSH
29396: LD_OWVAR 2
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 30
29407: PUSH
29408: LD_INT 29
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PPUSH
29419: CALL_OW 69
29423: ST_TO_ADDR
// if not tmp then
29424: LD_VAR 0 2
29428: NOT
29429: IFFALSE 29433
// exit ;
29431: GO 29483
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29433: LD_VAR 0 2
29437: PUSH
29438: LD_INT 1
29440: ARRAY
29441: PPUSH
29442: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29446: LD_VAR 0 2
29450: PUSH
29451: LD_INT 1
29453: ARRAY
29454: PPUSH
29455: CALL_OW 65
// end ; 5 .. 7 :
29459: GO 29483
29461: LD_INT 5
29463: DOUBLE
29464: GREATEREQUAL
29465: IFFALSE 29473
29467: LD_INT 7
29469: DOUBLE
29470: LESSEQUAL
29471: IFTRUE 29475
29473: GO 29482
29475: POP
// StreamSibBomb ; end ;
29476: CALL 25720 0 0
29480: GO 29483
29482: POP
// end ;
29483: PPOPN 3
29485: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29486: LD_EXP 66
29490: PUSH
29491: LD_EXP 116
29495: AND
29496: IFFALSE 29652
29498: GO 29500
29500: DISABLE
29501: LD_INT 0
29503: PPUSH
29504: PPUSH
29505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29506: LD_ADDR_VAR 0 2
29510: PUSH
29511: LD_INT 81
29513: PUSH
29514: LD_OWVAR 2
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: LD_INT 21
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 21
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: LIST
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PPUSH
29555: CALL_OW 69
29559: ST_TO_ADDR
// if not tmp then
29560: LD_VAR 0 2
29564: NOT
29565: IFFALSE 29569
// exit ;
29567: GO 29652
// p := 0 ;
29569: LD_ADDR_VAR 0 3
29573: PUSH
29574: LD_INT 0
29576: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29577: LD_INT 35
29579: PPUSH
29580: CALL_OW 67
// p := p + 1 ;
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_VAR 0 3
29593: PUSH
29594: LD_INT 1
29596: PLUS
29597: ST_TO_ADDR
// for i in tmp do
29598: LD_ADDR_VAR 0 1
29602: PUSH
29603: LD_VAR 0 2
29607: PUSH
29608: FOR_IN
29609: IFFALSE 29640
// if GetLives ( i ) < 1000 then
29611: LD_VAR 0 1
29615: PPUSH
29616: CALL_OW 256
29620: PUSH
29621: LD_INT 1000
29623: LESS
29624: IFFALSE 29638
// SetLives ( i , 1000 ) ;
29626: LD_VAR 0 1
29630: PPUSH
29631: LD_INT 1000
29633: PPUSH
29634: CALL_OW 234
29638: GO 29608
29640: POP
29641: POP
// until p > 20 ;
29642: LD_VAR 0 3
29646: PUSH
29647: LD_INT 20
29649: GREATER
29650: IFFALSE 29577
// end ;
29652: PPOPN 3
29654: END
// every 0 0$1 trigger StreamModeActive and sTime do
29655: LD_EXP 66
29659: PUSH
29660: LD_EXP 117
29664: AND
29665: IFFALSE 29700
29667: GO 29669
29669: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29670: LD_INT 28
29672: PPUSH
29673: LD_OWVAR 2
29677: PPUSH
29678: LD_INT 2
29680: PPUSH
29681: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29685: LD_INT 30
29687: PPUSH
29688: LD_OWVAR 2
29692: PPUSH
29693: LD_INT 2
29695: PPUSH
29696: CALL_OW 322
// end ;
29700: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29701: LD_EXP 66
29705: PUSH
29706: LD_EXP 118
29710: AND
29711: IFFALSE 29832
29713: GO 29715
29715: DISABLE
29716: LD_INT 0
29718: PPUSH
29719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29720: LD_ADDR_VAR 0 2
29724: PUSH
29725: LD_INT 22
29727: PUSH
29728: LD_OWVAR 2
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 21
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 3
29749: PUSH
29750: LD_INT 23
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: PPUSH
29769: CALL_OW 69
29773: ST_TO_ADDR
// if not tmp then
29774: LD_VAR 0 2
29778: NOT
29779: IFFALSE 29783
// exit ;
29781: GO 29832
// for i in tmp do
29783: LD_ADDR_VAR 0 1
29787: PUSH
29788: LD_VAR 0 2
29792: PUSH
29793: FOR_IN
29794: IFFALSE 29830
// begin if Crawls ( i ) then
29796: LD_VAR 0 1
29800: PPUSH
29801: CALL_OW 318
29805: IFFALSE 29816
// ComWalk ( i ) ;
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 138
// SetClass ( i , 2 ) ;
29816: LD_VAR 0 1
29820: PPUSH
29821: LD_INT 2
29823: PPUSH
29824: CALL_OW 336
// end ;
29828: GO 29793
29830: POP
29831: POP
// end ;
29832: PPOPN 2
29834: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29835: LD_EXP 66
29839: PUSH
29840: LD_EXP 119
29844: AND
29845: IFFALSE 30133
29847: GO 29849
29849: DISABLE
29850: LD_INT 0
29852: PPUSH
29853: PPUSH
29854: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29855: LD_OWVAR 2
29859: PPUSH
29860: LD_INT 9
29862: PPUSH
29863: LD_INT 1
29865: PPUSH
29866: LD_INT 1
29868: PPUSH
29869: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29873: LD_INT 9
29875: PPUSH
29876: LD_OWVAR 2
29880: PPUSH
29881: CALL_OW 343
// uc_side := 9 ;
29885: LD_ADDR_OWVAR 20
29889: PUSH
29890: LD_INT 9
29892: ST_TO_ADDR
// uc_nation := 2 ;
29893: LD_ADDR_OWVAR 21
29897: PUSH
29898: LD_INT 2
29900: ST_TO_ADDR
// hc_name := Dark Warrior ;
29901: LD_ADDR_OWVAR 26
29905: PUSH
29906: LD_STRING Dark Warrior
29908: ST_TO_ADDR
// hc_gallery :=  ;
29909: LD_ADDR_OWVAR 33
29913: PUSH
29914: LD_STRING 
29916: ST_TO_ADDR
// hc_noskilllimit := true ;
29917: LD_ADDR_OWVAR 76
29921: PUSH
29922: LD_INT 1
29924: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29925: LD_ADDR_OWVAR 31
29929: PUSH
29930: LD_INT 30
29932: PUSH
29933: LD_INT 30
29935: PUSH
29936: LD_INT 30
29938: PUSH
29939: LD_INT 30
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: ST_TO_ADDR
// un := CreateHuman ;
29948: LD_ADDR_VAR 0 3
29952: PUSH
29953: CALL_OW 44
29957: ST_TO_ADDR
// hc_noskilllimit := false ;
29958: LD_ADDR_OWVAR 76
29962: PUSH
29963: LD_INT 0
29965: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29966: LD_VAR 0 3
29970: PPUSH
29971: LD_INT 1
29973: PPUSH
29974: CALL_OW 51
// ToLua ( playRanger() ) ;
29978: LD_STRING playRanger()
29980: PPUSH
29981: CALL_OW 559
// p := 0 ;
29985: LD_ADDR_VAR 0 2
29989: PUSH
29990: LD_INT 0
29992: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29993: LD_INT 35
29995: PPUSH
29996: CALL_OW 67
// p := p + 1 ;
30000: LD_ADDR_VAR 0 2
30004: PUSH
30005: LD_VAR 0 2
30009: PUSH
30010: LD_INT 1
30012: PLUS
30013: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30014: LD_VAR 0 3
30018: PPUSH
30019: CALL_OW 256
30023: PUSH
30024: LD_INT 1000
30026: LESS
30027: IFFALSE 30041
// SetLives ( un , 1000 ) ;
30029: LD_VAR 0 3
30033: PPUSH
30034: LD_INT 1000
30036: PPUSH
30037: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30041: LD_VAR 0 3
30045: PPUSH
30046: LD_INT 81
30048: PUSH
30049: LD_OWVAR 2
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 91
30060: PUSH
30061: LD_VAR 0 3
30065: PUSH
30066: LD_INT 30
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PPUSH
30078: CALL_OW 69
30082: PPUSH
30083: LD_VAR 0 3
30087: PPUSH
30088: CALL_OW 74
30092: PPUSH
30093: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30097: LD_VAR 0 2
30101: PUSH
30102: LD_INT 80
30104: GREATER
30105: PUSH
30106: LD_VAR 0 3
30110: PPUSH
30111: CALL_OW 301
30115: OR
30116: IFFALSE 29993
// if un then
30118: LD_VAR 0 3
30122: IFFALSE 30133
// RemoveUnit ( un ) ;
30124: LD_VAR 0 3
30128: PPUSH
30129: CALL_OW 64
// end ;
30133: PPOPN 3
30135: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30136: LD_EXP 120
30140: IFFALSE 30256
30142: GO 30144
30144: DISABLE
30145: LD_INT 0
30147: PPUSH
30148: PPUSH
30149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30150: LD_ADDR_VAR 0 2
30154: PUSH
30155: LD_INT 81
30157: PUSH
30158: LD_OWVAR 2
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 21
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PPUSH
30181: CALL_OW 69
30185: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30186: LD_STRING playComputer()
30188: PPUSH
30189: CALL_OW 559
// if not tmp then
30193: LD_VAR 0 2
30197: NOT
30198: IFFALSE 30202
// exit ;
30200: GO 30256
// for i in tmp do
30202: LD_ADDR_VAR 0 1
30206: PUSH
30207: LD_VAR 0 2
30211: PUSH
30212: FOR_IN
30213: IFFALSE 30254
// for j := 1 to 4 do
30215: LD_ADDR_VAR 0 3
30219: PUSH
30220: DOUBLE
30221: LD_INT 1
30223: DEC
30224: ST_TO_ADDR
30225: LD_INT 4
30227: PUSH
30228: FOR_TO
30229: IFFALSE 30250
// SetSkill ( i , j , 10 ) ;
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_VAR 0 3
30240: PPUSH
30241: LD_INT 10
30243: PPUSH
30244: CALL_OW 237
30248: GO 30228
30250: POP
30251: POP
30252: GO 30212
30254: POP
30255: POP
// end ;
30256: PPOPN 3
30258: END
// every 0 0$1 trigger s30 do var i , tmp ;
30259: LD_EXP 121
30263: IFFALSE 30332
30265: GO 30267
30267: DISABLE
30268: LD_INT 0
30270: PPUSH
30271: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30272: LD_ADDR_VAR 0 2
30276: PUSH
30277: LD_INT 22
30279: PUSH
30280: LD_OWVAR 2
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PPUSH
30289: CALL_OW 69
30293: ST_TO_ADDR
// if not tmp then
30294: LD_VAR 0 2
30298: NOT
30299: IFFALSE 30303
// exit ;
30301: GO 30332
// for i in tmp do
30303: LD_ADDR_VAR 0 1
30307: PUSH
30308: LD_VAR 0 2
30312: PUSH
30313: FOR_IN
30314: IFFALSE 30330
// SetLives ( i , 300 ) ;
30316: LD_VAR 0 1
30320: PPUSH
30321: LD_INT 300
30323: PPUSH
30324: CALL_OW 234
30328: GO 30313
30330: POP
30331: POP
// end ;
30332: PPOPN 2
30334: END
// every 0 0$1 trigger s60 do var i , tmp ;
30335: LD_EXP 122
30339: IFFALSE 30408
30341: GO 30343
30343: DISABLE
30344: LD_INT 0
30346: PPUSH
30347: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30348: LD_ADDR_VAR 0 2
30352: PUSH
30353: LD_INT 22
30355: PUSH
30356: LD_OWVAR 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PPUSH
30365: CALL_OW 69
30369: ST_TO_ADDR
// if not tmp then
30370: LD_VAR 0 2
30374: NOT
30375: IFFALSE 30379
// exit ;
30377: GO 30408
// for i in tmp do
30379: LD_ADDR_VAR 0 1
30383: PUSH
30384: LD_VAR 0 2
30388: PUSH
30389: FOR_IN
30390: IFFALSE 30406
// SetLives ( i , 600 ) ;
30392: LD_VAR 0 1
30396: PPUSH
30397: LD_INT 600
30399: PPUSH
30400: CALL_OW 234
30404: GO 30389
30406: POP
30407: POP
// end ;
30408: PPOPN 2
30410: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30411: LD_INT 0
30413: PPUSH
// case cmd of 301 :
30414: LD_VAR 0 1
30418: PUSH
30419: LD_INT 301
30421: DOUBLE
30422: EQUAL
30423: IFTRUE 30427
30425: GO 30459
30427: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30428: LD_VAR 0 6
30432: PPUSH
30433: LD_VAR 0 7
30437: PPUSH
30438: LD_VAR 0 8
30442: PPUSH
30443: LD_VAR 0 4
30447: PPUSH
30448: LD_VAR 0 5
30452: PPUSH
30453: CALL 31660 0 5
30457: GO 30580
30459: LD_INT 302
30461: DOUBLE
30462: EQUAL
30463: IFTRUE 30467
30465: GO 30504
30467: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30468: LD_VAR 0 6
30472: PPUSH
30473: LD_VAR 0 7
30477: PPUSH
30478: LD_VAR 0 8
30482: PPUSH
30483: LD_VAR 0 9
30487: PPUSH
30488: LD_VAR 0 4
30492: PPUSH
30493: LD_VAR 0 5
30497: PPUSH
30498: CALL 31751 0 6
30502: GO 30580
30504: LD_INT 303
30506: DOUBLE
30507: EQUAL
30508: IFTRUE 30512
30510: GO 30549
30512: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30513: LD_VAR 0 6
30517: PPUSH
30518: LD_VAR 0 7
30522: PPUSH
30523: LD_VAR 0 8
30527: PPUSH
30528: LD_VAR 0 9
30532: PPUSH
30533: LD_VAR 0 4
30537: PPUSH
30538: LD_VAR 0 5
30542: PPUSH
30543: CALL 30585 0 6
30547: GO 30580
30549: LD_INT 304
30551: DOUBLE
30552: EQUAL
30553: IFTRUE 30557
30555: GO 30579
30557: POP
// hHackTeleport ( unit , x , y ) ; end ;
30558: LD_VAR 0 2
30562: PPUSH
30563: LD_VAR 0 4
30567: PPUSH
30568: LD_VAR 0 5
30572: PPUSH
30573: CALL 32344 0 3
30577: GO 30580
30579: POP
// end ;
30580: LD_VAR 0 12
30584: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30585: LD_INT 0
30587: PPUSH
30588: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30589: LD_VAR 0 1
30593: PUSH
30594: LD_INT 1
30596: LESS
30597: PUSH
30598: LD_VAR 0 1
30602: PUSH
30603: LD_INT 3
30605: GREATER
30606: OR
30607: PUSH
30608: LD_VAR 0 5
30612: PPUSH
30613: LD_VAR 0 6
30617: PPUSH
30618: CALL_OW 428
30622: OR
30623: IFFALSE 30627
// exit ;
30625: GO 31347
// uc_side := your_side ;
30627: LD_ADDR_OWVAR 20
30631: PUSH
30632: LD_OWVAR 2
30636: ST_TO_ADDR
// uc_nation := nation ;
30637: LD_ADDR_OWVAR 21
30641: PUSH
30642: LD_VAR 0 1
30646: ST_TO_ADDR
// bc_level = 1 ;
30647: LD_ADDR_OWVAR 43
30651: PUSH
30652: LD_INT 1
30654: ST_TO_ADDR
// case btype of 1 :
30655: LD_VAR 0 2
30659: PUSH
30660: LD_INT 1
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30679
30668: POP
// bc_type := b_depot ; 2 :
30669: LD_ADDR_OWVAR 42
30673: PUSH
30674: LD_INT 0
30676: ST_TO_ADDR
30677: GO 31291
30679: LD_INT 2
30681: DOUBLE
30682: EQUAL
30683: IFTRUE 30687
30685: GO 30698
30687: POP
// bc_type := b_warehouse ; 3 :
30688: LD_ADDR_OWVAR 42
30692: PUSH
30693: LD_INT 1
30695: ST_TO_ADDR
30696: GO 31291
30698: LD_INT 3
30700: DOUBLE
30701: EQUAL
30702: IFTRUE 30706
30704: GO 30717
30706: POP
// bc_type := b_lab ; 4 .. 9 :
30707: LD_ADDR_OWVAR 42
30711: PUSH
30712: LD_INT 6
30714: ST_TO_ADDR
30715: GO 31291
30717: LD_INT 4
30719: DOUBLE
30720: GREATEREQUAL
30721: IFFALSE 30729
30723: LD_INT 9
30725: DOUBLE
30726: LESSEQUAL
30727: IFTRUE 30731
30729: GO 30783
30731: POP
// begin bc_type := b_lab_half ;
30732: LD_ADDR_OWVAR 42
30736: PUSH
30737: LD_INT 7
30739: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30740: LD_ADDR_OWVAR 44
30744: PUSH
30745: LD_INT 10
30747: PUSH
30748: LD_INT 11
30750: PUSH
30751: LD_INT 12
30753: PUSH
30754: LD_INT 15
30756: PUSH
30757: LD_INT 14
30759: PUSH
30760: LD_INT 13
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: PUSH
30771: LD_VAR 0 2
30775: PUSH
30776: LD_INT 3
30778: MINUS
30779: ARRAY
30780: ST_TO_ADDR
// end ; 10 .. 13 :
30781: GO 31291
30783: LD_INT 10
30785: DOUBLE
30786: GREATEREQUAL
30787: IFFALSE 30795
30789: LD_INT 13
30791: DOUBLE
30792: LESSEQUAL
30793: IFTRUE 30797
30795: GO 30874
30797: POP
// begin bc_type := b_lab_full ;
30798: LD_ADDR_OWVAR 42
30802: PUSH
30803: LD_INT 8
30805: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30806: LD_ADDR_OWVAR 44
30810: PUSH
30811: LD_INT 10
30813: PUSH
30814: LD_INT 12
30816: PUSH
30817: LD_INT 14
30819: PUSH
30820: LD_INT 13
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: PUSH
30829: LD_VAR 0 2
30833: PUSH
30834: LD_INT 9
30836: MINUS
30837: ARRAY
30838: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30839: LD_ADDR_OWVAR 45
30843: PUSH
30844: LD_INT 11
30846: PUSH
30847: LD_INT 15
30849: PUSH
30850: LD_INT 12
30852: PUSH
30853: LD_INT 15
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: PUSH
30862: LD_VAR 0 2
30866: PUSH
30867: LD_INT 9
30869: MINUS
30870: ARRAY
30871: ST_TO_ADDR
// end ; 14 :
30872: GO 31291
30874: LD_INT 14
30876: DOUBLE
30877: EQUAL
30878: IFTRUE 30882
30880: GO 30893
30882: POP
// bc_type := b_workshop ; 15 :
30883: LD_ADDR_OWVAR 42
30887: PUSH
30888: LD_INT 2
30890: ST_TO_ADDR
30891: GO 31291
30893: LD_INT 15
30895: DOUBLE
30896: EQUAL
30897: IFTRUE 30901
30899: GO 30912
30901: POP
// bc_type := b_factory ; 16 :
30902: LD_ADDR_OWVAR 42
30906: PUSH
30907: LD_INT 3
30909: ST_TO_ADDR
30910: GO 31291
30912: LD_INT 16
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 30931
30920: POP
// bc_type := b_ext_gun ; 17 :
30921: LD_ADDR_OWVAR 42
30925: PUSH
30926: LD_INT 17
30928: ST_TO_ADDR
30929: GO 31291
30931: LD_INT 17
30933: DOUBLE
30934: EQUAL
30935: IFTRUE 30939
30937: GO 30967
30939: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30940: LD_ADDR_OWVAR 42
30944: PUSH
30945: LD_INT 19
30947: PUSH
30948: LD_INT 23
30950: PUSH
30951: LD_INT 19
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: PUSH
30959: LD_VAR 0 1
30963: ARRAY
30964: ST_TO_ADDR
30965: GO 31291
30967: LD_INT 18
30969: DOUBLE
30970: EQUAL
30971: IFTRUE 30975
30973: GO 30986
30975: POP
// bc_type := b_ext_radar ; 19 :
30976: LD_ADDR_OWVAR 42
30980: PUSH
30981: LD_INT 20
30983: ST_TO_ADDR
30984: GO 31291
30986: LD_INT 19
30988: DOUBLE
30989: EQUAL
30990: IFTRUE 30994
30992: GO 31005
30994: POP
// bc_type := b_ext_radio ; 20 :
30995: LD_ADDR_OWVAR 42
30999: PUSH
31000: LD_INT 22
31002: ST_TO_ADDR
31003: GO 31291
31005: LD_INT 20
31007: DOUBLE
31008: EQUAL
31009: IFTRUE 31013
31011: GO 31024
31013: POP
// bc_type := b_ext_siberium ; 21 :
31014: LD_ADDR_OWVAR 42
31018: PUSH
31019: LD_INT 21
31021: ST_TO_ADDR
31022: GO 31291
31024: LD_INT 21
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31043
31032: POP
// bc_type := b_ext_computer ; 22 :
31033: LD_ADDR_OWVAR 42
31037: PUSH
31038: LD_INT 24
31040: ST_TO_ADDR
31041: GO 31291
31043: LD_INT 22
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31062
31051: POP
// bc_type := b_ext_track ; 23 :
31052: LD_ADDR_OWVAR 42
31056: PUSH
31057: LD_INT 16
31059: ST_TO_ADDR
31060: GO 31291
31062: LD_INT 23
31064: DOUBLE
31065: EQUAL
31066: IFTRUE 31070
31068: GO 31081
31070: POP
// bc_type := b_ext_laser ; 24 :
31071: LD_ADDR_OWVAR 42
31075: PUSH
31076: LD_INT 25
31078: ST_TO_ADDR
31079: GO 31291
31081: LD_INT 24
31083: DOUBLE
31084: EQUAL
31085: IFTRUE 31089
31087: GO 31100
31089: POP
// bc_type := b_control_tower ; 25 :
31090: LD_ADDR_OWVAR 42
31094: PUSH
31095: LD_INT 36
31097: ST_TO_ADDR
31098: GO 31291
31100: LD_INT 25
31102: DOUBLE
31103: EQUAL
31104: IFTRUE 31108
31106: GO 31119
31108: POP
// bc_type := b_breastwork ; 26 :
31109: LD_ADDR_OWVAR 42
31113: PUSH
31114: LD_INT 31
31116: ST_TO_ADDR
31117: GO 31291
31119: LD_INT 26
31121: DOUBLE
31122: EQUAL
31123: IFTRUE 31127
31125: GO 31138
31127: POP
// bc_type := b_bunker ; 27 :
31128: LD_ADDR_OWVAR 42
31132: PUSH
31133: LD_INT 32
31135: ST_TO_ADDR
31136: GO 31291
31138: LD_INT 27
31140: DOUBLE
31141: EQUAL
31142: IFTRUE 31146
31144: GO 31157
31146: POP
// bc_type := b_turret ; 28 :
31147: LD_ADDR_OWVAR 42
31151: PUSH
31152: LD_INT 33
31154: ST_TO_ADDR
31155: GO 31291
31157: LD_INT 28
31159: DOUBLE
31160: EQUAL
31161: IFTRUE 31165
31163: GO 31176
31165: POP
// bc_type := b_armoury ; 29 :
31166: LD_ADDR_OWVAR 42
31170: PUSH
31171: LD_INT 4
31173: ST_TO_ADDR
31174: GO 31291
31176: LD_INT 29
31178: DOUBLE
31179: EQUAL
31180: IFTRUE 31184
31182: GO 31195
31184: POP
// bc_type := b_barracks ; 30 :
31185: LD_ADDR_OWVAR 42
31189: PUSH
31190: LD_INT 5
31192: ST_TO_ADDR
31193: GO 31291
31195: LD_INT 30
31197: DOUBLE
31198: EQUAL
31199: IFTRUE 31203
31201: GO 31214
31203: POP
// bc_type := b_solar_power ; 31 :
31204: LD_ADDR_OWVAR 42
31208: PUSH
31209: LD_INT 27
31211: ST_TO_ADDR
31212: GO 31291
31214: LD_INT 31
31216: DOUBLE
31217: EQUAL
31218: IFTRUE 31222
31220: GO 31233
31222: POP
// bc_type := b_oil_power ; 32 :
31223: LD_ADDR_OWVAR 42
31227: PUSH
31228: LD_INT 26
31230: ST_TO_ADDR
31231: GO 31291
31233: LD_INT 32
31235: DOUBLE
31236: EQUAL
31237: IFTRUE 31241
31239: GO 31252
31241: POP
// bc_type := b_siberite_power ; 33 :
31242: LD_ADDR_OWVAR 42
31246: PUSH
31247: LD_INT 28
31249: ST_TO_ADDR
31250: GO 31291
31252: LD_INT 33
31254: DOUBLE
31255: EQUAL
31256: IFTRUE 31260
31258: GO 31271
31260: POP
// bc_type := b_oil_mine ; 34 :
31261: LD_ADDR_OWVAR 42
31265: PUSH
31266: LD_INT 29
31268: ST_TO_ADDR
31269: GO 31291
31271: LD_INT 34
31273: DOUBLE
31274: EQUAL
31275: IFTRUE 31279
31277: GO 31290
31279: POP
// bc_type := b_siberite_mine ; end ;
31280: LD_ADDR_OWVAR 42
31284: PUSH
31285: LD_INT 30
31287: ST_TO_ADDR
31288: GO 31291
31290: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31291: LD_ADDR_VAR 0 8
31295: PUSH
31296: LD_VAR 0 5
31300: PPUSH
31301: LD_VAR 0 6
31305: PPUSH
31306: LD_VAR 0 3
31310: PPUSH
31311: CALL_OW 47
31315: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31316: LD_OWVAR 42
31320: PUSH
31321: LD_INT 32
31323: PUSH
31324: LD_INT 33
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: IN
31331: IFFALSE 31347
// PlaceWeaponTurret ( b , weapon ) ;
31333: LD_VAR 0 8
31337: PPUSH
31338: LD_VAR 0 4
31342: PPUSH
31343: CALL_OW 431
// end ;
31347: LD_VAR 0 7
31351: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31352: LD_INT 0
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31358: LD_ADDR_VAR 0 4
31362: PUSH
31363: LD_INT 22
31365: PUSH
31366: LD_OWVAR 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 2
31377: PUSH
31378: LD_INT 30
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 30
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PPUSH
31407: CALL_OW 69
31411: ST_TO_ADDR
// if not tmp then
31412: LD_VAR 0 4
31416: NOT
31417: IFFALSE 31421
// exit ;
31419: GO 31480
// for i in tmp do
31421: LD_ADDR_VAR 0 2
31425: PUSH
31426: LD_VAR 0 4
31430: PUSH
31431: FOR_IN
31432: IFFALSE 31478
// for j = 1 to 3 do
31434: LD_ADDR_VAR 0 3
31438: PUSH
31439: DOUBLE
31440: LD_INT 1
31442: DEC
31443: ST_TO_ADDR
31444: LD_INT 3
31446: PUSH
31447: FOR_TO
31448: IFFALSE 31474
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31450: LD_VAR 0 2
31454: PPUSH
31455: CALL_OW 274
31459: PPUSH
31460: LD_VAR 0 3
31464: PPUSH
31465: LD_INT 99999
31467: PPUSH
31468: CALL_OW 277
31472: GO 31447
31474: POP
31475: POP
31476: GO 31431
31478: POP
31479: POP
// end ;
31480: LD_VAR 0 1
31484: RET
// export function hHackSetLevel10 ; var i , j ; begin
31485: LD_INT 0
31487: PPUSH
31488: PPUSH
31489: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31490: LD_ADDR_VAR 0 2
31494: PUSH
31495: LD_INT 21
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PPUSH
31505: CALL_OW 69
31509: PUSH
31510: FOR_IN
31511: IFFALSE 31563
// if IsSelected ( i ) then
31513: LD_VAR 0 2
31517: PPUSH
31518: CALL_OW 306
31522: IFFALSE 31561
// begin for j := 1 to 4 do
31524: LD_ADDR_VAR 0 3
31528: PUSH
31529: DOUBLE
31530: LD_INT 1
31532: DEC
31533: ST_TO_ADDR
31534: LD_INT 4
31536: PUSH
31537: FOR_TO
31538: IFFALSE 31559
// SetSkill ( i , j , 10 ) ;
31540: LD_VAR 0 2
31544: PPUSH
31545: LD_VAR 0 3
31549: PPUSH
31550: LD_INT 10
31552: PPUSH
31553: CALL_OW 237
31557: GO 31537
31559: POP
31560: POP
// end ;
31561: GO 31510
31563: POP
31564: POP
// end ;
31565: LD_VAR 0 1
31569: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31570: LD_INT 0
31572: PPUSH
31573: PPUSH
31574: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31575: LD_ADDR_VAR 0 2
31579: PUSH
31580: LD_INT 22
31582: PUSH
31583: LD_OWVAR 2
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 21
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PPUSH
31606: CALL_OW 69
31610: PUSH
31611: FOR_IN
31612: IFFALSE 31653
// begin for j := 1 to 4 do
31614: LD_ADDR_VAR 0 3
31618: PUSH
31619: DOUBLE
31620: LD_INT 1
31622: DEC
31623: ST_TO_ADDR
31624: LD_INT 4
31626: PUSH
31627: FOR_TO
31628: IFFALSE 31649
// SetSkill ( i , j , 10 ) ;
31630: LD_VAR 0 2
31634: PPUSH
31635: LD_VAR 0 3
31639: PPUSH
31640: LD_INT 10
31642: PPUSH
31643: CALL_OW 237
31647: GO 31627
31649: POP
31650: POP
// end ;
31651: GO 31611
31653: POP
31654: POP
// end ;
31655: LD_VAR 0 1
31659: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31660: LD_INT 0
31662: PPUSH
// uc_side := your_side ;
31663: LD_ADDR_OWVAR 20
31667: PUSH
31668: LD_OWVAR 2
31672: ST_TO_ADDR
// uc_nation := nation ;
31673: LD_ADDR_OWVAR 21
31677: PUSH
31678: LD_VAR 0 1
31682: ST_TO_ADDR
// InitHc ;
31683: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31687: LD_INT 0
31689: PPUSH
31690: LD_VAR 0 2
31694: PPUSH
31695: LD_VAR 0 3
31699: PPUSH
31700: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31704: LD_VAR 0 4
31708: PPUSH
31709: LD_VAR 0 5
31713: PPUSH
31714: CALL_OW 428
31718: PUSH
31719: LD_INT 0
31721: EQUAL
31722: IFFALSE 31746
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31724: CALL_OW 44
31728: PPUSH
31729: LD_VAR 0 4
31733: PPUSH
31734: LD_VAR 0 5
31738: PPUSH
31739: LD_INT 1
31741: PPUSH
31742: CALL_OW 48
// end ;
31746: LD_VAR 0 6
31750: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31751: LD_INT 0
31753: PPUSH
31754: PPUSH
// uc_side := your_side ;
31755: LD_ADDR_OWVAR 20
31759: PUSH
31760: LD_OWVAR 2
31764: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31765: LD_VAR 0 1
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 5
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: IN
31792: IFFALSE 31804
// uc_nation := nation_american else
31794: LD_ADDR_OWVAR 21
31798: PUSH
31799: LD_INT 1
31801: ST_TO_ADDR
31802: GO 31847
// if chassis in [ 11 , 12 , 13 , 14 ] then
31804: LD_VAR 0 1
31808: PUSH
31809: LD_INT 11
31811: PUSH
31812: LD_INT 12
31814: PUSH
31815: LD_INT 13
31817: PUSH
31818: LD_INT 14
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: IN
31827: IFFALSE 31839
// uc_nation := nation_arabian else
31829: LD_ADDR_OWVAR 21
31833: PUSH
31834: LD_INT 2
31836: ST_TO_ADDR
31837: GO 31847
// uc_nation := nation_russian ;
31839: LD_ADDR_OWVAR 21
31843: PUSH
31844: LD_INT 3
31846: ST_TO_ADDR
// vc_chassis := chassis ;
31847: LD_ADDR_OWVAR 37
31851: PUSH
31852: LD_VAR 0 1
31856: ST_TO_ADDR
// vc_engine := engine ;
31857: LD_ADDR_OWVAR 39
31861: PUSH
31862: LD_VAR 0 2
31866: ST_TO_ADDR
// vc_control := control ;
31867: LD_ADDR_OWVAR 38
31871: PUSH
31872: LD_VAR 0 3
31876: ST_TO_ADDR
// vc_weapon := weapon ;
31877: LD_ADDR_OWVAR 40
31881: PUSH
31882: LD_VAR 0 4
31886: ST_TO_ADDR
// un := CreateVehicle ;
31887: LD_ADDR_VAR 0 8
31891: PUSH
31892: CALL_OW 45
31896: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31897: LD_VAR 0 8
31901: PPUSH
31902: LD_INT 0
31904: PPUSH
31905: LD_INT 5
31907: PPUSH
31908: CALL_OW 12
31912: PPUSH
31913: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31917: LD_VAR 0 8
31921: PPUSH
31922: LD_VAR 0 5
31926: PPUSH
31927: LD_VAR 0 6
31931: PPUSH
31932: LD_INT 1
31934: PPUSH
31935: CALL_OW 48
// end ;
31939: LD_VAR 0 7
31943: RET
// export hInvincible ; every 1 do
31944: GO 31946
31946: DISABLE
// hInvincible := [ ] ;
31947: LD_ADDR_EXP 123
31951: PUSH
31952: EMPTY
31953: ST_TO_ADDR
31954: END
// every 10 do var i ;
31955: GO 31957
31957: DISABLE
31958: LD_INT 0
31960: PPUSH
// begin enable ;
31961: ENABLE
// if not hInvincible then
31962: LD_EXP 123
31966: NOT
31967: IFFALSE 31971
// exit ;
31969: GO 32015
// for i in hInvincible do
31971: LD_ADDR_VAR 0 1
31975: PUSH
31976: LD_EXP 123
31980: PUSH
31981: FOR_IN
31982: IFFALSE 32013
// if GetLives ( i ) < 1000 then
31984: LD_VAR 0 1
31988: PPUSH
31989: CALL_OW 256
31993: PUSH
31994: LD_INT 1000
31996: LESS
31997: IFFALSE 32011
// SetLives ( i , 1000 ) ;
31999: LD_VAR 0 1
32003: PPUSH
32004: LD_INT 1000
32006: PPUSH
32007: CALL_OW 234
32011: GO 31981
32013: POP
32014: POP
// end ;
32015: PPOPN 1
32017: END
// export function hHackInvincible ; var i ; begin
32018: LD_INT 0
32020: PPUSH
32021: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32022: LD_ADDR_VAR 0 2
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 21
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 21
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: PPUSH
32055: CALL_OW 69
32059: PUSH
32060: FOR_IN
32061: IFFALSE 32122
// if IsSelected ( i ) then
32063: LD_VAR 0 2
32067: PPUSH
32068: CALL_OW 306
32072: IFFALSE 32120
// begin if i in hInvincible then
32074: LD_VAR 0 2
32078: PUSH
32079: LD_EXP 123
32083: IN
32084: IFFALSE 32104
// hInvincible := hInvincible diff i else
32086: LD_ADDR_EXP 123
32090: PUSH
32091: LD_EXP 123
32095: PUSH
32096: LD_VAR 0 2
32100: DIFF
32101: ST_TO_ADDR
32102: GO 32120
// hInvincible := hInvincible union i ;
32104: LD_ADDR_EXP 123
32108: PUSH
32109: LD_EXP 123
32113: PUSH
32114: LD_VAR 0 2
32118: UNION
32119: ST_TO_ADDR
// end ;
32120: GO 32060
32122: POP
32123: POP
// end ;
32124: LD_VAR 0 1
32128: RET
// export function hHackInvisible ; var i , j ; begin
32129: LD_INT 0
32131: PPUSH
32132: PPUSH
32133: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32134: LD_ADDR_VAR 0 2
32138: PUSH
32139: LD_INT 21
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PPUSH
32149: CALL_OW 69
32153: PUSH
32154: FOR_IN
32155: IFFALSE 32179
// if IsSelected ( i ) then
32157: LD_VAR 0 2
32161: PPUSH
32162: CALL_OW 306
32166: IFFALSE 32177
// ComForceInvisible ( i ) ;
32168: LD_VAR 0 2
32172: PPUSH
32173: CALL_OW 496
32177: GO 32154
32179: POP
32180: POP
// end ;
32181: LD_VAR 0 1
32185: RET
// export function hHackChangeYourSide ; begin
32186: LD_INT 0
32188: PPUSH
// if your_side = 8 then
32189: LD_OWVAR 2
32193: PUSH
32194: LD_INT 8
32196: EQUAL
32197: IFFALSE 32209
// your_side := 0 else
32199: LD_ADDR_OWVAR 2
32203: PUSH
32204: LD_INT 0
32206: ST_TO_ADDR
32207: GO 32223
// your_side := your_side + 1 ;
32209: LD_ADDR_OWVAR 2
32213: PUSH
32214: LD_OWVAR 2
32218: PUSH
32219: LD_INT 1
32221: PLUS
32222: ST_TO_ADDR
// end ;
32223: LD_VAR 0 1
32227: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32228: LD_INT 0
32230: PPUSH
32231: PPUSH
32232: PPUSH
// for i in all_units do
32233: LD_ADDR_VAR 0 2
32237: PUSH
32238: LD_OWVAR 3
32242: PUSH
32243: FOR_IN
32244: IFFALSE 32322
// if IsSelected ( i ) then
32246: LD_VAR 0 2
32250: PPUSH
32251: CALL_OW 306
32255: IFFALSE 32320
// begin j := GetSide ( i ) ;
32257: LD_ADDR_VAR 0 3
32261: PUSH
32262: LD_VAR 0 2
32266: PPUSH
32267: CALL_OW 255
32271: ST_TO_ADDR
// if j = 8 then
32272: LD_VAR 0 3
32276: PUSH
32277: LD_INT 8
32279: EQUAL
32280: IFFALSE 32292
// j := 0 else
32282: LD_ADDR_VAR 0 3
32286: PUSH
32287: LD_INT 0
32289: ST_TO_ADDR
32290: GO 32306
// j := j + 1 ;
32292: LD_ADDR_VAR 0 3
32296: PUSH
32297: LD_VAR 0 3
32301: PUSH
32302: LD_INT 1
32304: PLUS
32305: ST_TO_ADDR
// SetSide ( i , j ) ;
32306: LD_VAR 0 2
32310: PPUSH
32311: LD_VAR 0 3
32315: PPUSH
32316: CALL_OW 235
// end ;
32320: GO 32243
32322: POP
32323: POP
// end ;
32324: LD_VAR 0 1
32328: RET
// export function hHackFog ; begin
32329: LD_INT 0
32331: PPUSH
// FogOff ( true ) ;
32332: LD_INT 1
32334: PPUSH
32335: CALL_OW 344
// end ;
32339: LD_VAR 0 1
32343: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32344: LD_INT 0
32346: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32347: LD_VAR 0 1
32351: PPUSH
32352: LD_VAR 0 2
32356: PPUSH
32357: LD_VAR 0 3
32361: PPUSH
32362: LD_INT 1
32364: PPUSH
32365: LD_INT 1
32367: PPUSH
32368: CALL_OW 483
// CenterOnXY ( x , y ) ;
32372: LD_VAR 0 2
32376: PPUSH
32377: LD_VAR 0 3
32381: PPUSH
32382: CALL_OW 84
// end ; end_of_file
32386: LD_VAR 0 4
32390: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
32391: LD_VAR 0 1
32395: PUSH
32396: LD_INT 200
32398: DOUBLE
32399: GREATEREQUAL
32400: IFFALSE 32408
32402: LD_INT 299
32404: DOUBLE
32405: LESSEQUAL
32406: IFTRUE 32410
32408: GO 32442
32410: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
32411: LD_VAR 0 1
32415: PPUSH
32416: LD_VAR 0 2
32420: PPUSH
32421: LD_VAR 0 3
32425: PPUSH
32426: LD_VAR 0 4
32430: PPUSH
32431: LD_VAR 0 5
32435: PPUSH
32436: CALL 32676 0 5
32440: GO 32519
32442: LD_INT 300
32444: DOUBLE
32445: GREATEREQUAL
32446: IFFALSE 32454
32448: LD_INT 399
32450: DOUBLE
32451: LESSEQUAL
32452: IFTRUE 32456
32454: GO 32518
32456: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
32457: LD_VAR 0 1
32461: PPUSH
32462: LD_VAR 0 2
32466: PPUSH
32467: LD_VAR 0 3
32471: PPUSH
32472: LD_VAR 0 4
32476: PPUSH
32477: LD_VAR 0 5
32481: PPUSH
32482: LD_VAR 0 6
32486: PPUSH
32487: LD_VAR 0 7
32491: PPUSH
32492: LD_VAR 0 8
32496: PPUSH
32497: LD_VAR 0 9
32501: PPUSH
32502: LD_VAR 0 10
32506: PPUSH
32507: LD_VAR 0 11
32511: PPUSH
32512: CALL 30411 0 11
32516: GO 32519
32518: POP
// end ;
32519: PPOPN 11
32521: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
32522: LD_VAR 0 1
32526: PPUSH
32527: LD_VAR 0 2
32531: PPUSH
32532: LD_VAR 0 3
32536: PPUSH
32537: LD_VAR 0 4
32541: PPUSH
32542: LD_VAR 0 5
32546: PPUSH
32547: CALL 32668 0 5
// end ; end_of_file end_of_file
32551: PPOPN 5
32553: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32554: LD_INT 0
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32560: LD_VAR 0 1
32564: PPUSH
32565: CALL_OW 264
32569: PUSH
32570: LD_EXP 140
32574: EQUAL
32575: IFFALSE 32647
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32577: LD_INT 68
32579: PPUSH
32580: LD_VAR 0 1
32584: PPUSH
32585: CALL_OW 255
32589: PPUSH
32590: CALL_OW 321
32594: PUSH
32595: LD_INT 2
32597: EQUAL
32598: IFFALSE 32610
// eff := 70 else
32600: LD_ADDR_VAR 0 4
32604: PUSH
32605: LD_INT 70
32607: ST_TO_ADDR
32608: GO 32618
// eff := 30 ;
32610: LD_ADDR_VAR 0 4
32614: PUSH
32615: LD_INT 30
32617: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32618: LD_VAR 0 1
32622: PPUSH
32623: CALL_OW 250
32627: PPUSH
32628: LD_VAR 0 1
32632: PPUSH
32633: CALL_OW 251
32637: PPUSH
32638: LD_VAR 0 4
32642: PPUSH
32643: CALL_OW 495
// end ; end ;
32647: LD_VAR 0 2
32651: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32652: LD_INT 0
32654: PPUSH
// end ;
32655: LD_VAR 0 4
32659: RET
// export function SOS_Command ( cmd ) ; begin
32660: LD_INT 0
32662: PPUSH
// end ;
32663: LD_VAR 0 2
32667: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32668: LD_INT 0
32670: PPUSH
// end ;
32671: LD_VAR 0 6
32675: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32676: LD_INT 0
32678: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32679: LD_VAR 0 1
32683: PUSH
32684: LD_INT 250
32686: EQUAL
32687: PUSH
32688: LD_VAR 0 2
32692: PPUSH
32693: CALL_OW 264
32697: PUSH
32698: LD_EXP 143
32702: EQUAL
32703: AND
32704: IFFALSE 32725
// MinerPlaceMine ( unit , x , y ) ;
32706: LD_VAR 0 2
32710: PPUSH
32711: LD_VAR 0 4
32715: PPUSH
32716: LD_VAR 0 5
32720: PPUSH
32721: CALL 35074 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32725: LD_VAR 0 1
32729: PUSH
32730: LD_INT 251
32732: EQUAL
32733: PUSH
32734: LD_VAR 0 2
32738: PPUSH
32739: CALL_OW 264
32743: PUSH
32744: LD_EXP 143
32748: EQUAL
32749: AND
32750: IFFALSE 32771
// MinerDetonateMine ( unit , x , y ) ;
32752: LD_VAR 0 2
32756: PPUSH
32757: LD_VAR 0 4
32761: PPUSH
32762: LD_VAR 0 5
32766: PPUSH
32767: CALL 35351 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32771: LD_VAR 0 1
32775: PUSH
32776: LD_INT 252
32778: EQUAL
32779: PUSH
32780: LD_VAR 0 2
32784: PPUSH
32785: CALL_OW 264
32789: PUSH
32790: LD_EXP 143
32794: EQUAL
32795: AND
32796: IFFALSE 32817
// MinerCreateMinefield ( unit , x , y ) ;
32798: LD_VAR 0 2
32802: PPUSH
32803: LD_VAR 0 4
32807: PPUSH
32808: LD_VAR 0 5
32812: PPUSH
32813: CALL 35768 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32817: LD_VAR 0 1
32821: PUSH
32822: LD_INT 253
32824: EQUAL
32825: PUSH
32826: LD_VAR 0 2
32830: PPUSH
32831: CALL_OW 257
32835: PUSH
32836: LD_INT 5
32838: EQUAL
32839: AND
32840: IFFALSE 32861
// ComBinocular ( unit , x , y ) ;
32842: LD_VAR 0 2
32846: PPUSH
32847: LD_VAR 0 4
32851: PPUSH
32852: LD_VAR 0 5
32856: PPUSH
32857: CALL 36139 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32861: LD_VAR 0 1
32865: PUSH
32866: LD_INT 254
32868: EQUAL
32869: PUSH
32870: LD_VAR 0 2
32874: PPUSH
32875: CALL_OW 264
32879: PUSH
32880: LD_EXP 138
32884: EQUAL
32885: AND
32886: PUSH
32887: LD_VAR 0 3
32891: PPUSH
32892: CALL_OW 263
32896: PUSH
32897: LD_INT 3
32899: EQUAL
32900: AND
32901: IFFALSE 32917
// HackDestroyVehicle ( unit , selectedUnit ) ;
32903: LD_VAR 0 2
32907: PPUSH
32908: LD_VAR 0 3
32912: PPUSH
32913: CALL 34434 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32917: LD_VAR 0 1
32921: PUSH
32922: LD_INT 255
32924: EQUAL
32925: PUSH
32926: LD_VAR 0 2
32930: PPUSH
32931: CALL_OW 264
32935: PUSH
32936: LD_INT 14
32938: PUSH
32939: LD_INT 53
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: IN
32946: AND
32947: PUSH
32948: LD_VAR 0 4
32952: PPUSH
32953: LD_VAR 0 5
32957: PPUSH
32958: CALL_OW 488
32962: AND
32963: IFFALSE 32987
// CutTreeXYR ( unit , x , y , 12 ) ;
32965: LD_VAR 0 2
32969: PPUSH
32970: LD_VAR 0 4
32974: PPUSH
32975: LD_VAR 0 5
32979: PPUSH
32980: LD_INT 12
32982: PPUSH
32983: CALL 33000 0 4
// end ;
32987: LD_VAR 0 6
32991: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32992: LD_INT 0
32994: PPUSH
// end ;
32995: LD_VAR 0 4
32999: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33000: LD_INT 0
33002: PPUSH
33003: PPUSH
33004: PPUSH
33005: PPUSH
33006: PPUSH
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33011: LD_VAR 0 1
33015: NOT
33016: PUSH
33017: LD_VAR 0 2
33021: PPUSH
33022: LD_VAR 0 3
33026: PPUSH
33027: CALL_OW 488
33031: NOT
33032: OR
33033: PUSH
33034: LD_VAR 0 4
33038: NOT
33039: OR
33040: IFFALSE 33044
// exit ;
33042: GO 33384
// list := [ ] ;
33044: LD_ADDR_VAR 0 13
33048: PUSH
33049: EMPTY
33050: ST_TO_ADDR
// if x - r < 0 then
33051: LD_VAR 0 2
33055: PUSH
33056: LD_VAR 0 4
33060: MINUS
33061: PUSH
33062: LD_INT 0
33064: LESS
33065: IFFALSE 33077
// min_x := 0 else
33067: LD_ADDR_VAR 0 7
33071: PUSH
33072: LD_INT 0
33074: ST_TO_ADDR
33075: GO 33093
// min_x := x - r ;
33077: LD_ADDR_VAR 0 7
33081: PUSH
33082: LD_VAR 0 2
33086: PUSH
33087: LD_VAR 0 4
33091: MINUS
33092: ST_TO_ADDR
// if y - r < 0 then
33093: LD_VAR 0 3
33097: PUSH
33098: LD_VAR 0 4
33102: MINUS
33103: PUSH
33104: LD_INT 0
33106: LESS
33107: IFFALSE 33119
// min_y := 0 else
33109: LD_ADDR_VAR 0 8
33113: PUSH
33114: LD_INT 0
33116: ST_TO_ADDR
33117: GO 33135
// min_y := y - r ;
33119: LD_ADDR_VAR 0 8
33123: PUSH
33124: LD_VAR 0 3
33128: PUSH
33129: LD_VAR 0 4
33133: MINUS
33134: ST_TO_ADDR
// max_x := x + r ;
33135: LD_ADDR_VAR 0 9
33139: PUSH
33140: LD_VAR 0 2
33144: PUSH
33145: LD_VAR 0 4
33149: PLUS
33150: ST_TO_ADDR
// max_y := y + r ;
33151: LD_ADDR_VAR 0 10
33155: PUSH
33156: LD_VAR 0 3
33160: PUSH
33161: LD_VAR 0 4
33165: PLUS
33166: ST_TO_ADDR
// for _x = min_x to max_x do
33167: LD_ADDR_VAR 0 11
33171: PUSH
33172: DOUBLE
33173: LD_VAR 0 7
33177: DEC
33178: ST_TO_ADDR
33179: LD_VAR 0 9
33183: PUSH
33184: FOR_TO
33185: IFFALSE 33302
// for _y = min_y to max_y do
33187: LD_ADDR_VAR 0 12
33191: PUSH
33192: DOUBLE
33193: LD_VAR 0 8
33197: DEC
33198: ST_TO_ADDR
33199: LD_VAR 0 10
33203: PUSH
33204: FOR_TO
33205: IFFALSE 33298
// begin if not ValidHex ( _x , _y ) then
33207: LD_VAR 0 11
33211: PPUSH
33212: LD_VAR 0 12
33216: PPUSH
33217: CALL_OW 488
33221: NOT
33222: IFFALSE 33226
// continue ;
33224: GO 33204
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33226: LD_VAR 0 11
33230: PPUSH
33231: LD_VAR 0 12
33235: PPUSH
33236: CALL_OW 351
33240: PUSH
33241: LD_VAR 0 11
33245: PPUSH
33246: LD_VAR 0 12
33250: PPUSH
33251: CALL_OW 554
33255: AND
33256: IFFALSE 33296
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33258: LD_ADDR_VAR 0 13
33262: PUSH
33263: LD_VAR 0 13
33267: PPUSH
33268: LD_VAR 0 13
33272: PUSH
33273: LD_INT 1
33275: PLUS
33276: PPUSH
33277: LD_VAR 0 11
33281: PUSH
33282: LD_VAR 0 12
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PPUSH
33291: CALL_OW 2
33295: ST_TO_ADDR
// end ;
33296: GO 33204
33298: POP
33299: POP
33300: GO 33184
33302: POP
33303: POP
// if not list then
33304: LD_VAR 0 13
33308: NOT
33309: IFFALSE 33313
// exit ;
33311: GO 33384
// for i in list do
33313: LD_ADDR_VAR 0 6
33317: PUSH
33318: LD_VAR 0 13
33322: PUSH
33323: FOR_IN
33324: IFFALSE 33382
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33326: LD_VAR 0 1
33330: PPUSH
33331: LD_STRING M
33333: PUSH
33334: LD_VAR 0 6
33338: PUSH
33339: LD_INT 1
33341: ARRAY
33342: PUSH
33343: LD_VAR 0 6
33347: PUSH
33348: LD_INT 2
33350: ARRAY
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: PPUSH
33376: CALL_OW 447
33380: GO 33323
33382: POP
33383: POP
// end ;
33384: LD_VAR 0 5
33388: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33389: LD_EXP 126
33393: NOT
33394: IFFALSE 33444
33396: GO 33398
33398: DISABLE
// begin initHack := true ;
33399: LD_ADDR_EXP 126
33403: PUSH
33404: LD_INT 1
33406: ST_TO_ADDR
// hackTanks := [ ] ;
33407: LD_ADDR_EXP 127
33411: PUSH
33412: EMPTY
33413: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33414: LD_ADDR_EXP 128
33418: PUSH
33419: EMPTY
33420: ST_TO_ADDR
// hackLimit := 3 ;
33421: LD_ADDR_EXP 129
33425: PUSH
33426: LD_INT 3
33428: ST_TO_ADDR
// hackDist := 12 ;
33429: LD_ADDR_EXP 130
33433: PUSH
33434: LD_INT 12
33436: ST_TO_ADDR
// hackCounter := [ ] ;
33437: LD_ADDR_EXP 131
33441: PUSH
33442: EMPTY
33443: ST_TO_ADDR
// end ;
33444: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33445: LD_EXP 126
33449: PUSH
33450: LD_INT 34
33452: PUSH
33453: LD_EXP 138
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PPUSH
33462: CALL_OW 69
33466: AND
33467: IFFALSE 33722
33469: GO 33471
33471: DISABLE
33472: LD_INT 0
33474: PPUSH
33475: PPUSH
// begin enable ;
33476: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33477: LD_ADDR_VAR 0 1
33481: PUSH
33482: LD_INT 34
33484: PUSH
33485: LD_EXP 138
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PPUSH
33494: CALL_OW 69
33498: PUSH
33499: FOR_IN
33500: IFFALSE 33720
// begin if not i in hackTanks then
33502: LD_VAR 0 1
33506: PUSH
33507: LD_EXP 127
33511: IN
33512: NOT
33513: IFFALSE 33596
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33515: LD_ADDR_EXP 127
33519: PUSH
33520: LD_EXP 127
33524: PPUSH
33525: LD_EXP 127
33529: PUSH
33530: LD_INT 1
33532: PLUS
33533: PPUSH
33534: LD_VAR 0 1
33538: PPUSH
33539: CALL_OW 1
33543: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33544: LD_ADDR_EXP 128
33548: PUSH
33549: LD_EXP 128
33553: PPUSH
33554: LD_EXP 128
33558: PUSH
33559: LD_INT 1
33561: PLUS
33562: PPUSH
33563: EMPTY
33564: PPUSH
33565: CALL_OW 1
33569: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33570: LD_ADDR_EXP 131
33574: PUSH
33575: LD_EXP 131
33579: PPUSH
33580: LD_EXP 131
33584: PUSH
33585: LD_INT 1
33587: PLUS
33588: PPUSH
33589: EMPTY
33590: PPUSH
33591: CALL_OW 1
33595: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33596: LD_VAR 0 1
33600: PPUSH
33601: CALL_OW 302
33605: NOT
33606: IFFALSE 33619
// begin HackUnlinkAll ( i ) ;
33608: LD_VAR 0 1
33612: PPUSH
33613: CALL 33725 0 1
// continue ;
33617: GO 33499
// end ; HackCheckCapturedStatus ( i ) ;
33619: LD_VAR 0 1
33623: PPUSH
33624: CALL 34168 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33628: LD_ADDR_VAR 0 2
33632: PUSH
33633: LD_INT 81
33635: PUSH
33636: LD_VAR 0 1
33640: PPUSH
33641: CALL_OW 255
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 33
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 91
33662: PUSH
33663: LD_VAR 0 1
33667: PUSH
33668: LD_EXP 130
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 50
33680: PUSH
33681: EMPTY
33682: LIST
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: PPUSH
33690: CALL_OW 69
33694: ST_TO_ADDR
// if not tmp then
33695: LD_VAR 0 2
33699: NOT
33700: IFFALSE 33704
// continue ;
33702: GO 33499
// HackLink ( i , tmp ) ;
33704: LD_VAR 0 1
33708: PPUSH
33709: LD_VAR 0 2
33713: PPUSH
33714: CALL 33861 0 2
// end ;
33718: GO 33499
33720: POP
33721: POP
// end ;
33722: PPOPN 2
33724: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33725: LD_INT 0
33727: PPUSH
33728: PPUSH
33729: PPUSH
// if not hack in hackTanks then
33730: LD_VAR 0 1
33734: PUSH
33735: LD_EXP 127
33739: IN
33740: NOT
33741: IFFALSE 33745
// exit ;
33743: GO 33856
// index := GetElementIndex ( hackTanks , hack ) ;
33745: LD_ADDR_VAR 0 4
33749: PUSH
33750: LD_EXP 127
33754: PPUSH
33755: LD_VAR 0 1
33759: PPUSH
33760: CALL 41498 0 2
33764: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33765: LD_EXP 128
33769: PUSH
33770: LD_VAR 0 4
33774: ARRAY
33775: IFFALSE 33856
// begin for i in hackTanksCaptured [ index ] do
33777: LD_ADDR_VAR 0 3
33781: PUSH
33782: LD_EXP 128
33786: PUSH
33787: LD_VAR 0 4
33791: ARRAY
33792: PUSH
33793: FOR_IN
33794: IFFALSE 33820
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33796: LD_VAR 0 3
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: PPUSH
33805: LD_VAR 0 3
33809: PUSH
33810: LD_INT 2
33812: ARRAY
33813: PPUSH
33814: CALL_OW 235
33818: GO 33793
33820: POP
33821: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33822: LD_ADDR_EXP 128
33826: PUSH
33827: LD_EXP 128
33831: PPUSH
33832: LD_VAR 0 4
33836: PPUSH
33837: EMPTY
33838: PPUSH
33839: CALL_OW 1
33843: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33844: LD_VAR 0 1
33848: PPUSH
33849: LD_INT 0
33851: PPUSH
33852: CALL_OW 505
// end ; end ;
33856: LD_VAR 0 2
33860: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33861: LD_INT 0
33863: PPUSH
33864: PPUSH
33865: PPUSH
// if not hack in hackTanks or not vehicles then
33866: LD_VAR 0 1
33870: PUSH
33871: LD_EXP 127
33875: IN
33876: NOT
33877: PUSH
33878: LD_VAR 0 2
33882: NOT
33883: OR
33884: IFFALSE 33888
// exit ;
33886: GO 34163
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33888: LD_ADDR_VAR 0 2
33892: PUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: LD_VAR 0 2
33902: PPUSH
33903: LD_INT 1
33905: PPUSH
33906: LD_INT 1
33908: PPUSH
33909: CALL 42148 0 4
33913: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33914: LD_ADDR_VAR 0 5
33918: PUSH
33919: LD_EXP 127
33923: PPUSH
33924: LD_VAR 0 1
33928: PPUSH
33929: CALL 41498 0 2
33933: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33934: LD_EXP 128
33938: PUSH
33939: LD_VAR 0 5
33943: ARRAY
33944: PUSH
33945: LD_EXP 129
33949: LESS
33950: IFFALSE 34139
// begin for i := 1 to vehicles do
33952: LD_ADDR_VAR 0 4
33956: PUSH
33957: DOUBLE
33958: LD_INT 1
33960: DEC
33961: ST_TO_ADDR
33962: LD_VAR 0 2
33966: PUSH
33967: FOR_TO
33968: IFFALSE 34137
// begin if hackTanksCaptured [ index ] = hackLimit then
33970: LD_EXP 128
33974: PUSH
33975: LD_VAR 0 5
33979: ARRAY
33980: PUSH
33981: LD_EXP 129
33985: EQUAL
33986: IFFALSE 33990
// break ;
33988: GO 34137
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33990: LD_ADDR_EXP 131
33994: PUSH
33995: LD_EXP 131
33999: PPUSH
34000: LD_VAR 0 5
34004: PPUSH
34005: LD_EXP 131
34009: PUSH
34010: LD_VAR 0 5
34014: ARRAY
34015: PUSH
34016: LD_INT 1
34018: PLUS
34019: PPUSH
34020: CALL_OW 1
34024: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34025: LD_ADDR_EXP 128
34029: PUSH
34030: LD_EXP 128
34034: PPUSH
34035: LD_VAR 0 5
34039: PUSH
34040: LD_EXP 128
34044: PUSH
34045: LD_VAR 0 5
34049: ARRAY
34050: PUSH
34051: LD_INT 1
34053: PLUS
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PPUSH
34059: LD_VAR 0 2
34063: PUSH
34064: LD_VAR 0 4
34068: ARRAY
34069: PUSH
34070: LD_VAR 0 2
34074: PUSH
34075: LD_VAR 0 4
34079: ARRAY
34080: PPUSH
34081: CALL_OW 255
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PPUSH
34090: CALL 41713 0 3
34094: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34095: LD_VAR 0 2
34099: PUSH
34100: LD_VAR 0 4
34104: ARRAY
34105: PPUSH
34106: LD_VAR 0 1
34110: PPUSH
34111: CALL_OW 255
34115: PPUSH
34116: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34120: LD_VAR 0 2
34124: PUSH
34125: LD_VAR 0 4
34129: ARRAY
34130: PPUSH
34131: CALL_OW 141
// end ;
34135: GO 33967
34137: POP
34138: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34139: LD_VAR 0 1
34143: PPUSH
34144: LD_EXP 128
34148: PUSH
34149: LD_VAR 0 5
34153: ARRAY
34154: PUSH
34155: LD_INT 0
34157: PLUS
34158: PPUSH
34159: CALL_OW 505
// end ;
34163: LD_VAR 0 3
34167: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34168: LD_INT 0
34170: PPUSH
34171: PPUSH
34172: PPUSH
34173: PPUSH
// if not hack in hackTanks then
34174: LD_VAR 0 1
34178: PUSH
34179: LD_EXP 127
34183: IN
34184: NOT
34185: IFFALSE 34189
// exit ;
34187: GO 34429
// index := GetElementIndex ( hackTanks , hack ) ;
34189: LD_ADDR_VAR 0 4
34193: PUSH
34194: LD_EXP 127
34198: PPUSH
34199: LD_VAR 0 1
34203: PPUSH
34204: CALL 41498 0 2
34208: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: DOUBLE
34215: LD_EXP 128
34219: PUSH
34220: LD_VAR 0 4
34224: ARRAY
34225: INC
34226: ST_TO_ADDR
34227: LD_INT 1
34229: PUSH
34230: FOR_DOWNTO
34231: IFFALSE 34403
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34233: LD_ADDR_VAR 0 5
34237: PUSH
34238: LD_EXP 128
34242: PUSH
34243: LD_VAR 0 4
34247: ARRAY
34248: PUSH
34249: LD_VAR 0 3
34253: ARRAY
34254: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34255: LD_VAR 0 5
34259: PUSH
34260: LD_INT 1
34262: ARRAY
34263: PPUSH
34264: CALL_OW 302
34268: NOT
34269: PUSH
34270: LD_VAR 0 5
34274: PUSH
34275: LD_INT 1
34277: ARRAY
34278: PPUSH
34279: CALL_OW 255
34283: PUSH
34284: LD_VAR 0 1
34288: PPUSH
34289: CALL_OW 255
34293: NONEQUAL
34294: OR
34295: IFFALSE 34401
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34297: LD_VAR 0 5
34301: PUSH
34302: LD_INT 1
34304: ARRAY
34305: PPUSH
34306: CALL_OW 305
34310: PUSH
34311: LD_VAR 0 5
34315: PUSH
34316: LD_INT 1
34318: ARRAY
34319: PPUSH
34320: CALL_OW 255
34324: PUSH
34325: LD_VAR 0 1
34329: PPUSH
34330: CALL_OW 255
34334: EQUAL
34335: AND
34336: IFFALSE 34360
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34338: LD_VAR 0 5
34342: PUSH
34343: LD_INT 1
34345: ARRAY
34346: PPUSH
34347: LD_VAR 0 5
34351: PUSH
34352: LD_INT 2
34354: ARRAY
34355: PPUSH
34356: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34360: LD_ADDR_EXP 128
34364: PUSH
34365: LD_EXP 128
34369: PPUSH
34370: LD_VAR 0 4
34374: PPUSH
34375: LD_EXP 128
34379: PUSH
34380: LD_VAR 0 4
34384: ARRAY
34385: PPUSH
34386: LD_VAR 0 3
34390: PPUSH
34391: CALL_OW 3
34395: PPUSH
34396: CALL_OW 1
34400: ST_TO_ADDR
// end ; end ;
34401: GO 34230
34403: POP
34404: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34405: LD_VAR 0 1
34409: PPUSH
34410: LD_EXP 128
34414: PUSH
34415: LD_VAR 0 4
34419: ARRAY
34420: PUSH
34421: LD_INT 0
34423: PLUS
34424: PPUSH
34425: CALL_OW 505
// end ;
34429: LD_VAR 0 2
34433: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34434: LD_INT 0
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
// if not hack in hackTanks then
34440: LD_VAR 0 1
34444: PUSH
34445: LD_EXP 127
34449: IN
34450: NOT
34451: IFFALSE 34455
// exit ;
34453: GO 34540
// index := GetElementIndex ( hackTanks , hack ) ;
34455: LD_ADDR_VAR 0 5
34459: PUSH
34460: LD_EXP 127
34464: PPUSH
34465: LD_VAR 0 1
34469: PPUSH
34470: CALL 41498 0 2
34474: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34475: LD_ADDR_VAR 0 4
34479: PUSH
34480: DOUBLE
34481: LD_INT 1
34483: DEC
34484: ST_TO_ADDR
34485: LD_EXP 128
34489: PUSH
34490: LD_VAR 0 5
34494: ARRAY
34495: PUSH
34496: FOR_TO
34497: IFFALSE 34538
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34499: LD_EXP 128
34503: PUSH
34504: LD_VAR 0 5
34508: ARRAY
34509: PUSH
34510: LD_VAR 0 4
34514: ARRAY
34515: PUSH
34516: LD_INT 1
34518: ARRAY
34519: PUSH
34520: LD_VAR 0 2
34524: EQUAL
34525: IFFALSE 34536
// KillUnit ( vehicle ) ;
34527: LD_VAR 0 2
34531: PPUSH
34532: CALL_OW 66
34536: GO 34496
34538: POP
34539: POP
// end ;
34540: LD_VAR 0 3
34544: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34545: LD_EXP 132
34549: NOT
34550: IFFALSE 34585
34552: GO 34554
34554: DISABLE
// begin initMiner := true ;
34555: LD_ADDR_EXP 132
34559: PUSH
34560: LD_INT 1
34562: ST_TO_ADDR
// minersList := [ ] ;
34563: LD_ADDR_EXP 133
34567: PUSH
34568: EMPTY
34569: ST_TO_ADDR
// minerMinesList := [ ] ;
34570: LD_ADDR_EXP 134
34574: PUSH
34575: EMPTY
34576: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34577: LD_ADDR_EXP 135
34581: PUSH
34582: LD_INT 5
34584: ST_TO_ADDR
// end ;
34585: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34586: LD_EXP 132
34590: PUSH
34591: LD_INT 34
34593: PUSH
34594: LD_EXP 143
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PPUSH
34603: CALL_OW 69
34607: AND
34608: IFFALSE 35071
34610: GO 34612
34612: DISABLE
34613: LD_INT 0
34615: PPUSH
34616: PPUSH
34617: PPUSH
34618: PPUSH
// begin enable ;
34619: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34620: LD_ADDR_VAR 0 1
34624: PUSH
34625: LD_INT 34
34627: PUSH
34628: LD_EXP 143
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PPUSH
34637: CALL_OW 69
34641: PUSH
34642: FOR_IN
34643: IFFALSE 34715
// begin if not i in minersList then
34645: LD_VAR 0 1
34649: PUSH
34650: LD_EXP 133
34654: IN
34655: NOT
34656: IFFALSE 34713
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34658: LD_ADDR_EXP 133
34662: PUSH
34663: LD_EXP 133
34667: PPUSH
34668: LD_EXP 133
34672: PUSH
34673: LD_INT 1
34675: PLUS
34676: PPUSH
34677: LD_VAR 0 1
34681: PPUSH
34682: CALL_OW 1
34686: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34687: LD_ADDR_EXP 134
34691: PUSH
34692: LD_EXP 134
34696: PPUSH
34697: LD_EXP 134
34701: PUSH
34702: LD_INT 1
34704: PLUS
34705: PPUSH
34706: EMPTY
34707: PPUSH
34708: CALL_OW 1
34712: ST_TO_ADDR
// end end ;
34713: GO 34642
34715: POP
34716: POP
// for i := minerMinesList downto 1 do
34717: LD_ADDR_VAR 0 1
34721: PUSH
34722: DOUBLE
34723: LD_EXP 134
34727: INC
34728: ST_TO_ADDR
34729: LD_INT 1
34731: PUSH
34732: FOR_DOWNTO
34733: IFFALSE 35069
// begin if IsLive ( minersList [ i ] ) then
34735: LD_EXP 133
34739: PUSH
34740: LD_VAR 0 1
34744: ARRAY
34745: PPUSH
34746: CALL_OW 300
34750: IFFALSE 34778
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34752: LD_EXP 133
34756: PUSH
34757: LD_VAR 0 1
34761: ARRAY
34762: PPUSH
34763: LD_EXP 134
34767: PUSH
34768: LD_VAR 0 1
34772: ARRAY
34773: PPUSH
34774: CALL_OW 505
// if not minerMinesList [ i ] then
34778: LD_EXP 134
34782: PUSH
34783: LD_VAR 0 1
34787: ARRAY
34788: NOT
34789: IFFALSE 34793
// continue ;
34791: GO 34732
// for j := minerMinesList [ i ] downto 1 do
34793: LD_ADDR_VAR 0 2
34797: PUSH
34798: DOUBLE
34799: LD_EXP 134
34803: PUSH
34804: LD_VAR 0 1
34808: ARRAY
34809: INC
34810: ST_TO_ADDR
34811: LD_INT 1
34813: PUSH
34814: FOR_DOWNTO
34815: IFFALSE 35065
// begin side := GetSide ( minersList [ i ] ) ;
34817: LD_ADDR_VAR 0 3
34821: PUSH
34822: LD_EXP 133
34826: PUSH
34827: LD_VAR 0 1
34831: ARRAY
34832: PPUSH
34833: CALL_OW 255
34837: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34838: LD_ADDR_VAR 0 4
34842: PUSH
34843: LD_EXP 134
34847: PUSH
34848: LD_VAR 0 1
34852: ARRAY
34853: PUSH
34854: LD_VAR 0 2
34858: ARRAY
34859: PUSH
34860: LD_INT 1
34862: ARRAY
34863: PPUSH
34864: LD_EXP 134
34868: PUSH
34869: LD_VAR 0 1
34873: ARRAY
34874: PUSH
34875: LD_VAR 0 2
34879: ARRAY
34880: PUSH
34881: LD_INT 2
34883: ARRAY
34884: PPUSH
34885: CALL_OW 428
34889: ST_TO_ADDR
// if not tmp then
34890: LD_VAR 0 4
34894: NOT
34895: IFFALSE 34899
// continue ;
34897: GO 34814
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34899: LD_VAR 0 4
34903: PUSH
34904: LD_INT 81
34906: PUSH
34907: LD_VAR 0 3
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PPUSH
34916: CALL_OW 69
34920: IN
34921: PUSH
34922: LD_EXP 134
34926: PUSH
34927: LD_VAR 0 1
34931: ARRAY
34932: PUSH
34933: LD_VAR 0 2
34937: ARRAY
34938: PUSH
34939: LD_INT 1
34941: ARRAY
34942: PPUSH
34943: LD_EXP 134
34947: PUSH
34948: LD_VAR 0 1
34952: ARRAY
34953: PUSH
34954: LD_VAR 0 2
34958: ARRAY
34959: PUSH
34960: LD_INT 2
34962: ARRAY
34963: PPUSH
34964: CALL_OW 458
34968: AND
34969: IFFALSE 35063
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34971: LD_EXP 134
34975: PUSH
34976: LD_VAR 0 1
34980: ARRAY
34981: PUSH
34982: LD_VAR 0 2
34986: ARRAY
34987: PUSH
34988: LD_INT 1
34990: ARRAY
34991: PPUSH
34992: LD_EXP 134
34996: PUSH
34997: LD_VAR 0 1
35001: ARRAY
35002: PUSH
35003: LD_VAR 0 2
35007: ARRAY
35008: PUSH
35009: LD_INT 2
35011: ARRAY
35012: PPUSH
35013: LD_VAR 0 3
35017: PPUSH
35018: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35022: LD_ADDR_EXP 134
35026: PUSH
35027: LD_EXP 134
35031: PPUSH
35032: LD_VAR 0 1
35036: PPUSH
35037: LD_EXP 134
35041: PUSH
35042: LD_VAR 0 1
35046: ARRAY
35047: PPUSH
35048: LD_VAR 0 2
35052: PPUSH
35053: CALL_OW 3
35057: PPUSH
35058: CALL_OW 1
35062: ST_TO_ADDR
// end ; end ;
35063: GO 34814
35065: POP
35066: POP
// end ;
35067: GO 34732
35069: POP
35070: POP
// end ;
35071: PPOPN 4
35073: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35074: LD_INT 0
35076: PPUSH
35077: PPUSH
// result := false ;
35078: LD_ADDR_VAR 0 4
35082: PUSH
35083: LD_INT 0
35085: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35086: LD_VAR 0 1
35090: PPUSH
35091: CALL_OW 264
35095: PUSH
35096: LD_EXP 143
35100: EQUAL
35101: NOT
35102: IFFALSE 35106
// exit ;
35104: GO 35346
// index := GetElementIndex ( minersList , unit ) ;
35106: LD_ADDR_VAR 0 5
35110: PUSH
35111: LD_EXP 133
35115: PPUSH
35116: LD_VAR 0 1
35120: PPUSH
35121: CALL 41498 0 2
35125: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35126: LD_EXP 134
35130: PUSH
35131: LD_VAR 0 5
35135: ARRAY
35136: PUSH
35137: LD_EXP 135
35141: GREATEREQUAL
35142: IFFALSE 35146
// exit ;
35144: GO 35346
// ComMoveXY ( unit , x , y ) ;
35146: LD_VAR 0 1
35150: PPUSH
35151: LD_VAR 0 2
35155: PPUSH
35156: LD_VAR 0 3
35160: PPUSH
35161: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35165: LD_INT 35
35167: PPUSH
35168: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35172: LD_VAR 0 1
35176: PPUSH
35177: LD_VAR 0 2
35181: PPUSH
35182: LD_VAR 0 3
35186: PPUSH
35187: CALL 72270 0 3
35191: NOT
35192: PUSH
35193: LD_VAR 0 1
35197: PPUSH
35198: CALL_OW 314
35202: AND
35203: IFFALSE 35207
// exit ;
35205: GO 35346
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35207: LD_VAR 0 2
35211: PPUSH
35212: LD_VAR 0 3
35216: PPUSH
35217: CALL_OW 428
35221: PUSH
35222: LD_VAR 0 1
35226: EQUAL
35227: PUSH
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 314
35237: NOT
35238: AND
35239: IFFALSE 35165
// PlaySoundXY ( x , y , PlantMine ) ;
35241: LD_VAR 0 2
35245: PPUSH
35246: LD_VAR 0 3
35250: PPUSH
35251: LD_STRING PlantMine
35253: PPUSH
35254: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35258: LD_VAR 0 2
35262: PPUSH
35263: LD_VAR 0 3
35267: PPUSH
35268: LD_VAR 0 1
35272: PPUSH
35273: CALL_OW 255
35277: PPUSH
35278: LD_INT 0
35280: PPUSH
35281: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35285: LD_ADDR_EXP 134
35289: PUSH
35290: LD_EXP 134
35294: PPUSH
35295: LD_VAR 0 5
35299: PUSH
35300: LD_EXP 134
35304: PUSH
35305: LD_VAR 0 5
35309: ARRAY
35310: PUSH
35311: LD_INT 1
35313: PLUS
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PPUSH
35319: LD_VAR 0 2
35323: PUSH
35324: LD_VAR 0 3
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PPUSH
35333: CALL 41713 0 3
35337: ST_TO_ADDR
// result := true ;
35338: LD_ADDR_VAR 0 4
35342: PUSH
35343: LD_INT 1
35345: ST_TO_ADDR
// end ;
35346: LD_VAR 0 4
35350: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35351: LD_INT 0
35353: PPUSH
35354: PPUSH
35355: PPUSH
// if not unit in minersList then
35356: LD_VAR 0 1
35360: PUSH
35361: LD_EXP 133
35365: IN
35366: NOT
35367: IFFALSE 35371
// exit ;
35369: GO 35763
// index := GetElementIndex ( minersList , unit ) ;
35371: LD_ADDR_VAR 0 6
35375: PUSH
35376: LD_EXP 133
35380: PPUSH
35381: LD_VAR 0 1
35385: PPUSH
35386: CALL 41498 0 2
35390: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35391: LD_ADDR_VAR 0 5
35395: PUSH
35396: DOUBLE
35397: LD_EXP 134
35401: PUSH
35402: LD_VAR 0 6
35406: ARRAY
35407: INC
35408: ST_TO_ADDR
35409: LD_INT 1
35411: PUSH
35412: FOR_DOWNTO
35413: IFFALSE 35574
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35415: LD_EXP 134
35419: PUSH
35420: LD_VAR 0 6
35424: ARRAY
35425: PUSH
35426: LD_VAR 0 5
35430: ARRAY
35431: PUSH
35432: LD_INT 1
35434: ARRAY
35435: PUSH
35436: LD_VAR 0 2
35440: EQUAL
35441: PUSH
35442: LD_EXP 134
35446: PUSH
35447: LD_VAR 0 6
35451: ARRAY
35452: PUSH
35453: LD_VAR 0 5
35457: ARRAY
35458: PUSH
35459: LD_INT 2
35461: ARRAY
35462: PUSH
35463: LD_VAR 0 3
35467: EQUAL
35468: AND
35469: IFFALSE 35572
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35471: LD_EXP 134
35475: PUSH
35476: LD_VAR 0 6
35480: ARRAY
35481: PUSH
35482: LD_VAR 0 5
35486: ARRAY
35487: PUSH
35488: LD_INT 1
35490: ARRAY
35491: PPUSH
35492: LD_EXP 134
35496: PUSH
35497: LD_VAR 0 6
35501: ARRAY
35502: PUSH
35503: LD_VAR 0 5
35507: ARRAY
35508: PUSH
35509: LD_INT 2
35511: ARRAY
35512: PPUSH
35513: LD_VAR 0 1
35517: PPUSH
35518: CALL_OW 255
35522: PPUSH
35523: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35527: LD_ADDR_EXP 134
35531: PUSH
35532: LD_EXP 134
35536: PPUSH
35537: LD_VAR 0 6
35541: PPUSH
35542: LD_EXP 134
35546: PUSH
35547: LD_VAR 0 6
35551: ARRAY
35552: PPUSH
35553: LD_VAR 0 5
35557: PPUSH
35558: CALL_OW 3
35562: PPUSH
35563: CALL_OW 1
35567: ST_TO_ADDR
// exit ;
35568: POP
35569: POP
35570: GO 35763
// end ; end ;
35572: GO 35412
35574: POP
35575: POP
// for i := minerMinesList [ index ] downto 1 do
35576: LD_ADDR_VAR 0 5
35580: PUSH
35581: DOUBLE
35582: LD_EXP 134
35586: PUSH
35587: LD_VAR 0 6
35591: ARRAY
35592: INC
35593: ST_TO_ADDR
35594: LD_INT 1
35596: PUSH
35597: FOR_DOWNTO
35598: IFFALSE 35761
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35600: LD_EXP 134
35604: PUSH
35605: LD_VAR 0 6
35609: ARRAY
35610: PUSH
35611: LD_VAR 0 5
35615: ARRAY
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: PPUSH
35621: LD_EXP 134
35625: PUSH
35626: LD_VAR 0 6
35630: ARRAY
35631: PUSH
35632: LD_VAR 0 5
35636: ARRAY
35637: PUSH
35638: LD_INT 2
35640: ARRAY
35641: PPUSH
35642: LD_VAR 0 2
35646: PPUSH
35647: LD_VAR 0 3
35651: PPUSH
35652: CALL_OW 298
35656: PUSH
35657: LD_INT 6
35659: LESS
35660: IFFALSE 35759
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35662: LD_EXP 134
35666: PUSH
35667: LD_VAR 0 6
35671: ARRAY
35672: PUSH
35673: LD_VAR 0 5
35677: ARRAY
35678: PUSH
35679: LD_INT 1
35681: ARRAY
35682: PPUSH
35683: LD_EXP 134
35687: PUSH
35688: LD_VAR 0 6
35692: ARRAY
35693: PUSH
35694: LD_VAR 0 5
35698: ARRAY
35699: PUSH
35700: LD_INT 2
35702: ARRAY
35703: PPUSH
35704: LD_VAR 0 1
35708: PPUSH
35709: CALL_OW 255
35713: PPUSH
35714: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35718: LD_ADDR_EXP 134
35722: PUSH
35723: LD_EXP 134
35727: PPUSH
35728: LD_VAR 0 6
35732: PPUSH
35733: LD_EXP 134
35737: PUSH
35738: LD_VAR 0 6
35742: ARRAY
35743: PPUSH
35744: LD_VAR 0 5
35748: PPUSH
35749: CALL_OW 3
35753: PPUSH
35754: CALL_OW 1
35758: ST_TO_ADDR
// end ; end ;
35759: GO 35597
35761: POP
35762: POP
// end ;
35763: LD_VAR 0 4
35767: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35768: LD_INT 0
35770: PPUSH
35771: PPUSH
35772: PPUSH
35773: PPUSH
35774: PPUSH
35775: PPUSH
35776: PPUSH
35777: PPUSH
35778: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35779: LD_VAR 0 1
35783: PPUSH
35784: CALL_OW 264
35788: PUSH
35789: LD_EXP 143
35793: EQUAL
35794: NOT
35795: PUSH
35796: LD_VAR 0 1
35800: PUSH
35801: LD_EXP 133
35805: IN
35806: NOT
35807: OR
35808: IFFALSE 35812
// exit ;
35810: GO 36134
// index := GetElementIndex ( minersList , unit ) ;
35812: LD_ADDR_VAR 0 6
35816: PUSH
35817: LD_EXP 133
35821: PPUSH
35822: LD_VAR 0 1
35826: PPUSH
35827: CALL 41498 0 2
35831: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35832: LD_ADDR_VAR 0 8
35836: PUSH
35837: LD_EXP 135
35841: PUSH
35842: LD_EXP 134
35846: PUSH
35847: LD_VAR 0 6
35851: ARRAY
35852: MINUS
35853: ST_TO_ADDR
// if not minesFreeAmount then
35854: LD_VAR 0 8
35858: NOT
35859: IFFALSE 35863
// exit ;
35861: GO 36134
// tmp := [ ] ;
35863: LD_ADDR_VAR 0 7
35867: PUSH
35868: EMPTY
35869: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35870: LD_ADDR_VAR 0 5
35874: PUSH
35875: DOUBLE
35876: LD_INT 1
35878: DEC
35879: ST_TO_ADDR
35880: LD_VAR 0 8
35884: PUSH
35885: FOR_TO
35886: IFFALSE 36081
// begin _d := rand ( 0 , 5 ) ;
35888: LD_ADDR_VAR 0 11
35892: PUSH
35893: LD_INT 0
35895: PPUSH
35896: LD_INT 5
35898: PPUSH
35899: CALL_OW 12
35903: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35904: LD_ADDR_VAR 0 12
35908: PUSH
35909: LD_INT 2
35911: PPUSH
35912: LD_INT 6
35914: PPUSH
35915: CALL_OW 12
35919: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35920: LD_ADDR_VAR 0 9
35924: PUSH
35925: LD_VAR 0 2
35929: PPUSH
35930: LD_VAR 0 11
35934: PPUSH
35935: LD_VAR 0 12
35939: PPUSH
35940: CALL_OW 272
35944: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35945: LD_ADDR_VAR 0 10
35949: PUSH
35950: LD_VAR 0 3
35954: PPUSH
35955: LD_VAR 0 11
35959: PPUSH
35960: LD_VAR 0 12
35964: PPUSH
35965: CALL_OW 273
35969: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35970: LD_VAR 0 9
35974: PPUSH
35975: LD_VAR 0 10
35979: PPUSH
35980: CALL_OW 488
35984: PUSH
35985: LD_VAR 0 9
35989: PUSH
35990: LD_VAR 0 10
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_VAR 0 7
36003: IN
36004: NOT
36005: AND
36006: PUSH
36007: LD_VAR 0 9
36011: PPUSH
36012: LD_VAR 0 10
36016: PPUSH
36017: CALL_OW 458
36021: NOT
36022: AND
36023: IFFALSE 36065
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36025: LD_ADDR_VAR 0 7
36029: PUSH
36030: LD_VAR 0 7
36034: PPUSH
36035: LD_VAR 0 7
36039: PUSH
36040: LD_INT 1
36042: PLUS
36043: PPUSH
36044: LD_VAR 0 9
36048: PUSH
36049: LD_VAR 0 10
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PPUSH
36058: CALL_OW 1
36062: ST_TO_ADDR
36063: GO 36079
// i := i - 1 ;
36065: LD_ADDR_VAR 0 5
36069: PUSH
36070: LD_VAR 0 5
36074: PUSH
36075: LD_INT 1
36077: MINUS
36078: ST_TO_ADDR
// end ;
36079: GO 35885
36081: POP
36082: POP
// for i in tmp do
36083: LD_ADDR_VAR 0 5
36087: PUSH
36088: LD_VAR 0 7
36092: PUSH
36093: FOR_IN
36094: IFFALSE 36132
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36096: LD_VAR 0 1
36100: PPUSH
36101: LD_VAR 0 5
36105: PUSH
36106: LD_INT 1
36108: ARRAY
36109: PPUSH
36110: LD_VAR 0 5
36114: PUSH
36115: LD_INT 2
36117: ARRAY
36118: PPUSH
36119: CALL 35074 0 3
36123: NOT
36124: IFFALSE 36130
// exit ;
36126: POP
36127: POP
36128: GO 36134
36130: GO 36093
36132: POP
36133: POP
// end ;
36134: LD_VAR 0 4
36138: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36139: LD_INT 0
36141: PPUSH
36142: PPUSH
36143: PPUSH
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
// if not GetClass ( unit ) = class_sniper then
36148: LD_VAR 0 1
36152: PPUSH
36153: CALL_OW 257
36157: PUSH
36158: LD_INT 5
36160: EQUAL
36161: NOT
36162: IFFALSE 36166
// exit ;
36164: GO 36554
// dist := 8 ;
36166: LD_ADDR_VAR 0 5
36170: PUSH
36171: LD_INT 8
36173: ST_TO_ADDR
// viewRange := 12 ;
36174: LD_ADDR_VAR 0 7
36178: PUSH
36179: LD_INT 12
36181: ST_TO_ADDR
// side := GetSide ( unit ) ;
36182: LD_ADDR_VAR 0 6
36186: PUSH
36187: LD_VAR 0 1
36191: PPUSH
36192: CALL_OW 255
36196: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36197: LD_INT 61
36199: PPUSH
36200: LD_VAR 0 6
36204: PPUSH
36205: CALL_OW 321
36209: PUSH
36210: LD_INT 2
36212: EQUAL
36213: IFFALSE 36223
// viewRange := 16 ;
36215: LD_ADDR_VAR 0 7
36219: PUSH
36220: LD_INT 16
36222: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36223: LD_VAR 0 1
36227: PPUSH
36228: LD_VAR 0 2
36232: PPUSH
36233: LD_VAR 0 3
36237: PPUSH
36238: CALL_OW 297
36242: PUSH
36243: LD_VAR 0 5
36247: GREATER
36248: IFFALSE 36327
// begin ComMoveXY ( unit , x , y ) ;
36250: LD_VAR 0 1
36254: PPUSH
36255: LD_VAR 0 2
36259: PPUSH
36260: LD_VAR 0 3
36264: PPUSH
36265: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36269: LD_INT 35
36271: PPUSH
36272: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36276: LD_VAR 0 1
36280: PPUSH
36281: LD_VAR 0 2
36285: PPUSH
36286: LD_VAR 0 3
36290: PPUSH
36291: CALL 72270 0 3
36295: NOT
36296: IFFALSE 36300
// exit ;
36298: GO 36554
// until GetDistUnitXY ( unit , x , y ) < dist ;
36300: LD_VAR 0 1
36304: PPUSH
36305: LD_VAR 0 2
36309: PPUSH
36310: LD_VAR 0 3
36314: PPUSH
36315: CALL_OW 297
36319: PUSH
36320: LD_VAR 0 5
36324: LESS
36325: IFFALSE 36269
// end ; ComTurnXY ( unit , x , y ) ;
36327: LD_VAR 0 1
36331: PPUSH
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_VAR 0 3
36341: PPUSH
36342: CALL_OW 118
// wait ( 5 ) ;
36346: LD_INT 5
36348: PPUSH
36349: CALL_OW 67
// _d := GetDir ( unit ) ;
36353: LD_ADDR_VAR 0 10
36357: PUSH
36358: LD_VAR 0 1
36362: PPUSH
36363: CALL_OW 254
36367: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36368: LD_ADDR_VAR 0 8
36372: PUSH
36373: LD_VAR 0 1
36377: PPUSH
36378: CALL_OW 250
36382: PPUSH
36383: LD_VAR 0 10
36387: PPUSH
36388: LD_VAR 0 5
36392: PPUSH
36393: CALL_OW 272
36397: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36398: LD_ADDR_VAR 0 9
36402: PUSH
36403: LD_VAR 0 1
36407: PPUSH
36408: CALL_OW 251
36412: PPUSH
36413: LD_VAR 0 10
36417: PPUSH
36418: LD_VAR 0 5
36422: PPUSH
36423: CALL_OW 273
36427: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36428: LD_VAR 0 8
36432: PPUSH
36433: LD_VAR 0 9
36437: PPUSH
36438: CALL_OW 488
36442: NOT
36443: IFFALSE 36447
// exit ;
36445: GO 36554
// ComAnimCustom ( unit , 1 ) ;
36447: LD_VAR 0 1
36451: PPUSH
36452: LD_INT 1
36454: PPUSH
36455: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36459: LD_VAR 0 8
36463: PPUSH
36464: LD_VAR 0 9
36468: PPUSH
36469: LD_VAR 0 6
36473: PPUSH
36474: LD_VAR 0 7
36478: PPUSH
36479: CALL_OW 330
// repeat wait ( 1 ) ;
36483: LD_INT 1
36485: PPUSH
36486: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36490: LD_VAR 0 1
36494: PPUSH
36495: CALL_OW 316
36499: PUSH
36500: LD_VAR 0 1
36504: PPUSH
36505: CALL_OW 314
36509: OR
36510: PUSH
36511: LD_VAR 0 1
36515: PPUSH
36516: CALL_OW 302
36520: NOT
36521: OR
36522: PUSH
36523: LD_VAR 0 1
36527: PPUSH
36528: CALL_OW 301
36532: OR
36533: IFFALSE 36483
// RemoveSeeing ( _x , _y , side ) ;
36535: LD_VAR 0 8
36539: PPUSH
36540: LD_VAR 0 9
36544: PPUSH
36545: LD_VAR 0 6
36549: PPUSH
36550: CALL_OW 331
// end ; end_of_file
36554: LD_VAR 0 4
36558: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
36559: LD_INT 0
36561: PPUSH
// ar_miner := 81 ;
36562: LD_ADDR_EXP 143
36566: PUSH
36567: LD_INT 81
36569: ST_TO_ADDR
// ar_crane := 88 ;
36570: LD_ADDR_EXP 142
36574: PUSH
36575: LD_INT 88
36577: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
36578: LD_ADDR_EXP 137
36582: PUSH
36583: LD_INT 89
36585: ST_TO_ADDR
// us_hack := 99 ;
36586: LD_ADDR_EXP 138
36590: PUSH
36591: LD_INT 99
36593: ST_TO_ADDR
// us_artillery := 97 ;
36594: LD_ADDR_EXP 139
36598: PUSH
36599: LD_INT 97
36601: ST_TO_ADDR
// ar_bio_bomb := 91 ;
36602: LD_ADDR_EXP 140
36606: PUSH
36607: LD_INT 91
36609: ST_TO_ADDR
// ar_mortar := 92 ;
36610: LD_ADDR_EXP 141
36614: PUSH
36615: LD_INT 92
36617: ST_TO_ADDR
// ru_radar := 98 ;
36618: LD_ADDR_EXP 136
36622: PUSH
36623: LD_INT 98
36625: ST_TO_ADDR
// tech_Artillery := 80 ;
36626: LD_ADDR_EXP 144
36630: PUSH
36631: LD_INT 80
36633: ST_TO_ADDR
// tech_RadMat := 81 ;
36634: LD_ADDR_EXP 145
36638: PUSH
36639: LD_INT 81
36641: ST_TO_ADDR
// tech_BasicTools := 82 ;
36642: LD_ADDR_EXP 146
36646: PUSH
36647: LD_INT 82
36649: ST_TO_ADDR
// tech_Cargo := 83 ;
36650: LD_ADDR_EXP 147
36654: PUSH
36655: LD_INT 83
36657: ST_TO_ADDR
// tech_Track := 84 ;
36658: LD_ADDR_EXP 148
36662: PUSH
36663: LD_INT 84
36665: ST_TO_ADDR
// tech_Crane := 85 ;
36666: LD_ADDR_EXP 149
36670: PUSH
36671: LD_INT 85
36673: ST_TO_ADDR
// tech_Bulldozer := 86 ;
36674: LD_ADDR_EXP 150
36678: PUSH
36679: LD_INT 86
36681: ST_TO_ADDR
// tech_Hovercraft := 87 ;
36682: LD_ADDR_EXP 151
36686: PUSH
36687: LD_INT 87
36689: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
36690: LD_ADDR_EXP 152
36694: PUSH
36695: LD_INT 88
36697: ST_TO_ADDR
// class_mastodont := 31 ;
36698: LD_ADDR_EXP 153
36702: PUSH
36703: LD_INT 31
36705: ST_TO_ADDR
// class_horse := 21 ;
36706: LD_ADDR_EXP 154
36710: PUSH
36711: LD_INT 21
36713: ST_TO_ADDR
// end ;
36714: LD_VAR 0 1
36718: RET
// every 1 do
36719: GO 36721
36721: DISABLE
// InitGlobalVariables ; end_of_file
36722: CALL 36559 0 0
36726: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36727: LD_INT 0
36729: PPUSH
36730: PPUSH
// if exist_mode then
36731: LD_VAR 0 2
36735: IFFALSE 36760
// unit := CreateCharacter ( prefix & ident ) else
36737: LD_ADDR_VAR 0 5
36741: PUSH
36742: LD_VAR 0 3
36746: PUSH
36747: LD_VAR 0 1
36751: STR
36752: PPUSH
36753: CALL_OW 34
36757: ST_TO_ADDR
36758: GO 36775
// unit := NewCharacter ( ident ) ;
36760: LD_ADDR_VAR 0 5
36764: PUSH
36765: LD_VAR 0 1
36769: PPUSH
36770: CALL_OW 25
36774: ST_TO_ADDR
// result := unit ;
36775: LD_ADDR_VAR 0 4
36779: PUSH
36780: LD_VAR 0 5
36784: ST_TO_ADDR
// end ;
36785: LD_VAR 0 4
36789: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36790: LD_INT 0
36792: PPUSH
36793: PPUSH
// if not side or not nation then
36794: LD_VAR 0 1
36798: NOT
36799: PUSH
36800: LD_VAR 0 2
36804: NOT
36805: OR
36806: IFFALSE 36810
// exit ;
36808: GO 37578
// case nation of nation_american :
36810: LD_VAR 0 2
36814: PUSH
36815: LD_INT 1
36817: DOUBLE
36818: EQUAL
36819: IFTRUE 36823
36821: GO 37037
36823: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36824: LD_ADDR_VAR 0 4
36828: PUSH
36829: LD_INT 35
36831: PUSH
36832: LD_INT 45
36834: PUSH
36835: LD_INT 46
36837: PUSH
36838: LD_INT 47
36840: PUSH
36841: LD_INT 82
36843: PUSH
36844: LD_INT 83
36846: PUSH
36847: LD_INT 84
36849: PUSH
36850: LD_INT 85
36852: PUSH
36853: LD_INT 86
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 6
36864: PUSH
36865: LD_INT 15
36867: PUSH
36868: LD_INT 16
36870: PUSH
36871: LD_INT 7
36873: PUSH
36874: LD_INT 12
36876: PUSH
36877: LD_INT 13
36879: PUSH
36880: LD_INT 10
36882: PUSH
36883: LD_INT 14
36885: PUSH
36886: LD_INT 20
36888: PUSH
36889: LD_INT 21
36891: PUSH
36892: LD_INT 22
36894: PUSH
36895: LD_INT 25
36897: PUSH
36898: LD_INT 32
36900: PUSH
36901: LD_INT 27
36903: PUSH
36904: LD_INT 36
36906: PUSH
36907: LD_INT 69
36909: PUSH
36910: LD_INT 39
36912: PUSH
36913: LD_INT 34
36915: PUSH
36916: LD_INT 40
36918: PUSH
36919: LD_INT 48
36921: PUSH
36922: LD_INT 49
36924: PUSH
36925: LD_INT 50
36927: PUSH
36928: LD_INT 51
36930: PUSH
36931: LD_INT 52
36933: PUSH
36934: LD_INT 53
36936: PUSH
36937: LD_INT 54
36939: PUSH
36940: LD_INT 55
36942: PUSH
36943: LD_INT 56
36945: PUSH
36946: LD_INT 57
36948: PUSH
36949: LD_INT 58
36951: PUSH
36952: LD_INT 59
36954: PUSH
36955: LD_INT 60
36957: PUSH
36958: LD_INT 61
36960: PUSH
36961: LD_INT 62
36963: PUSH
36964: LD_INT 80
36966: PUSH
36967: LD_INT 82
36969: PUSH
36970: LD_INT 83
36972: PUSH
36973: LD_INT 84
36975: PUSH
36976: LD_INT 85
36978: PUSH
36979: LD_INT 86
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: ST_TO_ADDR
37035: GO 37502
37037: LD_INT 2
37039: DOUBLE
37040: EQUAL
37041: IFTRUE 37045
37043: GO 37271
37045: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37046: LD_ADDR_VAR 0 4
37050: PUSH
37051: LD_INT 35
37053: PUSH
37054: LD_INT 45
37056: PUSH
37057: LD_INT 46
37059: PUSH
37060: LD_INT 47
37062: PUSH
37063: LD_INT 82
37065: PUSH
37066: LD_INT 83
37068: PUSH
37069: LD_INT 84
37071: PUSH
37072: LD_INT 85
37074: PUSH
37075: LD_INT 87
37077: PUSH
37078: LD_INT 70
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: LD_INT 11
37086: PUSH
37087: LD_INT 3
37089: PUSH
37090: LD_INT 4
37092: PUSH
37093: LD_INT 5
37095: PUSH
37096: LD_INT 6
37098: PUSH
37099: LD_INT 15
37101: PUSH
37102: LD_INT 18
37104: PUSH
37105: LD_INT 7
37107: PUSH
37108: LD_INT 17
37110: PUSH
37111: LD_INT 8
37113: PUSH
37114: LD_INT 20
37116: PUSH
37117: LD_INT 21
37119: PUSH
37120: LD_INT 22
37122: PUSH
37123: LD_INT 72
37125: PUSH
37126: LD_INT 26
37128: PUSH
37129: LD_INT 69
37131: PUSH
37132: LD_INT 39
37134: PUSH
37135: LD_INT 40
37137: PUSH
37138: LD_INT 41
37140: PUSH
37141: LD_INT 42
37143: PUSH
37144: LD_INT 43
37146: PUSH
37147: LD_INT 48
37149: PUSH
37150: LD_INT 49
37152: PUSH
37153: LD_INT 50
37155: PUSH
37156: LD_INT 51
37158: PUSH
37159: LD_INT 52
37161: PUSH
37162: LD_INT 53
37164: PUSH
37165: LD_INT 54
37167: PUSH
37168: LD_INT 55
37170: PUSH
37171: LD_INT 56
37173: PUSH
37174: LD_INT 60
37176: PUSH
37177: LD_INT 61
37179: PUSH
37180: LD_INT 62
37182: PUSH
37183: LD_INT 66
37185: PUSH
37186: LD_INT 67
37188: PUSH
37189: LD_INT 68
37191: PUSH
37192: LD_INT 81
37194: PUSH
37195: LD_INT 82
37197: PUSH
37198: LD_INT 83
37200: PUSH
37201: LD_INT 84
37203: PUSH
37204: LD_INT 85
37206: PUSH
37207: LD_INT 87
37209: PUSH
37210: LD_INT 88
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: ST_TO_ADDR
37269: GO 37502
37271: LD_INT 3
37273: DOUBLE
37274: EQUAL
37275: IFTRUE 37279
37277: GO 37501
37279: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37280: LD_ADDR_VAR 0 4
37284: PUSH
37285: LD_INT 46
37287: PUSH
37288: LD_INT 47
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: LD_INT 2
37296: PUSH
37297: LD_INT 82
37299: PUSH
37300: LD_INT 83
37302: PUSH
37303: LD_INT 84
37305: PUSH
37306: LD_INT 85
37308: PUSH
37309: LD_INT 86
37311: PUSH
37312: LD_INT 11
37314: PUSH
37315: LD_INT 9
37317: PUSH
37318: LD_INT 20
37320: PUSH
37321: LD_INT 19
37323: PUSH
37324: LD_INT 21
37326: PUSH
37327: LD_INT 24
37329: PUSH
37330: LD_INT 22
37332: PUSH
37333: LD_INT 25
37335: PUSH
37336: LD_INT 28
37338: PUSH
37339: LD_INT 29
37341: PUSH
37342: LD_INT 30
37344: PUSH
37345: LD_INT 31
37347: PUSH
37348: LD_INT 37
37350: PUSH
37351: LD_INT 38
37353: PUSH
37354: LD_INT 32
37356: PUSH
37357: LD_INT 27
37359: PUSH
37360: LD_INT 33
37362: PUSH
37363: LD_INT 69
37365: PUSH
37366: LD_INT 39
37368: PUSH
37369: LD_INT 34
37371: PUSH
37372: LD_INT 40
37374: PUSH
37375: LD_INT 71
37377: PUSH
37378: LD_INT 23
37380: PUSH
37381: LD_INT 44
37383: PUSH
37384: LD_INT 48
37386: PUSH
37387: LD_INT 49
37389: PUSH
37390: LD_INT 50
37392: PUSH
37393: LD_INT 51
37395: PUSH
37396: LD_INT 52
37398: PUSH
37399: LD_INT 53
37401: PUSH
37402: LD_INT 54
37404: PUSH
37405: LD_INT 55
37407: PUSH
37408: LD_INT 56
37410: PUSH
37411: LD_INT 57
37413: PUSH
37414: LD_INT 58
37416: PUSH
37417: LD_INT 59
37419: PUSH
37420: LD_INT 63
37422: PUSH
37423: LD_INT 64
37425: PUSH
37426: LD_INT 65
37428: PUSH
37429: LD_INT 82
37431: PUSH
37432: LD_INT 83
37434: PUSH
37435: LD_INT 84
37437: PUSH
37438: LD_INT 85
37440: PUSH
37441: LD_INT 86
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: ST_TO_ADDR
37499: GO 37502
37501: POP
// if state > - 1 and state < 3 then
37502: LD_VAR 0 3
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: GREATER
37511: PUSH
37512: LD_VAR 0 3
37516: PUSH
37517: LD_INT 3
37519: LESS
37520: AND
37521: IFFALSE 37578
// for i in result do
37523: LD_ADDR_VAR 0 5
37527: PUSH
37528: LD_VAR 0 4
37532: PUSH
37533: FOR_IN
37534: IFFALSE 37576
// if GetTech ( i , side ) <> state then
37536: LD_VAR 0 5
37540: PPUSH
37541: LD_VAR 0 1
37545: PPUSH
37546: CALL_OW 321
37550: PUSH
37551: LD_VAR 0 3
37555: NONEQUAL
37556: IFFALSE 37574
// result := result diff i ;
37558: LD_ADDR_VAR 0 4
37562: PUSH
37563: LD_VAR 0 4
37567: PUSH
37568: LD_VAR 0 5
37572: DIFF
37573: ST_TO_ADDR
37574: GO 37533
37576: POP
37577: POP
// end ;
37578: LD_VAR 0 4
37582: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37583: LD_INT 0
37585: PPUSH
37586: PPUSH
37587: PPUSH
// result := true ;
37588: LD_ADDR_VAR 0 3
37592: PUSH
37593: LD_INT 1
37595: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37596: LD_ADDR_VAR 0 5
37600: PUSH
37601: LD_VAR 0 2
37605: PPUSH
37606: CALL_OW 480
37610: ST_TO_ADDR
// if not tmp then
37611: LD_VAR 0 5
37615: NOT
37616: IFFALSE 37620
// exit ;
37618: GO 37669
// for i in tmp do
37620: LD_ADDR_VAR 0 4
37624: PUSH
37625: LD_VAR 0 5
37629: PUSH
37630: FOR_IN
37631: IFFALSE 37667
// if GetTech ( i , side ) <> state_researched then
37633: LD_VAR 0 4
37637: PPUSH
37638: LD_VAR 0 1
37642: PPUSH
37643: CALL_OW 321
37647: PUSH
37648: LD_INT 2
37650: NONEQUAL
37651: IFFALSE 37665
// begin result := false ;
37653: LD_ADDR_VAR 0 3
37657: PUSH
37658: LD_INT 0
37660: ST_TO_ADDR
// exit ;
37661: POP
37662: POP
37663: GO 37669
// end ;
37665: GO 37630
37667: POP
37668: POP
// end ;
37669: LD_VAR 0 3
37673: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37674: LD_INT 0
37676: PPUSH
37677: PPUSH
37678: PPUSH
37679: PPUSH
37680: PPUSH
37681: PPUSH
37682: PPUSH
37683: PPUSH
37684: PPUSH
37685: PPUSH
37686: PPUSH
37687: PPUSH
37688: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37689: LD_VAR 0 1
37693: NOT
37694: PUSH
37695: LD_VAR 0 1
37699: PPUSH
37700: CALL_OW 257
37704: PUSH
37705: LD_INT 9
37707: NONEQUAL
37708: OR
37709: IFFALSE 37713
// exit ;
37711: GO 38286
// side := GetSide ( unit ) ;
37713: LD_ADDR_VAR 0 9
37717: PUSH
37718: LD_VAR 0 1
37722: PPUSH
37723: CALL_OW 255
37727: ST_TO_ADDR
// tech_space := tech_spacanom ;
37728: LD_ADDR_VAR 0 12
37732: PUSH
37733: LD_INT 29
37735: ST_TO_ADDR
// tech_time := tech_taurad ;
37736: LD_ADDR_VAR 0 13
37740: PUSH
37741: LD_INT 28
37743: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37744: LD_ADDR_VAR 0 11
37748: PUSH
37749: LD_VAR 0 1
37753: PPUSH
37754: CALL_OW 310
37758: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37759: LD_VAR 0 11
37763: PPUSH
37764: CALL_OW 247
37768: PUSH
37769: LD_INT 2
37771: EQUAL
37772: IFFALSE 37776
// exit ;
37774: GO 38286
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37776: LD_ADDR_VAR 0 8
37780: PUSH
37781: LD_INT 81
37783: PUSH
37784: LD_VAR 0 9
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 3
37795: PUSH
37796: LD_INT 21
37798: PUSH
37799: LD_INT 3
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PPUSH
37814: CALL_OW 69
37818: ST_TO_ADDR
// if not tmp then
37819: LD_VAR 0 8
37823: NOT
37824: IFFALSE 37828
// exit ;
37826: GO 38286
// if in_unit then
37828: LD_VAR 0 11
37832: IFFALSE 37856
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37834: LD_ADDR_VAR 0 10
37838: PUSH
37839: LD_VAR 0 8
37843: PPUSH
37844: LD_VAR 0 11
37848: PPUSH
37849: CALL_OW 74
37853: ST_TO_ADDR
37854: GO 37876
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37856: LD_ADDR_VAR 0 10
37860: PUSH
37861: LD_VAR 0 8
37865: PPUSH
37866: LD_VAR 0 1
37870: PPUSH
37871: CALL_OW 74
37875: ST_TO_ADDR
// if not enemy then
37876: LD_VAR 0 10
37880: NOT
37881: IFFALSE 37885
// exit ;
37883: GO 38286
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37885: LD_VAR 0 11
37889: PUSH
37890: LD_VAR 0 11
37894: PPUSH
37895: LD_VAR 0 10
37899: PPUSH
37900: CALL_OW 296
37904: PUSH
37905: LD_INT 13
37907: GREATER
37908: AND
37909: PUSH
37910: LD_VAR 0 1
37914: PPUSH
37915: LD_VAR 0 10
37919: PPUSH
37920: CALL_OW 296
37924: PUSH
37925: LD_INT 12
37927: GREATER
37928: OR
37929: IFFALSE 37933
// exit ;
37931: GO 38286
// missile := [ 1 ] ;
37933: LD_ADDR_VAR 0 14
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: EMPTY
37942: LIST
37943: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37944: LD_VAR 0 9
37948: PPUSH
37949: LD_VAR 0 12
37953: PPUSH
37954: CALL_OW 325
37958: IFFALSE 37987
// missile := Insert ( missile , missile + 1 , 2 ) ;
37960: LD_ADDR_VAR 0 14
37964: PUSH
37965: LD_VAR 0 14
37969: PPUSH
37970: LD_VAR 0 14
37974: PUSH
37975: LD_INT 1
37977: PLUS
37978: PPUSH
37979: LD_INT 2
37981: PPUSH
37982: CALL_OW 2
37986: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37987: LD_VAR 0 9
37991: PPUSH
37992: LD_VAR 0 13
37996: PPUSH
37997: CALL_OW 325
38001: PUSH
38002: LD_VAR 0 10
38006: PPUSH
38007: CALL_OW 255
38011: PPUSH
38012: LD_VAR 0 13
38016: PPUSH
38017: CALL_OW 325
38021: NOT
38022: AND
38023: IFFALSE 38052
// missile := Insert ( missile , missile + 1 , 3 ) ;
38025: LD_ADDR_VAR 0 14
38029: PUSH
38030: LD_VAR 0 14
38034: PPUSH
38035: LD_VAR 0 14
38039: PUSH
38040: LD_INT 1
38042: PLUS
38043: PPUSH
38044: LD_INT 3
38046: PPUSH
38047: CALL_OW 2
38051: ST_TO_ADDR
// if missile < 2 then
38052: LD_VAR 0 14
38056: PUSH
38057: LD_INT 2
38059: LESS
38060: IFFALSE 38064
// exit ;
38062: GO 38286
// x := GetX ( enemy ) ;
38064: LD_ADDR_VAR 0 4
38068: PUSH
38069: LD_VAR 0 10
38073: PPUSH
38074: CALL_OW 250
38078: ST_TO_ADDR
// y := GetY ( enemy ) ;
38079: LD_ADDR_VAR 0 5
38083: PUSH
38084: LD_VAR 0 10
38088: PPUSH
38089: CALL_OW 251
38093: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38094: LD_ADDR_VAR 0 6
38098: PUSH
38099: LD_VAR 0 4
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PPUSH
38108: LD_INT 1
38110: PPUSH
38111: CALL_OW 12
38115: PLUS
38116: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38117: LD_ADDR_VAR 0 7
38121: PUSH
38122: LD_VAR 0 5
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PPUSH
38131: LD_INT 1
38133: PPUSH
38134: CALL_OW 12
38138: PLUS
38139: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38140: LD_VAR 0 6
38144: PPUSH
38145: LD_VAR 0 7
38149: PPUSH
38150: CALL_OW 488
38154: NOT
38155: IFFALSE 38177
// begin _x := x ;
38157: LD_ADDR_VAR 0 6
38161: PUSH
38162: LD_VAR 0 4
38166: ST_TO_ADDR
// _y := y ;
38167: LD_ADDR_VAR 0 7
38171: PUSH
38172: LD_VAR 0 5
38176: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38177: LD_ADDR_VAR 0 3
38181: PUSH
38182: LD_INT 1
38184: PPUSH
38185: LD_VAR 0 14
38189: PPUSH
38190: CALL_OW 12
38194: ST_TO_ADDR
// case i of 1 :
38195: LD_VAR 0 3
38199: PUSH
38200: LD_INT 1
38202: DOUBLE
38203: EQUAL
38204: IFTRUE 38208
38206: GO 38225
38208: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38209: LD_VAR 0 1
38213: PPUSH
38214: LD_VAR 0 10
38218: PPUSH
38219: CALL_OW 115
38223: GO 38286
38225: LD_INT 2
38227: DOUBLE
38228: EQUAL
38229: IFTRUE 38233
38231: GO 38255
38233: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38234: LD_VAR 0 1
38238: PPUSH
38239: LD_VAR 0 6
38243: PPUSH
38244: LD_VAR 0 7
38248: PPUSH
38249: CALL_OW 153
38253: GO 38286
38255: LD_INT 3
38257: DOUBLE
38258: EQUAL
38259: IFTRUE 38263
38261: GO 38285
38263: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38264: LD_VAR 0 1
38268: PPUSH
38269: LD_VAR 0 6
38273: PPUSH
38274: LD_VAR 0 7
38278: PPUSH
38279: CALL_OW 154
38283: GO 38286
38285: POP
// end ;
38286: LD_VAR 0 2
38290: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38291: LD_INT 0
38293: PPUSH
38294: PPUSH
38295: PPUSH
38296: PPUSH
38297: PPUSH
38298: PPUSH
// if not unit or not building then
38299: LD_VAR 0 1
38303: NOT
38304: PUSH
38305: LD_VAR 0 2
38309: NOT
38310: OR
38311: IFFALSE 38315
// exit ;
38313: GO 38473
// x := GetX ( building ) ;
38315: LD_ADDR_VAR 0 5
38319: PUSH
38320: LD_VAR 0 2
38324: PPUSH
38325: CALL_OW 250
38329: ST_TO_ADDR
// y := GetY ( building ) ;
38330: LD_ADDR_VAR 0 6
38334: PUSH
38335: LD_VAR 0 2
38339: PPUSH
38340: CALL_OW 251
38344: ST_TO_ADDR
// for i = 0 to 5 do
38345: LD_ADDR_VAR 0 4
38349: PUSH
38350: DOUBLE
38351: LD_INT 0
38353: DEC
38354: ST_TO_ADDR
38355: LD_INT 5
38357: PUSH
38358: FOR_TO
38359: IFFALSE 38471
// begin _x := ShiftX ( x , i , 3 ) ;
38361: LD_ADDR_VAR 0 7
38365: PUSH
38366: LD_VAR 0 5
38370: PPUSH
38371: LD_VAR 0 4
38375: PPUSH
38376: LD_INT 3
38378: PPUSH
38379: CALL_OW 272
38383: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38384: LD_ADDR_VAR 0 8
38388: PUSH
38389: LD_VAR 0 6
38393: PPUSH
38394: LD_VAR 0 4
38398: PPUSH
38399: LD_INT 3
38401: PPUSH
38402: CALL_OW 273
38406: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38407: LD_VAR 0 7
38411: PPUSH
38412: LD_VAR 0 8
38416: PPUSH
38417: CALL_OW 488
38421: NOT
38422: IFFALSE 38426
// continue ;
38424: GO 38358
// if HexInfo ( _x , _y ) = 0 then
38426: LD_VAR 0 7
38430: PPUSH
38431: LD_VAR 0 8
38435: PPUSH
38436: CALL_OW 428
38440: PUSH
38441: LD_INT 0
38443: EQUAL
38444: IFFALSE 38469
// begin ComMoveXY ( unit , _x , _y ) ;
38446: LD_VAR 0 1
38450: PPUSH
38451: LD_VAR 0 7
38455: PPUSH
38456: LD_VAR 0 8
38460: PPUSH
38461: CALL_OW 111
// exit ;
38465: POP
38466: POP
38467: GO 38473
// end ; end ;
38469: GO 38358
38471: POP
38472: POP
// end ;
38473: LD_VAR 0 3
38477: RET
// export function ScanBase ( side , base_area ) ; begin
38478: LD_INT 0
38480: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38481: LD_ADDR_VAR 0 3
38485: PUSH
38486: LD_VAR 0 2
38490: PPUSH
38491: LD_INT 81
38493: PUSH
38494: LD_VAR 0 1
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PPUSH
38503: CALL_OW 70
38507: ST_TO_ADDR
// end ;
38508: LD_VAR 0 3
38512: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38513: LD_INT 0
38515: PPUSH
38516: PPUSH
38517: PPUSH
38518: PPUSH
// result := false ;
38519: LD_ADDR_VAR 0 2
38523: PUSH
38524: LD_INT 0
38526: ST_TO_ADDR
// side := GetSide ( unit ) ;
38527: LD_ADDR_VAR 0 3
38531: PUSH
38532: LD_VAR 0 1
38536: PPUSH
38537: CALL_OW 255
38541: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38542: LD_ADDR_VAR 0 4
38546: PUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL_OW 248
38556: ST_TO_ADDR
// case nat of 1 :
38557: LD_VAR 0 4
38561: PUSH
38562: LD_INT 1
38564: DOUBLE
38565: EQUAL
38566: IFTRUE 38570
38568: GO 38581
38570: POP
// tech := tech_lassight ; 2 :
38571: LD_ADDR_VAR 0 5
38575: PUSH
38576: LD_INT 12
38578: ST_TO_ADDR
38579: GO 38620
38581: LD_INT 2
38583: DOUBLE
38584: EQUAL
38585: IFTRUE 38589
38587: GO 38600
38589: POP
// tech := tech_mortar ; 3 :
38590: LD_ADDR_VAR 0 5
38594: PUSH
38595: LD_INT 41
38597: ST_TO_ADDR
38598: GO 38620
38600: LD_INT 3
38602: DOUBLE
38603: EQUAL
38604: IFTRUE 38608
38606: GO 38619
38608: POP
// tech := tech_bazooka ; end ;
38609: LD_ADDR_VAR 0 5
38613: PUSH
38614: LD_INT 44
38616: ST_TO_ADDR
38617: GO 38620
38619: POP
// if Researched ( side , tech ) then
38620: LD_VAR 0 3
38624: PPUSH
38625: LD_VAR 0 5
38629: PPUSH
38630: CALL_OW 325
38634: IFFALSE 38661
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38636: LD_ADDR_VAR 0 2
38640: PUSH
38641: LD_INT 5
38643: PUSH
38644: LD_INT 8
38646: PUSH
38647: LD_INT 9
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: PUSH
38655: LD_VAR 0 4
38659: ARRAY
38660: ST_TO_ADDR
// end ;
38661: LD_VAR 0 2
38665: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38666: LD_INT 0
38668: PPUSH
38669: PPUSH
38670: PPUSH
// if not mines then
38671: LD_VAR 0 2
38675: NOT
38676: IFFALSE 38680
// exit ;
38678: GO 38824
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38680: LD_ADDR_VAR 0 5
38684: PUSH
38685: LD_INT 81
38687: PUSH
38688: LD_VAR 0 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: LD_INT 21
38702: PUSH
38703: LD_INT 3
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PPUSH
38718: CALL_OW 69
38722: ST_TO_ADDR
// for i in mines do
38723: LD_ADDR_VAR 0 4
38727: PUSH
38728: LD_VAR 0 2
38732: PUSH
38733: FOR_IN
38734: IFFALSE 38822
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38736: LD_VAR 0 4
38740: PUSH
38741: LD_INT 1
38743: ARRAY
38744: PPUSH
38745: LD_VAR 0 4
38749: PUSH
38750: LD_INT 2
38752: ARRAY
38753: PPUSH
38754: CALL_OW 458
38758: NOT
38759: IFFALSE 38763
// continue ;
38761: GO 38733
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38763: LD_VAR 0 4
38767: PUSH
38768: LD_INT 1
38770: ARRAY
38771: PPUSH
38772: LD_VAR 0 4
38776: PUSH
38777: LD_INT 2
38779: ARRAY
38780: PPUSH
38781: CALL_OW 428
38785: PUSH
38786: LD_VAR 0 5
38790: IN
38791: IFFALSE 38820
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38793: LD_VAR 0 4
38797: PUSH
38798: LD_INT 1
38800: ARRAY
38801: PPUSH
38802: LD_VAR 0 4
38806: PUSH
38807: LD_INT 2
38809: ARRAY
38810: PPUSH
38811: LD_VAR 0 1
38815: PPUSH
38816: CALL_OW 456
// end ;
38820: GO 38733
38822: POP
38823: POP
// end ;
38824: LD_VAR 0 3
38828: RET
// export function Count ( array ) ; var i ; begin
38829: LD_INT 0
38831: PPUSH
38832: PPUSH
// result := 0 ;
38833: LD_ADDR_VAR 0 2
38837: PUSH
38838: LD_INT 0
38840: ST_TO_ADDR
// for i in array do
38841: LD_ADDR_VAR 0 3
38845: PUSH
38846: LD_VAR 0 1
38850: PUSH
38851: FOR_IN
38852: IFFALSE 38876
// if i then
38854: LD_VAR 0 3
38858: IFFALSE 38874
// result := result + 1 ;
38860: LD_ADDR_VAR 0 2
38864: PUSH
38865: LD_VAR 0 2
38869: PUSH
38870: LD_INT 1
38872: PLUS
38873: ST_TO_ADDR
38874: GO 38851
38876: POP
38877: POP
// end ;
38878: LD_VAR 0 2
38882: RET
// export function IsEmpty ( building ) ; begin
38883: LD_INT 0
38885: PPUSH
// if not building then
38886: LD_VAR 0 1
38890: NOT
38891: IFFALSE 38895
// exit ;
38893: GO 38938
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38895: LD_ADDR_VAR 0 2
38899: PUSH
38900: LD_VAR 0 1
38904: PUSH
38905: LD_INT 22
38907: PUSH
38908: LD_VAR 0 1
38912: PPUSH
38913: CALL_OW 255
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 58
38924: PUSH
38925: EMPTY
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PPUSH
38932: CALL_OW 69
38936: IN
38937: ST_TO_ADDR
// end ;
38938: LD_VAR 0 2
38942: RET
// export function IsNotFull ( building ) ; begin
38943: LD_INT 0
38945: PPUSH
// if not building then
38946: LD_VAR 0 1
38950: NOT
38951: IFFALSE 38955
// exit ;
38953: GO 38974
// result := UnitsInside ( building ) < 6 ;
38955: LD_ADDR_VAR 0 2
38959: PUSH
38960: LD_VAR 0 1
38964: PPUSH
38965: CALL_OW 313
38969: PUSH
38970: LD_INT 6
38972: LESS
38973: ST_TO_ADDR
// end ;
38974: LD_VAR 0 2
38978: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38979: LD_INT 0
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
// tmp := [ ] ;
38985: LD_ADDR_VAR 0 3
38989: PUSH
38990: EMPTY
38991: ST_TO_ADDR
// list := [ ] ;
38992: LD_ADDR_VAR 0 5
38996: PUSH
38997: EMPTY
38998: ST_TO_ADDR
// for i = 16 to 25 do
38999: LD_ADDR_VAR 0 4
39003: PUSH
39004: DOUBLE
39005: LD_INT 16
39007: DEC
39008: ST_TO_ADDR
39009: LD_INT 25
39011: PUSH
39012: FOR_TO
39013: IFFALSE 39086
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39015: LD_ADDR_VAR 0 3
39019: PUSH
39020: LD_VAR 0 3
39024: PUSH
39025: LD_INT 22
39027: PUSH
39028: LD_VAR 0 1
39032: PPUSH
39033: CALL_OW 255
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 91
39044: PUSH
39045: LD_VAR 0 1
39049: PUSH
39050: LD_INT 6
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 30
39060: PUSH
39061: LD_VAR 0 4
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: PUSH
39075: EMPTY
39076: LIST
39077: PPUSH
39078: CALL_OW 69
39082: ADD
39083: ST_TO_ADDR
39084: GO 39012
39086: POP
39087: POP
// for i = 1 to tmp do
39088: LD_ADDR_VAR 0 4
39092: PUSH
39093: DOUBLE
39094: LD_INT 1
39096: DEC
39097: ST_TO_ADDR
39098: LD_VAR 0 3
39102: PUSH
39103: FOR_TO
39104: IFFALSE 39192
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39106: LD_ADDR_VAR 0 5
39110: PUSH
39111: LD_VAR 0 5
39115: PUSH
39116: LD_VAR 0 3
39120: PUSH
39121: LD_VAR 0 4
39125: ARRAY
39126: PPUSH
39127: CALL_OW 266
39131: PUSH
39132: LD_VAR 0 3
39136: PUSH
39137: LD_VAR 0 4
39141: ARRAY
39142: PPUSH
39143: CALL_OW 250
39147: PUSH
39148: LD_VAR 0 3
39152: PUSH
39153: LD_VAR 0 4
39157: ARRAY
39158: PPUSH
39159: CALL_OW 251
39163: PUSH
39164: LD_VAR 0 3
39168: PUSH
39169: LD_VAR 0 4
39173: ARRAY
39174: PPUSH
39175: CALL_OW 254
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: PUSH
39186: EMPTY
39187: LIST
39188: ADD
39189: ST_TO_ADDR
39190: GO 39103
39192: POP
39193: POP
// result := list ;
39194: LD_ADDR_VAR 0 2
39198: PUSH
39199: LD_VAR 0 5
39203: ST_TO_ADDR
// end ;
39204: LD_VAR 0 2
39208: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39209: LD_INT 0
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
39216: PPUSH
39217: PPUSH
// if not factory then
39218: LD_VAR 0 1
39222: NOT
39223: IFFALSE 39227
// exit ;
39225: GO 39820
// if control = control_apeman then
39227: LD_VAR 0 4
39231: PUSH
39232: LD_INT 5
39234: EQUAL
39235: IFFALSE 39344
// begin tmp := UnitsInside ( factory ) ;
39237: LD_ADDR_VAR 0 8
39241: PUSH
39242: LD_VAR 0 1
39246: PPUSH
39247: CALL_OW 313
39251: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39252: LD_VAR 0 8
39256: PPUSH
39257: LD_INT 25
39259: PUSH
39260: LD_INT 12
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PPUSH
39267: CALL_OW 72
39271: NOT
39272: IFFALSE 39282
// control := control_manual ;
39274: LD_ADDR_VAR 0 4
39278: PUSH
39279: LD_INT 1
39281: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39282: LD_ADDR_VAR 0 8
39286: PUSH
39287: LD_VAR 0 1
39291: PPUSH
39292: CALL 38979 0 1
39296: ST_TO_ADDR
// if tmp then
39297: LD_VAR 0 8
39301: IFFALSE 39344
// begin for i in tmp do
39303: LD_ADDR_VAR 0 7
39307: PUSH
39308: LD_VAR 0 8
39312: PUSH
39313: FOR_IN
39314: IFFALSE 39342
// if i [ 1 ] = b_ext_radio then
39316: LD_VAR 0 7
39320: PUSH
39321: LD_INT 1
39323: ARRAY
39324: PUSH
39325: LD_INT 22
39327: EQUAL
39328: IFFALSE 39340
// begin control := control_remote ;
39330: LD_ADDR_VAR 0 4
39334: PUSH
39335: LD_INT 2
39337: ST_TO_ADDR
// break ;
39338: GO 39342
// end ;
39340: GO 39313
39342: POP
39343: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39344: LD_VAR 0 1
39348: PPUSH
39349: LD_VAR 0 2
39353: PPUSH
39354: LD_VAR 0 3
39358: PPUSH
39359: LD_VAR 0 4
39363: PPUSH
39364: LD_VAR 0 5
39368: PPUSH
39369: CALL_OW 448
39373: IFFALSE 39408
// begin result := [ chassis , engine , control , weapon ] ;
39375: LD_ADDR_VAR 0 6
39379: PUSH
39380: LD_VAR 0 2
39384: PUSH
39385: LD_VAR 0 3
39389: PUSH
39390: LD_VAR 0 4
39394: PUSH
39395: LD_VAR 0 5
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: ST_TO_ADDR
// exit ;
39406: GO 39820
// end ; _chassis := AvailableChassisList ( factory ) ;
39408: LD_ADDR_VAR 0 9
39412: PUSH
39413: LD_VAR 0 1
39417: PPUSH
39418: CALL_OW 475
39422: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39423: LD_ADDR_VAR 0 11
39427: PUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL_OW 476
39437: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39438: LD_ADDR_VAR 0 12
39442: PUSH
39443: LD_VAR 0 1
39447: PPUSH
39448: CALL_OW 477
39452: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39453: LD_ADDR_VAR 0 10
39457: PUSH
39458: LD_VAR 0 1
39462: PPUSH
39463: CALL_OW 478
39467: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39468: LD_VAR 0 9
39472: NOT
39473: PUSH
39474: LD_VAR 0 11
39478: NOT
39479: OR
39480: PUSH
39481: LD_VAR 0 12
39485: NOT
39486: OR
39487: PUSH
39488: LD_VAR 0 10
39492: NOT
39493: OR
39494: IFFALSE 39529
// begin result := [ chassis , engine , control , weapon ] ;
39496: LD_ADDR_VAR 0 6
39500: PUSH
39501: LD_VAR 0 2
39505: PUSH
39506: LD_VAR 0 3
39510: PUSH
39511: LD_VAR 0 4
39515: PUSH
39516: LD_VAR 0 5
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// exit ;
39527: GO 39820
// end ; if not chassis in _chassis then
39529: LD_VAR 0 2
39533: PUSH
39534: LD_VAR 0 9
39538: IN
39539: NOT
39540: IFFALSE 39566
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39542: LD_ADDR_VAR 0 2
39546: PUSH
39547: LD_VAR 0 9
39551: PUSH
39552: LD_INT 1
39554: PPUSH
39555: LD_VAR 0 9
39559: PPUSH
39560: CALL_OW 12
39564: ARRAY
39565: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39566: LD_VAR 0 2
39570: PPUSH
39571: LD_VAR 0 3
39575: PPUSH
39576: CALL 39825 0 2
39580: NOT
39581: IFFALSE 39640
// repeat engine := _engine [ 1 ] ;
39583: LD_ADDR_VAR 0 3
39587: PUSH
39588: LD_VAR 0 11
39592: PUSH
39593: LD_INT 1
39595: ARRAY
39596: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39597: LD_ADDR_VAR 0 11
39601: PUSH
39602: LD_VAR 0 11
39606: PPUSH
39607: LD_INT 1
39609: PPUSH
39610: CALL_OW 3
39614: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39615: LD_VAR 0 2
39619: PPUSH
39620: LD_VAR 0 3
39624: PPUSH
39625: CALL 39825 0 2
39629: PUSH
39630: LD_VAR 0 11
39634: PUSH
39635: EMPTY
39636: EQUAL
39637: OR
39638: IFFALSE 39583
// if not control in _control then
39640: LD_VAR 0 4
39644: PUSH
39645: LD_VAR 0 12
39649: IN
39650: NOT
39651: IFFALSE 39677
// control := _control [ rand ( 1 , _control ) ] ;
39653: LD_ADDR_VAR 0 4
39657: PUSH
39658: LD_VAR 0 12
39662: PUSH
39663: LD_INT 1
39665: PPUSH
39666: LD_VAR 0 12
39670: PPUSH
39671: CALL_OW 12
39675: ARRAY
39676: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39677: LD_VAR 0 2
39681: PPUSH
39682: LD_VAR 0 5
39686: PPUSH
39687: CALL 40045 0 2
39691: NOT
39692: IFFALSE 39751
// repeat weapon := _weapon [ 1 ] ;
39694: LD_ADDR_VAR 0 5
39698: PUSH
39699: LD_VAR 0 10
39703: PUSH
39704: LD_INT 1
39706: ARRAY
39707: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39708: LD_ADDR_VAR 0 10
39712: PUSH
39713: LD_VAR 0 10
39717: PPUSH
39718: LD_INT 1
39720: PPUSH
39721: CALL_OW 3
39725: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39726: LD_VAR 0 2
39730: PPUSH
39731: LD_VAR 0 5
39735: PPUSH
39736: CALL 40045 0 2
39740: PUSH
39741: LD_VAR 0 10
39745: PUSH
39746: EMPTY
39747: EQUAL
39748: OR
39749: IFFALSE 39694
// result := [ ] ;
39751: LD_ADDR_VAR 0 6
39755: PUSH
39756: EMPTY
39757: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39758: LD_VAR 0 1
39762: PPUSH
39763: LD_VAR 0 2
39767: PPUSH
39768: LD_VAR 0 3
39772: PPUSH
39773: LD_VAR 0 4
39777: PPUSH
39778: LD_VAR 0 5
39782: PPUSH
39783: CALL_OW 448
39787: IFFALSE 39820
// result := [ chassis , engine , control , weapon ] ;
39789: LD_ADDR_VAR 0 6
39793: PUSH
39794: LD_VAR 0 2
39798: PUSH
39799: LD_VAR 0 3
39803: PUSH
39804: LD_VAR 0 4
39808: PUSH
39809: LD_VAR 0 5
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: ST_TO_ADDR
// end ;
39820: LD_VAR 0 6
39824: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39825: LD_INT 0
39827: PPUSH
// if not chassis or not engine then
39828: LD_VAR 0 1
39832: NOT
39833: PUSH
39834: LD_VAR 0 2
39838: NOT
39839: OR
39840: IFFALSE 39844
// exit ;
39842: GO 40040
// case engine of engine_solar :
39844: LD_VAR 0 2
39848: PUSH
39849: LD_INT 2
39851: DOUBLE
39852: EQUAL
39853: IFTRUE 39857
39855: GO 39895
39857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39858: LD_ADDR_VAR 0 3
39862: PUSH
39863: LD_INT 11
39865: PUSH
39866: LD_INT 12
39868: PUSH
39869: LD_INT 13
39871: PUSH
39872: LD_INT 14
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: LD_INT 3
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: ST_TO_ADDR
39893: GO 40024
39895: LD_INT 1
39897: DOUBLE
39898: EQUAL
39899: IFTRUE 39903
39901: GO 39965
39903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39904: LD_ADDR_VAR 0 3
39908: PUSH
39909: LD_INT 11
39911: PUSH
39912: LD_INT 12
39914: PUSH
39915: LD_INT 13
39917: PUSH
39918: LD_INT 14
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 3
39929: PUSH
39930: LD_INT 4
39932: PUSH
39933: LD_INT 5
39935: PUSH
39936: LD_INT 21
39938: PUSH
39939: LD_INT 23
39941: PUSH
39942: LD_INT 22
39944: PUSH
39945: LD_INT 24
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: ST_TO_ADDR
39963: GO 40024
39965: LD_INT 3
39967: DOUBLE
39968: EQUAL
39969: IFTRUE 39973
39971: GO 40023
39973: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39974: LD_ADDR_VAR 0 3
39978: PUSH
39979: LD_INT 13
39981: PUSH
39982: LD_INT 14
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 3
39990: PUSH
39991: LD_INT 4
39993: PUSH
39994: LD_INT 5
39996: PUSH
39997: LD_INT 21
39999: PUSH
40000: LD_INT 22
40002: PUSH
40003: LD_INT 23
40005: PUSH
40006: LD_INT 24
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: ST_TO_ADDR
40021: GO 40024
40023: POP
// result := ( chassis in result ) ;
40024: LD_ADDR_VAR 0 3
40028: PUSH
40029: LD_VAR 0 1
40033: PUSH
40034: LD_VAR 0 3
40038: IN
40039: ST_TO_ADDR
// end ;
40040: LD_VAR 0 3
40044: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40045: LD_INT 0
40047: PPUSH
// if not chassis or not weapon then
40048: LD_VAR 0 1
40052: NOT
40053: PUSH
40054: LD_VAR 0 2
40058: NOT
40059: OR
40060: IFFALSE 40064
// exit ;
40062: GO 41126
// case weapon of us_machine_gun :
40064: LD_VAR 0 2
40068: PUSH
40069: LD_INT 2
40071: DOUBLE
40072: EQUAL
40073: IFTRUE 40077
40075: GO 40107
40077: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40078: LD_ADDR_VAR 0 3
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 3
40091: PUSH
40092: LD_INT 4
40094: PUSH
40095: LD_INT 5
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: ST_TO_ADDR
40105: GO 41110
40107: LD_INT 3
40109: DOUBLE
40110: EQUAL
40111: IFTRUE 40115
40113: GO 40145
40115: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40116: LD_ADDR_VAR 0 3
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: LD_INT 3
40129: PUSH
40130: LD_INT 4
40132: PUSH
40133: LD_INT 5
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
40143: GO 41110
40145: LD_INT 11
40147: DOUBLE
40148: EQUAL
40149: IFTRUE 40153
40151: GO 40183
40153: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40154: LD_ADDR_VAR 0 3
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: LD_INT 3
40167: PUSH
40168: LD_INT 4
40170: PUSH
40171: LD_INT 5
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: ST_TO_ADDR
40181: GO 41110
40183: LD_INT 4
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40191
40189: GO 40217
40191: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40192: LD_ADDR_VAR 0 3
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 3
40202: PUSH
40203: LD_INT 4
40205: PUSH
40206: LD_INT 5
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: ST_TO_ADDR
40215: GO 41110
40217: LD_INT 5
40219: DOUBLE
40220: EQUAL
40221: IFTRUE 40225
40223: GO 40251
40225: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40226: LD_ADDR_VAR 0 3
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 3
40236: PUSH
40237: LD_INT 4
40239: PUSH
40240: LD_INT 5
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
40249: GO 41110
40251: LD_INT 9
40253: DOUBLE
40254: EQUAL
40255: IFTRUE 40259
40257: GO 40285
40259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40260: LD_ADDR_VAR 0 3
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 3
40270: PUSH
40271: LD_INT 4
40273: PUSH
40274: LD_INT 5
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: ST_TO_ADDR
40283: GO 41110
40285: LD_INT 7
40287: DOUBLE
40288: EQUAL
40289: IFTRUE 40293
40291: GO 40319
40293: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40294: LD_ADDR_VAR 0 3
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: LD_INT 3
40304: PUSH
40305: LD_INT 4
40307: PUSH
40308: LD_INT 5
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: ST_TO_ADDR
40317: GO 41110
40319: LD_INT 12
40321: DOUBLE
40322: EQUAL
40323: IFTRUE 40327
40325: GO 40353
40327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40328: LD_ADDR_VAR 0 3
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: LD_INT 3
40338: PUSH
40339: LD_INT 4
40341: PUSH
40342: LD_INT 5
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: ST_TO_ADDR
40351: GO 41110
40353: LD_INT 13
40355: DOUBLE
40356: EQUAL
40357: IFTRUE 40361
40359: GO 40387
40361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40362: LD_ADDR_VAR 0 3
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 3
40372: PUSH
40373: LD_INT 4
40375: PUSH
40376: LD_INT 5
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: ST_TO_ADDR
40385: GO 41110
40387: LD_INT 14
40389: DOUBLE
40390: EQUAL
40391: IFTRUE 40395
40393: GO 40413
40395: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40396: LD_ADDR_VAR 0 3
40400: PUSH
40401: LD_INT 4
40403: PUSH
40404: LD_INT 5
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: ST_TO_ADDR
40411: GO 41110
40413: LD_INT 6
40415: DOUBLE
40416: EQUAL
40417: IFTRUE 40421
40419: GO 40439
40421: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40422: LD_ADDR_VAR 0 3
40426: PUSH
40427: LD_INT 4
40429: PUSH
40430: LD_INT 5
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: ST_TO_ADDR
40437: GO 41110
40439: LD_INT 10
40441: DOUBLE
40442: EQUAL
40443: IFTRUE 40447
40445: GO 40465
40447: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40448: LD_ADDR_VAR 0 3
40452: PUSH
40453: LD_INT 4
40455: PUSH
40456: LD_INT 5
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: ST_TO_ADDR
40463: GO 41110
40465: LD_INT 22
40467: DOUBLE
40468: EQUAL
40469: IFTRUE 40473
40471: GO 40499
40473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_INT 11
40481: PUSH
40482: LD_INT 12
40484: PUSH
40485: LD_INT 13
40487: PUSH
40488: LD_INT 14
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: ST_TO_ADDR
40497: GO 41110
40499: LD_INT 23
40501: DOUBLE
40502: EQUAL
40503: IFTRUE 40507
40505: GO 40533
40507: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40508: LD_ADDR_VAR 0 3
40512: PUSH
40513: LD_INT 11
40515: PUSH
40516: LD_INT 12
40518: PUSH
40519: LD_INT 13
40521: PUSH
40522: LD_INT 14
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: ST_TO_ADDR
40531: GO 41110
40533: LD_INT 24
40535: DOUBLE
40536: EQUAL
40537: IFTRUE 40541
40539: GO 40567
40541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40542: LD_ADDR_VAR 0 3
40546: PUSH
40547: LD_INT 11
40549: PUSH
40550: LD_INT 12
40552: PUSH
40553: LD_INT 13
40555: PUSH
40556: LD_INT 14
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: ST_TO_ADDR
40565: GO 41110
40567: LD_INT 30
40569: DOUBLE
40570: EQUAL
40571: IFTRUE 40575
40573: GO 40601
40575: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40576: LD_ADDR_VAR 0 3
40580: PUSH
40581: LD_INT 11
40583: PUSH
40584: LD_INT 12
40586: PUSH
40587: LD_INT 13
40589: PUSH
40590: LD_INT 14
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: ST_TO_ADDR
40599: GO 41110
40601: LD_INT 25
40603: DOUBLE
40604: EQUAL
40605: IFTRUE 40609
40607: GO 40627
40609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40610: LD_ADDR_VAR 0 3
40614: PUSH
40615: LD_INT 13
40617: PUSH
40618: LD_INT 14
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: ST_TO_ADDR
40625: GO 41110
40627: LD_INT 27
40629: DOUBLE
40630: EQUAL
40631: IFTRUE 40635
40633: GO 40653
40635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_INT 13
40643: PUSH
40644: LD_INT 14
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: ST_TO_ADDR
40651: GO 41110
40653: LD_EXP 141
40657: DOUBLE
40658: EQUAL
40659: IFTRUE 40663
40661: GO 40689
40663: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40664: LD_ADDR_VAR 0 3
40668: PUSH
40669: LD_INT 11
40671: PUSH
40672: LD_INT 12
40674: PUSH
40675: LD_INT 13
40677: PUSH
40678: LD_INT 14
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: ST_TO_ADDR
40687: GO 41110
40689: LD_INT 28
40691: DOUBLE
40692: EQUAL
40693: IFTRUE 40697
40695: GO 40715
40697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40698: LD_ADDR_VAR 0 3
40702: PUSH
40703: LD_INT 13
40705: PUSH
40706: LD_INT 14
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: ST_TO_ADDR
40713: GO 41110
40715: LD_INT 29
40717: DOUBLE
40718: EQUAL
40719: IFTRUE 40723
40721: GO 40741
40723: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40724: LD_ADDR_VAR 0 3
40728: PUSH
40729: LD_INT 13
40731: PUSH
40732: LD_INT 14
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: ST_TO_ADDR
40739: GO 41110
40741: LD_INT 31
40743: DOUBLE
40744: EQUAL
40745: IFTRUE 40749
40747: GO 40767
40749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40750: LD_ADDR_VAR 0 3
40754: PUSH
40755: LD_INT 13
40757: PUSH
40758: LD_INT 14
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: ST_TO_ADDR
40765: GO 41110
40767: LD_INT 26
40769: DOUBLE
40770: EQUAL
40771: IFTRUE 40775
40773: GO 40793
40775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40776: LD_ADDR_VAR 0 3
40780: PUSH
40781: LD_INT 13
40783: PUSH
40784: LD_INT 14
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: ST_TO_ADDR
40791: GO 41110
40793: LD_INT 42
40795: DOUBLE
40796: EQUAL
40797: IFTRUE 40801
40799: GO 40827
40801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40802: LD_ADDR_VAR 0 3
40806: PUSH
40807: LD_INT 21
40809: PUSH
40810: LD_INT 22
40812: PUSH
40813: LD_INT 23
40815: PUSH
40816: LD_INT 24
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: ST_TO_ADDR
40825: GO 41110
40827: LD_INT 43
40829: DOUBLE
40830: EQUAL
40831: IFTRUE 40835
40833: GO 40861
40835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40836: LD_ADDR_VAR 0 3
40840: PUSH
40841: LD_INT 21
40843: PUSH
40844: LD_INT 22
40846: PUSH
40847: LD_INT 23
40849: PUSH
40850: LD_INT 24
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: ST_TO_ADDR
40859: GO 41110
40861: LD_INT 44
40863: DOUBLE
40864: EQUAL
40865: IFTRUE 40869
40867: GO 40895
40869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40870: LD_ADDR_VAR 0 3
40874: PUSH
40875: LD_INT 21
40877: PUSH
40878: LD_INT 22
40880: PUSH
40881: LD_INT 23
40883: PUSH
40884: LD_INT 24
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: ST_TO_ADDR
40893: GO 41110
40895: LD_INT 45
40897: DOUBLE
40898: EQUAL
40899: IFTRUE 40903
40901: GO 40929
40903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40904: LD_ADDR_VAR 0 3
40908: PUSH
40909: LD_INT 21
40911: PUSH
40912: LD_INT 22
40914: PUSH
40915: LD_INT 23
40917: PUSH
40918: LD_INT 24
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: ST_TO_ADDR
40927: GO 41110
40929: LD_INT 49
40931: DOUBLE
40932: EQUAL
40933: IFTRUE 40937
40935: GO 40963
40937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40938: LD_ADDR_VAR 0 3
40942: PUSH
40943: LD_INT 21
40945: PUSH
40946: LD_INT 22
40948: PUSH
40949: LD_INT 23
40951: PUSH
40952: LD_INT 24
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: ST_TO_ADDR
40961: GO 41110
40963: LD_INT 51
40965: DOUBLE
40966: EQUAL
40967: IFTRUE 40971
40969: GO 40997
40971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40972: LD_ADDR_VAR 0 3
40976: PUSH
40977: LD_INT 21
40979: PUSH
40980: LD_INT 22
40982: PUSH
40983: LD_INT 23
40985: PUSH
40986: LD_INT 24
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
40995: GO 41110
40997: LD_INT 52
40999: DOUBLE
41000: EQUAL
41001: IFTRUE 41005
41003: GO 41031
41005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41006: LD_ADDR_VAR 0 3
41010: PUSH
41011: LD_INT 21
41013: PUSH
41014: LD_INT 22
41016: PUSH
41017: LD_INT 23
41019: PUSH
41020: LD_INT 24
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: ST_TO_ADDR
41029: GO 41110
41031: LD_INT 53
41033: DOUBLE
41034: EQUAL
41035: IFTRUE 41039
41037: GO 41057
41039: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_INT 23
41047: PUSH
41048: LD_INT 24
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: ST_TO_ADDR
41055: GO 41110
41057: LD_INT 46
41059: DOUBLE
41060: EQUAL
41061: IFTRUE 41065
41063: GO 41083
41065: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41066: LD_ADDR_VAR 0 3
41070: PUSH
41071: LD_INT 23
41073: PUSH
41074: LD_INT 24
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: ST_TO_ADDR
41081: GO 41110
41083: LD_INT 47
41085: DOUBLE
41086: EQUAL
41087: IFTRUE 41091
41089: GO 41109
41091: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41092: LD_ADDR_VAR 0 3
41096: PUSH
41097: LD_INT 23
41099: PUSH
41100: LD_INT 24
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: ST_TO_ADDR
41107: GO 41110
41109: POP
// result := ( chassis in result ) ;
41110: LD_ADDR_VAR 0 3
41114: PUSH
41115: LD_VAR 0 1
41119: PUSH
41120: LD_VAR 0 3
41124: IN
41125: ST_TO_ADDR
// end ;
41126: LD_VAR 0 3
41130: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41131: LD_INT 0
41133: PPUSH
41134: PPUSH
41135: PPUSH
41136: PPUSH
41137: PPUSH
41138: PPUSH
41139: PPUSH
// result := array ;
41140: LD_ADDR_VAR 0 5
41144: PUSH
41145: LD_VAR 0 1
41149: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41150: LD_VAR 0 1
41154: NOT
41155: PUSH
41156: LD_VAR 0 2
41160: NOT
41161: OR
41162: PUSH
41163: LD_VAR 0 3
41167: NOT
41168: OR
41169: PUSH
41170: LD_VAR 0 2
41174: PUSH
41175: LD_VAR 0 1
41179: GREATER
41180: OR
41181: PUSH
41182: LD_VAR 0 3
41186: PUSH
41187: LD_VAR 0 1
41191: GREATER
41192: OR
41193: IFFALSE 41197
// exit ;
41195: GO 41493
// if direction then
41197: LD_VAR 0 4
41201: IFFALSE 41265
// begin d := 1 ;
41203: LD_ADDR_VAR 0 9
41207: PUSH
41208: LD_INT 1
41210: ST_TO_ADDR
// if i_from > i_to then
41211: LD_VAR 0 2
41215: PUSH
41216: LD_VAR 0 3
41220: GREATER
41221: IFFALSE 41247
// length := ( array - i_from ) + i_to else
41223: LD_ADDR_VAR 0 11
41227: PUSH
41228: LD_VAR 0 1
41232: PUSH
41233: LD_VAR 0 2
41237: MINUS
41238: PUSH
41239: LD_VAR 0 3
41243: PLUS
41244: ST_TO_ADDR
41245: GO 41263
// length := i_to - i_from ;
41247: LD_ADDR_VAR 0 11
41251: PUSH
41252: LD_VAR 0 3
41256: PUSH
41257: LD_VAR 0 2
41261: MINUS
41262: ST_TO_ADDR
// end else
41263: GO 41326
// begin d := - 1 ;
41265: LD_ADDR_VAR 0 9
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: ST_TO_ADDR
// if i_from > i_to then
41274: LD_VAR 0 2
41278: PUSH
41279: LD_VAR 0 3
41283: GREATER
41284: IFFALSE 41304
// length := i_from - i_to else
41286: LD_ADDR_VAR 0 11
41290: PUSH
41291: LD_VAR 0 2
41295: PUSH
41296: LD_VAR 0 3
41300: MINUS
41301: ST_TO_ADDR
41302: GO 41326
// length := ( array - i_to ) + i_from ;
41304: LD_ADDR_VAR 0 11
41308: PUSH
41309: LD_VAR 0 1
41313: PUSH
41314: LD_VAR 0 3
41318: MINUS
41319: PUSH
41320: LD_VAR 0 2
41324: PLUS
41325: ST_TO_ADDR
// end ; if not length then
41326: LD_VAR 0 11
41330: NOT
41331: IFFALSE 41335
// exit ;
41333: GO 41493
// tmp := array ;
41335: LD_ADDR_VAR 0 10
41339: PUSH
41340: LD_VAR 0 1
41344: ST_TO_ADDR
// for i = 1 to length do
41345: LD_ADDR_VAR 0 6
41349: PUSH
41350: DOUBLE
41351: LD_INT 1
41353: DEC
41354: ST_TO_ADDR
41355: LD_VAR 0 11
41359: PUSH
41360: FOR_TO
41361: IFFALSE 41481
// begin for j = 1 to array do
41363: LD_ADDR_VAR 0 7
41367: PUSH
41368: DOUBLE
41369: LD_INT 1
41371: DEC
41372: ST_TO_ADDR
41373: LD_VAR 0 1
41377: PUSH
41378: FOR_TO
41379: IFFALSE 41467
// begin k := j + d ;
41381: LD_ADDR_VAR 0 8
41385: PUSH
41386: LD_VAR 0 7
41390: PUSH
41391: LD_VAR 0 9
41395: PLUS
41396: ST_TO_ADDR
// if k > array then
41397: LD_VAR 0 8
41401: PUSH
41402: LD_VAR 0 1
41406: GREATER
41407: IFFALSE 41417
// k := 1 ;
41409: LD_ADDR_VAR 0 8
41413: PUSH
41414: LD_INT 1
41416: ST_TO_ADDR
// if not k then
41417: LD_VAR 0 8
41421: NOT
41422: IFFALSE 41434
// k := array ;
41424: LD_ADDR_VAR 0 8
41428: PUSH
41429: LD_VAR 0 1
41433: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41434: LD_ADDR_VAR 0 10
41438: PUSH
41439: LD_VAR 0 10
41443: PPUSH
41444: LD_VAR 0 8
41448: PPUSH
41449: LD_VAR 0 1
41453: PUSH
41454: LD_VAR 0 7
41458: ARRAY
41459: PPUSH
41460: CALL_OW 1
41464: ST_TO_ADDR
// end ;
41465: GO 41378
41467: POP
41468: POP
// array := tmp ;
41469: LD_ADDR_VAR 0 1
41473: PUSH
41474: LD_VAR 0 10
41478: ST_TO_ADDR
// end ;
41479: GO 41360
41481: POP
41482: POP
// result := array ;
41483: LD_ADDR_VAR 0 5
41487: PUSH
41488: LD_VAR 0 1
41492: ST_TO_ADDR
// end ;
41493: LD_VAR 0 5
41497: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41498: LD_INT 0
41500: PPUSH
41501: PPUSH
// result := 0 ;
41502: LD_ADDR_VAR 0 3
41506: PUSH
41507: LD_INT 0
41509: ST_TO_ADDR
// if not array or not value in array then
41510: LD_VAR 0 1
41514: NOT
41515: PUSH
41516: LD_VAR 0 2
41520: PUSH
41521: LD_VAR 0 1
41525: IN
41526: NOT
41527: OR
41528: IFFALSE 41532
// exit ;
41530: GO 41586
// for i = 1 to array do
41532: LD_ADDR_VAR 0 4
41536: PUSH
41537: DOUBLE
41538: LD_INT 1
41540: DEC
41541: ST_TO_ADDR
41542: LD_VAR 0 1
41546: PUSH
41547: FOR_TO
41548: IFFALSE 41584
// if value = array [ i ] then
41550: LD_VAR 0 2
41554: PUSH
41555: LD_VAR 0 1
41559: PUSH
41560: LD_VAR 0 4
41564: ARRAY
41565: EQUAL
41566: IFFALSE 41582
// begin result := i ;
41568: LD_ADDR_VAR 0 3
41572: PUSH
41573: LD_VAR 0 4
41577: ST_TO_ADDR
// exit ;
41578: POP
41579: POP
41580: GO 41586
// end ;
41582: GO 41547
41584: POP
41585: POP
// end ;
41586: LD_VAR 0 3
41590: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41591: LD_INT 0
41593: PPUSH
// vc_chassis := chassis ;
41594: LD_ADDR_OWVAR 37
41598: PUSH
41599: LD_VAR 0 1
41603: ST_TO_ADDR
// vc_engine := engine ;
41604: LD_ADDR_OWVAR 39
41608: PUSH
41609: LD_VAR 0 2
41613: ST_TO_ADDR
// vc_control := control ;
41614: LD_ADDR_OWVAR 38
41618: PUSH
41619: LD_VAR 0 3
41623: ST_TO_ADDR
// vc_weapon := weapon ;
41624: LD_ADDR_OWVAR 40
41628: PUSH
41629: LD_VAR 0 4
41633: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41634: LD_ADDR_OWVAR 41
41638: PUSH
41639: LD_VAR 0 5
41643: ST_TO_ADDR
// end ;
41644: LD_VAR 0 6
41648: RET
// export function WantPlant ( unit ) ; var task ; begin
41649: LD_INT 0
41651: PPUSH
41652: PPUSH
// result := false ;
41653: LD_ADDR_VAR 0 2
41657: PUSH
41658: LD_INT 0
41660: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41661: LD_ADDR_VAR 0 3
41665: PUSH
41666: LD_VAR 0 1
41670: PPUSH
41671: CALL_OW 437
41675: ST_TO_ADDR
// if task then
41676: LD_VAR 0 3
41680: IFFALSE 41708
// if task [ 1 ] [ 1 ] = p then
41682: LD_VAR 0 3
41686: PUSH
41687: LD_INT 1
41689: ARRAY
41690: PUSH
41691: LD_INT 1
41693: ARRAY
41694: PUSH
41695: LD_STRING p
41697: EQUAL
41698: IFFALSE 41708
// result := true ;
41700: LD_ADDR_VAR 0 2
41704: PUSH
41705: LD_INT 1
41707: ST_TO_ADDR
// end ;
41708: LD_VAR 0 2
41712: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41713: LD_INT 0
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
// if pos < 1 then
41719: LD_VAR 0 2
41723: PUSH
41724: LD_INT 1
41726: LESS
41727: IFFALSE 41731
// exit ;
41729: GO 42034
// if pos = 1 then
41731: LD_VAR 0 2
41735: PUSH
41736: LD_INT 1
41738: EQUAL
41739: IFFALSE 41772
// result := Replace ( arr , pos [ 1 ] , value ) else
41741: LD_ADDR_VAR 0 4
41745: PUSH
41746: LD_VAR 0 1
41750: PPUSH
41751: LD_VAR 0 2
41755: PUSH
41756: LD_INT 1
41758: ARRAY
41759: PPUSH
41760: LD_VAR 0 3
41764: PPUSH
41765: CALL_OW 1
41769: ST_TO_ADDR
41770: GO 42034
// begin tmp := arr ;
41772: LD_ADDR_VAR 0 6
41776: PUSH
41777: LD_VAR 0 1
41781: ST_TO_ADDR
// s_arr := [ tmp ] ;
41782: LD_ADDR_VAR 0 7
41786: PUSH
41787: LD_VAR 0 6
41791: PUSH
41792: EMPTY
41793: LIST
41794: ST_TO_ADDR
// for i = 1 to pos - 1 do
41795: LD_ADDR_VAR 0 5
41799: PUSH
41800: DOUBLE
41801: LD_INT 1
41803: DEC
41804: ST_TO_ADDR
41805: LD_VAR 0 2
41809: PUSH
41810: LD_INT 1
41812: MINUS
41813: PUSH
41814: FOR_TO
41815: IFFALSE 41860
// begin tmp := tmp [ pos [ i ] ] ;
41817: LD_ADDR_VAR 0 6
41821: PUSH
41822: LD_VAR 0 6
41826: PUSH
41827: LD_VAR 0 2
41831: PUSH
41832: LD_VAR 0 5
41836: ARRAY
41837: ARRAY
41838: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41839: LD_ADDR_VAR 0 7
41843: PUSH
41844: LD_VAR 0 7
41848: PUSH
41849: LD_VAR 0 6
41853: PUSH
41854: EMPTY
41855: LIST
41856: ADD
41857: ST_TO_ADDR
// end ;
41858: GO 41814
41860: POP
41861: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41862: LD_ADDR_VAR 0 6
41866: PUSH
41867: LD_VAR 0 6
41871: PPUSH
41872: LD_VAR 0 2
41876: PUSH
41877: LD_VAR 0 2
41881: ARRAY
41882: PPUSH
41883: LD_VAR 0 3
41887: PPUSH
41888: CALL_OW 1
41892: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41893: LD_ADDR_VAR 0 7
41897: PUSH
41898: LD_VAR 0 7
41902: PPUSH
41903: LD_VAR 0 7
41907: PPUSH
41908: LD_VAR 0 6
41912: PPUSH
41913: CALL_OW 1
41917: ST_TO_ADDR
// for i = s_arr downto 2 do
41918: LD_ADDR_VAR 0 5
41922: PUSH
41923: DOUBLE
41924: LD_VAR 0 7
41928: INC
41929: ST_TO_ADDR
41930: LD_INT 2
41932: PUSH
41933: FOR_DOWNTO
41934: IFFALSE 42018
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41936: LD_ADDR_VAR 0 6
41940: PUSH
41941: LD_VAR 0 7
41945: PUSH
41946: LD_VAR 0 5
41950: PUSH
41951: LD_INT 1
41953: MINUS
41954: ARRAY
41955: PPUSH
41956: LD_VAR 0 2
41960: PUSH
41961: LD_VAR 0 5
41965: PUSH
41966: LD_INT 1
41968: MINUS
41969: ARRAY
41970: PPUSH
41971: LD_VAR 0 7
41975: PUSH
41976: LD_VAR 0 5
41980: ARRAY
41981: PPUSH
41982: CALL_OW 1
41986: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41987: LD_ADDR_VAR 0 7
41991: PUSH
41992: LD_VAR 0 7
41996: PPUSH
41997: LD_VAR 0 5
42001: PUSH
42002: LD_INT 1
42004: MINUS
42005: PPUSH
42006: LD_VAR 0 6
42010: PPUSH
42011: CALL_OW 1
42015: ST_TO_ADDR
// end ;
42016: GO 41933
42018: POP
42019: POP
// result := s_arr [ 1 ] ;
42020: LD_ADDR_VAR 0 4
42024: PUSH
42025: LD_VAR 0 7
42029: PUSH
42030: LD_INT 1
42032: ARRAY
42033: ST_TO_ADDR
// end ; end ;
42034: LD_VAR 0 4
42038: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42039: LD_INT 0
42041: PPUSH
42042: PPUSH
// if not list then
42043: LD_VAR 0 1
42047: NOT
42048: IFFALSE 42052
// exit ;
42050: GO 42143
// i := list [ pos1 ] ;
42052: LD_ADDR_VAR 0 5
42056: PUSH
42057: LD_VAR 0 1
42061: PUSH
42062: LD_VAR 0 2
42066: ARRAY
42067: ST_TO_ADDR
// if not i then
42068: LD_VAR 0 5
42072: NOT
42073: IFFALSE 42077
// exit ;
42075: GO 42143
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42077: LD_ADDR_VAR 0 1
42081: PUSH
42082: LD_VAR 0 1
42086: PPUSH
42087: LD_VAR 0 2
42091: PPUSH
42092: LD_VAR 0 1
42096: PUSH
42097: LD_VAR 0 3
42101: ARRAY
42102: PPUSH
42103: CALL_OW 1
42107: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42108: LD_ADDR_VAR 0 1
42112: PUSH
42113: LD_VAR 0 1
42117: PPUSH
42118: LD_VAR 0 3
42122: PPUSH
42123: LD_VAR 0 5
42127: PPUSH
42128: CALL_OW 1
42132: ST_TO_ADDR
// result := list ;
42133: LD_ADDR_VAR 0 4
42137: PUSH
42138: LD_VAR 0 1
42142: ST_TO_ADDR
// end ;
42143: LD_VAR 0 4
42147: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42148: LD_INT 0
42150: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42151: LD_ADDR_VAR 0 5
42155: PUSH
42156: LD_VAR 0 1
42160: PPUSH
42161: CALL_OW 250
42165: PPUSH
42166: LD_VAR 0 1
42170: PPUSH
42171: CALL_OW 251
42175: PPUSH
42176: LD_VAR 0 2
42180: PPUSH
42181: LD_VAR 0 3
42185: PPUSH
42186: LD_VAR 0 4
42190: PPUSH
42191: CALL 42201 0 5
42195: ST_TO_ADDR
// end ;
42196: LD_VAR 0 5
42200: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42201: LD_INT 0
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
// if not list then
42207: LD_VAR 0 3
42211: NOT
42212: IFFALSE 42216
// exit ;
42214: GO 42604
// result := [ ] ;
42216: LD_ADDR_VAR 0 6
42220: PUSH
42221: EMPTY
42222: ST_TO_ADDR
// for i in list do
42223: LD_ADDR_VAR 0 7
42227: PUSH
42228: LD_VAR 0 3
42232: PUSH
42233: FOR_IN
42234: IFFALSE 42436
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42236: LD_ADDR_VAR 0 9
42240: PUSH
42241: LD_VAR 0 7
42245: PPUSH
42246: LD_VAR 0 1
42250: PPUSH
42251: LD_VAR 0 2
42255: PPUSH
42256: CALL_OW 297
42260: ST_TO_ADDR
// if not result then
42261: LD_VAR 0 6
42265: NOT
42266: IFFALSE 42292
// result := [ [ i , tmp ] ] else
42268: LD_ADDR_VAR 0 6
42272: PUSH
42273: LD_VAR 0 7
42277: PUSH
42278: LD_VAR 0 9
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: EMPTY
42288: LIST
42289: ST_TO_ADDR
42290: GO 42434
// begin if result [ result ] [ 2 ] < tmp then
42292: LD_VAR 0 6
42296: PUSH
42297: LD_VAR 0 6
42301: ARRAY
42302: PUSH
42303: LD_INT 2
42305: ARRAY
42306: PUSH
42307: LD_VAR 0 9
42311: LESS
42312: IFFALSE 42354
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42314: LD_ADDR_VAR 0 6
42318: PUSH
42319: LD_VAR 0 6
42323: PPUSH
42324: LD_VAR 0 6
42328: PUSH
42329: LD_INT 1
42331: PLUS
42332: PPUSH
42333: LD_VAR 0 7
42337: PUSH
42338: LD_VAR 0 9
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PPUSH
42347: CALL_OW 2
42351: ST_TO_ADDR
42352: GO 42434
// for j = 1 to result do
42354: LD_ADDR_VAR 0 8
42358: PUSH
42359: DOUBLE
42360: LD_INT 1
42362: DEC
42363: ST_TO_ADDR
42364: LD_VAR 0 6
42368: PUSH
42369: FOR_TO
42370: IFFALSE 42432
// begin if tmp < result [ j ] [ 2 ] then
42372: LD_VAR 0 9
42376: PUSH
42377: LD_VAR 0 6
42381: PUSH
42382: LD_VAR 0 8
42386: ARRAY
42387: PUSH
42388: LD_INT 2
42390: ARRAY
42391: LESS
42392: IFFALSE 42430
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42394: LD_ADDR_VAR 0 6
42398: PUSH
42399: LD_VAR 0 6
42403: PPUSH
42404: LD_VAR 0 8
42408: PPUSH
42409: LD_VAR 0 7
42413: PUSH
42414: LD_VAR 0 9
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PPUSH
42423: CALL_OW 2
42427: ST_TO_ADDR
// break ;
42428: GO 42432
// end ; end ;
42430: GO 42369
42432: POP
42433: POP
// end ; end ;
42434: GO 42233
42436: POP
42437: POP
// if result and not asc then
42438: LD_VAR 0 6
42442: PUSH
42443: LD_VAR 0 4
42447: NOT
42448: AND
42449: IFFALSE 42524
// begin tmp := result ;
42451: LD_ADDR_VAR 0 9
42455: PUSH
42456: LD_VAR 0 6
42460: ST_TO_ADDR
// for i = tmp downto 1 do
42461: LD_ADDR_VAR 0 7
42465: PUSH
42466: DOUBLE
42467: LD_VAR 0 9
42471: INC
42472: ST_TO_ADDR
42473: LD_INT 1
42475: PUSH
42476: FOR_DOWNTO
42477: IFFALSE 42522
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42479: LD_ADDR_VAR 0 6
42483: PUSH
42484: LD_VAR 0 6
42488: PPUSH
42489: LD_VAR 0 9
42493: PUSH
42494: LD_VAR 0 7
42498: MINUS
42499: PUSH
42500: LD_INT 1
42502: PLUS
42503: PPUSH
42504: LD_VAR 0 9
42508: PUSH
42509: LD_VAR 0 7
42513: ARRAY
42514: PPUSH
42515: CALL_OW 1
42519: ST_TO_ADDR
42520: GO 42476
42522: POP
42523: POP
// end ; tmp := [ ] ;
42524: LD_ADDR_VAR 0 9
42528: PUSH
42529: EMPTY
42530: ST_TO_ADDR
// if mode then
42531: LD_VAR 0 5
42535: IFFALSE 42604
// begin for i = 1 to result do
42537: LD_ADDR_VAR 0 7
42541: PUSH
42542: DOUBLE
42543: LD_INT 1
42545: DEC
42546: ST_TO_ADDR
42547: LD_VAR 0 6
42551: PUSH
42552: FOR_TO
42553: IFFALSE 42592
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42555: LD_ADDR_VAR 0 9
42559: PUSH
42560: LD_VAR 0 9
42564: PPUSH
42565: LD_VAR 0 7
42569: PPUSH
42570: LD_VAR 0 6
42574: PUSH
42575: LD_VAR 0 7
42579: ARRAY
42580: PUSH
42581: LD_INT 1
42583: ARRAY
42584: PPUSH
42585: CALL_OW 1
42589: ST_TO_ADDR
42590: GO 42552
42592: POP
42593: POP
// result := tmp ;
42594: LD_ADDR_VAR 0 6
42598: PUSH
42599: LD_VAR 0 9
42603: ST_TO_ADDR
// end ; end ;
42604: LD_VAR 0 6
42608: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42609: LD_INT 0
42611: PPUSH
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42617: LD_ADDR_VAR 0 5
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
// if not x or not y then
42639: LD_VAR 0 2
42643: NOT
42644: PUSH
42645: LD_VAR 0 3
42649: NOT
42650: OR
42651: IFFALSE 42655
// exit ;
42653: GO 44307
// if not range then
42655: LD_VAR 0 4
42659: NOT
42660: IFFALSE 42670
// range := 10 ;
42662: LD_ADDR_VAR 0 4
42666: PUSH
42667: LD_INT 10
42669: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42670: LD_ADDR_VAR 0 8
42674: PUSH
42675: LD_INT 81
42677: PUSH
42678: LD_VAR 0 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 92
42689: PUSH
42690: LD_VAR 0 2
42694: PUSH
42695: LD_VAR 0 3
42699: PUSH
42700: LD_VAR 0 4
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: LD_INT 21
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: PPUSH
42733: CALL_OW 69
42737: ST_TO_ADDR
// if not tmp then
42738: LD_VAR 0 8
42742: NOT
42743: IFFALSE 42747
// exit ;
42745: GO 44307
// for i in tmp do
42747: LD_ADDR_VAR 0 6
42751: PUSH
42752: LD_VAR 0 8
42756: PUSH
42757: FOR_IN
42758: IFFALSE 44282
// begin points := [ 0 , 0 , 0 ] ;
42760: LD_ADDR_VAR 0 9
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: ST_TO_ADDR
// bpoints := 1 ;
42779: LD_ADDR_VAR 0 10
42783: PUSH
42784: LD_INT 1
42786: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42787: LD_VAR 0 6
42791: PPUSH
42792: CALL_OW 247
42796: PUSH
42797: LD_INT 1
42799: DOUBLE
42800: EQUAL
42801: IFTRUE 42805
42803: GO 43383
42805: POP
// begin if GetClass ( i ) = 1 then
42806: LD_VAR 0 6
42810: PPUSH
42811: CALL_OW 257
42815: PUSH
42816: LD_INT 1
42818: EQUAL
42819: IFFALSE 42840
// points := [ 10 , 5 , 3 ] ;
42821: LD_ADDR_VAR 0 9
42825: PUSH
42826: LD_INT 10
42828: PUSH
42829: LD_INT 5
42831: PUSH
42832: LD_INT 3
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42840: LD_VAR 0 6
42844: PPUSH
42845: CALL_OW 257
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: LD_INT 4
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: IN
42864: IFFALSE 42885
// points := [ 3 , 2 , 1 ] ;
42866: LD_ADDR_VAR 0 9
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42885: LD_VAR 0 6
42889: PPUSH
42890: CALL_OW 257
42894: PUSH
42895: LD_INT 5
42897: EQUAL
42898: IFFALSE 42919
// points := [ 130 , 5 , 2 ] ;
42900: LD_ADDR_VAR 0 9
42904: PUSH
42905: LD_INT 130
42907: PUSH
42908: LD_INT 5
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42919: LD_VAR 0 6
42923: PPUSH
42924: CALL_OW 257
42928: PUSH
42929: LD_INT 8
42931: EQUAL
42932: IFFALSE 42953
// points := [ 35 , 35 , 30 ] ;
42934: LD_ADDR_VAR 0 9
42938: PUSH
42939: LD_INT 35
42941: PUSH
42942: LD_INT 35
42944: PUSH
42945: LD_INT 30
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42953: LD_VAR 0 6
42957: PPUSH
42958: CALL_OW 257
42962: PUSH
42963: LD_INT 9
42965: EQUAL
42966: IFFALSE 42987
// points := [ 20 , 55 , 40 ] ;
42968: LD_ADDR_VAR 0 9
42972: PUSH
42973: LD_INT 20
42975: PUSH
42976: LD_INT 55
42978: PUSH
42979: LD_INT 40
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42987: LD_VAR 0 6
42991: PPUSH
42992: CALL_OW 257
42996: PUSH
42997: LD_INT 12
42999: PUSH
43000: LD_INT 16
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: IN
43007: IFFALSE 43028
// points := [ 5 , 3 , 2 ] ;
43009: LD_ADDR_VAR 0 9
43013: PUSH
43014: LD_INT 5
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43028: LD_VAR 0 6
43032: PPUSH
43033: CALL_OW 257
43037: PUSH
43038: LD_INT 17
43040: EQUAL
43041: IFFALSE 43062
// points := [ 100 , 50 , 75 ] ;
43043: LD_ADDR_VAR 0 9
43047: PUSH
43048: LD_INT 100
43050: PUSH
43051: LD_INT 50
43053: PUSH
43054: LD_INT 75
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: LIST
43061: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43062: LD_VAR 0 6
43066: PPUSH
43067: CALL_OW 257
43071: PUSH
43072: LD_INT 15
43074: EQUAL
43075: IFFALSE 43096
// points := [ 10 , 5 , 3 ] ;
43077: LD_ADDR_VAR 0 9
43081: PUSH
43082: LD_INT 10
43084: PUSH
43085: LD_INT 5
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43096: LD_VAR 0 6
43100: PPUSH
43101: CALL_OW 257
43105: PUSH
43106: LD_INT 14
43108: EQUAL
43109: IFFALSE 43130
// points := [ 10 , 0 , 0 ] ;
43111: LD_ADDR_VAR 0 9
43115: PUSH
43116: LD_INT 10
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43130: LD_VAR 0 6
43134: PPUSH
43135: CALL_OW 257
43139: PUSH
43140: LD_INT 11
43142: EQUAL
43143: IFFALSE 43164
// points := [ 30 , 10 , 5 ] ;
43145: LD_ADDR_VAR 0 9
43149: PUSH
43150: LD_INT 30
43152: PUSH
43153: LD_INT 10
43155: PUSH
43156: LD_INT 5
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: LIST
43163: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43164: LD_VAR 0 1
43168: PPUSH
43169: LD_INT 5
43171: PPUSH
43172: CALL_OW 321
43176: PUSH
43177: LD_INT 2
43179: EQUAL
43180: IFFALSE 43197
// bpoints := bpoints * 1.8 ;
43182: LD_ADDR_VAR 0 10
43186: PUSH
43187: LD_VAR 0 10
43191: PUSH
43192: LD_REAL  1.80000000000000E+0000
43195: MUL
43196: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43197: LD_VAR 0 6
43201: PPUSH
43202: CALL_OW 257
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: LD_INT 4
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: IN
43225: PUSH
43226: LD_VAR 0 1
43230: PPUSH
43231: LD_INT 51
43233: PPUSH
43234: CALL_OW 321
43238: PUSH
43239: LD_INT 2
43241: EQUAL
43242: AND
43243: IFFALSE 43260
// bpoints := bpoints * 1.2 ;
43245: LD_ADDR_VAR 0 10
43249: PUSH
43250: LD_VAR 0 10
43254: PUSH
43255: LD_REAL  1.20000000000000E+0000
43258: MUL
43259: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43260: LD_VAR 0 6
43264: PPUSH
43265: CALL_OW 257
43269: PUSH
43270: LD_INT 5
43272: PUSH
43273: LD_INT 7
43275: PUSH
43276: LD_INT 9
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: LIST
43283: IN
43284: PUSH
43285: LD_VAR 0 1
43289: PPUSH
43290: LD_INT 52
43292: PPUSH
43293: CALL_OW 321
43297: PUSH
43298: LD_INT 2
43300: EQUAL
43301: AND
43302: IFFALSE 43319
// bpoints := bpoints * 1.5 ;
43304: LD_ADDR_VAR 0 10
43308: PUSH
43309: LD_VAR 0 10
43313: PUSH
43314: LD_REAL  1.50000000000000E+0000
43317: MUL
43318: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43319: LD_VAR 0 1
43323: PPUSH
43324: LD_INT 66
43326: PPUSH
43327: CALL_OW 321
43331: PUSH
43332: LD_INT 2
43334: EQUAL
43335: IFFALSE 43352
// bpoints := bpoints * 1.1 ;
43337: LD_ADDR_VAR 0 10
43341: PUSH
43342: LD_VAR 0 10
43346: PUSH
43347: LD_REAL  1.10000000000000E+0000
43350: MUL
43351: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43352: LD_ADDR_VAR 0 10
43356: PUSH
43357: LD_VAR 0 10
43361: PUSH
43362: LD_VAR 0 6
43366: PPUSH
43367: LD_INT 1
43369: PPUSH
43370: CALL_OW 259
43374: PUSH
43375: LD_REAL  1.15000000000000E+0000
43378: MUL
43379: MUL
43380: ST_TO_ADDR
// end ; unit_vehicle :
43381: GO 44211
43383: LD_INT 2
43385: DOUBLE
43386: EQUAL
43387: IFTRUE 43391
43389: GO 44199
43391: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43392: LD_VAR 0 6
43396: PPUSH
43397: CALL_OW 264
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: LD_INT 42
43407: PUSH
43408: LD_INT 24
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: IN
43416: IFFALSE 43437
// points := [ 25 , 5 , 3 ] ;
43418: LD_ADDR_VAR 0 9
43422: PUSH
43423: LD_INT 25
43425: PUSH
43426: LD_INT 5
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43437: LD_VAR 0 6
43441: PPUSH
43442: CALL_OW 264
43446: PUSH
43447: LD_INT 4
43449: PUSH
43450: LD_INT 43
43452: PUSH
43453: LD_INT 25
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: IN
43461: IFFALSE 43482
// points := [ 40 , 15 , 5 ] ;
43463: LD_ADDR_VAR 0 9
43467: PUSH
43468: LD_INT 40
43470: PUSH
43471: LD_INT 15
43473: PUSH
43474: LD_INT 5
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43482: LD_VAR 0 6
43486: PPUSH
43487: CALL_OW 264
43491: PUSH
43492: LD_INT 3
43494: PUSH
43495: LD_INT 23
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: IN
43502: IFFALSE 43523
// points := [ 7 , 25 , 8 ] ;
43504: LD_ADDR_VAR 0 9
43508: PUSH
43509: LD_INT 7
43511: PUSH
43512: LD_INT 25
43514: PUSH
43515: LD_INT 8
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43523: LD_VAR 0 6
43527: PPUSH
43528: CALL_OW 264
43532: PUSH
43533: LD_INT 5
43535: PUSH
43536: LD_INT 27
43538: PUSH
43539: LD_INT 44
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: IN
43547: IFFALSE 43568
// points := [ 14 , 50 , 16 ] ;
43549: LD_ADDR_VAR 0 9
43553: PUSH
43554: LD_INT 14
43556: PUSH
43557: LD_INT 50
43559: PUSH
43560: LD_INT 16
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43568: LD_VAR 0 6
43572: PPUSH
43573: CALL_OW 264
43577: PUSH
43578: LD_INT 6
43580: PUSH
43581: LD_INT 46
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: IN
43588: IFFALSE 43609
// points := [ 32 , 120 , 70 ] ;
43590: LD_ADDR_VAR 0 9
43594: PUSH
43595: LD_INT 32
43597: PUSH
43598: LD_INT 120
43600: PUSH
43601: LD_INT 70
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43609: LD_VAR 0 6
43613: PPUSH
43614: CALL_OW 264
43618: PUSH
43619: LD_INT 7
43621: PUSH
43622: LD_INT 28
43624: PUSH
43625: LD_INT 45
43627: PUSH
43628: LD_EXP 141
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: IN
43639: IFFALSE 43660
// points := [ 35 , 20 , 45 ] ;
43641: LD_ADDR_VAR 0 9
43645: PUSH
43646: LD_INT 35
43648: PUSH
43649: LD_INT 20
43651: PUSH
43652: LD_INT 45
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43660: LD_VAR 0 6
43664: PPUSH
43665: CALL_OW 264
43669: PUSH
43670: LD_INT 47
43672: PUSH
43673: EMPTY
43674: LIST
43675: IN
43676: IFFALSE 43697
// points := [ 67 , 45 , 75 ] ;
43678: LD_ADDR_VAR 0 9
43682: PUSH
43683: LD_INT 67
43685: PUSH
43686: LD_INT 45
43688: PUSH
43689: LD_INT 75
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43697: LD_VAR 0 6
43701: PPUSH
43702: CALL_OW 264
43706: PUSH
43707: LD_INT 26
43709: PUSH
43710: EMPTY
43711: LIST
43712: IN
43713: IFFALSE 43734
// points := [ 120 , 30 , 80 ] ;
43715: LD_ADDR_VAR 0 9
43719: PUSH
43720: LD_INT 120
43722: PUSH
43723: LD_INT 30
43725: PUSH
43726: LD_INT 80
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43734: LD_VAR 0 6
43738: PPUSH
43739: CALL_OW 264
43743: PUSH
43744: LD_INT 22
43746: PUSH
43747: EMPTY
43748: LIST
43749: IN
43750: IFFALSE 43771
// points := [ 40 , 1 , 1 ] ;
43752: LD_ADDR_VAR 0 9
43756: PUSH
43757: LD_INT 40
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43771: LD_VAR 0 6
43775: PPUSH
43776: CALL_OW 264
43780: PUSH
43781: LD_INT 29
43783: PUSH
43784: EMPTY
43785: LIST
43786: IN
43787: IFFALSE 43808
// points := [ 70 , 200 , 400 ] ;
43789: LD_ADDR_VAR 0 9
43793: PUSH
43794: LD_INT 70
43796: PUSH
43797: LD_INT 200
43799: PUSH
43800: LD_INT 400
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: LIST
43807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43808: LD_VAR 0 6
43812: PPUSH
43813: CALL_OW 264
43817: PUSH
43818: LD_INT 14
43820: PUSH
43821: LD_INT 53
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: IN
43828: IFFALSE 43849
// points := [ 40 , 10 , 20 ] ;
43830: LD_ADDR_VAR 0 9
43834: PUSH
43835: LD_INT 40
43837: PUSH
43838: LD_INT 10
43840: PUSH
43841: LD_INT 20
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43849: LD_VAR 0 6
43853: PPUSH
43854: CALL_OW 264
43858: PUSH
43859: LD_INT 9
43861: PUSH
43862: EMPTY
43863: LIST
43864: IN
43865: IFFALSE 43886
// points := [ 5 , 70 , 20 ] ;
43867: LD_ADDR_VAR 0 9
43871: PUSH
43872: LD_INT 5
43874: PUSH
43875: LD_INT 70
43877: PUSH
43878: LD_INT 20
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43886: LD_VAR 0 6
43890: PPUSH
43891: CALL_OW 264
43895: PUSH
43896: LD_INT 10
43898: PUSH
43899: EMPTY
43900: LIST
43901: IN
43902: IFFALSE 43923
// points := [ 35 , 110 , 70 ] ;
43904: LD_ADDR_VAR 0 9
43908: PUSH
43909: LD_INT 35
43911: PUSH
43912: LD_INT 110
43914: PUSH
43915: LD_INT 70
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43923: LD_VAR 0 6
43927: PPUSH
43928: CALL_OW 265
43932: PUSH
43933: LD_INT 25
43935: EQUAL
43936: IFFALSE 43957
// points := [ 80 , 65 , 100 ] ;
43938: LD_ADDR_VAR 0 9
43942: PUSH
43943: LD_INT 80
43945: PUSH
43946: LD_INT 65
43948: PUSH
43949: LD_INT 100
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: LIST
43956: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43957: LD_VAR 0 6
43961: PPUSH
43962: CALL_OW 263
43966: PUSH
43967: LD_INT 1
43969: EQUAL
43970: IFFALSE 44005
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43972: LD_ADDR_VAR 0 10
43976: PUSH
43977: LD_VAR 0 10
43981: PUSH
43982: LD_VAR 0 6
43986: PPUSH
43987: CALL_OW 311
43991: PPUSH
43992: LD_INT 3
43994: PPUSH
43995: CALL_OW 259
43999: PUSH
44000: LD_INT 4
44002: MUL
44003: MUL
44004: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44005: LD_VAR 0 6
44009: PPUSH
44010: CALL_OW 263
44014: PUSH
44015: LD_INT 2
44017: EQUAL
44018: IFFALSE 44069
// begin j := IsControledBy ( i ) ;
44020: LD_ADDR_VAR 0 7
44024: PUSH
44025: LD_VAR 0 6
44029: PPUSH
44030: CALL_OW 312
44034: ST_TO_ADDR
// if j then
44035: LD_VAR 0 7
44039: IFFALSE 44069
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44041: LD_ADDR_VAR 0 10
44045: PUSH
44046: LD_VAR 0 10
44050: PUSH
44051: LD_VAR 0 7
44055: PPUSH
44056: LD_INT 3
44058: PPUSH
44059: CALL_OW 259
44063: PUSH
44064: LD_INT 3
44066: MUL
44067: MUL
44068: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44069: LD_VAR 0 6
44073: PPUSH
44074: CALL_OW 264
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: LD_INT 6
44084: PUSH
44085: LD_INT 46
44087: PUSH
44088: LD_INT 44
44090: PUSH
44091: LD_INT 47
44093: PUSH
44094: LD_INT 45
44096: PUSH
44097: LD_INT 28
44099: PUSH
44100: LD_INT 7
44102: PUSH
44103: LD_INT 27
44105: PUSH
44106: LD_INT 29
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: IN
44121: PUSH
44122: LD_VAR 0 1
44126: PPUSH
44127: LD_INT 52
44129: PPUSH
44130: CALL_OW 321
44134: PUSH
44135: LD_INT 2
44137: EQUAL
44138: AND
44139: IFFALSE 44156
// bpoints := bpoints * 1.2 ;
44141: LD_ADDR_VAR 0 10
44145: PUSH
44146: LD_VAR 0 10
44150: PUSH
44151: LD_REAL  1.20000000000000E+0000
44154: MUL
44155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44156: LD_VAR 0 6
44160: PPUSH
44161: CALL_OW 264
44165: PUSH
44166: LD_INT 6
44168: PUSH
44169: LD_INT 46
44171: PUSH
44172: LD_INT 47
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: LIST
44179: IN
44180: IFFALSE 44197
// bpoints := bpoints * 1.2 ;
44182: LD_ADDR_VAR 0 10
44186: PUSH
44187: LD_VAR 0 10
44191: PUSH
44192: LD_REAL  1.20000000000000E+0000
44195: MUL
44196: ST_TO_ADDR
// end ; unit_building :
44197: GO 44211
44199: LD_INT 3
44201: DOUBLE
44202: EQUAL
44203: IFTRUE 44207
44205: GO 44210
44207: POP
// ; end ;
44208: GO 44211
44210: POP
// for j = 1 to 3 do
44211: LD_ADDR_VAR 0 7
44215: PUSH
44216: DOUBLE
44217: LD_INT 1
44219: DEC
44220: ST_TO_ADDR
44221: LD_INT 3
44223: PUSH
44224: FOR_TO
44225: IFFALSE 44278
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44227: LD_ADDR_VAR 0 5
44231: PUSH
44232: LD_VAR 0 5
44236: PPUSH
44237: LD_VAR 0 7
44241: PPUSH
44242: LD_VAR 0 5
44246: PUSH
44247: LD_VAR 0 7
44251: ARRAY
44252: PUSH
44253: LD_VAR 0 9
44257: PUSH
44258: LD_VAR 0 7
44262: ARRAY
44263: PUSH
44264: LD_VAR 0 10
44268: MUL
44269: PLUS
44270: PPUSH
44271: CALL_OW 1
44275: ST_TO_ADDR
44276: GO 44224
44278: POP
44279: POP
// end ;
44280: GO 42757
44282: POP
44283: POP
// result := Replace ( result , 4 , tmp ) ;
44284: LD_ADDR_VAR 0 5
44288: PUSH
44289: LD_VAR 0 5
44293: PPUSH
44294: LD_INT 4
44296: PPUSH
44297: LD_VAR 0 8
44301: PPUSH
44302: CALL_OW 1
44306: ST_TO_ADDR
// end ;
44307: LD_VAR 0 5
44311: RET
// export function DangerAtRange ( unit , range ) ; begin
44312: LD_INT 0
44314: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44315: LD_ADDR_VAR 0 3
44319: PUSH
44320: LD_VAR 0 1
44324: PPUSH
44325: CALL_OW 255
44329: PPUSH
44330: LD_VAR 0 1
44334: PPUSH
44335: CALL_OW 250
44339: PPUSH
44340: LD_VAR 0 1
44344: PPUSH
44345: CALL_OW 251
44349: PPUSH
44350: LD_VAR 0 2
44354: PPUSH
44355: CALL 42609 0 4
44359: ST_TO_ADDR
// end ;
44360: LD_VAR 0 3
44364: RET
// export function DangerInArea ( side , area ) ; begin
44365: LD_INT 0
44367: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44368: LD_ADDR_VAR 0 3
44372: PUSH
44373: LD_VAR 0 2
44377: PPUSH
44378: LD_INT 81
44380: PUSH
44381: LD_VAR 0 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PPUSH
44390: CALL_OW 70
44394: ST_TO_ADDR
// end ;
44395: LD_VAR 0 3
44399: RET
// export function IsExtension ( b ) ; begin
44400: LD_INT 0
44402: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44403: LD_ADDR_VAR 0 2
44407: PUSH
44408: LD_VAR 0 1
44412: PUSH
44413: LD_INT 23
44415: PUSH
44416: LD_INT 20
44418: PUSH
44419: LD_INT 22
44421: PUSH
44422: LD_INT 17
44424: PUSH
44425: LD_INT 24
44427: PUSH
44428: LD_INT 21
44430: PUSH
44431: LD_INT 19
44433: PUSH
44434: LD_INT 16
44436: PUSH
44437: LD_INT 25
44439: PUSH
44440: LD_INT 18
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: IN
44455: ST_TO_ADDR
// end ;
44456: LD_VAR 0 2
44460: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44461: LD_INT 0
44463: PPUSH
44464: PPUSH
44465: PPUSH
// result := [ ] ;
44466: LD_ADDR_VAR 0 4
44470: PUSH
44471: EMPTY
44472: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44473: LD_ADDR_VAR 0 5
44477: PUSH
44478: LD_VAR 0 2
44482: PPUSH
44483: LD_INT 21
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PPUSH
44493: CALL_OW 70
44497: ST_TO_ADDR
// if not tmp then
44498: LD_VAR 0 5
44502: NOT
44503: IFFALSE 44507
// exit ;
44505: GO 44571
// if checkLink then
44507: LD_VAR 0 3
44511: IFFALSE 44561
// begin for i in tmp do
44513: LD_ADDR_VAR 0 6
44517: PUSH
44518: LD_VAR 0 5
44522: PUSH
44523: FOR_IN
44524: IFFALSE 44559
// if GetBase ( i ) <> base then
44526: LD_VAR 0 6
44530: PPUSH
44531: CALL_OW 274
44535: PUSH
44536: LD_VAR 0 1
44540: NONEQUAL
44541: IFFALSE 44557
// ComLinkToBase ( base , i ) ;
44543: LD_VAR 0 1
44547: PPUSH
44548: LD_VAR 0 6
44552: PPUSH
44553: CALL_OW 169
44557: GO 44523
44559: POP
44560: POP
// end ; result := tmp ;
44561: LD_ADDR_VAR 0 4
44565: PUSH
44566: LD_VAR 0 5
44570: ST_TO_ADDR
// end ;
44571: LD_VAR 0 4
44575: RET
// export function ComComplete ( units , b ) ; var i ; begin
44576: LD_INT 0
44578: PPUSH
44579: PPUSH
// if not units then
44580: LD_VAR 0 1
44584: NOT
44585: IFFALSE 44589
// exit ;
44587: GO 44679
// for i in units do
44589: LD_ADDR_VAR 0 4
44593: PUSH
44594: LD_VAR 0 1
44598: PUSH
44599: FOR_IN
44600: IFFALSE 44677
// if BuildingStatus ( b ) = bs_build then
44602: LD_VAR 0 2
44606: PPUSH
44607: CALL_OW 461
44611: PUSH
44612: LD_INT 1
44614: EQUAL
44615: IFFALSE 44675
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44617: LD_VAR 0 4
44621: PPUSH
44622: LD_STRING h
44624: PUSH
44625: LD_VAR 0 2
44629: PPUSH
44630: CALL_OW 250
44634: PUSH
44635: LD_VAR 0 2
44639: PPUSH
44640: CALL_OW 251
44644: PUSH
44645: LD_VAR 0 2
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: PUSH
44668: EMPTY
44669: LIST
44670: PPUSH
44671: CALL_OW 446
44675: GO 44599
44677: POP
44678: POP
// end ;
44679: LD_VAR 0 3
44683: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44684: LD_INT 0
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44692: LD_VAR 0 1
44696: NOT
44697: PUSH
44698: LD_VAR 0 1
44702: PPUSH
44703: CALL_OW 263
44707: PUSH
44708: LD_INT 2
44710: NONEQUAL
44711: OR
44712: IFFALSE 44716
// exit ;
44714: GO 45032
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44716: LD_ADDR_VAR 0 6
44720: PUSH
44721: LD_INT 22
44723: PUSH
44724: LD_VAR 0 1
44728: PPUSH
44729: CALL_OW 255
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 30
44743: PUSH
44744: LD_INT 36
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 34
44753: PUSH
44754: LD_INT 31
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PPUSH
44770: CALL_OW 69
44774: ST_TO_ADDR
// if not tmp then
44775: LD_VAR 0 6
44779: NOT
44780: IFFALSE 44784
// exit ;
44782: GO 45032
// result := [ ] ;
44784: LD_ADDR_VAR 0 2
44788: PUSH
44789: EMPTY
44790: ST_TO_ADDR
// for i in tmp do
44791: LD_ADDR_VAR 0 3
44795: PUSH
44796: LD_VAR 0 6
44800: PUSH
44801: FOR_IN
44802: IFFALSE 44873
// begin t := UnitsInside ( i ) ;
44804: LD_ADDR_VAR 0 4
44808: PUSH
44809: LD_VAR 0 3
44813: PPUSH
44814: CALL_OW 313
44818: ST_TO_ADDR
// if t then
44819: LD_VAR 0 4
44823: IFFALSE 44871
// for j in t do
44825: LD_ADDR_VAR 0 7
44829: PUSH
44830: LD_VAR 0 4
44834: PUSH
44835: FOR_IN
44836: IFFALSE 44869
// result := Replace ( result , result + 1 , j ) ;
44838: LD_ADDR_VAR 0 2
44842: PUSH
44843: LD_VAR 0 2
44847: PPUSH
44848: LD_VAR 0 2
44852: PUSH
44853: LD_INT 1
44855: PLUS
44856: PPUSH
44857: LD_VAR 0 7
44861: PPUSH
44862: CALL_OW 1
44866: ST_TO_ADDR
44867: GO 44835
44869: POP
44870: POP
// end ;
44871: GO 44801
44873: POP
44874: POP
// if not result then
44875: LD_VAR 0 2
44879: NOT
44880: IFFALSE 44884
// exit ;
44882: GO 45032
// mech := result [ 1 ] ;
44884: LD_ADDR_VAR 0 5
44888: PUSH
44889: LD_VAR 0 2
44893: PUSH
44894: LD_INT 1
44896: ARRAY
44897: ST_TO_ADDR
// if result > 1 then
44898: LD_VAR 0 2
44902: PUSH
44903: LD_INT 1
44905: GREATER
44906: IFFALSE 45018
// begin for i = 2 to result do
44908: LD_ADDR_VAR 0 3
44912: PUSH
44913: DOUBLE
44914: LD_INT 2
44916: DEC
44917: ST_TO_ADDR
44918: LD_VAR 0 2
44922: PUSH
44923: FOR_TO
44924: IFFALSE 45016
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44926: LD_ADDR_VAR 0 4
44930: PUSH
44931: LD_VAR 0 2
44935: PUSH
44936: LD_VAR 0 3
44940: ARRAY
44941: PPUSH
44942: LD_INT 3
44944: PPUSH
44945: CALL_OW 259
44949: PUSH
44950: LD_VAR 0 2
44954: PUSH
44955: LD_VAR 0 3
44959: ARRAY
44960: PPUSH
44961: CALL_OW 432
44965: MINUS
44966: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44967: LD_VAR 0 4
44971: PUSH
44972: LD_VAR 0 5
44976: PPUSH
44977: LD_INT 3
44979: PPUSH
44980: CALL_OW 259
44984: PUSH
44985: LD_VAR 0 5
44989: PPUSH
44990: CALL_OW 432
44994: MINUS
44995: GREATEREQUAL
44996: IFFALSE 45014
// mech := result [ i ] ;
44998: LD_ADDR_VAR 0 5
45002: PUSH
45003: LD_VAR 0 2
45007: PUSH
45008: LD_VAR 0 3
45012: ARRAY
45013: ST_TO_ADDR
// end ;
45014: GO 44923
45016: POP
45017: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45018: LD_VAR 0 1
45022: PPUSH
45023: LD_VAR 0 5
45027: PPUSH
45028: CALL_OW 135
// end ;
45032: LD_VAR 0 2
45036: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45037: LD_INT 0
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
45044: PPUSH
45045: PPUSH
45046: PPUSH
45047: PPUSH
45048: PPUSH
45049: PPUSH
45050: PPUSH
45051: PPUSH
// result := [ ] ;
45052: LD_ADDR_VAR 0 7
45056: PUSH
45057: EMPTY
45058: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45059: LD_VAR 0 1
45063: PPUSH
45064: CALL_OW 266
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: IN
45079: NOT
45080: IFFALSE 45084
// exit ;
45082: GO 46718
// if name then
45084: LD_VAR 0 3
45088: IFFALSE 45104
// SetBName ( base_dep , name ) ;
45090: LD_VAR 0 1
45094: PPUSH
45095: LD_VAR 0 3
45099: PPUSH
45100: CALL_OW 500
// base := GetBase ( base_dep ) ;
45104: LD_ADDR_VAR 0 15
45108: PUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 274
45118: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45119: LD_ADDR_VAR 0 16
45123: PUSH
45124: LD_VAR 0 1
45128: PPUSH
45129: CALL_OW 255
45133: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45134: LD_ADDR_VAR 0 17
45138: PUSH
45139: LD_VAR 0 1
45143: PPUSH
45144: CALL_OW 248
45148: ST_TO_ADDR
// if sources then
45149: LD_VAR 0 5
45153: IFFALSE 45200
// for i = 1 to 3 do
45155: LD_ADDR_VAR 0 8
45159: PUSH
45160: DOUBLE
45161: LD_INT 1
45163: DEC
45164: ST_TO_ADDR
45165: LD_INT 3
45167: PUSH
45168: FOR_TO
45169: IFFALSE 45198
// AddResourceType ( base , i , sources [ i ] ) ;
45171: LD_VAR 0 15
45175: PPUSH
45176: LD_VAR 0 8
45180: PPUSH
45181: LD_VAR 0 5
45185: PUSH
45186: LD_VAR 0 8
45190: ARRAY
45191: PPUSH
45192: CALL_OW 276
45196: GO 45168
45198: POP
45199: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45200: LD_ADDR_VAR 0 18
45204: PUSH
45205: LD_VAR 0 15
45209: PPUSH
45210: LD_VAR 0 2
45214: PPUSH
45215: LD_INT 1
45217: PPUSH
45218: CALL 44461 0 3
45222: ST_TO_ADDR
// InitHc ;
45223: CALL_OW 19
// InitUc ;
45227: CALL_OW 18
// uc_side := side ;
45231: LD_ADDR_OWVAR 20
45235: PUSH
45236: LD_VAR 0 16
45240: ST_TO_ADDR
// uc_nation := nation ;
45241: LD_ADDR_OWVAR 21
45245: PUSH
45246: LD_VAR 0 17
45250: ST_TO_ADDR
// if buildings then
45251: LD_VAR 0 18
45255: IFFALSE 46577
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45257: LD_ADDR_VAR 0 19
45261: PUSH
45262: LD_VAR 0 18
45266: PPUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 30
45272: PUSH
45273: LD_INT 29
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 30
45282: PUSH
45283: LD_INT 30
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: PPUSH
45295: CALL_OW 72
45299: ST_TO_ADDR
// if tmp then
45300: LD_VAR 0 19
45304: IFFALSE 45352
// for i in tmp do
45306: LD_ADDR_VAR 0 8
45310: PUSH
45311: LD_VAR 0 19
45315: PUSH
45316: FOR_IN
45317: IFFALSE 45350
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45319: LD_VAR 0 8
45323: PPUSH
45324: CALL_OW 250
45328: PPUSH
45329: LD_VAR 0 8
45333: PPUSH
45334: CALL_OW 251
45338: PPUSH
45339: LD_VAR 0 16
45343: PPUSH
45344: CALL_OW 441
45348: GO 45316
45350: POP
45351: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45352: LD_VAR 0 18
45356: PPUSH
45357: LD_INT 2
45359: PUSH
45360: LD_INT 30
45362: PUSH
45363: LD_INT 32
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 30
45372: PUSH
45373: LD_INT 33
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: PPUSH
45385: CALL_OW 72
45389: IFFALSE 45477
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45391: LD_ADDR_VAR 0 8
45395: PUSH
45396: LD_VAR 0 18
45400: PPUSH
45401: LD_INT 2
45403: PUSH
45404: LD_INT 30
45406: PUSH
45407: LD_INT 32
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 30
45416: PUSH
45417: LD_INT 33
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: PPUSH
45429: CALL_OW 72
45433: PUSH
45434: FOR_IN
45435: IFFALSE 45475
// begin if not GetBWeapon ( i ) then
45437: LD_VAR 0 8
45441: PPUSH
45442: CALL_OW 269
45446: NOT
45447: IFFALSE 45473
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45449: LD_VAR 0 8
45453: PPUSH
45454: LD_VAR 0 8
45458: PPUSH
45459: LD_VAR 0 2
45463: PPUSH
45464: CALL 46723 0 2
45468: PPUSH
45469: CALL_OW 431
// end ;
45473: GO 45434
45475: POP
45476: POP
// end ; for i = 1 to personel do
45477: LD_ADDR_VAR 0 8
45481: PUSH
45482: DOUBLE
45483: LD_INT 1
45485: DEC
45486: ST_TO_ADDR
45487: LD_VAR 0 6
45491: PUSH
45492: FOR_TO
45493: IFFALSE 46557
// begin if i > 4 then
45495: LD_VAR 0 8
45499: PUSH
45500: LD_INT 4
45502: GREATER
45503: IFFALSE 45507
// break ;
45505: GO 46557
// case i of 1 :
45507: LD_VAR 0 8
45511: PUSH
45512: LD_INT 1
45514: DOUBLE
45515: EQUAL
45516: IFTRUE 45520
45518: GO 45600
45520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45521: LD_ADDR_VAR 0 12
45525: PUSH
45526: LD_VAR 0 18
45530: PPUSH
45531: LD_INT 22
45533: PUSH
45534: LD_VAR 0 16
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 58
45545: PUSH
45546: EMPTY
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 30
45554: PUSH
45555: LD_INT 32
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 30
45564: PUSH
45565: LD_INT 4
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 30
45574: PUSH
45575: LD_INT 5
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: PPUSH
45593: CALL_OW 72
45597: ST_TO_ADDR
45598: GO 45822
45600: LD_INT 2
45602: DOUBLE
45603: EQUAL
45604: IFTRUE 45608
45606: GO 45670
45608: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45609: LD_ADDR_VAR 0 12
45613: PUSH
45614: LD_VAR 0 18
45618: PPUSH
45619: LD_INT 22
45621: PUSH
45622: LD_VAR 0 16
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: LD_INT 30
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 30
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PPUSH
45663: CALL_OW 72
45667: ST_TO_ADDR
45668: GO 45822
45670: LD_INT 3
45672: DOUBLE
45673: EQUAL
45674: IFTRUE 45678
45676: GO 45740
45678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45679: LD_ADDR_VAR 0 12
45683: PUSH
45684: LD_VAR 0 18
45688: PPUSH
45689: LD_INT 22
45691: PUSH
45692: LD_VAR 0 16
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: LD_INT 30
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 30
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PPUSH
45733: CALL_OW 72
45737: ST_TO_ADDR
45738: GO 45822
45740: LD_INT 4
45742: DOUBLE
45743: EQUAL
45744: IFTRUE 45748
45746: GO 45821
45748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45749: LD_ADDR_VAR 0 12
45753: PUSH
45754: LD_VAR 0 18
45758: PPUSH
45759: LD_INT 22
45761: PUSH
45762: LD_VAR 0 16
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 30
45776: PUSH
45777: LD_INT 6
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 30
45786: PUSH
45787: LD_INT 7
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 30
45796: PUSH
45797: LD_INT 8
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PPUSH
45814: CALL_OW 72
45818: ST_TO_ADDR
45819: GO 45822
45821: POP
// if i = 1 then
45822: LD_VAR 0 8
45826: PUSH
45827: LD_INT 1
45829: EQUAL
45830: IFFALSE 45941
// begin tmp := [ ] ;
45832: LD_ADDR_VAR 0 19
45836: PUSH
45837: EMPTY
45838: ST_TO_ADDR
// for j in f do
45839: LD_ADDR_VAR 0 9
45843: PUSH
45844: LD_VAR 0 12
45848: PUSH
45849: FOR_IN
45850: IFFALSE 45923
// if GetBType ( j ) = b_bunker then
45852: LD_VAR 0 9
45856: PPUSH
45857: CALL_OW 266
45861: PUSH
45862: LD_INT 32
45864: EQUAL
45865: IFFALSE 45892
// tmp := Insert ( tmp , 1 , j ) else
45867: LD_ADDR_VAR 0 19
45871: PUSH
45872: LD_VAR 0 19
45876: PPUSH
45877: LD_INT 1
45879: PPUSH
45880: LD_VAR 0 9
45884: PPUSH
45885: CALL_OW 2
45889: ST_TO_ADDR
45890: GO 45921
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45892: LD_ADDR_VAR 0 19
45896: PUSH
45897: LD_VAR 0 19
45901: PPUSH
45902: LD_VAR 0 19
45906: PUSH
45907: LD_INT 1
45909: PLUS
45910: PPUSH
45911: LD_VAR 0 9
45915: PPUSH
45916: CALL_OW 2
45920: ST_TO_ADDR
45921: GO 45849
45923: POP
45924: POP
// if tmp then
45925: LD_VAR 0 19
45929: IFFALSE 45941
// f := tmp ;
45931: LD_ADDR_VAR 0 12
45935: PUSH
45936: LD_VAR 0 19
45940: ST_TO_ADDR
// end ; x := personel [ i ] ;
45941: LD_ADDR_VAR 0 13
45945: PUSH
45946: LD_VAR 0 6
45950: PUSH
45951: LD_VAR 0 8
45955: ARRAY
45956: ST_TO_ADDR
// if x = - 1 then
45957: LD_VAR 0 13
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: EQUAL
45966: IFFALSE 46175
// begin for j in f do
45968: LD_ADDR_VAR 0 9
45972: PUSH
45973: LD_VAR 0 12
45977: PUSH
45978: FOR_IN
45979: IFFALSE 46171
// repeat InitHc ;
45981: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45985: LD_VAR 0 9
45989: PPUSH
45990: CALL_OW 266
45994: PUSH
45995: LD_INT 5
45997: EQUAL
45998: IFFALSE 46068
// begin if UnitsInside ( j ) < 3 then
46000: LD_VAR 0 9
46004: PPUSH
46005: CALL_OW 313
46009: PUSH
46010: LD_INT 3
46012: LESS
46013: IFFALSE 46049
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46015: LD_INT 0
46017: PPUSH
46018: LD_INT 5
46020: PUSH
46021: LD_INT 8
46023: PUSH
46024: LD_INT 9
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: PUSH
46032: LD_VAR 0 17
46036: ARRAY
46037: PPUSH
46038: LD_VAR 0 4
46042: PPUSH
46043: CALL_OW 380
46047: GO 46066
// PrepareHuman ( false , i , skill ) ;
46049: LD_INT 0
46051: PPUSH
46052: LD_VAR 0 8
46056: PPUSH
46057: LD_VAR 0 4
46061: PPUSH
46062: CALL_OW 380
// end else
46066: GO 46085
// PrepareHuman ( false , i , skill ) ;
46068: LD_INT 0
46070: PPUSH
46071: LD_VAR 0 8
46075: PPUSH
46076: LD_VAR 0 4
46080: PPUSH
46081: CALL_OW 380
// un := CreateHuman ;
46085: LD_ADDR_VAR 0 14
46089: PUSH
46090: CALL_OW 44
46094: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46095: LD_ADDR_VAR 0 7
46099: PUSH
46100: LD_VAR 0 7
46104: PPUSH
46105: LD_INT 1
46107: PPUSH
46108: LD_VAR 0 14
46112: PPUSH
46113: CALL_OW 2
46117: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46118: LD_VAR 0 14
46122: PPUSH
46123: LD_VAR 0 9
46127: PPUSH
46128: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46132: LD_VAR 0 9
46136: PPUSH
46137: CALL_OW 313
46141: PUSH
46142: LD_INT 6
46144: EQUAL
46145: PUSH
46146: LD_VAR 0 9
46150: PPUSH
46151: CALL_OW 266
46155: PUSH
46156: LD_INT 32
46158: PUSH
46159: LD_INT 31
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: IN
46166: OR
46167: IFFALSE 45981
46169: GO 45978
46171: POP
46172: POP
// end else
46173: GO 46555
// for j = 1 to x do
46175: LD_ADDR_VAR 0 9
46179: PUSH
46180: DOUBLE
46181: LD_INT 1
46183: DEC
46184: ST_TO_ADDR
46185: LD_VAR 0 13
46189: PUSH
46190: FOR_TO
46191: IFFALSE 46553
// begin InitHc ;
46193: CALL_OW 19
// if not f then
46197: LD_VAR 0 12
46201: NOT
46202: IFFALSE 46291
// begin PrepareHuman ( false , i , skill ) ;
46204: LD_INT 0
46206: PPUSH
46207: LD_VAR 0 8
46211: PPUSH
46212: LD_VAR 0 4
46216: PPUSH
46217: CALL_OW 380
// un := CreateHuman ;
46221: LD_ADDR_VAR 0 14
46225: PUSH
46226: CALL_OW 44
46230: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46231: LD_ADDR_VAR 0 7
46235: PUSH
46236: LD_VAR 0 7
46240: PPUSH
46241: LD_INT 1
46243: PPUSH
46244: LD_VAR 0 14
46248: PPUSH
46249: CALL_OW 2
46253: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46254: LD_VAR 0 14
46258: PPUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: CALL_OW 250
46268: PPUSH
46269: LD_VAR 0 1
46273: PPUSH
46274: CALL_OW 251
46278: PPUSH
46279: LD_INT 10
46281: PPUSH
46282: LD_INT 0
46284: PPUSH
46285: CALL_OW 50
// continue ;
46289: GO 46190
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46291: LD_VAR 0 12
46295: PUSH
46296: LD_INT 1
46298: ARRAY
46299: PPUSH
46300: CALL_OW 313
46304: PUSH
46305: LD_VAR 0 12
46309: PUSH
46310: LD_INT 1
46312: ARRAY
46313: PPUSH
46314: CALL_OW 266
46318: PUSH
46319: LD_INT 32
46321: PUSH
46322: LD_INT 31
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: IN
46329: AND
46330: PUSH
46331: LD_VAR 0 12
46335: PUSH
46336: LD_INT 1
46338: ARRAY
46339: PPUSH
46340: CALL_OW 313
46344: PUSH
46345: LD_INT 6
46347: EQUAL
46348: OR
46349: IFFALSE 46369
// f := Delete ( f , 1 ) ;
46351: LD_ADDR_VAR 0 12
46355: PUSH
46356: LD_VAR 0 12
46360: PPUSH
46361: LD_INT 1
46363: PPUSH
46364: CALL_OW 3
46368: ST_TO_ADDR
// if not f then
46369: LD_VAR 0 12
46373: NOT
46374: IFFALSE 46392
// begin x := x + 2 ;
46376: LD_ADDR_VAR 0 13
46380: PUSH
46381: LD_VAR 0 13
46385: PUSH
46386: LD_INT 2
46388: PLUS
46389: ST_TO_ADDR
// continue ;
46390: GO 46190
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46392: LD_VAR 0 12
46396: PUSH
46397: LD_INT 1
46399: ARRAY
46400: PPUSH
46401: CALL_OW 266
46405: PUSH
46406: LD_INT 5
46408: EQUAL
46409: IFFALSE 46483
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46411: LD_VAR 0 12
46415: PUSH
46416: LD_INT 1
46418: ARRAY
46419: PPUSH
46420: CALL_OW 313
46424: PUSH
46425: LD_INT 3
46427: LESS
46428: IFFALSE 46464
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46430: LD_INT 0
46432: PPUSH
46433: LD_INT 5
46435: PUSH
46436: LD_INT 8
46438: PUSH
46439: LD_INT 9
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: PUSH
46447: LD_VAR 0 17
46451: ARRAY
46452: PPUSH
46453: LD_VAR 0 4
46457: PPUSH
46458: CALL_OW 380
46462: GO 46481
// PrepareHuman ( false , i , skill ) ;
46464: LD_INT 0
46466: PPUSH
46467: LD_VAR 0 8
46471: PPUSH
46472: LD_VAR 0 4
46476: PPUSH
46477: CALL_OW 380
// end else
46481: GO 46500
// PrepareHuman ( false , i , skill ) ;
46483: LD_INT 0
46485: PPUSH
46486: LD_VAR 0 8
46490: PPUSH
46491: LD_VAR 0 4
46495: PPUSH
46496: CALL_OW 380
// un := CreateHuman ;
46500: LD_ADDR_VAR 0 14
46504: PUSH
46505: CALL_OW 44
46509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46510: LD_ADDR_VAR 0 7
46514: PUSH
46515: LD_VAR 0 7
46519: PPUSH
46520: LD_INT 1
46522: PPUSH
46523: LD_VAR 0 14
46527: PPUSH
46528: CALL_OW 2
46532: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46533: LD_VAR 0 14
46537: PPUSH
46538: LD_VAR 0 12
46542: PUSH
46543: LD_INT 1
46545: ARRAY
46546: PPUSH
46547: CALL_OW 52
// end ;
46551: GO 46190
46553: POP
46554: POP
// end ;
46555: GO 45492
46557: POP
46558: POP
// result := result ^ buildings ;
46559: LD_ADDR_VAR 0 7
46563: PUSH
46564: LD_VAR 0 7
46568: PUSH
46569: LD_VAR 0 18
46573: ADD
46574: ST_TO_ADDR
// end else
46575: GO 46718
// begin for i = 1 to personel do
46577: LD_ADDR_VAR 0 8
46581: PUSH
46582: DOUBLE
46583: LD_INT 1
46585: DEC
46586: ST_TO_ADDR
46587: LD_VAR 0 6
46591: PUSH
46592: FOR_TO
46593: IFFALSE 46716
// begin if i > 4 then
46595: LD_VAR 0 8
46599: PUSH
46600: LD_INT 4
46602: GREATER
46603: IFFALSE 46607
// break ;
46605: GO 46716
// x := personel [ i ] ;
46607: LD_ADDR_VAR 0 13
46611: PUSH
46612: LD_VAR 0 6
46616: PUSH
46617: LD_VAR 0 8
46621: ARRAY
46622: ST_TO_ADDR
// if x = - 1 then
46623: LD_VAR 0 13
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: EQUAL
46632: IFFALSE 46636
// continue ;
46634: GO 46592
// PrepareHuman ( false , i , skill ) ;
46636: LD_INT 0
46638: PPUSH
46639: LD_VAR 0 8
46643: PPUSH
46644: LD_VAR 0 4
46648: PPUSH
46649: CALL_OW 380
// un := CreateHuman ;
46653: LD_ADDR_VAR 0 14
46657: PUSH
46658: CALL_OW 44
46662: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46663: LD_VAR 0 14
46667: PPUSH
46668: LD_VAR 0 1
46672: PPUSH
46673: CALL_OW 250
46677: PPUSH
46678: LD_VAR 0 1
46682: PPUSH
46683: CALL_OW 251
46687: PPUSH
46688: LD_INT 10
46690: PPUSH
46691: LD_INT 0
46693: PPUSH
46694: CALL_OW 50
// result := result ^ un ;
46698: LD_ADDR_VAR 0 7
46702: PUSH
46703: LD_VAR 0 7
46707: PUSH
46708: LD_VAR 0 14
46712: ADD
46713: ST_TO_ADDR
// end ;
46714: GO 46592
46716: POP
46717: POP
// end ; end ;
46718: LD_VAR 0 7
46722: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46723: LD_INT 0
46725: PPUSH
46726: PPUSH
46727: PPUSH
46728: PPUSH
46729: PPUSH
46730: PPUSH
46731: PPUSH
46732: PPUSH
46733: PPUSH
46734: PPUSH
46735: PPUSH
46736: PPUSH
46737: PPUSH
46738: PPUSH
46739: PPUSH
46740: PPUSH
// result := false ;
46741: LD_ADDR_VAR 0 3
46745: PUSH
46746: LD_INT 0
46748: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46749: LD_VAR 0 1
46753: NOT
46754: PUSH
46755: LD_VAR 0 1
46759: PPUSH
46760: CALL_OW 266
46764: PUSH
46765: LD_INT 32
46767: PUSH
46768: LD_INT 33
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: IN
46775: NOT
46776: OR
46777: IFFALSE 46781
// exit ;
46779: GO 47890
// nat := GetNation ( tower ) ;
46781: LD_ADDR_VAR 0 12
46785: PUSH
46786: LD_VAR 0 1
46790: PPUSH
46791: CALL_OW 248
46795: ST_TO_ADDR
// side := GetSide ( tower ) ;
46796: LD_ADDR_VAR 0 16
46800: PUSH
46801: LD_VAR 0 1
46805: PPUSH
46806: CALL_OW 255
46810: ST_TO_ADDR
// x := GetX ( tower ) ;
46811: LD_ADDR_VAR 0 10
46815: PUSH
46816: LD_VAR 0 1
46820: PPUSH
46821: CALL_OW 250
46825: ST_TO_ADDR
// y := GetY ( tower ) ;
46826: LD_ADDR_VAR 0 11
46830: PUSH
46831: LD_VAR 0 1
46835: PPUSH
46836: CALL_OW 251
46840: ST_TO_ADDR
// if not x or not y then
46841: LD_VAR 0 10
46845: NOT
46846: PUSH
46847: LD_VAR 0 11
46851: NOT
46852: OR
46853: IFFALSE 46857
// exit ;
46855: GO 47890
// weapon := 0 ;
46857: LD_ADDR_VAR 0 18
46861: PUSH
46862: LD_INT 0
46864: ST_TO_ADDR
// fac_list := [ ] ;
46865: LD_ADDR_VAR 0 17
46869: PUSH
46870: EMPTY
46871: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46872: LD_ADDR_VAR 0 6
46876: PUSH
46877: LD_VAR 0 1
46881: PPUSH
46882: CALL_OW 274
46886: PPUSH
46887: LD_VAR 0 2
46891: PPUSH
46892: LD_INT 0
46894: PPUSH
46895: CALL 44461 0 3
46899: PPUSH
46900: LD_INT 30
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PPUSH
46910: CALL_OW 72
46914: ST_TO_ADDR
// if not factories then
46915: LD_VAR 0 6
46919: NOT
46920: IFFALSE 46924
// exit ;
46922: GO 47890
// for i in factories do
46924: LD_ADDR_VAR 0 8
46928: PUSH
46929: LD_VAR 0 6
46933: PUSH
46934: FOR_IN
46935: IFFALSE 46960
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46937: LD_ADDR_VAR 0 17
46941: PUSH
46942: LD_VAR 0 17
46946: PUSH
46947: LD_VAR 0 8
46951: PPUSH
46952: CALL_OW 478
46956: UNION
46957: ST_TO_ADDR
46958: GO 46934
46960: POP
46961: POP
// if not fac_list then
46962: LD_VAR 0 17
46966: NOT
46967: IFFALSE 46971
// exit ;
46969: GO 47890
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46971: LD_ADDR_VAR 0 5
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: LD_INT 5
46981: PUSH
46982: LD_INT 9
46984: PUSH
46985: LD_INT 10
46987: PUSH
46988: LD_INT 6
46990: PUSH
46991: LD_INT 7
46993: PUSH
46994: LD_INT 11
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 27
47008: PUSH
47009: LD_INT 28
47011: PUSH
47012: LD_INT 26
47014: PUSH
47015: LD_INT 30
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 43
47026: PUSH
47027: LD_INT 44
47029: PUSH
47030: LD_INT 46
47032: PUSH
47033: LD_INT 45
47035: PUSH
47036: LD_INT 47
47038: PUSH
47039: LD_INT 49
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: PUSH
47055: LD_VAR 0 12
47059: ARRAY
47060: ST_TO_ADDR
// list := list isect fac_list ;
47061: LD_ADDR_VAR 0 5
47065: PUSH
47066: LD_VAR 0 5
47070: PUSH
47071: LD_VAR 0 17
47075: ISECT
47076: ST_TO_ADDR
// if not list then
47077: LD_VAR 0 5
47081: NOT
47082: IFFALSE 47086
// exit ;
47084: GO 47890
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47086: LD_VAR 0 12
47090: PUSH
47091: LD_INT 3
47093: EQUAL
47094: PUSH
47095: LD_INT 49
47097: PUSH
47098: LD_VAR 0 5
47102: IN
47103: AND
47104: PUSH
47105: LD_INT 31
47107: PPUSH
47108: LD_VAR 0 16
47112: PPUSH
47113: CALL_OW 321
47117: PUSH
47118: LD_INT 2
47120: EQUAL
47121: AND
47122: IFFALSE 47182
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47124: LD_INT 22
47126: PUSH
47127: LD_VAR 0 16
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 35
47138: PUSH
47139: LD_INT 49
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 91
47148: PUSH
47149: LD_VAR 0 1
47153: PUSH
47154: LD_INT 10
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: LIST
47166: PPUSH
47167: CALL_OW 69
47171: NOT
47172: IFFALSE 47182
// weapon := ru_time_lapser ;
47174: LD_ADDR_VAR 0 18
47178: PUSH
47179: LD_INT 49
47181: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47182: LD_VAR 0 12
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: IN
47197: PUSH
47198: LD_INT 11
47200: PUSH
47201: LD_VAR 0 5
47205: IN
47206: PUSH
47207: LD_INT 30
47209: PUSH
47210: LD_VAR 0 5
47214: IN
47215: OR
47216: AND
47217: PUSH
47218: LD_INT 6
47220: PPUSH
47221: LD_VAR 0 16
47225: PPUSH
47226: CALL_OW 321
47230: PUSH
47231: LD_INT 2
47233: EQUAL
47234: AND
47235: IFFALSE 47400
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47237: LD_INT 22
47239: PUSH
47240: LD_VAR 0 16
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: LD_INT 35
47254: PUSH
47255: LD_INT 11
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 35
47264: PUSH
47265: LD_INT 30
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 91
47279: PUSH
47280: LD_VAR 0 1
47284: PUSH
47285: LD_INT 18
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: PPUSH
47298: CALL_OW 69
47302: NOT
47303: PUSH
47304: LD_INT 22
47306: PUSH
47307: LD_VAR 0 16
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 30
47321: PUSH
47322: LD_INT 32
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 30
47331: PUSH
47332: LD_INT 33
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 91
47346: PUSH
47347: LD_VAR 0 1
47351: PUSH
47352: LD_INT 12
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: LIST
47364: PUSH
47365: EMPTY
47366: LIST
47367: PPUSH
47368: CALL_OW 69
47372: PUSH
47373: LD_INT 2
47375: GREATER
47376: AND
47377: IFFALSE 47400
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47379: LD_ADDR_VAR 0 18
47383: PUSH
47384: LD_INT 11
47386: PUSH
47387: LD_INT 30
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_VAR 0 12
47398: ARRAY
47399: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47400: LD_VAR 0 18
47404: NOT
47405: PUSH
47406: LD_INT 40
47408: PPUSH
47409: LD_VAR 0 16
47413: PPUSH
47414: CALL_OW 321
47418: PUSH
47419: LD_INT 2
47421: EQUAL
47422: AND
47423: PUSH
47424: LD_INT 7
47426: PUSH
47427: LD_VAR 0 5
47431: IN
47432: PUSH
47433: LD_INT 28
47435: PUSH
47436: LD_VAR 0 5
47440: IN
47441: OR
47442: PUSH
47443: LD_INT 45
47445: PUSH
47446: LD_VAR 0 5
47450: IN
47451: OR
47452: AND
47453: IFFALSE 47707
// begin hex := GetHexInfo ( x , y ) ;
47455: LD_ADDR_VAR 0 4
47459: PUSH
47460: LD_VAR 0 10
47464: PPUSH
47465: LD_VAR 0 11
47469: PPUSH
47470: CALL_OW 546
47474: ST_TO_ADDR
// if hex [ 1 ] then
47475: LD_VAR 0 4
47479: PUSH
47480: LD_INT 1
47482: ARRAY
47483: IFFALSE 47487
// exit ;
47485: GO 47890
// height := hex [ 2 ] ;
47487: LD_ADDR_VAR 0 15
47491: PUSH
47492: LD_VAR 0 4
47496: PUSH
47497: LD_INT 2
47499: ARRAY
47500: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47501: LD_ADDR_VAR 0 14
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 3
47514: PUSH
47515: LD_INT 5
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// for i in tmp do
47524: LD_ADDR_VAR 0 8
47528: PUSH
47529: LD_VAR 0 14
47533: PUSH
47534: FOR_IN
47535: IFFALSE 47705
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47537: LD_ADDR_VAR 0 9
47541: PUSH
47542: LD_VAR 0 10
47546: PPUSH
47547: LD_VAR 0 8
47551: PPUSH
47552: LD_INT 5
47554: PPUSH
47555: CALL_OW 272
47559: PUSH
47560: LD_VAR 0 11
47564: PPUSH
47565: LD_VAR 0 8
47569: PPUSH
47570: LD_INT 5
47572: PPUSH
47573: CALL_OW 273
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47582: LD_VAR 0 9
47586: PUSH
47587: LD_INT 1
47589: ARRAY
47590: PPUSH
47591: LD_VAR 0 9
47595: PUSH
47596: LD_INT 2
47598: ARRAY
47599: PPUSH
47600: CALL_OW 488
47604: IFFALSE 47703
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47606: LD_ADDR_VAR 0 4
47610: PUSH
47611: LD_VAR 0 9
47615: PUSH
47616: LD_INT 1
47618: ARRAY
47619: PPUSH
47620: LD_VAR 0 9
47624: PUSH
47625: LD_INT 2
47627: ARRAY
47628: PPUSH
47629: CALL_OW 546
47633: ST_TO_ADDR
// if hex [ 1 ] then
47634: LD_VAR 0 4
47638: PUSH
47639: LD_INT 1
47641: ARRAY
47642: IFFALSE 47646
// continue ;
47644: GO 47534
// h := hex [ 2 ] ;
47646: LD_ADDR_VAR 0 13
47650: PUSH
47651: LD_VAR 0 4
47655: PUSH
47656: LD_INT 2
47658: ARRAY
47659: ST_TO_ADDR
// if h + 7 < height then
47660: LD_VAR 0 13
47664: PUSH
47665: LD_INT 7
47667: PLUS
47668: PUSH
47669: LD_VAR 0 15
47673: LESS
47674: IFFALSE 47703
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47676: LD_ADDR_VAR 0 18
47680: PUSH
47681: LD_INT 7
47683: PUSH
47684: LD_INT 28
47686: PUSH
47687: LD_INT 45
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: LIST
47694: PUSH
47695: LD_VAR 0 12
47699: ARRAY
47700: ST_TO_ADDR
// break ;
47701: GO 47705
// end ; end ; end ;
47703: GO 47534
47705: POP
47706: POP
// end ; if not weapon then
47707: LD_VAR 0 18
47711: NOT
47712: IFFALSE 47772
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47714: LD_ADDR_VAR 0 5
47718: PUSH
47719: LD_VAR 0 5
47723: PUSH
47724: LD_INT 11
47726: PUSH
47727: LD_INT 30
47729: PUSH
47730: LD_INT 49
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: DIFF
47738: ST_TO_ADDR
// if not list then
47739: LD_VAR 0 5
47743: NOT
47744: IFFALSE 47748
// exit ;
47746: GO 47890
// weapon := list [ rand ( 1 , list ) ] ;
47748: LD_ADDR_VAR 0 18
47752: PUSH
47753: LD_VAR 0 5
47757: PUSH
47758: LD_INT 1
47760: PPUSH
47761: LD_VAR 0 5
47765: PPUSH
47766: CALL_OW 12
47770: ARRAY
47771: ST_TO_ADDR
// end ; if weapon then
47772: LD_VAR 0 18
47776: IFFALSE 47890
// begin tmp := CostOfWeapon ( weapon ) ;
47778: LD_ADDR_VAR 0 14
47782: PUSH
47783: LD_VAR 0 18
47787: PPUSH
47788: CALL_OW 451
47792: ST_TO_ADDR
// j := GetBase ( tower ) ;
47793: LD_ADDR_VAR 0 9
47797: PUSH
47798: LD_VAR 0 1
47802: PPUSH
47803: CALL_OW 274
47807: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47808: LD_VAR 0 9
47812: PPUSH
47813: LD_INT 1
47815: PPUSH
47816: CALL_OW 275
47820: PUSH
47821: LD_VAR 0 14
47825: PUSH
47826: LD_INT 1
47828: ARRAY
47829: GREATEREQUAL
47830: PUSH
47831: LD_VAR 0 9
47835: PPUSH
47836: LD_INT 2
47838: PPUSH
47839: CALL_OW 275
47843: PUSH
47844: LD_VAR 0 14
47848: PUSH
47849: LD_INT 2
47851: ARRAY
47852: GREATEREQUAL
47853: AND
47854: PUSH
47855: LD_VAR 0 9
47859: PPUSH
47860: LD_INT 3
47862: PPUSH
47863: CALL_OW 275
47867: PUSH
47868: LD_VAR 0 14
47872: PUSH
47873: LD_INT 3
47875: ARRAY
47876: GREATEREQUAL
47877: AND
47878: IFFALSE 47890
// result := weapon ;
47880: LD_ADDR_VAR 0 3
47884: PUSH
47885: LD_VAR 0 18
47889: ST_TO_ADDR
// end ; end ;
47890: LD_VAR 0 3
47894: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47895: LD_INT 0
47897: PPUSH
47898: PPUSH
// result := true ;
47899: LD_ADDR_VAR 0 3
47903: PUSH
47904: LD_INT 1
47906: ST_TO_ADDR
// if array1 = array2 then
47907: LD_VAR 0 1
47911: PUSH
47912: LD_VAR 0 2
47916: EQUAL
47917: IFFALSE 47977
// begin for i = 1 to array1 do
47919: LD_ADDR_VAR 0 4
47923: PUSH
47924: DOUBLE
47925: LD_INT 1
47927: DEC
47928: ST_TO_ADDR
47929: LD_VAR 0 1
47933: PUSH
47934: FOR_TO
47935: IFFALSE 47973
// if array1 [ i ] <> array2 [ i ] then
47937: LD_VAR 0 1
47941: PUSH
47942: LD_VAR 0 4
47946: ARRAY
47947: PUSH
47948: LD_VAR 0 2
47952: PUSH
47953: LD_VAR 0 4
47957: ARRAY
47958: NONEQUAL
47959: IFFALSE 47971
// begin result := false ;
47961: LD_ADDR_VAR 0 3
47965: PUSH
47966: LD_INT 0
47968: ST_TO_ADDR
// break ;
47969: GO 47973
// end ;
47971: GO 47934
47973: POP
47974: POP
// end else
47975: GO 47985
// result := false ;
47977: LD_ADDR_VAR 0 3
47981: PUSH
47982: LD_INT 0
47984: ST_TO_ADDR
// end ;
47985: LD_VAR 0 3
47989: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47990: LD_INT 0
47992: PPUSH
47993: PPUSH
// if not array1 or not array2 then
47994: LD_VAR 0 1
47998: NOT
47999: PUSH
48000: LD_VAR 0 2
48004: NOT
48005: OR
48006: IFFALSE 48010
// exit ;
48008: GO 48074
// result := true ;
48010: LD_ADDR_VAR 0 3
48014: PUSH
48015: LD_INT 1
48017: ST_TO_ADDR
// for i = 1 to array1 do
48018: LD_ADDR_VAR 0 4
48022: PUSH
48023: DOUBLE
48024: LD_INT 1
48026: DEC
48027: ST_TO_ADDR
48028: LD_VAR 0 1
48032: PUSH
48033: FOR_TO
48034: IFFALSE 48072
// if array1 [ i ] <> array2 [ i ] then
48036: LD_VAR 0 1
48040: PUSH
48041: LD_VAR 0 4
48045: ARRAY
48046: PUSH
48047: LD_VAR 0 2
48051: PUSH
48052: LD_VAR 0 4
48056: ARRAY
48057: NONEQUAL
48058: IFFALSE 48070
// begin result := false ;
48060: LD_ADDR_VAR 0 3
48064: PUSH
48065: LD_INT 0
48067: ST_TO_ADDR
// break ;
48068: GO 48072
// end ;
48070: GO 48033
48072: POP
48073: POP
// end ;
48074: LD_VAR 0 3
48078: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48079: LD_INT 0
48081: PPUSH
48082: PPUSH
48083: PPUSH
// pom := GetBase ( fac ) ;
48084: LD_ADDR_VAR 0 5
48088: PUSH
48089: LD_VAR 0 1
48093: PPUSH
48094: CALL_OW 274
48098: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48099: LD_ADDR_VAR 0 4
48103: PUSH
48104: LD_VAR 0 2
48108: PUSH
48109: LD_INT 1
48111: ARRAY
48112: PPUSH
48113: LD_VAR 0 2
48117: PUSH
48118: LD_INT 2
48120: ARRAY
48121: PPUSH
48122: LD_VAR 0 2
48126: PUSH
48127: LD_INT 3
48129: ARRAY
48130: PPUSH
48131: LD_VAR 0 2
48135: PUSH
48136: LD_INT 4
48138: ARRAY
48139: PPUSH
48140: CALL_OW 449
48144: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48145: LD_ADDR_VAR 0 3
48149: PUSH
48150: LD_VAR 0 5
48154: PPUSH
48155: LD_INT 1
48157: PPUSH
48158: CALL_OW 275
48162: PUSH
48163: LD_VAR 0 4
48167: PUSH
48168: LD_INT 1
48170: ARRAY
48171: GREATEREQUAL
48172: PUSH
48173: LD_VAR 0 5
48177: PPUSH
48178: LD_INT 2
48180: PPUSH
48181: CALL_OW 275
48185: PUSH
48186: LD_VAR 0 4
48190: PUSH
48191: LD_INT 2
48193: ARRAY
48194: GREATEREQUAL
48195: AND
48196: PUSH
48197: LD_VAR 0 5
48201: PPUSH
48202: LD_INT 3
48204: PPUSH
48205: CALL_OW 275
48209: PUSH
48210: LD_VAR 0 4
48214: PUSH
48215: LD_INT 3
48217: ARRAY
48218: GREATEREQUAL
48219: AND
48220: ST_TO_ADDR
// end ;
48221: LD_VAR 0 3
48225: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48226: LD_INT 0
48228: PPUSH
48229: PPUSH
48230: PPUSH
48231: PPUSH
// pom := GetBase ( building ) ;
48232: LD_ADDR_VAR 0 3
48236: PUSH
48237: LD_VAR 0 1
48241: PPUSH
48242: CALL_OW 274
48246: ST_TO_ADDR
// if not pom then
48247: LD_VAR 0 3
48251: NOT
48252: IFFALSE 48256
// exit ;
48254: GO 48426
// btype := GetBType ( building ) ;
48256: LD_ADDR_VAR 0 5
48260: PUSH
48261: LD_VAR 0 1
48265: PPUSH
48266: CALL_OW 266
48270: ST_TO_ADDR
// if btype = b_armoury then
48271: LD_VAR 0 5
48275: PUSH
48276: LD_INT 4
48278: EQUAL
48279: IFFALSE 48289
// btype := b_barracks ;
48281: LD_ADDR_VAR 0 5
48285: PUSH
48286: LD_INT 5
48288: ST_TO_ADDR
// if btype = b_depot then
48289: LD_VAR 0 5
48293: PUSH
48294: LD_INT 0
48296: EQUAL
48297: IFFALSE 48307
// btype := b_warehouse ;
48299: LD_ADDR_VAR 0 5
48303: PUSH
48304: LD_INT 1
48306: ST_TO_ADDR
// if btype = b_workshop then
48307: LD_VAR 0 5
48311: PUSH
48312: LD_INT 2
48314: EQUAL
48315: IFFALSE 48325
// btype := b_factory ;
48317: LD_ADDR_VAR 0 5
48321: PUSH
48322: LD_INT 3
48324: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48325: LD_ADDR_VAR 0 4
48329: PUSH
48330: LD_VAR 0 5
48334: PPUSH
48335: LD_VAR 0 1
48339: PPUSH
48340: CALL_OW 248
48344: PPUSH
48345: CALL_OW 450
48349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48350: LD_ADDR_VAR 0 2
48354: PUSH
48355: LD_VAR 0 3
48359: PPUSH
48360: LD_INT 1
48362: PPUSH
48363: CALL_OW 275
48367: PUSH
48368: LD_VAR 0 4
48372: PUSH
48373: LD_INT 1
48375: ARRAY
48376: GREATEREQUAL
48377: PUSH
48378: LD_VAR 0 3
48382: PPUSH
48383: LD_INT 2
48385: PPUSH
48386: CALL_OW 275
48390: PUSH
48391: LD_VAR 0 4
48395: PUSH
48396: LD_INT 2
48398: ARRAY
48399: GREATEREQUAL
48400: AND
48401: PUSH
48402: LD_VAR 0 3
48406: PPUSH
48407: LD_INT 3
48409: PPUSH
48410: CALL_OW 275
48414: PUSH
48415: LD_VAR 0 4
48419: PUSH
48420: LD_INT 3
48422: ARRAY
48423: GREATEREQUAL
48424: AND
48425: ST_TO_ADDR
// end ;
48426: LD_VAR 0 2
48430: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48431: LD_INT 0
48433: PPUSH
48434: PPUSH
48435: PPUSH
// pom := GetBase ( building ) ;
48436: LD_ADDR_VAR 0 4
48440: PUSH
48441: LD_VAR 0 1
48445: PPUSH
48446: CALL_OW 274
48450: ST_TO_ADDR
// if not pom then
48451: LD_VAR 0 4
48455: NOT
48456: IFFALSE 48460
// exit ;
48458: GO 48561
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48460: LD_ADDR_VAR 0 5
48464: PUSH
48465: LD_VAR 0 2
48469: PPUSH
48470: LD_VAR 0 1
48474: PPUSH
48475: CALL_OW 248
48479: PPUSH
48480: CALL_OW 450
48484: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48485: LD_ADDR_VAR 0 3
48489: PUSH
48490: LD_VAR 0 4
48494: PPUSH
48495: LD_INT 1
48497: PPUSH
48498: CALL_OW 275
48502: PUSH
48503: LD_VAR 0 5
48507: PUSH
48508: LD_INT 1
48510: ARRAY
48511: GREATEREQUAL
48512: PUSH
48513: LD_VAR 0 4
48517: PPUSH
48518: LD_INT 2
48520: PPUSH
48521: CALL_OW 275
48525: PUSH
48526: LD_VAR 0 5
48530: PUSH
48531: LD_INT 2
48533: ARRAY
48534: GREATEREQUAL
48535: AND
48536: PUSH
48537: LD_VAR 0 4
48541: PPUSH
48542: LD_INT 3
48544: PPUSH
48545: CALL_OW 275
48549: PUSH
48550: LD_VAR 0 5
48554: PUSH
48555: LD_INT 3
48557: ARRAY
48558: GREATEREQUAL
48559: AND
48560: ST_TO_ADDR
// end ;
48561: LD_VAR 0 3
48565: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48566: LD_INT 0
48568: PPUSH
48569: PPUSH
48570: PPUSH
48571: PPUSH
48572: PPUSH
48573: PPUSH
48574: PPUSH
48575: PPUSH
48576: PPUSH
48577: PPUSH
48578: PPUSH
// result := false ;
48579: LD_ADDR_VAR 0 8
48583: PUSH
48584: LD_INT 0
48586: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48587: LD_VAR 0 5
48591: NOT
48592: PUSH
48593: LD_VAR 0 1
48597: NOT
48598: OR
48599: PUSH
48600: LD_VAR 0 2
48604: NOT
48605: OR
48606: PUSH
48607: LD_VAR 0 3
48611: NOT
48612: OR
48613: IFFALSE 48617
// exit ;
48615: GO 49431
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48617: LD_ADDR_VAR 0 14
48621: PUSH
48622: LD_VAR 0 1
48626: PPUSH
48627: LD_VAR 0 2
48631: PPUSH
48632: LD_VAR 0 3
48636: PPUSH
48637: LD_VAR 0 4
48641: PPUSH
48642: LD_VAR 0 5
48646: PUSH
48647: LD_INT 1
48649: ARRAY
48650: PPUSH
48651: CALL_OW 248
48655: PPUSH
48656: LD_INT 0
48658: PPUSH
48659: CALL 50668 0 6
48663: ST_TO_ADDR
// if not hexes then
48664: LD_VAR 0 14
48668: NOT
48669: IFFALSE 48673
// exit ;
48671: GO 49431
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48673: LD_ADDR_VAR 0 17
48677: PUSH
48678: LD_VAR 0 5
48682: PPUSH
48683: LD_INT 22
48685: PUSH
48686: LD_VAR 0 13
48690: PPUSH
48691: CALL_OW 255
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: LD_INT 30
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 30
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: LIST
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PPUSH
48732: CALL_OW 72
48736: ST_TO_ADDR
// for i = 1 to hexes do
48737: LD_ADDR_VAR 0 9
48741: PUSH
48742: DOUBLE
48743: LD_INT 1
48745: DEC
48746: ST_TO_ADDR
48747: LD_VAR 0 14
48751: PUSH
48752: FOR_TO
48753: IFFALSE 49429
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48755: LD_ADDR_VAR 0 13
48759: PUSH
48760: LD_VAR 0 14
48764: PUSH
48765: LD_VAR 0 9
48769: ARRAY
48770: PUSH
48771: LD_INT 1
48773: ARRAY
48774: PPUSH
48775: LD_VAR 0 14
48779: PUSH
48780: LD_VAR 0 9
48784: ARRAY
48785: PUSH
48786: LD_INT 2
48788: ARRAY
48789: PPUSH
48790: CALL_OW 428
48794: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48795: LD_VAR 0 14
48799: PUSH
48800: LD_VAR 0 9
48804: ARRAY
48805: PUSH
48806: LD_INT 1
48808: ARRAY
48809: PPUSH
48810: LD_VAR 0 14
48814: PUSH
48815: LD_VAR 0 9
48819: ARRAY
48820: PUSH
48821: LD_INT 2
48823: ARRAY
48824: PPUSH
48825: CALL_OW 351
48829: PUSH
48830: LD_VAR 0 14
48834: PUSH
48835: LD_VAR 0 9
48839: ARRAY
48840: PUSH
48841: LD_INT 1
48843: ARRAY
48844: PPUSH
48845: LD_VAR 0 14
48849: PUSH
48850: LD_VAR 0 9
48854: ARRAY
48855: PUSH
48856: LD_INT 2
48858: ARRAY
48859: PPUSH
48860: CALL_OW 488
48864: NOT
48865: OR
48866: PUSH
48867: LD_VAR 0 13
48871: PPUSH
48872: CALL_OW 247
48876: PUSH
48877: LD_INT 3
48879: EQUAL
48880: OR
48881: IFFALSE 48887
// exit ;
48883: POP
48884: POP
48885: GO 49431
// if not tmp then
48887: LD_VAR 0 13
48891: NOT
48892: IFFALSE 48896
// continue ;
48894: GO 48752
// result := true ;
48896: LD_ADDR_VAR 0 8
48900: PUSH
48901: LD_INT 1
48903: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48904: LD_VAR 0 6
48908: PUSH
48909: LD_VAR 0 13
48913: PPUSH
48914: CALL_OW 247
48918: PUSH
48919: LD_INT 2
48921: EQUAL
48922: AND
48923: PUSH
48924: LD_VAR 0 13
48928: PPUSH
48929: CALL_OW 263
48933: PUSH
48934: LD_INT 1
48936: EQUAL
48937: AND
48938: IFFALSE 49102
// begin if IsDrivenBy ( tmp ) then
48940: LD_VAR 0 13
48944: PPUSH
48945: CALL_OW 311
48949: IFFALSE 48953
// continue ;
48951: GO 48752
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48953: LD_VAR 0 6
48957: PPUSH
48958: LD_INT 3
48960: PUSH
48961: LD_INT 60
48963: PUSH
48964: EMPTY
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: LD_INT 55
48976: PUSH
48977: EMPTY
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PPUSH
48988: CALL_OW 72
48992: IFFALSE 49100
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48994: LD_ADDR_VAR 0 18
48998: PUSH
48999: LD_VAR 0 6
49003: PPUSH
49004: LD_INT 3
49006: PUSH
49007: LD_INT 60
49009: PUSH
49010: EMPTY
49011: LIST
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: PUSH
49020: LD_INT 55
49022: PUSH
49023: EMPTY
49024: LIST
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PPUSH
49034: CALL_OW 72
49038: PUSH
49039: LD_INT 1
49041: ARRAY
49042: ST_TO_ADDR
// if IsInUnit ( driver ) then
49043: LD_VAR 0 18
49047: PPUSH
49048: CALL_OW 310
49052: IFFALSE 49063
// ComExit ( driver ) ;
49054: LD_VAR 0 18
49058: PPUSH
49059: CALL 73852 0 1
// AddComEnterUnit ( driver , tmp ) ;
49063: LD_VAR 0 18
49067: PPUSH
49068: LD_VAR 0 13
49072: PPUSH
49073: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49077: LD_VAR 0 18
49081: PPUSH
49082: LD_VAR 0 7
49086: PPUSH
49087: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49091: LD_VAR 0 18
49095: PPUSH
49096: CALL_OW 181
// end ; continue ;
49100: GO 48752
// end ; if not cleaners or not tmp in cleaners then
49102: LD_VAR 0 6
49106: NOT
49107: PUSH
49108: LD_VAR 0 13
49112: PUSH
49113: LD_VAR 0 6
49117: IN
49118: NOT
49119: OR
49120: IFFALSE 49427
// begin if dep then
49122: LD_VAR 0 17
49126: IFFALSE 49262
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49128: LD_ADDR_VAR 0 16
49132: PUSH
49133: LD_VAR 0 17
49137: PUSH
49138: LD_INT 1
49140: ARRAY
49141: PPUSH
49142: CALL_OW 250
49146: PPUSH
49147: LD_VAR 0 17
49151: PUSH
49152: LD_INT 1
49154: ARRAY
49155: PPUSH
49156: CALL_OW 254
49160: PPUSH
49161: LD_INT 5
49163: PPUSH
49164: CALL_OW 272
49168: PUSH
49169: LD_VAR 0 17
49173: PUSH
49174: LD_INT 1
49176: ARRAY
49177: PPUSH
49178: CALL_OW 251
49182: PPUSH
49183: LD_VAR 0 17
49187: PUSH
49188: LD_INT 1
49190: ARRAY
49191: PPUSH
49192: CALL_OW 254
49196: PPUSH
49197: LD_INT 5
49199: PPUSH
49200: CALL_OW 273
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49209: LD_VAR 0 16
49213: PUSH
49214: LD_INT 1
49216: ARRAY
49217: PPUSH
49218: LD_VAR 0 16
49222: PUSH
49223: LD_INT 2
49225: ARRAY
49226: PPUSH
49227: CALL_OW 488
49231: IFFALSE 49262
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49233: LD_VAR 0 13
49237: PPUSH
49238: LD_VAR 0 16
49242: PUSH
49243: LD_INT 1
49245: ARRAY
49246: PPUSH
49247: LD_VAR 0 16
49251: PUSH
49252: LD_INT 2
49254: ARRAY
49255: PPUSH
49256: CALL_OW 111
// continue ;
49260: GO 48752
// end ; end ; r := GetDir ( tmp ) ;
49262: LD_ADDR_VAR 0 15
49266: PUSH
49267: LD_VAR 0 13
49271: PPUSH
49272: CALL_OW 254
49276: ST_TO_ADDR
// if r = 5 then
49277: LD_VAR 0 15
49281: PUSH
49282: LD_INT 5
49284: EQUAL
49285: IFFALSE 49295
// r := 0 ;
49287: LD_ADDR_VAR 0 15
49291: PUSH
49292: LD_INT 0
49294: ST_TO_ADDR
// for j = r to 5 do
49295: LD_ADDR_VAR 0 10
49299: PUSH
49300: DOUBLE
49301: LD_VAR 0 15
49305: DEC
49306: ST_TO_ADDR
49307: LD_INT 5
49309: PUSH
49310: FOR_TO
49311: IFFALSE 49425
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49313: LD_ADDR_VAR 0 11
49317: PUSH
49318: LD_VAR 0 13
49322: PPUSH
49323: CALL_OW 250
49327: PPUSH
49328: LD_VAR 0 10
49332: PPUSH
49333: LD_INT 2
49335: PPUSH
49336: CALL_OW 272
49340: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49341: LD_ADDR_VAR 0 12
49345: PUSH
49346: LD_VAR 0 13
49350: PPUSH
49351: CALL_OW 251
49355: PPUSH
49356: LD_VAR 0 10
49360: PPUSH
49361: LD_INT 2
49363: PPUSH
49364: CALL_OW 273
49368: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49369: LD_VAR 0 11
49373: PPUSH
49374: LD_VAR 0 12
49378: PPUSH
49379: CALL_OW 488
49383: PUSH
49384: LD_VAR 0 11
49388: PPUSH
49389: LD_VAR 0 12
49393: PPUSH
49394: CALL_OW 428
49398: NOT
49399: AND
49400: IFFALSE 49423
// begin ComMoveXY ( tmp , _x , _y ) ;
49402: LD_VAR 0 13
49406: PPUSH
49407: LD_VAR 0 11
49411: PPUSH
49412: LD_VAR 0 12
49416: PPUSH
49417: CALL_OW 111
// break ;
49421: GO 49425
// end ; end ;
49423: GO 49310
49425: POP
49426: POP
// end ; end ;
49427: GO 48752
49429: POP
49430: POP
// end ;
49431: LD_VAR 0 8
49435: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49436: LD_INT 0
49438: PPUSH
// result := true ;
49439: LD_ADDR_VAR 0 3
49443: PUSH
49444: LD_INT 1
49446: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49447: LD_VAR 0 2
49451: PUSH
49452: LD_INT 24
49454: DOUBLE
49455: EQUAL
49456: IFTRUE 49466
49458: LD_INT 33
49460: DOUBLE
49461: EQUAL
49462: IFTRUE 49466
49464: GO 49491
49466: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49467: LD_ADDR_VAR 0 3
49471: PUSH
49472: LD_INT 32
49474: PPUSH
49475: LD_VAR 0 1
49479: PPUSH
49480: CALL_OW 321
49484: PUSH
49485: LD_INT 2
49487: EQUAL
49488: ST_TO_ADDR
49489: GO 49811
49491: LD_INT 20
49493: DOUBLE
49494: EQUAL
49495: IFTRUE 49499
49497: GO 49524
49499: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49500: LD_ADDR_VAR 0 3
49504: PUSH
49505: LD_INT 6
49507: PPUSH
49508: LD_VAR 0 1
49512: PPUSH
49513: CALL_OW 321
49517: PUSH
49518: LD_INT 2
49520: EQUAL
49521: ST_TO_ADDR
49522: GO 49811
49524: LD_INT 22
49526: DOUBLE
49527: EQUAL
49528: IFTRUE 49538
49530: LD_INT 36
49532: DOUBLE
49533: EQUAL
49534: IFTRUE 49538
49536: GO 49563
49538: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49539: LD_ADDR_VAR 0 3
49543: PUSH
49544: LD_INT 15
49546: PPUSH
49547: LD_VAR 0 1
49551: PPUSH
49552: CALL_OW 321
49556: PUSH
49557: LD_INT 2
49559: EQUAL
49560: ST_TO_ADDR
49561: GO 49811
49563: LD_INT 30
49565: DOUBLE
49566: EQUAL
49567: IFTRUE 49571
49569: GO 49596
49571: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49572: LD_ADDR_VAR 0 3
49576: PUSH
49577: LD_INT 20
49579: PPUSH
49580: LD_VAR 0 1
49584: PPUSH
49585: CALL_OW 321
49589: PUSH
49590: LD_INT 2
49592: EQUAL
49593: ST_TO_ADDR
49594: GO 49811
49596: LD_INT 28
49598: DOUBLE
49599: EQUAL
49600: IFTRUE 49610
49602: LD_INT 21
49604: DOUBLE
49605: EQUAL
49606: IFTRUE 49610
49608: GO 49635
49610: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49611: LD_ADDR_VAR 0 3
49615: PUSH
49616: LD_INT 21
49618: PPUSH
49619: LD_VAR 0 1
49623: PPUSH
49624: CALL_OW 321
49628: PUSH
49629: LD_INT 2
49631: EQUAL
49632: ST_TO_ADDR
49633: GO 49811
49635: LD_INT 16
49637: DOUBLE
49638: EQUAL
49639: IFTRUE 49643
49641: GO 49670
49643: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49644: LD_ADDR_VAR 0 3
49648: PUSH
49649: LD_EXP 148
49653: PPUSH
49654: LD_VAR 0 1
49658: PPUSH
49659: CALL_OW 321
49663: PUSH
49664: LD_INT 2
49666: EQUAL
49667: ST_TO_ADDR
49668: GO 49811
49670: LD_INT 19
49672: DOUBLE
49673: EQUAL
49674: IFTRUE 49684
49676: LD_INT 23
49678: DOUBLE
49679: EQUAL
49680: IFTRUE 49684
49682: GO 49711
49684: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49685: LD_ADDR_VAR 0 3
49689: PUSH
49690: LD_EXP 147
49694: PPUSH
49695: LD_VAR 0 1
49699: PPUSH
49700: CALL_OW 321
49704: PUSH
49705: LD_INT 2
49707: EQUAL
49708: ST_TO_ADDR
49709: GO 49811
49711: LD_INT 17
49713: DOUBLE
49714: EQUAL
49715: IFTRUE 49719
49717: GO 49744
49719: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49720: LD_ADDR_VAR 0 3
49724: PUSH
49725: LD_INT 39
49727: PPUSH
49728: LD_VAR 0 1
49732: PPUSH
49733: CALL_OW 321
49737: PUSH
49738: LD_INT 2
49740: EQUAL
49741: ST_TO_ADDR
49742: GO 49811
49744: LD_INT 18
49746: DOUBLE
49747: EQUAL
49748: IFTRUE 49752
49750: GO 49777
49752: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49753: LD_ADDR_VAR 0 3
49757: PUSH
49758: LD_INT 40
49760: PPUSH
49761: LD_VAR 0 1
49765: PPUSH
49766: CALL_OW 321
49770: PUSH
49771: LD_INT 2
49773: EQUAL
49774: ST_TO_ADDR
49775: GO 49811
49777: LD_INT 27
49779: DOUBLE
49780: EQUAL
49781: IFTRUE 49785
49783: GO 49810
49785: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49786: LD_ADDR_VAR 0 3
49790: PUSH
49791: LD_INT 35
49793: PPUSH
49794: LD_VAR 0 1
49798: PPUSH
49799: CALL_OW 321
49803: PUSH
49804: LD_INT 2
49806: EQUAL
49807: ST_TO_ADDR
49808: GO 49811
49810: POP
// end ;
49811: LD_VAR 0 3
49815: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49816: LD_INT 0
49818: PPUSH
49819: PPUSH
49820: PPUSH
49821: PPUSH
49822: PPUSH
49823: PPUSH
49824: PPUSH
49825: PPUSH
49826: PPUSH
49827: PPUSH
49828: PPUSH
// result := false ;
49829: LD_ADDR_VAR 0 6
49833: PUSH
49834: LD_INT 0
49836: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49837: LD_VAR 0 1
49841: NOT
49842: PUSH
49843: LD_VAR 0 1
49847: PPUSH
49848: CALL_OW 266
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: IN
49863: NOT
49864: OR
49865: PUSH
49866: LD_VAR 0 2
49870: NOT
49871: OR
49872: PUSH
49873: LD_VAR 0 5
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 3
49889: PUSH
49890: LD_INT 4
49892: PUSH
49893: LD_INT 5
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: IN
49904: NOT
49905: OR
49906: PUSH
49907: LD_VAR 0 3
49911: PPUSH
49912: LD_VAR 0 4
49916: PPUSH
49917: CALL_OW 488
49921: NOT
49922: OR
49923: IFFALSE 49927
// exit ;
49925: GO 50663
// side := GetSide ( depot ) ;
49927: LD_ADDR_VAR 0 9
49931: PUSH
49932: LD_VAR 0 1
49936: PPUSH
49937: CALL_OW 255
49941: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49942: LD_VAR 0 9
49946: PPUSH
49947: LD_VAR 0 2
49951: PPUSH
49952: CALL 49436 0 2
49956: NOT
49957: IFFALSE 49961
// exit ;
49959: GO 50663
// pom := GetBase ( depot ) ;
49961: LD_ADDR_VAR 0 10
49965: PUSH
49966: LD_VAR 0 1
49970: PPUSH
49971: CALL_OW 274
49975: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49976: LD_ADDR_VAR 0 11
49980: PUSH
49981: LD_VAR 0 2
49985: PPUSH
49986: LD_VAR 0 1
49990: PPUSH
49991: CALL_OW 248
49995: PPUSH
49996: CALL_OW 450
50000: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50001: LD_VAR 0 10
50005: PPUSH
50006: LD_INT 1
50008: PPUSH
50009: CALL_OW 275
50013: PUSH
50014: LD_VAR 0 11
50018: PUSH
50019: LD_INT 1
50021: ARRAY
50022: GREATEREQUAL
50023: PUSH
50024: LD_VAR 0 10
50028: PPUSH
50029: LD_INT 2
50031: PPUSH
50032: CALL_OW 275
50036: PUSH
50037: LD_VAR 0 11
50041: PUSH
50042: LD_INT 2
50044: ARRAY
50045: GREATEREQUAL
50046: AND
50047: PUSH
50048: LD_VAR 0 10
50052: PPUSH
50053: LD_INT 3
50055: PPUSH
50056: CALL_OW 275
50060: PUSH
50061: LD_VAR 0 11
50065: PUSH
50066: LD_INT 3
50068: ARRAY
50069: GREATEREQUAL
50070: AND
50071: NOT
50072: IFFALSE 50076
// exit ;
50074: GO 50663
// if GetBType ( depot ) = b_depot then
50076: LD_VAR 0 1
50080: PPUSH
50081: CALL_OW 266
50085: PUSH
50086: LD_INT 0
50088: EQUAL
50089: IFFALSE 50101
// dist := 28 else
50091: LD_ADDR_VAR 0 14
50095: PUSH
50096: LD_INT 28
50098: ST_TO_ADDR
50099: GO 50109
// dist := 36 ;
50101: LD_ADDR_VAR 0 14
50105: PUSH
50106: LD_INT 36
50108: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50109: LD_VAR 0 1
50113: PPUSH
50114: LD_VAR 0 3
50118: PPUSH
50119: LD_VAR 0 4
50123: PPUSH
50124: CALL_OW 297
50128: PUSH
50129: LD_VAR 0 14
50133: GREATER
50134: IFFALSE 50138
// exit ;
50136: GO 50663
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50138: LD_ADDR_VAR 0 12
50142: PUSH
50143: LD_VAR 0 2
50147: PPUSH
50148: LD_VAR 0 3
50152: PPUSH
50153: LD_VAR 0 4
50157: PPUSH
50158: LD_VAR 0 5
50162: PPUSH
50163: LD_VAR 0 1
50167: PPUSH
50168: CALL_OW 248
50172: PPUSH
50173: LD_INT 0
50175: PPUSH
50176: CALL 50668 0 6
50180: ST_TO_ADDR
// if not hexes then
50181: LD_VAR 0 12
50185: NOT
50186: IFFALSE 50190
// exit ;
50188: GO 50663
// hex := GetHexInfo ( x , y ) ;
50190: LD_ADDR_VAR 0 15
50194: PUSH
50195: LD_VAR 0 3
50199: PPUSH
50200: LD_VAR 0 4
50204: PPUSH
50205: CALL_OW 546
50209: ST_TO_ADDR
// if hex [ 1 ] then
50210: LD_VAR 0 15
50214: PUSH
50215: LD_INT 1
50217: ARRAY
50218: IFFALSE 50222
// exit ;
50220: GO 50663
// height := hex [ 2 ] ;
50222: LD_ADDR_VAR 0 13
50226: PUSH
50227: LD_VAR 0 15
50231: PUSH
50232: LD_INT 2
50234: ARRAY
50235: ST_TO_ADDR
// for i = 1 to hexes do
50236: LD_ADDR_VAR 0 7
50240: PUSH
50241: DOUBLE
50242: LD_INT 1
50244: DEC
50245: ST_TO_ADDR
50246: LD_VAR 0 12
50250: PUSH
50251: FOR_TO
50252: IFFALSE 50582
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50254: LD_VAR 0 12
50258: PUSH
50259: LD_VAR 0 7
50263: ARRAY
50264: PUSH
50265: LD_INT 1
50267: ARRAY
50268: PPUSH
50269: LD_VAR 0 12
50273: PUSH
50274: LD_VAR 0 7
50278: ARRAY
50279: PUSH
50280: LD_INT 2
50282: ARRAY
50283: PPUSH
50284: CALL_OW 488
50288: NOT
50289: PUSH
50290: LD_VAR 0 12
50294: PUSH
50295: LD_VAR 0 7
50299: ARRAY
50300: PUSH
50301: LD_INT 1
50303: ARRAY
50304: PPUSH
50305: LD_VAR 0 12
50309: PUSH
50310: LD_VAR 0 7
50314: ARRAY
50315: PUSH
50316: LD_INT 2
50318: ARRAY
50319: PPUSH
50320: CALL_OW 428
50324: PUSH
50325: LD_INT 0
50327: GREATER
50328: OR
50329: PUSH
50330: LD_VAR 0 12
50334: PUSH
50335: LD_VAR 0 7
50339: ARRAY
50340: PUSH
50341: LD_INT 1
50343: ARRAY
50344: PPUSH
50345: LD_VAR 0 12
50349: PUSH
50350: LD_VAR 0 7
50354: ARRAY
50355: PUSH
50356: LD_INT 2
50358: ARRAY
50359: PPUSH
50360: CALL_OW 351
50364: OR
50365: IFFALSE 50371
// exit ;
50367: POP
50368: POP
50369: GO 50663
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50371: LD_ADDR_VAR 0 8
50375: PUSH
50376: LD_VAR 0 12
50380: PUSH
50381: LD_VAR 0 7
50385: ARRAY
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: PPUSH
50391: LD_VAR 0 12
50395: PUSH
50396: LD_VAR 0 7
50400: ARRAY
50401: PUSH
50402: LD_INT 2
50404: ARRAY
50405: PPUSH
50406: CALL_OW 546
50410: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50411: LD_VAR 0 8
50415: PUSH
50416: LD_INT 1
50418: ARRAY
50419: PUSH
50420: LD_VAR 0 8
50424: PUSH
50425: LD_INT 2
50427: ARRAY
50428: PUSH
50429: LD_VAR 0 13
50433: PUSH
50434: LD_INT 2
50436: PLUS
50437: GREATER
50438: OR
50439: PUSH
50440: LD_VAR 0 8
50444: PUSH
50445: LD_INT 2
50447: ARRAY
50448: PUSH
50449: LD_VAR 0 13
50453: PUSH
50454: LD_INT 2
50456: MINUS
50457: LESS
50458: OR
50459: PUSH
50460: LD_VAR 0 8
50464: PUSH
50465: LD_INT 3
50467: ARRAY
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 8
50474: PUSH
50475: LD_INT 9
50477: PUSH
50478: LD_INT 10
50480: PUSH
50481: LD_INT 11
50483: PUSH
50484: LD_INT 12
50486: PUSH
50487: LD_INT 13
50489: PUSH
50490: LD_INT 16
50492: PUSH
50493: LD_INT 17
50495: PUSH
50496: LD_INT 18
50498: PUSH
50499: LD_INT 19
50501: PUSH
50502: LD_INT 20
50504: PUSH
50505: LD_INT 21
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: IN
50523: NOT
50524: OR
50525: PUSH
50526: LD_VAR 0 8
50530: PUSH
50531: LD_INT 5
50533: ARRAY
50534: NOT
50535: OR
50536: PUSH
50537: LD_VAR 0 8
50541: PUSH
50542: LD_INT 6
50544: ARRAY
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: LD_INT 7
50554: PUSH
50555: LD_INT 9
50557: PUSH
50558: LD_INT 10
50560: PUSH
50561: LD_INT 11
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: IN
50572: NOT
50573: OR
50574: IFFALSE 50580
// exit ;
50576: POP
50577: POP
50578: GO 50663
// end ;
50580: GO 50251
50582: POP
50583: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50584: LD_VAR 0 9
50588: PPUSH
50589: LD_VAR 0 3
50593: PPUSH
50594: LD_VAR 0 4
50598: PPUSH
50599: LD_INT 20
50601: PPUSH
50602: CALL 42609 0 4
50606: PUSH
50607: LD_INT 4
50609: ARRAY
50610: IFFALSE 50614
// exit ;
50612: GO 50663
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50614: LD_VAR 0 2
50618: PUSH
50619: LD_INT 29
50621: PUSH
50622: LD_INT 30
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: IN
50629: PUSH
50630: LD_VAR 0 3
50634: PPUSH
50635: LD_VAR 0 4
50639: PPUSH
50640: LD_VAR 0 9
50644: PPUSH
50645: CALL_OW 440
50649: NOT
50650: AND
50651: IFFALSE 50655
// exit ;
50653: GO 50663
// result := true ;
50655: LD_ADDR_VAR 0 6
50659: PUSH
50660: LD_INT 1
50662: ST_TO_ADDR
// end ;
50663: LD_VAR 0 6
50667: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50668: LD_INT 0
50670: PPUSH
50671: PPUSH
50672: PPUSH
50673: PPUSH
50674: PPUSH
50675: PPUSH
50676: PPUSH
50677: PPUSH
50678: PPUSH
50679: PPUSH
50680: PPUSH
50681: PPUSH
50682: PPUSH
50683: PPUSH
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
50688: PPUSH
50689: PPUSH
50690: PPUSH
50691: PPUSH
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
50698: PPUSH
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
// result = [ ] ;
50728: LD_ADDR_VAR 0 7
50732: PUSH
50733: EMPTY
50734: ST_TO_ADDR
// temp_list = [ ] ;
50735: LD_ADDR_VAR 0 9
50739: PUSH
50740: EMPTY
50741: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50742: LD_VAR 0 4
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: LD_INT 4
50761: PUSH
50762: LD_INT 5
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: IN
50773: NOT
50774: PUSH
50775: LD_VAR 0 1
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: IN
50790: PUSH
50791: LD_VAR 0 5
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: LIST
50809: IN
50810: NOT
50811: AND
50812: OR
50813: IFFALSE 50817
// exit ;
50815: GO 69208
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50817: LD_VAR 0 1
50821: PUSH
50822: LD_INT 6
50824: PUSH
50825: LD_INT 7
50827: PUSH
50828: LD_INT 8
50830: PUSH
50831: LD_INT 13
50833: PUSH
50834: LD_INT 12
50836: PUSH
50837: LD_INT 15
50839: PUSH
50840: LD_INT 11
50842: PUSH
50843: LD_INT 14
50845: PUSH
50846: LD_INT 10
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: IN
50860: IFFALSE 50870
// btype = b_lab ;
50862: LD_ADDR_VAR 0 1
50866: PUSH
50867: LD_INT 6
50869: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50870: LD_VAR 0 6
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: IN
50889: NOT
50890: PUSH
50891: LD_VAR 0 1
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 6
50910: PUSH
50911: LD_INT 36
50913: PUSH
50914: LD_INT 4
50916: PUSH
50917: LD_INT 5
50919: PUSH
50920: LD_INT 31
50922: PUSH
50923: LD_INT 32
50925: PUSH
50926: LD_INT 33
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: IN
50942: NOT
50943: PUSH
50944: LD_VAR 0 6
50948: PUSH
50949: LD_INT 1
50951: EQUAL
50952: AND
50953: OR
50954: PUSH
50955: LD_VAR 0 1
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 3
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: IN
50970: NOT
50971: PUSH
50972: LD_VAR 0 6
50976: PUSH
50977: LD_INT 2
50979: EQUAL
50980: AND
50981: OR
50982: IFFALSE 50992
// mode = 0 ;
50984: LD_ADDR_VAR 0 6
50988: PUSH
50989: LD_INT 0
50991: ST_TO_ADDR
// case mode of 0 :
50992: LD_VAR 0 6
50996: PUSH
50997: LD_INT 0
50999: DOUBLE
51000: EQUAL
51001: IFTRUE 51005
51003: GO 62458
51005: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51006: LD_ADDR_VAR 0 11
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51199: LD_ADDR_VAR 0 12
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 3
51356: NEG
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51395: LD_ADDR_VAR 0 13
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 3
51566: NEG
51567: PUSH
51568: LD_INT 3
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51594: LD_ADDR_VAR 0 14
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 3
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51790: LD_ADDR_VAR 0 15
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51983: LD_ADDR_VAR 0 16
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52176: LD_ADDR_VAR 0 17
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52406: LD_ADDR_VAR 0 18
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52636: LD_ADDR_VAR 0 19
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: LD_INT 2
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52866: LD_ADDR_VAR 0 20
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53096: LD_ADDR_VAR 0 21
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53326: LD_ADDR_VAR 0 22
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: NEG
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53556: LD_ADDR_VAR 0 23
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53836: LD_ADDR_VAR 0 24
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 2
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 3
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54112: LD_ADDR_VAR 0 25
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 3
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 3
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54386: LD_ADDR_VAR 0 26
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54662: LD_ADDR_VAR 0 27
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 3
54895: NEG
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54942: LD_ADDR_VAR 0 28
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 3
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 3
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55224: LD_ADDR_VAR 0 29
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: LD_INT 3
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 3
55468: NEG
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55503: LD_ADDR_VAR 0 30
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 3
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 3
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55781: LD_ADDR_VAR 0 31
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 3
56024: NEG
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56059: LD_ADDR_VAR 0 32
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 3
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 3
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56337: LD_ADDR_VAR 0 33
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56616: LD_ADDR_VAR 0 34
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56896: LD_ADDR_VAR 0 35
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57008: LD_ADDR_VAR 0 36
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57120: LD_ADDR_VAR 0 37
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57232: LD_ADDR_VAR 0 38
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57344: LD_ADDR_VAR 0 39
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57456: LD_ADDR_VAR 0 40
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57568: LD_ADDR_VAR 0 41
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: NEG
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57918: LD_ADDR_VAR 0 42
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: LD_INT 3
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: LD_INT 3
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58268: LD_ADDR_VAR 0 43
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: LD_INT 3
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 3
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 3
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 3
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58616: LD_ADDR_VAR 0 44
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 3
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: LD_INT 3
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58966: LD_ADDR_VAR 0 45
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 3
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: LD_INT 3
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 3
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59316: LD_ADDR_VAR 0 46
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 2
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: LD_INT 3
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 3
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 3
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 3
59612: NEG
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 3
59623: NEG
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59664: LD_ADDR_VAR 0 47
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59815: LD_ADDR_VAR 0 48
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59962: LD_ADDR_VAR 0 49
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60106: LD_ADDR_VAR 0 50
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60250: LD_ADDR_VAR 0 51
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60397: LD_ADDR_VAR 0 52
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 2
60524: NEG
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60548: LD_ADDR_VAR 0 53
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 0
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60778: LD_ADDR_VAR 0 54
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: LD_INT 2
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61008: LD_ADDR_VAR 0 55
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 2
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 2
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: LD_INT 2
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61238: LD_ADDR_VAR 0 56
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: NEG
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61468: LD_ADDR_VAR 0 57
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 2
61655: NEG
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61698: LD_ADDR_VAR 0 58
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: PUSH
61834: LD_INT 2
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: LD_INT 2
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61928: LD_ADDR_VAR 0 59
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62016: LD_ADDR_VAR 0 60
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62104: LD_ADDR_VAR 0 61
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62192: LD_ADDR_VAR 0 62
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62280: LD_ADDR_VAR 0 63
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62368: LD_ADDR_VAR 0 64
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: ST_TO_ADDR
// end ; 1 :
62456: GO 68353
62458: LD_INT 1
62460: DOUBLE
62461: EQUAL
62462: IFTRUE 62466
62464: GO 65089
62466: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62467: LD_ADDR_VAR 0 11
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: LD_INT 3
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: LD_INT 3
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: LIST
62510: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62511: LD_ADDR_VAR 0 12
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 3
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: LIST
62551: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62552: LD_ADDR_VAR 0 13
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: LD_INT 3
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: LIST
62591: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62592: LD_ADDR_VAR 0 14
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62633: LD_ADDR_VAR 0 15
62637: PUSH
62638: LD_INT 2
62640: NEG
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: NEG
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62677: LD_ADDR_VAR 0 16
62681: PUSH
62682: LD_INT 2
62684: NEG
62685: PUSH
62686: LD_INT 3
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 3
62696: NEG
62697: PUSH
62698: LD_INT 2
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 3
62708: NEG
62709: PUSH
62710: LD_INT 3
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: LIST
62722: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62723: LD_ADDR_VAR 0 17
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 3
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 3
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: LD_INT 2
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62767: LD_ADDR_VAR 0 18
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 3
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 3
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: LIST
62807: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62808: LD_ADDR_VAR 0 19
62812: PUSH
62813: LD_INT 3
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: LD_INT 3
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 2
62835: PUSH
62836: LD_INT 3
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62848: LD_ADDR_VAR 0 20
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 3
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 3
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 2
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62889: LD_ADDR_VAR 0 21
62893: PUSH
62894: LD_INT 2
62896: NEG
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 3
62907: NEG
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: NEG
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: LIST
62932: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62933: LD_ADDR_VAR 0 22
62937: PUSH
62938: LD_INT 2
62940: NEG
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 3
62952: NEG
62953: PUSH
62954: LD_INT 2
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 3
62964: NEG
62965: PUSH
62966: LD_INT 3
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: LIST
62978: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62979: LD_ADDR_VAR 0 23
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 3
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 4
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 3
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: LIST
63022: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63023: LD_ADDR_VAR 0 24
63027: PUSH
63028: LD_INT 3
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 3
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 4
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: LIST
63063: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63064: LD_ADDR_VAR 0 25
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: LD_INT 3
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 4
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 3
63091: PUSH
63092: LD_INT 4
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63104: LD_ADDR_VAR 0 26
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: LD_INT 4
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: LD_INT 3
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: LIST
63144: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63145: LD_ADDR_VAR 0 27
63149: PUSH
63150: LD_INT 3
63152: NEG
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: NEG
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 4
63174: NEG
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63189: LD_ADDR_VAR 0 28
63193: PUSH
63194: LD_INT 3
63196: NEG
63197: PUSH
63198: LD_INT 3
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 3
63208: NEG
63209: PUSH
63210: LD_INT 4
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 4
63220: NEG
63221: PUSH
63222: LD_INT 3
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63235: LD_ADDR_VAR 0 29
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 3
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: LD_INT 4
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: LD_INT 4
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: LD_INT 3
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: LD_INT 5
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: LD_INT 5
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: LD_INT 4
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: LD_INT 6
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 6
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 5
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63390: LD_ADDR_VAR 0 30
63394: PUSH
63395: LD_INT 2
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 3
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 3
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 4
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 4
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 4
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 5
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 5
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 5
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 6
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 6
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63533: LD_ADDR_VAR 0 31
63537: PUSH
63538: LD_INT 3
63540: PUSH
63541: LD_INT 2
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 3
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: LD_INT 3
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 4
63570: PUSH
63571: LD_INT 3
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 4
63580: PUSH
63581: LD_INT 4
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: LD_INT 4
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 5
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 5
63610: PUSH
63611: LD_INT 5
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 4
63620: PUSH
63621: LD_INT 5
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 6
63630: PUSH
63631: LD_INT 5
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 6
63640: PUSH
63641: LD_INT 6
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 5
63650: PUSH
63651: LD_INT 6
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63672: LD_ADDR_VAR 0 32
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: LD_INT 3
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: LD_INT 3
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: NEG
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: LD_INT 4
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: LD_INT 4
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: LD_INT 3
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: LD_INT 5
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 5
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: LD_INT 4
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 6
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: LD_INT 6
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: LD_INT 5
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63815: LD_ADDR_VAR 0 33
63819: PUSH
63820: LD_INT 2
63822: NEG
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 3
63833: NEG
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 3
63844: NEG
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 3
63856: NEG
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 4
63867: NEG
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 4
63878: NEG
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 4
63890: NEG
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 5
63901: NEG
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 5
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 5
63924: NEG
63925: PUSH
63926: LD_INT 1
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 6
63935: NEG
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 6
63946: NEG
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63970: LD_ADDR_VAR 0 34
63974: PUSH
63975: LD_INT 2
63977: NEG
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 3
63989: NEG
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 3
64001: NEG
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 3
64013: NEG
64014: PUSH
64015: LD_INT 4
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 4
64025: NEG
64026: PUSH
64027: LD_INT 3
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 4
64037: NEG
64038: PUSH
64039: LD_INT 4
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 4
64049: NEG
64050: PUSH
64051: LD_INT 5
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 5
64061: NEG
64062: PUSH
64063: LD_INT 4
64065: NEG
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 5
64073: NEG
64074: PUSH
64075: LD_INT 5
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 5
64085: NEG
64086: PUSH
64087: LD_INT 6
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 6
64097: NEG
64098: PUSH
64099: LD_INT 5
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 6
64109: NEG
64110: PUSH
64111: LD_INT 6
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64133: LD_ADDR_VAR 0 41
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: LD_INT 3
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: LIST
64176: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64177: LD_ADDR_VAR 0 42
64181: PUSH
64182: LD_INT 2
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 3
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64218: LD_ADDR_VAR 0 43
64222: PUSH
64223: LD_INT 2
64225: PUSH
64226: LD_INT 2
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 3
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: PUSH
64246: LD_INT 3
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: LIST
64257: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64258: LD_ADDR_VAR 0 44
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: LD_INT 3
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: LIST
64298: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64299: LD_ADDR_VAR 0 45
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 2
64317: NEG
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: NEG
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64343: LD_ADDR_VAR 0 46
64347: PUSH
64348: LD_INT 2
64350: NEG
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: LD_INT 3
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 3
64374: NEG
64375: PUSH
64376: LD_INT 2
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: LIST
64388: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64389: LD_ADDR_VAR 0 47
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: LD_INT 3
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 3
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64422: LD_ADDR_VAR 0 48
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 2
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64453: LD_ADDR_VAR 0 49
64457: PUSH
64458: LD_INT 3
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 3
64470: PUSH
64471: LD_INT 2
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64482: LD_ADDR_VAR 0 50
64486: PUSH
64487: LD_INT 2
64489: PUSH
64490: LD_INT 3
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 3
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64511: LD_ADDR_VAR 0 51
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: LD_INT 2
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 2
64529: NEG
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64542: LD_ADDR_VAR 0 52
64546: PUSH
64547: LD_INT 3
64549: NEG
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 3
64561: NEG
64562: PUSH
64563: LD_INT 2
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64575: LD_ADDR_VAR 0 53
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: LD_INT 3
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 3
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 2
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64619: LD_ADDR_VAR 0 54
64623: PUSH
64624: LD_INT 2
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64660: LD_ADDR_VAR 0 55
64664: PUSH
64665: LD_INT 3
64667: PUSH
64668: LD_INT 2
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 3
64677: PUSH
64678: LD_INT 3
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 2
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64700: LD_ADDR_VAR 0 56
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: LD_INT 3
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: LD_INT 3
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 2
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64741: LD_ADDR_VAR 0 57
64745: PUSH
64746: LD_INT 2
64748: NEG
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 3
64770: NEG
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: LIST
64784: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64785: LD_ADDR_VAR 0 58
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: LD_INT 3
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: NEG
64805: PUSH
64806: LD_INT 2
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: LD_INT 3
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64831: LD_ADDR_VAR 0 59
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: LD_INT 2
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64875: LD_ADDR_VAR 0 60
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64916: LD_ADDR_VAR 0 61
64920: PUSH
64921: LD_INT 2
64923: PUSH
64924: LD_INT 1
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 2
64933: PUSH
64934: LD_INT 2
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64956: LD_ADDR_VAR 0 62
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: LD_INT 2
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 2
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64997: LD_ADDR_VAR 0 63
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65041: LD_ADDR_VAR 0 64
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: LD_INT 2
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 2
65060: NEG
65061: PUSH
65062: LD_INT 1
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 2
65072: NEG
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// end ; 2 :
65087: GO 68353
65089: LD_INT 2
65091: DOUBLE
65092: EQUAL
65093: IFTRUE 65097
65095: GO 68352
65097: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65098: LD_ADDR_VAR 0 29
65102: PUSH
65103: LD_INT 4
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 4
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 5
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 5
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 4
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 3
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 3
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 3
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 5
65188: PUSH
65189: LD_INT 2
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 3
65198: PUSH
65199: LD_INT 3
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 3
65208: PUSH
65209: LD_INT 2
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 4
65218: PUSH
65219: LD_INT 3
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 4
65228: PUSH
65229: LD_INT 4
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 3
65238: PUSH
65239: LD_INT 4
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 2
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 2
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 4
65268: PUSH
65269: LD_INT 2
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: LD_INT 4
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: LD_INT 4
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 3
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: LD_INT 4
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: LD_INT 5
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 5
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: LD_INT 4
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: LD_INT 3
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: LD_INT 5
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 2
65370: NEG
65371: PUSH
65372: LD_INT 3
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 3
65381: NEG
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 3
65392: NEG
65393: PUSH
65394: LD_INT 1
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 2
65404: NEG
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 3
65426: NEG
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 4
65437: NEG
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 4
65448: NEG
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 4
65460: NEG
65461: PUSH
65462: LD_INT 2
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 2
65472: NEG
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 4
65483: NEG
65484: PUSH
65485: LD_INT 4
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 4
65495: NEG
65496: PUSH
65497: LD_INT 5
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 3
65507: NEG
65508: PUSH
65509: LD_INT 4
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 3
65519: NEG
65520: PUSH
65521: LD_INT 3
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 4
65531: NEG
65532: PUSH
65533: LD_INT 3
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 5
65543: NEG
65544: PUSH
65545: LD_INT 4
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 5
65555: NEG
65556: PUSH
65557: LD_INT 5
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 3
65567: NEG
65568: PUSH
65569: LD_INT 5
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 5
65579: NEG
65580: PUSH
65581: LD_INT 3
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65636: LD_ADDR_VAR 0 30
65640: PUSH
65641: LD_INT 4
65643: PUSH
65644: LD_INT 4
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 4
65653: PUSH
65654: LD_INT 3
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 5
65663: PUSH
65664: LD_INT 4
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 5
65673: PUSH
65674: LD_INT 5
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 4
65683: PUSH
65684: LD_INT 5
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: PUSH
65694: LD_INT 4
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: LD_INT 3
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 5
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 3
65723: PUSH
65724: LD_INT 5
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 3
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: LD_INT 3
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: LD_INT 4
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 4
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: LD_INT 3
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: LD_INT 2
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: LD_INT 4
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: LD_INT 2
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 4
65826: NEG
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 4
65837: NEG
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 3
65849: NEG
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 3
65860: NEG
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 4
65871: NEG
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 5
65882: NEG
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 5
65893: NEG
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 5
65905: NEG
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 3
65917: NEG
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 3
65928: NEG
65929: PUSH
65930: LD_INT 3
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 3
65940: NEG
65941: PUSH
65942: LD_INT 4
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 2
65952: NEG
65953: PUSH
65954: LD_INT 3
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 2
65964: NEG
65965: PUSH
65966: LD_INT 2
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: LD_INT 2
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 4
65988: NEG
65989: PUSH
65990: LD_INT 3
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 4
66000: NEG
66001: PUSH
66002: LD_INT 4
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: NEG
66013: PUSH
66014: LD_INT 4
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 4
66024: NEG
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: LD_INT 4
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: LD_INT 5
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: LD_INT 4
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 3
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 3
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: NEG
66092: PUSH
66093: LD_INT 4
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: PUSH
66105: LD_INT 5
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 2
66115: PUSH
66116: LD_INT 3
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 2
66126: NEG
66127: PUSH
66128: LD_INT 5
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66183: LD_ADDR_VAR 0 31
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 4
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_INT 3
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: LD_INT 4
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: LD_INT 5
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 0
66230: PUSH
66231: LD_INT 5
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: LD_INT 4
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: LD_INT 3
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 5
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: LD_INT 3
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 3
66283: NEG
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 2
66317: NEG
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 3
66328: NEG
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 4
66339: NEG
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 4
66350: NEG
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 4
66362: NEG
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: LD_INT 2
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 4
66385: NEG
66386: PUSH
66387: LD_INT 4
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 4
66397: NEG
66398: PUSH
66399: LD_INT 5
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 3
66409: NEG
66410: PUSH
66411: LD_INT 4
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 3
66421: NEG
66422: PUSH
66423: LD_INT 3
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 4
66433: NEG
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 5
66445: NEG
66446: PUSH
66447: LD_INT 4
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 5
66457: NEG
66458: PUSH
66459: LD_INT 5
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 3
66469: NEG
66470: PUSH
66471: LD_INT 5
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 5
66481: NEG
66482: PUSH
66483: LD_INT 3
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 3
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 4
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: LD_INT 3
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: NEG
66549: PUSH
66550: LD_INT 3
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: LD_INT 4
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: LD_INT 2
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: LD_INT 4
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 4
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 4
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 5
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 5
66626: PUSH
66627: LD_INT 1
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 4
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 3
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 3
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: PUSH
66668: LD_INT 2
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 5
66678: PUSH
66679: LD_INT 2
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66733: LD_ADDR_VAR 0 32
66737: PUSH
66738: LD_INT 4
66740: NEG
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 4
66751: NEG
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 3
66763: NEG
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 3
66774: NEG
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 4
66785: NEG
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 5
66796: NEG
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 5
66807: NEG
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 5
66819: NEG
66820: PUSH
66821: LD_INT 2
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: LD_INT 3
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: LD_INT 4
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 2
66878: NEG
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 3
66890: NEG
66891: PUSH
66892: LD_INT 2
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 4
66902: NEG
66903: PUSH
66904: LD_INT 3
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 4
66914: NEG
66915: PUSH
66916: LD_INT 4
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: LD_INT 4
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 4
66938: NEG
66939: PUSH
66940: LD_INT 2
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 0
66950: PUSH
66951: LD_INT 4
66953: NEG
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 5
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 1
66972: PUSH
66973: LD_INT 4
66975: NEG
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: LD_INT 3
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: LD_INT 3
66997: NEG
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: NEG
67006: PUSH
67007: LD_INT 4
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: LD_INT 5
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 2
67029: PUSH
67030: LD_INT 3
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: NEG
67041: PUSH
67042: LD_INT 5
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 3
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 3
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 4
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 4
67083: PUSH
67084: LD_INT 1
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 3
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 2
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 2
67124: PUSH
67125: LD_INT 2
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 4
67135: PUSH
67136: LD_INT 2
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 4
67145: PUSH
67146: LD_INT 4
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 4
67155: PUSH
67156: LD_INT 3
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 5
67165: PUSH
67166: LD_INT 4
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 5
67175: PUSH
67176: LD_INT 5
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 4
67185: PUSH
67186: LD_INT 5
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: LD_INT 4
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 5
67215: PUSH
67216: LD_INT 3
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 3
67225: PUSH
67226: LD_INT 5
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67280: LD_ADDR_VAR 0 33
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: LD_INT 4
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 4
67299: NEG
67300: PUSH
67301: LD_INT 5
67303: NEG
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 3
67311: NEG
67312: PUSH
67313: LD_INT 4
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: LD_INT 3
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 4
67335: NEG
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 5
67347: NEG
67348: PUSH
67349: LD_INT 4
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 5
67359: NEG
67360: PUSH
67361: LD_INT 5
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: LD_INT 5
67375: NEG
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 5
67383: NEG
67384: PUSH
67385: LD_INT 3
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: LD_INT 4
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: LD_INT 3
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 1
67428: PUSH
67429: LD_INT 2
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 0
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 1
67450: NEG
67451: PUSH
67452: LD_INT 3
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: LD_INT 4
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 2
67474: PUSH
67475: LD_INT 2
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: LD_INT 4
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 4
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 4
67507: PUSH
67508: LD_INT 1
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 5
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 5
67528: PUSH
67529: LD_INT 1
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 4
67538: PUSH
67539: LD_INT 1
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: LD_INT 0
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 3
67558: PUSH
67559: LD_INT 1
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 3
67569: PUSH
67570: LD_INT 2
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 5
67580: PUSH
67581: LD_INT 2
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 3
67590: PUSH
67591: LD_INT 3
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 3
67600: PUSH
67601: LD_INT 2
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 4
67610: PUSH
67611: LD_INT 3
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 4
67620: PUSH
67621: LD_INT 4
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 3
67630: PUSH
67631: LD_INT 4
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 2
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 2
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 4
67660: PUSH
67661: LD_INT 2
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: LD_INT 4
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 0
67680: PUSH
67681: LD_INT 4
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: LD_INT 3
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 1
67700: PUSH
67701: LD_INT 4
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: LD_INT 5
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: LD_INT 5
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 1
67730: NEG
67731: PUSH
67732: LD_INT 4
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 1
67741: NEG
67742: PUSH
67743: LD_INT 3
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 2
67752: PUSH
67753: LD_INT 5
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 2
67762: NEG
67763: PUSH
67764: LD_INT 3
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67818: LD_ADDR_VAR 0 34
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: LD_INT 4
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 0
67836: PUSH
67837: LD_INT 5
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 1
67847: PUSH
67848: LD_INT 4
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: LD_INT 3
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: LD_INT 3
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 4
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 1
67892: NEG
67893: PUSH
67894: LD_INT 5
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: PUSH
67905: LD_INT 3
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 2
67915: NEG
67916: PUSH
67917: LD_INT 5
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 3
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 3
67937: PUSH
67938: LD_INT 1
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 4
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 4
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 2
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 2
67988: PUSH
67989: LD_INT 1
67991: NEG
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 4
68010: PUSH
68011: LD_INT 2
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 4
68020: PUSH
68021: LD_INT 4
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 5
68040: PUSH
68041: LD_INT 4
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 5
68050: PUSH
68051: LD_INT 5
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 4
68060: PUSH
68061: LD_INT 5
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: LD_INT 4
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: LD_INT 3
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 5
68090: PUSH
68091: LD_INT 3
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 3
68100: PUSH
68101: LD_INT 5
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: LD_INT 3
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: LD_INT 2
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 1
68130: PUSH
68131: LD_INT 3
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 1
68140: PUSH
68141: LD_INT 4
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: LD_INT 4
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 1
68160: NEG
68161: PUSH
68162: LD_INT 3
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 1
68171: NEG
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 2
68182: PUSH
68183: LD_INT 4
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 2
68192: NEG
68193: PUSH
68194: LD_INT 2
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 4
68203: NEG
68204: PUSH
68205: LD_INT 0
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 4
68214: NEG
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 3
68226: NEG
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 3
68237: NEG
68238: PUSH
68239: LD_INT 1
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 4
68248: NEG
68249: PUSH
68250: LD_INT 1
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 5
68259: NEG
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 5
68270: NEG
68271: PUSH
68272: LD_INT 1
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 5
68282: NEG
68283: PUSH
68284: LD_INT 2
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 3
68294: NEG
68295: PUSH
68296: LD_INT 2
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: ST_TO_ADDR
// end ; end ;
68350: GO 68353
68352: POP
// case btype of b_depot , b_warehouse :
68353: LD_VAR 0 1
68357: PUSH
68358: LD_INT 0
68360: DOUBLE
68361: EQUAL
68362: IFTRUE 68372
68364: LD_INT 1
68366: DOUBLE
68367: EQUAL
68368: IFTRUE 68372
68370: GO 68573
68372: POP
// case nation of nation_american :
68373: LD_VAR 0 5
68377: PUSH
68378: LD_INT 1
68380: DOUBLE
68381: EQUAL
68382: IFTRUE 68386
68384: GO 68442
68386: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68387: LD_ADDR_VAR 0 9
68391: PUSH
68392: LD_VAR 0 11
68396: PUSH
68397: LD_VAR 0 12
68401: PUSH
68402: LD_VAR 0 13
68406: PUSH
68407: LD_VAR 0 14
68411: PUSH
68412: LD_VAR 0 15
68416: PUSH
68417: LD_VAR 0 16
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: PUSH
68430: LD_VAR 0 4
68434: PUSH
68435: LD_INT 1
68437: PLUS
68438: ARRAY
68439: ST_TO_ADDR
68440: GO 68571
68442: LD_INT 2
68444: DOUBLE
68445: EQUAL
68446: IFTRUE 68450
68448: GO 68506
68450: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68451: LD_ADDR_VAR 0 9
68455: PUSH
68456: LD_VAR 0 17
68460: PUSH
68461: LD_VAR 0 18
68465: PUSH
68466: LD_VAR 0 19
68470: PUSH
68471: LD_VAR 0 20
68475: PUSH
68476: LD_VAR 0 21
68480: PUSH
68481: LD_VAR 0 22
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: PUSH
68494: LD_VAR 0 4
68498: PUSH
68499: LD_INT 1
68501: PLUS
68502: ARRAY
68503: ST_TO_ADDR
68504: GO 68571
68506: LD_INT 3
68508: DOUBLE
68509: EQUAL
68510: IFTRUE 68514
68512: GO 68570
68514: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68515: LD_ADDR_VAR 0 9
68519: PUSH
68520: LD_VAR 0 23
68524: PUSH
68525: LD_VAR 0 24
68529: PUSH
68530: LD_VAR 0 25
68534: PUSH
68535: LD_VAR 0 26
68539: PUSH
68540: LD_VAR 0 27
68544: PUSH
68545: LD_VAR 0 28
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: PUSH
68558: LD_VAR 0 4
68562: PUSH
68563: LD_INT 1
68565: PLUS
68566: ARRAY
68567: ST_TO_ADDR
68568: GO 68571
68570: POP
68571: GO 69126
68573: LD_INT 2
68575: DOUBLE
68576: EQUAL
68577: IFTRUE 68587
68579: LD_INT 3
68581: DOUBLE
68582: EQUAL
68583: IFTRUE 68587
68585: GO 68643
68587: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68588: LD_ADDR_VAR 0 9
68592: PUSH
68593: LD_VAR 0 29
68597: PUSH
68598: LD_VAR 0 30
68602: PUSH
68603: LD_VAR 0 31
68607: PUSH
68608: LD_VAR 0 32
68612: PUSH
68613: LD_VAR 0 33
68617: PUSH
68618: LD_VAR 0 34
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: PUSH
68631: LD_VAR 0 4
68635: PUSH
68636: LD_INT 1
68638: PLUS
68639: ARRAY
68640: ST_TO_ADDR
68641: GO 69126
68643: LD_INT 16
68645: DOUBLE
68646: EQUAL
68647: IFTRUE 68705
68649: LD_INT 17
68651: DOUBLE
68652: EQUAL
68653: IFTRUE 68705
68655: LD_INT 18
68657: DOUBLE
68658: EQUAL
68659: IFTRUE 68705
68661: LD_INT 19
68663: DOUBLE
68664: EQUAL
68665: IFTRUE 68705
68667: LD_INT 22
68669: DOUBLE
68670: EQUAL
68671: IFTRUE 68705
68673: LD_INT 20
68675: DOUBLE
68676: EQUAL
68677: IFTRUE 68705
68679: LD_INT 21
68681: DOUBLE
68682: EQUAL
68683: IFTRUE 68705
68685: LD_INT 23
68687: DOUBLE
68688: EQUAL
68689: IFTRUE 68705
68691: LD_INT 24
68693: DOUBLE
68694: EQUAL
68695: IFTRUE 68705
68697: LD_INT 25
68699: DOUBLE
68700: EQUAL
68701: IFTRUE 68705
68703: GO 68761
68705: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68706: LD_ADDR_VAR 0 9
68710: PUSH
68711: LD_VAR 0 35
68715: PUSH
68716: LD_VAR 0 36
68720: PUSH
68721: LD_VAR 0 37
68725: PUSH
68726: LD_VAR 0 38
68730: PUSH
68731: LD_VAR 0 39
68735: PUSH
68736: LD_VAR 0 40
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: PUSH
68749: LD_VAR 0 4
68753: PUSH
68754: LD_INT 1
68756: PLUS
68757: ARRAY
68758: ST_TO_ADDR
68759: GO 69126
68761: LD_INT 6
68763: DOUBLE
68764: EQUAL
68765: IFTRUE 68817
68767: LD_INT 7
68769: DOUBLE
68770: EQUAL
68771: IFTRUE 68817
68773: LD_INT 8
68775: DOUBLE
68776: EQUAL
68777: IFTRUE 68817
68779: LD_INT 13
68781: DOUBLE
68782: EQUAL
68783: IFTRUE 68817
68785: LD_INT 12
68787: DOUBLE
68788: EQUAL
68789: IFTRUE 68817
68791: LD_INT 15
68793: DOUBLE
68794: EQUAL
68795: IFTRUE 68817
68797: LD_INT 11
68799: DOUBLE
68800: EQUAL
68801: IFTRUE 68817
68803: LD_INT 14
68805: DOUBLE
68806: EQUAL
68807: IFTRUE 68817
68809: LD_INT 10
68811: DOUBLE
68812: EQUAL
68813: IFTRUE 68817
68815: GO 68873
68817: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68818: LD_ADDR_VAR 0 9
68822: PUSH
68823: LD_VAR 0 41
68827: PUSH
68828: LD_VAR 0 42
68832: PUSH
68833: LD_VAR 0 43
68837: PUSH
68838: LD_VAR 0 44
68842: PUSH
68843: LD_VAR 0 45
68847: PUSH
68848: LD_VAR 0 46
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: PUSH
68861: LD_VAR 0 4
68865: PUSH
68866: LD_INT 1
68868: PLUS
68869: ARRAY
68870: ST_TO_ADDR
68871: GO 69126
68873: LD_INT 36
68875: DOUBLE
68876: EQUAL
68877: IFTRUE 68881
68879: GO 68937
68881: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68882: LD_ADDR_VAR 0 9
68886: PUSH
68887: LD_VAR 0 47
68891: PUSH
68892: LD_VAR 0 48
68896: PUSH
68897: LD_VAR 0 49
68901: PUSH
68902: LD_VAR 0 50
68906: PUSH
68907: LD_VAR 0 51
68911: PUSH
68912: LD_VAR 0 52
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: PUSH
68925: LD_VAR 0 4
68929: PUSH
68930: LD_INT 1
68932: PLUS
68933: ARRAY
68934: ST_TO_ADDR
68935: GO 69126
68937: LD_INT 4
68939: DOUBLE
68940: EQUAL
68941: IFTRUE 68963
68943: LD_INT 5
68945: DOUBLE
68946: EQUAL
68947: IFTRUE 68963
68949: LD_INT 34
68951: DOUBLE
68952: EQUAL
68953: IFTRUE 68963
68955: LD_INT 37
68957: DOUBLE
68958: EQUAL
68959: IFTRUE 68963
68961: GO 69019
68963: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68964: LD_ADDR_VAR 0 9
68968: PUSH
68969: LD_VAR 0 53
68973: PUSH
68974: LD_VAR 0 54
68978: PUSH
68979: LD_VAR 0 55
68983: PUSH
68984: LD_VAR 0 56
68988: PUSH
68989: LD_VAR 0 57
68993: PUSH
68994: LD_VAR 0 58
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: PUSH
69007: LD_VAR 0 4
69011: PUSH
69012: LD_INT 1
69014: PLUS
69015: ARRAY
69016: ST_TO_ADDR
69017: GO 69126
69019: LD_INT 31
69021: DOUBLE
69022: EQUAL
69023: IFTRUE 69069
69025: LD_INT 32
69027: DOUBLE
69028: EQUAL
69029: IFTRUE 69069
69031: LD_INT 33
69033: DOUBLE
69034: EQUAL
69035: IFTRUE 69069
69037: LD_INT 27
69039: DOUBLE
69040: EQUAL
69041: IFTRUE 69069
69043: LD_INT 26
69045: DOUBLE
69046: EQUAL
69047: IFTRUE 69069
69049: LD_INT 28
69051: DOUBLE
69052: EQUAL
69053: IFTRUE 69069
69055: LD_INT 29
69057: DOUBLE
69058: EQUAL
69059: IFTRUE 69069
69061: LD_INT 30
69063: DOUBLE
69064: EQUAL
69065: IFTRUE 69069
69067: GO 69125
69069: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69070: LD_ADDR_VAR 0 9
69074: PUSH
69075: LD_VAR 0 59
69079: PUSH
69080: LD_VAR 0 60
69084: PUSH
69085: LD_VAR 0 61
69089: PUSH
69090: LD_VAR 0 62
69094: PUSH
69095: LD_VAR 0 63
69099: PUSH
69100: LD_VAR 0 64
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: PUSH
69113: LD_VAR 0 4
69117: PUSH
69118: LD_INT 1
69120: PLUS
69121: ARRAY
69122: ST_TO_ADDR
69123: GO 69126
69125: POP
// temp_list2 = [ ] ;
69126: LD_ADDR_VAR 0 10
69130: PUSH
69131: EMPTY
69132: ST_TO_ADDR
// for i in temp_list do
69133: LD_ADDR_VAR 0 8
69137: PUSH
69138: LD_VAR 0 9
69142: PUSH
69143: FOR_IN
69144: IFFALSE 69196
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69146: LD_ADDR_VAR 0 10
69150: PUSH
69151: LD_VAR 0 10
69155: PUSH
69156: LD_VAR 0 8
69160: PUSH
69161: LD_INT 1
69163: ARRAY
69164: PUSH
69165: LD_VAR 0 2
69169: PLUS
69170: PUSH
69171: LD_VAR 0 8
69175: PUSH
69176: LD_INT 2
69178: ARRAY
69179: PUSH
69180: LD_VAR 0 3
69184: PLUS
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: EMPTY
69191: LIST
69192: ADD
69193: ST_TO_ADDR
69194: GO 69143
69196: POP
69197: POP
// result = temp_list2 ;
69198: LD_ADDR_VAR 0 7
69202: PUSH
69203: LD_VAR 0 10
69207: ST_TO_ADDR
// end ;
69208: LD_VAR 0 7
69212: RET
// export function EnemyInRange ( unit , dist ) ; begin
69213: LD_INT 0
69215: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69216: LD_ADDR_VAR 0 3
69220: PUSH
69221: LD_VAR 0 1
69225: PPUSH
69226: CALL_OW 255
69230: PPUSH
69231: LD_VAR 0 1
69235: PPUSH
69236: CALL_OW 250
69240: PPUSH
69241: LD_VAR 0 1
69245: PPUSH
69246: CALL_OW 251
69250: PPUSH
69251: LD_VAR 0 2
69255: PPUSH
69256: CALL 42609 0 4
69260: PUSH
69261: LD_INT 4
69263: ARRAY
69264: ST_TO_ADDR
// end ;
69265: LD_VAR 0 3
69269: RET
// export function PlayerSeeMe ( unit ) ; begin
69270: LD_INT 0
69272: PPUSH
// result := See ( your_side , unit ) ;
69273: LD_ADDR_VAR 0 2
69277: PUSH
69278: LD_OWVAR 2
69282: PPUSH
69283: LD_VAR 0 1
69287: PPUSH
69288: CALL_OW 292
69292: ST_TO_ADDR
// end ;
69293: LD_VAR 0 2
69297: RET
// export function ReverseDir ( unit ) ; begin
69298: LD_INT 0
69300: PPUSH
// if not unit then
69301: LD_VAR 0 1
69305: NOT
69306: IFFALSE 69310
// exit ;
69308: GO 69333
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69310: LD_ADDR_VAR 0 2
69314: PUSH
69315: LD_VAR 0 1
69319: PPUSH
69320: CALL_OW 254
69324: PUSH
69325: LD_INT 3
69327: PLUS
69328: PUSH
69329: LD_INT 6
69331: MOD
69332: ST_TO_ADDR
// end ;
69333: LD_VAR 0 2
69337: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69338: LD_INT 0
69340: PPUSH
69341: PPUSH
69342: PPUSH
69343: PPUSH
69344: PPUSH
// if not hexes then
69345: LD_VAR 0 2
69349: NOT
69350: IFFALSE 69354
// exit ;
69352: GO 69502
// dist := 9999 ;
69354: LD_ADDR_VAR 0 5
69358: PUSH
69359: LD_INT 9999
69361: ST_TO_ADDR
// for i = 1 to hexes do
69362: LD_ADDR_VAR 0 4
69366: PUSH
69367: DOUBLE
69368: LD_INT 1
69370: DEC
69371: ST_TO_ADDR
69372: LD_VAR 0 2
69376: PUSH
69377: FOR_TO
69378: IFFALSE 69490
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69380: LD_VAR 0 1
69384: PPUSH
69385: LD_VAR 0 2
69389: PUSH
69390: LD_VAR 0 4
69394: ARRAY
69395: PUSH
69396: LD_INT 1
69398: ARRAY
69399: PPUSH
69400: LD_VAR 0 2
69404: PUSH
69405: LD_VAR 0 4
69409: ARRAY
69410: PUSH
69411: LD_INT 2
69413: ARRAY
69414: PPUSH
69415: CALL_OW 297
69419: PUSH
69420: LD_VAR 0 5
69424: LESS
69425: IFFALSE 69488
// begin hex := hexes [ i ] ;
69427: LD_ADDR_VAR 0 7
69431: PUSH
69432: LD_VAR 0 2
69436: PUSH
69437: LD_VAR 0 4
69441: ARRAY
69442: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69443: LD_ADDR_VAR 0 5
69447: PUSH
69448: LD_VAR 0 1
69452: PPUSH
69453: LD_VAR 0 2
69457: PUSH
69458: LD_VAR 0 4
69462: ARRAY
69463: PUSH
69464: LD_INT 1
69466: ARRAY
69467: PPUSH
69468: LD_VAR 0 2
69472: PUSH
69473: LD_VAR 0 4
69477: ARRAY
69478: PUSH
69479: LD_INT 2
69481: ARRAY
69482: PPUSH
69483: CALL_OW 297
69487: ST_TO_ADDR
// end ; end ;
69488: GO 69377
69490: POP
69491: POP
// result := hex ;
69492: LD_ADDR_VAR 0 3
69496: PUSH
69497: LD_VAR 0 7
69501: ST_TO_ADDR
// end ;
69502: LD_VAR 0 3
69506: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69507: LD_INT 0
69509: PPUSH
69510: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69511: LD_VAR 0 1
69515: NOT
69516: PUSH
69517: LD_VAR 0 1
69521: PUSH
69522: LD_INT 21
69524: PUSH
69525: LD_INT 2
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 23
69534: PUSH
69535: LD_INT 2
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PPUSH
69546: CALL_OW 69
69550: IN
69551: NOT
69552: OR
69553: IFFALSE 69557
// exit ;
69555: GO 69604
// for i = 1 to 3 do
69557: LD_ADDR_VAR 0 3
69561: PUSH
69562: DOUBLE
69563: LD_INT 1
69565: DEC
69566: ST_TO_ADDR
69567: LD_INT 3
69569: PUSH
69570: FOR_TO
69571: IFFALSE 69602
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69573: LD_VAR 0 1
69577: PPUSH
69578: CALL_OW 250
69582: PPUSH
69583: LD_VAR 0 1
69587: PPUSH
69588: CALL_OW 251
69592: PPUSH
69593: LD_INT 1
69595: PPUSH
69596: CALL_OW 453
69600: GO 69570
69602: POP
69603: POP
// end ;
69604: LD_VAR 0 2
69608: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69609: LD_INT 0
69611: PPUSH
69612: PPUSH
69613: PPUSH
69614: PPUSH
69615: PPUSH
69616: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69617: LD_VAR 0 1
69621: NOT
69622: PUSH
69623: LD_VAR 0 2
69627: NOT
69628: OR
69629: PUSH
69630: LD_VAR 0 1
69634: PPUSH
69635: CALL_OW 314
69639: OR
69640: IFFALSE 69644
// exit ;
69642: GO 70085
// x := GetX ( enemy_unit ) ;
69644: LD_ADDR_VAR 0 7
69648: PUSH
69649: LD_VAR 0 2
69653: PPUSH
69654: CALL_OW 250
69658: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69659: LD_ADDR_VAR 0 8
69663: PUSH
69664: LD_VAR 0 2
69668: PPUSH
69669: CALL_OW 251
69673: ST_TO_ADDR
// if not x or not y then
69674: LD_VAR 0 7
69678: NOT
69679: PUSH
69680: LD_VAR 0 8
69684: NOT
69685: OR
69686: IFFALSE 69690
// exit ;
69688: GO 70085
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69690: LD_ADDR_VAR 0 6
69694: PUSH
69695: LD_VAR 0 7
69699: PPUSH
69700: LD_INT 0
69702: PPUSH
69703: LD_INT 4
69705: PPUSH
69706: CALL_OW 272
69710: PUSH
69711: LD_VAR 0 8
69715: PPUSH
69716: LD_INT 0
69718: PPUSH
69719: LD_INT 4
69721: PPUSH
69722: CALL_OW 273
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_VAR 0 7
69735: PPUSH
69736: LD_INT 1
69738: PPUSH
69739: LD_INT 4
69741: PPUSH
69742: CALL_OW 272
69746: PUSH
69747: LD_VAR 0 8
69751: PPUSH
69752: LD_INT 1
69754: PPUSH
69755: LD_INT 4
69757: PPUSH
69758: CALL_OW 273
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_VAR 0 7
69771: PPUSH
69772: LD_INT 2
69774: PPUSH
69775: LD_INT 4
69777: PPUSH
69778: CALL_OW 272
69782: PUSH
69783: LD_VAR 0 8
69787: PPUSH
69788: LD_INT 2
69790: PPUSH
69791: LD_INT 4
69793: PPUSH
69794: CALL_OW 273
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_VAR 0 7
69807: PPUSH
69808: LD_INT 3
69810: PPUSH
69811: LD_INT 4
69813: PPUSH
69814: CALL_OW 272
69818: PUSH
69819: LD_VAR 0 8
69823: PPUSH
69824: LD_INT 3
69826: PPUSH
69827: LD_INT 4
69829: PPUSH
69830: CALL_OW 273
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_VAR 0 7
69843: PPUSH
69844: LD_INT 4
69846: PPUSH
69847: LD_INT 4
69849: PPUSH
69850: CALL_OW 272
69854: PUSH
69855: LD_VAR 0 8
69859: PPUSH
69860: LD_INT 4
69862: PPUSH
69863: LD_INT 4
69865: PPUSH
69866: CALL_OW 273
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_VAR 0 7
69879: PPUSH
69880: LD_INT 5
69882: PPUSH
69883: LD_INT 4
69885: PPUSH
69886: CALL_OW 272
69890: PUSH
69891: LD_VAR 0 8
69895: PPUSH
69896: LD_INT 5
69898: PPUSH
69899: LD_INT 4
69901: PPUSH
69902: CALL_OW 273
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: ST_TO_ADDR
// for i = tmp downto 1 do
69919: LD_ADDR_VAR 0 4
69923: PUSH
69924: DOUBLE
69925: LD_VAR 0 6
69929: INC
69930: ST_TO_ADDR
69931: LD_INT 1
69933: PUSH
69934: FOR_DOWNTO
69935: IFFALSE 70036
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69937: LD_VAR 0 6
69941: PUSH
69942: LD_VAR 0 4
69946: ARRAY
69947: PUSH
69948: LD_INT 1
69950: ARRAY
69951: PPUSH
69952: LD_VAR 0 6
69956: PUSH
69957: LD_VAR 0 4
69961: ARRAY
69962: PUSH
69963: LD_INT 2
69965: ARRAY
69966: PPUSH
69967: CALL_OW 488
69971: NOT
69972: PUSH
69973: LD_VAR 0 6
69977: PUSH
69978: LD_VAR 0 4
69982: ARRAY
69983: PUSH
69984: LD_INT 1
69986: ARRAY
69987: PPUSH
69988: LD_VAR 0 6
69992: PUSH
69993: LD_VAR 0 4
69997: ARRAY
69998: PUSH
69999: LD_INT 2
70001: ARRAY
70002: PPUSH
70003: CALL_OW 428
70007: PUSH
70008: LD_INT 0
70010: NONEQUAL
70011: OR
70012: IFFALSE 70034
// tmp := Delete ( tmp , i ) ;
70014: LD_ADDR_VAR 0 6
70018: PUSH
70019: LD_VAR 0 6
70023: PPUSH
70024: LD_VAR 0 4
70028: PPUSH
70029: CALL_OW 3
70033: ST_TO_ADDR
70034: GO 69934
70036: POP
70037: POP
// j := GetClosestHex ( unit , tmp ) ;
70038: LD_ADDR_VAR 0 5
70042: PUSH
70043: LD_VAR 0 1
70047: PPUSH
70048: LD_VAR 0 6
70052: PPUSH
70053: CALL 69338 0 2
70057: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70058: LD_VAR 0 1
70062: PPUSH
70063: LD_VAR 0 5
70067: PUSH
70068: LD_INT 1
70070: ARRAY
70071: PPUSH
70072: LD_VAR 0 5
70076: PUSH
70077: LD_INT 2
70079: ARRAY
70080: PPUSH
70081: CALL_OW 111
// end ;
70085: LD_VAR 0 3
70089: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70090: LD_INT 0
70092: PPUSH
70093: PPUSH
70094: PPUSH
// uc_side = 0 ;
70095: LD_ADDR_OWVAR 20
70099: PUSH
70100: LD_INT 0
70102: ST_TO_ADDR
// uc_nation = 0 ;
70103: LD_ADDR_OWVAR 21
70107: PUSH
70108: LD_INT 0
70110: ST_TO_ADDR
// InitHc_All ( ) ;
70111: CALL_OW 584
// InitVc ;
70115: CALL_OW 20
// if mastodonts then
70119: LD_VAR 0 6
70123: IFFALSE 70190
// for i = 1 to mastodonts do
70125: LD_ADDR_VAR 0 11
70129: PUSH
70130: DOUBLE
70131: LD_INT 1
70133: DEC
70134: ST_TO_ADDR
70135: LD_VAR 0 6
70139: PUSH
70140: FOR_TO
70141: IFFALSE 70188
// begin vc_chassis := 31 ;
70143: LD_ADDR_OWVAR 37
70147: PUSH
70148: LD_INT 31
70150: ST_TO_ADDR
// vc_control := control_rider ;
70151: LD_ADDR_OWVAR 38
70155: PUSH
70156: LD_INT 4
70158: ST_TO_ADDR
// animal := CreateVehicle ;
70159: LD_ADDR_VAR 0 12
70163: PUSH
70164: CALL_OW 45
70168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70169: LD_VAR 0 12
70173: PPUSH
70174: LD_VAR 0 8
70178: PPUSH
70179: LD_INT 0
70181: PPUSH
70182: CALL 72378 0 3
// end ;
70186: GO 70140
70188: POP
70189: POP
// if horses then
70190: LD_VAR 0 5
70194: IFFALSE 70261
// for i = 1 to horses do
70196: LD_ADDR_VAR 0 11
70200: PUSH
70201: DOUBLE
70202: LD_INT 1
70204: DEC
70205: ST_TO_ADDR
70206: LD_VAR 0 5
70210: PUSH
70211: FOR_TO
70212: IFFALSE 70259
// begin hc_class := 21 ;
70214: LD_ADDR_OWVAR 28
70218: PUSH
70219: LD_INT 21
70221: ST_TO_ADDR
// hc_gallery :=  ;
70222: LD_ADDR_OWVAR 33
70226: PUSH
70227: LD_STRING 
70229: ST_TO_ADDR
// animal := CreateHuman ;
70230: LD_ADDR_VAR 0 12
70234: PUSH
70235: CALL_OW 44
70239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70240: LD_VAR 0 12
70244: PPUSH
70245: LD_VAR 0 8
70249: PPUSH
70250: LD_INT 0
70252: PPUSH
70253: CALL 72378 0 3
// end ;
70257: GO 70211
70259: POP
70260: POP
// if birds then
70261: LD_VAR 0 1
70265: IFFALSE 70332
// for i = 1 to birds do
70267: LD_ADDR_VAR 0 11
70271: PUSH
70272: DOUBLE
70273: LD_INT 1
70275: DEC
70276: ST_TO_ADDR
70277: LD_VAR 0 1
70281: PUSH
70282: FOR_TO
70283: IFFALSE 70330
// begin hc_class = 18 ;
70285: LD_ADDR_OWVAR 28
70289: PUSH
70290: LD_INT 18
70292: ST_TO_ADDR
// hc_gallery =  ;
70293: LD_ADDR_OWVAR 33
70297: PUSH
70298: LD_STRING 
70300: ST_TO_ADDR
// animal := CreateHuman ;
70301: LD_ADDR_VAR 0 12
70305: PUSH
70306: CALL_OW 44
70310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70311: LD_VAR 0 12
70315: PPUSH
70316: LD_VAR 0 8
70320: PPUSH
70321: LD_INT 0
70323: PPUSH
70324: CALL 72378 0 3
// end ;
70328: GO 70282
70330: POP
70331: POP
// if tigers then
70332: LD_VAR 0 2
70336: IFFALSE 70420
// for i = 1 to tigers do
70338: LD_ADDR_VAR 0 11
70342: PUSH
70343: DOUBLE
70344: LD_INT 1
70346: DEC
70347: ST_TO_ADDR
70348: LD_VAR 0 2
70352: PUSH
70353: FOR_TO
70354: IFFALSE 70418
// begin hc_class = class_tiger ;
70356: LD_ADDR_OWVAR 28
70360: PUSH
70361: LD_INT 14
70363: ST_TO_ADDR
// hc_gallery =  ;
70364: LD_ADDR_OWVAR 33
70368: PUSH
70369: LD_STRING 
70371: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70372: LD_ADDR_OWVAR 35
70376: PUSH
70377: LD_INT 7
70379: NEG
70380: PPUSH
70381: LD_INT 7
70383: PPUSH
70384: CALL_OW 12
70388: ST_TO_ADDR
// animal := CreateHuman ;
70389: LD_ADDR_VAR 0 12
70393: PUSH
70394: CALL_OW 44
70398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70399: LD_VAR 0 12
70403: PPUSH
70404: LD_VAR 0 8
70408: PPUSH
70409: LD_INT 0
70411: PPUSH
70412: CALL 72378 0 3
// end ;
70416: GO 70353
70418: POP
70419: POP
// if apemans then
70420: LD_VAR 0 3
70424: IFFALSE 70547
// for i = 1 to apemans do
70426: LD_ADDR_VAR 0 11
70430: PUSH
70431: DOUBLE
70432: LD_INT 1
70434: DEC
70435: ST_TO_ADDR
70436: LD_VAR 0 3
70440: PUSH
70441: FOR_TO
70442: IFFALSE 70545
// begin hc_class = class_apeman ;
70444: LD_ADDR_OWVAR 28
70448: PUSH
70449: LD_INT 12
70451: ST_TO_ADDR
// hc_gallery =  ;
70452: LD_ADDR_OWVAR 33
70456: PUSH
70457: LD_STRING 
70459: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70460: LD_ADDR_OWVAR 35
70464: PUSH
70465: LD_INT 2
70467: NEG
70468: PPUSH
70469: LD_INT 2
70471: PPUSH
70472: CALL_OW 12
70476: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70477: LD_ADDR_OWVAR 31
70481: PUSH
70482: LD_INT 1
70484: PPUSH
70485: LD_INT 3
70487: PPUSH
70488: CALL_OW 12
70492: PUSH
70493: LD_INT 1
70495: PPUSH
70496: LD_INT 3
70498: PPUSH
70499: CALL_OW 12
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: LD_INT 0
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: ST_TO_ADDR
// animal := CreateHuman ;
70516: LD_ADDR_VAR 0 12
70520: PUSH
70521: CALL_OW 44
70525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70526: LD_VAR 0 12
70530: PPUSH
70531: LD_VAR 0 8
70535: PPUSH
70536: LD_INT 0
70538: PPUSH
70539: CALL 72378 0 3
// end ;
70543: GO 70441
70545: POP
70546: POP
// if enchidnas then
70547: LD_VAR 0 4
70551: IFFALSE 70618
// for i = 1 to enchidnas do
70553: LD_ADDR_VAR 0 11
70557: PUSH
70558: DOUBLE
70559: LD_INT 1
70561: DEC
70562: ST_TO_ADDR
70563: LD_VAR 0 4
70567: PUSH
70568: FOR_TO
70569: IFFALSE 70616
// begin hc_class = 13 ;
70571: LD_ADDR_OWVAR 28
70575: PUSH
70576: LD_INT 13
70578: ST_TO_ADDR
// hc_gallery =  ;
70579: LD_ADDR_OWVAR 33
70583: PUSH
70584: LD_STRING 
70586: ST_TO_ADDR
// animal := CreateHuman ;
70587: LD_ADDR_VAR 0 12
70591: PUSH
70592: CALL_OW 44
70596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70597: LD_VAR 0 12
70601: PPUSH
70602: LD_VAR 0 8
70606: PPUSH
70607: LD_INT 0
70609: PPUSH
70610: CALL 72378 0 3
// end ;
70614: GO 70568
70616: POP
70617: POP
// if fishes then
70618: LD_VAR 0 7
70622: IFFALSE 70689
// for i = 1 to fishes do
70624: LD_ADDR_VAR 0 11
70628: PUSH
70629: DOUBLE
70630: LD_INT 1
70632: DEC
70633: ST_TO_ADDR
70634: LD_VAR 0 7
70638: PUSH
70639: FOR_TO
70640: IFFALSE 70687
// begin hc_class = 20 ;
70642: LD_ADDR_OWVAR 28
70646: PUSH
70647: LD_INT 20
70649: ST_TO_ADDR
// hc_gallery =  ;
70650: LD_ADDR_OWVAR 33
70654: PUSH
70655: LD_STRING 
70657: ST_TO_ADDR
// animal := CreateHuman ;
70658: LD_ADDR_VAR 0 12
70662: PUSH
70663: CALL_OW 44
70667: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70668: LD_VAR 0 12
70672: PPUSH
70673: LD_VAR 0 9
70677: PPUSH
70678: LD_INT 0
70680: PPUSH
70681: CALL 72378 0 3
// end ;
70685: GO 70639
70687: POP
70688: POP
// end ;
70689: LD_VAR 0 10
70693: RET
// export function WantHeal ( sci , unit ) ; begin
70694: LD_INT 0
70696: PPUSH
// if GetTaskList ( sci ) > 0 then
70697: LD_VAR 0 1
70701: PPUSH
70702: CALL_OW 437
70706: PUSH
70707: LD_INT 0
70709: GREATER
70710: IFFALSE 70780
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70712: LD_VAR 0 1
70716: PPUSH
70717: CALL_OW 437
70721: PUSH
70722: LD_INT 1
70724: ARRAY
70725: PUSH
70726: LD_INT 1
70728: ARRAY
70729: PUSH
70730: LD_STRING l
70732: EQUAL
70733: PUSH
70734: LD_VAR 0 1
70738: PPUSH
70739: CALL_OW 437
70743: PUSH
70744: LD_INT 1
70746: ARRAY
70747: PUSH
70748: LD_INT 4
70750: ARRAY
70751: PUSH
70752: LD_VAR 0 2
70756: EQUAL
70757: AND
70758: IFFALSE 70770
// result := true else
70760: LD_ADDR_VAR 0 3
70764: PUSH
70765: LD_INT 1
70767: ST_TO_ADDR
70768: GO 70778
// result := false ;
70770: LD_ADDR_VAR 0 3
70774: PUSH
70775: LD_INT 0
70777: ST_TO_ADDR
// end else
70778: GO 70788
// result := false ;
70780: LD_ADDR_VAR 0 3
70784: PUSH
70785: LD_INT 0
70787: ST_TO_ADDR
// end ;
70788: LD_VAR 0 3
70792: RET
// export function HealTarget ( sci ) ; begin
70793: LD_INT 0
70795: PPUSH
// if not sci then
70796: LD_VAR 0 1
70800: NOT
70801: IFFALSE 70805
// exit ;
70803: GO 70870
// result := 0 ;
70805: LD_ADDR_VAR 0 2
70809: PUSH
70810: LD_INT 0
70812: ST_TO_ADDR
// if GetTaskList ( sci ) then
70813: LD_VAR 0 1
70817: PPUSH
70818: CALL_OW 437
70822: IFFALSE 70870
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70824: LD_VAR 0 1
70828: PPUSH
70829: CALL_OW 437
70833: PUSH
70834: LD_INT 1
70836: ARRAY
70837: PUSH
70838: LD_INT 1
70840: ARRAY
70841: PUSH
70842: LD_STRING l
70844: EQUAL
70845: IFFALSE 70870
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70847: LD_ADDR_VAR 0 2
70851: PUSH
70852: LD_VAR 0 1
70856: PPUSH
70857: CALL_OW 437
70861: PUSH
70862: LD_INT 1
70864: ARRAY
70865: PUSH
70866: LD_INT 4
70868: ARRAY
70869: ST_TO_ADDR
// end ;
70870: LD_VAR 0 2
70874: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70875: LD_INT 0
70877: PPUSH
70878: PPUSH
70879: PPUSH
70880: PPUSH
// if not base_units then
70881: LD_VAR 0 1
70885: NOT
70886: IFFALSE 70890
// exit ;
70888: GO 70977
// result := false ;
70890: LD_ADDR_VAR 0 2
70894: PUSH
70895: LD_INT 0
70897: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70898: LD_ADDR_VAR 0 5
70902: PUSH
70903: LD_VAR 0 1
70907: PPUSH
70908: LD_INT 21
70910: PUSH
70911: LD_INT 3
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PPUSH
70918: CALL_OW 72
70922: ST_TO_ADDR
// if not tmp then
70923: LD_VAR 0 5
70927: NOT
70928: IFFALSE 70932
// exit ;
70930: GO 70977
// for i in tmp do
70932: LD_ADDR_VAR 0 3
70936: PUSH
70937: LD_VAR 0 5
70941: PUSH
70942: FOR_IN
70943: IFFALSE 70975
// begin result := EnemyInRange ( i , 22 ) ;
70945: LD_ADDR_VAR 0 2
70949: PUSH
70950: LD_VAR 0 3
70954: PPUSH
70955: LD_INT 22
70957: PPUSH
70958: CALL 69213 0 2
70962: ST_TO_ADDR
// if result then
70963: LD_VAR 0 2
70967: IFFALSE 70973
// exit ;
70969: POP
70970: POP
70971: GO 70977
// end ;
70973: GO 70942
70975: POP
70976: POP
// end ;
70977: LD_VAR 0 2
70981: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70982: LD_INT 0
70984: PPUSH
70985: PPUSH
// if not units then
70986: LD_VAR 0 1
70990: NOT
70991: IFFALSE 70995
// exit ;
70993: GO 71065
// result := [ ] ;
70995: LD_ADDR_VAR 0 3
70999: PUSH
71000: EMPTY
71001: ST_TO_ADDR
// for i in units do
71002: LD_ADDR_VAR 0 4
71006: PUSH
71007: LD_VAR 0 1
71011: PUSH
71012: FOR_IN
71013: IFFALSE 71063
// if GetTag ( i ) = tag then
71015: LD_VAR 0 4
71019: PPUSH
71020: CALL_OW 110
71024: PUSH
71025: LD_VAR 0 2
71029: EQUAL
71030: IFFALSE 71061
// result := Replace ( result , result + 1 , i ) ;
71032: LD_ADDR_VAR 0 3
71036: PUSH
71037: LD_VAR 0 3
71041: PPUSH
71042: LD_VAR 0 3
71046: PUSH
71047: LD_INT 1
71049: PLUS
71050: PPUSH
71051: LD_VAR 0 4
71055: PPUSH
71056: CALL_OW 1
71060: ST_TO_ADDR
71061: GO 71012
71063: POP
71064: POP
// end ;
71065: LD_VAR 0 3
71069: RET
// export function IsDriver ( un ) ; begin
71070: LD_INT 0
71072: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71073: LD_ADDR_VAR 0 2
71077: PUSH
71078: LD_VAR 0 1
71082: PUSH
71083: LD_INT 55
71085: PUSH
71086: EMPTY
71087: LIST
71088: PPUSH
71089: CALL_OW 69
71093: IN
71094: ST_TO_ADDR
// end ;
71095: LD_VAR 0 2
71099: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71100: LD_INT 0
71102: PPUSH
71103: PPUSH
// list := [ ] ;
71104: LD_ADDR_VAR 0 5
71108: PUSH
71109: EMPTY
71110: ST_TO_ADDR
// case d of 0 :
71111: LD_VAR 0 3
71115: PUSH
71116: LD_INT 0
71118: DOUBLE
71119: EQUAL
71120: IFTRUE 71124
71122: GO 71257
71124: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71125: LD_ADDR_VAR 0 5
71129: PUSH
71130: LD_VAR 0 1
71134: PUSH
71135: LD_INT 4
71137: MINUS
71138: PUSH
71139: LD_VAR 0 2
71143: PUSH
71144: LD_INT 4
71146: MINUS
71147: PUSH
71148: LD_INT 2
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: LIST
71155: PUSH
71156: LD_VAR 0 1
71160: PUSH
71161: LD_INT 3
71163: MINUS
71164: PUSH
71165: LD_VAR 0 2
71169: PUSH
71170: LD_INT 1
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: LIST
71177: PUSH
71178: LD_VAR 0 1
71182: PUSH
71183: LD_INT 4
71185: PLUS
71186: PUSH
71187: LD_VAR 0 2
71191: PUSH
71192: LD_INT 4
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: LIST
71199: PUSH
71200: LD_VAR 0 1
71204: PUSH
71205: LD_INT 3
71207: PLUS
71208: PUSH
71209: LD_VAR 0 2
71213: PUSH
71214: LD_INT 3
71216: PLUS
71217: PUSH
71218: LD_INT 5
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: LIST
71225: PUSH
71226: LD_VAR 0 1
71230: PUSH
71231: LD_VAR 0 2
71235: PUSH
71236: LD_INT 4
71238: PLUS
71239: PUSH
71240: LD_INT 0
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: LIST
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: ST_TO_ADDR
// end ; 1 :
71255: GO 71955
71257: LD_INT 1
71259: DOUBLE
71260: EQUAL
71261: IFTRUE 71265
71263: GO 71398
71265: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71266: LD_ADDR_VAR 0 5
71270: PUSH
71271: LD_VAR 0 1
71275: PUSH
71276: LD_VAR 0 2
71280: PUSH
71281: LD_INT 4
71283: MINUS
71284: PUSH
71285: LD_INT 3
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: LIST
71292: PUSH
71293: LD_VAR 0 1
71297: PUSH
71298: LD_INT 3
71300: MINUS
71301: PUSH
71302: LD_VAR 0 2
71306: PUSH
71307: LD_INT 3
71309: MINUS
71310: PUSH
71311: LD_INT 2
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: LIST
71318: PUSH
71319: LD_VAR 0 1
71323: PUSH
71324: LD_INT 4
71326: MINUS
71327: PUSH
71328: LD_VAR 0 2
71332: PUSH
71333: LD_INT 1
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: LIST
71340: PUSH
71341: LD_VAR 0 1
71345: PUSH
71346: LD_VAR 0 2
71350: PUSH
71351: LD_INT 3
71353: PLUS
71354: PUSH
71355: LD_INT 0
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: PUSH
71363: LD_VAR 0 1
71367: PUSH
71368: LD_INT 4
71370: PLUS
71371: PUSH
71372: LD_VAR 0 2
71376: PUSH
71377: LD_INT 4
71379: PLUS
71380: PUSH
71381: LD_INT 5
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: LIST
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: ST_TO_ADDR
// end ; 2 :
71396: GO 71955
71398: LD_INT 2
71400: DOUBLE
71401: EQUAL
71402: IFTRUE 71406
71404: GO 71535
71406: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71407: LD_ADDR_VAR 0 5
71411: PUSH
71412: LD_VAR 0 1
71416: PUSH
71417: LD_VAR 0 2
71421: PUSH
71422: LD_INT 3
71424: MINUS
71425: PUSH
71426: LD_INT 3
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: LIST
71433: PUSH
71434: LD_VAR 0 1
71438: PUSH
71439: LD_INT 4
71441: PLUS
71442: PUSH
71443: LD_VAR 0 2
71447: PUSH
71448: LD_INT 4
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: LIST
71455: PUSH
71456: LD_VAR 0 1
71460: PUSH
71461: LD_VAR 0 2
71465: PUSH
71466: LD_INT 4
71468: PLUS
71469: PUSH
71470: LD_INT 0
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: LIST
71477: PUSH
71478: LD_VAR 0 1
71482: PUSH
71483: LD_INT 3
71485: MINUS
71486: PUSH
71487: LD_VAR 0 2
71491: PUSH
71492: LD_INT 1
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: LIST
71499: PUSH
71500: LD_VAR 0 1
71504: PUSH
71505: LD_INT 4
71507: MINUS
71508: PUSH
71509: LD_VAR 0 2
71513: PUSH
71514: LD_INT 4
71516: MINUS
71517: PUSH
71518: LD_INT 2
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: LIST
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: ST_TO_ADDR
// end ; 3 :
71533: GO 71955
71535: LD_INT 3
71537: DOUBLE
71538: EQUAL
71539: IFTRUE 71543
71541: GO 71676
71543: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71544: LD_ADDR_VAR 0 5
71548: PUSH
71549: LD_VAR 0 1
71553: PUSH
71554: LD_INT 3
71556: PLUS
71557: PUSH
71558: LD_VAR 0 2
71562: PUSH
71563: LD_INT 4
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: LIST
71570: PUSH
71571: LD_VAR 0 1
71575: PUSH
71576: LD_INT 4
71578: PLUS
71579: PUSH
71580: LD_VAR 0 2
71584: PUSH
71585: LD_INT 4
71587: PLUS
71588: PUSH
71589: LD_INT 5
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: PUSH
71597: LD_VAR 0 1
71601: PUSH
71602: LD_INT 4
71604: MINUS
71605: PUSH
71606: LD_VAR 0 2
71610: PUSH
71611: LD_INT 1
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: LIST
71618: PUSH
71619: LD_VAR 0 1
71623: PUSH
71624: LD_VAR 0 2
71628: PUSH
71629: LD_INT 4
71631: MINUS
71632: PUSH
71633: LD_INT 3
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: LIST
71640: PUSH
71641: LD_VAR 0 1
71645: PUSH
71646: LD_INT 3
71648: MINUS
71649: PUSH
71650: LD_VAR 0 2
71654: PUSH
71655: LD_INT 3
71657: MINUS
71658: PUSH
71659: LD_INT 2
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: LIST
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: ST_TO_ADDR
// end ; 4 :
71674: GO 71955
71676: LD_INT 4
71678: DOUBLE
71679: EQUAL
71680: IFTRUE 71684
71682: GO 71817
71684: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71685: LD_ADDR_VAR 0 5
71689: PUSH
71690: LD_VAR 0 1
71694: PUSH
71695: LD_VAR 0 2
71699: PUSH
71700: LD_INT 4
71702: PLUS
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: LIST
71711: PUSH
71712: LD_VAR 0 1
71716: PUSH
71717: LD_INT 3
71719: PLUS
71720: PUSH
71721: LD_VAR 0 2
71725: PUSH
71726: LD_INT 3
71728: PLUS
71729: PUSH
71730: LD_INT 5
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: LIST
71737: PUSH
71738: LD_VAR 0 1
71742: PUSH
71743: LD_INT 4
71745: PLUS
71746: PUSH
71747: LD_VAR 0 2
71751: PUSH
71752: LD_INT 4
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: LIST
71759: PUSH
71760: LD_VAR 0 1
71764: PUSH
71765: LD_VAR 0 2
71769: PUSH
71770: LD_INT 3
71772: MINUS
71773: PUSH
71774: LD_INT 3
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: LIST
71781: PUSH
71782: LD_VAR 0 1
71786: PUSH
71787: LD_INT 4
71789: MINUS
71790: PUSH
71791: LD_VAR 0 2
71795: PUSH
71796: LD_INT 4
71798: MINUS
71799: PUSH
71800: LD_INT 2
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: LIST
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: ST_TO_ADDR
// end ; 5 :
71815: GO 71955
71817: LD_INT 5
71819: DOUBLE
71820: EQUAL
71821: IFTRUE 71825
71823: GO 71954
71825: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71826: LD_ADDR_VAR 0 5
71830: PUSH
71831: LD_VAR 0 1
71835: PUSH
71836: LD_INT 4
71838: MINUS
71839: PUSH
71840: LD_VAR 0 2
71844: PUSH
71845: LD_INT 1
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: LIST
71852: PUSH
71853: LD_VAR 0 1
71857: PUSH
71858: LD_VAR 0 2
71862: PUSH
71863: LD_INT 4
71865: MINUS
71866: PUSH
71867: LD_INT 3
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: LIST
71874: PUSH
71875: LD_VAR 0 1
71879: PUSH
71880: LD_INT 4
71882: PLUS
71883: PUSH
71884: LD_VAR 0 2
71888: PUSH
71889: LD_INT 4
71891: PLUS
71892: PUSH
71893: LD_INT 5
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: LIST
71900: PUSH
71901: LD_VAR 0 1
71905: PUSH
71906: LD_INT 3
71908: PLUS
71909: PUSH
71910: LD_VAR 0 2
71914: PUSH
71915: LD_INT 4
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: PUSH
71923: LD_VAR 0 1
71927: PUSH
71928: LD_VAR 0 2
71932: PUSH
71933: LD_INT 3
71935: PLUS
71936: PUSH
71937: LD_INT 0
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: LIST
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: ST_TO_ADDR
// end ; end ;
71952: GO 71955
71954: POP
// result := list ;
71955: LD_ADDR_VAR 0 4
71959: PUSH
71960: LD_VAR 0 5
71964: ST_TO_ADDR
// end ;
71965: LD_VAR 0 4
71969: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71970: LD_INT 0
71972: PPUSH
71973: PPUSH
71974: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71975: LD_VAR 0 1
71979: NOT
71980: PUSH
71981: LD_VAR 0 2
71985: PUSH
71986: LD_INT 1
71988: PUSH
71989: LD_INT 2
71991: PUSH
71992: LD_INT 3
71994: PUSH
71995: LD_INT 4
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: IN
72004: NOT
72005: OR
72006: IFFALSE 72010
// exit ;
72008: GO 72102
// tmp := [ ] ;
72010: LD_ADDR_VAR 0 5
72014: PUSH
72015: EMPTY
72016: ST_TO_ADDR
// for i in units do
72017: LD_ADDR_VAR 0 4
72021: PUSH
72022: LD_VAR 0 1
72026: PUSH
72027: FOR_IN
72028: IFFALSE 72071
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72030: LD_ADDR_VAR 0 5
72034: PUSH
72035: LD_VAR 0 5
72039: PPUSH
72040: LD_VAR 0 5
72044: PUSH
72045: LD_INT 1
72047: PLUS
72048: PPUSH
72049: LD_VAR 0 4
72053: PPUSH
72054: LD_VAR 0 2
72058: PPUSH
72059: CALL_OW 259
72063: PPUSH
72064: CALL_OW 2
72068: ST_TO_ADDR
72069: GO 72027
72071: POP
72072: POP
// if not tmp then
72073: LD_VAR 0 5
72077: NOT
72078: IFFALSE 72082
// exit ;
72080: GO 72102
// result := SortListByListDesc ( units , tmp ) ;
72082: LD_ADDR_VAR 0 3
72086: PUSH
72087: LD_VAR 0 1
72091: PPUSH
72092: LD_VAR 0 5
72096: PPUSH
72097: CALL_OW 77
72101: ST_TO_ADDR
// end ;
72102: LD_VAR 0 3
72106: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72107: LD_INT 0
72109: PPUSH
72110: PPUSH
72111: PPUSH
// result := false ;
72112: LD_ADDR_VAR 0 3
72116: PUSH
72117: LD_INT 0
72119: ST_TO_ADDR
// x := GetX ( building ) ;
72120: LD_ADDR_VAR 0 4
72124: PUSH
72125: LD_VAR 0 2
72129: PPUSH
72130: CALL_OW 250
72134: ST_TO_ADDR
// y := GetY ( building ) ;
72135: LD_ADDR_VAR 0 5
72139: PUSH
72140: LD_VAR 0 2
72144: PPUSH
72145: CALL_OW 251
72149: ST_TO_ADDR
// if not building or not x or not y then
72150: LD_VAR 0 2
72154: NOT
72155: PUSH
72156: LD_VAR 0 4
72160: NOT
72161: OR
72162: PUSH
72163: LD_VAR 0 5
72167: NOT
72168: OR
72169: IFFALSE 72173
// exit ;
72171: GO 72265
// if GetTaskList ( unit ) then
72173: LD_VAR 0 1
72177: PPUSH
72178: CALL_OW 437
72182: IFFALSE 72265
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72184: LD_STRING e
72186: PUSH
72187: LD_VAR 0 1
72191: PPUSH
72192: CALL_OW 437
72196: PUSH
72197: LD_INT 1
72199: ARRAY
72200: PUSH
72201: LD_INT 1
72203: ARRAY
72204: EQUAL
72205: PUSH
72206: LD_VAR 0 4
72210: PUSH
72211: LD_VAR 0 1
72215: PPUSH
72216: CALL_OW 437
72220: PUSH
72221: LD_INT 1
72223: ARRAY
72224: PUSH
72225: LD_INT 2
72227: ARRAY
72228: EQUAL
72229: AND
72230: PUSH
72231: LD_VAR 0 5
72235: PUSH
72236: LD_VAR 0 1
72240: PPUSH
72241: CALL_OW 437
72245: PUSH
72246: LD_INT 1
72248: ARRAY
72249: PUSH
72250: LD_INT 3
72252: ARRAY
72253: EQUAL
72254: AND
72255: IFFALSE 72265
// result := true end ;
72257: LD_ADDR_VAR 0 3
72261: PUSH
72262: LD_INT 1
72264: ST_TO_ADDR
// end ;
72265: LD_VAR 0 3
72269: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72270: LD_INT 0
72272: PPUSH
// result := false ;
72273: LD_ADDR_VAR 0 4
72277: PUSH
72278: LD_INT 0
72280: ST_TO_ADDR
// if GetTaskList ( unit ) then
72281: LD_VAR 0 1
72285: PPUSH
72286: CALL_OW 437
72290: IFFALSE 72373
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72292: LD_STRING M
72294: PUSH
72295: LD_VAR 0 1
72299: PPUSH
72300: CALL_OW 437
72304: PUSH
72305: LD_INT 1
72307: ARRAY
72308: PUSH
72309: LD_INT 1
72311: ARRAY
72312: EQUAL
72313: PUSH
72314: LD_VAR 0 2
72318: PUSH
72319: LD_VAR 0 1
72323: PPUSH
72324: CALL_OW 437
72328: PUSH
72329: LD_INT 1
72331: ARRAY
72332: PUSH
72333: LD_INT 2
72335: ARRAY
72336: EQUAL
72337: AND
72338: PUSH
72339: LD_VAR 0 3
72343: PUSH
72344: LD_VAR 0 1
72348: PPUSH
72349: CALL_OW 437
72353: PUSH
72354: LD_INT 1
72356: ARRAY
72357: PUSH
72358: LD_INT 3
72360: ARRAY
72361: EQUAL
72362: AND
72363: IFFALSE 72373
// result := true ;
72365: LD_ADDR_VAR 0 4
72369: PUSH
72370: LD_INT 1
72372: ST_TO_ADDR
// end ; end ;
72373: LD_VAR 0 4
72377: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72378: LD_INT 0
72380: PPUSH
72381: PPUSH
72382: PPUSH
72383: PPUSH
// if not unit or not area then
72384: LD_VAR 0 1
72388: NOT
72389: PUSH
72390: LD_VAR 0 2
72394: NOT
72395: OR
72396: IFFALSE 72400
// exit ;
72398: GO 72564
// tmp := AreaToList ( area , i ) ;
72400: LD_ADDR_VAR 0 6
72404: PUSH
72405: LD_VAR 0 2
72409: PPUSH
72410: LD_VAR 0 5
72414: PPUSH
72415: CALL_OW 517
72419: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72420: LD_ADDR_VAR 0 5
72424: PUSH
72425: DOUBLE
72426: LD_INT 1
72428: DEC
72429: ST_TO_ADDR
72430: LD_VAR 0 6
72434: PUSH
72435: LD_INT 1
72437: ARRAY
72438: PUSH
72439: FOR_TO
72440: IFFALSE 72562
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72442: LD_ADDR_VAR 0 7
72446: PUSH
72447: LD_VAR 0 6
72451: PUSH
72452: LD_INT 1
72454: ARRAY
72455: PUSH
72456: LD_VAR 0 5
72460: ARRAY
72461: PUSH
72462: LD_VAR 0 6
72466: PUSH
72467: LD_INT 2
72469: ARRAY
72470: PUSH
72471: LD_VAR 0 5
72475: ARRAY
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72481: LD_VAR 0 7
72485: PUSH
72486: LD_INT 1
72488: ARRAY
72489: PPUSH
72490: LD_VAR 0 7
72494: PUSH
72495: LD_INT 2
72497: ARRAY
72498: PPUSH
72499: CALL_OW 428
72503: PUSH
72504: LD_INT 0
72506: EQUAL
72507: IFFALSE 72560
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72509: LD_VAR 0 1
72513: PPUSH
72514: LD_VAR 0 7
72518: PUSH
72519: LD_INT 1
72521: ARRAY
72522: PPUSH
72523: LD_VAR 0 7
72527: PUSH
72528: LD_INT 2
72530: ARRAY
72531: PPUSH
72532: LD_VAR 0 3
72536: PPUSH
72537: CALL_OW 48
// result := IsPlaced ( unit ) ;
72541: LD_ADDR_VAR 0 4
72545: PUSH
72546: LD_VAR 0 1
72550: PPUSH
72551: CALL_OW 305
72555: ST_TO_ADDR
// exit ;
72556: POP
72557: POP
72558: GO 72564
// end ; end ;
72560: GO 72439
72562: POP
72563: POP
// end ;
72564: LD_VAR 0 4
72568: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72569: LD_INT 0
72571: PPUSH
72572: PPUSH
72573: PPUSH
// if not side or side > 8 then
72574: LD_VAR 0 1
72578: NOT
72579: PUSH
72580: LD_VAR 0 1
72584: PUSH
72585: LD_INT 8
72587: GREATER
72588: OR
72589: IFFALSE 72593
// exit ;
72591: GO 72780
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72593: LD_ADDR_VAR 0 4
72597: PUSH
72598: LD_INT 22
72600: PUSH
72601: LD_VAR 0 1
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 21
72612: PUSH
72613: LD_INT 3
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PPUSH
72624: CALL_OW 69
72628: ST_TO_ADDR
// if not tmp then
72629: LD_VAR 0 4
72633: NOT
72634: IFFALSE 72638
// exit ;
72636: GO 72780
// enable_addtolog := true ;
72638: LD_ADDR_OWVAR 81
72642: PUSH
72643: LD_INT 1
72645: ST_TO_ADDR
// AddToLog ( [ ) ;
72646: LD_STRING [
72648: PPUSH
72649: CALL_OW 561
// for i in tmp do
72653: LD_ADDR_VAR 0 3
72657: PUSH
72658: LD_VAR 0 4
72662: PUSH
72663: FOR_IN
72664: IFFALSE 72771
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72666: LD_STRING [
72668: PUSH
72669: LD_VAR 0 3
72673: PPUSH
72674: CALL_OW 266
72678: STR
72679: PUSH
72680: LD_STRING , 
72682: STR
72683: PUSH
72684: LD_VAR 0 3
72688: PPUSH
72689: CALL_OW 250
72693: STR
72694: PUSH
72695: LD_STRING , 
72697: STR
72698: PUSH
72699: LD_VAR 0 3
72703: PPUSH
72704: CALL_OW 251
72708: STR
72709: PUSH
72710: LD_STRING , 
72712: STR
72713: PUSH
72714: LD_VAR 0 3
72718: PPUSH
72719: CALL_OW 254
72723: STR
72724: PUSH
72725: LD_STRING , 
72727: STR
72728: PUSH
72729: LD_VAR 0 3
72733: PPUSH
72734: LD_INT 1
72736: PPUSH
72737: CALL_OW 268
72741: STR
72742: PUSH
72743: LD_STRING , 
72745: STR
72746: PUSH
72747: LD_VAR 0 3
72751: PPUSH
72752: LD_INT 2
72754: PPUSH
72755: CALL_OW 268
72759: STR
72760: PUSH
72761: LD_STRING ],
72763: STR
72764: PPUSH
72765: CALL_OW 561
// end ;
72769: GO 72663
72771: POP
72772: POP
// AddToLog ( ]; ) ;
72773: LD_STRING ];
72775: PPUSH
72776: CALL_OW 561
// end ;
72780: LD_VAR 0 2
72784: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72785: LD_INT 0
72787: PPUSH
72788: PPUSH
72789: PPUSH
72790: PPUSH
72791: PPUSH
// if not area or not rate or not max then
72792: LD_VAR 0 1
72796: NOT
72797: PUSH
72798: LD_VAR 0 2
72802: NOT
72803: OR
72804: PUSH
72805: LD_VAR 0 4
72809: NOT
72810: OR
72811: IFFALSE 72815
// exit ;
72813: GO 73007
// while 1 do
72815: LD_INT 1
72817: IFFALSE 73007
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72819: LD_ADDR_VAR 0 9
72823: PUSH
72824: LD_VAR 0 1
72828: PPUSH
72829: LD_INT 1
72831: PPUSH
72832: CALL_OW 287
72836: PUSH
72837: LD_INT 10
72839: MUL
72840: ST_TO_ADDR
// r := rate / 10 ;
72841: LD_ADDR_VAR 0 7
72845: PUSH
72846: LD_VAR 0 2
72850: PUSH
72851: LD_INT 10
72853: DIVREAL
72854: ST_TO_ADDR
// time := 1 1$00 ;
72855: LD_ADDR_VAR 0 8
72859: PUSH
72860: LD_INT 2100
72862: ST_TO_ADDR
// if amount < min then
72863: LD_VAR 0 9
72867: PUSH
72868: LD_VAR 0 3
72872: LESS
72873: IFFALSE 72891
// r := r * 2 else
72875: LD_ADDR_VAR 0 7
72879: PUSH
72880: LD_VAR 0 7
72884: PUSH
72885: LD_INT 2
72887: MUL
72888: ST_TO_ADDR
72889: GO 72917
// if amount > max then
72891: LD_VAR 0 9
72895: PUSH
72896: LD_VAR 0 4
72900: GREATER
72901: IFFALSE 72917
// r := r / 2 ;
72903: LD_ADDR_VAR 0 7
72907: PUSH
72908: LD_VAR 0 7
72912: PUSH
72913: LD_INT 2
72915: DIVREAL
72916: ST_TO_ADDR
// time := time / r ;
72917: LD_ADDR_VAR 0 8
72921: PUSH
72922: LD_VAR 0 8
72926: PUSH
72927: LD_VAR 0 7
72931: DIVREAL
72932: ST_TO_ADDR
// if time < 0 then
72933: LD_VAR 0 8
72937: PUSH
72938: LD_INT 0
72940: LESS
72941: IFFALSE 72958
// time := time * - 1 ;
72943: LD_ADDR_VAR 0 8
72947: PUSH
72948: LD_VAR 0 8
72952: PUSH
72953: LD_INT 1
72955: NEG
72956: MUL
72957: ST_TO_ADDR
// wait ( time ) ;
72958: LD_VAR 0 8
72962: PPUSH
72963: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72967: LD_INT 35
72969: PPUSH
72970: LD_INT 875
72972: PPUSH
72973: CALL_OW 12
72977: PPUSH
72978: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72982: LD_INT 1
72984: PPUSH
72985: LD_INT 5
72987: PPUSH
72988: CALL_OW 12
72992: PPUSH
72993: LD_VAR 0 1
72997: PPUSH
72998: LD_INT 1
73000: PPUSH
73001: CALL_OW 55
// end ;
73005: GO 72815
// end ;
73007: LD_VAR 0 5
73011: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73012: LD_INT 0
73014: PPUSH
73015: PPUSH
73016: PPUSH
73017: PPUSH
73018: PPUSH
73019: PPUSH
73020: PPUSH
73021: PPUSH
// if not turrets or not factories then
73022: LD_VAR 0 1
73026: NOT
73027: PUSH
73028: LD_VAR 0 2
73032: NOT
73033: OR
73034: IFFALSE 73038
// exit ;
73036: GO 73345
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73038: LD_ADDR_VAR 0 10
73042: PUSH
73043: LD_INT 5
73045: PUSH
73046: LD_INT 6
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 2
73055: PUSH
73056: LD_INT 4
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 3
73065: PUSH
73066: LD_INT 5
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 24
73080: PUSH
73081: LD_INT 25
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 23
73090: PUSH
73091: LD_INT 27
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 42
73104: PUSH
73105: LD_INT 43
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 44
73114: PUSH
73115: LD_INT 46
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 45
73124: PUSH
73125: LD_INT 47
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: LIST
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: LIST
73141: ST_TO_ADDR
// result := [ ] ;
73142: LD_ADDR_VAR 0 3
73146: PUSH
73147: EMPTY
73148: ST_TO_ADDR
// for i in turrets do
73149: LD_ADDR_VAR 0 4
73153: PUSH
73154: LD_VAR 0 1
73158: PUSH
73159: FOR_IN
73160: IFFALSE 73343
// begin nat := GetNation ( i ) ;
73162: LD_ADDR_VAR 0 7
73166: PUSH
73167: LD_VAR 0 4
73171: PPUSH
73172: CALL_OW 248
73176: ST_TO_ADDR
// weapon := 0 ;
73177: LD_ADDR_VAR 0 8
73181: PUSH
73182: LD_INT 0
73184: ST_TO_ADDR
// if not nat then
73185: LD_VAR 0 7
73189: NOT
73190: IFFALSE 73194
// continue ;
73192: GO 73159
// for j in list [ nat ] do
73194: LD_ADDR_VAR 0 5
73198: PUSH
73199: LD_VAR 0 10
73203: PUSH
73204: LD_VAR 0 7
73208: ARRAY
73209: PUSH
73210: FOR_IN
73211: IFFALSE 73252
// if GetBWeapon ( i ) = j [ 1 ] then
73213: LD_VAR 0 4
73217: PPUSH
73218: CALL_OW 269
73222: PUSH
73223: LD_VAR 0 5
73227: PUSH
73228: LD_INT 1
73230: ARRAY
73231: EQUAL
73232: IFFALSE 73250
// begin weapon := j [ 2 ] ;
73234: LD_ADDR_VAR 0 8
73238: PUSH
73239: LD_VAR 0 5
73243: PUSH
73244: LD_INT 2
73246: ARRAY
73247: ST_TO_ADDR
// break ;
73248: GO 73252
// end ;
73250: GO 73210
73252: POP
73253: POP
// if not weapon then
73254: LD_VAR 0 8
73258: NOT
73259: IFFALSE 73263
// continue ;
73261: GO 73159
// for k in factories do
73263: LD_ADDR_VAR 0 6
73267: PUSH
73268: LD_VAR 0 2
73272: PUSH
73273: FOR_IN
73274: IFFALSE 73339
// begin weapons := AvailableWeaponList ( k ) ;
73276: LD_ADDR_VAR 0 9
73280: PUSH
73281: LD_VAR 0 6
73285: PPUSH
73286: CALL_OW 478
73290: ST_TO_ADDR
// if not weapons then
73291: LD_VAR 0 9
73295: NOT
73296: IFFALSE 73300
// continue ;
73298: GO 73273
// if weapon in weapons then
73300: LD_VAR 0 8
73304: PUSH
73305: LD_VAR 0 9
73309: IN
73310: IFFALSE 73337
// begin result := [ i , weapon ] ;
73312: LD_ADDR_VAR 0 3
73316: PUSH
73317: LD_VAR 0 4
73321: PUSH
73322: LD_VAR 0 8
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: ST_TO_ADDR
// exit ;
73331: POP
73332: POP
73333: POP
73334: POP
73335: GO 73345
// end ; end ;
73337: GO 73273
73339: POP
73340: POP
// end ;
73341: GO 73159
73343: POP
73344: POP
// end ;
73345: LD_VAR 0 3
73349: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73350: LD_INT 0
73352: PPUSH
// if not side or side > 8 then
73353: LD_VAR 0 3
73357: NOT
73358: PUSH
73359: LD_VAR 0 3
73363: PUSH
73364: LD_INT 8
73366: GREATER
73367: OR
73368: IFFALSE 73372
// exit ;
73370: GO 73431
// if not range then
73372: LD_VAR 0 4
73376: NOT
73377: IFFALSE 73388
// range := - 12 ;
73379: LD_ADDR_VAR 0 4
73383: PUSH
73384: LD_INT 12
73386: NEG
73387: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73388: LD_VAR 0 1
73392: PPUSH
73393: LD_VAR 0 2
73397: PPUSH
73398: LD_VAR 0 3
73402: PPUSH
73403: LD_VAR 0 4
73407: PPUSH
73408: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73412: LD_VAR 0 1
73416: PPUSH
73417: LD_VAR 0 2
73421: PPUSH
73422: LD_VAR 0 3
73426: PPUSH
73427: CALL_OW 331
// end ;
73431: LD_VAR 0 5
73435: RET
// export function Video ( mode ) ; begin
73436: LD_INT 0
73438: PPUSH
// ingame_video = mode ;
73439: LD_ADDR_OWVAR 52
73443: PUSH
73444: LD_VAR 0 1
73448: ST_TO_ADDR
// interface_hidden = mode ;
73449: LD_ADDR_OWVAR 54
73453: PUSH
73454: LD_VAR 0 1
73458: ST_TO_ADDR
// end ;
73459: LD_VAR 0 2
73463: RET
// export function Join ( array , element ) ; begin
73464: LD_INT 0
73466: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73467: LD_ADDR_VAR 0 3
73471: PUSH
73472: LD_VAR 0 1
73476: PPUSH
73477: LD_VAR 0 1
73481: PUSH
73482: LD_INT 1
73484: PLUS
73485: PPUSH
73486: LD_VAR 0 2
73490: PPUSH
73491: CALL_OW 1
73495: ST_TO_ADDR
// end ;
73496: LD_VAR 0 3
73500: RET
// export function JoinUnion ( array , element ) ; begin
73501: LD_INT 0
73503: PPUSH
// result := array union element ;
73504: LD_ADDR_VAR 0 3
73508: PUSH
73509: LD_VAR 0 1
73513: PUSH
73514: LD_VAR 0 2
73518: UNION
73519: ST_TO_ADDR
// end ;
73520: LD_VAR 0 3
73524: RET
// export function GetBehemoths ( side ) ; begin
73525: LD_INT 0
73527: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73528: LD_ADDR_VAR 0 2
73532: PUSH
73533: LD_INT 22
73535: PUSH
73536: LD_VAR 0 1
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 31
73547: PUSH
73548: LD_INT 25
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: PPUSH
73559: CALL_OW 69
73563: ST_TO_ADDR
// end ;
73564: LD_VAR 0 2
73568: RET
// export function Shuffle ( array ) ; var i , index ; begin
73569: LD_INT 0
73571: PPUSH
73572: PPUSH
73573: PPUSH
// result := [ ] ;
73574: LD_ADDR_VAR 0 2
73578: PUSH
73579: EMPTY
73580: ST_TO_ADDR
// if not array then
73581: LD_VAR 0 1
73585: NOT
73586: IFFALSE 73590
// exit ;
73588: GO 73689
// Randomize ;
73590: CALL_OW 10
// for i = array downto 1 do
73594: LD_ADDR_VAR 0 3
73598: PUSH
73599: DOUBLE
73600: LD_VAR 0 1
73604: INC
73605: ST_TO_ADDR
73606: LD_INT 1
73608: PUSH
73609: FOR_DOWNTO
73610: IFFALSE 73687
// begin index := rand ( 1 , array ) ;
73612: LD_ADDR_VAR 0 4
73616: PUSH
73617: LD_INT 1
73619: PPUSH
73620: LD_VAR 0 1
73624: PPUSH
73625: CALL_OW 12
73629: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73630: LD_ADDR_VAR 0 2
73634: PUSH
73635: LD_VAR 0 2
73639: PPUSH
73640: LD_VAR 0 2
73644: PUSH
73645: LD_INT 1
73647: PLUS
73648: PPUSH
73649: LD_VAR 0 1
73653: PUSH
73654: LD_VAR 0 4
73658: ARRAY
73659: PPUSH
73660: CALL_OW 2
73664: ST_TO_ADDR
// array := Delete ( array , index ) ;
73665: LD_ADDR_VAR 0 1
73669: PUSH
73670: LD_VAR 0 1
73674: PPUSH
73675: LD_VAR 0 4
73679: PPUSH
73680: CALL_OW 3
73684: ST_TO_ADDR
// end ;
73685: GO 73609
73687: POP
73688: POP
// end ;
73689: LD_VAR 0 2
73693: RET
// export function GetBaseMaterials ( base ) ; begin
73694: LD_INT 0
73696: PPUSH
// result := [ 0 , 0 , 0 ] ;
73697: LD_ADDR_VAR 0 2
73701: PUSH
73702: LD_INT 0
73704: PUSH
73705: LD_INT 0
73707: PUSH
73708: LD_INT 0
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: LIST
73715: ST_TO_ADDR
// if not base then
73716: LD_VAR 0 1
73720: NOT
73721: IFFALSE 73725
// exit ;
73723: GO 73774
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73725: LD_ADDR_VAR 0 2
73729: PUSH
73730: LD_VAR 0 1
73734: PPUSH
73735: LD_INT 1
73737: PPUSH
73738: CALL_OW 275
73742: PUSH
73743: LD_VAR 0 1
73747: PPUSH
73748: LD_INT 2
73750: PPUSH
73751: CALL_OW 275
73755: PUSH
73756: LD_VAR 0 1
73760: PPUSH
73761: LD_INT 3
73763: PPUSH
73764: CALL_OW 275
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: LIST
73773: ST_TO_ADDR
// end ;
73774: LD_VAR 0 2
73778: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73779: LD_INT 0
73781: PPUSH
73782: PPUSH
// result := array ;
73783: LD_ADDR_VAR 0 3
73787: PUSH
73788: LD_VAR 0 1
73792: ST_TO_ADDR
// if size > 0 then
73793: LD_VAR 0 2
73797: PUSH
73798: LD_INT 0
73800: GREATER
73801: IFFALSE 73847
// for i := array downto size do
73803: LD_ADDR_VAR 0 4
73807: PUSH
73808: DOUBLE
73809: LD_VAR 0 1
73813: INC
73814: ST_TO_ADDR
73815: LD_VAR 0 2
73819: PUSH
73820: FOR_DOWNTO
73821: IFFALSE 73845
// result := Delete ( result , result ) ;
73823: LD_ADDR_VAR 0 3
73827: PUSH
73828: LD_VAR 0 3
73832: PPUSH
73833: LD_VAR 0 3
73837: PPUSH
73838: CALL_OW 3
73842: ST_TO_ADDR
73843: GO 73820
73845: POP
73846: POP
// end ;
73847: LD_VAR 0 3
73851: RET
// export function ComExit ( unit ) ; var tmp ; begin
73852: LD_INT 0
73854: PPUSH
73855: PPUSH
// if not IsInUnit ( unit ) then
73856: LD_VAR 0 1
73860: PPUSH
73861: CALL_OW 310
73865: NOT
73866: IFFALSE 73870
// exit ;
73868: GO 73930
// tmp := IsInUnit ( unit ) ;
73870: LD_ADDR_VAR 0 3
73874: PUSH
73875: LD_VAR 0 1
73879: PPUSH
73880: CALL_OW 310
73884: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73885: LD_VAR 0 3
73889: PPUSH
73890: CALL_OW 247
73894: PUSH
73895: LD_INT 2
73897: EQUAL
73898: IFFALSE 73911
// ComExitVehicle ( unit ) else
73900: LD_VAR 0 1
73904: PPUSH
73905: CALL_OW 121
73909: GO 73920
// ComExitBuilding ( unit ) ;
73911: LD_VAR 0 1
73915: PPUSH
73916: CALL_OW 122
// result := tmp ;
73920: LD_ADDR_VAR 0 2
73924: PUSH
73925: LD_VAR 0 3
73929: ST_TO_ADDR
// end ;
73930: LD_VAR 0 2
73934: RET
// export function ComExitAll ( units ) ; var i ; begin
73935: LD_INT 0
73937: PPUSH
73938: PPUSH
// if not units then
73939: LD_VAR 0 1
73943: NOT
73944: IFFALSE 73948
// exit ;
73946: GO 73974
// for i in units do
73948: LD_ADDR_VAR 0 3
73952: PUSH
73953: LD_VAR 0 1
73957: PUSH
73958: FOR_IN
73959: IFFALSE 73972
// ComExit ( i ) ;
73961: LD_VAR 0 3
73965: PPUSH
73966: CALL 73852 0 1
73970: GO 73958
73972: POP
73973: POP
// end ;
73974: LD_VAR 0 2
73978: RET
// export function ResetHc ; begin
73979: LD_INT 0
73981: PPUSH
// InitHc ;
73982: CALL_OW 19
// hc_importance := 0 ;
73986: LD_ADDR_OWVAR 32
73990: PUSH
73991: LD_INT 0
73993: ST_TO_ADDR
// end ;
73994: LD_VAR 0 1
73998: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73999: LD_INT 0
74001: PPUSH
74002: PPUSH
74003: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74004: LD_ADDR_VAR 0 6
74008: PUSH
74009: LD_VAR 0 1
74013: PUSH
74014: LD_VAR 0 3
74018: PLUS
74019: PUSH
74020: LD_INT 2
74022: DIV
74023: ST_TO_ADDR
// if _x < 0 then
74024: LD_VAR 0 6
74028: PUSH
74029: LD_INT 0
74031: LESS
74032: IFFALSE 74049
// _x := _x * - 1 ;
74034: LD_ADDR_VAR 0 6
74038: PUSH
74039: LD_VAR 0 6
74043: PUSH
74044: LD_INT 1
74046: NEG
74047: MUL
74048: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74049: LD_ADDR_VAR 0 7
74053: PUSH
74054: LD_VAR 0 2
74058: PUSH
74059: LD_VAR 0 4
74063: PLUS
74064: PUSH
74065: LD_INT 2
74067: DIV
74068: ST_TO_ADDR
// if _y < 0 then
74069: LD_VAR 0 7
74073: PUSH
74074: LD_INT 0
74076: LESS
74077: IFFALSE 74094
// _y := _y * - 1 ;
74079: LD_ADDR_VAR 0 7
74083: PUSH
74084: LD_VAR 0 7
74088: PUSH
74089: LD_INT 1
74091: NEG
74092: MUL
74093: ST_TO_ADDR
// result := [ _x , _y ] ;
74094: LD_ADDR_VAR 0 5
74098: PUSH
74099: LD_VAR 0 6
74103: PUSH
74104: LD_VAR 0 7
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: ST_TO_ADDR
// end ;
74113: LD_VAR 0 5
74117: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74118: LD_INT 0
74120: PPUSH
74121: PPUSH
74122: PPUSH
74123: PPUSH
// task := GetTaskList ( unit ) ;
74124: LD_ADDR_VAR 0 7
74128: PUSH
74129: LD_VAR 0 1
74133: PPUSH
74134: CALL_OW 437
74138: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74139: LD_VAR 0 7
74143: NOT
74144: PUSH
74145: LD_VAR 0 1
74149: PPUSH
74150: LD_VAR 0 2
74154: PPUSH
74155: CALL_OW 308
74159: NOT
74160: AND
74161: IFFALSE 74165
// exit ;
74163: GO 74283
// if IsInArea ( unit , area ) then
74165: LD_VAR 0 1
74169: PPUSH
74170: LD_VAR 0 2
74174: PPUSH
74175: CALL_OW 308
74179: IFFALSE 74197
// begin ComMoveToArea ( unit , goAway ) ;
74181: LD_VAR 0 1
74185: PPUSH
74186: LD_VAR 0 3
74190: PPUSH
74191: CALL_OW 113
// exit ;
74195: GO 74283
// end ; if task [ 1 ] [ 1 ] <> M then
74197: LD_VAR 0 7
74201: PUSH
74202: LD_INT 1
74204: ARRAY
74205: PUSH
74206: LD_INT 1
74208: ARRAY
74209: PUSH
74210: LD_STRING M
74212: NONEQUAL
74213: IFFALSE 74217
// exit ;
74215: GO 74283
// x := task [ 1 ] [ 2 ] ;
74217: LD_ADDR_VAR 0 5
74221: PUSH
74222: LD_VAR 0 7
74226: PUSH
74227: LD_INT 1
74229: ARRAY
74230: PUSH
74231: LD_INT 2
74233: ARRAY
74234: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74235: LD_ADDR_VAR 0 6
74239: PUSH
74240: LD_VAR 0 7
74244: PUSH
74245: LD_INT 1
74247: ARRAY
74248: PUSH
74249: LD_INT 3
74251: ARRAY
74252: ST_TO_ADDR
// if InArea ( x , y , area ) then
74253: LD_VAR 0 5
74257: PPUSH
74258: LD_VAR 0 6
74262: PPUSH
74263: LD_VAR 0 2
74267: PPUSH
74268: CALL_OW 309
74272: IFFALSE 74283
// ComStop ( unit ) ;
74274: LD_VAR 0 1
74278: PPUSH
74279: CALL_OW 141
// end ;
74283: LD_VAR 0 4
74287: RET
// export function Abs ( value ) ; begin
74288: LD_INT 0
74290: PPUSH
// result := value ;
74291: LD_ADDR_VAR 0 2
74295: PUSH
74296: LD_VAR 0 1
74300: ST_TO_ADDR
// if value < 0 then
74301: LD_VAR 0 1
74305: PUSH
74306: LD_INT 0
74308: LESS
74309: IFFALSE 74326
// result := value * - 1 ;
74311: LD_ADDR_VAR 0 2
74315: PUSH
74316: LD_VAR 0 1
74320: PUSH
74321: LD_INT 1
74323: NEG
74324: MUL
74325: ST_TO_ADDR
// end ;
74326: LD_VAR 0 2
74330: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74331: LD_INT 0
74333: PPUSH
74334: PPUSH
74335: PPUSH
74336: PPUSH
74337: PPUSH
74338: PPUSH
74339: PPUSH
74340: PPUSH
// if not unit or not building then
74341: LD_VAR 0 1
74345: NOT
74346: PUSH
74347: LD_VAR 0 2
74351: NOT
74352: OR
74353: IFFALSE 74357
// exit ;
74355: GO 74583
// x := GetX ( building ) ;
74357: LD_ADDR_VAR 0 4
74361: PUSH
74362: LD_VAR 0 2
74366: PPUSH
74367: CALL_OW 250
74371: ST_TO_ADDR
// y := GetY ( building ) ;
74372: LD_ADDR_VAR 0 6
74376: PUSH
74377: LD_VAR 0 2
74381: PPUSH
74382: CALL_OW 251
74386: ST_TO_ADDR
// d := GetDir ( building ) ;
74387: LD_ADDR_VAR 0 8
74391: PUSH
74392: LD_VAR 0 2
74396: PPUSH
74397: CALL_OW 254
74401: ST_TO_ADDR
// r := 4 ;
74402: LD_ADDR_VAR 0 9
74406: PUSH
74407: LD_INT 4
74409: ST_TO_ADDR
// for i := 1 to 5 do
74410: LD_ADDR_VAR 0 10
74414: PUSH
74415: DOUBLE
74416: LD_INT 1
74418: DEC
74419: ST_TO_ADDR
74420: LD_INT 5
74422: PUSH
74423: FOR_TO
74424: IFFALSE 74581
// begin _x := ShiftX ( x , d , r + i ) ;
74426: LD_ADDR_VAR 0 5
74430: PUSH
74431: LD_VAR 0 4
74435: PPUSH
74436: LD_VAR 0 8
74440: PPUSH
74441: LD_VAR 0 9
74445: PUSH
74446: LD_VAR 0 10
74450: PLUS
74451: PPUSH
74452: CALL_OW 272
74456: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74457: LD_ADDR_VAR 0 7
74461: PUSH
74462: LD_VAR 0 6
74466: PPUSH
74467: LD_VAR 0 8
74471: PPUSH
74472: LD_VAR 0 9
74476: PUSH
74477: LD_VAR 0 10
74481: PLUS
74482: PPUSH
74483: CALL_OW 273
74487: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74488: LD_VAR 0 5
74492: PPUSH
74493: LD_VAR 0 7
74497: PPUSH
74498: CALL_OW 488
74502: PUSH
74503: LD_VAR 0 5
74507: PPUSH
74508: LD_VAR 0 7
74512: PPUSH
74513: CALL_OW 428
74517: PPUSH
74518: CALL_OW 247
74522: PUSH
74523: LD_INT 3
74525: PUSH
74526: LD_INT 2
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: IN
74533: NOT
74534: AND
74535: IFFALSE 74579
// begin ComMoveXY ( unit , _x , _y ) ;
74537: LD_VAR 0 1
74541: PPUSH
74542: LD_VAR 0 5
74546: PPUSH
74547: LD_VAR 0 7
74551: PPUSH
74552: CALL_OW 111
// result := [ _x , _y ] ;
74556: LD_ADDR_VAR 0 3
74560: PUSH
74561: LD_VAR 0 5
74565: PUSH
74566: LD_VAR 0 7
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: ST_TO_ADDR
// exit ;
74575: POP
74576: POP
74577: GO 74583
// end ; end ;
74579: GO 74423
74581: POP
74582: POP
// end ;
74583: LD_VAR 0 3
74587: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74588: LD_INT 0
74590: PPUSH
74591: PPUSH
74592: PPUSH
// result := 0 ;
74593: LD_ADDR_VAR 0 3
74597: PUSH
74598: LD_INT 0
74600: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74601: LD_VAR 0 1
74605: PUSH
74606: LD_INT 0
74608: LESS
74609: PUSH
74610: LD_VAR 0 1
74614: PUSH
74615: LD_INT 8
74617: GREATER
74618: OR
74619: PUSH
74620: LD_VAR 0 2
74624: PUSH
74625: LD_INT 0
74627: LESS
74628: OR
74629: PUSH
74630: LD_VAR 0 2
74634: PUSH
74635: LD_INT 8
74637: GREATER
74638: OR
74639: IFFALSE 74643
// exit ;
74641: GO 74718
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74643: LD_ADDR_VAR 0 4
74647: PUSH
74648: LD_INT 22
74650: PUSH
74651: LD_VAR 0 2
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: PPUSH
74660: CALL_OW 69
74664: PUSH
74665: FOR_IN
74666: IFFALSE 74716
// begin un := UnitShoot ( i ) ;
74668: LD_ADDR_VAR 0 5
74672: PUSH
74673: LD_VAR 0 4
74677: PPUSH
74678: CALL_OW 504
74682: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74683: LD_VAR 0 5
74687: PPUSH
74688: CALL_OW 255
74692: PUSH
74693: LD_VAR 0 1
74697: EQUAL
74698: IFFALSE 74714
// begin result := un ;
74700: LD_ADDR_VAR 0 3
74704: PUSH
74705: LD_VAR 0 5
74709: ST_TO_ADDR
// exit ;
74710: POP
74711: POP
74712: GO 74718
// end ; end ;
74714: GO 74665
74716: POP
74717: POP
// end ;
74718: LD_VAR 0 3
74722: RET
// export function GetCargoBay ( units ) ; begin
74723: LD_INT 0
74725: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74726: LD_ADDR_VAR 0 2
74730: PUSH
74731: LD_VAR 0 1
74735: PPUSH
74736: LD_INT 2
74738: PUSH
74739: LD_INT 34
74741: PUSH
74742: LD_INT 12
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_INT 34
74751: PUSH
74752: LD_INT 51
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 34
74761: PUSH
74762: LD_INT 32
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 34
74771: PUSH
74772: LD_EXP 137
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: PPUSH
74788: CALL_OW 72
74792: ST_TO_ADDR
// end ;
74793: LD_VAR 0 2
74797: RET
// export function Negate ( value ) ; begin
74798: LD_INT 0
74800: PPUSH
// result := not value ;
74801: LD_ADDR_VAR 0 2
74805: PUSH
74806: LD_VAR 0 1
74810: NOT
74811: ST_TO_ADDR
// end ;
74812: LD_VAR 0 2
74816: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74817: LD_INT 0
74819: PPUSH
// if x1 = x2 then
74820: LD_VAR 0 1
74824: PUSH
74825: LD_VAR 0 3
74829: EQUAL
74830: IFFALSE 74864
// begin if y1 > y2 then
74832: LD_VAR 0 2
74836: PUSH
74837: LD_VAR 0 4
74841: GREATER
74842: IFFALSE 74854
// result := 0 else
74844: LD_ADDR_VAR 0 5
74848: PUSH
74849: LD_INT 0
74851: ST_TO_ADDR
74852: GO 74862
// result := 3 ;
74854: LD_ADDR_VAR 0 5
74858: PUSH
74859: LD_INT 3
74861: ST_TO_ADDR
// exit ;
74862: GO 74950
// end ; if y1 = y2 then
74864: LD_VAR 0 2
74868: PUSH
74869: LD_VAR 0 4
74873: EQUAL
74874: IFFALSE 74908
// begin if x1 > x2 then
74876: LD_VAR 0 1
74880: PUSH
74881: LD_VAR 0 3
74885: GREATER
74886: IFFALSE 74898
// result := 1 else
74888: LD_ADDR_VAR 0 5
74892: PUSH
74893: LD_INT 1
74895: ST_TO_ADDR
74896: GO 74906
// result := 4 ;
74898: LD_ADDR_VAR 0 5
74902: PUSH
74903: LD_INT 4
74905: ST_TO_ADDR
// exit ;
74906: GO 74950
// end ; if x1 > x2 and y1 > y2 then
74908: LD_VAR 0 1
74912: PUSH
74913: LD_VAR 0 3
74917: GREATER
74918: PUSH
74919: LD_VAR 0 2
74923: PUSH
74924: LD_VAR 0 4
74928: GREATER
74929: AND
74930: IFFALSE 74942
// result := 2 else
74932: LD_ADDR_VAR 0 5
74936: PUSH
74937: LD_INT 2
74939: ST_TO_ADDR
74940: GO 74950
// result := 5 ;
74942: LD_ADDR_VAR 0 5
74946: PUSH
74947: LD_INT 5
74949: ST_TO_ADDR
// end ;
74950: LD_VAR 0 5
74954: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74955: LD_INT 0
74957: PPUSH
74958: PPUSH
// if not driver or not IsInUnit ( driver ) then
74959: LD_VAR 0 1
74963: NOT
74964: PUSH
74965: LD_VAR 0 1
74969: PPUSH
74970: CALL_OW 310
74974: NOT
74975: OR
74976: IFFALSE 74980
// exit ;
74978: GO 75070
// vehicle := IsInUnit ( driver ) ;
74980: LD_ADDR_VAR 0 3
74984: PUSH
74985: LD_VAR 0 1
74989: PPUSH
74990: CALL_OW 310
74994: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74995: LD_VAR 0 1
74999: PPUSH
75000: LD_STRING \
75002: PUSH
75003: LD_INT 0
75005: PUSH
75006: LD_INT 0
75008: PUSH
75009: LD_INT 0
75011: PUSH
75012: LD_INT 0
75014: PUSH
75015: LD_INT 0
75017: PUSH
75018: LD_INT 0
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: PUSH
75030: LD_STRING E
75032: PUSH
75033: LD_INT 0
75035: PUSH
75036: LD_INT 0
75038: PUSH
75039: LD_VAR 0 3
75043: PUSH
75044: LD_INT 0
75046: PUSH
75047: LD_INT 0
75049: PUSH
75050: LD_INT 0
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: LIST
75059: LIST
75060: LIST
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PPUSH
75066: CALL_OW 446
// end ;
75070: LD_VAR 0 2
75074: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75075: LD_INT 0
75077: PPUSH
75078: PPUSH
// if not driver or not IsInUnit ( driver ) then
75079: LD_VAR 0 1
75083: NOT
75084: PUSH
75085: LD_VAR 0 1
75089: PPUSH
75090: CALL_OW 310
75094: NOT
75095: OR
75096: IFFALSE 75100
// exit ;
75098: GO 75190
// vehicle := IsInUnit ( driver ) ;
75100: LD_ADDR_VAR 0 3
75104: PUSH
75105: LD_VAR 0 1
75109: PPUSH
75110: CALL_OW 310
75114: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75115: LD_VAR 0 1
75119: PPUSH
75120: LD_STRING \
75122: PUSH
75123: LD_INT 0
75125: PUSH
75126: LD_INT 0
75128: PUSH
75129: LD_INT 0
75131: PUSH
75132: LD_INT 0
75134: PUSH
75135: LD_INT 0
75137: PUSH
75138: LD_INT 0
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: PUSH
75150: LD_STRING E
75152: PUSH
75153: LD_INT 0
75155: PUSH
75156: LD_INT 0
75158: PUSH
75159: LD_VAR 0 3
75163: PUSH
75164: LD_INT 0
75166: PUSH
75167: LD_INT 0
75169: PUSH
75170: LD_INT 0
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: PPUSH
75186: CALL_OW 447
// end ;
75190: LD_VAR 0 2
75194: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75195: LD_INT 0
75197: PPUSH
75198: PPUSH
75199: PPUSH
// tmp := [ ] ;
75200: LD_ADDR_VAR 0 5
75204: PUSH
75205: EMPTY
75206: ST_TO_ADDR
// for i in units do
75207: LD_ADDR_VAR 0 4
75211: PUSH
75212: LD_VAR 0 1
75216: PUSH
75217: FOR_IN
75218: IFFALSE 75256
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75220: LD_ADDR_VAR 0 5
75224: PUSH
75225: LD_VAR 0 5
75229: PPUSH
75230: LD_VAR 0 5
75234: PUSH
75235: LD_INT 1
75237: PLUS
75238: PPUSH
75239: LD_VAR 0 4
75243: PPUSH
75244: CALL_OW 256
75248: PPUSH
75249: CALL_OW 2
75253: ST_TO_ADDR
75254: GO 75217
75256: POP
75257: POP
// if not tmp then
75258: LD_VAR 0 5
75262: NOT
75263: IFFALSE 75267
// exit ;
75265: GO 75315
// if asc then
75267: LD_VAR 0 2
75271: IFFALSE 75295
// result := SortListByListAsc ( units , tmp ) else
75273: LD_ADDR_VAR 0 3
75277: PUSH
75278: LD_VAR 0 1
75282: PPUSH
75283: LD_VAR 0 5
75287: PPUSH
75288: CALL_OW 76
75292: ST_TO_ADDR
75293: GO 75315
// result := SortListByListDesc ( units , tmp ) ;
75295: LD_ADDR_VAR 0 3
75299: PUSH
75300: LD_VAR 0 1
75304: PPUSH
75305: LD_VAR 0 5
75309: PPUSH
75310: CALL_OW 77
75314: ST_TO_ADDR
// end ;
75315: LD_VAR 0 3
75319: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75320: LD_INT 0
75322: PPUSH
75323: PPUSH
// task := GetTaskList ( mech ) ;
75324: LD_ADDR_VAR 0 4
75328: PUSH
75329: LD_VAR 0 1
75333: PPUSH
75334: CALL_OW 437
75338: ST_TO_ADDR
// if not task then
75339: LD_VAR 0 4
75343: NOT
75344: IFFALSE 75348
// exit ;
75346: GO 75390
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75348: LD_ADDR_VAR 0 3
75352: PUSH
75353: LD_VAR 0 4
75357: PUSH
75358: LD_INT 1
75360: ARRAY
75361: PUSH
75362: LD_INT 1
75364: ARRAY
75365: PUSH
75366: LD_STRING r
75368: EQUAL
75369: PUSH
75370: LD_VAR 0 4
75374: PUSH
75375: LD_INT 1
75377: ARRAY
75378: PUSH
75379: LD_INT 4
75381: ARRAY
75382: PUSH
75383: LD_VAR 0 2
75387: EQUAL
75388: AND
75389: ST_TO_ADDR
// end ;
75390: LD_VAR 0 3
75394: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75395: LD_INT 0
75397: PPUSH
// SetDir ( unit , d ) ;
75398: LD_VAR 0 1
75402: PPUSH
75403: LD_VAR 0 4
75407: PPUSH
75408: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75412: LD_VAR 0 1
75416: PPUSH
75417: LD_VAR 0 2
75421: PPUSH
75422: LD_VAR 0 3
75426: PPUSH
75427: LD_VAR 0 5
75431: PPUSH
75432: CALL_OW 48
// end ;
75436: LD_VAR 0 6
75440: RET
// export function ToNaturalNumber ( number ) ; begin
75441: LD_INT 0
75443: PPUSH
// result := number div 1 ;
75444: LD_ADDR_VAR 0 2
75448: PUSH
75449: LD_VAR 0 1
75453: PUSH
75454: LD_INT 1
75456: DIV
75457: ST_TO_ADDR
// if number < 0 then
75458: LD_VAR 0 1
75462: PUSH
75463: LD_INT 0
75465: LESS
75466: IFFALSE 75476
// result := 0 ;
75468: LD_ADDR_VAR 0 2
75472: PUSH
75473: LD_INT 0
75475: ST_TO_ADDR
// end ;
75476: LD_VAR 0 2
75480: RET
// export function SortByClass ( units , class ) ; var un ; begin
75481: LD_INT 0
75483: PPUSH
75484: PPUSH
// if not units or not class then
75485: LD_VAR 0 1
75489: NOT
75490: PUSH
75491: LD_VAR 0 2
75495: NOT
75496: OR
75497: IFFALSE 75501
// exit ;
75499: GO 75596
// result := [ ] ;
75501: LD_ADDR_VAR 0 3
75505: PUSH
75506: EMPTY
75507: ST_TO_ADDR
// for un in units do
75508: LD_ADDR_VAR 0 4
75512: PUSH
75513: LD_VAR 0 1
75517: PUSH
75518: FOR_IN
75519: IFFALSE 75594
// if GetClass ( un ) = class then
75521: LD_VAR 0 4
75525: PPUSH
75526: CALL_OW 257
75530: PUSH
75531: LD_VAR 0 2
75535: EQUAL
75536: IFFALSE 75563
// result := Insert ( result , 1 , un ) else
75538: LD_ADDR_VAR 0 3
75542: PUSH
75543: LD_VAR 0 3
75547: PPUSH
75548: LD_INT 1
75550: PPUSH
75551: LD_VAR 0 4
75555: PPUSH
75556: CALL_OW 2
75560: ST_TO_ADDR
75561: GO 75592
// result := Replace ( result , result + 1 , un ) ;
75563: LD_ADDR_VAR 0 3
75567: PUSH
75568: LD_VAR 0 3
75572: PPUSH
75573: LD_VAR 0 3
75577: PUSH
75578: LD_INT 1
75580: PLUS
75581: PPUSH
75582: LD_VAR 0 4
75586: PPUSH
75587: CALL_OW 1
75591: ST_TO_ADDR
75592: GO 75518
75594: POP
75595: POP
// end ;
75596: LD_VAR 0 3
75600: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75601: LD_INT 0
75603: PPUSH
75604: PPUSH
75605: PPUSH
75606: PPUSH
75607: PPUSH
75608: PPUSH
75609: PPUSH
// result := [ ] ;
75610: LD_ADDR_VAR 0 4
75614: PUSH
75615: EMPTY
75616: ST_TO_ADDR
// if x - r < 0 then
75617: LD_VAR 0 1
75621: PUSH
75622: LD_VAR 0 3
75626: MINUS
75627: PUSH
75628: LD_INT 0
75630: LESS
75631: IFFALSE 75643
// min_x := 0 else
75633: LD_ADDR_VAR 0 8
75637: PUSH
75638: LD_INT 0
75640: ST_TO_ADDR
75641: GO 75659
// min_x := x - r ;
75643: LD_ADDR_VAR 0 8
75647: PUSH
75648: LD_VAR 0 1
75652: PUSH
75653: LD_VAR 0 3
75657: MINUS
75658: ST_TO_ADDR
// if y - r < 0 then
75659: LD_VAR 0 2
75663: PUSH
75664: LD_VAR 0 3
75668: MINUS
75669: PUSH
75670: LD_INT 0
75672: LESS
75673: IFFALSE 75685
// min_y := 0 else
75675: LD_ADDR_VAR 0 7
75679: PUSH
75680: LD_INT 0
75682: ST_TO_ADDR
75683: GO 75701
// min_y := y - r ;
75685: LD_ADDR_VAR 0 7
75689: PUSH
75690: LD_VAR 0 2
75694: PUSH
75695: LD_VAR 0 3
75699: MINUS
75700: ST_TO_ADDR
// max_x := x + r ;
75701: LD_ADDR_VAR 0 9
75705: PUSH
75706: LD_VAR 0 1
75710: PUSH
75711: LD_VAR 0 3
75715: PLUS
75716: ST_TO_ADDR
// max_y := y + r ;
75717: LD_ADDR_VAR 0 10
75721: PUSH
75722: LD_VAR 0 2
75726: PUSH
75727: LD_VAR 0 3
75731: PLUS
75732: ST_TO_ADDR
// for _x = min_x to max_x do
75733: LD_ADDR_VAR 0 5
75737: PUSH
75738: DOUBLE
75739: LD_VAR 0 8
75743: DEC
75744: ST_TO_ADDR
75745: LD_VAR 0 9
75749: PUSH
75750: FOR_TO
75751: IFFALSE 75852
// for _y = min_y to max_y do
75753: LD_ADDR_VAR 0 6
75757: PUSH
75758: DOUBLE
75759: LD_VAR 0 7
75763: DEC
75764: ST_TO_ADDR
75765: LD_VAR 0 10
75769: PUSH
75770: FOR_TO
75771: IFFALSE 75848
// begin if not ValidHex ( _x , _y ) then
75773: LD_VAR 0 5
75777: PPUSH
75778: LD_VAR 0 6
75782: PPUSH
75783: CALL_OW 488
75787: NOT
75788: IFFALSE 75792
// continue ;
75790: GO 75770
// if GetResourceTypeXY ( _x , _y ) then
75792: LD_VAR 0 5
75796: PPUSH
75797: LD_VAR 0 6
75801: PPUSH
75802: CALL_OW 283
75806: IFFALSE 75846
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75808: LD_ADDR_VAR 0 4
75812: PUSH
75813: LD_VAR 0 4
75817: PPUSH
75818: LD_VAR 0 4
75822: PUSH
75823: LD_INT 1
75825: PLUS
75826: PPUSH
75827: LD_VAR 0 5
75831: PUSH
75832: LD_VAR 0 6
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PPUSH
75841: CALL_OW 1
75845: ST_TO_ADDR
// end ;
75846: GO 75770
75848: POP
75849: POP
75850: GO 75750
75852: POP
75853: POP
// end ;
75854: LD_VAR 0 4
75858: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
75859: LD_INT 0
75861: PPUSH
75862: PPUSH
75863: PPUSH
75864: PPUSH
75865: PPUSH
75866: PPUSH
// if not units then
75867: LD_VAR 0 1
75871: NOT
75872: IFFALSE 75876
// exit ;
75874: GO 76277
// result := UnitFilter ( units , [ f_ok ] ) ;
75876: LD_ADDR_VAR 0 3
75880: PUSH
75881: LD_VAR 0 1
75885: PPUSH
75886: LD_INT 50
75888: PUSH
75889: EMPTY
75890: LIST
75891: PPUSH
75892: CALL_OW 72
75896: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75897: LD_ADDR_VAR 0 7
75901: PUSH
75902: LD_VAR 0 1
75906: PUSH
75907: LD_INT 1
75909: ARRAY
75910: PPUSH
75911: CALL_OW 255
75915: ST_TO_ADDR
// if not result then
75916: LD_VAR 0 3
75920: NOT
75921: IFFALSE 75925
// exit ;
75923: GO 76277
// for i in result do
75925: LD_ADDR_VAR 0 4
75929: PUSH
75930: LD_VAR 0 3
75934: PUSH
75935: FOR_IN
75936: IFFALSE 76275
// begin tag := GetTag ( i ) + 1 ;
75938: LD_ADDR_VAR 0 8
75942: PUSH
75943: LD_VAR 0 4
75947: PPUSH
75948: CALL_OW 110
75952: PUSH
75953: LD_INT 1
75955: PLUS
75956: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75957: LD_ADDR_VAR 0 6
75961: PUSH
75962: LD_VAR 0 4
75966: PPUSH
75967: CALL_OW 250
75971: PPUSH
75972: LD_VAR 0 4
75976: PPUSH
75977: CALL_OW 251
75981: PPUSH
75982: LD_INT 6
75984: PPUSH
75985: CALL 75601 0 3
75989: ST_TO_ADDR
// if cr then
75990: LD_VAR 0 6
75994: IFFALSE 76033
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75996: LD_VAR 0 4
76000: PPUSH
76001: LD_VAR 0 6
76005: PUSH
76006: LD_INT 1
76008: ARRAY
76009: PUSH
76010: LD_INT 1
76012: ARRAY
76013: PPUSH
76014: LD_VAR 0 6
76018: PUSH
76019: LD_INT 1
76021: ARRAY
76022: PUSH
76023: LD_INT 2
76025: ARRAY
76026: PPUSH
76027: CALL_OW 116
76031: GO 76273
// if path > tag then
76033: LD_VAR 0 2
76037: PUSH
76038: LD_VAR 0 8
76042: GREATER
76043: IFFALSE 76221
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76045: LD_ADDR_VAR 0 5
76049: PUSH
76050: LD_INT 81
76052: PUSH
76053: LD_VAR 0 7
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PUSH
76062: LD_INT 91
76064: PUSH
76065: LD_VAR 0 4
76069: PUSH
76070: LD_INT 12
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: LIST
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: PPUSH
76082: CALL_OW 69
76086: ST_TO_ADDR
// if enemy then
76087: LD_VAR 0 5
76091: IFFALSE 76119
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76093: LD_VAR 0 4
76097: PPUSH
76098: LD_VAR 0 5
76102: PPUSH
76103: LD_VAR 0 4
76107: PPUSH
76108: CALL_OW 74
76112: PPUSH
76113: CALL_OW 115
76117: GO 76219
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76119: LD_VAR 0 4
76123: PPUSH
76124: LD_VAR 0 2
76128: PUSH
76129: LD_VAR 0 8
76133: ARRAY
76134: PUSH
76135: LD_INT 1
76137: ARRAY
76138: PPUSH
76139: LD_VAR 0 2
76143: PUSH
76144: LD_VAR 0 8
76148: ARRAY
76149: PUSH
76150: LD_INT 2
76152: ARRAY
76153: PPUSH
76154: CALL_OW 297
76158: PUSH
76159: LD_INT 6
76161: GREATER
76162: IFFALSE 76205
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76164: LD_VAR 0 4
76168: PPUSH
76169: LD_VAR 0 2
76173: PUSH
76174: LD_VAR 0 8
76178: ARRAY
76179: PUSH
76180: LD_INT 1
76182: ARRAY
76183: PPUSH
76184: LD_VAR 0 2
76188: PUSH
76189: LD_VAR 0 8
76193: ARRAY
76194: PUSH
76195: LD_INT 2
76197: ARRAY
76198: PPUSH
76199: CALL_OW 114
76203: GO 76219
// SetTag ( i , tag ) ;
76205: LD_VAR 0 4
76209: PPUSH
76210: LD_VAR 0 8
76214: PPUSH
76215: CALL_OW 109
// end else
76219: GO 76273
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76221: LD_ADDR_VAR 0 5
76225: PUSH
76226: LD_INT 81
76228: PUSH
76229: LD_VAR 0 7
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PPUSH
76238: CALL_OW 69
76242: ST_TO_ADDR
// if enemy then
76243: LD_VAR 0 5
76247: IFFALSE 76273
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76249: LD_VAR 0 4
76253: PPUSH
76254: LD_VAR 0 5
76258: PPUSH
76259: LD_VAR 0 4
76263: PPUSH
76264: CALL_OW 74
76268: PPUSH
76269: CALL_OW 115
// end ; end ;
76273: GO 75935
76275: POP
76276: POP
// end ;
76277: LD_VAR 0 3
76281: RET
