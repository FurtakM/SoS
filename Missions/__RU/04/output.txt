// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export canExitMap ; export startEvacuation ; export ewakuowane ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 61 0 0
// canExitMap = false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// startEvacuation = false ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// ewakuowane = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// PrepareRussians ;
  48: CALL 1163 0 0
// MissionIntro ;
  52: CALL 2467 0 0
// end ; end_of_file
  56: LD_VAR 0 1
  60: RET
// export function InitMapConfig ; begin
  61: LD_INT 0
  63: PPUSH
// BaseMapConfig ;
  64: CALL 77 0 0
// MissionMapConfig ;
  68: CALL 175 0 0
// end ;
  72: LD_VAR 0 1
  76: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
  77: LD_INT 0
  79: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 ] ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_INT 8
  87: PUSH
  88: LD_INT 12
  90: PUSH
  91: LD_INT 6
  93: PUSH
  94: LD_INT 6
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 103: LD_ADDR_EXP 5
 107: PUSH
 108: LD_INT 2
 110: PUSH
 111: LD_INT 2
 113: PUSH
 114: LD_INT 2
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 126: LD_ADDR_EXP 6
 130: PUSH
 131: LD_INT 5
 133: NEG
 134: PPUSH
 135: LD_INT 5
 137: PPUSH
 138: CALL_OW 12
 142: PUSH
 143: EMPTY
 144: LIST
 145: ST_TO_ADDR
// debugMode = 0 ;
 146: LD_ADDR_EXP 9
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// missionPrefix = 04_ ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_STRING 04_
 161: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 162: LD_ADDR_EXP 8
 166: PUSH
 167: LD_STRING 03_
 169: ST_TO_ADDR
// end ;
 170: LD_VAR 0 1
 174: RET
// export enemySkillLevel , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; function MissionMapConfig ; begin
 175: LD_INT 0
 177: PPUSH
// enemySkillLevel = [ 2 , 2 , 3 ] [ Difficulty ] ;
 178: LD_ADDR_EXP 10
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: LD_INT 3
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: LIST
 196: PUSH
 197: LD_OWVAR 67
 201: ARRAY
 202: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 203: LD_ADDR_EXP 11
 207: PUSH
 208: LD_INT 135
 210: PUSH
 211: LD_INT 8
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: PUSH
 218: LD_INT 135
 220: PUSH
 221: LD_INT 4
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 134
 230: PUSH
 231: LD_INT 19
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PUSH
 238: LD_INT 132
 240: PUSH
 241: LD_INT 26
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 128
 250: PUSH
 251: LD_INT 31
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: LD_INT 123
 260: PUSH
 261: LD_INT 37
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 118
 270: PUSH
 271: LD_INT 45
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: LD_INT 112
 280: PUSH
 281: LD_INT 51
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 106
 290: PUSH
 291: LD_INT 57
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: LD_INT 99
 300: PUSH
 301: LD_INT 62
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 93
 310: PUSH
 311: LD_INT 67
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 86
 320: PUSH
 321: LD_INT 72
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 78
 330: PUSH
 331: LD_INT 75
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 71
 340: PUSH
 341: LD_INT 81
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 69
 350: PUSH
 351: LD_INT 88
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: LD_INT 71
 360: PUSH
 361: LD_INT 95
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PUSH
 368: LD_INT 74
 370: PUSH
 371: LD_INT 103
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PUSH
 378: LD_INT 80
 380: PUSH
 381: LD_INT 113
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 84
 390: PUSH
 391: LD_INT 121
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 89
 400: PUSH
 401: LD_INT 132
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: LD_INT 92
 410: PUSH
 411: LD_INT 142
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 93
 420: PUSH
 421: LD_INT 151
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 91
 430: PUSH
 431: LD_INT 157
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 90
 440: PUSH
 441: LD_INT 163
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 93
 450: PUSH
 451: LD_INT 171
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: LD_INT 92
 460: PUSH
 461: LD_INT 177
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 496: LD_ADDR_EXP 12
 500: PUSH
 501: LD_INT 135
 503: PUSH
 504: LD_INT 8
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: LD_INT 135
 513: PUSH
 514: LD_INT 4
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 134
 523: PUSH
 524: LD_INT 19
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 132
 533: PUSH
 534: LD_INT 26
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 128
 543: PUSH
 544: LD_INT 31
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: PUSH
 551: LD_INT 123
 553: PUSH
 554: LD_INT 37
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 118
 563: PUSH
 564: LD_INT 45
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 112
 573: PUSH
 574: LD_INT 51
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 106
 583: PUSH
 584: LD_INT 57
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 99
 593: PUSH
 594: LD_INT 62
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: LD_INT 104
 603: PUSH
 604: LD_INT 71
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 110
 613: PUSH
 614: LD_INT 78
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 119
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 128
 633: PUSH
 634: LD_INT 97
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 135
 643: PUSH
 644: LD_INT 106
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 141
 653: PUSH
 654: LD_INT 120
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: LD_INT 143
 663: PUSH
 664: LD_INT 132
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 143
 673: PUSH
 674: LD_INT 142
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 140
 683: PUSH
 684: LD_INT 149
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 132
 693: PUSH
 694: LD_INT 153
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: LD_INT 125
 703: PUSH
 704: LD_INT 155
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 115
 713: PUSH
 714: LD_INT 154
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 105
 723: PUSH
 724: LD_INT 153
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 93
 733: PUSH
 734: LD_INT 151
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 91
 743: PUSH
 744: LD_INT 157
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 90
 753: PUSH
 754: LD_INT 163
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: PUSH
 761: LD_INT 93
 763: PUSH
 764: LD_INT 171
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 92
 773: PUSH
 774: LD_INT 177
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
 811: LD_ADDR_EXP 13
 815: PUSH
 816: LD_INT 40
 818: PUSH
 819: LD_INT 35
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_OWVAR 67
 834: ARRAY
 835: ST_TO_ADDR
// end ;
 836: LD_VAR 0 1
 840: RET
// every 0 0$1 trigger debugMode do var i ;
 841: LD_EXP 9
 845: IFFALSE 1160
 847: GO 849
 849: DISABLE
 850: LD_INT 0
 852: PPUSH
// begin enable ;
 853: ENABLE
// FogOff ( your_side ) ;
 854: LD_OWVAR 2
 858: PPUSH
 859: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 863: LD_ADDR_VAR 0 1
 867: PUSH
 868: LD_INT 22
 870: PUSH
 871: LD_OWVAR 2
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: PUSH
 880: LD_INT 2
 882: PUSH
 883: LD_INT 21
 885: PUSH
 886: LD_INT 1
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 21
 895: PUSH
 896: LD_INT 2
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PUSH
 917: FOR_IN
 918: IFFALSE 934
// SetLives ( i , 1000 ) ;
 920: LD_VAR 0 1
 924: PPUSH
 925: LD_INT 1000
 927: PPUSH
 928: CALL_OW 234
 932: GO 917
 934: POP
 935: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 936: LD_ADDR_VAR 0 1
 940: PUSH
 941: LD_INT 22
 943: PUSH
 944: LD_OWVAR 2
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PUSH
 953: LD_INT 21
 955: PUSH
 956: LD_INT 1
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: PPUSH
 967: CALL_OW 69
 971: PUSH
 972: FOR_IN
 973: IFFALSE 1037
// begin SetSkill ( i , skill_combat , 10 ) ;
 975: LD_VAR 0 1
 979: PPUSH
 980: LD_INT 1
 982: PPUSH
 983: LD_INT 10
 985: PPUSH
 986: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 990: LD_VAR 0 1
 994: PPUSH
 995: LD_INT 2
 997: PPUSH
 998: LD_INT 10
1000: PPUSH
1001: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1005: LD_VAR 0 1
1009: PPUSH
1010: LD_INT 3
1012: PPUSH
1013: LD_INT 10
1015: PPUSH
1016: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1020: LD_VAR 0 1
1024: PPUSH
1025: LD_INT 4
1027: PPUSH
1028: LD_INT 10
1030: PPUSH
1031: CALL_OW 237
// end ;
1035: GO 972
1037: POP
1038: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1039: LD_ADDR_VAR 0 1
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_OWVAR 2
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 2
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: PUSH
1069: LD_INT 30
1071: PUSH
1072: LD_INT 1
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: FOR_IN
1094: IFFALSE 1158
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1096: LD_VAR 0 1
1100: PPUSH
1101: CALL_OW 274
1105: PPUSH
1106: LD_INT 1
1108: PPUSH
1109: LD_INT 9999
1111: PPUSH
1112: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1116: LD_VAR 0 1
1120: PPUSH
1121: CALL_OW 274
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: LD_INT 9999
1131: PPUSH
1132: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1136: LD_VAR 0 1
1140: PPUSH
1141: CALL_OW 274
1145: PPUSH
1146: LD_INT 3
1148: PPUSH
1149: LD_INT 9999
1151: PPUSH
1152: CALL_OW 277
// end ;
1156: GO 1093
1158: POP
1159: POP
// end ; end_of_file
1160: PPOPN 1
1162: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam ; export dialogRus ; export function PrepareRussians ; begin
1163: LD_INT 0
1165: PPUSH
// PrepareHeroes ;
1166: CALL 1175 0 0
// end ;
1170: LD_VAR 0 1
1174: RET
// function PrepareHeroes ; var i ; begin
1175: LD_INT 0
1177: PPUSH
1178: PPUSH
// uc_side = 3 ;
1179: LD_ADDR_OWVAR 20
1183: PUSH
1184: LD_INT 3
1186: ST_TO_ADDR
// uc_nation = 3 ;
1187: LD_ADDR_OWVAR 21
1191: PUSH
1192: LD_INT 3
1194: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1195: LD_ADDR_EXP 14
1199: PUSH
1200: LD_STRING Burlak
1202: PPUSH
1203: LD_INT 1
1205: PPUSH
1206: LD_INT 3
1208: PPUSH
1209: CALL 1710 0 3
1213: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1214: LD_ADDR_EXP 15
1218: PUSH
1219: LD_STRING Gnyevko
1221: PPUSH
1222: LD_INT 1
1224: PPUSH
1225: LD_INT 3
1227: PPUSH
1228: CALL 1710 0 3
1232: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1233: LD_ADDR_EXP 17
1237: PUSH
1238: LD_STRING Kovalyuk
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_INT 3
1246: PPUSH
1247: CALL 1710 0 3
1251: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1252: LD_ADDR_EXP 16
1256: PUSH
1257: LD_STRING Kirilenkova
1259: PPUSH
1260: LD_INT 1
1262: PPUSH
1263: LD_INT 4
1265: PPUSH
1266: CALL 1710 0 3
1270: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1271: LD_ADDR_EXP 18
1275: PUSH
1276: LD_STRING Belkov
1278: PPUSH
1279: LD_INT 1
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 1710 0 3
1289: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1290: LD_ADDR_EXP 19
1294: PUSH
1295: LD_STRING Belkov2
1297: PPUSH
1298: LD_INT 1
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: CALL 1710 0 3
1308: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1309: LD_ADDR_EXP 20
1313: PUSH
1314: LD_STRING Scholtze
1316: PPUSH
1317: LD_INT 1
1319: PPUSH
1320: LD_INT 4
1322: PPUSH
1323: CALL 1710 0 3
1327: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1328: LD_ADDR_EXP 24
1332: PUSH
1333: LD_STRING Popov
1335: PPUSH
1336: LD_INT 0
1338: PPUSH
1339: LD_INT 0
1341: PPUSH
1342: CALL 1710 0 3
1346: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1347: LD_ADDR_EXP 26
1351: PUSH
1352: LD_STRING Gaydar
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: LD_INT 0
1360: PPUSH
1361: CALL 1710 0 3
1365: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1366: LD_ADDR_EXP 25
1370: PUSH
1371: LD_STRING Platonov
1373: PPUSH
1374: LD_INT 0
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL 1710 0 3
1384: ST_TO_ADDR
// uc_side = 6 ;
1385: LD_ADDR_OWVAR 20
1389: PUSH
1390: LD_INT 6
1392: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1393: LD_ADDR_EXP 21
1397: PUSH
1398: LD_STRING Kuzmov
1400: PPUSH
1401: LD_INT 0
1403: PPUSH
1404: LD_INT 0
1406: PPUSH
1407: CALL 1710 0 3
1411: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1412: LD_EXP 21
1416: PPUSH
1417: LD_INT 109
1419: PPUSH
1420: LD_INT 108
1422: PPUSH
1423: LD_INT 5
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 50
// ComHold ( Kuzmov ) ;
1433: LD_EXP 21
1437: PPUSH
1438: CALL_OW 140
// uc_side = 3 ;
1442: LD_ADDR_OWVAR 20
1446: PUSH
1447: LD_INT 3
1449: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1450: LD_EXP 14
1454: PUSH
1455: LD_EXP 15
1459: PUSH
1460: LD_EXP 16
1464: PUSH
1465: LD_EXP 17
1469: PUSH
1470: LD_EXP 18
1474: PUSH
1475: LD_EXP 19
1479: PUSH
1480: LD_EXP 20
1484: PUSH
1485: LD_EXP 24
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: PPUSH
1500: LD_INT 2
1502: PPUSH
1503: LD_INT 0
1505: PPUSH
1506: CALL 1793 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1510: LD_ADDR_EXP 22
1514: PUSH
1515: LD_STRING 03_other_survivors
1517: PPUSH
1518: CALL_OW 31
1522: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1523: LD_ADDR_EXP 23
1527: PUSH
1528: LD_STRING 03_other_kirov
1530: PPUSH
1531: CALL_OW 31
1535: ST_TO_ADDR
// for i in other_survivors do
1536: LD_ADDR_VAR 0 2
1540: PUSH
1541: LD_EXP 22
1545: PUSH
1546: FOR_IN
1547: IFFALSE 1566
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1549: LD_VAR 0 2
1553: PPUSH
1554: LD_INT 2
1556: PPUSH
1557: LD_INT 0
1559: PPUSH
1560: CALL_OW 49
1564: GO 1546
1566: POP
1567: POP
// for i in other_kirov_survivors do
1568: LD_ADDR_VAR 0 2
1572: PUSH
1573: LD_EXP 23
1577: PUSH
1578: FOR_IN
1579: IFFALSE 1598
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1581: LD_VAR 0 2
1585: PPUSH
1586: LD_INT 2
1588: PPUSH
1589: LD_INT 0
1591: PPUSH
1592: CALL_OW 49
1596: GO 1578
1598: POP
1599: POP
// PrepareSoldier ( sex_male , 1 ) ;
1600: LD_INT 1
1602: PPUSH
1603: LD_INT 1
1605: PPUSH
1606: CALL_OW 381
// dialogRus = CreateHuman ;
1610: LD_ADDR_EXP 29
1614: PUSH
1615: CALL_OW 44
1619: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file end_of_file
1620: LD_VAR 0 1
1624: RET
// on BuildingStarted ( building , unit ) do begin if GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
1625: LD_VAR 0 1
1629: PPUSH
1630: CALL_OW 266
1634: PUSH
1635: LD_INT 0
1637: EQUAL
1638: PUSH
1639: LD_VAR 0 1
1643: PPUSH
1644: LD_INT 5
1646: PPUSH
1647: CALL_OW 308
1651: NOT
1652: AND
1653: IFFALSE 1664
// Dial_DepotInWrongPlace ( building ) ;
1655: LD_VAR 0 1
1659: PPUSH
1660: CALL 2886 0 1
// end ;
1664: PPOPN 2
1666: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation then
1667: LD_VAR 0 1
1671: PPUSH
1672: CALL_OW 266
1676: PUSH
1677: LD_INT 0
1679: EQUAL
1680: PUSH
1681: LD_VAR 0 1
1685: PPUSH
1686: LD_INT 5
1688: PPUSH
1689: CALL_OW 308
1693: AND
1694: PUSH
1695: LD_EXP 2
1699: NOT
1700: AND
1701: IFFALSE 1707
// Dial_FinishDepot ;
1703: CALL 3030 0 0
// end ; end_of_file
1707: PPOPN 1
1709: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
1710: LD_INT 0
1712: PPUSH
1713: PPUSH
// if exist_mode then
1714: LD_VAR 0 2
1718: IFFALSE 1743
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
1720: LD_ADDR_VAR 0 5
1724: PUSH
1725: LD_EXP 8
1729: PUSH
1730: LD_VAR 0 1
1734: STR
1735: PPUSH
1736: CALL_OW 34
1740: ST_TO_ADDR
1741: GO 1758
// unit := NewCharacter ( ident ) ;
1743: LD_ADDR_VAR 0 5
1747: PUSH
1748: LD_VAR 0 1
1752: PPUSH
1753: CALL_OW 25
1757: ST_TO_ADDR
// if class then
1758: LD_VAR 0 3
1762: IFFALSE 1778
// SetClass ( unit , class ) ;
1764: LD_VAR 0 5
1768: PPUSH
1769: LD_VAR 0 3
1773: PPUSH
1774: CALL_OW 336
// result := unit ;
1778: LD_ADDR_VAR 0 4
1782: PUSH
1783: LD_VAR 0 5
1787: ST_TO_ADDR
// end ;
1788: LD_VAR 0 4
1792: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
1793: LD_INT 0
1795: PPUSH
1796: PPUSH
// for unit in units do
1797: LD_ADDR_VAR 0 5
1801: PUSH
1802: LD_VAR 0 1
1806: PUSH
1807: FOR_IN
1808: IFFALSE 1831
// PlaceUnitArea ( unit , area , spawnMode ) ;
1810: LD_VAR 0 5
1814: PPUSH
1815: LD_VAR 0 2
1819: PPUSH
1820: LD_VAR 0 3
1824: PPUSH
1825: CALL_OW 49
1829: GO 1807
1831: POP
1832: POP
// end ;
1833: LD_VAR 0 4
1837: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
1838: LD_INT 0
1840: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
1841: LD_VAR 0 1
1845: PPUSH
1846: CALL_OW 255
1850: PUSH
1851: LD_VAR 0 3
1855: EQUAL
1856: PUSH
1857: LD_VAR 0 1
1861: PPUSH
1862: CALL_OW 302
1866: AND
1867: IFFALSE 1889
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_EXP 7
1878: PUSH
1879: LD_VAR 0 2
1883: STR
1884: PPUSH
1885: CALL_OW 38
// end ;
1889: LD_VAR 0 4
1893: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
1894: LD_INT 0
1896: PPUSH
1897: PPUSH
1898: PPUSH
// resultCharactersToSave = [ ] ;
1899: LD_ADDR_VAR 0 6
1903: PUSH
1904: EMPTY
1905: ST_TO_ADDR
// for unit in characters do
1906: LD_ADDR_VAR 0 5
1910: PUSH
1911: LD_VAR 0 1
1915: PUSH
1916: FOR_IN
1917: IFFALSE 1965
// if GetSide ( unit ) = side and IsOK ( unit ) then
1919: LD_VAR 0 5
1923: PPUSH
1924: CALL_OW 255
1928: PUSH
1929: LD_VAR 0 3
1933: EQUAL
1934: PUSH
1935: LD_VAR 0 5
1939: PPUSH
1940: CALL_OW 302
1944: AND
1945: IFFALSE 1963
// resultCharactersToSave = resultCharactersToSave ^ unit ;
1947: LD_ADDR_VAR 0 6
1951: PUSH
1952: LD_VAR 0 6
1956: PUSH
1957: LD_VAR 0 5
1961: ADD
1962: ST_TO_ADDR
1963: GO 1916
1965: POP
1966: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
1967: LD_VAR 0 6
1971: PPUSH
1972: LD_EXP 7
1976: PUSH
1977: LD_VAR 0 2
1981: STR
1982: PPUSH
1983: CALL_OW 38
// end ;
1987: LD_VAR 0 4
1991: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
1992: LD_INT 0
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_INT 22
2006: PUSH
2007: LD_INT 3
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 50
2026: PUSH
2027: EMPTY
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PPUSH
2035: CALL_OW 69
2039: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
2040: LD_ADDR_VAR 0 3
2044: PUSH
2045: LD_VAR 0 3
2049: PUSH
2050: LD_EXP 14
2054: DIFF
2055: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
2056: LD_ADDR_VAR 0 3
2060: PUSH
2061: LD_VAR 0 3
2065: PUSH
2066: LD_EXP 24
2070: DIFF
2071: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
2072: LD_ADDR_VAR 0 4
2076: PUSH
2077: LD_STRING text
2079: PPUSH
2080: LD_INT 8
2082: PPUSH
2083: LD_INT 8
2085: PPUSH
2086: LD_INT -5
2088: PUSH
2089: LD_EXP 14
2093: PUSH
2094: LD_INT -6
2096: PUSH
2097: LD_INT -2
2099: PUSH
2100: LD_INT -3
2102: PUSH
2103: LD_INT -5
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_VAR 0 3
2118: ADD
2119: PUSH
2120: LD_INT -6
2122: PUSH
2123: LD_INT -4
2125: PUSH
2126: LD_EXP 24
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: ADD
2136: PPUSH
2137: LD_INT 1
2139: PUSH
2140: LD_INT 3
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 1
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 4
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 42
2166: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
2167: LD_VAR 0 3
2171: PPUSH
2172: LD_INT 6
2174: PPUSH
2175: CALL_OW 235
// SetSide ( Popov , 6 ) ;
2179: LD_EXP 24
2183: PPUSH
2184: LD_INT 6
2186: PPUSH
2187: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
2191: LD_VAR 0 4
2195: PPUSH
2196: LD_INT 3
2198: PPUSH
2199: CALL_OW 235
// burlakTeam = selectedPeople ;
2203: LD_ADDR_EXP 27
2207: PUSH
2208: LD_VAR 0 4
2212: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
2213: LD_ADDR_EXP 28
2217: PUSH
2218: LD_INT 22
2220: PUSH
2221: LD_INT 6
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 21
2230: PUSH
2231: LD_INT 1
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
2247: LD_ADDR_EXP 28
2251: PUSH
2252: LD_EXP 28
2256: PUSH
2257: LD_EXP 21
2261: DIFF
2262: ST_TO_ADDR
// if not Gnyevko in selectedPeople then
2263: LD_EXP 15
2267: PUSH
2268: LD_VAR 0 4
2272: IN
2273: NOT
2274: IFFALSE 2291
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
2276: LD_EXP 15
2280: PPUSH
2281: LD_STRING Gnyevko
2283: PPUSH
2284: LD_INT 6
2286: PPUSH
2287: CALL 1838 0 3
// if not Kovalyuk in selectedPeople then
2291: LD_EXP 17
2295: PUSH
2296: LD_VAR 0 4
2300: IN
2301: NOT
2302: IFFALSE 2319
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
2304: LD_EXP 17
2308: PPUSH
2309: LD_STRING Kovalyuk
2311: PPUSH
2312: LD_INT 6
2314: PPUSH
2315: CALL 1838 0 3
// if not Kirilenkova in selectedPeople then
2319: LD_EXP 16
2323: PUSH
2324: LD_VAR 0 4
2328: IN
2329: NOT
2330: IFFALSE 2347
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
2332: LD_EXP 16
2336: PPUSH
2337: LD_STRING Kirilenkova
2339: PPUSH
2340: LD_INT 6
2342: PPUSH
2343: CALL 1838 0 3
// if not Scholtze in selectedPeople then
2347: LD_EXP 20
2351: PUSH
2352: LD_VAR 0 4
2356: IN
2357: NOT
2358: IFFALSE 2375
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
2360: LD_EXP 20
2364: PPUSH
2365: LD_STRING Scholtze
2367: PPUSH
2368: LD_INT 6
2370: PPUSH
2371: CALL 1838 0 3
// if not Belkov in selectedPeople then
2375: LD_EXP 18
2379: PUSH
2380: LD_VAR 0 4
2384: IN
2385: NOT
2386: IFFALSE 2403
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
2388: LD_EXP 18
2392: PPUSH
2393: LD_STRING Belkov
2395: PPUSH
2396: LD_INT 6
2398: PPUSH
2399: CALL 1838 0 3
// if not Belkov2 in selectedPeople then
2403: LD_EXP 19
2407: PUSH
2408: LD_VAR 0 4
2412: IN
2413: NOT
2414: IFFALSE 2431
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
2416: LD_EXP 19
2420: PPUSH
2421: LD_STRING Belkov2
2423: PPUSH
2424: LD_INT 6
2426: PPUSH
2427: CALL 1838 0 3
// others = popovTeam diff Popov ;
2431: LD_ADDR_VAR 0 5
2435: PUSH
2436: LD_EXP 28
2440: PUSH
2441: LD_EXP 24
2445: DIFF
2446: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
2447: LD_VAR 0 5
2451: PPUSH
2452: LD_STRING other_survivors_with_popov
2454: PPUSH
2455: LD_INT 6
2457: PPUSH
2458: CALL 1894 0 3
// end ; end_of_file
2462: LD_VAR 0 1
2466: RET
// export function MissionIntro ; var i , unit ; begin
2467: LD_INT 0
2469: PPUSH
2470: PPUSH
2471: PPUSH
// CenterNowOnUnits ( Burlak ) ;
2472: LD_EXP 14
2476: PPUSH
2477: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
2481: LD_EXP 29
2485: PPUSH
2486: LD_STRING D1-RSol1-1
2488: PPUSH
2489: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
2493: LD_EXP 25
2497: PPUSH
2498: LD_STRING D1-Pla-1
2500: PPUSH
2501: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
2505: LD_EXP 14
2509: PPUSH
2510: LD_STRING D1-Bur-1
2512: PPUSH
2513: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
2517: LD_EXP 25
2521: PPUSH
2522: LD_STRING D1-Pla-2
2524: PPUSH
2525: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
2529: LD_EXP 14
2533: PPUSH
2534: LD_STRING D1-Bur-2
2536: PPUSH
2537: CALL_OW 88
// SelectCharacters ;
2541: CALL 1992 0 0
// InGameOff ;
2545: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2549: LD_STRING M1
2551: PPUSH
2552: CALL_OW 337
// SaveForQuickRestart ;
2556: CALL_OW 22
// for unit in popovTeam do
2560: LD_ADDR_VAR 0 3
2564: PUSH
2565: LD_EXP 28
2569: PUSH
2570: FOR_IN
2571: IFFALSE 2643
// begin for i := 3 to russianCargoPath1 do
2573: LD_ADDR_VAR 0 2
2577: PUSH
2578: DOUBLE
2579: LD_INT 3
2581: DEC
2582: ST_TO_ADDR
2583: LD_EXP 11
2587: PUSH
2588: FOR_TO
2589: IFFALSE 2632
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
2591: LD_VAR 0 3
2595: PPUSH
2596: LD_EXP 11
2600: PUSH
2601: LD_VAR 0 2
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: LD_EXP 11
2615: PUSH
2616: LD_VAR 0 2
2620: ARRAY
2621: PUSH
2622: LD_INT 2
2624: ARRAY
2625: PPUSH
2626: CALL_OW 171
2630: GO 2588
2632: POP
2633: POP
// wait ( 0 0$01 ) ;
2634: LD_INT 35
2636: PPUSH
2637: CALL_OW 67
// end ;
2641: GO 2570
2643: POP
2644: POP
// end ;
2645: LD_VAR 0 1
2649: RET
// every 0 0$1 do var unit , driver ;
2650: GO 2652
2652: DISABLE
2653: LD_INT 0
2655: PPUSH
2656: PPUSH
// begin enable ;
2657: ENABLE
// Display_strings = [ ewakuacja , ewakuowane ] ;
2658: LD_ADDR_OWVAR 47
2662: PUSH
2663: LD_STRING ewakuacja
2665: PUSH
2666: LD_EXP 3
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: ST_TO_ADDR
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
2675: LD_INT 4
2677: PPUSH
2678: LD_INT 22
2680: PUSH
2681: LD_INT 6
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 70
2692: NOT
2693: PUSH
2694: LD_INT 4
2696: PPUSH
2697: LD_INT 22
2699: PUSH
2700: LD_INT 3
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 21
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 21
2722: PUSH
2723: LD_INT 2
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PPUSH
2739: CALL_OW 70
2743: NOT
2744: AND
2745: IFFALSE 2749
// exit ;
2747: GO 2883
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
2749: LD_ADDR_VAR 0 1
2753: PUSH
2754: LD_INT 4
2756: PPUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 6
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 70
2771: PUSH
2772: FOR_IN
2773: IFFALSE 2813
// begin RemoveUnit ( unit ) ;
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 64
// if not unit in popovTeam then
2784: LD_VAR 0 1
2788: PUSH
2789: LD_EXP 28
2793: IN
2794: NOT
2795: IFFALSE 2811
// ewakuowane = ewakuowane + 1 ;
2797: LD_ADDR_EXP 3
2801: PUSH
2802: LD_EXP 3
2806: PUSH
2807: LD_INT 1
2809: PLUS
2810: ST_TO_ADDR
// end ;
2811: GO 2772
2813: POP
2814: POP
// if canExitMap then
2815: LD_EXP 1
2819: IFFALSE 2883
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
2821: LD_ADDR_VAR 0 1
2825: PUSH
2826: LD_INT 4
2828: PPUSH
2829: LD_INT 22
2831: PUSH
2832: LD_INT 3
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: LD_INT 21
2844: PUSH
2845: LD_INT 1
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 21
2854: PUSH
2855: LD_INT 2
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 70
2875: PUSH
2876: FOR_IN
2877: IFFALSE 2881
// begin end ;
2879: GO 2876
2881: POP
2882: POP
// end ;
2883: PPOPN 2
2885: END
// export function Dial_DepotInWrongPlace ( building ) ; begin
2886: LD_INT 0
2888: PPUSH
// CenterNowOnUnits ( building ) ;
2889: LD_VAR 0 1
2893: PPUSH
2894: CALL_OW 87
// DialogueOn ;
2898: CALL_OW 6
// SayRadio ( Platonov , D2a-Pla-1 ) ;
2902: LD_EXP 25
2906: PPUSH
2907: LD_STRING D2a-Pla-1
2909: PPUSH
2910: CALL_OW 94
// DialogueOff ;
2914: CALL_OW 7
// RemoveUnit ( building ) ;
2918: LD_VAR 0 1
2922: PPUSH
2923: CALL_OW 64
// end ;
2927: LD_VAR 0 2
2931: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
2932: LD_EXP 21
2936: PPUSH
2937: CALL_OW 255
2941: PUSH
2942: LD_INT 6
2944: EQUAL
2945: IFFALSE 3027
2947: GO 2949
2949: DISABLE
2950: LD_INT 0
2952: PPUSH
// begin enable ;
2953: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
2954: LD_ADDR_VAR 0 1
2958: PUSH
2959: LD_INT 22
2961: PUSH
2962: LD_INT 3
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: LD_INT 21
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PPUSH
2983: CALL_OW 69
2987: PUSH
2988: FOR_IN
2989: IFFALSE 3025
// if GetDistUnits ( unit , Kuzmov ) < 9 then
2991: LD_VAR 0 1
2995: PPUSH
2996: LD_EXP 21
3000: PPUSH
3001: CALL_OW 296
3005: PUSH
3006: LD_INT 9
3008: LESS
3009: IFFALSE 3023
// SetSide ( Kuzmov , 3 ) ;
3011: LD_EXP 21
3015: PPUSH
3016: LD_INT 3
3018: PPUSH
3019: CALL_OW 235
3023: GO 2988
3025: POP
3026: POP
// end ;
3027: PPOPN 1
3029: END
// export function Dial_FinishDepot ; begin
3030: LD_INT 0
3032: PPUSH
// startEvacuation = true ;
3033: LD_ADDR_EXP 2
3037: PUSH
3038: LD_INT 1
3040: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
3041: LD_EXP 14
3045: PPUSH
3046: LD_STRING D2-Bur-1
3048: PPUSH
3049: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
3053: LD_EXP 25
3057: PPUSH
3058: LD_STRING D2-Pla-1
3060: PPUSH
3061: CALL_OW 94
// end ;
3065: LD_VAR 0 1
3069: RET
