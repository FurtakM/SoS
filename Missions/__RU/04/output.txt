// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 232 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// canExitMap = false ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// arabianCanExitMap = false ;
  88: LD_ADDR_EXP 6
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// namedBase = false ;
  96: LD_ADDR_EXP 8
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// startEvacuation = false ;
 104: LD_ADDR_EXP 7
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// stealCargos = [ ] ;
 112: LD_ADDR_EXP 12
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// stealWarmCount = 0 ;
 119: LD_ADDR_EXP 11
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// evacuatedCargos = 0 ;
 127: LD_ADDR_EXP 9
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// canStealCargo = false ;
 135: LD_ADDR_EXP 10
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 143: LD_ADDR_EXP 14
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_contactBlock = false ;
 151: LD_ADDR_EXP 15
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// currentWave = 0 ;
 159: LD_ADDR_EXP 17
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// saveGaydar = false ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 175: LD_ADDR_EXP 19
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// killedArabianUnits = 0 ;
 183: LD_ADDR_EXP 20
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// arabianKillers = 0 ;
 191: LD_ADDR_EXP 21
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostUnits = 0 ;
 199: LD_ADDR_EXP 22
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// enableAttacks = false ;
 207: LD_ADDR_EXP 16
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// PrepareRussians ;
 215: CALL 1473 0 0
// Nef_PrepareNature ;
 219: CALL 3797 0 0
// MissionIntro ;
 223: CALL 9566 0 0
// end ; end_of_file
 227: LD_VAR 0 1
 231: RET
// export function InitMapConfig ; begin
 232: LD_INT 0
 234: PPUSH
// BaseMapConfig ;
 235: CALL 248 0 0
// MissionMapConfig ;
 239: CALL 350 0 0
// end ;
 243: LD_VAR 0 1
 247: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 248: LD_INT 0
 250: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 251: LD_ADDR_EXP 23
 255: PUSH
 256: LD_INT 8
 258: PUSH
 259: LD_INT 12
 261: PUSH
 262: LD_INT 6
 264: PUSH
 265: LD_INT 6
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: LIST
 275: LIST
 276: LIST
 277: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 278: LD_ADDR_EXP 24
 282: PUSH
 283: LD_INT 2
 285: PUSH
 286: LD_INT 2
 288: PUSH
 289: LD_INT 2
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 301: LD_ADDR_EXP 25
 305: PUSH
 306: LD_INT 5
 308: NEG
 309: PPUSH
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 12
 317: PUSH
 318: EMPTY
 319: LIST
 320: ST_TO_ADDR
// debugMode = 0 ;
 321: LD_ADDR_EXP 28
 325: PUSH
 326: LD_INT 0
 328: ST_TO_ADDR
// missionPrefix = 04_ ;
 329: LD_ADDR_EXP 26
 333: PUSH
 334: LD_STRING 04_
 336: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 337: LD_ADDR_EXP 27
 341: PUSH
 342: LD_STRING 03_
 344: ST_TO_ADDR
// end ;
 345: LD_VAR 0 1
 349: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles , enemyGroupHumans ; function MissionMapConfig ; begin
 350: LD_INT 0
 352: PPUSH
// enemySkillLevel = [ 2 , 3 , 4 ] [ Difficulty ] ;
 353: LD_ADDR_EXP 29
 357: PUSH
 358: LD_INT 2
 360: PUSH
 361: LD_INT 3
 363: PUSH
 364: LD_INT 4
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: LIST
 371: PUSH
 372: LD_OWVAR 67
 376: ARRAY
 377: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 378: LD_ADDR_EXP 30
 382: PUSH
 383: LD_INT 2
 385: NEG
 386: PUSH
 387: LD_INT 1
 389: NEG
 390: PUSH
 391: LD_INT 0
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: PUSH
 399: LD_OWVAR 67
 403: ARRAY
 404: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 405: LD_ADDR_EXP 31
 409: PUSH
 410: LD_INT 135
 412: PUSH
 413: LD_INT 8
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: LD_INT 135
 422: PUSH
 423: LD_INT 4
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: PUSH
 430: LD_INT 134
 432: PUSH
 433: LD_INT 19
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 132
 442: PUSH
 443: LD_INT 26
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 128
 452: PUSH
 453: LD_INT 31
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 123
 462: PUSH
 463: LD_INT 37
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 118
 472: PUSH
 473: LD_INT 45
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: LD_INT 112
 482: PUSH
 483: LD_INT 51
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 106
 492: PUSH
 493: LD_INT 57
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 99
 502: PUSH
 503: LD_INT 62
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: LD_INT 93
 512: PUSH
 513: LD_INT 67
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: PUSH
 520: LD_INT 86
 522: PUSH
 523: LD_INT 72
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 78
 532: PUSH
 533: LD_INT 75
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 71
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 69
 552: PUSH
 553: LD_INT 88
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 71
 562: PUSH
 563: LD_INT 95
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 74
 572: PUSH
 573: LD_INT 103
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 80
 582: PUSH
 583: LD_INT 113
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 84
 592: PUSH
 593: LD_INT 121
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 89
 602: PUSH
 603: LD_INT 132
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 92
 612: PUSH
 613: LD_INT 142
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 93
 622: PUSH
 623: LD_INT 151
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 91
 632: PUSH
 633: LD_INT 157
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 90
 642: PUSH
 643: LD_INT 163
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 93
 652: PUSH
 653: LD_INT 171
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 92
 662: PUSH
 663: LD_INT 177
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 698: LD_ADDR_EXP 32
 702: PUSH
 703: LD_INT 135
 705: PUSH
 706: LD_INT 8
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 135
 715: PUSH
 716: LD_INT 4
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 134
 725: PUSH
 726: LD_INT 19
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 132
 735: PUSH
 736: LD_INT 26
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 128
 745: PUSH
 746: LD_INT 31
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 123
 755: PUSH
 756: LD_INT 37
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PUSH
 763: LD_INT 118
 765: PUSH
 766: LD_INT 45
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 112
 775: PUSH
 776: LD_INT 51
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: LD_INT 106
 785: PUSH
 786: LD_INT 57
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: LD_INT 99
 795: PUSH
 796: LD_INT 62
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 104
 805: PUSH
 806: LD_INT 71
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 110
 815: PUSH
 816: LD_INT 78
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 119
 825: PUSH
 826: LD_INT 88
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 128
 835: PUSH
 836: LD_INT 97
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 135
 845: PUSH
 846: LD_INT 106
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 141
 855: PUSH
 856: LD_INT 120
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: LD_INT 143
 865: PUSH
 866: LD_INT 132
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 143
 875: PUSH
 876: LD_INT 142
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 140
 885: PUSH
 886: LD_INT 149
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 132
 895: PUSH
 896: LD_INT 153
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 125
 905: PUSH
 906: LD_INT 155
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 115
 915: PUSH
 916: LD_INT 154
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: LD_INT 105
 925: PUSH
 926: LD_INT 153
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_INT 93
 935: PUSH
 936: LD_INT 151
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 91
 945: PUSH
 946: LD_INT 157
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PUSH
 953: LD_INT 90
 955: PUSH
 956: LD_INT 163
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 93
 965: PUSH
 966: LD_INT 171
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 92
 975: PUSH
 976: LD_INT 177
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1013: LD_ADDR_EXP 33
1017: PUSH
1018: LD_INT 40
1020: PUSH
1021: LD_INT 35
1023: PUSH
1024: LD_INT 30
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_OWVAR 67
1036: ARRAY
1037: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1038: LD_ADDR_EXP 34
1042: PUSH
1043: LD_INT 50
1045: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1046: LD_ADDR_EXP 13
1050: PUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 19
1056: PUSH
1057: LD_INT 17
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_OWVAR 67
1069: ARRAY
1070: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1071: LD_ADDR_EXP 35
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: LD_INT 4
1081: PUSH
1082: LD_INT 4
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_OWVAR 67
1094: ARRAY
1095: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1096: LD_ADDR_EXP 36
1100: PUSH
1101: LD_INT 3
1103: PUSH
1104: LD_INT 4
1106: PUSH
1107: LD_INT 4
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_OWVAR 67
1119: ARRAY
1120: ST_TO_ADDR
// enemyGroupHumans = [ 5 , 6 , 7 ] [ Difficulty ] ;
1121: LD_ADDR_EXP 37
1125: PUSH
1126: LD_INT 5
1128: PUSH
1129: LD_INT 6
1131: PUSH
1132: LD_INT 7
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_OWVAR 67
1144: ARRAY
1145: ST_TO_ADDR
// end ;
1146: LD_VAR 0 1
1150: RET
// every 0 0$1 trigger debugMode do var i ;
1151: LD_EXP 28
1155: IFFALSE 1470
1157: GO 1159
1159: DISABLE
1160: LD_INT 0
1162: PPUSH
// begin enable ;
1163: ENABLE
// FogOff ( your_side ) ;
1164: LD_OWVAR 2
1168: PPUSH
1169: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1173: LD_ADDR_VAR 0 1
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_OWVAR 2
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 2
1192: PUSH
1193: LD_INT 21
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 21
1205: PUSH
1206: LD_INT 2
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: PPUSH
1222: CALL_OW 69
1226: PUSH
1227: FOR_IN
1228: IFFALSE 1244
// SetLives ( i , 1000 ) ;
1230: LD_VAR 0 1
1234: PPUSH
1235: LD_INT 1000
1237: PPUSH
1238: CALL_OW 234
1242: GO 1227
1244: POP
1245: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1246: LD_ADDR_VAR 0 1
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_OWVAR 2
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 21
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 69
1281: PUSH
1282: FOR_IN
1283: IFFALSE 1347
// begin SetSkill ( i , skill_combat , 10 ) ;
1285: LD_VAR 0 1
1289: PPUSH
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 10
1295: PPUSH
1296: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 2
1307: PPUSH
1308: LD_INT 10
1310: PPUSH
1311: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1315: LD_VAR 0 1
1319: PPUSH
1320: LD_INT 3
1322: PPUSH
1323: LD_INT 10
1325: PPUSH
1326: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 10
1340: PPUSH
1341: CALL_OW 237
// end ;
1345: GO 1282
1347: POP
1348: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1349: LD_ADDR_VAR 0 1
1353: PUSH
1354: LD_INT 22
1356: PUSH
1357: LD_OWVAR 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 2
1368: PUSH
1369: LD_INT 30
1371: PUSH
1372: LD_INT 0
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 30
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: LIST
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PPUSH
1398: CALL_OW 69
1402: PUSH
1403: FOR_IN
1404: IFFALSE 1468
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1406: LD_VAR 0 1
1410: PPUSH
1411: CALL_OW 274
1415: PPUSH
1416: LD_INT 1
1418: PPUSH
1419: LD_INT 9999
1421: PPUSH
1422: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1426: LD_VAR 0 1
1430: PPUSH
1431: CALL_OW 274
1435: PPUSH
1436: LD_INT 2
1438: PPUSH
1439: LD_INT 9999
1441: PPUSH
1442: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1446: LD_VAR 0 1
1450: PPUSH
1451: CALL_OW 274
1455: PPUSH
1456: LD_INT 3
1458: PPUSH
1459: LD_INT 9999
1461: PPUSH
1462: CALL_OW 277
// end ;
1466: GO 1403
1468: POP
1469: POP
// end ; end_of_file
1470: PPOPN 1
1472: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export randomsToSave ; export function PrepareRussians ; begin
1473: LD_INT 0
1475: PPUSH
// randomsToSave = [ ] ;
1476: LD_ADDR_EXP 57
1480: PUSH
1481: EMPTY
1482: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1483: LD_ADDR_EXP 53
1487: PUSH
1488: EMPTY
1489: ST_TO_ADDR
// PrepareHeroes ;
1490: CALL 1499 0 0
// end ;
1494: LD_VAR 0 1
1498: RET
// function PrepareHeroes ; var i , current ; begin
1499: LD_INT 0
1501: PPUSH
1502: PPUSH
1503: PPUSH
// uc_side = 3 ;
1504: LD_ADDR_OWVAR 20
1508: PUSH
1509: LD_INT 3
1511: ST_TO_ADDR
// uc_nation = 3 ;
1512: LD_ADDR_OWVAR 21
1516: PUSH
1517: LD_INT 3
1519: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1520: LD_ADDR_EXP 38
1524: PUSH
1525: LD_STRING Burlak
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: LD_INT 3
1533: PPUSH
1534: CALL 8606 0 3
1538: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1539: LD_ADDR_EXP 39
1543: PUSH
1544: LD_STRING Gnyevko
1546: PPUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_INT 3
1552: PPUSH
1553: CALL 8606 0 3
1557: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1558: LD_ADDR_EXP 41
1562: PUSH
1563: LD_STRING Kovalyuk
1565: PPUSH
1566: LD_INT 1
1568: PPUSH
1569: LD_INT 3
1571: PPUSH
1572: CALL 8606 0 3
1576: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1577: LD_ADDR_EXP 40
1581: PUSH
1582: LD_STRING Kirilenkova
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 4
1590: PPUSH
1591: CALL 8606 0 3
1595: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1596: LD_ADDR_EXP 42
1600: PUSH
1601: LD_STRING Belkov
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 1
1609: PPUSH
1610: CALL 8606 0 3
1614: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1615: LD_ADDR_EXP 43
1619: PUSH
1620: LD_STRING Belkov2
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 1
1628: PPUSH
1629: CALL 8606 0 3
1633: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1634: LD_ADDR_EXP 44
1638: PUSH
1639: LD_STRING Scholtze
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 4
1647: PPUSH
1648: CALL 8606 0 3
1652: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1653: LD_ADDR_EXP 48
1657: PUSH
1658: LD_STRING Popov
1660: PPUSH
1661: LD_INT 0
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL 8606 0 3
1671: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1672: LD_ADDR_EXP 49
1676: PUSH
1677: LD_STRING Platonov
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: LD_INT 0
1685: PPUSH
1686: CALL 8606 0 3
1690: ST_TO_ADDR
// uc_side = 6 ;
1691: LD_ADDR_OWVAR 20
1695: PUSH
1696: LD_INT 6
1698: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1699: LD_ADDR_EXP 50
1703: PUSH
1704: LD_STRING Gaydar
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL 8606 0 3
1717: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1718: LD_ADDR_EXP 45
1722: PUSH
1723: LD_STRING Kuzmov
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: LD_INT 0
1731: PPUSH
1732: CALL 8606 0 3
1736: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1737: LD_EXP 45
1741: PPUSH
1742: LD_INT 109
1744: PPUSH
1745: LD_INT 108
1747: PPUSH
1748: LD_INT 5
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 50
// ComHold ( Kuzmov ) ;
1758: LD_EXP 45
1762: PPUSH
1763: CALL_OW 140
// uc_side = 3 ;
1767: LD_ADDR_OWVAR 20
1771: PUSH
1772: LD_INT 3
1774: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1775: LD_EXP 38
1779: PUSH
1780: LD_EXP 39
1784: PUSH
1785: LD_EXP 40
1789: PUSH
1790: LD_EXP 41
1794: PUSH
1795: LD_EXP 42
1799: PUSH
1800: LD_EXP 43
1804: PUSH
1805: LD_EXP 44
1809: PUSH
1810: LD_EXP 48
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: PPUSH
1825: LD_INT 2
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL 8689 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1835: LD_ADDR_EXP 46
1839: PUSH
1840: LD_STRING 03_other_survivors
1842: PPUSH
1843: CALL_OW 31
1847: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1848: LD_ADDR_EXP 47
1852: PUSH
1853: LD_STRING 03_other_kirov
1855: PPUSH
1856: CALL_OW 31
1860: ST_TO_ADDR
// for i in other_survivors do
1861: LD_ADDR_VAR 0 2
1865: PUSH
1866: LD_EXP 46
1870: PUSH
1871: FOR_IN
1872: IFFALSE 1891
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_INT 2
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
1889: GO 1871
1891: POP
1892: POP
// for i in other_kirov_survivors do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_EXP 47
1902: PUSH
1903: FOR_IN
1904: IFFALSE 1923
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1906: LD_VAR 0 2
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL_OW 49
1921: GO 1903
1923: POP
1924: POP
// PrepareSoldier ( sex_male , 1 ) ;
1925: LD_INT 1
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: CALL_OW 381
// dialogRus = CreateHuman ;
1935: LD_ADDR_EXP 55
1939: PUSH
1940: CALL_OW 44
1944: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
1945: LD_EXP 46
1949: PUSH
1950: LD_EXP 47
1954: PLUS
1955: PUSH
1956: LD_EXP 39
1960: PUSH
1961: LD_EXP 40
1965: PUSH
1966: LD_EXP 41
1970: PUSH
1971: LD_EXP 42
1975: PUSH
1976: LD_EXP 43
1980: PUSH
1981: LD_EXP 44
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: PLUS
1994: PUSH
1995: LD_INT 8
1997: LESS
1998: IFFALSE 2151
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2000: LD_ADDR_VAR 0 3
2004: PUSH
2005: LD_EXP 46
2009: PUSH
2010: LD_EXP 47
2014: PLUS
2015: PUSH
2016: LD_EXP 39
2020: PUSH
2021: LD_EXP 40
2025: PUSH
2026: LD_EXP 41
2030: PUSH
2031: LD_EXP 42
2035: PUSH
2036: LD_EXP 43
2040: PUSH
2041: LD_EXP 44
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: PLUS
2054: ST_TO_ADDR
// current = 8 - current ;
2055: LD_ADDR_VAR 0 3
2059: PUSH
2060: LD_INT 8
2062: PUSH
2063: LD_VAR 0 3
2067: MINUS
2068: ST_TO_ADDR
// for i := 1 to current do
2069: LD_ADDR_VAR 0 2
2073: PUSH
2074: DOUBLE
2075: LD_INT 1
2077: DEC
2078: ST_TO_ADDR
2079: LD_VAR 0 3
2083: PUSH
2084: FOR_TO
2085: IFFALSE 2149
// begin uc_nation = 3 ;
2087: LD_ADDR_OWVAR 21
2091: PUSH
2092: LD_INT 3
2094: ST_TO_ADDR
// uc_side = 6 ;
2095: LD_ADDR_OWVAR 20
2099: PUSH
2100: LD_INT 6
2102: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2103: LD_INT 0
2105: PPUSH
2106: LD_INT 1
2108: PPUSH
2109: LD_INT 4
2111: PPUSH
2112: CALL_OW 12
2116: PPUSH
2117: LD_INT 1
2119: PPUSH
2120: LD_INT 3
2122: PPUSH
2123: CALL_OW 12
2127: PPUSH
2128: CALL_OW 380
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2132: CALL_OW 44
2136: PPUSH
2137: LD_INT 2
2139: PPUSH
2140: LD_INT 0
2142: PPUSH
2143: CALL_OW 49
// end ;
2147: GO 2084
2149: POP
2150: POP
// end ; end ;
2151: LD_VAR 0 1
2155: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2156: LD_INT 0
2158: PPUSH
2159: PPUSH
2160: PPUSH
2161: PPUSH
2162: PPUSH
2163: PPUSH
2164: PPUSH
2165: PPUSH
// rnd = rand ( 1 , 4 ) ;
2166: LD_ADDR_VAR 0 3
2170: PUSH
2171: LD_INT 1
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: CALL_OW 12
2181: ST_TO_ADDR
// uc_side = 6 ;
2182: LD_ADDR_OWVAR 20
2186: PUSH
2187: LD_INT 6
2189: ST_TO_ADDR
// uc_nation = 3 ;
2190: LD_ADDR_OWVAR 21
2194: PUSH
2195: LD_INT 3
2197: ST_TO_ADDR
// if rnd < 4 then
2198: LD_VAR 0 3
2202: PUSH
2203: LD_INT 4
2205: LESS
2206: IFFALSE 2582
// begin vc_chassis = ru_medium_wheeled ;
2208: LD_ADDR_OWVAR 37
2212: PUSH
2213: LD_INT 21
2215: ST_TO_ADDR
// vc_control = control_manual ;
2216: LD_ADDR_OWVAR 38
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// vc_engine = engine_combustion ;
2224: LD_ADDR_OWVAR 39
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2232: LD_ADDR_VAR 0 5
2236: PUSH
2237: LD_INT 1
2239: PPUSH
2240: LD_INT 100
2242: PPUSH
2243: CALL_OW 12
2247: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2248: LD_VAR 0 5
2252: PUSH
2253: LD_EXP 34
2257: PUSH
2258: LD_INT 1
2260: PLUS
2261: LESS
2262: IFFALSE 2274
// vc_weapon = ru_cargo_bay else
2264: LD_ADDR_OWVAR 40
2268: PUSH
2269: LD_INT 51
2271: ST_TO_ADDR
2272: GO 2305
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2274: LD_ADDR_OWVAR 40
2278: PUSH
2279: LD_INT 42
2281: PUSH
2282: LD_INT 43
2284: PUSH
2285: LD_INT 44
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: PUSH
2293: LD_INT 1
2295: PPUSH
2296: LD_INT 3
2298: PPUSH
2299: CALL_OW 12
2303: ARRAY
2304: ST_TO_ADDR
// vehicle = CreateVehicle ;
2305: LD_ADDR_VAR 0 7
2309: PUSH
2310: CALL_OW 45
2314: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2315: LD_VAR 0 7
2319: PPUSH
2320: LD_INT 3
2322: PPUSH
2323: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2327: LD_VAR 0 7
2331: PPUSH
2332: LD_INT 3
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2342: LD_INT 0
2344: PPUSH
2345: LD_INT 1
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: CALL_OW 12
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2371: CALL_OW 44
2375: PPUSH
2376: LD_VAR 0 7
2380: PPUSH
2381: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2385: LD_OWVAR 40
2389: PUSH
2390: LD_INT 51
2392: EQUAL
2393: IFFALSE 2410
// AddCargo ( vehicle , mat_cans , 100 ) ;
2395: LD_VAR 0 7
2399: PPUSH
2400: LD_INT 1
2402: PPUSH
2403: LD_INT 100
2405: PPUSH
2406: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2410: LD_VAR 0 7
2414: PPUSH
2415: LD_INT 500
2417: PPUSH
2418: LD_INT 1000
2420: PPUSH
2421: CALL_OW 12
2425: PPUSH
2426: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2430: LD_ADDR_VAR 0 3
2434: PUSH
2435: LD_INT 1
2437: PPUSH
2438: LD_INT 2
2440: PPUSH
2441: CALL_OW 12
2445: ST_TO_ADDR
// if rnd = 1 then
2446: LD_VAR 0 3
2450: PUSH
2451: LD_INT 1
2453: EQUAL
2454: IFFALSE 2519
// for i := 3 to russianCargoPath1 do
2456: LD_ADDR_VAR 0 2
2460: PUSH
2461: DOUBLE
2462: LD_INT 3
2464: DEC
2465: ST_TO_ADDR
2466: LD_EXP 31
2470: PUSH
2471: FOR_TO
2472: IFFALSE 2515
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2474: LD_VAR 0 7
2478: PPUSH
2479: LD_EXP 31
2483: PUSH
2484: LD_VAR 0 2
2488: ARRAY
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: LD_EXP 31
2498: PUSH
2499: LD_VAR 0 2
2503: ARRAY
2504: PUSH
2505: LD_INT 2
2507: ARRAY
2508: PPUSH
2509: CALL_OW 171
2513: GO 2471
2515: POP
2516: POP
2517: GO 2580
// for i := 3 to russianCargoPath2 do
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: DOUBLE
2525: LD_INT 3
2527: DEC
2528: ST_TO_ADDR
2529: LD_EXP 32
2533: PUSH
2534: FOR_TO
2535: IFFALSE 2578
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2537: LD_VAR 0 7
2541: PPUSH
2542: LD_EXP 32
2546: PUSH
2547: LD_VAR 0 2
2551: ARRAY
2552: PUSH
2553: LD_INT 1
2555: ARRAY
2556: PPUSH
2557: LD_EXP 32
2561: PUSH
2562: LD_VAR 0 2
2566: ARRAY
2567: PUSH
2568: LD_INT 2
2570: ARRAY
2571: PPUSH
2572: CALL_OW 171
2576: GO 2534
2578: POP
2579: POP
// end else
2580: GO 2921
// begin for i := 1 to rand ( 1 , 3 ) do
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: DOUBLE
2588: LD_INT 1
2590: DEC
2591: ST_TO_ADDR
2592: LD_INT 1
2594: PPUSH
2595: LD_INT 3
2597: PPUSH
2598: CALL_OW 12
2602: PUSH
2603: FOR_TO
2604: IFFALSE 2682
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2606: LD_INT 0
2608: PPUSH
2609: LD_INT 1
2611: PPUSH
2612: LD_INT 4
2614: PPUSH
2615: CALL_OW 12
2619: PPUSH
2620: LD_INT 2
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: PPUSH
2631: CALL_OW 380
// unit = CreateHuman ;
2635: LD_ADDR_VAR 0 6
2639: PUSH
2640: CALL_OW 44
2644: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
2645: LD_VAR 0 6
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
2660: LD_VAR 0 6
2664: PPUSH
2665: LD_INT 500
2667: PPUSH
2668: LD_INT 1000
2670: PPUSH
2671: CALL_OW 12
2675: PPUSH
2676: CALL_OW 234
// end ;
2680: GO 2603
2682: POP
2683: POP
// rnd2 = rand ( 1 , 2 ) ;
2684: LD_ADDR_VAR 0 4
2688: PUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 2
2694: PPUSH
2695: CALL_OW 12
2699: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
2700: LD_ADDR_VAR 0 8
2704: PUSH
2705: LD_INT 22
2707: PUSH
2708: LD_INT 6
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 21
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 56
2727: PUSH
2728: EMPTY
2729: LIST
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: LD_INT 60
2736: PUSH
2737: EMPTY
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: PPUSH
2750: CALL_OW 69
2754: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
2755: LD_ADDR_VAR 0 8
2759: PUSH
2760: LD_VAR 0 8
2764: PUSH
2765: LD_EXP 52
2769: DIFF
2770: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
2771: LD_ADDR_VAR 0 8
2775: PUSH
2776: LD_VAR 0 8
2780: PUSH
2781: LD_EXP 53
2785: DIFF
2786: ST_TO_ADDR
// if rnd2 = 1 then
2787: LD_VAR 0 4
2791: PUSH
2792: LD_INT 1
2794: EQUAL
2795: IFFALSE 2860
// for i := 3 to russianCargoPath1 do
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: DOUBLE
2803: LD_INT 3
2805: DEC
2806: ST_TO_ADDR
2807: LD_EXP 31
2811: PUSH
2812: FOR_TO
2813: IFFALSE 2856
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2815: LD_VAR 0 8
2819: PPUSH
2820: LD_EXP 31
2824: PUSH
2825: LD_VAR 0 2
2829: ARRAY
2830: PUSH
2831: LD_INT 1
2833: ARRAY
2834: PPUSH
2835: LD_EXP 31
2839: PUSH
2840: LD_VAR 0 2
2844: ARRAY
2845: PUSH
2846: LD_INT 2
2848: ARRAY
2849: PPUSH
2850: CALL_OW 171
2854: GO 2812
2856: POP
2857: POP
2858: GO 2921
// for i := 3 to russianCargoPath2 do
2860: LD_ADDR_VAR 0 2
2864: PUSH
2865: DOUBLE
2866: LD_INT 3
2868: DEC
2869: ST_TO_ADDR
2870: LD_EXP 32
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2919
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2878: LD_VAR 0 8
2882: PPUSH
2883: LD_EXP 32
2887: PUSH
2888: LD_VAR 0 2
2892: ARRAY
2893: PUSH
2894: LD_INT 1
2896: ARRAY
2897: PPUSH
2898: LD_EXP 32
2902: PUSH
2903: LD_VAR 0 2
2907: ARRAY
2908: PUSH
2909: LD_INT 2
2911: ARRAY
2912: PPUSH
2913: CALL_OW 171
2917: GO 2875
2919: POP
2920: POP
// end ; end ;
2921: LD_VAR 0 1
2925: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
2930: PPUSH
// for i := 1 to 2 do
2931: LD_ADDR_VAR 0 2
2935: PUSH
2936: DOUBLE
2937: LD_INT 1
2939: DEC
2940: ST_TO_ADDR
2941: LD_INT 2
2943: PUSH
2944: FOR_TO
2945: IFFALSE 3011
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
2947: LD_INT 0
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: LD_INT 2
2955: PPUSH
2956: LD_INT 3
2958: PPUSH
2959: CALL_OW 12
2963: PPUSH
2964: CALL_OW 380
// unit = CreateHuman ;
2968: LD_ADDR_VAR 0 3
2972: PUSH
2973: CALL_OW 44
2977: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
2978: LD_VAR 0 3
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
2993: LD_ADDR_EXP 53
2997: PUSH
2998: LD_EXP 53
3002: PUSH
3003: LD_VAR 0 3
3007: ADD
3008: ST_TO_ADDR
// end ;
3009: GO 2944
3011: POP
3012: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3013: LD_INT 0
3015: PPUSH
3016: LD_INT 2
3018: PPUSH
3019: LD_INT 2
3021: PPUSH
3022: LD_INT 3
3024: PPUSH
3025: CALL_OW 12
3029: PPUSH
3030: CALL_OW 380
// unit = CreateHuman ;
3034: LD_ADDR_VAR 0 3
3038: PUSH
3039: CALL_OW 44
3043: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3044: LD_VAR 0 3
3048: PPUSH
3049: LD_INT 3
3051: PPUSH
3052: LD_INT 0
3054: PPUSH
3055: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3059: LD_ADDR_EXP 53
3063: PUSH
3064: LD_EXP 53
3068: PUSH
3069: LD_VAR 0 3
3073: ADD
3074: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3075: LD_EXP 53
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: LD_INT 54
3085: PPUSH
3086: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3090: LD_EXP 53
3094: PPUSH
3095: LD_INT 25
3097: PUSH
3098: LD_INT 2
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PPUSH
3105: CALL_OW 72
3109: PPUSH
3110: LD_INT 0
3112: PPUSH
3113: LD_INT 95
3115: PPUSH
3116: LD_INT 52
3118: PPUSH
3119: LD_INT 2
3121: PPUSH
3122: CALL_OW 205
// end ; end_of_file
3126: LD_VAR 0 1
3130: RET
// export Heike ; export function PrepareHeike ; begin
3131: LD_INT 0
3133: PPUSH
// uc_side = 2 ;
3134: LD_ADDR_OWVAR 20
3138: PUSH
3139: LD_INT 2
3141: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3142: LD_ADDR_EXP 58
3146: PUSH
3147: LD_STRING Heike
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: LD_INT 0
3155: PPUSH
3156: CALL 8606 0 3
3160: ST_TO_ADDR
// if Difficulty >= 2 then
3161: LD_OWVAR 67
3165: PUSH
3166: LD_INT 2
3168: GREATEREQUAL
3169: IFFALSE 3184
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3171: LD_INT 51
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 2
3179: PPUSH
3180: CALL_OW 322
// end ;
3184: LD_VAR 0 1
3188: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3189: LD_INT 0
3191: PPUSH
3192: PPUSH
3193: PPUSH
// currentEnemyGroup = [ ] ;
3194: LD_ADDR_EXP 59
3198: PUSH
3199: EMPTY
3200: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3201: LD_ADDR_VAR 0 2
3205: PUSH
3206: DOUBLE
3207: LD_INT 1
3209: DEC
3210: ST_TO_ADDR
3211: LD_EXP 36
3215: PUSH
3216: FOR_TO
3217: IFFALSE 3472
// begin uc_side = 2 ;
3219: LD_ADDR_OWVAR 20
3223: PUSH
3224: LD_INT 2
3226: ST_TO_ADDR
// uc_nation = nation_arabian ;
3227: LD_ADDR_OWVAR 21
3231: PUSH
3232: LD_INT 2
3234: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3235: LD_ADDR_OWVAR 40
3239: PUSH
3240: LD_INT 23
3242: PUSH
3243: LD_INT 24
3245: PUSH
3246: LD_INT 25
3248: PUSH
3249: LD_INT 26
3251: PUSH
3252: LD_INT 27
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 1
3264: PPUSH
3265: LD_INT 5
3267: PPUSH
3268: CALL_OW 12
3272: ARRAY
3273: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3274: LD_OWVAR 40
3278: PUSH
3279: LD_INT 25
3281: PUSH
3282: LD_INT 26
3284: PUSH
3285: LD_INT 27
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: IN
3293: IFFALSE 3324
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3295: LD_ADDR_OWVAR 37
3299: PUSH
3300: LD_INT 13
3302: PUSH
3303: LD_INT 14
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 12
3320: ARRAY
3321: ST_TO_ADDR
3322: GO 3355
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3324: LD_ADDR_OWVAR 37
3328: PUSH
3329: LD_INT 12
3331: PUSH
3332: LD_INT 13
3334: PUSH
3335: LD_INT 14
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 1
3345: PPUSH
3346: LD_INT 3
3348: PPUSH
3349: CALL_OW 12
3353: ARRAY
3354: ST_TO_ADDR
// vc_control = control_manual ;
3355: LD_ADDR_OWVAR 38
3359: PUSH
3360: LD_INT 1
3362: ST_TO_ADDR
// vc_engine = engine_combustion ;
3363: LD_ADDR_OWVAR 39
3367: PUSH
3368: LD_INT 1
3370: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3371: LD_ADDR_OWVAR 41
3375: PUSH
3376: LD_INT 100
3378: ST_TO_ADDR
// veh = CreateVehicle ;
3379: LD_ADDR_VAR 0 3
3383: PUSH
3384: CALL_OW 45
3388: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3389: LD_ADDR_EXP 59
3393: PUSH
3394: LD_EXP 59
3398: PUSH
3399: LD_VAR 0 3
3403: ADD
3404: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3405: LD_VAR 0 3
3409: PPUSH
3410: LD_INT 7
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3420: LD_OWVAR 40
3424: PUSH
3425: LD_INT 26
3427: EQUAL
3428: IFFALSE 3444
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3430: LD_INT 0
3432: PPUSH
3433: LD_EXP 30
3437: PPUSH
3438: CALL_OW 383
3442: GO 3456
// PrepareMechanic ( false , enemySkillLevel ) ;
3444: LD_INT 0
3446: PPUSH
3447: LD_EXP 29
3451: PPUSH
3452: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3456: CALL_OW 44
3460: PPUSH
3461: LD_VAR 0 3
3465: PPUSH
3466: CALL_OW 52
// end ;
3470: GO 3216
3472: POP
3473: POP
// end ;
3474: LD_VAR 0 1
3478: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3479: LD_INT 0
3481: PPUSH
3482: PPUSH
3483: PPUSH
// currentEnemyGroup = [ ] ;
3484: LD_ADDR_EXP 59
3488: PUSH
3489: EMPTY
3490: ST_TO_ADDR
// for i := 1 to enemyGroupHumans do
3491: LD_ADDR_VAR 0 3
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_EXP 37
3505: PUSH
3506: FOR_TO
3507: IFFALSE 3582
// begin uc_side = 2 ;
3509: LD_ADDR_OWVAR 20
3513: PUSH
3514: LD_INT 2
3516: ST_TO_ADDR
// uc_nation = nation_arabian ;
3517: LD_ADDR_OWVAR 21
3521: PUSH
3522: LD_INT 2
3524: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_EXP 29
3532: PPUSH
3533: CALL_OW 381
// unit = CreateHuman ;
3537: LD_ADDR_VAR 0 4
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3547: LD_ADDR_EXP 59
3551: PUSH
3552: LD_EXP 59
3556: PUSH
3557: LD_VAR 0 4
3561: ADD
3562: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3563: LD_VAR 0 4
3567: PPUSH
3568: LD_VAR 0 1
3572: PPUSH
3573: LD_INT 0
3575: PPUSH
3576: CALL_OW 49
// end ;
3580: GO 3506
3582: POP
3583: POP
// for i := 1 to rand ( 1 , 3 ) do
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: DOUBLE
3590: LD_INT 1
3592: DEC
3593: ST_TO_ADDR
3594: LD_INT 1
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: CALL_OW 12
3604: PUSH
3605: FOR_TO
3606: IFFALSE 3681
// begin uc_side = 2 ;
3608: LD_ADDR_OWVAR 20
3612: PUSH
3613: LD_INT 2
3615: ST_TO_ADDR
// uc_nation = nation_arabian ;
3616: LD_ADDR_OWVAR 21
3620: PUSH
3621: LD_INT 2
3623: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
3624: LD_INT 0
3626: PPUSH
3627: LD_EXP 29
3631: PPUSH
3632: CALL_OW 384
// unit = CreateHuman ;
3636: LD_ADDR_VAR 0 4
3640: PUSH
3641: CALL_OW 44
3645: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3646: LD_ADDR_EXP 59
3650: PUSH
3651: LD_EXP 59
3655: PUSH
3656: LD_VAR 0 4
3660: ADD
3661: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3662: LD_VAR 0 4
3666: PPUSH
3667: LD_VAR 0 1
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL_OW 49
// end ;
3679: GO 3605
3681: POP
3682: POP
// end ;
3683: LD_VAR 0 2
3687: RET
// export function PrepareArabianKiller ; var un ; begin
3688: LD_INT 0
3690: PPUSH
3691: PPUSH
// uc_side = 5 ;
3692: LD_ADDR_OWVAR 20
3696: PUSH
3697: LD_INT 5
3699: ST_TO_ADDR
// uc_nation = nation_arabian ;
3700: LD_ADDR_OWVAR 21
3704: PUSH
3705: LD_INT 2
3707: ST_TO_ADDR
// hc_class = class_soldier ;
3708: LD_ADDR_OWVAR 28
3712: PUSH
3713: LD_INT 1
3715: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3716: LD_ADDR_OWVAR 31
3720: PUSH
3721: LD_INT 0
3723: PUSH
3724: LD_INT 0
3726: PUSH
3727: LD_INT 0
3729: PUSH
3730: LD_INT 0
3732: PUSH
3733: EMPTY
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: ST_TO_ADDR
// un = CreateHuman ;
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: CALL_OW 44
3748: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
3749: LD_VAR 0 2
3753: PPUSH
3754: LD_INT 12
3756: PPUSH
3757: LD_INT 0
3759: PPUSH
3760: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
3764: LD_VAR 0 2
3768: PPUSH
3769: LD_EXP 50
3773: PPUSH
3774: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
3778: LD_ADDR_EXP 21
3782: PUSH
3783: LD_EXP 21
3787: PUSH
3788: LD_INT 1
3790: PLUS
3791: ST_TO_ADDR
// end ; end_of_file
3792: LD_VAR 0 1
3796: RET
// export function Nef_PrepareNature ; var i , un ; begin
3797: LD_INT 0
3799: PPUSH
3800: PPUSH
3801: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_EXP 23
3816: PUSH
3817: LD_INT 1
3819: ARRAY
3820: PUSH
3821: FOR_TO
3822: IFFALSE 3932
// begin uc_side = 0 ;
3824: LD_ADDR_OWVAR 20
3828: PUSH
3829: LD_INT 0
3831: ST_TO_ADDR
// uc_nation = nation_nature ;
3832: LD_ADDR_OWVAR 21
3836: PUSH
3837: LD_INT 0
3839: ST_TO_ADDR
// hc_class = class_apeman ;
3840: LD_ADDR_OWVAR 28
3844: PUSH
3845: LD_INT 12
3847: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3848: LD_ADDR_OWVAR 31
3852: PUSH
3853: LD_EXP 24
3857: PUSH
3858: LD_INT 1
3860: ARRAY
3861: PUSH
3862: LD_EXP 24
3866: PUSH
3867: LD_INT 2
3869: ARRAY
3870: PUSH
3871: LD_EXP 24
3875: PUSH
3876: LD_INT 3
3878: ARRAY
3879: PUSH
3880: LD_EXP 24
3884: PUSH
3885: LD_INT 4
3887: ARRAY
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3895: LD_ADDR_OWVAR 35
3899: PUSH
3900: LD_EXP 25
3904: ST_TO_ADDR
// un = CreateHuman ;
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: CALL_OW 44
3914: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3915: LD_VAR 0 3
3919: PPUSH
3920: LD_INT 8
3922: PPUSH
3923: LD_INT 0
3925: PPUSH
3926: CALL_OW 49
// end ;
3930: GO 3821
3932: POP
3933: POP
// for i := 1 to animalsAmount [ 2 ] do
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: DOUBLE
3940: LD_INT 1
3942: DEC
3943: ST_TO_ADDR
3944: LD_EXP 23
3948: PUSH
3949: LD_INT 2
3951: ARRAY
3952: PUSH
3953: FOR_TO
3954: IFFALSE 4064
// begin uc_side = 0 ;
3956: LD_ADDR_OWVAR 20
3960: PUSH
3961: LD_INT 0
3963: ST_TO_ADDR
// uc_nation = nation_nature ;
3964: LD_ADDR_OWVAR 21
3968: PUSH
3969: LD_INT 0
3971: ST_TO_ADDR
// hc_class = class_phororhacos ;
3972: LD_ADDR_OWVAR 28
3976: PUSH
3977: LD_INT 18
3979: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3980: LD_ADDR_OWVAR 31
3984: PUSH
3985: LD_EXP 24
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PUSH
3994: LD_EXP 24
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PUSH
4003: LD_EXP 24
4007: PUSH
4008: LD_INT 3
4010: ARRAY
4011: PUSH
4012: LD_EXP 24
4016: PUSH
4017: LD_INT 4
4019: ARRAY
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4027: LD_ADDR_OWVAR 35
4031: PUSH
4032: LD_EXP 25
4036: ST_TO_ADDR
// un = CreateHuman ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 44
4046: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 8
4054: PPUSH
4055: LD_INT 0
4057: PPUSH
4058: CALL_OW 49
// end ;
4062: GO 3953
4064: POP
4065: POP
// for i := 1 to animalsAmount [ 3 ] do
4066: LD_ADDR_VAR 0 2
4070: PUSH
4071: DOUBLE
4072: LD_INT 1
4074: DEC
4075: ST_TO_ADDR
4076: LD_EXP 23
4080: PUSH
4081: LD_INT 3
4083: ARRAY
4084: PUSH
4085: FOR_TO
4086: IFFALSE 4196
// begin uc_side = 0 ;
4088: LD_ADDR_OWVAR 20
4092: PUSH
4093: LD_INT 0
4095: ST_TO_ADDR
// uc_nation = nation_nature ;
4096: LD_ADDR_OWVAR 21
4100: PUSH
4101: LD_INT 0
4103: ST_TO_ADDR
// hc_class = class_tiger ;
4104: LD_ADDR_OWVAR 28
4108: PUSH
4109: LD_INT 14
4111: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4112: LD_ADDR_OWVAR 31
4116: PUSH
4117: LD_EXP 24
4121: PUSH
4122: LD_INT 1
4124: ARRAY
4125: PUSH
4126: LD_EXP 24
4130: PUSH
4131: LD_INT 2
4133: ARRAY
4134: PUSH
4135: LD_EXP 24
4139: PUSH
4140: LD_INT 3
4142: ARRAY
4143: PUSH
4144: LD_EXP 24
4148: PUSH
4149: LD_INT 4
4151: ARRAY
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4159: LD_ADDR_OWVAR 35
4163: PUSH
4164: LD_EXP 25
4168: ST_TO_ADDR
// un = CreateHuman ;
4169: LD_ADDR_VAR 0 3
4173: PUSH
4174: CALL_OW 44
4178: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4179: LD_VAR 0 3
4183: PPUSH
4184: LD_INT 8
4186: PPUSH
4187: LD_INT 0
4189: PPUSH
4190: CALL_OW 49
// end ;
4194: GO 4085
4196: POP
4197: POP
// for i := 1 to animalsAmount [ 4 ] do
4198: LD_ADDR_VAR 0 2
4202: PUSH
4203: DOUBLE
4204: LD_INT 1
4206: DEC
4207: ST_TO_ADDR
4208: LD_EXP 23
4212: PUSH
4213: LD_INT 4
4215: ARRAY
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4328
// begin uc_side = 0 ;
4220: LD_ADDR_OWVAR 20
4224: PUSH
4225: LD_INT 0
4227: ST_TO_ADDR
// uc_nation = nation_nature ;
4228: LD_ADDR_OWVAR 21
4232: PUSH
4233: LD_INT 0
4235: ST_TO_ADDR
// hc_class = 21 ;
4236: LD_ADDR_OWVAR 28
4240: PUSH
4241: LD_INT 21
4243: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4244: LD_ADDR_OWVAR 31
4248: PUSH
4249: LD_EXP 24
4253: PUSH
4254: LD_INT 1
4256: ARRAY
4257: PUSH
4258: LD_EXP 24
4262: PUSH
4263: LD_INT 2
4265: ARRAY
4266: PUSH
4267: LD_EXP 24
4271: PUSH
4272: LD_INT 3
4274: ARRAY
4275: PUSH
4276: LD_EXP 24
4280: PUSH
4281: LD_INT 4
4283: ARRAY
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4291: LD_ADDR_OWVAR 35
4295: PUSH
4296: LD_EXP 25
4300: ST_TO_ADDR
// un = CreateHuman ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: CALL_OW 44
4310: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: LD_INT 8
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: CALL_OW 49
// end ;
4326: GO 4217
4328: POP
4329: POP
// for i := 1 to animalsAmount [ 5 ] do
4330: LD_ADDR_VAR 0 2
4334: PUSH
4335: DOUBLE
4336: LD_INT 1
4338: DEC
4339: ST_TO_ADDR
4340: LD_EXP 23
4344: PUSH
4345: LD_INT 5
4347: ARRAY
4348: PUSH
4349: FOR_TO
4350: IFFALSE 4411
// begin uc_side = 0 ;
4352: LD_ADDR_OWVAR 20
4356: PUSH
4357: LD_INT 0
4359: ST_TO_ADDR
// uc_nation = nation_nature ;
4360: LD_ADDR_OWVAR 21
4364: PUSH
4365: LD_INT 0
4367: ST_TO_ADDR
// vc_chassis := 31 ;
4368: LD_ADDR_OWVAR 37
4372: PUSH
4373: LD_INT 31
4375: ST_TO_ADDR
// vc_control := control_rider ;
4376: LD_ADDR_OWVAR 38
4380: PUSH
4381: LD_INT 4
4383: ST_TO_ADDR
// un := CreateVehicle ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: CALL_OW 45
4393: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 8
4401: PPUSH
4402: LD_INT 0
4404: PPUSH
4405: CALL_OW 49
// end ;
4409: GO 4349
4411: POP
4412: POP
// end ; end_of_file
4413: LD_VAR 0 1
4417: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
4418: LD_INT 0
4420: PPUSH
4421: PPUSH
4422: PPUSH
4423: PPUSH
4424: PPUSH
4425: PPUSH
4426: PPUSH
4427: PPUSH
4428: PPUSH
4429: PPUSH
4430: PPUSH
4431: PPUSH
4432: PPUSH
4433: PPUSH
4434: PPUSH
4435: PPUSH
4436: PPUSH
4437: PPUSH
// for unit in units do
4438: LD_ADDR_VAR 0 8
4442: PUSH
4443: LD_VAR 0 1
4447: PUSH
4448: FOR_IN
4449: IFFALSE 4486
// if not ignorePath then
4451: LD_VAR 0 3
4455: NOT
4456: IFFALSE 4472
// SetTag ( unit , 0 ) else
4458: LD_VAR 0 8
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 109
4470: GO 4484
// SetTag ( unit , 1 ) ;
4472: LD_VAR 0 8
4476: PPUSH
4477: LD_INT 1
4479: PPUSH
4480: CALL_OW 109
4484: GO 4448
4486: POP
4487: POP
// startAttacks = false ;
4488: LD_ADDR_VAR 0 21
4492: PUSH
4493: LD_INT 0
4495: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
4496: LD_ADDR_VAR 0 17
4500: PUSH
4501: LD_VAR 0 2
4505: PUSH
4506: LD_VAR 0 2
4510: ARRAY
4511: PUSH
4512: LD_INT 1
4514: ARRAY
4515: PUSH
4516: LD_VAR 0 2
4520: PUSH
4521: LD_VAR 0 2
4525: ARRAY
4526: PUSH
4527: LD_INT 2
4529: ARRAY
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: ST_TO_ADDR
// mechanics = [ ] ;
4535: LD_ADDR_VAR 0 12
4539: PUSH
4540: EMPTY
4541: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
4542: LD_ADDR_VAR 0 9
4546: PUSH
4547: LD_VAR 0 1
4551: PPUSH
4552: LD_INT 50
4554: PUSH
4555: EMPTY
4556: LIST
4557: PUSH
4558: LD_INT 2
4560: PUSH
4561: LD_INT 25
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: LIST
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PPUSH
4590: CALL_OW 72
4594: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
4595: LD_ADDR_VAR 0 11
4599: PUSH
4600: LD_VAR 0 1
4604: PPUSH
4605: LD_INT 50
4607: PUSH
4608: EMPTY
4609: LIST
4610: PUSH
4611: LD_INT 25
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 72
4629: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4630: LD_ADDR_VAR 0 13
4634: PUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: LD_INT 21
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 3
4652: PUSH
4653: LD_INT 24
4655: PUSH
4656: LD_INT 1000
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 72
4675: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
4676: LD_ADDR_VAR 0 15
4680: PUSH
4681: LD_INT 9
4683: PPUSH
4684: CALL_OW 435
4688: ST_TO_ADDR
// if not ignorePath then
4689: LD_VAR 0 3
4693: NOT
4694: IFFALSE 5676
// begin for unit in attackUnits do
4696: LD_ADDR_VAR 0 8
4700: PUSH
4701: LD_VAR 0 9
4705: PUSH
4706: FOR_IN
4707: IFFALSE 5450
// begin if path and not startAttacks then
4709: LD_VAR 0 2
4713: PUSH
4714: LD_VAR 0 21
4718: NOT
4719: AND
4720: IFFALSE 5439
// begin i = 1 ;
4722: LD_ADDR_VAR 0 7
4726: PUSH
4727: LD_INT 1
4729: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
4730: LD_ADDR_VAR 0 15
4734: PUSH
4735: LD_INT 9
4737: PPUSH
4738: CALL_OW 435
4742: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
4743: LD_ADDR_VAR 0 18
4747: PUSH
4748: LD_INT 81
4750: PUSH
4751: LD_VAR 0 8
4755: PPUSH
4756: CALL_OW 255
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PPUSH
4765: CALL_OW 69
4769: PPUSH
4770: LD_VAR 0 8
4774: PPUSH
4775: CALL_OW 74
4779: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
4780: LD_ADDR_VAR 0 19
4784: PUSH
4785: LD_VAR 0 15
4789: PPUSH
4790: LD_VAR 0 8
4794: PPUSH
4795: CALL_OW 250
4799: PPUSH
4800: LD_VAR 0 8
4804: PPUSH
4805: CALL_OW 251
4809: PPUSH
4810: CALL_OW 439
4814: ST_TO_ADDR
// if damageUnits and medics then
4815: LD_VAR 0 13
4819: PUSH
4820: LD_VAR 0 11
4824: AND
4825: IFFALSE 4847
// ComHeal ( medics , damageUnits [ 1 ] ) else
4827: LD_VAR 0 11
4831: PPUSH
4832: LD_VAR 0 13
4836: PUSH
4837: LD_INT 1
4839: ARRAY
4840: PPUSH
4841: CALL_OW 128
4845: GO 4890
// if medics then
4847: LD_VAR 0 11
4851: IFFALSE 4890
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
4853: LD_VAR 0 11
4857: PPUSH
4858: LD_VAR 0 9
4862: PUSH
4863: LD_INT 1
4865: ARRAY
4866: PPUSH
4867: CALL_OW 250
4871: PPUSH
4872: LD_VAR 0 9
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 251
4885: PPUSH
4886: CALL_OW 111
// if not HasTask ( unit ) then
4890: LD_VAR 0 8
4894: PPUSH
4895: CALL_OW 314
4899: NOT
4900: IFFALSE 5139
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
4902: LD_ADDR_VAR 0 19
4906: PUSH
4907: LD_VAR 0 15
4911: PPUSH
4912: LD_VAR 0 8
4916: PPUSH
4917: CALL_OW 250
4921: PPUSH
4922: LD_VAR 0 8
4926: PPUSH
4927: CALL_OW 251
4931: PPUSH
4932: CALL_OW 439
4936: ST_TO_ADDR
// if i > crates then
4937: LD_VAR 0 7
4941: PUSH
4942: LD_VAR 0 15
4946: GREATER
4947: IFFALSE 4957
// i = 1 ;
4949: LD_ADDR_VAR 0 7
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
4957: LD_VAR 0 18
4961: PUSH
4962: LD_VAR 0 19
4966: AND
4967: IFFALSE 5082
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
4969: LD_VAR 0 8
4973: PPUSH
4974: LD_VAR 0 18
4978: PPUSH
4979: CALL_OW 250
4983: PPUSH
4984: LD_VAR 0 18
4988: PPUSH
4989: CALL_OW 251
4993: PPUSH
4994: CALL_OW 297
4998: PUSH
4999: LD_VAR 0 8
5003: PPUSH
5004: LD_VAR 0 19
5008: PUSH
5009: LD_INT 1
5011: ARRAY
5012: PPUSH
5013: LD_VAR 0 19
5017: PUSH
5018: LD_INT 2
5020: ARRAY
5021: PPUSH
5022: CALL_OW 297
5026: LESS
5027: IFFALSE 5045
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5029: LD_VAR 0 9
5033: PPUSH
5034: LD_VAR 0 18
5038: PPUSH
5039: CALL_OW 115
5043: GO 5080
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5045: LD_VAR 0 9
5049: PPUSH
5050: LD_VAR 0 15
5054: PUSH
5055: LD_VAR 0 7
5059: ARRAY
5060: PPUSH
5061: LD_VAR 0 15
5065: PUSH
5066: LD_VAR 0 7
5070: PUSH
5071: LD_INT 1
5073: PLUS
5074: ARRAY
5075: PPUSH
5076: CALL_OW 116
// end else
5080: GO 5139
// if crates then
5082: LD_VAR 0 15
5086: IFFALSE 5125
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5088: LD_VAR 0 9
5092: PPUSH
5093: LD_VAR 0 15
5097: PUSH
5098: LD_VAR 0 7
5102: ARRAY
5103: PPUSH
5104: LD_VAR 0 15
5108: PUSH
5109: LD_VAR 0 7
5113: PUSH
5114: LD_INT 1
5116: PLUS
5117: ARRAY
5118: PPUSH
5119: CALL_OW 116
5123: GO 5139
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5125: LD_VAR 0 9
5129: PPUSH
5130: LD_VAR 0 18
5134: PPUSH
5135: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5139: LD_INT 35
5141: PPUSH
5142: CALL_OW 67
// if path then
5146: LD_VAR 0 2
5150: IFFALSE 5236
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5152: LD_ADDR_VAR 0 16
5156: PUSH
5157: LD_VAR 0 8
5161: PPUSH
5162: LD_VAR 0 2
5166: PPUSH
5167: CALL 6566 0 2
5171: ST_TO_ADDR
// if agressiveMove then
5172: LD_VAR 0 4
5176: IFFALSE 5207
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5178: LD_VAR 0 9
5182: PPUSH
5183: LD_VAR 0 16
5187: PUSH
5188: LD_INT 1
5190: ARRAY
5191: PPUSH
5192: LD_VAR 0 16
5196: PUSH
5197: LD_INT 2
5199: ARRAY
5200: PPUSH
5201: CALL_OW 114
5205: GO 5234
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5207: LD_VAR 0 9
5211: PPUSH
5212: LD_VAR 0 16
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PPUSH
5221: LD_VAR 0 16
5225: PUSH
5226: LD_INT 2
5228: ARRAY
5229: PPUSH
5230: CALL_OW 111
// end else
5234: GO 5244
// startAttacks = true ;
5236: LD_ADDR_VAR 0 21
5240: PUSH
5241: LD_INT 1
5243: ST_TO_ADDR
// i = i + 2 ;
5244: LD_ADDR_VAR 0 7
5248: PUSH
5249: LD_VAR 0 7
5253: PUSH
5254: LD_INT 2
5256: PLUS
5257: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5258: LD_VAR 0 8
5262: PPUSH
5263: CALL_OW 314
5267: NOT
5268: PUSH
5269: LD_INT 22
5271: PUSH
5272: LD_VAR 0 8
5276: PPUSH
5277: CALL_OW 255
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 92
5288: PUSH
5289: LD_VAR 0 16
5293: PUSH
5294: LD_INT 1
5296: ARRAY
5297: PUSH
5298: LD_VAR 0 16
5302: PUSH
5303: LD_INT 2
5305: ARRAY
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: PPUSH
5320: CALL_OW 69
5324: PUSH
5325: LD_INT 3
5327: GREATER
5328: AND
5329: PUSH
5330: LD_VAR 0 21
5334: NOT
5335: AND
5336: IFFALSE 4730
// for i := 1 to path do
5338: LD_ADDR_VAR 0 7
5342: PUSH
5343: DOUBLE
5344: LD_INT 1
5346: DEC
5347: ST_TO_ADDR
5348: LD_VAR 0 2
5352: PUSH
5353: FOR_TO
5354: IFFALSE 5437
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5356: LD_VAR 0 2
5360: PUSH
5361: LD_VAR 0 7
5365: ARRAY
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PUSH
5371: LD_VAR 0 16
5375: PUSH
5376: LD_INT 1
5378: ARRAY
5379: EQUAL
5380: PUSH
5381: LD_VAR 0 2
5385: PUSH
5386: LD_VAR 0 7
5390: ARRAY
5391: PUSH
5392: LD_INT 2
5394: ARRAY
5395: PUSH
5396: LD_VAR 0 16
5400: PUSH
5401: LD_INT 2
5403: ARRAY
5404: EQUAL
5405: AND
5406: IFFALSE 5435
// begin path = path diff [ path [ i ] ] ;
5408: LD_ADDR_VAR 0 2
5412: PUSH
5413: LD_VAR 0 2
5417: PUSH
5418: LD_VAR 0 2
5422: PUSH
5423: LD_VAR 0 7
5427: ARRAY
5428: PUSH
5429: EMPTY
5430: LIST
5431: DIFF
5432: ST_TO_ADDR
// break ;
5433: GO 5437
// end ;
5435: GO 5353
5437: POP
5438: POP
// end ; if not path then
5439: LD_VAR 0 2
5443: NOT
5444: IFFALSE 5448
// break ;
5446: GO 5450
// end ;
5448: GO 4706
5450: POP
5451: POP
// repeat unitsReachPathEnd = 0 ;
5452: LD_ADDR_VAR 0 20
5456: PUSH
5457: LD_INT 0
5459: ST_TO_ADDR
// for attackUnit in attackUnits do
5460: LD_ADDR_VAR 0 10
5464: PUSH
5465: LD_VAR 0 9
5469: PUSH
5470: FOR_IN
5471: IFFALSE 5644
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
5473: LD_VAR 0 10
5477: PPUSH
5478: LD_VAR 0 17
5482: PUSH
5483: LD_INT 1
5485: ARRAY
5486: PPUSH
5487: LD_VAR 0 17
5491: PUSH
5492: LD_INT 2
5494: ARRAY
5495: PPUSH
5496: CALL_OW 297
5500: PUSH
5501: LD_INT 7
5503: LESS
5504: NOT
5505: PUSH
5506: LD_VAR 0 10
5510: PPUSH
5511: CALL_OW 110
5515: PUSH
5516: LD_INT 0
5518: EQUAL
5519: AND
5520: IFFALSE 5586
// begin if agressiveMove then
5522: LD_VAR 0 4
5526: IFFALSE 5557
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
5528: LD_VAR 0 10
5532: PPUSH
5533: LD_VAR 0 17
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: LD_VAR 0 17
5546: PUSH
5547: LD_INT 2
5549: ARRAY
5550: PPUSH
5551: CALL_OW 114
5555: GO 5584
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
5557: LD_VAR 0 10
5561: PPUSH
5562: LD_VAR 0 17
5566: PUSH
5567: LD_INT 1
5569: ARRAY
5570: PPUSH
5571: LD_VAR 0 17
5575: PUSH
5576: LD_INT 2
5578: ARRAY
5579: PPUSH
5580: CALL_OW 111
// end else
5584: GO 5613
// if GetTag ( attackUnit ) = 0 then
5586: LD_VAR 0 10
5590: PPUSH
5591: CALL_OW 110
5595: PUSH
5596: LD_INT 0
5598: EQUAL
5599: IFFALSE 5613
// SetTag ( attackUnit , 1 ) ;
5601: LD_VAR 0 10
5605: PPUSH
5606: LD_INT 1
5608: PPUSH
5609: CALL_OW 109
// if GetTag ( unit ) = 1 then
5613: LD_VAR 0 8
5617: PPUSH
5618: CALL_OW 110
5622: PUSH
5623: LD_INT 1
5625: EQUAL
5626: IFFALSE 5642
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
5628: LD_ADDR_VAR 0 20
5632: PUSH
5633: LD_VAR 0 20
5637: PUSH
5638: LD_INT 1
5640: PLUS
5641: ST_TO_ADDR
// end ;
5642: GO 5470
5644: POP
5645: POP
// wait ( 0 0$1 ) ;
5646: LD_INT 35
5648: PPUSH
5649: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
5653: LD_VAR 0 20
5657: PUSH
5658: LD_VAR 0 9
5662: PUSH
5663: LD_INT 3
5665: MINUS
5666: GREATER
5667: IFFALSE 5452
// wait ( 0 0$10 ) ;
5669: LD_INT 350
5671: PPUSH
5672: CALL_OW 67
// end ; for attackUnit in attackUnits do
5676: LD_ADDR_VAR 0 10
5680: PUSH
5681: LD_VAR 0 9
5685: PUSH
5686: FOR_IN
5687: IFFALSE 5703
// SetTag ( attackUnit , 2 ) ;
5689: LD_VAR 0 10
5693: PPUSH
5694: LD_INT 2
5696: PPUSH
5697: CALL_OW 109
5701: GO 5686
5703: POP
5704: POP
// startAttacks = true ;
5705: LD_ADDR_VAR 0 21
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// if startAttacks then
5713: LD_VAR 0 21
5717: IFFALSE 6536
// begin repeat wait ( 0 0$1 ) ;
5719: LD_INT 35
5721: PPUSH
5722: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5726: LD_ADDR_VAR 0 11
5730: PUSH
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_INT 50
5738: PUSH
5739: EMPTY
5740: LIST
5741: PUSH
5742: LD_INT 25
5744: PUSH
5745: LD_INT 4
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PPUSH
5756: CALL_OW 72
5760: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5761: LD_ADDR_VAR 0 13
5765: PUSH
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 21
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 25
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: LD_INT 3
5793: PUSH
5794: LD_INT 24
5796: PUSH
5797: LD_INT 1000
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: PPUSH
5813: CALL_OW 72
5817: ST_TO_ADDR
// if damageUnits and medics then
5818: LD_VAR 0 13
5822: PUSH
5823: LD_VAR 0 11
5827: AND
5828: IFFALSE 5850
// ComHeal ( medics , damageUnits [ 1 ] ) else
5830: LD_VAR 0 11
5834: PPUSH
5835: LD_VAR 0 13
5839: PUSH
5840: LD_INT 1
5842: ARRAY
5843: PPUSH
5844: CALL_OW 128
5848: GO 5900
// if medics and not damageUnits then
5850: LD_VAR 0 11
5854: PUSH
5855: LD_VAR 0 13
5859: NOT
5860: AND
5861: IFFALSE 5900
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5863: LD_VAR 0 11
5867: PPUSH
5868: LD_VAR 0 9
5872: PUSH
5873: LD_INT 1
5875: ARRAY
5876: PPUSH
5877: CALL_OW 250
5881: PPUSH
5882: LD_VAR 0 9
5886: PUSH
5887: LD_INT 1
5889: ARRAY
5890: PPUSH
5891: CALL_OW 251
5895: PPUSH
5896: CALL_OW 111
// for attackUnit in attackUnits do
5900: LD_ADDR_VAR 0 10
5904: PUSH
5905: LD_VAR 0 9
5909: PUSH
5910: FOR_IN
5911: IFFALSE 6527
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
5913: LD_ADDR_VAR 0 22
5917: PUSH
5918: LD_INT 81
5920: PUSH
5921: LD_VAR 0 10
5925: PPUSH
5926: CALL_OW 255
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PPUSH
5935: CALL_OW 69
5939: PPUSH
5940: LD_VAR 0 10
5944: PPUSH
5945: CALL_OW 74
5949: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
5950: LD_ADDR_VAR 0 23
5954: PUSH
5955: LD_INT 81
5957: PUSH
5958: LD_VAR 0 10
5962: PPUSH
5963: CALL_OW 255
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: LD_INT 2
5974: PUSH
5975: LD_INT 59
5977: PUSH
5978: EMPTY
5979: LIST
5980: PUSH
5981: LD_INT 21
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: LD_INT 21
5993: PUSH
5994: LD_INT 2
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: PPUSH
6014: CALL_OW 69
6018: PPUSH
6019: LD_VAR 0 10
6023: PPUSH
6024: CALL_OW 74
6028: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6029: LD_VAR 0 10
6033: PPUSH
6034: CALL_OW 110
6038: PUSH
6039: LD_INT 2
6041: EQUAL
6042: IFFALSE 6202
// begin if GetDistUnits ( attackUnit , target1 ) + 8 < GetDistUnits ( attackUnit , target2 ) then
6044: LD_VAR 0 10
6048: PPUSH
6049: LD_VAR 0 22
6053: PPUSH
6054: CALL_OW 296
6058: PUSH
6059: LD_INT 8
6061: PLUS
6062: PUSH
6063: LD_VAR 0 10
6067: PPUSH
6068: LD_VAR 0 23
6072: PPUSH
6073: CALL_OW 296
6077: LESS
6078: IFFALSE 6096
// ComAttackUnit ( attackUnit , target1 ) else
6080: LD_VAR 0 10
6084: PPUSH
6085: LD_VAR 0 22
6089: PPUSH
6090: CALL_OW 115
6094: GO 6110
// ComAttackUnit ( attackUnit , target2 ) ;
6096: LD_VAR 0 10
6100: PPUSH
6101: LD_VAR 0 23
6105: PPUSH
6106: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6110: LD_VAR 0 10
6114: PPUSH
6115: CALL_OW 256
6119: PUSH
6120: LD_INT 650
6122: LESS
6123: PUSH
6124: LD_VAR 0 10
6128: PPUSH
6129: CALL_OW 247
6133: PUSH
6134: LD_INT 2
6136: EQUAL
6137: AND
6138: PUSH
6139: LD_VAR 0 10
6143: PPUSH
6144: CALL_OW 263
6148: PUSH
6149: LD_INT 1
6151: EQUAL
6152: AND
6153: IFFALSE 6202
// begin SetTag ( attackUnit , 3 ) ;
6155: LD_VAR 0 10
6159: PPUSH
6160: LD_INT 3
6162: PPUSH
6163: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6167: LD_VAR 0 10
6171: PPUSH
6172: CALL_OW 313
6176: PUSH
6177: LD_INT 1
6179: ARRAY
6180: PPUSH
6181: LD_INT 3
6183: PPUSH
6184: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6188: LD_VAR 0 10
6192: PPUSH
6193: LD_VAR 0 5
6197: PPUSH
6198: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6202: LD_VAR 0 10
6206: PPUSH
6207: LD_VAR 0 5
6211: PPUSH
6212: CALL_OW 308
6216: PUSH
6217: LD_VAR 0 10
6221: PPUSH
6222: CALL_OW 110
6226: PUSH
6227: LD_INT 3
6229: EQUAL
6230: AND
6231: PUSH
6232: LD_VAR 0 10
6236: PPUSH
6237: CALL_OW 313
6241: AND
6242: IFFALSE 6315
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6244: LD_ADDR_VAR 0 14
6248: PUSH
6249: LD_VAR 0 10
6253: PPUSH
6254: CALL_OW 313
6258: PUSH
6259: LD_INT 1
6261: ARRAY
6262: ST_TO_ADDR
// if not driver in mechanics then
6263: LD_VAR 0 14
6267: PUSH
6268: LD_VAR 0 12
6272: IN
6273: NOT
6274: IFFALSE 6292
// mechanics = mechanics ^ driver ;
6276: LD_ADDR_VAR 0 12
6280: PUSH
6281: LD_VAR 0 12
6285: PUSH
6286: LD_VAR 0 14
6290: ADD
6291: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6292: LD_VAR 0 14
6296: PPUSH
6297: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6301: LD_VAR 0 14
6305: PPUSH
6306: LD_VAR 0 10
6310: PPUSH
6311: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6315: LD_VAR 0 10
6319: PPUSH
6320: CALL_OW 256
6324: PUSH
6325: LD_INT 1000
6327: EQUAL
6328: IFFALSE 6446
// begin SetTag ( attackUnit , 2 ) ;
6330: LD_VAR 0 10
6334: PPUSH
6335: LD_INT 2
6337: PPUSH
6338: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6342: LD_VAR 0 10
6346: PPUSH
6347: CALL_OW 247
6351: PUSH
6352: LD_INT 2
6354: EQUAL
6355: PUSH
6356: LD_VAR 0 10
6360: PPUSH
6361: CALL_OW 263
6365: PUSH
6366: LD_INT 1
6368: EQUAL
6369: AND
6370: PUSH
6371: LD_VAR 0 10
6375: PPUSH
6376: CALL_OW 313
6380: NOT
6381: AND
6382: IFFALSE 6446
// begin SetFuel ( attackUnit , 100 ) ;
6384: LD_VAR 0 10
6388: PPUSH
6389: LD_INT 100
6391: PPUSH
6392: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6396: LD_VAR 0 12
6400: PPUSH
6401: LD_VAR 0 10
6405: PPUSH
6406: CALL_OW 74
6410: PPUSH
6411: LD_VAR 0 10
6415: PPUSH
6416: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
6420: LD_ADDR_VAR 0 12
6424: PUSH
6425: LD_VAR 0 12
6429: PUSH
6430: LD_VAR 0 12
6434: PPUSH
6435: LD_VAR 0 10
6439: PPUSH
6440: CALL_OW 74
6444: DIFF
6445: ST_TO_ADDR
// end ; end ; for unit in mechanics do
6446: LD_ADDR_VAR 0 8
6450: PUSH
6451: LD_VAR 0 12
6455: PUSH
6456: FOR_IN
6457: IFFALSE 6523
// begin if not IsInArea ( unit , retreatArea ) then
6459: LD_VAR 0 8
6463: PPUSH
6464: LD_VAR 0 5
6468: PPUSH
6469: CALL_OW 308
6473: NOT
6474: IFFALSE 6490
// ComMoveToArea ( unit , retreatArea ) ;
6476: LD_VAR 0 8
6480: PPUSH
6481: LD_VAR 0 5
6485: PPUSH
6486: CALL_OW 113
// if GetLives ( unit ) < 250 then
6490: LD_VAR 0 8
6494: PPUSH
6495: CALL_OW 256
6499: PUSH
6500: LD_INT 250
6502: LESS
6503: IFFALSE 6521
// mechanics = mechanics diff unit ;
6505: LD_ADDR_VAR 0 12
6509: PUSH
6510: LD_VAR 0 12
6514: PUSH
6515: LD_VAR 0 8
6519: DIFF
6520: ST_TO_ADDR
// end ;
6521: GO 6456
6523: POP
6524: POP
// end ;
6525: GO 5910
6527: POP
6528: POP
// until not attackUnits ;
6529: LD_VAR 0 9
6533: NOT
6534: IFFALSE 5719
// end ; wait ( 0 0$1 ) ;
6536: LD_INT 35
6538: PPUSH
6539: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
6543: LD_VAR 0 1
6547: PPUSH
6548: LD_INT 50
6550: PUSH
6551: EMPTY
6552: LIST
6553: PPUSH
6554: CALL_OW 72
6558: NOT
6559: IFFALSE 4542
// end ;
6561: LD_VAR 0 6
6565: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
6566: LD_INT 0
6568: PPUSH
6569: PPUSH
6570: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
6571: LD_ADDR_VAR 0 5
6575: PUSH
6576: LD_VAR 0 2
6580: PUSH
6581: LD_INT 1
6583: ARRAY
6584: PUSH
6585: LD_INT 1
6587: ARRAY
6588: PUSH
6589: LD_VAR 0 2
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: PUSH
6598: LD_INT 2
6600: ARRAY
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: ST_TO_ADDR
// for i := 2 to path do
6606: LD_ADDR_VAR 0 4
6610: PUSH
6611: DOUBLE
6612: LD_INT 2
6614: DEC
6615: ST_TO_ADDR
6616: LD_VAR 0 2
6620: PUSH
6621: FOR_TO
6622: IFFALSE 6762
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
6624: LD_VAR 0 1
6628: PPUSH
6629: LD_VAR 0 2
6633: PUSH
6634: LD_VAR 0 4
6638: ARRAY
6639: PUSH
6640: LD_INT 1
6642: ARRAY
6643: PPUSH
6644: LD_VAR 0 2
6648: PUSH
6649: LD_VAR 0 4
6653: ARRAY
6654: PUSH
6655: LD_INT 2
6657: ARRAY
6658: PPUSH
6659: CALL_OW 297
6663: PUSH
6664: LD_VAR 0 1
6668: PPUSH
6669: LD_VAR 0 5
6673: PUSH
6674: LD_INT 1
6676: ARRAY
6677: PPUSH
6678: LD_VAR 0 5
6682: PUSH
6683: LD_INT 2
6685: ARRAY
6686: PPUSH
6687: CALL_OW 297
6691: LESS
6692: IFFALSE 6760
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
6694: LD_ADDR_VAR 0 5
6698: PUSH
6699: LD_VAR 0 5
6703: PPUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_VAR 0 2
6711: PUSH
6712: LD_VAR 0 4
6716: ARRAY
6717: PUSH
6718: LD_INT 1
6720: ARRAY
6721: PPUSH
6722: CALL_OW 1
6726: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
6727: LD_ADDR_VAR 0 5
6731: PUSH
6732: LD_VAR 0 5
6736: PPUSH
6737: LD_INT 2
6739: PPUSH
6740: LD_VAR 0 2
6744: PUSH
6745: LD_VAR 0 4
6749: ARRAY
6750: PUSH
6751: LD_INT 2
6753: ARRAY
6754: PPUSH
6755: CALL_OW 1
6759: ST_TO_ADDR
// end ; end ;
6760: GO 6621
6762: POP
6763: POP
// result = nearPosition ;
6764: LD_ADDR_VAR 0 3
6768: PUSH
6769: LD_VAR 0 5
6773: ST_TO_ADDR
// end ;
6774: LD_VAR 0 3
6778: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
6779: LD_EXP 54
6783: PPUSH
6784: CALL_OW 274
6788: PPUSH
6789: LD_INT 1
6791: PPUSH
6792: CALL_OW 275
6796: PUSH
6797: LD_INT 0
6799: GREATER
6800: IFFALSE 6906
6802: GO 6804
6804: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
6805: LD_EXP 53
6809: PPUSH
6810: LD_INT 25
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PPUSH
6820: CALL_OW 72
6824: PPUSH
6825: LD_INT 31
6827: PPUSH
6828: LD_INT 105
6830: PPUSH
6831: LD_INT 51
6833: PPUSH
6834: LD_INT 3
6836: PPUSH
6837: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
6841: LD_EXP 53
6845: PPUSH
6846: LD_INT 25
6848: PUSH
6849: LD_INT 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PPUSH
6856: CALL_OW 72
6860: PPUSH
6861: LD_INT 31
6863: PPUSH
6864: LD_INT 114
6866: PPUSH
6867: LD_INT 58
6869: PPUSH
6870: LD_INT 3
6872: PPUSH
6873: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
6877: LD_EXP 53
6881: PPUSH
6882: LD_INT 25
6884: PUSH
6885: LD_INT 2
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 72
6896: PPUSH
6897: LD_EXP 54
6901: PPUSH
6902: CALL_OW 180
// end ; end_of_file
6906: END
// export function Lose_Burlak ; begin
6907: LD_INT 0
6909: PPUSH
// YouLost ( Burlak ) ;
6910: LD_STRING Burlak
6912: PPUSH
6913: CALL_OW 104
// end ;
6917: LD_VAR 0 1
6921: RET
// export function Lose_Gaydar ; begin
6922: LD_INT 0
6924: PPUSH
// YouLost ( Gaydar ) ;
6925: LD_STRING Gaydar
6927: PPUSH
6928: CALL_OW 104
// end ;
6932: LD_VAR 0 1
6936: RET
// export function Lose_SelfAttack ; begin
6937: LD_INT 0
6939: PPUSH
// YouLost ( SelfAttack ) ;
6940: LD_STRING SelfAttack
6942: PPUSH
6943: CALL_OW 104
// end ;
6947: LD_VAR 0 1
6951: RET
// export function Lose_Arrest ; begin
6952: LD_INT 0
6954: PPUSH
// YouLost ( Arrest ) ;
6955: LD_STRING Arrest
6957: PPUSH
6958: CALL_OW 104
// end ;
6962: LD_VAR 0 1
6966: RET
// export function Lose_ArabBreakthrough ; begin
6967: LD_INT 0
6969: PPUSH
// YouLost ( ArabBreakthrough ) ;
6970: LD_STRING ArabBreakthrough
6972: PPUSH
6973: CALL_OW 104
// end ; end_of_file
6977: LD_VAR 0 1
6981: RET
// export function FinishMission ; begin
6982: LD_INT 0
6984: PPUSH
// SetRewards ;
6985: CALL 7006 0 0
// SavePlayerCharacters ;
6989: CALL 7427 0 0
// SaveGlobalVariables ;
6993: CALL 7655 0 0
// YouWin ;
6997: CALL_OW 103
// end ;
7001: LD_VAR 0 1
7005: RET
// function SetRewards ; var unitsToReward ; begin
7006: LD_INT 0
7008: PPUSH
7009: PPUSH
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7010: LD_INT 22
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PPUSH
7034: CALL_OW 69
7038: NOT
7039: IFFALSE 7053
// AddMedal ( Dismantle , 1 ) else
7041: LD_STRING Dismantle
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: CALL_OW 101
7051: GO 7064
// AddMedal ( Dismantle , - 1 ) ;
7053: LD_STRING Dismantle
7055: PPUSH
7056: LD_INT 1
7058: NEG
7059: PPUSH
7060: CALL_OW 101
// if killedArabianUnits > 30 then
7064: LD_EXP 20
7068: PUSH
7069: LD_INT 30
7071: GREATER
7072: IFFALSE 7094
// begin AddMedal ( EnemyLosses , 1 ) ;
7074: LD_STRING EnemyLosses
7076: PPUSH
7077: LD_INT 1
7079: PPUSH
7080: CALL_OW 101
// heikeHeavyLosses = true ;
7084: LD_ADDR_EXP 4
7088: PUSH
7089: LD_INT 1
7091: ST_TO_ADDR
// end else
7092: GO 7105
// AddMedal ( EnemyLosses , - 1 ) ;
7094: LD_STRING EnemyLosses
7096: PPUSH
7097: LD_INT 1
7099: NEG
7100: PPUSH
7101: CALL_OW 101
// if not lostUnits then
7105: LD_EXP 22
7109: NOT
7110: IFFALSE 7124
// AddMedal ( LittleLosses , 1 ) else
7112: LD_STRING LittleLosses
7114: PPUSH
7115: LD_INT 1
7117: PPUSH
7118: CALL_OW 101
7122: GO 7135
// AddMedal ( LittleLosses , - 1 ) ;
7124: LD_STRING LittleLosses
7126: PPUSH
7127: LD_INT 1
7129: NEG
7130: PPUSH
7131: CALL_OW 101
// GiveMedals ( Main ) ;
7135: LD_STRING Main
7137: PPUSH
7138: CALL_OW 102
// unitsToReward = [ ] ;
7142: LD_ADDR_VAR 0 2
7146: PUSH
7147: EMPTY
7148: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7149: LD_EXP 38
7153: PPUSH
7154: CALL_OW 255
7158: PUSH
7159: LD_INT 3
7161: EQUAL
7162: IFFALSE 7180
// unitsToReward = unitsToReward ^ Burlak ;
7164: LD_ADDR_VAR 0 2
7168: PUSH
7169: LD_VAR 0 2
7173: PUSH
7174: LD_EXP 38
7178: ADD
7179: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7180: LD_EXP 39
7184: PPUSH
7185: CALL_OW 255
7189: PUSH
7190: LD_INT 3
7192: EQUAL
7193: IFFALSE 7211
// unitsToReward = unitsToReward ^ Gnyevko ;
7195: LD_ADDR_VAR 0 2
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_EXP 39
7209: ADD
7210: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7211: LD_EXP 40
7215: PPUSH
7216: CALL_OW 255
7220: PUSH
7221: LD_INT 3
7223: EQUAL
7224: IFFALSE 7242
// unitsToReward = unitsToReward ^ Kirilenkova ;
7226: LD_ADDR_VAR 0 2
7230: PUSH
7231: LD_VAR 0 2
7235: PUSH
7236: LD_EXP 40
7240: ADD
7241: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7242: LD_EXP 41
7246: PPUSH
7247: CALL_OW 255
7251: PUSH
7252: LD_INT 3
7254: EQUAL
7255: IFFALSE 7273
// unitsToReward = unitsToReward ^ Kovalyuk ;
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_VAR 0 2
7266: PUSH
7267: LD_EXP 41
7271: ADD
7272: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
7273: LD_EXP 42
7277: PPUSH
7278: CALL_OW 255
7282: PUSH
7283: LD_INT 3
7285: EQUAL
7286: IFFALSE 7304
// unitsToReward = unitsToReward ^ Belkov ;
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: LD_VAR 0 2
7297: PUSH
7298: LD_EXP 42
7302: ADD
7303: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
7304: LD_EXP 43
7308: PPUSH
7309: CALL_OW 255
7313: PUSH
7314: LD_INT 3
7316: EQUAL
7317: IFFALSE 7335
// unitsToReward = unitsToReward ^ Belkov2 ;
7319: LD_ADDR_VAR 0 2
7323: PUSH
7324: LD_VAR 0 2
7328: PUSH
7329: LD_EXP 43
7333: ADD
7334: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
7335: LD_EXP 44
7339: PPUSH
7340: CALL_OW 255
7344: PUSH
7345: LD_INT 3
7347: EQUAL
7348: IFFALSE 7366
// unitsToReward = unitsToReward ^ Scholtze ;
7350: LD_ADDR_VAR 0 2
7354: PUSH
7355: LD_VAR 0 2
7359: PUSH
7360: LD_EXP 44
7364: ADD
7365: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
7366: LD_EXP 45
7370: PPUSH
7371: CALL_OW 255
7375: PUSH
7376: LD_INT 3
7378: EQUAL
7379: IFFALSE 7397
// unitsToReward = unitsToReward ^ Kuzmov ;
7381: LD_ADDR_VAR 0 2
7385: PUSH
7386: LD_VAR 0 2
7390: PUSH
7391: LD_EXP 45
7395: ADD
7396: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: LD_VAR 0 2
7406: PUSH
7407: LD_EXP 57
7411: ADD
7412: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
7413: LD_VAR 0 2
7417: PPUSH
7418: CALL_OW 43
// end ;
7422: LD_VAR 0 1
7426: RET
// function SavePlayerCharacters ; var othersYour ; begin
7427: LD_INT 0
7429: PPUSH
7430: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
7431: LD_EXP 38
7435: PPUSH
7436: LD_STRING 04_Burlak
7438: PPUSH
7439: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
7443: LD_EXP 39
7447: PPUSH
7448: CALL_OW 255
7452: PUSH
7453: LD_INT 3
7455: EQUAL
7456: IFFALSE 7470
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
7458: LD_EXP 39
7462: PPUSH
7463: LD_STRING 04_Gnyevko
7465: PPUSH
7466: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
7470: LD_EXP 41
7474: PPUSH
7475: CALL_OW 255
7479: PUSH
7480: LD_INT 3
7482: EQUAL
7483: IFFALSE 7497
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
7485: LD_EXP 41
7489: PPUSH
7490: LD_STRING 04_Kovalyuk
7492: PPUSH
7493: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
7497: LD_EXP 40
7501: PPUSH
7502: CALL_OW 255
7506: PUSH
7507: LD_INT 3
7509: EQUAL
7510: IFFALSE 7524
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
7512: LD_EXP 40
7516: PPUSH
7517: LD_STRING 04_Kirilenkova
7519: PPUSH
7520: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
7524: LD_EXP 44
7528: PPUSH
7529: CALL_OW 255
7533: PUSH
7534: LD_INT 3
7536: EQUAL
7537: IFFALSE 7551
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
7539: LD_EXP 44
7543: PPUSH
7544: LD_STRING 04_Scholtze
7546: PPUSH
7547: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
7551: LD_EXP 42
7555: PPUSH
7556: CALL_OW 255
7560: PUSH
7561: LD_INT 3
7563: EQUAL
7564: IFFALSE 7578
// SaveCharacters ( Belkov , 04_Belkov ) ;
7566: LD_EXP 42
7570: PPUSH
7571: LD_STRING 04_Belkov
7573: PPUSH
7574: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
7578: LD_EXP 43
7582: PPUSH
7583: CALL_OW 255
7587: PUSH
7588: LD_INT 3
7590: EQUAL
7591: IFFALSE 7605
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
7593: LD_EXP 43
7597: PPUSH
7598: LD_STRING 04_Belkov2
7600: PPUSH
7601: CALL_OW 38
// if IsOK ( Kuzmov ) then
7605: LD_EXP 45
7609: PPUSH
7610: CALL_OW 302
7614: IFFALSE 7628
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
7616: LD_EXP 45
7620: PPUSH
7621: LD_STRING 04_Kuzmov
7623: PPUSH
7624: CALL_OW 38
// othersYour = randomsToSave ;
7628: LD_ADDR_VAR 0 2
7632: PUSH
7633: LD_EXP 57
7637: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
7638: LD_EXP 57
7642: PPUSH
7643: LD_STRING 04_other_survivors
7645: PPUSH
7646: CALL_OW 38
// end ;
7650: LD_VAR 0 1
7654: RET
// function SaveGlobalVariables ; begin
7655: LD_INT 0
7657: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
7658: LD_EXP 4
7662: PPUSH
7663: LD_STRING 04_HeikeHeavyLosses_1
7665: PPUSH
7666: CALL_OW 39
// end ; end_of_file
7670: LD_VAR 0 1
7674: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
7675: LD_VAR 0 1
7679: PPUSH
7680: CALL_OW 255
7684: PUSH
7685: LD_INT 3
7687: EQUAL
7688: PUSH
7689: LD_VAR 0 1
7693: PPUSH
7694: CALL_OW 266
7698: PUSH
7699: LD_INT 0
7701: EQUAL
7702: AND
7703: PUSH
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_INT 5
7711: PPUSH
7712: CALL_OW 308
7716: NOT
7717: AND
7718: IFFALSE 7729
// Dial_DepotInWrongPlace ( building ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL 10185 0 1
// end ;
7729: PPOPN 2
7731: END
// on BuildingComplete ( building ) do var i , cargo ;
7732: LD_INT 0
7734: PPUSH
7735: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
7736: LD_VAR 0 1
7740: PPUSH
7741: CALL_OW 255
7745: PUSH
7746: LD_INT 3
7748: EQUAL
7749: PUSH
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 266
7759: PUSH
7760: LD_INT 0
7762: EQUAL
7763: AND
7764: PUSH
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_INT 5
7772: PPUSH
7773: CALL_OW 308
7777: AND
7778: PUSH
7779: LD_EXP 7
7783: NOT
7784: AND
7785: PUSH
7786: LD_EXP 8
7790: NOT
7791: AND
7792: IFFALSE 7818
// begin namedBase = true ;
7794: LD_ADDR_EXP 8
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_STRING chuikov
7809: PPUSH
7810: CALL_OW 500
// Dial_FinishDepot ;
7814: CALL 10459 0 0
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL_OW 255
7827: PUSH
7828: LD_INT 6
7830: EQUAL
7831: PUSH
7832: LD_VAR 0 1
7836: PPUSH
7837: CALL_OW 266
7841: PUSH
7842: LD_INT 0
7844: EQUAL
7845: AND
7846: IFFALSE 8045
// begin secondBaseDepot = building ;
7848: LD_ADDR_EXP 54
7852: PUSH
7853: LD_VAR 0 1
7857: ST_TO_ADDR
// uc_side = 6 ;
7858: LD_ADDR_OWVAR 20
7862: PUSH
7863: LD_INT 6
7865: ST_TO_ADDR
// uc_nation = nation_russian ;
7866: LD_ADDR_OWVAR 21
7870: PUSH
7871: LD_INT 3
7873: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
7874: LD_ADDR_OWVAR 37
7878: PUSH
7879: LD_INT 21
7881: ST_TO_ADDR
// vc_control = control_manual ;
7882: LD_ADDR_OWVAR 38
7886: PUSH
7887: LD_INT 1
7889: ST_TO_ADDR
// vc_engine = engine_combustion ;
7890: LD_ADDR_OWVAR 39
7894: PUSH
7895: LD_INT 1
7897: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
7898: LD_ADDR_OWVAR 40
7902: PUSH
7903: LD_INT 51
7905: ST_TO_ADDR
// cargo = CreateVehicle ;
7906: LD_ADDR_VAR 0 3
7910: PUSH
7911: CALL_OW 45
7915: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
7916: LD_VAR 0 3
7920: PPUSH
7921: LD_INT 3
7923: PPUSH
7924: LD_INT 0
7926: PPUSH
7927: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
7931: LD_VAR 0 3
7935: PPUSH
7936: LD_INT 1
7938: PPUSH
7939: LD_INT 100
7941: PPUSH
7942: CALL_OW 291
// ComGive ( cargo , building ) ;
7946: LD_VAR 0 3
7950: PPUSH
7951: LD_VAR 0 1
7955: PPUSH
7956: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
7960: LD_INT 0
7962: PPUSH
7963: LD_INT 2
7965: PPUSH
7966: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
7970: CALL_OW 44
7974: PPUSH
7975: LD_VAR 0 3
7979: PPUSH
7980: CALL_OW 52
// for i := 10 to russianCargoPath1 do
7984: LD_ADDR_VAR 0 2
7988: PUSH
7989: DOUBLE
7990: LD_INT 10
7992: DEC
7993: ST_TO_ADDR
7994: LD_EXP 31
7998: PUSH
7999: FOR_TO
8000: IFFALSE 8043
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8002: LD_VAR 0 3
8006: PPUSH
8007: LD_EXP 31
8011: PUSH
8012: LD_VAR 0 2
8016: ARRAY
8017: PUSH
8018: LD_INT 1
8020: ARRAY
8021: PPUSH
8022: LD_EXP 31
8026: PUSH
8027: LD_VAR 0 2
8031: ARRAY
8032: PUSH
8033: LD_INT 2
8035: ARRAY
8036: PPUSH
8037: CALL_OW 171
8041: GO 7999
8043: POP
8044: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8045: LD_VAR 0 1
8049: PPUSH
8050: CALL_OW 255
8054: PUSH
8055: LD_INT 6
8057: EQUAL
8058: PUSH
8059: LD_VAR 0 1
8063: PPUSH
8064: CALL_OW 266
8068: PUSH
8069: LD_INT 31
8071: EQUAL
8072: AND
8073: IFFALSE 8118
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8075: LD_EXP 53
8079: PPUSH
8080: LD_INT 25
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 56
8092: PUSH
8093: EMPTY
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PPUSH
8100: CALL_OW 72
8104: PUSH
8105: LD_INT 1
8107: ARRAY
8108: PPUSH
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 120
// end ;
8118: PPOPN 3
8120: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 266
8130: PUSH
8131: LD_INT 7
8133: EQUAL
8134: PUSH
8135: LD_EXP 14
8139: NOT
8140: AND
8141: IFFALSE 8147
// Dial_LabUpgraded ;
8143: CALL 10779 0 0
// end ;
8147: PPOPN 1
8149: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8150: LD_VAR 0 1
8154: PUSH
8155: LD_INT 3
8157: EQUAL
8158: PUSH
8159: LD_VAR 0 2
8163: PUSH
8164: LD_INT 2
8166: EQUAL
8167: AND
8168: PUSH
8169: LD_VAR 0 1
8173: PUSH
8174: LD_INT 2
8176: EQUAL
8177: PUSH
8178: LD_VAR 0 2
8182: PUSH
8183: LD_INT 3
8185: EQUAL
8186: AND
8187: OR
8188: IFFALSE 8210
// begin if dial_contactBlock then
8190: LD_EXP 15
8194: IFFALSE 8198
// exit ;
8196: GO 8254
// dial_contactBlock = true ;
8198: LD_ADDR_EXP 15
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// Dial_Contact ;
8206: CALL 12594 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8210: LD_VAR 0 1
8214: PUSH
8215: LD_INT 3
8217: EQUAL
8218: PUSH
8219: LD_VAR 0 2
8223: PUSH
8224: LD_INT 6
8226: EQUAL
8227: AND
8228: PUSH
8229: LD_VAR 0 1
8233: PUSH
8234: LD_INT 6
8236: EQUAL
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_INT 3
8245: EQUAL
8246: AND
8247: OR
8248: IFFALSE 8254
// Lose_SelfAttack ;
8250: CALL 6937 0 0
// end ;
8254: PPOPN 2
8256: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
8257: LD_VAR 0 1
8261: PUSH
8262: LD_EXP 38
8266: EQUAL
8267: IFFALSE 8273
// Lose_Burlak ;
8269: CALL 6907 0 0
// if unit = Gaydar then
8273: LD_VAR 0 1
8277: PUSH
8278: LD_EXP 50
8282: EQUAL
8283: IFFALSE 8289
// Lose_Gaydar ;
8285: CALL 6922 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
8289: LD_VAR 0 1
8293: PPUSH
8294: CALL_OW 255
8298: PUSH
8299: LD_INT 3
8301: EQUAL
8302: PUSH
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 247
8312: PUSH
8313: LD_INT 1
8315: EQUAL
8316: AND
8317: IFFALSE 8333
// lostUnits = lostUnits + 1 ;
8319: LD_ADDR_EXP 22
8323: PUSH
8324: LD_EXP 22
8328: PUSH
8329: LD_INT 1
8331: PLUS
8332: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
8333: LD_VAR 0 1
8337: PPUSH
8338: CALL_OW 255
8342: PUSH
8343: LD_INT 2
8345: EQUAL
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 247
8356: PUSH
8357: LD_INT 1
8359: EQUAL
8360: AND
8361: PUSH
8362: LD_EXP 50
8366: PPUSH
8367: CALL_OW 305
8371: NOT
8372: AND
8373: IFFALSE 8389
// killedArabianUnits = killedArabianUnits + 1 ;
8375: LD_ADDR_EXP 20
8379: PUSH
8380: LD_EXP 20
8384: PUSH
8385: LD_INT 1
8387: PLUS
8388: ST_TO_ADDR
// end ;
8389: PPOPN 1
8391: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
8392: LD_VAR 0 2
8396: PUSH
8397: LD_INT 6
8399: EQUAL
8400: IFFALSE 8414
// SetSide ( building , 6 ) ;
8402: LD_VAR 0 1
8406: PPUSH
8407: LD_INT 6
8409: PPUSH
8410: CALL_OW 235
// end ;
8414: PPOPN 3
8416: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
8417: LD_INT 0
8419: PPUSH
8420: PPUSH
8421: PPUSH
8422: PPUSH
8423: PPUSH
8424: PPUSH
8425: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
8426: LD_ADDR_VAR 0 2
8430: PUSH
8431: LD_INT 22
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 2
8443: PUSH
8444: LD_INT 34
8446: PUSH
8447: LD_INT 51
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 21
8456: PUSH
8457: LD_INT 1
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: LIST
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PPUSH
8473: CALL_OW 69
8477: PUSH
8478: FOR_IN
8479: IFFALSE 8601
// if GetTaskList ( i ) > 0 then
8481: LD_VAR 0 2
8485: PPUSH
8486: CALL_OW 437
8490: PUSH
8491: LD_INT 0
8493: GREATER
8494: IFFALSE 8599
// for j = 1 to GetTaskList ( i ) do
8496: LD_ADDR_VAR 0 3
8500: PUSH
8501: DOUBLE
8502: LD_INT 1
8504: DEC
8505: ST_TO_ADDR
8506: LD_VAR 0 2
8510: PPUSH
8511: CALL_OW 437
8515: PUSH
8516: FOR_TO
8517: IFFALSE 8597
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
8519: LD_ADDR_VAR 0 4
8523: PUSH
8524: LD_VAR 0 2
8528: PPUSH
8529: CALL_OW 437
8533: PUSH
8534: LD_VAR 0 3
8538: ARRAY
8539: PUSH
8540: LD_INT 4
8542: ARRAY
8543: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
8544: LD_VAR 0 4
8548: PPUSH
8549: CALL_OW 255
8553: PUSH
8554: LD_INT 6
8556: EQUAL
8557: PUSH
8558: LD_VAR 0 2
8562: PPUSH
8563: CALL_OW 437
8567: PUSH
8568: LD_VAR 0 3
8572: ARRAY
8573: PUSH
8574: LD_INT 1
8576: ARRAY
8577: PUSH
8578: LD_STRING <
8580: EQUAL
8581: AND
8582: IFFALSE 8595
// SetTaskList ( i , [ ] ) ;
8584: LD_VAR 0 2
8588: PPUSH
8589: EMPTY
8590: PPUSH
8591: CALL_OW 446
// end ;
8595: GO 8516
8597: POP
8598: POP
8599: GO 8478
8601: POP
8602: POP
// end ; end_of_file
8603: PPOPN 8
8605: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8606: LD_INT 0
8608: PPUSH
8609: PPUSH
// if exist_mode then
8610: LD_VAR 0 2
8614: IFFALSE 8639
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8616: LD_ADDR_VAR 0 5
8620: PUSH
8621: LD_EXP 27
8625: PUSH
8626: LD_VAR 0 1
8630: STR
8631: PPUSH
8632: CALL_OW 34
8636: ST_TO_ADDR
8637: GO 8654
// unit := NewCharacter ( ident ) ;
8639: LD_ADDR_VAR 0 5
8643: PUSH
8644: LD_VAR 0 1
8648: PPUSH
8649: CALL_OW 25
8653: ST_TO_ADDR
// if class then
8654: LD_VAR 0 3
8658: IFFALSE 8674
// SetClass ( unit , class ) ;
8660: LD_VAR 0 5
8664: PPUSH
8665: LD_VAR 0 3
8669: PPUSH
8670: CALL_OW 336
// result := unit ;
8674: LD_ADDR_VAR 0 4
8678: PUSH
8679: LD_VAR 0 5
8683: ST_TO_ADDR
// end ;
8684: LD_VAR 0 4
8688: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8689: LD_INT 0
8691: PPUSH
8692: PPUSH
// for unit in units do
8693: LD_ADDR_VAR 0 5
8697: PUSH
8698: LD_VAR 0 1
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8727
// PlaceUnitArea ( unit , area , spawnMode ) ;
8706: LD_VAR 0 5
8710: PPUSH
8711: LD_VAR 0 2
8715: PPUSH
8716: LD_VAR 0 3
8720: PPUSH
8721: CALL_OW 49
8725: GO 8703
8727: POP
8728: POP
// end ;
8729: LD_VAR 0 4
8733: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: LD_VAR 0 1
8748: PUSH
8749: LD_EXP 38
8753: PUSH
8754: LD_EXP 39
8758: PUSH
8759: LD_EXP 42
8763: PUSH
8764: LD_EXP 43
8768: PUSH
8769: LD_EXP 40
8773: PUSH
8774: LD_EXP 41
8778: PUSH
8779: LD_EXP 44
8783: PUSH
8784: LD_EXP 45
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: DIFF
8799: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8800: LD_ADDR_VAR 0 7
8804: PUSH
8805: LD_VAR 0 1
8809: PUSH
8810: LD_INT 1
8812: PPUSH
8813: LD_VAR 0 1
8817: PPUSH
8818: CALL_OW 12
8822: ARRAY
8823: ST_TO_ADDR
// if radio then
8824: LD_VAR 0 4
8828: IFFALSE 8877
// begin if GetSex ( speaker ) = sex_male then
8830: LD_VAR 0 7
8834: PPUSH
8835: CALL_OW 258
8839: PUSH
8840: LD_INT 1
8842: EQUAL
8843: IFFALSE 8861
// SayRadio ( speaker , dialogMID ) else
8845: LD_VAR 0 7
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 94
8859: GO 8875
// SayRadio ( speaker , dialogFID ) ;
8861: LD_VAR 0 7
8865: PPUSH
8866: LD_VAR 0 3
8870: PPUSH
8871: CALL_OW 94
// end else
8875: GO 8922
// begin if GetSex ( speaker ) = sex_male then
8877: LD_VAR 0 7
8881: PPUSH
8882: CALL_OW 258
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: IFFALSE 8908
// Say ( speaker , dialogMID ) else
8892: LD_VAR 0 7
8896: PPUSH
8897: LD_VAR 0 2
8901: PPUSH
8902: CALL_OW 88
8906: GO 8922
// Say ( speaker , dialogFID ) ;
8908: LD_VAR 0 7
8912: PPUSH
8913: LD_VAR 0 3
8917: PPUSH
8918: CALL_OW 88
// end ; result := speaker ;
8922: LD_ADDR_VAR 0 5
8926: PUSH
8927: LD_VAR 0 7
8931: ST_TO_ADDR
// end ;
8932: LD_VAR 0 5
8936: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8937: LD_INT 0
8939: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8940: LD_VAR 0 1
8944: PPUSH
8945: CALL_OW 255
8949: PUSH
8950: LD_VAR 0 3
8954: EQUAL
8955: PUSH
8956: LD_VAR 0 1
8960: PPUSH
8961: CALL_OW 302
8965: AND
8966: IFFALSE 8988
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8968: LD_VAR 0 1
8972: PPUSH
8973: LD_EXP 26
8977: PUSH
8978: LD_VAR 0 2
8982: STR
8983: PPUSH
8984: CALL_OW 38
// end ;
8988: LD_VAR 0 4
8992: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8993: LD_INT 0
8995: PPUSH
8996: PPUSH
8997: PPUSH
// resultCharactersToSave = [ ] ;
8998: LD_ADDR_VAR 0 6
9002: PUSH
9003: EMPTY
9004: ST_TO_ADDR
// for unit in characters do
9005: LD_ADDR_VAR 0 5
9009: PUSH
9010: LD_VAR 0 1
9014: PUSH
9015: FOR_IN
9016: IFFALSE 9064
// if GetSide ( unit ) = side and IsOK ( unit ) then
9018: LD_VAR 0 5
9022: PPUSH
9023: CALL_OW 255
9027: PUSH
9028: LD_VAR 0 3
9032: EQUAL
9033: PUSH
9034: LD_VAR 0 5
9038: PPUSH
9039: CALL_OW 302
9043: AND
9044: IFFALSE 9062
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9046: LD_ADDR_VAR 0 6
9050: PUSH
9051: LD_VAR 0 6
9055: PUSH
9056: LD_VAR 0 5
9060: ADD
9061: ST_TO_ADDR
9062: GO 9015
9064: POP
9065: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9066: LD_VAR 0 6
9070: PPUSH
9071: LD_EXP 26
9075: PUSH
9076: LD_VAR 0 2
9080: STR
9081: PPUSH
9082: CALL_OW 38
// end ;
9086: LD_VAR 0 4
9090: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9091: LD_INT 0
9093: PPUSH
9094: PPUSH
9095: PPUSH
9096: PPUSH
9097: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9098: LD_ADDR_VAR 0 3
9102: PUSH
9103: LD_INT 22
9105: PUSH
9106: LD_INT 3
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 21
9115: PUSH
9116: LD_INT 1
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 50
9125: PUSH
9126: EMPTY
9127: LIST
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9139: LD_ADDR_VAR 0 3
9143: PUSH
9144: LD_VAR 0 3
9148: PUSH
9149: LD_EXP 38
9153: DIFF
9154: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9155: LD_ADDR_VAR 0 3
9159: PUSH
9160: LD_VAR 0 3
9164: PUSH
9165: LD_EXP 48
9169: DIFF
9170: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9171: LD_ADDR_VAR 0 4
9175: PUSH
9176: LD_STRING text
9178: PPUSH
9179: LD_INT 8
9181: PPUSH
9182: LD_INT 8
9184: PPUSH
9185: LD_INT -5
9187: PUSH
9188: LD_EXP 38
9192: PUSH
9193: LD_INT -6
9195: PUSH
9196: LD_INT -2
9198: PUSH
9199: LD_INT -3
9201: PUSH
9202: LD_INT -5
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_VAR 0 3
9217: ADD
9218: PUSH
9219: LD_INT -6
9221: PUSH
9222: LD_INT -4
9224: PUSH
9225: LD_EXP 48
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: ADD
9235: PPUSH
9236: LD_INT 1
9238: PUSH
9239: LD_INT 3
9241: PUSH
9242: LD_INT 2
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 4
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: PPUSH
9261: CALL_OW 42
9265: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
9266: LD_VAR 0 3
9270: PPUSH
9271: LD_INT 6
9273: PPUSH
9274: CALL_OW 235
// SetSide ( Popov , 6 ) ;
9278: LD_EXP 48
9282: PPUSH
9283: LD_INT 6
9285: PPUSH
9286: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
9290: LD_VAR 0 4
9294: PPUSH
9295: LD_INT 3
9297: PPUSH
9298: CALL_OW 235
// burlakTeam = selectedPeople ;
9302: LD_ADDR_EXP 51
9306: PUSH
9307: LD_VAR 0 4
9311: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
9312: LD_ADDR_EXP 52
9316: PUSH
9317: LD_INT 22
9319: PUSH
9320: LD_INT 6
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: LD_INT 21
9329: PUSH
9330: LD_INT 1
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 69
9345: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
9346: LD_ADDR_EXP 52
9350: PUSH
9351: LD_EXP 52
9355: PUSH
9356: LD_EXP 45
9360: DIFF
9361: ST_TO_ADDR
// if not Gnyevko in selectedPeople then
9362: LD_EXP 39
9366: PUSH
9367: LD_VAR 0 4
9371: IN
9372: NOT
9373: IFFALSE 9390
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
9375: LD_EXP 39
9379: PPUSH
9380: LD_STRING Gnyevko
9382: PPUSH
9383: LD_INT 6
9385: PPUSH
9386: CALL 8937 0 3
// if not Kovalyuk in selectedPeople then
9390: LD_EXP 41
9394: PUSH
9395: LD_VAR 0 4
9399: IN
9400: NOT
9401: IFFALSE 9418
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
9403: LD_EXP 41
9407: PPUSH
9408: LD_STRING Kovalyuk
9410: PPUSH
9411: LD_INT 6
9413: PPUSH
9414: CALL 8937 0 3
// if not Kirilenkova in selectedPeople then
9418: LD_EXP 40
9422: PUSH
9423: LD_VAR 0 4
9427: IN
9428: NOT
9429: IFFALSE 9446
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
9431: LD_EXP 40
9435: PPUSH
9436: LD_STRING Kirilenkova
9438: PPUSH
9439: LD_INT 6
9441: PPUSH
9442: CALL 8937 0 3
// if not Scholtze in selectedPeople then
9446: LD_EXP 44
9450: PUSH
9451: LD_VAR 0 4
9455: IN
9456: NOT
9457: IFFALSE 9474
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
9459: LD_EXP 44
9463: PPUSH
9464: LD_STRING Scholtze
9466: PPUSH
9467: LD_INT 6
9469: PPUSH
9470: CALL 8937 0 3
// if not Belkov in selectedPeople then
9474: LD_EXP 42
9478: PUSH
9479: LD_VAR 0 4
9483: IN
9484: NOT
9485: IFFALSE 9502
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
9487: LD_EXP 42
9491: PPUSH
9492: LD_STRING Belkov
9494: PPUSH
9495: LD_INT 6
9497: PPUSH
9498: CALL 8937 0 3
// if not Belkov2 in selectedPeople then
9502: LD_EXP 43
9506: PUSH
9507: LD_VAR 0 4
9511: IN
9512: NOT
9513: IFFALSE 9530
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
9515: LD_EXP 43
9519: PPUSH
9520: LD_STRING Belkov2
9522: PPUSH
9523: LD_INT 6
9525: PPUSH
9526: CALL 8937 0 3
// others = popovTeam diff Popov ;
9530: LD_ADDR_VAR 0 5
9534: PUSH
9535: LD_EXP 52
9539: PUSH
9540: LD_EXP 48
9544: DIFF
9545: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
9546: LD_VAR 0 5
9550: PPUSH
9551: LD_STRING other_survivors_with_popov
9553: PPUSH
9554: LD_INT 6
9556: PPUSH
9557: CALL 8993 0 3
// end ; end_of_file
9561: LD_VAR 0 1
9565: RET
// export function MissionIntro ; var i , unit ; begin
9566: LD_INT 0
9568: PPUSH
9569: PPUSH
9570: PPUSH
// CenterNowOnUnits ( Burlak ) ;
9571: LD_EXP 38
9575: PPUSH
9576: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
9580: LD_EXP 55
9584: PPUSH
9585: LD_STRING D1-RSol1-1
9587: PPUSH
9588: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
9592: LD_EXP 49
9596: PPUSH
9597: LD_STRING D1-Pla-1
9599: PPUSH
9600: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
9604: LD_EXP 38
9608: PPUSH
9609: LD_STRING D1-Bur-1
9611: PPUSH
9612: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
9616: LD_EXP 49
9620: PPUSH
9621: LD_STRING D1-Pla-2
9623: PPUSH
9624: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
9628: LD_EXP 38
9632: PPUSH
9633: LD_STRING D1-Bur-2
9635: PPUSH
9636: CALL_OW 88
// SelectCharacters ;
9640: CALL 9091 0 0
// InGameOff ;
9644: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
9648: LD_STRING M1
9650: PPUSH
9651: CALL_OW 337
// SaveForQuickRestart ;
9655: CALL_OW 22
// for unit in popovTeam do
9659: LD_ADDR_VAR 0 3
9663: PUSH
9664: LD_EXP 52
9668: PUSH
9669: FOR_IN
9670: IFFALSE 9742
// begin for i := 3 to russianCargoPath1 do
9672: LD_ADDR_VAR 0 2
9676: PUSH
9677: DOUBLE
9678: LD_INT 3
9680: DEC
9681: ST_TO_ADDR
9682: LD_EXP 31
9686: PUSH
9687: FOR_TO
9688: IFFALSE 9731
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
9690: LD_VAR 0 3
9694: PPUSH
9695: LD_EXP 31
9699: PUSH
9700: LD_VAR 0 2
9704: ARRAY
9705: PUSH
9706: LD_INT 1
9708: ARRAY
9709: PPUSH
9710: LD_EXP 31
9714: PUSH
9715: LD_VAR 0 2
9719: ARRAY
9720: PUSH
9721: LD_INT 2
9723: ARRAY
9724: PPUSH
9725: CALL_OW 171
9729: GO 9687
9731: POP
9732: POP
// wait ( 0 0$01 ) ;
9733: LD_INT 35
9735: PPUSH
9736: CALL_OW 67
// end ;
9740: GO 9669
9742: POP
9743: POP
// end ;
9744: LD_VAR 0 1
9748: RET
// every 0 0$1 do var unit , driver ;
9749: GO 9751
9751: DISABLE
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
// begin enable ;
9756: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
9757: LD_INT 4
9759: PPUSH
9760: LD_INT 22
9762: PUSH
9763: LD_INT 6
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 70
9774: NOT
9775: PUSH
9776: LD_INT 4
9778: PPUSH
9779: LD_INT 22
9781: PUSH
9782: LD_INT 3
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: LD_INT 21
9794: PUSH
9795: LD_INT 1
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: LD_INT 21
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 70
9825: NOT
9826: AND
9827: IFFALSE 9831
// exit ;
9829: GO 10182
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
9831: LD_ADDR_VAR 0 1
9835: PUSH
9836: LD_INT 4
9838: PPUSH
9839: LD_INT 22
9841: PUSH
9842: LD_INT 6
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PPUSH
9849: CALL_OW 70
9853: PUSH
9854: FOR_IN
9855: IFFALSE 9910
// begin RemoveUnit ( unit ) ;
9857: LD_VAR 0 1
9861: PPUSH
9862: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
9866: LD_VAR 0 1
9870: PUSH
9871: LD_EXP 52
9875: IN
9876: NOT
9877: PUSH
9878: LD_VAR 0 1
9882: PPUSH
9883: CALL_OW 264
9887: PUSH
9888: LD_INT 51
9890: EQUAL
9891: AND
9892: IFFALSE 9908
// evacuatedCargos = evacuatedCargos + 1 ;
9894: LD_ADDR_EXP 9
9898: PUSH
9899: LD_EXP 9
9903: PUSH
9904: LD_INT 1
9906: PLUS
9907: ST_TO_ADDR
// end ;
9908: GO 9854
9910: POP
9911: POP
// if canExitMap then
9912: LD_EXP 5
9916: IFFALSE 10182
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9918: LD_ADDR_VAR 0 1
9922: PUSH
9923: LD_INT 4
9925: PPUSH
9926: LD_INT 22
9928: PUSH
9929: LD_INT 3
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 2
9938: PUSH
9939: LD_INT 21
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 21
9951: PUSH
9952: LD_INT 2
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 70
9972: PUSH
9973: FOR_IN
9974: IFFALSE 10180
// begin if GetType ( unit ) = unit_vehicle then
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 247
9985: PUSH
9986: LD_INT 2
9988: EQUAL
9989: IFFALSE 10089
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
9991: LD_VAR 0 1
9995: PPUSH
9996: CALL_OW 313
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PUSH
10005: LD_EXP 38
10009: PUSH
10010: LD_EXP 39
10014: PUSH
10015: LD_EXP 40
10019: PUSH
10020: LD_EXP 41
10024: PUSH
10025: LD_EXP 42
10029: PUSH
10030: LD_EXP 43
10034: PUSH
10035: LD_EXP 44
10039: PUSH
10040: LD_EXP 45
10044: PUSH
10045: LD_EXP 50
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: IN
10061: NOT
10062: IFFALSE 10089
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10064: LD_ADDR_EXP 57
10068: PUSH
10069: LD_EXP 57
10073: PUSH
10074: LD_VAR 0 1
10078: PPUSH
10079: CALL_OW 313
10083: PUSH
10084: LD_INT 1
10086: ARRAY
10087: ADD
10088: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10089: LD_VAR 0 1
10093: PUSH
10094: LD_EXP 38
10098: PUSH
10099: LD_EXP 39
10103: PUSH
10104: LD_EXP 40
10108: PUSH
10109: LD_EXP 41
10113: PUSH
10114: LD_EXP 42
10118: PUSH
10119: LD_EXP 43
10123: PUSH
10124: LD_EXP 44
10128: PUSH
10129: LD_EXP 45
10133: PUSH
10134: LD_EXP 50
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: IN
10150: NOT
10151: IFFALSE 10169
// randomsToSave = randomsToSave ^ unit ;
10153: LD_ADDR_EXP 57
10157: PUSH
10158: LD_EXP 57
10162: PUSH
10163: LD_VAR 0 1
10167: ADD
10168: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10169: LD_VAR 0 1
10173: PPUSH
10174: CALL_OW 64
// end ;
10178: GO 9973
10180: POP
10181: POP
// end ;
10182: PPOPN 2
10184: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
10185: LD_INT 0
10187: PPUSH
10188: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10189: LD_INT 22
10191: PUSH
10192: LD_INT 3
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 21
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PPUSH
10213: CALL_OW 69
10217: PPUSH
10218: CALL_OW 139
// CenterNowOnUnits ( building ) ;
10222: LD_VAR 0 1
10226: PPUSH
10227: CALL_OW 87
// InGameOn ;
10231: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
10235: LD_EXP 49
10239: PPUSH
10240: LD_STRING D2a-Pla-1
10242: PPUSH
10243: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
10247: LD_ADDR_VAR 0 3
10251: PUSH
10252: LD_INT 22
10254: PUSH
10255: LD_INT 3
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 21
10264: PUSH
10265: LD_INT 1
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 25
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: LIST
10286: PPUSH
10287: CALL_OW 69
10291: PUSH
10292: FOR_IN
10293: IFFALSE 10331
// if GetDistUnits ( building , unit ) < 10 then
10295: LD_VAR 0 1
10299: PPUSH
10300: LD_VAR 0 3
10304: PPUSH
10305: CALL_OW 296
10309: PUSH
10310: LD_INT 10
10312: LESS
10313: IFFALSE 10329
// ComDismantle ( unit , building ) ;
10315: LD_VAR 0 3
10319: PPUSH
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL_OW 167
10329: GO 10292
10331: POP
10332: POP
// repeat wait ( 0 0$1 ) ;
10333: LD_INT 35
10335: PPUSH
10336: CALL_OW 67
// until not IsPlaced ( building ) ;
10340: LD_VAR 0 1
10344: PPUSH
10345: CALL_OW 305
10349: NOT
10350: IFFALSE 10333
// InGameOff ;
10352: CALL_OW 9
// end ;
10356: LD_VAR 0 2
10360: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
10361: LD_EXP 45
10365: PPUSH
10366: CALL_OW 255
10370: PUSH
10371: LD_INT 6
10373: EQUAL
10374: IFFALSE 10456
10376: GO 10378
10378: DISABLE
10379: LD_INT 0
10381: PPUSH
// begin enable ;
10382: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10383: LD_ADDR_VAR 0 1
10387: PUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 21
10400: PUSH
10401: LD_INT 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: PUSH
10417: FOR_IN
10418: IFFALSE 10454
// if GetDistUnits ( unit , Kuzmov ) < 9 then
10420: LD_VAR 0 1
10424: PPUSH
10425: LD_EXP 45
10429: PPUSH
10430: CALL_OW 296
10434: PUSH
10435: LD_INT 9
10437: LESS
10438: IFFALSE 10452
// SetSide ( Kuzmov , 3 ) ;
10440: LD_EXP 45
10444: PPUSH
10445: LD_INT 3
10447: PPUSH
10448: CALL_OW 235
10452: GO 10417
10454: POP
10455: POP
// end ;
10456: PPOPN 1
10458: END
// export function Dial_FinishDepot ; var i ; begin
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
// startEvacuation = true ;
10463: LD_ADDR_EXP 7
10467: PUSH
10468: LD_INT 1
10470: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
10471: LD_STRING MOutBuild
10473: PPUSH
10474: CALL_OW 337
// uc_side = 6 ;
10478: LD_ADDR_OWVAR 20
10482: PUSH
10483: LD_INT 6
10485: ST_TO_ADDR
// uc_nation = 3 ;
10486: LD_ADDR_OWVAR 21
10490: PUSH
10491: LD_INT 3
10493: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
10494: LD_ADDR_OWVAR 37
10498: PUSH
10499: LD_INT 21
10501: ST_TO_ADDR
// vc_control = control_manual ;
10502: LD_ADDR_OWVAR 38
10506: PUSH
10507: LD_INT 1
10509: ST_TO_ADDR
// vc_engine = engine_combustion ;
10510: LD_ADDR_OWVAR 39
10514: PUSH
10515: LD_INT 1
10517: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
10518: LD_ADDR_OWVAR 40
10522: PUSH
10523: LD_INT 51
10525: ST_TO_ADDR
// firstCargo = CreateVehicle ;
10526: LD_ADDR_EXP 56
10530: PUSH
10531: CALL_OW 45
10535: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
10536: LD_EXP 56
10540: PPUSH
10541: LD_INT 3
10543: PPUSH
10544: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
10548: LD_EXP 56
10552: PPUSH
10553: LD_INT 3
10555: PPUSH
10556: LD_INT 0
10558: PPUSH
10559: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
10563: LD_INT 1
10565: PPUSH
10566: LD_INT 3
10568: PPUSH
10569: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
10573: CALL_OW 44
10577: PPUSH
10578: LD_EXP 56
10582: PPUSH
10583: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
10587: LD_EXP 56
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: LD_INT 100
10597: PPUSH
10598: CALL_OW 291
// for i := 1 to 19 do
10602: LD_ADDR_VAR 0 2
10606: PUSH
10607: DOUBLE
10608: LD_INT 1
10610: DEC
10611: ST_TO_ADDR
10612: LD_INT 19
10614: PUSH
10615: FOR_TO
10616: IFFALSE 10659
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10618: LD_EXP 56
10622: PPUSH
10623: LD_EXP 31
10627: PUSH
10628: LD_VAR 0 2
10632: ARRAY
10633: PUSH
10634: LD_INT 1
10636: ARRAY
10637: PPUSH
10638: LD_EXP 31
10642: PUSH
10643: LD_VAR 0 2
10647: ARRAY
10648: PUSH
10649: LD_INT 2
10651: ARRAY
10652: PPUSH
10653: CALL_OW 171
10657: GO 10615
10659: POP
10660: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
10661: LD_EXP 56
10665: PPUSH
10666: LD_INT 105
10668: PPUSH
10669: LD_INT 123
10671: PPUSH
10672: CALL_OW 171
// AddComUnload ( firstCargo ) ;
10676: LD_EXP 56
10680: PPUSH
10681: CALL_OW 219
// for i := 21 to russianCargoPath1 do
10685: LD_ADDR_VAR 0 2
10689: PUSH
10690: DOUBLE
10691: LD_INT 21
10693: DEC
10694: ST_TO_ADDR
10695: LD_EXP 31
10699: PUSH
10700: FOR_TO
10701: IFFALSE 10744
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10703: LD_EXP 56
10707: PPUSH
10708: LD_EXP 31
10712: PUSH
10713: LD_VAR 0 2
10717: ARRAY
10718: PUSH
10719: LD_INT 1
10721: ARRAY
10722: PPUSH
10723: LD_EXP 31
10727: PUSH
10728: LD_VAR 0 2
10732: ARRAY
10733: PUSH
10734: LD_INT 2
10736: ARRAY
10737: PPUSH
10738: CALL_OW 171
10742: GO 10700
10744: POP
10745: POP
// Say ( Burlak , D2-Bur-1 ) ;
10746: LD_EXP 38
10750: PPUSH
10751: LD_STRING D2-Bur-1
10753: PPUSH
10754: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
10758: LD_EXP 49
10762: PPUSH
10763: LD_STRING D2-Pla-1
10765: PPUSH
10766: CALL_OW 94
// PrepareSecondBaseTeam ;
10770: CALL 2926 0 0
// end ;
10774: LD_VAR 0 1
10778: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
10779: LD_INT 0
10781: PPUSH
10782: PPUSH
// dial_labUpgradedBlock = true ;
10783: LD_ADDR_EXP 14
10787: PUSH
10788: LD_INT 1
10790: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
10791: LD_ADDR_VAR 0 2
10795: PUSH
10796: LD_INT 22
10798: PUSH
10799: LD_INT 3
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 21
10808: PUSH
10809: LD_INT 1
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 26
10818: PUSH
10819: LD_INT 1
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 25
10828: PUSH
10829: LD_INT 4
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PPUSH
10842: CALL_OW 69
10846: PUSH
10847: LD_EXP 38
10851: PUSH
10852: LD_EXP 39
10856: PUSH
10857: LD_EXP 40
10861: PUSH
10862: LD_EXP 41
10866: PUSH
10867: LD_EXP 42
10871: PUSH
10872: LD_EXP 43
10876: PUSH
10877: LD_EXP 44
10881: PUSH
10882: LD_EXP 45
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: DIFF
10897: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
10898: LD_EXP 44
10902: PPUSH
10903: CALL_OW 302
10907: PUSH
10908: LD_EXP 44
10912: PPUSH
10913: CALL_OW 255
10917: PUSH
10918: LD_INT 3
10920: EQUAL
10921: AND
10922: IFFALSE 10950
// begin Say ( Scholtze , D5-Sch-1 ) ;
10924: LD_EXP 44
10928: PPUSH
10929: LD_STRING D5-Sch-1
10931: PPUSH
10932: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
10936: LD_EXP 38
10940: PPUSH
10941: LD_STRING D5-Bur-1
10943: PPUSH
10944: CALL_OW 88
// end else
10948: GO 11085
// if randomMaleSci then
10950: LD_VAR 0 2
10954: IFFALSE 10986
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
10956: LD_VAR 0 2
10960: PUSH
10961: LD_INT 1
10963: ARRAY
10964: PPUSH
10965: LD_STRING D5-RSci1-1
10967: PPUSH
10968: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
10972: LD_EXP 38
10976: PPUSH
10977: LD_STRING D5-Bur-1
10979: PPUSH
10980: CALL_OW 88
// end else
10984: GO 11085
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
10986: LD_ADDR_VAR 0 2
10990: PUSH
10991: LD_INT 22
10993: PUSH
10994: LD_INT 3
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 21
11003: PUSH
11004: LD_INT 1
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: LD_INT 26
11013: PUSH
11014: LD_INT 1
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 25
11023: PUSH
11024: LD_INT 4
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: PPUSH
11037: CALL_OW 69
11041: PUSH
11042: LD_EXP 38
11046: PUSH
11047: EMPTY
11048: LIST
11049: DIFF
11050: ST_TO_ADDR
// if randomMaleSci then
11051: LD_VAR 0 2
11055: IFFALSE 11085
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11057: LD_VAR 0 2
11061: PUSH
11062: LD_INT 1
11064: ARRAY
11065: PPUSH
11066: LD_STRING D5-RSci1-1
11068: PPUSH
11069: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11073: LD_EXP 38
11077: PPUSH
11078: LD_STRING D5-Bur-1
11080: PPUSH
11081: CALL_OW 88
// end ; end ; end ;
11085: LD_VAR 0 1
11089: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11090: LD_EXP 56
11094: PPUSH
11095: LD_INT 105
11097: PPUSH
11098: LD_INT 123
11100: PPUSH
11101: CALL_OW 297
11105: PUSH
11106: LD_INT 12
11108: LESS
11109: IFFALSE 11135
11111: GO 11113
11113: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11114: LD_EXP 56
11118: PPUSH
11119: CALL_OW 313
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PPUSH
11128: LD_STRING D2a-RSol1-1
11130: PPUSH
11131: CALL_OW 88
11135: END
// every 0 0$15 trigger startEvacuation do
11136: LD_EXP 7
11140: IFFALSE 11150
11142: GO 11144
11144: DISABLE
// begin enable ;
11145: ENABLE
// CreateEvacuateUnit ;
11146: CALL 2156 0 0
// end ;
11150: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
11151: LD_EXP 9
11155: PUSH
11156: LD_INT 3
11158: GREATEREQUAL
11159: IFFALSE 11258
11161: GO 11163
11163: DISABLE
// begin if IsOk ( Kuzmov ) then
11164: LD_EXP 45
11168: PPUSH
11169: CALL_OW 302
11173: IFFALSE 11243
// begin DialogueOn ;
11175: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
11179: LD_EXP 45
11183: PPUSH
11184: LD_STRING D2b-Kuz-1
11186: PPUSH
11187: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
11191: LD_EXP 38
11195: PPUSH
11196: LD_STRING D2b-Bur-1
11198: PPUSH
11199: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
11203: LD_EXP 45
11207: PPUSH
11208: LD_STRING D2b-Kuz-2
11210: PPUSH
11211: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
11215: LD_EXP 38
11219: PPUSH
11220: LD_STRING D2b-Bur-2
11222: PPUSH
11223: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
11227: LD_EXP 45
11231: PPUSH
11232: LD_STRING D2b-Kuz-3
11234: PPUSH
11235: CALL_OW 88
// DialogueOff ;
11239: CALL_OW 7
// end ; Query ( Q1 ) ;
11243: LD_STRING Q1
11245: PPUSH
11246: CALL_OW 97
// canStealCargo = true ;
11250: LD_ADDR_EXP 10
11254: PUSH
11255: LD_INT 1
11257: ST_TO_ADDR
// end ;
11258: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
11259: LD_EXP 10
11263: IFFALSE 11543
11265: GO 11267
11267: DISABLE
11268: LD_INT 0
11270: PPUSH
11271: PPUSH
// begin enable ;
11272: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
11273: LD_ADDR_VAR 0 2
11277: PUSH
11278: LD_INT 22
11280: PUSH
11281: LD_INT 6
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 21
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 34
11300: PUSH
11301: LD_INT 51
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: PPUSH
11313: CALL_OW 69
11317: PUSH
11318: FOR_IN
11319: IFFALSE 11541
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
11321: LD_ADDR_VAR 0 1
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_INT 3
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 21
11338: PUSH
11339: LD_INT 1
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: LD_INT 50
11348: PUSH
11349: EMPTY
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: PPUSH
11357: CALL_OW 69
11361: PUSH
11362: FOR_IN
11363: IFFALSE 11537
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos then
11365: LD_VAR 0 2
11369: PPUSH
11370: LD_VAR 0 1
11374: PPUSH
11375: CALL_OW 296
11379: PUSH
11380: LD_INT 8
11382: LESS
11383: PUSH
11384: LD_VAR 0 2
11388: PUSH
11389: LD_EXP 12
11393: IN
11394: NOT
11395: AND
11396: IFFALSE 11535
// begin stealCargos = stealCargos ^ cargo ;
11398: LD_ADDR_EXP 12
11402: PUSH
11403: LD_EXP 12
11407: PUSH
11408: LD_VAR 0 2
11412: ADD
11413: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
11414: LD_STRING QQrSteal
11416: PPUSH
11417: CALL_OW 97
11421: PUSH
11422: LD_INT 1
11424: DOUBLE
11425: EQUAL
11426: IFTRUE 11430
11428: GO 11503
11430: POP
// begin DialogueOn ;
11431: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
11435: LD_EXP 38
11439: PPUSH
11440: LD_STRING DQrSteal#1-Bur-1
11442: PPUSH
11443: CALL_OW 88
// DialogueOff ;
11447: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
11451: LD_VAR 0 2
11455: PPUSH
11456: LD_INT 14
11458: PPUSH
11459: CALL_OW 113
// AddComUnload ( cargo ) ;
11463: LD_VAR 0 2
11467: PPUSH
11468: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
11472: LD_VAR 0 2
11476: PPUSH
11477: LD_INT 92
11479: PPUSH
11480: LD_INT 177
11482: PPUSH
11483: CALL_OW 171
// stealWarmCount = stealWarmCount + 1 ;
11487: LD_ADDR_EXP 11
11491: PUSH
11492: LD_EXP 11
11496: PUSH
11497: LD_INT 1
11499: PLUS
11500: ST_TO_ADDR
// end ; 2 :
11501: GO 11535
11503: LD_INT 2
11505: DOUBLE
11506: EQUAL
11507: IFTRUE 11511
11509: GO 11534
11511: POP
// begin DialogueOn ;
11512: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
11516: LD_EXP 38
11520: PPUSH
11521: LD_STRING DQrSteal#2-Bur-1
11523: PPUSH
11524: CALL_OW 88
// DialogueOff ;
11528: CALL_OW 7
// end ; end ;
11532: GO 11535
11534: POP
// end ;
11535: GO 11362
11537: POP
11538: POP
11539: GO 11318
11541: POP
11542: POP
// end ;
11543: PPOPN 2
11545: END
// every 0 0$10 trigger stealWarmCount = 3 do
11546: LD_EXP 11
11550: PUSH
11551: LD_INT 3
11553: EQUAL
11554: IFFALSE 11626
11556: GO 11558
11558: DISABLE
// begin DialogueOn ;
11559: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
11563: LD_EXP 49
11567: PPUSH
11568: LD_STRING D3A-Pla-1
11570: PPUSH
11571: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
11575: LD_EXP 38
11579: PPUSH
11580: LD_STRING D3A-Bur-1
11582: PPUSH
11583: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
11587: LD_EXP 49
11591: PPUSH
11592: LD_STRING D3A-Pla-2
11594: PPUSH
11595: CALL_OW 94
// if IsOK ( Kuzmov ) then
11599: LD_EXP 45
11603: PPUSH
11604: CALL_OW 302
11608: IFFALSE 11622
// Say ( Kuzmov , D3A-Kuz-2 ) ;
11610: LD_EXP 45
11614: PPUSH
11615: LD_STRING D3A-Kuz-2
11617: PPUSH
11618: CALL_OW 88
// DialogueOff ;
11622: CALL_OW 7
// end ;
11626: END
// every 0 0$10 trigger stealWarmCount = 6 do
11627: LD_EXP 11
11631: PUSH
11632: LD_INT 6
11634: EQUAL
11635: IFFALSE 11684
11637: GO 11639
11639: DISABLE
// begin DialogueOn ;
11640: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
11644: LD_EXP 49
11648: PPUSH
11649: LD_STRING D3B-Pla-1
11651: PPUSH
11652: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
11656: LD_EXP 38
11660: PPUSH
11661: LD_STRING D3B-Bur-1
11663: PPUSH
11664: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
11668: LD_EXP 49
11672: PPUSH
11673: LD_STRING D3B-Pla-2
11675: PPUSH
11676: CALL_OW 94
// DialogueOff ;
11680: CALL_OW 7
// end ;
11684: END
// every 0 0$10 trigger stealWarmCount = 7 do
11685: LD_EXP 11
11689: PUSH
11690: LD_INT 7
11692: EQUAL
11693: IFFALSE 11777
11695: GO 11697
11697: DISABLE
// begin DialogueOn ;
11698: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
11702: LD_EXP 49
11706: PPUSH
11707: LD_STRING D3C-Pla-1
11709: PPUSH
11710: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
11714: LD_EXP 38
11718: PPUSH
11719: LD_STRING D3C-Bur-1
11721: PPUSH
11722: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
11726: LD_EXP 49
11730: PPUSH
11731: LD_STRING D3C-Pla-2
11733: PPUSH
11734: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
11738: LD_EXP 38
11742: PPUSH
11743: LD_STRING D3C-Bur-2
11745: PPUSH
11746: CALL_OW 88
// if IsOK ( Kuzmov ) then
11750: LD_EXP 45
11754: PPUSH
11755: CALL_OW 302
11759: IFFALSE 11773
// Say ( Kuzmov , D3C-Kuz-2 ) ;
11761: LD_EXP 45
11765: PPUSH
11766: LD_STRING D3C-Kuz-2
11768: PPUSH
11769: CALL_OW 88
// DialogueOff ;
11773: CALL_OW 7
// end ;
11777: END
// every 0 0$10 trigger stealWarmCount = 8 do
11778: LD_EXP 11
11782: PUSH
11783: LD_INT 8
11785: EQUAL
11786: IFFALSE 11978
11788: GO 11790
11790: DISABLE
// begin canStealCargo = false ;
11791: LD_ADDR_EXP 10
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// DialogueOn ;
11799: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
11803: LD_EXP 49
11807: PPUSH
11808: LD_STRING D3D-Pla-1
11810: PPUSH
11811: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
11815: LD_EXP 38
11819: PPUSH
11820: LD_STRING D3D-Bur-1
11822: PPUSH
11823: CALL_OW 88
// if kurinOpinion = 0 then
11827: LD_EXP 2
11831: PUSH
11832: LD_INT 0
11834: EQUAL
11835: IFFALSE 11855
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
11837: LD_EXP 49
11841: PPUSH
11842: LD_STRING D3E-Pla-1
11844: PPUSH
11845: CALL_OW 94
// Lose_Arrest ;
11849: CALL 6952 0 0
// exit ;
11853: GO 11978
// end ; if meetBelkovBrother = 1 then
11855: LD_EXP 3
11859: PUSH
11860: LD_INT 1
11862: EQUAL
11863: IFFALSE 11883
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
11865: LD_EXP 49
11869: PPUSH
11870: LD_STRING D3E-Pla-1a
11872: PPUSH
11873: CALL_OW 94
// Lose_Arrest ;
11877: CALL 6952 0 0
// exit ;
11881: GO 11978
// end ; if platonovOpinion = 0 then
11883: LD_EXP 1
11887: PUSH
11888: LD_INT 0
11890: EQUAL
11891: IFFALSE 11911
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
11893: LD_EXP 49
11897: PPUSH
11898: LD_STRING D3E-Pla-1b
11900: PPUSH
11901: CALL_OW 94
// Lose_Arrest ;
11905: CALL 6952 0 0
// exit ;
11909: GO 11978
// end ; if platonovOpinion = 1 then
11911: LD_EXP 1
11915: PUSH
11916: LD_INT 1
11918: EQUAL
11919: IFFALSE 11939
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
11921: LD_EXP 49
11925: PPUSH
11926: LD_STRING D3E-Pla-1c
11928: PPUSH
11929: CALL_OW 94
// Lose_Arrest ;
11933: CALL 6952 0 0
// exit ;
11937: GO 11978
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
11939: LD_EXP 49
11943: PPUSH
11944: LD_STRING D3D-Pla-2
11946: PPUSH
11947: CALL_OW 94
// if IsOK ( Kuzmov ) then
11951: LD_EXP 45
11955: PPUSH
11956: CALL_OW 302
11960: IFFALSE 11974
// Say ( Kuzmov , D3D-Kuz-2 ) ;
11962: LD_EXP 45
11966: PPUSH
11967: LD_STRING D3D-Kuz-2
11969: PPUSH
11970: CALL_OW 88
// DialogueOff ;
11974: CALL_OW 7
// end ;
11978: END
// every 0 0$20 do var allyUntis ;
11979: GO 11981
11981: DISABLE
11982: LD_INT 0
11984: PPUSH
// begin enable ;
11985: ENABLE
// wait ( 0 0$10 ) ;
11986: LD_INT 350
11988: PPUSH
11989: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
11993: LD_ADDR_VAR 0 1
11997: PUSH
11998: LD_INT 22
12000: PUSH
12001: LD_INT 6
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 3
12010: PUSH
12011: LD_INT 60
12013: PUSH
12014: EMPTY
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 69
12029: PUSH
12030: LD_EXP 52
12034: DIFF
12035: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_VAR 0 1
12045: PUSH
12046: LD_EXP 50
12050: DIFF
12051: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12052: LD_ADDR_VAR 0 1
12056: PUSH
12057: LD_VAR 0 1
12061: PUSH
12062: LD_EXP 45
12066: DIFF
12067: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12068: LD_ADDR_VAR 0 1
12072: PUSH
12073: LD_VAR 0 1
12077: PUSH
12078: LD_EXP 53
12082: DIFF
12083: ST_TO_ADDR
// if not allyUntis then
12084: LD_VAR 0 1
12088: NOT
12089: IFFALSE 12093
// exit ;
12091: GO 12117
// ComUnload ( allyUntis ) ;
12093: LD_VAR 0 1
12097: PPUSH
12098: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12102: LD_VAR 0 1
12106: PPUSH
12107: LD_INT 92
12109: PPUSH
12110: LD_INT 176
12112: PPUSH
12113: CALL_OW 171
// end ;
12117: PPOPN 1
12119: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
12120: LD_EXP 9
12124: PUSH
12125: LD_EXP 13
12129: GREATEREQUAL
12130: IFFALSE 12143
12132: GO 12134
12134: DISABLE
// begin startEvacuation = false ;
12135: LD_ADDR_EXP 7
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// end ;
12143: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
12144: LD_EXP 9
12148: PUSH
12149: LD_EXP 13
12153: GREATEREQUAL
12154: PUSH
12155: LD_INT 22
12157: PUSH
12158: LD_INT 6
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 2
12167: PUSH
12168: LD_INT 21
12170: PUSH
12171: LD_INT 1
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 21
12180: PUSH
12181: LD_INT 2
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 69
12201: PUSH
12202: LD_EXP 53
12206: DIFF
12207: NOT
12208: AND
12209: IFFALSE 12593
12211: GO 12213
12213: DISABLE
// begin wait ( 1 1$00 ) ;
12214: LD_INT 2100
12216: PPUSH
12217: CALL_OW 67
// DialogueOn ;
12221: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
12225: LD_EXP 49
12229: PPUSH
12230: LD_STRING D4-Pla-1
12232: PPUSH
12233: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
12237: LD_EXP 38
12241: PPUSH
12242: LD_STRING D4-Bur-1
12244: PPUSH
12245: CALL_OW 88
// DialogueOff ;
12249: CALL_OW 7
// wait ( 0 0$2 ) ;
12253: LD_INT 70
12255: PPUSH
12256: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
12260: LD_EXP 45
12264: PPUSH
12265: CALL_OW 302
12269: PUSH
12270: LD_EXP 45
12274: PPUSH
12275: CALL_OW 255
12279: PUSH
12280: LD_INT 3
12282: EQUAL
12283: AND
12284: IFFALSE 12566
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
12286: LD_EXP 45
12290: PPUSH
12291: LD_STRING D4-Kuz-1
12293: PPUSH
12294: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
12298: LD_EXP 42
12302: PPUSH
12303: CALL_OW 302
12307: PUSH
12308: LD_EXP 42
12312: PPUSH
12313: CALL_OW 255
12317: PUSH
12318: LD_INT 3
12320: EQUAL
12321: AND
12322: IFFALSE 12338
// Say ( Belkov , D4-Bel-1 ) else
12324: LD_EXP 42
12328: PPUSH
12329: LD_STRING D4-Bel-1
12331: PPUSH
12332: CALL_OW 88
12336: GO 12376
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
12338: LD_EXP 43
12342: PPUSH
12343: CALL_OW 302
12347: PUSH
12348: LD_EXP 43
12352: PPUSH
12353: CALL_OW 255
12357: PUSH
12358: LD_INT 3
12360: EQUAL
12361: AND
12362: IFFALSE 12376
// Say ( Belkov2 , D4-Bel-1 ) ;
12364: LD_EXP 43
12368: PPUSH
12369: LD_STRING D4-Bel-1
12371: PPUSH
12372: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
12376: LD_EXP 38
12380: PPUSH
12381: LD_STRING D4-Bur-2
12383: PPUSH
12384: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
12388: LD_EXP 39
12392: PPUSH
12393: CALL_OW 302
12397: PUSH
12398: LD_EXP 39
12402: PPUSH
12403: CALL_OW 255
12407: PUSH
12408: LD_INT 3
12410: EQUAL
12411: AND
12412: IFFALSE 12438
// begin Say ( Gnyevko , D4-Gny-2 ) ;
12414: LD_EXP 39
12418: PPUSH
12419: LD_STRING D4-Gny-2
12421: PPUSH
12422: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
12426: LD_EXP 38
12430: PPUSH
12431: LD_STRING D4-Bur-3
12433: PPUSH
12434: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
12438: LD_EXP 38
12442: PPUSH
12443: LD_STRING D4-Bur-3a
12445: PPUSH
12446: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
12450: LD_EXP 42
12454: PPUSH
12455: CALL_OW 302
12459: PUSH
12460: LD_EXP 42
12464: PPUSH
12465: CALL_OW 255
12469: PUSH
12470: LD_INT 3
12472: EQUAL
12473: AND
12474: IFFALSE 12490
// Say ( Belkov , D4-Bel-3 ) else
12476: LD_EXP 42
12480: PPUSH
12481: LD_STRING D4-Bel-3
12483: PPUSH
12484: CALL_OW 88
12488: GO 12528
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
12490: LD_EXP 43
12494: PPUSH
12495: CALL_OW 302
12499: PUSH
12500: LD_EXP 43
12504: PPUSH
12505: CALL_OW 255
12509: PUSH
12510: LD_INT 3
12512: EQUAL
12513: AND
12514: IFFALSE 12528
// Say ( Belkov2 , D4-Bel-3 ) ;
12516: LD_EXP 43
12520: PPUSH
12521: LD_STRING D4-Bel-3
12523: PPUSH
12524: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
12528: LD_EXP 41
12532: PPUSH
12533: CALL_OW 302
12537: PUSH
12538: LD_EXP 41
12542: PPUSH
12543: CALL_OW 255
12547: PUSH
12548: LD_INT 3
12550: EQUAL
12551: AND
12552: IFFALSE 12566
// Say ( Kovalyuk , D4-Kov-3 ) ;
12554: LD_EXP 41
12558: PPUSH
12559: LD_STRING D4-Kov-3
12561: PPUSH
12562: CALL_OW 88
// end ; enableAttacks = true ;
12566: LD_ADDR_EXP 16
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12574: LD_INT 350
12576: PPUSH
12577: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
12581: LD_EXP 38
12585: PPUSH
12586: LD_STRING D7-Bur-1
12588: PPUSH
12589: CALL_OW 88
// end ;
12593: END
// export function Dial_Contact ; begin
12594: LD_INT 0
12596: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
12597: LD_EXP 38
12601: PPUSH
12602: LD_STRING D7-Bur-1a
12604: PPUSH
12605: CALL_OW 88
// wait ( 0 0$12 ) ;
12609: LD_INT 420
12611: PPUSH
12612: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
12616: LD_EXP 38
12620: PPUSH
12621: LD_STRING D7-Bur-1b
12623: PPUSH
12624: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
12628: LD_EXP 42
12632: PPUSH
12633: CALL_OW 302
12637: PUSH
12638: LD_EXP 42
12642: PPUSH
12643: CALL_OW 255
12647: PUSH
12648: LD_INT 3
12650: EQUAL
12651: AND
12652: IFFALSE 12668
// Say ( Belkov , D7-Bel-1 ) else
12654: LD_EXP 42
12658: PPUSH
12659: LD_STRING D7-Bel-1
12661: PPUSH
12662: CALL_OW 88
12666: GO 12706
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
12668: LD_EXP 43
12672: PPUSH
12673: CALL_OW 302
12677: PUSH
12678: LD_EXP 43
12682: PPUSH
12683: CALL_OW 255
12687: PUSH
12688: LD_INT 3
12690: EQUAL
12691: AND
12692: IFFALSE 12706
// Say ( Belkov2 , D7-Bel-1 ) ;
12694: LD_EXP 43
12698: PPUSH
12699: LD_STRING D7-Bel-1
12701: PPUSH
12702: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
12706: LD_EXP 45
12710: PPUSH
12711: CALL_OW 302
12715: PUSH
12716: LD_EXP 45
12720: PPUSH
12721: CALL_OW 255
12725: PUSH
12726: LD_INT 3
12728: EQUAL
12729: AND
12730: IFFALSE 12744
// Say ( Kuzmov , D7-Kuz-1 ) ;
12732: LD_EXP 45
12736: PPUSH
12737: LD_STRING D7-Kuz-1
12739: PPUSH
12740: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
12744: LD_EXP 41
12748: PPUSH
12749: CALL_OW 302
12753: PUSH
12754: LD_EXP 41
12758: PPUSH
12759: CALL_OW 255
12763: PUSH
12764: LD_INT 3
12766: EQUAL
12767: AND
12768: IFFALSE 12782
// Say ( Kovalyuk , D7-Kov-1 ) ;
12770: LD_EXP 41
12774: PPUSH
12775: LD_STRING D7-Kov-1
12777: PPUSH
12778: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
12782: LD_EXP 44
12786: PPUSH
12787: CALL_OW 302
12791: PUSH
12792: LD_EXP 44
12796: PPUSH
12797: CALL_OW 255
12801: PUSH
12802: LD_INT 3
12804: EQUAL
12805: AND
12806: IFFALSE 12820
// Say ( Scholtze , D7-Sch-1 ) ;
12808: LD_EXP 44
12812: PPUSH
12813: LD_STRING D7-Sch-1
12815: PPUSH
12816: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
12820: LD_INT 22
12822: PUSH
12823: LD_INT 3
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 21
12832: PUSH
12833: LD_INT 1
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 26
12842: PUSH
12843: LD_INT 1
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: PPUSH
12855: CALL_OW 69
12859: PPUSH
12860: LD_STRING D7-RSol1-1
12862: PPUSH
12863: LD_STRING 
12865: PPUSH
12866: LD_INT 0
12868: PPUSH
12869: CALL 8734 0 4
// PrepareHeike ;
12873: CALL 3131 0 0
// wait ( 0 0$10 ) ;
12877: LD_INT 350
12879: PPUSH
12880: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
12884: LD_EXP 58
12888: PPUSH
12889: LD_STRING D7a-Hke-1
12891: PPUSH
12892: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
12896: LD_EXP 38
12900: PPUSH
12901: LD_STRING D7a-Bur-1
12903: PPUSH
12904: CALL_OW 88
// wait ( 0 0$50 ) ;
12908: LD_INT 1750
12910: PPUSH
12911: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
12915: LD_EXP 45
12919: PPUSH
12920: CALL_OW 302
12924: PUSH
12925: LD_EXP 45
12929: PPUSH
12930: CALL_OW 255
12934: PUSH
12935: LD_INT 3
12937: EQUAL
12938: AND
12939: IFFALSE 12955
// Say ( Kuzmov , D8-Kuz-1 ) else
12941: LD_EXP 45
12945: PPUSH
12946: LD_STRING D8-Kuz-1
12948: PPUSH
12949: CALL_OW 88
12953: GO 13008
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
12955: LD_INT 22
12957: PUSH
12958: LD_INT 3
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 21
12967: PUSH
12968: LD_INT 1
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 26
12977: PUSH
12978: LD_INT 1
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: PPUSH
12995: LD_STRING D8-RSol1-1
12997: PPUSH
12998: LD_STRING 
13000: PPUSH
13001: LD_INT 0
13003: PPUSH
13004: CALL 8734 0 4
// Say ( Burlak , D8-Bur-1 ) ;
13008: LD_EXP 38
13012: PPUSH
13013: LD_STRING D8-Bur-1
13015: PPUSH
13016: CALL_OW 88
// end ;
13020: LD_VAR 0 1
13024: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
13025: LD_EXP 50
13029: PPUSH
13030: CALL_OW 305
13034: NOT
13035: PUSH
13036: LD_INT 22
13038: PUSH
13039: LD_INT 3
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 21
13048: PUSH
13049: LD_INT 3
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 50
13058: PUSH
13059: EMPTY
13060: LIST
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: LIST
13066: PPUSH
13067: CALL_OW 69
13071: NOT
13072: AND
13073: PUSH
13074: LD_INT 22
13076: PUSH
13077: LD_INT 3
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: LD_INT 21
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 50
13096: PUSH
13097: EMPTY
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 69
13109: PUSH
13110: LD_INT 5
13112: LESS
13113: AND
13114: PUSH
13115: LD_INT 5
13117: PPUSH
13118: LD_INT 22
13120: PUSH
13121: LD_INT 2
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: PPUSH
13131: CALL_OW 70
13135: PUSH
13136: LD_INT 3
13138: GREATER
13139: AND
13140: IFFALSE 13149
13142: GO 13144
13144: DISABLE
// Lose_ArabBreakthrough ;
13145: CALL 6967 0 0
13149: END
// every 1 1$30 trigger currentWave >= enemyWaves do
13150: LD_EXP 17
13154: PUSH
13155: LD_EXP 35
13159: GREATEREQUAL
13160: IFFALSE 13358
13162: GO 13164
13164: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
13165: LD_EXP 49
13169: PPUSH
13170: LD_STRING D9-Pla-1
13172: PPUSH
13173: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
13177: LD_EXP 38
13181: PPUSH
13182: LD_STRING D9-Bur-1
13184: PPUSH
13185: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
13189: LD_EXP 49
13193: PPUSH
13194: LD_STRING D9-Pla-2
13196: PPUSH
13197: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
13201: LD_EXP 38
13205: PPUSH
13206: LD_STRING D9-Bur-2
13208: PPUSH
13209: CALL_OW 88
// wait ( 2 2$0 ) ;
13213: LD_INT 4200
13215: PPUSH
13216: CALL_OW 67
// PlaceUnitArea ( Gaydar , GaydarSpawnArea , false ) ;
13220: LD_EXP 50
13224: PPUSH
13225: LD_INT 6
13227: PPUSH
13228: LD_INT 0
13230: PPUSH
13231: CALL_OW 49
// arabianCanExitMap = true ;
13235: LD_ADDR_EXP 6
13239: PUSH
13240: LD_INT 1
13242: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13243: LD_INT 35
13245: PPUSH
13246: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
13250: LD_EXP 50
13254: PPUSH
13255: CALL_OW 87
// DialogueOn ;
13259: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
13263: LD_EXP 50
13267: PPUSH
13268: LD_STRING D10-Gay-1
13270: PPUSH
13271: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
13275: LD_EXP 38
13279: PPUSH
13280: LD_STRING D10-Bur-1
13282: PPUSH
13283: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
13287: LD_EXP 50
13291: PPUSH
13292: LD_STRING D10-Gay-2
13294: PPUSH
13295: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
13299: LD_EXP 48
13303: PPUSH
13304: LD_STRING D10-Pop-2
13306: PPUSH
13307: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
13311: LD_EXP 50
13315: PPUSH
13316: LD_STRING D10-Gay-3
13318: PPUSH
13319: CALL_OW 94
// DialogueOff ;
13323: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
13327: LD_EXP 50
13331: PPUSH
13332: LD_INT 36
13334: PPUSH
13335: LD_INT 38
13337: PPUSH
13338: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
13342: LD_EXP 50
13346: PPUSH
13347: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
13351: LD_STRING M2
13353: PPUSH
13354: CALL_OW 337
// end ;
13358: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
13359: LD_EXP 6
13363: IFFALSE 13436
13365: GO 13367
13367: DISABLE
13368: LD_INT 0
13370: PPUSH
// begin enable ;
13371: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
13372: LD_INT 22
13374: PUSH
13375: LD_INT 2
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: EMPTY
13383: LIST
13384: PPUSH
13385: CALL_OW 69
13389: PPUSH
13390: LD_INT 13
13392: PPUSH
13393: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
13397: LD_ADDR_VAR 0 1
13401: PUSH
13402: LD_INT 13
13404: PPUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PPUSH
13415: CALL_OW 70
13419: PUSH
13420: FOR_IN
13421: IFFALSE 13434
// RemoveUnit ( unit ) ;
13423: LD_VAR 0 1
13427: PPUSH
13428: CALL_OW 64
13432: GO 13420
13434: POP
13435: POP
// end ;
13436: PPOPN 1
13438: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
13439: LD_EXP 18
13443: NOT
13444: IFFALSE 13834
13446: GO 13448
13448: DISABLE
13449: LD_INT 0
13451: PPUSH
13452: PPUSH
// begin enable ;
13453: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
13454: LD_ADDR_VAR 0 1
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_INT 3
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: PUSH
13488: FOR_IN
13489: IFFALSE 13832
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
13491: LD_VAR 0 1
13495: PPUSH
13496: LD_EXP 50
13500: PPUSH
13501: CALL_OW 296
13505: PUSH
13506: LD_INT 6
13508: LESS
13509: IFFALSE 13830
// begin ComWalk ( Gaydar ) ;
13511: LD_EXP 50
13515: PPUSH
13516: CALL_OW 138
// saveGaydar = true ;
13520: LD_ADDR_EXP 18
13524: PUSH
13525: LD_INT 1
13527: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13528: LD_INT 35
13530: PPUSH
13531: CALL_OW 67
// DialogueOn ;
13535: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
13539: LD_EXP 50
13543: PPUSH
13544: LD_STRING D11-Gay-1
13546: PPUSH
13547: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
13551: LD_EXP 38
13555: PPUSH
13556: LD_EXP 50
13560: PPUSH
13561: CALL_OW 296
13565: PUSH
13566: LD_INT 6
13568: LESS
13569: NOT
13570: IFFALSE 13670
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
13572: LD_ADDR_VAR 0 2
13576: PUSH
13577: LD_INT 22
13579: PUSH
13580: LD_INT 3
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 21
13589: PUSH
13590: LD_INT 1
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 26
13599: PUSH
13600: LD_INT 1
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 50
13609: PUSH
13610: EMPTY
13611: LIST
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PPUSH
13619: CALL_OW 69
13623: PUSH
13624: LD_EXP 50
13628: DIFF
13629: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
13630: LD_VAR 0 2
13634: PPUSH
13635: LD_EXP 50
13639: PPUSH
13640: CALL_OW 74
13644: PPUSH
13645: LD_STRING D11-RSol1-1
13647: PPUSH
13648: CALL_OW 88
// gaydarWaitForBurlak = true ;
13652: LD_ADDR_EXP 19
13656: PUSH
13657: LD_INT 1
13659: ST_TO_ADDR
// DialogueOff ;
13660: CALL_OW 7
// exit ;
13664: POP
13665: POP
13666: GO 13834
// end else
13668: GO 13830
// begin SetSide ( Gaydar , 3 ) ;
13670: LD_EXP 50
13674: PPUSH
13675: LD_INT 3
13677: PPUSH
13678: CALL_OW 235
// Say ( Gaydar , D11-Gay-2 ) ;
13682: LD_EXP 50
13686: PPUSH
13687: LD_STRING D11-Gay-2
13689: PPUSH
13690: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
13694: LD_EXP 38
13698: PPUSH
13699: LD_STRING D11-Bur-2
13701: PPUSH
13702: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
13706: LD_EXP 50
13710: PPUSH
13711: LD_STRING D11-Gay-3
13713: PPUSH
13714: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
13718: LD_EXP 38
13722: PPUSH
13723: LD_STRING D11-Bur-3
13725: PPUSH
13726: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
13730: LD_EXP 50
13734: PPUSH
13735: LD_STRING D11-Gay-4
13737: PPUSH
13738: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
13742: LD_EXP 38
13746: PPUSH
13747: LD_STRING D11-Bur-4
13749: PPUSH
13750: CALL_OW 88
// wait ( 0 0$2 ) ;
13754: LD_INT 70
13756: PPUSH
13757: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
13761: LD_EXP 48
13765: PPUSH
13766: LD_STRING D12-Pop-1
13768: PPUSH
13769: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
13773: LD_EXP 38
13777: PPUSH
13778: LD_STRING D12-Bur-1
13780: PPUSH
13781: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
13785: LD_EXP 49
13789: PPUSH
13790: LD_STRING D12-Pla-1
13792: PPUSH
13793: CALL_OW 94
// DialogueOff ;
13797: CALL_OW 7
// canExitMap = true ;
13801: LD_ADDR_EXP 5
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
13809: LD_STRING MFinal
13811: PPUSH
13812: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
13816: LD_INT 4
13818: PPUSH
13819: LD_INT 1
13821: PPUSH
13822: CALL_OW 424
// exit ;
13826: POP
13827: POP
13828: GO 13834
// end ; end ; end ;
13830: GO 13488
13832: POP
13833: POP
// end ;
13834: PPOPN 2
13836: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
13837: LD_EXP 38
13841: PPUSH
13842: LD_EXP 50
13846: PPUSH
13847: CALL_OW 296
13851: PUSH
13852: LD_INT 6
13854: LESS
13855: PUSH
13856: LD_EXP 19
13860: AND
13861: IFFALSE 14026
13863: GO 13865
13865: DISABLE
// begin SetSide ( Gaydar , 3 ) ;
13866: LD_EXP 50
13870: PPUSH
13871: LD_INT 3
13873: PPUSH
13874: CALL_OW 235
// DialogueOn ;
13878: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
13882: LD_EXP 50
13886: PPUSH
13887: LD_STRING D11-Gay-2
13889: PPUSH
13890: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
13894: LD_EXP 38
13898: PPUSH
13899: LD_STRING D11-Bur-2
13901: PPUSH
13902: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
13906: LD_EXP 50
13910: PPUSH
13911: LD_STRING D11-Gay-3
13913: PPUSH
13914: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
13918: LD_EXP 38
13922: PPUSH
13923: LD_STRING D11-Bur-3
13925: PPUSH
13926: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
13930: LD_EXP 50
13934: PPUSH
13935: LD_STRING D11-Gay-4
13937: PPUSH
13938: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
13942: LD_EXP 38
13946: PPUSH
13947: LD_STRING D11-Bur-4
13949: PPUSH
13950: CALL_OW 88
// wait ( 0 0$2 ) ;
13954: LD_INT 70
13956: PPUSH
13957: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
13961: LD_EXP 48
13965: PPUSH
13966: LD_STRING D12-Pop-1
13968: PPUSH
13969: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
13973: LD_EXP 38
13977: PPUSH
13978: LD_STRING D12-Bur-1
13980: PPUSH
13981: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
13985: LD_EXP 49
13989: PPUSH
13990: LD_STRING D12-Pla-1
13992: PPUSH
13993: CALL_OW 94
// DialogueOff ;
13997: CALL_OW 7
// canExitMap = true ;
14001: LD_ADDR_EXP 5
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
14009: LD_STRING MFinal
14011: PPUSH
14012: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
14016: LD_INT 4
14018: PPUSH
14019: LD_INT 1
14021: PPUSH
14022: CALL_OW 424
// end ;
14026: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
14027: LD_INT 22
14029: PUSH
14030: LD_INT 3
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 21
14039: PUSH
14040: LD_INT 1
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PPUSH
14051: CALL_OW 69
14055: PUSH
14056: LD_INT 0
14058: EQUAL
14059: PUSH
14060: LD_EXP 5
14064: AND
14065: IFFALSE 14074
14067: GO 14069
14069: DISABLE
// FinishMission ; end_of_file
14070: CALL 6982 0 0
14074: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
14075: LD_EXP 16
14079: PUSH
14080: LD_EXP 17
14084: PUSH
14085: LD_INT 0
14087: EQUAL
14088: AND
14089: PUSH
14090: LD_EXP 17
14094: PUSH
14095: LD_EXP 35
14099: LESS
14100: AND
14101: IFFALSE 14153
14103: GO 14105
14105: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
14106: LD_INT 7
14108: PUSH
14109: LD_INT 10
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 1
14118: PPUSH
14119: LD_INT 2
14121: PPUSH
14122: CALL_OW 12
14126: ARRAY
14127: PPUSH
14128: CALL 3479 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
14132: LD_EXP 59
14136: PPUSH
14137: EMPTY
14138: PPUSH
14139: LD_INT 1
14141: PPUSH
14142: LD_INT 1
14144: PPUSH
14145: LD_INT 1
14147: NEG
14148: PPUSH
14149: CALL 4418 0 5
// end ;
14153: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
14154: LD_EXP 16
14158: PUSH
14159: LD_EXP 17
14163: PUSH
14164: LD_INT 0
14166: GREATEREQUAL
14167: AND
14168: PUSH
14169: LD_EXP 17
14173: PUSH
14174: LD_EXP 35
14178: LESS
14179: AND
14180: IFFALSE 14410
14182: GO 14184
14184: DISABLE
// begin currentWave = currentWave + 1 ;
14185: LD_ADDR_EXP 17
14189: PUSH
14190: LD_EXP 17
14194: PUSH
14195: LD_INT 1
14197: PLUS
14198: ST_TO_ADDR
// PrepareArabianVehicles ;
14199: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
14203: LD_EXP 59
14207: PPUSH
14208: LD_INT 135
14210: PUSH
14211: LD_INT 4
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 134
14220: PUSH
14221: LD_INT 19
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 132
14230: PUSH
14231: LD_INT 26
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 128
14240: PUSH
14241: LD_INT 31
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 123
14250: PUSH
14251: LD_INT 37
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 118
14260: PUSH
14261: LD_INT 45
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 112
14270: PUSH
14271: LD_INT 51
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 106
14280: PUSH
14281: LD_INT 57
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 99
14290: PUSH
14291: LD_INT 62
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 93
14300: PUSH
14301: LD_INT 67
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 86
14310: PUSH
14311: LD_INT 72
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: LD_INT 78
14320: PUSH
14321: LD_INT 75
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 71
14330: PUSH
14331: LD_INT 81
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 69
14340: PUSH
14341: LD_INT 88
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 71
14350: PUSH
14351: LD_INT 95
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 74
14360: PUSH
14361: LD_INT 103
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 80
14370: PUSH
14371: LD_INT 113
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: PPUSH
14397: LD_INT 0
14399: PPUSH
14400: LD_INT 1
14402: PPUSH
14403: LD_INT 11
14405: PPUSH
14406: CALL 4418 0 5
// end ;
14410: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
14411: LD_EXP 16
14415: PUSH
14416: LD_OWVAR 67
14420: PUSH
14421: LD_INT 2
14423: EQUAL
14424: AND
14425: PUSH
14426: LD_EXP 17
14430: PUSH
14431: LD_INT 0
14433: GREATEREQUAL
14434: AND
14435: PUSH
14436: LD_EXP 17
14440: PUSH
14441: LD_EXP 35
14445: LESS
14446: AND
14447: IFFALSE 14597
14449: GO 14451
14451: DISABLE
// begin PrepareArabianVehicles ;
14452: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
14456: LD_EXP 59
14460: PPUSH
14461: LD_INT 135
14463: PUSH
14464: LD_INT 4
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 134
14473: PUSH
14474: LD_INT 19
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 132
14483: PUSH
14484: LD_INT 26
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 128
14493: PUSH
14494: LD_INT 31
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 123
14503: PUSH
14504: LD_INT 37
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 118
14513: PUSH
14514: LD_INT 45
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 112
14523: PUSH
14524: LD_INT 51
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 106
14533: PUSH
14534: LD_INT 57
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 99
14543: PUSH
14544: LD_INT 62
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 104
14553: PUSH
14554: LD_INT 71
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 110
14563: PUSH
14564: LD_INT 78
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: PPUSH
14584: LD_INT 0
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: LD_INT 11
14592: PPUSH
14593: CALL 4418 0 5
// end ;
14597: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
14598: LD_EXP 16
14602: PUSH
14603: LD_OWVAR 67
14607: PUSH
14608: LD_INT 3
14610: EQUAL
14611: AND
14612: PUSH
14613: LD_EXP 17
14617: PUSH
14618: LD_INT 0
14620: GREATEREQUAL
14621: AND
14622: PUSH
14623: LD_EXP 17
14627: PUSH
14628: LD_EXP 35
14632: LESS
14633: AND
14634: IFFALSE 14828
14636: GO 14638
14638: DISABLE
// begin PrepareArabianVehicles ;
14639: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
14643: LD_EXP 59
14647: PPUSH
14648: LD_INT 135
14650: PUSH
14651: LD_INT 4
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 134
14660: PUSH
14661: LD_INT 19
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 132
14670: PUSH
14671: LD_INT 26
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 128
14680: PUSH
14681: LD_INT 31
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 123
14690: PUSH
14691: LD_INT 37
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 118
14700: PUSH
14701: LD_INT 45
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 112
14710: PUSH
14711: LD_INT 51
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 106
14720: PUSH
14721: LD_INT 57
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 99
14730: PUSH
14731: LD_INT 62
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 104
14740: PUSH
14741: LD_INT 71
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 110
14750: PUSH
14751: LD_INT 78
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 119
14760: PUSH
14761: LD_INT 88
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 128
14770: PUSH
14771: LD_INT 97
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 135
14780: PUSH
14781: LD_INT 106
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 140
14790: PUSH
14791: LD_INT 153
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: PPUSH
14815: LD_INT 0
14817: PPUSH
14818: LD_INT 1
14820: PPUSH
14821: LD_INT 11
14823: PPUSH
14824: CALL 4418 0 5
// end ;
14828: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
14829: LD_EXP 16
14833: PUSH
14834: LD_EXP 17
14838: PUSH
14839: LD_INT 1
14841: EQUAL
14842: AND
14843: PUSH
14844: LD_EXP 17
14848: PUSH
14849: LD_EXP 35
14853: LESS
14854: AND
14855: IFFALSE 14932
14857: GO 14859
14859: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
14860: LD_INT 7
14862: PPUSH
14863: CALL 3479 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
14867: LD_EXP 59
14871: PPUSH
14872: LD_INT 157
14874: PUSH
14875: LD_INT 31
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 194
14884: PUSH
14885: LD_INT 124
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 174
14894: PUSH
14895: LD_INT 158
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 151
14904: PUSH
14905: LD_INT 164
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: PPUSH
14918: LD_INT 0
14920: PPUSH
14921: LD_INT 1
14923: PPUSH
14924: LD_INT 1
14926: NEG
14927: PPUSH
14928: CALL 4418 0 5
// end ;
14932: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
14933: LD_EXP 16
14937: PUSH
14938: LD_EXP 17
14942: PUSH
14943: LD_INT 1
14945: EQUAL
14946: AND
14947: PUSH
14948: LD_EXP 17
14952: PUSH
14953: LD_EXP 35
14957: LESS
14958: AND
14959: IFFALSE 15130
14961: GO 14963
14963: DISABLE
// begin wait ( 1 1$30 ) ;
14964: LD_INT 3150
14966: PPUSH
14967: CALL_OW 67
// currentWave = currentWave + 1 ;
14971: LD_ADDR_EXP 17
14975: PUSH
14976: LD_EXP 17
14980: PUSH
14981: LD_INT 1
14983: PLUS
14984: ST_TO_ADDR
// PrepareArabianVehicles ;
14985: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
14989: LD_EXP 59
14993: PPUSH
14994: LD_INT 135
14996: PUSH
14997: LD_INT 4
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 134
15006: PUSH
15007: LD_INT 19
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 132
15016: PUSH
15017: LD_INT 26
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 128
15026: PUSH
15027: LD_INT 31
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 123
15036: PUSH
15037: LD_INT 37
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 118
15046: PUSH
15047: LD_INT 45
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 112
15056: PUSH
15057: LD_INT 51
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 106
15066: PUSH
15067: LD_INT 57
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 99
15076: PUSH
15077: LD_INT 62
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 104
15086: PUSH
15087: LD_INT 71
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: LD_INT 110
15096: PUSH
15097: LD_INT 78
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: PPUSH
15117: LD_INT 0
15119: PPUSH
15120: LD_INT 1
15122: PPUSH
15123: LD_INT 11
15125: PPUSH
15126: CALL 4418 0 5
// end ;
15130: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
15131: LD_EXP 16
15135: PUSH
15136: LD_OWVAR 67
15140: PUSH
15141: LD_INT 2
15143: EQUAL
15144: AND
15145: PUSH
15146: LD_EXP 17
15150: PUSH
15151: LD_INT 1
15153: EQUAL
15154: AND
15155: PUSH
15156: LD_EXP 17
15160: PUSH
15161: LD_EXP 35
15165: LESS
15166: AND
15167: IFFALSE 15361
15169: GO 15171
15171: DISABLE
// begin PrepareArabianVehicles ;
15172: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15176: LD_EXP 59
15180: PPUSH
15181: LD_INT 135
15183: PUSH
15184: LD_INT 4
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 134
15193: PUSH
15194: LD_INT 19
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 132
15203: PUSH
15204: LD_INT 26
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 128
15213: PUSH
15214: LD_INT 31
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 123
15223: PUSH
15224: LD_INT 37
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 118
15233: PUSH
15234: LD_INT 45
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 112
15243: PUSH
15244: LD_INT 51
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 106
15253: PUSH
15254: LD_INT 57
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 99
15263: PUSH
15264: LD_INT 62
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 104
15273: PUSH
15274: LD_INT 71
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 110
15283: PUSH
15284: LD_INT 78
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 119
15293: PUSH
15294: LD_INT 88
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 128
15303: PUSH
15304: LD_INT 97
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 135
15313: PUSH
15314: LD_INT 106
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 140
15323: PUSH
15324: LD_INT 153
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PPUSH
15348: LD_INT 0
15350: PPUSH
15351: LD_INT 1
15353: PPUSH
15354: LD_INT 11
15356: PPUSH
15357: CALL 4418 0 5
// end ;
15361: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
15362: LD_EXP 16
15366: PUSH
15367: LD_OWVAR 67
15371: PUSH
15372: LD_INT 3
15374: EQUAL
15375: AND
15376: PUSH
15377: LD_EXP 17
15381: PUSH
15382: LD_INT 1
15384: EQUAL
15385: AND
15386: PUSH
15387: LD_EXP 17
15391: PUSH
15392: LD_EXP 35
15396: LESS
15397: AND
15398: IFFALSE 15614
15400: GO 15402
15402: DISABLE
// begin PrepareArabianVehicles ;
15403: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15407: LD_EXP 59
15411: PPUSH
15412: LD_INT 135
15414: PUSH
15415: LD_INT 4
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 134
15424: PUSH
15425: LD_INT 19
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 132
15434: PUSH
15435: LD_INT 26
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 128
15444: PUSH
15445: LD_INT 31
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 123
15454: PUSH
15455: LD_INT 37
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 118
15464: PUSH
15465: LD_INT 45
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 112
15474: PUSH
15475: LD_INT 51
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 106
15484: PUSH
15485: LD_INT 57
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 99
15494: PUSH
15495: LD_INT 62
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 93
15504: PUSH
15505: LD_INT 67
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 86
15514: PUSH
15515: LD_INT 72
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 78
15524: PUSH
15525: LD_INT 75
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 71
15534: PUSH
15535: LD_INT 81
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 69
15544: PUSH
15545: LD_INT 88
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 71
15554: PUSH
15555: LD_INT 95
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 74
15564: PUSH
15565: LD_INT 103
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 80
15574: PUSH
15575: LD_INT 113
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: PPUSH
15601: LD_INT 0
15603: PPUSH
15604: LD_INT 1
15606: PPUSH
15607: LD_INT 11
15609: PPUSH
15610: CALL 4418 0 5
// end ;
15614: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
15615: LD_EXP 16
15619: PUSH
15620: LD_EXP 17
15624: PUSH
15625: LD_INT 2
15627: EQUAL
15628: AND
15629: PUSH
15630: LD_EXP 17
15634: PUSH
15635: LD_EXP 35
15639: LESS
15640: AND
15641: IFFALSE 15718
15643: GO 15645
15645: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
15646: LD_INT 7
15648: PPUSH
15649: CALL 3479 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
15653: LD_EXP 59
15657: PPUSH
15658: LD_INT 157
15660: PUSH
15661: LD_INT 31
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 194
15670: PUSH
15671: LD_INT 124
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 174
15680: PUSH
15681: LD_INT 158
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 151
15690: PUSH
15691: LD_INT 164
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: LD_INT 1
15712: NEG
15713: PPUSH
15714: CALL 4418 0 5
// end ;
15718: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
15719: LD_EXP 16
15723: PUSH
15724: LD_EXP 17
15728: PUSH
15729: LD_INT 2
15731: EQUAL
15732: AND
15733: PUSH
15734: LD_EXP 17
15738: PUSH
15739: LD_EXP 35
15743: LESS
15744: AND
15745: IFFALSE 15982
15747: GO 15749
15749: DISABLE
// begin wait ( 1 1$30 ) ;
15750: LD_INT 3150
15752: PPUSH
15753: CALL_OW 67
// currentWave = currentWave + 1 ;
15757: LD_ADDR_EXP 17
15761: PUSH
15762: LD_EXP 17
15766: PUSH
15767: LD_INT 1
15769: PLUS
15770: ST_TO_ADDR
// PrepareArabianVehicles ;
15771: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15775: LD_EXP 59
15779: PPUSH
15780: LD_INT 135
15782: PUSH
15783: LD_INT 4
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 134
15792: PUSH
15793: LD_INT 19
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 132
15802: PUSH
15803: LD_INT 26
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 128
15812: PUSH
15813: LD_INT 31
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 123
15822: PUSH
15823: LD_INT 37
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 118
15832: PUSH
15833: LD_INT 45
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 112
15842: PUSH
15843: LD_INT 51
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 106
15852: PUSH
15853: LD_INT 57
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 99
15862: PUSH
15863: LD_INT 62
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 93
15872: PUSH
15873: LD_INT 67
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 86
15882: PUSH
15883: LD_INT 72
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 78
15892: PUSH
15893: LD_INT 75
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 71
15902: PUSH
15903: LD_INT 81
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 69
15912: PUSH
15913: LD_INT 88
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 71
15922: PUSH
15923: LD_INT 95
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 74
15932: PUSH
15933: LD_INT 103
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 80
15942: PUSH
15943: LD_INT 113
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: LD_INT 11
15977: PPUSH
15978: CALL 4418 0 5
// end ;
15982: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
15983: LD_EXP 16
15987: PUSH
15988: LD_OWVAR 67
15992: PUSH
15993: LD_INT 2
15995: EQUAL
15996: AND
15997: PUSH
15998: LD_EXP 17
16002: PUSH
16003: LD_INT 2
16005: EQUAL
16006: AND
16007: PUSH
16008: LD_EXP 17
16012: PUSH
16013: LD_EXP 35
16017: LESS
16018: AND
16019: IFFALSE 16213
16021: GO 16023
16023: DISABLE
// begin PrepareArabianVehicles ;
16024: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16028: LD_EXP 59
16032: PPUSH
16033: LD_INT 135
16035: PUSH
16036: LD_INT 4
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 134
16045: PUSH
16046: LD_INT 19
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 132
16055: PUSH
16056: LD_INT 26
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 128
16065: PUSH
16066: LD_INT 31
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 123
16075: PUSH
16076: LD_INT 37
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: LD_INT 118
16085: PUSH
16086: LD_INT 45
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 112
16095: PUSH
16096: LD_INT 51
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 106
16105: PUSH
16106: LD_INT 57
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 99
16115: PUSH
16116: LD_INT 62
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 104
16125: PUSH
16126: LD_INT 71
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 110
16135: PUSH
16136: LD_INT 78
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 119
16145: PUSH
16146: LD_INT 88
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 128
16155: PUSH
16156: LD_INT 97
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 135
16165: PUSH
16166: LD_INT 106
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 140
16175: PUSH
16176: LD_INT 153
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: PPUSH
16200: LD_INT 0
16202: PPUSH
16203: LD_INT 1
16205: PPUSH
16206: LD_INT 11
16208: PPUSH
16209: CALL 4418 0 5
// end ;
16213: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
16214: LD_EXP 16
16218: PUSH
16219: LD_OWVAR 67
16223: PUSH
16224: LD_INT 3
16226: EQUAL
16227: AND
16228: PUSH
16229: LD_EXP 17
16233: PUSH
16234: LD_INT 2
16236: EQUAL
16237: AND
16238: PUSH
16239: LD_EXP 17
16243: PUSH
16244: LD_EXP 35
16248: LESS
16249: AND
16250: IFFALSE 16444
16252: GO 16254
16254: DISABLE
// begin PrepareArabianVehicles ;
16255: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16259: LD_EXP 59
16263: PPUSH
16264: LD_INT 135
16266: PUSH
16267: LD_INT 4
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 134
16276: PUSH
16277: LD_INT 19
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 132
16286: PUSH
16287: LD_INT 26
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 128
16296: PUSH
16297: LD_INT 31
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 123
16306: PUSH
16307: LD_INT 37
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 118
16316: PUSH
16317: LD_INT 45
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 112
16326: PUSH
16327: LD_INT 51
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 106
16336: PUSH
16337: LD_INT 57
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 99
16346: PUSH
16347: LD_INT 62
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 104
16356: PUSH
16357: LD_INT 71
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 110
16366: PUSH
16367: LD_INT 78
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 119
16376: PUSH
16377: LD_INT 88
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 128
16386: PUSH
16387: LD_INT 97
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 135
16396: PUSH
16397: LD_INT 106
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 140
16406: PUSH
16407: LD_INT 153
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: PPUSH
16431: LD_INT 0
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: LD_INT 11
16439: PPUSH
16440: CALL 4418 0 5
// end ;
16444: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
16445: LD_EXP 16
16449: PUSH
16450: LD_EXP 17
16454: PUSH
16455: LD_INT 3
16457: EQUAL
16458: AND
16459: PUSH
16460: LD_EXP 17
16464: PUSH
16465: LD_EXP 35
16469: LESS
16470: AND
16471: IFFALSE 16548
16473: GO 16475
16475: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16476: LD_INT 7
16478: PPUSH
16479: CALL 3479 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16483: LD_EXP 59
16487: PPUSH
16488: LD_INT 157
16490: PUSH
16491: LD_INT 31
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 194
16500: PUSH
16501: LD_INT 124
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 174
16510: PUSH
16511: LD_INT 158
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 151
16520: PUSH
16521: LD_INT 164
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: PPUSH
16534: LD_INT 0
16536: PPUSH
16537: LD_INT 1
16539: PPUSH
16540: LD_INT 1
16542: NEG
16543: PPUSH
16544: CALL 4418 0 5
// end ;
16548: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
16549: LD_EXP 16
16553: PUSH
16554: LD_EXP 17
16558: PUSH
16559: LD_INT 3
16561: EQUAL
16562: AND
16563: PUSH
16564: LD_EXP 17
16568: PUSH
16569: LD_EXP 35
16573: LESS
16574: AND
16575: IFFALSE 16812
16577: GO 16579
16579: DISABLE
// begin wait ( 1 1$30 ) ;
16580: LD_INT 3150
16582: PPUSH
16583: CALL_OW 67
// currentWave = currentWave + 1 ;
16587: LD_ADDR_EXP 17
16591: PUSH
16592: LD_EXP 17
16596: PUSH
16597: LD_INT 1
16599: PLUS
16600: ST_TO_ADDR
// PrepareArabianVehicles ;
16601: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16605: LD_EXP 59
16609: PPUSH
16610: LD_INT 135
16612: PUSH
16613: LD_INT 4
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 134
16622: PUSH
16623: LD_INT 19
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 132
16632: PUSH
16633: LD_INT 26
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 128
16642: PUSH
16643: LD_INT 31
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 123
16652: PUSH
16653: LD_INT 37
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 118
16662: PUSH
16663: LD_INT 45
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 112
16672: PUSH
16673: LD_INT 51
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 106
16682: PUSH
16683: LD_INT 57
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 99
16692: PUSH
16693: LD_INT 62
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 93
16702: PUSH
16703: LD_INT 67
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 86
16712: PUSH
16713: LD_INT 72
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 78
16722: PUSH
16723: LD_INT 75
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 71
16732: PUSH
16733: LD_INT 81
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 69
16742: PUSH
16743: LD_INT 88
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 71
16752: PUSH
16753: LD_INT 95
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 74
16762: PUSH
16763: LD_INT 103
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 80
16772: PUSH
16773: LD_INT 113
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: PPUSH
16799: LD_INT 0
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: LD_INT 11
16807: PPUSH
16808: CALL 4418 0 5
// end ;
16812: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
16813: LD_EXP 16
16817: PUSH
16818: LD_OWVAR 67
16822: PUSH
16823: LD_INT 2
16825: EQUAL
16826: AND
16827: PUSH
16828: LD_EXP 17
16832: PUSH
16833: LD_INT 3
16835: EQUAL
16836: AND
16837: PUSH
16838: LD_EXP 17
16842: PUSH
16843: LD_EXP 35
16847: LESS
16848: AND
16849: IFFALSE 17043
16851: GO 16853
16853: DISABLE
// begin PrepareArabianVehicles ;
16854: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16858: LD_EXP 59
16862: PPUSH
16863: LD_INT 135
16865: PUSH
16866: LD_INT 4
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 134
16875: PUSH
16876: LD_INT 19
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 132
16885: PUSH
16886: LD_INT 26
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 128
16895: PUSH
16896: LD_INT 31
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 123
16905: PUSH
16906: LD_INT 37
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 118
16915: PUSH
16916: LD_INT 45
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 112
16925: PUSH
16926: LD_INT 51
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 106
16935: PUSH
16936: LD_INT 57
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 99
16945: PUSH
16946: LD_INT 62
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 104
16955: PUSH
16956: LD_INT 71
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: LD_INT 110
16965: PUSH
16966: LD_INT 78
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 119
16975: PUSH
16976: LD_INT 88
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 128
16985: PUSH
16986: LD_INT 97
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 135
16995: PUSH
16996: LD_INT 106
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 140
17005: PUSH
17006: LD_INT 153
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: PPUSH
17030: LD_INT 0
17032: PPUSH
17033: LD_INT 1
17035: PPUSH
17036: LD_INT 11
17038: PPUSH
17039: CALL 4418 0 5
// end ;
17043: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
17044: LD_EXP 16
17048: PUSH
17049: LD_OWVAR 67
17053: PUSH
17054: LD_INT 3
17056: EQUAL
17057: AND
17058: PUSH
17059: LD_EXP 17
17063: PUSH
17064: LD_INT 3
17066: EQUAL
17067: AND
17068: PUSH
17069: LD_EXP 17
17073: PUSH
17074: LD_EXP 35
17078: LESS
17079: AND
17080: IFFALSE 17274
17082: GO 17084
17084: DISABLE
// begin PrepareArabianVehicles ;
17085: CALL 3189 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17089: LD_EXP 59
17093: PPUSH
17094: LD_INT 135
17096: PUSH
17097: LD_INT 4
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 134
17106: PUSH
17107: LD_INT 19
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 132
17116: PUSH
17117: LD_INT 26
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 128
17126: PUSH
17127: LD_INT 31
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 123
17136: PUSH
17137: LD_INT 37
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 118
17146: PUSH
17147: LD_INT 45
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 112
17156: PUSH
17157: LD_INT 51
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 106
17166: PUSH
17167: LD_INT 57
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 99
17176: PUSH
17177: LD_INT 62
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 104
17186: PUSH
17187: LD_INT 71
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 110
17196: PUSH
17197: LD_INT 78
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 119
17206: PUSH
17207: LD_INT 88
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 128
17216: PUSH
17217: LD_INT 97
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 135
17226: PUSH
17227: LD_INT 106
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 140
17236: PUSH
17237: LD_INT 153
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: PPUSH
17261: LD_INT 0
17263: PPUSH
17264: LD_INT 1
17266: PPUSH
17267: LD_INT 11
17269: PPUSH
17270: CALL 4418 0 5
// end ;
17274: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
17275: LD_EXP 50
17279: PPUSH
17280: CALL_OW 305
17284: PUSH
17285: LD_EXP 21
17289: PUSH
17290: LD_INT 5
17292: LESS
17293: AND
17294: IFFALSE 17304
17296: GO 17298
17298: DISABLE
// begin PrepareArabianKiller ;
17299: CALL 3688 0 0
// enable ;
17303: ENABLE
// end ;
17304: END
