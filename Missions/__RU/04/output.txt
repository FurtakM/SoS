// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 240 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// canExitMap = false ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// arabianCanExitMap = false ;
  88: LD_ADDR_EXP 6
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// namedBase = false ;
  96: LD_ADDR_EXP 8
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// startEvacuation = false ;
 104: LD_ADDR_EXP 7
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// stealCargos = [ ] ;
 112: LD_ADDR_EXP 12
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// stealWarmCount = 0 ;
 119: LD_ADDR_EXP 11
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// evacuatedCargos = 0 ;
 127: LD_ADDR_EXP 9
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// canStealCargo = false ;
 135: LD_ADDR_EXP 10
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 143: LD_ADDR_EXP 14
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_contactBlock = false ;
 151: LD_ADDR_EXP 15
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// currentWave = 0 ;
 159: LD_ADDR_EXP 17
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// saveGaydar = false ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 175: LD_ADDR_EXP 19
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// killedArabianUnits = 0 ;
 183: LD_ADDR_EXP 20
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// arabianKillers = 0 ;
 191: LD_ADDR_EXP 21
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostUnits = 0 ;
 199: LD_ADDR_EXP 22
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// enableAttacks = false ;
 207: LD_ADDR_EXP 16
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 215: LD_ADDR_EXP 23
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// PrepareRussians ;
 223: CALL 1489 0 0
// Nef_PrepareNature ;
 227: CALL 3823 0 0
// MissionIntro ;
 231: CALL 9743 0 0
// end ; end_of_file
 235: LD_VAR 0 1
 239: RET
// export function InitMapConfig ; begin
 240: LD_INT 0
 242: PPUSH
// BaseMapConfig ;
 243: CALL 256 0 0
// MissionMapConfig ;
 247: CALL 358 0 0
// end ;
 251: LD_VAR 0 1
 255: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 256: LD_INT 0
 258: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 259: LD_ADDR_EXP 24
 263: PUSH
 264: LD_INT 8
 266: PUSH
 267: LD_INT 12
 269: PUSH
 270: LD_INT 6
 272: PUSH
 273: LD_INT 6
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: EMPTY
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 286: LD_ADDR_EXP 25
 290: PUSH
 291: LD_INT 2
 293: PUSH
 294: LD_INT 2
 296: PUSH
 297: LD_INT 2
 299: PUSH
 300: LD_INT 2
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 309: LD_ADDR_EXP 26
 313: PUSH
 314: LD_INT 5
 316: NEG
 317: PPUSH
 318: LD_INT 5
 320: PPUSH
 321: CALL_OW 12
 325: PUSH
 326: EMPTY
 327: LIST
 328: ST_TO_ADDR
// debugMode = 0 ;
 329: LD_ADDR_EXP 29
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// missionPrefix = 04_ ;
 337: LD_ADDR_EXP 27
 341: PUSH
 342: LD_STRING 04_
 344: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 345: LD_ADDR_EXP 28
 349: PUSH
 350: LD_STRING 03_
 352: ST_TO_ADDR
// end ;
 353: LD_VAR 0 1
 357: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 358: LD_INT 0
 360: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 ] [ Difficulty ] ;
 361: LD_ADDR_EXP 30
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: LD_INT 3
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 386: LD_ADDR_EXP 31
 390: PUSH
 391: LD_INT 2
 393: NEG
 394: PUSH
 395: LD_INT 1
 397: NEG
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 413: LD_ADDR_EXP 32
 417: PUSH
 418: LD_INT 135
 420: PUSH
 421: LD_INT 8
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 135
 430: PUSH
 431: LD_INT 4
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 134
 440: PUSH
 441: LD_INT 19
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 132
 450: PUSH
 451: LD_INT 26
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: LD_INT 128
 460: PUSH
 461: LD_INT 31
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: PUSH
 468: LD_INT 123
 470: PUSH
 471: LD_INT 37
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 118
 480: PUSH
 481: LD_INT 45
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: PUSH
 488: LD_INT 112
 490: PUSH
 491: LD_INT 51
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: PUSH
 498: LD_INT 106
 500: PUSH
 501: LD_INT 57
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 99
 510: PUSH
 511: LD_INT 62
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 93
 520: PUSH
 521: LD_INT 67
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: LD_INT 86
 530: PUSH
 531: LD_INT 72
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: LD_INT 78
 540: PUSH
 541: LD_INT 75
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 71
 550: PUSH
 551: LD_INT 81
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PUSH
 558: LD_INT 69
 560: PUSH
 561: LD_INT 88
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 71
 570: PUSH
 571: LD_INT 95
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 74
 580: PUSH
 581: LD_INT 103
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: PUSH
 588: LD_INT 80
 590: PUSH
 591: LD_INT 113
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 84
 600: PUSH
 601: LD_INT 121
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: LD_INT 89
 610: PUSH
 611: LD_INT 132
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 92
 620: PUSH
 621: LD_INT 142
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 93
 630: PUSH
 631: LD_INT 151
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 91
 640: PUSH
 641: LD_INT 157
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: PUSH
 648: LD_INT 90
 650: PUSH
 651: LD_INT 163
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 93
 660: PUSH
 661: LD_INT 171
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: LD_INT 92
 670: PUSH
 671: LD_INT 177
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 706: LD_ADDR_EXP 33
 710: PUSH
 711: LD_INT 135
 713: PUSH
 714: LD_INT 8
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 135
 723: PUSH
 724: LD_INT 4
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 134
 733: PUSH
 734: LD_INT 19
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 132
 743: PUSH
 744: LD_INT 26
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 128
 753: PUSH
 754: LD_INT 31
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: PUSH
 761: LD_INT 123
 763: PUSH
 764: LD_INT 37
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 118
 773: PUSH
 774: LD_INT 45
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: LD_INT 112
 783: PUSH
 784: LD_INT 51
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PUSH
 791: LD_INT 106
 793: PUSH
 794: LD_INT 57
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 99
 803: PUSH
 804: LD_INT 62
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 104
 813: PUSH
 814: LD_INT 71
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 110
 823: PUSH
 824: LD_INT 78
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 119
 833: PUSH
 834: LD_INT 88
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 128
 843: PUSH
 844: LD_INT 97
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 135
 853: PUSH
 854: LD_INT 106
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: LD_INT 141
 863: PUSH
 864: LD_INT 120
 866: PUSH
 867: EMPTY
 868: LIST
 869: LIST
 870: PUSH
 871: LD_INT 143
 873: PUSH
 874: LD_INT 132
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 143
 883: PUSH
 884: LD_INT 142
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: LD_INT 140
 893: PUSH
 894: LD_INT 149
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 132
 903: PUSH
 904: LD_INT 153
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 125
 913: PUSH
 914: LD_INT 155
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: LD_INT 115
 923: PUSH
 924: LD_INT 154
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 105
 933: PUSH
 934: LD_INT 153
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 93
 943: PUSH
 944: LD_INT 151
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: LD_INT 91
 953: PUSH
 954: LD_INT 157
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 90
 963: PUSH
 964: LD_INT 163
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 93
 973: PUSH
 974: LD_INT 171
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 92
 983: PUSH
 984: LD_INT 177
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1021: LD_ADDR_EXP 34
1025: PUSH
1026: LD_INT 40
1028: PUSH
1029: LD_INT 35
1031: PUSH
1032: LD_INT 30
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_OWVAR 67
1044: ARRAY
1045: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1046: LD_ADDR_EXP 35
1050: PUSH
1051: LD_INT 50
1053: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1054: LD_ADDR_EXP 13
1058: PUSH
1059: LD_INT 21
1061: PUSH
1062: LD_INT 19
1064: PUSH
1065: LD_INT 17
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_OWVAR 67
1077: ARRAY
1078: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1079: LD_ADDR_EXP 36
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: LD_INT 4
1089: PUSH
1090: LD_INT 4
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_OWVAR 67
1102: ARRAY
1103: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1104: LD_ADDR_EXP 37
1108: PUSH
1109: LD_INT 3
1111: PUSH
1112: LD_INT 4
1114: PUSH
1115: LD_INT 4
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_OWVAR 67
1127: ARRAY
1128: ST_TO_ADDR
// arabianTroopsMin = 3 ;
1129: LD_ADDR_EXP 38
1133: PUSH
1134: LD_INT 3
1136: ST_TO_ADDR
// arabianTroopsMax = [ 5 , 6 , 7 ] [ Difficulty ] ;
1137: LD_ADDR_EXP 39
1141: PUSH
1142: LD_INT 5
1144: PUSH
1145: LD_INT 6
1147: PUSH
1148: LD_INT 7
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PUSH
1156: LD_OWVAR 67
1160: ARRAY
1161: ST_TO_ADDR
// end ;
1162: LD_VAR 0 1
1166: RET
// every 0 0$1 trigger debugMode do var i ;
1167: LD_EXP 29
1171: IFFALSE 1486
1173: GO 1175
1175: DISABLE
1176: LD_INT 0
1178: PPUSH
// begin enable ;
1179: ENABLE
// FogOff ( your_side ) ;
1180: LD_OWVAR 2
1184: PPUSH
1185: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1189: LD_ADDR_VAR 0 1
1193: PUSH
1194: LD_INT 22
1196: PUSH
1197: LD_OWVAR 2
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 2
1208: PUSH
1209: LD_INT 21
1211: PUSH
1212: LD_INT 1
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 21
1221: PUSH
1222: LD_INT 2
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PPUSH
1238: CALL_OW 69
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// SetLives ( i , 1000 ) ;
1246: LD_VAR 0 1
1250: PPUSH
1251: LD_INT 1000
1253: PPUSH
1254: CALL_OW 234
1258: GO 1243
1260: POP
1261: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1262: LD_ADDR_VAR 0 1
1266: PUSH
1267: LD_INT 22
1269: PUSH
1270: LD_OWVAR 2
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: PUSH
1279: LD_INT 21
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PPUSH
1293: CALL_OW 69
1297: PUSH
1298: FOR_IN
1299: IFFALSE 1363
// begin SetSkill ( i , skill_combat , 10 ) ;
1301: LD_VAR 0 1
1305: PPUSH
1306: LD_INT 1
1308: PPUSH
1309: LD_INT 10
1311: PPUSH
1312: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1316: LD_VAR 0 1
1320: PPUSH
1321: LD_INT 2
1323: PPUSH
1324: LD_INT 10
1326: PPUSH
1327: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 3
1338: PPUSH
1339: LD_INT 10
1341: PPUSH
1342: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1346: LD_VAR 0 1
1350: PPUSH
1351: LD_INT 4
1353: PPUSH
1354: LD_INT 10
1356: PPUSH
1357: CALL_OW 237
// end ;
1361: GO 1298
1363: POP
1364: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1365: LD_ADDR_VAR 0 1
1369: PUSH
1370: LD_INT 22
1372: PUSH
1373: LD_OWVAR 2
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 2
1384: PUSH
1385: LD_INT 30
1387: PUSH
1388: LD_INT 0
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: PUSH
1395: LD_INT 30
1397: PUSH
1398: LD_INT 1
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: PUSH
1419: FOR_IN
1420: IFFALSE 1484
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1422: LD_VAR 0 1
1426: PPUSH
1427: CALL_OW 274
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 9999
1437: PPUSH
1438: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1442: LD_VAR 0 1
1446: PPUSH
1447: CALL_OW 274
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 9999
1457: PPUSH
1458: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1462: LD_VAR 0 1
1466: PPUSH
1467: CALL_OW 274
1471: PPUSH
1472: LD_INT 3
1474: PPUSH
1475: LD_INT 9999
1477: PPUSH
1478: CALL_OW 277
// end ;
1482: GO 1419
1484: POP
1485: POP
// end ; end_of_file
1486: PPOPN 1
1488: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export randomsToSave ; export function PrepareRussians ; begin
1489: LD_INT 0
1491: PPUSH
// randomsToSave = [ ] ;
1492: LD_ADDR_EXP 59
1496: PUSH
1497: EMPTY
1498: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1499: LD_ADDR_EXP 55
1503: PUSH
1504: EMPTY
1505: ST_TO_ADDR
// PrepareHeroes ;
1506: CALL 1515 0 0
// end ;
1510: LD_VAR 0 1
1514: RET
// function PrepareHeroes ; var i , current ; begin
1515: LD_INT 0
1517: PPUSH
1518: PPUSH
1519: PPUSH
// uc_side = 3 ;
1520: LD_ADDR_OWVAR 20
1524: PUSH
1525: LD_INT 3
1527: ST_TO_ADDR
// uc_nation = 3 ;
1528: LD_ADDR_OWVAR 21
1532: PUSH
1533: LD_INT 3
1535: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1536: LD_ADDR_EXP 40
1540: PUSH
1541: LD_STRING Burlak
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: LD_INT 3
1549: PPUSH
1550: CALL 8783 0 3
1554: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1555: LD_ADDR_EXP 41
1559: PUSH
1560: LD_STRING Gnyevko
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: LD_INT 3
1568: PPUSH
1569: CALL 8783 0 3
1573: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1574: LD_ADDR_EXP 43
1578: PUSH
1579: LD_STRING Kovalyuk
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: LD_INT 3
1587: PPUSH
1588: CALL 8783 0 3
1592: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1593: LD_ADDR_EXP 42
1597: PUSH
1598: LD_STRING Kirilenkova
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: LD_INT 4
1606: PPUSH
1607: CALL 8783 0 3
1611: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1612: LD_ADDR_EXP 44
1616: PUSH
1617: LD_STRING Belkov
1619: PPUSH
1620: LD_INT 1
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: CALL 8783 0 3
1630: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1631: LD_ADDR_EXP 45
1635: PUSH
1636: LD_STRING Belkov2
1638: PPUSH
1639: LD_INT 1
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL 8783 0 3
1649: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1650: LD_ADDR_EXP 46
1654: PUSH
1655: LD_STRING Scholtze
1657: PPUSH
1658: LD_INT 1
1660: PPUSH
1661: LD_INT 4
1663: PPUSH
1664: CALL 8783 0 3
1668: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1669: LD_ADDR_EXP 50
1673: PUSH
1674: LD_STRING Popov
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL 8783 0 3
1687: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1688: LD_ADDR_EXP 51
1692: PUSH
1693: LD_STRING Platonov
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: LD_INT 0
1701: PPUSH
1702: CALL 8783 0 3
1706: ST_TO_ADDR
// uc_side = 6 ;
1707: LD_ADDR_OWVAR 20
1711: PUSH
1712: LD_INT 6
1714: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1715: LD_ADDR_EXP 52
1719: PUSH
1720: LD_STRING Gaydar
1722: PPUSH
1723: LD_INT 0
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: CALL 8783 0 3
1733: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1734: LD_ADDR_EXP 47
1738: PUSH
1739: LD_STRING Kuzmov
1741: PPUSH
1742: LD_INT 0
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL 8783 0 3
1752: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1753: LD_EXP 47
1757: PPUSH
1758: LD_INT 109
1760: PPUSH
1761: LD_INT 108
1763: PPUSH
1764: LD_INT 5
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 50
// ComHold ( Kuzmov ) ;
1774: LD_EXP 47
1778: PPUSH
1779: CALL_OW 140
// uc_side = 3 ;
1783: LD_ADDR_OWVAR 20
1787: PUSH
1788: LD_INT 3
1790: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1791: LD_EXP 40
1795: PUSH
1796: LD_EXP 41
1800: PUSH
1801: LD_EXP 42
1805: PUSH
1806: LD_EXP 43
1810: PUSH
1811: LD_EXP 44
1815: PUSH
1816: LD_EXP 45
1820: PUSH
1821: LD_EXP 46
1825: PUSH
1826: LD_EXP 50
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PPUSH
1841: LD_INT 2
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL 8866 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1851: LD_ADDR_EXP 48
1855: PUSH
1856: LD_STRING 03_other_survivors
1858: PPUSH
1859: CALL_OW 31
1863: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1864: LD_ADDR_EXP 49
1868: PUSH
1869: LD_STRING 03_other_kirov
1871: PPUSH
1872: CALL_OW 31
1876: ST_TO_ADDR
// for i in other_survivors do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: LD_EXP 48
1886: PUSH
1887: FOR_IN
1888: IFFALSE 1907
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1890: LD_VAR 0 2
1894: PPUSH
1895: LD_INT 2
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
1905: GO 1887
1907: POP
1908: POP
// for i in other_kirov_survivors do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: LD_EXP 49
1918: PUSH
1919: FOR_IN
1920: IFFALSE 1939
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1922: LD_VAR 0 2
1926: PPUSH
1927: LD_INT 2
1929: PPUSH
1930: LD_INT 0
1932: PPUSH
1933: CALL_OW 49
1937: GO 1919
1939: POP
1940: POP
// PrepareSoldier ( sex_male , 1 ) ;
1941: LD_INT 1
1943: PPUSH
1944: LD_INT 1
1946: PPUSH
1947: CALL_OW 381
// dialogRus = CreateHuman ;
1951: LD_ADDR_EXP 57
1955: PUSH
1956: CALL_OW 44
1960: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
1961: LD_EXP 48
1965: PUSH
1966: LD_EXP 49
1970: PLUS
1971: PUSH
1972: LD_EXP 41
1976: PUSH
1977: LD_EXP 42
1981: PUSH
1982: LD_EXP 43
1986: PUSH
1987: LD_EXP 44
1991: PUSH
1992: LD_EXP 45
1996: PUSH
1997: LD_EXP 46
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: PLUS
2010: PUSH
2011: LD_INT 8
2013: LESS
2014: IFFALSE 2167
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2016: LD_ADDR_VAR 0 3
2020: PUSH
2021: LD_EXP 48
2025: PUSH
2026: LD_EXP 49
2030: PLUS
2031: PUSH
2032: LD_EXP 41
2036: PUSH
2037: LD_EXP 42
2041: PUSH
2042: LD_EXP 43
2046: PUSH
2047: LD_EXP 44
2051: PUSH
2052: LD_EXP 45
2056: PUSH
2057: LD_EXP 46
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PLUS
2070: ST_TO_ADDR
// current = 8 - current ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: LD_INT 8
2078: PUSH
2079: LD_VAR 0 3
2083: MINUS
2084: ST_TO_ADDR
// for i := 1 to current do
2085: LD_ADDR_VAR 0 2
2089: PUSH
2090: DOUBLE
2091: LD_INT 1
2093: DEC
2094: ST_TO_ADDR
2095: LD_VAR 0 3
2099: PUSH
2100: FOR_TO
2101: IFFALSE 2165
// begin uc_nation = 3 ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_INT 3
2110: ST_TO_ADDR
// uc_side = 6 ;
2111: LD_ADDR_OWVAR 20
2115: PUSH
2116: LD_INT 6
2118: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2119: LD_INT 0
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: LD_INT 4
2127: PPUSH
2128: CALL_OW 12
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: LD_INT 3
2138: PPUSH
2139: CALL_OW 12
2143: PPUSH
2144: CALL_OW 380
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2148: CALL_OW 44
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 49
// end ;
2163: GO 2100
2165: POP
2166: POP
// end ; end ;
2167: LD_VAR 0 1
2171: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2172: LD_INT 0
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
2181: PPUSH
// rnd = rand ( 1 , 4 ) ;
2182: LD_ADDR_VAR 0 3
2186: PUSH
2187: LD_INT 1
2189: PPUSH
2190: LD_INT 4
2192: PPUSH
2193: CALL_OW 12
2197: ST_TO_ADDR
// uc_side = 6 ;
2198: LD_ADDR_OWVAR 20
2202: PUSH
2203: LD_INT 6
2205: ST_TO_ADDR
// uc_nation = 3 ;
2206: LD_ADDR_OWVAR 21
2210: PUSH
2211: LD_INT 3
2213: ST_TO_ADDR
// if rnd < 4 then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 4
2221: LESS
2222: IFFALSE 2598
// begin vc_chassis = ru_medium_wheeled ;
2224: LD_ADDR_OWVAR 37
2228: PUSH
2229: LD_INT 21
2231: ST_TO_ADDR
// vc_control = control_manual ;
2232: LD_ADDR_OWVAR 38
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// vc_engine = engine_combustion ;
2240: LD_ADDR_OWVAR 39
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2248: LD_ADDR_VAR 0 5
2252: PUSH
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 100
2258: PPUSH
2259: CALL_OW 12
2263: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2264: LD_VAR 0 5
2268: PUSH
2269: LD_EXP 35
2273: PUSH
2274: LD_INT 1
2276: PLUS
2277: LESS
2278: IFFALSE 2290
// vc_weapon = ru_cargo_bay else
2280: LD_ADDR_OWVAR 40
2284: PUSH
2285: LD_INT 51
2287: ST_TO_ADDR
2288: GO 2321
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2290: LD_ADDR_OWVAR 40
2294: PUSH
2295: LD_INT 42
2297: PUSH
2298: LD_INT 43
2300: PUSH
2301: LD_INT 44
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 1
2311: PPUSH
2312: LD_INT 3
2314: PPUSH
2315: CALL_OW 12
2319: ARRAY
2320: ST_TO_ADDR
// vehicle = CreateVehicle ;
2321: LD_ADDR_VAR 0 7
2325: PUSH
2326: CALL_OW 45
2330: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2331: LD_VAR 0 7
2335: PPUSH
2336: LD_INT 3
2338: PPUSH
2339: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2343: LD_VAR 0 7
2347: PPUSH
2348: LD_INT 3
2350: PPUSH
2351: LD_INT 0
2353: PPUSH
2354: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2358: LD_INT 0
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: LD_INT 4
2366: PPUSH
2367: CALL_OW 12
2371: PPUSH
2372: LD_INT 2
2374: PPUSH
2375: LD_INT 3
2377: PPUSH
2378: CALL_OW 12
2382: PPUSH
2383: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2387: CALL_OW 44
2391: PPUSH
2392: LD_VAR 0 7
2396: PPUSH
2397: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2401: LD_OWVAR 40
2405: PUSH
2406: LD_INT 51
2408: EQUAL
2409: IFFALSE 2426
// AddCargo ( vehicle , mat_cans , 100 ) ;
2411: LD_VAR 0 7
2415: PPUSH
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 100
2421: PPUSH
2422: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2426: LD_VAR 0 7
2430: PPUSH
2431: LD_INT 500
2433: PPUSH
2434: LD_INT 1000
2436: PPUSH
2437: CALL_OW 12
2441: PPUSH
2442: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2446: LD_ADDR_VAR 0 3
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 2
2456: PPUSH
2457: CALL_OW 12
2461: ST_TO_ADDR
// if rnd = 1 then
2462: LD_VAR 0 3
2466: PUSH
2467: LD_INT 1
2469: EQUAL
2470: IFFALSE 2535
// for i := 3 to russianCargoPath1 do
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: DOUBLE
2478: LD_INT 3
2480: DEC
2481: ST_TO_ADDR
2482: LD_EXP 32
2486: PUSH
2487: FOR_TO
2488: IFFALSE 2531
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2490: LD_VAR 0 7
2494: PPUSH
2495: LD_EXP 32
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_INT 1
2508: ARRAY
2509: PPUSH
2510: LD_EXP 32
2514: PUSH
2515: LD_VAR 0 2
2519: ARRAY
2520: PUSH
2521: LD_INT 2
2523: ARRAY
2524: PPUSH
2525: CALL_OW 171
2529: GO 2487
2531: POP
2532: POP
2533: GO 2596
// for i := 3 to russianCargoPath2 do
2535: LD_ADDR_VAR 0 2
2539: PUSH
2540: DOUBLE
2541: LD_INT 3
2543: DEC
2544: ST_TO_ADDR
2545: LD_EXP 33
2549: PUSH
2550: FOR_TO
2551: IFFALSE 2594
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2553: LD_VAR 0 7
2557: PPUSH
2558: LD_EXP 33
2562: PUSH
2563: LD_VAR 0 2
2567: ARRAY
2568: PUSH
2569: LD_INT 1
2571: ARRAY
2572: PPUSH
2573: LD_EXP 33
2577: PUSH
2578: LD_VAR 0 2
2582: ARRAY
2583: PUSH
2584: LD_INT 2
2586: ARRAY
2587: PPUSH
2588: CALL_OW 171
2592: GO 2550
2594: POP
2595: POP
// end else
2596: GO 2937
// begin for i := 1 to rand ( 1 , 3 ) do
2598: LD_ADDR_VAR 0 2
2602: PUSH
2603: DOUBLE
2604: LD_INT 1
2606: DEC
2607: ST_TO_ADDR
2608: LD_INT 1
2610: PPUSH
2611: LD_INT 3
2613: PPUSH
2614: CALL_OW 12
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2698
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2622: LD_INT 0
2624: PPUSH
2625: LD_INT 1
2627: PPUSH
2628: LD_INT 4
2630: PPUSH
2631: CALL_OW 12
2635: PPUSH
2636: LD_INT 2
2638: PPUSH
2639: LD_INT 3
2641: PPUSH
2642: CALL_OW 12
2646: PPUSH
2647: CALL_OW 380
// unit = CreateHuman ;
2651: LD_ADDR_VAR 0 6
2655: PUSH
2656: CALL_OW 44
2660: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
2661: LD_VAR 0 6
2665: PPUSH
2666: LD_INT 3
2668: PPUSH
2669: LD_INT 0
2671: PPUSH
2672: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
2676: LD_VAR 0 6
2680: PPUSH
2681: LD_INT 500
2683: PPUSH
2684: LD_INT 1000
2686: PPUSH
2687: CALL_OW 12
2691: PPUSH
2692: CALL_OW 234
// end ;
2696: GO 2619
2698: POP
2699: POP
// rnd2 = rand ( 1 , 2 ) ;
2700: LD_ADDR_VAR 0 4
2704: PUSH
2705: LD_INT 1
2707: PPUSH
2708: LD_INT 2
2710: PPUSH
2711: CALL_OW 12
2715: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
2716: LD_ADDR_VAR 0 8
2720: PUSH
2721: LD_INT 22
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 21
2733: PUSH
2734: LD_INT 1
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: PUSH
2741: LD_INT 56
2743: PUSH
2744: EMPTY
2745: LIST
2746: PUSH
2747: LD_INT 3
2749: PUSH
2750: LD_INT 60
2752: PUSH
2753: EMPTY
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 69
2770: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
2771: LD_ADDR_VAR 0 8
2775: PUSH
2776: LD_VAR 0 8
2780: PUSH
2781: LD_EXP 54
2785: DIFF
2786: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
2787: LD_ADDR_VAR 0 8
2791: PUSH
2792: LD_VAR 0 8
2796: PUSH
2797: LD_EXP 55
2801: DIFF
2802: ST_TO_ADDR
// if rnd2 = 1 then
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 1
2810: EQUAL
2811: IFFALSE 2876
// for i := 3 to russianCargoPath1 do
2813: LD_ADDR_VAR 0 2
2817: PUSH
2818: DOUBLE
2819: LD_INT 3
2821: DEC
2822: ST_TO_ADDR
2823: LD_EXP 32
2827: PUSH
2828: FOR_TO
2829: IFFALSE 2872
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2831: LD_VAR 0 8
2835: PPUSH
2836: LD_EXP 32
2840: PUSH
2841: LD_VAR 0 2
2845: ARRAY
2846: PUSH
2847: LD_INT 1
2849: ARRAY
2850: PPUSH
2851: LD_EXP 32
2855: PUSH
2856: LD_VAR 0 2
2860: ARRAY
2861: PUSH
2862: LD_INT 2
2864: ARRAY
2865: PPUSH
2866: CALL_OW 171
2870: GO 2828
2872: POP
2873: POP
2874: GO 2937
// for i := 3 to russianCargoPath2 do
2876: LD_ADDR_VAR 0 2
2880: PUSH
2881: DOUBLE
2882: LD_INT 3
2884: DEC
2885: ST_TO_ADDR
2886: LD_EXP 33
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2935
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2894: LD_VAR 0 8
2898: PPUSH
2899: LD_EXP 33
2903: PUSH
2904: LD_VAR 0 2
2908: ARRAY
2909: PUSH
2910: LD_INT 1
2912: ARRAY
2913: PPUSH
2914: LD_EXP 33
2918: PUSH
2919: LD_VAR 0 2
2923: ARRAY
2924: PUSH
2925: LD_INT 2
2927: ARRAY
2928: PPUSH
2929: CALL_OW 171
2933: GO 2891
2935: POP
2936: POP
// end ; end ;
2937: LD_VAR 0 1
2941: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
2942: LD_INT 0
2944: PPUSH
2945: PPUSH
2946: PPUSH
// for i := 1 to 2 do
2947: LD_ADDR_VAR 0 2
2951: PUSH
2952: DOUBLE
2953: LD_INT 1
2955: DEC
2956: ST_TO_ADDR
2957: LD_INT 2
2959: PUSH
2960: FOR_TO
2961: IFFALSE 3027
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
2963: LD_INT 0
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: LD_INT 2
2971: PPUSH
2972: LD_INT 3
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: CALL_OW 380
// unit = CreateHuman ;
2984: LD_ADDR_VAR 0 3
2988: PUSH
2989: CALL_OW 44
2993: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
2994: LD_VAR 0 3
2998: PPUSH
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 0
3004: PPUSH
3005: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3009: LD_ADDR_EXP 55
3013: PUSH
3014: LD_EXP 55
3018: PUSH
3019: LD_VAR 0 3
3023: ADD
3024: ST_TO_ADDR
// end ;
3025: GO 2960
3027: POP
3028: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3029: LD_INT 0
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: LD_INT 2
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL_OW 12
3045: PPUSH
3046: CALL_OW 380
// unit = CreateHuman ;
3050: LD_ADDR_VAR 0 3
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3060: LD_VAR 0 3
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 0
3070: PPUSH
3071: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3075: LD_ADDR_EXP 55
3079: PUSH
3080: LD_EXP 55
3084: PUSH
3085: LD_VAR 0 3
3089: ADD
3090: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3091: LD_EXP 55
3095: PPUSH
3096: LD_INT 100
3098: PPUSH
3099: LD_INT 54
3101: PPUSH
3102: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3106: LD_EXP 55
3110: PPUSH
3111: LD_INT 25
3113: PUSH
3114: LD_INT 2
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 72
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: LD_INT 95
3131: PPUSH
3132: LD_INT 52
3134: PPUSH
3135: LD_INT 2
3137: PPUSH
3138: CALL_OW 205
// end ; end_of_file
3142: LD_VAR 0 1
3146: RET
// export Heike ; export function PrepareHeike ; begin
3147: LD_INT 0
3149: PPUSH
// uc_side = 2 ;
3150: LD_ADDR_OWVAR 20
3154: PUSH
3155: LD_INT 2
3157: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3158: LD_ADDR_EXP 60
3162: PUSH
3163: LD_STRING Heike
3165: PPUSH
3166: LD_INT 0
3168: PPUSH
3169: LD_INT 0
3171: PPUSH
3172: CALL 8783 0 3
3176: ST_TO_ADDR
// if Difficulty >= 2 then
3177: LD_OWVAR 67
3181: PUSH
3182: LD_INT 2
3184: GREATEREQUAL
3185: IFFALSE 3200
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3187: LD_INT 51
3189: PPUSH
3190: LD_INT 2
3192: PPUSH
3193: LD_INT 2
3195: PPUSH
3196: CALL_OW 322
// end ;
3200: LD_VAR 0 1
3204: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3205: LD_INT 0
3207: PPUSH
3208: PPUSH
3209: PPUSH
// currentEnemyGroup = [ ] ;
3210: LD_ADDR_EXP 61
3214: PUSH
3215: EMPTY
3216: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3217: LD_ADDR_VAR 0 2
3221: PUSH
3222: DOUBLE
3223: LD_INT 1
3225: DEC
3226: ST_TO_ADDR
3227: LD_EXP 37
3231: PUSH
3232: FOR_TO
3233: IFFALSE 3488
// begin uc_side = 2 ;
3235: LD_ADDR_OWVAR 20
3239: PUSH
3240: LD_INT 2
3242: ST_TO_ADDR
// uc_nation = nation_arabian ;
3243: LD_ADDR_OWVAR 21
3247: PUSH
3248: LD_INT 2
3250: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3251: LD_ADDR_OWVAR 40
3255: PUSH
3256: LD_INT 23
3258: PUSH
3259: LD_INT 24
3261: PUSH
3262: LD_INT 25
3264: PUSH
3265: LD_INT 26
3267: PUSH
3268: LD_INT 27
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 1
3280: PPUSH
3281: LD_INT 5
3283: PPUSH
3284: CALL_OW 12
3288: ARRAY
3289: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3290: LD_OWVAR 40
3294: PUSH
3295: LD_INT 25
3297: PUSH
3298: LD_INT 26
3300: PUSH
3301: LD_INT 27
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: LIST
3308: IN
3309: IFFALSE 3340
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3311: LD_ADDR_OWVAR 37
3315: PUSH
3316: LD_INT 13
3318: PUSH
3319: LD_INT 14
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PUSH
3326: LD_INT 1
3328: PPUSH
3329: LD_INT 2
3331: PPUSH
3332: CALL_OW 12
3336: ARRAY
3337: ST_TO_ADDR
3338: GO 3371
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3340: LD_ADDR_OWVAR 37
3344: PUSH
3345: LD_INT 12
3347: PUSH
3348: LD_INT 13
3350: PUSH
3351: LD_INT 14
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 3
3364: PPUSH
3365: CALL_OW 12
3369: ARRAY
3370: ST_TO_ADDR
// vc_control = control_manual ;
3371: LD_ADDR_OWVAR 38
3375: PUSH
3376: LD_INT 1
3378: ST_TO_ADDR
// vc_engine = engine_combustion ;
3379: LD_ADDR_OWVAR 39
3383: PUSH
3384: LD_INT 1
3386: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3387: LD_ADDR_OWVAR 41
3391: PUSH
3392: LD_INT 100
3394: ST_TO_ADDR
// veh = CreateVehicle ;
3395: LD_ADDR_VAR 0 3
3399: PUSH
3400: CALL_OW 45
3404: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3405: LD_ADDR_EXP 61
3409: PUSH
3410: LD_EXP 61
3414: PUSH
3415: LD_VAR 0 3
3419: ADD
3420: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3421: LD_VAR 0 3
3425: PPUSH
3426: LD_INT 7
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3436: LD_OWVAR 40
3440: PUSH
3441: LD_INT 26
3443: EQUAL
3444: IFFALSE 3460
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3446: LD_INT 0
3448: PPUSH
3449: LD_EXP 31
3453: PPUSH
3454: CALL_OW 383
3458: GO 3472
// PrepareMechanic ( false , enemySkillLevel ) ;
3460: LD_INT 0
3462: PPUSH
3463: LD_EXP 30
3467: PPUSH
3468: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3472: CALL_OW 44
3476: PPUSH
3477: LD_VAR 0 3
3481: PPUSH
3482: CALL_OW 52
// end ;
3486: GO 3232
3488: POP
3489: POP
// end ;
3490: LD_VAR 0 1
3494: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3495: LD_INT 0
3497: PPUSH
3498: PPUSH
3499: PPUSH
// currentEnemyGroup = [ ] ;
3500: LD_ADDR_EXP 61
3504: PUSH
3505: EMPTY
3506: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3507: LD_ADDR_VAR 0 3
3511: PUSH
3512: DOUBLE
3513: LD_INT 1
3515: DEC
3516: ST_TO_ADDR
3517: LD_EXP 38
3521: PPUSH
3522: LD_EXP 39
3526: PPUSH
3527: CALL_OW 12
3531: PUSH
3532: FOR_TO
3533: IFFALSE 3608
// begin uc_side = 2 ;
3535: LD_ADDR_OWVAR 20
3539: PUSH
3540: LD_INT 2
3542: ST_TO_ADDR
// uc_nation = nation_arabian ;
3543: LD_ADDR_OWVAR 21
3547: PUSH
3548: LD_INT 2
3550: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
3551: LD_INT 0
3553: PPUSH
3554: LD_EXP 30
3558: PPUSH
3559: CALL_OW 381
// unit = CreateHuman ;
3563: LD_ADDR_VAR 0 4
3567: PUSH
3568: CALL_OW 44
3572: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3573: LD_ADDR_EXP 61
3577: PUSH
3578: LD_EXP 61
3582: PUSH
3583: LD_VAR 0 4
3587: ADD
3588: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3589: LD_VAR 0 4
3593: PPUSH
3594: LD_VAR 0 1
3598: PPUSH
3599: LD_INT 0
3601: PPUSH
3602: CALL_OW 49
// end ;
3606: GO 3532
3608: POP
3609: POP
// for i := 1 to rand ( 1 , 3 ) do
3610: LD_ADDR_VAR 0 3
3614: PUSH
3615: DOUBLE
3616: LD_INT 1
3618: DEC
3619: ST_TO_ADDR
3620: LD_INT 1
3622: PPUSH
3623: LD_INT 3
3625: PPUSH
3626: CALL_OW 12
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3707
// begin uc_side = 2 ;
3634: LD_ADDR_OWVAR 20
3638: PUSH
3639: LD_INT 2
3641: ST_TO_ADDR
// uc_nation = nation_arabian ;
3642: LD_ADDR_OWVAR 21
3646: PUSH
3647: LD_INT 2
3649: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
3650: LD_INT 0
3652: PPUSH
3653: LD_EXP 30
3657: PPUSH
3658: CALL_OW 384
// unit = CreateHuman ;
3662: LD_ADDR_VAR 0 4
3666: PUSH
3667: CALL_OW 44
3671: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3672: LD_ADDR_EXP 61
3676: PUSH
3677: LD_EXP 61
3681: PUSH
3682: LD_VAR 0 4
3686: ADD
3687: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3688: LD_VAR 0 4
3692: PPUSH
3693: LD_VAR 0 1
3697: PPUSH
3698: LD_INT 0
3700: PPUSH
3701: CALL_OW 49
// end ;
3705: GO 3631
3707: POP
3708: POP
// end ;
3709: LD_VAR 0 2
3713: RET
// export function PrepareArabianKiller ; var un ; begin
3714: LD_INT 0
3716: PPUSH
3717: PPUSH
// uc_side = 5 ;
3718: LD_ADDR_OWVAR 20
3722: PUSH
3723: LD_INT 5
3725: ST_TO_ADDR
// uc_nation = nation_arabian ;
3726: LD_ADDR_OWVAR 21
3730: PUSH
3731: LD_INT 2
3733: ST_TO_ADDR
// hc_class = class_soldier ;
3734: LD_ADDR_OWVAR 28
3738: PUSH
3739: LD_INT 1
3741: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3742: LD_ADDR_OWVAR 31
3746: PUSH
3747: LD_INT 0
3749: PUSH
3750: LD_INT 0
3752: PUSH
3753: LD_INT 0
3755: PUSH
3756: LD_INT 0
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: ST_TO_ADDR
// un = CreateHuman ;
3765: LD_ADDR_VAR 0 2
3769: PUSH
3770: CALL_OW 44
3774: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
3775: LD_VAR 0 2
3779: PPUSH
3780: LD_INT 12
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
3790: LD_VAR 0 2
3794: PPUSH
3795: LD_EXP 52
3799: PPUSH
3800: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
3804: LD_ADDR_EXP 21
3808: PUSH
3809: LD_EXP 21
3813: PUSH
3814: LD_INT 1
3816: PLUS
3817: ST_TO_ADDR
// end ; end_of_file
3818: LD_VAR 0 1
3822: RET
// export function Nef_PrepareNature ; var i , un ; begin
3823: LD_INT 0
3825: PPUSH
3826: PPUSH
3827: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
3828: LD_ADDR_VAR 0 2
3832: PUSH
3833: DOUBLE
3834: LD_INT 1
3836: DEC
3837: ST_TO_ADDR
3838: LD_EXP 24
3842: PUSH
3843: LD_INT 1
3845: ARRAY
3846: PUSH
3847: FOR_TO
3848: IFFALSE 3958
// begin uc_side = 0 ;
3850: LD_ADDR_OWVAR 20
3854: PUSH
3855: LD_INT 0
3857: ST_TO_ADDR
// uc_nation = nation_nature ;
3858: LD_ADDR_OWVAR 21
3862: PUSH
3863: LD_INT 0
3865: ST_TO_ADDR
// hc_class = class_apeman ;
3866: LD_ADDR_OWVAR 28
3870: PUSH
3871: LD_INT 12
3873: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3874: LD_ADDR_OWVAR 31
3878: PUSH
3879: LD_EXP 25
3883: PUSH
3884: LD_INT 1
3886: ARRAY
3887: PUSH
3888: LD_EXP 25
3892: PUSH
3893: LD_INT 2
3895: ARRAY
3896: PUSH
3897: LD_EXP 25
3901: PUSH
3902: LD_INT 3
3904: ARRAY
3905: PUSH
3906: LD_EXP 25
3910: PUSH
3911: LD_INT 4
3913: ARRAY
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3921: LD_ADDR_OWVAR 35
3925: PUSH
3926: LD_EXP 26
3930: ST_TO_ADDR
// un = CreateHuman ;
3931: LD_ADDR_VAR 0 3
3935: PUSH
3936: CALL_OW 44
3940: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3941: LD_VAR 0 3
3945: PPUSH
3946: LD_INT 8
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
// end ;
3956: GO 3847
3958: POP
3959: POP
// for i := 1 to animalsAmount [ 2 ] do
3960: LD_ADDR_VAR 0 2
3964: PUSH
3965: DOUBLE
3966: LD_INT 1
3968: DEC
3969: ST_TO_ADDR
3970: LD_EXP 24
3974: PUSH
3975: LD_INT 2
3977: ARRAY
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4090
// begin uc_side = 0 ;
3982: LD_ADDR_OWVAR 20
3986: PUSH
3987: LD_INT 0
3989: ST_TO_ADDR
// uc_nation = nation_nature ;
3990: LD_ADDR_OWVAR 21
3994: PUSH
3995: LD_INT 0
3997: ST_TO_ADDR
// hc_class = class_phororhacos ;
3998: LD_ADDR_OWVAR 28
4002: PUSH
4003: LD_INT 18
4005: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4006: LD_ADDR_OWVAR 31
4010: PUSH
4011: LD_EXP 25
4015: PUSH
4016: LD_INT 1
4018: ARRAY
4019: PUSH
4020: LD_EXP 25
4024: PUSH
4025: LD_INT 2
4027: ARRAY
4028: PUSH
4029: LD_EXP 25
4033: PUSH
4034: LD_INT 3
4036: ARRAY
4037: PUSH
4038: LD_EXP 25
4042: PUSH
4043: LD_INT 4
4045: ARRAY
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4053: LD_ADDR_OWVAR 35
4057: PUSH
4058: LD_EXP 26
4062: ST_TO_ADDR
// un = CreateHuman ;
4063: LD_ADDR_VAR 0 3
4067: PUSH
4068: CALL_OW 44
4072: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_INT 8
4080: PPUSH
4081: LD_INT 0
4083: PPUSH
4084: CALL_OW 49
// end ;
4088: GO 3979
4090: POP
4091: POP
// for i := 1 to animalsAmount [ 3 ] do
4092: LD_ADDR_VAR 0 2
4096: PUSH
4097: DOUBLE
4098: LD_INT 1
4100: DEC
4101: ST_TO_ADDR
4102: LD_EXP 24
4106: PUSH
4107: LD_INT 3
4109: ARRAY
4110: PUSH
4111: FOR_TO
4112: IFFALSE 4222
// begin uc_side = 0 ;
4114: LD_ADDR_OWVAR 20
4118: PUSH
4119: LD_INT 0
4121: ST_TO_ADDR
// uc_nation = nation_nature ;
4122: LD_ADDR_OWVAR 21
4126: PUSH
4127: LD_INT 0
4129: ST_TO_ADDR
// hc_class = class_tiger ;
4130: LD_ADDR_OWVAR 28
4134: PUSH
4135: LD_INT 14
4137: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4138: LD_ADDR_OWVAR 31
4142: PUSH
4143: LD_EXP 25
4147: PUSH
4148: LD_INT 1
4150: ARRAY
4151: PUSH
4152: LD_EXP 25
4156: PUSH
4157: LD_INT 2
4159: ARRAY
4160: PUSH
4161: LD_EXP 25
4165: PUSH
4166: LD_INT 3
4168: ARRAY
4169: PUSH
4170: LD_EXP 25
4174: PUSH
4175: LD_INT 4
4177: ARRAY
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4185: LD_ADDR_OWVAR 35
4189: PUSH
4190: LD_EXP 26
4194: ST_TO_ADDR
// un = CreateHuman ;
4195: LD_ADDR_VAR 0 3
4199: PUSH
4200: CALL_OW 44
4204: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4205: LD_VAR 0 3
4209: PPUSH
4210: LD_INT 8
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: CALL_OW 49
// end ;
4220: GO 4111
4222: POP
4223: POP
// for i := 1 to animalsAmount [ 4 ] do
4224: LD_ADDR_VAR 0 2
4228: PUSH
4229: DOUBLE
4230: LD_INT 1
4232: DEC
4233: ST_TO_ADDR
4234: LD_EXP 24
4238: PUSH
4239: LD_INT 4
4241: ARRAY
4242: PUSH
4243: FOR_TO
4244: IFFALSE 4354
// begin uc_side = 0 ;
4246: LD_ADDR_OWVAR 20
4250: PUSH
4251: LD_INT 0
4253: ST_TO_ADDR
// uc_nation = nation_nature ;
4254: LD_ADDR_OWVAR 21
4258: PUSH
4259: LD_INT 0
4261: ST_TO_ADDR
// hc_class = 21 ;
4262: LD_ADDR_OWVAR 28
4266: PUSH
4267: LD_INT 21
4269: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4270: LD_ADDR_OWVAR 31
4274: PUSH
4275: LD_EXP 25
4279: PUSH
4280: LD_INT 1
4282: ARRAY
4283: PUSH
4284: LD_EXP 25
4288: PUSH
4289: LD_INT 2
4291: ARRAY
4292: PUSH
4293: LD_EXP 25
4297: PUSH
4298: LD_INT 3
4300: ARRAY
4301: PUSH
4302: LD_EXP 25
4306: PUSH
4307: LD_INT 4
4309: ARRAY
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4317: LD_ADDR_OWVAR 35
4321: PUSH
4322: LD_EXP 26
4326: ST_TO_ADDR
// un = CreateHuman ;
4327: LD_ADDR_VAR 0 3
4331: PUSH
4332: CALL_OW 44
4336: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4337: LD_VAR 0 3
4341: PPUSH
4342: LD_INT 8
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 49
// end ;
4352: GO 4243
4354: POP
4355: POP
// for i := 1 to animalsAmount [ 5 ] do
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: DOUBLE
4362: LD_INT 1
4364: DEC
4365: ST_TO_ADDR
4366: LD_EXP 24
4370: PUSH
4371: LD_INT 5
4373: ARRAY
4374: PUSH
4375: FOR_TO
4376: IFFALSE 4437
// begin uc_side = 0 ;
4378: LD_ADDR_OWVAR 20
4382: PUSH
4383: LD_INT 0
4385: ST_TO_ADDR
// uc_nation = nation_nature ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_INT 0
4393: ST_TO_ADDR
// vc_chassis := 31 ;
4394: LD_ADDR_OWVAR 37
4398: PUSH
4399: LD_INT 31
4401: ST_TO_ADDR
// vc_control := control_rider ;
4402: LD_ADDR_OWVAR 38
4406: PUSH
4407: LD_INT 4
4409: ST_TO_ADDR
// un := CreateVehicle ;
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: CALL_OW 45
4419: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4420: LD_VAR 0 3
4424: PPUSH
4425: LD_INT 8
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: CALL_OW 49
// end ;
4435: GO 4375
4437: POP
4438: POP
// end ; end_of_file
4439: LD_VAR 0 1
4443: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
4448: PPUSH
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
// for unit in units do
4464: LD_ADDR_VAR 0 8
4468: PUSH
4469: LD_VAR 0 1
4473: PUSH
4474: FOR_IN
4475: IFFALSE 4512
// if not ignorePath then
4477: LD_VAR 0 3
4481: NOT
4482: IFFALSE 4498
// SetTag ( unit , 0 ) else
4484: LD_VAR 0 8
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 109
4496: GO 4510
// SetTag ( unit , 1 ) ;
4498: LD_VAR 0 8
4502: PPUSH
4503: LD_INT 1
4505: PPUSH
4506: CALL_OW 109
4510: GO 4474
4512: POP
4513: POP
// startAttacks = false ;
4514: LD_ADDR_VAR 0 21
4518: PUSH
4519: LD_INT 0
4521: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
4522: LD_ADDR_VAR 0 17
4526: PUSH
4527: LD_VAR 0 2
4531: PUSH
4532: LD_VAR 0 2
4536: ARRAY
4537: PUSH
4538: LD_INT 1
4540: ARRAY
4541: PUSH
4542: LD_VAR 0 2
4546: PUSH
4547: LD_VAR 0 2
4551: ARRAY
4552: PUSH
4553: LD_INT 2
4555: ARRAY
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: ST_TO_ADDR
// mechanics = [ ] ;
4561: LD_ADDR_VAR 0 12
4565: PUSH
4566: EMPTY
4567: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
4568: LD_ADDR_VAR 0 9
4572: PUSH
4573: LD_VAR 0 1
4577: PPUSH
4578: LD_INT 50
4580: PUSH
4581: EMPTY
4582: LIST
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: LD_INT 25
4589: PUSH
4590: LD_INT 1
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 21
4599: PUSH
4600: LD_INT 2
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PPUSH
4616: CALL_OW 72
4620: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
4621: LD_ADDR_VAR 0 11
4625: PUSH
4626: LD_VAR 0 1
4630: PPUSH
4631: LD_INT 50
4633: PUSH
4634: EMPTY
4635: LIST
4636: PUSH
4637: LD_INT 25
4639: PUSH
4640: LD_INT 4
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PPUSH
4651: CALL_OW 72
4655: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4656: LD_ADDR_VAR 0 13
4660: PUSH
4661: LD_VAR 0 1
4665: PPUSH
4666: LD_INT 21
4668: PUSH
4669: LD_INT 1
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 3
4678: PUSH
4679: LD_INT 24
4681: PUSH
4682: LD_INT 1000
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PPUSH
4697: CALL_OW 72
4701: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
4702: LD_ADDR_VAR 0 15
4706: PUSH
4707: LD_INT 9
4709: PPUSH
4710: CALL_OW 435
4714: ST_TO_ADDR
// if not ignorePath then
4715: LD_VAR 0 3
4719: NOT
4720: IFFALSE 5702
// begin for unit in attackUnits do
4722: LD_ADDR_VAR 0 8
4726: PUSH
4727: LD_VAR 0 9
4731: PUSH
4732: FOR_IN
4733: IFFALSE 5476
// begin if path and not startAttacks then
4735: LD_VAR 0 2
4739: PUSH
4740: LD_VAR 0 21
4744: NOT
4745: AND
4746: IFFALSE 5465
// begin i = 1 ;
4748: LD_ADDR_VAR 0 7
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
4756: LD_ADDR_VAR 0 15
4760: PUSH
4761: LD_INT 9
4763: PPUSH
4764: CALL_OW 435
4768: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
4769: LD_ADDR_VAR 0 18
4773: PUSH
4774: LD_INT 81
4776: PUSH
4777: LD_VAR 0 8
4781: PPUSH
4782: CALL_OW 255
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 69
4795: PPUSH
4796: LD_VAR 0 8
4800: PPUSH
4801: CALL_OW 74
4805: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
4806: LD_ADDR_VAR 0 19
4810: PUSH
4811: LD_VAR 0 15
4815: PPUSH
4816: LD_VAR 0 8
4820: PPUSH
4821: CALL_OW 250
4825: PPUSH
4826: LD_VAR 0 8
4830: PPUSH
4831: CALL_OW 251
4835: PPUSH
4836: CALL_OW 439
4840: ST_TO_ADDR
// if damageUnits and medics then
4841: LD_VAR 0 13
4845: PUSH
4846: LD_VAR 0 11
4850: AND
4851: IFFALSE 4873
// ComHeal ( medics , damageUnits [ 1 ] ) else
4853: LD_VAR 0 11
4857: PPUSH
4858: LD_VAR 0 13
4862: PUSH
4863: LD_INT 1
4865: ARRAY
4866: PPUSH
4867: CALL_OW 128
4871: GO 4916
// if medics then
4873: LD_VAR 0 11
4877: IFFALSE 4916
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
4879: LD_VAR 0 11
4883: PPUSH
4884: LD_VAR 0 9
4888: PUSH
4889: LD_INT 1
4891: ARRAY
4892: PPUSH
4893: CALL_OW 250
4897: PPUSH
4898: LD_VAR 0 9
4902: PUSH
4903: LD_INT 1
4905: ARRAY
4906: PPUSH
4907: CALL_OW 251
4911: PPUSH
4912: CALL_OW 111
// if not HasTask ( unit ) then
4916: LD_VAR 0 8
4920: PPUSH
4921: CALL_OW 314
4925: NOT
4926: IFFALSE 5165
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
4928: LD_ADDR_VAR 0 19
4932: PUSH
4933: LD_VAR 0 15
4937: PPUSH
4938: LD_VAR 0 8
4942: PPUSH
4943: CALL_OW 250
4947: PPUSH
4948: LD_VAR 0 8
4952: PPUSH
4953: CALL_OW 251
4957: PPUSH
4958: CALL_OW 439
4962: ST_TO_ADDR
// if i > crates then
4963: LD_VAR 0 7
4967: PUSH
4968: LD_VAR 0 15
4972: GREATER
4973: IFFALSE 4983
// i = 1 ;
4975: LD_ADDR_VAR 0 7
4979: PUSH
4980: LD_INT 1
4982: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
4983: LD_VAR 0 18
4987: PUSH
4988: LD_VAR 0 19
4992: AND
4993: IFFALSE 5108
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
4995: LD_VAR 0 8
4999: PPUSH
5000: LD_VAR 0 18
5004: PPUSH
5005: CALL_OW 250
5009: PPUSH
5010: LD_VAR 0 18
5014: PPUSH
5015: CALL_OW 251
5019: PPUSH
5020: CALL_OW 297
5024: PUSH
5025: LD_VAR 0 8
5029: PPUSH
5030: LD_VAR 0 19
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 19
5043: PUSH
5044: LD_INT 2
5046: ARRAY
5047: PPUSH
5048: CALL_OW 297
5052: LESS
5053: IFFALSE 5071
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5055: LD_VAR 0 9
5059: PPUSH
5060: LD_VAR 0 18
5064: PPUSH
5065: CALL_OW 115
5069: GO 5106
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5071: LD_VAR 0 9
5075: PPUSH
5076: LD_VAR 0 15
5080: PUSH
5081: LD_VAR 0 7
5085: ARRAY
5086: PPUSH
5087: LD_VAR 0 15
5091: PUSH
5092: LD_VAR 0 7
5096: PUSH
5097: LD_INT 1
5099: PLUS
5100: ARRAY
5101: PPUSH
5102: CALL_OW 116
// end else
5106: GO 5165
// if crates then
5108: LD_VAR 0 15
5112: IFFALSE 5151
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5114: LD_VAR 0 9
5118: PPUSH
5119: LD_VAR 0 15
5123: PUSH
5124: LD_VAR 0 7
5128: ARRAY
5129: PPUSH
5130: LD_VAR 0 15
5134: PUSH
5135: LD_VAR 0 7
5139: PUSH
5140: LD_INT 1
5142: PLUS
5143: ARRAY
5144: PPUSH
5145: CALL_OW 116
5149: GO 5165
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5151: LD_VAR 0 9
5155: PPUSH
5156: LD_VAR 0 18
5160: PPUSH
5161: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5165: LD_INT 35
5167: PPUSH
5168: CALL_OW 67
// if path then
5172: LD_VAR 0 2
5176: IFFALSE 5262
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5178: LD_ADDR_VAR 0 16
5182: PUSH
5183: LD_VAR 0 8
5187: PPUSH
5188: LD_VAR 0 2
5192: PPUSH
5193: CALL 6592 0 2
5197: ST_TO_ADDR
// if agressiveMove then
5198: LD_VAR 0 4
5202: IFFALSE 5233
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5204: LD_VAR 0 9
5208: PPUSH
5209: LD_VAR 0 16
5213: PUSH
5214: LD_INT 1
5216: ARRAY
5217: PPUSH
5218: LD_VAR 0 16
5222: PUSH
5223: LD_INT 2
5225: ARRAY
5226: PPUSH
5227: CALL_OW 114
5231: GO 5260
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5233: LD_VAR 0 9
5237: PPUSH
5238: LD_VAR 0 16
5242: PUSH
5243: LD_INT 1
5245: ARRAY
5246: PPUSH
5247: LD_VAR 0 16
5251: PUSH
5252: LD_INT 2
5254: ARRAY
5255: PPUSH
5256: CALL_OW 111
// end else
5260: GO 5270
// startAttacks = true ;
5262: LD_ADDR_VAR 0 21
5266: PUSH
5267: LD_INT 1
5269: ST_TO_ADDR
// i = i + 2 ;
5270: LD_ADDR_VAR 0 7
5274: PUSH
5275: LD_VAR 0 7
5279: PUSH
5280: LD_INT 2
5282: PLUS
5283: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5284: LD_VAR 0 8
5288: PPUSH
5289: CALL_OW 314
5293: NOT
5294: PUSH
5295: LD_INT 22
5297: PUSH
5298: LD_VAR 0 8
5302: PPUSH
5303: CALL_OW 255
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: PUSH
5312: LD_INT 92
5314: PUSH
5315: LD_VAR 0 16
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PUSH
5324: LD_VAR 0 16
5328: PUSH
5329: LD_INT 2
5331: ARRAY
5332: PUSH
5333: LD_INT 4
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL_OW 69
5350: PUSH
5351: LD_INT 3
5353: GREATER
5354: AND
5355: PUSH
5356: LD_VAR 0 21
5360: NOT
5361: AND
5362: IFFALSE 4756
// for i := 1 to path do
5364: LD_ADDR_VAR 0 7
5368: PUSH
5369: DOUBLE
5370: LD_INT 1
5372: DEC
5373: ST_TO_ADDR
5374: LD_VAR 0 2
5378: PUSH
5379: FOR_TO
5380: IFFALSE 5463
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5382: LD_VAR 0 2
5386: PUSH
5387: LD_VAR 0 7
5391: ARRAY
5392: PUSH
5393: LD_INT 1
5395: ARRAY
5396: PUSH
5397: LD_VAR 0 16
5401: PUSH
5402: LD_INT 1
5404: ARRAY
5405: EQUAL
5406: PUSH
5407: LD_VAR 0 2
5411: PUSH
5412: LD_VAR 0 7
5416: ARRAY
5417: PUSH
5418: LD_INT 2
5420: ARRAY
5421: PUSH
5422: LD_VAR 0 16
5426: PUSH
5427: LD_INT 2
5429: ARRAY
5430: EQUAL
5431: AND
5432: IFFALSE 5461
// begin path = path diff [ path [ i ] ] ;
5434: LD_ADDR_VAR 0 2
5438: PUSH
5439: LD_VAR 0 2
5443: PUSH
5444: LD_VAR 0 2
5448: PUSH
5449: LD_VAR 0 7
5453: ARRAY
5454: PUSH
5455: EMPTY
5456: LIST
5457: DIFF
5458: ST_TO_ADDR
// break ;
5459: GO 5463
// end ;
5461: GO 5379
5463: POP
5464: POP
// end ; if not path then
5465: LD_VAR 0 2
5469: NOT
5470: IFFALSE 5474
// break ;
5472: GO 5476
// end ;
5474: GO 4732
5476: POP
5477: POP
// repeat unitsReachPathEnd = 0 ;
5478: LD_ADDR_VAR 0 20
5482: PUSH
5483: LD_INT 0
5485: ST_TO_ADDR
// for attackUnit in attackUnits do
5486: LD_ADDR_VAR 0 10
5490: PUSH
5491: LD_VAR 0 9
5495: PUSH
5496: FOR_IN
5497: IFFALSE 5670
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
5499: LD_VAR 0 10
5503: PPUSH
5504: LD_VAR 0 17
5508: PUSH
5509: LD_INT 1
5511: ARRAY
5512: PPUSH
5513: LD_VAR 0 17
5517: PUSH
5518: LD_INT 2
5520: ARRAY
5521: PPUSH
5522: CALL_OW 297
5526: PUSH
5527: LD_INT 7
5529: LESS
5530: NOT
5531: PUSH
5532: LD_VAR 0 10
5536: PPUSH
5537: CALL_OW 110
5541: PUSH
5542: LD_INT 0
5544: EQUAL
5545: AND
5546: IFFALSE 5612
// begin if agressiveMove then
5548: LD_VAR 0 4
5552: IFFALSE 5583
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
5554: LD_VAR 0 10
5558: PPUSH
5559: LD_VAR 0 17
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_VAR 0 17
5572: PUSH
5573: LD_INT 2
5575: ARRAY
5576: PPUSH
5577: CALL_OW 114
5581: GO 5610
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
5583: LD_VAR 0 10
5587: PPUSH
5588: LD_VAR 0 17
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_VAR 0 17
5601: PUSH
5602: LD_INT 2
5604: ARRAY
5605: PPUSH
5606: CALL_OW 111
// end else
5610: GO 5639
// if GetTag ( attackUnit ) = 0 then
5612: LD_VAR 0 10
5616: PPUSH
5617: CALL_OW 110
5621: PUSH
5622: LD_INT 0
5624: EQUAL
5625: IFFALSE 5639
// SetTag ( attackUnit , 1 ) ;
5627: LD_VAR 0 10
5631: PPUSH
5632: LD_INT 1
5634: PPUSH
5635: CALL_OW 109
// if GetTag ( unit ) = 1 then
5639: LD_VAR 0 8
5643: PPUSH
5644: CALL_OW 110
5648: PUSH
5649: LD_INT 1
5651: EQUAL
5652: IFFALSE 5668
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
5654: LD_ADDR_VAR 0 20
5658: PUSH
5659: LD_VAR 0 20
5663: PUSH
5664: LD_INT 1
5666: PLUS
5667: ST_TO_ADDR
// end ;
5668: GO 5496
5670: POP
5671: POP
// wait ( 0 0$1 ) ;
5672: LD_INT 35
5674: PPUSH
5675: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
5679: LD_VAR 0 20
5683: PUSH
5684: LD_VAR 0 9
5688: PUSH
5689: LD_INT 3
5691: MINUS
5692: GREATER
5693: IFFALSE 5478
// wait ( 0 0$10 ) ;
5695: LD_INT 350
5697: PPUSH
5698: CALL_OW 67
// end ; for attackUnit in attackUnits do
5702: LD_ADDR_VAR 0 10
5706: PUSH
5707: LD_VAR 0 9
5711: PUSH
5712: FOR_IN
5713: IFFALSE 5729
// SetTag ( attackUnit , 2 ) ;
5715: LD_VAR 0 10
5719: PPUSH
5720: LD_INT 2
5722: PPUSH
5723: CALL_OW 109
5727: GO 5712
5729: POP
5730: POP
// startAttacks = true ;
5731: LD_ADDR_VAR 0 21
5735: PUSH
5736: LD_INT 1
5738: ST_TO_ADDR
// if startAttacks then
5739: LD_VAR 0 21
5743: IFFALSE 6562
// begin repeat wait ( 0 0$1 ) ;
5745: LD_INT 35
5747: PPUSH
5748: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5752: LD_ADDR_VAR 0 11
5756: PUSH
5757: LD_VAR 0 1
5761: PPUSH
5762: LD_INT 50
5764: PUSH
5765: EMPTY
5766: LIST
5767: PUSH
5768: LD_INT 25
5770: PUSH
5771: LD_INT 4
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PPUSH
5782: CALL_OW 72
5786: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5787: LD_ADDR_VAR 0 13
5791: PUSH
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_INT 21
5799: PUSH
5800: LD_INT 1
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 25
5809: PUSH
5810: LD_INT 1
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 3
5819: PUSH
5820: LD_INT 24
5822: PUSH
5823: LD_INT 1000
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 72
5843: ST_TO_ADDR
// if damageUnits and medics then
5844: LD_VAR 0 13
5848: PUSH
5849: LD_VAR 0 11
5853: AND
5854: IFFALSE 5876
// ComHeal ( medics , damageUnits [ 1 ] ) else
5856: LD_VAR 0 11
5860: PPUSH
5861: LD_VAR 0 13
5865: PUSH
5866: LD_INT 1
5868: ARRAY
5869: PPUSH
5870: CALL_OW 128
5874: GO 5926
// if medics and not damageUnits then
5876: LD_VAR 0 11
5880: PUSH
5881: LD_VAR 0 13
5885: NOT
5886: AND
5887: IFFALSE 5926
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5889: LD_VAR 0 11
5893: PPUSH
5894: LD_VAR 0 9
5898: PUSH
5899: LD_INT 1
5901: ARRAY
5902: PPUSH
5903: CALL_OW 250
5907: PPUSH
5908: LD_VAR 0 9
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: CALL_OW 251
5921: PPUSH
5922: CALL_OW 111
// for attackUnit in attackUnits do
5926: LD_ADDR_VAR 0 10
5930: PUSH
5931: LD_VAR 0 9
5935: PUSH
5936: FOR_IN
5937: IFFALSE 6553
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
5939: LD_ADDR_VAR 0 22
5943: PUSH
5944: LD_INT 81
5946: PUSH
5947: LD_VAR 0 10
5951: PPUSH
5952: CALL_OW 255
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PPUSH
5961: CALL_OW 69
5965: PPUSH
5966: LD_VAR 0 10
5970: PPUSH
5971: CALL_OW 74
5975: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
5976: LD_ADDR_VAR 0 23
5980: PUSH
5981: LD_INT 81
5983: PUSH
5984: LD_VAR 0 10
5988: PPUSH
5989: CALL_OW 255
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 59
6003: PUSH
6004: EMPTY
6005: LIST
6006: PUSH
6007: LD_INT 21
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 21
6019: PUSH
6020: LD_INT 2
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: EMPTY
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PPUSH
6045: LD_VAR 0 10
6049: PPUSH
6050: CALL_OW 74
6054: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6055: LD_VAR 0 10
6059: PPUSH
6060: CALL_OW 110
6064: PUSH
6065: LD_INT 2
6067: EQUAL
6068: IFFALSE 6228
// begin if GetDistUnits ( attackUnit , target1 ) + 8 < GetDistUnits ( attackUnit , target2 ) then
6070: LD_VAR 0 10
6074: PPUSH
6075: LD_VAR 0 22
6079: PPUSH
6080: CALL_OW 296
6084: PUSH
6085: LD_INT 8
6087: PLUS
6088: PUSH
6089: LD_VAR 0 10
6093: PPUSH
6094: LD_VAR 0 23
6098: PPUSH
6099: CALL_OW 296
6103: LESS
6104: IFFALSE 6122
// ComAttackUnit ( attackUnit , target1 ) else
6106: LD_VAR 0 10
6110: PPUSH
6111: LD_VAR 0 22
6115: PPUSH
6116: CALL_OW 115
6120: GO 6136
// ComAttackUnit ( attackUnit , target2 ) ;
6122: LD_VAR 0 10
6126: PPUSH
6127: LD_VAR 0 23
6131: PPUSH
6132: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6136: LD_VAR 0 10
6140: PPUSH
6141: CALL_OW 256
6145: PUSH
6146: LD_INT 650
6148: LESS
6149: PUSH
6150: LD_VAR 0 10
6154: PPUSH
6155: CALL_OW 247
6159: PUSH
6160: LD_INT 2
6162: EQUAL
6163: AND
6164: PUSH
6165: LD_VAR 0 10
6169: PPUSH
6170: CALL_OW 263
6174: PUSH
6175: LD_INT 1
6177: EQUAL
6178: AND
6179: IFFALSE 6228
// begin SetTag ( attackUnit , 3 ) ;
6181: LD_VAR 0 10
6185: PPUSH
6186: LD_INT 3
6188: PPUSH
6189: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6193: LD_VAR 0 10
6197: PPUSH
6198: CALL_OW 313
6202: PUSH
6203: LD_INT 1
6205: ARRAY
6206: PPUSH
6207: LD_INT 3
6209: PPUSH
6210: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6214: LD_VAR 0 10
6218: PPUSH
6219: LD_VAR 0 5
6223: PPUSH
6224: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6228: LD_VAR 0 10
6232: PPUSH
6233: LD_VAR 0 5
6237: PPUSH
6238: CALL_OW 308
6242: PUSH
6243: LD_VAR 0 10
6247: PPUSH
6248: CALL_OW 110
6252: PUSH
6253: LD_INT 3
6255: EQUAL
6256: AND
6257: PUSH
6258: LD_VAR 0 10
6262: PPUSH
6263: CALL_OW 313
6267: AND
6268: IFFALSE 6341
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6270: LD_ADDR_VAR 0 14
6274: PUSH
6275: LD_VAR 0 10
6279: PPUSH
6280: CALL_OW 313
6284: PUSH
6285: LD_INT 1
6287: ARRAY
6288: ST_TO_ADDR
// if not driver in mechanics then
6289: LD_VAR 0 14
6293: PUSH
6294: LD_VAR 0 12
6298: IN
6299: NOT
6300: IFFALSE 6318
// mechanics = mechanics ^ driver ;
6302: LD_ADDR_VAR 0 12
6306: PUSH
6307: LD_VAR 0 12
6311: PUSH
6312: LD_VAR 0 14
6316: ADD
6317: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6318: LD_VAR 0 14
6322: PPUSH
6323: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6327: LD_VAR 0 14
6331: PPUSH
6332: LD_VAR 0 10
6336: PPUSH
6337: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6341: LD_VAR 0 10
6345: PPUSH
6346: CALL_OW 256
6350: PUSH
6351: LD_INT 1000
6353: EQUAL
6354: IFFALSE 6472
// begin SetTag ( attackUnit , 2 ) ;
6356: LD_VAR 0 10
6360: PPUSH
6361: LD_INT 2
6363: PPUSH
6364: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6368: LD_VAR 0 10
6372: PPUSH
6373: CALL_OW 247
6377: PUSH
6378: LD_INT 2
6380: EQUAL
6381: PUSH
6382: LD_VAR 0 10
6386: PPUSH
6387: CALL_OW 263
6391: PUSH
6392: LD_INT 1
6394: EQUAL
6395: AND
6396: PUSH
6397: LD_VAR 0 10
6401: PPUSH
6402: CALL_OW 313
6406: NOT
6407: AND
6408: IFFALSE 6472
// begin SetFuel ( attackUnit , 100 ) ;
6410: LD_VAR 0 10
6414: PPUSH
6415: LD_INT 100
6417: PPUSH
6418: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6422: LD_VAR 0 12
6426: PPUSH
6427: LD_VAR 0 10
6431: PPUSH
6432: CALL_OW 74
6436: PPUSH
6437: LD_VAR 0 10
6441: PPUSH
6442: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
6446: LD_ADDR_VAR 0 12
6450: PUSH
6451: LD_VAR 0 12
6455: PUSH
6456: LD_VAR 0 12
6460: PPUSH
6461: LD_VAR 0 10
6465: PPUSH
6466: CALL_OW 74
6470: DIFF
6471: ST_TO_ADDR
// end ; end ; for unit in mechanics do
6472: LD_ADDR_VAR 0 8
6476: PUSH
6477: LD_VAR 0 12
6481: PUSH
6482: FOR_IN
6483: IFFALSE 6549
// begin if not IsInArea ( unit , retreatArea ) then
6485: LD_VAR 0 8
6489: PPUSH
6490: LD_VAR 0 5
6494: PPUSH
6495: CALL_OW 308
6499: NOT
6500: IFFALSE 6516
// ComMoveToArea ( unit , retreatArea ) ;
6502: LD_VAR 0 8
6506: PPUSH
6507: LD_VAR 0 5
6511: PPUSH
6512: CALL_OW 113
// if GetLives ( unit ) < 250 then
6516: LD_VAR 0 8
6520: PPUSH
6521: CALL_OW 256
6525: PUSH
6526: LD_INT 250
6528: LESS
6529: IFFALSE 6547
// mechanics = mechanics diff unit ;
6531: LD_ADDR_VAR 0 12
6535: PUSH
6536: LD_VAR 0 12
6540: PUSH
6541: LD_VAR 0 8
6545: DIFF
6546: ST_TO_ADDR
// end ;
6547: GO 6482
6549: POP
6550: POP
// end ;
6551: GO 5936
6553: POP
6554: POP
// until not attackUnits ;
6555: LD_VAR 0 9
6559: NOT
6560: IFFALSE 5745
// end ; wait ( 0 0$1 ) ;
6562: LD_INT 35
6564: PPUSH
6565: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
6569: LD_VAR 0 1
6573: PPUSH
6574: LD_INT 50
6576: PUSH
6577: EMPTY
6578: LIST
6579: PPUSH
6580: CALL_OW 72
6584: NOT
6585: IFFALSE 4568
// end ;
6587: LD_VAR 0 6
6591: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
6592: LD_INT 0
6594: PPUSH
6595: PPUSH
6596: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
6597: LD_ADDR_VAR 0 5
6601: PUSH
6602: LD_VAR 0 2
6606: PUSH
6607: LD_INT 1
6609: ARRAY
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: PUSH
6615: LD_VAR 0 2
6619: PUSH
6620: LD_INT 1
6622: ARRAY
6623: PUSH
6624: LD_INT 2
6626: ARRAY
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: ST_TO_ADDR
// for i := 2 to path do
6632: LD_ADDR_VAR 0 4
6636: PUSH
6637: DOUBLE
6638: LD_INT 2
6640: DEC
6641: ST_TO_ADDR
6642: LD_VAR 0 2
6646: PUSH
6647: FOR_TO
6648: IFFALSE 6788
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
6650: LD_VAR 0 1
6654: PPUSH
6655: LD_VAR 0 2
6659: PUSH
6660: LD_VAR 0 4
6664: ARRAY
6665: PUSH
6666: LD_INT 1
6668: ARRAY
6669: PPUSH
6670: LD_VAR 0 2
6674: PUSH
6675: LD_VAR 0 4
6679: ARRAY
6680: PUSH
6681: LD_INT 2
6683: ARRAY
6684: PPUSH
6685: CALL_OW 297
6689: PUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_VAR 0 5
6699: PUSH
6700: LD_INT 1
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 5
6708: PUSH
6709: LD_INT 2
6711: ARRAY
6712: PPUSH
6713: CALL_OW 297
6717: LESS
6718: IFFALSE 6786
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
6720: LD_ADDR_VAR 0 5
6724: PUSH
6725: LD_VAR 0 5
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_VAR 0 2
6737: PUSH
6738: LD_VAR 0 4
6742: ARRAY
6743: PUSH
6744: LD_INT 1
6746: ARRAY
6747: PPUSH
6748: CALL_OW 1
6752: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
6753: LD_ADDR_VAR 0 5
6757: PUSH
6758: LD_VAR 0 5
6762: PPUSH
6763: LD_INT 2
6765: PPUSH
6766: LD_VAR 0 2
6770: PUSH
6771: LD_VAR 0 4
6775: ARRAY
6776: PUSH
6777: LD_INT 2
6779: ARRAY
6780: PPUSH
6781: CALL_OW 1
6785: ST_TO_ADDR
// end ; end ;
6786: GO 6647
6788: POP
6789: POP
// result = nearPosition ;
6790: LD_ADDR_VAR 0 3
6794: PUSH
6795: LD_VAR 0 5
6799: ST_TO_ADDR
// end ;
6800: LD_VAR 0 3
6804: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
6805: LD_EXP 56
6809: PPUSH
6810: CALL_OW 274
6814: PPUSH
6815: LD_INT 1
6817: PPUSH
6818: CALL_OW 275
6822: PUSH
6823: LD_INT 0
6825: GREATER
6826: IFFALSE 6932
6828: GO 6830
6830: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
6831: LD_EXP 55
6835: PPUSH
6836: LD_INT 25
6838: PUSH
6839: LD_INT 2
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PPUSH
6846: CALL_OW 72
6850: PPUSH
6851: LD_INT 31
6853: PPUSH
6854: LD_INT 105
6856: PPUSH
6857: LD_INT 51
6859: PPUSH
6860: LD_INT 3
6862: PPUSH
6863: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
6867: LD_EXP 55
6871: PPUSH
6872: LD_INT 25
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PPUSH
6882: CALL_OW 72
6886: PPUSH
6887: LD_INT 31
6889: PPUSH
6890: LD_INT 114
6892: PPUSH
6893: LD_INT 58
6895: PPUSH
6896: LD_INT 3
6898: PPUSH
6899: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
6903: LD_EXP 55
6907: PPUSH
6908: LD_INT 25
6910: PUSH
6911: LD_INT 2
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PPUSH
6918: CALL_OW 72
6922: PPUSH
6923: LD_EXP 56
6927: PPUSH
6928: CALL_OW 180
// end ; end_of_file
6932: END
// export function Lose_Burlak ; begin
6933: LD_INT 0
6935: PPUSH
// YouLost ( Burlak ) ;
6936: LD_STRING Burlak
6938: PPUSH
6939: CALL_OW 104
// end ;
6943: LD_VAR 0 1
6947: RET
// export function Lose_Gaydar ; begin
6948: LD_INT 0
6950: PPUSH
// YouLost ( Gaydar ) ;
6951: LD_STRING Gaydar
6953: PPUSH
6954: CALL_OW 104
// end ;
6958: LD_VAR 0 1
6962: RET
// export function Lose_SelfAttack ; begin
6963: LD_INT 0
6965: PPUSH
// YouLost ( SelfAttack ) ;
6966: LD_STRING SelfAttack
6968: PPUSH
6969: CALL_OW 104
// end ;
6973: LD_VAR 0 1
6977: RET
// export function Lose_Arrest ; begin
6978: LD_INT 0
6980: PPUSH
// YouLost ( Arrest ) ;
6981: LD_STRING Arrest
6983: PPUSH
6984: CALL_OW 104
// end ;
6988: LD_VAR 0 1
6992: RET
// export function Lose_ArabBreakthrough ; begin
6993: LD_INT 0
6995: PPUSH
// YouLost ( ArabBreakthrough ) ;
6996: LD_STRING ArabBreakthrough
6998: PPUSH
6999: CALL_OW 104
// end ;
7003: LD_VAR 0 1
7007: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7008: LD_EXP 6
7012: NOT
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 3
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 21
7026: PUSH
7027: LD_INT 1
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 25
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PPUSH
7049: CALL_OW 69
7053: NOT
7054: AND
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 30
7078: PUSH
7079: LD_INT 0
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 69
7095: NOT
7096: AND
7097: IFFALSE 7110
7099: GO 7101
7101: DISABLE
// begin enable ;
7102: ENABLE
// YouLost ( Engineer ) ;
7103: LD_STRING Engineer
7105: PPUSH
7106: CALL_OW 104
// end ; end_of_file
7110: END
// export function FinishMission ; begin
7111: LD_INT 0
7113: PPUSH
// SetRewards ;
7114: CALL 7135 0 0
// SavePlayerCharacters ;
7118: CALL 7560 0 0
// SaveGlobalVariables ;
7122: CALL 7788 0 0
// YouWin ;
7126: CALL_OW 103
// end ;
7130: LD_VAR 0 1
7134: RET
// function SetRewards ; var unitsToReward ; begin
7135: LD_INT 0
7137: PPUSH
7138: PPUSH
// SetAchievements ;
7139: CALL 17488 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7143: LD_INT 22
7145: PUSH
7146: LD_INT 3
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 21
7155: PUSH
7156: LD_INT 3
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PPUSH
7167: CALL_OW 69
7171: NOT
7172: IFFALSE 7186
// AddMedal ( Dismantle , 1 ) else
7174: LD_STRING Dismantle
7176: PPUSH
7177: LD_INT 1
7179: PPUSH
7180: CALL_OW 101
7184: GO 7197
// AddMedal ( Dismantle , - 1 ) ;
7186: LD_STRING Dismantle
7188: PPUSH
7189: LD_INT 1
7191: NEG
7192: PPUSH
7193: CALL_OW 101
// if killedArabianUnits > 30 then
7197: LD_EXP 20
7201: PUSH
7202: LD_INT 30
7204: GREATER
7205: IFFALSE 7227
// begin AddMedal ( EnemyLosses , 1 ) ;
7207: LD_STRING EnemyLosses
7209: PPUSH
7210: LD_INT 1
7212: PPUSH
7213: CALL_OW 101
// heikeHeavyLosses = true ;
7217: LD_ADDR_EXP 4
7221: PUSH
7222: LD_INT 1
7224: ST_TO_ADDR
// end else
7225: GO 7238
// AddMedal ( EnemyLosses , - 1 ) ;
7227: LD_STRING EnemyLosses
7229: PPUSH
7230: LD_INT 1
7232: NEG
7233: PPUSH
7234: CALL_OW 101
// if not lostUnits then
7238: LD_EXP 22
7242: NOT
7243: IFFALSE 7257
// AddMedal ( LittleLosses , 1 ) else
7245: LD_STRING LittleLosses
7247: PPUSH
7248: LD_INT 1
7250: PPUSH
7251: CALL_OW 101
7255: GO 7268
// AddMedal ( LittleLosses , - 1 ) ;
7257: LD_STRING LittleLosses
7259: PPUSH
7260: LD_INT 1
7262: NEG
7263: PPUSH
7264: CALL_OW 101
// GiveMedals ( Main ) ;
7268: LD_STRING Main
7270: PPUSH
7271: CALL_OW 102
// unitsToReward = [ ] ;
7275: LD_ADDR_VAR 0 2
7279: PUSH
7280: EMPTY
7281: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7282: LD_EXP 40
7286: PPUSH
7287: CALL_OW 255
7291: PUSH
7292: LD_INT 3
7294: EQUAL
7295: IFFALSE 7313
// unitsToReward = unitsToReward ^ Burlak ;
7297: LD_ADDR_VAR 0 2
7301: PUSH
7302: LD_VAR 0 2
7306: PUSH
7307: LD_EXP 40
7311: ADD
7312: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7313: LD_EXP 41
7317: PPUSH
7318: CALL_OW 255
7322: PUSH
7323: LD_INT 3
7325: EQUAL
7326: IFFALSE 7344
// unitsToReward = unitsToReward ^ Gnyevko ;
7328: LD_ADDR_VAR 0 2
7332: PUSH
7333: LD_VAR 0 2
7337: PUSH
7338: LD_EXP 41
7342: ADD
7343: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7344: LD_EXP 42
7348: PPUSH
7349: CALL_OW 255
7353: PUSH
7354: LD_INT 3
7356: EQUAL
7357: IFFALSE 7375
// unitsToReward = unitsToReward ^ Kirilenkova ;
7359: LD_ADDR_VAR 0 2
7363: PUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_EXP 42
7373: ADD
7374: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7375: LD_EXP 43
7379: PPUSH
7380: CALL_OW 255
7384: PUSH
7385: LD_INT 3
7387: EQUAL
7388: IFFALSE 7406
// unitsToReward = unitsToReward ^ Kovalyuk ;
7390: LD_ADDR_VAR 0 2
7394: PUSH
7395: LD_VAR 0 2
7399: PUSH
7400: LD_EXP 43
7404: ADD
7405: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
7406: LD_EXP 44
7410: PPUSH
7411: CALL_OW 255
7415: PUSH
7416: LD_INT 3
7418: EQUAL
7419: IFFALSE 7437
// unitsToReward = unitsToReward ^ Belkov ;
7421: LD_ADDR_VAR 0 2
7425: PUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_EXP 44
7435: ADD
7436: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
7437: LD_EXP 45
7441: PPUSH
7442: CALL_OW 255
7446: PUSH
7447: LD_INT 3
7449: EQUAL
7450: IFFALSE 7468
// unitsToReward = unitsToReward ^ Belkov2 ;
7452: LD_ADDR_VAR 0 2
7456: PUSH
7457: LD_VAR 0 2
7461: PUSH
7462: LD_EXP 45
7466: ADD
7467: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
7468: LD_EXP 46
7472: PPUSH
7473: CALL_OW 255
7477: PUSH
7478: LD_INT 3
7480: EQUAL
7481: IFFALSE 7499
// unitsToReward = unitsToReward ^ Scholtze ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_VAR 0 2
7492: PUSH
7493: LD_EXP 46
7497: ADD
7498: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
7499: LD_EXP 47
7503: PPUSH
7504: CALL_OW 255
7508: PUSH
7509: LD_INT 3
7511: EQUAL
7512: IFFALSE 7530
// unitsToReward = unitsToReward ^ Kuzmov ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_VAR 0 2
7523: PUSH
7524: LD_EXP 47
7528: ADD
7529: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
7530: LD_ADDR_VAR 0 2
7534: PUSH
7535: LD_VAR 0 2
7539: PUSH
7540: LD_EXP 59
7544: ADD
7545: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
7546: LD_VAR 0 2
7550: PPUSH
7551: CALL_OW 43
// end ;
7555: LD_VAR 0 1
7559: RET
// function SavePlayerCharacters ; var othersYour ; begin
7560: LD_INT 0
7562: PPUSH
7563: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
7564: LD_EXP 40
7568: PPUSH
7569: LD_STRING 04_Burlak
7571: PPUSH
7572: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
7576: LD_EXP 41
7580: PPUSH
7581: CALL_OW 255
7585: PUSH
7586: LD_INT 3
7588: EQUAL
7589: IFFALSE 7603
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
7591: LD_EXP 41
7595: PPUSH
7596: LD_STRING 04_Gnyevko
7598: PPUSH
7599: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
7603: LD_EXP 43
7607: PPUSH
7608: CALL_OW 255
7612: PUSH
7613: LD_INT 3
7615: EQUAL
7616: IFFALSE 7630
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
7618: LD_EXP 43
7622: PPUSH
7623: LD_STRING 04_Kovalyuk
7625: PPUSH
7626: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
7630: LD_EXP 42
7634: PPUSH
7635: CALL_OW 255
7639: PUSH
7640: LD_INT 3
7642: EQUAL
7643: IFFALSE 7657
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
7645: LD_EXP 42
7649: PPUSH
7650: LD_STRING 04_Kirilenkova
7652: PPUSH
7653: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
7657: LD_EXP 46
7661: PPUSH
7662: CALL_OW 255
7666: PUSH
7667: LD_INT 3
7669: EQUAL
7670: IFFALSE 7684
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
7672: LD_EXP 46
7676: PPUSH
7677: LD_STRING 04_Scholtze
7679: PPUSH
7680: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
7684: LD_EXP 44
7688: PPUSH
7689: CALL_OW 255
7693: PUSH
7694: LD_INT 3
7696: EQUAL
7697: IFFALSE 7711
// SaveCharacters ( Belkov , 04_Belkov ) ;
7699: LD_EXP 44
7703: PPUSH
7704: LD_STRING 04_Belkov
7706: PPUSH
7707: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
7711: LD_EXP 45
7715: PPUSH
7716: CALL_OW 255
7720: PUSH
7721: LD_INT 3
7723: EQUAL
7724: IFFALSE 7738
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
7726: LD_EXP 45
7730: PPUSH
7731: LD_STRING 04_Belkov2
7733: PPUSH
7734: CALL_OW 38
// if IsOK ( Kuzmov ) then
7738: LD_EXP 47
7742: PPUSH
7743: CALL_OW 302
7747: IFFALSE 7761
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
7749: LD_EXP 47
7753: PPUSH
7754: LD_STRING 04_Kuzmov
7756: PPUSH
7757: CALL_OW 38
// othersYour = randomsToSave ;
7761: LD_ADDR_VAR 0 2
7765: PUSH
7766: LD_EXP 59
7770: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
7771: LD_EXP 59
7775: PPUSH
7776: LD_STRING 04_other_survivors
7778: PPUSH
7779: CALL_OW 38
// end ;
7783: LD_VAR 0 1
7787: RET
// function SaveGlobalVariables ; begin
7788: LD_INT 0
7790: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
7791: LD_EXP 4
7795: PPUSH
7796: LD_STRING 04_HeikeHeavyLosses_1
7798: PPUSH
7799: CALL_OW 39
// end ; end_of_file
7803: LD_VAR 0 1
7807: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
7808: LD_VAR 0 1
7812: PPUSH
7813: CALL_OW 255
7817: PUSH
7818: LD_INT 3
7820: EQUAL
7821: PUSH
7822: LD_VAR 0 1
7826: PPUSH
7827: CALL_OW 266
7831: PUSH
7832: LD_INT 0
7834: EQUAL
7835: AND
7836: PUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: LD_INT 5
7844: PPUSH
7845: CALL_OW 308
7849: NOT
7850: AND
7851: IFFALSE 7862
// Dial_DepotInWrongPlace ( building ) ;
7853: LD_VAR 0 1
7857: PPUSH
7858: CALL 10362 0 1
// end ;
7862: PPOPN 2
7864: END
// on BuildingComplete ( building ) do var i , cargo ;
7865: LD_INT 0
7867: PPUSH
7868: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
7869: LD_VAR 0 1
7873: PPUSH
7874: CALL_OW 255
7878: PUSH
7879: LD_INT 3
7881: EQUAL
7882: PUSH
7883: LD_VAR 0 1
7887: PPUSH
7888: CALL_OW 266
7892: PUSH
7893: LD_INT 0
7895: EQUAL
7896: AND
7897: PUSH
7898: LD_VAR 0 1
7902: PPUSH
7903: LD_INT 5
7905: PPUSH
7906: CALL_OW 308
7910: AND
7911: PUSH
7912: LD_EXP 7
7916: NOT
7917: AND
7918: PUSH
7919: LD_EXP 8
7923: NOT
7924: AND
7925: IFFALSE 7951
// begin namedBase = true ;
7927: LD_ADDR_EXP 8
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
7935: LD_VAR 0 1
7939: PPUSH
7940: LD_STRING chuikov
7942: PPUSH
7943: CALL_OW 500
// Dial_FinishDepot ;
7947: CALL 10636 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7951: LD_VAR 0 1
7955: PPUSH
7956: CALL_OW 255
7960: PUSH
7961: LD_INT 3
7963: EQUAL
7964: PUSH
7965: LD_VAR 0 1
7969: PPUSH
7970: CALL_OW 266
7974: PUSH
7975: LD_INT 32
7977: EQUAL
7978: AND
7979: IFFALSE 7995
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
7981: LD_ADDR_EXP 23
7985: PUSH
7986: LD_EXP 23
7990: PUSH
7991: LD_INT 1
7993: PLUS
7994: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 255
8004: PUSH
8005: LD_INT 6
8007: EQUAL
8008: PUSH
8009: LD_VAR 0 1
8013: PPUSH
8014: CALL_OW 266
8018: PUSH
8019: LD_INT 0
8021: EQUAL
8022: AND
8023: IFFALSE 8222
// begin secondBaseDepot = building ;
8025: LD_ADDR_EXP 56
8029: PUSH
8030: LD_VAR 0 1
8034: ST_TO_ADDR
// uc_side = 6 ;
8035: LD_ADDR_OWVAR 20
8039: PUSH
8040: LD_INT 6
8042: ST_TO_ADDR
// uc_nation = nation_russian ;
8043: LD_ADDR_OWVAR 21
8047: PUSH
8048: LD_INT 3
8050: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8051: LD_ADDR_OWVAR 37
8055: PUSH
8056: LD_INT 21
8058: ST_TO_ADDR
// vc_control = control_manual ;
8059: LD_ADDR_OWVAR 38
8063: PUSH
8064: LD_INT 1
8066: ST_TO_ADDR
// vc_engine = engine_combustion ;
8067: LD_ADDR_OWVAR 39
8071: PUSH
8072: LD_INT 1
8074: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8075: LD_ADDR_OWVAR 40
8079: PUSH
8080: LD_INT 51
8082: ST_TO_ADDR
// cargo = CreateVehicle ;
8083: LD_ADDR_VAR 0 3
8087: PUSH
8088: CALL_OW 45
8092: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8093: LD_VAR 0 3
8097: PPUSH
8098: LD_INT 3
8100: PPUSH
8101: LD_INT 0
8103: PPUSH
8104: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8108: LD_VAR 0 3
8112: PPUSH
8113: LD_INT 1
8115: PPUSH
8116: LD_INT 100
8118: PPUSH
8119: CALL_OW 291
// ComGive ( cargo , building ) ;
8123: LD_VAR 0 3
8127: PPUSH
8128: LD_VAR 0 1
8132: PPUSH
8133: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8137: LD_INT 0
8139: PPUSH
8140: LD_INT 2
8142: PPUSH
8143: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8147: CALL_OW 44
8151: PPUSH
8152: LD_VAR 0 3
8156: PPUSH
8157: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8161: LD_ADDR_VAR 0 2
8165: PUSH
8166: DOUBLE
8167: LD_INT 10
8169: DEC
8170: ST_TO_ADDR
8171: LD_EXP 32
8175: PUSH
8176: FOR_TO
8177: IFFALSE 8220
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8179: LD_VAR 0 3
8183: PPUSH
8184: LD_EXP 32
8188: PUSH
8189: LD_VAR 0 2
8193: ARRAY
8194: PUSH
8195: LD_INT 1
8197: ARRAY
8198: PPUSH
8199: LD_EXP 32
8203: PUSH
8204: LD_VAR 0 2
8208: ARRAY
8209: PUSH
8210: LD_INT 2
8212: ARRAY
8213: PPUSH
8214: CALL_OW 171
8218: GO 8176
8220: POP
8221: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8222: LD_VAR 0 1
8226: PPUSH
8227: CALL_OW 255
8231: PUSH
8232: LD_INT 6
8234: EQUAL
8235: PUSH
8236: LD_VAR 0 1
8240: PPUSH
8241: CALL_OW 266
8245: PUSH
8246: LD_INT 31
8248: EQUAL
8249: AND
8250: IFFALSE 8295
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8252: LD_EXP 55
8256: PPUSH
8257: LD_INT 25
8259: PUSH
8260: LD_INT 1
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 56
8269: PUSH
8270: EMPTY
8271: LIST
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PPUSH
8277: CALL_OW 72
8281: PUSH
8282: LD_INT 1
8284: ARRAY
8285: PPUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL_OW 120
// end ;
8295: PPOPN 3
8297: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8298: LD_VAR 0 1
8302: PPUSH
8303: CALL_OW 266
8307: PUSH
8308: LD_INT 7
8310: EQUAL
8311: PUSH
8312: LD_EXP 14
8316: NOT
8317: AND
8318: IFFALSE 8324
// Dial_LabUpgraded ;
8320: CALL 10956 0 0
// end ;
8324: PPOPN 1
8326: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8327: LD_VAR 0 1
8331: PUSH
8332: LD_INT 3
8334: EQUAL
8335: PUSH
8336: LD_VAR 0 2
8340: PUSH
8341: LD_INT 2
8343: EQUAL
8344: AND
8345: PUSH
8346: LD_VAR 0 1
8350: PUSH
8351: LD_INT 2
8353: EQUAL
8354: PUSH
8355: LD_VAR 0 2
8359: PUSH
8360: LD_INT 3
8362: EQUAL
8363: AND
8364: OR
8365: IFFALSE 8387
// begin if dial_contactBlock then
8367: LD_EXP 15
8371: IFFALSE 8375
// exit ;
8373: GO 8431
// dial_contactBlock = true ;
8375: LD_ADDR_EXP 15
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// Dial_Contact ;
8383: CALL 12789 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8387: LD_VAR 0 1
8391: PUSH
8392: LD_INT 3
8394: EQUAL
8395: PUSH
8396: LD_VAR 0 2
8400: PUSH
8401: LD_INT 6
8403: EQUAL
8404: AND
8405: PUSH
8406: LD_VAR 0 1
8410: PUSH
8411: LD_INT 6
8413: EQUAL
8414: PUSH
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 3
8422: EQUAL
8423: AND
8424: OR
8425: IFFALSE 8431
// Lose_SelfAttack ;
8427: CALL 6963 0 0
// end ;
8431: PPOPN 2
8433: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
8434: LD_VAR 0 1
8438: PUSH
8439: LD_EXP 40
8443: EQUAL
8444: IFFALSE 8450
// Lose_Burlak ;
8446: CALL 6933 0 0
// if unit = Gaydar then
8450: LD_VAR 0 1
8454: PUSH
8455: LD_EXP 52
8459: EQUAL
8460: IFFALSE 8466
// Lose_Gaydar ;
8462: CALL 6948 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
8466: LD_VAR 0 1
8470: PPUSH
8471: CALL_OW 255
8475: PUSH
8476: LD_INT 3
8478: EQUAL
8479: PUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 247
8489: PUSH
8490: LD_INT 1
8492: EQUAL
8493: AND
8494: IFFALSE 8510
// lostUnits = lostUnits + 1 ;
8496: LD_ADDR_EXP 22
8500: PUSH
8501: LD_EXP 22
8505: PUSH
8506: LD_INT 1
8508: PLUS
8509: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL_OW 255
8519: PUSH
8520: LD_INT 2
8522: EQUAL
8523: PUSH
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 247
8533: PUSH
8534: LD_INT 1
8536: EQUAL
8537: AND
8538: PUSH
8539: LD_EXP 52
8543: PPUSH
8544: CALL_OW 305
8548: NOT
8549: AND
8550: IFFALSE 8566
// killedArabianUnits = killedArabianUnits + 1 ;
8552: LD_ADDR_EXP 20
8556: PUSH
8557: LD_EXP 20
8561: PUSH
8562: LD_INT 1
8564: PLUS
8565: ST_TO_ADDR
// end ;
8566: PPOPN 1
8568: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
8569: LD_VAR 0 2
8573: PUSH
8574: LD_INT 6
8576: EQUAL
8577: IFFALSE 8591
// SetSide ( building , 6 ) ;
8579: LD_VAR 0 1
8583: PPUSH
8584: LD_INT 6
8586: PPUSH
8587: CALL_OW 235
// end ;
8591: PPOPN 3
8593: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
8594: LD_INT 0
8596: PPUSH
8597: PPUSH
8598: PPUSH
8599: PPUSH
8600: PPUSH
8601: PPUSH
8602: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
8603: LD_ADDR_VAR 0 2
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 3
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 2
8620: PUSH
8621: LD_INT 34
8623: PUSH
8624: LD_INT 51
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 21
8633: PUSH
8634: LD_INT 1
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PPUSH
8650: CALL_OW 69
8654: PUSH
8655: FOR_IN
8656: IFFALSE 8778
// if GetTaskList ( i ) > 0 then
8658: LD_VAR 0 2
8662: PPUSH
8663: CALL_OW 437
8667: PUSH
8668: LD_INT 0
8670: GREATER
8671: IFFALSE 8776
// for j = 1 to GetTaskList ( i ) do
8673: LD_ADDR_VAR 0 3
8677: PUSH
8678: DOUBLE
8679: LD_INT 1
8681: DEC
8682: ST_TO_ADDR
8683: LD_VAR 0 2
8687: PPUSH
8688: CALL_OW 437
8692: PUSH
8693: FOR_TO
8694: IFFALSE 8774
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
8696: LD_ADDR_VAR 0 4
8700: PUSH
8701: LD_VAR 0 2
8705: PPUSH
8706: CALL_OW 437
8710: PUSH
8711: LD_VAR 0 3
8715: ARRAY
8716: PUSH
8717: LD_INT 4
8719: ARRAY
8720: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
8721: LD_VAR 0 4
8725: PPUSH
8726: CALL_OW 255
8730: PUSH
8731: LD_INT 6
8733: EQUAL
8734: PUSH
8735: LD_VAR 0 2
8739: PPUSH
8740: CALL_OW 437
8744: PUSH
8745: LD_VAR 0 3
8749: ARRAY
8750: PUSH
8751: LD_INT 1
8753: ARRAY
8754: PUSH
8755: LD_STRING <
8757: EQUAL
8758: AND
8759: IFFALSE 8772
// SetTaskList ( i , [ ] ) ;
8761: LD_VAR 0 2
8765: PPUSH
8766: EMPTY
8767: PPUSH
8768: CALL_OW 446
// end ;
8772: GO 8693
8774: POP
8775: POP
8776: GO 8655
8778: POP
8779: POP
// end ; end_of_file
8780: PPOPN 8
8782: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8783: LD_INT 0
8785: PPUSH
8786: PPUSH
// if exist_mode then
8787: LD_VAR 0 2
8791: IFFALSE 8816
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8793: LD_ADDR_VAR 0 5
8797: PUSH
8798: LD_EXP 28
8802: PUSH
8803: LD_VAR 0 1
8807: STR
8808: PPUSH
8809: CALL_OW 34
8813: ST_TO_ADDR
8814: GO 8831
// unit := NewCharacter ( ident ) ;
8816: LD_ADDR_VAR 0 5
8820: PUSH
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 25
8830: ST_TO_ADDR
// if class then
8831: LD_VAR 0 3
8835: IFFALSE 8851
// SetClass ( unit , class ) ;
8837: LD_VAR 0 5
8841: PPUSH
8842: LD_VAR 0 3
8846: PPUSH
8847: CALL_OW 336
// result := unit ;
8851: LD_ADDR_VAR 0 4
8855: PUSH
8856: LD_VAR 0 5
8860: ST_TO_ADDR
// end ;
8861: LD_VAR 0 4
8865: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8866: LD_INT 0
8868: PPUSH
8869: PPUSH
// for unit in units do
8870: LD_ADDR_VAR 0 5
8874: PUSH
8875: LD_VAR 0 1
8879: PUSH
8880: FOR_IN
8881: IFFALSE 8904
// PlaceUnitArea ( unit , area , spawnMode ) ;
8883: LD_VAR 0 5
8887: PPUSH
8888: LD_VAR 0 2
8892: PPUSH
8893: LD_VAR 0 3
8897: PPUSH
8898: CALL_OW 49
8902: GO 8880
8904: POP
8905: POP
// end ;
8906: LD_VAR 0 4
8910: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
8916: LD_ADDR_VAR 0 1
8920: PUSH
8921: LD_VAR 0 1
8925: PUSH
8926: LD_EXP 40
8930: PUSH
8931: LD_EXP 41
8935: PUSH
8936: LD_EXP 44
8940: PUSH
8941: LD_EXP 45
8945: PUSH
8946: LD_EXP 42
8950: PUSH
8951: LD_EXP 43
8955: PUSH
8956: LD_EXP 46
8960: PUSH
8961: LD_EXP 47
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: DIFF
8976: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8977: LD_ADDR_VAR 0 7
8981: PUSH
8982: LD_VAR 0 1
8986: PUSH
8987: LD_INT 1
8989: PPUSH
8990: LD_VAR 0 1
8994: PPUSH
8995: CALL_OW 12
8999: ARRAY
9000: ST_TO_ADDR
// if radio then
9001: LD_VAR 0 4
9005: IFFALSE 9054
// begin if GetSex ( speaker ) = sex_male then
9007: LD_VAR 0 7
9011: PPUSH
9012: CALL_OW 258
9016: PUSH
9017: LD_INT 1
9019: EQUAL
9020: IFFALSE 9038
// SayRadio ( speaker , dialogMID ) else
9022: LD_VAR 0 7
9026: PPUSH
9027: LD_VAR 0 2
9031: PPUSH
9032: CALL_OW 94
9036: GO 9052
// SayRadio ( speaker , dialogFID ) ;
9038: LD_VAR 0 7
9042: PPUSH
9043: LD_VAR 0 3
9047: PPUSH
9048: CALL_OW 94
// end else
9052: GO 9099
// begin if GetSex ( speaker ) = sex_male then
9054: LD_VAR 0 7
9058: PPUSH
9059: CALL_OW 258
9063: PUSH
9064: LD_INT 1
9066: EQUAL
9067: IFFALSE 9085
// Say ( speaker , dialogMID ) else
9069: LD_VAR 0 7
9073: PPUSH
9074: LD_VAR 0 2
9078: PPUSH
9079: CALL_OW 88
9083: GO 9099
// Say ( speaker , dialogFID ) ;
9085: LD_VAR 0 7
9089: PPUSH
9090: LD_VAR 0 3
9094: PPUSH
9095: CALL_OW 88
// end ; result := speaker ;
9099: LD_ADDR_VAR 0 5
9103: PUSH
9104: LD_VAR 0 7
9108: ST_TO_ADDR
// end ;
9109: LD_VAR 0 5
9113: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9114: LD_INT 0
9116: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9117: LD_VAR 0 1
9121: PPUSH
9122: CALL_OW 255
9126: PUSH
9127: LD_VAR 0 3
9131: EQUAL
9132: PUSH
9133: LD_VAR 0 1
9137: PPUSH
9138: CALL_OW 302
9142: AND
9143: IFFALSE 9165
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9145: LD_VAR 0 1
9149: PPUSH
9150: LD_EXP 27
9154: PUSH
9155: LD_VAR 0 2
9159: STR
9160: PPUSH
9161: CALL_OW 38
// end ;
9165: LD_VAR 0 4
9169: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9170: LD_INT 0
9172: PPUSH
9173: PPUSH
9174: PPUSH
// resultCharactersToSave = [ ] ;
9175: LD_ADDR_VAR 0 6
9179: PUSH
9180: EMPTY
9181: ST_TO_ADDR
// for unit in characters do
9182: LD_ADDR_VAR 0 5
9186: PUSH
9187: LD_VAR 0 1
9191: PUSH
9192: FOR_IN
9193: IFFALSE 9241
// if GetSide ( unit ) = side and IsOK ( unit ) then
9195: LD_VAR 0 5
9199: PPUSH
9200: CALL_OW 255
9204: PUSH
9205: LD_VAR 0 3
9209: EQUAL
9210: PUSH
9211: LD_VAR 0 5
9215: PPUSH
9216: CALL_OW 302
9220: AND
9221: IFFALSE 9239
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9223: LD_ADDR_VAR 0 6
9227: PUSH
9228: LD_VAR 0 6
9232: PUSH
9233: LD_VAR 0 5
9237: ADD
9238: ST_TO_ADDR
9239: GO 9192
9241: POP
9242: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9243: LD_VAR 0 6
9247: PPUSH
9248: LD_EXP 27
9252: PUSH
9253: LD_VAR 0 2
9257: STR
9258: PPUSH
9259: CALL_OW 38
// end ;
9263: LD_VAR 0 4
9267: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
9272: PPUSH
9273: PPUSH
9274: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: LD_INT 22
9282: PUSH
9283: LD_INT 3
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 21
9292: PUSH
9293: LD_INT 1
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 50
9302: PUSH
9303: EMPTY
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: PPUSH
9311: CALL_OW 69
9315: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9316: LD_ADDR_VAR 0 3
9320: PUSH
9321: LD_VAR 0 3
9325: PUSH
9326: LD_EXP 40
9330: DIFF
9331: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9332: LD_ADDR_VAR 0 3
9336: PUSH
9337: LD_VAR 0 3
9341: PUSH
9342: LD_EXP 50
9346: DIFF
9347: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9348: LD_ADDR_VAR 0 4
9352: PUSH
9353: LD_STRING text
9355: PPUSH
9356: LD_INT 8
9358: PPUSH
9359: LD_INT 8
9361: PPUSH
9362: LD_INT -5
9364: PUSH
9365: LD_EXP 40
9369: PUSH
9370: LD_INT -6
9372: PUSH
9373: LD_INT -2
9375: PUSH
9376: LD_INT -3
9378: PUSH
9379: LD_INT -5
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: PUSH
9390: LD_VAR 0 3
9394: ADD
9395: PUSH
9396: LD_INT -6
9398: PUSH
9399: LD_INT -4
9401: PUSH
9402: LD_EXP 50
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: ADD
9412: PPUSH
9413: LD_INT 1
9415: PUSH
9416: LD_INT 3
9418: PUSH
9419: LD_INT 2
9421: PUSH
9422: LD_INT 1
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 4
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 42
9442: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
9443: LD_VAR 0 3
9447: PPUSH
9448: LD_INT 6
9450: PPUSH
9451: CALL_OW 235
// SetSide ( Popov , 6 ) ;
9455: LD_EXP 50
9459: PPUSH
9460: LD_INT 6
9462: PPUSH
9463: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
9467: LD_VAR 0 4
9471: PPUSH
9472: LD_INT 3
9474: PPUSH
9475: CALL_OW 235
// burlakTeam = selectedPeople ;
9479: LD_ADDR_EXP 53
9483: PUSH
9484: LD_VAR 0 4
9488: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
9489: LD_ADDR_EXP 54
9493: PUSH
9494: LD_INT 22
9496: PUSH
9497: LD_INT 6
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 21
9506: PUSH
9507: LD_INT 1
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PPUSH
9518: CALL_OW 69
9522: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
9523: LD_ADDR_EXP 54
9527: PUSH
9528: LD_EXP 54
9532: PUSH
9533: LD_EXP 47
9537: DIFF
9538: ST_TO_ADDR
// if not Gnyevko in selectedPeople then
9539: LD_EXP 41
9543: PUSH
9544: LD_VAR 0 4
9548: IN
9549: NOT
9550: IFFALSE 9567
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
9552: LD_EXP 41
9556: PPUSH
9557: LD_STRING Gnyevko
9559: PPUSH
9560: LD_INT 6
9562: PPUSH
9563: CALL 9114 0 3
// if not Kovalyuk in selectedPeople then
9567: LD_EXP 43
9571: PUSH
9572: LD_VAR 0 4
9576: IN
9577: NOT
9578: IFFALSE 9595
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
9580: LD_EXP 43
9584: PPUSH
9585: LD_STRING Kovalyuk
9587: PPUSH
9588: LD_INT 6
9590: PPUSH
9591: CALL 9114 0 3
// if not Kirilenkova in selectedPeople then
9595: LD_EXP 42
9599: PUSH
9600: LD_VAR 0 4
9604: IN
9605: NOT
9606: IFFALSE 9623
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
9608: LD_EXP 42
9612: PPUSH
9613: LD_STRING Kirilenkova
9615: PPUSH
9616: LD_INT 6
9618: PPUSH
9619: CALL 9114 0 3
// if not Scholtze in selectedPeople then
9623: LD_EXP 46
9627: PUSH
9628: LD_VAR 0 4
9632: IN
9633: NOT
9634: IFFALSE 9651
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
9636: LD_EXP 46
9640: PPUSH
9641: LD_STRING Scholtze
9643: PPUSH
9644: LD_INT 6
9646: PPUSH
9647: CALL 9114 0 3
// if not Belkov in selectedPeople then
9651: LD_EXP 44
9655: PUSH
9656: LD_VAR 0 4
9660: IN
9661: NOT
9662: IFFALSE 9679
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
9664: LD_EXP 44
9668: PPUSH
9669: LD_STRING Belkov
9671: PPUSH
9672: LD_INT 6
9674: PPUSH
9675: CALL 9114 0 3
// if not Belkov2 in selectedPeople then
9679: LD_EXP 45
9683: PUSH
9684: LD_VAR 0 4
9688: IN
9689: NOT
9690: IFFALSE 9707
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
9692: LD_EXP 45
9696: PPUSH
9697: LD_STRING Belkov2
9699: PPUSH
9700: LD_INT 6
9702: PPUSH
9703: CALL 9114 0 3
// others = popovTeam diff Popov ;
9707: LD_ADDR_VAR 0 5
9711: PUSH
9712: LD_EXP 54
9716: PUSH
9717: LD_EXP 50
9721: DIFF
9722: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
9723: LD_VAR 0 5
9727: PPUSH
9728: LD_STRING other_survivors_with_popov
9730: PPUSH
9731: LD_INT 6
9733: PPUSH
9734: CALL 9170 0 3
// end ; end_of_file
9738: LD_VAR 0 1
9742: RET
// export function MissionIntro ; var i , unit ; begin
9743: LD_INT 0
9745: PPUSH
9746: PPUSH
9747: PPUSH
// CenterNowOnUnits ( Burlak ) ;
9748: LD_EXP 40
9752: PPUSH
9753: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
9757: LD_EXP 57
9761: PPUSH
9762: LD_STRING D1-RSol1-1
9764: PPUSH
9765: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
9769: LD_EXP 51
9773: PPUSH
9774: LD_STRING D1-Pla-1
9776: PPUSH
9777: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
9781: LD_EXP 40
9785: PPUSH
9786: LD_STRING D1-Bur-1
9788: PPUSH
9789: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
9793: LD_EXP 51
9797: PPUSH
9798: LD_STRING D1-Pla-2
9800: PPUSH
9801: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
9805: LD_EXP 40
9809: PPUSH
9810: LD_STRING D1-Bur-2
9812: PPUSH
9813: CALL_OW 88
// SelectCharacters ;
9817: CALL 9268 0 0
// InGameOff ;
9821: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
9825: LD_STRING M1
9827: PPUSH
9828: CALL_OW 337
// SaveForQuickRestart ;
9832: CALL_OW 22
// for unit in popovTeam do
9836: LD_ADDR_VAR 0 3
9840: PUSH
9841: LD_EXP 54
9845: PUSH
9846: FOR_IN
9847: IFFALSE 9919
// begin for i := 3 to russianCargoPath1 do
9849: LD_ADDR_VAR 0 2
9853: PUSH
9854: DOUBLE
9855: LD_INT 3
9857: DEC
9858: ST_TO_ADDR
9859: LD_EXP 32
9863: PUSH
9864: FOR_TO
9865: IFFALSE 9908
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
9867: LD_VAR 0 3
9871: PPUSH
9872: LD_EXP 32
9876: PUSH
9877: LD_VAR 0 2
9881: ARRAY
9882: PUSH
9883: LD_INT 1
9885: ARRAY
9886: PPUSH
9887: LD_EXP 32
9891: PUSH
9892: LD_VAR 0 2
9896: ARRAY
9897: PUSH
9898: LD_INT 2
9900: ARRAY
9901: PPUSH
9902: CALL_OW 171
9906: GO 9864
9908: POP
9909: POP
// wait ( 0 0$01 ) ;
9910: LD_INT 35
9912: PPUSH
9913: CALL_OW 67
// end ;
9917: GO 9846
9919: POP
9920: POP
// end ;
9921: LD_VAR 0 1
9925: RET
// every 0 0$1 do var unit , driver ;
9926: GO 9928
9928: DISABLE
9929: LD_INT 0
9931: PPUSH
9932: PPUSH
// begin enable ;
9933: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
9934: LD_INT 4
9936: PPUSH
9937: LD_INT 22
9939: PUSH
9940: LD_INT 6
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 70
9951: NOT
9952: PUSH
9953: LD_INT 4
9955: PPUSH
9956: LD_INT 22
9958: PUSH
9959: LD_INT 3
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 2
9968: PUSH
9969: LD_INT 21
9971: PUSH
9972: LD_INT 1
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 21
9981: PUSH
9982: LD_INT 2
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 70
10002: NOT
10003: AND
10004: IFFALSE 10008
// exit ;
10006: GO 10359
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10008: LD_ADDR_VAR 0 1
10012: PUSH
10013: LD_INT 4
10015: PPUSH
10016: LD_INT 22
10018: PUSH
10019: LD_INT 6
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 70
10030: PUSH
10031: FOR_IN
10032: IFFALSE 10087
// begin RemoveUnit ( unit ) ;
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10043: LD_VAR 0 1
10047: PUSH
10048: LD_EXP 54
10052: IN
10053: NOT
10054: PUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 264
10064: PUSH
10065: LD_INT 51
10067: EQUAL
10068: AND
10069: IFFALSE 10085
// evacuatedCargos = evacuatedCargos + 1 ;
10071: LD_ADDR_EXP 9
10075: PUSH
10076: LD_EXP 9
10080: PUSH
10081: LD_INT 1
10083: PLUS
10084: ST_TO_ADDR
// end ;
10085: GO 10031
10087: POP
10088: POP
// if canExitMap then
10089: LD_EXP 5
10093: IFFALSE 10359
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10095: LD_ADDR_VAR 0 1
10099: PUSH
10100: LD_INT 4
10102: PPUSH
10103: LD_INT 22
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 2
10115: PUSH
10116: LD_INT 21
10118: PUSH
10119: LD_INT 1
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: LD_INT 21
10128: PUSH
10129: LD_INT 2
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 70
10149: PUSH
10150: FOR_IN
10151: IFFALSE 10357
// begin if GetType ( unit ) = unit_vehicle then
10153: LD_VAR 0 1
10157: PPUSH
10158: CALL_OW 247
10162: PUSH
10163: LD_INT 2
10165: EQUAL
10166: IFFALSE 10266
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10168: LD_VAR 0 1
10172: PPUSH
10173: CALL_OW 313
10177: PUSH
10178: LD_INT 1
10180: ARRAY
10181: PUSH
10182: LD_EXP 40
10186: PUSH
10187: LD_EXP 41
10191: PUSH
10192: LD_EXP 42
10196: PUSH
10197: LD_EXP 43
10201: PUSH
10202: LD_EXP 44
10206: PUSH
10207: LD_EXP 45
10211: PUSH
10212: LD_EXP 46
10216: PUSH
10217: LD_EXP 47
10221: PUSH
10222: LD_EXP 52
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: IN
10238: NOT
10239: IFFALSE 10266
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10241: LD_ADDR_EXP 59
10245: PUSH
10246: LD_EXP 59
10250: PUSH
10251: LD_VAR 0 1
10255: PPUSH
10256: CALL_OW 313
10260: PUSH
10261: LD_INT 1
10263: ARRAY
10264: ADD
10265: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10266: LD_VAR 0 1
10270: PUSH
10271: LD_EXP 40
10275: PUSH
10276: LD_EXP 41
10280: PUSH
10281: LD_EXP 42
10285: PUSH
10286: LD_EXP 43
10290: PUSH
10291: LD_EXP 44
10295: PUSH
10296: LD_EXP 45
10300: PUSH
10301: LD_EXP 46
10305: PUSH
10306: LD_EXP 47
10310: PUSH
10311: LD_EXP 52
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: IN
10327: NOT
10328: IFFALSE 10346
// randomsToSave = randomsToSave ^ unit ;
10330: LD_ADDR_EXP 59
10334: PUSH
10335: LD_EXP 59
10339: PUSH
10340: LD_VAR 0 1
10344: ADD
10345: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10346: LD_VAR 0 1
10350: PPUSH
10351: CALL_OW 64
// end ;
10355: GO 10150
10357: POP
10358: POP
// end ;
10359: PPOPN 2
10361: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10366: LD_INT 22
10368: PUSH
10369: LD_INT 3
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 21
10378: PUSH
10379: LD_INT 1
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PPUSH
10390: CALL_OW 69
10394: PPUSH
10395: CALL_OW 139
// CenterNowOnUnits ( building ) ;
10399: LD_VAR 0 1
10403: PPUSH
10404: CALL_OW 87
// InGameOn ;
10408: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
10412: LD_EXP 51
10416: PPUSH
10417: LD_STRING D2a-Pla-1
10419: PPUSH
10420: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
10424: LD_ADDR_VAR 0 3
10428: PUSH
10429: LD_INT 22
10431: PUSH
10432: LD_INT 3
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 21
10441: PUSH
10442: LD_INT 1
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 25
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: PPUSH
10464: CALL_OW 69
10468: PUSH
10469: FOR_IN
10470: IFFALSE 10508
// if GetDistUnits ( building , unit ) < 10 then
10472: LD_VAR 0 1
10476: PPUSH
10477: LD_VAR 0 3
10481: PPUSH
10482: CALL_OW 296
10486: PUSH
10487: LD_INT 10
10489: LESS
10490: IFFALSE 10506
// ComDismantle ( unit , building ) ;
10492: LD_VAR 0 3
10496: PPUSH
10497: LD_VAR 0 1
10501: PPUSH
10502: CALL_OW 167
10506: GO 10469
10508: POP
10509: POP
// repeat wait ( 0 0$1 ) ;
10510: LD_INT 35
10512: PPUSH
10513: CALL_OW 67
// until not IsPlaced ( building ) ;
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 305
10526: NOT
10527: IFFALSE 10510
// InGameOff ;
10529: CALL_OW 9
// end ;
10533: LD_VAR 0 2
10537: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
10538: LD_EXP 47
10542: PPUSH
10543: CALL_OW 255
10547: PUSH
10548: LD_INT 6
10550: EQUAL
10551: IFFALSE 10633
10553: GO 10555
10555: DISABLE
10556: LD_INT 0
10558: PPUSH
// begin enable ;
10559: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
10560: LD_ADDR_VAR 0 1
10564: PUSH
10565: LD_INT 22
10567: PUSH
10568: LD_INT 3
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 21
10577: PUSH
10578: LD_INT 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: PUSH
10594: FOR_IN
10595: IFFALSE 10631
// if GetDistUnits ( unit , Kuzmov ) < 9 then
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_EXP 47
10606: PPUSH
10607: CALL_OW 296
10611: PUSH
10612: LD_INT 9
10614: LESS
10615: IFFALSE 10629
// SetSide ( Kuzmov , 3 ) ;
10617: LD_EXP 47
10621: PPUSH
10622: LD_INT 3
10624: PPUSH
10625: CALL_OW 235
10629: GO 10594
10631: POP
10632: POP
// end ;
10633: PPOPN 1
10635: END
// export function Dial_FinishDepot ; var i ; begin
10636: LD_INT 0
10638: PPUSH
10639: PPUSH
// startEvacuation = true ;
10640: LD_ADDR_EXP 7
10644: PUSH
10645: LD_INT 1
10647: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
10648: LD_STRING MOutBuild
10650: PPUSH
10651: CALL_OW 337
// uc_side = 6 ;
10655: LD_ADDR_OWVAR 20
10659: PUSH
10660: LD_INT 6
10662: ST_TO_ADDR
// uc_nation = 3 ;
10663: LD_ADDR_OWVAR 21
10667: PUSH
10668: LD_INT 3
10670: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
10671: LD_ADDR_OWVAR 37
10675: PUSH
10676: LD_INT 21
10678: ST_TO_ADDR
// vc_control = control_manual ;
10679: LD_ADDR_OWVAR 38
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// vc_engine = engine_combustion ;
10687: LD_ADDR_OWVAR 39
10691: PUSH
10692: LD_INT 1
10694: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
10695: LD_ADDR_OWVAR 40
10699: PUSH
10700: LD_INT 51
10702: ST_TO_ADDR
// firstCargo = CreateVehicle ;
10703: LD_ADDR_EXP 58
10707: PUSH
10708: CALL_OW 45
10712: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
10713: LD_EXP 58
10717: PPUSH
10718: LD_INT 3
10720: PPUSH
10721: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
10725: LD_EXP 58
10729: PPUSH
10730: LD_INT 3
10732: PPUSH
10733: LD_INT 0
10735: PPUSH
10736: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
10740: LD_INT 1
10742: PPUSH
10743: LD_INT 3
10745: PPUSH
10746: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
10750: CALL_OW 44
10754: PPUSH
10755: LD_EXP 58
10759: PPUSH
10760: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
10764: LD_EXP 58
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: LD_INT 100
10774: PPUSH
10775: CALL_OW 291
// for i := 1 to 19 do
10779: LD_ADDR_VAR 0 2
10783: PUSH
10784: DOUBLE
10785: LD_INT 1
10787: DEC
10788: ST_TO_ADDR
10789: LD_INT 19
10791: PUSH
10792: FOR_TO
10793: IFFALSE 10836
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10795: LD_EXP 58
10799: PPUSH
10800: LD_EXP 32
10804: PUSH
10805: LD_VAR 0 2
10809: ARRAY
10810: PUSH
10811: LD_INT 1
10813: ARRAY
10814: PPUSH
10815: LD_EXP 32
10819: PUSH
10820: LD_VAR 0 2
10824: ARRAY
10825: PUSH
10826: LD_INT 2
10828: ARRAY
10829: PPUSH
10830: CALL_OW 171
10834: GO 10792
10836: POP
10837: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
10838: LD_EXP 58
10842: PPUSH
10843: LD_INT 105
10845: PPUSH
10846: LD_INT 123
10848: PPUSH
10849: CALL_OW 171
// AddComUnload ( firstCargo ) ;
10853: LD_EXP 58
10857: PPUSH
10858: CALL_OW 219
// for i := 21 to russianCargoPath1 do
10862: LD_ADDR_VAR 0 2
10866: PUSH
10867: DOUBLE
10868: LD_INT 21
10870: DEC
10871: ST_TO_ADDR
10872: LD_EXP 32
10876: PUSH
10877: FOR_TO
10878: IFFALSE 10921
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10880: LD_EXP 58
10884: PPUSH
10885: LD_EXP 32
10889: PUSH
10890: LD_VAR 0 2
10894: ARRAY
10895: PUSH
10896: LD_INT 1
10898: ARRAY
10899: PPUSH
10900: LD_EXP 32
10904: PUSH
10905: LD_VAR 0 2
10909: ARRAY
10910: PUSH
10911: LD_INT 2
10913: ARRAY
10914: PPUSH
10915: CALL_OW 171
10919: GO 10877
10921: POP
10922: POP
// Say ( Burlak , D2-Bur-1 ) ;
10923: LD_EXP 40
10927: PPUSH
10928: LD_STRING D2-Bur-1
10930: PPUSH
10931: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
10935: LD_EXP 51
10939: PPUSH
10940: LD_STRING D2-Pla-1
10942: PPUSH
10943: CALL_OW 94
// PrepareSecondBaseTeam ;
10947: CALL 2942 0 0
// end ;
10951: LD_VAR 0 1
10955: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
10956: LD_INT 0
10958: PPUSH
10959: PPUSH
// dial_labUpgradedBlock = true ;
10960: LD_ADDR_EXP 14
10964: PUSH
10965: LD_INT 1
10967: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
10968: LD_ADDR_VAR 0 2
10972: PUSH
10973: LD_INT 22
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: LD_INT 21
10985: PUSH
10986: LD_INT 1
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 26
10995: PUSH
10996: LD_INT 1
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 25
11005: PUSH
11006: LD_INT 4
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: PPUSH
11019: CALL_OW 69
11023: PUSH
11024: LD_EXP 40
11028: PUSH
11029: LD_EXP 41
11033: PUSH
11034: LD_EXP 42
11038: PUSH
11039: LD_EXP 43
11043: PUSH
11044: LD_EXP 44
11048: PUSH
11049: LD_EXP 45
11053: PUSH
11054: LD_EXP 46
11058: PUSH
11059: LD_EXP 47
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: DIFF
11074: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11075: LD_EXP 46
11079: PPUSH
11080: CALL_OW 302
11084: PUSH
11085: LD_EXP 46
11089: PPUSH
11090: CALL_OW 255
11094: PUSH
11095: LD_INT 3
11097: EQUAL
11098: AND
11099: IFFALSE 11127
// begin Say ( Scholtze , D5-Sch-1 ) ;
11101: LD_EXP 46
11105: PPUSH
11106: LD_STRING D5-Sch-1
11108: PPUSH
11109: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11113: LD_EXP 40
11117: PPUSH
11118: LD_STRING D5-Bur-1
11120: PPUSH
11121: CALL_OW 88
// end else
11125: GO 11262
// if randomMaleSci then
11127: LD_VAR 0 2
11131: IFFALSE 11163
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11133: LD_VAR 0 2
11137: PUSH
11138: LD_INT 1
11140: ARRAY
11141: PPUSH
11142: LD_STRING D5-RSci1-1
11144: PPUSH
11145: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11149: LD_EXP 40
11153: PPUSH
11154: LD_STRING D5-Bur-1
11156: PPUSH
11157: CALL_OW 88
// end else
11161: GO 11262
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11163: LD_ADDR_VAR 0 2
11167: PUSH
11168: LD_INT 22
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 21
11180: PUSH
11181: LD_INT 1
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: LD_INT 26
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 25
11200: PUSH
11201: LD_INT 4
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: PPUSH
11214: CALL_OW 69
11218: PUSH
11219: LD_EXP 40
11223: PUSH
11224: EMPTY
11225: LIST
11226: DIFF
11227: ST_TO_ADDR
// if randomMaleSci then
11228: LD_VAR 0 2
11232: IFFALSE 11262
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11234: LD_VAR 0 2
11238: PUSH
11239: LD_INT 1
11241: ARRAY
11242: PPUSH
11243: LD_STRING D5-RSci1-1
11245: PPUSH
11246: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11250: LD_EXP 40
11254: PPUSH
11255: LD_STRING D5-Bur-1
11257: PPUSH
11258: CALL_OW 88
// end ; end ; end ;
11262: LD_VAR 0 1
11266: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11267: LD_EXP 58
11271: PPUSH
11272: LD_INT 105
11274: PPUSH
11275: LD_INT 123
11277: PPUSH
11278: CALL_OW 297
11282: PUSH
11283: LD_INT 12
11285: LESS
11286: IFFALSE 11312
11288: GO 11290
11290: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11291: LD_EXP 58
11295: PPUSH
11296: CALL_OW 313
11300: PUSH
11301: LD_INT 1
11303: ARRAY
11304: PPUSH
11305: LD_STRING D2a-RSol1-1
11307: PPUSH
11308: CALL_OW 88
11312: END
// every 0 0$15 trigger startEvacuation do
11313: LD_EXP 7
11317: IFFALSE 11327
11319: GO 11321
11321: DISABLE
// begin enable ;
11322: ENABLE
// CreateEvacuateUnit ;
11323: CALL 2172 0 0
// end ;
11327: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
11328: LD_EXP 9
11332: PUSH
11333: LD_INT 3
11335: GREATEREQUAL
11336: IFFALSE 11435
11338: GO 11340
11340: DISABLE
// begin if IsOk ( Kuzmov ) then
11341: LD_EXP 47
11345: PPUSH
11346: CALL_OW 302
11350: IFFALSE 11420
// begin DialogueOn ;
11352: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
11356: LD_EXP 47
11360: PPUSH
11361: LD_STRING D2b-Kuz-1
11363: PPUSH
11364: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
11368: LD_EXP 40
11372: PPUSH
11373: LD_STRING D2b-Bur-1
11375: PPUSH
11376: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
11380: LD_EXP 47
11384: PPUSH
11385: LD_STRING D2b-Kuz-2
11387: PPUSH
11388: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
11392: LD_EXP 40
11396: PPUSH
11397: LD_STRING D2b-Bur-2
11399: PPUSH
11400: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
11404: LD_EXP 47
11408: PPUSH
11409: LD_STRING D2b-Kuz-3
11411: PPUSH
11412: CALL_OW 88
// DialogueOff ;
11416: CALL_OW 7
// end ; Query ( Q1 ) ;
11420: LD_STRING Q1
11422: PPUSH
11423: CALL_OW 97
// canStealCargo = true ;
11427: LD_ADDR_EXP 10
11431: PUSH
11432: LD_INT 1
11434: ST_TO_ADDR
// end ;
11435: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
11436: LD_EXP 10
11440: IFFALSE 11738
11442: GO 11444
11444: DISABLE
11445: LD_INT 0
11447: PPUSH
11448: PPUSH
// begin enable ;
11449: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
11450: LD_ADDR_VAR 0 2
11454: PUSH
11455: LD_INT 22
11457: PUSH
11458: LD_INT 6
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 21
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 34
11477: PUSH
11478: LD_INT 51
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 69
11494: PUSH
11495: FOR_IN
11496: IFFALSE 11736
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
11498: LD_ADDR_VAR 0 1
11502: PUSH
11503: LD_INT 22
11505: PUSH
11506: LD_INT 3
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 21
11515: PUSH
11516: LD_INT 1
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 50
11525: PUSH
11526: EMPTY
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: PPUSH
11534: CALL_OW 69
11538: PUSH
11539: FOR_IN
11540: IFFALSE 11732
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
11542: LD_VAR 0 2
11546: PPUSH
11547: LD_VAR 0 1
11551: PPUSH
11552: CALL_OW 296
11556: PUSH
11557: LD_INT 8
11559: LESS
11560: PUSH
11561: LD_VAR 0 2
11565: PUSH
11566: LD_EXP 12
11570: IN
11571: NOT
11572: AND
11573: PUSH
11574: LD_VAR 0 2
11578: PPUSH
11579: LD_INT 1
11581: PPUSH
11582: CALL_OW 289
11586: PUSH
11587: LD_INT 0
11589: GREATER
11590: AND
11591: IFFALSE 11730
// begin stealCargos = stealCargos ^ cargo ;
11593: LD_ADDR_EXP 12
11597: PUSH
11598: LD_EXP 12
11602: PUSH
11603: LD_VAR 0 2
11607: ADD
11608: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
11609: LD_STRING QQrSteal
11611: PPUSH
11612: CALL_OW 97
11616: PUSH
11617: LD_INT 1
11619: DOUBLE
11620: EQUAL
11621: IFTRUE 11625
11623: GO 11698
11625: POP
// begin stealWarmCount = stealWarmCount + 1 ;
11626: LD_ADDR_EXP 11
11630: PUSH
11631: LD_EXP 11
11635: PUSH
11636: LD_INT 1
11638: PLUS
11639: ST_TO_ADDR
// DialogueOn ;
11640: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
11644: LD_EXP 40
11648: PPUSH
11649: LD_STRING DQrSteal#1-Bur-1
11651: PPUSH
11652: CALL_OW 88
// DialogueOff ;
11656: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
11660: LD_VAR 0 2
11664: PPUSH
11665: LD_INT 14
11667: PPUSH
11668: CALL_OW 113
// AddComUnload ( cargo ) ;
11672: LD_VAR 0 2
11676: PPUSH
11677: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
11681: LD_VAR 0 2
11685: PPUSH
11686: LD_INT 92
11688: PPUSH
11689: LD_INT 177
11691: PPUSH
11692: CALL_OW 171
// end ; 2 :
11696: GO 11730
11698: LD_INT 2
11700: DOUBLE
11701: EQUAL
11702: IFTRUE 11706
11704: GO 11729
11706: POP
// begin DialogueOn ;
11707: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
11711: LD_EXP 40
11715: PPUSH
11716: LD_STRING DQrSteal#2-Bur-1
11718: PPUSH
11719: CALL_OW 88
// DialogueOff ;
11723: CALL_OW 7
// end ; end ;
11727: GO 11730
11729: POP
// end ;
11730: GO 11539
11732: POP
11733: POP
11734: GO 11495
11736: POP
11737: POP
// end ;
11738: PPOPN 2
11740: END
// every 0 0$12 trigger stealWarmCount = 3 do
11741: LD_EXP 11
11745: PUSH
11746: LD_INT 3
11748: EQUAL
11749: IFFALSE 11821
11751: GO 11753
11753: DISABLE
// begin DialogueOn ;
11754: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
11758: LD_EXP 51
11762: PPUSH
11763: LD_STRING D3A-Pla-1
11765: PPUSH
11766: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
11770: LD_EXP 40
11774: PPUSH
11775: LD_STRING D3A-Bur-1
11777: PPUSH
11778: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
11782: LD_EXP 51
11786: PPUSH
11787: LD_STRING D3A-Pla-2
11789: PPUSH
11790: CALL_OW 94
// if IsOK ( Kuzmov ) then
11794: LD_EXP 47
11798: PPUSH
11799: CALL_OW 302
11803: IFFALSE 11817
// Say ( Kuzmov , D3A-Kuz-2 ) ;
11805: LD_EXP 47
11809: PPUSH
11810: LD_STRING D3A-Kuz-2
11812: PPUSH
11813: CALL_OW 88
// DialogueOff ;
11817: CALL_OW 7
// end ;
11821: END
// every 0 0$10 trigger stealWarmCount = 6 do
11822: LD_EXP 11
11826: PUSH
11827: LD_INT 6
11829: EQUAL
11830: IFFALSE 11879
11832: GO 11834
11834: DISABLE
// begin DialogueOn ;
11835: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
11839: LD_EXP 51
11843: PPUSH
11844: LD_STRING D3B-Pla-1
11846: PPUSH
11847: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
11851: LD_EXP 40
11855: PPUSH
11856: LD_STRING D3B-Bur-1
11858: PPUSH
11859: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
11863: LD_EXP 51
11867: PPUSH
11868: LD_STRING D3B-Pla-2
11870: PPUSH
11871: CALL_OW 94
// DialogueOff ;
11875: CALL_OW 7
// end ;
11879: END
// every 0 0$10 trigger stealWarmCount = 7 do
11880: LD_EXP 11
11884: PUSH
11885: LD_INT 7
11887: EQUAL
11888: IFFALSE 11972
11890: GO 11892
11892: DISABLE
// begin DialogueOn ;
11893: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
11897: LD_EXP 51
11901: PPUSH
11902: LD_STRING D3C-Pla-1
11904: PPUSH
11905: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
11909: LD_EXP 40
11913: PPUSH
11914: LD_STRING D3C-Bur-1
11916: PPUSH
11917: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
11921: LD_EXP 51
11925: PPUSH
11926: LD_STRING D3C-Pla-2
11928: PPUSH
11929: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
11933: LD_EXP 40
11937: PPUSH
11938: LD_STRING D3C-Bur-2
11940: PPUSH
11941: CALL_OW 88
// if IsOK ( Kuzmov ) then
11945: LD_EXP 47
11949: PPUSH
11950: CALL_OW 302
11954: IFFALSE 11968
// Say ( Kuzmov , D3C-Kuz-2 ) ;
11956: LD_EXP 47
11960: PPUSH
11961: LD_STRING D3C-Kuz-2
11963: PPUSH
11964: CALL_OW 88
// DialogueOff ;
11968: CALL_OW 7
// end ;
11972: END
// every 0 0$10 trigger stealWarmCount = 8 do
11973: LD_EXP 11
11977: PUSH
11978: LD_INT 8
11980: EQUAL
11981: IFFALSE 12173
11983: GO 11985
11985: DISABLE
// begin canStealCargo = false ;
11986: LD_ADDR_EXP 10
11990: PUSH
11991: LD_INT 0
11993: ST_TO_ADDR
// DialogueOn ;
11994: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
11998: LD_EXP 51
12002: PPUSH
12003: LD_STRING D3D-Pla-1
12005: PPUSH
12006: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12010: LD_EXP 40
12014: PPUSH
12015: LD_STRING D3D-Bur-1
12017: PPUSH
12018: CALL_OW 88
// if kurinOpinion = 0 then
12022: LD_EXP 2
12026: PUSH
12027: LD_INT 0
12029: EQUAL
12030: IFFALSE 12050
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12032: LD_EXP 51
12036: PPUSH
12037: LD_STRING D3E-Pla-1
12039: PPUSH
12040: CALL_OW 94
// Lose_Arrest ;
12044: CALL 6978 0 0
// exit ;
12048: GO 12173
// end ; if meetBelkovBrother = 1 then
12050: LD_EXP 3
12054: PUSH
12055: LD_INT 1
12057: EQUAL
12058: IFFALSE 12078
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12060: LD_EXP 51
12064: PPUSH
12065: LD_STRING D3E-Pla-1a
12067: PPUSH
12068: CALL_OW 94
// Lose_Arrest ;
12072: CALL 6978 0 0
// exit ;
12076: GO 12173
// end ; if platonovOpinion = 0 then
12078: LD_EXP 1
12082: PUSH
12083: LD_INT 0
12085: EQUAL
12086: IFFALSE 12106
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12088: LD_EXP 51
12092: PPUSH
12093: LD_STRING D3E-Pla-1b
12095: PPUSH
12096: CALL_OW 94
// Lose_Arrest ;
12100: CALL 6978 0 0
// exit ;
12104: GO 12173
// end ; if platonovOpinion = 1 then
12106: LD_EXP 1
12110: PUSH
12111: LD_INT 1
12113: EQUAL
12114: IFFALSE 12134
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12116: LD_EXP 51
12120: PPUSH
12121: LD_STRING D3E-Pla-1c
12123: PPUSH
12124: CALL_OW 94
// Lose_Arrest ;
12128: CALL 6978 0 0
// exit ;
12132: GO 12173
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12134: LD_EXP 51
12138: PPUSH
12139: LD_STRING D3D-Pla-2
12141: PPUSH
12142: CALL_OW 94
// if IsOK ( Kuzmov ) then
12146: LD_EXP 47
12150: PPUSH
12151: CALL_OW 302
12155: IFFALSE 12169
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12157: LD_EXP 47
12161: PPUSH
12162: LD_STRING D3D-Kuz-2
12164: PPUSH
12165: CALL_OW 88
// DialogueOff ;
12169: CALL_OW 7
// end ;
12173: END
// every 0 0$20 do var allyUntis ;
12174: GO 12176
12176: DISABLE
12177: LD_INT 0
12179: PPUSH
// begin enable ;
12180: ENABLE
// wait ( 0 0$10 ) ;
12181: LD_INT 350
12183: PPUSH
12184: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12188: LD_ADDR_VAR 0 1
12192: PUSH
12193: LD_INT 22
12195: PUSH
12196: LD_INT 6
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 3
12205: PUSH
12206: LD_INT 60
12208: PUSH
12209: EMPTY
12210: LIST
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PPUSH
12220: CALL_OW 69
12224: PUSH
12225: LD_EXP 54
12229: DIFF
12230: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12231: LD_ADDR_VAR 0 1
12235: PUSH
12236: LD_VAR 0 1
12240: PUSH
12241: LD_EXP 52
12245: DIFF
12246: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12247: LD_ADDR_VAR 0 1
12251: PUSH
12252: LD_VAR 0 1
12256: PUSH
12257: LD_EXP 47
12261: DIFF
12262: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12263: LD_ADDR_VAR 0 1
12267: PUSH
12268: LD_VAR 0 1
12272: PUSH
12273: LD_EXP 55
12277: DIFF
12278: ST_TO_ADDR
// if not allyUntis then
12279: LD_VAR 0 1
12283: NOT
12284: IFFALSE 12288
// exit ;
12286: GO 12312
// ComUnload ( allyUntis ) ;
12288: LD_VAR 0 1
12292: PPUSH
12293: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12297: LD_VAR 0 1
12301: PPUSH
12302: LD_INT 92
12304: PPUSH
12305: LD_INT 176
12307: PPUSH
12308: CALL_OW 171
// end ;
12312: PPOPN 1
12314: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
12315: LD_EXP 9
12319: PUSH
12320: LD_EXP 13
12324: GREATEREQUAL
12325: IFFALSE 12338
12327: GO 12329
12329: DISABLE
// begin startEvacuation = false ;
12330: LD_ADDR_EXP 7
12334: PUSH
12335: LD_INT 0
12337: ST_TO_ADDR
// end ;
12338: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
12339: LD_EXP 9
12343: PUSH
12344: LD_EXP 13
12348: GREATEREQUAL
12349: PUSH
12350: LD_INT 22
12352: PUSH
12353: LD_INT 6
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 2
12362: PUSH
12363: LD_INT 21
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 21
12375: PUSH
12376: LD_INT 2
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 69
12396: PUSH
12397: LD_EXP 55
12401: DIFF
12402: NOT
12403: AND
12404: IFFALSE 12788
12406: GO 12408
12408: DISABLE
// begin wait ( 1 1$00 ) ;
12409: LD_INT 2100
12411: PPUSH
12412: CALL_OW 67
// DialogueOn ;
12416: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
12420: LD_EXP 51
12424: PPUSH
12425: LD_STRING D4-Pla-1
12427: PPUSH
12428: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
12432: LD_EXP 40
12436: PPUSH
12437: LD_STRING D4-Bur-1
12439: PPUSH
12440: CALL_OW 88
// DialogueOff ;
12444: CALL_OW 7
// wait ( 0 0$2 ) ;
12448: LD_INT 70
12450: PPUSH
12451: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
12455: LD_EXP 47
12459: PPUSH
12460: CALL_OW 302
12464: PUSH
12465: LD_EXP 47
12469: PPUSH
12470: CALL_OW 255
12474: PUSH
12475: LD_INT 3
12477: EQUAL
12478: AND
12479: IFFALSE 12761
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
12481: LD_EXP 47
12485: PPUSH
12486: LD_STRING D4-Kuz-1
12488: PPUSH
12489: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
12493: LD_EXP 44
12497: PPUSH
12498: CALL_OW 302
12502: PUSH
12503: LD_EXP 44
12507: PPUSH
12508: CALL_OW 255
12512: PUSH
12513: LD_INT 3
12515: EQUAL
12516: AND
12517: IFFALSE 12533
// Say ( Belkov , D4-Bel-1 ) else
12519: LD_EXP 44
12523: PPUSH
12524: LD_STRING D4-Bel-1
12526: PPUSH
12527: CALL_OW 88
12531: GO 12571
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
12533: LD_EXP 45
12537: PPUSH
12538: CALL_OW 302
12542: PUSH
12543: LD_EXP 45
12547: PPUSH
12548: CALL_OW 255
12552: PUSH
12553: LD_INT 3
12555: EQUAL
12556: AND
12557: IFFALSE 12571
// Say ( Belkov2 , D4-Bel-1 ) ;
12559: LD_EXP 45
12563: PPUSH
12564: LD_STRING D4-Bel-1
12566: PPUSH
12567: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
12571: LD_EXP 40
12575: PPUSH
12576: LD_STRING D4-Bur-2
12578: PPUSH
12579: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
12583: LD_EXP 41
12587: PPUSH
12588: CALL_OW 302
12592: PUSH
12593: LD_EXP 41
12597: PPUSH
12598: CALL_OW 255
12602: PUSH
12603: LD_INT 3
12605: EQUAL
12606: AND
12607: IFFALSE 12633
// begin Say ( Gnyevko , D4-Gny-2 ) ;
12609: LD_EXP 41
12613: PPUSH
12614: LD_STRING D4-Gny-2
12616: PPUSH
12617: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
12621: LD_EXP 40
12625: PPUSH
12626: LD_STRING D4-Bur-3
12628: PPUSH
12629: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
12633: LD_EXP 40
12637: PPUSH
12638: LD_STRING D4-Bur-3a
12640: PPUSH
12641: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
12645: LD_EXP 44
12649: PPUSH
12650: CALL_OW 302
12654: PUSH
12655: LD_EXP 44
12659: PPUSH
12660: CALL_OW 255
12664: PUSH
12665: LD_INT 3
12667: EQUAL
12668: AND
12669: IFFALSE 12685
// Say ( Belkov , D4-Bel-3 ) else
12671: LD_EXP 44
12675: PPUSH
12676: LD_STRING D4-Bel-3
12678: PPUSH
12679: CALL_OW 88
12683: GO 12723
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
12685: LD_EXP 45
12689: PPUSH
12690: CALL_OW 302
12694: PUSH
12695: LD_EXP 45
12699: PPUSH
12700: CALL_OW 255
12704: PUSH
12705: LD_INT 3
12707: EQUAL
12708: AND
12709: IFFALSE 12723
// Say ( Belkov2 , D4-Bel-3 ) ;
12711: LD_EXP 45
12715: PPUSH
12716: LD_STRING D4-Bel-3
12718: PPUSH
12719: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
12723: LD_EXP 43
12727: PPUSH
12728: CALL_OW 302
12732: PUSH
12733: LD_EXP 43
12737: PPUSH
12738: CALL_OW 255
12742: PUSH
12743: LD_INT 3
12745: EQUAL
12746: AND
12747: IFFALSE 12761
// Say ( Kovalyuk , D4-Kov-3 ) ;
12749: LD_EXP 43
12753: PPUSH
12754: LD_STRING D4-Kov-3
12756: PPUSH
12757: CALL_OW 88
// end ; enableAttacks = true ;
12761: LD_ADDR_EXP 16
12765: PUSH
12766: LD_INT 1
12768: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12769: LD_INT 350
12771: PPUSH
12772: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
12776: LD_EXP 40
12780: PPUSH
12781: LD_STRING D7-Bur-1
12783: PPUSH
12784: CALL_OW 88
// end ;
12788: END
// export function Dial_Contact ; begin
12789: LD_INT 0
12791: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
12792: LD_EXP 40
12796: PPUSH
12797: LD_STRING D7-Bur-1a
12799: PPUSH
12800: CALL_OW 88
// wait ( 0 0$12 ) ;
12804: LD_INT 420
12806: PPUSH
12807: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
12811: LD_EXP 40
12815: PPUSH
12816: LD_STRING D7-Bur-1b
12818: PPUSH
12819: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
12823: LD_EXP 44
12827: PPUSH
12828: CALL_OW 302
12832: PUSH
12833: LD_EXP 44
12837: PPUSH
12838: CALL_OW 255
12842: PUSH
12843: LD_INT 3
12845: EQUAL
12846: AND
12847: IFFALSE 12863
// Say ( Belkov , D7-Bel-1 ) else
12849: LD_EXP 44
12853: PPUSH
12854: LD_STRING D7-Bel-1
12856: PPUSH
12857: CALL_OW 88
12861: GO 12901
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
12863: LD_EXP 45
12867: PPUSH
12868: CALL_OW 302
12872: PUSH
12873: LD_EXP 45
12877: PPUSH
12878: CALL_OW 255
12882: PUSH
12883: LD_INT 3
12885: EQUAL
12886: AND
12887: IFFALSE 12901
// Say ( Belkov2 , D7-Bel-1 ) ;
12889: LD_EXP 45
12893: PPUSH
12894: LD_STRING D7-Bel-1
12896: PPUSH
12897: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
12901: LD_EXP 47
12905: PPUSH
12906: CALL_OW 302
12910: PUSH
12911: LD_EXP 47
12915: PPUSH
12916: CALL_OW 255
12920: PUSH
12921: LD_INT 3
12923: EQUAL
12924: AND
12925: IFFALSE 12939
// Say ( Kuzmov , D7-Kuz-1 ) ;
12927: LD_EXP 47
12931: PPUSH
12932: LD_STRING D7-Kuz-1
12934: PPUSH
12935: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
12939: LD_EXP 43
12943: PPUSH
12944: CALL_OW 302
12948: PUSH
12949: LD_EXP 43
12953: PPUSH
12954: CALL_OW 255
12958: PUSH
12959: LD_INT 3
12961: EQUAL
12962: AND
12963: IFFALSE 12977
// Say ( Kovalyuk , D7-Kov-1 ) ;
12965: LD_EXP 43
12969: PPUSH
12970: LD_STRING D7-Kov-1
12972: PPUSH
12973: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
12977: LD_EXP 46
12981: PPUSH
12982: CALL_OW 302
12986: PUSH
12987: LD_EXP 46
12991: PPUSH
12992: CALL_OW 255
12996: PUSH
12997: LD_INT 3
12999: EQUAL
13000: AND
13001: IFFALSE 13015
// Say ( Scholtze , D7-Sch-1 ) ;
13003: LD_EXP 46
13007: PPUSH
13008: LD_STRING D7-Sch-1
13010: PPUSH
13011: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
13015: LD_INT 22
13017: PUSH
13018: LD_INT 3
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 21
13027: PUSH
13028: LD_INT 1
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 26
13037: PUSH
13038: LD_INT 1
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: PPUSH
13055: LD_STRING D7-RSol1-1
13057: PPUSH
13058: LD_STRING 
13060: PPUSH
13061: LD_INT 0
13063: PPUSH
13064: CALL 8911 0 4
// PrepareHeike ;
13068: CALL 3147 0 0
// wait ( 0 0$10 ) ;
13072: LD_INT 350
13074: PPUSH
13075: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
13079: LD_EXP 60
13083: PPUSH
13084: LD_STRING D7a-Hke-1
13086: PPUSH
13087: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
13091: LD_EXP 40
13095: PPUSH
13096: LD_STRING D7a-Bur-1
13098: PPUSH
13099: CALL_OW 88
// wait ( 0 0$50 ) ;
13103: LD_INT 1750
13105: PPUSH
13106: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13110: LD_EXP 47
13114: PPUSH
13115: CALL_OW 302
13119: PUSH
13120: LD_EXP 47
13124: PPUSH
13125: CALL_OW 255
13129: PUSH
13130: LD_INT 3
13132: EQUAL
13133: AND
13134: IFFALSE 13150
// Say ( Kuzmov , D8-Kuz-1 ) else
13136: LD_EXP 47
13140: PPUSH
13141: LD_STRING D8-Kuz-1
13143: PPUSH
13144: CALL_OW 88
13148: GO 13203
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
13150: LD_INT 22
13152: PUSH
13153: LD_INT 3
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 21
13162: PUSH
13163: LD_INT 1
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 26
13172: PUSH
13173: LD_INT 1
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 69
13189: PPUSH
13190: LD_STRING D8-RSol1-1
13192: PPUSH
13193: LD_STRING 
13195: PPUSH
13196: LD_INT 0
13198: PPUSH
13199: CALL 8911 0 4
// Say ( Burlak , D8-Bur-1 ) ;
13203: LD_EXP 40
13207: PPUSH
13208: LD_STRING D8-Bur-1
13210: PPUSH
13211: CALL_OW 88
// end ;
13215: LD_VAR 0 1
13219: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
13220: LD_EXP 52
13224: PPUSH
13225: CALL_OW 305
13229: NOT
13230: PUSH
13231: LD_INT 22
13233: PUSH
13234: LD_INT 3
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 21
13243: PUSH
13244: LD_INT 3
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 50
13253: PUSH
13254: EMPTY
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: PPUSH
13262: CALL_OW 69
13266: NOT
13267: AND
13268: PUSH
13269: LD_INT 22
13271: PUSH
13272: LD_INT 3
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 21
13281: PUSH
13282: LD_INT 1
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 50
13291: PUSH
13292: EMPTY
13293: LIST
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: LIST
13299: PPUSH
13300: CALL_OW 69
13304: PUSH
13305: LD_INT 5
13307: LESS
13308: AND
13309: PUSH
13310: LD_INT 5
13312: PPUSH
13313: LD_INT 22
13315: PUSH
13316: LD_INT 2
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: PPUSH
13326: CALL_OW 70
13330: PUSH
13331: LD_INT 3
13333: GREATER
13334: AND
13335: IFFALSE 13344
13337: GO 13339
13339: DISABLE
// Lose_ArabBreakthrough ;
13340: CALL 6993 0 0
13344: END
// every 1 1$30 trigger currentWave >= enemyWaves do
13345: LD_EXP 17
13349: PUSH
13350: LD_EXP 36
13354: GREATEREQUAL
13355: IFFALSE 13553
13357: GO 13359
13359: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
13360: LD_EXP 51
13364: PPUSH
13365: LD_STRING D9-Pla-1
13367: PPUSH
13368: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
13372: LD_EXP 40
13376: PPUSH
13377: LD_STRING D9-Bur-1
13379: PPUSH
13380: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
13384: LD_EXP 51
13388: PPUSH
13389: LD_STRING D9-Pla-2
13391: PPUSH
13392: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
13396: LD_EXP 40
13400: PPUSH
13401: LD_STRING D9-Bur-2
13403: PPUSH
13404: CALL_OW 88
// wait ( 2 2$0 ) ;
13408: LD_INT 4200
13410: PPUSH
13411: CALL_OW 67
// PlaceUnitArea ( Gaydar , GaydarSpawnArea , false ) ;
13415: LD_EXP 52
13419: PPUSH
13420: LD_INT 6
13422: PPUSH
13423: LD_INT 0
13425: PPUSH
13426: CALL_OW 49
// arabianCanExitMap = true ;
13430: LD_ADDR_EXP 6
13434: PUSH
13435: LD_INT 1
13437: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13438: LD_INT 35
13440: PPUSH
13441: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
13445: LD_EXP 52
13449: PPUSH
13450: CALL_OW 87
// DialogueOn ;
13454: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
13458: LD_EXP 52
13462: PPUSH
13463: LD_STRING D10-Gay-1
13465: PPUSH
13466: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
13470: LD_EXP 40
13474: PPUSH
13475: LD_STRING D10-Bur-1
13477: PPUSH
13478: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
13482: LD_EXP 52
13486: PPUSH
13487: LD_STRING D10-Gay-2
13489: PPUSH
13490: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
13494: LD_EXP 50
13498: PPUSH
13499: LD_STRING D10-Pop-2
13501: PPUSH
13502: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
13506: LD_EXP 52
13510: PPUSH
13511: LD_STRING D10-Gay-3
13513: PPUSH
13514: CALL_OW 94
// DialogueOff ;
13518: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
13522: LD_EXP 52
13526: PPUSH
13527: LD_INT 36
13529: PPUSH
13530: LD_INT 38
13532: PPUSH
13533: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
13537: LD_EXP 52
13541: PPUSH
13542: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
13546: LD_STRING M2
13548: PPUSH
13549: CALL_OW 337
// end ;
13553: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
13554: LD_EXP 6
13558: IFFALSE 13631
13560: GO 13562
13562: DISABLE
13563: LD_INT 0
13565: PPUSH
// begin enable ;
13566: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
13567: LD_INT 22
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: PPUSH
13580: CALL_OW 69
13584: PPUSH
13585: LD_INT 13
13587: PPUSH
13588: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
13592: LD_ADDR_VAR 0 1
13596: PUSH
13597: LD_INT 13
13599: PPUSH
13600: LD_INT 22
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 70
13614: PUSH
13615: FOR_IN
13616: IFFALSE 13629
// RemoveUnit ( unit ) ;
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 64
13627: GO 13615
13629: POP
13630: POP
// end ;
13631: PPOPN 1
13633: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
13634: LD_EXP 18
13638: NOT
13639: IFFALSE 14029
13641: GO 13643
13643: DISABLE
13644: LD_INT 0
13646: PPUSH
13647: PPUSH
// begin enable ;
13648: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
13649: LD_ADDR_VAR 0 1
13653: PUSH
13654: LD_INT 22
13656: PUSH
13657: LD_INT 3
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 21
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 69
13682: PUSH
13683: FOR_IN
13684: IFFALSE 14027
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
13686: LD_VAR 0 1
13690: PPUSH
13691: LD_EXP 52
13695: PPUSH
13696: CALL_OW 296
13700: PUSH
13701: LD_INT 6
13703: LESS
13704: IFFALSE 14025
// begin SetSide ( Gaydar , 3 ) ;
13706: LD_EXP 52
13710: PPUSH
13711: LD_INT 3
13713: PPUSH
13714: CALL_OW 235
// ComWalk ( Gaydar ) ;
13718: LD_EXP 52
13722: PPUSH
13723: CALL_OW 138
// saveGaydar = true ;
13727: LD_ADDR_EXP 18
13731: PUSH
13732: LD_INT 1
13734: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13735: LD_INT 35
13737: PPUSH
13738: CALL_OW 67
// DialogueOn ;
13742: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
13746: LD_EXP 52
13750: PPUSH
13751: LD_STRING D11-Gay-1
13753: PPUSH
13754: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
13758: LD_EXP 40
13762: PPUSH
13763: LD_EXP 52
13767: PPUSH
13768: CALL_OW 296
13772: PUSH
13773: LD_INT 6
13775: LESS
13776: NOT
13777: IFFALSE 13877
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
13779: LD_ADDR_VAR 0 2
13783: PUSH
13784: LD_INT 22
13786: PUSH
13787: LD_INT 3
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 21
13796: PUSH
13797: LD_INT 1
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 26
13806: PUSH
13807: LD_INT 1
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 50
13816: PUSH
13817: EMPTY
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: PPUSH
13826: CALL_OW 69
13830: PUSH
13831: LD_EXP 52
13835: DIFF
13836: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
13837: LD_VAR 0 2
13841: PPUSH
13842: LD_EXP 52
13846: PPUSH
13847: CALL_OW 74
13851: PPUSH
13852: LD_STRING D11-RSol1-1
13854: PPUSH
13855: CALL_OW 88
// gaydarWaitForBurlak = true ;
13859: LD_ADDR_EXP 19
13863: PUSH
13864: LD_INT 1
13866: ST_TO_ADDR
// DialogueOff ;
13867: CALL_OW 7
// exit ;
13871: POP
13872: POP
13873: GO 14029
// end else
13875: GO 14025
// begin Say ( Gaydar , D11-Gay-2 ) ;
13877: LD_EXP 52
13881: PPUSH
13882: LD_STRING D11-Gay-2
13884: PPUSH
13885: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
13889: LD_EXP 40
13893: PPUSH
13894: LD_STRING D11-Bur-2
13896: PPUSH
13897: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
13901: LD_EXP 52
13905: PPUSH
13906: LD_STRING D11-Gay-3
13908: PPUSH
13909: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
13913: LD_EXP 40
13917: PPUSH
13918: LD_STRING D11-Bur-3
13920: PPUSH
13921: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
13925: LD_EXP 52
13929: PPUSH
13930: LD_STRING D11-Gay-4
13932: PPUSH
13933: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
13937: LD_EXP 40
13941: PPUSH
13942: LD_STRING D11-Bur-4
13944: PPUSH
13945: CALL_OW 88
// wait ( 0 0$2 ) ;
13949: LD_INT 70
13951: PPUSH
13952: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
13956: LD_EXP 50
13960: PPUSH
13961: LD_STRING D12-Pop-1
13963: PPUSH
13964: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
13968: LD_EXP 40
13972: PPUSH
13973: LD_STRING D12-Bur-1
13975: PPUSH
13976: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
13980: LD_EXP 51
13984: PPUSH
13985: LD_STRING D12-Pla-1
13987: PPUSH
13988: CALL_OW 94
// DialogueOff ;
13992: CALL_OW 7
// canExitMap = true ;
13996: LD_ADDR_EXP 5
14000: PUSH
14001: LD_INT 1
14003: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
14004: LD_STRING MFinal
14006: PPUSH
14007: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
14011: LD_INT 4
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: CALL_OW 424
// exit ;
14021: POP
14022: POP
14023: GO 14029
// end ; end ; end ;
14025: GO 13683
14027: POP
14028: POP
// end ;
14029: PPOPN 2
14031: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
14032: LD_EXP 40
14036: PPUSH
14037: LD_EXP 52
14041: PPUSH
14042: CALL_OW 296
14046: PUSH
14047: LD_INT 6
14049: LESS
14050: PUSH
14051: LD_EXP 19
14055: AND
14056: IFFALSE 14209
14058: GO 14060
14060: DISABLE
// begin DialogueOn ;
14061: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
14065: LD_EXP 52
14069: PPUSH
14070: LD_STRING D11-Gay-2
14072: PPUSH
14073: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14077: LD_EXP 40
14081: PPUSH
14082: LD_STRING D11-Bur-2
14084: PPUSH
14085: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14089: LD_EXP 52
14093: PPUSH
14094: LD_STRING D11-Gay-3
14096: PPUSH
14097: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
14101: LD_EXP 40
14105: PPUSH
14106: LD_STRING D11-Bur-3
14108: PPUSH
14109: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
14113: LD_EXP 52
14117: PPUSH
14118: LD_STRING D11-Gay-4
14120: PPUSH
14121: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
14125: LD_EXP 40
14129: PPUSH
14130: LD_STRING D11-Bur-4
14132: PPUSH
14133: CALL_OW 88
// wait ( 0 0$2 ) ;
14137: LD_INT 70
14139: PPUSH
14140: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
14144: LD_EXP 50
14148: PPUSH
14149: LD_STRING D12-Pop-1
14151: PPUSH
14152: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
14156: LD_EXP 40
14160: PPUSH
14161: LD_STRING D12-Bur-1
14163: PPUSH
14164: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
14168: LD_EXP 51
14172: PPUSH
14173: LD_STRING D12-Pla-1
14175: PPUSH
14176: CALL_OW 94
// DialogueOff ;
14180: CALL_OW 7
// canExitMap = true ;
14184: LD_ADDR_EXP 5
14188: PUSH
14189: LD_INT 1
14191: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
14192: LD_STRING MFinal
14194: PPUSH
14195: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
14199: LD_INT 4
14201: PPUSH
14202: LD_INT 1
14204: PPUSH
14205: CALL_OW 424
// end ;
14209: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
14210: LD_INT 22
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 21
14222: PUSH
14223: LD_INT 1
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PPUSH
14234: CALL_OW 69
14238: PUSH
14239: LD_INT 0
14241: EQUAL
14242: PUSH
14243: LD_EXP 5
14247: AND
14248: IFFALSE 14257
14250: GO 14252
14252: DISABLE
// FinishMission ; end_of_file
14253: CALL 7111 0 0
14257: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
14258: LD_EXP 16
14262: PUSH
14263: LD_EXP 17
14267: PUSH
14268: LD_INT 0
14270: EQUAL
14271: AND
14272: PUSH
14273: LD_EXP 17
14277: PUSH
14278: LD_EXP 36
14282: LESS
14283: AND
14284: IFFALSE 14336
14286: GO 14288
14288: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
14289: LD_INT 7
14291: PUSH
14292: LD_INT 10
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 1
14301: PPUSH
14302: LD_INT 2
14304: PPUSH
14305: CALL_OW 12
14309: ARRAY
14310: PPUSH
14311: CALL 3495 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
14315: LD_EXP 61
14319: PPUSH
14320: EMPTY
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: LD_INT 1
14330: NEG
14331: PPUSH
14332: CALL 4444 0 5
// end ;
14336: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
14337: LD_EXP 16
14341: PUSH
14342: LD_EXP 17
14346: PUSH
14347: LD_INT 0
14349: GREATEREQUAL
14350: AND
14351: PUSH
14352: LD_EXP 17
14356: PUSH
14357: LD_EXP 36
14361: LESS
14362: AND
14363: IFFALSE 14593
14365: GO 14367
14367: DISABLE
// begin currentWave = currentWave + 1 ;
14368: LD_ADDR_EXP 17
14372: PUSH
14373: LD_EXP 17
14377: PUSH
14378: LD_INT 1
14380: PLUS
14381: ST_TO_ADDR
// PrepareArabianVehicles ;
14382: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
14386: LD_EXP 61
14390: PPUSH
14391: LD_INT 135
14393: PUSH
14394: LD_INT 4
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 134
14403: PUSH
14404: LD_INT 19
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 132
14413: PUSH
14414: LD_INT 26
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 128
14423: PUSH
14424: LD_INT 31
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 123
14433: PUSH
14434: LD_INT 37
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 118
14443: PUSH
14444: LD_INT 45
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 112
14453: PUSH
14454: LD_INT 51
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 106
14463: PUSH
14464: LD_INT 57
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 99
14473: PUSH
14474: LD_INT 62
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 93
14483: PUSH
14484: LD_INT 67
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 86
14493: PUSH
14494: LD_INT 72
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 78
14503: PUSH
14504: LD_INT 75
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 71
14513: PUSH
14514: LD_INT 81
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 69
14523: PUSH
14524: LD_INT 88
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 71
14533: PUSH
14534: LD_INT 95
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 74
14543: PUSH
14544: LD_INT 103
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 80
14553: PUSH
14554: LD_INT 113
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: PPUSH
14580: LD_INT 0
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: LD_INT 11
14588: PPUSH
14589: CALL 4444 0 5
// end ;
14593: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
14594: LD_EXP 16
14598: PUSH
14599: LD_OWVAR 67
14603: PUSH
14604: LD_INT 2
14606: EQUAL
14607: AND
14608: PUSH
14609: LD_EXP 17
14613: PUSH
14614: LD_INT 0
14616: GREATEREQUAL
14617: AND
14618: PUSH
14619: LD_EXP 17
14623: PUSH
14624: LD_EXP 36
14628: LESS
14629: AND
14630: IFFALSE 14780
14632: GO 14634
14634: DISABLE
// begin PrepareArabianVehicles ;
14635: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
14639: LD_EXP 61
14643: PPUSH
14644: LD_INT 135
14646: PUSH
14647: LD_INT 4
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 134
14656: PUSH
14657: LD_INT 19
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 132
14666: PUSH
14667: LD_INT 26
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 128
14676: PUSH
14677: LD_INT 31
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 123
14686: PUSH
14687: LD_INT 37
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 118
14696: PUSH
14697: LD_INT 45
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 112
14706: PUSH
14707: LD_INT 51
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 106
14716: PUSH
14717: LD_INT 57
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 99
14726: PUSH
14727: LD_INT 62
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 104
14736: PUSH
14737: LD_INT 71
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 110
14746: PUSH
14747: LD_INT 78
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: PPUSH
14767: LD_INT 0
14769: PPUSH
14770: LD_INT 1
14772: PPUSH
14773: LD_INT 11
14775: PPUSH
14776: CALL 4444 0 5
// end ;
14780: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
14781: LD_EXP 16
14785: PUSH
14786: LD_OWVAR 67
14790: PUSH
14791: LD_INT 3
14793: EQUAL
14794: AND
14795: PUSH
14796: LD_EXP 17
14800: PUSH
14801: LD_INT 0
14803: GREATEREQUAL
14804: AND
14805: PUSH
14806: LD_EXP 17
14810: PUSH
14811: LD_EXP 36
14815: LESS
14816: AND
14817: IFFALSE 15011
14819: GO 14821
14821: DISABLE
// begin PrepareArabianVehicles ;
14822: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
14826: LD_EXP 61
14830: PPUSH
14831: LD_INT 135
14833: PUSH
14834: LD_INT 4
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 134
14843: PUSH
14844: LD_INT 19
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 132
14853: PUSH
14854: LD_INT 26
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 128
14863: PUSH
14864: LD_INT 31
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 123
14873: PUSH
14874: LD_INT 37
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 118
14883: PUSH
14884: LD_INT 45
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 112
14893: PUSH
14894: LD_INT 51
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 106
14903: PUSH
14904: LD_INT 57
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 99
14913: PUSH
14914: LD_INT 62
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 104
14923: PUSH
14924: LD_INT 71
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 110
14933: PUSH
14934: LD_INT 78
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 119
14943: PUSH
14944: LD_INT 88
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 128
14953: PUSH
14954: LD_INT 97
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 135
14963: PUSH
14964: LD_INT 106
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 140
14973: PUSH
14974: LD_INT 153
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: PPUSH
14998: LD_INT 0
15000: PPUSH
15001: LD_INT 1
15003: PPUSH
15004: LD_INT 11
15006: PPUSH
15007: CALL 4444 0 5
// end ;
15011: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
15012: LD_EXP 16
15016: PUSH
15017: LD_EXP 17
15021: PUSH
15022: LD_INT 1
15024: EQUAL
15025: AND
15026: PUSH
15027: LD_EXP 17
15031: PUSH
15032: LD_EXP 36
15036: LESS
15037: AND
15038: IFFALSE 15115
15040: GO 15042
15042: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
15043: LD_INT 7
15045: PPUSH
15046: CALL 3495 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
15050: LD_EXP 61
15054: PPUSH
15055: LD_INT 157
15057: PUSH
15058: LD_INT 31
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: LD_INT 194
15067: PUSH
15068: LD_INT 124
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 174
15077: PUSH
15078: LD_INT 158
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 151
15087: PUSH
15088: LD_INT 164
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: PPUSH
15101: LD_INT 0
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: LD_INT 1
15109: NEG
15110: PPUSH
15111: CALL 4444 0 5
// end ;
15115: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
15116: LD_EXP 16
15120: PUSH
15121: LD_EXP 17
15125: PUSH
15126: LD_INT 1
15128: EQUAL
15129: AND
15130: PUSH
15131: LD_EXP 17
15135: PUSH
15136: LD_EXP 36
15140: LESS
15141: AND
15142: IFFALSE 15313
15144: GO 15146
15146: DISABLE
// begin wait ( 1 1$30 ) ;
15147: LD_INT 3150
15149: PPUSH
15150: CALL_OW 67
// currentWave = currentWave + 1 ;
15154: LD_ADDR_EXP 17
15158: PUSH
15159: LD_EXP 17
15163: PUSH
15164: LD_INT 1
15166: PLUS
15167: ST_TO_ADDR
// PrepareArabianVehicles ;
15168: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
15172: LD_EXP 61
15176: PPUSH
15177: LD_INT 135
15179: PUSH
15180: LD_INT 4
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 134
15189: PUSH
15190: LD_INT 19
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 132
15199: PUSH
15200: LD_INT 26
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 128
15209: PUSH
15210: LD_INT 31
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 123
15219: PUSH
15220: LD_INT 37
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 118
15229: PUSH
15230: LD_INT 45
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 112
15239: PUSH
15240: LD_INT 51
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 106
15249: PUSH
15250: LD_INT 57
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 99
15259: PUSH
15260: LD_INT 62
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 104
15269: PUSH
15270: LD_INT 71
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 110
15279: PUSH
15280: LD_INT 78
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: PPUSH
15300: LD_INT 0
15302: PPUSH
15303: LD_INT 1
15305: PPUSH
15306: LD_INT 11
15308: PPUSH
15309: CALL 4444 0 5
// end ;
15313: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
15314: LD_EXP 16
15318: PUSH
15319: LD_OWVAR 67
15323: PUSH
15324: LD_INT 2
15326: EQUAL
15327: AND
15328: PUSH
15329: LD_EXP 17
15333: PUSH
15334: LD_INT 1
15336: EQUAL
15337: AND
15338: PUSH
15339: LD_EXP 17
15343: PUSH
15344: LD_EXP 36
15348: LESS
15349: AND
15350: IFFALSE 15544
15352: GO 15354
15354: DISABLE
// begin PrepareArabianVehicles ;
15355: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15359: LD_EXP 61
15363: PPUSH
15364: LD_INT 135
15366: PUSH
15367: LD_INT 4
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 134
15376: PUSH
15377: LD_INT 19
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 132
15386: PUSH
15387: LD_INT 26
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 128
15396: PUSH
15397: LD_INT 31
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 123
15406: PUSH
15407: LD_INT 37
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 118
15416: PUSH
15417: LD_INT 45
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 112
15426: PUSH
15427: LD_INT 51
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 106
15436: PUSH
15437: LD_INT 57
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 99
15446: PUSH
15447: LD_INT 62
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 104
15456: PUSH
15457: LD_INT 71
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 110
15466: PUSH
15467: LD_INT 78
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 119
15476: PUSH
15477: LD_INT 88
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 128
15486: PUSH
15487: LD_INT 97
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 135
15496: PUSH
15497: LD_INT 106
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 140
15506: PUSH
15507: LD_INT 153
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: PPUSH
15531: LD_INT 0
15533: PPUSH
15534: LD_INT 1
15536: PPUSH
15537: LD_INT 11
15539: PPUSH
15540: CALL 4444 0 5
// end ;
15544: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
15545: LD_EXP 16
15549: PUSH
15550: LD_OWVAR 67
15554: PUSH
15555: LD_INT 3
15557: EQUAL
15558: AND
15559: PUSH
15560: LD_EXP 17
15564: PUSH
15565: LD_INT 1
15567: EQUAL
15568: AND
15569: PUSH
15570: LD_EXP 17
15574: PUSH
15575: LD_EXP 36
15579: LESS
15580: AND
15581: IFFALSE 15797
15583: GO 15585
15585: DISABLE
// begin PrepareArabianVehicles ;
15586: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15590: LD_EXP 61
15594: PPUSH
15595: LD_INT 135
15597: PUSH
15598: LD_INT 4
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 134
15607: PUSH
15608: LD_INT 19
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 132
15617: PUSH
15618: LD_INT 26
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 128
15627: PUSH
15628: LD_INT 31
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 123
15637: PUSH
15638: LD_INT 37
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: LD_INT 118
15647: PUSH
15648: LD_INT 45
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 112
15657: PUSH
15658: LD_INT 51
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 106
15667: PUSH
15668: LD_INT 57
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 99
15677: PUSH
15678: LD_INT 62
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 93
15687: PUSH
15688: LD_INT 67
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 86
15697: PUSH
15698: LD_INT 72
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 78
15707: PUSH
15708: LD_INT 75
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 71
15717: PUSH
15718: LD_INT 81
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 69
15727: PUSH
15728: LD_INT 88
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 71
15737: PUSH
15738: LD_INT 95
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 74
15747: PUSH
15748: LD_INT 103
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 80
15757: PUSH
15758: LD_INT 113
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: PPUSH
15784: LD_INT 0
15786: PPUSH
15787: LD_INT 1
15789: PPUSH
15790: LD_INT 11
15792: PPUSH
15793: CALL 4444 0 5
// end ;
15797: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
15798: LD_EXP 16
15802: PUSH
15803: LD_EXP 17
15807: PUSH
15808: LD_INT 2
15810: EQUAL
15811: AND
15812: PUSH
15813: LD_EXP 17
15817: PUSH
15818: LD_EXP 36
15822: LESS
15823: AND
15824: IFFALSE 15901
15826: GO 15828
15828: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
15829: LD_INT 7
15831: PPUSH
15832: CALL 3495 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
15836: LD_EXP 61
15840: PPUSH
15841: LD_INT 157
15843: PUSH
15844: LD_INT 31
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 194
15853: PUSH
15854: LD_INT 124
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 174
15863: PUSH
15864: LD_INT 158
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 151
15873: PUSH
15874: LD_INT 164
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: PPUSH
15887: LD_INT 0
15889: PPUSH
15890: LD_INT 1
15892: PPUSH
15893: LD_INT 1
15895: NEG
15896: PPUSH
15897: CALL 4444 0 5
// end ;
15901: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
15902: LD_EXP 16
15906: PUSH
15907: LD_EXP 17
15911: PUSH
15912: LD_INT 2
15914: EQUAL
15915: AND
15916: PUSH
15917: LD_EXP 17
15921: PUSH
15922: LD_EXP 36
15926: LESS
15927: AND
15928: IFFALSE 16165
15930: GO 15932
15932: DISABLE
// begin wait ( 1 1$30 ) ;
15933: LD_INT 3150
15935: PPUSH
15936: CALL_OW 67
// currentWave = currentWave + 1 ;
15940: LD_ADDR_EXP 17
15944: PUSH
15945: LD_EXP 17
15949: PUSH
15950: LD_INT 1
15952: PLUS
15953: ST_TO_ADDR
// PrepareArabianVehicles ;
15954: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15958: LD_EXP 61
15962: PPUSH
15963: LD_INT 135
15965: PUSH
15966: LD_INT 4
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 134
15975: PUSH
15976: LD_INT 19
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 132
15985: PUSH
15986: LD_INT 26
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 128
15995: PUSH
15996: LD_INT 31
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 123
16005: PUSH
16006: LD_INT 37
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 118
16015: PUSH
16016: LD_INT 45
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 112
16025: PUSH
16026: LD_INT 51
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: LD_INT 106
16035: PUSH
16036: LD_INT 57
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 99
16045: PUSH
16046: LD_INT 62
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 93
16055: PUSH
16056: LD_INT 67
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 86
16065: PUSH
16066: LD_INT 72
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 78
16075: PUSH
16076: LD_INT 75
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: LD_INT 71
16085: PUSH
16086: LD_INT 81
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 69
16095: PUSH
16096: LD_INT 88
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 71
16105: PUSH
16106: LD_INT 95
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 74
16115: PUSH
16116: LD_INT 103
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 80
16125: PUSH
16126: LD_INT 113
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: PPUSH
16152: LD_INT 0
16154: PPUSH
16155: LD_INT 1
16157: PPUSH
16158: LD_INT 11
16160: PPUSH
16161: CALL 4444 0 5
// end ;
16165: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
16166: LD_EXP 16
16170: PUSH
16171: LD_OWVAR 67
16175: PUSH
16176: LD_INT 2
16178: EQUAL
16179: AND
16180: PUSH
16181: LD_EXP 17
16185: PUSH
16186: LD_INT 2
16188: EQUAL
16189: AND
16190: PUSH
16191: LD_EXP 17
16195: PUSH
16196: LD_EXP 36
16200: LESS
16201: AND
16202: IFFALSE 16396
16204: GO 16206
16206: DISABLE
// begin PrepareArabianVehicles ;
16207: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16211: LD_EXP 61
16215: PPUSH
16216: LD_INT 135
16218: PUSH
16219: LD_INT 4
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 134
16228: PUSH
16229: LD_INT 19
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 132
16238: PUSH
16239: LD_INT 26
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 128
16248: PUSH
16249: LD_INT 31
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 123
16258: PUSH
16259: LD_INT 37
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 118
16268: PUSH
16269: LD_INT 45
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 112
16278: PUSH
16279: LD_INT 51
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 106
16288: PUSH
16289: LD_INT 57
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 99
16298: PUSH
16299: LD_INT 62
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 104
16308: PUSH
16309: LD_INT 71
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 110
16318: PUSH
16319: LD_INT 78
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 119
16328: PUSH
16329: LD_INT 88
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 128
16338: PUSH
16339: LD_INT 97
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 135
16348: PUSH
16349: LD_INT 106
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 140
16358: PUSH
16359: LD_INT 153
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: PPUSH
16383: LD_INT 0
16385: PPUSH
16386: LD_INT 1
16388: PPUSH
16389: LD_INT 11
16391: PPUSH
16392: CALL 4444 0 5
// end ;
16396: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
16397: LD_EXP 16
16401: PUSH
16402: LD_OWVAR 67
16406: PUSH
16407: LD_INT 3
16409: EQUAL
16410: AND
16411: PUSH
16412: LD_EXP 17
16416: PUSH
16417: LD_INT 2
16419: EQUAL
16420: AND
16421: PUSH
16422: LD_EXP 17
16426: PUSH
16427: LD_EXP 36
16431: LESS
16432: AND
16433: IFFALSE 16627
16435: GO 16437
16437: DISABLE
// begin PrepareArabianVehicles ;
16438: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16442: LD_EXP 61
16446: PPUSH
16447: LD_INT 135
16449: PUSH
16450: LD_INT 4
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 134
16459: PUSH
16460: LD_INT 19
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 132
16469: PUSH
16470: LD_INT 26
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 128
16479: PUSH
16480: LD_INT 31
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 123
16489: PUSH
16490: LD_INT 37
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 118
16499: PUSH
16500: LD_INT 45
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 112
16509: PUSH
16510: LD_INT 51
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 106
16519: PUSH
16520: LD_INT 57
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 99
16529: PUSH
16530: LD_INT 62
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 104
16539: PUSH
16540: LD_INT 71
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 110
16549: PUSH
16550: LD_INT 78
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 119
16559: PUSH
16560: LD_INT 88
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 128
16569: PUSH
16570: LD_INT 97
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 135
16579: PUSH
16580: LD_INT 106
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 140
16589: PUSH
16590: LD_INT 153
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: PPUSH
16614: LD_INT 0
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: LD_INT 11
16622: PPUSH
16623: CALL 4444 0 5
// end ;
16627: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
16628: LD_EXP 16
16632: PUSH
16633: LD_EXP 17
16637: PUSH
16638: LD_INT 3
16640: EQUAL
16641: AND
16642: PUSH
16643: LD_EXP 17
16647: PUSH
16648: LD_EXP 36
16652: LESS
16653: AND
16654: IFFALSE 16731
16656: GO 16658
16658: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16659: LD_INT 7
16661: PPUSH
16662: CALL 3495 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16666: LD_EXP 61
16670: PPUSH
16671: LD_INT 157
16673: PUSH
16674: LD_INT 31
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 194
16683: PUSH
16684: LD_INT 124
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 174
16693: PUSH
16694: LD_INT 158
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 151
16703: PUSH
16704: LD_INT 164
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: PPUSH
16717: LD_INT 0
16719: PPUSH
16720: LD_INT 1
16722: PPUSH
16723: LD_INT 1
16725: NEG
16726: PPUSH
16727: CALL 4444 0 5
// end ;
16731: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
16732: LD_EXP 16
16736: PUSH
16737: LD_EXP 17
16741: PUSH
16742: LD_INT 3
16744: EQUAL
16745: AND
16746: PUSH
16747: LD_EXP 17
16751: PUSH
16752: LD_EXP 36
16756: LESS
16757: AND
16758: IFFALSE 16995
16760: GO 16762
16762: DISABLE
// begin wait ( 1 1$30 ) ;
16763: LD_INT 3150
16765: PPUSH
16766: CALL_OW 67
// currentWave = currentWave + 1 ;
16770: LD_ADDR_EXP 17
16774: PUSH
16775: LD_EXP 17
16779: PUSH
16780: LD_INT 1
16782: PLUS
16783: ST_TO_ADDR
// PrepareArabianVehicles ;
16784: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16788: LD_EXP 61
16792: PPUSH
16793: LD_INT 135
16795: PUSH
16796: LD_INT 4
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 134
16805: PUSH
16806: LD_INT 19
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 132
16815: PUSH
16816: LD_INT 26
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 128
16825: PUSH
16826: LD_INT 31
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 123
16835: PUSH
16836: LD_INT 37
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 118
16845: PUSH
16846: LD_INT 45
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 112
16855: PUSH
16856: LD_INT 51
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 106
16865: PUSH
16866: LD_INT 57
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 99
16875: PUSH
16876: LD_INT 62
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 93
16885: PUSH
16886: LD_INT 67
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 86
16895: PUSH
16896: LD_INT 72
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 78
16905: PUSH
16906: LD_INT 75
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 71
16915: PUSH
16916: LD_INT 81
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 69
16925: PUSH
16926: LD_INT 88
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 71
16935: PUSH
16936: LD_INT 95
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 74
16945: PUSH
16946: LD_INT 103
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 80
16955: PUSH
16956: LD_INT 113
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: PPUSH
16982: LD_INT 0
16984: PPUSH
16985: LD_INT 1
16987: PPUSH
16988: LD_INT 11
16990: PPUSH
16991: CALL 4444 0 5
// end ;
16995: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
16996: LD_EXP 16
17000: PUSH
17001: LD_OWVAR 67
17005: PUSH
17006: LD_INT 2
17008: EQUAL
17009: AND
17010: PUSH
17011: LD_EXP 17
17015: PUSH
17016: LD_INT 3
17018: EQUAL
17019: AND
17020: PUSH
17021: LD_EXP 17
17025: PUSH
17026: LD_EXP 36
17030: LESS
17031: AND
17032: IFFALSE 17226
17034: GO 17036
17036: DISABLE
// begin PrepareArabianVehicles ;
17037: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17041: LD_EXP 61
17045: PPUSH
17046: LD_INT 135
17048: PUSH
17049: LD_INT 4
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 134
17058: PUSH
17059: LD_INT 19
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 132
17068: PUSH
17069: LD_INT 26
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 128
17078: PUSH
17079: LD_INT 31
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 123
17088: PUSH
17089: LD_INT 37
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 118
17098: PUSH
17099: LD_INT 45
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 112
17108: PUSH
17109: LD_INT 51
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 106
17118: PUSH
17119: LD_INT 57
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 99
17128: PUSH
17129: LD_INT 62
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: LD_INT 104
17138: PUSH
17139: LD_INT 71
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 110
17148: PUSH
17149: LD_INT 78
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 119
17158: PUSH
17159: LD_INT 88
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 128
17168: PUSH
17169: LD_INT 97
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 135
17178: PUSH
17179: LD_INT 106
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 140
17188: PUSH
17189: LD_INT 153
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: PPUSH
17213: LD_INT 0
17215: PPUSH
17216: LD_INT 1
17218: PPUSH
17219: LD_INT 11
17221: PPUSH
17222: CALL 4444 0 5
// end ;
17226: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
17227: LD_EXP 16
17231: PUSH
17232: LD_OWVAR 67
17236: PUSH
17237: LD_INT 3
17239: EQUAL
17240: AND
17241: PUSH
17242: LD_EXP 17
17246: PUSH
17247: LD_INT 3
17249: EQUAL
17250: AND
17251: PUSH
17252: LD_EXP 17
17256: PUSH
17257: LD_EXP 36
17261: LESS
17262: AND
17263: IFFALSE 17457
17265: GO 17267
17267: DISABLE
// begin PrepareArabianVehicles ;
17268: CALL 3205 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17272: LD_EXP 61
17276: PPUSH
17277: LD_INT 135
17279: PUSH
17280: LD_INT 4
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 134
17289: PUSH
17290: LD_INT 19
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 132
17299: PUSH
17300: LD_INT 26
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 128
17309: PUSH
17310: LD_INT 31
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 123
17319: PUSH
17320: LD_INT 37
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 118
17329: PUSH
17330: LD_INT 45
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 112
17339: PUSH
17340: LD_INT 51
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 106
17349: PUSH
17350: LD_INT 57
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 99
17359: PUSH
17360: LD_INT 62
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 104
17369: PUSH
17370: LD_INT 71
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 110
17379: PUSH
17380: LD_INT 78
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 119
17389: PUSH
17390: LD_INT 88
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 128
17399: PUSH
17400: LD_INT 97
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 135
17409: PUSH
17410: LD_INT 106
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 140
17419: PUSH
17420: LD_INT 153
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PPUSH
17444: LD_INT 0
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_INT 11
17452: PPUSH
17453: CALL 4444 0 5
// end ;
17457: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
17458: LD_EXP 52
17462: PPUSH
17463: CALL_OW 305
17467: PUSH
17468: LD_EXP 21
17472: PUSH
17473: LD_INT 5
17475: LESS
17476: AND
17477: IFFALSE 17487
17479: GO 17481
17481: DISABLE
// begin PrepareArabianKiller ;
17482: CALL 3714 0 0
// enable ;
17486: ENABLE
// end ; end_of_file
17487: END
// export function SetAchievements ; begin
17488: LD_INT 0
17490: PPUSH
// if stealWarmCount = 0 then
17491: LD_EXP 11
17495: PUSH
17496: LD_INT 0
17498: EQUAL
17499: IFFALSE 17508
// SetAchievement ( ACH_ENO ) ;
17501: LD_STRING ACH_ENO
17503: PPUSH
17504: CALL_OW 543
// end ;
17508: LD_VAR 0 1
17512: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
17513: LD_EXP 23
17517: PUSH
17518: LD_INT 6
17520: GREATEREQUAL
17521: IFFALSE 17533
17523: GO 17525
17525: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
17526: LD_STRING ACH_DEFENSE
17528: PPUSH
17529: CALL_OW 543
17533: END
// every 1 trigger killedArabianUnits >= 10 do
17534: LD_EXP 20
17538: PUSH
17539: LD_INT 10
17541: GREATEREQUAL
17542: IFFALSE 17554
17544: GO 17546
17546: DISABLE
// SetAchievement ( ACH_ARAB ) ;
17547: LD_STRING ACH_ARAB
17549: PPUSH
17550: CALL_OW 543
17554: END
