// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 232 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// canExitMap = false ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// arabianCanExitMap = false ;
  88: LD_ADDR_EXP 6
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// namedBase = false ;
  96: LD_ADDR_EXP 8
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// startEvacuation = false ;
 104: LD_ADDR_EXP 7
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// stealCargos = [ ] ;
 112: LD_ADDR_EXP 12
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// stealWarmCount = 0 ;
 119: LD_ADDR_EXP 11
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// evacuatedCargos = 0 ;
 127: LD_ADDR_EXP 9
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// canStealCargo = false ;
 135: LD_ADDR_EXP 10
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 143: LD_ADDR_EXP 14
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_contactBlock = false ;
 151: LD_ADDR_EXP 15
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// currentWave = 0 ;
 159: LD_ADDR_EXP 17
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// saveGaydar = false ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 175: LD_ADDR_EXP 19
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// killedArabianUnits = 0 ;
 183: LD_ADDR_EXP 20
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// arabianKillers = 0 ;
 191: LD_ADDR_EXP 21
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostUnits = 0 ;
 199: LD_ADDR_EXP 22
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// enableAttacks = false ;
 207: LD_ADDR_EXP 16
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// PrepareRussians ;
 215: CALL 1473 0 0
// Nef_PrepareNature ;
 219: CALL 3599 0 0
// MissionIntro ;
 223: CALL 8657 0 0
// end ; end_of_file
 227: LD_VAR 0 1
 231: RET
// export function InitMapConfig ; begin
 232: LD_INT 0
 234: PPUSH
// BaseMapConfig ;
 235: CALL 248 0 0
// MissionMapConfig ;
 239: CALL 350 0 0
// end ;
 243: LD_VAR 0 1
 247: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 248: LD_INT 0
 250: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 251: LD_ADDR_EXP 23
 255: PUSH
 256: LD_INT 8
 258: PUSH
 259: LD_INT 12
 261: PUSH
 262: LD_INT 6
 264: PUSH
 265: LD_INT 6
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: LIST
 275: LIST
 276: LIST
 277: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 278: LD_ADDR_EXP 24
 282: PUSH
 283: LD_INT 2
 285: PUSH
 286: LD_INT 2
 288: PUSH
 289: LD_INT 2
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 301: LD_ADDR_EXP 25
 305: PUSH
 306: LD_INT 5
 308: NEG
 309: PPUSH
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 12
 317: PUSH
 318: EMPTY
 319: LIST
 320: ST_TO_ADDR
// debugMode = 0 ;
 321: LD_ADDR_EXP 28
 325: PUSH
 326: LD_INT 0
 328: ST_TO_ADDR
// missionPrefix = 04_ ;
 329: LD_ADDR_EXP 26
 333: PUSH
 334: LD_STRING 04_
 336: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 337: LD_ADDR_EXP 27
 341: PUSH
 342: LD_STRING 03_
 344: ST_TO_ADDR
// end ;
 345: LD_VAR 0 1
 349: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles , enemyGroupHumans ; function MissionMapConfig ; begin
 350: LD_INT 0
 352: PPUSH
// enemySkillLevel = [ 2 , 3 , 4 ] [ Difficulty ] ;
 353: LD_ADDR_EXP 29
 357: PUSH
 358: LD_INT 2
 360: PUSH
 361: LD_INT 3
 363: PUSH
 364: LD_INT 4
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: LIST
 371: PUSH
 372: LD_OWVAR 67
 376: ARRAY
 377: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 378: LD_ADDR_EXP 30
 382: PUSH
 383: LD_INT 2
 385: NEG
 386: PUSH
 387: LD_INT 1
 389: NEG
 390: PUSH
 391: LD_INT 0
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: PUSH
 399: LD_OWVAR 67
 403: ARRAY
 404: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 405: LD_ADDR_EXP 31
 409: PUSH
 410: LD_INT 135
 412: PUSH
 413: LD_INT 8
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: LD_INT 135
 422: PUSH
 423: LD_INT 4
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: PUSH
 430: LD_INT 134
 432: PUSH
 433: LD_INT 19
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 132
 442: PUSH
 443: LD_INT 26
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 128
 452: PUSH
 453: LD_INT 31
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 123
 462: PUSH
 463: LD_INT 37
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 118
 472: PUSH
 473: LD_INT 45
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: LD_INT 112
 482: PUSH
 483: LD_INT 51
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 106
 492: PUSH
 493: LD_INT 57
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 99
 502: PUSH
 503: LD_INT 62
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: LD_INT 93
 512: PUSH
 513: LD_INT 67
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: PUSH
 520: LD_INT 86
 522: PUSH
 523: LD_INT 72
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 78
 532: PUSH
 533: LD_INT 75
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 71
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 69
 552: PUSH
 553: LD_INT 88
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 71
 562: PUSH
 563: LD_INT 95
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 74
 572: PUSH
 573: LD_INT 103
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 80
 582: PUSH
 583: LD_INT 113
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 84
 592: PUSH
 593: LD_INT 121
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 89
 602: PUSH
 603: LD_INT 132
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 92
 612: PUSH
 613: LD_INT 142
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 93
 622: PUSH
 623: LD_INT 151
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 91
 632: PUSH
 633: LD_INT 157
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 90
 642: PUSH
 643: LD_INT 163
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 93
 652: PUSH
 653: LD_INT 171
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 92
 662: PUSH
 663: LD_INT 177
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 698: LD_ADDR_EXP 32
 702: PUSH
 703: LD_INT 135
 705: PUSH
 706: LD_INT 8
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 135
 715: PUSH
 716: LD_INT 4
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 134
 725: PUSH
 726: LD_INT 19
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 132
 735: PUSH
 736: LD_INT 26
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 128
 745: PUSH
 746: LD_INT 31
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 123
 755: PUSH
 756: LD_INT 37
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PUSH
 763: LD_INT 118
 765: PUSH
 766: LD_INT 45
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 112
 775: PUSH
 776: LD_INT 51
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: LD_INT 106
 785: PUSH
 786: LD_INT 57
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: LD_INT 99
 795: PUSH
 796: LD_INT 62
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 104
 805: PUSH
 806: LD_INT 71
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 110
 815: PUSH
 816: LD_INT 78
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 119
 825: PUSH
 826: LD_INT 88
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 128
 835: PUSH
 836: LD_INT 97
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 135
 845: PUSH
 846: LD_INT 106
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 141
 855: PUSH
 856: LD_INT 120
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: LD_INT 143
 865: PUSH
 866: LD_INT 132
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 143
 875: PUSH
 876: LD_INT 142
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 140
 885: PUSH
 886: LD_INT 149
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 132
 895: PUSH
 896: LD_INT 153
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 125
 905: PUSH
 906: LD_INT 155
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 115
 915: PUSH
 916: LD_INT 154
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: LD_INT 105
 925: PUSH
 926: LD_INT 153
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_INT 93
 935: PUSH
 936: LD_INT 151
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 91
 945: PUSH
 946: LD_INT 157
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PUSH
 953: LD_INT 90
 955: PUSH
 956: LD_INT 163
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 93
 965: PUSH
 966: LD_INT 171
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 92
 975: PUSH
 976: LD_INT 177
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1013: LD_ADDR_EXP 33
1017: PUSH
1018: LD_INT 40
1020: PUSH
1021: LD_INT 35
1023: PUSH
1024: LD_INT 30
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_OWVAR 67
1036: ARRAY
1037: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1038: LD_ADDR_EXP 34
1042: PUSH
1043: LD_INT 50
1045: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1046: LD_ADDR_EXP 13
1050: PUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 19
1056: PUSH
1057: LD_INT 17
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_OWVAR 67
1069: ARRAY
1070: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1071: LD_ADDR_EXP 35
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: LD_INT 4
1081: PUSH
1082: LD_INT 4
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_OWVAR 67
1094: ARRAY
1095: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1096: LD_ADDR_EXP 36
1100: PUSH
1101: LD_INT 3
1103: PUSH
1104: LD_INT 4
1106: PUSH
1107: LD_INT 4
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_OWVAR 67
1119: ARRAY
1120: ST_TO_ADDR
// enemyGroupHumans = [ 5 , 6 , 7 ] [ Difficulty ] ;
1121: LD_ADDR_EXP 37
1125: PUSH
1126: LD_INT 5
1128: PUSH
1129: LD_INT 6
1131: PUSH
1132: LD_INT 7
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_OWVAR 67
1144: ARRAY
1145: ST_TO_ADDR
// end ;
1146: LD_VAR 0 1
1150: RET
// every 0 0$1 trigger debugMode do var i ;
1151: LD_EXP 28
1155: IFFALSE 1470
1157: GO 1159
1159: DISABLE
1160: LD_INT 0
1162: PPUSH
// begin enable ;
1163: ENABLE
// FogOff ( your_side ) ;
1164: LD_OWVAR 2
1168: PPUSH
1169: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1173: LD_ADDR_VAR 0 1
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_OWVAR 2
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 2
1192: PUSH
1193: LD_INT 21
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 21
1205: PUSH
1206: LD_INT 2
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: PPUSH
1222: CALL_OW 69
1226: PUSH
1227: FOR_IN
1228: IFFALSE 1244
// SetLives ( i , 1000 ) ;
1230: LD_VAR 0 1
1234: PPUSH
1235: LD_INT 1000
1237: PPUSH
1238: CALL_OW 234
1242: GO 1227
1244: POP
1245: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1246: LD_ADDR_VAR 0 1
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_OWVAR 2
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 21
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 69
1281: PUSH
1282: FOR_IN
1283: IFFALSE 1347
// begin SetSkill ( i , skill_combat , 10 ) ;
1285: LD_VAR 0 1
1289: PPUSH
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 10
1295: PPUSH
1296: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 2
1307: PPUSH
1308: LD_INT 10
1310: PPUSH
1311: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1315: LD_VAR 0 1
1319: PPUSH
1320: LD_INT 3
1322: PPUSH
1323: LD_INT 10
1325: PPUSH
1326: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 10
1340: PPUSH
1341: CALL_OW 237
// end ;
1345: GO 1282
1347: POP
1348: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1349: LD_ADDR_VAR 0 1
1353: PUSH
1354: LD_INT 22
1356: PUSH
1357: LD_OWVAR 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 2
1368: PUSH
1369: LD_INT 30
1371: PUSH
1372: LD_INT 0
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 30
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: LIST
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PPUSH
1398: CALL_OW 69
1402: PUSH
1403: FOR_IN
1404: IFFALSE 1468
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1406: LD_VAR 0 1
1410: PPUSH
1411: CALL_OW 274
1415: PPUSH
1416: LD_INT 1
1418: PPUSH
1419: LD_INT 9999
1421: PPUSH
1422: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1426: LD_VAR 0 1
1430: PPUSH
1431: CALL_OW 274
1435: PPUSH
1436: LD_INT 2
1438: PPUSH
1439: LD_INT 9999
1441: PPUSH
1442: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1446: LD_VAR 0 1
1450: PPUSH
1451: CALL_OW 274
1455: PPUSH
1456: LD_INT 3
1458: PPUSH
1459: LD_INT 9999
1461: PPUSH
1462: CALL_OW 277
// end ;
1466: GO 1403
1468: POP
1469: POP
// end ; end_of_file
1470: PPOPN 1
1472: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam ; export dialogRus ; export firstCargo ; export randomsToSave ; export function PrepareRussians ; begin
1473: LD_INT 0
1475: PPUSH
// randomsToSave = [ ] ;
1476: LD_ADDR_EXP 55
1480: PUSH
1481: EMPTY
1482: ST_TO_ADDR
// PrepareHeroes ;
1483: CALL 1492 0 0
// end ;
1487: LD_VAR 0 1
1491: RET
// function PrepareHeroes ; var i , current ; begin
1492: LD_INT 0
1494: PPUSH
1495: PPUSH
1496: PPUSH
// uc_side = 3 ;
1497: LD_ADDR_OWVAR 20
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// uc_nation = 3 ;
1505: LD_ADDR_OWVAR 21
1509: PUSH
1510: LD_INT 3
1512: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1513: LD_ADDR_EXP 38
1517: PUSH
1518: LD_STRING Burlak
1520: PPUSH
1521: LD_INT 1
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: CALL 7697 0 3
1531: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1532: LD_ADDR_EXP 39
1536: PUSH
1537: LD_STRING Gnyevko
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 3
1545: PPUSH
1546: CALL 7697 0 3
1550: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1551: LD_ADDR_EXP 41
1555: PUSH
1556: LD_STRING Kovalyuk
1558: PPUSH
1559: LD_INT 1
1561: PPUSH
1562: LD_INT 3
1564: PPUSH
1565: CALL 7697 0 3
1569: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1570: LD_ADDR_EXP 40
1574: PUSH
1575: LD_STRING Kirilenkova
1577: PPUSH
1578: LD_INT 1
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: CALL 7697 0 3
1588: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1589: LD_ADDR_EXP 42
1593: PUSH
1594: LD_STRING Belkov
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: CALL 7697 0 3
1607: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1608: LD_ADDR_EXP 43
1612: PUSH
1613: LD_STRING Belkov2
1615: PPUSH
1616: LD_INT 1
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: CALL 7697 0 3
1626: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1627: LD_ADDR_EXP 44
1631: PUSH
1632: LD_STRING Scholtze
1634: PPUSH
1635: LD_INT 1
1637: PPUSH
1638: LD_INT 4
1640: PPUSH
1641: CALL 7697 0 3
1645: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1646: LD_ADDR_EXP 48
1650: PUSH
1651: LD_STRING Popov
1653: PPUSH
1654: LD_INT 0
1656: PPUSH
1657: LD_INT 0
1659: PPUSH
1660: CALL 7697 0 3
1664: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1665: LD_ADDR_EXP 49
1669: PUSH
1670: LD_STRING Platonov
1672: PPUSH
1673: LD_INT 0
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL 7697 0 3
1683: ST_TO_ADDR
// uc_side = 6 ;
1684: LD_ADDR_OWVAR 20
1688: PUSH
1689: LD_INT 6
1691: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1692: LD_ADDR_EXP 50
1696: PUSH
1697: LD_STRING Gaydar
1699: PPUSH
1700: LD_INT 0
1702: PPUSH
1703: LD_INT 0
1705: PPUSH
1706: CALL 7697 0 3
1710: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1711: LD_ADDR_EXP 45
1715: PUSH
1716: LD_STRING Kuzmov
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL 7697 0 3
1729: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1730: LD_EXP 45
1734: PPUSH
1735: LD_INT 109
1737: PPUSH
1738: LD_INT 108
1740: PPUSH
1741: LD_INT 5
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL_OW 50
// ComHold ( Kuzmov ) ;
1751: LD_EXP 45
1755: PPUSH
1756: CALL_OW 140
// uc_side = 3 ;
1760: LD_ADDR_OWVAR 20
1764: PUSH
1765: LD_INT 3
1767: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1768: LD_EXP 38
1772: PUSH
1773: LD_EXP 39
1777: PUSH
1778: LD_EXP 40
1782: PUSH
1783: LD_EXP 41
1787: PUSH
1788: LD_EXP 42
1792: PUSH
1793: LD_EXP 43
1797: PUSH
1798: LD_EXP 44
1802: PUSH
1803: LD_EXP 48
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_INT 2
1820: PPUSH
1821: LD_INT 0
1823: PPUSH
1824: CALL 7780 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1828: LD_ADDR_EXP 46
1832: PUSH
1833: LD_STRING 03_other_survivors
1835: PPUSH
1836: CALL_OW 31
1840: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1841: LD_ADDR_EXP 47
1845: PUSH
1846: LD_STRING 03_other_kirov
1848: PPUSH
1849: CALL_OW 31
1853: ST_TO_ADDR
// for i in other_survivors do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_EXP 46
1863: PUSH
1864: FOR_IN
1865: IFFALSE 1884
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
1882: GO 1864
1884: POP
1885: POP
// for i in other_kirov_survivors do
1886: LD_ADDR_VAR 0 2
1890: PUSH
1891: LD_EXP 47
1895: PUSH
1896: FOR_IN
1897: IFFALSE 1916
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1899: LD_VAR 0 2
1903: PPUSH
1904: LD_INT 2
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 49
1914: GO 1896
1916: POP
1917: POP
// PrepareSoldier ( sex_male , 1 ) ;
1918: LD_INT 1
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL_OW 381
// dialogRus = CreateHuman ;
1928: LD_ADDR_EXP 53
1932: PUSH
1933: CALL_OW 44
1937: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
1938: LD_EXP 46
1942: PUSH
1943: LD_EXP 47
1947: PLUS
1948: PUSH
1949: LD_EXP 39
1953: PUSH
1954: LD_EXP 40
1958: PUSH
1959: LD_EXP 41
1963: PUSH
1964: LD_EXP 42
1968: PUSH
1969: LD_EXP 43
1973: PUSH
1974: LD_EXP 44
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: PLUS
1987: PUSH
1988: LD_INT 8
1990: LESS
1991: IFFALSE 2144
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
1993: LD_ADDR_VAR 0 3
1997: PUSH
1998: LD_EXP 46
2002: PUSH
2003: LD_EXP 47
2007: PLUS
2008: PUSH
2009: LD_EXP 39
2013: PUSH
2014: LD_EXP 40
2018: PUSH
2019: LD_EXP 41
2023: PUSH
2024: LD_EXP 42
2028: PUSH
2029: LD_EXP 43
2033: PUSH
2034: LD_EXP 44
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: PLUS
2047: ST_TO_ADDR
// current = 8 - current ;
2048: LD_ADDR_VAR 0 3
2052: PUSH
2053: LD_INT 8
2055: PUSH
2056: LD_VAR 0 3
2060: MINUS
2061: ST_TO_ADDR
// for i := 1 to current do
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: DOUBLE
2068: LD_INT 1
2070: DEC
2071: ST_TO_ADDR
2072: LD_VAR 0 3
2076: PUSH
2077: FOR_TO
2078: IFFALSE 2142
// begin uc_nation = 3 ;
2080: LD_ADDR_OWVAR 21
2084: PUSH
2085: LD_INT 3
2087: ST_TO_ADDR
// uc_side = 6 ;
2088: LD_ADDR_OWVAR 20
2092: PUSH
2093: LD_INT 6
2095: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2096: LD_INT 0
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 4
2104: PPUSH
2105: CALL_OW 12
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 3
2115: PPUSH
2116: CALL_OW 12
2120: PPUSH
2121: CALL_OW 380
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2125: CALL_OW 44
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ;
2140: GO 2077
2142: POP
2143: POP
// end ; end ;
2144: LD_VAR 0 1
2148: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
// rnd = rand ( 1 , 4 ) ;
2158: LD_ADDR_VAR 0 3
2162: PUSH
2163: LD_INT 1
2165: PPUSH
2166: LD_INT 4
2168: PPUSH
2169: CALL_OW 12
2173: ST_TO_ADDR
// uc_side = 6 ;
2174: LD_ADDR_OWVAR 20
2178: PUSH
2179: LD_INT 6
2181: ST_TO_ADDR
// uc_nation = 3 ;
2182: LD_ADDR_OWVAR 21
2186: PUSH
2187: LD_INT 3
2189: ST_TO_ADDR
// if rnd < 4 then
2190: LD_VAR 0 3
2194: PUSH
2195: LD_INT 4
2197: LESS
2198: IFFALSE 2574
// begin vc_chassis = ru_medium_wheeled ;
2200: LD_ADDR_OWVAR 37
2204: PUSH
2205: LD_INT 21
2207: ST_TO_ADDR
// vc_control = control_manual ;
2208: LD_ADDR_OWVAR 38
2212: PUSH
2213: LD_INT 1
2215: ST_TO_ADDR
// vc_engine = engine_combustion ;
2216: LD_ADDR_OWVAR 39
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2224: LD_ADDR_VAR 0 5
2228: PUSH
2229: LD_INT 1
2231: PPUSH
2232: LD_INT 100
2234: PPUSH
2235: CALL_OW 12
2239: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2240: LD_VAR 0 5
2244: PUSH
2245: LD_EXP 34
2249: PUSH
2250: LD_INT 1
2252: PLUS
2253: LESS
2254: IFFALSE 2266
// vc_weapon = ru_cargo_bay else
2256: LD_ADDR_OWVAR 40
2260: PUSH
2261: LD_INT 51
2263: ST_TO_ADDR
2264: GO 2297
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2266: LD_ADDR_OWVAR 40
2270: PUSH
2271: LD_INT 42
2273: PUSH
2274: LD_INT 43
2276: PUSH
2277: LD_INT 44
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 1
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: CALL_OW 12
2295: ARRAY
2296: ST_TO_ADDR
// vehicle = CreateVehicle ;
2297: LD_ADDR_VAR 0 7
2301: PUSH
2302: CALL_OW 45
2306: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2307: LD_VAR 0 7
2311: PPUSH
2312: LD_INT 3
2314: PPUSH
2315: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2319: LD_VAR 0 7
2323: PPUSH
2324: LD_INT 3
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2334: LD_INT 0
2336: PPUSH
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: CALL_OW 12
2347: PPUSH
2348: LD_INT 2
2350: PPUSH
2351: LD_INT 3
2353: PPUSH
2354: CALL_OW 12
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 7
2372: PPUSH
2373: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2377: LD_OWVAR 40
2381: PUSH
2382: LD_INT 51
2384: EQUAL
2385: IFFALSE 2402
// AddCargo ( vehicle , mat_cans , 100 ) ;
2387: LD_VAR 0 7
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: LD_INT 100
2397: PPUSH
2398: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2402: LD_VAR 0 7
2406: PPUSH
2407: LD_INT 500
2409: PPUSH
2410: LD_INT 1000
2412: PPUSH
2413: CALL_OW 12
2417: PPUSH
2418: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2422: LD_ADDR_VAR 0 3
2426: PUSH
2427: LD_INT 1
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: CALL_OW 12
2437: ST_TO_ADDR
// if rnd = 1 then
2438: LD_VAR 0 3
2442: PUSH
2443: LD_INT 1
2445: EQUAL
2446: IFFALSE 2511
// for i := 3 to russianCargoPath1 do
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: DOUBLE
2454: LD_INT 3
2456: DEC
2457: ST_TO_ADDR
2458: LD_EXP 31
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2507
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2466: LD_VAR 0 7
2470: PPUSH
2471: LD_EXP 31
2475: PUSH
2476: LD_VAR 0 2
2480: ARRAY
2481: PUSH
2482: LD_INT 1
2484: ARRAY
2485: PPUSH
2486: LD_EXP 31
2490: PUSH
2491: LD_VAR 0 2
2495: ARRAY
2496: PUSH
2497: LD_INT 2
2499: ARRAY
2500: PPUSH
2501: CALL_OW 171
2505: GO 2463
2507: POP
2508: POP
2509: GO 2572
// for i := 3 to russianCargoPath2 do
2511: LD_ADDR_VAR 0 2
2515: PUSH
2516: DOUBLE
2517: LD_INT 3
2519: DEC
2520: ST_TO_ADDR
2521: LD_EXP 32
2525: PUSH
2526: FOR_TO
2527: IFFALSE 2570
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2529: LD_VAR 0 7
2533: PPUSH
2534: LD_EXP 32
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: PUSH
2545: LD_INT 1
2547: ARRAY
2548: PPUSH
2549: LD_EXP 32
2553: PUSH
2554: LD_VAR 0 2
2558: ARRAY
2559: PUSH
2560: LD_INT 2
2562: ARRAY
2563: PPUSH
2564: CALL_OW 171
2568: GO 2526
2570: POP
2571: POP
// end else
2572: GO 2928
// begin for i := 1 to rand ( 1 , 3 ) do
2574: LD_ADDR_VAR 0 2
2578: PUSH
2579: DOUBLE
2580: LD_INT 1
2582: DEC
2583: ST_TO_ADDR
2584: LD_INT 1
2586: PPUSH
2587: LD_INT 3
2589: PPUSH
2590: CALL_OW 12
2594: PUSH
2595: FOR_TO
2596: IFFALSE 2674
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2598: LD_INT 0
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 4
2606: PPUSH
2607: CALL_OW 12
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: LD_INT 3
2617: PPUSH
2618: CALL_OW 12
2622: PPUSH
2623: CALL_OW 380
// unit = CreateHuman ;
2627: LD_ADDR_VAR 0 6
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
2637: LD_VAR 0 6
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
2652: LD_VAR 0 6
2656: PPUSH
2657: LD_INT 500
2659: PPUSH
2660: LD_INT 1000
2662: PPUSH
2663: CALL_OW 12
2667: PPUSH
2668: CALL_OW 234
// end ;
2672: GO 2595
2674: POP
2675: POP
// rnd2 = rand ( 1 , 2 ) ;
2676: LD_ADDR_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 2
2686: PPUSH
2687: CALL_OW 12
2691: ST_TO_ADDR
// if rnd2 = 1 then
2692: LD_VAR 0 4
2696: PUSH
2697: LD_INT 1
2699: EQUAL
2700: IFFALSE 2816
// for i := 3 to russianCargoPath1 do
2702: LD_ADDR_VAR 0 2
2706: PUSH
2707: DOUBLE
2708: LD_INT 3
2710: DEC
2711: ST_TO_ADDR
2712: LD_EXP 31
2716: PUSH
2717: FOR_TO
2718: IFFALSE 2812
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2720: LD_INT 22
2722: PUSH
2723: LD_INT 6
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 21
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 56
2742: PUSH
2743: EMPTY
2744: LIST
2745: PUSH
2746: LD_INT 3
2748: PUSH
2749: LD_INT 60
2751: PUSH
2752: EMPTY
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 69
2769: PUSH
2770: LD_EXP 52
2774: DIFF
2775: PPUSH
2776: LD_EXP 31
2780: PUSH
2781: LD_VAR 0 2
2785: ARRAY
2786: PUSH
2787: LD_INT 1
2789: ARRAY
2790: PPUSH
2791: LD_EXP 31
2795: PUSH
2796: LD_VAR 0 2
2800: ARRAY
2801: PUSH
2802: LD_INT 2
2804: ARRAY
2805: PPUSH
2806: CALL_OW 171
2810: GO 2717
2812: POP
2813: POP
2814: GO 2928
// for i := 3 to russianCargoPath2 do
2816: LD_ADDR_VAR 0 2
2820: PUSH
2821: DOUBLE
2822: LD_INT 3
2824: DEC
2825: ST_TO_ADDR
2826: LD_EXP 32
2830: PUSH
2831: FOR_TO
2832: IFFALSE 2926
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2834: LD_INT 22
2836: PUSH
2837: LD_INT 6
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: PUSH
2844: LD_INT 21
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 56
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: LD_INT 60
2865: PUSH
2866: EMPTY
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: LD_EXP 52
2888: DIFF
2889: PPUSH
2890: LD_EXP 32
2894: PUSH
2895: LD_VAR 0 2
2899: ARRAY
2900: PUSH
2901: LD_INT 1
2903: ARRAY
2904: PPUSH
2905: LD_EXP 32
2909: PUSH
2910: LD_VAR 0 2
2914: ARRAY
2915: PUSH
2916: LD_INT 2
2918: ARRAY
2919: PPUSH
2920: CALL_OW 171
2924: GO 2831
2926: POP
2927: POP
// end ; end ; end_of_file
2928: LD_VAR 0 1
2932: RET
// export Heike ; export function PrepareHeike ; begin
2933: LD_INT 0
2935: PPUSH
// uc_side = 2 ;
2936: LD_ADDR_OWVAR 20
2940: PUSH
2941: LD_INT 2
2943: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
2944: LD_ADDR_EXP 56
2948: PUSH
2949: LD_STRING Heike
2951: PPUSH
2952: LD_INT 0
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 7697 0 3
2962: ST_TO_ADDR
// if Difficulty >= 2 then
2963: LD_OWVAR 67
2967: PUSH
2968: LD_INT 2
2970: GREATEREQUAL
2971: IFFALSE 2986
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2973: LD_INT 51
2975: PPUSH
2976: LD_INT 2
2978: PPUSH
2979: LD_INT 2
2981: PPUSH
2982: CALL_OW 322
// end ;
2986: LD_VAR 0 1
2990: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
2991: LD_INT 0
2993: PPUSH
2994: PPUSH
2995: PPUSH
// currentEnemyGroup = [ ] ;
2996: LD_ADDR_EXP 57
3000: PUSH
3001: EMPTY
3002: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3003: LD_ADDR_VAR 0 2
3007: PUSH
3008: DOUBLE
3009: LD_INT 1
3011: DEC
3012: ST_TO_ADDR
3013: LD_EXP 36
3017: PUSH
3018: FOR_TO
3019: IFFALSE 3274
// begin uc_side = 2 ;
3021: LD_ADDR_OWVAR 20
3025: PUSH
3026: LD_INT 2
3028: ST_TO_ADDR
// uc_nation = nation_arabian ;
3029: LD_ADDR_OWVAR 21
3033: PUSH
3034: LD_INT 2
3036: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3037: LD_ADDR_OWVAR 40
3041: PUSH
3042: LD_INT 23
3044: PUSH
3045: LD_INT 24
3047: PUSH
3048: LD_INT 25
3050: PUSH
3051: LD_INT 26
3053: PUSH
3054: LD_INT 27
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 5
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3076: LD_OWVAR 40
3080: PUSH
3081: LD_INT 25
3083: PUSH
3084: LD_INT 26
3086: PUSH
3087: LD_INT 27
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: IN
3095: IFFALSE 3126
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3097: LD_ADDR_OWVAR 37
3101: PUSH
3102: LD_INT 13
3104: PUSH
3105: LD_INT 14
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_INT 2
3117: PPUSH
3118: CALL_OW 12
3122: ARRAY
3123: ST_TO_ADDR
3124: GO 3157
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3126: LD_ADDR_OWVAR 37
3130: PUSH
3131: LD_INT 12
3133: PUSH
3134: LD_INT 13
3136: PUSH
3137: LD_INT 14
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 1
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: CALL_OW 12
3155: ARRAY
3156: ST_TO_ADDR
// vc_control = control_manual ;
3157: LD_ADDR_OWVAR 38
3161: PUSH
3162: LD_INT 1
3164: ST_TO_ADDR
// vc_engine = engine_combustion ;
3165: LD_ADDR_OWVAR 39
3169: PUSH
3170: LD_INT 1
3172: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3173: LD_ADDR_OWVAR 41
3177: PUSH
3178: LD_INT 100
3180: ST_TO_ADDR
// veh = CreateVehicle ;
3181: LD_ADDR_VAR 0 3
3185: PUSH
3186: CALL_OW 45
3190: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3191: LD_ADDR_EXP 57
3195: PUSH
3196: LD_EXP 57
3200: PUSH
3201: LD_VAR 0 3
3205: ADD
3206: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3207: LD_VAR 0 3
3211: PPUSH
3212: LD_INT 7
3214: PPUSH
3215: LD_INT 0
3217: PPUSH
3218: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3222: LD_OWVAR 40
3226: PUSH
3227: LD_INT 26
3229: EQUAL
3230: IFFALSE 3246
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3232: LD_INT 0
3234: PPUSH
3235: LD_EXP 30
3239: PPUSH
3240: CALL_OW 383
3244: GO 3258
// PrepareMechanic ( false , enemySkillLevel ) ;
3246: LD_INT 0
3248: PPUSH
3249: LD_EXP 29
3253: PPUSH
3254: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3258: CALL_OW 44
3262: PPUSH
3263: LD_VAR 0 3
3267: PPUSH
3268: CALL_OW 52
// end ;
3272: GO 3018
3274: POP
3275: POP
// end ;
3276: LD_VAR 0 1
3280: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3281: LD_INT 0
3283: PPUSH
3284: PPUSH
3285: PPUSH
// currentEnemyGroup = [ ] ;
3286: LD_ADDR_EXP 57
3290: PUSH
3291: EMPTY
3292: ST_TO_ADDR
// for i := 1 to enemyGroupHumans do
3293: LD_ADDR_VAR 0 3
3297: PUSH
3298: DOUBLE
3299: LD_INT 1
3301: DEC
3302: ST_TO_ADDR
3303: LD_EXP 37
3307: PUSH
3308: FOR_TO
3309: IFFALSE 3384
// begin uc_side = 2 ;
3311: LD_ADDR_OWVAR 20
3315: PUSH
3316: LD_INT 2
3318: ST_TO_ADDR
// uc_nation = nation_arabian ;
3319: LD_ADDR_OWVAR 21
3323: PUSH
3324: LD_INT 2
3326: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
3327: LD_INT 0
3329: PPUSH
3330: LD_EXP 29
3334: PPUSH
3335: CALL_OW 381
// unit = CreateHuman ;
3339: LD_ADDR_VAR 0 4
3343: PUSH
3344: CALL_OW 44
3348: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3349: LD_ADDR_EXP 57
3353: PUSH
3354: LD_EXP 57
3358: PUSH
3359: LD_VAR 0 4
3363: ADD
3364: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3365: LD_VAR 0 4
3369: PPUSH
3370: LD_VAR 0 1
3374: PPUSH
3375: LD_INT 0
3377: PPUSH
3378: CALL_OW 49
// end ;
3382: GO 3308
3384: POP
3385: POP
// for i := 1 to rand ( 1 , 3 ) do
3386: LD_ADDR_VAR 0 3
3390: PUSH
3391: DOUBLE
3392: LD_INT 1
3394: DEC
3395: ST_TO_ADDR
3396: LD_INT 1
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: CALL_OW 12
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3483
// begin uc_side = 2 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 2
3417: ST_TO_ADDR
// uc_nation = nation_arabian ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 2
3425: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_EXP 29
3433: PPUSH
3434: CALL_OW 384
// unit = CreateHuman ;
3438: LD_ADDR_VAR 0 4
3442: PUSH
3443: CALL_OW 44
3447: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3448: LD_ADDR_EXP 57
3452: PUSH
3453: LD_EXP 57
3457: PUSH
3458: LD_VAR 0 4
3462: ADD
3463: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3464: LD_VAR 0 4
3468: PPUSH
3469: LD_VAR 0 1
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: CALL_OW 49
// end ;
3481: GO 3407
3483: POP
3484: POP
// end ;
3485: LD_VAR 0 2
3489: RET
// export function PrepareArabianKiller ; var un ; begin
3490: LD_INT 0
3492: PPUSH
3493: PPUSH
// uc_side = 5 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 5
3501: ST_TO_ADDR
// uc_nation = nation_arabian ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 2
3509: ST_TO_ADDR
// hc_class = class_soldier ;
3510: LD_ADDR_OWVAR 28
3514: PUSH
3515: LD_INT 1
3517: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3518: LD_ADDR_OWVAR 31
3522: PUSH
3523: LD_INT 0
3525: PUSH
3526: LD_INT 0
3528: PUSH
3529: LD_INT 0
3531: PUSH
3532: LD_INT 0
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: ST_TO_ADDR
// un = CreateHuman ;
3541: LD_ADDR_VAR 0 2
3545: PUSH
3546: CALL_OW 44
3550: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
3551: LD_VAR 0 2
3555: PPUSH
3556: LD_INT 12
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
3566: LD_VAR 0 2
3570: PPUSH
3571: LD_EXP 50
3575: PPUSH
3576: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
3580: LD_ADDR_EXP 21
3584: PUSH
3585: LD_EXP 21
3589: PUSH
3590: LD_INT 1
3592: PLUS
3593: ST_TO_ADDR
// end ; end_of_file
3594: LD_VAR 0 1
3598: RET
// export function Nef_PrepareNature ; var i , un ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
3603: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: DOUBLE
3610: LD_INT 1
3612: DEC
3613: ST_TO_ADDR
3614: LD_EXP 23
3618: PUSH
3619: LD_INT 1
3621: ARRAY
3622: PUSH
3623: FOR_TO
3624: IFFALSE 3734
// begin uc_side = 0 ;
3626: LD_ADDR_OWVAR 20
3630: PUSH
3631: LD_INT 0
3633: ST_TO_ADDR
// uc_nation = nation_nature ;
3634: LD_ADDR_OWVAR 21
3638: PUSH
3639: LD_INT 0
3641: ST_TO_ADDR
// hc_class = class_apeman ;
3642: LD_ADDR_OWVAR 28
3646: PUSH
3647: LD_INT 12
3649: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3650: LD_ADDR_OWVAR 31
3654: PUSH
3655: LD_EXP 24
3659: PUSH
3660: LD_INT 1
3662: ARRAY
3663: PUSH
3664: LD_EXP 24
3668: PUSH
3669: LD_INT 2
3671: ARRAY
3672: PUSH
3673: LD_EXP 24
3677: PUSH
3678: LD_INT 3
3680: ARRAY
3681: PUSH
3682: LD_EXP 24
3686: PUSH
3687: LD_INT 4
3689: ARRAY
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3697: LD_ADDR_OWVAR 35
3701: PUSH
3702: LD_EXP 25
3706: ST_TO_ADDR
// un = CreateHuman ;
3707: LD_ADDR_VAR 0 3
3711: PUSH
3712: CALL_OW 44
3716: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3717: LD_VAR 0 3
3721: PPUSH
3722: LD_INT 8
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: CALL_OW 49
// end ;
3732: GO 3623
3734: POP
3735: POP
// for i := 1 to animalsAmount [ 2 ] do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_EXP 23
3750: PUSH
3751: LD_INT 2
3753: ARRAY
3754: PUSH
3755: FOR_TO
3756: IFFALSE 3866
// begin uc_side = 0 ;
3758: LD_ADDR_OWVAR 20
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// uc_nation = nation_nature ;
3766: LD_ADDR_OWVAR 21
3770: PUSH
3771: LD_INT 0
3773: ST_TO_ADDR
// hc_class = class_phororhacos ;
3774: LD_ADDR_OWVAR 28
3778: PUSH
3779: LD_INT 18
3781: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3782: LD_ADDR_OWVAR 31
3786: PUSH
3787: LD_EXP 24
3791: PUSH
3792: LD_INT 1
3794: ARRAY
3795: PUSH
3796: LD_EXP 24
3800: PUSH
3801: LD_INT 2
3803: ARRAY
3804: PUSH
3805: LD_EXP 24
3809: PUSH
3810: LD_INT 3
3812: ARRAY
3813: PUSH
3814: LD_EXP 24
3818: PUSH
3819: LD_INT 4
3821: ARRAY
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3829: LD_ADDR_OWVAR 35
3833: PUSH
3834: LD_EXP 25
3838: ST_TO_ADDR
// un = CreateHuman ;
3839: LD_ADDR_VAR 0 3
3843: PUSH
3844: CALL_OW 44
3848: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3849: LD_VAR 0 3
3853: PPUSH
3854: LD_INT 8
3856: PPUSH
3857: LD_INT 0
3859: PPUSH
3860: CALL_OW 49
// end ;
3864: GO 3755
3866: POP
3867: POP
// for i := 1 to animalsAmount [ 3 ] do
3868: LD_ADDR_VAR 0 2
3872: PUSH
3873: DOUBLE
3874: LD_INT 1
3876: DEC
3877: ST_TO_ADDR
3878: LD_EXP 23
3882: PUSH
3883: LD_INT 3
3885: ARRAY
3886: PUSH
3887: FOR_TO
3888: IFFALSE 3998
// begin uc_side = 0 ;
3890: LD_ADDR_OWVAR 20
3894: PUSH
3895: LD_INT 0
3897: ST_TO_ADDR
// uc_nation = nation_nature ;
3898: LD_ADDR_OWVAR 21
3902: PUSH
3903: LD_INT 0
3905: ST_TO_ADDR
// hc_class = class_tiger ;
3906: LD_ADDR_OWVAR 28
3910: PUSH
3911: LD_INT 14
3913: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3914: LD_ADDR_OWVAR 31
3918: PUSH
3919: LD_EXP 24
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PUSH
3928: LD_EXP 24
3932: PUSH
3933: LD_INT 2
3935: ARRAY
3936: PUSH
3937: LD_EXP 24
3941: PUSH
3942: LD_INT 3
3944: ARRAY
3945: PUSH
3946: LD_EXP 24
3950: PUSH
3951: LD_INT 4
3953: ARRAY
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3961: LD_ADDR_OWVAR 35
3965: PUSH
3966: LD_EXP 25
3970: ST_TO_ADDR
// un = CreateHuman ;
3971: LD_ADDR_VAR 0 3
3975: PUSH
3976: CALL_OW 44
3980: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 0
3991: PPUSH
3992: CALL_OW 49
// end ;
3996: GO 3887
3998: POP
3999: POP
// for i := 1 to animalsAmount [ 4 ] do
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: DOUBLE
4006: LD_INT 1
4008: DEC
4009: ST_TO_ADDR
4010: LD_EXP 23
4014: PUSH
4015: LD_INT 4
4017: ARRAY
4018: PUSH
4019: FOR_TO
4020: IFFALSE 4130
// begin uc_side = 0 ;
4022: LD_ADDR_OWVAR 20
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// uc_nation = nation_nature ;
4030: LD_ADDR_OWVAR 21
4034: PUSH
4035: LD_INT 0
4037: ST_TO_ADDR
// hc_class = 21 ;
4038: LD_ADDR_OWVAR 28
4042: PUSH
4043: LD_INT 21
4045: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4046: LD_ADDR_OWVAR 31
4050: PUSH
4051: LD_EXP 24
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PUSH
4060: LD_EXP 24
4064: PUSH
4065: LD_INT 2
4067: ARRAY
4068: PUSH
4069: LD_EXP 24
4073: PUSH
4074: LD_INT 3
4076: ARRAY
4077: PUSH
4078: LD_EXP 24
4082: PUSH
4083: LD_INT 4
4085: ARRAY
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4093: LD_ADDR_OWVAR 35
4097: PUSH
4098: LD_EXP 25
4102: ST_TO_ADDR
// un = CreateHuman ;
4103: LD_ADDR_VAR 0 3
4107: PUSH
4108: CALL_OW 44
4112: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4113: LD_VAR 0 3
4117: PPUSH
4118: LD_INT 8
4120: PPUSH
4121: LD_INT 0
4123: PPUSH
4124: CALL_OW 49
// end ;
4128: GO 4019
4130: POP
4131: POP
// for i := 1 to animalsAmount [ 5 ] do
4132: LD_ADDR_VAR 0 2
4136: PUSH
4137: DOUBLE
4138: LD_INT 1
4140: DEC
4141: ST_TO_ADDR
4142: LD_EXP 23
4146: PUSH
4147: LD_INT 5
4149: ARRAY
4150: PUSH
4151: FOR_TO
4152: IFFALSE 4213
// begin uc_side = 0 ;
4154: LD_ADDR_OWVAR 20
4158: PUSH
4159: LD_INT 0
4161: ST_TO_ADDR
// uc_nation = nation_nature ;
4162: LD_ADDR_OWVAR 21
4166: PUSH
4167: LD_INT 0
4169: ST_TO_ADDR
// vc_chassis := 31 ;
4170: LD_ADDR_OWVAR 37
4174: PUSH
4175: LD_INT 31
4177: ST_TO_ADDR
// vc_control := control_rider ;
4178: LD_ADDR_OWVAR 38
4182: PUSH
4183: LD_INT 4
4185: ST_TO_ADDR
// un := CreateVehicle ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 45
4195: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4196: LD_VAR 0 3
4200: PPUSH
4201: LD_INT 8
4203: PPUSH
4204: LD_INT 0
4206: PPUSH
4207: CALL_OW 49
// end ;
4211: GO 4151
4213: POP
4214: POP
// end ; end_of_file
4215: LD_VAR 0 1
4219: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
4220: LD_INT 0
4222: PPUSH
4223: PPUSH
4224: PPUSH
4225: PPUSH
4226: PPUSH
4227: PPUSH
4228: PPUSH
4229: PPUSH
4230: PPUSH
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
4236: PPUSH
4237: PPUSH
4238: PPUSH
4239: PPUSH
// for unit in units do
4240: LD_ADDR_VAR 0 8
4244: PUSH
4245: LD_VAR 0 1
4249: PUSH
4250: FOR_IN
4251: IFFALSE 4288
// if not ignorePath then
4253: LD_VAR 0 3
4257: NOT
4258: IFFALSE 4274
// SetTag ( unit , 0 ) else
4260: LD_VAR 0 8
4264: PPUSH
4265: LD_INT 0
4267: PPUSH
4268: CALL_OW 109
4272: GO 4286
// SetTag ( unit , 1 ) ;
4274: LD_VAR 0 8
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: CALL_OW 109
4286: GO 4250
4288: POP
4289: POP
// startAttacks = false ;
4290: LD_ADDR_VAR 0 21
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
4298: LD_ADDR_VAR 0 17
4302: PUSH
4303: LD_VAR 0 2
4307: PUSH
4308: LD_VAR 0 2
4312: ARRAY
4313: PUSH
4314: LD_INT 1
4316: ARRAY
4317: PUSH
4318: LD_VAR 0 2
4322: PUSH
4323: LD_VAR 0 2
4327: ARRAY
4328: PUSH
4329: LD_INT 2
4331: ARRAY
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: ST_TO_ADDR
// mechanics = [ ] ;
4337: LD_ADDR_VAR 0 12
4341: PUSH
4342: EMPTY
4343: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
4344: LD_ADDR_VAR 0 9
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: LD_INT 50
4356: PUSH
4357: EMPTY
4358: LIST
4359: PUSH
4360: LD_INT 2
4362: PUSH
4363: LD_INT 25
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 21
4375: PUSH
4376: LD_INT 2
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PPUSH
4392: CALL_OW 72
4396: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
4397: LD_ADDR_VAR 0 11
4401: PUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 50
4409: PUSH
4410: EMPTY
4411: LIST
4412: PUSH
4413: LD_INT 25
4415: PUSH
4416: LD_INT 4
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4432: LD_ADDR_VAR 0 13
4436: PUSH
4437: LD_VAR 0 1
4441: PPUSH
4442: LD_INT 21
4444: PUSH
4445: LD_INT 1
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 3
4454: PUSH
4455: LD_INT 24
4457: PUSH
4458: LD_INT 1000
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PPUSH
4473: CALL_OW 72
4477: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
4478: LD_ADDR_VAR 0 15
4482: PUSH
4483: LD_INT 9
4485: PPUSH
4486: CALL_OW 435
4490: ST_TO_ADDR
// if not ignorePath then
4491: LD_VAR 0 3
4495: NOT
4496: IFFALSE 5443
// begin for unit in attackUnits do
4498: LD_ADDR_VAR 0 8
4502: PUSH
4503: LD_VAR 0 9
4507: PUSH
4508: FOR_IN
4509: IFFALSE 5252
// begin if path and not startAttacks then
4511: LD_VAR 0 2
4515: PUSH
4516: LD_VAR 0 21
4520: NOT
4521: AND
4522: IFFALSE 5241
// begin i = 1 ;
4524: LD_ADDR_VAR 0 7
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
4532: LD_ADDR_VAR 0 15
4536: PUSH
4537: LD_INT 9
4539: PPUSH
4540: CALL_OW 435
4544: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
4545: LD_ADDR_VAR 0 18
4549: PUSH
4550: LD_INT 81
4552: PUSH
4553: LD_VAR 0 8
4557: PPUSH
4558: CALL_OW 255
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: PPUSH
4572: LD_VAR 0 8
4576: PPUSH
4577: CALL_OW 74
4581: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
4582: LD_ADDR_VAR 0 19
4586: PUSH
4587: LD_VAR 0 15
4591: PPUSH
4592: LD_VAR 0 8
4596: PPUSH
4597: CALL_OW 250
4601: PPUSH
4602: LD_VAR 0 8
4606: PPUSH
4607: CALL_OW 251
4611: PPUSH
4612: CALL_OW 439
4616: ST_TO_ADDR
// if damageUnits and medics then
4617: LD_VAR 0 13
4621: PUSH
4622: LD_VAR 0 11
4626: AND
4627: IFFALSE 4649
// ComHeal ( medics , damageUnits [ 1 ] ) else
4629: LD_VAR 0 11
4633: PPUSH
4634: LD_VAR 0 13
4638: PUSH
4639: LD_INT 1
4641: ARRAY
4642: PPUSH
4643: CALL_OW 128
4647: GO 4692
// if medics then
4649: LD_VAR 0 11
4653: IFFALSE 4692
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
4655: LD_VAR 0 11
4659: PPUSH
4660: LD_VAR 0 9
4664: PUSH
4665: LD_INT 1
4667: ARRAY
4668: PPUSH
4669: CALL_OW 250
4673: PPUSH
4674: LD_VAR 0 9
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: CALL_OW 251
4687: PPUSH
4688: CALL_OW 111
// if not HasTask ( unit ) then
4692: LD_VAR 0 8
4696: PPUSH
4697: CALL_OW 314
4701: NOT
4702: IFFALSE 4941
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
4704: LD_ADDR_VAR 0 19
4708: PUSH
4709: LD_VAR 0 15
4713: PPUSH
4714: LD_VAR 0 8
4718: PPUSH
4719: CALL_OW 250
4723: PPUSH
4724: LD_VAR 0 8
4728: PPUSH
4729: CALL_OW 251
4733: PPUSH
4734: CALL_OW 439
4738: ST_TO_ADDR
// if i > crates then
4739: LD_VAR 0 7
4743: PUSH
4744: LD_VAR 0 15
4748: GREATER
4749: IFFALSE 4759
// i = 1 ;
4751: LD_ADDR_VAR 0 7
4755: PUSH
4756: LD_INT 1
4758: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
4759: LD_VAR 0 18
4763: PUSH
4764: LD_VAR 0 19
4768: AND
4769: IFFALSE 4884
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
4771: LD_VAR 0 8
4775: PPUSH
4776: LD_VAR 0 18
4780: PPUSH
4781: CALL_OW 250
4785: PPUSH
4786: LD_VAR 0 18
4790: PPUSH
4791: CALL_OW 251
4795: PPUSH
4796: CALL_OW 297
4800: PUSH
4801: LD_VAR 0 8
4805: PPUSH
4806: LD_VAR 0 19
4810: PUSH
4811: LD_INT 1
4813: ARRAY
4814: PPUSH
4815: LD_VAR 0 19
4819: PUSH
4820: LD_INT 2
4822: ARRAY
4823: PPUSH
4824: CALL_OW 297
4828: LESS
4829: IFFALSE 4847
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
4831: LD_VAR 0 9
4835: PPUSH
4836: LD_VAR 0 18
4840: PPUSH
4841: CALL_OW 115
4845: GO 4882
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
4847: LD_VAR 0 9
4851: PPUSH
4852: LD_VAR 0 15
4856: PUSH
4857: LD_VAR 0 7
4861: ARRAY
4862: PPUSH
4863: LD_VAR 0 15
4867: PUSH
4868: LD_VAR 0 7
4872: PUSH
4873: LD_INT 1
4875: PLUS
4876: ARRAY
4877: PPUSH
4878: CALL_OW 116
// end else
4882: GO 4941
// if crates then
4884: LD_VAR 0 15
4888: IFFALSE 4927
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
4890: LD_VAR 0 9
4894: PPUSH
4895: LD_VAR 0 15
4899: PUSH
4900: LD_VAR 0 7
4904: ARRAY
4905: PPUSH
4906: LD_VAR 0 15
4910: PUSH
4911: LD_VAR 0 7
4915: PUSH
4916: LD_INT 1
4918: PLUS
4919: ARRAY
4920: PPUSH
4921: CALL_OW 116
4925: GO 4941
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
4927: LD_VAR 0 9
4931: PPUSH
4932: LD_VAR 0 18
4936: PPUSH
4937: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
4941: LD_INT 35
4943: PPUSH
4944: CALL_OW 67
// if path then
4948: LD_VAR 0 2
4952: IFFALSE 5038
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
4954: LD_ADDR_VAR 0 16
4958: PUSH
4959: LD_VAR 0 8
4963: PPUSH
4964: LD_VAR 0 2
4968: PPUSH
4969: CALL 6333 0 2
4973: ST_TO_ADDR
// if agressiveMove then
4974: LD_VAR 0 4
4978: IFFALSE 5009
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
4980: LD_VAR 0 9
4984: PPUSH
4985: LD_VAR 0 16
4989: PUSH
4990: LD_INT 1
4992: ARRAY
4993: PPUSH
4994: LD_VAR 0 16
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: CALL_OW 114
5007: GO 5036
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5009: LD_VAR 0 9
5013: PPUSH
5014: LD_VAR 0 16
5018: PUSH
5019: LD_INT 1
5021: ARRAY
5022: PPUSH
5023: LD_VAR 0 16
5027: PUSH
5028: LD_INT 2
5030: ARRAY
5031: PPUSH
5032: CALL_OW 111
// end else
5036: GO 5046
// startAttacks = true ;
5038: LD_ADDR_VAR 0 21
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// i = i + 2 ;
5046: LD_ADDR_VAR 0 7
5050: PUSH
5051: LD_VAR 0 7
5055: PUSH
5056: LD_INT 2
5058: PLUS
5059: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5060: LD_VAR 0 8
5064: PPUSH
5065: CALL_OW 314
5069: NOT
5070: PUSH
5071: LD_INT 22
5073: PUSH
5074: LD_VAR 0 8
5078: PPUSH
5079: CALL_OW 255
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 92
5090: PUSH
5091: LD_VAR 0 16
5095: PUSH
5096: LD_INT 1
5098: ARRAY
5099: PUSH
5100: LD_VAR 0 16
5104: PUSH
5105: LD_INT 2
5107: ARRAY
5108: PUSH
5109: LD_INT 4
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: PUSH
5127: LD_INT 3
5129: GREATER
5130: AND
5131: PUSH
5132: LD_VAR 0 21
5136: NOT
5137: AND
5138: IFFALSE 4532
// for i := 1 to path do
5140: LD_ADDR_VAR 0 7
5144: PUSH
5145: DOUBLE
5146: LD_INT 1
5148: DEC
5149: ST_TO_ADDR
5150: LD_VAR 0 2
5154: PUSH
5155: FOR_TO
5156: IFFALSE 5239
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5158: LD_VAR 0 2
5162: PUSH
5163: LD_VAR 0 7
5167: ARRAY
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PUSH
5173: LD_VAR 0 16
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: EQUAL
5182: PUSH
5183: LD_VAR 0 2
5187: PUSH
5188: LD_VAR 0 7
5192: ARRAY
5193: PUSH
5194: LD_INT 2
5196: ARRAY
5197: PUSH
5198: LD_VAR 0 16
5202: PUSH
5203: LD_INT 2
5205: ARRAY
5206: EQUAL
5207: AND
5208: IFFALSE 5237
// begin path = path diff [ path [ i ] ] ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_VAR 0 2
5219: PUSH
5220: LD_VAR 0 2
5224: PUSH
5225: LD_VAR 0 7
5229: ARRAY
5230: PUSH
5231: EMPTY
5232: LIST
5233: DIFF
5234: ST_TO_ADDR
// break ;
5235: GO 5239
// end ;
5237: GO 5155
5239: POP
5240: POP
// end ; if not path then
5241: LD_VAR 0 2
5245: NOT
5246: IFFALSE 5250
// break ;
5248: GO 5252
// end ;
5250: GO 4508
5252: POP
5253: POP
// repeat unitsReachPathEnd = 0 ;
5254: LD_ADDR_VAR 0 20
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// for attackUnit in attackUnits do
5262: LD_ADDR_VAR 0 10
5266: PUSH
5267: LD_VAR 0 9
5271: PUSH
5272: FOR_IN
5273: IFFALSE 5411
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
5275: LD_VAR 0 10
5279: PPUSH
5280: LD_VAR 0 17
5284: PUSH
5285: LD_INT 1
5287: ARRAY
5288: PPUSH
5289: LD_VAR 0 17
5293: PUSH
5294: LD_INT 2
5296: ARRAY
5297: PPUSH
5298: CALL_OW 297
5302: PUSH
5303: LD_INT 7
5305: LESS
5306: NOT
5307: PUSH
5308: LD_VAR 0 10
5312: PPUSH
5313: CALL_OW 110
5317: PUSH
5318: LD_INT 0
5320: EQUAL
5321: AND
5322: IFFALSE 5353
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
5324: LD_VAR 0 10
5328: PPUSH
5329: LD_VAR 0 17
5333: PUSH
5334: LD_INT 1
5336: ARRAY
5337: PPUSH
5338: LD_VAR 0 17
5342: PUSH
5343: LD_INT 2
5345: ARRAY
5346: PPUSH
5347: CALL_OW 111
5351: GO 5380
// if GetTag ( attackUnit ) = 0 then
5353: LD_VAR 0 10
5357: PPUSH
5358: CALL_OW 110
5362: PUSH
5363: LD_INT 0
5365: EQUAL
5366: IFFALSE 5380
// SetTag ( attackUnit , 1 ) ;
5368: LD_VAR 0 10
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: CALL_OW 109
// if GetTag ( unit ) = 1 then
5380: LD_VAR 0 8
5384: PPUSH
5385: CALL_OW 110
5389: PUSH
5390: LD_INT 1
5392: EQUAL
5393: IFFALSE 5409
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
5395: LD_ADDR_VAR 0 20
5399: PUSH
5400: LD_VAR 0 20
5404: PUSH
5405: LD_INT 1
5407: PLUS
5408: ST_TO_ADDR
// end ;
5409: GO 5272
5411: POP
5412: POP
// wait ( 0 0$1 ) ;
5413: LD_INT 35
5415: PPUSH
5416: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
5420: LD_VAR 0 20
5424: PUSH
5425: LD_VAR 0 9
5429: PUSH
5430: LD_INT 3
5432: MINUS
5433: GREATER
5434: IFFALSE 5254
// wait ( 0 0$10 ) ;
5436: LD_INT 350
5438: PPUSH
5439: CALL_OW 67
// end ; for attackUnit in attackUnits do
5443: LD_ADDR_VAR 0 10
5447: PUSH
5448: LD_VAR 0 9
5452: PUSH
5453: FOR_IN
5454: IFFALSE 5470
// SetTag ( attackUnit , 2 ) ;
5456: LD_VAR 0 10
5460: PPUSH
5461: LD_INT 2
5463: PPUSH
5464: CALL_OW 109
5468: GO 5453
5470: POP
5471: POP
// startAttacks = true ;
5472: LD_ADDR_VAR 0 21
5476: PUSH
5477: LD_INT 1
5479: ST_TO_ADDR
// if startAttacks then
5480: LD_VAR 0 21
5484: IFFALSE 6303
// begin repeat wait ( 0 0$1 ) ;
5486: LD_INT 35
5488: PPUSH
5489: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5493: LD_ADDR_VAR 0 11
5497: PUSH
5498: LD_VAR 0 1
5502: PPUSH
5503: LD_INT 50
5505: PUSH
5506: EMPTY
5507: LIST
5508: PUSH
5509: LD_INT 25
5511: PUSH
5512: LD_INT 4
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PPUSH
5523: CALL_OW 72
5527: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5528: LD_ADDR_VAR 0 13
5532: PUSH
5533: LD_VAR 0 1
5537: PPUSH
5538: LD_INT 21
5540: PUSH
5541: LD_INT 1
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 25
5550: PUSH
5551: LD_INT 1
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: LD_INT 3
5560: PUSH
5561: LD_INT 24
5563: PUSH
5564: LD_INT 1000
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: PPUSH
5580: CALL_OW 72
5584: ST_TO_ADDR
// if damageUnits and medics then
5585: LD_VAR 0 13
5589: PUSH
5590: LD_VAR 0 11
5594: AND
5595: IFFALSE 5617
// ComHeal ( medics , damageUnits [ 1 ] ) else
5597: LD_VAR 0 11
5601: PPUSH
5602: LD_VAR 0 13
5606: PUSH
5607: LD_INT 1
5609: ARRAY
5610: PPUSH
5611: CALL_OW 128
5615: GO 5667
// if medics and not damageUnits then
5617: LD_VAR 0 11
5621: PUSH
5622: LD_VAR 0 13
5626: NOT
5627: AND
5628: IFFALSE 5667
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5630: LD_VAR 0 11
5634: PPUSH
5635: LD_VAR 0 9
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: CALL_OW 250
5648: PPUSH
5649: LD_VAR 0 9
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: CALL_OW 251
5662: PPUSH
5663: CALL_OW 111
// for attackUnit in attackUnits do
5667: LD_ADDR_VAR 0 10
5671: PUSH
5672: LD_VAR 0 9
5676: PUSH
5677: FOR_IN
5678: IFFALSE 6294
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
5680: LD_ADDR_VAR 0 22
5684: PUSH
5685: LD_INT 81
5687: PUSH
5688: LD_VAR 0 10
5692: PPUSH
5693: CALL_OW 255
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PPUSH
5702: CALL_OW 69
5706: PPUSH
5707: LD_VAR 0 10
5711: PPUSH
5712: CALL_OW 74
5716: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
5717: LD_ADDR_VAR 0 23
5721: PUSH
5722: LD_INT 81
5724: PUSH
5725: LD_VAR 0 10
5729: PPUSH
5730: CALL_OW 255
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 2
5741: PUSH
5742: LD_INT 59
5744: PUSH
5745: EMPTY
5746: LIST
5747: PUSH
5748: LD_INT 21
5750: PUSH
5751: LD_INT 1
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: LD_INT 21
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: EMPTY
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PPUSH
5786: LD_VAR 0 10
5790: PPUSH
5791: CALL_OW 74
5795: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
5796: LD_VAR 0 10
5800: PPUSH
5801: CALL_OW 110
5805: PUSH
5806: LD_INT 2
5808: EQUAL
5809: IFFALSE 5969
// begin if GetDistUnits ( attackUnit , target1 ) + 8 < GetDistUnits ( attackUnit , target2 ) then
5811: LD_VAR 0 10
5815: PPUSH
5816: LD_VAR 0 22
5820: PPUSH
5821: CALL_OW 296
5825: PUSH
5826: LD_INT 8
5828: PLUS
5829: PUSH
5830: LD_VAR 0 10
5834: PPUSH
5835: LD_VAR 0 23
5839: PPUSH
5840: CALL_OW 296
5844: LESS
5845: IFFALSE 5863
// ComAttackUnit ( attackUnit , target1 ) else
5847: LD_VAR 0 10
5851: PPUSH
5852: LD_VAR 0 22
5856: PPUSH
5857: CALL_OW 115
5861: GO 5877
// ComAttackUnit ( attackUnit , target2 ) ;
5863: LD_VAR 0 10
5867: PPUSH
5868: LD_VAR 0 23
5872: PPUSH
5873: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
5877: LD_VAR 0 10
5881: PPUSH
5882: CALL_OW 256
5886: PUSH
5887: LD_INT 650
5889: LESS
5890: PUSH
5891: LD_VAR 0 10
5895: PPUSH
5896: CALL_OW 247
5900: PUSH
5901: LD_INT 2
5903: EQUAL
5904: AND
5905: PUSH
5906: LD_VAR 0 10
5910: PPUSH
5911: CALL_OW 263
5915: PUSH
5916: LD_INT 1
5918: EQUAL
5919: AND
5920: IFFALSE 5969
// begin SetTag ( attackUnit , 3 ) ;
5922: LD_VAR 0 10
5926: PPUSH
5927: LD_INT 3
5929: PPUSH
5930: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
5934: LD_VAR 0 10
5938: PPUSH
5939: CALL_OW 313
5943: PUSH
5944: LD_INT 1
5946: ARRAY
5947: PPUSH
5948: LD_INT 3
5950: PPUSH
5951: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
5955: LD_VAR 0 10
5959: PPUSH
5960: LD_VAR 0 5
5964: PPUSH
5965: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
5969: LD_VAR 0 10
5973: PPUSH
5974: LD_VAR 0 5
5978: PPUSH
5979: CALL_OW 308
5983: PUSH
5984: LD_VAR 0 10
5988: PPUSH
5989: CALL_OW 110
5993: PUSH
5994: LD_INT 3
5996: EQUAL
5997: AND
5998: PUSH
5999: LD_VAR 0 10
6003: PPUSH
6004: CALL_OW 313
6008: AND
6009: IFFALSE 6082
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6011: LD_ADDR_VAR 0 14
6015: PUSH
6016: LD_VAR 0 10
6020: PPUSH
6021: CALL_OW 313
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: ST_TO_ADDR
// if not driver in mechanics then
6030: LD_VAR 0 14
6034: PUSH
6035: LD_VAR 0 12
6039: IN
6040: NOT
6041: IFFALSE 6059
// mechanics = mechanics ^ driver ;
6043: LD_ADDR_VAR 0 12
6047: PUSH
6048: LD_VAR 0 12
6052: PUSH
6053: LD_VAR 0 14
6057: ADD
6058: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6059: LD_VAR 0 14
6063: PPUSH
6064: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6068: LD_VAR 0 14
6072: PPUSH
6073: LD_VAR 0 10
6077: PPUSH
6078: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6082: LD_VAR 0 10
6086: PPUSH
6087: CALL_OW 256
6091: PUSH
6092: LD_INT 1000
6094: EQUAL
6095: IFFALSE 6213
// begin SetTag ( attackUnit , 2 ) ;
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_INT 2
6104: PPUSH
6105: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6109: LD_VAR 0 10
6113: PPUSH
6114: CALL_OW 247
6118: PUSH
6119: LD_INT 2
6121: EQUAL
6122: PUSH
6123: LD_VAR 0 10
6127: PPUSH
6128: CALL_OW 263
6132: PUSH
6133: LD_INT 1
6135: EQUAL
6136: AND
6137: PUSH
6138: LD_VAR 0 10
6142: PPUSH
6143: CALL_OW 313
6147: NOT
6148: AND
6149: IFFALSE 6213
// begin SetFuel ( attackUnit , 100 ) ;
6151: LD_VAR 0 10
6155: PPUSH
6156: LD_INT 100
6158: PPUSH
6159: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6163: LD_VAR 0 12
6167: PPUSH
6168: LD_VAR 0 10
6172: PPUSH
6173: CALL_OW 74
6177: PPUSH
6178: LD_VAR 0 10
6182: PPUSH
6183: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
6187: LD_ADDR_VAR 0 12
6191: PUSH
6192: LD_VAR 0 12
6196: PUSH
6197: LD_VAR 0 12
6201: PPUSH
6202: LD_VAR 0 10
6206: PPUSH
6207: CALL_OW 74
6211: DIFF
6212: ST_TO_ADDR
// end ; end ; for unit in mechanics do
6213: LD_ADDR_VAR 0 8
6217: PUSH
6218: LD_VAR 0 12
6222: PUSH
6223: FOR_IN
6224: IFFALSE 6290
// begin if not IsInArea ( unit , retreatArea ) then
6226: LD_VAR 0 8
6230: PPUSH
6231: LD_VAR 0 5
6235: PPUSH
6236: CALL_OW 308
6240: NOT
6241: IFFALSE 6257
// ComMoveToArea ( unit , retreatArea ) ;
6243: LD_VAR 0 8
6247: PPUSH
6248: LD_VAR 0 5
6252: PPUSH
6253: CALL_OW 113
// if GetLives ( unit ) < 250 then
6257: LD_VAR 0 8
6261: PPUSH
6262: CALL_OW 256
6266: PUSH
6267: LD_INT 250
6269: LESS
6270: IFFALSE 6288
// mechanics = mechanics diff unit ;
6272: LD_ADDR_VAR 0 12
6276: PUSH
6277: LD_VAR 0 12
6281: PUSH
6282: LD_VAR 0 8
6286: DIFF
6287: ST_TO_ADDR
// end ;
6288: GO 6223
6290: POP
6291: POP
// end ;
6292: GO 5677
6294: POP
6295: POP
// until not attackUnits ;
6296: LD_VAR 0 9
6300: NOT
6301: IFFALSE 5486
// end ; wait ( 0 0$1 ) ;
6303: LD_INT 35
6305: PPUSH
6306: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
6310: LD_VAR 0 1
6314: PPUSH
6315: LD_INT 50
6317: PUSH
6318: EMPTY
6319: LIST
6320: PPUSH
6321: CALL_OW 72
6325: NOT
6326: IFFALSE 4344
// end ;
6328: LD_VAR 0 6
6332: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
6333: LD_INT 0
6335: PPUSH
6336: PPUSH
6337: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
6338: LD_ADDR_VAR 0 5
6342: PUSH
6343: LD_VAR 0 2
6347: PUSH
6348: LD_INT 1
6350: ARRAY
6351: PUSH
6352: LD_INT 1
6354: ARRAY
6355: PUSH
6356: LD_VAR 0 2
6360: PUSH
6361: LD_INT 1
6363: ARRAY
6364: PUSH
6365: LD_INT 2
6367: ARRAY
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: ST_TO_ADDR
// for i := 2 to path do
6373: LD_ADDR_VAR 0 4
6377: PUSH
6378: DOUBLE
6379: LD_INT 2
6381: DEC
6382: ST_TO_ADDR
6383: LD_VAR 0 2
6387: PUSH
6388: FOR_TO
6389: IFFALSE 6529
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
6391: LD_VAR 0 1
6395: PPUSH
6396: LD_VAR 0 2
6400: PUSH
6401: LD_VAR 0 4
6405: ARRAY
6406: PUSH
6407: LD_INT 1
6409: ARRAY
6410: PPUSH
6411: LD_VAR 0 2
6415: PUSH
6416: LD_VAR 0 4
6420: ARRAY
6421: PUSH
6422: LD_INT 2
6424: ARRAY
6425: PPUSH
6426: CALL_OW 297
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: LD_VAR 0 5
6440: PUSH
6441: LD_INT 1
6443: ARRAY
6444: PPUSH
6445: LD_VAR 0 5
6449: PUSH
6450: LD_INT 2
6452: ARRAY
6453: PPUSH
6454: CALL_OW 297
6458: LESS
6459: IFFALSE 6527
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
6461: LD_ADDR_VAR 0 5
6465: PUSH
6466: LD_VAR 0 5
6470: PPUSH
6471: LD_INT 1
6473: PPUSH
6474: LD_VAR 0 2
6478: PUSH
6479: LD_VAR 0 4
6483: ARRAY
6484: PUSH
6485: LD_INT 1
6487: ARRAY
6488: PPUSH
6489: CALL_OW 1
6493: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
6494: LD_ADDR_VAR 0 5
6498: PUSH
6499: LD_VAR 0 5
6503: PPUSH
6504: LD_INT 2
6506: PPUSH
6507: LD_VAR 0 2
6511: PUSH
6512: LD_VAR 0 4
6516: ARRAY
6517: PUSH
6518: LD_INT 2
6520: ARRAY
6521: PPUSH
6522: CALL_OW 1
6526: ST_TO_ADDR
// end ; end ;
6527: GO 6388
6529: POP
6530: POP
// result = nearPosition ;
6531: LD_ADDR_VAR 0 3
6535: PUSH
6536: LD_VAR 0 5
6540: ST_TO_ADDR
// end ; end_of_file
6541: LD_VAR 0 3
6545: RET
// export function Lose_Burlak ; begin
6546: LD_INT 0
6548: PPUSH
// YouLost ( Burlak ) ;
6549: LD_STRING Burlak
6551: PPUSH
6552: CALL_OW 104
// end ;
6556: LD_VAR 0 1
6560: RET
// export function Lose_Gaydar ; begin
6561: LD_INT 0
6563: PPUSH
// YouLost ( Gaydar ) ;
6564: LD_STRING Gaydar
6566: PPUSH
6567: CALL_OW 104
// end ;
6571: LD_VAR 0 1
6575: RET
// export function Lose_SelfAttack ; begin
6576: LD_INT 0
6578: PPUSH
// YouLost ( SelfAttack ) ;
6579: LD_STRING SelfAttack
6581: PPUSH
6582: CALL_OW 104
// end ;
6586: LD_VAR 0 1
6590: RET
// export function Lose_Arrest ; begin
6591: LD_INT 0
6593: PPUSH
// YouLost ( Arrest ) ;
6594: LD_STRING Arrest
6596: PPUSH
6597: CALL_OW 104
// end ;
6601: LD_VAR 0 1
6605: RET
// export function Lose_ArabBreakthrough ; begin
6606: LD_INT 0
6608: PPUSH
// YouLost ( ArabBreakthrough ) ;
6609: LD_STRING ArabBreakthrough
6611: PPUSH
6612: CALL_OW 104
// end ; end_of_file
6616: LD_VAR 0 1
6620: RET
// export function FinishMission ; begin
6621: LD_INT 0
6623: PPUSH
// SetRewards ;
6624: CALL 6645 0 0
// SavePlayerCharacters ;
6628: CALL 7066 0 0
// SaveGlobalVariables ;
6632: CALL 7294 0 0
// YouWin ;
6636: CALL_OW 103
// end ;
6640: LD_VAR 0 1
6644: RET
// function SetRewards ; var unitsToReward ; begin
6645: LD_INT 0
6647: PPUSH
6648: PPUSH
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
6649: LD_INT 22
6651: PUSH
6652: LD_INT 3
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 21
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: NOT
6678: IFFALSE 6692
// AddMedal ( Dismantle , 1 ) else
6680: LD_STRING Dismantle
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: CALL_OW 101
6690: GO 6703
// AddMedal ( Dismantle , - 1 ) ;
6692: LD_STRING Dismantle
6694: PPUSH
6695: LD_INT 1
6697: NEG
6698: PPUSH
6699: CALL_OW 101
// if killedArabianUnits > 30 then
6703: LD_EXP 20
6707: PUSH
6708: LD_INT 30
6710: GREATER
6711: IFFALSE 6733
// begin AddMedal ( EnemyLosses , 1 ) ;
6713: LD_STRING EnemyLosses
6715: PPUSH
6716: LD_INT 1
6718: PPUSH
6719: CALL_OW 101
// heikeHeavyLosses = true ;
6723: LD_ADDR_EXP 4
6727: PUSH
6728: LD_INT 1
6730: ST_TO_ADDR
// end else
6731: GO 6744
// AddMedal ( EnemyLosses , - 1 ) ;
6733: LD_STRING EnemyLosses
6735: PPUSH
6736: LD_INT 1
6738: NEG
6739: PPUSH
6740: CALL_OW 101
// if not lostUnits then
6744: LD_EXP 22
6748: NOT
6749: IFFALSE 6763
// AddMedal ( LittleLosses , 1 ) else
6751: LD_STRING LittleLosses
6753: PPUSH
6754: LD_INT 1
6756: PPUSH
6757: CALL_OW 101
6761: GO 6774
// AddMedal ( LittleLosses , - 1 ) ;
6763: LD_STRING LittleLosses
6765: PPUSH
6766: LD_INT 1
6768: NEG
6769: PPUSH
6770: CALL_OW 101
// GiveMedals ( Main ) ;
6774: LD_STRING Main
6776: PPUSH
6777: CALL_OW 102
// unitsToReward = [ ] ;
6781: LD_ADDR_VAR 0 2
6785: PUSH
6786: EMPTY
6787: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
6788: LD_EXP 38
6792: PPUSH
6793: CALL_OW 255
6797: PUSH
6798: LD_INT 3
6800: EQUAL
6801: IFFALSE 6819
// unitsToReward = unitsToReward ^ Burlak ;
6803: LD_ADDR_VAR 0 2
6807: PUSH
6808: LD_VAR 0 2
6812: PUSH
6813: LD_EXP 38
6817: ADD
6818: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
6819: LD_EXP 39
6823: PPUSH
6824: CALL_OW 255
6828: PUSH
6829: LD_INT 3
6831: EQUAL
6832: IFFALSE 6850
// unitsToReward = unitsToReward ^ Gnyevko ;
6834: LD_ADDR_VAR 0 2
6838: PUSH
6839: LD_VAR 0 2
6843: PUSH
6844: LD_EXP 39
6848: ADD
6849: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
6850: LD_EXP 40
6854: PPUSH
6855: CALL_OW 255
6859: PUSH
6860: LD_INT 3
6862: EQUAL
6863: IFFALSE 6881
// unitsToReward = unitsToReward ^ Kirilenkova ;
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_VAR 0 2
6874: PUSH
6875: LD_EXP 40
6879: ADD
6880: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
6881: LD_EXP 41
6885: PPUSH
6886: CALL_OW 255
6890: PUSH
6891: LD_INT 3
6893: EQUAL
6894: IFFALSE 6912
// unitsToReward = unitsToReward ^ Kovalyuk ;
6896: LD_ADDR_VAR 0 2
6900: PUSH
6901: LD_VAR 0 2
6905: PUSH
6906: LD_EXP 41
6910: ADD
6911: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
6912: LD_EXP 42
6916: PPUSH
6917: CALL_OW 255
6921: PUSH
6922: LD_INT 3
6924: EQUAL
6925: IFFALSE 6943
// unitsToReward = unitsToReward ^ Belkov ;
6927: LD_ADDR_VAR 0 2
6931: PUSH
6932: LD_VAR 0 2
6936: PUSH
6937: LD_EXP 42
6941: ADD
6942: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
6943: LD_EXP 43
6947: PPUSH
6948: CALL_OW 255
6952: PUSH
6953: LD_INT 3
6955: EQUAL
6956: IFFALSE 6974
// unitsToReward = unitsToReward ^ Belkov2 ;
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: LD_VAR 0 2
6967: PUSH
6968: LD_EXP 43
6972: ADD
6973: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
6974: LD_EXP 44
6978: PPUSH
6979: CALL_OW 255
6983: PUSH
6984: LD_INT 3
6986: EQUAL
6987: IFFALSE 7005
// unitsToReward = unitsToReward ^ Scholtze ;
6989: LD_ADDR_VAR 0 2
6993: PUSH
6994: LD_VAR 0 2
6998: PUSH
6999: LD_EXP 44
7003: ADD
7004: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
7005: LD_EXP 45
7009: PPUSH
7010: CALL_OW 255
7014: PUSH
7015: LD_INT 3
7017: EQUAL
7018: IFFALSE 7036
// unitsToReward = unitsToReward ^ Kuzmov ;
7020: LD_ADDR_VAR 0 2
7024: PUSH
7025: LD_VAR 0 2
7029: PUSH
7030: LD_EXP 45
7034: ADD
7035: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
7036: LD_ADDR_VAR 0 2
7040: PUSH
7041: LD_VAR 0 2
7045: PUSH
7046: LD_EXP 55
7050: ADD
7051: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: CALL_OW 43
// end ;
7061: LD_VAR 0 1
7065: RET
// function SavePlayerCharacters ; var othersYour ; begin
7066: LD_INT 0
7068: PPUSH
7069: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
7070: LD_EXP 38
7074: PPUSH
7075: LD_STRING 04_Burlak
7077: PPUSH
7078: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
7082: LD_EXP 39
7086: PPUSH
7087: CALL_OW 255
7091: PUSH
7092: LD_INT 3
7094: EQUAL
7095: IFFALSE 7109
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
7097: LD_EXP 39
7101: PPUSH
7102: LD_STRING 04_Gnyevko
7104: PPUSH
7105: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
7109: LD_EXP 41
7113: PPUSH
7114: CALL_OW 255
7118: PUSH
7119: LD_INT 3
7121: EQUAL
7122: IFFALSE 7136
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
7124: LD_EXP 41
7128: PPUSH
7129: LD_STRING 04_Kovalyuk
7131: PPUSH
7132: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
7136: LD_EXP 40
7140: PPUSH
7141: CALL_OW 255
7145: PUSH
7146: LD_INT 3
7148: EQUAL
7149: IFFALSE 7163
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
7151: LD_EXP 40
7155: PPUSH
7156: LD_STRING 04_Kirilenkova
7158: PPUSH
7159: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
7163: LD_EXP 44
7167: PPUSH
7168: CALL_OW 255
7172: PUSH
7173: LD_INT 3
7175: EQUAL
7176: IFFALSE 7190
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
7178: LD_EXP 44
7182: PPUSH
7183: LD_STRING 04_Scholtze
7185: PPUSH
7186: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
7190: LD_EXP 42
7194: PPUSH
7195: CALL_OW 255
7199: PUSH
7200: LD_INT 3
7202: EQUAL
7203: IFFALSE 7217
// SaveCharacters ( Belkov , 04_Belkov ) ;
7205: LD_EXP 42
7209: PPUSH
7210: LD_STRING 04_Belkov
7212: PPUSH
7213: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
7217: LD_EXP 43
7221: PPUSH
7222: CALL_OW 255
7226: PUSH
7227: LD_INT 3
7229: EQUAL
7230: IFFALSE 7244
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
7232: LD_EXP 43
7236: PPUSH
7237: LD_STRING 04_Belkov2
7239: PPUSH
7240: CALL_OW 38
// if IsOK ( Kuzmov ) then
7244: LD_EXP 45
7248: PPUSH
7249: CALL_OW 302
7253: IFFALSE 7267
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
7255: LD_EXP 45
7259: PPUSH
7260: LD_STRING 04_Kuzmov
7262: PPUSH
7263: CALL_OW 38
// othersYour = randomsToSave ;
7267: LD_ADDR_VAR 0 2
7271: PUSH
7272: LD_EXP 55
7276: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
7277: LD_EXP 55
7281: PPUSH
7282: LD_STRING 04_other_survivors
7284: PPUSH
7285: CALL_OW 38
// end ;
7289: LD_VAR 0 1
7293: RET
// function SaveGlobalVariables ; begin
7294: LD_INT 0
7296: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
7297: LD_EXP 4
7301: PPUSH
7302: LD_STRING 04_HeikeHeavyLosses_1
7304: PPUSH
7305: CALL_OW 39
// end ; end_of_file
7309: LD_VAR 0 1
7313: RET
// on BuildingStarted ( building , unit ) do begin if GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
7314: LD_VAR 0 1
7318: PPUSH
7319: CALL_OW 266
7323: PUSH
7324: LD_INT 0
7326: EQUAL
7327: PUSH
7328: LD_VAR 0 1
7332: PPUSH
7333: LD_INT 5
7335: PPUSH
7336: CALL_OW 308
7340: NOT
7341: AND
7342: IFFALSE 7353
// Dial_DepotInWrongPlace ( building ) ;
7344: LD_VAR 0 1
7348: PPUSH
7349: CALL 9276 0 1
// end ;
7353: PPOPN 2
7355: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
7356: LD_VAR 0 1
7360: PPUSH
7361: CALL_OW 266
7365: PUSH
7366: LD_INT 0
7368: EQUAL
7369: PUSH
7370: LD_VAR 0 1
7374: PPUSH
7375: LD_INT 5
7377: PPUSH
7378: CALL_OW 308
7382: AND
7383: PUSH
7384: LD_EXP 7
7388: NOT
7389: AND
7390: PUSH
7391: LD_EXP 8
7395: NOT
7396: AND
7397: IFFALSE 7423
// begin namedBase = true ;
7399: LD_ADDR_EXP 8
7403: PUSH
7404: LD_INT 1
7406: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
7407: LD_VAR 0 1
7411: PPUSH
7412: LD_STRING chuikov
7414: PPUSH
7415: CALL_OW 500
// Dial_FinishDepot ;
7419: CALL 9517 0 0
// end ; end ;
7423: PPOPN 1
7425: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 266
7435: PUSH
7436: LD_INT 7
7438: EQUAL
7439: PUSH
7440: LD_EXP 14
7444: NOT
7445: AND
7446: IFFALSE 7452
// Dial_LabUpgraded ;
7448: CALL 9833 0 0
// end ;
7452: PPOPN 1
7454: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
7455: LD_VAR 0 1
7459: PUSH
7460: LD_INT 3
7462: EQUAL
7463: PUSH
7464: LD_VAR 0 2
7468: PUSH
7469: LD_INT 2
7471: EQUAL
7472: AND
7473: PUSH
7474: LD_VAR 0 1
7478: PUSH
7479: LD_INT 2
7481: EQUAL
7482: PUSH
7483: LD_VAR 0 2
7487: PUSH
7488: LD_INT 3
7490: EQUAL
7491: AND
7492: OR
7493: IFFALSE 7515
// begin if dial_contactBlock then
7495: LD_EXP 15
7499: IFFALSE 7503
// exit ;
7501: GO 7559
// dial_contactBlock = true ;
7503: LD_ADDR_EXP 15
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// Dial_Contact ;
7511: CALL 11600 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
7515: LD_VAR 0 1
7519: PUSH
7520: LD_INT 3
7522: EQUAL
7523: PUSH
7524: LD_VAR 0 2
7528: PUSH
7529: LD_INT 6
7531: EQUAL
7532: AND
7533: PUSH
7534: LD_VAR 0 1
7538: PUSH
7539: LD_INT 6
7541: EQUAL
7542: PUSH
7543: LD_VAR 0 2
7547: PUSH
7548: LD_INT 3
7550: EQUAL
7551: AND
7552: OR
7553: IFFALSE 7559
// Lose_SelfAttack ;
7555: CALL 6576 0 0
// end ;
7559: PPOPN 2
7561: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
7562: LD_VAR 0 1
7566: PUSH
7567: LD_EXP 38
7571: EQUAL
7572: IFFALSE 7578
// Lose_Burlak ;
7574: CALL 6546 0 0
// if unit = Gaydar then
7578: LD_VAR 0 1
7582: PUSH
7583: LD_EXP 50
7587: EQUAL
7588: IFFALSE 7594
// Lose_Gaydar ;
7590: CALL 6561 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 255
7603: PUSH
7604: LD_INT 3
7606: EQUAL
7607: PUSH
7608: LD_VAR 0 1
7612: PPUSH
7613: CALL_OW 247
7617: PUSH
7618: LD_INT 1
7620: EQUAL
7621: AND
7622: IFFALSE 7638
// lostUnits = lostUnits + 1 ;
7624: LD_ADDR_EXP 22
7628: PUSH
7629: LD_EXP 22
7633: PUSH
7634: LD_INT 1
7636: PLUS
7637: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
7638: LD_VAR 0 1
7642: PPUSH
7643: CALL_OW 255
7647: PUSH
7648: LD_INT 2
7650: EQUAL
7651: PUSH
7652: LD_VAR 0 1
7656: PPUSH
7657: CALL_OW 247
7661: PUSH
7662: LD_INT 1
7664: EQUAL
7665: AND
7666: PUSH
7667: LD_EXP 50
7671: PPUSH
7672: CALL_OW 305
7676: NOT
7677: AND
7678: IFFALSE 7694
// killedArabianUnits = killedArabianUnits + 1 ;
7680: LD_ADDR_EXP 20
7684: PUSH
7685: LD_EXP 20
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: ST_TO_ADDR
// end ; end_of_file
7694: PPOPN 1
7696: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
7697: LD_INT 0
7699: PPUSH
7700: PPUSH
// if exist_mode then
7701: LD_VAR 0 2
7705: IFFALSE 7730
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7707: LD_ADDR_VAR 0 5
7711: PUSH
7712: LD_EXP 27
7716: PUSH
7717: LD_VAR 0 1
7721: STR
7722: PPUSH
7723: CALL_OW 34
7727: ST_TO_ADDR
7728: GO 7745
// unit := NewCharacter ( ident ) ;
7730: LD_ADDR_VAR 0 5
7734: PUSH
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 25
7744: ST_TO_ADDR
// if class then
7745: LD_VAR 0 3
7749: IFFALSE 7765
// SetClass ( unit , class ) ;
7751: LD_VAR 0 5
7755: PPUSH
7756: LD_VAR 0 3
7760: PPUSH
7761: CALL_OW 336
// result := unit ;
7765: LD_ADDR_VAR 0 4
7769: PUSH
7770: LD_VAR 0 5
7774: ST_TO_ADDR
// end ;
7775: LD_VAR 0 4
7779: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
7780: LD_INT 0
7782: PPUSH
7783: PPUSH
// for unit in units do
7784: LD_ADDR_VAR 0 5
7788: PUSH
7789: LD_VAR 0 1
7793: PUSH
7794: FOR_IN
7795: IFFALSE 7818
// PlaceUnitArea ( unit , area , spawnMode ) ;
7797: LD_VAR 0 5
7801: PPUSH
7802: LD_VAR 0 2
7806: PPUSH
7807: LD_VAR 0 3
7811: PPUSH
7812: CALL_OW 49
7816: GO 7794
7818: POP
7819: POP
// end ;
7820: LD_VAR 0 4
7824: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7825: LD_INT 0
7827: PPUSH
7828: PPUSH
7829: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: LD_VAR 0 1
7839: PUSH
7840: LD_EXP 38
7844: PUSH
7845: LD_EXP 39
7849: PUSH
7850: LD_EXP 42
7854: PUSH
7855: LD_EXP 43
7859: PUSH
7860: LD_EXP 40
7864: PUSH
7865: LD_EXP 41
7869: PUSH
7870: LD_EXP 44
7874: PUSH
7875: LD_EXP 45
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: DIFF
7890: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7891: LD_ADDR_VAR 0 7
7895: PUSH
7896: LD_VAR 0 1
7900: PUSH
7901: LD_INT 1
7903: PPUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 12
7913: ARRAY
7914: ST_TO_ADDR
// if radio then
7915: LD_VAR 0 4
7919: IFFALSE 7968
// begin if GetSex ( speaker ) = sex_male then
7921: LD_VAR 0 7
7925: PPUSH
7926: CALL_OW 258
7930: PUSH
7931: LD_INT 1
7933: EQUAL
7934: IFFALSE 7952
// SayRadio ( speaker , dialogMID ) else
7936: LD_VAR 0 7
7940: PPUSH
7941: LD_VAR 0 2
7945: PPUSH
7946: CALL_OW 94
7950: GO 7966
// SayRadio ( speaker , dialogFID ) ;
7952: LD_VAR 0 7
7956: PPUSH
7957: LD_VAR 0 3
7961: PPUSH
7962: CALL_OW 94
// end else
7966: GO 8013
// begin if GetSex ( speaker ) = sex_male then
7968: LD_VAR 0 7
7972: PPUSH
7973: CALL_OW 258
7977: PUSH
7978: LD_INT 1
7980: EQUAL
7981: IFFALSE 7999
// Say ( speaker , dialogMID ) else
7983: LD_VAR 0 7
7987: PPUSH
7988: LD_VAR 0 2
7992: PPUSH
7993: CALL_OW 88
7997: GO 8013
// Say ( speaker , dialogFID ) ;
7999: LD_VAR 0 7
8003: PPUSH
8004: LD_VAR 0 3
8008: PPUSH
8009: CALL_OW 88
// end ; result := speaker ;
8013: LD_ADDR_VAR 0 5
8017: PUSH
8018: LD_VAR 0 7
8022: ST_TO_ADDR
// end ;
8023: LD_VAR 0 5
8027: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8028: LD_INT 0
8030: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8031: LD_VAR 0 1
8035: PPUSH
8036: CALL_OW 255
8040: PUSH
8041: LD_VAR 0 3
8045: EQUAL
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: CALL_OW 302
8056: AND
8057: IFFALSE 8079
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8059: LD_VAR 0 1
8063: PPUSH
8064: LD_EXP 26
8068: PUSH
8069: LD_VAR 0 2
8073: STR
8074: PPUSH
8075: CALL_OW 38
// end ;
8079: LD_VAR 0 4
8083: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8084: LD_INT 0
8086: PPUSH
8087: PPUSH
8088: PPUSH
// resultCharactersToSave = [ ] ;
8089: LD_ADDR_VAR 0 6
8093: PUSH
8094: EMPTY
8095: ST_TO_ADDR
// for unit in characters do
8096: LD_ADDR_VAR 0 5
8100: PUSH
8101: LD_VAR 0 1
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8155
// if GetSide ( unit ) = side and IsOK ( unit ) then
8109: LD_VAR 0 5
8113: PPUSH
8114: CALL_OW 255
8118: PUSH
8119: LD_VAR 0 3
8123: EQUAL
8124: PUSH
8125: LD_VAR 0 5
8129: PPUSH
8130: CALL_OW 302
8134: AND
8135: IFFALSE 8153
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8137: LD_ADDR_VAR 0 6
8141: PUSH
8142: LD_VAR 0 6
8146: PUSH
8147: LD_VAR 0 5
8151: ADD
8152: ST_TO_ADDR
8153: GO 8106
8155: POP
8156: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8157: LD_VAR 0 6
8161: PPUSH
8162: LD_EXP 26
8166: PUSH
8167: LD_VAR 0 2
8171: STR
8172: PPUSH
8173: CALL_OW 38
// end ;
8177: LD_VAR 0 4
8181: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
8182: LD_INT 0
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
8188: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8189: LD_ADDR_VAR 0 3
8193: PUSH
8194: LD_INT 22
8196: PUSH
8197: LD_INT 3
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 21
8206: PUSH
8207: LD_INT 1
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 50
8216: PUSH
8217: EMPTY
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: PPUSH
8225: CALL_OW 69
8229: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
8230: LD_ADDR_VAR 0 3
8234: PUSH
8235: LD_VAR 0 3
8239: PUSH
8240: LD_EXP 38
8244: DIFF
8245: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
8246: LD_ADDR_VAR 0 3
8250: PUSH
8251: LD_VAR 0 3
8255: PUSH
8256: LD_EXP 48
8260: DIFF
8261: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
8262: LD_ADDR_VAR 0 4
8266: PUSH
8267: LD_STRING text
8269: PPUSH
8270: LD_INT 8
8272: PPUSH
8273: LD_INT 8
8275: PPUSH
8276: LD_INT -5
8278: PUSH
8279: LD_EXP 38
8283: PUSH
8284: LD_INT -6
8286: PUSH
8287: LD_INT -2
8289: PUSH
8290: LD_INT -3
8292: PUSH
8293: LD_INT -5
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: LD_VAR 0 3
8308: ADD
8309: PUSH
8310: LD_INT -6
8312: PUSH
8313: LD_INT -4
8315: PUSH
8316: LD_EXP 48
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: ADD
8326: PPUSH
8327: LD_INT 1
8329: PUSH
8330: LD_INT 3
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 4
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 42
8356: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
8357: LD_VAR 0 3
8361: PPUSH
8362: LD_INT 6
8364: PPUSH
8365: CALL_OW 235
// SetSide ( Popov , 6 ) ;
8369: LD_EXP 48
8373: PPUSH
8374: LD_INT 6
8376: PPUSH
8377: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
8381: LD_VAR 0 4
8385: PPUSH
8386: LD_INT 3
8388: PPUSH
8389: CALL_OW 235
// burlakTeam = selectedPeople ;
8393: LD_ADDR_EXP 51
8397: PUSH
8398: LD_VAR 0 4
8402: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
8403: LD_ADDR_EXP 52
8407: PUSH
8408: LD_INT 22
8410: PUSH
8411: LD_INT 6
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 21
8420: PUSH
8421: LD_INT 1
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PPUSH
8432: CALL_OW 69
8436: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
8437: LD_ADDR_EXP 52
8441: PUSH
8442: LD_EXP 52
8446: PUSH
8447: LD_EXP 45
8451: DIFF
8452: ST_TO_ADDR
// if not Gnyevko in selectedPeople then
8453: LD_EXP 39
8457: PUSH
8458: LD_VAR 0 4
8462: IN
8463: NOT
8464: IFFALSE 8481
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
8466: LD_EXP 39
8470: PPUSH
8471: LD_STRING Gnyevko
8473: PPUSH
8474: LD_INT 6
8476: PPUSH
8477: CALL 8028 0 3
// if not Kovalyuk in selectedPeople then
8481: LD_EXP 41
8485: PUSH
8486: LD_VAR 0 4
8490: IN
8491: NOT
8492: IFFALSE 8509
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
8494: LD_EXP 41
8498: PPUSH
8499: LD_STRING Kovalyuk
8501: PPUSH
8502: LD_INT 6
8504: PPUSH
8505: CALL 8028 0 3
// if not Kirilenkova in selectedPeople then
8509: LD_EXP 40
8513: PUSH
8514: LD_VAR 0 4
8518: IN
8519: NOT
8520: IFFALSE 8537
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
8522: LD_EXP 40
8526: PPUSH
8527: LD_STRING Kirilenkova
8529: PPUSH
8530: LD_INT 6
8532: PPUSH
8533: CALL 8028 0 3
// if not Scholtze in selectedPeople then
8537: LD_EXP 44
8541: PUSH
8542: LD_VAR 0 4
8546: IN
8547: NOT
8548: IFFALSE 8565
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
8550: LD_EXP 44
8554: PPUSH
8555: LD_STRING Scholtze
8557: PPUSH
8558: LD_INT 6
8560: PPUSH
8561: CALL 8028 0 3
// if not Belkov in selectedPeople then
8565: LD_EXP 42
8569: PUSH
8570: LD_VAR 0 4
8574: IN
8575: NOT
8576: IFFALSE 8593
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
8578: LD_EXP 42
8582: PPUSH
8583: LD_STRING Belkov
8585: PPUSH
8586: LD_INT 6
8588: PPUSH
8589: CALL 8028 0 3
// if not Belkov2 in selectedPeople then
8593: LD_EXP 43
8597: PUSH
8598: LD_VAR 0 4
8602: IN
8603: NOT
8604: IFFALSE 8621
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
8606: LD_EXP 43
8610: PPUSH
8611: LD_STRING Belkov2
8613: PPUSH
8614: LD_INT 6
8616: PPUSH
8617: CALL 8028 0 3
// others = popovTeam diff Popov ;
8621: LD_ADDR_VAR 0 5
8625: PUSH
8626: LD_EXP 52
8630: PUSH
8631: LD_EXP 48
8635: DIFF
8636: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
8637: LD_VAR 0 5
8641: PPUSH
8642: LD_STRING other_survivors_with_popov
8644: PPUSH
8645: LD_INT 6
8647: PPUSH
8648: CALL 8084 0 3
// end ; end_of_file
8652: LD_VAR 0 1
8656: RET
// export function MissionIntro ; var i , unit ; begin
8657: LD_INT 0
8659: PPUSH
8660: PPUSH
8661: PPUSH
// CenterNowOnUnits ( Burlak ) ;
8662: LD_EXP 38
8666: PPUSH
8667: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
8671: LD_EXP 53
8675: PPUSH
8676: LD_STRING D1-RSol1-1
8678: PPUSH
8679: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
8683: LD_EXP 49
8687: PPUSH
8688: LD_STRING D1-Pla-1
8690: PPUSH
8691: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
8695: LD_EXP 38
8699: PPUSH
8700: LD_STRING D1-Bur-1
8702: PPUSH
8703: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
8707: LD_EXP 49
8711: PPUSH
8712: LD_STRING D1-Pla-2
8714: PPUSH
8715: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
8719: LD_EXP 38
8723: PPUSH
8724: LD_STRING D1-Bur-2
8726: PPUSH
8727: CALL_OW 88
// SelectCharacters ;
8731: CALL 8182 0 0
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8739: LD_STRING M1
8741: PPUSH
8742: CALL_OW 337
// SaveForQuickRestart ;
8746: CALL_OW 22
// for unit in popovTeam do
8750: LD_ADDR_VAR 0 3
8754: PUSH
8755: LD_EXP 52
8759: PUSH
8760: FOR_IN
8761: IFFALSE 8833
// begin for i := 3 to russianCargoPath1 do
8763: LD_ADDR_VAR 0 2
8767: PUSH
8768: DOUBLE
8769: LD_INT 3
8771: DEC
8772: ST_TO_ADDR
8773: LD_EXP 31
8777: PUSH
8778: FOR_TO
8779: IFFALSE 8822
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8781: LD_VAR 0 3
8785: PPUSH
8786: LD_EXP 31
8790: PUSH
8791: LD_VAR 0 2
8795: ARRAY
8796: PUSH
8797: LD_INT 1
8799: ARRAY
8800: PPUSH
8801: LD_EXP 31
8805: PUSH
8806: LD_VAR 0 2
8810: ARRAY
8811: PUSH
8812: LD_INT 2
8814: ARRAY
8815: PPUSH
8816: CALL_OW 171
8820: GO 8778
8822: POP
8823: POP
// wait ( 0 0$01 ) ;
8824: LD_INT 35
8826: PPUSH
8827: CALL_OW 67
// end ;
8831: GO 8760
8833: POP
8834: POP
// end ;
8835: LD_VAR 0 1
8839: RET
// every 0 0$1 do var unit , driver ;
8840: GO 8842
8842: DISABLE
8843: LD_INT 0
8845: PPUSH
8846: PPUSH
// begin enable ;
8847: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
8848: LD_INT 4
8850: PPUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 6
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PPUSH
8861: CALL_OW 70
8865: NOT
8866: PUSH
8867: LD_INT 4
8869: PPUSH
8870: LD_INT 22
8872: PUSH
8873: LD_INT 3
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 2
8882: PUSH
8883: LD_INT 21
8885: PUSH
8886: LD_INT 1
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 21
8895: PUSH
8896: LD_INT 2
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 70
8916: NOT
8917: AND
8918: IFFALSE 8922
// exit ;
8920: GO 9273
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 4
8929: PPUSH
8930: LD_INT 22
8932: PUSH
8933: LD_INT 6
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 70
8944: PUSH
8945: FOR_IN
8946: IFFALSE 9001
// begin RemoveUnit ( unit ) ;
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
8957: LD_VAR 0 1
8961: PUSH
8962: LD_EXP 52
8966: IN
8967: NOT
8968: PUSH
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 264
8978: PUSH
8979: LD_INT 51
8981: EQUAL
8982: AND
8983: IFFALSE 8999
// evacuatedCargos = evacuatedCargos + 1 ;
8985: LD_ADDR_EXP 9
8989: PUSH
8990: LD_EXP 9
8994: PUSH
8995: LD_INT 1
8997: PLUS
8998: ST_TO_ADDR
// end ;
8999: GO 8945
9001: POP
9002: POP
// if canExitMap then
9003: LD_EXP 5
9007: IFFALSE 9273
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9009: LD_ADDR_VAR 0 1
9013: PUSH
9014: LD_INT 4
9016: PPUSH
9017: LD_INT 22
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 2
9029: PUSH
9030: LD_INT 21
9032: PUSH
9033: LD_INT 1
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 21
9042: PUSH
9043: LD_INT 2
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PPUSH
9059: CALL_OW 70
9063: PUSH
9064: FOR_IN
9065: IFFALSE 9271
// begin if GetType ( unit ) = unit_vehicle then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 247
9076: PUSH
9077: LD_INT 2
9079: EQUAL
9080: IFFALSE 9180
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
9082: LD_VAR 0 1
9086: PPUSH
9087: CALL_OW 313
9091: PUSH
9092: LD_INT 1
9094: ARRAY
9095: PUSH
9096: LD_EXP 38
9100: PUSH
9101: LD_EXP 39
9105: PUSH
9106: LD_EXP 40
9110: PUSH
9111: LD_EXP 41
9115: PUSH
9116: LD_EXP 42
9120: PUSH
9121: LD_EXP 43
9125: PUSH
9126: LD_EXP 44
9130: PUSH
9131: LD_EXP 45
9135: PUSH
9136: LD_EXP 50
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: IN
9152: NOT
9153: IFFALSE 9180
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
9155: LD_ADDR_EXP 55
9159: PUSH
9160: LD_EXP 55
9164: PUSH
9165: LD_VAR 0 1
9169: PPUSH
9170: CALL_OW 313
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: ADD
9179: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
9180: LD_VAR 0 1
9184: PUSH
9185: LD_EXP 38
9189: PUSH
9190: LD_EXP 39
9194: PUSH
9195: LD_EXP 40
9199: PUSH
9200: LD_EXP 41
9204: PUSH
9205: LD_EXP 42
9209: PUSH
9210: LD_EXP 43
9214: PUSH
9215: LD_EXP 44
9219: PUSH
9220: LD_EXP 45
9224: PUSH
9225: LD_EXP 50
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: IN
9241: NOT
9242: IFFALSE 9260
// randomsToSave = randomsToSave ^ unit ;
9244: LD_ADDR_EXP 55
9248: PUSH
9249: LD_EXP 55
9253: PUSH
9254: LD_VAR 0 1
9258: ADD
9259: ST_TO_ADDR
// RemoveUnit ( unit ) ;
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 64
// end ;
9269: GO 9064
9271: POP
9272: POP
// end ;
9273: PPOPN 2
9275: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
9276: LD_INT 0
9278: PPUSH
9279: PPUSH
// CenterNowOnUnits ( building ) ;
9280: LD_VAR 0 1
9284: PPUSH
9285: CALL_OW 87
// InGameOn ;
9289: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
9293: LD_EXP 49
9297: PPUSH
9298: LD_STRING D2a-Pla-1
9300: PPUSH
9301: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
9305: LD_ADDR_VAR 0 3
9309: PUSH
9310: LD_INT 22
9312: PUSH
9313: LD_INT 3
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 21
9322: PUSH
9323: LD_INT 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 25
9332: PUSH
9333: LD_INT 2
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: PPUSH
9345: CALL_OW 69
9349: PUSH
9350: FOR_IN
9351: IFFALSE 9389
// if GetDistUnits ( building , unit ) < 10 then
9353: LD_VAR 0 1
9357: PPUSH
9358: LD_VAR 0 3
9362: PPUSH
9363: CALL_OW 296
9367: PUSH
9368: LD_INT 10
9370: LESS
9371: IFFALSE 9387
// ComDismantle ( unit , building ) ;
9373: LD_VAR 0 3
9377: PPUSH
9378: LD_VAR 0 1
9382: PPUSH
9383: CALL_OW 167
9387: GO 9350
9389: POP
9390: POP
// repeat wait ( 0 0$1 ) ;
9391: LD_INT 35
9393: PPUSH
9394: CALL_OW 67
// until not IsPlaced ( building ) ;
9398: LD_VAR 0 1
9402: PPUSH
9403: CALL_OW 305
9407: NOT
9408: IFFALSE 9391
// InGameOff ;
9410: CALL_OW 9
// end ;
9414: LD_VAR 0 2
9418: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
9419: LD_EXP 45
9423: PPUSH
9424: CALL_OW 255
9428: PUSH
9429: LD_INT 6
9431: EQUAL
9432: IFFALSE 9514
9434: GO 9436
9436: DISABLE
9437: LD_INT 0
9439: PPUSH
// begin enable ;
9440: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9441: LD_ADDR_VAR 0 1
9445: PUSH
9446: LD_INT 22
9448: PUSH
9449: LD_INT 3
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 21
9458: PUSH
9459: LD_INT 1
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PPUSH
9470: CALL_OW 69
9474: PUSH
9475: FOR_IN
9476: IFFALSE 9512
// if GetDistUnits ( unit , Kuzmov ) < 9 then
9478: LD_VAR 0 1
9482: PPUSH
9483: LD_EXP 45
9487: PPUSH
9488: CALL_OW 296
9492: PUSH
9493: LD_INT 9
9495: LESS
9496: IFFALSE 9510
// SetSide ( Kuzmov , 3 ) ;
9498: LD_EXP 45
9502: PPUSH
9503: LD_INT 3
9505: PPUSH
9506: CALL_OW 235
9510: GO 9475
9512: POP
9513: POP
// end ;
9514: PPOPN 1
9516: END
// export function Dial_FinishDepot ; var i ; begin
9517: LD_INT 0
9519: PPUSH
9520: PPUSH
// startEvacuation = true ;
9521: LD_ADDR_EXP 7
9525: PUSH
9526: LD_INT 1
9528: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
9529: LD_STRING MOutBuild
9531: PPUSH
9532: CALL_OW 337
// uc_side = 6 ;
9536: LD_ADDR_OWVAR 20
9540: PUSH
9541: LD_INT 6
9543: ST_TO_ADDR
// uc_nation = 3 ;
9544: LD_ADDR_OWVAR 21
9548: PUSH
9549: LD_INT 3
9551: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
9552: LD_ADDR_OWVAR 37
9556: PUSH
9557: LD_INT 21
9559: ST_TO_ADDR
// vc_control = control_manual ;
9560: LD_ADDR_OWVAR 38
9564: PUSH
9565: LD_INT 1
9567: ST_TO_ADDR
// vc_engine = engine_combustion ;
9568: LD_ADDR_OWVAR 39
9572: PUSH
9573: LD_INT 1
9575: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
9576: LD_ADDR_OWVAR 40
9580: PUSH
9581: LD_INT 51
9583: ST_TO_ADDR
// firstCargo = CreateVehicle ;
9584: LD_ADDR_EXP 54
9588: PUSH
9589: CALL_OW 45
9593: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
9594: LD_EXP 54
9598: PPUSH
9599: LD_INT 3
9601: PPUSH
9602: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
9606: LD_EXP 54
9610: PPUSH
9611: LD_INT 3
9613: PPUSH
9614: LD_INT 0
9616: PPUSH
9617: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
9621: LD_INT 1
9623: PPUSH
9624: LD_INT 3
9626: PPUSH
9627: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
9631: CALL_OW 44
9635: PPUSH
9636: LD_EXP 54
9640: PPUSH
9641: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
9645: LD_EXP 54
9649: PPUSH
9650: LD_INT 1
9652: PPUSH
9653: LD_INT 100
9655: PPUSH
9656: CALL_OW 291
// for i := 1 to 19 do
9660: LD_ADDR_VAR 0 2
9664: PUSH
9665: DOUBLE
9666: LD_INT 1
9668: DEC
9669: ST_TO_ADDR
9670: LD_INT 19
9672: PUSH
9673: FOR_TO
9674: IFFALSE 9717
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
9676: LD_EXP 54
9680: PPUSH
9681: LD_EXP 31
9685: PUSH
9686: LD_VAR 0 2
9690: ARRAY
9691: PUSH
9692: LD_INT 1
9694: ARRAY
9695: PPUSH
9696: LD_EXP 31
9700: PUSH
9701: LD_VAR 0 2
9705: ARRAY
9706: PUSH
9707: LD_INT 2
9709: ARRAY
9710: PPUSH
9711: CALL_OW 171
9715: GO 9673
9717: POP
9718: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
9719: LD_EXP 54
9723: PPUSH
9724: LD_INT 105
9726: PPUSH
9727: LD_INT 123
9729: PPUSH
9730: CALL_OW 171
// AddComUnload ( firstCargo ) ;
9734: LD_EXP 54
9738: PPUSH
9739: CALL_OW 219
// for i := 21 to russianCargoPath1 do
9743: LD_ADDR_VAR 0 2
9747: PUSH
9748: DOUBLE
9749: LD_INT 21
9751: DEC
9752: ST_TO_ADDR
9753: LD_EXP 31
9757: PUSH
9758: FOR_TO
9759: IFFALSE 9802
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
9761: LD_EXP 54
9765: PPUSH
9766: LD_EXP 31
9770: PUSH
9771: LD_VAR 0 2
9775: ARRAY
9776: PUSH
9777: LD_INT 1
9779: ARRAY
9780: PPUSH
9781: LD_EXP 31
9785: PUSH
9786: LD_VAR 0 2
9790: ARRAY
9791: PUSH
9792: LD_INT 2
9794: ARRAY
9795: PPUSH
9796: CALL_OW 171
9800: GO 9758
9802: POP
9803: POP
// Say ( Burlak , D2-Bur-1 ) ;
9804: LD_EXP 38
9808: PPUSH
9809: LD_STRING D2-Bur-1
9811: PPUSH
9812: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
9816: LD_EXP 49
9820: PPUSH
9821: LD_STRING D2-Pla-1
9823: PPUSH
9824: CALL_OW 94
// end ;
9828: LD_VAR 0 1
9832: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
9833: LD_INT 0
9835: PPUSH
9836: PPUSH
// dial_labUpgradedBlock = true ;
9837: LD_ADDR_EXP 14
9841: PUSH
9842: LD_INT 1
9844: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
9845: LD_ADDR_VAR 0 2
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_INT 3
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 21
9862: PUSH
9863: LD_INT 1
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 26
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 25
9882: PUSH
9883: LD_INT 4
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: PUSH
9901: LD_EXP 38
9905: PUSH
9906: LD_EXP 39
9910: PUSH
9911: LD_EXP 40
9915: PUSH
9916: LD_EXP 41
9920: PUSH
9921: LD_EXP 42
9925: PUSH
9926: LD_EXP 43
9930: PUSH
9931: LD_EXP 44
9935: PUSH
9936: LD_EXP 45
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: DIFF
9951: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
9952: LD_EXP 44
9956: PPUSH
9957: CALL_OW 302
9961: PUSH
9962: LD_EXP 44
9966: PPUSH
9967: CALL_OW 255
9971: PUSH
9972: LD_INT 3
9974: EQUAL
9975: AND
9976: IFFALSE 10004
// begin Say ( Scholtze , D5-Sch-1 ) ;
9978: LD_EXP 44
9982: PPUSH
9983: LD_STRING D5-Sch-1
9985: PPUSH
9986: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
9990: LD_EXP 38
9994: PPUSH
9995: LD_STRING D5-Bur-1
9997: PPUSH
9998: CALL_OW 88
// end else
10002: GO 10139
// if randomMaleSci then
10004: LD_VAR 0 2
10008: IFFALSE 10040
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
10010: LD_VAR 0 2
10014: PUSH
10015: LD_INT 1
10017: ARRAY
10018: PPUSH
10019: LD_STRING D5-RSci1-1
10021: PPUSH
10022: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
10026: LD_EXP 38
10030: PPUSH
10031: LD_STRING D5-Bur-1
10033: PPUSH
10034: CALL_OW 88
// end else
10038: GO 10139
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
10040: LD_ADDR_VAR 0 2
10044: PUSH
10045: LD_INT 22
10047: PUSH
10048: LD_INT 3
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 26
10067: PUSH
10068: LD_INT 1
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 25
10077: PUSH
10078: LD_INT 4
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: PUSH
10096: LD_EXP 38
10100: PUSH
10101: EMPTY
10102: LIST
10103: DIFF
10104: ST_TO_ADDR
// if randomMaleSci then
10105: LD_VAR 0 2
10109: IFFALSE 10139
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
10111: LD_VAR 0 2
10115: PUSH
10116: LD_INT 1
10118: ARRAY
10119: PPUSH
10120: LD_STRING D5-RSci1-1
10122: PPUSH
10123: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
10127: LD_EXP 38
10131: PPUSH
10132: LD_STRING D5-Bur-1
10134: PPUSH
10135: CALL_OW 88
// end ; end ; end ;
10139: LD_VAR 0 1
10143: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
10144: LD_EXP 54
10148: PPUSH
10149: LD_INT 105
10151: PPUSH
10152: LD_INT 123
10154: PPUSH
10155: CALL_OW 297
10159: PUSH
10160: LD_INT 12
10162: LESS
10163: IFFALSE 10189
10165: GO 10167
10167: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
10168: LD_EXP 54
10172: PPUSH
10173: CALL_OW 313
10177: PUSH
10178: LD_INT 1
10180: ARRAY
10181: PPUSH
10182: LD_STRING D2a-RSol1-1
10184: PPUSH
10185: CALL_OW 88
10189: END
// every 0 0$15 trigger startEvacuation do
10190: LD_EXP 7
10194: IFFALSE 10204
10196: GO 10198
10198: DISABLE
// begin enable ;
10199: ENABLE
// CreateEvacuateUnit ;
10200: CALL 2149 0 0
// end ;
10204: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
10205: LD_EXP 9
10209: PUSH
10210: LD_INT 3
10212: GREATEREQUAL
10213: IFFALSE 10312
10215: GO 10217
10217: DISABLE
// begin if IsOk ( Kuzmov ) then
10218: LD_EXP 45
10222: PPUSH
10223: CALL_OW 302
10227: IFFALSE 10297
// begin DialogueOn ;
10229: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
10233: LD_EXP 45
10237: PPUSH
10238: LD_STRING D2b-Kuz-1
10240: PPUSH
10241: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
10245: LD_EXP 38
10249: PPUSH
10250: LD_STRING D2b-Bur-1
10252: PPUSH
10253: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
10257: LD_EXP 45
10261: PPUSH
10262: LD_STRING D2b-Kuz-2
10264: PPUSH
10265: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
10269: LD_EXP 38
10273: PPUSH
10274: LD_STRING D2b-Bur-2
10276: PPUSH
10277: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
10281: LD_EXP 45
10285: PPUSH
10286: LD_STRING D2b-Kuz-3
10288: PPUSH
10289: CALL_OW 88
// DialogueOff ;
10293: CALL_OW 7
// end ; Query ( Q1 ) ;
10297: LD_STRING Q1
10299: PPUSH
10300: CALL_OW 97
// canStealCargo = true ;
10304: LD_ADDR_EXP 10
10308: PUSH
10309: LD_INT 1
10311: ST_TO_ADDR
// end ;
10312: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
10313: LD_EXP 10
10317: IFFALSE 10600
10319: GO 10321
10321: DISABLE
10322: LD_INT 0
10324: PPUSH
10325: PPUSH
// begin enable ;
10326: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
10327: LD_ADDR_VAR 0 2
10331: PUSH
10332: LD_INT 22
10334: PUSH
10335: LD_INT 6
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 21
10344: PUSH
10345: LD_INT 2
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 34
10354: PUSH
10355: LD_INT 51
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: PPUSH
10367: CALL_OW 69
10371: PUSH
10372: FOR_IN
10373: IFFALSE 10598
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
10375: LD_ADDR_VAR 0 1
10379: PUSH
10380: LD_INT 22
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 50
10402: PUSH
10403: EMPTY
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: PPUSH
10411: CALL_OW 69
10415: PUSH
10416: FOR_IN
10417: IFFALSE 10594
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos then
10419: LD_VAR 0 2
10423: PPUSH
10424: LD_VAR 0 1
10428: PPUSH
10429: CALL_OW 296
10433: PUSH
10434: LD_INT 8
10436: LESS
10437: PUSH
10438: LD_VAR 0 2
10442: PUSH
10443: LD_EXP 12
10447: IN
10448: NOT
10449: AND
10450: IFFALSE 10592
// begin stealCargos = stealCargos ^ cargo ;
10452: LD_ADDR_EXP 12
10456: PUSH
10457: LD_EXP 12
10461: PUSH
10462: LD_VAR 0 2
10466: ADD
10467: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
10468: LD_STRING QQrSteal
10470: PPUSH
10471: CALL_OW 97
10475: PUSH
10476: LD_INT 1
10478: DOUBLE
10479: EQUAL
10480: IFTRUE 10484
10482: GO 10560
10484: POP
// begin DialogueOn ;
10485: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
10489: LD_EXP 38
10493: PPUSH
10494: LD_STRING DQrSteal#1-Bur-1
10496: PPUSH
10497: CALL_OW 88
// DialogueOff ;
10501: CALL_OW 7
// ComMoveXY ( cargo , 115 , 126 ) ;
10505: LD_VAR 0 2
10509: PPUSH
10510: LD_INT 115
10512: PPUSH
10513: LD_INT 126
10515: PPUSH
10516: CALL_OW 111
// AddComUnload ( cargo ) ;
10520: LD_VAR 0 2
10524: PPUSH
10525: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 92
10536: PPUSH
10537: LD_INT 177
10539: PPUSH
10540: CALL_OW 171
// stealWarmCount = stealWarmCount + 1 ;
10544: LD_ADDR_EXP 11
10548: PUSH
10549: LD_EXP 11
10553: PUSH
10554: LD_INT 1
10556: PLUS
10557: ST_TO_ADDR
// end ; 2 :
10558: GO 10592
10560: LD_INT 2
10562: DOUBLE
10563: EQUAL
10564: IFTRUE 10568
10566: GO 10591
10568: POP
// begin DialogueOn ;
10569: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
10573: LD_EXP 38
10577: PPUSH
10578: LD_STRING DQrSteal#2-Bur-1
10580: PPUSH
10581: CALL_OW 88
// DialogueOff ;
10585: CALL_OW 7
// end ; end ;
10589: GO 10592
10591: POP
// end ;
10592: GO 10416
10594: POP
10595: POP
10596: GO 10372
10598: POP
10599: POP
// end ;
10600: PPOPN 2
10602: END
// every 0 0$10 trigger stealWarmCount = 3 do
10603: LD_EXP 11
10607: PUSH
10608: LD_INT 3
10610: EQUAL
10611: IFFALSE 10683
10613: GO 10615
10615: DISABLE
// begin DialogueOn ;
10616: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
10620: LD_EXP 49
10624: PPUSH
10625: LD_STRING D3A-Pla-1
10627: PPUSH
10628: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
10632: LD_EXP 38
10636: PPUSH
10637: LD_STRING D3A-Bur-1
10639: PPUSH
10640: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
10644: LD_EXP 49
10648: PPUSH
10649: LD_STRING D3A-Pla-2
10651: PPUSH
10652: CALL_OW 94
// if IsOK ( Kuzmov ) then
10656: LD_EXP 45
10660: PPUSH
10661: CALL_OW 302
10665: IFFALSE 10679
// Say ( Kuzmov , D3A-Kuz-2 ) ;
10667: LD_EXP 45
10671: PPUSH
10672: LD_STRING D3A-Kuz-2
10674: PPUSH
10675: CALL_OW 88
// DialogueOff ;
10679: CALL_OW 7
// end ;
10683: END
// every 0 0$10 trigger stealWarmCount = 6 do
10684: LD_EXP 11
10688: PUSH
10689: LD_INT 6
10691: EQUAL
10692: IFFALSE 10741
10694: GO 10696
10696: DISABLE
// begin DialogueOn ;
10697: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
10701: LD_EXP 49
10705: PPUSH
10706: LD_STRING D3B-Pla-1
10708: PPUSH
10709: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
10713: LD_EXP 38
10717: PPUSH
10718: LD_STRING D3B-Bur-1
10720: PPUSH
10721: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
10725: LD_EXP 49
10729: PPUSH
10730: LD_STRING D3B-Pla-2
10732: PPUSH
10733: CALL_OW 94
// DialogueOff ;
10737: CALL_OW 7
// end ;
10741: END
// every 0 0$10 trigger stealWarmCount = 7 do
10742: LD_EXP 11
10746: PUSH
10747: LD_INT 7
10749: EQUAL
10750: IFFALSE 10834
10752: GO 10754
10754: DISABLE
// begin DialogueOn ;
10755: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
10759: LD_EXP 49
10763: PPUSH
10764: LD_STRING D3C-Pla-1
10766: PPUSH
10767: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
10771: LD_EXP 38
10775: PPUSH
10776: LD_STRING D3C-Bur-1
10778: PPUSH
10779: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
10783: LD_EXP 49
10787: PPUSH
10788: LD_STRING D3C-Pla-2
10790: PPUSH
10791: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
10795: LD_EXP 38
10799: PPUSH
10800: LD_STRING D3C-Bur-2
10802: PPUSH
10803: CALL_OW 88
// if IsOK ( Kuzmov ) then
10807: LD_EXP 45
10811: PPUSH
10812: CALL_OW 302
10816: IFFALSE 10830
// Say ( Kuzmov , D3C-Kuz-2 ) ;
10818: LD_EXP 45
10822: PPUSH
10823: LD_STRING D3C-Kuz-2
10825: PPUSH
10826: CALL_OW 88
// DialogueOff ;
10830: CALL_OW 7
// end ;
10834: END
// every 0 0$10 trigger stealWarmCount = 8 do
10835: LD_EXP 11
10839: PUSH
10840: LD_INT 8
10842: EQUAL
10843: IFFALSE 11035
10845: GO 10847
10847: DISABLE
// begin canStealCargo = false ;
10848: LD_ADDR_EXP 10
10852: PUSH
10853: LD_INT 0
10855: ST_TO_ADDR
// DialogueOn ;
10856: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
10860: LD_EXP 49
10864: PPUSH
10865: LD_STRING D3D-Pla-1
10867: PPUSH
10868: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
10872: LD_EXP 38
10876: PPUSH
10877: LD_STRING D3D-Bur-1
10879: PPUSH
10880: CALL_OW 88
// if kurinOpinion = 0 then
10884: LD_EXP 2
10888: PUSH
10889: LD_INT 0
10891: EQUAL
10892: IFFALSE 10912
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
10894: LD_EXP 49
10898: PPUSH
10899: LD_STRING D3E-Pla-1
10901: PPUSH
10902: CALL_OW 94
// Lose_Arrest ;
10906: CALL 6591 0 0
// exit ;
10910: GO 11035
// end ; if meetBelkovBrother = 1 then
10912: LD_EXP 3
10916: PUSH
10917: LD_INT 1
10919: EQUAL
10920: IFFALSE 10940
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
10922: LD_EXP 49
10926: PPUSH
10927: LD_STRING D3E-Pla-1a
10929: PPUSH
10930: CALL_OW 94
// Lose_Arrest ;
10934: CALL 6591 0 0
// exit ;
10938: GO 11035
// end ; if platonovOpinion = 0 then
10940: LD_EXP 1
10944: PUSH
10945: LD_INT 0
10947: EQUAL
10948: IFFALSE 10968
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
10950: LD_EXP 49
10954: PPUSH
10955: LD_STRING D3E-Pla-1b
10957: PPUSH
10958: CALL_OW 94
// Lose_Arrest ;
10962: CALL 6591 0 0
// exit ;
10966: GO 11035
// end ; if platonovOpinion = 1 then
10968: LD_EXP 1
10972: PUSH
10973: LD_INT 1
10975: EQUAL
10976: IFFALSE 10996
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
10978: LD_EXP 49
10982: PPUSH
10983: LD_STRING D3E-Pla-1c
10985: PPUSH
10986: CALL_OW 94
// Lose_Arrest ;
10990: CALL 6591 0 0
// exit ;
10994: GO 11035
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
10996: LD_EXP 49
11000: PPUSH
11001: LD_STRING D3D-Pla-2
11003: PPUSH
11004: CALL_OW 94
// if IsOK ( Kuzmov ) then
11008: LD_EXP 45
11012: PPUSH
11013: CALL_OW 302
11017: IFFALSE 11031
// Say ( Kuzmov , D3D-Kuz-2 ) ;
11019: LD_EXP 45
11023: PPUSH
11024: LD_STRING D3D-Kuz-2
11026: PPUSH
11027: CALL_OW 88
// DialogueOff ;
11031: CALL_OW 7
// end ;
11035: END
// every 0 0$20 do var allyUntis ;
11036: GO 11038
11038: DISABLE
11039: LD_INT 0
11041: PPUSH
// begin enable ;
11042: ENABLE
// wait ( 0 0$10 ) ;
11043: LD_INT 350
11045: PPUSH
11046: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
11050: LD_ADDR_VAR 0 1
11054: PUSH
11055: LD_INT 22
11057: PUSH
11058: LD_INT 6
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 3
11067: PUSH
11068: LD_INT 60
11070: PUSH
11071: EMPTY
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 69
11086: PUSH
11087: LD_EXP 52
11091: DIFF
11092: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
11093: LD_ADDR_VAR 0 1
11097: PUSH
11098: LD_VAR 0 1
11102: PUSH
11103: LD_EXP 50
11107: DIFF
11108: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
11109: LD_ADDR_VAR 0 1
11113: PUSH
11114: LD_VAR 0 1
11118: PUSH
11119: LD_EXP 45
11123: DIFF
11124: ST_TO_ADDR
// if not allyUntis then
11125: LD_VAR 0 1
11129: NOT
11130: IFFALSE 11134
// exit ;
11132: GO 11158
// ComUnload ( allyUntis ) ;
11134: LD_VAR 0 1
11138: PPUSH
11139: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
11143: LD_VAR 0 1
11147: PPUSH
11148: LD_INT 92
11150: PPUSH
11151: LD_INT 176
11153: PPUSH
11154: CALL_OW 171
// end ;
11158: PPOPN 1
11160: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
11161: LD_EXP 9
11165: PUSH
11166: LD_EXP 13
11170: GREATEREQUAL
11171: IFFALSE 11184
11173: GO 11175
11175: DISABLE
// begin startEvacuation = false ;
11176: LD_ADDR_EXP 7
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// end ;
11184: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] ] ) do
11185: LD_EXP 9
11189: PUSH
11190: LD_EXP 13
11194: GREATEREQUAL
11195: PUSH
11196: LD_INT 22
11198: PUSH
11199: LD_INT 6
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: PPUSH
11209: CALL_OW 69
11213: NOT
11214: AND
11215: IFFALSE 11599
11217: GO 11219
11219: DISABLE
// begin wait ( 1 1$00 ) ;
11220: LD_INT 2100
11222: PPUSH
11223: CALL_OW 67
// DialogueOn ;
11227: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
11231: LD_EXP 49
11235: PPUSH
11236: LD_STRING D4-Pla-1
11238: PPUSH
11239: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
11243: LD_EXP 38
11247: PPUSH
11248: LD_STRING D4-Bur-1
11250: PPUSH
11251: CALL_OW 88
// DialogueOff ;
11255: CALL_OW 7
// wait ( 0 0$2 ) ;
11259: LD_INT 70
11261: PPUSH
11262: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
11266: LD_EXP 45
11270: PPUSH
11271: CALL_OW 302
11275: PUSH
11276: LD_EXP 45
11280: PPUSH
11281: CALL_OW 255
11285: PUSH
11286: LD_INT 3
11288: EQUAL
11289: AND
11290: IFFALSE 11572
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
11292: LD_EXP 45
11296: PPUSH
11297: LD_STRING D4-Kuz-1
11299: PPUSH
11300: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
11304: LD_EXP 42
11308: PPUSH
11309: CALL_OW 302
11313: PUSH
11314: LD_EXP 42
11318: PPUSH
11319: CALL_OW 255
11323: PUSH
11324: LD_INT 3
11326: EQUAL
11327: AND
11328: IFFALSE 11344
// Say ( Belkov , D4-Bel-1 ) else
11330: LD_EXP 42
11334: PPUSH
11335: LD_STRING D4-Bel-1
11337: PPUSH
11338: CALL_OW 88
11342: GO 11382
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
11344: LD_EXP 43
11348: PPUSH
11349: CALL_OW 302
11353: PUSH
11354: LD_EXP 43
11358: PPUSH
11359: CALL_OW 255
11363: PUSH
11364: LD_INT 3
11366: EQUAL
11367: AND
11368: IFFALSE 11382
// Say ( Belkov2 , D4-Bel-1 ) ;
11370: LD_EXP 43
11374: PPUSH
11375: LD_STRING D4-Bel-1
11377: PPUSH
11378: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
11382: LD_EXP 38
11386: PPUSH
11387: LD_STRING D4-Bur-2
11389: PPUSH
11390: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
11394: LD_EXP 39
11398: PPUSH
11399: CALL_OW 302
11403: PUSH
11404: LD_EXP 39
11408: PPUSH
11409: CALL_OW 255
11413: PUSH
11414: LD_INT 3
11416: EQUAL
11417: AND
11418: IFFALSE 11444
// begin Say ( Gnyevko , D4-Gny-2 ) ;
11420: LD_EXP 39
11424: PPUSH
11425: LD_STRING D4-Gny-2
11427: PPUSH
11428: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
11432: LD_EXP 38
11436: PPUSH
11437: LD_STRING D4-Bur-3
11439: PPUSH
11440: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
11444: LD_EXP 38
11448: PPUSH
11449: LD_STRING D4-Bur-3a
11451: PPUSH
11452: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
11456: LD_EXP 42
11460: PPUSH
11461: CALL_OW 302
11465: PUSH
11466: LD_EXP 42
11470: PPUSH
11471: CALL_OW 255
11475: PUSH
11476: LD_INT 3
11478: EQUAL
11479: AND
11480: IFFALSE 11496
// Say ( Belkov , D4-Bel-3 ) else
11482: LD_EXP 42
11486: PPUSH
11487: LD_STRING D4-Bel-3
11489: PPUSH
11490: CALL_OW 88
11494: GO 11534
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
11496: LD_EXP 43
11500: PPUSH
11501: CALL_OW 302
11505: PUSH
11506: LD_EXP 43
11510: PPUSH
11511: CALL_OW 255
11515: PUSH
11516: LD_INT 3
11518: EQUAL
11519: AND
11520: IFFALSE 11534
// Say ( Belkov2 , D4-Bel-3 ) ;
11522: LD_EXP 43
11526: PPUSH
11527: LD_STRING D4-Bel-3
11529: PPUSH
11530: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
11534: LD_EXP 41
11538: PPUSH
11539: CALL_OW 302
11543: PUSH
11544: LD_EXP 41
11548: PPUSH
11549: CALL_OW 255
11553: PUSH
11554: LD_INT 3
11556: EQUAL
11557: AND
11558: IFFALSE 11572
// Say ( Kovalyuk , D4-Kov-3 ) ;
11560: LD_EXP 41
11564: PPUSH
11565: LD_STRING D4-Kov-3
11567: PPUSH
11568: CALL_OW 88
// end ; enableAttacks = true ;
11572: LD_ADDR_EXP 16
11576: PUSH
11577: LD_INT 1
11579: ST_TO_ADDR
// wait ( 0 0$10 ) ;
11580: LD_INT 350
11582: PPUSH
11583: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
11587: LD_EXP 38
11591: PPUSH
11592: LD_STRING D7-Bur-1
11594: PPUSH
11595: CALL_OW 88
// end ;
11599: END
// export function Dial_Contact ; begin
11600: LD_INT 0
11602: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
11603: LD_EXP 38
11607: PPUSH
11608: LD_STRING D7-Bur-1a
11610: PPUSH
11611: CALL_OW 88
// wait ( 0 0$12 ) ;
11615: LD_INT 420
11617: PPUSH
11618: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
11622: LD_EXP 38
11626: PPUSH
11627: LD_STRING D7-Bur-1b
11629: PPUSH
11630: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
11634: LD_EXP 42
11638: PPUSH
11639: CALL_OW 302
11643: PUSH
11644: LD_EXP 42
11648: PPUSH
11649: CALL_OW 255
11653: PUSH
11654: LD_INT 3
11656: EQUAL
11657: AND
11658: IFFALSE 11674
// Say ( Belkov , D7-Bel-1 ) else
11660: LD_EXP 42
11664: PPUSH
11665: LD_STRING D7-Bel-1
11667: PPUSH
11668: CALL_OW 88
11672: GO 11712
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
11674: LD_EXP 43
11678: PPUSH
11679: CALL_OW 302
11683: PUSH
11684: LD_EXP 43
11688: PPUSH
11689: CALL_OW 255
11693: PUSH
11694: LD_INT 3
11696: EQUAL
11697: AND
11698: IFFALSE 11712
// Say ( Belkov2 , D7-Bel-1 ) ;
11700: LD_EXP 43
11704: PPUSH
11705: LD_STRING D7-Bel-1
11707: PPUSH
11708: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
11712: LD_EXP 45
11716: PPUSH
11717: CALL_OW 302
11721: PUSH
11722: LD_EXP 45
11726: PPUSH
11727: CALL_OW 255
11731: PUSH
11732: LD_INT 3
11734: EQUAL
11735: AND
11736: IFFALSE 11750
// Say ( Kuzmov , D7-Kuz-1 ) ;
11738: LD_EXP 45
11742: PPUSH
11743: LD_STRING D7-Kuz-1
11745: PPUSH
11746: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
11750: LD_EXP 41
11754: PPUSH
11755: CALL_OW 302
11759: PUSH
11760: LD_EXP 41
11764: PPUSH
11765: CALL_OW 255
11769: PUSH
11770: LD_INT 3
11772: EQUAL
11773: AND
11774: IFFALSE 11788
// Say ( Kovalyuk , D7-Kov-1 ) ;
11776: LD_EXP 41
11780: PPUSH
11781: LD_STRING D7-Kov-1
11783: PPUSH
11784: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11788: LD_EXP 44
11792: PPUSH
11793: CALL_OW 302
11797: PUSH
11798: LD_EXP 44
11802: PPUSH
11803: CALL_OW 255
11807: PUSH
11808: LD_INT 3
11810: EQUAL
11811: AND
11812: IFFALSE 11826
// Say ( Scholtze , D7-Sch-1 ) ;
11814: LD_EXP 44
11818: PPUSH
11819: LD_STRING D7-Sch-1
11821: PPUSH
11822: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
11826: LD_INT 22
11828: PUSH
11829: LD_INT 3
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 21
11838: PUSH
11839: LD_INT 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 26
11848: PUSH
11849: LD_INT 1
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 69
11865: PPUSH
11866: LD_STRING D7-RSol1-1
11868: PPUSH
11869: LD_STRING 
11871: PPUSH
11872: LD_INT 0
11874: PPUSH
11875: CALL 7825 0 4
// PrepareHeike ;
11879: CALL 2933 0 0
// wait ( 0 0$10 ) ;
11883: LD_INT 350
11885: PPUSH
11886: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
11890: LD_EXP 56
11894: PPUSH
11895: LD_STRING D7a-Hke-1
11897: PPUSH
11898: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
11902: LD_EXP 38
11906: PPUSH
11907: LD_STRING D7a-Bur-1
11909: PPUSH
11910: CALL_OW 88
// wait ( 0 0$50 ) ;
11914: LD_INT 1750
11916: PPUSH
11917: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
11921: LD_EXP 45
11925: PPUSH
11926: CALL_OW 302
11930: PUSH
11931: LD_EXP 45
11935: PPUSH
11936: CALL_OW 255
11940: PUSH
11941: LD_INT 3
11943: EQUAL
11944: AND
11945: IFFALSE 11961
// Say ( Kuzmov , D8-Kuz-1 ) else
11947: LD_EXP 45
11951: PPUSH
11952: LD_STRING D8-Kuz-1
11954: PPUSH
11955: CALL_OW 88
11959: GO 12014
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
11961: LD_INT 22
11963: PUSH
11964: LD_INT 3
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 21
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 26
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: LIST
11995: PPUSH
11996: CALL_OW 69
12000: PPUSH
12001: LD_STRING D8-RSol1-1
12003: PPUSH
12004: LD_STRING 
12006: PPUSH
12007: LD_INT 0
12009: PPUSH
12010: CALL 7825 0 4
// Say ( Burlak , D8-Bur-1 ) ;
12014: LD_EXP 38
12018: PPUSH
12019: LD_STRING D8-Bur-1
12021: PPUSH
12022: CALL_OW 88
// end ;
12026: LD_VAR 0 1
12030: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
12031: LD_EXP 50
12035: PPUSH
12036: CALL_OW 305
12040: NOT
12041: PUSH
12042: LD_INT 22
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 21
12054: PUSH
12055: LD_INT 3
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 50
12064: PUSH
12065: EMPTY
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: NOT
12078: AND
12079: PUSH
12080: LD_INT 22
12082: PUSH
12083: LD_INT 3
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 21
12092: PUSH
12093: LD_INT 1
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 50
12102: PUSH
12103: EMPTY
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 69
12115: PUSH
12116: LD_INT 5
12118: LESS
12119: AND
12120: PUSH
12121: LD_INT 5
12123: PPUSH
12124: LD_INT 22
12126: PUSH
12127: LD_INT 2
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: PPUSH
12137: CALL_OW 70
12141: PUSH
12142: LD_INT 3
12144: GREATER
12145: AND
12146: IFFALSE 12155
12148: GO 12150
12150: DISABLE
// Lose_ArabBreakthrough ;
12151: CALL 6606 0 0
12155: END
// every 1 1$30 trigger currentWave >= enemyWaves do
12156: LD_EXP 17
12160: PUSH
12161: LD_EXP 35
12165: GREATEREQUAL
12166: IFFALSE 12364
12168: GO 12170
12170: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
12171: LD_EXP 49
12175: PPUSH
12176: LD_STRING D9-Pla-1
12178: PPUSH
12179: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
12183: LD_EXP 38
12187: PPUSH
12188: LD_STRING D9-Bur-1
12190: PPUSH
12191: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
12195: LD_EXP 49
12199: PPUSH
12200: LD_STRING D9-Pla-2
12202: PPUSH
12203: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
12207: LD_EXP 38
12211: PPUSH
12212: LD_STRING D9-Bur-2
12214: PPUSH
12215: CALL_OW 88
// wait ( 2 2$0 ) ;
12219: LD_INT 4200
12221: PPUSH
12222: CALL_OW 67
// PlaceUnitArea ( Gaydar , GaydarSpawnArea , false ) ;
12226: LD_EXP 50
12230: PPUSH
12231: LD_INT 6
12233: PPUSH
12234: LD_INT 0
12236: PPUSH
12237: CALL_OW 49
// arabianCanExitMap = true ;
12241: LD_ADDR_EXP 6
12245: PUSH
12246: LD_INT 1
12248: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12249: LD_INT 35
12251: PPUSH
12252: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
12256: LD_EXP 50
12260: PPUSH
12261: CALL_OW 87
// DialogueOn ;
12265: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
12269: LD_EXP 50
12273: PPUSH
12274: LD_STRING D10-Gay-1
12276: PPUSH
12277: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
12281: LD_EXP 38
12285: PPUSH
12286: LD_STRING D10-Bur-1
12288: PPUSH
12289: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
12293: LD_EXP 50
12297: PPUSH
12298: LD_STRING D10-Gay-2
12300: PPUSH
12301: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
12305: LD_EXP 48
12309: PPUSH
12310: LD_STRING D10-Pop-2
12312: PPUSH
12313: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
12317: LD_EXP 50
12321: PPUSH
12322: LD_STRING D10-Gay-3
12324: PPUSH
12325: CALL_OW 94
// DialogueOff ;
12329: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
12333: LD_EXP 50
12337: PPUSH
12338: LD_INT 36
12340: PPUSH
12341: LD_INT 38
12343: PPUSH
12344: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
12348: LD_EXP 50
12352: PPUSH
12353: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
12357: LD_STRING M2
12359: PPUSH
12360: CALL_OW 337
// end ;
12364: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
12365: LD_EXP 6
12369: IFFALSE 12442
12371: GO 12373
12373: DISABLE
12374: LD_INT 0
12376: PPUSH
// begin enable ;
12377: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
12378: LD_INT 22
12380: PUSH
12381: LD_INT 2
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: PPUSH
12391: CALL_OW 69
12395: PPUSH
12396: LD_INT 13
12398: PPUSH
12399: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
12403: LD_ADDR_VAR 0 1
12407: PUSH
12408: LD_INT 13
12410: PPUSH
12411: LD_INT 22
12413: PUSH
12414: LD_INT 2
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PPUSH
12421: CALL_OW 70
12425: PUSH
12426: FOR_IN
12427: IFFALSE 12440
// RemoveUnit ( unit ) ;
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL_OW 64
12438: GO 12426
12440: POP
12441: POP
// end ;
12442: PPOPN 1
12444: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
12445: LD_EXP 18
12449: NOT
12450: IFFALSE 12840
12452: GO 12454
12454: DISABLE
12455: LD_INT 0
12457: PPUSH
12458: PPUSH
// begin enable ;
12459: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
12460: LD_ADDR_VAR 0 1
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: LD_INT 3
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 21
12477: PUSH
12478: LD_INT 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PPUSH
12489: CALL_OW 69
12493: PUSH
12494: FOR_IN
12495: IFFALSE 12838
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
12497: LD_VAR 0 1
12501: PPUSH
12502: LD_EXP 50
12506: PPUSH
12507: CALL_OW 296
12511: PUSH
12512: LD_INT 6
12514: LESS
12515: IFFALSE 12836
// begin ComWalk ( Gaydar ) ;
12517: LD_EXP 50
12521: PPUSH
12522: CALL_OW 138
// saveGaydar = true ;
12526: LD_ADDR_EXP 18
12530: PUSH
12531: LD_INT 1
12533: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12534: LD_INT 35
12536: PPUSH
12537: CALL_OW 67
// DialogueOn ;
12541: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
12545: LD_EXP 50
12549: PPUSH
12550: LD_STRING D11-Gay-1
12552: PPUSH
12553: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
12557: LD_EXP 38
12561: PPUSH
12562: LD_EXP 50
12566: PPUSH
12567: CALL_OW 296
12571: PUSH
12572: LD_INT 6
12574: LESS
12575: NOT
12576: IFFALSE 12676
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
12578: LD_ADDR_VAR 0 2
12582: PUSH
12583: LD_INT 22
12585: PUSH
12586: LD_INT 3
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 21
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: LD_INT 26
12605: PUSH
12606: LD_INT 1
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 50
12615: PUSH
12616: EMPTY
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: PPUSH
12625: CALL_OW 69
12629: PUSH
12630: LD_EXP 50
12634: DIFF
12635: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
12636: LD_VAR 0 2
12640: PPUSH
12641: LD_EXP 50
12645: PPUSH
12646: CALL_OW 74
12650: PPUSH
12651: LD_STRING D11-RSol1-1
12653: PPUSH
12654: CALL_OW 88
// gaydarWaitForBurlak = true ;
12658: LD_ADDR_EXP 19
12662: PUSH
12663: LD_INT 1
12665: ST_TO_ADDR
// DialogueOff ;
12666: CALL_OW 7
// exit ;
12670: POP
12671: POP
12672: GO 12840
// end else
12674: GO 12836
// begin SetSide ( Gaydar , 3 ) ;
12676: LD_EXP 50
12680: PPUSH
12681: LD_INT 3
12683: PPUSH
12684: CALL_OW 235
// Say ( Gaydar , D11-Gay-2 ) ;
12688: LD_EXP 50
12692: PPUSH
12693: LD_STRING D11-Gay-2
12695: PPUSH
12696: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
12700: LD_EXP 38
12704: PPUSH
12705: LD_STRING D11-Bur-2
12707: PPUSH
12708: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
12712: LD_EXP 50
12716: PPUSH
12717: LD_STRING D11-Gay-3
12719: PPUSH
12720: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
12724: LD_EXP 38
12728: PPUSH
12729: LD_STRING D11-Bur-3
12731: PPUSH
12732: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
12736: LD_EXP 50
12740: PPUSH
12741: LD_STRING D11-Gay-4
12743: PPUSH
12744: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
12748: LD_EXP 38
12752: PPUSH
12753: LD_STRING D11-Bur-4
12755: PPUSH
12756: CALL_OW 88
// wait ( 0 0$2 ) ;
12760: LD_INT 70
12762: PPUSH
12763: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
12767: LD_EXP 48
12771: PPUSH
12772: LD_STRING D12-Pop-1
12774: PPUSH
12775: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
12779: LD_EXP 38
12783: PPUSH
12784: LD_STRING D12-Bur-1
12786: PPUSH
12787: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
12791: LD_EXP 49
12795: PPUSH
12796: LD_STRING D12-Pla-1
12798: PPUSH
12799: CALL_OW 94
// DialogueOff ;
12803: CALL_OW 7
// canExitMap = true ;
12807: LD_ADDR_EXP 5
12811: PUSH
12812: LD_INT 1
12814: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
12815: LD_STRING MFinal
12817: PPUSH
12818: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
12822: LD_INT 4
12824: PPUSH
12825: LD_INT 1
12827: PPUSH
12828: CALL_OW 424
// exit ;
12832: POP
12833: POP
12834: GO 12840
// end ; end ; end ;
12836: GO 12494
12838: POP
12839: POP
// end ;
12840: PPOPN 2
12842: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
12843: LD_EXP 38
12847: PPUSH
12848: LD_EXP 50
12852: PPUSH
12853: CALL_OW 296
12857: PUSH
12858: LD_INT 6
12860: LESS
12861: PUSH
12862: LD_EXP 19
12866: AND
12867: IFFALSE 13032
12869: GO 12871
12871: DISABLE
// begin SetSide ( Gaydar , 3 ) ;
12872: LD_EXP 50
12876: PPUSH
12877: LD_INT 3
12879: PPUSH
12880: CALL_OW 235
// DialogueOn ;
12884: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
12888: LD_EXP 50
12892: PPUSH
12893: LD_STRING D11-Gay-2
12895: PPUSH
12896: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
12900: LD_EXP 38
12904: PPUSH
12905: LD_STRING D11-Bur-2
12907: PPUSH
12908: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
12912: LD_EXP 50
12916: PPUSH
12917: LD_STRING D11-Gay-3
12919: PPUSH
12920: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
12924: LD_EXP 38
12928: PPUSH
12929: LD_STRING D11-Bur-3
12931: PPUSH
12932: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
12936: LD_EXP 50
12940: PPUSH
12941: LD_STRING D11-Gay-4
12943: PPUSH
12944: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
12948: LD_EXP 38
12952: PPUSH
12953: LD_STRING D11-Bur-4
12955: PPUSH
12956: CALL_OW 88
// wait ( 0 0$2 ) ;
12960: LD_INT 70
12962: PPUSH
12963: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
12967: LD_EXP 48
12971: PPUSH
12972: LD_STRING D12-Pop-1
12974: PPUSH
12975: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
12979: LD_EXP 38
12983: PPUSH
12984: LD_STRING D12-Bur-1
12986: PPUSH
12987: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
12991: LD_EXP 49
12995: PPUSH
12996: LD_STRING D12-Pla-1
12998: PPUSH
12999: CALL_OW 94
// DialogueOff ;
13003: CALL_OW 7
// canExitMap = true ;
13007: LD_ADDR_EXP 5
13011: PUSH
13012: LD_INT 1
13014: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
13015: LD_STRING MFinal
13017: PPUSH
13018: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
13022: LD_INT 4
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 424
// end ;
13032: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
13033: LD_INT 22
13035: PUSH
13036: LD_INT 3
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 21
13045: PUSH
13046: LD_INT 1
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PPUSH
13057: CALL_OW 69
13061: PUSH
13062: LD_INT 0
13064: EQUAL
13065: PUSH
13066: LD_EXP 5
13070: AND
13071: IFFALSE 13080
13073: GO 13075
13075: DISABLE
// FinishMission ; end_of_file
13076: CALL 6621 0 0
13080: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
13081: LD_EXP 16
13085: PUSH
13086: LD_EXP 17
13090: PUSH
13091: LD_INT 0
13093: EQUAL
13094: AND
13095: PUSH
13096: LD_EXP 17
13100: PUSH
13101: LD_EXP 35
13105: LESS
13106: AND
13107: IFFALSE 13159
13109: GO 13111
13111: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
13112: LD_INT 7
13114: PUSH
13115: LD_INT 10
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 1
13124: PPUSH
13125: LD_INT 2
13127: PPUSH
13128: CALL_OW 12
13132: ARRAY
13133: PPUSH
13134: CALL 3281 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
13138: LD_EXP 57
13142: PPUSH
13143: EMPTY
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: LD_INT 1
13150: PPUSH
13151: LD_INT 1
13153: NEG
13154: PPUSH
13155: CALL 4220 0 5
// end ;
13159: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
13160: LD_EXP 16
13164: PUSH
13165: LD_EXP 17
13169: PUSH
13170: LD_INT 0
13172: GREATEREQUAL
13173: AND
13174: PUSH
13175: LD_EXP 17
13179: PUSH
13180: LD_EXP 35
13184: LESS
13185: AND
13186: IFFALSE 13416
13188: GO 13190
13190: DISABLE
// begin currentWave = currentWave + 1 ;
13191: LD_ADDR_EXP 17
13195: PUSH
13196: LD_EXP 17
13200: PUSH
13201: LD_INT 1
13203: PLUS
13204: ST_TO_ADDR
// PrepareArabianVehicles ;
13205: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13209: LD_EXP 57
13213: PPUSH
13214: LD_INT 135
13216: PUSH
13217: LD_INT 4
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 134
13226: PUSH
13227: LD_INT 19
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 132
13236: PUSH
13237: LD_INT 26
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 128
13246: PUSH
13247: LD_INT 31
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 123
13256: PUSH
13257: LD_INT 37
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 118
13266: PUSH
13267: LD_INT 45
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 112
13276: PUSH
13277: LD_INT 51
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 106
13286: PUSH
13287: LD_INT 57
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 99
13296: PUSH
13297: LD_INT 62
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 93
13306: PUSH
13307: LD_INT 67
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: LD_INT 86
13316: PUSH
13317: LD_INT 72
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 78
13326: PUSH
13327: LD_INT 75
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 71
13336: PUSH
13337: LD_INT 81
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 69
13346: PUSH
13347: LD_INT 88
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 71
13356: PUSH
13357: LD_INT 95
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 74
13366: PUSH
13367: LD_INT 103
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 80
13376: PUSH
13377: LD_INT 113
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: PPUSH
13403: LD_INT 0
13405: PPUSH
13406: LD_INT 1
13408: PPUSH
13409: LD_INT 11
13411: PPUSH
13412: CALL 4220 0 5
// end ;
13416: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
13417: LD_EXP 16
13421: PUSH
13422: LD_OWVAR 67
13426: PUSH
13427: LD_INT 2
13429: EQUAL
13430: AND
13431: PUSH
13432: LD_EXP 17
13436: PUSH
13437: LD_INT 0
13439: GREATEREQUAL
13440: AND
13441: PUSH
13442: LD_EXP 17
13446: PUSH
13447: LD_EXP 35
13451: LESS
13452: AND
13453: IFFALSE 13603
13455: GO 13457
13457: DISABLE
// begin PrepareArabianVehicles ;
13458: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
13462: LD_EXP 57
13466: PPUSH
13467: LD_INT 135
13469: PUSH
13470: LD_INT 4
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 134
13479: PUSH
13480: LD_INT 19
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 132
13489: PUSH
13490: LD_INT 26
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 128
13499: PUSH
13500: LD_INT 31
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 123
13509: PUSH
13510: LD_INT 37
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 118
13519: PUSH
13520: LD_INT 45
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 112
13529: PUSH
13530: LD_INT 51
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 106
13539: PUSH
13540: LD_INT 57
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 99
13549: PUSH
13550: LD_INT 62
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 104
13559: PUSH
13560: LD_INT 71
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 110
13569: PUSH
13570: LD_INT 78
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PPUSH
13590: LD_INT 0
13592: PPUSH
13593: LD_INT 1
13595: PPUSH
13596: LD_INT 11
13598: PPUSH
13599: CALL 4220 0 5
// end ;
13603: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
13604: LD_EXP 16
13608: PUSH
13609: LD_OWVAR 67
13613: PUSH
13614: LD_INT 3
13616: EQUAL
13617: AND
13618: PUSH
13619: LD_EXP 17
13623: PUSH
13624: LD_INT 0
13626: GREATEREQUAL
13627: AND
13628: PUSH
13629: LD_EXP 17
13633: PUSH
13634: LD_EXP 35
13638: LESS
13639: AND
13640: IFFALSE 13834
13642: GO 13644
13644: DISABLE
// begin PrepareArabianVehicles ;
13645: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
13649: LD_EXP 57
13653: PPUSH
13654: LD_INT 135
13656: PUSH
13657: LD_INT 4
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 134
13666: PUSH
13667: LD_INT 19
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 132
13676: PUSH
13677: LD_INT 26
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 128
13686: PUSH
13687: LD_INT 31
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 123
13696: PUSH
13697: LD_INT 37
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 118
13706: PUSH
13707: LD_INT 45
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 112
13716: PUSH
13717: LD_INT 51
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 106
13726: PUSH
13727: LD_INT 57
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 99
13736: PUSH
13737: LD_INT 62
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 104
13746: PUSH
13747: LD_INT 71
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 110
13756: PUSH
13757: LD_INT 78
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 119
13766: PUSH
13767: LD_INT 88
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 128
13776: PUSH
13777: LD_INT 97
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 135
13786: PUSH
13787: LD_INT 106
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 140
13796: PUSH
13797: LD_INT 153
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: PPUSH
13821: LD_INT 0
13823: PPUSH
13824: LD_INT 1
13826: PPUSH
13827: LD_INT 11
13829: PPUSH
13830: CALL 4220 0 5
// end ;
13834: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
13835: LD_EXP 16
13839: PUSH
13840: LD_EXP 17
13844: PUSH
13845: LD_INT 1
13847: EQUAL
13848: AND
13849: PUSH
13850: LD_EXP 17
13854: PUSH
13855: LD_EXP 35
13859: LESS
13860: AND
13861: IFFALSE 13938
13863: GO 13865
13865: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
13866: LD_INT 7
13868: PPUSH
13869: CALL 3281 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
13873: LD_EXP 57
13877: PPUSH
13878: LD_INT 157
13880: PUSH
13881: LD_INT 31
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 194
13890: PUSH
13891: LD_INT 124
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 174
13900: PUSH
13901: LD_INT 158
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: LD_INT 151
13910: PUSH
13911: LD_INT 164
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PPUSH
13924: LD_INT 0
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: LD_INT 1
13932: NEG
13933: PPUSH
13934: CALL 4220 0 5
// end ;
13938: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
13939: LD_EXP 16
13943: PUSH
13944: LD_EXP 17
13948: PUSH
13949: LD_INT 1
13951: EQUAL
13952: AND
13953: PUSH
13954: LD_EXP 17
13958: PUSH
13959: LD_EXP 35
13963: LESS
13964: AND
13965: IFFALSE 14136
13967: GO 13969
13969: DISABLE
// begin wait ( 1 1$30 ) ;
13970: LD_INT 3150
13972: PPUSH
13973: CALL_OW 67
// currentWave = currentWave + 1 ;
13977: LD_ADDR_EXP 17
13981: PUSH
13982: LD_EXP 17
13986: PUSH
13987: LD_INT 1
13989: PLUS
13990: ST_TO_ADDR
// PrepareArabianVehicles ;
13991: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
13995: LD_EXP 57
13999: PPUSH
14000: LD_INT 135
14002: PUSH
14003: LD_INT 4
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 134
14012: PUSH
14013: LD_INT 19
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 132
14022: PUSH
14023: LD_INT 26
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 128
14032: PUSH
14033: LD_INT 31
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 123
14042: PUSH
14043: LD_INT 37
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 118
14052: PUSH
14053: LD_INT 45
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 112
14062: PUSH
14063: LD_INT 51
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 106
14072: PUSH
14073: LD_INT 57
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 99
14082: PUSH
14083: LD_INT 62
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 104
14092: PUSH
14093: LD_INT 71
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 110
14102: PUSH
14103: LD_INT 78
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: PPUSH
14123: LD_INT 0
14125: PPUSH
14126: LD_INT 1
14128: PPUSH
14129: LD_INT 11
14131: PPUSH
14132: CALL 4220 0 5
// end ;
14136: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
14137: LD_EXP 16
14141: PUSH
14142: LD_OWVAR 67
14146: PUSH
14147: LD_INT 2
14149: EQUAL
14150: AND
14151: PUSH
14152: LD_EXP 17
14156: PUSH
14157: LD_INT 1
14159: EQUAL
14160: AND
14161: PUSH
14162: LD_EXP 17
14166: PUSH
14167: LD_EXP 35
14171: LESS
14172: AND
14173: IFFALSE 14367
14175: GO 14177
14177: DISABLE
// begin PrepareArabianVehicles ;
14178: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
14182: LD_EXP 57
14186: PPUSH
14187: LD_INT 135
14189: PUSH
14190: LD_INT 4
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 134
14199: PUSH
14200: LD_INT 19
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 132
14209: PUSH
14210: LD_INT 26
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 128
14219: PUSH
14220: LD_INT 31
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 123
14229: PUSH
14230: LD_INT 37
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 118
14239: PUSH
14240: LD_INT 45
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 112
14249: PUSH
14250: LD_INT 51
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 106
14259: PUSH
14260: LD_INT 57
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 99
14269: PUSH
14270: LD_INT 62
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 104
14279: PUSH
14280: LD_INT 71
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 110
14289: PUSH
14290: LD_INT 78
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 119
14299: PUSH
14300: LD_INT 88
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 128
14309: PUSH
14310: LD_INT 97
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 135
14319: PUSH
14320: LD_INT 106
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 140
14329: PUSH
14330: LD_INT 153
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PPUSH
14354: LD_INT 0
14356: PPUSH
14357: LD_INT 1
14359: PPUSH
14360: LD_INT 11
14362: PPUSH
14363: CALL 4220 0 5
// end ;
14367: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
14368: LD_EXP 16
14372: PUSH
14373: LD_OWVAR 67
14377: PUSH
14378: LD_INT 3
14380: EQUAL
14381: AND
14382: PUSH
14383: LD_EXP 17
14387: PUSH
14388: LD_INT 1
14390: EQUAL
14391: AND
14392: PUSH
14393: LD_EXP 17
14397: PUSH
14398: LD_EXP 35
14402: LESS
14403: AND
14404: IFFALSE 14620
14406: GO 14408
14408: DISABLE
// begin PrepareArabianVehicles ;
14409: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
14413: LD_EXP 57
14417: PPUSH
14418: LD_INT 135
14420: PUSH
14421: LD_INT 4
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 134
14430: PUSH
14431: LD_INT 19
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 132
14440: PUSH
14441: LD_INT 26
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 128
14450: PUSH
14451: LD_INT 31
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 123
14460: PUSH
14461: LD_INT 37
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 118
14470: PUSH
14471: LD_INT 45
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 112
14480: PUSH
14481: LD_INT 51
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 106
14490: PUSH
14491: LD_INT 57
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 99
14500: PUSH
14501: LD_INT 62
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 93
14510: PUSH
14511: LD_INT 67
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 86
14520: PUSH
14521: LD_INT 72
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 78
14530: PUSH
14531: LD_INT 75
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 71
14540: PUSH
14541: LD_INT 81
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 69
14550: PUSH
14551: LD_INT 88
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 71
14560: PUSH
14561: LD_INT 95
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 74
14570: PUSH
14571: LD_INT 103
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 80
14580: PUSH
14581: LD_INT 113
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: PPUSH
14607: LD_INT 0
14609: PPUSH
14610: LD_INT 1
14612: PPUSH
14613: LD_INT 11
14615: PPUSH
14616: CALL 4220 0 5
// end ;
14620: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
14621: LD_EXP 16
14625: PUSH
14626: LD_EXP 17
14630: PUSH
14631: LD_INT 2
14633: EQUAL
14634: AND
14635: PUSH
14636: LD_EXP 17
14640: PUSH
14641: LD_EXP 35
14645: LESS
14646: AND
14647: IFFALSE 14724
14649: GO 14651
14651: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
14652: LD_INT 7
14654: PPUSH
14655: CALL 3281 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
14659: LD_EXP 57
14663: PPUSH
14664: LD_INT 157
14666: PUSH
14667: LD_INT 31
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 194
14676: PUSH
14677: LD_INT 124
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 174
14686: PUSH
14687: LD_INT 158
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 151
14696: PUSH
14697: LD_INT 164
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: PPUSH
14710: LD_INT 0
14712: PPUSH
14713: LD_INT 1
14715: PPUSH
14716: LD_INT 1
14718: NEG
14719: PPUSH
14720: CALL 4220 0 5
// end ;
14724: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
14725: LD_EXP 16
14729: PUSH
14730: LD_EXP 17
14734: PUSH
14735: LD_INT 2
14737: EQUAL
14738: AND
14739: PUSH
14740: LD_EXP 17
14744: PUSH
14745: LD_EXP 35
14749: LESS
14750: AND
14751: IFFALSE 14988
14753: GO 14755
14755: DISABLE
// begin wait ( 1 1$30 ) ;
14756: LD_INT 3150
14758: PPUSH
14759: CALL_OW 67
// currentWave = currentWave + 1 ;
14763: LD_ADDR_EXP 17
14767: PUSH
14768: LD_EXP 17
14772: PUSH
14773: LD_INT 1
14775: PLUS
14776: ST_TO_ADDR
// PrepareArabianVehicles ;
14777: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
14781: LD_EXP 57
14785: PPUSH
14786: LD_INT 135
14788: PUSH
14789: LD_INT 4
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 134
14798: PUSH
14799: LD_INT 19
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 132
14808: PUSH
14809: LD_INT 26
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 128
14818: PUSH
14819: LD_INT 31
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 123
14828: PUSH
14829: LD_INT 37
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 118
14838: PUSH
14839: LD_INT 45
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 112
14848: PUSH
14849: LD_INT 51
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 106
14858: PUSH
14859: LD_INT 57
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 99
14868: PUSH
14869: LD_INT 62
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 93
14878: PUSH
14879: LD_INT 67
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 86
14888: PUSH
14889: LD_INT 72
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: LD_INT 78
14898: PUSH
14899: LD_INT 75
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 71
14908: PUSH
14909: LD_INT 81
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: LD_INT 69
14918: PUSH
14919: LD_INT 88
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 71
14928: PUSH
14929: LD_INT 95
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 74
14938: PUSH
14939: LD_INT 103
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 80
14948: PUSH
14949: LD_INT 113
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: PPUSH
14975: LD_INT 0
14977: PPUSH
14978: LD_INT 1
14980: PPUSH
14981: LD_INT 11
14983: PPUSH
14984: CALL 4220 0 5
// end ;
14988: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
14989: LD_EXP 16
14993: PUSH
14994: LD_OWVAR 67
14998: PUSH
14999: LD_INT 2
15001: EQUAL
15002: AND
15003: PUSH
15004: LD_EXP 17
15008: PUSH
15009: LD_INT 2
15011: EQUAL
15012: AND
15013: PUSH
15014: LD_EXP 17
15018: PUSH
15019: LD_EXP 35
15023: LESS
15024: AND
15025: IFFALSE 15219
15027: GO 15029
15029: DISABLE
// begin PrepareArabianVehicles ;
15030: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15034: LD_EXP 57
15038: PPUSH
15039: LD_INT 135
15041: PUSH
15042: LD_INT 4
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 134
15051: PUSH
15052: LD_INT 19
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 132
15061: PUSH
15062: LD_INT 26
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 128
15071: PUSH
15072: LD_INT 31
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 123
15081: PUSH
15082: LD_INT 37
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 118
15091: PUSH
15092: LD_INT 45
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 112
15101: PUSH
15102: LD_INT 51
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 106
15111: PUSH
15112: LD_INT 57
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 99
15121: PUSH
15122: LD_INT 62
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 104
15131: PUSH
15132: LD_INT 71
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 110
15141: PUSH
15142: LD_INT 78
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 119
15151: PUSH
15152: LD_INT 88
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 128
15161: PUSH
15162: LD_INT 97
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: LD_INT 135
15171: PUSH
15172: LD_INT 106
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 140
15181: PUSH
15182: LD_INT 153
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: PPUSH
15206: LD_INT 0
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: LD_INT 11
15214: PPUSH
15215: CALL 4220 0 5
// end ;
15219: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
15220: LD_EXP 16
15224: PUSH
15225: LD_OWVAR 67
15229: PUSH
15230: LD_INT 3
15232: EQUAL
15233: AND
15234: PUSH
15235: LD_EXP 17
15239: PUSH
15240: LD_INT 2
15242: EQUAL
15243: AND
15244: PUSH
15245: LD_EXP 17
15249: PUSH
15250: LD_EXP 35
15254: LESS
15255: AND
15256: IFFALSE 15450
15258: GO 15260
15260: DISABLE
// begin PrepareArabianVehicles ;
15261: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15265: LD_EXP 57
15269: PPUSH
15270: LD_INT 135
15272: PUSH
15273: LD_INT 4
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 134
15282: PUSH
15283: LD_INT 19
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 132
15292: PUSH
15293: LD_INT 26
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 128
15302: PUSH
15303: LD_INT 31
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 123
15312: PUSH
15313: LD_INT 37
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 118
15322: PUSH
15323: LD_INT 45
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 112
15332: PUSH
15333: LD_INT 51
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 106
15342: PUSH
15343: LD_INT 57
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 99
15352: PUSH
15353: LD_INT 62
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 104
15362: PUSH
15363: LD_INT 71
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 110
15372: PUSH
15373: LD_INT 78
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 119
15382: PUSH
15383: LD_INT 88
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 128
15392: PUSH
15393: LD_INT 97
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 135
15402: PUSH
15403: LD_INT 106
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 140
15412: PUSH
15413: LD_INT 153
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: PPUSH
15437: LD_INT 0
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_INT 11
15445: PPUSH
15446: CALL 4220 0 5
// end ;
15450: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
15451: LD_EXP 16
15455: PUSH
15456: LD_EXP 17
15460: PUSH
15461: LD_INT 3
15463: EQUAL
15464: AND
15465: PUSH
15466: LD_EXP 17
15470: PUSH
15471: LD_EXP 35
15475: LESS
15476: AND
15477: IFFALSE 15554
15479: GO 15481
15481: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
15482: LD_INT 7
15484: PPUSH
15485: CALL 3281 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
15489: LD_EXP 57
15493: PPUSH
15494: LD_INT 157
15496: PUSH
15497: LD_INT 31
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 194
15506: PUSH
15507: LD_INT 124
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 174
15516: PUSH
15517: LD_INT 158
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 151
15526: PUSH
15527: LD_INT 164
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: PPUSH
15540: LD_INT 0
15542: PPUSH
15543: LD_INT 1
15545: PPUSH
15546: LD_INT 1
15548: NEG
15549: PPUSH
15550: CALL 4220 0 5
// end ;
15554: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
15555: LD_EXP 16
15559: PUSH
15560: LD_EXP 17
15564: PUSH
15565: LD_INT 3
15567: EQUAL
15568: AND
15569: PUSH
15570: LD_EXP 17
15574: PUSH
15575: LD_EXP 35
15579: LESS
15580: AND
15581: IFFALSE 15818
15583: GO 15585
15585: DISABLE
// begin wait ( 1 1$30 ) ;
15586: LD_INT 3150
15588: PPUSH
15589: CALL_OW 67
// currentWave = currentWave + 1 ;
15593: LD_ADDR_EXP 17
15597: PUSH
15598: LD_EXP 17
15602: PUSH
15603: LD_INT 1
15605: PLUS
15606: ST_TO_ADDR
// PrepareArabianVehicles ;
15607: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15611: LD_EXP 57
15615: PPUSH
15616: LD_INT 135
15618: PUSH
15619: LD_INT 4
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 134
15628: PUSH
15629: LD_INT 19
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 132
15638: PUSH
15639: LD_INT 26
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 128
15648: PUSH
15649: LD_INT 31
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 123
15658: PUSH
15659: LD_INT 37
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 118
15668: PUSH
15669: LD_INT 45
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 112
15678: PUSH
15679: LD_INT 51
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 106
15688: PUSH
15689: LD_INT 57
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 99
15698: PUSH
15699: LD_INT 62
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 93
15708: PUSH
15709: LD_INT 67
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 86
15718: PUSH
15719: LD_INT 72
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 78
15728: PUSH
15729: LD_INT 75
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 71
15738: PUSH
15739: LD_INT 81
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 69
15748: PUSH
15749: LD_INT 88
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 71
15758: PUSH
15759: LD_INT 95
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 74
15768: PUSH
15769: LD_INT 103
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 80
15778: PUSH
15779: LD_INT 113
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: PPUSH
15805: LD_INT 0
15807: PPUSH
15808: LD_INT 1
15810: PPUSH
15811: LD_INT 11
15813: PPUSH
15814: CALL 4220 0 5
// end ;
15818: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
15819: LD_EXP 16
15823: PUSH
15824: LD_OWVAR 67
15828: PUSH
15829: LD_INT 2
15831: EQUAL
15832: AND
15833: PUSH
15834: LD_EXP 17
15838: PUSH
15839: LD_INT 3
15841: EQUAL
15842: AND
15843: PUSH
15844: LD_EXP 17
15848: PUSH
15849: LD_EXP 35
15853: LESS
15854: AND
15855: IFFALSE 16049
15857: GO 15859
15859: DISABLE
// begin PrepareArabianVehicles ;
15860: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15864: LD_EXP 57
15868: PPUSH
15869: LD_INT 135
15871: PUSH
15872: LD_INT 4
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 134
15881: PUSH
15882: LD_INT 19
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 132
15891: PUSH
15892: LD_INT 26
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: LD_INT 128
15901: PUSH
15902: LD_INT 31
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 123
15911: PUSH
15912: LD_INT 37
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 118
15921: PUSH
15922: LD_INT 45
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 112
15931: PUSH
15932: LD_INT 51
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 106
15941: PUSH
15942: LD_INT 57
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 99
15951: PUSH
15952: LD_INT 62
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 104
15961: PUSH
15962: LD_INT 71
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 110
15971: PUSH
15972: LD_INT 78
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 119
15981: PUSH
15982: LD_INT 88
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 128
15991: PUSH
15992: LD_INT 97
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 135
16001: PUSH
16002: LD_INT 106
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 140
16011: PUSH
16012: LD_INT 153
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: PPUSH
16036: LD_INT 0
16038: PPUSH
16039: LD_INT 1
16041: PPUSH
16042: LD_INT 11
16044: PPUSH
16045: CALL 4220 0 5
// end ;
16049: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
16050: LD_EXP 16
16054: PUSH
16055: LD_OWVAR 67
16059: PUSH
16060: LD_INT 3
16062: EQUAL
16063: AND
16064: PUSH
16065: LD_EXP 17
16069: PUSH
16070: LD_INT 3
16072: EQUAL
16073: AND
16074: PUSH
16075: LD_EXP 17
16079: PUSH
16080: LD_EXP 35
16084: LESS
16085: AND
16086: IFFALSE 16280
16088: GO 16090
16090: DISABLE
// begin PrepareArabianVehicles ;
16091: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16095: LD_EXP 57
16099: PPUSH
16100: LD_INT 135
16102: PUSH
16103: LD_INT 4
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 134
16112: PUSH
16113: LD_INT 19
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 132
16122: PUSH
16123: LD_INT 26
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 128
16132: PUSH
16133: LD_INT 31
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 123
16142: PUSH
16143: LD_INT 37
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 118
16152: PUSH
16153: LD_INT 45
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 112
16162: PUSH
16163: LD_INT 51
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 106
16172: PUSH
16173: LD_INT 57
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 99
16182: PUSH
16183: LD_INT 62
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 104
16192: PUSH
16193: LD_INT 71
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 110
16202: PUSH
16203: LD_INT 78
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 119
16212: PUSH
16213: LD_INT 88
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 128
16222: PUSH
16223: LD_INT 97
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 135
16232: PUSH
16233: LD_INT 106
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 140
16242: PUSH
16243: LD_INT 153
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: PPUSH
16267: LD_INT 0
16269: PPUSH
16270: LD_INT 1
16272: PPUSH
16273: LD_INT 11
16275: PPUSH
16276: CALL 4220 0 5
// end ;
16280: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
16281: LD_EXP 50
16285: PPUSH
16286: CALL_OW 305
16290: PUSH
16291: LD_EXP 21
16295: PUSH
16296: LD_INT 5
16298: LESS
16299: AND
16300: IFFALSE 16310
16302: GO 16304
16304: DISABLE
// begin PrepareArabianKiller ;
16305: CALL 3490 0 0
// enable ;
16309: ENABLE
// end ;
16310: END
