// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1519 0 0
// Nef_PrepareNature ;
 250: CALL 4421 0 0
// MissionIntro ;
 254: CALL 10430 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 , 4 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 , 0 ] [ Difficulty ] ;
 413: LD_ADDR_EXP 33
 417: PUSH
 418: LD_INT 2
 420: NEG
 421: PUSH
 422: LD_INT 1
 424: NEG
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 444: LD_ADDR_EXP 34
 448: PUSH
 449: LD_INT 135
 451: PUSH
 452: LD_INT 8
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 135
 461: PUSH
 462: LD_INT 4
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 134
 471: PUSH
 472: LD_INT 19
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 132
 481: PUSH
 482: LD_INT 26
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 128
 491: PUSH
 492: LD_INT 31
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 123
 501: PUSH
 502: LD_INT 37
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 118
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 112
 521: PUSH
 522: LD_INT 51
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 106
 531: PUSH
 532: LD_INT 57
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 99
 541: PUSH
 542: LD_INT 62
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 93
 551: PUSH
 552: LD_INT 67
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 86
 561: PUSH
 562: LD_INT 72
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 78
 571: PUSH
 572: LD_INT 75
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 71
 581: PUSH
 582: LD_INT 81
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 69
 591: PUSH
 592: LD_INT 88
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: LD_INT 71
 601: PUSH
 602: LD_INT 95
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 74
 611: PUSH
 612: LD_INT 103
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 80
 621: PUSH
 622: LD_INT 113
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 84
 631: PUSH
 632: LD_INT 121
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 89
 641: PUSH
 642: LD_INT 132
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 92
 651: PUSH
 652: LD_INT 142
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 93
 661: PUSH
 662: LD_INT 151
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PUSH
 669: LD_INT 91
 671: PUSH
 672: LD_INT 157
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 90
 681: PUSH
 682: LD_INT 163
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 93
 691: PUSH
 692: LD_INT 171
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 92
 701: PUSH
 702: LD_INT 177
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 737: LD_ADDR_EXP 35
 741: PUSH
 742: LD_INT 135
 744: PUSH
 745: LD_INT 8
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 135
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 134
 764: PUSH
 765: LD_INT 19
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 132
 774: PUSH
 775: LD_INT 26
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 128
 784: PUSH
 785: LD_INT 31
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 123
 794: PUSH
 795: LD_INT 37
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 118
 804: PUSH
 805: LD_INT 45
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 112
 814: PUSH
 815: LD_INT 51
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 106
 824: PUSH
 825: LD_INT 57
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 99
 834: PUSH
 835: LD_INT 62
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 104
 844: PUSH
 845: LD_INT 71
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 110
 854: PUSH
 855: LD_INT 78
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: LD_INT 119
 864: PUSH
 865: LD_INT 88
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 128
 874: PUSH
 875: LD_INT 97
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PUSH
 882: LD_INT 135
 884: PUSH
 885: LD_INT 106
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 141
 894: PUSH
 895: LD_INT 120
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 143
 904: PUSH
 905: LD_INT 132
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 143
 914: PUSH
 915: LD_INT 142
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PUSH
 922: LD_INT 140
 924: PUSH
 925: LD_INT 149
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 132
 934: PUSH
 935: LD_INT 153
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 125
 944: PUSH
 945: LD_INT 155
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 115
 954: PUSH
 955: LD_INT 154
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 105
 964: PUSH
 965: LD_INT 153
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 93
 974: PUSH
 975: LD_INT 151
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 91
 984: PUSH
 985: LD_INT 157
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 90
 994: PUSH
 995: LD_INT 163
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 93
1004: PUSH
1005: LD_INT 171
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 92
1014: PUSH
1015: LD_INT 177
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 , 25 ] [ Difficulty ] ;
1052: LD_ADDR_EXP 36
1056: PUSH
1057: LD_INT 40
1059: PUSH
1060: LD_INT 35
1062: PUSH
1063: LD_INT 30
1065: PUSH
1066: LD_INT 25
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_OWVAR 67
1079: ARRAY
1080: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1081: LD_ADDR_EXP 37
1085: PUSH
1086: LD_INT 50
1088: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 , 15 ] [ Difficulty ] ;
1089: LD_ADDR_EXP 14
1093: PUSH
1094: LD_INT 21
1096: PUSH
1097: LD_INT 19
1099: PUSH
1100: LD_INT 17
1102: PUSH
1103: LD_INT 15
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_OWVAR 67
1116: ARRAY
1117: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1118: LD_ADDR_EXP 38
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 4
1131: PUSH
1132: LD_INT 4
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_OWVAR 67
1145: ARRAY
1146: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 4
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// arabianTroopsMin = 2 ;
1176: LD_ADDR_EXP 40
1180: PUSH
1181: LD_INT 2
1183: ST_TO_ADDR
// arabianTroopsMax = 4 ;
1184: LD_ADDR_EXP 41
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// end ;
1192: LD_VAR 0 1
1196: RET
// every 0 0$1 trigger debugMode do var i ;
1197: LD_EXP 31
1201: IFFALSE 1516
1203: GO 1205
1205: DISABLE
1206: LD_INT 0
1208: PPUSH
// begin enable ;
1209: ENABLE
// FogOff ( your_side ) ;
1210: LD_OWVAR 2
1214: PPUSH
1215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1219: LD_ADDR_VAR 0 1
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_OWVAR 2
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 2
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 21
1251: PUSH
1252: LD_INT 2
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1290
// SetLives ( i , 1000 ) ;
1276: LD_VAR 0 1
1280: PPUSH
1281: LD_INT 1000
1283: PPUSH
1284: CALL_OW 234
1288: GO 1273
1290: POP
1291: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 22
1299: PUSH
1300: LD_OWVAR 2
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 21
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: FOR_IN
1329: IFFALSE 1393
// begin SetSkill ( i , skill_combat , 10 ) ;
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_INT 10
1341: PPUSH
1342: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1346: LD_VAR 0 1
1350: PPUSH
1351: LD_INT 2
1353: PPUSH
1354: LD_INT 10
1356: PPUSH
1357: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1361: LD_VAR 0 1
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 10
1371: PPUSH
1372: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 237
// end ;
1391: GO 1328
1393: POP
1394: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_OWVAR 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 30
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 30
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 69
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1514
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL_OW 274
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 9999
1467: PPUSH
1468: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1472: LD_VAR 0 1
1476: PPUSH
1477: CALL_OW 274
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 9999
1487: PPUSH
1488: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 274
1501: PPUSH
1502: LD_INT 3
1504: PPUSH
1505: LD_INT 9999
1507: PPUSH
1508: CALL_OW 277
// end ;
1512: GO 1449
1514: POP
1515: POP
// end ; end_of_file
1516: PPOPN 1
1518: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1519: LD_INT 0
1521: PPUSH
// randomsToSave = [ ] ;
1522: LD_ADDR_EXP 62
1526: PUSH
1527: EMPTY
1528: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1529: LD_ADDR_EXP 57
1533: PUSH
1534: EMPTY
1535: ST_TO_ADDR
// ruCars = [ ] ;
1536: LD_ADDR_EXP 61
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1543: CALL 2351 0 0
// PrepareHeroes ;
1547: CALL 1556 0 0
// end ;
1551: LD_VAR 0 1
1555: RET
// function PrepareHeroes ; var i , current ; begin
1556: LD_INT 0
1558: PPUSH
1559: PPUSH
1560: PPUSH
// uc_side = 3 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 3
1568: ST_TO_ADDR
// uc_nation = 3 ;
1569: LD_ADDR_OWVAR 21
1573: PUSH
1574: LD_INT 3
1576: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1577: LD_ADDR_EXP 42
1581: PUSH
1582: LD_STRING Burlak
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: CALL 9409 0 3
1595: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1596: LD_ADDR_EXP 43
1600: PUSH
1601: LD_STRING Gnyevko
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: CALL 9409 0 3
1614: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1615: LD_ADDR_EXP 45
1619: PUSH
1620: LD_STRING Kovalyuk
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 3
1628: PPUSH
1629: CALL 9409 0 3
1633: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1634: LD_ADDR_EXP 44
1638: PUSH
1639: LD_STRING Kirilenkova
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 4
1647: PPUSH
1648: CALL 9409 0 3
1652: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1653: LD_ADDR_EXP 46
1657: PUSH
1658: LD_STRING Belkov
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL 9409 0 3
1671: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1672: LD_ADDR_EXP 47
1676: PUSH
1677: LD_STRING Belkov2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 9409 0 3
1690: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1691: LD_ADDR_EXP 48
1695: PUSH
1696: LD_STRING Scholtze
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 4
1704: PPUSH
1705: CALL 9409 0 3
1709: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1710: LD_ADDR_EXP 52
1714: PUSH
1715: LD_STRING Popov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL 9409 0 3
1728: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1729: LD_ADDR_EXP 53
1733: PUSH
1734: LD_STRING Platonov
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL 9409 0 3
1747: ST_TO_ADDR
// uc_side = 6 ;
1748: LD_ADDR_OWVAR 20
1752: PUSH
1753: LD_INT 6
1755: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1756: LD_ADDR_EXP 54
1760: PUSH
1761: LD_STRING Gaydar
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 9409 0 3
1774: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1775: LD_ADDR_EXP 49
1779: PUSH
1780: LD_STRING Kuzmov
1782: PPUSH
1783: LD_INT 0
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL 9409 0 3
1793: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1794: LD_EXP 49
1798: PPUSH
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 108
1804: PPUSH
1805: LD_INT 5
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 50
// ComHold ( Kuzmov ) ;
1815: LD_EXP 49
1819: PPUSH
1820: CALL_OW 140
// uc_side = 3 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1832: LD_EXP 42
1836: PUSH
1837: LD_EXP 43
1841: PUSH
1842: LD_EXP 44
1846: PUSH
1847: LD_EXP 45
1851: PUSH
1852: LD_EXP 46
1856: PUSH
1857: LD_EXP 47
1861: PUSH
1862: LD_EXP 48
1866: PUSH
1867: LD_EXP 52
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 9492 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1892: LD_ADDR_EXP 50
1896: PUSH
1897: LD_STRING 03_other_survivors
1899: PPUSH
1900: CALL_OW 31
1904: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1905: LD_ADDR_EXP 51
1909: PUSH
1910: LD_STRING 03_other_kirov
1912: PPUSH
1913: CALL_OW 31
1917: ST_TO_ADDR
// for i in other_survivors do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_EXP 50
1927: PUSH
1928: FOR_IN
1929: IFFALSE 1994
// begin if ruCars then
1931: LD_EXP 61
1935: IFFALSE 1977
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_EXP 61
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1955: LD_ADDR_EXP 61
1959: PUSH
1960: LD_EXP 61
1964: PUSH
1965: LD_EXP 61
1969: PUSH
1970: LD_INT 1
1972: ARRAY
1973: DIFF
1974: ST_TO_ADDR
// end else
1975: GO 1992
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1977: LD_VAR 0 2
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 49
// end ;
1992: GO 1928
1994: POP
1995: POP
// for i in other_kirov_survivors do
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_EXP 51
2005: PUSH
2006: FOR_IN
2007: IFFALSE 2072
// begin if ruCars then
2009: LD_EXP 61
2013: IFFALSE 2055
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_EXP 61
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PPUSH
2029: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2033: LD_ADDR_EXP 61
2037: PUSH
2038: LD_EXP 61
2042: PUSH
2043: LD_EXP 61
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: DIFF
2052: ST_TO_ADDR
// end else
2053: GO 2070
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2055: LD_VAR 0 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 0
2065: PPUSH
2066: CALL_OW 49
// end ;
2070: GO 2006
2072: POP
2073: POP
// PrepareSoldier ( sex_male , 1 ) ;
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 381
// dialogRus = CreateHuman ;
2084: LD_ADDR_EXP 59
2088: PUSH
2089: CALL_OW 44
2093: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2094: LD_EXP 50
2098: PUSH
2099: LD_EXP 51
2103: PLUS
2104: PUSH
2105: LD_EXP 43
2109: PUSH
2110: LD_EXP 44
2114: PUSH
2115: LD_EXP 45
2119: PUSH
2120: LD_EXP 46
2124: PUSH
2125: LD_EXP 47
2129: PUSH
2130: LD_EXP 48
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PLUS
2143: PUSH
2144: LD_INT 8
2146: LESS
2147: IFFALSE 2346
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_EXP 50
2158: PUSH
2159: LD_EXP 51
2163: PLUS
2164: PUSH
2165: LD_EXP 43
2169: PUSH
2170: LD_EXP 44
2174: PUSH
2175: LD_EXP 45
2179: PUSH
2180: LD_EXP 46
2184: PUSH
2185: LD_EXP 47
2189: PUSH
2190: LD_EXP 48
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PLUS
2203: ST_TO_ADDR
// current = 8 - current ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 8
2211: PUSH
2212: LD_VAR 0 3
2216: MINUS
2217: ST_TO_ADDR
// for i := 1 to current do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_VAR 0 3
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2344
// begin uc_nation = 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// uc_side = 3 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2252: LD_INT 0
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 4
2260: PPUSH
2261: CALL_OW 12
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 3
2271: PPUSH
2272: CALL_OW 12
2276: PPUSH
2277: CALL_OW 380
// if ruCars then
2281: LD_EXP 61
2285: IFFALSE 2327
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2287: CALL_OW 44
2291: PPUSH
2292: LD_EXP 61
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2305: LD_ADDR_EXP 61
2309: PUSH
2310: LD_EXP 61
2314: PUSH
2315: LD_EXP 61
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: DIFF
2324: ST_TO_ADDR
// end else
2325: GO 2342
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_INT 2
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL_OW 49
// end ;
2342: GO 2233
2344: POP
2345: POP
// end ; end ;
2346: LD_VAR 0 1
2350: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2351: LD_INT 0
2353: PPUSH
2354: PPUSH
2355: PPUSH
// uc_side = 3 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 3
2363: ST_TO_ADDR
// uc_nation = 3 ;
2364: LD_ADDR_OWVAR 21
2368: PUSH
2369: LD_INT 3
2371: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_EXP 5
2386: PUSH
2387: FOR_TO
2388: IFFALSE 2537
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2390: LD_ADDR_OWVAR 37
2394: PUSH
2395: LD_EXP 5
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_EXP 5
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_INT 2
2428: ARRAY
2429: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2430: LD_ADDR_OWVAR 38
2434: PUSH
2435: LD_EXP 5
2439: PUSH
2440: LD_VAR 0 2
2444: ARRAY
2445: PUSH
2446: LD_INT 3
2448: ARRAY
2449: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_EXP 5
2459: PUSH
2460: LD_VAR 0 2
2464: ARRAY
2465: PUSH
2466: LD_INT 4
2468: ARRAY
2469: ST_TO_ADDR
// uc_direction := 3 ;
2470: LD_ADDR_OWVAR 24
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2478: LD_ADDR_OWVAR 41
2482: PUSH
2483: LD_INT 25
2485: PPUSH
2486: LD_INT 30
2488: PPUSH
2489: CALL_OW 12
2493: ST_TO_ADDR
// car := CreateVehicle ;
2494: LD_ADDR_VAR 0 3
2498: PUSH
2499: CALL_OW 45
2503: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2504: LD_ADDR_EXP 61
2508: PUSH
2509: LD_EXP 61
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 2
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// end ;
2535: GO 2387
2537: POP
2538: POP
// end ;
2539: LD_VAR 0 1
2543: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2544: LD_INT 0
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// rnd = rand ( 1 , 4 ) ;
2554: LD_ADDR_VAR 0 3
2558: PUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 12
2569: ST_TO_ADDR
// uc_side = 6 ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_INT 6
2577: ST_TO_ADDR
// uc_nation = 3 ;
2578: LD_ADDR_OWVAR 21
2582: PUSH
2583: LD_INT 3
2585: ST_TO_ADDR
// if rnd < 4 then
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 4
2593: LESS
2594: IFFALSE 2970
// begin vc_chassis = ru_medium_wheeled ;
2596: LD_ADDR_OWVAR 37
2600: PUSH
2601: LD_INT 21
2603: ST_TO_ADDR
// vc_control = control_manual ;
2604: LD_ADDR_OWVAR 38
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_engine = engine_combustion ;
2612: LD_ADDR_OWVAR 39
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2620: LD_ADDR_VAR 0 5
2624: PUSH
2625: LD_INT 1
2627: PPUSH
2628: LD_INT 100
2630: PPUSH
2631: CALL_OW 12
2635: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2636: LD_VAR 0 5
2640: PUSH
2641: LD_EXP 37
2645: PUSH
2646: LD_INT 1
2648: PLUS
2649: LESS
2650: IFFALSE 2662
// vc_weapon = ru_cargo_bay else
2652: LD_ADDR_OWVAR 40
2656: PUSH
2657: LD_INT 51
2659: ST_TO_ADDR
2660: GO 2693
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2662: LD_ADDR_OWVAR 40
2666: PUSH
2667: LD_INT 42
2669: PUSH
2670: LD_INT 43
2672: PUSH
2673: LD_INT 44
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 12
2691: ARRAY
2692: ST_TO_ADDR
// vehicle = CreateVehicle ;
2693: LD_ADDR_VAR 0 7
2697: PUSH
2698: CALL_OW 45
2702: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2703: LD_VAR 0 7
2707: PPUSH
2708: LD_INT 3
2710: PPUSH
2711: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2715: LD_VAR 0 7
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 12
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: CALL_OW 12
2754: PPUSH
2755: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2759: CALL_OW 44
2763: PPUSH
2764: LD_VAR 0 7
2768: PPUSH
2769: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2773: LD_OWVAR 40
2777: PUSH
2778: LD_INT 51
2780: EQUAL
2781: IFFALSE 2798
// AddCargo ( vehicle , mat_cans , 100 ) ;
2783: LD_VAR 0 7
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2798: LD_VAR 0 7
2802: PPUSH
2803: LD_INT 500
2805: PPUSH
2806: LD_INT 1000
2808: PPUSH
2809: CALL_OW 12
2813: PPUSH
2814: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_INT 2
2828: PPUSH
2829: CALL_OW 12
2833: ST_TO_ADDR
// if rnd = 1 then
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 1
2841: EQUAL
2842: IFFALSE 2907
// for i := 3 to russianCargoPath1 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 3
2852: DEC
2853: ST_TO_ADDR
2854: LD_EXP 34
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2903
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2862: LD_VAR 0 7
2866: PPUSH
2867: LD_EXP 34
2871: PUSH
2872: LD_VAR 0 2
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: LD_EXP 34
2886: PUSH
2887: LD_VAR 0 2
2891: ARRAY
2892: PUSH
2893: LD_INT 2
2895: ARRAY
2896: PPUSH
2897: CALL_OW 171
2901: GO 2859
2903: POP
2904: POP
2905: GO 2968
// for i := 3 to russianCargoPath2 do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: DOUBLE
2913: LD_INT 3
2915: DEC
2916: ST_TO_ADDR
2917: LD_EXP 35
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2966
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2925: LD_VAR 0 7
2929: PPUSH
2930: LD_EXP 35
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 2
2954: ARRAY
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PPUSH
2960: CALL_OW 171
2964: GO 2922
2966: POP
2967: POP
// end else
2968: GO 3309
// begin for i := 1 to rand ( 1 , 3 ) do
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: DOUBLE
2976: LD_INT 1
2978: DEC
2979: ST_TO_ADDR
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 12
2990: PUSH
2991: FOR_TO
2992: IFFALSE 3070
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: CALL_OW 12
3007: PPUSH
3008: LD_INT 2
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 12
3018: PPUSH
3019: CALL_OW 380
// unit = CreateHuman ;
3023: LD_ADDR_VAR 0 6
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3033: LD_VAR 0 6
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3048: LD_VAR 0 6
3052: PPUSH
3053: LD_INT 500
3055: PPUSH
3056: LD_INT 1000
3058: PPUSH
3059: CALL_OW 12
3063: PPUSH
3064: CALL_OW 234
// end ;
3068: GO 2991
3070: POP
3071: POP
// rnd2 = rand ( 1 , 2 ) ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: CALL_OW 12
3087: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3088: LD_ADDR_VAR 0 8
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_INT 6
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 21
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: EMPTY
3117: LIST
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 60
3124: PUSH
3125: EMPTY
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3143: LD_ADDR_VAR 0 8
3147: PUSH
3148: LD_VAR 0 8
3152: PUSH
3153: LD_EXP 56
3157: DIFF
3158: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3159: LD_ADDR_VAR 0 8
3163: PUSH
3164: LD_VAR 0 8
3168: PUSH
3169: LD_EXP 57
3173: DIFF
3174: ST_TO_ADDR
// if rnd2 = 1 then
3175: LD_VAR 0 4
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: IFFALSE 3248
// for i := 3 to russianCargoPath1 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 3
3193: DEC
3194: ST_TO_ADDR
3195: LD_EXP 34
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3244
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3203: LD_VAR 0 8
3207: PPUSH
3208: LD_EXP 34
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PPUSH
3223: LD_EXP 34
3227: PUSH
3228: LD_VAR 0 2
3232: ARRAY
3233: PUSH
3234: LD_INT 2
3236: ARRAY
3237: PPUSH
3238: CALL_OW 171
3242: GO 3200
3244: POP
3245: POP
3246: GO 3309
// for i := 3 to russianCargoPath2 do
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: DOUBLE
3254: LD_INT 3
3256: DEC
3257: ST_TO_ADDR
3258: LD_EXP 35
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3307
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3266: LD_VAR 0 8
3270: PPUSH
3271: LD_EXP 35
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 1
3284: ARRAY
3285: PPUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 2
3299: ARRAY
3300: PPUSH
3301: CALL_OW 171
3305: GO 3263
3307: POP
3308: POP
// end ; end ;
3309: LD_VAR 0 1
3313: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
// for i := 1 to 2 do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_INT 2
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3399
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3335: LD_INT 0
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 3
3346: PPUSH
3347: CALL_OW 12
3351: PPUSH
3352: CALL_OW 380
// unit = CreateHuman ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: CALL_OW 44
3365: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3381: LD_ADDR_EXP 57
3385: PUSH
3386: LD_EXP 57
3390: PUSH
3391: LD_VAR 0 3
3395: ADD
3396: ST_TO_ADDR
// end ;
3397: GO 3332
3399: POP
3400: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 380
// unit = CreateHuman ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3447: LD_ADDR_EXP 57
3451: PUSH
3452: LD_EXP 57
3456: PUSH
3457: LD_VAR 0 3
3461: ADD
3462: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3463: LD_EXP 57
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: LD_INT 54
3473: PPUSH
3474: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3478: LD_EXP 57
3482: PPUSH
3483: LD_INT 25
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 72
3497: PPUSH
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 95
3503: PPUSH
3504: LD_INT 52
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: CALL_OW 205
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3519: LD_INT 0
3521: PPUSH
// uc_side = 2 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 2
3529: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3530: LD_ADDR_EXP 63
3534: PUSH
3535: LD_STRING Heike
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL 9409 0 3
3548: ST_TO_ADDR
// if Difficulty >= 2 then
3549: LD_OWVAR 67
3553: PUSH
3554: LD_INT 2
3556: GREATEREQUAL
3557: IFFALSE 3572
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3559: LD_INT 51
3561: PPUSH
3562: LD_INT 2
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 322
// end ;
3572: LD_VAR 0 1
3576: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
// currentEnemyGroup = [ ] ;
3582: LD_ADDR_EXP 65
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: DOUBLE
3595: LD_INT 1
3597: DEC
3598: ST_TO_ADDR
3599: LD_EXP 39
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3860
// begin uc_side = 2 ;
3607: LD_ADDR_OWVAR 20
3611: PUSH
3612: LD_INT 2
3614: ST_TO_ADDR
// uc_nation = nation_arabian ;
3615: LD_ADDR_OWVAR 21
3619: PUSH
3620: LD_INT 2
3622: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3623: LD_ADDR_OWVAR 40
3627: PUSH
3628: LD_INT 23
3630: PUSH
3631: LD_INT 24
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 26
3639: PUSH
3640: LD_INT 27
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 5
3655: PPUSH
3656: CALL_OW 12
3660: ARRAY
3661: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3662: LD_OWVAR 40
3666: PUSH
3667: LD_INT 25
3669: PUSH
3670: LD_INT 26
3672: PUSH
3673: LD_INT 27
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: IN
3681: IFFALSE 3712
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3683: LD_ADDR_OWVAR 37
3687: PUSH
3688: LD_INT 13
3690: PUSH
3691: LD_INT 14
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: ST_TO_ADDR
3710: GO 3743
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3712: LD_ADDR_OWVAR 37
3716: PUSH
3717: LD_INT 12
3719: PUSH
3720: LD_INT 13
3722: PUSH
3723: LD_INT 14
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: ST_TO_ADDR
// vc_control = control_manual ;
3743: LD_ADDR_OWVAR 38
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// vc_engine = engine_combustion ;
3751: LD_ADDR_OWVAR 39
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3759: LD_ADDR_OWVAR 41
3763: PUSH
3764: LD_INT 100
3766: ST_TO_ADDR
// veh = CreateVehicle ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: CALL_OW 45
3776: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3777: LD_ADDR_EXP 65
3781: PUSH
3782: LD_EXP 65
3786: PUSH
3787: LD_VAR 0 3
3791: ADD
3792: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_INT 7
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 26
3815: EQUAL
3816: IFFALSE 3832
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3818: LD_INT 0
3820: PPUSH
3821: LD_EXP 33
3825: PPUSH
3826: CALL_OW 383
3830: GO 3844
// PrepareMechanic ( false , enemySkillLevel ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_EXP 32
3839: PPUSH
3840: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3844: CALL_OW 44
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3604
3860: POP
3861: POP
// end ;
3862: LD_VAR 0 1
3866: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
// currentEnemyGroup = [ ] ;
3872: LD_ADDR_EXP 65
3876: PUSH
3877: EMPTY
3878: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_EXP 40
3893: PPUSH
3894: LD_EXP 41
3898: PPUSH
3899: CALL_OW 12
3903: PUSH
3904: FOR_TO
3905: IFFALSE 3984
// begin uc_side = 2 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 2
3914: ST_TO_ADDR
// uc_nation = nation_arabian ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 2
3922: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_EXP 32
3930: PUSH
3931: LD_INT 1
3933: MINUS
3934: PPUSH
3935: CALL_OW 381
// unit = CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3949: LD_ADDR_EXP 65
3953: PUSH
3954: LD_EXP 65
3958: PUSH
3959: LD_VAR 0 4
3963: ADD
3964: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 1
3974: PPUSH
3975: LD_INT 0
3977: PPUSH
3978: CALL_OW 49
// end ;
3982: GO 3904
3984: POP
3985: POP
// for i := 1 to rand ( 1 , 3 ) do
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 12
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4083
// begin uc_side = 2 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 2
4017: ST_TO_ADDR
// uc_nation = nation_arabian ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 32
4033: PPUSH
4034: CALL_OW 384
// unit = CreateHuman ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4048: LD_ADDR_EXP 65
4052: PUSH
4053: LD_EXP 65
4057: PUSH
4058: LD_VAR 0 4
4062: ADD
4063: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4064: LD_VAR 0 4
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_INT 0
4076: PPUSH
4077: CALL_OW 49
// end ;
4081: GO 4007
4083: POP
4084: POP
// end ;
4085: LD_VAR 0 2
4089: RET
// export function PrepareArabianKiller ; var un ; begin
4090: LD_INT 0
4092: PPUSH
4093: PPUSH
// uc_side = 5 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 5
4101: ST_TO_ADDR
// uc_nation = nation_arabian ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// hc_class = class_soldier ;
4110: LD_ADDR_OWVAR 28
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// un = CreateHuman ;
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_EXP 54
4175: PPUSH
4176: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4180: LD_ADDR_EXP 23
4184: PUSH
4185: LD_EXP 23
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: ST_TO_ADDR
// end ;
4194: LD_VAR 0 1
4198: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
// firstAttackGroup = [ ] ;
4205: LD_ADDR_EXP 64
4209: PUSH
4210: EMPTY
4211: ST_TO_ADDR
// uc_side = 2 ;
4212: LD_ADDR_OWVAR 20
4216: PUSH
4217: LD_INT 2
4219: ST_TO_ADDR
// uc_nation = nation_arabian ;
4220: LD_ADDR_OWVAR 21
4224: PUSH
4225: LD_INT 2
4227: ST_TO_ADDR
// for i := 1 to 3 do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4303
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4244: LD_INT 0
4246: PPUSH
4247: LD_EXP 32
4251: PUSH
4252: LD_INT 2
4254: MINUS
4255: PPUSH
4256: CALL_OW 381
// unit = CreateHuman ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: CALL_OW 44
4269: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4270: LD_ADDR_EXP 64
4274: PUSH
4275: LD_EXP 64
4279: PUSH
4280: LD_VAR 0 3
4284: ADD
4285: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 7
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// end ;
4301: GO 4241
4303: POP
4304: POP
// vc_weapon = ar_light_gun ;
4305: LD_ADDR_OWVAR 40
4309: PUSH
4310: LD_INT 23
4312: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4313: LD_ADDR_OWVAR 37
4317: PUSH
4318: LD_INT 13
4320: ST_TO_ADDR
// vc_control = control_manual ;
4321: LD_ADDR_OWVAR 38
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// vc_engine = engine_combustion ;
4329: LD_ADDR_OWVAR 39
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4337: LD_ADDR_OWVAR 41
4341: PUSH
4342: LD_INT 100
4344: ST_TO_ADDR
// veh = CreateVehicle ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: CALL_OW 45
4354: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4355: LD_ADDR_EXP 64
4359: PUSH
4360: LD_EXP 64
4364: PUSH
4365: LD_VAR 0 4
4369: ADD
4370: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4371: LD_VAR 0 4
4375: PPUSH
4376: LD_INT 7
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4386: LD_INT 0
4388: PPUSH
4389: LD_EXP 32
4393: PUSH
4394: LD_INT 1
4396: MINUS
4397: PPUSH
4398: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4402: CALL_OW 44
4406: PPUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: CALL_OW 52
// end ; end_of_file
4416: LD_VAR 0 1
4420: RET
// export function Nef_PrepareNature ; var i , un ; begin
4421: LD_INT 0
4423: PPUSH
4424: PPUSH
4425: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_EXP 26
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4556
// begin uc_side = 0 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 0
4455: ST_TO_ADDR
// uc_nation = nation_nature ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 0
4463: ST_TO_ADDR
// hc_class = class_apeman ;
4464: LD_ADDR_OWVAR 28
4468: PUSH
4469: LD_INT 12
4471: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4472: LD_ADDR_OWVAR 31
4476: PUSH
4477: LD_EXP 27
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_INT 2
4493: ARRAY
4494: PUSH
4495: LD_EXP 27
4499: PUSH
4500: LD_INT 3
4502: ARRAY
4503: PUSH
4504: LD_EXP 27
4508: PUSH
4509: LD_INT 4
4511: ARRAY
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4519: LD_ADDR_OWVAR 35
4523: PUSH
4524: LD_EXP 28
4528: ST_TO_ADDR
// un = CreateHuman ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: CALL_OW 44
4538: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_INT 8
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
// end ;
4554: GO 4445
4556: POP
4557: POP
// for i := 1 to animalsAmount [ 2 ] do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 26
4572: PUSH
4573: LD_INT 2
4575: ARRAY
4576: PUSH
4577: FOR_TO
4578: IFFALSE 4688
// begin uc_side = 0 ;
4580: LD_ADDR_OWVAR 20
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// uc_nation = nation_nature ;
4588: LD_ADDR_OWVAR 21
4592: PUSH
4593: LD_INT 0
4595: ST_TO_ADDR
// hc_class = class_phororhacos ;
4596: LD_ADDR_OWVAR 28
4600: PUSH
4601: LD_INT 18
4603: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4604: LD_ADDR_OWVAR 31
4608: PUSH
4609: LD_EXP 27
4613: PUSH
4614: LD_INT 1
4616: ARRAY
4617: PUSH
4618: LD_EXP 27
4622: PUSH
4623: LD_INT 2
4625: ARRAY
4626: PUSH
4627: LD_EXP 27
4631: PUSH
4632: LD_INT 3
4634: ARRAY
4635: PUSH
4636: LD_EXP 27
4640: PUSH
4641: LD_INT 4
4643: ARRAY
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4651: LD_ADDR_OWVAR 35
4655: PUSH
4656: LD_EXP 28
4660: ST_TO_ADDR
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 8
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4577
4688: POP
4689: POP
// for i := 1 to animalsAmount [ 3 ] do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_EXP 26
4704: PUSH
4705: LD_INT 3
4707: ARRAY
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4820
// begin uc_side = 0 ;
4712: LD_ADDR_OWVAR 20
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// uc_nation = nation_nature ;
4720: LD_ADDR_OWVAR 21
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// hc_class = class_tiger ;
4728: LD_ADDR_OWVAR 28
4732: PUSH
4733: LD_INT 14
4735: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4736: LD_ADDR_OWVAR 31
4740: PUSH
4741: LD_EXP 27
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PUSH
4750: LD_EXP 27
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PUSH
4759: LD_EXP 27
4763: PUSH
4764: LD_INT 3
4766: ARRAY
4767: PUSH
4768: LD_EXP 27
4772: PUSH
4773: LD_INT 4
4775: ARRAY
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4783: LD_ADDR_OWVAR 35
4787: PUSH
4788: LD_EXP 28
4792: ST_TO_ADDR
// un = CreateHuman ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: CALL_OW 44
4802: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 8
4810: PPUSH
4811: LD_INT 0
4813: PPUSH
4814: CALL_OW 49
// end ;
4818: GO 4709
4820: POP
4821: POP
// for i := 1 to animalsAmount [ 4 ] do
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 26
4836: PUSH
4837: LD_INT 4
4839: ARRAY
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4952
// begin uc_side = 0 ;
4844: LD_ADDR_OWVAR 20
4848: PUSH
4849: LD_INT 0
4851: ST_TO_ADDR
// uc_nation = nation_nature ;
4852: LD_ADDR_OWVAR 21
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// hc_class = 21 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 21
4867: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4868: LD_ADDR_OWVAR 31
4872: PUSH
4873: LD_EXP 27
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PUSH
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 2
4889: ARRAY
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: LD_EXP 27
4904: PUSH
4905: LD_INT 4
4907: ARRAY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4915: LD_ADDR_OWVAR 35
4919: PUSH
4920: LD_EXP 28
4924: ST_TO_ADDR
// un = CreateHuman ;
4925: LD_ADDR_VAR 0 3
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 8
4942: PPUSH
4943: LD_INT 0
4945: PPUSH
4946: CALL_OW 49
// end ;
4950: GO 4841
4952: POP
4953: POP
// for i := 1 to animalsAmount [ 5 ] do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: DOUBLE
4960: LD_INT 1
4962: DEC
4963: ST_TO_ADDR
4964: LD_EXP 26
4968: PUSH
4969: LD_INT 5
4971: ARRAY
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5035
// begin uc_side = 0 ;
4976: LD_ADDR_OWVAR 20
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// uc_nation = nation_nature ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// vc_chassis := 31 ;
4992: LD_ADDR_OWVAR 37
4996: PUSH
4997: LD_INT 31
4999: ST_TO_ADDR
// vc_control := control_rider ;
5000: LD_ADDR_OWVAR 38
5004: PUSH
5005: LD_INT 4
5007: ST_TO_ADDR
// un := CreateVehicle ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 45
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 8
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4973
5035: POP
5036: POP
// end ; end_of_file
5037: LD_VAR 0 1
5041: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
5051: PPUSH
5052: PPUSH
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
// for unit in units do
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5110
// if not ignorePath then
5075: LD_VAR 0 3
5079: NOT
5080: IFFALSE 5096
// SetTag ( unit , 0 ) else
5082: LD_VAR 0 8
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: CALL_OW 109
5094: GO 5108
// SetTag ( unit , 1 ) ;
5096: LD_VAR 0 8
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 109
5108: GO 5072
5110: POP
5111: POP
// startAttacks = false ;
5112: LD_ADDR_VAR 0 21
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5120: LD_ADDR_VAR 0 17
5124: PUSH
5125: LD_VAR 0 2
5129: PUSH
5130: LD_VAR 0 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_VAR 0 2
5149: ARRAY
5150: PUSH
5151: LD_INT 2
5153: ARRAY
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// mechanics = [ ] ;
5159: LD_ADDR_VAR 0 12
5163: PUSH
5164: EMPTY
5165: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5166: LD_ADDR_VAR 0 9
5170: PUSH
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 50
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5219: LD_ADDR_VAR 0 11
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 4
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 72
5253: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5254: LD_ADDR_VAR 0 13
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 1
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 24
5279: PUSH
5280: LD_INT 1000
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 72
5299: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5300: LD_ADDR_VAR 0 15
5304: PUSH
5305: LD_INT 9
5307: PPUSH
5308: CALL_OW 435
5312: ST_TO_ADDR
// if not ignorePath then
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 6300
// begin for unit in attackUnits do
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: FOR_IN
5331: IFFALSE 6074
// begin if path and not startAttacks then
5333: LD_VAR 0 2
5337: PUSH
5338: LD_VAR 0 21
5342: NOT
5343: AND
5344: IFFALSE 6063
// begin i = 1 ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5354: LD_ADDR_VAR 0 15
5358: PUSH
5359: LD_INT 9
5361: PPUSH
5362: CALL_OW 435
5366: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5367: LD_ADDR_VAR 0 18
5371: PUSH
5372: LD_INT 81
5374: PUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 255
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PPUSH
5394: LD_VAR 0 8
5398: PPUSH
5399: CALL_OW 74
5403: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5404: LD_ADDR_VAR 0 19
5408: PUSH
5409: LD_VAR 0 15
5413: PPUSH
5414: LD_VAR 0 8
5418: PPUSH
5419: CALL_OW 250
5423: PPUSH
5424: LD_VAR 0 8
5428: PPUSH
5429: CALL_OW 251
5433: PPUSH
5434: CALL_OW 439
5438: ST_TO_ADDR
// if damageUnits and medics then
5439: LD_VAR 0 13
5443: PUSH
5444: LD_VAR 0 11
5448: AND
5449: IFFALSE 5471
// ComHeal ( medics , damageUnits [ 1 ] ) else
5451: LD_VAR 0 11
5455: PPUSH
5456: LD_VAR 0 13
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 128
5469: GO 5514
// if medics then
5471: LD_VAR 0 11
5475: IFFALSE 5514
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5477: LD_VAR 0 11
5481: PPUSH
5482: LD_VAR 0 9
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PPUSH
5491: CALL_OW 250
5495: PPUSH
5496: LD_VAR 0 9
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: CALL_OW 251
5509: PPUSH
5510: CALL_OW 111
// if not HasTask ( unit ) then
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 314
5523: NOT
5524: IFFALSE 5763
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5526: LD_ADDR_VAR 0 19
5530: PUSH
5531: LD_VAR 0 15
5535: PPUSH
5536: LD_VAR 0 8
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 8
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: CALL_OW 439
5560: ST_TO_ADDR
// if i > crates then
5561: LD_VAR 0 7
5565: PUSH
5566: LD_VAR 0 15
5570: GREATER
5571: IFFALSE 5581
// i = 1 ;
5573: LD_ADDR_VAR 0 7
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5581: LD_VAR 0 18
5585: PUSH
5586: LD_VAR 0 19
5590: AND
5591: IFFALSE 5706
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5593: LD_VAR 0 8
5597: PPUSH
5598: LD_VAR 0 18
5602: PPUSH
5603: CALL_OW 250
5607: PPUSH
5608: LD_VAR 0 18
5612: PPUSH
5613: CALL_OW 251
5617: PPUSH
5618: CALL_OW 297
5622: PUSH
5623: LD_VAR 0 8
5627: PPUSH
5628: LD_VAR 0 19
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 19
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 297
5650: LESS
5651: IFFALSE 5669
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5653: LD_VAR 0 9
5657: PPUSH
5658: LD_VAR 0 18
5662: PPUSH
5663: CALL_OW 115
5667: GO 5704
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5669: LD_VAR 0 9
5673: PPUSH
5674: LD_VAR 0 15
5678: PUSH
5679: LD_VAR 0 7
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 15
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: PLUS
5698: ARRAY
5699: PPUSH
5700: CALL_OW 116
// end else
5704: GO 5763
// if crates then
5706: LD_VAR 0 15
5710: IFFALSE 5749
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5712: LD_VAR 0 9
5716: PPUSH
5717: LD_VAR 0 15
5721: PUSH
5722: LD_VAR 0 7
5726: ARRAY
5727: PPUSH
5728: LD_VAR 0 15
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: ARRAY
5742: PPUSH
5743: CALL_OW 116
5747: GO 5763
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5749: LD_VAR 0 9
5753: PPUSH
5754: LD_VAR 0 18
5758: PPUSH
5759: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5763: LD_INT 35
5765: PPUSH
5766: CALL_OW 67
// if path then
5770: LD_VAR 0 2
5774: IFFALSE 5860
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5776: LD_ADDR_VAR 0 16
5780: PUSH
5781: LD_VAR 0 8
5785: PPUSH
5786: LD_VAR 0 2
5790: PPUSH
5791: CALL 7190 0 2
5795: ST_TO_ADDR
// if agressiveMove then
5796: LD_VAR 0 4
5800: IFFALSE 5831
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5802: LD_VAR 0 9
5806: PPUSH
5807: LD_VAR 0 16
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_VAR 0 16
5820: PUSH
5821: LD_INT 2
5823: ARRAY
5824: PPUSH
5825: CALL_OW 114
5829: GO 5858
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5831: LD_VAR 0 9
5835: PPUSH
5836: LD_VAR 0 16
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 16
5849: PUSH
5850: LD_INT 2
5852: ARRAY
5853: PPUSH
5854: CALL_OW 111
// end else
5858: GO 5868
// startAttacks = true ;
5860: LD_ADDR_VAR 0 21
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// i = i + 2 ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_INT 2
5880: PLUS
5881: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5882: LD_VAR 0 8
5886: PPUSH
5887: CALL_OW 314
5891: NOT
5892: PUSH
5893: LD_INT 22
5895: PUSH
5896: LD_VAR 0 8
5900: PPUSH
5901: CALL_OW 255
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 92
5912: PUSH
5913: LD_VAR 0 16
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 16
5926: PUSH
5927: LD_INT 2
5929: ARRAY
5930: PUSH
5931: LD_INT 4
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: LD_INT 3
5951: GREATER
5952: AND
5953: PUSH
5954: LD_VAR 0 21
5958: NOT
5959: AND
5960: IFFALSE 5354
// for i := 1 to path do
5962: LD_ADDR_VAR 0 7
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_VAR 0 2
5976: PUSH
5977: FOR_TO
5978: IFFALSE 6061
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 7
5989: ARRAY
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_VAR 0 16
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: EQUAL
6004: PUSH
6005: LD_VAR 0 2
6009: PUSH
6010: LD_VAR 0 7
6014: ARRAY
6015: PUSH
6016: LD_INT 2
6018: ARRAY
6019: PUSH
6020: LD_VAR 0 16
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: EQUAL
6029: AND
6030: IFFALSE 6059
// begin path = path diff [ path [ i ] ] ;
6032: LD_ADDR_VAR 0 2
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: LD_VAR 0 7
6051: ARRAY
6052: PUSH
6053: EMPTY
6054: LIST
6055: DIFF
6056: ST_TO_ADDR
// break ;
6057: GO 6061
// end ;
6059: GO 5977
6061: POP
6062: POP
// end ; if not path then
6063: LD_VAR 0 2
6067: NOT
6068: IFFALSE 6072
// break ;
6070: GO 6074
// end ;
6072: GO 5330
6074: POP
6075: POP
// repeat unitsReachPathEnd = 0 ;
6076: LD_ADDR_VAR 0 20
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// for attackUnit in attackUnits do
6084: LD_ADDR_VAR 0 10
6088: PUSH
6089: LD_VAR 0 9
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6268
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_VAR 0 17
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 17
6115: PUSH
6116: LD_INT 2
6118: ARRAY
6119: PPUSH
6120: CALL_OW 297
6124: PUSH
6125: LD_INT 7
6127: LESS
6128: NOT
6129: PUSH
6130: LD_VAR 0 10
6134: PPUSH
6135: CALL_OW 110
6139: PUSH
6140: LD_INT 0
6142: EQUAL
6143: AND
6144: IFFALSE 6210
// begin if agressiveMove then
6146: LD_VAR 0 4
6150: IFFALSE 6181
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6152: LD_VAR 0 10
6156: PPUSH
6157: LD_VAR 0 17
6161: PUSH
6162: LD_INT 1
6164: ARRAY
6165: PPUSH
6166: LD_VAR 0 17
6170: PUSH
6171: LD_INT 2
6173: ARRAY
6174: PPUSH
6175: CALL_OW 114
6179: GO 6208
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6181: LD_VAR 0 10
6185: PPUSH
6186: LD_VAR 0 17
6190: PUSH
6191: LD_INT 1
6193: ARRAY
6194: PPUSH
6195: LD_VAR 0 17
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: CALL_OW 111
// end else
6208: GO 6237
// if GetTag ( attackUnit ) = 0 then
6210: LD_VAR 0 10
6214: PPUSH
6215: CALL_OW 110
6219: PUSH
6220: LD_INT 0
6222: EQUAL
6223: IFFALSE 6237
// SetTag ( attackUnit , 1 ) ;
6225: LD_VAR 0 10
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: CALL_OW 109
// if GetTag ( unit ) = 1 then
6237: LD_VAR 0 8
6241: PPUSH
6242: CALL_OW 110
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6266
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6252: LD_ADDR_VAR 0 20
6256: PUSH
6257: LD_VAR 0 20
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6094
6268: POP
6269: POP
// wait ( 0 0$1 ) ;
6270: LD_INT 35
6272: PPUSH
6273: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6277: LD_VAR 0 20
6281: PUSH
6282: LD_VAR 0 9
6286: PUSH
6287: LD_INT 3
6289: MINUS
6290: GREATER
6291: IFFALSE 6076
// wait ( 0 0$10 ) ;
6293: LD_INT 350
6295: PPUSH
6296: CALL_OW 67
// end ; for attackUnit in attackUnits do
6300: LD_ADDR_VAR 0 10
6304: PUSH
6305: LD_VAR 0 9
6309: PUSH
6310: FOR_IN
6311: IFFALSE 6327
// SetTag ( attackUnit , 2 ) ;
6313: LD_VAR 0 10
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 109
6325: GO 6310
6327: POP
6328: POP
// startAttacks = true ;
6329: LD_ADDR_VAR 0 21
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// if startAttacks then
6337: LD_VAR 0 21
6341: IFFALSE 7160
// begin repeat wait ( 0 0$1 ) ;
6343: LD_INT 35
6345: PPUSH
6346: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6350: LD_ADDR_VAR 0 11
6354: PUSH
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 50
6362: PUSH
6363: EMPTY
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 72
6384: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6385: LD_ADDR_VAR 0 13
6389: PUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 1000
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 72
6441: ST_TO_ADDR
// if damageUnits and medics then
6442: LD_VAR 0 13
6446: PUSH
6447: LD_VAR 0 11
6451: AND
6452: IFFALSE 6474
// ComHeal ( medics , damageUnits [ 1 ] ) else
6454: LD_VAR 0 11
6458: PPUSH
6459: LD_VAR 0 13
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: CALL_OW 128
6472: GO 6524
// if medics and not damageUnits then
6474: LD_VAR 0 11
6478: PUSH
6479: LD_VAR 0 13
6483: NOT
6484: AND
6485: IFFALSE 6524
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6487: LD_VAR 0 11
6491: PPUSH
6492: LD_VAR 0 9
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: CALL_OW 250
6505: PPUSH
6506: LD_VAR 0 9
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: PPUSH
6515: CALL_OW 251
6519: PPUSH
6520: CALL_OW 111
// for attackUnit in attackUnits do
6524: LD_ADDR_VAR 0 10
6528: PUSH
6529: LD_VAR 0 9
6533: PUSH
6534: FOR_IN
6535: IFFALSE 7151
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6537: LD_ADDR_VAR 0 22
6541: PUSH
6542: LD_INT 81
6544: PUSH
6545: LD_VAR 0 10
6549: PPUSH
6550: CALL_OW 255
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PPUSH
6564: LD_VAR 0 10
6568: PPUSH
6569: CALL_OW 74
6573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6574: LD_ADDR_VAR 0 23
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_VAR 0 10
6586: PPUSH
6587: CALL_OW 255
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 59
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 21
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: PPUSH
6643: LD_VAR 0 10
6647: PPUSH
6648: CALL_OW 74
6652: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6653: LD_VAR 0 10
6657: PPUSH
6658: CALL_OW 110
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: IFFALSE 6826
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6668: LD_VAR 0 10
6672: PPUSH
6673: LD_VAR 0 22
6677: PPUSH
6678: CALL_OW 296
6682: PUSH
6683: LD_INT 10
6685: PLUS
6686: PUSH
6687: LD_VAR 0 10
6691: PPUSH
6692: LD_VAR 0 23
6696: PPUSH
6697: CALL_OW 296
6701: LESS
6702: IFFALSE 6720
// ComAttackUnit ( attackUnit , target1 ) else
6704: LD_VAR 0 10
6708: PPUSH
6709: LD_VAR 0 22
6713: PPUSH
6714: CALL_OW 115
6718: GO 6734
// ComAttackUnit ( attackUnit , target2 ) ;
6720: LD_VAR 0 10
6724: PPUSH
6725: LD_VAR 0 23
6729: PPUSH
6730: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6734: LD_VAR 0 10
6738: PPUSH
6739: CALL_OW 256
6743: PUSH
6744: LD_INT 650
6746: LESS
6747: PUSH
6748: LD_VAR 0 10
6752: PPUSH
6753: CALL_OW 247
6757: PUSH
6758: LD_INT 2
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 10
6767: PPUSH
6768: CALL_OW 263
6772: PUSH
6773: LD_INT 1
6775: EQUAL
6776: AND
6777: IFFALSE 6826
// begin SetTag ( attackUnit , 3 ) ;
6779: LD_VAR 0 10
6783: PPUSH
6784: LD_INT 3
6786: PPUSH
6787: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6791: LD_VAR 0 10
6795: PPUSH
6796: CALL_OW 313
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: LD_INT 3
6807: PPUSH
6808: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6812: LD_VAR 0 10
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6826: LD_VAR 0 10
6830: PPUSH
6831: LD_VAR 0 5
6835: PPUSH
6836: CALL_OW 308
6840: PUSH
6841: LD_VAR 0 10
6845: PPUSH
6846: CALL_OW 110
6850: PUSH
6851: LD_INT 3
6853: EQUAL
6854: AND
6855: PUSH
6856: LD_VAR 0 10
6860: PPUSH
6861: CALL_OW 313
6865: AND
6866: IFFALSE 6939
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6868: LD_ADDR_VAR 0 14
6872: PUSH
6873: LD_VAR 0 10
6877: PPUSH
6878: CALL_OW 313
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: ST_TO_ADDR
// if not driver in mechanics then
6887: LD_VAR 0 14
6891: PUSH
6892: LD_VAR 0 12
6896: IN
6897: NOT
6898: IFFALSE 6916
// mechanics = mechanics ^ driver ;
6900: LD_ADDR_VAR 0 12
6904: PUSH
6905: LD_VAR 0 12
6909: PUSH
6910: LD_VAR 0 14
6914: ADD
6915: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6916: LD_VAR 0 14
6920: PPUSH
6921: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6925: LD_VAR 0 14
6929: PPUSH
6930: LD_VAR 0 10
6934: PPUSH
6935: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6939: LD_VAR 0 10
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: EQUAL
6952: IFFALSE 7070
// begin SetTag ( attackUnit , 2 ) ;
6954: LD_VAR 0 10
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6966: LD_VAR 0 10
6970: PPUSH
6971: CALL_OW 247
6975: PUSH
6976: LD_INT 2
6978: EQUAL
6979: PUSH
6980: LD_VAR 0 10
6984: PPUSH
6985: CALL_OW 263
6989: PUSH
6990: LD_INT 1
6992: EQUAL
6993: AND
6994: PUSH
6995: LD_VAR 0 10
6999: PPUSH
7000: CALL_OW 313
7004: NOT
7005: AND
7006: IFFALSE 7070
// begin SetFuel ( attackUnit , 100 ) ;
7008: LD_VAR 0 10
7012: PPUSH
7013: LD_INT 100
7015: PPUSH
7016: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
7020: LD_VAR 0 12
7024: PPUSH
7025: LD_VAR 0 10
7029: PPUSH
7030: CALL_OW 74
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7044: LD_ADDR_VAR 0 12
7048: PUSH
7049: LD_VAR 0 12
7053: PUSH
7054: LD_VAR 0 12
7058: PPUSH
7059: LD_VAR 0 10
7063: PPUSH
7064: CALL_OW 74
7068: DIFF
7069: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7070: LD_ADDR_VAR 0 8
7074: PUSH
7075: LD_VAR 0 12
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7147
// begin if not IsInArea ( unit , retreatArea ) then
7083: LD_VAR 0 8
7087: PPUSH
7088: LD_VAR 0 5
7092: PPUSH
7093: CALL_OW 308
7097: NOT
7098: IFFALSE 7114
// ComMoveToArea ( unit , retreatArea ) ;
7100: LD_VAR 0 8
7104: PPUSH
7105: LD_VAR 0 5
7109: PPUSH
7110: CALL_OW 113
// if GetLives ( unit ) < 250 then
7114: LD_VAR 0 8
7118: PPUSH
7119: CALL_OW 256
7123: PUSH
7124: LD_INT 250
7126: LESS
7127: IFFALSE 7145
// mechanics = mechanics diff unit ;
7129: LD_ADDR_VAR 0 12
7133: PUSH
7134: LD_VAR 0 12
7138: PUSH
7139: LD_VAR 0 8
7143: DIFF
7144: ST_TO_ADDR
// end ;
7145: GO 7080
7147: POP
7148: POP
// end ;
7149: GO 6534
7151: POP
7152: POP
// until not attackUnits ;
7153: LD_VAR 0 9
7157: NOT
7158: IFFALSE 6343
// end ; wait ( 0 0$1 ) ;
7160: LD_INT 35
7162: PPUSH
7163: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PPUSH
7178: CALL_OW 72
7182: NOT
7183: IFFALSE 5166
// end ;
7185: LD_VAR 0 6
7189: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// for i := 2 to path do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 2
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 2
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7386
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: LD_VAR 0 2
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 4
7277: ARRAY
7278: PUSH
7279: LD_INT 2
7281: ARRAY
7282: PPUSH
7283: CALL_OW 297
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_VAR 0 5
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 2
7309: ARRAY
7310: PPUSH
7311: CALL_OW 297
7315: LESS
7316: IFFALSE 7384
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7318: LD_ADDR_VAR 0 5
7322: PUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 4
7340: ARRAY
7341: PUSH
7342: LD_INT 1
7344: ARRAY
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 4
7373: ARRAY
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PPUSH
7379: CALL_OW 1
7383: ST_TO_ADDR
// end ; end ;
7384: GO 7245
7386: POP
7387: POP
// result = nearPosition ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 3
7402: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7403: LD_EXP 58
7407: PPUSH
7408: CALL_OW 274
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 275
7420: PUSH
7421: LD_INT 0
7423: GREATER
7424: IFFALSE 7530
7426: GO 7428
7428: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7429: LD_EXP 57
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 72
7448: PPUSH
7449: LD_INT 31
7451: PPUSH
7452: LD_INT 105
7454: PPUSH
7455: LD_INT 51
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7465: LD_EXP 57
7469: PPUSH
7470: LD_INT 25
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: PPUSH
7485: LD_INT 31
7487: PPUSH
7488: LD_INT 114
7490: PPUSH
7491: LD_INT 58
7493: PPUSH
7494: LD_INT 3
7496: PPUSH
7497: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7501: LD_EXP 57
7505: PPUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 72
7520: PPUSH
7521: LD_EXP 58
7525: PPUSH
7526: CALL_OW 180
// end ; end_of_file
7530: END
// export function Lose_Burlak ; begin
7531: LD_INT 0
7533: PPUSH
// YouLost ( Burlak ) ;
7534: LD_STRING Burlak
7536: PPUSH
7537: CALL_OW 104
// end ;
7541: LD_VAR 0 1
7545: RET
// export function Lose_Gaydar ; begin
7546: LD_INT 0
7548: PPUSH
// YouLost ( Gaydar ) ;
7549: LD_STRING Gaydar
7551: PPUSH
7552: CALL_OW 104
// end ;
7556: LD_VAR 0 1
7560: RET
// export function Lose_SelfAttack ; begin
7561: LD_INT 0
7563: PPUSH
// YouLost ( SelfAttack ) ;
7564: LD_STRING SelfAttack
7566: PPUSH
7567: CALL_OW 104
// end ;
7571: LD_VAR 0 1
7575: RET
// export function Lose_Arrest ; begin
7576: LD_INT 0
7578: PPUSH
// YouLost ( Arrest ) ;
7579: LD_STRING Arrest
7581: PPUSH
7582: CALL_OW 104
// end ;
7586: LD_VAR 0 1
7590: RET
// export function Lose_ArabBreakthrough ; begin
7591: LD_INT 0
7593: PPUSH
// YouLost ( ArabBreakthrough ) ;
7594: LD_STRING ArabBreakthrough
7596: PPUSH
7597: CALL_OW 104
// end ;
7601: LD_VAR 0 1
7605: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7606: LD_EXP 7
7610: NOT
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: NOT
7652: AND
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: NOT
7694: AND
7695: IFFALSE 7708
7697: GO 7699
7699: DISABLE
// begin enable ;
7700: ENABLE
// YouLost ( Engineer ) ;
7701: LD_STRING Engineer
7703: PPUSH
7704: CALL_OW 104
// end ; end_of_file
7708: END
// export function FinishMission ; begin
7709: LD_INT 0
7711: PPUSH
// SetRewards ;
7712: CALL 7733 0 0
// SavePlayerCharacters ;
7716: CALL 8158 0 0
// SaveGlobalVariables ;
7720: CALL 8386 0 0
// YouWin ;
7724: CALL_OW 103
// end ;
7728: LD_VAR 0 1
7732: RET
// function SetRewards ; var unitsToReward ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
// SetAchievements ;
7737: CALL 18539 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7741: LD_INT 22
7743: PUSH
7744: LD_INT 3
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: NOT
7770: IFFALSE 7784
// AddMedal ( Dismantle , 1 ) else
7772: LD_STRING Dismantle
7774: PPUSH
7775: LD_INT 1
7777: PPUSH
7778: CALL_OW 101
7782: GO 7795
// AddMedal ( Dismantle , - 1 ) ;
7784: LD_STRING Dismantle
7786: PPUSH
7787: LD_INT 1
7789: NEG
7790: PPUSH
7791: CALL_OW 101
// if killedArabianUnits >= 25 then
7795: LD_EXP 22
7799: PUSH
7800: LD_INT 25
7802: GREATEREQUAL
7803: IFFALSE 7825
// begin AddMedal ( EnemyLosses , 1 ) ;
7805: LD_STRING EnemyLosses
7807: PPUSH
7808: LD_INT 1
7810: PPUSH
7811: CALL_OW 101
// heikeHeavyLosses = true ;
7815: LD_ADDR_EXP 4
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// end else
7823: GO 7836
// AddMedal ( EnemyLosses , - 1 ) ;
7825: LD_STRING EnemyLosses
7827: PPUSH
7828: LD_INT 1
7830: NEG
7831: PPUSH
7832: CALL_OW 101
// if not lostUnits then
7836: LD_EXP 24
7840: NOT
7841: IFFALSE 7855
// AddMedal ( LittleLosses , 1 ) else
7843: LD_STRING LittleLosses
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 101
7853: GO 7866
// AddMedal ( LittleLosses , - 1 ) ;
7855: LD_STRING LittleLosses
7857: PPUSH
7858: LD_INT 1
7860: NEG
7861: PPUSH
7862: CALL_OW 101
// GiveMedals ( Main ) ;
7866: LD_STRING Main
7868: PPUSH
7869: CALL_OW 102
// unitsToReward = [ ] ;
7873: LD_ADDR_VAR 0 2
7877: PUSH
7878: EMPTY
7879: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7880: LD_EXP 42
7884: PPUSH
7885: CALL_OW 255
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: IFFALSE 7911
// unitsToReward = unitsToReward ^ Burlak ;
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 2
7904: PUSH
7905: LD_EXP 42
7909: ADD
7910: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7911: LD_EXP 43
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 3
7923: EQUAL
7924: IFFALSE 7942
// unitsToReward = unitsToReward ^ Gnyevko ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_EXP 43
7940: ADD
7941: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7942: LD_EXP 44
7946: PPUSH
7947: CALL_OW 255
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: IFFALSE 7973
// unitsToReward = unitsToReward ^ Kirilenkova ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 2
7966: PUSH
7967: LD_EXP 44
7971: ADD
7972: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7973: LD_EXP 45
7977: PPUSH
7978: CALL_OW 255
7982: PUSH
7983: LD_INT 3
7985: EQUAL
7986: IFFALSE 8004
// unitsToReward = unitsToReward ^ Kovalyuk ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_EXP 45
8002: ADD
8003: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
8004: LD_EXP 46
8008: PPUSH
8009: CALL_OW 255
8013: PUSH
8014: LD_INT 3
8016: EQUAL
8017: IFFALSE 8035
// unitsToReward = unitsToReward ^ Belkov ;
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: LD_VAR 0 2
8028: PUSH
8029: LD_EXP 46
8033: ADD
8034: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8035: LD_EXP 47
8039: PPUSH
8040: CALL_OW 255
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: IFFALSE 8066
// unitsToReward = unitsToReward ^ Belkov2 ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: LD_VAR 0 2
8059: PUSH
8060: LD_EXP 47
8064: ADD
8065: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8066: LD_EXP 48
8070: PPUSH
8071: CALL_OW 255
8075: PUSH
8076: LD_INT 3
8078: EQUAL
8079: IFFALSE 8097
// unitsToReward = unitsToReward ^ Scholtze ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_EXP 48
8095: ADD
8096: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8097: LD_EXP 49
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: IFFALSE 8128
// unitsToReward = unitsToReward ^ Kuzmov ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_EXP 49
8126: ADD
8127: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_EXP 62
8142: ADD
8143: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 43
// end ;
8153: LD_VAR 0 1
8157: RET
// function SavePlayerCharacters ; var othersYour ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8162: LD_EXP 42
8166: PPUSH
8167: LD_STRING 04_Burlak
8169: PPUSH
8170: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8174: LD_EXP 43
8178: PPUSH
8179: CALL_OW 255
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8201
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8189: LD_EXP 43
8193: PPUSH
8194: LD_STRING 04_Gnyevko
8196: PPUSH
8197: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8201: LD_EXP 45
8205: PPUSH
8206: CALL_OW 255
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: IFFALSE 8228
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8216: LD_EXP 45
8220: PPUSH
8221: LD_STRING 04_Kovalyuk
8223: PPUSH
8224: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8228: LD_EXP 44
8232: PPUSH
8233: CALL_OW 255
8237: PUSH
8238: LD_INT 3
8240: EQUAL
8241: IFFALSE 8255
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8243: LD_EXP 44
8247: PPUSH
8248: LD_STRING 04_Kirilenkova
8250: PPUSH
8251: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8255: LD_EXP 48
8259: PPUSH
8260: CALL_OW 255
8264: PUSH
8265: LD_INT 3
8267: EQUAL
8268: IFFALSE 8282
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8270: LD_EXP 48
8274: PPUSH
8275: LD_STRING 04_Scholtze
8277: PPUSH
8278: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8282: LD_EXP 46
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 3
8294: EQUAL
8295: IFFALSE 8309
// SaveCharacters ( Belkov , 04_Belkov ) ;
8297: LD_EXP 46
8301: PPUSH
8302: LD_STRING 04_Belkov
8304: PPUSH
8305: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8309: LD_EXP 47
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: IFFALSE 8336
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8324: LD_EXP 47
8328: PPUSH
8329: LD_STRING 04_Belkov2
8331: PPUSH
8332: CALL_OW 38
// if IsOK ( Kuzmov ) then
8336: LD_EXP 49
8340: PPUSH
8341: CALL_OW 302
8345: IFFALSE 8359
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8347: LD_EXP 49
8351: PPUSH
8352: LD_STRING 04_Kuzmov
8354: PPUSH
8355: CALL_OW 38
// othersYour = randomsToSave ;
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_EXP 62
8368: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8369: LD_EXP 62
8373: PPUSH
8374: LD_STRING 04_other_survivors
8376: PPUSH
8377: CALL_OW 38
// end ;
8381: LD_VAR 0 1
8385: RET
// function SaveGlobalVariables ; begin
8386: LD_INT 0
8388: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8389: LD_EXP 4
8393: PPUSH
8394: LD_STRING 04_HeikeHeavyLosses_1
8396: PPUSH
8397: CALL_OW 39
// end ; end_of_file
8401: LD_VAR 0 1
8405: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 255
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 266
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_INT 5
8442: PPUSH
8443: CALL_OW 308
8447: NOT
8448: AND
8449: IFFALSE 8460
// Dial_DepotInWrongPlace ( building ) ;
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL 11049 0 1
// end ;
8460: PPOPN 2
8462: END
// on BuildingComplete ( building ) do var i , cargo ;
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8467: LD_VAR 0 1
8471: PPUSH
8472: CALL_OW 255
8476: PUSH
8477: LD_INT 3
8479: EQUAL
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 266
8490: PUSH
8491: LD_INT 0
8493: EQUAL
8494: AND
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: LD_INT 5
8503: PPUSH
8504: CALL_OW 308
8508: AND
8509: PUSH
8510: LD_EXP 8
8514: NOT
8515: AND
8516: PUSH
8517: LD_EXP 9
8521: NOT
8522: AND
8523: IFFALSE 8549
// begin namedBase = true ;
8525: LD_ADDR_EXP 9
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_STRING chuikov
8540: PPUSH
8541: CALL_OW 500
// Dial_FinishDepot ;
8545: CALL 11323 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 255
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 266
8572: PUSH
8573: LD_INT 32
8575: EQUAL
8576: AND
8577: IFFALSE 8593
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8579: LD_ADDR_EXP 25
8583: PUSH
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 1
8591: PLUS
8592: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 255
8602: PUSH
8603: LD_INT 6
8605: EQUAL
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 266
8616: PUSH
8617: LD_INT 0
8619: EQUAL
8620: AND
8621: IFFALSE 8820
// begin secondBaseDepot = building ;
8623: LD_ADDR_EXP 58
8627: PUSH
8628: LD_VAR 0 1
8632: ST_TO_ADDR
// uc_side = 6 ;
8633: LD_ADDR_OWVAR 20
8637: PUSH
8638: LD_INT 6
8640: ST_TO_ADDR
// uc_nation = nation_russian ;
8641: LD_ADDR_OWVAR 21
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8649: LD_ADDR_OWVAR 37
8653: PUSH
8654: LD_INT 21
8656: ST_TO_ADDR
// vc_control = control_manual ;
8657: LD_ADDR_OWVAR 38
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// vc_engine = engine_combustion ;
8665: LD_ADDR_OWVAR 39
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8673: LD_ADDR_OWVAR 40
8677: PUSH
8678: LD_INT 51
8680: ST_TO_ADDR
// cargo = CreateVehicle ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: CALL_OW 45
8690: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8691: LD_VAR 0 3
8695: PPUSH
8696: LD_INT 3
8698: PPUSH
8699: LD_INT 0
8701: PPUSH
8702: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8706: LD_VAR 0 3
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 100
8716: PPUSH
8717: CALL_OW 291
// ComGive ( cargo , building ) ;
8721: LD_VAR 0 3
8725: PPUSH
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8735: LD_INT 0
8737: PPUSH
8738: LD_INT 2
8740: PPUSH
8741: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8745: CALL_OW 44
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: DOUBLE
8765: LD_INT 10
8767: DEC
8768: ST_TO_ADDR
8769: LD_EXP 34
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8818
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_EXP 34
8786: PUSH
8787: LD_VAR 0 2
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_EXP 34
8801: PUSH
8802: LD_VAR 0 2
8806: ARRAY
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: PPUSH
8812: CALL_OW 171
8816: GO 8774
8818: POP
8819: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 255
8829: PUSH
8830: LD_INT 6
8832: EQUAL
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 266
8843: PUSH
8844: LD_INT 31
8846: EQUAL
8847: AND
8848: IFFALSE 8893
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8850: LD_EXP 57
8854: PPUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 56
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 120
// end ;
8893: PPOPN 3
8895: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 266
8905: PUSH
8906: LD_INT 7
8908: EQUAL
8909: PUSH
8910: LD_EXP 15
8914: NOT
8915: AND
8916: IFFALSE 8922
// Dial_LabUpgraded ;
8918: CALL 11643 0 0
// end ;
8922: PPOPN 1
8924: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8925: LD_VAR 0 1
8929: PUSH
8930: LD_INT 3
8932: EQUAL
8933: PUSH
8934: LD_VAR 0 2
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: AND
8943: PUSH
8944: LD_VAR 0 1
8948: PUSH
8949: LD_INT 2
8951: EQUAL
8952: PUSH
8953: LD_VAR 0 2
8957: PUSH
8958: LD_INT 3
8960: EQUAL
8961: AND
8962: OR
8963: IFFALSE 8985
// begin if dial_contactBlock then
8965: LD_EXP 16
8969: IFFALSE 8973
// exit ;
8971: GO 9029
// dial_contactBlock = true ;
8973: LD_ADDR_EXP 16
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// Dial_Contact ;
8981: CALL 13858 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 3
8992: EQUAL
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: LD_INT 6
9001: EQUAL
9002: AND
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: LD_INT 6
9011: EQUAL
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: LD_INT 3
9020: EQUAL
9021: AND
9022: OR
9023: IFFALSE 9029
// Lose_SelfAttack ;
9025: CALL 7561 0 0
// end ;
9029: PPOPN 2
9031: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9032: LD_VAR 0 1
9036: PUSH
9037: LD_EXP 42
9041: EQUAL
9042: IFFALSE 9048
// Lose_Burlak ;
9044: CALL 7531 0 0
// if unit = Gaydar then
9048: LD_VAR 0 1
9052: PUSH
9053: LD_EXP 54
9057: EQUAL
9058: IFFALSE 9064
// Lose_Gaydar ;
9060: CALL 7546 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9064: LD_VAR 0 1
9068: PPUSH
9069: CALL_OW 255
9073: PUSH
9074: LD_INT 3
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 247
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: AND
9092: IFFALSE 9108
// lostUnits = lostUnits + 1 ;
9094: LD_ADDR_EXP 24
9098: PUSH
9099: LD_EXP 24
9103: PUSH
9104: LD_INT 1
9106: PLUS
9107: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 255
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 247
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: AND
9136: PUSH
9137: LD_EXP 54
9141: PPUSH
9142: CALL_OW 305
9146: NOT
9147: AND
9148: IFFALSE 9164
// killedArabianUnits = killedArabianUnits + 1 ;
9150: LD_ADDR_EXP 22
9154: PUSH
9155: LD_EXP 22
9159: PUSH
9160: LD_INT 1
9162: PLUS
9163: ST_TO_ADDR
// if unit in firstAttackGroup then
9164: LD_VAR 0 1
9168: PUSH
9169: LD_EXP 64
9173: IN
9174: IFFALSE 9192
// firstAttackGroup = firstAttackGroup diff unit ;
9176: LD_ADDR_EXP 64
9180: PUSH
9181: LD_EXP 64
9185: PUSH
9186: LD_VAR 0 1
9190: DIFF
9191: ST_TO_ADDR
// end ;
9192: PPOPN 1
9194: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 6
9202: EQUAL
9203: IFFALSE 9217
// SetSide ( building , 6 ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 6
9212: PPUSH
9213: CALL_OW 235
// end ;
9217: PPOPN 3
9219: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_INT 22
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 51
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9404
// if GetTaskList ( i ) > 0 then
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 437
9293: PUSH
9294: LD_INT 0
9296: GREATER
9297: IFFALSE 9402
// for j = 1 to GetTaskList ( i ) do
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 437
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9400
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9322: LD_ADDR_VAR 0 4
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: CALL_OW 437
9336: PUSH
9337: LD_VAR 0 3
9341: ARRAY
9342: PUSH
9343: LD_INT 4
9345: ARRAY
9346: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 255
9356: PUSH
9357: LD_INT 6
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 2
9365: PPUSH
9366: CALL_OW 437
9370: PUSH
9371: LD_VAR 0 3
9375: ARRAY
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PUSH
9381: LD_STRING <
9383: EQUAL
9384: AND
9385: IFFALSE 9398
// SetTaskList ( i , [ ] ) ;
9387: LD_VAR 0 2
9391: PPUSH
9392: EMPTY
9393: PPUSH
9394: CALL_OW 446
// end ;
9398: GO 9319
9400: POP
9401: POP
9402: GO 9281
9404: POP
9405: POP
// end ; end_of_file
9406: PPOPN 8
9408: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9409: LD_INT 0
9411: PPUSH
9412: PPUSH
// if exist_mode then
9413: LD_VAR 0 2
9417: IFFALSE 9442
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_EXP 30
9428: PUSH
9429: LD_VAR 0 1
9433: STR
9434: PPUSH
9435: CALL_OW 34
9439: ST_TO_ADDR
9440: GO 9457
// unit := NewCharacter ( ident ) ;
9442: LD_ADDR_VAR 0 5
9446: PUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 25
9456: ST_TO_ADDR
// if class then
9457: LD_VAR 0 3
9461: IFFALSE 9477
// SetClass ( unit , class ) ;
9463: LD_VAR 0 5
9467: PPUSH
9468: LD_VAR 0 3
9472: PPUSH
9473: CALL_OW 336
// result := unit ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_VAR 0 5
9486: ST_TO_ADDR
// end ;
9487: LD_VAR 0 4
9491: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9492: LD_INT 0
9494: PPUSH
9495: PPUSH
// for unit in units do
9496: LD_ADDR_VAR 0 5
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9530
// PlaceUnitArea ( unit , area , spawnMode ) ;
9509: LD_VAR 0 5
9513: PPUSH
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: CALL_OW 49
9528: GO 9506
9530: POP
9531: POP
// end ;
9532: LD_VAR 0 4
9536: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9537: LD_INT 0
9539: PPUSH
9540: PPUSH
9541: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_VAR 0 1
9551: PUSH
9552: LD_EXP 42
9556: PUSH
9557: LD_EXP 43
9561: PUSH
9562: LD_EXP 46
9566: PUSH
9567: LD_EXP 47
9571: PUSH
9572: LD_EXP 44
9576: PUSH
9577: LD_EXP 45
9581: PUSH
9582: LD_EXP 48
9586: PUSH
9587: LD_EXP 49
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: DIFF
9602: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: ST_TO_ADDR
// if radio then
9627: LD_VAR 0 4
9631: IFFALSE 9680
// begin if GetSex ( speaker ) = sex_male then
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL_OW 258
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9664
// SayRadio ( speaker , dialogMID ) else
9648: LD_VAR 0 7
9652: PPUSH
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL_OW 94
9662: GO 9678
// SayRadio ( speaker , dialogFID ) ;
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: CALL_OW 94
// end else
9678: GO 9725
// begin if GetSex ( speaker ) = sex_male then
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 258
9689: PUSH
9690: LD_INT 1
9692: EQUAL
9693: IFFALSE 9711
// Say ( speaker , dialogMID ) else
9695: LD_VAR 0 7
9699: PPUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 88
9709: GO 9725
// Say ( speaker , dialogFID ) ;
9711: LD_VAR 0 7
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: CALL_OW 88
// end ; result := speaker ;
9725: LD_ADDR_VAR 0 5
9729: PUSH
9730: LD_VAR 0 7
9734: ST_TO_ADDR
// end ;
9735: LD_VAR 0 5
9739: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9740: LD_INT 0
9742: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 255
9752: PUSH
9753: LD_VAR 0 3
9757: EQUAL
9758: PUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 302
9768: AND
9769: IFFALSE 9791
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9771: LD_VAR 0 1
9775: PPUSH
9776: LD_EXP 29
9780: PUSH
9781: LD_VAR 0 2
9785: STR
9786: PPUSH
9787: CALL_OW 38
// end ;
9791: LD_VAR 0 4
9795: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// resultCharactersToSave = [ ] ;
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// for unit in characters do
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_VAR 0 1
9817: PUSH
9818: FOR_IN
9819: IFFALSE 9867
// if GetSide ( unit ) = side and IsOK ( unit ) then
9821: LD_VAR 0 5
9825: PPUSH
9826: CALL_OW 255
9830: PUSH
9831: LD_VAR 0 3
9835: EQUAL
9836: PUSH
9837: LD_VAR 0 5
9841: PPUSH
9842: CALL_OW 302
9846: AND
9847: IFFALSE 9865
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 6
9858: PUSH
9859: LD_VAR 0 5
9863: ADD
9864: ST_TO_ADDR
9865: GO 9818
9867: POP
9868: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9869: LD_VAR 0 6
9873: PPUSH
9874: LD_EXP 29
9878: PUSH
9879: LD_VAR 0 2
9883: STR
9884: PPUSH
9885: CALL_OW 38
// end ;
9889: LD_VAR 0 4
9893: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9901: LD_ADDR_VAR 0 3
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 3
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 50
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_VAR 0 3
9951: PUSH
9952: LD_EXP 42
9956: DIFF
9957: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_VAR 0 3
9967: PUSH
9968: LD_EXP 52
9972: DIFF
9973: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_STRING text
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: LD_INT 8
9987: PPUSH
9988: LD_INT -5
9990: PUSH
9991: LD_EXP 42
9995: PUSH
9996: LD_INT -6
9998: PUSH
9999: LD_INT -2
10001: PUSH
10002: LD_INT -3
10004: PUSH
10005: LD_INT -5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_VAR 0 3
10020: ADD
10021: PUSH
10022: LD_INT -6
10024: PUSH
10025: LD_INT -4
10027: PUSH
10028: LD_EXP 52
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: PPUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 42
10068: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 6
10076: PPUSH
10077: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10081: LD_EXP 52
10085: PPUSH
10086: LD_INT 6
10088: PPUSH
10089: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10093: LD_VAR 0 4
10097: PPUSH
10098: LD_INT 3
10100: PPUSH
10101: CALL_OW 235
// burlakTeam = selectedPeople ;
10105: LD_ADDR_EXP 55
10109: PUSH
10110: LD_VAR 0 4
10114: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10115: LD_ADDR_EXP 56
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 6
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10149: LD_ADDR_EXP 56
10153: PUSH
10154: LD_EXP 56
10158: PUSH
10159: LD_EXP 49
10163: DIFF
10164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_INT 6
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: PUSH
10199: FOR_IN
10200: IFFALSE 10224
// if IsInUnit ( i ) then
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 310
10211: IFFALSE 10222
// ComExitVehicle ( i ) ;
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 121
10222: GO 10199
10224: POP
10225: POP
// if not Gnyevko in selectedPeople then
10226: LD_EXP 43
10230: PUSH
10231: LD_VAR 0 4
10235: IN
10236: NOT
10237: IFFALSE 10254
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10239: LD_EXP 43
10243: PPUSH
10244: LD_STRING Gnyevko
10246: PPUSH
10247: LD_INT 6
10249: PPUSH
10250: CALL 9740 0 3
// if not Kovalyuk in selectedPeople then
10254: LD_EXP 45
10258: PUSH
10259: LD_VAR 0 4
10263: IN
10264: NOT
10265: IFFALSE 10282
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10267: LD_EXP 45
10271: PPUSH
10272: LD_STRING Kovalyuk
10274: PPUSH
10275: LD_INT 6
10277: PPUSH
10278: CALL 9740 0 3
// if not Kirilenkova in selectedPeople then
10282: LD_EXP 44
10286: PUSH
10287: LD_VAR 0 4
10291: IN
10292: NOT
10293: IFFALSE 10310
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10295: LD_EXP 44
10299: PPUSH
10300: LD_STRING Kirilenkova
10302: PPUSH
10303: LD_INT 6
10305: PPUSH
10306: CALL 9740 0 3
// if not Scholtze in selectedPeople then
10310: LD_EXP 48
10314: PUSH
10315: LD_VAR 0 4
10319: IN
10320: NOT
10321: IFFALSE 10338
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10323: LD_EXP 48
10327: PPUSH
10328: LD_STRING Scholtze
10330: PPUSH
10331: LD_INT 6
10333: PPUSH
10334: CALL 9740 0 3
// if not Belkov in selectedPeople then
10338: LD_EXP 46
10342: PUSH
10343: LD_VAR 0 4
10347: IN
10348: NOT
10349: IFFALSE 10366
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10351: LD_EXP 46
10355: PPUSH
10356: LD_STRING Belkov
10358: PPUSH
10359: LD_INT 6
10361: PPUSH
10362: CALL 9740 0 3
// if not Belkov2 in selectedPeople then
10366: LD_EXP 47
10370: PUSH
10371: LD_VAR 0 4
10375: IN
10376: NOT
10377: IFFALSE 10394
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_STRING Belkov2
10386: PPUSH
10387: LD_INT 6
10389: PPUSH
10390: CALL 9740 0 3
// others = popovTeam diff Popov ;
10394: LD_ADDR_VAR 0 5
10398: PUSH
10399: LD_EXP 56
10403: PUSH
10404: LD_EXP 52
10408: DIFF
10409: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_STRING other_survivors_with_popov
10417: PPUSH
10418: LD_INT 6
10420: PPUSH
10421: CALL 9796 0 3
// end ; end_of_file
10425: LD_VAR 0 1
10429: RET
// export function MissionIntro ; var i , unit ; begin
10430: LD_INT 0
10432: PPUSH
10433: PPUSH
10434: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10435: LD_EXP 42
10439: PPUSH
10440: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10444: LD_EXP 59
10448: PPUSH
10449: LD_STRING D1-RSol1-1
10451: PPUSH
10452: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-1
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-1
10475: PPUSH
10476: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10480: LD_EXP 53
10484: PPUSH
10485: LD_STRING D1-Pla-2
10487: PPUSH
10488: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10492: LD_EXP 42
10496: PPUSH
10497: LD_STRING D1-Bur-2
10499: PPUSH
10500: CALL_OW 88
// SelectCharacters ;
10504: CALL 9894 0 0
// InGameOff ;
10508: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10512: LD_STRING M1
10514: PPUSH
10515: CALL_OW 337
// SaveForQuickRestart ;
10519: CALL_OW 22
// for unit in popovTeam do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: LD_EXP 56
10532: PUSH
10533: FOR_IN
10534: IFFALSE 10606
// begin for i := 3 to russianCargoPath1 do
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: DOUBLE
10542: LD_INT 3
10544: DEC
10545: ST_TO_ADDR
10546: LD_EXP 34
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10595
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_EXP 34
10563: PUSH
10564: LD_VAR 0 2
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: LD_EXP 34
10578: PUSH
10579: LD_VAR 0 2
10583: ARRAY
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PPUSH
10589: CALL_OW 171
10593: GO 10551
10595: POP
10596: POP
// wait ( 0 0$01 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// end ;
10604: GO 10533
10606: POP
10607: POP
// end ;
10608: LD_VAR 0 1
10612: RET
// every 0 0$1 do var unit , driver ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin enable ;
10620: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10621: LD_INT 4
10623: PPUSH
10624: LD_INT 22
10626: PUSH
10627: LD_INT 6
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: NOT
10639: PUSH
10640: LD_INT 4
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 2
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: NOT
10690: AND
10691: IFFALSE 10695
// exit ;
10693: GO 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 4
10702: PPUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 6
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10774
// begin RemoveUnit ( unit ) ;
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10730: LD_VAR 0 1
10734: PUSH
10735: LD_EXP 56
10739: IN
10740: NOT
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 264
10751: PUSH
10752: LD_INT 51
10754: EQUAL
10755: AND
10756: IFFALSE 10772
// evacuatedCargos = evacuatedCargos + 1 ;
10758: LD_ADDR_EXP 10
10762: PUSH
10763: LD_EXP 10
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ST_TO_ADDR
// end ;
10772: GO 10718
10774: POP
10775: POP
// if canExitMap then
10776: LD_EXP 6
10780: IFFALSE 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 4
10789: PPUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 70
10836: PUSH
10837: FOR_IN
10838: IFFALSE 11044
// begin if GetType ( unit ) = unit_vehicle then
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 247
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: IFFALSE 10953
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 313
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 42
10873: PUSH
10874: LD_EXP 43
10878: PUSH
10879: LD_EXP 44
10883: PUSH
10884: LD_EXP 45
10888: PUSH
10889: LD_EXP 46
10893: PUSH
10894: LD_EXP 47
10898: PUSH
10899: LD_EXP 48
10903: PUSH
10904: LD_EXP 49
10908: PUSH
10909: LD_EXP 54
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: IN
10925: NOT
10926: IFFALSE 10953
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10928: LD_ADDR_EXP 62
10932: PUSH
10933: LD_EXP 62
10937: PUSH
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 313
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: ADD
10952: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 42
10962: PUSH
10963: LD_EXP 43
10967: PUSH
10968: LD_EXP 44
10972: PUSH
10973: LD_EXP 45
10977: PUSH
10978: LD_EXP 46
10982: PUSH
10983: LD_EXP 47
10987: PUSH
10988: LD_EXP 48
10992: PUSH
10993: LD_EXP 49
10997: PUSH
10998: LD_EXP 54
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: IN
11014: NOT
11015: IFFALSE 11033
// randomsToSave = randomsToSave ^ unit ;
11017: LD_ADDR_EXP 62
11021: PUSH
11022: LD_EXP 62
11026: PUSH
11027: LD_VAR 0 1
11031: ADD
11032: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 64
// end ;
11042: GO 10837
11044: POP
11045: POP
// end ;
11046: PPOPN 2
11048: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: PPUSH
11082: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 87
// InGameOn ;
11095: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11099: LD_EXP 53
11103: PPUSH
11104: LD_STRING D2a-Pla-1
11106: PPUSH
11107: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_INT 3
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 21
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: PUSH
11156: FOR_IN
11157: IFFALSE 11195
// if GetDistUnits ( building , unit ) < 10 then
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: CALL_OW 296
11173: PUSH
11174: LD_INT 10
11176: LESS
11177: IFFALSE 11193
// ComDismantle ( unit , building ) ;
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 167
11193: GO 11156
11195: POP
11196: POP
// repeat wait ( 0 0$1 ) ;
11197: LD_INT 35
11199: PPUSH
11200: CALL_OW 67
// until not IsPlaced ( building ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 305
11213: NOT
11214: IFFALSE 11197
// InGameOff ;
11216: CALL_OW 9
// end ;
11220: LD_VAR 0 2
11224: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11225: LD_EXP 49
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 6
11237: EQUAL
11238: IFFALSE 11320
11240: GO 11242
11242: DISABLE
11243: LD_INT 0
11245: PPUSH
// begin enable ;
11246: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11318
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_EXP 49
11293: PPUSH
11294: CALL_OW 296
11298: PUSH
11299: LD_INT 9
11301: LESS
11302: IFFALSE 11316
// SetSide ( Kuzmov , 3 ) ;
11304: LD_EXP 49
11308: PPUSH
11309: LD_INT 3
11311: PPUSH
11312: CALL_OW 235
11316: GO 11281
11318: POP
11319: POP
// end ;
11320: PPOPN 1
11322: END
// export function Dial_FinishDepot ; var i ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// startEvacuation = true ;
11327: LD_ADDR_EXP 8
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11335: LD_STRING MOutBuild
11337: PPUSH
11338: CALL_OW 337
// uc_side = 6 ;
11342: LD_ADDR_OWVAR 20
11346: PUSH
11347: LD_INT 6
11349: ST_TO_ADDR
// uc_nation = 3 ;
11350: LD_ADDR_OWVAR 21
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11358: LD_ADDR_OWVAR 37
11362: PUSH
11363: LD_INT 21
11365: ST_TO_ADDR
// vc_control = control_manual ;
11366: LD_ADDR_OWVAR 38
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// vc_engine = engine_combustion ;
11374: LD_ADDR_OWVAR 39
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11382: LD_ADDR_OWVAR 40
11386: PUSH
11387: LD_INT 51
11389: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11390: LD_ADDR_EXP 60
11394: PUSH
11395: CALL_OW 45
11399: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11400: LD_EXP 60
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11412: LD_EXP 60
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11427: LD_INT 1
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11437: CALL_OW 44
11441: PPUSH
11442: LD_EXP 60
11446: PPUSH
11447: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11451: LD_EXP 60
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 100
11461: PPUSH
11462: CALL_OW 291
// for i := 1 to 19 do
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 19
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11523
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11482: LD_EXP 60
11486: PPUSH
11487: LD_EXP 34
11491: PUSH
11492: LD_VAR 0 2
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_EXP 34
11506: PUSH
11507: LD_VAR 0 2
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: CALL_OW 171
11521: GO 11479
11523: POP
11524: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11525: LD_EXP 60
11529: PPUSH
11530: LD_INT 105
11532: PPUSH
11533: LD_INT 123
11535: PPUSH
11536: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11540: LD_EXP 60
11544: PPUSH
11545: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 21
11557: DEC
11558: ST_TO_ADDR
11559: LD_EXP 34
11563: PUSH
11564: FOR_TO
11565: IFFALSE 11608
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11567: LD_EXP 60
11571: PPUSH
11572: LD_EXP 34
11576: PUSH
11577: LD_VAR 0 2
11581: ARRAY
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_EXP 34
11591: PUSH
11592: LD_VAR 0 2
11596: ARRAY
11597: PUSH
11598: LD_INT 2
11600: ARRAY
11601: PPUSH
11602: CALL_OW 171
11606: GO 11564
11608: POP
11609: POP
// Say ( Burlak , D2-Bur-1 ) ;
11610: LD_EXP 42
11614: PPUSH
11615: LD_STRING D2-Bur-1
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11622: LD_EXP 53
11626: PPUSH
11627: LD_STRING D2-Pla-1
11629: PPUSH
11630: CALL_OW 94
// PrepareSecondBaseTeam ;
11634: CALL 3314 0 0
// end ;
11638: LD_VAR 0 1
11642: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
// dial_labUpgradedBlock = true ;
11647: LD_ADDR_EXP 15
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 3
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 26
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: PUSH
11711: LD_EXP 42
11715: PUSH
11716: LD_EXP 43
11720: PUSH
11721: LD_EXP 44
11725: PUSH
11726: LD_EXP 45
11730: PUSH
11731: LD_EXP 46
11735: PUSH
11736: LD_EXP 47
11740: PUSH
11741: LD_EXP 48
11745: PUSH
11746: LD_EXP 49
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11762: LD_EXP 48
11766: PPUSH
11767: CALL_OW 302
11771: PUSH
11772: LD_EXP 48
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_INT 3
11784: EQUAL
11785: AND
11786: IFFALSE 11814
// begin Say ( Scholtze , D5-Sch-1 ) ;
11788: LD_EXP 48
11792: PPUSH
11793: LD_STRING D5-Sch-1
11795: PPUSH
11796: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11800: LD_EXP 42
11804: PPUSH
11805: LD_STRING D5-Bur-1
11807: PPUSH
11808: CALL_OW 88
// end else
11812: GO 11949
// if randomMaleSci then
11814: LD_VAR 0 2
11818: IFFALSE 11850
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11820: LD_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_STRING D5-RSci1-1
11831: PPUSH
11832: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11836: LD_EXP 42
11840: PPUSH
11841: LD_STRING D5-Bur-1
11843: PPUSH
11844: CALL_OW 88
// end else
11848: GO 11949
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11850: LD_ADDR_VAR 0 2
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 4
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: PUSH
11906: LD_EXP 42
11910: PUSH
11911: EMPTY
11912: LIST
11913: DIFF
11914: ST_TO_ADDR
// if randomMaleSci then
11915: LD_VAR 0 2
11919: IFFALSE 11949
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_STRING D5-RSci1-1
11932: PPUSH
11933: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11937: LD_EXP 42
11941: PPUSH
11942: LD_STRING D5-Bur-1
11944: PPUSH
11945: CALL_OW 88
// end ; end ; end ;
11949: LD_VAR 0 1
11953: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11954: LD_EXP 60
11958: PPUSH
11959: LD_INT 105
11961: PPUSH
11962: LD_INT 123
11964: PPUSH
11965: CALL_OW 297
11969: PUSH
11970: LD_INT 12
11972: LESS
11973: IFFALSE 11999
11975: GO 11977
11977: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11978: LD_EXP 60
11982: PPUSH
11983: CALL_OW 313
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_STRING D2a-RSol1-1
11994: PPUSH
11995: CALL_OW 88
11999: END
// every 0 0$15 trigger startEvacuation do
12000: LD_EXP 8
12004: IFFALSE 12014
12006: GO 12008
12008: DISABLE
// begin enable ;
12009: ENABLE
// CreateEvacuateUnit ;
12010: CALL 2544 0 0
// end ;
12014: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
12015: LD_EXP 10
12019: PUSH
12020: LD_INT 3
12022: GREATEREQUAL
12023: IFFALSE 12122
12025: GO 12027
12027: DISABLE
// begin if IsOk ( Kuzmov ) then
12028: LD_EXP 49
12032: PPUSH
12033: CALL_OW 302
12037: IFFALSE 12107
// begin DialogueOn ;
12039: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-1
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-1
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-2
12074: PPUSH
12075: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12079: LD_EXP 42
12083: PPUSH
12084: LD_STRING D2b-Bur-2
12086: PPUSH
12087: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12091: LD_EXP 49
12095: PPUSH
12096: LD_STRING D2b-Kuz-3
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// end ; Query ( Q1 ) ;
12107: LD_STRING Q1
12109: PPUSH
12110: CALL_OW 97
// canStealCargo = true ;
12114: LD_ADDR_EXP 11
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ;
12122: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12123: LD_EXP 11
12127: IFFALSE 12425
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
// begin enable ;
12136: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 6
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 34
12164: PUSH
12165: LD_INT 51
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PUSH
12182: FOR_IN
12183: IFFALSE 12423
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 3
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 50
12212: PUSH
12213: EMPTY
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12419
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 296
12243: PUSH
12244: LD_INT 8
12246: LESS
12247: PUSH
12248: LD_VAR 0 2
12252: PUSH
12253: LD_EXP 13
12257: IN
12258: NOT
12259: AND
12260: PUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 289
12273: PUSH
12274: LD_INT 0
12276: GREATER
12277: AND
12278: IFFALSE 12417
// begin stealCargos = stealCargos ^ cargo ;
12280: LD_ADDR_EXP 13
12284: PUSH
12285: LD_EXP 13
12289: PUSH
12290: LD_VAR 0 2
12294: ADD
12295: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12296: LD_STRING QQrSteal
12298: PPUSH
12299: CALL_OW 97
12303: PUSH
12304: LD_INT 1
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12385
12312: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12313: LD_ADDR_EXP 12
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_INT 1
12325: PLUS
12326: ST_TO_ADDR
// DialogueOn ;
12327: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12331: LD_EXP 42
12335: PPUSH
12336: LD_STRING DQrSteal#1-Bur-1
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 14
12354: PPUSH
12355: CALL_OW 113
// AddComUnload ( cargo ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 92
12375: PPUSH
12376: LD_INT 177
12378: PPUSH
12379: CALL_OW 171
// end ; 2 :
12383: GO 12417
12385: LD_INT 2
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12416
12393: POP
// begin DialogueOn ;
12394: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12398: LD_EXP 42
12402: PPUSH
12403: LD_STRING DQrSteal#2-Bur-1
12405: PPUSH
12406: CALL_OW 88
// DialogueOff ;
12410: CALL_OW 7
// end ; end ;
12414: GO 12417
12416: POP
// end ;
12417: GO 12226
12419: POP
12420: POP
12421: GO 12182
12423: POP
12424: POP
// end ;
12425: PPOPN 2
12427: END
// every 0 0$12 trigger stealWarmCount = 3 do
12428: LD_EXP 12
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: IFFALSE 12508
12438: GO 12440
12440: DISABLE
// begin DialogueOn ;
12441: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-1
12452: PPUSH
12453: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12457: LD_EXP 42
12461: PPUSH
12462: LD_STRING D3A-Bur-1
12464: PPUSH
12465: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12469: LD_EXP 53
12473: PPUSH
12474: LD_STRING D3A-Pla-2
12476: PPUSH
12477: CALL_OW 94
// if IsOK ( Kuzmov ) then
12481: LD_EXP 49
12485: PPUSH
12486: CALL_OW 302
12490: IFFALSE 12504
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12492: LD_EXP 49
12496: PPUSH
12497: LD_STRING D3A-Kuz-2
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$10 trigger stealWarmCount = 6 do
12509: LD_EXP 12
12513: PUSH
12514: LD_INT 6
12516: EQUAL
12517: IFFALSE 12566
12519: GO 12521
12521: DISABLE
// begin DialogueOn ;
12522: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-1
12533: PPUSH
12534: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12538: LD_EXP 42
12542: PPUSH
12543: LD_STRING D3B-Bur-1
12545: PPUSH
12546: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12550: LD_EXP 53
12554: PPUSH
12555: LD_STRING D3B-Pla-2
12557: PPUSH
12558: CALL_OW 94
// DialogueOff ;
12562: CALL_OW 7
// end ;
12566: END
// every 0 0$10 trigger stealWarmCount = 7 do
12567: LD_EXP 12
12571: PUSH
12572: LD_INT 7
12574: EQUAL
12575: IFFALSE 12659
12577: GO 12579
12579: DISABLE
// begin DialogueOn ;
12580: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-1
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-1
12603: PPUSH
12604: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12608: LD_EXP 53
12612: PPUSH
12613: LD_STRING D3C-Pla-2
12615: PPUSH
12616: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12620: LD_EXP 42
12624: PPUSH
12625: LD_STRING D3C-Bur-2
12627: PPUSH
12628: CALL_OW 88
// if IsOK ( Kuzmov ) then
12632: LD_EXP 49
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12655
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12643: LD_EXP 49
12647: PPUSH
12648: LD_STRING D3C-Kuz-2
12650: PPUSH
12651: CALL_OW 88
// DialogueOff ;
12655: CALL_OW 7
// end ;
12659: END
// every 0 0$10 trigger stealWarmCount = 8 do
12660: LD_EXP 12
12664: PUSH
12665: LD_INT 8
12667: EQUAL
12668: IFFALSE 12860
12670: GO 12672
12672: DISABLE
// begin canStealCargo = false ;
12673: LD_ADDR_EXP 11
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// DialogueOn ;
12681: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12685: LD_EXP 53
12689: PPUSH
12690: LD_STRING D3D-Pla-1
12692: PPUSH
12693: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12697: LD_EXP 42
12701: PPUSH
12702: LD_STRING D3D-Bur-1
12704: PPUSH
12705: CALL_OW 88
// if kurinOpinion = 0 then
12709: LD_EXP 2
12713: PUSH
12714: LD_INT 0
12716: EQUAL
12717: IFFALSE 12737
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12719: LD_EXP 53
12723: PPUSH
12724: LD_STRING D3E-Pla-1
12726: PPUSH
12727: CALL_OW 94
// Lose_Arrest ;
12731: CALL 7576 0 0
// exit ;
12735: GO 12860
// end ; if meetBelkovBrother = 1 then
12737: LD_EXP 3
12741: PUSH
12742: LD_INT 1
12744: EQUAL
12745: IFFALSE 12765
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12747: LD_EXP 53
12751: PPUSH
12752: LD_STRING D3E-Pla-1a
12754: PPUSH
12755: CALL_OW 94
// Lose_Arrest ;
12759: CALL 7576 0 0
// exit ;
12763: GO 12860
// end ; if platonovOpinion = 0 then
12765: LD_EXP 1
12769: PUSH
12770: LD_INT 0
12772: EQUAL
12773: IFFALSE 12793
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12775: LD_EXP 53
12779: PPUSH
12780: LD_STRING D3E-Pla-1b
12782: PPUSH
12783: CALL_OW 94
// Lose_Arrest ;
12787: CALL 7576 0 0
// exit ;
12791: GO 12860
// end ; if platonovOpinion = 1 then
12793: LD_EXP 1
12797: PUSH
12798: LD_INT 1
12800: EQUAL
12801: IFFALSE 12821
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12803: LD_EXP 53
12807: PPUSH
12808: LD_STRING D3E-Pla-1c
12810: PPUSH
12811: CALL_OW 94
// Lose_Arrest ;
12815: CALL 7576 0 0
// exit ;
12819: GO 12860
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12821: LD_EXP 53
12825: PPUSH
12826: LD_STRING D3D-Pla-2
12828: PPUSH
12829: CALL_OW 94
// if IsOK ( Kuzmov ) then
12833: LD_EXP 49
12837: PPUSH
12838: CALL_OW 302
12842: IFFALSE 12856
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12844: LD_EXP 49
12848: PPUSH
12849: LD_STRING D3D-Kuz-2
12851: PPUSH
12852: CALL_OW 88
// DialogueOff ;
12856: CALL_OW 7
// end ;
12860: END
// every 0 0$20 do var allyUntis ;
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// wait ( 0 0$10 ) ;
12868: LD_INT 350
12870: PPUSH
12871: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 60
12895: PUSH
12896: EMPTY
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 56
12916: DIFF
12917: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 1
12927: PUSH
12928: LD_EXP 54
12932: DIFF
12933: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_VAR 0 1
12943: PUSH
12944: LD_EXP 49
12948: DIFF
12949: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12950: LD_ADDR_VAR 0 1
12954: PUSH
12955: LD_VAR 0 1
12959: PUSH
12960: LD_EXP 57
12964: DIFF
12965: ST_TO_ADDR
// if not allyUntis then
12966: LD_VAR 0 1
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 12999
// ComUnload ( allyUntis ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12984: LD_VAR 0 1
12988: PPUSH
12989: LD_INT 92
12991: PPUSH
12992: LD_INT 176
12994: PPUSH
12995: CALL_OW 171
// end ;
12999: PPOPN 1
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: IFFALSE 13025
13014: GO 13016
13016: DISABLE
// begin startEvacuation = false ;
13017: LD_ADDR_EXP 8
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// end ;
13025: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13026: LD_EXP 10
13030: PUSH
13031: LD_EXP 14
13035: GREATEREQUAL
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 6
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 69
13083: PUSH
13084: LD_EXP 57
13088: DIFF
13089: NOT
13090: AND
13091: IFFALSE 13686
13093: GO 13095
13095: DISABLE
// begin wait ( 1 1$00 ) ;
13096: LD_INT 2100
13098: PPUSH
13099: CALL_OW 67
// DialogueOn ;
13103: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13107: LD_EXP 53
13111: PPUSH
13112: LD_STRING D4-Pla-1
13114: PPUSH
13115: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13119: LD_EXP 42
13123: PPUSH
13124: LD_STRING D4-Bur-1
13126: PPUSH
13127: CALL_OW 88
// DialogueOff ;
13131: CALL_OW 7
// wait ( 0 0$2 ) ;
13135: LD_INT 70
13137: PPUSH
13138: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13142: LD_EXP 49
13146: PPUSH
13147: CALL_OW 302
13151: PUSH
13152: LD_EXP 49
13156: PPUSH
13157: CALL_OW 255
13161: PUSH
13162: LD_INT 3
13164: EQUAL
13165: AND
13166: IFFALSE 13448
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13168: LD_EXP 49
13172: PPUSH
13173: LD_STRING D4-Kuz-1
13175: PPUSH
13176: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13180: LD_EXP 46
13184: PPUSH
13185: CALL_OW 302
13189: PUSH
13190: LD_EXP 46
13194: PPUSH
13195: CALL_OW 255
13199: PUSH
13200: LD_INT 3
13202: EQUAL
13203: AND
13204: IFFALSE 13220
// Say ( Belkov , D4-Bel-1 ) else
13206: LD_EXP 46
13210: PPUSH
13211: LD_STRING D4-Bel-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13258
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13220: LD_EXP 47
13224: PPUSH
13225: CALL_OW 302
13229: PUSH
13230: LD_EXP 47
13234: PPUSH
13235: CALL_OW 255
13239: PUSH
13240: LD_INT 3
13242: EQUAL
13243: AND
13244: IFFALSE 13258
// Say ( Belkov2 , D4-Bel-1 ) ;
13246: LD_EXP 47
13250: PPUSH
13251: LD_STRING D4-Bel-1
13253: PPUSH
13254: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13258: LD_EXP 42
13262: PPUSH
13263: LD_STRING D4-Bur-2
13265: PPUSH
13266: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13270: LD_EXP 43
13274: PPUSH
13275: CALL_OW 302
13279: PUSH
13280: LD_EXP 43
13284: PPUSH
13285: CALL_OW 255
13289: PUSH
13290: LD_INT 3
13292: EQUAL
13293: AND
13294: IFFALSE 13320
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13296: LD_EXP 43
13300: PPUSH
13301: LD_STRING D4-Gny-2
13303: PPUSH
13304: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13308: LD_EXP 42
13312: PPUSH
13313: LD_STRING D4-Bur-3
13315: PPUSH
13316: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13320: LD_EXP 42
13324: PPUSH
13325: LD_STRING D4-Bur-3a
13327: PPUSH
13328: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13332: LD_EXP 46
13336: PPUSH
13337: CALL_OW 302
13341: PUSH
13342: LD_EXP 46
13346: PPUSH
13347: CALL_OW 255
13351: PUSH
13352: LD_INT 3
13354: EQUAL
13355: AND
13356: IFFALSE 13372
// Say ( Belkov , D4-Bel-3 ) else
13358: LD_EXP 46
13362: PPUSH
13363: LD_STRING D4-Bel-3
13365: PPUSH
13366: CALL_OW 88
13370: GO 13410
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13372: LD_EXP 47
13376: PPUSH
13377: CALL_OW 302
13381: PUSH
13382: LD_EXP 47
13386: PPUSH
13387: CALL_OW 255
13391: PUSH
13392: LD_INT 3
13394: EQUAL
13395: AND
13396: IFFALSE 13410
// Say ( Belkov2 , D4-Bel-3 ) ;
13398: LD_EXP 47
13402: PPUSH
13403: LD_STRING D4-Bel-3
13405: PPUSH
13406: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13410: LD_EXP 45
13414: PPUSH
13415: CALL_OW 302
13419: PUSH
13420: LD_EXP 45
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: AND
13434: IFFALSE 13448
// Say ( Kovalyuk , D4-Kov-3 ) ;
13436: LD_EXP 45
13440: PPUSH
13441: LD_STRING D4-Kov-3
13443: PPUSH
13444: CALL_OW 88
// end ; PrepareFirstAttack ;
13448: CALL 4199 0 0
// firstAttack = true ;
13452: LD_ADDR_EXP 18
13456: PUSH
13457: LD_INT 1
13459: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13460: LD_INT 350
13462: PPUSH
13463: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13467: LD_EXP 42
13471: PPUSH
13472: LD_STRING D7-Bur-1
13474: PPUSH
13475: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13479: LD_EXP 64
13483: PPUSH
13484: LD_INT 135
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 134
13496: PUSH
13497: LD_INT 19
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 132
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 128
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 123
13526: PUSH
13527: LD_INT 37
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 118
13536: PUSH
13537: LD_INT 45
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 51
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 106
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 99
13566: PUSH
13567: LD_INT 62
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 93
13576: PUSH
13577: LD_INT 67
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 86
13586: PUSH
13587: LD_INT 72
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 78
13596: PUSH
13597: LD_INT 75
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 71
13606: PUSH
13607: LD_INT 81
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 69
13616: PUSH
13617: LD_INT 88
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 71
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 74
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 80
13646: PUSH
13647: LD_INT 113
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 11
13681: PPUSH
13682: CALL 5042 0 5
// end ;
13686: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13687: LD_EXP 64
13691: PPUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: NOT
13707: PUSH
13708: LD_EXP 18
13712: AND
13713: IFFALSE 13772
13715: GO 13717
13717: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13718: LD_EXP 57
13722: PPUSH
13723: CALL_OW 122
// wait ( 0 0$1 ) ;
13727: LD_INT 35
13729: PPUSH
13730: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13734: LD_EXP 57
13738: PPUSH
13739: LD_INT 114
13741: PPUSH
13742: LD_INT 114
13744: PPUSH
13745: CALL_OW 111
// wait ( 0 0$15 ) ;
13749: LD_INT 525
13751: PPUSH
13752: CALL_OW 67
// firstAttack = false ;
13756: LD_ADDR_EXP 18
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// enableAttacks = true ;
13764: LD_ADDR_EXP 17
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// end ;
13772: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13773: LD_OWVAR 67
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: PUSH
13782: LD_EXP 57
13786: AND
13787: IFFALSE 13855
13789: GO 13791
13791: DISABLE
13792: LD_INT 0
13794: PPUSH
// begin enable ;
13795: ENABLE
// for un in secondBaseTeam do
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_EXP 57
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13853
// if IsInArea ( un , HillArea ) then
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 5
13816: PPUSH
13817: CALL_OW 308
13821: IFFALSE 13851
// begin SetSide ( un , 3 ) ;
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13835: LD_ADDR_EXP 57
13839: PUSH
13840: LD_EXP 57
13844: PUSH
13845: LD_VAR 0 1
13849: DIFF
13850: ST_TO_ADDR
// end ;
13851: GO 13806
13853: POP
13854: POP
// end ;
13855: PPOPN 1
13857: END
// export function Dial_Contact ; begin
13858: LD_INT 0
13860: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13861: LD_EXP 42
13865: PPUSH
13866: LD_STRING D7-Bur-1a
13868: PPUSH
13869: CALL_OW 88
// wait ( 0 0$12 ) ;
13873: LD_INT 420
13875: PPUSH
13876: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13880: LD_EXP 42
13884: PPUSH
13885: LD_STRING D7-Bur-1b
13887: PPUSH
13888: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13892: LD_EXP 46
13896: PPUSH
13897: CALL_OW 302
13901: PUSH
13902: LD_EXP 46
13906: PPUSH
13907: CALL_OW 255
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: AND
13916: IFFALSE 13932
// Say ( Belkov , D7-Bel-1 ) else
13918: LD_EXP 46
13922: PPUSH
13923: LD_STRING D7-Bel-1
13925: PPUSH
13926: CALL_OW 88
13930: GO 13970
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13932: LD_EXP 47
13936: PPUSH
13937: CALL_OW 302
13941: PUSH
13942: LD_EXP 47
13946: PPUSH
13947: CALL_OW 255
13951: PUSH
13952: LD_INT 3
13954: EQUAL
13955: AND
13956: IFFALSE 13970
// Say ( Belkov2 , D7-Bel-1 ) ;
13958: LD_EXP 47
13962: PPUSH
13963: LD_STRING D7-Bel-1
13965: PPUSH
13966: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13970: LD_EXP 49
13974: PPUSH
13975: CALL_OW 302
13979: PUSH
13980: LD_EXP 49
13984: PPUSH
13985: CALL_OW 255
13989: PUSH
13990: LD_INT 3
13992: EQUAL
13993: AND
13994: IFFALSE 14008
// Say ( Kuzmov , D7-Kuz-1 ) ;
13996: LD_EXP 49
14000: PPUSH
14001: LD_STRING D7-Kuz-1
14003: PPUSH
14004: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
14008: LD_EXP 45
14012: PPUSH
14013: CALL_OW 302
14017: PUSH
14018: LD_EXP 45
14022: PPUSH
14023: CALL_OW 255
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: AND
14032: IFFALSE 14046
// Say ( Kovalyuk , D7-Kov-1 ) ;
14034: LD_EXP 45
14038: PPUSH
14039: LD_STRING D7-Kov-1
14041: PPUSH
14042: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14046: LD_EXP 48
14050: PPUSH
14051: CALL_OW 302
14055: PUSH
14056: LD_EXP 48
14060: PPUSH
14061: CALL_OW 255
14065: PUSH
14066: LD_INT 3
14068: EQUAL
14069: AND
14070: IFFALSE 14084
// Say ( Scholtze , D7-Sch-1 ) ;
14072: LD_EXP 48
14076: PPUSH
14077: LD_STRING D7-Sch-1
14079: PPUSH
14080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 21
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: PPUSH
14124: LD_STRING D7-RSol1-1
14126: PPUSH
14127: LD_STRING 
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: CALL 9537 0 4
// PrepareHeike ;
14137: CALL 3519 0 0
// wait ( 0 0$10 ) ;
14141: LD_INT 350
14143: PPUSH
14144: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14148: LD_EXP 63
14152: PPUSH
14153: LD_STRING D7a-Hke-1
14155: PPUSH
14156: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14160: LD_EXP 42
14164: PPUSH
14165: LD_STRING D7a-Bur-1
14167: PPUSH
14168: CALL_OW 88
// wait ( 0 0$50 ) ;
14172: LD_INT 1750
14174: PPUSH
14175: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14179: LD_EXP 49
14183: PPUSH
14184: CALL_OW 302
14188: PUSH
14189: LD_EXP 49
14193: PPUSH
14194: CALL_OW 255
14198: PUSH
14199: LD_INT 3
14201: EQUAL
14202: AND
14203: IFFALSE 14219
// Say ( Kuzmov , D8-Kuz-1 ) else
14205: LD_EXP 49
14209: PPUSH
14210: LD_STRING D8-Kuz-1
14212: PPUSH
14213: CALL_OW 88
14217: GO 14272
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14219: LD_INT 22
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 26
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: PPUSH
14259: LD_STRING D8-RSol1-1
14261: PPUSH
14262: LD_STRING 
14264: PPUSH
14265: LD_INT 0
14267: PPUSH
14268: CALL 9537 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14272: LD_EXP 42
14276: PPUSH
14277: LD_STRING D8-Bur-1
14279: PPUSH
14280: CALL_OW 88
// end ;
14284: LD_VAR 0 1
14288: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14289: LD_EXP 54
14293: PPUSH
14294: CALL_OW 305
14298: NOT
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 50
14322: PUSH
14323: EMPTY
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: AND
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 3
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 50
14360: PUSH
14361: EMPTY
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: PUSH
14374: LD_INT 5
14376: LESS
14377: AND
14378: PUSH
14379: LD_INT 5
14381: PPUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: PUSH
14400: LD_INT 3
14402: GREATER
14403: AND
14404: IFFALSE 14413
14406: GO 14408
14408: DISABLE
// Lose_ArabBreakthrough ;
14409: CALL 7591 0 0
14413: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14414: LD_EXP 19
14418: PUSH
14419: LD_EXP 38
14423: GREATEREQUAL
14424: IFFALSE 14648
14426: GO 14428
14428: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-1
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-1
14448: PPUSH
14449: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14453: LD_EXP 53
14457: PPUSH
14458: LD_STRING D9-Pla-2
14460: PPUSH
14461: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14465: LD_EXP 42
14469: PPUSH
14470: LD_STRING D9-Bur-2
14472: PPUSH
14473: CALL_OW 88
// wait ( 2 2$0 ) ;
14477: LD_INT 4200
14479: PPUSH
14480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14491: LD_INT 12
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 428
14501: NOT
14502: IFFALSE 14484
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14504: LD_EXP 54
14508: PPUSH
14509: LD_INT 12
14511: PPUSH
14512: LD_INT 3
14514: PPUSH
14515: LD_INT 2
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 50
// arabianCanExitMap = true ;
14525: LD_ADDR_EXP 7
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14533: LD_INT 35
14535: PPUSH
14536: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14540: LD_EXP 54
14544: PPUSH
14545: CALL_OW 87
// DialogueOn ;
14549: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-1
14560: PPUSH
14561: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14565: LD_EXP 42
14569: PPUSH
14570: LD_STRING D10-Bur-1
14572: PPUSH
14573: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-2
14584: PPUSH
14585: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14589: LD_EXP 52
14593: PPUSH
14594: LD_STRING D10-Pop-2
14596: PPUSH
14597: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14601: LD_EXP 54
14605: PPUSH
14606: LD_STRING D10-Gay-3
14608: PPUSH
14609: CALL_OW 94
// DialogueOff ;
14613: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14617: LD_EXP 54
14621: PPUSH
14622: LD_INT 36
14624: PPUSH
14625: LD_INT 38
14627: PPUSH
14628: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14632: LD_EXP 54
14636: PPUSH
14637: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14641: LD_STRING M2
14643: PPUSH
14644: CALL_OW 337
// end ;
14648: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14649: LD_EXP 7
14653: IFFALSE 14726
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
// begin enable ;
14661: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14662: LD_INT 22
14664: PUSH
14665: LD_INT 2
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: PPUSH
14675: CALL_OW 69
14679: PPUSH
14680: LD_INT 13
14682: PPUSH
14683: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 13
14694: PPUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 70
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14724
// RemoveUnit ( unit ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 64
14722: GO 14710
14724: POP
14725: POP
// end ;
14726: PPOPN 1
14728: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14729: LD_EXP 20
14733: NOT
14734: IFFALSE 15124
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
// begin enable ;
14743: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: PUSH
14778: FOR_IN
14779: IFFALSE 15122
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_EXP 54
14790: PPUSH
14791: CALL_OW 296
14795: PUSH
14796: LD_INT 6
14798: LESS
14799: IFFALSE 15120
// begin SetSide ( Gaydar , 3 ) ;
14801: LD_EXP 54
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: CALL_OW 235
// ComWalk ( Gaydar ) ;
14813: LD_EXP 54
14817: PPUSH
14818: CALL_OW 138
// saveGaydar = true ;
14822: LD_ADDR_EXP 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14830: LD_INT 35
14832: PPUSH
14833: CALL_OW 67
// DialogueOn ;
14837: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14841: LD_EXP 54
14845: PPUSH
14846: LD_STRING D11-Gay-1
14848: PPUSH
14849: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14853: LD_EXP 42
14857: PPUSH
14858: LD_EXP 54
14862: PPUSH
14863: CALL_OW 296
14867: PUSH
14868: LD_INT 6
14870: LESS
14871: NOT
14872: IFFALSE 14972
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 50
14911: PUSH
14912: EMPTY
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_EXP 54
14930: DIFF
14931: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_EXP 54
14941: PPUSH
14942: CALL_OW 74
14946: PPUSH
14947: LD_STRING D11-RSol1-1
14949: PPUSH
14950: CALL_OW 88
// gaydarWaitForBurlak = true ;
14954: LD_ADDR_EXP 21
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// DialogueOff ;
14962: CALL_OW 7
// exit ;
14966: POP
14967: POP
14968: GO 15124
// end else
14970: GO 15120
// begin Say ( Gaydar , D11-Gay-2 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-2
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-2
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-3
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-3
15015: PPUSH
15016: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15020: LD_EXP 54
15024: PPUSH
15025: LD_STRING D11-Gay-4
15027: PPUSH
15028: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15032: LD_EXP 42
15036: PPUSH
15037: LD_STRING D11-Bur-4
15039: PPUSH
15040: CALL_OW 88
// wait ( 0 0$2 ) ;
15044: LD_INT 70
15046: PPUSH
15047: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15051: LD_EXP 52
15055: PPUSH
15056: LD_STRING D12-Pop-1
15058: PPUSH
15059: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15063: LD_EXP 42
15067: PPUSH
15068: LD_STRING D12-Bur-1
15070: PPUSH
15071: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15075: LD_EXP 53
15079: PPUSH
15080: LD_STRING D12-Pla-1
15082: PPUSH
15083: CALL_OW 94
// DialogueOff ;
15087: CALL_OW 7
// canExitMap = true ;
15091: LD_ADDR_EXP 6
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15099: LD_STRING MFinal
15101: PPUSH
15102: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15106: LD_INT 4
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 424
// exit ;
15116: POP
15117: POP
15118: GO 15124
// end ; end ; end ;
15120: GO 14778
15122: POP
15123: POP
// end ;
15124: PPOPN 2
15126: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15127: LD_EXP 42
15131: PPUSH
15132: LD_EXP 54
15136: PPUSH
15137: CALL_OW 296
15141: PUSH
15142: LD_INT 6
15144: LESS
15145: PUSH
15146: LD_EXP 21
15150: AND
15151: IFFALSE 15304
15153: GO 15155
15155: DISABLE
// begin DialogueOn ;
15156: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-2
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-2
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-3
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-3
15203: PPUSH
15204: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15208: LD_EXP 54
15212: PPUSH
15213: LD_STRING D11-Gay-4
15215: PPUSH
15216: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15220: LD_EXP 42
15224: PPUSH
15225: LD_STRING D11-Bur-4
15227: PPUSH
15228: CALL_OW 88
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15239: LD_EXP 52
15243: PPUSH
15244: LD_STRING D12-Pop-1
15246: PPUSH
15247: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15251: LD_EXP 42
15255: PPUSH
15256: LD_STRING D12-Bur-1
15258: PPUSH
15259: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15263: LD_EXP 53
15267: PPUSH
15268: LD_STRING D12-Pla-1
15270: PPUSH
15271: CALL_OW 94
// DialogueOff ;
15275: CALL_OW 7
// canExitMap = true ;
15279: LD_ADDR_EXP 6
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15287: LD_STRING MFinal
15289: PPUSH
15290: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15294: LD_INT 4
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 424
// end ;
15304: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15305: LD_INT 22
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: PUSH
15334: LD_INT 0
15336: EQUAL
15337: PUSH
15338: LD_EXP 6
15342: AND
15343: IFFALSE 15352
15345: GO 15347
15347: DISABLE
// FinishMission ; end_of_file
15348: CALL 7709 0 0
15352: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15353: LD_EXP 17
15357: PUSH
15358: LD_EXP 19
15362: PUSH
15363: LD_INT 0
15365: EQUAL
15366: AND
15367: PUSH
15368: LD_EXP 19
15372: PUSH
15373: LD_EXP 38
15377: LESS
15378: AND
15379: IFFALSE 15431
15381: GO 15383
15383: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15384: LD_INT 7
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 2
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15410: LD_EXP 65
15414: PPUSH
15415: EMPTY
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 1
15425: NEG
15426: PPUSH
15427: CALL 5042 0 5
// end ;
15431: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15432: LD_EXP 17
15436: PUSH
15437: LD_EXP 19
15441: PUSH
15442: LD_INT 0
15444: GREATEREQUAL
15445: AND
15446: PUSH
15447: LD_EXP 19
15451: PUSH
15452: LD_EXP 38
15456: LESS
15457: AND
15458: IFFALSE 15688
15460: GO 15462
15462: DISABLE
// begin currentWave = currentWave + 1 ;
15463: LD_ADDR_EXP 19
15467: PUSH
15468: LD_EXP 19
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// PrepareArabianVehicles ;
15477: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15481: LD_EXP 65
15485: PPUSH
15486: LD_INT 135
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 134
15498: PUSH
15499: LD_INT 19
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 132
15508: PUSH
15509: LD_INT 26
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 128
15518: PUSH
15519: LD_INT 31
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 123
15528: PUSH
15529: LD_INT 37
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 118
15538: PUSH
15539: LD_INT 45
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 112
15548: PUSH
15549: LD_INT 51
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 106
15558: PUSH
15559: LD_INT 57
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 99
15568: PUSH
15569: LD_INT 62
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 93
15578: PUSH
15579: LD_INT 67
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 86
15588: PUSH
15589: LD_INT 72
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 78
15598: PUSH
15599: LD_INT 75
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 71
15608: PUSH
15609: LD_INT 81
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 69
15618: PUSH
15619: LD_INT 88
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 71
15628: PUSH
15629: LD_INT 95
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 74
15638: PUSH
15639: LD_INT 103
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 80
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: LD_INT 0
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: LD_INT 11
15683: PPUSH
15684: CALL 5042 0 5
// end ;
15688: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15689: LD_EXP 17
15693: PUSH
15694: LD_OWVAR 67
15698: PUSH
15699: LD_INT 2
15701: EQUAL
15702: AND
15703: PUSH
15704: LD_EXP 19
15708: PUSH
15709: LD_INT 0
15711: GREATEREQUAL
15712: AND
15713: PUSH
15714: LD_EXP 19
15718: PUSH
15719: LD_EXP 38
15723: LESS
15724: AND
15725: IFFALSE 15853
15727: GO 15729
15729: DISABLE
// begin PrepareArabianVehicles ;
15730: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15734: LD_EXP 65
15738: PPUSH
15739: LD_INT 135
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 134
15751: PUSH
15752: LD_INT 19
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 132
15761: PUSH
15762: LD_INT 26
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 128
15771: PUSH
15772: LD_INT 31
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 123
15781: PUSH
15782: LD_INT 37
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 118
15791: PUSH
15792: LD_INT 45
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 112
15801: PUSH
15802: LD_INT 51
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: LD_INT 57
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 99
15821: PUSH
15822: LD_INT 62
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PPUSH
15840: LD_INT 0
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: LD_INT 11
15848: PPUSH
15849: CALL 5042 0 5
// end ;
15853: END
// every 1 1$0 trigger enableAttacks and Difficulty >= 3 and currentWave >= 0 and currentWave < enemyWaves do
15854: LD_EXP 17
15858: PUSH
15859: LD_OWVAR 67
15863: PUSH
15864: LD_INT 3
15866: GREATEREQUAL
15867: AND
15868: PUSH
15869: LD_EXP 19
15873: PUSH
15874: LD_INT 0
15876: GREATEREQUAL
15877: AND
15878: PUSH
15879: LD_EXP 19
15883: PUSH
15884: LD_EXP 38
15888: LESS
15889: AND
15890: IFFALSE 16084
15892: GO 15894
15894: DISABLE
// begin PrepareArabianVehicles ;
15895: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15899: LD_EXP 65
15903: PPUSH
15904: LD_INT 135
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 134
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 132
15926: PUSH
15927: LD_INT 26
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 128
15936: PUSH
15937: LD_INT 31
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 123
15946: PUSH
15947: LD_INT 37
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 118
15956: PUSH
15957: LD_INT 45
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 112
15966: PUSH
15967: LD_INT 51
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 57
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 99
15986: PUSH
15987: LD_INT 62
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 104
15996: PUSH
15997: LD_INT 71
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 110
16006: PUSH
16007: LD_INT 78
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 119
16016: PUSH
16017: LD_INT 88
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 128
16026: PUSH
16027: LD_INT 97
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 135
16036: PUSH
16037: LD_INT 106
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 140
16046: PUSH
16047: LD_INT 153
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_INT 11
16079: PPUSH
16080: CALL 5042 0 5
// end ;
16084: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16085: LD_EXP 17
16089: PUSH
16090: LD_EXP 19
16094: PUSH
16095: LD_INT 1
16097: EQUAL
16098: AND
16099: PUSH
16100: LD_EXP 19
16104: PUSH
16105: LD_EXP 38
16109: LESS
16110: AND
16111: IFFALSE 16188
16113: GO 16115
16115: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16116: LD_INT 7
16118: PPUSH
16119: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16123: LD_EXP 65
16127: PPUSH
16128: LD_INT 157
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 194
16140: PUSH
16141: LD_INT 124
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 174
16150: PUSH
16151: LD_INT 158
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 151
16160: PUSH
16161: LD_INT 164
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: LD_INT 0
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 1
16182: NEG
16183: PPUSH
16184: CALL 5042 0 5
// end ;
16188: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16189: LD_EXP 17
16193: PUSH
16194: LD_EXP 19
16198: PUSH
16199: LD_INT 1
16201: EQUAL
16202: AND
16203: PUSH
16204: LD_EXP 19
16208: PUSH
16209: LD_EXP 38
16213: LESS
16214: AND
16215: IFFALSE 16364
16217: GO 16219
16219: DISABLE
// begin wait ( 1 1$30 ) ;
16220: LD_INT 3150
16222: PPUSH
16223: CALL_OW 67
// currentWave = currentWave + 1 ;
16227: LD_ADDR_EXP 19
16231: PUSH
16232: LD_EXP 19
16236: PUSH
16237: LD_INT 1
16239: PLUS
16240: ST_TO_ADDR
// PrepareArabianVehicles ;
16241: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16245: LD_EXP 65
16249: PPUSH
16250: LD_INT 135
16252: PUSH
16253: LD_INT 4
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 134
16262: PUSH
16263: LD_INT 19
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 132
16272: PUSH
16273: LD_INT 26
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 128
16282: PUSH
16283: LD_INT 31
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 123
16292: PUSH
16293: LD_INT 37
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 118
16302: PUSH
16303: LD_INT 45
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 112
16312: PUSH
16313: LD_INT 51
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 106
16322: PUSH
16323: LD_INT 57
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 99
16332: PUSH
16333: LD_INT 62
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 11
16359: PPUSH
16360: CALL 5042 0 5
// end ;
16364: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16365: LD_EXP 17
16369: PUSH
16370: LD_OWVAR 67
16374: PUSH
16375: LD_INT 2
16377: EQUAL
16378: AND
16379: PUSH
16380: LD_EXP 19
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: AND
16389: PUSH
16390: LD_EXP 19
16394: PUSH
16395: LD_EXP 38
16399: LESS
16400: AND
16401: IFFALSE 16595
16403: GO 16405
16405: DISABLE
// begin PrepareArabianVehicles ;
16406: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16410: LD_EXP 65
16414: PPUSH
16415: LD_INT 135
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 134
16427: PUSH
16428: LD_INT 19
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 132
16437: PUSH
16438: LD_INT 26
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 128
16447: PUSH
16448: LD_INT 31
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 123
16457: PUSH
16458: LD_INT 37
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 118
16467: PUSH
16468: LD_INT 45
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: LD_INT 51
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: LD_INT 57
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 99
16497: PUSH
16498: LD_INT 62
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 104
16507: PUSH
16508: LD_INT 71
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 110
16517: PUSH
16518: LD_INT 78
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 119
16527: PUSH
16528: LD_INT 88
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 128
16537: PUSH
16538: LD_INT 97
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 135
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 140
16557: PUSH
16558: LD_INT 153
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: LD_INT 11
16590: PPUSH
16591: CALL 5042 0 5
// end ;
16595: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 1 and currentWave < enemyWaves do
16596: LD_EXP 17
16600: PUSH
16601: LD_OWVAR 67
16605: PUSH
16606: LD_INT 3
16608: GREATEREQUAL
16609: AND
16610: PUSH
16611: LD_EXP 19
16615: PUSH
16616: LD_INT 1
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_EXP 19
16625: PUSH
16626: LD_EXP 38
16630: LESS
16631: AND
16632: IFFALSE 16848
16634: GO 16636
16636: DISABLE
// begin PrepareArabianVehicles ;
16637: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16641: LD_EXP 65
16645: PPUSH
16646: LD_INT 135
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 134
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 132
16668: PUSH
16669: LD_INT 26
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 128
16678: PUSH
16679: LD_INT 31
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 123
16688: PUSH
16689: LD_INT 37
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: LD_INT 45
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 112
16708: PUSH
16709: LD_INT 51
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 57
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 99
16728: PUSH
16729: LD_INT 62
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 93
16738: PUSH
16739: LD_INT 67
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 86
16748: PUSH
16749: LD_INT 72
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 78
16758: PUSH
16759: LD_INT 75
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 71
16768: PUSH
16769: LD_INT 81
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 69
16778: PUSH
16779: LD_INT 88
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 71
16788: PUSH
16789: LD_INT 95
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 74
16798: PUSH
16799: LD_INT 103
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 80
16808: PUSH
16809: LD_INT 113
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: LD_INT 0
16837: PPUSH
16838: LD_INT 1
16840: PPUSH
16841: LD_INT 11
16843: PPUSH
16844: CALL 5042 0 5
// end ;
16848: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16849: LD_EXP 17
16853: PUSH
16854: LD_EXP 19
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: AND
16863: PUSH
16864: LD_EXP 19
16868: PUSH
16869: LD_EXP 38
16873: LESS
16874: AND
16875: IFFALSE 16952
16877: GO 16879
16879: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16880: LD_INT 7
16882: PPUSH
16883: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16887: LD_EXP 65
16891: PPUSH
16892: LD_INT 157
16894: PUSH
16895: LD_INT 31
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 194
16904: PUSH
16905: LD_INT 124
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 174
16914: PUSH
16915: LD_INT 158
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 151
16924: PUSH
16925: LD_INT 164
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: LD_INT 1
16946: NEG
16947: PPUSH
16948: CALL 5042 0 5
// end ;
16952: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16953: LD_EXP 17
16957: PUSH
16958: LD_EXP 19
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: AND
16967: PUSH
16968: LD_EXP 19
16972: PUSH
16973: LD_EXP 38
16977: LESS
16978: AND
16979: IFFALSE 17216
16981: GO 16983
16983: DISABLE
// begin wait ( 1 1$30 ) ;
16984: LD_INT 3150
16986: PPUSH
16987: CALL_OW 67
// currentWave = currentWave + 1 ;
16991: LD_ADDR_EXP 19
16995: PUSH
16996: LD_EXP 19
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: ST_TO_ADDR
// PrepareArabianVehicles ;
17005: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17009: LD_EXP 65
17013: PPUSH
17014: LD_INT 135
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 134
17026: PUSH
17027: LD_INT 19
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 132
17036: PUSH
17037: LD_INT 26
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 128
17046: PUSH
17047: LD_INT 31
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 123
17056: PUSH
17057: LD_INT 37
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 118
17066: PUSH
17067: LD_INT 45
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 112
17076: PUSH
17077: LD_INT 51
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 57
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 99
17096: PUSH
17097: LD_INT 62
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 93
17106: PUSH
17107: LD_INT 67
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 86
17116: PUSH
17117: LD_INT 72
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 78
17126: PUSH
17127: LD_INT 75
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 71
17136: PUSH
17137: LD_INT 81
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 69
17146: PUSH
17147: LD_INT 88
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 71
17156: PUSH
17157: LD_INT 95
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 74
17166: PUSH
17167: LD_INT 103
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 80
17176: PUSH
17177: LD_INT 113
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: LD_INT 11
17211: PPUSH
17212: CALL 5042 0 5
// end ;
17216: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17217: LD_EXP 17
17221: PUSH
17222: LD_OWVAR 67
17226: PUSH
17227: LD_INT 2
17229: EQUAL
17230: AND
17231: PUSH
17232: LD_EXP 19
17236: PUSH
17237: LD_INT 2
17239: EQUAL
17240: AND
17241: PUSH
17242: LD_EXP 19
17246: PUSH
17247: LD_EXP 38
17251: LESS
17252: AND
17253: IFFALSE 17447
17255: GO 17257
17257: DISABLE
// begin PrepareArabianVehicles ;
17258: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17262: LD_EXP 65
17266: PPUSH
17267: LD_INT 135
17269: PUSH
17270: LD_INT 4
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 134
17279: PUSH
17280: LD_INT 19
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 132
17289: PUSH
17290: LD_INT 26
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 128
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 123
17309: PUSH
17310: LD_INT 37
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 118
17319: PUSH
17320: LD_INT 45
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 112
17329: PUSH
17330: LD_INT 51
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 106
17339: PUSH
17340: LD_INT 57
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 99
17349: PUSH
17350: LD_INT 62
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 104
17359: PUSH
17360: LD_INT 71
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 110
17369: PUSH
17370: LD_INT 78
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 119
17379: PUSH
17380: LD_INT 88
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 128
17389: PUSH
17390: LD_INT 97
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 135
17399: PUSH
17400: LD_INT 106
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 140
17409: PUSH
17410: LD_INT 153
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 11
17442: PPUSH
17443: CALL 5042 0 5
// end ;
17447: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 2 and currentWave < enemyWaves do
17448: LD_EXP 17
17452: PUSH
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 3
17460: GREATEREQUAL
17461: AND
17462: PUSH
17463: LD_EXP 19
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_EXP 19
17477: PUSH
17478: LD_EXP 38
17482: LESS
17483: AND
17484: IFFALSE 17678
17486: GO 17488
17488: DISABLE
// begin PrepareArabianVehicles ;
17489: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17493: LD_EXP 65
17497: PPUSH
17498: LD_INT 135
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 134
17510: PUSH
17511: LD_INT 19
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 132
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 128
17530: PUSH
17531: LD_INT 31
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 123
17540: PUSH
17541: LD_INT 37
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: LD_INT 45
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 112
17560: PUSH
17561: LD_INT 51
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 106
17570: PUSH
17571: LD_INT 57
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 99
17580: PUSH
17581: LD_INT 62
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 104
17590: PUSH
17591: LD_INT 71
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 110
17600: PUSH
17601: LD_INT 78
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 119
17610: PUSH
17611: LD_INT 88
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 128
17620: PUSH
17621: LD_INT 97
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 135
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 153
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PPUSH
17665: LD_INT 0
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 11
17673: PPUSH
17674: CALL 5042 0 5
// end ;
17678: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17679: LD_EXP 17
17683: PUSH
17684: LD_EXP 19
17688: PUSH
17689: LD_INT 3
17691: EQUAL
17692: AND
17693: PUSH
17694: LD_EXP 19
17698: PUSH
17699: LD_EXP 38
17703: LESS
17704: AND
17705: IFFALSE 17782
17707: GO 17709
17709: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17710: LD_INT 7
17712: PPUSH
17713: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17717: LD_EXP 65
17721: PPUSH
17722: LD_INT 157
17724: PUSH
17725: LD_INT 31
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 194
17734: PUSH
17735: LD_INT 124
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 174
17744: PUSH
17745: LD_INT 158
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 151
17754: PUSH
17755: LD_INT 164
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PPUSH
17768: LD_INT 0
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 1
17776: NEG
17777: PPUSH
17778: CALL 5042 0 5
// end ;
17782: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17783: LD_EXP 17
17787: PUSH
17788: LD_EXP 19
17792: PUSH
17793: LD_INT 3
17795: EQUAL
17796: AND
17797: PUSH
17798: LD_EXP 19
17802: PUSH
17803: LD_EXP 38
17807: LESS
17808: AND
17809: IFFALSE 18046
17811: GO 17813
17813: DISABLE
// begin wait ( 1 1$30 ) ;
17814: LD_INT 3150
17816: PPUSH
17817: CALL_OW 67
// currentWave = currentWave + 1 ;
17821: LD_ADDR_EXP 19
17825: PUSH
17826: LD_EXP 19
17830: PUSH
17831: LD_INT 1
17833: PLUS
17834: ST_TO_ADDR
// PrepareArabianVehicles ;
17835: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17839: LD_EXP 65
17843: PPUSH
17844: LD_INT 135
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 134
17856: PUSH
17857: LD_INT 19
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 132
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 128
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 123
17886: PUSH
17887: LD_INT 37
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: LD_INT 45
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 112
17906: PUSH
17907: LD_INT 51
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 106
17916: PUSH
17917: LD_INT 57
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 99
17926: PUSH
17927: LD_INT 62
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 93
17936: PUSH
17937: LD_INT 67
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 86
17946: PUSH
17947: LD_INT 72
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 78
17956: PUSH
17957: LD_INT 75
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 71
17966: PUSH
17967: LD_INT 81
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 69
17976: PUSH
17977: LD_INT 88
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 71
17986: PUSH
17987: LD_INT 95
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 74
17996: PUSH
17997: LD_INT 103
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 80
18006: PUSH
18007: LD_INT 113
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_INT 11
18041: PPUSH
18042: CALL 5042 0 5
// end ;
18046: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18047: LD_EXP 17
18051: PUSH
18052: LD_OWVAR 67
18056: PUSH
18057: LD_INT 2
18059: EQUAL
18060: AND
18061: PUSH
18062: LD_EXP 19
18066: PUSH
18067: LD_INT 3
18069: EQUAL
18070: AND
18071: PUSH
18072: LD_EXP 19
18076: PUSH
18077: LD_EXP 38
18081: LESS
18082: AND
18083: IFFALSE 18277
18085: GO 18087
18087: DISABLE
// begin PrepareArabianVehicles ;
18088: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18092: LD_EXP 65
18096: PPUSH
18097: LD_INT 135
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 134
18109: PUSH
18110: LD_INT 19
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 132
18119: PUSH
18120: LD_INT 26
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 128
18129: PUSH
18130: LD_INT 31
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 123
18139: PUSH
18140: LD_INT 37
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 118
18149: PUSH
18150: LD_INT 45
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 112
18159: PUSH
18160: LD_INT 51
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 57
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 99
18179: PUSH
18180: LD_INT 62
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 104
18189: PUSH
18190: LD_INT 71
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 110
18199: PUSH
18200: LD_INT 78
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 119
18209: PUSH
18210: LD_INT 88
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 128
18219: PUSH
18220: LD_INT 97
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 135
18229: PUSH
18230: LD_INT 106
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 140
18239: PUSH
18240: LD_INT 153
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PPUSH
18264: LD_INT 0
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_INT 11
18272: PPUSH
18273: CALL 5042 0 5
// end ;
18277: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 3 and currentWave < enemyWaves do
18278: LD_EXP 17
18282: PUSH
18283: LD_OWVAR 67
18287: PUSH
18288: LD_INT 3
18290: GREATEREQUAL
18291: AND
18292: PUSH
18293: LD_EXP 19
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: AND
18302: PUSH
18303: LD_EXP 19
18307: PUSH
18308: LD_EXP 38
18312: LESS
18313: AND
18314: IFFALSE 18508
18316: GO 18318
18318: DISABLE
// begin PrepareArabianVehicles ;
18319: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18323: LD_EXP 65
18327: PPUSH
18328: LD_INT 135
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 134
18340: PUSH
18341: LD_INT 19
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 132
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 128
18360: PUSH
18361: LD_INT 31
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 123
18370: PUSH
18371: LD_INT 37
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 118
18380: PUSH
18381: LD_INT 45
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 112
18390: PUSH
18391: LD_INT 51
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 106
18400: PUSH
18401: LD_INT 57
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 99
18410: PUSH
18411: LD_INT 62
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 104
18420: PUSH
18421: LD_INT 71
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 110
18430: PUSH
18431: LD_INT 78
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 119
18440: PUSH
18441: LD_INT 88
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 128
18450: PUSH
18451: LD_INT 97
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 135
18460: PUSH
18461: LD_INT 106
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 140
18470: PUSH
18471: LD_INT 153
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_INT 11
18503: PPUSH
18504: CALL 5042 0 5
// end ;
18508: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18509: LD_EXP 54
18513: PPUSH
18514: CALL_OW 305
18518: PUSH
18519: LD_EXP 23
18523: PUSH
18524: LD_INT 5
18526: LESS
18527: AND
18528: IFFALSE 18538
18530: GO 18532
18532: DISABLE
// begin PrepareArabianKiller ;
18533: CALL 4090 0 0
// enable ;
18537: ENABLE
// end ; end_of_file
18538: END
// export function SetAchievements ; begin
18539: LD_INT 0
18541: PPUSH
// if stealWarmCount = 0 then
18542: LD_EXP 12
18546: PUSH
18547: LD_INT 0
18549: EQUAL
18550: IFFALSE 18559
// SetAchievement ( ACH_ENO ) ;
18552: LD_STRING ACH_ENO
18554: PPUSH
18555: CALL_OW 543
// end ;
18559: LD_VAR 0 1
18563: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18564: LD_EXP 25
18568: PUSH
18569: LD_INT 6
18571: GREATEREQUAL
18572: IFFALSE 18584
18574: GO 18576
18576: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18577: LD_STRING ACH_DEFENSE
18579: PPUSH
18580: CALL_OW 543
18584: END
// every 1 trigger killedArabianUnits >= 25 do
18585: LD_EXP 22
18589: PUSH
18590: LD_INT 25
18592: GREATEREQUAL
18593: IFFALSE 18605
18595: GO 18597
18597: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18598: LD_STRING ACH_ARAB
18600: PPUSH
18601: CALL_OW 543
18605: END
// export globalGameSaveCounter ; every 0 0$1 do
18606: GO 18608
18608: DISABLE
// begin enable ;
18609: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18610: LD_STRING updateTimer(
18612: PUSH
18613: LD_OWVAR 1
18617: STR
18618: PUSH
18619: LD_STRING );
18621: STR
18622: PPUSH
18623: CALL_OW 559
// end ;
18627: END
// every 0 0$1 do
18628: GO 18630
18630: DISABLE
// begin globalGameSaveCounter := 0 ;
18631: LD_ADDR_EXP 66
18635: PUSH
18636: LD_INT 0
18638: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18639: LD_STRING setGameSaveCounter(0)
18641: PPUSH
18642: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18646: LD_STRING initStreamRollete();
18648: PPUSH
18649: CALL_OW 559
// InitStreamMode ;
18653: CALL 19979 0 0
// DefineStreamItems ( false ) ;
18657: LD_INT 0
18659: PPUSH
18660: CALL 20443 0 1
// end ;
18664: END
// export function SOS_MapStart ( ) ; begin
18665: LD_INT 0
18667: PPUSH
// if streamModeActive then
18668: LD_EXP 67
18672: IFFALSE 18681
// DefineStreamItems ( true ) ;
18674: LD_INT 1
18676: PPUSH
18677: CALL 20443 0 1
// UpdateLuaVariables ( ) ;
18681: CALL 18698 0 0
// UpdateFactoryWaypoints ( ) ;
18685: CALL 33304 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18689: CALL 33561 0 0
// end ;
18693: LD_VAR 0 1
18697: RET
// function UpdateLuaVariables ( ) ; begin
18698: LD_INT 0
18700: PPUSH
// if globalGameSaveCounter then
18701: LD_EXP 66
18705: IFFALSE 18739
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18707: LD_ADDR_EXP 66
18711: PUSH
18712: LD_EXP 66
18716: PPUSH
18717: CALL 77681 0 1
18721: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18722: LD_STRING setGameSaveCounter(
18724: PUSH
18725: LD_EXP 66
18729: STR
18730: PUSH
18731: LD_STRING )
18733: STR
18734: PPUSH
18735: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18739: LD_STRING setGameDifficulty(
18741: PUSH
18742: LD_OWVAR 67
18746: STR
18747: PUSH
18748: LD_STRING )
18750: STR
18751: PPUSH
18752: CALL_OW 559
// end ;
18756: LD_VAR 0 1
18760: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18761: LD_INT 0
18763: PPUSH
// if p2 = stream_mode then
18764: LD_VAR 0 2
18768: PUSH
18769: LD_INT 100
18771: EQUAL
18772: IFFALSE 19775
// begin if not StreamModeActive then
18774: LD_EXP 67
18778: NOT
18779: IFFALSE 18789
// StreamModeActive := true ;
18781: LD_ADDR_EXP 67
18785: PUSH
18786: LD_INT 1
18788: ST_TO_ADDR
// if p3 = 0 then
18789: LD_VAR 0 3
18793: PUSH
18794: LD_INT 0
18796: EQUAL
18797: IFFALSE 18803
// InitStreamMode ;
18799: CALL 19979 0 0
// if p3 = 1 then
18803: LD_VAR 0 3
18807: PUSH
18808: LD_INT 1
18810: EQUAL
18811: IFFALSE 18821
// sRocket := true ;
18813: LD_ADDR_EXP 72
18817: PUSH
18818: LD_INT 1
18820: ST_TO_ADDR
// if p3 = 2 then
18821: LD_VAR 0 3
18825: PUSH
18826: LD_INT 2
18828: EQUAL
18829: IFFALSE 18839
// sSpeed := true ;
18831: LD_ADDR_EXP 71
18835: PUSH
18836: LD_INT 1
18838: ST_TO_ADDR
// if p3 = 3 then
18839: LD_VAR 0 3
18843: PUSH
18844: LD_INT 3
18846: EQUAL
18847: IFFALSE 18857
// sEngine := true ;
18849: LD_ADDR_EXP 73
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// if p3 = 4 then
18857: LD_VAR 0 3
18861: PUSH
18862: LD_INT 4
18864: EQUAL
18865: IFFALSE 18875
// sSpec := true ;
18867: LD_ADDR_EXP 70
18871: PUSH
18872: LD_INT 1
18874: ST_TO_ADDR
// if p3 = 5 then
18875: LD_VAR 0 3
18879: PUSH
18880: LD_INT 5
18882: EQUAL
18883: IFFALSE 18893
// sLevel := true ;
18885: LD_ADDR_EXP 74
18889: PUSH
18890: LD_INT 1
18892: ST_TO_ADDR
// if p3 = 6 then
18893: LD_VAR 0 3
18897: PUSH
18898: LD_INT 6
18900: EQUAL
18901: IFFALSE 18911
// sArmoury := true ;
18903: LD_ADDR_EXP 75
18907: PUSH
18908: LD_INT 1
18910: ST_TO_ADDR
// if p3 = 7 then
18911: LD_VAR 0 3
18915: PUSH
18916: LD_INT 7
18918: EQUAL
18919: IFFALSE 18929
// sRadar := true ;
18921: LD_ADDR_EXP 76
18925: PUSH
18926: LD_INT 1
18928: ST_TO_ADDR
// if p3 = 8 then
18929: LD_VAR 0 3
18933: PUSH
18934: LD_INT 8
18936: EQUAL
18937: IFFALSE 18947
// sBunker := true ;
18939: LD_ADDR_EXP 77
18943: PUSH
18944: LD_INT 1
18946: ST_TO_ADDR
// if p3 = 9 then
18947: LD_VAR 0 3
18951: PUSH
18952: LD_INT 9
18954: EQUAL
18955: IFFALSE 18965
// sHack := true ;
18957: LD_ADDR_EXP 78
18961: PUSH
18962: LD_INT 1
18964: ST_TO_ADDR
// if p3 = 10 then
18965: LD_VAR 0 3
18969: PUSH
18970: LD_INT 10
18972: EQUAL
18973: IFFALSE 18983
// sFire := true ;
18975: LD_ADDR_EXP 79
18979: PUSH
18980: LD_INT 1
18982: ST_TO_ADDR
// if p3 = 11 then
18983: LD_VAR 0 3
18987: PUSH
18988: LD_INT 11
18990: EQUAL
18991: IFFALSE 19001
// sRefresh := true ;
18993: LD_ADDR_EXP 80
18997: PUSH
18998: LD_INT 1
19000: ST_TO_ADDR
// if p3 = 12 then
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 12
19008: EQUAL
19009: IFFALSE 19019
// sExp := true ;
19011: LD_ADDR_EXP 81
19015: PUSH
19016: LD_INT 1
19018: ST_TO_ADDR
// if p3 = 13 then
19019: LD_VAR 0 3
19023: PUSH
19024: LD_INT 13
19026: EQUAL
19027: IFFALSE 19037
// sDepot := true ;
19029: LD_ADDR_EXP 82
19033: PUSH
19034: LD_INT 1
19036: ST_TO_ADDR
// if p3 = 14 then
19037: LD_VAR 0 3
19041: PUSH
19042: LD_INT 14
19044: EQUAL
19045: IFFALSE 19055
// sFlag := true ;
19047: LD_ADDR_EXP 83
19051: PUSH
19052: LD_INT 1
19054: ST_TO_ADDR
// if p3 = 15 then
19055: LD_VAR 0 3
19059: PUSH
19060: LD_INT 15
19062: EQUAL
19063: IFFALSE 19073
// sKamikadze := true ;
19065: LD_ADDR_EXP 91
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// if p3 = 16 then
19073: LD_VAR 0 3
19077: PUSH
19078: LD_INT 16
19080: EQUAL
19081: IFFALSE 19091
// sTroll := true ;
19083: LD_ADDR_EXP 92
19087: PUSH
19088: LD_INT 1
19090: ST_TO_ADDR
// if p3 = 17 then
19091: LD_VAR 0 3
19095: PUSH
19096: LD_INT 17
19098: EQUAL
19099: IFFALSE 19109
// sSlow := true ;
19101: LD_ADDR_EXP 93
19105: PUSH
19106: LD_INT 1
19108: ST_TO_ADDR
// if p3 = 18 then
19109: LD_VAR 0 3
19113: PUSH
19114: LD_INT 18
19116: EQUAL
19117: IFFALSE 19127
// sLack := true ;
19119: LD_ADDR_EXP 94
19123: PUSH
19124: LD_INT 1
19126: ST_TO_ADDR
// if p3 = 19 then
19127: LD_VAR 0 3
19131: PUSH
19132: LD_INT 19
19134: EQUAL
19135: IFFALSE 19145
// sTank := true ;
19137: LD_ADDR_EXP 96
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// if p3 = 20 then
19145: LD_VAR 0 3
19149: PUSH
19150: LD_INT 20
19152: EQUAL
19153: IFFALSE 19163
// sRemote := true ;
19155: LD_ADDR_EXP 97
19159: PUSH
19160: LD_INT 1
19162: ST_TO_ADDR
// if p3 = 21 then
19163: LD_VAR 0 3
19167: PUSH
19168: LD_INT 21
19170: EQUAL
19171: IFFALSE 19181
// sPowell := true ;
19173: LD_ADDR_EXP 98
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 22 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 22
19188: EQUAL
19189: IFFALSE 19199
// sTeleport := true ;
19191: LD_ADDR_EXP 101
19195: PUSH
19196: LD_INT 1
19198: ST_TO_ADDR
// if p3 = 23 then
19199: LD_VAR 0 3
19203: PUSH
19204: LD_INT 23
19206: EQUAL
19207: IFFALSE 19217
// sOilTower := true ;
19209: LD_ADDR_EXP 103
19213: PUSH
19214: LD_INT 1
19216: ST_TO_ADDR
// if p3 = 24 then
19217: LD_VAR 0 3
19221: PUSH
19222: LD_INT 24
19224: EQUAL
19225: IFFALSE 19235
// sShovel := true ;
19227: LD_ADDR_EXP 104
19231: PUSH
19232: LD_INT 1
19234: ST_TO_ADDR
// if p3 = 25 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 25
19242: EQUAL
19243: IFFALSE 19253
// sSheik := true ;
19245: LD_ADDR_EXP 105
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 26 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 26
19260: EQUAL
19261: IFFALSE 19271
// sEarthquake := true ;
19263: LD_ADDR_EXP 107
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 27 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 27
19278: EQUAL
19279: IFFALSE 19289
// sAI := true ;
19281: LD_ADDR_EXP 108
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 28 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 28
19296: EQUAL
19297: IFFALSE 19307
// sCargo := true ;
19299: LD_ADDR_EXP 111
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 29 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 29
19314: EQUAL
19315: IFFALSE 19325
// sDLaser := true ;
19317: LD_ADDR_EXP 112
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 30 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 30
19332: EQUAL
19333: IFFALSE 19343
// sExchange := true ;
19335: LD_ADDR_EXP 113
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 31 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 31
19350: EQUAL
19351: IFFALSE 19361
// sFac := true ;
19353: LD_ADDR_EXP 114
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 32 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 32
19368: EQUAL
19369: IFFALSE 19379
// sPower := true ;
19371: LD_ADDR_EXP 115
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 33 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 33
19386: EQUAL
19387: IFFALSE 19397
// sRandom := true ;
19389: LD_ADDR_EXP 116
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 34 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 34
19404: EQUAL
19405: IFFALSE 19415
// sShield := true ;
19407: LD_ADDR_EXP 117
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 35 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 35
19422: EQUAL
19423: IFFALSE 19433
// sTime := true ;
19425: LD_ADDR_EXP 118
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 36 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 36
19440: EQUAL
19441: IFFALSE 19451
// sTools := true ;
19443: LD_ADDR_EXP 119
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 101 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 101
19458: EQUAL
19459: IFFALSE 19469
// sSold := true ;
19461: LD_ADDR_EXP 84
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 102 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 102
19476: EQUAL
19477: IFFALSE 19487
// sDiff := true ;
19479: LD_ADDR_EXP 85
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 103 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 103
19494: EQUAL
19495: IFFALSE 19505
// sFog := true ;
19497: LD_ADDR_EXP 88
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 104 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 104
19512: EQUAL
19513: IFFALSE 19523
// sReset := true ;
19515: LD_ADDR_EXP 89
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 105 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 105
19530: EQUAL
19531: IFFALSE 19541
// sSun := true ;
19533: LD_ADDR_EXP 90
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 106 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 106
19548: EQUAL
19549: IFFALSE 19559
// sTiger := true ;
19551: LD_ADDR_EXP 86
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 107 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 107
19566: EQUAL
19567: IFFALSE 19577
// sBomb := true ;
19569: LD_ADDR_EXP 87
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 108 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 108
19584: EQUAL
19585: IFFALSE 19595
// sWound := true ;
19587: LD_ADDR_EXP 95
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 109 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 109
19602: EQUAL
19603: IFFALSE 19613
// sBetray := true ;
19605: LD_ADDR_EXP 99
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 110 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 110
19620: EQUAL
19621: IFFALSE 19631
// sContamin := true ;
19623: LD_ADDR_EXP 100
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 111 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 111
19638: EQUAL
19639: IFFALSE 19649
// sOil := true ;
19641: LD_ADDR_EXP 102
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 112 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 112
19656: EQUAL
19657: IFFALSE 19667
// sStu := true ;
19659: LD_ADDR_EXP 106
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 113 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 113
19674: EQUAL
19675: IFFALSE 19685
// sBazooka := true ;
19677: LD_ADDR_EXP 109
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 114 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 114
19692: EQUAL
19693: IFFALSE 19703
// sMortar := true ;
19695: LD_ADDR_EXP 110
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 115 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 115
19710: EQUAL
19711: IFFALSE 19721
// sRanger := true ;
19713: LD_ADDR_EXP 120
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 116 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 116
19728: EQUAL
19729: IFFALSE 19739
// sComputer := true ;
19731: LD_ADDR_EXP 121
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 117 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 117
19746: EQUAL
19747: IFFALSE 19757
// s30 := true ;
19749: LD_ADDR_EXP 122
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 118 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 118
19764: EQUAL
19765: IFFALSE 19775
// s60 := true ;
19767: LD_ADDR_EXP 123
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// end ; if p2 = hack_mode then
19775: LD_VAR 0 2
19779: PUSH
19780: LD_INT 101
19782: EQUAL
19783: IFFALSE 19911
// begin case p3 of 1 :
19785: LD_VAR 0 3
19789: PUSH
19790: LD_INT 1
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19805
19798: POP
// hHackUnlimitedResources ; 2 :
19799: CALL 32050 0 0
19803: GO 19911
19805: LD_INT 2
19807: DOUBLE
19808: EQUAL
19809: IFTRUE 19813
19811: GO 19820
19813: POP
// hHackSetLevel10 ; 3 :
19814: CALL 32183 0 0
19818: GO 19911
19820: LD_INT 3
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19835
19828: POP
// hHackSetLevel10YourUnits ; 4 :
19829: CALL 32268 0 0
19833: GO 19911
19835: LD_INT 4
19837: DOUBLE
19838: EQUAL
19839: IFTRUE 19843
19841: GO 19850
19843: POP
// hHackInvincible ; 5 :
19844: CALL 32716 0 0
19848: GO 19911
19850: LD_INT 5
19852: DOUBLE
19853: EQUAL
19854: IFTRUE 19858
19856: GO 19865
19858: POP
// hHackInvisible ; 6 :
19859: CALL 32827 0 0
19863: GO 19911
19865: LD_INT 6
19867: DOUBLE
19868: EQUAL
19869: IFTRUE 19873
19871: GO 19880
19873: POP
// hHackChangeYourSide ; 7 :
19874: CALL 32884 0 0
19878: GO 19911
19880: LD_INT 7
19882: DOUBLE
19883: EQUAL
19884: IFTRUE 19888
19886: GO 19895
19888: POP
// hHackChangeUnitSide ; 8 :
19889: CALL 32926 0 0
19893: GO 19911
19895: LD_INT 8
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19910
19903: POP
// hHackFog ; end ;
19904: CALL 33027 0 0
19908: GO 19911
19910: POP
// end ; if p2 = game_save_mode then
19911: LD_VAR 0 2
19915: PUSH
19916: LD_INT 102
19918: EQUAL
19919: IFFALSE 19974
// begin if p3 = 1 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 1
19928: EQUAL
19929: IFFALSE 19941
// globalGameSaveCounter := p4 ;
19931: LD_ADDR_EXP 66
19935: PUSH
19936: LD_VAR 0 4
19940: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 2
19948: EQUAL
19949: PUSH
19950: LD_EXP 66
19954: AND
19955: IFFALSE 19974
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19957: LD_STRING setGameSaveCounter(
19959: PUSH
19960: LD_EXP 66
19964: STR
19965: PUSH
19966: LD_STRING )
19968: STR
19969: PPUSH
19970: CALL_OW 559
// end ; end ;
19974: LD_VAR 0 7
19978: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19979: LD_INT 0
19981: PPUSH
// streamModeActive := false ;
19982: LD_ADDR_EXP 67
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// normalCounter := 36 ;
19990: LD_ADDR_EXP 68
19994: PUSH
19995: LD_INT 36
19997: ST_TO_ADDR
// hardcoreCounter := 18 ;
19998: LD_ADDR_EXP 69
20002: PUSH
20003: LD_INT 18
20005: ST_TO_ADDR
// sRocket := false ;
20006: LD_ADDR_EXP 72
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// sSpeed := false ;
20014: LD_ADDR_EXP 71
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// sEngine := false ;
20022: LD_ADDR_EXP 73
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// sSpec := false ;
20030: LD_ADDR_EXP 70
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// sLevel := false ;
20038: LD_ADDR_EXP 74
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// sArmoury := false ;
20046: LD_ADDR_EXP 75
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sRadar := false ;
20054: LD_ADDR_EXP 76
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sBunker := false ;
20062: LD_ADDR_EXP 77
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sHack := false ;
20070: LD_ADDR_EXP 78
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sFire := false ;
20078: LD_ADDR_EXP 79
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sRefresh := false ;
20086: LD_ADDR_EXP 80
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sExp := false ;
20094: LD_ADDR_EXP 81
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// sDepot := false ;
20102: LD_ADDR_EXP 82
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// sFlag := false ;
20110: LD_ADDR_EXP 83
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
// sKamikadze := false ;
20118: LD_ADDR_EXP 91
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// sTroll := false ;
20126: LD_ADDR_EXP 92
20130: PUSH
20131: LD_INT 0
20133: ST_TO_ADDR
// sSlow := false ;
20134: LD_ADDR_EXP 93
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// sLack := false ;
20142: LD_ADDR_EXP 94
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// sTank := false ;
20150: LD_ADDR_EXP 96
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// sRemote := false ;
20158: LD_ADDR_EXP 97
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// sPowell := false ;
20166: LD_ADDR_EXP 98
20170: PUSH
20171: LD_INT 0
20173: ST_TO_ADDR
// sTeleport := false ;
20174: LD_ADDR_EXP 101
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// sOilTower := false ;
20182: LD_ADDR_EXP 103
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// sShovel := false ;
20190: LD_ADDR_EXP 104
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// sSheik := false ;
20198: LD_ADDR_EXP 105
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
// sEarthquake := false ;
20206: LD_ADDR_EXP 107
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// sAI := false ;
20214: LD_ADDR_EXP 108
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// sCargo := false ;
20222: LD_ADDR_EXP 111
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// sDLaser := false ;
20230: LD_ADDR_EXP 112
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// sExchange := false ;
20238: LD_ADDR_EXP 113
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// sFac := false ;
20246: LD_ADDR_EXP 114
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// sPower := false ;
20254: LD_ADDR_EXP 115
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// sRandom := false ;
20262: LD_ADDR_EXP 116
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// sShield := false ;
20270: LD_ADDR_EXP 117
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// sTime := false ;
20278: LD_ADDR_EXP 118
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// sTools := false ;
20286: LD_ADDR_EXP 119
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// sSold := false ;
20294: LD_ADDR_EXP 84
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// sDiff := false ;
20302: LD_ADDR_EXP 85
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// sFog := false ;
20310: LD_ADDR_EXP 88
20314: PUSH
20315: LD_INT 0
20317: ST_TO_ADDR
// sReset := false ;
20318: LD_ADDR_EXP 89
20322: PUSH
20323: LD_INT 0
20325: ST_TO_ADDR
// sSun := false ;
20326: LD_ADDR_EXP 90
20330: PUSH
20331: LD_INT 0
20333: ST_TO_ADDR
// sTiger := false ;
20334: LD_ADDR_EXP 86
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// sBomb := false ;
20342: LD_ADDR_EXP 87
20346: PUSH
20347: LD_INT 0
20349: ST_TO_ADDR
// sWound := false ;
20350: LD_ADDR_EXP 95
20354: PUSH
20355: LD_INT 0
20357: ST_TO_ADDR
// sBetray := false ;
20358: LD_ADDR_EXP 99
20362: PUSH
20363: LD_INT 0
20365: ST_TO_ADDR
// sContamin := false ;
20366: LD_ADDR_EXP 100
20370: PUSH
20371: LD_INT 0
20373: ST_TO_ADDR
// sOil := false ;
20374: LD_ADDR_EXP 102
20378: PUSH
20379: LD_INT 0
20381: ST_TO_ADDR
// sStu := false ;
20382: LD_ADDR_EXP 106
20386: PUSH
20387: LD_INT 0
20389: ST_TO_ADDR
// sBazooka := false ;
20390: LD_ADDR_EXP 109
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// sMortar := false ;
20398: LD_ADDR_EXP 110
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// sRanger := false ;
20406: LD_ADDR_EXP 120
20410: PUSH
20411: LD_INT 0
20413: ST_TO_ADDR
// sComputer := false ;
20414: LD_ADDR_EXP 121
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// s30 := false ;
20422: LD_ADDR_EXP 122
20426: PUSH
20427: LD_INT 0
20429: ST_TO_ADDR
// s60 := false ;
20430: LD_ADDR_EXP 123
20434: PUSH
20435: LD_INT 0
20437: ST_TO_ADDR
// end ;
20438: LD_VAR 0 1
20442: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20443: LD_INT 0
20445: PPUSH
20446: PPUSH
20447: PPUSH
20448: PPUSH
20449: PPUSH
20450: PPUSH
20451: PPUSH
// result := [ ] ;
20452: LD_ADDR_VAR 0 2
20456: PUSH
20457: EMPTY
20458: ST_TO_ADDR
// if campaign_id = 1 then
20459: LD_OWVAR 69
20463: PUSH
20464: LD_INT 1
20466: EQUAL
20467: IFFALSE 23633
// begin case mission_number of 1 :
20469: LD_OWVAR 70
20473: PUSH
20474: LD_INT 1
20476: DOUBLE
20477: EQUAL
20478: IFTRUE 20482
20480: GO 20558
20482: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20483: LD_ADDR_VAR 0 2
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 4
20493: PUSH
20494: LD_INT 11
20496: PUSH
20497: LD_INT 12
20499: PUSH
20500: LD_INT 15
20502: PUSH
20503: LD_INT 16
20505: PUSH
20506: LD_INT 22
20508: PUSH
20509: LD_INT 23
20511: PUSH
20512: LD_INT 26
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 101
20528: PUSH
20529: LD_INT 102
20531: PUSH
20532: LD_INT 106
20534: PUSH
20535: LD_INT 116
20537: PUSH
20538: LD_INT 117
20540: PUSH
20541: LD_INT 118
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: ST_TO_ADDR
20556: GO 23631
20558: LD_INT 2
20560: DOUBLE
20561: EQUAL
20562: IFTRUE 20566
20564: GO 20650
20566: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20567: LD_ADDR_VAR 0 2
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: LD_INT 4
20577: PUSH
20578: LD_INT 11
20580: PUSH
20581: LD_INT 12
20583: PUSH
20584: LD_INT 15
20586: PUSH
20587: LD_INT 16
20589: PUSH
20590: LD_INT 22
20592: PUSH
20593: LD_INT 23
20595: PUSH
20596: LD_INT 26
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 101
20612: PUSH
20613: LD_INT 102
20615: PUSH
20616: LD_INT 105
20618: PUSH
20619: LD_INT 106
20621: PUSH
20622: LD_INT 108
20624: PUSH
20625: LD_INT 116
20627: PUSH
20628: LD_INT 117
20630: PUSH
20631: LD_INT 118
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: ST_TO_ADDR
20648: GO 23631
20650: LD_INT 3
20652: DOUBLE
20653: EQUAL
20654: IFTRUE 20658
20656: GO 20746
20658: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20659: LD_ADDR_VAR 0 2
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 4
20669: PUSH
20670: LD_INT 5
20672: PUSH
20673: LD_INT 11
20675: PUSH
20676: LD_INT 12
20678: PUSH
20679: LD_INT 15
20681: PUSH
20682: LD_INT 16
20684: PUSH
20685: LD_INT 22
20687: PUSH
20688: LD_INT 26
20690: PUSH
20691: LD_INT 36
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 101
20708: PUSH
20709: LD_INT 102
20711: PUSH
20712: LD_INT 105
20714: PUSH
20715: LD_INT 106
20717: PUSH
20718: LD_INT 108
20720: PUSH
20721: LD_INT 116
20723: PUSH
20724: LD_INT 117
20726: PUSH
20727: LD_INT 118
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: ST_TO_ADDR
20744: GO 23631
20746: LD_INT 4
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20850
20754: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20755: LD_ADDR_VAR 0 2
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 4
20765: PUSH
20766: LD_INT 5
20768: PUSH
20769: LD_INT 8
20771: PUSH
20772: LD_INT 11
20774: PUSH
20775: LD_INT 12
20777: PUSH
20778: LD_INT 15
20780: PUSH
20781: LD_INT 16
20783: PUSH
20784: LD_INT 22
20786: PUSH
20787: LD_INT 23
20789: PUSH
20790: LD_INT 26
20792: PUSH
20793: LD_INT 36
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 101
20812: PUSH
20813: LD_INT 102
20815: PUSH
20816: LD_INT 105
20818: PUSH
20819: LD_INT 106
20821: PUSH
20822: LD_INT 108
20824: PUSH
20825: LD_INT 116
20827: PUSH
20828: LD_INT 117
20830: PUSH
20831: LD_INT 118
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: ST_TO_ADDR
20848: GO 23631
20850: LD_INT 5
20852: DOUBLE
20853: EQUAL
20854: IFTRUE 20858
20856: GO 20970
20858: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20859: LD_ADDR_VAR 0 2
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: LD_INT 4
20869: PUSH
20870: LD_INT 5
20872: PUSH
20873: LD_INT 6
20875: PUSH
20876: LD_INT 8
20878: PUSH
20879: LD_INT 11
20881: PUSH
20882: LD_INT 12
20884: PUSH
20885: LD_INT 15
20887: PUSH
20888: LD_INT 16
20890: PUSH
20891: LD_INT 22
20893: PUSH
20894: LD_INT 23
20896: PUSH
20897: LD_INT 25
20899: PUSH
20900: LD_INT 26
20902: PUSH
20903: LD_INT 36
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 101
20924: PUSH
20925: LD_INT 102
20927: PUSH
20928: LD_INT 105
20930: PUSH
20931: LD_INT 106
20933: PUSH
20934: LD_INT 108
20936: PUSH
20937: LD_INT 109
20939: PUSH
20940: LD_INT 112
20942: PUSH
20943: LD_INT 116
20945: PUSH
20946: LD_INT 117
20948: PUSH
20949: LD_INT 118
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: ST_TO_ADDR
20968: GO 23631
20970: LD_INT 6
20972: DOUBLE
20973: EQUAL
20974: IFTRUE 20978
20976: GO 21110
20978: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: LD_INT 4
20989: PUSH
20990: LD_INT 5
20992: PUSH
20993: LD_INT 6
20995: PUSH
20996: LD_INT 8
20998: PUSH
20999: LD_INT 11
21001: PUSH
21002: LD_INT 12
21004: PUSH
21005: LD_INT 15
21007: PUSH
21008: LD_INT 16
21010: PUSH
21011: LD_INT 20
21013: PUSH
21014: LD_INT 21
21016: PUSH
21017: LD_INT 22
21019: PUSH
21020: LD_INT 23
21022: PUSH
21023: LD_INT 25
21025: PUSH
21026: LD_INT 26
21028: PUSH
21029: LD_INT 30
21031: PUSH
21032: LD_INT 31
21034: PUSH
21035: LD_INT 32
21037: PUSH
21038: LD_INT 36
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 101
21064: PUSH
21065: LD_INT 102
21067: PUSH
21068: LD_INT 105
21070: PUSH
21071: LD_INT 106
21073: PUSH
21074: LD_INT 108
21076: PUSH
21077: LD_INT 109
21079: PUSH
21080: LD_INT 112
21082: PUSH
21083: LD_INT 116
21085: PUSH
21086: LD_INT 117
21088: PUSH
21089: LD_INT 118
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: ST_TO_ADDR
21108: GO 23631
21110: LD_INT 7
21112: DOUBLE
21113: EQUAL
21114: IFTRUE 21118
21116: GO 21230
21118: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21119: LD_ADDR_VAR 0 2
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: LD_INT 4
21129: PUSH
21130: LD_INT 5
21132: PUSH
21133: LD_INT 7
21135: PUSH
21136: LD_INT 11
21138: PUSH
21139: LD_INT 12
21141: PUSH
21142: LD_INT 15
21144: PUSH
21145: LD_INT 16
21147: PUSH
21148: LD_INT 20
21150: PUSH
21151: LD_INT 21
21153: PUSH
21154: LD_INT 22
21156: PUSH
21157: LD_INT 23
21159: PUSH
21160: LD_INT 25
21162: PUSH
21163: LD_INT 26
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 101
21184: PUSH
21185: LD_INT 102
21187: PUSH
21188: LD_INT 103
21190: PUSH
21191: LD_INT 105
21193: PUSH
21194: LD_INT 106
21196: PUSH
21197: LD_INT 108
21199: PUSH
21200: LD_INT 112
21202: PUSH
21203: LD_INT 116
21205: PUSH
21206: LD_INT 117
21208: PUSH
21209: LD_INT 118
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: ST_TO_ADDR
21228: GO 23631
21230: LD_INT 8
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21378
21238: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 4
21249: PUSH
21250: LD_INT 5
21252: PUSH
21253: LD_INT 6
21255: PUSH
21256: LD_INT 7
21258: PUSH
21259: LD_INT 8
21261: PUSH
21262: LD_INT 11
21264: PUSH
21265: LD_INT 12
21267: PUSH
21268: LD_INT 15
21270: PUSH
21271: LD_INT 16
21273: PUSH
21274: LD_INT 20
21276: PUSH
21277: LD_INT 21
21279: PUSH
21280: LD_INT 22
21282: PUSH
21283: LD_INT 23
21285: PUSH
21286: LD_INT 25
21288: PUSH
21289: LD_INT 26
21291: PUSH
21292: LD_INT 30
21294: PUSH
21295: LD_INT 31
21297: PUSH
21298: LD_INT 32
21300: PUSH
21301: LD_INT 36
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 101
21328: PUSH
21329: LD_INT 102
21331: PUSH
21332: LD_INT 103
21334: PUSH
21335: LD_INT 105
21337: PUSH
21338: LD_INT 106
21340: PUSH
21341: LD_INT 108
21343: PUSH
21344: LD_INT 109
21346: PUSH
21347: LD_INT 112
21349: PUSH
21350: LD_INT 116
21352: PUSH
21353: LD_INT 117
21355: PUSH
21356: LD_INT 118
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: ST_TO_ADDR
21376: GO 23631
21378: LD_INT 9
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 21534
21386: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21387: LD_ADDR_VAR 0 2
21391: PUSH
21392: LD_INT 2
21394: PUSH
21395: LD_INT 4
21397: PUSH
21398: LD_INT 5
21400: PUSH
21401: LD_INT 6
21403: PUSH
21404: LD_INT 7
21406: PUSH
21407: LD_INT 8
21409: PUSH
21410: LD_INT 11
21412: PUSH
21413: LD_INT 12
21415: PUSH
21416: LD_INT 15
21418: PUSH
21419: LD_INT 16
21421: PUSH
21422: LD_INT 20
21424: PUSH
21425: LD_INT 21
21427: PUSH
21428: LD_INT 22
21430: PUSH
21431: LD_INT 23
21433: PUSH
21434: LD_INT 25
21436: PUSH
21437: LD_INT 26
21439: PUSH
21440: LD_INT 28
21442: PUSH
21443: LD_INT 30
21445: PUSH
21446: LD_INT 31
21448: PUSH
21449: LD_INT 32
21451: PUSH
21452: LD_INT 36
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 101
21480: PUSH
21481: LD_INT 102
21483: PUSH
21484: LD_INT 103
21486: PUSH
21487: LD_INT 105
21489: PUSH
21490: LD_INT 106
21492: PUSH
21493: LD_INT 108
21495: PUSH
21496: LD_INT 109
21498: PUSH
21499: LD_INT 112
21501: PUSH
21502: LD_INT 114
21504: PUSH
21505: LD_INT 116
21507: PUSH
21508: LD_INT 117
21510: PUSH
21511: LD_INT 118
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: ST_TO_ADDR
21532: GO 23631
21534: LD_INT 10
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 21738
21542: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21543: LD_ADDR_VAR 0 2
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: LD_INT 4
21553: PUSH
21554: LD_INT 5
21556: PUSH
21557: LD_INT 6
21559: PUSH
21560: LD_INT 7
21562: PUSH
21563: LD_INT 8
21565: PUSH
21566: LD_INT 9
21568: PUSH
21569: LD_INT 10
21571: PUSH
21572: LD_INT 11
21574: PUSH
21575: LD_INT 12
21577: PUSH
21578: LD_INT 13
21580: PUSH
21581: LD_INT 14
21583: PUSH
21584: LD_INT 15
21586: PUSH
21587: LD_INT 16
21589: PUSH
21590: LD_INT 17
21592: PUSH
21593: LD_INT 18
21595: PUSH
21596: LD_INT 19
21598: PUSH
21599: LD_INT 20
21601: PUSH
21602: LD_INT 21
21604: PUSH
21605: LD_INT 22
21607: PUSH
21608: LD_INT 23
21610: PUSH
21611: LD_INT 24
21613: PUSH
21614: LD_INT 25
21616: PUSH
21617: LD_INT 26
21619: PUSH
21620: LD_INT 28
21622: PUSH
21623: LD_INT 30
21625: PUSH
21626: LD_INT 31
21628: PUSH
21629: LD_INT 32
21631: PUSH
21632: LD_INT 36
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 101
21668: PUSH
21669: LD_INT 102
21671: PUSH
21672: LD_INT 103
21674: PUSH
21675: LD_INT 104
21677: PUSH
21678: LD_INT 105
21680: PUSH
21681: LD_INT 106
21683: PUSH
21684: LD_INT 107
21686: PUSH
21687: LD_INT 108
21689: PUSH
21690: LD_INT 109
21692: PUSH
21693: LD_INT 110
21695: PUSH
21696: LD_INT 111
21698: PUSH
21699: LD_INT 112
21701: PUSH
21702: LD_INT 114
21704: PUSH
21705: LD_INT 116
21707: PUSH
21708: LD_INT 117
21710: PUSH
21711: LD_INT 118
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: ST_TO_ADDR
21736: GO 23631
21738: LD_INT 11
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21950
21746: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21747: LD_ADDR_VAR 0 2
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: LD_INT 3
21757: PUSH
21758: LD_INT 4
21760: PUSH
21761: LD_INT 5
21763: PUSH
21764: LD_INT 6
21766: PUSH
21767: LD_INT 7
21769: PUSH
21770: LD_INT 8
21772: PUSH
21773: LD_INT 9
21775: PUSH
21776: LD_INT 10
21778: PUSH
21779: LD_INT 11
21781: PUSH
21782: LD_INT 12
21784: PUSH
21785: LD_INT 13
21787: PUSH
21788: LD_INT 14
21790: PUSH
21791: LD_INT 15
21793: PUSH
21794: LD_INT 16
21796: PUSH
21797: LD_INT 17
21799: PUSH
21800: LD_INT 18
21802: PUSH
21803: LD_INT 19
21805: PUSH
21806: LD_INT 20
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_INT 23
21817: PUSH
21818: LD_INT 24
21820: PUSH
21821: LD_INT 25
21823: PUSH
21824: LD_INT 26
21826: PUSH
21827: LD_INT 28
21829: PUSH
21830: LD_INT 30
21832: PUSH
21833: LD_INT 31
21835: PUSH
21836: LD_INT 32
21838: PUSH
21839: LD_INT 34
21841: PUSH
21842: LD_INT 36
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 101
21880: PUSH
21881: LD_INT 102
21883: PUSH
21884: LD_INT 103
21886: PUSH
21887: LD_INT 104
21889: PUSH
21890: LD_INT 105
21892: PUSH
21893: LD_INT 106
21895: PUSH
21896: LD_INT 107
21898: PUSH
21899: LD_INT 108
21901: PUSH
21902: LD_INT 109
21904: PUSH
21905: LD_INT 110
21907: PUSH
21908: LD_INT 111
21910: PUSH
21911: LD_INT 112
21913: PUSH
21914: LD_INT 114
21916: PUSH
21917: LD_INT 116
21919: PUSH
21920: LD_INT 117
21922: PUSH
21923: LD_INT 118
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: ST_TO_ADDR
21948: GO 23631
21950: LD_INT 12
21952: DOUBLE
21953: EQUAL
21954: IFTRUE 21958
21956: GO 22178
21958: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21959: LD_ADDR_VAR 0 2
21963: PUSH
21964: LD_INT 1
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: LD_INT 3
21972: PUSH
21973: LD_INT 4
21975: PUSH
21976: LD_INT 5
21978: PUSH
21979: LD_INT 6
21981: PUSH
21982: LD_INT 7
21984: PUSH
21985: LD_INT 8
21987: PUSH
21988: LD_INT 9
21990: PUSH
21991: LD_INT 10
21993: PUSH
21994: LD_INT 11
21996: PUSH
21997: LD_INT 12
21999: PUSH
22000: LD_INT 13
22002: PUSH
22003: LD_INT 14
22005: PUSH
22006: LD_INT 15
22008: PUSH
22009: LD_INT 16
22011: PUSH
22012: LD_INT 17
22014: PUSH
22015: LD_INT 18
22017: PUSH
22018: LD_INT 19
22020: PUSH
22021: LD_INT 20
22023: PUSH
22024: LD_INT 21
22026: PUSH
22027: LD_INT 22
22029: PUSH
22030: LD_INT 23
22032: PUSH
22033: LD_INT 24
22035: PUSH
22036: LD_INT 25
22038: PUSH
22039: LD_INT 26
22041: PUSH
22042: LD_INT 27
22044: PUSH
22045: LD_INT 28
22047: PUSH
22048: LD_INT 30
22050: PUSH
22051: LD_INT 31
22053: PUSH
22054: LD_INT 32
22056: PUSH
22057: LD_INT 33
22059: PUSH
22060: LD_INT 34
22062: PUSH
22063: LD_INT 36
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 101
22104: PUSH
22105: LD_INT 102
22107: PUSH
22108: LD_INT 103
22110: PUSH
22111: LD_INT 104
22113: PUSH
22114: LD_INT 105
22116: PUSH
22117: LD_INT 106
22119: PUSH
22120: LD_INT 107
22122: PUSH
22123: LD_INT 108
22125: PUSH
22126: LD_INT 109
22128: PUSH
22129: LD_INT 110
22131: PUSH
22132: LD_INT 111
22134: PUSH
22135: LD_INT 112
22137: PUSH
22138: LD_INT 113
22140: PUSH
22141: LD_INT 114
22143: PUSH
22144: LD_INT 116
22146: PUSH
22147: LD_INT 117
22149: PUSH
22150: LD_INT 118
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: ST_TO_ADDR
22176: GO 23631
22178: LD_INT 13
22180: DOUBLE
22181: EQUAL
22182: IFTRUE 22186
22184: GO 22394
22186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22187: LD_ADDR_VAR 0 2
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: LD_INT 2
22197: PUSH
22198: LD_INT 3
22200: PUSH
22201: LD_INT 4
22203: PUSH
22204: LD_INT 5
22206: PUSH
22207: LD_INT 8
22209: PUSH
22210: LD_INT 9
22212: PUSH
22213: LD_INT 10
22215: PUSH
22216: LD_INT 11
22218: PUSH
22219: LD_INT 12
22221: PUSH
22222: LD_INT 14
22224: PUSH
22225: LD_INT 15
22227: PUSH
22228: LD_INT 16
22230: PUSH
22231: LD_INT 17
22233: PUSH
22234: LD_INT 18
22236: PUSH
22237: LD_INT 19
22239: PUSH
22240: LD_INT 20
22242: PUSH
22243: LD_INT 21
22245: PUSH
22246: LD_INT 22
22248: PUSH
22249: LD_INT 23
22251: PUSH
22252: LD_INT 24
22254: PUSH
22255: LD_INT 25
22257: PUSH
22258: LD_INT 26
22260: PUSH
22261: LD_INT 27
22263: PUSH
22264: LD_INT 28
22266: PUSH
22267: LD_INT 30
22269: PUSH
22270: LD_INT 31
22272: PUSH
22273: LD_INT 32
22275: PUSH
22276: LD_INT 33
22278: PUSH
22279: LD_INT 34
22281: PUSH
22282: LD_INT 36
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 101
22320: PUSH
22321: LD_INT 102
22323: PUSH
22324: LD_INT 103
22326: PUSH
22327: LD_INT 104
22329: PUSH
22330: LD_INT 105
22332: PUSH
22333: LD_INT 106
22335: PUSH
22336: LD_INT 107
22338: PUSH
22339: LD_INT 108
22341: PUSH
22342: LD_INT 109
22344: PUSH
22345: LD_INT 110
22347: PUSH
22348: LD_INT 111
22350: PUSH
22351: LD_INT 112
22353: PUSH
22354: LD_INT 113
22356: PUSH
22357: LD_INT 114
22359: PUSH
22360: LD_INT 116
22362: PUSH
22363: LD_INT 117
22365: PUSH
22366: LD_INT 118
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: ST_TO_ADDR
22392: GO 23631
22394: LD_INT 14
22396: DOUBLE
22397: EQUAL
22398: IFTRUE 22402
22400: GO 22626
22402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22403: LD_ADDR_VAR 0 2
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: LD_INT 3
22416: PUSH
22417: LD_INT 4
22419: PUSH
22420: LD_INT 5
22422: PUSH
22423: LD_INT 6
22425: PUSH
22426: LD_INT 7
22428: PUSH
22429: LD_INT 8
22431: PUSH
22432: LD_INT 9
22434: PUSH
22435: LD_INT 10
22437: PUSH
22438: LD_INT 11
22440: PUSH
22441: LD_INT 12
22443: PUSH
22444: LD_INT 13
22446: PUSH
22447: LD_INT 14
22449: PUSH
22450: LD_INT 15
22452: PUSH
22453: LD_INT 16
22455: PUSH
22456: LD_INT 17
22458: PUSH
22459: LD_INT 18
22461: PUSH
22462: LD_INT 19
22464: PUSH
22465: LD_INT 20
22467: PUSH
22468: LD_INT 21
22470: PUSH
22471: LD_INT 22
22473: PUSH
22474: LD_INT 23
22476: PUSH
22477: LD_INT 24
22479: PUSH
22480: LD_INT 25
22482: PUSH
22483: LD_INT 26
22485: PUSH
22486: LD_INT 27
22488: PUSH
22489: LD_INT 28
22491: PUSH
22492: LD_INT 29
22494: PUSH
22495: LD_INT 30
22497: PUSH
22498: LD_INT 31
22500: PUSH
22501: LD_INT 32
22503: PUSH
22504: LD_INT 33
22506: PUSH
22507: LD_INT 34
22509: PUSH
22510: LD_INT 36
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 101
22552: PUSH
22553: LD_INT 102
22555: PUSH
22556: LD_INT 103
22558: PUSH
22559: LD_INT 104
22561: PUSH
22562: LD_INT 105
22564: PUSH
22565: LD_INT 106
22567: PUSH
22568: LD_INT 107
22570: PUSH
22571: LD_INT 108
22573: PUSH
22574: LD_INT 109
22576: PUSH
22577: LD_INT 110
22579: PUSH
22580: LD_INT 111
22582: PUSH
22583: LD_INT 112
22585: PUSH
22586: LD_INT 113
22588: PUSH
22589: LD_INT 114
22591: PUSH
22592: LD_INT 116
22594: PUSH
22595: LD_INT 117
22597: PUSH
22598: LD_INT 118
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: ST_TO_ADDR
22624: GO 23631
22626: LD_INT 15
22628: DOUBLE
22629: EQUAL
22630: IFTRUE 22634
22632: GO 22858
22634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22635: LD_ADDR_VAR 0 2
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 3
22648: PUSH
22649: LD_INT 4
22651: PUSH
22652: LD_INT 5
22654: PUSH
22655: LD_INT 6
22657: PUSH
22658: LD_INT 7
22660: PUSH
22661: LD_INT 8
22663: PUSH
22664: LD_INT 9
22666: PUSH
22667: LD_INT 10
22669: PUSH
22670: LD_INT 11
22672: PUSH
22673: LD_INT 12
22675: PUSH
22676: LD_INT 13
22678: PUSH
22679: LD_INT 14
22681: PUSH
22682: LD_INT 15
22684: PUSH
22685: LD_INT 16
22687: PUSH
22688: LD_INT 17
22690: PUSH
22691: LD_INT 18
22693: PUSH
22694: LD_INT 19
22696: PUSH
22697: LD_INT 20
22699: PUSH
22700: LD_INT 21
22702: PUSH
22703: LD_INT 22
22705: PUSH
22706: LD_INT 23
22708: PUSH
22709: LD_INT 24
22711: PUSH
22712: LD_INT 25
22714: PUSH
22715: LD_INT 26
22717: PUSH
22718: LD_INT 27
22720: PUSH
22721: LD_INT 28
22723: PUSH
22724: LD_INT 29
22726: PUSH
22727: LD_INT 30
22729: PUSH
22730: LD_INT 31
22732: PUSH
22733: LD_INT 32
22735: PUSH
22736: LD_INT 33
22738: PUSH
22739: LD_INT 34
22741: PUSH
22742: LD_INT 36
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 101
22784: PUSH
22785: LD_INT 102
22787: PUSH
22788: LD_INT 103
22790: PUSH
22791: LD_INT 104
22793: PUSH
22794: LD_INT 105
22796: PUSH
22797: LD_INT 106
22799: PUSH
22800: LD_INT 107
22802: PUSH
22803: LD_INT 108
22805: PUSH
22806: LD_INT 109
22808: PUSH
22809: LD_INT 110
22811: PUSH
22812: LD_INT 111
22814: PUSH
22815: LD_INT 112
22817: PUSH
22818: LD_INT 113
22820: PUSH
22821: LD_INT 114
22823: PUSH
22824: LD_INT 116
22826: PUSH
22827: LD_INT 117
22829: PUSH
22830: LD_INT 118
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: ST_TO_ADDR
22856: GO 23631
22858: LD_INT 16
22860: DOUBLE
22861: EQUAL
22862: IFTRUE 22866
22864: GO 23002
22866: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22867: LD_ADDR_VAR 0 2
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: LD_INT 4
22877: PUSH
22878: LD_INT 5
22880: PUSH
22881: LD_INT 7
22883: PUSH
22884: LD_INT 11
22886: PUSH
22887: LD_INT 12
22889: PUSH
22890: LD_INT 15
22892: PUSH
22893: LD_INT 16
22895: PUSH
22896: LD_INT 20
22898: PUSH
22899: LD_INT 21
22901: PUSH
22902: LD_INT 22
22904: PUSH
22905: LD_INT 23
22907: PUSH
22908: LD_INT 25
22910: PUSH
22911: LD_INT 26
22913: PUSH
22914: LD_INT 30
22916: PUSH
22917: LD_INT 31
22919: PUSH
22920: LD_INT 32
22922: PUSH
22923: LD_INT 33
22925: PUSH
22926: LD_INT 34
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 101
22952: PUSH
22953: LD_INT 102
22955: PUSH
22956: LD_INT 103
22958: PUSH
22959: LD_INT 106
22961: PUSH
22962: LD_INT 108
22964: PUSH
22965: LD_INT 112
22967: PUSH
22968: LD_INT 113
22970: PUSH
22971: LD_INT 114
22973: PUSH
22974: LD_INT 116
22976: PUSH
22977: LD_INT 117
22979: PUSH
22980: LD_INT 118
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: ST_TO_ADDR
23000: GO 23631
23002: LD_INT 17
23004: DOUBLE
23005: EQUAL
23006: IFTRUE 23010
23008: GO 23234
23010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23011: LD_ADDR_VAR 0 2
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: LD_INT 5
23030: PUSH
23031: LD_INT 6
23033: PUSH
23034: LD_INT 7
23036: PUSH
23037: LD_INT 8
23039: PUSH
23040: LD_INT 9
23042: PUSH
23043: LD_INT 10
23045: PUSH
23046: LD_INT 11
23048: PUSH
23049: LD_INT 12
23051: PUSH
23052: LD_INT 13
23054: PUSH
23055: LD_INT 14
23057: PUSH
23058: LD_INT 15
23060: PUSH
23061: LD_INT 16
23063: PUSH
23064: LD_INT 17
23066: PUSH
23067: LD_INT 18
23069: PUSH
23070: LD_INT 19
23072: PUSH
23073: LD_INT 20
23075: PUSH
23076: LD_INT 21
23078: PUSH
23079: LD_INT 22
23081: PUSH
23082: LD_INT 23
23084: PUSH
23085: LD_INT 24
23087: PUSH
23088: LD_INT 25
23090: PUSH
23091: LD_INT 26
23093: PUSH
23094: LD_INT 27
23096: PUSH
23097: LD_INT 28
23099: PUSH
23100: LD_INT 29
23102: PUSH
23103: LD_INT 30
23105: PUSH
23106: LD_INT 31
23108: PUSH
23109: LD_INT 32
23111: PUSH
23112: LD_INT 33
23114: PUSH
23115: LD_INT 34
23117: PUSH
23118: LD_INT 36
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 101
23160: PUSH
23161: LD_INT 102
23163: PUSH
23164: LD_INT 103
23166: PUSH
23167: LD_INT 104
23169: PUSH
23170: LD_INT 105
23172: PUSH
23173: LD_INT 106
23175: PUSH
23176: LD_INT 107
23178: PUSH
23179: LD_INT 108
23181: PUSH
23182: LD_INT 109
23184: PUSH
23185: LD_INT 110
23187: PUSH
23188: LD_INT 111
23190: PUSH
23191: LD_INT 112
23193: PUSH
23194: LD_INT 113
23196: PUSH
23197: LD_INT 114
23199: PUSH
23200: LD_INT 116
23202: PUSH
23203: LD_INT 117
23205: PUSH
23206: LD_INT 118
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: ST_TO_ADDR
23232: GO 23631
23234: LD_INT 18
23236: DOUBLE
23237: EQUAL
23238: IFTRUE 23242
23240: GO 23390
23242: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23243: LD_ADDR_VAR 0 2
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 4
23253: PUSH
23254: LD_INT 5
23256: PUSH
23257: LD_INT 7
23259: PUSH
23260: LD_INT 11
23262: PUSH
23263: LD_INT 12
23265: PUSH
23266: LD_INT 15
23268: PUSH
23269: LD_INT 16
23271: PUSH
23272: LD_INT 20
23274: PUSH
23275: LD_INT 21
23277: PUSH
23278: LD_INT 22
23280: PUSH
23281: LD_INT 23
23283: PUSH
23284: LD_INT 25
23286: PUSH
23287: LD_INT 26
23289: PUSH
23290: LD_INT 30
23292: PUSH
23293: LD_INT 31
23295: PUSH
23296: LD_INT 32
23298: PUSH
23299: LD_INT 33
23301: PUSH
23302: LD_INT 34
23304: PUSH
23305: LD_INT 35
23307: PUSH
23308: LD_INT 36
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 101
23336: PUSH
23337: LD_INT 102
23339: PUSH
23340: LD_INT 103
23342: PUSH
23343: LD_INT 106
23345: PUSH
23346: LD_INT 108
23348: PUSH
23349: LD_INT 112
23351: PUSH
23352: LD_INT 113
23354: PUSH
23355: LD_INT 114
23357: PUSH
23358: LD_INT 115
23360: PUSH
23361: LD_INT 116
23363: PUSH
23364: LD_INT 117
23366: PUSH
23367: LD_INT 118
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: ST_TO_ADDR
23388: GO 23631
23390: LD_INT 19
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 23630
23398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23399: LD_ADDR_VAR 0 2
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: LD_INT 3
23412: PUSH
23413: LD_INT 4
23415: PUSH
23416: LD_INT 5
23418: PUSH
23419: LD_INT 6
23421: PUSH
23422: LD_INT 7
23424: PUSH
23425: LD_INT 8
23427: PUSH
23428: LD_INT 9
23430: PUSH
23431: LD_INT 10
23433: PUSH
23434: LD_INT 11
23436: PUSH
23437: LD_INT 12
23439: PUSH
23440: LD_INT 13
23442: PUSH
23443: LD_INT 14
23445: PUSH
23446: LD_INT 15
23448: PUSH
23449: LD_INT 16
23451: PUSH
23452: LD_INT 17
23454: PUSH
23455: LD_INT 18
23457: PUSH
23458: LD_INT 19
23460: PUSH
23461: LD_INT 20
23463: PUSH
23464: LD_INT 21
23466: PUSH
23467: LD_INT 22
23469: PUSH
23470: LD_INT 23
23472: PUSH
23473: LD_INT 24
23475: PUSH
23476: LD_INT 25
23478: PUSH
23479: LD_INT 26
23481: PUSH
23482: LD_INT 27
23484: PUSH
23485: LD_INT 28
23487: PUSH
23488: LD_INT 29
23490: PUSH
23491: LD_INT 30
23493: PUSH
23494: LD_INT 31
23496: PUSH
23497: LD_INT 32
23499: PUSH
23500: LD_INT 33
23502: PUSH
23503: LD_INT 34
23505: PUSH
23506: LD_INT 35
23508: PUSH
23509: LD_INT 36
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 101
23552: PUSH
23553: LD_INT 102
23555: PUSH
23556: LD_INT 103
23558: PUSH
23559: LD_INT 104
23561: PUSH
23562: LD_INT 105
23564: PUSH
23565: LD_INT 106
23567: PUSH
23568: LD_INT 107
23570: PUSH
23571: LD_INT 108
23573: PUSH
23574: LD_INT 109
23576: PUSH
23577: LD_INT 110
23579: PUSH
23580: LD_INT 111
23582: PUSH
23583: LD_INT 112
23585: PUSH
23586: LD_INT 113
23588: PUSH
23589: LD_INT 114
23591: PUSH
23592: LD_INT 115
23594: PUSH
23595: LD_INT 116
23597: PUSH
23598: LD_INT 117
23600: PUSH
23601: LD_INT 118
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: ST_TO_ADDR
23628: GO 23631
23630: POP
// end else
23631: GO 23862
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23633: LD_ADDR_VAR 0 2
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: LD_INT 3
23646: PUSH
23647: LD_INT 4
23649: PUSH
23650: LD_INT 5
23652: PUSH
23653: LD_INT 6
23655: PUSH
23656: LD_INT 7
23658: PUSH
23659: LD_INT 8
23661: PUSH
23662: LD_INT 9
23664: PUSH
23665: LD_INT 10
23667: PUSH
23668: LD_INT 11
23670: PUSH
23671: LD_INT 12
23673: PUSH
23674: LD_INT 13
23676: PUSH
23677: LD_INT 14
23679: PUSH
23680: LD_INT 15
23682: PUSH
23683: LD_INT 16
23685: PUSH
23686: LD_INT 17
23688: PUSH
23689: LD_INT 18
23691: PUSH
23692: LD_INT 19
23694: PUSH
23695: LD_INT 20
23697: PUSH
23698: LD_INT 21
23700: PUSH
23701: LD_INT 22
23703: PUSH
23704: LD_INT 23
23706: PUSH
23707: LD_INT 24
23709: PUSH
23710: LD_INT 25
23712: PUSH
23713: LD_INT 26
23715: PUSH
23716: LD_INT 27
23718: PUSH
23719: LD_INT 28
23721: PUSH
23722: LD_INT 29
23724: PUSH
23725: LD_INT 30
23727: PUSH
23728: LD_INT 31
23730: PUSH
23731: LD_INT 32
23733: PUSH
23734: LD_INT 33
23736: PUSH
23737: LD_INT 34
23739: PUSH
23740: LD_INT 35
23742: PUSH
23743: LD_INT 36
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 101
23786: PUSH
23787: LD_INT 102
23789: PUSH
23790: LD_INT 103
23792: PUSH
23793: LD_INT 104
23795: PUSH
23796: LD_INT 105
23798: PUSH
23799: LD_INT 106
23801: PUSH
23802: LD_INT 107
23804: PUSH
23805: LD_INT 108
23807: PUSH
23808: LD_INT 109
23810: PUSH
23811: LD_INT 110
23813: PUSH
23814: LD_INT 111
23816: PUSH
23817: LD_INT 112
23819: PUSH
23820: LD_INT 113
23822: PUSH
23823: LD_INT 114
23825: PUSH
23826: LD_INT 115
23828: PUSH
23829: LD_INT 116
23831: PUSH
23832: LD_INT 117
23834: PUSH
23835: LD_INT 118
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: ST_TO_ADDR
// if result then
23862: LD_VAR 0 2
23866: IFFALSE 24652
// begin normal :=  ;
23868: LD_ADDR_VAR 0 5
23872: PUSH
23873: LD_STRING 
23875: ST_TO_ADDR
// hardcore :=  ;
23876: LD_ADDR_VAR 0 6
23880: PUSH
23881: LD_STRING 
23883: ST_TO_ADDR
// active :=  ;
23884: LD_ADDR_VAR 0 7
23888: PUSH
23889: LD_STRING 
23891: ST_TO_ADDR
// for i = 1 to normalCounter do
23892: LD_ADDR_VAR 0 8
23896: PUSH
23897: DOUBLE
23898: LD_INT 1
23900: DEC
23901: ST_TO_ADDR
23902: LD_EXP 68
23906: PUSH
23907: FOR_TO
23908: IFFALSE 24009
// begin tmp := 0 ;
23910: LD_ADDR_VAR 0 3
23914: PUSH
23915: LD_STRING 0
23917: ST_TO_ADDR
// if result [ 1 ] then
23918: LD_VAR 0 2
23922: PUSH
23923: LD_INT 1
23925: ARRAY
23926: IFFALSE 23991
// if result [ 1 ] [ 1 ] = i then
23928: LD_VAR 0 2
23932: PUSH
23933: LD_INT 1
23935: ARRAY
23936: PUSH
23937: LD_INT 1
23939: ARRAY
23940: PUSH
23941: LD_VAR 0 8
23945: EQUAL
23946: IFFALSE 23991
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23948: LD_ADDR_VAR 0 2
23952: PUSH
23953: LD_VAR 0 2
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: LD_VAR 0 2
23965: PUSH
23966: LD_INT 1
23968: ARRAY
23969: PPUSH
23970: LD_INT 1
23972: PPUSH
23973: CALL_OW 3
23977: PPUSH
23978: CALL_OW 1
23982: ST_TO_ADDR
// tmp := 1 ;
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_STRING 1
23990: ST_TO_ADDR
// end ; normal := normal & tmp ;
23991: LD_ADDR_VAR 0 5
23995: PUSH
23996: LD_VAR 0 5
24000: PUSH
24001: LD_VAR 0 3
24005: STR
24006: ST_TO_ADDR
// end ;
24007: GO 23907
24009: POP
24010: POP
// for i = 1 to hardcoreCounter do
24011: LD_ADDR_VAR 0 8
24015: PUSH
24016: DOUBLE
24017: LD_INT 1
24019: DEC
24020: ST_TO_ADDR
24021: LD_EXP 69
24025: PUSH
24026: FOR_TO
24027: IFFALSE 24132
// begin tmp := 0 ;
24029: LD_ADDR_VAR 0 3
24033: PUSH
24034: LD_STRING 0
24036: ST_TO_ADDR
// if result [ 2 ] then
24037: LD_VAR 0 2
24041: PUSH
24042: LD_INT 2
24044: ARRAY
24045: IFFALSE 24114
// if result [ 2 ] [ 1 ] = 100 + i then
24047: LD_VAR 0 2
24051: PUSH
24052: LD_INT 2
24054: ARRAY
24055: PUSH
24056: LD_INT 1
24058: ARRAY
24059: PUSH
24060: LD_INT 100
24062: PUSH
24063: LD_VAR 0 8
24067: PLUS
24068: EQUAL
24069: IFFALSE 24114
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24071: LD_ADDR_VAR 0 2
24075: PUSH
24076: LD_VAR 0 2
24080: PPUSH
24081: LD_INT 2
24083: PPUSH
24084: LD_VAR 0 2
24088: PUSH
24089: LD_INT 2
24091: ARRAY
24092: PPUSH
24093: LD_INT 1
24095: PPUSH
24096: CALL_OW 3
24100: PPUSH
24101: CALL_OW 1
24105: ST_TO_ADDR
// tmp := 1 ;
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: LD_STRING 1
24113: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24114: LD_ADDR_VAR 0 6
24118: PUSH
24119: LD_VAR 0 6
24123: PUSH
24124: LD_VAR 0 3
24128: STR
24129: ST_TO_ADDR
// end ;
24130: GO 24026
24132: POP
24133: POP
// if isGameLoad then
24134: LD_VAR 0 1
24138: IFFALSE 24613
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24140: LD_ADDR_VAR 0 4
24144: PUSH
24145: LD_EXP 72
24149: PUSH
24150: LD_EXP 71
24154: PUSH
24155: LD_EXP 73
24159: PUSH
24160: LD_EXP 70
24164: PUSH
24165: LD_EXP 74
24169: PUSH
24170: LD_EXP 75
24174: PUSH
24175: LD_EXP 76
24179: PUSH
24180: LD_EXP 77
24184: PUSH
24185: LD_EXP 78
24189: PUSH
24190: LD_EXP 79
24194: PUSH
24195: LD_EXP 80
24199: PUSH
24200: LD_EXP 81
24204: PUSH
24205: LD_EXP 82
24209: PUSH
24210: LD_EXP 83
24214: PUSH
24215: LD_EXP 91
24219: PUSH
24220: LD_EXP 92
24224: PUSH
24225: LD_EXP 93
24229: PUSH
24230: LD_EXP 94
24234: PUSH
24235: LD_EXP 96
24239: PUSH
24240: LD_EXP 97
24244: PUSH
24245: LD_EXP 98
24249: PUSH
24250: LD_EXP 101
24254: PUSH
24255: LD_EXP 103
24259: PUSH
24260: LD_EXP 104
24264: PUSH
24265: LD_EXP 105
24269: PUSH
24270: LD_EXP 107
24274: PUSH
24275: LD_EXP 108
24279: PUSH
24280: LD_EXP 111
24284: PUSH
24285: LD_EXP 112
24289: PUSH
24290: LD_EXP 113
24294: PUSH
24295: LD_EXP 114
24299: PUSH
24300: LD_EXP 115
24304: PUSH
24305: LD_EXP 116
24309: PUSH
24310: LD_EXP 117
24314: PUSH
24315: LD_EXP 118
24319: PUSH
24320: LD_EXP 119
24324: PUSH
24325: LD_EXP 84
24329: PUSH
24330: LD_EXP 85
24334: PUSH
24335: LD_EXP 88
24339: PUSH
24340: LD_EXP 89
24344: PUSH
24345: LD_EXP 90
24349: PUSH
24350: LD_EXP 86
24354: PUSH
24355: LD_EXP 87
24359: PUSH
24360: LD_EXP 95
24364: PUSH
24365: LD_EXP 99
24369: PUSH
24370: LD_EXP 100
24374: PUSH
24375: LD_EXP 102
24379: PUSH
24380: LD_EXP 106
24384: PUSH
24385: LD_EXP 109
24389: PUSH
24390: LD_EXP 110
24394: PUSH
24395: LD_EXP 120
24399: PUSH
24400: LD_EXP 121
24404: PUSH
24405: LD_EXP 122
24409: PUSH
24410: LD_EXP 123
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: ST_TO_ADDR
// tmp :=  ;
24471: LD_ADDR_VAR 0 3
24475: PUSH
24476: LD_STRING 
24478: ST_TO_ADDR
// for i = 1 to normalCounter do
24479: LD_ADDR_VAR 0 8
24483: PUSH
24484: DOUBLE
24485: LD_INT 1
24487: DEC
24488: ST_TO_ADDR
24489: LD_EXP 68
24493: PUSH
24494: FOR_TO
24495: IFFALSE 24531
// begin if flags [ i ] then
24497: LD_VAR 0 4
24501: PUSH
24502: LD_VAR 0 8
24506: ARRAY
24507: IFFALSE 24529
// tmp := tmp & i & ; ;
24509: LD_ADDR_VAR 0 3
24513: PUSH
24514: LD_VAR 0 3
24518: PUSH
24519: LD_VAR 0 8
24523: STR
24524: PUSH
24525: LD_STRING ;
24527: STR
24528: ST_TO_ADDR
// end ;
24529: GO 24494
24531: POP
24532: POP
// for i = 1 to hardcoreCounter do
24533: LD_ADDR_VAR 0 8
24537: PUSH
24538: DOUBLE
24539: LD_INT 1
24541: DEC
24542: ST_TO_ADDR
24543: LD_EXP 69
24547: PUSH
24548: FOR_TO
24549: IFFALSE 24595
// begin if flags [ normalCounter + i ] then
24551: LD_VAR 0 4
24555: PUSH
24556: LD_EXP 68
24560: PUSH
24561: LD_VAR 0 8
24565: PLUS
24566: ARRAY
24567: IFFALSE 24593
// tmp := tmp & ( 100 + i ) & ; ;
24569: LD_ADDR_VAR 0 3
24573: PUSH
24574: LD_VAR 0 3
24578: PUSH
24579: LD_INT 100
24581: PUSH
24582: LD_VAR 0 8
24586: PLUS
24587: STR
24588: PUSH
24589: LD_STRING ;
24591: STR
24592: ST_TO_ADDR
// end ;
24593: GO 24548
24595: POP
24596: POP
// if tmp then
24597: LD_VAR 0 3
24601: IFFALSE 24613
// active := tmp ;
24603: LD_ADDR_VAR 0 7
24607: PUSH
24608: LD_VAR 0 3
24612: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24613: LD_STRING getStreamItemsFromMission("
24615: PUSH
24616: LD_VAR 0 5
24620: STR
24621: PUSH
24622: LD_STRING ","
24624: STR
24625: PUSH
24626: LD_VAR 0 6
24630: STR
24631: PUSH
24632: LD_STRING ","
24634: STR
24635: PUSH
24636: LD_VAR 0 7
24640: STR
24641: PUSH
24642: LD_STRING ")
24644: STR
24645: PPUSH
24646: CALL_OW 559
// end else
24650: GO 24659
// ToLua ( getStreamItemsFromMission("","","") ) ;
24652: LD_STRING getStreamItemsFromMission("","","")
24654: PPUSH
24655: CALL_OW 559
// end ;
24659: LD_VAR 0 2
24663: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24664: LD_EXP 67
24668: PUSH
24669: LD_EXP 72
24673: AND
24674: IFFALSE 24798
24676: GO 24678
24678: DISABLE
24679: LD_INT 0
24681: PPUSH
24682: PPUSH
// begin enable ;
24683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24684: LD_ADDR_VAR 0 2
24688: PUSH
24689: LD_INT 22
24691: PUSH
24692: LD_OWVAR 2
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 34
24706: PUSH
24707: LD_INT 7
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 34
24716: PUSH
24717: LD_INT 45
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 34
24726: PUSH
24727: LD_INT 28
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 34
24736: PUSH
24737: LD_INT 47
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PPUSH
24755: CALL_OW 69
24759: ST_TO_ADDR
// if not tmp then
24760: LD_VAR 0 2
24764: NOT
24765: IFFALSE 24769
// exit ;
24767: GO 24798
// for i in tmp do
24769: LD_ADDR_VAR 0 1
24773: PUSH
24774: LD_VAR 0 2
24778: PUSH
24779: FOR_IN
24780: IFFALSE 24796
// begin SetLives ( i , 0 ) ;
24782: LD_VAR 0 1
24786: PPUSH
24787: LD_INT 0
24789: PPUSH
24790: CALL_OW 234
// end ;
24794: GO 24779
24796: POP
24797: POP
// end ;
24798: PPOPN 2
24800: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24801: LD_EXP 67
24805: PUSH
24806: LD_EXP 73
24810: AND
24811: IFFALSE 24895
24813: GO 24815
24815: DISABLE
24816: LD_INT 0
24818: PPUSH
24819: PPUSH
// begin enable ;
24820: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24821: LD_ADDR_VAR 0 2
24825: PUSH
24826: LD_INT 22
24828: PUSH
24829: LD_OWVAR 2
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 32
24840: PUSH
24841: LD_INT 3
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PPUSH
24852: CALL_OW 69
24856: ST_TO_ADDR
// if not tmp then
24857: LD_VAR 0 2
24861: NOT
24862: IFFALSE 24866
// exit ;
24864: GO 24895
// for i in tmp do
24866: LD_ADDR_VAR 0 1
24870: PUSH
24871: LD_VAR 0 2
24875: PUSH
24876: FOR_IN
24877: IFFALSE 24893
// begin SetLives ( i , 0 ) ;
24879: LD_VAR 0 1
24883: PPUSH
24884: LD_INT 0
24886: PPUSH
24887: CALL_OW 234
// end ;
24891: GO 24876
24893: POP
24894: POP
// end ;
24895: PPOPN 2
24897: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24898: LD_EXP 67
24902: PUSH
24903: LD_EXP 70
24907: AND
24908: IFFALSE 25001
24910: GO 24912
24912: DISABLE
24913: LD_INT 0
24915: PPUSH
// begin enable ;
24916: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24917: LD_ADDR_VAR 0 1
24921: PUSH
24922: LD_INT 22
24924: PUSH
24925: LD_OWVAR 2
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 25
24939: PUSH
24940: LD_INT 5
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 25
24949: PUSH
24950: LD_INT 9
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 25
24959: PUSH
24960: LD_INT 8
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PPUSH
24977: CALL_OW 69
24981: PUSH
24982: FOR_IN
24983: IFFALSE 24999
// begin SetClass ( i , 1 ) ;
24985: LD_VAR 0 1
24989: PPUSH
24990: LD_INT 1
24992: PPUSH
24993: CALL_OW 336
// end ;
24997: GO 24982
24999: POP
25000: POP
// end ;
25001: PPOPN 1
25003: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25004: LD_EXP 67
25008: PUSH
25009: LD_EXP 71
25013: AND
25014: PUSH
25015: LD_OWVAR 65
25019: PUSH
25020: LD_INT 7
25022: LESS
25023: AND
25024: IFFALSE 25038
25026: GO 25028
25028: DISABLE
// begin enable ;
25029: ENABLE
// game_speed := 7 ;
25030: LD_ADDR_OWVAR 65
25034: PUSH
25035: LD_INT 7
25037: ST_TO_ADDR
// end ;
25038: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25039: LD_EXP 67
25043: PUSH
25044: LD_EXP 74
25048: AND
25049: IFFALSE 25251
25051: GO 25053
25053: DISABLE
25054: LD_INT 0
25056: PPUSH
25057: PPUSH
25058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25059: LD_ADDR_VAR 0 3
25063: PUSH
25064: LD_INT 81
25066: PUSH
25067: LD_OWVAR 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 21
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PPUSH
25090: CALL_OW 69
25094: ST_TO_ADDR
// if not tmp then
25095: LD_VAR 0 3
25099: NOT
25100: IFFALSE 25104
// exit ;
25102: GO 25251
// if tmp > 5 then
25104: LD_VAR 0 3
25108: PUSH
25109: LD_INT 5
25111: GREATER
25112: IFFALSE 25124
// k := 5 else
25114: LD_ADDR_VAR 0 2
25118: PUSH
25119: LD_INT 5
25121: ST_TO_ADDR
25122: GO 25134
// k := tmp ;
25124: LD_ADDR_VAR 0 2
25128: PUSH
25129: LD_VAR 0 3
25133: ST_TO_ADDR
// for i := 1 to k do
25134: LD_ADDR_VAR 0 1
25138: PUSH
25139: DOUBLE
25140: LD_INT 1
25142: DEC
25143: ST_TO_ADDR
25144: LD_VAR 0 2
25148: PUSH
25149: FOR_TO
25150: IFFALSE 25249
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25152: LD_VAR 0 3
25156: PUSH
25157: LD_VAR 0 1
25161: ARRAY
25162: PPUSH
25163: LD_VAR 0 1
25167: PUSH
25168: LD_INT 4
25170: MOD
25171: PUSH
25172: LD_INT 1
25174: PLUS
25175: PPUSH
25176: CALL_OW 259
25180: PUSH
25181: LD_INT 10
25183: LESS
25184: IFFALSE 25247
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25186: LD_VAR 0 3
25190: PUSH
25191: LD_VAR 0 1
25195: ARRAY
25196: PPUSH
25197: LD_VAR 0 1
25201: PUSH
25202: LD_INT 4
25204: MOD
25205: PUSH
25206: LD_INT 1
25208: PLUS
25209: PPUSH
25210: LD_VAR 0 3
25214: PUSH
25215: LD_VAR 0 1
25219: ARRAY
25220: PPUSH
25221: LD_VAR 0 1
25225: PUSH
25226: LD_INT 4
25228: MOD
25229: PUSH
25230: LD_INT 1
25232: PLUS
25233: PPUSH
25234: CALL_OW 259
25238: PUSH
25239: LD_INT 1
25241: PLUS
25242: PPUSH
25243: CALL_OW 237
25247: GO 25149
25249: POP
25250: POP
// end ;
25251: PPOPN 3
25253: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25254: LD_EXP 67
25258: PUSH
25259: LD_EXP 75
25263: AND
25264: IFFALSE 25284
25266: GO 25268
25268: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25269: LD_INT 4
25271: PPUSH
25272: LD_OWVAR 2
25276: PPUSH
25277: LD_INT 0
25279: PPUSH
25280: CALL_OW 324
25284: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25285: LD_EXP 67
25289: PUSH
25290: LD_EXP 104
25294: AND
25295: IFFALSE 25315
25297: GO 25299
25299: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25300: LD_INT 19
25302: PPUSH
25303: LD_OWVAR 2
25307: PPUSH
25308: LD_INT 0
25310: PPUSH
25311: CALL_OW 324
25315: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25316: LD_EXP 67
25320: PUSH
25321: LD_EXP 76
25325: AND
25326: IFFALSE 25428
25328: GO 25330
25330: DISABLE
25331: LD_INT 0
25333: PPUSH
25334: PPUSH
// begin enable ;
25335: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25336: LD_ADDR_VAR 0 2
25340: PUSH
25341: LD_INT 22
25343: PUSH
25344: LD_OWVAR 2
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 2
25355: PUSH
25356: LD_INT 34
25358: PUSH
25359: LD_INT 11
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 34
25368: PUSH
25369: LD_INT 30
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PPUSH
25385: CALL_OW 69
25389: ST_TO_ADDR
// if not tmp then
25390: LD_VAR 0 2
25394: NOT
25395: IFFALSE 25399
// exit ;
25397: GO 25428
// for i in tmp do
25399: LD_ADDR_VAR 0 1
25403: PUSH
25404: LD_VAR 0 2
25408: PUSH
25409: FOR_IN
25410: IFFALSE 25426
// begin SetLives ( i , 0 ) ;
25412: LD_VAR 0 1
25416: PPUSH
25417: LD_INT 0
25419: PPUSH
25420: CALL_OW 234
// end ;
25424: GO 25409
25426: POP
25427: POP
// end ;
25428: PPOPN 2
25430: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25431: LD_EXP 67
25435: PUSH
25436: LD_EXP 77
25440: AND
25441: IFFALSE 25461
25443: GO 25445
25445: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25446: LD_INT 32
25448: PPUSH
25449: LD_OWVAR 2
25453: PPUSH
25454: LD_INT 0
25456: PPUSH
25457: CALL_OW 324
25461: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25462: LD_EXP 67
25466: PUSH
25467: LD_EXP 78
25471: AND
25472: IFFALSE 25653
25474: GO 25476
25476: DISABLE
25477: LD_INT 0
25479: PPUSH
25480: PPUSH
25481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25482: LD_ADDR_VAR 0 2
25486: PUSH
25487: LD_INT 22
25489: PUSH
25490: LD_OWVAR 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 33
25501: PUSH
25502: LD_INT 3
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PPUSH
25513: CALL_OW 69
25517: ST_TO_ADDR
// if not tmp then
25518: LD_VAR 0 2
25522: NOT
25523: IFFALSE 25527
// exit ;
25525: GO 25653
// side := 0 ;
25527: LD_ADDR_VAR 0 3
25531: PUSH
25532: LD_INT 0
25534: ST_TO_ADDR
// for i := 1 to 8 do
25535: LD_ADDR_VAR 0 1
25539: PUSH
25540: DOUBLE
25541: LD_INT 1
25543: DEC
25544: ST_TO_ADDR
25545: LD_INT 8
25547: PUSH
25548: FOR_TO
25549: IFFALSE 25597
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25551: LD_OWVAR 2
25555: PUSH
25556: LD_VAR 0 1
25560: NONEQUAL
25561: PUSH
25562: LD_OWVAR 2
25566: PPUSH
25567: LD_VAR 0 1
25571: PPUSH
25572: CALL_OW 81
25576: PUSH
25577: LD_INT 2
25579: EQUAL
25580: AND
25581: IFFALSE 25595
// begin side := i ;
25583: LD_ADDR_VAR 0 3
25587: PUSH
25588: LD_VAR 0 1
25592: ST_TO_ADDR
// break ;
25593: GO 25597
// end ;
25595: GO 25548
25597: POP
25598: POP
// if not side then
25599: LD_VAR 0 3
25603: NOT
25604: IFFALSE 25608
// exit ;
25606: GO 25653
// for i := 1 to tmp do
25608: LD_ADDR_VAR 0 1
25612: PUSH
25613: DOUBLE
25614: LD_INT 1
25616: DEC
25617: ST_TO_ADDR
25618: LD_VAR 0 2
25622: PUSH
25623: FOR_TO
25624: IFFALSE 25651
// if Prob ( 60 ) then
25626: LD_INT 60
25628: PPUSH
25629: CALL_OW 13
25633: IFFALSE 25649
// SetSide ( i , side ) ;
25635: LD_VAR 0 1
25639: PPUSH
25640: LD_VAR 0 3
25644: PPUSH
25645: CALL_OW 235
25649: GO 25623
25651: POP
25652: POP
// end ;
25653: PPOPN 3
25655: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25656: LD_EXP 67
25660: PUSH
25661: LD_EXP 80
25665: AND
25666: IFFALSE 25785
25668: GO 25670
25670: DISABLE
25671: LD_INT 0
25673: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: LD_INT 22
25681: PUSH
25682: LD_OWVAR 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 21
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 3
25703: PUSH
25704: LD_INT 23
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 69
25727: PUSH
25728: FOR_IN
25729: IFFALSE 25783
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25731: LD_VAR 0 1
25735: PPUSH
25736: CALL_OW 257
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: LD_INT 3
25749: PUSH
25750: LD_INT 4
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: IN
25759: IFFALSE 25781
// SetClass ( un , rand ( 1 , 4 ) ) ;
25761: LD_VAR 0 1
25765: PPUSH
25766: LD_INT 1
25768: PPUSH
25769: LD_INT 4
25771: PPUSH
25772: CALL_OW 12
25776: PPUSH
25777: CALL_OW 336
25781: GO 25728
25783: POP
25784: POP
// end ;
25785: PPOPN 1
25787: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25788: LD_EXP 67
25792: PUSH
25793: LD_EXP 79
25797: AND
25798: IFFALSE 25877
25800: GO 25802
25802: DISABLE
25803: LD_INT 0
25805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25806: LD_ADDR_VAR 0 1
25810: PUSH
25811: LD_INT 22
25813: PUSH
25814: LD_OWVAR 2
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 21
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PPUSH
25837: CALL_OW 69
25841: ST_TO_ADDR
// if not tmp then
25842: LD_VAR 0 1
25846: NOT
25847: IFFALSE 25851
// exit ;
25849: GO 25877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25851: LD_VAR 0 1
25855: PUSH
25856: LD_INT 1
25858: PPUSH
25859: LD_VAR 0 1
25863: PPUSH
25864: CALL_OW 12
25868: ARRAY
25869: PPUSH
25870: LD_INT 100
25872: PPUSH
25873: CALL_OW 234
// end ;
25877: PPOPN 1
25879: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25880: LD_EXP 67
25884: PUSH
25885: LD_EXP 81
25889: AND
25890: IFFALSE 25988
25892: GO 25894
25894: DISABLE
25895: LD_INT 0
25897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25898: LD_ADDR_VAR 0 1
25902: PUSH
25903: LD_INT 22
25905: PUSH
25906: LD_OWVAR 2
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 21
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PPUSH
25929: CALL_OW 69
25933: ST_TO_ADDR
// if not tmp then
25934: LD_VAR 0 1
25938: NOT
25939: IFFALSE 25943
// exit ;
25941: GO 25988
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25943: LD_VAR 0 1
25947: PUSH
25948: LD_INT 1
25950: PPUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 12
25960: ARRAY
25961: PPUSH
25962: LD_INT 1
25964: PPUSH
25965: LD_INT 4
25967: PPUSH
25968: CALL_OW 12
25972: PPUSH
25973: LD_INT 3000
25975: PPUSH
25976: LD_INT 9000
25978: PPUSH
25979: CALL_OW 12
25983: PPUSH
25984: CALL_OW 492
// end ;
25988: PPOPN 1
25990: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25991: LD_EXP 67
25995: PUSH
25996: LD_EXP 82
26000: AND
26001: IFFALSE 26021
26003: GO 26005
26005: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26006: LD_INT 1
26008: PPUSH
26009: LD_OWVAR 2
26013: PPUSH
26014: LD_INT 0
26016: PPUSH
26017: CALL_OW 324
26021: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26022: LD_EXP 67
26026: PUSH
26027: LD_EXP 83
26031: AND
26032: IFFALSE 26115
26034: GO 26036
26036: DISABLE
26037: LD_INT 0
26039: PPUSH
26040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26041: LD_ADDR_VAR 0 2
26045: PUSH
26046: LD_INT 22
26048: PUSH
26049: LD_OWVAR 2
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 21
26060: PUSH
26061: LD_INT 3
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PPUSH
26072: CALL_OW 69
26076: ST_TO_ADDR
// if not tmp then
26077: LD_VAR 0 2
26081: NOT
26082: IFFALSE 26086
// exit ;
26084: GO 26115
// for i in tmp do
26086: LD_ADDR_VAR 0 1
26090: PUSH
26091: LD_VAR 0 2
26095: PUSH
26096: FOR_IN
26097: IFFALSE 26113
// SetBLevel ( i , 10 ) ;
26099: LD_VAR 0 1
26103: PPUSH
26104: LD_INT 10
26106: PPUSH
26107: CALL_OW 241
26111: GO 26096
26113: POP
26114: POP
// end ;
26115: PPOPN 2
26117: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26118: LD_EXP 67
26122: PUSH
26123: LD_EXP 84
26127: AND
26128: IFFALSE 26239
26130: GO 26132
26132: DISABLE
26133: LD_INT 0
26135: PPUSH
26136: PPUSH
26137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26138: LD_ADDR_VAR 0 3
26142: PUSH
26143: LD_INT 22
26145: PUSH
26146: LD_OWVAR 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 25
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 69
26173: ST_TO_ADDR
// if not tmp then
26174: LD_VAR 0 3
26178: NOT
26179: IFFALSE 26183
// exit ;
26181: GO 26239
// un := tmp [ rand ( 1 , tmp ) ] ;
26183: LD_ADDR_VAR 0 2
26187: PUSH
26188: LD_VAR 0 3
26192: PUSH
26193: LD_INT 1
26195: PPUSH
26196: LD_VAR 0 3
26200: PPUSH
26201: CALL_OW 12
26205: ARRAY
26206: ST_TO_ADDR
// if Crawls ( un ) then
26207: LD_VAR 0 2
26211: PPUSH
26212: CALL_OW 318
26216: IFFALSE 26227
// ComWalk ( un ) ;
26218: LD_VAR 0 2
26222: PPUSH
26223: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26227: LD_VAR 0 2
26231: PPUSH
26232: LD_INT 5
26234: PPUSH
26235: CALL_OW 336
// end ;
26239: PPOPN 3
26241: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26242: LD_EXP 67
26246: PUSH
26247: LD_EXP 85
26251: AND
26252: PUSH
26253: LD_OWVAR 67
26257: PUSH
26258: LD_INT 4
26260: LESS
26261: AND
26262: IFFALSE 26281
26264: GO 26266
26266: DISABLE
// begin Difficulty := Difficulty + 1 ;
26267: LD_ADDR_OWVAR 67
26271: PUSH
26272: LD_OWVAR 67
26276: PUSH
26277: LD_INT 1
26279: PLUS
26280: ST_TO_ADDR
// end ;
26281: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26282: LD_EXP 67
26286: PUSH
26287: LD_EXP 86
26291: AND
26292: IFFALSE 26395
26294: GO 26296
26296: DISABLE
26297: LD_INT 0
26299: PPUSH
// begin for i := 1 to 5 do
26300: LD_ADDR_VAR 0 1
26304: PUSH
26305: DOUBLE
26306: LD_INT 1
26308: DEC
26309: ST_TO_ADDR
26310: LD_INT 5
26312: PUSH
26313: FOR_TO
26314: IFFALSE 26393
// begin uc_nation := nation_nature ;
26316: LD_ADDR_OWVAR 21
26320: PUSH
26321: LD_INT 0
26323: ST_TO_ADDR
// uc_side := 0 ;
26324: LD_ADDR_OWVAR 20
26328: PUSH
26329: LD_INT 0
26331: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26332: LD_ADDR_OWVAR 29
26336: PUSH
26337: LD_INT 12
26339: PUSH
26340: LD_INT 12
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: ST_TO_ADDR
// hc_agressivity := 20 ;
26347: LD_ADDR_OWVAR 35
26351: PUSH
26352: LD_INT 20
26354: ST_TO_ADDR
// hc_class := class_tiger ;
26355: LD_ADDR_OWVAR 28
26359: PUSH
26360: LD_INT 14
26362: ST_TO_ADDR
// hc_gallery :=  ;
26363: LD_ADDR_OWVAR 33
26367: PUSH
26368: LD_STRING 
26370: ST_TO_ADDR
// hc_name :=  ;
26371: LD_ADDR_OWVAR 26
26375: PUSH
26376: LD_STRING 
26378: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26379: CALL_OW 44
26383: PPUSH
26384: LD_INT 0
26386: PPUSH
26387: CALL_OW 51
// end ;
26391: GO 26313
26393: POP
26394: POP
// end ;
26395: PPOPN 1
26397: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26398: LD_EXP 67
26402: PUSH
26403: LD_EXP 87
26407: AND
26408: IFFALSE 26417
26410: GO 26412
26412: DISABLE
// StreamSibBomb ;
26413: CALL 26418 0 0
26417: END
// export function StreamSibBomb ; var i , x , y ; begin
26418: LD_INT 0
26420: PPUSH
26421: PPUSH
26422: PPUSH
26423: PPUSH
// result := false ;
26424: LD_ADDR_VAR 0 1
26428: PUSH
26429: LD_INT 0
26431: ST_TO_ADDR
// for i := 1 to 16 do
26432: LD_ADDR_VAR 0 2
26436: PUSH
26437: DOUBLE
26438: LD_INT 1
26440: DEC
26441: ST_TO_ADDR
26442: LD_INT 16
26444: PUSH
26445: FOR_TO
26446: IFFALSE 26645
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26448: LD_ADDR_VAR 0 3
26452: PUSH
26453: LD_INT 10
26455: PUSH
26456: LD_INT 20
26458: PUSH
26459: LD_INT 30
26461: PUSH
26462: LD_INT 40
26464: PUSH
26465: LD_INT 50
26467: PUSH
26468: LD_INT 60
26470: PUSH
26471: LD_INT 70
26473: PUSH
26474: LD_INT 80
26476: PUSH
26477: LD_INT 90
26479: PUSH
26480: LD_INT 100
26482: PUSH
26483: LD_INT 110
26485: PUSH
26486: LD_INT 120
26488: PUSH
26489: LD_INT 130
26491: PUSH
26492: LD_INT 140
26494: PUSH
26495: LD_INT 150
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: PPUSH
26518: LD_INT 15
26520: PPUSH
26521: CALL_OW 12
26525: ARRAY
26526: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26527: LD_ADDR_VAR 0 4
26531: PUSH
26532: LD_INT 10
26534: PUSH
26535: LD_INT 20
26537: PUSH
26538: LD_INT 30
26540: PUSH
26541: LD_INT 40
26543: PUSH
26544: LD_INT 50
26546: PUSH
26547: LD_INT 60
26549: PUSH
26550: LD_INT 70
26552: PUSH
26553: LD_INT 80
26555: PUSH
26556: LD_INT 90
26558: PUSH
26559: LD_INT 100
26561: PUSH
26562: LD_INT 110
26564: PUSH
26565: LD_INT 120
26567: PUSH
26568: LD_INT 130
26570: PUSH
26571: LD_INT 140
26573: PUSH
26574: LD_INT 150
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: PPUSH
26597: LD_INT 15
26599: PPUSH
26600: CALL_OW 12
26604: ARRAY
26605: ST_TO_ADDR
// if ValidHex ( x , y ) then
26606: LD_VAR 0 3
26610: PPUSH
26611: LD_VAR 0 4
26615: PPUSH
26616: CALL_OW 488
26620: IFFALSE 26643
// begin result := [ x , y ] ;
26622: LD_ADDR_VAR 0 1
26626: PUSH
26627: LD_VAR 0 3
26631: PUSH
26632: LD_VAR 0 4
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: ST_TO_ADDR
// break ;
26641: GO 26645
// end ; end ;
26643: GO 26445
26645: POP
26646: POP
// if result then
26647: LD_VAR 0 1
26651: IFFALSE 26711
// begin ToLua ( playSibBomb() ) ;
26653: LD_STRING playSibBomb()
26655: PPUSH
26656: CALL_OW 559
// wait ( 0 0$14 ) ;
26660: LD_INT 490
26662: PPUSH
26663: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26667: LD_VAR 0 1
26671: PUSH
26672: LD_INT 1
26674: ARRAY
26675: PPUSH
26676: LD_VAR 0 1
26680: PUSH
26681: LD_INT 2
26683: ARRAY
26684: PPUSH
26685: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26689: LD_VAR 0 1
26693: PUSH
26694: LD_INT 1
26696: ARRAY
26697: PPUSH
26698: LD_VAR 0 1
26702: PUSH
26703: LD_INT 2
26705: ARRAY
26706: PPUSH
26707: CALL_OW 429
// end ; end ;
26711: LD_VAR 0 1
26715: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26716: LD_EXP 67
26720: PUSH
26721: LD_EXP 89
26725: AND
26726: IFFALSE 26738
26728: GO 26730
26730: DISABLE
// YouLost (  ) ;
26731: LD_STRING 
26733: PPUSH
26734: CALL_OW 104
26738: END
// every 0 0$1 trigger StreamModeActive and sFog do
26739: LD_EXP 67
26743: PUSH
26744: LD_EXP 88
26748: AND
26749: IFFALSE 26763
26751: GO 26753
26753: DISABLE
// FogOff ( your_side ) ;
26754: LD_OWVAR 2
26758: PPUSH
26759: CALL_OW 344
26763: END
// every 0 0$1 trigger StreamModeActive and sSun do
26764: LD_EXP 67
26768: PUSH
26769: LD_EXP 90
26773: AND
26774: IFFALSE 26802
26776: GO 26778
26778: DISABLE
// begin solar_recharge_percent := 0 ;
26779: LD_ADDR_OWVAR 79
26783: PUSH
26784: LD_INT 0
26786: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26787: LD_INT 10500
26789: PPUSH
26790: CALL_OW 67
// solar_recharge_percent := 100 ;
26794: LD_ADDR_OWVAR 79
26798: PUSH
26799: LD_INT 100
26801: ST_TO_ADDR
// end ;
26802: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26803: LD_EXP 67
26807: PUSH
26808: LD_EXP 91
26812: AND
26813: IFFALSE 27052
26815: GO 26817
26817: DISABLE
26818: LD_INT 0
26820: PPUSH
26821: PPUSH
26822: PPUSH
// begin tmp := [ ] ;
26823: LD_ADDR_VAR 0 3
26827: PUSH
26828: EMPTY
26829: ST_TO_ADDR
// for i := 1 to 6 do
26830: LD_ADDR_VAR 0 1
26834: PUSH
26835: DOUBLE
26836: LD_INT 1
26838: DEC
26839: ST_TO_ADDR
26840: LD_INT 6
26842: PUSH
26843: FOR_TO
26844: IFFALSE 26949
// begin uc_nation := nation_nature ;
26846: LD_ADDR_OWVAR 21
26850: PUSH
26851: LD_INT 0
26853: ST_TO_ADDR
// uc_side := 0 ;
26854: LD_ADDR_OWVAR 20
26858: PUSH
26859: LD_INT 0
26861: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26862: LD_ADDR_OWVAR 29
26866: PUSH
26867: LD_INT 12
26869: PUSH
26870: LD_INT 12
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: ST_TO_ADDR
// hc_agressivity := 20 ;
26877: LD_ADDR_OWVAR 35
26881: PUSH
26882: LD_INT 20
26884: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26885: LD_ADDR_OWVAR 28
26889: PUSH
26890: LD_INT 17
26892: ST_TO_ADDR
// hc_gallery :=  ;
26893: LD_ADDR_OWVAR 33
26897: PUSH
26898: LD_STRING 
26900: ST_TO_ADDR
// hc_name :=  ;
26901: LD_ADDR_OWVAR 26
26905: PUSH
26906: LD_STRING 
26908: ST_TO_ADDR
// un := CreateHuman ;
26909: LD_ADDR_VAR 0 2
26913: PUSH
26914: CALL_OW 44
26918: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26919: LD_VAR 0 2
26923: PPUSH
26924: LD_INT 1
26926: PPUSH
26927: CALL_OW 51
// tmp := tmp ^ un ;
26931: LD_ADDR_VAR 0 3
26935: PUSH
26936: LD_VAR 0 3
26940: PUSH
26941: LD_VAR 0 2
26945: ADD
26946: ST_TO_ADDR
// end ;
26947: GO 26843
26949: POP
26950: POP
// repeat wait ( 0 0$1 ) ;
26951: LD_INT 35
26953: PPUSH
26954: CALL_OW 67
// for un in tmp do
26958: LD_ADDR_VAR 0 2
26962: PUSH
26963: LD_VAR 0 3
26967: PUSH
26968: FOR_IN
26969: IFFALSE 27043
// begin if IsDead ( un ) then
26971: LD_VAR 0 2
26975: PPUSH
26976: CALL_OW 301
26980: IFFALSE 27000
// begin tmp := tmp diff un ;
26982: LD_ADDR_VAR 0 3
26986: PUSH
26987: LD_VAR 0 3
26991: PUSH
26992: LD_VAR 0 2
26996: DIFF
26997: ST_TO_ADDR
// continue ;
26998: GO 26968
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27000: LD_VAR 0 2
27004: PPUSH
27005: LD_INT 3
27007: PUSH
27008: LD_INT 22
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PPUSH
27022: CALL_OW 69
27026: PPUSH
27027: LD_VAR 0 2
27031: PPUSH
27032: CALL_OW 74
27036: PPUSH
27037: CALL_OW 115
// end ;
27041: GO 26968
27043: POP
27044: POP
// until not tmp ;
27045: LD_VAR 0 3
27049: NOT
27050: IFFALSE 26951
// end ;
27052: PPOPN 3
27054: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27055: LD_EXP 67
27059: PUSH
27060: LD_EXP 92
27064: AND
27065: IFFALSE 27119
27067: GO 27069
27069: DISABLE
// begin ToLua ( displayTroll(); ) ;
27070: LD_STRING displayTroll();
27072: PPUSH
27073: CALL_OW 559
// wait ( 3 3$00 ) ;
27077: LD_INT 6300
27079: PPUSH
27080: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27084: LD_STRING hideTroll();
27086: PPUSH
27087: CALL_OW 559
// wait ( 1 1$00 ) ;
27091: LD_INT 2100
27093: PPUSH
27094: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27098: LD_STRING displayTroll();
27100: PPUSH
27101: CALL_OW 559
// wait ( 1 1$00 ) ;
27105: LD_INT 2100
27107: PPUSH
27108: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27112: LD_STRING hideTroll();
27114: PPUSH
27115: CALL_OW 559
// end ;
27119: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27120: LD_EXP 67
27124: PUSH
27125: LD_EXP 93
27129: AND
27130: IFFALSE 27193
27132: GO 27134
27134: DISABLE
27135: LD_INT 0
27137: PPUSH
// begin p := 0 ;
27138: LD_ADDR_VAR 0 1
27142: PUSH
27143: LD_INT 0
27145: ST_TO_ADDR
// repeat game_speed := 1 ;
27146: LD_ADDR_OWVAR 65
27150: PUSH
27151: LD_INT 1
27153: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27154: LD_INT 35
27156: PPUSH
27157: CALL_OW 67
// p := p + 1 ;
27161: LD_ADDR_VAR 0 1
27165: PUSH
27166: LD_VAR 0 1
27170: PUSH
27171: LD_INT 1
27173: PLUS
27174: ST_TO_ADDR
// until p >= 60 ;
27175: LD_VAR 0 1
27179: PUSH
27180: LD_INT 60
27182: GREATEREQUAL
27183: IFFALSE 27146
// game_speed := 4 ;
27185: LD_ADDR_OWVAR 65
27189: PUSH
27190: LD_INT 4
27192: ST_TO_ADDR
// end ;
27193: PPOPN 1
27195: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27196: LD_EXP 67
27200: PUSH
27201: LD_EXP 94
27205: AND
27206: IFFALSE 27352
27208: GO 27210
27210: DISABLE
27211: LD_INT 0
27213: PPUSH
27214: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27215: LD_ADDR_VAR 0 1
27219: PUSH
27220: LD_INT 22
27222: PUSH
27223: LD_OWVAR 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: LD_INT 30
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 30
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PPUSH
27264: CALL_OW 69
27268: ST_TO_ADDR
// if not depot then
27269: LD_VAR 0 1
27273: NOT
27274: IFFALSE 27278
// exit ;
27276: GO 27352
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27278: LD_ADDR_VAR 0 2
27282: PUSH
27283: LD_VAR 0 1
27287: PUSH
27288: LD_INT 1
27290: PPUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 12
27300: ARRAY
27301: PPUSH
27302: CALL_OW 274
27306: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27307: LD_VAR 0 2
27311: PPUSH
27312: LD_INT 1
27314: PPUSH
27315: LD_INT 0
27317: PPUSH
27318: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27322: LD_VAR 0 2
27326: PPUSH
27327: LD_INT 2
27329: PPUSH
27330: LD_INT 0
27332: PPUSH
27333: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27337: LD_VAR 0 2
27341: PPUSH
27342: LD_INT 3
27344: PPUSH
27345: LD_INT 0
27347: PPUSH
27348: CALL_OW 277
// end ;
27352: PPOPN 2
27354: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27355: LD_EXP 67
27359: PUSH
27360: LD_EXP 95
27364: AND
27365: IFFALSE 27462
27367: GO 27369
27369: DISABLE
27370: LD_INT 0
27372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27373: LD_ADDR_VAR 0 1
27377: PUSH
27378: LD_INT 22
27380: PUSH
27381: LD_OWVAR 2
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 21
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 3
27402: PUSH
27403: LD_INT 23
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: PPUSH
27422: CALL_OW 69
27426: ST_TO_ADDR
// if not tmp then
27427: LD_VAR 0 1
27431: NOT
27432: IFFALSE 27436
// exit ;
27434: GO 27462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27436: LD_VAR 0 1
27440: PUSH
27441: LD_INT 1
27443: PPUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: CALL_OW 12
27453: ARRAY
27454: PPUSH
27455: LD_INT 200
27457: PPUSH
27458: CALL_OW 234
// end ;
27462: PPOPN 1
27464: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27465: LD_EXP 67
27469: PUSH
27470: LD_EXP 96
27474: AND
27475: IFFALSE 27554
27477: GO 27479
27479: DISABLE
27480: LD_INT 0
27482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27483: LD_ADDR_VAR 0 1
27487: PUSH
27488: LD_INT 22
27490: PUSH
27491: LD_OWVAR 2
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 21
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PPUSH
27514: CALL_OW 69
27518: ST_TO_ADDR
// if not tmp then
27519: LD_VAR 0 1
27523: NOT
27524: IFFALSE 27528
// exit ;
27526: GO 27554
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27528: LD_VAR 0 1
27532: PUSH
27533: LD_INT 1
27535: PPUSH
27536: LD_VAR 0 1
27540: PPUSH
27541: CALL_OW 12
27545: ARRAY
27546: PPUSH
27547: LD_INT 60
27549: PPUSH
27550: CALL_OW 234
// end ;
27554: PPOPN 1
27556: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27557: LD_EXP 67
27561: PUSH
27562: LD_EXP 97
27566: AND
27567: IFFALSE 27666
27569: GO 27571
27571: DISABLE
27572: LD_INT 0
27574: PPUSH
27575: PPUSH
// begin enable ;
27576: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27577: LD_ADDR_VAR 0 1
27581: PUSH
27582: LD_INT 22
27584: PUSH
27585: LD_OWVAR 2
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 61
27596: PUSH
27597: EMPTY
27598: LIST
27599: PUSH
27600: LD_INT 33
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: PPUSH
27615: CALL_OW 69
27619: ST_TO_ADDR
// if not tmp then
27620: LD_VAR 0 1
27624: NOT
27625: IFFALSE 27629
// exit ;
27627: GO 27666
// for i in tmp do
27629: LD_ADDR_VAR 0 2
27633: PUSH
27634: LD_VAR 0 1
27638: PUSH
27639: FOR_IN
27640: IFFALSE 27664
// if IsControledBy ( i ) then
27642: LD_VAR 0 2
27646: PPUSH
27647: CALL_OW 312
27651: IFFALSE 27662
// ComUnlink ( i ) ;
27653: LD_VAR 0 2
27657: PPUSH
27658: CALL_OW 136
27662: GO 27639
27664: POP
27665: POP
// end ;
27666: PPOPN 2
27668: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27669: LD_EXP 67
27673: PUSH
27674: LD_EXP 98
27678: AND
27679: IFFALSE 27819
27681: GO 27683
27683: DISABLE
27684: LD_INT 0
27686: PPUSH
27687: PPUSH
// begin ToLua ( displayPowell(); ) ;
27688: LD_STRING displayPowell();
27690: PPUSH
27691: CALL_OW 559
// uc_side := 0 ;
27695: LD_ADDR_OWVAR 20
27699: PUSH
27700: LD_INT 0
27702: ST_TO_ADDR
// uc_nation := 2 ;
27703: LD_ADDR_OWVAR 21
27707: PUSH
27708: LD_INT 2
27710: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27711: LD_ADDR_OWVAR 37
27715: PUSH
27716: LD_INT 14
27718: ST_TO_ADDR
// vc_engine := engine_siberite ;
27719: LD_ADDR_OWVAR 39
27723: PUSH
27724: LD_INT 3
27726: ST_TO_ADDR
// vc_control := control_apeman ;
27727: LD_ADDR_OWVAR 38
27731: PUSH
27732: LD_INT 5
27734: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27735: LD_ADDR_OWVAR 40
27739: PUSH
27740: LD_INT 29
27742: ST_TO_ADDR
// un := CreateVehicle ;
27743: LD_ADDR_VAR 0 2
27747: PUSH
27748: CALL_OW 45
27752: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27753: LD_VAR 0 2
27757: PPUSH
27758: LD_INT 1
27760: PPUSH
27761: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27765: LD_INT 35
27767: PPUSH
27768: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27772: LD_VAR 0 2
27776: PPUSH
27777: LD_INT 22
27779: PUSH
27780: LD_OWVAR 2
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PPUSH
27789: CALL_OW 69
27793: PPUSH
27794: LD_VAR 0 2
27798: PPUSH
27799: CALL_OW 74
27803: PPUSH
27804: CALL_OW 115
// until IsDead ( un ) ;
27808: LD_VAR 0 2
27812: PPUSH
27813: CALL_OW 301
27817: IFFALSE 27765
// end ;
27819: PPOPN 2
27821: END
// every 0 0$1 trigger StreamModeActive and sStu do
27822: LD_EXP 67
27826: PUSH
27827: LD_EXP 106
27831: AND
27832: IFFALSE 27848
27834: GO 27836
27836: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27837: LD_STRING displayStucuk();
27839: PPUSH
27840: CALL_OW 559
// ResetFog ;
27844: CALL_OW 335
// end ;
27848: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27849: LD_EXP 67
27853: PUSH
27854: LD_EXP 99
27858: AND
27859: IFFALSE 28000
27861: GO 27863
27863: DISABLE
27864: LD_INT 0
27866: PPUSH
27867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27868: LD_ADDR_VAR 0 2
27872: PUSH
27873: LD_INT 22
27875: PUSH
27876: LD_OWVAR 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 21
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PPUSH
27899: CALL_OW 69
27903: ST_TO_ADDR
// if not tmp then
27904: LD_VAR 0 2
27908: NOT
27909: IFFALSE 27913
// exit ;
27911: GO 28000
// un := tmp [ rand ( 1 , tmp ) ] ;
27913: LD_ADDR_VAR 0 1
27917: PUSH
27918: LD_VAR 0 2
27922: PUSH
27923: LD_INT 1
27925: PPUSH
27926: LD_VAR 0 2
27930: PPUSH
27931: CALL_OW 12
27935: ARRAY
27936: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27937: LD_VAR 0 1
27941: PPUSH
27942: LD_INT 0
27944: PPUSH
27945: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27949: LD_VAR 0 1
27953: PPUSH
27954: LD_OWVAR 3
27958: PUSH
27959: LD_VAR 0 1
27963: DIFF
27964: PPUSH
27965: LD_VAR 0 1
27969: PPUSH
27970: CALL_OW 74
27974: PPUSH
27975: CALL_OW 115
// wait ( 0 0$20 ) ;
27979: LD_INT 700
27981: PPUSH
27982: CALL_OW 67
// SetSide ( un , your_side ) ;
27986: LD_VAR 0 1
27990: PPUSH
27991: LD_OWVAR 2
27995: PPUSH
27996: CALL_OW 235
// end ;
28000: PPOPN 2
28002: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28003: LD_EXP 67
28007: PUSH
28008: LD_EXP 100
28012: AND
28013: IFFALSE 28119
28015: GO 28017
28017: DISABLE
28018: LD_INT 0
28020: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28021: LD_ADDR_VAR 0 1
28025: PUSH
28026: LD_INT 22
28028: PUSH
28029: LD_OWVAR 2
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: LD_INT 30
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 30
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PPUSH
28070: CALL_OW 69
28074: ST_TO_ADDR
// if not depot then
28075: LD_VAR 0 1
28079: NOT
28080: IFFALSE 28084
// exit ;
28082: GO 28119
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28084: LD_VAR 0 1
28088: PUSH
28089: LD_INT 1
28091: ARRAY
28092: PPUSH
28093: CALL_OW 250
28097: PPUSH
28098: LD_VAR 0 1
28102: PUSH
28103: LD_INT 1
28105: ARRAY
28106: PPUSH
28107: CALL_OW 251
28111: PPUSH
28112: LD_INT 70
28114: PPUSH
28115: CALL_OW 495
// end ;
28119: PPOPN 1
28121: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28122: LD_EXP 67
28126: PUSH
28127: LD_EXP 101
28131: AND
28132: IFFALSE 28343
28134: GO 28136
28136: DISABLE
28137: LD_INT 0
28139: PPUSH
28140: PPUSH
28141: PPUSH
28142: PPUSH
28143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28144: LD_ADDR_VAR 0 5
28148: PUSH
28149: LD_INT 22
28151: PUSH
28152: LD_OWVAR 2
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 21
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PPUSH
28175: CALL_OW 69
28179: ST_TO_ADDR
// if not tmp then
28180: LD_VAR 0 5
28184: NOT
28185: IFFALSE 28189
// exit ;
28187: GO 28343
// for i in tmp do
28189: LD_ADDR_VAR 0 1
28193: PUSH
28194: LD_VAR 0 5
28198: PUSH
28199: FOR_IN
28200: IFFALSE 28341
// begin d := rand ( 0 , 5 ) ;
28202: LD_ADDR_VAR 0 4
28206: PUSH
28207: LD_INT 0
28209: PPUSH
28210: LD_INT 5
28212: PPUSH
28213: CALL_OW 12
28217: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28218: LD_ADDR_VAR 0 2
28222: PUSH
28223: LD_VAR 0 1
28227: PPUSH
28228: CALL_OW 250
28232: PPUSH
28233: LD_VAR 0 4
28237: PPUSH
28238: LD_INT 3
28240: PPUSH
28241: LD_INT 12
28243: PPUSH
28244: CALL_OW 12
28248: PPUSH
28249: CALL_OW 272
28253: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28254: LD_ADDR_VAR 0 3
28258: PUSH
28259: LD_VAR 0 1
28263: PPUSH
28264: CALL_OW 251
28268: PPUSH
28269: LD_VAR 0 4
28273: PPUSH
28274: LD_INT 3
28276: PPUSH
28277: LD_INT 12
28279: PPUSH
28280: CALL_OW 12
28284: PPUSH
28285: CALL_OW 273
28289: ST_TO_ADDR
// if ValidHex ( x , y ) then
28290: LD_VAR 0 2
28294: PPUSH
28295: LD_VAR 0 3
28299: PPUSH
28300: CALL_OW 488
28304: IFFALSE 28339
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28306: LD_VAR 0 1
28310: PPUSH
28311: LD_VAR 0 2
28315: PPUSH
28316: LD_VAR 0 3
28320: PPUSH
28321: LD_INT 3
28323: PPUSH
28324: LD_INT 6
28326: PPUSH
28327: CALL_OW 12
28331: PPUSH
28332: LD_INT 1
28334: PPUSH
28335: CALL_OW 483
// end ;
28339: GO 28199
28341: POP
28342: POP
// end ;
28343: PPOPN 5
28345: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28346: LD_EXP 67
28350: PUSH
28351: LD_EXP 102
28355: AND
28356: IFFALSE 28450
28358: GO 28360
28360: DISABLE
28361: LD_INT 0
28363: PPUSH
28364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28365: LD_ADDR_VAR 0 2
28369: PUSH
28370: LD_INT 22
28372: PUSH
28373: LD_OWVAR 2
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 32
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 21
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: LIST
28406: PPUSH
28407: CALL_OW 69
28411: ST_TO_ADDR
// if not tmp then
28412: LD_VAR 0 2
28416: NOT
28417: IFFALSE 28421
// exit ;
28419: GO 28450
// for i in tmp do
28421: LD_ADDR_VAR 0 1
28425: PUSH
28426: LD_VAR 0 2
28430: PUSH
28431: FOR_IN
28432: IFFALSE 28448
// SetFuel ( i , 0 ) ;
28434: LD_VAR 0 1
28438: PPUSH
28439: LD_INT 0
28441: PPUSH
28442: CALL_OW 240
28446: GO 28431
28448: POP
28449: POP
// end ;
28450: PPOPN 2
28452: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28453: LD_EXP 67
28457: PUSH
28458: LD_EXP 103
28462: AND
28463: IFFALSE 28529
28465: GO 28467
28467: DISABLE
28468: LD_INT 0
28470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28471: LD_ADDR_VAR 0 1
28475: PUSH
28476: LD_INT 22
28478: PUSH
28479: LD_OWVAR 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 30
28490: PUSH
28491: LD_INT 29
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PPUSH
28502: CALL_OW 69
28506: ST_TO_ADDR
// if not tmp then
28507: LD_VAR 0 1
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28529
// DestroyUnit ( tmp [ 1 ] ) ;
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 1
28523: ARRAY
28524: PPUSH
28525: CALL_OW 65
// end ;
28529: PPOPN 1
28531: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28532: LD_EXP 67
28536: PUSH
28537: LD_EXP 105
28541: AND
28542: IFFALSE 28671
28544: GO 28546
28546: DISABLE
28547: LD_INT 0
28549: PPUSH
// begin uc_side := 0 ;
28550: LD_ADDR_OWVAR 20
28554: PUSH
28555: LD_INT 0
28557: ST_TO_ADDR
// uc_nation := nation_arabian ;
28558: LD_ADDR_OWVAR 21
28562: PUSH
28563: LD_INT 2
28565: ST_TO_ADDR
// hc_gallery :=  ;
28566: LD_ADDR_OWVAR 33
28570: PUSH
28571: LD_STRING 
28573: ST_TO_ADDR
// hc_name :=  ;
28574: LD_ADDR_OWVAR 26
28578: PUSH
28579: LD_STRING 
28581: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28582: LD_INT 1
28584: PPUSH
28585: LD_INT 11
28587: PPUSH
28588: LD_INT 10
28590: PPUSH
28591: CALL_OW 380
// un := CreateHuman ;
28595: LD_ADDR_VAR 0 1
28599: PUSH
28600: CALL_OW 44
28604: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28605: LD_VAR 0 1
28609: PPUSH
28610: LD_INT 1
28612: PPUSH
28613: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28617: LD_INT 35
28619: PPUSH
28620: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28624: LD_VAR 0 1
28628: PPUSH
28629: LD_INT 22
28631: PUSH
28632: LD_OWVAR 2
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: PPUSH
28646: LD_VAR 0 1
28650: PPUSH
28651: CALL_OW 74
28655: PPUSH
28656: CALL_OW 115
// until IsDead ( un ) ;
28660: LD_VAR 0 1
28664: PPUSH
28665: CALL_OW 301
28669: IFFALSE 28617
// end ;
28671: PPOPN 1
28673: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28674: LD_EXP 67
28678: PUSH
28679: LD_EXP 107
28683: AND
28684: IFFALSE 28696
28686: GO 28688
28688: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28689: LD_STRING earthquake(getX(game), 0, 32)
28691: PPUSH
28692: CALL_OW 559
28696: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28697: LD_EXP 67
28701: PUSH
28702: LD_EXP 108
28706: AND
28707: IFFALSE 28798
28709: GO 28711
28711: DISABLE
28712: LD_INT 0
28714: PPUSH
// begin enable ;
28715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28716: LD_ADDR_VAR 0 1
28720: PUSH
28721: LD_INT 22
28723: PUSH
28724: LD_OWVAR 2
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 21
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 33
28745: PUSH
28746: LD_INT 3
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: PPUSH
28758: CALL_OW 69
28762: ST_TO_ADDR
// if not tmp then
28763: LD_VAR 0 1
28767: NOT
28768: IFFALSE 28772
// exit ;
28770: GO 28798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28772: LD_VAR 0 1
28776: PUSH
28777: LD_INT 1
28779: PPUSH
28780: LD_VAR 0 1
28784: PPUSH
28785: CALL_OW 12
28789: ARRAY
28790: PPUSH
28791: LD_INT 1
28793: PPUSH
28794: CALL_OW 234
// end ;
28798: PPOPN 1
28800: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28801: LD_EXP 67
28805: PUSH
28806: LD_EXP 109
28810: AND
28811: IFFALSE 28952
28813: GO 28815
28815: DISABLE
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
28820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28821: LD_ADDR_VAR 0 3
28825: PUSH
28826: LD_INT 22
28828: PUSH
28829: LD_OWVAR 2
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 25
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 69
28856: ST_TO_ADDR
// if not tmp then
28857: LD_VAR 0 3
28861: NOT
28862: IFFALSE 28866
// exit ;
28864: GO 28952
// un := tmp [ rand ( 1 , tmp ) ] ;
28866: LD_ADDR_VAR 0 2
28870: PUSH
28871: LD_VAR 0 3
28875: PUSH
28876: LD_INT 1
28878: PPUSH
28879: LD_VAR 0 3
28883: PPUSH
28884: CALL_OW 12
28888: ARRAY
28889: ST_TO_ADDR
// if Crawls ( un ) then
28890: LD_VAR 0 2
28894: PPUSH
28895: CALL_OW 318
28899: IFFALSE 28910
// ComWalk ( un ) ;
28901: LD_VAR 0 2
28905: PPUSH
28906: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28910: LD_VAR 0 2
28914: PPUSH
28915: LD_INT 9
28917: PPUSH
28918: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28922: LD_INT 28
28924: PPUSH
28925: LD_OWVAR 2
28929: PPUSH
28930: LD_INT 2
28932: PPUSH
28933: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28937: LD_INT 29
28939: PPUSH
28940: LD_OWVAR 2
28944: PPUSH
28945: LD_INT 2
28947: PPUSH
28948: CALL_OW 322
// end ;
28952: PPOPN 3
28954: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28955: LD_EXP 67
28959: PUSH
28960: LD_EXP 110
28964: AND
28965: IFFALSE 29076
28967: GO 28969
28969: DISABLE
28970: LD_INT 0
28972: PPUSH
28973: PPUSH
28974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_OWVAR 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 25
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PPUSH
29006: CALL_OW 69
29010: ST_TO_ADDR
// if not tmp then
29011: LD_VAR 0 3
29015: NOT
29016: IFFALSE 29020
// exit ;
29018: GO 29076
// un := tmp [ rand ( 1 , tmp ) ] ;
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_VAR 0 3
29029: PUSH
29030: LD_INT 1
29032: PPUSH
29033: LD_VAR 0 3
29037: PPUSH
29038: CALL_OW 12
29042: ARRAY
29043: ST_TO_ADDR
// if Crawls ( un ) then
29044: LD_VAR 0 2
29048: PPUSH
29049: CALL_OW 318
29053: IFFALSE 29064
// ComWalk ( un ) ;
29055: LD_VAR 0 2
29059: PPUSH
29060: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29064: LD_VAR 0 2
29068: PPUSH
29069: LD_INT 8
29071: PPUSH
29072: CALL_OW 336
// end ;
29076: PPOPN 3
29078: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29079: LD_EXP 67
29083: PUSH
29084: LD_EXP 111
29088: AND
29089: IFFALSE 29233
29091: GO 29093
29093: DISABLE
29094: LD_INT 0
29096: PPUSH
29097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29098: LD_ADDR_VAR 0 2
29102: PUSH
29103: LD_INT 22
29105: PUSH
29106: LD_OWVAR 2
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 21
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 2
29127: PUSH
29128: LD_INT 34
29130: PUSH
29131: LD_INT 12
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 34
29140: PUSH
29141: LD_INT 51
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 34
29150: PUSH
29151: LD_INT 32
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: PPUSH
29169: CALL_OW 69
29173: ST_TO_ADDR
// if not tmp then
29174: LD_VAR 0 2
29178: NOT
29179: IFFALSE 29183
// exit ;
29181: GO 29233
// for i in tmp do
29183: LD_ADDR_VAR 0 1
29187: PUSH
29188: LD_VAR 0 2
29192: PUSH
29193: FOR_IN
29194: IFFALSE 29231
// if GetCargo ( i , mat_artifact ) = 0 then
29196: LD_VAR 0 1
29200: PPUSH
29201: LD_INT 4
29203: PPUSH
29204: CALL_OW 289
29208: PUSH
29209: LD_INT 0
29211: EQUAL
29212: IFFALSE 29229
// SetCargo ( i , mat_siberit , 100 ) ;
29214: LD_VAR 0 1
29218: PPUSH
29219: LD_INT 3
29221: PPUSH
29222: LD_INT 100
29224: PPUSH
29225: CALL_OW 290
29229: GO 29193
29231: POP
29232: POP
// end ;
29233: PPOPN 2
29235: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29236: LD_EXP 67
29240: PUSH
29241: LD_EXP 112
29245: AND
29246: IFFALSE 29429
29248: GO 29250
29250: DISABLE
29251: LD_INT 0
29253: PPUSH
29254: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29255: LD_ADDR_VAR 0 2
29259: PUSH
29260: LD_INT 22
29262: PUSH
29263: LD_OWVAR 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PPUSH
29272: CALL_OW 69
29276: ST_TO_ADDR
// if not tmp then
29277: LD_VAR 0 2
29281: NOT
29282: IFFALSE 29286
// exit ;
29284: GO 29429
// for i := 1 to 2 do
29286: LD_ADDR_VAR 0 1
29290: PUSH
29291: DOUBLE
29292: LD_INT 1
29294: DEC
29295: ST_TO_ADDR
29296: LD_INT 2
29298: PUSH
29299: FOR_TO
29300: IFFALSE 29427
// begin uc_side := your_side ;
29302: LD_ADDR_OWVAR 20
29306: PUSH
29307: LD_OWVAR 2
29311: ST_TO_ADDR
// uc_nation := nation_american ;
29312: LD_ADDR_OWVAR 21
29316: PUSH
29317: LD_INT 1
29319: ST_TO_ADDR
// vc_chassis := us_morphling ;
29320: LD_ADDR_OWVAR 37
29324: PUSH
29325: LD_INT 5
29327: ST_TO_ADDR
// vc_engine := engine_siberite ;
29328: LD_ADDR_OWVAR 39
29332: PUSH
29333: LD_INT 3
29335: ST_TO_ADDR
// vc_control := control_computer ;
29336: LD_ADDR_OWVAR 38
29340: PUSH
29341: LD_INT 3
29343: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29344: LD_ADDR_OWVAR 40
29348: PUSH
29349: LD_INT 10
29351: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29352: LD_VAR 0 2
29356: PUSH
29357: LD_INT 1
29359: ARRAY
29360: PPUSH
29361: CALL_OW 310
29365: NOT
29366: IFFALSE 29413
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29368: CALL_OW 45
29372: PPUSH
29373: LD_VAR 0 2
29377: PUSH
29378: LD_INT 1
29380: ARRAY
29381: PPUSH
29382: CALL_OW 250
29386: PPUSH
29387: LD_VAR 0 2
29391: PUSH
29392: LD_INT 1
29394: ARRAY
29395: PPUSH
29396: CALL_OW 251
29400: PPUSH
29401: LD_INT 12
29403: PPUSH
29404: LD_INT 1
29406: PPUSH
29407: CALL_OW 50
29411: GO 29425
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29413: CALL_OW 45
29417: PPUSH
29418: LD_INT 1
29420: PPUSH
29421: CALL_OW 51
// end ;
29425: GO 29299
29427: POP
29428: POP
// end ;
29429: PPOPN 2
29431: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29432: LD_EXP 67
29436: PUSH
29437: LD_EXP 113
29441: AND
29442: IFFALSE 29664
29444: GO 29446
29446: DISABLE
29447: LD_INT 0
29449: PPUSH
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29455: LD_ADDR_VAR 0 6
29459: PUSH
29460: LD_INT 22
29462: PUSH
29463: LD_OWVAR 2
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 21
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 3
29484: PUSH
29485: LD_INT 23
29487: PUSH
29488: LD_INT 0
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: PPUSH
29504: CALL_OW 69
29508: ST_TO_ADDR
// if not tmp then
29509: LD_VAR 0 6
29513: NOT
29514: IFFALSE 29518
// exit ;
29516: GO 29664
// s1 := rand ( 1 , 4 ) ;
29518: LD_ADDR_VAR 0 2
29522: PUSH
29523: LD_INT 1
29525: PPUSH
29526: LD_INT 4
29528: PPUSH
29529: CALL_OW 12
29533: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29534: LD_ADDR_VAR 0 4
29538: PUSH
29539: LD_VAR 0 6
29543: PUSH
29544: LD_INT 1
29546: ARRAY
29547: PPUSH
29548: LD_VAR 0 2
29552: PPUSH
29553: CALL_OW 259
29557: ST_TO_ADDR
// if s1 = 1 then
29558: LD_VAR 0 2
29562: PUSH
29563: LD_INT 1
29565: EQUAL
29566: IFFALSE 29586
// s2 := rand ( 2 , 4 ) else
29568: LD_ADDR_VAR 0 3
29572: PUSH
29573: LD_INT 2
29575: PPUSH
29576: LD_INT 4
29578: PPUSH
29579: CALL_OW 12
29583: ST_TO_ADDR
29584: GO 29594
// s2 := 1 ;
29586: LD_ADDR_VAR 0 3
29590: PUSH
29591: LD_INT 1
29593: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29594: LD_ADDR_VAR 0 5
29598: PUSH
29599: LD_VAR 0 6
29603: PUSH
29604: LD_INT 1
29606: ARRAY
29607: PPUSH
29608: LD_VAR 0 3
29612: PPUSH
29613: CALL_OW 259
29617: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29618: LD_VAR 0 6
29622: PUSH
29623: LD_INT 1
29625: ARRAY
29626: PPUSH
29627: LD_VAR 0 2
29631: PPUSH
29632: LD_VAR 0 5
29636: PPUSH
29637: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29641: LD_VAR 0 6
29645: PUSH
29646: LD_INT 1
29648: ARRAY
29649: PPUSH
29650: LD_VAR 0 3
29654: PPUSH
29655: LD_VAR 0 4
29659: PPUSH
29660: CALL_OW 237
// end ;
29664: PPOPN 6
29666: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29667: LD_EXP 67
29671: PUSH
29672: LD_EXP 114
29676: AND
29677: IFFALSE 29756
29679: GO 29681
29681: DISABLE
29682: LD_INT 0
29684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29685: LD_ADDR_VAR 0 1
29689: PUSH
29690: LD_INT 22
29692: PUSH
29693: LD_OWVAR 2
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 30
29704: PUSH
29705: LD_INT 3
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PPUSH
29716: CALL_OW 69
29720: ST_TO_ADDR
// if not tmp then
29721: LD_VAR 0 1
29725: NOT
29726: IFFALSE 29730
// exit ;
29728: GO 29756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29730: LD_VAR 0 1
29734: PUSH
29735: LD_INT 1
29737: PPUSH
29738: LD_VAR 0 1
29742: PPUSH
29743: CALL_OW 12
29747: ARRAY
29748: PPUSH
29749: LD_INT 1
29751: PPUSH
29752: CALL_OW 234
// end ;
29756: PPOPN 1
29758: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29759: LD_EXP 67
29763: PUSH
29764: LD_EXP 115
29768: AND
29769: IFFALSE 29881
29771: GO 29773
29773: DISABLE
29774: LD_INT 0
29776: PPUSH
29777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29778: LD_ADDR_VAR 0 2
29782: PUSH
29783: LD_INT 22
29785: PUSH
29786: LD_OWVAR 2
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 30
29800: PUSH
29801: LD_INT 27
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 30
29810: PUSH
29811: LD_INT 26
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 30
29820: PUSH
29821: LD_INT 28
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PPUSH
29838: CALL_OW 69
29842: ST_TO_ADDR
// if not tmp then
29843: LD_VAR 0 2
29847: NOT
29848: IFFALSE 29852
// exit ;
29850: GO 29881
// for i in tmp do
29852: LD_ADDR_VAR 0 1
29856: PUSH
29857: LD_VAR 0 2
29861: PUSH
29862: FOR_IN
29863: IFFALSE 29879
// SetLives ( i , 1 ) ;
29865: LD_VAR 0 1
29869: PPUSH
29870: LD_INT 1
29872: PPUSH
29873: CALL_OW 234
29877: GO 29862
29879: POP
29880: POP
// end ;
29881: PPOPN 2
29883: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29884: LD_EXP 67
29888: PUSH
29889: LD_EXP 116
29893: AND
29894: IFFALSE 30181
29896: GO 29898
29898: DISABLE
29899: LD_INT 0
29901: PPUSH
29902: PPUSH
29903: PPUSH
// begin i := rand ( 1 , 7 ) ;
29904: LD_ADDR_VAR 0 1
29908: PUSH
29909: LD_INT 1
29911: PPUSH
29912: LD_INT 7
29914: PPUSH
29915: CALL_OW 12
29919: ST_TO_ADDR
// case i of 1 :
29920: LD_VAR 0 1
29924: PUSH
29925: LD_INT 1
29927: DOUBLE
29928: EQUAL
29929: IFTRUE 29933
29931: GO 29943
29933: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29934: LD_STRING earthquake(getX(game), 0, 32)
29936: PPUSH
29937: CALL_OW 559
29941: GO 30181
29943: LD_INT 2
29945: DOUBLE
29946: EQUAL
29947: IFTRUE 29951
29949: GO 29965
29951: POP
// begin ToLua ( displayStucuk(); ) ;
29952: LD_STRING displayStucuk();
29954: PPUSH
29955: CALL_OW 559
// ResetFog ;
29959: CALL_OW 335
// end ; 3 :
29963: GO 30181
29965: LD_INT 3
29967: DOUBLE
29968: EQUAL
29969: IFTRUE 29973
29971: GO 30077
29973: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29974: LD_ADDR_VAR 0 2
29978: PUSH
29979: LD_INT 22
29981: PUSH
29982: LD_OWVAR 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 25
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PPUSH
30005: CALL_OW 69
30009: ST_TO_ADDR
// if not tmp then
30010: LD_VAR 0 2
30014: NOT
30015: IFFALSE 30019
// exit ;
30017: GO 30181
// un := tmp [ rand ( 1 , tmp ) ] ;
30019: LD_ADDR_VAR 0 3
30023: PUSH
30024: LD_VAR 0 2
30028: PUSH
30029: LD_INT 1
30031: PPUSH
30032: LD_VAR 0 2
30036: PPUSH
30037: CALL_OW 12
30041: ARRAY
30042: ST_TO_ADDR
// if Crawls ( un ) then
30043: LD_VAR 0 3
30047: PPUSH
30048: CALL_OW 318
30052: IFFALSE 30063
// ComWalk ( un ) ;
30054: LD_VAR 0 3
30058: PPUSH
30059: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30063: LD_VAR 0 3
30067: PPUSH
30068: LD_INT 8
30070: PPUSH
30071: CALL_OW 336
// end ; 4 :
30075: GO 30181
30077: LD_INT 4
30079: DOUBLE
30080: EQUAL
30081: IFTRUE 30085
30083: GO 30159
30085: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30086: LD_ADDR_VAR 0 2
30090: PUSH
30091: LD_INT 22
30093: PUSH
30094: LD_OWVAR 2
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 30
30105: PUSH
30106: LD_INT 29
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PPUSH
30117: CALL_OW 69
30121: ST_TO_ADDR
// if not tmp then
30122: LD_VAR 0 2
30126: NOT
30127: IFFALSE 30131
// exit ;
30129: GO 30181
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30131: LD_VAR 0 2
30135: PUSH
30136: LD_INT 1
30138: ARRAY
30139: PPUSH
30140: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30144: LD_VAR 0 2
30148: PUSH
30149: LD_INT 1
30151: ARRAY
30152: PPUSH
30153: CALL_OW 65
// end ; 5 .. 7 :
30157: GO 30181
30159: LD_INT 5
30161: DOUBLE
30162: GREATEREQUAL
30163: IFFALSE 30171
30165: LD_INT 7
30167: DOUBLE
30168: LESSEQUAL
30169: IFTRUE 30173
30171: GO 30180
30173: POP
// StreamSibBomb ; end ;
30174: CALL 26418 0 0
30178: GO 30181
30180: POP
// end ;
30181: PPOPN 3
30183: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30184: LD_EXP 67
30188: PUSH
30189: LD_EXP 117
30193: AND
30194: IFFALSE 30350
30196: GO 30198
30198: DISABLE
30199: LD_INT 0
30201: PPUSH
30202: PPUSH
30203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30204: LD_ADDR_VAR 0 2
30208: PUSH
30209: LD_INT 81
30211: PUSH
30212: LD_OWVAR 2
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: LD_INT 21
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 21
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PPUSH
30253: CALL_OW 69
30257: ST_TO_ADDR
// if not tmp then
30258: LD_VAR 0 2
30262: NOT
30263: IFFALSE 30267
// exit ;
30265: GO 30350
// p := 0 ;
30267: LD_ADDR_VAR 0 3
30271: PUSH
30272: LD_INT 0
30274: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30275: LD_INT 35
30277: PPUSH
30278: CALL_OW 67
// p := p + 1 ;
30282: LD_ADDR_VAR 0 3
30286: PUSH
30287: LD_VAR 0 3
30291: PUSH
30292: LD_INT 1
30294: PLUS
30295: ST_TO_ADDR
// for i in tmp do
30296: LD_ADDR_VAR 0 1
30300: PUSH
30301: LD_VAR 0 2
30305: PUSH
30306: FOR_IN
30307: IFFALSE 30338
// if GetLives ( i ) < 1000 then
30309: LD_VAR 0 1
30313: PPUSH
30314: CALL_OW 256
30318: PUSH
30319: LD_INT 1000
30321: LESS
30322: IFFALSE 30336
// SetLives ( i , 1000 ) ;
30324: LD_VAR 0 1
30328: PPUSH
30329: LD_INT 1000
30331: PPUSH
30332: CALL_OW 234
30336: GO 30306
30338: POP
30339: POP
// until p > 20 ;
30340: LD_VAR 0 3
30344: PUSH
30345: LD_INT 20
30347: GREATER
30348: IFFALSE 30275
// end ;
30350: PPOPN 3
30352: END
// every 0 0$1 trigger StreamModeActive and sTime do
30353: LD_EXP 67
30357: PUSH
30358: LD_EXP 118
30362: AND
30363: IFFALSE 30398
30365: GO 30367
30367: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30368: LD_INT 28
30370: PPUSH
30371: LD_OWVAR 2
30375: PPUSH
30376: LD_INT 2
30378: PPUSH
30379: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30383: LD_INT 30
30385: PPUSH
30386: LD_OWVAR 2
30390: PPUSH
30391: LD_INT 2
30393: PPUSH
30394: CALL_OW 322
// end ;
30398: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30399: LD_EXP 67
30403: PUSH
30404: LD_EXP 119
30408: AND
30409: IFFALSE 30530
30411: GO 30413
30413: DISABLE
30414: LD_INT 0
30416: PPUSH
30417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30418: LD_ADDR_VAR 0 2
30422: PUSH
30423: LD_INT 22
30425: PUSH
30426: LD_OWVAR 2
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 21
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: LD_INT 23
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: PPUSH
30467: CALL_OW 69
30471: ST_TO_ADDR
// if not tmp then
30472: LD_VAR 0 2
30476: NOT
30477: IFFALSE 30481
// exit ;
30479: GO 30530
// for i in tmp do
30481: LD_ADDR_VAR 0 1
30485: PUSH
30486: LD_VAR 0 2
30490: PUSH
30491: FOR_IN
30492: IFFALSE 30528
// begin if Crawls ( i ) then
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 318
30503: IFFALSE 30514
// ComWalk ( i ) ;
30505: LD_VAR 0 1
30509: PPUSH
30510: CALL_OW 138
// SetClass ( i , 2 ) ;
30514: LD_VAR 0 1
30518: PPUSH
30519: LD_INT 2
30521: PPUSH
30522: CALL_OW 336
// end ;
30526: GO 30491
30528: POP
30529: POP
// end ;
30530: PPOPN 2
30532: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30533: LD_EXP 67
30537: PUSH
30538: LD_EXP 120
30542: AND
30543: IFFALSE 30831
30545: GO 30547
30547: DISABLE
30548: LD_INT 0
30550: PPUSH
30551: PPUSH
30552: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30553: LD_OWVAR 2
30557: PPUSH
30558: LD_INT 9
30560: PPUSH
30561: LD_INT 1
30563: PPUSH
30564: LD_INT 1
30566: PPUSH
30567: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30571: LD_INT 9
30573: PPUSH
30574: LD_OWVAR 2
30578: PPUSH
30579: CALL_OW 343
// uc_side := 9 ;
30583: LD_ADDR_OWVAR 20
30587: PUSH
30588: LD_INT 9
30590: ST_TO_ADDR
// uc_nation := 2 ;
30591: LD_ADDR_OWVAR 21
30595: PUSH
30596: LD_INT 2
30598: ST_TO_ADDR
// hc_name := Dark Warrior ;
30599: LD_ADDR_OWVAR 26
30603: PUSH
30604: LD_STRING Dark Warrior
30606: ST_TO_ADDR
// hc_gallery :=  ;
30607: LD_ADDR_OWVAR 33
30611: PUSH
30612: LD_STRING 
30614: ST_TO_ADDR
// hc_noskilllimit := true ;
30615: LD_ADDR_OWVAR 76
30619: PUSH
30620: LD_INT 1
30622: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30623: LD_ADDR_OWVAR 31
30627: PUSH
30628: LD_INT 30
30630: PUSH
30631: LD_INT 30
30633: PUSH
30634: LD_INT 30
30636: PUSH
30637: LD_INT 30
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// un := CreateHuman ;
30646: LD_ADDR_VAR 0 3
30650: PUSH
30651: CALL_OW 44
30655: ST_TO_ADDR
// hc_noskilllimit := false ;
30656: LD_ADDR_OWVAR 76
30660: PUSH
30661: LD_INT 0
30663: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30664: LD_VAR 0 3
30668: PPUSH
30669: LD_INT 1
30671: PPUSH
30672: CALL_OW 51
// ToLua ( playRanger() ) ;
30676: LD_STRING playRanger()
30678: PPUSH
30679: CALL_OW 559
// p := 0 ;
30683: LD_ADDR_VAR 0 2
30687: PUSH
30688: LD_INT 0
30690: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30691: LD_INT 35
30693: PPUSH
30694: CALL_OW 67
// p := p + 1 ;
30698: LD_ADDR_VAR 0 2
30702: PUSH
30703: LD_VAR 0 2
30707: PUSH
30708: LD_INT 1
30710: PLUS
30711: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30712: LD_VAR 0 3
30716: PPUSH
30717: CALL_OW 256
30721: PUSH
30722: LD_INT 1000
30724: LESS
30725: IFFALSE 30739
// SetLives ( un , 1000 ) ;
30727: LD_VAR 0 3
30731: PPUSH
30732: LD_INT 1000
30734: PPUSH
30735: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30739: LD_VAR 0 3
30743: PPUSH
30744: LD_INT 81
30746: PUSH
30747: LD_OWVAR 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 91
30758: PUSH
30759: LD_VAR 0 3
30763: PUSH
30764: LD_INT 30
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PPUSH
30776: CALL_OW 69
30780: PPUSH
30781: LD_VAR 0 3
30785: PPUSH
30786: CALL_OW 74
30790: PPUSH
30791: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30795: LD_VAR 0 2
30799: PUSH
30800: LD_INT 80
30802: GREATER
30803: PUSH
30804: LD_VAR 0 3
30808: PPUSH
30809: CALL_OW 301
30813: OR
30814: IFFALSE 30691
// if un then
30816: LD_VAR 0 3
30820: IFFALSE 30831
// RemoveUnit ( un ) ;
30822: LD_VAR 0 3
30826: PPUSH
30827: CALL_OW 64
// end ;
30831: PPOPN 3
30833: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30834: LD_EXP 121
30838: IFFALSE 30954
30840: GO 30842
30842: DISABLE
30843: LD_INT 0
30845: PPUSH
30846: PPUSH
30847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30848: LD_ADDR_VAR 0 2
30852: PUSH
30853: LD_INT 81
30855: PUSH
30856: LD_OWVAR 2
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 21
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PPUSH
30879: CALL_OW 69
30883: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30884: LD_STRING playComputer()
30886: PPUSH
30887: CALL_OW 559
// if not tmp then
30891: LD_VAR 0 2
30895: NOT
30896: IFFALSE 30900
// exit ;
30898: GO 30954
// for i in tmp do
30900: LD_ADDR_VAR 0 1
30904: PUSH
30905: LD_VAR 0 2
30909: PUSH
30910: FOR_IN
30911: IFFALSE 30952
// for j := 1 to 4 do
30913: LD_ADDR_VAR 0 3
30917: PUSH
30918: DOUBLE
30919: LD_INT 1
30921: DEC
30922: ST_TO_ADDR
30923: LD_INT 4
30925: PUSH
30926: FOR_TO
30927: IFFALSE 30948
// SetSkill ( i , j , 10 ) ;
30929: LD_VAR 0 1
30933: PPUSH
30934: LD_VAR 0 3
30938: PPUSH
30939: LD_INT 10
30941: PPUSH
30942: CALL_OW 237
30946: GO 30926
30948: POP
30949: POP
30950: GO 30910
30952: POP
30953: POP
// end ;
30954: PPOPN 3
30956: END
// every 0 0$1 trigger s30 do var i , tmp ;
30957: LD_EXP 122
30961: IFFALSE 31030
30963: GO 30965
30965: DISABLE
30966: LD_INT 0
30968: PPUSH
30969: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30970: LD_ADDR_VAR 0 2
30974: PUSH
30975: LD_INT 22
30977: PUSH
30978: LD_OWVAR 2
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PPUSH
30987: CALL_OW 69
30991: ST_TO_ADDR
// if not tmp then
30992: LD_VAR 0 2
30996: NOT
30997: IFFALSE 31001
// exit ;
30999: GO 31030
// for i in tmp do
31001: LD_ADDR_VAR 0 1
31005: PUSH
31006: LD_VAR 0 2
31010: PUSH
31011: FOR_IN
31012: IFFALSE 31028
// SetLives ( i , 300 ) ;
31014: LD_VAR 0 1
31018: PPUSH
31019: LD_INT 300
31021: PPUSH
31022: CALL_OW 234
31026: GO 31011
31028: POP
31029: POP
// end ;
31030: PPOPN 2
31032: END
// every 0 0$1 trigger s60 do var i , tmp ;
31033: LD_EXP 123
31037: IFFALSE 31106
31039: GO 31041
31041: DISABLE
31042: LD_INT 0
31044: PPUSH
31045: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31046: LD_ADDR_VAR 0 2
31050: PUSH
31051: LD_INT 22
31053: PUSH
31054: LD_OWVAR 2
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PPUSH
31063: CALL_OW 69
31067: ST_TO_ADDR
// if not tmp then
31068: LD_VAR 0 2
31072: NOT
31073: IFFALSE 31077
// exit ;
31075: GO 31106
// for i in tmp do
31077: LD_ADDR_VAR 0 1
31081: PUSH
31082: LD_VAR 0 2
31086: PUSH
31087: FOR_IN
31088: IFFALSE 31104
// SetLives ( i , 600 ) ;
31090: LD_VAR 0 1
31094: PPUSH
31095: LD_INT 600
31097: PPUSH
31098: CALL_OW 234
31102: GO 31087
31104: POP
31105: POP
// end ;
31106: PPOPN 2
31108: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31109: LD_INT 0
31111: PPUSH
// case cmd of 301 :
31112: LD_VAR 0 1
31116: PUSH
31117: LD_INT 301
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31125
31123: GO 31157
31125: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31126: LD_VAR 0 6
31130: PPUSH
31131: LD_VAR 0 7
31135: PPUSH
31136: LD_VAR 0 8
31140: PPUSH
31141: LD_VAR 0 4
31145: PPUSH
31146: LD_VAR 0 5
31150: PPUSH
31151: CALL 32358 0 5
31155: GO 31278
31157: LD_INT 302
31159: DOUBLE
31160: EQUAL
31161: IFTRUE 31165
31163: GO 31202
31165: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31166: LD_VAR 0 6
31170: PPUSH
31171: LD_VAR 0 7
31175: PPUSH
31176: LD_VAR 0 8
31180: PPUSH
31181: LD_VAR 0 9
31185: PPUSH
31186: LD_VAR 0 4
31190: PPUSH
31191: LD_VAR 0 5
31195: PPUSH
31196: CALL 32449 0 6
31200: GO 31278
31202: LD_INT 303
31204: DOUBLE
31205: EQUAL
31206: IFTRUE 31210
31208: GO 31247
31210: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31211: LD_VAR 0 6
31215: PPUSH
31216: LD_VAR 0 7
31220: PPUSH
31221: LD_VAR 0 8
31225: PPUSH
31226: LD_VAR 0 9
31230: PPUSH
31231: LD_VAR 0 4
31235: PPUSH
31236: LD_VAR 0 5
31240: PPUSH
31241: CALL 31283 0 6
31245: GO 31278
31247: LD_INT 304
31249: DOUBLE
31250: EQUAL
31251: IFTRUE 31255
31253: GO 31277
31255: POP
// hHackTeleport ( unit , x , y ) ; end ;
31256: LD_VAR 0 2
31260: PPUSH
31261: LD_VAR 0 4
31265: PPUSH
31266: LD_VAR 0 5
31270: PPUSH
31271: CALL 33042 0 3
31275: GO 31278
31277: POP
// end ;
31278: LD_VAR 0 12
31282: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31283: LD_INT 0
31285: PPUSH
31286: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31287: LD_VAR 0 1
31291: PUSH
31292: LD_INT 1
31294: LESS
31295: PUSH
31296: LD_VAR 0 1
31300: PUSH
31301: LD_INT 3
31303: GREATER
31304: OR
31305: PUSH
31306: LD_VAR 0 5
31310: PPUSH
31311: LD_VAR 0 6
31315: PPUSH
31316: CALL_OW 428
31320: OR
31321: IFFALSE 31325
// exit ;
31323: GO 32045
// uc_side := your_side ;
31325: LD_ADDR_OWVAR 20
31329: PUSH
31330: LD_OWVAR 2
31334: ST_TO_ADDR
// uc_nation := nation ;
31335: LD_ADDR_OWVAR 21
31339: PUSH
31340: LD_VAR 0 1
31344: ST_TO_ADDR
// bc_level = 1 ;
31345: LD_ADDR_OWVAR 43
31349: PUSH
31350: LD_INT 1
31352: ST_TO_ADDR
// case btype of 1 :
31353: LD_VAR 0 2
31357: PUSH
31358: LD_INT 1
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31377
31366: POP
// bc_type := b_depot ; 2 :
31367: LD_ADDR_OWVAR 42
31371: PUSH
31372: LD_INT 0
31374: ST_TO_ADDR
31375: GO 31989
31377: LD_INT 2
31379: DOUBLE
31380: EQUAL
31381: IFTRUE 31385
31383: GO 31396
31385: POP
// bc_type := b_warehouse ; 3 :
31386: LD_ADDR_OWVAR 42
31390: PUSH
31391: LD_INT 1
31393: ST_TO_ADDR
31394: GO 31989
31396: LD_INT 3
31398: DOUBLE
31399: EQUAL
31400: IFTRUE 31404
31402: GO 31415
31404: POP
// bc_type := b_lab ; 4 .. 9 :
31405: LD_ADDR_OWVAR 42
31409: PUSH
31410: LD_INT 6
31412: ST_TO_ADDR
31413: GO 31989
31415: LD_INT 4
31417: DOUBLE
31418: GREATEREQUAL
31419: IFFALSE 31427
31421: LD_INT 9
31423: DOUBLE
31424: LESSEQUAL
31425: IFTRUE 31429
31427: GO 31481
31429: POP
// begin bc_type := b_lab_half ;
31430: LD_ADDR_OWVAR 42
31434: PUSH
31435: LD_INT 7
31437: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31438: LD_ADDR_OWVAR 44
31442: PUSH
31443: LD_INT 10
31445: PUSH
31446: LD_INT 11
31448: PUSH
31449: LD_INT 12
31451: PUSH
31452: LD_INT 15
31454: PUSH
31455: LD_INT 14
31457: PUSH
31458: LD_INT 13
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: PUSH
31469: LD_VAR 0 2
31473: PUSH
31474: LD_INT 3
31476: MINUS
31477: ARRAY
31478: ST_TO_ADDR
// end ; 10 .. 13 :
31479: GO 31989
31481: LD_INT 10
31483: DOUBLE
31484: GREATEREQUAL
31485: IFFALSE 31493
31487: LD_INT 13
31489: DOUBLE
31490: LESSEQUAL
31491: IFTRUE 31495
31493: GO 31572
31495: POP
// begin bc_type := b_lab_full ;
31496: LD_ADDR_OWVAR 42
31500: PUSH
31501: LD_INT 8
31503: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31504: LD_ADDR_OWVAR 44
31508: PUSH
31509: LD_INT 10
31511: PUSH
31512: LD_INT 12
31514: PUSH
31515: LD_INT 14
31517: PUSH
31518: LD_INT 13
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: PUSH
31527: LD_VAR 0 2
31531: PUSH
31532: LD_INT 9
31534: MINUS
31535: ARRAY
31536: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31537: LD_ADDR_OWVAR 45
31541: PUSH
31542: LD_INT 11
31544: PUSH
31545: LD_INT 15
31547: PUSH
31548: LD_INT 12
31550: PUSH
31551: LD_INT 15
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: PUSH
31560: LD_VAR 0 2
31564: PUSH
31565: LD_INT 9
31567: MINUS
31568: ARRAY
31569: ST_TO_ADDR
// end ; 14 :
31570: GO 31989
31572: LD_INT 14
31574: DOUBLE
31575: EQUAL
31576: IFTRUE 31580
31578: GO 31591
31580: POP
// bc_type := b_workshop ; 15 :
31581: LD_ADDR_OWVAR 42
31585: PUSH
31586: LD_INT 2
31588: ST_TO_ADDR
31589: GO 31989
31591: LD_INT 15
31593: DOUBLE
31594: EQUAL
31595: IFTRUE 31599
31597: GO 31610
31599: POP
// bc_type := b_factory ; 16 :
31600: LD_ADDR_OWVAR 42
31604: PUSH
31605: LD_INT 3
31607: ST_TO_ADDR
31608: GO 31989
31610: LD_INT 16
31612: DOUBLE
31613: EQUAL
31614: IFTRUE 31618
31616: GO 31629
31618: POP
// bc_type := b_ext_gun ; 17 :
31619: LD_ADDR_OWVAR 42
31623: PUSH
31624: LD_INT 17
31626: ST_TO_ADDR
31627: GO 31989
31629: LD_INT 17
31631: DOUBLE
31632: EQUAL
31633: IFTRUE 31637
31635: GO 31665
31637: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31638: LD_ADDR_OWVAR 42
31642: PUSH
31643: LD_INT 19
31645: PUSH
31646: LD_INT 23
31648: PUSH
31649: LD_INT 19
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: PUSH
31657: LD_VAR 0 1
31661: ARRAY
31662: ST_TO_ADDR
31663: GO 31989
31665: LD_INT 18
31667: DOUBLE
31668: EQUAL
31669: IFTRUE 31673
31671: GO 31684
31673: POP
// bc_type := b_ext_radar ; 19 :
31674: LD_ADDR_OWVAR 42
31678: PUSH
31679: LD_INT 20
31681: ST_TO_ADDR
31682: GO 31989
31684: LD_INT 19
31686: DOUBLE
31687: EQUAL
31688: IFTRUE 31692
31690: GO 31703
31692: POP
// bc_type := b_ext_radio ; 20 :
31693: LD_ADDR_OWVAR 42
31697: PUSH
31698: LD_INT 22
31700: ST_TO_ADDR
31701: GO 31989
31703: LD_INT 20
31705: DOUBLE
31706: EQUAL
31707: IFTRUE 31711
31709: GO 31722
31711: POP
// bc_type := b_ext_siberium ; 21 :
31712: LD_ADDR_OWVAR 42
31716: PUSH
31717: LD_INT 21
31719: ST_TO_ADDR
31720: GO 31989
31722: LD_INT 21
31724: DOUBLE
31725: EQUAL
31726: IFTRUE 31730
31728: GO 31741
31730: POP
// bc_type := b_ext_computer ; 22 :
31731: LD_ADDR_OWVAR 42
31735: PUSH
31736: LD_INT 24
31738: ST_TO_ADDR
31739: GO 31989
31741: LD_INT 22
31743: DOUBLE
31744: EQUAL
31745: IFTRUE 31749
31747: GO 31760
31749: POP
// bc_type := b_ext_track ; 23 :
31750: LD_ADDR_OWVAR 42
31754: PUSH
31755: LD_INT 16
31757: ST_TO_ADDR
31758: GO 31989
31760: LD_INT 23
31762: DOUBLE
31763: EQUAL
31764: IFTRUE 31768
31766: GO 31779
31768: POP
// bc_type := b_ext_laser ; 24 :
31769: LD_ADDR_OWVAR 42
31773: PUSH
31774: LD_INT 25
31776: ST_TO_ADDR
31777: GO 31989
31779: LD_INT 24
31781: DOUBLE
31782: EQUAL
31783: IFTRUE 31787
31785: GO 31798
31787: POP
// bc_type := b_control_tower ; 25 :
31788: LD_ADDR_OWVAR 42
31792: PUSH
31793: LD_INT 36
31795: ST_TO_ADDR
31796: GO 31989
31798: LD_INT 25
31800: DOUBLE
31801: EQUAL
31802: IFTRUE 31806
31804: GO 31817
31806: POP
// bc_type := b_breastwork ; 26 :
31807: LD_ADDR_OWVAR 42
31811: PUSH
31812: LD_INT 31
31814: ST_TO_ADDR
31815: GO 31989
31817: LD_INT 26
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31825
31823: GO 31836
31825: POP
// bc_type := b_bunker ; 27 :
31826: LD_ADDR_OWVAR 42
31830: PUSH
31831: LD_INT 32
31833: ST_TO_ADDR
31834: GO 31989
31836: LD_INT 27
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 31855
31844: POP
// bc_type := b_turret ; 28 :
31845: LD_ADDR_OWVAR 42
31849: PUSH
31850: LD_INT 33
31852: ST_TO_ADDR
31853: GO 31989
31855: LD_INT 28
31857: DOUBLE
31858: EQUAL
31859: IFTRUE 31863
31861: GO 31874
31863: POP
// bc_type := b_armoury ; 29 :
31864: LD_ADDR_OWVAR 42
31868: PUSH
31869: LD_INT 4
31871: ST_TO_ADDR
31872: GO 31989
31874: LD_INT 29
31876: DOUBLE
31877: EQUAL
31878: IFTRUE 31882
31880: GO 31893
31882: POP
// bc_type := b_barracks ; 30 :
31883: LD_ADDR_OWVAR 42
31887: PUSH
31888: LD_INT 5
31890: ST_TO_ADDR
31891: GO 31989
31893: LD_INT 30
31895: DOUBLE
31896: EQUAL
31897: IFTRUE 31901
31899: GO 31912
31901: POP
// bc_type := b_solar_power ; 31 :
31902: LD_ADDR_OWVAR 42
31906: PUSH
31907: LD_INT 27
31909: ST_TO_ADDR
31910: GO 31989
31912: LD_INT 31
31914: DOUBLE
31915: EQUAL
31916: IFTRUE 31920
31918: GO 31931
31920: POP
// bc_type := b_oil_power ; 32 :
31921: LD_ADDR_OWVAR 42
31925: PUSH
31926: LD_INT 26
31928: ST_TO_ADDR
31929: GO 31989
31931: LD_INT 32
31933: DOUBLE
31934: EQUAL
31935: IFTRUE 31939
31937: GO 31950
31939: POP
// bc_type := b_siberite_power ; 33 :
31940: LD_ADDR_OWVAR 42
31944: PUSH
31945: LD_INT 28
31947: ST_TO_ADDR
31948: GO 31989
31950: LD_INT 33
31952: DOUBLE
31953: EQUAL
31954: IFTRUE 31958
31956: GO 31969
31958: POP
// bc_type := b_oil_mine ; 34 :
31959: LD_ADDR_OWVAR 42
31963: PUSH
31964: LD_INT 29
31966: ST_TO_ADDR
31967: GO 31989
31969: LD_INT 34
31971: DOUBLE
31972: EQUAL
31973: IFTRUE 31977
31975: GO 31988
31977: POP
// bc_type := b_siberite_mine ; end ;
31978: LD_ADDR_OWVAR 42
31982: PUSH
31983: LD_INT 30
31985: ST_TO_ADDR
31986: GO 31989
31988: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31989: LD_ADDR_VAR 0 8
31993: PUSH
31994: LD_VAR 0 5
31998: PPUSH
31999: LD_VAR 0 6
32003: PPUSH
32004: LD_VAR 0 3
32008: PPUSH
32009: CALL_OW 47
32013: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32014: LD_OWVAR 42
32018: PUSH
32019: LD_INT 32
32021: PUSH
32022: LD_INT 33
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: IN
32029: IFFALSE 32045
// PlaceWeaponTurret ( b , weapon ) ;
32031: LD_VAR 0 8
32035: PPUSH
32036: LD_VAR 0 4
32040: PPUSH
32041: CALL_OW 431
// end ;
32045: LD_VAR 0 7
32049: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32050: LD_INT 0
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32056: LD_ADDR_VAR 0 4
32060: PUSH
32061: LD_INT 22
32063: PUSH
32064: LD_OWVAR 2
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 30
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 30
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: LIST
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PPUSH
32105: CALL_OW 69
32109: ST_TO_ADDR
// if not tmp then
32110: LD_VAR 0 4
32114: NOT
32115: IFFALSE 32119
// exit ;
32117: GO 32178
// for i in tmp do
32119: LD_ADDR_VAR 0 2
32123: PUSH
32124: LD_VAR 0 4
32128: PUSH
32129: FOR_IN
32130: IFFALSE 32176
// for j = 1 to 3 do
32132: LD_ADDR_VAR 0 3
32136: PUSH
32137: DOUBLE
32138: LD_INT 1
32140: DEC
32141: ST_TO_ADDR
32142: LD_INT 3
32144: PUSH
32145: FOR_TO
32146: IFFALSE 32172
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32148: LD_VAR 0 2
32152: PPUSH
32153: CALL_OW 274
32157: PPUSH
32158: LD_VAR 0 3
32162: PPUSH
32163: LD_INT 99999
32165: PPUSH
32166: CALL_OW 277
32170: GO 32145
32172: POP
32173: POP
32174: GO 32129
32176: POP
32177: POP
// end ;
32178: LD_VAR 0 1
32182: RET
// export function hHackSetLevel10 ; var i , j ; begin
32183: LD_INT 0
32185: PPUSH
32186: PPUSH
32187: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32188: LD_ADDR_VAR 0 2
32192: PUSH
32193: LD_INT 21
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PPUSH
32203: CALL_OW 69
32207: PUSH
32208: FOR_IN
32209: IFFALSE 32261
// if IsSelected ( i ) then
32211: LD_VAR 0 2
32215: PPUSH
32216: CALL_OW 306
32220: IFFALSE 32259
// begin for j := 1 to 4 do
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: DOUBLE
32228: LD_INT 1
32230: DEC
32231: ST_TO_ADDR
32232: LD_INT 4
32234: PUSH
32235: FOR_TO
32236: IFFALSE 32257
// SetSkill ( i , j , 10 ) ;
32238: LD_VAR 0 2
32242: PPUSH
32243: LD_VAR 0 3
32247: PPUSH
32248: LD_INT 10
32250: PPUSH
32251: CALL_OW 237
32255: GO 32235
32257: POP
32258: POP
// end ;
32259: GO 32208
32261: POP
32262: POP
// end ;
32263: LD_VAR 0 1
32267: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32268: LD_INT 0
32270: PPUSH
32271: PPUSH
32272: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32273: LD_ADDR_VAR 0 2
32277: PUSH
32278: LD_INT 22
32280: PUSH
32281: LD_OWVAR 2
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 21
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PPUSH
32304: CALL_OW 69
32308: PUSH
32309: FOR_IN
32310: IFFALSE 32351
// begin for j := 1 to 4 do
32312: LD_ADDR_VAR 0 3
32316: PUSH
32317: DOUBLE
32318: LD_INT 1
32320: DEC
32321: ST_TO_ADDR
32322: LD_INT 4
32324: PUSH
32325: FOR_TO
32326: IFFALSE 32347
// SetSkill ( i , j , 10 ) ;
32328: LD_VAR 0 2
32332: PPUSH
32333: LD_VAR 0 3
32337: PPUSH
32338: LD_INT 10
32340: PPUSH
32341: CALL_OW 237
32345: GO 32325
32347: POP
32348: POP
// end ;
32349: GO 32309
32351: POP
32352: POP
// end ;
32353: LD_VAR 0 1
32357: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32358: LD_INT 0
32360: PPUSH
// uc_side := your_side ;
32361: LD_ADDR_OWVAR 20
32365: PUSH
32366: LD_OWVAR 2
32370: ST_TO_ADDR
// uc_nation := nation ;
32371: LD_ADDR_OWVAR 21
32375: PUSH
32376: LD_VAR 0 1
32380: ST_TO_ADDR
// InitHc ;
32381: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32385: LD_INT 0
32387: PPUSH
32388: LD_VAR 0 2
32392: PPUSH
32393: LD_VAR 0 3
32397: PPUSH
32398: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32402: LD_VAR 0 4
32406: PPUSH
32407: LD_VAR 0 5
32411: PPUSH
32412: CALL_OW 428
32416: PUSH
32417: LD_INT 0
32419: EQUAL
32420: IFFALSE 32444
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32422: CALL_OW 44
32426: PPUSH
32427: LD_VAR 0 4
32431: PPUSH
32432: LD_VAR 0 5
32436: PPUSH
32437: LD_INT 1
32439: PPUSH
32440: CALL_OW 48
// end ;
32444: LD_VAR 0 6
32448: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32449: LD_INT 0
32451: PPUSH
32452: PPUSH
// uc_side := your_side ;
32453: LD_ADDR_OWVAR 20
32457: PUSH
32458: LD_OWVAR 2
32462: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32463: LD_VAR 0 1
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 2
32473: PUSH
32474: LD_INT 3
32476: PUSH
32477: LD_INT 4
32479: PUSH
32480: LD_INT 5
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: IN
32490: IFFALSE 32502
// uc_nation := nation_american else
32492: LD_ADDR_OWVAR 21
32496: PUSH
32497: LD_INT 1
32499: ST_TO_ADDR
32500: GO 32545
// if chassis in [ 11 , 12 , 13 , 14 ] then
32502: LD_VAR 0 1
32506: PUSH
32507: LD_INT 11
32509: PUSH
32510: LD_INT 12
32512: PUSH
32513: LD_INT 13
32515: PUSH
32516: LD_INT 14
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: IN
32525: IFFALSE 32537
// uc_nation := nation_arabian else
32527: LD_ADDR_OWVAR 21
32531: PUSH
32532: LD_INT 2
32534: ST_TO_ADDR
32535: GO 32545
// uc_nation := nation_russian ;
32537: LD_ADDR_OWVAR 21
32541: PUSH
32542: LD_INT 3
32544: ST_TO_ADDR
// vc_chassis := chassis ;
32545: LD_ADDR_OWVAR 37
32549: PUSH
32550: LD_VAR 0 1
32554: ST_TO_ADDR
// vc_engine := engine ;
32555: LD_ADDR_OWVAR 39
32559: PUSH
32560: LD_VAR 0 2
32564: ST_TO_ADDR
// vc_control := control ;
32565: LD_ADDR_OWVAR 38
32569: PUSH
32570: LD_VAR 0 3
32574: ST_TO_ADDR
// vc_weapon := weapon ;
32575: LD_ADDR_OWVAR 40
32579: PUSH
32580: LD_VAR 0 4
32584: ST_TO_ADDR
// un := CreateVehicle ;
32585: LD_ADDR_VAR 0 8
32589: PUSH
32590: CALL_OW 45
32594: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32595: LD_VAR 0 8
32599: PPUSH
32600: LD_INT 0
32602: PPUSH
32603: LD_INT 5
32605: PPUSH
32606: CALL_OW 12
32610: PPUSH
32611: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32615: LD_VAR 0 8
32619: PPUSH
32620: LD_VAR 0 5
32624: PPUSH
32625: LD_VAR 0 6
32629: PPUSH
32630: LD_INT 1
32632: PPUSH
32633: CALL_OW 48
// end ;
32637: LD_VAR 0 7
32641: RET
// export hInvincible ; every 1 do
32642: GO 32644
32644: DISABLE
// hInvincible := [ ] ;
32645: LD_ADDR_EXP 124
32649: PUSH
32650: EMPTY
32651: ST_TO_ADDR
32652: END
// every 10 do var i ;
32653: GO 32655
32655: DISABLE
32656: LD_INT 0
32658: PPUSH
// begin enable ;
32659: ENABLE
// if not hInvincible then
32660: LD_EXP 124
32664: NOT
32665: IFFALSE 32669
// exit ;
32667: GO 32713
// for i in hInvincible do
32669: LD_ADDR_VAR 0 1
32673: PUSH
32674: LD_EXP 124
32678: PUSH
32679: FOR_IN
32680: IFFALSE 32711
// if GetLives ( i ) < 1000 then
32682: LD_VAR 0 1
32686: PPUSH
32687: CALL_OW 256
32691: PUSH
32692: LD_INT 1000
32694: LESS
32695: IFFALSE 32709
// SetLives ( i , 1000 ) ;
32697: LD_VAR 0 1
32701: PPUSH
32702: LD_INT 1000
32704: PPUSH
32705: CALL_OW 234
32709: GO 32679
32711: POP
32712: POP
// end ;
32713: PPOPN 1
32715: END
// export function hHackInvincible ; var i ; begin
32716: LD_INT 0
32718: PPUSH
32719: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32720: LD_ADDR_VAR 0 2
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: LD_INT 21
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 21
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: PPUSH
32753: CALL_OW 69
32757: PUSH
32758: FOR_IN
32759: IFFALSE 32820
// if IsSelected ( i ) then
32761: LD_VAR 0 2
32765: PPUSH
32766: CALL_OW 306
32770: IFFALSE 32818
// begin if i in hInvincible then
32772: LD_VAR 0 2
32776: PUSH
32777: LD_EXP 124
32781: IN
32782: IFFALSE 32802
// hInvincible := hInvincible diff i else
32784: LD_ADDR_EXP 124
32788: PUSH
32789: LD_EXP 124
32793: PUSH
32794: LD_VAR 0 2
32798: DIFF
32799: ST_TO_ADDR
32800: GO 32818
// hInvincible := hInvincible union i ;
32802: LD_ADDR_EXP 124
32806: PUSH
32807: LD_EXP 124
32811: PUSH
32812: LD_VAR 0 2
32816: UNION
32817: ST_TO_ADDR
// end ;
32818: GO 32758
32820: POP
32821: POP
// end ;
32822: LD_VAR 0 1
32826: RET
// export function hHackInvisible ; var i , j ; begin
32827: LD_INT 0
32829: PPUSH
32830: PPUSH
32831: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32832: LD_ADDR_VAR 0 2
32836: PUSH
32837: LD_INT 21
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PPUSH
32847: CALL_OW 69
32851: PUSH
32852: FOR_IN
32853: IFFALSE 32877
// if IsSelected ( i ) then
32855: LD_VAR 0 2
32859: PPUSH
32860: CALL_OW 306
32864: IFFALSE 32875
// ComForceInvisible ( i ) ;
32866: LD_VAR 0 2
32870: PPUSH
32871: CALL_OW 496
32875: GO 32852
32877: POP
32878: POP
// end ;
32879: LD_VAR 0 1
32883: RET
// export function hHackChangeYourSide ; begin
32884: LD_INT 0
32886: PPUSH
// if your_side = 8 then
32887: LD_OWVAR 2
32891: PUSH
32892: LD_INT 8
32894: EQUAL
32895: IFFALSE 32907
// your_side := 0 else
32897: LD_ADDR_OWVAR 2
32901: PUSH
32902: LD_INT 0
32904: ST_TO_ADDR
32905: GO 32921
// your_side := your_side + 1 ;
32907: LD_ADDR_OWVAR 2
32911: PUSH
32912: LD_OWVAR 2
32916: PUSH
32917: LD_INT 1
32919: PLUS
32920: ST_TO_ADDR
// end ;
32921: LD_VAR 0 1
32925: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32926: LD_INT 0
32928: PPUSH
32929: PPUSH
32930: PPUSH
// for i in all_units do
32931: LD_ADDR_VAR 0 2
32935: PUSH
32936: LD_OWVAR 3
32940: PUSH
32941: FOR_IN
32942: IFFALSE 33020
// if IsSelected ( i ) then
32944: LD_VAR 0 2
32948: PPUSH
32949: CALL_OW 306
32953: IFFALSE 33018
// begin j := GetSide ( i ) ;
32955: LD_ADDR_VAR 0 3
32959: PUSH
32960: LD_VAR 0 2
32964: PPUSH
32965: CALL_OW 255
32969: ST_TO_ADDR
// if j = 8 then
32970: LD_VAR 0 3
32974: PUSH
32975: LD_INT 8
32977: EQUAL
32978: IFFALSE 32990
// j := 0 else
32980: LD_ADDR_VAR 0 3
32984: PUSH
32985: LD_INT 0
32987: ST_TO_ADDR
32988: GO 33004
// j := j + 1 ;
32990: LD_ADDR_VAR 0 3
32994: PUSH
32995: LD_VAR 0 3
32999: PUSH
33000: LD_INT 1
33002: PLUS
33003: ST_TO_ADDR
// SetSide ( i , j ) ;
33004: LD_VAR 0 2
33008: PPUSH
33009: LD_VAR 0 3
33013: PPUSH
33014: CALL_OW 235
// end ;
33018: GO 32941
33020: POP
33021: POP
// end ;
33022: LD_VAR 0 1
33026: RET
// export function hHackFog ; begin
33027: LD_INT 0
33029: PPUSH
// FogOff ( true ) ;
33030: LD_INT 1
33032: PPUSH
33033: CALL_OW 344
// end ;
33037: LD_VAR 0 1
33041: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33042: LD_INT 0
33044: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33045: LD_VAR 0 1
33049: PPUSH
33050: LD_VAR 0 2
33054: PPUSH
33055: LD_VAR 0 3
33059: PPUSH
33060: LD_INT 1
33062: PPUSH
33063: LD_INT 1
33065: PPUSH
33066: CALL_OW 483
// CenterOnXY ( x , y ) ;
33070: LD_VAR 0 2
33074: PPUSH
33075: LD_VAR 0 3
33079: PPUSH
33080: CALL_OW 84
// end ;
33084: LD_VAR 0 4
33088: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33089: LD_INT 0
33091: PPUSH
33092: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33093: LD_VAR 0 1
33097: NOT
33098: PUSH
33099: LD_VAR 0 2
33103: PPUSH
33104: LD_VAR 0 3
33108: PPUSH
33109: CALL_OW 488
33113: NOT
33114: OR
33115: PUSH
33116: LD_VAR 0 1
33120: PPUSH
33121: CALL_OW 266
33125: PUSH
33126: LD_INT 3
33128: NONEQUAL
33129: PUSH
33130: LD_VAR 0 1
33134: PPUSH
33135: CALL_OW 247
33139: PUSH
33140: LD_INT 1
33142: EQUAL
33143: NOT
33144: AND
33145: OR
33146: IFFALSE 33150
// exit ;
33148: GO 33299
// if GetType ( factory ) = unit_human then
33150: LD_VAR 0 1
33154: PPUSH
33155: CALL_OW 247
33159: PUSH
33160: LD_INT 1
33162: EQUAL
33163: IFFALSE 33180
// factory := IsInUnit ( factory ) ;
33165: LD_ADDR_VAR 0 1
33169: PUSH
33170: LD_VAR 0 1
33174: PPUSH
33175: CALL_OW 310
33179: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33180: LD_VAR 0 1
33184: PPUSH
33185: CALL_OW 266
33189: PUSH
33190: LD_INT 3
33192: NONEQUAL
33193: IFFALSE 33197
// exit ;
33195: GO 33299
// if HexInfo ( x , y ) = factory then
33197: LD_VAR 0 2
33201: PPUSH
33202: LD_VAR 0 3
33206: PPUSH
33207: CALL_OW 428
33211: PUSH
33212: LD_VAR 0 1
33216: EQUAL
33217: IFFALSE 33244
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33219: LD_ADDR_EXP 125
33223: PUSH
33224: LD_EXP 125
33228: PPUSH
33229: LD_VAR 0 1
33233: PPUSH
33234: LD_INT 0
33236: PPUSH
33237: CALL_OW 1
33241: ST_TO_ADDR
33242: GO 33295
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33244: LD_ADDR_EXP 125
33248: PUSH
33249: LD_EXP 125
33253: PPUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_VAR 0 1
33263: PPUSH
33264: CALL_OW 255
33268: PUSH
33269: LD_VAR 0 1
33273: PUSH
33274: LD_VAR 0 2
33278: PUSH
33279: LD_VAR 0 3
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: PPUSH
33290: CALL_OW 1
33294: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33295: CALL 33304 0 0
// end ;
33299: LD_VAR 0 4
33303: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33304: LD_INT 0
33306: PPUSH
33307: PPUSH
33308: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33309: LD_STRING resetFactoryWaypoint();
33311: PPUSH
33312: CALL_OW 559
// if factoryWaypoints then
33316: LD_EXP 125
33320: IFFALSE 33446
// begin list := PrepareArray ( factoryWaypoints ) ;
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_EXP 125
33331: PPUSH
33332: CALL 80078 0 1
33336: ST_TO_ADDR
// for i := 1 to list do
33337: LD_ADDR_VAR 0 2
33341: PUSH
33342: DOUBLE
33343: LD_INT 1
33345: DEC
33346: ST_TO_ADDR
33347: LD_VAR 0 3
33351: PUSH
33352: FOR_TO
33353: IFFALSE 33444
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33355: LD_STRING setFactoryWaypointXY(
33357: PUSH
33358: LD_VAR 0 3
33362: PUSH
33363: LD_VAR 0 2
33367: ARRAY
33368: PUSH
33369: LD_INT 1
33371: ARRAY
33372: STR
33373: PUSH
33374: LD_STRING ,
33376: STR
33377: PUSH
33378: LD_VAR 0 3
33382: PUSH
33383: LD_VAR 0 2
33387: ARRAY
33388: PUSH
33389: LD_INT 2
33391: ARRAY
33392: STR
33393: PUSH
33394: LD_STRING ,
33396: STR
33397: PUSH
33398: LD_VAR 0 3
33402: PUSH
33403: LD_VAR 0 2
33407: ARRAY
33408: PUSH
33409: LD_INT 3
33411: ARRAY
33412: STR
33413: PUSH
33414: LD_STRING ,
33416: STR
33417: PUSH
33418: LD_VAR 0 3
33422: PUSH
33423: LD_VAR 0 2
33427: ARRAY
33428: PUSH
33429: LD_INT 4
33431: ARRAY
33432: STR
33433: PUSH
33434: LD_STRING )
33436: STR
33437: PPUSH
33438: CALL_OW 559
33442: GO 33352
33444: POP
33445: POP
// end ; end ;
33446: LD_VAR 0 1
33450: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33451: LD_INT 0
33453: PPUSH
// if HexInfo ( x , y ) = warehouse then
33454: LD_VAR 0 2
33458: PPUSH
33459: LD_VAR 0 3
33463: PPUSH
33464: CALL_OW 428
33468: PUSH
33469: LD_VAR 0 1
33473: EQUAL
33474: IFFALSE 33501
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33476: LD_ADDR_EXP 126
33480: PUSH
33481: LD_EXP 126
33485: PPUSH
33486: LD_VAR 0 1
33490: PPUSH
33491: LD_INT 0
33493: PPUSH
33494: CALL_OW 1
33498: ST_TO_ADDR
33499: GO 33552
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33501: LD_ADDR_EXP 126
33505: PUSH
33506: LD_EXP 126
33510: PPUSH
33511: LD_VAR 0 1
33515: PPUSH
33516: LD_VAR 0 1
33520: PPUSH
33521: CALL_OW 255
33525: PUSH
33526: LD_VAR 0 1
33530: PUSH
33531: LD_VAR 0 2
33535: PUSH
33536: LD_VAR 0 3
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: PPUSH
33547: CALL_OW 1
33551: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33552: CALL 33561 0 0
// end ;
33556: LD_VAR 0 4
33560: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33561: LD_INT 0
33563: PPUSH
33564: PPUSH
33565: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33566: LD_STRING resetWarehouseGatheringPoints();
33568: PPUSH
33569: CALL_OW 559
// if warehouseGatheringPoints then
33573: LD_EXP 126
33577: IFFALSE 33703
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33579: LD_ADDR_VAR 0 3
33583: PUSH
33584: LD_EXP 126
33588: PPUSH
33589: CALL 80078 0 1
33593: ST_TO_ADDR
// for i := 1 to list do
33594: LD_ADDR_VAR 0 2
33598: PUSH
33599: DOUBLE
33600: LD_INT 1
33602: DEC
33603: ST_TO_ADDR
33604: LD_VAR 0 3
33608: PUSH
33609: FOR_TO
33610: IFFALSE 33701
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33612: LD_STRING setWarehouseGatheringPointXY(
33614: PUSH
33615: LD_VAR 0 3
33619: PUSH
33620: LD_VAR 0 2
33624: ARRAY
33625: PUSH
33626: LD_INT 1
33628: ARRAY
33629: STR
33630: PUSH
33631: LD_STRING ,
33633: STR
33634: PUSH
33635: LD_VAR 0 3
33639: PUSH
33640: LD_VAR 0 2
33644: ARRAY
33645: PUSH
33646: LD_INT 2
33648: ARRAY
33649: STR
33650: PUSH
33651: LD_STRING ,
33653: STR
33654: PUSH
33655: LD_VAR 0 3
33659: PUSH
33660: LD_VAR 0 2
33664: ARRAY
33665: PUSH
33666: LD_INT 3
33668: ARRAY
33669: STR
33670: PUSH
33671: LD_STRING ,
33673: STR
33674: PUSH
33675: LD_VAR 0 3
33679: PUSH
33680: LD_VAR 0 2
33684: ARRAY
33685: PUSH
33686: LD_INT 4
33688: ARRAY
33689: STR
33690: PUSH
33691: LD_STRING )
33693: STR
33694: PPUSH
33695: CALL_OW 559
33699: GO 33609
33701: POP
33702: POP
// end ; end ;
33703: LD_VAR 0 1
33707: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33708: LD_EXP 126
33712: IFFALSE 34397
33714: GO 33716
33716: DISABLE
33717: LD_INT 0
33719: PPUSH
33720: PPUSH
33721: PPUSH
33722: PPUSH
33723: PPUSH
33724: PPUSH
33725: PPUSH
33726: PPUSH
33727: PPUSH
// begin enable ;
33728: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33729: LD_ADDR_VAR 0 3
33733: PUSH
33734: LD_EXP 126
33738: PPUSH
33739: CALL 80078 0 1
33743: ST_TO_ADDR
// if not list then
33744: LD_VAR 0 3
33748: NOT
33749: IFFALSE 33753
// exit ;
33751: GO 34397
// for i := 1 to list do
33753: LD_ADDR_VAR 0 1
33757: PUSH
33758: DOUBLE
33759: LD_INT 1
33761: DEC
33762: ST_TO_ADDR
33763: LD_VAR 0 3
33767: PUSH
33768: FOR_TO
33769: IFFALSE 34395
// begin depot := list [ i ] [ 2 ] ;
33771: LD_ADDR_VAR 0 8
33775: PUSH
33776: LD_VAR 0 3
33780: PUSH
33781: LD_VAR 0 1
33785: ARRAY
33786: PUSH
33787: LD_INT 2
33789: ARRAY
33790: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33791: LD_ADDR_VAR 0 5
33795: PUSH
33796: LD_VAR 0 3
33800: PUSH
33801: LD_VAR 0 1
33805: ARRAY
33806: PUSH
33807: LD_INT 1
33809: ARRAY
33810: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33811: LD_VAR 0 8
33815: PPUSH
33816: CALL_OW 301
33820: PUSH
33821: LD_VAR 0 5
33825: PUSH
33826: LD_VAR 0 8
33830: PPUSH
33831: CALL_OW 255
33835: NONEQUAL
33836: OR
33837: IFFALSE 33866
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33839: LD_ADDR_EXP 126
33843: PUSH
33844: LD_EXP 126
33848: PPUSH
33849: LD_VAR 0 8
33853: PPUSH
33854: LD_INT 0
33856: PPUSH
33857: CALL_OW 1
33861: ST_TO_ADDR
// exit ;
33862: POP
33863: POP
33864: GO 34397
// end ; x := list [ i ] [ 3 ] ;
33866: LD_ADDR_VAR 0 6
33870: PUSH
33871: LD_VAR 0 3
33875: PUSH
33876: LD_VAR 0 1
33880: ARRAY
33881: PUSH
33882: LD_INT 3
33884: ARRAY
33885: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33886: LD_ADDR_VAR 0 7
33890: PUSH
33891: LD_VAR 0 3
33895: PUSH
33896: LD_VAR 0 1
33900: ARRAY
33901: PUSH
33902: LD_INT 4
33904: ARRAY
33905: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33906: LD_ADDR_VAR 0 9
33910: PUSH
33911: LD_VAR 0 6
33915: PPUSH
33916: LD_VAR 0 7
33920: PPUSH
33921: LD_INT 16
33923: PPUSH
33924: CALL 78666 0 3
33928: ST_TO_ADDR
// if not cratesNearbyPoint then
33929: LD_VAR 0 9
33933: NOT
33934: IFFALSE 33940
// exit ;
33936: POP
33937: POP
33938: GO 34397
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33940: LD_ADDR_VAR 0 4
33944: PUSH
33945: LD_INT 22
33947: PUSH
33948: LD_VAR 0 5
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 3
33959: PUSH
33960: LD_INT 60
33962: PUSH
33963: EMPTY
33964: LIST
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 91
33972: PUSH
33973: LD_VAR 0 8
33977: PUSH
33978: LD_INT 6
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 2
33988: PUSH
33989: LD_INT 25
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 25
34001: PUSH
34002: LD_INT 16
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: PPUSH
34020: CALL_OW 69
34024: PUSH
34025: LD_VAR 0 8
34029: PPUSH
34030: CALL_OW 313
34034: PPUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 60
34040: PUSH
34041: EMPTY
34042: LIST
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 25
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 25
34063: PUSH
34064: LD_INT 16
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: LIST
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PPUSH
34080: CALL_OW 72
34084: UNION
34085: ST_TO_ADDR
// if tmp then
34086: LD_VAR 0 4
34090: IFFALSE 34170
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34092: LD_ADDR_VAR 0 4
34096: PUSH
34097: LD_VAR 0 4
34101: PPUSH
34102: LD_INT 3
34104: PPUSH
34105: CALL 76635 0 2
34109: ST_TO_ADDR
// for j in tmp do
34110: LD_ADDR_VAR 0 2
34114: PUSH
34115: LD_VAR 0 4
34119: PUSH
34120: FOR_IN
34121: IFFALSE 34164
// begin if IsInUnit ( j ) then
34123: LD_VAR 0 2
34127: PPUSH
34128: CALL_OW 310
34132: IFFALSE 34143
// ComExit ( j ) ;
34134: LD_VAR 0 2
34138: PPUSH
34139: CALL 76718 0 1
// AddComCollect ( j , x , y ) ;
34143: LD_VAR 0 2
34147: PPUSH
34148: LD_VAR 0 6
34152: PPUSH
34153: LD_VAR 0 7
34157: PPUSH
34158: CALL_OW 177
// end ;
34162: GO 34120
34164: POP
34165: POP
// exit ;
34166: POP
34167: POP
34168: GO 34397
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34170: LD_ADDR_VAR 0 4
34174: PUSH
34175: LD_INT 22
34177: PUSH
34178: LD_VAR 0 5
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 91
34189: PUSH
34190: LD_VAR 0 8
34194: PUSH
34195: LD_INT 8
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 34
34208: PUSH
34209: LD_INT 12
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 34
34218: PUSH
34219: LD_INT 51
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 34
34228: PUSH
34229: LD_INT 32
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 34
34238: PUSH
34239: LD_INT 89
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: PPUSH
34258: CALL_OW 69
34262: ST_TO_ADDR
// if tmp then
34263: LD_VAR 0 4
34267: IFFALSE 34393
// begin for j in tmp do
34269: LD_ADDR_VAR 0 2
34273: PUSH
34274: LD_VAR 0 4
34278: PUSH
34279: FOR_IN
34280: IFFALSE 34391
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34282: LD_VAR 0 2
34286: PPUSH
34287: CALL_OW 262
34291: PUSH
34292: LD_INT 3
34294: EQUAL
34295: PUSH
34296: LD_VAR 0 2
34300: PPUSH
34301: CALL_OW 261
34305: PUSH
34306: LD_INT 20
34308: GREATER
34309: OR
34310: PUSH
34311: LD_VAR 0 2
34315: PPUSH
34316: CALL_OW 314
34320: NOT
34321: AND
34322: PUSH
34323: LD_VAR 0 2
34327: PPUSH
34328: CALL_OW 263
34332: PUSH
34333: LD_INT 1
34335: NONEQUAL
34336: PUSH
34337: LD_VAR 0 2
34341: PPUSH
34342: CALL_OW 311
34346: OR
34347: AND
34348: IFFALSE 34389
// begin ComCollect ( j , x , y ) ;
34350: LD_VAR 0 2
34354: PPUSH
34355: LD_VAR 0 6
34359: PPUSH
34360: LD_VAR 0 7
34364: PPUSH
34365: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34369: LD_VAR 0 2
34373: PPUSH
34374: LD_VAR 0 8
34378: PPUSH
34379: CALL_OW 172
// exit ;
34383: POP
34384: POP
34385: POP
34386: POP
34387: GO 34397
// end ;
34389: GO 34279
34391: POP
34392: POP
// end ; end ;
34393: GO 33768
34395: POP
34396: POP
// end ; end_of_file
34397: PPOPN 9
34399: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34400: LD_VAR 0 1
34404: PUSH
34405: LD_INT 200
34407: DOUBLE
34408: GREATEREQUAL
34409: IFFALSE 34417
34411: LD_INT 299
34413: DOUBLE
34414: LESSEQUAL
34415: IFTRUE 34419
34417: GO 34451
34419: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34420: LD_VAR 0 1
34424: PPUSH
34425: LD_VAR 0 2
34429: PPUSH
34430: LD_VAR 0 3
34434: PPUSH
34435: LD_VAR 0 4
34439: PPUSH
34440: LD_VAR 0 5
34444: PPUSH
34445: CALL 34939 0 5
34449: GO 34528
34451: LD_INT 300
34453: DOUBLE
34454: GREATEREQUAL
34455: IFFALSE 34463
34457: LD_INT 399
34459: DOUBLE
34460: LESSEQUAL
34461: IFTRUE 34465
34463: GO 34527
34465: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
34466: LD_VAR 0 1
34470: PPUSH
34471: LD_VAR 0 2
34475: PPUSH
34476: LD_VAR 0 3
34480: PPUSH
34481: LD_VAR 0 4
34485: PPUSH
34486: LD_VAR 0 5
34490: PPUSH
34491: LD_VAR 0 6
34495: PPUSH
34496: LD_VAR 0 7
34500: PPUSH
34501: LD_VAR 0 8
34505: PPUSH
34506: LD_VAR 0 9
34510: PPUSH
34511: LD_VAR 0 10
34515: PPUSH
34516: LD_VAR 0 11
34520: PPUSH
34521: CALL 31109 0 11
34525: GO 34528
34527: POP
// end ;
34528: PPOPN 11
34530: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
34531: LD_VAR 0 1
34535: PPUSH
34536: LD_VAR 0 2
34540: PPUSH
34541: LD_VAR 0 3
34545: PPUSH
34546: LD_VAR 0 4
34550: PPUSH
34551: LD_VAR 0 5
34555: PPUSH
34556: CALL 34675 0 5
// end ; end_of_file end_of_file
34560: PPOPN 5
34562: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34563: LD_INT 0
34565: PPUSH
34566: PPUSH
34567: PPUSH
34568: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34569: LD_VAR 0 1
34573: PPUSH
34574: CALL_OW 264
34578: PUSH
34579: LD_INT 91
34581: EQUAL
34582: IFFALSE 34654
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34584: LD_INT 68
34586: PPUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: CALL_OW 255
34596: PPUSH
34597: CALL_OW 321
34601: PUSH
34602: LD_INT 2
34604: EQUAL
34605: IFFALSE 34617
// eff := 70 else
34607: LD_ADDR_VAR 0 4
34611: PUSH
34612: LD_INT 70
34614: ST_TO_ADDR
34615: GO 34625
// eff := 30 ;
34617: LD_ADDR_VAR 0 4
34621: PUSH
34622: LD_INT 30
34624: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34625: LD_VAR 0 1
34629: PPUSH
34630: CALL_OW 250
34634: PPUSH
34635: LD_VAR 0 1
34639: PPUSH
34640: CALL_OW 251
34644: PPUSH
34645: LD_VAR 0 4
34649: PPUSH
34650: CALL_OW 495
// end ; end ;
34654: LD_VAR 0 2
34658: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34659: LD_INT 0
34661: PPUSH
// end ;
34662: LD_VAR 0 4
34666: RET
// export function SOS_Command ( cmd ) ; begin
34667: LD_INT 0
34669: PPUSH
// end ;
34670: LD_VAR 0 2
34674: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34675: LD_INT 0
34677: PPUSH
// end ;
34678: LD_VAR 0 6
34682: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34683: LD_INT 0
34685: PPUSH
34686: PPUSH
// if not vehicle or not factory then
34687: LD_VAR 0 1
34691: NOT
34692: PUSH
34693: LD_VAR 0 2
34697: NOT
34698: OR
34699: IFFALSE 34703
// exit ;
34701: GO 34934
// if factoryWaypoints >= factory then
34703: LD_EXP 125
34707: PUSH
34708: LD_VAR 0 2
34712: GREATEREQUAL
34713: IFFALSE 34934
// if factoryWaypoints [ factory ] then
34715: LD_EXP 125
34719: PUSH
34720: LD_VAR 0 2
34724: ARRAY
34725: IFFALSE 34934
// begin if GetControl ( vehicle ) = control_manual then
34727: LD_VAR 0 1
34731: PPUSH
34732: CALL_OW 263
34736: PUSH
34737: LD_INT 1
34739: EQUAL
34740: IFFALSE 34821
// begin driver := IsDrivenBy ( vehicle ) ;
34742: LD_ADDR_VAR 0 4
34746: PUSH
34747: LD_VAR 0 1
34751: PPUSH
34752: CALL_OW 311
34756: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34757: LD_VAR 0 4
34761: PPUSH
34762: LD_EXP 125
34766: PUSH
34767: LD_VAR 0 2
34771: ARRAY
34772: PUSH
34773: LD_INT 3
34775: ARRAY
34776: PPUSH
34777: LD_EXP 125
34781: PUSH
34782: LD_VAR 0 2
34786: ARRAY
34787: PUSH
34788: LD_INT 4
34790: ARRAY
34791: PPUSH
34792: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34796: LD_VAR 0 4
34800: PPUSH
34801: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34805: LD_VAR 0 4
34809: PPUSH
34810: LD_VAR 0 2
34814: PPUSH
34815: CALL_OW 180
// end else
34819: GO 34934
// if GetControl ( vehicle ) = control_remote then
34821: LD_VAR 0 1
34825: PPUSH
34826: CALL_OW 263
34830: PUSH
34831: LD_INT 2
34833: EQUAL
34834: IFFALSE 34895
// begin wait ( 0 0$2 ) ;
34836: LD_INT 70
34838: PPUSH
34839: CALL_OW 67
// if Connect ( vehicle ) then
34843: LD_VAR 0 1
34847: PPUSH
34848: CALL 46958 0 1
34852: IFFALSE 34893
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34854: LD_VAR 0 1
34858: PPUSH
34859: LD_EXP 125
34863: PUSH
34864: LD_VAR 0 2
34868: ARRAY
34869: PUSH
34870: LD_INT 3
34872: ARRAY
34873: PPUSH
34874: LD_EXP 125
34878: PUSH
34879: LD_VAR 0 2
34883: ARRAY
34884: PUSH
34885: LD_INT 4
34887: ARRAY
34888: PPUSH
34889: CALL_OW 171
// end else
34893: GO 34934
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34895: LD_VAR 0 1
34899: PPUSH
34900: LD_EXP 125
34904: PUSH
34905: LD_VAR 0 2
34909: ARRAY
34910: PUSH
34911: LD_INT 3
34913: ARRAY
34914: PPUSH
34915: LD_EXP 125
34919: PUSH
34920: LD_VAR 0 2
34924: ARRAY
34925: PUSH
34926: LD_INT 4
34928: ARRAY
34929: PPUSH
34930: CALL_OW 171
// end ; end ;
34934: LD_VAR 0 3
34938: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34939: LD_INT 0
34941: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34942: LD_VAR 0 1
34946: PUSH
34947: LD_INT 250
34949: EQUAL
34950: PUSH
34951: LD_VAR 0 2
34955: PPUSH
34956: CALL_OW 264
34960: PUSH
34961: LD_INT 81
34963: EQUAL
34964: AND
34965: IFFALSE 34986
// MinerPlaceMine ( unit , x , y ) ;
34967: LD_VAR 0 2
34971: PPUSH
34972: LD_VAR 0 4
34976: PPUSH
34977: LD_VAR 0 5
34981: PPUSH
34982: CALL 37371 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34986: LD_VAR 0 1
34990: PUSH
34991: LD_INT 251
34993: EQUAL
34994: PUSH
34995: LD_VAR 0 2
34999: PPUSH
35000: CALL_OW 264
35004: PUSH
35005: LD_INT 81
35007: EQUAL
35008: AND
35009: IFFALSE 35030
// MinerDetonateMine ( unit , x , y ) ;
35011: LD_VAR 0 2
35015: PPUSH
35016: LD_VAR 0 4
35020: PPUSH
35021: LD_VAR 0 5
35025: PPUSH
35026: CALL 37646 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35030: LD_VAR 0 1
35034: PUSH
35035: LD_INT 252
35037: EQUAL
35038: PUSH
35039: LD_VAR 0 2
35043: PPUSH
35044: CALL_OW 264
35048: PUSH
35049: LD_INT 81
35051: EQUAL
35052: AND
35053: IFFALSE 35074
// MinerCreateMinefield ( unit , x , y ) ;
35055: LD_VAR 0 2
35059: PPUSH
35060: LD_VAR 0 4
35064: PPUSH
35065: LD_VAR 0 5
35069: PPUSH
35070: CALL 38063 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35074: LD_VAR 0 1
35078: PUSH
35079: LD_INT 253
35081: EQUAL
35082: PUSH
35083: LD_VAR 0 2
35087: PPUSH
35088: CALL_OW 257
35092: PUSH
35093: LD_INT 5
35095: EQUAL
35096: AND
35097: IFFALSE 35118
// ComBinocular ( unit , x , y ) ;
35099: LD_VAR 0 2
35103: PPUSH
35104: LD_VAR 0 4
35108: PPUSH
35109: LD_VAR 0 5
35113: PPUSH
35114: CALL 38432 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35118: LD_VAR 0 1
35122: PUSH
35123: LD_INT 254
35125: EQUAL
35126: PUSH
35127: LD_VAR 0 2
35131: PPUSH
35132: CALL_OW 264
35136: PUSH
35137: LD_INT 99
35139: EQUAL
35140: AND
35141: PUSH
35142: LD_VAR 0 3
35146: PPUSH
35147: CALL_OW 263
35151: PUSH
35152: LD_INT 3
35154: EQUAL
35155: AND
35156: IFFALSE 35172
// HackDestroyVehicle ( unit , selectedUnit ) ;
35158: LD_VAR 0 2
35162: PPUSH
35163: LD_VAR 0 3
35167: PPUSH
35168: CALL 36735 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35172: LD_VAR 0 1
35176: PUSH
35177: LD_INT 255
35179: EQUAL
35180: PUSH
35181: LD_VAR 0 2
35185: PPUSH
35186: CALL_OW 264
35190: PUSH
35191: LD_INT 14
35193: PUSH
35194: LD_INT 53
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: IN
35201: AND
35202: PUSH
35203: LD_VAR 0 4
35207: PPUSH
35208: LD_VAR 0 5
35212: PPUSH
35213: CALL_OW 488
35217: AND
35218: IFFALSE 35242
// CutTreeXYR ( unit , x , y , 12 ) ;
35220: LD_VAR 0 2
35224: PPUSH
35225: LD_VAR 0 4
35229: PPUSH
35230: LD_VAR 0 5
35234: PPUSH
35235: LD_INT 12
35237: PPUSH
35238: CALL 35305 0 4
// if cmd = 256 then
35242: LD_VAR 0 1
35246: PUSH
35247: LD_INT 256
35249: EQUAL
35250: IFFALSE 35271
// SetFactoryWaypoint ( unit , x , y ) ;
35252: LD_VAR 0 2
35256: PPUSH
35257: LD_VAR 0 4
35261: PPUSH
35262: LD_VAR 0 5
35266: PPUSH
35267: CALL 33089 0 3
// if cmd = 257 then
35271: LD_VAR 0 1
35275: PUSH
35276: LD_INT 257
35278: EQUAL
35279: IFFALSE 35300
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35281: LD_VAR 0 2
35285: PPUSH
35286: LD_VAR 0 4
35290: PPUSH
35291: LD_VAR 0 5
35295: PPUSH
35296: CALL 33451 0 3
// end ;
35300: LD_VAR 0 6
35304: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35305: LD_INT 0
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35316: LD_VAR 0 1
35320: NOT
35321: PUSH
35322: LD_VAR 0 2
35326: PPUSH
35327: LD_VAR 0 3
35331: PPUSH
35332: CALL_OW 488
35336: NOT
35337: OR
35338: PUSH
35339: LD_VAR 0 4
35343: NOT
35344: OR
35345: IFFALSE 35349
// exit ;
35347: GO 35689
// list := [ ] ;
35349: LD_ADDR_VAR 0 13
35353: PUSH
35354: EMPTY
35355: ST_TO_ADDR
// if x - r < 0 then
35356: LD_VAR 0 2
35360: PUSH
35361: LD_VAR 0 4
35365: MINUS
35366: PUSH
35367: LD_INT 0
35369: LESS
35370: IFFALSE 35382
// min_x := 0 else
35372: LD_ADDR_VAR 0 7
35376: PUSH
35377: LD_INT 0
35379: ST_TO_ADDR
35380: GO 35398
// min_x := x - r ;
35382: LD_ADDR_VAR 0 7
35386: PUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_VAR 0 4
35396: MINUS
35397: ST_TO_ADDR
// if y - r < 0 then
35398: LD_VAR 0 3
35402: PUSH
35403: LD_VAR 0 4
35407: MINUS
35408: PUSH
35409: LD_INT 0
35411: LESS
35412: IFFALSE 35424
// min_y := 0 else
35414: LD_ADDR_VAR 0 8
35418: PUSH
35419: LD_INT 0
35421: ST_TO_ADDR
35422: GO 35440
// min_y := y - r ;
35424: LD_ADDR_VAR 0 8
35428: PUSH
35429: LD_VAR 0 3
35433: PUSH
35434: LD_VAR 0 4
35438: MINUS
35439: ST_TO_ADDR
// max_x := x + r ;
35440: LD_ADDR_VAR 0 9
35444: PUSH
35445: LD_VAR 0 2
35449: PUSH
35450: LD_VAR 0 4
35454: PLUS
35455: ST_TO_ADDR
// max_y := y + r ;
35456: LD_ADDR_VAR 0 10
35460: PUSH
35461: LD_VAR 0 3
35465: PUSH
35466: LD_VAR 0 4
35470: PLUS
35471: ST_TO_ADDR
// for _x = min_x to max_x do
35472: LD_ADDR_VAR 0 11
35476: PUSH
35477: DOUBLE
35478: LD_VAR 0 7
35482: DEC
35483: ST_TO_ADDR
35484: LD_VAR 0 9
35488: PUSH
35489: FOR_TO
35490: IFFALSE 35607
// for _y = min_y to max_y do
35492: LD_ADDR_VAR 0 12
35496: PUSH
35497: DOUBLE
35498: LD_VAR 0 8
35502: DEC
35503: ST_TO_ADDR
35504: LD_VAR 0 10
35508: PUSH
35509: FOR_TO
35510: IFFALSE 35603
// begin if not ValidHex ( _x , _y ) then
35512: LD_VAR 0 11
35516: PPUSH
35517: LD_VAR 0 12
35521: PPUSH
35522: CALL_OW 488
35526: NOT
35527: IFFALSE 35531
// continue ;
35529: GO 35509
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35531: LD_VAR 0 11
35535: PPUSH
35536: LD_VAR 0 12
35540: PPUSH
35541: CALL_OW 351
35545: PUSH
35546: LD_VAR 0 11
35550: PPUSH
35551: LD_VAR 0 12
35555: PPUSH
35556: CALL_OW 554
35560: AND
35561: IFFALSE 35601
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35563: LD_ADDR_VAR 0 13
35567: PUSH
35568: LD_VAR 0 13
35572: PPUSH
35573: LD_VAR 0 13
35577: PUSH
35578: LD_INT 1
35580: PLUS
35581: PPUSH
35582: LD_VAR 0 11
35586: PUSH
35587: LD_VAR 0 12
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PPUSH
35596: CALL_OW 2
35600: ST_TO_ADDR
// end ;
35601: GO 35509
35603: POP
35604: POP
35605: GO 35489
35607: POP
35608: POP
// if not list then
35609: LD_VAR 0 13
35613: NOT
35614: IFFALSE 35618
// exit ;
35616: GO 35689
// for i in list do
35618: LD_ADDR_VAR 0 6
35622: PUSH
35623: LD_VAR 0 13
35627: PUSH
35628: FOR_IN
35629: IFFALSE 35687
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35631: LD_VAR 0 1
35635: PPUSH
35636: LD_STRING M
35638: PUSH
35639: LD_VAR 0 6
35643: PUSH
35644: LD_INT 1
35646: ARRAY
35647: PUSH
35648: LD_VAR 0 6
35652: PUSH
35653: LD_INT 2
35655: ARRAY
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: PPUSH
35681: CALL_OW 447
35685: GO 35628
35687: POP
35688: POP
// end ;
35689: LD_VAR 0 5
35693: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35694: LD_EXP 128
35698: NOT
35699: IFFALSE 35749
35701: GO 35703
35703: DISABLE
// begin initHack := true ;
35704: LD_ADDR_EXP 128
35708: PUSH
35709: LD_INT 1
35711: ST_TO_ADDR
// hackTanks := [ ] ;
35712: LD_ADDR_EXP 129
35716: PUSH
35717: EMPTY
35718: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35719: LD_ADDR_EXP 130
35723: PUSH
35724: EMPTY
35725: ST_TO_ADDR
// hackLimit := 3 ;
35726: LD_ADDR_EXP 131
35730: PUSH
35731: LD_INT 3
35733: ST_TO_ADDR
// hackDist := 12 ;
35734: LD_ADDR_EXP 132
35738: PUSH
35739: LD_INT 12
35741: ST_TO_ADDR
// hackCounter := [ ] ;
35742: LD_ADDR_EXP 133
35746: PUSH
35747: EMPTY
35748: ST_TO_ADDR
// end ;
35749: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35750: LD_EXP 128
35754: PUSH
35755: LD_INT 34
35757: PUSH
35758: LD_INT 99
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PPUSH
35765: CALL_OW 69
35769: AND
35770: IFFALSE 36023
35772: GO 35774
35774: DISABLE
35775: LD_INT 0
35777: PPUSH
35778: PPUSH
// begin enable ;
35779: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35780: LD_ADDR_VAR 0 1
35784: PUSH
35785: LD_INT 34
35787: PUSH
35788: LD_INT 99
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PPUSH
35795: CALL_OW 69
35799: PUSH
35800: FOR_IN
35801: IFFALSE 36021
// begin if not i in hackTanks then
35803: LD_VAR 0 1
35807: PUSH
35808: LD_EXP 129
35812: IN
35813: NOT
35814: IFFALSE 35897
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35816: LD_ADDR_EXP 129
35820: PUSH
35821: LD_EXP 129
35825: PPUSH
35826: LD_EXP 129
35830: PUSH
35831: LD_INT 1
35833: PLUS
35834: PPUSH
35835: LD_VAR 0 1
35839: PPUSH
35840: CALL_OW 1
35844: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35845: LD_ADDR_EXP 130
35849: PUSH
35850: LD_EXP 130
35854: PPUSH
35855: LD_EXP 130
35859: PUSH
35860: LD_INT 1
35862: PLUS
35863: PPUSH
35864: EMPTY
35865: PPUSH
35866: CALL_OW 1
35870: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35871: LD_ADDR_EXP 133
35875: PUSH
35876: LD_EXP 133
35880: PPUSH
35881: LD_EXP 133
35885: PUSH
35886: LD_INT 1
35888: PLUS
35889: PPUSH
35890: EMPTY
35891: PPUSH
35892: CALL_OW 1
35896: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 302
35906: NOT
35907: IFFALSE 35920
// begin HackUnlinkAll ( i ) ;
35909: LD_VAR 0 1
35913: PPUSH
35914: CALL 36026 0 1
// continue ;
35918: GO 35800
// end ; HackCheckCapturedStatus ( i ) ;
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL 36469 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35929: LD_ADDR_VAR 0 2
35933: PUSH
35934: LD_INT 81
35936: PUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: CALL_OW 255
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 33
35953: PUSH
35954: LD_INT 3
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 91
35963: PUSH
35964: LD_VAR 0 1
35968: PUSH
35969: LD_EXP 132
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 50
35981: PUSH
35982: EMPTY
35983: LIST
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: PPUSH
35991: CALL_OW 69
35995: ST_TO_ADDR
// if not tmp then
35996: LD_VAR 0 2
36000: NOT
36001: IFFALSE 36005
// continue ;
36003: GO 35800
// HackLink ( i , tmp ) ;
36005: LD_VAR 0 1
36009: PPUSH
36010: LD_VAR 0 2
36014: PPUSH
36015: CALL 36162 0 2
// end ;
36019: GO 35800
36021: POP
36022: POP
// end ;
36023: PPOPN 2
36025: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36026: LD_INT 0
36028: PPUSH
36029: PPUSH
36030: PPUSH
// if not hack in hackTanks then
36031: LD_VAR 0 1
36035: PUSH
36036: LD_EXP 129
36040: IN
36041: NOT
36042: IFFALSE 36046
// exit ;
36044: GO 36157
// index := GetElementIndex ( hackTanks , hack ) ;
36046: LD_ADDR_VAR 0 4
36050: PUSH
36051: LD_EXP 129
36055: PPUSH
36056: LD_VAR 0 1
36060: PPUSH
36061: CALL 43774 0 2
36065: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36066: LD_EXP 130
36070: PUSH
36071: LD_VAR 0 4
36075: ARRAY
36076: IFFALSE 36157
// begin for i in hackTanksCaptured [ index ] do
36078: LD_ADDR_VAR 0 3
36082: PUSH
36083: LD_EXP 130
36087: PUSH
36088: LD_VAR 0 4
36092: ARRAY
36093: PUSH
36094: FOR_IN
36095: IFFALSE 36121
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36097: LD_VAR 0 3
36101: PUSH
36102: LD_INT 1
36104: ARRAY
36105: PPUSH
36106: LD_VAR 0 3
36110: PUSH
36111: LD_INT 2
36113: ARRAY
36114: PPUSH
36115: CALL_OW 235
36119: GO 36094
36121: POP
36122: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36123: LD_ADDR_EXP 130
36127: PUSH
36128: LD_EXP 130
36132: PPUSH
36133: LD_VAR 0 4
36137: PPUSH
36138: EMPTY
36139: PPUSH
36140: CALL_OW 1
36144: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36145: LD_VAR 0 1
36149: PPUSH
36150: LD_INT 0
36152: PPUSH
36153: CALL_OW 505
// end ; end ;
36157: LD_VAR 0 2
36161: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36162: LD_INT 0
36164: PPUSH
36165: PPUSH
36166: PPUSH
// if not hack in hackTanks or not vehicles then
36167: LD_VAR 0 1
36171: PUSH
36172: LD_EXP 129
36176: IN
36177: NOT
36178: PUSH
36179: LD_VAR 0 2
36183: NOT
36184: OR
36185: IFFALSE 36189
// exit ;
36187: GO 36464
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36189: LD_ADDR_VAR 0 2
36193: PUSH
36194: LD_VAR 0 1
36198: PPUSH
36199: LD_VAR 0 2
36203: PPUSH
36204: LD_INT 1
36206: PPUSH
36207: LD_INT 1
36209: PPUSH
36210: CALL 44424 0 4
36214: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36215: LD_ADDR_VAR 0 5
36219: PUSH
36220: LD_EXP 129
36224: PPUSH
36225: LD_VAR 0 1
36229: PPUSH
36230: CALL 43774 0 2
36234: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36235: LD_EXP 130
36239: PUSH
36240: LD_VAR 0 5
36244: ARRAY
36245: PUSH
36246: LD_EXP 131
36250: LESS
36251: IFFALSE 36440
// begin for i := 1 to vehicles do
36253: LD_ADDR_VAR 0 4
36257: PUSH
36258: DOUBLE
36259: LD_INT 1
36261: DEC
36262: ST_TO_ADDR
36263: LD_VAR 0 2
36267: PUSH
36268: FOR_TO
36269: IFFALSE 36438
// begin if hackTanksCaptured [ index ] = hackLimit then
36271: LD_EXP 130
36275: PUSH
36276: LD_VAR 0 5
36280: ARRAY
36281: PUSH
36282: LD_EXP 131
36286: EQUAL
36287: IFFALSE 36291
// break ;
36289: GO 36438
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36291: LD_ADDR_EXP 133
36295: PUSH
36296: LD_EXP 133
36300: PPUSH
36301: LD_VAR 0 5
36305: PPUSH
36306: LD_EXP 133
36310: PUSH
36311: LD_VAR 0 5
36315: ARRAY
36316: PUSH
36317: LD_INT 1
36319: PLUS
36320: PPUSH
36321: CALL_OW 1
36325: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36326: LD_ADDR_EXP 130
36330: PUSH
36331: LD_EXP 130
36335: PPUSH
36336: LD_VAR 0 5
36340: PUSH
36341: LD_EXP 130
36345: PUSH
36346: LD_VAR 0 5
36350: ARRAY
36351: PUSH
36352: LD_INT 1
36354: PLUS
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PPUSH
36360: LD_VAR 0 2
36364: PUSH
36365: LD_VAR 0 4
36369: ARRAY
36370: PUSH
36371: LD_VAR 0 2
36375: PUSH
36376: LD_VAR 0 4
36380: ARRAY
36381: PPUSH
36382: CALL_OW 255
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PPUSH
36391: CALL 43989 0 3
36395: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36396: LD_VAR 0 2
36400: PUSH
36401: LD_VAR 0 4
36405: ARRAY
36406: PPUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 255
36416: PPUSH
36417: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36421: LD_VAR 0 2
36425: PUSH
36426: LD_VAR 0 4
36430: ARRAY
36431: PPUSH
36432: CALL_OW 141
// end ;
36436: GO 36268
36438: POP
36439: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36440: LD_VAR 0 1
36444: PPUSH
36445: LD_EXP 130
36449: PUSH
36450: LD_VAR 0 5
36454: ARRAY
36455: PUSH
36456: LD_INT 0
36458: PLUS
36459: PPUSH
36460: CALL_OW 505
// end ;
36464: LD_VAR 0 3
36468: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36469: LD_INT 0
36471: PPUSH
36472: PPUSH
36473: PPUSH
36474: PPUSH
// if not hack in hackTanks then
36475: LD_VAR 0 1
36479: PUSH
36480: LD_EXP 129
36484: IN
36485: NOT
36486: IFFALSE 36490
// exit ;
36488: GO 36730
// index := GetElementIndex ( hackTanks , hack ) ;
36490: LD_ADDR_VAR 0 4
36494: PUSH
36495: LD_EXP 129
36499: PPUSH
36500: LD_VAR 0 1
36504: PPUSH
36505: CALL 43774 0 2
36509: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: DOUBLE
36516: LD_EXP 130
36520: PUSH
36521: LD_VAR 0 4
36525: ARRAY
36526: INC
36527: ST_TO_ADDR
36528: LD_INT 1
36530: PUSH
36531: FOR_DOWNTO
36532: IFFALSE 36704
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36534: LD_ADDR_VAR 0 5
36538: PUSH
36539: LD_EXP 130
36543: PUSH
36544: LD_VAR 0 4
36548: ARRAY
36549: PUSH
36550: LD_VAR 0 3
36554: ARRAY
36555: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36556: LD_VAR 0 5
36560: PUSH
36561: LD_INT 1
36563: ARRAY
36564: PPUSH
36565: CALL_OW 302
36569: NOT
36570: PUSH
36571: LD_VAR 0 5
36575: PUSH
36576: LD_INT 1
36578: ARRAY
36579: PPUSH
36580: CALL_OW 255
36584: PUSH
36585: LD_VAR 0 1
36589: PPUSH
36590: CALL_OW 255
36594: NONEQUAL
36595: OR
36596: IFFALSE 36702
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36598: LD_VAR 0 5
36602: PUSH
36603: LD_INT 1
36605: ARRAY
36606: PPUSH
36607: CALL_OW 305
36611: PUSH
36612: LD_VAR 0 5
36616: PUSH
36617: LD_INT 1
36619: ARRAY
36620: PPUSH
36621: CALL_OW 255
36625: PUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 255
36635: EQUAL
36636: AND
36637: IFFALSE 36661
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36639: LD_VAR 0 5
36643: PUSH
36644: LD_INT 1
36646: ARRAY
36647: PPUSH
36648: LD_VAR 0 5
36652: PUSH
36653: LD_INT 2
36655: ARRAY
36656: PPUSH
36657: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36661: LD_ADDR_EXP 130
36665: PUSH
36666: LD_EXP 130
36670: PPUSH
36671: LD_VAR 0 4
36675: PPUSH
36676: LD_EXP 130
36680: PUSH
36681: LD_VAR 0 4
36685: ARRAY
36686: PPUSH
36687: LD_VAR 0 3
36691: PPUSH
36692: CALL_OW 3
36696: PPUSH
36697: CALL_OW 1
36701: ST_TO_ADDR
// end ; end ;
36702: GO 36531
36704: POP
36705: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36706: LD_VAR 0 1
36710: PPUSH
36711: LD_EXP 130
36715: PUSH
36716: LD_VAR 0 4
36720: ARRAY
36721: PUSH
36722: LD_INT 0
36724: PLUS
36725: PPUSH
36726: CALL_OW 505
// end ;
36730: LD_VAR 0 2
36734: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36735: LD_INT 0
36737: PPUSH
36738: PPUSH
36739: PPUSH
36740: PPUSH
// if not hack in hackTanks then
36741: LD_VAR 0 1
36745: PUSH
36746: LD_EXP 129
36750: IN
36751: NOT
36752: IFFALSE 36756
// exit ;
36754: GO 36841
// index := GetElementIndex ( hackTanks , hack ) ;
36756: LD_ADDR_VAR 0 5
36760: PUSH
36761: LD_EXP 129
36765: PPUSH
36766: LD_VAR 0 1
36770: PPUSH
36771: CALL 43774 0 2
36775: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36776: LD_ADDR_VAR 0 4
36780: PUSH
36781: DOUBLE
36782: LD_INT 1
36784: DEC
36785: ST_TO_ADDR
36786: LD_EXP 130
36790: PUSH
36791: LD_VAR 0 5
36795: ARRAY
36796: PUSH
36797: FOR_TO
36798: IFFALSE 36839
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36800: LD_EXP 130
36804: PUSH
36805: LD_VAR 0 5
36809: ARRAY
36810: PUSH
36811: LD_VAR 0 4
36815: ARRAY
36816: PUSH
36817: LD_INT 1
36819: ARRAY
36820: PUSH
36821: LD_VAR 0 2
36825: EQUAL
36826: IFFALSE 36837
// KillUnit ( vehicle ) ;
36828: LD_VAR 0 2
36832: PPUSH
36833: CALL_OW 66
36837: GO 36797
36839: POP
36840: POP
// end ;
36841: LD_VAR 0 3
36845: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36846: LD_EXP 134
36850: NOT
36851: IFFALSE 36886
36853: GO 36855
36855: DISABLE
// begin initMiner := true ;
36856: LD_ADDR_EXP 134
36860: PUSH
36861: LD_INT 1
36863: ST_TO_ADDR
// minersList := [ ] ;
36864: LD_ADDR_EXP 135
36868: PUSH
36869: EMPTY
36870: ST_TO_ADDR
// minerMinesList := [ ] ;
36871: LD_ADDR_EXP 136
36875: PUSH
36876: EMPTY
36877: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36878: LD_ADDR_EXP 137
36882: PUSH
36883: LD_INT 5
36885: ST_TO_ADDR
// end ;
36886: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36887: LD_EXP 134
36891: PUSH
36892: LD_INT 34
36894: PUSH
36895: LD_INT 81
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PPUSH
36902: CALL_OW 69
36906: AND
36907: IFFALSE 37368
36909: GO 36911
36911: DISABLE
36912: LD_INT 0
36914: PPUSH
36915: PPUSH
36916: PPUSH
36917: PPUSH
// begin enable ;
36918: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36919: LD_ADDR_VAR 0 1
36923: PUSH
36924: LD_INT 34
36926: PUSH
36927: LD_INT 81
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PPUSH
36934: CALL_OW 69
36938: PUSH
36939: FOR_IN
36940: IFFALSE 37012
// begin if not i in minersList then
36942: LD_VAR 0 1
36946: PUSH
36947: LD_EXP 135
36951: IN
36952: NOT
36953: IFFALSE 37010
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36955: LD_ADDR_EXP 135
36959: PUSH
36960: LD_EXP 135
36964: PPUSH
36965: LD_EXP 135
36969: PUSH
36970: LD_INT 1
36972: PLUS
36973: PPUSH
36974: LD_VAR 0 1
36978: PPUSH
36979: CALL_OW 1
36983: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36984: LD_ADDR_EXP 136
36988: PUSH
36989: LD_EXP 136
36993: PPUSH
36994: LD_EXP 136
36998: PUSH
36999: LD_INT 1
37001: PLUS
37002: PPUSH
37003: EMPTY
37004: PPUSH
37005: CALL_OW 1
37009: ST_TO_ADDR
// end end ;
37010: GO 36939
37012: POP
37013: POP
// for i := minerMinesList downto 1 do
37014: LD_ADDR_VAR 0 1
37018: PUSH
37019: DOUBLE
37020: LD_EXP 136
37024: INC
37025: ST_TO_ADDR
37026: LD_INT 1
37028: PUSH
37029: FOR_DOWNTO
37030: IFFALSE 37366
// begin if IsLive ( minersList [ i ] ) then
37032: LD_EXP 135
37036: PUSH
37037: LD_VAR 0 1
37041: ARRAY
37042: PPUSH
37043: CALL_OW 300
37047: IFFALSE 37075
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37049: LD_EXP 135
37053: PUSH
37054: LD_VAR 0 1
37058: ARRAY
37059: PPUSH
37060: LD_EXP 136
37064: PUSH
37065: LD_VAR 0 1
37069: ARRAY
37070: PPUSH
37071: CALL_OW 505
// if not minerMinesList [ i ] then
37075: LD_EXP 136
37079: PUSH
37080: LD_VAR 0 1
37084: ARRAY
37085: NOT
37086: IFFALSE 37090
// continue ;
37088: GO 37029
// for j := minerMinesList [ i ] downto 1 do
37090: LD_ADDR_VAR 0 2
37094: PUSH
37095: DOUBLE
37096: LD_EXP 136
37100: PUSH
37101: LD_VAR 0 1
37105: ARRAY
37106: INC
37107: ST_TO_ADDR
37108: LD_INT 1
37110: PUSH
37111: FOR_DOWNTO
37112: IFFALSE 37362
// begin side := GetSide ( minersList [ i ] ) ;
37114: LD_ADDR_VAR 0 3
37118: PUSH
37119: LD_EXP 135
37123: PUSH
37124: LD_VAR 0 1
37128: ARRAY
37129: PPUSH
37130: CALL_OW 255
37134: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37135: LD_ADDR_VAR 0 4
37139: PUSH
37140: LD_EXP 136
37144: PUSH
37145: LD_VAR 0 1
37149: ARRAY
37150: PUSH
37151: LD_VAR 0 2
37155: ARRAY
37156: PUSH
37157: LD_INT 1
37159: ARRAY
37160: PPUSH
37161: LD_EXP 136
37165: PUSH
37166: LD_VAR 0 1
37170: ARRAY
37171: PUSH
37172: LD_VAR 0 2
37176: ARRAY
37177: PUSH
37178: LD_INT 2
37180: ARRAY
37181: PPUSH
37182: CALL_OW 428
37186: ST_TO_ADDR
// if not tmp then
37187: LD_VAR 0 4
37191: NOT
37192: IFFALSE 37196
// continue ;
37194: GO 37111
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37196: LD_VAR 0 4
37200: PUSH
37201: LD_INT 81
37203: PUSH
37204: LD_VAR 0 3
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PPUSH
37213: CALL_OW 69
37217: IN
37218: PUSH
37219: LD_EXP 136
37223: PUSH
37224: LD_VAR 0 1
37228: ARRAY
37229: PUSH
37230: LD_VAR 0 2
37234: ARRAY
37235: PUSH
37236: LD_INT 1
37238: ARRAY
37239: PPUSH
37240: LD_EXP 136
37244: PUSH
37245: LD_VAR 0 1
37249: ARRAY
37250: PUSH
37251: LD_VAR 0 2
37255: ARRAY
37256: PUSH
37257: LD_INT 2
37259: ARRAY
37260: PPUSH
37261: CALL_OW 458
37265: AND
37266: IFFALSE 37360
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37268: LD_EXP 136
37272: PUSH
37273: LD_VAR 0 1
37277: ARRAY
37278: PUSH
37279: LD_VAR 0 2
37283: ARRAY
37284: PUSH
37285: LD_INT 1
37287: ARRAY
37288: PPUSH
37289: LD_EXP 136
37293: PUSH
37294: LD_VAR 0 1
37298: ARRAY
37299: PUSH
37300: LD_VAR 0 2
37304: ARRAY
37305: PUSH
37306: LD_INT 2
37308: ARRAY
37309: PPUSH
37310: LD_VAR 0 3
37314: PPUSH
37315: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37319: LD_ADDR_EXP 136
37323: PUSH
37324: LD_EXP 136
37328: PPUSH
37329: LD_VAR 0 1
37333: PPUSH
37334: LD_EXP 136
37338: PUSH
37339: LD_VAR 0 1
37343: ARRAY
37344: PPUSH
37345: LD_VAR 0 2
37349: PPUSH
37350: CALL_OW 3
37354: PPUSH
37355: CALL_OW 1
37359: ST_TO_ADDR
// end ; end ;
37360: GO 37111
37362: POP
37363: POP
// end ;
37364: GO 37029
37366: POP
37367: POP
// end ;
37368: PPOPN 4
37370: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37371: LD_INT 0
37373: PPUSH
37374: PPUSH
// result := false ;
37375: LD_ADDR_VAR 0 4
37379: PUSH
37380: LD_INT 0
37382: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 264
37392: PUSH
37393: LD_INT 81
37395: EQUAL
37396: NOT
37397: IFFALSE 37401
// exit ;
37399: GO 37641
// index := GetElementIndex ( minersList , unit ) ;
37401: LD_ADDR_VAR 0 5
37405: PUSH
37406: LD_EXP 135
37410: PPUSH
37411: LD_VAR 0 1
37415: PPUSH
37416: CALL 43774 0 2
37420: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37421: LD_EXP 136
37425: PUSH
37426: LD_VAR 0 5
37430: ARRAY
37431: PUSH
37432: LD_EXP 137
37436: GREATEREQUAL
37437: IFFALSE 37441
// exit ;
37439: GO 37641
// ComMoveXY ( unit , x , y ) ;
37441: LD_VAR 0 1
37445: PPUSH
37446: LD_VAR 0 2
37450: PPUSH
37451: LD_VAR 0 3
37455: PPUSH
37456: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37460: LD_INT 35
37462: PPUSH
37463: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37467: LD_VAR 0 1
37471: PPUSH
37472: LD_VAR 0 2
37476: PPUSH
37477: LD_VAR 0 3
37481: PPUSH
37482: CALL 75129 0 3
37486: NOT
37487: PUSH
37488: LD_VAR 0 1
37492: PPUSH
37493: CALL_OW 314
37497: AND
37498: IFFALSE 37502
// exit ;
37500: GO 37641
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37502: LD_VAR 0 2
37506: PPUSH
37507: LD_VAR 0 3
37511: PPUSH
37512: CALL_OW 428
37516: PUSH
37517: LD_VAR 0 1
37521: EQUAL
37522: PUSH
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 314
37532: NOT
37533: AND
37534: IFFALSE 37460
// PlaySoundXY ( x , y , PlantMine ) ;
37536: LD_VAR 0 2
37540: PPUSH
37541: LD_VAR 0 3
37545: PPUSH
37546: LD_STRING PlantMine
37548: PPUSH
37549: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37553: LD_VAR 0 2
37557: PPUSH
37558: LD_VAR 0 3
37562: PPUSH
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 255
37572: PPUSH
37573: LD_INT 0
37575: PPUSH
37576: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37580: LD_ADDR_EXP 136
37584: PUSH
37585: LD_EXP 136
37589: PPUSH
37590: LD_VAR 0 5
37594: PUSH
37595: LD_EXP 136
37599: PUSH
37600: LD_VAR 0 5
37604: ARRAY
37605: PUSH
37606: LD_INT 1
37608: PLUS
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PPUSH
37614: LD_VAR 0 2
37618: PUSH
37619: LD_VAR 0 3
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PPUSH
37628: CALL 43989 0 3
37632: ST_TO_ADDR
// result := true ;
37633: LD_ADDR_VAR 0 4
37637: PUSH
37638: LD_INT 1
37640: ST_TO_ADDR
// end ;
37641: LD_VAR 0 4
37645: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37646: LD_INT 0
37648: PPUSH
37649: PPUSH
37650: PPUSH
// if not unit in minersList then
37651: LD_VAR 0 1
37655: PUSH
37656: LD_EXP 135
37660: IN
37661: NOT
37662: IFFALSE 37666
// exit ;
37664: GO 38058
// index := GetElementIndex ( minersList , unit ) ;
37666: LD_ADDR_VAR 0 6
37670: PUSH
37671: LD_EXP 135
37675: PPUSH
37676: LD_VAR 0 1
37680: PPUSH
37681: CALL 43774 0 2
37685: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37686: LD_ADDR_VAR 0 5
37690: PUSH
37691: DOUBLE
37692: LD_EXP 136
37696: PUSH
37697: LD_VAR 0 6
37701: ARRAY
37702: INC
37703: ST_TO_ADDR
37704: LD_INT 1
37706: PUSH
37707: FOR_DOWNTO
37708: IFFALSE 37869
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37710: LD_EXP 136
37714: PUSH
37715: LD_VAR 0 6
37719: ARRAY
37720: PUSH
37721: LD_VAR 0 5
37725: ARRAY
37726: PUSH
37727: LD_INT 1
37729: ARRAY
37730: PUSH
37731: LD_VAR 0 2
37735: EQUAL
37736: PUSH
37737: LD_EXP 136
37741: PUSH
37742: LD_VAR 0 6
37746: ARRAY
37747: PUSH
37748: LD_VAR 0 5
37752: ARRAY
37753: PUSH
37754: LD_INT 2
37756: ARRAY
37757: PUSH
37758: LD_VAR 0 3
37762: EQUAL
37763: AND
37764: IFFALSE 37867
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37766: LD_EXP 136
37770: PUSH
37771: LD_VAR 0 6
37775: ARRAY
37776: PUSH
37777: LD_VAR 0 5
37781: ARRAY
37782: PUSH
37783: LD_INT 1
37785: ARRAY
37786: PPUSH
37787: LD_EXP 136
37791: PUSH
37792: LD_VAR 0 6
37796: ARRAY
37797: PUSH
37798: LD_VAR 0 5
37802: ARRAY
37803: PUSH
37804: LD_INT 2
37806: ARRAY
37807: PPUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: CALL_OW 255
37817: PPUSH
37818: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37822: LD_ADDR_EXP 136
37826: PUSH
37827: LD_EXP 136
37831: PPUSH
37832: LD_VAR 0 6
37836: PPUSH
37837: LD_EXP 136
37841: PUSH
37842: LD_VAR 0 6
37846: ARRAY
37847: PPUSH
37848: LD_VAR 0 5
37852: PPUSH
37853: CALL_OW 3
37857: PPUSH
37858: CALL_OW 1
37862: ST_TO_ADDR
// exit ;
37863: POP
37864: POP
37865: GO 38058
// end ; end ;
37867: GO 37707
37869: POP
37870: POP
// for i := minerMinesList [ index ] downto 1 do
37871: LD_ADDR_VAR 0 5
37875: PUSH
37876: DOUBLE
37877: LD_EXP 136
37881: PUSH
37882: LD_VAR 0 6
37886: ARRAY
37887: INC
37888: ST_TO_ADDR
37889: LD_INT 1
37891: PUSH
37892: FOR_DOWNTO
37893: IFFALSE 38056
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37895: LD_EXP 136
37899: PUSH
37900: LD_VAR 0 6
37904: ARRAY
37905: PUSH
37906: LD_VAR 0 5
37910: ARRAY
37911: PUSH
37912: LD_INT 1
37914: ARRAY
37915: PPUSH
37916: LD_EXP 136
37920: PUSH
37921: LD_VAR 0 6
37925: ARRAY
37926: PUSH
37927: LD_VAR 0 5
37931: ARRAY
37932: PUSH
37933: LD_INT 2
37935: ARRAY
37936: PPUSH
37937: LD_VAR 0 2
37941: PPUSH
37942: LD_VAR 0 3
37946: PPUSH
37947: CALL_OW 298
37951: PUSH
37952: LD_INT 6
37954: LESS
37955: IFFALSE 38054
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37957: LD_EXP 136
37961: PUSH
37962: LD_VAR 0 6
37966: ARRAY
37967: PUSH
37968: LD_VAR 0 5
37972: ARRAY
37973: PUSH
37974: LD_INT 1
37976: ARRAY
37977: PPUSH
37978: LD_EXP 136
37982: PUSH
37983: LD_VAR 0 6
37987: ARRAY
37988: PUSH
37989: LD_VAR 0 5
37993: ARRAY
37994: PUSH
37995: LD_INT 2
37997: ARRAY
37998: PPUSH
37999: LD_VAR 0 1
38003: PPUSH
38004: CALL_OW 255
38008: PPUSH
38009: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38013: LD_ADDR_EXP 136
38017: PUSH
38018: LD_EXP 136
38022: PPUSH
38023: LD_VAR 0 6
38027: PPUSH
38028: LD_EXP 136
38032: PUSH
38033: LD_VAR 0 6
38037: ARRAY
38038: PPUSH
38039: LD_VAR 0 5
38043: PPUSH
38044: CALL_OW 3
38048: PPUSH
38049: CALL_OW 1
38053: ST_TO_ADDR
// end ; end ;
38054: GO 37892
38056: POP
38057: POP
// end ;
38058: LD_VAR 0 4
38062: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38063: LD_INT 0
38065: PPUSH
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38074: LD_VAR 0 1
38078: PPUSH
38079: CALL_OW 264
38083: PUSH
38084: LD_INT 81
38086: EQUAL
38087: NOT
38088: PUSH
38089: LD_VAR 0 1
38093: PUSH
38094: LD_EXP 135
38098: IN
38099: NOT
38100: OR
38101: IFFALSE 38105
// exit ;
38103: GO 38427
// index := GetElementIndex ( minersList , unit ) ;
38105: LD_ADDR_VAR 0 6
38109: PUSH
38110: LD_EXP 135
38114: PPUSH
38115: LD_VAR 0 1
38119: PPUSH
38120: CALL 43774 0 2
38124: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38125: LD_ADDR_VAR 0 8
38129: PUSH
38130: LD_EXP 137
38134: PUSH
38135: LD_EXP 136
38139: PUSH
38140: LD_VAR 0 6
38144: ARRAY
38145: MINUS
38146: ST_TO_ADDR
// if not minesFreeAmount then
38147: LD_VAR 0 8
38151: NOT
38152: IFFALSE 38156
// exit ;
38154: GO 38427
// tmp := [ ] ;
38156: LD_ADDR_VAR 0 7
38160: PUSH
38161: EMPTY
38162: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38163: LD_ADDR_VAR 0 5
38167: PUSH
38168: DOUBLE
38169: LD_INT 1
38171: DEC
38172: ST_TO_ADDR
38173: LD_VAR 0 8
38177: PUSH
38178: FOR_TO
38179: IFFALSE 38374
// begin _d := rand ( 0 , 5 ) ;
38181: LD_ADDR_VAR 0 11
38185: PUSH
38186: LD_INT 0
38188: PPUSH
38189: LD_INT 5
38191: PPUSH
38192: CALL_OW 12
38196: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38197: LD_ADDR_VAR 0 12
38201: PUSH
38202: LD_INT 2
38204: PPUSH
38205: LD_INT 6
38207: PPUSH
38208: CALL_OW 12
38212: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38213: LD_ADDR_VAR 0 9
38217: PUSH
38218: LD_VAR 0 2
38222: PPUSH
38223: LD_VAR 0 11
38227: PPUSH
38228: LD_VAR 0 12
38232: PPUSH
38233: CALL_OW 272
38237: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38238: LD_ADDR_VAR 0 10
38242: PUSH
38243: LD_VAR 0 3
38247: PPUSH
38248: LD_VAR 0 11
38252: PPUSH
38253: LD_VAR 0 12
38257: PPUSH
38258: CALL_OW 273
38262: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38263: LD_VAR 0 9
38267: PPUSH
38268: LD_VAR 0 10
38272: PPUSH
38273: CALL_OW 488
38277: PUSH
38278: LD_VAR 0 9
38282: PUSH
38283: LD_VAR 0 10
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_VAR 0 7
38296: IN
38297: NOT
38298: AND
38299: PUSH
38300: LD_VAR 0 9
38304: PPUSH
38305: LD_VAR 0 10
38309: PPUSH
38310: CALL_OW 458
38314: NOT
38315: AND
38316: IFFALSE 38358
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38318: LD_ADDR_VAR 0 7
38322: PUSH
38323: LD_VAR 0 7
38327: PPUSH
38328: LD_VAR 0 7
38332: PUSH
38333: LD_INT 1
38335: PLUS
38336: PPUSH
38337: LD_VAR 0 9
38341: PUSH
38342: LD_VAR 0 10
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PPUSH
38351: CALL_OW 1
38355: ST_TO_ADDR
38356: GO 38372
// i := i - 1 ;
38358: LD_ADDR_VAR 0 5
38362: PUSH
38363: LD_VAR 0 5
38367: PUSH
38368: LD_INT 1
38370: MINUS
38371: ST_TO_ADDR
// end ;
38372: GO 38178
38374: POP
38375: POP
// for i in tmp do
38376: LD_ADDR_VAR 0 5
38380: PUSH
38381: LD_VAR 0 7
38385: PUSH
38386: FOR_IN
38387: IFFALSE 38425
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38389: LD_VAR 0 1
38393: PPUSH
38394: LD_VAR 0 5
38398: PUSH
38399: LD_INT 1
38401: ARRAY
38402: PPUSH
38403: LD_VAR 0 5
38407: PUSH
38408: LD_INT 2
38410: ARRAY
38411: PPUSH
38412: CALL 37371 0 3
38416: NOT
38417: IFFALSE 38423
// exit ;
38419: POP
38420: POP
38421: GO 38427
38423: GO 38386
38425: POP
38426: POP
// end ;
38427: LD_VAR 0 4
38431: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38432: LD_INT 0
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
38439: PPUSH
38440: PPUSH
// if not GetClass ( unit ) = class_sniper then
38441: LD_VAR 0 1
38445: PPUSH
38446: CALL_OW 257
38450: PUSH
38451: LD_INT 5
38453: EQUAL
38454: NOT
38455: IFFALSE 38459
// exit ;
38457: GO 38847
// dist := 8 ;
38459: LD_ADDR_VAR 0 5
38463: PUSH
38464: LD_INT 8
38466: ST_TO_ADDR
// viewRange := 12 ;
38467: LD_ADDR_VAR 0 7
38471: PUSH
38472: LD_INT 12
38474: ST_TO_ADDR
// side := GetSide ( unit ) ;
38475: LD_ADDR_VAR 0 6
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 255
38489: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38490: LD_INT 61
38492: PPUSH
38493: LD_VAR 0 6
38497: PPUSH
38498: CALL_OW 321
38502: PUSH
38503: LD_INT 2
38505: EQUAL
38506: IFFALSE 38516
// viewRange := 16 ;
38508: LD_ADDR_VAR 0 7
38512: PUSH
38513: LD_INT 16
38515: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38516: LD_VAR 0 1
38520: PPUSH
38521: LD_VAR 0 2
38525: PPUSH
38526: LD_VAR 0 3
38530: PPUSH
38531: CALL_OW 297
38535: PUSH
38536: LD_VAR 0 5
38540: GREATER
38541: IFFALSE 38620
// begin ComMoveXY ( unit , x , y ) ;
38543: LD_VAR 0 1
38547: PPUSH
38548: LD_VAR 0 2
38552: PPUSH
38553: LD_VAR 0 3
38557: PPUSH
38558: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38562: LD_INT 35
38564: PPUSH
38565: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38569: LD_VAR 0 1
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: CALL 75129 0 3
38588: NOT
38589: IFFALSE 38593
// exit ;
38591: GO 38847
// until GetDistUnitXY ( unit , x , y ) < dist ;
38593: LD_VAR 0 1
38597: PPUSH
38598: LD_VAR 0 2
38602: PPUSH
38603: LD_VAR 0 3
38607: PPUSH
38608: CALL_OW 297
38612: PUSH
38613: LD_VAR 0 5
38617: LESS
38618: IFFALSE 38562
// end ; ComTurnXY ( unit , x , y ) ;
38620: LD_VAR 0 1
38624: PPUSH
38625: LD_VAR 0 2
38629: PPUSH
38630: LD_VAR 0 3
38634: PPUSH
38635: CALL_OW 118
// wait ( 5 ) ;
38639: LD_INT 5
38641: PPUSH
38642: CALL_OW 67
// _d := GetDir ( unit ) ;
38646: LD_ADDR_VAR 0 10
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 254
38660: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38661: LD_ADDR_VAR 0 8
38665: PUSH
38666: LD_VAR 0 1
38670: PPUSH
38671: CALL_OW 250
38675: PPUSH
38676: LD_VAR 0 10
38680: PPUSH
38681: LD_VAR 0 5
38685: PPUSH
38686: CALL_OW 272
38690: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38691: LD_ADDR_VAR 0 9
38695: PUSH
38696: LD_VAR 0 1
38700: PPUSH
38701: CALL_OW 251
38705: PPUSH
38706: LD_VAR 0 10
38710: PPUSH
38711: LD_VAR 0 5
38715: PPUSH
38716: CALL_OW 273
38720: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38721: LD_VAR 0 8
38725: PPUSH
38726: LD_VAR 0 9
38730: PPUSH
38731: CALL_OW 488
38735: NOT
38736: IFFALSE 38740
// exit ;
38738: GO 38847
// ComAnimCustom ( unit , 1 ) ;
38740: LD_VAR 0 1
38744: PPUSH
38745: LD_INT 1
38747: PPUSH
38748: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38752: LD_VAR 0 8
38756: PPUSH
38757: LD_VAR 0 9
38761: PPUSH
38762: LD_VAR 0 6
38766: PPUSH
38767: LD_VAR 0 7
38771: PPUSH
38772: CALL_OW 330
// repeat wait ( 1 ) ;
38776: LD_INT 1
38778: PPUSH
38779: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 316
38792: PUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 314
38802: OR
38803: PUSH
38804: LD_VAR 0 1
38808: PPUSH
38809: CALL_OW 302
38813: NOT
38814: OR
38815: PUSH
38816: LD_VAR 0 1
38820: PPUSH
38821: CALL_OW 301
38825: OR
38826: IFFALSE 38776
// RemoveSeeing ( _x , _y , side ) ;
38828: LD_VAR 0 8
38832: PPUSH
38833: LD_VAR 0 9
38837: PPUSH
38838: LD_VAR 0 6
38842: PPUSH
38843: CALL_OW 331
// end ; end_of_file
38847: LD_VAR 0 4
38851: RET
// export ru_radar export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38852: LD_INT 0
38854: PPUSH
38855: PPUSH
// if exist_mode then
38856: LD_VAR 0 2
38860: IFFALSE 38885
// unit := CreateCharacter ( prefix & ident ) else
38862: LD_ADDR_VAR 0 5
38866: PUSH
38867: LD_VAR 0 3
38871: PUSH
38872: LD_VAR 0 1
38876: STR
38877: PPUSH
38878: CALL_OW 34
38882: ST_TO_ADDR
38883: GO 38900
// unit := NewCharacter ( ident ) ;
38885: LD_ADDR_VAR 0 5
38889: PUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 25
38899: ST_TO_ADDR
// result := unit ;
38900: LD_ADDR_VAR 0 4
38904: PUSH
38905: LD_VAR 0 5
38909: ST_TO_ADDR
// end ;
38910: LD_VAR 0 4
38914: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38915: LD_INT 0
38917: PPUSH
38918: PPUSH
// if not side or not nation then
38919: LD_VAR 0 1
38923: NOT
38924: PUSH
38925: LD_VAR 0 2
38929: NOT
38930: OR
38931: IFFALSE 38935
// exit ;
38933: GO 39703
// case nation of nation_american :
38935: LD_VAR 0 2
38939: PUSH
38940: LD_INT 1
38942: DOUBLE
38943: EQUAL
38944: IFTRUE 38948
38946: GO 39162
38948: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38949: LD_ADDR_VAR 0 4
38953: PUSH
38954: LD_INT 35
38956: PUSH
38957: LD_INT 45
38959: PUSH
38960: LD_INT 46
38962: PUSH
38963: LD_INT 47
38965: PUSH
38966: LD_INT 82
38968: PUSH
38969: LD_INT 83
38971: PUSH
38972: LD_INT 84
38974: PUSH
38975: LD_INT 85
38977: PUSH
38978: LD_INT 86
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: LD_INT 6
38989: PUSH
38990: LD_INT 15
38992: PUSH
38993: LD_INT 16
38995: PUSH
38996: LD_INT 7
38998: PUSH
38999: LD_INT 12
39001: PUSH
39002: LD_INT 13
39004: PUSH
39005: LD_INT 10
39007: PUSH
39008: LD_INT 14
39010: PUSH
39011: LD_INT 20
39013: PUSH
39014: LD_INT 21
39016: PUSH
39017: LD_INT 22
39019: PUSH
39020: LD_INT 25
39022: PUSH
39023: LD_INT 32
39025: PUSH
39026: LD_INT 27
39028: PUSH
39029: LD_INT 36
39031: PUSH
39032: LD_INT 69
39034: PUSH
39035: LD_INT 39
39037: PUSH
39038: LD_INT 34
39040: PUSH
39041: LD_INT 40
39043: PUSH
39044: LD_INT 48
39046: PUSH
39047: LD_INT 49
39049: PUSH
39050: LD_INT 50
39052: PUSH
39053: LD_INT 51
39055: PUSH
39056: LD_INT 52
39058: PUSH
39059: LD_INT 53
39061: PUSH
39062: LD_INT 54
39064: PUSH
39065: LD_INT 55
39067: PUSH
39068: LD_INT 56
39070: PUSH
39071: LD_INT 57
39073: PUSH
39074: LD_INT 58
39076: PUSH
39077: LD_INT 59
39079: PUSH
39080: LD_INT 60
39082: PUSH
39083: LD_INT 61
39085: PUSH
39086: LD_INT 62
39088: PUSH
39089: LD_INT 80
39091: PUSH
39092: LD_INT 82
39094: PUSH
39095: LD_INT 83
39097: PUSH
39098: LD_INT 84
39100: PUSH
39101: LD_INT 85
39103: PUSH
39104: LD_INT 86
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: ST_TO_ADDR
39160: GO 39627
39162: LD_INT 2
39164: DOUBLE
39165: EQUAL
39166: IFTRUE 39170
39168: GO 39396
39170: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39171: LD_ADDR_VAR 0 4
39175: PUSH
39176: LD_INT 35
39178: PUSH
39179: LD_INT 45
39181: PUSH
39182: LD_INT 46
39184: PUSH
39185: LD_INT 47
39187: PUSH
39188: LD_INT 82
39190: PUSH
39191: LD_INT 83
39193: PUSH
39194: LD_INT 84
39196: PUSH
39197: LD_INT 85
39199: PUSH
39200: LD_INT 87
39202: PUSH
39203: LD_INT 70
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 11
39211: PUSH
39212: LD_INT 3
39214: PUSH
39215: LD_INT 4
39217: PUSH
39218: LD_INT 5
39220: PUSH
39221: LD_INT 6
39223: PUSH
39224: LD_INT 15
39226: PUSH
39227: LD_INT 18
39229: PUSH
39230: LD_INT 7
39232: PUSH
39233: LD_INT 17
39235: PUSH
39236: LD_INT 8
39238: PUSH
39239: LD_INT 20
39241: PUSH
39242: LD_INT 21
39244: PUSH
39245: LD_INT 22
39247: PUSH
39248: LD_INT 72
39250: PUSH
39251: LD_INT 26
39253: PUSH
39254: LD_INT 69
39256: PUSH
39257: LD_INT 39
39259: PUSH
39260: LD_INT 40
39262: PUSH
39263: LD_INT 41
39265: PUSH
39266: LD_INT 42
39268: PUSH
39269: LD_INT 43
39271: PUSH
39272: LD_INT 48
39274: PUSH
39275: LD_INT 49
39277: PUSH
39278: LD_INT 50
39280: PUSH
39281: LD_INT 51
39283: PUSH
39284: LD_INT 52
39286: PUSH
39287: LD_INT 53
39289: PUSH
39290: LD_INT 54
39292: PUSH
39293: LD_INT 55
39295: PUSH
39296: LD_INT 56
39298: PUSH
39299: LD_INT 60
39301: PUSH
39302: LD_INT 61
39304: PUSH
39305: LD_INT 62
39307: PUSH
39308: LD_INT 66
39310: PUSH
39311: LD_INT 67
39313: PUSH
39314: LD_INT 68
39316: PUSH
39317: LD_INT 81
39319: PUSH
39320: LD_INT 82
39322: PUSH
39323: LD_INT 83
39325: PUSH
39326: LD_INT 84
39328: PUSH
39329: LD_INT 85
39331: PUSH
39332: LD_INT 87
39334: PUSH
39335: LD_INT 88
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
39394: GO 39627
39396: LD_INT 3
39398: DOUBLE
39399: EQUAL
39400: IFTRUE 39404
39402: GO 39626
39404: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39405: LD_ADDR_VAR 0 4
39409: PUSH
39410: LD_INT 46
39412: PUSH
39413: LD_INT 47
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: LD_INT 82
39424: PUSH
39425: LD_INT 83
39427: PUSH
39428: LD_INT 84
39430: PUSH
39431: LD_INT 85
39433: PUSH
39434: LD_INT 86
39436: PUSH
39437: LD_INT 11
39439: PUSH
39440: LD_INT 9
39442: PUSH
39443: LD_INT 20
39445: PUSH
39446: LD_INT 19
39448: PUSH
39449: LD_INT 21
39451: PUSH
39452: LD_INT 24
39454: PUSH
39455: LD_INT 22
39457: PUSH
39458: LD_INT 25
39460: PUSH
39461: LD_INT 28
39463: PUSH
39464: LD_INT 29
39466: PUSH
39467: LD_INT 30
39469: PUSH
39470: LD_INT 31
39472: PUSH
39473: LD_INT 37
39475: PUSH
39476: LD_INT 38
39478: PUSH
39479: LD_INT 32
39481: PUSH
39482: LD_INT 27
39484: PUSH
39485: LD_INT 33
39487: PUSH
39488: LD_INT 69
39490: PUSH
39491: LD_INT 39
39493: PUSH
39494: LD_INT 34
39496: PUSH
39497: LD_INT 40
39499: PUSH
39500: LD_INT 71
39502: PUSH
39503: LD_INT 23
39505: PUSH
39506: LD_INT 44
39508: PUSH
39509: LD_INT 48
39511: PUSH
39512: LD_INT 49
39514: PUSH
39515: LD_INT 50
39517: PUSH
39518: LD_INT 51
39520: PUSH
39521: LD_INT 52
39523: PUSH
39524: LD_INT 53
39526: PUSH
39527: LD_INT 54
39529: PUSH
39530: LD_INT 55
39532: PUSH
39533: LD_INT 56
39535: PUSH
39536: LD_INT 57
39538: PUSH
39539: LD_INT 58
39541: PUSH
39542: LD_INT 59
39544: PUSH
39545: LD_INT 63
39547: PUSH
39548: LD_INT 64
39550: PUSH
39551: LD_INT 65
39553: PUSH
39554: LD_INT 82
39556: PUSH
39557: LD_INT 83
39559: PUSH
39560: LD_INT 84
39562: PUSH
39563: LD_INT 85
39565: PUSH
39566: LD_INT 86
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: ST_TO_ADDR
39624: GO 39627
39626: POP
// if state > - 1 and state < 3 then
39627: LD_VAR 0 3
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: GREATER
39636: PUSH
39637: LD_VAR 0 3
39641: PUSH
39642: LD_INT 3
39644: LESS
39645: AND
39646: IFFALSE 39703
// for i in result do
39648: LD_ADDR_VAR 0 5
39652: PUSH
39653: LD_VAR 0 4
39657: PUSH
39658: FOR_IN
39659: IFFALSE 39701
// if GetTech ( i , side ) <> state then
39661: LD_VAR 0 5
39665: PPUSH
39666: LD_VAR 0 1
39670: PPUSH
39671: CALL_OW 321
39675: PUSH
39676: LD_VAR 0 3
39680: NONEQUAL
39681: IFFALSE 39699
// result := result diff i ;
39683: LD_ADDR_VAR 0 4
39687: PUSH
39688: LD_VAR 0 4
39692: PUSH
39693: LD_VAR 0 5
39697: DIFF
39698: ST_TO_ADDR
39699: GO 39658
39701: POP
39702: POP
// end ;
39703: LD_VAR 0 4
39707: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39708: LD_INT 0
39710: PPUSH
39711: PPUSH
39712: PPUSH
// result := true ;
39713: LD_ADDR_VAR 0 3
39717: PUSH
39718: LD_INT 1
39720: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39721: LD_ADDR_VAR 0 5
39725: PUSH
39726: LD_VAR 0 2
39730: PPUSH
39731: CALL_OW 480
39735: ST_TO_ADDR
// if not tmp then
39736: LD_VAR 0 5
39740: NOT
39741: IFFALSE 39745
// exit ;
39743: GO 39794
// for i in tmp do
39745: LD_ADDR_VAR 0 4
39749: PUSH
39750: LD_VAR 0 5
39754: PUSH
39755: FOR_IN
39756: IFFALSE 39792
// if GetTech ( i , side ) <> state_researched then
39758: LD_VAR 0 4
39762: PPUSH
39763: LD_VAR 0 1
39767: PPUSH
39768: CALL_OW 321
39772: PUSH
39773: LD_INT 2
39775: NONEQUAL
39776: IFFALSE 39790
// begin result := false ;
39778: LD_ADDR_VAR 0 3
39782: PUSH
39783: LD_INT 0
39785: ST_TO_ADDR
// exit ;
39786: POP
39787: POP
39788: GO 39794
// end ;
39790: GO 39755
39792: POP
39793: POP
// end ;
39794: LD_VAR 0 3
39798: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39799: LD_INT 0
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39814: LD_VAR 0 1
39818: NOT
39819: PUSH
39820: LD_VAR 0 1
39824: PPUSH
39825: CALL_OW 257
39829: PUSH
39830: LD_INT 9
39832: NONEQUAL
39833: OR
39834: IFFALSE 39838
// exit ;
39836: GO 40411
// side := GetSide ( unit ) ;
39838: LD_ADDR_VAR 0 9
39842: PUSH
39843: LD_VAR 0 1
39847: PPUSH
39848: CALL_OW 255
39852: ST_TO_ADDR
// tech_space := tech_spacanom ;
39853: LD_ADDR_VAR 0 12
39857: PUSH
39858: LD_INT 29
39860: ST_TO_ADDR
// tech_time := tech_taurad ;
39861: LD_ADDR_VAR 0 13
39865: PUSH
39866: LD_INT 28
39868: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39869: LD_ADDR_VAR 0 11
39873: PUSH
39874: LD_VAR 0 1
39878: PPUSH
39879: CALL_OW 310
39883: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39884: LD_VAR 0 11
39888: PPUSH
39889: CALL_OW 247
39893: PUSH
39894: LD_INT 2
39896: EQUAL
39897: IFFALSE 39901
// exit ;
39899: GO 40411
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39901: LD_ADDR_VAR 0 8
39905: PUSH
39906: LD_INT 81
39908: PUSH
39909: LD_VAR 0 9
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: LD_INT 21
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PPUSH
39939: CALL_OW 69
39943: ST_TO_ADDR
// if not tmp then
39944: LD_VAR 0 8
39948: NOT
39949: IFFALSE 39953
// exit ;
39951: GO 40411
// if in_unit then
39953: LD_VAR 0 11
39957: IFFALSE 39981
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39959: LD_ADDR_VAR 0 10
39963: PUSH
39964: LD_VAR 0 8
39968: PPUSH
39969: LD_VAR 0 11
39973: PPUSH
39974: CALL_OW 74
39978: ST_TO_ADDR
39979: GO 40001
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39981: LD_ADDR_VAR 0 10
39985: PUSH
39986: LD_VAR 0 8
39990: PPUSH
39991: LD_VAR 0 1
39995: PPUSH
39996: CALL_OW 74
40000: ST_TO_ADDR
// if not enemy then
40001: LD_VAR 0 10
40005: NOT
40006: IFFALSE 40010
// exit ;
40008: GO 40411
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40010: LD_VAR 0 11
40014: PUSH
40015: LD_VAR 0 11
40019: PPUSH
40020: LD_VAR 0 10
40024: PPUSH
40025: CALL_OW 296
40029: PUSH
40030: LD_INT 13
40032: GREATER
40033: AND
40034: PUSH
40035: LD_VAR 0 1
40039: PPUSH
40040: LD_VAR 0 10
40044: PPUSH
40045: CALL_OW 296
40049: PUSH
40050: LD_INT 12
40052: GREATER
40053: OR
40054: IFFALSE 40058
// exit ;
40056: GO 40411
// missile := [ 1 ] ;
40058: LD_ADDR_VAR 0 14
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40069: LD_VAR 0 9
40073: PPUSH
40074: LD_VAR 0 12
40078: PPUSH
40079: CALL_OW 325
40083: IFFALSE 40112
// missile := Replace ( missile , missile + 1 , 2 ) ;
40085: LD_ADDR_VAR 0 14
40089: PUSH
40090: LD_VAR 0 14
40094: PPUSH
40095: LD_VAR 0 14
40099: PUSH
40100: LD_INT 1
40102: PLUS
40103: PPUSH
40104: LD_INT 2
40106: PPUSH
40107: CALL_OW 1
40111: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40112: LD_VAR 0 9
40116: PPUSH
40117: LD_VAR 0 13
40121: PPUSH
40122: CALL_OW 325
40126: PUSH
40127: LD_VAR 0 10
40131: PPUSH
40132: CALL_OW 255
40136: PPUSH
40137: LD_VAR 0 13
40141: PPUSH
40142: CALL_OW 325
40146: NOT
40147: AND
40148: IFFALSE 40177
// missile := Replace ( missile , missile + 1 , 3 ) ;
40150: LD_ADDR_VAR 0 14
40154: PUSH
40155: LD_VAR 0 14
40159: PPUSH
40160: LD_VAR 0 14
40164: PUSH
40165: LD_INT 1
40167: PLUS
40168: PPUSH
40169: LD_INT 3
40171: PPUSH
40172: CALL_OW 1
40176: ST_TO_ADDR
// if missile < 2 then
40177: LD_VAR 0 14
40181: PUSH
40182: LD_INT 2
40184: LESS
40185: IFFALSE 40189
// exit ;
40187: GO 40411
// x := GetX ( enemy ) ;
40189: LD_ADDR_VAR 0 4
40193: PUSH
40194: LD_VAR 0 10
40198: PPUSH
40199: CALL_OW 250
40203: ST_TO_ADDR
// y := GetY ( enemy ) ;
40204: LD_ADDR_VAR 0 5
40208: PUSH
40209: LD_VAR 0 10
40213: PPUSH
40214: CALL_OW 251
40218: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40219: LD_ADDR_VAR 0 6
40223: PUSH
40224: LD_VAR 0 4
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PPUSH
40233: LD_INT 1
40235: PPUSH
40236: CALL_OW 12
40240: PLUS
40241: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40242: LD_ADDR_VAR 0 7
40246: PUSH
40247: LD_VAR 0 5
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PPUSH
40256: LD_INT 1
40258: PPUSH
40259: CALL_OW 12
40263: PLUS
40264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40265: LD_VAR 0 6
40269: PPUSH
40270: LD_VAR 0 7
40274: PPUSH
40275: CALL_OW 488
40279: NOT
40280: IFFALSE 40302
// begin _x := x ;
40282: LD_ADDR_VAR 0 6
40286: PUSH
40287: LD_VAR 0 4
40291: ST_TO_ADDR
// _y := y ;
40292: LD_ADDR_VAR 0 7
40296: PUSH
40297: LD_VAR 0 5
40301: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40302: LD_ADDR_VAR 0 3
40306: PUSH
40307: LD_INT 1
40309: PPUSH
40310: LD_VAR 0 14
40314: PPUSH
40315: CALL_OW 12
40319: ST_TO_ADDR
// case i of 1 :
40320: LD_VAR 0 3
40324: PUSH
40325: LD_INT 1
40327: DOUBLE
40328: EQUAL
40329: IFTRUE 40333
40331: GO 40350
40333: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40334: LD_VAR 0 1
40338: PPUSH
40339: LD_VAR 0 10
40343: PPUSH
40344: CALL_OW 115
40348: GO 40411
40350: LD_INT 2
40352: DOUBLE
40353: EQUAL
40354: IFTRUE 40358
40356: GO 40380
40358: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40359: LD_VAR 0 1
40363: PPUSH
40364: LD_VAR 0 6
40368: PPUSH
40369: LD_VAR 0 7
40373: PPUSH
40374: CALL_OW 153
40378: GO 40411
40380: LD_INT 3
40382: DOUBLE
40383: EQUAL
40384: IFTRUE 40388
40386: GO 40410
40388: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40389: LD_VAR 0 1
40393: PPUSH
40394: LD_VAR 0 6
40398: PPUSH
40399: LD_VAR 0 7
40403: PPUSH
40404: CALL_OW 154
40408: GO 40411
40410: POP
// end ;
40411: LD_VAR 0 2
40415: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40416: LD_INT 0
40418: PPUSH
40419: PPUSH
40420: PPUSH
40421: PPUSH
40422: PPUSH
40423: PPUSH
// if not unit or not building then
40424: LD_VAR 0 1
40428: NOT
40429: PUSH
40430: LD_VAR 0 2
40434: NOT
40435: OR
40436: IFFALSE 40440
// exit ;
40438: GO 40598
// x := GetX ( building ) ;
40440: LD_ADDR_VAR 0 5
40444: PUSH
40445: LD_VAR 0 2
40449: PPUSH
40450: CALL_OW 250
40454: ST_TO_ADDR
// y := GetY ( building ) ;
40455: LD_ADDR_VAR 0 6
40459: PUSH
40460: LD_VAR 0 2
40464: PPUSH
40465: CALL_OW 251
40469: ST_TO_ADDR
// for i = 0 to 5 do
40470: LD_ADDR_VAR 0 4
40474: PUSH
40475: DOUBLE
40476: LD_INT 0
40478: DEC
40479: ST_TO_ADDR
40480: LD_INT 5
40482: PUSH
40483: FOR_TO
40484: IFFALSE 40596
// begin _x := ShiftX ( x , i , 3 ) ;
40486: LD_ADDR_VAR 0 7
40490: PUSH
40491: LD_VAR 0 5
40495: PPUSH
40496: LD_VAR 0 4
40500: PPUSH
40501: LD_INT 3
40503: PPUSH
40504: CALL_OW 272
40508: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40509: LD_ADDR_VAR 0 8
40513: PUSH
40514: LD_VAR 0 6
40518: PPUSH
40519: LD_VAR 0 4
40523: PPUSH
40524: LD_INT 3
40526: PPUSH
40527: CALL_OW 273
40531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40532: LD_VAR 0 7
40536: PPUSH
40537: LD_VAR 0 8
40541: PPUSH
40542: CALL_OW 488
40546: NOT
40547: IFFALSE 40551
// continue ;
40549: GO 40483
// if HexInfo ( _x , _y ) = 0 then
40551: LD_VAR 0 7
40555: PPUSH
40556: LD_VAR 0 8
40560: PPUSH
40561: CALL_OW 428
40565: PUSH
40566: LD_INT 0
40568: EQUAL
40569: IFFALSE 40594
// begin ComMoveXY ( unit , _x , _y ) ;
40571: LD_VAR 0 1
40575: PPUSH
40576: LD_VAR 0 7
40580: PPUSH
40581: LD_VAR 0 8
40585: PPUSH
40586: CALL_OW 111
// exit ;
40590: POP
40591: POP
40592: GO 40598
// end ; end ;
40594: GO 40483
40596: POP
40597: POP
// end ;
40598: LD_VAR 0 3
40602: RET
// export function ScanBase ( side , base_area ) ; begin
40603: LD_INT 0
40605: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_VAR 0 2
40615: PPUSH
40616: LD_INT 81
40618: PUSH
40619: LD_VAR 0 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PPUSH
40628: CALL_OW 70
40632: ST_TO_ADDR
// end ;
40633: LD_VAR 0 3
40637: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40638: LD_INT 0
40640: PPUSH
40641: PPUSH
40642: PPUSH
40643: PPUSH
// result := false ;
40644: LD_ADDR_VAR 0 2
40648: PUSH
40649: LD_INT 0
40651: ST_TO_ADDR
// side := GetSide ( unit ) ;
40652: LD_ADDR_VAR 0 3
40656: PUSH
40657: LD_VAR 0 1
40661: PPUSH
40662: CALL_OW 255
40666: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40667: LD_ADDR_VAR 0 4
40671: PUSH
40672: LD_VAR 0 1
40676: PPUSH
40677: CALL_OW 248
40681: ST_TO_ADDR
// case nat of 1 :
40682: LD_VAR 0 4
40686: PUSH
40687: LD_INT 1
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40706
40695: POP
// tech := tech_lassight ; 2 :
40696: LD_ADDR_VAR 0 5
40700: PUSH
40701: LD_INT 12
40703: ST_TO_ADDR
40704: GO 40745
40706: LD_INT 2
40708: DOUBLE
40709: EQUAL
40710: IFTRUE 40714
40712: GO 40725
40714: POP
// tech := tech_mortar ; 3 :
40715: LD_ADDR_VAR 0 5
40719: PUSH
40720: LD_INT 41
40722: ST_TO_ADDR
40723: GO 40745
40725: LD_INT 3
40727: DOUBLE
40728: EQUAL
40729: IFTRUE 40733
40731: GO 40744
40733: POP
// tech := tech_bazooka ; end ;
40734: LD_ADDR_VAR 0 5
40738: PUSH
40739: LD_INT 44
40741: ST_TO_ADDR
40742: GO 40745
40744: POP
// if Researched ( side , tech ) then
40745: LD_VAR 0 3
40749: PPUSH
40750: LD_VAR 0 5
40754: PPUSH
40755: CALL_OW 325
40759: IFFALSE 40786
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40761: LD_ADDR_VAR 0 2
40765: PUSH
40766: LD_INT 5
40768: PUSH
40769: LD_INT 8
40771: PUSH
40772: LD_INT 9
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: PUSH
40780: LD_VAR 0 4
40784: ARRAY
40785: ST_TO_ADDR
// end ;
40786: LD_VAR 0 2
40790: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40791: LD_INT 0
40793: PPUSH
40794: PPUSH
40795: PPUSH
// if not mines then
40796: LD_VAR 0 2
40800: NOT
40801: IFFALSE 40805
// exit ;
40803: GO 40949
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40805: LD_ADDR_VAR 0 5
40809: PUSH
40810: LD_INT 81
40812: PUSH
40813: LD_VAR 0 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: LD_INT 21
40827: PUSH
40828: LD_INT 3
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PPUSH
40843: CALL_OW 69
40847: ST_TO_ADDR
// for i in mines do
40848: LD_ADDR_VAR 0 4
40852: PUSH
40853: LD_VAR 0 2
40857: PUSH
40858: FOR_IN
40859: IFFALSE 40947
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40861: LD_VAR 0 4
40865: PUSH
40866: LD_INT 1
40868: ARRAY
40869: PPUSH
40870: LD_VAR 0 4
40874: PUSH
40875: LD_INT 2
40877: ARRAY
40878: PPUSH
40879: CALL_OW 458
40883: NOT
40884: IFFALSE 40888
// continue ;
40886: GO 40858
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40888: LD_VAR 0 4
40892: PUSH
40893: LD_INT 1
40895: ARRAY
40896: PPUSH
40897: LD_VAR 0 4
40901: PUSH
40902: LD_INT 2
40904: ARRAY
40905: PPUSH
40906: CALL_OW 428
40910: PUSH
40911: LD_VAR 0 5
40915: IN
40916: IFFALSE 40945
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40918: LD_VAR 0 4
40922: PUSH
40923: LD_INT 1
40925: ARRAY
40926: PPUSH
40927: LD_VAR 0 4
40931: PUSH
40932: LD_INT 2
40934: ARRAY
40935: PPUSH
40936: LD_VAR 0 1
40940: PPUSH
40941: CALL_OW 456
// end ;
40945: GO 40858
40947: POP
40948: POP
// end ;
40949: LD_VAR 0 3
40953: RET
// export function Count ( array ) ; var i ; begin
40954: LD_INT 0
40956: PPUSH
40957: PPUSH
// result := 0 ;
40958: LD_ADDR_VAR 0 2
40962: PUSH
40963: LD_INT 0
40965: ST_TO_ADDR
// for i in array do
40966: LD_ADDR_VAR 0 3
40970: PUSH
40971: LD_VAR 0 1
40975: PUSH
40976: FOR_IN
40977: IFFALSE 41001
// if i then
40979: LD_VAR 0 3
40983: IFFALSE 40999
// result := result + 1 ;
40985: LD_ADDR_VAR 0 2
40989: PUSH
40990: LD_VAR 0 2
40994: PUSH
40995: LD_INT 1
40997: PLUS
40998: ST_TO_ADDR
40999: GO 40976
41001: POP
41002: POP
// end ;
41003: LD_VAR 0 2
41007: RET
// export function IsEmpty ( building ) ; begin
41008: LD_INT 0
41010: PPUSH
// if not building then
41011: LD_VAR 0 1
41015: NOT
41016: IFFALSE 41020
// exit ;
41018: GO 41063
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41020: LD_ADDR_VAR 0 2
41024: PUSH
41025: LD_VAR 0 1
41029: PUSH
41030: LD_INT 22
41032: PUSH
41033: LD_VAR 0 1
41037: PPUSH
41038: CALL_OW 255
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 58
41049: PUSH
41050: EMPTY
41051: LIST
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PPUSH
41057: CALL_OW 69
41061: IN
41062: ST_TO_ADDR
// end ;
41063: LD_VAR 0 2
41067: RET
// export function IsNotFull ( building ) ; var places ; begin
41068: LD_INT 0
41070: PPUSH
41071: PPUSH
// if not building then
41072: LD_VAR 0 1
41076: NOT
41077: IFFALSE 41081
// exit ;
41079: GO 41252
// result := false ;
41081: LD_ADDR_VAR 0 2
41085: PUSH
41086: LD_INT 0
41088: ST_TO_ADDR
// places := 0 ;
41089: LD_ADDR_VAR 0 3
41093: PUSH
41094: LD_INT 0
41096: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 266
41106: PUSH
41107: LD_INT 0
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41169
41113: LD_INT 1
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41169
41119: LD_INT 6
41121: DOUBLE
41122: EQUAL
41123: IFTRUE 41169
41125: LD_INT 7
41127: DOUBLE
41128: EQUAL
41129: IFTRUE 41169
41131: LD_INT 8
41133: DOUBLE
41134: EQUAL
41135: IFTRUE 41169
41137: LD_INT 4
41139: DOUBLE
41140: EQUAL
41141: IFTRUE 41169
41143: LD_INT 5
41145: DOUBLE
41146: EQUAL
41147: IFTRUE 41169
41149: LD_INT 2
41151: DOUBLE
41152: EQUAL
41153: IFTRUE 41169
41155: LD_INT 3
41157: DOUBLE
41158: EQUAL
41159: IFTRUE 41169
41161: LD_INT 35
41163: DOUBLE
41164: EQUAL
41165: IFTRUE 41169
41167: GO 41180
41169: POP
// places := 6 ; b_bunker , b_breastwork :
41170: LD_ADDR_VAR 0 3
41174: PUSH
41175: LD_INT 6
41177: ST_TO_ADDR
41178: GO 41225
41180: LD_INT 32
41182: DOUBLE
41183: EQUAL
41184: IFTRUE 41194
41186: LD_INT 31
41188: DOUBLE
41189: EQUAL
41190: IFTRUE 41194
41192: GO 41205
41194: POP
// places := 1 ; b_control_tower :
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: LD_INT 1
41202: ST_TO_ADDR
41203: GO 41225
41205: LD_INT 36
41207: DOUBLE
41208: EQUAL
41209: IFTRUE 41213
41211: GO 41224
41213: POP
// places := 3 ; end ;
41214: LD_ADDR_VAR 0 3
41218: PUSH
41219: LD_INT 3
41221: ST_TO_ADDR
41222: GO 41225
41224: POP
// if places then
41225: LD_VAR 0 3
41229: IFFALSE 41252
// result := UnitsInside ( building ) < places ;
41231: LD_ADDR_VAR 0 2
41235: PUSH
41236: LD_VAR 0 1
41240: PPUSH
41241: CALL_OW 313
41245: PUSH
41246: LD_VAR 0 3
41250: LESS
41251: ST_TO_ADDR
// end ;
41252: LD_VAR 0 2
41256: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41257: LD_INT 0
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
// tmp := [ ] ;
41263: LD_ADDR_VAR 0 3
41267: PUSH
41268: EMPTY
41269: ST_TO_ADDR
// list := [ ] ;
41270: LD_ADDR_VAR 0 5
41274: PUSH
41275: EMPTY
41276: ST_TO_ADDR
// for i = 16 to 25 do
41277: LD_ADDR_VAR 0 4
41281: PUSH
41282: DOUBLE
41283: LD_INT 16
41285: DEC
41286: ST_TO_ADDR
41287: LD_INT 25
41289: PUSH
41290: FOR_TO
41291: IFFALSE 41364
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41293: LD_ADDR_VAR 0 3
41297: PUSH
41298: LD_VAR 0 3
41302: PUSH
41303: LD_INT 22
41305: PUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: CALL_OW 255
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 91
41322: PUSH
41323: LD_VAR 0 1
41327: PUSH
41328: LD_INT 6
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 30
41338: PUSH
41339: LD_VAR 0 4
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: PUSH
41353: EMPTY
41354: LIST
41355: PPUSH
41356: CALL_OW 69
41360: ADD
41361: ST_TO_ADDR
41362: GO 41290
41364: POP
41365: POP
// for i = 1 to tmp do
41366: LD_ADDR_VAR 0 4
41370: PUSH
41371: DOUBLE
41372: LD_INT 1
41374: DEC
41375: ST_TO_ADDR
41376: LD_VAR 0 3
41380: PUSH
41381: FOR_TO
41382: IFFALSE 41470
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41384: LD_ADDR_VAR 0 5
41388: PUSH
41389: LD_VAR 0 5
41393: PUSH
41394: LD_VAR 0 3
41398: PUSH
41399: LD_VAR 0 4
41403: ARRAY
41404: PPUSH
41405: CALL_OW 266
41409: PUSH
41410: LD_VAR 0 3
41414: PUSH
41415: LD_VAR 0 4
41419: ARRAY
41420: PPUSH
41421: CALL_OW 250
41425: PUSH
41426: LD_VAR 0 3
41430: PUSH
41431: LD_VAR 0 4
41435: ARRAY
41436: PPUSH
41437: CALL_OW 251
41441: PUSH
41442: LD_VAR 0 3
41446: PUSH
41447: LD_VAR 0 4
41451: ARRAY
41452: PPUSH
41453: CALL_OW 254
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: PUSH
41464: EMPTY
41465: LIST
41466: ADD
41467: ST_TO_ADDR
41468: GO 41381
41470: POP
41471: POP
// result := list ;
41472: LD_ADDR_VAR 0 2
41476: PUSH
41477: LD_VAR 0 5
41481: ST_TO_ADDR
// end ;
41482: LD_VAR 0 2
41486: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41487: LD_INT 0
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
// if not factory then
41496: LD_VAR 0 1
41500: NOT
41501: IFFALSE 41505
// exit ;
41503: GO 42098
// if control = control_apeman then
41505: LD_VAR 0 4
41509: PUSH
41510: LD_INT 5
41512: EQUAL
41513: IFFALSE 41622
// begin tmp := UnitsInside ( factory ) ;
41515: LD_ADDR_VAR 0 8
41519: PUSH
41520: LD_VAR 0 1
41524: PPUSH
41525: CALL_OW 313
41529: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41530: LD_VAR 0 8
41534: PPUSH
41535: LD_INT 25
41537: PUSH
41538: LD_INT 12
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PPUSH
41545: CALL_OW 72
41549: NOT
41550: IFFALSE 41560
// control := control_manual ;
41552: LD_ADDR_VAR 0 4
41556: PUSH
41557: LD_INT 1
41559: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41560: LD_ADDR_VAR 0 8
41564: PUSH
41565: LD_VAR 0 1
41569: PPUSH
41570: CALL 41257 0 1
41574: ST_TO_ADDR
// if tmp then
41575: LD_VAR 0 8
41579: IFFALSE 41622
// begin for i in tmp do
41581: LD_ADDR_VAR 0 7
41585: PUSH
41586: LD_VAR 0 8
41590: PUSH
41591: FOR_IN
41592: IFFALSE 41620
// if i [ 1 ] = b_ext_radio then
41594: LD_VAR 0 7
41598: PUSH
41599: LD_INT 1
41601: ARRAY
41602: PUSH
41603: LD_INT 22
41605: EQUAL
41606: IFFALSE 41618
// begin control := control_remote ;
41608: LD_ADDR_VAR 0 4
41612: PUSH
41613: LD_INT 2
41615: ST_TO_ADDR
// break ;
41616: GO 41620
// end ;
41618: GO 41591
41620: POP
41621: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41622: LD_VAR 0 1
41626: PPUSH
41627: LD_VAR 0 2
41631: PPUSH
41632: LD_VAR 0 3
41636: PPUSH
41637: LD_VAR 0 4
41641: PPUSH
41642: LD_VAR 0 5
41646: PPUSH
41647: CALL_OW 448
41651: IFFALSE 41686
// begin result := [ chassis , engine , control , weapon ] ;
41653: LD_ADDR_VAR 0 6
41657: PUSH
41658: LD_VAR 0 2
41662: PUSH
41663: LD_VAR 0 3
41667: PUSH
41668: LD_VAR 0 4
41672: PUSH
41673: LD_VAR 0 5
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: ST_TO_ADDR
// exit ;
41684: GO 42098
// end ; _chassis := AvailableChassisList ( factory ) ;
41686: LD_ADDR_VAR 0 9
41690: PUSH
41691: LD_VAR 0 1
41695: PPUSH
41696: CALL_OW 475
41700: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41701: LD_ADDR_VAR 0 11
41705: PUSH
41706: LD_VAR 0 1
41710: PPUSH
41711: CALL_OW 476
41715: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41716: LD_ADDR_VAR 0 12
41720: PUSH
41721: LD_VAR 0 1
41725: PPUSH
41726: CALL_OW 477
41730: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41731: LD_ADDR_VAR 0 10
41735: PUSH
41736: LD_VAR 0 1
41740: PPUSH
41741: CALL_OW 478
41745: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41746: LD_VAR 0 9
41750: NOT
41751: PUSH
41752: LD_VAR 0 11
41756: NOT
41757: OR
41758: PUSH
41759: LD_VAR 0 12
41763: NOT
41764: OR
41765: PUSH
41766: LD_VAR 0 10
41770: NOT
41771: OR
41772: IFFALSE 41807
// begin result := [ chassis , engine , control , weapon ] ;
41774: LD_ADDR_VAR 0 6
41778: PUSH
41779: LD_VAR 0 2
41783: PUSH
41784: LD_VAR 0 3
41788: PUSH
41789: LD_VAR 0 4
41793: PUSH
41794: LD_VAR 0 5
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: ST_TO_ADDR
// exit ;
41805: GO 42098
// end ; if not chassis in _chassis then
41807: LD_VAR 0 2
41811: PUSH
41812: LD_VAR 0 9
41816: IN
41817: NOT
41818: IFFALSE 41844
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41820: LD_ADDR_VAR 0 2
41824: PUSH
41825: LD_VAR 0 9
41829: PUSH
41830: LD_INT 1
41832: PPUSH
41833: LD_VAR 0 9
41837: PPUSH
41838: CALL_OW 12
41842: ARRAY
41843: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41844: LD_VAR 0 2
41848: PPUSH
41849: LD_VAR 0 3
41853: PPUSH
41854: CALL 42103 0 2
41858: NOT
41859: IFFALSE 41918
// repeat engine := _engine [ 1 ] ;
41861: LD_ADDR_VAR 0 3
41865: PUSH
41866: LD_VAR 0 11
41870: PUSH
41871: LD_INT 1
41873: ARRAY
41874: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41875: LD_ADDR_VAR 0 11
41879: PUSH
41880: LD_VAR 0 11
41884: PPUSH
41885: LD_INT 1
41887: PPUSH
41888: CALL_OW 3
41892: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41893: LD_VAR 0 2
41897: PPUSH
41898: LD_VAR 0 3
41902: PPUSH
41903: CALL 42103 0 2
41907: PUSH
41908: LD_VAR 0 11
41912: PUSH
41913: EMPTY
41914: EQUAL
41915: OR
41916: IFFALSE 41861
// if not control in _control then
41918: LD_VAR 0 4
41922: PUSH
41923: LD_VAR 0 12
41927: IN
41928: NOT
41929: IFFALSE 41955
// control := _control [ rand ( 1 , _control ) ] ;
41931: LD_ADDR_VAR 0 4
41935: PUSH
41936: LD_VAR 0 12
41940: PUSH
41941: LD_INT 1
41943: PPUSH
41944: LD_VAR 0 12
41948: PPUSH
41949: CALL_OW 12
41953: ARRAY
41954: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41955: LD_VAR 0 2
41959: PPUSH
41960: LD_VAR 0 5
41964: PPUSH
41965: CALL 42323 0 2
41969: NOT
41970: IFFALSE 42029
// repeat weapon := _weapon [ 1 ] ;
41972: LD_ADDR_VAR 0 5
41976: PUSH
41977: LD_VAR 0 10
41981: PUSH
41982: LD_INT 1
41984: ARRAY
41985: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41986: LD_ADDR_VAR 0 10
41990: PUSH
41991: LD_VAR 0 10
41995: PPUSH
41996: LD_INT 1
41998: PPUSH
41999: CALL_OW 3
42003: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42004: LD_VAR 0 2
42008: PPUSH
42009: LD_VAR 0 5
42013: PPUSH
42014: CALL 42323 0 2
42018: PUSH
42019: LD_VAR 0 10
42023: PUSH
42024: EMPTY
42025: EQUAL
42026: OR
42027: IFFALSE 41972
// result := [ ] ;
42029: LD_ADDR_VAR 0 6
42033: PUSH
42034: EMPTY
42035: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42036: LD_VAR 0 1
42040: PPUSH
42041: LD_VAR 0 2
42045: PPUSH
42046: LD_VAR 0 3
42050: PPUSH
42051: LD_VAR 0 4
42055: PPUSH
42056: LD_VAR 0 5
42060: PPUSH
42061: CALL_OW 448
42065: IFFALSE 42098
// result := [ chassis , engine , control , weapon ] ;
42067: LD_ADDR_VAR 0 6
42071: PUSH
42072: LD_VAR 0 2
42076: PUSH
42077: LD_VAR 0 3
42081: PUSH
42082: LD_VAR 0 4
42086: PUSH
42087: LD_VAR 0 5
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: ST_TO_ADDR
// end ;
42098: LD_VAR 0 6
42102: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42103: LD_INT 0
42105: PPUSH
// if not chassis or not engine then
42106: LD_VAR 0 1
42110: NOT
42111: PUSH
42112: LD_VAR 0 2
42116: NOT
42117: OR
42118: IFFALSE 42122
// exit ;
42120: GO 42318
// case engine of engine_solar :
42122: LD_VAR 0 2
42126: PUSH
42127: LD_INT 2
42129: DOUBLE
42130: EQUAL
42131: IFTRUE 42135
42133: GO 42173
42135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_INT 11
42143: PUSH
42144: LD_INT 12
42146: PUSH
42147: LD_INT 13
42149: PUSH
42150: LD_INT 14
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: ST_TO_ADDR
42171: GO 42302
42173: LD_INT 1
42175: DOUBLE
42176: EQUAL
42177: IFTRUE 42181
42179: GO 42243
42181: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42182: LD_ADDR_VAR 0 3
42186: PUSH
42187: LD_INT 11
42189: PUSH
42190: LD_INT 12
42192: PUSH
42193: LD_INT 13
42195: PUSH
42196: LD_INT 14
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: LD_INT 3
42207: PUSH
42208: LD_INT 4
42210: PUSH
42211: LD_INT 5
42213: PUSH
42214: LD_INT 21
42216: PUSH
42217: LD_INT 23
42219: PUSH
42220: LD_INT 22
42222: PUSH
42223: LD_INT 24
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: ST_TO_ADDR
42241: GO 42302
42243: LD_INT 3
42245: DOUBLE
42246: EQUAL
42247: IFTRUE 42251
42249: GO 42301
42251: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42252: LD_ADDR_VAR 0 3
42256: PUSH
42257: LD_INT 13
42259: PUSH
42260: LD_INT 14
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: LD_INT 4
42271: PUSH
42272: LD_INT 5
42274: PUSH
42275: LD_INT 21
42277: PUSH
42278: LD_INT 22
42280: PUSH
42281: LD_INT 23
42283: PUSH
42284: LD_INT 24
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: ST_TO_ADDR
42299: GO 42302
42301: POP
// result := ( chassis in result ) ;
42302: LD_ADDR_VAR 0 3
42306: PUSH
42307: LD_VAR 0 1
42311: PUSH
42312: LD_VAR 0 3
42316: IN
42317: ST_TO_ADDR
// end ;
42318: LD_VAR 0 3
42322: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42323: LD_INT 0
42325: PPUSH
// if not chassis or not weapon then
42326: LD_VAR 0 1
42330: NOT
42331: PUSH
42332: LD_VAR 0 2
42336: NOT
42337: OR
42338: IFFALSE 42342
// exit ;
42340: GO 43402
// case weapon of us_machine_gun :
42342: LD_VAR 0 2
42346: PUSH
42347: LD_INT 2
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42355
42353: GO 42385
42355: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42356: LD_ADDR_VAR 0 3
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 3
42369: PUSH
42370: LD_INT 4
42372: PUSH
42373: LD_INT 5
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: ST_TO_ADDR
42383: GO 43386
42385: LD_INT 3
42387: DOUBLE
42388: EQUAL
42389: IFTRUE 42393
42391: GO 42423
42393: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42394: LD_ADDR_VAR 0 3
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: LD_INT 4
42410: PUSH
42411: LD_INT 5
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
42421: GO 43386
42423: LD_INT 11
42425: DOUBLE
42426: EQUAL
42427: IFTRUE 42431
42429: GO 42461
42431: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42432: LD_ADDR_VAR 0 3
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: LD_INT 4
42448: PUSH
42449: LD_INT 5
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: ST_TO_ADDR
42459: GO 43386
42461: LD_INT 4
42463: DOUBLE
42464: EQUAL
42465: IFTRUE 42469
42467: GO 42495
42469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42470: LD_ADDR_VAR 0 3
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: LD_INT 3
42480: PUSH
42481: LD_INT 4
42483: PUSH
42484: LD_INT 5
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: ST_TO_ADDR
42493: GO 43386
42495: LD_INT 5
42497: DOUBLE
42498: EQUAL
42499: IFTRUE 42503
42501: GO 42529
42503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42504: LD_ADDR_VAR 0 3
42508: PUSH
42509: LD_INT 2
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: LD_INT 4
42517: PUSH
42518: LD_INT 5
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: ST_TO_ADDR
42527: GO 43386
42529: LD_INT 9
42531: DOUBLE
42532: EQUAL
42533: IFTRUE 42537
42535: GO 42563
42537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42538: LD_ADDR_VAR 0 3
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 3
42548: PUSH
42549: LD_INT 4
42551: PUSH
42552: LD_INT 5
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: ST_TO_ADDR
42561: GO 43386
42563: LD_INT 7
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42571
42569: GO 42597
42571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42572: LD_ADDR_VAR 0 3
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: LD_INT 4
42585: PUSH
42586: LD_INT 5
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: ST_TO_ADDR
42595: GO 43386
42597: LD_INT 12
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42605
42603: GO 42631
42605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: LD_INT 4
42619: PUSH
42620: LD_INT 5
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: ST_TO_ADDR
42629: GO 43386
42631: LD_INT 13
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42639
42637: GO 42665
42639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42640: LD_ADDR_VAR 0 3
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: LD_INT 4
42653: PUSH
42654: LD_INT 5
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
42663: GO 43386
42665: LD_INT 14
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42673
42671: GO 42691
42673: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42674: LD_ADDR_VAR 0 3
42678: PUSH
42679: LD_INT 4
42681: PUSH
42682: LD_INT 5
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: ST_TO_ADDR
42689: GO 43386
42691: LD_INT 6
42693: DOUBLE
42694: EQUAL
42695: IFTRUE 42699
42697: GO 42717
42699: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42700: LD_ADDR_VAR 0 3
42704: PUSH
42705: LD_INT 4
42707: PUSH
42708: LD_INT 5
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: ST_TO_ADDR
42715: GO 43386
42717: LD_INT 10
42719: DOUBLE
42720: EQUAL
42721: IFTRUE 42725
42723: GO 42743
42725: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42726: LD_ADDR_VAR 0 3
42730: PUSH
42731: LD_INT 4
42733: PUSH
42734: LD_INT 5
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: ST_TO_ADDR
42741: GO 43386
42743: LD_INT 22
42745: DOUBLE
42746: EQUAL
42747: IFTRUE 42751
42749: GO 42777
42751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42752: LD_ADDR_VAR 0 3
42756: PUSH
42757: LD_INT 11
42759: PUSH
42760: LD_INT 12
42762: PUSH
42763: LD_INT 13
42765: PUSH
42766: LD_INT 14
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
42775: GO 43386
42777: LD_INT 23
42779: DOUBLE
42780: EQUAL
42781: IFTRUE 42785
42783: GO 42811
42785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42786: LD_ADDR_VAR 0 3
42790: PUSH
42791: LD_INT 11
42793: PUSH
42794: LD_INT 12
42796: PUSH
42797: LD_INT 13
42799: PUSH
42800: LD_INT 14
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
42809: GO 43386
42811: LD_INT 24
42813: DOUBLE
42814: EQUAL
42815: IFTRUE 42819
42817: GO 42845
42819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42820: LD_ADDR_VAR 0 3
42824: PUSH
42825: LD_INT 11
42827: PUSH
42828: LD_INT 12
42830: PUSH
42831: LD_INT 13
42833: PUSH
42834: LD_INT 14
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: ST_TO_ADDR
42843: GO 43386
42845: LD_INT 30
42847: DOUBLE
42848: EQUAL
42849: IFTRUE 42853
42851: GO 42879
42853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42854: LD_ADDR_VAR 0 3
42858: PUSH
42859: LD_INT 11
42861: PUSH
42862: LD_INT 12
42864: PUSH
42865: LD_INT 13
42867: PUSH
42868: LD_INT 14
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: ST_TO_ADDR
42877: GO 43386
42879: LD_INT 25
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42887
42885: GO 42905
42887: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_INT 13
42895: PUSH
42896: LD_INT 14
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: ST_TO_ADDR
42903: GO 43386
42905: LD_INT 27
42907: DOUBLE
42908: EQUAL
42909: IFTRUE 42913
42911: GO 42931
42913: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42914: LD_ADDR_VAR 0 3
42918: PUSH
42919: LD_INT 13
42921: PUSH
42922: LD_INT 14
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: ST_TO_ADDR
42929: GO 43386
42931: LD_INT 92
42933: DOUBLE
42934: EQUAL
42935: IFTRUE 42939
42937: GO 42965
42939: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42940: LD_ADDR_VAR 0 3
42944: PUSH
42945: LD_INT 11
42947: PUSH
42948: LD_INT 12
42950: PUSH
42951: LD_INT 13
42953: PUSH
42954: LD_INT 14
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
42963: GO 43386
42965: LD_INT 28
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 42973
42971: GO 42991
42973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42974: LD_ADDR_VAR 0 3
42978: PUSH
42979: LD_INT 13
42981: PUSH
42982: LD_INT 14
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: ST_TO_ADDR
42989: GO 43386
42991: LD_INT 29
42993: DOUBLE
42994: EQUAL
42995: IFTRUE 42999
42997: GO 43017
42999: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43000: LD_ADDR_VAR 0 3
43004: PUSH
43005: LD_INT 13
43007: PUSH
43008: LD_INT 14
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: ST_TO_ADDR
43015: GO 43386
43017: LD_INT 31
43019: DOUBLE
43020: EQUAL
43021: IFTRUE 43025
43023: GO 43043
43025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43026: LD_ADDR_VAR 0 3
43030: PUSH
43031: LD_INT 13
43033: PUSH
43034: LD_INT 14
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: ST_TO_ADDR
43041: GO 43386
43043: LD_INT 26
43045: DOUBLE
43046: EQUAL
43047: IFTRUE 43051
43049: GO 43069
43051: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43052: LD_ADDR_VAR 0 3
43056: PUSH
43057: LD_INT 13
43059: PUSH
43060: LD_INT 14
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: ST_TO_ADDR
43067: GO 43386
43069: LD_INT 42
43071: DOUBLE
43072: EQUAL
43073: IFTRUE 43077
43075: GO 43103
43077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43078: LD_ADDR_VAR 0 3
43082: PUSH
43083: LD_INT 21
43085: PUSH
43086: LD_INT 22
43088: PUSH
43089: LD_INT 23
43091: PUSH
43092: LD_INT 24
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: ST_TO_ADDR
43101: GO 43386
43103: LD_INT 43
43105: DOUBLE
43106: EQUAL
43107: IFTRUE 43111
43109: GO 43137
43111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43112: LD_ADDR_VAR 0 3
43116: PUSH
43117: LD_INT 21
43119: PUSH
43120: LD_INT 22
43122: PUSH
43123: LD_INT 23
43125: PUSH
43126: LD_INT 24
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
43135: GO 43386
43137: LD_INT 44
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43145
43143: GO 43171
43145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43146: LD_ADDR_VAR 0 3
43150: PUSH
43151: LD_INT 21
43153: PUSH
43154: LD_INT 22
43156: PUSH
43157: LD_INT 23
43159: PUSH
43160: LD_INT 24
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: ST_TO_ADDR
43169: GO 43386
43171: LD_INT 45
43173: DOUBLE
43174: EQUAL
43175: IFTRUE 43179
43177: GO 43205
43179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43180: LD_ADDR_VAR 0 3
43184: PUSH
43185: LD_INT 21
43187: PUSH
43188: LD_INT 22
43190: PUSH
43191: LD_INT 23
43193: PUSH
43194: LD_INT 24
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
43203: GO 43386
43205: LD_INT 49
43207: DOUBLE
43208: EQUAL
43209: IFTRUE 43213
43211: GO 43239
43213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43214: LD_ADDR_VAR 0 3
43218: PUSH
43219: LD_INT 21
43221: PUSH
43222: LD_INT 22
43224: PUSH
43225: LD_INT 23
43227: PUSH
43228: LD_INT 24
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
43237: GO 43386
43239: LD_INT 51
43241: DOUBLE
43242: EQUAL
43243: IFTRUE 43247
43245: GO 43273
43247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43248: LD_ADDR_VAR 0 3
43252: PUSH
43253: LD_INT 21
43255: PUSH
43256: LD_INT 22
43258: PUSH
43259: LD_INT 23
43261: PUSH
43262: LD_INT 24
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
43271: GO 43386
43273: LD_INT 52
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43281
43279: GO 43307
43281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43282: LD_ADDR_VAR 0 3
43286: PUSH
43287: LD_INT 21
43289: PUSH
43290: LD_INT 22
43292: PUSH
43293: LD_INT 23
43295: PUSH
43296: LD_INT 24
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
43305: GO 43386
43307: LD_INT 53
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43333
43315: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_INT 23
43323: PUSH
43324: LD_INT 24
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: ST_TO_ADDR
43331: GO 43386
43333: LD_INT 46
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43341
43339: GO 43359
43341: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43342: LD_ADDR_VAR 0 3
43346: PUSH
43347: LD_INT 23
43349: PUSH
43350: LD_INT 24
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: ST_TO_ADDR
43357: GO 43386
43359: LD_INT 47
43361: DOUBLE
43362: EQUAL
43363: IFTRUE 43367
43365: GO 43385
43367: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_INT 23
43375: PUSH
43376: LD_INT 24
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: ST_TO_ADDR
43383: GO 43386
43385: POP
// result := ( chassis in result ) ;
43386: LD_ADDR_VAR 0 3
43390: PUSH
43391: LD_VAR 0 1
43395: PUSH
43396: LD_VAR 0 3
43400: IN
43401: ST_TO_ADDR
// end ;
43402: LD_VAR 0 3
43406: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43407: LD_INT 0
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
// result := array ;
43416: LD_ADDR_VAR 0 5
43420: PUSH
43421: LD_VAR 0 1
43425: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43426: LD_VAR 0 1
43430: NOT
43431: PUSH
43432: LD_VAR 0 2
43436: NOT
43437: OR
43438: PUSH
43439: LD_VAR 0 3
43443: NOT
43444: OR
43445: PUSH
43446: LD_VAR 0 2
43450: PUSH
43451: LD_VAR 0 1
43455: GREATER
43456: OR
43457: PUSH
43458: LD_VAR 0 3
43462: PUSH
43463: LD_VAR 0 1
43467: GREATER
43468: OR
43469: IFFALSE 43473
// exit ;
43471: GO 43769
// if direction then
43473: LD_VAR 0 4
43477: IFFALSE 43541
// begin d := 1 ;
43479: LD_ADDR_VAR 0 9
43483: PUSH
43484: LD_INT 1
43486: ST_TO_ADDR
// if i_from > i_to then
43487: LD_VAR 0 2
43491: PUSH
43492: LD_VAR 0 3
43496: GREATER
43497: IFFALSE 43523
// length := ( array - i_from ) + i_to else
43499: LD_ADDR_VAR 0 11
43503: PUSH
43504: LD_VAR 0 1
43508: PUSH
43509: LD_VAR 0 2
43513: MINUS
43514: PUSH
43515: LD_VAR 0 3
43519: PLUS
43520: ST_TO_ADDR
43521: GO 43539
// length := i_to - i_from ;
43523: LD_ADDR_VAR 0 11
43527: PUSH
43528: LD_VAR 0 3
43532: PUSH
43533: LD_VAR 0 2
43537: MINUS
43538: ST_TO_ADDR
// end else
43539: GO 43602
// begin d := - 1 ;
43541: LD_ADDR_VAR 0 9
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: ST_TO_ADDR
// if i_from > i_to then
43550: LD_VAR 0 2
43554: PUSH
43555: LD_VAR 0 3
43559: GREATER
43560: IFFALSE 43580
// length := i_from - i_to else
43562: LD_ADDR_VAR 0 11
43566: PUSH
43567: LD_VAR 0 2
43571: PUSH
43572: LD_VAR 0 3
43576: MINUS
43577: ST_TO_ADDR
43578: GO 43602
// length := ( array - i_to ) + i_from ;
43580: LD_ADDR_VAR 0 11
43584: PUSH
43585: LD_VAR 0 1
43589: PUSH
43590: LD_VAR 0 3
43594: MINUS
43595: PUSH
43596: LD_VAR 0 2
43600: PLUS
43601: ST_TO_ADDR
// end ; if not length then
43602: LD_VAR 0 11
43606: NOT
43607: IFFALSE 43611
// exit ;
43609: GO 43769
// tmp := array ;
43611: LD_ADDR_VAR 0 10
43615: PUSH
43616: LD_VAR 0 1
43620: ST_TO_ADDR
// for i = 1 to length do
43621: LD_ADDR_VAR 0 6
43625: PUSH
43626: DOUBLE
43627: LD_INT 1
43629: DEC
43630: ST_TO_ADDR
43631: LD_VAR 0 11
43635: PUSH
43636: FOR_TO
43637: IFFALSE 43757
// begin for j = 1 to array do
43639: LD_ADDR_VAR 0 7
43643: PUSH
43644: DOUBLE
43645: LD_INT 1
43647: DEC
43648: ST_TO_ADDR
43649: LD_VAR 0 1
43653: PUSH
43654: FOR_TO
43655: IFFALSE 43743
// begin k := j + d ;
43657: LD_ADDR_VAR 0 8
43661: PUSH
43662: LD_VAR 0 7
43666: PUSH
43667: LD_VAR 0 9
43671: PLUS
43672: ST_TO_ADDR
// if k > array then
43673: LD_VAR 0 8
43677: PUSH
43678: LD_VAR 0 1
43682: GREATER
43683: IFFALSE 43693
// k := 1 ;
43685: LD_ADDR_VAR 0 8
43689: PUSH
43690: LD_INT 1
43692: ST_TO_ADDR
// if not k then
43693: LD_VAR 0 8
43697: NOT
43698: IFFALSE 43710
// k := array ;
43700: LD_ADDR_VAR 0 8
43704: PUSH
43705: LD_VAR 0 1
43709: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43710: LD_ADDR_VAR 0 10
43714: PUSH
43715: LD_VAR 0 10
43719: PPUSH
43720: LD_VAR 0 8
43724: PPUSH
43725: LD_VAR 0 1
43729: PUSH
43730: LD_VAR 0 7
43734: ARRAY
43735: PPUSH
43736: CALL_OW 1
43740: ST_TO_ADDR
// end ;
43741: GO 43654
43743: POP
43744: POP
// array := tmp ;
43745: LD_ADDR_VAR 0 1
43749: PUSH
43750: LD_VAR 0 10
43754: ST_TO_ADDR
// end ;
43755: GO 43636
43757: POP
43758: POP
// result := array ;
43759: LD_ADDR_VAR 0 5
43763: PUSH
43764: LD_VAR 0 1
43768: ST_TO_ADDR
// end ;
43769: LD_VAR 0 5
43773: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43774: LD_INT 0
43776: PPUSH
43777: PPUSH
// result := 0 ;
43778: LD_ADDR_VAR 0 3
43782: PUSH
43783: LD_INT 0
43785: ST_TO_ADDR
// if not array or not value in array then
43786: LD_VAR 0 1
43790: NOT
43791: PUSH
43792: LD_VAR 0 2
43796: PUSH
43797: LD_VAR 0 1
43801: IN
43802: NOT
43803: OR
43804: IFFALSE 43808
// exit ;
43806: GO 43862
// for i = 1 to array do
43808: LD_ADDR_VAR 0 4
43812: PUSH
43813: DOUBLE
43814: LD_INT 1
43816: DEC
43817: ST_TO_ADDR
43818: LD_VAR 0 1
43822: PUSH
43823: FOR_TO
43824: IFFALSE 43860
// if value = array [ i ] then
43826: LD_VAR 0 2
43830: PUSH
43831: LD_VAR 0 1
43835: PUSH
43836: LD_VAR 0 4
43840: ARRAY
43841: EQUAL
43842: IFFALSE 43858
// begin result := i ;
43844: LD_ADDR_VAR 0 3
43848: PUSH
43849: LD_VAR 0 4
43853: ST_TO_ADDR
// exit ;
43854: POP
43855: POP
43856: GO 43862
// end ;
43858: GO 43823
43860: POP
43861: POP
// end ;
43862: LD_VAR 0 3
43866: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43867: LD_INT 0
43869: PPUSH
// vc_chassis := chassis ;
43870: LD_ADDR_OWVAR 37
43874: PUSH
43875: LD_VAR 0 1
43879: ST_TO_ADDR
// vc_engine := engine ;
43880: LD_ADDR_OWVAR 39
43884: PUSH
43885: LD_VAR 0 2
43889: ST_TO_ADDR
// vc_control := control ;
43890: LD_ADDR_OWVAR 38
43894: PUSH
43895: LD_VAR 0 3
43899: ST_TO_ADDR
// vc_weapon := weapon ;
43900: LD_ADDR_OWVAR 40
43904: PUSH
43905: LD_VAR 0 4
43909: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43910: LD_ADDR_OWVAR 41
43914: PUSH
43915: LD_VAR 0 5
43919: ST_TO_ADDR
// end ;
43920: LD_VAR 0 6
43924: RET
// export function WantPlant ( unit ) ; var task ; begin
43925: LD_INT 0
43927: PPUSH
43928: PPUSH
// result := false ;
43929: LD_ADDR_VAR 0 2
43933: PUSH
43934: LD_INT 0
43936: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43937: LD_ADDR_VAR 0 3
43941: PUSH
43942: LD_VAR 0 1
43946: PPUSH
43947: CALL_OW 437
43951: ST_TO_ADDR
// if task then
43952: LD_VAR 0 3
43956: IFFALSE 43984
// if task [ 1 ] [ 1 ] = p then
43958: LD_VAR 0 3
43962: PUSH
43963: LD_INT 1
43965: ARRAY
43966: PUSH
43967: LD_INT 1
43969: ARRAY
43970: PUSH
43971: LD_STRING p
43973: EQUAL
43974: IFFALSE 43984
// result := true ;
43976: LD_ADDR_VAR 0 2
43980: PUSH
43981: LD_INT 1
43983: ST_TO_ADDR
// end ;
43984: LD_VAR 0 2
43988: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43989: LD_INT 0
43991: PPUSH
43992: PPUSH
43993: PPUSH
43994: PPUSH
// if pos < 1 then
43995: LD_VAR 0 2
43999: PUSH
44000: LD_INT 1
44002: LESS
44003: IFFALSE 44007
// exit ;
44005: GO 44310
// if pos = 1 then
44007: LD_VAR 0 2
44011: PUSH
44012: LD_INT 1
44014: EQUAL
44015: IFFALSE 44048
// result := Replace ( arr , pos [ 1 ] , value ) else
44017: LD_ADDR_VAR 0 4
44021: PUSH
44022: LD_VAR 0 1
44026: PPUSH
44027: LD_VAR 0 2
44031: PUSH
44032: LD_INT 1
44034: ARRAY
44035: PPUSH
44036: LD_VAR 0 3
44040: PPUSH
44041: CALL_OW 1
44045: ST_TO_ADDR
44046: GO 44310
// begin tmp := arr ;
44048: LD_ADDR_VAR 0 6
44052: PUSH
44053: LD_VAR 0 1
44057: ST_TO_ADDR
// s_arr := [ tmp ] ;
44058: LD_ADDR_VAR 0 7
44062: PUSH
44063: LD_VAR 0 6
44067: PUSH
44068: EMPTY
44069: LIST
44070: ST_TO_ADDR
// for i = 1 to pos - 1 do
44071: LD_ADDR_VAR 0 5
44075: PUSH
44076: DOUBLE
44077: LD_INT 1
44079: DEC
44080: ST_TO_ADDR
44081: LD_VAR 0 2
44085: PUSH
44086: LD_INT 1
44088: MINUS
44089: PUSH
44090: FOR_TO
44091: IFFALSE 44136
// begin tmp := tmp [ pos [ i ] ] ;
44093: LD_ADDR_VAR 0 6
44097: PUSH
44098: LD_VAR 0 6
44102: PUSH
44103: LD_VAR 0 2
44107: PUSH
44108: LD_VAR 0 5
44112: ARRAY
44113: ARRAY
44114: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44115: LD_ADDR_VAR 0 7
44119: PUSH
44120: LD_VAR 0 7
44124: PUSH
44125: LD_VAR 0 6
44129: PUSH
44130: EMPTY
44131: LIST
44132: ADD
44133: ST_TO_ADDR
// end ;
44134: GO 44090
44136: POP
44137: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44138: LD_ADDR_VAR 0 6
44142: PUSH
44143: LD_VAR 0 6
44147: PPUSH
44148: LD_VAR 0 2
44152: PUSH
44153: LD_VAR 0 2
44157: ARRAY
44158: PPUSH
44159: LD_VAR 0 3
44163: PPUSH
44164: CALL_OW 1
44168: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44169: LD_ADDR_VAR 0 7
44173: PUSH
44174: LD_VAR 0 7
44178: PPUSH
44179: LD_VAR 0 7
44183: PPUSH
44184: LD_VAR 0 6
44188: PPUSH
44189: CALL_OW 1
44193: ST_TO_ADDR
// for i = s_arr downto 2 do
44194: LD_ADDR_VAR 0 5
44198: PUSH
44199: DOUBLE
44200: LD_VAR 0 7
44204: INC
44205: ST_TO_ADDR
44206: LD_INT 2
44208: PUSH
44209: FOR_DOWNTO
44210: IFFALSE 44294
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44212: LD_ADDR_VAR 0 6
44216: PUSH
44217: LD_VAR 0 7
44221: PUSH
44222: LD_VAR 0 5
44226: PUSH
44227: LD_INT 1
44229: MINUS
44230: ARRAY
44231: PPUSH
44232: LD_VAR 0 2
44236: PUSH
44237: LD_VAR 0 5
44241: PUSH
44242: LD_INT 1
44244: MINUS
44245: ARRAY
44246: PPUSH
44247: LD_VAR 0 7
44251: PUSH
44252: LD_VAR 0 5
44256: ARRAY
44257: PPUSH
44258: CALL_OW 1
44262: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44263: LD_ADDR_VAR 0 7
44267: PUSH
44268: LD_VAR 0 7
44272: PPUSH
44273: LD_VAR 0 5
44277: PUSH
44278: LD_INT 1
44280: MINUS
44281: PPUSH
44282: LD_VAR 0 6
44286: PPUSH
44287: CALL_OW 1
44291: ST_TO_ADDR
// end ;
44292: GO 44209
44294: POP
44295: POP
// result := s_arr [ 1 ] ;
44296: LD_ADDR_VAR 0 4
44300: PUSH
44301: LD_VAR 0 7
44305: PUSH
44306: LD_INT 1
44308: ARRAY
44309: ST_TO_ADDR
// end ; end ;
44310: LD_VAR 0 4
44314: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44315: LD_INT 0
44317: PPUSH
44318: PPUSH
// if not list then
44319: LD_VAR 0 1
44323: NOT
44324: IFFALSE 44328
// exit ;
44326: GO 44419
// i := list [ pos1 ] ;
44328: LD_ADDR_VAR 0 5
44332: PUSH
44333: LD_VAR 0 1
44337: PUSH
44338: LD_VAR 0 2
44342: ARRAY
44343: ST_TO_ADDR
// if not i then
44344: LD_VAR 0 5
44348: NOT
44349: IFFALSE 44353
// exit ;
44351: GO 44419
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44353: LD_ADDR_VAR 0 1
44357: PUSH
44358: LD_VAR 0 1
44362: PPUSH
44363: LD_VAR 0 2
44367: PPUSH
44368: LD_VAR 0 1
44372: PUSH
44373: LD_VAR 0 3
44377: ARRAY
44378: PPUSH
44379: CALL_OW 1
44383: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44384: LD_ADDR_VAR 0 1
44388: PUSH
44389: LD_VAR 0 1
44393: PPUSH
44394: LD_VAR 0 3
44398: PPUSH
44399: LD_VAR 0 5
44403: PPUSH
44404: CALL_OW 1
44408: ST_TO_ADDR
// result := list ;
44409: LD_ADDR_VAR 0 4
44413: PUSH
44414: LD_VAR 0 1
44418: ST_TO_ADDR
// end ;
44419: LD_VAR 0 4
44423: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44424: LD_INT 0
44426: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44427: LD_ADDR_VAR 0 5
44431: PUSH
44432: LD_VAR 0 1
44436: PPUSH
44437: CALL_OW 250
44441: PPUSH
44442: LD_VAR 0 1
44446: PPUSH
44447: CALL_OW 251
44451: PPUSH
44452: LD_VAR 0 2
44456: PPUSH
44457: LD_VAR 0 3
44461: PPUSH
44462: LD_VAR 0 4
44466: PPUSH
44467: CALL 44477 0 5
44471: ST_TO_ADDR
// end ;
44472: LD_VAR 0 5
44476: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44477: LD_INT 0
44479: PPUSH
44480: PPUSH
44481: PPUSH
44482: PPUSH
// if not list then
44483: LD_VAR 0 3
44487: NOT
44488: IFFALSE 44492
// exit ;
44490: GO 44880
// result := [ ] ;
44492: LD_ADDR_VAR 0 6
44496: PUSH
44497: EMPTY
44498: ST_TO_ADDR
// for i in list do
44499: LD_ADDR_VAR 0 7
44503: PUSH
44504: LD_VAR 0 3
44508: PUSH
44509: FOR_IN
44510: IFFALSE 44712
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44512: LD_ADDR_VAR 0 9
44516: PUSH
44517: LD_VAR 0 7
44521: PPUSH
44522: LD_VAR 0 1
44526: PPUSH
44527: LD_VAR 0 2
44531: PPUSH
44532: CALL_OW 297
44536: ST_TO_ADDR
// if not result then
44537: LD_VAR 0 6
44541: NOT
44542: IFFALSE 44568
// result := [ [ i , tmp ] ] else
44544: LD_ADDR_VAR 0 6
44548: PUSH
44549: LD_VAR 0 7
44553: PUSH
44554: LD_VAR 0 9
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: EMPTY
44564: LIST
44565: ST_TO_ADDR
44566: GO 44710
// begin if result [ result ] [ 2 ] < tmp then
44568: LD_VAR 0 6
44572: PUSH
44573: LD_VAR 0 6
44577: ARRAY
44578: PUSH
44579: LD_INT 2
44581: ARRAY
44582: PUSH
44583: LD_VAR 0 9
44587: LESS
44588: IFFALSE 44630
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44590: LD_ADDR_VAR 0 6
44594: PUSH
44595: LD_VAR 0 6
44599: PPUSH
44600: LD_VAR 0 6
44604: PUSH
44605: LD_INT 1
44607: PLUS
44608: PPUSH
44609: LD_VAR 0 7
44613: PUSH
44614: LD_VAR 0 9
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PPUSH
44623: CALL_OW 2
44627: ST_TO_ADDR
44628: GO 44710
// for j = 1 to result do
44630: LD_ADDR_VAR 0 8
44634: PUSH
44635: DOUBLE
44636: LD_INT 1
44638: DEC
44639: ST_TO_ADDR
44640: LD_VAR 0 6
44644: PUSH
44645: FOR_TO
44646: IFFALSE 44708
// begin if tmp < result [ j ] [ 2 ] then
44648: LD_VAR 0 9
44652: PUSH
44653: LD_VAR 0 6
44657: PUSH
44658: LD_VAR 0 8
44662: ARRAY
44663: PUSH
44664: LD_INT 2
44666: ARRAY
44667: LESS
44668: IFFALSE 44706
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44670: LD_ADDR_VAR 0 6
44674: PUSH
44675: LD_VAR 0 6
44679: PPUSH
44680: LD_VAR 0 8
44684: PPUSH
44685: LD_VAR 0 7
44689: PUSH
44690: LD_VAR 0 9
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PPUSH
44699: CALL_OW 2
44703: ST_TO_ADDR
// break ;
44704: GO 44708
// end ; end ;
44706: GO 44645
44708: POP
44709: POP
// end ; end ;
44710: GO 44509
44712: POP
44713: POP
// if result and not asc then
44714: LD_VAR 0 6
44718: PUSH
44719: LD_VAR 0 4
44723: NOT
44724: AND
44725: IFFALSE 44800
// begin tmp := result ;
44727: LD_ADDR_VAR 0 9
44731: PUSH
44732: LD_VAR 0 6
44736: ST_TO_ADDR
// for i = tmp downto 1 do
44737: LD_ADDR_VAR 0 7
44741: PUSH
44742: DOUBLE
44743: LD_VAR 0 9
44747: INC
44748: ST_TO_ADDR
44749: LD_INT 1
44751: PUSH
44752: FOR_DOWNTO
44753: IFFALSE 44798
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44755: LD_ADDR_VAR 0 6
44759: PUSH
44760: LD_VAR 0 6
44764: PPUSH
44765: LD_VAR 0 9
44769: PUSH
44770: LD_VAR 0 7
44774: MINUS
44775: PUSH
44776: LD_INT 1
44778: PLUS
44779: PPUSH
44780: LD_VAR 0 9
44784: PUSH
44785: LD_VAR 0 7
44789: ARRAY
44790: PPUSH
44791: CALL_OW 1
44795: ST_TO_ADDR
44796: GO 44752
44798: POP
44799: POP
// end ; tmp := [ ] ;
44800: LD_ADDR_VAR 0 9
44804: PUSH
44805: EMPTY
44806: ST_TO_ADDR
// if mode then
44807: LD_VAR 0 5
44811: IFFALSE 44880
// begin for i = 1 to result do
44813: LD_ADDR_VAR 0 7
44817: PUSH
44818: DOUBLE
44819: LD_INT 1
44821: DEC
44822: ST_TO_ADDR
44823: LD_VAR 0 6
44827: PUSH
44828: FOR_TO
44829: IFFALSE 44868
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44831: LD_ADDR_VAR 0 9
44835: PUSH
44836: LD_VAR 0 9
44840: PPUSH
44841: LD_VAR 0 7
44845: PPUSH
44846: LD_VAR 0 6
44850: PUSH
44851: LD_VAR 0 7
44855: ARRAY
44856: PUSH
44857: LD_INT 1
44859: ARRAY
44860: PPUSH
44861: CALL_OW 1
44865: ST_TO_ADDR
44866: GO 44828
44868: POP
44869: POP
// result := tmp ;
44870: LD_ADDR_VAR 0 6
44874: PUSH
44875: LD_VAR 0 9
44879: ST_TO_ADDR
// end ; end ;
44880: LD_VAR 0 6
44884: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44885: LD_INT 0
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
44891: PPUSH
44892: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44893: LD_ADDR_VAR 0 5
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: ST_TO_ADDR
// if not x or not y then
44915: LD_VAR 0 2
44919: NOT
44920: PUSH
44921: LD_VAR 0 3
44925: NOT
44926: OR
44927: IFFALSE 44931
// exit ;
44929: GO 46581
// if not range then
44931: LD_VAR 0 4
44935: NOT
44936: IFFALSE 44946
// range := 10 ;
44938: LD_ADDR_VAR 0 4
44942: PUSH
44943: LD_INT 10
44945: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44946: LD_ADDR_VAR 0 8
44950: PUSH
44951: LD_INT 81
44953: PUSH
44954: LD_VAR 0 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 92
44965: PUSH
44966: LD_VAR 0 2
44970: PUSH
44971: LD_VAR 0 3
44975: PUSH
44976: LD_VAR 0 4
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 3
44989: PUSH
44990: LD_INT 21
44992: PUSH
44993: LD_INT 3
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: PPUSH
45009: CALL_OW 69
45013: ST_TO_ADDR
// if not tmp then
45014: LD_VAR 0 8
45018: NOT
45019: IFFALSE 45023
// exit ;
45021: GO 46581
// for i in tmp do
45023: LD_ADDR_VAR 0 6
45027: PUSH
45028: LD_VAR 0 8
45032: PUSH
45033: FOR_IN
45034: IFFALSE 46556
// begin points := [ 0 , 0 , 0 ] ;
45036: LD_ADDR_VAR 0 9
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// bpoints := 1 ;
45055: LD_ADDR_VAR 0 10
45059: PUSH
45060: LD_INT 1
45062: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45063: LD_VAR 0 6
45067: PPUSH
45068: CALL_OW 247
45072: PUSH
45073: LD_INT 1
45075: DOUBLE
45076: EQUAL
45077: IFTRUE 45081
45079: GO 45659
45081: POP
// begin if GetClass ( i ) = 1 then
45082: LD_VAR 0 6
45086: PPUSH
45087: CALL_OW 257
45091: PUSH
45092: LD_INT 1
45094: EQUAL
45095: IFFALSE 45116
// points := [ 10 , 5 , 3 ] ;
45097: LD_ADDR_VAR 0 9
45101: PUSH
45102: LD_INT 10
45104: PUSH
45105: LD_INT 5
45107: PUSH
45108: LD_INT 3
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45116: LD_VAR 0 6
45120: PPUSH
45121: CALL_OW 257
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 3
45131: PUSH
45132: LD_INT 4
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: IN
45140: IFFALSE 45161
// points := [ 3 , 2 , 1 ] ;
45142: LD_ADDR_VAR 0 9
45146: PUSH
45147: LD_INT 3
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45161: LD_VAR 0 6
45165: PPUSH
45166: CALL_OW 257
45170: PUSH
45171: LD_INT 5
45173: EQUAL
45174: IFFALSE 45195
// points := [ 130 , 5 , 2 ] ;
45176: LD_ADDR_VAR 0 9
45180: PUSH
45181: LD_INT 130
45183: PUSH
45184: LD_INT 5
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45195: LD_VAR 0 6
45199: PPUSH
45200: CALL_OW 257
45204: PUSH
45205: LD_INT 8
45207: EQUAL
45208: IFFALSE 45229
// points := [ 35 , 35 , 30 ] ;
45210: LD_ADDR_VAR 0 9
45214: PUSH
45215: LD_INT 35
45217: PUSH
45218: LD_INT 35
45220: PUSH
45221: LD_INT 30
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45229: LD_VAR 0 6
45233: PPUSH
45234: CALL_OW 257
45238: PUSH
45239: LD_INT 9
45241: EQUAL
45242: IFFALSE 45263
// points := [ 20 , 55 , 40 ] ;
45244: LD_ADDR_VAR 0 9
45248: PUSH
45249: LD_INT 20
45251: PUSH
45252: LD_INT 55
45254: PUSH
45255: LD_INT 40
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45263: LD_VAR 0 6
45267: PPUSH
45268: CALL_OW 257
45272: PUSH
45273: LD_INT 12
45275: PUSH
45276: LD_INT 16
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: IN
45283: IFFALSE 45304
// points := [ 5 , 3 , 2 ] ;
45285: LD_ADDR_VAR 0 9
45289: PUSH
45290: LD_INT 5
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45304: LD_VAR 0 6
45308: PPUSH
45309: CALL_OW 257
45313: PUSH
45314: LD_INT 17
45316: EQUAL
45317: IFFALSE 45338
// points := [ 100 , 50 , 75 ] ;
45319: LD_ADDR_VAR 0 9
45323: PUSH
45324: LD_INT 100
45326: PUSH
45327: LD_INT 50
45329: PUSH
45330: LD_INT 75
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: LIST
45337: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45338: LD_VAR 0 6
45342: PPUSH
45343: CALL_OW 257
45347: PUSH
45348: LD_INT 15
45350: EQUAL
45351: IFFALSE 45372
// points := [ 10 , 5 , 3 ] ;
45353: LD_ADDR_VAR 0 9
45357: PUSH
45358: LD_INT 10
45360: PUSH
45361: LD_INT 5
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: LIST
45371: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45372: LD_VAR 0 6
45376: PPUSH
45377: CALL_OW 257
45381: PUSH
45382: LD_INT 14
45384: EQUAL
45385: IFFALSE 45406
// points := [ 10 , 0 , 0 ] ;
45387: LD_ADDR_VAR 0 9
45391: PUSH
45392: LD_INT 10
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45406: LD_VAR 0 6
45410: PPUSH
45411: CALL_OW 257
45415: PUSH
45416: LD_INT 11
45418: EQUAL
45419: IFFALSE 45440
// points := [ 30 , 10 , 5 ] ;
45421: LD_ADDR_VAR 0 9
45425: PUSH
45426: LD_INT 30
45428: PUSH
45429: LD_INT 10
45431: PUSH
45432: LD_INT 5
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45440: LD_VAR 0 1
45444: PPUSH
45445: LD_INT 5
45447: PPUSH
45448: CALL_OW 321
45452: PUSH
45453: LD_INT 2
45455: EQUAL
45456: IFFALSE 45473
// bpoints := bpoints * 1.8 ;
45458: LD_ADDR_VAR 0 10
45462: PUSH
45463: LD_VAR 0 10
45467: PUSH
45468: LD_REAL  1.80000000000000E+0000
45471: MUL
45472: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45473: LD_VAR 0 6
45477: PPUSH
45478: CALL_OW 257
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: LD_INT 3
45491: PUSH
45492: LD_INT 4
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: IN
45501: PUSH
45502: LD_VAR 0 1
45506: PPUSH
45507: LD_INT 51
45509: PPUSH
45510: CALL_OW 321
45514: PUSH
45515: LD_INT 2
45517: EQUAL
45518: AND
45519: IFFALSE 45536
// bpoints := bpoints * 1.2 ;
45521: LD_ADDR_VAR 0 10
45525: PUSH
45526: LD_VAR 0 10
45530: PUSH
45531: LD_REAL  1.20000000000000E+0000
45534: MUL
45535: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45536: LD_VAR 0 6
45540: PPUSH
45541: CALL_OW 257
45545: PUSH
45546: LD_INT 5
45548: PUSH
45549: LD_INT 7
45551: PUSH
45552: LD_INT 9
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: IN
45560: PUSH
45561: LD_VAR 0 1
45565: PPUSH
45566: LD_INT 52
45568: PPUSH
45569: CALL_OW 321
45573: PUSH
45574: LD_INT 2
45576: EQUAL
45577: AND
45578: IFFALSE 45595
// bpoints := bpoints * 1.5 ;
45580: LD_ADDR_VAR 0 10
45584: PUSH
45585: LD_VAR 0 10
45589: PUSH
45590: LD_REAL  1.50000000000000E+0000
45593: MUL
45594: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45595: LD_VAR 0 1
45599: PPUSH
45600: LD_INT 66
45602: PPUSH
45603: CALL_OW 321
45607: PUSH
45608: LD_INT 2
45610: EQUAL
45611: IFFALSE 45628
// bpoints := bpoints * 1.1 ;
45613: LD_ADDR_VAR 0 10
45617: PUSH
45618: LD_VAR 0 10
45622: PUSH
45623: LD_REAL  1.10000000000000E+0000
45626: MUL
45627: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45628: LD_ADDR_VAR 0 10
45632: PUSH
45633: LD_VAR 0 10
45637: PUSH
45638: LD_VAR 0 6
45642: PPUSH
45643: LD_INT 1
45645: PPUSH
45646: CALL_OW 259
45650: PUSH
45651: LD_REAL  1.15000000000000E+0000
45654: MUL
45655: MUL
45656: ST_TO_ADDR
// end ; unit_vehicle :
45657: GO 46485
45659: LD_INT 2
45661: DOUBLE
45662: EQUAL
45663: IFTRUE 45667
45665: GO 46473
45667: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45668: LD_VAR 0 6
45672: PPUSH
45673: CALL_OW 264
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 42
45683: PUSH
45684: LD_INT 24
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: IN
45692: IFFALSE 45713
// points := [ 25 , 5 , 3 ] ;
45694: LD_ADDR_VAR 0 9
45698: PUSH
45699: LD_INT 25
45701: PUSH
45702: LD_INT 5
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45713: LD_VAR 0 6
45717: PPUSH
45718: CALL_OW 264
45722: PUSH
45723: LD_INT 4
45725: PUSH
45726: LD_INT 43
45728: PUSH
45729: LD_INT 25
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: IN
45737: IFFALSE 45758
// points := [ 40 , 15 , 5 ] ;
45739: LD_ADDR_VAR 0 9
45743: PUSH
45744: LD_INT 40
45746: PUSH
45747: LD_INT 15
45749: PUSH
45750: LD_INT 5
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: LIST
45757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45758: LD_VAR 0 6
45762: PPUSH
45763: CALL_OW 264
45767: PUSH
45768: LD_INT 3
45770: PUSH
45771: LD_INT 23
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: IN
45778: IFFALSE 45799
// points := [ 7 , 25 , 8 ] ;
45780: LD_ADDR_VAR 0 9
45784: PUSH
45785: LD_INT 7
45787: PUSH
45788: LD_INT 25
45790: PUSH
45791: LD_INT 8
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45799: LD_VAR 0 6
45803: PPUSH
45804: CALL_OW 264
45808: PUSH
45809: LD_INT 5
45811: PUSH
45812: LD_INT 27
45814: PUSH
45815: LD_INT 44
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: LIST
45822: IN
45823: IFFALSE 45844
// points := [ 14 , 50 , 16 ] ;
45825: LD_ADDR_VAR 0 9
45829: PUSH
45830: LD_INT 14
45832: PUSH
45833: LD_INT 50
45835: PUSH
45836: LD_INT 16
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45844: LD_VAR 0 6
45848: PPUSH
45849: CALL_OW 264
45853: PUSH
45854: LD_INT 6
45856: PUSH
45857: LD_INT 46
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: IN
45864: IFFALSE 45885
// points := [ 32 , 120 , 70 ] ;
45866: LD_ADDR_VAR 0 9
45870: PUSH
45871: LD_INT 32
45873: PUSH
45874: LD_INT 120
45876: PUSH
45877: LD_INT 70
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45885: LD_VAR 0 6
45889: PPUSH
45890: CALL_OW 264
45894: PUSH
45895: LD_INT 7
45897: PUSH
45898: LD_INT 28
45900: PUSH
45901: LD_INT 45
45903: PUSH
45904: LD_INT 92
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: IN
45913: IFFALSE 45934
// points := [ 35 , 20 , 45 ] ;
45915: LD_ADDR_VAR 0 9
45919: PUSH
45920: LD_INT 35
45922: PUSH
45923: LD_INT 20
45925: PUSH
45926: LD_INT 45
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45934: LD_VAR 0 6
45938: PPUSH
45939: CALL_OW 264
45943: PUSH
45944: LD_INT 47
45946: PUSH
45947: EMPTY
45948: LIST
45949: IN
45950: IFFALSE 45971
// points := [ 67 , 45 , 75 ] ;
45952: LD_ADDR_VAR 0 9
45956: PUSH
45957: LD_INT 67
45959: PUSH
45960: LD_INT 45
45962: PUSH
45963: LD_INT 75
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: LIST
45970: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45971: LD_VAR 0 6
45975: PPUSH
45976: CALL_OW 264
45980: PUSH
45981: LD_INT 26
45983: PUSH
45984: EMPTY
45985: LIST
45986: IN
45987: IFFALSE 46008
// points := [ 120 , 30 , 80 ] ;
45989: LD_ADDR_VAR 0 9
45993: PUSH
45994: LD_INT 120
45996: PUSH
45997: LD_INT 30
45999: PUSH
46000: LD_INT 80
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: LIST
46007: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46008: LD_VAR 0 6
46012: PPUSH
46013: CALL_OW 264
46017: PUSH
46018: LD_INT 22
46020: PUSH
46021: EMPTY
46022: LIST
46023: IN
46024: IFFALSE 46045
// points := [ 40 , 1 , 1 ] ;
46026: LD_ADDR_VAR 0 9
46030: PUSH
46031: LD_INT 40
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46045: LD_VAR 0 6
46049: PPUSH
46050: CALL_OW 264
46054: PUSH
46055: LD_INT 29
46057: PUSH
46058: EMPTY
46059: LIST
46060: IN
46061: IFFALSE 46082
// points := [ 70 , 200 , 400 ] ;
46063: LD_ADDR_VAR 0 9
46067: PUSH
46068: LD_INT 70
46070: PUSH
46071: LD_INT 200
46073: PUSH
46074: LD_INT 400
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46082: LD_VAR 0 6
46086: PPUSH
46087: CALL_OW 264
46091: PUSH
46092: LD_INT 14
46094: PUSH
46095: LD_INT 53
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: IN
46102: IFFALSE 46123
// points := [ 40 , 10 , 20 ] ;
46104: LD_ADDR_VAR 0 9
46108: PUSH
46109: LD_INT 40
46111: PUSH
46112: LD_INT 10
46114: PUSH
46115: LD_INT 20
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: LIST
46122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46123: LD_VAR 0 6
46127: PPUSH
46128: CALL_OW 264
46132: PUSH
46133: LD_INT 9
46135: PUSH
46136: EMPTY
46137: LIST
46138: IN
46139: IFFALSE 46160
// points := [ 5 , 70 , 20 ] ;
46141: LD_ADDR_VAR 0 9
46145: PUSH
46146: LD_INT 5
46148: PUSH
46149: LD_INT 70
46151: PUSH
46152: LD_INT 20
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46160: LD_VAR 0 6
46164: PPUSH
46165: CALL_OW 264
46169: PUSH
46170: LD_INT 10
46172: PUSH
46173: EMPTY
46174: LIST
46175: IN
46176: IFFALSE 46197
// points := [ 35 , 110 , 70 ] ;
46178: LD_ADDR_VAR 0 9
46182: PUSH
46183: LD_INT 35
46185: PUSH
46186: LD_INT 110
46188: PUSH
46189: LD_INT 70
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46197: LD_VAR 0 6
46201: PPUSH
46202: CALL_OW 265
46206: PUSH
46207: LD_INT 25
46209: EQUAL
46210: IFFALSE 46231
// points := [ 80 , 65 , 100 ] ;
46212: LD_ADDR_VAR 0 9
46216: PUSH
46217: LD_INT 80
46219: PUSH
46220: LD_INT 65
46222: PUSH
46223: LD_INT 100
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: LIST
46230: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46231: LD_VAR 0 6
46235: PPUSH
46236: CALL_OW 263
46240: PUSH
46241: LD_INT 1
46243: EQUAL
46244: IFFALSE 46279
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46246: LD_ADDR_VAR 0 10
46250: PUSH
46251: LD_VAR 0 10
46255: PUSH
46256: LD_VAR 0 6
46260: PPUSH
46261: CALL_OW 311
46265: PPUSH
46266: LD_INT 3
46268: PPUSH
46269: CALL_OW 259
46273: PUSH
46274: LD_INT 4
46276: MUL
46277: MUL
46278: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46279: LD_VAR 0 6
46283: PPUSH
46284: CALL_OW 263
46288: PUSH
46289: LD_INT 2
46291: EQUAL
46292: IFFALSE 46343
// begin j := IsControledBy ( i ) ;
46294: LD_ADDR_VAR 0 7
46298: PUSH
46299: LD_VAR 0 6
46303: PPUSH
46304: CALL_OW 312
46308: ST_TO_ADDR
// if j then
46309: LD_VAR 0 7
46313: IFFALSE 46343
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46315: LD_ADDR_VAR 0 10
46319: PUSH
46320: LD_VAR 0 10
46324: PUSH
46325: LD_VAR 0 7
46329: PPUSH
46330: LD_INT 3
46332: PPUSH
46333: CALL_OW 259
46337: PUSH
46338: LD_INT 3
46340: MUL
46341: MUL
46342: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46343: LD_VAR 0 6
46347: PPUSH
46348: CALL_OW 264
46352: PUSH
46353: LD_INT 5
46355: PUSH
46356: LD_INT 6
46358: PUSH
46359: LD_INT 46
46361: PUSH
46362: LD_INT 44
46364: PUSH
46365: LD_INT 47
46367: PUSH
46368: LD_INT 45
46370: PUSH
46371: LD_INT 28
46373: PUSH
46374: LD_INT 7
46376: PUSH
46377: LD_INT 27
46379: PUSH
46380: LD_INT 29
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: IN
46395: PUSH
46396: LD_VAR 0 1
46400: PPUSH
46401: LD_INT 52
46403: PPUSH
46404: CALL_OW 321
46408: PUSH
46409: LD_INT 2
46411: EQUAL
46412: AND
46413: IFFALSE 46430
// bpoints := bpoints * 1.2 ;
46415: LD_ADDR_VAR 0 10
46419: PUSH
46420: LD_VAR 0 10
46424: PUSH
46425: LD_REAL  1.20000000000000E+0000
46428: MUL
46429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46430: LD_VAR 0 6
46434: PPUSH
46435: CALL_OW 264
46439: PUSH
46440: LD_INT 6
46442: PUSH
46443: LD_INT 46
46445: PUSH
46446: LD_INT 47
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: IN
46454: IFFALSE 46471
// bpoints := bpoints * 1.2 ;
46456: LD_ADDR_VAR 0 10
46460: PUSH
46461: LD_VAR 0 10
46465: PUSH
46466: LD_REAL  1.20000000000000E+0000
46469: MUL
46470: ST_TO_ADDR
// end ; unit_building :
46471: GO 46485
46473: LD_INT 3
46475: DOUBLE
46476: EQUAL
46477: IFTRUE 46481
46479: GO 46484
46481: POP
// ; end ;
46482: GO 46485
46484: POP
// for j = 1 to 3 do
46485: LD_ADDR_VAR 0 7
46489: PUSH
46490: DOUBLE
46491: LD_INT 1
46493: DEC
46494: ST_TO_ADDR
46495: LD_INT 3
46497: PUSH
46498: FOR_TO
46499: IFFALSE 46552
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46501: LD_ADDR_VAR 0 5
46505: PUSH
46506: LD_VAR 0 5
46510: PPUSH
46511: LD_VAR 0 7
46515: PPUSH
46516: LD_VAR 0 5
46520: PUSH
46521: LD_VAR 0 7
46525: ARRAY
46526: PUSH
46527: LD_VAR 0 9
46531: PUSH
46532: LD_VAR 0 7
46536: ARRAY
46537: PUSH
46538: LD_VAR 0 10
46542: MUL
46543: PLUS
46544: PPUSH
46545: CALL_OW 1
46549: ST_TO_ADDR
46550: GO 46498
46552: POP
46553: POP
// end ;
46554: GO 45033
46556: POP
46557: POP
// result := Replace ( result , 4 , tmp ) ;
46558: LD_ADDR_VAR 0 5
46562: PUSH
46563: LD_VAR 0 5
46567: PPUSH
46568: LD_INT 4
46570: PPUSH
46571: LD_VAR 0 8
46575: PPUSH
46576: CALL_OW 1
46580: ST_TO_ADDR
// end ;
46581: LD_VAR 0 5
46585: RET
// export function DangerAtRange ( unit , range ) ; begin
46586: LD_INT 0
46588: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46589: LD_ADDR_VAR 0 3
46593: PUSH
46594: LD_VAR 0 1
46598: PPUSH
46599: CALL_OW 255
46603: PPUSH
46604: LD_VAR 0 1
46608: PPUSH
46609: CALL_OW 250
46613: PPUSH
46614: LD_VAR 0 1
46618: PPUSH
46619: CALL_OW 251
46623: PPUSH
46624: LD_VAR 0 2
46628: PPUSH
46629: CALL 44885 0 4
46633: ST_TO_ADDR
// end ;
46634: LD_VAR 0 3
46638: RET
// export function DangerInArea ( side , area ) ; begin
46639: LD_INT 0
46641: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46642: LD_ADDR_VAR 0 3
46646: PUSH
46647: LD_VAR 0 2
46651: PPUSH
46652: LD_INT 81
46654: PUSH
46655: LD_VAR 0 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PPUSH
46664: CALL_OW 70
46668: ST_TO_ADDR
// end ;
46669: LD_VAR 0 3
46673: RET
// export function IsExtension ( b ) ; begin
46674: LD_INT 0
46676: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46677: LD_ADDR_VAR 0 2
46681: PUSH
46682: LD_VAR 0 1
46686: PUSH
46687: LD_INT 23
46689: PUSH
46690: LD_INT 20
46692: PUSH
46693: LD_INT 22
46695: PUSH
46696: LD_INT 17
46698: PUSH
46699: LD_INT 24
46701: PUSH
46702: LD_INT 21
46704: PUSH
46705: LD_INT 19
46707: PUSH
46708: LD_INT 16
46710: PUSH
46711: LD_INT 25
46713: PUSH
46714: LD_INT 18
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: IN
46729: ST_TO_ADDR
// end ;
46730: LD_VAR 0 2
46734: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46735: LD_INT 0
46737: PPUSH
46738: PPUSH
46739: PPUSH
// result := [ ] ;
46740: LD_ADDR_VAR 0 4
46744: PUSH
46745: EMPTY
46746: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46747: LD_ADDR_VAR 0 5
46751: PUSH
46752: LD_VAR 0 2
46756: PPUSH
46757: LD_INT 21
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PPUSH
46767: CALL_OW 70
46771: ST_TO_ADDR
// if not tmp then
46772: LD_VAR 0 5
46776: NOT
46777: IFFALSE 46781
// exit ;
46779: GO 46845
// if checkLink then
46781: LD_VAR 0 3
46785: IFFALSE 46835
// begin for i in tmp do
46787: LD_ADDR_VAR 0 6
46791: PUSH
46792: LD_VAR 0 5
46796: PUSH
46797: FOR_IN
46798: IFFALSE 46833
// if GetBase ( i ) <> base then
46800: LD_VAR 0 6
46804: PPUSH
46805: CALL_OW 274
46809: PUSH
46810: LD_VAR 0 1
46814: NONEQUAL
46815: IFFALSE 46831
// ComLinkToBase ( base , i ) ;
46817: LD_VAR 0 1
46821: PPUSH
46822: LD_VAR 0 6
46826: PPUSH
46827: CALL_OW 169
46831: GO 46797
46833: POP
46834: POP
// end ; result := tmp ;
46835: LD_ADDR_VAR 0 4
46839: PUSH
46840: LD_VAR 0 5
46844: ST_TO_ADDR
// end ;
46845: LD_VAR 0 4
46849: RET
// export function ComComplete ( units , b ) ; var i ; begin
46850: LD_INT 0
46852: PPUSH
46853: PPUSH
// if not units then
46854: LD_VAR 0 1
46858: NOT
46859: IFFALSE 46863
// exit ;
46861: GO 46953
// for i in units do
46863: LD_ADDR_VAR 0 4
46867: PUSH
46868: LD_VAR 0 1
46872: PUSH
46873: FOR_IN
46874: IFFALSE 46951
// if BuildingStatus ( b ) = bs_build then
46876: LD_VAR 0 2
46880: PPUSH
46881: CALL_OW 461
46885: PUSH
46886: LD_INT 1
46888: EQUAL
46889: IFFALSE 46949
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46891: LD_VAR 0 4
46895: PPUSH
46896: LD_STRING h
46898: PUSH
46899: LD_VAR 0 2
46903: PPUSH
46904: CALL_OW 250
46908: PUSH
46909: LD_VAR 0 2
46913: PPUSH
46914: CALL_OW 251
46918: PUSH
46919: LD_VAR 0 2
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: PUSH
46942: EMPTY
46943: LIST
46944: PPUSH
46945: CALL_OW 446
46949: GO 46873
46951: POP
46952: POP
// end ;
46953: LD_VAR 0 3
46957: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46958: LD_INT 0
46960: PPUSH
46961: PPUSH
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46966: LD_VAR 0 1
46970: NOT
46971: PUSH
46972: LD_VAR 0 1
46976: PPUSH
46977: CALL_OW 263
46981: PUSH
46982: LD_INT 2
46984: NONEQUAL
46985: OR
46986: IFFALSE 46990
// exit ;
46988: GO 47306
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46990: LD_ADDR_VAR 0 6
46994: PUSH
46995: LD_INT 22
46997: PUSH
46998: LD_VAR 0 1
47002: PPUSH
47003: CALL_OW 255
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 30
47017: PUSH
47018: LD_INT 36
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 34
47027: PUSH
47028: LD_INT 31
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PPUSH
47044: CALL_OW 69
47048: ST_TO_ADDR
// if not tmp then
47049: LD_VAR 0 6
47053: NOT
47054: IFFALSE 47058
// exit ;
47056: GO 47306
// result := [ ] ;
47058: LD_ADDR_VAR 0 2
47062: PUSH
47063: EMPTY
47064: ST_TO_ADDR
// for i in tmp do
47065: LD_ADDR_VAR 0 3
47069: PUSH
47070: LD_VAR 0 6
47074: PUSH
47075: FOR_IN
47076: IFFALSE 47147
// begin t := UnitsInside ( i ) ;
47078: LD_ADDR_VAR 0 4
47082: PUSH
47083: LD_VAR 0 3
47087: PPUSH
47088: CALL_OW 313
47092: ST_TO_ADDR
// if t then
47093: LD_VAR 0 4
47097: IFFALSE 47145
// for j in t do
47099: LD_ADDR_VAR 0 7
47103: PUSH
47104: LD_VAR 0 4
47108: PUSH
47109: FOR_IN
47110: IFFALSE 47143
// result := Replace ( result , result + 1 , j ) ;
47112: LD_ADDR_VAR 0 2
47116: PUSH
47117: LD_VAR 0 2
47121: PPUSH
47122: LD_VAR 0 2
47126: PUSH
47127: LD_INT 1
47129: PLUS
47130: PPUSH
47131: LD_VAR 0 7
47135: PPUSH
47136: CALL_OW 1
47140: ST_TO_ADDR
47141: GO 47109
47143: POP
47144: POP
// end ;
47145: GO 47075
47147: POP
47148: POP
// if not result then
47149: LD_VAR 0 2
47153: NOT
47154: IFFALSE 47158
// exit ;
47156: GO 47306
// mech := result [ 1 ] ;
47158: LD_ADDR_VAR 0 5
47162: PUSH
47163: LD_VAR 0 2
47167: PUSH
47168: LD_INT 1
47170: ARRAY
47171: ST_TO_ADDR
// if result > 1 then
47172: LD_VAR 0 2
47176: PUSH
47177: LD_INT 1
47179: GREATER
47180: IFFALSE 47292
// begin for i = 2 to result do
47182: LD_ADDR_VAR 0 3
47186: PUSH
47187: DOUBLE
47188: LD_INT 2
47190: DEC
47191: ST_TO_ADDR
47192: LD_VAR 0 2
47196: PUSH
47197: FOR_TO
47198: IFFALSE 47290
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47200: LD_ADDR_VAR 0 4
47204: PUSH
47205: LD_VAR 0 2
47209: PUSH
47210: LD_VAR 0 3
47214: ARRAY
47215: PPUSH
47216: LD_INT 3
47218: PPUSH
47219: CALL_OW 259
47223: PUSH
47224: LD_VAR 0 2
47228: PUSH
47229: LD_VAR 0 3
47233: ARRAY
47234: PPUSH
47235: CALL_OW 432
47239: MINUS
47240: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47241: LD_VAR 0 4
47245: PUSH
47246: LD_VAR 0 5
47250: PPUSH
47251: LD_INT 3
47253: PPUSH
47254: CALL_OW 259
47258: PUSH
47259: LD_VAR 0 5
47263: PPUSH
47264: CALL_OW 432
47268: MINUS
47269: GREATEREQUAL
47270: IFFALSE 47288
// mech := result [ i ] ;
47272: LD_ADDR_VAR 0 5
47276: PUSH
47277: LD_VAR 0 2
47281: PUSH
47282: LD_VAR 0 3
47286: ARRAY
47287: ST_TO_ADDR
// end ;
47288: GO 47197
47290: POP
47291: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47292: LD_VAR 0 1
47296: PPUSH
47297: LD_VAR 0 5
47301: PPUSH
47302: CALL_OW 135
// end ;
47306: LD_VAR 0 2
47310: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47311: LD_INT 0
47313: PPUSH
47314: PPUSH
47315: PPUSH
47316: PPUSH
47317: PPUSH
47318: PPUSH
47319: PPUSH
47320: PPUSH
47321: PPUSH
47322: PPUSH
47323: PPUSH
47324: PPUSH
47325: PPUSH
// result := [ ] ;
47326: LD_ADDR_VAR 0 7
47330: PUSH
47331: EMPTY
47332: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47333: LD_VAR 0 1
47337: PPUSH
47338: CALL_OW 266
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: IN
47353: NOT
47354: IFFALSE 47358
// exit ;
47356: GO 48992
// if name then
47358: LD_VAR 0 3
47362: IFFALSE 47378
// SetBName ( base_dep , name ) ;
47364: LD_VAR 0 1
47368: PPUSH
47369: LD_VAR 0 3
47373: PPUSH
47374: CALL_OW 500
// base := GetBase ( base_dep ) ;
47378: LD_ADDR_VAR 0 15
47382: PUSH
47383: LD_VAR 0 1
47387: PPUSH
47388: CALL_OW 274
47392: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47393: LD_ADDR_VAR 0 16
47397: PUSH
47398: LD_VAR 0 1
47402: PPUSH
47403: CALL_OW 255
47407: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47408: LD_ADDR_VAR 0 17
47412: PUSH
47413: LD_VAR 0 1
47417: PPUSH
47418: CALL_OW 248
47422: ST_TO_ADDR
// if sources then
47423: LD_VAR 0 5
47427: IFFALSE 47474
// for i = 1 to 3 do
47429: LD_ADDR_VAR 0 8
47433: PUSH
47434: DOUBLE
47435: LD_INT 1
47437: DEC
47438: ST_TO_ADDR
47439: LD_INT 3
47441: PUSH
47442: FOR_TO
47443: IFFALSE 47472
// AddResourceType ( base , i , sources [ i ] ) ;
47445: LD_VAR 0 15
47449: PPUSH
47450: LD_VAR 0 8
47454: PPUSH
47455: LD_VAR 0 5
47459: PUSH
47460: LD_VAR 0 8
47464: ARRAY
47465: PPUSH
47466: CALL_OW 276
47470: GO 47442
47472: POP
47473: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47474: LD_ADDR_VAR 0 18
47478: PUSH
47479: LD_VAR 0 15
47483: PPUSH
47484: LD_VAR 0 2
47488: PPUSH
47489: LD_INT 1
47491: PPUSH
47492: CALL 46735 0 3
47496: ST_TO_ADDR
// InitHc ;
47497: CALL_OW 19
// InitUc ;
47501: CALL_OW 18
// uc_side := side ;
47505: LD_ADDR_OWVAR 20
47509: PUSH
47510: LD_VAR 0 16
47514: ST_TO_ADDR
// uc_nation := nation ;
47515: LD_ADDR_OWVAR 21
47519: PUSH
47520: LD_VAR 0 17
47524: ST_TO_ADDR
// if buildings then
47525: LD_VAR 0 18
47529: IFFALSE 48851
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47531: LD_ADDR_VAR 0 19
47535: PUSH
47536: LD_VAR 0 18
47540: PPUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 30
47546: PUSH
47547: LD_INT 29
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 30
47556: PUSH
47557: LD_INT 30
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: PPUSH
47569: CALL_OW 72
47573: ST_TO_ADDR
// if tmp then
47574: LD_VAR 0 19
47578: IFFALSE 47626
// for i in tmp do
47580: LD_ADDR_VAR 0 8
47584: PUSH
47585: LD_VAR 0 19
47589: PUSH
47590: FOR_IN
47591: IFFALSE 47624
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47593: LD_VAR 0 8
47597: PPUSH
47598: CALL_OW 250
47602: PPUSH
47603: LD_VAR 0 8
47607: PPUSH
47608: CALL_OW 251
47612: PPUSH
47613: LD_VAR 0 16
47617: PPUSH
47618: CALL_OW 441
47622: GO 47590
47624: POP
47625: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47626: LD_VAR 0 18
47630: PPUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 30
47636: PUSH
47637: LD_INT 32
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 30
47646: PUSH
47647: LD_INT 33
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: PPUSH
47659: CALL_OW 72
47663: IFFALSE 47751
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47665: LD_ADDR_VAR 0 8
47669: PUSH
47670: LD_VAR 0 18
47674: PPUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 30
47680: PUSH
47681: LD_INT 32
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 30
47690: PUSH
47691: LD_INT 33
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: PPUSH
47703: CALL_OW 72
47707: PUSH
47708: FOR_IN
47709: IFFALSE 47749
// begin if not GetBWeapon ( i ) then
47711: LD_VAR 0 8
47715: PPUSH
47716: CALL_OW 269
47720: NOT
47721: IFFALSE 47747
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47723: LD_VAR 0 8
47727: PPUSH
47728: LD_VAR 0 8
47732: PPUSH
47733: LD_VAR 0 2
47737: PPUSH
47738: CALL 48997 0 2
47742: PPUSH
47743: CALL_OW 431
// end ;
47747: GO 47708
47749: POP
47750: POP
// end ; for i = 1 to personel do
47751: LD_ADDR_VAR 0 8
47755: PUSH
47756: DOUBLE
47757: LD_INT 1
47759: DEC
47760: ST_TO_ADDR
47761: LD_VAR 0 6
47765: PUSH
47766: FOR_TO
47767: IFFALSE 48831
// begin if i > 4 then
47769: LD_VAR 0 8
47773: PUSH
47774: LD_INT 4
47776: GREATER
47777: IFFALSE 47781
// break ;
47779: GO 48831
// case i of 1 :
47781: LD_VAR 0 8
47785: PUSH
47786: LD_INT 1
47788: DOUBLE
47789: EQUAL
47790: IFTRUE 47794
47792: GO 47874
47794: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47795: LD_ADDR_VAR 0 12
47799: PUSH
47800: LD_VAR 0 18
47804: PPUSH
47805: LD_INT 22
47807: PUSH
47808: LD_VAR 0 16
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 58
47819: PUSH
47820: EMPTY
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 30
47828: PUSH
47829: LD_INT 32
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 30
47838: PUSH
47839: LD_INT 4
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 30
47848: PUSH
47849: LD_INT 5
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: PPUSH
47867: CALL_OW 72
47871: ST_TO_ADDR
47872: GO 48096
47874: LD_INT 2
47876: DOUBLE
47877: EQUAL
47878: IFTRUE 47882
47880: GO 47944
47882: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47883: LD_ADDR_VAR 0 12
47887: PUSH
47888: LD_VAR 0 18
47892: PPUSH
47893: LD_INT 22
47895: PUSH
47896: LD_VAR 0 16
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 30
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 30
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PPUSH
47937: CALL_OW 72
47941: ST_TO_ADDR
47942: GO 48096
47944: LD_INT 3
47946: DOUBLE
47947: EQUAL
47948: IFTRUE 47952
47950: GO 48014
47952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47953: LD_ADDR_VAR 0 12
47957: PUSH
47958: LD_VAR 0 18
47962: PPUSH
47963: LD_INT 22
47965: PUSH
47966: LD_VAR 0 16
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 30
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 30
47990: PUSH
47991: LD_INT 3
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: LIST
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PPUSH
48007: CALL_OW 72
48011: ST_TO_ADDR
48012: GO 48096
48014: LD_INT 4
48016: DOUBLE
48017: EQUAL
48018: IFTRUE 48022
48020: GO 48095
48022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48023: LD_ADDR_VAR 0 12
48027: PUSH
48028: LD_VAR 0 18
48032: PPUSH
48033: LD_INT 22
48035: PUSH
48036: LD_VAR 0 16
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 30
48050: PUSH
48051: LD_INT 6
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 30
48060: PUSH
48061: LD_INT 7
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 30
48070: PUSH
48071: LD_INT 8
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PPUSH
48088: CALL_OW 72
48092: ST_TO_ADDR
48093: GO 48096
48095: POP
// if i = 1 then
48096: LD_VAR 0 8
48100: PUSH
48101: LD_INT 1
48103: EQUAL
48104: IFFALSE 48215
// begin tmp := [ ] ;
48106: LD_ADDR_VAR 0 19
48110: PUSH
48111: EMPTY
48112: ST_TO_ADDR
// for j in f do
48113: LD_ADDR_VAR 0 9
48117: PUSH
48118: LD_VAR 0 12
48122: PUSH
48123: FOR_IN
48124: IFFALSE 48197
// if GetBType ( j ) = b_bunker then
48126: LD_VAR 0 9
48130: PPUSH
48131: CALL_OW 266
48135: PUSH
48136: LD_INT 32
48138: EQUAL
48139: IFFALSE 48166
// tmp := Insert ( tmp , 1 , j ) else
48141: LD_ADDR_VAR 0 19
48145: PUSH
48146: LD_VAR 0 19
48150: PPUSH
48151: LD_INT 1
48153: PPUSH
48154: LD_VAR 0 9
48158: PPUSH
48159: CALL_OW 2
48163: ST_TO_ADDR
48164: GO 48195
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48166: LD_ADDR_VAR 0 19
48170: PUSH
48171: LD_VAR 0 19
48175: PPUSH
48176: LD_VAR 0 19
48180: PUSH
48181: LD_INT 1
48183: PLUS
48184: PPUSH
48185: LD_VAR 0 9
48189: PPUSH
48190: CALL_OW 2
48194: ST_TO_ADDR
48195: GO 48123
48197: POP
48198: POP
// if tmp then
48199: LD_VAR 0 19
48203: IFFALSE 48215
// f := tmp ;
48205: LD_ADDR_VAR 0 12
48209: PUSH
48210: LD_VAR 0 19
48214: ST_TO_ADDR
// end ; x := personel [ i ] ;
48215: LD_ADDR_VAR 0 13
48219: PUSH
48220: LD_VAR 0 6
48224: PUSH
48225: LD_VAR 0 8
48229: ARRAY
48230: ST_TO_ADDR
// if x = - 1 then
48231: LD_VAR 0 13
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: EQUAL
48240: IFFALSE 48449
// begin for j in f do
48242: LD_ADDR_VAR 0 9
48246: PUSH
48247: LD_VAR 0 12
48251: PUSH
48252: FOR_IN
48253: IFFALSE 48445
// repeat InitHc ;
48255: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48259: LD_VAR 0 9
48263: PPUSH
48264: CALL_OW 266
48268: PUSH
48269: LD_INT 5
48271: EQUAL
48272: IFFALSE 48342
// begin if UnitsInside ( j ) < 3 then
48274: LD_VAR 0 9
48278: PPUSH
48279: CALL_OW 313
48283: PUSH
48284: LD_INT 3
48286: LESS
48287: IFFALSE 48323
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48289: LD_INT 0
48291: PPUSH
48292: LD_INT 5
48294: PUSH
48295: LD_INT 8
48297: PUSH
48298: LD_INT 9
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: PUSH
48306: LD_VAR 0 17
48310: ARRAY
48311: PPUSH
48312: LD_VAR 0 4
48316: PPUSH
48317: CALL_OW 380
48321: GO 48340
// PrepareHuman ( false , i , skill ) ;
48323: LD_INT 0
48325: PPUSH
48326: LD_VAR 0 8
48330: PPUSH
48331: LD_VAR 0 4
48335: PPUSH
48336: CALL_OW 380
// end else
48340: GO 48359
// PrepareHuman ( false , i , skill ) ;
48342: LD_INT 0
48344: PPUSH
48345: LD_VAR 0 8
48349: PPUSH
48350: LD_VAR 0 4
48354: PPUSH
48355: CALL_OW 380
// un := CreateHuman ;
48359: LD_ADDR_VAR 0 14
48363: PUSH
48364: CALL_OW 44
48368: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48369: LD_ADDR_VAR 0 7
48373: PUSH
48374: LD_VAR 0 7
48378: PPUSH
48379: LD_INT 1
48381: PPUSH
48382: LD_VAR 0 14
48386: PPUSH
48387: CALL_OW 2
48391: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48392: LD_VAR 0 14
48396: PPUSH
48397: LD_VAR 0 9
48401: PPUSH
48402: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48406: LD_VAR 0 9
48410: PPUSH
48411: CALL_OW 313
48415: PUSH
48416: LD_INT 6
48418: EQUAL
48419: PUSH
48420: LD_VAR 0 9
48424: PPUSH
48425: CALL_OW 266
48429: PUSH
48430: LD_INT 32
48432: PUSH
48433: LD_INT 31
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: IN
48440: OR
48441: IFFALSE 48255
48443: GO 48252
48445: POP
48446: POP
// end else
48447: GO 48829
// for j = 1 to x do
48449: LD_ADDR_VAR 0 9
48453: PUSH
48454: DOUBLE
48455: LD_INT 1
48457: DEC
48458: ST_TO_ADDR
48459: LD_VAR 0 13
48463: PUSH
48464: FOR_TO
48465: IFFALSE 48827
// begin InitHc ;
48467: CALL_OW 19
// if not f then
48471: LD_VAR 0 12
48475: NOT
48476: IFFALSE 48565
// begin PrepareHuman ( false , i , skill ) ;
48478: LD_INT 0
48480: PPUSH
48481: LD_VAR 0 8
48485: PPUSH
48486: LD_VAR 0 4
48490: PPUSH
48491: CALL_OW 380
// un := CreateHuman ;
48495: LD_ADDR_VAR 0 14
48499: PUSH
48500: CALL_OW 44
48504: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48505: LD_ADDR_VAR 0 7
48509: PUSH
48510: LD_VAR 0 7
48514: PPUSH
48515: LD_INT 1
48517: PPUSH
48518: LD_VAR 0 14
48522: PPUSH
48523: CALL_OW 2
48527: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48528: LD_VAR 0 14
48532: PPUSH
48533: LD_VAR 0 1
48537: PPUSH
48538: CALL_OW 250
48542: PPUSH
48543: LD_VAR 0 1
48547: PPUSH
48548: CALL_OW 251
48552: PPUSH
48553: LD_INT 10
48555: PPUSH
48556: LD_INT 0
48558: PPUSH
48559: CALL_OW 50
// continue ;
48563: GO 48464
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48565: LD_VAR 0 12
48569: PUSH
48570: LD_INT 1
48572: ARRAY
48573: PPUSH
48574: CALL_OW 313
48578: PUSH
48579: LD_VAR 0 12
48583: PUSH
48584: LD_INT 1
48586: ARRAY
48587: PPUSH
48588: CALL_OW 266
48592: PUSH
48593: LD_INT 32
48595: PUSH
48596: LD_INT 31
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: IN
48603: AND
48604: PUSH
48605: LD_VAR 0 12
48609: PUSH
48610: LD_INT 1
48612: ARRAY
48613: PPUSH
48614: CALL_OW 313
48618: PUSH
48619: LD_INT 6
48621: EQUAL
48622: OR
48623: IFFALSE 48643
// f := Delete ( f , 1 ) ;
48625: LD_ADDR_VAR 0 12
48629: PUSH
48630: LD_VAR 0 12
48634: PPUSH
48635: LD_INT 1
48637: PPUSH
48638: CALL_OW 3
48642: ST_TO_ADDR
// if not f then
48643: LD_VAR 0 12
48647: NOT
48648: IFFALSE 48666
// begin x := x + 2 ;
48650: LD_ADDR_VAR 0 13
48654: PUSH
48655: LD_VAR 0 13
48659: PUSH
48660: LD_INT 2
48662: PLUS
48663: ST_TO_ADDR
// continue ;
48664: GO 48464
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48666: LD_VAR 0 12
48670: PUSH
48671: LD_INT 1
48673: ARRAY
48674: PPUSH
48675: CALL_OW 266
48679: PUSH
48680: LD_INT 5
48682: EQUAL
48683: IFFALSE 48757
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48685: LD_VAR 0 12
48689: PUSH
48690: LD_INT 1
48692: ARRAY
48693: PPUSH
48694: CALL_OW 313
48698: PUSH
48699: LD_INT 3
48701: LESS
48702: IFFALSE 48738
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48704: LD_INT 0
48706: PPUSH
48707: LD_INT 5
48709: PUSH
48710: LD_INT 8
48712: PUSH
48713: LD_INT 9
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: PUSH
48721: LD_VAR 0 17
48725: ARRAY
48726: PPUSH
48727: LD_VAR 0 4
48731: PPUSH
48732: CALL_OW 380
48736: GO 48755
// PrepareHuman ( false , i , skill ) ;
48738: LD_INT 0
48740: PPUSH
48741: LD_VAR 0 8
48745: PPUSH
48746: LD_VAR 0 4
48750: PPUSH
48751: CALL_OW 380
// end else
48755: GO 48774
// PrepareHuman ( false , i , skill ) ;
48757: LD_INT 0
48759: PPUSH
48760: LD_VAR 0 8
48764: PPUSH
48765: LD_VAR 0 4
48769: PPUSH
48770: CALL_OW 380
// un := CreateHuman ;
48774: LD_ADDR_VAR 0 14
48778: PUSH
48779: CALL_OW 44
48783: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48784: LD_ADDR_VAR 0 7
48788: PUSH
48789: LD_VAR 0 7
48793: PPUSH
48794: LD_INT 1
48796: PPUSH
48797: LD_VAR 0 14
48801: PPUSH
48802: CALL_OW 2
48806: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48807: LD_VAR 0 14
48811: PPUSH
48812: LD_VAR 0 12
48816: PUSH
48817: LD_INT 1
48819: ARRAY
48820: PPUSH
48821: CALL_OW 52
// end ;
48825: GO 48464
48827: POP
48828: POP
// end ;
48829: GO 47766
48831: POP
48832: POP
// result := result ^ buildings ;
48833: LD_ADDR_VAR 0 7
48837: PUSH
48838: LD_VAR 0 7
48842: PUSH
48843: LD_VAR 0 18
48847: ADD
48848: ST_TO_ADDR
// end else
48849: GO 48992
// begin for i = 1 to personel do
48851: LD_ADDR_VAR 0 8
48855: PUSH
48856: DOUBLE
48857: LD_INT 1
48859: DEC
48860: ST_TO_ADDR
48861: LD_VAR 0 6
48865: PUSH
48866: FOR_TO
48867: IFFALSE 48990
// begin if i > 4 then
48869: LD_VAR 0 8
48873: PUSH
48874: LD_INT 4
48876: GREATER
48877: IFFALSE 48881
// break ;
48879: GO 48990
// x := personel [ i ] ;
48881: LD_ADDR_VAR 0 13
48885: PUSH
48886: LD_VAR 0 6
48890: PUSH
48891: LD_VAR 0 8
48895: ARRAY
48896: ST_TO_ADDR
// if x = - 1 then
48897: LD_VAR 0 13
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: EQUAL
48906: IFFALSE 48910
// continue ;
48908: GO 48866
// PrepareHuman ( false , i , skill ) ;
48910: LD_INT 0
48912: PPUSH
48913: LD_VAR 0 8
48917: PPUSH
48918: LD_VAR 0 4
48922: PPUSH
48923: CALL_OW 380
// un := CreateHuman ;
48927: LD_ADDR_VAR 0 14
48931: PUSH
48932: CALL_OW 44
48936: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48937: LD_VAR 0 14
48941: PPUSH
48942: LD_VAR 0 1
48946: PPUSH
48947: CALL_OW 250
48951: PPUSH
48952: LD_VAR 0 1
48956: PPUSH
48957: CALL_OW 251
48961: PPUSH
48962: LD_INT 10
48964: PPUSH
48965: LD_INT 0
48967: PPUSH
48968: CALL_OW 50
// result := result ^ un ;
48972: LD_ADDR_VAR 0 7
48976: PUSH
48977: LD_VAR 0 7
48981: PUSH
48982: LD_VAR 0 14
48986: ADD
48987: ST_TO_ADDR
// end ;
48988: GO 48866
48990: POP
48991: POP
// end ; end ;
48992: LD_VAR 0 7
48996: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48997: LD_INT 0
48999: PPUSH
49000: PPUSH
49001: PPUSH
49002: PPUSH
49003: PPUSH
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
49009: PPUSH
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
49014: PPUSH
// result := false ;
49015: LD_ADDR_VAR 0 3
49019: PUSH
49020: LD_INT 0
49022: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49023: LD_VAR 0 1
49027: NOT
49028: PUSH
49029: LD_VAR 0 1
49033: PPUSH
49034: CALL_OW 266
49038: PUSH
49039: LD_INT 32
49041: PUSH
49042: LD_INT 33
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: IN
49049: NOT
49050: OR
49051: IFFALSE 49055
// exit ;
49053: GO 50164
// nat := GetNation ( tower ) ;
49055: LD_ADDR_VAR 0 12
49059: PUSH
49060: LD_VAR 0 1
49064: PPUSH
49065: CALL_OW 248
49069: ST_TO_ADDR
// side := GetSide ( tower ) ;
49070: LD_ADDR_VAR 0 16
49074: PUSH
49075: LD_VAR 0 1
49079: PPUSH
49080: CALL_OW 255
49084: ST_TO_ADDR
// x := GetX ( tower ) ;
49085: LD_ADDR_VAR 0 10
49089: PUSH
49090: LD_VAR 0 1
49094: PPUSH
49095: CALL_OW 250
49099: ST_TO_ADDR
// y := GetY ( tower ) ;
49100: LD_ADDR_VAR 0 11
49104: PUSH
49105: LD_VAR 0 1
49109: PPUSH
49110: CALL_OW 251
49114: ST_TO_ADDR
// if not x or not y then
49115: LD_VAR 0 10
49119: NOT
49120: PUSH
49121: LD_VAR 0 11
49125: NOT
49126: OR
49127: IFFALSE 49131
// exit ;
49129: GO 50164
// weapon := 0 ;
49131: LD_ADDR_VAR 0 18
49135: PUSH
49136: LD_INT 0
49138: ST_TO_ADDR
// fac_list := [ ] ;
49139: LD_ADDR_VAR 0 17
49143: PUSH
49144: EMPTY
49145: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49146: LD_ADDR_VAR 0 6
49150: PUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: CALL_OW 274
49160: PPUSH
49161: LD_VAR 0 2
49165: PPUSH
49166: LD_INT 0
49168: PPUSH
49169: CALL 46735 0 3
49173: PPUSH
49174: LD_INT 30
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PPUSH
49184: CALL_OW 72
49188: ST_TO_ADDR
// if not factories then
49189: LD_VAR 0 6
49193: NOT
49194: IFFALSE 49198
// exit ;
49196: GO 50164
// for i in factories do
49198: LD_ADDR_VAR 0 8
49202: PUSH
49203: LD_VAR 0 6
49207: PUSH
49208: FOR_IN
49209: IFFALSE 49234
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49211: LD_ADDR_VAR 0 17
49215: PUSH
49216: LD_VAR 0 17
49220: PUSH
49221: LD_VAR 0 8
49225: PPUSH
49226: CALL_OW 478
49230: UNION
49231: ST_TO_ADDR
49232: GO 49208
49234: POP
49235: POP
// if not fac_list then
49236: LD_VAR 0 17
49240: NOT
49241: IFFALSE 49245
// exit ;
49243: GO 50164
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49245: LD_ADDR_VAR 0 5
49249: PUSH
49250: LD_INT 4
49252: PUSH
49253: LD_INT 5
49255: PUSH
49256: LD_INT 9
49258: PUSH
49259: LD_INT 10
49261: PUSH
49262: LD_INT 6
49264: PUSH
49265: LD_INT 7
49267: PUSH
49268: LD_INT 11
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 27
49282: PUSH
49283: LD_INT 28
49285: PUSH
49286: LD_INT 26
49288: PUSH
49289: LD_INT 30
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 43
49300: PUSH
49301: LD_INT 44
49303: PUSH
49304: LD_INT 46
49306: PUSH
49307: LD_INT 45
49309: PUSH
49310: LD_INT 47
49312: PUSH
49313: LD_INT 49
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: LIST
49328: PUSH
49329: LD_VAR 0 12
49333: ARRAY
49334: ST_TO_ADDR
// list := list isect fac_list ;
49335: LD_ADDR_VAR 0 5
49339: PUSH
49340: LD_VAR 0 5
49344: PUSH
49345: LD_VAR 0 17
49349: ISECT
49350: ST_TO_ADDR
// if not list then
49351: LD_VAR 0 5
49355: NOT
49356: IFFALSE 49360
// exit ;
49358: GO 50164
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49360: LD_VAR 0 12
49364: PUSH
49365: LD_INT 3
49367: EQUAL
49368: PUSH
49369: LD_INT 49
49371: PUSH
49372: LD_VAR 0 5
49376: IN
49377: AND
49378: PUSH
49379: LD_INT 31
49381: PPUSH
49382: LD_VAR 0 16
49386: PPUSH
49387: CALL_OW 321
49391: PUSH
49392: LD_INT 2
49394: EQUAL
49395: AND
49396: IFFALSE 49456
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49398: LD_INT 22
49400: PUSH
49401: LD_VAR 0 16
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 35
49412: PUSH
49413: LD_INT 49
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 91
49422: PUSH
49423: LD_VAR 0 1
49427: PUSH
49428: LD_INT 10
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: PPUSH
49441: CALL_OW 69
49445: NOT
49446: IFFALSE 49456
// weapon := ru_time_lapser ;
49448: LD_ADDR_VAR 0 18
49452: PUSH
49453: LD_INT 49
49455: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49456: LD_VAR 0 12
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: IN
49471: PUSH
49472: LD_INT 11
49474: PUSH
49475: LD_VAR 0 5
49479: IN
49480: PUSH
49481: LD_INT 30
49483: PUSH
49484: LD_VAR 0 5
49488: IN
49489: OR
49490: AND
49491: PUSH
49492: LD_INT 6
49494: PPUSH
49495: LD_VAR 0 16
49499: PPUSH
49500: CALL_OW 321
49504: PUSH
49505: LD_INT 2
49507: EQUAL
49508: AND
49509: IFFALSE 49674
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49511: LD_INT 22
49513: PUSH
49514: LD_VAR 0 16
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 35
49528: PUSH
49529: LD_INT 11
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 35
49538: PUSH
49539: LD_INT 30
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 91
49553: PUSH
49554: LD_VAR 0 1
49558: PUSH
49559: LD_INT 18
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: PPUSH
49572: CALL_OW 69
49576: NOT
49577: PUSH
49578: LD_INT 22
49580: PUSH
49581: LD_VAR 0 16
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 30
49595: PUSH
49596: LD_INT 32
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 30
49605: PUSH
49606: LD_INT 33
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 91
49620: PUSH
49621: LD_VAR 0 1
49625: PUSH
49626: LD_INT 12
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: PUSH
49639: EMPTY
49640: LIST
49641: PPUSH
49642: CALL_OW 69
49646: PUSH
49647: LD_INT 2
49649: GREATER
49650: AND
49651: IFFALSE 49674
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49653: LD_ADDR_VAR 0 18
49657: PUSH
49658: LD_INT 11
49660: PUSH
49661: LD_INT 30
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_VAR 0 12
49672: ARRAY
49673: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49674: LD_VAR 0 18
49678: NOT
49679: PUSH
49680: LD_INT 40
49682: PPUSH
49683: LD_VAR 0 16
49687: PPUSH
49688: CALL_OW 321
49692: PUSH
49693: LD_INT 2
49695: EQUAL
49696: AND
49697: PUSH
49698: LD_INT 7
49700: PUSH
49701: LD_VAR 0 5
49705: IN
49706: PUSH
49707: LD_INT 28
49709: PUSH
49710: LD_VAR 0 5
49714: IN
49715: OR
49716: PUSH
49717: LD_INT 45
49719: PUSH
49720: LD_VAR 0 5
49724: IN
49725: OR
49726: AND
49727: IFFALSE 49981
// begin hex := GetHexInfo ( x , y ) ;
49729: LD_ADDR_VAR 0 4
49733: PUSH
49734: LD_VAR 0 10
49738: PPUSH
49739: LD_VAR 0 11
49743: PPUSH
49744: CALL_OW 546
49748: ST_TO_ADDR
// if hex [ 1 ] then
49749: LD_VAR 0 4
49753: PUSH
49754: LD_INT 1
49756: ARRAY
49757: IFFALSE 49761
// exit ;
49759: GO 50164
// height := hex [ 2 ] ;
49761: LD_ADDR_VAR 0 15
49765: PUSH
49766: LD_VAR 0 4
49770: PUSH
49771: LD_INT 2
49773: ARRAY
49774: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49775: LD_ADDR_VAR 0 14
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: LD_INT 3
49788: PUSH
49789: LD_INT 5
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// for i in tmp do
49798: LD_ADDR_VAR 0 8
49802: PUSH
49803: LD_VAR 0 14
49807: PUSH
49808: FOR_IN
49809: IFFALSE 49979
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49811: LD_ADDR_VAR 0 9
49815: PUSH
49816: LD_VAR 0 10
49820: PPUSH
49821: LD_VAR 0 8
49825: PPUSH
49826: LD_INT 5
49828: PPUSH
49829: CALL_OW 272
49833: PUSH
49834: LD_VAR 0 11
49838: PPUSH
49839: LD_VAR 0 8
49843: PPUSH
49844: LD_INT 5
49846: PPUSH
49847: CALL_OW 273
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49856: LD_VAR 0 9
49860: PUSH
49861: LD_INT 1
49863: ARRAY
49864: PPUSH
49865: LD_VAR 0 9
49869: PUSH
49870: LD_INT 2
49872: ARRAY
49873: PPUSH
49874: CALL_OW 488
49878: IFFALSE 49977
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49880: LD_ADDR_VAR 0 4
49884: PUSH
49885: LD_VAR 0 9
49889: PUSH
49890: LD_INT 1
49892: ARRAY
49893: PPUSH
49894: LD_VAR 0 9
49898: PUSH
49899: LD_INT 2
49901: ARRAY
49902: PPUSH
49903: CALL_OW 546
49907: ST_TO_ADDR
// if hex [ 1 ] then
49908: LD_VAR 0 4
49912: PUSH
49913: LD_INT 1
49915: ARRAY
49916: IFFALSE 49920
// continue ;
49918: GO 49808
// h := hex [ 2 ] ;
49920: LD_ADDR_VAR 0 13
49924: PUSH
49925: LD_VAR 0 4
49929: PUSH
49930: LD_INT 2
49932: ARRAY
49933: ST_TO_ADDR
// if h + 7 < height then
49934: LD_VAR 0 13
49938: PUSH
49939: LD_INT 7
49941: PLUS
49942: PUSH
49943: LD_VAR 0 15
49947: LESS
49948: IFFALSE 49977
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49950: LD_ADDR_VAR 0 18
49954: PUSH
49955: LD_INT 7
49957: PUSH
49958: LD_INT 28
49960: PUSH
49961: LD_INT 45
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: LIST
49968: PUSH
49969: LD_VAR 0 12
49973: ARRAY
49974: ST_TO_ADDR
// break ;
49975: GO 49979
// end ; end ; end ;
49977: GO 49808
49979: POP
49980: POP
// end ; if not weapon then
49981: LD_VAR 0 18
49985: NOT
49986: IFFALSE 50046
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49988: LD_ADDR_VAR 0 5
49992: PUSH
49993: LD_VAR 0 5
49997: PUSH
49998: LD_INT 11
50000: PUSH
50001: LD_INT 30
50003: PUSH
50004: LD_INT 49
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: DIFF
50012: ST_TO_ADDR
// if not list then
50013: LD_VAR 0 5
50017: NOT
50018: IFFALSE 50022
// exit ;
50020: GO 50164
// weapon := list [ rand ( 1 , list ) ] ;
50022: LD_ADDR_VAR 0 18
50026: PUSH
50027: LD_VAR 0 5
50031: PUSH
50032: LD_INT 1
50034: PPUSH
50035: LD_VAR 0 5
50039: PPUSH
50040: CALL_OW 12
50044: ARRAY
50045: ST_TO_ADDR
// end ; if weapon then
50046: LD_VAR 0 18
50050: IFFALSE 50164
// begin tmp := CostOfWeapon ( weapon ) ;
50052: LD_ADDR_VAR 0 14
50056: PUSH
50057: LD_VAR 0 18
50061: PPUSH
50062: CALL_OW 451
50066: ST_TO_ADDR
// j := GetBase ( tower ) ;
50067: LD_ADDR_VAR 0 9
50071: PUSH
50072: LD_VAR 0 1
50076: PPUSH
50077: CALL_OW 274
50081: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50082: LD_VAR 0 9
50086: PPUSH
50087: LD_INT 1
50089: PPUSH
50090: CALL_OW 275
50094: PUSH
50095: LD_VAR 0 14
50099: PUSH
50100: LD_INT 1
50102: ARRAY
50103: GREATEREQUAL
50104: PUSH
50105: LD_VAR 0 9
50109: PPUSH
50110: LD_INT 2
50112: PPUSH
50113: CALL_OW 275
50117: PUSH
50118: LD_VAR 0 14
50122: PUSH
50123: LD_INT 2
50125: ARRAY
50126: GREATEREQUAL
50127: AND
50128: PUSH
50129: LD_VAR 0 9
50133: PPUSH
50134: LD_INT 3
50136: PPUSH
50137: CALL_OW 275
50141: PUSH
50142: LD_VAR 0 14
50146: PUSH
50147: LD_INT 3
50149: ARRAY
50150: GREATEREQUAL
50151: AND
50152: IFFALSE 50164
// result := weapon ;
50154: LD_ADDR_VAR 0 3
50158: PUSH
50159: LD_VAR 0 18
50163: ST_TO_ADDR
// end ; end ;
50164: LD_VAR 0 3
50168: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50169: LD_INT 0
50171: PPUSH
50172: PPUSH
// result := true ;
50173: LD_ADDR_VAR 0 3
50177: PUSH
50178: LD_INT 1
50180: ST_TO_ADDR
// if array1 = array2 then
50181: LD_VAR 0 1
50185: PUSH
50186: LD_VAR 0 2
50190: EQUAL
50191: IFFALSE 50251
// begin for i = 1 to array1 do
50193: LD_ADDR_VAR 0 4
50197: PUSH
50198: DOUBLE
50199: LD_INT 1
50201: DEC
50202: ST_TO_ADDR
50203: LD_VAR 0 1
50207: PUSH
50208: FOR_TO
50209: IFFALSE 50247
// if array1 [ i ] <> array2 [ i ] then
50211: LD_VAR 0 1
50215: PUSH
50216: LD_VAR 0 4
50220: ARRAY
50221: PUSH
50222: LD_VAR 0 2
50226: PUSH
50227: LD_VAR 0 4
50231: ARRAY
50232: NONEQUAL
50233: IFFALSE 50245
// begin result := false ;
50235: LD_ADDR_VAR 0 3
50239: PUSH
50240: LD_INT 0
50242: ST_TO_ADDR
// break ;
50243: GO 50247
// end ;
50245: GO 50208
50247: POP
50248: POP
// end else
50249: GO 50259
// result := false ;
50251: LD_ADDR_VAR 0 3
50255: PUSH
50256: LD_INT 0
50258: ST_TO_ADDR
// end ;
50259: LD_VAR 0 3
50263: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50264: LD_INT 0
50266: PPUSH
50267: PPUSH
// if not array1 or not array2 then
50268: LD_VAR 0 1
50272: NOT
50273: PUSH
50274: LD_VAR 0 2
50278: NOT
50279: OR
50280: IFFALSE 50284
// exit ;
50282: GO 50348
// result := true ;
50284: LD_ADDR_VAR 0 3
50288: PUSH
50289: LD_INT 1
50291: ST_TO_ADDR
// for i = 1 to array1 do
50292: LD_ADDR_VAR 0 4
50296: PUSH
50297: DOUBLE
50298: LD_INT 1
50300: DEC
50301: ST_TO_ADDR
50302: LD_VAR 0 1
50306: PUSH
50307: FOR_TO
50308: IFFALSE 50346
// if array1 [ i ] <> array2 [ i ] then
50310: LD_VAR 0 1
50314: PUSH
50315: LD_VAR 0 4
50319: ARRAY
50320: PUSH
50321: LD_VAR 0 2
50325: PUSH
50326: LD_VAR 0 4
50330: ARRAY
50331: NONEQUAL
50332: IFFALSE 50344
// begin result := false ;
50334: LD_ADDR_VAR 0 3
50338: PUSH
50339: LD_INT 0
50341: ST_TO_ADDR
// break ;
50342: GO 50346
// end ;
50344: GO 50307
50346: POP
50347: POP
// end ;
50348: LD_VAR 0 3
50352: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50353: LD_INT 0
50355: PPUSH
50356: PPUSH
50357: PPUSH
// pom := GetBase ( fac ) ;
50358: LD_ADDR_VAR 0 5
50362: PUSH
50363: LD_VAR 0 1
50367: PPUSH
50368: CALL_OW 274
50372: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50373: LD_ADDR_VAR 0 4
50377: PUSH
50378: LD_VAR 0 2
50382: PUSH
50383: LD_INT 1
50385: ARRAY
50386: PPUSH
50387: LD_VAR 0 2
50391: PUSH
50392: LD_INT 2
50394: ARRAY
50395: PPUSH
50396: LD_VAR 0 2
50400: PUSH
50401: LD_INT 3
50403: ARRAY
50404: PPUSH
50405: LD_VAR 0 2
50409: PUSH
50410: LD_INT 4
50412: ARRAY
50413: PPUSH
50414: CALL_OW 449
50418: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50419: LD_ADDR_VAR 0 3
50423: PUSH
50424: LD_VAR 0 5
50428: PPUSH
50429: LD_INT 1
50431: PPUSH
50432: CALL_OW 275
50436: PUSH
50437: LD_VAR 0 4
50441: PUSH
50442: LD_INT 1
50444: ARRAY
50445: GREATEREQUAL
50446: PUSH
50447: LD_VAR 0 5
50451: PPUSH
50452: LD_INT 2
50454: PPUSH
50455: CALL_OW 275
50459: PUSH
50460: LD_VAR 0 4
50464: PUSH
50465: LD_INT 2
50467: ARRAY
50468: GREATEREQUAL
50469: AND
50470: PUSH
50471: LD_VAR 0 5
50475: PPUSH
50476: LD_INT 3
50478: PPUSH
50479: CALL_OW 275
50483: PUSH
50484: LD_VAR 0 4
50488: PUSH
50489: LD_INT 3
50491: ARRAY
50492: GREATEREQUAL
50493: AND
50494: ST_TO_ADDR
// end ;
50495: LD_VAR 0 3
50499: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50500: LD_INT 0
50502: PPUSH
50503: PPUSH
50504: PPUSH
50505: PPUSH
// pom := GetBase ( building ) ;
50506: LD_ADDR_VAR 0 3
50510: PUSH
50511: LD_VAR 0 1
50515: PPUSH
50516: CALL_OW 274
50520: ST_TO_ADDR
// if not pom then
50521: LD_VAR 0 3
50525: NOT
50526: IFFALSE 50530
// exit ;
50528: GO 50700
// btype := GetBType ( building ) ;
50530: LD_ADDR_VAR 0 5
50534: PUSH
50535: LD_VAR 0 1
50539: PPUSH
50540: CALL_OW 266
50544: ST_TO_ADDR
// if btype = b_armoury then
50545: LD_VAR 0 5
50549: PUSH
50550: LD_INT 4
50552: EQUAL
50553: IFFALSE 50563
// btype := b_barracks ;
50555: LD_ADDR_VAR 0 5
50559: PUSH
50560: LD_INT 5
50562: ST_TO_ADDR
// if btype = b_depot then
50563: LD_VAR 0 5
50567: PUSH
50568: LD_INT 0
50570: EQUAL
50571: IFFALSE 50581
// btype := b_warehouse ;
50573: LD_ADDR_VAR 0 5
50577: PUSH
50578: LD_INT 1
50580: ST_TO_ADDR
// if btype = b_workshop then
50581: LD_VAR 0 5
50585: PUSH
50586: LD_INT 2
50588: EQUAL
50589: IFFALSE 50599
// btype := b_factory ;
50591: LD_ADDR_VAR 0 5
50595: PUSH
50596: LD_INT 3
50598: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50599: LD_ADDR_VAR 0 4
50603: PUSH
50604: LD_VAR 0 5
50608: PPUSH
50609: LD_VAR 0 1
50613: PPUSH
50614: CALL_OW 248
50618: PPUSH
50619: CALL_OW 450
50623: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50624: LD_ADDR_VAR 0 2
50628: PUSH
50629: LD_VAR 0 3
50633: PPUSH
50634: LD_INT 1
50636: PPUSH
50637: CALL_OW 275
50641: PUSH
50642: LD_VAR 0 4
50646: PUSH
50647: LD_INT 1
50649: ARRAY
50650: GREATEREQUAL
50651: PUSH
50652: LD_VAR 0 3
50656: PPUSH
50657: LD_INT 2
50659: PPUSH
50660: CALL_OW 275
50664: PUSH
50665: LD_VAR 0 4
50669: PUSH
50670: LD_INT 2
50672: ARRAY
50673: GREATEREQUAL
50674: AND
50675: PUSH
50676: LD_VAR 0 3
50680: PPUSH
50681: LD_INT 3
50683: PPUSH
50684: CALL_OW 275
50688: PUSH
50689: LD_VAR 0 4
50693: PUSH
50694: LD_INT 3
50696: ARRAY
50697: GREATEREQUAL
50698: AND
50699: ST_TO_ADDR
// end ;
50700: LD_VAR 0 2
50704: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50705: LD_INT 0
50707: PPUSH
50708: PPUSH
50709: PPUSH
// pom := GetBase ( building ) ;
50710: LD_ADDR_VAR 0 4
50714: PUSH
50715: LD_VAR 0 1
50719: PPUSH
50720: CALL_OW 274
50724: ST_TO_ADDR
// if not pom then
50725: LD_VAR 0 4
50729: NOT
50730: IFFALSE 50734
// exit ;
50732: GO 50835
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50734: LD_ADDR_VAR 0 5
50738: PUSH
50739: LD_VAR 0 2
50743: PPUSH
50744: LD_VAR 0 1
50748: PPUSH
50749: CALL_OW 248
50753: PPUSH
50754: CALL_OW 450
50758: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50759: LD_ADDR_VAR 0 3
50763: PUSH
50764: LD_VAR 0 4
50768: PPUSH
50769: LD_INT 1
50771: PPUSH
50772: CALL_OW 275
50776: PUSH
50777: LD_VAR 0 5
50781: PUSH
50782: LD_INT 1
50784: ARRAY
50785: GREATEREQUAL
50786: PUSH
50787: LD_VAR 0 4
50791: PPUSH
50792: LD_INT 2
50794: PPUSH
50795: CALL_OW 275
50799: PUSH
50800: LD_VAR 0 5
50804: PUSH
50805: LD_INT 2
50807: ARRAY
50808: GREATEREQUAL
50809: AND
50810: PUSH
50811: LD_VAR 0 4
50815: PPUSH
50816: LD_INT 3
50818: PPUSH
50819: CALL_OW 275
50823: PUSH
50824: LD_VAR 0 5
50828: PUSH
50829: LD_INT 3
50831: ARRAY
50832: GREATEREQUAL
50833: AND
50834: ST_TO_ADDR
// end ;
50835: LD_VAR 0 3
50839: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50840: LD_INT 0
50842: PPUSH
50843: PPUSH
50844: PPUSH
50845: PPUSH
50846: PPUSH
50847: PPUSH
50848: PPUSH
50849: PPUSH
50850: PPUSH
50851: PPUSH
50852: PPUSH
// result := false ;
50853: LD_ADDR_VAR 0 8
50857: PUSH
50858: LD_INT 0
50860: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50861: LD_VAR 0 5
50865: NOT
50866: PUSH
50867: LD_VAR 0 1
50871: NOT
50872: OR
50873: PUSH
50874: LD_VAR 0 2
50878: NOT
50879: OR
50880: PUSH
50881: LD_VAR 0 3
50885: NOT
50886: OR
50887: IFFALSE 50891
// exit ;
50889: GO 51705
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50891: LD_ADDR_VAR 0 14
50895: PUSH
50896: LD_VAR 0 1
50900: PPUSH
50901: LD_VAR 0 2
50905: PPUSH
50906: LD_VAR 0 3
50910: PPUSH
50911: LD_VAR 0 4
50915: PPUSH
50916: LD_VAR 0 5
50920: PUSH
50921: LD_INT 1
50923: ARRAY
50924: PPUSH
50925: CALL_OW 248
50929: PPUSH
50930: LD_INT 0
50932: PPUSH
50933: CALL 52938 0 6
50937: ST_TO_ADDR
// if not hexes then
50938: LD_VAR 0 14
50942: NOT
50943: IFFALSE 50947
// exit ;
50945: GO 51705
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50947: LD_ADDR_VAR 0 17
50951: PUSH
50952: LD_VAR 0 5
50956: PPUSH
50957: LD_INT 22
50959: PUSH
50960: LD_VAR 0 13
50964: PPUSH
50965: CALL_OW 255
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: LD_INT 30
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 30
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PPUSH
51006: CALL_OW 72
51010: ST_TO_ADDR
// for i = 1 to hexes do
51011: LD_ADDR_VAR 0 9
51015: PUSH
51016: DOUBLE
51017: LD_INT 1
51019: DEC
51020: ST_TO_ADDR
51021: LD_VAR 0 14
51025: PUSH
51026: FOR_TO
51027: IFFALSE 51703
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51029: LD_ADDR_VAR 0 13
51033: PUSH
51034: LD_VAR 0 14
51038: PUSH
51039: LD_VAR 0 9
51043: ARRAY
51044: PUSH
51045: LD_INT 1
51047: ARRAY
51048: PPUSH
51049: LD_VAR 0 14
51053: PUSH
51054: LD_VAR 0 9
51058: ARRAY
51059: PUSH
51060: LD_INT 2
51062: ARRAY
51063: PPUSH
51064: CALL_OW 428
51068: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51069: LD_VAR 0 14
51073: PUSH
51074: LD_VAR 0 9
51078: ARRAY
51079: PUSH
51080: LD_INT 1
51082: ARRAY
51083: PPUSH
51084: LD_VAR 0 14
51088: PUSH
51089: LD_VAR 0 9
51093: ARRAY
51094: PUSH
51095: LD_INT 2
51097: ARRAY
51098: PPUSH
51099: CALL_OW 351
51103: PUSH
51104: LD_VAR 0 14
51108: PUSH
51109: LD_VAR 0 9
51113: ARRAY
51114: PUSH
51115: LD_INT 1
51117: ARRAY
51118: PPUSH
51119: LD_VAR 0 14
51123: PUSH
51124: LD_VAR 0 9
51128: ARRAY
51129: PUSH
51130: LD_INT 2
51132: ARRAY
51133: PPUSH
51134: CALL_OW 488
51138: NOT
51139: OR
51140: PUSH
51141: LD_VAR 0 13
51145: PPUSH
51146: CALL_OW 247
51150: PUSH
51151: LD_INT 3
51153: EQUAL
51154: OR
51155: IFFALSE 51161
// exit ;
51157: POP
51158: POP
51159: GO 51705
// if not tmp then
51161: LD_VAR 0 13
51165: NOT
51166: IFFALSE 51170
// continue ;
51168: GO 51026
// result := true ;
51170: LD_ADDR_VAR 0 8
51174: PUSH
51175: LD_INT 1
51177: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51178: LD_VAR 0 6
51182: PUSH
51183: LD_VAR 0 13
51187: PPUSH
51188: CALL_OW 247
51192: PUSH
51193: LD_INT 2
51195: EQUAL
51196: AND
51197: PUSH
51198: LD_VAR 0 13
51202: PPUSH
51203: CALL_OW 263
51207: PUSH
51208: LD_INT 1
51210: EQUAL
51211: AND
51212: IFFALSE 51376
// begin if IsDrivenBy ( tmp ) then
51214: LD_VAR 0 13
51218: PPUSH
51219: CALL_OW 311
51223: IFFALSE 51227
// continue ;
51225: GO 51026
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51227: LD_VAR 0 6
51231: PPUSH
51232: LD_INT 3
51234: PUSH
51235: LD_INT 60
51237: PUSH
51238: EMPTY
51239: LIST
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: LD_INT 55
51250: PUSH
51251: EMPTY
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PPUSH
51262: CALL_OW 72
51266: IFFALSE 51374
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51268: LD_ADDR_VAR 0 18
51272: PUSH
51273: LD_VAR 0 6
51277: PPUSH
51278: LD_INT 3
51280: PUSH
51281: LD_INT 60
51283: PUSH
51284: EMPTY
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: LD_INT 55
51296: PUSH
51297: EMPTY
51298: LIST
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PPUSH
51308: CALL_OW 72
51312: PUSH
51313: LD_INT 1
51315: ARRAY
51316: ST_TO_ADDR
// if IsInUnit ( driver ) then
51317: LD_VAR 0 18
51321: PPUSH
51322: CALL_OW 310
51326: IFFALSE 51337
// ComExit ( driver ) ;
51328: LD_VAR 0 18
51332: PPUSH
51333: CALL 76718 0 1
// AddComEnterUnit ( driver , tmp ) ;
51337: LD_VAR 0 18
51341: PPUSH
51342: LD_VAR 0 13
51346: PPUSH
51347: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51351: LD_VAR 0 18
51355: PPUSH
51356: LD_VAR 0 7
51360: PPUSH
51361: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51365: LD_VAR 0 18
51369: PPUSH
51370: CALL_OW 181
// end ; continue ;
51374: GO 51026
// end ; if not cleaners or not tmp in cleaners then
51376: LD_VAR 0 6
51380: NOT
51381: PUSH
51382: LD_VAR 0 13
51386: PUSH
51387: LD_VAR 0 6
51391: IN
51392: NOT
51393: OR
51394: IFFALSE 51701
// begin if dep then
51396: LD_VAR 0 17
51400: IFFALSE 51536
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51402: LD_ADDR_VAR 0 16
51406: PUSH
51407: LD_VAR 0 17
51411: PUSH
51412: LD_INT 1
51414: ARRAY
51415: PPUSH
51416: CALL_OW 250
51420: PPUSH
51421: LD_VAR 0 17
51425: PUSH
51426: LD_INT 1
51428: ARRAY
51429: PPUSH
51430: CALL_OW 254
51434: PPUSH
51435: LD_INT 5
51437: PPUSH
51438: CALL_OW 272
51442: PUSH
51443: LD_VAR 0 17
51447: PUSH
51448: LD_INT 1
51450: ARRAY
51451: PPUSH
51452: CALL_OW 251
51456: PPUSH
51457: LD_VAR 0 17
51461: PUSH
51462: LD_INT 1
51464: ARRAY
51465: PPUSH
51466: CALL_OW 254
51470: PPUSH
51471: LD_INT 5
51473: PPUSH
51474: CALL_OW 273
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51483: LD_VAR 0 16
51487: PUSH
51488: LD_INT 1
51490: ARRAY
51491: PPUSH
51492: LD_VAR 0 16
51496: PUSH
51497: LD_INT 2
51499: ARRAY
51500: PPUSH
51501: CALL_OW 488
51505: IFFALSE 51536
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51507: LD_VAR 0 13
51511: PPUSH
51512: LD_VAR 0 16
51516: PUSH
51517: LD_INT 1
51519: ARRAY
51520: PPUSH
51521: LD_VAR 0 16
51525: PUSH
51526: LD_INT 2
51528: ARRAY
51529: PPUSH
51530: CALL_OW 111
// continue ;
51534: GO 51026
// end ; end ; r := GetDir ( tmp ) ;
51536: LD_ADDR_VAR 0 15
51540: PUSH
51541: LD_VAR 0 13
51545: PPUSH
51546: CALL_OW 254
51550: ST_TO_ADDR
// if r = 5 then
51551: LD_VAR 0 15
51555: PUSH
51556: LD_INT 5
51558: EQUAL
51559: IFFALSE 51569
// r := 0 ;
51561: LD_ADDR_VAR 0 15
51565: PUSH
51566: LD_INT 0
51568: ST_TO_ADDR
// for j = r to 5 do
51569: LD_ADDR_VAR 0 10
51573: PUSH
51574: DOUBLE
51575: LD_VAR 0 15
51579: DEC
51580: ST_TO_ADDR
51581: LD_INT 5
51583: PUSH
51584: FOR_TO
51585: IFFALSE 51699
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51587: LD_ADDR_VAR 0 11
51591: PUSH
51592: LD_VAR 0 13
51596: PPUSH
51597: CALL_OW 250
51601: PPUSH
51602: LD_VAR 0 10
51606: PPUSH
51607: LD_INT 2
51609: PPUSH
51610: CALL_OW 272
51614: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51615: LD_ADDR_VAR 0 12
51619: PUSH
51620: LD_VAR 0 13
51624: PPUSH
51625: CALL_OW 251
51629: PPUSH
51630: LD_VAR 0 10
51634: PPUSH
51635: LD_INT 2
51637: PPUSH
51638: CALL_OW 273
51642: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51643: LD_VAR 0 11
51647: PPUSH
51648: LD_VAR 0 12
51652: PPUSH
51653: CALL_OW 488
51657: PUSH
51658: LD_VAR 0 11
51662: PPUSH
51663: LD_VAR 0 12
51667: PPUSH
51668: CALL_OW 428
51672: NOT
51673: AND
51674: IFFALSE 51697
// begin ComMoveXY ( tmp , _x , _y ) ;
51676: LD_VAR 0 13
51680: PPUSH
51681: LD_VAR 0 11
51685: PPUSH
51686: LD_VAR 0 12
51690: PPUSH
51691: CALL_OW 111
// break ;
51695: GO 51699
// end ; end ;
51697: GO 51584
51699: POP
51700: POP
// end ; end ;
51701: GO 51026
51703: POP
51704: POP
// end ;
51705: LD_VAR 0 8
51709: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51710: LD_INT 0
51712: PPUSH
// result := true ;
51713: LD_ADDR_VAR 0 3
51717: PUSH
51718: LD_INT 1
51720: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51721: LD_VAR 0 2
51725: PUSH
51726: LD_INT 24
51728: DOUBLE
51729: EQUAL
51730: IFTRUE 51740
51732: LD_INT 33
51734: DOUBLE
51735: EQUAL
51736: IFTRUE 51740
51738: GO 51765
51740: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51741: LD_ADDR_VAR 0 3
51745: PUSH
51746: LD_INT 32
51748: PPUSH
51749: LD_VAR 0 1
51753: PPUSH
51754: CALL_OW 321
51758: PUSH
51759: LD_INT 2
51761: EQUAL
51762: ST_TO_ADDR
51763: GO 52081
51765: LD_INT 20
51767: DOUBLE
51768: EQUAL
51769: IFTRUE 51773
51771: GO 51798
51773: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51774: LD_ADDR_VAR 0 3
51778: PUSH
51779: LD_INT 6
51781: PPUSH
51782: LD_VAR 0 1
51786: PPUSH
51787: CALL_OW 321
51791: PUSH
51792: LD_INT 2
51794: EQUAL
51795: ST_TO_ADDR
51796: GO 52081
51798: LD_INT 22
51800: DOUBLE
51801: EQUAL
51802: IFTRUE 51812
51804: LD_INT 36
51806: DOUBLE
51807: EQUAL
51808: IFTRUE 51812
51810: GO 51837
51812: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51813: LD_ADDR_VAR 0 3
51817: PUSH
51818: LD_INT 15
51820: PPUSH
51821: LD_VAR 0 1
51825: PPUSH
51826: CALL_OW 321
51830: PUSH
51831: LD_INT 2
51833: EQUAL
51834: ST_TO_ADDR
51835: GO 52081
51837: LD_INT 30
51839: DOUBLE
51840: EQUAL
51841: IFTRUE 51845
51843: GO 51870
51845: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51846: LD_ADDR_VAR 0 3
51850: PUSH
51851: LD_INT 20
51853: PPUSH
51854: LD_VAR 0 1
51858: PPUSH
51859: CALL_OW 321
51863: PUSH
51864: LD_INT 2
51866: EQUAL
51867: ST_TO_ADDR
51868: GO 52081
51870: LD_INT 28
51872: DOUBLE
51873: EQUAL
51874: IFTRUE 51884
51876: LD_INT 21
51878: DOUBLE
51879: EQUAL
51880: IFTRUE 51884
51882: GO 51909
51884: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51885: LD_ADDR_VAR 0 3
51889: PUSH
51890: LD_INT 21
51892: PPUSH
51893: LD_VAR 0 1
51897: PPUSH
51898: CALL_OW 321
51902: PUSH
51903: LD_INT 2
51905: EQUAL
51906: ST_TO_ADDR
51907: GO 52081
51909: LD_INT 16
51911: DOUBLE
51912: EQUAL
51913: IFTRUE 51917
51915: GO 51942
51917: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51918: LD_ADDR_VAR 0 3
51922: PUSH
51923: LD_INT 84
51925: PPUSH
51926: LD_VAR 0 1
51930: PPUSH
51931: CALL_OW 321
51935: PUSH
51936: LD_INT 2
51938: EQUAL
51939: ST_TO_ADDR
51940: GO 52081
51942: LD_INT 19
51944: DOUBLE
51945: EQUAL
51946: IFTRUE 51956
51948: LD_INT 23
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51956
51954: GO 51981
51956: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51957: LD_ADDR_VAR 0 3
51961: PUSH
51962: LD_INT 83
51964: PPUSH
51965: LD_VAR 0 1
51969: PPUSH
51970: CALL_OW 321
51974: PUSH
51975: LD_INT 2
51977: EQUAL
51978: ST_TO_ADDR
51979: GO 52081
51981: LD_INT 17
51983: DOUBLE
51984: EQUAL
51985: IFTRUE 51989
51987: GO 52014
51989: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51990: LD_ADDR_VAR 0 3
51994: PUSH
51995: LD_INT 39
51997: PPUSH
51998: LD_VAR 0 1
52002: PPUSH
52003: CALL_OW 321
52007: PUSH
52008: LD_INT 2
52010: EQUAL
52011: ST_TO_ADDR
52012: GO 52081
52014: LD_INT 18
52016: DOUBLE
52017: EQUAL
52018: IFTRUE 52022
52020: GO 52047
52022: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52023: LD_ADDR_VAR 0 3
52027: PUSH
52028: LD_INT 40
52030: PPUSH
52031: LD_VAR 0 1
52035: PPUSH
52036: CALL_OW 321
52040: PUSH
52041: LD_INT 2
52043: EQUAL
52044: ST_TO_ADDR
52045: GO 52081
52047: LD_INT 27
52049: DOUBLE
52050: EQUAL
52051: IFTRUE 52055
52053: GO 52080
52055: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52056: LD_ADDR_VAR 0 3
52060: PUSH
52061: LD_INT 35
52063: PPUSH
52064: LD_VAR 0 1
52068: PPUSH
52069: CALL_OW 321
52073: PUSH
52074: LD_INT 2
52076: EQUAL
52077: ST_TO_ADDR
52078: GO 52081
52080: POP
// end ;
52081: LD_VAR 0 3
52085: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52086: LD_INT 0
52088: PPUSH
52089: PPUSH
52090: PPUSH
52091: PPUSH
52092: PPUSH
52093: PPUSH
52094: PPUSH
52095: PPUSH
52096: PPUSH
52097: PPUSH
52098: PPUSH
// result := false ;
52099: LD_ADDR_VAR 0 6
52103: PUSH
52104: LD_INT 0
52106: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52107: LD_VAR 0 1
52111: NOT
52112: PUSH
52113: LD_VAR 0 1
52117: PPUSH
52118: CALL_OW 266
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: IN
52133: NOT
52134: OR
52135: PUSH
52136: LD_VAR 0 2
52140: NOT
52141: OR
52142: PUSH
52143: LD_VAR 0 5
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: LD_INT 4
52162: PUSH
52163: LD_INT 5
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: IN
52174: NOT
52175: OR
52176: PUSH
52177: LD_VAR 0 3
52181: PPUSH
52182: LD_VAR 0 4
52186: PPUSH
52187: CALL_OW 488
52191: NOT
52192: OR
52193: IFFALSE 52197
// exit ;
52195: GO 52933
// side := GetSide ( depot ) ;
52197: LD_ADDR_VAR 0 9
52201: PUSH
52202: LD_VAR 0 1
52206: PPUSH
52207: CALL_OW 255
52211: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52212: LD_VAR 0 9
52216: PPUSH
52217: LD_VAR 0 2
52221: PPUSH
52222: CALL 51710 0 2
52226: NOT
52227: IFFALSE 52231
// exit ;
52229: GO 52933
// pom := GetBase ( depot ) ;
52231: LD_ADDR_VAR 0 10
52235: PUSH
52236: LD_VAR 0 1
52240: PPUSH
52241: CALL_OW 274
52245: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52246: LD_ADDR_VAR 0 11
52250: PUSH
52251: LD_VAR 0 2
52255: PPUSH
52256: LD_VAR 0 1
52260: PPUSH
52261: CALL_OW 248
52265: PPUSH
52266: CALL_OW 450
52270: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52271: LD_VAR 0 10
52275: PPUSH
52276: LD_INT 1
52278: PPUSH
52279: CALL_OW 275
52283: PUSH
52284: LD_VAR 0 11
52288: PUSH
52289: LD_INT 1
52291: ARRAY
52292: GREATEREQUAL
52293: PUSH
52294: LD_VAR 0 10
52298: PPUSH
52299: LD_INT 2
52301: PPUSH
52302: CALL_OW 275
52306: PUSH
52307: LD_VAR 0 11
52311: PUSH
52312: LD_INT 2
52314: ARRAY
52315: GREATEREQUAL
52316: AND
52317: PUSH
52318: LD_VAR 0 10
52322: PPUSH
52323: LD_INT 3
52325: PPUSH
52326: CALL_OW 275
52330: PUSH
52331: LD_VAR 0 11
52335: PUSH
52336: LD_INT 3
52338: ARRAY
52339: GREATEREQUAL
52340: AND
52341: NOT
52342: IFFALSE 52346
// exit ;
52344: GO 52933
// if GetBType ( depot ) = b_depot then
52346: LD_VAR 0 1
52350: PPUSH
52351: CALL_OW 266
52355: PUSH
52356: LD_INT 0
52358: EQUAL
52359: IFFALSE 52371
// dist := 28 else
52361: LD_ADDR_VAR 0 14
52365: PUSH
52366: LD_INT 28
52368: ST_TO_ADDR
52369: GO 52379
// dist := 36 ;
52371: LD_ADDR_VAR 0 14
52375: PUSH
52376: LD_INT 36
52378: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52379: LD_VAR 0 1
52383: PPUSH
52384: LD_VAR 0 3
52388: PPUSH
52389: LD_VAR 0 4
52393: PPUSH
52394: CALL_OW 297
52398: PUSH
52399: LD_VAR 0 14
52403: GREATER
52404: IFFALSE 52408
// exit ;
52406: GO 52933
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52408: LD_ADDR_VAR 0 12
52412: PUSH
52413: LD_VAR 0 2
52417: PPUSH
52418: LD_VAR 0 3
52422: PPUSH
52423: LD_VAR 0 4
52427: PPUSH
52428: LD_VAR 0 5
52432: PPUSH
52433: LD_VAR 0 1
52437: PPUSH
52438: CALL_OW 248
52442: PPUSH
52443: LD_INT 0
52445: PPUSH
52446: CALL 52938 0 6
52450: ST_TO_ADDR
// if not hexes then
52451: LD_VAR 0 12
52455: NOT
52456: IFFALSE 52460
// exit ;
52458: GO 52933
// hex := GetHexInfo ( x , y ) ;
52460: LD_ADDR_VAR 0 15
52464: PUSH
52465: LD_VAR 0 3
52469: PPUSH
52470: LD_VAR 0 4
52474: PPUSH
52475: CALL_OW 546
52479: ST_TO_ADDR
// if hex [ 1 ] then
52480: LD_VAR 0 15
52484: PUSH
52485: LD_INT 1
52487: ARRAY
52488: IFFALSE 52492
// exit ;
52490: GO 52933
// height := hex [ 2 ] ;
52492: LD_ADDR_VAR 0 13
52496: PUSH
52497: LD_VAR 0 15
52501: PUSH
52502: LD_INT 2
52504: ARRAY
52505: ST_TO_ADDR
// for i = 1 to hexes do
52506: LD_ADDR_VAR 0 7
52510: PUSH
52511: DOUBLE
52512: LD_INT 1
52514: DEC
52515: ST_TO_ADDR
52516: LD_VAR 0 12
52520: PUSH
52521: FOR_TO
52522: IFFALSE 52852
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52524: LD_VAR 0 12
52528: PUSH
52529: LD_VAR 0 7
52533: ARRAY
52534: PUSH
52535: LD_INT 1
52537: ARRAY
52538: PPUSH
52539: LD_VAR 0 12
52543: PUSH
52544: LD_VAR 0 7
52548: ARRAY
52549: PUSH
52550: LD_INT 2
52552: ARRAY
52553: PPUSH
52554: CALL_OW 488
52558: NOT
52559: PUSH
52560: LD_VAR 0 12
52564: PUSH
52565: LD_VAR 0 7
52569: ARRAY
52570: PUSH
52571: LD_INT 1
52573: ARRAY
52574: PPUSH
52575: LD_VAR 0 12
52579: PUSH
52580: LD_VAR 0 7
52584: ARRAY
52585: PUSH
52586: LD_INT 2
52588: ARRAY
52589: PPUSH
52590: CALL_OW 428
52594: PUSH
52595: LD_INT 0
52597: GREATER
52598: OR
52599: PUSH
52600: LD_VAR 0 12
52604: PUSH
52605: LD_VAR 0 7
52609: ARRAY
52610: PUSH
52611: LD_INT 1
52613: ARRAY
52614: PPUSH
52615: LD_VAR 0 12
52619: PUSH
52620: LD_VAR 0 7
52624: ARRAY
52625: PUSH
52626: LD_INT 2
52628: ARRAY
52629: PPUSH
52630: CALL_OW 351
52634: OR
52635: IFFALSE 52641
// exit ;
52637: POP
52638: POP
52639: GO 52933
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52641: LD_ADDR_VAR 0 8
52645: PUSH
52646: LD_VAR 0 12
52650: PUSH
52651: LD_VAR 0 7
52655: ARRAY
52656: PUSH
52657: LD_INT 1
52659: ARRAY
52660: PPUSH
52661: LD_VAR 0 12
52665: PUSH
52666: LD_VAR 0 7
52670: ARRAY
52671: PUSH
52672: LD_INT 2
52674: ARRAY
52675: PPUSH
52676: CALL_OW 546
52680: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52681: LD_VAR 0 8
52685: PUSH
52686: LD_INT 1
52688: ARRAY
52689: PUSH
52690: LD_VAR 0 8
52694: PUSH
52695: LD_INT 2
52697: ARRAY
52698: PUSH
52699: LD_VAR 0 13
52703: PUSH
52704: LD_INT 2
52706: PLUS
52707: GREATER
52708: OR
52709: PUSH
52710: LD_VAR 0 8
52714: PUSH
52715: LD_INT 2
52717: ARRAY
52718: PUSH
52719: LD_VAR 0 13
52723: PUSH
52724: LD_INT 2
52726: MINUS
52727: LESS
52728: OR
52729: PUSH
52730: LD_VAR 0 8
52734: PUSH
52735: LD_INT 3
52737: ARRAY
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 8
52744: PUSH
52745: LD_INT 9
52747: PUSH
52748: LD_INT 10
52750: PUSH
52751: LD_INT 11
52753: PUSH
52754: LD_INT 12
52756: PUSH
52757: LD_INT 13
52759: PUSH
52760: LD_INT 16
52762: PUSH
52763: LD_INT 17
52765: PUSH
52766: LD_INT 18
52768: PUSH
52769: LD_INT 19
52771: PUSH
52772: LD_INT 20
52774: PUSH
52775: LD_INT 21
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: IN
52793: NOT
52794: OR
52795: PUSH
52796: LD_VAR 0 8
52800: PUSH
52801: LD_INT 5
52803: ARRAY
52804: NOT
52805: OR
52806: PUSH
52807: LD_VAR 0 8
52811: PUSH
52812: LD_INT 6
52814: ARRAY
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 7
52824: PUSH
52825: LD_INT 9
52827: PUSH
52828: LD_INT 10
52830: PUSH
52831: LD_INT 11
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: IN
52842: NOT
52843: OR
52844: IFFALSE 52850
// exit ;
52846: POP
52847: POP
52848: GO 52933
// end ;
52850: GO 52521
52852: POP
52853: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52854: LD_VAR 0 9
52858: PPUSH
52859: LD_VAR 0 3
52863: PPUSH
52864: LD_VAR 0 4
52868: PPUSH
52869: LD_INT 20
52871: PPUSH
52872: CALL 44885 0 4
52876: PUSH
52877: LD_INT 4
52879: ARRAY
52880: IFFALSE 52884
// exit ;
52882: GO 52933
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52884: LD_VAR 0 2
52888: PUSH
52889: LD_INT 29
52891: PUSH
52892: LD_INT 30
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: IN
52899: PUSH
52900: LD_VAR 0 3
52904: PPUSH
52905: LD_VAR 0 4
52909: PPUSH
52910: LD_VAR 0 9
52914: PPUSH
52915: CALL_OW 440
52919: NOT
52920: AND
52921: IFFALSE 52925
// exit ;
52923: GO 52933
// result := true ;
52925: LD_ADDR_VAR 0 6
52929: PUSH
52930: LD_INT 1
52932: ST_TO_ADDR
// end ;
52933: LD_VAR 0 6
52937: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52938: LD_INT 0
52940: PPUSH
52941: PPUSH
52942: PPUSH
52943: PPUSH
52944: PPUSH
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
52956: PPUSH
52957: PPUSH
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
52983: PPUSH
52984: PPUSH
52985: PPUSH
52986: PPUSH
52987: PPUSH
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
// result = [ ] ;
52998: LD_ADDR_VAR 0 7
53002: PUSH
53003: EMPTY
53004: ST_TO_ADDR
// temp_list = [ ] ;
53005: LD_ADDR_VAR 0 9
53009: PUSH
53010: EMPTY
53011: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53012: LD_VAR 0 4
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: LD_INT 4
53031: PUSH
53032: LD_INT 5
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: IN
53043: NOT
53044: PUSH
53045: LD_VAR 0 1
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: IN
53060: PUSH
53061: LD_VAR 0 5
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: IN
53080: NOT
53081: AND
53082: OR
53083: IFFALSE 53087
// exit ;
53085: GO 71478
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53087: LD_VAR 0 1
53091: PUSH
53092: LD_INT 6
53094: PUSH
53095: LD_INT 7
53097: PUSH
53098: LD_INT 8
53100: PUSH
53101: LD_INT 13
53103: PUSH
53104: LD_INT 12
53106: PUSH
53107: LD_INT 15
53109: PUSH
53110: LD_INT 11
53112: PUSH
53113: LD_INT 14
53115: PUSH
53116: LD_INT 10
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: IN
53130: IFFALSE 53140
// btype = b_lab ;
53132: LD_ADDR_VAR 0 1
53136: PUSH
53137: LD_INT 6
53139: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53140: LD_VAR 0 6
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: IN
53159: NOT
53160: PUSH
53161: LD_VAR 0 1
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 3
53177: PUSH
53178: LD_INT 6
53180: PUSH
53181: LD_INT 36
53183: PUSH
53184: LD_INT 4
53186: PUSH
53187: LD_INT 5
53189: PUSH
53190: LD_INT 31
53192: PUSH
53193: LD_INT 32
53195: PUSH
53196: LD_INT 33
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: IN
53212: NOT
53213: PUSH
53214: LD_VAR 0 6
53218: PUSH
53219: LD_INT 1
53221: EQUAL
53222: AND
53223: OR
53224: PUSH
53225: LD_VAR 0 1
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: LD_INT 3
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: IN
53240: NOT
53241: PUSH
53242: LD_VAR 0 6
53246: PUSH
53247: LD_INT 2
53249: EQUAL
53250: AND
53251: OR
53252: IFFALSE 53262
// mode = 0 ;
53254: LD_ADDR_VAR 0 6
53258: PUSH
53259: LD_INT 0
53261: ST_TO_ADDR
// case mode of 0 :
53262: LD_VAR 0 6
53266: PUSH
53267: LD_INT 0
53269: DOUBLE
53270: EQUAL
53271: IFTRUE 53275
53273: GO 64728
53275: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53276: LD_ADDR_VAR 0 11
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53469: LD_ADDR_VAR 0 12
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53665: LD_ADDR_VAR 0 13
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: LD_INT 3
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53864: LD_ADDR_VAR 0 14
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 3
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54060: LD_ADDR_VAR 0 15
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54253: LD_ADDR_VAR 0 16
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: NEG
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 3
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54446: LD_ADDR_VAR 0 17
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54676: LD_ADDR_VAR 0 18
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54906: LD_ADDR_VAR 0 19
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55136: LD_ADDR_VAR 0 20
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55366: LD_ADDR_VAR 0 21
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55596: LD_ADDR_VAR 0 22
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55826: LD_ADDR_VAR 0 23
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 2
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 3
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56106: LD_ADDR_VAR 0 24
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56382: LD_ADDR_VAR 0 25
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56656: LD_ADDR_VAR 0 26
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56932: LD_ADDR_VAR 0 27
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: NEG
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57212: LD_ADDR_VAR 0 28
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: LD_INT 3
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 3
57447: NEG
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57494: LD_ADDR_VAR 0 29
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 3
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 3
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57773: LD_ADDR_VAR 0 30
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 3
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 3
58016: NEG
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58051: LD_ADDR_VAR 0 31
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 3
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 3
58294: NEG
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58329: LD_ADDR_VAR 0 32
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 2
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: NEG
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58607: LD_ADDR_VAR 0 33
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58886: LD_ADDR_VAR 0 34
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 2
59042: NEG
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: LD_INT 3
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 3
59100: PUSH
59101: LD_INT 2
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 3
59131: NEG
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59166: LD_ADDR_VAR 0 35
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59278: LD_ADDR_VAR 0 36
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59390: LD_ADDR_VAR 0 37
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59502: LD_ADDR_VAR 0 38
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: NEG
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59614: LD_ADDR_VAR 0 39
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59726: LD_ADDR_VAR 0 40
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59838: LD_ADDR_VAR 0 41
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 2
60028: NEG
60029: PUSH
60030: LD_INT 3
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: LD_INT 3
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 3
60147: NEG
60148: PUSH
60149: LD_INT 3
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60188: LD_ADDR_VAR 0 42
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: LD_INT 3
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: LD_INT 2
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 3
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 3
60497: NEG
60498: PUSH
60499: LD_INT 3
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60538: LD_ADDR_VAR 0 43
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 2
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 3
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 3
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 3
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: LD_INT 3
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 2
60823: NEG
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 3
60834: NEG
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 3
60845: NEG
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60886: LD_ADDR_VAR 0 44
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 2
61041: NEG
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 3
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 3
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: LD_INT 3
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 2
61149: NEG
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: NEG
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 3
61171: NEG
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: NEG
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 3
61195: NEG
61196: PUSH
61197: LD_INT 3
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61236: LD_ADDR_VAR 0 45
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: LD_INT 3
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 3
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 3
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 3
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61586: LD_ADDR_VAR 0 46
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 2
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: LD_INT 2
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 2
61763: NEG
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 3
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 2
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 3
61830: PUSH
61831: LD_INT 1
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: LD_INT 3
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 2
61871: NEG
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 3
61882: NEG
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61934: LD_ADDR_VAR 0 47
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62085: LD_ADDR_VAR 0 48
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 2
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 2
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62232: LD_ADDR_VAR 0 49
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 2
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62376: LD_ADDR_VAR 0 50
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62520: LD_ADDR_VAR 0 51
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 2
62643: NEG
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62667: LD_ADDR_VAR 0 52
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: LD_INT 1
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: NEG
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 2
62782: NEG
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 2
62794: NEG
62795: PUSH
62796: LD_INT 2
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62818: LD_ADDR_VAR 0 53
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 2
63005: NEG
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: LD_INT 2
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63048: LD_ADDR_VAR 0 54
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 2
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 2
63235: NEG
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 2
63247: NEG
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63278: LD_ADDR_VAR 0 55
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 1
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 2
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: LD_INT 1
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: LD_INT 1
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: LD_INT 2
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 2
63465: NEG
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 2
63477: NEG
63478: PUSH
63479: LD_INT 2
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63508: LD_ADDR_VAR 0 56
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: LD_INT 2
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 2
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 2
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 2
63707: NEG
63708: PUSH
63709: LD_INT 2
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63738: LD_ADDR_VAR 0 57
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 1
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: LD_INT 0
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 2
63937: NEG
63938: PUSH
63939: LD_INT 2
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63968: LD_ADDR_VAR 0 58
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: LD_INT 1
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: LD_INT 2
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: LD_INT 2
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: LD_INT 1
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: LD_INT 2
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64198: LD_ADDR_VAR 0 59
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: LD_INT 1
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64286: LD_ADDR_VAR 0 60
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64374: LD_ADDR_VAR 0 61
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64462: LD_ADDR_VAR 0 62
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: NEG
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64550: LD_ADDR_VAR 0 63
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64638: LD_ADDR_VAR 0 64
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 1
64696: NEG
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: ST_TO_ADDR
// end ; 1 :
64726: GO 70623
64728: LD_INT 1
64730: DOUBLE
64731: EQUAL
64732: IFTRUE 64736
64734: GO 67359
64736: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64737: LD_ADDR_VAR 0 11
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: LD_INT 3
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: LD_INT 2
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64781: LD_ADDR_VAR 0 12
64785: PUSH
64786: LD_INT 2
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 3
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 3
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: LIST
64821: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64822: LD_ADDR_VAR 0 13
64826: PUSH
64827: LD_INT 3
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 3
64839: PUSH
64840: LD_INT 3
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: LD_INT 3
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: LIST
64861: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64862: LD_ADDR_VAR 0 14
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: LD_INT 3
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: LD_INT 3
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64903: LD_ADDR_VAR 0 15
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 3
64921: NEG
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 3
64932: NEG
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64947: LD_ADDR_VAR 0 16
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: LD_INT 3
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 3
64966: NEG
64967: PUSH
64968: LD_INT 2
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 3
64978: NEG
64979: PUSH
64980: LD_INT 3
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: LIST
64992: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64993: LD_ADDR_VAR 0 17
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: LD_INT 3
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: LD_INT 3
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: LIST
65036: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65037: LD_ADDR_VAR 0 18
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 3
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 3
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65078: LD_ADDR_VAR 0 19
65082: PUSH
65083: LD_INT 3
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 3
65095: PUSH
65096: LD_INT 3
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 2
65105: PUSH
65106: LD_INT 3
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65118: LD_ADDR_VAR 0 20
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 3
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 3
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: LIST
65158: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65159: LD_ADDR_VAR 0 21
65163: PUSH
65164: LD_INT 2
65166: NEG
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 3
65177: NEG
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: NEG
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65203: LD_ADDR_VAR 0 22
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: LD_INT 3
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 3
65222: NEG
65223: PUSH
65224: LD_INT 2
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 3
65234: NEG
65235: PUSH
65236: LD_INT 3
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: LIST
65248: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65249: LD_ADDR_VAR 0 23
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 3
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: LD_INT 4
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65293: LD_ADDR_VAR 0 24
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 4
65321: PUSH
65322: LD_INT 1
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65334: LD_ADDR_VAR 0 25
65338: PUSH
65339: LD_INT 3
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 4
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 3
65361: PUSH
65362: LD_INT 4
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: LIST
65373: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65374: LD_ADDR_VAR 0 26
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: LD_INT 4
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: LD_INT 3
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: LIST
65414: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65415: LD_ADDR_VAR 0 27
65419: PUSH
65420: LD_INT 3
65422: NEG
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 3
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 4
65444: NEG
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65459: LD_ADDR_VAR 0 28
65463: PUSH
65464: LD_INT 3
65466: NEG
65467: PUSH
65468: LD_INT 3
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 3
65478: NEG
65479: PUSH
65480: LD_INT 4
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 4
65490: NEG
65491: PUSH
65492: LD_INT 3
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65505: LD_ADDR_VAR 0 29
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: LD_INT 3
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: LD_INT 3
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: LD_INT 2
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: LD_INT 4
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 4
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: LD_INT 3
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: LD_INT 5
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: LD_INT 5
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 4
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 1
65614: NEG
65615: PUSH
65616: LD_INT 6
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_INT 6
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: LD_INT 5
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65660: LD_ADDR_VAR 0 30
65664: PUSH
65665: LD_INT 2
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 4
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 4
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 4
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 5
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 5
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 5
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 6
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 6
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65803: LD_ADDR_VAR 0 31
65807: PUSH
65808: LD_INT 3
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: LD_INT 3
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 2
65830: PUSH
65831: LD_INT 3
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 4
65840: PUSH
65841: LD_INT 3
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 4
65850: PUSH
65851: LD_INT 4
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 3
65860: PUSH
65861: LD_INT 4
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 5
65870: PUSH
65871: LD_INT 4
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 5
65880: PUSH
65881: LD_INT 5
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 4
65890: PUSH
65891: LD_INT 5
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 6
65900: PUSH
65901: LD_INT 5
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 6
65910: PUSH
65911: LD_INT 6
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 5
65920: PUSH
65921: LD_INT 6
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65942: LD_ADDR_VAR 0 32
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: LD_INT 3
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 2
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: LD_INT 4
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: LD_INT 4
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: LD_INT 3
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: LD_INT 5
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: LD_INT 5
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 1
66031: NEG
66032: PUSH
66033: LD_INT 4
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: LD_INT 6
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: LD_INT 6
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: LD_INT 5
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66085: LD_ADDR_VAR 0 33
66089: PUSH
66090: LD_INT 2
66092: NEG
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 3
66103: NEG
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 3
66114: NEG
66115: PUSH
66116: LD_INT 1
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 3
66126: NEG
66127: PUSH
66128: LD_INT 1
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 4
66137: NEG
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 4
66148: NEG
66149: PUSH
66150: LD_INT 1
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 4
66160: NEG
66161: PUSH
66162: LD_INT 1
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 5
66171: NEG
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 5
66182: NEG
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 5
66194: NEG
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 6
66205: NEG
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 6
66216: NEG
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66240: LD_ADDR_VAR 0 34
66244: PUSH
66245: LD_INT 2
66247: NEG
66248: PUSH
66249: LD_INT 3
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 3
66259: NEG
66260: PUSH
66261: LD_INT 2
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 3
66271: NEG
66272: PUSH
66273: LD_INT 3
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 3
66283: NEG
66284: PUSH
66285: LD_INT 4
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 4
66295: NEG
66296: PUSH
66297: LD_INT 3
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 4
66307: NEG
66308: PUSH
66309: LD_INT 4
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 4
66319: NEG
66320: PUSH
66321: LD_INT 5
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 5
66331: NEG
66332: PUSH
66333: LD_INT 4
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 5
66343: NEG
66344: PUSH
66345: LD_INT 5
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 5
66355: NEG
66356: PUSH
66357: LD_INT 6
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 6
66367: NEG
66368: PUSH
66369: LD_INT 5
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 6
66379: NEG
66380: PUSH
66381: LD_INT 6
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66403: LD_ADDR_VAR 0 41
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: LD_INT 2
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 3
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: LD_INT 2
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: LIST
66446: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66447: LD_ADDR_VAR 0 42
66451: PUSH
66452: LD_INT 2
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 2
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 3
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66488: LD_ADDR_VAR 0 43
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 3
66505: PUSH
66506: LD_INT 2
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: LD_INT 3
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: LIST
66527: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66528: LD_ADDR_VAR 0 44
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: PUSH
66546: LD_INT 3
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 1
66555: NEG
66556: PUSH
66557: LD_INT 2
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66569: LD_ADDR_VAR 0 45
66573: PUSH
66574: LD_INT 2
66576: NEG
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 2
66587: NEG
66588: PUSH
66589: LD_INT 1
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 3
66598: NEG
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66613: LD_ADDR_VAR 0 46
66617: PUSH
66618: LD_INT 2
66620: NEG
66621: PUSH
66622: LD_INT 2
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: LD_INT 3
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 3
66644: NEG
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66659: LD_ADDR_VAR 0 47
66663: PUSH
66664: LD_INT 2
66666: NEG
66667: PUSH
66668: LD_INT 3
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: LD_INT 3
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66692: LD_ADDR_VAR 0 48
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: LD_INT 2
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 2
66710: PUSH
66711: LD_INT 1
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66723: LD_ADDR_VAR 0 49
66727: PUSH
66728: LD_INT 3
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66752: LD_ADDR_VAR 0 50
66756: PUSH
66757: LD_INT 2
66759: PUSH
66760: LD_INT 3
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: LD_INT 3
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66781: LD_ADDR_VAR 0 51
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: LD_INT 2
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 2
66799: NEG
66800: PUSH
66801: LD_INT 1
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66812: LD_ADDR_VAR 0 52
66816: PUSH
66817: LD_INT 3
66819: NEG
66820: PUSH
66821: LD_INT 1
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: LD_INT 2
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66845: LD_ADDR_VAR 0 53
66849: PUSH
66850: LD_INT 1
66852: NEG
66853: PUSH
66854: LD_INT 3
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 3
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: LD_INT 2
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: LIST
66888: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66889: LD_ADDR_VAR 0 54
66893: PUSH
66894: LD_INT 2
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 3
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 3
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: LIST
66929: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66930: LD_ADDR_VAR 0 55
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 2
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: LIST
66969: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66970: LD_ADDR_VAR 0 56
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: LD_INT 3
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: LD_INT 3
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 1
66997: NEG
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: LIST
67010: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67011: LD_ADDR_VAR 0 57
67015: PUSH
67016: LD_INT 2
67018: NEG
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 3
67029: NEG
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 3
67040: NEG
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67055: LD_ADDR_VAR 0 58
67059: PUSH
67060: LD_INT 2
67062: NEG
67063: PUSH
67064: LD_INT 3
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 3
67074: NEG
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 3
67086: NEG
67087: PUSH
67088: LD_INT 3
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: LIST
67100: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67101: LD_ADDR_VAR 0 59
67105: PUSH
67106: LD_INT 1
67108: NEG
67109: PUSH
67110: LD_INT 2
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67145: LD_ADDR_VAR 0 60
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: LD_INT 1
67155: NEG
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 2
67173: PUSH
67174: LD_INT 1
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67186: LD_ADDR_VAR 0 61
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 2
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: LD_INT 2
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: LIST
67225: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67226: LD_ADDR_VAR 0 62
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: LD_INT 2
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: LD_INT 2
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: LIST
67266: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67267: LD_ADDR_VAR 0 63
67271: PUSH
67272: LD_INT 1
67274: NEG
67275: PUSH
67276: LD_INT 1
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 2
67285: NEG
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 2
67296: NEG
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67311: LD_ADDR_VAR 0 64
67315: PUSH
67316: LD_INT 1
67318: NEG
67319: PUSH
67320: LD_INT 2
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 2
67330: NEG
67331: PUSH
67332: LD_INT 1
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PUSH
67344: LD_INT 2
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: LIST
67356: ST_TO_ADDR
// end ; 2 :
67357: GO 70623
67359: LD_INT 2
67361: DOUBLE
67362: EQUAL
67363: IFTRUE 67367
67365: GO 70622
67367: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67368: LD_ADDR_VAR 0 29
67372: PUSH
67373: LD_INT 4
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 4
67385: PUSH
67386: LD_INT 1
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 5
67396: PUSH
67397: LD_INT 0
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 5
67406: PUSH
67407: LD_INT 1
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 4
67416: PUSH
67417: LD_INT 1
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 3
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 3
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 5
67458: PUSH
67459: LD_INT 2
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 3
67468: PUSH
67469: LD_INT 3
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 3
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 4
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 4
67498: PUSH
67499: LD_INT 4
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 3
67508: PUSH
67509: LD_INT 4
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 2
67518: PUSH
67519: LD_INT 3
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 2
67528: PUSH
67529: LD_INT 2
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 4
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: LD_INT 4
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: LD_INT 4
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 0
67568: PUSH
67569: LD_INT 3
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: LD_INT 4
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: LD_INT 5
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: LD_INT 5
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 1
67608: NEG
67609: PUSH
67610: LD_INT 4
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 1
67619: NEG
67620: PUSH
67621: LD_INT 3
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 2
67630: PUSH
67631: LD_INT 5
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 2
67640: NEG
67641: PUSH
67642: LD_INT 3
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 3
67651: NEG
67652: PUSH
67653: LD_INT 0
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 3
67662: NEG
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 2
67674: NEG
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 2
67685: NEG
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 3
67696: NEG
67697: PUSH
67698: LD_INT 1
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 4
67707: NEG
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 4
67718: NEG
67719: PUSH
67720: LD_INT 1
67722: NEG
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 4
67730: NEG
67731: PUSH
67732: LD_INT 2
67734: NEG
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 2
67742: NEG
67743: PUSH
67744: LD_INT 2
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 4
67753: NEG
67754: PUSH
67755: LD_INT 4
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 4
67765: NEG
67766: PUSH
67767: LD_INT 5
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 3
67777: NEG
67778: PUSH
67779: LD_INT 4
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 3
67789: NEG
67790: PUSH
67791: LD_INT 3
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 4
67801: NEG
67802: PUSH
67803: LD_INT 3
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 5
67813: NEG
67814: PUSH
67815: LD_INT 4
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 5
67825: NEG
67826: PUSH
67827: LD_INT 5
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 3
67837: NEG
67838: PUSH
67839: LD_INT 5
67841: NEG
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 5
67849: NEG
67850: PUSH
67851: LD_INT 3
67853: NEG
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67906: LD_ADDR_VAR 0 30
67910: PUSH
67911: LD_INT 4
67913: PUSH
67914: LD_INT 4
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 4
67923: PUSH
67924: LD_INT 3
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 5
67933: PUSH
67934: LD_INT 4
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 5
67943: PUSH
67944: LD_INT 5
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 4
67953: PUSH
67954: LD_INT 5
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 3
67963: PUSH
67964: LD_INT 4
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 3
67973: PUSH
67974: LD_INT 3
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 5
67983: PUSH
67984: LD_INT 3
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: PUSH
67994: LD_INT 5
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 0
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 0
68013: PUSH
68014: LD_INT 2
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: LD_INT 3
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: LD_INT 4
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: LD_INT 4
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 1
68053: NEG
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 2
68075: PUSH
68076: LD_INT 4
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 2
68085: NEG
68086: PUSH
68087: LD_INT 2
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 4
68096: NEG
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 4
68107: NEG
68108: PUSH
68109: LD_INT 1
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 3
68119: NEG
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 3
68130: NEG
68131: PUSH
68132: LD_INT 1
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 4
68141: NEG
68142: PUSH
68143: LD_INT 1
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 5
68152: NEG
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 5
68163: NEG
68164: PUSH
68165: LD_INT 1
68167: NEG
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 5
68175: NEG
68176: PUSH
68177: LD_INT 2
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 3
68187: NEG
68188: PUSH
68189: LD_INT 2
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 3
68198: NEG
68199: PUSH
68200: LD_INT 3
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 3
68210: NEG
68211: PUSH
68212: LD_INT 4
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 2
68222: NEG
68223: PUSH
68224: LD_INT 3
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: LD_INT 2
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: NEG
68247: PUSH
68248: LD_INT 2
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 4
68258: NEG
68259: PUSH
68260: LD_INT 3
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 4
68270: NEG
68271: PUSH
68272: LD_INT 4
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: LD_INT 4
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 4
68294: NEG
68295: PUSH
68296: LD_INT 2
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 0
68306: PUSH
68307: LD_INT 4
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 0
68317: PUSH
68318: LD_INT 5
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: PUSH
68329: LD_INT 4
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 1
68339: PUSH
68340: LD_INT 3
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 0
68350: PUSH
68351: LD_INT 3
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 1
68361: NEG
68362: PUSH
68363: LD_INT 4
68365: NEG
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 1
68373: NEG
68374: PUSH
68375: LD_INT 5
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: LD_INT 3
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 2
68396: NEG
68397: PUSH
68398: LD_INT 5
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68453: LD_ADDR_VAR 0 31
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: LD_INT 4
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 0
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 1
68480: PUSH
68481: LD_INT 4
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 1
68490: PUSH
68491: LD_INT 5
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 0
68500: PUSH
68501: LD_INT 5
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 1
68510: NEG
68511: PUSH
68512: LD_INT 4
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 1
68521: NEG
68522: PUSH
68523: LD_INT 3
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 2
68532: PUSH
68533: LD_INT 5
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 2
68542: NEG
68543: PUSH
68544: LD_INT 3
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 3
68553: NEG
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 3
68564: NEG
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 2
68576: NEG
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 2
68587: NEG
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 3
68598: NEG
68599: PUSH
68600: LD_INT 1
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 4
68609: NEG
68610: PUSH
68611: LD_INT 0
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 4
68620: NEG
68621: PUSH
68622: LD_INT 1
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 4
68632: NEG
68633: PUSH
68634: LD_INT 2
68636: NEG
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 2
68644: NEG
68645: PUSH
68646: LD_INT 2
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 4
68655: NEG
68656: PUSH
68657: LD_INT 4
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 4
68667: NEG
68668: PUSH
68669: LD_INT 5
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 3
68679: NEG
68680: PUSH
68681: LD_INT 4
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 3
68691: NEG
68692: PUSH
68693: LD_INT 3
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 4
68703: NEG
68704: PUSH
68705: LD_INT 3
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 5
68715: NEG
68716: PUSH
68717: LD_INT 4
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 5
68727: NEG
68728: PUSH
68729: LD_INT 5
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 3
68739: NEG
68740: PUSH
68741: LD_INT 5
68743: NEG
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 5
68751: NEG
68752: PUSH
68753: LD_INT 3
68755: NEG
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 0
68763: PUSH
68764: LD_INT 3
68766: NEG
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: LD_INT 4
68777: NEG
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 1
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 1
68796: PUSH
68797: LD_INT 2
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 0
68807: PUSH
68808: LD_INT 2
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 1
68818: NEG
68819: PUSH
68820: LD_INT 3
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 1
68830: NEG
68831: PUSH
68832: LD_INT 4
68834: NEG
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 2
68842: PUSH
68843: LD_INT 2
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 2
68853: NEG
68854: PUSH
68855: LD_INT 4
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 4
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 4
68875: PUSH
68876: LD_INT 1
68878: NEG
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 5
68886: PUSH
68887: LD_INT 0
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 5
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 4
68906: PUSH
68907: LD_INT 1
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 3
68916: PUSH
68917: LD_INT 0
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 3
68926: PUSH
68927: LD_INT 1
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 3
68937: PUSH
68938: LD_INT 2
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 5
68948: PUSH
68949: LD_INT 2
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69003: LD_ADDR_VAR 0 32
69007: PUSH
69008: LD_INT 4
69010: NEG
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 4
69021: NEG
69022: PUSH
69023: LD_INT 1
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 3
69033: NEG
69034: PUSH
69035: LD_INT 0
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 3
69044: NEG
69045: PUSH
69046: LD_INT 1
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 4
69055: NEG
69056: PUSH
69057: LD_INT 1
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 5
69066: NEG
69067: PUSH
69068: LD_INT 0
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 5
69077: NEG
69078: PUSH
69079: LD_INT 1
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 5
69089: NEG
69090: PUSH
69091: LD_INT 2
69093: NEG
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 3
69101: NEG
69102: PUSH
69103: LD_INT 2
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 3
69112: NEG
69113: PUSH
69114: LD_INT 3
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 3
69124: NEG
69125: PUSH
69126: LD_INT 4
69128: NEG
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 2
69136: NEG
69137: PUSH
69138: LD_INT 3
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 2
69148: NEG
69149: PUSH
69150: LD_INT 2
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 3
69160: NEG
69161: PUSH
69162: LD_INT 2
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 4
69172: NEG
69173: PUSH
69174: LD_INT 3
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 4
69184: NEG
69185: PUSH
69186: LD_INT 4
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: LD_INT 4
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 4
69208: NEG
69209: PUSH
69210: LD_INT 2
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 0
69220: PUSH
69221: LD_INT 4
69223: NEG
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: LD_INT 5
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 1
69242: PUSH
69243: LD_INT 4
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 1
69253: PUSH
69254: LD_INT 3
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 0
69264: PUSH
69265: LD_INT 3
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 1
69275: NEG
69276: PUSH
69277: LD_INT 4
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 1
69287: NEG
69288: PUSH
69289: LD_INT 5
69291: NEG
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 2
69299: PUSH
69300: LD_INT 3
69302: NEG
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 2
69310: NEG
69311: PUSH
69312: LD_INT 5
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 3
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 3
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 4
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 4
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 3
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 2
69373: PUSH
69374: LD_INT 0
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: LD_INT 1
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 2
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 4
69405: PUSH
69406: LD_INT 2
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 4
69415: PUSH
69416: LD_INT 4
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 4
69425: PUSH
69426: LD_INT 3
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 5
69435: PUSH
69436: LD_INT 4
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 5
69445: PUSH
69446: LD_INT 5
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 4
69455: PUSH
69456: LD_INT 5
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 3
69465: PUSH
69466: LD_INT 4
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 3
69475: PUSH
69476: LD_INT 3
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 5
69485: PUSH
69486: LD_INT 3
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 3
69495: PUSH
69496: LD_INT 5
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69550: LD_ADDR_VAR 0 33
69554: PUSH
69555: LD_INT 4
69557: NEG
69558: PUSH
69559: LD_INT 4
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 4
69569: NEG
69570: PUSH
69571: LD_INT 5
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 3
69581: NEG
69582: PUSH
69583: LD_INT 4
69585: NEG
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 3
69593: NEG
69594: PUSH
69595: LD_INT 3
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 4
69605: NEG
69606: PUSH
69607: LD_INT 3
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 5
69617: NEG
69618: PUSH
69619: LD_INT 4
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 5
69629: NEG
69630: PUSH
69631: LD_INT 5
69633: NEG
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 3
69641: NEG
69642: PUSH
69643: LD_INT 5
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 5
69653: NEG
69654: PUSH
69655: LD_INT 3
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 0
69665: PUSH
69666: LD_INT 3
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 0
69676: PUSH
69677: LD_INT 4
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 1
69687: PUSH
69688: LD_INT 3
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 1
69698: PUSH
69699: LD_INT 2
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 0
69709: PUSH
69710: LD_INT 2
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 1
69720: NEG
69721: PUSH
69722: LD_INT 3
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 1
69732: NEG
69733: PUSH
69734: LD_INT 4
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 2
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 2
69755: NEG
69756: PUSH
69757: LD_INT 4
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 4
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 4
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 5
69788: PUSH
69789: LD_INT 0
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 5
69798: PUSH
69799: LD_INT 1
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 4
69808: PUSH
69809: LD_INT 1
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 3
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 3
69828: PUSH
69829: LD_INT 1
69831: NEG
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 3
69839: PUSH
69840: LD_INT 2
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 5
69850: PUSH
69851: LD_INT 2
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: LD_INT 3
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 3
69870: PUSH
69871: LD_INT 2
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 4
69880: PUSH
69881: LD_INT 3
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 4
69890: PUSH
69891: LD_INT 4
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 3
69900: PUSH
69901: LD_INT 4
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 2
69910: PUSH
69911: LD_INT 3
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 2
69920: PUSH
69921: LD_INT 2
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 4
69930: PUSH
69931: LD_INT 2
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 2
69940: PUSH
69941: LD_INT 4
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 0
69950: PUSH
69951: LD_INT 4
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 0
69960: PUSH
69961: LD_INT 3
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 1
69970: PUSH
69971: LD_INT 4
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: LD_INT 5
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: LD_INT 5
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 1
70000: NEG
70001: PUSH
70002: LD_INT 4
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: LD_INT 3
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 2
70022: PUSH
70023: LD_INT 5
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 2
70032: NEG
70033: PUSH
70034: LD_INT 3
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70088: LD_ADDR_VAR 0 34
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: LD_INT 4
70098: NEG
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 0
70106: PUSH
70107: LD_INT 5
70109: NEG
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 1
70117: PUSH
70118: LD_INT 4
70120: NEG
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 1
70128: PUSH
70129: LD_INT 3
70131: NEG
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: LD_INT 3
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 1
70150: NEG
70151: PUSH
70152: LD_INT 4
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 1
70162: NEG
70163: PUSH
70164: LD_INT 5
70166: NEG
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 2
70174: PUSH
70175: LD_INT 3
70177: NEG
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 2
70185: NEG
70186: PUSH
70187: LD_INT 5
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 3
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 3
70207: PUSH
70208: LD_INT 1
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 4
70218: PUSH
70219: LD_INT 0
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 4
70228: PUSH
70229: LD_INT 1
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 3
70238: PUSH
70239: LD_INT 1
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 2
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 2
70258: PUSH
70259: LD_INT 1
70261: NEG
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 2
70269: PUSH
70270: LD_INT 2
70272: NEG
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 4
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 4
70290: PUSH
70291: LD_INT 4
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 4
70300: PUSH
70301: LD_INT 3
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 5
70310: PUSH
70311: LD_INT 4
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 5
70320: PUSH
70321: LD_INT 5
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 4
70330: PUSH
70331: LD_INT 5
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 3
70340: PUSH
70341: LD_INT 4
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 3
70350: PUSH
70351: LD_INT 3
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 5
70360: PUSH
70361: LD_INT 3
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 3
70370: PUSH
70371: LD_INT 5
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: LD_INT 3
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: LD_INT 2
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 1
70400: PUSH
70401: LD_INT 3
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: PUSH
70411: LD_INT 4
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_INT 4
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 1
70430: NEG
70431: PUSH
70432: LD_INT 3
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 1
70441: NEG
70442: PUSH
70443: LD_INT 2
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 2
70452: PUSH
70453: LD_INT 4
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 2
70462: NEG
70463: PUSH
70464: LD_INT 2
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 4
70473: NEG
70474: PUSH
70475: LD_INT 0
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 4
70484: NEG
70485: PUSH
70486: LD_INT 1
70488: NEG
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 3
70496: NEG
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 3
70507: NEG
70508: PUSH
70509: LD_INT 1
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 4
70518: NEG
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 5
70529: NEG
70530: PUSH
70531: LD_INT 0
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 5
70540: NEG
70541: PUSH
70542: LD_INT 1
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 5
70552: NEG
70553: PUSH
70554: LD_INT 2
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 3
70564: NEG
70565: PUSH
70566: LD_INT 2
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: ST_TO_ADDR
// end ; end ;
70620: GO 70623
70622: POP
// case btype of b_depot , b_warehouse :
70623: LD_VAR 0 1
70627: PUSH
70628: LD_INT 0
70630: DOUBLE
70631: EQUAL
70632: IFTRUE 70642
70634: LD_INT 1
70636: DOUBLE
70637: EQUAL
70638: IFTRUE 70642
70640: GO 70843
70642: POP
// case nation of nation_american :
70643: LD_VAR 0 5
70647: PUSH
70648: LD_INT 1
70650: DOUBLE
70651: EQUAL
70652: IFTRUE 70656
70654: GO 70712
70656: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70657: LD_ADDR_VAR 0 9
70661: PUSH
70662: LD_VAR 0 11
70666: PUSH
70667: LD_VAR 0 12
70671: PUSH
70672: LD_VAR 0 13
70676: PUSH
70677: LD_VAR 0 14
70681: PUSH
70682: LD_VAR 0 15
70686: PUSH
70687: LD_VAR 0 16
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: PUSH
70700: LD_VAR 0 4
70704: PUSH
70705: LD_INT 1
70707: PLUS
70708: ARRAY
70709: ST_TO_ADDR
70710: GO 70841
70712: LD_INT 2
70714: DOUBLE
70715: EQUAL
70716: IFTRUE 70720
70718: GO 70776
70720: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70721: LD_ADDR_VAR 0 9
70725: PUSH
70726: LD_VAR 0 17
70730: PUSH
70731: LD_VAR 0 18
70735: PUSH
70736: LD_VAR 0 19
70740: PUSH
70741: LD_VAR 0 20
70745: PUSH
70746: LD_VAR 0 21
70750: PUSH
70751: LD_VAR 0 22
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: PUSH
70764: LD_VAR 0 4
70768: PUSH
70769: LD_INT 1
70771: PLUS
70772: ARRAY
70773: ST_TO_ADDR
70774: GO 70841
70776: LD_INT 3
70778: DOUBLE
70779: EQUAL
70780: IFTRUE 70784
70782: GO 70840
70784: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70785: LD_ADDR_VAR 0 9
70789: PUSH
70790: LD_VAR 0 23
70794: PUSH
70795: LD_VAR 0 24
70799: PUSH
70800: LD_VAR 0 25
70804: PUSH
70805: LD_VAR 0 26
70809: PUSH
70810: LD_VAR 0 27
70814: PUSH
70815: LD_VAR 0 28
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: PUSH
70828: LD_VAR 0 4
70832: PUSH
70833: LD_INT 1
70835: PLUS
70836: ARRAY
70837: ST_TO_ADDR
70838: GO 70841
70840: POP
70841: GO 71396
70843: LD_INT 2
70845: DOUBLE
70846: EQUAL
70847: IFTRUE 70857
70849: LD_INT 3
70851: DOUBLE
70852: EQUAL
70853: IFTRUE 70857
70855: GO 70913
70857: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70858: LD_ADDR_VAR 0 9
70862: PUSH
70863: LD_VAR 0 29
70867: PUSH
70868: LD_VAR 0 30
70872: PUSH
70873: LD_VAR 0 31
70877: PUSH
70878: LD_VAR 0 32
70882: PUSH
70883: LD_VAR 0 33
70887: PUSH
70888: LD_VAR 0 34
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: PUSH
70901: LD_VAR 0 4
70905: PUSH
70906: LD_INT 1
70908: PLUS
70909: ARRAY
70910: ST_TO_ADDR
70911: GO 71396
70913: LD_INT 16
70915: DOUBLE
70916: EQUAL
70917: IFTRUE 70975
70919: LD_INT 17
70921: DOUBLE
70922: EQUAL
70923: IFTRUE 70975
70925: LD_INT 18
70927: DOUBLE
70928: EQUAL
70929: IFTRUE 70975
70931: LD_INT 19
70933: DOUBLE
70934: EQUAL
70935: IFTRUE 70975
70937: LD_INT 22
70939: DOUBLE
70940: EQUAL
70941: IFTRUE 70975
70943: LD_INT 20
70945: DOUBLE
70946: EQUAL
70947: IFTRUE 70975
70949: LD_INT 21
70951: DOUBLE
70952: EQUAL
70953: IFTRUE 70975
70955: LD_INT 23
70957: DOUBLE
70958: EQUAL
70959: IFTRUE 70975
70961: LD_INT 24
70963: DOUBLE
70964: EQUAL
70965: IFTRUE 70975
70967: LD_INT 25
70969: DOUBLE
70970: EQUAL
70971: IFTRUE 70975
70973: GO 71031
70975: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70976: LD_ADDR_VAR 0 9
70980: PUSH
70981: LD_VAR 0 35
70985: PUSH
70986: LD_VAR 0 36
70990: PUSH
70991: LD_VAR 0 37
70995: PUSH
70996: LD_VAR 0 38
71000: PUSH
71001: LD_VAR 0 39
71005: PUSH
71006: LD_VAR 0 40
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: PUSH
71019: LD_VAR 0 4
71023: PUSH
71024: LD_INT 1
71026: PLUS
71027: ARRAY
71028: ST_TO_ADDR
71029: GO 71396
71031: LD_INT 6
71033: DOUBLE
71034: EQUAL
71035: IFTRUE 71087
71037: LD_INT 7
71039: DOUBLE
71040: EQUAL
71041: IFTRUE 71087
71043: LD_INT 8
71045: DOUBLE
71046: EQUAL
71047: IFTRUE 71087
71049: LD_INT 13
71051: DOUBLE
71052: EQUAL
71053: IFTRUE 71087
71055: LD_INT 12
71057: DOUBLE
71058: EQUAL
71059: IFTRUE 71087
71061: LD_INT 15
71063: DOUBLE
71064: EQUAL
71065: IFTRUE 71087
71067: LD_INT 11
71069: DOUBLE
71070: EQUAL
71071: IFTRUE 71087
71073: LD_INT 14
71075: DOUBLE
71076: EQUAL
71077: IFTRUE 71087
71079: LD_INT 10
71081: DOUBLE
71082: EQUAL
71083: IFTRUE 71087
71085: GO 71143
71087: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71088: LD_ADDR_VAR 0 9
71092: PUSH
71093: LD_VAR 0 41
71097: PUSH
71098: LD_VAR 0 42
71102: PUSH
71103: LD_VAR 0 43
71107: PUSH
71108: LD_VAR 0 44
71112: PUSH
71113: LD_VAR 0 45
71117: PUSH
71118: LD_VAR 0 46
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: PUSH
71131: LD_VAR 0 4
71135: PUSH
71136: LD_INT 1
71138: PLUS
71139: ARRAY
71140: ST_TO_ADDR
71141: GO 71396
71143: LD_INT 36
71145: DOUBLE
71146: EQUAL
71147: IFTRUE 71151
71149: GO 71207
71151: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71152: LD_ADDR_VAR 0 9
71156: PUSH
71157: LD_VAR 0 47
71161: PUSH
71162: LD_VAR 0 48
71166: PUSH
71167: LD_VAR 0 49
71171: PUSH
71172: LD_VAR 0 50
71176: PUSH
71177: LD_VAR 0 51
71181: PUSH
71182: LD_VAR 0 52
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: PUSH
71195: LD_VAR 0 4
71199: PUSH
71200: LD_INT 1
71202: PLUS
71203: ARRAY
71204: ST_TO_ADDR
71205: GO 71396
71207: LD_INT 4
71209: DOUBLE
71210: EQUAL
71211: IFTRUE 71233
71213: LD_INT 5
71215: DOUBLE
71216: EQUAL
71217: IFTRUE 71233
71219: LD_INT 34
71221: DOUBLE
71222: EQUAL
71223: IFTRUE 71233
71225: LD_INT 37
71227: DOUBLE
71228: EQUAL
71229: IFTRUE 71233
71231: GO 71289
71233: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71234: LD_ADDR_VAR 0 9
71238: PUSH
71239: LD_VAR 0 53
71243: PUSH
71244: LD_VAR 0 54
71248: PUSH
71249: LD_VAR 0 55
71253: PUSH
71254: LD_VAR 0 56
71258: PUSH
71259: LD_VAR 0 57
71263: PUSH
71264: LD_VAR 0 58
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: PUSH
71277: LD_VAR 0 4
71281: PUSH
71282: LD_INT 1
71284: PLUS
71285: ARRAY
71286: ST_TO_ADDR
71287: GO 71396
71289: LD_INT 31
71291: DOUBLE
71292: EQUAL
71293: IFTRUE 71339
71295: LD_INT 32
71297: DOUBLE
71298: EQUAL
71299: IFTRUE 71339
71301: LD_INT 33
71303: DOUBLE
71304: EQUAL
71305: IFTRUE 71339
71307: LD_INT 27
71309: DOUBLE
71310: EQUAL
71311: IFTRUE 71339
71313: LD_INT 26
71315: DOUBLE
71316: EQUAL
71317: IFTRUE 71339
71319: LD_INT 28
71321: DOUBLE
71322: EQUAL
71323: IFTRUE 71339
71325: LD_INT 29
71327: DOUBLE
71328: EQUAL
71329: IFTRUE 71339
71331: LD_INT 30
71333: DOUBLE
71334: EQUAL
71335: IFTRUE 71339
71337: GO 71395
71339: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71340: LD_ADDR_VAR 0 9
71344: PUSH
71345: LD_VAR 0 59
71349: PUSH
71350: LD_VAR 0 60
71354: PUSH
71355: LD_VAR 0 61
71359: PUSH
71360: LD_VAR 0 62
71364: PUSH
71365: LD_VAR 0 63
71369: PUSH
71370: LD_VAR 0 64
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: PUSH
71383: LD_VAR 0 4
71387: PUSH
71388: LD_INT 1
71390: PLUS
71391: ARRAY
71392: ST_TO_ADDR
71393: GO 71396
71395: POP
// temp_list2 = [ ] ;
71396: LD_ADDR_VAR 0 10
71400: PUSH
71401: EMPTY
71402: ST_TO_ADDR
// for i in temp_list do
71403: LD_ADDR_VAR 0 8
71407: PUSH
71408: LD_VAR 0 9
71412: PUSH
71413: FOR_IN
71414: IFFALSE 71466
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71416: LD_ADDR_VAR 0 10
71420: PUSH
71421: LD_VAR 0 10
71425: PUSH
71426: LD_VAR 0 8
71430: PUSH
71431: LD_INT 1
71433: ARRAY
71434: PUSH
71435: LD_VAR 0 2
71439: PLUS
71440: PUSH
71441: LD_VAR 0 8
71445: PUSH
71446: LD_INT 2
71448: ARRAY
71449: PUSH
71450: LD_VAR 0 3
71454: PLUS
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: EMPTY
71461: LIST
71462: ADD
71463: ST_TO_ADDR
71464: GO 71413
71466: POP
71467: POP
// result = temp_list2 ;
71468: LD_ADDR_VAR 0 7
71472: PUSH
71473: LD_VAR 0 10
71477: ST_TO_ADDR
// end ;
71478: LD_VAR 0 7
71482: RET
// export function EnemyInRange ( unit , dist ) ; begin
71483: LD_INT 0
71485: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71486: LD_ADDR_VAR 0 3
71490: PUSH
71491: LD_VAR 0 1
71495: PPUSH
71496: CALL_OW 255
71500: PPUSH
71501: LD_VAR 0 1
71505: PPUSH
71506: CALL_OW 250
71510: PPUSH
71511: LD_VAR 0 1
71515: PPUSH
71516: CALL_OW 251
71520: PPUSH
71521: LD_VAR 0 2
71525: PPUSH
71526: CALL 44885 0 4
71530: PUSH
71531: LD_INT 4
71533: ARRAY
71534: ST_TO_ADDR
// end ;
71535: LD_VAR 0 3
71539: RET
// export function PlayerSeeMe ( unit ) ; begin
71540: LD_INT 0
71542: PPUSH
// result := See ( your_side , unit ) ;
71543: LD_ADDR_VAR 0 2
71547: PUSH
71548: LD_OWVAR 2
71552: PPUSH
71553: LD_VAR 0 1
71557: PPUSH
71558: CALL_OW 292
71562: ST_TO_ADDR
// end ;
71563: LD_VAR 0 2
71567: RET
// export function ReverseDir ( unit ) ; begin
71568: LD_INT 0
71570: PPUSH
// if not unit then
71571: LD_VAR 0 1
71575: NOT
71576: IFFALSE 71580
// exit ;
71578: GO 71603
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71580: LD_ADDR_VAR 0 2
71584: PUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: CALL_OW 254
71594: PUSH
71595: LD_INT 3
71597: PLUS
71598: PUSH
71599: LD_INT 6
71601: MOD
71602: ST_TO_ADDR
// end ;
71603: LD_VAR 0 2
71607: RET
// export function ReverseArray ( array ) ; var i ; begin
71608: LD_INT 0
71610: PPUSH
71611: PPUSH
// if not array then
71612: LD_VAR 0 1
71616: NOT
71617: IFFALSE 71621
// exit ;
71619: GO 71676
// result := [ ] ;
71621: LD_ADDR_VAR 0 2
71625: PUSH
71626: EMPTY
71627: ST_TO_ADDR
// for i := array downto 1 do
71628: LD_ADDR_VAR 0 3
71632: PUSH
71633: DOUBLE
71634: LD_VAR 0 1
71638: INC
71639: ST_TO_ADDR
71640: LD_INT 1
71642: PUSH
71643: FOR_DOWNTO
71644: IFFALSE 71674
// result := Join ( result , array [ i ] ) ;
71646: LD_ADDR_VAR 0 2
71650: PUSH
71651: LD_VAR 0 2
71655: PPUSH
71656: LD_VAR 0 1
71660: PUSH
71661: LD_VAR 0 3
71665: ARRAY
71666: PPUSH
71667: CALL 76320 0 2
71671: ST_TO_ADDR
71672: GO 71643
71674: POP
71675: POP
// end ;
71676: LD_VAR 0 2
71680: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71681: LD_INT 0
71683: PPUSH
71684: PPUSH
71685: PPUSH
71686: PPUSH
71687: PPUSH
71688: PPUSH
// if not unit or not hexes then
71689: LD_VAR 0 1
71693: NOT
71694: PUSH
71695: LD_VAR 0 2
71699: NOT
71700: OR
71701: IFFALSE 71705
// exit ;
71703: GO 71828
// dist := 9999 ;
71705: LD_ADDR_VAR 0 5
71709: PUSH
71710: LD_INT 9999
71712: ST_TO_ADDR
// for i = 1 to hexes do
71713: LD_ADDR_VAR 0 4
71717: PUSH
71718: DOUBLE
71719: LD_INT 1
71721: DEC
71722: ST_TO_ADDR
71723: LD_VAR 0 2
71727: PUSH
71728: FOR_TO
71729: IFFALSE 71816
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71731: LD_ADDR_VAR 0 6
71735: PUSH
71736: LD_VAR 0 1
71740: PPUSH
71741: LD_VAR 0 2
71745: PUSH
71746: LD_VAR 0 4
71750: ARRAY
71751: PUSH
71752: LD_INT 1
71754: ARRAY
71755: PPUSH
71756: LD_VAR 0 2
71760: PUSH
71761: LD_VAR 0 4
71765: ARRAY
71766: PUSH
71767: LD_INT 2
71769: ARRAY
71770: PPUSH
71771: CALL_OW 297
71775: ST_TO_ADDR
// if tdist < dist then
71776: LD_VAR 0 6
71780: PUSH
71781: LD_VAR 0 5
71785: LESS
71786: IFFALSE 71814
// begin hex := hexes [ i ] ;
71788: LD_ADDR_VAR 0 8
71792: PUSH
71793: LD_VAR 0 2
71797: PUSH
71798: LD_VAR 0 4
71802: ARRAY
71803: ST_TO_ADDR
// dist := tdist ;
71804: LD_ADDR_VAR 0 5
71808: PUSH
71809: LD_VAR 0 6
71813: ST_TO_ADDR
// end ; end ;
71814: GO 71728
71816: POP
71817: POP
// result := hex ;
71818: LD_ADDR_VAR 0 3
71822: PUSH
71823: LD_VAR 0 8
71827: ST_TO_ADDR
// end ;
71828: LD_VAR 0 3
71832: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71833: LD_INT 0
71835: PPUSH
71836: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71837: LD_VAR 0 1
71841: NOT
71842: PUSH
71843: LD_VAR 0 1
71847: PUSH
71848: LD_INT 21
71850: PUSH
71851: LD_INT 2
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 23
71860: PUSH
71861: LD_INT 2
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PPUSH
71872: CALL_OW 69
71876: IN
71877: NOT
71878: OR
71879: IFFALSE 71883
// exit ;
71881: GO 71930
// for i = 1 to 3 do
71883: LD_ADDR_VAR 0 3
71887: PUSH
71888: DOUBLE
71889: LD_INT 1
71891: DEC
71892: ST_TO_ADDR
71893: LD_INT 3
71895: PUSH
71896: FOR_TO
71897: IFFALSE 71928
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71899: LD_VAR 0 1
71903: PPUSH
71904: CALL_OW 250
71908: PPUSH
71909: LD_VAR 0 1
71913: PPUSH
71914: CALL_OW 251
71918: PPUSH
71919: LD_INT 1
71921: PPUSH
71922: CALL_OW 453
71926: GO 71896
71928: POP
71929: POP
// end ;
71930: LD_VAR 0 2
71934: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71935: LD_INT 0
71937: PPUSH
71938: PPUSH
71939: PPUSH
71940: PPUSH
71941: PPUSH
71942: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71943: LD_VAR 0 1
71947: NOT
71948: PUSH
71949: LD_VAR 0 2
71953: NOT
71954: OR
71955: PUSH
71956: LD_VAR 0 1
71960: PPUSH
71961: CALL_OW 314
71965: OR
71966: IFFALSE 71970
// exit ;
71968: GO 72437
// if GetLives ( i ) < 250 then
71970: LD_VAR 0 4
71974: PPUSH
71975: CALL_OW 256
71979: PUSH
71980: LD_INT 250
71982: LESS
71983: IFFALSE 71996
// begin ComAutodestruct ( i ) ;
71985: LD_VAR 0 4
71989: PPUSH
71990: CALL 71833 0 1
// exit ;
71994: GO 72437
// end ; x := GetX ( enemy_unit ) ;
71996: LD_ADDR_VAR 0 7
72000: PUSH
72001: LD_VAR 0 2
72005: PPUSH
72006: CALL_OW 250
72010: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72011: LD_ADDR_VAR 0 8
72015: PUSH
72016: LD_VAR 0 2
72020: PPUSH
72021: CALL_OW 251
72025: ST_TO_ADDR
// if not x or not y then
72026: LD_VAR 0 7
72030: NOT
72031: PUSH
72032: LD_VAR 0 8
72036: NOT
72037: OR
72038: IFFALSE 72042
// exit ;
72040: GO 72437
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72042: LD_ADDR_VAR 0 6
72046: PUSH
72047: LD_VAR 0 7
72051: PPUSH
72052: LD_INT 0
72054: PPUSH
72055: LD_INT 4
72057: PPUSH
72058: CALL_OW 272
72062: PUSH
72063: LD_VAR 0 8
72067: PPUSH
72068: LD_INT 0
72070: PPUSH
72071: LD_INT 4
72073: PPUSH
72074: CALL_OW 273
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_VAR 0 7
72087: PPUSH
72088: LD_INT 1
72090: PPUSH
72091: LD_INT 4
72093: PPUSH
72094: CALL_OW 272
72098: PUSH
72099: LD_VAR 0 8
72103: PPUSH
72104: LD_INT 1
72106: PPUSH
72107: LD_INT 4
72109: PPUSH
72110: CALL_OW 273
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_VAR 0 7
72123: PPUSH
72124: LD_INT 2
72126: PPUSH
72127: LD_INT 4
72129: PPUSH
72130: CALL_OW 272
72134: PUSH
72135: LD_VAR 0 8
72139: PPUSH
72140: LD_INT 2
72142: PPUSH
72143: LD_INT 4
72145: PPUSH
72146: CALL_OW 273
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: LD_VAR 0 7
72159: PPUSH
72160: LD_INT 3
72162: PPUSH
72163: LD_INT 4
72165: PPUSH
72166: CALL_OW 272
72170: PUSH
72171: LD_VAR 0 8
72175: PPUSH
72176: LD_INT 3
72178: PPUSH
72179: LD_INT 4
72181: PPUSH
72182: CALL_OW 273
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_VAR 0 7
72195: PPUSH
72196: LD_INT 4
72198: PPUSH
72199: LD_INT 4
72201: PPUSH
72202: CALL_OW 272
72206: PUSH
72207: LD_VAR 0 8
72211: PPUSH
72212: LD_INT 4
72214: PPUSH
72215: LD_INT 4
72217: PPUSH
72218: CALL_OW 273
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_VAR 0 7
72231: PPUSH
72232: LD_INT 5
72234: PPUSH
72235: LD_INT 4
72237: PPUSH
72238: CALL_OW 272
72242: PUSH
72243: LD_VAR 0 8
72247: PPUSH
72248: LD_INT 5
72250: PPUSH
72251: LD_INT 4
72253: PPUSH
72254: CALL_OW 273
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: ST_TO_ADDR
// for i = tmp downto 1 do
72271: LD_ADDR_VAR 0 4
72275: PUSH
72276: DOUBLE
72277: LD_VAR 0 6
72281: INC
72282: ST_TO_ADDR
72283: LD_INT 1
72285: PUSH
72286: FOR_DOWNTO
72287: IFFALSE 72388
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72289: LD_VAR 0 6
72293: PUSH
72294: LD_VAR 0 4
72298: ARRAY
72299: PUSH
72300: LD_INT 1
72302: ARRAY
72303: PPUSH
72304: LD_VAR 0 6
72308: PUSH
72309: LD_VAR 0 4
72313: ARRAY
72314: PUSH
72315: LD_INT 2
72317: ARRAY
72318: PPUSH
72319: CALL_OW 488
72323: NOT
72324: PUSH
72325: LD_VAR 0 6
72329: PUSH
72330: LD_VAR 0 4
72334: ARRAY
72335: PUSH
72336: LD_INT 1
72338: ARRAY
72339: PPUSH
72340: LD_VAR 0 6
72344: PUSH
72345: LD_VAR 0 4
72349: ARRAY
72350: PUSH
72351: LD_INT 2
72353: ARRAY
72354: PPUSH
72355: CALL_OW 428
72359: PUSH
72360: LD_INT 0
72362: NONEQUAL
72363: OR
72364: IFFALSE 72386
// tmp := Delete ( tmp , i ) ;
72366: LD_ADDR_VAR 0 6
72370: PUSH
72371: LD_VAR 0 6
72375: PPUSH
72376: LD_VAR 0 4
72380: PPUSH
72381: CALL_OW 3
72385: ST_TO_ADDR
72386: GO 72286
72388: POP
72389: POP
// j := GetClosestHex ( unit , tmp ) ;
72390: LD_ADDR_VAR 0 5
72394: PUSH
72395: LD_VAR 0 1
72399: PPUSH
72400: LD_VAR 0 6
72404: PPUSH
72405: CALL 71681 0 2
72409: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72410: LD_VAR 0 1
72414: PPUSH
72415: LD_VAR 0 5
72419: PUSH
72420: LD_INT 1
72422: ARRAY
72423: PPUSH
72424: LD_VAR 0 5
72428: PUSH
72429: LD_INT 2
72431: ARRAY
72432: PPUSH
72433: CALL_OW 111
// end ;
72437: LD_VAR 0 3
72441: RET
// export function PrepareApemanSoldier ( ) ; begin
72442: LD_INT 0
72444: PPUSH
// uc_nation := 0 ;
72445: LD_ADDR_OWVAR 21
72449: PUSH
72450: LD_INT 0
72452: ST_TO_ADDR
// hc_sex := sex_male ;
72453: LD_ADDR_OWVAR 27
72457: PUSH
72458: LD_INT 1
72460: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72461: LD_ADDR_OWVAR 28
72465: PUSH
72466: LD_INT 15
72468: ST_TO_ADDR
// hc_gallery :=  ;
72469: LD_ADDR_OWVAR 33
72473: PUSH
72474: LD_STRING 
72476: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72477: LD_ADDR_OWVAR 31
72481: PUSH
72482: LD_INT 0
72484: PPUSH
72485: LD_INT 3
72487: PPUSH
72488: CALL_OW 12
72492: PUSH
72493: LD_INT 0
72495: PPUSH
72496: LD_INT 3
72498: PPUSH
72499: CALL_OW 12
72503: PUSH
72504: LD_INT 0
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: ST_TO_ADDR
// end ;
72516: LD_VAR 0 1
72520: RET
// export function PrepareApemanEngineer ( ) ; begin
72521: LD_INT 0
72523: PPUSH
// uc_nation := 0 ;
72524: LD_ADDR_OWVAR 21
72528: PUSH
72529: LD_INT 0
72531: ST_TO_ADDR
// hc_sex := sex_male ;
72532: LD_ADDR_OWVAR 27
72536: PUSH
72537: LD_INT 1
72539: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72540: LD_ADDR_OWVAR 28
72544: PUSH
72545: LD_INT 16
72547: ST_TO_ADDR
// hc_gallery :=  ;
72548: LD_ADDR_OWVAR 33
72552: PUSH
72553: LD_STRING 
72555: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72556: LD_ADDR_OWVAR 31
72560: PUSH
72561: LD_INT 0
72563: PPUSH
72564: LD_INT 3
72566: PPUSH
72567: CALL_OW 12
72571: PUSH
72572: LD_INT 0
72574: PPUSH
72575: LD_INT 3
72577: PPUSH
72578: CALL_OW 12
72582: PUSH
72583: LD_INT 0
72585: PUSH
72586: LD_INT 0
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: ST_TO_ADDR
// end ;
72595: LD_VAR 0 1
72599: RET
// export function PrepareApeman ( agressivity ) ; begin
72600: LD_INT 0
72602: PPUSH
// uc_side := 0 ;
72603: LD_ADDR_OWVAR 20
72607: PUSH
72608: LD_INT 0
72610: ST_TO_ADDR
// uc_nation := 0 ;
72611: LD_ADDR_OWVAR 21
72615: PUSH
72616: LD_INT 0
72618: ST_TO_ADDR
// hc_sex := sex_male ;
72619: LD_ADDR_OWVAR 27
72623: PUSH
72624: LD_INT 1
72626: ST_TO_ADDR
// hc_class := class_apeman ;
72627: LD_ADDR_OWVAR 28
72631: PUSH
72632: LD_INT 12
72634: ST_TO_ADDR
// hc_gallery :=  ;
72635: LD_ADDR_OWVAR 33
72639: PUSH
72640: LD_STRING 
72642: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72643: LD_ADDR_OWVAR 35
72647: PUSH
72648: LD_VAR 0 1
72652: NEG
72653: PPUSH
72654: LD_VAR 0 1
72658: PPUSH
72659: CALL_OW 12
72663: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72664: LD_ADDR_OWVAR 31
72668: PUSH
72669: LD_INT 0
72671: PPUSH
72672: LD_INT 3
72674: PPUSH
72675: CALL_OW 12
72679: PUSH
72680: LD_INT 0
72682: PPUSH
72683: LD_INT 3
72685: PPUSH
72686: CALL_OW 12
72690: PUSH
72691: LD_INT 0
72693: PUSH
72694: LD_INT 0
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: ST_TO_ADDR
// end ;
72703: LD_VAR 0 2
72707: RET
// export function PrepareTiger ( agressivity ) ; begin
72708: LD_INT 0
72710: PPUSH
// uc_side := 0 ;
72711: LD_ADDR_OWVAR 20
72715: PUSH
72716: LD_INT 0
72718: ST_TO_ADDR
// uc_nation := 0 ;
72719: LD_ADDR_OWVAR 21
72723: PUSH
72724: LD_INT 0
72726: ST_TO_ADDR
// hc_class := class_tiger ;
72727: LD_ADDR_OWVAR 28
72731: PUSH
72732: LD_INT 14
72734: ST_TO_ADDR
// hc_gallery :=  ;
72735: LD_ADDR_OWVAR 33
72739: PUSH
72740: LD_STRING 
72742: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72743: LD_ADDR_OWVAR 35
72747: PUSH
72748: LD_VAR 0 1
72752: NEG
72753: PPUSH
72754: LD_VAR 0 1
72758: PPUSH
72759: CALL_OW 12
72763: ST_TO_ADDR
// end ;
72764: LD_VAR 0 2
72768: RET
// export function PrepareEnchidna ( ) ; begin
72769: LD_INT 0
72771: PPUSH
// uc_side := 0 ;
72772: LD_ADDR_OWVAR 20
72776: PUSH
72777: LD_INT 0
72779: ST_TO_ADDR
// uc_nation := 0 ;
72780: LD_ADDR_OWVAR 21
72784: PUSH
72785: LD_INT 0
72787: ST_TO_ADDR
// hc_class := class_baggie ;
72788: LD_ADDR_OWVAR 28
72792: PUSH
72793: LD_INT 13
72795: ST_TO_ADDR
// hc_gallery :=  ;
72796: LD_ADDR_OWVAR 33
72800: PUSH
72801: LD_STRING 
72803: ST_TO_ADDR
// end ;
72804: LD_VAR 0 1
72808: RET
// export function PrepareFrog ( ) ; begin
72809: LD_INT 0
72811: PPUSH
// uc_side := 0 ;
72812: LD_ADDR_OWVAR 20
72816: PUSH
72817: LD_INT 0
72819: ST_TO_ADDR
// uc_nation := 0 ;
72820: LD_ADDR_OWVAR 21
72824: PUSH
72825: LD_INT 0
72827: ST_TO_ADDR
// hc_class := class_frog ;
72828: LD_ADDR_OWVAR 28
72832: PUSH
72833: LD_INT 19
72835: ST_TO_ADDR
// hc_gallery :=  ;
72836: LD_ADDR_OWVAR 33
72840: PUSH
72841: LD_STRING 
72843: ST_TO_ADDR
// end ;
72844: LD_VAR 0 1
72848: RET
// export function PrepareFish ( ) ; begin
72849: LD_INT 0
72851: PPUSH
// uc_side := 0 ;
72852: LD_ADDR_OWVAR 20
72856: PUSH
72857: LD_INT 0
72859: ST_TO_ADDR
// uc_nation := 0 ;
72860: LD_ADDR_OWVAR 21
72864: PUSH
72865: LD_INT 0
72867: ST_TO_ADDR
// hc_class := class_fish ;
72868: LD_ADDR_OWVAR 28
72872: PUSH
72873: LD_INT 20
72875: ST_TO_ADDR
// hc_gallery :=  ;
72876: LD_ADDR_OWVAR 33
72880: PUSH
72881: LD_STRING 
72883: ST_TO_ADDR
// end ;
72884: LD_VAR 0 1
72888: RET
// export function PrepareBird ( ) ; begin
72889: LD_INT 0
72891: PPUSH
// uc_side := 0 ;
72892: LD_ADDR_OWVAR 20
72896: PUSH
72897: LD_INT 0
72899: ST_TO_ADDR
// uc_nation := 0 ;
72900: LD_ADDR_OWVAR 21
72904: PUSH
72905: LD_INT 0
72907: ST_TO_ADDR
// hc_class := class_phororhacos ;
72908: LD_ADDR_OWVAR 28
72912: PUSH
72913: LD_INT 18
72915: ST_TO_ADDR
// hc_gallery :=  ;
72916: LD_ADDR_OWVAR 33
72920: PUSH
72921: LD_STRING 
72923: ST_TO_ADDR
// end ;
72924: LD_VAR 0 1
72928: RET
// export function PrepareHorse ( ) ; begin
72929: LD_INT 0
72931: PPUSH
// uc_side := 0 ;
72932: LD_ADDR_OWVAR 20
72936: PUSH
72937: LD_INT 0
72939: ST_TO_ADDR
// uc_nation := 0 ;
72940: LD_ADDR_OWVAR 21
72944: PUSH
72945: LD_INT 0
72947: ST_TO_ADDR
// hc_class := class_horse ;
72948: LD_ADDR_OWVAR 28
72952: PUSH
72953: LD_INT 21
72955: ST_TO_ADDR
// hc_gallery :=  ;
72956: LD_ADDR_OWVAR 33
72960: PUSH
72961: LD_STRING 
72963: ST_TO_ADDR
// end ;
72964: LD_VAR 0 1
72968: RET
// export function PrepareMastodont ( ) ; begin
72969: LD_INT 0
72971: PPUSH
// uc_side := 0 ;
72972: LD_ADDR_OWVAR 20
72976: PUSH
72977: LD_INT 0
72979: ST_TO_ADDR
// uc_nation := 0 ;
72980: LD_ADDR_OWVAR 21
72984: PUSH
72985: LD_INT 0
72987: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72988: LD_ADDR_OWVAR 37
72992: PUSH
72993: LD_INT 31
72995: ST_TO_ADDR
// vc_control := control_rider ;
72996: LD_ADDR_OWVAR 38
73000: PUSH
73001: LD_INT 4
73003: ST_TO_ADDR
// end ;
73004: LD_VAR 0 1
73008: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73009: LD_INT 0
73011: PPUSH
73012: PPUSH
73013: PPUSH
// uc_side = 0 ;
73014: LD_ADDR_OWVAR 20
73018: PUSH
73019: LD_INT 0
73021: ST_TO_ADDR
// uc_nation = 0 ;
73022: LD_ADDR_OWVAR 21
73026: PUSH
73027: LD_INT 0
73029: ST_TO_ADDR
// InitHc_All ( ) ;
73030: CALL_OW 584
// InitVc ;
73034: CALL_OW 20
// if mastodonts then
73038: LD_VAR 0 6
73042: IFFALSE 73109
// for i = 1 to mastodonts do
73044: LD_ADDR_VAR 0 11
73048: PUSH
73049: DOUBLE
73050: LD_INT 1
73052: DEC
73053: ST_TO_ADDR
73054: LD_VAR 0 6
73058: PUSH
73059: FOR_TO
73060: IFFALSE 73107
// begin vc_chassis := 31 ;
73062: LD_ADDR_OWVAR 37
73066: PUSH
73067: LD_INT 31
73069: ST_TO_ADDR
// vc_control := control_rider ;
73070: LD_ADDR_OWVAR 38
73074: PUSH
73075: LD_INT 4
73077: ST_TO_ADDR
// animal := CreateVehicle ;
73078: LD_ADDR_VAR 0 12
73082: PUSH
73083: CALL_OW 45
73087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73088: LD_VAR 0 12
73092: PPUSH
73093: LD_VAR 0 8
73097: PPUSH
73098: LD_INT 0
73100: PPUSH
73101: CALL 75237 0 3
// end ;
73105: GO 73059
73107: POP
73108: POP
// if horses then
73109: LD_VAR 0 5
73113: IFFALSE 73180
// for i = 1 to horses do
73115: LD_ADDR_VAR 0 11
73119: PUSH
73120: DOUBLE
73121: LD_INT 1
73123: DEC
73124: ST_TO_ADDR
73125: LD_VAR 0 5
73129: PUSH
73130: FOR_TO
73131: IFFALSE 73178
// begin hc_class := 21 ;
73133: LD_ADDR_OWVAR 28
73137: PUSH
73138: LD_INT 21
73140: ST_TO_ADDR
// hc_gallery :=  ;
73141: LD_ADDR_OWVAR 33
73145: PUSH
73146: LD_STRING 
73148: ST_TO_ADDR
// animal := CreateHuman ;
73149: LD_ADDR_VAR 0 12
73153: PUSH
73154: CALL_OW 44
73158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73159: LD_VAR 0 12
73163: PPUSH
73164: LD_VAR 0 8
73168: PPUSH
73169: LD_INT 0
73171: PPUSH
73172: CALL 75237 0 3
// end ;
73176: GO 73130
73178: POP
73179: POP
// if birds then
73180: LD_VAR 0 1
73184: IFFALSE 73251
// for i = 1 to birds do
73186: LD_ADDR_VAR 0 11
73190: PUSH
73191: DOUBLE
73192: LD_INT 1
73194: DEC
73195: ST_TO_ADDR
73196: LD_VAR 0 1
73200: PUSH
73201: FOR_TO
73202: IFFALSE 73249
// begin hc_class = 18 ;
73204: LD_ADDR_OWVAR 28
73208: PUSH
73209: LD_INT 18
73211: ST_TO_ADDR
// hc_gallery =  ;
73212: LD_ADDR_OWVAR 33
73216: PUSH
73217: LD_STRING 
73219: ST_TO_ADDR
// animal := CreateHuman ;
73220: LD_ADDR_VAR 0 12
73224: PUSH
73225: CALL_OW 44
73229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73230: LD_VAR 0 12
73234: PPUSH
73235: LD_VAR 0 8
73239: PPUSH
73240: LD_INT 0
73242: PPUSH
73243: CALL 75237 0 3
// end ;
73247: GO 73201
73249: POP
73250: POP
// if tigers then
73251: LD_VAR 0 2
73255: IFFALSE 73339
// for i = 1 to tigers do
73257: LD_ADDR_VAR 0 11
73261: PUSH
73262: DOUBLE
73263: LD_INT 1
73265: DEC
73266: ST_TO_ADDR
73267: LD_VAR 0 2
73271: PUSH
73272: FOR_TO
73273: IFFALSE 73337
// begin hc_class = class_tiger ;
73275: LD_ADDR_OWVAR 28
73279: PUSH
73280: LD_INT 14
73282: ST_TO_ADDR
// hc_gallery =  ;
73283: LD_ADDR_OWVAR 33
73287: PUSH
73288: LD_STRING 
73290: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73291: LD_ADDR_OWVAR 35
73295: PUSH
73296: LD_INT 7
73298: NEG
73299: PPUSH
73300: LD_INT 7
73302: PPUSH
73303: CALL_OW 12
73307: ST_TO_ADDR
// animal := CreateHuman ;
73308: LD_ADDR_VAR 0 12
73312: PUSH
73313: CALL_OW 44
73317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73318: LD_VAR 0 12
73322: PPUSH
73323: LD_VAR 0 8
73327: PPUSH
73328: LD_INT 0
73330: PPUSH
73331: CALL 75237 0 3
// end ;
73335: GO 73272
73337: POP
73338: POP
// if apemans then
73339: LD_VAR 0 3
73343: IFFALSE 73466
// for i = 1 to apemans do
73345: LD_ADDR_VAR 0 11
73349: PUSH
73350: DOUBLE
73351: LD_INT 1
73353: DEC
73354: ST_TO_ADDR
73355: LD_VAR 0 3
73359: PUSH
73360: FOR_TO
73361: IFFALSE 73464
// begin hc_class = class_apeman ;
73363: LD_ADDR_OWVAR 28
73367: PUSH
73368: LD_INT 12
73370: ST_TO_ADDR
// hc_gallery =  ;
73371: LD_ADDR_OWVAR 33
73375: PUSH
73376: LD_STRING 
73378: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73379: LD_ADDR_OWVAR 35
73383: PUSH
73384: LD_INT 2
73386: NEG
73387: PPUSH
73388: LD_INT 2
73390: PPUSH
73391: CALL_OW 12
73395: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73396: LD_ADDR_OWVAR 31
73400: PUSH
73401: LD_INT 1
73403: PPUSH
73404: LD_INT 3
73406: PPUSH
73407: CALL_OW 12
73411: PUSH
73412: LD_INT 1
73414: PPUSH
73415: LD_INT 3
73417: PPUSH
73418: CALL_OW 12
73422: PUSH
73423: LD_INT 0
73425: PUSH
73426: LD_INT 0
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: ST_TO_ADDR
// animal := CreateHuman ;
73435: LD_ADDR_VAR 0 12
73439: PUSH
73440: CALL_OW 44
73444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73445: LD_VAR 0 12
73449: PPUSH
73450: LD_VAR 0 8
73454: PPUSH
73455: LD_INT 0
73457: PPUSH
73458: CALL 75237 0 3
// end ;
73462: GO 73360
73464: POP
73465: POP
// if enchidnas then
73466: LD_VAR 0 4
73470: IFFALSE 73537
// for i = 1 to enchidnas do
73472: LD_ADDR_VAR 0 11
73476: PUSH
73477: DOUBLE
73478: LD_INT 1
73480: DEC
73481: ST_TO_ADDR
73482: LD_VAR 0 4
73486: PUSH
73487: FOR_TO
73488: IFFALSE 73535
// begin hc_class = 13 ;
73490: LD_ADDR_OWVAR 28
73494: PUSH
73495: LD_INT 13
73497: ST_TO_ADDR
// hc_gallery =  ;
73498: LD_ADDR_OWVAR 33
73502: PUSH
73503: LD_STRING 
73505: ST_TO_ADDR
// animal := CreateHuman ;
73506: LD_ADDR_VAR 0 12
73510: PUSH
73511: CALL_OW 44
73515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73516: LD_VAR 0 12
73520: PPUSH
73521: LD_VAR 0 8
73525: PPUSH
73526: LD_INT 0
73528: PPUSH
73529: CALL 75237 0 3
// end ;
73533: GO 73487
73535: POP
73536: POP
// if fishes then
73537: LD_VAR 0 7
73541: IFFALSE 73608
// for i = 1 to fishes do
73543: LD_ADDR_VAR 0 11
73547: PUSH
73548: DOUBLE
73549: LD_INT 1
73551: DEC
73552: ST_TO_ADDR
73553: LD_VAR 0 7
73557: PUSH
73558: FOR_TO
73559: IFFALSE 73606
// begin hc_class = 20 ;
73561: LD_ADDR_OWVAR 28
73565: PUSH
73566: LD_INT 20
73568: ST_TO_ADDR
// hc_gallery =  ;
73569: LD_ADDR_OWVAR 33
73573: PUSH
73574: LD_STRING 
73576: ST_TO_ADDR
// animal := CreateHuman ;
73577: LD_ADDR_VAR 0 12
73581: PUSH
73582: CALL_OW 44
73586: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73587: LD_VAR 0 12
73591: PPUSH
73592: LD_VAR 0 9
73596: PPUSH
73597: LD_INT 0
73599: PPUSH
73600: CALL 75237 0 3
// end ;
73604: GO 73558
73606: POP
73607: POP
// end ;
73608: LD_VAR 0 10
73612: RET
// export function WantHeal ( sci , unit ) ; begin
73613: LD_INT 0
73615: PPUSH
// if GetTaskList ( sci ) > 0 then
73616: LD_VAR 0 1
73620: PPUSH
73621: CALL_OW 437
73625: PUSH
73626: LD_INT 0
73628: GREATER
73629: IFFALSE 73699
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73631: LD_VAR 0 1
73635: PPUSH
73636: CALL_OW 437
73640: PUSH
73641: LD_INT 1
73643: ARRAY
73644: PUSH
73645: LD_INT 1
73647: ARRAY
73648: PUSH
73649: LD_STRING l
73651: EQUAL
73652: PUSH
73653: LD_VAR 0 1
73657: PPUSH
73658: CALL_OW 437
73662: PUSH
73663: LD_INT 1
73665: ARRAY
73666: PUSH
73667: LD_INT 4
73669: ARRAY
73670: PUSH
73671: LD_VAR 0 2
73675: EQUAL
73676: AND
73677: IFFALSE 73689
// result := true else
73679: LD_ADDR_VAR 0 3
73683: PUSH
73684: LD_INT 1
73686: ST_TO_ADDR
73687: GO 73697
// result := false ;
73689: LD_ADDR_VAR 0 3
73693: PUSH
73694: LD_INT 0
73696: ST_TO_ADDR
// end else
73697: GO 73707
// result := false ;
73699: LD_ADDR_VAR 0 3
73703: PUSH
73704: LD_INT 0
73706: ST_TO_ADDR
// end ;
73707: LD_VAR 0 3
73711: RET
// export function HealTarget ( sci ) ; begin
73712: LD_INT 0
73714: PPUSH
// if not sci then
73715: LD_VAR 0 1
73719: NOT
73720: IFFALSE 73724
// exit ;
73722: GO 73789
// result := 0 ;
73724: LD_ADDR_VAR 0 2
73728: PUSH
73729: LD_INT 0
73731: ST_TO_ADDR
// if GetTaskList ( sci ) then
73732: LD_VAR 0 1
73736: PPUSH
73737: CALL_OW 437
73741: IFFALSE 73789
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73743: LD_VAR 0 1
73747: PPUSH
73748: CALL_OW 437
73752: PUSH
73753: LD_INT 1
73755: ARRAY
73756: PUSH
73757: LD_INT 1
73759: ARRAY
73760: PUSH
73761: LD_STRING l
73763: EQUAL
73764: IFFALSE 73789
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73766: LD_ADDR_VAR 0 2
73770: PUSH
73771: LD_VAR 0 1
73775: PPUSH
73776: CALL_OW 437
73780: PUSH
73781: LD_INT 1
73783: ARRAY
73784: PUSH
73785: LD_INT 4
73787: ARRAY
73788: ST_TO_ADDR
// end ;
73789: LD_VAR 0 2
73793: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73794: LD_INT 0
73796: PPUSH
73797: PPUSH
73798: PPUSH
73799: PPUSH
// if not base_units then
73800: LD_VAR 0 1
73804: NOT
73805: IFFALSE 73809
// exit ;
73807: GO 73896
// result := false ;
73809: LD_ADDR_VAR 0 2
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73817: LD_ADDR_VAR 0 5
73821: PUSH
73822: LD_VAR 0 1
73826: PPUSH
73827: LD_INT 21
73829: PUSH
73830: LD_INT 3
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PPUSH
73837: CALL_OW 72
73841: ST_TO_ADDR
// if not tmp then
73842: LD_VAR 0 5
73846: NOT
73847: IFFALSE 73851
// exit ;
73849: GO 73896
// for i in tmp do
73851: LD_ADDR_VAR 0 3
73855: PUSH
73856: LD_VAR 0 5
73860: PUSH
73861: FOR_IN
73862: IFFALSE 73894
// begin result := EnemyInRange ( i , 22 ) ;
73864: LD_ADDR_VAR 0 2
73868: PUSH
73869: LD_VAR 0 3
73873: PPUSH
73874: LD_INT 22
73876: PPUSH
73877: CALL 71483 0 2
73881: ST_TO_ADDR
// if result then
73882: LD_VAR 0 2
73886: IFFALSE 73892
// exit ;
73888: POP
73889: POP
73890: GO 73896
// end ;
73892: GO 73861
73894: POP
73895: POP
// end ;
73896: LD_VAR 0 2
73900: RET
// export function FilterByTag ( units , tag ) ; begin
73901: LD_INT 0
73903: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73904: LD_ADDR_VAR 0 3
73908: PUSH
73909: LD_VAR 0 1
73913: PPUSH
73914: LD_INT 120
73916: PUSH
73917: LD_VAR 0 2
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PPUSH
73926: CALL_OW 72
73930: ST_TO_ADDR
// end ;
73931: LD_VAR 0 3
73935: RET
// export function IsDriver ( un ) ; begin
73936: LD_INT 0
73938: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73939: LD_ADDR_VAR 0 2
73943: PUSH
73944: LD_VAR 0 1
73948: PUSH
73949: LD_INT 55
73951: PUSH
73952: EMPTY
73953: LIST
73954: PPUSH
73955: CALL_OW 69
73959: IN
73960: ST_TO_ADDR
// end ;
73961: LD_VAR 0 2
73965: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73966: LD_INT 0
73968: PPUSH
73969: PPUSH
// list := [ ] ;
73970: LD_ADDR_VAR 0 5
73974: PUSH
73975: EMPTY
73976: ST_TO_ADDR
// case d of 0 :
73977: LD_VAR 0 3
73981: PUSH
73982: LD_INT 0
73984: DOUBLE
73985: EQUAL
73986: IFTRUE 73990
73988: GO 74123
73990: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73991: LD_ADDR_VAR 0 5
73995: PUSH
73996: LD_VAR 0 1
74000: PUSH
74001: LD_INT 4
74003: MINUS
74004: PUSH
74005: LD_VAR 0 2
74009: PUSH
74010: LD_INT 4
74012: MINUS
74013: PUSH
74014: LD_INT 2
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: LIST
74021: PUSH
74022: LD_VAR 0 1
74026: PUSH
74027: LD_INT 3
74029: MINUS
74030: PUSH
74031: LD_VAR 0 2
74035: PUSH
74036: LD_INT 1
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: LIST
74043: PUSH
74044: LD_VAR 0 1
74048: PUSH
74049: LD_INT 4
74051: PLUS
74052: PUSH
74053: LD_VAR 0 2
74057: PUSH
74058: LD_INT 4
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: LIST
74065: PUSH
74066: LD_VAR 0 1
74070: PUSH
74071: LD_INT 3
74073: PLUS
74074: PUSH
74075: LD_VAR 0 2
74079: PUSH
74080: LD_INT 3
74082: PLUS
74083: PUSH
74084: LD_INT 5
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: LIST
74091: PUSH
74092: LD_VAR 0 1
74096: PUSH
74097: LD_VAR 0 2
74101: PUSH
74102: LD_INT 4
74104: PLUS
74105: PUSH
74106: LD_INT 0
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: LIST
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: ST_TO_ADDR
// end ; 1 :
74121: GO 74821
74123: LD_INT 1
74125: DOUBLE
74126: EQUAL
74127: IFTRUE 74131
74129: GO 74264
74131: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74132: LD_ADDR_VAR 0 5
74136: PUSH
74137: LD_VAR 0 1
74141: PUSH
74142: LD_VAR 0 2
74146: PUSH
74147: LD_INT 4
74149: MINUS
74150: PUSH
74151: LD_INT 3
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: LIST
74158: PUSH
74159: LD_VAR 0 1
74163: PUSH
74164: LD_INT 3
74166: MINUS
74167: PUSH
74168: LD_VAR 0 2
74172: PUSH
74173: LD_INT 3
74175: MINUS
74176: PUSH
74177: LD_INT 2
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: LIST
74184: PUSH
74185: LD_VAR 0 1
74189: PUSH
74190: LD_INT 4
74192: MINUS
74193: PUSH
74194: LD_VAR 0 2
74198: PUSH
74199: LD_INT 1
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: LIST
74206: PUSH
74207: LD_VAR 0 1
74211: PUSH
74212: LD_VAR 0 2
74216: PUSH
74217: LD_INT 3
74219: PLUS
74220: PUSH
74221: LD_INT 0
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: LIST
74228: PUSH
74229: LD_VAR 0 1
74233: PUSH
74234: LD_INT 4
74236: PLUS
74237: PUSH
74238: LD_VAR 0 2
74242: PUSH
74243: LD_INT 4
74245: PLUS
74246: PUSH
74247: LD_INT 5
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: LIST
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: ST_TO_ADDR
// end ; 2 :
74262: GO 74821
74264: LD_INT 2
74266: DOUBLE
74267: EQUAL
74268: IFTRUE 74272
74270: GO 74401
74272: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74273: LD_ADDR_VAR 0 5
74277: PUSH
74278: LD_VAR 0 1
74282: PUSH
74283: LD_VAR 0 2
74287: PUSH
74288: LD_INT 3
74290: MINUS
74291: PUSH
74292: LD_INT 3
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: LIST
74299: PUSH
74300: LD_VAR 0 1
74304: PUSH
74305: LD_INT 4
74307: PLUS
74308: PUSH
74309: LD_VAR 0 2
74313: PUSH
74314: LD_INT 4
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: LIST
74321: PUSH
74322: LD_VAR 0 1
74326: PUSH
74327: LD_VAR 0 2
74331: PUSH
74332: LD_INT 4
74334: PLUS
74335: PUSH
74336: LD_INT 0
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: LIST
74343: PUSH
74344: LD_VAR 0 1
74348: PUSH
74349: LD_INT 3
74351: MINUS
74352: PUSH
74353: LD_VAR 0 2
74357: PUSH
74358: LD_INT 1
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: LIST
74365: PUSH
74366: LD_VAR 0 1
74370: PUSH
74371: LD_INT 4
74373: MINUS
74374: PUSH
74375: LD_VAR 0 2
74379: PUSH
74380: LD_INT 4
74382: MINUS
74383: PUSH
74384: LD_INT 2
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: LIST
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: ST_TO_ADDR
// end ; 3 :
74399: GO 74821
74401: LD_INT 3
74403: DOUBLE
74404: EQUAL
74405: IFTRUE 74409
74407: GO 74542
74409: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74410: LD_ADDR_VAR 0 5
74414: PUSH
74415: LD_VAR 0 1
74419: PUSH
74420: LD_INT 3
74422: PLUS
74423: PUSH
74424: LD_VAR 0 2
74428: PUSH
74429: LD_INT 4
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: LIST
74436: PUSH
74437: LD_VAR 0 1
74441: PUSH
74442: LD_INT 4
74444: PLUS
74445: PUSH
74446: LD_VAR 0 2
74450: PUSH
74451: LD_INT 4
74453: PLUS
74454: PUSH
74455: LD_INT 5
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: LIST
74462: PUSH
74463: LD_VAR 0 1
74467: PUSH
74468: LD_INT 4
74470: MINUS
74471: PUSH
74472: LD_VAR 0 2
74476: PUSH
74477: LD_INT 1
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: LIST
74484: PUSH
74485: LD_VAR 0 1
74489: PUSH
74490: LD_VAR 0 2
74494: PUSH
74495: LD_INT 4
74497: MINUS
74498: PUSH
74499: LD_INT 3
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: LIST
74506: PUSH
74507: LD_VAR 0 1
74511: PUSH
74512: LD_INT 3
74514: MINUS
74515: PUSH
74516: LD_VAR 0 2
74520: PUSH
74521: LD_INT 3
74523: MINUS
74524: PUSH
74525: LD_INT 2
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: LIST
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: ST_TO_ADDR
// end ; 4 :
74540: GO 74821
74542: LD_INT 4
74544: DOUBLE
74545: EQUAL
74546: IFTRUE 74550
74548: GO 74683
74550: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74551: LD_ADDR_VAR 0 5
74555: PUSH
74556: LD_VAR 0 1
74560: PUSH
74561: LD_VAR 0 2
74565: PUSH
74566: LD_INT 4
74568: PLUS
74569: PUSH
74570: LD_INT 0
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: LIST
74577: PUSH
74578: LD_VAR 0 1
74582: PUSH
74583: LD_INT 3
74585: PLUS
74586: PUSH
74587: LD_VAR 0 2
74591: PUSH
74592: LD_INT 3
74594: PLUS
74595: PUSH
74596: LD_INT 5
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: LIST
74603: PUSH
74604: LD_VAR 0 1
74608: PUSH
74609: LD_INT 4
74611: PLUS
74612: PUSH
74613: LD_VAR 0 2
74617: PUSH
74618: LD_INT 4
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: LIST
74625: PUSH
74626: LD_VAR 0 1
74630: PUSH
74631: LD_VAR 0 2
74635: PUSH
74636: LD_INT 3
74638: MINUS
74639: PUSH
74640: LD_INT 3
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: LIST
74647: PUSH
74648: LD_VAR 0 1
74652: PUSH
74653: LD_INT 4
74655: MINUS
74656: PUSH
74657: LD_VAR 0 2
74661: PUSH
74662: LD_INT 4
74664: MINUS
74665: PUSH
74666: LD_INT 2
74668: PUSH
74669: EMPTY
74670: LIST
74671: LIST
74672: LIST
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: ST_TO_ADDR
// end ; 5 :
74681: GO 74821
74683: LD_INT 5
74685: DOUBLE
74686: EQUAL
74687: IFTRUE 74691
74689: GO 74820
74691: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74692: LD_ADDR_VAR 0 5
74696: PUSH
74697: LD_VAR 0 1
74701: PUSH
74702: LD_INT 4
74704: MINUS
74705: PUSH
74706: LD_VAR 0 2
74710: PUSH
74711: LD_INT 1
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: LIST
74718: PUSH
74719: LD_VAR 0 1
74723: PUSH
74724: LD_VAR 0 2
74728: PUSH
74729: LD_INT 4
74731: MINUS
74732: PUSH
74733: LD_INT 3
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: LIST
74740: PUSH
74741: LD_VAR 0 1
74745: PUSH
74746: LD_INT 4
74748: PLUS
74749: PUSH
74750: LD_VAR 0 2
74754: PUSH
74755: LD_INT 4
74757: PLUS
74758: PUSH
74759: LD_INT 5
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: LIST
74766: PUSH
74767: LD_VAR 0 1
74771: PUSH
74772: LD_INT 3
74774: PLUS
74775: PUSH
74776: LD_VAR 0 2
74780: PUSH
74781: LD_INT 4
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: LIST
74788: PUSH
74789: LD_VAR 0 1
74793: PUSH
74794: LD_VAR 0 2
74798: PUSH
74799: LD_INT 3
74801: PLUS
74802: PUSH
74803: LD_INT 0
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: LIST
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: ST_TO_ADDR
// end ; end ;
74818: GO 74821
74820: POP
// result := list ;
74821: LD_ADDR_VAR 0 4
74825: PUSH
74826: LD_VAR 0 5
74830: ST_TO_ADDR
// end ;
74831: LD_VAR 0 4
74835: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74836: LD_INT 0
74838: PPUSH
74839: PPUSH
74840: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74841: LD_VAR 0 1
74845: NOT
74846: PUSH
74847: LD_VAR 0 2
74851: PUSH
74852: LD_INT 1
74854: PUSH
74855: LD_INT 2
74857: PUSH
74858: LD_INT 3
74860: PUSH
74861: LD_INT 4
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: IN
74870: NOT
74871: OR
74872: IFFALSE 74876
// exit ;
74874: GO 74959
// tmp := [ ] ;
74876: LD_ADDR_VAR 0 5
74880: PUSH
74881: EMPTY
74882: ST_TO_ADDR
// for i in units do
74883: LD_ADDR_VAR 0 4
74887: PUSH
74888: LD_VAR 0 1
74892: PUSH
74893: FOR_IN
74894: IFFALSE 74928
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74896: LD_ADDR_VAR 0 5
74900: PUSH
74901: LD_VAR 0 5
74905: PPUSH
74906: LD_VAR 0 4
74910: PPUSH
74911: LD_VAR 0 2
74915: PPUSH
74916: CALL_OW 259
74920: PPUSH
74921: CALL 76320 0 2
74925: ST_TO_ADDR
74926: GO 74893
74928: POP
74929: POP
// if not tmp then
74930: LD_VAR 0 5
74934: NOT
74935: IFFALSE 74939
// exit ;
74937: GO 74959
// result := SortListByListDesc ( units , tmp ) ;
74939: LD_ADDR_VAR 0 3
74943: PUSH
74944: LD_VAR 0 1
74948: PPUSH
74949: LD_VAR 0 5
74953: PPUSH
74954: CALL_OW 77
74958: ST_TO_ADDR
// end ;
74959: LD_VAR 0 3
74963: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74964: LD_INT 0
74966: PPUSH
74967: PPUSH
74968: PPUSH
// result := false ;
74969: LD_ADDR_VAR 0 3
74973: PUSH
74974: LD_INT 0
74976: ST_TO_ADDR
// if not building then
74977: LD_VAR 0 2
74981: NOT
74982: IFFALSE 74986
// exit ;
74984: GO 75124
// x := GetX ( building ) ;
74986: LD_ADDR_VAR 0 4
74990: PUSH
74991: LD_VAR 0 2
74995: PPUSH
74996: CALL_OW 250
75000: ST_TO_ADDR
// y := GetY ( building ) ;
75001: LD_ADDR_VAR 0 5
75005: PUSH
75006: LD_VAR 0 2
75010: PPUSH
75011: CALL_OW 251
75015: ST_TO_ADDR
// if not x or not y then
75016: LD_VAR 0 4
75020: NOT
75021: PUSH
75022: LD_VAR 0 5
75026: NOT
75027: OR
75028: IFFALSE 75032
// exit ;
75030: GO 75124
// if GetTaskList ( unit ) then
75032: LD_VAR 0 1
75036: PPUSH
75037: CALL_OW 437
75041: IFFALSE 75124
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75043: LD_STRING e
75045: PUSH
75046: LD_VAR 0 1
75050: PPUSH
75051: CALL_OW 437
75055: PUSH
75056: LD_INT 1
75058: ARRAY
75059: PUSH
75060: LD_INT 1
75062: ARRAY
75063: EQUAL
75064: PUSH
75065: LD_VAR 0 4
75069: PUSH
75070: LD_VAR 0 1
75074: PPUSH
75075: CALL_OW 437
75079: PUSH
75080: LD_INT 1
75082: ARRAY
75083: PUSH
75084: LD_INT 2
75086: ARRAY
75087: EQUAL
75088: AND
75089: PUSH
75090: LD_VAR 0 5
75094: PUSH
75095: LD_VAR 0 1
75099: PPUSH
75100: CALL_OW 437
75104: PUSH
75105: LD_INT 1
75107: ARRAY
75108: PUSH
75109: LD_INT 3
75111: ARRAY
75112: EQUAL
75113: AND
75114: IFFALSE 75124
// result := true end ;
75116: LD_ADDR_VAR 0 3
75120: PUSH
75121: LD_INT 1
75123: ST_TO_ADDR
// end ;
75124: LD_VAR 0 3
75128: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75129: LD_INT 0
75131: PPUSH
// result := false ;
75132: LD_ADDR_VAR 0 4
75136: PUSH
75137: LD_INT 0
75139: ST_TO_ADDR
// if GetTaskList ( unit ) then
75140: LD_VAR 0 1
75144: PPUSH
75145: CALL_OW 437
75149: IFFALSE 75232
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75151: LD_STRING M
75153: PUSH
75154: LD_VAR 0 1
75158: PPUSH
75159: CALL_OW 437
75163: PUSH
75164: LD_INT 1
75166: ARRAY
75167: PUSH
75168: LD_INT 1
75170: ARRAY
75171: EQUAL
75172: PUSH
75173: LD_VAR 0 2
75177: PUSH
75178: LD_VAR 0 1
75182: PPUSH
75183: CALL_OW 437
75187: PUSH
75188: LD_INT 1
75190: ARRAY
75191: PUSH
75192: LD_INT 2
75194: ARRAY
75195: EQUAL
75196: AND
75197: PUSH
75198: LD_VAR 0 3
75202: PUSH
75203: LD_VAR 0 1
75207: PPUSH
75208: CALL_OW 437
75212: PUSH
75213: LD_INT 1
75215: ARRAY
75216: PUSH
75217: LD_INT 3
75219: ARRAY
75220: EQUAL
75221: AND
75222: IFFALSE 75232
// result := true ;
75224: LD_ADDR_VAR 0 4
75228: PUSH
75229: LD_INT 1
75231: ST_TO_ADDR
// end ; end ;
75232: LD_VAR 0 4
75236: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75237: LD_INT 0
75239: PPUSH
75240: PPUSH
75241: PPUSH
75242: PPUSH
// if not unit or not area then
75243: LD_VAR 0 1
75247: NOT
75248: PUSH
75249: LD_VAR 0 2
75253: NOT
75254: OR
75255: IFFALSE 75259
// exit ;
75257: GO 75423
// tmp := AreaToList ( area , i ) ;
75259: LD_ADDR_VAR 0 6
75263: PUSH
75264: LD_VAR 0 2
75268: PPUSH
75269: LD_VAR 0 5
75273: PPUSH
75274: CALL_OW 517
75278: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75279: LD_ADDR_VAR 0 5
75283: PUSH
75284: DOUBLE
75285: LD_INT 1
75287: DEC
75288: ST_TO_ADDR
75289: LD_VAR 0 6
75293: PUSH
75294: LD_INT 1
75296: ARRAY
75297: PUSH
75298: FOR_TO
75299: IFFALSE 75421
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75301: LD_ADDR_VAR 0 7
75305: PUSH
75306: LD_VAR 0 6
75310: PUSH
75311: LD_INT 1
75313: ARRAY
75314: PUSH
75315: LD_VAR 0 5
75319: ARRAY
75320: PUSH
75321: LD_VAR 0 6
75325: PUSH
75326: LD_INT 2
75328: ARRAY
75329: PUSH
75330: LD_VAR 0 5
75334: ARRAY
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75340: LD_VAR 0 7
75344: PUSH
75345: LD_INT 1
75347: ARRAY
75348: PPUSH
75349: LD_VAR 0 7
75353: PUSH
75354: LD_INT 2
75356: ARRAY
75357: PPUSH
75358: CALL_OW 428
75362: PUSH
75363: LD_INT 0
75365: EQUAL
75366: IFFALSE 75419
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75368: LD_VAR 0 1
75372: PPUSH
75373: LD_VAR 0 7
75377: PUSH
75378: LD_INT 1
75380: ARRAY
75381: PPUSH
75382: LD_VAR 0 7
75386: PUSH
75387: LD_INT 2
75389: ARRAY
75390: PPUSH
75391: LD_VAR 0 3
75395: PPUSH
75396: CALL_OW 48
// result := IsPlaced ( unit ) ;
75400: LD_ADDR_VAR 0 4
75404: PUSH
75405: LD_VAR 0 1
75409: PPUSH
75410: CALL_OW 305
75414: ST_TO_ADDR
// exit ;
75415: POP
75416: POP
75417: GO 75423
// end ; end ;
75419: GO 75298
75421: POP
75422: POP
// end ;
75423: LD_VAR 0 4
75427: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75428: LD_INT 0
75430: PPUSH
75431: PPUSH
75432: PPUSH
// if not side or side > 8 then
75433: LD_VAR 0 1
75437: NOT
75438: PUSH
75439: LD_VAR 0 1
75443: PUSH
75444: LD_INT 8
75446: GREATER
75447: OR
75448: IFFALSE 75452
// exit ;
75450: GO 75639
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75452: LD_ADDR_VAR 0 4
75456: PUSH
75457: LD_INT 22
75459: PUSH
75460: LD_VAR 0 1
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: PUSH
75469: LD_INT 21
75471: PUSH
75472: LD_INT 3
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: PUSH
75479: EMPTY
75480: LIST
75481: LIST
75482: PPUSH
75483: CALL_OW 69
75487: ST_TO_ADDR
// if not tmp then
75488: LD_VAR 0 4
75492: NOT
75493: IFFALSE 75497
// exit ;
75495: GO 75639
// enable_addtolog := true ;
75497: LD_ADDR_OWVAR 81
75501: PUSH
75502: LD_INT 1
75504: ST_TO_ADDR
// AddToLog ( [ ) ;
75505: LD_STRING [
75507: PPUSH
75508: CALL_OW 561
// for i in tmp do
75512: LD_ADDR_VAR 0 3
75516: PUSH
75517: LD_VAR 0 4
75521: PUSH
75522: FOR_IN
75523: IFFALSE 75630
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75525: LD_STRING [
75527: PUSH
75528: LD_VAR 0 3
75532: PPUSH
75533: CALL_OW 266
75537: STR
75538: PUSH
75539: LD_STRING , 
75541: STR
75542: PUSH
75543: LD_VAR 0 3
75547: PPUSH
75548: CALL_OW 250
75552: STR
75553: PUSH
75554: LD_STRING , 
75556: STR
75557: PUSH
75558: LD_VAR 0 3
75562: PPUSH
75563: CALL_OW 251
75567: STR
75568: PUSH
75569: LD_STRING , 
75571: STR
75572: PUSH
75573: LD_VAR 0 3
75577: PPUSH
75578: CALL_OW 254
75582: STR
75583: PUSH
75584: LD_STRING , 
75586: STR
75587: PUSH
75588: LD_VAR 0 3
75592: PPUSH
75593: LD_INT 1
75595: PPUSH
75596: CALL_OW 268
75600: STR
75601: PUSH
75602: LD_STRING , 
75604: STR
75605: PUSH
75606: LD_VAR 0 3
75610: PPUSH
75611: LD_INT 2
75613: PPUSH
75614: CALL_OW 268
75618: STR
75619: PUSH
75620: LD_STRING ],
75622: STR
75623: PPUSH
75624: CALL_OW 561
// end ;
75628: GO 75522
75630: POP
75631: POP
// AddToLog ( ]; ) ;
75632: LD_STRING ];
75634: PPUSH
75635: CALL_OW 561
// end ;
75639: LD_VAR 0 2
75643: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75644: LD_INT 0
75646: PPUSH
75647: PPUSH
75648: PPUSH
75649: PPUSH
75650: PPUSH
// if not area or not rate or not max then
75651: LD_VAR 0 1
75655: NOT
75656: PUSH
75657: LD_VAR 0 2
75661: NOT
75662: OR
75663: PUSH
75664: LD_VAR 0 4
75668: NOT
75669: OR
75670: IFFALSE 75674
// exit ;
75672: GO 75863
// while 1 do
75674: LD_INT 1
75676: IFFALSE 75863
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75678: LD_ADDR_VAR 0 9
75682: PUSH
75683: LD_VAR 0 1
75687: PPUSH
75688: LD_INT 1
75690: PPUSH
75691: CALL_OW 287
75695: PUSH
75696: LD_INT 10
75698: MUL
75699: ST_TO_ADDR
// r := rate / 10 ;
75700: LD_ADDR_VAR 0 7
75704: PUSH
75705: LD_VAR 0 2
75709: PUSH
75710: LD_INT 10
75712: DIVREAL
75713: ST_TO_ADDR
// time := 1 1$00 ;
75714: LD_ADDR_VAR 0 8
75718: PUSH
75719: LD_INT 2100
75721: ST_TO_ADDR
// if amount < min then
75722: LD_VAR 0 9
75726: PUSH
75727: LD_VAR 0 3
75731: LESS
75732: IFFALSE 75750
// r := r * 2 else
75734: LD_ADDR_VAR 0 7
75738: PUSH
75739: LD_VAR 0 7
75743: PUSH
75744: LD_INT 2
75746: MUL
75747: ST_TO_ADDR
75748: GO 75776
// if amount > max then
75750: LD_VAR 0 9
75754: PUSH
75755: LD_VAR 0 4
75759: GREATER
75760: IFFALSE 75776
// r := r / 2 ;
75762: LD_ADDR_VAR 0 7
75766: PUSH
75767: LD_VAR 0 7
75771: PUSH
75772: LD_INT 2
75774: DIVREAL
75775: ST_TO_ADDR
// time := time / r ;
75776: LD_ADDR_VAR 0 8
75780: PUSH
75781: LD_VAR 0 8
75785: PUSH
75786: LD_VAR 0 7
75790: DIVREAL
75791: ST_TO_ADDR
// if time < 0 then
75792: LD_VAR 0 8
75796: PUSH
75797: LD_INT 0
75799: LESS
75800: IFFALSE 75817
// time := time * - 1 ;
75802: LD_ADDR_VAR 0 8
75806: PUSH
75807: LD_VAR 0 8
75811: PUSH
75812: LD_INT 1
75814: NEG
75815: MUL
75816: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75817: LD_VAR 0 8
75821: PUSH
75822: LD_INT 35
75824: PPUSH
75825: LD_INT 875
75827: PPUSH
75828: CALL_OW 12
75832: PLUS
75833: PPUSH
75834: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75838: LD_INT 1
75840: PPUSH
75841: LD_INT 5
75843: PPUSH
75844: CALL_OW 12
75848: PPUSH
75849: LD_VAR 0 1
75853: PPUSH
75854: LD_INT 1
75856: PPUSH
75857: CALL_OW 55
// end ;
75861: GO 75674
// end ;
75863: LD_VAR 0 5
75867: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75868: LD_INT 0
75870: PPUSH
75871: PPUSH
75872: PPUSH
75873: PPUSH
75874: PPUSH
75875: PPUSH
75876: PPUSH
75877: PPUSH
// if not turrets or not factories then
75878: LD_VAR 0 1
75882: NOT
75883: PUSH
75884: LD_VAR 0 2
75888: NOT
75889: OR
75890: IFFALSE 75894
// exit ;
75892: GO 76201
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75894: LD_ADDR_VAR 0 10
75898: PUSH
75899: LD_INT 5
75901: PUSH
75902: LD_INT 6
75904: PUSH
75905: EMPTY
75906: LIST
75907: LIST
75908: PUSH
75909: LD_INT 2
75911: PUSH
75912: LD_INT 4
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PUSH
75919: LD_INT 3
75921: PUSH
75922: LD_INT 5
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: LIST
75933: PUSH
75934: LD_INT 24
75936: PUSH
75937: LD_INT 25
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: PUSH
75944: LD_INT 23
75946: PUSH
75947: LD_INT 27
75949: PUSH
75950: EMPTY
75951: LIST
75952: LIST
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: PUSH
75958: LD_INT 42
75960: PUSH
75961: LD_INT 43
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: PUSH
75968: LD_INT 44
75970: PUSH
75971: LD_INT 46
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: PUSH
75978: LD_INT 45
75980: PUSH
75981: LD_INT 47
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: LIST
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: LIST
75997: ST_TO_ADDR
// result := [ ] ;
75998: LD_ADDR_VAR 0 3
76002: PUSH
76003: EMPTY
76004: ST_TO_ADDR
// for i in turrets do
76005: LD_ADDR_VAR 0 4
76009: PUSH
76010: LD_VAR 0 1
76014: PUSH
76015: FOR_IN
76016: IFFALSE 76199
// begin nat := GetNation ( i ) ;
76018: LD_ADDR_VAR 0 7
76022: PUSH
76023: LD_VAR 0 4
76027: PPUSH
76028: CALL_OW 248
76032: ST_TO_ADDR
// weapon := 0 ;
76033: LD_ADDR_VAR 0 8
76037: PUSH
76038: LD_INT 0
76040: ST_TO_ADDR
// if not nat then
76041: LD_VAR 0 7
76045: NOT
76046: IFFALSE 76050
// continue ;
76048: GO 76015
// for j in list [ nat ] do
76050: LD_ADDR_VAR 0 5
76054: PUSH
76055: LD_VAR 0 10
76059: PUSH
76060: LD_VAR 0 7
76064: ARRAY
76065: PUSH
76066: FOR_IN
76067: IFFALSE 76108
// if GetBWeapon ( i ) = j [ 1 ] then
76069: LD_VAR 0 4
76073: PPUSH
76074: CALL_OW 269
76078: PUSH
76079: LD_VAR 0 5
76083: PUSH
76084: LD_INT 1
76086: ARRAY
76087: EQUAL
76088: IFFALSE 76106
// begin weapon := j [ 2 ] ;
76090: LD_ADDR_VAR 0 8
76094: PUSH
76095: LD_VAR 0 5
76099: PUSH
76100: LD_INT 2
76102: ARRAY
76103: ST_TO_ADDR
// break ;
76104: GO 76108
// end ;
76106: GO 76066
76108: POP
76109: POP
// if not weapon then
76110: LD_VAR 0 8
76114: NOT
76115: IFFALSE 76119
// continue ;
76117: GO 76015
// for k in factories do
76119: LD_ADDR_VAR 0 6
76123: PUSH
76124: LD_VAR 0 2
76128: PUSH
76129: FOR_IN
76130: IFFALSE 76195
// begin weapons := AvailableWeaponList ( k ) ;
76132: LD_ADDR_VAR 0 9
76136: PUSH
76137: LD_VAR 0 6
76141: PPUSH
76142: CALL_OW 478
76146: ST_TO_ADDR
// if not weapons then
76147: LD_VAR 0 9
76151: NOT
76152: IFFALSE 76156
// continue ;
76154: GO 76129
// if weapon in weapons then
76156: LD_VAR 0 8
76160: PUSH
76161: LD_VAR 0 9
76165: IN
76166: IFFALSE 76193
// begin result := [ i , weapon ] ;
76168: LD_ADDR_VAR 0 3
76172: PUSH
76173: LD_VAR 0 4
76177: PUSH
76178: LD_VAR 0 8
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: ST_TO_ADDR
// exit ;
76187: POP
76188: POP
76189: POP
76190: POP
76191: GO 76201
// end ; end ;
76193: GO 76129
76195: POP
76196: POP
// end ;
76197: GO 76015
76199: POP
76200: POP
// end ;
76201: LD_VAR 0 3
76205: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76206: LD_INT 0
76208: PPUSH
// if not side or side > 8 then
76209: LD_VAR 0 3
76213: NOT
76214: PUSH
76215: LD_VAR 0 3
76219: PUSH
76220: LD_INT 8
76222: GREATER
76223: OR
76224: IFFALSE 76228
// exit ;
76226: GO 76287
// if not range then
76228: LD_VAR 0 4
76232: NOT
76233: IFFALSE 76244
// range := - 12 ;
76235: LD_ADDR_VAR 0 4
76239: PUSH
76240: LD_INT 12
76242: NEG
76243: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76244: LD_VAR 0 1
76248: PPUSH
76249: LD_VAR 0 2
76253: PPUSH
76254: LD_VAR 0 3
76258: PPUSH
76259: LD_VAR 0 4
76263: PPUSH
76264: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76268: LD_VAR 0 1
76272: PPUSH
76273: LD_VAR 0 2
76277: PPUSH
76278: LD_VAR 0 3
76282: PPUSH
76283: CALL_OW 331
// end ;
76287: LD_VAR 0 5
76291: RET
// export function Video ( mode ) ; begin
76292: LD_INT 0
76294: PPUSH
// ingame_video = mode ;
76295: LD_ADDR_OWVAR 52
76299: PUSH
76300: LD_VAR 0 1
76304: ST_TO_ADDR
// interface_hidden = mode ;
76305: LD_ADDR_OWVAR 54
76309: PUSH
76310: LD_VAR 0 1
76314: ST_TO_ADDR
// end ;
76315: LD_VAR 0 2
76319: RET
// export function Join ( array , element ) ; begin
76320: LD_INT 0
76322: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76323: LD_ADDR_VAR 0 3
76327: PUSH
76328: LD_VAR 0 1
76332: PPUSH
76333: LD_VAR 0 1
76337: PUSH
76338: LD_INT 1
76340: PLUS
76341: PPUSH
76342: LD_VAR 0 2
76346: PPUSH
76347: CALL_OW 1
76351: ST_TO_ADDR
// end ;
76352: LD_VAR 0 3
76356: RET
// export function JoinUnion ( array , element ) ; begin
76357: LD_INT 0
76359: PPUSH
// result := array union element ;
76360: LD_ADDR_VAR 0 3
76364: PUSH
76365: LD_VAR 0 1
76369: PUSH
76370: LD_VAR 0 2
76374: UNION
76375: ST_TO_ADDR
// end ;
76376: LD_VAR 0 3
76380: RET
// export function GetBehemoths ( side ) ; begin
76381: LD_INT 0
76383: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76384: LD_ADDR_VAR 0 2
76388: PUSH
76389: LD_INT 22
76391: PUSH
76392: LD_VAR 0 1
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: PUSH
76401: LD_INT 31
76403: PUSH
76404: LD_INT 25
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: PPUSH
76415: CALL_OW 69
76419: ST_TO_ADDR
// end ;
76420: LD_VAR 0 2
76424: RET
// export function Shuffle ( array ) ; var i , index ; begin
76425: LD_INT 0
76427: PPUSH
76428: PPUSH
76429: PPUSH
// result := [ ] ;
76430: LD_ADDR_VAR 0 2
76434: PUSH
76435: EMPTY
76436: ST_TO_ADDR
// if not array then
76437: LD_VAR 0 1
76441: NOT
76442: IFFALSE 76446
// exit ;
76444: GO 76545
// Randomize ;
76446: CALL_OW 10
// for i = array downto 1 do
76450: LD_ADDR_VAR 0 3
76454: PUSH
76455: DOUBLE
76456: LD_VAR 0 1
76460: INC
76461: ST_TO_ADDR
76462: LD_INT 1
76464: PUSH
76465: FOR_DOWNTO
76466: IFFALSE 76543
// begin index := rand ( 1 , array ) ;
76468: LD_ADDR_VAR 0 4
76472: PUSH
76473: LD_INT 1
76475: PPUSH
76476: LD_VAR 0 1
76480: PPUSH
76481: CALL_OW 12
76485: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76486: LD_ADDR_VAR 0 2
76490: PUSH
76491: LD_VAR 0 2
76495: PPUSH
76496: LD_VAR 0 2
76500: PUSH
76501: LD_INT 1
76503: PLUS
76504: PPUSH
76505: LD_VAR 0 1
76509: PUSH
76510: LD_VAR 0 4
76514: ARRAY
76515: PPUSH
76516: CALL_OW 2
76520: ST_TO_ADDR
// array := Delete ( array , index ) ;
76521: LD_ADDR_VAR 0 1
76525: PUSH
76526: LD_VAR 0 1
76530: PPUSH
76531: LD_VAR 0 4
76535: PPUSH
76536: CALL_OW 3
76540: ST_TO_ADDR
// end ;
76541: GO 76465
76543: POP
76544: POP
// end ;
76545: LD_VAR 0 2
76549: RET
// export function GetBaseMaterials ( base ) ; begin
76550: LD_INT 0
76552: PPUSH
// result := [ 0 , 0 , 0 ] ;
76553: LD_ADDR_VAR 0 2
76557: PUSH
76558: LD_INT 0
76560: PUSH
76561: LD_INT 0
76563: PUSH
76564: LD_INT 0
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: LIST
76571: ST_TO_ADDR
// if not base then
76572: LD_VAR 0 1
76576: NOT
76577: IFFALSE 76581
// exit ;
76579: GO 76630
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76581: LD_ADDR_VAR 0 2
76585: PUSH
76586: LD_VAR 0 1
76590: PPUSH
76591: LD_INT 1
76593: PPUSH
76594: CALL_OW 275
76598: PUSH
76599: LD_VAR 0 1
76603: PPUSH
76604: LD_INT 2
76606: PPUSH
76607: CALL_OW 275
76611: PUSH
76612: LD_VAR 0 1
76616: PPUSH
76617: LD_INT 3
76619: PPUSH
76620: CALL_OW 275
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: LIST
76629: ST_TO_ADDR
// end ;
76630: LD_VAR 0 2
76634: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76635: LD_INT 0
76637: PPUSH
76638: PPUSH
// result := array ;
76639: LD_ADDR_VAR 0 3
76643: PUSH
76644: LD_VAR 0 1
76648: ST_TO_ADDR
// if size >= result then
76649: LD_VAR 0 2
76653: PUSH
76654: LD_VAR 0 3
76658: GREATEREQUAL
76659: IFFALSE 76663
// exit ;
76661: GO 76713
// if size then
76663: LD_VAR 0 2
76667: IFFALSE 76713
// for i := array downto size do
76669: LD_ADDR_VAR 0 4
76673: PUSH
76674: DOUBLE
76675: LD_VAR 0 1
76679: INC
76680: ST_TO_ADDR
76681: LD_VAR 0 2
76685: PUSH
76686: FOR_DOWNTO
76687: IFFALSE 76711
// result := Delete ( result , result ) ;
76689: LD_ADDR_VAR 0 3
76693: PUSH
76694: LD_VAR 0 3
76698: PPUSH
76699: LD_VAR 0 3
76703: PPUSH
76704: CALL_OW 3
76708: ST_TO_ADDR
76709: GO 76686
76711: POP
76712: POP
// end ;
76713: LD_VAR 0 3
76717: RET
// export function ComExit ( unit ) ; var tmp ; begin
76718: LD_INT 0
76720: PPUSH
76721: PPUSH
// if not IsInUnit ( unit ) then
76722: LD_VAR 0 1
76726: PPUSH
76727: CALL_OW 310
76731: NOT
76732: IFFALSE 76736
// exit ;
76734: GO 76796
// tmp := IsInUnit ( unit ) ;
76736: LD_ADDR_VAR 0 3
76740: PUSH
76741: LD_VAR 0 1
76745: PPUSH
76746: CALL_OW 310
76750: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76751: LD_VAR 0 3
76755: PPUSH
76756: CALL_OW 247
76760: PUSH
76761: LD_INT 2
76763: EQUAL
76764: IFFALSE 76777
// ComExitVehicle ( unit ) else
76766: LD_VAR 0 1
76770: PPUSH
76771: CALL_OW 121
76775: GO 76786
// ComExitBuilding ( unit ) ;
76777: LD_VAR 0 1
76781: PPUSH
76782: CALL_OW 122
// result := tmp ;
76786: LD_ADDR_VAR 0 2
76790: PUSH
76791: LD_VAR 0 3
76795: ST_TO_ADDR
// end ;
76796: LD_VAR 0 2
76800: RET
// export function ComExitAll ( units ) ; var i ; begin
76801: LD_INT 0
76803: PPUSH
76804: PPUSH
// if not units then
76805: LD_VAR 0 1
76809: NOT
76810: IFFALSE 76814
// exit ;
76812: GO 76840
// for i in units do
76814: LD_ADDR_VAR 0 3
76818: PUSH
76819: LD_VAR 0 1
76823: PUSH
76824: FOR_IN
76825: IFFALSE 76838
// ComExit ( i ) ;
76827: LD_VAR 0 3
76831: PPUSH
76832: CALL 76718 0 1
76836: GO 76824
76838: POP
76839: POP
// end ;
76840: LD_VAR 0 2
76844: RET
// export function ResetHc ; begin
76845: LD_INT 0
76847: PPUSH
// InitHc ;
76848: CALL_OW 19
// hc_importance := 0 ;
76852: LD_ADDR_OWVAR 32
76856: PUSH
76857: LD_INT 0
76859: ST_TO_ADDR
// end ;
76860: LD_VAR 0 1
76864: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76865: LD_INT 0
76867: PPUSH
76868: PPUSH
76869: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76870: LD_ADDR_VAR 0 6
76874: PUSH
76875: LD_VAR 0 1
76879: PUSH
76880: LD_VAR 0 3
76884: PLUS
76885: PUSH
76886: LD_INT 2
76888: DIV
76889: ST_TO_ADDR
// if _x < 0 then
76890: LD_VAR 0 6
76894: PUSH
76895: LD_INT 0
76897: LESS
76898: IFFALSE 76915
// _x := _x * - 1 ;
76900: LD_ADDR_VAR 0 6
76904: PUSH
76905: LD_VAR 0 6
76909: PUSH
76910: LD_INT 1
76912: NEG
76913: MUL
76914: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76915: LD_ADDR_VAR 0 7
76919: PUSH
76920: LD_VAR 0 2
76924: PUSH
76925: LD_VAR 0 4
76929: PLUS
76930: PUSH
76931: LD_INT 2
76933: DIV
76934: ST_TO_ADDR
// if _y < 0 then
76935: LD_VAR 0 7
76939: PUSH
76940: LD_INT 0
76942: LESS
76943: IFFALSE 76960
// _y := _y * - 1 ;
76945: LD_ADDR_VAR 0 7
76949: PUSH
76950: LD_VAR 0 7
76954: PUSH
76955: LD_INT 1
76957: NEG
76958: MUL
76959: ST_TO_ADDR
// result := [ _x , _y ] ;
76960: LD_ADDR_VAR 0 5
76964: PUSH
76965: LD_VAR 0 6
76969: PUSH
76970: LD_VAR 0 7
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: ST_TO_ADDR
// end ;
76979: LD_VAR 0 5
76983: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76984: LD_INT 0
76986: PPUSH
76987: PPUSH
76988: PPUSH
76989: PPUSH
// task := GetTaskList ( unit ) ;
76990: LD_ADDR_VAR 0 7
76994: PUSH
76995: LD_VAR 0 1
76999: PPUSH
77000: CALL_OW 437
77004: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77005: LD_VAR 0 7
77009: NOT
77010: PUSH
77011: LD_VAR 0 1
77015: PPUSH
77016: LD_VAR 0 2
77020: PPUSH
77021: CALL_OW 308
77025: NOT
77026: AND
77027: IFFALSE 77031
// exit ;
77029: GO 77149
// if IsInArea ( unit , area ) then
77031: LD_VAR 0 1
77035: PPUSH
77036: LD_VAR 0 2
77040: PPUSH
77041: CALL_OW 308
77045: IFFALSE 77063
// begin ComMoveToArea ( unit , goAway ) ;
77047: LD_VAR 0 1
77051: PPUSH
77052: LD_VAR 0 3
77056: PPUSH
77057: CALL_OW 113
// exit ;
77061: GO 77149
// end ; if task [ 1 ] [ 1 ] <> M then
77063: LD_VAR 0 7
77067: PUSH
77068: LD_INT 1
77070: ARRAY
77071: PUSH
77072: LD_INT 1
77074: ARRAY
77075: PUSH
77076: LD_STRING M
77078: NONEQUAL
77079: IFFALSE 77083
// exit ;
77081: GO 77149
// x := task [ 1 ] [ 2 ] ;
77083: LD_ADDR_VAR 0 5
77087: PUSH
77088: LD_VAR 0 7
77092: PUSH
77093: LD_INT 1
77095: ARRAY
77096: PUSH
77097: LD_INT 2
77099: ARRAY
77100: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77101: LD_ADDR_VAR 0 6
77105: PUSH
77106: LD_VAR 0 7
77110: PUSH
77111: LD_INT 1
77113: ARRAY
77114: PUSH
77115: LD_INT 3
77117: ARRAY
77118: ST_TO_ADDR
// if InArea ( x , y , area ) then
77119: LD_VAR 0 5
77123: PPUSH
77124: LD_VAR 0 6
77128: PPUSH
77129: LD_VAR 0 2
77133: PPUSH
77134: CALL_OW 309
77138: IFFALSE 77149
// ComStop ( unit ) ;
77140: LD_VAR 0 1
77144: PPUSH
77145: CALL_OW 141
// end ;
77149: LD_VAR 0 4
77153: RET
// export function Abs ( value ) ; begin
77154: LD_INT 0
77156: PPUSH
// result := value ;
77157: LD_ADDR_VAR 0 2
77161: PUSH
77162: LD_VAR 0 1
77166: ST_TO_ADDR
// if value < 0 then
77167: LD_VAR 0 1
77171: PUSH
77172: LD_INT 0
77174: LESS
77175: IFFALSE 77192
// result := value * - 1 ;
77177: LD_ADDR_VAR 0 2
77181: PUSH
77182: LD_VAR 0 1
77186: PUSH
77187: LD_INT 1
77189: NEG
77190: MUL
77191: ST_TO_ADDR
// end ;
77192: LD_VAR 0 2
77196: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77197: LD_INT 0
77199: PPUSH
77200: PPUSH
77201: PPUSH
77202: PPUSH
77203: PPUSH
77204: PPUSH
77205: PPUSH
77206: PPUSH
// if not unit or not building then
77207: LD_VAR 0 1
77211: NOT
77212: PUSH
77213: LD_VAR 0 2
77217: NOT
77218: OR
77219: IFFALSE 77223
// exit ;
77221: GO 77449
// x := GetX ( building ) ;
77223: LD_ADDR_VAR 0 4
77227: PUSH
77228: LD_VAR 0 2
77232: PPUSH
77233: CALL_OW 250
77237: ST_TO_ADDR
// y := GetY ( building ) ;
77238: LD_ADDR_VAR 0 6
77242: PUSH
77243: LD_VAR 0 2
77247: PPUSH
77248: CALL_OW 251
77252: ST_TO_ADDR
// d := GetDir ( building ) ;
77253: LD_ADDR_VAR 0 8
77257: PUSH
77258: LD_VAR 0 2
77262: PPUSH
77263: CALL_OW 254
77267: ST_TO_ADDR
// r := 4 ;
77268: LD_ADDR_VAR 0 9
77272: PUSH
77273: LD_INT 4
77275: ST_TO_ADDR
// for i := 1 to 5 do
77276: LD_ADDR_VAR 0 10
77280: PUSH
77281: DOUBLE
77282: LD_INT 1
77284: DEC
77285: ST_TO_ADDR
77286: LD_INT 5
77288: PUSH
77289: FOR_TO
77290: IFFALSE 77447
// begin _x := ShiftX ( x , d , r + i ) ;
77292: LD_ADDR_VAR 0 5
77296: PUSH
77297: LD_VAR 0 4
77301: PPUSH
77302: LD_VAR 0 8
77306: PPUSH
77307: LD_VAR 0 9
77311: PUSH
77312: LD_VAR 0 10
77316: PLUS
77317: PPUSH
77318: CALL_OW 272
77322: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77323: LD_ADDR_VAR 0 7
77327: PUSH
77328: LD_VAR 0 6
77332: PPUSH
77333: LD_VAR 0 8
77337: PPUSH
77338: LD_VAR 0 9
77342: PUSH
77343: LD_VAR 0 10
77347: PLUS
77348: PPUSH
77349: CALL_OW 273
77353: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77354: LD_VAR 0 5
77358: PPUSH
77359: LD_VAR 0 7
77363: PPUSH
77364: CALL_OW 488
77368: PUSH
77369: LD_VAR 0 5
77373: PPUSH
77374: LD_VAR 0 7
77378: PPUSH
77379: CALL_OW 428
77383: PPUSH
77384: CALL_OW 247
77388: PUSH
77389: LD_INT 3
77391: PUSH
77392: LD_INT 2
77394: PUSH
77395: EMPTY
77396: LIST
77397: LIST
77398: IN
77399: NOT
77400: AND
77401: IFFALSE 77445
// begin ComMoveXY ( unit , _x , _y ) ;
77403: LD_VAR 0 1
77407: PPUSH
77408: LD_VAR 0 5
77412: PPUSH
77413: LD_VAR 0 7
77417: PPUSH
77418: CALL_OW 111
// result := [ _x , _y ] ;
77422: LD_ADDR_VAR 0 3
77426: PUSH
77427: LD_VAR 0 5
77431: PUSH
77432: LD_VAR 0 7
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: ST_TO_ADDR
// exit ;
77441: POP
77442: POP
77443: GO 77449
// end ; end ;
77445: GO 77289
77447: POP
77448: POP
// end ;
77449: LD_VAR 0 3
77453: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77454: LD_INT 0
77456: PPUSH
77457: PPUSH
77458: PPUSH
// result := 0 ;
77459: LD_ADDR_VAR 0 3
77463: PUSH
77464: LD_INT 0
77466: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77467: LD_VAR 0 1
77471: PUSH
77472: LD_INT 0
77474: LESS
77475: PUSH
77476: LD_VAR 0 1
77480: PUSH
77481: LD_INT 8
77483: GREATER
77484: OR
77485: PUSH
77486: LD_VAR 0 2
77490: PUSH
77491: LD_INT 0
77493: LESS
77494: OR
77495: PUSH
77496: LD_VAR 0 2
77500: PUSH
77501: LD_INT 8
77503: GREATER
77504: OR
77505: IFFALSE 77509
// exit ;
77507: GO 77584
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77509: LD_ADDR_VAR 0 4
77513: PUSH
77514: LD_INT 22
77516: PUSH
77517: LD_VAR 0 2
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: PPUSH
77526: CALL_OW 69
77530: PUSH
77531: FOR_IN
77532: IFFALSE 77582
// begin un := UnitShoot ( i ) ;
77534: LD_ADDR_VAR 0 5
77538: PUSH
77539: LD_VAR 0 4
77543: PPUSH
77544: CALL_OW 504
77548: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77549: LD_VAR 0 5
77553: PPUSH
77554: CALL_OW 255
77558: PUSH
77559: LD_VAR 0 1
77563: EQUAL
77564: IFFALSE 77580
// begin result := un ;
77566: LD_ADDR_VAR 0 3
77570: PUSH
77571: LD_VAR 0 5
77575: ST_TO_ADDR
// exit ;
77576: POP
77577: POP
77578: GO 77584
// end ; end ;
77580: GO 77531
77582: POP
77583: POP
// end ;
77584: LD_VAR 0 3
77588: RET
// export function GetCargoBay ( units ) ; begin
77589: LD_INT 0
77591: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77592: LD_ADDR_VAR 0 2
77596: PUSH
77597: LD_VAR 0 1
77601: PPUSH
77602: LD_INT 2
77604: PUSH
77605: LD_INT 34
77607: PUSH
77608: LD_INT 12
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: PUSH
77615: LD_INT 34
77617: PUSH
77618: LD_INT 51
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: PUSH
77625: LD_INT 34
77627: PUSH
77628: LD_INT 32
77630: PUSH
77631: EMPTY
77632: LIST
77633: LIST
77634: PUSH
77635: LD_INT 34
77637: PUSH
77638: LD_INT 89
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: LIST
77649: LIST
77650: LIST
77651: PPUSH
77652: CALL_OW 72
77656: ST_TO_ADDR
// end ;
77657: LD_VAR 0 2
77661: RET
// export function Negate ( value ) ; begin
77662: LD_INT 0
77664: PPUSH
// result := not value ;
77665: LD_ADDR_VAR 0 2
77669: PUSH
77670: LD_VAR 0 1
77674: NOT
77675: ST_TO_ADDR
// end ;
77676: LD_VAR 0 2
77680: RET
// export function Inc ( value ) ; begin
77681: LD_INT 0
77683: PPUSH
// result := value + 1 ;
77684: LD_ADDR_VAR 0 2
77688: PUSH
77689: LD_VAR 0 1
77693: PUSH
77694: LD_INT 1
77696: PLUS
77697: ST_TO_ADDR
// end ;
77698: LD_VAR 0 2
77702: RET
// export function Dec ( value ) ; begin
77703: LD_INT 0
77705: PPUSH
// result := value - 1 ;
77706: LD_ADDR_VAR 0 2
77710: PUSH
77711: LD_VAR 0 1
77715: PUSH
77716: LD_INT 1
77718: MINUS
77719: ST_TO_ADDR
// end ;
77720: LD_VAR 0 2
77724: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77725: LD_INT 0
77727: PPUSH
77728: PPUSH
77729: PPUSH
77730: PPUSH
77731: PPUSH
77732: PPUSH
77733: PPUSH
77734: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77735: LD_VAR 0 1
77739: PPUSH
77740: LD_VAR 0 2
77744: PPUSH
77745: CALL_OW 488
77749: NOT
77750: PUSH
77751: LD_VAR 0 3
77755: PPUSH
77756: LD_VAR 0 4
77760: PPUSH
77761: CALL_OW 488
77765: NOT
77766: OR
77767: IFFALSE 77780
// begin result := - 1 ;
77769: LD_ADDR_VAR 0 5
77773: PUSH
77774: LD_INT 1
77776: NEG
77777: ST_TO_ADDR
// exit ;
77778: GO 78015
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77780: LD_ADDR_VAR 0 12
77784: PUSH
77785: LD_VAR 0 1
77789: PPUSH
77790: LD_VAR 0 2
77794: PPUSH
77795: LD_VAR 0 3
77799: PPUSH
77800: LD_VAR 0 4
77804: PPUSH
77805: CALL 76865 0 4
77809: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77810: LD_ADDR_VAR 0 11
77814: PUSH
77815: LD_VAR 0 1
77819: PPUSH
77820: LD_VAR 0 2
77824: PPUSH
77825: LD_VAR 0 12
77829: PUSH
77830: LD_INT 1
77832: ARRAY
77833: PPUSH
77834: LD_VAR 0 12
77838: PUSH
77839: LD_INT 2
77841: ARRAY
77842: PPUSH
77843: CALL_OW 298
77847: ST_TO_ADDR
// distance := 9999 ;
77848: LD_ADDR_VAR 0 10
77852: PUSH
77853: LD_INT 9999
77855: ST_TO_ADDR
// for i := 0 to 5 do
77856: LD_ADDR_VAR 0 6
77860: PUSH
77861: DOUBLE
77862: LD_INT 0
77864: DEC
77865: ST_TO_ADDR
77866: LD_INT 5
77868: PUSH
77869: FOR_TO
77870: IFFALSE 78013
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77872: LD_ADDR_VAR 0 7
77876: PUSH
77877: LD_VAR 0 1
77881: PPUSH
77882: LD_VAR 0 6
77886: PPUSH
77887: LD_VAR 0 11
77891: PPUSH
77892: CALL_OW 272
77896: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77897: LD_ADDR_VAR 0 8
77901: PUSH
77902: LD_VAR 0 2
77906: PPUSH
77907: LD_VAR 0 6
77911: PPUSH
77912: LD_VAR 0 11
77916: PPUSH
77917: CALL_OW 273
77921: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77922: LD_VAR 0 7
77926: PPUSH
77927: LD_VAR 0 8
77931: PPUSH
77932: CALL_OW 488
77936: NOT
77937: IFFALSE 77941
// continue ;
77939: GO 77869
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77941: LD_ADDR_VAR 0 9
77945: PUSH
77946: LD_VAR 0 12
77950: PUSH
77951: LD_INT 1
77953: ARRAY
77954: PPUSH
77955: LD_VAR 0 12
77959: PUSH
77960: LD_INT 2
77962: ARRAY
77963: PPUSH
77964: LD_VAR 0 7
77968: PPUSH
77969: LD_VAR 0 8
77973: PPUSH
77974: CALL_OW 298
77978: ST_TO_ADDR
// if tmp < distance then
77979: LD_VAR 0 9
77983: PUSH
77984: LD_VAR 0 10
77988: LESS
77989: IFFALSE 78011
// begin result := i ;
77991: LD_ADDR_VAR 0 5
77995: PUSH
77996: LD_VAR 0 6
78000: ST_TO_ADDR
// distance := tmp ;
78001: LD_ADDR_VAR 0 10
78005: PUSH
78006: LD_VAR 0 9
78010: ST_TO_ADDR
// end ; end ;
78011: GO 77869
78013: POP
78014: POP
// end ;
78015: LD_VAR 0 5
78019: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78020: LD_INT 0
78022: PPUSH
78023: PPUSH
// if not driver or not IsInUnit ( driver ) then
78024: LD_VAR 0 1
78028: NOT
78029: PUSH
78030: LD_VAR 0 1
78034: PPUSH
78035: CALL_OW 310
78039: NOT
78040: OR
78041: IFFALSE 78045
// exit ;
78043: GO 78135
// vehicle := IsInUnit ( driver ) ;
78045: LD_ADDR_VAR 0 3
78049: PUSH
78050: LD_VAR 0 1
78054: PPUSH
78055: CALL_OW 310
78059: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78060: LD_VAR 0 1
78064: PPUSH
78065: LD_STRING \
78067: PUSH
78068: LD_INT 0
78070: PUSH
78071: LD_INT 0
78073: PUSH
78074: LD_INT 0
78076: PUSH
78077: LD_INT 0
78079: PUSH
78080: LD_INT 0
78082: PUSH
78083: LD_INT 0
78085: PUSH
78086: EMPTY
78087: LIST
78088: LIST
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: LIST
78094: PUSH
78095: LD_STRING E
78097: PUSH
78098: LD_INT 0
78100: PUSH
78101: LD_INT 0
78103: PUSH
78104: LD_VAR 0 3
78108: PUSH
78109: LD_INT 0
78111: PUSH
78112: LD_INT 0
78114: PUSH
78115: LD_INT 0
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: LIST
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PPUSH
78131: CALL_OW 446
// end ;
78135: LD_VAR 0 2
78139: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78140: LD_INT 0
78142: PPUSH
78143: PPUSH
// if not driver or not IsInUnit ( driver ) then
78144: LD_VAR 0 1
78148: NOT
78149: PUSH
78150: LD_VAR 0 1
78154: PPUSH
78155: CALL_OW 310
78159: NOT
78160: OR
78161: IFFALSE 78165
// exit ;
78163: GO 78255
// vehicle := IsInUnit ( driver ) ;
78165: LD_ADDR_VAR 0 3
78169: PUSH
78170: LD_VAR 0 1
78174: PPUSH
78175: CALL_OW 310
78179: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78180: LD_VAR 0 1
78184: PPUSH
78185: LD_STRING \
78187: PUSH
78188: LD_INT 0
78190: PUSH
78191: LD_INT 0
78193: PUSH
78194: LD_INT 0
78196: PUSH
78197: LD_INT 0
78199: PUSH
78200: LD_INT 0
78202: PUSH
78203: LD_INT 0
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: LIST
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: PUSH
78215: LD_STRING E
78217: PUSH
78218: LD_INT 0
78220: PUSH
78221: LD_INT 0
78223: PUSH
78224: LD_VAR 0 3
78228: PUSH
78229: LD_INT 0
78231: PUSH
78232: LD_INT 0
78234: PUSH
78235: LD_INT 0
78237: PUSH
78238: EMPTY
78239: LIST
78240: LIST
78241: LIST
78242: LIST
78243: LIST
78244: LIST
78245: LIST
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: PPUSH
78251: CALL_OW 447
// end ;
78255: LD_VAR 0 2
78259: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78260: LD_INT 0
78262: PPUSH
78263: PPUSH
78264: PPUSH
// tmp := [ ] ;
78265: LD_ADDR_VAR 0 5
78269: PUSH
78270: EMPTY
78271: ST_TO_ADDR
// for i in units do
78272: LD_ADDR_VAR 0 4
78276: PUSH
78277: LD_VAR 0 1
78281: PUSH
78282: FOR_IN
78283: IFFALSE 78321
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78285: LD_ADDR_VAR 0 5
78289: PUSH
78290: LD_VAR 0 5
78294: PPUSH
78295: LD_VAR 0 5
78299: PUSH
78300: LD_INT 1
78302: PLUS
78303: PPUSH
78304: LD_VAR 0 4
78308: PPUSH
78309: CALL_OW 256
78313: PPUSH
78314: CALL_OW 2
78318: ST_TO_ADDR
78319: GO 78282
78321: POP
78322: POP
// if not tmp then
78323: LD_VAR 0 5
78327: NOT
78328: IFFALSE 78332
// exit ;
78330: GO 78380
// if asc then
78332: LD_VAR 0 2
78336: IFFALSE 78360
// result := SortListByListAsc ( units , tmp ) else
78338: LD_ADDR_VAR 0 3
78342: PUSH
78343: LD_VAR 0 1
78347: PPUSH
78348: LD_VAR 0 5
78352: PPUSH
78353: CALL_OW 76
78357: ST_TO_ADDR
78358: GO 78380
// result := SortListByListDesc ( units , tmp ) ;
78360: LD_ADDR_VAR 0 3
78364: PUSH
78365: LD_VAR 0 1
78369: PPUSH
78370: LD_VAR 0 5
78374: PPUSH
78375: CALL_OW 77
78379: ST_TO_ADDR
// end ;
78380: LD_VAR 0 3
78384: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78385: LD_INT 0
78387: PPUSH
78388: PPUSH
// task := GetTaskList ( mech ) ;
78389: LD_ADDR_VAR 0 4
78393: PUSH
78394: LD_VAR 0 1
78398: PPUSH
78399: CALL_OW 437
78403: ST_TO_ADDR
// if not task then
78404: LD_VAR 0 4
78408: NOT
78409: IFFALSE 78413
// exit ;
78411: GO 78455
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78413: LD_ADDR_VAR 0 3
78417: PUSH
78418: LD_VAR 0 4
78422: PUSH
78423: LD_INT 1
78425: ARRAY
78426: PUSH
78427: LD_INT 1
78429: ARRAY
78430: PUSH
78431: LD_STRING r
78433: EQUAL
78434: PUSH
78435: LD_VAR 0 4
78439: PUSH
78440: LD_INT 1
78442: ARRAY
78443: PUSH
78444: LD_INT 4
78446: ARRAY
78447: PUSH
78448: LD_VAR 0 2
78452: EQUAL
78453: AND
78454: ST_TO_ADDR
// end ;
78455: LD_VAR 0 3
78459: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78460: LD_INT 0
78462: PPUSH
// SetDir ( unit , d ) ;
78463: LD_VAR 0 1
78467: PPUSH
78468: LD_VAR 0 4
78472: PPUSH
78473: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78477: LD_VAR 0 1
78481: PPUSH
78482: LD_VAR 0 2
78486: PPUSH
78487: LD_VAR 0 3
78491: PPUSH
78492: LD_VAR 0 5
78496: PPUSH
78497: CALL_OW 48
// end ;
78501: LD_VAR 0 6
78505: RET
// export function ToNaturalNumber ( number ) ; begin
78506: LD_INT 0
78508: PPUSH
// result := number div 1 ;
78509: LD_ADDR_VAR 0 2
78513: PUSH
78514: LD_VAR 0 1
78518: PUSH
78519: LD_INT 1
78521: DIV
78522: ST_TO_ADDR
// if number < 0 then
78523: LD_VAR 0 1
78527: PUSH
78528: LD_INT 0
78530: LESS
78531: IFFALSE 78541
// result := 0 ;
78533: LD_ADDR_VAR 0 2
78537: PUSH
78538: LD_INT 0
78540: ST_TO_ADDR
// end ;
78541: LD_VAR 0 2
78545: RET
// export function SortByClass ( units , class ) ; var un ; begin
78546: LD_INT 0
78548: PPUSH
78549: PPUSH
// if not units or not class then
78550: LD_VAR 0 1
78554: NOT
78555: PUSH
78556: LD_VAR 0 2
78560: NOT
78561: OR
78562: IFFALSE 78566
// exit ;
78564: GO 78661
// result := [ ] ;
78566: LD_ADDR_VAR 0 3
78570: PUSH
78571: EMPTY
78572: ST_TO_ADDR
// for un in units do
78573: LD_ADDR_VAR 0 4
78577: PUSH
78578: LD_VAR 0 1
78582: PUSH
78583: FOR_IN
78584: IFFALSE 78659
// if GetClass ( un ) = class then
78586: LD_VAR 0 4
78590: PPUSH
78591: CALL_OW 257
78595: PUSH
78596: LD_VAR 0 2
78600: EQUAL
78601: IFFALSE 78628
// result := Insert ( result , 1 , un ) else
78603: LD_ADDR_VAR 0 3
78607: PUSH
78608: LD_VAR 0 3
78612: PPUSH
78613: LD_INT 1
78615: PPUSH
78616: LD_VAR 0 4
78620: PPUSH
78621: CALL_OW 2
78625: ST_TO_ADDR
78626: GO 78657
// result := Replace ( result , result + 1 , un ) ;
78628: LD_ADDR_VAR 0 3
78632: PUSH
78633: LD_VAR 0 3
78637: PPUSH
78638: LD_VAR 0 3
78642: PUSH
78643: LD_INT 1
78645: PLUS
78646: PPUSH
78647: LD_VAR 0 4
78651: PPUSH
78652: CALL_OW 1
78656: ST_TO_ADDR
78657: GO 78583
78659: POP
78660: POP
// end ;
78661: LD_VAR 0 3
78665: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78666: LD_INT 0
78668: PPUSH
78669: PPUSH
78670: PPUSH
78671: PPUSH
78672: PPUSH
78673: PPUSH
78674: PPUSH
// result := [ ] ;
78675: LD_ADDR_VAR 0 4
78679: PUSH
78680: EMPTY
78681: ST_TO_ADDR
// if x - r < 0 then
78682: LD_VAR 0 1
78686: PUSH
78687: LD_VAR 0 3
78691: MINUS
78692: PUSH
78693: LD_INT 0
78695: LESS
78696: IFFALSE 78708
// min_x := 0 else
78698: LD_ADDR_VAR 0 8
78702: PUSH
78703: LD_INT 0
78705: ST_TO_ADDR
78706: GO 78724
// min_x := x - r ;
78708: LD_ADDR_VAR 0 8
78712: PUSH
78713: LD_VAR 0 1
78717: PUSH
78718: LD_VAR 0 3
78722: MINUS
78723: ST_TO_ADDR
// if y - r < 0 then
78724: LD_VAR 0 2
78728: PUSH
78729: LD_VAR 0 3
78733: MINUS
78734: PUSH
78735: LD_INT 0
78737: LESS
78738: IFFALSE 78750
// min_y := 0 else
78740: LD_ADDR_VAR 0 7
78744: PUSH
78745: LD_INT 0
78747: ST_TO_ADDR
78748: GO 78766
// min_y := y - r ;
78750: LD_ADDR_VAR 0 7
78754: PUSH
78755: LD_VAR 0 2
78759: PUSH
78760: LD_VAR 0 3
78764: MINUS
78765: ST_TO_ADDR
// max_x := x + r ;
78766: LD_ADDR_VAR 0 9
78770: PUSH
78771: LD_VAR 0 1
78775: PUSH
78776: LD_VAR 0 3
78780: PLUS
78781: ST_TO_ADDR
// max_y := y + r ;
78782: LD_ADDR_VAR 0 10
78786: PUSH
78787: LD_VAR 0 2
78791: PUSH
78792: LD_VAR 0 3
78796: PLUS
78797: ST_TO_ADDR
// for _x = min_x to max_x do
78798: LD_ADDR_VAR 0 5
78802: PUSH
78803: DOUBLE
78804: LD_VAR 0 8
78808: DEC
78809: ST_TO_ADDR
78810: LD_VAR 0 9
78814: PUSH
78815: FOR_TO
78816: IFFALSE 78917
// for _y = min_y to max_y do
78818: LD_ADDR_VAR 0 6
78822: PUSH
78823: DOUBLE
78824: LD_VAR 0 7
78828: DEC
78829: ST_TO_ADDR
78830: LD_VAR 0 10
78834: PUSH
78835: FOR_TO
78836: IFFALSE 78913
// begin if not ValidHex ( _x , _y ) then
78838: LD_VAR 0 5
78842: PPUSH
78843: LD_VAR 0 6
78847: PPUSH
78848: CALL_OW 488
78852: NOT
78853: IFFALSE 78857
// continue ;
78855: GO 78835
// if GetResourceTypeXY ( _x , _y ) then
78857: LD_VAR 0 5
78861: PPUSH
78862: LD_VAR 0 6
78866: PPUSH
78867: CALL_OW 283
78871: IFFALSE 78911
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78873: LD_ADDR_VAR 0 4
78877: PUSH
78878: LD_VAR 0 4
78882: PPUSH
78883: LD_VAR 0 4
78887: PUSH
78888: LD_INT 1
78890: PLUS
78891: PPUSH
78892: LD_VAR 0 5
78896: PUSH
78897: LD_VAR 0 6
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: PPUSH
78906: CALL_OW 1
78910: ST_TO_ADDR
// end ;
78911: GO 78835
78913: POP
78914: POP
78915: GO 78815
78917: POP
78918: POP
// end ;
78919: LD_VAR 0 4
78923: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78924: LD_INT 0
78926: PPUSH
78927: PPUSH
78928: PPUSH
78929: PPUSH
78930: PPUSH
78931: PPUSH
78932: PPUSH
78933: PPUSH
// if not units then
78934: LD_VAR 0 1
78938: NOT
78939: IFFALSE 78943
// exit ;
78941: GO 79467
// result := UnitFilter ( units , [ f_ok ] ) ;
78943: LD_ADDR_VAR 0 3
78947: PUSH
78948: LD_VAR 0 1
78952: PPUSH
78953: LD_INT 50
78955: PUSH
78956: EMPTY
78957: LIST
78958: PPUSH
78959: CALL_OW 72
78963: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78964: LD_ADDR_VAR 0 8
78968: PUSH
78969: LD_VAR 0 1
78973: PUSH
78974: LD_INT 1
78976: ARRAY
78977: PPUSH
78978: CALL_OW 255
78982: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78983: LD_ADDR_VAR 0 10
78987: PUSH
78988: LD_INT 29
78990: PUSH
78991: LD_INT 91
78993: PUSH
78994: LD_INT 49
78996: PUSH
78997: EMPTY
78998: LIST
78999: LIST
79000: LIST
79001: ST_TO_ADDR
// if not result then
79002: LD_VAR 0 3
79006: NOT
79007: IFFALSE 79011
// exit ;
79009: GO 79467
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79011: LD_ADDR_VAR 0 5
79015: PUSH
79016: LD_INT 81
79018: PUSH
79019: LD_VAR 0 8
79023: PUSH
79024: EMPTY
79025: LIST
79026: LIST
79027: PPUSH
79028: CALL_OW 69
79032: ST_TO_ADDR
// for i in result do
79033: LD_ADDR_VAR 0 4
79037: PUSH
79038: LD_VAR 0 3
79042: PUSH
79043: FOR_IN
79044: IFFALSE 79465
// begin tag := GetTag ( i ) + 1 ;
79046: LD_ADDR_VAR 0 9
79050: PUSH
79051: LD_VAR 0 4
79055: PPUSH
79056: CALL_OW 110
79060: PUSH
79061: LD_INT 1
79063: PLUS
79064: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79065: LD_ADDR_VAR 0 7
79069: PUSH
79070: LD_VAR 0 4
79074: PPUSH
79075: CALL_OW 250
79079: PPUSH
79080: LD_VAR 0 4
79084: PPUSH
79085: CALL_OW 251
79089: PPUSH
79090: LD_INT 6
79092: PPUSH
79093: CALL 78666 0 3
79097: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79098: LD_VAR 0 4
79102: PPUSH
79103: CALL_OW 247
79107: PUSH
79108: LD_INT 2
79110: EQUAL
79111: PUSH
79112: LD_VAR 0 7
79116: AND
79117: PUSH
79118: LD_VAR 0 4
79122: PPUSH
79123: CALL_OW 264
79127: PUSH
79128: LD_VAR 0 10
79132: IN
79133: NOT
79134: AND
79135: IFFALSE 79174
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79137: LD_VAR 0 4
79141: PPUSH
79142: LD_VAR 0 7
79146: PUSH
79147: LD_INT 1
79149: ARRAY
79150: PUSH
79151: LD_INT 1
79153: ARRAY
79154: PPUSH
79155: LD_VAR 0 7
79159: PUSH
79160: LD_INT 1
79162: ARRAY
79163: PUSH
79164: LD_INT 2
79166: ARRAY
79167: PPUSH
79168: CALL_OW 116
79172: GO 79463
// if path > tag then
79174: LD_VAR 0 2
79178: PUSH
79179: LD_VAR 0 9
79183: GREATER
79184: IFFALSE 79392
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79186: LD_ADDR_VAR 0 6
79190: PUSH
79191: LD_VAR 0 5
79195: PPUSH
79196: LD_INT 91
79198: PUSH
79199: LD_VAR 0 4
79203: PUSH
79204: LD_INT 8
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: LIST
79211: PPUSH
79212: CALL_OW 72
79216: ST_TO_ADDR
// if nearEnemy then
79217: LD_VAR 0 6
79221: IFFALSE 79290
// begin if GetWeapon ( i ) = ru_time_lapser then
79223: LD_VAR 0 4
79227: PPUSH
79228: CALL_OW 264
79232: PUSH
79233: LD_INT 49
79235: EQUAL
79236: IFFALSE 79264
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79238: LD_VAR 0 4
79242: PPUSH
79243: LD_VAR 0 6
79247: PPUSH
79248: LD_VAR 0 4
79252: PPUSH
79253: CALL_OW 74
79257: PPUSH
79258: CALL_OW 112
79262: GO 79288
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79264: LD_VAR 0 4
79268: PPUSH
79269: LD_VAR 0 6
79273: PPUSH
79274: LD_VAR 0 4
79278: PPUSH
79279: CALL_OW 74
79283: PPUSH
79284: CALL_OW 115
// end else
79288: GO 79390
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79290: LD_VAR 0 4
79294: PPUSH
79295: LD_VAR 0 2
79299: PUSH
79300: LD_VAR 0 9
79304: ARRAY
79305: PUSH
79306: LD_INT 1
79308: ARRAY
79309: PPUSH
79310: LD_VAR 0 2
79314: PUSH
79315: LD_VAR 0 9
79319: ARRAY
79320: PUSH
79321: LD_INT 2
79323: ARRAY
79324: PPUSH
79325: CALL_OW 297
79329: PUSH
79330: LD_INT 6
79332: GREATER
79333: IFFALSE 79376
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79335: LD_VAR 0 4
79339: PPUSH
79340: LD_VAR 0 2
79344: PUSH
79345: LD_VAR 0 9
79349: ARRAY
79350: PUSH
79351: LD_INT 1
79353: ARRAY
79354: PPUSH
79355: LD_VAR 0 2
79359: PUSH
79360: LD_VAR 0 9
79364: ARRAY
79365: PUSH
79366: LD_INT 2
79368: ARRAY
79369: PPUSH
79370: CALL_OW 114
79374: GO 79390
// SetTag ( i , tag ) ;
79376: LD_VAR 0 4
79380: PPUSH
79381: LD_VAR 0 9
79385: PPUSH
79386: CALL_OW 109
// end else
79390: GO 79463
// if enemy then
79392: LD_VAR 0 5
79396: IFFALSE 79463
// begin if GetWeapon ( i ) = ru_time_lapser then
79398: LD_VAR 0 4
79402: PPUSH
79403: CALL_OW 264
79407: PUSH
79408: LD_INT 49
79410: EQUAL
79411: IFFALSE 79439
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79413: LD_VAR 0 4
79417: PPUSH
79418: LD_VAR 0 5
79422: PPUSH
79423: LD_VAR 0 4
79427: PPUSH
79428: CALL_OW 74
79432: PPUSH
79433: CALL_OW 112
79437: GO 79463
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79439: LD_VAR 0 4
79443: PPUSH
79444: LD_VAR 0 5
79448: PPUSH
79449: LD_VAR 0 4
79453: PPUSH
79454: CALL_OW 74
79458: PPUSH
79459: CALL_OW 115
// end ; end ;
79463: GO 79043
79465: POP
79466: POP
// end ;
79467: LD_VAR 0 3
79471: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79472: LD_INT 0
79474: PPUSH
79475: PPUSH
79476: PPUSH
// if not unit or IsInUnit ( unit ) then
79477: LD_VAR 0 1
79481: NOT
79482: PUSH
79483: LD_VAR 0 1
79487: PPUSH
79488: CALL_OW 310
79492: OR
79493: IFFALSE 79497
// exit ;
79495: GO 79588
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79497: LD_ADDR_VAR 0 4
79501: PUSH
79502: LD_VAR 0 1
79506: PPUSH
79507: CALL_OW 250
79511: PPUSH
79512: LD_VAR 0 2
79516: PPUSH
79517: LD_INT 1
79519: PPUSH
79520: CALL_OW 272
79524: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79525: LD_ADDR_VAR 0 5
79529: PUSH
79530: LD_VAR 0 1
79534: PPUSH
79535: CALL_OW 251
79539: PPUSH
79540: LD_VAR 0 2
79544: PPUSH
79545: LD_INT 1
79547: PPUSH
79548: CALL_OW 273
79552: ST_TO_ADDR
// if ValidHex ( x , y ) then
79553: LD_VAR 0 4
79557: PPUSH
79558: LD_VAR 0 5
79562: PPUSH
79563: CALL_OW 488
79567: IFFALSE 79588
// ComTurnXY ( unit , x , y ) ;
79569: LD_VAR 0 1
79573: PPUSH
79574: LD_VAR 0 4
79578: PPUSH
79579: LD_VAR 0 5
79583: PPUSH
79584: CALL_OW 118
// end ;
79588: LD_VAR 0 3
79592: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79593: LD_INT 0
79595: PPUSH
79596: PPUSH
// result := false ;
79597: LD_ADDR_VAR 0 3
79601: PUSH
79602: LD_INT 0
79604: ST_TO_ADDR
// if not units then
79605: LD_VAR 0 2
79609: NOT
79610: IFFALSE 79614
// exit ;
79612: GO 79659
// for i in units do
79614: LD_ADDR_VAR 0 4
79618: PUSH
79619: LD_VAR 0 2
79623: PUSH
79624: FOR_IN
79625: IFFALSE 79657
// if See ( side , i ) then
79627: LD_VAR 0 1
79631: PPUSH
79632: LD_VAR 0 4
79636: PPUSH
79637: CALL_OW 292
79641: IFFALSE 79655
// begin result := true ;
79643: LD_ADDR_VAR 0 3
79647: PUSH
79648: LD_INT 1
79650: ST_TO_ADDR
// exit ;
79651: POP
79652: POP
79653: GO 79659
// end ;
79655: GO 79624
79657: POP
79658: POP
// end ;
79659: LD_VAR 0 3
79663: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79664: LD_INT 0
79666: PPUSH
79667: PPUSH
79668: PPUSH
79669: PPUSH
// if not unit or not points then
79670: LD_VAR 0 1
79674: NOT
79675: PUSH
79676: LD_VAR 0 2
79680: NOT
79681: OR
79682: IFFALSE 79686
// exit ;
79684: GO 79776
// dist := 99999 ;
79686: LD_ADDR_VAR 0 5
79690: PUSH
79691: LD_INT 99999
79693: ST_TO_ADDR
// for i in points do
79694: LD_ADDR_VAR 0 4
79698: PUSH
79699: LD_VAR 0 2
79703: PUSH
79704: FOR_IN
79705: IFFALSE 79774
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79707: LD_ADDR_VAR 0 6
79711: PUSH
79712: LD_VAR 0 1
79716: PPUSH
79717: LD_VAR 0 4
79721: PUSH
79722: LD_INT 1
79724: ARRAY
79725: PPUSH
79726: LD_VAR 0 4
79730: PUSH
79731: LD_INT 2
79733: ARRAY
79734: PPUSH
79735: CALL_OW 297
79739: ST_TO_ADDR
// if tmpDist < dist then
79740: LD_VAR 0 6
79744: PUSH
79745: LD_VAR 0 5
79749: LESS
79750: IFFALSE 79772
// begin result := i ;
79752: LD_ADDR_VAR 0 3
79756: PUSH
79757: LD_VAR 0 4
79761: ST_TO_ADDR
// dist := tmpDist ;
79762: LD_ADDR_VAR 0 5
79766: PUSH
79767: LD_VAR 0 6
79771: ST_TO_ADDR
// end ; end ;
79772: GO 79704
79774: POP
79775: POP
// end ;
79776: LD_VAR 0 3
79780: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79781: LD_INT 0
79783: PPUSH
// uc_side := side ;
79784: LD_ADDR_OWVAR 20
79788: PUSH
79789: LD_VAR 0 1
79793: ST_TO_ADDR
// uc_nation := 3 ;
79794: LD_ADDR_OWVAR 21
79798: PUSH
79799: LD_INT 3
79801: ST_TO_ADDR
// vc_chassis := 25 ;
79802: LD_ADDR_OWVAR 37
79806: PUSH
79807: LD_INT 25
79809: ST_TO_ADDR
// vc_engine := engine_siberite ;
79810: LD_ADDR_OWVAR 39
79814: PUSH
79815: LD_INT 3
79817: ST_TO_ADDR
// vc_control := control_computer ;
79818: LD_ADDR_OWVAR 38
79822: PUSH
79823: LD_INT 3
79825: ST_TO_ADDR
// vc_weapon := 59 ;
79826: LD_ADDR_OWVAR 40
79830: PUSH
79831: LD_INT 59
79833: ST_TO_ADDR
// result := CreateVehicle ;
79834: LD_ADDR_VAR 0 5
79838: PUSH
79839: CALL_OW 45
79843: ST_TO_ADDR
// SetDir ( result , d ) ;
79844: LD_VAR 0 5
79848: PPUSH
79849: LD_VAR 0 4
79853: PPUSH
79854: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79858: LD_VAR 0 5
79862: PPUSH
79863: LD_VAR 0 2
79867: PPUSH
79868: LD_VAR 0 3
79872: PPUSH
79873: LD_INT 0
79875: PPUSH
79876: CALL_OW 48
// end ;
79880: LD_VAR 0 5
79884: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79885: LD_INT 0
79887: PPUSH
79888: PPUSH
79889: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79890: LD_ADDR_VAR 0 2
79894: PUSH
79895: LD_INT 0
79897: PUSH
79898: LD_INT 0
79900: PUSH
79901: LD_INT 0
79903: PUSH
79904: LD_INT 0
79906: PUSH
79907: EMPTY
79908: LIST
79909: LIST
79910: LIST
79911: LIST
79912: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79913: LD_VAR 0 1
79917: NOT
79918: PUSH
79919: LD_VAR 0 1
79923: PPUSH
79924: CALL_OW 264
79928: PUSH
79929: LD_INT 12
79931: PUSH
79932: LD_INT 51
79934: PUSH
79935: LD_INT 32
79937: PUSH
79938: LD_INT 89
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: LIST
79945: LIST
79946: IN
79947: NOT
79948: OR
79949: IFFALSE 79953
// exit ;
79951: GO 80051
// for i := 1 to 3 do
79953: LD_ADDR_VAR 0 3
79957: PUSH
79958: DOUBLE
79959: LD_INT 1
79961: DEC
79962: ST_TO_ADDR
79963: LD_INT 3
79965: PUSH
79966: FOR_TO
79967: IFFALSE 80049
// begin tmp := GetCargo ( cargo , i ) ;
79969: LD_ADDR_VAR 0 4
79973: PUSH
79974: LD_VAR 0 1
79978: PPUSH
79979: LD_VAR 0 3
79983: PPUSH
79984: CALL_OW 289
79988: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79989: LD_ADDR_VAR 0 2
79993: PUSH
79994: LD_VAR 0 2
79998: PPUSH
79999: LD_VAR 0 3
80003: PPUSH
80004: LD_VAR 0 4
80008: PPUSH
80009: CALL_OW 1
80013: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80014: LD_ADDR_VAR 0 2
80018: PUSH
80019: LD_VAR 0 2
80023: PPUSH
80024: LD_INT 4
80026: PPUSH
80027: LD_VAR 0 2
80031: PUSH
80032: LD_INT 4
80034: ARRAY
80035: PUSH
80036: LD_VAR 0 4
80040: PLUS
80041: PPUSH
80042: CALL_OW 1
80046: ST_TO_ADDR
// end ;
80047: GO 79966
80049: POP
80050: POP
// end ;
80051: LD_VAR 0 2
80055: RET
// export function Length ( array ) ; begin
80056: LD_INT 0
80058: PPUSH
// result := array + 0 ;
80059: LD_ADDR_VAR 0 2
80063: PUSH
80064: LD_VAR 0 1
80068: PUSH
80069: LD_INT 0
80071: PLUS
80072: ST_TO_ADDR
// end ;
80073: LD_VAR 0 2
80077: RET
// export function PrepareArray ( array ) ; begin
80078: LD_INT 0
80080: PPUSH
// result := array diff 0 ;
80081: LD_ADDR_VAR 0 2
80085: PUSH
80086: LD_VAR 0 1
80090: PUSH
80091: LD_INT 0
80093: DIFF
80094: ST_TO_ADDR
// if not result [ 1 ] then
80095: LD_VAR 0 2
80099: PUSH
80100: LD_INT 1
80102: ARRAY
80103: NOT
80104: IFFALSE 80124
// result := Delete ( result , 1 ) ;
80106: LD_ADDR_VAR 0 2
80110: PUSH
80111: LD_VAR 0 2
80115: PPUSH
80116: LD_INT 1
80118: PPUSH
80119: CALL_OW 3
80123: ST_TO_ADDR
// end ;
80124: LD_VAR 0 2
80128: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80129: LD_INT 0
80131: PPUSH
80132: PPUSH
80133: PPUSH
80134: PPUSH
// sibRocketRange := 25 ;
80135: LD_ADDR_VAR 0 6
80139: PUSH
80140: LD_INT 25
80142: ST_TO_ADDR
// result := false ;
80143: LD_ADDR_VAR 0 4
80147: PUSH
80148: LD_INT 0
80150: ST_TO_ADDR
// for i := 0 to 5 do
80151: LD_ADDR_VAR 0 5
80155: PUSH
80156: DOUBLE
80157: LD_INT 0
80159: DEC
80160: ST_TO_ADDR
80161: LD_INT 5
80163: PUSH
80164: FOR_TO
80165: IFFALSE 80232
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80167: LD_VAR 0 1
80171: PPUSH
80172: LD_VAR 0 5
80176: PPUSH
80177: LD_VAR 0 6
80181: PPUSH
80182: CALL_OW 272
80186: PPUSH
80187: LD_VAR 0 2
80191: PPUSH
80192: LD_VAR 0 5
80196: PPUSH
80197: LD_VAR 0 6
80201: PPUSH
80202: CALL_OW 273
80206: PPUSH
80207: LD_VAR 0 3
80211: PPUSH
80212: CALL_OW 309
80216: IFFALSE 80230
// begin result := true ;
80218: LD_ADDR_VAR 0 4
80222: PUSH
80223: LD_INT 1
80225: ST_TO_ADDR
// exit ;
80226: POP
80227: POP
80228: GO 80234
// end ;
80230: GO 80164
80232: POP
80233: POP
// end ;
80234: LD_VAR 0 4
80238: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80239: LD_INT 0
80241: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80242: LD_VAR 0 1
80246: PPUSH
80247: LD_VAR 0 2
80251: PPUSH
80252: LD_INT 0
80254: PPUSH
80255: LD_INT 0
80257: PPUSH
80258: LD_INT 1
80260: PPUSH
80261: LD_INT 0
80263: PPUSH
80264: CALL_OW 587
// end ;
80268: LD_VAR 0 3
80272: RET
