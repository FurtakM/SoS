// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1519 0 0
// Nef_PrepareNature ;
 250: CALL 4421 0 0
// MissionIntro ;
 254: CALL 10430 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 , 4 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 , 0 ] [ Difficulty ] ;
 413: LD_ADDR_EXP 33
 417: PUSH
 418: LD_INT 2
 420: NEG
 421: PUSH
 422: LD_INT 1
 424: NEG
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 444: LD_ADDR_EXP 34
 448: PUSH
 449: LD_INT 135
 451: PUSH
 452: LD_INT 8
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 135
 461: PUSH
 462: LD_INT 4
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 134
 471: PUSH
 472: LD_INT 19
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 132
 481: PUSH
 482: LD_INT 26
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 128
 491: PUSH
 492: LD_INT 31
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 123
 501: PUSH
 502: LD_INT 37
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 118
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 112
 521: PUSH
 522: LD_INT 51
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 106
 531: PUSH
 532: LD_INT 57
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 99
 541: PUSH
 542: LD_INT 62
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 93
 551: PUSH
 552: LD_INT 67
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 86
 561: PUSH
 562: LD_INT 72
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 78
 571: PUSH
 572: LD_INT 75
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 71
 581: PUSH
 582: LD_INT 81
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 69
 591: PUSH
 592: LD_INT 88
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: LD_INT 71
 601: PUSH
 602: LD_INT 95
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 74
 611: PUSH
 612: LD_INT 103
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 80
 621: PUSH
 622: LD_INT 113
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 84
 631: PUSH
 632: LD_INT 121
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 89
 641: PUSH
 642: LD_INT 132
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 92
 651: PUSH
 652: LD_INT 142
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 93
 661: PUSH
 662: LD_INT 151
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PUSH
 669: LD_INT 91
 671: PUSH
 672: LD_INT 157
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 90
 681: PUSH
 682: LD_INT 163
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 93
 691: PUSH
 692: LD_INT 171
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 92
 701: PUSH
 702: LD_INT 177
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 737: LD_ADDR_EXP 35
 741: PUSH
 742: LD_INT 135
 744: PUSH
 745: LD_INT 8
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 135
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 134
 764: PUSH
 765: LD_INT 19
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 132
 774: PUSH
 775: LD_INT 26
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 128
 784: PUSH
 785: LD_INT 31
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 123
 794: PUSH
 795: LD_INT 37
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 118
 804: PUSH
 805: LD_INT 45
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 112
 814: PUSH
 815: LD_INT 51
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 106
 824: PUSH
 825: LD_INT 57
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 99
 834: PUSH
 835: LD_INT 62
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 104
 844: PUSH
 845: LD_INT 71
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 110
 854: PUSH
 855: LD_INT 78
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: LD_INT 119
 864: PUSH
 865: LD_INT 88
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 128
 874: PUSH
 875: LD_INT 97
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PUSH
 882: LD_INT 135
 884: PUSH
 885: LD_INT 106
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 141
 894: PUSH
 895: LD_INT 120
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 143
 904: PUSH
 905: LD_INT 132
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 143
 914: PUSH
 915: LD_INT 142
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PUSH
 922: LD_INT 140
 924: PUSH
 925: LD_INT 149
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 132
 934: PUSH
 935: LD_INT 153
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 125
 944: PUSH
 945: LD_INT 155
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 115
 954: PUSH
 955: LD_INT 154
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 105
 964: PUSH
 965: LD_INT 153
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 93
 974: PUSH
 975: LD_INT 151
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 91
 984: PUSH
 985: LD_INT 157
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 90
 994: PUSH
 995: LD_INT 163
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 93
1004: PUSH
1005: LD_INT 171
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 92
1014: PUSH
1015: LD_INT 177
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 , 25 ] [ Difficulty ] ;
1052: LD_ADDR_EXP 36
1056: PUSH
1057: LD_INT 40
1059: PUSH
1060: LD_INT 35
1062: PUSH
1063: LD_INT 30
1065: PUSH
1066: LD_INT 25
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_OWVAR 67
1079: ARRAY
1080: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1081: LD_ADDR_EXP 37
1085: PUSH
1086: LD_INT 50
1088: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 , 15 ] [ Difficulty ] ;
1089: LD_ADDR_EXP 14
1093: PUSH
1094: LD_INT 21
1096: PUSH
1097: LD_INT 19
1099: PUSH
1100: LD_INT 17
1102: PUSH
1103: LD_INT 15
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_OWVAR 67
1116: ARRAY
1117: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1118: LD_ADDR_EXP 38
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 4
1131: PUSH
1132: LD_INT 4
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_OWVAR 67
1145: ARRAY
1146: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 4
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// arabianTroopsMin = 2 ;
1176: LD_ADDR_EXP 40
1180: PUSH
1181: LD_INT 2
1183: ST_TO_ADDR
// arabianTroopsMax = 4 ;
1184: LD_ADDR_EXP 41
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// end ;
1192: LD_VAR 0 1
1196: RET
// every 0 0$1 trigger debugMode do var i ;
1197: LD_EXP 31
1201: IFFALSE 1516
1203: GO 1205
1205: DISABLE
1206: LD_INT 0
1208: PPUSH
// begin enable ;
1209: ENABLE
// FogOff ( your_side ) ;
1210: LD_OWVAR 2
1214: PPUSH
1215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1219: LD_ADDR_VAR 0 1
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_OWVAR 2
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 2
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 21
1251: PUSH
1252: LD_INT 2
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1290
// SetLives ( i , 1000 ) ;
1276: LD_VAR 0 1
1280: PPUSH
1281: LD_INT 1000
1283: PPUSH
1284: CALL_OW 234
1288: GO 1273
1290: POP
1291: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 22
1299: PUSH
1300: LD_OWVAR 2
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 21
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: FOR_IN
1329: IFFALSE 1393
// begin SetSkill ( i , skill_combat , 10 ) ;
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_INT 10
1341: PPUSH
1342: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1346: LD_VAR 0 1
1350: PPUSH
1351: LD_INT 2
1353: PPUSH
1354: LD_INT 10
1356: PPUSH
1357: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1361: LD_VAR 0 1
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 10
1371: PPUSH
1372: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 237
// end ;
1391: GO 1328
1393: POP
1394: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_OWVAR 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 30
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 30
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 69
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1514
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL_OW 274
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 9999
1467: PPUSH
1468: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1472: LD_VAR 0 1
1476: PPUSH
1477: CALL_OW 274
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 9999
1487: PPUSH
1488: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 274
1501: PPUSH
1502: LD_INT 3
1504: PPUSH
1505: LD_INT 9999
1507: PPUSH
1508: CALL_OW 277
// end ;
1512: GO 1449
1514: POP
1515: POP
// end ; end_of_file
1516: PPOPN 1
1518: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1519: LD_INT 0
1521: PPUSH
// randomsToSave = [ ] ;
1522: LD_ADDR_EXP 62
1526: PUSH
1527: EMPTY
1528: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1529: LD_ADDR_EXP 57
1533: PUSH
1534: EMPTY
1535: ST_TO_ADDR
// ruCars = [ ] ;
1536: LD_ADDR_EXP 61
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1543: CALL 2351 0 0
// PrepareHeroes ;
1547: CALL 1556 0 0
// end ;
1551: LD_VAR 0 1
1555: RET
// function PrepareHeroes ; var i , current ; begin
1556: LD_INT 0
1558: PPUSH
1559: PPUSH
1560: PPUSH
// uc_side = 3 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 3
1568: ST_TO_ADDR
// uc_nation = 3 ;
1569: LD_ADDR_OWVAR 21
1573: PUSH
1574: LD_INT 3
1576: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1577: LD_ADDR_EXP 42
1581: PUSH
1582: LD_STRING Burlak
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: CALL 9409 0 3
1595: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1596: LD_ADDR_EXP 43
1600: PUSH
1601: LD_STRING Gnyevko
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: CALL 9409 0 3
1614: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1615: LD_ADDR_EXP 45
1619: PUSH
1620: LD_STRING Kovalyuk
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 3
1628: PPUSH
1629: CALL 9409 0 3
1633: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1634: LD_ADDR_EXP 44
1638: PUSH
1639: LD_STRING Kirilenkova
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 4
1647: PPUSH
1648: CALL 9409 0 3
1652: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1653: LD_ADDR_EXP 46
1657: PUSH
1658: LD_STRING Belkov
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL 9409 0 3
1671: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1672: LD_ADDR_EXP 47
1676: PUSH
1677: LD_STRING Belkov2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 9409 0 3
1690: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1691: LD_ADDR_EXP 48
1695: PUSH
1696: LD_STRING Scholtze
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 4
1704: PPUSH
1705: CALL 9409 0 3
1709: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1710: LD_ADDR_EXP 52
1714: PUSH
1715: LD_STRING Popov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL 9409 0 3
1728: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1729: LD_ADDR_EXP 53
1733: PUSH
1734: LD_STRING Platonov
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL 9409 0 3
1747: ST_TO_ADDR
// uc_side = 6 ;
1748: LD_ADDR_OWVAR 20
1752: PUSH
1753: LD_INT 6
1755: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1756: LD_ADDR_EXP 54
1760: PUSH
1761: LD_STRING Gaydar
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 9409 0 3
1774: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1775: LD_ADDR_EXP 49
1779: PUSH
1780: LD_STRING Kuzmov
1782: PPUSH
1783: LD_INT 0
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL 9409 0 3
1793: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1794: LD_EXP 49
1798: PPUSH
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 108
1804: PPUSH
1805: LD_INT 5
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 50
// ComHold ( Kuzmov ) ;
1815: LD_EXP 49
1819: PPUSH
1820: CALL_OW 140
// uc_side = 3 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1832: LD_EXP 42
1836: PUSH
1837: LD_EXP 43
1841: PUSH
1842: LD_EXP 44
1846: PUSH
1847: LD_EXP 45
1851: PUSH
1852: LD_EXP 46
1856: PUSH
1857: LD_EXP 47
1861: PUSH
1862: LD_EXP 48
1866: PUSH
1867: LD_EXP 52
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 9492 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1892: LD_ADDR_EXP 50
1896: PUSH
1897: LD_STRING 03_other_survivors
1899: PPUSH
1900: CALL_OW 31
1904: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1905: LD_ADDR_EXP 51
1909: PUSH
1910: LD_STRING 03_other_kirov
1912: PPUSH
1913: CALL_OW 31
1917: ST_TO_ADDR
// for i in other_survivors do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_EXP 50
1927: PUSH
1928: FOR_IN
1929: IFFALSE 1994
// begin if ruCars then
1931: LD_EXP 61
1935: IFFALSE 1977
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_EXP 61
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1955: LD_ADDR_EXP 61
1959: PUSH
1960: LD_EXP 61
1964: PUSH
1965: LD_EXP 61
1969: PUSH
1970: LD_INT 1
1972: ARRAY
1973: DIFF
1974: ST_TO_ADDR
// end else
1975: GO 1992
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1977: LD_VAR 0 2
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 49
// end ;
1992: GO 1928
1994: POP
1995: POP
// for i in other_kirov_survivors do
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_EXP 51
2005: PUSH
2006: FOR_IN
2007: IFFALSE 2072
// begin if ruCars then
2009: LD_EXP 61
2013: IFFALSE 2055
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_EXP 61
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PPUSH
2029: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2033: LD_ADDR_EXP 61
2037: PUSH
2038: LD_EXP 61
2042: PUSH
2043: LD_EXP 61
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: DIFF
2052: ST_TO_ADDR
// end else
2053: GO 2070
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2055: LD_VAR 0 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 0
2065: PPUSH
2066: CALL_OW 49
// end ;
2070: GO 2006
2072: POP
2073: POP
// PrepareSoldier ( sex_male , 1 ) ;
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 381
// dialogRus = CreateHuman ;
2084: LD_ADDR_EXP 59
2088: PUSH
2089: CALL_OW 44
2093: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2094: LD_EXP 50
2098: PUSH
2099: LD_EXP 51
2103: PLUS
2104: PUSH
2105: LD_EXP 43
2109: PUSH
2110: LD_EXP 44
2114: PUSH
2115: LD_EXP 45
2119: PUSH
2120: LD_EXP 46
2124: PUSH
2125: LD_EXP 47
2129: PUSH
2130: LD_EXP 48
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PLUS
2143: PUSH
2144: LD_INT 8
2146: LESS
2147: IFFALSE 2346
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_EXP 50
2158: PUSH
2159: LD_EXP 51
2163: PLUS
2164: PUSH
2165: LD_EXP 43
2169: PUSH
2170: LD_EXP 44
2174: PUSH
2175: LD_EXP 45
2179: PUSH
2180: LD_EXP 46
2184: PUSH
2185: LD_EXP 47
2189: PUSH
2190: LD_EXP 48
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PLUS
2203: ST_TO_ADDR
// current = 8 - current ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 8
2211: PUSH
2212: LD_VAR 0 3
2216: MINUS
2217: ST_TO_ADDR
// for i := 1 to current do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_VAR 0 3
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2344
// begin uc_nation = 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// uc_side = 3 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2252: LD_INT 0
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 4
2260: PPUSH
2261: CALL_OW 12
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 3
2271: PPUSH
2272: CALL_OW 12
2276: PPUSH
2277: CALL_OW 380
// if ruCars then
2281: LD_EXP 61
2285: IFFALSE 2327
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2287: CALL_OW 44
2291: PPUSH
2292: LD_EXP 61
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2305: LD_ADDR_EXP 61
2309: PUSH
2310: LD_EXP 61
2314: PUSH
2315: LD_EXP 61
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: DIFF
2324: ST_TO_ADDR
// end else
2325: GO 2342
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_INT 2
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL_OW 49
// end ;
2342: GO 2233
2344: POP
2345: POP
// end ; end ;
2346: LD_VAR 0 1
2350: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2351: LD_INT 0
2353: PPUSH
2354: PPUSH
2355: PPUSH
// uc_side = 3 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 3
2363: ST_TO_ADDR
// uc_nation = 3 ;
2364: LD_ADDR_OWVAR 21
2368: PUSH
2369: LD_INT 3
2371: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_EXP 5
2386: PUSH
2387: FOR_TO
2388: IFFALSE 2537
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2390: LD_ADDR_OWVAR 37
2394: PUSH
2395: LD_EXP 5
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_EXP 5
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_INT 2
2428: ARRAY
2429: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2430: LD_ADDR_OWVAR 38
2434: PUSH
2435: LD_EXP 5
2439: PUSH
2440: LD_VAR 0 2
2444: ARRAY
2445: PUSH
2446: LD_INT 3
2448: ARRAY
2449: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_EXP 5
2459: PUSH
2460: LD_VAR 0 2
2464: ARRAY
2465: PUSH
2466: LD_INT 4
2468: ARRAY
2469: ST_TO_ADDR
// uc_direction := 3 ;
2470: LD_ADDR_OWVAR 24
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2478: LD_ADDR_OWVAR 41
2482: PUSH
2483: LD_INT 25
2485: PPUSH
2486: LD_INT 30
2488: PPUSH
2489: CALL_OW 12
2493: ST_TO_ADDR
// car := CreateVehicle ;
2494: LD_ADDR_VAR 0 3
2498: PUSH
2499: CALL_OW 45
2503: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2504: LD_ADDR_EXP 61
2508: PUSH
2509: LD_EXP 61
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 2
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// end ;
2535: GO 2387
2537: POP
2538: POP
// end ;
2539: LD_VAR 0 1
2543: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2544: LD_INT 0
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// rnd = rand ( 1 , 4 ) ;
2554: LD_ADDR_VAR 0 3
2558: PUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 12
2569: ST_TO_ADDR
// uc_side = 6 ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_INT 6
2577: ST_TO_ADDR
// uc_nation = 3 ;
2578: LD_ADDR_OWVAR 21
2582: PUSH
2583: LD_INT 3
2585: ST_TO_ADDR
// if rnd < 4 then
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 4
2593: LESS
2594: IFFALSE 2970
// begin vc_chassis = ru_medium_wheeled ;
2596: LD_ADDR_OWVAR 37
2600: PUSH
2601: LD_INT 21
2603: ST_TO_ADDR
// vc_control = control_manual ;
2604: LD_ADDR_OWVAR 38
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_engine = engine_combustion ;
2612: LD_ADDR_OWVAR 39
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2620: LD_ADDR_VAR 0 5
2624: PUSH
2625: LD_INT 1
2627: PPUSH
2628: LD_INT 100
2630: PPUSH
2631: CALL_OW 12
2635: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2636: LD_VAR 0 5
2640: PUSH
2641: LD_EXP 37
2645: PUSH
2646: LD_INT 1
2648: PLUS
2649: LESS
2650: IFFALSE 2662
// vc_weapon = ru_cargo_bay else
2652: LD_ADDR_OWVAR 40
2656: PUSH
2657: LD_INT 51
2659: ST_TO_ADDR
2660: GO 2693
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2662: LD_ADDR_OWVAR 40
2666: PUSH
2667: LD_INT 42
2669: PUSH
2670: LD_INT 43
2672: PUSH
2673: LD_INT 44
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 12
2691: ARRAY
2692: ST_TO_ADDR
// vehicle = CreateVehicle ;
2693: LD_ADDR_VAR 0 7
2697: PUSH
2698: CALL_OW 45
2702: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2703: LD_VAR 0 7
2707: PPUSH
2708: LD_INT 3
2710: PPUSH
2711: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2715: LD_VAR 0 7
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 12
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: CALL_OW 12
2754: PPUSH
2755: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2759: CALL_OW 44
2763: PPUSH
2764: LD_VAR 0 7
2768: PPUSH
2769: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2773: LD_OWVAR 40
2777: PUSH
2778: LD_INT 51
2780: EQUAL
2781: IFFALSE 2798
// AddCargo ( vehicle , mat_cans , 100 ) ;
2783: LD_VAR 0 7
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2798: LD_VAR 0 7
2802: PPUSH
2803: LD_INT 500
2805: PPUSH
2806: LD_INT 1000
2808: PPUSH
2809: CALL_OW 12
2813: PPUSH
2814: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_INT 2
2828: PPUSH
2829: CALL_OW 12
2833: ST_TO_ADDR
// if rnd = 1 then
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 1
2841: EQUAL
2842: IFFALSE 2907
// for i := 3 to russianCargoPath1 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 3
2852: DEC
2853: ST_TO_ADDR
2854: LD_EXP 34
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2903
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2862: LD_VAR 0 7
2866: PPUSH
2867: LD_EXP 34
2871: PUSH
2872: LD_VAR 0 2
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: LD_EXP 34
2886: PUSH
2887: LD_VAR 0 2
2891: ARRAY
2892: PUSH
2893: LD_INT 2
2895: ARRAY
2896: PPUSH
2897: CALL_OW 171
2901: GO 2859
2903: POP
2904: POP
2905: GO 2968
// for i := 3 to russianCargoPath2 do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: DOUBLE
2913: LD_INT 3
2915: DEC
2916: ST_TO_ADDR
2917: LD_EXP 35
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2966
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2925: LD_VAR 0 7
2929: PPUSH
2930: LD_EXP 35
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 2
2954: ARRAY
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PPUSH
2960: CALL_OW 171
2964: GO 2922
2966: POP
2967: POP
// end else
2968: GO 3309
// begin for i := 1 to rand ( 1 , 3 ) do
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: DOUBLE
2976: LD_INT 1
2978: DEC
2979: ST_TO_ADDR
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 12
2990: PUSH
2991: FOR_TO
2992: IFFALSE 3070
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: CALL_OW 12
3007: PPUSH
3008: LD_INT 2
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 12
3018: PPUSH
3019: CALL_OW 380
// unit = CreateHuman ;
3023: LD_ADDR_VAR 0 6
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3033: LD_VAR 0 6
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3048: LD_VAR 0 6
3052: PPUSH
3053: LD_INT 500
3055: PPUSH
3056: LD_INT 1000
3058: PPUSH
3059: CALL_OW 12
3063: PPUSH
3064: CALL_OW 234
// end ;
3068: GO 2991
3070: POP
3071: POP
// rnd2 = rand ( 1 , 2 ) ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: CALL_OW 12
3087: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3088: LD_ADDR_VAR 0 8
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_INT 6
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 21
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: EMPTY
3117: LIST
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 60
3124: PUSH
3125: EMPTY
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3143: LD_ADDR_VAR 0 8
3147: PUSH
3148: LD_VAR 0 8
3152: PUSH
3153: LD_EXP 56
3157: DIFF
3158: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3159: LD_ADDR_VAR 0 8
3163: PUSH
3164: LD_VAR 0 8
3168: PUSH
3169: LD_EXP 57
3173: DIFF
3174: ST_TO_ADDR
// if rnd2 = 1 then
3175: LD_VAR 0 4
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: IFFALSE 3248
// for i := 3 to russianCargoPath1 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 3
3193: DEC
3194: ST_TO_ADDR
3195: LD_EXP 34
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3244
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3203: LD_VAR 0 8
3207: PPUSH
3208: LD_EXP 34
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PPUSH
3223: LD_EXP 34
3227: PUSH
3228: LD_VAR 0 2
3232: ARRAY
3233: PUSH
3234: LD_INT 2
3236: ARRAY
3237: PPUSH
3238: CALL_OW 171
3242: GO 3200
3244: POP
3245: POP
3246: GO 3309
// for i := 3 to russianCargoPath2 do
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: DOUBLE
3254: LD_INT 3
3256: DEC
3257: ST_TO_ADDR
3258: LD_EXP 35
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3307
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3266: LD_VAR 0 8
3270: PPUSH
3271: LD_EXP 35
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 1
3284: ARRAY
3285: PPUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 2
3299: ARRAY
3300: PPUSH
3301: CALL_OW 171
3305: GO 3263
3307: POP
3308: POP
// end ; end ;
3309: LD_VAR 0 1
3313: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
// for i := 1 to 2 do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_INT 2
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3399
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3335: LD_INT 0
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 3
3346: PPUSH
3347: CALL_OW 12
3351: PPUSH
3352: CALL_OW 380
// unit = CreateHuman ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: CALL_OW 44
3365: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3381: LD_ADDR_EXP 57
3385: PUSH
3386: LD_EXP 57
3390: PUSH
3391: LD_VAR 0 3
3395: ADD
3396: ST_TO_ADDR
// end ;
3397: GO 3332
3399: POP
3400: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 380
// unit = CreateHuman ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3447: LD_ADDR_EXP 57
3451: PUSH
3452: LD_EXP 57
3456: PUSH
3457: LD_VAR 0 3
3461: ADD
3462: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3463: LD_EXP 57
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: LD_INT 54
3473: PPUSH
3474: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3478: LD_EXP 57
3482: PPUSH
3483: LD_INT 25
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 72
3497: PPUSH
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 95
3503: PPUSH
3504: LD_INT 52
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: CALL_OW 205
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3519: LD_INT 0
3521: PPUSH
// uc_side = 2 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 2
3529: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3530: LD_ADDR_EXP 63
3534: PUSH
3535: LD_STRING Heike
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL 9409 0 3
3548: ST_TO_ADDR
// if Difficulty >= 2 then
3549: LD_OWVAR 67
3553: PUSH
3554: LD_INT 2
3556: GREATEREQUAL
3557: IFFALSE 3572
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3559: LD_INT 51
3561: PPUSH
3562: LD_INT 2
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 322
// end ;
3572: LD_VAR 0 1
3576: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
// currentEnemyGroup = [ ] ;
3582: LD_ADDR_EXP 65
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: DOUBLE
3595: LD_INT 1
3597: DEC
3598: ST_TO_ADDR
3599: LD_EXP 39
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3860
// begin uc_side = 2 ;
3607: LD_ADDR_OWVAR 20
3611: PUSH
3612: LD_INT 2
3614: ST_TO_ADDR
// uc_nation = nation_arabian ;
3615: LD_ADDR_OWVAR 21
3619: PUSH
3620: LD_INT 2
3622: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3623: LD_ADDR_OWVAR 40
3627: PUSH
3628: LD_INT 23
3630: PUSH
3631: LD_INT 24
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 26
3639: PUSH
3640: LD_INT 27
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 5
3655: PPUSH
3656: CALL_OW 12
3660: ARRAY
3661: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3662: LD_OWVAR 40
3666: PUSH
3667: LD_INT 25
3669: PUSH
3670: LD_INT 26
3672: PUSH
3673: LD_INT 27
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: IN
3681: IFFALSE 3712
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3683: LD_ADDR_OWVAR 37
3687: PUSH
3688: LD_INT 13
3690: PUSH
3691: LD_INT 14
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: ST_TO_ADDR
3710: GO 3743
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3712: LD_ADDR_OWVAR 37
3716: PUSH
3717: LD_INT 12
3719: PUSH
3720: LD_INT 13
3722: PUSH
3723: LD_INT 14
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: ST_TO_ADDR
// vc_control = control_manual ;
3743: LD_ADDR_OWVAR 38
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// vc_engine = engine_combustion ;
3751: LD_ADDR_OWVAR 39
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3759: LD_ADDR_OWVAR 41
3763: PUSH
3764: LD_INT 100
3766: ST_TO_ADDR
// veh = CreateVehicle ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: CALL_OW 45
3776: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3777: LD_ADDR_EXP 65
3781: PUSH
3782: LD_EXP 65
3786: PUSH
3787: LD_VAR 0 3
3791: ADD
3792: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_INT 7
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 26
3815: EQUAL
3816: IFFALSE 3832
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3818: LD_INT 0
3820: PPUSH
3821: LD_EXP 33
3825: PPUSH
3826: CALL_OW 383
3830: GO 3844
// PrepareMechanic ( false , enemySkillLevel ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_EXP 32
3839: PPUSH
3840: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3844: CALL_OW 44
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3604
3860: POP
3861: POP
// end ;
3862: LD_VAR 0 1
3866: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
// currentEnemyGroup = [ ] ;
3872: LD_ADDR_EXP 65
3876: PUSH
3877: EMPTY
3878: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_EXP 40
3893: PPUSH
3894: LD_EXP 41
3898: PPUSH
3899: CALL_OW 12
3903: PUSH
3904: FOR_TO
3905: IFFALSE 3984
// begin uc_side = 2 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 2
3914: ST_TO_ADDR
// uc_nation = nation_arabian ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 2
3922: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_EXP 32
3930: PUSH
3931: LD_INT 1
3933: MINUS
3934: PPUSH
3935: CALL_OW 381
// unit = CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3949: LD_ADDR_EXP 65
3953: PUSH
3954: LD_EXP 65
3958: PUSH
3959: LD_VAR 0 4
3963: ADD
3964: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 1
3974: PPUSH
3975: LD_INT 0
3977: PPUSH
3978: CALL_OW 49
// end ;
3982: GO 3904
3984: POP
3985: POP
// for i := 1 to rand ( 1 , 3 ) do
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 12
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4083
// begin uc_side = 2 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 2
4017: ST_TO_ADDR
// uc_nation = nation_arabian ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 32
4033: PPUSH
4034: CALL_OW 384
// unit = CreateHuman ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4048: LD_ADDR_EXP 65
4052: PUSH
4053: LD_EXP 65
4057: PUSH
4058: LD_VAR 0 4
4062: ADD
4063: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4064: LD_VAR 0 4
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_INT 0
4076: PPUSH
4077: CALL_OW 49
// end ;
4081: GO 4007
4083: POP
4084: POP
// end ;
4085: LD_VAR 0 2
4089: RET
// export function PrepareArabianKiller ; var un ; begin
4090: LD_INT 0
4092: PPUSH
4093: PPUSH
// uc_side = 5 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 5
4101: ST_TO_ADDR
// uc_nation = nation_arabian ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// hc_class = class_soldier ;
4110: LD_ADDR_OWVAR 28
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// un = CreateHuman ;
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_EXP 54
4175: PPUSH
4176: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4180: LD_ADDR_EXP 23
4184: PUSH
4185: LD_EXP 23
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: ST_TO_ADDR
// end ;
4194: LD_VAR 0 1
4198: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
// firstAttackGroup = [ ] ;
4205: LD_ADDR_EXP 64
4209: PUSH
4210: EMPTY
4211: ST_TO_ADDR
// uc_side = 2 ;
4212: LD_ADDR_OWVAR 20
4216: PUSH
4217: LD_INT 2
4219: ST_TO_ADDR
// uc_nation = nation_arabian ;
4220: LD_ADDR_OWVAR 21
4224: PUSH
4225: LD_INT 2
4227: ST_TO_ADDR
// for i := 1 to 3 do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4303
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4244: LD_INT 0
4246: PPUSH
4247: LD_EXP 32
4251: PUSH
4252: LD_INT 2
4254: MINUS
4255: PPUSH
4256: CALL_OW 381
// unit = CreateHuman ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: CALL_OW 44
4269: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4270: LD_ADDR_EXP 64
4274: PUSH
4275: LD_EXP 64
4279: PUSH
4280: LD_VAR 0 3
4284: ADD
4285: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 7
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// end ;
4301: GO 4241
4303: POP
4304: POP
// vc_weapon = ar_light_gun ;
4305: LD_ADDR_OWVAR 40
4309: PUSH
4310: LD_INT 23
4312: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4313: LD_ADDR_OWVAR 37
4317: PUSH
4318: LD_INT 13
4320: ST_TO_ADDR
// vc_control = control_manual ;
4321: LD_ADDR_OWVAR 38
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// vc_engine = engine_combustion ;
4329: LD_ADDR_OWVAR 39
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4337: LD_ADDR_OWVAR 41
4341: PUSH
4342: LD_INT 100
4344: ST_TO_ADDR
// veh = CreateVehicle ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: CALL_OW 45
4354: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4355: LD_ADDR_EXP 64
4359: PUSH
4360: LD_EXP 64
4364: PUSH
4365: LD_VAR 0 4
4369: ADD
4370: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4371: LD_VAR 0 4
4375: PPUSH
4376: LD_INT 7
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4386: LD_INT 0
4388: PPUSH
4389: LD_EXP 32
4393: PUSH
4394: LD_INT 1
4396: MINUS
4397: PPUSH
4398: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4402: CALL_OW 44
4406: PPUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: CALL_OW 52
// end ; end_of_file
4416: LD_VAR 0 1
4420: RET
// export function Nef_PrepareNature ; var i , un ; begin
4421: LD_INT 0
4423: PPUSH
4424: PPUSH
4425: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_EXP 26
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4556
// begin uc_side = 0 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 0
4455: ST_TO_ADDR
// uc_nation = nation_nature ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 0
4463: ST_TO_ADDR
// hc_class = class_apeman ;
4464: LD_ADDR_OWVAR 28
4468: PUSH
4469: LD_INT 12
4471: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4472: LD_ADDR_OWVAR 31
4476: PUSH
4477: LD_EXP 27
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_INT 2
4493: ARRAY
4494: PUSH
4495: LD_EXP 27
4499: PUSH
4500: LD_INT 3
4502: ARRAY
4503: PUSH
4504: LD_EXP 27
4508: PUSH
4509: LD_INT 4
4511: ARRAY
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4519: LD_ADDR_OWVAR 35
4523: PUSH
4524: LD_EXP 28
4528: ST_TO_ADDR
// un = CreateHuman ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: CALL_OW 44
4538: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_INT 8
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
// end ;
4554: GO 4445
4556: POP
4557: POP
// for i := 1 to animalsAmount [ 2 ] do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 26
4572: PUSH
4573: LD_INT 2
4575: ARRAY
4576: PUSH
4577: FOR_TO
4578: IFFALSE 4688
// begin uc_side = 0 ;
4580: LD_ADDR_OWVAR 20
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// uc_nation = nation_nature ;
4588: LD_ADDR_OWVAR 21
4592: PUSH
4593: LD_INT 0
4595: ST_TO_ADDR
// hc_class = class_phororhacos ;
4596: LD_ADDR_OWVAR 28
4600: PUSH
4601: LD_INT 18
4603: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4604: LD_ADDR_OWVAR 31
4608: PUSH
4609: LD_EXP 27
4613: PUSH
4614: LD_INT 1
4616: ARRAY
4617: PUSH
4618: LD_EXP 27
4622: PUSH
4623: LD_INT 2
4625: ARRAY
4626: PUSH
4627: LD_EXP 27
4631: PUSH
4632: LD_INT 3
4634: ARRAY
4635: PUSH
4636: LD_EXP 27
4640: PUSH
4641: LD_INT 4
4643: ARRAY
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4651: LD_ADDR_OWVAR 35
4655: PUSH
4656: LD_EXP 28
4660: ST_TO_ADDR
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 8
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4577
4688: POP
4689: POP
// for i := 1 to animalsAmount [ 3 ] do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_EXP 26
4704: PUSH
4705: LD_INT 3
4707: ARRAY
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4820
// begin uc_side = 0 ;
4712: LD_ADDR_OWVAR 20
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// uc_nation = nation_nature ;
4720: LD_ADDR_OWVAR 21
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// hc_class = class_tiger ;
4728: LD_ADDR_OWVAR 28
4732: PUSH
4733: LD_INT 14
4735: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4736: LD_ADDR_OWVAR 31
4740: PUSH
4741: LD_EXP 27
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PUSH
4750: LD_EXP 27
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PUSH
4759: LD_EXP 27
4763: PUSH
4764: LD_INT 3
4766: ARRAY
4767: PUSH
4768: LD_EXP 27
4772: PUSH
4773: LD_INT 4
4775: ARRAY
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4783: LD_ADDR_OWVAR 35
4787: PUSH
4788: LD_EXP 28
4792: ST_TO_ADDR
// un = CreateHuman ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: CALL_OW 44
4802: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 8
4810: PPUSH
4811: LD_INT 0
4813: PPUSH
4814: CALL_OW 49
// end ;
4818: GO 4709
4820: POP
4821: POP
// for i := 1 to animalsAmount [ 4 ] do
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 26
4836: PUSH
4837: LD_INT 4
4839: ARRAY
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4952
// begin uc_side = 0 ;
4844: LD_ADDR_OWVAR 20
4848: PUSH
4849: LD_INT 0
4851: ST_TO_ADDR
// uc_nation = nation_nature ;
4852: LD_ADDR_OWVAR 21
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// hc_class = 21 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 21
4867: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4868: LD_ADDR_OWVAR 31
4872: PUSH
4873: LD_EXP 27
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PUSH
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 2
4889: ARRAY
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: LD_EXP 27
4904: PUSH
4905: LD_INT 4
4907: ARRAY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4915: LD_ADDR_OWVAR 35
4919: PUSH
4920: LD_EXP 28
4924: ST_TO_ADDR
// un = CreateHuman ;
4925: LD_ADDR_VAR 0 3
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 8
4942: PPUSH
4943: LD_INT 0
4945: PPUSH
4946: CALL_OW 49
// end ;
4950: GO 4841
4952: POP
4953: POP
// for i := 1 to animalsAmount [ 5 ] do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: DOUBLE
4960: LD_INT 1
4962: DEC
4963: ST_TO_ADDR
4964: LD_EXP 26
4968: PUSH
4969: LD_INT 5
4971: ARRAY
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5035
// begin uc_side = 0 ;
4976: LD_ADDR_OWVAR 20
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// uc_nation = nation_nature ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// vc_chassis := 31 ;
4992: LD_ADDR_OWVAR 37
4996: PUSH
4997: LD_INT 31
4999: ST_TO_ADDR
// vc_control := control_rider ;
5000: LD_ADDR_OWVAR 38
5004: PUSH
5005: LD_INT 4
5007: ST_TO_ADDR
// un := CreateVehicle ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 45
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 8
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4973
5035: POP
5036: POP
// end ; end_of_file
5037: LD_VAR 0 1
5041: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
5051: PPUSH
5052: PPUSH
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
// for unit in units do
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5110
// if not ignorePath then
5075: LD_VAR 0 3
5079: NOT
5080: IFFALSE 5096
// SetTag ( unit , 0 ) else
5082: LD_VAR 0 8
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: CALL_OW 109
5094: GO 5108
// SetTag ( unit , 1 ) ;
5096: LD_VAR 0 8
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 109
5108: GO 5072
5110: POP
5111: POP
// startAttacks = false ;
5112: LD_ADDR_VAR 0 21
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5120: LD_ADDR_VAR 0 17
5124: PUSH
5125: LD_VAR 0 2
5129: PUSH
5130: LD_VAR 0 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_VAR 0 2
5149: ARRAY
5150: PUSH
5151: LD_INT 2
5153: ARRAY
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// mechanics = [ ] ;
5159: LD_ADDR_VAR 0 12
5163: PUSH
5164: EMPTY
5165: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5166: LD_ADDR_VAR 0 9
5170: PUSH
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 50
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5219: LD_ADDR_VAR 0 11
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 4
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 72
5253: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5254: LD_ADDR_VAR 0 13
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 1
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 24
5279: PUSH
5280: LD_INT 1000
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 72
5299: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5300: LD_ADDR_VAR 0 15
5304: PUSH
5305: LD_INT 9
5307: PPUSH
5308: CALL_OW 435
5312: ST_TO_ADDR
// if not ignorePath then
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 6300
// begin for unit in attackUnits do
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: FOR_IN
5331: IFFALSE 6074
// begin if path and not startAttacks then
5333: LD_VAR 0 2
5337: PUSH
5338: LD_VAR 0 21
5342: NOT
5343: AND
5344: IFFALSE 6063
// begin i = 1 ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5354: LD_ADDR_VAR 0 15
5358: PUSH
5359: LD_INT 9
5361: PPUSH
5362: CALL_OW 435
5366: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5367: LD_ADDR_VAR 0 18
5371: PUSH
5372: LD_INT 81
5374: PUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 255
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PPUSH
5394: LD_VAR 0 8
5398: PPUSH
5399: CALL_OW 74
5403: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5404: LD_ADDR_VAR 0 19
5408: PUSH
5409: LD_VAR 0 15
5413: PPUSH
5414: LD_VAR 0 8
5418: PPUSH
5419: CALL_OW 250
5423: PPUSH
5424: LD_VAR 0 8
5428: PPUSH
5429: CALL_OW 251
5433: PPUSH
5434: CALL_OW 439
5438: ST_TO_ADDR
// if damageUnits and medics then
5439: LD_VAR 0 13
5443: PUSH
5444: LD_VAR 0 11
5448: AND
5449: IFFALSE 5471
// ComHeal ( medics , damageUnits [ 1 ] ) else
5451: LD_VAR 0 11
5455: PPUSH
5456: LD_VAR 0 13
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 128
5469: GO 5514
// if medics then
5471: LD_VAR 0 11
5475: IFFALSE 5514
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5477: LD_VAR 0 11
5481: PPUSH
5482: LD_VAR 0 9
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PPUSH
5491: CALL_OW 250
5495: PPUSH
5496: LD_VAR 0 9
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: CALL_OW 251
5509: PPUSH
5510: CALL_OW 111
// if not HasTask ( unit ) then
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 314
5523: NOT
5524: IFFALSE 5763
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5526: LD_ADDR_VAR 0 19
5530: PUSH
5531: LD_VAR 0 15
5535: PPUSH
5536: LD_VAR 0 8
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 8
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: CALL_OW 439
5560: ST_TO_ADDR
// if i > crates then
5561: LD_VAR 0 7
5565: PUSH
5566: LD_VAR 0 15
5570: GREATER
5571: IFFALSE 5581
// i = 1 ;
5573: LD_ADDR_VAR 0 7
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5581: LD_VAR 0 18
5585: PUSH
5586: LD_VAR 0 19
5590: AND
5591: IFFALSE 5706
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5593: LD_VAR 0 8
5597: PPUSH
5598: LD_VAR 0 18
5602: PPUSH
5603: CALL_OW 250
5607: PPUSH
5608: LD_VAR 0 18
5612: PPUSH
5613: CALL_OW 251
5617: PPUSH
5618: CALL_OW 297
5622: PUSH
5623: LD_VAR 0 8
5627: PPUSH
5628: LD_VAR 0 19
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 19
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 297
5650: LESS
5651: IFFALSE 5669
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5653: LD_VAR 0 9
5657: PPUSH
5658: LD_VAR 0 18
5662: PPUSH
5663: CALL_OW 115
5667: GO 5704
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5669: LD_VAR 0 9
5673: PPUSH
5674: LD_VAR 0 15
5678: PUSH
5679: LD_VAR 0 7
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 15
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: PLUS
5698: ARRAY
5699: PPUSH
5700: CALL_OW 116
// end else
5704: GO 5763
// if crates then
5706: LD_VAR 0 15
5710: IFFALSE 5749
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5712: LD_VAR 0 9
5716: PPUSH
5717: LD_VAR 0 15
5721: PUSH
5722: LD_VAR 0 7
5726: ARRAY
5727: PPUSH
5728: LD_VAR 0 15
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: ARRAY
5742: PPUSH
5743: CALL_OW 116
5747: GO 5763
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5749: LD_VAR 0 9
5753: PPUSH
5754: LD_VAR 0 18
5758: PPUSH
5759: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5763: LD_INT 35
5765: PPUSH
5766: CALL_OW 67
// if path then
5770: LD_VAR 0 2
5774: IFFALSE 5860
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5776: LD_ADDR_VAR 0 16
5780: PUSH
5781: LD_VAR 0 8
5785: PPUSH
5786: LD_VAR 0 2
5790: PPUSH
5791: CALL 7190 0 2
5795: ST_TO_ADDR
// if agressiveMove then
5796: LD_VAR 0 4
5800: IFFALSE 5831
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5802: LD_VAR 0 9
5806: PPUSH
5807: LD_VAR 0 16
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_VAR 0 16
5820: PUSH
5821: LD_INT 2
5823: ARRAY
5824: PPUSH
5825: CALL_OW 114
5829: GO 5858
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5831: LD_VAR 0 9
5835: PPUSH
5836: LD_VAR 0 16
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 16
5849: PUSH
5850: LD_INT 2
5852: ARRAY
5853: PPUSH
5854: CALL_OW 111
// end else
5858: GO 5868
// startAttacks = true ;
5860: LD_ADDR_VAR 0 21
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// i = i + 2 ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_INT 2
5880: PLUS
5881: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5882: LD_VAR 0 8
5886: PPUSH
5887: CALL_OW 314
5891: NOT
5892: PUSH
5893: LD_INT 22
5895: PUSH
5896: LD_VAR 0 8
5900: PPUSH
5901: CALL_OW 255
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 92
5912: PUSH
5913: LD_VAR 0 16
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 16
5926: PUSH
5927: LD_INT 2
5929: ARRAY
5930: PUSH
5931: LD_INT 4
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: LD_INT 3
5951: GREATER
5952: AND
5953: PUSH
5954: LD_VAR 0 21
5958: NOT
5959: AND
5960: IFFALSE 5354
// for i := 1 to path do
5962: LD_ADDR_VAR 0 7
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_VAR 0 2
5976: PUSH
5977: FOR_TO
5978: IFFALSE 6061
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 7
5989: ARRAY
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_VAR 0 16
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: EQUAL
6004: PUSH
6005: LD_VAR 0 2
6009: PUSH
6010: LD_VAR 0 7
6014: ARRAY
6015: PUSH
6016: LD_INT 2
6018: ARRAY
6019: PUSH
6020: LD_VAR 0 16
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: EQUAL
6029: AND
6030: IFFALSE 6059
// begin path = path diff [ path [ i ] ] ;
6032: LD_ADDR_VAR 0 2
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: LD_VAR 0 7
6051: ARRAY
6052: PUSH
6053: EMPTY
6054: LIST
6055: DIFF
6056: ST_TO_ADDR
// break ;
6057: GO 6061
// end ;
6059: GO 5977
6061: POP
6062: POP
// end ; if not path then
6063: LD_VAR 0 2
6067: NOT
6068: IFFALSE 6072
// break ;
6070: GO 6074
// end ;
6072: GO 5330
6074: POP
6075: POP
// repeat unitsReachPathEnd = 0 ;
6076: LD_ADDR_VAR 0 20
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// for attackUnit in attackUnits do
6084: LD_ADDR_VAR 0 10
6088: PUSH
6089: LD_VAR 0 9
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6268
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_VAR 0 17
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 17
6115: PUSH
6116: LD_INT 2
6118: ARRAY
6119: PPUSH
6120: CALL_OW 297
6124: PUSH
6125: LD_INT 7
6127: LESS
6128: NOT
6129: PUSH
6130: LD_VAR 0 10
6134: PPUSH
6135: CALL_OW 110
6139: PUSH
6140: LD_INT 0
6142: EQUAL
6143: AND
6144: IFFALSE 6210
// begin if agressiveMove then
6146: LD_VAR 0 4
6150: IFFALSE 6181
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6152: LD_VAR 0 10
6156: PPUSH
6157: LD_VAR 0 17
6161: PUSH
6162: LD_INT 1
6164: ARRAY
6165: PPUSH
6166: LD_VAR 0 17
6170: PUSH
6171: LD_INT 2
6173: ARRAY
6174: PPUSH
6175: CALL_OW 114
6179: GO 6208
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6181: LD_VAR 0 10
6185: PPUSH
6186: LD_VAR 0 17
6190: PUSH
6191: LD_INT 1
6193: ARRAY
6194: PPUSH
6195: LD_VAR 0 17
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: CALL_OW 111
// end else
6208: GO 6237
// if GetTag ( attackUnit ) = 0 then
6210: LD_VAR 0 10
6214: PPUSH
6215: CALL_OW 110
6219: PUSH
6220: LD_INT 0
6222: EQUAL
6223: IFFALSE 6237
// SetTag ( attackUnit , 1 ) ;
6225: LD_VAR 0 10
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: CALL_OW 109
// if GetTag ( unit ) = 1 then
6237: LD_VAR 0 8
6241: PPUSH
6242: CALL_OW 110
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6266
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6252: LD_ADDR_VAR 0 20
6256: PUSH
6257: LD_VAR 0 20
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6094
6268: POP
6269: POP
// wait ( 0 0$1 ) ;
6270: LD_INT 35
6272: PPUSH
6273: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6277: LD_VAR 0 20
6281: PUSH
6282: LD_VAR 0 9
6286: PUSH
6287: LD_INT 3
6289: MINUS
6290: GREATER
6291: IFFALSE 6076
// wait ( 0 0$10 ) ;
6293: LD_INT 350
6295: PPUSH
6296: CALL_OW 67
// end ; for attackUnit in attackUnits do
6300: LD_ADDR_VAR 0 10
6304: PUSH
6305: LD_VAR 0 9
6309: PUSH
6310: FOR_IN
6311: IFFALSE 6327
// SetTag ( attackUnit , 2 ) ;
6313: LD_VAR 0 10
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 109
6325: GO 6310
6327: POP
6328: POP
// startAttacks = true ;
6329: LD_ADDR_VAR 0 21
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// if startAttacks then
6337: LD_VAR 0 21
6341: IFFALSE 7160
// begin repeat wait ( 0 0$1 ) ;
6343: LD_INT 35
6345: PPUSH
6346: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6350: LD_ADDR_VAR 0 11
6354: PUSH
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 50
6362: PUSH
6363: EMPTY
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 72
6384: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6385: LD_ADDR_VAR 0 13
6389: PUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 1000
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 72
6441: ST_TO_ADDR
// if damageUnits and medics then
6442: LD_VAR 0 13
6446: PUSH
6447: LD_VAR 0 11
6451: AND
6452: IFFALSE 6474
// ComHeal ( medics , damageUnits [ 1 ] ) else
6454: LD_VAR 0 11
6458: PPUSH
6459: LD_VAR 0 13
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: CALL_OW 128
6472: GO 6524
// if medics and not damageUnits then
6474: LD_VAR 0 11
6478: PUSH
6479: LD_VAR 0 13
6483: NOT
6484: AND
6485: IFFALSE 6524
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6487: LD_VAR 0 11
6491: PPUSH
6492: LD_VAR 0 9
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: CALL_OW 250
6505: PPUSH
6506: LD_VAR 0 9
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: PPUSH
6515: CALL_OW 251
6519: PPUSH
6520: CALL_OW 111
// for attackUnit in attackUnits do
6524: LD_ADDR_VAR 0 10
6528: PUSH
6529: LD_VAR 0 9
6533: PUSH
6534: FOR_IN
6535: IFFALSE 7151
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6537: LD_ADDR_VAR 0 22
6541: PUSH
6542: LD_INT 81
6544: PUSH
6545: LD_VAR 0 10
6549: PPUSH
6550: CALL_OW 255
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PPUSH
6564: LD_VAR 0 10
6568: PPUSH
6569: CALL_OW 74
6573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6574: LD_ADDR_VAR 0 23
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_VAR 0 10
6586: PPUSH
6587: CALL_OW 255
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 59
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 21
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: PPUSH
6643: LD_VAR 0 10
6647: PPUSH
6648: CALL_OW 74
6652: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6653: LD_VAR 0 10
6657: PPUSH
6658: CALL_OW 110
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: IFFALSE 6826
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6668: LD_VAR 0 10
6672: PPUSH
6673: LD_VAR 0 22
6677: PPUSH
6678: CALL_OW 296
6682: PUSH
6683: LD_INT 10
6685: PLUS
6686: PUSH
6687: LD_VAR 0 10
6691: PPUSH
6692: LD_VAR 0 23
6696: PPUSH
6697: CALL_OW 296
6701: LESS
6702: IFFALSE 6720
// ComAttackUnit ( attackUnit , target1 ) else
6704: LD_VAR 0 10
6708: PPUSH
6709: LD_VAR 0 22
6713: PPUSH
6714: CALL_OW 115
6718: GO 6734
// ComAttackUnit ( attackUnit , target2 ) ;
6720: LD_VAR 0 10
6724: PPUSH
6725: LD_VAR 0 23
6729: PPUSH
6730: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6734: LD_VAR 0 10
6738: PPUSH
6739: CALL_OW 256
6743: PUSH
6744: LD_INT 650
6746: LESS
6747: PUSH
6748: LD_VAR 0 10
6752: PPUSH
6753: CALL_OW 247
6757: PUSH
6758: LD_INT 2
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 10
6767: PPUSH
6768: CALL_OW 263
6772: PUSH
6773: LD_INT 1
6775: EQUAL
6776: AND
6777: IFFALSE 6826
// begin SetTag ( attackUnit , 3 ) ;
6779: LD_VAR 0 10
6783: PPUSH
6784: LD_INT 3
6786: PPUSH
6787: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6791: LD_VAR 0 10
6795: PPUSH
6796: CALL_OW 313
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: LD_INT 3
6807: PPUSH
6808: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6812: LD_VAR 0 10
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6826: LD_VAR 0 10
6830: PPUSH
6831: LD_VAR 0 5
6835: PPUSH
6836: CALL_OW 308
6840: PUSH
6841: LD_VAR 0 10
6845: PPUSH
6846: CALL_OW 110
6850: PUSH
6851: LD_INT 3
6853: EQUAL
6854: AND
6855: PUSH
6856: LD_VAR 0 10
6860: PPUSH
6861: CALL_OW 313
6865: AND
6866: IFFALSE 6939
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6868: LD_ADDR_VAR 0 14
6872: PUSH
6873: LD_VAR 0 10
6877: PPUSH
6878: CALL_OW 313
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: ST_TO_ADDR
// if not driver in mechanics then
6887: LD_VAR 0 14
6891: PUSH
6892: LD_VAR 0 12
6896: IN
6897: NOT
6898: IFFALSE 6916
// mechanics = mechanics ^ driver ;
6900: LD_ADDR_VAR 0 12
6904: PUSH
6905: LD_VAR 0 12
6909: PUSH
6910: LD_VAR 0 14
6914: ADD
6915: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6916: LD_VAR 0 14
6920: PPUSH
6921: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6925: LD_VAR 0 14
6929: PPUSH
6930: LD_VAR 0 10
6934: PPUSH
6935: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6939: LD_VAR 0 10
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: EQUAL
6952: IFFALSE 7070
// begin SetTag ( attackUnit , 2 ) ;
6954: LD_VAR 0 10
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6966: LD_VAR 0 10
6970: PPUSH
6971: CALL_OW 247
6975: PUSH
6976: LD_INT 2
6978: EQUAL
6979: PUSH
6980: LD_VAR 0 10
6984: PPUSH
6985: CALL_OW 263
6989: PUSH
6990: LD_INT 1
6992: EQUAL
6993: AND
6994: PUSH
6995: LD_VAR 0 10
6999: PPUSH
7000: CALL_OW 313
7004: NOT
7005: AND
7006: IFFALSE 7070
// begin SetFuel ( attackUnit , 100 ) ;
7008: LD_VAR 0 10
7012: PPUSH
7013: LD_INT 100
7015: PPUSH
7016: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
7020: LD_VAR 0 12
7024: PPUSH
7025: LD_VAR 0 10
7029: PPUSH
7030: CALL_OW 74
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7044: LD_ADDR_VAR 0 12
7048: PUSH
7049: LD_VAR 0 12
7053: PUSH
7054: LD_VAR 0 12
7058: PPUSH
7059: LD_VAR 0 10
7063: PPUSH
7064: CALL_OW 74
7068: DIFF
7069: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7070: LD_ADDR_VAR 0 8
7074: PUSH
7075: LD_VAR 0 12
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7147
// begin if not IsInArea ( unit , retreatArea ) then
7083: LD_VAR 0 8
7087: PPUSH
7088: LD_VAR 0 5
7092: PPUSH
7093: CALL_OW 308
7097: NOT
7098: IFFALSE 7114
// ComMoveToArea ( unit , retreatArea ) ;
7100: LD_VAR 0 8
7104: PPUSH
7105: LD_VAR 0 5
7109: PPUSH
7110: CALL_OW 113
// if GetLives ( unit ) < 250 then
7114: LD_VAR 0 8
7118: PPUSH
7119: CALL_OW 256
7123: PUSH
7124: LD_INT 250
7126: LESS
7127: IFFALSE 7145
// mechanics = mechanics diff unit ;
7129: LD_ADDR_VAR 0 12
7133: PUSH
7134: LD_VAR 0 12
7138: PUSH
7139: LD_VAR 0 8
7143: DIFF
7144: ST_TO_ADDR
// end ;
7145: GO 7080
7147: POP
7148: POP
// end ;
7149: GO 6534
7151: POP
7152: POP
// until not attackUnits ;
7153: LD_VAR 0 9
7157: NOT
7158: IFFALSE 6343
// end ; wait ( 0 0$1 ) ;
7160: LD_INT 35
7162: PPUSH
7163: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PPUSH
7178: CALL_OW 72
7182: NOT
7183: IFFALSE 5166
// end ;
7185: LD_VAR 0 6
7189: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// for i := 2 to path do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 2
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 2
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7386
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: LD_VAR 0 2
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 4
7277: ARRAY
7278: PUSH
7279: LD_INT 2
7281: ARRAY
7282: PPUSH
7283: CALL_OW 297
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_VAR 0 5
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 2
7309: ARRAY
7310: PPUSH
7311: CALL_OW 297
7315: LESS
7316: IFFALSE 7384
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7318: LD_ADDR_VAR 0 5
7322: PUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 4
7340: ARRAY
7341: PUSH
7342: LD_INT 1
7344: ARRAY
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 4
7373: ARRAY
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PPUSH
7379: CALL_OW 1
7383: ST_TO_ADDR
// end ; end ;
7384: GO 7245
7386: POP
7387: POP
// result = nearPosition ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 3
7402: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7403: LD_EXP 58
7407: PPUSH
7408: CALL_OW 274
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 275
7420: PUSH
7421: LD_INT 0
7423: GREATER
7424: IFFALSE 7530
7426: GO 7428
7428: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7429: LD_EXP 57
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 72
7448: PPUSH
7449: LD_INT 31
7451: PPUSH
7452: LD_INT 105
7454: PPUSH
7455: LD_INT 51
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7465: LD_EXP 57
7469: PPUSH
7470: LD_INT 25
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: PPUSH
7485: LD_INT 31
7487: PPUSH
7488: LD_INT 114
7490: PPUSH
7491: LD_INT 58
7493: PPUSH
7494: LD_INT 3
7496: PPUSH
7497: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7501: LD_EXP 57
7505: PPUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 72
7520: PPUSH
7521: LD_EXP 58
7525: PPUSH
7526: CALL_OW 180
// end ; end_of_file
7530: END
// export function Lose_Burlak ; begin
7531: LD_INT 0
7533: PPUSH
// YouLost ( Burlak ) ;
7534: LD_STRING Burlak
7536: PPUSH
7537: CALL_OW 104
// end ;
7541: LD_VAR 0 1
7545: RET
// export function Lose_Gaydar ; begin
7546: LD_INT 0
7548: PPUSH
// YouLost ( Gaydar ) ;
7549: LD_STRING Gaydar
7551: PPUSH
7552: CALL_OW 104
// end ;
7556: LD_VAR 0 1
7560: RET
// export function Lose_SelfAttack ; begin
7561: LD_INT 0
7563: PPUSH
// YouLost ( SelfAttack ) ;
7564: LD_STRING SelfAttack
7566: PPUSH
7567: CALL_OW 104
// end ;
7571: LD_VAR 0 1
7575: RET
// export function Lose_Arrest ; begin
7576: LD_INT 0
7578: PPUSH
// YouLost ( Arrest ) ;
7579: LD_STRING Arrest
7581: PPUSH
7582: CALL_OW 104
// end ;
7586: LD_VAR 0 1
7590: RET
// export function Lose_ArabBreakthrough ; begin
7591: LD_INT 0
7593: PPUSH
// YouLost ( ArabBreakthrough ) ;
7594: LD_STRING ArabBreakthrough
7596: PPUSH
7597: CALL_OW 104
// end ;
7601: LD_VAR 0 1
7605: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7606: LD_EXP 7
7610: NOT
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: NOT
7652: AND
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: NOT
7694: AND
7695: IFFALSE 7708
7697: GO 7699
7699: DISABLE
// begin enable ;
7700: ENABLE
// YouLost ( Engineer ) ;
7701: LD_STRING Engineer
7703: PPUSH
7704: CALL_OW 104
// end ; end_of_file
7708: END
// export function FinishMission ; begin
7709: LD_INT 0
7711: PPUSH
// SetRewards ;
7712: CALL 7733 0 0
// SavePlayerCharacters ;
7716: CALL 8158 0 0
// SaveGlobalVariables ;
7720: CALL 8386 0 0
// YouWin ;
7724: CALL_OW 103
// end ;
7728: LD_VAR 0 1
7732: RET
// function SetRewards ; var unitsToReward ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
// SetAchievements ;
7737: CALL 18539 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7741: LD_INT 22
7743: PUSH
7744: LD_INT 3
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: NOT
7770: IFFALSE 7784
// AddMedal ( Dismantle , 1 ) else
7772: LD_STRING Dismantle
7774: PPUSH
7775: LD_INT 1
7777: PPUSH
7778: CALL_OW 101
7782: GO 7795
// AddMedal ( Dismantle , - 1 ) ;
7784: LD_STRING Dismantle
7786: PPUSH
7787: LD_INT 1
7789: NEG
7790: PPUSH
7791: CALL_OW 101
// if killedArabianUnits >= 25 then
7795: LD_EXP 22
7799: PUSH
7800: LD_INT 25
7802: GREATEREQUAL
7803: IFFALSE 7825
// begin AddMedal ( EnemyLosses , 1 ) ;
7805: LD_STRING EnemyLosses
7807: PPUSH
7808: LD_INT 1
7810: PPUSH
7811: CALL_OW 101
// heikeHeavyLosses = true ;
7815: LD_ADDR_EXP 4
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// end else
7823: GO 7836
// AddMedal ( EnemyLosses , - 1 ) ;
7825: LD_STRING EnemyLosses
7827: PPUSH
7828: LD_INT 1
7830: NEG
7831: PPUSH
7832: CALL_OW 101
// if not lostUnits then
7836: LD_EXP 24
7840: NOT
7841: IFFALSE 7855
// AddMedal ( LittleLosses , 1 ) else
7843: LD_STRING LittleLosses
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 101
7853: GO 7866
// AddMedal ( LittleLosses , - 1 ) ;
7855: LD_STRING LittleLosses
7857: PPUSH
7858: LD_INT 1
7860: NEG
7861: PPUSH
7862: CALL_OW 101
// GiveMedals ( Main ) ;
7866: LD_STRING Main
7868: PPUSH
7869: CALL_OW 102
// unitsToReward = [ ] ;
7873: LD_ADDR_VAR 0 2
7877: PUSH
7878: EMPTY
7879: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7880: LD_EXP 42
7884: PPUSH
7885: CALL_OW 255
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: IFFALSE 7911
// unitsToReward = unitsToReward ^ Burlak ;
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 2
7904: PUSH
7905: LD_EXP 42
7909: ADD
7910: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7911: LD_EXP 43
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 3
7923: EQUAL
7924: IFFALSE 7942
// unitsToReward = unitsToReward ^ Gnyevko ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_EXP 43
7940: ADD
7941: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7942: LD_EXP 44
7946: PPUSH
7947: CALL_OW 255
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: IFFALSE 7973
// unitsToReward = unitsToReward ^ Kirilenkova ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 2
7966: PUSH
7967: LD_EXP 44
7971: ADD
7972: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7973: LD_EXP 45
7977: PPUSH
7978: CALL_OW 255
7982: PUSH
7983: LD_INT 3
7985: EQUAL
7986: IFFALSE 8004
// unitsToReward = unitsToReward ^ Kovalyuk ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_EXP 45
8002: ADD
8003: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
8004: LD_EXP 46
8008: PPUSH
8009: CALL_OW 255
8013: PUSH
8014: LD_INT 3
8016: EQUAL
8017: IFFALSE 8035
// unitsToReward = unitsToReward ^ Belkov ;
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: LD_VAR 0 2
8028: PUSH
8029: LD_EXP 46
8033: ADD
8034: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8035: LD_EXP 47
8039: PPUSH
8040: CALL_OW 255
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: IFFALSE 8066
// unitsToReward = unitsToReward ^ Belkov2 ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: LD_VAR 0 2
8059: PUSH
8060: LD_EXP 47
8064: ADD
8065: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8066: LD_EXP 48
8070: PPUSH
8071: CALL_OW 255
8075: PUSH
8076: LD_INT 3
8078: EQUAL
8079: IFFALSE 8097
// unitsToReward = unitsToReward ^ Scholtze ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_EXP 48
8095: ADD
8096: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8097: LD_EXP 49
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: IFFALSE 8128
// unitsToReward = unitsToReward ^ Kuzmov ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_EXP 49
8126: ADD
8127: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_EXP 62
8142: ADD
8143: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 43
// end ;
8153: LD_VAR 0 1
8157: RET
// function SavePlayerCharacters ; var othersYour ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8162: LD_EXP 42
8166: PPUSH
8167: LD_STRING 04_Burlak
8169: PPUSH
8170: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8174: LD_EXP 43
8178: PPUSH
8179: CALL_OW 255
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8201
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8189: LD_EXP 43
8193: PPUSH
8194: LD_STRING 04_Gnyevko
8196: PPUSH
8197: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8201: LD_EXP 45
8205: PPUSH
8206: CALL_OW 255
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: IFFALSE 8228
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8216: LD_EXP 45
8220: PPUSH
8221: LD_STRING 04_Kovalyuk
8223: PPUSH
8224: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8228: LD_EXP 44
8232: PPUSH
8233: CALL_OW 255
8237: PUSH
8238: LD_INT 3
8240: EQUAL
8241: IFFALSE 8255
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8243: LD_EXP 44
8247: PPUSH
8248: LD_STRING 04_Kirilenkova
8250: PPUSH
8251: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8255: LD_EXP 48
8259: PPUSH
8260: CALL_OW 255
8264: PUSH
8265: LD_INT 3
8267: EQUAL
8268: IFFALSE 8282
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8270: LD_EXP 48
8274: PPUSH
8275: LD_STRING 04_Scholtze
8277: PPUSH
8278: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8282: LD_EXP 46
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 3
8294: EQUAL
8295: IFFALSE 8309
// SaveCharacters ( Belkov , 04_Belkov ) ;
8297: LD_EXP 46
8301: PPUSH
8302: LD_STRING 04_Belkov
8304: PPUSH
8305: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8309: LD_EXP 47
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: IFFALSE 8336
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8324: LD_EXP 47
8328: PPUSH
8329: LD_STRING 04_Belkov2
8331: PPUSH
8332: CALL_OW 38
// if IsOK ( Kuzmov ) then
8336: LD_EXP 49
8340: PPUSH
8341: CALL_OW 302
8345: IFFALSE 8359
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8347: LD_EXP 49
8351: PPUSH
8352: LD_STRING 04_Kuzmov
8354: PPUSH
8355: CALL_OW 38
// othersYour = randomsToSave ;
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_EXP 62
8368: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8369: LD_EXP 62
8373: PPUSH
8374: LD_STRING 04_other_survivors
8376: PPUSH
8377: CALL_OW 38
// end ;
8381: LD_VAR 0 1
8385: RET
// function SaveGlobalVariables ; begin
8386: LD_INT 0
8388: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8389: LD_EXP 4
8393: PPUSH
8394: LD_STRING 04_HeikeHeavyLosses_1
8396: PPUSH
8397: CALL_OW 39
// end ; end_of_file
8401: LD_VAR 0 1
8405: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 255
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 266
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_INT 5
8442: PPUSH
8443: CALL_OW 308
8447: NOT
8448: AND
8449: IFFALSE 8460
// Dial_DepotInWrongPlace ( building ) ;
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL 11049 0 1
// end ;
8460: PPOPN 2
8462: END
// on BuildingComplete ( building ) do var i , cargo ;
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8467: LD_VAR 0 1
8471: PPUSH
8472: CALL_OW 255
8476: PUSH
8477: LD_INT 3
8479: EQUAL
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 266
8490: PUSH
8491: LD_INT 0
8493: EQUAL
8494: AND
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: LD_INT 5
8503: PPUSH
8504: CALL_OW 308
8508: AND
8509: PUSH
8510: LD_EXP 8
8514: NOT
8515: AND
8516: PUSH
8517: LD_EXP 9
8521: NOT
8522: AND
8523: IFFALSE 8549
// begin namedBase = true ;
8525: LD_ADDR_EXP 9
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_STRING chuikov
8540: PPUSH
8541: CALL_OW 500
// Dial_FinishDepot ;
8545: CALL 11323 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 255
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 266
8572: PUSH
8573: LD_INT 32
8575: EQUAL
8576: AND
8577: IFFALSE 8593
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8579: LD_ADDR_EXP 25
8583: PUSH
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 1
8591: PLUS
8592: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 255
8602: PUSH
8603: LD_INT 6
8605: EQUAL
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 266
8616: PUSH
8617: LD_INT 0
8619: EQUAL
8620: AND
8621: IFFALSE 8820
// begin secondBaseDepot = building ;
8623: LD_ADDR_EXP 58
8627: PUSH
8628: LD_VAR 0 1
8632: ST_TO_ADDR
// uc_side = 6 ;
8633: LD_ADDR_OWVAR 20
8637: PUSH
8638: LD_INT 6
8640: ST_TO_ADDR
// uc_nation = nation_russian ;
8641: LD_ADDR_OWVAR 21
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8649: LD_ADDR_OWVAR 37
8653: PUSH
8654: LD_INT 21
8656: ST_TO_ADDR
// vc_control = control_manual ;
8657: LD_ADDR_OWVAR 38
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// vc_engine = engine_combustion ;
8665: LD_ADDR_OWVAR 39
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8673: LD_ADDR_OWVAR 40
8677: PUSH
8678: LD_INT 51
8680: ST_TO_ADDR
// cargo = CreateVehicle ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: CALL_OW 45
8690: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8691: LD_VAR 0 3
8695: PPUSH
8696: LD_INT 3
8698: PPUSH
8699: LD_INT 0
8701: PPUSH
8702: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8706: LD_VAR 0 3
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 100
8716: PPUSH
8717: CALL_OW 291
// ComGive ( cargo , building ) ;
8721: LD_VAR 0 3
8725: PPUSH
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8735: LD_INT 0
8737: PPUSH
8738: LD_INT 2
8740: PPUSH
8741: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8745: CALL_OW 44
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: DOUBLE
8765: LD_INT 10
8767: DEC
8768: ST_TO_ADDR
8769: LD_EXP 34
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8818
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_EXP 34
8786: PUSH
8787: LD_VAR 0 2
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_EXP 34
8801: PUSH
8802: LD_VAR 0 2
8806: ARRAY
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: PPUSH
8812: CALL_OW 171
8816: GO 8774
8818: POP
8819: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 255
8829: PUSH
8830: LD_INT 6
8832: EQUAL
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 266
8843: PUSH
8844: LD_INT 31
8846: EQUAL
8847: AND
8848: IFFALSE 8893
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8850: LD_EXP 57
8854: PPUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 56
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 120
// end ;
8893: PPOPN 3
8895: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 266
8905: PUSH
8906: LD_INT 7
8908: EQUAL
8909: PUSH
8910: LD_EXP 15
8914: NOT
8915: AND
8916: IFFALSE 8922
// Dial_LabUpgraded ;
8918: CALL 11643 0 0
// end ;
8922: PPOPN 1
8924: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8925: LD_VAR 0 1
8929: PUSH
8930: LD_INT 3
8932: EQUAL
8933: PUSH
8934: LD_VAR 0 2
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: AND
8943: PUSH
8944: LD_VAR 0 1
8948: PUSH
8949: LD_INT 2
8951: EQUAL
8952: PUSH
8953: LD_VAR 0 2
8957: PUSH
8958: LD_INT 3
8960: EQUAL
8961: AND
8962: OR
8963: IFFALSE 8985
// begin if dial_contactBlock then
8965: LD_EXP 16
8969: IFFALSE 8973
// exit ;
8971: GO 9029
// dial_contactBlock = true ;
8973: LD_ADDR_EXP 16
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// Dial_Contact ;
8981: CALL 13858 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 3
8992: EQUAL
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: LD_INT 6
9001: EQUAL
9002: AND
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: LD_INT 6
9011: EQUAL
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: LD_INT 3
9020: EQUAL
9021: AND
9022: OR
9023: IFFALSE 9029
// Lose_SelfAttack ;
9025: CALL 7561 0 0
// end ;
9029: PPOPN 2
9031: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9032: LD_VAR 0 1
9036: PUSH
9037: LD_EXP 42
9041: EQUAL
9042: IFFALSE 9048
// Lose_Burlak ;
9044: CALL 7531 0 0
// if unit = Gaydar then
9048: LD_VAR 0 1
9052: PUSH
9053: LD_EXP 54
9057: EQUAL
9058: IFFALSE 9064
// Lose_Gaydar ;
9060: CALL 7546 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9064: LD_VAR 0 1
9068: PPUSH
9069: CALL_OW 255
9073: PUSH
9074: LD_INT 3
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 247
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: AND
9092: IFFALSE 9108
// lostUnits = lostUnits + 1 ;
9094: LD_ADDR_EXP 24
9098: PUSH
9099: LD_EXP 24
9103: PUSH
9104: LD_INT 1
9106: PLUS
9107: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 255
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 247
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: AND
9136: PUSH
9137: LD_EXP 54
9141: PPUSH
9142: CALL_OW 305
9146: NOT
9147: AND
9148: IFFALSE 9164
// killedArabianUnits = killedArabianUnits + 1 ;
9150: LD_ADDR_EXP 22
9154: PUSH
9155: LD_EXP 22
9159: PUSH
9160: LD_INT 1
9162: PLUS
9163: ST_TO_ADDR
// if unit in firstAttackGroup then
9164: LD_VAR 0 1
9168: PUSH
9169: LD_EXP 64
9173: IN
9174: IFFALSE 9192
// firstAttackGroup = firstAttackGroup diff unit ;
9176: LD_ADDR_EXP 64
9180: PUSH
9181: LD_EXP 64
9185: PUSH
9186: LD_VAR 0 1
9190: DIFF
9191: ST_TO_ADDR
// end ;
9192: PPOPN 1
9194: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 6
9202: EQUAL
9203: IFFALSE 9217
// SetSide ( building , 6 ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 6
9212: PPUSH
9213: CALL_OW 235
// end ;
9217: PPOPN 3
9219: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_INT 22
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 51
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9404
// if GetTaskList ( i ) > 0 then
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 437
9293: PUSH
9294: LD_INT 0
9296: GREATER
9297: IFFALSE 9402
// for j = 1 to GetTaskList ( i ) do
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 437
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9400
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9322: LD_ADDR_VAR 0 4
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: CALL_OW 437
9336: PUSH
9337: LD_VAR 0 3
9341: ARRAY
9342: PUSH
9343: LD_INT 4
9345: ARRAY
9346: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 255
9356: PUSH
9357: LD_INT 6
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 2
9365: PPUSH
9366: CALL_OW 437
9370: PUSH
9371: LD_VAR 0 3
9375: ARRAY
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PUSH
9381: LD_STRING <
9383: EQUAL
9384: AND
9385: IFFALSE 9398
// SetTaskList ( i , [ ] ) ;
9387: LD_VAR 0 2
9391: PPUSH
9392: EMPTY
9393: PPUSH
9394: CALL_OW 446
// end ;
9398: GO 9319
9400: POP
9401: POP
9402: GO 9281
9404: POP
9405: POP
// end ; end_of_file
9406: PPOPN 8
9408: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9409: LD_INT 0
9411: PPUSH
9412: PPUSH
// if exist_mode then
9413: LD_VAR 0 2
9417: IFFALSE 9442
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_EXP 30
9428: PUSH
9429: LD_VAR 0 1
9433: STR
9434: PPUSH
9435: CALL_OW 34
9439: ST_TO_ADDR
9440: GO 9457
// unit := NewCharacter ( ident ) ;
9442: LD_ADDR_VAR 0 5
9446: PUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 25
9456: ST_TO_ADDR
// if class then
9457: LD_VAR 0 3
9461: IFFALSE 9477
// SetClass ( unit , class ) ;
9463: LD_VAR 0 5
9467: PPUSH
9468: LD_VAR 0 3
9472: PPUSH
9473: CALL_OW 336
// result := unit ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_VAR 0 5
9486: ST_TO_ADDR
// end ;
9487: LD_VAR 0 4
9491: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9492: LD_INT 0
9494: PPUSH
9495: PPUSH
// for unit in units do
9496: LD_ADDR_VAR 0 5
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9530
// PlaceUnitArea ( unit , area , spawnMode ) ;
9509: LD_VAR 0 5
9513: PPUSH
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: CALL_OW 49
9528: GO 9506
9530: POP
9531: POP
// end ;
9532: LD_VAR 0 4
9536: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9537: LD_INT 0
9539: PPUSH
9540: PPUSH
9541: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_VAR 0 1
9551: PUSH
9552: LD_EXP 42
9556: PUSH
9557: LD_EXP 43
9561: PUSH
9562: LD_EXP 46
9566: PUSH
9567: LD_EXP 47
9571: PUSH
9572: LD_EXP 44
9576: PUSH
9577: LD_EXP 45
9581: PUSH
9582: LD_EXP 48
9586: PUSH
9587: LD_EXP 49
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: DIFF
9602: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: ST_TO_ADDR
// if radio then
9627: LD_VAR 0 4
9631: IFFALSE 9680
// begin if GetSex ( speaker ) = sex_male then
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL_OW 258
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9664
// SayRadio ( speaker , dialogMID ) else
9648: LD_VAR 0 7
9652: PPUSH
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL_OW 94
9662: GO 9678
// SayRadio ( speaker , dialogFID ) ;
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: CALL_OW 94
// end else
9678: GO 9725
// begin if GetSex ( speaker ) = sex_male then
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 258
9689: PUSH
9690: LD_INT 1
9692: EQUAL
9693: IFFALSE 9711
// Say ( speaker , dialogMID ) else
9695: LD_VAR 0 7
9699: PPUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 88
9709: GO 9725
// Say ( speaker , dialogFID ) ;
9711: LD_VAR 0 7
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: CALL_OW 88
// end ; result := speaker ;
9725: LD_ADDR_VAR 0 5
9729: PUSH
9730: LD_VAR 0 7
9734: ST_TO_ADDR
// end ;
9735: LD_VAR 0 5
9739: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9740: LD_INT 0
9742: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 255
9752: PUSH
9753: LD_VAR 0 3
9757: EQUAL
9758: PUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 302
9768: AND
9769: IFFALSE 9791
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9771: LD_VAR 0 1
9775: PPUSH
9776: LD_EXP 29
9780: PUSH
9781: LD_VAR 0 2
9785: STR
9786: PPUSH
9787: CALL_OW 38
// end ;
9791: LD_VAR 0 4
9795: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// resultCharactersToSave = [ ] ;
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// for unit in characters do
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_VAR 0 1
9817: PUSH
9818: FOR_IN
9819: IFFALSE 9867
// if GetSide ( unit ) = side and IsOK ( unit ) then
9821: LD_VAR 0 5
9825: PPUSH
9826: CALL_OW 255
9830: PUSH
9831: LD_VAR 0 3
9835: EQUAL
9836: PUSH
9837: LD_VAR 0 5
9841: PPUSH
9842: CALL_OW 302
9846: AND
9847: IFFALSE 9865
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 6
9858: PUSH
9859: LD_VAR 0 5
9863: ADD
9864: ST_TO_ADDR
9865: GO 9818
9867: POP
9868: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9869: LD_VAR 0 6
9873: PPUSH
9874: LD_EXP 29
9878: PUSH
9879: LD_VAR 0 2
9883: STR
9884: PPUSH
9885: CALL_OW 38
// end ;
9889: LD_VAR 0 4
9893: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9901: LD_ADDR_VAR 0 3
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 3
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 50
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_VAR 0 3
9951: PUSH
9952: LD_EXP 42
9956: DIFF
9957: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_VAR 0 3
9967: PUSH
9968: LD_EXP 52
9972: DIFF
9973: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_STRING text
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: LD_INT 8
9987: PPUSH
9988: LD_INT -5
9990: PUSH
9991: LD_EXP 42
9995: PUSH
9996: LD_INT -6
9998: PUSH
9999: LD_INT -2
10001: PUSH
10002: LD_INT -3
10004: PUSH
10005: LD_INT -5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_VAR 0 3
10020: ADD
10021: PUSH
10022: LD_INT -6
10024: PUSH
10025: LD_INT -4
10027: PUSH
10028: LD_EXP 52
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: PPUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 42
10068: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 6
10076: PPUSH
10077: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10081: LD_EXP 52
10085: PPUSH
10086: LD_INT 6
10088: PPUSH
10089: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10093: LD_VAR 0 4
10097: PPUSH
10098: LD_INT 3
10100: PPUSH
10101: CALL_OW 235
// burlakTeam = selectedPeople ;
10105: LD_ADDR_EXP 55
10109: PUSH
10110: LD_VAR 0 4
10114: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10115: LD_ADDR_EXP 56
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 6
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10149: LD_ADDR_EXP 56
10153: PUSH
10154: LD_EXP 56
10158: PUSH
10159: LD_EXP 49
10163: DIFF
10164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_INT 6
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: PUSH
10199: FOR_IN
10200: IFFALSE 10224
// if IsInUnit ( i ) then
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 310
10211: IFFALSE 10222
// ComExitVehicle ( i ) ;
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 121
10222: GO 10199
10224: POP
10225: POP
// if not Gnyevko in selectedPeople then
10226: LD_EXP 43
10230: PUSH
10231: LD_VAR 0 4
10235: IN
10236: NOT
10237: IFFALSE 10254
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10239: LD_EXP 43
10243: PPUSH
10244: LD_STRING Gnyevko
10246: PPUSH
10247: LD_INT 6
10249: PPUSH
10250: CALL 9740 0 3
// if not Kovalyuk in selectedPeople then
10254: LD_EXP 45
10258: PUSH
10259: LD_VAR 0 4
10263: IN
10264: NOT
10265: IFFALSE 10282
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10267: LD_EXP 45
10271: PPUSH
10272: LD_STRING Kovalyuk
10274: PPUSH
10275: LD_INT 6
10277: PPUSH
10278: CALL 9740 0 3
// if not Kirilenkova in selectedPeople then
10282: LD_EXP 44
10286: PUSH
10287: LD_VAR 0 4
10291: IN
10292: NOT
10293: IFFALSE 10310
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10295: LD_EXP 44
10299: PPUSH
10300: LD_STRING Kirilenkova
10302: PPUSH
10303: LD_INT 6
10305: PPUSH
10306: CALL 9740 0 3
// if not Scholtze in selectedPeople then
10310: LD_EXP 48
10314: PUSH
10315: LD_VAR 0 4
10319: IN
10320: NOT
10321: IFFALSE 10338
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10323: LD_EXP 48
10327: PPUSH
10328: LD_STRING Scholtze
10330: PPUSH
10331: LD_INT 6
10333: PPUSH
10334: CALL 9740 0 3
// if not Belkov in selectedPeople then
10338: LD_EXP 46
10342: PUSH
10343: LD_VAR 0 4
10347: IN
10348: NOT
10349: IFFALSE 10366
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10351: LD_EXP 46
10355: PPUSH
10356: LD_STRING Belkov
10358: PPUSH
10359: LD_INT 6
10361: PPUSH
10362: CALL 9740 0 3
// if not Belkov2 in selectedPeople then
10366: LD_EXP 47
10370: PUSH
10371: LD_VAR 0 4
10375: IN
10376: NOT
10377: IFFALSE 10394
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_STRING Belkov2
10386: PPUSH
10387: LD_INT 6
10389: PPUSH
10390: CALL 9740 0 3
// others = popovTeam diff Popov ;
10394: LD_ADDR_VAR 0 5
10398: PUSH
10399: LD_EXP 56
10403: PUSH
10404: LD_EXP 52
10408: DIFF
10409: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_STRING other_survivors_with_popov
10417: PPUSH
10418: LD_INT 6
10420: PPUSH
10421: CALL 9796 0 3
// end ; end_of_file
10425: LD_VAR 0 1
10429: RET
// export function MissionIntro ; var i , unit ; begin
10430: LD_INT 0
10432: PPUSH
10433: PPUSH
10434: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10435: LD_EXP 42
10439: PPUSH
10440: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10444: LD_EXP 59
10448: PPUSH
10449: LD_STRING D1-RSol1-1
10451: PPUSH
10452: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-1
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-1
10475: PPUSH
10476: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10480: LD_EXP 53
10484: PPUSH
10485: LD_STRING D1-Pla-2
10487: PPUSH
10488: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10492: LD_EXP 42
10496: PPUSH
10497: LD_STRING D1-Bur-2
10499: PPUSH
10500: CALL_OW 88
// SelectCharacters ;
10504: CALL 9894 0 0
// InGameOff ;
10508: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10512: LD_STRING M1
10514: PPUSH
10515: CALL_OW 337
// SaveForQuickRestart ;
10519: CALL_OW 22
// for unit in popovTeam do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: LD_EXP 56
10532: PUSH
10533: FOR_IN
10534: IFFALSE 10606
// begin for i := 3 to russianCargoPath1 do
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: DOUBLE
10542: LD_INT 3
10544: DEC
10545: ST_TO_ADDR
10546: LD_EXP 34
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10595
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_EXP 34
10563: PUSH
10564: LD_VAR 0 2
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: LD_EXP 34
10578: PUSH
10579: LD_VAR 0 2
10583: ARRAY
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PPUSH
10589: CALL_OW 171
10593: GO 10551
10595: POP
10596: POP
// wait ( 0 0$01 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// end ;
10604: GO 10533
10606: POP
10607: POP
// end ;
10608: LD_VAR 0 1
10612: RET
// every 0 0$1 do var unit , driver ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin enable ;
10620: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10621: LD_INT 4
10623: PPUSH
10624: LD_INT 22
10626: PUSH
10627: LD_INT 6
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: NOT
10639: PUSH
10640: LD_INT 4
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 2
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: NOT
10690: AND
10691: IFFALSE 10695
// exit ;
10693: GO 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 4
10702: PPUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 6
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10774
// begin RemoveUnit ( unit ) ;
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10730: LD_VAR 0 1
10734: PUSH
10735: LD_EXP 56
10739: IN
10740: NOT
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 264
10751: PUSH
10752: LD_INT 51
10754: EQUAL
10755: AND
10756: IFFALSE 10772
// evacuatedCargos = evacuatedCargos + 1 ;
10758: LD_ADDR_EXP 10
10762: PUSH
10763: LD_EXP 10
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ST_TO_ADDR
// end ;
10772: GO 10718
10774: POP
10775: POP
// if canExitMap then
10776: LD_EXP 6
10780: IFFALSE 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 4
10789: PPUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 70
10836: PUSH
10837: FOR_IN
10838: IFFALSE 11044
// begin if GetType ( unit ) = unit_vehicle then
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 247
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: IFFALSE 10953
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 313
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 42
10873: PUSH
10874: LD_EXP 43
10878: PUSH
10879: LD_EXP 44
10883: PUSH
10884: LD_EXP 45
10888: PUSH
10889: LD_EXP 46
10893: PUSH
10894: LD_EXP 47
10898: PUSH
10899: LD_EXP 48
10903: PUSH
10904: LD_EXP 49
10908: PUSH
10909: LD_EXP 54
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: IN
10925: NOT
10926: IFFALSE 10953
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10928: LD_ADDR_EXP 62
10932: PUSH
10933: LD_EXP 62
10937: PUSH
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 313
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: ADD
10952: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 42
10962: PUSH
10963: LD_EXP 43
10967: PUSH
10968: LD_EXP 44
10972: PUSH
10973: LD_EXP 45
10977: PUSH
10978: LD_EXP 46
10982: PUSH
10983: LD_EXP 47
10987: PUSH
10988: LD_EXP 48
10992: PUSH
10993: LD_EXP 49
10997: PUSH
10998: LD_EXP 54
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: IN
11014: NOT
11015: IFFALSE 11033
// randomsToSave = randomsToSave ^ unit ;
11017: LD_ADDR_EXP 62
11021: PUSH
11022: LD_EXP 62
11026: PUSH
11027: LD_VAR 0 1
11031: ADD
11032: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 64
// end ;
11042: GO 10837
11044: POP
11045: POP
// end ;
11046: PPOPN 2
11048: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: PPUSH
11082: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 87
// InGameOn ;
11095: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11099: LD_EXP 53
11103: PPUSH
11104: LD_STRING D2a-Pla-1
11106: PPUSH
11107: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_INT 3
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 21
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: PUSH
11156: FOR_IN
11157: IFFALSE 11195
// if GetDistUnits ( building , unit ) < 10 then
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: CALL_OW 296
11173: PUSH
11174: LD_INT 10
11176: LESS
11177: IFFALSE 11193
// ComDismantle ( unit , building ) ;
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 167
11193: GO 11156
11195: POP
11196: POP
// repeat wait ( 0 0$1 ) ;
11197: LD_INT 35
11199: PPUSH
11200: CALL_OW 67
// until not IsPlaced ( building ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 305
11213: NOT
11214: IFFALSE 11197
// InGameOff ;
11216: CALL_OW 9
// end ;
11220: LD_VAR 0 2
11224: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11225: LD_EXP 49
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 6
11237: EQUAL
11238: IFFALSE 11320
11240: GO 11242
11242: DISABLE
11243: LD_INT 0
11245: PPUSH
// begin enable ;
11246: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11318
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_EXP 49
11293: PPUSH
11294: CALL_OW 296
11298: PUSH
11299: LD_INT 9
11301: LESS
11302: IFFALSE 11316
// SetSide ( Kuzmov , 3 ) ;
11304: LD_EXP 49
11308: PPUSH
11309: LD_INT 3
11311: PPUSH
11312: CALL_OW 235
11316: GO 11281
11318: POP
11319: POP
// end ;
11320: PPOPN 1
11322: END
// export function Dial_FinishDepot ; var i ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// startEvacuation = true ;
11327: LD_ADDR_EXP 8
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11335: LD_STRING MOutBuild
11337: PPUSH
11338: CALL_OW 337
// uc_side = 6 ;
11342: LD_ADDR_OWVAR 20
11346: PUSH
11347: LD_INT 6
11349: ST_TO_ADDR
// uc_nation = 3 ;
11350: LD_ADDR_OWVAR 21
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11358: LD_ADDR_OWVAR 37
11362: PUSH
11363: LD_INT 21
11365: ST_TO_ADDR
// vc_control = control_manual ;
11366: LD_ADDR_OWVAR 38
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// vc_engine = engine_combustion ;
11374: LD_ADDR_OWVAR 39
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11382: LD_ADDR_OWVAR 40
11386: PUSH
11387: LD_INT 51
11389: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11390: LD_ADDR_EXP 60
11394: PUSH
11395: CALL_OW 45
11399: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11400: LD_EXP 60
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11412: LD_EXP 60
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11427: LD_INT 1
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11437: CALL_OW 44
11441: PPUSH
11442: LD_EXP 60
11446: PPUSH
11447: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11451: LD_EXP 60
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 100
11461: PPUSH
11462: CALL_OW 291
// for i := 1 to 19 do
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 19
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11523
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11482: LD_EXP 60
11486: PPUSH
11487: LD_EXP 34
11491: PUSH
11492: LD_VAR 0 2
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_EXP 34
11506: PUSH
11507: LD_VAR 0 2
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: CALL_OW 171
11521: GO 11479
11523: POP
11524: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11525: LD_EXP 60
11529: PPUSH
11530: LD_INT 105
11532: PPUSH
11533: LD_INT 123
11535: PPUSH
11536: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11540: LD_EXP 60
11544: PPUSH
11545: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 21
11557: DEC
11558: ST_TO_ADDR
11559: LD_EXP 34
11563: PUSH
11564: FOR_TO
11565: IFFALSE 11608
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11567: LD_EXP 60
11571: PPUSH
11572: LD_EXP 34
11576: PUSH
11577: LD_VAR 0 2
11581: ARRAY
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_EXP 34
11591: PUSH
11592: LD_VAR 0 2
11596: ARRAY
11597: PUSH
11598: LD_INT 2
11600: ARRAY
11601: PPUSH
11602: CALL_OW 171
11606: GO 11564
11608: POP
11609: POP
// Say ( Burlak , D2-Bur-1 ) ;
11610: LD_EXP 42
11614: PPUSH
11615: LD_STRING D2-Bur-1
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11622: LD_EXP 53
11626: PPUSH
11627: LD_STRING D2-Pla-1
11629: PPUSH
11630: CALL_OW 94
// PrepareSecondBaseTeam ;
11634: CALL 3314 0 0
// end ;
11638: LD_VAR 0 1
11642: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
// dial_labUpgradedBlock = true ;
11647: LD_ADDR_EXP 15
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 3
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 26
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: PUSH
11711: LD_EXP 42
11715: PUSH
11716: LD_EXP 43
11720: PUSH
11721: LD_EXP 44
11725: PUSH
11726: LD_EXP 45
11730: PUSH
11731: LD_EXP 46
11735: PUSH
11736: LD_EXP 47
11740: PUSH
11741: LD_EXP 48
11745: PUSH
11746: LD_EXP 49
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11762: LD_EXP 48
11766: PPUSH
11767: CALL_OW 302
11771: PUSH
11772: LD_EXP 48
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_INT 3
11784: EQUAL
11785: AND
11786: IFFALSE 11814
// begin Say ( Scholtze , D5-Sch-1 ) ;
11788: LD_EXP 48
11792: PPUSH
11793: LD_STRING D5-Sch-1
11795: PPUSH
11796: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11800: LD_EXP 42
11804: PPUSH
11805: LD_STRING D5-Bur-1
11807: PPUSH
11808: CALL_OW 88
// end else
11812: GO 11949
// if randomMaleSci then
11814: LD_VAR 0 2
11818: IFFALSE 11850
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11820: LD_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_STRING D5-RSci1-1
11831: PPUSH
11832: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11836: LD_EXP 42
11840: PPUSH
11841: LD_STRING D5-Bur-1
11843: PPUSH
11844: CALL_OW 88
// end else
11848: GO 11949
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11850: LD_ADDR_VAR 0 2
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 4
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: PUSH
11906: LD_EXP 42
11910: PUSH
11911: EMPTY
11912: LIST
11913: DIFF
11914: ST_TO_ADDR
// if randomMaleSci then
11915: LD_VAR 0 2
11919: IFFALSE 11949
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_STRING D5-RSci1-1
11932: PPUSH
11933: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11937: LD_EXP 42
11941: PPUSH
11942: LD_STRING D5-Bur-1
11944: PPUSH
11945: CALL_OW 88
// end ; end ; end ;
11949: LD_VAR 0 1
11953: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11954: LD_EXP 60
11958: PPUSH
11959: LD_INT 105
11961: PPUSH
11962: LD_INT 123
11964: PPUSH
11965: CALL_OW 297
11969: PUSH
11970: LD_INT 12
11972: LESS
11973: IFFALSE 11999
11975: GO 11977
11977: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11978: LD_EXP 60
11982: PPUSH
11983: CALL_OW 313
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_STRING D2a-RSol1-1
11994: PPUSH
11995: CALL_OW 88
11999: END
// every 0 0$15 trigger startEvacuation do
12000: LD_EXP 8
12004: IFFALSE 12014
12006: GO 12008
12008: DISABLE
// begin enable ;
12009: ENABLE
// CreateEvacuateUnit ;
12010: CALL 2544 0 0
// end ;
12014: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
12015: LD_EXP 10
12019: PUSH
12020: LD_INT 3
12022: GREATEREQUAL
12023: IFFALSE 12122
12025: GO 12027
12027: DISABLE
// begin if IsOk ( Kuzmov ) then
12028: LD_EXP 49
12032: PPUSH
12033: CALL_OW 302
12037: IFFALSE 12107
// begin DialogueOn ;
12039: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-1
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-1
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-2
12074: PPUSH
12075: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12079: LD_EXP 42
12083: PPUSH
12084: LD_STRING D2b-Bur-2
12086: PPUSH
12087: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12091: LD_EXP 49
12095: PPUSH
12096: LD_STRING D2b-Kuz-3
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// end ; Query ( Q1 ) ;
12107: LD_STRING Q1
12109: PPUSH
12110: CALL_OW 97
// canStealCargo = true ;
12114: LD_ADDR_EXP 11
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ;
12122: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12123: LD_EXP 11
12127: IFFALSE 12425
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
// begin enable ;
12136: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 6
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 34
12164: PUSH
12165: LD_INT 51
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PUSH
12182: FOR_IN
12183: IFFALSE 12423
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 3
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 50
12212: PUSH
12213: EMPTY
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12419
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 296
12243: PUSH
12244: LD_INT 8
12246: LESS
12247: PUSH
12248: LD_VAR 0 2
12252: PUSH
12253: LD_EXP 13
12257: IN
12258: NOT
12259: AND
12260: PUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 289
12273: PUSH
12274: LD_INT 0
12276: GREATER
12277: AND
12278: IFFALSE 12417
// begin stealCargos = stealCargos ^ cargo ;
12280: LD_ADDR_EXP 13
12284: PUSH
12285: LD_EXP 13
12289: PUSH
12290: LD_VAR 0 2
12294: ADD
12295: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12296: LD_STRING QQrSteal
12298: PPUSH
12299: CALL_OW 97
12303: PUSH
12304: LD_INT 1
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12385
12312: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12313: LD_ADDR_EXP 12
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_INT 1
12325: PLUS
12326: ST_TO_ADDR
// DialogueOn ;
12327: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12331: LD_EXP 42
12335: PPUSH
12336: LD_STRING DQrSteal#1-Bur-1
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 14
12354: PPUSH
12355: CALL_OW 113
// AddComUnload ( cargo ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 92
12375: PPUSH
12376: LD_INT 177
12378: PPUSH
12379: CALL_OW 171
// end ; 2 :
12383: GO 12417
12385: LD_INT 2
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12416
12393: POP
// begin DialogueOn ;
12394: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12398: LD_EXP 42
12402: PPUSH
12403: LD_STRING DQrSteal#2-Bur-1
12405: PPUSH
12406: CALL_OW 88
// DialogueOff ;
12410: CALL_OW 7
// end ; end ;
12414: GO 12417
12416: POP
// end ;
12417: GO 12226
12419: POP
12420: POP
12421: GO 12182
12423: POP
12424: POP
// end ;
12425: PPOPN 2
12427: END
// every 0 0$12 trigger stealWarmCount = 3 do
12428: LD_EXP 12
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: IFFALSE 12508
12438: GO 12440
12440: DISABLE
// begin DialogueOn ;
12441: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-1
12452: PPUSH
12453: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12457: LD_EXP 42
12461: PPUSH
12462: LD_STRING D3A-Bur-1
12464: PPUSH
12465: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12469: LD_EXP 53
12473: PPUSH
12474: LD_STRING D3A-Pla-2
12476: PPUSH
12477: CALL_OW 94
// if IsOK ( Kuzmov ) then
12481: LD_EXP 49
12485: PPUSH
12486: CALL_OW 302
12490: IFFALSE 12504
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12492: LD_EXP 49
12496: PPUSH
12497: LD_STRING D3A-Kuz-2
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$10 trigger stealWarmCount = 6 do
12509: LD_EXP 12
12513: PUSH
12514: LD_INT 6
12516: EQUAL
12517: IFFALSE 12566
12519: GO 12521
12521: DISABLE
// begin DialogueOn ;
12522: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-1
12533: PPUSH
12534: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12538: LD_EXP 42
12542: PPUSH
12543: LD_STRING D3B-Bur-1
12545: PPUSH
12546: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12550: LD_EXP 53
12554: PPUSH
12555: LD_STRING D3B-Pla-2
12557: PPUSH
12558: CALL_OW 94
// DialogueOff ;
12562: CALL_OW 7
// end ;
12566: END
// every 0 0$10 trigger stealWarmCount = 7 do
12567: LD_EXP 12
12571: PUSH
12572: LD_INT 7
12574: EQUAL
12575: IFFALSE 12659
12577: GO 12579
12579: DISABLE
// begin DialogueOn ;
12580: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-1
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-1
12603: PPUSH
12604: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12608: LD_EXP 53
12612: PPUSH
12613: LD_STRING D3C-Pla-2
12615: PPUSH
12616: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12620: LD_EXP 42
12624: PPUSH
12625: LD_STRING D3C-Bur-2
12627: PPUSH
12628: CALL_OW 88
// if IsOK ( Kuzmov ) then
12632: LD_EXP 49
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12655
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12643: LD_EXP 49
12647: PPUSH
12648: LD_STRING D3C-Kuz-2
12650: PPUSH
12651: CALL_OW 88
// DialogueOff ;
12655: CALL_OW 7
// end ;
12659: END
// every 0 0$10 trigger stealWarmCount = 8 do
12660: LD_EXP 12
12664: PUSH
12665: LD_INT 8
12667: EQUAL
12668: IFFALSE 12860
12670: GO 12672
12672: DISABLE
// begin canStealCargo = false ;
12673: LD_ADDR_EXP 11
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// DialogueOn ;
12681: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12685: LD_EXP 53
12689: PPUSH
12690: LD_STRING D3D-Pla-1
12692: PPUSH
12693: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12697: LD_EXP 42
12701: PPUSH
12702: LD_STRING D3D-Bur-1
12704: PPUSH
12705: CALL_OW 88
// if kurinOpinion = 0 then
12709: LD_EXP 2
12713: PUSH
12714: LD_INT 0
12716: EQUAL
12717: IFFALSE 12737
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12719: LD_EXP 53
12723: PPUSH
12724: LD_STRING D3E-Pla-1
12726: PPUSH
12727: CALL_OW 94
// Lose_Arrest ;
12731: CALL 7576 0 0
// exit ;
12735: GO 12860
// end ; if meetBelkovBrother = 1 then
12737: LD_EXP 3
12741: PUSH
12742: LD_INT 1
12744: EQUAL
12745: IFFALSE 12765
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12747: LD_EXP 53
12751: PPUSH
12752: LD_STRING D3E-Pla-1a
12754: PPUSH
12755: CALL_OW 94
// Lose_Arrest ;
12759: CALL 7576 0 0
// exit ;
12763: GO 12860
// end ; if platonovOpinion = 0 then
12765: LD_EXP 1
12769: PUSH
12770: LD_INT 0
12772: EQUAL
12773: IFFALSE 12793
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12775: LD_EXP 53
12779: PPUSH
12780: LD_STRING D3E-Pla-1b
12782: PPUSH
12783: CALL_OW 94
// Lose_Arrest ;
12787: CALL 7576 0 0
// exit ;
12791: GO 12860
// end ; if platonovOpinion = 1 then
12793: LD_EXP 1
12797: PUSH
12798: LD_INT 1
12800: EQUAL
12801: IFFALSE 12821
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12803: LD_EXP 53
12807: PPUSH
12808: LD_STRING D3E-Pla-1c
12810: PPUSH
12811: CALL_OW 94
// Lose_Arrest ;
12815: CALL 7576 0 0
// exit ;
12819: GO 12860
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12821: LD_EXP 53
12825: PPUSH
12826: LD_STRING D3D-Pla-2
12828: PPUSH
12829: CALL_OW 94
// if IsOK ( Kuzmov ) then
12833: LD_EXP 49
12837: PPUSH
12838: CALL_OW 302
12842: IFFALSE 12856
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12844: LD_EXP 49
12848: PPUSH
12849: LD_STRING D3D-Kuz-2
12851: PPUSH
12852: CALL_OW 88
// DialogueOff ;
12856: CALL_OW 7
// end ;
12860: END
// every 0 0$20 do var allyUntis ;
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// wait ( 0 0$10 ) ;
12868: LD_INT 350
12870: PPUSH
12871: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 60
12895: PUSH
12896: EMPTY
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 56
12916: DIFF
12917: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 1
12927: PUSH
12928: LD_EXP 54
12932: DIFF
12933: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_VAR 0 1
12943: PUSH
12944: LD_EXP 49
12948: DIFF
12949: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12950: LD_ADDR_VAR 0 1
12954: PUSH
12955: LD_VAR 0 1
12959: PUSH
12960: LD_EXP 57
12964: DIFF
12965: ST_TO_ADDR
// if not allyUntis then
12966: LD_VAR 0 1
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 12999
// ComUnload ( allyUntis ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12984: LD_VAR 0 1
12988: PPUSH
12989: LD_INT 92
12991: PPUSH
12992: LD_INT 176
12994: PPUSH
12995: CALL_OW 171
// end ;
12999: PPOPN 1
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: IFFALSE 13025
13014: GO 13016
13016: DISABLE
// begin startEvacuation = false ;
13017: LD_ADDR_EXP 8
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// end ;
13025: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13026: LD_EXP 10
13030: PUSH
13031: LD_EXP 14
13035: GREATEREQUAL
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 6
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 69
13083: PUSH
13084: LD_EXP 57
13088: DIFF
13089: NOT
13090: AND
13091: IFFALSE 13686
13093: GO 13095
13095: DISABLE
// begin wait ( 1 1$00 ) ;
13096: LD_INT 2100
13098: PPUSH
13099: CALL_OW 67
// DialogueOn ;
13103: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13107: LD_EXP 53
13111: PPUSH
13112: LD_STRING D4-Pla-1
13114: PPUSH
13115: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13119: LD_EXP 42
13123: PPUSH
13124: LD_STRING D4-Bur-1
13126: PPUSH
13127: CALL_OW 88
// DialogueOff ;
13131: CALL_OW 7
// wait ( 0 0$2 ) ;
13135: LD_INT 70
13137: PPUSH
13138: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13142: LD_EXP 49
13146: PPUSH
13147: CALL_OW 302
13151: PUSH
13152: LD_EXP 49
13156: PPUSH
13157: CALL_OW 255
13161: PUSH
13162: LD_INT 3
13164: EQUAL
13165: AND
13166: IFFALSE 13448
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13168: LD_EXP 49
13172: PPUSH
13173: LD_STRING D4-Kuz-1
13175: PPUSH
13176: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13180: LD_EXP 46
13184: PPUSH
13185: CALL_OW 302
13189: PUSH
13190: LD_EXP 46
13194: PPUSH
13195: CALL_OW 255
13199: PUSH
13200: LD_INT 3
13202: EQUAL
13203: AND
13204: IFFALSE 13220
// Say ( Belkov , D4-Bel-1 ) else
13206: LD_EXP 46
13210: PPUSH
13211: LD_STRING D4-Bel-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13258
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13220: LD_EXP 47
13224: PPUSH
13225: CALL_OW 302
13229: PUSH
13230: LD_EXP 47
13234: PPUSH
13235: CALL_OW 255
13239: PUSH
13240: LD_INT 3
13242: EQUAL
13243: AND
13244: IFFALSE 13258
// Say ( Belkov2 , D4-Bel-1 ) ;
13246: LD_EXP 47
13250: PPUSH
13251: LD_STRING D4-Bel-1
13253: PPUSH
13254: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13258: LD_EXP 42
13262: PPUSH
13263: LD_STRING D4-Bur-2
13265: PPUSH
13266: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13270: LD_EXP 43
13274: PPUSH
13275: CALL_OW 302
13279: PUSH
13280: LD_EXP 43
13284: PPUSH
13285: CALL_OW 255
13289: PUSH
13290: LD_INT 3
13292: EQUAL
13293: AND
13294: IFFALSE 13320
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13296: LD_EXP 43
13300: PPUSH
13301: LD_STRING D4-Gny-2
13303: PPUSH
13304: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13308: LD_EXP 42
13312: PPUSH
13313: LD_STRING D4-Bur-3
13315: PPUSH
13316: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13320: LD_EXP 42
13324: PPUSH
13325: LD_STRING D4-Bur-3a
13327: PPUSH
13328: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13332: LD_EXP 46
13336: PPUSH
13337: CALL_OW 302
13341: PUSH
13342: LD_EXP 46
13346: PPUSH
13347: CALL_OW 255
13351: PUSH
13352: LD_INT 3
13354: EQUAL
13355: AND
13356: IFFALSE 13372
// Say ( Belkov , D4-Bel-3 ) else
13358: LD_EXP 46
13362: PPUSH
13363: LD_STRING D4-Bel-3
13365: PPUSH
13366: CALL_OW 88
13370: GO 13410
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13372: LD_EXP 47
13376: PPUSH
13377: CALL_OW 302
13381: PUSH
13382: LD_EXP 47
13386: PPUSH
13387: CALL_OW 255
13391: PUSH
13392: LD_INT 3
13394: EQUAL
13395: AND
13396: IFFALSE 13410
// Say ( Belkov2 , D4-Bel-3 ) ;
13398: LD_EXP 47
13402: PPUSH
13403: LD_STRING D4-Bel-3
13405: PPUSH
13406: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13410: LD_EXP 45
13414: PPUSH
13415: CALL_OW 302
13419: PUSH
13420: LD_EXP 45
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: AND
13434: IFFALSE 13448
// Say ( Kovalyuk , D4-Kov-3 ) ;
13436: LD_EXP 45
13440: PPUSH
13441: LD_STRING D4-Kov-3
13443: PPUSH
13444: CALL_OW 88
// end ; PrepareFirstAttack ;
13448: CALL 4199 0 0
// firstAttack = true ;
13452: LD_ADDR_EXP 18
13456: PUSH
13457: LD_INT 1
13459: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13460: LD_INT 350
13462: PPUSH
13463: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13467: LD_EXP 42
13471: PPUSH
13472: LD_STRING D7-Bur-1
13474: PPUSH
13475: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13479: LD_EXP 64
13483: PPUSH
13484: LD_INT 135
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 134
13496: PUSH
13497: LD_INT 19
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 132
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 128
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 123
13526: PUSH
13527: LD_INT 37
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 118
13536: PUSH
13537: LD_INT 45
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 51
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 106
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 99
13566: PUSH
13567: LD_INT 62
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 93
13576: PUSH
13577: LD_INT 67
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 86
13586: PUSH
13587: LD_INT 72
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 78
13596: PUSH
13597: LD_INT 75
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 71
13606: PUSH
13607: LD_INT 81
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 69
13616: PUSH
13617: LD_INT 88
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 71
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 74
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 80
13646: PUSH
13647: LD_INT 113
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 11
13681: PPUSH
13682: CALL 5042 0 5
// end ;
13686: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13687: LD_EXP 64
13691: PPUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: NOT
13707: PUSH
13708: LD_EXP 18
13712: AND
13713: IFFALSE 13772
13715: GO 13717
13717: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13718: LD_EXP 57
13722: PPUSH
13723: CALL_OW 122
// wait ( 0 0$1 ) ;
13727: LD_INT 35
13729: PPUSH
13730: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13734: LD_EXP 57
13738: PPUSH
13739: LD_INT 114
13741: PPUSH
13742: LD_INT 114
13744: PPUSH
13745: CALL_OW 111
// wait ( 0 0$15 ) ;
13749: LD_INT 525
13751: PPUSH
13752: CALL_OW 67
// firstAttack = false ;
13756: LD_ADDR_EXP 18
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// enableAttacks = true ;
13764: LD_ADDR_EXP 17
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// end ;
13772: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13773: LD_OWVAR 67
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: PUSH
13782: LD_EXP 57
13786: AND
13787: IFFALSE 13855
13789: GO 13791
13791: DISABLE
13792: LD_INT 0
13794: PPUSH
// begin enable ;
13795: ENABLE
// for un in secondBaseTeam do
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_EXP 57
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13853
// if IsInArea ( un , HillArea ) then
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 5
13816: PPUSH
13817: CALL_OW 308
13821: IFFALSE 13851
// begin SetSide ( un , 3 ) ;
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13835: LD_ADDR_EXP 57
13839: PUSH
13840: LD_EXP 57
13844: PUSH
13845: LD_VAR 0 1
13849: DIFF
13850: ST_TO_ADDR
// end ;
13851: GO 13806
13853: POP
13854: POP
// end ;
13855: PPOPN 1
13857: END
// export function Dial_Contact ; begin
13858: LD_INT 0
13860: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13861: LD_EXP 42
13865: PPUSH
13866: LD_STRING D7-Bur-1a
13868: PPUSH
13869: CALL_OW 88
// wait ( 0 0$12 ) ;
13873: LD_INT 420
13875: PPUSH
13876: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13880: LD_EXP 42
13884: PPUSH
13885: LD_STRING D7-Bur-1b
13887: PPUSH
13888: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13892: LD_EXP 46
13896: PPUSH
13897: CALL_OW 302
13901: PUSH
13902: LD_EXP 46
13906: PPUSH
13907: CALL_OW 255
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: AND
13916: IFFALSE 13932
// Say ( Belkov , D7-Bel-1 ) else
13918: LD_EXP 46
13922: PPUSH
13923: LD_STRING D7-Bel-1
13925: PPUSH
13926: CALL_OW 88
13930: GO 13970
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13932: LD_EXP 47
13936: PPUSH
13937: CALL_OW 302
13941: PUSH
13942: LD_EXP 47
13946: PPUSH
13947: CALL_OW 255
13951: PUSH
13952: LD_INT 3
13954: EQUAL
13955: AND
13956: IFFALSE 13970
// Say ( Belkov2 , D7-Bel-1 ) ;
13958: LD_EXP 47
13962: PPUSH
13963: LD_STRING D7-Bel-1
13965: PPUSH
13966: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13970: LD_EXP 49
13974: PPUSH
13975: CALL_OW 302
13979: PUSH
13980: LD_EXP 49
13984: PPUSH
13985: CALL_OW 255
13989: PUSH
13990: LD_INT 3
13992: EQUAL
13993: AND
13994: IFFALSE 14008
// Say ( Kuzmov , D7-Kuz-1 ) ;
13996: LD_EXP 49
14000: PPUSH
14001: LD_STRING D7-Kuz-1
14003: PPUSH
14004: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
14008: LD_EXP 45
14012: PPUSH
14013: CALL_OW 302
14017: PUSH
14018: LD_EXP 45
14022: PPUSH
14023: CALL_OW 255
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: AND
14032: IFFALSE 14046
// Say ( Kovalyuk , D7-Kov-1 ) ;
14034: LD_EXP 45
14038: PPUSH
14039: LD_STRING D7-Kov-1
14041: PPUSH
14042: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14046: LD_EXP 48
14050: PPUSH
14051: CALL_OW 302
14055: PUSH
14056: LD_EXP 48
14060: PPUSH
14061: CALL_OW 255
14065: PUSH
14066: LD_INT 3
14068: EQUAL
14069: AND
14070: IFFALSE 14084
// Say ( Scholtze , D7-Sch-1 ) ;
14072: LD_EXP 48
14076: PPUSH
14077: LD_STRING D7-Sch-1
14079: PPUSH
14080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 21
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: PPUSH
14124: LD_STRING D7-RSol1-1
14126: PPUSH
14127: LD_STRING 
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: CALL 9537 0 4
// PrepareHeike ;
14137: CALL 3519 0 0
// wait ( 0 0$10 ) ;
14141: LD_INT 350
14143: PPUSH
14144: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14148: LD_EXP 63
14152: PPUSH
14153: LD_STRING D7a-Hke-1
14155: PPUSH
14156: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14160: LD_EXP 42
14164: PPUSH
14165: LD_STRING D7a-Bur-1
14167: PPUSH
14168: CALL_OW 88
// wait ( 0 0$50 ) ;
14172: LD_INT 1750
14174: PPUSH
14175: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14179: LD_EXP 49
14183: PPUSH
14184: CALL_OW 302
14188: PUSH
14189: LD_EXP 49
14193: PPUSH
14194: CALL_OW 255
14198: PUSH
14199: LD_INT 3
14201: EQUAL
14202: AND
14203: IFFALSE 14219
// Say ( Kuzmov , D8-Kuz-1 ) else
14205: LD_EXP 49
14209: PPUSH
14210: LD_STRING D8-Kuz-1
14212: PPUSH
14213: CALL_OW 88
14217: GO 14272
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14219: LD_INT 22
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 26
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: PPUSH
14259: LD_STRING D8-RSol1-1
14261: PPUSH
14262: LD_STRING 
14264: PPUSH
14265: LD_INT 0
14267: PPUSH
14268: CALL 9537 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14272: LD_EXP 42
14276: PPUSH
14277: LD_STRING D8-Bur-1
14279: PPUSH
14280: CALL_OW 88
// end ;
14284: LD_VAR 0 1
14288: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14289: LD_EXP 54
14293: PPUSH
14294: CALL_OW 305
14298: NOT
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 50
14322: PUSH
14323: EMPTY
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: AND
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 3
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 50
14360: PUSH
14361: EMPTY
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: PUSH
14374: LD_INT 5
14376: LESS
14377: AND
14378: PUSH
14379: LD_INT 5
14381: PPUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: PUSH
14400: LD_INT 3
14402: GREATER
14403: AND
14404: IFFALSE 14413
14406: GO 14408
14408: DISABLE
// Lose_ArabBreakthrough ;
14409: CALL 7591 0 0
14413: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14414: LD_EXP 19
14418: PUSH
14419: LD_EXP 38
14423: GREATEREQUAL
14424: IFFALSE 14648
14426: GO 14428
14428: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-1
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-1
14448: PPUSH
14449: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14453: LD_EXP 53
14457: PPUSH
14458: LD_STRING D9-Pla-2
14460: PPUSH
14461: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14465: LD_EXP 42
14469: PPUSH
14470: LD_STRING D9-Bur-2
14472: PPUSH
14473: CALL_OW 88
// wait ( 2 2$0 ) ;
14477: LD_INT 4200
14479: PPUSH
14480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14491: LD_INT 12
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 428
14501: NOT
14502: IFFALSE 14484
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14504: LD_EXP 54
14508: PPUSH
14509: LD_INT 12
14511: PPUSH
14512: LD_INT 3
14514: PPUSH
14515: LD_INT 2
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 50
// arabianCanExitMap = true ;
14525: LD_ADDR_EXP 7
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14533: LD_INT 35
14535: PPUSH
14536: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14540: LD_EXP 54
14544: PPUSH
14545: CALL_OW 87
// DialogueOn ;
14549: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-1
14560: PPUSH
14561: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14565: LD_EXP 42
14569: PPUSH
14570: LD_STRING D10-Bur-1
14572: PPUSH
14573: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-2
14584: PPUSH
14585: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14589: LD_EXP 52
14593: PPUSH
14594: LD_STRING D10-Pop-2
14596: PPUSH
14597: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14601: LD_EXP 54
14605: PPUSH
14606: LD_STRING D10-Gay-3
14608: PPUSH
14609: CALL_OW 94
// DialogueOff ;
14613: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14617: LD_EXP 54
14621: PPUSH
14622: LD_INT 36
14624: PPUSH
14625: LD_INT 38
14627: PPUSH
14628: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14632: LD_EXP 54
14636: PPUSH
14637: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14641: LD_STRING M2
14643: PPUSH
14644: CALL_OW 337
// end ;
14648: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14649: LD_EXP 7
14653: IFFALSE 14726
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
// begin enable ;
14661: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14662: LD_INT 22
14664: PUSH
14665: LD_INT 2
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: PPUSH
14675: CALL_OW 69
14679: PPUSH
14680: LD_INT 13
14682: PPUSH
14683: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 13
14694: PPUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 70
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14724
// RemoveUnit ( unit ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 64
14722: GO 14710
14724: POP
14725: POP
// end ;
14726: PPOPN 1
14728: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14729: LD_EXP 20
14733: NOT
14734: IFFALSE 15124
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
// begin enable ;
14743: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: PUSH
14778: FOR_IN
14779: IFFALSE 15122
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_EXP 54
14790: PPUSH
14791: CALL_OW 296
14795: PUSH
14796: LD_INT 6
14798: LESS
14799: IFFALSE 15120
// begin SetSide ( Gaydar , 3 ) ;
14801: LD_EXP 54
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: CALL_OW 235
// ComWalk ( Gaydar ) ;
14813: LD_EXP 54
14817: PPUSH
14818: CALL_OW 138
// saveGaydar = true ;
14822: LD_ADDR_EXP 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14830: LD_INT 35
14832: PPUSH
14833: CALL_OW 67
// DialogueOn ;
14837: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14841: LD_EXP 54
14845: PPUSH
14846: LD_STRING D11-Gay-1
14848: PPUSH
14849: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14853: LD_EXP 42
14857: PPUSH
14858: LD_EXP 54
14862: PPUSH
14863: CALL_OW 296
14867: PUSH
14868: LD_INT 6
14870: LESS
14871: NOT
14872: IFFALSE 14972
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 50
14911: PUSH
14912: EMPTY
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_EXP 54
14930: DIFF
14931: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_EXP 54
14941: PPUSH
14942: CALL_OW 74
14946: PPUSH
14947: LD_STRING D11-RSol1-1
14949: PPUSH
14950: CALL_OW 88
// gaydarWaitForBurlak = true ;
14954: LD_ADDR_EXP 21
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// DialogueOff ;
14962: CALL_OW 7
// exit ;
14966: POP
14967: POP
14968: GO 15124
// end else
14970: GO 15120
// begin Say ( Gaydar , D11-Gay-2 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-2
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-2
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-3
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-3
15015: PPUSH
15016: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15020: LD_EXP 54
15024: PPUSH
15025: LD_STRING D11-Gay-4
15027: PPUSH
15028: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15032: LD_EXP 42
15036: PPUSH
15037: LD_STRING D11-Bur-4
15039: PPUSH
15040: CALL_OW 88
// wait ( 0 0$2 ) ;
15044: LD_INT 70
15046: PPUSH
15047: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15051: LD_EXP 52
15055: PPUSH
15056: LD_STRING D12-Pop-1
15058: PPUSH
15059: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15063: LD_EXP 42
15067: PPUSH
15068: LD_STRING D12-Bur-1
15070: PPUSH
15071: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15075: LD_EXP 53
15079: PPUSH
15080: LD_STRING D12-Pla-1
15082: PPUSH
15083: CALL_OW 94
// DialogueOff ;
15087: CALL_OW 7
// canExitMap = true ;
15091: LD_ADDR_EXP 6
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15099: LD_STRING MFinal
15101: PPUSH
15102: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15106: LD_INT 4
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 424
// exit ;
15116: POP
15117: POP
15118: GO 15124
// end ; end ; end ;
15120: GO 14778
15122: POP
15123: POP
// end ;
15124: PPOPN 2
15126: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15127: LD_EXP 42
15131: PPUSH
15132: LD_EXP 54
15136: PPUSH
15137: CALL_OW 296
15141: PUSH
15142: LD_INT 6
15144: LESS
15145: PUSH
15146: LD_EXP 21
15150: AND
15151: IFFALSE 15304
15153: GO 15155
15155: DISABLE
// begin DialogueOn ;
15156: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-2
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-2
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-3
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-3
15203: PPUSH
15204: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15208: LD_EXP 54
15212: PPUSH
15213: LD_STRING D11-Gay-4
15215: PPUSH
15216: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15220: LD_EXP 42
15224: PPUSH
15225: LD_STRING D11-Bur-4
15227: PPUSH
15228: CALL_OW 88
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15239: LD_EXP 52
15243: PPUSH
15244: LD_STRING D12-Pop-1
15246: PPUSH
15247: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15251: LD_EXP 42
15255: PPUSH
15256: LD_STRING D12-Bur-1
15258: PPUSH
15259: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15263: LD_EXP 53
15267: PPUSH
15268: LD_STRING D12-Pla-1
15270: PPUSH
15271: CALL_OW 94
// DialogueOff ;
15275: CALL_OW 7
// canExitMap = true ;
15279: LD_ADDR_EXP 6
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15287: LD_STRING MFinal
15289: PPUSH
15290: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15294: LD_INT 4
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 424
// end ;
15304: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15305: LD_INT 22
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: PUSH
15334: LD_INT 0
15336: EQUAL
15337: PUSH
15338: LD_EXP 6
15342: AND
15343: IFFALSE 15352
15345: GO 15347
15347: DISABLE
// FinishMission ; end_of_file
15348: CALL 7709 0 0
15352: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15353: LD_EXP 17
15357: PUSH
15358: LD_EXP 19
15362: PUSH
15363: LD_INT 0
15365: EQUAL
15366: AND
15367: PUSH
15368: LD_EXP 19
15372: PUSH
15373: LD_EXP 38
15377: LESS
15378: AND
15379: IFFALSE 15431
15381: GO 15383
15383: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15384: LD_INT 7
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 2
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15410: LD_EXP 65
15414: PPUSH
15415: EMPTY
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 1
15425: NEG
15426: PPUSH
15427: CALL 5042 0 5
// end ;
15431: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15432: LD_EXP 17
15436: PUSH
15437: LD_EXP 19
15441: PUSH
15442: LD_INT 0
15444: GREATEREQUAL
15445: AND
15446: PUSH
15447: LD_EXP 19
15451: PUSH
15452: LD_EXP 38
15456: LESS
15457: AND
15458: IFFALSE 15688
15460: GO 15462
15462: DISABLE
// begin currentWave = currentWave + 1 ;
15463: LD_ADDR_EXP 19
15467: PUSH
15468: LD_EXP 19
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// PrepareArabianVehicles ;
15477: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15481: LD_EXP 65
15485: PPUSH
15486: LD_INT 135
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 134
15498: PUSH
15499: LD_INT 19
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 132
15508: PUSH
15509: LD_INT 26
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 128
15518: PUSH
15519: LD_INT 31
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 123
15528: PUSH
15529: LD_INT 37
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 118
15538: PUSH
15539: LD_INT 45
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 112
15548: PUSH
15549: LD_INT 51
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 106
15558: PUSH
15559: LD_INT 57
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 99
15568: PUSH
15569: LD_INT 62
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 93
15578: PUSH
15579: LD_INT 67
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 86
15588: PUSH
15589: LD_INT 72
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 78
15598: PUSH
15599: LD_INT 75
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 71
15608: PUSH
15609: LD_INT 81
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 69
15618: PUSH
15619: LD_INT 88
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 71
15628: PUSH
15629: LD_INT 95
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 74
15638: PUSH
15639: LD_INT 103
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 80
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: LD_INT 0
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: LD_INT 11
15683: PPUSH
15684: CALL 5042 0 5
// end ;
15688: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15689: LD_EXP 17
15693: PUSH
15694: LD_OWVAR 67
15698: PUSH
15699: LD_INT 2
15701: EQUAL
15702: AND
15703: PUSH
15704: LD_EXP 19
15708: PUSH
15709: LD_INT 0
15711: GREATEREQUAL
15712: AND
15713: PUSH
15714: LD_EXP 19
15718: PUSH
15719: LD_EXP 38
15723: LESS
15724: AND
15725: IFFALSE 15853
15727: GO 15729
15729: DISABLE
// begin PrepareArabianVehicles ;
15730: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15734: LD_EXP 65
15738: PPUSH
15739: LD_INT 135
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 134
15751: PUSH
15752: LD_INT 19
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 132
15761: PUSH
15762: LD_INT 26
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 128
15771: PUSH
15772: LD_INT 31
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 123
15781: PUSH
15782: LD_INT 37
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 118
15791: PUSH
15792: LD_INT 45
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 112
15801: PUSH
15802: LD_INT 51
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: LD_INT 57
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 99
15821: PUSH
15822: LD_INT 62
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PPUSH
15840: LD_INT 0
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: LD_INT 11
15848: PPUSH
15849: CALL 5042 0 5
// end ;
15853: END
// every 1 1$0 trigger enableAttacks and Difficulty >= 3 and currentWave >= 0 and currentWave < enemyWaves do
15854: LD_EXP 17
15858: PUSH
15859: LD_OWVAR 67
15863: PUSH
15864: LD_INT 3
15866: GREATEREQUAL
15867: AND
15868: PUSH
15869: LD_EXP 19
15873: PUSH
15874: LD_INT 0
15876: GREATEREQUAL
15877: AND
15878: PUSH
15879: LD_EXP 19
15883: PUSH
15884: LD_EXP 38
15888: LESS
15889: AND
15890: IFFALSE 16084
15892: GO 15894
15894: DISABLE
// begin PrepareArabianVehicles ;
15895: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15899: LD_EXP 65
15903: PPUSH
15904: LD_INT 135
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 134
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 132
15926: PUSH
15927: LD_INT 26
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 128
15936: PUSH
15937: LD_INT 31
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 123
15946: PUSH
15947: LD_INT 37
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 118
15956: PUSH
15957: LD_INT 45
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 112
15966: PUSH
15967: LD_INT 51
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 57
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 99
15986: PUSH
15987: LD_INT 62
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 104
15996: PUSH
15997: LD_INT 71
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 110
16006: PUSH
16007: LD_INT 78
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 119
16016: PUSH
16017: LD_INT 88
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 128
16026: PUSH
16027: LD_INT 97
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 135
16036: PUSH
16037: LD_INT 106
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 140
16046: PUSH
16047: LD_INT 153
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_INT 11
16079: PPUSH
16080: CALL 5042 0 5
// end ;
16084: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16085: LD_EXP 17
16089: PUSH
16090: LD_EXP 19
16094: PUSH
16095: LD_INT 1
16097: EQUAL
16098: AND
16099: PUSH
16100: LD_EXP 19
16104: PUSH
16105: LD_EXP 38
16109: LESS
16110: AND
16111: IFFALSE 16188
16113: GO 16115
16115: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16116: LD_INT 7
16118: PPUSH
16119: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16123: LD_EXP 65
16127: PPUSH
16128: LD_INT 157
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 194
16140: PUSH
16141: LD_INT 124
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 174
16150: PUSH
16151: LD_INT 158
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 151
16160: PUSH
16161: LD_INT 164
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: LD_INT 0
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 1
16182: NEG
16183: PPUSH
16184: CALL 5042 0 5
// end ;
16188: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16189: LD_EXP 17
16193: PUSH
16194: LD_EXP 19
16198: PUSH
16199: LD_INT 1
16201: EQUAL
16202: AND
16203: PUSH
16204: LD_EXP 19
16208: PUSH
16209: LD_EXP 38
16213: LESS
16214: AND
16215: IFFALSE 16364
16217: GO 16219
16219: DISABLE
// begin wait ( 1 1$30 ) ;
16220: LD_INT 3150
16222: PPUSH
16223: CALL_OW 67
// currentWave = currentWave + 1 ;
16227: LD_ADDR_EXP 19
16231: PUSH
16232: LD_EXP 19
16236: PUSH
16237: LD_INT 1
16239: PLUS
16240: ST_TO_ADDR
// PrepareArabianVehicles ;
16241: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16245: LD_EXP 65
16249: PPUSH
16250: LD_INT 135
16252: PUSH
16253: LD_INT 4
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 134
16262: PUSH
16263: LD_INT 19
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 132
16272: PUSH
16273: LD_INT 26
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 128
16282: PUSH
16283: LD_INT 31
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 123
16292: PUSH
16293: LD_INT 37
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 118
16302: PUSH
16303: LD_INT 45
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 112
16312: PUSH
16313: LD_INT 51
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 106
16322: PUSH
16323: LD_INT 57
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 99
16332: PUSH
16333: LD_INT 62
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 11
16359: PPUSH
16360: CALL 5042 0 5
// end ;
16364: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16365: LD_EXP 17
16369: PUSH
16370: LD_OWVAR 67
16374: PUSH
16375: LD_INT 2
16377: EQUAL
16378: AND
16379: PUSH
16380: LD_EXP 19
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: AND
16389: PUSH
16390: LD_EXP 19
16394: PUSH
16395: LD_EXP 38
16399: LESS
16400: AND
16401: IFFALSE 16595
16403: GO 16405
16405: DISABLE
// begin PrepareArabianVehicles ;
16406: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16410: LD_EXP 65
16414: PPUSH
16415: LD_INT 135
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 134
16427: PUSH
16428: LD_INT 19
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 132
16437: PUSH
16438: LD_INT 26
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 128
16447: PUSH
16448: LD_INT 31
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 123
16457: PUSH
16458: LD_INT 37
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 118
16467: PUSH
16468: LD_INT 45
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: LD_INT 51
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: LD_INT 57
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 99
16497: PUSH
16498: LD_INT 62
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 104
16507: PUSH
16508: LD_INT 71
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 110
16517: PUSH
16518: LD_INT 78
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 119
16527: PUSH
16528: LD_INT 88
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 128
16537: PUSH
16538: LD_INT 97
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 135
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 140
16557: PUSH
16558: LD_INT 153
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: LD_INT 11
16590: PPUSH
16591: CALL 5042 0 5
// end ;
16595: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 1 and currentWave < enemyWaves do
16596: LD_EXP 17
16600: PUSH
16601: LD_OWVAR 67
16605: PUSH
16606: LD_INT 3
16608: GREATEREQUAL
16609: AND
16610: PUSH
16611: LD_EXP 19
16615: PUSH
16616: LD_INT 1
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_EXP 19
16625: PUSH
16626: LD_EXP 38
16630: LESS
16631: AND
16632: IFFALSE 16848
16634: GO 16636
16636: DISABLE
// begin PrepareArabianVehicles ;
16637: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16641: LD_EXP 65
16645: PPUSH
16646: LD_INT 135
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 134
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 132
16668: PUSH
16669: LD_INT 26
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 128
16678: PUSH
16679: LD_INT 31
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 123
16688: PUSH
16689: LD_INT 37
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: LD_INT 45
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 112
16708: PUSH
16709: LD_INT 51
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 57
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 99
16728: PUSH
16729: LD_INT 62
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 93
16738: PUSH
16739: LD_INT 67
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 86
16748: PUSH
16749: LD_INT 72
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 78
16758: PUSH
16759: LD_INT 75
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 71
16768: PUSH
16769: LD_INT 81
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 69
16778: PUSH
16779: LD_INT 88
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 71
16788: PUSH
16789: LD_INT 95
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 74
16798: PUSH
16799: LD_INT 103
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 80
16808: PUSH
16809: LD_INT 113
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: LD_INT 0
16837: PPUSH
16838: LD_INT 1
16840: PPUSH
16841: LD_INT 11
16843: PPUSH
16844: CALL 5042 0 5
// end ;
16848: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16849: LD_EXP 17
16853: PUSH
16854: LD_EXP 19
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: AND
16863: PUSH
16864: LD_EXP 19
16868: PUSH
16869: LD_EXP 38
16873: LESS
16874: AND
16875: IFFALSE 16952
16877: GO 16879
16879: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16880: LD_INT 7
16882: PPUSH
16883: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16887: LD_EXP 65
16891: PPUSH
16892: LD_INT 157
16894: PUSH
16895: LD_INT 31
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 194
16904: PUSH
16905: LD_INT 124
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 174
16914: PUSH
16915: LD_INT 158
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 151
16924: PUSH
16925: LD_INT 164
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: LD_INT 1
16946: NEG
16947: PPUSH
16948: CALL 5042 0 5
// end ;
16952: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16953: LD_EXP 17
16957: PUSH
16958: LD_EXP 19
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: AND
16967: PUSH
16968: LD_EXP 19
16972: PUSH
16973: LD_EXP 38
16977: LESS
16978: AND
16979: IFFALSE 17216
16981: GO 16983
16983: DISABLE
// begin wait ( 1 1$30 ) ;
16984: LD_INT 3150
16986: PPUSH
16987: CALL_OW 67
// currentWave = currentWave + 1 ;
16991: LD_ADDR_EXP 19
16995: PUSH
16996: LD_EXP 19
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: ST_TO_ADDR
// PrepareArabianVehicles ;
17005: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17009: LD_EXP 65
17013: PPUSH
17014: LD_INT 135
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 134
17026: PUSH
17027: LD_INT 19
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 132
17036: PUSH
17037: LD_INT 26
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 128
17046: PUSH
17047: LD_INT 31
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 123
17056: PUSH
17057: LD_INT 37
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 118
17066: PUSH
17067: LD_INT 45
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 112
17076: PUSH
17077: LD_INT 51
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 57
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 99
17096: PUSH
17097: LD_INT 62
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 93
17106: PUSH
17107: LD_INT 67
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 86
17116: PUSH
17117: LD_INT 72
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 78
17126: PUSH
17127: LD_INT 75
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 71
17136: PUSH
17137: LD_INT 81
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 69
17146: PUSH
17147: LD_INT 88
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 71
17156: PUSH
17157: LD_INT 95
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 74
17166: PUSH
17167: LD_INT 103
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 80
17176: PUSH
17177: LD_INT 113
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: LD_INT 11
17211: PPUSH
17212: CALL 5042 0 5
// end ;
17216: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17217: LD_EXP 17
17221: PUSH
17222: LD_OWVAR 67
17226: PUSH
17227: LD_INT 2
17229: EQUAL
17230: AND
17231: PUSH
17232: LD_EXP 19
17236: PUSH
17237: LD_INT 2
17239: EQUAL
17240: AND
17241: PUSH
17242: LD_EXP 19
17246: PUSH
17247: LD_EXP 38
17251: LESS
17252: AND
17253: IFFALSE 17447
17255: GO 17257
17257: DISABLE
// begin PrepareArabianVehicles ;
17258: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17262: LD_EXP 65
17266: PPUSH
17267: LD_INT 135
17269: PUSH
17270: LD_INT 4
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 134
17279: PUSH
17280: LD_INT 19
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 132
17289: PUSH
17290: LD_INT 26
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 128
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 123
17309: PUSH
17310: LD_INT 37
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 118
17319: PUSH
17320: LD_INT 45
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 112
17329: PUSH
17330: LD_INT 51
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 106
17339: PUSH
17340: LD_INT 57
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 99
17349: PUSH
17350: LD_INT 62
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 104
17359: PUSH
17360: LD_INT 71
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 110
17369: PUSH
17370: LD_INT 78
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 119
17379: PUSH
17380: LD_INT 88
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 128
17389: PUSH
17390: LD_INT 97
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 135
17399: PUSH
17400: LD_INT 106
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 140
17409: PUSH
17410: LD_INT 153
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 11
17442: PPUSH
17443: CALL 5042 0 5
// end ;
17447: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 2 and currentWave < enemyWaves do
17448: LD_EXP 17
17452: PUSH
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 3
17460: GREATEREQUAL
17461: AND
17462: PUSH
17463: LD_EXP 19
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_EXP 19
17477: PUSH
17478: LD_EXP 38
17482: LESS
17483: AND
17484: IFFALSE 17678
17486: GO 17488
17488: DISABLE
// begin PrepareArabianVehicles ;
17489: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17493: LD_EXP 65
17497: PPUSH
17498: LD_INT 135
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 134
17510: PUSH
17511: LD_INT 19
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 132
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 128
17530: PUSH
17531: LD_INT 31
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 123
17540: PUSH
17541: LD_INT 37
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: LD_INT 45
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 112
17560: PUSH
17561: LD_INT 51
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 106
17570: PUSH
17571: LD_INT 57
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 99
17580: PUSH
17581: LD_INT 62
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 104
17590: PUSH
17591: LD_INT 71
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 110
17600: PUSH
17601: LD_INT 78
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 119
17610: PUSH
17611: LD_INT 88
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 128
17620: PUSH
17621: LD_INT 97
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 135
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 153
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PPUSH
17665: LD_INT 0
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 11
17673: PPUSH
17674: CALL 5042 0 5
// end ;
17678: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17679: LD_EXP 17
17683: PUSH
17684: LD_EXP 19
17688: PUSH
17689: LD_INT 3
17691: EQUAL
17692: AND
17693: PUSH
17694: LD_EXP 19
17698: PUSH
17699: LD_EXP 38
17703: LESS
17704: AND
17705: IFFALSE 17782
17707: GO 17709
17709: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17710: LD_INT 7
17712: PPUSH
17713: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17717: LD_EXP 65
17721: PPUSH
17722: LD_INT 157
17724: PUSH
17725: LD_INT 31
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 194
17734: PUSH
17735: LD_INT 124
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 174
17744: PUSH
17745: LD_INT 158
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 151
17754: PUSH
17755: LD_INT 164
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PPUSH
17768: LD_INT 0
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 1
17776: NEG
17777: PPUSH
17778: CALL 5042 0 5
// end ;
17782: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17783: LD_EXP 17
17787: PUSH
17788: LD_EXP 19
17792: PUSH
17793: LD_INT 3
17795: EQUAL
17796: AND
17797: PUSH
17798: LD_EXP 19
17802: PUSH
17803: LD_EXP 38
17807: LESS
17808: AND
17809: IFFALSE 18046
17811: GO 17813
17813: DISABLE
// begin wait ( 1 1$30 ) ;
17814: LD_INT 3150
17816: PPUSH
17817: CALL_OW 67
// currentWave = currentWave + 1 ;
17821: LD_ADDR_EXP 19
17825: PUSH
17826: LD_EXP 19
17830: PUSH
17831: LD_INT 1
17833: PLUS
17834: ST_TO_ADDR
// PrepareArabianVehicles ;
17835: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17839: LD_EXP 65
17843: PPUSH
17844: LD_INT 135
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 134
17856: PUSH
17857: LD_INT 19
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 132
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 128
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 123
17886: PUSH
17887: LD_INT 37
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: LD_INT 45
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 112
17906: PUSH
17907: LD_INT 51
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 106
17916: PUSH
17917: LD_INT 57
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 99
17926: PUSH
17927: LD_INT 62
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 93
17936: PUSH
17937: LD_INT 67
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 86
17946: PUSH
17947: LD_INT 72
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 78
17956: PUSH
17957: LD_INT 75
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 71
17966: PUSH
17967: LD_INT 81
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 69
17976: PUSH
17977: LD_INT 88
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 71
17986: PUSH
17987: LD_INT 95
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 74
17996: PUSH
17997: LD_INT 103
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 80
18006: PUSH
18007: LD_INT 113
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_INT 11
18041: PPUSH
18042: CALL 5042 0 5
// end ;
18046: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18047: LD_EXP 17
18051: PUSH
18052: LD_OWVAR 67
18056: PUSH
18057: LD_INT 2
18059: EQUAL
18060: AND
18061: PUSH
18062: LD_EXP 19
18066: PUSH
18067: LD_INT 3
18069: EQUAL
18070: AND
18071: PUSH
18072: LD_EXP 19
18076: PUSH
18077: LD_EXP 38
18081: LESS
18082: AND
18083: IFFALSE 18277
18085: GO 18087
18087: DISABLE
// begin PrepareArabianVehicles ;
18088: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18092: LD_EXP 65
18096: PPUSH
18097: LD_INT 135
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 134
18109: PUSH
18110: LD_INT 19
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 132
18119: PUSH
18120: LD_INT 26
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 128
18129: PUSH
18130: LD_INT 31
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 123
18139: PUSH
18140: LD_INT 37
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 118
18149: PUSH
18150: LD_INT 45
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 112
18159: PUSH
18160: LD_INT 51
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 57
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 99
18179: PUSH
18180: LD_INT 62
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 104
18189: PUSH
18190: LD_INT 71
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 110
18199: PUSH
18200: LD_INT 78
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 119
18209: PUSH
18210: LD_INT 88
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 128
18219: PUSH
18220: LD_INT 97
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 135
18229: PUSH
18230: LD_INT 106
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 140
18239: PUSH
18240: LD_INT 153
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PPUSH
18264: LD_INT 0
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_INT 11
18272: PPUSH
18273: CALL 5042 0 5
// end ;
18277: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 3 and currentWave < enemyWaves do
18278: LD_EXP 17
18282: PUSH
18283: LD_OWVAR 67
18287: PUSH
18288: LD_INT 3
18290: GREATEREQUAL
18291: AND
18292: PUSH
18293: LD_EXP 19
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: AND
18302: PUSH
18303: LD_EXP 19
18307: PUSH
18308: LD_EXP 38
18312: LESS
18313: AND
18314: IFFALSE 18508
18316: GO 18318
18318: DISABLE
// begin PrepareArabianVehicles ;
18319: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18323: LD_EXP 65
18327: PPUSH
18328: LD_INT 135
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 134
18340: PUSH
18341: LD_INT 19
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 132
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 128
18360: PUSH
18361: LD_INT 31
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 123
18370: PUSH
18371: LD_INT 37
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 118
18380: PUSH
18381: LD_INT 45
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 112
18390: PUSH
18391: LD_INT 51
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 106
18400: PUSH
18401: LD_INT 57
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 99
18410: PUSH
18411: LD_INT 62
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 104
18420: PUSH
18421: LD_INT 71
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 110
18430: PUSH
18431: LD_INT 78
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 119
18440: PUSH
18441: LD_INT 88
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 128
18450: PUSH
18451: LD_INT 97
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 135
18460: PUSH
18461: LD_INT 106
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 140
18470: PUSH
18471: LD_INT 153
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_INT 11
18503: PPUSH
18504: CALL 5042 0 5
// end ;
18508: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18509: LD_EXP 54
18513: PPUSH
18514: CALL_OW 305
18518: PUSH
18519: LD_EXP 23
18523: PUSH
18524: LD_INT 5
18526: LESS
18527: AND
18528: IFFALSE 18538
18530: GO 18532
18532: DISABLE
// begin PrepareArabianKiller ;
18533: CALL 4090 0 0
// enable ;
18537: ENABLE
// end ; end_of_file
18538: END
// export function SetAchievements ; begin
18539: LD_INT 0
18541: PPUSH
// if stealWarmCount = 0 then
18542: LD_EXP 12
18546: PUSH
18547: LD_INT 0
18549: EQUAL
18550: IFFALSE 18559
// SetAchievement ( ACH_ENO ) ;
18552: LD_STRING ACH_ENO
18554: PPUSH
18555: CALL_OW 543
// end ;
18559: LD_VAR 0 1
18563: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18564: LD_EXP 25
18568: PUSH
18569: LD_INT 6
18571: GREATEREQUAL
18572: IFFALSE 18584
18574: GO 18576
18576: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18577: LD_STRING ACH_DEFENSE
18579: PPUSH
18580: CALL_OW 543
18584: END
// every 1 trigger killedArabianUnits >= 25 do
18585: LD_EXP 22
18589: PUSH
18590: LD_INT 25
18592: GREATEREQUAL
18593: IFFALSE 18605
18595: GO 18597
18597: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18598: LD_STRING ACH_ARAB
18600: PPUSH
18601: CALL_OW 543
18605: END
// export globalGameSaveCounter ; every 0 0$1 do
18606: GO 18608
18608: DISABLE
// begin enable ;
18609: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18610: LD_STRING updateTimer(
18612: PUSH
18613: LD_OWVAR 1
18617: STR
18618: PUSH
18619: LD_STRING );
18621: STR
18622: PPUSH
18623: CALL_OW 559
// end ;
18627: END
// every 0 0$1 do
18628: GO 18630
18630: DISABLE
// begin globalGameSaveCounter := 0 ;
18631: LD_ADDR_EXP 66
18635: PUSH
18636: LD_INT 0
18638: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18639: LD_STRING setGameSaveCounter(0)
18641: PPUSH
18642: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18646: LD_STRING initStreamRollete();
18648: PPUSH
18649: CALL_OW 559
// InitStreamMode ;
18653: CALL 19979 0 0
// DefineStreamItems ( false ) ;
18657: LD_INT 0
18659: PPUSH
18660: CALL 20443 0 1
// end ;
18664: END
// export function SOS_MapStart ( ) ; begin
18665: LD_INT 0
18667: PPUSH
// if streamModeActive then
18668: LD_EXP 67
18672: IFFALSE 18681
// DefineStreamItems ( true ) ;
18674: LD_INT 1
18676: PPUSH
18677: CALL 20443 0 1
// UpdateLuaVariables ( ) ;
18681: CALL 18698 0 0
// UpdateFactoryWaypoints ( ) ;
18685: CALL 33312 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18689: CALL 33569 0 0
// end ;
18693: LD_VAR 0 1
18697: RET
// function UpdateLuaVariables ( ) ; begin
18698: LD_INT 0
18700: PPUSH
// if globalGameSaveCounter then
18701: LD_EXP 66
18705: IFFALSE 18739
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18707: LD_ADDR_EXP 66
18711: PUSH
18712: LD_EXP 66
18716: PPUSH
18717: CALL 77542 0 1
18721: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18722: LD_STRING setGameSaveCounter(
18724: PUSH
18725: LD_EXP 66
18729: STR
18730: PUSH
18731: LD_STRING )
18733: STR
18734: PPUSH
18735: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18739: LD_STRING setGameDifficulty(
18741: PUSH
18742: LD_OWVAR 67
18746: STR
18747: PUSH
18748: LD_STRING )
18750: STR
18751: PPUSH
18752: CALL_OW 559
// end ;
18756: LD_VAR 0 1
18760: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18761: LD_INT 0
18763: PPUSH
// if p2 = stream_mode then
18764: LD_VAR 0 2
18768: PUSH
18769: LD_INT 100
18771: EQUAL
18772: IFFALSE 19775
// begin if not StreamModeActive then
18774: LD_EXP 67
18778: NOT
18779: IFFALSE 18789
// StreamModeActive := true ;
18781: LD_ADDR_EXP 67
18785: PUSH
18786: LD_INT 1
18788: ST_TO_ADDR
// if p3 = 0 then
18789: LD_VAR 0 3
18793: PUSH
18794: LD_INT 0
18796: EQUAL
18797: IFFALSE 18803
// InitStreamMode ;
18799: CALL 19979 0 0
// if p3 = 1 then
18803: LD_VAR 0 3
18807: PUSH
18808: LD_INT 1
18810: EQUAL
18811: IFFALSE 18821
// sRocket := true ;
18813: LD_ADDR_EXP 72
18817: PUSH
18818: LD_INT 1
18820: ST_TO_ADDR
// if p3 = 2 then
18821: LD_VAR 0 3
18825: PUSH
18826: LD_INT 2
18828: EQUAL
18829: IFFALSE 18839
// sSpeed := true ;
18831: LD_ADDR_EXP 71
18835: PUSH
18836: LD_INT 1
18838: ST_TO_ADDR
// if p3 = 3 then
18839: LD_VAR 0 3
18843: PUSH
18844: LD_INT 3
18846: EQUAL
18847: IFFALSE 18857
// sEngine := true ;
18849: LD_ADDR_EXP 73
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// if p3 = 4 then
18857: LD_VAR 0 3
18861: PUSH
18862: LD_INT 4
18864: EQUAL
18865: IFFALSE 18875
// sSpec := true ;
18867: LD_ADDR_EXP 70
18871: PUSH
18872: LD_INT 1
18874: ST_TO_ADDR
// if p3 = 5 then
18875: LD_VAR 0 3
18879: PUSH
18880: LD_INT 5
18882: EQUAL
18883: IFFALSE 18893
// sLevel := true ;
18885: LD_ADDR_EXP 74
18889: PUSH
18890: LD_INT 1
18892: ST_TO_ADDR
// if p3 = 6 then
18893: LD_VAR 0 3
18897: PUSH
18898: LD_INT 6
18900: EQUAL
18901: IFFALSE 18911
// sArmoury := true ;
18903: LD_ADDR_EXP 75
18907: PUSH
18908: LD_INT 1
18910: ST_TO_ADDR
// if p3 = 7 then
18911: LD_VAR 0 3
18915: PUSH
18916: LD_INT 7
18918: EQUAL
18919: IFFALSE 18929
// sRadar := true ;
18921: LD_ADDR_EXP 76
18925: PUSH
18926: LD_INT 1
18928: ST_TO_ADDR
// if p3 = 8 then
18929: LD_VAR 0 3
18933: PUSH
18934: LD_INT 8
18936: EQUAL
18937: IFFALSE 18947
// sBunker := true ;
18939: LD_ADDR_EXP 77
18943: PUSH
18944: LD_INT 1
18946: ST_TO_ADDR
// if p3 = 9 then
18947: LD_VAR 0 3
18951: PUSH
18952: LD_INT 9
18954: EQUAL
18955: IFFALSE 18965
// sHack := true ;
18957: LD_ADDR_EXP 78
18961: PUSH
18962: LD_INT 1
18964: ST_TO_ADDR
// if p3 = 10 then
18965: LD_VAR 0 3
18969: PUSH
18970: LD_INT 10
18972: EQUAL
18973: IFFALSE 18983
// sFire := true ;
18975: LD_ADDR_EXP 79
18979: PUSH
18980: LD_INT 1
18982: ST_TO_ADDR
// if p3 = 11 then
18983: LD_VAR 0 3
18987: PUSH
18988: LD_INT 11
18990: EQUAL
18991: IFFALSE 19001
// sRefresh := true ;
18993: LD_ADDR_EXP 80
18997: PUSH
18998: LD_INT 1
19000: ST_TO_ADDR
// if p3 = 12 then
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 12
19008: EQUAL
19009: IFFALSE 19019
// sExp := true ;
19011: LD_ADDR_EXP 81
19015: PUSH
19016: LD_INT 1
19018: ST_TO_ADDR
// if p3 = 13 then
19019: LD_VAR 0 3
19023: PUSH
19024: LD_INT 13
19026: EQUAL
19027: IFFALSE 19037
// sDepot := true ;
19029: LD_ADDR_EXP 82
19033: PUSH
19034: LD_INT 1
19036: ST_TO_ADDR
// if p3 = 14 then
19037: LD_VAR 0 3
19041: PUSH
19042: LD_INT 14
19044: EQUAL
19045: IFFALSE 19055
// sFlag := true ;
19047: LD_ADDR_EXP 83
19051: PUSH
19052: LD_INT 1
19054: ST_TO_ADDR
// if p3 = 15 then
19055: LD_VAR 0 3
19059: PUSH
19060: LD_INT 15
19062: EQUAL
19063: IFFALSE 19073
// sKamikadze := true ;
19065: LD_ADDR_EXP 91
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// if p3 = 16 then
19073: LD_VAR 0 3
19077: PUSH
19078: LD_INT 16
19080: EQUAL
19081: IFFALSE 19091
// sTroll := true ;
19083: LD_ADDR_EXP 92
19087: PUSH
19088: LD_INT 1
19090: ST_TO_ADDR
// if p3 = 17 then
19091: LD_VAR 0 3
19095: PUSH
19096: LD_INT 17
19098: EQUAL
19099: IFFALSE 19109
// sSlow := true ;
19101: LD_ADDR_EXP 93
19105: PUSH
19106: LD_INT 1
19108: ST_TO_ADDR
// if p3 = 18 then
19109: LD_VAR 0 3
19113: PUSH
19114: LD_INT 18
19116: EQUAL
19117: IFFALSE 19127
// sLack := true ;
19119: LD_ADDR_EXP 94
19123: PUSH
19124: LD_INT 1
19126: ST_TO_ADDR
// if p3 = 19 then
19127: LD_VAR 0 3
19131: PUSH
19132: LD_INT 19
19134: EQUAL
19135: IFFALSE 19145
// sTank := true ;
19137: LD_ADDR_EXP 96
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// if p3 = 20 then
19145: LD_VAR 0 3
19149: PUSH
19150: LD_INT 20
19152: EQUAL
19153: IFFALSE 19163
// sRemote := true ;
19155: LD_ADDR_EXP 97
19159: PUSH
19160: LD_INT 1
19162: ST_TO_ADDR
// if p3 = 21 then
19163: LD_VAR 0 3
19167: PUSH
19168: LD_INT 21
19170: EQUAL
19171: IFFALSE 19181
// sPowell := true ;
19173: LD_ADDR_EXP 98
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 22 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 22
19188: EQUAL
19189: IFFALSE 19199
// sTeleport := true ;
19191: LD_ADDR_EXP 101
19195: PUSH
19196: LD_INT 1
19198: ST_TO_ADDR
// if p3 = 23 then
19199: LD_VAR 0 3
19203: PUSH
19204: LD_INT 23
19206: EQUAL
19207: IFFALSE 19217
// sOilTower := true ;
19209: LD_ADDR_EXP 103
19213: PUSH
19214: LD_INT 1
19216: ST_TO_ADDR
// if p3 = 24 then
19217: LD_VAR 0 3
19221: PUSH
19222: LD_INT 24
19224: EQUAL
19225: IFFALSE 19235
// sShovel := true ;
19227: LD_ADDR_EXP 104
19231: PUSH
19232: LD_INT 1
19234: ST_TO_ADDR
// if p3 = 25 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 25
19242: EQUAL
19243: IFFALSE 19253
// sSheik := true ;
19245: LD_ADDR_EXP 105
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 26 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 26
19260: EQUAL
19261: IFFALSE 19271
// sEarthquake := true ;
19263: LD_ADDR_EXP 107
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 27 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 27
19278: EQUAL
19279: IFFALSE 19289
// sAI := true ;
19281: LD_ADDR_EXP 108
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 28 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 28
19296: EQUAL
19297: IFFALSE 19307
// sCargo := true ;
19299: LD_ADDR_EXP 111
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 29 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 29
19314: EQUAL
19315: IFFALSE 19325
// sDLaser := true ;
19317: LD_ADDR_EXP 112
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 30 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 30
19332: EQUAL
19333: IFFALSE 19343
// sExchange := true ;
19335: LD_ADDR_EXP 113
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 31 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 31
19350: EQUAL
19351: IFFALSE 19361
// sFac := true ;
19353: LD_ADDR_EXP 114
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 32 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 32
19368: EQUAL
19369: IFFALSE 19379
// sPower := true ;
19371: LD_ADDR_EXP 115
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 33 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 33
19386: EQUAL
19387: IFFALSE 19397
// sRandom := true ;
19389: LD_ADDR_EXP 116
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 34 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 34
19404: EQUAL
19405: IFFALSE 19415
// sShield := true ;
19407: LD_ADDR_EXP 117
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 35 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 35
19422: EQUAL
19423: IFFALSE 19433
// sTime := true ;
19425: LD_ADDR_EXP 118
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 36 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 36
19440: EQUAL
19441: IFFALSE 19451
// sTools := true ;
19443: LD_ADDR_EXP 119
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 101 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 101
19458: EQUAL
19459: IFFALSE 19469
// sSold := true ;
19461: LD_ADDR_EXP 84
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 102 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 102
19476: EQUAL
19477: IFFALSE 19487
// sDiff := true ;
19479: LD_ADDR_EXP 85
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 103 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 103
19494: EQUAL
19495: IFFALSE 19505
// sFog := true ;
19497: LD_ADDR_EXP 88
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 104 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 104
19512: EQUAL
19513: IFFALSE 19523
// sReset := true ;
19515: LD_ADDR_EXP 89
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 105 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 105
19530: EQUAL
19531: IFFALSE 19541
// sSun := true ;
19533: LD_ADDR_EXP 90
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 106 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 106
19548: EQUAL
19549: IFFALSE 19559
// sTiger := true ;
19551: LD_ADDR_EXP 86
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 107 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 107
19566: EQUAL
19567: IFFALSE 19577
// sBomb := true ;
19569: LD_ADDR_EXP 87
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 108 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 108
19584: EQUAL
19585: IFFALSE 19595
// sWound := true ;
19587: LD_ADDR_EXP 95
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 109 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 109
19602: EQUAL
19603: IFFALSE 19613
// sBetray := true ;
19605: LD_ADDR_EXP 99
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 110 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 110
19620: EQUAL
19621: IFFALSE 19631
// sContamin := true ;
19623: LD_ADDR_EXP 100
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 111 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 111
19638: EQUAL
19639: IFFALSE 19649
// sOil := true ;
19641: LD_ADDR_EXP 102
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 112 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 112
19656: EQUAL
19657: IFFALSE 19667
// sStu := true ;
19659: LD_ADDR_EXP 106
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 113 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 113
19674: EQUAL
19675: IFFALSE 19685
// sBazooka := true ;
19677: LD_ADDR_EXP 109
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 114 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 114
19692: EQUAL
19693: IFFALSE 19703
// sMortar := true ;
19695: LD_ADDR_EXP 110
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 115 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 115
19710: EQUAL
19711: IFFALSE 19721
// sRanger := true ;
19713: LD_ADDR_EXP 120
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 116 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 116
19728: EQUAL
19729: IFFALSE 19739
// sComputer := true ;
19731: LD_ADDR_EXP 121
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 117 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 117
19746: EQUAL
19747: IFFALSE 19757
// s30 := true ;
19749: LD_ADDR_EXP 122
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 118 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 118
19764: EQUAL
19765: IFFALSE 19775
// s60 := true ;
19767: LD_ADDR_EXP 123
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// end ; if p2 = hack_mode then
19775: LD_VAR 0 2
19779: PUSH
19780: LD_INT 101
19782: EQUAL
19783: IFFALSE 19911
// begin case p3 of 1 :
19785: LD_VAR 0 3
19789: PUSH
19790: LD_INT 1
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19805
19798: POP
// hHackUnlimitedResources ; 2 :
19799: CALL 32058 0 0
19803: GO 19911
19805: LD_INT 2
19807: DOUBLE
19808: EQUAL
19809: IFTRUE 19813
19811: GO 19820
19813: POP
// hHackSetLevel10 ; 3 :
19814: CALL 32191 0 0
19818: GO 19911
19820: LD_INT 3
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19835
19828: POP
// hHackSetLevel10YourUnits ; 4 :
19829: CALL 32276 0 0
19833: GO 19911
19835: LD_INT 4
19837: DOUBLE
19838: EQUAL
19839: IFTRUE 19843
19841: GO 19850
19843: POP
// hHackInvincible ; 5 :
19844: CALL 32724 0 0
19848: GO 19911
19850: LD_INT 5
19852: DOUBLE
19853: EQUAL
19854: IFTRUE 19858
19856: GO 19865
19858: POP
// hHackInvisible ; 6 :
19859: CALL 32835 0 0
19863: GO 19911
19865: LD_INT 6
19867: DOUBLE
19868: EQUAL
19869: IFTRUE 19873
19871: GO 19880
19873: POP
// hHackChangeYourSide ; 7 :
19874: CALL 32892 0 0
19878: GO 19911
19880: LD_INT 7
19882: DOUBLE
19883: EQUAL
19884: IFTRUE 19888
19886: GO 19895
19888: POP
// hHackChangeUnitSide ; 8 :
19889: CALL 32934 0 0
19893: GO 19911
19895: LD_INT 8
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19910
19903: POP
// hHackFog ; end ;
19904: CALL 33035 0 0
19908: GO 19911
19910: POP
// end ; if p2 = game_save_mode then
19911: LD_VAR 0 2
19915: PUSH
19916: LD_INT 102
19918: EQUAL
19919: IFFALSE 19974
// begin if p3 = 1 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 1
19928: EQUAL
19929: IFFALSE 19941
// globalGameSaveCounter := p4 ;
19931: LD_ADDR_EXP 66
19935: PUSH
19936: LD_VAR 0 4
19940: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19941: LD_VAR 0 3
19945: PUSH
19946: LD_INT 2
19948: EQUAL
19949: PUSH
19950: LD_EXP 66
19954: AND
19955: IFFALSE 19974
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19957: LD_STRING setGameSaveCounter(
19959: PUSH
19960: LD_EXP 66
19964: STR
19965: PUSH
19966: LD_STRING )
19968: STR
19969: PPUSH
19970: CALL_OW 559
// end ; end ;
19974: LD_VAR 0 7
19978: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19979: LD_INT 0
19981: PPUSH
// streamModeActive := false ;
19982: LD_ADDR_EXP 67
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// normalCounter := 36 ;
19990: LD_ADDR_EXP 68
19994: PUSH
19995: LD_INT 36
19997: ST_TO_ADDR
// hardcoreCounter := 18 ;
19998: LD_ADDR_EXP 69
20002: PUSH
20003: LD_INT 18
20005: ST_TO_ADDR
// sRocket := false ;
20006: LD_ADDR_EXP 72
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// sSpeed := false ;
20014: LD_ADDR_EXP 71
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// sEngine := false ;
20022: LD_ADDR_EXP 73
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// sSpec := false ;
20030: LD_ADDR_EXP 70
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// sLevel := false ;
20038: LD_ADDR_EXP 74
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// sArmoury := false ;
20046: LD_ADDR_EXP 75
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sRadar := false ;
20054: LD_ADDR_EXP 76
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sBunker := false ;
20062: LD_ADDR_EXP 77
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sHack := false ;
20070: LD_ADDR_EXP 78
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sFire := false ;
20078: LD_ADDR_EXP 79
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sRefresh := false ;
20086: LD_ADDR_EXP 80
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sExp := false ;
20094: LD_ADDR_EXP 81
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// sDepot := false ;
20102: LD_ADDR_EXP 82
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// sFlag := false ;
20110: LD_ADDR_EXP 83
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
// sKamikadze := false ;
20118: LD_ADDR_EXP 91
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// sTroll := false ;
20126: LD_ADDR_EXP 92
20130: PUSH
20131: LD_INT 0
20133: ST_TO_ADDR
// sSlow := false ;
20134: LD_ADDR_EXP 93
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// sLack := false ;
20142: LD_ADDR_EXP 94
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// sTank := false ;
20150: LD_ADDR_EXP 96
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// sRemote := false ;
20158: LD_ADDR_EXP 97
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// sPowell := false ;
20166: LD_ADDR_EXP 98
20170: PUSH
20171: LD_INT 0
20173: ST_TO_ADDR
// sTeleport := false ;
20174: LD_ADDR_EXP 101
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// sOilTower := false ;
20182: LD_ADDR_EXP 103
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// sShovel := false ;
20190: LD_ADDR_EXP 104
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// sSheik := false ;
20198: LD_ADDR_EXP 105
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
// sEarthquake := false ;
20206: LD_ADDR_EXP 107
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// sAI := false ;
20214: LD_ADDR_EXP 108
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// sCargo := false ;
20222: LD_ADDR_EXP 111
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// sDLaser := false ;
20230: LD_ADDR_EXP 112
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// sExchange := false ;
20238: LD_ADDR_EXP 113
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// sFac := false ;
20246: LD_ADDR_EXP 114
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// sPower := false ;
20254: LD_ADDR_EXP 115
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// sRandom := false ;
20262: LD_ADDR_EXP 116
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// sShield := false ;
20270: LD_ADDR_EXP 117
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// sTime := false ;
20278: LD_ADDR_EXP 118
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// sTools := false ;
20286: LD_ADDR_EXP 119
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// sSold := false ;
20294: LD_ADDR_EXP 84
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// sDiff := false ;
20302: LD_ADDR_EXP 85
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// sFog := false ;
20310: LD_ADDR_EXP 88
20314: PUSH
20315: LD_INT 0
20317: ST_TO_ADDR
// sReset := false ;
20318: LD_ADDR_EXP 89
20322: PUSH
20323: LD_INT 0
20325: ST_TO_ADDR
// sSun := false ;
20326: LD_ADDR_EXP 90
20330: PUSH
20331: LD_INT 0
20333: ST_TO_ADDR
// sTiger := false ;
20334: LD_ADDR_EXP 86
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// sBomb := false ;
20342: LD_ADDR_EXP 87
20346: PUSH
20347: LD_INT 0
20349: ST_TO_ADDR
// sWound := false ;
20350: LD_ADDR_EXP 95
20354: PUSH
20355: LD_INT 0
20357: ST_TO_ADDR
// sBetray := false ;
20358: LD_ADDR_EXP 99
20362: PUSH
20363: LD_INT 0
20365: ST_TO_ADDR
// sContamin := false ;
20366: LD_ADDR_EXP 100
20370: PUSH
20371: LD_INT 0
20373: ST_TO_ADDR
// sOil := false ;
20374: LD_ADDR_EXP 102
20378: PUSH
20379: LD_INT 0
20381: ST_TO_ADDR
// sStu := false ;
20382: LD_ADDR_EXP 106
20386: PUSH
20387: LD_INT 0
20389: ST_TO_ADDR
// sBazooka := false ;
20390: LD_ADDR_EXP 109
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// sMortar := false ;
20398: LD_ADDR_EXP 110
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// sRanger := false ;
20406: LD_ADDR_EXP 120
20410: PUSH
20411: LD_INT 0
20413: ST_TO_ADDR
// sComputer := false ;
20414: LD_ADDR_EXP 121
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// s30 := false ;
20422: LD_ADDR_EXP 122
20426: PUSH
20427: LD_INT 0
20429: ST_TO_ADDR
// s60 := false ;
20430: LD_ADDR_EXP 123
20434: PUSH
20435: LD_INT 0
20437: ST_TO_ADDR
// end ;
20438: LD_VAR 0 1
20442: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20443: LD_INT 0
20445: PPUSH
20446: PPUSH
20447: PPUSH
20448: PPUSH
20449: PPUSH
20450: PPUSH
20451: PPUSH
// result := [ ] ;
20452: LD_ADDR_VAR 0 2
20456: PUSH
20457: EMPTY
20458: ST_TO_ADDR
// if campaign_id = 1 then
20459: LD_OWVAR 69
20463: PUSH
20464: LD_INT 1
20466: EQUAL
20467: IFFALSE 23633
// begin case mission_number of 1 :
20469: LD_OWVAR 70
20473: PUSH
20474: LD_INT 1
20476: DOUBLE
20477: EQUAL
20478: IFTRUE 20482
20480: GO 20558
20482: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20483: LD_ADDR_VAR 0 2
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 4
20493: PUSH
20494: LD_INT 11
20496: PUSH
20497: LD_INT 12
20499: PUSH
20500: LD_INT 15
20502: PUSH
20503: LD_INT 16
20505: PUSH
20506: LD_INT 22
20508: PUSH
20509: LD_INT 23
20511: PUSH
20512: LD_INT 26
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 101
20528: PUSH
20529: LD_INT 102
20531: PUSH
20532: LD_INT 106
20534: PUSH
20535: LD_INT 116
20537: PUSH
20538: LD_INT 117
20540: PUSH
20541: LD_INT 118
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: ST_TO_ADDR
20556: GO 23631
20558: LD_INT 2
20560: DOUBLE
20561: EQUAL
20562: IFTRUE 20566
20564: GO 20650
20566: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20567: LD_ADDR_VAR 0 2
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: LD_INT 4
20577: PUSH
20578: LD_INT 11
20580: PUSH
20581: LD_INT 12
20583: PUSH
20584: LD_INT 15
20586: PUSH
20587: LD_INT 16
20589: PUSH
20590: LD_INT 22
20592: PUSH
20593: LD_INT 23
20595: PUSH
20596: LD_INT 26
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 101
20612: PUSH
20613: LD_INT 102
20615: PUSH
20616: LD_INT 105
20618: PUSH
20619: LD_INT 106
20621: PUSH
20622: LD_INT 108
20624: PUSH
20625: LD_INT 116
20627: PUSH
20628: LD_INT 117
20630: PUSH
20631: LD_INT 118
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: ST_TO_ADDR
20648: GO 23631
20650: LD_INT 3
20652: DOUBLE
20653: EQUAL
20654: IFTRUE 20658
20656: GO 20746
20658: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20659: LD_ADDR_VAR 0 2
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 4
20669: PUSH
20670: LD_INT 5
20672: PUSH
20673: LD_INT 11
20675: PUSH
20676: LD_INT 12
20678: PUSH
20679: LD_INT 15
20681: PUSH
20682: LD_INT 16
20684: PUSH
20685: LD_INT 22
20687: PUSH
20688: LD_INT 26
20690: PUSH
20691: LD_INT 36
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 101
20708: PUSH
20709: LD_INT 102
20711: PUSH
20712: LD_INT 105
20714: PUSH
20715: LD_INT 106
20717: PUSH
20718: LD_INT 108
20720: PUSH
20721: LD_INT 116
20723: PUSH
20724: LD_INT 117
20726: PUSH
20727: LD_INT 118
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: ST_TO_ADDR
20744: GO 23631
20746: LD_INT 4
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20850
20754: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20755: LD_ADDR_VAR 0 2
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 4
20765: PUSH
20766: LD_INT 5
20768: PUSH
20769: LD_INT 8
20771: PUSH
20772: LD_INT 11
20774: PUSH
20775: LD_INT 12
20777: PUSH
20778: LD_INT 15
20780: PUSH
20781: LD_INT 16
20783: PUSH
20784: LD_INT 22
20786: PUSH
20787: LD_INT 23
20789: PUSH
20790: LD_INT 26
20792: PUSH
20793: LD_INT 36
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 101
20812: PUSH
20813: LD_INT 102
20815: PUSH
20816: LD_INT 105
20818: PUSH
20819: LD_INT 106
20821: PUSH
20822: LD_INT 108
20824: PUSH
20825: LD_INT 116
20827: PUSH
20828: LD_INT 117
20830: PUSH
20831: LD_INT 118
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: ST_TO_ADDR
20848: GO 23631
20850: LD_INT 5
20852: DOUBLE
20853: EQUAL
20854: IFTRUE 20858
20856: GO 20970
20858: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20859: LD_ADDR_VAR 0 2
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: LD_INT 4
20869: PUSH
20870: LD_INT 5
20872: PUSH
20873: LD_INT 6
20875: PUSH
20876: LD_INT 8
20878: PUSH
20879: LD_INT 11
20881: PUSH
20882: LD_INT 12
20884: PUSH
20885: LD_INT 15
20887: PUSH
20888: LD_INT 16
20890: PUSH
20891: LD_INT 22
20893: PUSH
20894: LD_INT 23
20896: PUSH
20897: LD_INT 25
20899: PUSH
20900: LD_INT 26
20902: PUSH
20903: LD_INT 36
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 101
20924: PUSH
20925: LD_INT 102
20927: PUSH
20928: LD_INT 105
20930: PUSH
20931: LD_INT 106
20933: PUSH
20934: LD_INT 108
20936: PUSH
20937: LD_INT 109
20939: PUSH
20940: LD_INT 112
20942: PUSH
20943: LD_INT 116
20945: PUSH
20946: LD_INT 117
20948: PUSH
20949: LD_INT 118
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: ST_TO_ADDR
20968: GO 23631
20970: LD_INT 6
20972: DOUBLE
20973: EQUAL
20974: IFTRUE 20978
20976: GO 21110
20978: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: LD_INT 4
20989: PUSH
20990: LD_INT 5
20992: PUSH
20993: LD_INT 6
20995: PUSH
20996: LD_INT 8
20998: PUSH
20999: LD_INT 11
21001: PUSH
21002: LD_INT 12
21004: PUSH
21005: LD_INT 15
21007: PUSH
21008: LD_INT 16
21010: PUSH
21011: LD_INT 20
21013: PUSH
21014: LD_INT 21
21016: PUSH
21017: LD_INT 22
21019: PUSH
21020: LD_INT 23
21022: PUSH
21023: LD_INT 25
21025: PUSH
21026: LD_INT 26
21028: PUSH
21029: LD_INT 30
21031: PUSH
21032: LD_INT 31
21034: PUSH
21035: LD_INT 32
21037: PUSH
21038: LD_INT 36
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 101
21064: PUSH
21065: LD_INT 102
21067: PUSH
21068: LD_INT 105
21070: PUSH
21071: LD_INT 106
21073: PUSH
21074: LD_INT 108
21076: PUSH
21077: LD_INT 109
21079: PUSH
21080: LD_INT 112
21082: PUSH
21083: LD_INT 116
21085: PUSH
21086: LD_INT 117
21088: PUSH
21089: LD_INT 118
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: ST_TO_ADDR
21108: GO 23631
21110: LD_INT 7
21112: DOUBLE
21113: EQUAL
21114: IFTRUE 21118
21116: GO 21230
21118: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21119: LD_ADDR_VAR 0 2
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: LD_INT 4
21129: PUSH
21130: LD_INT 5
21132: PUSH
21133: LD_INT 7
21135: PUSH
21136: LD_INT 11
21138: PUSH
21139: LD_INT 12
21141: PUSH
21142: LD_INT 15
21144: PUSH
21145: LD_INT 16
21147: PUSH
21148: LD_INT 20
21150: PUSH
21151: LD_INT 21
21153: PUSH
21154: LD_INT 22
21156: PUSH
21157: LD_INT 23
21159: PUSH
21160: LD_INT 25
21162: PUSH
21163: LD_INT 26
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 101
21184: PUSH
21185: LD_INT 102
21187: PUSH
21188: LD_INT 103
21190: PUSH
21191: LD_INT 105
21193: PUSH
21194: LD_INT 106
21196: PUSH
21197: LD_INT 108
21199: PUSH
21200: LD_INT 112
21202: PUSH
21203: LD_INT 116
21205: PUSH
21206: LD_INT 117
21208: PUSH
21209: LD_INT 118
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: ST_TO_ADDR
21228: GO 23631
21230: LD_INT 8
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21378
21238: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 4
21249: PUSH
21250: LD_INT 5
21252: PUSH
21253: LD_INT 6
21255: PUSH
21256: LD_INT 7
21258: PUSH
21259: LD_INT 8
21261: PUSH
21262: LD_INT 11
21264: PUSH
21265: LD_INT 12
21267: PUSH
21268: LD_INT 15
21270: PUSH
21271: LD_INT 16
21273: PUSH
21274: LD_INT 20
21276: PUSH
21277: LD_INT 21
21279: PUSH
21280: LD_INT 22
21282: PUSH
21283: LD_INT 23
21285: PUSH
21286: LD_INT 25
21288: PUSH
21289: LD_INT 26
21291: PUSH
21292: LD_INT 30
21294: PUSH
21295: LD_INT 31
21297: PUSH
21298: LD_INT 32
21300: PUSH
21301: LD_INT 36
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 101
21328: PUSH
21329: LD_INT 102
21331: PUSH
21332: LD_INT 103
21334: PUSH
21335: LD_INT 105
21337: PUSH
21338: LD_INT 106
21340: PUSH
21341: LD_INT 108
21343: PUSH
21344: LD_INT 109
21346: PUSH
21347: LD_INT 112
21349: PUSH
21350: LD_INT 116
21352: PUSH
21353: LD_INT 117
21355: PUSH
21356: LD_INT 118
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: ST_TO_ADDR
21376: GO 23631
21378: LD_INT 9
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 21534
21386: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21387: LD_ADDR_VAR 0 2
21391: PUSH
21392: LD_INT 2
21394: PUSH
21395: LD_INT 4
21397: PUSH
21398: LD_INT 5
21400: PUSH
21401: LD_INT 6
21403: PUSH
21404: LD_INT 7
21406: PUSH
21407: LD_INT 8
21409: PUSH
21410: LD_INT 11
21412: PUSH
21413: LD_INT 12
21415: PUSH
21416: LD_INT 15
21418: PUSH
21419: LD_INT 16
21421: PUSH
21422: LD_INT 20
21424: PUSH
21425: LD_INT 21
21427: PUSH
21428: LD_INT 22
21430: PUSH
21431: LD_INT 23
21433: PUSH
21434: LD_INT 25
21436: PUSH
21437: LD_INT 26
21439: PUSH
21440: LD_INT 28
21442: PUSH
21443: LD_INT 30
21445: PUSH
21446: LD_INT 31
21448: PUSH
21449: LD_INT 32
21451: PUSH
21452: LD_INT 36
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 101
21480: PUSH
21481: LD_INT 102
21483: PUSH
21484: LD_INT 103
21486: PUSH
21487: LD_INT 105
21489: PUSH
21490: LD_INT 106
21492: PUSH
21493: LD_INT 108
21495: PUSH
21496: LD_INT 109
21498: PUSH
21499: LD_INT 112
21501: PUSH
21502: LD_INT 114
21504: PUSH
21505: LD_INT 116
21507: PUSH
21508: LD_INT 117
21510: PUSH
21511: LD_INT 118
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: ST_TO_ADDR
21532: GO 23631
21534: LD_INT 10
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 21738
21542: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21543: LD_ADDR_VAR 0 2
21547: PUSH
21548: LD_INT 2
21550: PUSH
21551: LD_INT 4
21553: PUSH
21554: LD_INT 5
21556: PUSH
21557: LD_INT 6
21559: PUSH
21560: LD_INT 7
21562: PUSH
21563: LD_INT 8
21565: PUSH
21566: LD_INT 9
21568: PUSH
21569: LD_INT 10
21571: PUSH
21572: LD_INT 11
21574: PUSH
21575: LD_INT 12
21577: PUSH
21578: LD_INT 13
21580: PUSH
21581: LD_INT 14
21583: PUSH
21584: LD_INT 15
21586: PUSH
21587: LD_INT 16
21589: PUSH
21590: LD_INT 17
21592: PUSH
21593: LD_INT 18
21595: PUSH
21596: LD_INT 19
21598: PUSH
21599: LD_INT 20
21601: PUSH
21602: LD_INT 21
21604: PUSH
21605: LD_INT 22
21607: PUSH
21608: LD_INT 23
21610: PUSH
21611: LD_INT 24
21613: PUSH
21614: LD_INT 25
21616: PUSH
21617: LD_INT 26
21619: PUSH
21620: LD_INT 28
21622: PUSH
21623: LD_INT 30
21625: PUSH
21626: LD_INT 31
21628: PUSH
21629: LD_INT 32
21631: PUSH
21632: LD_INT 36
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 101
21668: PUSH
21669: LD_INT 102
21671: PUSH
21672: LD_INT 103
21674: PUSH
21675: LD_INT 104
21677: PUSH
21678: LD_INT 105
21680: PUSH
21681: LD_INT 106
21683: PUSH
21684: LD_INT 107
21686: PUSH
21687: LD_INT 108
21689: PUSH
21690: LD_INT 109
21692: PUSH
21693: LD_INT 110
21695: PUSH
21696: LD_INT 111
21698: PUSH
21699: LD_INT 112
21701: PUSH
21702: LD_INT 114
21704: PUSH
21705: LD_INT 116
21707: PUSH
21708: LD_INT 117
21710: PUSH
21711: LD_INT 118
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: ST_TO_ADDR
21736: GO 23631
21738: LD_INT 11
21740: DOUBLE
21741: EQUAL
21742: IFTRUE 21746
21744: GO 21950
21746: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21747: LD_ADDR_VAR 0 2
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: LD_INT 3
21757: PUSH
21758: LD_INT 4
21760: PUSH
21761: LD_INT 5
21763: PUSH
21764: LD_INT 6
21766: PUSH
21767: LD_INT 7
21769: PUSH
21770: LD_INT 8
21772: PUSH
21773: LD_INT 9
21775: PUSH
21776: LD_INT 10
21778: PUSH
21779: LD_INT 11
21781: PUSH
21782: LD_INT 12
21784: PUSH
21785: LD_INT 13
21787: PUSH
21788: LD_INT 14
21790: PUSH
21791: LD_INT 15
21793: PUSH
21794: LD_INT 16
21796: PUSH
21797: LD_INT 17
21799: PUSH
21800: LD_INT 18
21802: PUSH
21803: LD_INT 19
21805: PUSH
21806: LD_INT 20
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_INT 23
21817: PUSH
21818: LD_INT 24
21820: PUSH
21821: LD_INT 25
21823: PUSH
21824: LD_INT 26
21826: PUSH
21827: LD_INT 28
21829: PUSH
21830: LD_INT 30
21832: PUSH
21833: LD_INT 31
21835: PUSH
21836: LD_INT 32
21838: PUSH
21839: LD_INT 34
21841: PUSH
21842: LD_INT 36
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 101
21880: PUSH
21881: LD_INT 102
21883: PUSH
21884: LD_INT 103
21886: PUSH
21887: LD_INT 104
21889: PUSH
21890: LD_INT 105
21892: PUSH
21893: LD_INT 106
21895: PUSH
21896: LD_INT 107
21898: PUSH
21899: LD_INT 108
21901: PUSH
21902: LD_INT 109
21904: PUSH
21905: LD_INT 110
21907: PUSH
21908: LD_INT 111
21910: PUSH
21911: LD_INT 112
21913: PUSH
21914: LD_INT 114
21916: PUSH
21917: LD_INT 116
21919: PUSH
21920: LD_INT 117
21922: PUSH
21923: LD_INT 118
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: ST_TO_ADDR
21948: GO 23631
21950: LD_INT 12
21952: DOUBLE
21953: EQUAL
21954: IFTRUE 21958
21956: GO 22178
21958: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21959: LD_ADDR_VAR 0 2
21963: PUSH
21964: LD_INT 1
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: LD_INT 3
21972: PUSH
21973: LD_INT 4
21975: PUSH
21976: LD_INT 5
21978: PUSH
21979: LD_INT 6
21981: PUSH
21982: LD_INT 7
21984: PUSH
21985: LD_INT 8
21987: PUSH
21988: LD_INT 9
21990: PUSH
21991: LD_INT 10
21993: PUSH
21994: LD_INT 11
21996: PUSH
21997: LD_INT 12
21999: PUSH
22000: LD_INT 13
22002: PUSH
22003: LD_INT 14
22005: PUSH
22006: LD_INT 15
22008: PUSH
22009: LD_INT 16
22011: PUSH
22012: LD_INT 17
22014: PUSH
22015: LD_INT 18
22017: PUSH
22018: LD_INT 19
22020: PUSH
22021: LD_INT 20
22023: PUSH
22024: LD_INT 21
22026: PUSH
22027: LD_INT 22
22029: PUSH
22030: LD_INT 23
22032: PUSH
22033: LD_INT 24
22035: PUSH
22036: LD_INT 25
22038: PUSH
22039: LD_INT 26
22041: PUSH
22042: LD_INT 27
22044: PUSH
22045: LD_INT 28
22047: PUSH
22048: LD_INT 30
22050: PUSH
22051: LD_INT 31
22053: PUSH
22054: LD_INT 32
22056: PUSH
22057: LD_INT 33
22059: PUSH
22060: LD_INT 34
22062: PUSH
22063: LD_INT 36
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 101
22104: PUSH
22105: LD_INT 102
22107: PUSH
22108: LD_INT 103
22110: PUSH
22111: LD_INT 104
22113: PUSH
22114: LD_INT 105
22116: PUSH
22117: LD_INT 106
22119: PUSH
22120: LD_INT 107
22122: PUSH
22123: LD_INT 108
22125: PUSH
22126: LD_INT 109
22128: PUSH
22129: LD_INT 110
22131: PUSH
22132: LD_INT 111
22134: PUSH
22135: LD_INT 112
22137: PUSH
22138: LD_INT 113
22140: PUSH
22141: LD_INT 114
22143: PUSH
22144: LD_INT 116
22146: PUSH
22147: LD_INT 117
22149: PUSH
22150: LD_INT 118
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: ST_TO_ADDR
22176: GO 23631
22178: LD_INT 13
22180: DOUBLE
22181: EQUAL
22182: IFTRUE 22186
22184: GO 22394
22186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22187: LD_ADDR_VAR 0 2
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: LD_INT 2
22197: PUSH
22198: LD_INT 3
22200: PUSH
22201: LD_INT 4
22203: PUSH
22204: LD_INT 5
22206: PUSH
22207: LD_INT 8
22209: PUSH
22210: LD_INT 9
22212: PUSH
22213: LD_INT 10
22215: PUSH
22216: LD_INT 11
22218: PUSH
22219: LD_INT 12
22221: PUSH
22222: LD_INT 14
22224: PUSH
22225: LD_INT 15
22227: PUSH
22228: LD_INT 16
22230: PUSH
22231: LD_INT 17
22233: PUSH
22234: LD_INT 18
22236: PUSH
22237: LD_INT 19
22239: PUSH
22240: LD_INT 20
22242: PUSH
22243: LD_INT 21
22245: PUSH
22246: LD_INT 22
22248: PUSH
22249: LD_INT 23
22251: PUSH
22252: LD_INT 24
22254: PUSH
22255: LD_INT 25
22257: PUSH
22258: LD_INT 26
22260: PUSH
22261: LD_INT 27
22263: PUSH
22264: LD_INT 28
22266: PUSH
22267: LD_INT 30
22269: PUSH
22270: LD_INT 31
22272: PUSH
22273: LD_INT 32
22275: PUSH
22276: LD_INT 33
22278: PUSH
22279: LD_INT 34
22281: PUSH
22282: LD_INT 36
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 101
22320: PUSH
22321: LD_INT 102
22323: PUSH
22324: LD_INT 103
22326: PUSH
22327: LD_INT 104
22329: PUSH
22330: LD_INT 105
22332: PUSH
22333: LD_INT 106
22335: PUSH
22336: LD_INT 107
22338: PUSH
22339: LD_INT 108
22341: PUSH
22342: LD_INT 109
22344: PUSH
22345: LD_INT 110
22347: PUSH
22348: LD_INT 111
22350: PUSH
22351: LD_INT 112
22353: PUSH
22354: LD_INT 113
22356: PUSH
22357: LD_INT 114
22359: PUSH
22360: LD_INT 116
22362: PUSH
22363: LD_INT 117
22365: PUSH
22366: LD_INT 118
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: ST_TO_ADDR
22392: GO 23631
22394: LD_INT 14
22396: DOUBLE
22397: EQUAL
22398: IFTRUE 22402
22400: GO 22626
22402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22403: LD_ADDR_VAR 0 2
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: LD_INT 3
22416: PUSH
22417: LD_INT 4
22419: PUSH
22420: LD_INT 5
22422: PUSH
22423: LD_INT 6
22425: PUSH
22426: LD_INT 7
22428: PUSH
22429: LD_INT 8
22431: PUSH
22432: LD_INT 9
22434: PUSH
22435: LD_INT 10
22437: PUSH
22438: LD_INT 11
22440: PUSH
22441: LD_INT 12
22443: PUSH
22444: LD_INT 13
22446: PUSH
22447: LD_INT 14
22449: PUSH
22450: LD_INT 15
22452: PUSH
22453: LD_INT 16
22455: PUSH
22456: LD_INT 17
22458: PUSH
22459: LD_INT 18
22461: PUSH
22462: LD_INT 19
22464: PUSH
22465: LD_INT 20
22467: PUSH
22468: LD_INT 21
22470: PUSH
22471: LD_INT 22
22473: PUSH
22474: LD_INT 23
22476: PUSH
22477: LD_INT 24
22479: PUSH
22480: LD_INT 25
22482: PUSH
22483: LD_INT 26
22485: PUSH
22486: LD_INT 27
22488: PUSH
22489: LD_INT 28
22491: PUSH
22492: LD_INT 29
22494: PUSH
22495: LD_INT 30
22497: PUSH
22498: LD_INT 31
22500: PUSH
22501: LD_INT 32
22503: PUSH
22504: LD_INT 33
22506: PUSH
22507: LD_INT 34
22509: PUSH
22510: LD_INT 36
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 101
22552: PUSH
22553: LD_INT 102
22555: PUSH
22556: LD_INT 103
22558: PUSH
22559: LD_INT 104
22561: PUSH
22562: LD_INT 105
22564: PUSH
22565: LD_INT 106
22567: PUSH
22568: LD_INT 107
22570: PUSH
22571: LD_INT 108
22573: PUSH
22574: LD_INT 109
22576: PUSH
22577: LD_INT 110
22579: PUSH
22580: LD_INT 111
22582: PUSH
22583: LD_INT 112
22585: PUSH
22586: LD_INT 113
22588: PUSH
22589: LD_INT 114
22591: PUSH
22592: LD_INT 116
22594: PUSH
22595: LD_INT 117
22597: PUSH
22598: LD_INT 118
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: ST_TO_ADDR
22624: GO 23631
22626: LD_INT 15
22628: DOUBLE
22629: EQUAL
22630: IFTRUE 22634
22632: GO 22858
22634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22635: LD_ADDR_VAR 0 2
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 3
22648: PUSH
22649: LD_INT 4
22651: PUSH
22652: LD_INT 5
22654: PUSH
22655: LD_INT 6
22657: PUSH
22658: LD_INT 7
22660: PUSH
22661: LD_INT 8
22663: PUSH
22664: LD_INT 9
22666: PUSH
22667: LD_INT 10
22669: PUSH
22670: LD_INT 11
22672: PUSH
22673: LD_INT 12
22675: PUSH
22676: LD_INT 13
22678: PUSH
22679: LD_INT 14
22681: PUSH
22682: LD_INT 15
22684: PUSH
22685: LD_INT 16
22687: PUSH
22688: LD_INT 17
22690: PUSH
22691: LD_INT 18
22693: PUSH
22694: LD_INT 19
22696: PUSH
22697: LD_INT 20
22699: PUSH
22700: LD_INT 21
22702: PUSH
22703: LD_INT 22
22705: PUSH
22706: LD_INT 23
22708: PUSH
22709: LD_INT 24
22711: PUSH
22712: LD_INT 25
22714: PUSH
22715: LD_INT 26
22717: PUSH
22718: LD_INT 27
22720: PUSH
22721: LD_INT 28
22723: PUSH
22724: LD_INT 29
22726: PUSH
22727: LD_INT 30
22729: PUSH
22730: LD_INT 31
22732: PUSH
22733: LD_INT 32
22735: PUSH
22736: LD_INT 33
22738: PUSH
22739: LD_INT 34
22741: PUSH
22742: LD_INT 36
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 101
22784: PUSH
22785: LD_INT 102
22787: PUSH
22788: LD_INT 103
22790: PUSH
22791: LD_INT 104
22793: PUSH
22794: LD_INT 105
22796: PUSH
22797: LD_INT 106
22799: PUSH
22800: LD_INT 107
22802: PUSH
22803: LD_INT 108
22805: PUSH
22806: LD_INT 109
22808: PUSH
22809: LD_INT 110
22811: PUSH
22812: LD_INT 111
22814: PUSH
22815: LD_INT 112
22817: PUSH
22818: LD_INT 113
22820: PUSH
22821: LD_INT 114
22823: PUSH
22824: LD_INT 116
22826: PUSH
22827: LD_INT 117
22829: PUSH
22830: LD_INT 118
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: ST_TO_ADDR
22856: GO 23631
22858: LD_INT 16
22860: DOUBLE
22861: EQUAL
22862: IFTRUE 22866
22864: GO 23002
22866: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22867: LD_ADDR_VAR 0 2
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: LD_INT 4
22877: PUSH
22878: LD_INT 5
22880: PUSH
22881: LD_INT 7
22883: PUSH
22884: LD_INT 11
22886: PUSH
22887: LD_INT 12
22889: PUSH
22890: LD_INT 15
22892: PUSH
22893: LD_INT 16
22895: PUSH
22896: LD_INT 20
22898: PUSH
22899: LD_INT 21
22901: PUSH
22902: LD_INT 22
22904: PUSH
22905: LD_INT 23
22907: PUSH
22908: LD_INT 25
22910: PUSH
22911: LD_INT 26
22913: PUSH
22914: LD_INT 30
22916: PUSH
22917: LD_INT 31
22919: PUSH
22920: LD_INT 32
22922: PUSH
22923: LD_INT 33
22925: PUSH
22926: LD_INT 34
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 101
22952: PUSH
22953: LD_INT 102
22955: PUSH
22956: LD_INT 103
22958: PUSH
22959: LD_INT 106
22961: PUSH
22962: LD_INT 108
22964: PUSH
22965: LD_INT 112
22967: PUSH
22968: LD_INT 113
22970: PUSH
22971: LD_INT 114
22973: PUSH
22974: LD_INT 116
22976: PUSH
22977: LD_INT 117
22979: PUSH
22980: LD_INT 118
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: ST_TO_ADDR
23000: GO 23631
23002: LD_INT 17
23004: DOUBLE
23005: EQUAL
23006: IFTRUE 23010
23008: GO 23234
23010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23011: LD_ADDR_VAR 0 2
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: LD_INT 5
23030: PUSH
23031: LD_INT 6
23033: PUSH
23034: LD_INT 7
23036: PUSH
23037: LD_INT 8
23039: PUSH
23040: LD_INT 9
23042: PUSH
23043: LD_INT 10
23045: PUSH
23046: LD_INT 11
23048: PUSH
23049: LD_INT 12
23051: PUSH
23052: LD_INT 13
23054: PUSH
23055: LD_INT 14
23057: PUSH
23058: LD_INT 15
23060: PUSH
23061: LD_INT 16
23063: PUSH
23064: LD_INT 17
23066: PUSH
23067: LD_INT 18
23069: PUSH
23070: LD_INT 19
23072: PUSH
23073: LD_INT 20
23075: PUSH
23076: LD_INT 21
23078: PUSH
23079: LD_INT 22
23081: PUSH
23082: LD_INT 23
23084: PUSH
23085: LD_INT 24
23087: PUSH
23088: LD_INT 25
23090: PUSH
23091: LD_INT 26
23093: PUSH
23094: LD_INT 27
23096: PUSH
23097: LD_INT 28
23099: PUSH
23100: LD_INT 29
23102: PUSH
23103: LD_INT 30
23105: PUSH
23106: LD_INT 31
23108: PUSH
23109: LD_INT 32
23111: PUSH
23112: LD_INT 33
23114: PUSH
23115: LD_INT 34
23117: PUSH
23118: LD_INT 36
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 101
23160: PUSH
23161: LD_INT 102
23163: PUSH
23164: LD_INT 103
23166: PUSH
23167: LD_INT 104
23169: PUSH
23170: LD_INT 105
23172: PUSH
23173: LD_INT 106
23175: PUSH
23176: LD_INT 107
23178: PUSH
23179: LD_INT 108
23181: PUSH
23182: LD_INT 109
23184: PUSH
23185: LD_INT 110
23187: PUSH
23188: LD_INT 111
23190: PUSH
23191: LD_INT 112
23193: PUSH
23194: LD_INT 113
23196: PUSH
23197: LD_INT 114
23199: PUSH
23200: LD_INT 116
23202: PUSH
23203: LD_INT 117
23205: PUSH
23206: LD_INT 118
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: ST_TO_ADDR
23232: GO 23631
23234: LD_INT 18
23236: DOUBLE
23237: EQUAL
23238: IFTRUE 23242
23240: GO 23390
23242: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23243: LD_ADDR_VAR 0 2
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 4
23253: PUSH
23254: LD_INT 5
23256: PUSH
23257: LD_INT 7
23259: PUSH
23260: LD_INT 11
23262: PUSH
23263: LD_INT 12
23265: PUSH
23266: LD_INT 15
23268: PUSH
23269: LD_INT 16
23271: PUSH
23272: LD_INT 20
23274: PUSH
23275: LD_INT 21
23277: PUSH
23278: LD_INT 22
23280: PUSH
23281: LD_INT 23
23283: PUSH
23284: LD_INT 25
23286: PUSH
23287: LD_INT 26
23289: PUSH
23290: LD_INT 30
23292: PUSH
23293: LD_INT 31
23295: PUSH
23296: LD_INT 32
23298: PUSH
23299: LD_INT 33
23301: PUSH
23302: LD_INT 34
23304: PUSH
23305: LD_INT 35
23307: PUSH
23308: LD_INT 36
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 101
23336: PUSH
23337: LD_INT 102
23339: PUSH
23340: LD_INT 103
23342: PUSH
23343: LD_INT 106
23345: PUSH
23346: LD_INT 108
23348: PUSH
23349: LD_INT 112
23351: PUSH
23352: LD_INT 113
23354: PUSH
23355: LD_INT 114
23357: PUSH
23358: LD_INT 115
23360: PUSH
23361: LD_INT 116
23363: PUSH
23364: LD_INT 117
23366: PUSH
23367: LD_INT 118
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: ST_TO_ADDR
23388: GO 23631
23390: LD_INT 19
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 23630
23398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23399: LD_ADDR_VAR 0 2
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: LD_INT 3
23412: PUSH
23413: LD_INT 4
23415: PUSH
23416: LD_INT 5
23418: PUSH
23419: LD_INT 6
23421: PUSH
23422: LD_INT 7
23424: PUSH
23425: LD_INT 8
23427: PUSH
23428: LD_INT 9
23430: PUSH
23431: LD_INT 10
23433: PUSH
23434: LD_INT 11
23436: PUSH
23437: LD_INT 12
23439: PUSH
23440: LD_INT 13
23442: PUSH
23443: LD_INT 14
23445: PUSH
23446: LD_INT 15
23448: PUSH
23449: LD_INT 16
23451: PUSH
23452: LD_INT 17
23454: PUSH
23455: LD_INT 18
23457: PUSH
23458: LD_INT 19
23460: PUSH
23461: LD_INT 20
23463: PUSH
23464: LD_INT 21
23466: PUSH
23467: LD_INT 22
23469: PUSH
23470: LD_INT 23
23472: PUSH
23473: LD_INT 24
23475: PUSH
23476: LD_INT 25
23478: PUSH
23479: LD_INT 26
23481: PUSH
23482: LD_INT 27
23484: PUSH
23485: LD_INT 28
23487: PUSH
23488: LD_INT 29
23490: PUSH
23491: LD_INT 30
23493: PUSH
23494: LD_INT 31
23496: PUSH
23497: LD_INT 32
23499: PUSH
23500: LD_INT 33
23502: PUSH
23503: LD_INT 34
23505: PUSH
23506: LD_INT 35
23508: PUSH
23509: LD_INT 36
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 101
23552: PUSH
23553: LD_INT 102
23555: PUSH
23556: LD_INT 103
23558: PUSH
23559: LD_INT 104
23561: PUSH
23562: LD_INT 105
23564: PUSH
23565: LD_INT 106
23567: PUSH
23568: LD_INT 107
23570: PUSH
23571: LD_INT 108
23573: PUSH
23574: LD_INT 109
23576: PUSH
23577: LD_INT 110
23579: PUSH
23580: LD_INT 111
23582: PUSH
23583: LD_INT 112
23585: PUSH
23586: LD_INT 113
23588: PUSH
23589: LD_INT 114
23591: PUSH
23592: LD_INT 115
23594: PUSH
23595: LD_INT 116
23597: PUSH
23598: LD_INT 117
23600: PUSH
23601: LD_INT 118
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: ST_TO_ADDR
23628: GO 23631
23630: POP
// end else
23631: GO 23862
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23633: LD_ADDR_VAR 0 2
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: LD_INT 3
23646: PUSH
23647: LD_INT 4
23649: PUSH
23650: LD_INT 5
23652: PUSH
23653: LD_INT 6
23655: PUSH
23656: LD_INT 7
23658: PUSH
23659: LD_INT 8
23661: PUSH
23662: LD_INT 9
23664: PUSH
23665: LD_INT 10
23667: PUSH
23668: LD_INT 11
23670: PUSH
23671: LD_INT 12
23673: PUSH
23674: LD_INT 13
23676: PUSH
23677: LD_INT 14
23679: PUSH
23680: LD_INT 15
23682: PUSH
23683: LD_INT 16
23685: PUSH
23686: LD_INT 17
23688: PUSH
23689: LD_INT 18
23691: PUSH
23692: LD_INT 19
23694: PUSH
23695: LD_INT 20
23697: PUSH
23698: LD_INT 21
23700: PUSH
23701: LD_INT 22
23703: PUSH
23704: LD_INT 23
23706: PUSH
23707: LD_INT 24
23709: PUSH
23710: LD_INT 25
23712: PUSH
23713: LD_INT 26
23715: PUSH
23716: LD_INT 27
23718: PUSH
23719: LD_INT 28
23721: PUSH
23722: LD_INT 29
23724: PUSH
23725: LD_INT 30
23727: PUSH
23728: LD_INT 31
23730: PUSH
23731: LD_INT 32
23733: PUSH
23734: LD_INT 33
23736: PUSH
23737: LD_INT 34
23739: PUSH
23740: LD_INT 35
23742: PUSH
23743: LD_INT 36
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 101
23786: PUSH
23787: LD_INT 102
23789: PUSH
23790: LD_INT 103
23792: PUSH
23793: LD_INT 104
23795: PUSH
23796: LD_INT 105
23798: PUSH
23799: LD_INT 106
23801: PUSH
23802: LD_INT 107
23804: PUSH
23805: LD_INT 108
23807: PUSH
23808: LD_INT 109
23810: PUSH
23811: LD_INT 110
23813: PUSH
23814: LD_INT 111
23816: PUSH
23817: LD_INT 112
23819: PUSH
23820: LD_INT 113
23822: PUSH
23823: LD_INT 114
23825: PUSH
23826: LD_INT 115
23828: PUSH
23829: LD_INT 116
23831: PUSH
23832: LD_INT 117
23834: PUSH
23835: LD_INT 118
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: ST_TO_ADDR
// if result then
23862: LD_VAR 0 2
23866: IFFALSE 24652
// begin normal :=  ;
23868: LD_ADDR_VAR 0 5
23872: PUSH
23873: LD_STRING 
23875: ST_TO_ADDR
// hardcore :=  ;
23876: LD_ADDR_VAR 0 6
23880: PUSH
23881: LD_STRING 
23883: ST_TO_ADDR
// active :=  ;
23884: LD_ADDR_VAR 0 7
23888: PUSH
23889: LD_STRING 
23891: ST_TO_ADDR
// for i = 1 to normalCounter do
23892: LD_ADDR_VAR 0 8
23896: PUSH
23897: DOUBLE
23898: LD_INT 1
23900: DEC
23901: ST_TO_ADDR
23902: LD_EXP 68
23906: PUSH
23907: FOR_TO
23908: IFFALSE 24009
// begin tmp := 0 ;
23910: LD_ADDR_VAR 0 3
23914: PUSH
23915: LD_STRING 0
23917: ST_TO_ADDR
// if result [ 1 ] then
23918: LD_VAR 0 2
23922: PUSH
23923: LD_INT 1
23925: ARRAY
23926: IFFALSE 23991
// if result [ 1 ] [ 1 ] = i then
23928: LD_VAR 0 2
23932: PUSH
23933: LD_INT 1
23935: ARRAY
23936: PUSH
23937: LD_INT 1
23939: ARRAY
23940: PUSH
23941: LD_VAR 0 8
23945: EQUAL
23946: IFFALSE 23991
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23948: LD_ADDR_VAR 0 2
23952: PUSH
23953: LD_VAR 0 2
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: LD_VAR 0 2
23965: PUSH
23966: LD_INT 1
23968: ARRAY
23969: PPUSH
23970: LD_INT 1
23972: PPUSH
23973: CALL_OW 3
23977: PPUSH
23978: CALL_OW 1
23982: ST_TO_ADDR
// tmp := 1 ;
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_STRING 1
23990: ST_TO_ADDR
// end ; normal := normal & tmp ;
23991: LD_ADDR_VAR 0 5
23995: PUSH
23996: LD_VAR 0 5
24000: PUSH
24001: LD_VAR 0 3
24005: STR
24006: ST_TO_ADDR
// end ;
24007: GO 23907
24009: POP
24010: POP
// for i = 1 to hardcoreCounter do
24011: LD_ADDR_VAR 0 8
24015: PUSH
24016: DOUBLE
24017: LD_INT 1
24019: DEC
24020: ST_TO_ADDR
24021: LD_EXP 69
24025: PUSH
24026: FOR_TO
24027: IFFALSE 24132
// begin tmp := 0 ;
24029: LD_ADDR_VAR 0 3
24033: PUSH
24034: LD_STRING 0
24036: ST_TO_ADDR
// if result [ 2 ] then
24037: LD_VAR 0 2
24041: PUSH
24042: LD_INT 2
24044: ARRAY
24045: IFFALSE 24114
// if result [ 2 ] [ 1 ] = 100 + i then
24047: LD_VAR 0 2
24051: PUSH
24052: LD_INT 2
24054: ARRAY
24055: PUSH
24056: LD_INT 1
24058: ARRAY
24059: PUSH
24060: LD_INT 100
24062: PUSH
24063: LD_VAR 0 8
24067: PLUS
24068: EQUAL
24069: IFFALSE 24114
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24071: LD_ADDR_VAR 0 2
24075: PUSH
24076: LD_VAR 0 2
24080: PPUSH
24081: LD_INT 2
24083: PPUSH
24084: LD_VAR 0 2
24088: PUSH
24089: LD_INT 2
24091: ARRAY
24092: PPUSH
24093: LD_INT 1
24095: PPUSH
24096: CALL_OW 3
24100: PPUSH
24101: CALL_OW 1
24105: ST_TO_ADDR
// tmp := 1 ;
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: LD_STRING 1
24113: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24114: LD_ADDR_VAR 0 6
24118: PUSH
24119: LD_VAR 0 6
24123: PUSH
24124: LD_VAR 0 3
24128: STR
24129: ST_TO_ADDR
// end ;
24130: GO 24026
24132: POP
24133: POP
// if isGameLoad then
24134: LD_VAR 0 1
24138: IFFALSE 24613
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24140: LD_ADDR_VAR 0 4
24144: PUSH
24145: LD_EXP 72
24149: PUSH
24150: LD_EXP 71
24154: PUSH
24155: LD_EXP 73
24159: PUSH
24160: LD_EXP 70
24164: PUSH
24165: LD_EXP 74
24169: PUSH
24170: LD_EXP 75
24174: PUSH
24175: LD_EXP 76
24179: PUSH
24180: LD_EXP 77
24184: PUSH
24185: LD_EXP 78
24189: PUSH
24190: LD_EXP 79
24194: PUSH
24195: LD_EXP 80
24199: PUSH
24200: LD_EXP 81
24204: PUSH
24205: LD_EXP 82
24209: PUSH
24210: LD_EXP 83
24214: PUSH
24215: LD_EXP 91
24219: PUSH
24220: LD_EXP 92
24224: PUSH
24225: LD_EXP 93
24229: PUSH
24230: LD_EXP 94
24234: PUSH
24235: LD_EXP 96
24239: PUSH
24240: LD_EXP 97
24244: PUSH
24245: LD_EXP 98
24249: PUSH
24250: LD_EXP 101
24254: PUSH
24255: LD_EXP 103
24259: PUSH
24260: LD_EXP 104
24264: PUSH
24265: LD_EXP 105
24269: PUSH
24270: LD_EXP 107
24274: PUSH
24275: LD_EXP 108
24279: PUSH
24280: LD_EXP 111
24284: PUSH
24285: LD_EXP 112
24289: PUSH
24290: LD_EXP 113
24294: PUSH
24295: LD_EXP 114
24299: PUSH
24300: LD_EXP 115
24304: PUSH
24305: LD_EXP 116
24309: PUSH
24310: LD_EXP 117
24314: PUSH
24315: LD_EXP 118
24319: PUSH
24320: LD_EXP 119
24324: PUSH
24325: LD_EXP 84
24329: PUSH
24330: LD_EXP 85
24334: PUSH
24335: LD_EXP 88
24339: PUSH
24340: LD_EXP 89
24344: PUSH
24345: LD_EXP 90
24349: PUSH
24350: LD_EXP 86
24354: PUSH
24355: LD_EXP 87
24359: PUSH
24360: LD_EXP 95
24364: PUSH
24365: LD_EXP 99
24369: PUSH
24370: LD_EXP 100
24374: PUSH
24375: LD_EXP 102
24379: PUSH
24380: LD_EXP 106
24384: PUSH
24385: LD_EXP 109
24389: PUSH
24390: LD_EXP 110
24394: PUSH
24395: LD_EXP 120
24399: PUSH
24400: LD_EXP 121
24404: PUSH
24405: LD_EXP 122
24409: PUSH
24410: LD_EXP 123
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: ST_TO_ADDR
// tmp :=  ;
24471: LD_ADDR_VAR 0 3
24475: PUSH
24476: LD_STRING 
24478: ST_TO_ADDR
// for i = 1 to normalCounter do
24479: LD_ADDR_VAR 0 8
24483: PUSH
24484: DOUBLE
24485: LD_INT 1
24487: DEC
24488: ST_TO_ADDR
24489: LD_EXP 68
24493: PUSH
24494: FOR_TO
24495: IFFALSE 24531
// begin if flags [ i ] then
24497: LD_VAR 0 4
24501: PUSH
24502: LD_VAR 0 8
24506: ARRAY
24507: IFFALSE 24529
// tmp := tmp & i & ; ;
24509: LD_ADDR_VAR 0 3
24513: PUSH
24514: LD_VAR 0 3
24518: PUSH
24519: LD_VAR 0 8
24523: STR
24524: PUSH
24525: LD_STRING ;
24527: STR
24528: ST_TO_ADDR
// end ;
24529: GO 24494
24531: POP
24532: POP
// for i = 1 to hardcoreCounter do
24533: LD_ADDR_VAR 0 8
24537: PUSH
24538: DOUBLE
24539: LD_INT 1
24541: DEC
24542: ST_TO_ADDR
24543: LD_EXP 69
24547: PUSH
24548: FOR_TO
24549: IFFALSE 24595
// begin if flags [ normalCounter + i ] then
24551: LD_VAR 0 4
24555: PUSH
24556: LD_EXP 68
24560: PUSH
24561: LD_VAR 0 8
24565: PLUS
24566: ARRAY
24567: IFFALSE 24593
// tmp := tmp & ( 100 + i ) & ; ;
24569: LD_ADDR_VAR 0 3
24573: PUSH
24574: LD_VAR 0 3
24578: PUSH
24579: LD_INT 100
24581: PUSH
24582: LD_VAR 0 8
24586: PLUS
24587: STR
24588: PUSH
24589: LD_STRING ;
24591: STR
24592: ST_TO_ADDR
// end ;
24593: GO 24548
24595: POP
24596: POP
// if tmp then
24597: LD_VAR 0 3
24601: IFFALSE 24613
// active := tmp ;
24603: LD_ADDR_VAR 0 7
24607: PUSH
24608: LD_VAR 0 3
24612: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24613: LD_STRING getStreamItemsFromMission("
24615: PUSH
24616: LD_VAR 0 5
24620: STR
24621: PUSH
24622: LD_STRING ","
24624: STR
24625: PUSH
24626: LD_VAR 0 6
24630: STR
24631: PUSH
24632: LD_STRING ","
24634: STR
24635: PUSH
24636: LD_VAR 0 7
24640: STR
24641: PUSH
24642: LD_STRING ")
24644: STR
24645: PPUSH
24646: CALL_OW 559
// end else
24650: GO 24659
// ToLua ( getStreamItemsFromMission("","","") ) ;
24652: LD_STRING getStreamItemsFromMission("","","")
24654: PPUSH
24655: CALL_OW 559
// end ;
24659: LD_VAR 0 2
24663: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24664: LD_EXP 67
24668: PUSH
24669: LD_EXP 72
24673: AND
24674: IFFALSE 24798
24676: GO 24678
24678: DISABLE
24679: LD_INT 0
24681: PPUSH
24682: PPUSH
// begin enable ;
24683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24684: LD_ADDR_VAR 0 2
24688: PUSH
24689: LD_INT 22
24691: PUSH
24692: LD_OWVAR 2
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 34
24706: PUSH
24707: LD_INT 7
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 34
24716: PUSH
24717: LD_INT 45
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 34
24726: PUSH
24727: LD_INT 28
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 34
24736: PUSH
24737: LD_INT 47
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PPUSH
24755: CALL_OW 69
24759: ST_TO_ADDR
// if not tmp then
24760: LD_VAR 0 2
24764: NOT
24765: IFFALSE 24769
// exit ;
24767: GO 24798
// for i in tmp do
24769: LD_ADDR_VAR 0 1
24773: PUSH
24774: LD_VAR 0 2
24778: PUSH
24779: FOR_IN
24780: IFFALSE 24796
// begin SetLives ( i , 0 ) ;
24782: LD_VAR 0 1
24786: PPUSH
24787: LD_INT 0
24789: PPUSH
24790: CALL_OW 234
// end ;
24794: GO 24779
24796: POP
24797: POP
// end ;
24798: PPOPN 2
24800: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24801: LD_EXP 67
24805: PUSH
24806: LD_EXP 73
24810: AND
24811: IFFALSE 24895
24813: GO 24815
24815: DISABLE
24816: LD_INT 0
24818: PPUSH
24819: PPUSH
// begin enable ;
24820: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24821: LD_ADDR_VAR 0 2
24825: PUSH
24826: LD_INT 22
24828: PUSH
24829: LD_OWVAR 2
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 32
24840: PUSH
24841: LD_INT 3
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PPUSH
24852: CALL_OW 69
24856: ST_TO_ADDR
// if not tmp then
24857: LD_VAR 0 2
24861: NOT
24862: IFFALSE 24866
// exit ;
24864: GO 24895
// for i in tmp do
24866: LD_ADDR_VAR 0 1
24870: PUSH
24871: LD_VAR 0 2
24875: PUSH
24876: FOR_IN
24877: IFFALSE 24893
// begin SetLives ( i , 0 ) ;
24879: LD_VAR 0 1
24883: PPUSH
24884: LD_INT 0
24886: PPUSH
24887: CALL_OW 234
// end ;
24891: GO 24876
24893: POP
24894: POP
// end ;
24895: PPOPN 2
24897: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24898: LD_EXP 67
24902: PUSH
24903: LD_EXP 70
24907: AND
24908: IFFALSE 25001
24910: GO 24912
24912: DISABLE
24913: LD_INT 0
24915: PPUSH
// begin enable ;
24916: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24917: LD_ADDR_VAR 0 1
24921: PUSH
24922: LD_INT 22
24924: PUSH
24925: LD_OWVAR 2
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 25
24939: PUSH
24940: LD_INT 5
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 25
24949: PUSH
24950: LD_INT 9
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 25
24959: PUSH
24960: LD_INT 8
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PPUSH
24977: CALL_OW 69
24981: PUSH
24982: FOR_IN
24983: IFFALSE 24999
// begin SetClass ( i , 1 ) ;
24985: LD_VAR 0 1
24989: PPUSH
24990: LD_INT 1
24992: PPUSH
24993: CALL_OW 336
// end ;
24997: GO 24982
24999: POP
25000: POP
// end ;
25001: PPOPN 1
25003: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25004: LD_EXP 67
25008: PUSH
25009: LD_EXP 71
25013: AND
25014: PUSH
25015: LD_OWVAR 65
25019: PUSH
25020: LD_INT 7
25022: LESS
25023: AND
25024: IFFALSE 25038
25026: GO 25028
25028: DISABLE
// begin enable ;
25029: ENABLE
// game_speed := 7 ;
25030: LD_ADDR_OWVAR 65
25034: PUSH
25035: LD_INT 7
25037: ST_TO_ADDR
// end ;
25038: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25039: LD_EXP 67
25043: PUSH
25044: LD_EXP 74
25048: AND
25049: IFFALSE 25251
25051: GO 25053
25053: DISABLE
25054: LD_INT 0
25056: PPUSH
25057: PPUSH
25058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25059: LD_ADDR_VAR 0 3
25063: PUSH
25064: LD_INT 81
25066: PUSH
25067: LD_OWVAR 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 21
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PPUSH
25090: CALL_OW 69
25094: ST_TO_ADDR
// if not tmp then
25095: LD_VAR 0 3
25099: NOT
25100: IFFALSE 25104
// exit ;
25102: GO 25251
// if tmp > 5 then
25104: LD_VAR 0 3
25108: PUSH
25109: LD_INT 5
25111: GREATER
25112: IFFALSE 25124
// k := 5 else
25114: LD_ADDR_VAR 0 2
25118: PUSH
25119: LD_INT 5
25121: ST_TO_ADDR
25122: GO 25134
// k := tmp ;
25124: LD_ADDR_VAR 0 2
25128: PUSH
25129: LD_VAR 0 3
25133: ST_TO_ADDR
// for i := 1 to k do
25134: LD_ADDR_VAR 0 1
25138: PUSH
25139: DOUBLE
25140: LD_INT 1
25142: DEC
25143: ST_TO_ADDR
25144: LD_VAR 0 2
25148: PUSH
25149: FOR_TO
25150: IFFALSE 25249
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25152: LD_VAR 0 3
25156: PUSH
25157: LD_VAR 0 1
25161: ARRAY
25162: PPUSH
25163: LD_VAR 0 1
25167: PUSH
25168: LD_INT 4
25170: MOD
25171: PUSH
25172: LD_INT 1
25174: PLUS
25175: PPUSH
25176: CALL_OW 259
25180: PUSH
25181: LD_INT 10
25183: LESS
25184: IFFALSE 25247
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25186: LD_VAR 0 3
25190: PUSH
25191: LD_VAR 0 1
25195: ARRAY
25196: PPUSH
25197: LD_VAR 0 1
25201: PUSH
25202: LD_INT 4
25204: MOD
25205: PUSH
25206: LD_INT 1
25208: PLUS
25209: PPUSH
25210: LD_VAR 0 3
25214: PUSH
25215: LD_VAR 0 1
25219: ARRAY
25220: PPUSH
25221: LD_VAR 0 1
25225: PUSH
25226: LD_INT 4
25228: MOD
25229: PUSH
25230: LD_INT 1
25232: PLUS
25233: PPUSH
25234: CALL_OW 259
25238: PUSH
25239: LD_INT 1
25241: PLUS
25242: PPUSH
25243: CALL_OW 237
25247: GO 25149
25249: POP
25250: POP
// end ;
25251: PPOPN 3
25253: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25254: LD_EXP 67
25258: PUSH
25259: LD_EXP 75
25263: AND
25264: IFFALSE 25284
25266: GO 25268
25268: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25269: LD_INT 4
25271: PPUSH
25272: LD_OWVAR 2
25276: PPUSH
25277: LD_INT 0
25279: PPUSH
25280: CALL_OW 324
25284: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25285: LD_EXP 67
25289: PUSH
25290: LD_EXP 104
25294: AND
25295: IFFALSE 25315
25297: GO 25299
25299: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25300: LD_INT 19
25302: PPUSH
25303: LD_OWVAR 2
25307: PPUSH
25308: LD_INT 0
25310: PPUSH
25311: CALL_OW 324
25315: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25316: LD_EXP 67
25320: PUSH
25321: LD_EXP 76
25325: AND
25326: IFFALSE 25428
25328: GO 25330
25330: DISABLE
25331: LD_INT 0
25333: PPUSH
25334: PPUSH
// begin enable ;
25335: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25336: LD_ADDR_VAR 0 2
25340: PUSH
25341: LD_INT 22
25343: PUSH
25344: LD_OWVAR 2
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 2
25355: PUSH
25356: LD_INT 34
25358: PUSH
25359: LD_INT 11
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 34
25368: PUSH
25369: LD_INT 30
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PPUSH
25385: CALL_OW 69
25389: ST_TO_ADDR
// if not tmp then
25390: LD_VAR 0 2
25394: NOT
25395: IFFALSE 25399
// exit ;
25397: GO 25428
// for i in tmp do
25399: LD_ADDR_VAR 0 1
25403: PUSH
25404: LD_VAR 0 2
25408: PUSH
25409: FOR_IN
25410: IFFALSE 25426
// begin SetLives ( i , 0 ) ;
25412: LD_VAR 0 1
25416: PPUSH
25417: LD_INT 0
25419: PPUSH
25420: CALL_OW 234
// end ;
25424: GO 25409
25426: POP
25427: POP
// end ;
25428: PPOPN 2
25430: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25431: LD_EXP 67
25435: PUSH
25436: LD_EXP 77
25440: AND
25441: IFFALSE 25461
25443: GO 25445
25445: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25446: LD_INT 32
25448: PPUSH
25449: LD_OWVAR 2
25453: PPUSH
25454: LD_INT 0
25456: PPUSH
25457: CALL_OW 324
25461: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25462: LD_EXP 67
25466: PUSH
25467: LD_EXP 78
25471: AND
25472: IFFALSE 25653
25474: GO 25476
25476: DISABLE
25477: LD_INT 0
25479: PPUSH
25480: PPUSH
25481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25482: LD_ADDR_VAR 0 2
25486: PUSH
25487: LD_INT 22
25489: PUSH
25490: LD_OWVAR 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 33
25501: PUSH
25502: LD_INT 3
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PPUSH
25513: CALL_OW 69
25517: ST_TO_ADDR
// if not tmp then
25518: LD_VAR 0 2
25522: NOT
25523: IFFALSE 25527
// exit ;
25525: GO 25653
// side := 0 ;
25527: LD_ADDR_VAR 0 3
25531: PUSH
25532: LD_INT 0
25534: ST_TO_ADDR
// for i := 1 to 8 do
25535: LD_ADDR_VAR 0 1
25539: PUSH
25540: DOUBLE
25541: LD_INT 1
25543: DEC
25544: ST_TO_ADDR
25545: LD_INT 8
25547: PUSH
25548: FOR_TO
25549: IFFALSE 25597
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25551: LD_OWVAR 2
25555: PUSH
25556: LD_VAR 0 1
25560: NONEQUAL
25561: PUSH
25562: LD_OWVAR 2
25566: PPUSH
25567: LD_VAR 0 1
25571: PPUSH
25572: CALL_OW 81
25576: PUSH
25577: LD_INT 2
25579: EQUAL
25580: AND
25581: IFFALSE 25595
// begin side := i ;
25583: LD_ADDR_VAR 0 3
25587: PUSH
25588: LD_VAR 0 1
25592: ST_TO_ADDR
// break ;
25593: GO 25597
// end ;
25595: GO 25548
25597: POP
25598: POP
// if not side then
25599: LD_VAR 0 3
25603: NOT
25604: IFFALSE 25608
// exit ;
25606: GO 25653
// for i := 1 to tmp do
25608: LD_ADDR_VAR 0 1
25612: PUSH
25613: DOUBLE
25614: LD_INT 1
25616: DEC
25617: ST_TO_ADDR
25618: LD_VAR 0 2
25622: PUSH
25623: FOR_TO
25624: IFFALSE 25651
// if Prob ( 60 ) then
25626: LD_INT 60
25628: PPUSH
25629: CALL_OW 13
25633: IFFALSE 25649
// SetSide ( i , side ) ;
25635: LD_VAR 0 1
25639: PPUSH
25640: LD_VAR 0 3
25644: PPUSH
25645: CALL_OW 235
25649: GO 25623
25651: POP
25652: POP
// end ;
25653: PPOPN 3
25655: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25656: LD_EXP 67
25660: PUSH
25661: LD_EXP 80
25665: AND
25666: IFFALSE 25785
25668: GO 25670
25670: DISABLE
25671: LD_INT 0
25673: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: LD_INT 22
25681: PUSH
25682: LD_OWVAR 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 21
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 3
25703: PUSH
25704: LD_INT 23
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: LIST
25722: PPUSH
25723: CALL_OW 69
25727: PUSH
25728: FOR_IN
25729: IFFALSE 25783
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25731: LD_VAR 0 1
25735: PPUSH
25736: CALL_OW 257
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: LD_INT 3
25749: PUSH
25750: LD_INT 4
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: IN
25759: IFFALSE 25781
// SetClass ( un , rand ( 1 , 4 ) ) ;
25761: LD_VAR 0 1
25765: PPUSH
25766: LD_INT 1
25768: PPUSH
25769: LD_INT 4
25771: PPUSH
25772: CALL_OW 12
25776: PPUSH
25777: CALL_OW 336
25781: GO 25728
25783: POP
25784: POP
// end ;
25785: PPOPN 1
25787: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25788: LD_EXP 67
25792: PUSH
25793: LD_EXP 79
25797: AND
25798: IFFALSE 25877
25800: GO 25802
25802: DISABLE
25803: LD_INT 0
25805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25806: LD_ADDR_VAR 0 1
25810: PUSH
25811: LD_INT 22
25813: PUSH
25814: LD_OWVAR 2
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 21
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PPUSH
25837: CALL_OW 69
25841: ST_TO_ADDR
// if not tmp then
25842: LD_VAR 0 1
25846: NOT
25847: IFFALSE 25851
// exit ;
25849: GO 25877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25851: LD_VAR 0 1
25855: PUSH
25856: LD_INT 1
25858: PPUSH
25859: LD_VAR 0 1
25863: PPUSH
25864: CALL_OW 12
25868: ARRAY
25869: PPUSH
25870: LD_INT 100
25872: PPUSH
25873: CALL_OW 234
// end ;
25877: PPOPN 1
25879: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25880: LD_EXP 67
25884: PUSH
25885: LD_EXP 81
25889: AND
25890: IFFALSE 25988
25892: GO 25894
25894: DISABLE
25895: LD_INT 0
25897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25898: LD_ADDR_VAR 0 1
25902: PUSH
25903: LD_INT 22
25905: PUSH
25906: LD_OWVAR 2
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 21
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PPUSH
25929: CALL_OW 69
25933: ST_TO_ADDR
// if not tmp then
25934: LD_VAR 0 1
25938: NOT
25939: IFFALSE 25943
// exit ;
25941: GO 25988
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25943: LD_VAR 0 1
25947: PUSH
25948: LD_INT 1
25950: PPUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 12
25960: ARRAY
25961: PPUSH
25962: LD_INT 1
25964: PPUSH
25965: LD_INT 4
25967: PPUSH
25968: CALL_OW 12
25972: PPUSH
25973: LD_INT 3000
25975: PPUSH
25976: LD_INT 9000
25978: PPUSH
25979: CALL_OW 12
25983: PPUSH
25984: CALL_OW 492
// end ;
25988: PPOPN 1
25990: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25991: LD_EXP 67
25995: PUSH
25996: LD_EXP 82
26000: AND
26001: IFFALSE 26021
26003: GO 26005
26005: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26006: LD_INT 1
26008: PPUSH
26009: LD_OWVAR 2
26013: PPUSH
26014: LD_INT 0
26016: PPUSH
26017: CALL_OW 324
26021: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26022: LD_EXP 67
26026: PUSH
26027: LD_EXP 83
26031: AND
26032: IFFALSE 26115
26034: GO 26036
26036: DISABLE
26037: LD_INT 0
26039: PPUSH
26040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26041: LD_ADDR_VAR 0 2
26045: PUSH
26046: LD_INT 22
26048: PUSH
26049: LD_OWVAR 2
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 21
26060: PUSH
26061: LD_INT 3
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PPUSH
26072: CALL_OW 69
26076: ST_TO_ADDR
// if not tmp then
26077: LD_VAR 0 2
26081: NOT
26082: IFFALSE 26086
// exit ;
26084: GO 26115
// for i in tmp do
26086: LD_ADDR_VAR 0 1
26090: PUSH
26091: LD_VAR 0 2
26095: PUSH
26096: FOR_IN
26097: IFFALSE 26113
// SetBLevel ( i , 10 ) ;
26099: LD_VAR 0 1
26103: PPUSH
26104: LD_INT 10
26106: PPUSH
26107: CALL_OW 241
26111: GO 26096
26113: POP
26114: POP
// end ;
26115: PPOPN 2
26117: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26118: LD_EXP 67
26122: PUSH
26123: LD_EXP 84
26127: AND
26128: IFFALSE 26239
26130: GO 26132
26132: DISABLE
26133: LD_INT 0
26135: PPUSH
26136: PPUSH
26137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26138: LD_ADDR_VAR 0 3
26142: PUSH
26143: LD_INT 22
26145: PUSH
26146: LD_OWVAR 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 25
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 69
26173: ST_TO_ADDR
// if not tmp then
26174: LD_VAR 0 3
26178: NOT
26179: IFFALSE 26183
// exit ;
26181: GO 26239
// un := tmp [ rand ( 1 , tmp ) ] ;
26183: LD_ADDR_VAR 0 2
26187: PUSH
26188: LD_VAR 0 3
26192: PUSH
26193: LD_INT 1
26195: PPUSH
26196: LD_VAR 0 3
26200: PPUSH
26201: CALL_OW 12
26205: ARRAY
26206: ST_TO_ADDR
// if Crawls ( un ) then
26207: LD_VAR 0 2
26211: PPUSH
26212: CALL_OW 318
26216: IFFALSE 26227
// ComWalk ( un ) ;
26218: LD_VAR 0 2
26222: PPUSH
26223: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26227: LD_VAR 0 2
26231: PPUSH
26232: LD_INT 5
26234: PPUSH
26235: CALL_OW 336
// end ;
26239: PPOPN 3
26241: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26242: LD_EXP 67
26246: PUSH
26247: LD_EXP 85
26251: AND
26252: PUSH
26253: LD_OWVAR 67
26257: PUSH
26258: LD_INT 4
26260: LESS
26261: AND
26262: IFFALSE 26281
26264: GO 26266
26266: DISABLE
// begin Difficulty := Difficulty + 1 ;
26267: LD_ADDR_OWVAR 67
26271: PUSH
26272: LD_OWVAR 67
26276: PUSH
26277: LD_INT 1
26279: PLUS
26280: ST_TO_ADDR
// end ;
26281: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26282: LD_EXP 67
26286: PUSH
26287: LD_EXP 86
26291: AND
26292: IFFALSE 26395
26294: GO 26296
26296: DISABLE
26297: LD_INT 0
26299: PPUSH
// begin for i := 1 to 5 do
26300: LD_ADDR_VAR 0 1
26304: PUSH
26305: DOUBLE
26306: LD_INT 1
26308: DEC
26309: ST_TO_ADDR
26310: LD_INT 5
26312: PUSH
26313: FOR_TO
26314: IFFALSE 26393
// begin uc_nation := nation_nature ;
26316: LD_ADDR_OWVAR 21
26320: PUSH
26321: LD_INT 0
26323: ST_TO_ADDR
// uc_side := 0 ;
26324: LD_ADDR_OWVAR 20
26328: PUSH
26329: LD_INT 0
26331: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26332: LD_ADDR_OWVAR 29
26336: PUSH
26337: LD_INT 12
26339: PUSH
26340: LD_INT 12
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: ST_TO_ADDR
// hc_agressivity := 20 ;
26347: LD_ADDR_OWVAR 35
26351: PUSH
26352: LD_INT 20
26354: ST_TO_ADDR
// hc_class := class_tiger ;
26355: LD_ADDR_OWVAR 28
26359: PUSH
26360: LD_INT 14
26362: ST_TO_ADDR
// hc_gallery :=  ;
26363: LD_ADDR_OWVAR 33
26367: PUSH
26368: LD_STRING 
26370: ST_TO_ADDR
// hc_name :=  ;
26371: LD_ADDR_OWVAR 26
26375: PUSH
26376: LD_STRING 
26378: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26379: CALL_OW 44
26383: PPUSH
26384: LD_INT 0
26386: PPUSH
26387: CALL_OW 51
// end ;
26391: GO 26313
26393: POP
26394: POP
// end ;
26395: PPOPN 1
26397: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26398: LD_EXP 67
26402: PUSH
26403: LD_EXP 87
26407: AND
26408: IFFALSE 26417
26410: GO 26412
26412: DISABLE
// StreamSibBomb ;
26413: CALL 26418 0 0
26417: END
// export function StreamSibBomb ; var i , x , y ; begin
26418: LD_INT 0
26420: PPUSH
26421: PPUSH
26422: PPUSH
26423: PPUSH
// result := false ;
26424: LD_ADDR_VAR 0 1
26428: PUSH
26429: LD_INT 0
26431: ST_TO_ADDR
// for i := 1 to 16 do
26432: LD_ADDR_VAR 0 2
26436: PUSH
26437: DOUBLE
26438: LD_INT 1
26440: DEC
26441: ST_TO_ADDR
26442: LD_INT 16
26444: PUSH
26445: FOR_TO
26446: IFFALSE 26645
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26448: LD_ADDR_VAR 0 3
26452: PUSH
26453: LD_INT 10
26455: PUSH
26456: LD_INT 20
26458: PUSH
26459: LD_INT 30
26461: PUSH
26462: LD_INT 40
26464: PUSH
26465: LD_INT 50
26467: PUSH
26468: LD_INT 60
26470: PUSH
26471: LD_INT 70
26473: PUSH
26474: LD_INT 80
26476: PUSH
26477: LD_INT 90
26479: PUSH
26480: LD_INT 100
26482: PUSH
26483: LD_INT 110
26485: PUSH
26486: LD_INT 120
26488: PUSH
26489: LD_INT 130
26491: PUSH
26492: LD_INT 140
26494: PUSH
26495: LD_INT 150
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: PPUSH
26518: LD_INT 15
26520: PPUSH
26521: CALL_OW 12
26525: ARRAY
26526: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26527: LD_ADDR_VAR 0 4
26531: PUSH
26532: LD_INT 10
26534: PUSH
26535: LD_INT 20
26537: PUSH
26538: LD_INT 30
26540: PUSH
26541: LD_INT 40
26543: PUSH
26544: LD_INT 50
26546: PUSH
26547: LD_INT 60
26549: PUSH
26550: LD_INT 70
26552: PUSH
26553: LD_INT 80
26555: PUSH
26556: LD_INT 90
26558: PUSH
26559: LD_INT 100
26561: PUSH
26562: LD_INT 110
26564: PUSH
26565: LD_INT 120
26567: PUSH
26568: LD_INT 130
26570: PUSH
26571: LD_INT 140
26573: PUSH
26574: LD_INT 150
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: PPUSH
26597: LD_INT 15
26599: PPUSH
26600: CALL_OW 12
26604: ARRAY
26605: ST_TO_ADDR
// if ValidHex ( x , y ) then
26606: LD_VAR 0 3
26610: PPUSH
26611: LD_VAR 0 4
26615: PPUSH
26616: CALL_OW 488
26620: IFFALSE 26643
// begin result := [ x , y ] ;
26622: LD_ADDR_VAR 0 1
26626: PUSH
26627: LD_VAR 0 3
26631: PUSH
26632: LD_VAR 0 4
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: ST_TO_ADDR
// break ;
26641: GO 26645
// end ; end ;
26643: GO 26445
26645: POP
26646: POP
// if result then
26647: LD_VAR 0 1
26651: IFFALSE 26711
// begin ToLua ( playSibBomb() ) ;
26653: LD_STRING playSibBomb()
26655: PPUSH
26656: CALL_OW 559
// wait ( 0 0$14 ) ;
26660: LD_INT 490
26662: PPUSH
26663: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26667: LD_VAR 0 1
26671: PUSH
26672: LD_INT 1
26674: ARRAY
26675: PPUSH
26676: LD_VAR 0 1
26680: PUSH
26681: LD_INT 2
26683: ARRAY
26684: PPUSH
26685: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26689: LD_VAR 0 1
26693: PUSH
26694: LD_INT 1
26696: ARRAY
26697: PPUSH
26698: LD_VAR 0 1
26702: PUSH
26703: LD_INT 2
26705: ARRAY
26706: PPUSH
26707: CALL_OW 429
// end ; end ;
26711: LD_VAR 0 1
26715: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26716: LD_EXP 67
26720: PUSH
26721: LD_EXP 89
26725: AND
26726: IFFALSE 26738
26728: GO 26730
26730: DISABLE
// YouLost (  ) ;
26731: LD_STRING 
26733: PPUSH
26734: CALL_OW 104
26738: END
// every 0 0$1 trigger StreamModeActive and sFog do
26739: LD_EXP 67
26743: PUSH
26744: LD_EXP 88
26748: AND
26749: IFFALSE 26763
26751: GO 26753
26753: DISABLE
// FogOff ( your_side ) ;
26754: LD_OWVAR 2
26758: PPUSH
26759: CALL_OW 344
26763: END
// every 0 0$1 trigger StreamModeActive and sSun do
26764: LD_EXP 67
26768: PUSH
26769: LD_EXP 90
26773: AND
26774: IFFALSE 26802
26776: GO 26778
26778: DISABLE
// begin solar_recharge_percent := 0 ;
26779: LD_ADDR_OWVAR 79
26783: PUSH
26784: LD_INT 0
26786: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26787: LD_INT 10500
26789: PPUSH
26790: CALL_OW 67
// solar_recharge_percent := 100 ;
26794: LD_ADDR_OWVAR 79
26798: PUSH
26799: LD_INT 100
26801: ST_TO_ADDR
// end ;
26802: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26803: LD_EXP 67
26807: PUSH
26808: LD_EXP 91
26812: AND
26813: IFFALSE 27052
26815: GO 26817
26817: DISABLE
26818: LD_INT 0
26820: PPUSH
26821: PPUSH
26822: PPUSH
// begin tmp := [ ] ;
26823: LD_ADDR_VAR 0 3
26827: PUSH
26828: EMPTY
26829: ST_TO_ADDR
// for i := 1 to 6 do
26830: LD_ADDR_VAR 0 1
26834: PUSH
26835: DOUBLE
26836: LD_INT 1
26838: DEC
26839: ST_TO_ADDR
26840: LD_INT 6
26842: PUSH
26843: FOR_TO
26844: IFFALSE 26949
// begin uc_nation := nation_nature ;
26846: LD_ADDR_OWVAR 21
26850: PUSH
26851: LD_INT 0
26853: ST_TO_ADDR
// uc_side := 0 ;
26854: LD_ADDR_OWVAR 20
26858: PUSH
26859: LD_INT 0
26861: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26862: LD_ADDR_OWVAR 29
26866: PUSH
26867: LD_INT 12
26869: PUSH
26870: LD_INT 12
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: ST_TO_ADDR
// hc_agressivity := 20 ;
26877: LD_ADDR_OWVAR 35
26881: PUSH
26882: LD_INT 20
26884: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26885: LD_ADDR_OWVAR 28
26889: PUSH
26890: LD_INT 17
26892: ST_TO_ADDR
// hc_gallery :=  ;
26893: LD_ADDR_OWVAR 33
26897: PUSH
26898: LD_STRING 
26900: ST_TO_ADDR
// hc_name :=  ;
26901: LD_ADDR_OWVAR 26
26905: PUSH
26906: LD_STRING 
26908: ST_TO_ADDR
// un := CreateHuman ;
26909: LD_ADDR_VAR 0 2
26913: PUSH
26914: CALL_OW 44
26918: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26919: LD_VAR 0 2
26923: PPUSH
26924: LD_INT 1
26926: PPUSH
26927: CALL_OW 51
// tmp := tmp ^ un ;
26931: LD_ADDR_VAR 0 3
26935: PUSH
26936: LD_VAR 0 3
26940: PUSH
26941: LD_VAR 0 2
26945: ADD
26946: ST_TO_ADDR
// end ;
26947: GO 26843
26949: POP
26950: POP
// repeat wait ( 0 0$1 ) ;
26951: LD_INT 35
26953: PPUSH
26954: CALL_OW 67
// for un in tmp do
26958: LD_ADDR_VAR 0 2
26962: PUSH
26963: LD_VAR 0 3
26967: PUSH
26968: FOR_IN
26969: IFFALSE 27043
// begin if IsDead ( un ) then
26971: LD_VAR 0 2
26975: PPUSH
26976: CALL_OW 301
26980: IFFALSE 27000
// begin tmp := tmp diff un ;
26982: LD_ADDR_VAR 0 3
26986: PUSH
26987: LD_VAR 0 3
26991: PUSH
26992: LD_VAR 0 2
26996: DIFF
26997: ST_TO_ADDR
// continue ;
26998: GO 26968
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27000: LD_VAR 0 2
27004: PPUSH
27005: LD_INT 3
27007: PUSH
27008: LD_INT 22
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PPUSH
27022: CALL_OW 69
27026: PPUSH
27027: LD_VAR 0 2
27031: PPUSH
27032: CALL_OW 74
27036: PPUSH
27037: CALL_OW 115
// end ;
27041: GO 26968
27043: POP
27044: POP
// until not tmp ;
27045: LD_VAR 0 3
27049: NOT
27050: IFFALSE 26951
// end ;
27052: PPOPN 3
27054: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27055: LD_EXP 67
27059: PUSH
27060: LD_EXP 92
27064: AND
27065: IFFALSE 27119
27067: GO 27069
27069: DISABLE
// begin ToLua ( displayTroll(); ) ;
27070: LD_STRING displayTroll();
27072: PPUSH
27073: CALL_OW 559
// wait ( 3 3$00 ) ;
27077: LD_INT 6300
27079: PPUSH
27080: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27084: LD_STRING hideTroll();
27086: PPUSH
27087: CALL_OW 559
// wait ( 1 1$00 ) ;
27091: LD_INT 2100
27093: PPUSH
27094: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27098: LD_STRING displayTroll();
27100: PPUSH
27101: CALL_OW 559
// wait ( 1 1$00 ) ;
27105: LD_INT 2100
27107: PPUSH
27108: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27112: LD_STRING hideTroll();
27114: PPUSH
27115: CALL_OW 559
// end ;
27119: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27120: LD_EXP 67
27124: PUSH
27125: LD_EXP 93
27129: AND
27130: IFFALSE 27193
27132: GO 27134
27134: DISABLE
27135: LD_INT 0
27137: PPUSH
// begin p := 0 ;
27138: LD_ADDR_VAR 0 1
27142: PUSH
27143: LD_INT 0
27145: ST_TO_ADDR
// repeat game_speed := 1 ;
27146: LD_ADDR_OWVAR 65
27150: PUSH
27151: LD_INT 1
27153: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27154: LD_INT 35
27156: PPUSH
27157: CALL_OW 67
// p := p + 1 ;
27161: LD_ADDR_VAR 0 1
27165: PUSH
27166: LD_VAR 0 1
27170: PUSH
27171: LD_INT 1
27173: PLUS
27174: ST_TO_ADDR
// until p >= 60 ;
27175: LD_VAR 0 1
27179: PUSH
27180: LD_INT 60
27182: GREATEREQUAL
27183: IFFALSE 27146
// game_speed := 4 ;
27185: LD_ADDR_OWVAR 65
27189: PUSH
27190: LD_INT 4
27192: ST_TO_ADDR
// end ;
27193: PPOPN 1
27195: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27196: LD_EXP 67
27200: PUSH
27201: LD_EXP 94
27205: AND
27206: IFFALSE 27352
27208: GO 27210
27210: DISABLE
27211: LD_INT 0
27213: PPUSH
27214: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27215: LD_ADDR_VAR 0 1
27219: PUSH
27220: LD_INT 22
27222: PUSH
27223: LD_OWVAR 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: LD_INT 30
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 30
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PPUSH
27264: CALL_OW 69
27268: ST_TO_ADDR
// if not depot then
27269: LD_VAR 0 1
27273: NOT
27274: IFFALSE 27278
// exit ;
27276: GO 27352
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27278: LD_ADDR_VAR 0 2
27282: PUSH
27283: LD_VAR 0 1
27287: PUSH
27288: LD_INT 1
27290: PPUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 12
27300: ARRAY
27301: PPUSH
27302: CALL_OW 274
27306: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27307: LD_VAR 0 2
27311: PPUSH
27312: LD_INT 1
27314: PPUSH
27315: LD_INT 0
27317: PPUSH
27318: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27322: LD_VAR 0 2
27326: PPUSH
27327: LD_INT 2
27329: PPUSH
27330: LD_INT 0
27332: PPUSH
27333: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27337: LD_VAR 0 2
27341: PPUSH
27342: LD_INT 3
27344: PPUSH
27345: LD_INT 0
27347: PPUSH
27348: CALL_OW 277
// end ;
27352: PPOPN 2
27354: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27355: LD_EXP 67
27359: PUSH
27360: LD_EXP 95
27364: AND
27365: IFFALSE 27462
27367: GO 27369
27369: DISABLE
27370: LD_INT 0
27372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27373: LD_ADDR_VAR 0 1
27377: PUSH
27378: LD_INT 22
27380: PUSH
27381: LD_OWVAR 2
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 21
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 3
27402: PUSH
27403: LD_INT 23
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: PPUSH
27422: CALL_OW 69
27426: ST_TO_ADDR
// if not tmp then
27427: LD_VAR 0 1
27431: NOT
27432: IFFALSE 27436
// exit ;
27434: GO 27462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27436: LD_VAR 0 1
27440: PUSH
27441: LD_INT 1
27443: PPUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: CALL_OW 12
27453: ARRAY
27454: PPUSH
27455: LD_INT 200
27457: PPUSH
27458: CALL_OW 234
// end ;
27462: PPOPN 1
27464: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27465: LD_EXP 67
27469: PUSH
27470: LD_EXP 96
27474: AND
27475: IFFALSE 27554
27477: GO 27479
27479: DISABLE
27480: LD_INT 0
27482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27483: LD_ADDR_VAR 0 1
27487: PUSH
27488: LD_INT 22
27490: PUSH
27491: LD_OWVAR 2
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 21
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PPUSH
27514: CALL_OW 69
27518: ST_TO_ADDR
// if not tmp then
27519: LD_VAR 0 1
27523: NOT
27524: IFFALSE 27528
// exit ;
27526: GO 27554
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27528: LD_VAR 0 1
27532: PUSH
27533: LD_INT 1
27535: PPUSH
27536: LD_VAR 0 1
27540: PPUSH
27541: CALL_OW 12
27545: ARRAY
27546: PPUSH
27547: LD_INT 60
27549: PPUSH
27550: CALL_OW 234
// end ;
27554: PPOPN 1
27556: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27557: LD_EXP 67
27561: PUSH
27562: LD_EXP 97
27566: AND
27567: IFFALSE 27666
27569: GO 27571
27571: DISABLE
27572: LD_INT 0
27574: PPUSH
27575: PPUSH
// begin enable ;
27576: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27577: LD_ADDR_VAR 0 1
27581: PUSH
27582: LD_INT 22
27584: PUSH
27585: LD_OWVAR 2
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 61
27596: PUSH
27597: EMPTY
27598: LIST
27599: PUSH
27600: LD_INT 33
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: PPUSH
27615: CALL_OW 69
27619: ST_TO_ADDR
// if not tmp then
27620: LD_VAR 0 1
27624: NOT
27625: IFFALSE 27629
// exit ;
27627: GO 27666
// for i in tmp do
27629: LD_ADDR_VAR 0 2
27633: PUSH
27634: LD_VAR 0 1
27638: PUSH
27639: FOR_IN
27640: IFFALSE 27664
// if IsControledBy ( i ) then
27642: LD_VAR 0 2
27646: PPUSH
27647: CALL_OW 312
27651: IFFALSE 27662
// ComUnlink ( i ) ;
27653: LD_VAR 0 2
27657: PPUSH
27658: CALL_OW 136
27662: GO 27639
27664: POP
27665: POP
// end ;
27666: PPOPN 2
27668: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27669: LD_EXP 67
27673: PUSH
27674: LD_EXP 98
27678: AND
27679: IFFALSE 27819
27681: GO 27683
27683: DISABLE
27684: LD_INT 0
27686: PPUSH
27687: PPUSH
// begin ToLua ( displayPowell(); ) ;
27688: LD_STRING displayPowell();
27690: PPUSH
27691: CALL_OW 559
// uc_side := 0 ;
27695: LD_ADDR_OWVAR 20
27699: PUSH
27700: LD_INT 0
27702: ST_TO_ADDR
// uc_nation := 2 ;
27703: LD_ADDR_OWVAR 21
27707: PUSH
27708: LD_INT 2
27710: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27711: LD_ADDR_OWVAR 37
27715: PUSH
27716: LD_INT 14
27718: ST_TO_ADDR
// vc_engine := engine_siberite ;
27719: LD_ADDR_OWVAR 39
27723: PUSH
27724: LD_INT 3
27726: ST_TO_ADDR
// vc_control := control_apeman ;
27727: LD_ADDR_OWVAR 38
27731: PUSH
27732: LD_INT 5
27734: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27735: LD_ADDR_OWVAR 40
27739: PUSH
27740: LD_INT 29
27742: ST_TO_ADDR
// un := CreateVehicle ;
27743: LD_ADDR_VAR 0 2
27747: PUSH
27748: CALL_OW 45
27752: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27753: LD_VAR 0 2
27757: PPUSH
27758: LD_INT 1
27760: PPUSH
27761: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27765: LD_INT 35
27767: PPUSH
27768: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27772: LD_VAR 0 2
27776: PPUSH
27777: LD_INT 22
27779: PUSH
27780: LD_OWVAR 2
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PPUSH
27789: CALL_OW 69
27793: PPUSH
27794: LD_VAR 0 2
27798: PPUSH
27799: CALL_OW 74
27803: PPUSH
27804: CALL_OW 115
// until IsDead ( un ) ;
27808: LD_VAR 0 2
27812: PPUSH
27813: CALL_OW 301
27817: IFFALSE 27765
// end ;
27819: PPOPN 2
27821: END
// every 0 0$1 trigger StreamModeActive and sStu do
27822: LD_EXP 67
27826: PUSH
27827: LD_EXP 106
27831: AND
27832: IFFALSE 27848
27834: GO 27836
27836: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27837: LD_STRING displayStucuk();
27839: PPUSH
27840: CALL_OW 559
// ResetFog ;
27844: CALL_OW 335
// end ;
27848: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27849: LD_EXP 67
27853: PUSH
27854: LD_EXP 99
27858: AND
27859: IFFALSE 28000
27861: GO 27863
27863: DISABLE
27864: LD_INT 0
27866: PPUSH
27867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27868: LD_ADDR_VAR 0 2
27872: PUSH
27873: LD_INT 22
27875: PUSH
27876: LD_OWVAR 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 21
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PPUSH
27899: CALL_OW 69
27903: ST_TO_ADDR
// if not tmp then
27904: LD_VAR 0 2
27908: NOT
27909: IFFALSE 27913
// exit ;
27911: GO 28000
// un := tmp [ rand ( 1 , tmp ) ] ;
27913: LD_ADDR_VAR 0 1
27917: PUSH
27918: LD_VAR 0 2
27922: PUSH
27923: LD_INT 1
27925: PPUSH
27926: LD_VAR 0 2
27930: PPUSH
27931: CALL_OW 12
27935: ARRAY
27936: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27937: LD_VAR 0 1
27941: PPUSH
27942: LD_INT 0
27944: PPUSH
27945: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27949: LD_VAR 0 1
27953: PPUSH
27954: LD_OWVAR 3
27958: PUSH
27959: LD_VAR 0 1
27963: DIFF
27964: PPUSH
27965: LD_VAR 0 1
27969: PPUSH
27970: CALL_OW 74
27974: PPUSH
27975: CALL_OW 115
// wait ( 0 0$20 ) ;
27979: LD_INT 700
27981: PPUSH
27982: CALL_OW 67
// SetSide ( un , your_side ) ;
27986: LD_VAR 0 1
27990: PPUSH
27991: LD_OWVAR 2
27995: PPUSH
27996: CALL_OW 235
// end ;
28000: PPOPN 2
28002: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28003: LD_EXP 67
28007: PUSH
28008: LD_EXP 100
28012: AND
28013: IFFALSE 28119
28015: GO 28017
28017: DISABLE
28018: LD_INT 0
28020: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28021: LD_ADDR_VAR 0 1
28025: PUSH
28026: LD_INT 22
28028: PUSH
28029: LD_OWVAR 2
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: LD_INT 30
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 30
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PPUSH
28070: CALL_OW 69
28074: ST_TO_ADDR
// if not depot then
28075: LD_VAR 0 1
28079: NOT
28080: IFFALSE 28084
// exit ;
28082: GO 28119
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28084: LD_VAR 0 1
28088: PUSH
28089: LD_INT 1
28091: ARRAY
28092: PPUSH
28093: CALL_OW 250
28097: PPUSH
28098: LD_VAR 0 1
28102: PUSH
28103: LD_INT 1
28105: ARRAY
28106: PPUSH
28107: CALL_OW 251
28111: PPUSH
28112: LD_INT 70
28114: PPUSH
28115: CALL_OW 495
// end ;
28119: PPOPN 1
28121: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28122: LD_EXP 67
28126: PUSH
28127: LD_EXP 101
28131: AND
28132: IFFALSE 28343
28134: GO 28136
28136: DISABLE
28137: LD_INT 0
28139: PPUSH
28140: PPUSH
28141: PPUSH
28142: PPUSH
28143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28144: LD_ADDR_VAR 0 5
28148: PUSH
28149: LD_INT 22
28151: PUSH
28152: LD_OWVAR 2
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 21
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PPUSH
28175: CALL_OW 69
28179: ST_TO_ADDR
// if not tmp then
28180: LD_VAR 0 5
28184: NOT
28185: IFFALSE 28189
// exit ;
28187: GO 28343
// for i in tmp do
28189: LD_ADDR_VAR 0 1
28193: PUSH
28194: LD_VAR 0 5
28198: PUSH
28199: FOR_IN
28200: IFFALSE 28341
// begin d := rand ( 0 , 5 ) ;
28202: LD_ADDR_VAR 0 4
28206: PUSH
28207: LD_INT 0
28209: PPUSH
28210: LD_INT 5
28212: PPUSH
28213: CALL_OW 12
28217: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28218: LD_ADDR_VAR 0 2
28222: PUSH
28223: LD_VAR 0 1
28227: PPUSH
28228: CALL_OW 250
28232: PPUSH
28233: LD_VAR 0 4
28237: PPUSH
28238: LD_INT 3
28240: PPUSH
28241: LD_INT 12
28243: PPUSH
28244: CALL_OW 12
28248: PPUSH
28249: CALL_OW 272
28253: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28254: LD_ADDR_VAR 0 3
28258: PUSH
28259: LD_VAR 0 1
28263: PPUSH
28264: CALL_OW 251
28268: PPUSH
28269: LD_VAR 0 4
28273: PPUSH
28274: LD_INT 3
28276: PPUSH
28277: LD_INT 12
28279: PPUSH
28280: CALL_OW 12
28284: PPUSH
28285: CALL_OW 273
28289: ST_TO_ADDR
// if ValidHex ( x , y ) then
28290: LD_VAR 0 2
28294: PPUSH
28295: LD_VAR 0 3
28299: PPUSH
28300: CALL_OW 488
28304: IFFALSE 28339
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28306: LD_VAR 0 1
28310: PPUSH
28311: LD_VAR 0 2
28315: PPUSH
28316: LD_VAR 0 3
28320: PPUSH
28321: LD_INT 3
28323: PPUSH
28324: LD_INT 6
28326: PPUSH
28327: CALL_OW 12
28331: PPUSH
28332: LD_INT 1
28334: PPUSH
28335: CALL_OW 483
// end ;
28339: GO 28199
28341: POP
28342: POP
// end ;
28343: PPOPN 5
28345: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28346: LD_EXP 67
28350: PUSH
28351: LD_EXP 102
28355: AND
28356: IFFALSE 28450
28358: GO 28360
28360: DISABLE
28361: LD_INT 0
28363: PPUSH
28364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28365: LD_ADDR_VAR 0 2
28369: PUSH
28370: LD_INT 22
28372: PUSH
28373: LD_OWVAR 2
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 32
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 21
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: LIST
28406: PPUSH
28407: CALL_OW 69
28411: ST_TO_ADDR
// if not tmp then
28412: LD_VAR 0 2
28416: NOT
28417: IFFALSE 28421
// exit ;
28419: GO 28450
// for i in tmp do
28421: LD_ADDR_VAR 0 1
28425: PUSH
28426: LD_VAR 0 2
28430: PUSH
28431: FOR_IN
28432: IFFALSE 28448
// SetFuel ( i , 0 ) ;
28434: LD_VAR 0 1
28438: PPUSH
28439: LD_INT 0
28441: PPUSH
28442: CALL_OW 240
28446: GO 28431
28448: POP
28449: POP
// end ;
28450: PPOPN 2
28452: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28453: LD_EXP 67
28457: PUSH
28458: LD_EXP 103
28462: AND
28463: IFFALSE 28529
28465: GO 28467
28467: DISABLE
28468: LD_INT 0
28470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28471: LD_ADDR_VAR 0 1
28475: PUSH
28476: LD_INT 22
28478: PUSH
28479: LD_OWVAR 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 30
28490: PUSH
28491: LD_INT 29
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PPUSH
28502: CALL_OW 69
28506: ST_TO_ADDR
// if not tmp then
28507: LD_VAR 0 1
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28529
// DestroyUnit ( tmp [ 1 ] ) ;
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 1
28523: ARRAY
28524: PPUSH
28525: CALL_OW 65
// end ;
28529: PPOPN 1
28531: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28532: LD_EXP 67
28536: PUSH
28537: LD_EXP 105
28541: AND
28542: IFFALSE 28671
28544: GO 28546
28546: DISABLE
28547: LD_INT 0
28549: PPUSH
// begin uc_side := 0 ;
28550: LD_ADDR_OWVAR 20
28554: PUSH
28555: LD_INT 0
28557: ST_TO_ADDR
// uc_nation := nation_arabian ;
28558: LD_ADDR_OWVAR 21
28562: PUSH
28563: LD_INT 2
28565: ST_TO_ADDR
// hc_gallery :=  ;
28566: LD_ADDR_OWVAR 33
28570: PUSH
28571: LD_STRING 
28573: ST_TO_ADDR
// hc_name :=  ;
28574: LD_ADDR_OWVAR 26
28578: PUSH
28579: LD_STRING 
28581: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28582: LD_INT 1
28584: PPUSH
28585: LD_INT 11
28587: PPUSH
28588: LD_INT 10
28590: PPUSH
28591: CALL_OW 380
// un := CreateHuman ;
28595: LD_ADDR_VAR 0 1
28599: PUSH
28600: CALL_OW 44
28604: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28605: LD_VAR 0 1
28609: PPUSH
28610: LD_INT 1
28612: PPUSH
28613: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28617: LD_INT 35
28619: PPUSH
28620: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28624: LD_VAR 0 1
28628: PPUSH
28629: LD_INT 22
28631: PUSH
28632: LD_OWVAR 2
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: PPUSH
28646: LD_VAR 0 1
28650: PPUSH
28651: CALL_OW 74
28655: PPUSH
28656: CALL_OW 115
// until IsDead ( un ) ;
28660: LD_VAR 0 1
28664: PPUSH
28665: CALL_OW 301
28669: IFFALSE 28617
// end ;
28671: PPOPN 1
28673: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28674: LD_EXP 67
28678: PUSH
28679: LD_EXP 107
28683: AND
28684: IFFALSE 28696
28686: GO 28688
28688: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28689: LD_STRING earthquake(getX(game), 0, 32)
28691: PPUSH
28692: CALL_OW 559
28696: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28697: LD_EXP 67
28701: PUSH
28702: LD_EXP 108
28706: AND
28707: IFFALSE 28798
28709: GO 28711
28711: DISABLE
28712: LD_INT 0
28714: PPUSH
// begin enable ;
28715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28716: LD_ADDR_VAR 0 1
28720: PUSH
28721: LD_INT 22
28723: PUSH
28724: LD_OWVAR 2
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 21
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 33
28745: PUSH
28746: LD_INT 3
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: PPUSH
28758: CALL_OW 69
28762: ST_TO_ADDR
// if not tmp then
28763: LD_VAR 0 1
28767: NOT
28768: IFFALSE 28772
// exit ;
28770: GO 28798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28772: LD_VAR 0 1
28776: PUSH
28777: LD_INT 1
28779: PPUSH
28780: LD_VAR 0 1
28784: PPUSH
28785: CALL_OW 12
28789: ARRAY
28790: PPUSH
28791: LD_INT 1
28793: PPUSH
28794: CALL_OW 234
// end ;
28798: PPOPN 1
28800: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28801: LD_EXP 67
28805: PUSH
28806: LD_EXP 109
28810: AND
28811: IFFALSE 28952
28813: GO 28815
28815: DISABLE
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
28820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28821: LD_ADDR_VAR 0 3
28825: PUSH
28826: LD_INT 22
28828: PUSH
28829: LD_OWVAR 2
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 25
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 69
28856: ST_TO_ADDR
// if not tmp then
28857: LD_VAR 0 3
28861: NOT
28862: IFFALSE 28866
// exit ;
28864: GO 28952
// un := tmp [ rand ( 1 , tmp ) ] ;
28866: LD_ADDR_VAR 0 2
28870: PUSH
28871: LD_VAR 0 3
28875: PUSH
28876: LD_INT 1
28878: PPUSH
28879: LD_VAR 0 3
28883: PPUSH
28884: CALL_OW 12
28888: ARRAY
28889: ST_TO_ADDR
// if Crawls ( un ) then
28890: LD_VAR 0 2
28894: PPUSH
28895: CALL_OW 318
28899: IFFALSE 28910
// ComWalk ( un ) ;
28901: LD_VAR 0 2
28905: PPUSH
28906: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28910: LD_VAR 0 2
28914: PPUSH
28915: LD_INT 9
28917: PPUSH
28918: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28922: LD_INT 28
28924: PPUSH
28925: LD_OWVAR 2
28929: PPUSH
28930: LD_INT 2
28932: PPUSH
28933: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28937: LD_INT 29
28939: PPUSH
28940: LD_OWVAR 2
28944: PPUSH
28945: LD_INT 2
28947: PPUSH
28948: CALL_OW 322
// end ;
28952: PPOPN 3
28954: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28955: LD_EXP 67
28959: PUSH
28960: LD_EXP 110
28964: AND
28965: IFFALSE 29076
28967: GO 28969
28969: DISABLE
28970: LD_INT 0
28972: PPUSH
28973: PPUSH
28974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_OWVAR 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 25
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PPUSH
29006: CALL_OW 69
29010: ST_TO_ADDR
// if not tmp then
29011: LD_VAR 0 3
29015: NOT
29016: IFFALSE 29020
// exit ;
29018: GO 29076
// un := tmp [ rand ( 1 , tmp ) ] ;
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_VAR 0 3
29029: PUSH
29030: LD_INT 1
29032: PPUSH
29033: LD_VAR 0 3
29037: PPUSH
29038: CALL_OW 12
29042: ARRAY
29043: ST_TO_ADDR
// if Crawls ( un ) then
29044: LD_VAR 0 2
29048: PPUSH
29049: CALL_OW 318
29053: IFFALSE 29064
// ComWalk ( un ) ;
29055: LD_VAR 0 2
29059: PPUSH
29060: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29064: LD_VAR 0 2
29068: PPUSH
29069: LD_INT 8
29071: PPUSH
29072: CALL_OW 336
// end ;
29076: PPOPN 3
29078: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29079: LD_EXP 67
29083: PUSH
29084: LD_EXP 111
29088: AND
29089: IFFALSE 29233
29091: GO 29093
29093: DISABLE
29094: LD_INT 0
29096: PPUSH
29097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29098: LD_ADDR_VAR 0 2
29102: PUSH
29103: LD_INT 22
29105: PUSH
29106: LD_OWVAR 2
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 21
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 2
29127: PUSH
29128: LD_INT 34
29130: PUSH
29131: LD_INT 12
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 34
29140: PUSH
29141: LD_INT 51
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 34
29150: PUSH
29151: LD_INT 32
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: PPUSH
29169: CALL_OW 69
29173: ST_TO_ADDR
// if not tmp then
29174: LD_VAR 0 2
29178: NOT
29179: IFFALSE 29183
// exit ;
29181: GO 29233
// for i in tmp do
29183: LD_ADDR_VAR 0 1
29187: PUSH
29188: LD_VAR 0 2
29192: PUSH
29193: FOR_IN
29194: IFFALSE 29231
// if GetCargo ( i , mat_artifact ) = 0 then
29196: LD_VAR 0 1
29200: PPUSH
29201: LD_INT 4
29203: PPUSH
29204: CALL_OW 289
29208: PUSH
29209: LD_INT 0
29211: EQUAL
29212: IFFALSE 29229
// SetCargo ( i , mat_siberit , 100 ) ;
29214: LD_VAR 0 1
29218: PPUSH
29219: LD_INT 3
29221: PPUSH
29222: LD_INT 100
29224: PPUSH
29225: CALL_OW 290
29229: GO 29193
29231: POP
29232: POP
// end ;
29233: PPOPN 2
29235: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29236: LD_EXP 67
29240: PUSH
29241: LD_EXP 112
29245: AND
29246: IFFALSE 29429
29248: GO 29250
29250: DISABLE
29251: LD_INT 0
29253: PPUSH
29254: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29255: LD_ADDR_VAR 0 2
29259: PUSH
29260: LD_INT 22
29262: PUSH
29263: LD_OWVAR 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PPUSH
29272: CALL_OW 69
29276: ST_TO_ADDR
// if not tmp then
29277: LD_VAR 0 2
29281: NOT
29282: IFFALSE 29286
// exit ;
29284: GO 29429
// for i := 1 to 2 do
29286: LD_ADDR_VAR 0 1
29290: PUSH
29291: DOUBLE
29292: LD_INT 1
29294: DEC
29295: ST_TO_ADDR
29296: LD_INT 2
29298: PUSH
29299: FOR_TO
29300: IFFALSE 29427
// begin uc_side := your_side ;
29302: LD_ADDR_OWVAR 20
29306: PUSH
29307: LD_OWVAR 2
29311: ST_TO_ADDR
// uc_nation := nation_american ;
29312: LD_ADDR_OWVAR 21
29316: PUSH
29317: LD_INT 1
29319: ST_TO_ADDR
// vc_chassis := us_morphling ;
29320: LD_ADDR_OWVAR 37
29324: PUSH
29325: LD_INT 5
29327: ST_TO_ADDR
// vc_engine := engine_siberite ;
29328: LD_ADDR_OWVAR 39
29332: PUSH
29333: LD_INT 3
29335: ST_TO_ADDR
// vc_control := control_computer ;
29336: LD_ADDR_OWVAR 38
29340: PUSH
29341: LD_INT 3
29343: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29344: LD_ADDR_OWVAR 40
29348: PUSH
29349: LD_INT 10
29351: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29352: LD_VAR 0 2
29356: PUSH
29357: LD_INT 1
29359: ARRAY
29360: PPUSH
29361: CALL_OW 310
29365: NOT
29366: IFFALSE 29413
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29368: CALL_OW 45
29372: PPUSH
29373: LD_VAR 0 2
29377: PUSH
29378: LD_INT 1
29380: ARRAY
29381: PPUSH
29382: CALL_OW 250
29386: PPUSH
29387: LD_VAR 0 2
29391: PUSH
29392: LD_INT 1
29394: ARRAY
29395: PPUSH
29396: CALL_OW 251
29400: PPUSH
29401: LD_INT 12
29403: PPUSH
29404: LD_INT 1
29406: PPUSH
29407: CALL_OW 50
29411: GO 29425
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29413: CALL_OW 45
29417: PPUSH
29418: LD_INT 1
29420: PPUSH
29421: CALL_OW 51
// end ;
29425: GO 29299
29427: POP
29428: POP
// end ;
29429: PPOPN 2
29431: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29432: LD_EXP 67
29436: PUSH
29437: LD_EXP 113
29441: AND
29442: IFFALSE 29664
29444: GO 29446
29446: DISABLE
29447: LD_INT 0
29449: PPUSH
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29455: LD_ADDR_VAR 0 6
29459: PUSH
29460: LD_INT 22
29462: PUSH
29463: LD_OWVAR 2
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 21
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 3
29484: PUSH
29485: LD_INT 23
29487: PUSH
29488: LD_INT 0
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: PPUSH
29504: CALL_OW 69
29508: ST_TO_ADDR
// if not tmp then
29509: LD_VAR 0 6
29513: NOT
29514: IFFALSE 29518
// exit ;
29516: GO 29664
// s1 := rand ( 1 , 4 ) ;
29518: LD_ADDR_VAR 0 2
29522: PUSH
29523: LD_INT 1
29525: PPUSH
29526: LD_INT 4
29528: PPUSH
29529: CALL_OW 12
29533: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29534: LD_ADDR_VAR 0 4
29538: PUSH
29539: LD_VAR 0 6
29543: PUSH
29544: LD_INT 1
29546: ARRAY
29547: PPUSH
29548: LD_VAR 0 2
29552: PPUSH
29553: CALL_OW 259
29557: ST_TO_ADDR
// if s1 = 1 then
29558: LD_VAR 0 2
29562: PUSH
29563: LD_INT 1
29565: EQUAL
29566: IFFALSE 29586
// s2 := rand ( 2 , 4 ) else
29568: LD_ADDR_VAR 0 3
29572: PUSH
29573: LD_INT 2
29575: PPUSH
29576: LD_INT 4
29578: PPUSH
29579: CALL_OW 12
29583: ST_TO_ADDR
29584: GO 29594
// s2 := 1 ;
29586: LD_ADDR_VAR 0 3
29590: PUSH
29591: LD_INT 1
29593: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29594: LD_ADDR_VAR 0 5
29598: PUSH
29599: LD_VAR 0 6
29603: PUSH
29604: LD_INT 1
29606: ARRAY
29607: PPUSH
29608: LD_VAR 0 3
29612: PPUSH
29613: CALL_OW 259
29617: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29618: LD_VAR 0 6
29622: PUSH
29623: LD_INT 1
29625: ARRAY
29626: PPUSH
29627: LD_VAR 0 2
29631: PPUSH
29632: LD_VAR 0 5
29636: PPUSH
29637: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29641: LD_VAR 0 6
29645: PUSH
29646: LD_INT 1
29648: ARRAY
29649: PPUSH
29650: LD_VAR 0 3
29654: PPUSH
29655: LD_VAR 0 4
29659: PPUSH
29660: CALL_OW 237
// end ;
29664: PPOPN 6
29666: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29667: LD_EXP 67
29671: PUSH
29672: LD_EXP 114
29676: AND
29677: IFFALSE 29756
29679: GO 29681
29681: DISABLE
29682: LD_INT 0
29684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29685: LD_ADDR_VAR 0 1
29689: PUSH
29690: LD_INT 22
29692: PUSH
29693: LD_OWVAR 2
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 30
29704: PUSH
29705: LD_INT 3
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PPUSH
29716: CALL_OW 69
29720: ST_TO_ADDR
// if not tmp then
29721: LD_VAR 0 1
29725: NOT
29726: IFFALSE 29730
// exit ;
29728: GO 29756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29730: LD_VAR 0 1
29734: PUSH
29735: LD_INT 1
29737: PPUSH
29738: LD_VAR 0 1
29742: PPUSH
29743: CALL_OW 12
29747: ARRAY
29748: PPUSH
29749: LD_INT 1
29751: PPUSH
29752: CALL_OW 234
// end ;
29756: PPOPN 1
29758: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29759: LD_EXP 67
29763: PUSH
29764: LD_EXP 115
29768: AND
29769: IFFALSE 29881
29771: GO 29773
29773: DISABLE
29774: LD_INT 0
29776: PPUSH
29777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29778: LD_ADDR_VAR 0 2
29782: PUSH
29783: LD_INT 22
29785: PUSH
29786: LD_OWVAR 2
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 30
29800: PUSH
29801: LD_INT 27
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 30
29810: PUSH
29811: LD_INT 26
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 30
29820: PUSH
29821: LD_INT 28
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PPUSH
29838: CALL_OW 69
29842: ST_TO_ADDR
// if not tmp then
29843: LD_VAR 0 2
29847: NOT
29848: IFFALSE 29852
// exit ;
29850: GO 29881
// for i in tmp do
29852: LD_ADDR_VAR 0 1
29856: PUSH
29857: LD_VAR 0 2
29861: PUSH
29862: FOR_IN
29863: IFFALSE 29879
// SetLives ( i , 1 ) ;
29865: LD_VAR 0 1
29869: PPUSH
29870: LD_INT 1
29872: PPUSH
29873: CALL_OW 234
29877: GO 29862
29879: POP
29880: POP
// end ;
29881: PPOPN 2
29883: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29884: LD_EXP 67
29888: PUSH
29889: LD_EXP 116
29893: AND
29894: IFFALSE 30181
29896: GO 29898
29898: DISABLE
29899: LD_INT 0
29901: PPUSH
29902: PPUSH
29903: PPUSH
// begin i := rand ( 1 , 7 ) ;
29904: LD_ADDR_VAR 0 1
29908: PUSH
29909: LD_INT 1
29911: PPUSH
29912: LD_INT 7
29914: PPUSH
29915: CALL_OW 12
29919: ST_TO_ADDR
// case i of 1 :
29920: LD_VAR 0 1
29924: PUSH
29925: LD_INT 1
29927: DOUBLE
29928: EQUAL
29929: IFTRUE 29933
29931: GO 29943
29933: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29934: LD_STRING earthquake(getX(game), 0, 32)
29936: PPUSH
29937: CALL_OW 559
29941: GO 30181
29943: LD_INT 2
29945: DOUBLE
29946: EQUAL
29947: IFTRUE 29951
29949: GO 29965
29951: POP
// begin ToLua ( displayStucuk(); ) ;
29952: LD_STRING displayStucuk();
29954: PPUSH
29955: CALL_OW 559
// ResetFog ;
29959: CALL_OW 335
// end ; 3 :
29963: GO 30181
29965: LD_INT 3
29967: DOUBLE
29968: EQUAL
29969: IFTRUE 29973
29971: GO 30077
29973: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29974: LD_ADDR_VAR 0 2
29978: PUSH
29979: LD_INT 22
29981: PUSH
29982: LD_OWVAR 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 25
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PPUSH
30005: CALL_OW 69
30009: ST_TO_ADDR
// if not tmp then
30010: LD_VAR 0 2
30014: NOT
30015: IFFALSE 30019
// exit ;
30017: GO 30181
// un := tmp [ rand ( 1 , tmp ) ] ;
30019: LD_ADDR_VAR 0 3
30023: PUSH
30024: LD_VAR 0 2
30028: PUSH
30029: LD_INT 1
30031: PPUSH
30032: LD_VAR 0 2
30036: PPUSH
30037: CALL_OW 12
30041: ARRAY
30042: ST_TO_ADDR
// if Crawls ( un ) then
30043: LD_VAR 0 3
30047: PPUSH
30048: CALL_OW 318
30052: IFFALSE 30063
// ComWalk ( un ) ;
30054: LD_VAR 0 3
30058: PPUSH
30059: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30063: LD_VAR 0 3
30067: PPUSH
30068: LD_INT 8
30070: PPUSH
30071: CALL_OW 336
// end ; 4 :
30075: GO 30181
30077: LD_INT 4
30079: DOUBLE
30080: EQUAL
30081: IFTRUE 30085
30083: GO 30159
30085: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30086: LD_ADDR_VAR 0 2
30090: PUSH
30091: LD_INT 22
30093: PUSH
30094: LD_OWVAR 2
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 30
30105: PUSH
30106: LD_INT 29
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PPUSH
30117: CALL_OW 69
30121: ST_TO_ADDR
// if not tmp then
30122: LD_VAR 0 2
30126: NOT
30127: IFFALSE 30131
// exit ;
30129: GO 30181
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30131: LD_VAR 0 2
30135: PUSH
30136: LD_INT 1
30138: ARRAY
30139: PPUSH
30140: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30144: LD_VAR 0 2
30148: PUSH
30149: LD_INT 1
30151: ARRAY
30152: PPUSH
30153: CALL_OW 65
// end ; 5 .. 7 :
30157: GO 30181
30159: LD_INT 5
30161: DOUBLE
30162: GREATEREQUAL
30163: IFFALSE 30171
30165: LD_INT 7
30167: DOUBLE
30168: LESSEQUAL
30169: IFTRUE 30173
30171: GO 30180
30173: POP
// StreamSibBomb ; end ;
30174: CALL 26418 0 0
30178: GO 30181
30180: POP
// end ;
30181: PPOPN 3
30183: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30184: LD_EXP 67
30188: PUSH
30189: LD_EXP 117
30193: AND
30194: IFFALSE 30350
30196: GO 30198
30198: DISABLE
30199: LD_INT 0
30201: PPUSH
30202: PPUSH
30203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30204: LD_ADDR_VAR 0 2
30208: PUSH
30209: LD_INT 81
30211: PUSH
30212: LD_OWVAR 2
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: LD_INT 21
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 21
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PPUSH
30253: CALL_OW 69
30257: ST_TO_ADDR
// if not tmp then
30258: LD_VAR 0 2
30262: NOT
30263: IFFALSE 30267
// exit ;
30265: GO 30350
// p := 0 ;
30267: LD_ADDR_VAR 0 3
30271: PUSH
30272: LD_INT 0
30274: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30275: LD_INT 35
30277: PPUSH
30278: CALL_OW 67
// p := p + 1 ;
30282: LD_ADDR_VAR 0 3
30286: PUSH
30287: LD_VAR 0 3
30291: PUSH
30292: LD_INT 1
30294: PLUS
30295: ST_TO_ADDR
// for i in tmp do
30296: LD_ADDR_VAR 0 1
30300: PUSH
30301: LD_VAR 0 2
30305: PUSH
30306: FOR_IN
30307: IFFALSE 30338
// if GetLives ( i ) < 1000 then
30309: LD_VAR 0 1
30313: PPUSH
30314: CALL_OW 256
30318: PUSH
30319: LD_INT 1000
30321: LESS
30322: IFFALSE 30336
// SetLives ( i , 1000 ) ;
30324: LD_VAR 0 1
30328: PPUSH
30329: LD_INT 1000
30331: PPUSH
30332: CALL_OW 234
30336: GO 30306
30338: POP
30339: POP
// until p > 20 ;
30340: LD_VAR 0 3
30344: PUSH
30345: LD_INT 20
30347: GREATER
30348: IFFALSE 30275
// end ;
30350: PPOPN 3
30352: END
// every 0 0$1 trigger StreamModeActive and sTime do
30353: LD_EXP 67
30357: PUSH
30358: LD_EXP 118
30362: AND
30363: IFFALSE 30398
30365: GO 30367
30367: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30368: LD_INT 28
30370: PPUSH
30371: LD_OWVAR 2
30375: PPUSH
30376: LD_INT 2
30378: PPUSH
30379: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30383: LD_INT 30
30385: PPUSH
30386: LD_OWVAR 2
30390: PPUSH
30391: LD_INT 2
30393: PPUSH
30394: CALL_OW 322
// end ;
30398: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30399: LD_EXP 67
30403: PUSH
30404: LD_EXP 119
30408: AND
30409: IFFALSE 30530
30411: GO 30413
30413: DISABLE
30414: LD_INT 0
30416: PPUSH
30417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30418: LD_ADDR_VAR 0 2
30422: PUSH
30423: LD_INT 22
30425: PUSH
30426: LD_OWVAR 2
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 21
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: LD_INT 23
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: PPUSH
30467: CALL_OW 69
30471: ST_TO_ADDR
// if not tmp then
30472: LD_VAR 0 2
30476: NOT
30477: IFFALSE 30481
// exit ;
30479: GO 30530
// for i in tmp do
30481: LD_ADDR_VAR 0 1
30485: PUSH
30486: LD_VAR 0 2
30490: PUSH
30491: FOR_IN
30492: IFFALSE 30528
// begin if Crawls ( i ) then
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 318
30503: IFFALSE 30514
// ComWalk ( i ) ;
30505: LD_VAR 0 1
30509: PPUSH
30510: CALL_OW 138
// SetClass ( i , 2 ) ;
30514: LD_VAR 0 1
30518: PPUSH
30519: LD_INT 2
30521: PPUSH
30522: CALL_OW 336
// end ;
30526: GO 30491
30528: POP
30529: POP
// end ;
30530: PPOPN 2
30532: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30533: LD_EXP 67
30537: PUSH
30538: LD_EXP 120
30542: AND
30543: IFFALSE 30831
30545: GO 30547
30547: DISABLE
30548: LD_INT 0
30550: PPUSH
30551: PPUSH
30552: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30553: LD_OWVAR 2
30557: PPUSH
30558: LD_INT 9
30560: PPUSH
30561: LD_INT 1
30563: PPUSH
30564: LD_INT 1
30566: PPUSH
30567: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30571: LD_INT 9
30573: PPUSH
30574: LD_OWVAR 2
30578: PPUSH
30579: CALL_OW 343
// uc_side := 9 ;
30583: LD_ADDR_OWVAR 20
30587: PUSH
30588: LD_INT 9
30590: ST_TO_ADDR
// uc_nation := 2 ;
30591: LD_ADDR_OWVAR 21
30595: PUSH
30596: LD_INT 2
30598: ST_TO_ADDR
// hc_name := Dark Warrior ;
30599: LD_ADDR_OWVAR 26
30603: PUSH
30604: LD_STRING Dark Warrior
30606: ST_TO_ADDR
// hc_gallery :=  ;
30607: LD_ADDR_OWVAR 33
30611: PUSH
30612: LD_STRING 
30614: ST_TO_ADDR
// hc_noskilllimit := true ;
30615: LD_ADDR_OWVAR 76
30619: PUSH
30620: LD_INT 1
30622: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30623: LD_ADDR_OWVAR 31
30627: PUSH
30628: LD_INT 30
30630: PUSH
30631: LD_INT 30
30633: PUSH
30634: LD_INT 30
30636: PUSH
30637: LD_INT 30
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// un := CreateHuman ;
30646: LD_ADDR_VAR 0 3
30650: PUSH
30651: CALL_OW 44
30655: ST_TO_ADDR
// hc_noskilllimit := false ;
30656: LD_ADDR_OWVAR 76
30660: PUSH
30661: LD_INT 0
30663: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30664: LD_VAR 0 3
30668: PPUSH
30669: LD_INT 1
30671: PPUSH
30672: CALL_OW 51
// ToLua ( playRanger() ) ;
30676: LD_STRING playRanger()
30678: PPUSH
30679: CALL_OW 559
// p := 0 ;
30683: LD_ADDR_VAR 0 2
30687: PUSH
30688: LD_INT 0
30690: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30691: LD_INT 35
30693: PPUSH
30694: CALL_OW 67
// p := p + 1 ;
30698: LD_ADDR_VAR 0 2
30702: PUSH
30703: LD_VAR 0 2
30707: PUSH
30708: LD_INT 1
30710: PLUS
30711: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30712: LD_VAR 0 3
30716: PPUSH
30717: CALL_OW 256
30721: PUSH
30722: LD_INT 1000
30724: LESS
30725: IFFALSE 30739
// SetLives ( un , 1000 ) ;
30727: LD_VAR 0 3
30731: PPUSH
30732: LD_INT 1000
30734: PPUSH
30735: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30739: LD_VAR 0 3
30743: PPUSH
30744: LD_INT 81
30746: PUSH
30747: LD_OWVAR 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 91
30758: PUSH
30759: LD_VAR 0 3
30763: PUSH
30764: LD_INT 30
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PPUSH
30776: CALL_OW 69
30780: PPUSH
30781: LD_VAR 0 3
30785: PPUSH
30786: CALL_OW 74
30790: PPUSH
30791: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30795: LD_VAR 0 2
30799: PUSH
30800: LD_INT 80
30802: GREATER
30803: PUSH
30804: LD_VAR 0 3
30808: PPUSH
30809: CALL_OW 301
30813: OR
30814: IFFALSE 30691
// if un then
30816: LD_VAR 0 3
30820: IFFALSE 30831
// RemoveUnit ( un ) ;
30822: LD_VAR 0 3
30826: PPUSH
30827: CALL_OW 64
// end ;
30831: PPOPN 3
30833: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30834: LD_EXP 121
30838: IFFALSE 30954
30840: GO 30842
30842: DISABLE
30843: LD_INT 0
30845: PPUSH
30846: PPUSH
30847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30848: LD_ADDR_VAR 0 2
30852: PUSH
30853: LD_INT 81
30855: PUSH
30856: LD_OWVAR 2
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 21
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PPUSH
30879: CALL_OW 69
30883: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30884: LD_STRING playComputer()
30886: PPUSH
30887: CALL_OW 559
// if not tmp then
30891: LD_VAR 0 2
30895: NOT
30896: IFFALSE 30900
// exit ;
30898: GO 30954
// for i in tmp do
30900: LD_ADDR_VAR 0 1
30904: PUSH
30905: LD_VAR 0 2
30909: PUSH
30910: FOR_IN
30911: IFFALSE 30952
// for j := 1 to 4 do
30913: LD_ADDR_VAR 0 3
30917: PUSH
30918: DOUBLE
30919: LD_INT 1
30921: DEC
30922: ST_TO_ADDR
30923: LD_INT 4
30925: PUSH
30926: FOR_TO
30927: IFFALSE 30948
// SetSkill ( i , j , 10 ) ;
30929: LD_VAR 0 1
30933: PPUSH
30934: LD_VAR 0 3
30938: PPUSH
30939: LD_INT 10
30941: PPUSH
30942: CALL_OW 237
30946: GO 30926
30948: POP
30949: POP
30950: GO 30910
30952: POP
30953: POP
// end ;
30954: PPOPN 3
30956: END
// every 0 0$1 trigger s30 do var i , tmp ;
30957: LD_EXP 122
30961: IFFALSE 31030
30963: GO 30965
30965: DISABLE
30966: LD_INT 0
30968: PPUSH
30969: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30970: LD_ADDR_VAR 0 2
30974: PUSH
30975: LD_INT 22
30977: PUSH
30978: LD_OWVAR 2
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PPUSH
30987: CALL_OW 69
30991: ST_TO_ADDR
// if not tmp then
30992: LD_VAR 0 2
30996: NOT
30997: IFFALSE 31001
// exit ;
30999: GO 31030
// for i in tmp do
31001: LD_ADDR_VAR 0 1
31005: PUSH
31006: LD_VAR 0 2
31010: PUSH
31011: FOR_IN
31012: IFFALSE 31028
// SetLives ( i , 300 ) ;
31014: LD_VAR 0 1
31018: PPUSH
31019: LD_INT 300
31021: PPUSH
31022: CALL_OW 234
31026: GO 31011
31028: POP
31029: POP
// end ;
31030: PPOPN 2
31032: END
// every 0 0$1 trigger s60 do var i , tmp ;
31033: LD_EXP 123
31037: IFFALSE 31106
31039: GO 31041
31041: DISABLE
31042: LD_INT 0
31044: PPUSH
31045: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31046: LD_ADDR_VAR 0 2
31050: PUSH
31051: LD_INT 22
31053: PUSH
31054: LD_OWVAR 2
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PPUSH
31063: CALL_OW 69
31067: ST_TO_ADDR
// if not tmp then
31068: LD_VAR 0 2
31072: NOT
31073: IFFALSE 31077
// exit ;
31075: GO 31106
// for i in tmp do
31077: LD_ADDR_VAR 0 1
31081: PUSH
31082: LD_VAR 0 2
31086: PUSH
31087: FOR_IN
31088: IFFALSE 31104
// SetLives ( i , 600 ) ;
31090: LD_VAR 0 1
31094: PPUSH
31095: LD_INT 600
31097: PPUSH
31098: CALL_OW 234
31102: GO 31087
31104: POP
31105: POP
// end ;
31106: PPOPN 2
31108: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31109: LD_INT 0
31111: PPUSH
// case cmd of 301 :
31112: LD_VAR 0 1
31116: PUSH
31117: LD_INT 301
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31125
31123: GO 31157
31125: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31126: LD_VAR 0 6
31130: PPUSH
31131: LD_VAR 0 7
31135: PPUSH
31136: LD_VAR 0 8
31140: PPUSH
31141: LD_VAR 0 4
31145: PPUSH
31146: LD_VAR 0 5
31150: PPUSH
31151: CALL 32366 0 5
31155: GO 31278
31157: LD_INT 302
31159: DOUBLE
31160: EQUAL
31161: IFTRUE 31165
31163: GO 31202
31165: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31166: LD_VAR 0 6
31170: PPUSH
31171: LD_VAR 0 7
31175: PPUSH
31176: LD_VAR 0 8
31180: PPUSH
31181: LD_VAR 0 9
31185: PPUSH
31186: LD_VAR 0 4
31190: PPUSH
31191: LD_VAR 0 5
31195: PPUSH
31196: CALL 32457 0 6
31200: GO 31278
31202: LD_INT 303
31204: DOUBLE
31205: EQUAL
31206: IFTRUE 31210
31208: GO 31247
31210: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31211: LD_VAR 0 6
31215: PPUSH
31216: LD_VAR 0 7
31220: PPUSH
31221: LD_VAR 0 8
31225: PPUSH
31226: LD_VAR 0 9
31230: PPUSH
31231: LD_VAR 0 4
31235: PPUSH
31236: LD_VAR 0 5
31240: PPUSH
31241: CALL 31283 0 6
31245: GO 31278
31247: LD_INT 304
31249: DOUBLE
31250: EQUAL
31251: IFTRUE 31255
31253: GO 31277
31255: POP
// hHackTeleport ( unit , x , y ) ; end ;
31256: LD_VAR 0 2
31260: PPUSH
31261: LD_VAR 0 4
31265: PPUSH
31266: LD_VAR 0 5
31270: PPUSH
31271: CALL 33050 0 3
31275: GO 31278
31277: POP
// end ;
31278: LD_VAR 0 12
31282: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31283: LD_INT 0
31285: PPUSH
31286: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31287: LD_VAR 0 1
31291: PUSH
31292: LD_INT 1
31294: LESS
31295: PUSH
31296: LD_VAR 0 1
31300: PUSH
31301: LD_INT 3
31303: GREATER
31304: OR
31305: PUSH
31306: LD_VAR 0 5
31310: PPUSH
31311: LD_VAR 0 6
31315: PPUSH
31316: CALL_OW 428
31320: OR
31321: IFFALSE 31325
// exit ;
31323: GO 32053
// uc_side := your_side ;
31325: LD_ADDR_OWVAR 20
31329: PUSH
31330: LD_OWVAR 2
31334: ST_TO_ADDR
// uc_nation := nation ;
31335: LD_ADDR_OWVAR 21
31339: PUSH
31340: LD_VAR 0 1
31344: ST_TO_ADDR
// bc_level = 1 ;
31345: LD_ADDR_OWVAR 43
31349: PUSH
31350: LD_INT 1
31352: ST_TO_ADDR
// case btype of 1 :
31353: LD_VAR 0 2
31357: PUSH
31358: LD_INT 1
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31377
31366: POP
// bc_type := b_depot ; 2 :
31367: LD_ADDR_OWVAR 42
31371: PUSH
31372: LD_INT 0
31374: ST_TO_ADDR
31375: GO 31997
31377: LD_INT 2
31379: DOUBLE
31380: EQUAL
31381: IFTRUE 31385
31383: GO 31396
31385: POP
// bc_type := b_warehouse ; 3 :
31386: LD_ADDR_OWVAR 42
31390: PUSH
31391: LD_INT 1
31393: ST_TO_ADDR
31394: GO 31997
31396: LD_INT 3
31398: DOUBLE
31399: EQUAL
31400: IFTRUE 31404
31402: GO 31415
31404: POP
// bc_type := b_lab ; 4 .. 9 :
31405: LD_ADDR_OWVAR 42
31409: PUSH
31410: LD_INT 6
31412: ST_TO_ADDR
31413: GO 31997
31415: LD_INT 4
31417: DOUBLE
31418: GREATEREQUAL
31419: IFFALSE 31427
31421: LD_INT 9
31423: DOUBLE
31424: LESSEQUAL
31425: IFTRUE 31429
31427: GO 31489
31429: POP
// begin bc_type := b_lab_half ;
31430: LD_ADDR_OWVAR 42
31434: PUSH
31435: LD_INT 7
31437: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31438: LD_ADDR_OWVAR 44
31442: PUSH
31443: LD_INT 10
31445: PUSH
31446: LD_INT 11
31448: PUSH
31449: LD_INT 12
31451: PUSH
31452: LD_INT 15
31454: PUSH
31455: LD_INT 14
31457: PUSH
31458: LD_INT 13
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: PUSH
31469: LD_VAR 0 2
31473: PUSH
31474: LD_INT 3
31476: MINUS
31477: ARRAY
31478: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31479: LD_ADDR_OWVAR 45
31483: PUSH
31484: LD_INT 9
31486: ST_TO_ADDR
// end ; 10 .. 13 :
31487: GO 31997
31489: LD_INT 10
31491: DOUBLE
31492: GREATEREQUAL
31493: IFFALSE 31501
31495: LD_INT 13
31497: DOUBLE
31498: LESSEQUAL
31499: IFTRUE 31503
31501: GO 31580
31503: POP
// begin bc_type := b_lab_full ;
31504: LD_ADDR_OWVAR 42
31508: PUSH
31509: LD_INT 8
31511: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31512: LD_ADDR_OWVAR 44
31516: PUSH
31517: LD_INT 10
31519: PUSH
31520: LD_INT 12
31522: PUSH
31523: LD_INT 14
31525: PUSH
31526: LD_INT 13
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: PUSH
31535: LD_VAR 0 2
31539: PUSH
31540: LD_INT 9
31542: MINUS
31543: ARRAY
31544: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31545: LD_ADDR_OWVAR 45
31549: PUSH
31550: LD_INT 11
31552: PUSH
31553: LD_INT 15
31555: PUSH
31556: LD_INT 12
31558: PUSH
31559: LD_INT 15
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: PUSH
31568: LD_VAR 0 2
31572: PUSH
31573: LD_INT 9
31575: MINUS
31576: ARRAY
31577: ST_TO_ADDR
// end ; 14 :
31578: GO 31997
31580: LD_INT 14
31582: DOUBLE
31583: EQUAL
31584: IFTRUE 31588
31586: GO 31599
31588: POP
// bc_type := b_workshop ; 15 :
31589: LD_ADDR_OWVAR 42
31593: PUSH
31594: LD_INT 2
31596: ST_TO_ADDR
31597: GO 31997
31599: LD_INT 15
31601: DOUBLE
31602: EQUAL
31603: IFTRUE 31607
31605: GO 31618
31607: POP
// bc_type := b_factory ; 16 :
31608: LD_ADDR_OWVAR 42
31612: PUSH
31613: LD_INT 3
31615: ST_TO_ADDR
31616: GO 31997
31618: LD_INT 16
31620: DOUBLE
31621: EQUAL
31622: IFTRUE 31626
31624: GO 31637
31626: POP
// bc_type := b_ext_gun ; 17 :
31627: LD_ADDR_OWVAR 42
31631: PUSH
31632: LD_INT 17
31634: ST_TO_ADDR
31635: GO 31997
31637: LD_INT 17
31639: DOUBLE
31640: EQUAL
31641: IFTRUE 31645
31643: GO 31673
31645: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31646: LD_ADDR_OWVAR 42
31650: PUSH
31651: LD_INT 19
31653: PUSH
31654: LD_INT 23
31656: PUSH
31657: LD_INT 19
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: PUSH
31665: LD_VAR 0 1
31669: ARRAY
31670: ST_TO_ADDR
31671: GO 31997
31673: LD_INT 18
31675: DOUBLE
31676: EQUAL
31677: IFTRUE 31681
31679: GO 31692
31681: POP
// bc_type := b_ext_radar ; 19 :
31682: LD_ADDR_OWVAR 42
31686: PUSH
31687: LD_INT 20
31689: ST_TO_ADDR
31690: GO 31997
31692: LD_INT 19
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 31711
31700: POP
// bc_type := b_ext_radio ; 20 :
31701: LD_ADDR_OWVAR 42
31705: PUSH
31706: LD_INT 22
31708: ST_TO_ADDR
31709: GO 31997
31711: LD_INT 20
31713: DOUBLE
31714: EQUAL
31715: IFTRUE 31719
31717: GO 31730
31719: POP
// bc_type := b_ext_siberium ; 21 :
31720: LD_ADDR_OWVAR 42
31724: PUSH
31725: LD_INT 21
31727: ST_TO_ADDR
31728: GO 31997
31730: LD_INT 21
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31749
31738: POP
// bc_type := b_ext_computer ; 22 :
31739: LD_ADDR_OWVAR 42
31743: PUSH
31744: LD_INT 24
31746: ST_TO_ADDR
31747: GO 31997
31749: LD_INT 22
31751: DOUBLE
31752: EQUAL
31753: IFTRUE 31757
31755: GO 31768
31757: POP
// bc_type := b_ext_track ; 23 :
31758: LD_ADDR_OWVAR 42
31762: PUSH
31763: LD_INT 16
31765: ST_TO_ADDR
31766: GO 31997
31768: LD_INT 23
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31787
31776: POP
// bc_type := b_ext_laser ; 24 :
31777: LD_ADDR_OWVAR 42
31781: PUSH
31782: LD_INT 25
31784: ST_TO_ADDR
31785: GO 31997
31787: LD_INT 24
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31795
31793: GO 31806
31795: POP
// bc_type := b_control_tower ; 25 :
31796: LD_ADDR_OWVAR 42
31800: PUSH
31801: LD_INT 36
31803: ST_TO_ADDR
31804: GO 31997
31806: LD_INT 25
31808: DOUBLE
31809: EQUAL
31810: IFTRUE 31814
31812: GO 31825
31814: POP
// bc_type := b_breastwork ; 26 :
31815: LD_ADDR_OWVAR 42
31819: PUSH
31820: LD_INT 31
31822: ST_TO_ADDR
31823: GO 31997
31825: LD_INT 26
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 31844
31833: POP
// bc_type := b_bunker ; 27 :
31834: LD_ADDR_OWVAR 42
31838: PUSH
31839: LD_INT 32
31841: ST_TO_ADDR
31842: GO 31997
31844: LD_INT 27
31846: DOUBLE
31847: EQUAL
31848: IFTRUE 31852
31850: GO 31863
31852: POP
// bc_type := b_turret ; 28 :
31853: LD_ADDR_OWVAR 42
31857: PUSH
31858: LD_INT 33
31860: ST_TO_ADDR
31861: GO 31997
31863: LD_INT 28
31865: DOUBLE
31866: EQUAL
31867: IFTRUE 31871
31869: GO 31882
31871: POP
// bc_type := b_armoury ; 29 :
31872: LD_ADDR_OWVAR 42
31876: PUSH
31877: LD_INT 4
31879: ST_TO_ADDR
31880: GO 31997
31882: LD_INT 29
31884: DOUBLE
31885: EQUAL
31886: IFTRUE 31890
31888: GO 31901
31890: POP
// bc_type := b_barracks ; 30 :
31891: LD_ADDR_OWVAR 42
31895: PUSH
31896: LD_INT 5
31898: ST_TO_ADDR
31899: GO 31997
31901: LD_INT 30
31903: DOUBLE
31904: EQUAL
31905: IFTRUE 31909
31907: GO 31920
31909: POP
// bc_type := b_solar_power ; 31 :
31910: LD_ADDR_OWVAR 42
31914: PUSH
31915: LD_INT 27
31917: ST_TO_ADDR
31918: GO 31997
31920: LD_INT 31
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31928
31926: GO 31939
31928: POP
// bc_type := b_oil_power ; 32 :
31929: LD_ADDR_OWVAR 42
31933: PUSH
31934: LD_INT 26
31936: ST_TO_ADDR
31937: GO 31997
31939: LD_INT 32
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31958
31947: POP
// bc_type := b_siberite_power ; 33 :
31948: LD_ADDR_OWVAR 42
31952: PUSH
31953: LD_INT 28
31955: ST_TO_ADDR
31956: GO 31997
31958: LD_INT 33
31960: DOUBLE
31961: EQUAL
31962: IFTRUE 31966
31964: GO 31977
31966: POP
// bc_type := b_oil_mine ; 34 :
31967: LD_ADDR_OWVAR 42
31971: PUSH
31972: LD_INT 29
31974: ST_TO_ADDR
31975: GO 31997
31977: LD_INT 34
31979: DOUBLE
31980: EQUAL
31981: IFTRUE 31985
31983: GO 31996
31985: POP
// bc_type := b_siberite_mine ; end ;
31986: LD_ADDR_OWVAR 42
31990: PUSH
31991: LD_INT 30
31993: ST_TO_ADDR
31994: GO 31997
31996: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31997: LD_ADDR_VAR 0 8
32001: PUSH
32002: LD_VAR 0 5
32006: PPUSH
32007: LD_VAR 0 6
32011: PPUSH
32012: LD_VAR 0 3
32016: PPUSH
32017: CALL_OW 47
32021: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32022: LD_OWVAR 42
32026: PUSH
32027: LD_INT 32
32029: PUSH
32030: LD_INT 33
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: IN
32037: IFFALSE 32053
// PlaceWeaponTurret ( b , weapon ) ;
32039: LD_VAR 0 8
32043: PPUSH
32044: LD_VAR 0 4
32048: PPUSH
32049: CALL_OW 431
// end ;
32053: LD_VAR 0 7
32057: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32058: LD_INT 0
32060: PPUSH
32061: PPUSH
32062: PPUSH
32063: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32064: LD_ADDR_VAR 0 4
32068: PUSH
32069: LD_INT 22
32071: PUSH
32072: LD_OWVAR 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 30
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 30
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PPUSH
32113: CALL_OW 69
32117: ST_TO_ADDR
// if not tmp then
32118: LD_VAR 0 4
32122: NOT
32123: IFFALSE 32127
// exit ;
32125: GO 32186
// for i in tmp do
32127: LD_ADDR_VAR 0 2
32131: PUSH
32132: LD_VAR 0 4
32136: PUSH
32137: FOR_IN
32138: IFFALSE 32184
// for j = 1 to 3 do
32140: LD_ADDR_VAR 0 3
32144: PUSH
32145: DOUBLE
32146: LD_INT 1
32148: DEC
32149: ST_TO_ADDR
32150: LD_INT 3
32152: PUSH
32153: FOR_TO
32154: IFFALSE 32180
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32156: LD_VAR 0 2
32160: PPUSH
32161: CALL_OW 274
32165: PPUSH
32166: LD_VAR 0 3
32170: PPUSH
32171: LD_INT 99999
32173: PPUSH
32174: CALL_OW 277
32178: GO 32153
32180: POP
32181: POP
32182: GO 32137
32184: POP
32185: POP
// end ;
32186: LD_VAR 0 1
32190: RET
// export function hHackSetLevel10 ; var i , j ; begin
32191: LD_INT 0
32193: PPUSH
32194: PPUSH
32195: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_INT 21
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PPUSH
32211: CALL_OW 69
32215: PUSH
32216: FOR_IN
32217: IFFALSE 32269
// if IsSelected ( i ) then
32219: LD_VAR 0 2
32223: PPUSH
32224: CALL_OW 306
32228: IFFALSE 32267
// begin for j := 1 to 4 do
32230: LD_ADDR_VAR 0 3
32234: PUSH
32235: DOUBLE
32236: LD_INT 1
32238: DEC
32239: ST_TO_ADDR
32240: LD_INT 4
32242: PUSH
32243: FOR_TO
32244: IFFALSE 32265
// SetSkill ( i , j , 10 ) ;
32246: LD_VAR 0 2
32250: PPUSH
32251: LD_VAR 0 3
32255: PPUSH
32256: LD_INT 10
32258: PPUSH
32259: CALL_OW 237
32263: GO 32243
32265: POP
32266: POP
// end ;
32267: GO 32216
32269: POP
32270: POP
// end ;
32271: LD_VAR 0 1
32275: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32276: LD_INT 0
32278: PPUSH
32279: PPUSH
32280: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32281: LD_ADDR_VAR 0 2
32285: PUSH
32286: LD_INT 22
32288: PUSH
32289: LD_OWVAR 2
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 21
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PPUSH
32312: CALL_OW 69
32316: PUSH
32317: FOR_IN
32318: IFFALSE 32359
// begin for j := 1 to 4 do
32320: LD_ADDR_VAR 0 3
32324: PUSH
32325: DOUBLE
32326: LD_INT 1
32328: DEC
32329: ST_TO_ADDR
32330: LD_INT 4
32332: PUSH
32333: FOR_TO
32334: IFFALSE 32355
// SetSkill ( i , j , 10 ) ;
32336: LD_VAR 0 2
32340: PPUSH
32341: LD_VAR 0 3
32345: PPUSH
32346: LD_INT 10
32348: PPUSH
32349: CALL_OW 237
32353: GO 32333
32355: POP
32356: POP
// end ;
32357: GO 32317
32359: POP
32360: POP
// end ;
32361: LD_VAR 0 1
32365: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32366: LD_INT 0
32368: PPUSH
// uc_side := your_side ;
32369: LD_ADDR_OWVAR 20
32373: PUSH
32374: LD_OWVAR 2
32378: ST_TO_ADDR
// uc_nation := nation ;
32379: LD_ADDR_OWVAR 21
32383: PUSH
32384: LD_VAR 0 1
32388: ST_TO_ADDR
// InitHc ;
32389: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32393: LD_INT 0
32395: PPUSH
32396: LD_VAR 0 2
32400: PPUSH
32401: LD_VAR 0 3
32405: PPUSH
32406: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32410: LD_VAR 0 4
32414: PPUSH
32415: LD_VAR 0 5
32419: PPUSH
32420: CALL_OW 428
32424: PUSH
32425: LD_INT 0
32427: EQUAL
32428: IFFALSE 32452
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32430: CALL_OW 44
32434: PPUSH
32435: LD_VAR 0 4
32439: PPUSH
32440: LD_VAR 0 5
32444: PPUSH
32445: LD_INT 1
32447: PPUSH
32448: CALL_OW 48
// end ;
32452: LD_VAR 0 6
32456: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
// uc_side := your_side ;
32461: LD_ADDR_OWVAR 20
32465: PUSH
32466: LD_OWVAR 2
32470: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32471: LD_VAR 0 1
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 4
32487: PUSH
32488: LD_INT 5
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: IN
32498: IFFALSE 32510
// uc_nation := nation_american else
32500: LD_ADDR_OWVAR 21
32504: PUSH
32505: LD_INT 1
32507: ST_TO_ADDR
32508: GO 32553
// if chassis in [ 11 , 12 , 13 , 14 ] then
32510: LD_VAR 0 1
32514: PUSH
32515: LD_INT 11
32517: PUSH
32518: LD_INT 12
32520: PUSH
32521: LD_INT 13
32523: PUSH
32524: LD_INT 14
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: IN
32533: IFFALSE 32545
// uc_nation := nation_arabian else
32535: LD_ADDR_OWVAR 21
32539: PUSH
32540: LD_INT 2
32542: ST_TO_ADDR
32543: GO 32553
// uc_nation := nation_russian ;
32545: LD_ADDR_OWVAR 21
32549: PUSH
32550: LD_INT 3
32552: ST_TO_ADDR
// vc_chassis := chassis ;
32553: LD_ADDR_OWVAR 37
32557: PUSH
32558: LD_VAR 0 1
32562: ST_TO_ADDR
// vc_engine := engine ;
32563: LD_ADDR_OWVAR 39
32567: PUSH
32568: LD_VAR 0 2
32572: ST_TO_ADDR
// vc_control := control ;
32573: LD_ADDR_OWVAR 38
32577: PUSH
32578: LD_VAR 0 3
32582: ST_TO_ADDR
// vc_weapon := weapon ;
32583: LD_ADDR_OWVAR 40
32587: PUSH
32588: LD_VAR 0 4
32592: ST_TO_ADDR
// un := CreateVehicle ;
32593: LD_ADDR_VAR 0 8
32597: PUSH
32598: CALL_OW 45
32602: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32603: LD_VAR 0 8
32607: PPUSH
32608: LD_INT 0
32610: PPUSH
32611: LD_INT 5
32613: PPUSH
32614: CALL_OW 12
32618: PPUSH
32619: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32623: LD_VAR 0 8
32627: PPUSH
32628: LD_VAR 0 5
32632: PPUSH
32633: LD_VAR 0 6
32637: PPUSH
32638: LD_INT 1
32640: PPUSH
32641: CALL_OW 48
// end ;
32645: LD_VAR 0 7
32649: RET
// export hInvincible ; every 1 do
32650: GO 32652
32652: DISABLE
// hInvincible := [ ] ;
32653: LD_ADDR_EXP 124
32657: PUSH
32658: EMPTY
32659: ST_TO_ADDR
32660: END
// every 10 do var i ;
32661: GO 32663
32663: DISABLE
32664: LD_INT 0
32666: PPUSH
// begin enable ;
32667: ENABLE
// if not hInvincible then
32668: LD_EXP 124
32672: NOT
32673: IFFALSE 32677
// exit ;
32675: GO 32721
// for i in hInvincible do
32677: LD_ADDR_VAR 0 1
32681: PUSH
32682: LD_EXP 124
32686: PUSH
32687: FOR_IN
32688: IFFALSE 32719
// if GetLives ( i ) < 1000 then
32690: LD_VAR 0 1
32694: PPUSH
32695: CALL_OW 256
32699: PUSH
32700: LD_INT 1000
32702: LESS
32703: IFFALSE 32717
// SetLives ( i , 1000 ) ;
32705: LD_VAR 0 1
32709: PPUSH
32710: LD_INT 1000
32712: PPUSH
32713: CALL_OW 234
32717: GO 32687
32719: POP
32720: POP
// end ;
32721: PPOPN 1
32723: END
// export function hHackInvincible ; var i ; begin
32724: LD_INT 0
32726: PPUSH
32727: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32728: LD_ADDR_VAR 0 2
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 21
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 21
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: LIST
32760: PPUSH
32761: CALL_OW 69
32765: PUSH
32766: FOR_IN
32767: IFFALSE 32828
// if IsSelected ( i ) then
32769: LD_VAR 0 2
32773: PPUSH
32774: CALL_OW 306
32778: IFFALSE 32826
// begin if i in hInvincible then
32780: LD_VAR 0 2
32784: PUSH
32785: LD_EXP 124
32789: IN
32790: IFFALSE 32810
// hInvincible := hInvincible diff i else
32792: LD_ADDR_EXP 124
32796: PUSH
32797: LD_EXP 124
32801: PUSH
32802: LD_VAR 0 2
32806: DIFF
32807: ST_TO_ADDR
32808: GO 32826
// hInvincible := hInvincible union i ;
32810: LD_ADDR_EXP 124
32814: PUSH
32815: LD_EXP 124
32819: PUSH
32820: LD_VAR 0 2
32824: UNION
32825: ST_TO_ADDR
// end ;
32826: GO 32766
32828: POP
32829: POP
// end ;
32830: LD_VAR 0 1
32834: RET
// export function hHackInvisible ; var i , j ; begin
32835: LD_INT 0
32837: PPUSH
32838: PPUSH
32839: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32840: LD_ADDR_VAR 0 2
32844: PUSH
32845: LD_INT 21
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PPUSH
32855: CALL_OW 69
32859: PUSH
32860: FOR_IN
32861: IFFALSE 32885
// if IsSelected ( i ) then
32863: LD_VAR 0 2
32867: PPUSH
32868: CALL_OW 306
32872: IFFALSE 32883
// ComForceInvisible ( i ) ;
32874: LD_VAR 0 2
32878: PPUSH
32879: CALL_OW 496
32883: GO 32860
32885: POP
32886: POP
// end ;
32887: LD_VAR 0 1
32891: RET
// export function hHackChangeYourSide ; begin
32892: LD_INT 0
32894: PPUSH
// if your_side = 8 then
32895: LD_OWVAR 2
32899: PUSH
32900: LD_INT 8
32902: EQUAL
32903: IFFALSE 32915
// your_side := 0 else
32905: LD_ADDR_OWVAR 2
32909: PUSH
32910: LD_INT 0
32912: ST_TO_ADDR
32913: GO 32929
// your_side := your_side + 1 ;
32915: LD_ADDR_OWVAR 2
32919: PUSH
32920: LD_OWVAR 2
32924: PUSH
32925: LD_INT 1
32927: PLUS
32928: ST_TO_ADDR
// end ;
32929: LD_VAR 0 1
32933: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32934: LD_INT 0
32936: PPUSH
32937: PPUSH
32938: PPUSH
// for i in all_units do
32939: LD_ADDR_VAR 0 2
32943: PUSH
32944: LD_OWVAR 3
32948: PUSH
32949: FOR_IN
32950: IFFALSE 33028
// if IsSelected ( i ) then
32952: LD_VAR 0 2
32956: PPUSH
32957: CALL_OW 306
32961: IFFALSE 33026
// begin j := GetSide ( i ) ;
32963: LD_ADDR_VAR 0 3
32967: PUSH
32968: LD_VAR 0 2
32972: PPUSH
32973: CALL_OW 255
32977: ST_TO_ADDR
// if j = 8 then
32978: LD_VAR 0 3
32982: PUSH
32983: LD_INT 8
32985: EQUAL
32986: IFFALSE 32998
// j := 0 else
32988: LD_ADDR_VAR 0 3
32992: PUSH
32993: LD_INT 0
32995: ST_TO_ADDR
32996: GO 33012
// j := j + 1 ;
32998: LD_ADDR_VAR 0 3
33002: PUSH
33003: LD_VAR 0 3
33007: PUSH
33008: LD_INT 1
33010: PLUS
33011: ST_TO_ADDR
// SetSide ( i , j ) ;
33012: LD_VAR 0 2
33016: PPUSH
33017: LD_VAR 0 3
33021: PPUSH
33022: CALL_OW 235
// end ;
33026: GO 32949
33028: POP
33029: POP
// end ;
33030: LD_VAR 0 1
33034: RET
// export function hHackFog ; begin
33035: LD_INT 0
33037: PPUSH
// FogOff ( true ) ;
33038: LD_INT 1
33040: PPUSH
33041: CALL_OW 344
// end ;
33045: LD_VAR 0 1
33049: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33050: LD_INT 0
33052: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33053: LD_VAR 0 1
33057: PPUSH
33058: LD_VAR 0 2
33062: PPUSH
33063: LD_VAR 0 3
33067: PPUSH
33068: LD_INT 1
33070: PPUSH
33071: LD_INT 1
33073: PPUSH
33074: CALL_OW 483
// CenterOnXY ( x , y ) ;
33078: LD_VAR 0 2
33082: PPUSH
33083: LD_VAR 0 3
33087: PPUSH
33088: CALL_OW 84
// end ;
33092: LD_VAR 0 4
33096: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33097: LD_INT 0
33099: PPUSH
33100: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33101: LD_VAR 0 1
33105: NOT
33106: PUSH
33107: LD_VAR 0 2
33111: PPUSH
33112: LD_VAR 0 3
33116: PPUSH
33117: CALL_OW 488
33121: NOT
33122: OR
33123: PUSH
33124: LD_VAR 0 1
33128: PPUSH
33129: CALL_OW 266
33133: PUSH
33134: LD_INT 3
33136: NONEQUAL
33137: PUSH
33138: LD_VAR 0 1
33142: PPUSH
33143: CALL_OW 247
33147: PUSH
33148: LD_INT 1
33150: EQUAL
33151: NOT
33152: AND
33153: OR
33154: IFFALSE 33158
// exit ;
33156: GO 33307
// if GetType ( factory ) = unit_human then
33158: LD_VAR 0 1
33162: PPUSH
33163: CALL_OW 247
33167: PUSH
33168: LD_INT 1
33170: EQUAL
33171: IFFALSE 33188
// factory := IsInUnit ( factory ) ;
33173: LD_ADDR_VAR 0 1
33177: PUSH
33178: LD_VAR 0 1
33182: PPUSH
33183: CALL_OW 310
33187: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33188: LD_VAR 0 1
33192: PPUSH
33193: CALL_OW 266
33197: PUSH
33198: LD_INT 3
33200: NONEQUAL
33201: IFFALSE 33205
// exit ;
33203: GO 33307
// if HexInfo ( x , y ) = factory then
33205: LD_VAR 0 2
33209: PPUSH
33210: LD_VAR 0 3
33214: PPUSH
33215: CALL_OW 428
33219: PUSH
33220: LD_VAR 0 1
33224: EQUAL
33225: IFFALSE 33252
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33227: LD_ADDR_EXP 125
33231: PUSH
33232: LD_EXP 125
33236: PPUSH
33237: LD_VAR 0 1
33241: PPUSH
33242: LD_INT 0
33244: PPUSH
33245: CALL_OW 1
33249: ST_TO_ADDR
33250: GO 33303
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33252: LD_ADDR_EXP 125
33256: PUSH
33257: LD_EXP 125
33261: PPUSH
33262: LD_VAR 0 1
33266: PPUSH
33267: LD_VAR 0 1
33271: PPUSH
33272: CALL_OW 255
33276: PUSH
33277: LD_VAR 0 1
33281: PUSH
33282: LD_VAR 0 2
33286: PUSH
33287: LD_VAR 0 3
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: PPUSH
33298: CALL_OW 1
33302: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33303: CALL 33312 0 0
// end ;
33307: LD_VAR 0 4
33311: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33312: LD_INT 0
33314: PPUSH
33315: PPUSH
33316: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33317: LD_STRING resetFactoryWaypoint();
33319: PPUSH
33320: CALL_OW 559
// if factoryWaypoints then
33324: LD_EXP 125
33328: IFFALSE 33454
// begin list := PrepareArray ( factoryWaypoints ) ;
33330: LD_ADDR_VAR 0 3
33334: PUSH
33335: LD_EXP 125
33339: PPUSH
33340: CALL 79939 0 1
33344: ST_TO_ADDR
// for i := 1 to list do
33345: LD_ADDR_VAR 0 2
33349: PUSH
33350: DOUBLE
33351: LD_INT 1
33353: DEC
33354: ST_TO_ADDR
33355: LD_VAR 0 3
33359: PUSH
33360: FOR_TO
33361: IFFALSE 33452
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33363: LD_STRING setFactoryWaypointXY(
33365: PUSH
33366: LD_VAR 0 3
33370: PUSH
33371: LD_VAR 0 2
33375: ARRAY
33376: PUSH
33377: LD_INT 1
33379: ARRAY
33380: STR
33381: PUSH
33382: LD_STRING ,
33384: STR
33385: PUSH
33386: LD_VAR 0 3
33390: PUSH
33391: LD_VAR 0 2
33395: ARRAY
33396: PUSH
33397: LD_INT 2
33399: ARRAY
33400: STR
33401: PUSH
33402: LD_STRING ,
33404: STR
33405: PUSH
33406: LD_VAR 0 3
33410: PUSH
33411: LD_VAR 0 2
33415: ARRAY
33416: PUSH
33417: LD_INT 3
33419: ARRAY
33420: STR
33421: PUSH
33422: LD_STRING ,
33424: STR
33425: PUSH
33426: LD_VAR 0 3
33430: PUSH
33431: LD_VAR 0 2
33435: ARRAY
33436: PUSH
33437: LD_INT 4
33439: ARRAY
33440: STR
33441: PUSH
33442: LD_STRING )
33444: STR
33445: PPUSH
33446: CALL_OW 559
33450: GO 33360
33452: POP
33453: POP
// end ; end ;
33454: LD_VAR 0 1
33458: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33459: LD_INT 0
33461: PPUSH
// if HexInfo ( x , y ) = warehouse then
33462: LD_VAR 0 2
33466: PPUSH
33467: LD_VAR 0 3
33471: PPUSH
33472: CALL_OW 428
33476: PUSH
33477: LD_VAR 0 1
33481: EQUAL
33482: IFFALSE 33509
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33484: LD_ADDR_EXP 126
33488: PUSH
33489: LD_EXP 126
33493: PPUSH
33494: LD_VAR 0 1
33498: PPUSH
33499: LD_INT 0
33501: PPUSH
33502: CALL_OW 1
33506: ST_TO_ADDR
33507: GO 33560
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33509: LD_ADDR_EXP 126
33513: PUSH
33514: LD_EXP 126
33518: PPUSH
33519: LD_VAR 0 1
33523: PPUSH
33524: LD_VAR 0 1
33528: PPUSH
33529: CALL_OW 255
33533: PUSH
33534: LD_VAR 0 1
33538: PUSH
33539: LD_VAR 0 2
33543: PUSH
33544: LD_VAR 0 3
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: PPUSH
33555: CALL_OW 1
33559: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33560: CALL 33569 0 0
// end ;
33564: LD_VAR 0 4
33568: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33569: LD_INT 0
33571: PPUSH
33572: PPUSH
33573: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33574: LD_STRING resetWarehouseGatheringPoints();
33576: PPUSH
33577: CALL_OW 559
// if warehouseGatheringPoints then
33581: LD_EXP 126
33585: IFFALSE 33711
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33587: LD_ADDR_VAR 0 3
33591: PUSH
33592: LD_EXP 126
33596: PPUSH
33597: CALL 79939 0 1
33601: ST_TO_ADDR
// for i := 1 to list do
33602: LD_ADDR_VAR 0 2
33606: PUSH
33607: DOUBLE
33608: LD_INT 1
33610: DEC
33611: ST_TO_ADDR
33612: LD_VAR 0 3
33616: PUSH
33617: FOR_TO
33618: IFFALSE 33709
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33620: LD_STRING setWarehouseGatheringPointXY(
33622: PUSH
33623: LD_VAR 0 3
33627: PUSH
33628: LD_VAR 0 2
33632: ARRAY
33633: PUSH
33634: LD_INT 1
33636: ARRAY
33637: STR
33638: PUSH
33639: LD_STRING ,
33641: STR
33642: PUSH
33643: LD_VAR 0 3
33647: PUSH
33648: LD_VAR 0 2
33652: ARRAY
33653: PUSH
33654: LD_INT 2
33656: ARRAY
33657: STR
33658: PUSH
33659: LD_STRING ,
33661: STR
33662: PUSH
33663: LD_VAR 0 3
33667: PUSH
33668: LD_VAR 0 2
33672: ARRAY
33673: PUSH
33674: LD_INT 3
33676: ARRAY
33677: STR
33678: PUSH
33679: LD_STRING ,
33681: STR
33682: PUSH
33683: LD_VAR 0 3
33687: PUSH
33688: LD_VAR 0 2
33692: ARRAY
33693: PUSH
33694: LD_INT 4
33696: ARRAY
33697: STR
33698: PUSH
33699: LD_STRING )
33701: STR
33702: PPUSH
33703: CALL_OW 559
33707: GO 33617
33709: POP
33710: POP
// end ; end ;
33711: LD_VAR 0 1
33715: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33716: LD_EXP 126
33720: IFFALSE 34405
33722: GO 33724
33724: DISABLE
33725: LD_INT 0
33727: PPUSH
33728: PPUSH
33729: PPUSH
33730: PPUSH
33731: PPUSH
33732: PPUSH
33733: PPUSH
33734: PPUSH
33735: PPUSH
// begin enable ;
33736: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: LD_EXP 126
33746: PPUSH
33747: CALL 79939 0 1
33751: ST_TO_ADDR
// if not list then
33752: LD_VAR 0 3
33756: NOT
33757: IFFALSE 33761
// exit ;
33759: GO 34405
// for i := 1 to list do
33761: LD_ADDR_VAR 0 1
33765: PUSH
33766: DOUBLE
33767: LD_INT 1
33769: DEC
33770: ST_TO_ADDR
33771: LD_VAR 0 3
33775: PUSH
33776: FOR_TO
33777: IFFALSE 34403
// begin depot := list [ i ] [ 2 ] ;
33779: LD_ADDR_VAR 0 8
33783: PUSH
33784: LD_VAR 0 3
33788: PUSH
33789: LD_VAR 0 1
33793: ARRAY
33794: PUSH
33795: LD_INT 2
33797: ARRAY
33798: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33799: LD_ADDR_VAR 0 5
33803: PUSH
33804: LD_VAR 0 3
33808: PUSH
33809: LD_VAR 0 1
33813: ARRAY
33814: PUSH
33815: LD_INT 1
33817: ARRAY
33818: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33819: LD_VAR 0 8
33823: PPUSH
33824: CALL_OW 301
33828: PUSH
33829: LD_VAR 0 5
33833: PUSH
33834: LD_VAR 0 8
33838: PPUSH
33839: CALL_OW 255
33843: NONEQUAL
33844: OR
33845: IFFALSE 33874
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33847: LD_ADDR_EXP 126
33851: PUSH
33852: LD_EXP 126
33856: PPUSH
33857: LD_VAR 0 8
33861: PPUSH
33862: LD_INT 0
33864: PPUSH
33865: CALL_OW 1
33869: ST_TO_ADDR
// exit ;
33870: POP
33871: POP
33872: GO 34405
// end ; x := list [ i ] [ 3 ] ;
33874: LD_ADDR_VAR 0 6
33878: PUSH
33879: LD_VAR 0 3
33883: PUSH
33884: LD_VAR 0 1
33888: ARRAY
33889: PUSH
33890: LD_INT 3
33892: ARRAY
33893: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33894: LD_ADDR_VAR 0 7
33898: PUSH
33899: LD_VAR 0 3
33903: PUSH
33904: LD_VAR 0 1
33908: ARRAY
33909: PUSH
33910: LD_INT 4
33912: ARRAY
33913: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33914: LD_ADDR_VAR 0 9
33918: PUSH
33919: LD_VAR 0 6
33923: PPUSH
33924: LD_VAR 0 7
33928: PPUSH
33929: LD_INT 16
33931: PPUSH
33932: CALL 78527 0 3
33936: ST_TO_ADDR
// if not cratesNearbyPoint then
33937: LD_VAR 0 9
33941: NOT
33942: IFFALSE 33948
// exit ;
33944: POP
33945: POP
33946: GO 34405
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33948: LD_ADDR_VAR 0 4
33952: PUSH
33953: LD_INT 22
33955: PUSH
33956: LD_VAR 0 5
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: LD_INT 60
33970: PUSH
33971: EMPTY
33972: LIST
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 91
33980: PUSH
33981: LD_VAR 0 8
33985: PUSH
33986: LD_INT 6
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: LD_INT 25
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 25
34009: PUSH
34010: LD_INT 16
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: LIST
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: PPUSH
34028: CALL_OW 69
34032: PUSH
34033: LD_VAR 0 8
34037: PPUSH
34038: CALL_OW 313
34042: PPUSH
34043: LD_INT 3
34045: PUSH
34046: LD_INT 60
34048: PUSH
34049: EMPTY
34050: LIST
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 25
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 25
34071: PUSH
34072: LD_INT 16
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PPUSH
34088: CALL_OW 72
34092: UNION
34093: ST_TO_ADDR
// if tmp then
34094: LD_VAR 0 4
34098: IFFALSE 34178
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34100: LD_ADDR_VAR 0 4
34104: PUSH
34105: LD_VAR 0 4
34109: PPUSH
34110: LD_INT 3
34112: PPUSH
34113: CALL 76496 0 2
34117: ST_TO_ADDR
// for j in tmp do
34118: LD_ADDR_VAR 0 2
34122: PUSH
34123: LD_VAR 0 4
34127: PUSH
34128: FOR_IN
34129: IFFALSE 34172
// begin if IsInUnit ( j ) then
34131: LD_VAR 0 2
34135: PPUSH
34136: CALL_OW 310
34140: IFFALSE 34151
// ComExit ( j ) ;
34142: LD_VAR 0 2
34146: PPUSH
34147: CALL 76579 0 1
// AddComCollect ( j , x , y ) ;
34151: LD_VAR 0 2
34155: PPUSH
34156: LD_VAR 0 6
34160: PPUSH
34161: LD_VAR 0 7
34165: PPUSH
34166: CALL_OW 177
// end ;
34170: GO 34128
34172: POP
34173: POP
// exit ;
34174: POP
34175: POP
34176: GO 34405
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34178: LD_ADDR_VAR 0 4
34182: PUSH
34183: LD_INT 22
34185: PUSH
34186: LD_VAR 0 5
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 91
34197: PUSH
34198: LD_VAR 0 8
34202: PUSH
34203: LD_INT 8
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: PUSH
34214: LD_INT 34
34216: PUSH
34217: LD_INT 12
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 34
34226: PUSH
34227: LD_INT 51
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 34
34236: PUSH
34237: LD_INT 32
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 34
34246: PUSH
34247: LD_INT 89
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: LIST
34265: PPUSH
34266: CALL_OW 69
34270: ST_TO_ADDR
// if tmp then
34271: LD_VAR 0 4
34275: IFFALSE 34401
// begin for j in tmp do
34277: LD_ADDR_VAR 0 2
34281: PUSH
34282: LD_VAR 0 4
34286: PUSH
34287: FOR_IN
34288: IFFALSE 34399
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34290: LD_VAR 0 2
34294: PPUSH
34295: CALL_OW 262
34299: PUSH
34300: LD_INT 3
34302: EQUAL
34303: PUSH
34304: LD_VAR 0 2
34308: PPUSH
34309: CALL_OW 261
34313: PUSH
34314: LD_INT 20
34316: GREATER
34317: OR
34318: PUSH
34319: LD_VAR 0 2
34323: PPUSH
34324: CALL_OW 314
34328: NOT
34329: AND
34330: PUSH
34331: LD_VAR 0 2
34335: PPUSH
34336: CALL_OW 263
34340: PUSH
34341: LD_INT 1
34343: NONEQUAL
34344: PUSH
34345: LD_VAR 0 2
34349: PPUSH
34350: CALL_OW 311
34354: OR
34355: AND
34356: IFFALSE 34397
// begin ComCollect ( j , x , y ) ;
34358: LD_VAR 0 2
34362: PPUSH
34363: LD_VAR 0 6
34367: PPUSH
34368: LD_VAR 0 7
34372: PPUSH
34373: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34377: LD_VAR 0 2
34381: PPUSH
34382: LD_VAR 0 8
34386: PPUSH
34387: CALL_OW 172
// exit ;
34391: POP
34392: POP
34393: POP
34394: POP
34395: GO 34405
// end ;
34397: GO 34287
34399: POP
34400: POP
// end ; end ;
34401: GO 33776
34403: POP
34404: POP
// end ; end_of_file
34405: PPOPN 9
34407: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34408: LD_VAR 0 1
34412: PUSH
34413: LD_INT 200
34415: DOUBLE
34416: GREATEREQUAL
34417: IFFALSE 34425
34419: LD_INT 299
34421: DOUBLE
34422: LESSEQUAL
34423: IFTRUE 34427
34425: GO 34459
34427: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34428: LD_VAR 0 1
34432: PPUSH
34433: LD_VAR 0 2
34437: PPUSH
34438: LD_VAR 0 3
34442: PPUSH
34443: LD_VAR 0 4
34447: PPUSH
34448: LD_VAR 0 5
34452: PPUSH
34453: CALL 34947 0 5
34457: GO 34536
34459: LD_INT 300
34461: DOUBLE
34462: GREATEREQUAL
34463: IFFALSE 34471
34465: LD_INT 399
34467: DOUBLE
34468: LESSEQUAL
34469: IFTRUE 34473
34471: GO 34535
34473: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
34474: LD_VAR 0 1
34478: PPUSH
34479: LD_VAR 0 2
34483: PPUSH
34484: LD_VAR 0 3
34488: PPUSH
34489: LD_VAR 0 4
34493: PPUSH
34494: LD_VAR 0 5
34498: PPUSH
34499: LD_VAR 0 6
34503: PPUSH
34504: LD_VAR 0 7
34508: PPUSH
34509: LD_VAR 0 8
34513: PPUSH
34514: LD_VAR 0 9
34518: PPUSH
34519: LD_VAR 0 10
34523: PPUSH
34524: LD_VAR 0 11
34528: PPUSH
34529: CALL 31109 0 11
34533: GO 34536
34535: POP
// end ;
34536: PPOPN 11
34538: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
34539: LD_VAR 0 1
34543: PPUSH
34544: LD_VAR 0 2
34548: PPUSH
34549: LD_VAR 0 3
34553: PPUSH
34554: LD_VAR 0 4
34558: PPUSH
34559: LD_VAR 0 5
34563: PPUSH
34564: CALL 34683 0 5
// end ; end_of_file end_of_file
34568: PPOPN 5
34570: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34571: LD_INT 0
34573: PPUSH
34574: PPUSH
34575: PPUSH
34576: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34577: LD_VAR 0 1
34581: PPUSH
34582: CALL_OW 264
34586: PUSH
34587: LD_INT 91
34589: EQUAL
34590: IFFALSE 34662
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34592: LD_INT 68
34594: PPUSH
34595: LD_VAR 0 1
34599: PPUSH
34600: CALL_OW 255
34604: PPUSH
34605: CALL_OW 321
34609: PUSH
34610: LD_INT 2
34612: EQUAL
34613: IFFALSE 34625
// eff := 70 else
34615: LD_ADDR_VAR 0 4
34619: PUSH
34620: LD_INT 70
34622: ST_TO_ADDR
34623: GO 34633
// eff := 30 ;
34625: LD_ADDR_VAR 0 4
34629: PUSH
34630: LD_INT 30
34632: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34633: LD_VAR 0 1
34637: PPUSH
34638: CALL_OW 250
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 251
34652: PPUSH
34653: LD_VAR 0 4
34657: PPUSH
34658: CALL_OW 495
// end ; end ;
34662: LD_VAR 0 2
34666: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34667: LD_INT 0
34669: PPUSH
// end ;
34670: LD_VAR 0 4
34674: RET
// export function SOS_Command ( cmd ) ; begin
34675: LD_INT 0
34677: PPUSH
// end ;
34678: LD_VAR 0 2
34682: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34683: LD_INT 0
34685: PPUSH
// end ;
34686: LD_VAR 0 6
34690: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34691: LD_INT 0
34693: PPUSH
34694: PPUSH
// if not vehicle or not factory then
34695: LD_VAR 0 1
34699: NOT
34700: PUSH
34701: LD_VAR 0 2
34705: NOT
34706: OR
34707: IFFALSE 34711
// exit ;
34709: GO 34942
// if factoryWaypoints >= factory then
34711: LD_EXP 125
34715: PUSH
34716: LD_VAR 0 2
34720: GREATEREQUAL
34721: IFFALSE 34942
// if factoryWaypoints [ factory ] then
34723: LD_EXP 125
34727: PUSH
34728: LD_VAR 0 2
34732: ARRAY
34733: IFFALSE 34942
// begin if GetControl ( vehicle ) = control_manual then
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL_OW 263
34744: PUSH
34745: LD_INT 1
34747: EQUAL
34748: IFFALSE 34829
// begin driver := IsDrivenBy ( vehicle ) ;
34750: LD_ADDR_VAR 0 4
34754: PUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 311
34764: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34765: LD_VAR 0 4
34769: PPUSH
34770: LD_EXP 125
34774: PUSH
34775: LD_VAR 0 2
34779: ARRAY
34780: PUSH
34781: LD_INT 3
34783: ARRAY
34784: PPUSH
34785: LD_EXP 125
34789: PUSH
34790: LD_VAR 0 2
34794: ARRAY
34795: PUSH
34796: LD_INT 4
34798: ARRAY
34799: PPUSH
34800: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34804: LD_VAR 0 4
34808: PPUSH
34809: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34813: LD_VAR 0 4
34817: PPUSH
34818: LD_VAR 0 2
34822: PPUSH
34823: CALL_OW 180
// end else
34827: GO 34942
// if GetControl ( vehicle ) = control_remote then
34829: LD_VAR 0 1
34833: PPUSH
34834: CALL_OW 263
34838: PUSH
34839: LD_INT 2
34841: EQUAL
34842: IFFALSE 34903
// begin wait ( 0 0$2 ) ;
34844: LD_INT 70
34846: PPUSH
34847: CALL_OW 67
// if Connect ( vehicle ) then
34851: LD_VAR 0 1
34855: PPUSH
34856: CALL 46800 0 1
34860: IFFALSE 34901
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34862: LD_VAR 0 1
34866: PPUSH
34867: LD_EXP 125
34871: PUSH
34872: LD_VAR 0 2
34876: ARRAY
34877: PUSH
34878: LD_INT 3
34880: ARRAY
34881: PPUSH
34882: LD_EXP 125
34886: PUSH
34887: LD_VAR 0 2
34891: ARRAY
34892: PUSH
34893: LD_INT 4
34895: ARRAY
34896: PPUSH
34897: CALL_OW 171
// end else
34901: GO 34942
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34903: LD_VAR 0 1
34907: PPUSH
34908: LD_EXP 125
34912: PUSH
34913: LD_VAR 0 2
34917: ARRAY
34918: PUSH
34919: LD_INT 3
34921: ARRAY
34922: PPUSH
34923: LD_EXP 125
34927: PUSH
34928: LD_VAR 0 2
34932: ARRAY
34933: PUSH
34934: LD_INT 4
34936: ARRAY
34937: PPUSH
34938: CALL_OW 171
// end ; end ;
34942: LD_VAR 0 3
34946: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34947: LD_INT 0
34949: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34950: LD_VAR 0 1
34954: PUSH
34955: LD_INT 250
34957: EQUAL
34958: PUSH
34959: LD_VAR 0 2
34963: PPUSH
34964: CALL_OW 264
34968: PUSH
34969: LD_INT 81
34971: EQUAL
34972: AND
34973: IFFALSE 34994
// MinerPlaceMine ( unit , x , y ) ;
34975: LD_VAR 0 2
34979: PPUSH
34980: LD_VAR 0 4
34984: PPUSH
34985: LD_VAR 0 5
34989: PPUSH
34990: CALL 37379 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34994: LD_VAR 0 1
34998: PUSH
34999: LD_INT 251
35001: EQUAL
35002: PUSH
35003: LD_VAR 0 2
35007: PPUSH
35008: CALL_OW 264
35012: PUSH
35013: LD_INT 81
35015: EQUAL
35016: AND
35017: IFFALSE 35038
// MinerDetonateMine ( unit , x , y ) ;
35019: LD_VAR 0 2
35023: PPUSH
35024: LD_VAR 0 4
35028: PPUSH
35029: LD_VAR 0 5
35033: PPUSH
35034: CALL 37654 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35038: LD_VAR 0 1
35042: PUSH
35043: LD_INT 252
35045: EQUAL
35046: PUSH
35047: LD_VAR 0 2
35051: PPUSH
35052: CALL_OW 264
35056: PUSH
35057: LD_INT 81
35059: EQUAL
35060: AND
35061: IFFALSE 35082
// MinerCreateMinefield ( unit , x , y ) ;
35063: LD_VAR 0 2
35067: PPUSH
35068: LD_VAR 0 4
35072: PPUSH
35073: LD_VAR 0 5
35077: PPUSH
35078: CALL 38071 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35082: LD_VAR 0 1
35086: PUSH
35087: LD_INT 253
35089: EQUAL
35090: PUSH
35091: LD_VAR 0 2
35095: PPUSH
35096: CALL_OW 257
35100: PUSH
35101: LD_INT 5
35103: EQUAL
35104: AND
35105: IFFALSE 35126
// ComBinocular ( unit , x , y ) ;
35107: LD_VAR 0 2
35111: PPUSH
35112: LD_VAR 0 4
35116: PPUSH
35117: LD_VAR 0 5
35121: PPUSH
35122: CALL 38440 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35126: LD_VAR 0 1
35130: PUSH
35131: LD_INT 254
35133: EQUAL
35134: PUSH
35135: LD_VAR 0 2
35139: PPUSH
35140: CALL_OW 264
35144: PUSH
35145: LD_INT 99
35147: EQUAL
35148: AND
35149: PUSH
35150: LD_VAR 0 3
35154: PPUSH
35155: CALL_OW 263
35159: PUSH
35160: LD_INT 3
35162: EQUAL
35163: AND
35164: IFFALSE 35180
// HackDestroyVehicle ( unit , selectedUnit ) ;
35166: LD_VAR 0 2
35170: PPUSH
35171: LD_VAR 0 3
35175: PPUSH
35176: CALL 36743 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35180: LD_VAR 0 1
35184: PUSH
35185: LD_INT 255
35187: EQUAL
35188: PUSH
35189: LD_VAR 0 2
35193: PPUSH
35194: CALL_OW 264
35198: PUSH
35199: LD_INT 14
35201: PUSH
35202: LD_INT 53
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: IN
35209: AND
35210: PUSH
35211: LD_VAR 0 4
35215: PPUSH
35216: LD_VAR 0 5
35220: PPUSH
35221: CALL_OW 488
35225: AND
35226: IFFALSE 35250
// CutTreeXYR ( unit , x , y , 12 ) ;
35228: LD_VAR 0 2
35232: PPUSH
35233: LD_VAR 0 4
35237: PPUSH
35238: LD_VAR 0 5
35242: PPUSH
35243: LD_INT 12
35245: PPUSH
35246: CALL 35313 0 4
// if cmd = 256 then
35250: LD_VAR 0 1
35254: PUSH
35255: LD_INT 256
35257: EQUAL
35258: IFFALSE 35279
// SetFactoryWaypoint ( unit , x , y ) ;
35260: LD_VAR 0 2
35264: PPUSH
35265: LD_VAR 0 4
35269: PPUSH
35270: LD_VAR 0 5
35274: PPUSH
35275: CALL 33097 0 3
// if cmd = 257 then
35279: LD_VAR 0 1
35283: PUSH
35284: LD_INT 257
35286: EQUAL
35287: IFFALSE 35308
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35289: LD_VAR 0 2
35293: PPUSH
35294: LD_VAR 0 4
35298: PPUSH
35299: LD_VAR 0 5
35303: PPUSH
35304: CALL 33459 0 3
// end ;
35308: LD_VAR 0 6
35312: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35313: LD_INT 0
35315: PPUSH
35316: PPUSH
35317: PPUSH
35318: PPUSH
35319: PPUSH
35320: PPUSH
35321: PPUSH
35322: PPUSH
35323: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35324: LD_VAR 0 1
35328: NOT
35329: PUSH
35330: LD_VAR 0 2
35334: PPUSH
35335: LD_VAR 0 3
35339: PPUSH
35340: CALL_OW 488
35344: NOT
35345: OR
35346: PUSH
35347: LD_VAR 0 4
35351: NOT
35352: OR
35353: IFFALSE 35357
// exit ;
35355: GO 35697
// list := [ ] ;
35357: LD_ADDR_VAR 0 13
35361: PUSH
35362: EMPTY
35363: ST_TO_ADDR
// if x - r < 0 then
35364: LD_VAR 0 2
35368: PUSH
35369: LD_VAR 0 4
35373: MINUS
35374: PUSH
35375: LD_INT 0
35377: LESS
35378: IFFALSE 35390
// min_x := 0 else
35380: LD_ADDR_VAR 0 7
35384: PUSH
35385: LD_INT 0
35387: ST_TO_ADDR
35388: GO 35406
// min_x := x - r ;
35390: LD_ADDR_VAR 0 7
35394: PUSH
35395: LD_VAR 0 2
35399: PUSH
35400: LD_VAR 0 4
35404: MINUS
35405: ST_TO_ADDR
// if y - r < 0 then
35406: LD_VAR 0 3
35410: PUSH
35411: LD_VAR 0 4
35415: MINUS
35416: PUSH
35417: LD_INT 0
35419: LESS
35420: IFFALSE 35432
// min_y := 0 else
35422: LD_ADDR_VAR 0 8
35426: PUSH
35427: LD_INT 0
35429: ST_TO_ADDR
35430: GO 35448
// min_y := y - r ;
35432: LD_ADDR_VAR 0 8
35436: PUSH
35437: LD_VAR 0 3
35441: PUSH
35442: LD_VAR 0 4
35446: MINUS
35447: ST_TO_ADDR
// max_x := x + r ;
35448: LD_ADDR_VAR 0 9
35452: PUSH
35453: LD_VAR 0 2
35457: PUSH
35458: LD_VAR 0 4
35462: PLUS
35463: ST_TO_ADDR
// max_y := y + r ;
35464: LD_ADDR_VAR 0 10
35468: PUSH
35469: LD_VAR 0 3
35473: PUSH
35474: LD_VAR 0 4
35478: PLUS
35479: ST_TO_ADDR
// for _x = min_x to max_x do
35480: LD_ADDR_VAR 0 11
35484: PUSH
35485: DOUBLE
35486: LD_VAR 0 7
35490: DEC
35491: ST_TO_ADDR
35492: LD_VAR 0 9
35496: PUSH
35497: FOR_TO
35498: IFFALSE 35615
// for _y = min_y to max_y do
35500: LD_ADDR_VAR 0 12
35504: PUSH
35505: DOUBLE
35506: LD_VAR 0 8
35510: DEC
35511: ST_TO_ADDR
35512: LD_VAR 0 10
35516: PUSH
35517: FOR_TO
35518: IFFALSE 35611
// begin if not ValidHex ( _x , _y ) then
35520: LD_VAR 0 11
35524: PPUSH
35525: LD_VAR 0 12
35529: PPUSH
35530: CALL_OW 488
35534: NOT
35535: IFFALSE 35539
// continue ;
35537: GO 35517
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35539: LD_VAR 0 11
35543: PPUSH
35544: LD_VAR 0 12
35548: PPUSH
35549: CALL_OW 351
35553: PUSH
35554: LD_VAR 0 11
35558: PPUSH
35559: LD_VAR 0 12
35563: PPUSH
35564: CALL_OW 554
35568: AND
35569: IFFALSE 35609
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35571: LD_ADDR_VAR 0 13
35575: PUSH
35576: LD_VAR 0 13
35580: PPUSH
35581: LD_VAR 0 13
35585: PUSH
35586: LD_INT 1
35588: PLUS
35589: PPUSH
35590: LD_VAR 0 11
35594: PUSH
35595: LD_VAR 0 12
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PPUSH
35604: CALL_OW 2
35608: ST_TO_ADDR
// end ;
35609: GO 35517
35611: POP
35612: POP
35613: GO 35497
35615: POP
35616: POP
// if not list then
35617: LD_VAR 0 13
35621: NOT
35622: IFFALSE 35626
// exit ;
35624: GO 35697
// for i in list do
35626: LD_ADDR_VAR 0 6
35630: PUSH
35631: LD_VAR 0 13
35635: PUSH
35636: FOR_IN
35637: IFFALSE 35695
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35639: LD_VAR 0 1
35643: PPUSH
35644: LD_STRING M
35646: PUSH
35647: LD_VAR 0 6
35651: PUSH
35652: LD_INT 1
35654: ARRAY
35655: PUSH
35656: LD_VAR 0 6
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: PPUSH
35689: CALL_OW 447
35693: GO 35636
35695: POP
35696: POP
// end ;
35697: LD_VAR 0 5
35701: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35702: LD_EXP 128
35706: NOT
35707: IFFALSE 35757
35709: GO 35711
35711: DISABLE
// begin initHack := true ;
35712: LD_ADDR_EXP 128
35716: PUSH
35717: LD_INT 1
35719: ST_TO_ADDR
// hackTanks := [ ] ;
35720: LD_ADDR_EXP 129
35724: PUSH
35725: EMPTY
35726: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35727: LD_ADDR_EXP 130
35731: PUSH
35732: EMPTY
35733: ST_TO_ADDR
// hackLimit := 3 ;
35734: LD_ADDR_EXP 131
35738: PUSH
35739: LD_INT 3
35741: ST_TO_ADDR
// hackDist := 12 ;
35742: LD_ADDR_EXP 132
35746: PUSH
35747: LD_INT 12
35749: ST_TO_ADDR
// hackCounter := [ ] ;
35750: LD_ADDR_EXP 133
35754: PUSH
35755: EMPTY
35756: ST_TO_ADDR
// end ;
35757: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35758: LD_EXP 128
35762: PUSH
35763: LD_INT 34
35765: PUSH
35766: LD_INT 99
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PPUSH
35773: CALL_OW 69
35777: AND
35778: IFFALSE 36031
35780: GO 35782
35782: DISABLE
35783: LD_INT 0
35785: PPUSH
35786: PPUSH
// begin enable ;
35787: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35788: LD_ADDR_VAR 0 1
35792: PUSH
35793: LD_INT 34
35795: PUSH
35796: LD_INT 99
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PPUSH
35803: CALL_OW 69
35807: PUSH
35808: FOR_IN
35809: IFFALSE 36029
// begin if not i in hackTanks then
35811: LD_VAR 0 1
35815: PUSH
35816: LD_EXP 129
35820: IN
35821: NOT
35822: IFFALSE 35905
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35824: LD_ADDR_EXP 129
35828: PUSH
35829: LD_EXP 129
35833: PPUSH
35834: LD_EXP 129
35838: PUSH
35839: LD_INT 1
35841: PLUS
35842: PPUSH
35843: LD_VAR 0 1
35847: PPUSH
35848: CALL_OW 1
35852: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35853: LD_ADDR_EXP 130
35857: PUSH
35858: LD_EXP 130
35862: PPUSH
35863: LD_EXP 130
35867: PUSH
35868: LD_INT 1
35870: PLUS
35871: PPUSH
35872: EMPTY
35873: PPUSH
35874: CALL_OW 1
35878: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35879: LD_ADDR_EXP 133
35883: PUSH
35884: LD_EXP 133
35888: PPUSH
35889: LD_EXP 133
35893: PUSH
35894: LD_INT 1
35896: PLUS
35897: PPUSH
35898: EMPTY
35899: PPUSH
35900: CALL_OW 1
35904: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 302
35914: NOT
35915: IFFALSE 35928
// begin HackUnlinkAll ( i ) ;
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL 36034 0 1
// continue ;
35926: GO 35808
// end ; HackCheckCapturedStatus ( i ) ;
35928: LD_VAR 0 1
35932: PPUSH
35933: CALL 36477 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35937: LD_ADDR_VAR 0 2
35941: PUSH
35942: LD_INT 81
35944: PUSH
35945: LD_VAR 0 1
35949: PPUSH
35950: CALL_OW 255
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 33
35961: PUSH
35962: LD_INT 3
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 91
35971: PUSH
35972: LD_VAR 0 1
35976: PUSH
35977: LD_EXP 132
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 50
35989: PUSH
35990: EMPTY
35991: LIST
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: PPUSH
35999: CALL_OW 69
36003: ST_TO_ADDR
// if not tmp then
36004: LD_VAR 0 2
36008: NOT
36009: IFFALSE 36013
// continue ;
36011: GO 35808
// HackLink ( i , tmp ) ;
36013: LD_VAR 0 1
36017: PPUSH
36018: LD_VAR 0 2
36022: PPUSH
36023: CALL 36170 0 2
// end ;
36027: GO 35808
36029: POP
36030: POP
// end ;
36031: PPOPN 2
36033: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36034: LD_INT 0
36036: PPUSH
36037: PPUSH
36038: PPUSH
// if not hack in hackTanks then
36039: LD_VAR 0 1
36043: PUSH
36044: LD_EXP 129
36048: IN
36049: NOT
36050: IFFALSE 36054
// exit ;
36052: GO 36165
// index := GetElementIndex ( hackTanks , hack ) ;
36054: LD_ADDR_VAR 0 4
36058: PUSH
36059: LD_EXP 129
36063: PPUSH
36064: LD_VAR 0 1
36068: PPUSH
36069: CALL 43607 0 2
36073: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36074: LD_EXP 130
36078: PUSH
36079: LD_VAR 0 4
36083: ARRAY
36084: IFFALSE 36165
// begin for i in hackTanksCaptured [ index ] do
36086: LD_ADDR_VAR 0 3
36090: PUSH
36091: LD_EXP 130
36095: PUSH
36096: LD_VAR 0 4
36100: ARRAY
36101: PUSH
36102: FOR_IN
36103: IFFALSE 36129
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36105: LD_VAR 0 3
36109: PUSH
36110: LD_INT 1
36112: ARRAY
36113: PPUSH
36114: LD_VAR 0 3
36118: PUSH
36119: LD_INT 2
36121: ARRAY
36122: PPUSH
36123: CALL_OW 235
36127: GO 36102
36129: POP
36130: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36131: LD_ADDR_EXP 130
36135: PUSH
36136: LD_EXP 130
36140: PPUSH
36141: LD_VAR 0 4
36145: PPUSH
36146: EMPTY
36147: PPUSH
36148: CALL_OW 1
36152: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36153: LD_VAR 0 1
36157: PPUSH
36158: LD_INT 0
36160: PPUSH
36161: CALL_OW 505
// end ; end ;
36165: LD_VAR 0 2
36169: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36170: LD_INT 0
36172: PPUSH
36173: PPUSH
36174: PPUSH
// if not hack in hackTanks or not vehicles then
36175: LD_VAR 0 1
36179: PUSH
36180: LD_EXP 129
36184: IN
36185: NOT
36186: PUSH
36187: LD_VAR 0 2
36191: NOT
36192: OR
36193: IFFALSE 36197
// exit ;
36195: GO 36472
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36197: LD_ADDR_VAR 0 2
36201: PUSH
36202: LD_VAR 0 1
36206: PPUSH
36207: LD_VAR 0 2
36211: PPUSH
36212: LD_INT 1
36214: PPUSH
36215: LD_INT 1
36217: PPUSH
36218: CALL 44257 0 4
36222: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36223: LD_ADDR_VAR 0 5
36227: PUSH
36228: LD_EXP 129
36232: PPUSH
36233: LD_VAR 0 1
36237: PPUSH
36238: CALL 43607 0 2
36242: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36243: LD_EXP 130
36247: PUSH
36248: LD_VAR 0 5
36252: ARRAY
36253: PUSH
36254: LD_EXP 131
36258: LESS
36259: IFFALSE 36448
// begin for i := 1 to vehicles do
36261: LD_ADDR_VAR 0 4
36265: PUSH
36266: DOUBLE
36267: LD_INT 1
36269: DEC
36270: ST_TO_ADDR
36271: LD_VAR 0 2
36275: PUSH
36276: FOR_TO
36277: IFFALSE 36446
// begin if hackTanksCaptured [ index ] = hackLimit then
36279: LD_EXP 130
36283: PUSH
36284: LD_VAR 0 5
36288: ARRAY
36289: PUSH
36290: LD_EXP 131
36294: EQUAL
36295: IFFALSE 36299
// break ;
36297: GO 36446
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36299: LD_ADDR_EXP 133
36303: PUSH
36304: LD_EXP 133
36308: PPUSH
36309: LD_VAR 0 5
36313: PPUSH
36314: LD_EXP 133
36318: PUSH
36319: LD_VAR 0 5
36323: ARRAY
36324: PUSH
36325: LD_INT 1
36327: PLUS
36328: PPUSH
36329: CALL_OW 1
36333: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36334: LD_ADDR_EXP 130
36338: PUSH
36339: LD_EXP 130
36343: PPUSH
36344: LD_VAR 0 5
36348: PUSH
36349: LD_EXP 130
36353: PUSH
36354: LD_VAR 0 5
36358: ARRAY
36359: PUSH
36360: LD_INT 1
36362: PLUS
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PPUSH
36368: LD_VAR 0 2
36372: PUSH
36373: LD_VAR 0 4
36377: ARRAY
36378: PUSH
36379: LD_VAR 0 2
36383: PUSH
36384: LD_VAR 0 4
36388: ARRAY
36389: PPUSH
36390: CALL_OW 255
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PPUSH
36399: CALL 43822 0 3
36403: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36404: LD_VAR 0 2
36408: PUSH
36409: LD_VAR 0 4
36413: ARRAY
36414: PPUSH
36415: LD_VAR 0 1
36419: PPUSH
36420: CALL_OW 255
36424: PPUSH
36425: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36429: LD_VAR 0 2
36433: PUSH
36434: LD_VAR 0 4
36438: ARRAY
36439: PPUSH
36440: CALL_OW 141
// end ;
36444: GO 36276
36446: POP
36447: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36448: LD_VAR 0 1
36452: PPUSH
36453: LD_EXP 130
36457: PUSH
36458: LD_VAR 0 5
36462: ARRAY
36463: PUSH
36464: LD_INT 0
36466: PLUS
36467: PPUSH
36468: CALL_OW 505
// end ;
36472: LD_VAR 0 3
36476: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36477: LD_INT 0
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
// if not hack in hackTanks then
36483: LD_VAR 0 1
36487: PUSH
36488: LD_EXP 129
36492: IN
36493: NOT
36494: IFFALSE 36498
// exit ;
36496: GO 36738
// index := GetElementIndex ( hackTanks , hack ) ;
36498: LD_ADDR_VAR 0 4
36502: PUSH
36503: LD_EXP 129
36507: PPUSH
36508: LD_VAR 0 1
36512: PPUSH
36513: CALL 43607 0 2
36517: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: DOUBLE
36524: LD_EXP 130
36528: PUSH
36529: LD_VAR 0 4
36533: ARRAY
36534: INC
36535: ST_TO_ADDR
36536: LD_INT 1
36538: PUSH
36539: FOR_DOWNTO
36540: IFFALSE 36712
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36542: LD_ADDR_VAR 0 5
36546: PUSH
36547: LD_EXP 130
36551: PUSH
36552: LD_VAR 0 4
36556: ARRAY
36557: PUSH
36558: LD_VAR 0 3
36562: ARRAY
36563: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36564: LD_VAR 0 5
36568: PUSH
36569: LD_INT 1
36571: ARRAY
36572: PPUSH
36573: CALL_OW 302
36577: NOT
36578: PUSH
36579: LD_VAR 0 5
36583: PUSH
36584: LD_INT 1
36586: ARRAY
36587: PPUSH
36588: CALL_OW 255
36592: PUSH
36593: LD_VAR 0 1
36597: PPUSH
36598: CALL_OW 255
36602: NONEQUAL
36603: OR
36604: IFFALSE 36710
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36606: LD_VAR 0 5
36610: PUSH
36611: LD_INT 1
36613: ARRAY
36614: PPUSH
36615: CALL_OW 305
36619: PUSH
36620: LD_VAR 0 5
36624: PUSH
36625: LD_INT 1
36627: ARRAY
36628: PPUSH
36629: CALL_OW 255
36633: PUSH
36634: LD_VAR 0 1
36638: PPUSH
36639: CALL_OW 255
36643: EQUAL
36644: AND
36645: IFFALSE 36669
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36647: LD_VAR 0 5
36651: PUSH
36652: LD_INT 1
36654: ARRAY
36655: PPUSH
36656: LD_VAR 0 5
36660: PUSH
36661: LD_INT 2
36663: ARRAY
36664: PPUSH
36665: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36669: LD_ADDR_EXP 130
36673: PUSH
36674: LD_EXP 130
36678: PPUSH
36679: LD_VAR 0 4
36683: PPUSH
36684: LD_EXP 130
36688: PUSH
36689: LD_VAR 0 4
36693: ARRAY
36694: PPUSH
36695: LD_VAR 0 3
36699: PPUSH
36700: CALL_OW 3
36704: PPUSH
36705: CALL_OW 1
36709: ST_TO_ADDR
// end ; end ;
36710: GO 36539
36712: POP
36713: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36714: LD_VAR 0 1
36718: PPUSH
36719: LD_EXP 130
36723: PUSH
36724: LD_VAR 0 4
36728: ARRAY
36729: PUSH
36730: LD_INT 0
36732: PLUS
36733: PPUSH
36734: CALL_OW 505
// end ;
36738: LD_VAR 0 2
36742: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36743: LD_INT 0
36745: PPUSH
36746: PPUSH
36747: PPUSH
36748: PPUSH
// if not hack in hackTanks then
36749: LD_VAR 0 1
36753: PUSH
36754: LD_EXP 129
36758: IN
36759: NOT
36760: IFFALSE 36764
// exit ;
36762: GO 36849
// index := GetElementIndex ( hackTanks , hack ) ;
36764: LD_ADDR_VAR 0 5
36768: PUSH
36769: LD_EXP 129
36773: PPUSH
36774: LD_VAR 0 1
36778: PPUSH
36779: CALL 43607 0 2
36783: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36784: LD_ADDR_VAR 0 4
36788: PUSH
36789: DOUBLE
36790: LD_INT 1
36792: DEC
36793: ST_TO_ADDR
36794: LD_EXP 130
36798: PUSH
36799: LD_VAR 0 5
36803: ARRAY
36804: PUSH
36805: FOR_TO
36806: IFFALSE 36847
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36808: LD_EXP 130
36812: PUSH
36813: LD_VAR 0 5
36817: ARRAY
36818: PUSH
36819: LD_VAR 0 4
36823: ARRAY
36824: PUSH
36825: LD_INT 1
36827: ARRAY
36828: PUSH
36829: LD_VAR 0 2
36833: EQUAL
36834: IFFALSE 36845
// KillUnit ( vehicle ) ;
36836: LD_VAR 0 2
36840: PPUSH
36841: CALL_OW 66
36845: GO 36805
36847: POP
36848: POP
// end ;
36849: LD_VAR 0 3
36853: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36854: LD_EXP 134
36858: NOT
36859: IFFALSE 36894
36861: GO 36863
36863: DISABLE
// begin initMiner := true ;
36864: LD_ADDR_EXP 134
36868: PUSH
36869: LD_INT 1
36871: ST_TO_ADDR
// minersList := [ ] ;
36872: LD_ADDR_EXP 135
36876: PUSH
36877: EMPTY
36878: ST_TO_ADDR
// minerMinesList := [ ] ;
36879: LD_ADDR_EXP 136
36883: PUSH
36884: EMPTY
36885: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36886: LD_ADDR_EXP 137
36890: PUSH
36891: LD_INT 5
36893: ST_TO_ADDR
// end ;
36894: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36895: LD_EXP 134
36899: PUSH
36900: LD_INT 34
36902: PUSH
36903: LD_INT 81
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PPUSH
36910: CALL_OW 69
36914: AND
36915: IFFALSE 37376
36917: GO 36919
36919: DISABLE
36920: LD_INT 0
36922: PPUSH
36923: PPUSH
36924: PPUSH
36925: PPUSH
// begin enable ;
36926: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36927: LD_ADDR_VAR 0 1
36931: PUSH
36932: LD_INT 34
36934: PUSH
36935: LD_INT 81
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PPUSH
36942: CALL_OW 69
36946: PUSH
36947: FOR_IN
36948: IFFALSE 37020
// begin if not i in minersList then
36950: LD_VAR 0 1
36954: PUSH
36955: LD_EXP 135
36959: IN
36960: NOT
36961: IFFALSE 37018
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36963: LD_ADDR_EXP 135
36967: PUSH
36968: LD_EXP 135
36972: PPUSH
36973: LD_EXP 135
36977: PUSH
36978: LD_INT 1
36980: PLUS
36981: PPUSH
36982: LD_VAR 0 1
36986: PPUSH
36987: CALL_OW 1
36991: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36992: LD_ADDR_EXP 136
36996: PUSH
36997: LD_EXP 136
37001: PPUSH
37002: LD_EXP 136
37006: PUSH
37007: LD_INT 1
37009: PLUS
37010: PPUSH
37011: EMPTY
37012: PPUSH
37013: CALL_OW 1
37017: ST_TO_ADDR
// end end ;
37018: GO 36947
37020: POP
37021: POP
// for i := minerMinesList downto 1 do
37022: LD_ADDR_VAR 0 1
37026: PUSH
37027: DOUBLE
37028: LD_EXP 136
37032: INC
37033: ST_TO_ADDR
37034: LD_INT 1
37036: PUSH
37037: FOR_DOWNTO
37038: IFFALSE 37374
// begin if IsLive ( minersList [ i ] ) then
37040: LD_EXP 135
37044: PUSH
37045: LD_VAR 0 1
37049: ARRAY
37050: PPUSH
37051: CALL_OW 300
37055: IFFALSE 37083
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37057: LD_EXP 135
37061: PUSH
37062: LD_VAR 0 1
37066: ARRAY
37067: PPUSH
37068: LD_EXP 136
37072: PUSH
37073: LD_VAR 0 1
37077: ARRAY
37078: PPUSH
37079: CALL_OW 505
// if not minerMinesList [ i ] then
37083: LD_EXP 136
37087: PUSH
37088: LD_VAR 0 1
37092: ARRAY
37093: NOT
37094: IFFALSE 37098
// continue ;
37096: GO 37037
// for j := minerMinesList [ i ] downto 1 do
37098: LD_ADDR_VAR 0 2
37102: PUSH
37103: DOUBLE
37104: LD_EXP 136
37108: PUSH
37109: LD_VAR 0 1
37113: ARRAY
37114: INC
37115: ST_TO_ADDR
37116: LD_INT 1
37118: PUSH
37119: FOR_DOWNTO
37120: IFFALSE 37370
// begin side := GetSide ( minersList [ i ] ) ;
37122: LD_ADDR_VAR 0 3
37126: PUSH
37127: LD_EXP 135
37131: PUSH
37132: LD_VAR 0 1
37136: ARRAY
37137: PPUSH
37138: CALL_OW 255
37142: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37143: LD_ADDR_VAR 0 4
37147: PUSH
37148: LD_EXP 136
37152: PUSH
37153: LD_VAR 0 1
37157: ARRAY
37158: PUSH
37159: LD_VAR 0 2
37163: ARRAY
37164: PUSH
37165: LD_INT 1
37167: ARRAY
37168: PPUSH
37169: LD_EXP 136
37173: PUSH
37174: LD_VAR 0 1
37178: ARRAY
37179: PUSH
37180: LD_VAR 0 2
37184: ARRAY
37185: PUSH
37186: LD_INT 2
37188: ARRAY
37189: PPUSH
37190: CALL_OW 428
37194: ST_TO_ADDR
// if not tmp then
37195: LD_VAR 0 4
37199: NOT
37200: IFFALSE 37204
// continue ;
37202: GO 37119
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37204: LD_VAR 0 4
37208: PUSH
37209: LD_INT 81
37211: PUSH
37212: LD_VAR 0 3
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PPUSH
37221: CALL_OW 69
37225: IN
37226: PUSH
37227: LD_EXP 136
37231: PUSH
37232: LD_VAR 0 1
37236: ARRAY
37237: PUSH
37238: LD_VAR 0 2
37242: ARRAY
37243: PUSH
37244: LD_INT 1
37246: ARRAY
37247: PPUSH
37248: LD_EXP 136
37252: PUSH
37253: LD_VAR 0 1
37257: ARRAY
37258: PUSH
37259: LD_VAR 0 2
37263: ARRAY
37264: PUSH
37265: LD_INT 2
37267: ARRAY
37268: PPUSH
37269: CALL_OW 458
37273: AND
37274: IFFALSE 37368
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37276: LD_EXP 136
37280: PUSH
37281: LD_VAR 0 1
37285: ARRAY
37286: PUSH
37287: LD_VAR 0 2
37291: ARRAY
37292: PUSH
37293: LD_INT 1
37295: ARRAY
37296: PPUSH
37297: LD_EXP 136
37301: PUSH
37302: LD_VAR 0 1
37306: ARRAY
37307: PUSH
37308: LD_VAR 0 2
37312: ARRAY
37313: PUSH
37314: LD_INT 2
37316: ARRAY
37317: PPUSH
37318: LD_VAR 0 3
37322: PPUSH
37323: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37327: LD_ADDR_EXP 136
37331: PUSH
37332: LD_EXP 136
37336: PPUSH
37337: LD_VAR 0 1
37341: PPUSH
37342: LD_EXP 136
37346: PUSH
37347: LD_VAR 0 1
37351: ARRAY
37352: PPUSH
37353: LD_VAR 0 2
37357: PPUSH
37358: CALL_OW 3
37362: PPUSH
37363: CALL_OW 1
37367: ST_TO_ADDR
// end ; end ;
37368: GO 37119
37370: POP
37371: POP
// end ;
37372: GO 37037
37374: POP
37375: POP
// end ;
37376: PPOPN 4
37378: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37379: LD_INT 0
37381: PPUSH
37382: PPUSH
// result := false ;
37383: LD_ADDR_VAR 0 4
37387: PUSH
37388: LD_INT 0
37390: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37391: LD_VAR 0 1
37395: PPUSH
37396: CALL_OW 264
37400: PUSH
37401: LD_INT 81
37403: EQUAL
37404: NOT
37405: IFFALSE 37409
// exit ;
37407: GO 37649
// index := GetElementIndex ( minersList , unit ) ;
37409: LD_ADDR_VAR 0 5
37413: PUSH
37414: LD_EXP 135
37418: PPUSH
37419: LD_VAR 0 1
37423: PPUSH
37424: CALL 43607 0 2
37428: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37429: LD_EXP 136
37433: PUSH
37434: LD_VAR 0 5
37438: ARRAY
37439: PUSH
37440: LD_EXP 137
37444: GREATEREQUAL
37445: IFFALSE 37449
// exit ;
37447: GO 37649
// ComMoveXY ( unit , x , y ) ;
37449: LD_VAR 0 1
37453: PPUSH
37454: LD_VAR 0 2
37458: PPUSH
37459: LD_VAR 0 3
37463: PPUSH
37464: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37468: LD_INT 35
37470: PPUSH
37471: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37475: LD_VAR 0 1
37479: PPUSH
37480: LD_VAR 0 2
37484: PPUSH
37485: LD_VAR 0 3
37489: PPUSH
37490: CALL 74991 0 3
37494: NOT
37495: PUSH
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 314
37505: AND
37506: IFFALSE 37510
// exit ;
37508: GO 37649
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37510: LD_VAR 0 2
37514: PPUSH
37515: LD_VAR 0 3
37519: PPUSH
37520: CALL_OW 428
37524: PUSH
37525: LD_VAR 0 1
37529: EQUAL
37530: PUSH
37531: LD_VAR 0 1
37535: PPUSH
37536: CALL_OW 314
37540: NOT
37541: AND
37542: IFFALSE 37468
// PlaySoundXY ( x , y , PlantMine ) ;
37544: LD_VAR 0 2
37548: PPUSH
37549: LD_VAR 0 3
37553: PPUSH
37554: LD_STRING PlantMine
37556: PPUSH
37557: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37561: LD_VAR 0 2
37565: PPUSH
37566: LD_VAR 0 3
37570: PPUSH
37571: LD_VAR 0 1
37575: PPUSH
37576: CALL_OW 255
37580: PPUSH
37581: LD_INT 0
37583: PPUSH
37584: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37588: LD_ADDR_EXP 136
37592: PUSH
37593: LD_EXP 136
37597: PPUSH
37598: LD_VAR 0 5
37602: PUSH
37603: LD_EXP 136
37607: PUSH
37608: LD_VAR 0 5
37612: ARRAY
37613: PUSH
37614: LD_INT 1
37616: PLUS
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PPUSH
37622: LD_VAR 0 2
37626: PUSH
37627: LD_VAR 0 3
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PPUSH
37636: CALL 43822 0 3
37640: ST_TO_ADDR
// result := true ;
37641: LD_ADDR_VAR 0 4
37645: PUSH
37646: LD_INT 1
37648: ST_TO_ADDR
// end ;
37649: LD_VAR 0 4
37653: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37654: LD_INT 0
37656: PPUSH
37657: PPUSH
37658: PPUSH
// if not unit in minersList then
37659: LD_VAR 0 1
37663: PUSH
37664: LD_EXP 135
37668: IN
37669: NOT
37670: IFFALSE 37674
// exit ;
37672: GO 38066
// index := GetElementIndex ( minersList , unit ) ;
37674: LD_ADDR_VAR 0 6
37678: PUSH
37679: LD_EXP 135
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL 43607 0 2
37693: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37694: LD_ADDR_VAR 0 5
37698: PUSH
37699: DOUBLE
37700: LD_EXP 136
37704: PUSH
37705: LD_VAR 0 6
37709: ARRAY
37710: INC
37711: ST_TO_ADDR
37712: LD_INT 1
37714: PUSH
37715: FOR_DOWNTO
37716: IFFALSE 37877
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37718: LD_EXP 136
37722: PUSH
37723: LD_VAR 0 6
37727: ARRAY
37728: PUSH
37729: LD_VAR 0 5
37733: ARRAY
37734: PUSH
37735: LD_INT 1
37737: ARRAY
37738: PUSH
37739: LD_VAR 0 2
37743: EQUAL
37744: PUSH
37745: LD_EXP 136
37749: PUSH
37750: LD_VAR 0 6
37754: ARRAY
37755: PUSH
37756: LD_VAR 0 5
37760: ARRAY
37761: PUSH
37762: LD_INT 2
37764: ARRAY
37765: PUSH
37766: LD_VAR 0 3
37770: EQUAL
37771: AND
37772: IFFALSE 37875
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37774: LD_EXP 136
37778: PUSH
37779: LD_VAR 0 6
37783: ARRAY
37784: PUSH
37785: LD_VAR 0 5
37789: ARRAY
37790: PUSH
37791: LD_INT 1
37793: ARRAY
37794: PPUSH
37795: LD_EXP 136
37799: PUSH
37800: LD_VAR 0 6
37804: ARRAY
37805: PUSH
37806: LD_VAR 0 5
37810: ARRAY
37811: PUSH
37812: LD_INT 2
37814: ARRAY
37815: PPUSH
37816: LD_VAR 0 1
37820: PPUSH
37821: CALL_OW 255
37825: PPUSH
37826: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37830: LD_ADDR_EXP 136
37834: PUSH
37835: LD_EXP 136
37839: PPUSH
37840: LD_VAR 0 6
37844: PPUSH
37845: LD_EXP 136
37849: PUSH
37850: LD_VAR 0 6
37854: ARRAY
37855: PPUSH
37856: LD_VAR 0 5
37860: PPUSH
37861: CALL_OW 3
37865: PPUSH
37866: CALL_OW 1
37870: ST_TO_ADDR
// exit ;
37871: POP
37872: POP
37873: GO 38066
// end ; end ;
37875: GO 37715
37877: POP
37878: POP
// for i := minerMinesList [ index ] downto 1 do
37879: LD_ADDR_VAR 0 5
37883: PUSH
37884: DOUBLE
37885: LD_EXP 136
37889: PUSH
37890: LD_VAR 0 6
37894: ARRAY
37895: INC
37896: ST_TO_ADDR
37897: LD_INT 1
37899: PUSH
37900: FOR_DOWNTO
37901: IFFALSE 38064
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37903: LD_EXP 136
37907: PUSH
37908: LD_VAR 0 6
37912: ARRAY
37913: PUSH
37914: LD_VAR 0 5
37918: ARRAY
37919: PUSH
37920: LD_INT 1
37922: ARRAY
37923: PPUSH
37924: LD_EXP 136
37928: PUSH
37929: LD_VAR 0 6
37933: ARRAY
37934: PUSH
37935: LD_VAR 0 5
37939: ARRAY
37940: PUSH
37941: LD_INT 2
37943: ARRAY
37944: PPUSH
37945: LD_VAR 0 2
37949: PPUSH
37950: LD_VAR 0 3
37954: PPUSH
37955: CALL_OW 298
37959: PUSH
37960: LD_INT 6
37962: LESS
37963: IFFALSE 38062
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37965: LD_EXP 136
37969: PUSH
37970: LD_VAR 0 6
37974: ARRAY
37975: PUSH
37976: LD_VAR 0 5
37980: ARRAY
37981: PUSH
37982: LD_INT 1
37984: ARRAY
37985: PPUSH
37986: LD_EXP 136
37990: PUSH
37991: LD_VAR 0 6
37995: ARRAY
37996: PUSH
37997: LD_VAR 0 5
38001: ARRAY
38002: PUSH
38003: LD_INT 2
38005: ARRAY
38006: PPUSH
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 255
38016: PPUSH
38017: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38021: LD_ADDR_EXP 136
38025: PUSH
38026: LD_EXP 136
38030: PPUSH
38031: LD_VAR 0 6
38035: PPUSH
38036: LD_EXP 136
38040: PUSH
38041: LD_VAR 0 6
38045: ARRAY
38046: PPUSH
38047: LD_VAR 0 5
38051: PPUSH
38052: CALL_OW 3
38056: PPUSH
38057: CALL_OW 1
38061: ST_TO_ADDR
// end ; end ;
38062: GO 37900
38064: POP
38065: POP
// end ;
38066: LD_VAR 0 4
38070: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38071: LD_INT 0
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38082: LD_VAR 0 1
38086: PPUSH
38087: CALL_OW 264
38091: PUSH
38092: LD_INT 81
38094: EQUAL
38095: NOT
38096: PUSH
38097: LD_VAR 0 1
38101: PUSH
38102: LD_EXP 135
38106: IN
38107: NOT
38108: OR
38109: IFFALSE 38113
// exit ;
38111: GO 38435
// index := GetElementIndex ( minersList , unit ) ;
38113: LD_ADDR_VAR 0 6
38117: PUSH
38118: LD_EXP 135
38122: PPUSH
38123: LD_VAR 0 1
38127: PPUSH
38128: CALL 43607 0 2
38132: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38133: LD_ADDR_VAR 0 8
38137: PUSH
38138: LD_EXP 137
38142: PUSH
38143: LD_EXP 136
38147: PUSH
38148: LD_VAR 0 6
38152: ARRAY
38153: MINUS
38154: ST_TO_ADDR
// if not minesFreeAmount then
38155: LD_VAR 0 8
38159: NOT
38160: IFFALSE 38164
// exit ;
38162: GO 38435
// tmp := [ ] ;
38164: LD_ADDR_VAR 0 7
38168: PUSH
38169: EMPTY
38170: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38171: LD_ADDR_VAR 0 5
38175: PUSH
38176: DOUBLE
38177: LD_INT 1
38179: DEC
38180: ST_TO_ADDR
38181: LD_VAR 0 8
38185: PUSH
38186: FOR_TO
38187: IFFALSE 38382
// begin _d := rand ( 0 , 5 ) ;
38189: LD_ADDR_VAR 0 11
38193: PUSH
38194: LD_INT 0
38196: PPUSH
38197: LD_INT 5
38199: PPUSH
38200: CALL_OW 12
38204: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38205: LD_ADDR_VAR 0 12
38209: PUSH
38210: LD_INT 2
38212: PPUSH
38213: LD_INT 6
38215: PPUSH
38216: CALL_OW 12
38220: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38221: LD_ADDR_VAR 0 9
38225: PUSH
38226: LD_VAR 0 2
38230: PPUSH
38231: LD_VAR 0 11
38235: PPUSH
38236: LD_VAR 0 12
38240: PPUSH
38241: CALL_OW 272
38245: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38246: LD_ADDR_VAR 0 10
38250: PUSH
38251: LD_VAR 0 3
38255: PPUSH
38256: LD_VAR 0 11
38260: PPUSH
38261: LD_VAR 0 12
38265: PPUSH
38266: CALL_OW 273
38270: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38271: LD_VAR 0 9
38275: PPUSH
38276: LD_VAR 0 10
38280: PPUSH
38281: CALL_OW 488
38285: PUSH
38286: LD_VAR 0 9
38290: PUSH
38291: LD_VAR 0 10
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_VAR 0 7
38304: IN
38305: NOT
38306: AND
38307: PUSH
38308: LD_VAR 0 9
38312: PPUSH
38313: LD_VAR 0 10
38317: PPUSH
38318: CALL_OW 458
38322: NOT
38323: AND
38324: IFFALSE 38366
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38326: LD_ADDR_VAR 0 7
38330: PUSH
38331: LD_VAR 0 7
38335: PPUSH
38336: LD_VAR 0 7
38340: PUSH
38341: LD_INT 1
38343: PLUS
38344: PPUSH
38345: LD_VAR 0 9
38349: PUSH
38350: LD_VAR 0 10
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PPUSH
38359: CALL_OW 1
38363: ST_TO_ADDR
38364: GO 38380
// i := i - 1 ;
38366: LD_ADDR_VAR 0 5
38370: PUSH
38371: LD_VAR 0 5
38375: PUSH
38376: LD_INT 1
38378: MINUS
38379: ST_TO_ADDR
// end ;
38380: GO 38186
38382: POP
38383: POP
// for i in tmp do
38384: LD_ADDR_VAR 0 5
38388: PUSH
38389: LD_VAR 0 7
38393: PUSH
38394: FOR_IN
38395: IFFALSE 38433
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38397: LD_VAR 0 1
38401: PPUSH
38402: LD_VAR 0 5
38406: PUSH
38407: LD_INT 1
38409: ARRAY
38410: PPUSH
38411: LD_VAR 0 5
38415: PUSH
38416: LD_INT 2
38418: ARRAY
38419: PPUSH
38420: CALL 37379 0 3
38424: NOT
38425: IFFALSE 38431
// exit ;
38427: POP
38428: POP
38429: GO 38435
38431: GO 38394
38433: POP
38434: POP
// end ;
38435: LD_VAR 0 4
38439: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38440: LD_INT 0
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
// if not GetClass ( unit ) = class_sniper then
38449: LD_VAR 0 1
38453: PPUSH
38454: CALL_OW 257
38458: PUSH
38459: LD_INT 5
38461: EQUAL
38462: NOT
38463: IFFALSE 38467
// exit ;
38465: GO 38855
// dist := 8 ;
38467: LD_ADDR_VAR 0 5
38471: PUSH
38472: LD_INT 8
38474: ST_TO_ADDR
// viewRange := 12 ;
38475: LD_ADDR_VAR 0 7
38479: PUSH
38480: LD_INT 12
38482: ST_TO_ADDR
// side := GetSide ( unit ) ;
38483: LD_ADDR_VAR 0 6
38487: PUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 255
38497: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38498: LD_INT 61
38500: PPUSH
38501: LD_VAR 0 6
38505: PPUSH
38506: CALL_OW 321
38510: PUSH
38511: LD_INT 2
38513: EQUAL
38514: IFFALSE 38524
// viewRange := 16 ;
38516: LD_ADDR_VAR 0 7
38520: PUSH
38521: LD_INT 16
38523: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38524: LD_VAR 0 1
38528: PPUSH
38529: LD_VAR 0 2
38533: PPUSH
38534: LD_VAR 0 3
38538: PPUSH
38539: CALL_OW 297
38543: PUSH
38544: LD_VAR 0 5
38548: GREATER
38549: IFFALSE 38628
// begin ComMoveXY ( unit , x , y ) ;
38551: LD_VAR 0 1
38555: PPUSH
38556: LD_VAR 0 2
38560: PPUSH
38561: LD_VAR 0 3
38565: PPUSH
38566: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38570: LD_INT 35
38572: PPUSH
38573: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38577: LD_VAR 0 1
38581: PPUSH
38582: LD_VAR 0 2
38586: PPUSH
38587: LD_VAR 0 3
38591: PPUSH
38592: CALL 74991 0 3
38596: NOT
38597: IFFALSE 38601
// exit ;
38599: GO 38855
// until GetDistUnitXY ( unit , x , y ) < dist ;
38601: LD_VAR 0 1
38605: PPUSH
38606: LD_VAR 0 2
38610: PPUSH
38611: LD_VAR 0 3
38615: PPUSH
38616: CALL_OW 297
38620: PUSH
38621: LD_VAR 0 5
38625: LESS
38626: IFFALSE 38570
// end ; ComTurnXY ( unit , x , y ) ;
38628: LD_VAR 0 1
38632: PPUSH
38633: LD_VAR 0 2
38637: PPUSH
38638: LD_VAR 0 3
38642: PPUSH
38643: CALL_OW 118
// wait ( 5 ) ;
38647: LD_INT 5
38649: PPUSH
38650: CALL_OW 67
// _d := GetDir ( unit ) ;
38654: LD_ADDR_VAR 0 10
38658: PUSH
38659: LD_VAR 0 1
38663: PPUSH
38664: CALL_OW 254
38668: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38669: LD_ADDR_VAR 0 8
38673: PUSH
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL_OW 250
38683: PPUSH
38684: LD_VAR 0 10
38688: PPUSH
38689: LD_VAR 0 5
38693: PPUSH
38694: CALL_OW 272
38698: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38699: LD_ADDR_VAR 0 9
38703: PUSH
38704: LD_VAR 0 1
38708: PPUSH
38709: CALL_OW 251
38713: PPUSH
38714: LD_VAR 0 10
38718: PPUSH
38719: LD_VAR 0 5
38723: PPUSH
38724: CALL_OW 273
38728: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38729: LD_VAR 0 8
38733: PPUSH
38734: LD_VAR 0 9
38738: PPUSH
38739: CALL_OW 488
38743: NOT
38744: IFFALSE 38748
// exit ;
38746: GO 38855
// ComAnimCustom ( unit , 1 ) ;
38748: LD_VAR 0 1
38752: PPUSH
38753: LD_INT 1
38755: PPUSH
38756: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38760: LD_VAR 0 8
38764: PPUSH
38765: LD_VAR 0 9
38769: PPUSH
38770: LD_VAR 0 6
38774: PPUSH
38775: LD_VAR 0 7
38779: PPUSH
38780: CALL_OW 330
// repeat wait ( 1 ) ;
38784: LD_INT 1
38786: PPUSH
38787: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38791: LD_VAR 0 1
38795: PPUSH
38796: CALL_OW 316
38800: PUSH
38801: LD_VAR 0 1
38805: PPUSH
38806: CALL_OW 314
38810: OR
38811: PUSH
38812: LD_VAR 0 1
38816: PPUSH
38817: CALL_OW 302
38821: NOT
38822: OR
38823: PUSH
38824: LD_VAR 0 1
38828: PPUSH
38829: CALL_OW 301
38833: OR
38834: IFFALSE 38784
// RemoveSeeing ( _x , _y , side ) ;
38836: LD_VAR 0 8
38840: PPUSH
38841: LD_VAR 0 9
38845: PPUSH
38846: LD_VAR 0 6
38850: PPUSH
38851: CALL_OW 331
// end ; end_of_file
38855: LD_VAR 0 4
38859: RET
// export ru_radar export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38860: LD_INT 0
38862: PPUSH
38863: PPUSH
// if exist_mode then
38864: LD_VAR 0 2
38868: IFFALSE 38893
// unit := CreateCharacter ( prefix & ident ) else
38870: LD_ADDR_VAR 0 5
38874: PUSH
38875: LD_VAR 0 3
38879: PUSH
38880: LD_VAR 0 1
38884: STR
38885: PPUSH
38886: CALL_OW 34
38890: ST_TO_ADDR
38891: GO 38908
// unit := NewCharacter ( ident ) ;
38893: LD_ADDR_VAR 0 5
38897: PUSH
38898: LD_VAR 0 1
38902: PPUSH
38903: CALL_OW 25
38907: ST_TO_ADDR
// result := unit ;
38908: LD_ADDR_VAR 0 4
38912: PUSH
38913: LD_VAR 0 5
38917: ST_TO_ADDR
// end ;
38918: LD_VAR 0 4
38922: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38923: LD_INT 0
38925: PPUSH
38926: PPUSH
// if not side or not nation then
38927: LD_VAR 0 1
38931: NOT
38932: PUSH
38933: LD_VAR 0 2
38937: NOT
38938: OR
38939: IFFALSE 38943
// exit ;
38941: GO 39711
// case nation of nation_american :
38943: LD_VAR 0 2
38947: PUSH
38948: LD_INT 1
38950: DOUBLE
38951: EQUAL
38952: IFTRUE 38956
38954: GO 39170
38956: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38957: LD_ADDR_VAR 0 4
38961: PUSH
38962: LD_INT 35
38964: PUSH
38965: LD_INT 45
38967: PUSH
38968: LD_INT 46
38970: PUSH
38971: LD_INT 47
38973: PUSH
38974: LD_INT 82
38976: PUSH
38977: LD_INT 83
38979: PUSH
38980: LD_INT 84
38982: PUSH
38983: LD_INT 85
38985: PUSH
38986: LD_INT 86
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: LD_INT 6
38997: PUSH
38998: LD_INT 15
39000: PUSH
39001: LD_INT 16
39003: PUSH
39004: LD_INT 7
39006: PUSH
39007: LD_INT 12
39009: PUSH
39010: LD_INT 13
39012: PUSH
39013: LD_INT 10
39015: PUSH
39016: LD_INT 14
39018: PUSH
39019: LD_INT 20
39021: PUSH
39022: LD_INT 21
39024: PUSH
39025: LD_INT 22
39027: PUSH
39028: LD_INT 25
39030: PUSH
39031: LD_INT 32
39033: PUSH
39034: LD_INT 27
39036: PUSH
39037: LD_INT 36
39039: PUSH
39040: LD_INT 69
39042: PUSH
39043: LD_INT 39
39045: PUSH
39046: LD_INT 34
39048: PUSH
39049: LD_INT 40
39051: PUSH
39052: LD_INT 48
39054: PUSH
39055: LD_INT 49
39057: PUSH
39058: LD_INT 50
39060: PUSH
39061: LD_INT 51
39063: PUSH
39064: LD_INT 52
39066: PUSH
39067: LD_INT 53
39069: PUSH
39070: LD_INT 54
39072: PUSH
39073: LD_INT 55
39075: PUSH
39076: LD_INT 56
39078: PUSH
39079: LD_INT 57
39081: PUSH
39082: LD_INT 58
39084: PUSH
39085: LD_INT 59
39087: PUSH
39088: LD_INT 60
39090: PUSH
39091: LD_INT 61
39093: PUSH
39094: LD_INT 62
39096: PUSH
39097: LD_INT 80
39099: PUSH
39100: LD_INT 82
39102: PUSH
39103: LD_INT 83
39105: PUSH
39106: LD_INT 84
39108: PUSH
39109: LD_INT 85
39111: PUSH
39112: LD_INT 86
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: ST_TO_ADDR
39168: GO 39635
39170: LD_INT 2
39172: DOUBLE
39173: EQUAL
39174: IFTRUE 39178
39176: GO 39404
39178: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39179: LD_ADDR_VAR 0 4
39183: PUSH
39184: LD_INT 35
39186: PUSH
39187: LD_INT 45
39189: PUSH
39190: LD_INT 46
39192: PUSH
39193: LD_INT 47
39195: PUSH
39196: LD_INT 82
39198: PUSH
39199: LD_INT 83
39201: PUSH
39202: LD_INT 84
39204: PUSH
39205: LD_INT 85
39207: PUSH
39208: LD_INT 87
39210: PUSH
39211: LD_INT 70
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 11
39219: PUSH
39220: LD_INT 3
39222: PUSH
39223: LD_INT 4
39225: PUSH
39226: LD_INT 5
39228: PUSH
39229: LD_INT 6
39231: PUSH
39232: LD_INT 15
39234: PUSH
39235: LD_INT 18
39237: PUSH
39238: LD_INT 7
39240: PUSH
39241: LD_INT 17
39243: PUSH
39244: LD_INT 8
39246: PUSH
39247: LD_INT 20
39249: PUSH
39250: LD_INT 21
39252: PUSH
39253: LD_INT 22
39255: PUSH
39256: LD_INT 72
39258: PUSH
39259: LD_INT 26
39261: PUSH
39262: LD_INT 69
39264: PUSH
39265: LD_INT 39
39267: PUSH
39268: LD_INT 40
39270: PUSH
39271: LD_INT 41
39273: PUSH
39274: LD_INT 42
39276: PUSH
39277: LD_INT 43
39279: PUSH
39280: LD_INT 48
39282: PUSH
39283: LD_INT 49
39285: PUSH
39286: LD_INT 50
39288: PUSH
39289: LD_INT 51
39291: PUSH
39292: LD_INT 52
39294: PUSH
39295: LD_INT 53
39297: PUSH
39298: LD_INT 54
39300: PUSH
39301: LD_INT 55
39303: PUSH
39304: LD_INT 56
39306: PUSH
39307: LD_INT 60
39309: PUSH
39310: LD_INT 61
39312: PUSH
39313: LD_INT 62
39315: PUSH
39316: LD_INT 66
39318: PUSH
39319: LD_INT 67
39321: PUSH
39322: LD_INT 68
39324: PUSH
39325: LD_INT 81
39327: PUSH
39328: LD_INT 82
39330: PUSH
39331: LD_INT 83
39333: PUSH
39334: LD_INT 84
39336: PUSH
39337: LD_INT 85
39339: PUSH
39340: LD_INT 87
39342: PUSH
39343: LD_INT 88
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: ST_TO_ADDR
39402: GO 39635
39404: LD_INT 3
39406: DOUBLE
39407: EQUAL
39408: IFTRUE 39412
39410: GO 39634
39412: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39413: LD_ADDR_VAR 0 4
39417: PUSH
39418: LD_INT 46
39420: PUSH
39421: LD_INT 47
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: LD_INT 82
39432: PUSH
39433: LD_INT 83
39435: PUSH
39436: LD_INT 84
39438: PUSH
39439: LD_INT 85
39441: PUSH
39442: LD_INT 86
39444: PUSH
39445: LD_INT 11
39447: PUSH
39448: LD_INT 9
39450: PUSH
39451: LD_INT 20
39453: PUSH
39454: LD_INT 19
39456: PUSH
39457: LD_INT 21
39459: PUSH
39460: LD_INT 24
39462: PUSH
39463: LD_INT 22
39465: PUSH
39466: LD_INT 25
39468: PUSH
39469: LD_INT 28
39471: PUSH
39472: LD_INT 29
39474: PUSH
39475: LD_INT 30
39477: PUSH
39478: LD_INT 31
39480: PUSH
39481: LD_INT 37
39483: PUSH
39484: LD_INT 38
39486: PUSH
39487: LD_INT 32
39489: PUSH
39490: LD_INT 27
39492: PUSH
39493: LD_INT 33
39495: PUSH
39496: LD_INT 69
39498: PUSH
39499: LD_INT 39
39501: PUSH
39502: LD_INT 34
39504: PUSH
39505: LD_INT 40
39507: PUSH
39508: LD_INT 71
39510: PUSH
39511: LD_INT 23
39513: PUSH
39514: LD_INT 44
39516: PUSH
39517: LD_INT 48
39519: PUSH
39520: LD_INT 49
39522: PUSH
39523: LD_INT 50
39525: PUSH
39526: LD_INT 51
39528: PUSH
39529: LD_INT 52
39531: PUSH
39532: LD_INT 53
39534: PUSH
39535: LD_INT 54
39537: PUSH
39538: LD_INT 55
39540: PUSH
39541: LD_INT 56
39543: PUSH
39544: LD_INT 57
39546: PUSH
39547: LD_INT 58
39549: PUSH
39550: LD_INT 59
39552: PUSH
39553: LD_INT 63
39555: PUSH
39556: LD_INT 64
39558: PUSH
39559: LD_INT 65
39561: PUSH
39562: LD_INT 82
39564: PUSH
39565: LD_INT 83
39567: PUSH
39568: LD_INT 84
39570: PUSH
39571: LD_INT 85
39573: PUSH
39574: LD_INT 86
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: ST_TO_ADDR
39632: GO 39635
39634: POP
// if state > - 1 and state < 3 then
39635: LD_VAR 0 3
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: GREATER
39644: PUSH
39645: LD_VAR 0 3
39649: PUSH
39650: LD_INT 3
39652: LESS
39653: AND
39654: IFFALSE 39711
// for i in result do
39656: LD_ADDR_VAR 0 5
39660: PUSH
39661: LD_VAR 0 4
39665: PUSH
39666: FOR_IN
39667: IFFALSE 39709
// if GetTech ( i , side ) <> state then
39669: LD_VAR 0 5
39673: PPUSH
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL_OW 321
39683: PUSH
39684: LD_VAR 0 3
39688: NONEQUAL
39689: IFFALSE 39707
// result := result diff i ;
39691: LD_ADDR_VAR 0 4
39695: PUSH
39696: LD_VAR 0 4
39700: PUSH
39701: LD_VAR 0 5
39705: DIFF
39706: ST_TO_ADDR
39707: GO 39666
39709: POP
39710: POP
// end ;
39711: LD_VAR 0 4
39715: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39716: LD_INT 0
39718: PPUSH
39719: PPUSH
39720: PPUSH
// result := true ;
39721: LD_ADDR_VAR 0 3
39725: PUSH
39726: LD_INT 1
39728: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39729: LD_ADDR_VAR 0 5
39733: PUSH
39734: LD_VAR 0 2
39738: PPUSH
39739: CALL_OW 480
39743: ST_TO_ADDR
// if not tmp then
39744: LD_VAR 0 5
39748: NOT
39749: IFFALSE 39753
// exit ;
39751: GO 39802
// for i in tmp do
39753: LD_ADDR_VAR 0 4
39757: PUSH
39758: LD_VAR 0 5
39762: PUSH
39763: FOR_IN
39764: IFFALSE 39800
// if GetTech ( i , side ) <> state_researched then
39766: LD_VAR 0 4
39770: PPUSH
39771: LD_VAR 0 1
39775: PPUSH
39776: CALL_OW 321
39780: PUSH
39781: LD_INT 2
39783: NONEQUAL
39784: IFFALSE 39798
// begin result := false ;
39786: LD_ADDR_VAR 0 3
39790: PUSH
39791: LD_INT 0
39793: ST_TO_ADDR
// exit ;
39794: POP
39795: POP
39796: GO 39802
// end ;
39798: GO 39763
39800: POP
39801: POP
// end ;
39802: LD_VAR 0 3
39806: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39807: LD_INT 0
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39822: LD_VAR 0 1
39826: NOT
39827: PUSH
39828: LD_VAR 0 1
39832: PPUSH
39833: CALL_OW 257
39837: PUSH
39838: LD_INT 9
39840: NONEQUAL
39841: OR
39842: IFFALSE 39846
// exit ;
39844: GO 40419
// side := GetSide ( unit ) ;
39846: LD_ADDR_VAR 0 9
39850: PUSH
39851: LD_VAR 0 1
39855: PPUSH
39856: CALL_OW 255
39860: ST_TO_ADDR
// tech_space := tech_spacanom ;
39861: LD_ADDR_VAR 0 12
39865: PUSH
39866: LD_INT 29
39868: ST_TO_ADDR
// tech_time := tech_taurad ;
39869: LD_ADDR_VAR 0 13
39873: PUSH
39874: LD_INT 28
39876: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39877: LD_ADDR_VAR 0 11
39881: PUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 310
39891: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39892: LD_VAR 0 11
39896: PPUSH
39897: CALL_OW 247
39901: PUSH
39902: LD_INT 2
39904: EQUAL
39905: IFFALSE 39909
// exit ;
39907: GO 40419
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39909: LD_ADDR_VAR 0 8
39913: PUSH
39914: LD_INT 81
39916: PUSH
39917: LD_VAR 0 9
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: LD_INT 21
39931: PUSH
39932: LD_INT 3
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PPUSH
39947: CALL_OW 69
39951: ST_TO_ADDR
// if not tmp then
39952: LD_VAR 0 8
39956: NOT
39957: IFFALSE 39961
// exit ;
39959: GO 40419
// if in_unit then
39961: LD_VAR 0 11
39965: IFFALSE 39989
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39967: LD_ADDR_VAR 0 10
39971: PUSH
39972: LD_VAR 0 8
39976: PPUSH
39977: LD_VAR 0 11
39981: PPUSH
39982: CALL_OW 74
39986: ST_TO_ADDR
39987: GO 40009
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39989: LD_ADDR_VAR 0 10
39993: PUSH
39994: LD_VAR 0 8
39998: PPUSH
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 74
40008: ST_TO_ADDR
// if not enemy then
40009: LD_VAR 0 10
40013: NOT
40014: IFFALSE 40018
// exit ;
40016: GO 40419
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40018: LD_VAR 0 11
40022: PUSH
40023: LD_VAR 0 11
40027: PPUSH
40028: LD_VAR 0 10
40032: PPUSH
40033: CALL_OW 296
40037: PUSH
40038: LD_INT 13
40040: GREATER
40041: AND
40042: PUSH
40043: LD_VAR 0 1
40047: PPUSH
40048: LD_VAR 0 10
40052: PPUSH
40053: CALL_OW 296
40057: PUSH
40058: LD_INT 12
40060: GREATER
40061: OR
40062: IFFALSE 40066
// exit ;
40064: GO 40419
// missile := [ 1 ] ;
40066: LD_ADDR_VAR 0 14
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: EMPTY
40075: LIST
40076: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40077: LD_VAR 0 9
40081: PPUSH
40082: LD_VAR 0 12
40086: PPUSH
40087: CALL_OW 325
40091: IFFALSE 40120
// missile := Replace ( missile , missile + 1 , 2 ) ;
40093: LD_ADDR_VAR 0 14
40097: PUSH
40098: LD_VAR 0 14
40102: PPUSH
40103: LD_VAR 0 14
40107: PUSH
40108: LD_INT 1
40110: PLUS
40111: PPUSH
40112: LD_INT 2
40114: PPUSH
40115: CALL_OW 1
40119: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40120: LD_VAR 0 9
40124: PPUSH
40125: LD_VAR 0 13
40129: PPUSH
40130: CALL_OW 325
40134: PUSH
40135: LD_VAR 0 10
40139: PPUSH
40140: CALL_OW 255
40144: PPUSH
40145: LD_VAR 0 13
40149: PPUSH
40150: CALL_OW 325
40154: NOT
40155: AND
40156: IFFALSE 40185
// missile := Replace ( missile , missile + 1 , 3 ) ;
40158: LD_ADDR_VAR 0 14
40162: PUSH
40163: LD_VAR 0 14
40167: PPUSH
40168: LD_VAR 0 14
40172: PUSH
40173: LD_INT 1
40175: PLUS
40176: PPUSH
40177: LD_INT 3
40179: PPUSH
40180: CALL_OW 1
40184: ST_TO_ADDR
// if missile < 2 then
40185: LD_VAR 0 14
40189: PUSH
40190: LD_INT 2
40192: LESS
40193: IFFALSE 40197
// exit ;
40195: GO 40419
// x := GetX ( enemy ) ;
40197: LD_ADDR_VAR 0 4
40201: PUSH
40202: LD_VAR 0 10
40206: PPUSH
40207: CALL_OW 250
40211: ST_TO_ADDR
// y := GetY ( enemy ) ;
40212: LD_ADDR_VAR 0 5
40216: PUSH
40217: LD_VAR 0 10
40221: PPUSH
40222: CALL_OW 251
40226: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40227: LD_ADDR_VAR 0 6
40231: PUSH
40232: LD_VAR 0 4
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PPUSH
40241: LD_INT 1
40243: PPUSH
40244: CALL_OW 12
40248: PLUS
40249: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40250: LD_ADDR_VAR 0 7
40254: PUSH
40255: LD_VAR 0 5
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PPUSH
40264: LD_INT 1
40266: PPUSH
40267: CALL_OW 12
40271: PLUS
40272: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40273: LD_VAR 0 6
40277: PPUSH
40278: LD_VAR 0 7
40282: PPUSH
40283: CALL_OW 488
40287: NOT
40288: IFFALSE 40310
// begin _x := x ;
40290: LD_ADDR_VAR 0 6
40294: PUSH
40295: LD_VAR 0 4
40299: ST_TO_ADDR
// _y := y ;
40300: LD_ADDR_VAR 0 7
40304: PUSH
40305: LD_VAR 0 5
40309: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40310: LD_ADDR_VAR 0 3
40314: PUSH
40315: LD_INT 1
40317: PPUSH
40318: LD_VAR 0 14
40322: PPUSH
40323: CALL_OW 12
40327: ST_TO_ADDR
// case i of 1 :
40328: LD_VAR 0 3
40332: PUSH
40333: LD_INT 1
40335: DOUBLE
40336: EQUAL
40337: IFTRUE 40341
40339: GO 40358
40341: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40342: LD_VAR 0 1
40346: PPUSH
40347: LD_VAR 0 10
40351: PPUSH
40352: CALL_OW 115
40356: GO 40419
40358: LD_INT 2
40360: DOUBLE
40361: EQUAL
40362: IFTRUE 40366
40364: GO 40388
40366: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40367: LD_VAR 0 1
40371: PPUSH
40372: LD_VAR 0 6
40376: PPUSH
40377: LD_VAR 0 7
40381: PPUSH
40382: CALL_OW 153
40386: GO 40419
40388: LD_INT 3
40390: DOUBLE
40391: EQUAL
40392: IFTRUE 40396
40394: GO 40418
40396: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40397: LD_VAR 0 1
40401: PPUSH
40402: LD_VAR 0 6
40406: PPUSH
40407: LD_VAR 0 7
40411: PPUSH
40412: CALL_OW 154
40416: GO 40419
40418: POP
// end ;
40419: LD_VAR 0 2
40423: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40424: LD_INT 0
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
// if not unit or not building then
40432: LD_VAR 0 1
40436: NOT
40437: PUSH
40438: LD_VAR 0 2
40442: NOT
40443: OR
40444: IFFALSE 40448
// exit ;
40446: GO 40606
// x := GetX ( building ) ;
40448: LD_ADDR_VAR 0 5
40452: PUSH
40453: LD_VAR 0 2
40457: PPUSH
40458: CALL_OW 250
40462: ST_TO_ADDR
// y := GetY ( building ) ;
40463: LD_ADDR_VAR 0 6
40467: PUSH
40468: LD_VAR 0 2
40472: PPUSH
40473: CALL_OW 251
40477: ST_TO_ADDR
// for i = 0 to 5 do
40478: LD_ADDR_VAR 0 4
40482: PUSH
40483: DOUBLE
40484: LD_INT 0
40486: DEC
40487: ST_TO_ADDR
40488: LD_INT 5
40490: PUSH
40491: FOR_TO
40492: IFFALSE 40604
// begin _x := ShiftX ( x , i , 3 ) ;
40494: LD_ADDR_VAR 0 7
40498: PUSH
40499: LD_VAR 0 5
40503: PPUSH
40504: LD_VAR 0 4
40508: PPUSH
40509: LD_INT 3
40511: PPUSH
40512: CALL_OW 272
40516: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40517: LD_ADDR_VAR 0 8
40521: PUSH
40522: LD_VAR 0 6
40526: PPUSH
40527: LD_VAR 0 4
40531: PPUSH
40532: LD_INT 3
40534: PPUSH
40535: CALL_OW 273
40539: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40540: LD_VAR 0 7
40544: PPUSH
40545: LD_VAR 0 8
40549: PPUSH
40550: CALL_OW 488
40554: NOT
40555: IFFALSE 40559
// continue ;
40557: GO 40491
// if HexInfo ( _x , _y ) = 0 then
40559: LD_VAR 0 7
40563: PPUSH
40564: LD_VAR 0 8
40568: PPUSH
40569: CALL_OW 428
40573: PUSH
40574: LD_INT 0
40576: EQUAL
40577: IFFALSE 40602
// begin ComMoveXY ( unit , _x , _y ) ;
40579: LD_VAR 0 1
40583: PPUSH
40584: LD_VAR 0 7
40588: PPUSH
40589: LD_VAR 0 8
40593: PPUSH
40594: CALL_OW 111
// exit ;
40598: POP
40599: POP
40600: GO 40606
// end ; end ;
40602: GO 40491
40604: POP
40605: POP
// end ;
40606: LD_VAR 0 3
40610: RET
// export function ScanBase ( side , base_area ) ; begin
40611: LD_INT 0
40613: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40614: LD_ADDR_VAR 0 3
40618: PUSH
40619: LD_VAR 0 2
40623: PPUSH
40624: LD_INT 81
40626: PUSH
40627: LD_VAR 0 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PPUSH
40636: CALL_OW 70
40640: ST_TO_ADDR
// end ;
40641: LD_VAR 0 3
40645: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40646: LD_INT 0
40648: PPUSH
40649: PPUSH
40650: PPUSH
40651: PPUSH
// result := false ;
40652: LD_ADDR_VAR 0 2
40656: PUSH
40657: LD_INT 0
40659: ST_TO_ADDR
// side := GetSide ( unit ) ;
40660: LD_ADDR_VAR 0 3
40664: PUSH
40665: LD_VAR 0 1
40669: PPUSH
40670: CALL_OW 255
40674: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40675: LD_ADDR_VAR 0 4
40679: PUSH
40680: LD_VAR 0 1
40684: PPUSH
40685: CALL_OW 248
40689: ST_TO_ADDR
// case nat of 1 :
40690: LD_VAR 0 4
40694: PUSH
40695: LD_INT 1
40697: DOUBLE
40698: EQUAL
40699: IFTRUE 40703
40701: GO 40714
40703: POP
// tech := tech_lassight ; 2 :
40704: LD_ADDR_VAR 0 5
40708: PUSH
40709: LD_INT 12
40711: ST_TO_ADDR
40712: GO 40753
40714: LD_INT 2
40716: DOUBLE
40717: EQUAL
40718: IFTRUE 40722
40720: GO 40733
40722: POP
// tech := tech_mortar ; 3 :
40723: LD_ADDR_VAR 0 5
40727: PUSH
40728: LD_INT 41
40730: ST_TO_ADDR
40731: GO 40753
40733: LD_INT 3
40735: DOUBLE
40736: EQUAL
40737: IFTRUE 40741
40739: GO 40752
40741: POP
// tech := tech_bazooka ; end ;
40742: LD_ADDR_VAR 0 5
40746: PUSH
40747: LD_INT 44
40749: ST_TO_ADDR
40750: GO 40753
40752: POP
// if Researched ( side , tech ) then
40753: LD_VAR 0 3
40757: PPUSH
40758: LD_VAR 0 5
40762: PPUSH
40763: CALL_OW 325
40767: IFFALSE 40794
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40769: LD_ADDR_VAR 0 2
40773: PUSH
40774: LD_INT 5
40776: PUSH
40777: LD_INT 8
40779: PUSH
40780: LD_INT 9
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: LIST
40787: PUSH
40788: LD_VAR 0 4
40792: ARRAY
40793: ST_TO_ADDR
// end ;
40794: LD_VAR 0 2
40798: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40799: LD_INT 0
40801: PPUSH
40802: PPUSH
40803: PPUSH
// if not mines then
40804: LD_VAR 0 2
40808: NOT
40809: IFFALSE 40813
// exit ;
40811: GO 40957
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40813: LD_ADDR_VAR 0 5
40817: PUSH
40818: LD_INT 81
40820: PUSH
40821: LD_VAR 0 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 3
40832: PUSH
40833: LD_INT 21
40835: PUSH
40836: LD_INT 3
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PPUSH
40851: CALL_OW 69
40855: ST_TO_ADDR
// for i in mines do
40856: LD_ADDR_VAR 0 4
40860: PUSH
40861: LD_VAR 0 2
40865: PUSH
40866: FOR_IN
40867: IFFALSE 40955
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40869: LD_VAR 0 4
40873: PUSH
40874: LD_INT 1
40876: ARRAY
40877: PPUSH
40878: LD_VAR 0 4
40882: PUSH
40883: LD_INT 2
40885: ARRAY
40886: PPUSH
40887: CALL_OW 458
40891: NOT
40892: IFFALSE 40896
// continue ;
40894: GO 40866
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40896: LD_VAR 0 4
40900: PUSH
40901: LD_INT 1
40903: ARRAY
40904: PPUSH
40905: LD_VAR 0 4
40909: PUSH
40910: LD_INT 2
40912: ARRAY
40913: PPUSH
40914: CALL_OW 428
40918: PUSH
40919: LD_VAR 0 5
40923: IN
40924: IFFALSE 40953
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40926: LD_VAR 0 4
40930: PUSH
40931: LD_INT 1
40933: ARRAY
40934: PPUSH
40935: LD_VAR 0 4
40939: PUSH
40940: LD_INT 2
40942: ARRAY
40943: PPUSH
40944: LD_VAR 0 1
40948: PPUSH
40949: CALL_OW 456
// end ;
40953: GO 40866
40955: POP
40956: POP
// end ;
40957: LD_VAR 0 3
40961: RET
// export function Count ( array ) ; begin
40962: LD_INT 0
40964: PPUSH
// result := array + 0 ;
40965: LD_ADDR_VAR 0 2
40969: PUSH
40970: LD_VAR 0 1
40974: PUSH
40975: LD_INT 0
40977: PLUS
40978: ST_TO_ADDR
// end ;
40979: LD_VAR 0 2
40983: RET
// export function IsEmpty ( building ) ; begin
40984: LD_INT 0
40986: PPUSH
// if not building then
40987: LD_VAR 0 1
40991: NOT
40992: IFFALSE 40996
// exit ;
40994: GO 41039
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40996: LD_ADDR_VAR 0 2
41000: PUSH
41001: LD_VAR 0 1
41005: PUSH
41006: LD_INT 22
41008: PUSH
41009: LD_VAR 0 1
41013: PPUSH
41014: CALL_OW 255
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 58
41025: PUSH
41026: EMPTY
41027: LIST
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PPUSH
41033: CALL_OW 69
41037: IN
41038: ST_TO_ADDR
// end ;
41039: LD_VAR 0 2
41043: RET
// export function IsNotFull ( building ) ; var places ; begin
41044: LD_INT 0
41046: PPUSH
41047: PPUSH
// if not building then
41048: LD_VAR 0 1
41052: NOT
41053: IFFALSE 41057
// exit ;
41055: GO 41085
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41057: LD_ADDR_VAR 0 2
41061: PUSH
41062: LD_VAR 0 1
41066: PPUSH
41067: LD_INT 3
41069: PUSH
41070: LD_INT 62
41072: PUSH
41073: EMPTY
41074: LIST
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PPUSH
41080: CALL_OW 72
41084: ST_TO_ADDR
// end ;
41085: LD_VAR 0 2
41089: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41090: LD_INT 0
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
// tmp := [ ] ;
41096: LD_ADDR_VAR 0 3
41100: PUSH
41101: EMPTY
41102: ST_TO_ADDR
// list := [ ] ;
41103: LD_ADDR_VAR 0 5
41107: PUSH
41108: EMPTY
41109: ST_TO_ADDR
// for i = 16 to 25 do
41110: LD_ADDR_VAR 0 4
41114: PUSH
41115: DOUBLE
41116: LD_INT 16
41118: DEC
41119: ST_TO_ADDR
41120: LD_INT 25
41122: PUSH
41123: FOR_TO
41124: IFFALSE 41197
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41126: LD_ADDR_VAR 0 3
41130: PUSH
41131: LD_VAR 0 3
41135: PUSH
41136: LD_INT 22
41138: PUSH
41139: LD_VAR 0 1
41143: PPUSH
41144: CALL_OW 255
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 91
41155: PUSH
41156: LD_VAR 0 1
41160: PUSH
41161: LD_INT 6
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 30
41171: PUSH
41172: LD_VAR 0 4
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: LIST
41185: PUSH
41186: EMPTY
41187: LIST
41188: PPUSH
41189: CALL_OW 69
41193: ADD
41194: ST_TO_ADDR
41195: GO 41123
41197: POP
41198: POP
// for i = 1 to tmp do
41199: LD_ADDR_VAR 0 4
41203: PUSH
41204: DOUBLE
41205: LD_INT 1
41207: DEC
41208: ST_TO_ADDR
41209: LD_VAR 0 3
41213: PUSH
41214: FOR_TO
41215: IFFALSE 41303
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41217: LD_ADDR_VAR 0 5
41221: PUSH
41222: LD_VAR 0 5
41226: PUSH
41227: LD_VAR 0 3
41231: PUSH
41232: LD_VAR 0 4
41236: ARRAY
41237: PPUSH
41238: CALL_OW 266
41242: PUSH
41243: LD_VAR 0 3
41247: PUSH
41248: LD_VAR 0 4
41252: ARRAY
41253: PPUSH
41254: CALL_OW 250
41258: PUSH
41259: LD_VAR 0 3
41263: PUSH
41264: LD_VAR 0 4
41268: ARRAY
41269: PPUSH
41270: CALL_OW 251
41274: PUSH
41275: LD_VAR 0 3
41279: PUSH
41280: LD_VAR 0 4
41284: ARRAY
41285: PPUSH
41286: CALL_OW 254
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: PUSH
41297: EMPTY
41298: LIST
41299: ADD
41300: ST_TO_ADDR
41301: GO 41214
41303: POP
41304: POP
// result := list ;
41305: LD_ADDR_VAR 0 2
41309: PUSH
41310: LD_VAR 0 5
41314: ST_TO_ADDR
// end ;
41315: LD_VAR 0 2
41319: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41320: LD_INT 0
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
// if not factory then
41329: LD_VAR 0 1
41333: NOT
41334: IFFALSE 41338
// exit ;
41336: GO 41931
// if control = control_apeman then
41338: LD_VAR 0 4
41342: PUSH
41343: LD_INT 5
41345: EQUAL
41346: IFFALSE 41455
// begin tmp := UnitsInside ( factory ) ;
41348: LD_ADDR_VAR 0 8
41352: PUSH
41353: LD_VAR 0 1
41357: PPUSH
41358: CALL_OW 313
41362: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41363: LD_VAR 0 8
41367: PPUSH
41368: LD_INT 25
41370: PUSH
41371: LD_INT 12
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PPUSH
41378: CALL_OW 72
41382: NOT
41383: IFFALSE 41393
// control := control_manual ;
41385: LD_ADDR_VAR 0 4
41389: PUSH
41390: LD_INT 1
41392: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41393: LD_ADDR_VAR 0 8
41397: PUSH
41398: LD_VAR 0 1
41402: PPUSH
41403: CALL 41090 0 1
41407: ST_TO_ADDR
// if tmp then
41408: LD_VAR 0 8
41412: IFFALSE 41455
// begin for i in tmp do
41414: LD_ADDR_VAR 0 7
41418: PUSH
41419: LD_VAR 0 8
41423: PUSH
41424: FOR_IN
41425: IFFALSE 41453
// if i [ 1 ] = b_ext_radio then
41427: LD_VAR 0 7
41431: PUSH
41432: LD_INT 1
41434: ARRAY
41435: PUSH
41436: LD_INT 22
41438: EQUAL
41439: IFFALSE 41451
// begin control := control_remote ;
41441: LD_ADDR_VAR 0 4
41445: PUSH
41446: LD_INT 2
41448: ST_TO_ADDR
// break ;
41449: GO 41453
// end ;
41451: GO 41424
41453: POP
41454: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41455: LD_VAR 0 1
41459: PPUSH
41460: LD_VAR 0 2
41464: PPUSH
41465: LD_VAR 0 3
41469: PPUSH
41470: LD_VAR 0 4
41474: PPUSH
41475: LD_VAR 0 5
41479: PPUSH
41480: CALL_OW 448
41484: IFFALSE 41519
// begin result := [ chassis , engine , control , weapon ] ;
41486: LD_ADDR_VAR 0 6
41490: PUSH
41491: LD_VAR 0 2
41495: PUSH
41496: LD_VAR 0 3
41500: PUSH
41501: LD_VAR 0 4
41505: PUSH
41506: LD_VAR 0 5
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: ST_TO_ADDR
// exit ;
41517: GO 41931
// end ; _chassis := AvailableChassisList ( factory ) ;
41519: LD_ADDR_VAR 0 9
41523: PUSH
41524: LD_VAR 0 1
41528: PPUSH
41529: CALL_OW 475
41533: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41534: LD_ADDR_VAR 0 11
41538: PUSH
41539: LD_VAR 0 1
41543: PPUSH
41544: CALL_OW 476
41548: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41549: LD_ADDR_VAR 0 12
41553: PUSH
41554: LD_VAR 0 1
41558: PPUSH
41559: CALL_OW 477
41563: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41564: LD_ADDR_VAR 0 10
41568: PUSH
41569: LD_VAR 0 1
41573: PPUSH
41574: CALL_OW 478
41578: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41579: LD_VAR 0 9
41583: NOT
41584: PUSH
41585: LD_VAR 0 11
41589: NOT
41590: OR
41591: PUSH
41592: LD_VAR 0 12
41596: NOT
41597: OR
41598: PUSH
41599: LD_VAR 0 10
41603: NOT
41604: OR
41605: IFFALSE 41640
// begin result := [ chassis , engine , control , weapon ] ;
41607: LD_ADDR_VAR 0 6
41611: PUSH
41612: LD_VAR 0 2
41616: PUSH
41617: LD_VAR 0 3
41621: PUSH
41622: LD_VAR 0 4
41626: PUSH
41627: LD_VAR 0 5
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: ST_TO_ADDR
// exit ;
41638: GO 41931
// end ; if not chassis in _chassis then
41640: LD_VAR 0 2
41644: PUSH
41645: LD_VAR 0 9
41649: IN
41650: NOT
41651: IFFALSE 41677
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41653: LD_ADDR_VAR 0 2
41657: PUSH
41658: LD_VAR 0 9
41662: PUSH
41663: LD_INT 1
41665: PPUSH
41666: LD_VAR 0 9
41670: PPUSH
41671: CALL_OW 12
41675: ARRAY
41676: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41677: LD_VAR 0 2
41681: PPUSH
41682: LD_VAR 0 3
41686: PPUSH
41687: CALL 41936 0 2
41691: NOT
41692: IFFALSE 41751
// repeat engine := _engine [ 1 ] ;
41694: LD_ADDR_VAR 0 3
41698: PUSH
41699: LD_VAR 0 11
41703: PUSH
41704: LD_INT 1
41706: ARRAY
41707: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41708: LD_ADDR_VAR 0 11
41712: PUSH
41713: LD_VAR 0 11
41717: PPUSH
41718: LD_INT 1
41720: PPUSH
41721: CALL_OW 3
41725: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41726: LD_VAR 0 2
41730: PPUSH
41731: LD_VAR 0 3
41735: PPUSH
41736: CALL 41936 0 2
41740: PUSH
41741: LD_VAR 0 11
41745: PUSH
41746: EMPTY
41747: EQUAL
41748: OR
41749: IFFALSE 41694
// if not control in _control then
41751: LD_VAR 0 4
41755: PUSH
41756: LD_VAR 0 12
41760: IN
41761: NOT
41762: IFFALSE 41788
// control := _control [ rand ( 1 , _control ) ] ;
41764: LD_ADDR_VAR 0 4
41768: PUSH
41769: LD_VAR 0 12
41773: PUSH
41774: LD_INT 1
41776: PPUSH
41777: LD_VAR 0 12
41781: PPUSH
41782: CALL_OW 12
41786: ARRAY
41787: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41788: LD_VAR 0 2
41792: PPUSH
41793: LD_VAR 0 5
41797: PPUSH
41798: CALL 42156 0 2
41802: NOT
41803: IFFALSE 41862
// repeat weapon := _weapon [ 1 ] ;
41805: LD_ADDR_VAR 0 5
41809: PUSH
41810: LD_VAR 0 10
41814: PUSH
41815: LD_INT 1
41817: ARRAY
41818: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41819: LD_ADDR_VAR 0 10
41823: PUSH
41824: LD_VAR 0 10
41828: PPUSH
41829: LD_INT 1
41831: PPUSH
41832: CALL_OW 3
41836: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41837: LD_VAR 0 2
41841: PPUSH
41842: LD_VAR 0 5
41846: PPUSH
41847: CALL 42156 0 2
41851: PUSH
41852: LD_VAR 0 10
41856: PUSH
41857: EMPTY
41858: EQUAL
41859: OR
41860: IFFALSE 41805
// result := [ ] ;
41862: LD_ADDR_VAR 0 6
41866: PUSH
41867: EMPTY
41868: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41869: LD_VAR 0 1
41873: PPUSH
41874: LD_VAR 0 2
41878: PPUSH
41879: LD_VAR 0 3
41883: PPUSH
41884: LD_VAR 0 4
41888: PPUSH
41889: LD_VAR 0 5
41893: PPUSH
41894: CALL_OW 448
41898: IFFALSE 41931
// result := [ chassis , engine , control , weapon ] ;
41900: LD_ADDR_VAR 0 6
41904: PUSH
41905: LD_VAR 0 2
41909: PUSH
41910: LD_VAR 0 3
41914: PUSH
41915: LD_VAR 0 4
41919: PUSH
41920: LD_VAR 0 5
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: ST_TO_ADDR
// end ;
41931: LD_VAR 0 6
41935: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41936: LD_INT 0
41938: PPUSH
// if not chassis or not engine then
41939: LD_VAR 0 1
41943: NOT
41944: PUSH
41945: LD_VAR 0 2
41949: NOT
41950: OR
41951: IFFALSE 41955
// exit ;
41953: GO 42151
// case engine of engine_solar :
41955: LD_VAR 0 2
41959: PUSH
41960: LD_INT 2
41962: DOUBLE
41963: EQUAL
41964: IFTRUE 41968
41966: GO 42006
41968: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41969: LD_ADDR_VAR 0 3
41973: PUSH
41974: LD_INT 11
41976: PUSH
41977: LD_INT 12
41979: PUSH
41980: LD_INT 13
41982: PUSH
41983: LD_INT 14
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: LD_INT 3
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: ST_TO_ADDR
42004: GO 42135
42006: LD_INT 1
42008: DOUBLE
42009: EQUAL
42010: IFTRUE 42014
42012: GO 42076
42014: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42015: LD_ADDR_VAR 0 3
42019: PUSH
42020: LD_INT 11
42022: PUSH
42023: LD_INT 12
42025: PUSH
42026: LD_INT 13
42028: PUSH
42029: LD_INT 14
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 4
42043: PUSH
42044: LD_INT 5
42046: PUSH
42047: LD_INT 21
42049: PUSH
42050: LD_INT 23
42052: PUSH
42053: LD_INT 22
42055: PUSH
42056: LD_INT 24
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: ST_TO_ADDR
42074: GO 42135
42076: LD_INT 3
42078: DOUBLE
42079: EQUAL
42080: IFTRUE 42084
42082: GO 42134
42084: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42085: LD_ADDR_VAR 0 3
42089: PUSH
42090: LD_INT 13
42092: PUSH
42093: LD_INT 14
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 3
42101: PUSH
42102: LD_INT 4
42104: PUSH
42105: LD_INT 5
42107: PUSH
42108: LD_INT 21
42110: PUSH
42111: LD_INT 22
42113: PUSH
42114: LD_INT 23
42116: PUSH
42117: LD_INT 24
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: ST_TO_ADDR
42132: GO 42135
42134: POP
// result := ( chassis in result ) ;
42135: LD_ADDR_VAR 0 3
42139: PUSH
42140: LD_VAR 0 1
42144: PUSH
42145: LD_VAR 0 3
42149: IN
42150: ST_TO_ADDR
// end ;
42151: LD_VAR 0 3
42155: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42156: LD_INT 0
42158: PPUSH
// if not chassis or not weapon then
42159: LD_VAR 0 1
42163: NOT
42164: PUSH
42165: LD_VAR 0 2
42169: NOT
42170: OR
42171: IFFALSE 42175
// exit ;
42173: GO 43235
// case weapon of us_machine_gun :
42175: LD_VAR 0 2
42179: PUSH
42180: LD_INT 2
42182: DOUBLE
42183: EQUAL
42184: IFTRUE 42188
42186: GO 42218
42188: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42189: LD_ADDR_VAR 0 3
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: LD_INT 4
42205: PUSH
42206: LD_INT 5
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: ST_TO_ADDR
42216: GO 43219
42218: LD_INT 3
42220: DOUBLE
42221: EQUAL
42222: IFTRUE 42226
42224: GO 42256
42226: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42227: LD_ADDR_VAR 0 3
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: LD_INT 4
42243: PUSH
42244: LD_INT 5
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: ST_TO_ADDR
42254: GO 43219
42256: LD_INT 11
42258: DOUBLE
42259: EQUAL
42260: IFTRUE 42264
42262: GO 42294
42264: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42265: LD_ADDR_VAR 0 3
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: LD_INT 4
42281: PUSH
42282: LD_INT 5
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: ST_TO_ADDR
42292: GO 43219
42294: LD_INT 4
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42302
42300: GO 42328
42302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42303: LD_ADDR_VAR 0 3
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: LD_INT 3
42313: PUSH
42314: LD_INT 4
42316: PUSH
42317: LD_INT 5
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: ST_TO_ADDR
42326: GO 43219
42328: LD_INT 5
42330: DOUBLE
42331: EQUAL
42332: IFTRUE 42336
42334: GO 42362
42336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42337: LD_ADDR_VAR 0 3
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: LD_INT 4
42350: PUSH
42351: LD_INT 5
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: ST_TO_ADDR
42360: GO 43219
42362: LD_INT 9
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42396
42370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: LD_INT 4
42384: PUSH
42385: LD_INT 5
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: ST_TO_ADDR
42394: GO 43219
42396: LD_INT 7
42398: DOUBLE
42399: EQUAL
42400: IFTRUE 42404
42402: GO 42430
42404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42405: LD_ADDR_VAR 0 3
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: LD_INT 4
42418: PUSH
42419: LD_INT 5
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: ST_TO_ADDR
42428: GO 43219
42430: LD_INT 12
42432: DOUBLE
42433: EQUAL
42434: IFTRUE 42438
42436: GO 42464
42438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42439: LD_ADDR_VAR 0 3
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: LD_INT 3
42449: PUSH
42450: LD_INT 4
42452: PUSH
42453: LD_INT 5
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: ST_TO_ADDR
42462: GO 43219
42464: LD_INT 13
42466: DOUBLE
42467: EQUAL
42468: IFTRUE 42472
42470: GO 42498
42472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42473: LD_ADDR_VAR 0 3
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: LD_INT 3
42483: PUSH
42484: LD_INT 4
42486: PUSH
42487: LD_INT 5
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: ST_TO_ADDR
42496: GO 43219
42498: LD_INT 14
42500: DOUBLE
42501: EQUAL
42502: IFTRUE 42506
42504: GO 42524
42506: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42507: LD_ADDR_VAR 0 3
42511: PUSH
42512: LD_INT 4
42514: PUSH
42515: LD_INT 5
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: ST_TO_ADDR
42522: GO 43219
42524: LD_INT 6
42526: DOUBLE
42527: EQUAL
42528: IFTRUE 42532
42530: GO 42550
42532: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42533: LD_ADDR_VAR 0 3
42537: PUSH
42538: LD_INT 4
42540: PUSH
42541: LD_INT 5
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: ST_TO_ADDR
42548: GO 43219
42550: LD_INT 10
42552: DOUBLE
42553: EQUAL
42554: IFTRUE 42558
42556: GO 42576
42558: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_INT 4
42566: PUSH
42567: LD_INT 5
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: ST_TO_ADDR
42574: GO 43219
42576: LD_INT 22
42578: DOUBLE
42579: EQUAL
42580: IFTRUE 42584
42582: GO 42610
42584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: LD_INT 11
42592: PUSH
42593: LD_INT 12
42595: PUSH
42596: LD_INT 13
42598: PUSH
42599: LD_INT 14
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: ST_TO_ADDR
42608: GO 43219
42610: LD_INT 23
42612: DOUBLE
42613: EQUAL
42614: IFTRUE 42618
42616: GO 42644
42618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42619: LD_ADDR_VAR 0 3
42623: PUSH
42624: LD_INT 11
42626: PUSH
42627: LD_INT 12
42629: PUSH
42630: LD_INT 13
42632: PUSH
42633: LD_INT 14
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: ST_TO_ADDR
42642: GO 43219
42644: LD_INT 24
42646: DOUBLE
42647: EQUAL
42648: IFTRUE 42652
42650: GO 42678
42652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42653: LD_ADDR_VAR 0 3
42657: PUSH
42658: LD_INT 11
42660: PUSH
42661: LD_INT 12
42663: PUSH
42664: LD_INT 13
42666: PUSH
42667: LD_INT 14
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: ST_TO_ADDR
42676: GO 43219
42678: LD_INT 30
42680: DOUBLE
42681: EQUAL
42682: IFTRUE 42686
42684: GO 42712
42686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42687: LD_ADDR_VAR 0 3
42691: PUSH
42692: LD_INT 11
42694: PUSH
42695: LD_INT 12
42697: PUSH
42698: LD_INT 13
42700: PUSH
42701: LD_INT 14
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: ST_TO_ADDR
42710: GO 43219
42712: LD_INT 25
42714: DOUBLE
42715: EQUAL
42716: IFTRUE 42720
42718: GO 42738
42720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42721: LD_ADDR_VAR 0 3
42725: PUSH
42726: LD_INT 13
42728: PUSH
42729: LD_INT 14
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: ST_TO_ADDR
42736: GO 43219
42738: LD_INT 27
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42746
42744: GO 42764
42746: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42747: LD_ADDR_VAR 0 3
42751: PUSH
42752: LD_INT 13
42754: PUSH
42755: LD_INT 14
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: ST_TO_ADDR
42762: GO 43219
42764: LD_INT 92
42766: DOUBLE
42767: EQUAL
42768: IFTRUE 42772
42770: GO 42798
42772: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42773: LD_ADDR_VAR 0 3
42777: PUSH
42778: LD_INT 11
42780: PUSH
42781: LD_INT 12
42783: PUSH
42784: LD_INT 13
42786: PUSH
42787: LD_INT 14
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
42796: GO 43219
42798: LD_INT 28
42800: DOUBLE
42801: EQUAL
42802: IFTRUE 42806
42804: GO 42824
42806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42807: LD_ADDR_VAR 0 3
42811: PUSH
42812: LD_INT 13
42814: PUSH
42815: LD_INT 14
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: ST_TO_ADDR
42822: GO 43219
42824: LD_INT 29
42826: DOUBLE
42827: EQUAL
42828: IFTRUE 42832
42830: GO 42850
42832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42833: LD_ADDR_VAR 0 3
42837: PUSH
42838: LD_INT 13
42840: PUSH
42841: LD_INT 14
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: ST_TO_ADDR
42848: GO 43219
42850: LD_INT 31
42852: DOUBLE
42853: EQUAL
42854: IFTRUE 42858
42856: GO 42876
42858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42859: LD_ADDR_VAR 0 3
42863: PUSH
42864: LD_INT 13
42866: PUSH
42867: LD_INT 14
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: ST_TO_ADDR
42874: GO 43219
42876: LD_INT 26
42878: DOUBLE
42879: EQUAL
42880: IFTRUE 42884
42882: GO 42902
42884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42885: LD_ADDR_VAR 0 3
42889: PUSH
42890: LD_INT 13
42892: PUSH
42893: LD_INT 14
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: ST_TO_ADDR
42900: GO 43219
42902: LD_INT 42
42904: DOUBLE
42905: EQUAL
42906: IFTRUE 42910
42908: GO 42936
42910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42911: LD_ADDR_VAR 0 3
42915: PUSH
42916: LD_INT 21
42918: PUSH
42919: LD_INT 22
42921: PUSH
42922: LD_INT 23
42924: PUSH
42925: LD_INT 24
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: ST_TO_ADDR
42934: GO 43219
42936: LD_INT 43
42938: DOUBLE
42939: EQUAL
42940: IFTRUE 42944
42942: GO 42970
42944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42945: LD_ADDR_VAR 0 3
42949: PUSH
42950: LD_INT 21
42952: PUSH
42953: LD_INT 22
42955: PUSH
42956: LD_INT 23
42958: PUSH
42959: LD_INT 24
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
42968: GO 43219
42970: LD_INT 44
42972: DOUBLE
42973: EQUAL
42974: IFTRUE 42978
42976: GO 43004
42978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42979: LD_ADDR_VAR 0 3
42983: PUSH
42984: LD_INT 21
42986: PUSH
42987: LD_INT 22
42989: PUSH
42990: LD_INT 23
42992: PUSH
42993: LD_INT 24
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: ST_TO_ADDR
43002: GO 43219
43004: LD_INT 45
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43038
43012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_INT 21
43020: PUSH
43021: LD_INT 22
43023: PUSH
43024: LD_INT 23
43026: PUSH
43027: LD_INT 24
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: ST_TO_ADDR
43036: GO 43219
43038: LD_INT 49
43040: DOUBLE
43041: EQUAL
43042: IFTRUE 43046
43044: GO 43072
43046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43047: LD_ADDR_VAR 0 3
43051: PUSH
43052: LD_INT 21
43054: PUSH
43055: LD_INT 22
43057: PUSH
43058: LD_INT 23
43060: PUSH
43061: LD_INT 24
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: ST_TO_ADDR
43070: GO 43219
43072: LD_INT 51
43074: DOUBLE
43075: EQUAL
43076: IFTRUE 43080
43078: GO 43106
43080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43081: LD_ADDR_VAR 0 3
43085: PUSH
43086: LD_INT 21
43088: PUSH
43089: LD_INT 22
43091: PUSH
43092: LD_INT 23
43094: PUSH
43095: LD_INT 24
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: ST_TO_ADDR
43104: GO 43219
43106: LD_INT 52
43108: DOUBLE
43109: EQUAL
43110: IFTRUE 43114
43112: GO 43140
43114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43115: LD_ADDR_VAR 0 3
43119: PUSH
43120: LD_INT 21
43122: PUSH
43123: LD_INT 22
43125: PUSH
43126: LD_INT 23
43128: PUSH
43129: LD_INT 24
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: ST_TO_ADDR
43138: GO 43219
43140: LD_INT 53
43142: DOUBLE
43143: EQUAL
43144: IFTRUE 43148
43146: GO 43166
43148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43149: LD_ADDR_VAR 0 3
43153: PUSH
43154: LD_INT 23
43156: PUSH
43157: LD_INT 24
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: ST_TO_ADDR
43164: GO 43219
43166: LD_INT 46
43168: DOUBLE
43169: EQUAL
43170: IFTRUE 43174
43172: GO 43192
43174: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43175: LD_ADDR_VAR 0 3
43179: PUSH
43180: LD_INT 23
43182: PUSH
43183: LD_INT 24
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: ST_TO_ADDR
43190: GO 43219
43192: LD_INT 47
43194: DOUBLE
43195: EQUAL
43196: IFTRUE 43200
43198: GO 43218
43200: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43201: LD_ADDR_VAR 0 3
43205: PUSH
43206: LD_INT 23
43208: PUSH
43209: LD_INT 24
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: ST_TO_ADDR
43216: GO 43219
43218: POP
// result := ( chassis in result ) ;
43219: LD_ADDR_VAR 0 3
43223: PUSH
43224: LD_VAR 0 1
43228: PUSH
43229: LD_VAR 0 3
43233: IN
43234: ST_TO_ADDR
// end ;
43235: LD_VAR 0 3
43239: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43240: LD_INT 0
43242: PPUSH
43243: PPUSH
43244: PPUSH
43245: PPUSH
43246: PPUSH
43247: PPUSH
43248: PPUSH
// result := array ;
43249: LD_ADDR_VAR 0 5
43253: PUSH
43254: LD_VAR 0 1
43258: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43259: LD_VAR 0 1
43263: NOT
43264: PUSH
43265: LD_VAR 0 2
43269: NOT
43270: OR
43271: PUSH
43272: LD_VAR 0 3
43276: NOT
43277: OR
43278: PUSH
43279: LD_VAR 0 2
43283: PUSH
43284: LD_VAR 0 1
43288: GREATER
43289: OR
43290: PUSH
43291: LD_VAR 0 3
43295: PUSH
43296: LD_VAR 0 1
43300: GREATER
43301: OR
43302: IFFALSE 43306
// exit ;
43304: GO 43602
// if direction then
43306: LD_VAR 0 4
43310: IFFALSE 43374
// begin d := 1 ;
43312: LD_ADDR_VAR 0 9
43316: PUSH
43317: LD_INT 1
43319: ST_TO_ADDR
// if i_from > i_to then
43320: LD_VAR 0 2
43324: PUSH
43325: LD_VAR 0 3
43329: GREATER
43330: IFFALSE 43356
// length := ( array - i_from ) + i_to else
43332: LD_ADDR_VAR 0 11
43336: PUSH
43337: LD_VAR 0 1
43341: PUSH
43342: LD_VAR 0 2
43346: MINUS
43347: PUSH
43348: LD_VAR 0 3
43352: PLUS
43353: ST_TO_ADDR
43354: GO 43372
// length := i_to - i_from ;
43356: LD_ADDR_VAR 0 11
43360: PUSH
43361: LD_VAR 0 3
43365: PUSH
43366: LD_VAR 0 2
43370: MINUS
43371: ST_TO_ADDR
// end else
43372: GO 43435
// begin d := - 1 ;
43374: LD_ADDR_VAR 0 9
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: ST_TO_ADDR
// if i_from > i_to then
43383: LD_VAR 0 2
43387: PUSH
43388: LD_VAR 0 3
43392: GREATER
43393: IFFALSE 43413
// length := i_from - i_to else
43395: LD_ADDR_VAR 0 11
43399: PUSH
43400: LD_VAR 0 2
43404: PUSH
43405: LD_VAR 0 3
43409: MINUS
43410: ST_TO_ADDR
43411: GO 43435
// length := ( array - i_to ) + i_from ;
43413: LD_ADDR_VAR 0 11
43417: PUSH
43418: LD_VAR 0 1
43422: PUSH
43423: LD_VAR 0 3
43427: MINUS
43428: PUSH
43429: LD_VAR 0 2
43433: PLUS
43434: ST_TO_ADDR
// end ; if not length then
43435: LD_VAR 0 11
43439: NOT
43440: IFFALSE 43444
// exit ;
43442: GO 43602
// tmp := array ;
43444: LD_ADDR_VAR 0 10
43448: PUSH
43449: LD_VAR 0 1
43453: ST_TO_ADDR
// for i = 1 to length do
43454: LD_ADDR_VAR 0 6
43458: PUSH
43459: DOUBLE
43460: LD_INT 1
43462: DEC
43463: ST_TO_ADDR
43464: LD_VAR 0 11
43468: PUSH
43469: FOR_TO
43470: IFFALSE 43590
// begin for j = 1 to array do
43472: LD_ADDR_VAR 0 7
43476: PUSH
43477: DOUBLE
43478: LD_INT 1
43480: DEC
43481: ST_TO_ADDR
43482: LD_VAR 0 1
43486: PUSH
43487: FOR_TO
43488: IFFALSE 43576
// begin k := j + d ;
43490: LD_ADDR_VAR 0 8
43494: PUSH
43495: LD_VAR 0 7
43499: PUSH
43500: LD_VAR 0 9
43504: PLUS
43505: ST_TO_ADDR
// if k > array then
43506: LD_VAR 0 8
43510: PUSH
43511: LD_VAR 0 1
43515: GREATER
43516: IFFALSE 43526
// k := 1 ;
43518: LD_ADDR_VAR 0 8
43522: PUSH
43523: LD_INT 1
43525: ST_TO_ADDR
// if not k then
43526: LD_VAR 0 8
43530: NOT
43531: IFFALSE 43543
// k := array ;
43533: LD_ADDR_VAR 0 8
43537: PUSH
43538: LD_VAR 0 1
43542: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43543: LD_ADDR_VAR 0 10
43547: PUSH
43548: LD_VAR 0 10
43552: PPUSH
43553: LD_VAR 0 8
43557: PPUSH
43558: LD_VAR 0 1
43562: PUSH
43563: LD_VAR 0 7
43567: ARRAY
43568: PPUSH
43569: CALL_OW 1
43573: ST_TO_ADDR
// end ;
43574: GO 43487
43576: POP
43577: POP
// array := tmp ;
43578: LD_ADDR_VAR 0 1
43582: PUSH
43583: LD_VAR 0 10
43587: ST_TO_ADDR
// end ;
43588: GO 43469
43590: POP
43591: POP
// result := array ;
43592: LD_ADDR_VAR 0 5
43596: PUSH
43597: LD_VAR 0 1
43601: ST_TO_ADDR
// end ;
43602: LD_VAR 0 5
43606: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43607: LD_INT 0
43609: PPUSH
43610: PPUSH
// result := 0 ;
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_INT 0
43618: ST_TO_ADDR
// if not array or not value in array then
43619: LD_VAR 0 1
43623: NOT
43624: PUSH
43625: LD_VAR 0 2
43629: PUSH
43630: LD_VAR 0 1
43634: IN
43635: NOT
43636: OR
43637: IFFALSE 43641
// exit ;
43639: GO 43695
// for i = 1 to array do
43641: LD_ADDR_VAR 0 4
43645: PUSH
43646: DOUBLE
43647: LD_INT 1
43649: DEC
43650: ST_TO_ADDR
43651: LD_VAR 0 1
43655: PUSH
43656: FOR_TO
43657: IFFALSE 43693
// if value = array [ i ] then
43659: LD_VAR 0 2
43663: PUSH
43664: LD_VAR 0 1
43668: PUSH
43669: LD_VAR 0 4
43673: ARRAY
43674: EQUAL
43675: IFFALSE 43691
// begin result := i ;
43677: LD_ADDR_VAR 0 3
43681: PUSH
43682: LD_VAR 0 4
43686: ST_TO_ADDR
// exit ;
43687: POP
43688: POP
43689: GO 43695
// end ;
43691: GO 43656
43693: POP
43694: POP
// end ;
43695: LD_VAR 0 3
43699: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43700: LD_INT 0
43702: PPUSH
// vc_chassis := chassis ;
43703: LD_ADDR_OWVAR 37
43707: PUSH
43708: LD_VAR 0 1
43712: ST_TO_ADDR
// vc_engine := engine ;
43713: LD_ADDR_OWVAR 39
43717: PUSH
43718: LD_VAR 0 2
43722: ST_TO_ADDR
// vc_control := control ;
43723: LD_ADDR_OWVAR 38
43727: PUSH
43728: LD_VAR 0 3
43732: ST_TO_ADDR
// vc_weapon := weapon ;
43733: LD_ADDR_OWVAR 40
43737: PUSH
43738: LD_VAR 0 4
43742: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43743: LD_ADDR_OWVAR 41
43747: PUSH
43748: LD_VAR 0 5
43752: ST_TO_ADDR
// end ;
43753: LD_VAR 0 6
43757: RET
// export function WantPlant ( unit ) ; var task ; begin
43758: LD_INT 0
43760: PPUSH
43761: PPUSH
// result := false ;
43762: LD_ADDR_VAR 0 2
43766: PUSH
43767: LD_INT 0
43769: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_VAR 0 1
43779: PPUSH
43780: CALL_OW 437
43784: ST_TO_ADDR
// if task then
43785: LD_VAR 0 3
43789: IFFALSE 43817
// if task [ 1 ] [ 1 ] = p then
43791: LD_VAR 0 3
43795: PUSH
43796: LD_INT 1
43798: ARRAY
43799: PUSH
43800: LD_INT 1
43802: ARRAY
43803: PUSH
43804: LD_STRING p
43806: EQUAL
43807: IFFALSE 43817
// result := true ;
43809: LD_ADDR_VAR 0 2
43813: PUSH
43814: LD_INT 1
43816: ST_TO_ADDR
// end ;
43817: LD_VAR 0 2
43821: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43822: LD_INT 0
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
// if pos < 1 then
43828: LD_VAR 0 2
43832: PUSH
43833: LD_INT 1
43835: LESS
43836: IFFALSE 43840
// exit ;
43838: GO 44143
// if pos = 1 then
43840: LD_VAR 0 2
43844: PUSH
43845: LD_INT 1
43847: EQUAL
43848: IFFALSE 43881
// result := Replace ( arr , pos [ 1 ] , value ) else
43850: LD_ADDR_VAR 0 4
43854: PUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: LD_VAR 0 2
43864: PUSH
43865: LD_INT 1
43867: ARRAY
43868: PPUSH
43869: LD_VAR 0 3
43873: PPUSH
43874: CALL_OW 1
43878: ST_TO_ADDR
43879: GO 44143
// begin tmp := arr ;
43881: LD_ADDR_VAR 0 6
43885: PUSH
43886: LD_VAR 0 1
43890: ST_TO_ADDR
// s_arr := [ tmp ] ;
43891: LD_ADDR_VAR 0 7
43895: PUSH
43896: LD_VAR 0 6
43900: PUSH
43901: EMPTY
43902: LIST
43903: ST_TO_ADDR
// for i = 1 to pos - 1 do
43904: LD_ADDR_VAR 0 5
43908: PUSH
43909: DOUBLE
43910: LD_INT 1
43912: DEC
43913: ST_TO_ADDR
43914: LD_VAR 0 2
43918: PUSH
43919: LD_INT 1
43921: MINUS
43922: PUSH
43923: FOR_TO
43924: IFFALSE 43969
// begin tmp := tmp [ pos [ i ] ] ;
43926: LD_ADDR_VAR 0 6
43930: PUSH
43931: LD_VAR 0 6
43935: PUSH
43936: LD_VAR 0 2
43940: PUSH
43941: LD_VAR 0 5
43945: ARRAY
43946: ARRAY
43947: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43948: LD_ADDR_VAR 0 7
43952: PUSH
43953: LD_VAR 0 7
43957: PUSH
43958: LD_VAR 0 6
43962: PUSH
43963: EMPTY
43964: LIST
43965: ADD
43966: ST_TO_ADDR
// end ;
43967: GO 43923
43969: POP
43970: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43971: LD_ADDR_VAR 0 6
43975: PUSH
43976: LD_VAR 0 6
43980: PPUSH
43981: LD_VAR 0 2
43985: PUSH
43986: LD_VAR 0 2
43990: ARRAY
43991: PPUSH
43992: LD_VAR 0 3
43996: PPUSH
43997: CALL_OW 1
44001: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44002: LD_ADDR_VAR 0 7
44006: PUSH
44007: LD_VAR 0 7
44011: PPUSH
44012: LD_VAR 0 7
44016: PPUSH
44017: LD_VAR 0 6
44021: PPUSH
44022: CALL_OW 1
44026: ST_TO_ADDR
// for i = s_arr downto 2 do
44027: LD_ADDR_VAR 0 5
44031: PUSH
44032: DOUBLE
44033: LD_VAR 0 7
44037: INC
44038: ST_TO_ADDR
44039: LD_INT 2
44041: PUSH
44042: FOR_DOWNTO
44043: IFFALSE 44127
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44045: LD_ADDR_VAR 0 6
44049: PUSH
44050: LD_VAR 0 7
44054: PUSH
44055: LD_VAR 0 5
44059: PUSH
44060: LD_INT 1
44062: MINUS
44063: ARRAY
44064: PPUSH
44065: LD_VAR 0 2
44069: PUSH
44070: LD_VAR 0 5
44074: PUSH
44075: LD_INT 1
44077: MINUS
44078: ARRAY
44079: PPUSH
44080: LD_VAR 0 7
44084: PUSH
44085: LD_VAR 0 5
44089: ARRAY
44090: PPUSH
44091: CALL_OW 1
44095: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44096: LD_ADDR_VAR 0 7
44100: PUSH
44101: LD_VAR 0 7
44105: PPUSH
44106: LD_VAR 0 5
44110: PUSH
44111: LD_INT 1
44113: MINUS
44114: PPUSH
44115: LD_VAR 0 6
44119: PPUSH
44120: CALL_OW 1
44124: ST_TO_ADDR
// end ;
44125: GO 44042
44127: POP
44128: POP
// result := s_arr [ 1 ] ;
44129: LD_ADDR_VAR 0 4
44133: PUSH
44134: LD_VAR 0 7
44138: PUSH
44139: LD_INT 1
44141: ARRAY
44142: ST_TO_ADDR
// end ; end ;
44143: LD_VAR 0 4
44147: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44148: LD_INT 0
44150: PPUSH
44151: PPUSH
// if not list then
44152: LD_VAR 0 1
44156: NOT
44157: IFFALSE 44161
// exit ;
44159: GO 44252
// i := list [ pos1 ] ;
44161: LD_ADDR_VAR 0 5
44165: PUSH
44166: LD_VAR 0 1
44170: PUSH
44171: LD_VAR 0 2
44175: ARRAY
44176: ST_TO_ADDR
// if not i then
44177: LD_VAR 0 5
44181: NOT
44182: IFFALSE 44186
// exit ;
44184: GO 44252
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44186: LD_ADDR_VAR 0 1
44190: PUSH
44191: LD_VAR 0 1
44195: PPUSH
44196: LD_VAR 0 2
44200: PPUSH
44201: LD_VAR 0 1
44205: PUSH
44206: LD_VAR 0 3
44210: ARRAY
44211: PPUSH
44212: CALL_OW 1
44216: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44217: LD_ADDR_VAR 0 1
44221: PUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: LD_VAR 0 3
44231: PPUSH
44232: LD_VAR 0 5
44236: PPUSH
44237: CALL_OW 1
44241: ST_TO_ADDR
// result := list ;
44242: LD_ADDR_VAR 0 4
44246: PUSH
44247: LD_VAR 0 1
44251: ST_TO_ADDR
// end ;
44252: LD_VAR 0 4
44256: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44257: LD_INT 0
44259: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44260: LD_ADDR_VAR 0 5
44264: PUSH
44265: LD_VAR 0 1
44269: PPUSH
44270: CALL_OW 250
44274: PPUSH
44275: LD_VAR 0 1
44279: PPUSH
44280: CALL_OW 251
44284: PPUSH
44285: LD_VAR 0 2
44289: PPUSH
44290: LD_VAR 0 3
44294: PPUSH
44295: LD_VAR 0 4
44299: PPUSH
44300: CALL 44310 0 5
44304: ST_TO_ADDR
// end ;
44305: LD_VAR 0 5
44309: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44310: LD_INT 0
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
// if not list then
44316: LD_VAR 0 3
44320: NOT
44321: IFFALSE 44325
// exit ;
44323: GO 44713
// result := [ ] ;
44325: LD_ADDR_VAR 0 6
44329: PUSH
44330: EMPTY
44331: ST_TO_ADDR
// for i in list do
44332: LD_ADDR_VAR 0 7
44336: PUSH
44337: LD_VAR 0 3
44341: PUSH
44342: FOR_IN
44343: IFFALSE 44545
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44345: LD_ADDR_VAR 0 9
44349: PUSH
44350: LD_VAR 0 7
44354: PPUSH
44355: LD_VAR 0 1
44359: PPUSH
44360: LD_VAR 0 2
44364: PPUSH
44365: CALL_OW 297
44369: ST_TO_ADDR
// if not result then
44370: LD_VAR 0 6
44374: NOT
44375: IFFALSE 44401
// result := [ [ i , tmp ] ] else
44377: LD_ADDR_VAR 0 6
44381: PUSH
44382: LD_VAR 0 7
44386: PUSH
44387: LD_VAR 0 9
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: EMPTY
44397: LIST
44398: ST_TO_ADDR
44399: GO 44543
// begin if result [ result ] [ 2 ] < tmp then
44401: LD_VAR 0 6
44405: PUSH
44406: LD_VAR 0 6
44410: ARRAY
44411: PUSH
44412: LD_INT 2
44414: ARRAY
44415: PUSH
44416: LD_VAR 0 9
44420: LESS
44421: IFFALSE 44463
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44423: LD_ADDR_VAR 0 6
44427: PUSH
44428: LD_VAR 0 6
44432: PPUSH
44433: LD_VAR 0 6
44437: PUSH
44438: LD_INT 1
44440: PLUS
44441: PPUSH
44442: LD_VAR 0 7
44446: PUSH
44447: LD_VAR 0 9
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PPUSH
44456: CALL_OW 2
44460: ST_TO_ADDR
44461: GO 44543
// for j = 1 to result do
44463: LD_ADDR_VAR 0 8
44467: PUSH
44468: DOUBLE
44469: LD_INT 1
44471: DEC
44472: ST_TO_ADDR
44473: LD_VAR 0 6
44477: PUSH
44478: FOR_TO
44479: IFFALSE 44541
// begin if tmp < result [ j ] [ 2 ] then
44481: LD_VAR 0 9
44485: PUSH
44486: LD_VAR 0 6
44490: PUSH
44491: LD_VAR 0 8
44495: ARRAY
44496: PUSH
44497: LD_INT 2
44499: ARRAY
44500: LESS
44501: IFFALSE 44539
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44503: LD_ADDR_VAR 0 6
44507: PUSH
44508: LD_VAR 0 6
44512: PPUSH
44513: LD_VAR 0 8
44517: PPUSH
44518: LD_VAR 0 7
44522: PUSH
44523: LD_VAR 0 9
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PPUSH
44532: CALL_OW 2
44536: ST_TO_ADDR
// break ;
44537: GO 44541
// end ; end ;
44539: GO 44478
44541: POP
44542: POP
// end ; end ;
44543: GO 44342
44545: POP
44546: POP
// if result and not asc then
44547: LD_VAR 0 6
44551: PUSH
44552: LD_VAR 0 4
44556: NOT
44557: AND
44558: IFFALSE 44633
// begin tmp := result ;
44560: LD_ADDR_VAR 0 9
44564: PUSH
44565: LD_VAR 0 6
44569: ST_TO_ADDR
// for i = tmp downto 1 do
44570: LD_ADDR_VAR 0 7
44574: PUSH
44575: DOUBLE
44576: LD_VAR 0 9
44580: INC
44581: ST_TO_ADDR
44582: LD_INT 1
44584: PUSH
44585: FOR_DOWNTO
44586: IFFALSE 44631
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44588: LD_ADDR_VAR 0 6
44592: PUSH
44593: LD_VAR 0 6
44597: PPUSH
44598: LD_VAR 0 9
44602: PUSH
44603: LD_VAR 0 7
44607: MINUS
44608: PUSH
44609: LD_INT 1
44611: PLUS
44612: PPUSH
44613: LD_VAR 0 9
44617: PUSH
44618: LD_VAR 0 7
44622: ARRAY
44623: PPUSH
44624: CALL_OW 1
44628: ST_TO_ADDR
44629: GO 44585
44631: POP
44632: POP
// end ; tmp := [ ] ;
44633: LD_ADDR_VAR 0 9
44637: PUSH
44638: EMPTY
44639: ST_TO_ADDR
// if mode then
44640: LD_VAR 0 5
44644: IFFALSE 44713
// begin for i = 1 to result do
44646: LD_ADDR_VAR 0 7
44650: PUSH
44651: DOUBLE
44652: LD_INT 1
44654: DEC
44655: ST_TO_ADDR
44656: LD_VAR 0 6
44660: PUSH
44661: FOR_TO
44662: IFFALSE 44701
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44664: LD_ADDR_VAR 0 9
44668: PUSH
44669: LD_VAR 0 9
44673: PPUSH
44674: LD_VAR 0 7
44678: PPUSH
44679: LD_VAR 0 6
44683: PUSH
44684: LD_VAR 0 7
44688: ARRAY
44689: PUSH
44690: LD_INT 1
44692: ARRAY
44693: PPUSH
44694: CALL_OW 1
44698: ST_TO_ADDR
44699: GO 44661
44701: POP
44702: POP
// result := tmp ;
44703: LD_ADDR_VAR 0 6
44707: PUSH
44708: LD_VAR 0 9
44712: ST_TO_ADDR
// end ; end ;
44713: LD_VAR 0 6
44717: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44718: LD_INT 0
44720: PPUSH
44721: PPUSH
44722: PPUSH
44723: PPUSH
44724: PPUSH
44725: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44726: LD_ADDR_VAR 0 5
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: ST_TO_ADDR
// if not x or not y then
44748: LD_VAR 0 2
44752: NOT
44753: PUSH
44754: LD_VAR 0 3
44758: NOT
44759: OR
44760: IFFALSE 44764
// exit ;
44762: GO 46414
// if not range then
44764: LD_VAR 0 4
44768: NOT
44769: IFFALSE 44779
// range := 10 ;
44771: LD_ADDR_VAR 0 4
44775: PUSH
44776: LD_INT 10
44778: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44779: LD_ADDR_VAR 0 8
44783: PUSH
44784: LD_INT 81
44786: PUSH
44787: LD_VAR 0 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 92
44798: PUSH
44799: LD_VAR 0 2
44803: PUSH
44804: LD_VAR 0 3
44808: PUSH
44809: LD_VAR 0 4
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: LD_INT 21
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: PPUSH
44842: CALL_OW 69
44846: ST_TO_ADDR
// if not tmp then
44847: LD_VAR 0 8
44851: NOT
44852: IFFALSE 44856
// exit ;
44854: GO 46414
// for i in tmp do
44856: LD_ADDR_VAR 0 6
44860: PUSH
44861: LD_VAR 0 8
44865: PUSH
44866: FOR_IN
44867: IFFALSE 46389
// begin points := [ 0 , 0 , 0 ] ;
44869: LD_ADDR_VAR 0 9
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// bpoints := 1 ;
44888: LD_ADDR_VAR 0 10
44892: PUSH
44893: LD_INT 1
44895: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44896: LD_VAR 0 6
44900: PPUSH
44901: CALL_OW 247
44905: PUSH
44906: LD_INT 1
44908: DOUBLE
44909: EQUAL
44910: IFTRUE 44914
44912: GO 45492
44914: POP
// begin if GetClass ( i ) = 1 then
44915: LD_VAR 0 6
44919: PPUSH
44920: CALL_OW 257
44924: PUSH
44925: LD_INT 1
44927: EQUAL
44928: IFFALSE 44949
// points := [ 10 , 5 , 3 ] ;
44930: LD_ADDR_VAR 0 9
44934: PUSH
44935: LD_INT 10
44937: PUSH
44938: LD_INT 5
44940: PUSH
44941: LD_INT 3
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44949: LD_VAR 0 6
44953: PPUSH
44954: CALL_OW 257
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: LD_INT 4
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: IN
44973: IFFALSE 44994
// points := [ 3 , 2 , 1 ] ;
44975: LD_ADDR_VAR 0 9
44979: PUSH
44980: LD_INT 3
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44994: LD_VAR 0 6
44998: PPUSH
44999: CALL_OW 257
45003: PUSH
45004: LD_INT 5
45006: EQUAL
45007: IFFALSE 45028
// points := [ 130 , 5 , 2 ] ;
45009: LD_ADDR_VAR 0 9
45013: PUSH
45014: LD_INT 130
45016: PUSH
45017: LD_INT 5
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45028: LD_VAR 0 6
45032: PPUSH
45033: CALL_OW 257
45037: PUSH
45038: LD_INT 8
45040: EQUAL
45041: IFFALSE 45062
// points := [ 35 , 35 , 30 ] ;
45043: LD_ADDR_VAR 0 9
45047: PUSH
45048: LD_INT 35
45050: PUSH
45051: LD_INT 35
45053: PUSH
45054: LD_INT 30
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45062: LD_VAR 0 6
45066: PPUSH
45067: CALL_OW 257
45071: PUSH
45072: LD_INT 9
45074: EQUAL
45075: IFFALSE 45096
// points := [ 20 , 55 , 40 ] ;
45077: LD_ADDR_VAR 0 9
45081: PUSH
45082: LD_INT 20
45084: PUSH
45085: LD_INT 55
45087: PUSH
45088: LD_INT 40
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45096: LD_VAR 0 6
45100: PPUSH
45101: CALL_OW 257
45105: PUSH
45106: LD_INT 12
45108: PUSH
45109: LD_INT 16
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: IN
45116: IFFALSE 45137
// points := [ 5 , 3 , 2 ] ;
45118: LD_ADDR_VAR 0 9
45122: PUSH
45123: LD_INT 5
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45137: LD_VAR 0 6
45141: PPUSH
45142: CALL_OW 257
45146: PUSH
45147: LD_INT 17
45149: EQUAL
45150: IFFALSE 45171
// points := [ 100 , 50 , 75 ] ;
45152: LD_ADDR_VAR 0 9
45156: PUSH
45157: LD_INT 100
45159: PUSH
45160: LD_INT 50
45162: PUSH
45163: LD_INT 75
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45171: LD_VAR 0 6
45175: PPUSH
45176: CALL_OW 257
45180: PUSH
45181: LD_INT 15
45183: EQUAL
45184: IFFALSE 45205
// points := [ 10 , 5 , 3 ] ;
45186: LD_ADDR_VAR 0 9
45190: PUSH
45191: LD_INT 10
45193: PUSH
45194: LD_INT 5
45196: PUSH
45197: LD_INT 3
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45205: LD_VAR 0 6
45209: PPUSH
45210: CALL_OW 257
45214: PUSH
45215: LD_INT 14
45217: EQUAL
45218: IFFALSE 45239
// points := [ 10 , 0 , 0 ] ;
45220: LD_ADDR_VAR 0 9
45224: PUSH
45225: LD_INT 10
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: LIST
45238: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45239: LD_VAR 0 6
45243: PPUSH
45244: CALL_OW 257
45248: PUSH
45249: LD_INT 11
45251: EQUAL
45252: IFFALSE 45273
// points := [ 30 , 10 , 5 ] ;
45254: LD_ADDR_VAR 0 9
45258: PUSH
45259: LD_INT 30
45261: PUSH
45262: LD_INT 10
45264: PUSH
45265: LD_INT 5
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45273: LD_VAR 0 1
45277: PPUSH
45278: LD_INT 5
45280: PPUSH
45281: CALL_OW 321
45285: PUSH
45286: LD_INT 2
45288: EQUAL
45289: IFFALSE 45306
// bpoints := bpoints * 1.8 ;
45291: LD_ADDR_VAR 0 10
45295: PUSH
45296: LD_VAR 0 10
45300: PUSH
45301: LD_REAL  1.80000000000000E+0000
45304: MUL
45305: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45306: LD_VAR 0 6
45310: PPUSH
45311: CALL_OW 257
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 3
45324: PUSH
45325: LD_INT 4
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: IN
45334: PUSH
45335: LD_VAR 0 1
45339: PPUSH
45340: LD_INT 51
45342: PPUSH
45343: CALL_OW 321
45347: PUSH
45348: LD_INT 2
45350: EQUAL
45351: AND
45352: IFFALSE 45369
// bpoints := bpoints * 1.2 ;
45354: LD_ADDR_VAR 0 10
45358: PUSH
45359: LD_VAR 0 10
45363: PUSH
45364: LD_REAL  1.20000000000000E+0000
45367: MUL
45368: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45369: LD_VAR 0 6
45373: PPUSH
45374: CALL_OW 257
45378: PUSH
45379: LD_INT 5
45381: PUSH
45382: LD_INT 7
45384: PUSH
45385: LD_INT 9
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: IN
45393: PUSH
45394: LD_VAR 0 1
45398: PPUSH
45399: LD_INT 52
45401: PPUSH
45402: CALL_OW 321
45406: PUSH
45407: LD_INT 2
45409: EQUAL
45410: AND
45411: IFFALSE 45428
// bpoints := bpoints * 1.5 ;
45413: LD_ADDR_VAR 0 10
45417: PUSH
45418: LD_VAR 0 10
45422: PUSH
45423: LD_REAL  1.50000000000000E+0000
45426: MUL
45427: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45428: LD_VAR 0 1
45432: PPUSH
45433: LD_INT 66
45435: PPUSH
45436: CALL_OW 321
45440: PUSH
45441: LD_INT 2
45443: EQUAL
45444: IFFALSE 45461
// bpoints := bpoints * 1.1 ;
45446: LD_ADDR_VAR 0 10
45450: PUSH
45451: LD_VAR 0 10
45455: PUSH
45456: LD_REAL  1.10000000000000E+0000
45459: MUL
45460: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45461: LD_ADDR_VAR 0 10
45465: PUSH
45466: LD_VAR 0 10
45470: PUSH
45471: LD_VAR 0 6
45475: PPUSH
45476: LD_INT 1
45478: PPUSH
45479: CALL_OW 259
45483: PUSH
45484: LD_REAL  1.15000000000000E+0000
45487: MUL
45488: MUL
45489: ST_TO_ADDR
// end ; unit_vehicle :
45490: GO 46318
45492: LD_INT 2
45494: DOUBLE
45495: EQUAL
45496: IFTRUE 45500
45498: GO 46306
45500: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45501: LD_VAR 0 6
45505: PPUSH
45506: CALL_OW 264
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 42
45516: PUSH
45517: LD_INT 24
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: IN
45525: IFFALSE 45546
// points := [ 25 , 5 , 3 ] ;
45527: LD_ADDR_VAR 0 9
45531: PUSH
45532: LD_INT 25
45534: PUSH
45535: LD_INT 5
45537: PUSH
45538: LD_INT 3
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45546: LD_VAR 0 6
45550: PPUSH
45551: CALL_OW 264
45555: PUSH
45556: LD_INT 4
45558: PUSH
45559: LD_INT 43
45561: PUSH
45562: LD_INT 25
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: IN
45570: IFFALSE 45591
// points := [ 40 , 15 , 5 ] ;
45572: LD_ADDR_VAR 0 9
45576: PUSH
45577: LD_INT 40
45579: PUSH
45580: LD_INT 15
45582: PUSH
45583: LD_INT 5
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45591: LD_VAR 0 6
45595: PPUSH
45596: CALL_OW 264
45600: PUSH
45601: LD_INT 3
45603: PUSH
45604: LD_INT 23
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: IN
45611: IFFALSE 45632
// points := [ 7 , 25 , 8 ] ;
45613: LD_ADDR_VAR 0 9
45617: PUSH
45618: LD_INT 7
45620: PUSH
45621: LD_INT 25
45623: PUSH
45624: LD_INT 8
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: LIST
45631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45632: LD_VAR 0 6
45636: PPUSH
45637: CALL_OW 264
45641: PUSH
45642: LD_INT 5
45644: PUSH
45645: LD_INT 27
45647: PUSH
45648: LD_INT 44
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: IN
45656: IFFALSE 45677
// points := [ 14 , 50 , 16 ] ;
45658: LD_ADDR_VAR 0 9
45662: PUSH
45663: LD_INT 14
45665: PUSH
45666: LD_INT 50
45668: PUSH
45669: LD_INT 16
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45677: LD_VAR 0 6
45681: PPUSH
45682: CALL_OW 264
45686: PUSH
45687: LD_INT 6
45689: PUSH
45690: LD_INT 46
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: IN
45697: IFFALSE 45718
// points := [ 32 , 120 , 70 ] ;
45699: LD_ADDR_VAR 0 9
45703: PUSH
45704: LD_INT 32
45706: PUSH
45707: LD_INT 120
45709: PUSH
45710: LD_INT 70
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45718: LD_VAR 0 6
45722: PPUSH
45723: CALL_OW 264
45727: PUSH
45728: LD_INT 7
45730: PUSH
45731: LD_INT 28
45733: PUSH
45734: LD_INT 45
45736: PUSH
45737: LD_INT 92
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: IN
45746: IFFALSE 45767
// points := [ 35 , 20 , 45 ] ;
45748: LD_ADDR_VAR 0 9
45752: PUSH
45753: LD_INT 35
45755: PUSH
45756: LD_INT 20
45758: PUSH
45759: LD_INT 45
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45767: LD_VAR 0 6
45771: PPUSH
45772: CALL_OW 264
45776: PUSH
45777: LD_INT 47
45779: PUSH
45780: EMPTY
45781: LIST
45782: IN
45783: IFFALSE 45804
// points := [ 67 , 45 , 75 ] ;
45785: LD_ADDR_VAR 0 9
45789: PUSH
45790: LD_INT 67
45792: PUSH
45793: LD_INT 45
45795: PUSH
45796: LD_INT 75
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45804: LD_VAR 0 6
45808: PPUSH
45809: CALL_OW 264
45813: PUSH
45814: LD_INT 26
45816: PUSH
45817: EMPTY
45818: LIST
45819: IN
45820: IFFALSE 45841
// points := [ 120 , 30 , 80 ] ;
45822: LD_ADDR_VAR 0 9
45826: PUSH
45827: LD_INT 120
45829: PUSH
45830: LD_INT 30
45832: PUSH
45833: LD_INT 80
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45841: LD_VAR 0 6
45845: PPUSH
45846: CALL_OW 264
45850: PUSH
45851: LD_INT 22
45853: PUSH
45854: EMPTY
45855: LIST
45856: IN
45857: IFFALSE 45878
// points := [ 40 , 1 , 1 ] ;
45859: LD_ADDR_VAR 0 9
45863: PUSH
45864: LD_INT 40
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: LIST
45877: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45878: LD_VAR 0 6
45882: PPUSH
45883: CALL_OW 264
45887: PUSH
45888: LD_INT 29
45890: PUSH
45891: EMPTY
45892: LIST
45893: IN
45894: IFFALSE 45915
// points := [ 70 , 200 , 400 ] ;
45896: LD_ADDR_VAR 0 9
45900: PUSH
45901: LD_INT 70
45903: PUSH
45904: LD_INT 200
45906: PUSH
45907: LD_INT 400
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45915: LD_VAR 0 6
45919: PPUSH
45920: CALL_OW 264
45924: PUSH
45925: LD_INT 14
45927: PUSH
45928: LD_INT 53
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: IN
45935: IFFALSE 45956
// points := [ 40 , 10 , 20 ] ;
45937: LD_ADDR_VAR 0 9
45941: PUSH
45942: LD_INT 40
45944: PUSH
45945: LD_INT 10
45947: PUSH
45948: LD_INT 20
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45956: LD_VAR 0 6
45960: PPUSH
45961: CALL_OW 264
45965: PUSH
45966: LD_INT 9
45968: PUSH
45969: EMPTY
45970: LIST
45971: IN
45972: IFFALSE 45993
// points := [ 5 , 70 , 20 ] ;
45974: LD_ADDR_VAR 0 9
45978: PUSH
45979: LD_INT 5
45981: PUSH
45982: LD_INT 70
45984: PUSH
45985: LD_INT 20
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45993: LD_VAR 0 6
45997: PPUSH
45998: CALL_OW 264
46002: PUSH
46003: LD_INT 10
46005: PUSH
46006: EMPTY
46007: LIST
46008: IN
46009: IFFALSE 46030
// points := [ 35 , 110 , 70 ] ;
46011: LD_ADDR_VAR 0 9
46015: PUSH
46016: LD_INT 35
46018: PUSH
46019: LD_INT 110
46021: PUSH
46022: LD_INT 70
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46030: LD_VAR 0 6
46034: PPUSH
46035: CALL_OW 265
46039: PUSH
46040: LD_INT 25
46042: EQUAL
46043: IFFALSE 46064
// points := [ 80 , 65 , 100 ] ;
46045: LD_ADDR_VAR 0 9
46049: PUSH
46050: LD_INT 80
46052: PUSH
46053: LD_INT 65
46055: PUSH
46056: LD_INT 100
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46064: LD_VAR 0 6
46068: PPUSH
46069: CALL_OW 263
46073: PUSH
46074: LD_INT 1
46076: EQUAL
46077: IFFALSE 46112
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46079: LD_ADDR_VAR 0 10
46083: PUSH
46084: LD_VAR 0 10
46088: PUSH
46089: LD_VAR 0 6
46093: PPUSH
46094: CALL_OW 311
46098: PPUSH
46099: LD_INT 3
46101: PPUSH
46102: CALL_OW 259
46106: PUSH
46107: LD_INT 4
46109: MUL
46110: MUL
46111: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46112: LD_VAR 0 6
46116: PPUSH
46117: CALL_OW 263
46121: PUSH
46122: LD_INT 2
46124: EQUAL
46125: IFFALSE 46176
// begin j := IsControledBy ( i ) ;
46127: LD_ADDR_VAR 0 7
46131: PUSH
46132: LD_VAR 0 6
46136: PPUSH
46137: CALL_OW 312
46141: ST_TO_ADDR
// if j then
46142: LD_VAR 0 7
46146: IFFALSE 46176
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46148: LD_ADDR_VAR 0 10
46152: PUSH
46153: LD_VAR 0 10
46157: PUSH
46158: LD_VAR 0 7
46162: PPUSH
46163: LD_INT 3
46165: PPUSH
46166: CALL_OW 259
46170: PUSH
46171: LD_INT 3
46173: MUL
46174: MUL
46175: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46176: LD_VAR 0 6
46180: PPUSH
46181: CALL_OW 264
46185: PUSH
46186: LD_INT 5
46188: PUSH
46189: LD_INT 6
46191: PUSH
46192: LD_INT 46
46194: PUSH
46195: LD_INT 44
46197: PUSH
46198: LD_INT 47
46200: PUSH
46201: LD_INT 45
46203: PUSH
46204: LD_INT 28
46206: PUSH
46207: LD_INT 7
46209: PUSH
46210: LD_INT 27
46212: PUSH
46213: LD_INT 29
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: IN
46228: PUSH
46229: LD_VAR 0 1
46233: PPUSH
46234: LD_INT 52
46236: PPUSH
46237: CALL_OW 321
46241: PUSH
46242: LD_INT 2
46244: EQUAL
46245: AND
46246: IFFALSE 46263
// bpoints := bpoints * 1.2 ;
46248: LD_ADDR_VAR 0 10
46252: PUSH
46253: LD_VAR 0 10
46257: PUSH
46258: LD_REAL  1.20000000000000E+0000
46261: MUL
46262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46263: LD_VAR 0 6
46267: PPUSH
46268: CALL_OW 264
46272: PUSH
46273: LD_INT 6
46275: PUSH
46276: LD_INT 46
46278: PUSH
46279: LD_INT 47
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: IN
46287: IFFALSE 46304
// bpoints := bpoints * 1.2 ;
46289: LD_ADDR_VAR 0 10
46293: PUSH
46294: LD_VAR 0 10
46298: PUSH
46299: LD_REAL  1.20000000000000E+0000
46302: MUL
46303: ST_TO_ADDR
// end ; unit_building :
46304: GO 46318
46306: LD_INT 3
46308: DOUBLE
46309: EQUAL
46310: IFTRUE 46314
46312: GO 46317
46314: POP
// ; end ;
46315: GO 46318
46317: POP
// for j = 1 to 3 do
46318: LD_ADDR_VAR 0 7
46322: PUSH
46323: DOUBLE
46324: LD_INT 1
46326: DEC
46327: ST_TO_ADDR
46328: LD_INT 3
46330: PUSH
46331: FOR_TO
46332: IFFALSE 46385
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46334: LD_ADDR_VAR 0 5
46338: PUSH
46339: LD_VAR 0 5
46343: PPUSH
46344: LD_VAR 0 7
46348: PPUSH
46349: LD_VAR 0 5
46353: PUSH
46354: LD_VAR 0 7
46358: ARRAY
46359: PUSH
46360: LD_VAR 0 9
46364: PUSH
46365: LD_VAR 0 7
46369: ARRAY
46370: PUSH
46371: LD_VAR 0 10
46375: MUL
46376: PLUS
46377: PPUSH
46378: CALL_OW 1
46382: ST_TO_ADDR
46383: GO 46331
46385: POP
46386: POP
// end ;
46387: GO 44866
46389: POP
46390: POP
// result := Replace ( result , 4 , tmp ) ;
46391: LD_ADDR_VAR 0 5
46395: PUSH
46396: LD_VAR 0 5
46400: PPUSH
46401: LD_INT 4
46403: PPUSH
46404: LD_VAR 0 8
46408: PPUSH
46409: CALL_OW 1
46413: ST_TO_ADDR
// end ;
46414: LD_VAR 0 5
46418: RET
// export function DangerAtRange ( unit , range ) ; begin
46419: LD_INT 0
46421: PPUSH
// if not unit then
46422: LD_VAR 0 1
46426: NOT
46427: IFFALSE 46431
// exit ;
46429: GO 46476
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46431: LD_ADDR_VAR 0 3
46435: PUSH
46436: LD_VAR 0 1
46440: PPUSH
46441: CALL_OW 255
46445: PPUSH
46446: LD_VAR 0 1
46450: PPUSH
46451: CALL_OW 250
46455: PPUSH
46456: LD_VAR 0 1
46460: PPUSH
46461: CALL_OW 251
46465: PPUSH
46466: LD_VAR 0 2
46470: PPUSH
46471: CALL 44718 0 4
46475: ST_TO_ADDR
// end ;
46476: LD_VAR 0 3
46480: RET
// export function DangerInArea ( side , area ) ; begin
46481: LD_INT 0
46483: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46484: LD_ADDR_VAR 0 3
46488: PUSH
46489: LD_VAR 0 2
46493: PPUSH
46494: LD_INT 81
46496: PUSH
46497: LD_VAR 0 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PPUSH
46506: CALL_OW 70
46510: ST_TO_ADDR
// end ;
46511: LD_VAR 0 3
46515: RET
// export function IsExtension ( b ) ; begin
46516: LD_INT 0
46518: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46519: LD_ADDR_VAR 0 2
46523: PUSH
46524: LD_VAR 0 1
46528: PUSH
46529: LD_INT 23
46531: PUSH
46532: LD_INT 20
46534: PUSH
46535: LD_INT 22
46537: PUSH
46538: LD_INT 17
46540: PUSH
46541: LD_INT 24
46543: PUSH
46544: LD_INT 21
46546: PUSH
46547: LD_INT 19
46549: PUSH
46550: LD_INT 16
46552: PUSH
46553: LD_INT 25
46555: PUSH
46556: LD_INT 18
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: IN
46571: ST_TO_ADDR
// end ;
46572: LD_VAR 0 2
46576: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46577: LD_INT 0
46579: PPUSH
46580: PPUSH
46581: PPUSH
// result := [ ] ;
46582: LD_ADDR_VAR 0 4
46586: PUSH
46587: EMPTY
46588: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46589: LD_ADDR_VAR 0 5
46593: PUSH
46594: LD_VAR 0 2
46598: PPUSH
46599: LD_INT 21
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PPUSH
46609: CALL_OW 70
46613: ST_TO_ADDR
// if not tmp then
46614: LD_VAR 0 5
46618: NOT
46619: IFFALSE 46623
// exit ;
46621: GO 46687
// if checkLink then
46623: LD_VAR 0 3
46627: IFFALSE 46677
// begin for i in tmp do
46629: LD_ADDR_VAR 0 6
46633: PUSH
46634: LD_VAR 0 5
46638: PUSH
46639: FOR_IN
46640: IFFALSE 46675
// if GetBase ( i ) <> base then
46642: LD_VAR 0 6
46646: PPUSH
46647: CALL_OW 274
46651: PUSH
46652: LD_VAR 0 1
46656: NONEQUAL
46657: IFFALSE 46673
// ComLinkToBase ( base , i ) ;
46659: LD_VAR 0 1
46663: PPUSH
46664: LD_VAR 0 6
46668: PPUSH
46669: CALL_OW 169
46673: GO 46639
46675: POP
46676: POP
// end ; result := tmp ;
46677: LD_ADDR_VAR 0 4
46681: PUSH
46682: LD_VAR 0 5
46686: ST_TO_ADDR
// end ;
46687: LD_VAR 0 4
46691: RET
// export function ComComplete ( units , b ) ; var i ; begin
46692: LD_INT 0
46694: PPUSH
46695: PPUSH
// if not units then
46696: LD_VAR 0 1
46700: NOT
46701: IFFALSE 46705
// exit ;
46703: GO 46795
// for i in units do
46705: LD_ADDR_VAR 0 4
46709: PUSH
46710: LD_VAR 0 1
46714: PUSH
46715: FOR_IN
46716: IFFALSE 46793
// if BuildingStatus ( b ) = bs_build then
46718: LD_VAR 0 2
46722: PPUSH
46723: CALL_OW 461
46727: PUSH
46728: LD_INT 1
46730: EQUAL
46731: IFFALSE 46791
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46733: LD_VAR 0 4
46737: PPUSH
46738: LD_STRING h
46740: PUSH
46741: LD_VAR 0 2
46745: PPUSH
46746: CALL_OW 250
46750: PUSH
46751: LD_VAR 0 2
46755: PPUSH
46756: CALL_OW 251
46760: PUSH
46761: LD_VAR 0 2
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: PUSH
46784: EMPTY
46785: LIST
46786: PPUSH
46787: CALL_OW 446
46791: GO 46715
46793: POP
46794: POP
// end ;
46795: LD_VAR 0 3
46799: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46800: LD_INT 0
46802: PPUSH
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46808: LD_VAR 0 1
46812: NOT
46813: PUSH
46814: LD_VAR 0 1
46818: PPUSH
46819: CALL_OW 263
46823: PUSH
46824: LD_INT 2
46826: NONEQUAL
46827: OR
46828: IFFALSE 46832
// exit ;
46830: GO 47148
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46832: LD_ADDR_VAR 0 6
46836: PUSH
46837: LD_INT 22
46839: PUSH
46840: LD_VAR 0 1
46844: PPUSH
46845: CALL_OW 255
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: LD_INT 30
46859: PUSH
46860: LD_INT 36
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 34
46869: PUSH
46870: LD_INT 31
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PPUSH
46886: CALL_OW 69
46890: ST_TO_ADDR
// if not tmp then
46891: LD_VAR 0 6
46895: NOT
46896: IFFALSE 46900
// exit ;
46898: GO 47148
// result := [ ] ;
46900: LD_ADDR_VAR 0 2
46904: PUSH
46905: EMPTY
46906: ST_TO_ADDR
// for i in tmp do
46907: LD_ADDR_VAR 0 3
46911: PUSH
46912: LD_VAR 0 6
46916: PUSH
46917: FOR_IN
46918: IFFALSE 46989
// begin t := UnitsInside ( i ) ;
46920: LD_ADDR_VAR 0 4
46924: PUSH
46925: LD_VAR 0 3
46929: PPUSH
46930: CALL_OW 313
46934: ST_TO_ADDR
// if t then
46935: LD_VAR 0 4
46939: IFFALSE 46987
// for j in t do
46941: LD_ADDR_VAR 0 7
46945: PUSH
46946: LD_VAR 0 4
46950: PUSH
46951: FOR_IN
46952: IFFALSE 46985
// result := Replace ( result , result + 1 , j ) ;
46954: LD_ADDR_VAR 0 2
46958: PUSH
46959: LD_VAR 0 2
46963: PPUSH
46964: LD_VAR 0 2
46968: PUSH
46969: LD_INT 1
46971: PLUS
46972: PPUSH
46973: LD_VAR 0 7
46977: PPUSH
46978: CALL_OW 1
46982: ST_TO_ADDR
46983: GO 46951
46985: POP
46986: POP
// end ;
46987: GO 46917
46989: POP
46990: POP
// if not result then
46991: LD_VAR 0 2
46995: NOT
46996: IFFALSE 47000
// exit ;
46998: GO 47148
// mech := result [ 1 ] ;
47000: LD_ADDR_VAR 0 5
47004: PUSH
47005: LD_VAR 0 2
47009: PUSH
47010: LD_INT 1
47012: ARRAY
47013: ST_TO_ADDR
// if result > 1 then
47014: LD_VAR 0 2
47018: PUSH
47019: LD_INT 1
47021: GREATER
47022: IFFALSE 47134
// begin for i = 2 to result do
47024: LD_ADDR_VAR 0 3
47028: PUSH
47029: DOUBLE
47030: LD_INT 2
47032: DEC
47033: ST_TO_ADDR
47034: LD_VAR 0 2
47038: PUSH
47039: FOR_TO
47040: IFFALSE 47132
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47042: LD_ADDR_VAR 0 4
47046: PUSH
47047: LD_VAR 0 2
47051: PUSH
47052: LD_VAR 0 3
47056: ARRAY
47057: PPUSH
47058: LD_INT 3
47060: PPUSH
47061: CALL_OW 259
47065: PUSH
47066: LD_VAR 0 2
47070: PUSH
47071: LD_VAR 0 3
47075: ARRAY
47076: PPUSH
47077: CALL_OW 432
47081: MINUS
47082: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47083: LD_VAR 0 4
47087: PUSH
47088: LD_VAR 0 5
47092: PPUSH
47093: LD_INT 3
47095: PPUSH
47096: CALL_OW 259
47100: PUSH
47101: LD_VAR 0 5
47105: PPUSH
47106: CALL_OW 432
47110: MINUS
47111: GREATEREQUAL
47112: IFFALSE 47130
// mech := result [ i ] ;
47114: LD_ADDR_VAR 0 5
47118: PUSH
47119: LD_VAR 0 2
47123: PUSH
47124: LD_VAR 0 3
47128: ARRAY
47129: ST_TO_ADDR
// end ;
47130: GO 47039
47132: POP
47133: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47134: LD_VAR 0 1
47138: PPUSH
47139: LD_VAR 0 5
47143: PPUSH
47144: CALL_OW 135
// end ;
47148: LD_VAR 0 2
47152: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47153: LD_INT 0
47155: PPUSH
47156: PPUSH
47157: PPUSH
47158: PPUSH
47159: PPUSH
47160: PPUSH
47161: PPUSH
47162: PPUSH
47163: PPUSH
47164: PPUSH
47165: PPUSH
47166: PPUSH
47167: PPUSH
// result := [ ] ;
47168: LD_ADDR_VAR 0 7
47172: PUSH
47173: EMPTY
47174: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47175: LD_VAR 0 1
47179: PPUSH
47180: CALL_OW 266
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: IN
47195: NOT
47196: IFFALSE 47200
// exit ;
47198: GO 48834
// if name then
47200: LD_VAR 0 3
47204: IFFALSE 47220
// SetBName ( base_dep , name ) ;
47206: LD_VAR 0 1
47210: PPUSH
47211: LD_VAR 0 3
47215: PPUSH
47216: CALL_OW 500
// base := GetBase ( base_dep ) ;
47220: LD_ADDR_VAR 0 15
47224: PUSH
47225: LD_VAR 0 1
47229: PPUSH
47230: CALL_OW 274
47234: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47235: LD_ADDR_VAR 0 16
47239: PUSH
47240: LD_VAR 0 1
47244: PPUSH
47245: CALL_OW 255
47249: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47250: LD_ADDR_VAR 0 17
47254: PUSH
47255: LD_VAR 0 1
47259: PPUSH
47260: CALL_OW 248
47264: ST_TO_ADDR
// if sources then
47265: LD_VAR 0 5
47269: IFFALSE 47316
// for i = 1 to 3 do
47271: LD_ADDR_VAR 0 8
47275: PUSH
47276: DOUBLE
47277: LD_INT 1
47279: DEC
47280: ST_TO_ADDR
47281: LD_INT 3
47283: PUSH
47284: FOR_TO
47285: IFFALSE 47314
// AddResourceType ( base , i , sources [ i ] ) ;
47287: LD_VAR 0 15
47291: PPUSH
47292: LD_VAR 0 8
47296: PPUSH
47297: LD_VAR 0 5
47301: PUSH
47302: LD_VAR 0 8
47306: ARRAY
47307: PPUSH
47308: CALL_OW 276
47312: GO 47284
47314: POP
47315: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47316: LD_ADDR_VAR 0 18
47320: PUSH
47321: LD_VAR 0 15
47325: PPUSH
47326: LD_VAR 0 2
47330: PPUSH
47331: LD_INT 1
47333: PPUSH
47334: CALL 46577 0 3
47338: ST_TO_ADDR
// InitHc ;
47339: CALL_OW 19
// InitUc ;
47343: CALL_OW 18
// uc_side := side ;
47347: LD_ADDR_OWVAR 20
47351: PUSH
47352: LD_VAR 0 16
47356: ST_TO_ADDR
// uc_nation := nation ;
47357: LD_ADDR_OWVAR 21
47361: PUSH
47362: LD_VAR 0 17
47366: ST_TO_ADDR
// if buildings then
47367: LD_VAR 0 18
47371: IFFALSE 48693
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47373: LD_ADDR_VAR 0 19
47377: PUSH
47378: LD_VAR 0 18
47382: PPUSH
47383: LD_INT 2
47385: PUSH
47386: LD_INT 30
47388: PUSH
47389: LD_INT 29
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 30
47398: PUSH
47399: LD_INT 30
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: PPUSH
47411: CALL_OW 72
47415: ST_TO_ADDR
// if tmp then
47416: LD_VAR 0 19
47420: IFFALSE 47468
// for i in tmp do
47422: LD_ADDR_VAR 0 8
47426: PUSH
47427: LD_VAR 0 19
47431: PUSH
47432: FOR_IN
47433: IFFALSE 47466
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47435: LD_VAR 0 8
47439: PPUSH
47440: CALL_OW 250
47444: PPUSH
47445: LD_VAR 0 8
47449: PPUSH
47450: CALL_OW 251
47454: PPUSH
47455: LD_VAR 0 16
47459: PPUSH
47460: CALL_OW 441
47464: GO 47432
47466: POP
47467: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47468: LD_VAR 0 18
47472: PPUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 30
47478: PUSH
47479: LD_INT 32
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 30
47488: PUSH
47489: LD_INT 33
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: PPUSH
47501: CALL_OW 72
47505: IFFALSE 47593
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47507: LD_ADDR_VAR 0 8
47511: PUSH
47512: LD_VAR 0 18
47516: PPUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 30
47522: PUSH
47523: LD_INT 32
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 30
47532: PUSH
47533: LD_INT 33
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: PPUSH
47545: CALL_OW 72
47549: PUSH
47550: FOR_IN
47551: IFFALSE 47591
// begin if not GetBWeapon ( i ) then
47553: LD_VAR 0 8
47557: PPUSH
47558: CALL_OW 269
47562: NOT
47563: IFFALSE 47589
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47565: LD_VAR 0 8
47569: PPUSH
47570: LD_VAR 0 8
47574: PPUSH
47575: LD_VAR 0 2
47579: PPUSH
47580: CALL 48839 0 2
47584: PPUSH
47585: CALL_OW 431
// end ;
47589: GO 47550
47591: POP
47592: POP
// end ; for i = 1 to personel do
47593: LD_ADDR_VAR 0 8
47597: PUSH
47598: DOUBLE
47599: LD_INT 1
47601: DEC
47602: ST_TO_ADDR
47603: LD_VAR 0 6
47607: PUSH
47608: FOR_TO
47609: IFFALSE 48673
// begin if i > 4 then
47611: LD_VAR 0 8
47615: PUSH
47616: LD_INT 4
47618: GREATER
47619: IFFALSE 47623
// break ;
47621: GO 48673
// case i of 1 :
47623: LD_VAR 0 8
47627: PUSH
47628: LD_INT 1
47630: DOUBLE
47631: EQUAL
47632: IFTRUE 47636
47634: GO 47716
47636: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47637: LD_ADDR_VAR 0 12
47641: PUSH
47642: LD_VAR 0 18
47646: PPUSH
47647: LD_INT 22
47649: PUSH
47650: LD_VAR 0 16
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 58
47661: PUSH
47662: EMPTY
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: LD_INT 30
47670: PUSH
47671: LD_INT 32
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 30
47680: PUSH
47681: LD_INT 4
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 30
47690: PUSH
47691: LD_INT 5
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: PPUSH
47709: CALL_OW 72
47713: ST_TO_ADDR
47714: GO 47938
47716: LD_INT 2
47718: DOUBLE
47719: EQUAL
47720: IFTRUE 47724
47722: GO 47786
47724: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47725: LD_ADDR_VAR 0 12
47729: PUSH
47730: LD_VAR 0 18
47734: PPUSH
47735: LD_INT 22
47737: PUSH
47738: LD_VAR 0 16
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 30
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 30
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: LIST
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PPUSH
47779: CALL_OW 72
47783: ST_TO_ADDR
47784: GO 47938
47786: LD_INT 3
47788: DOUBLE
47789: EQUAL
47790: IFTRUE 47794
47792: GO 47856
47794: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47795: LD_ADDR_VAR 0 12
47799: PUSH
47800: LD_VAR 0 18
47804: PPUSH
47805: LD_INT 22
47807: PUSH
47808: LD_VAR 0 16
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: LD_INT 30
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 30
47832: PUSH
47833: LD_INT 3
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PPUSH
47849: CALL_OW 72
47853: ST_TO_ADDR
47854: GO 47938
47856: LD_INT 4
47858: DOUBLE
47859: EQUAL
47860: IFTRUE 47864
47862: GO 47937
47864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47865: LD_ADDR_VAR 0 12
47869: PUSH
47870: LD_VAR 0 18
47874: PPUSH
47875: LD_INT 22
47877: PUSH
47878: LD_VAR 0 16
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 30
47892: PUSH
47893: LD_INT 6
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 30
47902: PUSH
47903: LD_INT 7
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 30
47912: PUSH
47913: LD_INT 8
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PPUSH
47930: CALL_OW 72
47934: ST_TO_ADDR
47935: GO 47938
47937: POP
// if i = 1 then
47938: LD_VAR 0 8
47942: PUSH
47943: LD_INT 1
47945: EQUAL
47946: IFFALSE 48057
// begin tmp := [ ] ;
47948: LD_ADDR_VAR 0 19
47952: PUSH
47953: EMPTY
47954: ST_TO_ADDR
// for j in f do
47955: LD_ADDR_VAR 0 9
47959: PUSH
47960: LD_VAR 0 12
47964: PUSH
47965: FOR_IN
47966: IFFALSE 48039
// if GetBType ( j ) = b_bunker then
47968: LD_VAR 0 9
47972: PPUSH
47973: CALL_OW 266
47977: PUSH
47978: LD_INT 32
47980: EQUAL
47981: IFFALSE 48008
// tmp := Insert ( tmp , 1 , j ) else
47983: LD_ADDR_VAR 0 19
47987: PUSH
47988: LD_VAR 0 19
47992: PPUSH
47993: LD_INT 1
47995: PPUSH
47996: LD_VAR 0 9
48000: PPUSH
48001: CALL_OW 2
48005: ST_TO_ADDR
48006: GO 48037
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48008: LD_ADDR_VAR 0 19
48012: PUSH
48013: LD_VAR 0 19
48017: PPUSH
48018: LD_VAR 0 19
48022: PUSH
48023: LD_INT 1
48025: PLUS
48026: PPUSH
48027: LD_VAR 0 9
48031: PPUSH
48032: CALL_OW 2
48036: ST_TO_ADDR
48037: GO 47965
48039: POP
48040: POP
// if tmp then
48041: LD_VAR 0 19
48045: IFFALSE 48057
// f := tmp ;
48047: LD_ADDR_VAR 0 12
48051: PUSH
48052: LD_VAR 0 19
48056: ST_TO_ADDR
// end ; x := personel [ i ] ;
48057: LD_ADDR_VAR 0 13
48061: PUSH
48062: LD_VAR 0 6
48066: PUSH
48067: LD_VAR 0 8
48071: ARRAY
48072: ST_TO_ADDR
// if x = - 1 then
48073: LD_VAR 0 13
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: EQUAL
48082: IFFALSE 48291
// begin for j in f do
48084: LD_ADDR_VAR 0 9
48088: PUSH
48089: LD_VAR 0 12
48093: PUSH
48094: FOR_IN
48095: IFFALSE 48287
// repeat InitHc ;
48097: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48101: LD_VAR 0 9
48105: PPUSH
48106: CALL_OW 266
48110: PUSH
48111: LD_INT 5
48113: EQUAL
48114: IFFALSE 48184
// begin if UnitsInside ( j ) < 3 then
48116: LD_VAR 0 9
48120: PPUSH
48121: CALL_OW 313
48125: PUSH
48126: LD_INT 3
48128: LESS
48129: IFFALSE 48165
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48131: LD_INT 0
48133: PPUSH
48134: LD_INT 5
48136: PUSH
48137: LD_INT 8
48139: PUSH
48140: LD_INT 9
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: PUSH
48148: LD_VAR 0 17
48152: ARRAY
48153: PPUSH
48154: LD_VAR 0 4
48158: PPUSH
48159: CALL_OW 380
48163: GO 48182
// PrepareHuman ( false , i , skill ) ;
48165: LD_INT 0
48167: PPUSH
48168: LD_VAR 0 8
48172: PPUSH
48173: LD_VAR 0 4
48177: PPUSH
48178: CALL_OW 380
// end else
48182: GO 48201
// PrepareHuman ( false , i , skill ) ;
48184: LD_INT 0
48186: PPUSH
48187: LD_VAR 0 8
48191: PPUSH
48192: LD_VAR 0 4
48196: PPUSH
48197: CALL_OW 380
// un := CreateHuman ;
48201: LD_ADDR_VAR 0 14
48205: PUSH
48206: CALL_OW 44
48210: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48211: LD_ADDR_VAR 0 7
48215: PUSH
48216: LD_VAR 0 7
48220: PPUSH
48221: LD_INT 1
48223: PPUSH
48224: LD_VAR 0 14
48228: PPUSH
48229: CALL_OW 2
48233: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48234: LD_VAR 0 14
48238: PPUSH
48239: LD_VAR 0 9
48243: PPUSH
48244: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48248: LD_VAR 0 9
48252: PPUSH
48253: CALL_OW 313
48257: PUSH
48258: LD_INT 6
48260: EQUAL
48261: PUSH
48262: LD_VAR 0 9
48266: PPUSH
48267: CALL_OW 266
48271: PUSH
48272: LD_INT 32
48274: PUSH
48275: LD_INT 31
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: IN
48282: OR
48283: IFFALSE 48097
48285: GO 48094
48287: POP
48288: POP
// end else
48289: GO 48671
// for j = 1 to x do
48291: LD_ADDR_VAR 0 9
48295: PUSH
48296: DOUBLE
48297: LD_INT 1
48299: DEC
48300: ST_TO_ADDR
48301: LD_VAR 0 13
48305: PUSH
48306: FOR_TO
48307: IFFALSE 48669
// begin InitHc ;
48309: CALL_OW 19
// if not f then
48313: LD_VAR 0 12
48317: NOT
48318: IFFALSE 48407
// begin PrepareHuman ( false , i , skill ) ;
48320: LD_INT 0
48322: PPUSH
48323: LD_VAR 0 8
48327: PPUSH
48328: LD_VAR 0 4
48332: PPUSH
48333: CALL_OW 380
// un := CreateHuman ;
48337: LD_ADDR_VAR 0 14
48341: PUSH
48342: CALL_OW 44
48346: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48347: LD_ADDR_VAR 0 7
48351: PUSH
48352: LD_VAR 0 7
48356: PPUSH
48357: LD_INT 1
48359: PPUSH
48360: LD_VAR 0 14
48364: PPUSH
48365: CALL_OW 2
48369: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48370: LD_VAR 0 14
48374: PPUSH
48375: LD_VAR 0 1
48379: PPUSH
48380: CALL_OW 250
48384: PPUSH
48385: LD_VAR 0 1
48389: PPUSH
48390: CALL_OW 251
48394: PPUSH
48395: LD_INT 10
48397: PPUSH
48398: LD_INT 0
48400: PPUSH
48401: CALL_OW 50
// continue ;
48405: GO 48306
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48407: LD_VAR 0 12
48411: PUSH
48412: LD_INT 1
48414: ARRAY
48415: PPUSH
48416: CALL_OW 313
48420: PUSH
48421: LD_VAR 0 12
48425: PUSH
48426: LD_INT 1
48428: ARRAY
48429: PPUSH
48430: CALL_OW 266
48434: PUSH
48435: LD_INT 32
48437: PUSH
48438: LD_INT 31
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: IN
48445: AND
48446: PUSH
48447: LD_VAR 0 12
48451: PUSH
48452: LD_INT 1
48454: ARRAY
48455: PPUSH
48456: CALL_OW 313
48460: PUSH
48461: LD_INT 6
48463: EQUAL
48464: OR
48465: IFFALSE 48485
// f := Delete ( f , 1 ) ;
48467: LD_ADDR_VAR 0 12
48471: PUSH
48472: LD_VAR 0 12
48476: PPUSH
48477: LD_INT 1
48479: PPUSH
48480: CALL_OW 3
48484: ST_TO_ADDR
// if not f then
48485: LD_VAR 0 12
48489: NOT
48490: IFFALSE 48508
// begin x := x + 2 ;
48492: LD_ADDR_VAR 0 13
48496: PUSH
48497: LD_VAR 0 13
48501: PUSH
48502: LD_INT 2
48504: PLUS
48505: ST_TO_ADDR
// continue ;
48506: GO 48306
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48508: LD_VAR 0 12
48512: PUSH
48513: LD_INT 1
48515: ARRAY
48516: PPUSH
48517: CALL_OW 266
48521: PUSH
48522: LD_INT 5
48524: EQUAL
48525: IFFALSE 48599
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48527: LD_VAR 0 12
48531: PUSH
48532: LD_INT 1
48534: ARRAY
48535: PPUSH
48536: CALL_OW 313
48540: PUSH
48541: LD_INT 3
48543: LESS
48544: IFFALSE 48580
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48546: LD_INT 0
48548: PPUSH
48549: LD_INT 5
48551: PUSH
48552: LD_INT 8
48554: PUSH
48555: LD_INT 9
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: LIST
48562: PUSH
48563: LD_VAR 0 17
48567: ARRAY
48568: PPUSH
48569: LD_VAR 0 4
48573: PPUSH
48574: CALL_OW 380
48578: GO 48597
// PrepareHuman ( false , i , skill ) ;
48580: LD_INT 0
48582: PPUSH
48583: LD_VAR 0 8
48587: PPUSH
48588: LD_VAR 0 4
48592: PPUSH
48593: CALL_OW 380
// end else
48597: GO 48616
// PrepareHuman ( false , i , skill ) ;
48599: LD_INT 0
48601: PPUSH
48602: LD_VAR 0 8
48606: PPUSH
48607: LD_VAR 0 4
48611: PPUSH
48612: CALL_OW 380
// un := CreateHuman ;
48616: LD_ADDR_VAR 0 14
48620: PUSH
48621: CALL_OW 44
48625: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48626: LD_ADDR_VAR 0 7
48630: PUSH
48631: LD_VAR 0 7
48635: PPUSH
48636: LD_INT 1
48638: PPUSH
48639: LD_VAR 0 14
48643: PPUSH
48644: CALL_OW 2
48648: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48649: LD_VAR 0 14
48653: PPUSH
48654: LD_VAR 0 12
48658: PUSH
48659: LD_INT 1
48661: ARRAY
48662: PPUSH
48663: CALL_OW 52
// end ;
48667: GO 48306
48669: POP
48670: POP
// end ;
48671: GO 47608
48673: POP
48674: POP
// result := result ^ buildings ;
48675: LD_ADDR_VAR 0 7
48679: PUSH
48680: LD_VAR 0 7
48684: PUSH
48685: LD_VAR 0 18
48689: ADD
48690: ST_TO_ADDR
// end else
48691: GO 48834
// begin for i = 1 to personel do
48693: LD_ADDR_VAR 0 8
48697: PUSH
48698: DOUBLE
48699: LD_INT 1
48701: DEC
48702: ST_TO_ADDR
48703: LD_VAR 0 6
48707: PUSH
48708: FOR_TO
48709: IFFALSE 48832
// begin if i > 4 then
48711: LD_VAR 0 8
48715: PUSH
48716: LD_INT 4
48718: GREATER
48719: IFFALSE 48723
// break ;
48721: GO 48832
// x := personel [ i ] ;
48723: LD_ADDR_VAR 0 13
48727: PUSH
48728: LD_VAR 0 6
48732: PUSH
48733: LD_VAR 0 8
48737: ARRAY
48738: ST_TO_ADDR
// if x = - 1 then
48739: LD_VAR 0 13
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: EQUAL
48748: IFFALSE 48752
// continue ;
48750: GO 48708
// PrepareHuman ( false , i , skill ) ;
48752: LD_INT 0
48754: PPUSH
48755: LD_VAR 0 8
48759: PPUSH
48760: LD_VAR 0 4
48764: PPUSH
48765: CALL_OW 380
// un := CreateHuman ;
48769: LD_ADDR_VAR 0 14
48773: PUSH
48774: CALL_OW 44
48778: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48779: LD_VAR 0 14
48783: PPUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: CALL_OW 250
48793: PPUSH
48794: LD_VAR 0 1
48798: PPUSH
48799: CALL_OW 251
48803: PPUSH
48804: LD_INT 10
48806: PPUSH
48807: LD_INT 0
48809: PPUSH
48810: CALL_OW 50
// result := result ^ un ;
48814: LD_ADDR_VAR 0 7
48818: PUSH
48819: LD_VAR 0 7
48823: PUSH
48824: LD_VAR 0 14
48828: ADD
48829: ST_TO_ADDR
// end ;
48830: GO 48708
48832: POP
48833: POP
// end ; end ;
48834: LD_VAR 0 7
48838: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48839: LD_INT 0
48841: PPUSH
48842: PPUSH
48843: PPUSH
48844: PPUSH
48845: PPUSH
48846: PPUSH
48847: PPUSH
48848: PPUSH
48849: PPUSH
48850: PPUSH
48851: PPUSH
48852: PPUSH
48853: PPUSH
48854: PPUSH
48855: PPUSH
48856: PPUSH
// result := false ;
48857: LD_ADDR_VAR 0 3
48861: PUSH
48862: LD_INT 0
48864: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48865: LD_VAR 0 1
48869: NOT
48870: PUSH
48871: LD_VAR 0 1
48875: PPUSH
48876: CALL_OW 266
48880: PUSH
48881: LD_INT 32
48883: PUSH
48884: LD_INT 33
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: IN
48891: NOT
48892: OR
48893: IFFALSE 48897
// exit ;
48895: GO 50006
// nat := GetNation ( tower ) ;
48897: LD_ADDR_VAR 0 12
48901: PUSH
48902: LD_VAR 0 1
48906: PPUSH
48907: CALL_OW 248
48911: ST_TO_ADDR
// side := GetSide ( tower ) ;
48912: LD_ADDR_VAR 0 16
48916: PUSH
48917: LD_VAR 0 1
48921: PPUSH
48922: CALL_OW 255
48926: ST_TO_ADDR
// x := GetX ( tower ) ;
48927: LD_ADDR_VAR 0 10
48931: PUSH
48932: LD_VAR 0 1
48936: PPUSH
48937: CALL_OW 250
48941: ST_TO_ADDR
// y := GetY ( tower ) ;
48942: LD_ADDR_VAR 0 11
48946: PUSH
48947: LD_VAR 0 1
48951: PPUSH
48952: CALL_OW 251
48956: ST_TO_ADDR
// if not x or not y then
48957: LD_VAR 0 10
48961: NOT
48962: PUSH
48963: LD_VAR 0 11
48967: NOT
48968: OR
48969: IFFALSE 48973
// exit ;
48971: GO 50006
// weapon := 0 ;
48973: LD_ADDR_VAR 0 18
48977: PUSH
48978: LD_INT 0
48980: ST_TO_ADDR
// fac_list := [ ] ;
48981: LD_ADDR_VAR 0 17
48985: PUSH
48986: EMPTY
48987: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48988: LD_ADDR_VAR 0 6
48992: PUSH
48993: LD_VAR 0 1
48997: PPUSH
48998: CALL_OW 274
49002: PPUSH
49003: LD_VAR 0 2
49007: PPUSH
49008: LD_INT 0
49010: PPUSH
49011: CALL 46577 0 3
49015: PPUSH
49016: LD_INT 30
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PPUSH
49026: CALL_OW 72
49030: ST_TO_ADDR
// if not factories then
49031: LD_VAR 0 6
49035: NOT
49036: IFFALSE 49040
// exit ;
49038: GO 50006
// for i in factories do
49040: LD_ADDR_VAR 0 8
49044: PUSH
49045: LD_VAR 0 6
49049: PUSH
49050: FOR_IN
49051: IFFALSE 49076
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49053: LD_ADDR_VAR 0 17
49057: PUSH
49058: LD_VAR 0 17
49062: PUSH
49063: LD_VAR 0 8
49067: PPUSH
49068: CALL_OW 478
49072: UNION
49073: ST_TO_ADDR
49074: GO 49050
49076: POP
49077: POP
// if not fac_list then
49078: LD_VAR 0 17
49082: NOT
49083: IFFALSE 49087
// exit ;
49085: GO 50006
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49087: LD_ADDR_VAR 0 5
49091: PUSH
49092: LD_INT 4
49094: PUSH
49095: LD_INT 5
49097: PUSH
49098: LD_INT 9
49100: PUSH
49101: LD_INT 10
49103: PUSH
49104: LD_INT 6
49106: PUSH
49107: LD_INT 7
49109: PUSH
49110: LD_INT 11
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 27
49124: PUSH
49125: LD_INT 28
49127: PUSH
49128: LD_INT 26
49130: PUSH
49131: LD_INT 30
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 43
49142: PUSH
49143: LD_INT 44
49145: PUSH
49146: LD_INT 46
49148: PUSH
49149: LD_INT 45
49151: PUSH
49152: LD_INT 47
49154: PUSH
49155: LD_INT 49
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: PUSH
49171: LD_VAR 0 12
49175: ARRAY
49176: ST_TO_ADDR
// list := list isect fac_list ;
49177: LD_ADDR_VAR 0 5
49181: PUSH
49182: LD_VAR 0 5
49186: PUSH
49187: LD_VAR 0 17
49191: ISECT
49192: ST_TO_ADDR
// if not list then
49193: LD_VAR 0 5
49197: NOT
49198: IFFALSE 49202
// exit ;
49200: GO 50006
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49202: LD_VAR 0 12
49206: PUSH
49207: LD_INT 3
49209: EQUAL
49210: PUSH
49211: LD_INT 49
49213: PUSH
49214: LD_VAR 0 5
49218: IN
49219: AND
49220: PUSH
49221: LD_INT 31
49223: PPUSH
49224: LD_VAR 0 16
49228: PPUSH
49229: CALL_OW 321
49233: PUSH
49234: LD_INT 2
49236: EQUAL
49237: AND
49238: IFFALSE 49298
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49240: LD_INT 22
49242: PUSH
49243: LD_VAR 0 16
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 35
49254: PUSH
49255: LD_INT 49
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 91
49264: PUSH
49265: LD_VAR 0 1
49269: PUSH
49270: LD_INT 10
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: LIST
49282: PPUSH
49283: CALL_OW 69
49287: NOT
49288: IFFALSE 49298
// weapon := ru_time_lapser ;
49290: LD_ADDR_VAR 0 18
49294: PUSH
49295: LD_INT 49
49297: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49298: LD_VAR 0 12
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: IN
49313: PUSH
49314: LD_INT 11
49316: PUSH
49317: LD_VAR 0 5
49321: IN
49322: PUSH
49323: LD_INT 30
49325: PUSH
49326: LD_VAR 0 5
49330: IN
49331: OR
49332: AND
49333: PUSH
49334: LD_INT 6
49336: PPUSH
49337: LD_VAR 0 16
49341: PPUSH
49342: CALL_OW 321
49346: PUSH
49347: LD_INT 2
49349: EQUAL
49350: AND
49351: IFFALSE 49516
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49353: LD_INT 22
49355: PUSH
49356: LD_VAR 0 16
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 35
49370: PUSH
49371: LD_INT 11
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 35
49380: PUSH
49381: LD_INT 30
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 91
49395: PUSH
49396: LD_VAR 0 1
49400: PUSH
49401: LD_INT 18
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: PPUSH
49414: CALL_OW 69
49418: NOT
49419: PUSH
49420: LD_INT 22
49422: PUSH
49423: LD_VAR 0 16
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 30
49437: PUSH
49438: LD_INT 32
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 30
49447: PUSH
49448: LD_INT 33
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 91
49462: PUSH
49463: LD_VAR 0 1
49467: PUSH
49468: LD_INT 12
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: LIST
49480: PUSH
49481: EMPTY
49482: LIST
49483: PPUSH
49484: CALL_OW 69
49488: PUSH
49489: LD_INT 2
49491: GREATER
49492: AND
49493: IFFALSE 49516
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49495: LD_ADDR_VAR 0 18
49499: PUSH
49500: LD_INT 11
49502: PUSH
49503: LD_INT 30
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_VAR 0 12
49514: ARRAY
49515: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49516: LD_VAR 0 18
49520: NOT
49521: PUSH
49522: LD_INT 40
49524: PPUSH
49525: LD_VAR 0 16
49529: PPUSH
49530: CALL_OW 321
49534: PUSH
49535: LD_INT 2
49537: EQUAL
49538: AND
49539: PUSH
49540: LD_INT 7
49542: PUSH
49543: LD_VAR 0 5
49547: IN
49548: PUSH
49549: LD_INT 28
49551: PUSH
49552: LD_VAR 0 5
49556: IN
49557: OR
49558: PUSH
49559: LD_INT 45
49561: PUSH
49562: LD_VAR 0 5
49566: IN
49567: OR
49568: AND
49569: IFFALSE 49823
// begin hex := GetHexInfo ( x , y ) ;
49571: LD_ADDR_VAR 0 4
49575: PUSH
49576: LD_VAR 0 10
49580: PPUSH
49581: LD_VAR 0 11
49585: PPUSH
49586: CALL_OW 546
49590: ST_TO_ADDR
// if hex [ 1 ] then
49591: LD_VAR 0 4
49595: PUSH
49596: LD_INT 1
49598: ARRAY
49599: IFFALSE 49603
// exit ;
49601: GO 50006
// height := hex [ 2 ] ;
49603: LD_ADDR_VAR 0 15
49607: PUSH
49608: LD_VAR 0 4
49612: PUSH
49613: LD_INT 2
49615: ARRAY
49616: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49617: LD_ADDR_VAR 0 14
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: LD_INT 3
49630: PUSH
49631: LD_INT 5
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: ST_TO_ADDR
// for i in tmp do
49640: LD_ADDR_VAR 0 8
49644: PUSH
49645: LD_VAR 0 14
49649: PUSH
49650: FOR_IN
49651: IFFALSE 49821
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49653: LD_ADDR_VAR 0 9
49657: PUSH
49658: LD_VAR 0 10
49662: PPUSH
49663: LD_VAR 0 8
49667: PPUSH
49668: LD_INT 5
49670: PPUSH
49671: CALL_OW 272
49675: PUSH
49676: LD_VAR 0 11
49680: PPUSH
49681: LD_VAR 0 8
49685: PPUSH
49686: LD_INT 5
49688: PPUSH
49689: CALL_OW 273
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49698: LD_VAR 0 9
49702: PUSH
49703: LD_INT 1
49705: ARRAY
49706: PPUSH
49707: LD_VAR 0 9
49711: PUSH
49712: LD_INT 2
49714: ARRAY
49715: PPUSH
49716: CALL_OW 488
49720: IFFALSE 49819
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49722: LD_ADDR_VAR 0 4
49726: PUSH
49727: LD_VAR 0 9
49731: PUSH
49732: LD_INT 1
49734: ARRAY
49735: PPUSH
49736: LD_VAR 0 9
49740: PUSH
49741: LD_INT 2
49743: ARRAY
49744: PPUSH
49745: CALL_OW 546
49749: ST_TO_ADDR
// if hex [ 1 ] then
49750: LD_VAR 0 4
49754: PUSH
49755: LD_INT 1
49757: ARRAY
49758: IFFALSE 49762
// continue ;
49760: GO 49650
// h := hex [ 2 ] ;
49762: LD_ADDR_VAR 0 13
49766: PUSH
49767: LD_VAR 0 4
49771: PUSH
49772: LD_INT 2
49774: ARRAY
49775: ST_TO_ADDR
// if h + 7 < height then
49776: LD_VAR 0 13
49780: PUSH
49781: LD_INT 7
49783: PLUS
49784: PUSH
49785: LD_VAR 0 15
49789: LESS
49790: IFFALSE 49819
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49792: LD_ADDR_VAR 0 18
49796: PUSH
49797: LD_INT 7
49799: PUSH
49800: LD_INT 28
49802: PUSH
49803: LD_INT 45
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: LIST
49810: PUSH
49811: LD_VAR 0 12
49815: ARRAY
49816: ST_TO_ADDR
// break ;
49817: GO 49821
// end ; end ; end ;
49819: GO 49650
49821: POP
49822: POP
// end ; if not weapon then
49823: LD_VAR 0 18
49827: NOT
49828: IFFALSE 49888
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49830: LD_ADDR_VAR 0 5
49834: PUSH
49835: LD_VAR 0 5
49839: PUSH
49840: LD_INT 11
49842: PUSH
49843: LD_INT 30
49845: PUSH
49846: LD_INT 49
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: DIFF
49854: ST_TO_ADDR
// if not list then
49855: LD_VAR 0 5
49859: NOT
49860: IFFALSE 49864
// exit ;
49862: GO 50006
// weapon := list [ rand ( 1 , list ) ] ;
49864: LD_ADDR_VAR 0 18
49868: PUSH
49869: LD_VAR 0 5
49873: PUSH
49874: LD_INT 1
49876: PPUSH
49877: LD_VAR 0 5
49881: PPUSH
49882: CALL_OW 12
49886: ARRAY
49887: ST_TO_ADDR
// end ; if weapon then
49888: LD_VAR 0 18
49892: IFFALSE 50006
// begin tmp := CostOfWeapon ( weapon ) ;
49894: LD_ADDR_VAR 0 14
49898: PUSH
49899: LD_VAR 0 18
49903: PPUSH
49904: CALL_OW 451
49908: ST_TO_ADDR
// j := GetBase ( tower ) ;
49909: LD_ADDR_VAR 0 9
49913: PUSH
49914: LD_VAR 0 1
49918: PPUSH
49919: CALL_OW 274
49923: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49924: LD_VAR 0 9
49928: PPUSH
49929: LD_INT 1
49931: PPUSH
49932: CALL_OW 275
49936: PUSH
49937: LD_VAR 0 14
49941: PUSH
49942: LD_INT 1
49944: ARRAY
49945: GREATEREQUAL
49946: PUSH
49947: LD_VAR 0 9
49951: PPUSH
49952: LD_INT 2
49954: PPUSH
49955: CALL_OW 275
49959: PUSH
49960: LD_VAR 0 14
49964: PUSH
49965: LD_INT 2
49967: ARRAY
49968: GREATEREQUAL
49969: AND
49970: PUSH
49971: LD_VAR 0 9
49975: PPUSH
49976: LD_INT 3
49978: PPUSH
49979: CALL_OW 275
49983: PUSH
49984: LD_VAR 0 14
49988: PUSH
49989: LD_INT 3
49991: ARRAY
49992: GREATEREQUAL
49993: AND
49994: IFFALSE 50006
// result := weapon ;
49996: LD_ADDR_VAR 0 3
50000: PUSH
50001: LD_VAR 0 18
50005: ST_TO_ADDR
// end ; end ;
50006: LD_VAR 0 3
50010: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50011: LD_INT 0
50013: PPUSH
50014: PPUSH
// result := true ;
50015: LD_ADDR_VAR 0 3
50019: PUSH
50020: LD_INT 1
50022: ST_TO_ADDR
// if array1 = array2 then
50023: LD_VAR 0 1
50027: PUSH
50028: LD_VAR 0 2
50032: EQUAL
50033: IFFALSE 50093
// begin for i = 1 to array1 do
50035: LD_ADDR_VAR 0 4
50039: PUSH
50040: DOUBLE
50041: LD_INT 1
50043: DEC
50044: ST_TO_ADDR
50045: LD_VAR 0 1
50049: PUSH
50050: FOR_TO
50051: IFFALSE 50089
// if array1 [ i ] <> array2 [ i ] then
50053: LD_VAR 0 1
50057: PUSH
50058: LD_VAR 0 4
50062: ARRAY
50063: PUSH
50064: LD_VAR 0 2
50068: PUSH
50069: LD_VAR 0 4
50073: ARRAY
50074: NONEQUAL
50075: IFFALSE 50087
// begin result := false ;
50077: LD_ADDR_VAR 0 3
50081: PUSH
50082: LD_INT 0
50084: ST_TO_ADDR
// break ;
50085: GO 50089
// end ;
50087: GO 50050
50089: POP
50090: POP
// end else
50091: GO 50101
// result := false ;
50093: LD_ADDR_VAR 0 3
50097: PUSH
50098: LD_INT 0
50100: ST_TO_ADDR
// end ;
50101: LD_VAR 0 3
50105: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50106: LD_INT 0
50108: PPUSH
50109: PPUSH
// if not array1 or not array2 then
50110: LD_VAR 0 1
50114: NOT
50115: PUSH
50116: LD_VAR 0 2
50120: NOT
50121: OR
50122: IFFALSE 50126
// exit ;
50124: GO 50190
// result := true ;
50126: LD_ADDR_VAR 0 3
50130: PUSH
50131: LD_INT 1
50133: ST_TO_ADDR
// for i = 1 to array1 do
50134: LD_ADDR_VAR 0 4
50138: PUSH
50139: DOUBLE
50140: LD_INT 1
50142: DEC
50143: ST_TO_ADDR
50144: LD_VAR 0 1
50148: PUSH
50149: FOR_TO
50150: IFFALSE 50188
// if array1 [ i ] <> array2 [ i ] then
50152: LD_VAR 0 1
50156: PUSH
50157: LD_VAR 0 4
50161: ARRAY
50162: PUSH
50163: LD_VAR 0 2
50167: PUSH
50168: LD_VAR 0 4
50172: ARRAY
50173: NONEQUAL
50174: IFFALSE 50186
// begin result := false ;
50176: LD_ADDR_VAR 0 3
50180: PUSH
50181: LD_INT 0
50183: ST_TO_ADDR
// break ;
50184: GO 50188
// end ;
50186: GO 50149
50188: POP
50189: POP
// end ;
50190: LD_VAR 0 3
50194: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50195: LD_INT 0
50197: PPUSH
50198: PPUSH
50199: PPUSH
// pom := GetBase ( fac ) ;
50200: LD_ADDR_VAR 0 5
50204: PUSH
50205: LD_VAR 0 1
50209: PPUSH
50210: CALL_OW 274
50214: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50215: LD_ADDR_VAR 0 4
50219: PUSH
50220: LD_VAR 0 2
50224: PUSH
50225: LD_INT 1
50227: ARRAY
50228: PPUSH
50229: LD_VAR 0 2
50233: PUSH
50234: LD_INT 2
50236: ARRAY
50237: PPUSH
50238: LD_VAR 0 2
50242: PUSH
50243: LD_INT 3
50245: ARRAY
50246: PPUSH
50247: LD_VAR 0 2
50251: PUSH
50252: LD_INT 4
50254: ARRAY
50255: PPUSH
50256: CALL_OW 449
50260: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50261: LD_ADDR_VAR 0 3
50265: PUSH
50266: LD_VAR 0 5
50270: PPUSH
50271: LD_INT 1
50273: PPUSH
50274: CALL_OW 275
50278: PUSH
50279: LD_VAR 0 4
50283: PUSH
50284: LD_INT 1
50286: ARRAY
50287: GREATEREQUAL
50288: PUSH
50289: LD_VAR 0 5
50293: PPUSH
50294: LD_INT 2
50296: PPUSH
50297: CALL_OW 275
50301: PUSH
50302: LD_VAR 0 4
50306: PUSH
50307: LD_INT 2
50309: ARRAY
50310: GREATEREQUAL
50311: AND
50312: PUSH
50313: LD_VAR 0 5
50317: PPUSH
50318: LD_INT 3
50320: PPUSH
50321: CALL_OW 275
50325: PUSH
50326: LD_VAR 0 4
50330: PUSH
50331: LD_INT 3
50333: ARRAY
50334: GREATEREQUAL
50335: AND
50336: ST_TO_ADDR
// end ;
50337: LD_VAR 0 3
50341: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50342: LD_INT 0
50344: PPUSH
50345: PPUSH
50346: PPUSH
50347: PPUSH
// pom := GetBase ( building ) ;
50348: LD_ADDR_VAR 0 3
50352: PUSH
50353: LD_VAR 0 1
50357: PPUSH
50358: CALL_OW 274
50362: ST_TO_ADDR
// if not pom then
50363: LD_VAR 0 3
50367: NOT
50368: IFFALSE 50372
// exit ;
50370: GO 50542
// btype := GetBType ( building ) ;
50372: LD_ADDR_VAR 0 5
50376: PUSH
50377: LD_VAR 0 1
50381: PPUSH
50382: CALL_OW 266
50386: ST_TO_ADDR
// if btype = b_armoury then
50387: LD_VAR 0 5
50391: PUSH
50392: LD_INT 4
50394: EQUAL
50395: IFFALSE 50405
// btype := b_barracks ;
50397: LD_ADDR_VAR 0 5
50401: PUSH
50402: LD_INT 5
50404: ST_TO_ADDR
// if btype = b_depot then
50405: LD_VAR 0 5
50409: PUSH
50410: LD_INT 0
50412: EQUAL
50413: IFFALSE 50423
// btype := b_warehouse ;
50415: LD_ADDR_VAR 0 5
50419: PUSH
50420: LD_INT 1
50422: ST_TO_ADDR
// if btype = b_workshop then
50423: LD_VAR 0 5
50427: PUSH
50428: LD_INT 2
50430: EQUAL
50431: IFFALSE 50441
// btype := b_factory ;
50433: LD_ADDR_VAR 0 5
50437: PUSH
50438: LD_INT 3
50440: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50441: LD_ADDR_VAR 0 4
50445: PUSH
50446: LD_VAR 0 5
50450: PPUSH
50451: LD_VAR 0 1
50455: PPUSH
50456: CALL_OW 248
50460: PPUSH
50461: CALL_OW 450
50465: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50466: LD_ADDR_VAR 0 2
50470: PUSH
50471: LD_VAR 0 3
50475: PPUSH
50476: LD_INT 1
50478: PPUSH
50479: CALL_OW 275
50483: PUSH
50484: LD_VAR 0 4
50488: PUSH
50489: LD_INT 1
50491: ARRAY
50492: GREATEREQUAL
50493: PUSH
50494: LD_VAR 0 3
50498: PPUSH
50499: LD_INT 2
50501: PPUSH
50502: CALL_OW 275
50506: PUSH
50507: LD_VAR 0 4
50511: PUSH
50512: LD_INT 2
50514: ARRAY
50515: GREATEREQUAL
50516: AND
50517: PUSH
50518: LD_VAR 0 3
50522: PPUSH
50523: LD_INT 3
50525: PPUSH
50526: CALL_OW 275
50530: PUSH
50531: LD_VAR 0 4
50535: PUSH
50536: LD_INT 3
50538: ARRAY
50539: GREATEREQUAL
50540: AND
50541: ST_TO_ADDR
// end ;
50542: LD_VAR 0 2
50546: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50547: LD_INT 0
50549: PPUSH
50550: PPUSH
50551: PPUSH
// pom := GetBase ( building ) ;
50552: LD_ADDR_VAR 0 4
50556: PUSH
50557: LD_VAR 0 1
50561: PPUSH
50562: CALL_OW 274
50566: ST_TO_ADDR
// if not pom then
50567: LD_VAR 0 4
50571: NOT
50572: IFFALSE 50576
// exit ;
50574: GO 50677
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50576: LD_ADDR_VAR 0 5
50580: PUSH
50581: LD_VAR 0 2
50585: PPUSH
50586: LD_VAR 0 1
50590: PPUSH
50591: CALL_OW 248
50595: PPUSH
50596: CALL_OW 450
50600: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50601: LD_ADDR_VAR 0 3
50605: PUSH
50606: LD_VAR 0 4
50610: PPUSH
50611: LD_INT 1
50613: PPUSH
50614: CALL_OW 275
50618: PUSH
50619: LD_VAR 0 5
50623: PUSH
50624: LD_INT 1
50626: ARRAY
50627: GREATEREQUAL
50628: PUSH
50629: LD_VAR 0 4
50633: PPUSH
50634: LD_INT 2
50636: PPUSH
50637: CALL_OW 275
50641: PUSH
50642: LD_VAR 0 5
50646: PUSH
50647: LD_INT 2
50649: ARRAY
50650: GREATEREQUAL
50651: AND
50652: PUSH
50653: LD_VAR 0 4
50657: PPUSH
50658: LD_INT 3
50660: PPUSH
50661: CALL_OW 275
50665: PUSH
50666: LD_VAR 0 5
50670: PUSH
50671: LD_INT 3
50673: ARRAY
50674: GREATEREQUAL
50675: AND
50676: ST_TO_ADDR
// end ;
50677: LD_VAR 0 3
50681: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50682: LD_INT 0
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
50688: PPUSH
50689: PPUSH
50690: PPUSH
50691: PPUSH
50692: PPUSH
50693: PPUSH
50694: PPUSH
// result := false ;
50695: LD_ADDR_VAR 0 8
50699: PUSH
50700: LD_INT 0
50702: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50703: LD_VAR 0 5
50707: NOT
50708: PUSH
50709: LD_VAR 0 1
50713: NOT
50714: OR
50715: PUSH
50716: LD_VAR 0 2
50720: NOT
50721: OR
50722: PUSH
50723: LD_VAR 0 3
50727: NOT
50728: OR
50729: IFFALSE 50733
// exit ;
50731: GO 51547
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50733: LD_ADDR_VAR 0 14
50737: PUSH
50738: LD_VAR 0 1
50742: PPUSH
50743: LD_VAR 0 2
50747: PPUSH
50748: LD_VAR 0 3
50752: PPUSH
50753: LD_VAR 0 4
50757: PPUSH
50758: LD_VAR 0 5
50762: PUSH
50763: LD_INT 1
50765: ARRAY
50766: PPUSH
50767: CALL_OW 248
50771: PPUSH
50772: LD_INT 0
50774: PPUSH
50775: CALL 52800 0 6
50779: ST_TO_ADDR
// if not hexes then
50780: LD_VAR 0 14
50784: NOT
50785: IFFALSE 50789
// exit ;
50787: GO 51547
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50789: LD_ADDR_VAR 0 17
50793: PUSH
50794: LD_VAR 0 5
50798: PPUSH
50799: LD_INT 22
50801: PUSH
50802: LD_VAR 0 13
50806: PPUSH
50807: CALL_OW 255
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 30
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 30
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PPUSH
50848: CALL_OW 72
50852: ST_TO_ADDR
// for i = 1 to hexes do
50853: LD_ADDR_VAR 0 9
50857: PUSH
50858: DOUBLE
50859: LD_INT 1
50861: DEC
50862: ST_TO_ADDR
50863: LD_VAR 0 14
50867: PUSH
50868: FOR_TO
50869: IFFALSE 51545
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50871: LD_ADDR_VAR 0 13
50875: PUSH
50876: LD_VAR 0 14
50880: PUSH
50881: LD_VAR 0 9
50885: ARRAY
50886: PUSH
50887: LD_INT 1
50889: ARRAY
50890: PPUSH
50891: LD_VAR 0 14
50895: PUSH
50896: LD_VAR 0 9
50900: ARRAY
50901: PUSH
50902: LD_INT 2
50904: ARRAY
50905: PPUSH
50906: CALL_OW 428
50910: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50911: LD_VAR 0 14
50915: PUSH
50916: LD_VAR 0 9
50920: ARRAY
50921: PUSH
50922: LD_INT 1
50924: ARRAY
50925: PPUSH
50926: LD_VAR 0 14
50930: PUSH
50931: LD_VAR 0 9
50935: ARRAY
50936: PUSH
50937: LD_INT 2
50939: ARRAY
50940: PPUSH
50941: CALL_OW 351
50945: PUSH
50946: LD_VAR 0 14
50950: PUSH
50951: LD_VAR 0 9
50955: ARRAY
50956: PUSH
50957: LD_INT 1
50959: ARRAY
50960: PPUSH
50961: LD_VAR 0 14
50965: PUSH
50966: LD_VAR 0 9
50970: ARRAY
50971: PUSH
50972: LD_INT 2
50974: ARRAY
50975: PPUSH
50976: CALL_OW 488
50980: NOT
50981: OR
50982: PUSH
50983: LD_VAR 0 13
50987: PPUSH
50988: CALL_OW 247
50992: PUSH
50993: LD_INT 3
50995: EQUAL
50996: OR
50997: IFFALSE 51003
// exit ;
50999: POP
51000: POP
51001: GO 51547
// if not tmp then
51003: LD_VAR 0 13
51007: NOT
51008: IFFALSE 51012
// continue ;
51010: GO 50868
// result := true ;
51012: LD_ADDR_VAR 0 8
51016: PUSH
51017: LD_INT 1
51019: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51020: LD_VAR 0 6
51024: PUSH
51025: LD_VAR 0 13
51029: PPUSH
51030: CALL_OW 247
51034: PUSH
51035: LD_INT 2
51037: EQUAL
51038: AND
51039: PUSH
51040: LD_VAR 0 13
51044: PPUSH
51045: CALL_OW 263
51049: PUSH
51050: LD_INT 1
51052: EQUAL
51053: AND
51054: IFFALSE 51218
// begin if IsDrivenBy ( tmp ) then
51056: LD_VAR 0 13
51060: PPUSH
51061: CALL_OW 311
51065: IFFALSE 51069
// continue ;
51067: GO 50868
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51069: LD_VAR 0 6
51073: PPUSH
51074: LD_INT 3
51076: PUSH
51077: LD_INT 60
51079: PUSH
51080: EMPTY
51081: LIST
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: PUSH
51090: LD_INT 55
51092: PUSH
51093: EMPTY
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PPUSH
51104: CALL_OW 72
51108: IFFALSE 51216
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51110: LD_ADDR_VAR 0 18
51114: PUSH
51115: LD_VAR 0 6
51119: PPUSH
51120: LD_INT 3
51122: PUSH
51123: LD_INT 60
51125: PUSH
51126: EMPTY
51127: LIST
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: LD_INT 55
51138: PUSH
51139: EMPTY
51140: LIST
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PPUSH
51150: CALL_OW 72
51154: PUSH
51155: LD_INT 1
51157: ARRAY
51158: ST_TO_ADDR
// if IsInUnit ( driver ) then
51159: LD_VAR 0 18
51163: PPUSH
51164: CALL_OW 310
51168: IFFALSE 51179
// ComExit ( driver ) ;
51170: LD_VAR 0 18
51174: PPUSH
51175: CALL 76579 0 1
// AddComEnterUnit ( driver , tmp ) ;
51179: LD_VAR 0 18
51183: PPUSH
51184: LD_VAR 0 13
51188: PPUSH
51189: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51193: LD_VAR 0 18
51197: PPUSH
51198: LD_VAR 0 7
51202: PPUSH
51203: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51207: LD_VAR 0 18
51211: PPUSH
51212: CALL_OW 181
// end ; continue ;
51216: GO 50868
// end ; if not cleaners or not tmp in cleaners then
51218: LD_VAR 0 6
51222: NOT
51223: PUSH
51224: LD_VAR 0 13
51228: PUSH
51229: LD_VAR 0 6
51233: IN
51234: NOT
51235: OR
51236: IFFALSE 51543
// begin if dep then
51238: LD_VAR 0 17
51242: IFFALSE 51378
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51244: LD_ADDR_VAR 0 16
51248: PUSH
51249: LD_VAR 0 17
51253: PUSH
51254: LD_INT 1
51256: ARRAY
51257: PPUSH
51258: CALL_OW 250
51262: PPUSH
51263: LD_VAR 0 17
51267: PUSH
51268: LD_INT 1
51270: ARRAY
51271: PPUSH
51272: CALL_OW 254
51276: PPUSH
51277: LD_INT 5
51279: PPUSH
51280: CALL_OW 272
51284: PUSH
51285: LD_VAR 0 17
51289: PUSH
51290: LD_INT 1
51292: ARRAY
51293: PPUSH
51294: CALL_OW 251
51298: PPUSH
51299: LD_VAR 0 17
51303: PUSH
51304: LD_INT 1
51306: ARRAY
51307: PPUSH
51308: CALL_OW 254
51312: PPUSH
51313: LD_INT 5
51315: PPUSH
51316: CALL_OW 273
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51325: LD_VAR 0 16
51329: PUSH
51330: LD_INT 1
51332: ARRAY
51333: PPUSH
51334: LD_VAR 0 16
51338: PUSH
51339: LD_INT 2
51341: ARRAY
51342: PPUSH
51343: CALL_OW 488
51347: IFFALSE 51378
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51349: LD_VAR 0 13
51353: PPUSH
51354: LD_VAR 0 16
51358: PUSH
51359: LD_INT 1
51361: ARRAY
51362: PPUSH
51363: LD_VAR 0 16
51367: PUSH
51368: LD_INT 2
51370: ARRAY
51371: PPUSH
51372: CALL_OW 111
// continue ;
51376: GO 50868
// end ; end ; r := GetDir ( tmp ) ;
51378: LD_ADDR_VAR 0 15
51382: PUSH
51383: LD_VAR 0 13
51387: PPUSH
51388: CALL_OW 254
51392: ST_TO_ADDR
// if r = 5 then
51393: LD_VAR 0 15
51397: PUSH
51398: LD_INT 5
51400: EQUAL
51401: IFFALSE 51411
// r := 0 ;
51403: LD_ADDR_VAR 0 15
51407: PUSH
51408: LD_INT 0
51410: ST_TO_ADDR
// for j = r to 5 do
51411: LD_ADDR_VAR 0 10
51415: PUSH
51416: DOUBLE
51417: LD_VAR 0 15
51421: DEC
51422: ST_TO_ADDR
51423: LD_INT 5
51425: PUSH
51426: FOR_TO
51427: IFFALSE 51541
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51429: LD_ADDR_VAR 0 11
51433: PUSH
51434: LD_VAR 0 13
51438: PPUSH
51439: CALL_OW 250
51443: PPUSH
51444: LD_VAR 0 10
51448: PPUSH
51449: LD_INT 2
51451: PPUSH
51452: CALL_OW 272
51456: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51457: LD_ADDR_VAR 0 12
51461: PUSH
51462: LD_VAR 0 13
51466: PPUSH
51467: CALL_OW 251
51471: PPUSH
51472: LD_VAR 0 10
51476: PPUSH
51477: LD_INT 2
51479: PPUSH
51480: CALL_OW 273
51484: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51485: LD_VAR 0 11
51489: PPUSH
51490: LD_VAR 0 12
51494: PPUSH
51495: CALL_OW 488
51499: PUSH
51500: LD_VAR 0 11
51504: PPUSH
51505: LD_VAR 0 12
51509: PPUSH
51510: CALL_OW 428
51514: NOT
51515: AND
51516: IFFALSE 51539
// begin ComMoveXY ( tmp , _x , _y ) ;
51518: LD_VAR 0 13
51522: PPUSH
51523: LD_VAR 0 11
51527: PPUSH
51528: LD_VAR 0 12
51532: PPUSH
51533: CALL_OW 111
// break ;
51537: GO 51541
// end ; end ;
51539: GO 51426
51541: POP
51542: POP
// end ; end ;
51543: GO 50868
51545: POP
51546: POP
// end ;
51547: LD_VAR 0 8
51551: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51552: LD_INT 0
51554: PPUSH
// result := true ;
51555: LD_ADDR_VAR 0 3
51559: PUSH
51560: LD_INT 1
51562: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51563: LD_VAR 0 2
51567: PUSH
51568: LD_INT 24
51570: DOUBLE
51571: EQUAL
51572: IFTRUE 51582
51574: LD_INT 33
51576: DOUBLE
51577: EQUAL
51578: IFTRUE 51582
51580: GO 51607
51582: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51583: LD_ADDR_VAR 0 3
51587: PUSH
51588: LD_INT 32
51590: PPUSH
51591: LD_VAR 0 1
51595: PPUSH
51596: CALL_OW 321
51600: PUSH
51601: LD_INT 2
51603: EQUAL
51604: ST_TO_ADDR
51605: GO 51923
51607: LD_INT 20
51609: DOUBLE
51610: EQUAL
51611: IFTRUE 51615
51613: GO 51640
51615: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51616: LD_ADDR_VAR 0 3
51620: PUSH
51621: LD_INT 6
51623: PPUSH
51624: LD_VAR 0 1
51628: PPUSH
51629: CALL_OW 321
51633: PUSH
51634: LD_INT 2
51636: EQUAL
51637: ST_TO_ADDR
51638: GO 51923
51640: LD_INT 22
51642: DOUBLE
51643: EQUAL
51644: IFTRUE 51654
51646: LD_INT 36
51648: DOUBLE
51649: EQUAL
51650: IFTRUE 51654
51652: GO 51679
51654: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51655: LD_ADDR_VAR 0 3
51659: PUSH
51660: LD_INT 15
51662: PPUSH
51663: LD_VAR 0 1
51667: PPUSH
51668: CALL_OW 321
51672: PUSH
51673: LD_INT 2
51675: EQUAL
51676: ST_TO_ADDR
51677: GO 51923
51679: LD_INT 30
51681: DOUBLE
51682: EQUAL
51683: IFTRUE 51687
51685: GO 51712
51687: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51688: LD_ADDR_VAR 0 3
51692: PUSH
51693: LD_INT 20
51695: PPUSH
51696: LD_VAR 0 1
51700: PPUSH
51701: CALL_OW 321
51705: PUSH
51706: LD_INT 2
51708: EQUAL
51709: ST_TO_ADDR
51710: GO 51923
51712: LD_INT 28
51714: DOUBLE
51715: EQUAL
51716: IFTRUE 51726
51718: LD_INT 21
51720: DOUBLE
51721: EQUAL
51722: IFTRUE 51726
51724: GO 51751
51726: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51727: LD_ADDR_VAR 0 3
51731: PUSH
51732: LD_INT 21
51734: PPUSH
51735: LD_VAR 0 1
51739: PPUSH
51740: CALL_OW 321
51744: PUSH
51745: LD_INT 2
51747: EQUAL
51748: ST_TO_ADDR
51749: GO 51923
51751: LD_INT 16
51753: DOUBLE
51754: EQUAL
51755: IFTRUE 51759
51757: GO 51784
51759: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51760: LD_ADDR_VAR 0 3
51764: PUSH
51765: LD_INT 84
51767: PPUSH
51768: LD_VAR 0 1
51772: PPUSH
51773: CALL_OW 321
51777: PUSH
51778: LD_INT 2
51780: EQUAL
51781: ST_TO_ADDR
51782: GO 51923
51784: LD_INT 19
51786: DOUBLE
51787: EQUAL
51788: IFTRUE 51798
51790: LD_INT 23
51792: DOUBLE
51793: EQUAL
51794: IFTRUE 51798
51796: GO 51823
51798: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51799: LD_ADDR_VAR 0 3
51803: PUSH
51804: LD_INT 83
51806: PPUSH
51807: LD_VAR 0 1
51811: PPUSH
51812: CALL_OW 321
51816: PUSH
51817: LD_INT 2
51819: EQUAL
51820: ST_TO_ADDR
51821: GO 51923
51823: LD_INT 17
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51831
51829: GO 51856
51831: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51832: LD_ADDR_VAR 0 3
51836: PUSH
51837: LD_INT 39
51839: PPUSH
51840: LD_VAR 0 1
51844: PPUSH
51845: CALL_OW 321
51849: PUSH
51850: LD_INT 2
51852: EQUAL
51853: ST_TO_ADDR
51854: GO 51923
51856: LD_INT 18
51858: DOUBLE
51859: EQUAL
51860: IFTRUE 51864
51862: GO 51889
51864: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51865: LD_ADDR_VAR 0 3
51869: PUSH
51870: LD_INT 40
51872: PPUSH
51873: LD_VAR 0 1
51877: PPUSH
51878: CALL_OW 321
51882: PUSH
51883: LD_INT 2
51885: EQUAL
51886: ST_TO_ADDR
51887: GO 51923
51889: LD_INT 27
51891: DOUBLE
51892: EQUAL
51893: IFTRUE 51897
51895: GO 51922
51897: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51898: LD_ADDR_VAR 0 3
51902: PUSH
51903: LD_INT 35
51905: PPUSH
51906: LD_VAR 0 1
51910: PPUSH
51911: CALL_OW 321
51915: PUSH
51916: LD_INT 2
51918: EQUAL
51919: ST_TO_ADDR
51920: GO 51923
51922: POP
// end ;
51923: LD_VAR 0 3
51927: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51928: LD_INT 0
51930: PPUSH
51931: PPUSH
51932: PPUSH
51933: PPUSH
51934: PPUSH
51935: PPUSH
51936: PPUSH
51937: PPUSH
51938: PPUSH
51939: PPUSH
51940: PPUSH
// result := false ;
51941: LD_ADDR_VAR 0 6
51945: PUSH
51946: LD_INT 0
51948: ST_TO_ADDR
// if btype = b_depot then
51949: LD_VAR 0 2
51953: PUSH
51954: LD_INT 0
51956: EQUAL
51957: IFFALSE 51969
// begin result := true ;
51959: LD_ADDR_VAR 0 6
51963: PUSH
51964: LD_INT 1
51966: ST_TO_ADDR
// exit ;
51967: GO 52795
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51969: LD_VAR 0 1
51973: NOT
51974: PUSH
51975: LD_VAR 0 1
51979: PPUSH
51980: CALL_OW 266
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: IN
51995: NOT
51996: OR
51997: PUSH
51998: LD_VAR 0 2
52002: NOT
52003: OR
52004: PUSH
52005: LD_VAR 0 5
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: LD_INT 4
52024: PUSH
52025: LD_INT 5
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: IN
52036: NOT
52037: OR
52038: PUSH
52039: LD_VAR 0 3
52043: PPUSH
52044: LD_VAR 0 4
52048: PPUSH
52049: CALL_OW 488
52053: NOT
52054: OR
52055: IFFALSE 52059
// exit ;
52057: GO 52795
// side := GetSide ( depot ) ;
52059: LD_ADDR_VAR 0 9
52063: PUSH
52064: LD_VAR 0 1
52068: PPUSH
52069: CALL_OW 255
52073: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52074: LD_VAR 0 9
52078: PPUSH
52079: LD_VAR 0 2
52083: PPUSH
52084: CALL 51552 0 2
52088: NOT
52089: IFFALSE 52093
// exit ;
52091: GO 52795
// pom := GetBase ( depot ) ;
52093: LD_ADDR_VAR 0 10
52097: PUSH
52098: LD_VAR 0 1
52102: PPUSH
52103: CALL_OW 274
52107: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52108: LD_ADDR_VAR 0 11
52112: PUSH
52113: LD_VAR 0 2
52117: PPUSH
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL_OW 248
52127: PPUSH
52128: CALL_OW 450
52132: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52133: LD_VAR 0 10
52137: PPUSH
52138: LD_INT 1
52140: PPUSH
52141: CALL_OW 275
52145: PUSH
52146: LD_VAR 0 11
52150: PUSH
52151: LD_INT 1
52153: ARRAY
52154: GREATEREQUAL
52155: PUSH
52156: LD_VAR 0 10
52160: PPUSH
52161: LD_INT 2
52163: PPUSH
52164: CALL_OW 275
52168: PUSH
52169: LD_VAR 0 11
52173: PUSH
52174: LD_INT 2
52176: ARRAY
52177: GREATEREQUAL
52178: AND
52179: PUSH
52180: LD_VAR 0 10
52184: PPUSH
52185: LD_INT 3
52187: PPUSH
52188: CALL_OW 275
52192: PUSH
52193: LD_VAR 0 11
52197: PUSH
52198: LD_INT 3
52200: ARRAY
52201: GREATEREQUAL
52202: AND
52203: NOT
52204: IFFALSE 52208
// exit ;
52206: GO 52795
// if GetBType ( depot ) = b_depot then
52208: LD_VAR 0 1
52212: PPUSH
52213: CALL_OW 266
52217: PUSH
52218: LD_INT 0
52220: EQUAL
52221: IFFALSE 52233
// dist := 28 else
52223: LD_ADDR_VAR 0 14
52227: PUSH
52228: LD_INT 28
52230: ST_TO_ADDR
52231: GO 52241
// dist := 36 ;
52233: LD_ADDR_VAR 0 14
52237: PUSH
52238: LD_INT 36
52240: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52241: LD_VAR 0 1
52245: PPUSH
52246: LD_VAR 0 3
52250: PPUSH
52251: LD_VAR 0 4
52255: PPUSH
52256: CALL_OW 297
52260: PUSH
52261: LD_VAR 0 14
52265: GREATER
52266: IFFALSE 52270
// exit ;
52268: GO 52795
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52270: LD_ADDR_VAR 0 12
52274: PUSH
52275: LD_VAR 0 2
52279: PPUSH
52280: LD_VAR 0 3
52284: PPUSH
52285: LD_VAR 0 4
52289: PPUSH
52290: LD_VAR 0 5
52294: PPUSH
52295: LD_VAR 0 1
52299: PPUSH
52300: CALL_OW 248
52304: PPUSH
52305: LD_INT 0
52307: PPUSH
52308: CALL 52800 0 6
52312: ST_TO_ADDR
// if not hexes then
52313: LD_VAR 0 12
52317: NOT
52318: IFFALSE 52322
// exit ;
52320: GO 52795
// hex := GetHexInfo ( x , y ) ;
52322: LD_ADDR_VAR 0 15
52326: PUSH
52327: LD_VAR 0 3
52331: PPUSH
52332: LD_VAR 0 4
52336: PPUSH
52337: CALL_OW 546
52341: ST_TO_ADDR
// if hex [ 1 ] then
52342: LD_VAR 0 15
52346: PUSH
52347: LD_INT 1
52349: ARRAY
52350: IFFALSE 52354
// exit ;
52352: GO 52795
// height := hex [ 2 ] ;
52354: LD_ADDR_VAR 0 13
52358: PUSH
52359: LD_VAR 0 15
52363: PUSH
52364: LD_INT 2
52366: ARRAY
52367: ST_TO_ADDR
// for i = 1 to hexes do
52368: LD_ADDR_VAR 0 7
52372: PUSH
52373: DOUBLE
52374: LD_INT 1
52376: DEC
52377: ST_TO_ADDR
52378: LD_VAR 0 12
52382: PUSH
52383: FOR_TO
52384: IFFALSE 52714
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52386: LD_VAR 0 12
52390: PUSH
52391: LD_VAR 0 7
52395: ARRAY
52396: PUSH
52397: LD_INT 1
52399: ARRAY
52400: PPUSH
52401: LD_VAR 0 12
52405: PUSH
52406: LD_VAR 0 7
52410: ARRAY
52411: PUSH
52412: LD_INT 2
52414: ARRAY
52415: PPUSH
52416: CALL_OW 488
52420: NOT
52421: PUSH
52422: LD_VAR 0 12
52426: PUSH
52427: LD_VAR 0 7
52431: ARRAY
52432: PUSH
52433: LD_INT 1
52435: ARRAY
52436: PPUSH
52437: LD_VAR 0 12
52441: PUSH
52442: LD_VAR 0 7
52446: ARRAY
52447: PUSH
52448: LD_INT 2
52450: ARRAY
52451: PPUSH
52452: CALL_OW 428
52456: PUSH
52457: LD_INT 0
52459: GREATER
52460: OR
52461: PUSH
52462: LD_VAR 0 12
52466: PUSH
52467: LD_VAR 0 7
52471: ARRAY
52472: PUSH
52473: LD_INT 1
52475: ARRAY
52476: PPUSH
52477: LD_VAR 0 12
52481: PUSH
52482: LD_VAR 0 7
52486: ARRAY
52487: PUSH
52488: LD_INT 2
52490: ARRAY
52491: PPUSH
52492: CALL_OW 351
52496: OR
52497: IFFALSE 52503
// exit ;
52499: POP
52500: POP
52501: GO 52795
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52503: LD_ADDR_VAR 0 8
52507: PUSH
52508: LD_VAR 0 12
52512: PUSH
52513: LD_VAR 0 7
52517: ARRAY
52518: PUSH
52519: LD_INT 1
52521: ARRAY
52522: PPUSH
52523: LD_VAR 0 12
52527: PUSH
52528: LD_VAR 0 7
52532: ARRAY
52533: PUSH
52534: LD_INT 2
52536: ARRAY
52537: PPUSH
52538: CALL_OW 546
52542: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52543: LD_VAR 0 8
52547: PUSH
52548: LD_INT 1
52550: ARRAY
52551: PUSH
52552: LD_VAR 0 8
52556: PUSH
52557: LD_INT 2
52559: ARRAY
52560: PUSH
52561: LD_VAR 0 13
52565: PUSH
52566: LD_INT 2
52568: PLUS
52569: GREATER
52570: OR
52571: PUSH
52572: LD_VAR 0 8
52576: PUSH
52577: LD_INT 2
52579: ARRAY
52580: PUSH
52581: LD_VAR 0 13
52585: PUSH
52586: LD_INT 2
52588: MINUS
52589: LESS
52590: OR
52591: PUSH
52592: LD_VAR 0 8
52596: PUSH
52597: LD_INT 3
52599: ARRAY
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 8
52606: PUSH
52607: LD_INT 9
52609: PUSH
52610: LD_INT 10
52612: PUSH
52613: LD_INT 11
52615: PUSH
52616: LD_INT 12
52618: PUSH
52619: LD_INT 13
52621: PUSH
52622: LD_INT 16
52624: PUSH
52625: LD_INT 17
52627: PUSH
52628: LD_INT 18
52630: PUSH
52631: LD_INT 19
52633: PUSH
52634: LD_INT 20
52636: PUSH
52637: LD_INT 21
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: IN
52655: NOT
52656: OR
52657: PUSH
52658: LD_VAR 0 8
52662: PUSH
52663: LD_INT 5
52665: ARRAY
52666: NOT
52667: OR
52668: PUSH
52669: LD_VAR 0 8
52673: PUSH
52674: LD_INT 6
52676: ARRAY
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 7
52686: PUSH
52687: LD_INT 9
52689: PUSH
52690: LD_INT 10
52692: PUSH
52693: LD_INT 11
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: IN
52704: NOT
52705: OR
52706: IFFALSE 52712
// exit ;
52708: POP
52709: POP
52710: GO 52795
// end ;
52712: GO 52383
52714: POP
52715: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52716: LD_VAR 0 9
52720: PPUSH
52721: LD_VAR 0 3
52725: PPUSH
52726: LD_VAR 0 4
52730: PPUSH
52731: LD_INT 20
52733: PPUSH
52734: CALL 44718 0 4
52738: PUSH
52739: LD_INT 4
52741: ARRAY
52742: IFFALSE 52746
// exit ;
52744: GO 52795
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52746: LD_VAR 0 2
52750: PUSH
52751: LD_INT 29
52753: PUSH
52754: LD_INT 30
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: IN
52761: PUSH
52762: LD_VAR 0 3
52766: PPUSH
52767: LD_VAR 0 4
52771: PPUSH
52772: LD_VAR 0 9
52776: PPUSH
52777: CALL_OW 440
52781: NOT
52782: AND
52783: IFFALSE 52787
// exit ;
52785: GO 52795
// result := true ;
52787: LD_ADDR_VAR 0 6
52791: PUSH
52792: LD_INT 1
52794: ST_TO_ADDR
// end ;
52795: LD_VAR 0 6
52799: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52800: LD_INT 0
52802: PPUSH
52803: PPUSH
52804: PPUSH
52805: PPUSH
52806: PPUSH
52807: PPUSH
52808: PPUSH
52809: PPUSH
52810: PPUSH
52811: PPUSH
52812: PPUSH
52813: PPUSH
52814: PPUSH
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
52828: PPUSH
52829: PPUSH
52830: PPUSH
52831: PPUSH
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
52837: PPUSH
52838: PPUSH
52839: PPUSH
52840: PPUSH
52841: PPUSH
52842: PPUSH
52843: PPUSH
52844: PPUSH
52845: PPUSH
52846: PPUSH
52847: PPUSH
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
52853: PPUSH
52854: PPUSH
52855: PPUSH
52856: PPUSH
52857: PPUSH
52858: PPUSH
52859: PPUSH
// result = [ ] ;
52860: LD_ADDR_VAR 0 7
52864: PUSH
52865: EMPTY
52866: ST_TO_ADDR
// temp_list = [ ] ;
52867: LD_ADDR_VAR 0 9
52871: PUSH
52872: EMPTY
52873: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52874: LD_VAR 0 4
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: LD_INT 3
52890: PUSH
52891: LD_INT 4
52893: PUSH
52894: LD_INT 5
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: IN
52905: NOT
52906: PUSH
52907: LD_VAR 0 1
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: IN
52922: PUSH
52923: LD_VAR 0 5
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: IN
52942: NOT
52943: AND
52944: OR
52945: IFFALSE 52949
// exit ;
52947: GO 71340
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52949: LD_VAR 0 1
52953: PUSH
52954: LD_INT 6
52956: PUSH
52957: LD_INT 7
52959: PUSH
52960: LD_INT 8
52962: PUSH
52963: LD_INT 13
52965: PUSH
52966: LD_INT 12
52968: PUSH
52969: LD_INT 15
52971: PUSH
52972: LD_INT 11
52974: PUSH
52975: LD_INT 14
52977: PUSH
52978: LD_INT 10
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: IN
52992: IFFALSE 53002
// btype = b_lab ;
52994: LD_ADDR_VAR 0 1
52998: PUSH
52999: LD_INT 6
53001: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53002: LD_VAR 0 6
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: IN
53021: NOT
53022: PUSH
53023: LD_VAR 0 1
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: LD_INT 6
53042: PUSH
53043: LD_INT 36
53045: PUSH
53046: LD_INT 4
53048: PUSH
53049: LD_INT 5
53051: PUSH
53052: LD_INT 31
53054: PUSH
53055: LD_INT 32
53057: PUSH
53058: LD_INT 33
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: IN
53074: NOT
53075: PUSH
53076: LD_VAR 0 6
53080: PUSH
53081: LD_INT 1
53083: EQUAL
53084: AND
53085: OR
53086: PUSH
53087: LD_VAR 0 1
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: IN
53102: NOT
53103: PUSH
53104: LD_VAR 0 6
53108: PUSH
53109: LD_INT 2
53111: EQUAL
53112: AND
53113: OR
53114: IFFALSE 53124
// mode = 0 ;
53116: LD_ADDR_VAR 0 6
53120: PUSH
53121: LD_INT 0
53123: ST_TO_ADDR
// case mode of 0 :
53124: LD_VAR 0 6
53128: PUSH
53129: LD_INT 0
53131: DOUBLE
53132: EQUAL
53133: IFTRUE 53137
53135: GO 64590
53137: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53138: LD_ADDR_VAR 0 11
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 3
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53331: LD_ADDR_VAR 0 12
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 3
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53527: LD_ADDR_VAR 0 13
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: LD_INT 3
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53726: LD_ADDR_VAR 0 14
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: LD_INT 3
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53922: LD_ADDR_VAR 0 15
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 3
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54115: LD_ADDR_VAR 0 16
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: LD_INT 3
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 3
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54308: LD_ADDR_VAR 0 17
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54538: LD_ADDR_VAR 0 18
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54768: LD_ADDR_VAR 0 19
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54998: LD_ADDR_VAR 0 20
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55228: LD_ADDR_VAR 0 21
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: LD_INT 2
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: NEG
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55458: LD_ADDR_VAR 0 22
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55688: LD_ADDR_VAR 0 23
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 2
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: LD_INT 2
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55968: LD_ADDR_VAR 0 24
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 3
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56244: LD_ADDR_VAR 0 25
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: LD_INT 2
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 3
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56518: LD_ADDR_VAR 0 26
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: LD_INT 3
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: LD_INT 3
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56794: LD_ADDR_VAR 0 27
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57074: LD_ADDR_VAR 0 28
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 3
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: NEG
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57356: LD_ADDR_VAR 0 29
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: NEG
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 2
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 2
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: LD_INT 3
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 3
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: NEG
57601: PUSH
57602: LD_INT 2
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57635: LD_ADDR_VAR 0 30
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 3
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 3
57878: NEG
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57913: LD_ADDR_VAR 0 31
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58191: LD_ADDR_VAR 0 32
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 3
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 3
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: LD_INT 3
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58469: LD_ADDR_VAR 0 33
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: LD_INT 3
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58748: LD_ADDR_VAR 0 34
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 2
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 3
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59028: LD_ADDR_VAR 0 35
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59140: LD_ADDR_VAR 0 36
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59252: LD_ADDR_VAR 0 37
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59364: LD_ADDR_VAR 0 38
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59476: LD_ADDR_VAR 0 39
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 2
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59588: LD_ADDR_VAR 0 40
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59700: LD_ADDR_VAR 0 41
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: LD_INT 2
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 3
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 3
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 3
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: PUSH
59944: LD_INT 3
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: LD_INT 3
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: LD_INT 3
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60050: LD_ADDR_VAR 0 42
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: NEG
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: LD_INT 3
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 3
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60400: LD_ADDR_VAR 0 43
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 2
60577: NEG
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: LD_INT 3
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 3
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 3
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 3
60696: NEG
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 3
60707: NEG
60708: PUSH
60709: LD_INT 1
60711: NEG
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60748: LD_ADDR_VAR 0 44
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 2
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 2
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: NEG
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 3
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 3
61022: NEG
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: NEG
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 3
61057: NEG
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61098: LD_ADDR_VAR 0 45
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: NEG
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: LD_INT 3
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: LD_INT 3
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 2
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: NEG
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61448: LD_ADDR_VAR 0 46
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 2
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 2
61625: NEG
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: NEG
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 3
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 3
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61796: LD_ADDR_VAR 0 47
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61947: LD_ADDR_VAR 0 48
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: LD_INT 2
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 2
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62094: LD_ADDR_VAR 0 49
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: LD_INT 2
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62238: LD_ADDR_VAR 0 50
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: LD_INT 2
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: LD_INT 2
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62382: LD_ADDR_VAR 0 51
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62529: LD_ADDR_VAR 0 52
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62680: LD_ADDR_VAR 0 53
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 2
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 2
62856: NEG
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62910: LD_ADDR_VAR 0 54
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: LD_INT 2
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: LD_INT 2
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 2
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: NEG
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63140: LD_ADDR_VAR 0 55
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 1
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 2
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 2
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 2
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 2
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 2
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 2
63316: NEG
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 2
63327: NEG
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63370: LD_ADDR_VAR 0 56
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 1
63451: NEG
63452: PUSH
63453: LD_INT 2
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 2
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 2
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: LD_INT 2
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: LD_INT 2
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 2
63546: NEG
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: NEG
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 2
63569: NEG
63570: PUSH
63571: LD_INT 2
63573: NEG
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63600: LD_ADDR_VAR 0 57
63604: PUSH
63605: LD_INT 0
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: PUSH
63639: LD_INT 1
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: LD_INT 2
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 2
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 2
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: LD_INT 2
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 2
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 2
63787: NEG
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: NEG
63800: PUSH
63801: LD_INT 2
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63830: LD_ADDR_VAR 0 58
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 1
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: LD_INT 2
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 2
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 2
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 2
63965: PUSH
63966: LD_INT 2
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: LD_INT 2
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 2
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 2
64029: NEG
64030: PUSH
64031: LD_INT 2
64033: NEG
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64060: LD_ADDR_VAR 0 59
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: NEG
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64148: LD_ADDR_VAR 0 60
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64236: LD_ADDR_VAR 0 61
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: LD_INT 1
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 1
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64324: LD_ADDR_VAR 0 62
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64412: LD_ADDR_VAR 0 63
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64500: LD_ADDR_VAR 0 64
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 1
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: NEG
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: ST_TO_ADDR
// end ; 1 :
64588: GO 70485
64590: LD_INT 1
64592: DOUBLE
64593: EQUAL
64594: IFTRUE 64598
64596: GO 67221
64598: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64599: LD_ADDR_VAR 0 11
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: LD_INT 3
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: LD_INT 2
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: LIST
64642: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64643: LD_ADDR_VAR 0 12
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 3
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64684: LD_ADDR_VAR 0 13
64688: PUSH
64689: LD_INT 3
64691: PUSH
64692: LD_INT 2
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: PUSH
64702: LD_INT 3
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: LD_INT 3
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: LIST
64723: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64724: LD_ADDR_VAR 0 14
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 3
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: LD_INT 3
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 2
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: LIST
64764: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64765: LD_ADDR_VAR 0 15
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 3
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: LIST
64808: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64809: LD_ADDR_VAR 0 16
64813: PUSH
64814: LD_INT 2
64816: NEG
64817: PUSH
64818: LD_INT 3
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 3
64840: NEG
64841: PUSH
64842: LD_INT 3
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64855: LD_ADDR_VAR 0 17
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: LD_INT 3
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: LD_INT 3
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 2
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64899: LD_ADDR_VAR 0 18
64903: PUSH
64904: LD_INT 2
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 3
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 3
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64940: LD_ADDR_VAR 0 19
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: LD_INT 3
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: PUSH
64968: LD_INT 3
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64980: LD_ADDR_VAR 0 20
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: LD_INT 3
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_INT 3
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: LD_INT 2
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65021: LD_ADDR_VAR 0 21
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 3
65039: NEG
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 3
65050: NEG
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: LIST
65064: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65065: LD_ADDR_VAR 0 22
65069: PUSH
65070: LD_INT 2
65072: NEG
65073: PUSH
65074: LD_INT 3
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 3
65084: NEG
65085: PUSH
65086: LD_INT 2
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 3
65096: NEG
65097: PUSH
65098: LD_INT 3
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65111: LD_ADDR_VAR 0 23
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 3
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: LD_INT 4
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65155: LD_ADDR_VAR 0 24
65159: PUSH
65160: LD_INT 3
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: LD_INT 1
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 4
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65196: LD_ADDR_VAR 0 25
65200: PUSH
65201: LD_INT 3
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 4
65213: PUSH
65214: LD_INT 3
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 3
65223: PUSH
65224: LD_INT 4
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: LIST
65235: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65236: LD_ADDR_VAR 0 26
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: LD_INT 3
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: LD_INT 4
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: LIST
65276: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65277: LD_ADDR_VAR 0 27
65281: PUSH
65282: LD_INT 3
65284: NEG
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 3
65295: NEG
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 4
65306: NEG
65307: PUSH
65308: LD_INT 1
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: LIST
65320: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65321: LD_ADDR_VAR 0 28
65325: PUSH
65326: LD_INT 3
65328: NEG
65329: PUSH
65330: LD_INT 3
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 3
65340: NEG
65341: PUSH
65342: LD_INT 4
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 4
65352: NEG
65353: PUSH
65354: LD_INT 3
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65367: LD_ADDR_VAR 0 29
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: LD_INT 3
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: LD_INT 3
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: LD_INT 2
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: LD_INT 4
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: LD_INT 4
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: LD_INT 3
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: LD_INT 5
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 5
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: LD_INT 4
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: NEG
65477: PUSH
65478: LD_INT 6
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: LD_INT 6
65491: NEG
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: LD_INT 5
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65522: LD_ADDR_VAR 0 30
65526: PUSH
65527: LD_INT 2
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 3
65540: PUSH
65541: LD_INT 0
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 3
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: LD_INT 1
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 4
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 4
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 4
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 5
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 5
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 5
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 6
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 6
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65665: LD_ADDR_VAR 0 31
65669: PUSH
65670: LD_INT 3
65672: PUSH
65673: LD_INT 2
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 3
65682: PUSH
65683: LD_INT 3
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: LD_INT 3
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 4
65702: PUSH
65703: LD_INT 3
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 4
65712: PUSH
65713: LD_INT 4
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 3
65722: PUSH
65723: LD_INT 4
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 5
65732: PUSH
65733: LD_INT 4
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 5
65742: PUSH
65743: LD_INT 5
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 4
65752: PUSH
65753: LD_INT 5
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 6
65762: PUSH
65763: LD_INT 5
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 6
65772: PUSH
65773: LD_INT 6
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 5
65782: PUSH
65783: LD_INT 6
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65804: LD_ADDR_VAR 0 32
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: LD_INT 3
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 4
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: LD_INT 3
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: PUSH
65874: LD_INT 5
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 5
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: PUSH
65895: LD_INT 4
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: PUSH
65905: LD_INT 6
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 6
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 1
65924: NEG
65925: PUSH
65926: LD_INT 5
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65947: LD_ADDR_VAR 0 33
65951: PUSH
65952: LD_INT 2
65954: NEG
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 3
65965: NEG
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 3
65988: NEG
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 4
65999: NEG
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 4
66010: NEG
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 4
66022: NEG
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 5
66033: NEG
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 5
66044: NEG
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 5
66056: NEG
66057: PUSH
66058: LD_INT 1
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 6
66067: NEG
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 6
66078: NEG
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66102: LD_ADDR_VAR 0 34
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: LD_INT 3
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 3
66121: NEG
66122: PUSH
66123: LD_INT 2
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 3
66133: NEG
66134: PUSH
66135: LD_INT 3
66137: NEG
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 3
66145: NEG
66146: PUSH
66147: LD_INT 4
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 4
66157: NEG
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 4
66169: NEG
66170: PUSH
66171: LD_INT 4
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 4
66181: NEG
66182: PUSH
66183: LD_INT 5
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 5
66193: NEG
66194: PUSH
66195: LD_INT 4
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 5
66205: NEG
66206: PUSH
66207: LD_INT 5
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 5
66217: NEG
66218: PUSH
66219: LD_INT 6
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 6
66229: NEG
66230: PUSH
66231: LD_INT 5
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 6
66241: NEG
66242: PUSH
66243: LD_INT 6
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66265: LD_ADDR_VAR 0 41
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_INT 2
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: LD_INT 3
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: LD_INT 2
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: LIST
66308: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66309: LD_ADDR_VAR 0 42
66313: PUSH
66314: LD_INT 2
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 1
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 3
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: LIST
66349: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66350: LD_ADDR_VAR 0 43
66354: PUSH
66355: LD_INT 2
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 3
66367: PUSH
66368: LD_INT 2
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 2
66377: PUSH
66378: LD_INT 3
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66390: LD_ADDR_VAR 0 44
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 2
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: LD_INT 2
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: LIST
66430: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66431: LD_ADDR_VAR 0 45
66435: PUSH
66436: LD_INT 2
66438: NEG
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 3
66460: NEG
66461: PUSH
66462: LD_INT 1
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: LIST
66474: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66475: LD_ADDR_VAR 0 46
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: LD_INT 2
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 2
66494: NEG
66495: PUSH
66496: LD_INT 3
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 3
66506: NEG
66507: PUSH
66508: LD_INT 2
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66521: LD_ADDR_VAR 0 47
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 1
66540: NEG
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66554: LD_ADDR_VAR 0 48
66558: PUSH
66559: LD_INT 1
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66585: LD_ADDR_VAR 0 49
66589: PUSH
66590: LD_INT 3
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 3
66602: PUSH
66603: LD_INT 2
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66614: LD_ADDR_VAR 0 50
66618: PUSH
66619: LD_INT 2
66621: PUSH
66622: LD_INT 3
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: LD_INT 3
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66643: LD_ADDR_VAR 0 51
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: LD_INT 2
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 2
66661: NEG
66662: PUSH
66663: LD_INT 1
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66674: LD_ADDR_VAR 0 52
66678: PUSH
66679: LD_INT 3
66681: NEG
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 3
66693: NEG
66694: PUSH
66695: LD_INT 2
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66707: LD_ADDR_VAR 0 53
66711: PUSH
66712: LD_INT 1
66714: NEG
66715: PUSH
66716: LD_INT 3
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 3
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: LD_INT 2
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: LIST
66750: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66751: LD_ADDR_VAR 0 54
66755: PUSH
66756: LD_INT 2
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: LD_INT 0
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 3
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66792: LD_ADDR_VAR 0 55
66796: PUSH
66797: LD_INT 3
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: LD_INT 3
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 2
66819: PUSH
66820: LD_INT 3
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: LIST
66831: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66832: LD_ADDR_VAR 0 56
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: LD_INT 3
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: LD_INT 3
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 1
66859: NEG
66860: PUSH
66861: LD_INT 2
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: LIST
66872: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66873: LD_ADDR_VAR 0 57
66877: PUSH
66878: LD_INT 2
66880: NEG
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 3
66891: NEG
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 3
66902: NEG
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: LIST
66916: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66917: LD_ADDR_VAR 0 58
66921: PUSH
66922: LD_INT 2
66924: NEG
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 3
66936: NEG
66937: PUSH
66938: LD_INT 2
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 3
66948: NEG
66949: PUSH
66950: LD_INT 3
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: LIST
66962: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66963: LD_ADDR_VAR 0 59
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: LD_INT 2
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: LD_INT 2
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: LD_INT 1
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: LIST
67006: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67007: LD_ADDR_VAR 0 60
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 2
67025: PUSH
67026: LD_INT 0
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 2
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67048: LD_ADDR_VAR 0 61
67052: PUSH
67053: LD_INT 2
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 2
67065: PUSH
67066: LD_INT 2
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: LD_INT 2
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: LIST
67087: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67088: LD_ADDR_VAR 0 62
67092: PUSH
67093: LD_INT 1
67095: PUSH
67096: LD_INT 2
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: LD_INT 2
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 1
67115: NEG
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67129: LD_ADDR_VAR 0 63
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 2
67158: NEG
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67173: LD_ADDR_VAR 0 64
67177: PUSH
67178: LD_INT 1
67180: NEG
67181: PUSH
67182: LD_INT 2
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: NEG
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: LD_INT 2
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// end ; 2 :
67219: GO 70485
67221: LD_INT 2
67223: DOUBLE
67224: EQUAL
67225: IFTRUE 67229
67227: GO 70484
67229: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67230: LD_ADDR_VAR 0 29
67234: PUSH
67235: LD_INT 4
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 4
67247: PUSH
67248: LD_INT 1
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 5
67258: PUSH
67259: LD_INT 0
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 5
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 4
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 3
67298: PUSH
67299: LD_INT 1
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: LD_INT 2
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 5
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 3
67330: PUSH
67331: LD_INT 3
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 3
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 4
67350: PUSH
67351: LD_INT 3
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 4
67360: PUSH
67361: LD_INT 4
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 3
67370: PUSH
67371: LD_INT 4
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 2
67380: PUSH
67381: LD_INT 3
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 2
67390: PUSH
67391: LD_INT 2
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 4
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 2
67410: PUSH
67411: LD_INT 4
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 0
67420: PUSH
67421: LD_INT 4
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: LD_INT 4
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 5
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 1
67470: NEG
67471: PUSH
67472: LD_INT 4
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: LD_INT 3
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 2
67492: PUSH
67493: LD_INT 5
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: LD_INT 3
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 3
67513: NEG
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 3
67524: NEG
67525: PUSH
67526: LD_INT 1
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 2
67536: NEG
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 2
67547: NEG
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 3
67558: NEG
67559: PUSH
67560: LD_INT 1
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 4
67569: NEG
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 4
67580: NEG
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 4
67592: NEG
67593: PUSH
67594: LD_INT 2
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: LD_INT 2
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 4
67615: NEG
67616: PUSH
67617: LD_INT 4
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 4
67627: NEG
67628: PUSH
67629: LD_INT 5
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: NEG
67640: PUSH
67641: LD_INT 4
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 3
67651: NEG
67652: PUSH
67653: LD_INT 3
67655: NEG
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 4
67663: NEG
67664: PUSH
67665: LD_INT 3
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 5
67675: NEG
67676: PUSH
67677: LD_INT 4
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 5
67687: NEG
67688: PUSH
67689: LD_INT 5
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 3
67699: NEG
67700: PUSH
67701: LD_INT 5
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 5
67711: NEG
67712: PUSH
67713: LD_INT 3
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67768: LD_ADDR_VAR 0 30
67772: PUSH
67773: LD_INT 4
67775: PUSH
67776: LD_INT 4
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 4
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 5
67795: PUSH
67796: LD_INT 4
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 5
67805: PUSH
67806: LD_INT 5
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 4
67815: PUSH
67816: LD_INT 5
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 3
67825: PUSH
67826: LD_INT 4
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 3
67835: PUSH
67836: LD_INT 3
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 5
67845: PUSH
67846: LD_INT 3
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 3
67855: PUSH
67856: LD_INT 5
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: LD_INT 2
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 1
67895: PUSH
67896: LD_INT 4
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: LD_INT 4
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: LD_INT 3
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 1
67926: NEG
67927: PUSH
67928: LD_INT 2
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 2
67937: PUSH
67938: LD_INT 4
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: NEG
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 4
67958: NEG
67959: PUSH
67960: LD_INT 0
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 4
67969: NEG
67970: PUSH
67971: LD_INT 1
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 3
67981: NEG
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: NEG
67993: PUSH
67994: LD_INT 1
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 4
68003: NEG
68004: PUSH
68005: LD_INT 1
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 5
68014: NEG
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 5
68025: NEG
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 5
68037: NEG
68038: PUSH
68039: LD_INT 2
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 3
68049: NEG
68050: PUSH
68051: LD_INT 2
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 3
68060: NEG
68061: PUSH
68062: LD_INT 3
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 3
68072: NEG
68073: PUSH
68074: LD_INT 4
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 2
68084: NEG
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 2
68096: NEG
68097: PUSH
68098: LD_INT 2
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 3
68108: NEG
68109: PUSH
68110: LD_INT 2
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 4
68120: NEG
68121: PUSH
68122: LD_INT 3
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 4
68132: NEG
68133: PUSH
68134: LD_INT 4
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 2
68144: NEG
68145: PUSH
68146: LD_INT 4
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 4
68156: NEG
68157: PUSH
68158: LD_INT 2
68160: NEG
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 4
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: LD_INT 5
68182: NEG
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 1
68190: PUSH
68191: LD_INT 4
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 1
68201: PUSH
68202: LD_INT 3
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: LD_INT 3
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: LD_INT 4
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: NEG
68236: PUSH
68237: LD_INT 5
68239: NEG
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 2
68247: PUSH
68248: LD_INT 3
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 2
68258: NEG
68259: PUSH
68260: LD_INT 5
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68315: LD_ADDR_VAR 0 31
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: LD_INT 4
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: LD_INT 3
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: LD_INT 4
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 1
68352: PUSH
68353: LD_INT 5
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: LD_INT 5
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 1
68372: NEG
68373: PUSH
68374: LD_INT 4
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 1
68383: NEG
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 2
68394: PUSH
68395: LD_INT 5
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 2
68404: NEG
68405: PUSH
68406: LD_INT 3
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 3
68415: NEG
68416: PUSH
68417: LD_INT 0
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 3
68426: NEG
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 2
68449: NEG
68450: PUSH
68451: LD_INT 1
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 3
68460: NEG
68461: PUSH
68462: LD_INT 1
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 4
68471: NEG
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 4
68482: NEG
68483: PUSH
68484: LD_INT 1
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 4
68494: NEG
68495: PUSH
68496: LD_INT 2
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 2
68506: NEG
68507: PUSH
68508: LD_INT 2
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 4
68517: NEG
68518: PUSH
68519: LD_INT 4
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 4
68529: NEG
68530: PUSH
68531: LD_INT 5
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 3
68541: NEG
68542: PUSH
68543: LD_INT 4
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 3
68553: NEG
68554: PUSH
68555: LD_INT 3
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 4
68565: NEG
68566: PUSH
68567: LD_INT 3
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 5
68577: NEG
68578: PUSH
68579: LD_INT 4
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 5
68589: NEG
68590: PUSH
68591: LD_INT 5
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 3
68601: NEG
68602: PUSH
68603: LD_INT 5
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 5
68613: NEG
68614: PUSH
68615: LD_INT 3
68617: NEG
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 0
68625: PUSH
68626: LD_INT 3
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: LD_INT 4
68639: NEG
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 1
68647: PUSH
68648: LD_INT 3
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: LD_INT 2
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: LD_INT 3
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 1
68692: NEG
68693: PUSH
68694: LD_INT 4
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 2
68704: PUSH
68705: LD_INT 2
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 2
68715: NEG
68716: PUSH
68717: LD_INT 4
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 4
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 4
68737: PUSH
68738: LD_INT 1
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 5
68748: PUSH
68749: LD_INT 0
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 5
68758: PUSH
68759: LD_INT 1
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 4
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 3
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: PUSH
68789: LD_INT 1
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 3
68799: PUSH
68800: LD_INT 2
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 5
68810: PUSH
68811: LD_INT 2
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68865: LD_ADDR_VAR 0 32
68869: PUSH
68870: LD_INT 4
68872: NEG
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 4
68883: NEG
68884: PUSH
68885: LD_INT 1
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 3
68895: NEG
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 3
68906: NEG
68907: PUSH
68908: LD_INT 1
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 4
68917: NEG
68918: PUSH
68919: LD_INT 1
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 5
68928: NEG
68929: PUSH
68930: LD_INT 0
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 5
68939: NEG
68940: PUSH
68941: LD_INT 1
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 5
68951: NEG
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 3
68963: NEG
68964: PUSH
68965: LD_INT 2
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 3
68974: NEG
68975: PUSH
68976: LD_INT 3
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 3
68986: NEG
68987: PUSH
68988: LD_INT 4
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 2
68998: NEG
68999: PUSH
69000: LD_INT 3
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 2
69010: NEG
69011: PUSH
69012: LD_INT 2
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 3
69022: NEG
69023: PUSH
69024: LD_INT 2
69026: NEG
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 4
69034: NEG
69035: PUSH
69036: LD_INT 3
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 4
69046: NEG
69047: PUSH
69048: LD_INT 4
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 2
69058: NEG
69059: PUSH
69060: LD_INT 4
69062: NEG
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 4
69070: NEG
69071: PUSH
69072: LD_INT 2
69074: NEG
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: LD_INT 4
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: LD_INT 5
69096: NEG
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 1
69104: PUSH
69105: LD_INT 4
69107: NEG
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 1
69115: PUSH
69116: LD_INT 3
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 1
69137: NEG
69138: PUSH
69139: LD_INT 4
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 1
69149: NEG
69150: PUSH
69151: LD_INT 5
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 2
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 2
69172: NEG
69173: PUSH
69174: LD_INT 5
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 3
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 3
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 4
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 4
69215: PUSH
69216: LD_INT 1
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 3
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 2
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 2
69245: PUSH
69246: LD_INT 1
69248: NEG
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 2
69256: PUSH
69257: LD_INT 2
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 4
69267: PUSH
69268: LD_INT 2
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 4
69277: PUSH
69278: LD_INT 4
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 4
69287: PUSH
69288: LD_INT 3
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 5
69297: PUSH
69298: LD_INT 4
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 5
69307: PUSH
69308: LD_INT 5
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 4
69317: PUSH
69318: LD_INT 5
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: LD_INT 4
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 3
69337: PUSH
69338: LD_INT 3
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 5
69347: PUSH
69348: LD_INT 3
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 3
69357: PUSH
69358: LD_INT 5
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69412: LD_ADDR_VAR 0 33
69416: PUSH
69417: LD_INT 4
69419: NEG
69420: PUSH
69421: LD_INT 4
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 4
69431: NEG
69432: PUSH
69433: LD_INT 5
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 3
69443: NEG
69444: PUSH
69445: LD_INT 4
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 3
69455: NEG
69456: PUSH
69457: LD_INT 3
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 4
69467: NEG
69468: PUSH
69469: LD_INT 3
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 5
69479: NEG
69480: PUSH
69481: LD_INT 4
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 5
69491: NEG
69492: PUSH
69493: LD_INT 5
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 3
69503: NEG
69504: PUSH
69505: LD_INT 5
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 5
69515: NEG
69516: PUSH
69517: LD_INT 3
69519: NEG
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 3
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: LD_INT 4
69541: NEG
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 1
69549: PUSH
69550: LD_INT 3
69552: NEG
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 1
69560: PUSH
69561: LD_INT 2
69563: NEG
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 1
69582: NEG
69583: PUSH
69584: LD_INT 3
69586: NEG
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 1
69594: NEG
69595: PUSH
69596: LD_INT 4
69598: NEG
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 2
69606: PUSH
69607: LD_INT 2
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 2
69617: NEG
69618: PUSH
69619: LD_INT 4
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 4
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 4
69639: PUSH
69640: LD_INT 1
69642: NEG
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 5
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 5
69660: PUSH
69661: LD_INT 1
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 4
69670: PUSH
69671: LD_INT 1
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 3
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 3
69690: PUSH
69691: LD_INT 1
69693: NEG
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: LD_INT 2
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 5
69712: PUSH
69713: LD_INT 2
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 3
69722: PUSH
69723: LD_INT 3
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 3
69732: PUSH
69733: LD_INT 2
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 4
69742: PUSH
69743: LD_INT 3
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 4
69752: PUSH
69753: LD_INT 4
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 3
69762: PUSH
69763: LD_INT 4
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 2
69772: PUSH
69773: LD_INT 3
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 2
69782: PUSH
69783: LD_INT 2
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 4
69792: PUSH
69793: LD_INT 2
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 2
69802: PUSH
69803: LD_INT 4
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: LD_INT 4
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 0
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: PUSH
69833: LD_INT 4
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 1
69842: PUSH
69843: LD_INT 5
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 0
69852: PUSH
69853: LD_INT 5
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: NEG
69863: PUSH
69864: LD_INT 4
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 1
69873: NEG
69874: PUSH
69875: LD_INT 3
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 2
69884: PUSH
69885: LD_INT 5
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 2
69894: NEG
69895: PUSH
69896: LD_INT 3
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69950: LD_ADDR_VAR 0 34
69954: PUSH
69955: LD_INT 0
69957: PUSH
69958: LD_INT 4
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 0
69968: PUSH
69969: LD_INT 5
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 1
69979: PUSH
69980: LD_INT 4
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: LD_INT 3
69993: NEG
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: LD_INT 3
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 1
70012: NEG
70013: PUSH
70014: LD_INT 4
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: NEG
70025: PUSH
70026: LD_INT 5
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 2
70036: PUSH
70037: LD_INT 3
70039: NEG
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 2
70047: NEG
70048: PUSH
70049: LD_INT 5
70051: NEG
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 3
70069: PUSH
70070: LD_INT 1
70072: NEG
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 4
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 4
70090: PUSH
70091: LD_INT 1
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 3
70100: PUSH
70101: LD_INT 1
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 2
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 2
70120: PUSH
70121: LD_INT 1
70123: NEG
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 2
70131: PUSH
70132: LD_INT 2
70134: NEG
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 4
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 4
70152: PUSH
70153: LD_INT 4
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 4
70162: PUSH
70163: LD_INT 3
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 5
70172: PUSH
70173: LD_INT 4
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 5
70182: PUSH
70183: LD_INT 5
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 4
70192: PUSH
70193: LD_INT 5
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: PUSH
70203: LD_INT 4
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 3
70212: PUSH
70213: LD_INT 3
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 5
70222: PUSH
70223: LD_INT 3
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 3
70232: PUSH
70233: LD_INT 5
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: LD_INT 3
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 0
70252: PUSH
70253: LD_INT 2
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 1
70262: PUSH
70263: LD_INT 3
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 1
70272: PUSH
70273: LD_INT 4
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 0
70282: PUSH
70283: LD_INT 4
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 1
70292: NEG
70293: PUSH
70294: LD_INT 3
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 1
70303: NEG
70304: PUSH
70305: LD_INT 2
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 2
70314: PUSH
70315: LD_INT 4
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 2
70324: NEG
70325: PUSH
70326: LD_INT 2
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 4
70335: NEG
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 4
70346: NEG
70347: PUSH
70348: LD_INT 1
70350: NEG
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 3
70358: NEG
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 3
70369: NEG
70370: PUSH
70371: LD_INT 1
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 4
70380: NEG
70381: PUSH
70382: LD_INT 1
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 5
70391: NEG
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 5
70402: NEG
70403: PUSH
70404: LD_INT 1
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 5
70414: NEG
70415: PUSH
70416: LD_INT 2
70418: NEG
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 3
70426: NEG
70427: PUSH
70428: LD_INT 2
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: ST_TO_ADDR
// end ; end ;
70482: GO 70485
70484: POP
// case btype of b_depot , b_warehouse :
70485: LD_VAR 0 1
70489: PUSH
70490: LD_INT 0
70492: DOUBLE
70493: EQUAL
70494: IFTRUE 70504
70496: LD_INT 1
70498: DOUBLE
70499: EQUAL
70500: IFTRUE 70504
70502: GO 70705
70504: POP
// case nation of nation_american :
70505: LD_VAR 0 5
70509: PUSH
70510: LD_INT 1
70512: DOUBLE
70513: EQUAL
70514: IFTRUE 70518
70516: GO 70574
70518: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70519: LD_ADDR_VAR 0 9
70523: PUSH
70524: LD_VAR 0 11
70528: PUSH
70529: LD_VAR 0 12
70533: PUSH
70534: LD_VAR 0 13
70538: PUSH
70539: LD_VAR 0 14
70543: PUSH
70544: LD_VAR 0 15
70548: PUSH
70549: LD_VAR 0 16
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: PUSH
70562: LD_VAR 0 4
70566: PUSH
70567: LD_INT 1
70569: PLUS
70570: ARRAY
70571: ST_TO_ADDR
70572: GO 70703
70574: LD_INT 2
70576: DOUBLE
70577: EQUAL
70578: IFTRUE 70582
70580: GO 70638
70582: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70583: LD_ADDR_VAR 0 9
70587: PUSH
70588: LD_VAR 0 17
70592: PUSH
70593: LD_VAR 0 18
70597: PUSH
70598: LD_VAR 0 19
70602: PUSH
70603: LD_VAR 0 20
70607: PUSH
70608: LD_VAR 0 21
70612: PUSH
70613: LD_VAR 0 22
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: PUSH
70626: LD_VAR 0 4
70630: PUSH
70631: LD_INT 1
70633: PLUS
70634: ARRAY
70635: ST_TO_ADDR
70636: GO 70703
70638: LD_INT 3
70640: DOUBLE
70641: EQUAL
70642: IFTRUE 70646
70644: GO 70702
70646: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70647: LD_ADDR_VAR 0 9
70651: PUSH
70652: LD_VAR 0 23
70656: PUSH
70657: LD_VAR 0 24
70661: PUSH
70662: LD_VAR 0 25
70666: PUSH
70667: LD_VAR 0 26
70671: PUSH
70672: LD_VAR 0 27
70676: PUSH
70677: LD_VAR 0 28
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: PUSH
70690: LD_VAR 0 4
70694: PUSH
70695: LD_INT 1
70697: PLUS
70698: ARRAY
70699: ST_TO_ADDR
70700: GO 70703
70702: POP
70703: GO 71258
70705: LD_INT 2
70707: DOUBLE
70708: EQUAL
70709: IFTRUE 70719
70711: LD_INT 3
70713: DOUBLE
70714: EQUAL
70715: IFTRUE 70719
70717: GO 70775
70719: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70720: LD_ADDR_VAR 0 9
70724: PUSH
70725: LD_VAR 0 29
70729: PUSH
70730: LD_VAR 0 30
70734: PUSH
70735: LD_VAR 0 31
70739: PUSH
70740: LD_VAR 0 32
70744: PUSH
70745: LD_VAR 0 33
70749: PUSH
70750: LD_VAR 0 34
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: PUSH
70763: LD_VAR 0 4
70767: PUSH
70768: LD_INT 1
70770: PLUS
70771: ARRAY
70772: ST_TO_ADDR
70773: GO 71258
70775: LD_INT 16
70777: DOUBLE
70778: EQUAL
70779: IFTRUE 70837
70781: LD_INT 17
70783: DOUBLE
70784: EQUAL
70785: IFTRUE 70837
70787: LD_INT 18
70789: DOUBLE
70790: EQUAL
70791: IFTRUE 70837
70793: LD_INT 19
70795: DOUBLE
70796: EQUAL
70797: IFTRUE 70837
70799: LD_INT 22
70801: DOUBLE
70802: EQUAL
70803: IFTRUE 70837
70805: LD_INT 20
70807: DOUBLE
70808: EQUAL
70809: IFTRUE 70837
70811: LD_INT 21
70813: DOUBLE
70814: EQUAL
70815: IFTRUE 70837
70817: LD_INT 23
70819: DOUBLE
70820: EQUAL
70821: IFTRUE 70837
70823: LD_INT 24
70825: DOUBLE
70826: EQUAL
70827: IFTRUE 70837
70829: LD_INT 25
70831: DOUBLE
70832: EQUAL
70833: IFTRUE 70837
70835: GO 70893
70837: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70838: LD_ADDR_VAR 0 9
70842: PUSH
70843: LD_VAR 0 35
70847: PUSH
70848: LD_VAR 0 36
70852: PUSH
70853: LD_VAR 0 37
70857: PUSH
70858: LD_VAR 0 38
70862: PUSH
70863: LD_VAR 0 39
70867: PUSH
70868: LD_VAR 0 40
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: PUSH
70881: LD_VAR 0 4
70885: PUSH
70886: LD_INT 1
70888: PLUS
70889: ARRAY
70890: ST_TO_ADDR
70891: GO 71258
70893: LD_INT 6
70895: DOUBLE
70896: EQUAL
70897: IFTRUE 70949
70899: LD_INT 7
70901: DOUBLE
70902: EQUAL
70903: IFTRUE 70949
70905: LD_INT 8
70907: DOUBLE
70908: EQUAL
70909: IFTRUE 70949
70911: LD_INT 13
70913: DOUBLE
70914: EQUAL
70915: IFTRUE 70949
70917: LD_INT 12
70919: DOUBLE
70920: EQUAL
70921: IFTRUE 70949
70923: LD_INT 15
70925: DOUBLE
70926: EQUAL
70927: IFTRUE 70949
70929: LD_INT 11
70931: DOUBLE
70932: EQUAL
70933: IFTRUE 70949
70935: LD_INT 14
70937: DOUBLE
70938: EQUAL
70939: IFTRUE 70949
70941: LD_INT 10
70943: DOUBLE
70944: EQUAL
70945: IFTRUE 70949
70947: GO 71005
70949: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70950: LD_ADDR_VAR 0 9
70954: PUSH
70955: LD_VAR 0 41
70959: PUSH
70960: LD_VAR 0 42
70964: PUSH
70965: LD_VAR 0 43
70969: PUSH
70970: LD_VAR 0 44
70974: PUSH
70975: LD_VAR 0 45
70979: PUSH
70980: LD_VAR 0 46
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: PUSH
70993: LD_VAR 0 4
70997: PUSH
70998: LD_INT 1
71000: PLUS
71001: ARRAY
71002: ST_TO_ADDR
71003: GO 71258
71005: LD_INT 36
71007: DOUBLE
71008: EQUAL
71009: IFTRUE 71013
71011: GO 71069
71013: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71014: LD_ADDR_VAR 0 9
71018: PUSH
71019: LD_VAR 0 47
71023: PUSH
71024: LD_VAR 0 48
71028: PUSH
71029: LD_VAR 0 49
71033: PUSH
71034: LD_VAR 0 50
71038: PUSH
71039: LD_VAR 0 51
71043: PUSH
71044: LD_VAR 0 52
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: PUSH
71057: LD_VAR 0 4
71061: PUSH
71062: LD_INT 1
71064: PLUS
71065: ARRAY
71066: ST_TO_ADDR
71067: GO 71258
71069: LD_INT 4
71071: DOUBLE
71072: EQUAL
71073: IFTRUE 71095
71075: LD_INT 5
71077: DOUBLE
71078: EQUAL
71079: IFTRUE 71095
71081: LD_INT 34
71083: DOUBLE
71084: EQUAL
71085: IFTRUE 71095
71087: LD_INT 37
71089: DOUBLE
71090: EQUAL
71091: IFTRUE 71095
71093: GO 71151
71095: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71096: LD_ADDR_VAR 0 9
71100: PUSH
71101: LD_VAR 0 53
71105: PUSH
71106: LD_VAR 0 54
71110: PUSH
71111: LD_VAR 0 55
71115: PUSH
71116: LD_VAR 0 56
71120: PUSH
71121: LD_VAR 0 57
71125: PUSH
71126: LD_VAR 0 58
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: PUSH
71139: LD_VAR 0 4
71143: PUSH
71144: LD_INT 1
71146: PLUS
71147: ARRAY
71148: ST_TO_ADDR
71149: GO 71258
71151: LD_INT 31
71153: DOUBLE
71154: EQUAL
71155: IFTRUE 71201
71157: LD_INT 32
71159: DOUBLE
71160: EQUAL
71161: IFTRUE 71201
71163: LD_INT 33
71165: DOUBLE
71166: EQUAL
71167: IFTRUE 71201
71169: LD_INT 27
71171: DOUBLE
71172: EQUAL
71173: IFTRUE 71201
71175: LD_INT 26
71177: DOUBLE
71178: EQUAL
71179: IFTRUE 71201
71181: LD_INT 28
71183: DOUBLE
71184: EQUAL
71185: IFTRUE 71201
71187: LD_INT 29
71189: DOUBLE
71190: EQUAL
71191: IFTRUE 71201
71193: LD_INT 30
71195: DOUBLE
71196: EQUAL
71197: IFTRUE 71201
71199: GO 71257
71201: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71202: LD_ADDR_VAR 0 9
71206: PUSH
71207: LD_VAR 0 59
71211: PUSH
71212: LD_VAR 0 60
71216: PUSH
71217: LD_VAR 0 61
71221: PUSH
71222: LD_VAR 0 62
71226: PUSH
71227: LD_VAR 0 63
71231: PUSH
71232: LD_VAR 0 64
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: PUSH
71245: LD_VAR 0 4
71249: PUSH
71250: LD_INT 1
71252: PLUS
71253: ARRAY
71254: ST_TO_ADDR
71255: GO 71258
71257: POP
// temp_list2 = [ ] ;
71258: LD_ADDR_VAR 0 10
71262: PUSH
71263: EMPTY
71264: ST_TO_ADDR
// for i in temp_list do
71265: LD_ADDR_VAR 0 8
71269: PUSH
71270: LD_VAR 0 9
71274: PUSH
71275: FOR_IN
71276: IFFALSE 71328
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71278: LD_ADDR_VAR 0 10
71282: PUSH
71283: LD_VAR 0 10
71287: PUSH
71288: LD_VAR 0 8
71292: PUSH
71293: LD_INT 1
71295: ARRAY
71296: PUSH
71297: LD_VAR 0 2
71301: PLUS
71302: PUSH
71303: LD_VAR 0 8
71307: PUSH
71308: LD_INT 2
71310: ARRAY
71311: PUSH
71312: LD_VAR 0 3
71316: PLUS
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: EMPTY
71323: LIST
71324: ADD
71325: ST_TO_ADDR
71326: GO 71275
71328: POP
71329: POP
// result = temp_list2 ;
71330: LD_ADDR_VAR 0 7
71334: PUSH
71335: LD_VAR 0 10
71339: ST_TO_ADDR
// end ;
71340: LD_VAR 0 7
71344: RET
// export function EnemyInRange ( unit , dist ) ; begin
71345: LD_INT 0
71347: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71348: LD_ADDR_VAR 0 3
71352: PUSH
71353: LD_VAR 0 1
71357: PPUSH
71358: CALL_OW 255
71362: PPUSH
71363: LD_VAR 0 1
71367: PPUSH
71368: CALL_OW 250
71372: PPUSH
71373: LD_VAR 0 1
71377: PPUSH
71378: CALL_OW 251
71382: PPUSH
71383: LD_VAR 0 2
71387: PPUSH
71388: CALL 44718 0 4
71392: PUSH
71393: LD_INT 4
71395: ARRAY
71396: ST_TO_ADDR
// end ;
71397: LD_VAR 0 3
71401: RET
// export function PlayerSeeMe ( unit ) ; begin
71402: LD_INT 0
71404: PPUSH
// result := See ( your_side , unit ) ;
71405: LD_ADDR_VAR 0 2
71409: PUSH
71410: LD_OWVAR 2
71414: PPUSH
71415: LD_VAR 0 1
71419: PPUSH
71420: CALL_OW 292
71424: ST_TO_ADDR
// end ;
71425: LD_VAR 0 2
71429: RET
// export function ReverseDir ( unit ) ; begin
71430: LD_INT 0
71432: PPUSH
// if not unit then
71433: LD_VAR 0 1
71437: NOT
71438: IFFALSE 71442
// exit ;
71440: GO 71465
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71442: LD_ADDR_VAR 0 2
71446: PUSH
71447: LD_VAR 0 1
71451: PPUSH
71452: CALL_OW 254
71456: PUSH
71457: LD_INT 3
71459: PLUS
71460: PUSH
71461: LD_INT 6
71463: MOD
71464: ST_TO_ADDR
// end ;
71465: LD_VAR 0 2
71469: RET
// export function ReverseArray ( array ) ; var i ; begin
71470: LD_INT 0
71472: PPUSH
71473: PPUSH
// if not array then
71474: LD_VAR 0 1
71478: NOT
71479: IFFALSE 71483
// exit ;
71481: GO 71538
// result := [ ] ;
71483: LD_ADDR_VAR 0 2
71487: PUSH
71488: EMPTY
71489: ST_TO_ADDR
// for i := array downto 1 do
71490: LD_ADDR_VAR 0 3
71494: PUSH
71495: DOUBLE
71496: LD_VAR 0 1
71500: INC
71501: ST_TO_ADDR
71502: LD_INT 1
71504: PUSH
71505: FOR_DOWNTO
71506: IFFALSE 71536
// result := Join ( result , array [ i ] ) ;
71508: LD_ADDR_VAR 0 2
71512: PUSH
71513: LD_VAR 0 2
71517: PPUSH
71518: LD_VAR 0 1
71522: PUSH
71523: LD_VAR 0 3
71527: ARRAY
71528: PPUSH
71529: CALL 76181 0 2
71533: ST_TO_ADDR
71534: GO 71505
71536: POP
71537: POP
// end ;
71538: LD_VAR 0 2
71542: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71543: LD_INT 0
71545: PPUSH
71546: PPUSH
71547: PPUSH
71548: PPUSH
71549: PPUSH
71550: PPUSH
// if not unit or not hexes then
71551: LD_VAR 0 1
71555: NOT
71556: PUSH
71557: LD_VAR 0 2
71561: NOT
71562: OR
71563: IFFALSE 71567
// exit ;
71565: GO 71690
// dist := 9999 ;
71567: LD_ADDR_VAR 0 5
71571: PUSH
71572: LD_INT 9999
71574: ST_TO_ADDR
// for i = 1 to hexes do
71575: LD_ADDR_VAR 0 4
71579: PUSH
71580: DOUBLE
71581: LD_INT 1
71583: DEC
71584: ST_TO_ADDR
71585: LD_VAR 0 2
71589: PUSH
71590: FOR_TO
71591: IFFALSE 71678
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71593: LD_ADDR_VAR 0 6
71597: PUSH
71598: LD_VAR 0 1
71602: PPUSH
71603: LD_VAR 0 2
71607: PUSH
71608: LD_VAR 0 4
71612: ARRAY
71613: PUSH
71614: LD_INT 1
71616: ARRAY
71617: PPUSH
71618: LD_VAR 0 2
71622: PUSH
71623: LD_VAR 0 4
71627: ARRAY
71628: PUSH
71629: LD_INT 2
71631: ARRAY
71632: PPUSH
71633: CALL_OW 297
71637: ST_TO_ADDR
// if tdist < dist then
71638: LD_VAR 0 6
71642: PUSH
71643: LD_VAR 0 5
71647: LESS
71648: IFFALSE 71676
// begin hex := hexes [ i ] ;
71650: LD_ADDR_VAR 0 8
71654: PUSH
71655: LD_VAR 0 2
71659: PUSH
71660: LD_VAR 0 4
71664: ARRAY
71665: ST_TO_ADDR
// dist := tdist ;
71666: LD_ADDR_VAR 0 5
71670: PUSH
71671: LD_VAR 0 6
71675: ST_TO_ADDR
// end ; end ;
71676: GO 71590
71678: POP
71679: POP
// result := hex ;
71680: LD_ADDR_VAR 0 3
71684: PUSH
71685: LD_VAR 0 8
71689: ST_TO_ADDR
// end ;
71690: LD_VAR 0 3
71694: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71695: LD_INT 0
71697: PPUSH
71698: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71699: LD_VAR 0 1
71703: NOT
71704: PUSH
71705: LD_VAR 0 1
71709: PUSH
71710: LD_INT 21
71712: PUSH
71713: LD_INT 2
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 23
71722: PUSH
71723: LD_INT 2
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PPUSH
71734: CALL_OW 69
71738: IN
71739: NOT
71740: OR
71741: IFFALSE 71745
// exit ;
71743: GO 71792
// for i = 1 to 3 do
71745: LD_ADDR_VAR 0 3
71749: PUSH
71750: DOUBLE
71751: LD_INT 1
71753: DEC
71754: ST_TO_ADDR
71755: LD_INT 3
71757: PUSH
71758: FOR_TO
71759: IFFALSE 71790
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71761: LD_VAR 0 1
71765: PPUSH
71766: CALL_OW 250
71770: PPUSH
71771: LD_VAR 0 1
71775: PPUSH
71776: CALL_OW 251
71780: PPUSH
71781: LD_INT 1
71783: PPUSH
71784: CALL_OW 453
71788: GO 71758
71790: POP
71791: POP
// end ;
71792: LD_VAR 0 2
71796: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71797: LD_INT 0
71799: PPUSH
71800: PPUSH
71801: PPUSH
71802: PPUSH
71803: PPUSH
71804: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71805: LD_VAR 0 1
71809: NOT
71810: PUSH
71811: LD_VAR 0 2
71815: NOT
71816: OR
71817: PUSH
71818: LD_VAR 0 1
71822: PPUSH
71823: CALL_OW 314
71827: OR
71828: IFFALSE 71832
// exit ;
71830: GO 72299
// if GetLives ( i ) < 250 then
71832: LD_VAR 0 4
71836: PPUSH
71837: CALL_OW 256
71841: PUSH
71842: LD_INT 250
71844: LESS
71845: IFFALSE 71858
// begin ComAutodestruct ( i ) ;
71847: LD_VAR 0 4
71851: PPUSH
71852: CALL 71695 0 1
// exit ;
71856: GO 72299
// end ; x := GetX ( enemy_unit ) ;
71858: LD_ADDR_VAR 0 7
71862: PUSH
71863: LD_VAR 0 2
71867: PPUSH
71868: CALL_OW 250
71872: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71873: LD_ADDR_VAR 0 8
71877: PUSH
71878: LD_VAR 0 2
71882: PPUSH
71883: CALL_OW 251
71887: ST_TO_ADDR
// if not x or not y then
71888: LD_VAR 0 7
71892: NOT
71893: PUSH
71894: LD_VAR 0 8
71898: NOT
71899: OR
71900: IFFALSE 71904
// exit ;
71902: GO 72299
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71904: LD_ADDR_VAR 0 6
71908: PUSH
71909: LD_VAR 0 7
71913: PPUSH
71914: LD_INT 0
71916: PPUSH
71917: LD_INT 4
71919: PPUSH
71920: CALL_OW 272
71924: PUSH
71925: LD_VAR 0 8
71929: PPUSH
71930: LD_INT 0
71932: PPUSH
71933: LD_INT 4
71935: PPUSH
71936: CALL_OW 273
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_VAR 0 7
71949: PPUSH
71950: LD_INT 1
71952: PPUSH
71953: LD_INT 4
71955: PPUSH
71956: CALL_OW 272
71960: PUSH
71961: LD_VAR 0 8
71965: PPUSH
71966: LD_INT 1
71968: PPUSH
71969: LD_INT 4
71971: PPUSH
71972: CALL_OW 273
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_VAR 0 7
71985: PPUSH
71986: LD_INT 2
71988: PPUSH
71989: LD_INT 4
71991: PPUSH
71992: CALL_OW 272
71996: PUSH
71997: LD_VAR 0 8
72001: PPUSH
72002: LD_INT 2
72004: PPUSH
72005: LD_INT 4
72007: PPUSH
72008: CALL_OW 273
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_VAR 0 7
72021: PPUSH
72022: LD_INT 3
72024: PPUSH
72025: LD_INT 4
72027: PPUSH
72028: CALL_OW 272
72032: PUSH
72033: LD_VAR 0 8
72037: PPUSH
72038: LD_INT 3
72040: PPUSH
72041: LD_INT 4
72043: PPUSH
72044: CALL_OW 273
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_VAR 0 7
72057: PPUSH
72058: LD_INT 4
72060: PPUSH
72061: LD_INT 4
72063: PPUSH
72064: CALL_OW 272
72068: PUSH
72069: LD_VAR 0 8
72073: PPUSH
72074: LD_INT 4
72076: PPUSH
72077: LD_INT 4
72079: PPUSH
72080: CALL_OW 273
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_VAR 0 7
72093: PPUSH
72094: LD_INT 5
72096: PPUSH
72097: LD_INT 4
72099: PPUSH
72100: CALL_OW 272
72104: PUSH
72105: LD_VAR 0 8
72109: PPUSH
72110: LD_INT 5
72112: PPUSH
72113: LD_INT 4
72115: PPUSH
72116: CALL_OW 273
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: ST_TO_ADDR
// for i = tmp downto 1 do
72133: LD_ADDR_VAR 0 4
72137: PUSH
72138: DOUBLE
72139: LD_VAR 0 6
72143: INC
72144: ST_TO_ADDR
72145: LD_INT 1
72147: PUSH
72148: FOR_DOWNTO
72149: IFFALSE 72250
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72151: LD_VAR 0 6
72155: PUSH
72156: LD_VAR 0 4
72160: ARRAY
72161: PUSH
72162: LD_INT 1
72164: ARRAY
72165: PPUSH
72166: LD_VAR 0 6
72170: PUSH
72171: LD_VAR 0 4
72175: ARRAY
72176: PUSH
72177: LD_INT 2
72179: ARRAY
72180: PPUSH
72181: CALL_OW 488
72185: NOT
72186: PUSH
72187: LD_VAR 0 6
72191: PUSH
72192: LD_VAR 0 4
72196: ARRAY
72197: PUSH
72198: LD_INT 1
72200: ARRAY
72201: PPUSH
72202: LD_VAR 0 6
72206: PUSH
72207: LD_VAR 0 4
72211: ARRAY
72212: PUSH
72213: LD_INT 2
72215: ARRAY
72216: PPUSH
72217: CALL_OW 428
72221: PUSH
72222: LD_INT 0
72224: NONEQUAL
72225: OR
72226: IFFALSE 72248
// tmp := Delete ( tmp , i ) ;
72228: LD_ADDR_VAR 0 6
72232: PUSH
72233: LD_VAR 0 6
72237: PPUSH
72238: LD_VAR 0 4
72242: PPUSH
72243: CALL_OW 3
72247: ST_TO_ADDR
72248: GO 72148
72250: POP
72251: POP
// j := GetClosestHex ( unit , tmp ) ;
72252: LD_ADDR_VAR 0 5
72256: PUSH
72257: LD_VAR 0 1
72261: PPUSH
72262: LD_VAR 0 6
72266: PPUSH
72267: CALL 71543 0 2
72271: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72272: LD_VAR 0 1
72276: PPUSH
72277: LD_VAR 0 5
72281: PUSH
72282: LD_INT 1
72284: ARRAY
72285: PPUSH
72286: LD_VAR 0 5
72290: PUSH
72291: LD_INT 2
72293: ARRAY
72294: PPUSH
72295: CALL_OW 111
// end ;
72299: LD_VAR 0 3
72303: RET
// export function PrepareApemanSoldier ( ) ; begin
72304: LD_INT 0
72306: PPUSH
// uc_nation := 0 ;
72307: LD_ADDR_OWVAR 21
72311: PUSH
72312: LD_INT 0
72314: ST_TO_ADDR
// hc_sex := sex_male ;
72315: LD_ADDR_OWVAR 27
72319: PUSH
72320: LD_INT 1
72322: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72323: LD_ADDR_OWVAR 28
72327: PUSH
72328: LD_INT 15
72330: ST_TO_ADDR
// hc_gallery :=  ;
72331: LD_ADDR_OWVAR 33
72335: PUSH
72336: LD_STRING 
72338: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72339: LD_ADDR_OWVAR 31
72343: PUSH
72344: LD_INT 0
72346: PPUSH
72347: LD_INT 3
72349: PPUSH
72350: CALL_OW 12
72354: PUSH
72355: LD_INT 0
72357: PPUSH
72358: LD_INT 3
72360: PPUSH
72361: CALL_OW 12
72365: PUSH
72366: LD_INT 0
72368: PUSH
72369: LD_INT 0
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: ST_TO_ADDR
// end ;
72378: LD_VAR 0 1
72382: RET
// export function PrepareApemanEngineer ( ) ; begin
72383: LD_INT 0
72385: PPUSH
// uc_nation := 0 ;
72386: LD_ADDR_OWVAR 21
72390: PUSH
72391: LD_INT 0
72393: ST_TO_ADDR
// hc_sex := sex_male ;
72394: LD_ADDR_OWVAR 27
72398: PUSH
72399: LD_INT 1
72401: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72402: LD_ADDR_OWVAR 28
72406: PUSH
72407: LD_INT 16
72409: ST_TO_ADDR
// hc_gallery :=  ;
72410: LD_ADDR_OWVAR 33
72414: PUSH
72415: LD_STRING 
72417: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72418: LD_ADDR_OWVAR 31
72422: PUSH
72423: LD_INT 0
72425: PPUSH
72426: LD_INT 3
72428: PPUSH
72429: CALL_OW 12
72433: PUSH
72434: LD_INT 0
72436: PPUSH
72437: LD_INT 3
72439: PPUSH
72440: CALL_OW 12
72444: PUSH
72445: LD_INT 0
72447: PUSH
72448: LD_INT 0
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: ST_TO_ADDR
// end ;
72457: LD_VAR 0 1
72461: RET
// export function PrepareApeman ( agressivity ) ; begin
72462: LD_INT 0
72464: PPUSH
// uc_side := 0 ;
72465: LD_ADDR_OWVAR 20
72469: PUSH
72470: LD_INT 0
72472: ST_TO_ADDR
// uc_nation := 0 ;
72473: LD_ADDR_OWVAR 21
72477: PUSH
72478: LD_INT 0
72480: ST_TO_ADDR
// hc_sex := sex_male ;
72481: LD_ADDR_OWVAR 27
72485: PUSH
72486: LD_INT 1
72488: ST_TO_ADDR
// hc_class := class_apeman ;
72489: LD_ADDR_OWVAR 28
72493: PUSH
72494: LD_INT 12
72496: ST_TO_ADDR
// hc_gallery :=  ;
72497: LD_ADDR_OWVAR 33
72501: PUSH
72502: LD_STRING 
72504: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72505: LD_ADDR_OWVAR 35
72509: PUSH
72510: LD_VAR 0 1
72514: NEG
72515: PPUSH
72516: LD_VAR 0 1
72520: PPUSH
72521: CALL_OW 12
72525: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72526: LD_ADDR_OWVAR 31
72530: PUSH
72531: LD_INT 0
72533: PPUSH
72534: LD_INT 3
72536: PPUSH
72537: CALL_OW 12
72541: PUSH
72542: LD_INT 0
72544: PPUSH
72545: LD_INT 3
72547: PPUSH
72548: CALL_OW 12
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: LD_INT 0
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: ST_TO_ADDR
// end ;
72565: LD_VAR 0 2
72569: RET
// export function PrepareTiger ( agressivity ) ; begin
72570: LD_INT 0
72572: PPUSH
// uc_side := 0 ;
72573: LD_ADDR_OWVAR 20
72577: PUSH
72578: LD_INT 0
72580: ST_TO_ADDR
// uc_nation := 0 ;
72581: LD_ADDR_OWVAR 21
72585: PUSH
72586: LD_INT 0
72588: ST_TO_ADDR
// hc_class := class_tiger ;
72589: LD_ADDR_OWVAR 28
72593: PUSH
72594: LD_INT 14
72596: ST_TO_ADDR
// hc_gallery :=  ;
72597: LD_ADDR_OWVAR 33
72601: PUSH
72602: LD_STRING 
72604: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72605: LD_ADDR_OWVAR 35
72609: PUSH
72610: LD_VAR 0 1
72614: NEG
72615: PPUSH
72616: LD_VAR 0 1
72620: PPUSH
72621: CALL_OW 12
72625: ST_TO_ADDR
// end ;
72626: LD_VAR 0 2
72630: RET
// export function PrepareEnchidna ( ) ; begin
72631: LD_INT 0
72633: PPUSH
// uc_side := 0 ;
72634: LD_ADDR_OWVAR 20
72638: PUSH
72639: LD_INT 0
72641: ST_TO_ADDR
// uc_nation := 0 ;
72642: LD_ADDR_OWVAR 21
72646: PUSH
72647: LD_INT 0
72649: ST_TO_ADDR
// hc_class := class_baggie ;
72650: LD_ADDR_OWVAR 28
72654: PUSH
72655: LD_INT 13
72657: ST_TO_ADDR
// hc_gallery :=  ;
72658: LD_ADDR_OWVAR 33
72662: PUSH
72663: LD_STRING 
72665: ST_TO_ADDR
// end ;
72666: LD_VAR 0 1
72670: RET
// export function PrepareFrog ( ) ; begin
72671: LD_INT 0
72673: PPUSH
// uc_side := 0 ;
72674: LD_ADDR_OWVAR 20
72678: PUSH
72679: LD_INT 0
72681: ST_TO_ADDR
// uc_nation := 0 ;
72682: LD_ADDR_OWVAR 21
72686: PUSH
72687: LD_INT 0
72689: ST_TO_ADDR
// hc_class := class_frog ;
72690: LD_ADDR_OWVAR 28
72694: PUSH
72695: LD_INT 19
72697: ST_TO_ADDR
// hc_gallery :=  ;
72698: LD_ADDR_OWVAR 33
72702: PUSH
72703: LD_STRING 
72705: ST_TO_ADDR
// end ;
72706: LD_VAR 0 1
72710: RET
// export function PrepareFish ( ) ; begin
72711: LD_INT 0
72713: PPUSH
// uc_side := 0 ;
72714: LD_ADDR_OWVAR 20
72718: PUSH
72719: LD_INT 0
72721: ST_TO_ADDR
// uc_nation := 0 ;
72722: LD_ADDR_OWVAR 21
72726: PUSH
72727: LD_INT 0
72729: ST_TO_ADDR
// hc_class := class_fish ;
72730: LD_ADDR_OWVAR 28
72734: PUSH
72735: LD_INT 20
72737: ST_TO_ADDR
// hc_gallery :=  ;
72738: LD_ADDR_OWVAR 33
72742: PUSH
72743: LD_STRING 
72745: ST_TO_ADDR
// end ;
72746: LD_VAR 0 1
72750: RET
// export function PrepareBird ( ) ; begin
72751: LD_INT 0
72753: PPUSH
// uc_side := 0 ;
72754: LD_ADDR_OWVAR 20
72758: PUSH
72759: LD_INT 0
72761: ST_TO_ADDR
// uc_nation := 0 ;
72762: LD_ADDR_OWVAR 21
72766: PUSH
72767: LD_INT 0
72769: ST_TO_ADDR
// hc_class := class_phororhacos ;
72770: LD_ADDR_OWVAR 28
72774: PUSH
72775: LD_INT 18
72777: ST_TO_ADDR
// hc_gallery :=  ;
72778: LD_ADDR_OWVAR 33
72782: PUSH
72783: LD_STRING 
72785: ST_TO_ADDR
// end ;
72786: LD_VAR 0 1
72790: RET
// export function PrepareHorse ( ) ; begin
72791: LD_INT 0
72793: PPUSH
// uc_side := 0 ;
72794: LD_ADDR_OWVAR 20
72798: PUSH
72799: LD_INT 0
72801: ST_TO_ADDR
// uc_nation := 0 ;
72802: LD_ADDR_OWVAR 21
72806: PUSH
72807: LD_INT 0
72809: ST_TO_ADDR
// hc_class := class_horse ;
72810: LD_ADDR_OWVAR 28
72814: PUSH
72815: LD_INT 21
72817: ST_TO_ADDR
// hc_gallery :=  ;
72818: LD_ADDR_OWVAR 33
72822: PUSH
72823: LD_STRING 
72825: ST_TO_ADDR
// end ;
72826: LD_VAR 0 1
72830: RET
// export function PrepareMastodont ( ) ; begin
72831: LD_INT 0
72833: PPUSH
// uc_side := 0 ;
72834: LD_ADDR_OWVAR 20
72838: PUSH
72839: LD_INT 0
72841: ST_TO_ADDR
// uc_nation := 0 ;
72842: LD_ADDR_OWVAR 21
72846: PUSH
72847: LD_INT 0
72849: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72850: LD_ADDR_OWVAR 37
72854: PUSH
72855: LD_INT 31
72857: ST_TO_ADDR
// vc_control := control_rider ;
72858: LD_ADDR_OWVAR 38
72862: PUSH
72863: LD_INT 4
72865: ST_TO_ADDR
// end ;
72866: LD_VAR 0 1
72870: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72871: LD_INT 0
72873: PPUSH
72874: PPUSH
72875: PPUSH
// uc_side = 0 ;
72876: LD_ADDR_OWVAR 20
72880: PUSH
72881: LD_INT 0
72883: ST_TO_ADDR
// uc_nation = 0 ;
72884: LD_ADDR_OWVAR 21
72888: PUSH
72889: LD_INT 0
72891: ST_TO_ADDR
// InitHc_All ( ) ;
72892: CALL_OW 584
// InitVc ;
72896: CALL_OW 20
// if mastodonts then
72900: LD_VAR 0 6
72904: IFFALSE 72971
// for i = 1 to mastodonts do
72906: LD_ADDR_VAR 0 11
72910: PUSH
72911: DOUBLE
72912: LD_INT 1
72914: DEC
72915: ST_TO_ADDR
72916: LD_VAR 0 6
72920: PUSH
72921: FOR_TO
72922: IFFALSE 72969
// begin vc_chassis := 31 ;
72924: LD_ADDR_OWVAR 37
72928: PUSH
72929: LD_INT 31
72931: ST_TO_ADDR
// vc_control := control_rider ;
72932: LD_ADDR_OWVAR 38
72936: PUSH
72937: LD_INT 4
72939: ST_TO_ADDR
// animal := CreateVehicle ;
72940: LD_ADDR_VAR 0 12
72944: PUSH
72945: CALL_OW 45
72949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72950: LD_VAR 0 12
72954: PPUSH
72955: LD_VAR 0 8
72959: PPUSH
72960: LD_INT 0
72962: PPUSH
72963: CALL 75099 0 3
// end ;
72967: GO 72921
72969: POP
72970: POP
// if horses then
72971: LD_VAR 0 5
72975: IFFALSE 73042
// for i = 1 to horses do
72977: LD_ADDR_VAR 0 11
72981: PUSH
72982: DOUBLE
72983: LD_INT 1
72985: DEC
72986: ST_TO_ADDR
72987: LD_VAR 0 5
72991: PUSH
72992: FOR_TO
72993: IFFALSE 73040
// begin hc_class := 21 ;
72995: LD_ADDR_OWVAR 28
72999: PUSH
73000: LD_INT 21
73002: ST_TO_ADDR
// hc_gallery :=  ;
73003: LD_ADDR_OWVAR 33
73007: PUSH
73008: LD_STRING 
73010: ST_TO_ADDR
// animal := CreateHuman ;
73011: LD_ADDR_VAR 0 12
73015: PUSH
73016: CALL_OW 44
73020: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73021: LD_VAR 0 12
73025: PPUSH
73026: LD_VAR 0 8
73030: PPUSH
73031: LD_INT 0
73033: PPUSH
73034: CALL 75099 0 3
// end ;
73038: GO 72992
73040: POP
73041: POP
// if birds then
73042: LD_VAR 0 1
73046: IFFALSE 73113
// for i = 1 to birds do
73048: LD_ADDR_VAR 0 11
73052: PUSH
73053: DOUBLE
73054: LD_INT 1
73056: DEC
73057: ST_TO_ADDR
73058: LD_VAR 0 1
73062: PUSH
73063: FOR_TO
73064: IFFALSE 73111
// begin hc_class := 18 ;
73066: LD_ADDR_OWVAR 28
73070: PUSH
73071: LD_INT 18
73073: ST_TO_ADDR
// hc_gallery =  ;
73074: LD_ADDR_OWVAR 33
73078: PUSH
73079: LD_STRING 
73081: ST_TO_ADDR
// animal := CreateHuman ;
73082: LD_ADDR_VAR 0 12
73086: PUSH
73087: CALL_OW 44
73091: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73092: LD_VAR 0 12
73096: PPUSH
73097: LD_VAR 0 8
73101: PPUSH
73102: LD_INT 0
73104: PPUSH
73105: CALL 75099 0 3
// end ;
73109: GO 73063
73111: POP
73112: POP
// if tigers then
73113: LD_VAR 0 2
73117: IFFALSE 73201
// for i = 1 to tigers do
73119: LD_ADDR_VAR 0 11
73123: PUSH
73124: DOUBLE
73125: LD_INT 1
73127: DEC
73128: ST_TO_ADDR
73129: LD_VAR 0 2
73133: PUSH
73134: FOR_TO
73135: IFFALSE 73199
// begin hc_class = class_tiger ;
73137: LD_ADDR_OWVAR 28
73141: PUSH
73142: LD_INT 14
73144: ST_TO_ADDR
// hc_gallery =  ;
73145: LD_ADDR_OWVAR 33
73149: PUSH
73150: LD_STRING 
73152: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73153: LD_ADDR_OWVAR 35
73157: PUSH
73158: LD_INT 7
73160: NEG
73161: PPUSH
73162: LD_INT 7
73164: PPUSH
73165: CALL_OW 12
73169: ST_TO_ADDR
// animal := CreateHuman ;
73170: LD_ADDR_VAR 0 12
73174: PUSH
73175: CALL_OW 44
73179: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73180: LD_VAR 0 12
73184: PPUSH
73185: LD_VAR 0 8
73189: PPUSH
73190: LD_INT 0
73192: PPUSH
73193: CALL 75099 0 3
// end ;
73197: GO 73134
73199: POP
73200: POP
// if apemans then
73201: LD_VAR 0 3
73205: IFFALSE 73328
// for i = 1 to apemans do
73207: LD_ADDR_VAR 0 11
73211: PUSH
73212: DOUBLE
73213: LD_INT 1
73215: DEC
73216: ST_TO_ADDR
73217: LD_VAR 0 3
73221: PUSH
73222: FOR_TO
73223: IFFALSE 73326
// begin hc_class = class_apeman ;
73225: LD_ADDR_OWVAR 28
73229: PUSH
73230: LD_INT 12
73232: ST_TO_ADDR
// hc_gallery =  ;
73233: LD_ADDR_OWVAR 33
73237: PUSH
73238: LD_STRING 
73240: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73241: LD_ADDR_OWVAR 35
73245: PUSH
73246: LD_INT 2
73248: NEG
73249: PPUSH
73250: LD_INT 2
73252: PPUSH
73253: CALL_OW 12
73257: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73258: LD_ADDR_OWVAR 31
73262: PUSH
73263: LD_INT 1
73265: PPUSH
73266: LD_INT 3
73268: PPUSH
73269: CALL_OW 12
73273: PUSH
73274: LD_INT 1
73276: PPUSH
73277: LD_INT 3
73279: PPUSH
73280: CALL_OW 12
73284: PUSH
73285: LD_INT 0
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: ST_TO_ADDR
// animal := CreateHuman ;
73297: LD_ADDR_VAR 0 12
73301: PUSH
73302: CALL_OW 44
73306: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73307: LD_VAR 0 12
73311: PPUSH
73312: LD_VAR 0 8
73316: PPUSH
73317: LD_INT 0
73319: PPUSH
73320: CALL 75099 0 3
// end ;
73324: GO 73222
73326: POP
73327: POP
// if enchidnas then
73328: LD_VAR 0 4
73332: IFFALSE 73399
// for i = 1 to enchidnas do
73334: LD_ADDR_VAR 0 11
73338: PUSH
73339: DOUBLE
73340: LD_INT 1
73342: DEC
73343: ST_TO_ADDR
73344: LD_VAR 0 4
73348: PUSH
73349: FOR_TO
73350: IFFALSE 73397
// begin hc_class = 13 ;
73352: LD_ADDR_OWVAR 28
73356: PUSH
73357: LD_INT 13
73359: ST_TO_ADDR
// hc_gallery =  ;
73360: LD_ADDR_OWVAR 33
73364: PUSH
73365: LD_STRING 
73367: ST_TO_ADDR
// animal := CreateHuman ;
73368: LD_ADDR_VAR 0 12
73372: PUSH
73373: CALL_OW 44
73377: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73378: LD_VAR 0 12
73382: PPUSH
73383: LD_VAR 0 8
73387: PPUSH
73388: LD_INT 0
73390: PPUSH
73391: CALL 75099 0 3
// end ;
73395: GO 73349
73397: POP
73398: POP
// if fishes then
73399: LD_VAR 0 7
73403: IFFALSE 73470
// for i = 1 to fishes do
73405: LD_ADDR_VAR 0 11
73409: PUSH
73410: DOUBLE
73411: LD_INT 1
73413: DEC
73414: ST_TO_ADDR
73415: LD_VAR 0 7
73419: PUSH
73420: FOR_TO
73421: IFFALSE 73468
// begin hc_class = 20 ;
73423: LD_ADDR_OWVAR 28
73427: PUSH
73428: LD_INT 20
73430: ST_TO_ADDR
// hc_gallery =  ;
73431: LD_ADDR_OWVAR 33
73435: PUSH
73436: LD_STRING 
73438: ST_TO_ADDR
// animal := CreateHuman ;
73439: LD_ADDR_VAR 0 12
73443: PUSH
73444: CALL_OW 44
73448: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73449: LD_VAR 0 12
73453: PPUSH
73454: LD_VAR 0 9
73458: PPUSH
73459: LD_INT 0
73461: PPUSH
73462: CALL 75099 0 3
// end ;
73466: GO 73420
73468: POP
73469: POP
// end ;
73470: LD_VAR 0 10
73474: RET
// export function WantHeal ( sci , unit ) ; begin
73475: LD_INT 0
73477: PPUSH
// if GetTaskList ( sci ) > 0 then
73478: LD_VAR 0 1
73482: PPUSH
73483: CALL_OW 437
73487: PUSH
73488: LD_INT 0
73490: GREATER
73491: IFFALSE 73561
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73493: LD_VAR 0 1
73497: PPUSH
73498: CALL_OW 437
73502: PUSH
73503: LD_INT 1
73505: ARRAY
73506: PUSH
73507: LD_INT 1
73509: ARRAY
73510: PUSH
73511: LD_STRING l
73513: EQUAL
73514: PUSH
73515: LD_VAR 0 1
73519: PPUSH
73520: CALL_OW 437
73524: PUSH
73525: LD_INT 1
73527: ARRAY
73528: PUSH
73529: LD_INT 4
73531: ARRAY
73532: PUSH
73533: LD_VAR 0 2
73537: EQUAL
73538: AND
73539: IFFALSE 73551
// result := true else
73541: LD_ADDR_VAR 0 3
73545: PUSH
73546: LD_INT 1
73548: ST_TO_ADDR
73549: GO 73559
// result := false ;
73551: LD_ADDR_VAR 0 3
73555: PUSH
73556: LD_INT 0
73558: ST_TO_ADDR
// end else
73559: GO 73569
// result := false ;
73561: LD_ADDR_VAR 0 3
73565: PUSH
73566: LD_INT 0
73568: ST_TO_ADDR
// end ;
73569: LD_VAR 0 3
73573: RET
// export function HealTarget ( sci ) ; begin
73574: LD_INT 0
73576: PPUSH
// if not sci then
73577: LD_VAR 0 1
73581: NOT
73582: IFFALSE 73586
// exit ;
73584: GO 73651
// result := 0 ;
73586: LD_ADDR_VAR 0 2
73590: PUSH
73591: LD_INT 0
73593: ST_TO_ADDR
// if GetTaskList ( sci ) then
73594: LD_VAR 0 1
73598: PPUSH
73599: CALL_OW 437
73603: IFFALSE 73651
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73605: LD_VAR 0 1
73609: PPUSH
73610: CALL_OW 437
73614: PUSH
73615: LD_INT 1
73617: ARRAY
73618: PUSH
73619: LD_INT 1
73621: ARRAY
73622: PUSH
73623: LD_STRING l
73625: EQUAL
73626: IFFALSE 73651
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73628: LD_ADDR_VAR 0 2
73632: PUSH
73633: LD_VAR 0 1
73637: PPUSH
73638: CALL_OW 437
73642: PUSH
73643: LD_INT 1
73645: ARRAY
73646: PUSH
73647: LD_INT 4
73649: ARRAY
73650: ST_TO_ADDR
// end ;
73651: LD_VAR 0 2
73655: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73656: LD_INT 0
73658: PPUSH
73659: PPUSH
73660: PPUSH
73661: PPUSH
// if not base_units then
73662: LD_VAR 0 1
73666: NOT
73667: IFFALSE 73671
// exit ;
73669: GO 73758
// result := false ;
73671: LD_ADDR_VAR 0 2
73675: PUSH
73676: LD_INT 0
73678: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73679: LD_ADDR_VAR 0 5
73683: PUSH
73684: LD_VAR 0 1
73688: PPUSH
73689: LD_INT 21
73691: PUSH
73692: LD_INT 3
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: PPUSH
73699: CALL_OW 72
73703: ST_TO_ADDR
// if not tmp then
73704: LD_VAR 0 5
73708: NOT
73709: IFFALSE 73713
// exit ;
73711: GO 73758
// for i in tmp do
73713: LD_ADDR_VAR 0 3
73717: PUSH
73718: LD_VAR 0 5
73722: PUSH
73723: FOR_IN
73724: IFFALSE 73756
// begin result := EnemyInRange ( i , 22 ) ;
73726: LD_ADDR_VAR 0 2
73730: PUSH
73731: LD_VAR 0 3
73735: PPUSH
73736: LD_INT 22
73738: PPUSH
73739: CALL 71345 0 2
73743: ST_TO_ADDR
// if result then
73744: LD_VAR 0 2
73748: IFFALSE 73754
// exit ;
73750: POP
73751: POP
73752: GO 73758
// end ;
73754: GO 73723
73756: POP
73757: POP
// end ;
73758: LD_VAR 0 2
73762: RET
// export function FilterByTag ( units , tag ) ; begin
73763: LD_INT 0
73765: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73766: LD_ADDR_VAR 0 3
73770: PUSH
73771: LD_VAR 0 1
73775: PPUSH
73776: LD_INT 120
73778: PUSH
73779: LD_VAR 0 2
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PPUSH
73788: CALL_OW 72
73792: ST_TO_ADDR
// end ;
73793: LD_VAR 0 3
73797: RET
// export function IsDriver ( un ) ; begin
73798: LD_INT 0
73800: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73801: LD_ADDR_VAR 0 2
73805: PUSH
73806: LD_VAR 0 1
73810: PUSH
73811: LD_INT 55
73813: PUSH
73814: EMPTY
73815: LIST
73816: PPUSH
73817: CALL_OW 69
73821: IN
73822: ST_TO_ADDR
// end ;
73823: LD_VAR 0 2
73827: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73828: LD_INT 0
73830: PPUSH
73831: PPUSH
// list := [ ] ;
73832: LD_ADDR_VAR 0 5
73836: PUSH
73837: EMPTY
73838: ST_TO_ADDR
// case d of 0 :
73839: LD_VAR 0 3
73843: PUSH
73844: LD_INT 0
73846: DOUBLE
73847: EQUAL
73848: IFTRUE 73852
73850: GO 73985
73852: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73853: LD_ADDR_VAR 0 5
73857: PUSH
73858: LD_VAR 0 1
73862: PUSH
73863: LD_INT 4
73865: MINUS
73866: PUSH
73867: LD_VAR 0 2
73871: PUSH
73872: LD_INT 4
73874: MINUS
73875: PUSH
73876: LD_INT 2
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: LIST
73883: PUSH
73884: LD_VAR 0 1
73888: PUSH
73889: LD_INT 3
73891: MINUS
73892: PUSH
73893: LD_VAR 0 2
73897: PUSH
73898: LD_INT 1
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: LIST
73905: PUSH
73906: LD_VAR 0 1
73910: PUSH
73911: LD_INT 4
73913: PLUS
73914: PUSH
73915: LD_VAR 0 2
73919: PUSH
73920: LD_INT 4
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: LIST
73927: PUSH
73928: LD_VAR 0 1
73932: PUSH
73933: LD_INT 3
73935: PLUS
73936: PUSH
73937: LD_VAR 0 2
73941: PUSH
73942: LD_INT 3
73944: PLUS
73945: PUSH
73946: LD_INT 5
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: LIST
73953: PUSH
73954: LD_VAR 0 1
73958: PUSH
73959: LD_VAR 0 2
73963: PUSH
73964: LD_INT 4
73966: PLUS
73967: PUSH
73968: LD_INT 0
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: LIST
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: ST_TO_ADDR
// end ; 1 :
73983: GO 74683
73985: LD_INT 1
73987: DOUBLE
73988: EQUAL
73989: IFTRUE 73993
73991: GO 74126
73993: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73994: LD_ADDR_VAR 0 5
73998: PUSH
73999: LD_VAR 0 1
74003: PUSH
74004: LD_VAR 0 2
74008: PUSH
74009: LD_INT 4
74011: MINUS
74012: PUSH
74013: LD_INT 3
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: LIST
74020: PUSH
74021: LD_VAR 0 1
74025: PUSH
74026: LD_INT 3
74028: MINUS
74029: PUSH
74030: LD_VAR 0 2
74034: PUSH
74035: LD_INT 3
74037: MINUS
74038: PUSH
74039: LD_INT 2
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: LIST
74046: PUSH
74047: LD_VAR 0 1
74051: PUSH
74052: LD_INT 4
74054: MINUS
74055: PUSH
74056: LD_VAR 0 2
74060: PUSH
74061: LD_INT 1
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: LIST
74068: PUSH
74069: LD_VAR 0 1
74073: PUSH
74074: LD_VAR 0 2
74078: PUSH
74079: LD_INT 3
74081: PLUS
74082: PUSH
74083: LD_INT 0
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: LIST
74090: PUSH
74091: LD_VAR 0 1
74095: PUSH
74096: LD_INT 4
74098: PLUS
74099: PUSH
74100: LD_VAR 0 2
74104: PUSH
74105: LD_INT 4
74107: PLUS
74108: PUSH
74109: LD_INT 5
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: LIST
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: ST_TO_ADDR
// end ; 2 :
74124: GO 74683
74126: LD_INT 2
74128: DOUBLE
74129: EQUAL
74130: IFTRUE 74134
74132: GO 74263
74134: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74135: LD_ADDR_VAR 0 5
74139: PUSH
74140: LD_VAR 0 1
74144: PUSH
74145: LD_VAR 0 2
74149: PUSH
74150: LD_INT 3
74152: MINUS
74153: PUSH
74154: LD_INT 3
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: LIST
74161: PUSH
74162: LD_VAR 0 1
74166: PUSH
74167: LD_INT 4
74169: PLUS
74170: PUSH
74171: LD_VAR 0 2
74175: PUSH
74176: LD_INT 4
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: LIST
74183: PUSH
74184: LD_VAR 0 1
74188: PUSH
74189: LD_VAR 0 2
74193: PUSH
74194: LD_INT 4
74196: PLUS
74197: PUSH
74198: LD_INT 0
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: LIST
74205: PUSH
74206: LD_VAR 0 1
74210: PUSH
74211: LD_INT 3
74213: MINUS
74214: PUSH
74215: LD_VAR 0 2
74219: PUSH
74220: LD_INT 1
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: LIST
74227: PUSH
74228: LD_VAR 0 1
74232: PUSH
74233: LD_INT 4
74235: MINUS
74236: PUSH
74237: LD_VAR 0 2
74241: PUSH
74242: LD_INT 4
74244: MINUS
74245: PUSH
74246: LD_INT 2
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: LIST
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: ST_TO_ADDR
// end ; 3 :
74261: GO 74683
74263: LD_INT 3
74265: DOUBLE
74266: EQUAL
74267: IFTRUE 74271
74269: GO 74404
74271: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74272: LD_ADDR_VAR 0 5
74276: PUSH
74277: LD_VAR 0 1
74281: PUSH
74282: LD_INT 3
74284: PLUS
74285: PUSH
74286: LD_VAR 0 2
74290: PUSH
74291: LD_INT 4
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: LIST
74298: PUSH
74299: LD_VAR 0 1
74303: PUSH
74304: LD_INT 4
74306: PLUS
74307: PUSH
74308: LD_VAR 0 2
74312: PUSH
74313: LD_INT 4
74315: PLUS
74316: PUSH
74317: LD_INT 5
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: LIST
74324: PUSH
74325: LD_VAR 0 1
74329: PUSH
74330: LD_INT 4
74332: MINUS
74333: PUSH
74334: LD_VAR 0 2
74338: PUSH
74339: LD_INT 1
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: LIST
74346: PUSH
74347: LD_VAR 0 1
74351: PUSH
74352: LD_VAR 0 2
74356: PUSH
74357: LD_INT 4
74359: MINUS
74360: PUSH
74361: LD_INT 3
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: LIST
74368: PUSH
74369: LD_VAR 0 1
74373: PUSH
74374: LD_INT 3
74376: MINUS
74377: PUSH
74378: LD_VAR 0 2
74382: PUSH
74383: LD_INT 3
74385: MINUS
74386: PUSH
74387: LD_INT 2
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: LIST
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: ST_TO_ADDR
// end ; 4 :
74402: GO 74683
74404: LD_INT 4
74406: DOUBLE
74407: EQUAL
74408: IFTRUE 74412
74410: GO 74545
74412: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74413: LD_ADDR_VAR 0 5
74417: PUSH
74418: LD_VAR 0 1
74422: PUSH
74423: LD_VAR 0 2
74427: PUSH
74428: LD_INT 4
74430: PLUS
74431: PUSH
74432: LD_INT 0
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: LIST
74439: PUSH
74440: LD_VAR 0 1
74444: PUSH
74445: LD_INT 3
74447: PLUS
74448: PUSH
74449: LD_VAR 0 2
74453: PUSH
74454: LD_INT 3
74456: PLUS
74457: PUSH
74458: LD_INT 5
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: LIST
74465: PUSH
74466: LD_VAR 0 1
74470: PUSH
74471: LD_INT 4
74473: PLUS
74474: PUSH
74475: LD_VAR 0 2
74479: PUSH
74480: LD_INT 4
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: LIST
74487: PUSH
74488: LD_VAR 0 1
74492: PUSH
74493: LD_VAR 0 2
74497: PUSH
74498: LD_INT 3
74500: MINUS
74501: PUSH
74502: LD_INT 3
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: LIST
74509: PUSH
74510: LD_VAR 0 1
74514: PUSH
74515: LD_INT 4
74517: MINUS
74518: PUSH
74519: LD_VAR 0 2
74523: PUSH
74524: LD_INT 4
74526: MINUS
74527: PUSH
74528: LD_INT 2
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: LIST
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: ST_TO_ADDR
// end ; 5 :
74543: GO 74683
74545: LD_INT 5
74547: DOUBLE
74548: EQUAL
74549: IFTRUE 74553
74551: GO 74682
74553: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74554: LD_ADDR_VAR 0 5
74558: PUSH
74559: LD_VAR 0 1
74563: PUSH
74564: LD_INT 4
74566: MINUS
74567: PUSH
74568: LD_VAR 0 2
74572: PUSH
74573: LD_INT 1
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: LIST
74580: PUSH
74581: LD_VAR 0 1
74585: PUSH
74586: LD_VAR 0 2
74590: PUSH
74591: LD_INT 4
74593: MINUS
74594: PUSH
74595: LD_INT 3
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: LIST
74602: PUSH
74603: LD_VAR 0 1
74607: PUSH
74608: LD_INT 4
74610: PLUS
74611: PUSH
74612: LD_VAR 0 2
74616: PUSH
74617: LD_INT 4
74619: PLUS
74620: PUSH
74621: LD_INT 5
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: LIST
74628: PUSH
74629: LD_VAR 0 1
74633: PUSH
74634: LD_INT 3
74636: PLUS
74637: PUSH
74638: LD_VAR 0 2
74642: PUSH
74643: LD_INT 4
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: LIST
74650: PUSH
74651: LD_VAR 0 1
74655: PUSH
74656: LD_VAR 0 2
74660: PUSH
74661: LD_INT 3
74663: PLUS
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: LIST
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: ST_TO_ADDR
// end ; end ;
74680: GO 74683
74682: POP
// result := list ;
74683: LD_ADDR_VAR 0 4
74687: PUSH
74688: LD_VAR 0 5
74692: ST_TO_ADDR
// end ;
74693: LD_VAR 0 4
74697: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74698: LD_INT 0
74700: PPUSH
74701: PPUSH
74702: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74703: LD_VAR 0 1
74707: NOT
74708: PUSH
74709: LD_VAR 0 2
74713: PUSH
74714: LD_INT 1
74716: PUSH
74717: LD_INT 2
74719: PUSH
74720: LD_INT 3
74722: PUSH
74723: LD_INT 4
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: IN
74732: NOT
74733: OR
74734: IFFALSE 74738
// exit ;
74736: GO 74821
// tmp := [ ] ;
74738: LD_ADDR_VAR 0 5
74742: PUSH
74743: EMPTY
74744: ST_TO_ADDR
// for i in units do
74745: LD_ADDR_VAR 0 4
74749: PUSH
74750: LD_VAR 0 1
74754: PUSH
74755: FOR_IN
74756: IFFALSE 74790
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74758: LD_ADDR_VAR 0 5
74762: PUSH
74763: LD_VAR 0 5
74767: PPUSH
74768: LD_VAR 0 4
74772: PPUSH
74773: LD_VAR 0 2
74777: PPUSH
74778: CALL_OW 259
74782: PPUSH
74783: CALL 76181 0 2
74787: ST_TO_ADDR
74788: GO 74755
74790: POP
74791: POP
// if not tmp then
74792: LD_VAR 0 5
74796: NOT
74797: IFFALSE 74801
// exit ;
74799: GO 74821
// result := SortListByListDesc ( units , tmp ) ;
74801: LD_ADDR_VAR 0 3
74805: PUSH
74806: LD_VAR 0 1
74810: PPUSH
74811: LD_VAR 0 5
74815: PPUSH
74816: CALL_OW 77
74820: ST_TO_ADDR
// end ;
74821: LD_VAR 0 3
74825: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74826: LD_INT 0
74828: PPUSH
74829: PPUSH
74830: PPUSH
// result := false ;
74831: LD_ADDR_VAR 0 3
74835: PUSH
74836: LD_INT 0
74838: ST_TO_ADDR
// if not building then
74839: LD_VAR 0 2
74843: NOT
74844: IFFALSE 74848
// exit ;
74846: GO 74986
// x := GetX ( building ) ;
74848: LD_ADDR_VAR 0 4
74852: PUSH
74853: LD_VAR 0 2
74857: PPUSH
74858: CALL_OW 250
74862: ST_TO_ADDR
// y := GetY ( building ) ;
74863: LD_ADDR_VAR 0 5
74867: PUSH
74868: LD_VAR 0 2
74872: PPUSH
74873: CALL_OW 251
74877: ST_TO_ADDR
// if not x or not y then
74878: LD_VAR 0 4
74882: NOT
74883: PUSH
74884: LD_VAR 0 5
74888: NOT
74889: OR
74890: IFFALSE 74894
// exit ;
74892: GO 74986
// if GetTaskList ( unit ) then
74894: LD_VAR 0 1
74898: PPUSH
74899: CALL_OW 437
74903: IFFALSE 74986
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74905: LD_STRING e
74907: PUSH
74908: LD_VAR 0 1
74912: PPUSH
74913: CALL_OW 437
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PUSH
74922: LD_INT 1
74924: ARRAY
74925: EQUAL
74926: PUSH
74927: LD_VAR 0 4
74931: PUSH
74932: LD_VAR 0 1
74936: PPUSH
74937: CALL_OW 437
74941: PUSH
74942: LD_INT 1
74944: ARRAY
74945: PUSH
74946: LD_INT 2
74948: ARRAY
74949: EQUAL
74950: AND
74951: PUSH
74952: LD_VAR 0 5
74956: PUSH
74957: LD_VAR 0 1
74961: PPUSH
74962: CALL_OW 437
74966: PUSH
74967: LD_INT 1
74969: ARRAY
74970: PUSH
74971: LD_INT 3
74973: ARRAY
74974: EQUAL
74975: AND
74976: IFFALSE 74986
// result := true end ;
74978: LD_ADDR_VAR 0 3
74982: PUSH
74983: LD_INT 1
74985: ST_TO_ADDR
// end ;
74986: LD_VAR 0 3
74990: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74991: LD_INT 0
74993: PPUSH
// result := false ;
74994: LD_ADDR_VAR 0 4
74998: PUSH
74999: LD_INT 0
75001: ST_TO_ADDR
// if GetTaskList ( unit ) then
75002: LD_VAR 0 1
75006: PPUSH
75007: CALL_OW 437
75011: IFFALSE 75094
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75013: LD_STRING M
75015: PUSH
75016: LD_VAR 0 1
75020: PPUSH
75021: CALL_OW 437
75025: PUSH
75026: LD_INT 1
75028: ARRAY
75029: PUSH
75030: LD_INT 1
75032: ARRAY
75033: EQUAL
75034: PUSH
75035: LD_VAR 0 2
75039: PUSH
75040: LD_VAR 0 1
75044: PPUSH
75045: CALL_OW 437
75049: PUSH
75050: LD_INT 1
75052: ARRAY
75053: PUSH
75054: LD_INT 2
75056: ARRAY
75057: EQUAL
75058: AND
75059: PUSH
75060: LD_VAR 0 3
75064: PUSH
75065: LD_VAR 0 1
75069: PPUSH
75070: CALL_OW 437
75074: PUSH
75075: LD_INT 1
75077: ARRAY
75078: PUSH
75079: LD_INT 3
75081: ARRAY
75082: EQUAL
75083: AND
75084: IFFALSE 75094
// result := true ;
75086: LD_ADDR_VAR 0 4
75090: PUSH
75091: LD_INT 1
75093: ST_TO_ADDR
// end ; end ;
75094: LD_VAR 0 4
75098: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75099: LD_INT 0
75101: PPUSH
75102: PPUSH
75103: PPUSH
75104: PPUSH
// if not unit or not area then
75105: LD_VAR 0 1
75109: NOT
75110: PUSH
75111: LD_VAR 0 2
75115: NOT
75116: OR
75117: IFFALSE 75121
// exit ;
75119: GO 75284
// tmp := AreaToList ( area , i ) ;
75121: LD_ADDR_VAR 0 6
75125: PUSH
75126: LD_VAR 0 2
75130: PPUSH
75131: LD_VAR 0 5
75135: PPUSH
75136: CALL_OW 517
75140: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75141: LD_ADDR_VAR 0 5
75145: PUSH
75146: DOUBLE
75147: LD_INT 1
75149: DEC
75150: ST_TO_ADDR
75151: LD_VAR 0 6
75155: PUSH
75156: LD_INT 1
75158: ARRAY
75159: PUSH
75160: FOR_TO
75161: IFFALSE 75282
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75163: LD_ADDR_VAR 0 7
75167: PUSH
75168: LD_VAR 0 6
75172: PUSH
75173: LD_INT 1
75175: ARRAY
75176: PUSH
75177: LD_VAR 0 5
75181: ARRAY
75182: PUSH
75183: LD_VAR 0 6
75187: PUSH
75188: LD_INT 2
75190: ARRAY
75191: PUSH
75192: LD_VAR 0 5
75196: ARRAY
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
75202: LD_INT 92
75204: PUSH
75205: LD_VAR 0 7
75209: PUSH
75210: LD_INT 1
75212: ARRAY
75213: PUSH
75214: LD_VAR 0 7
75218: PUSH
75219: LD_INT 2
75221: ARRAY
75222: PUSH
75223: LD_INT 3
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: PPUSH
75232: CALL_OW 69
75236: PUSH
75237: LD_INT 0
75239: EQUAL
75240: IFFALSE 75280
// begin PlaceUnitArea ( unit , area , mode ) ;
75242: LD_VAR 0 1
75246: PPUSH
75247: LD_VAR 0 2
75251: PPUSH
75252: LD_VAR 0 3
75256: PPUSH
75257: CALL_OW 49
// result := IsPlaced ( unit ) ;
75261: LD_ADDR_VAR 0 4
75265: PUSH
75266: LD_VAR 0 1
75270: PPUSH
75271: CALL_OW 305
75275: ST_TO_ADDR
// exit ;
75276: POP
75277: POP
75278: GO 75284
// end ; end ;
75280: GO 75160
75282: POP
75283: POP
// end ;
75284: LD_VAR 0 4
75288: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75289: LD_INT 0
75291: PPUSH
75292: PPUSH
75293: PPUSH
// if not side or side > 8 then
75294: LD_VAR 0 1
75298: NOT
75299: PUSH
75300: LD_VAR 0 1
75304: PUSH
75305: LD_INT 8
75307: GREATER
75308: OR
75309: IFFALSE 75313
// exit ;
75311: GO 75500
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75313: LD_ADDR_VAR 0 4
75317: PUSH
75318: LD_INT 22
75320: PUSH
75321: LD_VAR 0 1
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: LD_INT 21
75332: PUSH
75333: LD_INT 3
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: PUSH
75340: EMPTY
75341: LIST
75342: LIST
75343: PPUSH
75344: CALL_OW 69
75348: ST_TO_ADDR
// if not tmp then
75349: LD_VAR 0 4
75353: NOT
75354: IFFALSE 75358
// exit ;
75356: GO 75500
// enable_addtolog := true ;
75358: LD_ADDR_OWVAR 81
75362: PUSH
75363: LD_INT 1
75365: ST_TO_ADDR
// AddToLog ( [ ) ;
75366: LD_STRING [
75368: PPUSH
75369: CALL_OW 561
// for i in tmp do
75373: LD_ADDR_VAR 0 3
75377: PUSH
75378: LD_VAR 0 4
75382: PUSH
75383: FOR_IN
75384: IFFALSE 75491
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75386: LD_STRING [
75388: PUSH
75389: LD_VAR 0 3
75393: PPUSH
75394: CALL_OW 266
75398: STR
75399: PUSH
75400: LD_STRING , 
75402: STR
75403: PUSH
75404: LD_VAR 0 3
75408: PPUSH
75409: CALL_OW 250
75413: STR
75414: PUSH
75415: LD_STRING , 
75417: STR
75418: PUSH
75419: LD_VAR 0 3
75423: PPUSH
75424: CALL_OW 251
75428: STR
75429: PUSH
75430: LD_STRING , 
75432: STR
75433: PUSH
75434: LD_VAR 0 3
75438: PPUSH
75439: CALL_OW 254
75443: STR
75444: PUSH
75445: LD_STRING , 
75447: STR
75448: PUSH
75449: LD_VAR 0 3
75453: PPUSH
75454: LD_INT 1
75456: PPUSH
75457: CALL_OW 268
75461: STR
75462: PUSH
75463: LD_STRING , 
75465: STR
75466: PUSH
75467: LD_VAR 0 3
75471: PPUSH
75472: LD_INT 2
75474: PPUSH
75475: CALL_OW 268
75479: STR
75480: PUSH
75481: LD_STRING ],
75483: STR
75484: PPUSH
75485: CALL_OW 561
// end ;
75489: GO 75383
75491: POP
75492: POP
// AddToLog ( ]; ) ;
75493: LD_STRING ];
75495: PPUSH
75496: CALL_OW 561
// end ;
75500: LD_VAR 0 2
75504: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75505: LD_INT 0
75507: PPUSH
75508: PPUSH
75509: PPUSH
75510: PPUSH
75511: PPUSH
// if not area or not rate or not max then
75512: LD_VAR 0 1
75516: NOT
75517: PUSH
75518: LD_VAR 0 2
75522: NOT
75523: OR
75524: PUSH
75525: LD_VAR 0 4
75529: NOT
75530: OR
75531: IFFALSE 75535
// exit ;
75533: GO 75724
// while 1 do
75535: LD_INT 1
75537: IFFALSE 75724
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75539: LD_ADDR_VAR 0 9
75543: PUSH
75544: LD_VAR 0 1
75548: PPUSH
75549: LD_INT 1
75551: PPUSH
75552: CALL_OW 287
75556: PUSH
75557: LD_INT 10
75559: MUL
75560: ST_TO_ADDR
// r := rate / 10 ;
75561: LD_ADDR_VAR 0 7
75565: PUSH
75566: LD_VAR 0 2
75570: PUSH
75571: LD_INT 10
75573: DIVREAL
75574: ST_TO_ADDR
// time := 1 1$00 ;
75575: LD_ADDR_VAR 0 8
75579: PUSH
75580: LD_INT 2100
75582: ST_TO_ADDR
// if amount < min then
75583: LD_VAR 0 9
75587: PUSH
75588: LD_VAR 0 3
75592: LESS
75593: IFFALSE 75611
// r := r * 2 else
75595: LD_ADDR_VAR 0 7
75599: PUSH
75600: LD_VAR 0 7
75604: PUSH
75605: LD_INT 2
75607: MUL
75608: ST_TO_ADDR
75609: GO 75637
// if amount > max then
75611: LD_VAR 0 9
75615: PUSH
75616: LD_VAR 0 4
75620: GREATER
75621: IFFALSE 75637
// r := r / 2 ;
75623: LD_ADDR_VAR 0 7
75627: PUSH
75628: LD_VAR 0 7
75632: PUSH
75633: LD_INT 2
75635: DIVREAL
75636: ST_TO_ADDR
// time := time / r ;
75637: LD_ADDR_VAR 0 8
75641: PUSH
75642: LD_VAR 0 8
75646: PUSH
75647: LD_VAR 0 7
75651: DIVREAL
75652: ST_TO_ADDR
// if time < 0 then
75653: LD_VAR 0 8
75657: PUSH
75658: LD_INT 0
75660: LESS
75661: IFFALSE 75678
// time := time * - 1 ;
75663: LD_ADDR_VAR 0 8
75667: PUSH
75668: LD_VAR 0 8
75672: PUSH
75673: LD_INT 1
75675: NEG
75676: MUL
75677: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75678: LD_VAR 0 8
75682: PUSH
75683: LD_INT 35
75685: PPUSH
75686: LD_INT 875
75688: PPUSH
75689: CALL_OW 12
75693: PLUS
75694: PPUSH
75695: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75699: LD_INT 1
75701: PPUSH
75702: LD_INT 5
75704: PPUSH
75705: CALL_OW 12
75709: PPUSH
75710: LD_VAR 0 1
75714: PPUSH
75715: LD_INT 1
75717: PPUSH
75718: CALL_OW 55
// end ;
75722: GO 75535
// end ;
75724: LD_VAR 0 5
75728: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75729: LD_INT 0
75731: PPUSH
75732: PPUSH
75733: PPUSH
75734: PPUSH
75735: PPUSH
75736: PPUSH
75737: PPUSH
75738: PPUSH
// if not turrets or not factories then
75739: LD_VAR 0 1
75743: NOT
75744: PUSH
75745: LD_VAR 0 2
75749: NOT
75750: OR
75751: IFFALSE 75755
// exit ;
75753: GO 76062
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75755: LD_ADDR_VAR 0 10
75759: PUSH
75760: LD_INT 5
75762: PUSH
75763: LD_INT 6
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: PUSH
75770: LD_INT 2
75772: PUSH
75773: LD_INT 4
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: PUSH
75780: LD_INT 3
75782: PUSH
75783: LD_INT 5
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 24
75797: PUSH
75798: LD_INT 25
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 23
75807: PUSH
75808: LD_INT 27
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PUSH
75819: LD_INT 42
75821: PUSH
75822: LD_INT 43
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 44
75831: PUSH
75832: LD_INT 46
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: LD_INT 45
75841: PUSH
75842: LD_INT 47
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: LIST
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: LIST
75858: ST_TO_ADDR
// result := [ ] ;
75859: LD_ADDR_VAR 0 3
75863: PUSH
75864: EMPTY
75865: ST_TO_ADDR
// for i in turrets do
75866: LD_ADDR_VAR 0 4
75870: PUSH
75871: LD_VAR 0 1
75875: PUSH
75876: FOR_IN
75877: IFFALSE 76060
// begin nat := GetNation ( i ) ;
75879: LD_ADDR_VAR 0 7
75883: PUSH
75884: LD_VAR 0 4
75888: PPUSH
75889: CALL_OW 248
75893: ST_TO_ADDR
// weapon := 0 ;
75894: LD_ADDR_VAR 0 8
75898: PUSH
75899: LD_INT 0
75901: ST_TO_ADDR
// if not nat then
75902: LD_VAR 0 7
75906: NOT
75907: IFFALSE 75911
// continue ;
75909: GO 75876
// for j in list [ nat ] do
75911: LD_ADDR_VAR 0 5
75915: PUSH
75916: LD_VAR 0 10
75920: PUSH
75921: LD_VAR 0 7
75925: ARRAY
75926: PUSH
75927: FOR_IN
75928: IFFALSE 75969
// if GetBWeapon ( i ) = j [ 1 ] then
75930: LD_VAR 0 4
75934: PPUSH
75935: CALL_OW 269
75939: PUSH
75940: LD_VAR 0 5
75944: PUSH
75945: LD_INT 1
75947: ARRAY
75948: EQUAL
75949: IFFALSE 75967
// begin weapon := j [ 2 ] ;
75951: LD_ADDR_VAR 0 8
75955: PUSH
75956: LD_VAR 0 5
75960: PUSH
75961: LD_INT 2
75963: ARRAY
75964: ST_TO_ADDR
// break ;
75965: GO 75969
// end ;
75967: GO 75927
75969: POP
75970: POP
// if not weapon then
75971: LD_VAR 0 8
75975: NOT
75976: IFFALSE 75980
// continue ;
75978: GO 75876
// for k in factories do
75980: LD_ADDR_VAR 0 6
75984: PUSH
75985: LD_VAR 0 2
75989: PUSH
75990: FOR_IN
75991: IFFALSE 76056
// begin weapons := AvailableWeaponList ( k ) ;
75993: LD_ADDR_VAR 0 9
75997: PUSH
75998: LD_VAR 0 6
76002: PPUSH
76003: CALL_OW 478
76007: ST_TO_ADDR
// if not weapons then
76008: LD_VAR 0 9
76012: NOT
76013: IFFALSE 76017
// continue ;
76015: GO 75990
// if weapon in weapons then
76017: LD_VAR 0 8
76021: PUSH
76022: LD_VAR 0 9
76026: IN
76027: IFFALSE 76054
// begin result := [ i , weapon ] ;
76029: LD_ADDR_VAR 0 3
76033: PUSH
76034: LD_VAR 0 4
76038: PUSH
76039: LD_VAR 0 8
76043: PUSH
76044: EMPTY
76045: LIST
76046: LIST
76047: ST_TO_ADDR
// exit ;
76048: POP
76049: POP
76050: POP
76051: POP
76052: GO 76062
// end ; end ;
76054: GO 75990
76056: POP
76057: POP
// end ;
76058: GO 75876
76060: POP
76061: POP
// end ;
76062: LD_VAR 0 3
76066: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76067: LD_INT 0
76069: PPUSH
// if not side or side > 8 then
76070: LD_VAR 0 3
76074: NOT
76075: PUSH
76076: LD_VAR 0 3
76080: PUSH
76081: LD_INT 8
76083: GREATER
76084: OR
76085: IFFALSE 76089
// exit ;
76087: GO 76148
// if not range then
76089: LD_VAR 0 4
76093: NOT
76094: IFFALSE 76105
// range := - 12 ;
76096: LD_ADDR_VAR 0 4
76100: PUSH
76101: LD_INT 12
76103: NEG
76104: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76105: LD_VAR 0 1
76109: PPUSH
76110: LD_VAR 0 2
76114: PPUSH
76115: LD_VAR 0 3
76119: PPUSH
76120: LD_VAR 0 4
76124: PPUSH
76125: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76129: LD_VAR 0 1
76133: PPUSH
76134: LD_VAR 0 2
76138: PPUSH
76139: LD_VAR 0 3
76143: PPUSH
76144: CALL_OW 331
// end ;
76148: LD_VAR 0 5
76152: RET
// export function Video ( mode ) ; begin
76153: LD_INT 0
76155: PPUSH
// ingame_video = mode ;
76156: LD_ADDR_OWVAR 52
76160: PUSH
76161: LD_VAR 0 1
76165: ST_TO_ADDR
// interface_hidden = mode ;
76166: LD_ADDR_OWVAR 54
76170: PUSH
76171: LD_VAR 0 1
76175: ST_TO_ADDR
// end ;
76176: LD_VAR 0 2
76180: RET
// export function Join ( array , element ) ; begin
76181: LD_INT 0
76183: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76184: LD_ADDR_VAR 0 3
76188: PUSH
76189: LD_VAR 0 1
76193: PPUSH
76194: LD_VAR 0 1
76198: PUSH
76199: LD_INT 1
76201: PLUS
76202: PPUSH
76203: LD_VAR 0 2
76207: PPUSH
76208: CALL_OW 1
76212: ST_TO_ADDR
// end ;
76213: LD_VAR 0 3
76217: RET
// export function JoinUnion ( array , element ) ; begin
76218: LD_INT 0
76220: PPUSH
// result := array union element ;
76221: LD_ADDR_VAR 0 3
76225: PUSH
76226: LD_VAR 0 1
76230: PUSH
76231: LD_VAR 0 2
76235: UNION
76236: ST_TO_ADDR
// end ;
76237: LD_VAR 0 3
76241: RET
// export function GetBehemoths ( side ) ; begin
76242: LD_INT 0
76244: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76245: LD_ADDR_VAR 0 2
76249: PUSH
76250: LD_INT 22
76252: PUSH
76253: LD_VAR 0 1
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: LD_INT 31
76264: PUSH
76265: LD_INT 25
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: PPUSH
76276: CALL_OW 69
76280: ST_TO_ADDR
// end ;
76281: LD_VAR 0 2
76285: RET
// export function Shuffle ( array ) ; var i , index ; begin
76286: LD_INT 0
76288: PPUSH
76289: PPUSH
76290: PPUSH
// result := [ ] ;
76291: LD_ADDR_VAR 0 2
76295: PUSH
76296: EMPTY
76297: ST_TO_ADDR
// if not array then
76298: LD_VAR 0 1
76302: NOT
76303: IFFALSE 76307
// exit ;
76305: GO 76406
// Randomize ;
76307: CALL_OW 10
// for i = array downto 1 do
76311: LD_ADDR_VAR 0 3
76315: PUSH
76316: DOUBLE
76317: LD_VAR 0 1
76321: INC
76322: ST_TO_ADDR
76323: LD_INT 1
76325: PUSH
76326: FOR_DOWNTO
76327: IFFALSE 76404
// begin index := rand ( 1 , array ) ;
76329: LD_ADDR_VAR 0 4
76333: PUSH
76334: LD_INT 1
76336: PPUSH
76337: LD_VAR 0 1
76341: PPUSH
76342: CALL_OW 12
76346: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76347: LD_ADDR_VAR 0 2
76351: PUSH
76352: LD_VAR 0 2
76356: PPUSH
76357: LD_VAR 0 2
76361: PUSH
76362: LD_INT 1
76364: PLUS
76365: PPUSH
76366: LD_VAR 0 1
76370: PUSH
76371: LD_VAR 0 4
76375: ARRAY
76376: PPUSH
76377: CALL_OW 2
76381: ST_TO_ADDR
// array := Delete ( array , index ) ;
76382: LD_ADDR_VAR 0 1
76386: PUSH
76387: LD_VAR 0 1
76391: PPUSH
76392: LD_VAR 0 4
76396: PPUSH
76397: CALL_OW 3
76401: ST_TO_ADDR
// end ;
76402: GO 76326
76404: POP
76405: POP
// end ;
76406: LD_VAR 0 2
76410: RET
// export function GetBaseMaterials ( base ) ; begin
76411: LD_INT 0
76413: PPUSH
// result := [ 0 , 0 , 0 ] ;
76414: LD_ADDR_VAR 0 2
76418: PUSH
76419: LD_INT 0
76421: PUSH
76422: LD_INT 0
76424: PUSH
76425: LD_INT 0
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: LIST
76432: ST_TO_ADDR
// if not base then
76433: LD_VAR 0 1
76437: NOT
76438: IFFALSE 76442
// exit ;
76440: GO 76491
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76442: LD_ADDR_VAR 0 2
76446: PUSH
76447: LD_VAR 0 1
76451: PPUSH
76452: LD_INT 1
76454: PPUSH
76455: CALL_OW 275
76459: PUSH
76460: LD_VAR 0 1
76464: PPUSH
76465: LD_INT 2
76467: PPUSH
76468: CALL_OW 275
76472: PUSH
76473: LD_VAR 0 1
76477: PPUSH
76478: LD_INT 3
76480: PPUSH
76481: CALL_OW 275
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: LIST
76490: ST_TO_ADDR
// end ;
76491: LD_VAR 0 2
76495: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76496: LD_INT 0
76498: PPUSH
76499: PPUSH
// result := array ;
76500: LD_ADDR_VAR 0 3
76504: PUSH
76505: LD_VAR 0 1
76509: ST_TO_ADDR
// if size >= result then
76510: LD_VAR 0 2
76514: PUSH
76515: LD_VAR 0 3
76519: GREATEREQUAL
76520: IFFALSE 76524
// exit ;
76522: GO 76574
// if size then
76524: LD_VAR 0 2
76528: IFFALSE 76574
// for i := array downto size do
76530: LD_ADDR_VAR 0 4
76534: PUSH
76535: DOUBLE
76536: LD_VAR 0 1
76540: INC
76541: ST_TO_ADDR
76542: LD_VAR 0 2
76546: PUSH
76547: FOR_DOWNTO
76548: IFFALSE 76572
// result := Delete ( result , result ) ;
76550: LD_ADDR_VAR 0 3
76554: PUSH
76555: LD_VAR 0 3
76559: PPUSH
76560: LD_VAR 0 3
76564: PPUSH
76565: CALL_OW 3
76569: ST_TO_ADDR
76570: GO 76547
76572: POP
76573: POP
// end ;
76574: LD_VAR 0 3
76578: RET
// export function ComExit ( unit ) ; var tmp ; begin
76579: LD_INT 0
76581: PPUSH
76582: PPUSH
// if not IsInUnit ( unit ) then
76583: LD_VAR 0 1
76587: PPUSH
76588: CALL_OW 310
76592: NOT
76593: IFFALSE 76597
// exit ;
76595: GO 76657
// tmp := IsInUnit ( unit ) ;
76597: LD_ADDR_VAR 0 3
76601: PUSH
76602: LD_VAR 0 1
76606: PPUSH
76607: CALL_OW 310
76611: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76612: LD_VAR 0 3
76616: PPUSH
76617: CALL_OW 247
76621: PUSH
76622: LD_INT 2
76624: EQUAL
76625: IFFALSE 76638
// ComExitVehicle ( unit ) else
76627: LD_VAR 0 1
76631: PPUSH
76632: CALL_OW 121
76636: GO 76647
// ComExitBuilding ( unit ) ;
76638: LD_VAR 0 1
76642: PPUSH
76643: CALL_OW 122
// result := tmp ;
76647: LD_ADDR_VAR 0 2
76651: PUSH
76652: LD_VAR 0 3
76656: ST_TO_ADDR
// end ;
76657: LD_VAR 0 2
76661: RET
// export function ComExitAll ( units ) ; var i ; begin
76662: LD_INT 0
76664: PPUSH
76665: PPUSH
// if not units then
76666: LD_VAR 0 1
76670: NOT
76671: IFFALSE 76675
// exit ;
76673: GO 76701
// for i in units do
76675: LD_ADDR_VAR 0 3
76679: PUSH
76680: LD_VAR 0 1
76684: PUSH
76685: FOR_IN
76686: IFFALSE 76699
// ComExit ( i ) ;
76688: LD_VAR 0 3
76692: PPUSH
76693: CALL 76579 0 1
76697: GO 76685
76699: POP
76700: POP
// end ;
76701: LD_VAR 0 2
76705: RET
// export function ResetHc ; begin
76706: LD_INT 0
76708: PPUSH
// InitHc ;
76709: CALL_OW 19
// hc_importance := 0 ;
76713: LD_ADDR_OWVAR 32
76717: PUSH
76718: LD_INT 0
76720: ST_TO_ADDR
// end ;
76721: LD_VAR 0 1
76725: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76726: LD_INT 0
76728: PPUSH
76729: PPUSH
76730: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76731: LD_ADDR_VAR 0 6
76735: PUSH
76736: LD_VAR 0 1
76740: PUSH
76741: LD_VAR 0 3
76745: PLUS
76746: PUSH
76747: LD_INT 2
76749: DIV
76750: ST_TO_ADDR
// if _x < 0 then
76751: LD_VAR 0 6
76755: PUSH
76756: LD_INT 0
76758: LESS
76759: IFFALSE 76776
// _x := _x * - 1 ;
76761: LD_ADDR_VAR 0 6
76765: PUSH
76766: LD_VAR 0 6
76770: PUSH
76771: LD_INT 1
76773: NEG
76774: MUL
76775: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76776: LD_ADDR_VAR 0 7
76780: PUSH
76781: LD_VAR 0 2
76785: PUSH
76786: LD_VAR 0 4
76790: PLUS
76791: PUSH
76792: LD_INT 2
76794: DIV
76795: ST_TO_ADDR
// if _y < 0 then
76796: LD_VAR 0 7
76800: PUSH
76801: LD_INT 0
76803: LESS
76804: IFFALSE 76821
// _y := _y * - 1 ;
76806: LD_ADDR_VAR 0 7
76810: PUSH
76811: LD_VAR 0 7
76815: PUSH
76816: LD_INT 1
76818: NEG
76819: MUL
76820: ST_TO_ADDR
// result := [ _x , _y ] ;
76821: LD_ADDR_VAR 0 5
76825: PUSH
76826: LD_VAR 0 6
76830: PUSH
76831: LD_VAR 0 7
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: ST_TO_ADDR
// end ;
76840: LD_VAR 0 5
76844: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76845: LD_INT 0
76847: PPUSH
76848: PPUSH
76849: PPUSH
76850: PPUSH
// task := GetTaskList ( unit ) ;
76851: LD_ADDR_VAR 0 7
76855: PUSH
76856: LD_VAR 0 1
76860: PPUSH
76861: CALL_OW 437
76865: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76866: LD_VAR 0 7
76870: NOT
76871: PUSH
76872: LD_VAR 0 1
76876: PPUSH
76877: LD_VAR 0 2
76881: PPUSH
76882: CALL_OW 308
76886: NOT
76887: AND
76888: IFFALSE 76892
// exit ;
76890: GO 77010
// if IsInArea ( unit , area ) then
76892: LD_VAR 0 1
76896: PPUSH
76897: LD_VAR 0 2
76901: PPUSH
76902: CALL_OW 308
76906: IFFALSE 76924
// begin ComMoveToArea ( unit , goAway ) ;
76908: LD_VAR 0 1
76912: PPUSH
76913: LD_VAR 0 3
76917: PPUSH
76918: CALL_OW 113
// exit ;
76922: GO 77010
// end ; if task [ 1 ] [ 1 ] <> M then
76924: LD_VAR 0 7
76928: PUSH
76929: LD_INT 1
76931: ARRAY
76932: PUSH
76933: LD_INT 1
76935: ARRAY
76936: PUSH
76937: LD_STRING M
76939: NONEQUAL
76940: IFFALSE 76944
// exit ;
76942: GO 77010
// x := task [ 1 ] [ 2 ] ;
76944: LD_ADDR_VAR 0 5
76948: PUSH
76949: LD_VAR 0 7
76953: PUSH
76954: LD_INT 1
76956: ARRAY
76957: PUSH
76958: LD_INT 2
76960: ARRAY
76961: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76962: LD_ADDR_VAR 0 6
76966: PUSH
76967: LD_VAR 0 7
76971: PUSH
76972: LD_INT 1
76974: ARRAY
76975: PUSH
76976: LD_INT 3
76978: ARRAY
76979: ST_TO_ADDR
// if InArea ( x , y , area ) then
76980: LD_VAR 0 5
76984: PPUSH
76985: LD_VAR 0 6
76989: PPUSH
76990: LD_VAR 0 2
76994: PPUSH
76995: CALL_OW 309
76999: IFFALSE 77010
// ComStop ( unit ) ;
77001: LD_VAR 0 1
77005: PPUSH
77006: CALL_OW 141
// end ;
77010: LD_VAR 0 4
77014: RET
// export function Abs ( value ) ; begin
77015: LD_INT 0
77017: PPUSH
// result := value ;
77018: LD_ADDR_VAR 0 2
77022: PUSH
77023: LD_VAR 0 1
77027: ST_TO_ADDR
// if value < 0 then
77028: LD_VAR 0 1
77032: PUSH
77033: LD_INT 0
77035: LESS
77036: IFFALSE 77053
// result := value * - 1 ;
77038: LD_ADDR_VAR 0 2
77042: PUSH
77043: LD_VAR 0 1
77047: PUSH
77048: LD_INT 1
77050: NEG
77051: MUL
77052: ST_TO_ADDR
// end ;
77053: LD_VAR 0 2
77057: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77058: LD_INT 0
77060: PPUSH
77061: PPUSH
77062: PPUSH
77063: PPUSH
77064: PPUSH
77065: PPUSH
77066: PPUSH
77067: PPUSH
// if not unit or not building then
77068: LD_VAR 0 1
77072: NOT
77073: PUSH
77074: LD_VAR 0 2
77078: NOT
77079: OR
77080: IFFALSE 77084
// exit ;
77082: GO 77310
// x := GetX ( building ) ;
77084: LD_ADDR_VAR 0 4
77088: PUSH
77089: LD_VAR 0 2
77093: PPUSH
77094: CALL_OW 250
77098: ST_TO_ADDR
// y := GetY ( building ) ;
77099: LD_ADDR_VAR 0 6
77103: PUSH
77104: LD_VAR 0 2
77108: PPUSH
77109: CALL_OW 251
77113: ST_TO_ADDR
// d := GetDir ( building ) ;
77114: LD_ADDR_VAR 0 8
77118: PUSH
77119: LD_VAR 0 2
77123: PPUSH
77124: CALL_OW 254
77128: ST_TO_ADDR
// r := 4 ;
77129: LD_ADDR_VAR 0 9
77133: PUSH
77134: LD_INT 4
77136: ST_TO_ADDR
// for i := 1 to 5 do
77137: LD_ADDR_VAR 0 10
77141: PUSH
77142: DOUBLE
77143: LD_INT 1
77145: DEC
77146: ST_TO_ADDR
77147: LD_INT 5
77149: PUSH
77150: FOR_TO
77151: IFFALSE 77308
// begin _x := ShiftX ( x , d , r + i ) ;
77153: LD_ADDR_VAR 0 5
77157: PUSH
77158: LD_VAR 0 4
77162: PPUSH
77163: LD_VAR 0 8
77167: PPUSH
77168: LD_VAR 0 9
77172: PUSH
77173: LD_VAR 0 10
77177: PLUS
77178: PPUSH
77179: CALL_OW 272
77183: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77184: LD_ADDR_VAR 0 7
77188: PUSH
77189: LD_VAR 0 6
77193: PPUSH
77194: LD_VAR 0 8
77198: PPUSH
77199: LD_VAR 0 9
77203: PUSH
77204: LD_VAR 0 10
77208: PLUS
77209: PPUSH
77210: CALL_OW 273
77214: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77215: LD_VAR 0 5
77219: PPUSH
77220: LD_VAR 0 7
77224: PPUSH
77225: CALL_OW 488
77229: PUSH
77230: LD_VAR 0 5
77234: PPUSH
77235: LD_VAR 0 7
77239: PPUSH
77240: CALL_OW 428
77244: PPUSH
77245: CALL_OW 247
77249: PUSH
77250: LD_INT 3
77252: PUSH
77253: LD_INT 2
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: IN
77260: NOT
77261: AND
77262: IFFALSE 77306
// begin ComMoveXY ( unit , _x , _y ) ;
77264: LD_VAR 0 1
77268: PPUSH
77269: LD_VAR 0 5
77273: PPUSH
77274: LD_VAR 0 7
77278: PPUSH
77279: CALL_OW 111
// result := [ _x , _y ] ;
77283: LD_ADDR_VAR 0 3
77287: PUSH
77288: LD_VAR 0 5
77292: PUSH
77293: LD_VAR 0 7
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: ST_TO_ADDR
// exit ;
77302: POP
77303: POP
77304: GO 77310
// end ; end ;
77306: GO 77150
77308: POP
77309: POP
// end ;
77310: LD_VAR 0 3
77314: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77315: LD_INT 0
77317: PPUSH
77318: PPUSH
77319: PPUSH
// result := 0 ;
77320: LD_ADDR_VAR 0 3
77324: PUSH
77325: LD_INT 0
77327: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77328: LD_VAR 0 1
77332: PUSH
77333: LD_INT 0
77335: LESS
77336: PUSH
77337: LD_VAR 0 1
77341: PUSH
77342: LD_INT 8
77344: GREATER
77345: OR
77346: PUSH
77347: LD_VAR 0 2
77351: PUSH
77352: LD_INT 0
77354: LESS
77355: OR
77356: PUSH
77357: LD_VAR 0 2
77361: PUSH
77362: LD_INT 8
77364: GREATER
77365: OR
77366: IFFALSE 77370
// exit ;
77368: GO 77445
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77370: LD_ADDR_VAR 0 4
77374: PUSH
77375: LD_INT 22
77377: PUSH
77378: LD_VAR 0 2
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PPUSH
77387: CALL_OW 69
77391: PUSH
77392: FOR_IN
77393: IFFALSE 77443
// begin un := UnitShoot ( i ) ;
77395: LD_ADDR_VAR 0 5
77399: PUSH
77400: LD_VAR 0 4
77404: PPUSH
77405: CALL_OW 504
77409: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77410: LD_VAR 0 5
77414: PPUSH
77415: CALL_OW 255
77419: PUSH
77420: LD_VAR 0 1
77424: EQUAL
77425: IFFALSE 77441
// begin result := un ;
77427: LD_ADDR_VAR 0 3
77431: PUSH
77432: LD_VAR 0 5
77436: ST_TO_ADDR
// exit ;
77437: POP
77438: POP
77439: GO 77445
// end ; end ;
77441: GO 77392
77443: POP
77444: POP
// end ;
77445: LD_VAR 0 3
77449: RET
// export function GetCargoBay ( units ) ; begin
77450: LD_INT 0
77452: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77453: LD_ADDR_VAR 0 2
77457: PUSH
77458: LD_VAR 0 1
77462: PPUSH
77463: LD_INT 2
77465: PUSH
77466: LD_INT 34
77468: PUSH
77469: LD_INT 12
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: PUSH
77476: LD_INT 34
77478: PUSH
77479: LD_INT 51
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: PUSH
77486: LD_INT 34
77488: PUSH
77489: LD_INT 32
77491: PUSH
77492: EMPTY
77493: LIST
77494: LIST
77495: PUSH
77496: LD_INT 34
77498: PUSH
77499: LD_INT 89
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: PPUSH
77513: CALL_OW 72
77517: ST_TO_ADDR
// end ;
77518: LD_VAR 0 2
77522: RET
// export function Negate ( value ) ; begin
77523: LD_INT 0
77525: PPUSH
// result := not value ;
77526: LD_ADDR_VAR 0 2
77530: PUSH
77531: LD_VAR 0 1
77535: NOT
77536: ST_TO_ADDR
// end ;
77537: LD_VAR 0 2
77541: RET
// export function Inc ( value ) ; begin
77542: LD_INT 0
77544: PPUSH
// result := value + 1 ;
77545: LD_ADDR_VAR 0 2
77549: PUSH
77550: LD_VAR 0 1
77554: PUSH
77555: LD_INT 1
77557: PLUS
77558: ST_TO_ADDR
// end ;
77559: LD_VAR 0 2
77563: RET
// export function Dec ( value ) ; begin
77564: LD_INT 0
77566: PPUSH
// result := value - 1 ;
77567: LD_ADDR_VAR 0 2
77571: PUSH
77572: LD_VAR 0 1
77576: PUSH
77577: LD_INT 1
77579: MINUS
77580: ST_TO_ADDR
// end ;
77581: LD_VAR 0 2
77585: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77586: LD_INT 0
77588: PPUSH
77589: PPUSH
77590: PPUSH
77591: PPUSH
77592: PPUSH
77593: PPUSH
77594: PPUSH
77595: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77596: LD_VAR 0 1
77600: PPUSH
77601: LD_VAR 0 2
77605: PPUSH
77606: CALL_OW 488
77610: NOT
77611: PUSH
77612: LD_VAR 0 3
77616: PPUSH
77617: LD_VAR 0 4
77621: PPUSH
77622: CALL_OW 488
77626: NOT
77627: OR
77628: IFFALSE 77641
// begin result := - 1 ;
77630: LD_ADDR_VAR 0 5
77634: PUSH
77635: LD_INT 1
77637: NEG
77638: ST_TO_ADDR
// exit ;
77639: GO 77876
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77641: LD_ADDR_VAR 0 12
77645: PUSH
77646: LD_VAR 0 1
77650: PPUSH
77651: LD_VAR 0 2
77655: PPUSH
77656: LD_VAR 0 3
77660: PPUSH
77661: LD_VAR 0 4
77665: PPUSH
77666: CALL 76726 0 4
77670: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77671: LD_ADDR_VAR 0 11
77675: PUSH
77676: LD_VAR 0 1
77680: PPUSH
77681: LD_VAR 0 2
77685: PPUSH
77686: LD_VAR 0 12
77690: PUSH
77691: LD_INT 1
77693: ARRAY
77694: PPUSH
77695: LD_VAR 0 12
77699: PUSH
77700: LD_INT 2
77702: ARRAY
77703: PPUSH
77704: CALL_OW 298
77708: ST_TO_ADDR
// distance := 9999 ;
77709: LD_ADDR_VAR 0 10
77713: PUSH
77714: LD_INT 9999
77716: ST_TO_ADDR
// for i := 0 to 5 do
77717: LD_ADDR_VAR 0 6
77721: PUSH
77722: DOUBLE
77723: LD_INT 0
77725: DEC
77726: ST_TO_ADDR
77727: LD_INT 5
77729: PUSH
77730: FOR_TO
77731: IFFALSE 77874
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77733: LD_ADDR_VAR 0 7
77737: PUSH
77738: LD_VAR 0 1
77742: PPUSH
77743: LD_VAR 0 6
77747: PPUSH
77748: LD_VAR 0 11
77752: PPUSH
77753: CALL_OW 272
77757: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77758: LD_ADDR_VAR 0 8
77762: PUSH
77763: LD_VAR 0 2
77767: PPUSH
77768: LD_VAR 0 6
77772: PPUSH
77773: LD_VAR 0 11
77777: PPUSH
77778: CALL_OW 273
77782: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77783: LD_VAR 0 7
77787: PPUSH
77788: LD_VAR 0 8
77792: PPUSH
77793: CALL_OW 488
77797: NOT
77798: IFFALSE 77802
// continue ;
77800: GO 77730
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77802: LD_ADDR_VAR 0 9
77806: PUSH
77807: LD_VAR 0 12
77811: PUSH
77812: LD_INT 1
77814: ARRAY
77815: PPUSH
77816: LD_VAR 0 12
77820: PUSH
77821: LD_INT 2
77823: ARRAY
77824: PPUSH
77825: LD_VAR 0 7
77829: PPUSH
77830: LD_VAR 0 8
77834: PPUSH
77835: CALL_OW 298
77839: ST_TO_ADDR
// if tmp < distance then
77840: LD_VAR 0 9
77844: PUSH
77845: LD_VAR 0 10
77849: LESS
77850: IFFALSE 77872
// begin result := i ;
77852: LD_ADDR_VAR 0 5
77856: PUSH
77857: LD_VAR 0 6
77861: ST_TO_ADDR
// distance := tmp ;
77862: LD_ADDR_VAR 0 10
77866: PUSH
77867: LD_VAR 0 9
77871: ST_TO_ADDR
// end ; end ;
77872: GO 77730
77874: POP
77875: POP
// end ;
77876: LD_VAR 0 5
77880: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77881: LD_INT 0
77883: PPUSH
77884: PPUSH
// if not driver or not IsInUnit ( driver ) then
77885: LD_VAR 0 1
77889: NOT
77890: PUSH
77891: LD_VAR 0 1
77895: PPUSH
77896: CALL_OW 310
77900: NOT
77901: OR
77902: IFFALSE 77906
// exit ;
77904: GO 77996
// vehicle := IsInUnit ( driver ) ;
77906: LD_ADDR_VAR 0 3
77910: PUSH
77911: LD_VAR 0 1
77915: PPUSH
77916: CALL_OW 310
77920: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77921: LD_VAR 0 1
77925: PPUSH
77926: LD_STRING \
77928: PUSH
77929: LD_INT 0
77931: PUSH
77932: LD_INT 0
77934: PUSH
77935: LD_INT 0
77937: PUSH
77938: LD_INT 0
77940: PUSH
77941: LD_INT 0
77943: PUSH
77944: LD_INT 0
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: LIST
77954: LIST
77955: PUSH
77956: LD_STRING E
77958: PUSH
77959: LD_INT 0
77961: PUSH
77962: LD_INT 0
77964: PUSH
77965: LD_VAR 0 3
77969: PUSH
77970: LD_INT 0
77972: PUSH
77973: LD_INT 0
77975: PUSH
77976: LD_INT 0
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: PUSH
77988: EMPTY
77989: LIST
77990: LIST
77991: PPUSH
77992: CALL_OW 446
// end ;
77996: LD_VAR 0 2
78000: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78001: LD_INT 0
78003: PPUSH
78004: PPUSH
// if not driver or not IsInUnit ( driver ) then
78005: LD_VAR 0 1
78009: NOT
78010: PUSH
78011: LD_VAR 0 1
78015: PPUSH
78016: CALL_OW 310
78020: NOT
78021: OR
78022: IFFALSE 78026
// exit ;
78024: GO 78116
// vehicle := IsInUnit ( driver ) ;
78026: LD_ADDR_VAR 0 3
78030: PUSH
78031: LD_VAR 0 1
78035: PPUSH
78036: CALL_OW 310
78040: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78041: LD_VAR 0 1
78045: PPUSH
78046: LD_STRING \
78048: PUSH
78049: LD_INT 0
78051: PUSH
78052: LD_INT 0
78054: PUSH
78055: LD_INT 0
78057: PUSH
78058: LD_INT 0
78060: PUSH
78061: LD_INT 0
78063: PUSH
78064: LD_INT 0
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: LIST
78075: PUSH
78076: LD_STRING E
78078: PUSH
78079: LD_INT 0
78081: PUSH
78082: LD_INT 0
78084: PUSH
78085: LD_VAR 0 3
78089: PUSH
78090: LD_INT 0
78092: PUSH
78093: LD_INT 0
78095: PUSH
78096: LD_INT 0
78098: PUSH
78099: EMPTY
78100: LIST
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: PPUSH
78112: CALL_OW 447
// end ;
78116: LD_VAR 0 2
78120: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78121: LD_INT 0
78123: PPUSH
78124: PPUSH
78125: PPUSH
// tmp := [ ] ;
78126: LD_ADDR_VAR 0 5
78130: PUSH
78131: EMPTY
78132: ST_TO_ADDR
// for i in units do
78133: LD_ADDR_VAR 0 4
78137: PUSH
78138: LD_VAR 0 1
78142: PUSH
78143: FOR_IN
78144: IFFALSE 78182
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78146: LD_ADDR_VAR 0 5
78150: PUSH
78151: LD_VAR 0 5
78155: PPUSH
78156: LD_VAR 0 5
78160: PUSH
78161: LD_INT 1
78163: PLUS
78164: PPUSH
78165: LD_VAR 0 4
78169: PPUSH
78170: CALL_OW 256
78174: PPUSH
78175: CALL_OW 2
78179: ST_TO_ADDR
78180: GO 78143
78182: POP
78183: POP
// if not tmp then
78184: LD_VAR 0 5
78188: NOT
78189: IFFALSE 78193
// exit ;
78191: GO 78241
// if asc then
78193: LD_VAR 0 2
78197: IFFALSE 78221
// result := SortListByListAsc ( units , tmp ) else
78199: LD_ADDR_VAR 0 3
78203: PUSH
78204: LD_VAR 0 1
78208: PPUSH
78209: LD_VAR 0 5
78213: PPUSH
78214: CALL_OW 76
78218: ST_TO_ADDR
78219: GO 78241
// result := SortListByListDesc ( units , tmp ) ;
78221: LD_ADDR_VAR 0 3
78225: PUSH
78226: LD_VAR 0 1
78230: PPUSH
78231: LD_VAR 0 5
78235: PPUSH
78236: CALL_OW 77
78240: ST_TO_ADDR
// end ;
78241: LD_VAR 0 3
78245: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78246: LD_INT 0
78248: PPUSH
78249: PPUSH
// task := GetTaskList ( mech ) ;
78250: LD_ADDR_VAR 0 4
78254: PUSH
78255: LD_VAR 0 1
78259: PPUSH
78260: CALL_OW 437
78264: ST_TO_ADDR
// if not task then
78265: LD_VAR 0 4
78269: NOT
78270: IFFALSE 78274
// exit ;
78272: GO 78316
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78274: LD_ADDR_VAR 0 3
78278: PUSH
78279: LD_VAR 0 4
78283: PUSH
78284: LD_INT 1
78286: ARRAY
78287: PUSH
78288: LD_INT 1
78290: ARRAY
78291: PUSH
78292: LD_STRING r
78294: EQUAL
78295: PUSH
78296: LD_VAR 0 4
78300: PUSH
78301: LD_INT 1
78303: ARRAY
78304: PUSH
78305: LD_INT 4
78307: ARRAY
78308: PUSH
78309: LD_VAR 0 2
78313: EQUAL
78314: AND
78315: ST_TO_ADDR
// end ;
78316: LD_VAR 0 3
78320: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78321: LD_INT 0
78323: PPUSH
// SetDir ( unit , d ) ;
78324: LD_VAR 0 1
78328: PPUSH
78329: LD_VAR 0 4
78333: PPUSH
78334: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78338: LD_VAR 0 1
78342: PPUSH
78343: LD_VAR 0 2
78347: PPUSH
78348: LD_VAR 0 3
78352: PPUSH
78353: LD_VAR 0 5
78357: PPUSH
78358: CALL_OW 48
// end ;
78362: LD_VAR 0 6
78366: RET
// export function ToNaturalNumber ( number ) ; begin
78367: LD_INT 0
78369: PPUSH
// result := number div 1 ;
78370: LD_ADDR_VAR 0 2
78374: PUSH
78375: LD_VAR 0 1
78379: PUSH
78380: LD_INT 1
78382: DIV
78383: ST_TO_ADDR
// if number < 0 then
78384: LD_VAR 0 1
78388: PUSH
78389: LD_INT 0
78391: LESS
78392: IFFALSE 78402
// result := 0 ;
78394: LD_ADDR_VAR 0 2
78398: PUSH
78399: LD_INT 0
78401: ST_TO_ADDR
// end ;
78402: LD_VAR 0 2
78406: RET
// export function SortByClass ( units , class ) ; var un ; begin
78407: LD_INT 0
78409: PPUSH
78410: PPUSH
// if not units or not class then
78411: LD_VAR 0 1
78415: NOT
78416: PUSH
78417: LD_VAR 0 2
78421: NOT
78422: OR
78423: IFFALSE 78427
// exit ;
78425: GO 78522
// result := [ ] ;
78427: LD_ADDR_VAR 0 3
78431: PUSH
78432: EMPTY
78433: ST_TO_ADDR
// for un in units do
78434: LD_ADDR_VAR 0 4
78438: PUSH
78439: LD_VAR 0 1
78443: PUSH
78444: FOR_IN
78445: IFFALSE 78520
// if GetClass ( un ) = class then
78447: LD_VAR 0 4
78451: PPUSH
78452: CALL_OW 257
78456: PUSH
78457: LD_VAR 0 2
78461: EQUAL
78462: IFFALSE 78489
// result := Insert ( result , 1 , un ) else
78464: LD_ADDR_VAR 0 3
78468: PUSH
78469: LD_VAR 0 3
78473: PPUSH
78474: LD_INT 1
78476: PPUSH
78477: LD_VAR 0 4
78481: PPUSH
78482: CALL_OW 2
78486: ST_TO_ADDR
78487: GO 78518
// result := Replace ( result , result + 1 , un ) ;
78489: LD_ADDR_VAR 0 3
78493: PUSH
78494: LD_VAR 0 3
78498: PPUSH
78499: LD_VAR 0 3
78503: PUSH
78504: LD_INT 1
78506: PLUS
78507: PPUSH
78508: LD_VAR 0 4
78512: PPUSH
78513: CALL_OW 1
78517: ST_TO_ADDR
78518: GO 78444
78520: POP
78521: POP
// end ;
78522: LD_VAR 0 3
78526: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78527: LD_INT 0
78529: PPUSH
78530: PPUSH
78531: PPUSH
78532: PPUSH
78533: PPUSH
78534: PPUSH
78535: PPUSH
// result := [ ] ;
78536: LD_ADDR_VAR 0 4
78540: PUSH
78541: EMPTY
78542: ST_TO_ADDR
// if x - r < 0 then
78543: LD_VAR 0 1
78547: PUSH
78548: LD_VAR 0 3
78552: MINUS
78553: PUSH
78554: LD_INT 0
78556: LESS
78557: IFFALSE 78569
// min_x := 0 else
78559: LD_ADDR_VAR 0 8
78563: PUSH
78564: LD_INT 0
78566: ST_TO_ADDR
78567: GO 78585
// min_x := x - r ;
78569: LD_ADDR_VAR 0 8
78573: PUSH
78574: LD_VAR 0 1
78578: PUSH
78579: LD_VAR 0 3
78583: MINUS
78584: ST_TO_ADDR
// if y - r < 0 then
78585: LD_VAR 0 2
78589: PUSH
78590: LD_VAR 0 3
78594: MINUS
78595: PUSH
78596: LD_INT 0
78598: LESS
78599: IFFALSE 78611
// min_y := 0 else
78601: LD_ADDR_VAR 0 7
78605: PUSH
78606: LD_INT 0
78608: ST_TO_ADDR
78609: GO 78627
// min_y := y - r ;
78611: LD_ADDR_VAR 0 7
78615: PUSH
78616: LD_VAR 0 2
78620: PUSH
78621: LD_VAR 0 3
78625: MINUS
78626: ST_TO_ADDR
// max_x := x + r ;
78627: LD_ADDR_VAR 0 9
78631: PUSH
78632: LD_VAR 0 1
78636: PUSH
78637: LD_VAR 0 3
78641: PLUS
78642: ST_TO_ADDR
// max_y := y + r ;
78643: LD_ADDR_VAR 0 10
78647: PUSH
78648: LD_VAR 0 2
78652: PUSH
78653: LD_VAR 0 3
78657: PLUS
78658: ST_TO_ADDR
// for _x = min_x to max_x do
78659: LD_ADDR_VAR 0 5
78663: PUSH
78664: DOUBLE
78665: LD_VAR 0 8
78669: DEC
78670: ST_TO_ADDR
78671: LD_VAR 0 9
78675: PUSH
78676: FOR_TO
78677: IFFALSE 78778
// for _y = min_y to max_y do
78679: LD_ADDR_VAR 0 6
78683: PUSH
78684: DOUBLE
78685: LD_VAR 0 7
78689: DEC
78690: ST_TO_ADDR
78691: LD_VAR 0 10
78695: PUSH
78696: FOR_TO
78697: IFFALSE 78774
// begin if not ValidHex ( _x , _y ) then
78699: LD_VAR 0 5
78703: PPUSH
78704: LD_VAR 0 6
78708: PPUSH
78709: CALL_OW 488
78713: NOT
78714: IFFALSE 78718
// continue ;
78716: GO 78696
// if GetResourceTypeXY ( _x , _y ) then
78718: LD_VAR 0 5
78722: PPUSH
78723: LD_VAR 0 6
78727: PPUSH
78728: CALL_OW 283
78732: IFFALSE 78772
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78734: LD_ADDR_VAR 0 4
78738: PUSH
78739: LD_VAR 0 4
78743: PPUSH
78744: LD_VAR 0 4
78748: PUSH
78749: LD_INT 1
78751: PLUS
78752: PPUSH
78753: LD_VAR 0 5
78757: PUSH
78758: LD_VAR 0 6
78762: PUSH
78763: EMPTY
78764: LIST
78765: LIST
78766: PPUSH
78767: CALL_OW 1
78771: ST_TO_ADDR
// end ;
78772: GO 78696
78774: POP
78775: POP
78776: GO 78676
78778: POP
78779: POP
// end ;
78780: LD_VAR 0 4
78784: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78785: LD_INT 0
78787: PPUSH
78788: PPUSH
78789: PPUSH
78790: PPUSH
78791: PPUSH
78792: PPUSH
78793: PPUSH
78794: PPUSH
// if not units then
78795: LD_VAR 0 1
78799: NOT
78800: IFFALSE 78804
// exit ;
78802: GO 79328
// result := UnitFilter ( units , [ f_ok ] ) ;
78804: LD_ADDR_VAR 0 3
78808: PUSH
78809: LD_VAR 0 1
78813: PPUSH
78814: LD_INT 50
78816: PUSH
78817: EMPTY
78818: LIST
78819: PPUSH
78820: CALL_OW 72
78824: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78825: LD_ADDR_VAR 0 8
78829: PUSH
78830: LD_VAR 0 1
78834: PUSH
78835: LD_INT 1
78837: ARRAY
78838: PPUSH
78839: CALL_OW 255
78843: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78844: LD_ADDR_VAR 0 10
78848: PUSH
78849: LD_INT 29
78851: PUSH
78852: LD_INT 91
78854: PUSH
78855: LD_INT 49
78857: PUSH
78858: EMPTY
78859: LIST
78860: LIST
78861: LIST
78862: ST_TO_ADDR
// if not result then
78863: LD_VAR 0 3
78867: NOT
78868: IFFALSE 78872
// exit ;
78870: GO 79328
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78872: LD_ADDR_VAR 0 5
78876: PUSH
78877: LD_INT 81
78879: PUSH
78880: LD_VAR 0 8
78884: PUSH
78885: EMPTY
78886: LIST
78887: LIST
78888: PPUSH
78889: CALL_OW 69
78893: ST_TO_ADDR
// for i in result do
78894: LD_ADDR_VAR 0 4
78898: PUSH
78899: LD_VAR 0 3
78903: PUSH
78904: FOR_IN
78905: IFFALSE 79326
// begin tag := GetTag ( i ) + 1 ;
78907: LD_ADDR_VAR 0 9
78911: PUSH
78912: LD_VAR 0 4
78916: PPUSH
78917: CALL_OW 110
78921: PUSH
78922: LD_INT 1
78924: PLUS
78925: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78926: LD_ADDR_VAR 0 7
78930: PUSH
78931: LD_VAR 0 4
78935: PPUSH
78936: CALL_OW 250
78940: PPUSH
78941: LD_VAR 0 4
78945: PPUSH
78946: CALL_OW 251
78950: PPUSH
78951: LD_INT 6
78953: PPUSH
78954: CALL 78527 0 3
78958: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78959: LD_VAR 0 4
78963: PPUSH
78964: CALL_OW 247
78968: PUSH
78969: LD_INT 2
78971: EQUAL
78972: PUSH
78973: LD_VAR 0 7
78977: AND
78978: PUSH
78979: LD_VAR 0 4
78983: PPUSH
78984: CALL_OW 264
78988: PUSH
78989: LD_VAR 0 10
78993: IN
78994: NOT
78995: AND
78996: IFFALSE 79035
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78998: LD_VAR 0 4
79002: PPUSH
79003: LD_VAR 0 7
79007: PUSH
79008: LD_INT 1
79010: ARRAY
79011: PUSH
79012: LD_INT 1
79014: ARRAY
79015: PPUSH
79016: LD_VAR 0 7
79020: PUSH
79021: LD_INT 1
79023: ARRAY
79024: PUSH
79025: LD_INT 2
79027: ARRAY
79028: PPUSH
79029: CALL_OW 116
79033: GO 79324
// if path > tag then
79035: LD_VAR 0 2
79039: PUSH
79040: LD_VAR 0 9
79044: GREATER
79045: IFFALSE 79253
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79047: LD_ADDR_VAR 0 6
79051: PUSH
79052: LD_VAR 0 5
79056: PPUSH
79057: LD_INT 91
79059: PUSH
79060: LD_VAR 0 4
79064: PUSH
79065: LD_INT 8
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: LIST
79072: PPUSH
79073: CALL_OW 72
79077: ST_TO_ADDR
// if nearEnemy then
79078: LD_VAR 0 6
79082: IFFALSE 79151
// begin if GetWeapon ( i ) = ru_time_lapser then
79084: LD_VAR 0 4
79088: PPUSH
79089: CALL_OW 264
79093: PUSH
79094: LD_INT 49
79096: EQUAL
79097: IFFALSE 79125
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79099: LD_VAR 0 4
79103: PPUSH
79104: LD_VAR 0 6
79108: PPUSH
79109: LD_VAR 0 4
79113: PPUSH
79114: CALL_OW 74
79118: PPUSH
79119: CALL_OW 112
79123: GO 79149
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79125: LD_VAR 0 4
79129: PPUSH
79130: LD_VAR 0 6
79134: PPUSH
79135: LD_VAR 0 4
79139: PPUSH
79140: CALL_OW 74
79144: PPUSH
79145: CALL 80253 0 2
// end else
79149: GO 79251
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79151: LD_VAR 0 4
79155: PPUSH
79156: LD_VAR 0 2
79160: PUSH
79161: LD_VAR 0 9
79165: ARRAY
79166: PUSH
79167: LD_INT 1
79169: ARRAY
79170: PPUSH
79171: LD_VAR 0 2
79175: PUSH
79176: LD_VAR 0 9
79180: ARRAY
79181: PUSH
79182: LD_INT 2
79184: ARRAY
79185: PPUSH
79186: CALL_OW 297
79190: PUSH
79191: LD_INT 6
79193: GREATER
79194: IFFALSE 79237
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79196: LD_VAR 0 4
79200: PPUSH
79201: LD_VAR 0 2
79205: PUSH
79206: LD_VAR 0 9
79210: ARRAY
79211: PUSH
79212: LD_INT 1
79214: ARRAY
79215: PPUSH
79216: LD_VAR 0 2
79220: PUSH
79221: LD_VAR 0 9
79225: ARRAY
79226: PUSH
79227: LD_INT 2
79229: ARRAY
79230: PPUSH
79231: CALL_OW 114
79235: GO 79251
// SetTag ( i , tag ) ;
79237: LD_VAR 0 4
79241: PPUSH
79242: LD_VAR 0 9
79246: PPUSH
79247: CALL_OW 109
// end else
79251: GO 79324
// if enemy then
79253: LD_VAR 0 5
79257: IFFALSE 79324
// begin if GetWeapon ( i ) = ru_time_lapser then
79259: LD_VAR 0 4
79263: PPUSH
79264: CALL_OW 264
79268: PUSH
79269: LD_INT 49
79271: EQUAL
79272: IFFALSE 79300
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79274: LD_VAR 0 4
79278: PPUSH
79279: LD_VAR 0 5
79283: PPUSH
79284: LD_VAR 0 4
79288: PPUSH
79289: CALL_OW 74
79293: PPUSH
79294: CALL_OW 112
79298: GO 79324
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79300: LD_VAR 0 4
79304: PPUSH
79305: LD_VAR 0 5
79309: PPUSH
79310: LD_VAR 0 4
79314: PPUSH
79315: CALL_OW 74
79319: PPUSH
79320: CALL 80253 0 2
// end ; end ;
79324: GO 78904
79326: POP
79327: POP
// end ;
79328: LD_VAR 0 3
79332: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79333: LD_INT 0
79335: PPUSH
79336: PPUSH
79337: PPUSH
// if not unit or IsInUnit ( unit ) then
79338: LD_VAR 0 1
79342: NOT
79343: PUSH
79344: LD_VAR 0 1
79348: PPUSH
79349: CALL_OW 310
79353: OR
79354: IFFALSE 79358
// exit ;
79356: GO 79449
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79358: LD_ADDR_VAR 0 4
79362: PUSH
79363: LD_VAR 0 1
79367: PPUSH
79368: CALL_OW 250
79372: PPUSH
79373: LD_VAR 0 2
79377: PPUSH
79378: LD_INT 1
79380: PPUSH
79381: CALL_OW 272
79385: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79386: LD_ADDR_VAR 0 5
79390: PUSH
79391: LD_VAR 0 1
79395: PPUSH
79396: CALL_OW 251
79400: PPUSH
79401: LD_VAR 0 2
79405: PPUSH
79406: LD_INT 1
79408: PPUSH
79409: CALL_OW 273
79413: ST_TO_ADDR
// if ValidHex ( x , y ) then
79414: LD_VAR 0 4
79418: PPUSH
79419: LD_VAR 0 5
79423: PPUSH
79424: CALL_OW 488
79428: IFFALSE 79449
// ComTurnXY ( unit , x , y ) ;
79430: LD_VAR 0 1
79434: PPUSH
79435: LD_VAR 0 4
79439: PPUSH
79440: LD_VAR 0 5
79444: PPUSH
79445: CALL_OW 118
// end ;
79449: LD_VAR 0 3
79453: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79454: LD_INT 0
79456: PPUSH
79457: PPUSH
// result := false ;
79458: LD_ADDR_VAR 0 3
79462: PUSH
79463: LD_INT 0
79465: ST_TO_ADDR
// if not units then
79466: LD_VAR 0 2
79470: NOT
79471: IFFALSE 79475
// exit ;
79473: GO 79520
// for i in units do
79475: LD_ADDR_VAR 0 4
79479: PUSH
79480: LD_VAR 0 2
79484: PUSH
79485: FOR_IN
79486: IFFALSE 79518
// if See ( side , i ) then
79488: LD_VAR 0 1
79492: PPUSH
79493: LD_VAR 0 4
79497: PPUSH
79498: CALL_OW 292
79502: IFFALSE 79516
// begin result := true ;
79504: LD_ADDR_VAR 0 3
79508: PUSH
79509: LD_INT 1
79511: ST_TO_ADDR
// exit ;
79512: POP
79513: POP
79514: GO 79520
// end ;
79516: GO 79485
79518: POP
79519: POP
// end ;
79520: LD_VAR 0 3
79524: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79525: LD_INT 0
79527: PPUSH
79528: PPUSH
79529: PPUSH
79530: PPUSH
// if not unit or not points then
79531: LD_VAR 0 1
79535: NOT
79536: PUSH
79537: LD_VAR 0 2
79541: NOT
79542: OR
79543: IFFALSE 79547
// exit ;
79545: GO 79637
// dist := 99999 ;
79547: LD_ADDR_VAR 0 5
79551: PUSH
79552: LD_INT 99999
79554: ST_TO_ADDR
// for i in points do
79555: LD_ADDR_VAR 0 4
79559: PUSH
79560: LD_VAR 0 2
79564: PUSH
79565: FOR_IN
79566: IFFALSE 79635
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79568: LD_ADDR_VAR 0 6
79572: PUSH
79573: LD_VAR 0 1
79577: PPUSH
79578: LD_VAR 0 4
79582: PUSH
79583: LD_INT 1
79585: ARRAY
79586: PPUSH
79587: LD_VAR 0 4
79591: PUSH
79592: LD_INT 2
79594: ARRAY
79595: PPUSH
79596: CALL_OW 297
79600: ST_TO_ADDR
// if tmpDist < dist then
79601: LD_VAR 0 6
79605: PUSH
79606: LD_VAR 0 5
79610: LESS
79611: IFFALSE 79633
// begin result := i ;
79613: LD_ADDR_VAR 0 3
79617: PUSH
79618: LD_VAR 0 4
79622: ST_TO_ADDR
// dist := tmpDist ;
79623: LD_ADDR_VAR 0 5
79627: PUSH
79628: LD_VAR 0 6
79632: ST_TO_ADDR
// end ; end ;
79633: GO 79565
79635: POP
79636: POP
// end ;
79637: LD_VAR 0 3
79641: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79642: LD_INT 0
79644: PPUSH
// uc_side := side ;
79645: LD_ADDR_OWVAR 20
79649: PUSH
79650: LD_VAR 0 1
79654: ST_TO_ADDR
// uc_nation := 3 ;
79655: LD_ADDR_OWVAR 21
79659: PUSH
79660: LD_INT 3
79662: ST_TO_ADDR
// vc_chassis := 25 ;
79663: LD_ADDR_OWVAR 37
79667: PUSH
79668: LD_INT 25
79670: ST_TO_ADDR
// vc_engine := engine_siberite ;
79671: LD_ADDR_OWVAR 39
79675: PUSH
79676: LD_INT 3
79678: ST_TO_ADDR
// vc_control := control_computer ;
79679: LD_ADDR_OWVAR 38
79683: PUSH
79684: LD_INT 3
79686: ST_TO_ADDR
// vc_weapon := 59 ;
79687: LD_ADDR_OWVAR 40
79691: PUSH
79692: LD_INT 59
79694: ST_TO_ADDR
// result := CreateVehicle ;
79695: LD_ADDR_VAR 0 5
79699: PUSH
79700: CALL_OW 45
79704: ST_TO_ADDR
// SetDir ( result , d ) ;
79705: LD_VAR 0 5
79709: PPUSH
79710: LD_VAR 0 4
79714: PPUSH
79715: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79719: LD_VAR 0 5
79723: PPUSH
79724: LD_VAR 0 2
79728: PPUSH
79729: LD_VAR 0 3
79733: PPUSH
79734: LD_INT 0
79736: PPUSH
79737: CALL_OW 48
// end ;
79741: LD_VAR 0 5
79745: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79746: LD_INT 0
79748: PPUSH
79749: PPUSH
79750: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79751: LD_ADDR_VAR 0 2
79755: PUSH
79756: LD_INT 0
79758: PUSH
79759: LD_INT 0
79761: PUSH
79762: LD_INT 0
79764: PUSH
79765: LD_INT 0
79767: PUSH
79768: EMPTY
79769: LIST
79770: LIST
79771: LIST
79772: LIST
79773: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79774: LD_VAR 0 1
79778: NOT
79779: PUSH
79780: LD_VAR 0 1
79784: PPUSH
79785: CALL_OW 264
79789: PUSH
79790: LD_INT 12
79792: PUSH
79793: LD_INT 51
79795: PUSH
79796: LD_INT 32
79798: PUSH
79799: LD_INT 89
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: LIST
79806: LIST
79807: IN
79808: NOT
79809: OR
79810: IFFALSE 79814
// exit ;
79812: GO 79912
// for i := 1 to 3 do
79814: LD_ADDR_VAR 0 3
79818: PUSH
79819: DOUBLE
79820: LD_INT 1
79822: DEC
79823: ST_TO_ADDR
79824: LD_INT 3
79826: PUSH
79827: FOR_TO
79828: IFFALSE 79910
// begin tmp := GetCargo ( cargo , i ) ;
79830: LD_ADDR_VAR 0 4
79834: PUSH
79835: LD_VAR 0 1
79839: PPUSH
79840: LD_VAR 0 3
79844: PPUSH
79845: CALL_OW 289
79849: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79850: LD_ADDR_VAR 0 2
79854: PUSH
79855: LD_VAR 0 2
79859: PPUSH
79860: LD_VAR 0 3
79864: PPUSH
79865: LD_VAR 0 4
79869: PPUSH
79870: CALL_OW 1
79874: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79875: LD_ADDR_VAR 0 2
79879: PUSH
79880: LD_VAR 0 2
79884: PPUSH
79885: LD_INT 4
79887: PPUSH
79888: LD_VAR 0 2
79892: PUSH
79893: LD_INT 4
79895: ARRAY
79896: PUSH
79897: LD_VAR 0 4
79901: PLUS
79902: PPUSH
79903: CALL_OW 1
79907: ST_TO_ADDR
// end ;
79908: GO 79827
79910: POP
79911: POP
// end ;
79912: LD_VAR 0 2
79916: RET
// export function Length ( array ) ; begin
79917: LD_INT 0
79919: PPUSH
// result := array + 0 ;
79920: LD_ADDR_VAR 0 2
79924: PUSH
79925: LD_VAR 0 1
79929: PUSH
79930: LD_INT 0
79932: PLUS
79933: ST_TO_ADDR
// end ;
79934: LD_VAR 0 2
79938: RET
// export function PrepareArray ( array ) ; begin
79939: LD_INT 0
79941: PPUSH
// result := array diff 0 ;
79942: LD_ADDR_VAR 0 2
79946: PUSH
79947: LD_VAR 0 1
79951: PUSH
79952: LD_INT 0
79954: DIFF
79955: ST_TO_ADDR
// if not result [ 1 ] then
79956: LD_VAR 0 2
79960: PUSH
79961: LD_INT 1
79963: ARRAY
79964: NOT
79965: IFFALSE 79985
// result := Delete ( result , 1 ) ;
79967: LD_ADDR_VAR 0 2
79971: PUSH
79972: LD_VAR 0 2
79976: PPUSH
79977: LD_INT 1
79979: PPUSH
79980: CALL_OW 3
79984: ST_TO_ADDR
// end ;
79985: LD_VAR 0 2
79989: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79990: LD_INT 0
79992: PPUSH
79993: PPUSH
79994: PPUSH
79995: PPUSH
// sibRocketRange := 25 ;
79996: LD_ADDR_VAR 0 6
80000: PUSH
80001: LD_INT 25
80003: ST_TO_ADDR
// result := false ;
80004: LD_ADDR_VAR 0 4
80008: PUSH
80009: LD_INT 0
80011: ST_TO_ADDR
// for i := 0 to 5 do
80012: LD_ADDR_VAR 0 5
80016: PUSH
80017: DOUBLE
80018: LD_INT 0
80020: DEC
80021: ST_TO_ADDR
80022: LD_INT 5
80024: PUSH
80025: FOR_TO
80026: IFFALSE 80093
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80028: LD_VAR 0 1
80032: PPUSH
80033: LD_VAR 0 5
80037: PPUSH
80038: LD_VAR 0 6
80042: PPUSH
80043: CALL_OW 272
80047: PPUSH
80048: LD_VAR 0 2
80052: PPUSH
80053: LD_VAR 0 5
80057: PPUSH
80058: LD_VAR 0 6
80062: PPUSH
80063: CALL_OW 273
80067: PPUSH
80068: LD_VAR 0 3
80072: PPUSH
80073: CALL_OW 309
80077: IFFALSE 80091
// begin result := true ;
80079: LD_ADDR_VAR 0 4
80083: PUSH
80084: LD_INT 1
80086: ST_TO_ADDR
// exit ;
80087: POP
80088: POP
80089: GO 80095
// end ;
80091: GO 80025
80093: POP
80094: POP
// end ;
80095: LD_VAR 0 4
80099: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80100: LD_INT 0
80102: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80103: LD_VAR 0 1
80107: PPUSH
80108: LD_VAR 0 2
80112: PPUSH
80113: LD_INT 0
80115: PPUSH
80116: LD_INT 0
80118: PPUSH
80119: LD_INT 1
80121: PPUSH
80122: LD_INT 0
80124: PPUSH
80125: CALL_OW 587
// end ;
80129: LD_VAR 0 3
80133: RET
// export function CenterOnNow ( unit ) ; begin
80134: LD_INT 0
80136: PPUSH
// result := IsInUnit ( unit ) ;
80137: LD_ADDR_VAR 0 2
80141: PUSH
80142: LD_VAR 0 1
80146: PPUSH
80147: CALL_OW 310
80151: ST_TO_ADDR
// if not result then
80152: LD_VAR 0 2
80156: NOT
80157: IFFALSE 80169
// result := unit ;
80159: LD_ADDR_VAR 0 2
80163: PUSH
80164: LD_VAR 0 1
80168: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80169: LD_VAR 0 1
80173: PPUSH
80174: CALL_OW 87
// end ;
80178: LD_VAR 0 2
80182: RET
// export function ComMoveHex ( unit , hex ) ; begin
80183: LD_INT 0
80185: PPUSH
// if not hex then
80186: LD_VAR 0 2
80190: NOT
80191: IFFALSE 80195
// exit ;
80193: GO 80248
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80195: LD_VAR 0 2
80199: PUSH
80200: LD_INT 1
80202: ARRAY
80203: PPUSH
80204: LD_VAR 0 2
80208: PUSH
80209: LD_INT 2
80211: ARRAY
80212: PPUSH
80213: CALL_OW 428
80217: IFFALSE 80221
// exit ;
80219: GO 80248
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80221: LD_VAR 0 1
80225: PPUSH
80226: LD_VAR 0 2
80230: PUSH
80231: LD_INT 1
80233: ARRAY
80234: PPUSH
80235: LD_VAR 0 2
80239: PUSH
80240: LD_INT 2
80242: ARRAY
80243: PPUSH
80244: CALL_OW 111
// end ;
80248: LD_VAR 0 3
80252: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80253: LD_INT 0
80255: PPUSH
80256: PPUSH
80257: PPUSH
// if not unit or not enemy then
80258: LD_VAR 0 1
80262: NOT
80263: PUSH
80264: LD_VAR 0 2
80268: NOT
80269: OR
80270: IFFALSE 80274
// exit ;
80272: GO 80398
// x := GetX ( enemy ) ;
80274: LD_ADDR_VAR 0 4
80278: PUSH
80279: LD_VAR 0 2
80283: PPUSH
80284: CALL_OW 250
80288: ST_TO_ADDR
// y := GetY ( enemy ) ;
80289: LD_ADDR_VAR 0 5
80293: PUSH
80294: LD_VAR 0 2
80298: PPUSH
80299: CALL_OW 251
80303: ST_TO_ADDR
// if ValidHex ( x , y ) then
80304: LD_VAR 0 4
80308: PPUSH
80309: LD_VAR 0 5
80313: PPUSH
80314: CALL_OW 488
80318: IFFALSE 80398
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
80320: LD_VAR 0 2
80324: PPUSH
80325: CALL_OW 247
80329: PUSH
80330: LD_INT 3
80332: PUSH
80333: LD_INT 2
80335: PUSH
80336: EMPTY
80337: LIST
80338: LIST
80339: IN
80340: PUSH
80341: LD_VAR 0 1
80345: PPUSH
80346: CALL_OW 255
80350: PPUSH
80351: LD_VAR 0 2
80355: PPUSH
80356: CALL_OW 292
80360: AND
80361: IFFALSE 80379
// ComAttackUnit ( unit , enemy ) else
80363: LD_VAR 0 1
80367: PPUSH
80368: LD_VAR 0 2
80372: PPUSH
80373: CALL_OW 115
80377: GO 80398
// ComAgressiveMove ( unit , x , y ) ;
80379: LD_VAR 0 1
80383: PPUSH
80384: LD_VAR 0 4
80388: PPUSH
80389: LD_VAR 0 5
80393: PPUSH
80394: CALL_OW 114
// end ;
80398: LD_VAR 0 3
80402: RET
