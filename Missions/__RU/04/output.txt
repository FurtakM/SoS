// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1495 0 0
// Nef_PrepareNature ;
 250: CALL 4397 0 0
// MissionIntro ;
 254: CALL 10406 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: LD_OWVAR 67
 407: ARRAY
 408: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 409: LD_ADDR_EXP 33
 413: PUSH
 414: LD_INT 2
 416: NEG
 417: PUSH
 418: LD_INT 1
 420: NEG
 421: PUSH
 422: LD_INT 0
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 436: LD_ADDR_EXP 34
 440: PUSH
 441: LD_INT 135
 443: PUSH
 444: LD_INT 8
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 135
 453: PUSH
 454: LD_INT 4
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 134
 463: PUSH
 464: LD_INT 19
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 132
 473: PUSH
 474: LD_INT 26
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PUSH
 481: LD_INT 128
 483: PUSH
 484: LD_INT 31
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PUSH
 491: LD_INT 123
 493: PUSH
 494: LD_INT 37
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 118
 503: PUSH
 504: LD_INT 45
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: LD_INT 112
 513: PUSH
 514: LD_INT 51
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 106
 523: PUSH
 524: LD_INT 57
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 99
 533: PUSH
 534: LD_INT 62
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 93
 543: PUSH
 544: LD_INT 67
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: PUSH
 551: LD_INT 86
 553: PUSH
 554: LD_INT 72
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 78
 563: PUSH
 564: LD_INT 75
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 71
 573: PUSH
 574: LD_INT 81
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 69
 583: PUSH
 584: LD_INT 88
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 71
 593: PUSH
 594: LD_INT 95
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: LD_INT 74
 603: PUSH
 604: LD_INT 103
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 80
 613: PUSH
 614: LD_INT 113
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 84
 623: PUSH
 624: LD_INT 121
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 89
 633: PUSH
 634: LD_INT 132
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 92
 643: PUSH
 644: LD_INT 142
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 93
 653: PUSH
 654: LD_INT 151
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: LD_INT 91
 663: PUSH
 664: LD_INT 157
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 90
 673: PUSH
 674: LD_INT 163
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 93
 683: PUSH
 684: LD_INT 171
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 92
 693: PUSH
 694: LD_INT 177
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 729: LD_ADDR_EXP 35
 733: PUSH
 734: LD_INT 135
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 135
 746: PUSH
 747: LD_INT 4
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: LD_INT 134
 756: PUSH
 757: LD_INT 19
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 132
 766: PUSH
 767: LD_INT 26
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 128
 776: PUSH
 777: LD_INT 31
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 123
 786: PUSH
 787: LD_INT 37
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 118
 796: PUSH
 797: LD_INT 45
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 112
 806: PUSH
 807: LD_INT 51
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 106
 816: PUSH
 817: LD_INT 57
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 99
 826: PUSH
 827: LD_INT 62
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 104
 836: PUSH
 837: LD_INT 71
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 110
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 119
 856: PUSH
 857: LD_INT 88
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 128
 866: PUSH
 867: LD_INT 97
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PUSH
 874: LD_INT 135
 876: PUSH
 877: LD_INT 106
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 141
 886: PUSH
 887: LD_INT 120
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 143
 896: PUSH
 897: LD_INT 132
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 143
 906: PUSH
 907: LD_INT 142
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 140
 916: PUSH
 917: LD_INT 149
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 132
 926: PUSH
 927: LD_INT 153
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 125
 936: PUSH
 937: LD_INT 155
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: LD_INT 115
 946: PUSH
 947: LD_INT 154
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 105
 956: PUSH
 957: LD_INT 153
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 93
 966: PUSH
 967: LD_INT 151
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 91
 976: PUSH
 977: LD_INT 157
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 163
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 93
 996: PUSH
 997: LD_INT 171
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 92
1006: PUSH
1007: LD_INT 177
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1044: LD_ADDR_EXP 36
1048: PUSH
1049: LD_INT 40
1051: PUSH
1052: LD_INT 35
1054: PUSH
1055: LD_INT 30
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_OWVAR 67
1067: ARRAY
1068: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1069: LD_ADDR_EXP 37
1073: PUSH
1074: LD_INT 50
1076: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1077: LD_ADDR_EXP 14
1081: PUSH
1082: LD_INT 21
1084: PUSH
1085: LD_INT 19
1087: PUSH
1088: LD_INT 17
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_OWVAR 67
1100: ARRAY
1101: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1102: LD_ADDR_EXP 38
1106: PUSH
1107: LD_INT 3
1109: PUSH
1110: LD_INT 4
1112: PUSH
1113: LD_INT 4
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_OWVAR 67
1125: ARRAY
1126: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1127: LD_ADDR_EXP 39
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: LD_INT 4
1137: PUSH
1138: LD_INT 4
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_OWVAR 67
1150: ARRAY
1151: ST_TO_ADDR
// arabianTroopsMin = 7 ;
1152: LD_ADDR_EXP 40
1156: PUSH
1157: LD_INT 7
1159: ST_TO_ADDR
// arabianTroopsMax = 7 ;
1160: LD_ADDR_EXP 41
1164: PUSH
1165: LD_INT 7
1167: ST_TO_ADDR
// end ;
1168: LD_VAR 0 1
1172: RET
// every 0 0$1 trigger debugMode do var i ;
1173: LD_EXP 31
1177: IFFALSE 1492
1179: GO 1181
1181: DISABLE
1182: LD_INT 0
1184: PPUSH
// begin enable ;
1185: ENABLE
// FogOff ( your_side ) ;
1186: LD_OWVAR 2
1190: PPUSH
1191: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1195: LD_ADDR_VAR 0 1
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_OWVAR 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 2
1214: PUSH
1215: LD_INT 21
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 21
1227: PUSH
1228: LD_INT 2
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: PUSH
1249: FOR_IN
1250: IFFALSE 1266
// SetLives ( i , 1000 ) ;
1252: LD_VAR 0 1
1256: PPUSH
1257: LD_INT 1000
1259: PPUSH
1260: CALL_OW 234
1264: GO 1249
1266: POP
1267: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1268: LD_ADDR_VAR 0 1
1272: PUSH
1273: LD_INT 22
1275: PUSH
1276: LD_OWVAR 2
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: PUSH
1304: FOR_IN
1305: IFFALSE 1369
// begin SetSkill ( i , skill_combat , 10 ) ;
1307: LD_VAR 0 1
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_INT 10
1317: PPUSH
1318: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1322: LD_VAR 0 1
1326: PPUSH
1327: LD_INT 2
1329: PPUSH
1330: LD_INT 10
1332: PPUSH
1333: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1337: LD_VAR 0 1
1341: PPUSH
1342: LD_INT 3
1344: PPUSH
1345: LD_INT 10
1347: PPUSH
1348: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1352: LD_VAR 0 1
1356: PPUSH
1357: LD_INT 4
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: CALL_OW 237
// end ;
1367: GO 1304
1369: POP
1370: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1371: LD_ADDR_VAR 0 1
1375: PUSH
1376: LD_INT 22
1378: PUSH
1379: LD_OWVAR 2
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: LD_INT 30
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 30
1403: PUSH
1404: LD_INT 1
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: PUSH
1425: FOR_IN
1426: IFFALSE 1490
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1428: LD_VAR 0 1
1432: PPUSH
1433: CALL_OW 274
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 9999
1443: PPUSH
1444: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 274
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 9999
1463: PPUSH
1464: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1468: LD_VAR 0 1
1472: PPUSH
1473: CALL_OW 274
1477: PPUSH
1478: LD_INT 3
1480: PPUSH
1481: LD_INT 9999
1483: PPUSH
1484: CALL_OW 277
// end ;
1488: GO 1425
1490: POP
1491: POP
// end ; end_of_file
1492: PPOPN 1
1494: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1495: LD_INT 0
1497: PPUSH
// randomsToSave = [ ] ;
1498: LD_ADDR_EXP 62
1502: PUSH
1503: EMPTY
1504: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1505: LD_ADDR_EXP 57
1509: PUSH
1510: EMPTY
1511: ST_TO_ADDR
// ruCars = [ ] ;
1512: LD_ADDR_EXP 61
1516: PUSH
1517: EMPTY
1518: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1519: CALL 2327 0 0
// PrepareHeroes ;
1523: CALL 1532 0 0
// end ;
1527: LD_VAR 0 1
1531: RET
// function PrepareHeroes ; var i , current ; begin
1532: LD_INT 0
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation = 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1553: LD_ADDR_EXP 42
1557: PUSH
1558: LD_STRING Burlak
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_INT 3
1566: PPUSH
1567: CALL 9385 0 3
1571: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1572: LD_ADDR_EXP 43
1576: PUSH
1577: LD_STRING Gnyevko
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: LD_INT 3
1585: PPUSH
1586: CALL 9385 0 3
1590: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1591: LD_ADDR_EXP 45
1595: PUSH
1596: LD_STRING Kovalyuk
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: CALL 9385 0 3
1609: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1610: LD_ADDR_EXP 44
1614: PUSH
1615: LD_STRING Kirilenkova
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: LD_INT 4
1623: PPUSH
1624: CALL 9385 0 3
1628: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1629: LD_ADDR_EXP 46
1633: PUSH
1634: LD_STRING Belkov
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: CALL 9385 0 3
1647: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1648: LD_ADDR_EXP 47
1652: PUSH
1653: LD_STRING Belkov2
1655: PPUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL 9385 0 3
1666: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1667: LD_ADDR_EXP 48
1671: PUSH
1672: LD_STRING Scholtze
1674: PPUSH
1675: LD_INT 1
1677: PPUSH
1678: LD_INT 4
1680: PPUSH
1681: CALL 9385 0 3
1685: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1686: LD_ADDR_EXP 52
1690: PUSH
1691: LD_STRING Popov
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL 9385 0 3
1704: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1705: LD_ADDR_EXP 53
1709: PUSH
1710: LD_STRING Platonov
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL 9385 0 3
1723: ST_TO_ADDR
// uc_side = 6 ;
1724: LD_ADDR_OWVAR 20
1728: PUSH
1729: LD_INT 6
1731: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1732: LD_ADDR_EXP 54
1736: PUSH
1737: LD_STRING Gaydar
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL 9385 0 3
1750: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1751: LD_ADDR_EXP 49
1755: PUSH
1756: LD_STRING Kuzmov
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 9385 0 3
1769: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1770: LD_EXP 49
1774: PPUSH
1775: LD_INT 109
1777: PPUSH
1778: LD_INT 108
1780: PPUSH
1781: LD_INT 5
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 50
// ComHold ( Kuzmov ) ;
1791: LD_EXP 49
1795: PPUSH
1796: CALL_OW 140
// uc_side = 3 ;
1800: LD_ADDR_OWVAR 20
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1808: LD_EXP 42
1812: PUSH
1813: LD_EXP 43
1817: PUSH
1818: LD_EXP 44
1822: PUSH
1823: LD_EXP 45
1827: PUSH
1828: LD_EXP 46
1832: PUSH
1833: LD_EXP 47
1837: PUSH
1838: LD_EXP 48
1842: PUSH
1843: LD_EXP 52
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: LD_INT 2
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL 9468 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1868: LD_ADDR_EXP 50
1872: PUSH
1873: LD_STRING 03_other_survivors
1875: PPUSH
1876: CALL_OW 31
1880: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1881: LD_ADDR_EXP 51
1885: PUSH
1886: LD_STRING 03_other_kirov
1888: PPUSH
1889: CALL_OW 31
1893: ST_TO_ADDR
// for i in other_survivors do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: LD_EXP 50
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1970
// begin if ruCars then
1907: LD_EXP 61
1911: IFFALSE 1953
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_EXP 61
1922: PUSH
1923: LD_INT 1
1925: ARRAY
1926: PPUSH
1927: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1931: LD_ADDR_EXP 61
1935: PUSH
1936: LD_EXP 61
1940: PUSH
1941: LD_EXP 61
1945: PUSH
1946: LD_INT 1
1948: ARRAY
1949: DIFF
1950: ST_TO_ADDR
// end else
1951: GO 1968
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_INT 2
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 49
// end ;
1968: GO 1904
1970: POP
1971: POP
// for i in other_kirov_survivors do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: LD_EXP 51
1981: PUSH
1982: FOR_IN
1983: IFFALSE 2048
// begin if ruCars then
1985: LD_EXP 61
1989: IFFALSE 2031
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_EXP 61
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2009: LD_ADDR_EXP 61
2013: PUSH
2014: LD_EXP 61
2018: PUSH
2019: LD_EXP 61
2023: PUSH
2024: LD_INT 1
2026: ARRAY
2027: DIFF
2028: ST_TO_ADDR
// end else
2029: GO 2046
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ;
2046: GO 1982
2048: POP
2049: POP
// PrepareSoldier ( sex_male , 1 ) ;
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 381
// dialogRus = CreateHuman ;
2060: LD_ADDR_EXP 59
2064: PUSH
2065: CALL_OW 44
2069: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2070: LD_EXP 50
2074: PUSH
2075: LD_EXP 51
2079: PLUS
2080: PUSH
2081: LD_EXP 43
2085: PUSH
2086: LD_EXP 44
2090: PUSH
2091: LD_EXP 45
2095: PUSH
2096: LD_EXP 46
2100: PUSH
2101: LD_EXP 47
2105: PUSH
2106: LD_EXP 48
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: PLUS
2119: PUSH
2120: LD_INT 8
2122: LESS
2123: IFFALSE 2322
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 50
2134: PUSH
2135: LD_EXP 51
2139: PLUS
2140: PUSH
2141: LD_EXP 43
2145: PUSH
2146: LD_EXP 44
2150: PUSH
2151: LD_EXP 45
2155: PUSH
2156: LD_EXP 46
2160: PUSH
2161: LD_EXP 47
2165: PUSH
2166: LD_EXP 48
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PLUS
2179: ST_TO_ADDR
// current = 8 - current ;
2180: LD_ADDR_VAR 0 3
2184: PUSH
2185: LD_INT 8
2187: PUSH
2188: LD_VAR 0 3
2192: MINUS
2193: ST_TO_ADDR
// for i := 1 to current do
2194: LD_ADDR_VAR 0 2
2198: PUSH
2199: DOUBLE
2200: LD_INT 1
2202: DEC
2203: ST_TO_ADDR
2204: LD_VAR 0 3
2208: PUSH
2209: FOR_TO
2210: IFFALSE 2320
// begin uc_nation = 3 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 3
2219: ST_TO_ADDR
// uc_side = 3 ;
2220: LD_ADDR_OWVAR 20
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2228: LD_INT 0
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 4
2236: PPUSH
2237: CALL_OW 12
2241: PPUSH
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 3
2247: PPUSH
2248: CALL_OW 12
2252: PPUSH
2253: CALL_OW 380
// if ruCars then
2257: LD_EXP 61
2261: IFFALSE 2303
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2263: CALL_OW 44
2267: PPUSH
2268: LD_EXP 61
2272: PUSH
2273: LD_INT 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2281: LD_ADDR_EXP 61
2285: PUSH
2286: LD_EXP 61
2290: PUSH
2291: LD_EXP 61
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: DIFF
2300: ST_TO_ADDR
// end else
2301: GO 2318
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2303: CALL_OW 44
2307: PPUSH
2308: LD_INT 2
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 49
// end ;
2318: GO 2209
2320: POP
2321: POP
// end ; end ;
2322: LD_VAR 0 1
2326: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2327: LD_INT 0
2329: PPUSH
2330: PPUSH
2331: PPUSH
// uc_side = 3 ;
2332: LD_ADDR_OWVAR 20
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// uc_nation = 3 ;
2340: LD_ADDR_OWVAR 21
2344: PUSH
2345: LD_INT 3
2347: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_EXP 5
2362: PUSH
2363: FOR_TO
2364: IFFALSE 2513
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2366: LD_ADDR_OWVAR 37
2370: PUSH
2371: LD_EXP 5
2375: PUSH
2376: LD_VAR 0 2
2380: ARRAY
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2386: LD_ADDR_OWVAR 39
2390: PUSH
2391: LD_EXP 5
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: PUSH
2402: LD_INT 2
2404: ARRAY
2405: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2406: LD_ADDR_OWVAR 38
2410: PUSH
2411: LD_EXP 5
2415: PUSH
2416: LD_VAR 0 2
2420: ARRAY
2421: PUSH
2422: LD_INT 3
2424: ARRAY
2425: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2426: LD_ADDR_OWVAR 40
2430: PUSH
2431: LD_EXP 5
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 4
2444: ARRAY
2445: ST_TO_ADDR
// uc_direction := 3 ;
2446: LD_ADDR_OWVAR 24
2450: PUSH
2451: LD_INT 3
2453: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2454: LD_ADDR_OWVAR 41
2458: PUSH
2459: LD_INT 25
2461: PPUSH
2462: LD_INT 30
2464: PPUSH
2465: CALL_OW 12
2469: ST_TO_ADDR
// car := CreateVehicle ;
2470: LD_ADDR_VAR 0 3
2474: PUSH
2475: CALL_OW 45
2479: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2480: LD_ADDR_EXP 61
2484: PUSH
2485: LD_EXP 61
2489: PUSH
2490: LD_VAR 0 3
2494: ADD
2495: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL_OW 49
// end ;
2511: GO 2363
2513: POP
2514: POP
// end ;
2515: LD_VAR 0 1
2519: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
// rnd = rand ( 1 , 4 ) ;
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 4
2540: PPUSH
2541: CALL_OW 12
2545: ST_TO_ADDR
// uc_side = 6 ;
2546: LD_ADDR_OWVAR 20
2550: PUSH
2551: LD_INT 6
2553: ST_TO_ADDR
// uc_nation = 3 ;
2554: LD_ADDR_OWVAR 21
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// if rnd < 4 then
2562: LD_VAR 0 3
2566: PUSH
2567: LD_INT 4
2569: LESS
2570: IFFALSE 2946
// begin vc_chassis = ru_medium_wheeled ;
2572: LD_ADDR_OWVAR 37
2576: PUSH
2577: LD_INT 21
2579: ST_TO_ADDR
// vc_control = control_manual ;
2580: LD_ADDR_OWVAR 38
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// vc_engine = engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2596: LD_ADDR_VAR 0 5
2600: PUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 100
2606: PPUSH
2607: CALL_OW 12
2611: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2612: LD_VAR 0 5
2616: PUSH
2617: LD_EXP 37
2621: PUSH
2622: LD_INT 1
2624: PLUS
2625: LESS
2626: IFFALSE 2638
// vc_weapon = ru_cargo_bay else
2628: LD_ADDR_OWVAR 40
2632: PUSH
2633: LD_INT 51
2635: ST_TO_ADDR
2636: GO 2669
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 42
2645: PUSH
2646: LD_INT 43
2648: PUSH
2649: LD_INT 44
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 3
2662: PPUSH
2663: CALL_OW 12
2667: ARRAY
2668: ST_TO_ADDR
// vehicle = CreateVehicle ;
2669: LD_ADDR_VAR 0 7
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2679: LD_VAR 0 7
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2691: LD_VAR 0 7
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 4
2714: PPUSH
2715: CALL_OW 12
2719: PPUSH
2720: LD_INT 2
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: CALL_OW 12
2730: PPUSH
2731: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2735: CALL_OW 44
2739: PPUSH
2740: LD_VAR 0 7
2744: PPUSH
2745: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2749: LD_OWVAR 40
2753: PUSH
2754: LD_INT 51
2756: EQUAL
2757: IFFALSE 2774
// AddCargo ( vehicle , mat_cans , 100 ) ;
2759: LD_VAR 0 7
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2774: LD_VAR 0 7
2778: PPUSH
2779: LD_INT 500
2781: PPUSH
2782: LD_INT 1000
2784: PPUSH
2785: CALL_OW 12
2789: PPUSH
2790: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2794: LD_ADDR_VAR 0 3
2798: PUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_INT 2
2804: PPUSH
2805: CALL_OW 12
2809: ST_TO_ADDR
// if rnd = 1 then
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 1
2817: EQUAL
2818: IFFALSE 2883
// for i := 3 to russianCargoPath1 do
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: DOUBLE
2826: LD_INT 3
2828: DEC
2829: ST_TO_ADDR
2830: LD_EXP 34
2834: PUSH
2835: FOR_TO
2836: IFFALSE 2879
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2838: LD_VAR 0 7
2842: PPUSH
2843: LD_EXP 34
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: PUSH
2854: LD_INT 1
2856: ARRAY
2857: PPUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 2
2867: ARRAY
2868: PUSH
2869: LD_INT 2
2871: ARRAY
2872: PPUSH
2873: CALL_OW 171
2877: GO 2835
2879: POP
2880: POP
2881: GO 2944
// for i := 3 to russianCargoPath2 do
2883: LD_ADDR_VAR 0 2
2887: PUSH
2888: DOUBLE
2889: LD_INT 3
2891: DEC
2892: ST_TO_ADDR
2893: LD_EXP 35
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2942
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2901: LD_VAR 0 7
2905: PPUSH
2906: LD_EXP 35
2910: PUSH
2911: LD_VAR 0 2
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_EXP 35
2925: PUSH
2926: LD_VAR 0 2
2930: ARRAY
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PPUSH
2936: CALL_OW 171
2940: GO 2898
2942: POP
2943: POP
// end else
2944: GO 3285
// begin for i := 1 to rand ( 1 , 3 ) do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 1
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 12
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3046
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2970: LD_INT 0
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: LD_INT 4
2978: PPUSH
2979: CALL_OW 12
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: LD_INT 3
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: CALL_OW 380
// unit = CreateHuman ;
2999: LD_ADDR_VAR 0 6
3003: PUSH
3004: CALL_OW 44
3008: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3009: LD_VAR 0 6
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3024: LD_VAR 0 6
3028: PPUSH
3029: LD_INT 500
3031: PPUSH
3032: LD_INT 1000
3034: PPUSH
3035: CALL_OW 12
3039: PPUSH
3040: CALL_OW 234
// end ;
3044: GO 2967
3046: POP
3047: POP
// rnd2 = rand ( 1 , 2 ) ;
3048: LD_ADDR_VAR 0 4
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 12
3063: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3064: LD_ADDR_VAR 0 8
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 6
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 56
3091: PUSH
3092: EMPTY
3093: LIST
3094: PUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 60
3100: PUSH
3101: EMPTY
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: PPUSH
3114: CALL_OW 69
3118: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3119: LD_ADDR_VAR 0 8
3123: PUSH
3124: LD_VAR 0 8
3128: PUSH
3129: LD_EXP 56
3133: DIFF
3134: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: LD_VAR 0 8
3144: PUSH
3145: LD_EXP 57
3149: DIFF
3150: ST_TO_ADDR
// if rnd2 = 1 then
3151: LD_VAR 0 4
3155: PUSH
3156: LD_INT 1
3158: EQUAL
3159: IFFALSE 3224
// for i := 3 to russianCargoPath1 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 3
3169: DEC
3170: ST_TO_ADDR
3171: LD_EXP 34
3175: PUSH
3176: FOR_TO
3177: IFFALSE 3220
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3179: LD_VAR 0 8
3183: PPUSH
3184: LD_EXP 34
3188: PUSH
3189: LD_VAR 0 2
3193: ARRAY
3194: PUSH
3195: LD_INT 1
3197: ARRAY
3198: PPUSH
3199: LD_EXP 34
3203: PUSH
3204: LD_VAR 0 2
3208: ARRAY
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: CALL_OW 171
3218: GO 3176
3220: POP
3221: POP
3222: GO 3285
// for i := 3 to russianCargoPath2 do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 3
3232: DEC
3233: ST_TO_ADDR
3234: LD_EXP 35
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3283
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3242: LD_VAR 0 8
3246: PPUSH
3247: LD_EXP 35
3251: PUSH
3252: LD_VAR 0 2
3256: ARRAY
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: LD_EXP 35
3266: PUSH
3267: LD_VAR 0 2
3271: ARRAY
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: CALL_OW 171
3281: GO 3239
3283: POP
3284: POP
// end ; end ;
3285: LD_VAR 0 1
3289: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3290: LD_INT 0
3292: PPUSH
3293: PPUSH
3294: PPUSH
// for i := 1 to 2 do
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: DOUBLE
3301: LD_INT 1
3303: DEC
3304: ST_TO_ADDR
3305: LD_INT 2
3307: PUSH
3308: FOR_TO
3309: IFFALSE 3375
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3311: LD_INT 0
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: CALL_OW 12
3327: PPUSH
3328: CALL_OW 380
// unit = CreateHuman ;
3332: LD_ADDR_VAR 0 3
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3342: LD_VAR 0 3
3346: PPUSH
3347: LD_INT 3
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3357: LD_ADDR_EXP 57
3361: PUSH
3362: LD_EXP 57
3366: PUSH
3367: LD_VAR 0 3
3371: ADD
3372: ST_TO_ADDR
// end ;
3373: GO 3308
3375: POP
3376: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3377: LD_INT 0
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: LD_INT 2
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: CALL_OW 12
3393: PPUSH
3394: CALL_OW 380
// unit = CreateHuman ;
3398: LD_ADDR_VAR 0 3
3402: PUSH
3403: CALL_OW 44
3407: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3423: LD_ADDR_EXP 57
3427: PUSH
3428: LD_EXP 57
3432: PUSH
3433: LD_VAR 0 3
3437: ADD
3438: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3439: LD_EXP 57
3443: PPUSH
3444: LD_INT 100
3446: PPUSH
3447: LD_INT 54
3449: PPUSH
3450: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3454: LD_EXP 57
3458: PPUSH
3459: LD_INT 25
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 72
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 95
3479: PPUSH
3480: LD_INT 52
3482: PPUSH
3483: LD_INT 2
3485: PPUSH
3486: CALL_OW 205
// end ; end_of_file
3490: LD_VAR 0 1
3494: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3495: LD_INT 0
3497: PPUSH
// uc_side = 2 ;
3498: LD_ADDR_OWVAR 20
3502: PUSH
3503: LD_INT 2
3505: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3506: LD_ADDR_EXP 63
3510: PUSH
3511: LD_STRING Heike
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: LD_INT 0
3519: PPUSH
3520: CALL 9385 0 3
3524: ST_TO_ADDR
// if Difficulty >= 2 then
3525: LD_OWVAR 67
3529: PUSH
3530: LD_INT 2
3532: GREATEREQUAL
3533: IFFALSE 3548
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3535: LD_INT 51
3537: PPUSH
3538: LD_INT 2
3540: PPUSH
3541: LD_INT 2
3543: PPUSH
3544: CALL_OW 322
// end ;
3548: LD_VAR 0 1
3552: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
3557: PPUSH
// currentEnemyGroup = [ ] ;
3558: LD_ADDR_EXP 65
3562: PUSH
3563: EMPTY
3564: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_EXP 39
3579: PUSH
3580: FOR_TO
3581: IFFALSE 3836
// begin uc_side = 2 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_INT 2
3590: ST_TO_ADDR
// uc_nation = nation_arabian ;
3591: LD_ADDR_OWVAR 21
3595: PUSH
3596: LD_INT 2
3598: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3599: LD_ADDR_OWVAR 40
3603: PUSH
3604: LD_INT 23
3606: PUSH
3607: LD_INT 24
3609: PUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 26
3615: PUSH
3616: LD_INT 27
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 5
3631: PPUSH
3632: CALL_OW 12
3636: ARRAY
3637: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3638: LD_OWVAR 40
3642: PUSH
3643: LD_INT 25
3645: PUSH
3646: LD_INT 26
3648: PUSH
3649: LD_INT 27
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: IN
3657: IFFALSE 3688
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3659: LD_ADDR_OWVAR 37
3663: PUSH
3664: LD_INT 13
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 1
3676: PPUSH
3677: LD_INT 2
3679: PPUSH
3680: CALL_OW 12
3684: ARRAY
3685: ST_TO_ADDR
3686: GO 3719
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3688: LD_ADDR_OWVAR 37
3692: PUSH
3693: LD_INT 12
3695: PUSH
3696: LD_INT 13
3698: PUSH
3699: LD_INT 14
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 1
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: CALL_OW 12
3717: ARRAY
3718: ST_TO_ADDR
// vc_control = control_manual ;
3719: LD_ADDR_OWVAR 38
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// vc_engine = engine_combustion ;
3727: LD_ADDR_OWVAR 39
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3735: LD_ADDR_OWVAR 41
3739: PUSH
3740: LD_INT 100
3742: ST_TO_ADDR
// veh = CreateVehicle ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: CALL_OW 45
3752: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3753: LD_ADDR_EXP 65
3757: PUSH
3758: LD_EXP 65
3762: PUSH
3763: LD_VAR 0 3
3767: ADD
3768: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 7
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3784: LD_OWVAR 40
3788: PUSH
3789: LD_INT 26
3791: EQUAL
3792: IFFALSE 3808
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3794: LD_INT 0
3796: PPUSH
3797: LD_EXP 33
3801: PPUSH
3802: CALL_OW 383
3806: GO 3820
// PrepareMechanic ( false , enemySkillLevel ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_EXP 32
3815: PPUSH
3816: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3820: CALL_OW 44
3824: PPUSH
3825: LD_VAR 0 3
3829: PPUSH
3830: CALL_OW 52
// end ;
3834: GO 3580
3836: POP
3837: POP
// end ;
3838: LD_VAR 0 1
3842: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3843: LD_INT 0
3845: PPUSH
3846: PPUSH
3847: PPUSH
// currentEnemyGroup = [ ] ;
3848: LD_ADDR_EXP 65
3852: PUSH
3853: EMPTY
3854: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: DOUBLE
3861: LD_INT 1
3863: DEC
3864: ST_TO_ADDR
3865: LD_EXP 40
3869: PPUSH
3870: LD_EXP 41
3874: PPUSH
3875: CALL_OW 12
3879: PUSH
3880: FOR_TO
3881: IFFALSE 3960
// begin uc_side = 2 ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_INT 2
3890: ST_TO_ADDR
// uc_nation = nation_arabian ;
3891: LD_ADDR_OWVAR 21
3895: PUSH
3896: LD_INT 2
3898: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3899: LD_INT 0
3901: PPUSH
3902: LD_EXP 32
3906: PUSH
3907: LD_INT 1
3909: MINUS
3910: PPUSH
3911: CALL_OW 381
// unit = CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3925: LD_ADDR_EXP 65
3929: PUSH
3930: LD_EXP 65
3934: PUSH
3935: LD_VAR 0 4
3939: ADD
3940: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3941: LD_VAR 0 4
3945: PPUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 49
// end ;
3958: GO 3880
3960: POP
3961: POP
// for i := 1 to rand ( 1 , 3 ) do
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: DOUBLE
3968: LD_INT 1
3970: DEC
3971: ST_TO_ADDR
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 12
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4059
// begin uc_side = 2 ;
3986: LD_ADDR_OWVAR 20
3990: PUSH
3991: LD_INT 2
3993: ST_TO_ADDR
// uc_nation = nation_arabian ;
3994: LD_ADDR_OWVAR 21
3998: PUSH
3999: LD_INT 2
4001: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_EXP 32
4009: PPUSH
4010: CALL_OW 384
// unit = CreateHuman ;
4014: LD_ADDR_VAR 0 4
4018: PUSH
4019: CALL_OW 44
4023: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4024: LD_ADDR_EXP 65
4028: PUSH
4029: LD_EXP 65
4033: PUSH
4034: LD_VAR 0 4
4038: ADD
4039: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4040: LD_VAR 0 4
4044: PPUSH
4045: LD_VAR 0 1
4049: PPUSH
4050: LD_INT 0
4052: PPUSH
4053: CALL_OW 49
// end ;
4057: GO 3983
4059: POP
4060: POP
// end ;
4061: LD_VAR 0 2
4065: RET
// export function PrepareArabianKiller ; var un ; begin
4066: LD_INT 0
4068: PPUSH
4069: PPUSH
// uc_side = 5 ;
4070: LD_ADDR_OWVAR 20
4074: PUSH
4075: LD_INT 5
4077: ST_TO_ADDR
// uc_nation = nation_arabian ;
4078: LD_ADDR_OWVAR 21
4082: PUSH
4083: LD_INT 2
4085: ST_TO_ADDR
// hc_class = class_soldier ;
4086: LD_ADDR_OWVAR 28
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4094: LD_ADDR_OWVAR 31
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: ST_TO_ADDR
// un = CreateHuman ;
4117: LD_ADDR_VAR 0 2
4121: PUSH
4122: CALL_OW 44
4126: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4127: LD_VAR 0 2
4131: PPUSH
4132: LD_INT 12
4134: PPUSH
4135: LD_INT 0
4137: PPUSH
4138: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_EXP 54
4151: PPUSH
4152: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4156: LD_ADDR_EXP 23
4160: PUSH
4161: LD_EXP 23
4165: PUSH
4166: LD_INT 1
4168: PLUS
4169: ST_TO_ADDR
// end ;
4170: LD_VAR 0 1
4174: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4175: LD_INT 0
4177: PPUSH
4178: PPUSH
4179: PPUSH
4180: PPUSH
// firstAttackGroup = [ ] ;
4181: LD_ADDR_EXP 64
4185: PUSH
4186: EMPTY
4187: ST_TO_ADDR
// uc_side = 2 ;
4188: LD_ADDR_OWVAR 20
4192: PUSH
4193: LD_INT 2
4195: ST_TO_ADDR
// uc_nation = nation_arabian ;
4196: LD_ADDR_OWVAR 21
4200: PUSH
4201: LD_INT 2
4203: ST_TO_ADDR
// for i := 1 to 3 do
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_INT 3
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4279
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4220: LD_INT 0
4222: PPUSH
4223: LD_EXP 32
4227: PUSH
4228: LD_INT 2
4230: MINUS
4231: PPUSH
4232: CALL_OW 381
// unit = CreateHuman ;
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: CALL_OW 44
4245: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4246: LD_ADDR_EXP 64
4250: PUSH
4251: LD_EXP 64
4255: PUSH
4256: LD_VAR 0 3
4260: ADD
4261: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_INT 7
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 49
// end ;
4277: GO 4217
4279: POP
4280: POP
// vc_weapon = ar_light_gun ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 23
4288: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4289: LD_ADDR_OWVAR 37
4293: PUSH
4294: LD_INT 13
4296: ST_TO_ADDR
// vc_control = control_manual ;
4297: LD_ADDR_OWVAR 38
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// vc_engine = engine_combustion ;
4305: LD_ADDR_OWVAR 39
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4313: LD_ADDR_OWVAR 41
4317: PUSH
4318: LD_INT 100
4320: ST_TO_ADDR
// veh = CreateVehicle ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: CALL_OW 45
4330: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4331: LD_ADDR_EXP 64
4335: PUSH
4336: LD_EXP 64
4340: PUSH
4341: LD_VAR 0 4
4345: ADD
4346: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4347: LD_VAR 0 4
4351: PPUSH
4352: LD_INT 7
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_EXP 32
4369: PUSH
4370: LD_INT 1
4372: MINUS
4373: PPUSH
4374: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4378: CALL_OW 44
4382: PPUSH
4383: LD_VAR 0 4
4387: PPUSH
4388: CALL_OW 52
// end ; end_of_file
4392: LD_VAR 0 1
4396: RET
// export function Nef_PrepareNature ; var i , un ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4402: LD_ADDR_VAR 0 2
4406: PUSH
4407: DOUBLE
4408: LD_INT 1
4410: DEC
4411: ST_TO_ADDR
4412: LD_EXP 26
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4532
// begin uc_side = 0 ;
4424: LD_ADDR_OWVAR 20
4428: PUSH
4429: LD_INT 0
4431: ST_TO_ADDR
// uc_nation = nation_nature ;
4432: LD_ADDR_OWVAR 21
4436: PUSH
4437: LD_INT 0
4439: ST_TO_ADDR
// hc_class = class_apeman ;
4440: LD_ADDR_OWVAR 28
4444: PUSH
4445: LD_INT 12
4447: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4448: LD_ADDR_OWVAR 31
4452: PUSH
4453: LD_EXP 27
4457: PUSH
4458: LD_INT 1
4460: ARRAY
4461: PUSH
4462: LD_EXP 27
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: PUSH
4471: LD_EXP 27
4475: PUSH
4476: LD_INT 3
4478: ARRAY
4479: PUSH
4480: LD_EXP 27
4484: PUSH
4485: LD_INT 4
4487: ARRAY
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4495: LD_ADDR_OWVAR 35
4499: PUSH
4500: LD_EXP 28
4504: ST_TO_ADDR
// un = CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_INT 8
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
// end ;
4530: GO 4421
4532: POP
4533: POP
// for i := 1 to animalsAmount [ 2 ] do
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: DOUBLE
4540: LD_INT 1
4542: DEC
4543: ST_TO_ADDR
4544: LD_EXP 26
4548: PUSH
4549: LD_INT 2
4551: ARRAY
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4664
// begin uc_side = 0 ;
4556: LD_ADDR_OWVAR 20
4560: PUSH
4561: LD_INT 0
4563: ST_TO_ADDR
// uc_nation = nation_nature ;
4564: LD_ADDR_OWVAR 21
4568: PUSH
4569: LD_INT 0
4571: ST_TO_ADDR
// hc_class = class_phororhacos ;
4572: LD_ADDR_OWVAR 28
4576: PUSH
4577: LD_INT 18
4579: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4580: LD_ADDR_OWVAR 31
4584: PUSH
4585: LD_EXP 27
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PUSH
4594: LD_EXP 27
4598: PUSH
4599: LD_INT 2
4601: ARRAY
4602: PUSH
4603: LD_EXP 27
4607: PUSH
4608: LD_INT 3
4610: ARRAY
4611: PUSH
4612: LD_EXP 27
4616: PUSH
4617: LD_INT 4
4619: ARRAY
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4627: LD_ADDR_OWVAR 35
4631: PUSH
4632: LD_EXP 28
4636: ST_TO_ADDR
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 8
4654: PPUSH
4655: LD_INT 0
4657: PPUSH
4658: CALL_OW 49
// end ;
4662: GO 4553
4664: POP
4665: POP
// for i := 1 to animalsAmount [ 3 ] do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_EXP 26
4680: PUSH
4681: LD_INT 3
4683: ARRAY
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4796
// begin uc_side = 0 ;
4688: LD_ADDR_OWVAR 20
4692: PUSH
4693: LD_INT 0
4695: ST_TO_ADDR
// uc_nation = nation_nature ;
4696: LD_ADDR_OWVAR 21
4700: PUSH
4701: LD_INT 0
4703: ST_TO_ADDR
// hc_class = class_tiger ;
4704: LD_ADDR_OWVAR 28
4708: PUSH
4709: LD_INT 14
4711: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4712: LD_ADDR_OWVAR 31
4716: PUSH
4717: LD_EXP 27
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PUSH
4726: LD_EXP 27
4730: PUSH
4731: LD_INT 2
4733: ARRAY
4734: PUSH
4735: LD_EXP 27
4739: PUSH
4740: LD_INT 3
4742: ARRAY
4743: PUSH
4744: LD_EXP 27
4748: PUSH
4749: LD_INT 4
4751: ARRAY
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4759: LD_ADDR_OWVAR 35
4763: PUSH
4764: LD_EXP 28
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 8
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// end ;
4794: GO 4685
4796: POP
4797: POP
// for i := 1 to animalsAmount [ 4 ] do
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: DOUBLE
4804: LD_INT 1
4806: DEC
4807: ST_TO_ADDR
4808: LD_EXP 26
4812: PUSH
4813: LD_INT 4
4815: ARRAY
4816: PUSH
4817: FOR_TO
4818: IFFALSE 4928
// begin uc_side = 0 ;
4820: LD_ADDR_OWVAR 20
4824: PUSH
4825: LD_INT 0
4827: ST_TO_ADDR
// uc_nation = nation_nature ;
4828: LD_ADDR_OWVAR 21
4832: PUSH
4833: LD_INT 0
4835: ST_TO_ADDR
// hc_class = 21 ;
4836: LD_ADDR_OWVAR 28
4840: PUSH
4841: LD_INT 21
4843: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4844: LD_ADDR_OWVAR 31
4848: PUSH
4849: LD_EXP 27
4853: PUSH
4854: LD_INT 1
4856: ARRAY
4857: PUSH
4858: LD_EXP 27
4862: PUSH
4863: LD_INT 2
4865: ARRAY
4866: PUSH
4867: LD_EXP 27
4871: PUSH
4872: LD_INT 3
4874: ARRAY
4875: PUSH
4876: LD_EXP 27
4880: PUSH
4881: LD_INT 4
4883: ARRAY
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4891: LD_ADDR_OWVAR 35
4895: PUSH
4896: LD_EXP 28
4900: ST_TO_ADDR
// un = CreateHuman ;
4901: LD_ADDR_VAR 0 3
4905: PUSH
4906: CALL_OW 44
4910: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4911: LD_VAR 0 3
4915: PPUSH
4916: LD_INT 8
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 49
// end ;
4926: GO 4817
4928: POP
4929: POP
// for i := 1 to animalsAmount [ 5 ] do
4930: LD_ADDR_VAR 0 2
4934: PUSH
4935: DOUBLE
4936: LD_INT 1
4938: DEC
4939: ST_TO_ADDR
4940: LD_EXP 26
4944: PUSH
4945: LD_INT 5
4947: ARRAY
4948: PUSH
4949: FOR_TO
4950: IFFALSE 5011
// begin uc_side = 0 ;
4952: LD_ADDR_OWVAR 20
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// uc_nation = nation_nature ;
4960: LD_ADDR_OWVAR 21
4964: PUSH
4965: LD_INT 0
4967: ST_TO_ADDR
// vc_chassis := 31 ;
4968: LD_ADDR_OWVAR 37
4972: PUSH
4973: LD_INT 31
4975: ST_TO_ADDR
// vc_control := control_rider ;
4976: LD_ADDR_OWVAR 38
4980: PUSH
4981: LD_INT 4
4983: ST_TO_ADDR
// un := CreateVehicle ;
4984: LD_ADDR_VAR 0 3
4988: PUSH
4989: CALL_OW 45
4993: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4994: LD_VAR 0 3
4998: PPUSH
4999: LD_INT 8
5001: PPUSH
5002: LD_INT 0
5004: PPUSH
5005: CALL_OW 49
// end ;
5009: GO 4949
5011: POP
5012: POP
// end ; end_of_file
5013: LD_VAR 0 1
5017: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5018: LD_INT 0
5020: PPUSH
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
5025: PPUSH
5026: PPUSH
5027: PPUSH
5028: PPUSH
5029: PPUSH
5030: PPUSH
5031: PPUSH
5032: PPUSH
5033: PPUSH
5034: PPUSH
5035: PPUSH
5036: PPUSH
5037: PPUSH
// for unit in units do
5038: LD_ADDR_VAR 0 8
5042: PUSH
5043: LD_VAR 0 1
5047: PUSH
5048: FOR_IN
5049: IFFALSE 5086
// if not ignorePath then
5051: LD_VAR 0 3
5055: NOT
5056: IFFALSE 5072
// SetTag ( unit , 0 ) else
5058: LD_VAR 0 8
5062: PPUSH
5063: LD_INT 0
5065: PPUSH
5066: CALL_OW 109
5070: GO 5084
// SetTag ( unit , 1 ) ;
5072: LD_VAR 0 8
5076: PPUSH
5077: LD_INT 1
5079: PPUSH
5080: CALL_OW 109
5084: GO 5048
5086: POP
5087: POP
// startAttacks = false ;
5088: LD_ADDR_VAR 0 21
5092: PUSH
5093: LD_INT 0
5095: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5096: LD_ADDR_VAR 0 17
5100: PUSH
5101: LD_VAR 0 2
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PUSH
5112: LD_INT 1
5114: ARRAY
5115: PUSH
5116: LD_VAR 0 2
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: ST_TO_ADDR
// mechanics = [ ] ;
5135: LD_ADDR_VAR 0 12
5139: PUSH
5140: EMPTY
5141: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5142: LD_ADDR_VAR 0 9
5146: PUSH
5147: LD_VAR 0 1
5151: PPUSH
5152: LD_INT 50
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 72
5194: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5195: LD_ADDR_VAR 0 11
5199: PUSH
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_INT 50
5207: PUSH
5208: EMPTY
5209: LIST
5210: PUSH
5211: LD_INT 25
5213: PUSH
5214: LD_INT 4
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 72
5229: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5230: LD_ADDR_VAR 0 13
5234: PUSH
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_INT 21
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 24
5255: PUSH
5256: LD_INT 1000
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 72
5275: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5276: LD_ADDR_VAR 0 15
5280: PUSH
5281: LD_INT 9
5283: PPUSH
5284: CALL_OW 435
5288: ST_TO_ADDR
// if not ignorePath then
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 6276
// begin for unit in attackUnits do
5296: LD_ADDR_VAR 0 8
5300: PUSH
5301: LD_VAR 0 9
5305: PUSH
5306: FOR_IN
5307: IFFALSE 6050
// begin if path and not startAttacks then
5309: LD_VAR 0 2
5313: PUSH
5314: LD_VAR 0 21
5318: NOT
5319: AND
5320: IFFALSE 6039
// begin i = 1 ;
5322: LD_ADDR_VAR 0 7
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5330: LD_ADDR_VAR 0 15
5334: PUSH
5335: LD_INT 9
5337: PPUSH
5338: CALL_OW 435
5342: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5343: LD_ADDR_VAR 0 18
5347: PUSH
5348: LD_INT 81
5350: PUSH
5351: LD_VAR 0 8
5355: PPUSH
5356: CALL_OW 255
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_VAR 0 8
5374: PPUSH
5375: CALL_OW 74
5379: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5380: LD_ADDR_VAR 0 19
5384: PUSH
5385: LD_VAR 0 15
5389: PPUSH
5390: LD_VAR 0 8
5394: PPUSH
5395: CALL_OW 250
5399: PPUSH
5400: LD_VAR 0 8
5404: PPUSH
5405: CALL_OW 251
5409: PPUSH
5410: CALL_OW 439
5414: ST_TO_ADDR
// if damageUnits and medics then
5415: LD_VAR 0 13
5419: PUSH
5420: LD_VAR 0 11
5424: AND
5425: IFFALSE 5447
// ComHeal ( medics , damageUnits [ 1 ] ) else
5427: LD_VAR 0 11
5431: PPUSH
5432: LD_VAR 0 13
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: CALL_OW 128
5445: GO 5490
// if medics then
5447: LD_VAR 0 11
5451: IFFALSE 5490
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5453: LD_VAR 0 11
5457: PPUSH
5458: LD_VAR 0 9
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 250
5471: PPUSH
5472: LD_VAR 0 9
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 251
5485: PPUSH
5486: CALL_OW 111
// if not HasTask ( unit ) then
5490: LD_VAR 0 8
5494: PPUSH
5495: CALL_OW 314
5499: NOT
5500: IFFALSE 5739
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5502: LD_ADDR_VAR 0 19
5506: PUSH
5507: LD_VAR 0 15
5511: PPUSH
5512: LD_VAR 0 8
5516: PPUSH
5517: CALL_OW 250
5521: PPUSH
5522: LD_VAR 0 8
5526: PPUSH
5527: CALL_OW 251
5531: PPUSH
5532: CALL_OW 439
5536: ST_TO_ADDR
// if i > crates then
5537: LD_VAR 0 7
5541: PUSH
5542: LD_VAR 0 15
5546: GREATER
5547: IFFALSE 5557
// i = 1 ;
5549: LD_ADDR_VAR 0 7
5553: PUSH
5554: LD_INT 1
5556: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5557: LD_VAR 0 18
5561: PUSH
5562: LD_VAR 0 19
5566: AND
5567: IFFALSE 5682
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5569: LD_VAR 0 8
5573: PPUSH
5574: LD_VAR 0 18
5578: PPUSH
5579: CALL_OW 250
5583: PPUSH
5584: LD_VAR 0 18
5588: PPUSH
5589: CALL_OW 251
5593: PPUSH
5594: CALL_OW 297
5598: PUSH
5599: LD_VAR 0 8
5603: PPUSH
5604: LD_VAR 0 19
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 19
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 297
5626: LESS
5627: IFFALSE 5645
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5629: LD_VAR 0 9
5633: PPUSH
5634: LD_VAR 0 18
5638: PPUSH
5639: CALL_OW 115
5643: GO 5680
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5645: LD_VAR 0 9
5649: PPUSH
5650: LD_VAR 0 15
5654: PUSH
5655: LD_VAR 0 7
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 15
5665: PUSH
5666: LD_VAR 0 7
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: CALL_OW 116
// end else
5680: GO 5739
// if crates then
5682: LD_VAR 0 15
5686: IFFALSE 5725
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5688: LD_VAR 0 9
5692: PPUSH
5693: LD_VAR 0 15
5697: PUSH
5698: LD_VAR 0 7
5702: ARRAY
5703: PPUSH
5704: LD_VAR 0 15
5708: PUSH
5709: LD_VAR 0 7
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: ARRAY
5718: PPUSH
5719: CALL_OW 116
5723: GO 5739
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5725: LD_VAR 0 9
5729: PPUSH
5730: LD_VAR 0 18
5734: PPUSH
5735: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// if path then
5746: LD_VAR 0 2
5750: IFFALSE 5836
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5752: LD_ADDR_VAR 0 16
5756: PUSH
5757: LD_VAR 0 8
5761: PPUSH
5762: LD_VAR 0 2
5766: PPUSH
5767: CALL 7166 0 2
5771: ST_TO_ADDR
// if agressiveMove then
5772: LD_VAR 0 4
5776: IFFALSE 5807
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5778: LD_VAR 0 9
5782: PPUSH
5783: LD_VAR 0 16
5787: PUSH
5788: LD_INT 1
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 16
5796: PUSH
5797: LD_INT 2
5799: ARRAY
5800: PPUSH
5801: CALL_OW 114
5805: GO 5834
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5807: LD_VAR 0 9
5811: PPUSH
5812: LD_VAR 0 16
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: LD_VAR 0 16
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 111
// end else
5834: GO 5844
// startAttacks = true ;
5836: LD_ADDR_VAR 0 21
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// i = i + 2 ;
5844: LD_ADDR_VAR 0 7
5848: PUSH
5849: LD_VAR 0 7
5853: PUSH
5854: LD_INT 2
5856: PLUS
5857: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5858: LD_VAR 0 8
5862: PPUSH
5863: CALL_OW 314
5867: NOT
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_VAR 0 8
5876: PPUSH
5877: CALL_OW 255
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 92
5888: PUSH
5889: LD_VAR 0 16
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PUSH
5898: LD_VAR 0 16
5902: PUSH
5903: LD_INT 2
5905: ARRAY
5906: PUSH
5907: LD_INT 4
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_INT 3
5927: GREATER
5928: AND
5929: PUSH
5930: LD_VAR 0 21
5934: NOT
5935: AND
5936: IFFALSE 5330
// for i := 1 to path do
5938: LD_ADDR_VAR 0 7
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6037
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5956: LD_VAR 0 2
5960: PUSH
5961: LD_VAR 0 7
5965: ARRAY
5966: PUSH
5967: LD_INT 1
5969: ARRAY
5970: PUSH
5971: LD_VAR 0 16
5975: PUSH
5976: LD_INT 1
5978: ARRAY
5979: EQUAL
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_VAR 0 7
5990: ARRAY
5991: PUSH
5992: LD_INT 2
5994: ARRAY
5995: PUSH
5996: LD_VAR 0 16
6000: PUSH
6001: LD_INT 2
6003: ARRAY
6004: EQUAL
6005: AND
6006: IFFALSE 6035
// begin path = path diff [ path [ i ] ] ;
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: LD_VAR 0 2
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_VAR 0 7
6027: ARRAY
6028: PUSH
6029: EMPTY
6030: LIST
6031: DIFF
6032: ST_TO_ADDR
// break ;
6033: GO 6037
// end ;
6035: GO 5953
6037: POP
6038: POP
// end ; if not path then
6039: LD_VAR 0 2
6043: NOT
6044: IFFALSE 6048
// break ;
6046: GO 6050
// end ;
6048: GO 5306
6050: POP
6051: POP
// repeat unitsReachPathEnd = 0 ;
6052: LD_ADDR_VAR 0 20
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// for attackUnit in attackUnits do
6060: LD_ADDR_VAR 0 10
6064: PUSH
6065: LD_VAR 0 9
6069: PUSH
6070: FOR_IN
6071: IFFALSE 6244
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6073: LD_VAR 0 10
6077: PPUSH
6078: LD_VAR 0 17
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: LD_VAR 0 17
6091: PUSH
6092: LD_INT 2
6094: ARRAY
6095: PPUSH
6096: CALL_OW 297
6100: PUSH
6101: LD_INT 7
6103: LESS
6104: NOT
6105: PUSH
6106: LD_VAR 0 10
6110: PPUSH
6111: CALL_OW 110
6115: PUSH
6116: LD_INT 0
6118: EQUAL
6119: AND
6120: IFFALSE 6186
// begin if agressiveMove then
6122: LD_VAR 0 4
6126: IFFALSE 6157
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6128: LD_VAR 0 10
6132: PPUSH
6133: LD_VAR 0 17
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: LD_VAR 0 17
6146: PUSH
6147: LD_INT 2
6149: ARRAY
6150: PPUSH
6151: CALL_OW 114
6155: GO 6184
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6157: LD_VAR 0 10
6161: PPUSH
6162: LD_VAR 0 17
6166: PUSH
6167: LD_INT 1
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 17
6175: PUSH
6176: LD_INT 2
6178: ARRAY
6179: PPUSH
6180: CALL_OW 111
// end else
6184: GO 6213
// if GetTag ( attackUnit ) = 0 then
6186: LD_VAR 0 10
6190: PPUSH
6191: CALL_OW 110
6195: PUSH
6196: LD_INT 0
6198: EQUAL
6199: IFFALSE 6213
// SetTag ( attackUnit , 1 ) ;
6201: LD_VAR 0 10
6205: PPUSH
6206: LD_INT 1
6208: PPUSH
6209: CALL_OW 109
// if GetTag ( unit ) = 1 then
6213: LD_VAR 0 8
6217: PPUSH
6218: CALL_OW 110
6222: PUSH
6223: LD_INT 1
6225: EQUAL
6226: IFFALSE 6242
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6228: LD_ADDR_VAR 0 20
6232: PUSH
6233: LD_VAR 0 20
6237: PUSH
6238: LD_INT 1
6240: PLUS
6241: ST_TO_ADDR
// end ;
6242: GO 6070
6244: POP
6245: POP
// wait ( 0 0$1 ) ;
6246: LD_INT 35
6248: PPUSH
6249: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6253: LD_VAR 0 20
6257: PUSH
6258: LD_VAR 0 9
6262: PUSH
6263: LD_INT 3
6265: MINUS
6266: GREATER
6267: IFFALSE 6052
// wait ( 0 0$10 ) ;
6269: LD_INT 350
6271: PPUSH
6272: CALL_OW 67
// end ; for attackUnit in attackUnits do
6276: LD_ADDR_VAR 0 10
6280: PUSH
6281: LD_VAR 0 9
6285: PUSH
6286: FOR_IN
6287: IFFALSE 6303
// SetTag ( attackUnit , 2 ) ;
6289: LD_VAR 0 10
6293: PPUSH
6294: LD_INT 2
6296: PPUSH
6297: CALL_OW 109
6301: GO 6286
6303: POP
6304: POP
// startAttacks = true ;
6305: LD_ADDR_VAR 0 21
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// if startAttacks then
6313: LD_VAR 0 21
6317: IFFALSE 7136
// begin repeat wait ( 0 0$1 ) ;
6319: LD_INT 35
6321: PPUSH
6322: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6326: LD_ADDR_VAR 0 11
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 50
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 72
6360: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6361: LD_ADDR_VAR 0 13
6365: PUSH
6366: LD_VAR 0 1
6370: PPUSH
6371: LD_INT 21
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: LD_INT 25
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 24
6396: PUSH
6397: LD_INT 1000
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: ST_TO_ADDR
// if damageUnits and medics then
6418: LD_VAR 0 13
6422: PUSH
6423: LD_VAR 0 11
6427: AND
6428: IFFALSE 6450
// ComHeal ( medics , damageUnits [ 1 ] ) else
6430: LD_VAR 0 11
6434: PPUSH
6435: LD_VAR 0 13
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: CALL_OW 128
6448: GO 6500
// if medics and not damageUnits then
6450: LD_VAR 0 11
6454: PUSH
6455: LD_VAR 0 13
6459: NOT
6460: AND
6461: IFFALSE 6500
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6463: LD_VAR 0 11
6467: PPUSH
6468: LD_VAR 0 9
6472: PUSH
6473: LD_INT 1
6475: ARRAY
6476: PPUSH
6477: CALL_OW 250
6481: PPUSH
6482: LD_VAR 0 9
6486: PUSH
6487: LD_INT 1
6489: ARRAY
6490: PPUSH
6491: CALL_OW 251
6495: PPUSH
6496: CALL_OW 111
// for attackUnit in attackUnits do
6500: LD_ADDR_VAR 0 10
6504: PUSH
6505: LD_VAR 0 9
6509: PUSH
6510: FOR_IN
6511: IFFALSE 7127
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6513: LD_ADDR_VAR 0 22
6517: PUSH
6518: LD_INT 81
6520: PUSH
6521: LD_VAR 0 10
6525: PPUSH
6526: CALL_OW 255
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: PPUSH
6540: LD_VAR 0 10
6544: PPUSH
6545: CALL_OW 74
6549: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6550: LD_ADDR_VAR 0 23
6554: PUSH
6555: LD_INT 81
6557: PUSH
6558: LD_VAR 0 10
6562: PPUSH
6563: CALL_OW 255
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 59
6577: PUSH
6578: EMPTY
6579: LIST
6580: PUSH
6581: LD_INT 21
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 21
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: PPUSH
6619: LD_VAR 0 10
6623: PPUSH
6624: CALL_OW 74
6628: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6629: LD_VAR 0 10
6633: PPUSH
6634: CALL_OW 110
6638: PUSH
6639: LD_INT 2
6641: EQUAL
6642: IFFALSE 6802
// begin if GetDistUnits ( attackUnit , target1 ) + 8 < GetDistUnits ( attackUnit , target2 ) then
6644: LD_VAR 0 10
6648: PPUSH
6649: LD_VAR 0 22
6653: PPUSH
6654: CALL_OW 296
6658: PUSH
6659: LD_INT 8
6661: PLUS
6662: PUSH
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 23
6672: PPUSH
6673: CALL_OW 296
6677: LESS
6678: IFFALSE 6696
// ComAttackUnit ( attackUnit , target1 ) else
6680: LD_VAR 0 10
6684: PPUSH
6685: LD_VAR 0 22
6689: PPUSH
6690: CALL_OW 115
6694: GO 6710
// ComAttackUnit ( attackUnit , target2 ) ;
6696: LD_VAR 0 10
6700: PPUSH
6701: LD_VAR 0 23
6705: PPUSH
6706: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6710: LD_VAR 0 10
6714: PPUSH
6715: CALL_OW 256
6719: PUSH
6720: LD_INT 650
6722: LESS
6723: PUSH
6724: LD_VAR 0 10
6728: PPUSH
6729: CALL_OW 247
6733: PUSH
6734: LD_INT 2
6736: EQUAL
6737: AND
6738: PUSH
6739: LD_VAR 0 10
6743: PPUSH
6744: CALL_OW 263
6748: PUSH
6749: LD_INT 1
6751: EQUAL
6752: AND
6753: IFFALSE 6802
// begin SetTag ( attackUnit , 3 ) ;
6755: LD_VAR 0 10
6759: PPUSH
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 313
6776: PUSH
6777: LD_INT 1
6779: ARRAY
6780: PPUSH
6781: LD_INT 3
6783: PPUSH
6784: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6788: LD_VAR 0 10
6792: PPUSH
6793: LD_VAR 0 5
6797: PPUSH
6798: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6802: LD_VAR 0 10
6806: PPUSH
6807: LD_VAR 0 5
6811: PPUSH
6812: CALL_OW 308
6816: PUSH
6817: LD_VAR 0 10
6821: PPUSH
6822: CALL_OW 110
6826: PUSH
6827: LD_INT 3
6829: EQUAL
6830: AND
6831: PUSH
6832: LD_VAR 0 10
6836: PPUSH
6837: CALL_OW 313
6841: AND
6842: IFFALSE 6915
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6844: LD_ADDR_VAR 0 14
6848: PUSH
6849: LD_VAR 0 10
6853: PPUSH
6854: CALL_OW 313
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: ST_TO_ADDR
// if not driver in mechanics then
6863: LD_VAR 0 14
6867: PUSH
6868: LD_VAR 0 12
6872: IN
6873: NOT
6874: IFFALSE 6892
// mechanics = mechanics ^ driver ;
6876: LD_ADDR_VAR 0 12
6880: PUSH
6881: LD_VAR 0 12
6885: PUSH
6886: LD_VAR 0 14
6890: ADD
6891: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6892: LD_VAR 0 14
6896: PPUSH
6897: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6901: LD_VAR 0 14
6905: PPUSH
6906: LD_VAR 0 10
6910: PPUSH
6911: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6915: LD_VAR 0 10
6919: PPUSH
6920: CALL_OW 256
6924: PUSH
6925: LD_INT 1000
6927: EQUAL
6928: IFFALSE 7046
// begin SetTag ( attackUnit , 2 ) ;
6930: LD_VAR 0 10
6934: PPUSH
6935: LD_INT 2
6937: PPUSH
6938: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6942: LD_VAR 0 10
6946: PPUSH
6947: CALL_OW 247
6951: PUSH
6952: LD_INT 2
6954: EQUAL
6955: PUSH
6956: LD_VAR 0 10
6960: PPUSH
6961: CALL_OW 263
6965: PUSH
6966: LD_INT 1
6968: EQUAL
6969: AND
6970: PUSH
6971: LD_VAR 0 10
6975: PPUSH
6976: CALL_OW 313
6980: NOT
6981: AND
6982: IFFALSE 7046
// begin SetFuel ( attackUnit , 100 ) ;
6984: LD_VAR 0 10
6988: PPUSH
6989: LD_INT 100
6991: PPUSH
6992: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6996: LD_VAR 0 12
7000: PPUSH
7001: LD_VAR 0 10
7005: PPUSH
7006: CALL_OW 74
7010: PPUSH
7011: LD_VAR 0 10
7015: PPUSH
7016: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7020: LD_ADDR_VAR 0 12
7024: PUSH
7025: LD_VAR 0 12
7029: PUSH
7030: LD_VAR 0 12
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 74
7044: DIFF
7045: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7046: LD_ADDR_VAR 0 8
7050: PUSH
7051: LD_VAR 0 12
7055: PUSH
7056: FOR_IN
7057: IFFALSE 7123
// begin if not IsInArea ( unit , retreatArea ) then
7059: LD_VAR 0 8
7063: PPUSH
7064: LD_VAR 0 5
7068: PPUSH
7069: CALL_OW 308
7073: NOT
7074: IFFALSE 7090
// ComMoveToArea ( unit , retreatArea ) ;
7076: LD_VAR 0 8
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 113
// if GetLives ( unit ) < 250 then
7090: LD_VAR 0 8
7094: PPUSH
7095: CALL_OW 256
7099: PUSH
7100: LD_INT 250
7102: LESS
7103: IFFALSE 7121
// mechanics = mechanics diff unit ;
7105: LD_ADDR_VAR 0 12
7109: PUSH
7110: LD_VAR 0 12
7114: PUSH
7115: LD_VAR 0 8
7119: DIFF
7120: ST_TO_ADDR
// end ;
7121: GO 7056
7123: POP
7124: POP
// end ;
7125: GO 6510
7127: POP
7128: POP
// until not attackUnits ;
7129: LD_VAR 0 9
7133: NOT
7134: IFFALSE 6319
// end ; wait ( 0 0$1 ) ;
7136: LD_INT 35
7138: PPUSH
7139: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7143: LD_VAR 0 1
7147: PPUSH
7148: LD_INT 50
7150: PUSH
7151: EMPTY
7152: LIST
7153: PPUSH
7154: CALL_OW 72
7158: NOT
7159: IFFALSE 5142
// end ;
7161: LD_VAR 0 6
7165: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7166: LD_INT 0
7168: PPUSH
7169: PPUSH
7170: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7171: LD_ADDR_VAR 0 5
7175: PUSH
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PUSH
7185: LD_INT 1
7187: ARRAY
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: LD_INT 1
7196: ARRAY
7197: PUSH
7198: LD_INT 2
7200: ARRAY
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// for i := 2 to path do
7206: LD_ADDR_VAR 0 4
7210: PUSH
7211: DOUBLE
7212: LD_INT 2
7214: DEC
7215: ST_TO_ADDR
7216: LD_VAR 0 2
7220: PUSH
7221: FOR_TO
7222: IFFALSE 7362
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_VAR 0 2
7233: PUSH
7234: LD_VAR 0 4
7238: ARRAY
7239: PUSH
7240: LD_INT 1
7242: ARRAY
7243: PPUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_VAR 0 4
7253: ARRAY
7254: PUSH
7255: LD_INT 2
7257: ARRAY
7258: PPUSH
7259: CALL_OW 297
7263: PUSH
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 5
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL_OW 297
7291: LESS
7292: IFFALSE 7360
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7294: LD_ADDR_VAR 0 5
7298: PUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_VAR 0 4
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: CALL_OW 1
7326: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7327: LD_ADDR_VAR 0 5
7331: PUSH
7332: LD_VAR 0 5
7336: PPUSH
7337: LD_INT 2
7339: PPUSH
7340: LD_VAR 0 2
7344: PUSH
7345: LD_VAR 0 4
7349: ARRAY
7350: PUSH
7351: LD_INT 2
7353: ARRAY
7354: PPUSH
7355: CALL_OW 1
7359: ST_TO_ADDR
// end ; end ;
7360: GO 7221
7362: POP
7363: POP
// result = nearPosition ;
7364: LD_ADDR_VAR 0 3
7368: PUSH
7369: LD_VAR 0 5
7373: ST_TO_ADDR
// end ;
7374: LD_VAR 0 3
7378: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7379: LD_EXP 58
7383: PPUSH
7384: CALL_OW 274
7388: PPUSH
7389: LD_INT 1
7391: PPUSH
7392: CALL_OW 275
7396: PUSH
7397: LD_INT 0
7399: GREATER
7400: IFFALSE 7506
7402: GO 7404
7404: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7405: LD_EXP 57
7409: PPUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 72
7424: PPUSH
7425: LD_INT 31
7427: PPUSH
7428: LD_INT 105
7430: PPUSH
7431: LD_INT 51
7433: PPUSH
7434: LD_INT 3
7436: PPUSH
7437: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7441: LD_EXP 57
7445: PPUSH
7446: LD_INT 25
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 72
7460: PPUSH
7461: LD_INT 31
7463: PPUSH
7464: LD_INT 114
7466: PPUSH
7467: LD_INT 58
7469: PPUSH
7470: LD_INT 3
7472: PPUSH
7473: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7477: LD_EXP 57
7481: PPUSH
7482: LD_INT 25
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 72
7496: PPUSH
7497: LD_EXP 58
7501: PPUSH
7502: CALL_OW 180
// end ; end_of_file
7506: END
// export function Lose_Burlak ; begin
7507: LD_INT 0
7509: PPUSH
// YouLost ( Burlak ) ;
7510: LD_STRING Burlak
7512: PPUSH
7513: CALL_OW 104
// end ;
7517: LD_VAR 0 1
7521: RET
// export function Lose_Gaydar ; begin
7522: LD_INT 0
7524: PPUSH
// YouLost ( Gaydar ) ;
7525: LD_STRING Gaydar
7527: PPUSH
7528: CALL_OW 104
// end ;
7532: LD_VAR 0 1
7536: RET
// export function Lose_SelfAttack ; begin
7537: LD_INT 0
7539: PPUSH
// YouLost ( SelfAttack ) ;
7540: LD_STRING SelfAttack
7542: PPUSH
7543: CALL_OW 104
// end ;
7547: LD_VAR 0 1
7551: RET
// export function Lose_Arrest ; begin
7552: LD_INT 0
7554: PPUSH
// YouLost ( Arrest ) ;
7555: LD_STRING Arrest
7557: PPUSH
7558: CALL_OW 104
// end ;
7562: LD_VAR 0 1
7566: RET
// export function Lose_ArabBreakthrough ; begin
7567: LD_INT 0
7569: PPUSH
// YouLost ( ArabBreakthrough ) ;
7570: LD_STRING ArabBreakthrough
7572: PPUSH
7573: CALL_OW 104
// end ;
7577: LD_VAR 0 1
7581: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7582: LD_EXP 7
7586: NOT
7587: PUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 21
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 25
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: NOT
7628: AND
7629: PUSH
7630: LD_INT 22
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 21
7642: PUSH
7643: LD_INT 3
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 30
7652: PUSH
7653: LD_INT 0
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: PPUSH
7665: CALL_OW 69
7669: NOT
7670: AND
7671: IFFALSE 7684
7673: GO 7675
7675: DISABLE
// begin enable ;
7676: ENABLE
// YouLost ( Engineer ) ;
7677: LD_STRING Engineer
7679: PPUSH
7680: CALL_OW 104
// end ; end_of_file
7684: END
// export function FinishMission ; begin
7685: LD_INT 0
7687: PPUSH
// SetRewards ;
7688: CALL 7709 0 0
// SavePlayerCharacters ;
7692: CALL 8134 0 0
// SaveGlobalVariables ;
7696: CALL 8362 0 0
// YouWin ;
7700: CALL_OW 103
// end ;
7704: LD_VAR 0 1
7708: RET
// function SetRewards ; var unitsToReward ; begin
7709: LD_INT 0
7711: PPUSH
7712: PPUSH
// SetAchievements ;
7713: CALL 18543 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7717: LD_INT 22
7719: PUSH
7720: LD_INT 3
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 3
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 69
7745: NOT
7746: IFFALSE 7760
// AddMedal ( Dismantle , 1 ) else
7748: LD_STRING Dismantle
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 101
7758: GO 7771
// AddMedal ( Dismantle , - 1 ) ;
7760: LD_STRING Dismantle
7762: PPUSH
7763: LD_INT 1
7765: NEG
7766: PPUSH
7767: CALL_OW 101
// if killedArabianUnits >= 25 then
7771: LD_EXP 22
7775: PUSH
7776: LD_INT 25
7778: GREATEREQUAL
7779: IFFALSE 7801
// begin AddMedal ( EnemyLosses , 1 ) ;
7781: LD_STRING EnemyLosses
7783: PPUSH
7784: LD_INT 1
7786: PPUSH
7787: CALL_OW 101
// heikeHeavyLosses = true ;
7791: LD_ADDR_EXP 4
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// end else
7799: GO 7812
// AddMedal ( EnemyLosses , - 1 ) ;
7801: LD_STRING EnemyLosses
7803: PPUSH
7804: LD_INT 1
7806: NEG
7807: PPUSH
7808: CALL_OW 101
// if not lostUnits then
7812: LD_EXP 24
7816: NOT
7817: IFFALSE 7831
// AddMedal ( LittleLosses , 1 ) else
7819: LD_STRING LittleLosses
7821: PPUSH
7822: LD_INT 1
7824: PPUSH
7825: CALL_OW 101
7829: GO 7842
// AddMedal ( LittleLosses , - 1 ) ;
7831: LD_STRING LittleLosses
7833: PPUSH
7834: LD_INT 1
7836: NEG
7837: PPUSH
7838: CALL_OW 101
// GiveMedals ( Main ) ;
7842: LD_STRING Main
7844: PPUSH
7845: CALL_OW 102
// unitsToReward = [ ] ;
7849: LD_ADDR_VAR 0 2
7853: PUSH
7854: EMPTY
7855: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7856: LD_EXP 42
7860: PPUSH
7861: CALL_OW 255
7865: PUSH
7866: LD_INT 3
7868: EQUAL
7869: IFFALSE 7887
// unitsToReward = unitsToReward ^ Burlak ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_VAR 0 2
7880: PUSH
7881: LD_EXP 42
7885: ADD
7886: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7887: LD_EXP 43
7891: PPUSH
7892: CALL_OW 255
7896: PUSH
7897: LD_INT 3
7899: EQUAL
7900: IFFALSE 7918
// unitsToReward = unitsToReward ^ Gnyevko ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 2
7911: PUSH
7912: LD_EXP 43
7916: ADD
7917: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7918: LD_EXP 44
7922: PPUSH
7923: CALL_OW 255
7927: PUSH
7928: LD_INT 3
7930: EQUAL
7931: IFFALSE 7949
// unitsToReward = unitsToReward ^ Kirilenkova ;
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_VAR 0 2
7942: PUSH
7943: LD_EXP 44
7947: ADD
7948: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7949: LD_EXP 45
7953: PPUSH
7954: CALL_OW 255
7958: PUSH
7959: LD_INT 3
7961: EQUAL
7962: IFFALSE 7980
// unitsToReward = unitsToReward ^ Kovalyuk ;
7964: LD_ADDR_VAR 0 2
7968: PUSH
7969: LD_VAR 0 2
7973: PUSH
7974: LD_EXP 45
7978: ADD
7979: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
7980: LD_EXP 46
7984: PPUSH
7985: CALL_OW 255
7989: PUSH
7990: LD_INT 3
7992: EQUAL
7993: IFFALSE 8011
// unitsToReward = unitsToReward ^ Belkov ;
7995: LD_ADDR_VAR 0 2
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_EXP 46
8009: ADD
8010: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8011: LD_EXP 47
8015: PPUSH
8016: CALL_OW 255
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8042
// unitsToReward = unitsToReward ^ Belkov2 ;
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 2
8035: PUSH
8036: LD_EXP 47
8040: ADD
8041: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8042: LD_EXP 48
8046: PPUSH
8047: CALL_OW 255
8051: PUSH
8052: LD_INT 3
8054: EQUAL
8055: IFFALSE 8073
// unitsToReward = unitsToReward ^ Scholtze ;
8057: LD_ADDR_VAR 0 2
8061: PUSH
8062: LD_VAR 0 2
8066: PUSH
8067: LD_EXP 48
8071: ADD
8072: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8073: LD_EXP 49
8077: PPUSH
8078: CALL_OW 255
8082: PUSH
8083: LD_INT 3
8085: EQUAL
8086: IFFALSE 8104
// unitsToReward = unitsToReward ^ Kuzmov ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_VAR 0 2
8097: PUSH
8098: LD_EXP 49
8102: ADD
8103: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_EXP 62
8118: ADD
8119: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: CALL_OW 43
// end ;
8129: LD_VAR 0 1
8133: RET
// function SavePlayerCharacters ; var othersYour ; begin
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8138: LD_EXP 42
8142: PPUSH
8143: LD_STRING 04_Burlak
8145: PPUSH
8146: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8150: LD_EXP 43
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_INT 3
8162: EQUAL
8163: IFFALSE 8177
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8165: LD_EXP 43
8169: PPUSH
8170: LD_STRING 04_Gnyevko
8172: PPUSH
8173: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8177: LD_EXP 45
8181: PPUSH
8182: CALL_OW 255
8186: PUSH
8187: LD_INT 3
8189: EQUAL
8190: IFFALSE 8204
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8192: LD_EXP 45
8196: PPUSH
8197: LD_STRING 04_Kovalyuk
8199: PPUSH
8200: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8204: LD_EXP 44
8208: PPUSH
8209: CALL_OW 255
8213: PUSH
8214: LD_INT 3
8216: EQUAL
8217: IFFALSE 8231
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8219: LD_EXP 44
8223: PPUSH
8224: LD_STRING 04_Kirilenkova
8226: PPUSH
8227: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8231: LD_EXP 48
8235: PPUSH
8236: CALL_OW 255
8240: PUSH
8241: LD_INT 3
8243: EQUAL
8244: IFFALSE 8258
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8246: LD_EXP 48
8250: PPUSH
8251: LD_STRING 04_Scholtze
8253: PPUSH
8254: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8258: LD_EXP 46
8262: PPUSH
8263: CALL_OW 255
8267: PUSH
8268: LD_INT 3
8270: EQUAL
8271: IFFALSE 8285
// SaveCharacters ( Belkov , 04_Belkov ) ;
8273: LD_EXP 46
8277: PPUSH
8278: LD_STRING 04_Belkov
8280: PPUSH
8281: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8285: LD_EXP 47
8289: PPUSH
8290: CALL_OW 255
8294: PUSH
8295: LD_INT 3
8297: EQUAL
8298: IFFALSE 8312
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8300: LD_EXP 47
8304: PPUSH
8305: LD_STRING 04_Belkov2
8307: PPUSH
8308: CALL_OW 38
// if IsOK ( Kuzmov ) then
8312: LD_EXP 49
8316: PPUSH
8317: CALL_OW 302
8321: IFFALSE 8335
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8323: LD_EXP 49
8327: PPUSH
8328: LD_STRING 04_Kuzmov
8330: PPUSH
8331: CALL_OW 38
// othersYour = randomsToSave ;
8335: LD_ADDR_VAR 0 2
8339: PUSH
8340: LD_EXP 62
8344: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8345: LD_EXP 62
8349: PPUSH
8350: LD_STRING 04_other_survivors
8352: PPUSH
8353: CALL_OW 38
// end ;
8357: LD_VAR 0 1
8361: RET
// function SaveGlobalVariables ; begin
8362: LD_INT 0
8364: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8365: LD_EXP 4
8369: PPUSH
8370: LD_STRING 04_HeikeHeavyLosses_1
8372: PPUSH
8373: CALL_OW 39
// end ; end_of_file
8377: LD_VAR 0 1
8381: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 255
8391: PUSH
8392: LD_INT 3
8394: EQUAL
8395: PUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 266
8405: PUSH
8406: LD_INT 0
8408: EQUAL
8409: AND
8410: PUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: LD_INT 5
8418: PPUSH
8419: CALL_OW 308
8423: NOT
8424: AND
8425: IFFALSE 8436
// Dial_DepotInWrongPlace ( building ) ;
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL 11025 0 1
// end ;
8436: PPOPN 2
8438: END
// on BuildingComplete ( building ) do var i , cargo ;
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 255
8452: PUSH
8453: LD_INT 3
8455: EQUAL
8456: PUSH
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 266
8466: PUSH
8467: LD_INT 0
8469: EQUAL
8470: AND
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: LD_INT 5
8479: PPUSH
8480: CALL_OW 308
8484: AND
8485: PUSH
8486: LD_EXP 8
8490: NOT
8491: AND
8492: PUSH
8493: LD_EXP 9
8497: NOT
8498: AND
8499: IFFALSE 8525
// begin namedBase = true ;
8501: LD_ADDR_EXP 9
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8509: LD_VAR 0 1
8513: PPUSH
8514: LD_STRING chuikov
8516: PPUSH
8517: CALL_OW 500
// Dial_FinishDepot ;
8521: CALL 11299 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 255
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 266
8548: PUSH
8549: LD_INT 32
8551: EQUAL
8552: AND
8553: IFFALSE 8569
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8555: LD_ADDR_EXP 25
8559: PUSH
8560: LD_EXP 25
8564: PUSH
8565: LD_INT 1
8567: PLUS
8568: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 255
8578: PUSH
8579: LD_INT 6
8581: EQUAL
8582: PUSH
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 266
8592: PUSH
8593: LD_INT 0
8595: EQUAL
8596: AND
8597: IFFALSE 8796
// begin secondBaseDepot = building ;
8599: LD_ADDR_EXP 58
8603: PUSH
8604: LD_VAR 0 1
8608: ST_TO_ADDR
// uc_side = 6 ;
8609: LD_ADDR_OWVAR 20
8613: PUSH
8614: LD_INT 6
8616: ST_TO_ADDR
// uc_nation = nation_russian ;
8617: LD_ADDR_OWVAR 21
8621: PUSH
8622: LD_INT 3
8624: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8625: LD_ADDR_OWVAR 37
8629: PUSH
8630: LD_INT 21
8632: ST_TO_ADDR
// vc_control = control_manual ;
8633: LD_ADDR_OWVAR 38
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// vc_engine = engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8649: LD_ADDR_OWVAR 40
8653: PUSH
8654: LD_INT 51
8656: ST_TO_ADDR
// cargo = CreateVehicle ;
8657: LD_ADDR_VAR 0 3
8661: PUSH
8662: CALL_OW 45
8666: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_INT 3
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_INT 100
8692: PPUSH
8693: CALL_OW 291
// ComGive ( cargo , building ) ;
8697: LD_VAR 0 3
8701: PPUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8721: CALL_OW 44
8725: PPUSH
8726: LD_VAR 0 3
8730: PPUSH
8731: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: DOUBLE
8741: LD_INT 10
8743: DEC
8744: ST_TO_ADDR
8745: LD_EXP 34
8749: PUSH
8750: FOR_TO
8751: IFFALSE 8794
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8753: LD_VAR 0 3
8757: PPUSH
8758: LD_EXP 34
8762: PUSH
8763: LD_VAR 0 2
8767: ARRAY
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_EXP 34
8777: PUSH
8778: LD_VAR 0 2
8782: ARRAY
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PPUSH
8788: CALL_OW 171
8792: GO 8750
8794: POP
8795: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 255
8805: PUSH
8806: LD_INT 6
8808: EQUAL
8809: PUSH
8810: LD_VAR 0 1
8814: PPUSH
8815: CALL_OW 266
8819: PUSH
8820: LD_INT 31
8822: EQUAL
8823: AND
8824: IFFALSE 8869
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8826: LD_EXP 57
8830: PPUSH
8831: LD_INT 25
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 56
8843: PUSH
8844: EMPTY
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 72
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 120
// end ;
8869: PPOPN 3
8871: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 266
8881: PUSH
8882: LD_INT 7
8884: EQUAL
8885: PUSH
8886: LD_EXP 15
8890: NOT
8891: AND
8892: IFFALSE 8898
// Dial_LabUpgraded ;
8894: CALL 11619 0 0
// end ;
8898: PPOPN 1
8900: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8901: LD_VAR 0 1
8905: PUSH
8906: LD_INT 3
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PUSH
8915: LD_INT 2
8917: EQUAL
8918: AND
8919: PUSH
8920: LD_VAR 0 1
8924: PUSH
8925: LD_INT 2
8927: EQUAL
8928: PUSH
8929: LD_VAR 0 2
8933: PUSH
8934: LD_INT 3
8936: EQUAL
8937: AND
8938: OR
8939: IFFALSE 8961
// begin if dial_contactBlock then
8941: LD_EXP 16
8945: IFFALSE 8949
// exit ;
8947: GO 9005
// dial_contactBlock = true ;
8949: LD_ADDR_EXP 16
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// Dial_Contact ;
8957: CALL 13844 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8961: LD_VAR 0 1
8965: PUSH
8966: LD_INT 3
8968: EQUAL
8969: PUSH
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 6
8977: EQUAL
8978: AND
8979: PUSH
8980: LD_VAR 0 1
8984: PUSH
8985: LD_INT 6
8987: EQUAL
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: LD_INT 3
8996: EQUAL
8997: AND
8998: OR
8999: IFFALSE 9005
// Lose_SelfAttack ;
9001: CALL 7537 0 0
// end ;
9005: PPOPN 2
9007: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9008: LD_VAR 0 1
9012: PUSH
9013: LD_EXP 42
9017: EQUAL
9018: IFFALSE 9024
// Lose_Burlak ;
9020: CALL 7507 0 0
// if unit = Gaydar then
9024: LD_VAR 0 1
9028: PUSH
9029: LD_EXP 54
9033: EQUAL
9034: IFFALSE 9040
// Lose_Gaydar ;
9036: CALL 7522 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9040: LD_VAR 0 1
9044: PPUSH
9045: CALL_OW 255
9049: PUSH
9050: LD_INT 3
9052: EQUAL
9053: PUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 247
9063: PUSH
9064: LD_INT 1
9066: EQUAL
9067: AND
9068: IFFALSE 9084
// lostUnits = lostUnits + 1 ;
9070: LD_ADDR_EXP 24
9074: PUSH
9075: LD_EXP 24
9079: PUSH
9080: LD_INT 1
9082: PLUS
9083: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PUSH
9094: LD_INT 2
9096: EQUAL
9097: PUSH
9098: LD_VAR 0 1
9102: PPUSH
9103: CALL_OW 247
9107: PUSH
9108: LD_INT 1
9110: EQUAL
9111: AND
9112: PUSH
9113: LD_EXP 54
9117: PPUSH
9118: CALL_OW 305
9122: NOT
9123: AND
9124: IFFALSE 9140
// killedArabianUnits = killedArabianUnits + 1 ;
9126: LD_ADDR_EXP 22
9130: PUSH
9131: LD_EXP 22
9135: PUSH
9136: LD_INT 1
9138: PLUS
9139: ST_TO_ADDR
// if unit in firstAttackGroup then
9140: LD_VAR 0 1
9144: PUSH
9145: LD_EXP 64
9149: IN
9150: IFFALSE 9168
// firstAttackGroup = firstAttackGroup diff unit ;
9152: LD_ADDR_EXP 64
9156: PUSH
9157: LD_EXP 64
9161: PUSH
9162: LD_VAR 0 1
9166: DIFF
9167: ST_TO_ADDR
// end ;
9168: PPOPN 1
9170: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9171: LD_VAR 0 2
9175: PUSH
9176: LD_INT 6
9178: EQUAL
9179: IFFALSE 9193
// SetSide ( building , 6 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 6
9188: PPUSH
9189: CALL_OW 235
// end ;
9193: PPOPN 3
9195: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 34
9225: PUSH
9226: LD_INT 51
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 21
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PPUSH
9252: CALL_OW 69
9256: PUSH
9257: FOR_IN
9258: IFFALSE 9380
// if GetTaskList ( i ) > 0 then
9260: LD_VAR 0 2
9264: PPUSH
9265: CALL_OW 437
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9378
// for j = 1 to GetTaskList ( i ) do
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: DOUBLE
9281: LD_INT 1
9283: DEC
9284: ST_TO_ADDR
9285: LD_VAR 0 2
9289: PPUSH
9290: CALL_OW 437
9294: PUSH
9295: FOR_TO
9296: IFFALSE 9376
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9298: LD_ADDR_VAR 0 4
9302: PUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: CALL_OW 437
9312: PUSH
9313: LD_VAR 0 3
9317: ARRAY
9318: PUSH
9319: LD_INT 4
9321: ARRAY
9322: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9323: LD_VAR 0 4
9327: PPUSH
9328: CALL_OW 255
9332: PUSH
9333: LD_INT 6
9335: EQUAL
9336: PUSH
9337: LD_VAR 0 2
9341: PPUSH
9342: CALL_OW 437
9346: PUSH
9347: LD_VAR 0 3
9351: ARRAY
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PUSH
9357: LD_STRING <
9359: EQUAL
9360: AND
9361: IFFALSE 9374
// SetTaskList ( i , [ ] ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: EMPTY
9369: PPUSH
9370: CALL_OW 446
// end ;
9374: GO 9295
9376: POP
9377: POP
9378: GO 9257
9380: POP
9381: POP
// end ; end_of_file
9382: PPOPN 8
9384: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9385: LD_INT 0
9387: PPUSH
9388: PPUSH
// if exist_mode then
9389: LD_VAR 0 2
9393: IFFALSE 9418
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_EXP 30
9404: PUSH
9405: LD_VAR 0 1
9409: STR
9410: PPUSH
9411: CALL_OW 34
9415: ST_TO_ADDR
9416: GO 9433
// unit := NewCharacter ( ident ) ;
9418: LD_ADDR_VAR 0 5
9422: PUSH
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 25
9432: ST_TO_ADDR
// if class then
9433: LD_VAR 0 3
9437: IFFALSE 9453
// SetClass ( unit , class ) ;
9439: LD_VAR 0 5
9443: PPUSH
9444: LD_VAR 0 3
9448: PPUSH
9449: CALL_OW 336
// result := unit ;
9453: LD_ADDR_VAR 0 4
9457: PUSH
9458: LD_VAR 0 5
9462: ST_TO_ADDR
// end ;
9463: LD_VAR 0 4
9467: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9468: LD_INT 0
9470: PPUSH
9471: PPUSH
// for unit in units do
9472: LD_ADDR_VAR 0 5
9476: PUSH
9477: LD_VAR 0 1
9481: PUSH
9482: FOR_IN
9483: IFFALSE 9506
// PlaceUnitArea ( unit , area , spawnMode ) ;
9485: LD_VAR 0 5
9489: PPUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: LD_VAR 0 3
9499: PPUSH
9500: CALL_OW 49
9504: GO 9482
9506: POP
9507: POP
// end ;
9508: LD_VAR 0 4
9512: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9513: LD_INT 0
9515: PPUSH
9516: PPUSH
9517: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9518: LD_ADDR_VAR 0 1
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: LD_EXP 42
9532: PUSH
9533: LD_EXP 43
9537: PUSH
9538: LD_EXP 46
9542: PUSH
9543: LD_EXP 47
9547: PUSH
9548: LD_EXP 44
9552: PUSH
9553: LD_EXP 45
9557: PUSH
9558: LD_EXP 48
9562: PUSH
9563: LD_EXP 49
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: DIFF
9578: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9579: LD_ADDR_VAR 0 7
9583: PUSH
9584: LD_VAR 0 1
9588: PUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_VAR 0 1
9596: PPUSH
9597: CALL_OW 12
9601: ARRAY
9602: ST_TO_ADDR
// if radio then
9603: LD_VAR 0 4
9607: IFFALSE 9656
// begin if GetSex ( speaker ) = sex_male then
9609: LD_VAR 0 7
9613: PPUSH
9614: CALL_OW 258
9618: PUSH
9619: LD_INT 1
9621: EQUAL
9622: IFFALSE 9640
// SayRadio ( speaker , dialogMID ) else
9624: LD_VAR 0 7
9628: PPUSH
9629: LD_VAR 0 2
9633: PPUSH
9634: CALL_OW 94
9638: GO 9654
// SayRadio ( speaker , dialogFID ) ;
9640: LD_VAR 0 7
9644: PPUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: CALL_OW 94
// end else
9654: GO 9701
// begin if GetSex ( speaker ) = sex_male then
9656: LD_VAR 0 7
9660: PPUSH
9661: CALL_OW 258
9665: PUSH
9666: LD_INT 1
9668: EQUAL
9669: IFFALSE 9687
// Say ( speaker , dialogMID ) else
9671: LD_VAR 0 7
9675: PPUSH
9676: LD_VAR 0 2
9680: PPUSH
9681: CALL_OW 88
9685: GO 9701
// Say ( speaker , dialogFID ) ;
9687: LD_VAR 0 7
9691: PPUSH
9692: LD_VAR 0 3
9696: PPUSH
9697: CALL_OW 88
// end ; result := speaker ;
9701: LD_ADDR_VAR 0 5
9705: PUSH
9706: LD_VAR 0 7
9710: ST_TO_ADDR
// end ;
9711: LD_VAR 0 5
9715: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9716: LD_INT 0
9718: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 255
9728: PUSH
9729: LD_VAR 0 3
9733: EQUAL
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL_OW 302
9744: AND
9745: IFFALSE 9767
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_EXP 29
9756: PUSH
9757: LD_VAR 0 2
9761: STR
9762: PPUSH
9763: CALL_OW 38
// end ;
9767: LD_VAR 0 4
9771: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9772: LD_INT 0
9774: PPUSH
9775: PPUSH
9776: PPUSH
// resultCharactersToSave = [ ] ;
9777: LD_ADDR_VAR 0 6
9781: PUSH
9782: EMPTY
9783: ST_TO_ADDR
// for unit in characters do
9784: LD_ADDR_VAR 0 5
9788: PUSH
9789: LD_VAR 0 1
9793: PUSH
9794: FOR_IN
9795: IFFALSE 9843
// if GetSide ( unit ) = side and IsOK ( unit ) then
9797: LD_VAR 0 5
9801: PPUSH
9802: CALL_OW 255
9806: PUSH
9807: LD_VAR 0 3
9811: EQUAL
9812: PUSH
9813: LD_VAR 0 5
9817: PPUSH
9818: CALL_OW 302
9822: AND
9823: IFFALSE 9841
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9825: LD_ADDR_VAR 0 6
9829: PUSH
9830: LD_VAR 0 6
9834: PUSH
9835: LD_VAR 0 5
9839: ADD
9840: ST_TO_ADDR
9841: GO 9794
9843: POP
9844: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9845: LD_VAR 0 6
9849: PPUSH
9850: LD_EXP 29
9854: PUSH
9855: LD_VAR 0 2
9859: STR
9860: PPUSH
9861: CALL_OW 38
// end ;
9865: LD_VAR 0 4
9869: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9870: LD_INT 0
9872: PPUSH
9873: PPUSH
9874: PPUSH
9875: PPUSH
9876: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9877: LD_ADDR_VAR 0 3
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 21
9894: PUSH
9895: LD_INT 1
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 50
9904: PUSH
9905: EMPTY
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: PPUSH
9913: CALL_OW 69
9917: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9918: LD_ADDR_VAR 0 3
9922: PUSH
9923: LD_VAR 0 3
9927: PUSH
9928: LD_EXP 42
9932: DIFF
9933: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9934: LD_ADDR_VAR 0 3
9938: PUSH
9939: LD_VAR 0 3
9943: PUSH
9944: LD_EXP 52
9948: DIFF
9949: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_STRING text
9957: PPUSH
9958: LD_INT 8
9960: PPUSH
9961: LD_INT 8
9963: PPUSH
9964: LD_INT -5
9966: PUSH
9967: LD_EXP 42
9971: PUSH
9972: LD_INT -6
9974: PUSH
9975: LD_INT -2
9977: PUSH
9978: LD_INT -3
9980: PUSH
9981: LD_INT -5
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_VAR 0 3
9996: ADD
9997: PUSH
9998: LD_INT -6
10000: PUSH
10001: LD_INT -4
10003: PUSH
10004: LD_EXP 52
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: ADD
10014: PPUSH
10015: LD_INT 1
10017: PUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 4
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 42
10044: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10045: LD_VAR 0 3
10049: PPUSH
10050: LD_INT 6
10052: PPUSH
10053: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10057: LD_EXP 52
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10069: LD_VAR 0 4
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: CALL_OW 235
// burlakTeam = selectedPeople ;
10081: LD_ADDR_EXP 55
10085: PUSH
10086: LD_VAR 0 4
10090: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10091: LD_ADDR_EXP 56
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 6
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10125: LD_ADDR_EXP 56
10129: PUSH
10130: LD_EXP 56
10134: PUSH
10135: LD_EXP 49
10139: DIFF
10140: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10141: LD_ADDR_VAR 0 2
10145: PUSH
10146: LD_INT 22
10148: PUSH
10149: LD_INT 6
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 21
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: CALL_OW 69
10174: PUSH
10175: FOR_IN
10176: IFFALSE 10200
// if IsInUnit ( i ) then
10178: LD_VAR 0 2
10182: PPUSH
10183: CALL_OW 310
10187: IFFALSE 10198
// ComExitVehicle ( i ) ;
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 121
10198: GO 10175
10200: POP
10201: POP
// if not Gnyevko in selectedPeople then
10202: LD_EXP 43
10206: PUSH
10207: LD_VAR 0 4
10211: IN
10212: NOT
10213: IFFALSE 10230
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10215: LD_EXP 43
10219: PPUSH
10220: LD_STRING Gnyevko
10222: PPUSH
10223: LD_INT 6
10225: PPUSH
10226: CALL 9716 0 3
// if not Kovalyuk in selectedPeople then
10230: LD_EXP 45
10234: PUSH
10235: LD_VAR 0 4
10239: IN
10240: NOT
10241: IFFALSE 10258
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10243: LD_EXP 45
10247: PPUSH
10248: LD_STRING Kovalyuk
10250: PPUSH
10251: LD_INT 6
10253: PPUSH
10254: CALL 9716 0 3
// if not Kirilenkova in selectedPeople then
10258: LD_EXP 44
10262: PUSH
10263: LD_VAR 0 4
10267: IN
10268: NOT
10269: IFFALSE 10286
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10271: LD_EXP 44
10275: PPUSH
10276: LD_STRING Kirilenkova
10278: PPUSH
10279: LD_INT 6
10281: PPUSH
10282: CALL 9716 0 3
// if not Scholtze in selectedPeople then
10286: LD_EXP 48
10290: PUSH
10291: LD_VAR 0 4
10295: IN
10296: NOT
10297: IFFALSE 10314
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10299: LD_EXP 48
10303: PPUSH
10304: LD_STRING Scholtze
10306: PPUSH
10307: LD_INT 6
10309: PPUSH
10310: CALL 9716 0 3
// if not Belkov in selectedPeople then
10314: LD_EXP 46
10318: PUSH
10319: LD_VAR 0 4
10323: IN
10324: NOT
10325: IFFALSE 10342
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10327: LD_EXP 46
10331: PPUSH
10332: LD_STRING Belkov
10334: PPUSH
10335: LD_INT 6
10337: PPUSH
10338: CALL 9716 0 3
// if not Belkov2 in selectedPeople then
10342: LD_EXP 47
10346: PUSH
10347: LD_VAR 0 4
10351: IN
10352: NOT
10353: IFFALSE 10370
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10355: LD_EXP 47
10359: PPUSH
10360: LD_STRING Belkov2
10362: PPUSH
10363: LD_INT 6
10365: PPUSH
10366: CALL 9716 0 3
// others = popovTeam diff Popov ;
10370: LD_ADDR_VAR 0 5
10374: PUSH
10375: LD_EXP 56
10379: PUSH
10380: LD_EXP 52
10384: DIFF
10385: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10386: LD_VAR 0 5
10390: PPUSH
10391: LD_STRING other_survivors_with_popov
10393: PPUSH
10394: LD_INT 6
10396: PPUSH
10397: CALL 9772 0 3
// end ; end_of_file
10401: LD_VAR 0 1
10405: RET
// export function MissionIntro ; var i , unit ; begin
10406: LD_INT 0
10408: PPUSH
10409: PPUSH
10410: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10411: LD_EXP 42
10415: PPUSH
10416: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10420: LD_EXP 59
10424: PPUSH
10425: LD_STRING D1-RSol1-1
10427: PPUSH
10428: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10432: LD_EXP 53
10436: PPUSH
10437: LD_STRING D1-Pla-1
10439: PPUSH
10440: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10444: LD_EXP 42
10448: PPUSH
10449: LD_STRING D1-Bur-1
10451: PPUSH
10452: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-2
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-2
10475: PPUSH
10476: CALL_OW 88
// SelectCharacters ;
10480: CALL 9870 0 0
// InGameOff ;
10484: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10488: LD_STRING M1
10490: PPUSH
10491: CALL_OW 337
// SaveForQuickRestart ;
10495: CALL_OW 22
// for unit in popovTeam do
10499: LD_ADDR_VAR 0 3
10503: PUSH
10504: LD_EXP 56
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10582
// begin for i := 3 to russianCargoPath1 do
10512: LD_ADDR_VAR 0 2
10516: PUSH
10517: DOUBLE
10518: LD_INT 3
10520: DEC
10521: ST_TO_ADDR
10522: LD_EXP 34
10526: PUSH
10527: FOR_TO
10528: IFFALSE 10571
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_EXP 34
10539: PUSH
10540: LD_VAR 0 2
10544: ARRAY
10545: PUSH
10546: LD_INT 1
10548: ARRAY
10549: PPUSH
10550: LD_EXP 34
10554: PUSH
10555: LD_VAR 0 2
10559: ARRAY
10560: PUSH
10561: LD_INT 2
10563: ARRAY
10564: PPUSH
10565: CALL_OW 171
10569: GO 10527
10571: POP
10572: POP
// wait ( 0 0$01 ) ;
10573: LD_INT 35
10575: PPUSH
10576: CALL_OW 67
// end ;
10580: GO 10509
10582: POP
10583: POP
// end ;
10584: LD_VAR 0 1
10588: RET
// every 0 0$1 do var unit , driver ;
10589: GO 10591
10591: DISABLE
10592: LD_INT 0
10594: PPUSH
10595: PPUSH
// begin enable ;
10596: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10597: LD_INT 4
10599: PPUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 6
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 70
10614: NOT
10615: PUSH
10616: LD_INT 4
10618: PPUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: LD_INT 21
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 2
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 70
10665: NOT
10666: AND
10667: IFFALSE 10671
// exit ;
10669: GO 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10671: LD_ADDR_VAR 0 1
10675: PUSH
10676: LD_INT 4
10678: PPUSH
10679: LD_INT 22
10681: PUSH
10682: LD_INT 6
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PPUSH
10689: CALL_OW 70
10693: PUSH
10694: FOR_IN
10695: IFFALSE 10750
// begin RemoveUnit ( unit ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10706: LD_VAR 0 1
10710: PUSH
10711: LD_EXP 56
10715: IN
10716: NOT
10717: PUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 264
10727: PUSH
10728: LD_INT 51
10730: EQUAL
10731: AND
10732: IFFALSE 10748
// evacuatedCargos = evacuatedCargos + 1 ;
10734: LD_ADDR_EXP 10
10738: PUSH
10739: LD_EXP 10
10743: PUSH
10744: LD_INT 1
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: GO 10694
10750: POP
10751: POP
// if canExitMap then
10752: LD_EXP 6
10756: IFFALSE 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10758: LD_ADDR_VAR 0 1
10762: PUSH
10763: LD_INT 4
10765: PPUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: LD_INT 21
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 21
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 70
10812: PUSH
10813: FOR_IN
10814: IFFALSE 11020
// begin if GetType ( unit ) = unit_vehicle then
10816: LD_VAR 0 1
10820: PPUSH
10821: CALL_OW 247
10825: PUSH
10826: LD_INT 2
10828: EQUAL
10829: IFFALSE 10929
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 313
10840: PUSH
10841: LD_INT 1
10843: ARRAY
10844: PUSH
10845: LD_EXP 42
10849: PUSH
10850: LD_EXP 43
10854: PUSH
10855: LD_EXP 44
10859: PUSH
10860: LD_EXP 45
10864: PUSH
10865: LD_EXP 46
10869: PUSH
10870: LD_EXP 47
10874: PUSH
10875: LD_EXP 48
10879: PUSH
10880: LD_EXP 49
10884: PUSH
10885: LD_EXP 54
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: IN
10901: NOT
10902: IFFALSE 10929
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10904: LD_ADDR_EXP 62
10908: PUSH
10909: LD_EXP 62
10913: PUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 313
10923: PUSH
10924: LD_INT 1
10926: ARRAY
10927: ADD
10928: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10929: LD_VAR 0 1
10933: PUSH
10934: LD_EXP 42
10938: PUSH
10939: LD_EXP 43
10943: PUSH
10944: LD_EXP 44
10948: PUSH
10949: LD_EXP 45
10953: PUSH
10954: LD_EXP 46
10958: PUSH
10959: LD_EXP 47
10963: PUSH
10964: LD_EXP 48
10968: PUSH
10969: LD_EXP 49
10973: PUSH
10974: LD_EXP 54
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: IN
10990: NOT
10991: IFFALSE 11009
// randomsToSave = randomsToSave ^ unit ;
10993: LD_ADDR_EXP 62
10997: PUSH
10998: LD_EXP 62
11002: PUSH
11003: LD_VAR 0 1
11007: ADD
11008: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 64
// end ;
11018: GO 10813
11020: POP
11021: POP
// end ;
11022: PPOPN 2
11024: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11025: LD_INT 0
11027: PPUSH
11028: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11029: LD_INT 22
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: PPUSH
11058: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11062: LD_VAR 0 1
11066: PPUSH
11067: CALL_OW 87
// InGameOn ;
11071: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11075: LD_EXP 53
11079: PPUSH
11080: LD_STRING D2a-Pla-1
11082: PPUSH
11083: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 21
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 25
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: PPUSH
11127: CALL_OW 69
11131: PUSH
11132: FOR_IN
11133: IFFALSE 11171
// if GetDistUnits ( building , unit ) < 10 then
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: CALL_OW 296
11149: PUSH
11150: LD_INT 10
11152: LESS
11153: IFFALSE 11169
// ComDismantle ( unit , building ) ;
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 167
11169: GO 11132
11171: POP
11172: POP
// repeat wait ( 0 0$1 ) ;
11173: LD_INT 35
11175: PPUSH
11176: CALL_OW 67
// until not IsPlaced ( building ) ;
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 305
11189: NOT
11190: IFFALSE 11173
// InGameOff ;
11192: CALL_OW 9
// end ;
11196: LD_VAR 0 2
11200: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11201: LD_EXP 49
11205: PPUSH
11206: CALL_OW 255
11210: PUSH
11211: LD_INT 6
11213: EQUAL
11214: IFFALSE 11296
11216: GO 11218
11218: DISABLE
11219: LD_INT 0
11221: PPUSH
// begin enable ;
11222: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: LD_INT 22
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11294
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11260: LD_VAR 0 1
11264: PPUSH
11265: LD_EXP 49
11269: PPUSH
11270: CALL_OW 296
11274: PUSH
11275: LD_INT 9
11277: LESS
11278: IFFALSE 11292
// SetSide ( Kuzmov , 3 ) ;
11280: LD_EXP 49
11284: PPUSH
11285: LD_INT 3
11287: PPUSH
11288: CALL_OW 235
11292: GO 11257
11294: POP
11295: POP
// end ;
11296: PPOPN 1
11298: END
// export function Dial_FinishDepot ; var i ; begin
11299: LD_INT 0
11301: PPUSH
11302: PPUSH
// startEvacuation = true ;
11303: LD_ADDR_EXP 8
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11311: LD_STRING MOutBuild
11313: PPUSH
11314: CALL_OW 337
// uc_side = 6 ;
11318: LD_ADDR_OWVAR 20
11322: PUSH
11323: LD_INT 6
11325: ST_TO_ADDR
// uc_nation = 3 ;
11326: LD_ADDR_OWVAR 21
11330: PUSH
11331: LD_INT 3
11333: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11334: LD_ADDR_OWVAR 37
11338: PUSH
11339: LD_INT 21
11341: ST_TO_ADDR
// vc_control = control_manual ;
11342: LD_ADDR_OWVAR 38
11346: PUSH
11347: LD_INT 1
11349: ST_TO_ADDR
// vc_engine = engine_combustion ;
11350: LD_ADDR_OWVAR 39
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11358: LD_ADDR_OWVAR 40
11362: PUSH
11363: LD_INT 51
11365: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11366: LD_ADDR_EXP 60
11370: PUSH
11371: CALL_OW 45
11375: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11376: LD_EXP 60
11380: PPUSH
11381: LD_INT 3
11383: PPUSH
11384: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11388: LD_EXP 60
11392: PPUSH
11393: LD_INT 3
11395: PPUSH
11396: LD_INT 0
11398: PPUSH
11399: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11403: LD_INT 1
11405: PPUSH
11406: LD_INT 3
11408: PPUSH
11409: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11413: CALL_OW 44
11417: PPUSH
11418: LD_EXP 60
11422: PPUSH
11423: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11427: LD_EXP 60
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_INT 100
11437: PPUSH
11438: CALL_OW 291
// for i := 1 to 19 do
11442: LD_ADDR_VAR 0 2
11446: PUSH
11447: DOUBLE
11448: LD_INT 1
11450: DEC
11451: ST_TO_ADDR
11452: LD_INT 19
11454: PUSH
11455: FOR_TO
11456: IFFALSE 11499
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11458: LD_EXP 60
11462: PPUSH
11463: LD_EXP 34
11467: PUSH
11468: LD_VAR 0 2
11472: ARRAY
11473: PUSH
11474: LD_INT 1
11476: ARRAY
11477: PPUSH
11478: LD_EXP 34
11482: PUSH
11483: LD_VAR 0 2
11487: ARRAY
11488: PUSH
11489: LD_INT 2
11491: ARRAY
11492: PPUSH
11493: CALL_OW 171
11497: GO 11455
11499: POP
11500: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11501: LD_EXP 60
11505: PPUSH
11506: LD_INT 105
11508: PPUSH
11509: LD_INT 123
11511: PPUSH
11512: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11516: LD_EXP 60
11520: PPUSH
11521: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: DOUBLE
11531: LD_INT 21
11533: DEC
11534: ST_TO_ADDR
11535: LD_EXP 34
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11584
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11543: LD_EXP 60
11547: PPUSH
11548: LD_EXP 34
11552: PUSH
11553: LD_VAR 0 2
11557: ARRAY
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PPUSH
11563: LD_EXP 34
11567: PUSH
11568: LD_VAR 0 2
11572: ARRAY
11573: PUSH
11574: LD_INT 2
11576: ARRAY
11577: PPUSH
11578: CALL_OW 171
11582: GO 11540
11584: POP
11585: POP
// Say ( Burlak , D2-Bur-1 ) ;
11586: LD_EXP 42
11590: PPUSH
11591: LD_STRING D2-Bur-1
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11598: LD_EXP 53
11602: PPUSH
11603: LD_STRING D2-Pla-1
11605: PPUSH
11606: CALL_OW 94
// PrepareSecondBaseTeam ;
11610: CALL 3290 0 0
// end ;
11614: LD_VAR 0 1
11618: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
// dial_labUpgradedBlock = true ;
11623: LD_ADDR_EXP 15
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11631: LD_ADDR_VAR 0 2
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 21
11648: PUSH
11649: LD_INT 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 26
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 25
11668: PUSH
11669: LD_INT 4
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PUSH
11687: LD_EXP 42
11691: PUSH
11692: LD_EXP 43
11696: PUSH
11697: LD_EXP 44
11701: PUSH
11702: LD_EXP 45
11706: PUSH
11707: LD_EXP 46
11711: PUSH
11712: LD_EXP 47
11716: PUSH
11717: LD_EXP 48
11721: PUSH
11722: LD_EXP 49
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: DIFF
11737: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11738: LD_EXP 48
11742: PPUSH
11743: CALL_OW 302
11747: PUSH
11748: LD_EXP 48
11752: PPUSH
11753: CALL_OW 255
11757: PUSH
11758: LD_INT 3
11760: EQUAL
11761: AND
11762: IFFALSE 11790
// begin Say ( Scholtze , D5-Sch-1 ) ;
11764: LD_EXP 48
11768: PPUSH
11769: LD_STRING D5-Sch-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11776: LD_EXP 42
11780: PPUSH
11781: LD_STRING D5-Bur-1
11783: PPUSH
11784: CALL_OW 88
// end else
11788: GO 11925
// if randomMaleSci then
11790: LD_VAR 0 2
11794: IFFALSE 11826
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11796: LD_VAR 0 2
11800: PUSH
11801: LD_INT 1
11803: ARRAY
11804: PPUSH
11805: LD_STRING D5-RSci1-1
11807: PPUSH
11808: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11812: LD_EXP 42
11816: PPUSH
11817: LD_STRING D5-Bur-1
11819: PPUSH
11820: CALL_OW 88
// end else
11824: GO 11925
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11826: LD_ADDR_VAR 0 2
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_INT 3
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 21
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 26
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 25
11863: PUSH
11864: LD_INT 4
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PUSH
11882: LD_EXP 42
11886: PUSH
11887: EMPTY
11888: LIST
11889: DIFF
11890: ST_TO_ADDR
// if randomMaleSci then
11891: LD_VAR 0 2
11895: IFFALSE 11925
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11897: LD_VAR 0 2
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_STRING D5-RSci1-1
11908: PPUSH
11909: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11913: LD_EXP 42
11917: PPUSH
11918: LD_STRING D5-Bur-1
11920: PPUSH
11921: CALL_OW 88
// end ; end ; end ;
11925: LD_VAR 0 1
11929: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11930: LD_EXP 60
11934: PPUSH
11935: LD_INT 105
11937: PPUSH
11938: LD_INT 123
11940: PPUSH
11941: CALL_OW 297
11945: PUSH
11946: LD_INT 12
11948: LESS
11949: IFFALSE 11975
11951: GO 11953
11953: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11954: LD_EXP 60
11958: PPUSH
11959: CALL_OW 313
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PPUSH
11968: LD_STRING D2a-RSol1-1
11970: PPUSH
11971: CALL_OW 88
11975: END
// every 0 0$15 trigger startEvacuation do
11976: LD_EXP 8
11980: IFFALSE 11990
11982: GO 11984
11984: DISABLE
// begin enable ;
11985: ENABLE
// CreateEvacuateUnit ;
11986: CALL 2520 0 0
// end ;
11990: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
11991: LD_EXP 10
11995: PUSH
11996: LD_INT 3
11998: GREATEREQUAL
11999: IFFALSE 12098
12001: GO 12003
12003: DISABLE
// begin if IsOk ( Kuzmov ) then
12004: LD_EXP 49
12008: PPUSH
12009: CALL_OW 302
12013: IFFALSE 12083
// begin DialogueOn ;
12015: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12019: LD_EXP 49
12023: PPUSH
12024: LD_STRING D2b-Kuz-1
12026: PPUSH
12027: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12031: LD_EXP 42
12035: PPUSH
12036: LD_STRING D2b-Bur-1
12038: PPUSH
12039: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-2
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-2
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-3
12074: PPUSH
12075: CALL_OW 88
// DialogueOff ;
12079: CALL_OW 7
// end ; Query ( Q1 ) ;
12083: LD_STRING Q1
12085: PPUSH
12086: CALL_OW 97
// canStealCargo = true ;
12090: LD_ADDR_EXP 11
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// end ;
12098: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12099: LD_EXP 11
12103: IFFALSE 12401
12105: GO 12107
12107: DISABLE
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
// begin enable ;
12112: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 34
12140: PUSH
12141: LD_INT 51
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12399
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_INT 22
12168: PUSH
12169: LD_INT 3
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 50
12188: PUSH
12189: EMPTY
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 69
12201: PUSH
12202: FOR_IN
12203: IFFALSE 12395
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12205: LD_VAR 0 2
12209: PPUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 296
12219: PUSH
12220: LD_INT 8
12222: LESS
12223: PUSH
12224: LD_VAR 0 2
12228: PUSH
12229: LD_EXP 13
12233: IN
12234: NOT
12235: AND
12236: PUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 289
12249: PUSH
12250: LD_INT 0
12252: GREATER
12253: AND
12254: IFFALSE 12393
// begin stealCargos = stealCargos ^ cargo ;
12256: LD_ADDR_EXP 13
12260: PUSH
12261: LD_EXP 13
12265: PUSH
12266: LD_VAR 0 2
12270: ADD
12271: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12272: LD_STRING QQrSteal
12274: PPUSH
12275: CALL_OW 97
12279: PUSH
12280: LD_INT 1
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12361
12288: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12289: LD_ADDR_EXP 12
12293: PUSH
12294: LD_EXP 12
12298: PUSH
12299: LD_INT 1
12301: PLUS
12302: ST_TO_ADDR
// DialogueOn ;
12303: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12307: LD_EXP 42
12311: PPUSH
12312: LD_STRING DQrSteal#1-Bur-1
12314: PPUSH
12315: CALL_OW 88
// DialogueOff ;
12319: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12323: LD_VAR 0 2
12327: PPUSH
12328: LD_INT 14
12330: PPUSH
12331: CALL_OW 113
// AddComUnload ( cargo ) ;
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12344: LD_VAR 0 2
12348: PPUSH
12349: LD_INT 92
12351: PPUSH
12352: LD_INT 177
12354: PPUSH
12355: CALL_OW 171
// end ; 2 :
12359: GO 12393
12361: LD_INT 2
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12369
12367: GO 12392
12369: POP
// begin DialogueOn ;
12370: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12374: LD_EXP 42
12378: PPUSH
12379: LD_STRING DQrSteal#2-Bur-1
12381: PPUSH
12382: CALL_OW 88
// DialogueOff ;
12386: CALL_OW 7
// end ; end ;
12390: GO 12393
12392: POP
// end ;
12393: GO 12202
12395: POP
12396: POP
12397: GO 12158
12399: POP
12400: POP
// end ;
12401: PPOPN 2
12403: END
// every 0 0$12 trigger stealWarmCount = 3 do
12404: LD_EXP 12
12408: PUSH
12409: LD_INT 3
12411: EQUAL
12412: IFFALSE 12484
12414: GO 12416
12416: DISABLE
// begin DialogueOn ;
12417: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12421: LD_EXP 53
12425: PPUSH
12426: LD_STRING D3A-Pla-1
12428: PPUSH
12429: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12433: LD_EXP 42
12437: PPUSH
12438: LD_STRING D3A-Bur-1
12440: PPUSH
12441: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-2
12452: PPUSH
12453: CALL_OW 94
// if IsOK ( Kuzmov ) then
12457: LD_EXP 49
12461: PPUSH
12462: CALL_OW 302
12466: IFFALSE 12480
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12468: LD_EXP 49
12472: PPUSH
12473: LD_STRING D3A-Kuz-2
12475: PPUSH
12476: CALL_OW 88
// DialogueOff ;
12480: CALL_OW 7
// end ;
12484: END
// every 0 0$10 trigger stealWarmCount = 6 do
12485: LD_EXP 12
12489: PUSH
12490: LD_INT 6
12492: EQUAL
12493: IFFALSE 12542
12495: GO 12497
12497: DISABLE
// begin DialogueOn ;
12498: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12502: LD_EXP 53
12506: PPUSH
12507: LD_STRING D3B-Pla-1
12509: PPUSH
12510: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12514: LD_EXP 42
12518: PPUSH
12519: LD_STRING D3B-Bur-1
12521: PPUSH
12522: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-2
12533: PPUSH
12534: CALL_OW 94
// DialogueOff ;
12538: CALL_OW 7
// end ;
12542: END
// every 0 0$10 trigger stealWarmCount = 7 do
12543: LD_EXP 12
12547: PUSH
12548: LD_INT 7
12550: EQUAL
12551: IFFALSE 12635
12553: GO 12555
12555: DISABLE
// begin DialogueOn ;
12556: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12560: LD_EXP 53
12564: PPUSH
12565: LD_STRING D3C-Pla-1
12567: PPUSH
12568: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12572: LD_EXP 42
12576: PPUSH
12577: LD_STRING D3C-Bur-1
12579: PPUSH
12580: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-2
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-2
12603: PPUSH
12604: CALL_OW 88
// if IsOK ( Kuzmov ) then
12608: LD_EXP 49
12612: PPUSH
12613: CALL_OW 302
12617: IFFALSE 12631
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12619: LD_EXP 49
12623: PPUSH
12624: LD_STRING D3C-Kuz-2
12626: PPUSH
12627: CALL_OW 88
// DialogueOff ;
12631: CALL_OW 7
// end ;
12635: END
// every 0 0$10 trigger stealWarmCount = 8 do
12636: LD_EXP 12
12640: PUSH
12641: LD_INT 8
12643: EQUAL
12644: IFFALSE 12836
12646: GO 12648
12648: DISABLE
// begin canStealCargo = false ;
12649: LD_ADDR_EXP 11
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// DialogueOn ;
12657: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12661: LD_EXP 53
12665: PPUSH
12666: LD_STRING D3D-Pla-1
12668: PPUSH
12669: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12673: LD_EXP 42
12677: PPUSH
12678: LD_STRING D3D-Bur-1
12680: PPUSH
12681: CALL_OW 88
// if kurinOpinion = 0 then
12685: LD_EXP 2
12689: PUSH
12690: LD_INT 0
12692: EQUAL
12693: IFFALSE 12713
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12695: LD_EXP 53
12699: PPUSH
12700: LD_STRING D3E-Pla-1
12702: PPUSH
12703: CALL_OW 94
// Lose_Arrest ;
12707: CALL 7552 0 0
// exit ;
12711: GO 12836
// end ; if meetBelkovBrother = 1 then
12713: LD_EXP 3
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: IFFALSE 12741
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12723: LD_EXP 53
12727: PPUSH
12728: LD_STRING D3E-Pla-1a
12730: PPUSH
12731: CALL_OW 94
// Lose_Arrest ;
12735: CALL 7552 0 0
// exit ;
12739: GO 12836
// end ; if platonovOpinion = 0 then
12741: LD_EXP 1
12745: PUSH
12746: LD_INT 0
12748: EQUAL
12749: IFFALSE 12769
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12751: LD_EXP 53
12755: PPUSH
12756: LD_STRING D3E-Pla-1b
12758: PPUSH
12759: CALL_OW 94
// Lose_Arrest ;
12763: CALL 7552 0 0
// exit ;
12767: GO 12836
// end ; if platonovOpinion = 1 then
12769: LD_EXP 1
12773: PUSH
12774: LD_INT 1
12776: EQUAL
12777: IFFALSE 12797
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12779: LD_EXP 53
12783: PPUSH
12784: LD_STRING D3E-Pla-1c
12786: PPUSH
12787: CALL_OW 94
// Lose_Arrest ;
12791: CALL 7552 0 0
// exit ;
12795: GO 12836
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12797: LD_EXP 53
12801: PPUSH
12802: LD_STRING D3D-Pla-2
12804: PPUSH
12805: CALL_OW 94
// if IsOK ( Kuzmov ) then
12809: LD_EXP 49
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12832
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12820: LD_EXP 49
12824: PPUSH
12825: LD_STRING D3D-Kuz-2
12827: PPUSH
12828: CALL_OW 88
// DialogueOff ;
12832: CALL_OW 7
// end ;
12836: END
// every 0 0$20 do var allyUntis ;
12837: GO 12839
12839: DISABLE
12840: LD_INT 0
12842: PPUSH
// begin enable ;
12843: ENABLE
// wait ( 0 0$10 ) ;
12844: LD_INT 350
12846: PPUSH
12847: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 6
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 60
12871: PUSH
12872: EMPTY
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: PUSH
12888: LD_EXP 56
12892: DIFF
12893: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_VAR 0 1
12903: PUSH
12904: LD_EXP 54
12908: DIFF
12909: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_VAR 0 1
12919: PUSH
12920: LD_EXP 49
12924: DIFF
12925: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_VAR 0 1
12935: PUSH
12936: LD_EXP 57
12940: DIFF
12941: ST_TO_ADDR
// if not allyUntis then
12942: LD_VAR 0 1
12946: NOT
12947: IFFALSE 12951
// exit ;
12949: GO 12975
// ComUnload ( allyUntis ) ;
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 92
12967: PPUSH
12968: LD_INT 176
12970: PPUSH
12971: CALL_OW 171
// end ;
12975: PPOPN 1
12977: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
12978: LD_EXP 10
12982: PUSH
12983: LD_EXP 14
12987: GREATEREQUAL
12988: IFFALSE 13001
12990: GO 12992
12992: DISABLE
// begin startEvacuation = false ;
12993: LD_ADDR_EXP 8
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// end ;
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: PUSH
13013: LD_INT 22
13015: PUSH
13016: LD_INT 6
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 2
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 69
13059: PUSH
13060: LD_EXP 57
13064: DIFF
13065: NOT
13066: AND
13067: IFFALSE 13662
13069: GO 13071
13071: DISABLE
// begin wait ( 1 1$00 ) ;
13072: LD_INT 2100
13074: PPUSH
13075: CALL_OW 67
// DialogueOn ;
13079: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13083: LD_EXP 53
13087: PPUSH
13088: LD_STRING D4-Pla-1
13090: PPUSH
13091: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13095: LD_EXP 42
13099: PPUSH
13100: LD_STRING D4-Bur-1
13102: PPUSH
13103: CALL_OW 88
// DialogueOff ;
13107: CALL_OW 7
// wait ( 0 0$2 ) ;
13111: LD_INT 70
13113: PPUSH
13114: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13118: LD_EXP 49
13122: PPUSH
13123: CALL_OW 302
13127: PUSH
13128: LD_EXP 49
13132: PPUSH
13133: CALL_OW 255
13137: PUSH
13138: LD_INT 3
13140: EQUAL
13141: AND
13142: IFFALSE 13424
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13144: LD_EXP 49
13148: PPUSH
13149: LD_STRING D4-Kuz-1
13151: PPUSH
13152: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13156: LD_EXP 46
13160: PPUSH
13161: CALL_OW 302
13165: PUSH
13166: LD_EXP 46
13170: PPUSH
13171: CALL_OW 255
13175: PUSH
13176: LD_INT 3
13178: EQUAL
13179: AND
13180: IFFALSE 13196
// Say ( Belkov , D4-Bel-1 ) else
13182: LD_EXP 46
13186: PPUSH
13187: LD_STRING D4-Bel-1
13189: PPUSH
13190: CALL_OW 88
13194: GO 13234
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13196: LD_EXP 47
13200: PPUSH
13201: CALL_OW 302
13205: PUSH
13206: LD_EXP 47
13210: PPUSH
13211: CALL_OW 255
13215: PUSH
13216: LD_INT 3
13218: EQUAL
13219: AND
13220: IFFALSE 13234
// Say ( Belkov2 , D4-Bel-1 ) ;
13222: LD_EXP 47
13226: PPUSH
13227: LD_STRING D4-Bel-1
13229: PPUSH
13230: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13234: LD_EXP 42
13238: PPUSH
13239: LD_STRING D4-Bur-2
13241: PPUSH
13242: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13246: LD_EXP 43
13250: PPUSH
13251: CALL_OW 302
13255: PUSH
13256: LD_EXP 43
13260: PPUSH
13261: CALL_OW 255
13265: PUSH
13266: LD_INT 3
13268: EQUAL
13269: AND
13270: IFFALSE 13296
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13272: LD_EXP 43
13276: PPUSH
13277: LD_STRING D4-Gny-2
13279: PPUSH
13280: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13284: LD_EXP 42
13288: PPUSH
13289: LD_STRING D4-Bur-3
13291: PPUSH
13292: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13296: LD_EXP 42
13300: PPUSH
13301: LD_STRING D4-Bur-3a
13303: PPUSH
13304: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13308: LD_EXP 46
13312: PPUSH
13313: CALL_OW 302
13317: PUSH
13318: LD_EXP 46
13322: PPUSH
13323: CALL_OW 255
13327: PUSH
13328: LD_INT 3
13330: EQUAL
13331: AND
13332: IFFALSE 13348
// Say ( Belkov , D4-Bel-3 ) else
13334: LD_EXP 46
13338: PPUSH
13339: LD_STRING D4-Bel-3
13341: PPUSH
13342: CALL_OW 88
13346: GO 13386
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13348: LD_EXP 47
13352: PPUSH
13353: CALL_OW 302
13357: PUSH
13358: LD_EXP 47
13362: PPUSH
13363: CALL_OW 255
13367: PUSH
13368: LD_INT 3
13370: EQUAL
13371: AND
13372: IFFALSE 13386
// Say ( Belkov2 , D4-Bel-3 ) ;
13374: LD_EXP 47
13378: PPUSH
13379: LD_STRING D4-Bel-3
13381: PPUSH
13382: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13386: LD_EXP 45
13390: PPUSH
13391: CALL_OW 302
13395: PUSH
13396: LD_EXP 45
13400: PPUSH
13401: CALL_OW 255
13405: PUSH
13406: LD_INT 3
13408: EQUAL
13409: AND
13410: IFFALSE 13424
// Say ( Kovalyuk , D4-Kov-3 ) ;
13412: LD_EXP 45
13416: PPUSH
13417: LD_STRING D4-Kov-3
13419: PPUSH
13420: CALL_OW 88
// end ; PrepareFirstAttack ;
13424: CALL 4175 0 0
// firstAttack = true ;
13428: LD_ADDR_EXP 18
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13436: LD_INT 350
13438: PPUSH
13439: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13443: LD_EXP 42
13447: PPUSH
13448: LD_STRING D7-Bur-1
13450: PPUSH
13451: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13455: LD_EXP 64
13459: PPUSH
13460: LD_INT 135
13462: PUSH
13463: LD_INT 4
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 134
13472: PUSH
13473: LD_INT 19
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 132
13482: PUSH
13483: LD_INT 26
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 128
13492: PUSH
13493: LD_INT 31
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 123
13502: PUSH
13503: LD_INT 37
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 118
13512: PUSH
13513: LD_INT 45
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 112
13522: PUSH
13523: LD_INT 51
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 106
13532: PUSH
13533: LD_INT 57
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 99
13542: PUSH
13543: LD_INT 62
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 93
13552: PUSH
13553: LD_INT 67
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 86
13562: PUSH
13563: LD_INT 72
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 78
13572: PUSH
13573: LD_INT 75
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 71
13582: PUSH
13583: LD_INT 81
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 69
13592: PUSH
13593: LD_INT 88
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 71
13602: PUSH
13603: LD_INT 95
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 74
13612: PUSH
13613: LD_INT 103
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 80
13622: PUSH
13623: LD_INT 113
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: LD_INT 11
13657: PPUSH
13658: CALL 5018 0 5
// end ;
13662: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13663: LD_EXP 64
13667: PPUSH
13668: LD_INT 21
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 72
13682: NOT
13683: PUSH
13684: LD_EXP 18
13688: AND
13689: IFFALSE 13758
13691: GO 13693
13693: DISABLE
// begin if Difficulty = 1 then
13694: LD_OWVAR 67
13698: PUSH
13699: LD_INT 1
13701: EQUAL
13702: IFFALSE 13735
// begin ComExitBuilding ( secondBaseTeam ) ;
13704: LD_EXP 57
13708: PPUSH
13709: CALL_OW 122
// wait ( 0 0$1 ) ;
13713: LD_INT 35
13715: PPUSH
13716: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13720: LD_EXP 57
13724: PPUSH
13725: LD_INT 114
13727: PPUSH
13728: LD_INT 114
13730: PPUSH
13731: CALL_OW 111
// end ; wait ( 0 0$15 ) ;
13735: LD_INT 525
13737: PPUSH
13738: CALL_OW 67
// firstAttack = false ;
13742: LD_ADDR_EXP 18
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// enableAttacks = true ;
13750: LD_ADDR_EXP 17
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// end ;
13758: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13759: LD_OWVAR 67
13763: PUSH
13764: LD_INT 1
13766: EQUAL
13767: PUSH
13768: LD_EXP 57
13772: AND
13773: IFFALSE 13841
13775: GO 13777
13777: DISABLE
13778: LD_INT 0
13780: PPUSH
// begin enable ;
13781: ENABLE
// for un in secondBaseTeam do
13782: LD_ADDR_VAR 0 1
13786: PUSH
13787: LD_EXP 57
13791: PUSH
13792: FOR_IN
13793: IFFALSE 13839
// if IsInArea ( un , HillArea ) then
13795: LD_VAR 0 1
13799: PPUSH
13800: LD_INT 5
13802: PPUSH
13803: CALL_OW 308
13807: IFFALSE 13837
// begin SetSide ( un , 3 ) ;
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 3
13816: PPUSH
13817: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13821: LD_ADDR_EXP 57
13825: PUSH
13826: LD_EXP 57
13830: PUSH
13831: LD_VAR 0 1
13835: DIFF
13836: ST_TO_ADDR
// end ;
13837: GO 13792
13839: POP
13840: POP
// end ;
13841: PPOPN 1
13843: END
// export function Dial_Contact ; begin
13844: LD_INT 0
13846: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13847: LD_EXP 42
13851: PPUSH
13852: LD_STRING D7-Bur-1a
13854: PPUSH
13855: CALL_OW 88
// wait ( 0 0$12 ) ;
13859: LD_INT 420
13861: PPUSH
13862: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13866: LD_EXP 42
13870: PPUSH
13871: LD_STRING D7-Bur-1b
13873: PPUSH
13874: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13878: LD_EXP 46
13882: PPUSH
13883: CALL_OW 302
13887: PUSH
13888: LD_EXP 46
13892: PPUSH
13893: CALL_OW 255
13897: PUSH
13898: LD_INT 3
13900: EQUAL
13901: AND
13902: IFFALSE 13918
// Say ( Belkov , D7-Bel-1 ) else
13904: LD_EXP 46
13908: PPUSH
13909: LD_STRING D7-Bel-1
13911: PPUSH
13912: CALL_OW 88
13916: GO 13956
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13918: LD_EXP 47
13922: PPUSH
13923: CALL_OW 302
13927: PUSH
13928: LD_EXP 47
13932: PPUSH
13933: CALL_OW 255
13937: PUSH
13938: LD_INT 3
13940: EQUAL
13941: AND
13942: IFFALSE 13956
// Say ( Belkov2 , D7-Bel-1 ) ;
13944: LD_EXP 47
13948: PPUSH
13949: LD_STRING D7-Bel-1
13951: PPUSH
13952: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13956: LD_EXP 49
13960: PPUSH
13961: CALL_OW 302
13965: PUSH
13966: LD_EXP 49
13970: PPUSH
13971: CALL_OW 255
13975: PUSH
13976: LD_INT 3
13978: EQUAL
13979: AND
13980: IFFALSE 13994
// Say ( Kuzmov , D7-Kuz-1 ) ;
13982: LD_EXP 49
13986: PPUSH
13987: LD_STRING D7-Kuz-1
13989: PPUSH
13990: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13994: LD_EXP 45
13998: PPUSH
13999: CALL_OW 302
14003: PUSH
14004: LD_EXP 45
14008: PPUSH
14009: CALL_OW 255
14013: PUSH
14014: LD_INT 3
14016: EQUAL
14017: AND
14018: IFFALSE 14032
// Say ( Kovalyuk , D7-Kov-1 ) ;
14020: LD_EXP 45
14024: PPUSH
14025: LD_STRING D7-Kov-1
14027: PPUSH
14028: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14032: LD_EXP 48
14036: PPUSH
14037: CALL_OW 302
14041: PUSH
14042: LD_EXP 48
14046: PPUSH
14047: CALL_OW 255
14051: PUSH
14052: LD_INT 3
14054: EQUAL
14055: AND
14056: IFFALSE 14070
// Say ( Scholtze , D7-Sch-1 ) ;
14058: LD_EXP 48
14062: PPUSH
14063: LD_STRING D7-Sch-1
14065: PPUSH
14066: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14070: LD_INT 22
14072: PUSH
14073: LD_INT 3
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 21
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 26
14092: PUSH
14093: LD_INT 1
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: PPUSH
14105: CALL_OW 69
14109: PPUSH
14110: LD_STRING D7-RSol1-1
14112: PPUSH
14113: LD_STRING 
14115: PPUSH
14116: LD_INT 0
14118: PPUSH
14119: CALL 9513 0 4
// PrepareHeike ;
14123: CALL 3495 0 0
// wait ( 0 0$10 ) ;
14127: LD_INT 350
14129: PPUSH
14130: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14134: LD_EXP 63
14138: PPUSH
14139: LD_STRING D7a-Hke-1
14141: PPUSH
14142: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14146: LD_EXP 42
14150: PPUSH
14151: LD_STRING D7a-Bur-1
14153: PPUSH
14154: CALL_OW 88
// wait ( 0 0$50 ) ;
14158: LD_INT 1750
14160: PPUSH
14161: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14165: LD_EXP 49
14169: PPUSH
14170: CALL_OW 302
14174: PUSH
14175: LD_EXP 49
14179: PPUSH
14180: CALL_OW 255
14184: PUSH
14185: LD_INT 3
14187: EQUAL
14188: AND
14189: IFFALSE 14205
// Say ( Kuzmov , D8-Kuz-1 ) else
14191: LD_EXP 49
14195: PPUSH
14196: LD_STRING D8-Kuz-1
14198: PPUSH
14199: CALL_OW 88
14203: GO 14258
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14205: LD_INT 22
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 21
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 26
14227: PUSH
14228: LD_INT 1
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 69
14244: PPUSH
14245: LD_STRING D8-RSol1-1
14247: PPUSH
14248: LD_STRING 
14250: PPUSH
14251: LD_INT 0
14253: PPUSH
14254: CALL 9513 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14258: LD_EXP 42
14262: PPUSH
14263: LD_STRING D8-Bur-1
14265: PPUSH
14266: CALL_OW 88
// end ;
14270: LD_VAR 0 1
14274: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14275: LD_EXP 54
14279: PPUSH
14280: CALL_OW 305
14284: NOT
14285: PUSH
14286: LD_INT 22
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 21
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 50
14308: PUSH
14309: EMPTY
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 69
14321: NOT
14322: AND
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_INT 3
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 21
14336: PUSH
14337: LD_INT 1
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 50
14346: PUSH
14347: EMPTY
14348: LIST
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 69
14359: PUSH
14360: LD_INT 5
14362: LESS
14363: AND
14364: PUSH
14365: LD_INT 5
14367: PPUSH
14368: LD_INT 22
14370: PUSH
14371: LD_INT 2
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: PPUSH
14381: CALL_OW 70
14385: PUSH
14386: LD_INT 3
14388: GREATER
14389: AND
14390: IFFALSE 14399
14392: GO 14394
14394: DISABLE
// Lose_ArabBreakthrough ;
14395: CALL 7567 0 0
14399: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14400: LD_EXP 19
14404: PUSH
14405: LD_EXP 38
14409: GREATEREQUAL
14410: IFFALSE 14608
14412: GO 14414
14414: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14415: LD_EXP 53
14419: PPUSH
14420: LD_STRING D9-Pla-1
14422: PPUSH
14423: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14427: LD_EXP 42
14431: PPUSH
14432: LD_STRING D9-Bur-1
14434: PPUSH
14435: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14439: LD_EXP 53
14443: PPUSH
14444: LD_STRING D9-Pla-2
14446: PPUSH
14447: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14451: LD_EXP 42
14455: PPUSH
14456: LD_STRING D9-Bur-2
14458: PPUSH
14459: CALL_OW 88
// wait ( 2 2$0 ) ;
14463: LD_INT 4200
14465: PPUSH
14466: CALL_OW 67
// PlaceUnitArea ( Gaydar , GaydarSpawnArea , false ) ;
14470: LD_EXP 54
14474: PPUSH
14475: LD_INT 6
14477: PPUSH
14478: LD_INT 0
14480: PPUSH
14481: CALL_OW 49
// arabianCanExitMap = true ;
14485: LD_ADDR_EXP 7
14489: PUSH
14490: LD_INT 1
14492: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14493: LD_INT 35
14495: PPUSH
14496: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14500: LD_EXP 54
14504: PPUSH
14505: CALL_OW 87
// DialogueOn ;
14509: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14513: LD_EXP 54
14517: PPUSH
14518: LD_STRING D10-Gay-1
14520: PPUSH
14521: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14525: LD_EXP 42
14529: PPUSH
14530: LD_STRING D10-Bur-1
14532: PPUSH
14533: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14537: LD_EXP 54
14541: PPUSH
14542: LD_STRING D10-Gay-2
14544: PPUSH
14545: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14549: LD_EXP 52
14553: PPUSH
14554: LD_STRING D10-Pop-2
14556: PPUSH
14557: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14561: LD_EXP 54
14565: PPUSH
14566: LD_STRING D10-Gay-3
14568: PPUSH
14569: CALL_OW 94
// DialogueOff ;
14573: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_INT 36
14584: PPUSH
14585: LD_INT 38
14587: PPUSH
14588: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14592: LD_EXP 54
14596: PPUSH
14597: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14601: LD_STRING M2
14603: PPUSH
14604: CALL_OW 337
// end ;
14608: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14609: LD_EXP 7
14613: IFFALSE 14686
14615: GO 14617
14617: DISABLE
14618: LD_INT 0
14620: PPUSH
// begin enable ;
14621: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14622: LD_INT 22
14624: PUSH
14625: LD_INT 2
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: EMPTY
14633: LIST
14634: PPUSH
14635: CALL_OW 69
14639: PPUSH
14640: LD_INT 13
14642: PPUSH
14643: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14647: LD_ADDR_VAR 0 1
14651: PUSH
14652: LD_INT 13
14654: PPUSH
14655: LD_INT 22
14657: PUSH
14658: LD_INT 2
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PPUSH
14665: CALL_OW 70
14669: PUSH
14670: FOR_IN
14671: IFFALSE 14684
// RemoveUnit ( unit ) ;
14673: LD_VAR 0 1
14677: PPUSH
14678: CALL_OW 64
14682: GO 14670
14684: POP
14685: POP
// end ;
14686: PPOPN 1
14688: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14689: LD_EXP 20
14693: NOT
14694: IFFALSE 15084
14696: GO 14698
14698: DISABLE
14699: LD_INT 0
14701: PPUSH
14702: PPUSH
// begin enable ;
14703: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14704: LD_ADDR_VAR 0 1
14708: PUSH
14709: LD_INT 22
14711: PUSH
14712: LD_INT 3
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 21
14721: PUSH
14722: LD_INT 1
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PPUSH
14733: CALL_OW 69
14737: PUSH
14738: FOR_IN
14739: IFFALSE 15082
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_EXP 54
14750: PPUSH
14751: CALL_OW 296
14755: PUSH
14756: LD_INT 6
14758: LESS
14759: IFFALSE 15080
// begin SetSide ( Gaydar , 3 ) ;
14761: LD_EXP 54
14765: PPUSH
14766: LD_INT 3
14768: PPUSH
14769: CALL_OW 235
// ComWalk ( Gaydar ) ;
14773: LD_EXP 54
14777: PPUSH
14778: CALL_OW 138
// saveGaydar = true ;
14782: LD_ADDR_EXP 20
14786: PUSH
14787: LD_INT 1
14789: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14790: LD_INT 35
14792: PPUSH
14793: CALL_OW 67
// DialogueOn ;
14797: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14801: LD_EXP 54
14805: PPUSH
14806: LD_STRING D11-Gay-1
14808: PPUSH
14809: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14813: LD_EXP 42
14817: PPUSH
14818: LD_EXP 54
14822: PPUSH
14823: CALL_OW 296
14827: PUSH
14828: LD_INT 6
14830: LESS
14831: NOT
14832: IFFALSE 14932
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14834: LD_ADDR_VAR 0 2
14838: PUSH
14839: LD_INT 22
14841: PUSH
14842: LD_INT 3
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 1
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 26
14861: PUSH
14862: LD_INT 1
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 50
14871: PUSH
14872: EMPTY
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: PPUSH
14881: CALL_OW 69
14885: PUSH
14886: LD_EXP 54
14890: DIFF
14891: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14892: LD_VAR 0 2
14896: PPUSH
14897: LD_EXP 54
14901: PPUSH
14902: CALL_OW 74
14906: PPUSH
14907: LD_STRING D11-RSol1-1
14909: PPUSH
14910: CALL_OW 88
// gaydarWaitForBurlak = true ;
14914: LD_ADDR_EXP 21
14918: PUSH
14919: LD_INT 1
14921: ST_TO_ADDR
// DialogueOff ;
14922: CALL_OW 7
// exit ;
14926: POP
14927: POP
14928: GO 15084
// end else
14930: GO 15080
// begin Say ( Gaydar , D11-Gay-2 ) ;
14932: LD_EXP 54
14936: PPUSH
14937: LD_STRING D11-Gay-2
14939: PPUSH
14940: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14944: LD_EXP 42
14948: PPUSH
14949: LD_STRING D11-Bur-2
14951: PPUSH
14952: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14956: LD_EXP 54
14960: PPUSH
14961: LD_STRING D11-Gay-3
14963: PPUSH
14964: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
14968: LD_EXP 42
14972: PPUSH
14973: LD_STRING D11-Bur-3
14975: PPUSH
14976: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
14980: LD_EXP 54
14984: PPUSH
14985: LD_STRING D11-Gay-4
14987: PPUSH
14988: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
14992: LD_EXP 42
14996: PPUSH
14997: LD_STRING D11-Bur-4
14999: PPUSH
15000: CALL_OW 88
// wait ( 0 0$2 ) ;
15004: LD_INT 70
15006: PPUSH
15007: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15011: LD_EXP 52
15015: PPUSH
15016: LD_STRING D12-Pop-1
15018: PPUSH
15019: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15023: LD_EXP 42
15027: PPUSH
15028: LD_STRING D12-Bur-1
15030: PPUSH
15031: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15035: LD_EXP 53
15039: PPUSH
15040: LD_STRING D12-Pla-1
15042: PPUSH
15043: CALL_OW 94
// DialogueOff ;
15047: CALL_OW 7
// canExitMap = true ;
15051: LD_ADDR_EXP 6
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15059: LD_STRING MFinal
15061: PPUSH
15062: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15066: LD_INT 4
15068: PPUSH
15069: LD_INT 1
15071: PPUSH
15072: CALL_OW 424
// exit ;
15076: POP
15077: POP
15078: GO 15084
// end ; end ; end ;
15080: GO 14738
15082: POP
15083: POP
// end ;
15084: PPOPN 2
15086: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15087: LD_EXP 42
15091: PPUSH
15092: LD_EXP 54
15096: PPUSH
15097: CALL_OW 296
15101: PUSH
15102: LD_INT 6
15104: LESS
15105: PUSH
15106: LD_EXP 21
15110: AND
15111: IFFALSE 15264
15113: GO 15115
15115: DISABLE
// begin DialogueOn ;
15116: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15120: LD_EXP 54
15124: PPUSH
15125: LD_STRING D11-Gay-2
15127: PPUSH
15128: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15132: LD_EXP 42
15136: PPUSH
15137: LD_STRING D11-Bur-2
15139: PPUSH
15140: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15144: LD_EXP 54
15148: PPUSH
15149: LD_STRING D11-Gay-3
15151: PPUSH
15152: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15156: LD_EXP 42
15160: PPUSH
15161: LD_STRING D11-Bur-3
15163: PPUSH
15164: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15168: LD_EXP 54
15172: PPUSH
15173: LD_STRING D11-Gay-4
15175: PPUSH
15176: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15180: LD_EXP 42
15184: PPUSH
15185: LD_STRING D11-Bur-4
15187: PPUSH
15188: CALL_OW 88
// wait ( 0 0$2 ) ;
15192: LD_INT 70
15194: PPUSH
15195: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15199: LD_EXP 52
15203: PPUSH
15204: LD_STRING D12-Pop-1
15206: PPUSH
15207: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15211: LD_EXP 42
15215: PPUSH
15216: LD_STRING D12-Bur-1
15218: PPUSH
15219: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15223: LD_EXP 53
15227: PPUSH
15228: LD_STRING D12-Pla-1
15230: PPUSH
15231: CALL_OW 94
// DialogueOff ;
15235: CALL_OW 7
// canExitMap = true ;
15239: LD_ADDR_EXP 6
15243: PUSH
15244: LD_INT 1
15246: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15247: LD_STRING MFinal
15249: PPUSH
15250: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15254: LD_INT 4
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 424
// end ;
15264: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15265: LD_INT 22
15267: PUSH
15268: LD_INT 3
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 21
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PPUSH
15289: CALL_OW 69
15293: PUSH
15294: LD_INT 0
15296: EQUAL
15297: PUSH
15298: LD_EXP 6
15302: AND
15303: IFFALSE 15312
15305: GO 15307
15307: DISABLE
// FinishMission ; end_of_file
15308: CALL 7685 0 0
15312: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15313: LD_EXP 17
15317: PUSH
15318: LD_EXP 19
15322: PUSH
15323: LD_INT 0
15325: EQUAL
15326: AND
15327: PUSH
15328: LD_EXP 19
15332: PUSH
15333: LD_EXP 38
15337: LESS
15338: AND
15339: IFFALSE 15391
15341: GO 15343
15343: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15344: LD_INT 7
15346: PUSH
15347: LD_INT 10
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_INT 2
15359: PPUSH
15360: CALL_OW 12
15364: ARRAY
15365: PPUSH
15366: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15370: LD_EXP 65
15374: PPUSH
15375: EMPTY
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: LD_INT 1
15385: NEG
15386: PPUSH
15387: CALL 5018 0 5
// end ;
15391: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15392: LD_EXP 17
15396: PUSH
15397: LD_EXP 19
15401: PUSH
15402: LD_INT 0
15404: GREATEREQUAL
15405: AND
15406: PUSH
15407: LD_EXP 19
15411: PUSH
15412: LD_EXP 38
15416: LESS
15417: AND
15418: IFFALSE 15648
15420: GO 15422
15422: DISABLE
// begin currentWave = currentWave + 1 ;
15423: LD_ADDR_EXP 19
15427: PUSH
15428: LD_EXP 19
15432: PUSH
15433: LD_INT 1
15435: PLUS
15436: ST_TO_ADDR
// PrepareArabianVehicles ;
15437: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15441: LD_EXP 65
15445: PPUSH
15446: LD_INT 135
15448: PUSH
15449: LD_INT 4
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 134
15458: PUSH
15459: LD_INT 19
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 132
15468: PUSH
15469: LD_INT 26
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 128
15478: PUSH
15479: LD_INT 31
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 123
15488: PUSH
15489: LD_INT 37
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 118
15498: PUSH
15499: LD_INT 45
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 112
15508: PUSH
15509: LD_INT 51
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 106
15518: PUSH
15519: LD_INT 57
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 99
15528: PUSH
15529: LD_INT 62
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 93
15538: PUSH
15539: LD_INT 67
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 86
15548: PUSH
15549: LD_INT 72
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 78
15558: PUSH
15559: LD_INT 75
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 71
15568: PUSH
15569: LD_INT 81
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 69
15578: PUSH
15579: LD_INT 88
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 71
15588: PUSH
15589: LD_INT 95
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 74
15598: PUSH
15599: LD_INT 103
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 80
15608: PUSH
15609: LD_INT 113
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: PPUSH
15635: LD_INT 0
15637: PPUSH
15638: LD_INT 1
15640: PPUSH
15641: LD_INT 11
15643: PPUSH
15644: CALL 5018 0 5
// end ;
15648: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15649: LD_EXP 17
15653: PUSH
15654: LD_OWVAR 67
15658: PUSH
15659: LD_INT 2
15661: EQUAL
15662: AND
15663: PUSH
15664: LD_EXP 19
15668: PUSH
15669: LD_INT 0
15671: GREATEREQUAL
15672: AND
15673: PUSH
15674: LD_EXP 19
15678: PUSH
15679: LD_EXP 38
15683: LESS
15684: AND
15685: IFFALSE 15835
15687: GO 15689
15689: DISABLE
// begin PrepareArabianVehicles ;
15690: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
15694: LD_EXP 65
15698: PPUSH
15699: LD_INT 135
15701: PUSH
15702: LD_INT 4
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 134
15711: PUSH
15712: LD_INT 19
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 132
15721: PUSH
15722: LD_INT 26
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 128
15731: PUSH
15732: LD_INT 31
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 123
15741: PUSH
15742: LD_INT 37
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 118
15751: PUSH
15752: LD_INT 45
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 112
15761: PUSH
15762: LD_INT 51
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 106
15771: PUSH
15772: LD_INT 57
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 99
15781: PUSH
15782: LD_INT 62
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 104
15791: PUSH
15792: LD_INT 71
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 110
15801: PUSH
15802: LD_INT 78
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: PPUSH
15822: LD_INT 0
15824: PPUSH
15825: LD_INT 1
15827: PPUSH
15828: LD_INT 11
15830: PPUSH
15831: CALL 5018 0 5
// end ;
15835: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
15836: LD_EXP 17
15840: PUSH
15841: LD_OWVAR 67
15845: PUSH
15846: LD_INT 3
15848: EQUAL
15849: AND
15850: PUSH
15851: LD_EXP 19
15855: PUSH
15856: LD_INT 0
15858: GREATEREQUAL
15859: AND
15860: PUSH
15861: LD_EXP 19
15865: PUSH
15866: LD_EXP 38
15870: LESS
15871: AND
15872: IFFALSE 16066
15874: GO 15876
15876: DISABLE
// begin PrepareArabianVehicles ;
15877: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15881: LD_EXP 65
15885: PPUSH
15886: LD_INT 135
15888: PUSH
15889: LD_INT 4
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 134
15898: PUSH
15899: LD_INT 19
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 132
15908: PUSH
15909: LD_INT 26
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 128
15918: PUSH
15919: LD_INT 31
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 123
15928: PUSH
15929: LD_INT 37
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 118
15938: PUSH
15939: LD_INT 45
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 112
15948: PUSH
15949: LD_INT 51
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 106
15958: PUSH
15959: LD_INT 57
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 99
15968: PUSH
15969: LD_INT 62
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 104
15978: PUSH
15979: LD_INT 71
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 110
15988: PUSH
15989: LD_INT 78
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_INT 119
15998: PUSH
15999: LD_INT 88
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 128
16008: PUSH
16009: LD_INT 97
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 135
16018: PUSH
16019: LD_INT 106
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 140
16028: PUSH
16029: LD_INT 153
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: PPUSH
16053: LD_INT 0
16055: PPUSH
16056: LD_INT 1
16058: PPUSH
16059: LD_INT 11
16061: PPUSH
16062: CALL 5018 0 5
// end ;
16066: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16067: LD_EXP 17
16071: PUSH
16072: LD_EXP 19
16076: PUSH
16077: LD_INT 1
16079: EQUAL
16080: AND
16081: PUSH
16082: LD_EXP 19
16086: PUSH
16087: LD_EXP 38
16091: LESS
16092: AND
16093: IFFALSE 16170
16095: GO 16097
16097: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16098: LD_INT 7
16100: PPUSH
16101: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16105: LD_EXP 65
16109: PPUSH
16110: LD_INT 157
16112: PUSH
16113: LD_INT 31
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 194
16122: PUSH
16123: LD_INT 124
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 174
16132: PUSH
16133: LD_INT 158
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 151
16142: PUSH
16143: LD_INT 164
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: PPUSH
16156: LD_INT 0
16158: PPUSH
16159: LD_INT 1
16161: PPUSH
16162: LD_INT 1
16164: NEG
16165: PPUSH
16166: CALL 5018 0 5
// end ;
16170: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16171: LD_EXP 17
16175: PUSH
16176: LD_EXP 19
16180: PUSH
16181: LD_INT 1
16183: EQUAL
16184: AND
16185: PUSH
16186: LD_EXP 19
16190: PUSH
16191: LD_EXP 38
16195: LESS
16196: AND
16197: IFFALSE 16368
16199: GO 16201
16201: DISABLE
// begin wait ( 1 1$30 ) ;
16202: LD_INT 3150
16204: PPUSH
16205: CALL_OW 67
// currentWave = currentWave + 1 ;
16209: LD_ADDR_EXP 19
16213: PUSH
16214: LD_EXP 19
16218: PUSH
16219: LD_INT 1
16221: PLUS
16222: ST_TO_ADDR
// PrepareArabianVehicles ;
16223: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
16227: LD_EXP 65
16231: PPUSH
16232: LD_INT 135
16234: PUSH
16235: LD_INT 4
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 134
16244: PUSH
16245: LD_INT 19
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 132
16254: PUSH
16255: LD_INT 26
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 128
16264: PUSH
16265: LD_INT 31
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 123
16274: PUSH
16275: LD_INT 37
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 118
16284: PUSH
16285: LD_INT 45
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 112
16294: PUSH
16295: LD_INT 51
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 106
16304: PUSH
16305: LD_INT 57
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 99
16314: PUSH
16315: LD_INT 62
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 104
16324: PUSH
16325: LD_INT 71
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 110
16334: PUSH
16335: LD_INT 78
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: PPUSH
16355: LD_INT 0
16357: PPUSH
16358: LD_INT 1
16360: PPUSH
16361: LD_INT 11
16363: PPUSH
16364: CALL 5018 0 5
// end ;
16368: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16369: LD_EXP 17
16373: PUSH
16374: LD_OWVAR 67
16378: PUSH
16379: LD_INT 2
16381: EQUAL
16382: AND
16383: PUSH
16384: LD_EXP 19
16388: PUSH
16389: LD_INT 1
16391: EQUAL
16392: AND
16393: PUSH
16394: LD_EXP 19
16398: PUSH
16399: LD_EXP 38
16403: LESS
16404: AND
16405: IFFALSE 16599
16407: GO 16409
16409: DISABLE
// begin PrepareArabianVehicles ;
16410: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16414: LD_EXP 65
16418: PPUSH
16419: LD_INT 135
16421: PUSH
16422: LD_INT 4
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 134
16431: PUSH
16432: LD_INT 19
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 132
16441: PUSH
16442: LD_INT 26
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 128
16451: PUSH
16452: LD_INT 31
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 123
16461: PUSH
16462: LD_INT 37
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 118
16471: PUSH
16472: LD_INT 45
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 112
16481: PUSH
16482: LD_INT 51
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 106
16491: PUSH
16492: LD_INT 57
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 99
16501: PUSH
16502: LD_INT 62
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 104
16511: PUSH
16512: LD_INT 71
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 110
16521: PUSH
16522: LD_INT 78
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 119
16531: PUSH
16532: LD_INT 88
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 128
16541: PUSH
16542: LD_INT 97
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 135
16551: PUSH
16552: LD_INT 106
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 140
16561: PUSH
16562: LD_INT 153
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: PPUSH
16586: LD_INT 0
16588: PPUSH
16589: LD_INT 1
16591: PPUSH
16592: LD_INT 11
16594: PPUSH
16595: CALL 5018 0 5
// end ;
16599: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
16600: LD_EXP 17
16604: PUSH
16605: LD_OWVAR 67
16609: PUSH
16610: LD_INT 3
16612: EQUAL
16613: AND
16614: PUSH
16615: LD_EXP 19
16619: PUSH
16620: LD_INT 1
16622: EQUAL
16623: AND
16624: PUSH
16625: LD_EXP 19
16629: PUSH
16630: LD_EXP 38
16634: LESS
16635: AND
16636: IFFALSE 16852
16638: GO 16640
16640: DISABLE
// begin PrepareArabianVehicles ;
16641: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16645: LD_EXP 65
16649: PPUSH
16650: LD_INT 135
16652: PUSH
16653: LD_INT 4
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 134
16662: PUSH
16663: LD_INT 19
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 132
16672: PUSH
16673: LD_INT 26
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 128
16682: PUSH
16683: LD_INT 31
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 123
16692: PUSH
16693: LD_INT 37
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 118
16702: PUSH
16703: LD_INT 45
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 112
16712: PUSH
16713: LD_INT 51
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 106
16722: PUSH
16723: LD_INT 57
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 99
16732: PUSH
16733: LD_INT 62
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 93
16742: PUSH
16743: LD_INT 67
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 86
16752: PUSH
16753: LD_INT 72
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 78
16762: PUSH
16763: LD_INT 75
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 71
16772: PUSH
16773: LD_INT 81
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 69
16782: PUSH
16783: LD_INT 88
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 71
16792: PUSH
16793: LD_INT 95
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 74
16802: PUSH
16803: LD_INT 103
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 80
16812: PUSH
16813: LD_INT 113
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: PPUSH
16839: LD_INT 0
16841: PPUSH
16842: LD_INT 1
16844: PPUSH
16845: LD_INT 11
16847: PPUSH
16848: CALL 5018 0 5
// end ;
16852: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16853: LD_EXP 17
16857: PUSH
16858: LD_EXP 19
16862: PUSH
16863: LD_INT 2
16865: EQUAL
16866: AND
16867: PUSH
16868: LD_EXP 19
16872: PUSH
16873: LD_EXP 38
16877: LESS
16878: AND
16879: IFFALSE 16956
16881: GO 16883
16883: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16884: LD_INT 7
16886: PPUSH
16887: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16891: LD_EXP 65
16895: PPUSH
16896: LD_INT 157
16898: PUSH
16899: LD_INT 31
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PUSH
16906: LD_INT 194
16908: PUSH
16909: LD_INT 124
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 174
16918: PUSH
16919: LD_INT 158
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 151
16928: PUSH
16929: LD_INT 164
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: PPUSH
16942: LD_INT 0
16944: PPUSH
16945: LD_INT 1
16947: PPUSH
16948: LD_INT 1
16950: NEG
16951: PPUSH
16952: CALL 5018 0 5
// end ;
16956: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16957: LD_EXP 17
16961: PUSH
16962: LD_EXP 19
16966: PUSH
16967: LD_INT 2
16969: EQUAL
16970: AND
16971: PUSH
16972: LD_EXP 19
16976: PUSH
16977: LD_EXP 38
16981: LESS
16982: AND
16983: IFFALSE 17220
16985: GO 16987
16987: DISABLE
// begin wait ( 1 1$30 ) ;
16988: LD_INT 3150
16990: PPUSH
16991: CALL_OW 67
// currentWave = currentWave + 1 ;
16995: LD_ADDR_EXP 19
16999: PUSH
17000: LD_EXP 19
17004: PUSH
17005: LD_INT 1
17007: PLUS
17008: ST_TO_ADDR
// PrepareArabianVehicles ;
17009: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17013: LD_EXP 65
17017: PPUSH
17018: LD_INT 135
17020: PUSH
17021: LD_INT 4
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 134
17030: PUSH
17031: LD_INT 19
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 132
17040: PUSH
17041: LD_INT 26
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 128
17050: PUSH
17051: LD_INT 31
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 123
17060: PUSH
17061: LD_INT 37
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 118
17070: PUSH
17071: LD_INT 45
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 112
17080: PUSH
17081: LD_INT 51
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 106
17090: PUSH
17091: LD_INT 57
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 99
17100: PUSH
17101: LD_INT 62
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 93
17110: PUSH
17111: LD_INT 67
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 86
17120: PUSH
17121: LD_INT 72
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 78
17130: PUSH
17131: LD_INT 75
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 71
17140: PUSH
17141: LD_INT 81
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 69
17150: PUSH
17151: LD_INT 88
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 71
17160: PUSH
17161: LD_INT 95
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 74
17170: PUSH
17171: LD_INT 103
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 80
17180: PUSH
17181: LD_INT 113
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: PPUSH
17207: LD_INT 0
17209: PPUSH
17210: LD_INT 1
17212: PPUSH
17213: LD_INT 11
17215: PPUSH
17216: CALL 5018 0 5
// end ;
17220: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17221: LD_EXP 17
17225: PUSH
17226: LD_OWVAR 67
17230: PUSH
17231: LD_INT 2
17233: EQUAL
17234: AND
17235: PUSH
17236: LD_EXP 19
17240: PUSH
17241: LD_INT 2
17243: EQUAL
17244: AND
17245: PUSH
17246: LD_EXP 19
17250: PUSH
17251: LD_EXP 38
17255: LESS
17256: AND
17257: IFFALSE 17451
17259: GO 17261
17261: DISABLE
// begin PrepareArabianVehicles ;
17262: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17266: LD_EXP 65
17270: PPUSH
17271: LD_INT 135
17273: PUSH
17274: LD_INT 4
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 134
17283: PUSH
17284: LD_INT 19
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 132
17293: PUSH
17294: LD_INT 26
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 128
17303: PUSH
17304: LD_INT 31
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 123
17313: PUSH
17314: LD_INT 37
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 118
17323: PUSH
17324: LD_INT 45
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 112
17333: PUSH
17334: LD_INT 51
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 106
17343: PUSH
17344: LD_INT 57
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 99
17353: PUSH
17354: LD_INT 62
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 104
17363: PUSH
17364: LD_INT 71
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 110
17373: PUSH
17374: LD_INT 78
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 119
17383: PUSH
17384: LD_INT 88
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 128
17393: PUSH
17394: LD_INT 97
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 135
17403: PUSH
17404: LD_INT 106
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 140
17413: PUSH
17414: LD_INT 153
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: PPUSH
17438: LD_INT 0
17440: PPUSH
17441: LD_INT 1
17443: PPUSH
17444: LD_INT 11
17446: PPUSH
17447: CALL 5018 0 5
// end ;
17451: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
17452: LD_EXP 17
17456: PUSH
17457: LD_OWVAR 67
17461: PUSH
17462: LD_INT 3
17464: EQUAL
17465: AND
17466: PUSH
17467: LD_EXP 19
17471: PUSH
17472: LD_INT 2
17474: EQUAL
17475: AND
17476: PUSH
17477: LD_EXP 19
17481: PUSH
17482: LD_EXP 38
17486: LESS
17487: AND
17488: IFFALSE 17682
17490: GO 17492
17492: DISABLE
// begin PrepareArabianVehicles ;
17493: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17497: LD_EXP 65
17501: PPUSH
17502: LD_INT 135
17504: PUSH
17505: LD_INT 4
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 134
17514: PUSH
17515: LD_INT 19
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 132
17524: PUSH
17525: LD_INT 26
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 128
17534: PUSH
17535: LD_INT 31
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 123
17544: PUSH
17545: LD_INT 37
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 118
17554: PUSH
17555: LD_INT 45
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 112
17564: PUSH
17565: LD_INT 51
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 106
17574: PUSH
17575: LD_INT 57
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 99
17584: PUSH
17585: LD_INT 62
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 104
17594: PUSH
17595: LD_INT 71
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 110
17604: PUSH
17605: LD_INT 78
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 119
17614: PUSH
17615: LD_INT 88
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 128
17624: PUSH
17625: LD_INT 97
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 135
17634: PUSH
17635: LD_INT 106
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 140
17644: PUSH
17645: LD_INT 153
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: PPUSH
17669: LD_INT 0
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 11
17677: PPUSH
17678: CALL 5018 0 5
// end ;
17682: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17683: LD_EXP 17
17687: PUSH
17688: LD_EXP 19
17692: PUSH
17693: LD_INT 3
17695: EQUAL
17696: AND
17697: PUSH
17698: LD_EXP 19
17702: PUSH
17703: LD_EXP 38
17707: LESS
17708: AND
17709: IFFALSE 17786
17711: GO 17713
17713: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17714: LD_INT 7
17716: PPUSH
17717: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17721: LD_EXP 65
17725: PPUSH
17726: LD_INT 157
17728: PUSH
17729: LD_INT 31
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 194
17738: PUSH
17739: LD_INT 124
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 174
17748: PUSH
17749: LD_INT 158
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 151
17758: PUSH
17759: LD_INT 164
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: PPUSH
17772: LD_INT 0
17774: PPUSH
17775: LD_INT 1
17777: PPUSH
17778: LD_INT 1
17780: NEG
17781: PPUSH
17782: CALL 5018 0 5
// end ;
17786: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17787: LD_EXP 17
17791: PUSH
17792: LD_EXP 19
17796: PUSH
17797: LD_INT 3
17799: EQUAL
17800: AND
17801: PUSH
17802: LD_EXP 19
17806: PUSH
17807: LD_EXP 38
17811: LESS
17812: AND
17813: IFFALSE 18050
17815: GO 17817
17817: DISABLE
// begin wait ( 1 1$30 ) ;
17818: LD_INT 3150
17820: PPUSH
17821: CALL_OW 67
// currentWave = currentWave + 1 ;
17825: LD_ADDR_EXP 19
17829: PUSH
17830: LD_EXP 19
17834: PUSH
17835: LD_INT 1
17837: PLUS
17838: ST_TO_ADDR
// PrepareArabianVehicles ;
17839: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17843: LD_EXP 65
17847: PPUSH
17848: LD_INT 135
17850: PUSH
17851: LD_INT 4
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 134
17860: PUSH
17861: LD_INT 19
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 132
17870: PUSH
17871: LD_INT 26
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 128
17880: PUSH
17881: LD_INT 31
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 123
17890: PUSH
17891: LD_INT 37
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 118
17900: PUSH
17901: LD_INT 45
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 112
17910: PUSH
17911: LD_INT 51
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 106
17920: PUSH
17921: LD_INT 57
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 99
17930: PUSH
17931: LD_INT 62
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 93
17940: PUSH
17941: LD_INT 67
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 86
17950: PUSH
17951: LD_INT 72
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 78
17960: PUSH
17961: LD_INT 75
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 71
17970: PUSH
17971: LD_INT 81
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 69
17980: PUSH
17981: LD_INT 88
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 71
17990: PUSH
17991: LD_INT 95
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 74
18000: PUSH
18001: LD_INT 103
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 80
18010: PUSH
18011: LD_INT 113
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: PPUSH
18037: LD_INT 0
18039: PPUSH
18040: LD_INT 1
18042: PPUSH
18043: LD_INT 11
18045: PPUSH
18046: CALL 5018 0 5
// end ;
18050: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18051: LD_EXP 17
18055: PUSH
18056: LD_OWVAR 67
18060: PUSH
18061: LD_INT 2
18063: EQUAL
18064: AND
18065: PUSH
18066: LD_EXP 19
18070: PUSH
18071: LD_INT 3
18073: EQUAL
18074: AND
18075: PUSH
18076: LD_EXP 19
18080: PUSH
18081: LD_EXP 38
18085: LESS
18086: AND
18087: IFFALSE 18281
18089: GO 18091
18091: DISABLE
// begin PrepareArabianVehicles ;
18092: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18096: LD_EXP 65
18100: PPUSH
18101: LD_INT 135
18103: PUSH
18104: LD_INT 4
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 134
18113: PUSH
18114: LD_INT 19
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 132
18123: PUSH
18124: LD_INT 26
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 128
18133: PUSH
18134: LD_INT 31
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 123
18143: PUSH
18144: LD_INT 37
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 118
18153: PUSH
18154: LD_INT 45
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 112
18163: PUSH
18164: LD_INT 51
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 106
18173: PUSH
18174: LD_INT 57
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 99
18183: PUSH
18184: LD_INT 62
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 104
18193: PUSH
18194: LD_INT 71
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 110
18203: PUSH
18204: LD_INT 78
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 119
18213: PUSH
18214: LD_INT 88
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 128
18223: PUSH
18224: LD_INT 97
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 135
18233: PUSH
18234: LD_INT 106
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 140
18243: PUSH
18244: LD_INT 153
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: LD_INT 11
18276: PPUSH
18277: CALL 5018 0 5
// end ;
18281: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
18282: LD_EXP 17
18286: PUSH
18287: LD_OWVAR 67
18291: PUSH
18292: LD_INT 3
18294: EQUAL
18295: AND
18296: PUSH
18297: LD_EXP 19
18301: PUSH
18302: LD_INT 3
18304: EQUAL
18305: AND
18306: PUSH
18307: LD_EXP 19
18311: PUSH
18312: LD_EXP 38
18316: LESS
18317: AND
18318: IFFALSE 18512
18320: GO 18322
18322: DISABLE
// begin PrepareArabianVehicles ;
18323: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18327: LD_EXP 65
18331: PPUSH
18332: LD_INT 135
18334: PUSH
18335: LD_INT 4
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 134
18344: PUSH
18345: LD_INT 19
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 132
18354: PUSH
18355: LD_INT 26
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 128
18364: PUSH
18365: LD_INT 31
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 123
18374: PUSH
18375: LD_INT 37
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 118
18384: PUSH
18385: LD_INT 45
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 112
18394: PUSH
18395: LD_INT 51
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 106
18404: PUSH
18405: LD_INT 57
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 99
18414: PUSH
18415: LD_INT 62
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 104
18424: PUSH
18425: LD_INT 71
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 110
18434: PUSH
18435: LD_INT 78
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 119
18444: PUSH
18445: LD_INT 88
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 128
18454: PUSH
18455: LD_INT 97
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 135
18464: PUSH
18465: LD_INT 106
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 140
18474: PUSH
18475: LD_INT 153
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: PPUSH
18499: LD_INT 0
18501: PPUSH
18502: LD_INT 1
18504: PPUSH
18505: LD_INT 11
18507: PPUSH
18508: CALL 5018 0 5
// end ;
18512: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18513: LD_EXP 54
18517: PPUSH
18518: CALL_OW 305
18522: PUSH
18523: LD_EXP 23
18527: PUSH
18528: LD_INT 5
18530: LESS
18531: AND
18532: IFFALSE 18542
18534: GO 18536
18536: DISABLE
// begin PrepareArabianKiller ;
18537: CALL 4066 0 0
// enable ;
18541: ENABLE
// end ; end_of_file
18542: END
// export function SetAchievements ; begin
18543: LD_INT 0
18545: PPUSH
// if stealWarmCount = 0 then
18546: LD_EXP 12
18550: PUSH
18551: LD_INT 0
18553: EQUAL
18554: IFFALSE 18563
// SetAchievement ( ACH_ENO ) ;
18556: LD_STRING ACH_ENO
18558: PPUSH
18559: CALL_OW 543
// end ;
18563: LD_VAR 0 1
18567: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18568: LD_EXP 25
18572: PUSH
18573: LD_INT 6
18575: GREATEREQUAL
18576: IFFALSE 18588
18578: GO 18580
18580: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18581: LD_STRING ACH_DEFENSE
18583: PPUSH
18584: CALL_OW 543
18588: END
// every 1 trigger killedArabianUnits >= 25 do
18589: LD_EXP 22
18593: PUSH
18594: LD_INT 25
18596: GREATEREQUAL
18597: IFFALSE 18609
18599: GO 18601
18601: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18602: LD_STRING ACH_ARAB
18604: PPUSH
18605: CALL_OW 543
18609: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18610: LD_VAR 0 2
18614: PUSH
18615: LD_INT 100
18617: EQUAL
18618: IFFALSE 19567
// begin if not StreamModeActive then
18620: LD_EXP 66
18624: NOT
18625: IFFALSE 18635
// StreamModeActive := true ;
18627: LD_ADDR_EXP 66
18631: PUSH
18632: LD_INT 1
18634: ST_TO_ADDR
// if p3 = 0 then
18635: LD_VAR 0 3
18639: PUSH
18640: LD_INT 0
18642: EQUAL
18643: IFFALSE 18649
// InitStreamMode ;
18645: CALL 19800 0 0
// if p3 = 1 then
18649: LD_VAR 0 3
18653: PUSH
18654: LD_INT 1
18656: EQUAL
18657: IFFALSE 18667
// sRocket := true ;
18659: LD_ADDR_EXP 71
18663: PUSH
18664: LD_INT 1
18666: ST_TO_ADDR
// if p3 = 2 then
18667: LD_VAR 0 3
18671: PUSH
18672: LD_INT 2
18674: EQUAL
18675: IFFALSE 18685
// sSpeed := true ;
18677: LD_ADDR_EXP 70
18681: PUSH
18682: LD_INT 1
18684: ST_TO_ADDR
// if p3 = 3 then
18685: LD_VAR 0 3
18689: PUSH
18690: LD_INT 3
18692: EQUAL
18693: IFFALSE 18703
// sEngine := true ;
18695: LD_ADDR_EXP 72
18699: PUSH
18700: LD_INT 1
18702: ST_TO_ADDR
// if p3 = 4 then
18703: LD_VAR 0 3
18707: PUSH
18708: LD_INT 4
18710: EQUAL
18711: IFFALSE 18721
// sSpec := true ;
18713: LD_ADDR_EXP 69
18717: PUSH
18718: LD_INT 1
18720: ST_TO_ADDR
// if p3 = 5 then
18721: LD_VAR 0 3
18725: PUSH
18726: LD_INT 5
18728: EQUAL
18729: IFFALSE 18739
// sLevel := true ;
18731: LD_ADDR_EXP 73
18735: PUSH
18736: LD_INT 1
18738: ST_TO_ADDR
// if p3 = 6 then
18739: LD_VAR 0 3
18743: PUSH
18744: LD_INT 6
18746: EQUAL
18747: IFFALSE 18757
// sArmoury := true ;
18749: LD_ADDR_EXP 74
18753: PUSH
18754: LD_INT 1
18756: ST_TO_ADDR
// if p3 = 7 then
18757: LD_VAR 0 3
18761: PUSH
18762: LD_INT 7
18764: EQUAL
18765: IFFALSE 18775
// sRadar := true ;
18767: LD_ADDR_EXP 75
18771: PUSH
18772: LD_INT 1
18774: ST_TO_ADDR
// if p3 = 8 then
18775: LD_VAR 0 3
18779: PUSH
18780: LD_INT 8
18782: EQUAL
18783: IFFALSE 18793
// sBunker := true ;
18785: LD_ADDR_EXP 76
18789: PUSH
18790: LD_INT 1
18792: ST_TO_ADDR
// if p3 = 9 then
18793: LD_VAR 0 3
18797: PUSH
18798: LD_INT 9
18800: EQUAL
18801: IFFALSE 18811
// sHack := true ;
18803: LD_ADDR_EXP 77
18807: PUSH
18808: LD_INT 1
18810: ST_TO_ADDR
// if p3 = 10 then
18811: LD_VAR 0 3
18815: PUSH
18816: LD_INT 10
18818: EQUAL
18819: IFFALSE 18829
// sFire := true ;
18821: LD_ADDR_EXP 78
18825: PUSH
18826: LD_INT 1
18828: ST_TO_ADDR
// if p3 = 11 then
18829: LD_VAR 0 3
18833: PUSH
18834: LD_INT 11
18836: EQUAL
18837: IFFALSE 18847
// sRefresh := true ;
18839: LD_ADDR_EXP 79
18843: PUSH
18844: LD_INT 1
18846: ST_TO_ADDR
// if p3 = 12 then
18847: LD_VAR 0 3
18851: PUSH
18852: LD_INT 12
18854: EQUAL
18855: IFFALSE 18865
// sExp := true ;
18857: LD_ADDR_EXP 80
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
// if p3 = 13 then
18865: LD_VAR 0 3
18869: PUSH
18870: LD_INT 13
18872: EQUAL
18873: IFFALSE 18883
// sDepot := true ;
18875: LD_ADDR_EXP 81
18879: PUSH
18880: LD_INT 1
18882: ST_TO_ADDR
// if p3 = 14 then
18883: LD_VAR 0 3
18887: PUSH
18888: LD_INT 14
18890: EQUAL
18891: IFFALSE 18901
// sFlag := true ;
18893: LD_ADDR_EXP 82
18897: PUSH
18898: LD_INT 1
18900: ST_TO_ADDR
// if p3 = 15 then
18901: LD_VAR 0 3
18905: PUSH
18906: LD_INT 15
18908: EQUAL
18909: IFFALSE 18919
// sKamikadze := true ;
18911: LD_ADDR_EXP 90
18915: PUSH
18916: LD_INT 1
18918: ST_TO_ADDR
// if p3 = 16 then
18919: LD_VAR 0 3
18923: PUSH
18924: LD_INT 16
18926: EQUAL
18927: IFFALSE 18937
// sTroll := true ;
18929: LD_ADDR_EXP 91
18933: PUSH
18934: LD_INT 1
18936: ST_TO_ADDR
// if p3 = 17 then
18937: LD_VAR 0 3
18941: PUSH
18942: LD_INT 17
18944: EQUAL
18945: IFFALSE 18955
// sSlow := true ;
18947: LD_ADDR_EXP 92
18951: PUSH
18952: LD_INT 1
18954: ST_TO_ADDR
// if p3 = 18 then
18955: LD_VAR 0 3
18959: PUSH
18960: LD_INT 18
18962: EQUAL
18963: IFFALSE 18973
// sLack := true ;
18965: LD_ADDR_EXP 93
18969: PUSH
18970: LD_INT 1
18972: ST_TO_ADDR
// if p3 = 19 then
18973: LD_VAR 0 3
18977: PUSH
18978: LD_INT 19
18980: EQUAL
18981: IFFALSE 18991
// sTank := true ;
18983: LD_ADDR_EXP 95
18987: PUSH
18988: LD_INT 1
18990: ST_TO_ADDR
// if p3 = 20 then
18991: LD_VAR 0 3
18995: PUSH
18996: LD_INT 20
18998: EQUAL
18999: IFFALSE 19009
// sRemote := true ;
19001: LD_ADDR_EXP 96
19005: PUSH
19006: LD_INT 1
19008: ST_TO_ADDR
// if p3 = 21 then
19009: LD_VAR 0 3
19013: PUSH
19014: LD_INT 21
19016: EQUAL
19017: IFFALSE 19027
// sPowell := true ;
19019: LD_ADDR_EXP 97
19023: PUSH
19024: LD_INT 1
19026: ST_TO_ADDR
// if p3 = 22 then
19027: LD_VAR 0 3
19031: PUSH
19032: LD_INT 22
19034: EQUAL
19035: IFFALSE 19045
// sTeleport := true ;
19037: LD_ADDR_EXP 100
19041: PUSH
19042: LD_INT 1
19044: ST_TO_ADDR
// if p3 = 23 then
19045: LD_VAR 0 3
19049: PUSH
19050: LD_INT 23
19052: EQUAL
19053: IFFALSE 19063
// sOilTower := true ;
19055: LD_ADDR_EXP 102
19059: PUSH
19060: LD_INT 1
19062: ST_TO_ADDR
// if p3 = 24 then
19063: LD_VAR 0 3
19067: PUSH
19068: LD_INT 24
19070: EQUAL
19071: IFFALSE 19081
// sShovel := true ;
19073: LD_ADDR_EXP 103
19077: PUSH
19078: LD_INT 1
19080: ST_TO_ADDR
// if p3 = 25 then
19081: LD_VAR 0 3
19085: PUSH
19086: LD_INT 25
19088: EQUAL
19089: IFFALSE 19099
// sSheik := true ;
19091: LD_ADDR_EXP 104
19095: PUSH
19096: LD_INT 1
19098: ST_TO_ADDR
// if p3 = 26 then
19099: LD_VAR 0 3
19103: PUSH
19104: LD_INT 26
19106: EQUAL
19107: IFFALSE 19117
// sEarthquake := true ;
19109: LD_ADDR_EXP 106
19113: PUSH
19114: LD_INT 1
19116: ST_TO_ADDR
// if p3 = 27 then
19117: LD_VAR 0 3
19121: PUSH
19122: LD_INT 27
19124: EQUAL
19125: IFFALSE 19135
// sAI := true ;
19127: LD_ADDR_EXP 107
19131: PUSH
19132: LD_INT 1
19134: ST_TO_ADDR
// if p3 = 28 then
19135: LD_VAR 0 3
19139: PUSH
19140: LD_INT 28
19142: EQUAL
19143: IFFALSE 19153
// sCargo := true ;
19145: LD_ADDR_EXP 110
19149: PUSH
19150: LD_INT 1
19152: ST_TO_ADDR
// if p3 = 29 then
19153: LD_VAR 0 3
19157: PUSH
19158: LD_INT 29
19160: EQUAL
19161: IFFALSE 19171
// sDLaser := true ;
19163: LD_ADDR_EXP 111
19167: PUSH
19168: LD_INT 1
19170: ST_TO_ADDR
// if p3 = 30 then
19171: LD_VAR 0 3
19175: PUSH
19176: LD_INT 30
19178: EQUAL
19179: IFFALSE 19189
// sExchange := true ;
19181: LD_ADDR_EXP 112
19185: PUSH
19186: LD_INT 1
19188: ST_TO_ADDR
// if p3 = 31 then
19189: LD_VAR 0 3
19193: PUSH
19194: LD_INT 31
19196: EQUAL
19197: IFFALSE 19207
// sFac := true ;
19199: LD_ADDR_EXP 113
19203: PUSH
19204: LD_INT 1
19206: ST_TO_ADDR
// if p3 = 32 then
19207: LD_VAR 0 3
19211: PUSH
19212: LD_INT 32
19214: EQUAL
19215: IFFALSE 19225
// sPower := true ;
19217: LD_ADDR_EXP 114
19221: PUSH
19222: LD_INT 1
19224: ST_TO_ADDR
// if p3 = 33 then
19225: LD_VAR 0 3
19229: PUSH
19230: LD_INT 33
19232: EQUAL
19233: IFFALSE 19243
// sRandom := true ;
19235: LD_ADDR_EXP 115
19239: PUSH
19240: LD_INT 1
19242: ST_TO_ADDR
// if p3 = 34 then
19243: LD_VAR 0 3
19247: PUSH
19248: LD_INT 34
19250: EQUAL
19251: IFFALSE 19261
// sShield := true ;
19253: LD_ADDR_EXP 116
19257: PUSH
19258: LD_INT 1
19260: ST_TO_ADDR
// if p3 = 35 then
19261: LD_VAR 0 3
19265: PUSH
19266: LD_INT 35
19268: EQUAL
19269: IFFALSE 19279
// sTime := true ;
19271: LD_ADDR_EXP 117
19275: PUSH
19276: LD_INT 1
19278: ST_TO_ADDR
// if p3 = 36 then
19279: LD_VAR 0 3
19283: PUSH
19284: LD_INT 36
19286: EQUAL
19287: IFFALSE 19297
// sTools := true ;
19289: LD_ADDR_EXP 118
19293: PUSH
19294: LD_INT 1
19296: ST_TO_ADDR
// if p3 = 101 then
19297: LD_VAR 0 3
19301: PUSH
19302: LD_INT 101
19304: EQUAL
19305: IFFALSE 19315
// sSold := true ;
19307: LD_ADDR_EXP 83
19311: PUSH
19312: LD_INT 1
19314: ST_TO_ADDR
// if p3 = 102 then
19315: LD_VAR 0 3
19319: PUSH
19320: LD_INT 102
19322: EQUAL
19323: IFFALSE 19333
// sDiff := true ;
19325: LD_ADDR_EXP 84
19329: PUSH
19330: LD_INT 1
19332: ST_TO_ADDR
// if p3 = 103 then
19333: LD_VAR 0 3
19337: PUSH
19338: LD_INT 103
19340: EQUAL
19341: IFFALSE 19351
// sFog := true ;
19343: LD_ADDR_EXP 87
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
// if p3 = 104 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 104
19358: EQUAL
19359: IFFALSE 19369
// sReset := true ;
19361: LD_ADDR_EXP 88
19365: PUSH
19366: LD_INT 1
19368: ST_TO_ADDR
// if p3 = 105 then
19369: LD_VAR 0 3
19373: PUSH
19374: LD_INT 105
19376: EQUAL
19377: IFFALSE 19387
// sSun := true ;
19379: LD_ADDR_EXP 89
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// if p3 = 106 then
19387: LD_VAR 0 3
19391: PUSH
19392: LD_INT 106
19394: EQUAL
19395: IFFALSE 19405
// sTiger := true ;
19397: LD_ADDR_EXP 85
19401: PUSH
19402: LD_INT 1
19404: ST_TO_ADDR
// if p3 = 107 then
19405: LD_VAR 0 3
19409: PUSH
19410: LD_INT 107
19412: EQUAL
19413: IFFALSE 19423
// sBomb := true ;
19415: LD_ADDR_EXP 86
19419: PUSH
19420: LD_INT 1
19422: ST_TO_ADDR
// if p3 = 108 then
19423: LD_VAR 0 3
19427: PUSH
19428: LD_INT 108
19430: EQUAL
19431: IFFALSE 19441
// sWound := true ;
19433: LD_ADDR_EXP 94
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// if p3 = 109 then
19441: LD_VAR 0 3
19445: PUSH
19446: LD_INT 109
19448: EQUAL
19449: IFFALSE 19459
// sBetray := true ;
19451: LD_ADDR_EXP 98
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// if p3 = 110 then
19459: LD_VAR 0 3
19463: PUSH
19464: LD_INT 110
19466: EQUAL
19467: IFFALSE 19477
// sContamin := true ;
19469: LD_ADDR_EXP 99
19473: PUSH
19474: LD_INT 1
19476: ST_TO_ADDR
// if p3 = 111 then
19477: LD_VAR 0 3
19481: PUSH
19482: LD_INT 111
19484: EQUAL
19485: IFFALSE 19495
// sOil := true ;
19487: LD_ADDR_EXP 101
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if p3 = 112 then
19495: LD_VAR 0 3
19499: PUSH
19500: LD_INT 112
19502: EQUAL
19503: IFFALSE 19513
// sStu := true ;
19505: LD_ADDR_EXP 105
19509: PUSH
19510: LD_INT 1
19512: ST_TO_ADDR
// if p3 = 113 then
19513: LD_VAR 0 3
19517: PUSH
19518: LD_INT 113
19520: EQUAL
19521: IFFALSE 19531
// sBazooka := true ;
19523: LD_ADDR_EXP 108
19527: PUSH
19528: LD_INT 1
19530: ST_TO_ADDR
// if p3 = 114 then
19531: LD_VAR 0 3
19535: PUSH
19536: LD_INT 114
19538: EQUAL
19539: IFFALSE 19549
// sMortar := true ;
19541: LD_ADDR_EXP 109
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// if p3 = 115 then
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 115
19556: EQUAL
19557: IFFALSE 19567
// sRanger := true ;
19559: LD_ADDR_EXP 119
19563: PUSH
19564: LD_INT 1
19566: ST_TO_ADDR
// end ; if p2 = 101 then
19567: LD_VAR 0 2
19571: PUSH
19572: LD_INT 101
19574: EQUAL
19575: IFFALSE 19778
// begin case p3 of 1 :
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 1
19584: DOUBLE
19585: EQUAL
19586: IFTRUE 19590
19588: GO 19597
19590: POP
// hHackUnlimitedResources ; 2 :
19591: CALL 29872 0 0
19595: GO 19778
19597: LD_INT 2
19599: DOUBLE
19600: EQUAL
19601: IFTRUE 19605
19603: GO 19612
19605: POP
// hHackSetLevel10 ; 3 :
19606: CALL 30005 0 0
19610: GO 19778
19612: LD_INT 3
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19627
19620: POP
// hHackSetLevel10YourUnits ; 4 :
19621: CALL 30090 0 0
19625: GO 19778
19627: LD_INT 4
19629: DOUBLE
19630: EQUAL
19631: IFTRUE 19635
19633: GO 19657
19635: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
19636: LD_VAR 0 4
19640: PPUSH
19641: LD_VAR 0 5
19645: PPUSH
19646: LD_VAR 0 6
19650: PPUSH
19651: CALL 30180 0 3
19655: GO 19778
19657: LD_INT 5
19659: DOUBLE
19660: EQUAL
19661: IFTRUE 19665
19663: GO 19672
19665: POP
// hHackSpawnVehicle ; 6 :
19666: CALL 30241 0 0
19670: GO 19778
19672: LD_INT 6
19674: DOUBLE
19675: EQUAL
19676: IFTRUE 19680
19678: GO 19687
19680: POP
// hHackInvincible ; 7 :
19681: CALL 30787 0 0
19685: GO 19778
19687: LD_INT 7
19689: DOUBLE
19690: EQUAL
19691: IFTRUE 19695
19693: GO 19702
19695: POP
// hHackInvisible ; 8 :
19696: CALL 30898 0 0
19700: GO 19778
19702: LD_INT 8
19704: DOUBLE
19705: EQUAL
19706: IFTRUE 19710
19708: GO 19717
19710: POP
// hHackChangeYourSide ; 9 :
19711: CALL 30955 0 0
19715: GO 19778
19717: LD_INT 9
19719: DOUBLE
19720: EQUAL
19721: IFTRUE 19725
19723: GO 19732
19725: POP
// hHackChangeUnitSide ; 10 :
19726: CALL 30997 0 0
19730: GO 19778
19732: LD_INT 10
19734: DOUBLE
19735: EQUAL
19736: IFTRUE 19740
19738: GO 19747
19740: POP
// hHackFog ; 11 :
19741: CALL 31098 0 0
19745: GO 19778
19747: LD_INT 11
19749: DOUBLE
19750: EQUAL
19751: IFTRUE 19755
19753: GO 19762
19755: POP
// hHackApeman ; 12 :
19756: CALL 31113 0 0
19760: GO 19778
19762: LD_INT 12
19764: DOUBLE
19765: EQUAL
19766: IFTRUE 19770
19768: GO 19777
19770: POP
// hHackBoom ; end ;
19771: CALL 31198 0 0
19775: GO 19778
19777: POP
// end ; end ;
19778: PPOPN 6
19780: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19781: GO 19783
19783: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19784: LD_STRING initStreamRollete();
19786: PPUSH
19787: CALL_OW 559
// InitStreamMode ;
19791: CALL 19800 0 0
// DefineStreamItems ( ) ;
19795: CALL 20240 0 0
// end ;
19799: END
// function InitStreamMode ; begin
19800: LD_INT 0
19802: PPUSH
// streamModeActive := false ;
19803: LD_ADDR_EXP 66
19807: PUSH
19808: LD_INT 0
19810: ST_TO_ADDR
// normalCounter := 36 ;
19811: LD_ADDR_EXP 67
19815: PUSH
19816: LD_INT 36
19818: ST_TO_ADDR
// hardcoreCounter := 16 ;
19819: LD_ADDR_EXP 68
19823: PUSH
19824: LD_INT 16
19826: ST_TO_ADDR
// sRocket := false ;
19827: LD_ADDR_EXP 71
19831: PUSH
19832: LD_INT 0
19834: ST_TO_ADDR
// sSpeed := false ;
19835: LD_ADDR_EXP 70
19839: PUSH
19840: LD_INT 0
19842: ST_TO_ADDR
// sEngine := false ;
19843: LD_ADDR_EXP 72
19847: PUSH
19848: LD_INT 0
19850: ST_TO_ADDR
// sSpec := false ;
19851: LD_ADDR_EXP 69
19855: PUSH
19856: LD_INT 0
19858: ST_TO_ADDR
// sLevel := false ;
19859: LD_ADDR_EXP 73
19863: PUSH
19864: LD_INT 0
19866: ST_TO_ADDR
// sArmoury := false ;
19867: LD_ADDR_EXP 74
19871: PUSH
19872: LD_INT 0
19874: ST_TO_ADDR
// sRadar := false ;
19875: LD_ADDR_EXP 75
19879: PUSH
19880: LD_INT 0
19882: ST_TO_ADDR
// sBunker := false ;
19883: LD_ADDR_EXP 76
19887: PUSH
19888: LD_INT 0
19890: ST_TO_ADDR
// sHack := false ;
19891: LD_ADDR_EXP 77
19895: PUSH
19896: LD_INT 0
19898: ST_TO_ADDR
// sFire := false ;
19899: LD_ADDR_EXP 78
19903: PUSH
19904: LD_INT 0
19906: ST_TO_ADDR
// sRefresh := false ;
19907: LD_ADDR_EXP 79
19911: PUSH
19912: LD_INT 0
19914: ST_TO_ADDR
// sExp := false ;
19915: LD_ADDR_EXP 80
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// sDepot := false ;
19923: LD_ADDR_EXP 81
19927: PUSH
19928: LD_INT 0
19930: ST_TO_ADDR
// sFlag := false ;
19931: LD_ADDR_EXP 82
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
// sKamikadze := false ;
19939: LD_ADDR_EXP 90
19943: PUSH
19944: LD_INT 0
19946: ST_TO_ADDR
// sTroll := false ;
19947: LD_ADDR_EXP 91
19951: PUSH
19952: LD_INT 0
19954: ST_TO_ADDR
// sSlow := false ;
19955: LD_ADDR_EXP 92
19959: PUSH
19960: LD_INT 0
19962: ST_TO_ADDR
// sLack := false ;
19963: LD_ADDR_EXP 93
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// sTank := false ;
19971: LD_ADDR_EXP 95
19975: PUSH
19976: LD_INT 0
19978: ST_TO_ADDR
// sRemote := false ;
19979: LD_ADDR_EXP 96
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// sPowell := false ;
19987: LD_ADDR_EXP 97
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// sTeleport := false ;
19995: LD_ADDR_EXP 100
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// sOilTower := false ;
20003: LD_ADDR_EXP 102
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// sShovel := false ;
20011: LD_ADDR_EXP 103
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// sSheik := false ;
20019: LD_ADDR_EXP 104
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// sEarthquake := false ;
20027: LD_ADDR_EXP 106
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// sAI := false ;
20035: LD_ADDR_EXP 107
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// sCargo := false ;
20043: LD_ADDR_EXP 110
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// sDLaser := false ;
20051: LD_ADDR_EXP 111
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// sExchange := false ;
20059: LD_ADDR_EXP 112
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// sFac := false ;
20067: LD_ADDR_EXP 113
20071: PUSH
20072: LD_INT 0
20074: ST_TO_ADDR
// sPower := false ;
20075: LD_ADDR_EXP 114
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// sRandom := false ;
20083: LD_ADDR_EXP 115
20087: PUSH
20088: LD_INT 0
20090: ST_TO_ADDR
// sShield := false ;
20091: LD_ADDR_EXP 116
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// sTime := false ;
20099: LD_ADDR_EXP 117
20103: PUSH
20104: LD_INT 0
20106: ST_TO_ADDR
// sTools := false ;
20107: LD_ADDR_EXP 118
20111: PUSH
20112: LD_INT 0
20114: ST_TO_ADDR
// sSold := false ;
20115: LD_ADDR_EXP 83
20119: PUSH
20120: LD_INT 0
20122: ST_TO_ADDR
// sDiff := false ;
20123: LD_ADDR_EXP 84
20127: PUSH
20128: LD_INT 0
20130: ST_TO_ADDR
// sFog := false ;
20131: LD_ADDR_EXP 87
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
// sReset := false ;
20139: LD_ADDR_EXP 88
20143: PUSH
20144: LD_INT 0
20146: ST_TO_ADDR
// sSun := false ;
20147: LD_ADDR_EXP 89
20151: PUSH
20152: LD_INT 0
20154: ST_TO_ADDR
// sTiger := false ;
20155: LD_ADDR_EXP 85
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
// sBomb := false ;
20163: LD_ADDR_EXP 86
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// sWound := false ;
20171: LD_ADDR_EXP 94
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// sBetray := false ;
20179: LD_ADDR_EXP 98
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// sContamin := false ;
20187: LD_ADDR_EXP 99
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// sOil := false ;
20195: LD_ADDR_EXP 101
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// sStu := false ;
20203: LD_ADDR_EXP 105
20207: PUSH
20208: LD_INT 0
20210: ST_TO_ADDR
// sBazooka := false ;
20211: LD_ADDR_EXP 108
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// sMortar := false ;
20219: LD_ADDR_EXP 109
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
// sRanger := false ;
20227: LD_ADDR_EXP 119
20231: PUSH
20232: LD_INT 0
20234: ST_TO_ADDR
// end ;
20235: LD_VAR 0 1
20239: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20240: LD_INT 0
20242: PPUSH
20243: PPUSH
20244: PPUSH
20245: PPUSH
20246: PPUSH
// result := [ ] ;
20247: LD_ADDR_VAR 0 1
20251: PUSH
20252: EMPTY
20253: ST_TO_ADDR
// if campaign_id = 1 then
20254: LD_OWVAR 69
20258: PUSH
20259: LD_INT 1
20261: EQUAL
20262: IFFALSE 23200
// begin case mission_number of 1 :
20264: LD_OWVAR 70
20268: PUSH
20269: LD_INT 1
20271: DOUBLE
20272: EQUAL
20273: IFTRUE 20277
20275: GO 20341
20277: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20278: LD_ADDR_VAR 0 1
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: LD_INT 4
20288: PUSH
20289: LD_INT 11
20291: PUSH
20292: LD_INT 12
20294: PUSH
20295: LD_INT 15
20297: PUSH
20298: LD_INT 16
20300: PUSH
20301: LD_INT 22
20303: PUSH
20304: LD_INT 23
20306: PUSH
20307: LD_INT 26
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 101
20323: PUSH
20324: LD_INT 102
20326: PUSH
20327: LD_INT 106
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: LIST
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: ST_TO_ADDR
20339: GO 23198
20341: LD_INT 2
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20421
20349: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20350: LD_ADDR_VAR 0 1
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: LD_INT 4
20360: PUSH
20361: LD_INT 11
20363: PUSH
20364: LD_INT 12
20366: PUSH
20367: LD_INT 15
20369: PUSH
20370: LD_INT 16
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_INT 23
20378: PUSH
20379: LD_INT 26
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 101
20395: PUSH
20396: LD_INT 102
20398: PUSH
20399: LD_INT 105
20401: PUSH
20402: LD_INT 106
20404: PUSH
20405: LD_INT 108
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: ST_TO_ADDR
20419: GO 23198
20421: LD_INT 3
20423: DOUBLE
20424: EQUAL
20425: IFTRUE 20429
20427: GO 20505
20429: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20430: LD_ADDR_VAR 0 1
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 4
20440: PUSH
20441: LD_INT 5
20443: PUSH
20444: LD_INT 11
20446: PUSH
20447: LD_INT 12
20449: PUSH
20450: LD_INT 15
20452: PUSH
20453: LD_INT 16
20455: PUSH
20456: LD_INT 22
20458: PUSH
20459: LD_INT 26
20461: PUSH
20462: LD_INT 36
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 101
20479: PUSH
20480: LD_INT 102
20482: PUSH
20483: LD_INT 105
20485: PUSH
20486: LD_INT 106
20488: PUSH
20489: LD_INT 108
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: ST_TO_ADDR
20503: GO 23198
20505: LD_INT 4
20507: DOUBLE
20508: EQUAL
20509: IFTRUE 20513
20511: GO 20597
20513: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20514: LD_ADDR_VAR 0 1
20518: PUSH
20519: LD_INT 2
20521: PUSH
20522: LD_INT 4
20524: PUSH
20525: LD_INT 5
20527: PUSH
20528: LD_INT 8
20530: PUSH
20531: LD_INT 11
20533: PUSH
20534: LD_INT 12
20536: PUSH
20537: LD_INT 15
20539: PUSH
20540: LD_INT 16
20542: PUSH
20543: LD_INT 22
20545: PUSH
20546: LD_INT 23
20548: PUSH
20549: LD_INT 26
20551: PUSH
20552: LD_INT 36
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 101
20571: PUSH
20572: LD_INT 102
20574: PUSH
20575: LD_INT 105
20577: PUSH
20578: LD_INT 106
20580: PUSH
20581: LD_INT 108
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: ST_TO_ADDR
20595: GO 23198
20597: LD_INT 5
20599: DOUBLE
20600: EQUAL
20601: IFTRUE 20605
20603: GO 20705
20605: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20606: LD_ADDR_VAR 0 1
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: LD_INT 4
20616: PUSH
20617: LD_INT 5
20619: PUSH
20620: LD_INT 6
20622: PUSH
20623: LD_INT 8
20625: PUSH
20626: LD_INT 11
20628: PUSH
20629: LD_INT 12
20631: PUSH
20632: LD_INT 15
20634: PUSH
20635: LD_INT 16
20637: PUSH
20638: LD_INT 22
20640: PUSH
20641: LD_INT 23
20643: PUSH
20644: LD_INT 25
20646: PUSH
20647: LD_INT 26
20649: PUSH
20650: LD_INT 36
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 101
20671: PUSH
20672: LD_INT 102
20674: PUSH
20675: LD_INT 105
20677: PUSH
20678: LD_INT 106
20680: PUSH
20681: LD_INT 108
20683: PUSH
20684: LD_INT 109
20686: PUSH
20687: LD_INT 112
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: ST_TO_ADDR
20703: GO 23198
20705: LD_INT 6
20707: DOUBLE
20708: EQUAL
20709: IFTRUE 20713
20711: GO 20833
20713: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20714: LD_ADDR_VAR 0 1
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: LD_INT 4
20724: PUSH
20725: LD_INT 5
20727: PUSH
20728: LD_INT 6
20730: PUSH
20731: LD_INT 8
20733: PUSH
20734: LD_INT 11
20736: PUSH
20737: LD_INT 12
20739: PUSH
20740: LD_INT 15
20742: PUSH
20743: LD_INT 16
20745: PUSH
20746: LD_INT 20
20748: PUSH
20749: LD_INT 21
20751: PUSH
20752: LD_INT 22
20754: PUSH
20755: LD_INT 23
20757: PUSH
20758: LD_INT 25
20760: PUSH
20761: LD_INT 26
20763: PUSH
20764: LD_INT 30
20766: PUSH
20767: LD_INT 31
20769: PUSH
20770: LD_INT 32
20772: PUSH
20773: LD_INT 36
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 101
20799: PUSH
20800: LD_INT 102
20802: PUSH
20803: LD_INT 105
20805: PUSH
20806: LD_INT 106
20808: PUSH
20809: LD_INT 108
20811: PUSH
20812: LD_INT 109
20814: PUSH
20815: LD_INT 112
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: ST_TO_ADDR
20831: GO 23198
20833: LD_INT 7
20835: DOUBLE
20836: EQUAL
20837: IFTRUE 20841
20839: GO 20941
20841: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20842: LD_ADDR_VAR 0 1
20846: PUSH
20847: LD_INT 2
20849: PUSH
20850: LD_INT 4
20852: PUSH
20853: LD_INT 5
20855: PUSH
20856: LD_INT 7
20858: PUSH
20859: LD_INT 11
20861: PUSH
20862: LD_INT 12
20864: PUSH
20865: LD_INT 15
20867: PUSH
20868: LD_INT 16
20870: PUSH
20871: LD_INT 20
20873: PUSH
20874: LD_INT 21
20876: PUSH
20877: LD_INT 22
20879: PUSH
20880: LD_INT 23
20882: PUSH
20883: LD_INT 25
20885: PUSH
20886: LD_INT 26
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 101
20907: PUSH
20908: LD_INT 102
20910: PUSH
20911: LD_INT 103
20913: PUSH
20914: LD_INT 105
20916: PUSH
20917: LD_INT 106
20919: PUSH
20920: LD_INT 108
20922: PUSH
20923: LD_INT 112
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: ST_TO_ADDR
20939: GO 23198
20941: LD_INT 8
20943: DOUBLE
20944: EQUAL
20945: IFTRUE 20949
20947: GO 21077
20949: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20950: LD_ADDR_VAR 0 1
20954: PUSH
20955: LD_INT 2
20957: PUSH
20958: LD_INT 4
20960: PUSH
20961: LD_INT 5
20963: PUSH
20964: LD_INT 6
20966: PUSH
20967: LD_INT 7
20969: PUSH
20970: LD_INT 8
20972: PUSH
20973: LD_INT 11
20975: PUSH
20976: LD_INT 12
20978: PUSH
20979: LD_INT 15
20981: PUSH
20982: LD_INT 16
20984: PUSH
20985: LD_INT 20
20987: PUSH
20988: LD_INT 21
20990: PUSH
20991: LD_INT 22
20993: PUSH
20994: LD_INT 23
20996: PUSH
20997: LD_INT 25
20999: PUSH
21000: LD_INT 26
21002: PUSH
21003: LD_INT 30
21005: PUSH
21006: LD_INT 31
21008: PUSH
21009: LD_INT 32
21011: PUSH
21012: LD_INT 36
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 101
21039: PUSH
21040: LD_INT 102
21042: PUSH
21043: LD_INT 103
21045: PUSH
21046: LD_INT 105
21048: PUSH
21049: LD_INT 106
21051: PUSH
21052: LD_INT 108
21054: PUSH
21055: LD_INT 109
21057: PUSH
21058: LD_INT 112
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: ST_TO_ADDR
21075: GO 23198
21077: LD_INT 9
21079: DOUBLE
21080: EQUAL
21081: IFTRUE 21085
21083: GO 21221
21085: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21086: LD_ADDR_VAR 0 1
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 4
21096: PUSH
21097: LD_INT 5
21099: PUSH
21100: LD_INT 6
21102: PUSH
21103: LD_INT 7
21105: PUSH
21106: LD_INT 8
21108: PUSH
21109: LD_INT 11
21111: PUSH
21112: LD_INT 12
21114: PUSH
21115: LD_INT 15
21117: PUSH
21118: LD_INT 16
21120: PUSH
21121: LD_INT 20
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 22
21129: PUSH
21130: LD_INT 23
21132: PUSH
21133: LD_INT 25
21135: PUSH
21136: LD_INT 26
21138: PUSH
21139: LD_INT 28
21141: PUSH
21142: LD_INT 30
21144: PUSH
21145: LD_INT 31
21147: PUSH
21148: LD_INT 32
21150: PUSH
21151: LD_INT 36
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 101
21179: PUSH
21180: LD_INT 102
21182: PUSH
21183: LD_INT 103
21185: PUSH
21186: LD_INT 105
21188: PUSH
21189: LD_INT 106
21191: PUSH
21192: LD_INT 108
21194: PUSH
21195: LD_INT 109
21197: PUSH
21198: LD_INT 112
21200: PUSH
21201: LD_INT 114
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: ST_TO_ADDR
21219: GO 23198
21221: LD_INT 10
21223: DOUBLE
21224: EQUAL
21225: IFTRUE 21229
21227: GO 21413
21229: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21230: LD_ADDR_VAR 0 1
21234: PUSH
21235: LD_INT 2
21237: PUSH
21238: LD_INT 4
21240: PUSH
21241: LD_INT 5
21243: PUSH
21244: LD_INT 6
21246: PUSH
21247: LD_INT 7
21249: PUSH
21250: LD_INT 8
21252: PUSH
21253: LD_INT 9
21255: PUSH
21256: LD_INT 10
21258: PUSH
21259: LD_INT 11
21261: PUSH
21262: LD_INT 12
21264: PUSH
21265: LD_INT 13
21267: PUSH
21268: LD_INT 14
21270: PUSH
21271: LD_INT 15
21273: PUSH
21274: LD_INT 16
21276: PUSH
21277: LD_INT 17
21279: PUSH
21280: LD_INT 18
21282: PUSH
21283: LD_INT 19
21285: PUSH
21286: LD_INT 20
21288: PUSH
21289: LD_INT 21
21291: PUSH
21292: LD_INT 22
21294: PUSH
21295: LD_INT 23
21297: PUSH
21298: LD_INT 24
21300: PUSH
21301: LD_INT 25
21303: PUSH
21304: LD_INT 26
21306: PUSH
21307: LD_INT 28
21309: PUSH
21310: LD_INT 30
21312: PUSH
21313: LD_INT 31
21315: PUSH
21316: LD_INT 32
21318: PUSH
21319: LD_INT 36
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 101
21355: PUSH
21356: LD_INT 102
21358: PUSH
21359: LD_INT 103
21361: PUSH
21362: LD_INT 104
21364: PUSH
21365: LD_INT 105
21367: PUSH
21368: LD_INT 106
21370: PUSH
21371: LD_INT 107
21373: PUSH
21374: LD_INT 108
21376: PUSH
21377: LD_INT 109
21379: PUSH
21380: LD_INT 110
21382: PUSH
21383: LD_INT 111
21385: PUSH
21386: LD_INT 112
21388: PUSH
21389: LD_INT 114
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: ST_TO_ADDR
21411: GO 23198
21413: LD_INT 11
21415: DOUBLE
21416: EQUAL
21417: IFTRUE 21421
21419: GO 21613
21421: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21422: LD_ADDR_VAR 0 1
21426: PUSH
21427: LD_INT 2
21429: PUSH
21430: LD_INT 3
21432: PUSH
21433: LD_INT 4
21435: PUSH
21436: LD_INT 5
21438: PUSH
21439: LD_INT 6
21441: PUSH
21442: LD_INT 7
21444: PUSH
21445: LD_INT 8
21447: PUSH
21448: LD_INT 9
21450: PUSH
21451: LD_INT 10
21453: PUSH
21454: LD_INT 11
21456: PUSH
21457: LD_INT 12
21459: PUSH
21460: LD_INT 13
21462: PUSH
21463: LD_INT 14
21465: PUSH
21466: LD_INT 15
21468: PUSH
21469: LD_INT 16
21471: PUSH
21472: LD_INT 17
21474: PUSH
21475: LD_INT 18
21477: PUSH
21478: LD_INT 19
21480: PUSH
21481: LD_INT 20
21483: PUSH
21484: LD_INT 21
21486: PUSH
21487: LD_INT 22
21489: PUSH
21490: LD_INT 23
21492: PUSH
21493: LD_INT 24
21495: PUSH
21496: LD_INT 25
21498: PUSH
21499: LD_INT 26
21501: PUSH
21502: LD_INT 28
21504: PUSH
21505: LD_INT 30
21507: PUSH
21508: LD_INT 31
21510: PUSH
21511: LD_INT 32
21513: PUSH
21514: LD_INT 34
21516: PUSH
21517: LD_INT 36
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 101
21555: PUSH
21556: LD_INT 102
21558: PUSH
21559: LD_INT 103
21561: PUSH
21562: LD_INT 104
21564: PUSH
21565: LD_INT 105
21567: PUSH
21568: LD_INT 106
21570: PUSH
21571: LD_INT 107
21573: PUSH
21574: LD_INT 108
21576: PUSH
21577: LD_INT 109
21579: PUSH
21580: LD_INT 110
21582: PUSH
21583: LD_INT 111
21585: PUSH
21586: LD_INT 112
21588: PUSH
21589: LD_INT 114
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: ST_TO_ADDR
21611: GO 23198
21613: LD_INT 12
21615: DOUBLE
21616: EQUAL
21617: IFTRUE 21621
21619: GO 21829
21621: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21622: LD_ADDR_VAR 0 1
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: LD_INT 3
21635: PUSH
21636: LD_INT 4
21638: PUSH
21639: LD_INT 5
21641: PUSH
21642: LD_INT 6
21644: PUSH
21645: LD_INT 7
21647: PUSH
21648: LD_INT 8
21650: PUSH
21651: LD_INT 9
21653: PUSH
21654: LD_INT 10
21656: PUSH
21657: LD_INT 11
21659: PUSH
21660: LD_INT 12
21662: PUSH
21663: LD_INT 13
21665: PUSH
21666: LD_INT 14
21668: PUSH
21669: LD_INT 15
21671: PUSH
21672: LD_INT 16
21674: PUSH
21675: LD_INT 17
21677: PUSH
21678: LD_INT 18
21680: PUSH
21681: LD_INT 19
21683: PUSH
21684: LD_INT 20
21686: PUSH
21687: LD_INT 21
21689: PUSH
21690: LD_INT 22
21692: PUSH
21693: LD_INT 23
21695: PUSH
21696: LD_INT 24
21698: PUSH
21699: LD_INT 25
21701: PUSH
21702: LD_INT 26
21704: PUSH
21705: LD_INT 27
21707: PUSH
21708: LD_INT 28
21710: PUSH
21711: LD_INT 30
21713: PUSH
21714: LD_INT 31
21716: PUSH
21717: LD_INT 32
21719: PUSH
21720: LD_INT 33
21722: PUSH
21723: LD_INT 34
21725: PUSH
21726: LD_INT 36
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 101
21767: PUSH
21768: LD_INT 102
21770: PUSH
21771: LD_INT 103
21773: PUSH
21774: LD_INT 104
21776: PUSH
21777: LD_INT 105
21779: PUSH
21780: LD_INT 106
21782: PUSH
21783: LD_INT 107
21785: PUSH
21786: LD_INT 108
21788: PUSH
21789: LD_INT 109
21791: PUSH
21792: LD_INT 110
21794: PUSH
21795: LD_INT 111
21797: PUSH
21798: LD_INT 112
21800: PUSH
21801: LD_INT 113
21803: PUSH
21804: LD_INT 114
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: ST_TO_ADDR
21827: GO 23198
21829: LD_INT 13
21831: DOUBLE
21832: EQUAL
21833: IFTRUE 21837
21835: GO 22033
21837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21838: LD_ADDR_VAR 0 1
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: LD_INT 2
21848: PUSH
21849: LD_INT 3
21851: PUSH
21852: LD_INT 4
21854: PUSH
21855: LD_INT 5
21857: PUSH
21858: LD_INT 8
21860: PUSH
21861: LD_INT 9
21863: PUSH
21864: LD_INT 10
21866: PUSH
21867: LD_INT 11
21869: PUSH
21870: LD_INT 12
21872: PUSH
21873: LD_INT 14
21875: PUSH
21876: LD_INT 15
21878: PUSH
21879: LD_INT 16
21881: PUSH
21882: LD_INT 17
21884: PUSH
21885: LD_INT 18
21887: PUSH
21888: LD_INT 19
21890: PUSH
21891: LD_INT 20
21893: PUSH
21894: LD_INT 21
21896: PUSH
21897: LD_INT 22
21899: PUSH
21900: LD_INT 23
21902: PUSH
21903: LD_INT 24
21905: PUSH
21906: LD_INT 25
21908: PUSH
21909: LD_INT 26
21911: PUSH
21912: LD_INT 27
21914: PUSH
21915: LD_INT 28
21917: PUSH
21918: LD_INT 30
21920: PUSH
21921: LD_INT 31
21923: PUSH
21924: LD_INT 32
21926: PUSH
21927: LD_INT 33
21929: PUSH
21930: LD_INT 34
21932: PUSH
21933: LD_INT 36
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 101
21971: PUSH
21972: LD_INT 102
21974: PUSH
21975: LD_INT 103
21977: PUSH
21978: LD_INT 104
21980: PUSH
21981: LD_INT 105
21983: PUSH
21984: LD_INT 106
21986: PUSH
21987: LD_INT 107
21989: PUSH
21990: LD_INT 108
21992: PUSH
21993: LD_INT 109
21995: PUSH
21996: LD_INT 110
21998: PUSH
21999: LD_INT 111
22001: PUSH
22002: LD_INT 112
22004: PUSH
22005: LD_INT 113
22007: PUSH
22008: LD_INT 114
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: ST_TO_ADDR
22031: GO 23198
22033: LD_INT 14
22035: DOUBLE
22036: EQUAL
22037: IFTRUE 22041
22039: GO 22253
22041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22042: LD_ADDR_VAR 0 1
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 3
22055: PUSH
22056: LD_INT 4
22058: PUSH
22059: LD_INT 5
22061: PUSH
22062: LD_INT 6
22064: PUSH
22065: LD_INT 7
22067: PUSH
22068: LD_INT 8
22070: PUSH
22071: LD_INT 9
22073: PUSH
22074: LD_INT 10
22076: PUSH
22077: LD_INT 11
22079: PUSH
22080: LD_INT 12
22082: PUSH
22083: LD_INT 13
22085: PUSH
22086: LD_INT 14
22088: PUSH
22089: LD_INT 15
22091: PUSH
22092: LD_INT 16
22094: PUSH
22095: LD_INT 17
22097: PUSH
22098: LD_INT 18
22100: PUSH
22101: LD_INT 19
22103: PUSH
22104: LD_INT 20
22106: PUSH
22107: LD_INT 21
22109: PUSH
22110: LD_INT 22
22112: PUSH
22113: LD_INT 23
22115: PUSH
22116: LD_INT 24
22118: PUSH
22119: LD_INT 25
22121: PUSH
22122: LD_INT 26
22124: PUSH
22125: LD_INT 27
22127: PUSH
22128: LD_INT 28
22130: PUSH
22131: LD_INT 29
22133: PUSH
22134: LD_INT 30
22136: PUSH
22137: LD_INT 31
22139: PUSH
22140: LD_INT 32
22142: PUSH
22143: LD_INT 33
22145: PUSH
22146: LD_INT 34
22148: PUSH
22149: LD_INT 36
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 101
22191: PUSH
22192: LD_INT 102
22194: PUSH
22195: LD_INT 103
22197: PUSH
22198: LD_INT 104
22200: PUSH
22201: LD_INT 105
22203: PUSH
22204: LD_INT 106
22206: PUSH
22207: LD_INT 107
22209: PUSH
22210: LD_INT 108
22212: PUSH
22213: LD_INT 109
22215: PUSH
22216: LD_INT 110
22218: PUSH
22219: LD_INT 111
22221: PUSH
22222: LD_INT 112
22224: PUSH
22225: LD_INT 113
22227: PUSH
22228: LD_INT 114
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: ST_TO_ADDR
22251: GO 23198
22253: LD_INT 15
22255: DOUBLE
22256: EQUAL
22257: IFTRUE 22261
22259: GO 22473
22261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22262: LD_ADDR_VAR 0 1
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: LD_INT 2
22272: PUSH
22273: LD_INT 3
22275: PUSH
22276: LD_INT 4
22278: PUSH
22279: LD_INT 5
22281: PUSH
22282: LD_INT 6
22284: PUSH
22285: LD_INT 7
22287: PUSH
22288: LD_INT 8
22290: PUSH
22291: LD_INT 9
22293: PUSH
22294: LD_INT 10
22296: PUSH
22297: LD_INT 11
22299: PUSH
22300: LD_INT 12
22302: PUSH
22303: LD_INT 13
22305: PUSH
22306: LD_INT 14
22308: PUSH
22309: LD_INT 15
22311: PUSH
22312: LD_INT 16
22314: PUSH
22315: LD_INT 17
22317: PUSH
22318: LD_INT 18
22320: PUSH
22321: LD_INT 19
22323: PUSH
22324: LD_INT 20
22326: PUSH
22327: LD_INT 21
22329: PUSH
22330: LD_INT 22
22332: PUSH
22333: LD_INT 23
22335: PUSH
22336: LD_INT 24
22338: PUSH
22339: LD_INT 25
22341: PUSH
22342: LD_INT 26
22344: PUSH
22345: LD_INT 27
22347: PUSH
22348: LD_INT 28
22350: PUSH
22351: LD_INT 29
22353: PUSH
22354: LD_INT 30
22356: PUSH
22357: LD_INT 31
22359: PUSH
22360: LD_INT 32
22362: PUSH
22363: LD_INT 33
22365: PUSH
22366: LD_INT 34
22368: PUSH
22369: LD_INT 36
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 101
22411: PUSH
22412: LD_INT 102
22414: PUSH
22415: LD_INT 103
22417: PUSH
22418: LD_INT 104
22420: PUSH
22421: LD_INT 105
22423: PUSH
22424: LD_INT 106
22426: PUSH
22427: LD_INT 107
22429: PUSH
22430: LD_INT 108
22432: PUSH
22433: LD_INT 109
22435: PUSH
22436: LD_INT 110
22438: PUSH
22439: LD_INT 111
22441: PUSH
22442: LD_INT 112
22444: PUSH
22445: LD_INT 113
22447: PUSH
22448: LD_INT 114
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: ST_TO_ADDR
22471: GO 23198
22473: LD_INT 16
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22605
22481: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22482: LD_ADDR_VAR 0 1
22486: PUSH
22487: LD_INT 2
22489: PUSH
22490: LD_INT 4
22492: PUSH
22493: LD_INT 5
22495: PUSH
22496: LD_INT 7
22498: PUSH
22499: LD_INT 11
22501: PUSH
22502: LD_INT 12
22504: PUSH
22505: LD_INT 15
22507: PUSH
22508: LD_INT 16
22510: PUSH
22511: LD_INT 20
22513: PUSH
22514: LD_INT 21
22516: PUSH
22517: LD_INT 22
22519: PUSH
22520: LD_INT 23
22522: PUSH
22523: LD_INT 25
22525: PUSH
22526: LD_INT 26
22528: PUSH
22529: LD_INT 30
22531: PUSH
22532: LD_INT 31
22534: PUSH
22535: LD_INT 32
22537: PUSH
22538: LD_INT 33
22540: PUSH
22541: LD_INT 34
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 101
22567: PUSH
22568: LD_INT 102
22570: PUSH
22571: LD_INT 103
22573: PUSH
22574: LD_INT 106
22576: PUSH
22577: LD_INT 108
22579: PUSH
22580: LD_INT 112
22582: PUSH
22583: LD_INT 113
22585: PUSH
22586: LD_INT 114
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: ST_TO_ADDR
22603: GO 23198
22605: LD_INT 17
22607: DOUBLE
22608: EQUAL
22609: IFTRUE 22613
22611: GO 22825
22613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22614: LD_ADDR_VAR 0 1
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: LD_INT 3
22627: PUSH
22628: LD_INT 4
22630: PUSH
22631: LD_INT 5
22633: PUSH
22634: LD_INT 6
22636: PUSH
22637: LD_INT 7
22639: PUSH
22640: LD_INT 8
22642: PUSH
22643: LD_INT 9
22645: PUSH
22646: LD_INT 10
22648: PUSH
22649: LD_INT 11
22651: PUSH
22652: LD_INT 12
22654: PUSH
22655: LD_INT 13
22657: PUSH
22658: LD_INT 14
22660: PUSH
22661: LD_INT 15
22663: PUSH
22664: LD_INT 16
22666: PUSH
22667: LD_INT 17
22669: PUSH
22670: LD_INT 18
22672: PUSH
22673: LD_INT 19
22675: PUSH
22676: LD_INT 20
22678: PUSH
22679: LD_INT 21
22681: PUSH
22682: LD_INT 22
22684: PUSH
22685: LD_INT 23
22687: PUSH
22688: LD_INT 24
22690: PUSH
22691: LD_INT 25
22693: PUSH
22694: LD_INT 26
22696: PUSH
22697: LD_INT 27
22699: PUSH
22700: LD_INT 28
22702: PUSH
22703: LD_INT 29
22705: PUSH
22706: LD_INT 30
22708: PUSH
22709: LD_INT 31
22711: PUSH
22712: LD_INT 32
22714: PUSH
22715: LD_INT 33
22717: PUSH
22718: LD_INT 34
22720: PUSH
22721: LD_INT 36
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 101
22763: PUSH
22764: LD_INT 102
22766: PUSH
22767: LD_INT 103
22769: PUSH
22770: LD_INT 104
22772: PUSH
22773: LD_INT 105
22775: PUSH
22776: LD_INT 106
22778: PUSH
22779: LD_INT 107
22781: PUSH
22782: LD_INT 108
22784: PUSH
22785: LD_INT 109
22787: PUSH
22788: LD_INT 110
22790: PUSH
22791: LD_INT 111
22793: PUSH
22794: LD_INT 112
22796: PUSH
22797: LD_INT 113
22799: PUSH
22800: LD_INT 114
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: ST_TO_ADDR
22823: GO 23198
22825: LD_INT 18
22827: DOUBLE
22828: EQUAL
22829: IFTRUE 22833
22831: GO 22969
22833: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22834: LD_ADDR_VAR 0 1
22838: PUSH
22839: LD_INT 2
22841: PUSH
22842: LD_INT 4
22844: PUSH
22845: LD_INT 5
22847: PUSH
22848: LD_INT 7
22850: PUSH
22851: LD_INT 11
22853: PUSH
22854: LD_INT 12
22856: PUSH
22857: LD_INT 15
22859: PUSH
22860: LD_INT 16
22862: PUSH
22863: LD_INT 20
22865: PUSH
22866: LD_INT 21
22868: PUSH
22869: LD_INT 22
22871: PUSH
22872: LD_INT 23
22874: PUSH
22875: LD_INT 25
22877: PUSH
22878: LD_INT 26
22880: PUSH
22881: LD_INT 30
22883: PUSH
22884: LD_INT 31
22886: PUSH
22887: LD_INT 32
22889: PUSH
22890: LD_INT 33
22892: PUSH
22893: LD_INT 34
22895: PUSH
22896: LD_INT 35
22898: PUSH
22899: LD_INT 36
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 101
22927: PUSH
22928: LD_INT 102
22930: PUSH
22931: LD_INT 103
22933: PUSH
22934: LD_INT 106
22936: PUSH
22937: LD_INT 108
22939: PUSH
22940: LD_INT 112
22942: PUSH
22943: LD_INT 113
22945: PUSH
22946: LD_INT 114
22948: PUSH
22949: LD_INT 115
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: ST_TO_ADDR
22967: GO 23198
22969: LD_INT 19
22971: DOUBLE
22972: EQUAL
22973: IFTRUE 22977
22975: GO 23197
22977: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22978: LD_ADDR_VAR 0 1
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: LD_INT 4
22994: PUSH
22995: LD_INT 5
22997: PUSH
22998: LD_INT 6
23000: PUSH
23001: LD_INT 7
23003: PUSH
23004: LD_INT 8
23006: PUSH
23007: LD_INT 9
23009: PUSH
23010: LD_INT 10
23012: PUSH
23013: LD_INT 11
23015: PUSH
23016: LD_INT 12
23018: PUSH
23019: LD_INT 13
23021: PUSH
23022: LD_INT 14
23024: PUSH
23025: LD_INT 15
23027: PUSH
23028: LD_INT 16
23030: PUSH
23031: LD_INT 17
23033: PUSH
23034: LD_INT 18
23036: PUSH
23037: LD_INT 19
23039: PUSH
23040: LD_INT 20
23042: PUSH
23043: LD_INT 21
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 23
23051: PUSH
23052: LD_INT 24
23054: PUSH
23055: LD_INT 25
23057: PUSH
23058: LD_INT 26
23060: PUSH
23061: LD_INT 27
23063: PUSH
23064: LD_INT 28
23066: PUSH
23067: LD_INT 29
23069: PUSH
23070: LD_INT 30
23072: PUSH
23073: LD_INT 31
23075: PUSH
23076: LD_INT 32
23078: PUSH
23079: LD_INT 33
23081: PUSH
23082: LD_INT 34
23084: PUSH
23085: LD_INT 35
23087: PUSH
23088: LD_INT 36
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 101
23131: PUSH
23132: LD_INT 102
23134: PUSH
23135: LD_INT 103
23137: PUSH
23138: LD_INT 104
23140: PUSH
23141: LD_INT 105
23143: PUSH
23144: LD_INT 106
23146: PUSH
23147: LD_INT 107
23149: PUSH
23150: LD_INT 108
23152: PUSH
23153: LD_INT 109
23155: PUSH
23156: LD_INT 110
23158: PUSH
23159: LD_INT 111
23161: PUSH
23162: LD_INT 112
23164: PUSH
23165: LD_INT 113
23167: PUSH
23168: LD_INT 114
23170: PUSH
23171: LD_INT 115
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: ST_TO_ADDR
23195: GO 23198
23197: POP
// end else
23198: GO 23417
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23200: LD_ADDR_VAR 0 1
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: LD_INT 4
23216: PUSH
23217: LD_INT 5
23219: PUSH
23220: LD_INT 6
23222: PUSH
23223: LD_INT 7
23225: PUSH
23226: LD_INT 8
23228: PUSH
23229: LD_INT 9
23231: PUSH
23232: LD_INT 10
23234: PUSH
23235: LD_INT 11
23237: PUSH
23238: LD_INT 12
23240: PUSH
23241: LD_INT 13
23243: PUSH
23244: LD_INT 14
23246: PUSH
23247: LD_INT 15
23249: PUSH
23250: LD_INT 16
23252: PUSH
23253: LD_INT 17
23255: PUSH
23256: LD_INT 18
23258: PUSH
23259: LD_INT 19
23261: PUSH
23262: LD_INT 20
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 22
23270: PUSH
23271: LD_INT 23
23273: PUSH
23274: LD_INT 24
23276: PUSH
23277: LD_INT 25
23279: PUSH
23280: LD_INT 26
23282: PUSH
23283: LD_INT 27
23285: PUSH
23286: LD_INT 28
23288: PUSH
23289: LD_INT 29
23291: PUSH
23292: LD_INT 30
23294: PUSH
23295: LD_INT 31
23297: PUSH
23298: LD_INT 32
23300: PUSH
23301: LD_INT 33
23303: PUSH
23304: LD_INT 34
23306: PUSH
23307: LD_INT 35
23309: PUSH
23310: LD_INT 36
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 101
23353: PUSH
23354: LD_INT 102
23356: PUSH
23357: LD_INT 103
23359: PUSH
23360: LD_INT 104
23362: PUSH
23363: LD_INT 105
23365: PUSH
23366: LD_INT 106
23368: PUSH
23369: LD_INT 107
23371: PUSH
23372: LD_INT 108
23374: PUSH
23375: LD_INT 109
23377: PUSH
23378: LD_INT 110
23380: PUSH
23381: LD_INT 111
23383: PUSH
23384: LD_INT 112
23386: PUSH
23387: LD_INT 113
23389: PUSH
23390: LD_INT 114
23392: PUSH
23393: LD_INT 115
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: ST_TO_ADDR
// if result then
23417: LD_VAR 0 1
23421: IFFALSE 23710
// begin normal :=  ;
23423: LD_ADDR_VAR 0 3
23427: PUSH
23428: LD_STRING 
23430: ST_TO_ADDR
// hardcore :=  ;
23431: LD_ADDR_VAR 0 4
23435: PUSH
23436: LD_STRING 
23438: ST_TO_ADDR
// for i = 1 to normalCounter do
23439: LD_ADDR_VAR 0 5
23443: PUSH
23444: DOUBLE
23445: LD_INT 1
23447: DEC
23448: ST_TO_ADDR
23449: LD_EXP 67
23453: PUSH
23454: FOR_TO
23455: IFFALSE 23556
// begin tmp := 0 ;
23457: LD_ADDR_VAR 0 2
23461: PUSH
23462: LD_STRING 0
23464: ST_TO_ADDR
// if result [ 1 ] then
23465: LD_VAR 0 1
23469: PUSH
23470: LD_INT 1
23472: ARRAY
23473: IFFALSE 23538
// if result [ 1 ] [ 1 ] = i then
23475: LD_VAR 0 1
23479: PUSH
23480: LD_INT 1
23482: ARRAY
23483: PUSH
23484: LD_INT 1
23486: ARRAY
23487: PUSH
23488: LD_VAR 0 5
23492: EQUAL
23493: IFFALSE 23538
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23495: LD_ADDR_VAR 0 1
23499: PUSH
23500: LD_VAR 0 1
23504: PPUSH
23505: LD_INT 1
23507: PPUSH
23508: LD_VAR 0 1
23512: PUSH
23513: LD_INT 1
23515: ARRAY
23516: PPUSH
23517: LD_INT 1
23519: PPUSH
23520: CALL_OW 3
23524: PPUSH
23525: CALL_OW 1
23529: ST_TO_ADDR
// tmp := 1 ;
23530: LD_ADDR_VAR 0 2
23534: PUSH
23535: LD_STRING 1
23537: ST_TO_ADDR
// end ; normal := normal & tmp ;
23538: LD_ADDR_VAR 0 3
23542: PUSH
23543: LD_VAR 0 3
23547: PUSH
23548: LD_VAR 0 2
23552: STR
23553: ST_TO_ADDR
// end ;
23554: GO 23454
23556: POP
23557: POP
// for i = 1 to hardcoreCounter do
23558: LD_ADDR_VAR 0 5
23562: PUSH
23563: DOUBLE
23564: LD_INT 1
23566: DEC
23567: ST_TO_ADDR
23568: LD_EXP 68
23572: PUSH
23573: FOR_TO
23574: IFFALSE 23679
// begin tmp := 0 ;
23576: LD_ADDR_VAR 0 2
23580: PUSH
23581: LD_STRING 0
23583: ST_TO_ADDR
// if result [ 2 ] then
23584: LD_VAR 0 1
23588: PUSH
23589: LD_INT 2
23591: ARRAY
23592: IFFALSE 23661
// if result [ 2 ] [ 1 ] = 100 + i then
23594: LD_VAR 0 1
23598: PUSH
23599: LD_INT 2
23601: ARRAY
23602: PUSH
23603: LD_INT 1
23605: ARRAY
23606: PUSH
23607: LD_INT 100
23609: PUSH
23610: LD_VAR 0 5
23614: PLUS
23615: EQUAL
23616: IFFALSE 23661
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23618: LD_ADDR_VAR 0 1
23622: PUSH
23623: LD_VAR 0 1
23627: PPUSH
23628: LD_INT 2
23630: PPUSH
23631: LD_VAR 0 1
23635: PUSH
23636: LD_INT 2
23638: ARRAY
23639: PPUSH
23640: LD_INT 1
23642: PPUSH
23643: CALL_OW 3
23647: PPUSH
23648: CALL_OW 1
23652: ST_TO_ADDR
// tmp := 1 ;
23653: LD_ADDR_VAR 0 2
23657: PUSH
23658: LD_STRING 1
23660: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23661: LD_ADDR_VAR 0 4
23665: PUSH
23666: LD_VAR 0 4
23670: PUSH
23671: LD_VAR 0 2
23675: STR
23676: ST_TO_ADDR
// end ;
23677: GO 23573
23679: POP
23680: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23681: LD_STRING getStreamItemsFromMission("
23683: PUSH
23684: LD_VAR 0 3
23688: STR
23689: PUSH
23690: LD_STRING ","
23692: STR
23693: PUSH
23694: LD_VAR 0 4
23698: STR
23699: PUSH
23700: LD_STRING ")
23702: STR
23703: PPUSH
23704: CALL_OW 559
// end else
23708: GO 23717
// ToLua ( getStreamItemsFromMission("","") ) ;
23710: LD_STRING getStreamItemsFromMission("","")
23712: PPUSH
23713: CALL_OW 559
// end ;
23717: LD_VAR 0 1
23721: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23722: LD_EXP 66
23726: PUSH
23727: LD_EXP 71
23731: AND
23732: IFFALSE 23856
23734: GO 23736
23736: DISABLE
23737: LD_INT 0
23739: PPUSH
23740: PPUSH
// begin enable ;
23741: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23742: LD_ADDR_VAR 0 2
23746: PUSH
23747: LD_INT 22
23749: PUSH
23750: LD_OWVAR 2
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 34
23764: PUSH
23765: LD_INT 7
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 34
23774: PUSH
23775: LD_INT 45
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 34
23784: PUSH
23785: LD_INT 28
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 34
23794: PUSH
23795: LD_INT 47
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PPUSH
23813: CALL_OW 69
23817: ST_TO_ADDR
// if not tmp then
23818: LD_VAR 0 2
23822: NOT
23823: IFFALSE 23827
// exit ;
23825: GO 23856
// for i in tmp do
23827: LD_ADDR_VAR 0 1
23831: PUSH
23832: LD_VAR 0 2
23836: PUSH
23837: FOR_IN
23838: IFFALSE 23854
// begin SetLives ( i , 0 ) ;
23840: LD_VAR 0 1
23844: PPUSH
23845: LD_INT 0
23847: PPUSH
23848: CALL_OW 234
// end ;
23852: GO 23837
23854: POP
23855: POP
// end ;
23856: PPOPN 2
23858: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23859: LD_EXP 66
23863: PUSH
23864: LD_EXP 72
23868: AND
23869: IFFALSE 23953
23871: GO 23873
23873: DISABLE
23874: LD_INT 0
23876: PPUSH
23877: PPUSH
// begin enable ;
23878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23879: LD_ADDR_VAR 0 2
23883: PUSH
23884: LD_INT 22
23886: PUSH
23887: LD_OWVAR 2
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 32
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PPUSH
23910: CALL_OW 69
23914: ST_TO_ADDR
// if not tmp then
23915: LD_VAR 0 2
23919: NOT
23920: IFFALSE 23924
// exit ;
23922: GO 23953
// for i in tmp do
23924: LD_ADDR_VAR 0 1
23928: PUSH
23929: LD_VAR 0 2
23933: PUSH
23934: FOR_IN
23935: IFFALSE 23951
// begin SetLives ( i , 0 ) ;
23937: LD_VAR 0 1
23941: PPUSH
23942: LD_INT 0
23944: PPUSH
23945: CALL_OW 234
// end ;
23949: GO 23934
23951: POP
23952: POP
// end ;
23953: PPOPN 2
23955: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23956: LD_EXP 66
23960: PUSH
23961: LD_EXP 69
23965: AND
23966: IFFALSE 24059
23968: GO 23970
23970: DISABLE
23971: LD_INT 0
23973: PPUSH
// begin enable ;
23974: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23975: LD_ADDR_VAR 0 1
23979: PUSH
23980: LD_INT 22
23982: PUSH
23983: LD_OWVAR 2
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 2
23994: PUSH
23995: LD_INT 25
23997: PUSH
23998: LD_INT 5
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 25
24007: PUSH
24008: LD_INT 9
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 25
24017: PUSH
24018: LD_INT 8
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PPUSH
24035: CALL_OW 69
24039: PUSH
24040: FOR_IN
24041: IFFALSE 24057
// begin SetClass ( i , 1 ) ;
24043: LD_VAR 0 1
24047: PPUSH
24048: LD_INT 1
24050: PPUSH
24051: CALL_OW 336
// end ;
24055: GO 24040
24057: POP
24058: POP
// end ;
24059: PPOPN 1
24061: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24062: LD_EXP 66
24066: PUSH
24067: LD_EXP 70
24071: AND
24072: PUSH
24073: LD_OWVAR 65
24077: PUSH
24078: LD_INT 7
24080: LESS
24081: AND
24082: IFFALSE 24096
24084: GO 24086
24086: DISABLE
// begin enable ;
24087: ENABLE
// game_speed := 7 ;
24088: LD_ADDR_OWVAR 65
24092: PUSH
24093: LD_INT 7
24095: ST_TO_ADDR
// end ;
24096: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24097: LD_EXP 66
24101: PUSH
24102: LD_EXP 73
24106: AND
24107: IFFALSE 24309
24109: GO 24111
24111: DISABLE
24112: LD_INT 0
24114: PPUSH
24115: PPUSH
24116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24117: LD_ADDR_VAR 0 3
24121: PUSH
24122: LD_INT 81
24124: PUSH
24125: LD_OWVAR 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 69
24152: ST_TO_ADDR
// if not tmp then
24153: LD_VAR 0 3
24157: NOT
24158: IFFALSE 24162
// exit ;
24160: GO 24309
// if tmp > 5 then
24162: LD_VAR 0 3
24166: PUSH
24167: LD_INT 5
24169: GREATER
24170: IFFALSE 24182
// k := 5 else
24172: LD_ADDR_VAR 0 2
24176: PUSH
24177: LD_INT 5
24179: ST_TO_ADDR
24180: GO 24192
// k := tmp ;
24182: LD_ADDR_VAR 0 2
24186: PUSH
24187: LD_VAR 0 3
24191: ST_TO_ADDR
// for i := 1 to k do
24192: LD_ADDR_VAR 0 1
24196: PUSH
24197: DOUBLE
24198: LD_INT 1
24200: DEC
24201: ST_TO_ADDR
24202: LD_VAR 0 2
24206: PUSH
24207: FOR_TO
24208: IFFALSE 24307
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24210: LD_VAR 0 3
24214: PUSH
24215: LD_VAR 0 1
24219: ARRAY
24220: PPUSH
24221: LD_VAR 0 1
24225: PUSH
24226: LD_INT 4
24228: MOD
24229: PUSH
24230: LD_INT 1
24232: PLUS
24233: PPUSH
24234: CALL_OW 259
24238: PUSH
24239: LD_INT 10
24241: LESS
24242: IFFALSE 24305
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24244: LD_VAR 0 3
24248: PUSH
24249: LD_VAR 0 1
24253: ARRAY
24254: PPUSH
24255: LD_VAR 0 1
24259: PUSH
24260: LD_INT 4
24262: MOD
24263: PUSH
24264: LD_INT 1
24266: PLUS
24267: PPUSH
24268: LD_VAR 0 3
24272: PUSH
24273: LD_VAR 0 1
24277: ARRAY
24278: PPUSH
24279: LD_VAR 0 1
24283: PUSH
24284: LD_INT 4
24286: MOD
24287: PUSH
24288: LD_INT 1
24290: PLUS
24291: PPUSH
24292: CALL_OW 259
24296: PUSH
24297: LD_INT 1
24299: PLUS
24300: PPUSH
24301: CALL_OW 237
24305: GO 24207
24307: POP
24308: POP
// end ;
24309: PPOPN 3
24311: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24312: LD_EXP 66
24316: PUSH
24317: LD_EXP 74
24321: AND
24322: IFFALSE 24342
24324: GO 24326
24326: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24327: LD_INT 4
24329: PPUSH
24330: LD_OWVAR 2
24334: PPUSH
24335: LD_INT 0
24337: PPUSH
24338: CALL_OW 324
24342: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24343: LD_EXP 66
24347: PUSH
24348: LD_EXP 103
24352: AND
24353: IFFALSE 24373
24355: GO 24357
24357: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24358: LD_INT 19
24360: PPUSH
24361: LD_OWVAR 2
24365: PPUSH
24366: LD_INT 0
24368: PPUSH
24369: CALL_OW 324
24373: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24374: LD_EXP 66
24378: PUSH
24379: LD_EXP 75
24383: AND
24384: IFFALSE 24486
24386: GO 24388
24388: DISABLE
24389: LD_INT 0
24391: PPUSH
24392: PPUSH
// begin enable ;
24393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24394: LD_ADDR_VAR 0 2
24398: PUSH
24399: LD_INT 22
24401: PUSH
24402: LD_OWVAR 2
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 2
24413: PUSH
24414: LD_INT 34
24416: PUSH
24417: LD_INT 11
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 34
24426: PUSH
24427: LD_INT 30
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PPUSH
24443: CALL_OW 69
24447: ST_TO_ADDR
// if not tmp then
24448: LD_VAR 0 2
24452: NOT
24453: IFFALSE 24457
// exit ;
24455: GO 24486
// for i in tmp do
24457: LD_ADDR_VAR 0 1
24461: PUSH
24462: LD_VAR 0 2
24466: PUSH
24467: FOR_IN
24468: IFFALSE 24484
// begin SetLives ( i , 0 ) ;
24470: LD_VAR 0 1
24474: PPUSH
24475: LD_INT 0
24477: PPUSH
24478: CALL_OW 234
// end ;
24482: GO 24467
24484: POP
24485: POP
// end ;
24486: PPOPN 2
24488: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24489: LD_EXP 66
24493: PUSH
24494: LD_EXP 76
24498: AND
24499: IFFALSE 24519
24501: GO 24503
24503: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24504: LD_INT 32
24506: PPUSH
24507: LD_OWVAR 2
24511: PPUSH
24512: LD_INT 0
24514: PPUSH
24515: CALL_OW 324
24519: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24520: LD_EXP 66
24524: PUSH
24525: LD_EXP 77
24529: AND
24530: IFFALSE 24711
24532: GO 24534
24534: DISABLE
24535: LD_INT 0
24537: PPUSH
24538: PPUSH
24539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24540: LD_ADDR_VAR 0 2
24544: PUSH
24545: LD_INT 22
24547: PUSH
24548: LD_OWVAR 2
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 33
24559: PUSH
24560: LD_INT 3
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PPUSH
24571: CALL_OW 69
24575: ST_TO_ADDR
// if not tmp then
24576: LD_VAR 0 2
24580: NOT
24581: IFFALSE 24585
// exit ;
24583: GO 24711
// side := 0 ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_INT 0
24592: ST_TO_ADDR
// for i := 1 to 8 do
24593: LD_ADDR_VAR 0 1
24597: PUSH
24598: DOUBLE
24599: LD_INT 1
24601: DEC
24602: ST_TO_ADDR
24603: LD_INT 8
24605: PUSH
24606: FOR_TO
24607: IFFALSE 24655
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24609: LD_OWVAR 2
24613: PUSH
24614: LD_VAR 0 1
24618: NONEQUAL
24619: PUSH
24620: LD_OWVAR 2
24624: PPUSH
24625: LD_VAR 0 1
24629: PPUSH
24630: CALL_OW 81
24634: PUSH
24635: LD_INT 2
24637: EQUAL
24638: AND
24639: IFFALSE 24653
// begin side := i ;
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: LD_VAR 0 1
24650: ST_TO_ADDR
// break ;
24651: GO 24655
// end ;
24653: GO 24606
24655: POP
24656: POP
// if not side then
24657: LD_VAR 0 3
24661: NOT
24662: IFFALSE 24666
// exit ;
24664: GO 24711
// for i := 1 to tmp do
24666: LD_ADDR_VAR 0 1
24670: PUSH
24671: DOUBLE
24672: LD_INT 1
24674: DEC
24675: ST_TO_ADDR
24676: LD_VAR 0 2
24680: PUSH
24681: FOR_TO
24682: IFFALSE 24709
// if Prob ( 60 ) then
24684: LD_INT 60
24686: PPUSH
24687: CALL_OW 13
24691: IFFALSE 24707
// SetSide ( i , side ) ;
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_VAR 0 3
24702: PPUSH
24703: CALL_OW 235
24707: GO 24681
24709: POP
24710: POP
// end ;
24711: PPOPN 3
24713: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24714: LD_EXP 66
24718: PUSH
24719: LD_EXP 79
24723: AND
24724: IFFALSE 24843
24726: GO 24728
24728: DISABLE
24729: LD_INT 0
24731: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24732: LD_ADDR_VAR 0 1
24736: PUSH
24737: LD_INT 22
24739: PUSH
24740: LD_OWVAR 2
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 21
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 3
24761: PUSH
24762: LD_INT 23
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: PPUSH
24781: CALL_OW 69
24785: PUSH
24786: FOR_IN
24787: IFFALSE 24841
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL_OW 257
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: LD_INT 3
24807: PUSH
24808: LD_INT 4
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: IN
24817: IFFALSE 24839
// SetClass ( un , rand ( 1 , 4 ) ) ;
24819: LD_VAR 0 1
24823: PPUSH
24824: LD_INT 1
24826: PPUSH
24827: LD_INT 4
24829: PPUSH
24830: CALL_OW 12
24834: PPUSH
24835: CALL_OW 336
24839: GO 24786
24841: POP
24842: POP
// end ;
24843: PPOPN 1
24845: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24846: LD_EXP 66
24850: PUSH
24851: LD_EXP 78
24855: AND
24856: IFFALSE 24935
24858: GO 24860
24860: DISABLE
24861: LD_INT 0
24863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24864: LD_ADDR_VAR 0 1
24868: PUSH
24869: LD_INT 22
24871: PUSH
24872: LD_OWVAR 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 21
24883: PUSH
24884: LD_INT 3
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PPUSH
24895: CALL_OW 69
24899: ST_TO_ADDR
// if not tmp then
24900: LD_VAR 0 1
24904: NOT
24905: IFFALSE 24909
// exit ;
24907: GO 24935
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24909: LD_VAR 0 1
24913: PUSH
24914: LD_INT 1
24916: PPUSH
24917: LD_VAR 0 1
24921: PPUSH
24922: CALL_OW 12
24926: ARRAY
24927: PPUSH
24928: LD_INT 100
24930: PPUSH
24931: CALL_OW 234
// end ;
24935: PPOPN 1
24937: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24938: LD_EXP 66
24942: PUSH
24943: LD_EXP 80
24947: AND
24948: IFFALSE 25046
24950: GO 24952
24952: DISABLE
24953: LD_INT 0
24955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24956: LD_ADDR_VAR 0 1
24960: PUSH
24961: LD_INT 22
24963: PUSH
24964: LD_OWVAR 2
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 21
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PPUSH
24987: CALL_OW 69
24991: ST_TO_ADDR
// if not tmp then
24992: LD_VAR 0 1
24996: NOT
24997: IFFALSE 25001
// exit ;
24999: GO 25046
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25001: LD_VAR 0 1
25005: PUSH
25006: LD_INT 1
25008: PPUSH
25009: LD_VAR 0 1
25013: PPUSH
25014: CALL_OW 12
25018: ARRAY
25019: PPUSH
25020: LD_INT 1
25022: PPUSH
25023: LD_INT 4
25025: PPUSH
25026: CALL_OW 12
25030: PPUSH
25031: LD_INT 3000
25033: PPUSH
25034: LD_INT 9000
25036: PPUSH
25037: CALL_OW 12
25041: PPUSH
25042: CALL_OW 492
// end ;
25046: PPOPN 1
25048: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25049: LD_EXP 66
25053: PUSH
25054: LD_EXP 81
25058: AND
25059: IFFALSE 25079
25061: GO 25063
25063: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25064: LD_INT 1
25066: PPUSH
25067: LD_OWVAR 2
25071: PPUSH
25072: LD_INT 0
25074: PPUSH
25075: CALL_OW 324
25079: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25080: LD_EXP 66
25084: PUSH
25085: LD_EXP 82
25089: AND
25090: IFFALSE 25173
25092: GO 25094
25094: DISABLE
25095: LD_INT 0
25097: PPUSH
25098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25099: LD_ADDR_VAR 0 2
25103: PUSH
25104: LD_INT 22
25106: PUSH
25107: LD_OWVAR 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 21
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PPUSH
25130: CALL_OW 69
25134: ST_TO_ADDR
// if not tmp then
25135: LD_VAR 0 2
25139: NOT
25140: IFFALSE 25144
// exit ;
25142: GO 25173
// for i in tmp do
25144: LD_ADDR_VAR 0 1
25148: PUSH
25149: LD_VAR 0 2
25153: PUSH
25154: FOR_IN
25155: IFFALSE 25171
// SetBLevel ( i , 10 ) ;
25157: LD_VAR 0 1
25161: PPUSH
25162: LD_INT 10
25164: PPUSH
25165: CALL_OW 241
25169: GO 25154
25171: POP
25172: POP
// end ;
25173: PPOPN 2
25175: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25176: LD_EXP 66
25180: PUSH
25181: LD_EXP 83
25185: AND
25186: IFFALSE 25297
25188: GO 25190
25190: DISABLE
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
25195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25196: LD_ADDR_VAR 0 3
25200: PUSH
25201: LD_INT 22
25203: PUSH
25204: LD_OWVAR 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 25
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 69
25231: ST_TO_ADDR
// if not tmp then
25232: LD_VAR 0 3
25236: NOT
25237: IFFALSE 25241
// exit ;
25239: GO 25297
// un := tmp [ rand ( 1 , tmp ) ] ;
25241: LD_ADDR_VAR 0 2
25245: PUSH
25246: LD_VAR 0 3
25250: PUSH
25251: LD_INT 1
25253: PPUSH
25254: LD_VAR 0 3
25258: PPUSH
25259: CALL_OW 12
25263: ARRAY
25264: ST_TO_ADDR
// if Crawls ( un ) then
25265: LD_VAR 0 2
25269: PPUSH
25270: CALL_OW 318
25274: IFFALSE 25285
// ComWalk ( un ) ;
25276: LD_VAR 0 2
25280: PPUSH
25281: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25285: LD_VAR 0 2
25289: PPUSH
25290: LD_INT 5
25292: PPUSH
25293: CALL_OW 336
// end ;
25297: PPOPN 3
25299: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25300: LD_EXP 66
25304: PUSH
25305: LD_EXP 84
25309: AND
25310: PUSH
25311: LD_OWVAR 67
25315: PUSH
25316: LD_INT 3
25318: LESS
25319: AND
25320: IFFALSE 25339
25322: GO 25324
25324: DISABLE
// Difficulty := Difficulty + 1 ;
25325: LD_ADDR_OWVAR 67
25329: PUSH
25330: LD_OWVAR 67
25334: PUSH
25335: LD_INT 1
25337: PLUS
25338: ST_TO_ADDR
25339: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25340: LD_EXP 66
25344: PUSH
25345: LD_EXP 85
25349: AND
25350: IFFALSE 25453
25352: GO 25354
25354: DISABLE
25355: LD_INT 0
25357: PPUSH
// begin for i := 1 to 5 do
25358: LD_ADDR_VAR 0 1
25362: PUSH
25363: DOUBLE
25364: LD_INT 1
25366: DEC
25367: ST_TO_ADDR
25368: LD_INT 5
25370: PUSH
25371: FOR_TO
25372: IFFALSE 25451
// begin uc_nation := nation_nature ;
25374: LD_ADDR_OWVAR 21
25378: PUSH
25379: LD_INT 0
25381: ST_TO_ADDR
// uc_side := 0 ;
25382: LD_ADDR_OWVAR 20
25386: PUSH
25387: LD_INT 0
25389: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25390: LD_ADDR_OWVAR 29
25394: PUSH
25395: LD_INT 12
25397: PUSH
25398: LD_INT 12
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: ST_TO_ADDR
// hc_agressivity := 20 ;
25405: LD_ADDR_OWVAR 35
25409: PUSH
25410: LD_INT 20
25412: ST_TO_ADDR
// hc_class := class_tiger ;
25413: LD_ADDR_OWVAR 28
25417: PUSH
25418: LD_INT 14
25420: ST_TO_ADDR
// hc_gallery :=  ;
25421: LD_ADDR_OWVAR 33
25425: PUSH
25426: LD_STRING 
25428: ST_TO_ADDR
// hc_name :=  ;
25429: LD_ADDR_OWVAR 26
25433: PUSH
25434: LD_STRING 
25436: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25437: CALL_OW 44
25441: PPUSH
25442: LD_INT 0
25444: PPUSH
25445: CALL_OW 51
// end ;
25449: GO 25371
25451: POP
25452: POP
// end ;
25453: PPOPN 1
25455: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25456: LD_EXP 66
25460: PUSH
25461: LD_EXP 86
25465: AND
25466: IFFALSE 25475
25468: GO 25470
25470: DISABLE
// StreamSibBomb ;
25471: CALL 25476 0 0
25475: END
// export function StreamSibBomb ; var i , x , y ; begin
25476: LD_INT 0
25478: PPUSH
25479: PPUSH
25480: PPUSH
25481: PPUSH
// result := false ;
25482: LD_ADDR_VAR 0 1
25486: PUSH
25487: LD_INT 0
25489: ST_TO_ADDR
// for i := 1 to 16 do
25490: LD_ADDR_VAR 0 2
25494: PUSH
25495: DOUBLE
25496: LD_INT 1
25498: DEC
25499: ST_TO_ADDR
25500: LD_INT 16
25502: PUSH
25503: FOR_TO
25504: IFFALSE 25703
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25506: LD_ADDR_VAR 0 3
25510: PUSH
25511: LD_INT 10
25513: PUSH
25514: LD_INT 20
25516: PUSH
25517: LD_INT 30
25519: PUSH
25520: LD_INT 40
25522: PUSH
25523: LD_INT 50
25525: PUSH
25526: LD_INT 60
25528: PUSH
25529: LD_INT 70
25531: PUSH
25532: LD_INT 80
25534: PUSH
25535: LD_INT 90
25537: PUSH
25538: LD_INT 100
25540: PUSH
25541: LD_INT 110
25543: PUSH
25544: LD_INT 120
25546: PUSH
25547: LD_INT 130
25549: PUSH
25550: LD_INT 140
25552: PUSH
25553: LD_INT 150
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PPUSH
25576: LD_INT 15
25578: PPUSH
25579: CALL_OW 12
25583: ARRAY
25584: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25585: LD_ADDR_VAR 0 4
25589: PUSH
25590: LD_INT 10
25592: PUSH
25593: LD_INT 20
25595: PUSH
25596: LD_INT 30
25598: PUSH
25599: LD_INT 40
25601: PUSH
25602: LD_INT 50
25604: PUSH
25605: LD_INT 60
25607: PUSH
25608: LD_INT 70
25610: PUSH
25611: LD_INT 80
25613: PUSH
25614: LD_INT 90
25616: PUSH
25617: LD_INT 100
25619: PUSH
25620: LD_INT 110
25622: PUSH
25623: LD_INT 120
25625: PUSH
25626: LD_INT 130
25628: PUSH
25629: LD_INT 140
25631: PUSH
25632: LD_INT 150
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: PPUSH
25655: LD_INT 15
25657: PPUSH
25658: CALL_OW 12
25662: ARRAY
25663: ST_TO_ADDR
// if ValidHex ( x , y ) then
25664: LD_VAR 0 3
25668: PPUSH
25669: LD_VAR 0 4
25673: PPUSH
25674: CALL_OW 488
25678: IFFALSE 25701
// begin result := [ x , y ] ;
25680: LD_ADDR_VAR 0 1
25684: PUSH
25685: LD_VAR 0 3
25689: PUSH
25690: LD_VAR 0 4
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: ST_TO_ADDR
// break ;
25699: GO 25703
// end ; end ;
25701: GO 25503
25703: POP
25704: POP
// if result then
25705: LD_VAR 0 1
25709: IFFALSE 25769
// begin ToLua ( playSibBomb() ) ;
25711: LD_STRING playSibBomb()
25713: PPUSH
25714: CALL_OW 559
// wait ( 0 0$14 ) ;
25718: LD_INT 490
25720: PPUSH
25721: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25725: LD_VAR 0 1
25729: PUSH
25730: LD_INT 1
25732: ARRAY
25733: PPUSH
25734: LD_VAR 0 1
25738: PUSH
25739: LD_INT 2
25741: ARRAY
25742: PPUSH
25743: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25747: LD_VAR 0 1
25751: PUSH
25752: LD_INT 1
25754: ARRAY
25755: PPUSH
25756: LD_VAR 0 1
25760: PUSH
25761: LD_INT 2
25763: ARRAY
25764: PPUSH
25765: CALL_OW 429
// end ; end ;
25769: LD_VAR 0 1
25773: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25774: LD_EXP 66
25778: PUSH
25779: LD_EXP 88
25783: AND
25784: IFFALSE 25796
25786: GO 25788
25788: DISABLE
// YouLost (  ) ;
25789: LD_STRING 
25791: PPUSH
25792: CALL_OW 104
25796: END
// every 0 0$1 trigger StreamModeActive and sFog do
25797: LD_EXP 66
25801: PUSH
25802: LD_EXP 87
25806: AND
25807: IFFALSE 25821
25809: GO 25811
25811: DISABLE
// FogOff ( your_side ) ;
25812: LD_OWVAR 2
25816: PPUSH
25817: CALL_OW 344
25821: END
// every 0 0$1 trigger StreamModeActive and sSun do
25822: LD_EXP 66
25826: PUSH
25827: LD_EXP 89
25831: AND
25832: IFFALSE 25860
25834: GO 25836
25836: DISABLE
// begin solar_recharge_percent := 0 ;
25837: LD_ADDR_OWVAR 79
25841: PUSH
25842: LD_INT 0
25844: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25845: LD_INT 10500
25847: PPUSH
25848: CALL_OW 67
// solar_recharge_percent := 100 ;
25852: LD_ADDR_OWVAR 79
25856: PUSH
25857: LD_INT 100
25859: ST_TO_ADDR
// end ;
25860: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25861: LD_EXP 66
25865: PUSH
25866: LD_EXP 90
25870: AND
25871: IFFALSE 26110
25873: GO 25875
25875: DISABLE
25876: LD_INT 0
25878: PPUSH
25879: PPUSH
25880: PPUSH
// begin tmp := [ ] ;
25881: LD_ADDR_VAR 0 3
25885: PUSH
25886: EMPTY
25887: ST_TO_ADDR
// for i := 1 to 6 do
25888: LD_ADDR_VAR 0 1
25892: PUSH
25893: DOUBLE
25894: LD_INT 1
25896: DEC
25897: ST_TO_ADDR
25898: LD_INT 6
25900: PUSH
25901: FOR_TO
25902: IFFALSE 26007
// begin uc_nation := nation_nature ;
25904: LD_ADDR_OWVAR 21
25908: PUSH
25909: LD_INT 0
25911: ST_TO_ADDR
// uc_side := 0 ;
25912: LD_ADDR_OWVAR 20
25916: PUSH
25917: LD_INT 0
25919: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25920: LD_ADDR_OWVAR 29
25924: PUSH
25925: LD_INT 12
25927: PUSH
25928: LD_INT 12
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: ST_TO_ADDR
// hc_agressivity := 20 ;
25935: LD_ADDR_OWVAR 35
25939: PUSH
25940: LD_INT 20
25942: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25943: LD_ADDR_OWVAR 28
25947: PUSH
25948: LD_INT 17
25950: ST_TO_ADDR
// hc_gallery :=  ;
25951: LD_ADDR_OWVAR 33
25955: PUSH
25956: LD_STRING 
25958: ST_TO_ADDR
// hc_name :=  ;
25959: LD_ADDR_OWVAR 26
25963: PUSH
25964: LD_STRING 
25966: ST_TO_ADDR
// un := CreateHuman ;
25967: LD_ADDR_VAR 0 2
25971: PUSH
25972: CALL_OW 44
25976: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25977: LD_VAR 0 2
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: CALL_OW 51
// tmp := tmp ^ un ;
25989: LD_ADDR_VAR 0 3
25993: PUSH
25994: LD_VAR 0 3
25998: PUSH
25999: LD_VAR 0 2
26003: ADD
26004: ST_TO_ADDR
// end ;
26005: GO 25901
26007: POP
26008: POP
// repeat wait ( 0 0$1 ) ;
26009: LD_INT 35
26011: PPUSH
26012: CALL_OW 67
// for un in tmp do
26016: LD_ADDR_VAR 0 2
26020: PUSH
26021: LD_VAR 0 3
26025: PUSH
26026: FOR_IN
26027: IFFALSE 26101
// begin if IsDead ( un ) then
26029: LD_VAR 0 2
26033: PPUSH
26034: CALL_OW 301
26038: IFFALSE 26058
// begin tmp := tmp diff un ;
26040: LD_ADDR_VAR 0 3
26044: PUSH
26045: LD_VAR 0 3
26049: PUSH
26050: LD_VAR 0 2
26054: DIFF
26055: ST_TO_ADDR
// continue ;
26056: GO 26026
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26058: LD_VAR 0 2
26062: PPUSH
26063: LD_INT 3
26065: PUSH
26066: LD_INT 22
26068: PUSH
26069: LD_INT 0
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PPUSH
26080: CALL_OW 69
26084: PPUSH
26085: LD_VAR 0 2
26089: PPUSH
26090: CALL_OW 74
26094: PPUSH
26095: CALL_OW 115
// end ;
26099: GO 26026
26101: POP
26102: POP
// until not tmp ;
26103: LD_VAR 0 3
26107: NOT
26108: IFFALSE 26009
// end ;
26110: PPOPN 3
26112: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26113: LD_EXP 66
26117: PUSH
26118: LD_EXP 91
26122: AND
26123: IFFALSE 26177
26125: GO 26127
26127: DISABLE
// begin ToLua ( displayTroll(); ) ;
26128: LD_STRING displayTroll();
26130: PPUSH
26131: CALL_OW 559
// wait ( 3 3$00 ) ;
26135: LD_INT 6300
26137: PPUSH
26138: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26142: LD_STRING hideTroll();
26144: PPUSH
26145: CALL_OW 559
// wait ( 1 1$00 ) ;
26149: LD_INT 2100
26151: PPUSH
26152: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26156: LD_STRING displayTroll();
26158: PPUSH
26159: CALL_OW 559
// wait ( 1 1$00 ) ;
26163: LD_INT 2100
26165: PPUSH
26166: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26170: LD_STRING hideTroll();
26172: PPUSH
26173: CALL_OW 559
// end ;
26177: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26178: LD_EXP 66
26182: PUSH
26183: LD_EXP 92
26187: AND
26188: IFFALSE 26251
26190: GO 26192
26192: DISABLE
26193: LD_INT 0
26195: PPUSH
// begin p := 0 ;
26196: LD_ADDR_VAR 0 1
26200: PUSH
26201: LD_INT 0
26203: ST_TO_ADDR
// repeat game_speed := 1 ;
26204: LD_ADDR_OWVAR 65
26208: PUSH
26209: LD_INT 1
26211: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26212: LD_INT 35
26214: PPUSH
26215: CALL_OW 67
// p := p + 1 ;
26219: LD_ADDR_VAR 0 1
26223: PUSH
26224: LD_VAR 0 1
26228: PUSH
26229: LD_INT 1
26231: PLUS
26232: ST_TO_ADDR
// until p >= 60 ;
26233: LD_VAR 0 1
26237: PUSH
26238: LD_INT 60
26240: GREATEREQUAL
26241: IFFALSE 26204
// game_speed := 4 ;
26243: LD_ADDR_OWVAR 65
26247: PUSH
26248: LD_INT 4
26250: ST_TO_ADDR
// end ;
26251: PPOPN 1
26253: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26254: LD_EXP 66
26258: PUSH
26259: LD_EXP 93
26263: AND
26264: IFFALSE 26410
26266: GO 26268
26268: DISABLE
26269: LD_INT 0
26271: PPUSH
26272: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26273: LD_ADDR_VAR 0 1
26277: PUSH
26278: LD_INT 22
26280: PUSH
26281: LD_OWVAR 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 30
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 30
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PPUSH
26322: CALL_OW 69
26326: ST_TO_ADDR
// if not depot then
26327: LD_VAR 0 1
26331: NOT
26332: IFFALSE 26336
// exit ;
26334: GO 26410
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26336: LD_ADDR_VAR 0 2
26340: PUSH
26341: LD_VAR 0 1
26345: PUSH
26346: LD_INT 1
26348: PPUSH
26349: LD_VAR 0 1
26353: PPUSH
26354: CALL_OW 12
26358: ARRAY
26359: PPUSH
26360: CALL_OW 274
26364: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26365: LD_VAR 0 2
26369: PPUSH
26370: LD_INT 1
26372: PPUSH
26373: LD_INT 0
26375: PPUSH
26376: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26380: LD_VAR 0 2
26384: PPUSH
26385: LD_INT 2
26387: PPUSH
26388: LD_INT 0
26390: PPUSH
26391: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26395: LD_VAR 0 2
26399: PPUSH
26400: LD_INT 3
26402: PPUSH
26403: LD_INT 0
26405: PPUSH
26406: CALL_OW 277
// end ;
26410: PPOPN 2
26412: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26413: LD_EXP 66
26417: PUSH
26418: LD_EXP 94
26422: AND
26423: IFFALSE 26520
26425: GO 26427
26427: DISABLE
26428: LD_INT 0
26430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26431: LD_ADDR_VAR 0 1
26435: PUSH
26436: LD_INT 22
26438: PUSH
26439: LD_OWVAR 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 21
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 3
26460: PUSH
26461: LD_INT 23
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: ST_TO_ADDR
// if not tmp then
26485: LD_VAR 0 1
26489: NOT
26490: IFFALSE 26494
// exit ;
26492: GO 26520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26494: LD_VAR 0 1
26498: PUSH
26499: LD_INT 1
26501: PPUSH
26502: LD_VAR 0 1
26506: PPUSH
26507: CALL_OW 12
26511: ARRAY
26512: PPUSH
26513: LD_INT 200
26515: PPUSH
26516: CALL_OW 234
// end ;
26520: PPOPN 1
26522: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26523: LD_EXP 66
26527: PUSH
26528: LD_EXP 95
26532: AND
26533: IFFALSE 26612
26535: GO 26537
26537: DISABLE
26538: LD_INT 0
26540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26541: LD_ADDR_VAR 0 1
26545: PUSH
26546: LD_INT 22
26548: PUSH
26549: LD_OWVAR 2
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 21
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PPUSH
26572: CALL_OW 69
26576: ST_TO_ADDR
// if not tmp then
26577: LD_VAR 0 1
26581: NOT
26582: IFFALSE 26586
// exit ;
26584: GO 26612
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26586: LD_VAR 0 1
26590: PUSH
26591: LD_INT 1
26593: PPUSH
26594: LD_VAR 0 1
26598: PPUSH
26599: CALL_OW 12
26603: ARRAY
26604: PPUSH
26605: LD_INT 60
26607: PPUSH
26608: CALL_OW 234
// end ;
26612: PPOPN 1
26614: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26615: LD_EXP 66
26619: PUSH
26620: LD_EXP 96
26624: AND
26625: IFFALSE 26724
26627: GO 26629
26629: DISABLE
26630: LD_INT 0
26632: PPUSH
26633: PPUSH
// begin enable ;
26634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26635: LD_ADDR_VAR 0 1
26639: PUSH
26640: LD_INT 22
26642: PUSH
26643: LD_OWVAR 2
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 61
26654: PUSH
26655: EMPTY
26656: LIST
26657: PUSH
26658: LD_INT 33
26660: PUSH
26661: LD_INT 2
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: PPUSH
26673: CALL_OW 69
26677: ST_TO_ADDR
// if not tmp then
26678: LD_VAR 0 1
26682: NOT
26683: IFFALSE 26687
// exit ;
26685: GO 26724
// for i in tmp do
26687: LD_ADDR_VAR 0 2
26691: PUSH
26692: LD_VAR 0 1
26696: PUSH
26697: FOR_IN
26698: IFFALSE 26722
// if IsControledBy ( i ) then
26700: LD_VAR 0 2
26704: PPUSH
26705: CALL_OW 312
26709: IFFALSE 26720
// ComUnlink ( i ) ;
26711: LD_VAR 0 2
26715: PPUSH
26716: CALL_OW 136
26720: GO 26697
26722: POP
26723: POP
// end ;
26724: PPOPN 2
26726: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26727: LD_EXP 66
26731: PUSH
26732: LD_EXP 97
26736: AND
26737: IFFALSE 26877
26739: GO 26741
26741: DISABLE
26742: LD_INT 0
26744: PPUSH
26745: PPUSH
// begin ToLua ( displayPowell(); ) ;
26746: LD_STRING displayPowell();
26748: PPUSH
26749: CALL_OW 559
// uc_side := 0 ;
26753: LD_ADDR_OWVAR 20
26757: PUSH
26758: LD_INT 0
26760: ST_TO_ADDR
// uc_nation := 2 ;
26761: LD_ADDR_OWVAR 21
26765: PUSH
26766: LD_INT 2
26768: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26769: LD_ADDR_OWVAR 37
26773: PUSH
26774: LD_INT 14
26776: ST_TO_ADDR
// vc_engine := engine_siberite ;
26777: LD_ADDR_OWVAR 39
26781: PUSH
26782: LD_INT 3
26784: ST_TO_ADDR
// vc_control := control_apeman ;
26785: LD_ADDR_OWVAR 38
26789: PUSH
26790: LD_INT 5
26792: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26793: LD_ADDR_OWVAR 40
26797: PUSH
26798: LD_INT 29
26800: ST_TO_ADDR
// un := CreateVehicle ;
26801: LD_ADDR_VAR 0 2
26805: PUSH
26806: CALL_OW 45
26810: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26811: LD_VAR 0 2
26815: PPUSH
26816: LD_INT 1
26818: PPUSH
26819: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26823: LD_INT 35
26825: PPUSH
26826: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26830: LD_VAR 0 2
26834: PPUSH
26835: LD_INT 22
26837: PUSH
26838: LD_OWVAR 2
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 69
26851: PPUSH
26852: LD_VAR 0 2
26856: PPUSH
26857: CALL_OW 74
26861: PPUSH
26862: CALL_OW 115
// until IsDead ( un ) ;
26866: LD_VAR 0 2
26870: PPUSH
26871: CALL_OW 301
26875: IFFALSE 26823
// end ;
26877: PPOPN 2
26879: END
// every 0 0$1 trigger StreamModeActive and sStu do
26880: LD_EXP 66
26884: PUSH
26885: LD_EXP 105
26889: AND
26890: IFFALSE 26906
26892: GO 26894
26894: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26895: LD_STRING displayStucuk();
26897: PPUSH
26898: CALL_OW 559
// ResetFog ;
26902: CALL_OW 335
// end ;
26906: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26907: LD_EXP 66
26911: PUSH
26912: LD_EXP 98
26916: AND
26917: IFFALSE 27058
26919: GO 26921
26921: DISABLE
26922: LD_INT 0
26924: PPUSH
26925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26926: LD_ADDR_VAR 0 2
26930: PUSH
26931: LD_INT 22
26933: PUSH
26934: LD_OWVAR 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 21
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PPUSH
26957: CALL_OW 69
26961: ST_TO_ADDR
// if not tmp then
26962: LD_VAR 0 2
26966: NOT
26967: IFFALSE 26971
// exit ;
26969: GO 27058
// un := tmp [ rand ( 1 , tmp ) ] ;
26971: LD_ADDR_VAR 0 1
26975: PUSH
26976: LD_VAR 0 2
26980: PUSH
26981: LD_INT 1
26983: PPUSH
26984: LD_VAR 0 2
26988: PPUSH
26989: CALL_OW 12
26993: ARRAY
26994: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26995: LD_VAR 0 1
26999: PPUSH
27000: LD_INT 0
27002: PPUSH
27003: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27007: LD_VAR 0 1
27011: PPUSH
27012: LD_OWVAR 3
27016: PUSH
27017: LD_VAR 0 1
27021: DIFF
27022: PPUSH
27023: LD_VAR 0 1
27027: PPUSH
27028: CALL_OW 74
27032: PPUSH
27033: CALL_OW 115
// wait ( 0 0$20 ) ;
27037: LD_INT 700
27039: PPUSH
27040: CALL_OW 67
// SetSide ( un , your_side ) ;
27044: LD_VAR 0 1
27048: PPUSH
27049: LD_OWVAR 2
27053: PPUSH
27054: CALL_OW 235
// end ;
27058: PPOPN 2
27060: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27061: LD_EXP 66
27065: PUSH
27066: LD_EXP 99
27070: AND
27071: IFFALSE 27177
27073: GO 27075
27075: DISABLE
27076: LD_INT 0
27078: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27079: LD_ADDR_VAR 0 1
27083: PUSH
27084: LD_INT 22
27086: PUSH
27087: LD_OWVAR 2
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 2
27098: PUSH
27099: LD_INT 30
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 30
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PPUSH
27128: CALL_OW 69
27132: ST_TO_ADDR
// if not depot then
27133: LD_VAR 0 1
27137: NOT
27138: IFFALSE 27142
// exit ;
27140: GO 27177
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27142: LD_VAR 0 1
27146: PUSH
27147: LD_INT 1
27149: ARRAY
27150: PPUSH
27151: CALL_OW 250
27155: PPUSH
27156: LD_VAR 0 1
27160: PUSH
27161: LD_INT 1
27163: ARRAY
27164: PPUSH
27165: CALL_OW 251
27169: PPUSH
27170: LD_INT 70
27172: PPUSH
27173: CALL_OW 495
// end ;
27177: PPOPN 1
27179: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27180: LD_EXP 66
27184: PUSH
27185: LD_EXP 100
27189: AND
27190: IFFALSE 27401
27192: GO 27194
27194: DISABLE
27195: LD_INT 0
27197: PPUSH
27198: PPUSH
27199: PPUSH
27200: PPUSH
27201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27202: LD_ADDR_VAR 0 5
27206: PUSH
27207: LD_INT 22
27209: PUSH
27210: LD_OWVAR 2
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 21
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PPUSH
27233: CALL_OW 69
27237: ST_TO_ADDR
// if not tmp then
27238: LD_VAR 0 5
27242: NOT
27243: IFFALSE 27247
// exit ;
27245: GO 27401
// for i in tmp do
27247: LD_ADDR_VAR 0 1
27251: PUSH
27252: LD_VAR 0 5
27256: PUSH
27257: FOR_IN
27258: IFFALSE 27399
// begin d := rand ( 0 , 5 ) ;
27260: LD_ADDR_VAR 0 4
27264: PUSH
27265: LD_INT 0
27267: PPUSH
27268: LD_INT 5
27270: PPUSH
27271: CALL_OW 12
27275: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_VAR 0 1
27285: PPUSH
27286: CALL_OW 250
27290: PPUSH
27291: LD_VAR 0 4
27295: PPUSH
27296: LD_INT 3
27298: PPUSH
27299: LD_INT 12
27301: PPUSH
27302: CALL_OW 12
27306: PPUSH
27307: CALL_OW 272
27311: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27312: LD_ADDR_VAR 0 3
27316: PUSH
27317: LD_VAR 0 1
27321: PPUSH
27322: CALL_OW 251
27326: PPUSH
27327: LD_VAR 0 4
27331: PPUSH
27332: LD_INT 3
27334: PPUSH
27335: LD_INT 12
27337: PPUSH
27338: CALL_OW 12
27342: PPUSH
27343: CALL_OW 273
27347: ST_TO_ADDR
// if ValidHex ( x , y ) then
27348: LD_VAR 0 2
27352: PPUSH
27353: LD_VAR 0 3
27357: PPUSH
27358: CALL_OW 488
27362: IFFALSE 27397
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27364: LD_VAR 0 1
27368: PPUSH
27369: LD_VAR 0 2
27373: PPUSH
27374: LD_VAR 0 3
27378: PPUSH
27379: LD_INT 3
27381: PPUSH
27382: LD_INT 6
27384: PPUSH
27385: CALL_OW 12
27389: PPUSH
27390: LD_INT 1
27392: PPUSH
27393: CALL_OW 483
// end ;
27397: GO 27257
27399: POP
27400: POP
// end ;
27401: PPOPN 5
27403: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27404: LD_EXP 66
27408: PUSH
27409: LD_EXP 101
27413: AND
27414: IFFALSE 27508
27416: GO 27418
27418: DISABLE
27419: LD_INT 0
27421: PPUSH
27422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27423: LD_ADDR_VAR 0 2
27427: PUSH
27428: LD_INT 22
27430: PUSH
27431: LD_OWVAR 2
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 32
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 21
27452: PUSH
27453: LD_INT 2
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: PPUSH
27465: CALL_OW 69
27469: ST_TO_ADDR
// if not tmp then
27470: LD_VAR 0 2
27474: NOT
27475: IFFALSE 27479
// exit ;
27477: GO 27508
// for i in tmp do
27479: LD_ADDR_VAR 0 1
27483: PUSH
27484: LD_VAR 0 2
27488: PUSH
27489: FOR_IN
27490: IFFALSE 27506
// SetFuel ( i , 0 ) ;
27492: LD_VAR 0 1
27496: PPUSH
27497: LD_INT 0
27499: PPUSH
27500: CALL_OW 240
27504: GO 27489
27506: POP
27507: POP
// end ;
27508: PPOPN 2
27510: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27511: LD_EXP 66
27515: PUSH
27516: LD_EXP 102
27520: AND
27521: IFFALSE 27587
27523: GO 27525
27525: DISABLE
27526: LD_INT 0
27528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27529: LD_ADDR_VAR 0 1
27533: PUSH
27534: LD_INT 22
27536: PUSH
27537: LD_OWVAR 2
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 30
27548: PUSH
27549: LD_INT 29
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PPUSH
27560: CALL_OW 69
27564: ST_TO_ADDR
// if not tmp then
27565: LD_VAR 0 1
27569: NOT
27570: IFFALSE 27574
// exit ;
27572: GO 27587
// DestroyUnit ( tmp [ 1 ] ) ;
27574: LD_VAR 0 1
27578: PUSH
27579: LD_INT 1
27581: ARRAY
27582: PPUSH
27583: CALL_OW 65
// end ;
27587: PPOPN 1
27589: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27590: LD_EXP 66
27594: PUSH
27595: LD_EXP 104
27599: AND
27600: IFFALSE 27729
27602: GO 27604
27604: DISABLE
27605: LD_INT 0
27607: PPUSH
// begin uc_side := 0 ;
27608: LD_ADDR_OWVAR 20
27612: PUSH
27613: LD_INT 0
27615: ST_TO_ADDR
// uc_nation := nation_arabian ;
27616: LD_ADDR_OWVAR 21
27620: PUSH
27621: LD_INT 2
27623: ST_TO_ADDR
// hc_gallery :=  ;
27624: LD_ADDR_OWVAR 33
27628: PUSH
27629: LD_STRING 
27631: ST_TO_ADDR
// hc_name :=  ;
27632: LD_ADDR_OWVAR 26
27636: PUSH
27637: LD_STRING 
27639: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27640: LD_INT 1
27642: PPUSH
27643: LD_INT 11
27645: PPUSH
27646: LD_INT 10
27648: PPUSH
27649: CALL_OW 380
// un := CreateHuman ;
27653: LD_ADDR_VAR 0 1
27657: PUSH
27658: CALL_OW 44
27662: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27663: LD_VAR 0 1
27667: PPUSH
27668: LD_INT 1
27670: PPUSH
27671: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27675: LD_INT 35
27677: PPUSH
27678: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27682: LD_VAR 0 1
27686: PPUSH
27687: LD_INT 22
27689: PUSH
27690: LD_OWVAR 2
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PPUSH
27699: CALL_OW 69
27703: PPUSH
27704: LD_VAR 0 1
27708: PPUSH
27709: CALL_OW 74
27713: PPUSH
27714: CALL_OW 115
// until IsDead ( un ) ;
27718: LD_VAR 0 1
27722: PPUSH
27723: CALL_OW 301
27727: IFFALSE 27675
// end ;
27729: PPOPN 1
27731: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27732: LD_EXP 66
27736: PUSH
27737: LD_EXP 106
27741: AND
27742: IFFALSE 27754
27744: GO 27746
27746: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27747: LD_STRING earthquake(getX(game), 0, 32)
27749: PPUSH
27750: CALL_OW 559
27754: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27755: LD_EXP 66
27759: PUSH
27760: LD_EXP 107
27764: AND
27765: IFFALSE 27856
27767: GO 27769
27769: DISABLE
27770: LD_INT 0
27772: PPUSH
// begin enable ;
27773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27774: LD_ADDR_VAR 0 1
27778: PUSH
27779: LD_INT 22
27781: PUSH
27782: LD_OWVAR 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 21
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 33
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: LIST
27815: PPUSH
27816: CALL_OW 69
27820: ST_TO_ADDR
// if not tmp then
27821: LD_VAR 0 1
27825: NOT
27826: IFFALSE 27830
// exit ;
27828: GO 27856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27830: LD_VAR 0 1
27834: PUSH
27835: LD_INT 1
27837: PPUSH
27838: LD_VAR 0 1
27842: PPUSH
27843: CALL_OW 12
27847: ARRAY
27848: PPUSH
27849: LD_INT 1
27851: PPUSH
27852: CALL_OW 234
// end ;
27856: PPOPN 1
27858: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27859: LD_EXP 66
27863: PUSH
27864: LD_EXP 108
27868: AND
27869: IFFALSE 28010
27871: GO 27873
27873: DISABLE
27874: LD_INT 0
27876: PPUSH
27877: PPUSH
27878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27879: LD_ADDR_VAR 0 3
27883: PUSH
27884: LD_INT 22
27886: PUSH
27887: LD_OWVAR 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 25
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PPUSH
27910: CALL_OW 69
27914: ST_TO_ADDR
// if not tmp then
27915: LD_VAR 0 3
27919: NOT
27920: IFFALSE 27924
// exit ;
27922: GO 28010
// un := tmp [ rand ( 1 , tmp ) ] ;
27924: LD_ADDR_VAR 0 2
27928: PUSH
27929: LD_VAR 0 3
27933: PUSH
27934: LD_INT 1
27936: PPUSH
27937: LD_VAR 0 3
27941: PPUSH
27942: CALL_OW 12
27946: ARRAY
27947: ST_TO_ADDR
// if Crawls ( un ) then
27948: LD_VAR 0 2
27952: PPUSH
27953: CALL_OW 318
27957: IFFALSE 27968
// ComWalk ( un ) ;
27959: LD_VAR 0 2
27963: PPUSH
27964: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27968: LD_VAR 0 2
27972: PPUSH
27973: LD_INT 9
27975: PPUSH
27976: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27980: LD_INT 28
27982: PPUSH
27983: LD_OWVAR 2
27987: PPUSH
27988: LD_INT 2
27990: PPUSH
27991: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27995: LD_INT 29
27997: PPUSH
27998: LD_OWVAR 2
28002: PPUSH
28003: LD_INT 2
28005: PPUSH
28006: CALL_OW 322
// end ;
28010: PPOPN 3
28012: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28013: LD_EXP 66
28017: PUSH
28018: LD_EXP 109
28022: AND
28023: IFFALSE 28134
28025: GO 28027
28027: DISABLE
28028: LD_INT 0
28030: PPUSH
28031: PPUSH
28032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28033: LD_ADDR_VAR 0 3
28037: PUSH
28038: LD_INT 22
28040: PUSH
28041: LD_OWVAR 2
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 25
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: CALL_OW 69
28068: ST_TO_ADDR
// if not tmp then
28069: LD_VAR 0 3
28073: NOT
28074: IFFALSE 28078
// exit ;
28076: GO 28134
// un := tmp [ rand ( 1 , tmp ) ] ;
28078: LD_ADDR_VAR 0 2
28082: PUSH
28083: LD_VAR 0 3
28087: PUSH
28088: LD_INT 1
28090: PPUSH
28091: LD_VAR 0 3
28095: PPUSH
28096: CALL_OW 12
28100: ARRAY
28101: ST_TO_ADDR
// if Crawls ( un ) then
28102: LD_VAR 0 2
28106: PPUSH
28107: CALL_OW 318
28111: IFFALSE 28122
// ComWalk ( un ) ;
28113: LD_VAR 0 2
28117: PPUSH
28118: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28122: LD_VAR 0 2
28126: PPUSH
28127: LD_INT 8
28129: PPUSH
28130: CALL_OW 336
// end ;
28134: PPOPN 3
28136: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28137: LD_EXP 66
28141: PUSH
28142: LD_EXP 110
28146: AND
28147: IFFALSE 28291
28149: GO 28151
28151: DISABLE
28152: LD_INT 0
28154: PPUSH
28155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28156: LD_ADDR_VAR 0 2
28160: PUSH
28161: LD_INT 22
28163: PUSH
28164: LD_OWVAR 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 21
28175: PUSH
28176: LD_INT 2
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: LD_INT 34
28188: PUSH
28189: LD_INT 12
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 34
28198: PUSH
28199: LD_INT 51
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 34
28208: PUSH
28209: LD_INT 32
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: PPUSH
28227: CALL_OW 69
28231: ST_TO_ADDR
// if not tmp then
28232: LD_VAR 0 2
28236: NOT
28237: IFFALSE 28241
// exit ;
28239: GO 28291
// for i in tmp do
28241: LD_ADDR_VAR 0 1
28245: PUSH
28246: LD_VAR 0 2
28250: PUSH
28251: FOR_IN
28252: IFFALSE 28289
// if GetCargo ( i , mat_artifact ) = 0 then
28254: LD_VAR 0 1
28258: PPUSH
28259: LD_INT 4
28261: PPUSH
28262: CALL_OW 289
28266: PUSH
28267: LD_INT 0
28269: EQUAL
28270: IFFALSE 28287
// SetCargo ( i , mat_siberit , 100 ) ;
28272: LD_VAR 0 1
28276: PPUSH
28277: LD_INT 3
28279: PPUSH
28280: LD_INT 100
28282: PPUSH
28283: CALL_OW 290
28287: GO 28251
28289: POP
28290: POP
// end ;
28291: PPOPN 2
28293: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28294: LD_EXP 66
28298: PUSH
28299: LD_EXP 111
28303: AND
28304: IFFALSE 28487
28306: GO 28308
28308: DISABLE
28309: LD_INT 0
28311: PPUSH
28312: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28313: LD_ADDR_VAR 0 2
28317: PUSH
28318: LD_INT 22
28320: PUSH
28321: LD_OWVAR 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PPUSH
28330: CALL_OW 69
28334: ST_TO_ADDR
// if not tmp then
28335: LD_VAR 0 2
28339: NOT
28340: IFFALSE 28344
// exit ;
28342: GO 28487
// for i := 1 to 2 do
28344: LD_ADDR_VAR 0 1
28348: PUSH
28349: DOUBLE
28350: LD_INT 1
28352: DEC
28353: ST_TO_ADDR
28354: LD_INT 2
28356: PUSH
28357: FOR_TO
28358: IFFALSE 28485
// begin uc_side := your_side ;
28360: LD_ADDR_OWVAR 20
28364: PUSH
28365: LD_OWVAR 2
28369: ST_TO_ADDR
// uc_nation := nation_american ;
28370: LD_ADDR_OWVAR 21
28374: PUSH
28375: LD_INT 1
28377: ST_TO_ADDR
// vc_chassis := us_morphling ;
28378: LD_ADDR_OWVAR 37
28382: PUSH
28383: LD_INT 5
28385: ST_TO_ADDR
// vc_engine := engine_siberite ;
28386: LD_ADDR_OWVAR 39
28390: PUSH
28391: LD_INT 3
28393: ST_TO_ADDR
// vc_control := control_computer ;
28394: LD_ADDR_OWVAR 38
28398: PUSH
28399: LD_INT 3
28401: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28402: LD_ADDR_OWVAR 40
28406: PUSH
28407: LD_INT 10
28409: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28410: LD_VAR 0 2
28414: PUSH
28415: LD_INT 1
28417: ARRAY
28418: PPUSH
28419: CALL_OW 310
28423: NOT
28424: IFFALSE 28471
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28426: CALL_OW 45
28430: PPUSH
28431: LD_VAR 0 2
28435: PUSH
28436: LD_INT 1
28438: ARRAY
28439: PPUSH
28440: CALL_OW 250
28444: PPUSH
28445: LD_VAR 0 2
28449: PUSH
28450: LD_INT 1
28452: ARRAY
28453: PPUSH
28454: CALL_OW 251
28458: PPUSH
28459: LD_INT 12
28461: PPUSH
28462: LD_INT 1
28464: PPUSH
28465: CALL_OW 50
28469: GO 28483
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28471: CALL_OW 45
28475: PPUSH
28476: LD_INT 1
28478: PPUSH
28479: CALL_OW 51
// end ;
28483: GO 28357
28485: POP
28486: POP
// end ;
28487: PPOPN 2
28489: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28490: LD_EXP 66
28494: PUSH
28495: LD_EXP 112
28499: AND
28500: IFFALSE 28722
28502: GO 28504
28504: DISABLE
28505: LD_INT 0
28507: PPUSH
28508: PPUSH
28509: PPUSH
28510: PPUSH
28511: PPUSH
28512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28513: LD_ADDR_VAR 0 6
28517: PUSH
28518: LD_INT 22
28520: PUSH
28521: LD_OWVAR 2
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 21
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 3
28542: PUSH
28543: LD_INT 23
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: PPUSH
28562: CALL_OW 69
28566: ST_TO_ADDR
// if not tmp then
28567: LD_VAR 0 6
28571: NOT
28572: IFFALSE 28576
// exit ;
28574: GO 28722
// s1 := rand ( 1 , 4 ) ;
28576: LD_ADDR_VAR 0 2
28580: PUSH
28581: LD_INT 1
28583: PPUSH
28584: LD_INT 4
28586: PPUSH
28587: CALL_OW 12
28591: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28592: LD_ADDR_VAR 0 4
28596: PUSH
28597: LD_VAR 0 6
28601: PUSH
28602: LD_INT 1
28604: ARRAY
28605: PPUSH
28606: LD_VAR 0 2
28610: PPUSH
28611: CALL_OW 259
28615: ST_TO_ADDR
// if s1 = 1 then
28616: LD_VAR 0 2
28620: PUSH
28621: LD_INT 1
28623: EQUAL
28624: IFFALSE 28644
// s2 := rand ( 2 , 4 ) else
28626: LD_ADDR_VAR 0 3
28630: PUSH
28631: LD_INT 2
28633: PPUSH
28634: LD_INT 4
28636: PPUSH
28637: CALL_OW 12
28641: ST_TO_ADDR
28642: GO 28652
// s2 := 1 ;
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_INT 1
28651: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28652: LD_ADDR_VAR 0 5
28656: PUSH
28657: LD_VAR 0 6
28661: PUSH
28662: LD_INT 1
28664: ARRAY
28665: PPUSH
28666: LD_VAR 0 3
28670: PPUSH
28671: CALL_OW 259
28675: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28676: LD_VAR 0 6
28680: PUSH
28681: LD_INT 1
28683: ARRAY
28684: PPUSH
28685: LD_VAR 0 2
28689: PPUSH
28690: LD_VAR 0 5
28694: PPUSH
28695: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28699: LD_VAR 0 6
28703: PUSH
28704: LD_INT 1
28706: ARRAY
28707: PPUSH
28708: LD_VAR 0 3
28712: PPUSH
28713: LD_VAR 0 4
28717: PPUSH
28718: CALL_OW 237
// end ;
28722: PPOPN 6
28724: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28725: LD_EXP 66
28729: PUSH
28730: LD_EXP 113
28734: AND
28735: IFFALSE 28814
28737: GO 28739
28739: DISABLE
28740: LD_INT 0
28742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28743: LD_ADDR_VAR 0 1
28747: PUSH
28748: LD_INT 22
28750: PUSH
28751: LD_OWVAR 2
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 30
28762: PUSH
28763: LD_INT 3
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 69
28778: ST_TO_ADDR
// if not tmp then
28779: LD_VAR 0 1
28783: NOT
28784: IFFALSE 28788
// exit ;
28786: GO 28814
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28788: LD_VAR 0 1
28792: PUSH
28793: LD_INT 1
28795: PPUSH
28796: LD_VAR 0 1
28800: PPUSH
28801: CALL_OW 12
28805: ARRAY
28806: PPUSH
28807: LD_INT 1
28809: PPUSH
28810: CALL_OW 234
// end ;
28814: PPOPN 1
28816: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28817: LD_EXP 66
28821: PUSH
28822: LD_EXP 114
28826: AND
28827: IFFALSE 28939
28829: GO 28831
28831: DISABLE
28832: LD_INT 0
28834: PPUSH
28835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28836: LD_ADDR_VAR 0 2
28840: PUSH
28841: LD_INT 22
28843: PUSH
28844: LD_OWVAR 2
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 2
28855: PUSH
28856: LD_INT 30
28858: PUSH
28859: LD_INT 27
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 30
28868: PUSH
28869: LD_INT 26
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 30
28878: PUSH
28879: LD_INT 28
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PPUSH
28896: CALL_OW 69
28900: ST_TO_ADDR
// if not tmp then
28901: LD_VAR 0 2
28905: NOT
28906: IFFALSE 28910
// exit ;
28908: GO 28939
// for i in tmp do
28910: LD_ADDR_VAR 0 1
28914: PUSH
28915: LD_VAR 0 2
28919: PUSH
28920: FOR_IN
28921: IFFALSE 28937
// SetLives ( i , 1 ) ;
28923: LD_VAR 0 1
28927: PPUSH
28928: LD_INT 1
28930: PPUSH
28931: CALL_OW 234
28935: GO 28920
28937: POP
28938: POP
// end ;
28939: PPOPN 2
28941: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28942: LD_EXP 66
28946: PUSH
28947: LD_EXP 115
28951: AND
28952: IFFALSE 29226
28954: GO 28956
28956: DISABLE
28957: LD_INT 0
28959: PPUSH
28960: PPUSH
28961: PPUSH
// begin i := rand ( 1 , 7 ) ;
28962: LD_ADDR_VAR 0 1
28966: PUSH
28967: LD_INT 1
28969: PPUSH
28970: LD_INT 7
28972: PPUSH
28973: CALL_OW 12
28977: ST_TO_ADDR
// case i of 1 :
28978: LD_VAR 0 1
28982: PUSH
28983: LD_INT 1
28985: DOUBLE
28986: EQUAL
28987: IFTRUE 28991
28989: GO 29001
28991: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28992: LD_STRING earthquake(getX(game), 0, 32)
28994: PPUSH
28995: CALL_OW 559
28999: GO 29226
29001: LD_INT 2
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29023
29009: POP
// begin ToLua ( displayStucuk(); ) ;
29010: LD_STRING displayStucuk();
29012: PPUSH
29013: CALL_OW 559
// ResetFog ;
29017: CALL_OW 335
// end ; 3 :
29021: GO 29226
29023: LD_INT 3
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29031
29029: GO 29135
29031: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29032: LD_ADDR_VAR 0 2
29036: PUSH
29037: LD_INT 22
29039: PUSH
29040: LD_OWVAR 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 25
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PPUSH
29063: CALL_OW 69
29067: ST_TO_ADDR
// if not tmp then
29068: LD_VAR 0 2
29072: NOT
29073: IFFALSE 29077
// exit ;
29075: GO 29226
// un := tmp [ rand ( 1 , tmp ) ] ;
29077: LD_ADDR_VAR 0 3
29081: PUSH
29082: LD_VAR 0 2
29086: PUSH
29087: LD_INT 1
29089: PPUSH
29090: LD_VAR 0 2
29094: PPUSH
29095: CALL_OW 12
29099: ARRAY
29100: ST_TO_ADDR
// if Crawls ( un ) then
29101: LD_VAR 0 3
29105: PPUSH
29106: CALL_OW 318
29110: IFFALSE 29121
// ComWalk ( un ) ;
29112: LD_VAR 0 3
29116: PPUSH
29117: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29121: LD_VAR 0 3
29125: PPUSH
29126: LD_INT 8
29128: PPUSH
29129: CALL_OW 336
// end ; 4 :
29133: GO 29226
29135: LD_INT 4
29137: DOUBLE
29138: EQUAL
29139: IFTRUE 29143
29141: GO 29204
29143: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29144: LD_ADDR_VAR 0 2
29148: PUSH
29149: LD_INT 22
29151: PUSH
29152: LD_OWVAR 2
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 30
29163: PUSH
29164: LD_INT 29
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PPUSH
29175: CALL_OW 69
29179: ST_TO_ADDR
// if not tmp then
29180: LD_VAR 0 2
29184: NOT
29185: IFFALSE 29189
// exit ;
29187: GO 29226
// DestroyUnit ( tmp [ 1 ] ) ;
29189: LD_VAR 0 2
29193: PUSH
29194: LD_INT 1
29196: ARRAY
29197: PPUSH
29198: CALL_OW 65
// end ; 5 .. 7 :
29202: GO 29226
29204: LD_INT 5
29206: DOUBLE
29207: GREATEREQUAL
29208: IFFALSE 29216
29210: LD_INT 7
29212: DOUBLE
29213: LESSEQUAL
29214: IFTRUE 29218
29216: GO 29225
29218: POP
// StreamSibBomb ; end ;
29219: CALL 25476 0 0
29223: GO 29226
29225: POP
// end ;
29226: PPOPN 3
29228: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29229: LD_EXP 66
29233: PUSH
29234: LD_EXP 116
29238: AND
29239: IFFALSE 29395
29241: GO 29243
29243: DISABLE
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
29248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29249: LD_ADDR_VAR 0 2
29253: PUSH
29254: LD_INT 81
29256: PUSH
29257: LD_OWVAR 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: LD_INT 21
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 21
29281: PUSH
29282: LD_INT 2
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PPUSH
29298: CALL_OW 69
29302: ST_TO_ADDR
// if not tmp then
29303: LD_VAR 0 2
29307: NOT
29308: IFFALSE 29312
// exit ;
29310: GO 29395
// p := 0 ;
29312: LD_ADDR_VAR 0 3
29316: PUSH
29317: LD_INT 0
29319: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29320: LD_INT 35
29322: PPUSH
29323: CALL_OW 67
// p := p + 1 ;
29327: LD_ADDR_VAR 0 3
29331: PUSH
29332: LD_VAR 0 3
29336: PUSH
29337: LD_INT 1
29339: PLUS
29340: ST_TO_ADDR
// for i in tmp do
29341: LD_ADDR_VAR 0 1
29345: PUSH
29346: LD_VAR 0 2
29350: PUSH
29351: FOR_IN
29352: IFFALSE 29383
// if GetLives ( i ) < 1000 then
29354: LD_VAR 0 1
29358: PPUSH
29359: CALL_OW 256
29363: PUSH
29364: LD_INT 1000
29366: LESS
29367: IFFALSE 29381
// SetLives ( i , 1000 ) ;
29369: LD_VAR 0 1
29373: PPUSH
29374: LD_INT 1000
29376: PPUSH
29377: CALL_OW 234
29381: GO 29351
29383: POP
29384: POP
// until p > 20 ;
29385: LD_VAR 0 3
29389: PUSH
29390: LD_INT 20
29392: GREATER
29393: IFFALSE 29320
// end ;
29395: PPOPN 3
29397: END
// every 0 0$1 trigger StreamModeActive and sTime do
29398: LD_EXP 66
29402: PUSH
29403: LD_EXP 117
29407: AND
29408: IFFALSE 29443
29410: GO 29412
29412: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29413: LD_INT 28
29415: PPUSH
29416: LD_OWVAR 2
29420: PPUSH
29421: LD_INT 2
29423: PPUSH
29424: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29428: LD_INT 30
29430: PPUSH
29431: LD_OWVAR 2
29435: PPUSH
29436: LD_INT 2
29438: PPUSH
29439: CALL_OW 322
// end ;
29443: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29444: LD_EXP 66
29448: PUSH
29449: LD_EXP 118
29453: AND
29454: IFFALSE 29575
29456: GO 29458
29458: DISABLE
29459: LD_INT 0
29461: PPUSH
29462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29463: LD_ADDR_VAR 0 2
29467: PUSH
29468: LD_INT 22
29470: PUSH
29471: LD_OWVAR 2
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 21
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 3
29492: PUSH
29493: LD_INT 23
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: PPUSH
29512: CALL_OW 69
29516: ST_TO_ADDR
// if not tmp then
29517: LD_VAR 0 2
29521: NOT
29522: IFFALSE 29526
// exit ;
29524: GO 29575
// for i in tmp do
29526: LD_ADDR_VAR 0 1
29530: PUSH
29531: LD_VAR 0 2
29535: PUSH
29536: FOR_IN
29537: IFFALSE 29573
// begin if Crawls ( i ) then
29539: LD_VAR 0 1
29543: PPUSH
29544: CALL_OW 318
29548: IFFALSE 29559
// ComWalk ( i ) ;
29550: LD_VAR 0 1
29554: PPUSH
29555: CALL_OW 138
// SetClass ( i , 2 ) ;
29559: LD_VAR 0 1
29563: PPUSH
29564: LD_INT 2
29566: PPUSH
29567: CALL_OW 336
// end ;
29571: GO 29536
29573: POP
29574: POP
// end ;
29575: PPOPN 2
29577: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29578: LD_EXP 66
29582: PUSH
29583: LD_EXP 119
29587: AND
29588: IFFALSE 29869
29590: GO 29592
29592: DISABLE
29593: LD_INT 0
29595: PPUSH
29596: PPUSH
29597: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29598: LD_OWVAR 2
29602: PPUSH
29603: LD_INT 9
29605: PPUSH
29606: LD_INT 1
29608: PPUSH
29609: LD_INT 1
29611: PPUSH
29612: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29616: LD_INT 9
29618: PPUSH
29619: LD_OWVAR 2
29623: PPUSH
29624: CALL_OW 343
// uc_side := 9 ;
29628: LD_ADDR_OWVAR 20
29632: PUSH
29633: LD_INT 9
29635: ST_TO_ADDR
// uc_nation := 2 ;
29636: LD_ADDR_OWVAR 21
29640: PUSH
29641: LD_INT 2
29643: ST_TO_ADDR
// hc_name := Dark Warrior ;
29644: LD_ADDR_OWVAR 26
29648: PUSH
29649: LD_STRING Dark Warrior
29651: ST_TO_ADDR
// hc_gallery :=  ;
29652: LD_ADDR_OWVAR 33
29656: PUSH
29657: LD_STRING 
29659: ST_TO_ADDR
// hc_noskilllimit := true ;
29660: LD_ADDR_OWVAR 76
29664: PUSH
29665: LD_INT 1
29667: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29668: LD_ADDR_OWVAR 31
29672: PUSH
29673: LD_INT 30
29675: PUSH
29676: LD_INT 30
29678: PUSH
29679: LD_INT 30
29681: PUSH
29682: LD_INT 30
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// un := CreateHuman ;
29691: LD_ADDR_VAR 0 3
29695: PUSH
29696: CALL_OW 44
29700: ST_TO_ADDR
// hc_noskilllimit := false ;
29701: LD_ADDR_OWVAR 76
29705: PUSH
29706: LD_INT 0
29708: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29709: LD_VAR 0 3
29713: PPUSH
29714: LD_INT 1
29716: PPUSH
29717: CALL_OW 51
// p := 0 ;
29721: LD_ADDR_VAR 0 2
29725: PUSH
29726: LD_INT 0
29728: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29729: LD_INT 35
29731: PPUSH
29732: CALL_OW 67
// p := p + 1 ;
29736: LD_ADDR_VAR 0 2
29740: PUSH
29741: LD_VAR 0 2
29745: PUSH
29746: LD_INT 1
29748: PLUS
29749: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29750: LD_VAR 0 3
29754: PPUSH
29755: CALL_OW 256
29759: PUSH
29760: LD_INT 1000
29762: LESS
29763: IFFALSE 29777
// SetLives ( un , 1000 ) ;
29765: LD_VAR 0 3
29769: PPUSH
29770: LD_INT 1000
29772: PPUSH
29773: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29777: LD_VAR 0 3
29781: PPUSH
29782: LD_INT 81
29784: PUSH
29785: LD_OWVAR 2
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 91
29796: PUSH
29797: LD_VAR 0 3
29801: PUSH
29802: LD_INT 30
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PPUSH
29814: CALL_OW 69
29818: PPUSH
29819: LD_VAR 0 3
29823: PPUSH
29824: CALL_OW 74
29828: PPUSH
29829: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29833: LD_VAR 0 2
29837: PUSH
29838: LD_INT 60
29840: GREATER
29841: PUSH
29842: LD_VAR 0 3
29846: PPUSH
29847: CALL_OW 301
29851: OR
29852: IFFALSE 29729
// if un then
29854: LD_VAR 0 3
29858: IFFALSE 29869
// RemoveUnit ( un ) ;
29860: LD_VAR 0 3
29864: PPUSH
29865: CALL_OW 64
// end ;
29869: PPOPN 3
29871: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29872: LD_INT 0
29874: PPUSH
29875: PPUSH
29876: PPUSH
29877: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29878: LD_ADDR_VAR 0 4
29882: PUSH
29883: LD_INT 22
29885: PUSH
29886: LD_OWVAR 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 30
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 30
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PPUSH
29927: CALL_OW 69
29931: ST_TO_ADDR
// if not tmp then
29932: LD_VAR 0 4
29936: NOT
29937: IFFALSE 29941
// exit ;
29939: GO 30000
// for i in tmp do
29941: LD_ADDR_VAR 0 2
29945: PUSH
29946: LD_VAR 0 4
29950: PUSH
29951: FOR_IN
29952: IFFALSE 29998
// for j = 1 to 3 do
29954: LD_ADDR_VAR 0 3
29958: PUSH
29959: DOUBLE
29960: LD_INT 1
29962: DEC
29963: ST_TO_ADDR
29964: LD_INT 3
29966: PUSH
29967: FOR_TO
29968: IFFALSE 29994
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29970: LD_VAR 0 2
29974: PPUSH
29975: CALL_OW 274
29979: PPUSH
29980: LD_VAR 0 3
29984: PPUSH
29985: LD_INT 99999
29987: PPUSH
29988: CALL_OW 277
29992: GO 29967
29994: POP
29995: POP
29996: GO 29951
29998: POP
29999: POP
// end ;
30000: LD_VAR 0 1
30004: RET
// export function hHackSetLevel10 ; var i , j ; begin
30005: LD_INT 0
30007: PPUSH
30008: PPUSH
30009: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30010: LD_ADDR_VAR 0 2
30014: PUSH
30015: LD_INT 21
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PPUSH
30025: CALL_OW 69
30029: PUSH
30030: FOR_IN
30031: IFFALSE 30083
// if IsSelected ( i ) then
30033: LD_VAR 0 2
30037: PPUSH
30038: CALL_OW 306
30042: IFFALSE 30081
// begin for j := 1 to 4 do
30044: LD_ADDR_VAR 0 3
30048: PUSH
30049: DOUBLE
30050: LD_INT 1
30052: DEC
30053: ST_TO_ADDR
30054: LD_INT 4
30056: PUSH
30057: FOR_TO
30058: IFFALSE 30079
// SetSkill ( i , j , 10 ) ;
30060: LD_VAR 0 2
30064: PPUSH
30065: LD_VAR 0 3
30069: PPUSH
30070: LD_INT 10
30072: PPUSH
30073: CALL_OW 237
30077: GO 30057
30079: POP
30080: POP
// end ;
30081: GO 30030
30083: POP
30084: POP
// end ;
30085: LD_VAR 0 1
30089: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30090: LD_INT 0
30092: PPUSH
30093: PPUSH
30094: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30095: LD_ADDR_VAR 0 2
30099: PUSH
30100: LD_INT 22
30102: PUSH
30103: LD_OWVAR 2
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 21
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PPUSH
30126: CALL_OW 69
30130: PUSH
30131: FOR_IN
30132: IFFALSE 30173
// begin for j := 1 to 4 do
30134: LD_ADDR_VAR 0 3
30138: PUSH
30139: DOUBLE
30140: LD_INT 1
30142: DEC
30143: ST_TO_ADDR
30144: LD_INT 4
30146: PUSH
30147: FOR_TO
30148: IFFALSE 30169
// SetSkill ( i , j , 10 ) ;
30150: LD_VAR 0 2
30154: PPUSH
30155: LD_VAR 0 3
30159: PPUSH
30160: LD_INT 10
30162: PPUSH
30163: CALL_OW 237
30167: GO 30147
30169: POP
30170: POP
// end ;
30171: GO 30131
30173: POP
30174: POP
// end ;
30175: LD_VAR 0 1
30179: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
30180: LD_INT 0
30182: PPUSH
// uc_side := your_side ;
30183: LD_ADDR_OWVAR 20
30187: PUSH
30188: LD_OWVAR 2
30192: ST_TO_ADDR
// uc_nation := nation ;
30193: LD_ADDR_OWVAR 21
30197: PUSH
30198: LD_VAR 0 1
30202: ST_TO_ADDR
// InitHc ;
30203: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30207: LD_INT 0
30209: PPUSH
30210: LD_VAR 0 2
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30224: CALL_OW 44
30228: PPUSH
30229: LD_INT 1
30231: PPUSH
30232: CALL_OW 51
// end ;
30236: LD_VAR 0 4
30240: RET
// export function hHackSpawnVehicle ; begin
30241: LD_INT 0
30243: PPUSH
// uc_side := your_side ;
30244: LD_ADDR_OWVAR 20
30248: PUSH
30249: LD_OWVAR 2
30253: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
30254: LD_ADDR_OWVAR 21
30258: PUSH
30259: LD_INT 1
30261: PPUSH
30262: LD_INT 3
30264: PPUSH
30265: CALL_OW 12
30269: ST_TO_ADDR
// InitVc ;
30270: CALL_OW 20
// case uc_nation of 1 :
30274: LD_OWVAR 21
30278: PUSH
30279: LD_INT 1
30281: DOUBLE
30282: EQUAL
30283: IFTRUE 30287
30285: GO 30431
30287: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
30288: LD_ADDR_OWVAR 37
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: LD_INT 4
30304: PUSH
30305: LD_INT 5
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: PPUSH
30318: LD_INT 5
30320: PPUSH
30321: CALL_OW 12
30325: ARRAY
30326: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30327: LD_ADDR_OWVAR 39
30331: PUSH
30332: LD_INT 1
30334: PPUSH
30335: LD_INT 3
30337: PPUSH
30338: CALL_OW 12
30342: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
30343: LD_ADDR_OWVAR 38
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: PPUSH
30365: LD_INT 3
30367: PPUSH
30368: CALL_OW 12
30372: ARRAY
30373: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
30374: LD_ADDR_OWVAR 40
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 4
30384: PUSH
30385: LD_INT 5
30387: PUSH
30388: LD_INT 3
30390: PUSH
30391: LD_INT 7
30393: PUSH
30394: LD_INT 8
30396: PUSH
30397: LD_INT 9
30399: PUSH
30400: LD_INT 10
30402: PUSH
30403: LD_INT 6
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 1
30419: PPUSH
30420: LD_INT 9
30422: PPUSH
30423: CALL_OW 12
30427: ARRAY
30428: ST_TO_ADDR
// end ; 2 :
30429: GO 30696
30431: LD_INT 2
30433: DOUBLE
30434: EQUAL
30435: IFTRUE 30439
30437: GO 30563
30439: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
30440: LD_ADDR_OWVAR 37
30444: PUSH
30445: LD_INT 11
30447: PUSH
30448: LD_INT 12
30450: PUSH
30451: LD_INT 13
30453: PUSH
30454: LD_INT 14
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: PPUSH
30466: LD_INT 4
30468: PPUSH
30469: CALL_OW 12
30473: ARRAY
30474: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30475: LD_ADDR_OWVAR 39
30479: PUSH
30480: LD_INT 1
30482: PPUSH
30483: LD_INT 3
30485: PPUSH
30486: CALL_OW 12
30490: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
30491: LD_ADDR_OWVAR 38
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: LD_INT 2
30501: PUSH
30502: LD_INT 5
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: PPUSH
30513: LD_INT 3
30515: PPUSH
30516: CALL_OW 12
30520: ARRAY
30521: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
30522: LD_ADDR_OWVAR 40
30526: PUSH
30527: LD_INT 24
30529: PUSH
30530: LD_INT 26
30532: PUSH
30533: LD_INT 27
30535: PUSH
30536: LD_INT 28
30538: PUSH
30539: LD_INT 29
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: PPUSH
30552: LD_INT 5
30554: PPUSH
30555: CALL_OW 12
30559: ARRAY
30560: ST_TO_ADDR
// end ; 3 :
30561: GO 30696
30563: LD_INT 3
30565: DOUBLE
30566: EQUAL
30567: IFTRUE 30571
30569: GO 30695
30571: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
30572: LD_ADDR_OWVAR 37
30576: PUSH
30577: LD_INT 21
30579: PUSH
30580: LD_INT 23
30582: PUSH
30583: LD_INT 22
30585: PUSH
30586: LD_INT 24
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 1
30597: PPUSH
30598: LD_INT 4
30600: PPUSH
30601: CALL_OW 12
30605: ARRAY
30606: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30607: LD_ADDR_OWVAR 39
30611: PUSH
30612: LD_INT 1
30614: PPUSH
30615: LD_INT 3
30617: PPUSH
30618: CALL_OW 12
30622: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
30623: LD_ADDR_OWVAR 38
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: LD_INT 3
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: PPUSH
30641: LD_INT 2
30643: PPUSH
30644: CALL_OW 12
30648: ARRAY
30649: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
30650: LD_ADDR_OWVAR 40
30654: PUSH
30655: LD_INT 42
30657: PUSH
30658: LD_INT 43
30660: PUSH
30661: LD_INT 44
30663: PUSH
30664: LD_INT 46
30666: PUSH
30667: LD_INT 48
30669: PUSH
30670: LD_INT 47
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: PPUSH
30684: LD_INT 6
30686: PPUSH
30687: CALL_OW 12
30691: ARRAY
30692: ST_TO_ADDR
// end ; end ;
30693: GO 30696
30695: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30696: CALL_OW 45
30700: PPUSH
30701: LD_INT 1
30703: PPUSH
30704: CALL_OW 51
// end ;
30708: LD_VAR 0 1
30712: RET
// export hInvincible ; every 1 do
30713: GO 30715
30715: DISABLE
// hInvincible := [ ] ;
30716: LD_ADDR_EXP 120
30720: PUSH
30721: EMPTY
30722: ST_TO_ADDR
30723: END
// every 10 do var i ;
30724: GO 30726
30726: DISABLE
30727: LD_INT 0
30729: PPUSH
// begin enable ;
30730: ENABLE
// if not hInvincible then
30731: LD_EXP 120
30735: NOT
30736: IFFALSE 30740
// exit ;
30738: GO 30784
// for i in hInvincible do
30740: LD_ADDR_VAR 0 1
30744: PUSH
30745: LD_EXP 120
30749: PUSH
30750: FOR_IN
30751: IFFALSE 30782
// if GetLives ( i ) < 1000 then
30753: LD_VAR 0 1
30757: PPUSH
30758: CALL_OW 256
30762: PUSH
30763: LD_INT 1000
30765: LESS
30766: IFFALSE 30780
// SetLives ( i , 1000 ) ;
30768: LD_VAR 0 1
30772: PPUSH
30773: LD_INT 1000
30775: PPUSH
30776: CALL_OW 234
30780: GO 30750
30782: POP
30783: POP
// end ;
30784: PPOPN 1
30786: END
// export function hHackInvincible ; var i ; begin
30787: LD_INT 0
30789: PPUSH
30790: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30791: LD_ADDR_VAR 0 2
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: LD_INT 21
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 21
30811: PUSH
30812: LD_INT 2
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: PPUSH
30824: CALL_OW 69
30828: PUSH
30829: FOR_IN
30830: IFFALSE 30891
// if IsSelected ( i ) then
30832: LD_VAR 0 2
30836: PPUSH
30837: CALL_OW 306
30841: IFFALSE 30889
// begin if i in hInvincible then
30843: LD_VAR 0 2
30847: PUSH
30848: LD_EXP 120
30852: IN
30853: IFFALSE 30873
// hInvincible := hInvincible diff i else
30855: LD_ADDR_EXP 120
30859: PUSH
30860: LD_EXP 120
30864: PUSH
30865: LD_VAR 0 2
30869: DIFF
30870: ST_TO_ADDR
30871: GO 30889
// hInvincible := hInvincible union i ;
30873: LD_ADDR_EXP 120
30877: PUSH
30878: LD_EXP 120
30882: PUSH
30883: LD_VAR 0 2
30887: UNION
30888: ST_TO_ADDR
// end ;
30889: GO 30829
30891: POP
30892: POP
// end ;
30893: LD_VAR 0 1
30897: RET
// export function hHackInvisible ; var i , j ; begin
30898: LD_INT 0
30900: PPUSH
30901: PPUSH
30902: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30903: LD_ADDR_VAR 0 2
30907: PUSH
30908: LD_INT 21
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PPUSH
30918: CALL_OW 69
30922: PUSH
30923: FOR_IN
30924: IFFALSE 30948
// if IsSelected ( i ) then
30926: LD_VAR 0 2
30930: PPUSH
30931: CALL_OW 306
30935: IFFALSE 30946
// ComForceInvisible ( i ) ;
30937: LD_VAR 0 2
30941: PPUSH
30942: CALL_OW 496
30946: GO 30923
30948: POP
30949: POP
// end ;
30950: LD_VAR 0 1
30954: RET
// export function hHackChangeYourSide ; begin
30955: LD_INT 0
30957: PPUSH
// if your_side = 8 then
30958: LD_OWVAR 2
30962: PUSH
30963: LD_INT 8
30965: EQUAL
30966: IFFALSE 30978
// your_side := 0 else
30968: LD_ADDR_OWVAR 2
30972: PUSH
30973: LD_INT 0
30975: ST_TO_ADDR
30976: GO 30992
// your_side := your_side + 1 ;
30978: LD_ADDR_OWVAR 2
30982: PUSH
30983: LD_OWVAR 2
30987: PUSH
30988: LD_INT 1
30990: PLUS
30991: ST_TO_ADDR
// end ;
30992: LD_VAR 0 1
30996: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30997: LD_INT 0
30999: PPUSH
31000: PPUSH
31001: PPUSH
// for i in all_units do
31002: LD_ADDR_VAR 0 2
31006: PUSH
31007: LD_OWVAR 3
31011: PUSH
31012: FOR_IN
31013: IFFALSE 31091
// if IsSelected ( i ) then
31015: LD_VAR 0 2
31019: PPUSH
31020: CALL_OW 306
31024: IFFALSE 31089
// begin j := GetSide ( i ) ;
31026: LD_ADDR_VAR 0 3
31030: PUSH
31031: LD_VAR 0 2
31035: PPUSH
31036: CALL_OW 255
31040: ST_TO_ADDR
// if j = 8 then
31041: LD_VAR 0 3
31045: PUSH
31046: LD_INT 8
31048: EQUAL
31049: IFFALSE 31061
// j := 0 else
31051: LD_ADDR_VAR 0 3
31055: PUSH
31056: LD_INT 0
31058: ST_TO_ADDR
31059: GO 31075
// j := j + 1 ;
31061: LD_ADDR_VAR 0 3
31065: PUSH
31066: LD_VAR 0 3
31070: PUSH
31071: LD_INT 1
31073: PLUS
31074: ST_TO_ADDR
// SetSide ( i , j ) ;
31075: LD_VAR 0 2
31079: PPUSH
31080: LD_VAR 0 3
31084: PPUSH
31085: CALL_OW 235
// end ;
31089: GO 31012
31091: POP
31092: POP
// end ;
31093: LD_VAR 0 1
31097: RET
// export function hHackFog ; begin
31098: LD_INT 0
31100: PPUSH
// FogOff ( true ) ;
31101: LD_INT 1
31103: PPUSH
31104: CALL_OW 344
// end ;
31108: LD_VAR 0 1
31112: RET
// export function hHackApeman ; begin
31113: LD_INT 0
31115: PPUSH
// uc_side := your_side ;
31116: LD_ADDR_OWVAR 20
31120: PUSH
31121: LD_OWVAR 2
31125: ST_TO_ADDR
// uc_nation := 0 ;
31126: LD_ADDR_OWVAR 21
31130: PUSH
31131: LD_INT 0
31133: ST_TO_ADDR
// hc_name :=  ;
31134: LD_ADDR_OWVAR 26
31138: PUSH
31139: LD_STRING 
31141: ST_TO_ADDR
// hc_gallery :=  ;
31142: LD_ADDR_OWVAR 33
31146: PUSH
31147: LD_STRING 
31149: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
31150: LD_ADDR_OWVAR 31
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: ST_TO_ADDR
// hc_class := class_apeman ;
31173: LD_ADDR_OWVAR 28
31177: PUSH
31178: LD_INT 12
31180: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
31181: CALL_OW 44
31185: PPUSH
31186: LD_INT 1
31188: PPUSH
31189: CALL_OW 51
// end ;
31193: LD_VAR 0 1
31197: RET
// export function hHackBoom ; begin
31198: LD_INT 0
31200: PPUSH
// uc_side := your_side ;
31201: LD_ADDR_OWVAR 20
31205: PUSH
31206: LD_OWVAR 2
31210: ST_TO_ADDR
// uc_nation := 1 ;
31211: LD_ADDR_OWVAR 21
31215: PUSH
31216: LD_INT 1
31218: ST_TO_ADDR
// vc_chassis := us_morphling ;
31219: LD_ADDR_OWVAR 37
31223: PUSH
31224: LD_INT 5
31226: ST_TO_ADDR
// vc_engine := engine_siberite ;
31227: LD_ADDR_OWVAR 39
31231: PUSH
31232: LD_INT 3
31234: ST_TO_ADDR
// vc_control := control_computer ;
31235: LD_ADDR_OWVAR 38
31239: PUSH
31240: LD_INT 3
31242: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
31243: LD_ADDR_OWVAR 40
31247: PUSH
31248: LD_INT 8
31250: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31251: CALL_OW 45
31255: PPUSH
31256: LD_INT 1
31258: PPUSH
31259: CALL_OW 51
// end ;
31263: LD_VAR 0 1
31267: RET
