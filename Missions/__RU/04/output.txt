// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1519 0 0
// Nef_PrepareNature ;
 250: CALL 4421 0 0
// MissionIntro ;
 254: CALL 10430 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 , 4 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 , 0 ] [ Difficulty ] ;
 413: LD_ADDR_EXP 33
 417: PUSH
 418: LD_INT 2
 420: NEG
 421: PUSH
 422: LD_INT 1
 424: NEG
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 444: LD_ADDR_EXP 34
 448: PUSH
 449: LD_INT 135
 451: PUSH
 452: LD_INT 8
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 135
 461: PUSH
 462: LD_INT 4
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 134
 471: PUSH
 472: LD_INT 19
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 132
 481: PUSH
 482: LD_INT 26
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 128
 491: PUSH
 492: LD_INT 31
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 123
 501: PUSH
 502: LD_INT 37
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 118
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 112
 521: PUSH
 522: LD_INT 51
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 106
 531: PUSH
 532: LD_INT 57
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 99
 541: PUSH
 542: LD_INT 62
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 93
 551: PUSH
 552: LD_INT 67
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 86
 561: PUSH
 562: LD_INT 72
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 78
 571: PUSH
 572: LD_INT 75
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 71
 581: PUSH
 582: LD_INT 81
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 69
 591: PUSH
 592: LD_INT 88
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: LD_INT 71
 601: PUSH
 602: LD_INT 95
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 74
 611: PUSH
 612: LD_INT 103
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 80
 621: PUSH
 622: LD_INT 113
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 84
 631: PUSH
 632: LD_INT 121
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 89
 641: PUSH
 642: LD_INT 132
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 92
 651: PUSH
 652: LD_INT 142
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 93
 661: PUSH
 662: LD_INT 151
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PUSH
 669: LD_INT 91
 671: PUSH
 672: LD_INT 157
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 90
 681: PUSH
 682: LD_INT 163
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 93
 691: PUSH
 692: LD_INT 171
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 92
 701: PUSH
 702: LD_INT 177
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 737: LD_ADDR_EXP 35
 741: PUSH
 742: LD_INT 135
 744: PUSH
 745: LD_INT 8
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 135
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 134
 764: PUSH
 765: LD_INT 19
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 132
 774: PUSH
 775: LD_INT 26
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 128
 784: PUSH
 785: LD_INT 31
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 123
 794: PUSH
 795: LD_INT 37
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 118
 804: PUSH
 805: LD_INT 45
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 112
 814: PUSH
 815: LD_INT 51
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 106
 824: PUSH
 825: LD_INT 57
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 99
 834: PUSH
 835: LD_INT 62
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 104
 844: PUSH
 845: LD_INT 71
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 110
 854: PUSH
 855: LD_INT 78
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: LD_INT 119
 864: PUSH
 865: LD_INT 88
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 128
 874: PUSH
 875: LD_INT 97
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PUSH
 882: LD_INT 135
 884: PUSH
 885: LD_INT 106
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 141
 894: PUSH
 895: LD_INT 120
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 143
 904: PUSH
 905: LD_INT 132
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 143
 914: PUSH
 915: LD_INT 142
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PUSH
 922: LD_INT 140
 924: PUSH
 925: LD_INT 149
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 132
 934: PUSH
 935: LD_INT 153
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 125
 944: PUSH
 945: LD_INT 155
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 115
 954: PUSH
 955: LD_INT 154
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 105
 964: PUSH
 965: LD_INT 153
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 93
 974: PUSH
 975: LD_INT 151
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 91
 984: PUSH
 985: LD_INT 157
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 90
 994: PUSH
 995: LD_INT 163
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 93
1004: PUSH
1005: LD_INT 171
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 92
1014: PUSH
1015: LD_INT 177
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 , 25 ] [ Difficulty ] ;
1052: LD_ADDR_EXP 36
1056: PUSH
1057: LD_INT 40
1059: PUSH
1060: LD_INT 35
1062: PUSH
1063: LD_INT 30
1065: PUSH
1066: LD_INT 25
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_OWVAR 67
1079: ARRAY
1080: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1081: LD_ADDR_EXP 37
1085: PUSH
1086: LD_INT 50
1088: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 , 15 ] [ Difficulty ] ;
1089: LD_ADDR_EXP 14
1093: PUSH
1094: LD_INT 21
1096: PUSH
1097: LD_INT 19
1099: PUSH
1100: LD_INT 17
1102: PUSH
1103: LD_INT 15
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_OWVAR 67
1116: ARRAY
1117: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1118: LD_ADDR_EXP 38
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 4
1131: PUSH
1132: LD_INT 4
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_OWVAR 67
1145: ARRAY
1146: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 4
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// arabianTroopsMin = 2 ;
1176: LD_ADDR_EXP 40
1180: PUSH
1181: LD_INT 2
1183: ST_TO_ADDR
// arabianTroopsMax = 4 ;
1184: LD_ADDR_EXP 41
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// end ;
1192: LD_VAR 0 1
1196: RET
// every 0 0$1 trigger debugMode do var i ;
1197: LD_EXP 31
1201: IFFALSE 1516
1203: GO 1205
1205: DISABLE
1206: LD_INT 0
1208: PPUSH
// begin enable ;
1209: ENABLE
// FogOff ( your_side ) ;
1210: LD_OWVAR 2
1214: PPUSH
1215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1219: LD_ADDR_VAR 0 1
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_OWVAR 2
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 2
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 21
1251: PUSH
1252: LD_INT 2
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1290
// SetLives ( i , 1000 ) ;
1276: LD_VAR 0 1
1280: PPUSH
1281: LD_INT 1000
1283: PPUSH
1284: CALL_OW 234
1288: GO 1273
1290: POP
1291: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 22
1299: PUSH
1300: LD_OWVAR 2
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 21
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: FOR_IN
1329: IFFALSE 1393
// begin SetSkill ( i , skill_combat , 10 ) ;
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_INT 10
1341: PPUSH
1342: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1346: LD_VAR 0 1
1350: PPUSH
1351: LD_INT 2
1353: PPUSH
1354: LD_INT 10
1356: PPUSH
1357: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1361: LD_VAR 0 1
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 10
1371: PPUSH
1372: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 237
// end ;
1391: GO 1328
1393: POP
1394: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_OWVAR 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 30
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 30
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 69
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1514
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL_OW 274
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 9999
1467: PPUSH
1468: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1472: LD_VAR 0 1
1476: PPUSH
1477: CALL_OW 274
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 9999
1487: PPUSH
1488: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 274
1501: PPUSH
1502: LD_INT 3
1504: PPUSH
1505: LD_INT 9999
1507: PPUSH
1508: CALL_OW 277
// end ;
1512: GO 1449
1514: POP
1515: POP
// end ; end_of_file
1516: PPOPN 1
1518: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1519: LD_INT 0
1521: PPUSH
// randomsToSave = [ ] ;
1522: LD_ADDR_EXP 62
1526: PUSH
1527: EMPTY
1528: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1529: LD_ADDR_EXP 57
1533: PUSH
1534: EMPTY
1535: ST_TO_ADDR
// ruCars = [ ] ;
1536: LD_ADDR_EXP 61
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1543: CALL 2351 0 0
// PrepareHeroes ;
1547: CALL 1556 0 0
// end ;
1551: LD_VAR 0 1
1555: RET
// function PrepareHeroes ; var i , current ; begin
1556: LD_INT 0
1558: PPUSH
1559: PPUSH
1560: PPUSH
// uc_side = 3 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 3
1568: ST_TO_ADDR
// uc_nation = 3 ;
1569: LD_ADDR_OWVAR 21
1573: PUSH
1574: LD_INT 3
1576: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1577: LD_ADDR_EXP 42
1581: PUSH
1582: LD_STRING Burlak
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: CALL 9409 0 3
1595: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1596: LD_ADDR_EXP 43
1600: PUSH
1601: LD_STRING Gnyevko
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: CALL 9409 0 3
1614: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1615: LD_ADDR_EXP 45
1619: PUSH
1620: LD_STRING Kovalyuk
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 3
1628: PPUSH
1629: CALL 9409 0 3
1633: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1634: LD_ADDR_EXP 44
1638: PUSH
1639: LD_STRING Kirilenkova
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 4
1647: PPUSH
1648: CALL 9409 0 3
1652: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1653: LD_ADDR_EXP 46
1657: PUSH
1658: LD_STRING Belkov
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL 9409 0 3
1671: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1672: LD_ADDR_EXP 47
1676: PUSH
1677: LD_STRING Belkov2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 9409 0 3
1690: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1691: LD_ADDR_EXP 48
1695: PUSH
1696: LD_STRING Scholtze
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 4
1704: PPUSH
1705: CALL 9409 0 3
1709: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1710: LD_ADDR_EXP 52
1714: PUSH
1715: LD_STRING Popov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL 9409 0 3
1728: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1729: LD_ADDR_EXP 53
1733: PUSH
1734: LD_STRING Platonov
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL 9409 0 3
1747: ST_TO_ADDR
// uc_side = 6 ;
1748: LD_ADDR_OWVAR 20
1752: PUSH
1753: LD_INT 6
1755: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1756: LD_ADDR_EXP 54
1760: PUSH
1761: LD_STRING Gaydar
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 9409 0 3
1774: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1775: LD_ADDR_EXP 49
1779: PUSH
1780: LD_STRING Kuzmov
1782: PPUSH
1783: LD_INT 0
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL 9409 0 3
1793: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1794: LD_EXP 49
1798: PPUSH
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 108
1804: PPUSH
1805: LD_INT 5
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 50
// ComHold ( Kuzmov ) ;
1815: LD_EXP 49
1819: PPUSH
1820: CALL_OW 140
// uc_side = 3 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1832: LD_EXP 42
1836: PUSH
1837: LD_EXP 43
1841: PUSH
1842: LD_EXP 44
1846: PUSH
1847: LD_EXP 45
1851: PUSH
1852: LD_EXP 46
1856: PUSH
1857: LD_EXP 47
1861: PUSH
1862: LD_EXP 48
1866: PUSH
1867: LD_EXP 52
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 9492 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1892: LD_ADDR_EXP 50
1896: PUSH
1897: LD_STRING 03_other_survivors
1899: PPUSH
1900: CALL_OW 31
1904: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1905: LD_ADDR_EXP 51
1909: PUSH
1910: LD_STRING 03_other_kirov
1912: PPUSH
1913: CALL_OW 31
1917: ST_TO_ADDR
// for i in other_survivors do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_EXP 50
1927: PUSH
1928: FOR_IN
1929: IFFALSE 1994
// begin if ruCars then
1931: LD_EXP 61
1935: IFFALSE 1977
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_EXP 61
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1955: LD_ADDR_EXP 61
1959: PUSH
1960: LD_EXP 61
1964: PUSH
1965: LD_EXP 61
1969: PUSH
1970: LD_INT 1
1972: ARRAY
1973: DIFF
1974: ST_TO_ADDR
// end else
1975: GO 1992
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1977: LD_VAR 0 2
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 49
// end ;
1992: GO 1928
1994: POP
1995: POP
// for i in other_kirov_survivors do
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_EXP 51
2005: PUSH
2006: FOR_IN
2007: IFFALSE 2072
// begin if ruCars then
2009: LD_EXP 61
2013: IFFALSE 2055
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_EXP 61
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PPUSH
2029: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2033: LD_ADDR_EXP 61
2037: PUSH
2038: LD_EXP 61
2042: PUSH
2043: LD_EXP 61
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: DIFF
2052: ST_TO_ADDR
// end else
2053: GO 2070
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2055: LD_VAR 0 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 0
2065: PPUSH
2066: CALL_OW 49
// end ;
2070: GO 2006
2072: POP
2073: POP
// PrepareSoldier ( sex_male , 1 ) ;
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 381
// dialogRus = CreateHuman ;
2084: LD_ADDR_EXP 59
2088: PUSH
2089: CALL_OW 44
2093: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2094: LD_EXP 50
2098: PUSH
2099: LD_EXP 51
2103: PLUS
2104: PUSH
2105: LD_EXP 43
2109: PUSH
2110: LD_EXP 44
2114: PUSH
2115: LD_EXP 45
2119: PUSH
2120: LD_EXP 46
2124: PUSH
2125: LD_EXP 47
2129: PUSH
2130: LD_EXP 48
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PLUS
2143: PUSH
2144: LD_INT 8
2146: LESS
2147: IFFALSE 2346
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_EXP 50
2158: PUSH
2159: LD_EXP 51
2163: PLUS
2164: PUSH
2165: LD_EXP 43
2169: PUSH
2170: LD_EXP 44
2174: PUSH
2175: LD_EXP 45
2179: PUSH
2180: LD_EXP 46
2184: PUSH
2185: LD_EXP 47
2189: PUSH
2190: LD_EXP 48
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PLUS
2203: ST_TO_ADDR
// current = 8 - current ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 8
2211: PUSH
2212: LD_VAR 0 3
2216: MINUS
2217: ST_TO_ADDR
// for i := 1 to current do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_VAR 0 3
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2344
// begin uc_nation = 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// uc_side = 3 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2252: LD_INT 0
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 4
2260: PPUSH
2261: CALL_OW 12
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 3
2271: PPUSH
2272: CALL_OW 12
2276: PPUSH
2277: CALL_OW 380
// if ruCars then
2281: LD_EXP 61
2285: IFFALSE 2327
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2287: CALL_OW 44
2291: PPUSH
2292: LD_EXP 61
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2305: LD_ADDR_EXP 61
2309: PUSH
2310: LD_EXP 61
2314: PUSH
2315: LD_EXP 61
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: DIFF
2324: ST_TO_ADDR
// end else
2325: GO 2342
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_INT 2
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL_OW 49
// end ;
2342: GO 2233
2344: POP
2345: POP
// end ; end ;
2346: LD_VAR 0 1
2350: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2351: LD_INT 0
2353: PPUSH
2354: PPUSH
2355: PPUSH
// uc_side = 3 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 3
2363: ST_TO_ADDR
// uc_nation = 3 ;
2364: LD_ADDR_OWVAR 21
2368: PUSH
2369: LD_INT 3
2371: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_EXP 5
2386: PUSH
2387: FOR_TO
2388: IFFALSE 2537
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2390: LD_ADDR_OWVAR 37
2394: PUSH
2395: LD_EXP 5
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_EXP 5
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_INT 2
2428: ARRAY
2429: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2430: LD_ADDR_OWVAR 38
2434: PUSH
2435: LD_EXP 5
2439: PUSH
2440: LD_VAR 0 2
2444: ARRAY
2445: PUSH
2446: LD_INT 3
2448: ARRAY
2449: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_EXP 5
2459: PUSH
2460: LD_VAR 0 2
2464: ARRAY
2465: PUSH
2466: LD_INT 4
2468: ARRAY
2469: ST_TO_ADDR
// uc_direction := 3 ;
2470: LD_ADDR_OWVAR 24
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2478: LD_ADDR_OWVAR 41
2482: PUSH
2483: LD_INT 25
2485: PPUSH
2486: LD_INT 30
2488: PPUSH
2489: CALL_OW 12
2493: ST_TO_ADDR
// car := CreateVehicle ;
2494: LD_ADDR_VAR 0 3
2498: PUSH
2499: CALL_OW 45
2503: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2504: LD_ADDR_EXP 61
2508: PUSH
2509: LD_EXP 61
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 2
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// end ;
2535: GO 2387
2537: POP
2538: POP
// end ;
2539: LD_VAR 0 1
2543: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2544: LD_INT 0
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// rnd = rand ( 1 , 4 ) ;
2554: LD_ADDR_VAR 0 3
2558: PUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 12
2569: ST_TO_ADDR
// uc_side = 6 ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_INT 6
2577: ST_TO_ADDR
// uc_nation = 3 ;
2578: LD_ADDR_OWVAR 21
2582: PUSH
2583: LD_INT 3
2585: ST_TO_ADDR
// if rnd < 4 then
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 4
2593: LESS
2594: IFFALSE 2970
// begin vc_chassis = ru_medium_wheeled ;
2596: LD_ADDR_OWVAR 37
2600: PUSH
2601: LD_INT 21
2603: ST_TO_ADDR
// vc_control = control_manual ;
2604: LD_ADDR_OWVAR 38
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_engine = engine_combustion ;
2612: LD_ADDR_OWVAR 39
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2620: LD_ADDR_VAR 0 5
2624: PUSH
2625: LD_INT 1
2627: PPUSH
2628: LD_INT 100
2630: PPUSH
2631: CALL_OW 12
2635: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2636: LD_VAR 0 5
2640: PUSH
2641: LD_EXP 37
2645: PUSH
2646: LD_INT 1
2648: PLUS
2649: LESS
2650: IFFALSE 2662
// vc_weapon = ru_cargo_bay else
2652: LD_ADDR_OWVAR 40
2656: PUSH
2657: LD_INT 51
2659: ST_TO_ADDR
2660: GO 2693
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2662: LD_ADDR_OWVAR 40
2666: PUSH
2667: LD_INT 42
2669: PUSH
2670: LD_INT 43
2672: PUSH
2673: LD_INT 44
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 12
2691: ARRAY
2692: ST_TO_ADDR
// vehicle = CreateVehicle ;
2693: LD_ADDR_VAR 0 7
2697: PUSH
2698: CALL_OW 45
2702: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2703: LD_VAR 0 7
2707: PPUSH
2708: LD_INT 3
2710: PPUSH
2711: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2715: LD_VAR 0 7
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 12
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: CALL_OW 12
2754: PPUSH
2755: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2759: CALL_OW 44
2763: PPUSH
2764: LD_VAR 0 7
2768: PPUSH
2769: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2773: LD_OWVAR 40
2777: PUSH
2778: LD_INT 51
2780: EQUAL
2781: IFFALSE 2798
// AddCargo ( vehicle , mat_cans , 100 ) ;
2783: LD_VAR 0 7
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2798: LD_VAR 0 7
2802: PPUSH
2803: LD_INT 500
2805: PPUSH
2806: LD_INT 1000
2808: PPUSH
2809: CALL_OW 12
2813: PPUSH
2814: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_INT 2
2828: PPUSH
2829: CALL_OW 12
2833: ST_TO_ADDR
// if rnd = 1 then
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 1
2841: EQUAL
2842: IFFALSE 2907
// for i := 3 to russianCargoPath1 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 3
2852: DEC
2853: ST_TO_ADDR
2854: LD_EXP 34
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2903
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2862: LD_VAR 0 7
2866: PPUSH
2867: LD_EXP 34
2871: PUSH
2872: LD_VAR 0 2
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: LD_EXP 34
2886: PUSH
2887: LD_VAR 0 2
2891: ARRAY
2892: PUSH
2893: LD_INT 2
2895: ARRAY
2896: PPUSH
2897: CALL_OW 171
2901: GO 2859
2903: POP
2904: POP
2905: GO 2968
// for i := 3 to russianCargoPath2 do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: DOUBLE
2913: LD_INT 3
2915: DEC
2916: ST_TO_ADDR
2917: LD_EXP 35
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2966
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2925: LD_VAR 0 7
2929: PPUSH
2930: LD_EXP 35
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 2
2954: ARRAY
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PPUSH
2960: CALL_OW 171
2964: GO 2922
2966: POP
2967: POP
// end else
2968: GO 3309
// begin for i := 1 to rand ( 1 , 3 ) do
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: DOUBLE
2976: LD_INT 1
2978: DEC
2979: ST_TO_ADDR
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 12
2990: PUSH
2991: FOR_TO
2992: IFFALSE 3070
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: CALL_OW 12
3007: PPUSH
3008: LD_INT 2
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 12
3018: PPUSH
3019: CALL_OW 380
// unit = CreateHuman ;
3023: LD_ADDR_VAR 0 6
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3033: LD_VAR 0 6
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3048: LD_VAR 0 6
3052: PPUSH
3053: LD_INT 500
3055: PPUSH
3056: LD_INT 1000
3058: PPUSH
3059: CALL_OW 12
3063: PPUSH
3064: CALL_OW 234
// end ;
3068: GO 2991
3070: POP
3071: POP
// rnd2 = rand ( 1 , 2 ) ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: CALL_OW 12
3087: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3088: LD_ADDR_VAR 0 8
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_INT 6
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 21
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: EMPTY
3117: LIST
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 60
3124: PUSH
3125: EMPTY
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3143: LD_ADDR_VAR 0 8
3147: PUSH
3148: LD_VAR 0 8
3152: PUSH
3153: LD_EXP 56
3157: DIFF
3158: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3159: LD_ADDR_VAR 0 8
3163: PUSH
3164: LD_VAR 0 8
3168: PUSH
3169: LD_EXP 57
3173: DIFF
3174: ST_TO_ADDR
// if rnd2 = 1 then
3175: LD_VAR 0 4
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: IFFALSE 3248
// for i := 3 to russianCargoPath1 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 3
3193: DEC
3194: ST_TO_ADDR
3195: LD_EXP 34
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3244
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3203: LD_VAR 0 8
3207: PPUSH
3208: LD_EXP 34
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PPUSH
3223: LD_EXP 34
3227: PUSH
3228: LD_VAR 0 2
3232: ARRAY
3233: PUSH
3234: LD_INT 2
3236: ARRAY
3237: PPUSH
3238: CALL_OW 171
3242: GO 3200
3244: POP
3245: POP
3246: GO 3309
// for i := 3 to russianCargoPath2 do
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: DOUBLE
3254: LD_INT 3
3256: DEC
3257: ST_TO_ADDR
3258: LD_EXP 35
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3307
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3266: LD_VAR 0 8
3270: PPUSH
3271: LD_EXP 35
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 1
3284: ARRAY
3285: PPUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 2
3299: ARRAY
3300: PPUSH
3301: CALL_OW 171
3305: GO 3263
3307: POP
3308: POP
// end ; end ;
3309: LD_VAR 0 1
3313: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
// for i := 1 to 2 do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_INT 2
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3399
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3335: LD_INT 0
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 3
3346: PPUSH
3347: CALL_OW 12
3351: PPUSH
3352: CALL_OW 380
// unit = CreateHuman ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: CALL_OW 44
3365: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3381: LD_ADDR_EXP 57
3385: PUSH
3386: LD_EXP 57
3390: PUSH
3391: LD_VAR 0 3
3395: ADD
3396: ST_TO_ADDR
// end ;
3397: GO 3332
3399: POP
3400: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 380
// unit = CreateHuman ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3447: LD_ADDR_EXP 57
3451: PUSH
3452: LD_EXP 57
3456: PUSH
3457: LD_VAR 0 3
3461: ADD
3462: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3463: LD_EXP 57
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: LD_INT 54
3473: PPUSH
3474: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3478: LD_EXP 57
3482: PPUSH
3483: LD_INT 25
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 72
3497: PPUSH
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 95
3503: PPUSH
3504: LD_INT 52
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: CALL_OW 205
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3519: LD_INT 0
3521: PPUSH
// uc_side = 2 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 2
3529: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3530: LD_ADDR_EXP 63
3534: PUSH
3535: LD_STRING Heike
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL 9409 0 3
3548: ST_TO_ADDR
// if Difficulty >= 2 then
3549: LD_OWVAR 67
3553: PUSH
3554: LD_INT 2
3556: GREATEREQUAL
3557: IFFALSE 3572
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3559: LD_INT 51
3561: PPUSH
3562: LD_INT 2
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 322
// end ;
3572: LD_VAR 0 1
3576: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
// currentEnemyGroup = [ ] ;
3582: LD_ADDR_EXP 65
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: DOUBLE
3595: LD_INT 1
3597: DEC
3598: ST_TO_ADDR
3599: LD_EXP 39
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3860
// begin uc_side = 2 ;
3607: LD_ADDR_OWVAR 20
3611: PUSH
3612: LD_INT 2
3614: ST_TO_ADDR
// uc_nation = nation_arabian ;
3615: LD_ADDR_OWVAR 21
3619: PUSH
3620: LD_INT 2
3622: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3623: LD_ADDR_OWVAR 40
3627: PUSH
3628: LD_INT 23
3630: PUSH
3631: LD_INT 24
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 26
3639: PUSH
3640: LD_INT 27
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 5
3655: PPUSH
3656: CALL_OW 12
3660: ARRAY
3661: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3662: LD_OWVAR 40
3666: PUSH
3667: LD_INT 25
3669: PUSH
3670: LD_INT 26
3672: PUSH
3673: LD_INT 27
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: IN
3681: IFFALSE 3712
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3683: LD_ADDR_OWVAR 37
3687: PUSH
3688: LD_INT 13
3690: PUSH
3691: LD_INT 14
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: ST_TO_ADDR
3710: GO 3743
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3712: LD_ADDR_OWVAR 37
3716: PUSH
3717: LD_INT 12
3719: PUSH
3720: LD_INT 13
3722: PUSH
3723: LD_INT 14
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: ST_TO_ADDR
// vc_control = control_manual ;
3743: LD_ADDR_OWVAR 38
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// vc_engine = engine_combustion ;
3751: LD_ADDR_OWVAR 39
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3759: LD_ADDR_OWVAR 41
3763: PUSH
3764: LD_INT 100
3766: ST_TO_ADDR
// veh = CreateVehicle ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: CALL_OW 45
3776: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3777: LD_ADDR_EXP 65
3781: PUSH
3782: LD_EXP 65
3786: PUSH
3787: LD_VAR 0 3
3791: ADD
3792: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_INT 7
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 26
3815: EQUAL
3816: IFFALSE 3832
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3818: LD_INT 0
3820: PPUSH
3821: LD_EXP 33
3825: PPUSH
3826: CALL_OW 383
3830: GO 3844
// PrepareMechanic ( false , enemySkillLevel ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_EXP 32
3839: PPUSH
3840: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3844: CALL_OW 44
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3604
3860: POP
3861: POP
// end ;
3862: LD_VAR 0 1
3866: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
// currentEnemyGroup = [ ] ;
3872: LD_ADDR_EXP 65
3876: PUSH
3877: EMPTY
3878: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_EXP 40
3893: PPUSH
3894: LD_EXP 41
3898: PPUSH
3899: CALL_OW 12
3903: PUSH
3904: FOR_TO
3905: IFFALSE 3984
// begin uc_side = 2 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 2
3914: ST_TO_ADDR
// uc_nation = nation_arabian ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 2
3922: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_EXP 32
3930: PUSH
3931: LD_INT 1
3933: MINUS
3934: PPUSH
3935: CALL_OW 381
// unit = CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3949: LD_ADDR_EXP 65
3953: PUSH
3954: LD_EXP 65
3958: PUSH
3959: LD_VAR 0 4
3963: ADD
3964: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 1
3974: PPUSH
3975: LD_INT 0
3977: PPUSH
3978: CALL_OW 49
// end ;
3982: GO 3904
3984: POP
3985: POP
// for i := 1 to rand ( 1 , 3 ) do
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 12
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4083
// begin uc_side = 2 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 2
4017: ST_TO_ADDR
// uc_nation = nation_arabian ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 32
4033: PPUSH
4034: CALL_OW 384
// unit = CreateHuman ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4048: LD_ADDR_EXP 65
4052: PUSH
4053: LD_EXP 65
4057: PUSH
4058: LD_VAR 0 4
4062: ADD
4063: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4064: LD_VAR 0 4
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_INT 0
4076: PPUSH
4077: CALL_OW 49
// end ;
4081: GO 4007
4083: POP
4084: POP
// end ;
4085: LD_VAR 0 2
4089: RET
// export function PrepareArabianKiller ; var un ; begin
4090: LD_INT 0
4092: PPUSH
4093: PPUSH
// uc_side = 5 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 5
4101: ST_TO_ADDR
// uc_nation = nation_arabian ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// hc_class = class_soldier ;
4110: LD_ADDR_OWVAR 28
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// un = CreateHuman ;
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_EXP 54
4175: PPUSH
4176: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4180: LD_ADDR_EXP 23
4184: PUSH
4185: LD_EXP 23
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: ST_TO_ADDR
// end ;
4194: LD_VAR 0 1
4198: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
// firstAttackGroup = [ ] ;
4205: LD_ADDR_EXP 64
4209: PUSH
4210: EMPTY
4211: ST_TO_ADDR
// uc_side = 2 ;
4212: LD_ADDR_OWVAR 20
4216: PUSH
4217: LD_INT 2
4219: ST_TO_ADDR
// uc_nation = nation_arabian ;
4220: LD_ADDR_OWVAR 21
4224: PUSH
4225: LD_INT 2
4227: ST_TO_ADDR
// for i := 1 to 3 do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4303
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4244: LD_INT 0
4246: PPUSH
4247: LD_EXP 32
4251: PUSH
4252: LD_INT 2
4254: MINUS
4255: PPUSH
4256: CALL_OW 381
// unit = CreateHuman ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: CALL_OW 44
4269: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4270: LD_ADDR_EXP 64
4274: PUSH
4275: LD_EXP 64
4279: PUSH
4280: LD_VAR 0 3
4284: ADD
4285: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 7
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// end ;
4301: GO 4241
4303: POP
4304: POP
// vc_weapon = ar_light_gun ;
4305: LD_ADDR_OWVAR 40
4309: PUSH
4310: LD_INT 23
4312: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4313: LD_ADDR_OWVAR 37
4317: PUSH
4318: LD_INT 13
4320: ST_TO_ADDR
// vc_control = control_manual ;
4321: LD_ADDR_OWVAR 38
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// vc_engine = engine_combustion ;
4329: LD_ADDR_OWVAR 39
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4337: LD_ADDR_OWVAR 41
4341: PUSH
4342: LD_INT 100
4344: ST_TO_ADDR
// veh = CreateVehicle ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: CALL_OW 45
4354: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4355: LD_ADDR_EXP 64
4359: PUSH
4360: LD_EXP 64
4364: PUSH
4365: LD_VAR 0 4
4369: ADD
4370: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4371: LD_VAR 0 4
4375: PPUSH
4376: LD_INT 7
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4386: LD_INT 0
4388: PPUSH
4389: LD_EXP 32
4393: PUSH
4394: LD_INT 1
4396: MINUS
4397: PPUSH
4398: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4402: CALL_OW 44
4406: PPUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: CALL_OW 52
// end ; end_of_file
4416: LD_VAR 0 1
4420: RET
// export function Nef_PrepareNature ; var i , un ; begin
4421: LD_INT 0
4423: PPUSH
4424: PPUSH
4425: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_EXP 26
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4556
// begin uc_side = 0 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 0
4455: ST_TO_ADDR
// uc_nation = nation_nature ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 0
4463: ST_TO_ADDR
// hc_class = class_apeman ;
4464: LD_ADDR_OWVAR 28
4468: PUSH
4469: LD_INT 12
4471: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4472: LD_ADDR_OWVAR 31
4476: PUSH
4477: LD_EXP 27
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_INT 2
4493: ARRAY
4494: PUSH
4495: LD_EXP 27
4499: PUSH
4500: LD_INT 3
4502: ARRAY
4503: PUSH
4504: LD_EXP 27
4508: PUSH
4509: LD_INT 4
4511: ARRAY
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4519: LD_ADDR_OWVAR 35
4523: PUSH
4524: LD_EXP 28
4528: ST_TO_ADDR
// un = CreateHuman ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: CALL_OW 44
4538: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_INT 8
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
// end ;
4554: GO 4445
4556: POP
4557: POP
// for i := 1 to animalsAmount [ 2 ] do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 26
4572: PUSH
4573: LD_INT 2
4575: ARRAY
4576: PUSH
4577: FOR_TO
4578: IFFALSE 4688
// begin uc_side = 0 ;
4580: LD_ADDR_OWVAR 20
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// uc_nation = nation_nature ;
4588: LD_ADDR_OWVAR 21
4592: PUSH
4593: LD_INT 0
4595: ST_TO_ADDR
// hc_class = class_phororhacos ;
4596: LD_ADDR_OWVAR 28
4600: PUSH
4601: LD_INT 18
4603: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4604: LD_ADDR_OWVAR 31
4608: PUSH
4609: LD_EXP 27
4613: PUSH
4614: LD_INT 1
4616: ARRAY
4617: PUSH
4618: LD_EXP 27
4622: PUSH
4623: LD_INT 2
4625: ARRAY
4626: PUSH
4627: LD_EXP 27
4631: PUSH
4632: LD_INT 3
4634: ARRAY
4635: PUSH
4636: LD_EXP 27
4640: PUSH
4641: LD_INT 4
4643: ARRAY
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4651: LD_ADDR_OWVAR 35
4655: PUSH
4656: LD_EXP 28
4660: ST_TO_ADDR
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 8
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4577
4688: POP
4689: POP
// for i := 1 to animalsAmount [ 3 ] do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_EXP 26
4704: PUSH
4705: LD_INT 3
4707: ARRAY
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4820
// begin uc_side = 0 ;
4712: LD_ADDR_OWVAR 20
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// uc_nation = nation_nature ;
4720: LD_ADDR_OWVAR 21
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// hc_class = class_tiger ;
4728: LD_ADDR_OWVAR 28
4732: PUSH
4733: LD_INT 14
4735: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4736: LD_ADDR_OWVAR 31
4740: PUSH
4741: LD_EXP 27
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PUSH
4750: LD_EXP 27
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PUSH
4759: LD_EXP 27
4763: PUSH
4764: LD_INT 3
4766: ARRAY
4767: PUSH
4768: LD_EXP 27
4772: PUSH
4773: LD_INT 4
4775: ARRAY
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4783: LD_ADDR_OWVAR 35
4787: PUSH
4788: LD_EXP 28
4792: ST_TO_ADDR
// un = CreateHuman ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: CALL_OW 44
4802: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 8
4810: PPUSH
4811: LD_INT 0
4813: PPUSH
4814: CALL_OW 49
// end ;
4818: GO 4709
4820: POP
4821: POP
// for i := 1 to animalsAmount [ 4 ] do
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 26
4836: PUSH
4837: LD_INT 4
4839: ARRAY
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4952
// begin uc_side = 0 ;
4844: LD_ADDR_OWVAR 20
4848: PUSH
4849: LD_INT 0
4851: ST_TO_ADDR
// uc_nation = nation_nature ;
4852: LD_ADDR_OWVAR 21
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// hc_class = 21 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 21
4867: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4868: LD_ADDR_OWVAR 31
4872: PUSH
4873: LD_EXP 27
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PUSH
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 2
4889: ARRAY
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: LD_EXP 27
4904: PUSH
4905: LD_INT 4
4907: ARRAY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4915: LD_ADDR_OWVAR 35
4919: PUSH
4920: LD_EXP 28
4924: ST_TO_ADDR
// un = CreateHuman ;
4925: LD_ADDR_VAR 0 3
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 8
4942: PPUSH
4943: LD_INT 0
4945: PPUSH
4946: CALL_OW 49
// end ;
4950: GO 4841
4952: POP
4953: POP
// for i := 1 to animalsAmount [ 5 ] do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: DOUBLE
4960: LD_INT 1
4962: DEC
4963: ST_TO_ADDR
4964: LD_EXP 26
4968: PUSH
4969: LD_INT 5
4971: ARRAY
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5035
// begin uc_side = 0 ;
4976: LD_ADDR_OWVAR 20
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// uc_nation = nation_nature ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// vc_chassis := 31 ;
4992: LD_ADDR_OWVAR 37
4996: PUSH
4997: LD_INT 31
4999: ST_TO_ADDR
// vc_control := control_rider ;
5000: LD_ADDR_OWVAR 38
5004: PUSH
5005: LD_INT 4
5007: ST_TO_ADDR
// un := CreateVehicle ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 45
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 8
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4973
5035: POP
5036: POP
// end ; end_of_file
5037: LD_VAR 0 1
5041: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
5051: PPUSH
5052: PPUSH
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
// for unit in units do
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5110
// if not ignorePath then
5075: LD_VAR 0 3
5079: NOT
5080: IFFALSE 5096
// SetTag ( unit , 0 ) else
5082: LD_VAR 0 8
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: CALL_OW 109
5094: GO 5108
// SetTag ( unit , 1 ) ;
5096: LD_VAR 0 8
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 109
5108: GO 5072
5110: POP
5111: POP
// startAttacks = false ;
5112: LD_ADDR_VAR 0 21
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5120: LD_ADDR_VAR 0 17
5124: PUSH
5125: LD_VAR 0 2
5129: PUSH
5130: LD_VAR 0 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_VAR 0 2
5149: ARRAY
5150: PUSH
5151: LD_INT 2
5153: ARRAY
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// mechanics = [ ] ;
5159: LD_ADDR_VAR 0 12
5163: PUSH
5164: EMPTY
5165: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5166: LD_ADDR_VAR 0 9
5170: PUSH
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 50
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5219: LD_ADDR_VAR 0 11
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 4
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 72
5253: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5254: LD_ADDR_VAR 0 13
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 1
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 24
5279: PUSH
5280: LD_INT 1000
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 72
5299: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5300: LD_ADDR_VAR 0 15
5304: PUSH
5305: LD_INT 9
5307: PPUSH
5308: CALL_OW 435
5312: ST_TO_ADDR
// if not ignorePath then
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 6300
// begin for unit in attackUnits do
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: FOR_IN
5331: IFFALSE 6074
// begin if path and not startAttacks then
5333: LD_VAR 0 2
5337: PUSH
5338: LD_VAR 0 21
5342: NOT
5343: AND
5344: IFFALSE 6063
// begin i = 1 ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5354: LD_ADDR_VAR 0 15
5358: PUSH
5359: LD_INT 9
5361: PPUSH
5362: CALL_OW 435
5366: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5367: LD_ADDR_VAR 0 18
5371: PUSH
5372: LD_INT 81
5374: PUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 255
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PPUSH
5394: LD_VAR 0 8
5398: PPUSH
5399: CALL_OW 74
5403: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5404: LD_ADDR_VAR 0 19
5408: PUSH
5409: LD_VAR 0 15
5413: PPUSH
5414: LD_VAR 0 8
5418: PPUSH
5419: CALL_OW 250
5423: PPUSH
5424: LD_VAR 0 8
5428: PPUSH
5429: CALL_OW 251
5433: PPUSH
5434: CALL_OW 439
5438: ST_TO_ADDR
// if damageUnits and medics then
5439: LD_VAR 0 13
5443: PUSH
5444: LD_VAR 0 11
5448: AND
5449: IFFALSE 5471
// ComHeal ( medics , damageUnits [ 1 ] ) else
5451: LD_VAR 0 11
5455: PPUSH
5456: LD_VAR 0 13
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 128
5469: GO 5514
// if medics then
5471: LD_VAR 0 11
5475: IFFALSE 5514
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5477: LD_VAR 0 11
5481: PPUSH
5482: LD_VAR 0 9
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PPUSH
5491: CALL_OW 250
5495: PPUSH
5496: LD_VAR 0 9
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: CALL_OW 251
5509: PPUSH
5510: CALL_OW 111
// if not HasTask ( unit ) then
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 314
5523: NOT
5524: IFFALSE 5763
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5526: LD_ADDR_VAR 0 19
5530: PUSH
5531: LD_VAR 0 15
5535: PPUSH
5536: LD_VAR 0 8
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 8
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: CALL_OW 439
5560: ST_TO_ADDR
// if i > crates then
5561: LD_VAR 0 7
5565: PUSH
5566: LD_VAR 0 15
5570: GREATER
5571: IFFALSE 5581
// i = 1 ;
5573: LD_ADDR_VAR 0 7
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5581: LD_VAR 0 18
5585: PUSH
5586: LD_VAR 0 19
5590: AND
5591: IFFALSE 5706
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5593: LD_VAR 0 8
5597: PPUSH
5598: LD_VAR 0 18
5602: PPUSH
5603: CALL_OW 250
5607: PPUSH
5608: LD_VAR 0 18
5612: PPUSH
5613: CALL_OW 251
5617: PPUSH
5618: CALL_OW 297
5622: PUSH
5623: LD_VAR 0 8
5627: PPUSH
5628: LD_VAR 0 19
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 19
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 297
5650: LESS
5651: IFFALSE 5669
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5653: LD_VAR 0 9
5657: PPUSH
5658: LD_VAR 0 18
5662: PPUSH
5663: CALL_OW 115
5667: GO 5704
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5669: LD_VAR 0 9
5673: PPUSH
5674: LD_VAR 0 15
5678: PUSH
5679: LD_VAR 0 7
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 15
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: PLUS
5698: ARRAY
5699: PPUSH
5700: CALL_OW 116
// end else
5704: GO 5763
// if crates then
5706: LD_VAR 0 15
5710: IFFALSE 5749
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5712: LD_VAR 0 9
5716: PPUSH
5717: LD_VAR 0 15
5721: PUSH
5722: LD_VAR 0 7
5726: ARRAY
5727: PPUSH
5728: LD_VAR 0 15
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: ARRAY
5742: PPUSH
5743: CALL_OW 116
5747: GO 5763
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5749: LD_VAR 0 9
5753: PPUSH
5754: LD_VAR 0 18
5758: PPUSH
5759: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5763: LD_INT 35
5765: PPUSH
5766: CALL_OW 67
// if path then
5770: LD_VAR 0 2
5774: IFFALSE 5860
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5776: LD_ADDR_VAR 0 16
5780: PUSH
5781: LD_VAR 0 8
5785: PPUSH
5786: LD_VAR 0 2
5790: PPUSH
5791: CALL 7190 0 2
5795: ST_TO_ADDR
// if agressiveMove then
5796: LD_VAR 0 4
5800: IFFALSE 5831
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5802: LD_VAR 0 9
5806: PPUSH
5807: LD_VAR 0 16
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_VAR 0 16
5820: PUSH
5821: LD_INT 2
5823: ARRAY
5824: PPUSH
5825: CALL_OW 114
5829: GO 5858
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5831: LD_VAR 0 9
5835: PPUSH
5836: LD_VAR 0 16
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 16
5849: PUSH
5850: LD_INT 2
5852: ARRAY
5853: PPUSH
5854: CALL_OW 111
// end else
5858: GO 5868
// startAttacks = true ;
5860: LD_ADDR_VAR 0 21
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// i = i + 2 ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_INT 2
5880: PLUS
5881: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5882: LD_VAR 0 8
5886: PPUSH
5887: CALL_OW 314
5891: NOT
5892: PUSH
5893: LD_INT 22
5895: PUSH
5896: LD_VAR 0 8
5900: PPUSH
5901: CALL_OW 255
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 92
5912: PUSH
5913: LD_VAR 0 16
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 16
5926: PUSH
5927: LD_INT 2
5929: ARRAY
5930: PUSH
5931: LD_INT 4
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: LD_INT 3
5951: GREATER
5952: AND
5953: PUSH
5954: LD_VAR 0 21
5958: NOT
5959: AND
5960: IFFALSE 5354
// for i := 1 to path do
5962: LD_ADDR_VAR 0 7
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_VAR 0 2
5976: PUSH
5977: FOR_TO
5978: IFFALSE 6061
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 7
5989: ARRAY
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_VAR 0 16
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: EQUAL
6004: PUSH
6005: LD_VAR 0 2
6009: PUSH
6010: LD_VAR 0 7
6014: ARRAY
6015: PUSH
6016: LD_INT 2
6018: ARRAY
6019: PUSH
6020: LD_VAR 0 16
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: EQUAL
6029: AND
6030: IFFALSE 6059
// begin path = path diff [ path [ i ] ] ;
6032: LD_ADDR_VAR 0 2
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: LD_VAR 0 7
6051: ARRAY
6052: PUSH
6053: EMPTY
6054: LIST
6055: DIFF
6056: ST_TO_ADDR
// break ;
6057: GO 6061
// end ;
6059: GO 5977
6061: POP
6062: POP
// end ; if not path then
6063: LD_VAR 0 2
6067: NOT
6068: IFFALSE 6072
// break ;
6070: GO 6074
// end ;
6072: GO 5330
6074: POP
6075: POP
// repeat unitsReachPathEnd = 0 ;
6076: LD_ADDR_VAR 0 20
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// for attackUnit in attackUnits do
6084: LD_ADDR_VAR 0 10
6088: PUSH
6089: LD_VAR 0 9
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6268
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_VAR 0 17
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 17
6115: PUSH
6116: LD_INT 2
6118: ARRAY
6119: PPUSH
6120: CALL_OW 297
6124: PUSH
6125: LD_INT 7
6127: LESS
6128: NOT
6129: PUSH
6130: LD_VAR 0 10
6134: PPUSH
6135: CALL_OW 110
6139: PUSH
6140: LD_INT 0
6142: EQUAL
6143: AND
6144: IFFALSE 6210
// begin if agressiveMove then
6146: LD_VAR 0 4
6150: IFFALSE 6181
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6152: LD_VAR 0 10
6156: PPUSH
6157: LD_VAR 0 17
6161: PUSH
6162: LD_INT 1
6164: ARRAY
6165: PPUSH
6166: LD_VAR 0 17
6170: PUSH
6171: LD_INT 2
6173: ARRAY
6174: PPUSH
6175: CALL_OW 114
6179: GO 6208
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6181: LD_VAR 0 10
6185: PPUSH
6186: LD_VAR 0 17
6190: PUSH
6191: LD_INT 1
6193: ARRAY
6194: PPUSH
6195: LD_VAR 0 17
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: CALL_OW 111
// end else
6208: GO 6237
// if GetTag ( attackUnit ) = 0 then
6210: LD_VAR 0 10
6214: PPUSH
6215: CALL_OW 110
6219: PUSH
6220: LD_INT 0
6222: EQUAL
6223: IFFALSE 6237
// SetTag ( attackUnit , 1 ) ;
6225: LD_VAR 0 10
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: CALL_OW 109
// if GetTag ( unit ) = 1 then
6237: LD_VAR 0 8
6241: PPUSH
6242: CALL_OW 110
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6266
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6252: LD_ADDR_VAR 0 20
6256: PUSH
6257: LD_VAR 0 20
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6094
6268: POP
6269: POP
// wait ( 0 0$1 ) ;
6270: LD_INT 35
6272: PPUSH
6273: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6277: LD_VAR 0 20
6281: PUSH
6282: LD_VAR 0 9
6286: PUSH
6287: LD_INT 3
6289: MINUS
6290: GREATER
6291: IFFALSE 6076
// wait ( 0 0$10 ) ;
6293: LD_INT 350
6295: PPUSH
6296: CALL_OW 67
// end ; for attackUnit in attackUnits do
6300: LD_ADDR_VAR 0 10
6304: PUSH
6305: LD_VAR 0 9
6309: PUSH
6310: FOR_IN
6311: IFFALSE 6327
// SetTag ( attackUnit , 2 ) ;
6313: LD_VAR 0 10
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 109
6325: GO 6310
6327: POP
6328: POP
// startAttacks = true ;
6329: LD_ADDR_VAR 0 21
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// if startAttacks then
6337: LD_VAR 0 21
6341: IFFALSE 7160
// begin repeat wait ( 0 0$1 ) ;
6343: LD_INT 35
6345: PPUSH
6346: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6350: LD_ADDR_VAR 0 11
6354: PUSH
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 50
6362: PUSH
6363: EMPTY
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 72
6384: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6385: LD_ADDR_VAR 0 13
6389: PUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 1000
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 72
6441: ST_TO_ADDR
// if damageUnits and medics then
6442: LD_VAR 0 13
6446: PUSH
6447: LD_VAR 0 11
6451: AND
6452: IFFALSE 6474
// ComHeal ( medics , damageUnits [ 1 ] ) else
6454: LD_VAR 0 11
6458: PPUSH
6459: LD_VAR 0 13
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: CALL_OW 128
6472: GO 6524
// if medics and not damageUnits then
6474: LD_VAR 0 11
6478: PUSH
6479: LD_VAR 0 13
6483: NOT
6484: AND
6485: IFFALSE 6524
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6487: LD_VAR 0 11
6491: PPUSH
6492: LD_VAR 0 9
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: CALL_OW 250
6505: PPUSH
6506: LD_VAR 0 9
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: PPUSH
6515: CALL_OW 251
6519: PPUSH
6520: CALL_OW 111
// for attackUnit in attackUnits do
6524: LD_ADDR_VAR 0 10
6528: PUSH
6529: LD_VAR 0 9
6533: PUSH
6534: FOR_IN
6535: IFFALSE 7151
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6537: LD_ADDR_VAR 0 22
6541: PUSH
6542: LD_INT 81
6544: PUSH
6545: LD_VAR 0 10
6549: PPUSH
6550: CALL_OW 255
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PPUSH
6564: LD_VAR 0 10
6568: PPUSH
6569: CALL_OW 74
6573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6574: LD_ADDR_VAR 0 23
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_VAR 0 10
6586: PPUSH
6587: CALL_OW 255
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 59
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 21
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: PPUSH
6643: LD_VAR 0 10
6647: PPUSH
6648: CALL_OW 74
6652: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6653: LD_VAR 0 10
6657: PPUSH
6658: CALL_OW 110
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: IFFALSE 6826
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6668: LD_VAR 0 10
6672: PPUSH
6673: LD_VAR 0 22
6677: PPUSH
6678: CALL_OW 296
6682: PUSH
6683: LD_INT 10
6685: PLUS
6686: PUSH
6687: LD_VAR 0 10
6691: PPUSH
6692: LD_VAR 0 23
6696: PPUSH
6697: CALL_OW 296
6701: LESS
6702: IFFALSE 6720
// ComAttackUnit ( attackUnit , target1 ) else
6704: LD_VAR 0 10
6708: PPUSH
6709: LD_VAR 0 22
6713: PPUSH
6714: CALL_OW 115
6718: GO 6734
// ComAttackUnit ( attackUnit , target2 ) ;
6720: LD_VAR 0 10
6724: PPUSH
6725: LD_VAR 0 23
6729: PPUSH
6730: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6734: LD_VAR 0 10
6738: PPUSH
6739: CALL_OW 256
6743: PUSH
6744: LD_INT 650
6746: LESS
6747: PUSH
6748: LD_VAR 0 10
6752: PPUSH
6753: CALL_OW 247
6757: PUSH
6758: LD_INT 2
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 10
6767: PPUSH
6768: CALL_OW 263
6772: PUSH
6773: LD_INT 1
6775: EQUAL
6776: AND
6777: IFFALSE 6826
// begin SetTag ( attackUnit , 3 ) ;
6779: LD_VAR 0 10
6783: PPUSH
6784: LD_INT 3
6786: PPUSH
6787: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6791: LD_VAR 0 10
6795: PPUSH
6796: CALL_OW 313
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: LD_INT 3
6807: PPUSH
6808: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6812: LD_VAR 0 10
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6826: LD_VAR 0 10
6830: PPUSH
6831: LD_VAR 0 5
6835: PPUSH
6836: CALL_OW 308
6840: PUSH
6841: LD_VAR 0 10
6845: PPUSH
6846: CALL_OW 110
6850: PUSH
6851: LD_INT 3
6853: EQUAL
6854: AND
6855: PUSH
6856: LD_VAR 0 10
6860: PPUSH
6861: CALL_OW 313
6865: AND
6866: IFFALSE 6939
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6868: LD_ADDR_VAR 0 14
6872: PUSH
6873: LD_VAR 0 10
6877: PPUSH
6878: CALL_OW 313
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: ST_TO_ADDR
// if not driver in mechanics then
6887: LD_VAR 0 14
6891: PUSH
6892: LD_VAR 0 12
6896: IN
6897: NOT
6898: IFFALSE 6916
// mechanics = mechanics ^ driver ;
6900: LD_ADDR_VAR 0 12
6904: PUSH
6905: LD_VAR 0 12
6909: PUSH
6910: LD_VAR 0 14
6914: ADD
6915: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6916: LD_VAR 0 14
6920: PPUSH
6921: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6925: LD_VAR 0 14
6929: PPUSH
6930: LD_VAR 0 10
6934: PPUSH
6935: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6939: LD_VAR 0 10
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: EQUAL
6952: IFFALSE 7070
// begin SetTag ( attackUnit , 2 ) ;
6954: LD_VAR 0 10
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6966: LD_VAR 0 10
6970: PPUSH
6971: CALL_OW 247
6975: PUSH
6976: LD_INT 2
6978: EQUAL
6979: PUSH
6980: LD_VAR 0 10
6984: PPUSH
6985: CALL_OW 263
6989: PUSH
6990: LD_INT 1
6992: EQUAL
6993: AND
6994: PUSH
6995: LD_VAR 0 10
6999: PPUSH
7000: CALL_OW 313
7004: NOT
7005: AND
7006: IFFALSE 7070
// begin SetFuel ( attackUnit , 100 ) ;
7008: LD_VAR 0 10
7012: PPUSH
7013: LD_INT 100
7015: PPUSH
7016: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
7020: LD_VAR 0 12
7024: PPUSH
7025: LD_VAR 0 10
7029: PPUSH
7030: CALL_OW 74
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7044: LD_ADDR_VAR 0 12
7048: PUSH
7049: LD_VAR 0 12
7053: PUSH
7054: LD_VAR 0 12
7058: PPUSH
7059: LD_VAR 0 10
7063: PPUSH
7064: CALL_OW 74
7068: DIFF
7069: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7070: LD_ADDR_VAR 0 8
7074: PUSH
7075: LD_VAR 0 12
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7147
// begin if not IsInArea ( unit , retreatArea ) then
7083: LD_VAR 0 8
7087: PPUSH
7088: LD_VAR 0 5
7092: PPUSH
7093: CALL_OW 308
7097: NOT
7098: IFFALSE 7114
// ComMoveToArea ( unit , retreatArea ) ;
7100: LD_VAR 0 8
7104: PPUSH
7105: LD_VAR 0 5
7109: PPUSH
7110: CALL_OW 113
// if GetLives ( unit ) < 250 then
7114: LD_VAR 0 8
7118: PPUSH
7119: CALL_OW 256
7123: PUSH
7124: LD_INT 250
7126: LESS
7127: IFFALSE 7145
// mechanics = mechanics diff unit ;
7129: LD_ADDR_VAR 0 12
7133: PUSH
7134: LD_VAR 0 12
7138: PUSH
7139: LD_VAR 0 8
7143: DIFF
7144: ST_TO_ADDR
// end ;
7145: GO 7080
7147: POP
7148: POP
// end ;
7149: GO 6534
7151: POP
7152: POP
// until not attackUnits ;
7153: LD_VAR 0 9
7157: NOT
7158: IFFALSE 6343
// end ; wait ( 0 0$1 ) ;
7160: LD_INT 35
7162: PPUSH
7163: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PPUSH
7178: CALL_OW 72
7182: NOT
7183: IFFALSE 5166
// end ;
7185: LD_VAR 0 6
7189: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// for i := 2 to path do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 2
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 2
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7386
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: LD_VAR 0 2
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 4
7277: ARRAY
7278: PUSH
7279: LD_INT 2
7281: ARRAY
7282: PPUSH
7283: CALL_OW 297
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_VAR 0 5
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 2
7309: ARRAY
7310: PPUSH
7311: CALL_OW 297
7315: LESS
7316: IFFALSE 7384
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7318: LD_ADDR_VAR 0 5
7322: PUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 4
7340: ARRAY
7341: PUSH
7342: LD_INT 1
7344: ARRAY
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 4
7373: ARRAY
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PPUSH
7379: CALL_OW 1
7383: ST_TO_ADDR
// end ; end ;
7384: GO 7245
7386: POP
7387: POP
// result = nearPosition ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 3
7402: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7403: LD_EXP 58
7407: PPUSH
7408: CALL_OW 274
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 275
7420: PUSH
7421: LD_INT 0
7423: GREATER
7424: IFFALSE 7530
7426: GO 7428
7428: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7429: LD_EXP 57
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 72
7448: PPUSH
7449: LD_INT 31
7451: PPUSH
7452: LD_INT 105
7454: PPUSH
7455: LD_INT 51
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7465: LD_EXP 57
7469: PPUSH
7470: LD_INT 25
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: PPUSH
7485: LD_INT 31
7487: PPUSH
7488: LD_INT 114
7490: PPUSH
7491: LD_INT 58
7493: PPUSH
7494: LD_INT 3
7496: PPUSH
7497: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7501: LD_EXP 57
7505: PPUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 72
7520: PPUSH
7521: LD_EXP 58
7525: PPUSH
7526: CALL_OW 180
// end ; end_of_file
7530: END
// export function Lose_Burlak ; begin
7531: LD_INT 0
7533: PPUSH
// YouLost ( Burlak ) ;
7534: LD_STRING Burlak
7536: PPUSH
7537: CALL_OW 104
// end ;
7541: LD_VAR 0 1
7545: RET
// export function Lose_Gaydar ; begin
7546: LD_INT 0
7548: PPUSH
// YouLost ( Gaydar ) ;
7549: LD_STRING Gaydar
7551: PPUSH
7552: CALL_OW 104
// end ;
7556: LD_VAR 0 1
7560: RET
// export function Lose_SelfAttack ; begin
7561: LD_INT 0
7563: PPUSH
// YouLost ( SelfAttack ) ;
7564: LD_STRING SelfAttack
7566: PPUSH
7567: CALL_OW 104
// end ;
7571: LD_VAR 0 1
7575: RET
// export function Lose_Arrest ; begin
7576: LD_INT 0
7578: PPUSH
// YouLost ( Arrest ) ;
7579: LD_STRING Arrest
7581: PPUSH
7582: CALL_OW 104
// end ;
7586: LD_VAR 0 1
7590: RET
// export function Lose_ArabBreakthrough ; begin
7591: LD_INT 0
7593: PPUSH
// YouLost ( ArabBreakthrough ) ;
7594: LD_STRING ArabBreakthrough
7596: PPUSH
7597: CALL_OW 104
// end ;
7601: LD_VAR 0 1
7605: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7606: LD_EXP 7
7610: NOT
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: NOT
7652: AND
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: NOT
7694: AND
7695: IFFALSE 7708
7697: GO 7699
7699: DISABLE
// begin enable ;
7700: ENABLE
// YouLost ( Engineer ) ;
7701: LD_STRING Engineer
7703: PPUSH
7704: CALL_OW 104
// end ; end_of_file
7708: END
// export function FinishMission ; begin
7709: LD_INT 0
7711: PPUSH
// SetRewards ;
7712: CALL 7733 0 0
// SavePlayerCharacters ;
7716: CALL 8158 0 0
// SaveGlobalVariables ;
7720: CALL 8386 0 0
// YouWin ;
7724: CALL_OW 103
// end ;
7728: LD_VAR 0 1
7732: RET
// function SetRewards ; var unitsToReward ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
// SetAchievements ;
7737: CALL 18539 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7741: LD_INT 22
7743: PUSH
7744: LD_INT 3
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: NOT
7770: IFFALSE 7784
// AddMedal ( Dismantle , 1 ) else
7772: LD_STRING Dismantle
7774: PPUSH
7775: LD_INT 1
7777: PPUSH
7778: CALL_OW 101
7782: GO 7795
// AddMedal ( Dismantle , - 1 ) ;
7784: LD_STRING Dismantle
7786: PPUSH
7787: LD_INT 1
7789: NEG
7790: PPUSH
7791: CALL_OW 101
// if killedArabianUnits >= 25 then
7795: LD_EXP 22
7799: PUSH
7800: LD_INT 25
7802: GREATEREQUAL
7803: IFFALSE 7825
// begin AddMedal ( EnemyLosses , 1 ) ;
7805: LD_STRING EnemyLosses
7807: PPUSH
7808: LD_INT 1
7810: PPUSH
7811: CALL_OW 101
// heikeHeavyLosses = true ;
7815: LD_ADDR_EXP 4
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// end else
7823: GO 7836
// AddMedal ( EnemyLosses , - 1 ) ;
7825: LD_STRING EnemyLosses
7827: PPUSH
7828: LD_INT 1
7830: NEG
7831: PPUSH
7832: CALL_OW 101
// if not lostUnits then
7836: LD_EXP 24
7840: NOT
7841: IFFALSE 7855
// AddMedal ( LittleLosses , 1 ) else
7843: LD_STRING LittleLosses
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 101
7853: GO 7866
// AddMedal ( LittleLosses , - 1 ) ;
7855: LD_STRING LittleLosses
7857: PPUSH
7858: LD_INT 1
7860: NEG
7861: PPUSH
7862: CALL_OW 101
// GiveMedals ( Main ) ;
7866: LD_STRING Main
7868: PPUSH
7869: CALL_OW 102
// unitsToReward = [ ] ;
7873: LD_ADDR_VAR 0 2
7877: PUSH
7878: EMPTY
7879: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7880: LD_EXP 42
7884: PPUSH
7885: CALL_OW 255
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: IFFALSE 7911
// unitsToReward = unitsToReward ^ Burlak ;
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 2
7904: PUSH
7905: LD_EXP 42
7909: ADD
7910: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7911: LD_EXP 43
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 3
7923: EQUAL
7924: IFFALSE 7942
// unitsToReward = unitsToReward ^ Gnyevko ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_EXP 43
7940: ADD
7941: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7942: LD_EXP 44
7946: PPUSH
7947: CALL_OW 255
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: IFFALSE 7973
// unitsToReward = unitsToReward ^ Kirilenkova ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 2
7966: PUSH
7967: LD_EXP 44
7971: ADD
7972: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7973: LD_EXP 45
7977: PPUSH
7978: CALL_OW 255
7982: PUSH
7983: LD_INT 3
7985: EQUAL
7986: IFFALSE 8004
// unitsToReward = unitsToReward ^ Kovalyuk ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_EXP 45
8002: ADD
8003: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
8004: LD_EXP 46
8008: PPUSH
8009: CALL_OW 255
8013: PUSH
8014: LD_INT 3
8016: EQUAL
8017: IFFALSE 8035
// unitsToReward = unitsToReward ^ Belkov ;
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: LD_VAR 0 2
8028: PUSH
8029: LD_EXP 46
8033: ADD
8034: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8035: LD_EXP 47
8039: PPUSH
8040: CALL_OW 255
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: IFFALSE 8066
// unitsToReward = unitsToReward ^ Belkov2 ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: LD_VAR 0 2
8059: PUSH
8060: LD_EXP 47
8064: ADD
8065: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8066: LD_EXP 48
8070: PPUSH
8071: CALL_OW 255
8075: PUSH
8076: LD_INT 3
8078: EQUAL
8079: IFFALSE 8097
// unitsToReward = unitsToReward ^ Scholtze ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_EXP 48
8095: ADD
8096: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8097: LD_EXP 49
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: IFFALSE 8128
// unitsToReward = unitsToReward ^ Kuzmov ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_EXP 49
8126: ADD
8127: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_EXP 62
8142: ADD
8143: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 43
// end ;
8153: LD_VAR 0 1
8157: RET
// function SavePlayerCharacters ; var othersYour ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8162: LD_EXP 42
8166: PPUSH
8167: LD_STRING 04_Burlak
8169: PPUSH
8170: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8174: LD_EXP 43
8178: PPUSH
8179: CALL_OW 255
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8201
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8189: LD_EXP 43
8193: PPUSH
8194: LD_STRING 04_Gnyevko
8196: PPUSH
8197: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8201: LD_EXP 45
8205: PPUSH
8206: CALL_OW 255
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: IFFALSE 8228
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8216: LD_EXP 45
8220: PPUSH
8221: LD_STRING 04_Kovalyuk
8223: PPUSH
8224: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8228: LD_EXP 44
8232: PPUSH
8233: CALL_OW 255
8237: PUSH
8238: LD_INT 3
8240: EQUAL
8241: IFFALSE 8255
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8243: LD_EXP 44
8247: PPUSH
8248: LD_STRING 04_Kirilenkova
8250: PPUSH
8251: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8255: LD_EXP 48
8259: PPUSH
8260: CALL_OW 255
8264: PUSH
8265: LD_INT 3
8267: EQUAL
8268: IFFALSE 8282
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8270: LD_EXP 48
8274: PPUSH
8275: LD_STRING 04_Scholtze
8277: PPUSH
8278: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8282: LD_EXP 46
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 3
8294: EQUAL
8295: IFFALSE 8309
// SaveCharacters ( Belkov , 04_Belkov ) ;
8297: LD_EXP 46
8301: PPUSH
8302: LD_STRING 04_Belkov
8304: PPUSH
8305: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8309: LD_EXP 47
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: IFFALSE 8336
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8324: LD_EXP 47
8328: PPUSH
8329: LD_STRING 04_Belkov2
8331: PPUSH
8332: CALL_OW 38
// if IsOK ( Kuzmov ) then
8336: LD_EXP 49
8340: PPUSH
8341: CALL_OW 302
8345: IFFALSE 8359
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8347: LD_EXP 49
8351: PPUSH
8352: LD_STRING 04_Kuzmov
8354: PPUSH
8355: CALL_OW 38
// othersYour = randomsToSave ;
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_EXP 62
8368: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8369: LD_EXP 62
8373: PPUSH
8374: LD_STRING 04_other_survivors
8376: PPUSH
8377: CALL_OW 38
// end ;
8381: LD_VAR 0 1
8385: RET
// function SaveGlobalVariables ; begin
8386: LD_INT 0
8388: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8389: LD_EXP 4
8393: PPUSH
8394: LD_STRING 04_HeikeHeavyLosses_1
8396: PPUSH
8397: CALL_OW 39
// end ; end_of_file
8401: LD_VAR 0 1
8405: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 255
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 266
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_INT 5
8442: PPUSH
8443: CALL_OW 308
8447: NOT
8448: AND
8449: IFFALSE 8460
// Dial_DepotInWrongPlace ( building ) ;
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL 11049 0 1
// end ;
8460: PPOPN 2
8462: END
// on BuildingComplete ( building ) do var i , cargo ;
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8467: LD_VAR 0 1
8471: PPUSH
8472: CALL_OW 255
8476: PUSH
8477: LD_INT 3
8479: EQUAL
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 266
8490: PUSH
8491: LD_INT 0
8493: EQUAL
8494: AND
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: LD_INT 5
8503: PPUSH
8504: CALL_OW 308
8508: AND
8509: PUSH
8510: LD_EXP 8
8514: NOT
8515: AND
8516: PUSH
8517: LD_EXP 9
8521: NOT
8522: AND
8523: IFFALSE 8549
// begin namedBase = true ;
8525: LD_ADDR_EXP 9
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_STRING chuikov
8540: PPUSH
8541: CALL_OW 500
// Dial_FinishDepot ;
8545: CALL 11323 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 255
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 266
8572: PUSH
8573: LD_INT 32
8575: EQUAL
8576: AND
8577: IFFALSE 8593
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8579: LD_ADDR_EXP 25
8583: PUSH
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 1
8591: PLUS
8592: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 255
8602: PUSH
8603: LD_INT 6
8605: EQUAL
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 266
8616: PUSH
8617: LD_INT 0
8619: EQUAL
8620: AND
8621: IFFALSE 8820
// begin secondBaseDepot = building ;
8623: LD_ADDR_EXP 58
8627: PUSH
8628: LD_VAR 0 1
8632: ST_TO_ADDR
// uc_side = 6 ;
8633: LD_ADDR_OWVAR 20
8637: PUSH
8638: LD_INT 6
8640: ST_TO_ADDR
// uc_nation = nation_russian ;
8641: LD_ADDR_OWVAR 21
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8649: LD_ADDR_OWVAR 37
8653: PUSH
8654: LD_INT 21
8656: ST_TO_ADDR
// vc_control = control_manual ;
8657: LD_ADDR_OWVAR 38
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// vc_engine = engine_combustion ;
8665: LD_ADDR_OWVAR 39
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8673: LD_ADDR_OWVAR 40
8677: PUSH
8678: LD_INT 51
8680: ST_TO_ADDR
// cargo = CreateVehicle ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: CALL_OW 45
8690: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8691: LD_VAR 0 3
8695: PPUSH
8696: LD_INT 3
8698: PPUSH
8699: LD_INT 0
8701: PPUSH
8702: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8706: LD_VAR 0 3
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 100
8716: PPUSH
8717: CALL_OW 291
// ComGive ( cargo , building ) ;
8721: LD_VAR 0 3
8725: PPUSH
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8735: LD_INT 0
8737: PPUSH
8738: LD_INT 2
8740: PPUSH
8741: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8745: CALL_OW 44
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: DOUBLE
8765: LD_INT 10
8767: DEC
8768: ST_TO_ADDR
8769: LD_EXP 34
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8818
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_EXP 34
8786: PUSH
8787: LD_VAR 0 2
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_EXP 34
8801: PUSH
8802: LD_VAR 0 2
8806: ARRAY
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: PPUSH
8812: CALL_OW 171
8816: GO 8774
8818: POP
8819: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 255
8829: PUSH
8830: LD_INT 6
8832: EQUAL
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 266
8843: PUSH
8844: LD_INT 31
8846: EQUAL
8847: AND
8848: IFFALSE 8893
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8850: LD_EXP 57
8854: PPUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 56
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 120
// end ;
8893: PPOPN 3
8895: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 266
8905: PUSH
8906: LD_INT 7
8908: EQUAL
8909: PUSH
8910: LD_EXP 15
8914: NOT
8915: AND
8916: IFFALSE 8922
// Dial_LabUpgraded ;
8918: CALL 11643 0 0
// end ;
8922: PPOPN 1
8924: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8925: LD_VAR 0 1
8929: PUSH
8930: LD_INT 3
8932: EQUAL
8933: PUSH
8934: LD_VAR 0 2
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: AND
8943: PUSH
8944: LD_VAR 0 1
8948: PUSH
8949: LD_INT 2
8951: EQUAL
8952: PUSH
8953: LD_VAR 0 2
8957: PUSH
8958: LD_INT 3
8960: EQUAL
8961: AND
8962: OR
8963: IFFALSE 8985
// begin if dial_contactBlock then
8965: LD_EXP 16
8969: IFFALSE 8973
// exit ;
8971: GO 9029
// dial_contactBlock = true ;
8973: LD_ADDR_EXP 16
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// Dial_Contact ;
8981: CALL 13858 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 3
8992: EQUAL
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: LD_INT 6
9001: EQUAL
9002: AND
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: LD_INT 6
9011: EQUAL
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: LD_INT 3
9020: EQUAL
9021: AND
9022: OR
9023: IFFALSE 9029
// Lose_SelfAttack ;
9025: CALL 7561 0 0
// end ;
9029: PPOPN 2
9031: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9032: LD_VAR 0 1
9036: PUSH
9037: LD_EXP 42
9041: EQUAL
9042: IFFALSE 9048
// Lose_Burlak ;
9044: CALL 7531 0 0
// if unit = Gaydar then
9048: LD_VAR 0 1
9052: PUSH
9053: LD_EXP 54
9057: EQUAL
9058: IFFALSE 9064
// Lose_Gaydar ;
9060: CALL 7546 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9064: LD_VAR 0 1
9068: PPUSH
9069: CALL_OW 255
9073: PUSH
9074: LD_INT 3
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 247
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: AND
9092: IFFALSE 9108
// lostUnits = lostUnits + 1 ;
9094: LD_ADDR_EXP 24
9098: PUSH
9099: LD_EXP 24
9103: PUSH
9104: LD_INT 1
9106: PLUS
9107: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 255
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 247
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: AND
9136: PUSH
9137: LD_EXP 54
9141: PPUSH
9142: CALL_OW 305
9146: NOT
9147: AND
9148: IFFALSE 9164
// killedArabianUnits = killedArabianUnits + 1 ;
9150: LD_ADDR_EXP 22
9154: PUSH
9155: LD_EXP 22
9159: PUSH
9160: LD_INT 1
9162: PLUS
9163: ST_TO_ADDR
// if unit in firstAttackGroup then
9164: LD_VAR 0 1
9168: PUSH
9169: LD_EXP 64
9173: IN
9174: IFFALSE 9192
// firstAttackGroup = firstAttackGroup diff unit ;
9176: LD_ADDR_EXP 64
9180: PUSH
9181: LD_EXP 64
9185: PUSH
9186: LD_VAR 0 1
9190: DIFF
9191: ST_TO_ADDR
// end ;
9192: PPOPN 1
9194: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 6
9202: EQUAL
9203: IFFALSE 9217
// SetSide ( building , 6 ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 6
9212: PPUSH
9213: CALL_OW 235
// end ;
9217: PPOPN 3
9219: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_INT 22
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 51
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9404
// if GetTaskList ( i ) > 0 then
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 437
9293: PUSH
9294: LD_INT 0
9296: GREATER
9297: IFFALSE 9402
// for j = 1 to GetTaskList ( i ) do
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 437
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9400
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9322: LD_ADDR_VAR 0 4
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: CALL_OW 437
9336: PUSH
9337: LD_VAR 0 3
9341: ARRAY
9342: PUSH
9343: LD_INT 4
9345: ARRAY
9346: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 255
9356: PUSH
9357: LD_INT 6
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 2
9365: PPUSH
9366: CALL_OW 437
9370: PUSH
9371: LD_VAR 0 3
9375: ARRAY
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PUSH
9381: LD_STRING <
9383: EQUAL
9384: AND
9385: IFFALSE 9398
// SetTaskList ( i , [ ] ) ;
9387: LD_VAR 0 2
9391: PPUSH
9392: EMPTY
9393: PPUSH
9394: CALL_OW 446
// end ;
9398: GO 9319
9400: POP
9401: POP
9402: GO 9281
9404: POP
9405: POP
// end ; end_of_file
9406: PPOPN 8
9408: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9409: LD_INT 0
9411: PPUSH
9412: PPUSH
// if exist_mode then
9413: LD_VAR 0 2
9417: IFFALSE 9442
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_EXP 30
9428: PUSH
9429: LD_VAR 0 1
9433: STR
9434: PPUSH
9435: CALL_OW 34
9439: ST_TO_ADDR
9440: GO 9457
// unit := NewCharacter ( ident ) ;
9442: LD_ADDR_VAR 0 5
9446: PUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 25
9456: ST_TO_ADDR
// if class then
9457: LD_VAR 0 3
9461: IFFALSE 9477
// SetClass ( unit , class ) ;
9463: LD_VAR 0 5
9467: PPUSH
9468: LD_VAR 0 3
9472: PPUSH
9473: CALL_OW 336
// result := unit ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_VAR 0 5
9486: ST_TO_ADDR
// end ;
9487: LD_VAR 0 4
9491: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9492: LD_INT 0
9494: PPUSH
9495: PPUSH
// for unit in units do
9496: LD_ADDR_VAR 0 5
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9530
// PlaceUnitArea ( unit , area , spawnMode ) ;
9509: LD_VAR 0 5
9513: PPUSH
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: CALL_OW 49
9528: GO 9506
9530: POP
9531: POP
// end ;
9532: LD_VAR 0 4
9536: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9537: LD_INT 0
9539: PPUSH
9540: PPUSH
9541: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_VAR 0 1
9551: PUSH
9552: LD_EXP 42
9556: PUSH
9557: LD_EXP 43
9561: PUSH
9562: LD_EXP 46
9566: PUSH
9567: LD_EXP 47
9571: PUSH
9572: LD_EXP 44
9576: PUSH
9577: LD_EXP 45
9581: PUSH
9582: LD_EXP 48
9586: PUSH
9587: LD_EXP 49
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: DIFF
9602: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: ST_TO_ADDR
// if radio then
9627: LD_VAR 0 4
9631: IFFALSE 9680
// begin if GetSex ( speaker ) = sex_male then
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL_OW 258
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9664
// SayRadio ( speaker , dialogMID ) else
9648: LD_VAR 0 7
9652: PPUSH
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL_OW 94
9662: GO 9678
// SayRadio ( speaker , dialogFID ) ;
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: CALL_OW 94
// end else
9678: GO 9725
// begin if GetSex ( speaker ) = sex_male then
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 258
9689: PUSH
9690: LD_INT 1
9692: EQUAL
9693: IFFALSE 9711
// Say ( speaker , dialogMID ) else
9695: LD_VAR 0 7
9699: PPUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 88
9709: GO 9725
// Say ( speaker , dialogFID ) ;
9711: LD_VAR 0 7
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: CALL_OW 88
// end ; result := speaker ;
9725: LD_ADDR_VAR 0 5
9729: PUSH
9730: LD_VAR 0 7
9734: ST_TO_ADDR
// end ;
9735: LD_VAR 0 5
9739: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9740: LD_INT 0
9742: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 255
9752: PUSH
9753: LD_VAR 0 3
9757: EQUAL
9758: PUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 302
9768: AND
9769: IFFALSE 9791
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9771: LD_VAR 0 1
9775: PPUSH
9776: LD_EXP 29
9780: PUSH
9781: LD_VAR 0 2
9785: STR
9786: PPUSH
9787: CALL_OW 38
// end ;
9791: LD_VAR 0 4
9795: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// resultCharactersToSave = [ ] ;
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// for unit in characters do
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_VAR 0 1
9817: PUSH
9818: FOR_IN
9819: IFFALSE 9867
// if GetSide ( unit ) = side and IsOK ( unit ) then
9821: LD_VAR 0 5
9825: PPUSH
9826: CALL_OW 255
9830: PUSH
9831: LD_VAR 0 3
9835: EQUAL
9836: PUSH
9837: LD_VAR 0 5
9841: PPUSH
9842: CALL_OW 302
9846: AND
9847: IFFALSE 9865
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 6
9858: PUSH
9859: LD_VAR 0 5
9863: ADD
9864: ST_TO_ADDR
9865: GO 9818
9867: POP
9868: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9869: LD_VAR 0 6
9873: PPUSH
9874: LD_EXP 29
9878: PUSH
9879: LD_VAR 0 2
9883: STR
9884: PPUSH
9885: CALL_OW 38
// end ;
9889: LD_VAR 0 4
9893: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9901: LD_ADDR_VAR 0 3
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 3
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 50
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_VAR 0 3
9951: PUSH
9952: LD_EXP 42
9956: DIFF
9957: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_VAR 0 3
9967: PUSH
9968: LD_EXP 52
9972: DIFF
9973: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_STRING text
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: LD_INT 8
9987: PPUSH
9988: LD_INT -5
9990: PUSH
9991: LD_EXP 42
9995: PUSH
9996: LD_INT -6
9998: PUSH
9999: LD_INT -2
10001: PUSH
10002: LD_INT -3
10004: PUSH
10005: LD_INT -5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_VAR 0 3
10020: ADD
10021: PUSH
10022: LD_INT -6
10024: PUSH
10025: LD_INT -4
10027: PUSH
10028: LD_EXP 52
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: PPUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 42
10068: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 6
10076: PPUSH
10077: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10081: LD_EXP 52
10085: PPUSH
10086: LD_INT 6
10088: PPUSH
10089: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10093: LD_VAR 0 4
10097: PPUSH
10098: LD_INT 3
10100: PPUSH
10101: CALL_OW 235
// burlakTeam = selectedPeople ;
10105: LD_ADDR_EXP 55
10109: PUSH
10110: LD_VAR 0 4
10114: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10115: LD_ADDR_EXP 56
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 6
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10149: LD_ADDR_EXP 56
10153: PUSH
10154: LD_EXP 56
10158: PUSH
10159: LD_EXP 49
10163: DIFF
10164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_INT 6
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: PUSH
10199: FOR_IN
10200: IFFALSE 10224
// if IsInUnit ( i ) then
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 310
10211: IFFALSE 10222
// ComExitVehicle ( i ) ;
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 121
10222: GO 10199
10224: POP
10225: POP
// if not Gnyevko in selectedPeople then
10226: LD_EXP 43
10230: PUSH
10231: LD_VAR 0 4
10235: IN
10236: NOT
10237: IFFALSE 10254
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10239: LD_EXP 43
10243: PPUSH
10244: LD_STRING Gnyevko
10246: PPUSH
10247: LD_INT 6
10249: PPUSH
10250: CALL 9740 0 3
// if not Kovalyuk in selectedPeople then
10254: LD_EXP 45
10258: PUSH
10259: LD_VAR 0 4
10263: IN
10264: NOT
10265: IFFALSE 10282
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10267: LD_EXP 45
10271: PPUSH
10272: LD_STRING Kovalyuk
10274: PPUSH
10275: LD_INT 6
10277: PPUSH
10278: CALL 9740 0 3
// if not Kirilenkova in selectedPeople then
10282: LD_EXP 44
10286: PUSH
10287: LD_VAR 0 4
10291: IN
10292: NOT
10293: IFFALSE 10310
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10295: LD_EXP 44
10299: PPUSH
10300: LD_STRING Kirilenkova
10302: PPUSH
10303: LD_INT 6
10305: PPUSH
10306: CALL 9740 0 3
// if not Scholtze in selectedPeople then
10310: LD_EXP 48
10314: PUSH
10315: LD_VAR 0 4
10319: IN
10320: NOT
10321: IFFALSE 10338
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10323: LD_EXP 48
10327: PPUSH
10328: LD_STRING Scholtze
10330: PPUSH
10331: LD_INT 6
10333: PPUSH
10334: CALL 9740 0 3
// if not Belkov in selectedPeople then
10338: LD_EXP 46
10342: PUSH
10343: LD_VAR 0 4
10347: IN
10348: NOT
10349: IFFALSE 10366
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10351: LD_EXP 46
10355: PPUSH
10356: LD_STRING Belkov
10358: PPUSH
10359: LD_INT 6
10361: PPUSH
10362: CALL 9740 0 3
// if not Belkov2 in selectedPeople then
10366: LD_EXP 47
10370: PUSH
10371: LD_VAR 0 4
10375: IN
10376: NOT
10377: IFFALSE 10394
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_STRING Belkov2
10386: PPUSH
10387: LD_INT 6
10389: PPUSH
10390: CALL 9740 0 3
// others = popovTeam diff Popov ;
10394: LD_ADDR_VAR 0 5
10398: PUSH
10399: LD_EXP 56
10403: PUSH
10404: LD_EXP 52
10408: DIFF
10409: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_STRING other_survivors_with_popov
10417: PPUSH
10418: LD_INT 6
10420: PPUSH
10421: CALL 9796 0 3
// end ; end_of_file
10425: LD_VAR 0 1
10429: RET
// export function MissionIntro ; var i , unit ; begin
10430: LD_INT 0
10432: PPUSH
10433: PPUSH
10434: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10435: LD_EXP 42
10439: PPUSH
10440: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10444: LD_EXP 59
10448: PPUSH
10449: LD_STRING D1-RSol1-1
10451: PPUSH
10452: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-1
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-1
10475: PPUSH
10476: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10480: LD_EXP 53
10484: PPUSH
10485: LD_STRING D1-Pla-2
10487: PPUSH
10488: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10492: LD_EXP 42
10496: PPUSH
10497: LD_STRING D1-Bur-2
10499: PPUSH
10500: CALL_OW 88
// SelectCharacters ;
10504: CALL 9894 0 0
// InGameOff ;
10508: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10512: LD_STRING M1
10514: PPUSH
10515: CALL_OW 337
// SaveForQuickRestart ;
10519: CALL_OW 22
// for unit in popovTeam do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: LD_EXP 56
10532: PUSH
10533: FOR_IN
10534: IFFALSE 10606
// begin for i := 3 to russianCargoPath1 do
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: DOUBLE
10542: LD_INT 3
10544: DEC
10545: ST_TO_ADDR
10546: LD_EXP 34
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10595
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_EXP 34
10563: PUSH
10564: LD_VAR 0 2
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: LD_EXP 34
10578: PUSH
10579: LD_VAR 0 2
10583: ARRAY
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PPUSH
10589: CALL_OW 171
10593: GO 10551
10595: POP
10596: POP
// wait ( 0 0$01 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// end ;
10604: GO 10533
10606: POP
10607: POP
// end ;
10608: LD_VAR 0 1
10612: RET
// every 0 0$1 do var unit , driver ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin enable ;
10620: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10621: LD_INT 4
10623: PPUSH
10624: LD_INT 22
10626: PUSH
10627: LD_INT 6
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: NOT
10639: PUSH
10640: LD_INT 4
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 2
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: NOT
10690: AND
10691: IFFALSE 10695
// exit ;
10693: GO 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 4
10702: PPUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 6
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10774
// begin RemoveUnit ( unit ) ;
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10730: LD_VAR 0 1
10734: PUSH
10735: LD_EXP 56
10739: IN
10740: NOT
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 264
10751: PUSH
10752: LD_INT 51
10754: EQUAL
10755: AND
10756: IFFALSE 10772
// evacuatedCargos = evacuatedCargos + 1 ;
10758: LD_ADDR_EXP 10
10762: PUSH
10763: LD_EXP 10
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ST_TO_ADDR
// end ;
10772: GO 10718
10774: POP
10775: POP
// if canExitMap then
10776: LD_EXP 6
10780: IFFALSE 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 4
10789: PPUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 70
10836: PUSH
10837: FOR_IN
10838: IFFALSE 11044
// begin if GetType ( unit ) = unit_vehicle then
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 247
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: IFFALSE 10953
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 313
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 42
10873: PUSH
10874: LD_EXP 43
10878: PUSH
10879: LD_EXP 44
10883: PUSH
10884: LD_EXP 45
10888: PUSH
10889: LD_EXP 46
10893: PUSH
10894: LD_EXP 47
10898: PUSH
10899: LD_EXP 48
10903: PUSH
10904: LD_EXP 49
10908: PUSH
10909: LD_EXP 54
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: IN
10925: NOT
10926: IFFALSE 10953
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10928: LD_ADDR_EXP 62
10932: PUSH
10933: LD_EXP 62
10937: PUSH
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 313
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: ADD
10952: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 42
10962: PUSH
10963: LD_EXP 43
10967: PUSH
10968: LD_EXP 44
10972: PUSH
10973: LD_EXP 45
10977: PUSH
10978: LD_EXP 46
10982: PUSH
10983: LD_EXP 47
10987: PUSH
10988: LD_EXP 48
10992: PUSH
10993: LD_EXP 49
10997: PUSH
10998: LD_EXP 54
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: IN
11014: NOT
11015: IFFALSE 11033
// randomsToSave = randomsToSave ^ unit ;
11017: LD_ADDR_EXP 62
11021: PUSH
11022: LD_EXP 62
11026: PUSH
11027: LD_VAR 0 1
11031: ADD
11032: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 64
// end ;
11042: GO 10837
11044: POP
11045: POP
// end ;
11046: PPOPN 2
11048: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: PPUSH
11082: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 87
// InGameOn ;
11095: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11099: LD_EXP 53
11103: PPUSH
11104: LD_STRING D2a-Pla-1
11106: PPUSH
11107: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_INT 3
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 21
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: PUSH
11156: FOR_IN
11157: IFFALSE 11195
// if GetDistUnits ( building , unit ) < 10 then
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: CALL_OW 296
11173: PUSH
11174: LD_INT 10
11176: LESS
11177: IFFALSE 11193
// ComDismantle ( unit , building ) ;
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 167
11193: GO 11156
11195: POP
11196: POP
// repeat wait ( 0 0$1 ) ;
11197: LD_INT 35
11199: PPUSH
11200: CALL_OW 67
// until not IsPlaced ( building ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 305
11213: NOT
11214: IFFALSE 11197
// InGameOff ;
11216: CALL_OW 9
// end ;
11220: LD_VAR 0 2
11224: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11225: LD_EXP 49
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 6
11237: EQUAL
11238: IFFALSE 11320
11240: GO 11242
11242: DISABLE
11243: LD_INT 0
11245: PPUSH
// begin enable ;
11246: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11318
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_EXP 49
11293: PPUSH
11294: CALL_OW 296
11298: PUSH
11299: LD_INT 9
11301: LESS
11302: IFFALSE 11316
// SetSide ( Kuzmov , 3 ) ;
11304: LD_EXP 49
11308: PPUSH
11309: LD_INT 3
11311: PPUSH
11312: CALL_OW 235
11316: GO 11281
11318: POP
11319: POP
// end ;
11320: PPOPN 1
11322: END
// export function Dial_FinishDepot ; var i ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// startEvacuation = true ;
11327: LD_ADDR_EXP 8
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11335: LD_STRING MOutBuild
11337: PPUSH
11338: CALL_OW 337
// uc_side = 6 ;
11342: LD_ADDR_OWVAR 20
11346: PUSH
11347: LD_INT 6
11349: ST_TO_ADDR
// uc_nation = 3 ;
11350: LD_ADDR_OWVAR 21
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11358: LD_ADDR_OWVAR 37
11362: PUSH
11363: LD_INT 21
11365: ST_TO_ADDR
// vc_control = control_manual ;
11366: LD_ADDR_OWVAR 38
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// vc_engine = engine_combustion ;
11374: LD_ADDR_OWVAR 39
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11382: LD_ADDR_OWVAR 40
11386: PUSH
11387: LD_INT 51
11389: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11390: LD_ADDR_EXP 60
11394: PUSH
11395: CALL_OW 45
11399: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11400: LD_EXP 60
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11412: LD_EXP 60
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11427: LD_INT 1
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11437: CALL_OW 44
11441: PPUSH
11442: LD_EXP 60
11446: PPUSH
11447: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11451: LD_EXP 60
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 100
11461: PPUSH
11462: CALL_OW 291
// for i := 1 to 19 do
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 19
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11523
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11482: LD_EXP 60
11486: PPUSH
11487: LD_EXP 34
11491: PUSH
11492: LD_VAR 0 2
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_EXP 34
11506: PUSH
11507: LD_VAR 0 2
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: CALL_OW 171
11521: GO 11479
11523: POP
11524: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11525: LD_EXP 60
11529: PPUSH
11530: LD_INT 105
11532: PPUSH
11533: LD_INT 123
11535: PPUSH
11536: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11540: LD_EXP 60
11544: PPUSH
11545: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 21
11557: DEC
11558: ST_TO_ADDR
11559: LD_EXP 34
11563: PUSH
11564: FOR_TO
11565: IFFALSE 11608
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11567: LD_EXP 60
11571: PPUSH
11572: LD_EXP 34
11576: PUSH
11577: LD_VAR 0 2
11581: ARRAY
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_EXP 34
11591: PUSH
11592: LD_VAR 0 2
11596: ARRAY
11597: PUSH
11598: LD_INT 2
11600: ARRAY
11601: PPUSH
11602: CALL_OW 171
11606: GO 11564
11608: POP
11609: POP
// Say ( Burlak , D2-Bur-1 ) ;
11610: LD_EXP 42
11614: PPUSH
11615: LD_STRING D2-Bur-1
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11622: LD_EXP 53
11626: PPUSH
11627: LD_STRING D2-Pla-1
11629: PPUSH
11630: CALL_OW 94
// PrepareSecondBaseTeam ;
11634: CALL 3314 0 0
// end ;
11638: LD_VAR 0 1
11642: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
// dial_labUpgradedBlock = true ;
11647: LD_ADDR_EXP 15
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 3
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 26
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: PUSH
11711: LD_EXP 42
11715: PUSH
11716: LD_EXP 43
11720: PUSH
11721: LD_EXP 44
11725: PUSH
11726: LD_EXP 45
11730: PUSH
11731: LD_EXP 46
11735: PUSH
11736: LD_EXP 47
11740: PUSH
11741: LD_EXP 48
11745: PUSH
11746: LD_EXP 49
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11762: LD_EXP 48
11766: PPUSH
11767: CALL_OW 302
11771: PUSH
11772: LD_EXP 48
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_INT 3
11784: EQUAL
11785: AND
11786: IFFALSE 11814
// begin Say ( Scholtze , D5-Sch-1 ) ;
11788: LD_EXP 48
11792: PPUSH
11793: LD_STRING D5-Sch-1
11795: PPUSH
11796: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11800: LD_EXP 42
11804: PPUSH
11805: LD_STRING D5-Bur-1
11807: PPUSH
11808: CALL_OW 88
// end else
11812: GO 11949
// if randomMaleSci then
11814: LD_VAR 0 2
11818: IFFALSE 11850
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11820: LD_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_STRING D5-RSci1-1
11831: PPUSH
11832: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11836: LD_EXP 42
11840: PPUSH
11841: LD_STRING D5-Bur-1
11843: PPUSH
11844: CALL_OW 88
// end else
11848: GO 11949
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11850: LD_ADDR_VAR 0 2
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 4
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: PUSH
11906: LD_EXP 42
11910: PUSH
11911: EMPTY
11912: LIST
11913: DIFF
11914: ST_TO_ADDR
// if randomMaleSci then
11915: LD_VAR 0 2
11919: IFFALSE 11949
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_STRING D5-RSci1-1
11932: PPUSH
11933: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11937: LD_EXP 42
11941: PPUSH
11942: LD_STRING D5-Bur-1
11944: PPUSH
11945: CALL_OW 88
// end ; end ; end ;
11949: LD_VAR 0 1
11953: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11954: LD_EXP 60
11958: PPUSH
11959: LD_INT 105
11961: PPUSH
11962: LD_INT 123
11964: PPUSH
11965: CALL_OW 297
11969: PUSH
11970: LD_INT 12
11972: LESS
11973: IFFALSE 11999
11975: GO 11977
11977: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11978: LD_EXP 60
11982: PPUSH
11983: CALL_OW 313
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_STRING D2a-RSol1-1
11994: PPUSH
11995: CALL_OW 88
11999: END
// every 0 0$15 trigger startEvacuation do
12000: LD_EXP 8
12004: IFFALSE 12014
12006: GO 12008
12008: DISABLE
// begin enable ;
12009: ENABLE
// CreateEvacuateUnit ;
12010: CALL 2544 0 0
// end ;
12014: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
12015: LD_EXP 10
12019: PUSH
12020: LD_INT 3
12022: GREATEREQUAL
12023: IFFALSE 12122
12025: GO 12027
12027: DISABLE
// begin if IsOk ( Kuzmov ) then
12028: LD_EXP 49
12032: PPUSH
12033: CALL_OW 302
12037: IFFALSE 12107
// begin DialogueOn ;
12039: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-1
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-1
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-2
12074: PPUSH
12075: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12079: LD_EXP 42
12083: PPUSH
12084: LD_STRING D2b-Bur-2
12086: PPUSH
12087: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12091: LD_EXP 49
12095: PPUSH
12096: LD_STRING D2b-Kuz-3
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// end ; Query ( Q1 ) ;
12107: LD_STRING Q1
12109: PPUSH
12110: CALL_OW 97
// canStealCargo = true ;
12114: LD_ADDR_EXP 11
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ;
12122: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12123: LD_EXP 11
12127: IFFALSE 12425
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
// begin enable ;
12136: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 6
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 34
12164: PUSH
12165: LD_INT 51
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PUSH
12182: FOR_IN
12183: IFFALSE 12423
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 3
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 50
12212: PUSH
12213: EMPTY
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12419
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 296
12243: PUSH
12244: LD_INT 8
12246: LESS
12247: PUSH
12248: LD_VAR 0 2
12252: PUSH
12253: LD_EXP 13
12257: IN
12258: NOT
12259: AND
12260: PUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 289
12273: PUSH
12274: LD_INT 0
12276: GREATER
12277: AND
12278: IFFALSE 12417
// begin stealCargos = stealCargos ^ cargo ;
12280: LD_ADDR_EXP 13
12284: PUSH
12285: LD_EXP 13
12289: PUSH
12290: LD_VAR 0 2
12294: ADD
12295: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12296: LD_STRING QQrSteal
12298: PPUSH
12299: CALL_OW 97
12303: PUSH
12304: LD_INT 1
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12385
12312: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12313: LD_ADDR_EXP 12
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_INT 1
12325: PLUS
12326: ST_TO_ADDR
// DialogueOn ;
12327: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12331: LD_EXP 42
12335: PPUSH
12336: LD_STRING DQrSteal#1-Bur-1
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 14
12354: PPUSH
12355: CALL_OW 113
// AddComUnload ( cargo ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 92
12375: PPUSH
12376: LD_INT 177
12378: PPUSH
12379: CALL_OW 171
// end ; 2 :
12383: GO 12417
12385: LD_INT 2
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12416
12393: POP
// begin DialogueOn ;
12394: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12398: LD_EXP 42
12402: PPUSH
12403: LD_STRING DQrSteal#2-Bur-1
12405: PPUSH
12406: CALL_OW 88
// DialogueOff ;
12410: CALL_OW 7
// end ; end ;
12414: GO 12417
12416: POP
// end ;
12417: GO 12226
12419: POP
12420: POP
12421: GO 12182
12423: POP
12424: POP
// end ;
12425: PPOPN 2
12427: END
// every 0 0$12 trigger stealWarmCount = 3 do
12428: LD_EXP 12
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: IFFALSE 12508
12438: GO 12440
12440: DISABLE
// begin DialogueOn ;
12441: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-1
12452: PPUSH
12453: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12457: LD_EXP 42
12461: PPUSH
12462: LD_STRING D3A-Bur-1
12464: PPUSH
12465: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12469: LD_EXP 53
12473: PPUSH
12474: LD_STRING D3A-Pla-2
12476: PPUSH
12477: CALL_OW 94
// if IsOK ( Kuzmov ) then
12481: LD_EXP 49
12485: PPUSH
12486: CALL_OW 302
12490: IFFALSE 12504
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12492: LD_EXP 49
12496: PPUSH
12497: LD_STRING D3A-Kuz-2
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$10 trigger stealWarmCount = 6 do
12509: LD_EXP 12
12513: PUSH
12514: LD_INT 6
12516: EQUAL
12517: IFFALSE 12566
12519: GO 12521
12521: DISABLE
// begin DialogueOn ;
12522: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-1
12533: PPUSH
12534: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12538: LD_EXP 42
12542: PPUSH
12543: LD_STRING D3B-Bur-1
12545: PPUSH
12546: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12550: LD_EXP 53
12554: PPUSH
12555: LD_STRING D3B-Pla-2
12557: PPUSH
12558: CALL_OW 94
// DialogueOff ;
12562: CALL_OW 7
// end ;
12566: END
// every 0 0$10 trigger stealWarmCount = 7 do
12567: LD_EXP 12
12571: PUSH
12572: LD_INT 7
12574: EQUAL
12575: IFFALSE 12659
12577: GO 12579
12579: DISABLE
// begin DialogueOn ;
12580: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-1
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-1
12603: PPUSH
12604: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12608: LD_EXP 53
12612: PPUSH
12613: LD_STRING D3C-Pla-2
12615: PPUSH
12616: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12620: LD_EXP 42
12624: PPUSH
12625: LD_STRING D3C-Bur-2
12627: PPUSH
12628: CALL_OW 88
// if IsOK ( Kuzmov ) then
12632: LD_EXP 49
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12655
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12643: LD_EXP 49
12647: PPUSH
12648: LD_STRING D3C-Kuz-2
12650: PPUSH
12651: CALL_OW 88
// DialogueOff ;
12655: CALL_OW 7
// end ;
12659: END
// every 0 0$10 trigger stealWarmCount = 8 do
12660: LD_EXP 12
12664: PUSH
12665: LD_INT 8
12667: EQUAL
12668: IFFALSE 12860
12670: GO 12672
12672: DISABLE
// begin canStealCargo = false ;
12673: LD_ADDR_EXP 11
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// DialogueOn ;
12681: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12685: LD_EXP 53
12689: PPUSH
12690: LD_STRING D3D-Pla-1
12692: PPUSH
12693: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12697: LD_EXP 42
12701: PPUSH
12702: LD_STRING D3D-Bur-1
12704: PPUSH
12705: CALL_OW 88
// if kurinOpinion = 0 then
12709: LD_EXP 2
12713: PUSH
12714: LD_INT 0
12716: EQUAL
12717: IFFALSE 12737
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12719: LD_EXP 53
12723: PPUSH
12724: LD_STRING D3E-Pla-1
12726: PPUSH
12727: CALL_OW 94
// Lose_Arrest ;
12731: CALL 7576 0 0
// exit ;
12735: GO 12860
// end ; if meetBelkovBrother = 1 then
12737: LD_EXP 3
12741: PUSH
12742: LD_INT 1
12744: EQUAL
12745: IFFALSE 12765
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12747: LD_EXP 53
12751: PPUSH
12752: LD_STRING D3E-Pla-1a
12754: PPUSH
12755: CALL_OW 94
// Lose_Arrest ;
12759: CALL 7576 0 0
// exit ;
12763: GO 12860
// end ; if platonovOpinion = 0 then
12765: LD_EXP 1
12769: PUSH
12770: LD_INT 0
12772: EQUAL
12773: IFFALSE 12793
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12775: LD_EXP 53
12779: PPUSH
12780: LD_STRING D3E-Pla-1b
12782: PPUSH
12783: CALL_OW 94
// Lose_Arrest ;
12787: CALL 7576 0 0
// exit ;
12791: GO 12860
// end ; if platonovOpinion = 1 then
12793: LD_EXP 1
12797: PUSH
12798: LD_INT 1
12800: EQUAL
12801: IFFALSE 12821
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12803: LD_EXP 53
12807: PPUSH
12808: LD_STRING D3E-Pla-1c
12810: PPUSH
12811: CALL_OW 94
// Lose_Arrest ;
12815: CALL 7576 0 0
// exit ;
12819: GO 12860
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12821: LD_EXP 53
12825: PPUSH
12826: LD_STRING D3D-Pla-2
12828: PPUSH
12829: CALL_OW 94
// if IsOK ( Kuzmov ) then
12833: LD_EXP 49
12837: PPUSH
12838: CALL_OW 302
12842: IFFALSE 12856
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12844: LD_EXP 49
12848: PPUSH
12849: LD_STRING D3D-Kuz-2
12851: PPUSH
12852: CALL_OW 88
// DialogueOff ;
12856: CALL_OW 7
// end ;
12860: END
// every 0 0$20 do var allyUntis ;
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// wait ( 0 0$10 ) ;
12868: LD_INT 350
12870: PPUSH
12871: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 60
12895: PUSH
12896: EMPTY
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 56
12916: DIFF
12917: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 1
12927: PUSH
12928: LD_EXP 54
12932: DIFF
12933: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_VAR 0 1
12943: PUSH
12944: LD_EXP 49
12948: DIFF
12949: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12950: LD_ADDR_VAR 0 1
12954: PUSH
12955: LD_VAR 0 1
12959: PUSH
12960: LD_EXP 57
12964: DIFF
12965: ST_TO_ADDR
// if not allyUntis then
12966: LD_VAR 0 1
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 12999
// ComUnload ( allyUntis ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12984: LD_VAR 0 1
12988: PPUSH
12989: LD_INT 92
12991: PPUSH
12992: LD_INT 176
12994: PPUSH
12995: CALL_OW 171
// end ;
12999: PPOPN 1
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: IFFALSE 13025
13014: GO 13016
13016: DISABLE
// begin startEvacuation = false ;
13017: LD_ADDR_EXP 8
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// end ;
13025: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13026: LD_EXP 10
13030: PUSH
13031: LD_EXP 14
13035: GREATEREQUAL
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 6
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 69
13083: PUSH
13084: LD_EXP 57
13088: DIFF
13089: NOT
13090: AND
13091: IFFALSE 13686
13093: GO 13095
13095: DISABLE
// begin wait ( 1 1$00 ) ;
13096: LD_INT 2100
13098: PPUSH
13099: CALL_OW 67
// DialogueOn ;
13103: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13107: LD_EXP 53
13111: PPUSH
13112: LD_STRING D4-Pla-1
13114: PPUSH
13115: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13119: LD_EXP 42
13123: PPUSH
13124: LD_STRING D4-Bur-1
13126: PPUSH
13127: CALL_OW 88
// DialogueOff ;
13131: CALL_OW 7
// wait ( 0 0$2 ) ;
13135: LD_INT 70
13137: PPUSH
13138: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13142: LD_EXP 49
13146: PPUSH
13147: CALL_OW 302
13151: PUSH
13152: LD_EXP 49
13156: PPUSH
13157: CALL_OW 255
13161: PUSH
13162: LD_INT 3
13164: EQUAL
13165: AND
13166: IFFALSE 13448
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13168: LD_EXP 49
13172: PPUSH
13173: LD_STRING D4-Kuz-1
13175: PPUSH
13176: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13180: LD_EXP 46
13184: PPUSH
13185: CALL_OW 302
13189: PUSH
13190: LD_EXP 46
13194: PPUSH
13195: CALL_OW 255
13199: PUSH
13200: LD_INT 3
13202: EQUAL
13203: AND
13204: IFFALSE 13220
// Say ( Belkov , D4-Bel-1 ) else
13206: LD_EXP 46
13210: PPUSH
13211: LD_STRING D4-Bel-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13258
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13220: LD_EXP 47
13224: PPUSH
13225: CALL_OW 302
13229: PUSH
13230: LD_EXP 47
13234: PPUSH
13235: CALL_OW 255
13239: PUSH
13240: LD_INT 3
13242: EQUAL
13243: AND
13244: IFFALSE 13258
// Say ( Belkov2 , D4-Bel-1 ) ;
13246: LD_EXP 47
13250: PPUSH
13251: LD_STRING D4-Bel-1
13253: PPUSH
13254: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13258: LD_EXP 42
13262: PPUSH
13263: LD_STRING D4-Bur-2
13265: PPUSH
13266: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13270: LD_EXP 43
13274: PPUSH
13275: CALL_OW 302
13279: PUSH
13280: LD_EXP 43
13284: PPUSH
13285: CALL_OW 255
13289: PUSH
13290: LD_INT 3
13292: EQUAL
13293: AND
13294: IFFALSE 13320
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13296: LD_EXP 43
13300: PPUSH
13301: LD_STRING D4-Gny-2
13303: PPUSH
13304: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13308: LD_EXP 42
13312: PPUSH
13313: LD_STRING D4-Bur-3
13315: PPUSH
13316: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13320: LD_EXP 42
13324: PPUSH
13325: LD_STRING D4-Bur-3a
13327: PPUSH
13328: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13332: LD_EXP 46
13336: PPUSH
13337: CALL_OW 302
13341: PUSH
13342: LD_EXP 46
13346: PPUSH
13347: CALL_OW 255
13351: PUSH
13352: LD_INT 3
13354: EQUAL
13355: AND
13356: IFFALSE 13372
// Say ( Belkov , D4-Bel-3 ) else
13358: LD_EXP 46
13362: PPUSH
13363: LD_STRING D4-Bel-3
13365: PPUSH
13366: CALL_OW 88
13370: GO 13410
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13372: LD_EXP 47
13376: PPUSH
13377: CALL_OW 302
13381: PUSH
13382: LD_EXP 47
13386: PPUSH
13387: CALL_OW 255
13391: PUSH
13392: LD_INT 3
13394: EQUAL
13395: AND
13396: IFFALSE 13410
// Say ( Belkov2 , D4-Bel-3 ) ;
13398: LD_EXP 47
13402: PPUSH
13403: LD_STRING D4-Bel-3
13405: PPUSH
13406: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13410: LD_EXP 45
13414: PPUSH
13415: CALL_OW 302
13419: PUSH
13420: LD_EXP 45
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: AND
13434: IFFALSE 13448
// Say ( Kovalyuk , D4-Kov-3 ) ;
13436: LD_EXP 45
13440: PPUSH
13441: LD_STRING D4-Kov-3
13443: PPUSH
13444: CALL_OW 88
// end ; PrepareFirstAttack ;
13448: CALL 4199 0 0
// firstAttack = true ;
13452: LD_ADDR_EXP 18
13456: PUSH
13457: LD_INT 1
13459: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13460: LD_INT 350
13462: PPUSH
13463: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13467: LD_EXP 42
13471: PPUSH
13472: LD_STRING D7-Bur-1
13474: PPUSH
13475: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13479: LD_EXP 64
13483: PPUSH
13484: LD_INT 135
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 134
13496: PUSH
13497: LD_INT 19
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 132
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 128
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 123
13526: PUSH
13527: LD_INT 37
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 118
13536: PUSH
13537: LD_INT 45
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 51
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 106
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 99
13566: PUSH
13567: LD_INT 62
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 93
13576: PUSH
13577: LD_INT 67
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 86
13586: PUSH
13587: LD_INT 72
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 78
13596: PUSH
13597: LD_INT 75
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 71
13606: PUSH
13607: LD_INT 81
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 69
13616: PUSH
13617: LD_INT 88
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 71
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 74
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 80
13646: PUSH
13647: LD_INT 113
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 11
13681: PPUSH
13682: CALL 5042 0 5
// end ;
13686: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13687: LD_EXP 64
13691: PPUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: NOT
13707: PUSH
13708: LD_EXP 18
13712: AND
13713: IFFALSE 13772
13715: GO 13717
13717: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13718: LD_EXP 57
13722: PPUSH
13723: CALL_OW 122
// wait ( 0 0$1 ) ;
13727: LD_INT 35
13729: PPUSH
13730: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13734: LD_EXP 57
13738: PPUSH
13739: LD_INT 114
13741: PPUSH
13742: LD_INT 114
13744: PPUSH
13745: CALL_OW 111
// wait ( 0 0$15 ) ;
13749: LD_INT 525
13751: PPUSH
13752: CALL_OW 67
// firstAttack = false ;
13756: LD_ADDR_EXP 18
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// enableAttacks = true ;
13764: LD_ADDR_EXP 17
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// end ;
13772: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13773: LD_OWVAR 67
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: PUSH
13782: LD_EXP 57
13786: AND
13787: IFFALSE 13855
13789: GO 13791
13791: DISABLE
13792: LD_INT 0
13794: PPUSH
// begin enable ;
13795: ENABLE
// for un in secondBaseTeam do
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_EXP 57
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13853
// if IsInArea ( un , HillArea ) then
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 5
13816: PPUSH
13817: CALL_OW 308
13821: IFFALSE 13851
// begin SetSide ( un , 3 ) ;
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13835: LD_ADDR_EXP 57
13839: PUSH
13840: LD_EXP 57
13844: PUSH
13845: LD_VAR 0 1
13849: DIFF
13850: ST_TO_ADDR
// end ;
13851: GO 13806
13853: POP
13854: POP
// end ;
13855: PPOPN 1
13857: END
// export function Dial_Contact ; begin
13858: LD_INT 0
13860: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13861: LD_EXP 42
13865: PPUSH
13866: LD_STRING D7-Bur-1a
13868: PPUSH
13869: CALL_OW 88
// wait ( 0 0$12 ) ;
13873: LD_INT 420
13875: PPUSH
13876: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13880: LD_EXP 42
13884: PPUSH
13885: LD_STRING D7-Bur-1b
13887: PPUSH
13888: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13892: LD_EXP 46
13896: PPUSH
13897: CALL_OW 302
13901: PUSH
13902: LD_EXP 46
13906: PPUSH
13907: CALL_OW 255
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: AND
13916: IFFALSE 13932
// Say ( Belkov , D7-Bel-1 ) else
13918: LD_EXP 46
13922: PPUSH
13923: LD_STRING D7-Bel-1
13925: PPUSH
13926: CALL_OW 88
13930: GO 13970
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13932: LD_EXP 47
13936: PPUSH
13937: CALL_OW 302
13941: PUSH
13942: LD_EXP 47
13946: PPUSH
13947: CALL_OW 255
13951: PUSH
13952: LD_INT 3
13954: EQUAL
13955: AND
13956: IFFALSE 13970
// Say ( Belkov2 , D7-Bel-1 ) ;
13958: LD_EXP 47
13962: PPUSH
13963: LD_STRING D7-Bel-1
13965: PPUSH
13966: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13970: LD_EXP 49
13974: PPUSH
13975: CALL_OW 302
13979: PUSH
13980: LD_EXP 49
13984: PPUSH
13985: CALL_OW 255
13989: PUSH
13990: LD_INT 3
13992: EQUAL
13993: AND
13994: IFFALSE 14008
// Say ( Kuzmov , D7-Kuz-1 ) ;
13996: LD_EXP 49
14000: PPUSH
14001: LD_STRING D7-Kuz-1
14003: PPUSH
14004: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
14008: LD_EXP 45
14012: PPUSH
14013: CALL_OW 302
14017: PUSH
14018: LD_EXP 45
14022: PPUSH
14023: CALL_OW 255
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: AND
14032: IFFALSE 14046
// Say ( Kovalyuk , D7-Kov-1 ) ;
14034: LD_EXP 45
14038: PPUSH
14039: LD_STRING D7-Kov-1
14041: PPUSH
14042: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14046: LD_EXP 48
14050: PPUSH
14051: CALL_OW 302
14055: PUSH
14056: LD_EXP 48
14060: PPUSH
14061: CALL_OW 255
14065: PUSH
14066: LD_INT 3
14068: EQUAL
14069: AND
14070: IFFALSE 14084
// Say ( Scholtze , D7-Sch-1 ) ;
14072: LD_EXP 48
14076: PPUSH
14077: LD_STRING D7-Sch-1
14079: PPUSH
14080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 21
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: PPUSH
14124: LD_STRING D7-RSol1-1
14126: PPUSH
14127: LD_STRING 
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: CALL 9537 0 4
// PrepareHeike ;
14137: CALL 3519 0 0
// wait ( 0 0$10 ) ;
14141: LD_INT 350
14143: PPUSH
14144: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14148: LD_EXP 63
14152: PPUSH
14153: LD_STRING D7a-Hke-1
14155: PPUSH
14156: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14160: LD_EXP 42
14164: PPUSH
14165: LD_STRING D7a-Bur-1
14167: PPUSH
14168: CALL_OW 88
// wait ( 0 0$50 ) ;
14172: LD_INT 1750
14174: PPUSH
14175: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14179: LD_EXP 49
14183: PPUSH
14184: CALL_OW 302
14188: PUSH
14189: LD_EXP 49
14193: PPUSH
14194: CALL_OW 255
14198: PUSH
14199: LD_INT 3
14201: EQUAL
14202: AND
14203: IFFALSE 14219
// Say ( Kuzmov , D8-Kuz-1 ) else
14205: LD_EXP 49
14209: PPUSH
14210: LD_STRING D8-Kuz-1
14212: PPUSH
14213: CALL_OW 88
14217: GO 14272
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14219: LD_INT 22
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 26
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: PPUSH
14259: LD_STRING D8-RSol1-1
14261: PPUSH
14262: LD_STRING 
14264: PPUSH
14265: LD_INT 0
14267: PPUSH
14268: CALL 9537 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14272: LD_EXP 42
14276: PPUSH
14277: LD_STRING D8-Bur-1
14279: PPUSH
14280: CALL_OW 88
// end ;
14284: LD_VAR 0 1
14288: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14289: LD_EXP 54
14293: PPUSH
14294: CALL_OW 305
14298: NOT
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 50
14322: PUSH
14323: EMPTY
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: AND
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 3
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 50
14360: PUSH
14361: EMPTY
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: PUSH
14374: LD_INT 5
14376: LESS
14377: AND
14378: PUSH
14379: LD_INT 5
14381: PPUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: PUSH
14400: LD_INT 3
14402: GREATER
14403: AND
14404: IFFALSE 14413
14406: GO 14408
14408: DISABLE
// Lose_ArabBreakthrough ;
14409: CALL 7591 0 0
14413: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14414: LD_EXP 19
14418: PUSH
14419: LD_EXP 38
14423: GREATEREQUAL
14424: IFFALSE 14648
14426: GO 14428
14428: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-1
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-1
14448: PPUSH
14449: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14453: LD_EXP 53
14457: PPUSH
14458: LD_STRING D9-Pla-2
14460: PPUSH
14461: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14465: LD_EXP 42
14469: PPUSH
14470: LD_STRING D9-Bur-2
14472: PPUSH
14473: CALL_OW 88
// wait ( 2 2$0 ) ;
14477: LD_INT 4200
14479: PPUSH
14480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14491: LD_INT 12
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 428
14501: NOT
14502: IFFALSE 14484
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14504: LD_EXP 54
14508: PPUSH
14509: LD_INT 12
14511: PPUSH
14512: LD_INT 3
14514: PPUSH
14515: LD_INT 2
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 50
// arabianCanExitMap = true ;
14525: LD_ADDR_EXP 7
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14533: LD_INT 35
14535: PPUSH
14536: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14540: LD_EXP 54
14544: PPUSH
14545: CALL_OW 87
// DialogueOn ;
14549: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-1
14560: PPUSH
14561: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14565: LD_EXP 42
14569: PPUSH
14570: LD_STRING D10-Bur-1
14572: PPUSH
14573: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-2
14584: PPUSH
14585: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14589: LD_EXP 52
14593: PPUSH
14594: LD_STRING D10-Pop-2
14596: PPUSH
14597: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14601: LD_EXP 54
14605: PPUSH
14606: LD_STRING D10-Gay-3
14608: PPUSH
14609: CALL_OW 94
// DialogueOff ;
14613: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14617: LD_EXP 54
14621: PPUSH
14622: LD_INT 36
14624: PPUSH
14625: LD_INT 38
14627: PPUSH
14628: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14632: LD_EXP 54
14636: PPUSH
14637: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14641: LD_STRING M2
14643: PPUSH
14644: CALL_OW 337
// end ;
14648: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14649: LD_EXP 7
14653: IFFALSE 14726
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
// begin enable ;
14661: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14662: LD_INT 22
14664: PUSH
14665: LD_INT 2
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: PPUSH
14675: CALL_OW 69
14679: PPUSH
14680: LD_INT 13
14682: PPUSH
14683: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 13
14694: PPUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 70
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14724
// RemoveUnit ( unit ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 64
14722: GO 14710
14724: POP
14725: POP
// end ;
14726: PPOPN 1
14728: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14729: LD_EXP 20
14733: NOT
14734: IFFALSE 15124
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
// begin enable ;
14743: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: PUSH
14778: FOR_IN
14779: IFFALSE 15122
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_EXP 54
14790: PPUSH
14791: CALL_OW 296
14795: PUSH
14796: LD_INT 6
14798: LESS
14799: IFFALSE 15120
// begin SetSide ( Gaydar , 3 ) ;
14801: LD_EXP 54
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: CALL_OW 235
// ComWalk ( Gaydar ) ;
14813: LD_EXP 54
14817: PPUSH
14818: CALL_OW 138
// saveGaydar = true ;
14822: LD_ADDR_EXP 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14830: LD_INT 35
14832: PPUSH
14833: CALL_OW 67
// DialogueOn ;
14837: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14841: LD_EXP 54
14845: PPUSH
14846: LD_STRING D11-Gay-1
14848: PPUSH
14849: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14853: LD_EXP 42
14857: PPUSH
14858: LD_EXP 54
14862: PPUSH
14863: CALL_OW 296
14867: PUSH
14868: LD_INT 6
14870: LESS
14871: NOT
14872: IFFALSE 14972
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 50
14911: PUSH
14912: EMPTY
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_EXP 54
14930: DIFF
14931: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_EXP 54
14941: PPUSH
14942: CALL_OW 74
14946: PPUSH
14947: LD_STRING D11-RSol1-1
14949: PPUSH
14950: CALL_OW 88
// gaydarWaitForBurlak = true ;
14954: LD_ADDR_EXP 21
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// DialogueOff ;
14962: CALL_OW 7
// exit ;
14966: POP
14967: POP
14968: GO 15124
// end else
14970: GO 15120
// begin Say ( Gaydar , D11-Gay-2 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-2
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-2
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-3
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-3
15015: PPUSH
15016: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15020: LD_EXP 54
15024: PPUSH
15025: LD_STRING D11-Gay-4
15027: PPUSH
15028: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15032: LD_EXP 42
15036: PPUSH
15037: LD_STRING D11-Bur-4
15039: PPUSH
15040: CALL_OW 88
// wait ( 0 0$2 ) ;
15044: LD_INT 70
15046: PPUSH
15047: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15051: LD_EXP 52
15055: PPUSH
15056: LD_STRING D12-Pop-1
15058: PPUSH
15059: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15063: LD_EXP 42
15067: PPUSH
15068: LD_STRING D12-Bur-1
15070: PPUSH
15071: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15075: LD_EXP 53
15079: PPUSH
15080: LD_STRING D12-Pla-1
15082: PPUSH
15083: CALL_OW 94
// DialogueOff ;
15087: CALL_OW 7
// canExitMap = true ;
15091: LD_ADDR_EXP 6
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15099: LD_STRING MFinal
15101: PPUSH
15102: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15106: LD_INT 4
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 424
// exit ;
15116: POP
15117: POP
15118: GO 15124
// end ; end ; end ;
15120: GO 14778
15122: POP
15123: POP
// end ;
15124: PPOPN 2
15126: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15127: LD_EXP 42
15131: PPUSH
15132: LD_EXP 54
15136: PPUSH
15137: CALL_OW 296
15141: PUSH
15142: LD_INT 6
15144: LESS
15145: PUSH
15146: LD_EXP 21
15150: AND
15151: IFFALSE 15304
15153: GO 15155
15155: DISABLE
// begin DialogueOn ;
15156: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-2
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-2
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-3
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-3
15203: PPUSH
15204: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15208: LD_EXP 54
15212: PPUSH
15213: LD_STRING D11-Gay-4
15215: PPUSH
15216: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15220: LD_EXP 42
15224: PPUSH
15225: LD_STRING D11-Bur-4
15227: PPUSH
15228: CALL_OW 88
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15239: LD_EXP 52
15243: PPUSH
15244: LD_STRING D12-Pop-1
15246: PPUSH
15247: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15251: LD_EXP 42
15255: PPUSH
15256: LD_STRING D12-Bur-1
15258: PPUSH
15259: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15263: LD_EXP 53
15267: PPUSH
15268: LD_STRING D12-Pla-1
15270: PPUSH
15271: CALL_OW 94
// DialogueOff ;
15275: CALL_OW 7
// canExitMap = true ;
15279: LD_ADDR_EXP 6
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15287: LD_STRING MFinal
15289: PPUSH
15290: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15294: LD_INT 4
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 424
// end ;
15304: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15305: LD_INT 22
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: PUSH
15334: LD_INT 0
15336: EQUAL
15337: PUSH
15338: LD_EXP 6
15342: AND
15343: IFFALSE 15352
15345: GO 15347
15347: DISABLE
// FinishMission ; end_of_file
15348: CALL 7709 0 0
15352: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15353: LD_EXP 17
15357: PUSH
15358: LD_EXP 19
15362: PUSH
15363: LD_INT 0
15365: EQUAL
15366: AND
15367: PUSH
15368: LD_EXP 19
15372: PUSH
15373: LD_EXP 38
15377: LESS
15378: AND
15379: IFFALSE 15431
15381: GO 15383
15383: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15384: LD_INT 7
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 2
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15410: LD_EXP 65
15414: PPUSH
15415: EMPTY
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 1
15425: NEG
15426: PPUSH
15427: CALL 5042 0 5
// end ;
15431: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15432: LD_EXP 17
15436: PUSH
15437: LD_EXP 19
15441: PUSH
15442: LD_INT 0
15444: GREATEREQUAL
15445: AND
15446: PUSH
15447: LD_EXP 19
15451: PUSH
15452: LD_EXP 38
15456: LESS
15457: AND
15458: IFFALSE 15688
15460: GO 15462
15462: DISABLE
// begin currentWave = currentWave + 1 ;
15463: LD_ADDR_EXP 19
15467: PUSH
15468: LD_EXP 19
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// PrepareArabianVehicles ;
15477: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15481: LD_EXP 65
15485: PPUSH
15486: LD_INT 135
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 134
15498: PUSH
15499: LD_INT 19
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 132
15508: PUSH
15509: LD_INT 26
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 128
15518: PUSH
15519: LD_INT 31
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 123
15528: PUSH
15529: LD_INT 37
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 118
15538: PUSH
15539: LD_INT 45
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 112
15548: PUSH
15549: LD_INT 51
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 106
15558: PUSH
15559: LD_INT 57
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 99
15568: PUSH
15569: LD_INT 62
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 93
15578: PUSH
15579: LD_INT 67
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 86
15588: PUSH
15589: LD_INT 72
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 78
15598: PUSH
15599: LD_INT 75
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 71
15608: PUSH
15609: LD_INT 81
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 69
15618: PUSH
15619: LD_INT 88
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 71
15628: PUSH
15629: LD_INT 95
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 74
15638: PUSH
15639: LD_INT 103
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 80
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: LD_INT 0
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: LD_INT 11
15683: PPUSH
15684: CALL 5042 0 5
// end ;
15688: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15689: LD_EXP 17
15693: PUSH
15694: LD_OWVAR 67
15698: PUSH
15699: LD_INT 2
15701: EQUAL
15702: AND
15703: PUSH
15704: LD_EXP 19
15708: PUSH
15709: LD_INT 0
15711: GREATEREQUAL
15712: AND
15713: PUSH
15714: LD_EXP 19
15718: PUSH
15719: LD_EXP 38
15723: LESS
15724: AND
15725: IFFALSE 15853
15727: GO 15729
15729: DISABLE
// begin PrepareArabianVehicles ;
15730: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15734: LD_EXP 65
15738: PPUSH
15739: LD_INT 135
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 134
15751: PUSH
15752: LD_INT 19
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 132
15761: PUSH
15762: LD_INT 26
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 128
15771: PUSH
15772: LD_INT 31
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 123
15781: PUSH
15782: LD_INT 37
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 118
15791: PUSH
15792: LD_INT 45
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 112
15801: PUSH
15802: LD_INT 51
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: LD_INT 57
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 99
15821: PUSH
15822: LD_INT 62
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PPUSH
15840: LD_INT 0
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: LD_INT 11
15848: PPUSH
15849: CALL 5042 0 5
// end ;
15853: END
// every 1 1$0 trigger enableAttacks and Difficulty >= 3 and currentWave >= 0 and currentWave < enemyWaves do
15854: LD_EXP 17
15858: PUSH
15859: LD_OWVAR 67
15863: PUSH
15864: LD_INT 3
15866: GREATEREQUAL
15867: AND
15868: PUSH
15869: LD_EXP 19
15873: PUSH
15874: LD_INT 0
15876: GREATEREQUAL
15877: AND
15878: PUSH
15879: LD_EXP 19
15883: PUSH
15884: LD_EXP 38
15888: LESS
15889: AND
15890: IFFALSE 16084
15892: GO 15894
15894: DISABLE
// begin PrepareArabianVehicles ;
15895: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15899: LD_EXP 65
15903: PPUSH
15904: LD_INT 135
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 134
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 132
15926: PUSH
15927: LD_INT 26
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 128
15936: PUSH
15937: LD_INT 31
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 123
15946: PUSH
15947: LD_INT 37
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 118
15956: PUSH
15957: LD_INT 45
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 112
15966: PUSH
15967: LD_INT 51
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 57
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 99
15986: PUSH
15987: LD_INT 62
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 104
15996: PUSH
15997: LD_INT 71
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 110
16006: PUSH
16007: LD_INT 78
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 119
16016: PUSH
16017: LD_INT 88
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 128
16026: PUSH
16027: LD_INT 97
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 135
16036: PUSH
16037: LD_INT 106
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 140
16046: PUSH
16047: LD_INT 153
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_INT 11
16079: PPUSH
16080: CALL 5042 0 5
// end ;
16084: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16085: LD_EXP 17
16089: PUSH
16090: LD_EXP 19
16094: PUSH
16095: LD_INT 1
16097: EQUAL
16098: AND
16099: PUSH
16100: LD_EXP 19
16104: PUSH
16105: LD_EXP 38
16109: LESS
16110: AND
16111: IFFALSE 16188
16113: GO 16115
16115: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16116: LD_INT 7
16118: PPUSH
16119: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16123: LD_EXP 65
16127: PPUSH
16128: LD_INT 157
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 194
16140: PUSH
16141: LD_INT 124
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 174
16150: PUSH
16151: LD_INT 158
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 151
16160: PUSH
16161: LD_INT 164
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: LD_INT 0
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 1
16182: NEG
16183: PPUSH
16184: CALL 5042 0 5
// end ;
16188: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16189: LD_EXP 17
16193: PUSH
16194: LD_EXP 19
16198: PUSH
16199: LD_INT 1
16201: EQUAL
16202: AND
16203: PUSH
16204: LD_EXP 19
16208: PUSH
16209: LD_EXP 38
16213: LESS
16214: AND
16215: IFFALSE 16364
16217: GO 16219
16219: DISABLE
// begin wait ( 1 1$30 ) ;
16220: LD_INT 3150
16222: PPUSH
16223: CALL_OW 67
// currentWave = currentWave + 1 ;
16227: LD_ADDR_EXP 19
16231: PUSH
16232: LD_EXP 19
16236: PUSH
16237: LD_INT 1
16239: PLUS
16240: ST_TO_ADDR
// PrepareArabianVehicles ;
16241: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16245: LD_EXP 65
16249: PPUSH
16250: LD_INT 135
16252: PUSH
16253: LD_INT 4
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 134
16262: PUSH
16263: LD_INT 19
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 132
16272: PUSH
16273: LD_INT 26
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 128
16282: PUSH
16283: LD_INT 31
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 123
16292: PUSH
16293: LD_INT 37
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 118
16302: PUSH
16303: LD_INT 45
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 112
16312: PUSH
16313: LD_INT 51
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 106
16322: PUSH
16323: LD_INT 57
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 99
16332: PUSH
16333: LD_INT 62
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 11
16359: PPUSH
16360: CALL 5042 0 5
// end ;
16364: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16365: LD_EXP 17
16369: PUSH
16370: LD_OWVAR 67
16374: PUSH
16375: LD_INT 2
16377: EQUAL
16378: AND
16379: PUSH
16380: LD_EXP 19
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: AND
16389: PUSH
16390: LD_EXP 19
16394: PUSH
16395: LD_EXP 38
16399: LESS
16400: AND
16401: IFFALSE 16595
16403: GO 16405
16405: DISABLE
// begin PrepareArabianVehicles ;
16406: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16410: LD_EXP 65
16414: PPUSH
16415: LD_INT 135
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 134
16427: PUSH
16428: LD_INT 19
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 132
16437: PUSH
16438: LD_INT 26
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 128
16447: PUSH
16448: LD_INT 31
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 123
16457: PUSH
16458: LD_INT 37
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 118
16467: PUSH
16468: LD_INT 45
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: LD_INT 51
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: LD_INT 57
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 99
16497: PUSH
16498: LD_INT 62
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 104
16507: PUSH
16508: LD_INT 71
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 110
16517: PUSH
16518: LD_INT 78
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 119
16527: PUSH
16528: LD_INT 88
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 128
16537: PUSH
16538: LD_INT 97
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 135
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 140
16557: PUSH
16558: LD_INT 153
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: LD_INT 11
16590: PPUSH
16591: CALL 5042 0 5
// end ;
16595: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 1 and currentWave < enemyWaves do
16596: LD_EXP 17
16600: PUSH
16601: LD_OWVAR 67
16605: PUSH
16606: LD_INT 3
16608: GREATEREQUAL
16609: AND
16610: PUSH
16611: LD_EXP 19
16615: PUSH
16616: LD_INT 1
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_EXP 19
16625: PUSH
16626: LD_EXP 38
16630: LESS
16631: AND
16632: IFFALSE 16848
16634: GO 16636
16636: DISABLE
// begin PrepareArabianVehicles ;
16637: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16641: LD_EXP 65
16645: PPUSH
16646: LD_INT 135
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 134
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 132
16668: PUSH
16669: LD_INT 26
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 128
16678: PUSH
16679: LD_INT 31
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 123
16688: PUSH
16689: LD_INT 37
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: LD_INT 45
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 112
16708: PUSH
16709: LD_INT 51
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 57
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 99
16728: PUSH
16729: LD_INT 62
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 93
16738: PUSH
16739: LD_INT 67
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 86
16748: PUSH
16749: LD_INT 72
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 78
16758: PUSH
16759: LD_INT 75
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 71
16768: PUSH
16769: LD_INT 81
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 69
16778: PUSH
16779: LD_INT 88
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 71
16788: PUSH
16789: LD_INT 95
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 74
16798: PUSH
16799: LD_INT 103
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 80
16808: PUSH
16809: LD_INT 113
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: LD_INT 0
16837: PPUSH
16838: LD_INT 1
16840: PPUSH
16841: LD_INT 11
16843: PPUSH
16844: CALL 5042 0 5
// end ;
16848: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16849: LD_EXP 17
16853: PUSH
16854: LD_EXP 19
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: AND
16863: PUSH
16864: LD_EXP 19
16868: PUSH
16869: LD_EXP 38
16873: LESS
16874: AND
16875: IFFALSE 16952
16877: GO 16879
16879: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16880: LD_INT 7
16882: PPUSH
16883: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16887: LD_EXP 65
16891: PPUSH
16892: LD_INT 157
16894: PUSH
16895: LD_INT 31
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 194
16904: PUSH
16905: LD_INT 124
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 174
16914: PUSH
16915: LD_INT 158
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 151
16924: PUSH
16925: LD_INT 164
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: LD_INT 1
16946: NEG
16947: PPUSH
16948: CALL 5042 0 5
// end ;
16952: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16953: LD_EXP 17
16957: PUSH
16958: LD_EXP 19
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: AND
16967: PUSH
16968: LD_EXP 19
16972: PUSH
16973: LD_EXP 38
16977: LESS
16978: AND
16979: IFFALSE 17216
16981: GO 16983
16983: DISABLE
// begin wait ( 1 1$30 ) ;
16984: LD_INT 3150
16986: PPUSH
16987: CALL_OW 67
// currentWave = currentWave + 1 ;
16991: LD_ADDR_EXP 19
16995: PUSH
16996: LD_EXP 19
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: ST_TO_ADDR
// PrepareArabianVehicles ;
17005: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17009: LD_EXP 65
17013: PPUSH
17014: LD_INT 135
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 134
17026: PUSH
17027: LD_INT 19
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 132
17036: PUSH
17037: LD_INT 26
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 128
17046: PUSH
17047: LD_INT 31
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 123
17056: PUSH
17057: LD_INT 37
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 118
17066: PUSH
17067: LD_INT 45
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 112
17076: PUSH
17077: LD_INT 51
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 57
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 99
17096: PUSH
17097: LD_INT 62
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 93
17106: PUSH
17107: LD_INT 67
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 86
17116: PUSH
17117: LD_INT 72
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 78
17126: PUSH
17127: LD_INT 75
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 71
17136: PUSH
17137: LD_INT 81
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 69
17146: PUSH
17147: LD_INT 88
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 71
17156: PUSH
17157: LD_INT 95
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 74
17166: PUSH
17167: LD_INT 103
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 80
17176: PUSH
17177: LD_INT 113
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: LD_INT 11
17211: PPUSH
17212: CALL 5042 0 5
// end ;
17216: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17217: LD_EXP 17
17221: PUSH
17222: LD_OWVAR 67
17226: PUSH
17227: LD_INT 2
17229: EQUAL
17230: AND
17231: PUSH
17232: LD_EXP 19
17236: PUSH
17237: LD_INT 2
17239: EQUAL
17240: AND
17241: PUSH
17242: LD_EXP 19
17246: PUSH
17247: LD_EXP 38
17251: LESS
17252: AND
17253: IFFALSE 17447
17255: GO 17257
17257: DISABLE
// begin PrepareArabianVehicles ;
17258: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17262: LD_EXP 65
17266: PPUSH
17267: LD_INT 135
17269: PUSH
17270: LD_INT 4
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 134
17279: PUSH
17280: LD_INT 19
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 132
17289: PUSH
17290: LD_INT 26
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 128
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 123
17309: PUSH
17310: LD_INT 37
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 118
17319: PUSH
17320: LD_INT 45
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 112
17329: PUSH
17330: LD_INT 51
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 106
17339: PUSH
17340: LD_INT 57
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 99
17349: PUSH
17350: LD_INT 62
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 104
17359: PUSH
17360: LD_INT 71
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 110
17369: PUSH
17370: LD_INT 78
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 119
17379: PUSH
17380: LD_INT 88
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 128
17389: PUSH
17390: LD_INT 97
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 135
17399: PUSH
17400: LD_INT 106
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 140
17409: PUSH
17410: LD_INT 153
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 11
17442: PPUSH
17443: CALL 5042 0 5
// end ;
17447: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 2 and currentWave < enemyWaves do
17448: LD_EXP 17
17452: PUSH
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 3
17460: GREATEREQUAL
17461: AND
17462: PUSH
17463: LD_EXP 19
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_EXP 19
17477: PUSH
17478: LD_EXP 38
17482: LESS
17483: AND
17484: IFFALSE 17678
17486: GO 17488
17488: DISABLE
// begin PrepareArabianVehicles ;
17489: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17493: LD_EXP 65
17497: PPUSH
17498: LD_INT 135
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 134
17510: PUSH
17511: LD_INT 19
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 132
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 128
17530: PUSH
17531: LD_INT 31
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 123
17540: PUSH
17541: LD_INT 37
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: LD_INT 45
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 112
17560: PUSH
17561: LD_INT 51
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 106
17570: PUSH
17571: LD_INT 57
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 99
17580: PUSH
17581: LD_INT 62
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 104
17590: PUSH
17591: LD_INT 71
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 110
17600: PUSH
17601: LD_INT 78
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 119
17610: PUSH
17611: LD_INT 88
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 128
17620: PUSH
17621: LD_INT 97
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 135
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 153
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PPUSH
17665: LD_INT 0
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 11
17673: PPUSH
17674: CALL 5042 0 5
// end ;
17678: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17679: LD_EXP 17
17683: PUSH
17684: LD_EXP 19
17688: PUSH
17689: LD_INT 3
17691: EQUAL
17692: AND
17693: PUSH
17694: LD_EXP 19
17698: PUSH
17699: LD_EXP 38
17703: LESS
17704: AND
17705: IFFALSE 17782
17707: GO 17709
17709: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17710: LD_INT 7
17712: PPUSH
17713: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17717: LD_EXP 65
17721: PPUSH
17722: LD_INT 157
17724: PUSH
17725: LD_INT 31
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 194
17734: PUSH
17735: LD_INT 124
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 174
17744: PUSH
17745: LD_INT 158
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 151
17754: PUSH
17755: LD_INT 164
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PPUSH
17768: LD_INT 0
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 1
17776: NEG
17777: PPUSH
17778: CALL 5042 0 5
// end ;
17782: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17783: LD_EXP 17
17787: PUSH
17788: LD_EXP 19
17792: PUSH
17793: LD_INT 3
17795: EQUAL
17796: AND
17797: PUSH
17798: LD_EXP 19
17802: PUSH
17803: LD_EXP 38
17807: LESS
17808: AND
17809: IFFALSE 18046
17811: GO 17813
17813: DISABLE
// begin wait ( 1 1$30 ) ;
17814: LD_INT 3150
17816: PPUSH
17817: CALL_OW 67
// currentWave = currentWave + 1 ;
17821: LD_ADDR_EXP 19
17825: PUSH
17826: LD_EXP 19
17830: PUSH
17831: LD_INT 1
17833: PLUS
17834: ST_TO_ADDR
// PrepareArabianVehicles ;
17835: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17839: LD_EXP 65
17843: PPUSH
17844: LD_INT 135
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 134
17856: PUSH
17857: LD_INT 19
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 132
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 128
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 123
17886: PUSH
17887: LD_INT 37
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: LD_INT 45
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 112
17906: PUSH
17907: LD_INT 51
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 106
17916: PUSH
17917: LD_INT 57
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 99
17926: PUSH
17927: LD_INT 62
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 93
17936: PUSH
17937: LD_INT 67
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 86
17946: PUSH
17947: LD_INT 72
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 78
17956: PUSH
17957: LD_INT 75
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 71
17966: PUSH
17967: LD_INT 81
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 69
17976: PUSH
17977: LD_INT 88
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 71
17986: PUSH
17987: LD_INT 95
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 74
17996: PUSH
17997: LD_INT 103
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 80
18006: PUSH
18007: LD_INT 113
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_INT 11
18041: PPUSH
18042: CALL 5042 0 5
// end ;
18046: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18047: LD_EXP 17
18051: PUSH
18052: LD_OWVAR 67
18056: PUSH
18057: LD_INT 2
18059: EQUAL
18060: AND
18061: PUSH
18062: LD_EXP 19
18066: PUSH
18067: LD_INT 3
18069: EQUAL
18070: AND
18071: PUSH
18072: LD_EXP 19
18076: PUSH
18077: LD_EXP 38
18081: LESS
18082: AND
18083: IFFALSE 18277
18085: GO 18087
18087: DISABLE
// begin PrepareArabianVehicles ;
18088: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18092: LD_EXP 65
18096: PPUSH
18097: LD_INT 135
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 134
18109: PUSH
18110: LD_INT 19
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 132
18119: PUSH
18120: LD_INT 26
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 128
18129: PUSH
18130: LD_INT 31
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 123
18139: PUSH
18140: LD_INT 37
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 118
18149: PUSH
18150: LD_INT 45
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 112
18159: PUSH
18160: LD_INT 51
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 57
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 99
18179: PUSH
18180: LD_INT 62
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 104
18189: PUSH
18190: LD_INT 71
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 110
18199: PUSH
18200: LD_INT 78
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 119
18209: PUSH
18210: LD_INT 88
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 128
18219: PUSH
18220: LD_INT 97
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 135
18229: PUSH
18230: LD_INT 106
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 140
18239: PUSH
18240: LD_INT 153
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PPUSH
18264: LD_INT 0
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_INT 11
18272: PPUSH
18273: CALL 5042 0 5
// end ;
18277: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 3 and currentWave < enemyWaves do
18278: LD_EXP 17
18282: PUSH
18283: LD_OWVAR 67
18287: PUSH
18288: LD_INT 3
18290: GREATEREQUAL
18291: AND
18292: PUSH
18293: LD_EXP 19
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: AND
18302: PUSH
18303: LD_EXP 19
18307: PUSH
18308: LD_EXP 38
18312: LESS
18313: AND
18314: IFFALSE 18508
18316: GO 18318
18318: DISABLE
// begin PrepareArabianVehicles ;
18319: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18323: LD_EXP 65
18327: PPUSH
18328: LD_INT 135
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 134
18340: PUSH
18341: LD_INT 19
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 132
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 128
18360: PUSH
18361: LD_INT 31
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 123
18370: PUSH
18371: LD_INT 37
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 118
18380: PUSH
18381: LD_INT 45
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 112
18390: PUSH
18391: LD_INT 51
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 106
18400: PUSH
18401: LD_INT 57
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 99
18410: PUSH
18411: LD_INT 62
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 104
18420: PUSH
18421: LD_INT 71
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 110
18430: PUSH
18431: LD_INT 78
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 119
18440: PUSH
18441: LD_INT 88
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 128
18450: PUSH
18451: LD_INT 97
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 135
18460: PUSH
18461: LD_INT 106
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 140
18470: PUSH
18471: LD_INT 153
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_INT 11
18503: PPUSH
18504: CALL 5042 0 5
// end ;
18508: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18509: LD_EXP 54
18513: PPUSH
18514: CALL_OW 305
18518: PUSH
18519: LD_EXP 23
18523: PUSH
18524: LD_INT 5
18526: LESS
18527: AND
18528: IFFALSE 18538
18530: GO 18532
18532: DISABLE
// begin PrepareArabianKiller ;
18533: CALL 4090 0 0
// enable ;
18537: ENABLE
// end ; end_of_file
18538: END
// export function SetAchievements ; begin
18539: LD_INT 0
18541: PPUSH
// if stealWarmCount = 0 then
18542: LD_EXP 12
18546: PUSH
18547: LD_INT 0
18549: EQUAL
18550: IFFALSE 18559
// SetAchievement ( ACH_ENO ) ;
18552: LD_STRING ACH_ENO
18554: PPUSH
18555: CALL_OW 543
// end ;
18559: LD_VAR 0 1
18563: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18564: LD_EXP 25
18568: PUSH
18569: LD_INT 6
18571: GREATEREQUAL
18572: IFFALSE 18584
18574: GO 18576
18576: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18577: LD_STRING ACH_DEFENSE
18579: PPUSH
18580: CALL_OW 543
18584: END
// every 1 trigger killedArabianUnits >= 25 do
18585: LD_EXP 22
18589: PUSH
18590: LD_INT 25
18592: GREATEREQUAL
18593: IFFALSE 18605
18595: GO 18597
18597: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18598: LD_STRING ACH_ARAB
18600: PPUSH
18601: CALL_OW 543
18605: END
// every 0 0$1 do
18606: GO 18608
18608: DISABLE
// begin enable ;
18609: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18610: LD_STRING updateTimer(
18612: PUSH
18613: LD_OWVAR 1
18617: STR
18618: PUSH
18619: LD_STRING );
18621: STR
18622: PPUSH
18623: CALL_OW 559
// end ;
18627: END
// on MapStart ( p ) do begin if streamModeActive then
18628: LD_EXP 66
18632: IFFALSE 18641
// DefineStreamItems ( true ) ;
18634: LD_INT 1
18636: PPUSH
18637: CALL 20289 0 1
// UpdateFactoryWaypoints ( ) ;
18641: CALL 34036 0 0
// end ;
18645: PPOPN 1
18647: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18648: LD_INT 0
18650: PPUSH
// if p2 = 100 then
18651: LD_VAR 0 2
18655: PUSH
18656: LD_INT 100
18658: EQUAL
18659: IFFALSE 19662
// begin if not StreamModeActive then
18661: LD_EXP 66
18665: NOT
18666: IFFALSE 18676
// StreamModeActive := true ;
18668: LD_ADDR_EXP 66
18672: PUSH
18673: LD_INT 1
18675: ST_TO_ADDR
// if p3 = 0 then
18676: LD_VAR 0 3
18680: PUSH
18681: LD_INT 0
18683: EQUAL
18684: IFFALSE 18690
// InitStreamMode ;
18686: CALL 19825 0 0
// if p3 = 1 then
18690: LD_VAR 0 3
18694: PUSH
18695: LD_INT 1
18697: EQUAL
18698: IFFALSE 18708
// sRocket := true ;
18700: LD_ADDR_EXP 71
18704: PUSH
18705: LD_INT 1
18707: ST_TO_ADDR
// if p3 = 2 then
18708: LD_VAR 0 3
18712: PUSH
18713: LD_INT 2
18715: EQUAL
18716: IFFALSE 18726
// sSpeed := true ;
18718: LD_ADDR_EXP 70
18722: PUSH
18723: LD_INT 1
18725: ST_TO_ADDR
// if p3 = 3 then
18726: LD_VAR 0 3
18730: PUSH
18731: LD_INT 3
18733: EQUAL
18734: IFFALSE 18744
// sEngine := true ;
18736: LD_ADDR_EXP 72
18740: PUSH
18741: LD_INT 1
18743: ST_TO_ADDR
// if p3 = 4 then
18744: LD_VAR 0 3
18748: PUSH
18749: LD_INT 4
18751: EQUAL
18752: IFFALSE 18762
// sSpec := true ;
18754: LD_ADDR_EXP 69
18758: PUSH
18759: LD_INT 1
18761: ST_TO_ADDR
// if p3 = 5 then
18762: LD_VAR 0 3
18766: PUSH
18767: LD_INT 5
18769: EQUAL
18770: IFFALSE 18780
// sLevel := true ;
18772: LD_ADDR_EXP 73
18776: PUSH
18777: LD_INT 1
18779: ST_TO_ADDR
// if p3 = 6 then
18780: LD_VAR 0 3
18784: PUSH
18785: LD_INT 6
18787: EQUAL
18788: IFFALSE 18798
// sArmoury := true ;
18790: LD_ADDR_EXP 74
18794: PUSH
18795: LD_INT 1
18797: ST_TO_ADDR
// if p3 = 7 then
18798: LD_VAR 0 3
18802: PUSH
18803: LD_INT 7
18805: EQUAL
18806: IFFALSE 18816
// sRadar := true ;
18808: LD_ADDR_EXP 75
18812: PUSH
18813: LD_INT 1
18815: ST_TO_ADDR
// if p3 = 8 then
18816: LD_VAR 0 3
18820: PUSH
18821: LD_INT 8
18823: EQUAL
18824: IFFALSE 18834
// sBunker := true ;
18826: LD_ADDR_EXP 76
18830: PUSH
18831: LD_INT 1
18833: ST_TO_ADDR
// if p3 = 9 then
18834: LD_VAR 0 3
18838: PUSH
18839: LD_INT 9
18841: EQUAL
18842: IFFALSE 18852
// sHack := true ;
18844: LD_ADDR_EXP 77
18848: PUSH
18849: LD_INT 1
18851: ST_TO_ADDR
// if p3 = 10 then
18852: LD_VAR 0 3
18856: PUSH
18857: LD_INT 10
18859: EQUAL
18860: IFFALSE 18870
// sFire := true ;
18862: LD_ADDR_EXP 78
18866: PUSH
18867: LD_INT 1
18869: ST_TO_ADDR
// if p3 = 11 then
18870: LD_VAR 0 3
18874: PUSH
18875: LD_INT 11
18877: EQUAL
18878: IFFALSE 18888
// sRefresh := true ;
18880: LD_ADDR_EXP 79
18884: PUSH
18885: LD_INT 1
18887: ST_TO_ADDR
// if p3 = 12 then
18888: LD_VAR 0 3
18892: PUSH
18893: LD_INT 12
18895: EQUAL
18896: IFFALSE 18906
// sExp := true ;
18898: LD_ADDR_EXP 80
18902: PUSH
18903: LD_INT 1
18905: ST_TO_ADDR
// if p3 = 13 then
18906: LD_VAR 0 3
18910: PUSH
18911: LD_INT 13
18913: EQUAL
18914: IFFALSE 18924
// sDepot := true ;
18916: LD_ADDR_EXP 81
18920: PUSH
18921: LD_INT 1
18923: ST_TO_ADDR
// if p3 = 14 then
18924: LD_VAR 0 3
18928: PUSH
18929: LD_INT 14
18931: EQUAL
18932: IFFALSE 18942
// sFlag := true ;
18934: LD_ADDR_EXP 82
18938: PUSH
18939: LD_INT 1
18941: ST_TO_ADDR
// if p3 = 15 then
18942: LD_VAR 0 3
18946: PUSH
18947: LD_INT 15
18949: EQUAL
18950: IFFALSE 18960
// sKamikadze := true ;
18952: LD_ADDR_EXP 90
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// if p3 = 16 then
18960: LD_VAR 0 3
18964: PUSH
18965: LD_INT 16
18967: EQUAL
18968: IFFALSE 18978
// sTroll := true ;
18970: LD_ADDR_EXP 91
18974: PUSH
18975: LD_INT 1
18977: ST_TO_ADDR
// if p3 = 17 then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 17
18985: EQUAL
18986: IFFALSE 18996
// sSlow := true ;
18988: LD_ADDR_EXP 92
18992: PUSH
18993: LD_INT 1
18995: ST_TO_ADDR
// if p3 = 18 then
18996: LD_VAR 0 3
19000: PUSH
19001: LD_INT 18
19003: EQUAL
19004: IFFALSE 19014
// sLack := true ;
19006: LD_ADDR_EXP 93
19010: PUSH
19011: LD_INT 1
19013: ST_TO_ADDR
// if p3 = 19 then
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 19
19021: EQUAL
19022: IFFALSE 19032
// sTank := true ;
19024: LD_ADDR_EXP 95
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// if p3 = 20 then
19032: LD_VAR 0 3
19036: PUSH
19037: LD_INT 20
19039: EQUAL
19040: IFFALSE 19050
// sRemote := true ;
19042: LD_ADDR_EXP 96
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// if p3 = 21 then
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 21
19057: EQUAL
19058: IFFALSE 19068
// sPowell := true ;
19060: LD_ADDR_EXP 97
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// if p3 = 22 then
19068: LD_VAR 0 3
19072: PUSH
19073: LD_INT 22
19075: EQUAL
19076: IFFALSE 19086
// sTeleport := true ;
19078: LD_ADDR_EXP 100
19082: PUSH
19083: LD_INT 1
19085: ST_TO_ADDR
// if p3 = 23 then
19086: LD_VAR 0 3
19090: PUSH
19091: LD_INT 23
19093: EQUAL
19094: IFFALSE 19104
// sOilTower := true ;
19096: LD_ADDR_EXP 102
19100: PUSH
19101: LD_INT 1
19103: ST_TO_ADDR
// if p3 = 24 then
19104: LD_VAR 0 3
19108: PUSH
19109: LD_INT 24
19111: EQUAL
19112: IFFALSE 19122
// sShovel := true ;
19114: LD_ADDR_EXP 103
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
// if p3 = 25 then
19122: LD_VAR 0 3
19126: PUSH
19127: LD_INT 25
19129: EQUAL
19130: IFFALSE 19140
// sSheik := true ;
19132: LD_ADDR_EXP 104
19136: PUSH
19137: LD_INT 1
19139: ST_TO_ADDR
// if p3 = 26 then
19140: LD_VAR 0 3
19144: PUSH
19145: LD_INT 26
19147: EQUAL
19148: IFFALSE 19158
// sEarthquake := true ;
19150: LD_ADDR_EXP 106
19154: PUSH
19155: LD_INT 1
19157: ST_TO_ADDR
// if p3 = 27 then
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 27
19165: EQUAL
19166: IFFALSE 19176
// sAI := true ;
19168: LD_ADDR_EXP 107
19172: PUSH
19173: LD_INT 1
19175: ST_TO_ADDR
// if p3 = 28 then
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 28
19183: EQUAL
19184: IFFALSE 19194
// sCargo := true ;
19186: LD_ADDR_EXP 110
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// if p3 = 29 then
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 29
19201: EQUAL
19202: IFFALSE 19212
// sDLaser := true ;
19204: LD_ADDR_EXP 111
19208: PUSH
19209: LD_INT 1
19211: ST_TO_ADDR
// if p3 = 30 then
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 30
19219: EQUAL
19220: IFFALSE 19230
// sExchange := true ;
19222: LD_ADDR_EXP 112
19226: PUSH
19227: LD_INT 1
19229: ST_TO_ADDR
// if p3 = 31 then
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 31
19237: EQUAL
19238: IFFALSE 19248
// sFac := true ;
19240: LD_ADDR_EXP 113
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if p3 = 32 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 32
19255: EQUAL
19256: IFFALSE 19266
// sPower := true ;
19258: LD_ADDR_EXP 114
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 33 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 33
19273: EQUAL
19274: IFFALSE 19284
// sRandom := true ;
19276: LD_ADDR_EXP 115
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 34 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 34
19291: EQUAL
19292: IFFALSE 19302
// sShield := true ;
19294: LD_ADDR_EXP 116
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 35 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 35
19309: EQUAL
19310: IFFALSE 19320
// sTime := true ;
19312: LD_ADDR_EXP 117
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 36 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 36
19327: EQUAL
19328: IFFALSE 19338
// sTools := true ;
19330: LD_ADDR_EXP 118
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 101 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 101
19345: EQUAL
19346: IFFALSE 19356
// sSold := true ;
19348: LD_ADDR_EXP 83
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 102 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 102
19363: EQUAL
19364: IFFALSE 19374
// sDiff := true ;
19366: LD_ADDR_EXP 84
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// if p3 = 103 then
19374: LD_VAR 0 3
19378: PUSH
19379: LD_INT 103
19381: EQUAL
19382: IFFALSE 19392
// sFog := true ;
19384: LD_ADDR_EXP 87
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// if p3 = 104 then
19392: LD_VAR 0 3
19396: PUSH
19397: LD_INT 104
19399: EQUAL
19400: IFFALSE 19410
// sReset := true ;
19402: LD_ADDR_EXP 88
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// if p3 = 105 then
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 105
19417: EQUAL
19418: IFFALSE 19428
// sSun := true ;
19420: LD_ADDR_EXP 89
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// if p3 = 106 then
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 106
19435: EQUAL
19436: IFFALSE 19446
// sTiger := true ;
19438: LD_ADDR_EXP 85
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// if p3 = 107 then
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 107
19453: EQUAL
19454: IFFALSE 19464
// sBomb := true ;
19456: LD_ADDR_EXP 86
19460: PUSH
19461: LD_INT 1
19463: ST_TO_ADDR
// if p3 = 108 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 108
19471: EQUAL
19472: IFFALSE 19482
// sWound := true ;
19474: LD_ADDR_EXP 94
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 109 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 109
19489: EQUAL
19490: IFFALSE 19500
// sBetray := true ;
19492: LD_ADDR_EXP 98
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 110 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 110
19507: EQUAL
19508: IFFALSE 19518
// sContamin := true ;
19510: LD_ADDR_EXP 99
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 111 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 111
19525: EQUAL
19526: IFFALSE 19536
// sOil := true ;
19528: LD_ADDR_EXP 101
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// if p3 = 112 then
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 112
19543: EQUAL
19544: IFFALSE 19554
// sStu := true ;
19546: LD_ADDR_EXP 105
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// if p3 = 113 then
19554: LD_VAR 0 3
19558: PUSH
19559: LD_INT 113
19561: EQUAL
19562: IFFALSE 19572
// sBazooka := true ;
19564: LD_ADDR_EXP 108
19568: PUSH
19569: LD_INT 1
19571: ST_TO_ADDR
// if p3 = 114 then
19572: LD_VAR 0 3
19576: PUSH
19577: LD_INT 114
19579: EQUAL
19580: IFFALSE 19590
// sMortar := true ;
19582: LD_ADDR_EXP 109
19586: PUSH
19587: LD_INT 1
19589: ST_TO_ADDR
// if p3 = 115 then
19590: LD_VAR 0 3
19594: PUSH
19595: LD_INT 115
19597: EQUAL
19598: IFFALSE 19608
// sRanger := true ;
19600: LD_ADDR_EXP 119
19604: PUSH
19605: LD_INT 1
19607: ST_TO_ADDR
// if p3 = 116 then
19608: LD_VAR 0 3
19612: PUSH
19613: LD_INT 116
19615: EQUAL
19616: IFFALSE 19626
// sComputer := true ;
19618: LD_ADDR_EXP 120
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 117 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 117
19633: EQUAL
19634: IFFALSE 19644
// s30 := true ;
19636: LD_ADDR_EXP 121
19640: PUSH
19641: LD_INT 1
19643: ST_TO_ADDR
// if p3 = 118 then
19644: LD_VAR 0 3
19648: PUSH
19649: LD_INT 118
19651: EQUAL
19652: IFFALSE 19662
// s60 := true ;
19654: LD_ADDR_EXP 122
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// end ; if p2 = 101 then
19662: LD_VAR 0 2
19666: PUSH
19667: LD_INT 101
19669: EQUAL
19670: IFFALSE 19798
// begin case p3 of 1 :
19672: LD_VAR 0 3
19676: PUSH
19677: LD_INT 1
19679: DOUBLE
19680: EQUAL
19681: IFTRUE 19685
19683: GO 19692
19685: POP
// hHackUnlimitedResources ; 2 :
19686: CALL 31896 0 0
19690: GO 19798
19692: LD_INT 2
19694: DOUBLE
19695: EQUAL
19696: IFTRUE 19700
19698: GO 19707
19700: POP
// hHackSetLevel10 ; 3 :
19701: CALL 32029 0 0
19705: GO 19798
19707: LD_INT 3
19709: DOUBLE
19710: EQUAL
19711: IFTRUE 19715
19713: GO 19722
19715: POP
// hHackSetLevel10YourUnits ; 4 :
19716: CALL 32114 0 0
19720: GO 19798
19722: LD_INT 4
19724: DOUBLE
19725: EQUAL
19726: IFTRUE 19730
19728: GO 19737
19730: POP
// hHackInvincible ; 5 :
19731: CALL 32562 0 0
19735: GO 19798
19737: LD_INT 5
19739: DOUBLE
19740: EQUAL
19741: IFTRUE 19745
19743: GO 19752
19745: POP
// hHackInvisible ; 6 :
19746: CALL 32673 0 0
19750: GO 19798
19752: LD_INT 6
19754: DOUBLE
19755: EQUAL
19756: IFTRUE 19760
19758: GO 19767
19760: POP
// hHackChangeYourSide ; 7 :
19761: CALL 32730 0 0
19765: GO 19798
19767: LD_INT 7
19769: DOUBLE
19770: EQUAL
19771: IFTRUE 19775
19773: GO 19782
19775: POP
// hHackChangeUnitSide ; 8 :
19776: CALL 32772 0 0
19780: GO 19798
19782: LD_INT 8
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19797
19790: POP
// hHackFog ; end ;
19791: CALL 32873 0 0
19795: GO 19798
19797: POP
// end ; end ;
19798: LD_VAR 0 7
19802: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19803: GO 19805
19805: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19806: LD_STRING initStreamRollete();
19808: PPUSH
19809: CALL_OW 559
// InitStreamMode ;
19813: CALL 19825 0 0
// DefineStreamItems ( false ) ;
19817: LD_INT 0
19819: PPUSH
19820: CALL 20289 0 1
// end ;
19824: END
// function InitStreamMode ; begin
19825: LD_INT 0
19827: PPUSH
// streamModeActive := false ;
19828: LD_ADDR_EXP 66
19832: PUSH
19833: LD_INT 0
19835: ST_TO_ADDR
// normalCounter := 36 ;
19836: LD_ADDR_EXP 67
19840: PUSH
19841: LD_INT 36
19843: ST_TO_ADDR
// hardcoreCounter := 18 ;
19844: LD_ADDR_EXP 68
19848: PUSH
19849: LD_INT 18
19851: ST_TO_ADDR
// sRocket := false ;
19852: LD_ADDR_EXP 71
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// sSpeed := false ;
19860: LD_ADDR_EXP 70
19864: PUSH
19865: LD_INT 0
19867: ST_TO_ADDR
// sEngine := false ;
19868: LD_ADDR_EXP 72
19872: PUSH
19873: LD_INT 0
19875: ST_TO_ADDR
// sSpec := false ;
19876: LD_ADDR_EXP 69
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
// sLevel := false ;
19884: LD_ADDR_EXP 73
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// sArmoury := false ;
19892: LD_ADDR_EXP 74
19896: PUSH
19897: LD_INT 0
19899: ST_TO_ADDR
// sRadar := false ;
19900: LD_ADDR_EXP 75
19904: PUSH
19905: LD_INT 0
19907: ST_TO_ADDR
// sBunker := false ;
19908: LD_ADDR_EXP 76
19912: PUSH
19913: LD_INT 0
19915: ST_TO_ADDR
// sHack := false ;
19916: LD_ADDR_EXP 77
19920: PUSH
19921: LD_INT 0
19923: ST_TO_ADDR
// sFire := false ;
19924: LD_ADDR_EXP 78
19928: PUSH
19929: LD_INT 0
19931: ST_TO_ADDR
// sRefresh := false ;
19932: LD_ADDR_EXP 79
19936: PUSH
19937: LD_INT 0
19939: ST_TO_ADDR
// sExp := false ;
19940: LD_ADDR_EXP 80
19944: PUSH
19945: LD_INT 0
19947: ST_TO_ADDR
// sDepot := false ;
19948: LD_ADDR_EXP 81
19952: PUSH
19953: LD_INT 0
19955: ST_TO_ADDR
// sFlag := false ;
19956: LD_ADDR_EXP 82
19960: PUSH
19961: LD_INT 0
19963: ST_TO_ADDR
// sKamikadze := false ;
19964: LD_ADDR_EXP 90
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// sTroll := false ;
19972: LD_ADDR_EXP 91
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// sSlow := false ;
19980: LD_ADDR_EXP 92
19984: PUSH
19985: LD_INT 0
19987: ST_TO_ADDR
// sLack := false ;
19988: LD_ADDR_EXP 93
19992: PUSH
19993: LD_INT 0
19995: ST_TO_ADDR
// sTank := false ;
19996: LD_ADDR_EXP 95
20000: PUSH
20001: LD_INT 0
20003: ST_TO_ADDR
// sRemote := false ;
20004: LD_ADDR_EXP 96
20008: PUSH
20009: LD_INT 0
20011: ST_TO_ADDR
// sPowell := false ;
20012: LD_ADDR_EXP 97
20016: PUSH
20017: LD_INT 0
20019: ST_TO_ADDR
// sTeleport := false ;
20020: LD_ADDR_EXP 100
20024: PUSH
20025: LD_INT 0
20027: ST_TO_ADDR
// sOilTower := false ;
20028: LD_ADDR_EXP 102
20032: PUSH
20033: LD_INT 0
20035: ST_TO_ADDR
// sShovel := false ;
20036: LD_ADDR_EXP 103
20040: PUSH
20041: LD_INT 0
20043: ST_TO_ADDR
// sSheik := false ;
20044: LD_ADDR_EXP 104
20048: PUSH
20049: LD_INT 0
20051: ST_TO_ADDR
// sEarthquake := false ;
20052: LD_ADDR_EXP 106
20056: PUSH
20057: LD_INT 0
20059: ST_TO_ADDR
// sAI := false ;
20060: LD_ADDR_EXP 107
20064: PUSH
20065: LD_INT 0
20067: ST_TO_ADDR
// sCargo := false ;
20068: LD_ADDR_EXP 110
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
// sDLaser := false ;
20076: LD_ADDR_EXP 111
20080: PUSH
20081: LD_INT 0
20083: ST_TO_ADDR
// sExchange := false ;
20084: LD_ADDR_EXP 112
20088: PUSH
20089: LD_INT 0
20091: ST_TO_ADDR
// sFac := false ;
20092: LD_ADDR_EXP 113
20096: PUSH
20097: LD_INT 0
20099: ST_TO_ADDR
// sPower := false ;
20100: LD_ADDR_EXP 114
20104: PUSH
20105: LD_INT 0
20107: ST_TO_ADDR
// sRandom := false ;
20108: LD_ADDR_EXP 115
20112: PUSH
20113: LD_INT 0
20115: ST_TO_ADDR
// sShield := false ;
20116: LD_ADDR_EXP 116
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// sTime := false ;
20124: LD_ADDR_EXP 117
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// sTools := false ;
20132: LD_ADDR_EXP 118
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
// sSold := false ;
20140: LD_ADDR_EXP 83
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// sDiff := false ;
20148: LD_ADDR_EXP 84
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// sFog := false ;
20156: LD_ADDR_EXP 87
20160: PUSH
20161: LD_INT 0
20163: ST_TO_ADDR
// sReset := false ;
20164: LD_ADDR_EXP 88
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// sSun := false ;
20172: LD_ADDR_EXP 89
20176: PUSH
20177: LD_INT 0
20179: ST_TO_ADDR
// sTiger := false ;
20180: LD_ADDR_EXP 85
20184: PUSH
20185: LD_INT 0
20187: ST_TO_ADDR
// sBomb := false ;
20188: LD_ADDR_EXP 86
20192: PUSH
20193: LD_INT 0
20195: ST_TO_ADDR
// sWound := false ;
20196: LD_ADDR_EXP 94
20200: PUSH
20201: LD_INT 0
20203: ST_TO_ADDR
// sBetray := false ;
20204: LD_ADDR_EXP 98
20208: PUSH
20209: LD_INT 0
20211: ST_TO_ADDR
// sContamin := false ;
20212: LD_ADDR_EXP 99
20216: PUSH
20217: LD_INT 0
20219: ST_TO_ADDR
// sOil := false ;
20220: LD_ADDR_EXP 101
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// sStu := false ;
20228: LD_ADDR_EXP 105
20232: PUSH
20233: LD_INT 0
20235: ST_TO_ADDR
// sBazooka := false ;
20236: LD_ADDR_EXP 108
20240: PUSH
20241: LD_INT 0
20243: ST_TO_ADDR
// sMortar := false ;
20244: LD_ADDR_EXP 109
20248: PUSH
20249: LD_INT 0
20251: ST_TO_ADDR
// sRanger := false ;
20252: LD_ADDR_EXP 119
20256: PUSH
20257: LD_INT 0
20259: ST_TO_ADDR
// sComputer := false ;
20260: LD_ADDR_EXP 120
20264: PUSH
20265: LD_INT 0
20267: ST_TO_ADDR
// s30 := false ;
20268: LD_ADDR_EXP 121
20272: PUSH
20273: LD_INT 0
20275: ST_TO_ADDR
// s60 := false ;
20276: LD_ADDR_EXP 122
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// end ;
20284: LD_VAR 0 1
20288: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20289: LD_INT 0
20291: PPUSH
20292: PPUSH
20293: PPUSH
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
// result := [ ] ;
20298: LD_ADDR_VAR 0 2
20302: PUSH
20303: EMPTY
20304: ST_TO_ADDR
// if campaign_id = 1 then
20305: LD_OWVAR 69
20309: PUSH
20310: LD_INT 1
20312: EQUAL
20313: IFFALSE 23479
// begin case mission_number of 1 :
20315: LD_OWVAR 70
20319: PUSH
20320: LD_INT 1
20322: DOUBLE
20323: EQUAL
20324: IFTRUE 20328
20326: GO 20404
20328: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20329: LD_ADDR_VAR 0 2
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: LD_INT 4
20339: PUSH
20340: LD_INT 11
20342: PUSH
20343: LD_INT 12
20345: PUSH
20346: LD_INT 15
20348: PUSH
20349: LD_INT 16
20351: PUSH
20352: LD_INT 22
20354: PUSH
20355: LD_INT 23
20357: PUSH
20358: LD_INT 26
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 101
20374: PUSH
20375: LD_INT 102
20377: PUSH
20378: LD_INT 106
20380: PUSH
20381: LD_INT 116
20383: PUSH
20384: LD_INT 117
20386: PUSH
20387: LD_INT 118
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: ST_TO_ADDR
20402: GO 23477
20404: LD_INT 2
20406: DOUBLE
20407: EQUAL
20408: IFTRUE 20412
20410: GO 20496
20412: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20413: LD_ADDR_VAR 0 2
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: LD_INT 4
20423: PUSH
20424: LD_INT 11
20426: PUSH
20427: LD_INT 12
20429: PUSH
20430: LD_INT 15
20432: PUSH
20433: LD_INT 16
20435: PUSH
20436: LD_INT 22
20438: PUSH
20439: LD_INT 23
20441: PUSH
20442: LD_INT 26
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 101
20458: PUSH
20459: LD_INT 102
20461: PUSH
20462: LD_INT 105
20464: PUSH
20465: LD_INT 106
20467: PUSH
20468: LD_INT 108
20470: PUSH
20471: LD_INT 116
20473: PUSH
20474: LD_INT 117
20476: PUSH
20477: LD_INT 118
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: ST_TO_ADDR
20494: GO 23477
20496: LD_INT 3
20498: DOUBLE
20499: EQUAL
20500: IFTRUE 20504
20502: GO 20592
20504: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20505: LD_ADDR_VAR 0 2
20509: PUSH
20510: LD_INT 2
20512: PUSH
20513: LD_INT 4
20515: PUSH
20516: LD_INT 5
20518: PUSH
20519: LD_INT 11
20521: PUSH
20522: LD_INT 12
20524: PUSH
20525: LD_INT 15
20527: PUSH
20528: LD_INT 16
20530: PUSH
20531: LD_INT 22
20533: PUSH
20534: LD_INT 26
20536: PUSH
20537: LD_INT 36
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 101
20554: PUSH
20555: LD_INT 102
20557: PUSH
20558: LD_INT 105
20560: PUSH
20561: LD_INT 106
20563: PUSH
20564: LD_INT 108
20566: PUSH
20567: LD_INT 116
20569: PUSH
20570: LD_INT 117
20572: PUSH
20573: LD_INT 118
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: ST_TO_ADDR
20590: GO 23477
20592: LD_INT 4
20594: DOUBLE
20595: EQUAL
20596: IFTRUE 20600
20598: GO 20696
20600: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20601: LD_ADDR_VAR 0 2
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: LD_INT 4
20611: PUSH
20612: LD_INT 5
20614: PUSH
20615: LD_INT 8
20617: PUSH
20618: LD_INT 11
20620: PUSH
20621: LD_INT 12
20623: PUSH
20624: LD_INT 15
20626: PUSH
20627: LD_INT 16
20629: PUSH
20630: LD_INT 22
20632: PUSH
20633: LD_INT 23
20635: PUSH
20636: LD_INT 26
20638: PUSH
20639: LD_INT 36
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 101
20658: PUSH
20659: LD_INT 102
20661: PUSH
20662: LD_INT 105
20664: PUSH
20665: LD_INT 106
20667: PUSH
20668: LD_INT 108
20670: PUSH
20671: LD_INT 116
20673: PUSH
20674: LD_INT 117
20676: PUSH
20677: LD_INT 118
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: ST_TO_ADDR
20694: GO 23477
20696: LD_INT 5
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20816
20704: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20705: LD_ADDR_VAR 0 2
20709: PUSH
20710: LD_INT 2
20712: PUSH
20713: LD_INT 4
20715: PUSH
20716: LD_INT 5
20718: PUSH
20719: LD_INT 6
20721: PUSH
20722: LD_INT 8
20724: PUSH
20725: LD_INT 11
20727: PUSH
20728: LD_INT 12
20730: PUSH
20731: LD_INT 15
20733: PUSH
20734: LD_INT 16
20736: PUSH
20737: LD_INT 22
20739: PUSH
20740: LD_INT 23
20742: PUSH
20743: LD_INT 25
20745: PUSH
20746: LD_INT 26
20748: PUSH
20749: LD_INT 36
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 101
20770: PUSH
20771: LD_INT 102
20773: PUSH
20774: LD_INT 105
20776: PUSH
20777: LD_INT 106
20779: PUSH
20780: LD_INT 108
20782: PUSH
20783: LD_INT 109
20785: PUSH
20786: LD_INT 112
20788: PUSH
20789: LD_INT 116
20791: PUSH
20792: LD_INT 117
20794: PUSH
20795: LD_INT 118
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: ST_TO_ADDR
20814: GO 23477
20816: LD_INT 6
20818: DOUBLE
20819: EQUAL
20820: IFTRUE 20824
20822: GO 20956
20824: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20825: LD_ADDR_VAR 0 2
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 4
20835: PUSH
20836: LD_INT 5
20838: PUSH
20839: LD_INT 6
20841: PUSH
20842: LD_INT 8
20844: PUSH
20845: LD_INT 11
20847: PUSH
20848: LD_INT 12
20850: PUSH
20851: LD_INT 15
20853: PUSH
20854: LD_INT 16
20856: PUSH
20857: LD_INT 20
20859: PUSH
20860: LD_INT 21
20862: PUSH
20863: LD_INT 22
20865: PUSH
20866: LD_INT 23
20868: PUSH
20869: LD_INT 25
20871: PUSH
20872: LD_INT 26
20874: PUSH
20875: LD_INT 30
20877: PUSH
20878: LD_INT 31
20880: PUSH
20881: LD_INT 32
20883: PUSH
20884: LD_INT 36
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 101
20910: PUSH
20911: LD_INT 102
20913: PUSH
20914: LD_INT 105
20916: PUSH
20917: LD_INT 106
20919: PUSH
20920: LD_INT 108
20922: PUSH
20923: LD_INT 109
20925: PUSH
20926: LD_INT 112
20928: PUSH
20929: LD_INT 116
20931: PUSH
20932: LD_INT 117
20934: PUSH
20935: LD_INT 118
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: ST_TO_ADDR
20954: GO 23477
20956: LD_INT 7
20958: DOUBLE
20959: EQUAL
20960: IFTRUE 20964
20962: GO 21076
20964: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20965: LD_ADDR_VAR 0 2
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: LD_INT 4
20975: PUSH
20976: LD_INT 5
20978: PUSH
20979: LD_INT 7
20981: PUSH
20982: LD_INT 11
20984: PUSH
20985: LD_INT 12
20987: PUSH
20988: LD_INT 15
20990: PUSH
20991: LD_INT 16
20993: PUSH
20994: LD_INT 20
20996: PUSH
20997: LD_INT 21
20999: PUSH
21000: LD_INT 22
21002: PUSH
21003: LD_INT 23
21005: PUSH
21006: LD_INT 25
21008: PUSH
21009: LD_INT 26
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 101
21030: PUSH
21031: LD_INT 102
21033: PUSH
21034: LD_INT 103
21036: PUSH
21037: LD_INT 105
21039: PUSH
21040: LD_INT 106
21042: PUSH
21043: LD_INT 108
21045: PUSH
21046: LD_INT 112
21048: PUSH
21049: LD_INT 116
21051: PUSH
21052: LD_INT 117
21054: PUSH
21055: LD_INT 118
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: ST_TO_ADDR
21074: GO 23477
21076: LD_INT 8
21078: DOUBLE
21079: EQUAL
21080: IFTRUE 21084
21082: GO 21224
21084: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21085: LD_ADDR_VAR 0 2
21089: PUSH
21090: LD_INT 2
21092: PUSH
21093: LD_INT 4
21095: PUSH
21096: LD_INT 5
21098: PUSH
21099: LD_INT 6
21101: PUSH
21102: LD_INT 7
21104: PUSH
21105: LD_INT 8
21107: PUSH
21108: LD_INT 11
21110: PUSH
21111: LD_INT 12
21113: PUSH
21114: LD_INT 15
21116: PUSH
21117: LD_INT 16
21119: PUSH
21120: LD_INT 20
21122: PUSH
21123: LD_INT 21
21125: PUSH
21126: LD_INT 22
21128: PUSH
21129: LD_INT 23
21131: PUSH
21132: LD_INT 25
21134: PUSH
21135: LD_INT 26
21137: PUSH
21138: LD_INT 30
21140: PUSH
21141: LD_INT 31
21143: PUSH
21144: LD_INT 32
21146: PUSH
21147: LD_INT 36
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 101
21174: PUSH
21175: LD_INT 102
21177: PUSH
21178: LD_INT 103
21180: PUSH
21181: LD_INT 105
21183: PUSH
21184: LD_INT 106
21186: PUSH
21187: LD_INT 108
21189: PUSH
21190: LD_INT 109
21192: PUSH
21193: LD_INT 112
21195: PUSH
21196: LD_INT 116
21198: PUSH
21199: LD_INT 117
21201: PUSH
21202: LD_INT 118
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: ST_TO_ADDR
21222: GO 23477
21224: LD_INT 9
21226: DOUBLE
21227: EQUAL
21228: IFTRUE 21232
21230: GO 21380
21232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21233: LD_ADDR_VAR 0 2
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: LD_INT 4
21243: PUSH
21244: LD_INT 5
21246: PUSH
21247: LD_INT 6
21249: PUSH
21250: LD_INT 7
21252: PUSH
21253: LD_INT 8
21255: PUSH
21256: LD_INT 11
21258: PUSH
21259: LD_INT 12
21261: PUSH
21262: LD_INT 15
21264: PUSH
21265: LD_INT 16
21267: PUSH
21268: LD_INT 20
21270: PUSH
21271: LD_INT 21
21273: PUSH
21274: LD_INT 22
21276: PUSH
21277: LD_INT 23
21279: PUSH
21280: LD_INT 25
21282: PUSH
21283: LD_INT 26
21285: PUSH
21286: LD_INT 28
21288: PUSH
21289: LD_INT 30
21291: PUSH
21292: LD_INT 31
21294: PUSH
21295: LD_INT 32
21297: PUSH
21298: LD_INT 36
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 101
21326: PUSH
21327: LD_INT 102
21329: PUSH
21330: LD_INT 103
21332: PUSH
21333: LD_INT 105
21335: PUSH
21336: LD_INT 106
21338: PUSH
21339: LD_INT 108
21341: PUSH
21342: LD_INT 109
21344: PUSH
21345: LD_INT 112
21347: PUSH
21348: LD_INT 114
21350: PUSH
21351: LD_INT 116
21353: PUSH
21354: LD_INT 117
21356: PUSH
21357: LD_INT 118
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: ST_TO_ADDR
21378: GO 23477
21380: LD_INT 10
21382: DOUBLE
21383: EQUAL
21384: IFTRUE 21388
21386: GO 21584
21388: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21389: LD_ADDR_VAR 0 2
21393: PUSH
21394: LD_INT 2
21396: PUSH
21397: LD_INT 4
21399: PUSH
21400: LD_INT 5
21402: PUSH
21403: LD_INT 6
21405: PUSH
21406: LD_INT 7
21408: PUSH
21409: LD_INT 8
21411: PUSH
21412: LD_INT 9
21414: PUSH
21415: LD_INT 10
21417: PUSH
21418: LD_INT 11
21420: PUSH
21421: LD_INT 12
21423: PUSH
21424: LD_INT 13
21426: PUSH
21427: LD_INT 14
21429: PUSH
21430: LD_INT 15
21432: PUSH
21433: LD_INT 16
21435: PUSH
21436: LD_INT 17
21438: PUSH
21439: LD_INT 18
21441: PUSH
21442: LD_INT 19
21444: PUSH
21445: LD_INT 20
21447: PUSH
21448: LD_INT 21
21450: PUSH
21451: LD_INT 22
21453: PUSH
21454: LD_INT 23
21456: PUSH
21457: LD_INT 24
21459: PUSH
21460: LD_INT 25
21462: PUSH
21463: LD_INT 26
21465: PUSH
21466: LD_INT 28
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: LD_INT 31
21474: PUSH
21475: LD_INT 32
21477: PUSH
21478: LD_INT 36
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 101
21514: PUSH
21515: LD_INT 102
21517: PUSH
21518: LD_INT 103
21520: PUSH
21521: LD_INT 104
21523: PUSH
21524: LD_INT 105
21526: PUSH
21527: LD_INT 106
21529: PUSH
21530: LD_INT 107
21532: PUSH
21533: LD_INT 108
21535: PUSH
21536: LD_INT 109
21538: PUSH
21539: LD_INT 110
21541: PUSH
21542: LD_INT 111
21544: PUSH
21545: LD_INT 112
21547: PUSH
21548: LD_INT 114
21550: PUSH
21551: LD_INT 116
21553: PUSH
21554: LD_INT 117
21556: PUSH
21557: LD_INT 118
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: ST_TO_ADDR
21582: GO 23477
21584: LD_INT 11
21586: DOUBLE
21587: EQUAL
21588: IFTRUE 21592
21590: GO 21796
21592: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21593: LD_ADDR_VAR 0 2
21597: PUSH
21598: LD_INT 2
21600: PUSH
21601: LD_INT 3
21603: PUSH
21604: LD_INT 4
21606: PUSH
21607: LD_INT 5
21609: PUSH
21610: LD_INT 6
21612: PUSH
21613: LD_INT 7
21615: PUSH
21616: LD_INT 8
21618: PUSH
21619: LD_INT 9
21621: PUSH
21622: LD_INT 10
21624: PUSH
21625: LD_INT 11
21627: PUSH
21628: LD_INT 12
21630: PUSH
21631: LD_INT 13
21633: PUSH
21634: LD_INT 14
21636: PUSH
21637: LD_INT 15
21639: PUSH
21640: LD_INT 16
21642: PUSH
21643: LD_INT 17
21645: PUSH
21646: LD_INT 18
21648: PUSH
21649: LD_INT 19
21651: PUSH
21652: LD_INT 20
21654: PUSH
21655: LD_INT 21
21657: PUSH
21658: LD_INT 22
21660: PUSH
21661: LD_INT 23
21663: PUSH
21664: LD_INT 24
21666: PUSH
21667: LD_INT 25
21669: PUSH
21670: LD_INT 26
21672: PUSH
21673: LD_INT 28
21675: PUSH
21676: LD_INT 30
21678: PUSH
21679: LD_INT 31
21681: PUSH
21682: LD_INT 32
21684: PUSH
21685: LD_INT 34
21687: PUSH
21688: LD_INT 36
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 101
21726: PUSH
21727: LD_INT 102
21729: PUSH
21730: LD_INT 103
21732: PUSH
21733: LD_INT 104
21735: PUSH
21736: LD_INT 105
21738: PUSH
21739: LD_INT 106
21741: PUSH
21742: LD_INT 107
21744: PUSH
21745: LD_INT 108
21747: PUSH
21748: LD_INT 109
21750: PUSH
21751: LD_INT 110
21753: PUSH
21754: LD_INT 111
21756: PUSH
21757: LD_INT 112
21759: PUSH
21760: LD_INT 114
21762: PUSH
21763: LD_INT 116
21765: PUSH
21766: LD_INT 117
21768: PUSH
21769: LD_INT 118
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: ST_TO_ADDR
21794: GO 23477
21796: LD_INT 12
21798: DOUBLE
21799: EQUAL
21800: IFTRUE 21804
21802: GO 22024
21804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21805: LD_ADDR_VAR 0 2
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 2
21815: PUSH
21816: LD_INT 3
21818: PUSH
21819: LD_INT 4
21821: PUSH
21822: LD_INT 5
21824: PUSH
21825: LD_INT 6
21827: PUSH
21828: LD_INT 7
21830: PUSH
21831: LD_INT 8
21833: PUSH
21834: LD_INT 9
21836: PUSH
21837: LD_INT 10
21839: PUSH
21840: LD_INT 11
21842: PUSH
21843: LD_INT 12
21845: PUSH
21846: LD_INT 13
21848: PUSH
21849: LD_INT 14
21851: PUSH
21852: LD_INT 15
21854: PUSH
21855: LD_INT 16
21857: PUSH
21858: LD_INT 17
21860: PUSH
21861: LD_INT 18
21863: PUSH
21864: LD_INT 19
21866: PUSH
21867: LD_INT 20
21869: PUSH
21870: LD_INT 21
21872: PUSH
21873: LD_INT 22
21875: PUSH
21876: LD_INT 23
21878: PUSH
21879: LD_INT 24
21881: PUSH
21882: LD_INT 25
21884: PUSH
21885: LD_INT 26
21887: PUSH
21888: LD_INT 27
21890: PUSH
21891: LD_INT 28
21893: PUSH
21894: LD_INT 30
21896: PUSH
21897: LD_INT 31
21899: PUSH
21900: LD_INT 32
21902: PUSH
21903: LD_INT 33
21905: PUSH
21906: LD_INT 34
21908: PUSH
21909: LD_INT 36
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 101
21950: PUSH
21951: LD_INT 102
21953: PUSH
21954: LD_INT 103
21956: PUSH
21957: LD_INT 104
21959: PUSH
21960: LD_INT 105
21962: PUSH
21963: LD_INT 106
21965: PUSH
21966: LD_INT 107
21968: PUSH
21969: LD_INT 108
21971: PUSH
21972: LD_INT 109
21974: PUSH
21975: LD_INT 110
21977: PUSH
21978: LD_INT 111
21980: PUSH
21981: LD_INT 112
21983: PUSH
21984: LD_INT 113
21986: PUSH
21987: LD_INT 114
21989: PUSH
21990: LD_INT 116
21992: PUSH
21993: LD_INT 117
21995: PUSH
21996: LD_INT 118
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: ST_TO_ADDR
22022: GO 23477
22024: LD_INT 13
22026: DOUBLE
22027: EQUAL
22028: IFTRUE 22032
22030: GO 22240
22032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22033: LD_ADDR_VAR 0 2
22037: PUSH
22038: LD_INT 1
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: LD_INT 3
22046: PUSH
22047: LD_INT 4
22049: PUSH
22050: LD_INT 5
22052: PUSH
22053: LD_INT 8
22055: PUSH
22056: LD_INT 9
22058: PUSH
22059: LD_INT 10
22061: PUSH
22062: LD_INT 11
22064: PUSH
22065: LD_INT 12
22067: PUSH
22068: LD_INT 14
22070: PUSH
22071: LD_INT 15
22073: PUSH
22074: LD_INT 16
22076: PUSH
22077: LD_INT 17
22079: PUSH
22080: LD_INT 18
22082: PUSH
22083: LD_INT 19
22085: PUSH
22086: LD_INT 20
22088: PUSH
22089: LD_INT 21
22091: PUSH
22092: LD_INT 22
22094: PUSH
22095: LD_INT 23
22097: PUSH
22098: LD_INT 24
22100: PUSH
22101: LD_INT 25
22103: PUSH
22104: LD_INT 26
22106: PUSH
22107: LD_INT 27
22109: PUSH
22110: LD_INT 28
22112: PUSH
22113: LD_INT 30
22115: PUSH
22116: LD_INT 31
22118: PUSH
22119: LD_INT 32
22121: PUSH
22122: LD_INT 33
22124: PUSH
22125: LD_INT 34
22127: PUSH
22128: LD_INT 36
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 101
22166: PUSH
22167: LD_INT 102
22169: PUSH
22170: LD_INT 103
22172: PUSH
22173: LD_INT 104
22175: PUSH
22176: LD_INT 105
22178: PUSH
22179: LD_INT 106
22181: PUSH
22182: LD_INT 107
22184: PUSH
22185: LD_INT 108
22187: PUSH
22188: LD_INT 109
22190: PUSH
22191: LD_INT 110
22193: PUSH
22194: LD_INT 111
22196: PUSH
22197: LD_INT 112
22199: PUSH
22200: LD_INT 113
22202: PUSH
22203: LD_INT 114
22205: PUSH
22206: LD_INT 116
22208: PUSH
22209: LD_INT 117
22211: PUSH
22212: LD_INT 118
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: ST_TO_ADDR
22238: GO 23477
22240: LD_INT 14
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22472
22248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22249: LD_ADDR_VAR 0 2
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: LD_INT 3
22262: PUSH
22263: LD_INT 4
22265: PUSH
22266: LD_INT 5
22268: PUSH
22269: LD_INT 6
22271: PUSH
22272: LD_INT 7
22274: PUSH
22275: LD_INT 8
22277: PUSH
22278: LD_INT 9
22280: PUSH
22281: LD_INT 10
22283: PUSH
22284: LD_INT 11
22286: PUSH
22287: LD_INT 12
22289: PUSH
22290: LD_INT 13
22292: PUSH
22293: LD_INT 14
22295: PUSH
22296: LD_INT 15
22298: PUSH
22299: LD_INT 16
22301: PUSH
22302: LD_INT 17
22304: PUSH
22305: LD_INT 18
22307: PUSH
22308: LD_INT 19
22310: PUSH
22311: LD_INT 20
22313: PUSH
22314: LD_INT 21
22316: PUSH
22317: LD_INT 22
22319: PUSH
22320: LD_INT 23
22322: PUSH
22323: LD_INT 24
22325: PUSH
22326: LD_INT 25
22328: PUSH
22329: LD_INT 26
22331: PUSH
22332: LD_INT 27
22334: PUSH
22335: LD_INT 28
22337: PUSH
22338: LD_INT 29
22340: PUSH
22341: LD_INT 30
22343: PUSH
22344: LD_INT 31
22346: PUSH
22347: LD_INT 32
22349: PUSH
22350: LD_INT 33
22352: PUSH
22353: LD_INT 34
22355: PUSH
22356: LD_INT 36
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 101
22398: PUSH
22399: LD_INT 102
22401: PUSH
22402: LD_INT 103
22404: PUSH
22405: LD_INT 104
22407: PUSH
22408: LD_INT 105
22410: PUSH
22411: LD_INT 106
22413: PUSH
22414: LD_INT 107
22416: PUSH
22417: LD_INT 108
22419: PUSH
22420: LD_INT 109
22422: PUSH
22423: LD_INT 110
22425: PUSH
22426: LD_INT 111
22428: PUSH
22429: LD_INT 112
22431: PUSH
22432: LD_INT 113
22434: PUSH
22435: LD_INT 114
22437: PUSH
22438: LD_INT 116
22440: PUSH
22441: LD_INT 117
22443: PUSH
22444: LD_INT 118
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: ST_TO_ADDR
22470: GO 23477
22472: LD_INT 15
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22704
22480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: LD_INT 4
22497: PUSH
22498: LD_INT 5
22500: PUSH
22501: LD_INT 6
22503: PUSH
22504: LD_INT 7
22506: PUSH
22507: LD_INT 8
22509: PUSH
22510: LD_INT 9
22512: PUSH
22513: LD_INT 10
22515: PUSH
22516: LD_INT 11
22518: PUSH
22519: LD_INT 12
22521: PUSH
22522: LD_INT 13
22524: PUSH
22525: LD_INT 14
22527: PUSH
22528: LD_INT 15
22530: PUSH
22531: LD_INT 16
22533: PUSH
22534: LD_INT 17
22536: PUSH
22537: LD_INT 18
22539: PUSH
22540: LD_INT 19
22542: PUSH
22543: LD_INT 20
22545: PUSH
22546: LD_INT 21
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_INT 23
22554: PUSH
22555: LD_INT 24
22557: PUSH
22558: LD_INT 25
22560: PUSH
22561: LD_INT 26
22563: PUSH
22564: LD_INT 27
22566: PUSH
22567: LD_INT 28
22569: PUSH
22570: LD_INT 29
22572: PUSH
22573: LD_INT 30
22575: PUSH
22576: LD_INT 31
22578: PUSH
22579: LD_INT 32
22581: PUSH
22582: LD_INT 33
22584: PUSH
22585: LD_INT 34
22587: PUSH
22588: LD_INT 36
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 101
22630: PUSH
22631: LD_INT 102
22633: PUSH
22634: LD_INT 103
22636: PUSH
22637: LD_INT 104
22639: PUSH
22640: LD_INT 105
22642: PUSH
22643: LD_INT 106
22645: PUSH
22646: LD_INT 107
22648: PUSH
22649: LD_INT 108
22651: PUSH
22652: LD_INT 109
22654: PUSH
22655: LD_INT 110
22657: PUSH
22658: LD_INT 111
22660: PUSH
22661: LD_INT 112
22663: PUSH
22664: LD_INT 113
22666: PUSH
22667: LD_INT 114
22669: PUSH
22670: LD_INT 116
22672: PUSH
22673: LD_INT 117
22675: PUSH
22676: LD_INT 118
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: ST_TO_ADDR
22702: GO 23477
22704: LD_INT 16
22706: DOUBLE
22707: EQUAL
22708: IFTRUE 22712
22710: GO 22848
22712: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22713: LD_ADDR_VAR 0 2
22717: PUSH
22718: LD_INT 2
22720: PUSH
22721: LD_INT 4
22723: PUSH
22724: LD_INT 5
22726: PUSH
22727: LD_INT 7
22729: PUSH
22730: LD_INT 11
22732: PUSH
22733: LD_INT 12
22735: PUSH
22736: LD_INT 15
22738: PUSH
22739: LD_INT 16
22741: PUSH
22742: LD_INT 20
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 22
22750: PUSH
22751: LD_INT 23
22753: PUSH
22754: LD_INT 25
22756: PUSH
22757: LD_INT 26
22759: PUSH
22760: LD_INT 30
22762: PUSH
22763: LD_INT 31
22765: PUSH
22766: LD_INT 32
22768: PUSH
22769: LD_INT 33
22771: PUSH
22772: LD_INT 34
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 101
22798: PUSH
22799: LD_INT 102
22801: PUSH
22802: LD_INT 103
22804: PUSH
22805: LD_INT 106
22807: PUSH
22808: LD_INT 108
22810: PUSH
22811: LD_INT 112
22813: PUSH
22814: LD_INT 113
22816: PUSH
22817: LD_INT 114
22819: PUSH
22820: LD_INT 116
22822: PUSH
22823: LD_INT 117
22825: PUSH
22826: LD_INT 118
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: ST_TO_ADDR
22846: GO 23477
22848: LD_INT 17
22850: DOUBLE
22851: EQUAL
22852: IFTRUE 22856
22854: GO 23080
22856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22857: LD_ADDR_VAR 0 2
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: LD_INT 3
22870: PUSH
22871: LD_INT 4
22873: PUSH
22874: LD_INT 5
22876: PUSH
22877: LD_INT 6
22879: PUSH
22880: LD_INT 7
22882: PUSH
22883: LD_INT 8
22885: PUSH
22886: LD_INT 9
22888: PUSH
22889: LD_INT 10
22891: PUSH
22892: LD_INT 11
22894: PUSH
22895: LD_INT 12
22897: PUSH
22898: LD_INT 13
22900: PUSH
22901: LD_INT 14
22903: PUSH
22904: LD_INT 15
22906: PUSH
22907: LD_INT 16
22909: PUSH
22910: LD_INT 17
22912: PUSH
22913: LD_INT 18
22915: PUSH
22916: LD_INT 19
22918: PUSH
22919: LD_INT 20
22921: PUSH
22922: LD_INT 21
22924: PUSH
22925: LD_INT 22
22927: PUSH
22928: LD_INT 23
22930: PUSH
22931: LD_INT 24
22933: PUSH
22934: LD_INT 25
22936: PUSH
22937: LD_INT 26
22939: PUSH
22940: LD_INT 27
22942: PUSH
22943: LD_INT 28
22945: PUSH
22946: LD_INT 29
22948: PUSH
22949: LD_INT 30
22951: PUSH
22952: LD_INT 31
22954: PUSH
22955: LD_INT 32
22957: PUSH
22958: LD_INT 33
22960: PUSH
22961: LD_INT 34
22963: PUSH
22964: LD_INT 36
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 101
23006: PUSH
23007: LD_INT 102
23009: PUSH
23010: LD_INT 103
23012: PUSH
23013: LD_INT 104
23015: PUSH
23016: LD_INT 105
23018: PUSH
23019: LD_INT 106
23021: PUSH
23022: LD_INT 107
23024: PUSH
23025: LD_INT 108
23027: PUSH
23028: LD_INT 109
23030: PUSH
23031: LD_INT 110
23033: PUSH
23034: LD_INT 111
23036: PUSH
23037: LD_INT 112
23039: PUSH
23040: LD_INT 113
23042: PUSH
23043: LD_INT 114
23045: PUSH
23046: LD_INT 116
23048: PUSH
23049: LD_INT 117
23051: PUSH
23052: LD_INT 118
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: ST_TO_ADDR
23078: GO 23477
23080: LD_INT 18
23082: DOUBLE
23083: EQUAL
23084: IFTRUE 23088
23086: GO 23236
23088: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23089: LD_ADDR_VAR 0 2
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: LD_INT 4
23099: PUSH
23100: LD_INT 5
23102: PUSH
23103: LD_INT 7
23105: PUSH
23106: LD_INT 11
23108: PUSH
23109: LD_INT 12
23111: PUSH
23112: LD_INT 15
23114: PUSH
23115: LD_INT 16
23117: PUSH
23118: LD_INT 20
23120: PUSH
23121: LD_INT 21
23123: PUSH
23124: LD_INT 22
23126: PUSH
23127: LD_INT 23
23129: PUSH
23130: LD_INT 25
23132: PUSH
23133: LD_INT 26
23135: PUSH
23136: LD_INT 30
23138: PUSH
23139: LD_INT 31
23141: PUSH
23142: LD_INT 32
23144: PUSH
23145: LD_INT 33
23147: PUSH
23148: LD_INT 34
23150: PUSH
23151: LD_INT 35
23153: PUSH
23154: LD_INT 36
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 101
23182: PUSH
23183: LD_INT 102
23185: PUSH
23186: LD_INT 103
23188: PUSH
23189: LD_INT 106
23191: PUSH
23192: LD_INT 108
23194: PUSH
23195: LD_INT 112
23197: PUSH
23198: LD_INT 113
23200: PUSH
23201: LD_INT 114
23203: PUSH
23204: LD_INT 115
23206: PUSH
23207: LD_INT 116
23209: PUSH
23210: LD_INT 117
23212: PUSH
23213: LD_INT 118
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: ST_TO_ADDR
23234: GO 23477
23236: LD_INT 19
23238: DOUBLE
23239: EQUAL
23240: IFTRUE 23244
23242: GO 23476
23244: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23245: LD_ADDR_VAR 0 2
23249: PUSH
23250: LD_INT 1
23252: PUSH
23253: LD_INT 2
23255: PUSH
23256: LD_INT 3
23258: PUSH
23259: LD_INT 4
23261: PUSH
23262: LD_INT 5
23264: PUSH
23265: LD_INT 6
23267: PUSH
23268: LD_INT 7
23270: PUSH
23271: LD_INT 8
23273: PUSH
23274: LD_INT 9
23276: PUSH
23277: LD_INT 10
23279: PUSH
23280: LD_INT 11
23282: PUSH
23283: LD_INT 12
23285: PUSH
23286: LD_INT 13
23288: PUSH
23289: LD_INT 14
23291: PUSH
23292: LD_INT 15
23294: PUSH
23295: LD_INT 16
23297: PUSH
23298: LD_INT 17
23300: PUSH
23301: LD_INT 18
23303: PUSH
23304: LD_INT 19
23306: PUSH
23307: LD_INT 20
23309: PUSH
23310: LD_INT 21
23312: PUSH
23313: LD_INT 22
23315: PUSH
23316: LD_INT 23
23318: PUSH
23319: LD_INT 24
23321: PUSH
23322: LD_INT 25
23324: PUSH
23325: LD_INT 26
23327: PUSH
23328: LD_INT 27
23330: PUSH
23331: LD_INT 28
23333: PUSH
23334: LD_INT 29
23336: PUSH
23337: LD_INT 30
23339: PUSH
23340: LD_INT 31
23342: PUSH
23343: LD_INT 32
23345: PUSH
23346: LD_INT 33
23348: PUSH
23349: LD_INT 34
23351: PUSH
23352: LD_INT 35
23354: PUSH
23355: LD_INT 36
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 101
23398: PUSH
23399: LD_INT 102
23401: PUSH
23402: LD_INT 103
23404: PUSH
23405: LD_INT 104
23407: PUSH
23408: LD_INT 105
23410: PUSH
23411: LD_INT 106
23413: PUSH
23414: LD_INT 107
23416: PUSH
23417: LD_INT 108
23419: PUSH
23420: LD_INT 109
23422: PUSH
23423: LD_INT 110
23425: PUSH
23426: LD_INT 111
23428: PUSH
23429: LD_INT 112
23431: PUSH
23432: LD_INT 113
23434: PUSH
23435: LD_INT 114
23437: PUSH
23438: LD_INT 115
23440: PUSH
23441: LD_INT 116
23443: PUSH
23444: LD_INT 117
23446: PUSH
23447: LD_INT 118
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: ST_TO_ADDR
23474: GO 23477
23476: POP
// end else
23477: GO 23708
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23479: LD_ADDR_VAR 0 2
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: LD_INT 3
23492: PUSH
23493: LD_INT 4
23495: PUSH
23496: LD_INT 5
23498: PUSH
23499: LD_INT 6
23501: PUSH
23502: LD_INT 7
23504: PUSH
23505: LD_INT 8
23507: PUSH
23508: LD_INT 9
23510: PUSH
23511: LD_INT 10
23513: PUSH
23514: LD_INT 11
23516: PUSH
23517: LD_INT 12
23519: PUSH
23520: LD_INT 13
23522: PUSH
23523: LD_INT 14
23525: PUSH
23526: LD_INT 15
23528: PUSH
23529: LD_INT 16
23531: PUSH
23532: LD_INT 17
23534: PUSH
23535: LD_INT 18
23537: PUSH
23538: LD_INT 19
23540: PUSH
23541: LD_INT 20
23543: PUSH
23544: LD_INT 21
23546: PUSH
23547: LD_INT 22
23549: PUSH
23550: LD_INT 23
23552: PUSH
23553: LD_INT 24
23555: PUSH
23556: LD_INT 25
23558: PUSH
23559: LD_INT 26
23561: PUSH
23562: LD_INT 27
23564: PUSH
23565: LD_INT 28
23567: PUSH
23568: LD_INT 29
23570: PUSH
23571: LD_INT 30
23573: PUSH
23574: LD_INT 31
23576: PUSH
23577: LD_INT 32
23579: PUSH
23580: LD_INT 33
23582: PUSH
23583: LD_INT 34
23585: PUSH
23586: LD_INT 35
23588: PUSH
23589: LD_INT 36
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 101
23632: PUSH
23633: LD_INT 102
23635: PUSH
23636: LD_INT 103
23638: PUSH
23639: LD_INT 104
23641: PUSH
23642: LD_INT 105
23644: PUSH
23645: LD_INT 106
23647: PUSH
23648: LD_INT 107
23650: PUSH
23651: LD_INT 108
23653: PUSH
23654: LD_INT 109
23656: PUSH
23657: LD_INT 110
23659: PUSH
23660: LD_INT 111
23662: PUSH
23663: LD_INT 112
23665: PUSH
23666: LD_INT 113
23668: PUSH
23669: LD_INT 114
23671: PUSH
23672: LD_INT 115
23674: PUSH
23675: LD_INT 116
23677: PUSH
23678: LD_INT 117
23680: PUSH
23681: LD_INT 118
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: ST_TO_ADDR
// if result then
23708: LD_VAR 0 2
23712: IFFALSE 24498
// begin normal :=  ;
23714: LD_ADDR_VAR 0 5
23718: PUSH
23719: LD_STRING 
23721: ST_TO_ADDR
// hardcore :=  ;
23722: LD_ADDR_VAR 0 6
23726: PUSH
23727: LD_STRING 
23729: ST_TO_ADDR
// active :=  ;
23730: LD_ADDR_VAR 0 7
23734: PUSH
23735: LD_STRING 
23737: ST_TO_ADDR
// for i = 1 to normalCounter do
23738: LD_ADDR_VAR 0 8
23742: PUSH
23743: DOUBLE
23744: LD_INT 1
23746: DEC
23747: ST_TO_ADDR
23748: LD_EXP 67
23752: PUSH
23753: FOR_TO
23754: IFFALSE 23855
// begin tmp := 0 ;
23756: LD_ADDR_VAR 0 3
23760: PUSH
23761: LD_STRING 0
23763: ST_TO_ADDR
// if result [ 1 ] then
23764: LD_VAR 0 2
23768: PUSH
23769: LD_INT 1
23771: ARRAY
23772: IFFALSE 23837
// if result [ 1 ] [ 1 ] = i then
23774: LD_VAR 0 2
23778: PUSH
23779: LD_INT 1
23781: ARRAY
23782: PUSH
23783: LD_INT 1
23785: ARRAY
23786: PUSH
23787: LD_VAR 0 8
23791: EQUAL
23792: IFFALSE 23837
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23794: LD_ADDR_VAR 0 2
23798: PUSH
23799: LD_VAR 0 2
23803: PPUSH
23804: LD_INT 1
23806: PPUSH
23807: LD_VAR 0 2
23811: PUSH
23812: LD_INT 1
23814: ARRAY
23815: PPUSH
23816: LD_INT 1
23818: PPUSH
23819: CALL_OW 3
23823: PPUSH
23824: CALL_OW 1
23828: ST_TO_ADDR
// tmp := 1 ;
23829: LD_ADDR_VAR 0 3
23833: PUSH
23834: LD_STRING 1
23836: ST_TO_ADDR
// end ; normal := normal & tmp ;
23837: LD_ADDR_VAR 0 5
23841: PUSH
23842: LD_VAR 0 5
23846: PUSH
23847: LD_VAR 0 3
23851: STR
23852: ST_TO_ADDR
// end ;
23853: GO 23753
23855: POP
23856: POP
// for i = 1 to hardcoreCounter do
23857: LD_ADDR_VAR 0 8
23861: PUSH
23862: DOUBLE
23863: LD_INT 1
23865: DEC
23866: ST_TO_ADDR
23867: LD_EXP 68
23871: PUSH
23872: FOR_TO
23873: IFFALSE 23978
// begin tmp := 0 ;
23875: LD_ADDR_VAR 0 3
23879: PUSH
23880: LD_STRING 0
23882: ST_TO_ADDR
// if result [ 2 ] then
23883: LD_VAR 0 2
23887: PUSH
23888: LD_INT 2
23890: ARRAY
23891: IFFALSE 23960
// if result [ 2 ] [ 1 ] = 100 + i then
23893: LD_VAR 0 2
23897: PUSH
23898: LD_INT 2
23900: ARRAY
23901: PUSH
23902: LD_INT 1
23904: ARRAY
23905: PUSH
23906: LD_INT 100
23908: PUSH
23909: LD_VAR 0 8
23913: PLUS
23914: EQUAL
23915: IFFALSE 23960
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23917: LD_ADDR_VAR 0 2
23921: PUSH
23922: LD_VAR 0 2
23926: PPUSH
23927: LD_INT 2
23929: PPUSH
23930: LD_VAR 0 2
23934: PUSH
23935: LD_INT 2
23937: ARRAY
23938: PPUSH
23939: LD_INT 1
23941: PPUSH
23942: CALL_OW 3
23946: PPUSH
23947: CALL_OW 1
23951: ST_TO_ADDR
// tmp := 1 ;
23952: LD_ADDR_VAR 0 3
23956: PUSH
23957: LD_STRING 1
23959: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23960: LD_ADDR_VAR 0 6
23964: PUSH
23965: LD_VAR 0 6
23969: PUSH
23970: LD_VAR 0 3
23974: STR
23975: ST_TO_ADDR
// end ;
23976: GO 23872
23978: POP
23979: POP
// if isGameLoad then
23980: LD_VAR 0 1
23984: IFFALSE 24459
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23986: LD_ADDR_VAR 0 4
23990: PUSH
23991: LD_EXP 71
23995: PUSH
23996: LD_EXP 70
24000: PUSH
24001: LD_EXP 72
24005: PUSH
24006: LD_EXP 69
24010: PUSH
24011: LD_EXP 73
24015: PUSH
24016: LD_EXP 74
24020: PUSH
24021: LD_EXP 75
24025: PUSH
24026: LD_EXP 76
24030: PUSH
24031: LD_EXP 77
24035: PUSH
24036: LD_EXP 78
24040: PUSH
24041: LD_EXP 79
24045: PUSH
24046: LD_EXP 80
24050: PUSH
24051: LD_EXP 81
24055: PUSH
24056: LD_EXP 82
24060: PUSH
24061: LD_EXP 90
24065: PUSH
24066: LD_EXP 91
24070: PUSH
24071: LD_EXP 92
24075: PUSH
24076: LD_EXP 93
24080: PUSH
24081: LD_EXP 95
24085: PUSH
24086: LD_EXP 96
24090: PUSH
24091: LD_EXP 97
24095: PUSH
24096: LD_EXP 100
24100: PUSH
24101: LD_EXP 102
24105: PUSH
24106: LD_EXP 103
24110: PUSH
24111: LD_EXP 104
24115: PUSH
24116: LD_EXP 106
24120: PUSH
24121: LD_EXP 107
24125: PUSH
24126: LD_EXP 110
24130: PUSH
24131: LD_EXP 111
24135: PUSH
24136: LD_EXP 112
24140: PUSH
24141: LD_EXP 113
24145: PUSH
24146: LD_EXP 114
24150: PUSH
24151: LD_EXP 115
24155: PUSH
24156: LD_EXP 116
24160: PUSH
24161: LD_EXP 117
24165: PUSH
24166: LD_EXP 118
24170: PUSH
24171: LD_EXP 83
24175: PUSH
24176: LD_EXP 84
24180: PUSH
24181: LD_EXP 87
24185: PUSH
24186: LD_EXP 88
24190: PUSH
24191: LD_EXP 89
24195: PUSH
24196: LD_EXP 85
24200: PUSH
24201: LD_EXP 86
24205: PUSH
24206: LD_EXP 94
24210: PUSH
24211: LD_EXP 98
24215: PUSH
24216: LD_EXP 99
24220: PUSH
24221: LD_EXP 101
24225: PUSH
24226: LD_EXP 105
24230: PUSH
24231: LD_EXP 108
24235: PUSH
24236: LD_EXP 109
24240: PUSH
24241: LD_EXP 119
24245: PUSH
24246: LD_EXP 120
24250: PUSH
24251: LD_EXP 121
24255: PUSH
24256: LD_EXP 122
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: ST_TO_ADDR
// tmp :=  ;
24317: LD_ADDR_VAR 0 3
24321: PUSH
24322: LD_STRING 
24324: ST_TO_ADDR
// for i = 1 to normalCounter do
24325: LD_ADDR_VAR 0 8
24329: PUSH
24330: DOUBLE
24331: LD_INT 1
24333: DEC
24334: ST_TO_ADDR
24335: LD_EXP 67
24339: PUSH
24340: FOR_TO
24341: IFFALSE 24377
// begin if flags [ i ] then
24343: LD_VAR 0 4
24347: PUSH
24348: LD_VAR 0 8
24352: ARRAY
24353: IFFALSE 24375
// tmp := tmp & i & ; ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_VAR 0 3
24364: PUSH
24365: LD_VAR 0 8
24369: STR
24370: PUSH
24371: LD_STRING ;
24373: STR
24374: ST_TO_ADDR
// end ;
24375: GO 24340
24377: POP
24378: POP
// for i = 1 to hardcoreCounter do
24379: LD_ADDR_VAR 0 8
24383: PUSH
24384: DOUBLE
24385: LD_INT 1
24387: DEC
24388: ST_TO_ADDR
24389: LD_EXP 68
24393: PUSH
24394: FOR_TO
24395: IFFALSE 24441
// begin if flags [ normalCounter + i ] then
24397: LD_VAR 0 4
24401: PUSH
24402: LD_EXP 67
24406: PUSH
24407: LD_VAR 0 8
24411: PLUS
24412: ARRAY
24413: IFFALSE 24439
// tmp := tmp & ( 100 + i ) & ; ;
24415: LD_ADDR_VAR 0 3
24419: PUSH
24420: LD_VAR 0 3
24424: PUSH
24425: LD_INT 100
24427: PUSH
24428: LD_VAR 0 8
24432: PLUS
24433: STR
24434: PUSH
24435: LD_STRING ;
24437: STR
24438: ST_TO_ADDR
// end ;
24439: GO 24394
24441: POP
24442: POP
// if tmp then
24443: LD_VAR 0 3
24447: IFFALSE 24459
// active := tmp ;
24449: LD_ADDR_VAR 0 7
24453: PUSH
24454: LD_VAR 0 3
24458: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24459: LD_STRING getStreamItemsFromMission("
24461: PUSH
24462: LD_VAR 0 5
24466: STR
24467: PUSH
24468: LD_STRING ","
24470: STR
24471: PUSH
24472: LD_VAR 0 6
24476: STR
24477: PUSH
24478: LD_STRING ","
24480: STR
24481: PUSH
24482: LD_VAR 0 7
24486: STR
24487: PUSH
24488: LD_STRING ")
24490: STR
24491: PPUSH
24492: CALL_OW 559
// end else
24496: GO 24505
// ToLua ( getStreamItemsFromMission("","","") ) ;
24498: LD_STRING getStreamItemsFromMission("","","")
24500: PPUSH
24501: CALL_OW 559
// end ;
24505: LD_VAR 0 2
24509: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24510: LD_EXP 66
24514: PUSH
24515: LD_EXP 71
24519: AND
24520: IFFALSE 24644
24522: GO 24524
24524: DISABLE
24525: LD_INT 0
24527: PPUSH
24528: PPUSH
// begin enable ;
24529: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24530: LD_ADDR_VAR 0 2
24534: PUSH
24535: LD_INT 22
24537: PUSH
24538: LD_OWVAR 2
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: LD_INT 34
24552: PUSH
24553: LD_INT 7
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 34
24562: PUSH
24563: LD_INT 45
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 34
24572: PUSH
24573: LD_INT 28
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 34
24582: PUSH
24583: LD_INT 47
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PPUSH
24601: CALL_OW 69
24605: ST_TO_ADDR
// if not tmp then
24606: LD_VAR 0 2
24610: NOT
24611: IFFALSE 24615
// exit ;
24613: GO 24644
// for i in tmp do
24615: LD_ADDR_VAR 0 1
24619: PUSH
24620: LD_VAR 0 2
24624: PUSH
24625: FOR_IN
24626: IFFALSE 24642
// begin SetLives ( i , 0 ) ;
24628: LD_VAR 0 1
24632: PPUSH
24633: LD_INT 0
24635: PPUSH
24636: CALL_OW 234
// end ;
24640: GO 24625
24642: POP
24643: POP
// end ;
24644: PPOPN 2
24646: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24647: LD_EXP 66
24651: PUSH
24652: LD_EXP 72
24656: AND
24657: IFFALSE 24741
24659: GO 24661
24661: DISABLE
24662: LD_INT 0
24664: PPUSH
24665: PPUSH
// begin enable ;
24666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24667: LD_ADDR_VAR 0 2
24671: PUSH
24672: LD_INT 22
24674: PUSH
24675: LD_OWVAR 2
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 32
24686: PUSH
24687: LD_INT 3
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PPUSH
24698: CALL_OW 69
24702: ST_TO_ADDR
// if not tmp then
24703: LD_VAR 0 2
24707: NOT
24708: IFFALSE 24712
// exit ;
24710: GO 24741
// for i in tmp do
24712: LD_ADDR_VAR 0 1
24716: PUSH
24717: LD_VAR 0 2
24721: PUSH
24722: FOR_IN
24723: IFFALSE 24739
// begin SetLives ( i , 0 ) ;
24725: LD_VAR 0 1
24729: PPUSH
24730: LD_INT 0
24732: PPUSH
24733: CALL_OW 234
// end ;
24737: GO 24722
24739: POP
24740: POP
// end ;
24741: PPOPN 2
24743: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24744: LD_EXP 66
24748: PUSH
24749: LD_EXP 69
24753: AND
24754: IFFALSE 24847
24756: GO 24758
24758: DISABLE
24759: LD_INT 0
24761: PPUSH
// begin enable ;
24762: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24763: LD_ADDR_VAR 0 1
24767: PUSH
24768: LD_INT 22
24770: PUSH
24771: LD_OWVAR 2
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: PUSH
24783: LD_INT 25
24785: PUSH
24786: LD_INT 5
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 25
24795: PUSH
24796: LD_INT 9
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 25
24805: PUSH
24806: LD_INT 8
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PPUSH
24823: CALL_OW 69
24827: PUSH
24828: FOR_IN
24829: IFFALSE 24845
// begin SetClass ( i , 1 ) ;
24831: LD_VAR 0 1
24835: PPUSH
24836: LD_INT 1
24838: PPUSH
24839: CALL_OW 336
// end ;
24843: GO 24828
24845: POP
24846: POP
// end ;
24847: PPOPN 1
24849: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24850: LD_EXP 66
24854: PUSH
24855: LD_EXP 70
24859: AND
24860: PUSH
24861: LD_OWVAR 65
24865: PUSH
24866: LD_INT 7
24868: LESS
24869: AND
24870: IFFALSE 24884
24872: GO 24874
24874: DISABLE
// begin enable ;
24875: ENABLE
// game_speed := 7 ;
24876: LD_ADDR_OWVAR 65
24880: PUSH
24881: LD_INT 7
24883: ST_TO_ADDR
// end ;
24884: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24885: LD_EXP 66
24889: PUSH
24890: LD_EXP 73
24894: AND
24895: IFFALSE 25097
24897: GO 24899
24899: DISABLE
24900: LD_INT 0
24902: PPUSH
24903: PPUSH
24904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24905: LD_ADDR_VAR 0 3
24909: PUSH
24910: LD_INT 81
24912: PUSH
24913: LD_OWVAR 2
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 21
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PPUSH
24936: CALL_OW 69
24940: ST_TO_ADDR
// if not tmp then
24941: LD_VAR 0 3
24945: NOT
24946: IFFALSE 24950
// exit ;
24948: GO 25097
// if tmp > 5 then
24950: LD_VAR 0 3
24954: PUSH
24955: LD_INT 5
24957: GREATER
24958: IFFALSE 24970
// k := 5 else
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 5
24967: ST_TO_ADDR
24968: GO 24980
// k := tmp ;
24970: LD_ADDR_VAR 0 2
24974: PUSH
24975: LD_VAR 0 3
24979: ST_TO_ADDR
// for i := 1 to k do
24980: LD_ADDR_VAR 0 1
24984: PUSH
24985: DOUBLE
24986: LD_INT 1
24988: DEC
24989: ST_TO_ADDR
24990: LD_VAR 0 2
24994: PUSH
24995: FOR_TO
24996: IFFALSE 25095
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24998: LD_VAR 0 3
25002: PUSH
25003: LD_VAR 0 1
25007: ARRAY
25008: PPUSH
25009: LD_VAR 0 1
25013: PUSH
25014: LD_INT 4
25016: MOD
25017: PUSH
25018: LD_INT 1
25020: PLUS
25021: PPUSH
25022: CALL_OW 259
25026: PUSH
25027: LD_INT 10
25029: LESS
25030: IFFALSE 25093
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25032: LD_VAR 0 3
25036: PUSH
25037: LD_VAR 0 1
25041: ARRAY
25042: PPUSH
25043: LD_VAR 0 1
25047: PUSH
25048: LD_INT 4
25050: MOD
25051: PUSH
25052: LD_INT 1
25054: PLUS
25055: PPUSH
25056: LD_VAR 0 3
25060: PUSH
25061: LD_VAR 0 1
25065: ARRAY
25066: PPUSH
25067: LD_VAR 0 1
25071: PUSH
25072: LD_INT 4
25074: MOD
25075: PUSH
25076: LD_INT 1
25078: PLUS
25079: PPUSH
25080: CALL_OW 259
25084: PUSH
25085: LD_INT 1
25087: PLUS
25088: PPUSH
25089: CALL_OW 237
25093: GO 24995
25095: POP
25096: POP
// end ;
25097: PPOPN 3
25099: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25100: LD_EXP 66
25104: PUSH
25105: LD_EXP 74
25109: AND
25110: IFFALSE 25130
25112: GO 25114
25114: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25115: LD_INT 4
25117: PPUSH
25118: LD_OWVAR 2
25122: PPUSH
25123: LD_INT 0
25125: PPUSH
25126: CALL_OW 324
25130: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25131: LD_EXP 66
25135: PUSH
25136: LD_EXP 103
25140: AND
25141: IFFALSE 25161
25143: GO 25145
25145: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25146: LD_INT 19
25148: PPUSH
25149: LD_OWVAR 2
25153: PPUSH
25154: LD_INT 0
25156: PPUSH
25157: CALL_OW 324
25161: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25162: LD_EXP 66
25166: PUSH
25167: LD_EXP 75
25171: AND
25172: IFFALSE 25274
25174: GO 25176
25176: DISABLE
25177: LD_INT 0
25179: PPUSH
25180: PPUSH
// begin enable ;
25181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25182: LD_ADDR_VAR 0 2
25186: PUSH
25187: LD_INT 22
25189: PUSH
25190: LD_OWVAR 2
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: LD_INT 34
25204: PUSH
25205: LD_INT 11
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 34
25214: PUSH
25215: LD_INT 30
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: ST_TO_ADDR
// if not tmp then
25236: LD_VAR 0 2
25240: NOT
25241: IFFALSE 25245
// exit ;
25243: GO 25274
// for i in tmp do
25245: LD_ADDR_VAR 0 1
25249: PUSH
25250: LD_VAR 0 2
25254: PUSH
25255: FOR_IN
25256: IFFALSE 25272
// begin SetLives ( i , 0 ) ;
25258: LD_VAR 0 1
25262: PPUSH
25263: LD_INT 0
25265: PPUSH
25266: CALL_OW 234
// end ;
25270: GO 25255
25272: POP
25273: POP
// end ;
25274: PPOPN 2
25276: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25277: LD_EXP 66
25281: PUSH
25282: LD_EXP 76
25286: AND
25287: IFFALSE 25307
25289: GO 25291
25291: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25292: LD_INT 32
25294: PPUSH
25295: LD_OWVAR 2
25299: PPUSH
25300: LD_INT 0
25302: PPUSH
25303: CALL_OW 324
25307: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25308: LD_EXP 66
25312: PUSH
25313: LD_EXP 77
25317: AND
25318: IFFALSE 25499
25320: GO 25322
25322: DISABLE
25323: LD_INT 0
25325: PPUSH
25326: PPUSH
25327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25328: LD_ADDR_VAR 0 2
25332: PUSH
25333: LD_INT 22
25335: PUSH
25336: LD_OWVAR 2
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 33
25347: PUSH
25348: LD_INT 3
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PPUSH
25359: CALL_OW 69
25363: ST_TO_ADDR
// if not tmp then
25364: LD_VAR 0 2
25368: NOT
25369: IFFALSE 25373
// exit ;
25371: GO 25499
// side := 0 ;
25373: LD_ADDR_VAR 0 3
25377: PUSH
25378: LD_INT 0
25380: ST_TO_ADDR
// for i := 1 to 8 do
25381: LD_ADDR_VAR 0 1
25385: PUSH
25386: DOUBLE
25387: LD_INT 1
25389: DEC
25390: ST_TO_ADDR
25391: LD_INT 8
25393: PUSH
25394: FOR_TO
25395: IFFALSE 25443
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25397: LD_OWVAR 2
25401: PUSH
25402: LD_VAR 0 1
25406: NONEQUAL
25407: PUSH
25408: LD_OWVAR 2
25412: PPUSH
25413: LD_VAR 0 1
25417: PPUSH
25418: CALL_OW 81
25422: PUSH
25423: LD_INT 2
25425: EQUAL
25426: AND
25427: IFFALSE 25441
// begin side := i ;
25429: LD_ADDR_VAR 0 3
25433: PUSH
25434: LD_VAR 0 1
25438: ST_TO_ADDR
// break ;
25439: GO 25443
// end ;
25441: GO 25394
25443: POP
25444: POP
// if not side then
25445: LD_VAR 0 3
25449: NOT
25450: IFFALSE 25454
// exit ;
25452: GO 25499
// for i := 1 to tmp do
25454: LD_ADDR_VAR 0 1
25458: PUSH
25459: DOUBLE
25460: LD_INT 1
25462: DEC
25463: ST_TO_ADDR
25464: LD_VAR 0 2
25468: PUSH
25469: FOR_TO
25470: IFFALSE 25497
// if Prob ( 60 ) then
25472: LD_INT 60
25474: PPUSH
25475: CALL_OW 13
25479: IFFALSE 25495
// SetSide ( i , side ) ;
25481: LD_VAR 0 1
25485: PPUSH
25486: LD_VAR 0 3
25490: PPUSH
25491: CALL_OW 235
25495: GO 25469
25497: POP
25498: POP
// end ;
25499: PPOPN 3
25501: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25502: LD_EXP 66
25506: PUSH
25507: LD_EXP 79
25511: AND
25512: IFFALSE 25631
25514: GO 25516
25516: DISABLE
25517: LD_INT 0
25519: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25520: LD_ADDR_VAR 0 1
25524: PUSH
25525: LD_INT 22
25527: PUSH
25528: LD_OWVAR 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 21
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 3
25549: PUSH
25550: LD_INT 23
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: LIST
25568: PPUSH
25569: CALL_OW 69
25573: PUSH
25574: FOR_IN
25575: IFFALSE 25629
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25577: LD_VAR 0 1
25581: PPUSH
25582: CALL_OW 257
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: LD_INT 3
25595: PUSH
25596: LD_INT 4
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: IN
25605: IFFALSE 25627
// SetClass ( un , rand ( 1 , 4 ) ) ;
25607: LD_VAR 0 1
25611: PPUSH
25612: LD_INT 1
25614: PPUSH
25615: LD_INT 4
25617: PPUSH
25618: CALL_OW 12
25622: PPUSH
25623: CALL_OW 336
25627: GO 25574
25629: POP
25630: POP
// end ;
25631: PPOPN 1
25633: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25634: LD_EXP 66
25638: PUSH
25639: LD_EXP 78
25643: AND
25644: IFFALSE 25723
25646: GO 25648
25648: DISABLE
25649: LD_INT 0
25651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25652: LD_ADDR_VAR 0 1
25656: PUSH
25657: LD_INT 22
25659: PUSH
25660: LD_OWVAR 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 21
25671: PUSH
25672: LD_INT 3
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PPUSH
25683: CALL_OW 69
25687: ST_TO_ADDR
// if not tmp then
25688: LD_VAR 0 1
25692: NOT
25693: IFFALSE 25697
// exit ;
25695: GO 25723
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25697: LD_VAR 0 1
25701: PUSH
25702: LD_INT 1
25704: PPUSH
25705: LD_VAR 0 1
25709: PPUSH
25710: CALL_OW 12
25714: ARRAY
25715: PPUSH
25716: LD_INT 100
25718: PPUSH
25719: CALL_OW 234
// end ;
25723: PPOPN 1
25725: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25726: LD_EXP 66
25730: PUSH
25731: LD_EXP 80
25735: AND
25736: IFFALSE 25834
25738: GO 25740
25740: DISABLE
25741: LD_INT 0
25743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25744: LD_ADDR_VAR 0 1
25748: PUSH
25749: LD_INT 22
25751: PUSH
25752: LD_OWVAR 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 21
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PPUSH
25775: CALL_OW 69
25779: ST_TO_ADDR
// if not tmp then
25780: LD_VAR 0 1
25784: NOT
25785: IFFALSE 25789
// exit ;
25787: GO 25834
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25789: LD_VAR 0 1
25793: PUSH
25794: LD_INT 1
25796: PPUSH
25797: LD_VAR 0 1
25801: PPUSH
25802: CALL_OW 12
25806: ARRAY
25807: PPUSH
25808: LD_INT 1
25810: PPUSH
25811: LD_INT 4
25813: PPUSH
25814: CALL_OW 12
25818: PPUSH
25819: LD_INT 3000
25821: PPUSH
25822: LD_INT 9000
25824: PPUSH
25825: CALL_OW 12
25829: PPUSH
25830: CALL_OW 492
// end ;
25834: PPOPN 1
25836: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25837: LD_EXP 66
25841: PUSH
25842: LD_EXP 81
25846: AND
25847: IFFALSE 25867
25849: GO 25851
25851: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25852: LD_INT 1
25854: PPUSH
25855: LD_OWVAR 2
25859: PPUSH
25860: LD_INT 0
25862: PPUSH
25863: CALL_OW 324
25867: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25868: LD_EXP 66
25872: PUSH
25873: LD_EXP 82
25877: AND
25878: IFFALSE 25961
25880: GO 25882
25882: DISABLE
25883: LD_INT 0
25885: PPUSH
25886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25887: LD_ADDR_VAR 0 2
25891: PUSH
25892: LD_INT 22
25894: PUSH
25895: LD_OWVAR 2
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 21
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PPUSH
25918: CALL_OW 69
25922: ST_TO_ADDR
// if not tmp then
25923: LD_VAR 0 2
25927: NOT
25928: IFFALSE 25932
// exit ;
25930: GO 25961
// for i in tmp do
25932: LD_ADDR_VAR 0 1
25936: PUSH
25937: LD_VAR 0 2
25941: PUSH
25942: FOR_IN
25943: IFFALSE 25959
// SetBLevel ( i , 10 ) ;
25945: LD_VAR 0 1
25949: PPUSH
25950: LD_INT 10
25952: PPUSH
25953: CALL_OW 241
25957: GO 25942
25959: POP
25960: POP
// end ;
25961: PPOPN 2
25963: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25964: LD_EXP 66
25968: PUSH
25969: LD_EXP 83
25973: AND
25974: IFFALSE 26085
25976: GO 25978
25978: DISABLE
25979: LD_INT 0
25981: PPUSH
25982: PPUSH
25983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25984: LD_ADDR_VAR 0 3
25988: PUSH
25989: LD_INT 22
25991: PUSH
25992: LD_OWVAR 2
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 25
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PPUSH
26015: CALL_OW 69
26019: ST_TO_ADDR
// if not tmp then
26020: LD_VAR 0 3
26024: NOT
26025: IFFALSE 26029
// exit ;
26027: GO 26085
// un := tmp [ rand ( 1 , tmp ) ] ;
26029: LD_ADDR_VAR 0 2
26033: PUSH
26034: LD_VAR 0 3
26038: PUSH
26039: LD_INT 1
26041: PPUSH
26042: LD_VAR 0 3
26046: PPUSH
26047: CALL_OW 12
26051: ARRAY
26052: ST_TO_ADDR
// if Crawls ( un ) then
26053: LD_VAR 0 2
26057: PPUSH
26058: CALL_OW 318
26062: IFFALSE 26073
// ComWalk ( un ) ;
26064: LD_VAR 0 2
26068: PPUSH
26069: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26073: LD_VAR 0 2
26077: PPUSH
26078: LD_INT 5
26080: PPUSH
26081: CALL_OW 336
// end ;
26085: PPOPN 3
26087: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26088: LD_EXP 66
26092: PUSH
26093: LD_EXP 84
26097: AND
26098: PUSH
26099: LD_OWVAR 67
26103: PUSH
26104: LD_INT 4
26106: LESS
26107: AND
26108: IFFALSE 26127
26110: GO 26112
26112: DISABLE
// begin Difficulty := Difficulty + 1 ;
26113: LD_ADDR_OWVAR 67
26117: PUSH
26118: LD_OWVAR 67
26122: PUSH
26123: LD_INT 1
26125: PLUS
26126: ST_TO_ADDR
// end ;
26127: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26128: LD_EXP 66
26132: PUSH
26133: LD_EXP 85
26137: AND
26138: IFFALSE 26241
26140: GO 26142
26142: DISABLE
26143: LD_INT 0
26145: PPUSH
// begin for i := 1 to 5 do
26146: LD_ADDR_VAR 0 1
26150: PUSH
26151: DOUBLE
26152: LD_INT 1
26154: DEC
26155: ST_TO_ADDR
26156: LD_INT 5
26158: PUSH
26159: FOR_TO
26160: IFFALSE 26239
// begin uc_nation := nation_nature ;
26162: LD_ADDR_OWVAR 21
26166: PUSH
26167: LD_INT 0
26169: ST_TO_ADDR
// uc_side := 0 ;
26170: LD_ADDR_OWVAR 20
26174: PUSH
26175: LD_INT 0
26177: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26178: LD_ADDR_OWVAR 29
26182: PUSH
26183: LD_INT 12
26185: PUSH
26186: LD_INT 12
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: ST_TO_ADDR
// hc_agressivity := 20 ;
26193: LD_ADDR_OWVAR 35
26197: PUSH
26198: LD_INT 20
26200: ST_TO_ADDR
// hc_class := class_tiger ;
26201: LD_ADDR_OWVAR 28
26205: PUSH
26206: LD_INT 14
26208: ST_TO_ADDR
// hc_gallery :=  ;
26209: LD_ADDR_OWVAR 33
26213: PUSH
26214: LD_STRING 
26216: ST_TO_ADDR
// hc_name :=  ;
26217: LD_ADDR_OWVAR 26
26221: PUSH
26222: LD_STRING 
26224: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26225: CALL_OW 44
26229: PPUSH
26230: LD_INT 0
26232: PPUSH
26233: CALL_OW 51
// end ;
26237: GO 26159
26239: POP
26240: POP
// end ;
26241: PPOPN 1
26243: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26244: LD_EXP 66
26248: PUSH
26249: LD_EXP 86
26253: AND
26254: IFFALSE 26263
26256: GO 26258
26258: DISABLE
// StreamSibBomb ;
26259: CALL 26264 0 0
26263: END
// export function StreamSibBomb ; var i , x , y ; begin
26264: LD_INT 0
26266: PPUSH
26267: PPUSH
26268: PPUSH
26269: PPUSH
// result := false ;
26270: LD_ADDR_VAR 0 1
26274: PUSH
26275: LD_INT 0
26277: ST_TO_ADDR
// for i := 1 to 16 do
26278: LD_ADDR_VAR 0 2
26282: PUSH
26283: DOUBLE
26284: LD_INT 1
26286: DEC
26287: ST_TO_ADDR
26288: LD_INT 16
26290: PUSH
26291: FOR_TO
26292: IFFALSE 26491
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26294: LD_ADDR_VAR 0 3
26298: PUSH
26299: LD_INT 10
26301: PUSH
26302: LD_INT 20
26304: PUSH
26305: LD_INT 30
26307: PUSH
26308: LD_INT 40
26310: PUSH
26311: LD_INT 50
26313: PUSH
26314: LD_INT 60
26316: PUSH
26317: LD_INT 70
26319: PUSH
26320: LD_INT 80
26322: PUSH
26323: LD_INT 90
26325: PUSH
26326: LD_INT 100
26328: PUSH
26329: LD_INT 110
26331: PUSH
26332: LD_INT 120
26334: PUSH
26335: LD_INT 130
26337: PUSH
26338: LD_INT 140
26340: PUSH
26341: LD_INT 150
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: PPUSH
26364: LD_INT 15
26366: PPUSH
26367: CALL_OW 12
26371: ARRAY
26372: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26373: LD_ADDR_VAR 0 4
26377: PUSH
26378: LD_INT 10
26380: PUSH
26381: LD_INT 20
26383: PUSH
26384: LD_INT 30
26386: PUSH
26387: LD_INT 40
26389: PUSH
26390: LD_INT 50
26392: PUSH
26393: LD_INT 60
26395: PUSH
26396: LD_INT 70
26398: PUSH
26399: LD_INT 80
26401: PUSH
26402: LD_INT 90
26404: PUSH
26405: LD_INT 100
26407: PUSH
26408: LD_INT 110
26410: PUSH
26411: LD_INT 120
26413: PUSH
26414: LD_INT 130
26416: PUSH
26417: LD_INT 140
26419: PUSH
26420: LD_INT 150
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: PPUSH
26443: LD_INT 15
26445: PPUSH
26446: CALL_OW 12
26450: ARRAY
26451: ST_TO_ADDR
// if ValidHex ( x , y ) then
26452: LD_VAR 0 3
26456: PPUSH
26457: LD_VAR 0 4
26461: PPUSH
26462: CALL_OW 488
26466: IFFALSE 26489
// begin result := [ x , y ] ;
26468: LD_ADDR_VAR 0 1
26472: PUSH
26473: LD_VAR 0 3
26477: PUSH
26478: LD_VAR 0 4
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: ST_TO_ADDR
// break ;
26487: GO 26491
// end ; end ;
26489: GO 26291
26491: POP
26492: POP
// if result then
26493: LD_VAR 0 1
26497: IFFALSE 26557
// begin ToLua ( playSibBomb() ) ;
26499: LD_STRING playSibBomb()
26501: PPUSH
26502: CALL_OW 559
// wait ( 0 0$14 ) ;
26506: LD_INT 490
26508: PPUSH
26509: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26513: LD_VAR 0 1
26517: PUSH
26518: LD_INT 1
26520: ARRAY
26521: PPUSH
26522: LD_VAR 0 1
26526: PUSH
26527: LD_INT 2
26529: ARRAY
26530: PPUSH
26531: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26535: LD_VAR 0 1
26539: PUSH
26540: LD_INT 1
26542: ARRAY
26543: PPUSH
26544: LD_VAR 0 1
26548: PUSH
26549: LD_INT 2
26551: ARRAY
26552: PPUSH
26553: CALL_OW 429
// end ; end ;
26557: LD_VAR 0 1
26561: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26562: LD_EXP 66
26566: PUSH
26567: LD_EXP 88
26571: AND
26572: IFFALSE 26584
26574: GO 26576
26576: DISABLE
// YouLost (  ) ;
26577: LD_STRING 
26579: PPUSH
26580: CALL_OW 104
26584: END
// every 0 0$1 trigger StreamModeActive and sFog do
26585: LD_EXP 66
26589: PUSH
26590: LD_EXP 87
26594: AND
26595: IFFALSE 26609
26597: GO 26599
26599: DISABLE
// FogOff ( your_side ) ;
26600: LD_OWVAR 2
26604: PPUSH
26605: CALL_OW 344
26609: END
// every 0 0$1 trigger StreamModeActive and sSun do
26610: LD_EXP 66
26614: PUSH
26615: LD_EXP 89
26619: AND
26620: IFFALSE 26648
26622: GO 26624
26624: DISABLE
// begin solar_recharge_percent := 0 ;
26625: LD_ADDR_OWVAR 79
26629: PUSH
26630: LD_INT 0
26632: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26633: LD_INT 10500
26635: PPUSH
26636: CALL_OW 67
// solar_recharge_percent := 100 ;
26640: LD_ADDR_OWVAR 79
26644: PUSH
26645: LD_INT 100
26647: ST_TO_ADDR
// end ;
26648: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26649: LD_EXP 66
26653: PUSH
26654: LD_EXP 90
26658: AND
26659: IFFALSE 26898
26661: GO 26663
26663: DISABLE
26664: LD_INT 0
26666: PPUSH
26667: PPUSH
26668: PPUSH
// begin tmp := [ ] ;
26669: LD_ADDR_VAR 0 3
26673: PUSH
26674: EMPTY
26675: ST_TO_ADDR
// for i := 1 to 6 do
26676: LD_ADDR_VAR 0 1
26680: PUSH
26681: DOUBLE
26682: LD_INT 1
26684: DEC
26685: ST_TO_ADDR
26686: LD_INT 6
26688: PUSH
26689: FOR_TO
26690: IFFALSE 26795
// begin uc_nation := nation_nature ;
26692: LD_ADDR_OWVAR 21
26696: PUSH
26697: LD_INT 0
26699: ST_TO_ADDR
// uc_side := 0 ;
26700: LD_ADDR_OWVAR 20
26704: PUSH
26705: LD_INT 0
26707: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26708: LD_ADDR_OWVAR 29
26712: PUSH
26713: LD_INT 12
26715: PUSH
26716: LD_INT 12
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: ST_TO_ADDR
// hc_agressivity := 20 ;
26723: LD_ADDR_OWVAR 35
26727: PUSH
26728: LD_INT 20
26730: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26731: LD_ADDR_OWVAR 28
26735: PUSH
26736: LD_INT 17
26738: ST_TO_ADDR
// hc_gallery :=  ;
26739: LD_ADDR_OWVAR 33
26743: PUSH
26744: LD_STRING 
26746: ST_TO_ADDR
// hc_name :=  ;
26747: LD_ADDR_OWVAR 26
26751: PUSH
26752: LD_STRING 
26754: ST_TO_ADDR
// un := CreateHuman ;
26755: LD_ADDR_VAR 0 2
26759: PUSH
26760: CALL_OW 44
26764: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26765: LD_VAR 0 2
26769: PPUSH
26770: LD_INT 1
26772: PPUSH
26773: CALL_OW 51
// tmp := tmp ^ un ;
26777: LD_ADDR_VAR 0 3
26781: PUSH
26782: LD_VAR 0 3
26786: PUSH
26787: LD_VAR 0 2
26791: ADD
26792: ST_TO_ADDR
// end ;
26793: GO 26689
26795: POP
26796: POP
// repeat wait ( 0 0$1 ) ;
26797: LD_INT 35
26799: PPUSH
26800: CALL_OW 67
// for un in tmp do
26804: LD_ADDR_VAR 0 2
26808: PUSH
26809: LD_VAR 0 3
26813: PUSH
26814: FOR_IN
26815: IFFALSE 26889
// begin if IsDead ( un ) then
26817: LD_VAR 0 2
26821: PPUSH
26822: CALL_OW 301
26826: IFFALSE 26846
// begin tmp := tmp diff un ;
26828: LD_ADDR_VAR 0 3
26832: PUSH
26833: LD_VAR 0 3
26837: PUSH
26838: LD_VAR 0 2
26842: DIFF
26843: ST_TO_ADDR
// continue ;
26844: GO 26814
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_INT 3
26853: PUSH
26854: LD_INT 22
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PPUSH
26868: CALL_OW 69
26872: PPUSH
26873: LD_VAR 0 2
26877: PPUSH
26878: CALL_OW 74
26882: PPUSH
26883: CALL_OW 115
// end ;
26887: GO 26814
26889: POP
26890: POP
// until not tmp ;
26891: LD_VAR 0 3
26895: NOT
26896: IFFALSE 26797
// end ;
26898: PPOPN 3
26900: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26901: LD_EXP 66
26905: PUSH
26906: LD_EXP 91
26910: AND
26911: IFFALSE 26965
26913: GO 26915
26915: DISABLE
// begin ToLua ( displayTroll(); ) ;
26916: LD_STRING displayTroll();
26918: PPUSH
26919: CALL_OW 559
// wait ( 3 3$00 ) ;
26923: LD_INT 6300
26925: PPUSH
26926: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26930: LD_STRING hideTroll();
26932: PPUSH
26933: CALL_OW 559
// wait ( 1 1$00 ) ;
26937: LD_INT 2100
26939: PPUSH
26940: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26944: LD_STRING displayTroll();
26946: PPUSH
26947: CALL_OW 559
// wait ( 1 1$00 ) ;
26951: LD_INT 2100
26953: PPUSH
26954: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26958: LD_STRING hideTroll();
26960: PPUSH
26961: CALL_OW 559
// end ;
26965: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26966: LD_EXP 66
26970: PUSH
26971: LD_EXP 92
26975: AND
26976: IFFALSE 27039
26978: GO 26980
26980: DISABLE
26981: LD_INT 0
26983: PPUSH
// begin p := 0 ;
26984: LD_ADDR_VAR 0 1
26988: PUSH
26989: LD_INT 0
26991: ST_TO_ADDR
// repeat game_speed := 1 ;
26992: LD_ADDR_OWVAR 65
26996: PUSH
26997: LD_INT 1
26999: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27000: LD_INT 35
27002: PPUSH
27003: CALL_OW 67
// p := p + 1 ;
27007: LD_ADDR_VAR 0 1
27011: PUSH
27012: LD_VAR 0 1
27016: PUSH
27017: LD_INT 1
27019: PLUS
27020: ST_TO_ADDR
// until p >= 60 ;
27021: LD_VAR 0 1
27025: PUSH
27026: LD_INT 60
27028: GREATEREQUAL
27029: IFFALSE 26992
// game_speed := 4 ;
27031: LD_ADDR_OWVAR 65
27035: PUSH
27036: LD_INT 4
27038: ST_TO_ADDR
// end ;
27039: PPOPN 1
27041: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27042: LD_EXP 66
27046: PUSH
27047: LD_EXP 93
27051: AND
27052: IFFALSE 27198
27054: GO 27056
27056: DISABLE
27057: LD_INT 0
27059: PPUSH
27060: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27061: LD_ADDR_VAR 0 1
27065: PUSH
27066: LD_INT 22
27068: PUSH
27069: LD_OWVAR 2
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 30
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 30
27093: PUSH
27094: LD_INT 1
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PPUSH
27110: CALL_OW 69
27114: ST_TO_ADDR
// if not depot then
27115: LD_VAR 0 1
27119: NOT
27120: IFFALSE 27124
// exit ;
27122: GO 27198
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27124: LD_ADDR_VAR 0 2
27128: PUSH
27129: LD_VAR 0 1
27133: PUSH
27134: LD_INT 1
27136: PPUSH
27137: LD_VAR 0 1
27141: PPUSH
27142: CALL_OW 12
27146: ARRAY
27147: PPUSH
27148: CALL_OW 274
27152: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27153: LD_VAR 0 2
27157: PPUSH
27158: LD_INT 1
27160: PPUSH
27161: LD_INT 0
27163: PPUSH
27164: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27168: LD_VAR 0 2
27172: PPUSH
27173: LD_INT 2
27175: PPUSH
27176: LD_INT 0
27178: PPUSH
27179: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27183: LD_VAR 0 2
27187: PPUSH
27188: LD_INT 3
27190: PPUSH
27191: LD_INT 0
27193: PPUSH
27194: CALL_OW 277
// end ;
27198: PPOPN 2
27200: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27201: LD_EXP 66
27205: PUSH
27206: LD_EXP 94
27210: AND
27211: IFFALSE 27308
27213: GO 27215
27215: DISABLE
27216: LD_INT 0
27218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27219: LD_ADDR_VAR 0 1
27223: PUSH
27224: LD_INT 22
27226: PUSH
27227: LD_OWVAR 2
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 21
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 3
27248: PUSH
27249: LD_INT 23
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: LIST
27267: PPUSH
27268: CALL_OW 69
27272: ST_TO_ADDR
// if not tmp then
27273: LD_VAR 0 1
27277: NOT
27278: IFFALSE 27282
// exit ;
27280: GO 27308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27282: LD_VAR 0 1
27286: PUSH
27287: LD_INT 1
27289: PPUSH
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 12
27299: ARRAY
27300: PPUSH
27301: LD_INT 200
27303: PPUSH
27304: CALL_OW 234
// end ;
27308: PPOPN 1
27310: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27311: LD_EXP 66
27315: PUSH
27316: LD_EXP 95
27320: AND
27321: IFFALSE 27400
27323: GO 27325
27325: DISABLE
27326: LD_INT 0
27328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27329: LD_ADDR_VAR 0 1
27333: PUSH
27334: LD_INT 22
27336: PUSH
27337: LD_OWVAR 2
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 21
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PPUSH
27360: CALL_OW 69
27364: ST_TO_ADDR
// if not tmp then
27365: LD_VAR 0 1
27369: NOT
27370: IFFALSE 27374
// exit ;
27372: GO 27400
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27374: LD_VAR 0 1
27378: PUSH
27379: LD_INT 1
27381: PPUSH
27382: LD_VAR 0 1
27386: PPUSH
27387: CALL_OW 12
27391: ARRAY
27392: PPUSH
27393: LD_INT 60
27395: PPUSH
27396: CALL_OW 234
// end ;
27400: PPOPN 1
27402: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27403: LD_EXP 66
27407: PUSH
27408: LD_EXP 96
27412: AND
27413: IFFALSE 27512
27415: GO 27417
27417: DISABLE
27418: LD_INT 0
27420: PPUSH
27421: PPUSH
// begin enable ;
27422: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27423: LD_ADDR_VAR 0 1
27427: PUSH
27428: LD_INT 22
27430: PUSH
27431: LD_OWVAR 2
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 61
27442: PUSH
27443: EMPTY
27444: LIST
27445: PUSH
27446: LD_INT 33
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: PPUSH
27461: CALL_OW 69
27465: ST_TO_ADDR
// if not tmp then
27466: LD_VAR 0 1
27470: NOT
27471: IFFALSE 27475
// exit ;
27473: GO 27512
// for i in tmp do
27475: LD_ADDR_VAR 0 2
27479: PUSH
27480: LD_VAR 0 1
27484: PUSH
27485: FOR_IN
27486: IFFALSE 27510
// if IsControledBy ( i ) then
27488: LD_VAR 0 2
27492: PPUSH
27493: CALL_OW 312
27497: IFFALSE 27508
// ComUnlink ( i ) ;
27499: LD_VAR 0 2
27503: PPUSH
27504: CALL_OW 136
27508: GO 27485
27510: POP
27511: POP
// end ;
27512: PPOPN 2
27514: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27515: LD_EXP 66
27519: PUSH
27520: LD_EXP 97
27524: AND
27525: IFFALSE 27665
27527: GO 27529
27529: DISABLE
27530: LD_INT 0
27532: PPUSH
27533: PPUSH
// begin ToLua ( displayPowell(); ) ;
27534: LD_STRING displayPowell();
27536: PPUSH
27537: CALL_OW 559
// uc_side := 0 ;
27541: LD_ADDR_OWVAR 20
27545: PUSH
27546: LD_INT 0
27548: ST_TO_ADDR
// uc_nation := 2 ;
27549: LD_ADDR_OWVAR 21
27553: PUSH
27554: LD_INT 2
27556: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27557: LD_ADDR_OWVAR 37
27561: PUSH
27562: LD_INT 14
27564: ST_TO_ADDR
// vc_engine := engine_siberite ;
27565: LD_ADDR_OWVAR 39
27569: PUSH
27570: LD_INT 3
27572: ST_TO_ADDR
// vc_control := control_apeman ;
27573: LD_ADDR_OWVAR 38
27577: PUSH
27578: LD_INT 5
27580: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27581: LD_ADDR_OWVAR 40
27585: PUSH
27586: LD_INT 29
27588: ST_TO_ADDR
// un := CreateVehicle ;
27589: LD_ADDR_VAR 0 2
27593: PUSH
27594: CALL_OW 45
27598: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27599: LD_VAR 0 2
27603: PPUSH
27604: LD_INT 1
27606: PPUSH
27607: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27611: LD_INT 35
27613: PPUSH
27614: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27618: LD_VAR 0 2
27622: PPUSH
27623: LD_INT 22
27625: PUSH
27626: LD_OWVAR 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PPUSH
27635: CALL_OW 69
27639: PPUSH
27640: LD_VAR 0 2
27644: PPUSH
27645: CALL_OW 74
27649: PPUSH
27650: CALL_OW 115
// until IsDead ( un ) ;
27654: LD_VAR 0 2
27658: PPUSH
27659: CALL_OW 301
27663: IFFALSE 27611
// end ;
27665: PPOPN 2
27667: END
// every 0 0$1 trigger StreamModeActive and sStu do
27668: LD_EXP 66
27672: PUSH
27673: LD_EXP 105
27677: AND
27678: IFFALSE 27694
27680: GO 27682
27682: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27683: LD_STRING displayStucuk();
27685: PPUSH
27686: CALL_OW 559
// ResetFog ;
27690: CALL_OW 335
// end ;
27694: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27695: LD_EXP 66
27699: PUSH
27700: LD_EXP 98
27704: AND
27705: IFFALSE 27846
27707: GO 27709
27709: DISABLE
27710: LD_INT 0
27712: PPUSH
27713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27714: LD_ADDR_VAR 0 2
27718: PUSH
27719: LD_INT 22
27721: PUSH
27722: LD_OWVAR 2
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 21
27733: PUSH
27734: LD_INT 1
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PPUSH
27745: CALL_OW 69
27749: ST_TO_ADDR
// if not tmp then
27750: LD_VAR 0 2
27754: NOT
27755: IFFALSE 27759
// exit ;
27757: GO 27846
// un := tmp [ rand ( 1 , tmp ) ] ;
27759: LD_ADDR_VAR 0 1
27763: PUSH
27764: LD_VAR 0 2
27768: PUSH
27769: LD_INT 1
27771: PPUSH
27772: LD_VAR 0 2
27776: PPUSH
27777: CALL_OW 12
27781: ARRAY
27782: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27783: LD_VAR 0 1
27787: PPUSH
27788: LD_INT 0
27790: PPUSH
27791: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27795: LD_VAR 0 1
27799: PPUSH
27800: LD_OWVAR 3
27804: PUSH
27805: LD_VAR 0 1
27809: DIFF
27810: PPUSH
27811: LD_VAR 0 1
27815: PPUSH
27816: CALL_OW 74
27820: PPUSH
27821: CALL_OW 115
// wait ( 0 0$20 ) ;
27825: LD_INT 700
27827: PPUSH
27828: CALL_OW 67
// SetSide ( un , your_side ) ;
27832: LD_VAR 0 1
27836: PPUSH
27837: LD_OWVAR 2
27841: PPUSH
27842: CALL_OW 235
// end ;
27846: PPOPN 2
27848: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27849: LD_EXP 66
27853: PUSH
27854: LD_EXP 99
27858: AND
27859: IFFALSE 27965
27861: GO 27863
27863: DISABLE
27864: LD_INT 0
27866: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27867: LD_ADDR_VAR 0 1
27871: PUSH
27872: LD_INT 22
27874: PUSH
27875: LD_OWVAR 2
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: LD_INT 30
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 30
27899: PUSH
27900: LD_INT 1
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL_OW 69
27920: ST_TO_ADDR
// if not depot then
27921: LD_VAR 0 1
27925: NOT
27926: IFFALSE 27930
// exit ;
27928: GO 27965
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27930: LD_VAR 0 1
27934: PUSH
27935: LD_INT 1
27937: ARRAY
27938: PPUSH
27939: CALL_OW 250
27943: PPUSH
27944: LD_VAR 0 1
27948: PUSH
27949: LD_INT 1
27951: ARRAY
27952: PPUSH
27953: CALL_OW 251
27957: PPUSH
27958: LD_INT 70
27960: PPUSH
27961: CALL_OW 495
// end ;
27965: PPOPN 1
27967: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27968: LD_EXP 66
27972: PUSH
27973: LD_EXP 100
27977: AND
27978: IFFALSE 28189
27980: GO 27982
27982: DISABLE
27983: LD_INT 0
27985: PPUSH
27986: PPUSH
27987: PPUSH
27988: PPUSH
27989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27990: LD_ADDR_VAR 0 5
27994: PUSH
27995: LD_INT 22
27997: PUSH
27998: LD_OWVAR 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 21
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PPUSH
28021: CALL_OW 69
28025: ST_TO_ADDR
// if not tmp then
28026: LD_VAR 0 5
28030: NOT
28031: IFFALSE 28035
// exit ;
28033: GO 28189
// for i in tmp do
28035: LD_ADDR_VAR 0 1
28039: PUSH
28040: LD_VAR 0 5
28044: PUSH
28045: FOR_IN
28046: IFFALSE 28187
// begin d := rand ( 0 , 5 ) ;
28048: LD_ADDR_VAR 0 4
28052: PUSH
28053: LD_INT 0
28055: PPUSH
28056: LD_INT 5
28058: PPUSH
28059: CALL_OW 12
28063: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28064: LD_ADDR_VAR 0 2
28068: PUSH
28069: LD_VAR 0 1
28073: PPUSH
28074: CALL_OW 250
28078: PPUSH
28079: LD_VAR 0 4
28083: PPUSH
28084: LD_INT 3
28086: PPUSH
28087: LD_INT 12
28089: PPUSH
28090: CALL_OW 12
28094: PPUSH
28095: CALL_OW 272
28099: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28100: LD_ADDR_VAR 0 3
28104: PUSH
28105: LD_VAR 0 1
28109: PPUSH
28110: CALL_OW 251
28114: PPUSH
28115: LD_VAR 0 4
28119: PPUSH
28120: LD_INT 3
28122: PPUSH
28123: LD_INT 12
28125: PPUSH
28126: CALL_OW 12
28130: PPUSH
28131: CALL_OW 273
28135: ST_TO_ADDR
// if ValidHex ( x , y ) then
28136: LD_VAR 0 2
28140: PPUSH
28141: LD_VAR 0 3
28145: PPUSH
28146: CALL_OW 488
28150: IFFALSE 28185
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28152: LD_VAR 0 1
28156: PPUSH
28157: LD_VAR 0 2
28161: PPUSH
28162: LD_VAR 0 3
28166: PPUSH
28167: LD_INT 3
28169: PPUSH
28170: LD_INT 6
28172: PPUSH
28173: CALL_OW 12
28177: PPUSH
28178: LD_INT 1
28180: PPUSH
28181: CALL_OW 483
// end ;
28185: GO 28045
28187: POP
28188: POP
// end ;
28189: PPOPN 5
28191: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28192: LD_EXP 66
28196: PUSH
28197: LD_EXP 101
28201: AND
28202: IFFALSE 28296
28204: GO 28206
28206: DISABLE
28207: LD_INT 0
28209: PPUSH
28210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28211: LD_ADDR_VAR 0 2
28215: PUSH
28216: LD_INT 22
28218: PUSH
28219: LD_OWVAR 2
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 32
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 21
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: LIST
28252: PPUSH
28253: CALL_OW 69
28257: ST_TO_ADDR
// if not tmp then
28258: LD_VAR 0 2
28262: NOT
28263: IFFALSE 28267
// exit ;
28265: GO 28296
// for i in tmp do
28267: LD_ADDR_VAR 0 1
28271: PUSH
28272: LD_VAR 0 2
28276: PUSH
28277: FOR_IN
28278: IFFALSE 28294
// SetFuel ( i , 0 ) ;
28280: LD_VAR 0 1
28284: PPUSH
28285: LD_INT 0
28287: PPUSH
28288: CALL_OW 240
28292: GO 28277
28294: POP
28295: POP
// end ;
28296: PPOPN 2
28298: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28299: LD_EXP 66
28303: PUSH
28304: LD_EXP 102
28308: AND
28309: IFFALSE 28375
28311: GO 28313
28313: DISABLE
28314: LD_INT 0
28316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28317: LD_ADDR_VAR 0 1
28321: PUSH
28322: LD_INT 22
28324: PUSH
28325: LD_OWVAR 2
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 30
28336: PUSH
28337: LD_INT 29
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PPUSH
28348: CALL_OW 69
28352: ST_TO_ADDR
// if not tmp then
28353: LD_VAR 0 1
28357: NOT
28358: IFFALSE 28362
// exit ;
28360: GO 28375
// DestroyUnit ( tmp [ 1 ] ) ;
28362: LD_VAR 0 1
28366: PUSH
28367: LD_INT 1
28369: ARRAY
28370: PPUSH
28371: CALL_OW 65
// end ;
28375: PPOPN 1
28377: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28378: LD_EXP 66
28382: PUSH
28383: LD_EXP 104
28387: AND
28388: IFFALSE 28517
28390: GO 28392
28392: DISABLE
28393: LD_INT 0
28395: PPUSH
// begin uc_side := 0 ;
28396: LD_ADDR_OWVAR 20
28400: PUSH
28401: LD_INT 0
28403: ST_TO_ADDR
// uc_nation := nation_arabian ;
28404: LD_ADDR_OWVAR 21
28408: PUSH
28409: LD_INT 2
28411: ST_TO_ADDR
// hc_gallery :=  ;
28412: LD_ADDR_OWVAR 33
28416: PUSH
28417: LD_STRING 
28419: ST_TO_ADDR
// hc_name :=  ;
28420: LD_ADDR_OWVAR 26
28424: PUSH
28425: LD_STRING 
28427: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28428: LD_INT 1
28430: PPUSH
28431: LD_INT 11
28433: PPUSH
28434: LD_INT 10
28436: PPUSH
28437: CALL_OW 380
// un := CreateHuman ;
28441: LD_ADDR_VAR 0 1
28445: PUSH
28446: CALL_OW 44
28450: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28451: LD_VAR 0 1
28455: PPUSH
28456: LD_INT 1
28458: PPUSH
28459: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28463: LD_INT 35
28465: PPUSH
28466: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28470: LD_VAR 0 1
28474: PPUSH
28475: LD_INT 22
28477: PUSH
28478: LD_OWVAR 2
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PPUSH
28487: CALL_OW 69
28491: PPUSH
28492: LD_VAR 0 1
28496: PPUSH
28497: CALL_OW 74
28501: PPUSH
28502: CALL_OW 115
// until IsDead ( un ) ;
28506: LD_VAR 0 1
28510: PPUSH
28511: CALL_OW 301
28515: IFFALSE 28463
// end ;
28517: PPOPN 1
28519: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28520: LD_EXP 66
28524: PUSH
28525: LD_EXP 106
28529: AND
28530: IFFALSE 28542
28532: GO 28534
28534: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28535: LD_STRING earthquake(getX(game), 0, 32)
28537: PPUSH
28538: CALL_OW 559
28542: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28543: LD_EXP 66
28547: PUSH
28548: LD_EXP 107
28552: AND
28553: IFFALSE 28644
28555: GO 28557
28557: DISABLE
28558: LD_INT 0
28560: PPUSH
// begin enable ;
28561: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28562: LD_ADDR_VAR 0 1
28566: PUSH
28567: LD_INT 22
28569: PUSH
28570: LD_OWVAR 2
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 21
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 33
28591: PUSH
28592: LD_INT 3
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: PPUSH
28604: CALL_OW 69
28608: ST_TO_ADDR
// if not tmp then
28609: LD_VAR 0 1
28613: NOT
28614: IFFALSE 28618
// exit ;
28616: GO 28644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28618: LD_VAR 0 1
28622: PUSH
28623: LD_INT 1
28625: PPUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 12
28635: ARRAY
28636: PPUSH
28637: LD_INT 1
28639: PPUSH
28640: CALL_OW 234
// end ;
28644: PPOPN 1
28646: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28647: LD_EXP 66
28651: PUSH
28652: LD_EXP 108
28656: AND
28657: IFFALSE 28798
28659: GO 28661
28661: DISABLE
28662: LD_INT 0
28664: PPUSH
28665: PPUSH
28666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28667: LD_ADDR_VAR 0 3
28671: PUSH
28672: LD_INT 22
28674: PUSH
28675: LD_OWVAR 2
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 25
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PPUSH
28698: CALL_OW 69
28702: ST_TO_ADDR
// if not tmp then
28703: LD_VAR 0 3
28707: NOT
28708: IFFALSE 28712
// exit ;
28710: GO 28798
// un := tmp [ rand ( 1 , tmp ) ] ;
28712: LD_ADDR_VAR 0 2
28716: PUSH
28717: LD_VAR 0 3
28721: PUSH
28722: LD_INT 1
28724: PPUSH
28725: LD_VAR 0 3
28729: PPUSH
28730: CALL_OW 12
28734: ARRAY
28735: ST_TO_ADDR
// if Crawls ( un ) then
28736: LD_VAR 0 2
28740: PPUSH
28741: CALL_OW 318
28745: IFFALSE 28756
// ComWalk ( un ) ;
28747: LD_VAR 0 2
28751: PPUSH
28752: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28756: LD_VAR 0 2
28760: PPUSH
28761: LD_INT 9
28763: PPUSH
28764: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28768: LD_INT 28
28770: PPUSH
28771: LD_OWVAR 2
28775: PPUSH
28776: LD_INT 2
28778: PPUSH
28779: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28783: LD_INT 29
28785: PPUSH
28786: LD_OWVAR 2
28790: PPUSH
28791: LD_INT 2
28793: PPUSH
28794: CALL_OW 322
// end ;
28798: PPOPN 3
28800: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28801: LD_EXP 66
28805: PUSH
28806: LD_EXP 109
28810: AND
28811: IFFALSE 28922
28813: GO 28815
28815: DISABLE
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
28820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28821: LD_ADDR_VAR 0 3
28825: PUSH
28826: LD_INT 22
28828: PUSH
28829: LD_OWVAR 2
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 25
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 69
28856: ST_TO_ADDR
// if not tmp then
28857: LD_VAR 0 3
28861: NOT
28862: IFFALSE 28866
// exit ;
28864: GO 28922
// un := tmp [ rand ( 1 , tmp ) ] ;
28866: LD_ADDR_VAR 0 2
28870: PUSH
28871: LD_VAR 0 3
28875: PUSH
28876: LD_INT 1
28878: PPUSH
28879: LD_VAR 0 3
28883: PPUSH
28884: CALL_OW 12
28888: ARRAY
28889: ST_TO_ADDR
// if Crawls ( un ) then
28890: LD_VAR 0 2
28894: PPUSH
28895: CALL_OW 318
28899: IFFALSE 28910
// ComWalk ( un ) ;
28901: LD_VAR 0 2
28905: PPUSH
28906: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28910: LD_VAR 0 2
28914: PPUSH
28915: LD_INT 8
28917: PPUSH
28918: CALL_OW 336
// end ;
28922: PPOPN 3
28924: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28925: LD_EXP 66
28929: PUSH
28930: LD_EXP 110
28934: AND
28935: IFFALSE 29079
28937: GO 28939
28939: DISABLE
28940: LD_INT 0
28942: PPUSH
28943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28944: LD_ADDR_VAR 0 2
28948: PUSH
28949: LD_INT 22
28951: PUSH
28952: LD_OWVAR 2
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 21
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 2
28973: PUSH
28974: LD_INT 34
28976: PUSH
28977: LD_INT 12
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 34
28986: PUSH
28987: LD_INT 51
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 34
28996: PUSH
28997: LD_INT 32
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: LIST
29014: PPUSH
29015: CALL_OW 69
29019: ST_TO_ADDR
// if not tmp then
29020: LD_VAR 0 2
29024: NOT
29025: IFFALSE 29029
// exit ;
29027: GO 29079
// for i in tmp do
29029: LD_ADDR_VAR 0 1
29033: PUSH
29034: LD_VAR 0 2
29038: PUSH
29039: FOR_IN
29040: IFFALSE 29077
// if GetCargo ( i , mat_artifact ) = 0 then
29042: LD_VAR 0 1
29046: PPUSH
29047: LD_INT 4
29049: PPUSH
29050: CALL_OW 289
29054: PUSH
29055: LD_INT 0
29057: EQUAL
29058: IFFALSE 29075
// SetCargo ( i , mat_siberit , 100 ) ;
29060: LD_VAR 0 1
29064: PPUSH
29065: LD_INT 3
29067: PPUSH
29068: LD_INT 100
29070: PPUSH
29071: CALL_OW 290
29075: GO 29039
29077: POP
29078: POP
// end ;
29079: PPOPN 2
29081: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29082: LD_EXP 66
29086: PUSH
29087: LD_EXP 111
29091: AND
29092: IFFALSE 29275
29094: GO 29096
29096: DISABLE
29097: LD_INT 0
29099: PPUSH
29100: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29101: LD_ADDR_VAR 0 2
29105: PUSH
29106: LD_INT 22
29108: PUSH
29109: LD_OWVAR 2
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PPUSH
29118: CALL_OW 69
29122: ST_TO_ADDR
// if not tmp then
29123: LD_VAR 0 2
29127: NOT
29128: IFFALSE 29132
// exit ;
29130: GO 29275
// for i := 1 to 2 do
29132: LD_ADDR_VAR 0 1
29136: PUSH
29137: DOUBLE
29138: LD_INT 1
29140: DEC
29141: ST_TO_ADDR
29142: LD_INT 2
29144: PUSH
29145: FOR_TO
29146: IFFALSE 29273
// begin uc_side := your_side ;
29148: LD_ADDR_OWVAR 20
29152: PUSH
29153: LD_OWVAR 2
29157: ST_TO_ADDR
// uc_nation := nation_american ;
29158: LD_ADDR_OWVAR 21
29162: PUSH
29163: LD_INT 1
29165: ST_TO_ADDR
// vc_chassis := us_morphling ;
29166: LD_ADDR_OWVAR 37
29170: PUSH
29171: LD_INT 5
29173: ST_TO_ADDR
// vc_engine := engine_siberite ;
29174: LD_ADDR_OWVAR 39
29178: PUSH
29179: LD_INT 3
29181: ST_TO_ADDR
// vc_control := control_computer ;
29182: LD_ADDR_OWVAR 38
29186: PUSH
29187: LD_INT 3
29189: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29190: LD_ADDR_OWVAR 40
29194: PUSH
29195: LD_INT 10
29197: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29198: LD_VAR 0 2
29202: PUSH
29203: LD_INT 1
29205: ARRAY
29206: PPUSH
29207: CALL_OW 310
29211: NOT
29212: IFFALSE 29259
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29214: CALL_OW 45
29218: PPUSH
29219: LD_VAR 0 2
29223: PUSH
29224: LD_INT 1
29226: ARRAY
29227: PPUSH
29228: CALL_OW 250
29232: PPUSH
29233: LD_VAR 0 2
29237: PUSH
29238: LD_INT 1
29240: ARRAY
29241: PPUSH
29242: CALL_OW 251
29246: PPUSH
29247: LD_INT 12
29249: PPUSH
29250: LD_INT 1
29252: PPUSH
29253: CALL_OW 50
29257: GO 29271
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29259: CALL_OW 45
29263: PPUSH
29264: LD_INT 1
29266: PPUSH
29267: CALL_OW 51
// end ;
29271: GO 29145
29273: POP
29274: POP
// end ;
29275: PPOPN 2
29277: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29278: LD_EXP 66
29282: PUSH
29283: LD_EXP 112
29287: AND
29288: IFFALSE 29510
29290: GO 29292
29292: DISABLE
29293: LD_INT 0
29295: PPUSH
29296: PPUSH
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29301: LD_ADDR_VAR 0 6
29305: PUSH
29306: LD_INT 22
29308: PUSH
29309: LD_OWVAR 2
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 21
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: LD_INT 23
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: PPUSH
29350: CALL_OW 69
29354: ST_TO_ADDR
// if not tmp then
29355: LD_VAR 0 6
29359: NOT
29360: IFFALSE 29364
// exit ;
29362: GO 29510
// s1 := rand ( 1 , 4 ) ;
29364: LD_ADDR_VAR 0 2
29368: PUSH
29369: LD_INT 1
29371: PPUSH
29372: LD_INT 4
29374: PPUSH
29375: CALL_OW 12
29379: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29380: LD_ADDR_VAR 0 4
29384: PUSH
29385: LD_VAR 0 6
29389: PUSH
29390: LD_INT 1
29392: ARRAY
29393: PPUSH
29394: LD_VAR 0 2
29398: PPUSH
29399: CALL_OW 259
29403: ST_TO_ADDR
// if s1 = 1 then
29404: LD_VAR 0 2
29408: PUSH
29409: LD_INT 1
29411: EQUAL
29412: IFFALSE 29432
// s2 := rand ( 2 , 4 ) else
29414: LD_ADDR_VAR 0 3
29418: PUSH
29419: LD_INT 2
29421: PPUSH
29422: LD_INT 4
29424: PPUSH
29425: CALL_OW 12
29429: ST_TO_ADDR
29430: GO 29440
// s2 := 1 ;
29432: LD_ADDR_VAR 0 3
29436: PUSH
29437: LD_INT 1
29439: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29440: LD_ADDR_VAR 0 5
29444: PUSH
29445: LD_VAR 0 6
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: PPUSH
29454: LD_VAR 0 3
29458: PPUSH
29459: CALL_OW 259
29463: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29464: LD_VAR 0 6
29468: PUSH
29469: LD_INT 1
29471: ARRAY
29472: PPUSH
29473: LD_VAR 0 2
29477: PPUSH
29478: LD_VAR 0 5
29482: PPUSH
29483: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29487: LD_VAR 0 6
29491: PUSH
29492: LD_INT 1
29494: ARRAY
29495: PPUSH
29496: LD_VAR 0 3
29500: PPUSH
29501: LD_VAR 0 4
29505: PPUSH
29506: CALL_OW 237
// end ;
29510: PPOPN 6
29512: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29513: LD_EXP 66
29517: PUSH
29518: LD_EXP 113
29522: AND
29523: IFFALSE 29602
29525: GO 29527
29527: DISABLE
29528: LD_INT 0
29530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29531: LD_ADDR_VAR 0 1
29535: PUSH
29536: LD_INT 22
29538: PUSH
29539: LD_OWVAR 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 30
29550: PUSH
29551: LD_INT 3
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PPUSH
29562: CALL_OW 69
29566: ST_TO_ADDR
// if not tmp then
29567: LD_VAR 0 1
29571: NOT
29572: IFFALSE 29576
// exit ;
29574: GO 29602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29576: LD_VAR 0 1
29580: PUSH
29581: LD_INT 1
29583: PPUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 12
29593: ARRAY
29594: PPUSH
29595: LD_INT 1
29597: PPUSH
29598: CALL_OW 234
// end ;
29602: PPOPN 1
29604: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29605: LD_EXP 66
29609: PUSH
29610: LD_EXP 114
29614: AND
29615: IFFALSE 29727
29617: GO 29619
29619: DISABLE
29620: LD_INT 0
29622: PPUSH
29623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29624: LD_ADDR_VAR 0 2
29628: PUSH
29629: LD_INT 22
29631: PUSH
29632: LD_OWVAR 2
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 30
29646: PUSH
29647: LD_INT 27
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 30
29656: PUSH
29657: LD_INT 26
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 30
29666: PUSH
29667: LD_INT 28
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 2
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29727
// for i in tmp do
29698: LD_ADDR_VAR 0 1
29702: PUSH
29703: LD_VAR 0 2
29707: PUSH
29708: FOR_IN
29709: IFFALSE 29725
// SetLives ( i , 1 ) ;
29711: LD_VAR 0 1
29715: PPUSH
29716: LD_INT 1
29718: PPUSH
29719: CALL_OW 234
29723: GO 29708
29725: POP
29726: POP
// end ;
29727: PPOPN 2
29729: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29730: LD_EXP 66
29734: PUSH
29735: LD_EXP 115
29739: AND
29740: IFFALSE 30027
29742: GO 29744
29744: DISABLE
29745: LD_INT 0
29747: PPUSH
29748: PPUSH
29749: PPUSH
// begin i := rand ( 1 , 7 ) ;
29750: LD_ADDR_VAR 0 1
29754: PUSH
29755: LD_INT 1
29757: PPUSH
29758: LD_INT 7
29760: PPUSH
29761: CALL_OW 12
29765: ST_TO_ADDR
// case i of 1 :
29766: LD_VAR 0 1
29770: PUSH
29771: LD_INT 1
29773: DOUBLE
29774: EQUAL
29775: IFTRUE 29779
29777: GO 29789
29779: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29780: LD_STRING earthquake(getX(game), 0, 32)
29782: PPUSH
29783: CALL_OW 559
29787: GO 30027
29789: LD_INT 2
29791: DOUBLE
29792: EQUAL
29793: IFTRUE 29797
29795: GO 29811
29797: POP
// begin ToLua ( displayStucuk(); ) ;
29798: LD_STRING displayStucuk();
29800: PPUSH
29801: CALL_OW 559
// ResetFog ;
29805: CALL_OW 335
// end ; 3 :
29809: GO 30027
29811: LD_INT 3
29813: DOUBLE
29814: EQUAL
29815: IFTRUE 29819
29817: GO 29923
29819: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29820: LD_ADDR_VAR 0 2
29824: PUSH
29825: LD_INT 22
29827: PUSH
29828: LD_OWVAR 2
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 25
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PPUSH
29851: CALL_OW 69
29855: ST_TO_ADDR
// if not tmp then
29856: LD_VAR 0 2
29860: NOT
29861: IFFALSE 29865
// exit ;
29863: GO 30027
// un := tmp [ rand ( 1 , tmp ) ] ;
29865: LD_ADDR_VAR 0 3
29869: PUSH
29870: LD_VAR 0 2
29874: PUSH
29875: LD_INT 1
29877: PPUSH
29878: LD_VAR 0 2
29882: PPUSH
29883: CALL_OW 12
29887: ARRAY
29888: ST_TO_ADDR
// if Crawls ( un ) then
29889: LD_VAR 0 3
29893: PPUSH
29894: CALL_OW 318
29898: IFFALSE 29909
// ComWalk ( un ) ;
29900: LD_VAR 0 3
29904: PPUSH
29905: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29909: LD_VAR 0 3
29913: PPUSH
29914: LD_INT 8
29916: PPUSH
29917: CALL_OW 336
// end ; 4 :
29921: GO 30027
29923: LD_INT 4
29925: DOUBLE
29926: EQUAL
29927: IFTRUE 29931
29929: GO 30005
29931: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29932: LD_ADDR_VAR 0 2
29936: PUSH
29937: LD_INT 22
29939: PUSH
29940: LD_OWVAR 2
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 30
29951: PUSH
29952: LD_INT 29
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PPUSH
29963: CALL_OW 69
29967: ST_TO_ADDR
// if not tmp then
29968: LD_VAR 0 2
29972: NOT
29973: IFFALSE 29977
// exit ;
29975: GO 30027
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29977: LD_VAR 0 2
29981: PUSH
29982: LD_INT 1
29984: ARRAY
29985: PPUSH
29986: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29990: LD_VAR 0 2
29994: PUSH
29995: LD_INT 1
29997: ARRAY
29998: PPUSH
29999: CALL_OW 65
// end ; 5 .. 7 :
30003: GO 30027
30005: LD_INT 5
30007: DOUBLE
30008: GREATEREQUAL
30009: IFFALSE 30017
30011: LD_INT 7
30013: DOUBLE
30014: LESSEQUAL
30015: IFTRUE 30019
30017: GO 30026
30019: POP
// StreamSibBomb ; end ;
30020: CALL 26264 0 0
30024: GO 30027
30026: POP
// end ;
30027: PPOPN 3
30029: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30030: LD_EXP 66
30034: PUSH
30035: LD_EXP 116
30039: AND
30040: IFFALSE 30196
30042: GO 30044
30044: DISABLE
30045: LD_INT 0
30047: PPUSH
30048: PPUSH
30049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30050: LD_ADDR_VAR 0 2
30054: PUSH
30055: LD_INT 81
30057: PUSH
30058: LD_OWVAR 2
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 21
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 21
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 69
30103: ST_TO_ADDR
// if not tmp then
30104: LD_VAR 0 2
30108: NOT
30109: IFFALSE 30113
// exit ;
30111: GO 30196
// p := 0 ;
30113: LD_ADDR_VAR 0 3
30117: PUSH
30118: LD_INT 0
30120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30121: LD_INT 35
30123: PPUSH
30124: CALL_OW 67
// p := p + 1 ;
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_VAR 0 3
30137: PUSH
30138: LD_INT 1
30140: PLUS
30141: ST_TO_ADDR
// for i in tmp do
30142: LD_ADDR_VAR 0 1
30146: PUSH
30147: LD_VAR 0 2
30151: PUSH
30152: FOR_IN
30153: IFFALSE 30184
// if GetLives ( i ) < 1000 then
30155: LD_VAR 0 1
30159: PPUSH
30160: CALL_OW 256
30164: PUSH
30165: LD_INT 1000
30167: LESS
30168: IFFALSE 30182
// SetLives ( i , 1000 ) ;
30170: LD_VAR 0 1
30174: PPUSH
30175: LD_INT 1000
30177: PPUSH
30178: CALL_OW 234
30182: GO 30152
30184: POP
30185: POP
// until p > 20 ;
30186: LD_VAR 0 3
30190: PUSH
30191: LD_INT 20
30193: GREATER
30194: IFFALSE 30121
// end ;
30196: PPOPN 3
30198: END
// every 0 0$1 trigger StreamModeActive and sTime do
30199: LD_EXP 66
30203: PUSH
30204: LD_EXP 117
30208: AND
30209: IFFALSE 30244
30211: GO 30213
30213: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30214: LD_INT 28
30216: PPUSH
30217: LD_OWVAR 2
30221: PPUSH
30222: LD_INT 2
30224: PPUSH
30225: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30229: LD_INT 30
30231: PPUSH
30232: LD_OWVAR 2
30236: PPUSH
30237: LD_INT 2
30239: PPUSH
30240: CALL_OW 322
// end ;
30244: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30245: LD_EXP 66
30249: PUSH
30250: LD_EXP 118
30254: AND
30255: IFFALSE 30376
30257: GO 30259
30259: DISABLE
30260: LD_INT 0
30262: PPUSH
30263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30264: LD_ADDR_VAR 0 2
30268: PUSH
30269: LD_INT 22
30271: PUSH
30272: LD_OWVAR 2
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 21
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: LD_INT 23
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 69
30317: ST_TO_ADDR
// if not tmp then
30318: LD_VAR 0 2
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30376
// for i in tmp do
30327: LD_ADDR_VAR 0 1
30331: PUSH
30332: LD_VAR 0 2
30336: PUSH
30337: FOR_IN
30338: IFFALSE 30374
// begin if Crawls ( i ) then
30340: LD_VAR 0 1
30344: PPUSH
30345: CALL_OW 318
30349: IFFALSE 30360
// ComWalk ( i ) ;
30351: LD_VAR 0 1
30355: PPUSH
30356: CALL_OW 138
// SetClass ( i , 2 ) ;
30360: LD_VAR 0 1
30364: PPUSH
30365: LD_INT 2
30367: PPUSH
30368: CALL_OW 336
// end ;
30372: GO 30337
30374: POP
30375: POP
// end ;
30376: PPOPN 2
30378: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30379: LD_EXP 66
30383: PUSH
30384: LD_EXP 119
30388: AND
30389: IFFALSE 30677
30391: GO 30393
30393: DISABLE
30394: LD_INT 0
30396: PPUSH
30397: PPUSH
30398: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30399: LD_OWVAR 2
30403: PPUSH
30404: LD_INT 9
30406: PPUSH
30407: LD_INT 1
30409: PPUSH
30410: LD_INT 1
30412: PPUSH
30413: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30417: LD_INT 9
30419: PPUSH
30420: LD_OWVAR 2
30424: PPUSH
30425: CALL_OW 343
// uc_side := 9 ;
30429: LD_ADDR_OWVAR 20
30433: PUSH
30434: LD_INT 9
30436: ST_TO_ADDR
// uc_nation := 2 ;
30437: LD_ADDR_OWVAR 21
30441: PUSH
30442: LD_INT 2
30444: ST_TO_ADDR
// hc_name := Dark Warrior ;
30445: LD_ADDR_OWVAR 26
30449: PUSH
30450: LD_STRING Dark Warrior
30452: ST_TO_ADDR
// hc_gallery :=  ;
30453: LD_ADDR_OWVAR 33
30457: PUSH
30458: LD_STRING 
30460: ST_TO_ADDR
// hc_noskilllimit := true ;
30461: LD_ADDR_OWVAR 76
30465: PUSH
30466: LD_INT 1
30468: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30469: LD_ADDR_OWVAR 31
30473: PUSH
30474: LD_INT 30
30476: PUSH
30477: LD_INT 30
30479: PUSH
30480: LD_INT 30
30482: PUSH
30483: LD_INT 30
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: ST_TO_ADDR
// un := CreateHuman ;
30492: LD_ADDR_VAR 0 3
30496: PUSH
30497: CALL_OW 44
30501: ST_TO_ADDR
// hc_noskilllimit := false ;
30502: LD_ADDR_OWVAR 76
30506: PUSH
30507: LD_INT 0
30509: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30510: LD_VAR 0 3
30514: PPUSH
30515: LD_INT 1
30517: PPUSH
30518: CALL_OW 51
// ToLua ( playRanger() ) ;
30522: LD_STRING playRanger()
30524: PPUSH
30525: CALL_OW 559
// p := 0 ;
30529: LD_ADDR_VAR 0 2
30533: PUSH
30534: LD_INT 0
30536: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30537: LD_INT 35
30539: PPUSH
30540: CALL_OW 67
// p := p + 1 ;
30544: LD_ADDR_VAR 0 2
30548: PUSH
30549: LD_VAR 0 2
30553: PUSH
30554: LD_INT 1
30556: PLUS
30557: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30558: LD_VAR 0 3
30562: PPUSH
30563: CALL_OW 256
30567: PUSH
30568: LD_INT 1000
30570: LESS
30571: IFFALSE 30585
// SetLives ( un , 1000 ) ;
30573: LD_VAR 0 3
30577: PPUSH
30578: LD_INT 1000
30580: PPUSH
30581: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30585: LD_VAR 0 3
30589: PPUSH
30590: LD_INT 81
30592: PUSH
30593: LD_OWVAR 2
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 91
30604: PUSH
30605: LD_VAR 0 3
30609: PUSH
30610: LD_INT 30
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PPUSH
30622: CALL_OW 69
30626: PPUSH
30627: LD_VAR 0 3
30631: PPUSH
30632: CALL_OW 74
30636: PPUSH
30637: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30641: LD_VAR 0 2
30645: PUSH
30646: LD_INT 80
30648: GREATER
30649: PUSH
30650: LD_VAR 0 3
30654: PPUSH
30655: CALL_OW 301
30659: OR
30660: IFFALSE 30537
// if un then
30662: LD_VAR 0 3
30666: IFFALSE 30677
// RemoveUnit ( un ) ;
30668: LD_VAR 0 3
30672: PPUSH
30673: CALL_OW 64
// end ;
30677: PPOPN 3
30679: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30680: LD_EXP 120
30684: IFFALSE 30800
30686: GO 30688
30688: DISABLE
30689: LD_INT 0
30691: PPUSH
30692: PPUSH
30693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30694: LD_ADDR_VAR 0 2
30698: PUSH
30699: LD_INT 81
30701: PUSH
30702: LD_OWVAR 2
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 21
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PPUSH
30725: CALL_OW 69
30729: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30730: LD_STRING playComputer()
30732: PPUSH
30733: CALL_OW 559
// if not tmp then
30737: LD_VAR 0 2
30741: NOT
30742: IFFALSE 30746
// exit ;
30744: GO 30800
// for i in tmp do
30746: LD_ADDR_VAR 0 1
30750: PUSH
30751: LD_VAR 0 2
30755: PUSH
30756: FOR_IN
30757: IFFALSE 30798
// for j := 1 to 4 do
30759: LD_ADDR_VAR 0 3
30763: PUSH
30764: DOUBLE
30765: LD_INT 1
30767: DEC
30768: ST_TO_ADDR
30769: LD_INT 4
30771: PUSH
30772: FOR_TO
30773: IFFALSE 30794
// SetSkill ( i , j , 10 ) ;
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_VAR 0 3
30784: PPUSH
30785: LD_INT 10
30787: PPUSH
30788: CALL_OW 237
30792: GO 30772
30794: POP
30795: POP
30796: GO 30756
30798: POP
30799: POP
// end ;
30800: PPOPN 3
30802: END
// every 0 0$1 trigger s30 do var i , tmp ;
30803: LD_EXP 121
30807: IFFALSE 30876
30809: GO 30811
30811: DISABLE
30812: LD_INT 0
30814: PPUSH
30815: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30816: LD_ADDR_VAR 0 2
30820: PUSH
30821: LD_INT 22
30823: PUSH
30824: LD_OWVAR 2
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PPUSH
30833: CALL_OW 69
30837: ST_TO_ADDR
// if not tmp then
30838: LD_VAR 0 2
30842: NOT
30843: IFFALSE 30847
// exit ;
30845: GO 30876
// for i in tmp do
30847: LD_ADDR_VAR 0 1
30851: PUSH
30852: LD_VAR 0 2
30856: PUSH
30857: FOR_IN
30858: IFFALSE 30874
// SetLives ( i , 300 ) ;
30860: LD_VAR 0 1
30864: PPUSH
30865: LD_INT 300
30867: PPUSH
30868: CALL_OW 234
30872: GO 30857
30874: POP
30875: POP
// end ;
30876: PPOPN 2
30878: END
// every 0 0$1 trigger s60 do var i , tmp ;
30879: LD_EXP 122
30883: IFFALSE 30952
30885: GO 30887
30887: DISABLE
30888: LD_INT 0
30890: PPUSH
30891: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30892: LD_ADDR_VAR 0 2
30896: PUSH
30897: LD_INT 22
30899: PUSH
30900: LD_OWVAR 2
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PPUSH
30909: CALL_OW 69
30913: ST_TO_ADDR
// if not tmp then
30914: LD_VAR 0 2
30918: NOT
30919: IFFALSE 30923
// exit ;
30921: GO 30952
// for i in tmp do
30923: LD_ADDR_VAR 0 1
30927: PUSH
30928: LD_VAR 0 2
30932: PUSH
30933: FOR_IN
30934: IFFALSE 30950
// SetLives ( i , 600 ) ;
30936: LD_VAR 0 1
30940: PPUSH
30941: LD_INT 600
30943: PPUSH
30944: CALL_OW 234
30948: GO 30933
30950: POP
30951: POP
// end ;
30952: PPOPN 2
30954: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30955: LD_INT 0
30957: PPUSH
// case cmd of 301 :
30958: LD_VAR 0 1
30962: PUSH
30963: LD_INT 301
30965: DOUBLE
30966: EQUAL
30967: IFTRUE 30971
30969: GO 31003
30971: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30972: LD_VAR 0 6
30976: PPUSH
30977: LD_VAR 0 7
30981: PPUSH
30982: LD_VAR 0 8
30986: PPUSH
30987: LD_VAR 0 4
30991: PPUSH
30992: LD_VAR 0 5
30996: PPUSH
30997: CALL 32204 0 5
31001: GO 31124
31003: LD_INT 302
31005: DOUBLE
31006: EQUAL
31007: IFTRUE 31011
31009: GO 31048
31011: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31012: LD_VAR 0 6
31016: PPUSH
31017: LD_VAR 0 7
31021: PPUSH
31022: LD_VAR 0 8
31026: PPUSH
31027: LD_VAR 0 9
31031: PPUSH
31032: LD_VAR 0 4
31036: PPUSH
31037: LD_VAR 0 5
31041: PPUSH
31042: CALL 32295 0 6
31046: GO 31124
31048: LD_INT 303
31050: DOUBLE
31051: EQUAL
31052: IFTRUE 31056
31054: GO 31093
31056: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31057: LD_VAR 0 6
31061: PPUSH
31062: LD_VAR 0 7
31066: PPUSH
31067: LD_VAR 0 8
31071: PPUSH
31072: LD_VAR 0 9
31076: PPUSH
31077: LD_VAR 0 4
31081: PPUSH
31082: LD_VAR 0 5
31086: PPUSH
31087: CALL 31129 0 6
31091: GO 31124
31093: LD_INT 304
31095: DOUBLE
31096: EQUAL
31097: IFTRUE 31101
31099: GO 31123
31101: POP
// hHackTeleport ( unit , x , y ) ; end ;
31102: LD_VAR 0 2
31106: PPUSH
31107: LD_VAR 0 4
31111: PPUSH
31112: LD_VAR 0 5
31116: PPUSH
31117: CALL 32888 0 3
31121: GO 31124
31123: POP
// end ;
31124: LD_VAR 0 12
31128: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31129: LD_INT 0
31131: PPUSH
31132: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31133: LD_VAR 0 1
31137: PUSH
31138: LD_INT 1
31140: LESS
31141: PUSH
31142: LD_VAR 0 1
31146: PUSH
31147: LD_INT 3
31149: GREATER
31150: OR
31151: PUSH
31152: LD_VAR 0 5
31156: PPUSH
31157: LD_VAR 0 6
31161: PPUSH
31162: CALL_OW 428
31166: OR
31167: IFFALSE 31171
// exit ;
31169: GO 31891
// uc_side := your_side ;
31171: LD_ADDR_OWVAR 20
31175: PUSH
31176: LD_OWVAR 2
31180: ST_TO_ADDR
// uc_nation := nation ;
31181: LD_ADDR_OWVAR 21
31185: PUSH
31186: LD_VAR 0 1
31190: ST_TO_ADDR
// bc_level = 1 ;
31191: LD_ADDR_OWVAR 43
31195: PUSH
31196: LD_INT 1
31198: ST_TO_ADDR
// case btype of 1 :
31199: LD_VAR 0 2
31203: PUSH
31204: LD_INT 1
31206: DOUBLE
31207: EQUAL
31208: IFTRUE 31212
31210: GO 31223
31212: POP
// bc_type := b_depot ; 2 :
31213: LD_ADDR_OWVAR 42
31217: PUSH
31218: LD_INT 0
31220: ST_TO_ADDR
31221: GO 31835
31223: LD_INT 2
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31242
31231: POP
// bc_type := b_warehouse ; 3 :
31232: LD_ADDR_OWVAR 42
31236: PUSH
31237: LD_INT 1
31239: ST_TO_ADDR
31240: GO 31835
31242: LD_INT 3
31244: DOUBLE
31245: EQUAL
31246: IFTRUE 31250
31248: GO 31261
31250: POP
// bc_type := b_lab ; 4 .. 9 :
31251: LD_ADDR_OWVAR 42
31255: PUSH
31256: LD_INT 6
31258: ST_TO_ADDR
31259: GO 31835
31261: LD_INT 4
31263: DOUBLE
31264: GREATEREQUAL
31265: IFFALSE 31273
31267: LD_INT 9
31269: DOUBLE
31270: LESSEQUAL
31271: IFTRUE 31275
31273: GO 31327
31275: POP
// begin bc_type := b_lab_half ;
31276: LD_ADDR_OWVAR 42
31280: PUSH
31281: LD_INT 7
31283: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31284: LD_ADDR_OWVAR 44
31288: PUSH
31289: LD_INT 10
31291: PUSH
31292: LD_INT 11
31294: PUSH
31295: LD_INT 12
31297: PUSH
31298: LD_INT 15
31300: PUSH
31301: LD_INT 14
31303: PUSH
31304: LD_INT 13
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: PUSH
31315: LD_VAR 0 2
31319: PUSH
31320: LD_INT 3
31322: MINUS
31323: ARRAY
31324: ST_TO_ADDR
// end ; 10 .. 13 :
31325: GO 31835
31327: LD_INT 10
31329: DOUBLE
31330: GREATEREQUAL
31331: IFFALSE 31339
31333: LD_INT 13
31335: DOUBLE
31336: LESSEQUAL
31337: IFTRUE 31341
31339: GO 31418
31341: POP
// begin bc_type := b_lab_full ;
31342: LD_ADDR_OWVAR 42
31346: PUSH
31347: LD_INT 8
31349: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31350: LD_ADDR_OWVAR 44
31354: PUSH
31355: LD_INT 10
31357: PUSH
31358: LD_INT 12
31360: PUSH
31361: LD_INT 14
31363: PUSH
31364: LD_INT 13
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: PUSH
31373: LD_VAR 0 2
31377: PUSH
31378: LD_INT 9
31380: MINUS
31381: ARRAY
31382: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31383: LD_ADDR_OWVAR 45
31387: PUSH
31388: LD_INT 11
31390: PUSH
31391: LD_INT 15
31393: PUSH
31394: LD_INT 12
31396: PUSH
31397: LD_INT 15
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: PUSH
31406: LD_VAR 0 2
31410: PUSH
31411: LD_INT 9
31413: MINUS
31414: ARRAY
31415: ST_TO_ADDR
// end ; 14 :
31416: GO 31835
31418: LD_INT 14
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31437
31426: POP
// bc_type := b_workshop ; 15 :
31427: LD_ADDR_OWVAR 42
31431: PUSH
31432: LD_INT 2
31434: ST_TO_ADDR
31435: GO 31835
31437: LD_INT 15
31439: DOUBLE
31440: EQUAL
31441: IFTRUE 31445
31443: GO 31456
31445: POP
// bc_type := b_factory ; 16 :
31446: LD_ADDR_OWVAR 42
31450: PUSH
31451: LD_INT 3
31453: ST_TO_ADDR
31454: GO 31835
31456: LD_INT 16
31458: DOUBLE
31459: EQUAL
31460: IFTRUE 31464
31462: GO 31475
31464: POP
// bc_type := b_ext_gun ; 17 :
31465: LD_ADDR_OWVAR 42
31469: PUSH
31470: LD_INT 17
31472: ST_TO_ADDR
31473: GO 31835
31475: LD_INT 17
31477: DOUBLE
31478: EQUAL
31479: IFTRUE 31483
31481: GO 31511
31483: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31484: LD_ADDR_OWVAR 42
31488: PUSH
31489: LD_INT 19
31491: PUSH
31492: LD_INT 23
31494: PUSH
31495: LD_INT 19
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: PUSH
31503: LD_VAR 0 1
31507: ARRAY
31508: ST_TO_ADDR
31509: GO 31835
31511: LD_INT 18
31513: DOUBLE
31514: EQUAL
31515: IFTRUE 31519
31517: GO 31530
31519: POP
// bc_type := b_ext_radar ; 19 :
31520: LD_ADDR_OWVAR 42
31524: PUSH
31525: LD_INT 20
31527: ST_TO_ADDR
31528: GO 31835
31530: LD_INT 19
31532: DOUBLE
31533: EQUAL
31534: IFTRUE 31538
31536: GO 31549
31538: POP
// bc_type := b_ext_radio ; 20 :
31539: LD_ADDR_OWVAR 42
31543: PUSH
31544: LD_INT 22
31546: ST_TO_ADDR
31547: GO 31835
31549: LD_INT 20
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31568
31557: POP
// bc_type := b_ext_siberium ; 21 :
31558: LD_ADDR_OWVAR 42
31562: PUSH
31563: LD_INT 21
31565: ST_TO_ADDR
31566: GO 31835
31568: LD_INT 21
31570: DOUBLE
31571: EQUAL
31572: IFTRUE 31576
31574: GO 31587
31576: POP
// bc_type := b_ext_computer ; 22 :
31577: LD_ADDR_OWVAR 42
31581: PUSH
31582: LD_INT 24
31584: ST_TO_ADDR
31585: GO 31835
31587: LD_INT 22
31589: DOUBLE
31590: EQUAL
31591: IFTRUE 31595
31593: GO 31606
31595: POP
// bc_type := b_ext_track ; 23 :
31596: LD_ADDR_OWVAR 42
31600: PUSH
31601: LD_INT 16
31603: ST_TO_ADDR
31604: GO 31835
31606: LD_INT 23
31608: DOUBLE
31609: EQUAL
31610: IFTRUE 31614
31612: GO 31625
31614: POP
// bc_type := b_ext_laser ; 24 :
31615: LD_ADDR_OWVAR 42
31619: PUSH
31620: LD_INT 25
31622: ST_TO_ADDR
31623: GO 31835
31625: LD_INT 24
31627: DOUBLE
31628: EQUAL
31629: IFTRUE 31633
31631: GO 31644
31633: POP
// bc_type := b_control_tower ; 25 :
31634: LD_ADDR_OWVAR 42
31638: PUSH
31639: LD_INT 36
31641: ST_TO_ADDR
31642: GO 31835
31644: LD_INT 25
31646: DOUBLE
31647: EQUAL
31648: IFTRUE 31652
31650: GO 31663
31652: POP
// bc_type := b_breastwork ; 26 :
31653: LD_ADDR_OWVAR 42
31657: PUSH
31658: LD_INT 31
31660: ST_TO_ADDR
31661: GO 31835
31663: LD_INT 26
31665: DOUBLE
31666: EQUAL
31667: IFTRUE 31671
31669: GO 31682
31671: POP
// bc_type := b_bunker ; 27 :
31672: LD_ADDR_OWVAR 42
31676: PUSH
31677: LD_INT 32
31679: ST_TO_ADDR
31680: GO 31835
31682: LD_INT 27
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31690
31688: GO 31701
31690: POP
// bc_type := b_turret ; 28 :
31691: LD_ADDR_OWVAR 42
31695: PUSH
31696: LD_INT 33
31698: ST_TO_ADDR
31699: GO 31835
31701: LD_INT 28
31703: DOUBLE
31704: EQUAL
31705: IFTRUE 31709
31707: GO 31720
31709: POP
// bc_type := b_armoury ; 29 :
31710: LD_ADDR_OWVAR 42
31714: PUSH
31715: LD_INT 4
31717: ST_TO_ADDR
31718: GO 31835
31720: LD_INT 29
31722: DOUBLE
31723: EQUAL
31724: IFTRUE 31728
31726: GO 31739
31728: POP
// bc_type := b_barracks ; 30 :
31729: LD_ADDR_OWVAR 42
31733: PUSH
31734: LD_INT 5
31736: ST_TO_ADDR
31737: GO 31835
31739: LD_INT 30
31741: DOUBLE
31742: EQUAL
31743: IFTRUE 31747
31745: GO 31758
31747: POP
// bc_type := b_solar_power ; 31 :
31748: LD_ADDR_OWVAR 42
31752: PUSH
31753: LD_INT 27
31755: ST_TO_ADDR
31756: GO 31835
31758: LD_INT 31
31760: DOUBLE
31761: EQUAL
31762: IFTRUE 31766
31764: GO 31777
31766: POP
// bc_type := b_oil_power ; 32 :
31767: LD_ADDR_OWVAR 42
31771: PUSH
31772: LD_INT 26
31774: ST_TO_ADDR
31775: GO 31835
31777: LD_INT 32
31779: DOUBLE
31780: EQUAL
31781: IFTRUE 31785
31783: GO 31796
31785: POP
// bc_type := b_siberite_power ; 33 :
31786: LD_ADDR_OWVAR 42
31790: PUSH
31791: LD_INT 28
31793: ST_TO_ADDR
31794: GO 31835
31796: LD_INT 33
31798: DOUBLE
31799: EQUAL
31800: IFTRUE 31804
31802: GO 31815
31804: POP
// bc_type := b_oil_mine ; 34 :
31805: LD_ADDR_OWVAR 42
31809: PUSH
31810: LD_INT 29
31812: ST_TO_ADDR
31813: GO 31835
31815: LD_INT 34
31817: DOUBLE
31818: EQUAL
31819: IFTRUE 31823
31821: GO 31834
31823: POP
// bc_type := b_siberite_mine ; end ;
31824: LD_ADDR_OWVAR 42
31828: PUSH
31829: LD_INT 30
31831: ST_TO_ADDR
31832: GO 31835
31834: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31835: LD_ADDR_VAR 0 8
31839: PUSH
31840: LD_VAR 0 5
31844: PPUSH
31845: LD_VAR 0 6
31849: PPUSH
31850: LD_VAR 0 3
31854: PPUSH
31855: CALL_OW 47
31859: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31860: LD_OWVAR 42
31864: PUSH
31865: LD_INT 32
31867: PUSH
31868: LD_INT 33
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: IN
31875: IFFALSE 31891
// PlaceWeaponTurret ( b , weapon ) ;
31877: LD_VAR 0 8
31881: PPUSH
31882: LD_VAR 0 4
31886: PPUSH
31887: CALL_OW 431
// end ;
31891: LD_VAR 0 7
31895: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31896: LD_INT 0
31898: PPUSH
31899: PPUSH
31900: PPUSH
31901: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31902: LD_ADDR_VAR 0 4
31906: PUSH
31907: LD_INT 22
31909: PUSH
31910: LD_OWVAR 2
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: LD_INT 30
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 30
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PPUSH
31951: CALL_OW 69
31955: ST_TO_ADDR
// if not tmp then
31956: LD_VAR 0 4
31960: NOT
31961: IFFALSE 31965
// exit ;
31963: GO 32024
// for i in tmp do
31965: LD_ADDR_VAR 0 2
31969: PUSH
31970: LD_VAR 0 4
31974: PUSH
31975: FOR_IN
31976: IFFALSE 32022
// for j = 1 to 3 do
31978: LD_ADDR_VAR 0 3
31982: PUSH
31983: DOUBLE
31984: LD_INT 1
31986: DEC
31987: ST_TO_ADDR
31988: LD_INT 3
31990: PUSH
31991: FOR_TO
31992: IFFALSE 32018
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31994: LD_VAR 0 2
31998: PPUSH
31999: CALL_OW 274
32003: PPUSH
32004: LD_VAR 0 3
32008: PPUSH
32009: LD_INT 99999
32011: PPUSH
32012: CALL_OW 277
32016: GO 31991
32018: POP
32019: POP
32020: GO 31975
32022: POP
32023: POP
// end ;
32024: LD_VAR 0 1
32028: RET
// export function hHackSetLevel10 ; var i , j ; begin
32029: LD_INT 0
32031: PPUSH
32032: PPUSH
32033: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32034: LD_ADDR_VAR 0 2
32038: PUSH
32039: LD_INT 21
32041: PUSH
32042: LD_INT 1
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PPUSH
32049: CALL_OW 69
32053: PUSH
32054: FOR_IN
32055: IFFALSE 32107
// if IsSelected ( i ) then
32057: LD_VAR 0 2
32061: PPUSH
32062: CALL_OW 306
32066: IFFALSE 32105
// begin for j := 1 to 4 do
32068: LD_ADDR_VAR 0 3
32072: PUSH
32073: DOUBLE
32074: LD_INT 1
32076: DEC
32077: ST_TO_ADDR
32078: LD_INT 4
32080: PUSH
32081: FOR_TO
32082: IFFALSE 32103
// SetSkill ( i , j , 10 ) ;
32084: LD_VAR 0 2
32088: PPUSH
32089: LD_VAR 0 3
32093: PPUSH
32094: LD_INT 10
32096: PPUSH
32097: CALL_OW 237
32101: GO 32081
32103: POP
32104: POP
// end ;
32105: GO 32054
32107: POP
32108: POP
// end ;
32109: LD_VAR 0 1
32113: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32114: LD_INT 0
32116: PPUSH
32117: PPUSH
32118: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32119: LD_ADDR_VAR 0 2
32123: PUSH
32124: LD_INT 22
32126: PUSH
32127: LD_OWVAR 2
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 21
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PPUSH
32150: CALL_OW 69
32154: PUSH
32155: FOR_IN
32156: IFFALSE 32197
// begin for j := 1 to 4 do
32158: LD_ADDR_VAR 0 3
32162: PUSH
32163: DOUBLE
32164: LD_INT 1
32166: DEC
32167: ST_TO_ADDR
32168: LD_INT 4
32170: PUSH
32171: FOR_TO
32172: IFFALSE 32193
// SetSkill ( i , j , 10 ) ;
32174: LD_VAR 0 2
32178: PPUSH
32179: LD_VAR 0 3
32183: PPUSH
32184: LD_INT 10
32186: PPUSH
32187: CALL_OW 237
32191: GO 32171
32193: POP
32194: POP
// end ;
32195: GO 32155
32197: POP
32198: POP
// end ;
32199: LD_VAR 0 1
32203: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32204: LD_INT 0
32206: PPUSH
// uc_side := your_side ;
32207: LD_ADDR_OWVAR 20
32211: PUSH
32212: LD_OWVAR 2
32216: ST_TO_ADDR
// uc_nation := nation ;
32217: LD_ADDR_OWVAR 21
32221: PUSH
32222: LD_VAR 0 1
32226: ST_TO_ADDR
// InitHc ;
32227: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32231: LD_INT 0
32233: PPUSH
32234: LD_VAR 0 2
32238: PPUSH
32239: LD_VAR 0 3
32243: PPUSH
32244: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32248: LD_VAR 0 4
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: CALL_OW 428
32262: PUSH
32263: LD_INT 0
32265: EQUAL
32266: IFFALSE 32290
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32268: CALL_OW 44
32272: PPUSH
32273: LD_VAR 0 4
32277: PPUSH
32278: LD_VAR 0 5
32282: PPUSH
32283: LD_INT 1
32285: PPUSH
32286: CALL_OW 48
// end ;
32290: LD_VAR 0 6
32294: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32295: LD_INT 0
32297: PPUSH
32298: PPUSH
// uc_side := your_side ;
32299: LD_ADDR_OWVAR 20
32303: PUSH
32304: LD_OWVAR 2
32308: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32309: LD_VAR 0 1
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: LD_INT 4
32325: PUSH
32326: LD_INT 5
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: IN
32336: IFFALSE 32348
// uc_nation := nation_american else
32338: LD_ADDR_OWVAR 21
32342: PUSH
32343: LD_INT 1
32345: ST_TO_ADDR
32346: GO 32391
// if chassis in [ 11 , 12 , 13 , 14 ] then
32348: LD_VAR 0 1
32352: PUSH
32353: LD_INT 11
32355: PUSH
32356: LD_INT 12
32358: PUSH
32359: LD_INT 13
32361: PUSH
32362: LD_INT 14
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: IN
32371: IFFALSE 32383
// uc_nation := nation_arabian else
32373: LD_ADDR_OWVAR 21
32377: PUSH
32378: LD_INT 2
32380: ST_TO_ADDR
32381: GO 32391
// uc_nation := nation_russian ;
32383: LD_ADDR_OWVAR 21
32387: PUSH
32388: LD_INT 3
32390: ST_TO_ADDR
// vc_chassis := chassis ;
32391: LD_ADDR_OWVAR 37
32395: PUSH
32396: LD_VAR 0 1
32400: ST_TO_ADDR
// vc_engine := engine ;
32401: LD_ADDR_OWVAR 39
32405: PUSH
32406: LD_VAR 0 2
32410: ST_TO_ADDR
// vc_control := control ;
32411: LD_ADDR_OWVAR 38
32415: PUSH
32416: LD_VAR 0 3
32420: ST_TO_ADDR
// vc_weapon := weapon ;
32421: LD_ADDR_OWVAR 40
32425: PUSH
32426: LD_VAR 0 4
32430: ST_TO_ADDR
// un := CreateVehicle ;
32431: LD_ADDR_VAR 0 8
32435: PUSH
32436: CALL_OW 45
32440: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32441: LD_VAR 0 8
32445: PPUSH
32446: LD_INT 0
32448: PPUSH
32449: LD_INT 5
32451: PPUSH
32452: CALL_OW 12
32456: PPUSH
32457: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32461: LD_VAR 0 8
32465: PPUSH
32466: LD_VAR 0 5
32470: PPUSH
32471: LD_VAR 0 6
32475: PPUSH
32476: LD_INT 1
32478: PPUSH
32479: CALL_OW 48
// end ;
32483: LD_VAR 0 7
32487: RET
// export hInvincible ; every 1 do
32488: GO 32490
32490: DISABLE
// hInvincible := [ ] ;
32491: LD_ADDR_EXP 123
32495: PUSH
32496: EMPTY
32497: ST_TO_ADDR
32498: END
// every 10 do var i ;
32499: GO 32501
32501: DISABLE
32502: LD_INT 0
32504: PPUSH
// begin enable ;
32505: ENABLE
// if not hInvincible then
32506: LD_EXP 123
32510: NOT
32511: IFFALSE 32515
// exit ;
32513: GO 32559
// for i in hInvincible do
32515: LD_ADDR_VAR 0 1
32519: PUSH
32520: LD_EXP 123
32524: PUSH
32525: FOR_IN
32526: IFFALSE 32557
// if GetLives ( i ) < 1000 then
32528: LD_VAR 0 1
32532: PPUSH
32533: CALL_OW 256
32537: PUSH
32538: LD_INT 1000
32540: LESS
32541: IFFALSE 32555
// SetLives ( i , 1000 ) ;
32543: LD_VAR 0 1
32547: PPUSH
32548: LD_INT 1000
32550: PPUSH
32551: CALL_OW 234
32555: GO 32525
32557: POP
32558: POP
// end ;
32559: PPOPN 1
32561: END
// export function hHackInvincible ; var i ; begin
32562: LD_INT 0
32564: PPUSH
32565: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32566: LD_ADDR_VAR 0 2
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: LD_INT 21
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 21
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: PPUSH
32599: CALL_OW 69
32603: PUSH
32604: FOR_IN
32605: IFFALSE 32666
// if IsSelected ( i ) then
32607: LD_VAR 0 2
32611: PPUSH
32612: CALL_OW 306
32616: IFFALSE 32664
// begin if i in hInvincible then
32618: LD_VAR 0 2
32622: PUSH
32623: LD_EXP 123
32627: IN
32628: IFFALSE 32648
// hInvincible := hInvincible diff i else
32630: LD_ADDR_EXP 123
32634: PUSH
32635: LD_EXP 123
32639: PUSH
32640: LD_VAR 0 2
32644: DIFF
32645: ST_TO_ADDR
32646: GO 32664
// hInvincible := hInvincible union i ;
32648: LD_ADDR_EXP 123
32652: PUSH
32653: LD_EXP 123
32657: PUSH
32658: LD_VAR 0 2
32662: UNION
32663: ST_TO_ADDR
// end ;
32664: GO 32604
32666: POP
32667: POP
// end ;
32668: LD_VAR 0 1
32672: RET
// export function hHackInvisible ; var i , j ; begin
32673: LD_INT 0
32675: PPUSH
32676: PPUSH
32677: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32678: LD_ADDR_VAR 0 2
32682: PUSH
32683: LD_INT 21
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PPUSH
32693: CALL_OW 69
32697: PUSH
32698: FOR_IN
32699: IFFALSE 32723
// if IsSelected ( i ) then
32701: LD_VAR 0 2
32705: PPUSH
32706: CALL_OW 306
32710: IFFALSE 32721
// ComForceInvisible ( i ) ;
32712: LD_VAR 0 2
32716: PPUSH
32717: CALL_OW 496
32721: GO 32698
32723: POP
32724: POP
// end ;
32725: LD_VAR 0 1
32729: RET
// export function hHackChangeYourSide ; begin
32730: LD_INT 0
32732: PPUSH
// if your_side = 8 then
32733: LD_OWVAR 2
32737: PUSH
32738: LD_INT 8
32740: EQUAL
32741: IFFALSE 32753
// your_side := 0 else
32743: LD_ADDR_OWVAR 2
32747: PUSH
32748: LD_INT 0
32750: ST_TO_ADDR
32751: GO 32767
// your_side := your_side + 1 ;
32753: LD_ADDR_OWVAR 2
32757: PUSH
32758: LD_OWVAR 2
32762: PUSH
32763: LD_INT 1
32765: PLUS
32766: ST_TO_ADDR
// end ;
32767: LD_VAR 0 1
32771: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32772: LD_INT 0
32774: PPUSH
32775: PPUSH
32776: PPUSH
// for i in all_units do
32777: LD_ADDR_VAR 0 2
32781: PUSH
32782: LD_OWVAR 3
32786: PUSH
32787: FOR_IN
32788: IFFALSE 32866
// if IsSelected ( i ) then
32790: LD_VAR 0 2
32794: PPUSH
32795: CALL_OW 306
32799: IFFALSE 32864
// begin j := GetSide ( i ) ;
32801: LD_ADDR_VAR 0 3
32805: PUSH
32806: LD_VAR 0 2
32810: PPUSH
32811: CALL_OW 255
32815: ST_TO_ADDR
// if j = 8 then
32816: LD_VAR 0 3
32820: PUSH
32821: LD_INT 8
32823: EQUAL
32824: IFFALSE 32836
// j := 0 else
32826: LD_ADDR_VAR 0 3
32830: PUSH
32831: LD_INT 0
32833: ST_TO_ADDR
32834: GO 32850
// j := j + 1 ;
32836: LD_ADDR_VAR 0 3
32840: PUSH
32841: LD_VAR 0 3
32845: PUSH
32846: LD_INT 1
32848: PLUS
32849: ST_TO_ADDR
// SetSide ( i , j ) ;
32850: LD_VAR 0 2
32854: PPUSH
32855: LD_VAR 0 3
32859: PPUSH
32860: CALL_OW 235
// end ;
32864: GO 32787
32866: POP
32867: POP
// end ;
32868: LD_VAR 0 1
32872: RET
// export function hHackFog ; begin
32873: LD_INT 0
32875: PPUSH
// FogOff ( true ) ;
32876: LD_INT 1
32878: PPUSH
32879: CALL_OW 344
// end ;
32883: LD_VAR 0 1
32887: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32888: LD_INT 0
32890: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32891: LD_VAR 0 1
32895: PPUSH
32896: LD_VAR 0 2
32900: PPUSH
32901: LD_VAR 0 3
32905: PPUSH
32906: LD_INT 1
32908: PPUSH
32909: LD_INT 1
32911: PPUSH
32912: CALL_OW 483
// CenterOnXY ( x , y ) ;
32916: LD_VAR 0 2
32920: PPUSH
32921: LD_VAR 0 3
32925: PPUSH
32926: CALL_OW 84
// end ; end_of_file
32930: LD_VAR 0 4
32934: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
32935: LD_VAR 0 1
32939: PUSH
32940: LD_INT 200
32942: DOUBLE
32943: GREATEREQUAL
32944: IFFALSE 32952
32946: LD_INT 299
32948: DOUBLE
32949: LESSEQUAL
32950: IFTRUE 32954
32952: GO 32986
32954: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
32955: LD_VAR 0 1
32959: PPUSH
32960: LD_VAR 0 2
32964: PPUSH
32965: LD_VAR 0 3
32969: PPUSH
32970: LD_VAR 0 4
32974: PPUSH
32975: LD_VAR 0 5
32979: PPUSH
32980: CALL 33476 0 5
32984: GO 33063
32986: LD_INT 300
32988: DOUBLE
32989: GREATEREQUAL
32990: IFFALSE 32998
32992: LD_INT 399
32994: DOUBLE
32995: LESSEQUAL
32996: IFTRUE 33000
32998: GO 33062
33000: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33001: LD_VAR 0 1
33005: PPUSH
33006: LD_VAR 0 2
33010: PPUSH
33011: LD_VAR 0 3
33015: PPUSH
33016: LD_VAR 0 4
33020: PPUSH
33021: LD_VAR 0 5
33025: PPUSH
33026: LD_VAR 0 6
33030: PPUSH
33031: LD_VAR 0 7
33035: PPUSH
33036: LD_VAR 0 8
33040: PPUSH
33041: LD_VAR 0 9
33045: PPUSH
33046: LD_VAR 0 10
33050: PPUSH
33051: LD_VAR 0 11
33055: PPUSH
33056: CALL 30955 0 11
33060: GO 33063
33062: POP
// end ;
33063: PPOPN 11
33065: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33066: LD_VAR 0 1
33070: PPUSH
33071: LD_VAR 0 2
33075: PPUSH
33076: LD_VAR 0 3
33080: PPUSH
33081: LD_VAR 0 4
33085: PPUSH
33086: LD_VAR 0 5
33090: PPUSH
33091: CALL 33212 0 5
// end ; end_of_file end_of_file
33095: PPOPN 5
33097: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33098: LD_INT 0
33100: PPUSH
33101: PPUSH
33102: PPUSH
33103: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33104: LD_VAR 0 1
33108: PPUSH
33109: CALL_OW 264
33113: PUSH
33114: LD_EXP 139
33118: EQUAL
33119: IFFALSE 33191
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33121: LD_INT 68
33123: PPUSH
33124: LD_VAR 0 1
33128: PPUSH
33129: CALL_OW 255
33133: PPUSH
33134: CALL_OW 321
33138: PUSH
33139: LD_INT 2
33141: EQUAL
33142: IFFALSE 33154
// eff := 70 else
33144: LD_ADDR_VAR 0 4
33148: PUSH
33149: LD_INT 70
33151: ST_TO_ADDR
33152: GO 33162
// eff := 30 ;
33154: LD_ADDR_VAR 0 4
33158: PUSH
33159: LD_INT 30
33161: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33162: LD_VAR 0 1
33166: PPUSH
33167: CALL_OW 250
33171: PPUSH
33172: LD_VAR 0 1
33176: PPUSH
33177: CALL_OW 251
33181: PPUSH
33182: LD_VAR 0 4
33186: PPUSH
33187: CALL_OW 495
// end ; end ;
33191: LD_VAR 0 2
33195: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33196: LD_INT 0
33198: PPUSH
// end ;
33199: LD_VAR 0 4
33203: RET
// export function SOS_Command ( cmd ) ; begin
33204: LD_INT 0
33206: PPUSH
// end ;
33207: LD_VAR 0 2
33211: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33212: LD_INT 0
33214: PPUSH
// end ;
33215: LD_VAR 0 6
33219: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33220: LD_INT 0
33222: PPUSH
33223: PPUSH
// if not vehicle or not factory then
33224: LD_VAR 0 1
33228: NOT
33229: PUSH
33230: LD_VAR 0 2
33234: NOT
33235: OR
33236: IFFALSE 33240
// exit ;
33238: GO 33471
// if factoryWaypoints >= factory then
33240: LD_EXP 124
33244: PUSH
33245: LD_VAR 0 2
33249: GREATEREQUAL
33250: IFFALSE 33471
// if factoryWaypoints [ factory ] then
33252: LD_EXP 124
33256: PUSH
33257: LD_VAR 0 2
33261: ARRAY
33262: IFFALSE 33471
// begin if GetControl ( vehicle ) = control_manual then
33264: LD_VAR 0 1
33268: PPUSH
33269: CALL_OW 263
33273: PUSH
33274: LD_INT 1
33276: EQUAL
33277: IFFALSE 33358
// begin driver := IsDrivenBy ( vehicle ) ;
33279: LD_ADDR_VAR 0 4
33283: PUSH
33284: LD_VAR 0 1
33288: PPUSH
33289: CALL_OW 311
33293: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33294: LD_VAR 0 4
33298: PPUSH
33299: LD_EXP 124
33303: PUSH
33304: LD_VAR 0 2
33308: ARRAY
33309: PUSH
33310: LD_INT 1
33312: ARRAY
33313: PPUSH
33314: LD_EXP 124
33318: PUSH
33319: LD_VAR 0 2
33323: ARRAY
33324: PUSH
33325: LD_INT 2
33327: ARRAY
33328: PPUSH
33329: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33333: LD_VAR 0 4
33337: PPUSH
33338: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33342: LD_VAR 0 4
33346: PPUSH
33347: LD_VAR 0 2
33351: PPUSH
33352: CALL_OW 180
// end else
33356: GO 33471
// if GetControl ( vehicle ) = control_remote then
33358: LD_VAR 0 1
33362: PPUSH
33363: CALL_OW 263
33367: PUSH
33368: LD_INT 2
33370: EQUAL
33371: IFFALSE 33432
// begin wait ( 0 0$2 ) ;
33373: LD_INT 70
33375: PPUSH
33376: CALL_OW 67
// if Connect ( vehicle ) then
33380: LD_VAR 0 1
33384: PPUSH
33385: CALL 45863 0 1
33389: IFFALSE 33430
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33391: LD_VAR 0 1
33395: PPUSH
33396: LD_EXP 124
33400: PUSH
33401: LD_VAR 0 2
33405: ARRAY
33406: PUSH
33407: LD_INT 1
33409: ARRAY
33410: PPUSH
33411: LD_EXP 124
33415: PUSH
33416: LD_VAR 0 2
33420: ARRAY
33421: PUSH
33422: LD_INT 2
33424: ARRAY
33425: PPUSH
33426: CALL_OW 171
// end else
33430: GO 33471
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33432: LD_VAR 0 1
33436: PPUSH
33437: LD_EXP 124
33441: PUSH
33442: LD_VAR 0 2
33446: ARRAY
33447: PUSH
33448: LD_INT 1
33450: ARRAY
33451: PPUSH
33452: LD_EXP 124
33456: PUSH
33457: LD_VAR 0 2
33461: ARRAY
33462: PUSH
33463: LD_INT 2
33465: ARRAY
33466: PPUSH
33467: CALL_OW 171
// end ; end ;
33471: LD_VAR 0 3
33475: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33476: LD_INT 0
33478: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33479: LD_VAR 0 1
33483: PUSH
33484: LD_INT 250
33486: EQUAL
33487: PUSH
33488: LD_VAR 0 2
33492: PPUSH
33493: CALL_OW 264
33497: PUSH
33498: LD_EXP 142
33502: EQUAL
33503: AND
33504: IFFALSE 33525
// MinerPlaceMine ( unit , x , y ) ;
33506: LD_VAR 0 2
33510: PPUSH
33511: LD_VAR 0 4
33515: PPUSH
33516: LD_VAR 0 5
33520: PPUSH
33521: CALL 36253 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33525: LD_VAR 0 1
33529: PUSH
33530: LD_INT 251
33532: EQUAL
33533: PUSH
33534: LD_VAR 0 2
33538: PPUSH
33539: CALL_OW 264
33543: PUSH
33544: LD_EXP 142
33548: EQUAL
33549: AND
33550: IFFALSE 33571
// MinerDetonateMine ( unit , x , y ) ;
33552: LD_VAR 0 2
33556: PPUSH
33557: LD_VAR 0 4
33561: PPUSH
33562: LD_VAR 0 5
33566: PPUSH
33567: CALL 36530 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33571: LD_VAR 0 1
33575: PUSH
33576: LD_INT 252
33578: EQUAL
33579: PUSH
33580: LD_VAR 0 2
33584: PPUSH
33585: CALL_OW 264
33589: PUSH
33590: LD_EXP 142
33594: EQUAL
33595: AND
33596: IFFALSE 33617
// MinerCreateMinefield ( unit , x , y ) ;
33598: LD_VAR 0 2
33602: PPUSH
33603: LD_VAR 0 4
33607: PPUSH
33608: LD_VAR 0 5
33612: PPUSH
33613: CALL 36947 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33617: LD_VAR 0 1
33621: PUSH
33622: LD_INT 253
33624: EQUAL
33625: PUSH
33626: LD_VAR 0 2
33630: PPUSH
33631: CALL_OW 257
33635: PUSH
33636: LD_INT 5
33638: EQUAL
33639: AND
33640: IFFALSE 33661
// ComBinocular ( unit , x , y ) ;
33642: LD_VAR 0 2
33646: PPUSH
33647: LD_VAR 0 4
33651: PPUSH
33652: LD_VAR 0 5
33656: PPUSH
33657: CALL 37318 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33661: LD_VAR 0 1
33665: PUSH
33666: LD_INT 254
33668: EQUAL
33669: PUSH
33670: LD_VAR 0 2
33674: PPUSH
33675: CALL_OW 264
33679: PUSH
33680: LD_EXP 137
33684: EQUAL
33685: AND
33686: PUSH
33687: LD_VAR 0 3
33691: PPUSH
33692: CALL_OW 263
33696: PUSH
33697: LD_INT 3
33699: EQUAL
33700: AND
33701: IFFALSE 33717
// HackDestroyVehicle ( unit , selectedUnit ) ;
33703: LD_VAR 0 2
33707: PPUSH
33708: LD_VAR 0 3
33712: PPUSH
33713: CALL 35613 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33717: LD_VAR 0 1
33721: PUSH
33722: LD_INT 255
33724: EQUAL
33725: PUSH
33726: LD_VAR 0 2
33730: PPUSH
33731: CALL_OW 264
33735: PUSH
33736: LD_INT 14
33738: PUSH
33739: LD_INT 53
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: IN
33746: AND
33747: PUSH
33748: LD_VAR 0 4
33752: PPUSH
33753: LD_VAR 0 5
33757: PPUSH
33758: CALL_OW 488
33762: AND
33763: IFFALSE 33787
// CutTreeXYR ( unit , x , y , 12 ) ;
33765: LD_VAR 0 2
33769: PPUSH
33770: LD_VAR 0 4
33774: PPUSH
33775: LD_VAR 0 5
33779: PPUSH
33780: LD_INT 12
33782: PPUSH
33783: CALL 34179 0 4
// if cmd = 256 then
33787: LD_VAR 0 1
33791: PUSH
33792: LD_INT 256
33794: EQUAL
33795: IFFALSE 33816
// SetFactoryWaypoint ( unit , x , y ) ;
33797: LD_VAR 0 2
33801: PPUSH
33802: LD_VAR 0 4
33806: PPUSH
33807: LD_VAR 0 5
33811: PPUSH
33812: CALL 33821 0 3
// end ;
33816: LD_VAR 0 6
33820: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33825: LD_VAR 0 1
33829: NOT
33830: PUSH
33831: LD_VAR 0 2
33835: PPUSH
33836: LD_VAR 0 3
33840: PPUSH
33841: CALL_OW 488
33845: NOT
33846: OR
33847: PUSH
33848: LD_VAR 0 1
33852: PPUSH
33853: CALL_OW 266
33857: PUSH
33858: LD_INT 3
33860: NONEQUAL
33861: PUSH
33862: LD_VAR 0 1
33866: PPUSH
33867: CALL_OW 247
33871: PUSH
33872: LD_INT 1
33874: EQUAL
33875: NOT
33876: AND
33877: OR
33878: IFFALSE 33882
// exit ;
33880: GO 34031
// if GetType ( factory ) = unit_human then
33882: LD_VAR 0 1
33886: PPUSH
33887: CALL_OW 247
33891: PUSH
33892: LD_INT 1
33894: EQUAL
33895: IFFALSE 33912
// factory := IsInUnit ( factory ) ;
33897: LD_ADDR_VAR 0 1
33901: PUSH
33902: LD_VAR 0 1
33906: PPUSH
33907: CALL_OW 310
33911: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33912: LD_VAR 0 1
33916: PPUSH
33917: CALL_OW 266
33921: PUSH
33922: LD_INT 3
33924: NONEQUAL
33925: IFFALSE 33929
// exit ;
33927: GO 34031
// if HexInfo ( x , y ) = factory then
33929: LD_VAR 0 2
33933: PPUSH
33934: LD_VAR 0 3
33938: PPUSH
33939: CALL_OW 428
33943: PUSH
33944: LD_VAR 0 1
33948: EQUAL
33949: IFFALSE 33976
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33951: LD_ADDR_EXP 124
33955: PUSH
33956: LD_EXP 124
33960: PPUSH
33961: LD_VAR 0 1
33965: PPUSH
33966: LD_INT 0
33968: PPUSH
33969: CALL_OW 1
33973: ST_TO_ADDR
33974: GO 34027
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33976: LD_ADDR_EXP 124
33980: PUSH
33981: LD_EXP 124
33985: PPUSH
33986: LD_VAR 0 1
33990: PPUSH
33991: LD_VAR 0 1
33995: PPUSH
33996: CALL_OW 255
34000: PUSH
34001: LD_VAR 0 1
34005: PUSH
34006: LD_VAR 0 2
34010: PUSH
34011: LD_VAR 0 3
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: PPUSH
34022: CALL_OW 1
34026: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34027: CALL 34036 0 0
// end ;
34031: LD_VAR 0 4
34035: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34036: LD_INT 0
34038: PPUSH
34039: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34040: LD_STRING resetFactoryWaypoint();
34042: PPUSH
34043: CALL_OW 559
// if factoryWaypoints then
34047: LD_EXP 124
34051: IFFALSE 34174
// begin for i := 1 to factoryWaypoints do
34053: LD_ADDR_VAR 0 2
34057: PUSH
34058: DOUBLE
34059: LD_INT 1
34061: DEC
34062: ST_TO_ADDR
34063: LD_EXP 124
34067: PUSH
34068: FOR_TO
34069: IFFALSE 34172
// if factoryWaypoints [ i ] then
34071: LD_EXP 124
34075: PUSH
34076: LD_VAR 0 2
34080: ARRAY
34081: IFFALSE 34170
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34083: LD_STRING setFactoryWaypointXY(
34085: PUSH
34086: LD_EXP 124
34090: PUSH
34091: LD_VAR 0 2
34095: ARRAY
34096: PUSH
34097: LD_INT 1
34099: ARRAY
34100: STR
34101: PUSH
34102: LD_STRING ,
34104: STR
34105: PUSH
34106: LD_EXP 124
34110: PUSH
34111: LD_VAR 0 2
34115: ARRAY
34116: PUSH
34117: LD_INT 2
34119: ARRAY
34120: STR
34121: PUSH
34122: LD_STRING ,
34124: STR
34125: PUSH
34126: LD_EXP 124
34130: PUSH
34131: LD_VAR 0 2
34135: ARRAY
34136: PUSH
34137: LD_INT 3
34139: ARRAY
34140: STR
34141: PUSH
34142: LD_STRING ,
34144: STR
34145: PUSH
34146: LD_EXP 124
34150: PUSH
34151: LD_VAR 0 2
34155: ARRAY
34156: PUSH
34157: LD_INT 4
34159: ARRAY
34160: STR
34161: PUSH
34162: LD_STRING )
34164: STR
34165: PPUSH
34166: CALL_OW 559
34170: GO 34068
34172: POP
34173: POP
// end ; end ;
34174: LD_VAR 0 1
34178: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34179: LD_INT 0
34181: PPUSH
34182: PPUSH
34183: PPUSH
34184: PPUSH
34185: PPUSH
34186: PPUSH
34187: PPUSH
34188: PPUSH
34189: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34190: LD_VAR 0 1
34194: NOT
34195: PUSH
34196: LD_VAR 0 2
34200: PPUSH
34201: LD_VAR 0 3
34205: PPUSH
34206: CALL_OW 488
34210: NOT
34211: OR
34212: PUSH
34213: LD_VAR 0 4
34217: NOT
34218: OR
34219: IFFALSE 34223
// exit ;
34221: GO 34563
// list := [ ] ;
34223: LD_ADDR_VAR 0 13
34227: PUSH
34228: EMPTY
34229: ST_TO_ADDR
// if x - r < 0 then
34230: LD_VAR 0 2
34234: PUSH
34235: LD_VAR 0 4
34239: MINUS
34240: PUSH
34241: LD_INT 0
34243: LESS
34244: IFFALSE 34256
// min_x := 0 else
34246: LD_ADDR_VAR 0 7
34250: PUSH
34251: LD_INT 0
34253: ST_TO_ADDR
34254: GO 34272
// min_x := x - r ;
34256: LD_ADDR_VAR 0 7
34260: PUSH
34261: LD_VAR 0 2
34265: PUSH
34266: LD_VAR 0 4
34270: MINUS
34271: ST_TO_ADDR
// if y - r < 0 then
34272: LD_VAR 0 3
34276: PUSH
34277: LD_VAR 0 4
34281: MINUS
34282: PUSH
34283: LD_INT 0
34285: LESS
34286: IFFALSE 34298
// min_y := 0 else
34288: LD_ADDR_VAR 0 8
34292: PUSH
34293: LD_INT 0
34295: ST_TO_ADDR
34296: GO 34314
// min_y := y - r ;
34298: LD_ADDR_VAR 0 8
34302: PUSH
34303: LD_VAR 0 3
34307: PUSH
34308: LD_VAR 0 4
34312: MINUS
34313: ST_TO_ADDR
// max_x := x + r ;
34314: LD_ADDR_VAR 0 9
34318: PUSH
34319: LD_VAR 0 2
34323: PUSH
34324: LD_VAR 0 4
34328: PLUS
34329: ST_TO_ADDR
// max_y := y + r ;
34330: LD_ADDR_VAR 0 10
34334: PUSH
34335: LD_VAR 0 3
34339: PUSH
34340: LD_VAR 0 4
34344: PLUS
34345: ST_TO_ADDR
// for _x = min_x to max_x do
34346: LD_ADDR_VAR 0 11
34350: PUSH
34351: DOUBLE
34352: LD_VAR 0 7
34356: DEC
34357: ST_TO_ADDR
34358: LD_VAR 0 9
34362: PUSH
34363: FOR_TO
34364: IFFALSE 34481
// for _y = min_y to max_y do
34366: LD_ADDR_VAR 0 12
34370: PUSH
34371: DOUBLE
34372: LD_VAR 0 8
34376: DEC
34377: ST_TO_ADDR
34378: LD_VAR 0 10
34382: PUSH
34383: FOR_TO
34384: IFFALSE 34477
// begin if not ValidHex ( _x , _y ) then
34386: LD_VAR 0 11
34390: PPUSH
34391: LD_VAR 0 12
34395: PPUSH
34396: CALL_OW 488
34400: NOT
34401: IFFALSE 34405
// continue ;
34403: GO 34383
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34405: LD_VAR 0 11
34409: PPUSH
34410: LD_VAR 0 12
34414: PPUSH
34415: CALL_OW 351
34419: PUSH
34420: LD_VAR 0 11
34424: PPUSH
34425: LD_VAR 0 12
34429: PPUSH
34430: CALL_OW 554
34434: AND
34435: IFFALSE 34475
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34437: LD_ADDR_VAR 0 13
34441: PUSH
34442: LD_VAR 0 13
34446: PPUSH
34447: LD_VAR 0 13
34451: PUSH
34452: LD_INT 1
34454: PLUS
34455: PPUSH
34456: LD_VAR 0 11
34460: PUSH
34461: LD_VAR 0 12
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PPUSH
34470: CALL_OW 2
34474: ST_TO_ADDR
// end ;
34475: GO 34383
34477: POP
34478: POP
34479: GO 34363
34481: POP
34482: POP
// if not list then
34483: LD_VAR 0 13
34487: NOT
34488: IFFALSE 34492
// exit ;
34490: GO 34563
// for i in list do
34492: LD_ADDR_VAR 0 6
34496: PUSH
34497: LD_VAR 0 13
34501: PUSH
34502: FOR_IN
34503: IFFALSE 34561
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34505: LD_VAR 0 1
34509: PPUSH
34510: LD_STRING M
34512: PUSH
34513: LD_VAR 0 6
34517: PUSH
34518: LD_INT 1
34520: ARRAY
34521: PUSH
34522: LD_VAR 0 6
34526: PUSH
34527: LD_INT 2
34529: ARRAY
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: PUSH
34552: EMPTY
34553: LIST
34554: PPUSH
34555: CALL_OW 447
34559: GO 34502
34561: POP
34562: POP
// end ;
34563: LD_VAR 0 5
34567: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34568: LD_EXP 125
34572: NOT
34573: IFFALSE 34623
34575: GO 34577
34577: DISABLE
// begin initHack := true ;
34578: LD_ADDR_EXP 125
34582: PUSH
34583: LD_INT 1
34585: ST_TO_ADDR
// hackTanks := [ ] ;
34586: LD_ADDR_EXP 126
34590: PUSH
34591: EMPTY
34592: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34593: LD_ADDR_EXP 127
34597: PUSH
34598: EMPTY
34599: ST_TO_ADDR
// hackLimit := 3 ;
34600: LD_ADDR_EXP 128
34604: PUSH
34605: LD_INT 3
34607: ST_TO_ADDR
// hackDist := 12 ;
34608: LD_ADDR_EXP 129
34612: PUSH
34613: LD_INT 12
34615: ST_TO_ADDR
// hackCounter := [ ] ;
34616: LD_ADDR_EXP 130
34620: PUSH
34621: EMPTY
34622: ST_TO_ADDR
// end ;
34623: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34624: LD_EXP 125
34628: PUSH
34629: LD_INT 34
34631: PUSH
34632: LD_EXP 137
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PPUSH
34641: CALL_OW 69
34645: AND
34646: IFFALSE 34901
34648: GO 34650
34650: DISABLE
34651: LD_INT 0
34653: PPUSH
34654: PPUSH
// begin enable ;
34655: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34656: LD_ADDR_VAR 0 1
34660: PUSH
34661: LD_INT 34
34663: PUSH
34664: LD_EXP 137
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PPUSH
34673: CALL_OW 69
34677: PUSH
34678: FOR_IN
34679: IFFALSE 34899
// begin if not i in hackTanks then
34681: LD_VAR 0 1
34685: PUSH
34686: LD_EXP 126
34690: IN
34691: NOT
34692: IFFALSE 34775
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34694: LD_ADDR_EXP 126
34698: PUSH
34699: LD_EXP 126
34703: PPUSH
34704: LD_EXP 126
34708: PUSH
34709: LD_INT 1
34711: PLUS
34712: PPUSH
34713: LD_VAR 0 1
34717: PPUSH
34718: CALL_OW 1
34722: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34723: LD_ADDR_EXP 127
34727: PUSH
34728: LD_EXP 127
34732: PPUSH
34733: LD_EXP 127
34737: PUSH
34738: LD_INT 1
34740: PLUS
34741: PPUSH
34742: EMPTY
34743: PPUSH
34744: CALL_OW 1
34748: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34749: LD_ADDR_EXP 130
34753: PUSH
34754: LD_EXP 130
34758: PPUSH
34759: LD_EXP 130
34763: PUSH
34764: LD_INT 1
34766: PLUS
34767: PPUSH
34768: EMPTY
34769: PPUSH
34770: CALL_OW 1
34774: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34775: LD_VAR 0 1
34779: PPUSH
34780: CALL_OW 302
34784: NOT
34785: IFFALSE 34798
// begin HackUnlinkAll ( i ) ;
34787: LD_VAR 0 1
34791: PPUSH
34792: CALL 34904 0 1
// continue ;
34796: GO 34678
// end ; HackCheckCapturedStatus ( i ) ;
34798: LD_VAR 0 1
34802: PPUSH
34803: CALL 35347 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34807: LD_ADDR_VAR 0 2
34811: PUSH
34812: LD_INT 81
34814: PUSH
34815: LD_VAR 0 1
34819: PPUSH
34820: CALL_OW 255
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 33
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 91
34841: PUSH
34842: LD_VAR 0 1
34846: PUSH
34847: LD_EXP 129
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 50
34859: PUSH
34860: EMPTY
34861: LIST
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: PPUSH
34869: CALL_OW 69
34873: ST_TO_ADDR
// if not tmp then
34874: LD_VAR 0 2
34878: NOT
34879: IFFALSE 34883
// continue ;
34881: GO 34678
// HackLink ( i , tmp ) ;
34883: LD_VAR 0 1
34887: PPUSH
34888: LD_VAR 0 2
34892: PPUSH
34893: CALL 35040 0 2
// end ;
34897: GO 34678
34899: POP
34900: POP
// end ;
34901: PPOPN 2
34903: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34904: LD_INT 0
34906: PPUSH
34907: PPUSH
34908: PPUSH
// if not hack in hackTanks then
34909: LD_VAR 0 1
34913: PUSH
34914: LD_EXP 126
34918: IN
34919: NOT
34920: IFFALSE 34924
// exit ;
34922: GO 35035
// index := GetElementIndex ( hackTanks , hack ) ;
34924: LD_ADDR_VAR 0 4
34928: PUSH
34929: LD_EXP 126
34933: PPUSH
34934: LD_VAR 0 1
34938: PPUSH
34939: CALL 42677 0 2
34943: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34944: LD_EXP 127
34948: PUSH
34949: LD_VAR 0 4
34953: ARRAY
34954: IFFALSE 35035
// begin for i in hackTanksCaptured [ index ] do
34956: LD_ADDR_VAR 0 3
34960: PUSH
34961: LD_EXP 127
34965: PUSH
34966: LD_VAR 0 4
34970: ARRAY
34971: PUSH
34972: FOR_IN
34973: IFFALSE 34999
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34975: LD_VAR 0 3
34979: PUSH
34980: LD_INT 1
34982: ARRAY
34983: PPUSH
34984: LD_VAR 0 3
34988: PUSH
34989: LD_INT 2
34991: ARRAY
34992: PPUSH
34993: CALL_OW 235
34997: GO 34972
34999: POP
35000: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35001: LD_ADDR_EXP 127
35005: PUSH
35006: LD_EXP 127
35010: PPUSH
35011: LD_VAR 0 4
35015: PPUSH
35016: EMPTY
35017: PPUSH
35018: CALL_OW 1
35022: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35023: LD_VAR 0 1
35027: PPUSH
35028: LD_INT 0
35030: PPUSH
35031: CALL_OW 505
// end ; end ;
35035: LD_VAR 0 2
35039: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35040: LD_INT 0
35042: PPUSH
35043: PPUSH
35044: PPUSH
// if not hack in hackTanks or not vehicles then
35045: LD_VAR 0 1
35049: PUSH
35050: LD_EXP 126
35054: IN
35055: NOT
35056: PUSH
35057: LD_VAR 0 2
35061: NOT
35062: OR
35063: IFFALSE 35067
// exit ;
35065: GO 35342
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35067: LD_ADDR_VAR 0 2
35071: PUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: LD_VAR 0 2
35081: PPUSH
35082: LD_INT 1
35084: PPUSH
35085: LD_INT 1
35087: PPUSH
35088: CALL 43327 0 4
35092: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35093: LD_ADDR_VAR 0 5
35097: PUSH
35098: LD_EXP 126
35102: PPUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: CALL 42677 0 2
35112: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35113: LD_EXP 127
35117: PUSH
35118: LD_VAR 0 5
35122: ARRAY
35123: PUSH
35124: LD_EXP 128
35128: LESS
35129: IFFALSE 35318
// begin for i := 1 to vehicles do
35131: LD_ADDR_VAR 0 4
35135: PUSH
35136: DOUBLE
35137: LD_INT 1
35139: DEC
35140: ST_TO_ADDR
35141: LD_VAR 0 2
35145: PUSH
35146: FOR_TO
35147: IFFALSE 35316
// begin if hackTanksCaptured [ index ] = hackLimit then
35149: LD_EXP 127
35153: PUSH
35154: LD_VAR 0 5
35158: ARRAY
35159: PUSH
35160: LD_EXP 128
35164: EQUAL
35165: IFFALSE 35169
// break ;
35167: GO 35316
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35169: LD_ADDR_EXP 130
35173: PUSH
35174: LD_EXP 130
35178: PPUSH
35179: LD_VAR 0 5
35183: PPUSH
35184: LD_EXP 130
35188: PUSH
35189: LD_VAR 0 5
35193: ARRAY
35194: PUSH
35195: LD_INT 1
35197: PLUS
35198: PPUSH
35199: CALL_OW 1
35203: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35204: LD_ADDR_EXP 127
35208: PUSH
35209: LD_EXP 127
35213: PPUSH
35214: LD_VAR 0 5
35218: PUSH
35219: LD_EXP 127
35223: PUSH
35224: LD_VAR 0 5
35228: ARRAY
35229: PUSH
35230: LD_INT 1
35232: PLUS
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PPUSH
35238: LD_VAR 0 2
35242: PUSH
35243: LD_VAR 0 4
35247: ARRAY
35248: PUSH
35249: LD_VAR 0 2
35253: PUSH
35254: LD_VAR 0 4
35258: ARRAY
35259: PPUSH
35260: CALL_OW 255
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PPUSH
35269: CALL 42892 0 3
35273: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35274: LD_VAR 0 2
35278: PUSH
35279: LD_VAR 0 4
35283: ARRAY
35284: PPUSH
35285: LD_VAR 0 1
35289: PPUSH
35290: CALL_OW 255
35294: PPUSH
35295: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35299: LD_VAR 0 2
35303: PUSH
35304: LD_VAR 0 4
35308: ARRAY
35309: PPUSH
35310: CALL_OW 141
// end ;
35314: GO 35146
35316: POP
35317: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35318: LD_VAR 0 1
35322: PPUSH
35323: LD_EXP 127
35327: PUSH
35328: LD_VAR 0 5
35332: ARRAY
35333: PUSH
35334: LD_INT 0
35336: PLUS
35337: PPUSH
35338: CALL_OW 505
// end ;
35342: LD_VAR 0 3
35346: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35347: LD_INT 0
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
// if not hack in hackTanks then
35353: LD_VAR 0 1
35357: PUSH
35358: LD_EXP 126
35362: IN
35363: NOT
35364: IFFALSE 35368
// exit ;
35366: GO 35608
// index := GetElementIndex ( hackTanks , hack ) ;
35368: LD_ADDR_VAR 0 4
35372: PUSH
35373: LD_EXP 126
35377: PPUSH
35378: LD_VAR 0 1
35382: PPUSH
35383: CALL 42677 0 2
35387: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35388: LD_ADDR_VAR 0 3
35392: PUSH
35393: DOUBLE
35394: LD_EXP 127
35398: PUSH
35399: LD_VAR 0 4
35403: ARRAY
35404: INC
35405: ST_TO_ADDR
35406: LD_INT 1
35408: PUSH
35409: FOR_DOWNTO
35410: IFFALSE 35582
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35412: LD_ADDR_VAR 0 5
35416: PUSH
35417: LD_EXP 127
35421: PUSH
35422: LD_VAR 0 4
35426: ARRAY
35427: PUSH
35428: LD_VAR 0 3
35432: ARRAY
35433: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35434: LD_VAR 0 5
35438: PUSH
35439: LD_INT 1
35441: ARRAY
35442: PPUSH
35443: CALL_OW 302
35447: NOT
35448: PUSH
35449: LD_VAR 0 5
35453: PUSH
35454: LD_INT 1
35456: ARRAY
35457: PPUSH
35458: CALL_OW 255
35462: PUSH
35463: LD_VAR 0 1
35467: PPUSH
35468: CALL_OW 255
35472: NONEQUAL
35473: OR
35474: IFFALSE 35580
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35476: LD_VAR 0 5
35480: PUSH
35481: LD_INT 1
35483: ARRAY
35484: PPUSH
35485: CALL_OW 305
35489: PUSH
35490: LD_VAR 0 5
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: PPUSH
35499: CALL_OW 255
35503: PUSH
35504: LD_VAR 0 1
35508: PPUSH
35509: CALL_OW 255
35513: EQUAL
35514: AND
35515: IFFALSE 35539
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35517: LD_VAR 0 5
35521: PUSH
35522: LD_INT 1
35524: ARRAY
35525: PPUSH
35526: LD_VAR 0 5
35530: PUSH
35531: LD_INT 2
35533: ARRAY
35534: PPUSH
35535: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35539: LD_ADDR_EXP 127
35543: PUSH
35544: LD_EXP 127
35548: PPUSH
35549: LD_VAR 0 4
35553: PPUSH
35554: LD_EXP 127
35558: PUSH
35559: LD_VAR 0 4
35563: ARRAY
35564: PPUSH
35565: LD_VAR 0 3
35569: PPUSH
35570: CALL_OW 3
35574: PPUSH
35575: CALL_OW 1
35579: ST_TO_ADDR
// end ; end ;
35580: GO 35409
35582: POP
35583: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35584: LD_VAR 0 1
35588: PPUSH
35589: LD_EXP 127
35593: PUSH
35594: LD_VAR 0 4
35598: ARRAY
35599: PUSH
35600: LD_INT 0
35602: PLUS
35603: PPUSH
35604: CALL_OW 505
// end ;
35608: LD_VAR 0 2
35612: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35613: LD_INT 0
35615: PPUSH
35616: PPUSH
35617: PPUSH
35618: PPUSH
// if not hack in hackTanks then
35619: LD_VAR 0 1
35623: PUSH
35624: LD_EXP 126
35628: IN
35629: NOT
35630: IFFALSE 35634
// exit ;
35632: GO 35719
// index := GetElementIndex ( hackTanks , hack ) ;
35634: LD_ADDR_VAR 0 5
35638: PUSH
35639: LD_EXP 126
35643: PPUSH
35644: LD_VAR 0 1
35648: PPUSH
35649: CALL 42677 0 2
35653: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35654: LD_ADDR_VAR 0 4
35658: PUSH
35659: DOUBLE
35660: LD_INT 1
35662: DEC
35663: ST_TO_ADDR
35664: LD_EXP 127
35668: PUSH
35669: LD_VAR 0 5
35673: ARRAY
35674: PUSH
35675: FOR_TO
35676: IFFALSE 35717
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35678: LD_EXP 127
35682: PUSH
35683: LD_VAR 0 5
35687: ARRAY
35688: PUSH
35689: LD_VAR 0 4
35693: ARRAY
35694: PUSH
35695: LD_INT 1
35697: ARRAY
35698: PUSH
35699: LD_VAR 0 2
35703: EQUAL
35704: IFFALSE 35715
// KillUnit ( vehicle ) ;
35706: LD_VAR 0 2
35710: PPUSH
35711: CALL_OW 66
35715: GO 35675
35717: POP
35718: POP
// end ;
35719: LD_VAR 0 3
35723: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35724: LD_EXP 131
35728: NOT
35729: IFFALSE 35764
35731: GO 35733
35733: DISABLE
// begin initMiner := true ;
35734: LD_ADDR_EXP 131
35738: PUSH
35739: LD_INT 1
35741: ST_TO_ADDR
// minersList := [ ] ;
35742: LD_ADDR_EXP 132
35746: PUSH
35747: EMPTY
35748: ST_TO_ADDR
// minerMinesList := [ ] ;
35749: LD_ADDR_EXP 133
35753: PUSH
35754: EMPTY
35755: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35756: LD_ADDR_EXP 134
35760: PUSH
35761: LD_INT 5
35763: ST_TO_ADDR
// end ;
35764: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35765: LD_EXP 131
35769: PUSH
35770: LD_INT 34
35772: PUSH
35773: LD_EXP 142
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PPUSH
35782: CALL_OW 69
35786: AND
35787: IFFALSE 36250
35789: GO 35791
35791: DISABLE
35792: LD_INT 0
35794: PPUSH
35795: PPUSH
35796: PPUSH
35797: PPUSH
// begin enable ;
35798: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35799: LD_ADDR_VAR 0 1
35803: PUSH
35804: LD_INT 34
35806: PUSH
35807: LD_EXP 142
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PPUSH
35816: CALL_OW 69
35820: PUSH
35821: FOR_IN
35822: IFFALSE 35894
// begin if not i in minersList then
35824: LD_VAR 0 1
35828: PUSH
35829: LD_EXP 132
35833: IN
35834: NOT
35835: IFFALSE 35892
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35837: LD_ADDR_EXP 132
35841: PUSH
35842: LD_EXP 132
35846: PPUSH
35847: LD_EXP 132
35851: PUSH
35852: LD_INT 1
35854: PLUS
35855: PPUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL_OW 1
35865: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35866: LD_ADDR_EXP 133
35870: PUSH
35871: LD_EXP 133
35875: PPUSH
35876: LD_EXP 133
35880: PUSH
35881: LD_INT 1
35883: PLUS
35884: PPUSH
35885: EMPTY
35886: PPUSH
35887: CALL_OW 1
35891: ST_TO_ADDR
// end end ;
35892: GO 35821
35894: POP
35895: POP
// for i := minerMinesList downto 1 do
35896: LD_ADDR_VAR 0 1
35900: PUSH
35901: DOUBLE
35902: LD_EXP 133
35906: INC
35907: ST_TO_ADDR
35908: LD_INT 1
35910: PUSH
35911: FOR_DOWNTO
35912: IFFALSE 36248
// begin if IsLive ( minersList [ i ] ) then
35914: LD_EXP 132
35918: PUSH
35919: LD_VAR 0 1
35923: ARRAY
35924: PPUSH
35925: CALL_OW 300
35929: IFFALSE 35957
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35931: LD_EXP 132
35935: PUSH
35936: LD_VAR 0 1
35940: ARRAY
35941: PPUSH
35942: LD_EXP 133
35946: PUSH
35947: LD_VAR 0 1
35951: ARRAY
35952: PPUSH
35953: CALL_OW 505
// if not minerMinesList [ i ] then
35957: LD_EXP 133
35961: PUSH
35962: LD_VAR 0 1
35966: ARRAY
35967: NOT
35968: IFFALSE 35972
// continue ;
35970: GO 35911
// for j := minerMinesList [ i ] downto 1 do
35972: LD_ADDR_VAR 0 2
35976: PUSH
35977: DOUBLE
35978: LD_EXP 133
35982: PUSH
35983: LD_VAR 0 1
35987: ARRAY
35988: INC
35989: ST_TO_ADDR
35990: LD_INT 1
35992: PUSH
35993: FOR_DOWNTO
35994: IFFALSE 36244
// begin side := GetSide ( minersList [ i ] ) ;
35996: LD_ADDR_VAR 0 3
36000: PUSH
36001: LD_EXP 132
36005: PUSH
36006: LD_VAR 0 1
36010: ARRAY
36011: PPUSH
36012: CALL_OW 255
36016: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36017: LD_ADDR_VAR 0 4
36021: PUSH
36022: LD_EXP 133
36026: PUSH
36027: LD_VAR 0 1
36031: ARRAY
36032: PUSH
36033: LD_VAR 0 2
36037: ARRAY
36038: PUSH
36039: LD_INT 1
36041: ARRAY
36042: PPUSH
36043: LD_EXP 133
36047: PUSH
36048: LD_VAR 0 1
36052: ARRAY
36053: PUSH
36054: LD_VAR 0 2
36058: ARRAY
36059: PUSH
36060: LD_INT 2
36062: ARRAY
36063: PPUSH
36064: CALL_OW 428
36068: ST_TO_ADDR
// if not tmp then
36069: LD_VAR 0 4
36073: NOT
36074: IFFALSE 36078
// continue ;
36076: GO 35993
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36078: LD_VAR 0 4
36082: PUSH
36083: LD_INT 81
36085: PUSH
36086: LD_VAR 0 3
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PPUSH
36095: CALL_OW 69
36099: IN
36100: PUSH
36101: LD_EXP 133
36105: PUSH
36106: LD_VAR 0 1
36110: ARRAY
36111: PUSH
36112: LD_VAR 0 2
36116: ARRAY
36117: PUSH
36118: LD_INT 1
36120: ARRAY
36121: PPUSH
36122: LD_EXP 133
36126: PUSH
36127: LD_VAR 0 1
36131: ARRAY
36132: PUSH
36133: LD_VAR 0 2
36137: ARRAY
36138: PUSH
36139: LD_INT 2
36141: ARRAY
36142: PPUSH
36143: CALL_OW 458
36147: AND
36148: IFFALSE 36242
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36150: LD_EXP 133
36154: PUSH
36155: LD_VAR 0 1
36159: ARRAY
36160: PUSH
36161: LD_VAR 0 2
36165: ARRAY
36166: PUSH
36167: LD_INT 1
36169: ARRAY
36170: PPUSH
36171: LD_EXP 133
36175: PUSH
36176: LD_VAR 0 1
36180: ARRAY
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 2
36190: ARRAY
36191: PPUSH
36192: LD_VAR 0 3
36196: PPUSH
36197: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36201: LD_ADDR_EXP 133
36205: PUSH
36206: LD_EXP 133
36210: PPUSH
36211: LD_VAR 0 1
36215: PPUSH
36216: LD_EXP 133
36220: PUSH
36221: LD_VAR 0 1
36225: ARRAY
36226: PPUSH
36227: LD_VAR 0 2
36231: PPUSH
36232: CALL_OW 3
36236: PPUSH
36237: CALL_OW 1
36241: ST_TO_ADDR
// end ; end ;
36242: GO 35993
36244: POP
36245: POP
// end ;
36246: GO 35911
36248: POP
36249: POP
// end ;
36250: PPOPN 4
36252: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36253: LD_INT 0
36255: PPUSH
36256: PPUSH
// result := false ;
36257: LD_ADDR_VAR 0 4
36261: PUSH
36262: LD_INT 0
36264: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL_OW 264
36274: PUSH
36275: LD_EXP 142
36279: EQUAL
36280: NOT
36281: IFFALSE 36285
// exit ;
36283: GO 36525
// index := GetElementIndex ( minersList , unit ) ;
36285: LD_ADDR_VAR 0 5
36289: PUSH
36290: LD_EXP 132
36294: PPUSH
36295: LD_VAR 0 1
36299: PPUSH
36300: CALL 42677 0 2
36304: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36305: LD_EXP 133
36309: PUSH
36310: LD_VAR 0 5
36314: ARRAY
36315: PUSH
36316: LD_EXP 134
36320: GREATEREQUAL
36321: IFFALSE 36325
// exit ;
36323: GO 36525
// ComMoveXY ( unit , x , y ) ;
36325: LD_VAR 0 1
36329: PPUSH
36330: LD_VAR 0 2
36334: PPUSH
36335: LD_VAR 0 3
36339: PPUSH
36340: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36344: LD_INT 35
36346: PPUSH
36347: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36351: LD_VAR 0 1
36355: PPUSH
36356: LD_VAR 0 2
36360: PPUSH
36361: LD_VAR 0 3
36365: PPUSH
36366: CALL 73449 0 3
36370: NOT
36371: PUSH
36372: LD_VAR 0 1
36376: PPUSH
36377: CALL_OW 314
36381: AND
36382: IFFALSE 36386
// exit ;
36384: GO 36525
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36386: LD_VAR 0 2
36390: PPUSH
36391: LD_VAR 0 3
36395: PPUSH
36396: CALL_OW 428
36400: PUSH
36401: LD_VAR 0 1
36405: EQUAL
36406: PUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 314
36416: NOT
36417: AND
36418: IFFALSE 36344
// PlaySoundXY ( x , y , PlantMine ) ;
36420: LD_VAR 0 2
36424: PPUSH
36425: LD_VAR 0 3
36429: PPUSH
36430: LD_STRING PlantMine
36432: PPUSH
36433: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36437: LD_VAR 0 2
36441: PPUSH
36442: LD_VAR 0 3
36446: PPUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: CALL_OW 255
36456: PPUSH
36457: LD_INT 0
36459: PPUSH
36460: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36464: LD_ADDR_EXP 133
36468: PUSH
36469: LD_EXP 133
36473: PPUSH
36474: LD_VAR 0 5
36478: PUSH
36479: LD_EXP 133
36483: PUSH
36484: LD_VAR 0 5
36488: ARRAY
36489: PUSH
36490: LD_INT 1
36492: PLUS
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PPUSH
36498: LD_VAR 0 2
36502: PUSH
36503: LD_VAR 0 3
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PPUSH
36512: CALL 42892 0 3
36516: ST_TO_ADDR
// result := true ;
36517: LD_ADDR_VAR 0 4
36521: PUSH
36522: LD_INT 1
36524: ST_TO_ADDR
// end ;
36525: LD_VAR 0 4
36529: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36530: LD_INT 0
36532: PPUSH
36533: PPUSH
36534: PPUSH
// if not unit in minersList then
36535: LD_VAR 0 1
36539: PUSH
36540: LD_EXP 132
36544: IN
36545: NOT
36546: IFFALSE 36550
// exit ;
36548: GO 36942
// index := GetElementIndex ( minersList , unit ) ;
36550: LD_ADDR_VAR 0 6
36554: PUSH
36555: LD_EXP 132
36559: PPUSH
36560: LD_VAR 0 1
36564: PPUSH
36565: CALL 42677 0 2
36569: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36570: LD_ADDR_VAR 0 5
36574: PUSH
36575: DOUBLE
36576: LD_EXP 133
36580: PUSH
36581: LD_VAR 0 6
36585: ARRAY
36586: INC
36587: ST_TO_ADDR
36588: LD_INT 1
36590: PUSH
36591: FOR_DOWNTO
36592: IFFALSE 36753
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36594: LD_EXP 133
36598: PUSH
36599: LD_VAR 0 6
36603: ARRAY
36604: PUSH
36605: LD_VAR 0 5
36609: ARRAY
36610: PUSH
36611: LD_INT 1
36613: ARRAY
36614: PUSH
36615: LD_VAR 0 2
36619: EQUAL
36620: PUSH
36621: LD_EXP 133
36625: PUSH
36626: LD_VAR 0 6
36630: ARRAY
36631: PUSH
36632: LD_VAR 0 5
36636: ARRAY
36637: PUSH
36638: LD_INT 2
36640: ARRAY
36641: PUSH
36642: LD_VAR 0 3
36646: EQUAL
36647: AND
36648: IFFALSE 36751
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36650: LD_EXP 133
36654: PUSH
36655: LD_VAR 0 6
36659: ARRAY
36660: PUSH
36661: LD_VAR 0 5
36665: ARRAY
36666: PUSH
36667: LD_INT 1
36669: ARRAY
36670: PPUSH
36671: LD_EXP 133
36675: PUSH
36676: LD_VAR 0 6
36680: ARRAY
36681: PUSH
36682: LD_VAR 0 5
36686: ARRAY
36687: PUSH
36688: LD_INT 2
36690: ARRAY
36691: PPUSH
36692: LD_VAR 0 1
36696: PPUSH
36697: CALL_OW 255
36701: PPUSH
36702: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36706: LD_ADDR_EXP 133
36710: PUSH
36711: LD_EXP 133
36715: PPUSH
36716: LD_VAR 0 6
36720: PPUSH
36721: LD_EXP 133
36725: PUSH
36726: LD_VAR 0 6
36730: ARRAY
36731: PPUSH
36732: LD_VAR 0 5
36736: PPUSH
36737: CALL_OW 3
36741: PPUSH
36742: CALL_OW 1
36746: ST_TO_ADDR
// exit ;
36747: POP
36748: POP
36749: GO 36942
// end ; end ;
36751: GO 36591
36753: POP
36754: POP
// for i := minerMinesList [ index ] downto 1 do
36755: LD_ADDR_VAR 0 5
36759: PUSH
36760: DOUBLE
36761: LD_EXP 133
36765: PUSH
36766: LD_VAR 0 6
36770: ARRAY
36771: INC
36772: ST_TO_ADDR
36773: LD_INT 1
36775: PUSH
36776: FOR_DOWNTO
36777: IFFALSE 36940
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36779: LD_EXP 133
36783: PUSH
36784: LD_VAR 0 6
36788: ARRAY
36789: PUSH
36790: LD_VAR 0 5
36794: ARRAY
36795: PUSH
36796: LD_INT 1
36798: ARRAY
36799: PPUSH
36800: LD_EXP 133
36804: PUSH
36805: LD_VAR 0 6
36809: ARRAY
36810: PUSH
36811: LD_VAR 0 5
36815: ARRAY
36816: PUSH
36817: LD_INT 2
36819: ARRAY
36820: PPUSH
36821: LD_VAR 0 2
36825: PPUSH
36826: LD_VAR 0 3
36830: PPUSH
36831: CALL_OW 298
36835: PUSH
36836: LD_INT 6
36838: LESS
36839: IFFALSE 36938
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36841: LD_EXP 133
36845: PUSH
36846: LD_VAR 0 6
36850: ARRAY
36851: PUSH
36852: LD_VAR 0 5
36856: ARRAY
36857: PUSH
36858: LD_INT 1
36860: ARRAY
36861: PPUSH
36862: LD_EXP 133
36866: PUSH
36867: LD_VAR 0 6
36871: ARRAY
36872: PUSH
36873: LD_VAR 0 5
36877: ARRAY
36878: PUSH
36879: LD_INT 2
36881: ARRAY
36882: PPUSH
36883: LD_VAR 0 1
36887: PPUSH
36888: CALL_OW 255
36892: PPUSH
36893: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36897: LD_ADDR_EXP 133
36901: PUSH
36902: LD_EXP 133
36906: PPUSH
36907: LD_VAR 0 6
36911: PPUSH
36912: LD_EXP 133
36916: PUSH
36917: LD_VAR 0 6
36921: ARRAY
36922: PPUSH
36923: LD_VAR 0 5
36927: PPUSH
36928: CALL_OW 3
36932: PPUSH
36933: CALL_OW 1
36937: ST_TO_ADDR
// end ; end ;
36938: GO 36776
36940: POP
36941: POP
// end ;
36942: LD_VAR 0 4
36946: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36947: LD_INT 0
36949: PPUSH
36950: PPUSH
36951: PPUSH
36952: PPUSH
36953: PPUSH
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36958: LD_VAR 0 1
36962: PPUSH
36963: CALL_OW 264
36967: PUSH
36968: LD_EXP 142
36972: EQUAL
36973: NOT
36974: PUSH
36975: LD_VAR 0 1
36979: PUSH
36980: LD_EXP 132
36984: IN
36985: NOT
36986: OR
36987: IFFALSE 36991
// exit ;
36989: GO 37313
// index := GetElementIndex ( minersList , unit ) ;
36991: LD_ADDR_VAR 0 6
36995: PUSH
36996: LD_EXP 132
37000: PPUSH
37001: LD_VAR 0 1
37005: PPUSH
37006: CALL 42677 0 2
37010: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37011: LD_ADDR_VAR 0 8
37015: PUSH
37016: LD_EXP 134
37020: PUSH
37021: LD_EXP 133
37025: PUSH
37026: LD_VAR 0 6
37030: ARRAY
37031: MINUS
37032: ST_TO_ADDR
// if not minesFreeAmount then
37033: LD_VAR 0 8
37037: NOT
37038: IFFALSE 37042
// exit ;
37040: GO 37313
// tmp := [ ] ;
37042: LD_ADDR_VAR 0 7
37046: PUSH
37047: EMPTY
37048: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37049: LD_ADDR_VAR 0 5
37053: PUSH
37054: DOUBLE
37055: LD_INT 1
37057: DEC
37058: ST_TO_ADDR
37059: LD_VAR 0 8
37063: PUSH
37064: FOR_TO
37065: IFFALSE 37260
// begin _d := rand ( 0 , 5 ) ;
37067: LD_ADDR_VAR 0 11
37071: PUSH
37072: LD_INT 0
37074: PPUSH
37075: LD_INT 5
37077: PPUSH
37078: CALL_OW 12
37082: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37083: LD_ADDR_VAR 0 12
37087: PUSH
37088: LD_INT 2
37090: PPUSH
37091: LD_INT 6
37093: PPUSH
37094: CALL_OW 12
37098: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37099: LD_ADDR_VAR 0 9
37103: PUSH
37104: LD_VAR 0 2
37108: PPUSH
37109: LD_VAR 0 11
37113: PPUSH
37114: LD_VAR 0 12
37118: PPUSH
37119: CALL_OW 272
37123: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37124: LD_ADDR_VAR 0 10
37128: PUSH
37129: LD_VAR 0 3
37133: PPUSH
37134: LD_VAR 0 11
37138: PPUSH
37139: LD_VAR 0 12
37143: PPUSH
37144: CALL_OW 273
37148: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37149: LD_VAR 0 9
37153: PPUSH
37154: LD_VAR 0 10
37158: PPUSH
37159: CALL_OW 488
37163: PUSH
37164: LD_VAR 0 9
37168: PUSH
37169: LD_VAR 0 10
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_VAR 0 7
37182: IN
37183: NOT
37184: AND
37185: PUSH
37186: LD_VAR 0 9
37190: PPUSH
37191: LD_VAR 0 10
37195: PPUSH
37196: CALL_OW 458
37200: NOT
37201: AND
37202: IFFALSE 37244
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37204: LD_ADDR_VAR 0 7
37208: PUSH
37209: LD_VAR 0 7
37213: PPUSH
37214: LD_VAR 0 7
37218: PUSH
37219: LD_INT 1
37221: PLUS
37222: PPUSH
37223: LD_VAR 0 9
37227: PUSH
37228: LD_VAR 0 10
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PPUSH
37237: CALL_OW 1
37241: ST_TO_ADDR
37242: GO 37258
// i := i - 1 ;
37244: LD_ADDR_VAR 0 5
37248: PUSH
37249: LD_VAR 0 5
37253: PUSH
37254: LD_INT 1
37256: MINUS
37257: ST_TO_ADDR
// end ;
37258: GO 37064
37260: POP
37261: POP
// for i in tmp do
37262: LD_ADDR_VAR 0 5
37266: PUSH
37267: LD_VAR 0 7
37271: PUSH
37272: FOR_IN
37273: IFFALSE 37311
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37275: LD_VAR 0 1
37279: PPUSH
37280: LD_VAR 0 5
37284: PUSH
37285: LD_INT 1
37287: ARRAY
37288: PPUSH
37289: LD_VAR 0 5
37293: PUSH
37294: LD_INT 2
37296: ARRAY
37297: PPUSH
37298: CALL 36253 0 3
37302: NOT
37303: IFFALSE 37309
// exit ;
37305: POP
37306: POP
37307: GO 37313
37309: GO 37272
37311: POP
37312: POP
// end ;
37313: LD_VAR 0 4
37317: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37318: LD_INT 0
37320: PPUSH
37321: PPUSH
37322: PPUSH
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
// if not GetClass ( unit ) = class_sniper then
37327: LD_VAR 0 1
37331: PPUSH
37332: CALL_OW 257
37336: PUSH
37337: LD_INT 5
37339: EQUAL
37340: NOT
37341: IFFALSE 37345
// exit ;
37343: GO 37733
// dist := 8 ;
37345: LD_ADDR_VAR 0 5
37349: PUSH
37350: LD_INT 8
37352: ST_TO_ADDR
// viewRange := 12 ;
37353: LD_ADDR_VAR 0 7
37357: PUSH
37358: LD_INT 12
37360: ST_TO_ADDR
// side := GetSide ( unit ) ;
37361: LD_ADDR_VAR 0 6
37365: PUSH
37366: LD_VAR 0 1
37370: PPUSH
37371: CALL_OW 255
37375: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37376: LD_INT 61
37378: PPUSH
37379: LD_VAR 0 6
37383: PPUSH
37384: CALL_OW 321
37388: PUSH
37389: LD_INT 2
37391: EQUAL
37392: IFFALSE 37402
// viewRange := 16 ;
37394: LD_ADDR_VAR 0 7
37398: PUSH
37399: LD_INT 16
37401: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37402: LD_VAR 0 1
37406: PPUSH
37407: LD_VAR 0 2
37411: PPUSH
37412: LD_VAR 0 3
37416: PPUSH
37417: CALL_OW 297
37421: PUSH
37422: LD_VAR 0 5
37426: GREATER
37427: IFFALSE 37506
// begin ComMoveXY ( unit , x , y ) ;
37429: LD_VAR 0 1
37433: PPUSH
37434: LD_VAR 0 2
37438: PPUSH
37439: LD_VAR 0 3
37443: PPUSH
37444: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37448: LD_INT 35
37450: PPUSH
37451: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37455: LD_VAR 0 1
37459: PPUSH
37460: LD_VAR 0 2
37464: PPUSH
37465: LD_VAR 0 3
37469: PPUSH
37470: CALL 73449 0 3
37474: NOT
37475: IFFALSE 37479
// exit ;
37477: GO 37733
// until GetDistUnitXY ( unit , x , y ) < dist ;
37479: LD_VAR 0 1
37483: PPUSH
37484: LD_VAR 0 2
37488: PPUSH
37489: LD_VAR 0 3
37493: PPUSH
37494: CALL_OW 297
37498: PUSH
37499: LD_VAR 0 5
37503: LESS
37504: IFFALSE 37448
// end ; ComTurnXY ( unit , x , y ) ;
37506: LD_VAR 0 1
37510: PPUSH
37511: LD_VAR 0 2
37515: PPUSH
37516: LD_VAR 0 3
37520: PPUSH
37521: CALL_OW 118
// wait ( 5 ) ;
37525: LD_INT 5
37527: PPUSH
37528: CALL_OW 67
// _d := GetDir ( unit ) ;
37532: LD_ADDR_VAR 0 10
37536: PUSH
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL_OW 254
37546: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37547: LD_ADDR_VAR 0 8
37551: PUSH
37552: LD_VAR 0 1
37556: PPUSH
37557: CALL_OW 250
37561: PPUSH
37562: LD_VAR 0 10
37566: PPUSH
37567: LD_VAR 0 5
37571: PPUSH
37572: CALL_OW 272
37576: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37577: LD_ADDR_VAR 0 9
37581: PUSH
37582: LD_VAR 0 1
37586: PPUSH
37587: CALL_OW 251
37591: PPUSH
37592: LD_VAR 0 10
37596: PPUSH
37597: LD_VAR 0 5
37601: PPUSH
37602: CALL_OW 273
37606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37607: LD_VAR 0 8
37611: PPUSH
37612: LD_VAR 0 9
37616: PPUSH
37617: CALL_OW 488
37621: NOT
37622: IFFALSE 37626
// exit ;
37624: GO 37733
// ComAnimCustom ( unit , 1 ) ;
37626: LD_VAR 0 1
37630: PPUSH
37631: LD_INT 1
37633: PPUSH
37634: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37638: LD_VAR 0 8
37642: PPUSH
37643: LD_VAR 0 9
37647: PPUSH
37648: LD_VAR 0 6
37652: PPUSH
37653: LD_VAR 0 7
37657: PPUSH
37658: CALL_OW 330
// repeat wait ( 1 ) ;
37662: LD_INT 1
37664: PPUSH
37665: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37669: LD_VAR 0 1
37673: PPUSH
37674: CALL_OW 316
37678: PUSH
37679: LD_VAR 0 1
37683: PPUSH
37684: CALL_OW 314
37688: OR
37689: PUSH
37690: LD_VAR 0 1
37694: PPUSH
37695: CALL_OW 302
37699: NOT
37700: OR
37701: PUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL_OW 301
37711: OR
37712: IFFALSE 37662
// RemoveSeeing ( _x , _y , side ) ;
37714: LD_VAR 0 8
37718: PPUSH
37719: LD_VAR 0 9
37723: PPUSH
37724: LD_VAR 0 6
37728: PPUSH
37729: CALL_OW 331
// end ; end_of_file
37733: LD_VAR 0 4
37737: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
37738: LD_INT 0
37740: PPUSH
// ar_miner := 81 ;
37741: LD_ADDR_EXP 142
37745: PUSH
37746: LD_INT 81
37748: ST_TO_ADDR
// ar_crane := 88 ;
37749: LD_ADDR_EXP 141
37753: PUSH
37754: LD_INT 88
37756: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
37757: LD_ADDR_EXP 136
37761: PUSH
37762: LD_INT 89
37764: ST_TO_ADDR
// us_hack := 99 ;
37765: LD_ADDR_EXP 137
37769: PUSH
37770: LD_INT 99
37772: ST_TO_ADDR
// us_artillery := 97 ;
37773: LD_ADDR_EXP 138
37777: PUSH
37778: LD_INT 97
37780: ST_TO_ADDR
// ar_bio_bomb := 91 ;
37781: LD_ADDR_EXP 139
37785: PUSH
37786: LD_INT 91
37788: ST_TO_ADDR
// ar_mortar := 92 ;
37789: LD_ADDR_EXP 140
37793: PUSH
37794: LD_INT 92
37796: ST_TO_ADDR
// ru_radar := 98 ;
37797: LD_ADDR_EXP 135
37801: PUSH
37802: LD_INT 98
37804: ST_TO_ADDR
// tech_Artillery := 80 ;
37805: LD_ADDR_EXP 143
37809: PUSH
37810: LD_INT 80
37812: ST_TO_ADDR
// tech_RadMat := 81 ;
37813: LD_ADDR_EXP 144
37817: PUSH
37818: LD_INT 81
37820: ST_TO_ADDR
// tech_BasicTools := 82 ;
37821: LD_ADDR_EXP 145
37825: PUSH
37826: LD_INT 82
37828: ST_TO_ADDR
// tech_Cargo := 83 ;
37829: LD_ADDR_EXP 146
37833: PUSH
37834: LD_INT 83
37836: ST_TO_ADDR
// tech_Track := 84 ;
37837: LD_ADDR_EXP 147
37841: PUSH
37842: LD_INT 84
37844: ST_TO_ADDR
// tech_Crane := 85 ;
37845: LD_ADDR_EXP 148
37849: PUSH
37850: LD_INT 85
37852: ST_TO_ADDR
// tech_Bulldozer := 86 ;
37853: LD_ADDR_EXP 149
37857: PUSH
37858: LD_INT 86
37860: ST_TO_ADDR
// tech_Hovercraft := 87 ;
37861: LD_ADDR_EXP 150
37865: PUSH
37866: LD_INT 87
37868: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
37869: LD_ADDR_EXP 151
37873: PUSH
37874: LD_INT 88
37876: ST_TO_ADDR
// class_mastodont := 31 ;
37877: LD_ADDR_EXP 152
37881: PUSH
37882: LD_INT 31
37884: ST_TO_ADDR
// class_horse := 21 ;
37885: LD_ADDR_EXP 153
37889: PUSH
37890: LD_INT 21
37892: ST_TO_ADDR
// end ;
37893: LD_VAR 0 1
37897: RET
// every 1 do
37898: GO 37900
37900: DISABLE
// InitGlobalVariables ; end_of_file
37901: CALL 37738 0 0
37905: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37906: LD_INT 0
37908: PPUSH
37909: PPUSH
// if exist_mode then
37910: LD_VAR 0 2
37914: IFFALSE 37939
// unit := CreateCharacter ( prefix & ident ) else
37916: LD_ADDR_VAR 0 5
37920: PUSH
37921: LD_VAR 0 3
37925: PUSH
37926: LD_VAR 0 1
37930: STR
37931: PPUSH
37932: CALL_OW 34
37936: ST_TO_ADDR
37937: GO 37954
// unit := NewCharacter ( ident ) ;
37939: LD_ADDR_VAR 0 5
37943: PUSH
37944: LD_VAR 0 1
37948: PPUSH
37949: CALL_OW 25
37953: ST_TO_ADDR
// result := unit ;
37954: LD_ADDR_VAR 0 4
37958: PUSH
37959: LD_VAR 0 5
37963: ST_TO_ADDR
// end ;
37964: LD_VAR 0 4
37968: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37969: LD_INT 0
37971: PPUSH
37972: PPUSH
// if not side or not nation then
37973: LD_VAR 0 1
37977: NOT
37978: PUSH
37979: LD_VAR 0 2
37983: NOT
37984: OR
37985: IFFALSE 37989
// exit ;
37987: GO 38757
// case nation of nation_american :
37989: LD_VAR 0 2
37993: PUSH
37994: LD_INT 1
37996: DOUBLE
37997: EQUAL
37998: IFTRUE 38002
38000: GO 38216
38002: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38003: LD_ADDR_VAR 0 4
38007: PUSH
38008: LD_INT 35
38010: PUSH
38011: LD_INT 45
38013: PUSH
38014: LD_INT 46
38016: PUSH
38017: LD_INT 47
38019: PUSH
38020: LD_INT 82
38022: PUSH
38023: LD_INT 83
38025: PUSH
38026: LD_INT 84
38028: PUSH
38029: LD_INT 85
38031: PUSH
38032: LD_INT 86
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: LD_INT 6
38043: PUSH
38044: LD_INT 15
38046: PUSH
38047: LD_INT 16
38049: PUSH
38050: LD_INT 7
38052: PUSH
38053: LD_INT 12
38055: PUSH
38056: LD_INT 13
38058: PUSH
38059: LD_INT 10
38061: PUSH
38062: LD_INT 14
38064: PUSH
38065: LD_INT 20
38067: PUSH
38068: LD_INT 21
38070: PUSH
38071: LD_INT 22
38073: PUSH
38074: LD_INT 25
38076: PUSH
38077: LD_INT 32
38079: PUSH
38080: LD_INT 27
38082: PUSH
38083: LD_INT 36
38085: PUSH
38086: LD_INT 69
38088: PUSH
38089: LD_INT 39
38091: PUSH
38092: LD_INT 34
38094: PUSH
38095: LD_INT 40
38097: PUSH
38098: LD_INT 48
38100: PUSH
38101: LD_INT 49
38103: PUSH
38104: LD_INT 50
38106: PUSH
38107: LD_INT 51
38109: PUSH
38110: LD_INT 52
38112: PUSH
38113: LD_INT 53
38115: PUSH
38116: LD_INT 54
38118: PUSH
38119: LD_INT 55
38121: PUSH
38122: LD_INT 56
38124: PUSH
38125: LD_INT 57
38127: PUSH
38128: LD_INT 58
38130: PUSH
38131: LD_INT 59
38133: PUSH
38134: LD_INT 60
38136: PUSH
38137: LD_INT 61
38139: PUSH
38140: LD_INT 62
38142: PUSH
38143: LD_INT 80
38145: PUSH
38146: LD_INT 82
38148: PUSH
38149: LD_INT 83
38151: PUSH
38152: LD_INT 84
38154: PUSH
38155: LD_INT 85
38157: PUSH
38158: LD_INT 86
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: ST_TO_ADDR
38214: GO 38681
38216: LD_INT 2
38218: DOUBLE
38219: EQUAL
38220: IFTRUE 38224
38222: GO 38450
38224: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38225: LD_ADDR_VAR 0 4
38229: PUSH
38230: LD_INT 35
38232: PUSH
38233: LD_INT 45
38235: PUSH
38236: LD_INT 46
38238: PUSH
38239: LD_INT 47
38241: PUSH
38242: LD_INT 82
38244: PUSH
38245: LD_INT 83
38247: PUSH
38248: LD_INT 84
38250: PUSH
38251: LD_INT 85
38253: PUSH
38254: LD_INT 87
38256: PUSH
38257: LD_INT 70
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 11
38265: PUSH
38266: LD_INT 3
38268: PUSH
38269: LD_INT 4
38271: PUSH
38272: LD_INT 5
38274: PUSH
38275: LD_INT 6
38277: PUSH
38278: LD_INT 15
38280: PUSH
38281: LD_INT 18
38283: PUSH
38284: LD_INT 7
38286: PUSH
38287: LD_INT 17
38289: PUSH
38290: LD_INT 8
38292: PUSH
38293: LD_INT 20
38295: PUSH
38296: LD_INT 21
38298: PUSH
38299: LD_INT 22
38301: PUSH
38302: LD_INT 72
38304: PUSH
38305: LD_INT 26
38307: PUSH
38308: LD_INT 69
38310: PUSH
38311: LD_INT 39
38313: PUSH
38314: LD_INT 40
38316: PUSH
38317: LD_INT 41
38319: PUSH
38320: LD_INT 42
38322: PUSH
38323: LD_INT 43
38325: PUSH
38326: LD_INT 48
38328: PUSH
38329: LD_INT 49
38331: PUSH
38332: LD_INT 50
38334: PUSH
38335: LD_INT 51
38337: PUSH
38338: LD_INT 52
38340: PUSH
38341: LD_INT 53
38343: PUSH
38344: LD_INT 54
38346: PUSH
38347: LD_INT 55
38349: PUSH
38350: LD_INT 56
38352: PUSH
38353: LD_INT 60
38355: PUSH
38356: LD_INT 61
38358: PUSH
38359: LD_INT 62
38361: PUSH
38362: LD_INT 66
38364: PUSH
38365: LD_INT 67
38367: PUSH
38368: LD_INT 68
38370: PUSH
38371: LD_INT 81
38373: PUSH
38374: LD_INT 82
38376: PUSH
38377: LD_INT 83
38379: PUSH
38380: LD_INT 84
38382: PUSH
38383: LD_INT 85
38385: PUSH
38386: LD_INT 87
38388: PUSH
38389: LD_INT 88
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
38448: GO 38681
38450: LD_INT 3
38452: DOUBLE
38453: EQUAL
38454: IFTRUE 38458
38456: GO 38680
38458: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38459: LD_ADDR_VAR 0 4
38463: PUSH
38464: LD_INT 46
38466: PUSH
38467: LD_INT 47
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 82
38478: PUSH
38479: LD_INT 83
38481: PUSH
38482: LD_INT 84
38484: PUSH
38485: LD_INT 85
38487: PUSH
38488: LD_INT 86
38490: PUSH
38491: LD_INT 11
38493: PUSH
38494: LD_INT 9
38496: PUSH
38497: LD_INT 20
38499: PUSH
38500: LD_INT 19
38502: PUSH
38503: LD_INT 21
38505: PUSH
38506: LD_INT 24
38508: PUSH
38509: LD_INT 22
38511: PUSH
38512: LD_INT 25
38514: PUSH
38515: LD_INT 28
38517: PUSH
38518: LD_INT 29
38520: PUSH
38521: LD_INT 30
38523: PUSH
38524: LD_INT 31
38526: PUSH
38527: LD_INT 37
38529: PUSH
38530: LD_INT 38
38532: PUSH
38533: LD_INT 32
38535: PUSH
38536: LD_INT 27
38538: PUSH
38539: LD_INT 33
38541: PUSH
38542: LD_INT 69
38544: PUSH
38545: LD_INT 39
38547: PUSH
38548: LD_INT 34
38550: PUSH
38551: LD_INT 40
38553: PUSH
38554: LD_INT 71
38556: PUSH
38557: LD_INT 23
38559: PUSH
38560: LD_INT 44
38562: PUSH
38563: LD_INT 48
38565: PUSH
38566: LD_INT 49
38568: PUSH
38569: LD_INT 50
38571: PUSH
38572: LD_INT 51
38574: PUSH
38575: LD_INT 52
38577: PUSH
38578: LD_INT 53
38580: PUSH
38581: LD_INT 54
38583: PUSH
38584: LD_INT 55
38586: PUSH
38587: LD_INT 56
38589: PUSH
38590: LD_INT 57
38592: PUSH
38593: LD_INT 58
38595: PUSH
38596: LD_INT 59
38598: PUSH
38599: LD_INT 63
38601: PUSH
38602: LD_INT 64
38604: PUSH
38605: LD_INT 65
38607: PUSH
38608: LD_INT 82
38610: PUSH
38611: LD_INT 83
38613: PUSH
38614: LD_INT 84
38616: PUSH
38617: LD_INT 85
38619: PUSH
38620: LD_INT 86
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: ST_TO_ADDR
38678: GO 38681
38680: POP
// if state > - 1 and state < 3 then
38681: LD_VAR 0 3
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: GREATER
38690: PUSH
38691: LD_VAR 0 3
38695: PUSH
38696: LD_INT 3
38698: LESS
38699: AND
38700: IFFALSE 38757
// for i in result do
38702: LD_ADDR_VAR 0 5
38706: PUSH
38707: LD_VAR 0 4
38711: PUSH
38712: FOR_IN
38713: IFFALSE 38755
// if GetTech ( i , side ) <> state then
38715: LD_VAR 0 5
38719: PPUSH
38720: LD_VAR 0 1
38724: PPUSH
38725: CALL_OW 321
38729: PUSH
38730: LD_VAR 0 3
38734: NONEQUAL
38735: IFFALSE 38753
// result := result diff i ;
38737: LD_ADDR_VAR 0 4
38741: PUSH
38742: LD_VAR 0 4
38746: PUSH
38747: LD_VAR 0 5
38751: DIFF
38752: ST_TO_ADDR
38753: GO 38712
38755: POP
38756: POP
// end ;
38757: LD_VAR 0 4
38761: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38762: LD_INT 0
38764: PPUSH
38765: PPUSH
38766: PPUSH
// result := true ;
38767: LD_ADDR_VAR 0 3
38771: PUSH
38772: LD_INT 1
38774: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38775: LD_ADDR_VAR 0 5
38779: PUSH
38780: LD_VAR 0 2
38784: PPUSH
38785: CALL_OW 480
38789: ST_TO_ADDR
// if not tmp then
38790: LD_VAR 0 5
38794: NOT
38795: IFFALSE 38799
// exit ;
38797: GO 38848
// for i in tmp do
38799: LD_ADDR_VAR 0 4
38803: PUSH
38804: LD_VAR 0 5
38808: PUSH
38809: FOR_IN
38810: IFFALSE 38846
// if GetTech ( i , side ) <> state_researched then
38812: LD_VAR 0 4
38816: PPUSH
38817: LD_VAR 0 1
38821: PPUSH
38822: CALL_OW 321
38826: PUSH
38827: LD_INT 2
38829: NONEQUAL
38830: IFFALSE 38844
// begin result := false ;
38832: LD_ADDR_VAR 0 3
38836: PUSH
38837: LD_INT 0
38839: ST_TO_ADDR
// exit ;
38840: POP
38841: POP
38842: GO 38848
// end ;
38844: GO 38809
38846: POP
38847: POP
// end ;
38848: LD_VAR 0 3
38852: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38853: LD_INT 0
38855: PPUSH
38856: PPUSH
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38868: LD_VAR 0 1
38872: NOT
38873: PUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 257
38883: PUSH
38884: LD_INT 9
38886: NONEQUAL
38887: OR
38888: IFFALSE 38892
// exit ;
38890: GO 39465
// side := GetSide ( unit ) ;
38892: LD_ADDR_VAR 0 9
38896: PUSH
38897: LD_VAR 0 1
38901: PPUSH
38902: CALL_OW 255
38906: ST_TO_ADDR
// tech_space := tech_spacanom ;
38907: LD_ADDR_VAR 0 12
38911: PUSH
38912: LD_INT 29
38914: ST_TO_ADDR
// tech_time := tech_taurad ;
38915: LD_ADDR_VAR 0 13
38919: PUSH
38920: LD_INT 28
38922: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38923: LD_ADDR_VAR 0 11
38927: PUSH
38928: LD_VAR 0 1
38932: PPUSH
38933: CALL_OW 310
38937: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38938: LD_VAR 0 11
38942: PPUSH
38943: CALL_OW 247
38947: PUSH
38948: LD_INT 2
38950: EQUAL
38951: IFFALSE 38955
// exit ;
38953: GO 39465
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38955: LD_ADDR_VAR 0 8
38959: PUSH
38960: LD_INT 81
38962: PUSH
38963: LD_VAR 0 9
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: LD_INT 21
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PPUSH
38993: CALL_OW 69
38997: ST_TO_ADDR
// if not tmp then
38998: LD_VAR 0 8
39002: NOT
39003: IFFALSE 39007
// exit ;
39005: GO 39465
// if in_unit then
39007: LD_VAR 0 11
39011: IFFALSE 39035
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39013: LD_ADDR_VAR 0 10
39017: PUSH
39018: LD_VAR 0 8
39022: PPUSH
39023: LD_VAR 0 11
39027: PPUSH
39028: CALL_OW 74
39032: ST_TO_ADDR
39033: GO 39055
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39035: LD_ADDR_VAR 0 10
39039: PUSH
39040: LD_VAR 0 8
39044: PPUSH
39045: LD_VAR 0 1
39049: PPUSH
39050: CALL_OW 74
39054: ST_TO_ADDR
// if not enemy then
39055: LD_VAR 0 10
39059: NOT
39060: IFFALSE 39064
// exit ;
39062: GO 39465
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39064: LD_VAR 0 11
39068: PUSH
39069: LD_VAR 0 11
39073: PPUSH
39074: LD_VAR 0 10
39078: PPUSH
39079: CALL_OW 296
39083: PUSH
39084: LD_INT 13
39086: GREATER
39087: AND
39088: PUSH
39089: LD_VAR 0 1
39093: PPUSH
39094: LD_VAR 0 10
39098: PPUSH
39099: CALL_OW 296
39103: PUSH
39104: LD_INT 12
39106: GREATER
39107: OR
39108: IFFALSE 39112
// exit ;
39110: GO 39465
// missile := [ 1 ] ;
39112: LD_ADDR_VAR 0 14
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39123: LD_VAR 0 9
39127: PPUSH
39128: LD_VAR 0 12
39132: PPUSH
39133: CALL_OW 325
39137: IFFALSE 39166
// missile := Insert ( missile , missile + 1 , 2 ) ;
39139: LD_ADDR_VAR 0 14
39143: PUSH
39144: LD_VAR 0 14
39148: PPUSH
39149: LD_VAR 0 14
39153: PUSH
39154: LD_INT 1
39156: PLUS
39157: PPUSH
39158: LD_INT 2
39160: PPUSH
39161: CALL_OW 2
39165: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39166: LD_VAR 0 9
39170: PPUSH
39171: LD_VAR 0 13
39175: PPUSH
39176: CALL_OW 325
39180: PUSH
39181: LD_VAR 0 10
39185: PPUSH
39186: CALL_OW 255
39190: PPUSH
39191: LD_VAR 0 13
39195: PPUSH
39196: CALL_OW 325
39200: NOT
39201: AND
39202: IFFALSE 39231
// missile := Insert ( missile , missile + 1 , 3 ) ;
39204: LD_ADDR_VAR 0 14
39208: PUSH
39209: LD_VAR 0 14
39213: PPUSH
39214: LD_VAR 0 14
39218: PUSH
39219: LD_INT 1
39221: PLUS
39222: PPUSH
39223: LD_INT 3
39225: PPUSH
39226: CALL_OW 2
39230: ST_TO_ADDR
// if missile < 2 then
39231: LD_VAR 0 14
39235: PUSH
39236: LD_INT 2
39238: LESS
39239: IFFALSE 39243
// exit ;
39241: GO 39465
// x := GetX ( enemy ) ;
39243: LD_ADDR_VAR 0 4
39247: PUSH
39248: LD_VAR 0 10
39252: PPUSH
39253: CALL_OW 250
39257: ST_TO_ADDR
// y := GetY ( enemy ) ;
39258: LD_ADDR_VAR 0 5
39262: PUSH
39263: LD_VAR 0 10
39267: PPUSH
39268: CALL_OW 251
39272: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39273: LD_ADDR_VAR 0 6
39277: PUSH
39278: LD_VAR 0 4
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PPUSH
39287: LD_INT 1
39289: PPUSH
39290: CALL_OW 12
39294: PLUS
39295: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39296: LD_ADDR_VAR 0 7
39300: PUSH
39301: LD_VAR 0 5
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PPUSH
39310: LD_INT 1
39312: PPUSH
39313: CALL_OW 12
39317: PLUS
39318: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39319: LD_VAR 0 6
39323: PPUSH
39324: LD_VAR 0 7
39328: PPUSH
39329: CALL_OW 488
39333: NOT
39334: IFFALSE 39356
// begin _x := x ;
39336: LD_ADDR_VAR 0 6
39340: PUSH
39341: LD_VAR 0 4
39345: ST_TO_ADDR
// _y := y ;
39346: LD_ADDR_VAR 0 7
39350: PUSH
39351: LD_VAR 0 5
39355: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39356: LD_ADDR_VAR 0 3
39360: PUSH
39361: LD_INT 1
39363: PPUSH
39364: LD_VAR 0 14
39368: PPUSH
39369: CALL_OW 12
39373: ST_TO_ADDR
// case i of 1 :
39374: LD_VAR 0 3
39378: PUSH
39379: LD_INT 1
39381: DOUBLE
39382: EQUAL
39383: IFTRUE 39387
39385: GO 39404
39387: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39388: LD_VAR 0 1
39392: PPUSH
39393: LD_VAR 0 10
39397: PPUSH
39398: CALL_OW 115
39402: GO 39465
39404: LD_INT 2
39406: DOUBLE
39407: EQUAL
39408: IFTRUE 39412
39410: GO 39434
39412: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39413: LD_VAR 0 1
39417: PPUSH
39418: LD_VAR 0 6
39422: PPUSH
39423: LD_VAR 0 7
39427: PPUSH
39428: CALL_OW 153
39432: GO 39465
39434: LD_INT 3
39436: DOUBLE
39437: EQUAL
39438: IFTRUE 39442
39440: GO 39464
39442: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39443: LD_VAR 0 1
39447: PPUSH
39448: LD_VAR 0 6
39452: PPUSH
39453: LD_VAR 0 7
39457: PPUSH
39458: CALL_OW 154
39462: GO 39465
39464: POP
// end ;
39465: LD_VAR 0 2
39469: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39470: LD_INT 0
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
// if not unit or not building then
39478: LD_VAR 0 1
39482: NOT
39483: PUSH
39484: LD_VAR 0 2
39488: NOT
39489: OR
39490: IFFALSE 39494
// exit ;
39492: GO 39652
// x := GetX ( building ) ;
39494: LD_ADDR_VAR 0 5
39498: PUSH
39499: LD_VAR 0 2
39503: PPUSH
39504: CALL_OW 250
39508: ST_TO_ADDR
// y := GetY ( building ) ;
39509: LD_ADDR_VAR 0 6
39513: PUSH
39514: LD_VAR 0 2
39518: PPUSH
39519: CALL_OW 251
39523: ST_TO_ADDR
// for i = 0 to 5 do
39524: LD_ADDR_VAR 0 4
39528: PUSH
39529: DOUBLE
39530: LD_INT 0
39532: DEC
39533: ST_TO_ADDR
39534: LD_INT 5
39536: PUSH
39537: FOR_TO
39538: IFFALSE 39650
// begin _x := ShiftX ( x , i , 3 ) ;
39540: LD_ADDR_VAR 0 7
39544: PUSH
39545: LD_VAR 0 5
39549: PPUSH
39550: LD_VAR 0 4
39554: PPUSH
39555: LD_INT 3
39557: PPUSH
39558: CALL_OW 272
39562: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39563: LD_ADDR_VAR 0 8
39567: PUSH
39568: LD_VAR 0 6
39572: PPUSH
39573: LD_VAR 0 4
39577: PPUSH
39578: LD_INT 3
39580: PPUSH
39581: CALL_OW 273
39585: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39586: LD_VAR 0 7
39590: PPUSH
39591: LD_VAR 0 8
39595: PPUSH
39596: CALL_OW 488
39600: NOT
39601: IFFALSE 39605
// continue ;
39603: GO 39537
// if HexInfo ( _x , _y ) = 0 then
39605: LD_VAR 0 7
39609: PPUSH
39610: LD_VAR 0 8
39614: PPUSH
39615: CALL_OW 428
39619: PUSH
39620: LD_INT 0
39622: EQUAL
39623: IFFALSE 39648
// begin ComMoveXY ( unit , _x , _y ) ;
39625: LD_VAR 0 1
39629: PPUSH
39630: LD_VAR 0 7
39634: PPUSH
39635: LD_VAR 0 8
39639: PPUSH
39640: CALL_OW 111
// exit ;
39644: POP
39645: POP
39646: GO 39652
// end ; end ;
39648: GO 39537
39650: POP
39651: POP
// end ;
39652: LD_VAR 0 3
39656: RET
// export function ScanBase ( side , base_area ) ; begin
39657: LD_INT 0
39659: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39660: LD_ADDR_VAR 0 3
39664: PUSH
39665: LD_VAR 0 2
39669: PPUSH
39670: LD_INT 81
39672: PUSH
39673: LD_VAR 0 1
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PPUSH
39682: CALL_OW 70
39686: ST_TO_ADDR
// end ;
39687: LD_VAR 0 3
39691: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39692: LD_INT 0
39694: PPUSH
39695: PPUSH
39696: PPUSH
39697: PPUSH
// result := false ;
39698: LD_ADDR_VAR 0 2
39702: PUSH
39703: LD_INT 0
39705: ST_TO_ADDR
// side := GetSide ( unit ) ;
39706: LD_ADDR_VAR 0 3
39710: PUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 255
39720: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39721: LD_ADDR_VAR 0 4
39725: PUSH
39726: LD_VAR 0 1
39730: PPUSH
39731: CALL_OW 248
39735: ST_TO_ADDR
// case nat of 1 :
39736: LD_VAR 0 4
39740: PUSH
39741: LD_INT 1
39743: DOUBLE
39744: EQUAL
39745: IFTRUE 39749
39747: GO 39760
39749: POP
// tech := tech_lassight ; 2 :
39750: LD_ADDR_VAR 0 5
39754: PUSH
39755: LD_INT 12
39757: ST_TO_ADDR
39758: GO 39799
39760: LD_INT 2
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39779
39768: POP
// tech := tech_mortar ; 3 :
39769: LD_ADDR_VAR 0 5
39773: PUSH
39774: LD_INT 41
39776: ST_TO_ADDR
39777: GO 39799
39779: LD_INT 3
39781: DOUBLE
39782: EQUAL
39783: IFTRUE 39787
39785: GO 39798
39787: POP
// tech := tech_bazooka ; end ;
39788: LD_ADDR_VAR 0 5
39792: PUSH
39793: LD_INT 44
39795: ST_TO_ADDR
39796: GO 39799
39798: POP
// if Researched ( side , tech ) then
39799: LD_VAR 0 3
39803: PPUSH
39804: LD_VAR 0 5
39808: PPUSH
39809: CALL_OW 325
39813: IFFALSE 39840
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39815: LD_ADDR_VAR 0 2
39819: PUSH
39820: LD_INT 5
39822: PUSH
39823: LD_INT 8
39825: PUSH
39826: LD_INT 9
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: PUSH
39834: LD_VAR 0 4
39838: ARRAY
39839: ST_TO_ADDR
// end ;
39840: LD_VAR 0 2
39844: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39845: LD_INT 0
39847: PPUSH
39848: PPUSH
39849: PPUSH
// if not mines then
39850: LD_VAR 0 2
39854: NOT
39855: IFFALSE 39859
// exit ;
39857: GO 40003
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39859: LD_ADDR_VAR 0 5
39863: PUSH
39864: LD_INT 81
39866: PUSH
39867: LD_VAR 0 1
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 3
39878: PUSH
39879: LD_INT 21
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PPUSH
39897: CALL_OW 69
39901: ST_TO_ADDR
// for i in mines do
39902: LD_ADDR_VAR 0 4
39906: PUSH
39907: LD_VAR 0 2
39911: PUSH
39912: FOR_IN
39913: IFFALSE 40001
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39915: LD_VAR 0 4
39919: PUSH
39920: LD_INT 1
39922: ARRAY
39923: PPUSH
39924: LD_VAR 0 4
39928: PUSH
39929: LD_INT 2
39931: ARRAY
39932: PPUSH
39933: CALL_OW 458
39937: NOT
39938: IFFALSE 39942
// continue ;
39940: GO 39912
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39942: LD_VAR 0 4
39946: PUSH
39947: LD_INT 1
39949: ARRAY
39950: PPUSH
39951: LD_VAR 0 4
39955: PUSH
39956: LD_INT 2
39958: ARRAY
39959: PPUSH
39960: CALL_OW 428
39964: PUSH
39965: LD_VAR 0 5
39969: IN
39970: IFFALSE 39999
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39972: LD_VAR 0 4
39976: PUSH
39977: LD_INT 1
39979: ARRAY
39980: PPUSH
39981: LD_VAR 0 4
39985: PUSH
39986: LD_INT 2
39988: ARRAY
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 456
// end ;
39999: GO 39912
40001: POP
40002: POP
// end ;
40003: LD_VAR 0 3
40007: RET
// export function Count ( array ) ; var i ; begin
40008: LD_INT 0
40010: PPUSH
40011: PPUSH
// result := 0 ;
40012: LD_ADDR_VAR 0 2
40016: PUSH
40017: LD_INT 0
40019: ST_TO_ADDR
// for i in array do
40020: LD_ADDR_VAR 0 3
40024: PUSH
40025: LD_VAR 0 1
40029: PUSH
40030: FOR_IN
40031: IFFALSE 40055
// if i then
40033: LD_VAR 0 3
40037: IFFALSE 40053
// result := result + 1 ;
40039: LD_ADDR_VAR 0 2
40043: PUSH
40044: LD_VAR 0 2
40048: PUSH
40049: LD_INT 1
40051: PLUS
40052: ST_TO_ADDR
40053: GO 40030
40055: POP
40056: POP
// end ;
40057: LD_VAR 0 2
40061: RET
// export function IsEmpty ( building ) ; begin
40062: LD_INT 0
40064: PPUSH
// if not building then
40065: LD_VAR 0 1
40069: NOT
40070: IFFALSE 40074
// exit ;
40072: GO 40117
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40074: LD_ADDR_VAR 0 2
40078: PUSH
40079: LD_VAR 0 1
40083: PUSH
40084: LD_INT 22
40086: PUSH
40087: LD_VAR 0 1
40091: PPUSH
40092: CALL_OW 255
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 58
40103: PUSH
40104: EMPTY
40105: LIST
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PPUSH
40111: CALL_OW 69
40115: IN
40116: ST_TO_ADDR
// end ;
40117: LD_VAR 0 2
40121: RET
// export function IsNotFull ( building ) ; begin
40122: LD_INT 0
40124: PPUSH
// if not building then
40125: LD_VAR 0 1
40129: NOT
40130: IFFALSE 40134
// exit ;
40132: GO 40153
// result := UnitsInside ( building ) < 6 ;
40134: LD_ADDR_VAR 0 2
40138: PUSH
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 313
40148: PUSH
40149: LD_INT 6
40151: LESS
40152: ST_TO_ADDR
// end ;
40153: LD_VAR 0 2
40157: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40158: LD_INT 0
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
// tmp := [ ] ;
40164: LD_ADDR_VAR 0 3
40168: PUSH
40169: EMPTY
40170: ST_TO_ADDR
// list := [ ] ;
40171: LD_ADDR_VAR 0 5
40175: PUSH
40176: EMPTY
40177: ST_TO_ADDR
// for i = 16 to 25 do
40178: LD_ADDR_VAR 0 4
40182: PUSH
40183: DOUBLE
40184: LD_INT 16
40186: DEC
40187: ST_TO_ADDR
40188: LD_INT 25
40190: PUSH
40191: FOR_TO
40192: IFFALSE 40265
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40194: LD_ADDR_VAR 0 3
40198: PUSH
40199: LD_VAR 0 3
40203: PUSH
40204: LD_INT 22
40206: PUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 255
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 91
40223: PUSH
40224: LD_VAR 0 1
40228: PUSH
40229: LD_INT 6
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 30
40239: PUSH
40240: LD_VAR 0 4
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: PPUSH
40257: CALL_OW 69
40261: ADD
40262: ST_TO_ADDR
40263: GO 40191
40265: POP
40266: POP
// for i = 1 to tmp do
40267: LD_ADDR_VAR 0 4
40271: PUSH
40272: DOUBLE
40273: LD_INT 1
40275: DEC
40276: ST_TO_ADDR
40277: LD_VAR 0 3
40281: PUSH
40282: FOR_TO
40283: IFFALSE 40371
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40285: LD_ADDR_VAR 0 5
40289: PUSH
40290: LD_VAR 0 5
40294: PUSH
40295: LD_VAR 0 3
40299: PUSH
40300: LD_VAR 0 4
40304: ARRAY
40305: PPUSH
40306: CALL_OW 266
40310: PUSH
40311: LD_VAR 0 3
40315: PUSH
40316: LD_VAR 0 4
40320: ARRAY
40321: PPUSH
40322: CALL_OW 250
40326: PUSH
40327: LD_VAR 0 3
40331: PUSH
40332: LD_VAR 0 4
40336: ARRAY
40337: PPUSH
40338: CALL_OW 251
40342: PUSH
40343: LD_VAR 0 3
40347: PUSH
40348: LD_VAR 0 4
40352: ARRAY
40353: PPUSH
40354: CALL_OW 254
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: PUSH
40365: EMPTY
40366: LIST
40367: ADD
40368: ST_TO_ADDR
40369: GO 40282
40371: POP
40372: POP
// result := list ;
40373: LD_ADDR_VAR 0 2
40377: PUSH
40378: LD_VAR 0 5
40382: ST_TO_ADDR
// end ;
40383: LD_VAR 0 2
40387: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40388: LD_INT 0
40390: PPUSH
40391: PPUSH
40392: PPUSH
40393: PPUSH
40394: PPUSH
40395: PPUSH
40396: PPUSH
// if not factory then
40397: LD_VAR 0 1
40401: NOT
40402: IFFALSE 40406
// exit ;
40404: GO 40999
// if control = control_apeman then
40406: LD_VAR 0 4
40410: PUSH
40411: LD_INT 5
40413: EQUAL
40414: IFFALSE 40523
// begin tmp := UnitsInside ( factory ) ;
40416: LD_ADDR_VAR 0 8
40420: PUSH
40421: LD_VAR 0 1
40425: PPUSH
40426: CALL_OW 313
40430: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40431: LD_VAR 0 8
40435: PPUSH
40436: LD_INT 25
40438: PUSH
40439: LD_INT 12
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PPUSH
40446: CALL_OW 72
40450: NOT
40451: IFFALSE 40461
// control := control_manual ;
40453: LD_ADDR_VAR 0 4
40457: PUSH
40458: LD_INT 1
40460: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40461: LD_ADDR_VAR 0 8
40465: PUSH
40466: LD_VAR 0 1
40470: PPUSH
40471: CALL 40158 0 1
40475: ST_TO_ADDR
// if tmp then
40476: LD_VAR 0 8
40480: IFFALSE 40523
// begin for i in tmp do
40482: LD_ADDR_VAR 0 7
40486: PUSH
40487: LD_VAR 0 8
40491: PUSH
40492: FOR_IN
40493: IFFALSE 40521
// if i [ 1 ] = b_ext_radio then
40495: LD_VAR 0 7
40499: PUSH
40500: LD_INT 1
40502: ARRAY
40503: PUSH
40504: LD_INT 22
40506: EQUAL
40507: IFFALSE 40519
// begin control := control_remote ;
40509: LD_ADDR_VAR 0 4
40513: PUSH
40514: LD_INT 2
40516: ST_TO_ADDR
// break ;
40517: GO 40521
// end ;
40519: GO 40492
40521: POP
40522: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40523: LD_VAR 0 1
40527: PPUSH
40528: LD_VAR 0 2
40532: PPUSH
40533: LD_VAR 0 3
40537: PPUSH
40538: LD_VAR 0 4
40542: PPUSH
40543: LD_VAR 0 5
40547: PPUSH
40548: CALL_OW 448
40552: IFFALSE 40587
// begin result := [ chassis , engine , control , weapon ] ;
40554: LD_ADDR_VAR 0 6
40558: PUSH
40559: LD_VAR 0 2
40563: PUSH
40564: LD_VAR 0 3
40568: PUSH
40569: LD_VAR 0 4
40573: PUSH
40574: LD_VAR 0 5
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: ST_TO_ADDR
// exit ;
40585: GO 40999
// end ; _chassis := AvailableChassisList ( factory ) ;
40587: LD_ADDR_VAR 0 9
40591: PUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: CALL_OW 475
40601: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40602: LD_ADDR_VAR 0 11
40606: PUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: CALL_OW 476
40616: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40617: LD_ADDR_VAR 0 12
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 477
40631: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40632: LD_ADDR_VAR 0 10
40636: PUSH
40637: LD_VAR 0 1
40641: PPUSH
40642: CALL_OW 478
40646: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40647: LD_VAR 0 9
40651: NOT
40652: PUSH
40653: LD_VAR 0 11
40657: NOT
40658: OR
40659: PUSH
40660: LD_VAR 0 12
40664: NOT
40665: OR
40666: PUSH
40667: LD_VAR 0 10
40671: NOT
40672: OR
40673: IFFALSE 40708
// begin result := [ chassis , engine , control , weapon ] ;
40675: LD_ADDR_VAR 0 6
40679: PUSH
40680: LD_VAR 0 2
40684: PUSH
40685: LD_VAR 0 3
40689: PUSH
40690: LD_VAR 0 4
40694: PUSH
40695: LD_VAR 0 5
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: ST_TO_ADDR
// exit ;
40706: GO 40999
// end ; if not chassis in _chassis then
40708: LD_VAR 0 2
40712: PUSH
40713: LD_VAR 0 9
40717: IN
40718: NOT
40719: IFFALSE 40745
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40721: LD_ADDR_VAR 0 2
40725: PUSH
40726: LD_VAR 0 9
40730: PUSH
40731: LD_INT 1
40733: PPUSH
40734: LD_VAR 0 9
40738: PPUSH
40739: CALL_OW 12
40743: ARRAY
40744: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40745: LD_VAR 0 2
40749: PPUSH
40750: LD_VAR 0 3
40754: PPUSH
40755: CALL 41004 0 2
40759: NOT
40760: IFFALSE 40819
// repeat engine := _engine [ 1 ] ;
40762: LD_ADDR_VAR 0 3
40766: PUSH
40767: LD_VAR 0 11
40771: PUSH
40772: LD_INT 1
40774: ARRAY
40775: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40776: LD_ADDR_VAR 0 11
40780: PUSH
40781: LD_VAR 0 11
40785: PPUSH
40786: LD_INT 1
40788: PPUSH
40789: CALL_OW 3
40793: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40794: LD_VAR 0 2
40798: PPUSH
40799: LD_VAR 0 3
40803: PPUSH
40804: CALL 41004 0 2
40808: PUSH
40809: LD_VAR 0 11
40813: PUSH
40814: EMPTY
40815: EQUAL
40816: OR
40817: IFFALSE 40762
// if not control in _control then
40819: LD_VAR 0 4
40823: PUSH
40824: LD_VAR 0 12
40828: IN
40829: NOT
40830: IFFALSE 40856
// control := _control [ rand ( 1 , _control ) ] ;
40832: LD_ADDR_VAR 0 4
40836: PUSH
40837: LD_VAR 0 12
40841: PUSH
40842: LD_INT 1
40844: PPUSH
40845: LD_VAR 0 12
40849: PPUSH
40850: CALL_OW 12
40854: ARRAY
40855: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40856: LD_VAR 0 2
40860: PPUSH
40861: LD_VAR 0 5
40865: PPUSH
40866: CALL 41224 0 2
40870: NOT
40871: IFFALSE 40930
// repeat weapon := _weapon [ 1 ] ;
40873: LD_ADDR_VAR 0 5
40877: PUSH
40878: LD_VAR 0 10
40882: PUSH
40883: LD_INT 1
40885: ARRAY
40886: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40887: LD_ADDR_VAR 0 10
40891: PUSH
40892: LD_VAR 0 10
40896: PPUSH
40897: LD_INT 1
40899: PPUSH
40900: CALL_OW 3
40904: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40905: LD_VAR 0 2
40909: PPUSH
40910: LD_VAR 0 5
40914: PPUSH
40915: CALL 41224 0 2
40919: PUSH
40920: LD_VAR 0 10
40924: PUSH
40925: EMPTY
40926: EQUAL
40927: OR
40928: IFFALSE 40873
// result := [ ] ;
40930: LD_ADDR_VAR 0 6
40934: PUSH
40935: EMPTY
40936: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40937: LD_VAR 0 1
40941: PPUSH
40942: LD_VAR 0 2
40946: PPUSH
40947: LD_VAR 0 3
40951: PPUSH
40952: LD_VAR 0 4
40956: PPUSH
40957: LD_VAR 0 5
40961: PPUSH
40962: CALL_OW 448
40966: IFFALSE 40999
// result := [ chassis , engine , control , weapon ] ;
40968: LD_ADDR_VAR 0 6
40972: PUSH
40973: LD_VAR 0 2
40977: PUSH
40978: LD_VAR 0 3
40982: PUSH
40983: LD_VAR 0 4
40987: PUSH
40988: LD_VAR 0 5
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: ST_TO_ADDR
// end ;
40999: LD_VAR 0 6
41003: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41004: LD_INT 0
41006: PPUSH
// if not chassis or not engine then
41007: LD_VAR 0 1
41011: NOT
41012: PUSH
41013: LD_VAR 0 2
41017: NOT
41018: OR
41019: IFFALSE 41023
// exit ;
41021: GO 41219
// case engine of engine_solar :
41023: LD_VAR 0 2
41027: PUSH
41028: LD_INT 2
41030: DOUBLE
41031: EQUAL
41032: IFTRUE 41036
41034: GO 41074
41036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41037: LD_ADDR_VAR 0 3
41041: PUSH
41042: LD_INT 11
41044: PUSH
41045: LD_INT 12
41047: PUSH
41048: LD_INT 13
41050: PUSH
41051: LD_INT 14
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: ST_TO_ADDR
41072: GO 41203
41074: LD_INT 1
41076: DOUBLE
41077: EQUAL
41078: IFTRUE 41082
41080: GO 41144
41082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41083: LD_ADDR_VAR 0 3
41087: PUSH
41088: LD_INT 11
41090: PUSH
41091: LD_INT 12
41093: PUSH
41094: LD_INT 13
41096: PUSH
41097: LD_INT 14
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 3
41108: PUSH
41109: LD_INT 4
41111: PUSH
41112: LD_INT 5
41114: PUSH
41115: LD_INT 21
41117: PUSH
41118: LD_INT 23
41120: PUSH
41121: LD_INT 22
41123: PUSH
41124: LD_INT 24
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: ST_TO_ADDR
41142: GO 41203
41144: LD_INT 3
41146: DOUBLE
41147: EQUAL
41148: IFTRUE 41152
41150: GO 41202
41152: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41153: LD_ADDR_VAR 0 3
41157: PUSH
41158: LD_INT 13
41160: PUSH
41161: LD_INT 14
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: LD_INT 4
41172: PUSH
41173: LD_INT 5
41175: PUSH
41176: LD_INT 21
41178: PUSH
41179: LD_INT 22
41181: PUSH
41182: LD_INT 23
41184: PUSH
41185: LD_INT 24
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: ST_TO_ADDR
41200: GO 41203
41202: POP
// result := ( chassis in result ) ;
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: LD_VAR 0 1
41212: PUSH
41213: LD_VAR 0 3
41217: IN
41218: ST_TO_ADDR
// end ;
41219: LD_VAR 0 3
41223: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41224: LD_INT 0
41226: PPUSH
// if not chassis or not weapon then
41227: LD_VAR 0 1
41231: NOT
41232: PUSH
41233: LD_VAR 0 2
41237: NOT
41238: OR
41239: IFFALSE 41243
// exit ;
41241: GO 42305
// case weapon of us_machine_gun :
41243: LD_VAR 0 2
41247: PUSH
41248: LD_INT 2
41250: DOUBLE
41251: EQUAL
41252: IFTRUE 41256
41254: GO 41286
41256: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41257: LD_ADDR_VAR 0 3
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 4
41273: PUSH
41274: LD_INT 5
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: ST_TO_ADDR
41284: GO 42289
41286: LD_INT 3
41288: DOUBLE
41289: EQUAL
41290: IFTRUE 41294
41292: GO 41324
41294: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41295: LD_ADDR_VAR 0 3
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: LD_INT 3
41308: PUSH
41309: LD_INT 4
41311: PUSH
41312: LD_INT 5
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: ST_TO_ADDR
41322: GO 42289
41324: LD_INT 11
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41362
41332: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: LD_INT 4
41349: PUSH
41350: LD_INT 5
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: ST_TO_ADDR
41360: GO 42289
41362: LD_INT 4
41364: DOUBLE
41365: EQUAL
41366: IFTRUE 41370
41368: GO 41396
41370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41371: LD_ADDR_VAR 0 3
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 3
41381: PUSH
41382: LD_INT 4
41384: PUSH
41385: LD_INT 5
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: ST_TO_ADDR
41394: GO 42289
41396: LD_INT 5
41398: DOUBLE
41399: EQUAL
41400: IFTRUE 41404
41402: GO 41430
41404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41405: LD_ADDR_VAR 0 3
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 3
41415: PUSH
41416: LD_INT 4
41418: PUSH
41419: LD_INT 5
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
41428: GO 42289
41430: LD_INT 9
41432: DOUBLE
41433: EQUAL
41434: IFTRUE 41438
41436: GO 41464
41438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41439: LD_ADDR_VAR 0 3
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: LD_INT 3
41449: PUSH
41450: LD_INT 4
41452: PUSH
41453: LD_INT 5
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: ST_TO_ADDR
41462: GO 42289
41464: LD_INT 7
41466: DOUBLE
41467: EQUAL
41468: IFTRUE 41472
41470: GO 41498
41472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41473: LD_ADDR_VAR 0 3
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: LD_INT 3
41483: PUSH
41484: LD_INT 4
41486: PUSH
41487: LD_INT 5
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: ST_TO_ADDR
41496: GO 42289
41498: LD_INT 12
41500: DOUBLE
41501: EQUAL
41502: IFTRUE 41506
41504: GO 41532
41506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41507: LD_ADDR_VAR 0 3
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 3
41517: PUSH
41518: LD_INT 4
41520: PUSH
41521: LD_INT 5
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: ST_TO_ADDR
41530: GO 42289
41532: LD_INT 13
41534: DOUBLE
41535: EQUAL
41536: IFTRUE 41540
41538: GO 41566
41540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41541: LD_ADDR_VAR 0 3
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: LD_INT 3
41551: PUSH
41552: LD_INT 4
41554: PUSH
41555: LD_INT 5
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: ST_TO_ADDR
41564: GO 42289
41566: LD_INT 14
41568: DOUBLE
41569: EQUAL
41570: IFTRUE 41574
41572: GO 41592
41574: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41575: LD_ADDR_VAR 0 3
41579: PUSH
41580: LD_INT 4
41582: PUSH
41583: LD_INT 5
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: ST_TO_ADDR
41590: GO 42289
41592: LD_INT 6
41594: DOUBLE
41595: EQUAL
41596: IFTRUE 41600
41598: GO 41618
41600: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41601: LD_ADDR_VAR 0 3
41605: PUSH
41606: LD_INT 4
41608: PUSH
41609: LD_INT 5
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: ST_TO_ADDR
41616: GO 42289
41618: LD_INT 10
41620: DOUBLE
41621: EQUAL
41622: IFTRUE 41626
41624: GO 41644
41626: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41627: LD_ADDR_VAR 0 3
41631: PUSH
41632: LD_INT 4
41634: PUSH
41635: LD_INT 5
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: ST_TO_ADDR
41642: GO 42289
41644: LD_INT 22
41646: DOUBLE
41647: EQUAL
41648: IFTRUE 41652
41650: GO 41678
41652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41653: LD_ADDR_VAR 0 3
41657: PUSH
41658: LD_INT 11
41660: PUSH
41661: LD_INT 12
41663: PUSH
41664: LD_INT 13
41666: PUSH
41667: LD_INT 14
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: ST_TO_ADDR
41676: GO 42289
41678: LD_INT 23
41680: DOUBLE
41681: EQUAL
41682: IFTRUE 41686
41684: GO 41712
41686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41687: LD_ADDR_VAR 0 3
41691: PUSH
41692: LD_INT 11
41694: PUSH
41695: LD_INT 12
41697: PUSH
41698: LD_INT 13
41700: PUSH
41701: LD_INT 14
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: ST_TO_ADDR
41710: GO 42289
41712: LD_INT 24
41714: DOUBLE
41715: EQUAL
41716: IFTRUE 41720
41718: GO 41746
41720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41721: LD_ADDR_VAR 0 3
41725: PUSH
41726: LD_INT 11
41728: PUSH
41729: LD_INT 12
41731: PUSH
41732: LD_INT 13
41734: PUSH
41735: LD_INT 14
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: ST_TO_ADDR
41744: GO 42289
41746: LD_INT 30
41748: DOUBLE
41749: EQUAL
41750: IFTRUE 41754
41752: GO 41780
41754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41755: LD_ADDR_VAR 0 3
41759: PUSH
41760: LD_INT 11
41762: PUSH
41763: LD_INT 12
41765: PUSH
41766: LD_INT 13
41768: PUSH
41769: LD_INT 14
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: ST_TO_ADDR
41778: GO 42289
41780: LD_INT 25
41782: DOUBLE
41783: EQUAL
41784: IFTRUE 41788
41786: GO 41806
41788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41789: LD_ADDR_VAR 0 3
41793: PUSH
41794: LD_INT 13
41796: PUSH
41797: LD_INT 14
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: ST_TO_ADDR
41804: GO 42289
41806: LD_INT 27
41808: DOUBLE
41809: EQUAL
41810: IFTRUE 41814
41812: GO 41832
41814: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41815: LD_ADDR_VAR 0 3
41819: PUSH
41820: LD_INT 13
41822: PUSH
41823: LD_INT 14
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: ST_TO_ADDR
41830: GO 42289
41832: LD_EXP 140
41836: DOUBLE
41837: EQUAL
41838: IFTRUE 41842
41840: GO 41868
41842: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41843: LD_ADDR_VAR 0 3
41847: PUSH
41848: LD_INT 11
41850: PUSH
41851: LD_INT 12
41853: PUSH
41854: LD_INT 13
41856: PUSH
41857: LD_INT 14
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: ST_TO_ADDR
41866: GO 42289
41868: LD_INT 28
41870: DOUBLE
41871: EQUAL
41872: IFTRUE 41876
41874: GO 41894
41876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41877: LD_ADDR_VAR 0 3
41881: PUSH
41882: LD_INT 13
41884: PUSH
41885: LD_INT 14
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: ST_TO_ADDR
41892: GO 42289
41894: LD_INT 29
41896: DOUBLE
41897: EQUAL
41898: IFTRUE 41902
41900: GO 41920
41902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41903: LD_ADDR_VAR 0 3
41907: PUSH
41908: LD_INT 13
41910: PUSH
41911: LD_INT 14
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: ST_TO_ADDR
41918: GO 42289
41920: LD_INT 31
41922: DOUBLE
41923: EQUAL
41924: IFTRUE 41928
41926: GO 41946
41928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41929: LD_ADDR_VAR 0 3
41933: PUSH
41934: LD_INT 13
41936: PUSH
41937: LD_INT 14
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: ST_TO_ADDR
41944: GO 42289
41946: LD_INT 26
41948: DOUBLE
41949: EQUAL
41950: IFTRUE 41954
41952: GO 41972
41954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41955: LD_ADDR_VAR 0 3
41959: PUSH
41960: LD_INT 13
41962: PUSH
41963: LD_INT 14
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: ST_TO_ADDR
41970: GO 42289
41972: LD_INT 42
41974: DOUBLE
41975: EQUAL
41976: IFTRUE 41980
41978: GO 42006
41980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41981: LD_ADDR_VAR 0 3
41985: PUSH
41986: LD_INT 21
41988: PUSH
41989: LD_INT 22
41991: PUSH
41992: LD_INT 23
41994: PUSH
41995: LD_INT 24
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: ST_TO_ADDR
42004: GO 42289
42006: LD_INT 43
42008: DOUBLE
42009: EQUAL
42010: IFTRUE 42014
42012: GO 42040
42014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42015: LD_ADDR_VAR 0 3
42019: PUSH
42020: LD_INT 21
42022: PUSH
42023: LD_INT 22
42025: PUSH
42026: LD_INT 23
42028: PUSH
42029: LD_INT 24
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: ST_TO_ADDR
42038: GO 42289
42040: LD_INT 44
42042: DOUBLE
42043: EQUAL
42044: IFTRUE 42048
42046: GO 42074
42048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42049: LD_ADDR_VAR 0 3
42053: PUSH
42054: LD_INT 21
42056: PUSH
42057: LD_INT 22
42059: PUSH
42060: LD_INT 23
42062: PUSH
42063: LD_INT 24
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: ST_TO_ADDR
42072: GO 42289
42074: LD_INT 45
42076: DOUBLE
42077: EQUAL
42078: IFTRUE 42082
42080: GO 42108
42082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42083: LD_ADDR_VAR 0 3
42087: PUSH
42088: LD_INT 21
42090: PUSH
42091: LD_INT 22
42093: PUSH
42094: LD_INT 23
42096: PUSH
42097: LD_INT 24
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: ST_TO_ADDR
42106: GO 42289
42108: LD_INT 49
42110: DOUBLE
42111: EQUAL
42112: IFTRUE 42116
42114: GO 42142
42116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42117: LD_ADDR_VAR 0 3
42121: PUSH
42122: LD_INT 21
42124: PUSH
42125: LD_INT 22
42127: PUSH
42128: LD_INT 23
42130: PUSH
42131: LD_INT 24
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
42140: GO 42289
42142: LD_INT 51
42144: DOUBLE
42145: EQUAL
42146: IFTRUE 42150
42148: GO 42176
42150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42151: LD_ADDR_VAR 0 3
42155: PUSH
42156: LD_INT 21
42158: PUSH
42159: LD_INT 22
42161: PUSH
42162: LD_INT 23
42164: PUSH
42165: LD_INT 24
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
42174: GO 42289
42176: LD_INT 52
42178: DOUBLE
42179: EQUAL
42180: IFTRUE 42184
42182: GO 42210
42184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42185: LD_ADDR_VAR 0 3
42189: PUSH
42190: LD_INT 21
42192: PUSH
42193: LD_INT 22
42195: PUSH
42196: LD_INT 23
42198: PUSH
42199: LD_INT 24
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: ST_TO_ADDR
42208: GO 42289
42210: LD_INT 53
42212: DOUBLE
42213: EQUAL
42214: IFTRUE 42218
42216: GO 42236
42218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_INT 23
42226: PUSH
42227: LD_INT 24
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: ST_TO_ADDR
42234: GO 42289
42236: LD_INT 46
42238: DOUBLE
42239: EQUAL
42240: IFTRUE 42244
42242: GO 42262
42244: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42245: LD_ADDR_VAR 0 3
42249: PUSH
42250: LD_INT 23
42252: PUSH
42253: LD_INT 24
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: ST_TO_ADDR
42260: GO 42289
42262: LD_INT 47
42264: DOUBLE
42265: EQUAL
42266: IFTRUE 42270
42268: GO 42288
42270: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42271: LD_ADDR_VAR 0 3
42275: PUSH
42276: LD_INT 23
42278: PUSH
42279: LD_INT 24
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: ST_TO_ADDR
42286: GO 42289
42288: POP
// result := ( chassis in result ) ;
42289: LD_ADDR_VAR 0 3
42293: PUSH
42294: LD_VAR 0 1
42298: PUSH
42299: LD_VAR 0 3
42303: IN
42304: ST_TO_ADDR
// end ;
42305: LD_VAR 0 3
42309: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42310: LD_INT 0
42312: PPUSH
42313: PPUSH
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
42318: PPUSH
// result := array ;
42319: LD_ADDR_VAR 0 5
42323: PUSH
42324: LD_VAR 0 1
42328: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42329: LD_VAR 0 1
42333: NOT
42334: PUSH
42335: LD_VAR 0 2
42339: NOT
42340: OR
42341: PUSH
42342: LD_VAR 0 3
42346: NOT
42347: OR
42348: PUSH
42349: LD_VAR 0 2
42353: PUSH
42354: LD_VAR 0 1
42358: GREATER
42359: OR
42360: PUSH
42361: LD_VAR 0 3
42365: PUSH
42366: LD_VAR 0 1
42370: GREATER
42371: OR
42372: IFFALSE 42376
// exit ;
42374: GO 42672
// if direction then
42376: LD_VAR 0 4
42380: IFFALSE 42444
// begin d := 1 ;
42382: LD_ADDR_VAR 0 9
42386: PUSH
42387: LD_INT 1
42389: ST_TO_ADDR
// if i_from > i_to then
42390: LD_VAR 0 2
42394: PUSH
42395: LD_VAR 0 3
42399: GREATER
42400: IFFALSE 42426
// length := ( array - i_from ) + i_to else
42402: LD_ADDR_VAR 0 11
42406: PUSH
42407: LD_VAR 0 1
42411: PUSH
42412: LD_VAR 0 2
42416: MINUS
42417: PUSH
42418: LD_VAR 0 3
42422: PLUS
42423: ST_TO_ADDR
42424: GO 42442
// length := i_to - i_from ;
42426: LD_ADDR_VAR 0 11
42430: PUSH
42431: LD_VAR 0 3
42435: PUSH
42436: LD_VAR 0 2
42440: MINUS
42441: ST_TO_ADDR
// end else
42442: GO 42505
// begin d := - 1 ;
42444: LD_ADDR_VAR 0 9
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: ST_TO_ADDR
// if i_from > i_to then
42453: LD_VAR 0 2
42457: PUSH
42458: LD_VAR 0 3
42462: GREATER
42463: IFFALSE 42483
// length := i_from - i_to else
42465: LD_ADDR_VAR 0 11
42469: PUSH
42470: LD_VAR 0 2
42474: PUSH
42475: LD_VAR 0 3
42479: MINUS
42480: ST_TO_ADDR
42481: GO 42505
// length := ( array - i_to ) + i_from ;
42483: LD_ADDR_VAR 0 11
42487: PUSH
42488: LD_VAR 0 1
42492: PUSH
42493: LD_VAR 0 3
42497: MINUS
42498: PUSH
42499: LD_VAR 0 2
42503: PLUS
42504: ST_TO_ADDR
// end ; if not length then
42505: LD_VAR 0 11
42509: NOT
42510: IFFALSE 42514
// exit ;
42512: GO 42672
// tmp := array ;
42514: LD_ADDR_VAR 0 10
42518: PUSH
42519: LD_VAR 0 1
42523: ST_TO_ADDR
// for i = 1 to length do
42524: LD_ADDR_VAR 0 6
42528: PUSH
42529: DOUBLE
42530: LD_INT 1
42532: DEC
42533: ST_TO_ADDR
42534: LD_VAR 0 11
42538: PUSH
42539: FOR_TO
42540: IFFALSE 42660
// begin for j = 1 to array do
42542: LD_ADDR_VAR 0 7
42546: PUSH
42547: DOUBLE
42548: LD_INT 1
42550: DEC
42551: ST_TO_ADDR
42552: LD_VAR 0 1
42556: PUSH
42557: FOR_TO
42558: IFFALSE 42646
// begin k := j + d ;
42560: LD_ADDR_VAR 0 8
42564: PUSH
42565: LD_VAR 0 7
42569: PUSH
42570: LD_VAR 0 9
42574: PLUS
42575: ST_TO_ADDR
// if k > array then
42576: LD_VAR 0 8
42580: PUSH
42581: LD_VAR 0 1
42585: GREATER
42586: IFFALSE 42596
// k := 1 ;
42588: LD_ADDR_VAR 0 8
42592: PUSH
42593: LD_INT 1
42595: ST_TO_ADDR
// if not k then
42596: LD_VAR 0 8
42600: NOT
42601: IFFALSE 42613
// k := array ;
42603: LD_ADDR_VAR 0 8
42607: PUSH
42608: LD_VAR 0 1
42612: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42613: LD_ADDR_VAR 0 10
42617: PUSH
42618: LD_VAR 0 10
42622: PPUSH
42623: LD_VAR 0 8
42627: PPUSH
42628: LD_VAR 0 1
42632: PUSH
42633: LD_VAR 0 7
42637: ARRAY
42638: PPUSH
42639: CALL_OW 1
42643: ST_TO_ADDR
// end ;
42644: GO 42557
42646: POP
42647: POP
// array := tmp ;
42648: LD_ADDR_VAR 0 1
42652: PUSH
42653: LD_VAR 0 10
42657: ST_TO_ADDR
// end ;
42658: GO 42539
42660: POP
42661: POP
// result := array ;
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: LD_VAR 0 1
42671: ST_TO_ADDR
// end ;
42672: LD_VAR 0 5
42676: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42677: LD_INT 0
42679: PPUSH
42680: PPUSH
// result := 0 ;
42681: LD_ADDR_VAR 0 3
42685: PUSH
42686: LD_INT 0
42688: ST_TO_ADDR
// if not array or not value in array then
42689: LD_VAR 0 1
42693: NOT
42694: PUSH
42695: LD_VAR 0 2
42699: PUSH
42700: LD_VAR 0 1
42704: IN
42705: NOT
42706: OR
42707: IFFALSE 42711
// exit ;
42709: GO 42765
// for i = 1 to array do
42711: LD_ADDR_VAR 0 4
42715: PUSH
42716: DOUBLE
42717: LD_INT 1
42719: DEC
42720: ST_TO_ADDR
42721: LD_VAR 0 1
42725: PUSH
42726: FOR_TO
42727: IFFALSE 42763
// if value = array [ i ] then
42729: LD_VAR 0 2
42733: PUSH
42734: LD_VAR 0 1
42738: PUSH
42739: LD_VAR 0 4
42743: ARRAY
42744: EQUAL
42745: IFFALSE 42761
// begin result := i ;
42747: LD_ADDR_VAR 0 3
42751: PUSH
42752: LD_VAR 0 4
42756: ST_TO_ADDR
// exit ;
42757: POP
42758: POP
42759: GO 42765
// end ;
42761: GO 42726
42763: POP
42764: POP
// end ;
42765: LD_VAR 0 3
42769: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42770: LD_INT 0
42772: PPUSH
// vc_chassis := chassis ;
42773: LD_ADDR_OWVAR 37
42777: PUSH
42778: LD_VAR 0 1
42782: ST_TO_ADDR
// vc_engine := engine ;
42783: LD_ADDR_OWVAR 39
42787: PUSH
42788: LD_VAR 0 2
42792: ST_TO_ADDR
// vc_control := control ;
42793: LD_ADDR_OWVAR 38
42797: PUSH
42798: LD_VAR 0 3
42802: ST_TO_ADDR
// vc_weapon := weapon ;
42803: LD_ADDR_OWVAR 40
42807: PUSH
42808: LD_VAR 0 4
42812: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42813: LD_ADDR_OWVAR 41
42817: PUSH
42818: LD_VAR 0 5
42822: ST_TO_ADDR
// end ;
42823: LD_VAR 0 6
42827: RET
// export function WantPlant ( unit ) ; var task ; begin
42828: LD_INT 0
42830: PPUSH
42831: PPUSH
// result := false ;
42832: LD_ADDR_VAR 0 2
42836: PUSH
42837: LD_INT 0
42839: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42840: LD_ADDR_VAR 0 3
42844: PUSH
42845: LD_VAR 0 1
42849: PPUSH
42850: CALL_OW 437
42854: ST_TO_ADDR
// if task then
42855: LD_VAR 0 3
42859: IFFALSE 42887
// if task [ 1 ] [ 1 ] = p then
42861: LD_VAR 0 3
42865: PUSH
42866: LD_INT 1
42868: ARRAY
42869: PUSH
42870: LD_INT 1
42872: ARRAY
42873: PUSH
42874: LD_STRING p
42876: EQUAL
42877: IFFALSE 42887
// result := true ;
42879: LD_ADDR_VAR 0 2
42883: PUSH
42884: LD_INT 1
42886: ST_TO_ADDR
// end ;
42887: LD_VAR 0 2
42891: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42892: LD_INT 0
42894: PPUSH
42895: PPUSH
42896: PPUSH
42897: PPUSH
// if pos < 1 then
42898: LD_VAR 0 2
42902: PUSH
42903: LD_INT 1
42905: LESS
42906: IFFALSE 42910
// exit ;
42908: GO 43213
// if pos = 1 then
42910: LD_VAR 0 2
42914: PUSH
42915: LD_INT 1
42917: EQUAL
42918: IFFALSE 42951
// result := Replace ( arr , pos [ 1 ] , value ) else
42920: LD_ADDR_VAR 0 4
42924: PUSH
42925: LD_VAR 0 1
42929: PPUSH
42930: LD_VAR 0 2
42934: PUSH
42935: LD_INT 1
42937: ARRAY
42938: PPUSH
42939: LD_VAR 0 3
42943: PPUSH
42944: CALL_OW 1
42948: ST_TO_ADDR
42949: GO 43213
// begin tmp := arr ;
42951: LD_ADDR_VAR 0 6
42955: PUSH
42956: LD_VAR 0 1
42960: ST_TO_ADDR
// s_arr := [ tmp ] ;
42961: LD_ADDR_VAR 0 7
42965: PUSH
42966: LD_VAR 0 6
42970: PUSH
42971: EMPTY
42972: LIST
42973: ST_TO_ADDR
// for i = 1 to pos - 1 do
42974: LD_ADDR_VAR 0 5
42978: PUSH
42979: DOUBLE
42980: LD_INT 1
42982: DEC
42983: ST_TO_ADDR
42984: LD_VAR 0 2
42988: PUSH
42989: LD_INT 1
42991: MINUS
42992: PUSH
42993: FOR_TO
42994: IFFALSE 43039
// begin tmp := tmp [ pos [ i ] ] ;
42996: LD_ADDR_VAR 0 6
43000: PUSH
43001: LD_VAR 0 6
43005: PUSH
43006: LD_VAR 0 2
43010: PUSH
43011: LD_VAR 0 5
43015: ARRAY
43016: ARRAY
43017: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43018: LD_ADDR_VAR 0 7
43022: PUSH
43023: LD_VAR 0 7
43027: PUSH
43028: LD_VAR 0 6
43032: PUSH
43033: EMPTY
43034: LIST
43035: ADD
43036: ST_TO_ADDR
// end ;
43037: GO 42993
43039: POP
43040: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43041: LD_ADDR_VAR 0 6
43045: PUSH
43046: LD_VAR 0 6
43050: PPUSH
43051: LD_VAR 0 2
43055: PUSH
43056: LD_VAR 0 2
43060: ARRAY
43061: PPUSH
43062: LD_VAR 0 3
43066: PPUSH
43067: CALL_OW 1
43071: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43072: LD_ADDR_VAR 0 7
43076: PUSH
43077: LD_VAR 0 7
43081: PPUSH
43082: LD_VAR 0 7
43086: PPUSH
43087: LD_VAR 0 6
43091: PPUSH
43092: CALL_OW 1
43096: ST_TO_ADDR
// for i = s_arr downto 2 do
43097: LD_ADDR_VAR 0 5
43101: PUSH
43102: DOUBLE
43103: LD_VAR 0 7
43107: INC
43108: ST_TO_ADDR
43109: LD_INT 2
43111: PUSH
43112: FOR_DOWNTO
43113: IFFALSE 43197
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43115: LD_ADDR_VAR 0 6
43119: PUSH
43120: LD_VAR 0 7
43124: PUSH
43125: LD_VAR 0 5
43129: PUSH
43130: LD_INT 1
43132: MINUS
43133: ARRAY
43134: PPUSH
43135: LD_VAR 0 2
43139: PUSH
43140: LD_VAR 0 5
43144: PUSH
43145: LD_INT 1
43147: MINUS
43148: ARRAY
43149: PPUSH
43150: LD_VAR 0 7
43154: PUSH
43155: LD_VAR 0 5
43159: ARRAY
43160: PPUSH
43161: CALL_OW 1
43165: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43166: LD_ADDR_VAR 0 7
43170: PUSH
43171: LD_VAR 0 7
43175: PPUSH
43176: LD_VAR 0 5
43180: PUSH
43181: LD_INT 1
43183: MINUS
43184: PPUSH
43185: LD_VAR 0 6
43189: PPUSH
43190: CALL_OW 1
43194: ST_TO_ADDR
// end ;
43195: GO 43112
43197: POP
43198: POP
// result := s_arr [ 1 ] ;
43199: LD_ADDR_VAR 0 4
43203: PUSH
43204: LD_VAR 0 7
43208: PUSH
43209: LD_INT 1
43211: ARRAY
43212: ST_TO_ADDR
// end ; end ;
43213: LD_VAR 0 4
43217: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43218: LD_INT 0
43220: PPUSH
43221: PPUSH
// if not list then
43222: LD_VAR 0 1
43226: NOT
43227: IFFALSE 43231
// exit ;
43229: GO 43322
// i := list [ pos1 ] ;
43231: LD_ADDR_VAR 0 5
43235: PUSH
43236: LD_VAR 0 1
43240: PUSH
43241: LD_VAR 0 2
43245: ARRAY
43246: ST_TO_ADDR
// if not i then
43247: LD_VAR 0 5
43251: NOT
43252: IFFALSE 43256
// exit ;
43254: GO 43322
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43256: LD_ADDR_VAR 0 1
43260: PUSH
43261: LD_VAR 0 1
43265: PPUSH
43266: LD_VAR 0 2
43270: PPUSH
43271: LD_VAR 0 1
43275: PUSH
43276: LD_VAR 0 3
43280: ARRAY
43281: PPUSH
43282: CALL_OW 1
43286: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43287: LD_ADDR_VAR 0 1
43291: PUSH
43292: LD_VAR 0 1
43296: PPUSH
43297: LD_VAR 0 3
43301: PPUSH
43302: LD_VAR 0 5
43306: PPUSH
43307: CALL_OW 1
43311: ST_TO_ADDR
// result := list ;
43312: LD_ADDR_VAR 0 4
43316: PUSH
43317: LD_VAR 0 1
43321: ST_TO_ADDR
// end ;
43322: LD_VAR 0 4
43326: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43327: LD_INT 0
43329: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43330: LD_ADDR_VAR 0 5
43334: PUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: CALL_OW 250
43344: PPUSH
43345: LD_VAR 0 1
43349: PPUSH
43350: CALL_OW 251
43354: PPUSH
43355: LD_VAR 0 2
43359: PPUSH
43360: LD_VAR 0 3
43364: PPUSH
43365: LD_VAR 0 4
43369: PPUSH
43370: CALL 43380 0 5
43374: ST_TO_ADDR
// end ;
43375: LD_VAR 0 5
43379: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43380: LD_INT 0
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
// if not list then
43386: LD_VAR 0 3
43390: NOT
43391: IFFALSE 43395
// exit ;
43393: GO 43783
// result := [ ] ;
43395: LD_ADDR_VAR 0 6
43399: PUSH
43400: EMPTY
43401: ST_TO_ADDR
// for i in list do
43402: LD_ADDR_VAR 0 7
43406: PUSH
43407: LD_VAR 0 3
43411: PUSH
43412: FOR_IN
43413: IFFALSE 43615
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43415: LD_ADDR_VAR 0 9
43419: PUSH
43420: LD_VAR 0 7
43424: PPUSH
43425: LD_VAR 0 1
43429: PPUSH
43430: LD_VAR 0 2
43434: PPUSH
43435: CALL_OW 297
43439: ST_TO_ADDR
// if not result then
43440: LD_VAR 0 6
43444: NOT
43445: IFFALSE 43471
// result := [ [ i , tmp ] ] else
43447: LD_ADDR_VAR 0 6
43451: PUSH
43452: LD_VAR 0 7
43456: PUSH
43457: LD_VAR 0 9
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: ST_TO_ADDR
43469: GO 43613
// begin if result [ result ] [ 2 ] < tmp then
43471: LD_VAR 0 6
43475: PUSH
43476: LD_VAR 0 6
43480: ARRAY
43481: PUSH
43482: LD_INT 2
43484: ARRAY
43485: PUSH
43486: LD_VAR 0 9
43490: LESS
43491: IFFALSE 43533
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43493: LD_ADDR_VAR 0 6
43497: PUSH
43498: LD_VAR 0 6
43502: PPUSH
43503: LD_VAR 0 6
43507: PUSH
43508: LD_INT 1
43510: PLUS
43511: PPUSH
43512: LD_VAR 0 7
43516: PUSH
43517: LD_VAR 0 9
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PPUSH
43526: CALL_OW 2
43530: ST_TO_ADDR
43531: GO 43613
// for j = 1 to result do
43533: LD_ADDR_VAR 0 8
43537: PUSH
43538: DOUBLE
43539: LD_INT 1
43541: DEC
43542: ST_TO_ADDR
43543: LD_VAR 0 6
43547: PUSH
43548: FOR_TO
43549: IFFALSE 43611
// begin if tmp < result [ j ] [ 2 ] then
43551: LD_VAR 0 9
43555: PUSH
43556: LD_VAR 0 6
43560: PUSH
43561: LD_VAR 0 8
43565: ARRAY
43566: PUSH
43567: LD_INT 2
43569: ARRAY
43570: LESS
43571: IFFALSE 43609
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43573: LD_ADDR_VAR 0 6
43577: PUSH
43578: LD_VAR 0 6
43582: PPUSH
43583: LD_VAR 0 8
43587: PPUSH
43588: LD_VAR 0 7
43592: PUSH
43593: LD_VAR 0 9
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PPUSH
43602: CALL_OW 2
43606: ST_TO_ADDR
// break ;
43607: GO 43611
// end ; end ;
43609: GO 43548
43611: POP
43612: POP
// end ; end ;
43613: GO 43412
43615: POP
43616: POP
// if result and not asc then
43617: LD_VAR 0 6
43621: PUSH
43622: LD_VAR 0 4
43626: NOT
43627: AND
43628: IFFALSE 43703
// begin tmp := result ;
43630: LD_ADDR_VAR 0 9
43634: PUSH
43635: LD_VAR 0 6
43639: ST_TO_ADDR
// for i = tmp downto 1 do
43640: LD_ADDR_VAR 0 7
43644: PUSH
43645: DOUBLE
43646: LD_VAR 0 9
43650: INC
43651: ST_TO_ADDR
43652: LD_INT 1
43654: PUSH
43655: FOR_DOWNTO
43656: IFFALSE 43701
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43658: LD_ADDR_VAR 0 6
43662: PUSH
43663: LD_VAR 0 6
43667: PPUSH
43668: LD_VAR 0 9
43672: PUSH
43673: LD_VAR 0 7
43677: MINUS
43678: PUSH
43679: LD_INT 1
43681: PLUS
43682: PPUSH
43683: LD_VAR 0 9
43687: PUSH
43688: LD_VAR 0 7
43692: ARRAY
43693: PPUSH
43694: CALL_OW 1
43698: ST_TO_ADDR
43699: GO 43655
43701: POP
43702: POP
// end ; tmp := [ ] ;
43703: LD_ADDR_VAR 0 9
43707: PUSH
43708: EMPTY
43709: ST_TO_ADDR
// if mode then
43710: LD_VAR 0 5
43714: IFFALSE 43783
// begin for i = 1 to result do
43716: LD_ADDR_VAR 0 7
43720: PUSH
43721: DOUBLE
43722: LD_INT 1
43724: DEC
43725: ST_TO_ADDR
43726: LD_VAR 0 6
43730: PUSH
43731: FOR_TO
43732: IFFALSE 43771
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43734: LD_ADDR_VAR 0 9
43738: PUSH
43739: LD_VAR 0 9
43743: PPUSH
43744: LD_VAR 0 7
43748: PPUSH
43749: LD_VAR 0 6
43753: PUSH
43754: LD_VAR 0 7
43758: ARRAY
43759: PUSH
43760: LD_INT 1
43762: ARRAY
43763: PPUSH
43764: CALL_OW 1
43768: ST_TO_ADDR
43769: GO 43731
43771: POP
43772: POP
// result := tmp ;
43773: LD_ADDR_VAR 0 6
43777: PUSH
43778: LD_VAR 0 9
43782: ST_TO_ADDR
// end ; end ;
43783: LD_VAR 0 6
43787: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43788: LD_INT 0
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43796: LD_ADDR_VAR 0 5
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// if not x or not y then
43818: LD_VAR 0 2
43822: NOT
43823: PUSH
43824: LD_VAR 0 3
43828: NOT
43829: OR
43830: IFFALSE 43834
// exit ;
43832: GO 45486
// if not range then
43834: LD_VAR 0 4
43838: NOT
43839: IFFALSE 43849
// range := 10 ;
43841: LD_ADDR_VAR 0 4
43845: PUSH
43846: LD_INT 10
43848: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43849: LD_ADDR_VAR 0 8
43853: PUSH
43854: LD_INT 81
43856: PUSH
43857: LD_VAR 0 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 92
43868: PUSH
43869: LD_VAR 0 2
43873: PUSH
43874: LD_VAR 0 3
43878: PUSH
43879: LD_VAR 0 4
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 3
43892: PUSH
43893: LD_INT 21
43895: PUSH
43896: LD_INT 3
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: PPUSH
43912: CALL_OW 69
43916: ST_TO_ADDR
// if not tmp then
43917: LD_VAR 0 8
43921: NOT
43922: IFFALSE 43926
// exit ;
43924: GO 45486
// for i in tmp do
43926: LD_ADDR_VAR 0 6
43930: PUSH
43931: LD_VAR 0 8
43935: PUSH
43936: FOR_IN
43937: IFFALSE 45461
// begin points := [ 0 , 0 , 0 ] ;
43939: LD_ADDR_VAR 0 9
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: ST_TO_ADDR
// bpoints := 1 ;
43958: LD_ADDR_VAR 0 10
43962: PUSH
43963: LD_INT 1
43965: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43966: LD_VAR 0 6
43970: PPUSH
43971: CALL_OW 247
43975: PUSH
43976: LD_INT 1
43978: DOUBLE
43979: EQUAL
43980: IFTRUE 43984
43982: GO 44562
43984: POP
// begin if GetClass ( i ) = 1 then
43985: LD_VAR 0 6
43989: PPUSH
43990: CALL_OW 257
43994: PUSH
43995: LD_INT 1
43997: EQUAL
43998: IFFALSE 44019
// points := [ 10 , 5 , 3 ] ;
44000: LD_ADDR_VAR 0 9
44004: PUSH
44005: LD_INT 10
44007: PUSH
44008: LD_INT 5
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44019: LD_VAR 0 6
44023: PPUSH
44024: CALL_OW 257
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 3
44034: PUSH
44035: LD_INT 4
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: IN
44043: IFFALSE 44064
// points := [ 3 , 2 , 1 ] ;
44045: LD_ADDR_VAR 0 9
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44064: LD_VAR 0 6
44068: PPUSH
44069: CALL_OW 257
44073: PUSH
44074: LD_INT 5
44076: EQUAL
44077: IFFALSE 44098
// points := [ 130 , 5 , 2 ] ;
44079: LD_ADDR_VAR 0 9
44083: PUSH
44084: LD_INT 130
44086: PUSH
44087: LD_INT 5
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44098: LD_VAR 0 6
44102: PPUSH
44103: CALL_OW 257
44107: PUSH
44108: LD_INT 8
44110: EQUAL
44111: IFFALSE 44132
// points := [ 35 , 35 , 30 ] ;
44113: LD_ADDR_VAR 0 9
44117: PUSH
44118: LD_INT 35
44120: PUSH
44121: LD_INT 35
44123: PUSH
44124: LD_INT 30
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44132: LD_VAR 0 6
44136: PPUSH
44137: CALL_OW 257
44141: PUSH
44142: LD_INT 9
44144: EQUAL
44145: IFFALSE 44166
// points := [ 20 , 55 , 40 ] ;
44147: LD_ADDR_VAR 0 9
44151: PUSH
44152: LD_INT 20
44154: PUSH
44155: LD_INT 55
44157: PUSH
44158: LD_INT 40
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44166: LD_VAR 0 6
44170: PPUSH
44171: CALL_OW 257
44175: PUSH
44176: LD_INT 12
44178: PUSH
44179: LD_INT 16
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: IN
44186: IFFALSE 44207
// points := [ 5 , 3 , 2 ] ;
44188: LD_ADDR_VAR 0 9
44192: PUSH
44193: LD_INT 5
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44207: LD_VAR 0 6
44211: PPUSH
44212: CALL_OW 257
44216: PUSH
44217: LD_INT 17
44219: EQUAL
44220: IFFALSE 44241
// points := [ 100 , 50 , 75 ] ;
44222: LD_ADDR_VAR 0 9
44226: PUSH
44227: LD_INT 100
44229: PUSH
44230: LD_INT 50
44232: PUSH
44233: LD_INT 75
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44241: LD_VAR 0 6
44245: PPUSH
44246: CALL_OW 257
44250: PUSH
44251: LD_INT 15
44253: EQUAL
44254: IFFALSE 44275
// points := [ 10 , 5 , 3 ] ;
44256: LD_ADDR_VAR 0 9
44260: PUSH
44261: LD_INT 10
44263: PUSH
44264: LD_INT 5
44266: PUSH
44267: LD_INT 3
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: LIST
44274: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44275: LD_VAR 0 6
44279: PPUSH
44280: CALL_OW 257
44284: PUSH
44285: LD_INT 14
44287: EQUAL
44288: IFFALSE 44309
// points := [ 10 , 0 , 0 ] ;
44290: LD_ADDR_VAR 0 9
44294: PUSH
44295: LD_INT 10
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: LIST
44308: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44309: LD_VAR 0 6
44313: PPUSH
44314: CALL_OW 257
44318: PUSH
44319: LD_INT 11
44321: EQUAL
44322: IFFALSE 44343
// points := [ 30 , 10 , 5 ] ;
44324: LD_ADDR_VAR 0 9
44328: PUSH
44329: LD_INT 30
44331: PUSH
44332: LD_INT 10
44334: PUSH
44335: LD_INT 5
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44343: LD_VAR 0 1
44347: PPUSH
44348: LD_INT 5
44350: PPUSH
44351: CALL_OW 321
44355: PUSH
44356: LD_INT 2
44358: EQUAL
44359: IFFALSE 44376
// bpoints := bpoints * 1.8 ;
44361: LD_ADDR_VAR 0 10
44365: PUSH
44366: LD_VAR 0 10
44370: PUSH
44371: LD_REAL  1.80000000000000E+0000
44374: MUL
44375: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44376: LD_VAR 0 6
44380: PPUSH
44381: CALL_OW 257
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 3
44394: PUSH
44395: LD_INT 4
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: IN
44404: PUSH
44405: LD_VAR 0 1
44409: PPUSH
44410: LD_INT 51
44412: PPUSH
44413: CALL_OW 321
44417: PUSH
44418: LD_INT 2
44420: EQUAL
44421: AND
44422: IFFALSE 44439
// bpoints := bpoints * 1.2 ;
44424: LD_ADDR_VAR 0 10
44428: PUSH
44429: LD_VAR 0 10
44433: PUSH
44434: LD_REAL  1.20000000000000E+0000
44437: MUL
44438: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44439: LD_VAR 0 6
44443: PPUSH
44444: CALL_OW 257
44448: PUSH
44449: LD_INT 5
44451: PUSH
44452: LD_INT 7
44454: PUSH
44455: LD_INT 9
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: IN
44463: PUSH
44464: LD_VAR 0 1
44468: PPUSH
44469: LD_INT 52
44471: PPUSH
44472: CALL_OW 321
44476: PUSH
44477: LD_INT 2
44479: EQUAL
44480: AND
44481: IFFALSE 44498
// bpoints := bpoints * 1.5 ;
44483: LD_ADDR_VAR 0 10
44487: PUSH
44488: LD_VAR 0 10
44492: PUSH
44493: LD_REAL  1.50000000000000E+0000
44496: MUL
44497: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44498: LD_VAR 0 1
44502: PPUSH
44503: LD_INT 66
44505: PPUSH
44506: CALL_OW 321
44510: PUSH
44511: LD_INT 2
44513: EQUAL
44514: IFFALSE 44531
// bpoints := bpoints * 1.1 ;
44516: LD_ADDR_VAR 0 10
44520: PUSH
44521: LD_VAR 0 10
44525: PUSH
44526: LD_REAL  1.10000000000000E+0000
44529: MUL
44530: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44531: LD_ADDR_VAR 0 10
44535: PUSH
44536: LD_VAR 0 10
44540: PUSH
44541: LD_VAR 0 6
44545: PPUSH
44546: LD_INT 1
44548: PPUSH
44549: CALL_OW 259
44553: PUSH
44554: LD_REAL  1.15000000000000E+0000
44557: MUL
44558: MUL
44559: ST_TO_ADDR
// end ; unit_vehicle :
44560: GO 45390
44562: LD_INT 2
44564: DOUBLE
44565: EQUAL
44566: IFTRUE 44570
44568: GO 45378
44570: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44571: LD_VAR 0 6
44575: PPUSH
44576: CALL_OW 264
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: LD_INT 42
44586: PUSH
44587: LD_INT 24
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: IN
44595: IFFALSE 44616
// points := [ 25 , 5 , 3 ] ;
44597: LD_ADDR_VAR 0 9
44601: PUSH
44602: LD_INT 25
44604: PUSH
44605: LD_INT 5
44607: PUSH
44608: LD_INT 3
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44616: LD_VAR 0 6
44620: PPUSH
44621: CALL_OW 264
44625: PUSH
44626: LD_INT 4
44628: PUSH
44629: LD_INT 43
44631: PUSH
44632: LD_INT 25
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: IN
44640: IFFALSE 44661
// points := [ 40 , 15 , 5 ] ;
44642: LD_ADDR_VAR 0 9
44646: PUSH
44647: LD_INT 40
44649: PUSH
44650: LD_INT 15
44652: PUSH
44653: LD_INT 5
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44661: LD_VAR 0 6
44665: PPUSH
44666: CALL_OW 264
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: LD_INT 23
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: IN
44681: IFFALSE 44702
// points := [ 7 , 25 , 8 ] ;
44683: LD_ADDR_VAR 0 9
44687: PUSH
44688: LD_INT 7
44690: PUSH
44691: LD_INT 25
44693: PUSH
44694: LD_INT 8
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44702: LD_VAR 0 6
44706: PPUSH
44707: CALL_OW 264
44711: PUSH
44712: LD_INT 5
44714: PUSH
44715: LD_INT 27
44717: PUSH
44718: LD_INT 44
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: IN
44726: IFFALSE 44747
// points := [ 14 , 50 , 16 ] ;
44728: LD_ADDR_VAR 0 9
44732: PUSH
44733: LD_INT 14
44735: PUSH
44736: LD_INT 50
44738: PUSH
44739: LD_INT 16
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44747: LD_VAR 0 6
44751: PPUSH
44752: CALL_OW 264
44756: PUSH
44757: LD_INT 6
44759: PUSH
44760: LD_INT 46
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: IN
44767: IFFALSE 44788
// points := [ 32 , 120 , 70 ] ;
44769: LD_ADDR_VAR 0 9
44773: PUSH
44774: LD_INT 32
44776: PUSH
44777: LD_INT 120
44779: PUSH
44780: LD_INT 70
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44788: LD_VAR 0 6
44792: PPUSH
44793: CALL_OW 264
44797: PUSH
44798: LD_INT 7
44800: PUSH
44801: LD_INT 28
44803: PUSH
44804: LD_INT 45
44806: PUSH
44807: LD_EXP 140
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: IN
44818: IFFALSE 44839
// points := [ 35 , 20 , 45 ] ;
44820: LD_ADDR_VAR 0 9
44824: PUSH
44825: LD_INT 35
44827: PUSH
44828: LD_INT 20
44830: PUSH
44831: LD_INT 45
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: LIST
44838: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44839: LD_VAR 0 6
44843: PPUSH
44844: CALL_OW 264
44848: PUSH
44849: LD_INT 47
44851: PUSH
44852: EMPTY
44853: LIST
44854: IN
44855: IFFALSE 44876
// points := [ 67 , 45 , 75 ] ;
44857: LD_ADDR_VAR 0 9
44861: PUSH
44862: LD_INT 67
44864: PUSH
44865: LD_INT 45
44867: PUSH
44868: LD_INT 75
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44876: LD_VAR 0 6
44880: PPUSH
44881: CALL_OW 264
44885: PUSH
44886: LD_INT 26
44888: PUSH
44889: EMPTY
44890: LIST
44891: IN
44892: IFFALSE 44913
// points := [ 120 , 30 , 80 ] ;
44894: LD_ADDR_VAR 0 9
44898: PUSH
44899: LD_INT 120
44901: PUSH
44902: LD_INT 30
44904: PUSH
44905: LD_INT 80
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44913: LD_VAR 0 6
44917: PPUSH
44918: CALL_OW 264
44922: PUSH
44923: LD_INT 22
44925: PUSH
44926: EMPTY
44927: LIST
44928: IN
44929: IFFALSE 44950
// points := [ 40 , 1 , 1 ] ;
44931: LD_ADDR_VAR 0 9
44935: PUSH
44936: LD_INT 40
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44950: LD_VAR 0 6
44954: PPUSH
44955: CALL_OW 264
44959: PUSH
44960: LD_INT 29
44962: PUSH
44963: EMPTY
44964: LIST
44965: IN
44966: IFFALSE 44987
// points := [ 70 , 200 , 400 ] ;
44968: LD_ADDR_VAR 0 9
44972: PUSH
44973: LD_INT 70
44975: PUSH
44976: LD_INT 200
44978: PUSH
44979: LD_INT 400
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44987: LD_VAR 0 6
44991: PPUSH
44992: CALL_OW 264
44996: PUSH
44997: LD_INT 14
44999: PUSH
45000: LD_INT 53
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: IN
45007: IFFALSE 45028
// points := [ 40 , 10 , 20 ] ;
45009: LD_ADDR_VAR 0 9
45013: PUSH
45014: LD_INT 40
45016: PUSH
45017: LD_INT 10
45019: PUSH
45020: LD_INT 20
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45028: LD_VAR 0 6
45032: PPUSH
45033: CALL_OW 264
45037: PUSH
45038: LD_INT 9
45040: PUSH
45041: EMPTY
45042: LIST
45043: IN
45044: IFFALSE 45065
// points := [ 5 , 70 , 20 ] ;
45046: LD_ADDR_VAR 0 9
45050: PUSH
45051: LD_INT 5
45053: PUSH
45054: LD_INT 70
45056: PUSH
45057: LD_INT 20
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45065: LD_VAR 0 6
45069: PPUSH
45070: CALL_OW 264
45074: PUSH
45075: LD_INT 10
45077: PUSH
45078: EMPTY
45079: LIST
45080: IN
45081: IFFALSE 45102
// points := [ 35 , 110 , 70 ] ;
45083: LD_ADDR_VAR 0 9
45087: PUSH
45088: LD_INT 35
45090: PUSH
45091: LD_INT 110
45093: PUSH
45094: LD_INT 70
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45102: LD_VAR 0 6
45106: PPUSH
45107: CALL_OW 265
45111: PUSH
45112: LD_INT 25
45114: EQUAL
45115: IFFALSE 45136
// points := [ 80 , 65 , 100 ] ;
45117: LD_ADDR_VAR 0 9
45121: PUSH
45122: LD_INT 80
45124: PUSH
45125: LD_INT 65
45127: PUSH
45128: LD_INT 100
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45136: LD_VAR 0 6
45140: PPUSH
45141: CALL_OW 263
45145: PUSH
45146: LD_INT 1
45148: EQUAL
45149: IFFALSE 45184
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45151: LD_ADDR_VAR 0 10
45155: PUSH
45156: LD_VAR 0 10
45160: PUSH
45161: LD_VAR 0 6
45165: PPUSH
45166: CALL_OW 311
45170: PPUSH
45171: LD_INT 3
45173: PPUSH
45174: CALL_OW 259
45178: PUSH
45179: LD_INT 4
45181: MUL
45182: MUL
45183: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45184: LD_VAR 0 6
45188: PPUSH
45189: CALL_OW 263
45193: PUSH
45194: LD_INT 2
45196: EQUAL
45197: IFFALSE 45248
// begin j := IsControledBy ( i ) ;
45199: LD_ADDR_VAR 0 7
45203: PUSH
45204: LD_VAR 0 6
45208: PPUSH
45209: CALL_OW 312
45213: ST_TO_ADDR
// if j then
45214: LD_VAR 0 7
45218: IFFALSE 45248
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45220: LD_ADDR_VAR 0 10
45224: PUSH
45225: LD_VAR 0 10
45229: PUSH
45230: LD_VAR 0 7
45234: PPUSH
45235: LD_INT 3
45237: PPUSH
45238: CALL_OW 259
45242: PUSH
45243: LD_INT 3
45245: MUL
45246: MUL
45247: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45248: LD_VAR 0 6
45252: PPUSH
45253: CALL_OW 264
45257: PUSH
45258: LD_INT 5
45260: PUSH
45261: LD_INT 6
45263: PUSH
45264: LD_INT 46
45266: PUSH
45267: LD_INT 44
45269: PUSH
45270: LD_INT 47
45272: PUSH
45273: LD_INT 45
45275: PUSH
45276: LD_INT 28
45278: PUSH
45279: LD_INT 7
45281: PUSH
45282: LD_INT 27
45284: PUSH
45285: LD_INT 29
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: IN
45300: PUSH
45301: LD_VAR 0 1
45305: PPUSH
45306: LD_INT 52
45308: PPUSH
45309: CALL_OW 321
45313: PUSH
45314: LD_INT 2
45316: EQUAL
45317: AND
45318: IFFALSE 45335
// bpoints := bpoints * 1.2 ;
45320: LD_ADDR_VAR 0 10
45324: PUSH
45325: LD_VAR 0 10
45329: PUSH
45330: LD_REAL  1.20000000000000E+0000
45333: MUL
45334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45335: LD_VAR 0 6
45339: PPUSH
45340: CALL_OW 264
45344: PUSH
45345: LD_INT 6
45347: PUSH
45348: LD_INT 46
45350: PUSH
45351: LD_INT 47
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: IN
45359: IFFALSE 45376
// bpoints := bpoints * 1.2 ;
45361: LD_ADDR_VAR 0 10
45365: PUSH
45366: LD_VAR 0 10
45370: PUSH
45371: LD_REAL  1.20000000000000E+0000
45374: MUL
45375: ST_TO_ADDR
// end ; unit_building :
45376: GO 45390
45378: LD_INT 3
45380: DOUBLE
45381: EQUAL
45382: IFTRUE 45386
45384: GO 45389
45386: POP
// ; end ;
45387: GO 45390
45389: POP
// for j = 1 to 3 do
45390: LD_ADDR_VAR 0 7
45394: PUSH
45395: DOUBLE
45396: LD_INT 1
45398: DEC
45399: ST_TO_ADDR
45400: LD_INT 3
45402: PUSH
45403: FOR_TO
45404: IFFALSE 45457
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45406: LD_ADDR_VAR 0 5
45410: PUSH
45411: LD_VAR 0 5
45415: PPUSH
45416: LD_VAR 0 7
45420: PPUSH
45421: LD_VAR 0 5
45425: PUSH
45426: LD_VAR 0 7
45430: ARRAY
45431: PUSH
45432: LD_VAR 0 9
45436: PUSH
45437: LD_VAR 0 7
45441: ARRAY
45442: PUSH
45443: LD_VAR 0 10
45447: MUL
45448: PLUS
45449: PPUSH
45450: CALL_OW 1
45454: ST_TO_ADDR
45455: GO 45403
45457: POP
45458: POP
// end ;
45459: GO 43936
45461: POP
45462: POP
// result := Replace ( result , 4 , tmp ) ;
45463: LD_ADDR_VAR 0 5
45467: PUSH
45468: LD_VAR 0 5
45472: PPUSH
45473: LD_INT 4
45475: PPUSH
45476: LD_VAR 0 8
45480: PPUSH
45481: CALL_OW 1
45485: ST_TO_ADDR
// end ;
45486: LD_VAR 0 5
45490: RET
// export function DangerAtRange ( unit , range ) ; begin
45491: LD_INT 0
45493: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45494: LD_ADDR_VAR 0 3
45498: PUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: CALL_OW 255
45508: PPUSH
45509: LD_VAR 0 1
45513: PPUSH
45514: CALL_OW 250
45518: PPUSH
45519: LD_VAR 0 1
45523: PPUSH
45524: CALL_OW 251
45528: PPUSH
45529: LD_VAR 0 2
45533: PPUSH
45534: CALL 43788 0 4
45538: ST_TO_ADDR
// end ;
45539: LD_VAR 0 3
45543: RET
// export function DangerInArea ( side , area ) ; begin
45544: LD_INT 0
45546: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45547: LD_ADDR_VAR 0 3
45551: PUSH
45552: LD_VAR 0 2
45556: PPUSH
45557: LD_INT 81
45559: PUSH
45560: LD_VAR 0 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PPUSH
45569: CALL_OW 70
45573: ST_TO_ADDR
// end ;
45574: LD_VAR 0 3
45578: RET
// export function IsExtension ( b ) ; begin
45579: LD_INT 0
45581: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45582: LD_ADDR_VAR 0 2
45586: PUSH
45587: LD_VAR 0 1
45591: PUSH
45592: LD_INT 23
45594: PUSH
45595: LD_INT 20
45597: PUSH
45598: LD_INT 22
45600: PUSH
45601: LD_INT 17
45603: PUSH
45604: LD_INT 24
45606: PUSH
45607: LD_INT 21
45609: PUSH
45610: LD_INT 19
45612: PUSH
45613: LD_INT 16
45615: PUSH
45616: LD_INT 25
45618: PUSH
45619: LD_INT 18
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: IN
45634: ST_TO_ADDR
// end ;
45635: LD_VAR 0 2
45639: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45640: LD_INT 0
45642: PPUSH
45643: PPUSH
45644: PPUSH
// result := [ ] ;
45645: LD_ADDR_VAR 0 4
45649: PUSH
45650: EMPTY
45651: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45652: LD_ADDR_VAR 0 5
45656: PUSH
45657: LD_VAR 0 2
45661: PPUSH
45662: LD_INT 21
45664: PUSH
45665: LD_INT 3
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PPUSH
45672: CALL_OW 70
45676: ST_TO_ADDR
// if not tmp then
45677: LD_VAR 0 5
45681: NOT
45682: IFFALSE 45686
// exit ;
45684: GO 45750
// if checkLink then
45686: LD_VAR 0 3
45690: IFFALSE 45740
// begin for i in tmp do
45692: LD_ADDR_VAR 0 6
45696: PUSH
45697: LD_VAR 0 5
45701: PUSH
45702: FOR_IN
45703: IFFALSE 45738
// if GetBase ( i ) <> base then
45705: LD_VAR 0 6
45709: PPUSH
45710: CALL_OW 274
45714: PUSH
45715: LD_VAR 0 1
45719: NONEQUAL
45720: IFFALSE 45736
// ComLinkToBase ( base , i ) ;
45722: LD_VAR 0 1
45726: PPUSH
45727: LD_VAR 0 6
45731: PPUSH
45732: CALL_OW 169
45736: GO 45702
45738: POP
45739: POP
// end ; result := tmp ;
45740: LD_ADDR_VAR 0 4
45744: PUSH
45745: LD_VAR 0 5
45749: ST_TO_ADDR
// end ;
45750: LD_VAR 0 4
45754: RET
// export function ComComplete ( units , b ) ; var i ; begin
45755: LD_INT 0
45757: PPUSH
45758: PPUSH
// if not units then
45759: LD_VAR 0 1
45763: NOT
45764: IFFALSE 45768
// exit ;
45766: GO 45858
// for i in units do
45768: LD_ADDR_VAR 0 4
45772: PUSH
45773: LD_VAR 0 1
45777: PUSH
45778: FOR_IN
45779: IFFALSE 45856
// if BuildingStatus ( b ) = bs_build then
45781: LD_VAR 0 2
45785: PPUSH
45786: CALL_OW 461
45790: PUSH
45791: LD_INT 1
45793: EQUAL
45794: IFFALSE 45854
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45796: LD_VAR 0 4
45800: PPUSH
45801: LD_STRING h
45803: PUSH
45804: LD_VAR 0 2
45808: PPUSH
45809: CALL_OW 250
45813: PUSH
45814: LD_VAR 0 2
45818: PPUSH
45819: CALL_OW 251
45823: PUSH
45824: LD_VAR 0 2
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: PUSH
45847: EMPTY
45848: LIST
45849: PPUSH
45850: CALL_OW 446
45854: GO 45778
45856: POP
45857: POP
// end ;
45858: LD_VAR 0 3
45862: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45863: LD_INT 0
45865: PPUSH
45866: PPUSH
45867: PPUSH
45868: PPUSH
45869: PPUSH
45870: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45871: LD_VAR 0 1
45875: NOT
45876: PUSH
45877: LD_VAR 0 1
45881: PPUSH
45882: CALL_OW 263
45886: PUSH
45887: LD_INT 2
45889: NONEQUAL
45890: OR
45891: IFFALSE 45895
// exit ;
45893: GO 46211
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45895: LD_ADDR_VAR 0 6
45899: PUSH
45900: LD_INT 22
45902: PUSH
45903: LD_VAR 0 1
45907: PPUSH
45908: CALL_OW 255
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 30
45922: PUSH
45923: LD_INT 36
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 34
45932: PUSH
45933: LD_INT 31
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PPUSH
45949: CALL_OW 69
45953: ST_TO_ADDR
// if not tmp then
45954: LD_VAR 0 6
45958: NOT
45959: IFFALSE 45963
// exit ;
45961: GO 46211
// result := [ ] ;
45963: LD_ADDR_VAR 0 2
45967: PUSH
45968: EMPTY
45969: ST_TO_ADDR
// for i in tmp do
45970: LD_ADDR_VAR 0 3
45974: PUSH
45975: LD_VAR 0 6
45979: PUSH
45980: FOR_IN
45981: IFFALSE 46052
// begin t := UnitsInside ( i ) ;
45983: LD_ADDR_VAR 0 4
45987: PUSH
45988: LD_VAR 0 3
45992: PPUSH
45993: CALL_OW 313
45997: ST_TO_ADDR
// if t then
45998: LD_VAR 0 4
46002: IFFALSE 46050
// for j in t do
46004: LD_ADDR_VAR 0 7
46008: PUSH
46009: LD_VAR 0 4
46013: PUSH
46014: FOR_IN
46015: IFFALSE 46048
// result := Replace ( result , result + 1 , j ) ;
46017: LD_ADDR_VAR 0 2
46021: PUSH
46022: LD_VAR 0 2
46026: PPUSH
46027: LD_VAR 0 2
46031: PUSH
46032: LD_INT 1
46034: PLUS
46035: PPUSH
46036: LD_VAR 0 7
46040: PPUSH
46041: CALL_OW 1
46045: ST_TO_ADDR
46046: GO 46014
46048: POP
46049: POP
// end ;
46050: GO 45980
46052: POP
46053: POP
// if not result then
46054: LD_VAR 0 2
46058: NOT
46059: IFFALSE 46063
// exit ;
46061: GO 46211
// mech := result [ 1 ] ;
46063: LD_ADDR_VAR 0 5
46067: PUSH
46068: LD_VAR 0 2
46072: PUSH
46073: LD_INT 1
46075: ARRAY
46076: ST_TO_ADDR
// if result > 1 then
46077: LD_VAR 0 2
46081: PUSH
46082: LD_INT 1
46084: GREATER
46085: IFFALSE 46197
// begin for i = 2 to result do
46087: LD_ADDR_VAR 0 3
46091: PUSH
46092: DOUBLE
46093: LD_INT 2
46095: DEC
46096: ST_TO_ADDR
46097: LD_VAR 0 2
46101: PUSH
46102: FOR_TO
46103: IFFALSE 46195
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46105: LD_ADDR_VAR 0 4
46109: PUSH
46110: LD_VAR 0 2
46114: PUSH
46115: LD_VAR 0 3
46119: ARRAY
46120: PPUSH
46121: LD_INT 3
46123: PPUSH
46124: CALL_OW 259
46128: PUSH
46129: LD_VAR 0 2
46133: PUSH
46134: LD_VAR 0 3
46138: ARRAY
46139: PPUSH
46140: CALL_OW 432
46144: MINUS
46145: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46146: LD_VAR 0 4
46150: PUSH
46151: LD_VAR 0 5
46155: PPUSH
46156: LD_INT 3
46158: PPUSH
46159: CALL_OW 259
46163: PUSH
46164: LD_VAR 0 5
46168: PPUSH
46169: CALL_OW 432
46173: MINUS
46174: GREATEREQUAL
46175: IFFALSE 46193
// mech := result [ i ] ;
46177: LD_ADDR_VAR 0 5
46181: PUSH
46182: LD_VAR 0 2
46186: PUSH
46187: LD_VAR 0 3
46191: ARRAY
46192: ST_TO_ADDR
// end ;
46193: GO 46102
46195: POP
46196: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46197: LD_VAR 0 1
46201: PPUSH
46202: LD_VAR 0 5
46206: PPUSH
46207: CALL_OW 135
// end ;
46211: LD_VAR 0 2
46215: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46216: LD_INT 0
46218: PPUSH
46219: PPUSH
46220: PPUSH
46221: PPUSH
46222: PPUSH
46223: PPUSH
46224: PPUSH
46225: PPUSH
46226: PPUSH
46227: PPUSH
46228: PPUSH
46229: PPUSH
46230: PPUSH
// result := [ ] ;
46231: LD_ADDR_VAR 0 7
46235: PUSH
46236: EMPTY
46237: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46238: LD_VAR 0 1
46242: PPUSH
46243: CALL_OW 266
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: IN
46258: NOT
46259: IFFALSE 46263
// exit ;
46261: GO 47897
// if name then
46263: LD_VAR 0 3
46267: IFFALSE 46283
// SetBName ( base_dep , name ) ;
46269: LD_VAR 0 1
46273: PPUSH
46274: LD_VAR 0 3
46278: PPUSH
46279: CALL_OW 500
// base := GetBase ( base_dep ) ;
46283: LD_ADDR_VAR 0 15
46287: PUSH
46288: LD_VAR 0 1
46292: PPUSH
46293: CALL_OW 274
46297: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46298: LD_ADDR_VAR 0 16
46302: PUSH
46303: LD_VAR 0 1
46307: PPUSH
46308: CALL_OW 255
46312: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46313: LD_ADDR_VAR 0 17
46317: PUSH
46318: LD_VAR 0 1
46322: PPUSH
46323: CALL_OW 248
46327: ST_TO_ADDR
// if sources then
46328: LD_VAR 0 5
46332: IFFALSE 46379
// for i = 1 to 3 do
46334: LD_ADDR_VAR 0 8
46338: PUSH
46339: DOUBLE
46340: LD_INT 1
46342: DEC
46343: ST_TO_ADDR
46344: LD_INT 3
46346: PUSH
46347: FOR_TO
46348: IFFALSE 46377
// AddResourceType ( base , i , sources [ i ] ) ;
46350: LD_VAR 0 15
46354: PPUSH
46355: LD_VAR 0 8
46359: PPUSH
46360: LD_VAR 0 5
46364: PUSH
46365: LD_VAR 0 8
46369: ARRAY
46370: PPUSH
46371: CALL_OW 276
46375: GO 46347
46377: POP
46378: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46379: LD_ADDR_VAR 0 18
46383: PUSH
46384: LD_VAR 0 15
46388: PPUSH
46389: LD_VAR 0 2
46393: PPUSH
46394: LD_INT 1
46396: PPUSH
46397: CALL 45640 0 3
46401: ST_TO_ADDR
// InitHc ;
46402: CALL_OW 19
// InitUc ;
46406: CALL_OW 18
// uc_side := side ;
46410: LD_ADDR_OWVAR 20
46414: PUSH
46415: LD_VAR 0 16
46419: ST_TO_ADDR
// uc_nation := nation ;
46420: LD_ADDR_OWVAR 21
46424: PUSH
46425: LD_VAR 0 17
46429: ST_TO_ADDR
// if buildings then
46430: LD_VAR 0 18
46434: IFFALSE 47756
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46436: LD_ADDR_VAR 0 19
46440: PUSH
46441: LD_VAR 0 18
46445: PPUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 30
46451: PUSH
46452: LD_INT 29
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 30
46461: PUSH
46462: LD_INT 30
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: PPUSH
46474: CALL_OW 72
46478: ST_TO_ADDR
// if tmp then
46479: LD_VAR 0 19
46483: IFFALSE 46531
// for i in tmp do
46485: LD_ADDR_VAR 0 8
46489: PUSH
46490: LD_VAR 0 19
46494: PUSH
46495: FOR_IN
46496: IFFALSE 46529
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46498: LD_VAR 0 8
46502: PPUSH
46503: CALL_OW 250
46507: PPUSH
46508: LD_VAR 0 8
46512: PPUSH
46513: CALL_OW 251
46517: PPUSH
46518: LD_VAR 0 16
46522: PPUSH
46523: CALL_OW 441
46527: GO 46495
46529: POP
46530: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46531: LD_VAR 0 18
46535: PPUSH
46536: LD_INT 2
46538: PUSH
46539: LD_INT 30
46541: PUSH
46542: LD_INT 32
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 30
46551: PUSH
46552: LD_INT 33
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: PPUSH
46564: CALL_OW 72
46568: IFFALSE 46656
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46570: LD_ADDR_VAR 0 8
46574: PUSH
46575: LD_VAR 0 18
46579: PPUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 30
46585: PUSH
46586: LD_INT 32
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 30
46595: PUSH
46596: LD_INT 33
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: LIST
46607: PPUSH
46608: CALL_OW 72
46612: PUSH
46613: FOR_IN
46614: IFFALSE 46654
// begin if not GetBWeapon ( i ) then
46616: LD_VAR 0 8
46620: PPUSH
46621: CALL_OW 269
46625: NOT
46626: IFFALSE 46652
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46628: LD_VAR 0 8
46632: PPUSH
46633: LD_VAR 0 8
46637: PPUSH
46638: LD_VAR 0 2
46642: PPUSH
46643: CALL 47902 0 2
46647: PPUSH
46648: CALL_OW 431
// end ;
46652: GO 46613
46654: POP
46655: POP
// end ; for i = 1 to personel do
46656: LD_ADDR_VAR 0 8
46660: PUSH
46661: DOUBLE
46662: LD_INT 1
46664: DEC
46665: ST_TO_ADDR
46666: LD_VAR 0 6
46670: PUSH
46671: FOR_TO
46672: IFFALSE 47736
// begin if i > 4 then
46674: LD_VAR 0 8
46678: PUSH
46679: LD_INT 4
46681: GREATER
46682: IFFALSE 46686
// break ;
46684: GO 47736
// case i of 1 :
46686: LD_VAR 0 8
46690: PUSH
46691: LD_INT 1
46693: DOUBLE
46694: EQUAL
46695: IFTRUE 46699
46697: GO 46779
46699: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46700: LD_ADDR_VAR 0 12
46704: PUSH
46705: LD_VAR 0 18
46709: PPUSH
46710: LD_INT 22
46712: PUSH
46713: LD_VAR 0 16
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 58
46724: PUSH
46725: EMPTY
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 30
46733: PUSH
46734: LD_INT 32
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 30
46743: PUSH
46744: LD_INT 4
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 30
46753: PUSH
46754: LD_INT 5
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: PPUSH
46772: CALL_OW 72
46776: ST_TO_ADDR
46777: GO 47001
46779: LD_INT 2
46781: DOUBLE
46782: EQUAL
46783: IFTRUE 46787
46785: GO 46849
46787: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46788: LD_ADDR_VAR 0 12
46792: PUSH
46793: LD_VAR 0 18
46797: PPUSH
46798: LD_INT 22
46800: PUSH
46801: LD_VAR 0 16
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: LD_INT 30
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 30
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PPUSH
46842: CALL_OW 72
46846: ST_TO_ADDR
46847: GO 47001
46849: LD_INT 3
46851: DOUBLE
46852: EQUAL
46853: IFTRUE 46857
46855: GO 46919
46857: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46858: LD_ADDR_VAR 0 12
46862: PUSH
46863: LD_VAR 0 18
46867: PPUSH
46868: LD_INT 22
46870: PUSH
46871: LD_VAR 0 16
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 30
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 30
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PPUSH
46912: CALL_OW 72
46916: ST_TO_ADDR
46917: GO 47001
46919: LD_INT 4
46921: DOUBLE
46922: EQUAL
46923: IFTRUE 46927
46925: GO 47000
46927: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46928: LD_ADDR_VAR 0 12
46932: PUSH
46933: LD_VAR 0 18
46937: PPUSH
46938: LD_INT 22
46940: PUSH
46941: LD_VAR 0 16
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: LD_INT 30
46955: PUSH
46956: LD_INT 6
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 30
46965: PUSH
46966: LD_INT 7
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 30
46975: PUSH
46976: LD_INT 8
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PPUSH
46993: CALL_OW 72
46997: ST_TO_ADDR
46998: GO 47001
47000: POP
// if i = 1 then
47001: LD_VAR 0 8
47005: PUSH
47006: LD_INT 1
47008: EQUAL
47009: IFFALSE 47120
// begin tmp := [ ] ;
47011: LD_ADDR_VAR 0 19
47015: PUSH
47016: EMPTY
47017: ST_TO_ADDR
// for j in f do
47018: LD_ADDR_VAR 0 9
47022: PUSH
47023: LD_VAR 0 12
47027: PUSH
47028: FOR_IN
47029: IFFALSE 47102
// if GetBType ( j ) = b_bunker then
47031: LD_VAR 0 9
47035: PPUSH
47036: CALL_OW 266
47040: PUSH
47041: LD_INT 32
47043: EQUAL
47044: IFFALSE 47071
// tmp := Insert ( tmp , 1 , j ) else
47046: LD_ADDR_VAR 0 19
47050: PUSH
47051: LD_VAR 0 19
47055: PPUSH
47056: LD_INT 1
47058: PPUSH
47059: LD_VAR 0 9
47063: PPUSH
47064: CALL_OW 2
47068: ST_TO_ADDR
47069: GO 47100
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47071: LD_ADDR_VAR 0 19
47075: PUSH
47076: LD_VAR 0 19
47080: PPUSH
47081: LD_VAR 0 19
47085: PUSH
47086: LD_INT 1
47088: PLUS
47089: PPUSH
47090: LD_VAR 0 9
47094: PPUSH
47095: CALL_OW 2
47099: ST_TO_ADDR
47100: GO 47028
47102: POP
47103: POP
// if tmp then
47104: LD_VAR 0 19
47108: IFFALSE 47120
// f := tmp ;
47110: LD_ADDR_VAR 0 12
47114: PUSH
47115: LD_VAR 0 19
47119: ST_TO_ADDR
// end ; x := personel [ i ] ;
47120: LD_ADDR_VAR 0 13
47124: PUSH
47125: LD_VAR 0 6
47129: PUSH
47130: LD_VAR 0 8
47134: ARRAY
47135: ST_TO_ADDR
// if x = - 1 then
47136: LD_VAR 0 13
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: EQUAL
47145: IFFALSE 47354
// begin for j in f do
47147: LD_ADDR_VAR 0 9
47151: PUSH
47152: LD_VAR 0 12
47156: PUSH
47157: FOR_IN
47158: IFFALSE 47350
// repeat InitHc ;
47160: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47164: LD_VAR 0 9
47168: PPUSH
47169: CALL_OW 266
47173: PUSH
47174: LD_INT 5
47176: EQUAL
47177: IFFALSE 47247
// begin if UnitsInside ( j ) < 3 then
47179: LD_VAR 0 9
47183: PPUSH
47184: CALL_OW 313
47188: PUSH
47189: LD_INT 3
47191: LESS
47192: IFFALSE 47228
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47194: LD_INT 0
47196: PPUSH
47197: LD_INT 5
47199: PUSH
47200: LD_INT 8
47202: PUSH
47203: LD_INT 9
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: LIST
47210: PUSH
47211: LD_VAR 0 17
47215: ARRAY
47216: PPUSH
47217: LD_VAR 0 4
47221: PPUSH
47222: CALL_OW 380
47226: GO 47245
// PrepareHuman ( false , i , skill ) ;
47228: LD_INT 0
47230: PPUSH
47231: LD_VAR 0 8
47235: PPUSH
47236: LD_VAR 0 4
47240: PPUSH
47241: CALL_OW 380
// end else
47245: GO 47264
// PrepareHuman ( false , i , skill ) ;
47247: LD_INT 0
47249: PPUSH
47250: LD_VAR 0 8
47254: PPUSH
47255: LD_VAR 0 4
47259: PPUSH
47260: CALL_OW 380
// un := CreateHuman ;
47264: LD_ADDR_VAR 0 14
47268: PUSH
47269: CALL_OW 44
47273: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47274: LD_ADDR_VAR 0 7
47278: PUSH
47279: LD_VAR 0 7
47283: PPUSH
47284: LD_INT 1
47286: PPUSH
47287: LD_VAR 0 14
47291: PPUSH
47292: CALL_OW 2
47296: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47297: LD_VAR 0 14
47301: PPUSH
47302: LD_VAR 0 9
47306: PPUSH
47307: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47311: LD_VAR 0 9
47315: PPUSH
47316: CALL_OW 313
47320: PUSH
47321: LD_INT 6
47323: EQUAL
47324: PUSH
47325: LD_VAR 0 9
47329: PPUSH
47330: CALL_OW 266
47334: PUSH
47335: LD_INT 32
47337: PUSH
47338: LD_INT 31
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: IN
47345: OR
47346: IFFALSE 47160
47348: GO 47157
47350: POP
47351: POP
// end else
47352: GO 47734
// for j = 1 to x do
47354: LD_ADDR_VAR 0 9
47358: PUSH
47359: DOUBLE
47360: LD_INT 1
47362: DEC
47363: ST_TO_ADDR
47364: LD_VAR 0 13
47368: PUSH
47369: FOR_TO
47370: IFFALSE 47732
// begin InitHc ;
47372: CALL_OW 19
// if not f then
47376: LD_VAR 0 12
47380: NOT
47381: IFFALSE 47470
// begin PrepareHuman ( false , i , skill ) ;
47383: LD_INT 0
47385: PPUSH
47386: LD_VAR 0 8
47390: PPUSH
47391: LD_VAR 0 4
47395: PPUSH
47396: CALL_OW 380
// un := CreateHuman ;
47400: LD_ADDR_VAR 0 14
47404: PUSH
47405: CALL_OW 44
47409: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47410: LD_ADDR_VAR 0 7
47414: PUSH
47415: LD_VAR 0 7
47419: PPUSH
47420: LD_INT 1
47422: PPUSH
47423: LD_VAR 0 14
47427: PPUSH
47428: CALL_OW 2
47432: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47433: LD_VAR 0 14
47437: PPUSH
47438: LD_VAR 0 1
47442: PPUSH
47443: CALL_OW 250
47447: PPUSH
47448: LD_VAR 0 1
47452: PPUSH
47453: CALL_OW 251
47457: PPUSH
47458: LD_INT 10
47460: PPUSH
47461: LD_INT 0
47463: PPUSH
47464: CALL_OW 50
// continue ;
47468: GO 47369
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47470: LD_VAR 0 12
47474: PUSH
47475: LD_INT 1
47477: ARRAY
47478: PPUSH
47479: CALL_OW 313
47483: PUSH
47484: LD_VAR 0 12
47488: PUSH
47489: LD_INT 1
47491: ARRAY
47492: PPUSH
47493: CALL_OW 266
47497: PUSH
47498: LD_INT 32
47500: PUSH
47501: LD_INT 31
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: IN
47508: AND
47509: PUSH
47510: LD_VAR 0 12
47514: PUSH
47515: LD_INT 1
47517: ARRAY
47518: PPUSH
47519: CALL_OW 313
47523: PUSH
47524: LD_INT 6
47526: EQUAL
47527: OR
47528: IFFALSE 47548
// f := Delete ( f , 1 ) ;
47530: LD_ADDR_VAR 0 12
47534: PUSH
47535: LD_VAR 0 12
47539: PPUSH
47540: LD_INT 1
47542: PPUSH
47543: CALL_OW 3
47547: ST_TO_ADDR
// if not f then
47548: LD_VAR 0 12
47552: NOT
47553: IFFALSE 47571
// begin x := x + 2 ;
47555: LD_ADDR_VAR 0 13
47559: PUSH
47560: LD_VAR 0 13
47564: PUSH
47565: LD_INT 2
47567: PLUS
47568: ST_TO_ADDR
// continue ;
47569: GO 47369
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47571: LD_VAR 0 12
47575: PUSH
47576: LD_INT 1
47578: ARRAY
47579: PPUSH
47580: CALL_OW 266
47584: PUSH
47585: LD_INT 5
47587: EQUAL
47588: IFFALSE 47662
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47590: LD_VAR 0 12
47594: PUSH
47595: LD_INT 1
47597: ARRAY
47598: PPUSH
47599: CALL_OW 313
47603: PUSH
47604: LD_INT 3
47606: LESS
47607: IFFALSE 47643
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47609: LD_INT 0
47611: PPUSH
47612: LD_INT 5
47614: PUSH
47615: LD_INT 8
47617: PUSH
47618: LD_INT 9
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: PUSH
47626: LD_VAR 0 17
47630: ARRAY
47631: PPUSH
47632: LD_VAR 0 4
47636: PPUSH
47637: CALL_OW 380
47641: GO 47660
// PrepareHuman ( false , i , skill ) ;
47643: LD_INT 0
47645: PPUSH
47646: LD_VAR 0 8
47650: PPUSH
47651: LD_VAR 0 4
47655: PPUSH
47656: CALL_OW 380
// end else
47660: GO 47679
// PrepareHuman ( false , i , skill ) ;
47662: LD_INT 0
47664: PPUSH
47665: LD_VAR 0 8
47669: PPUSH
47670: LD_VAR 0 4
47674: PPUSH
47675: CALL_OW 380
// un := CreateHuman ;
47679: LD_ADDR_VAR 0 14
47683: PUSH
47684: CALL_OW 44
47688: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47689: LD_ADDR_VAR 0 7
47693: PUSH
47694: LD_VAR 0 7
47698: PPUSH
47699: LD_INT 1
47701: PPUSH
47702: LD_VAR 0 14
47706: PPUSH
47707: CALL_OW 2
47711: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47712: LD_VAR 0 14
47716: PPUSH
47717: LD_VAR 0 12
47721: PUSH
47722: LD_INT 1
47724: ARRAY
47725: PPUSH
47726: CALL_OW 52
// end ;
47730: GO 47369
47732: POP
47733: POP
// end ;
47734: GO 46671
47736: POP
47737: POP
// result := result ^ buildings ;
47738: LD_ADDR_VAR 0 7
47742: PUSH
47743: LD_VAR 0 7
47747: PUSH
47748: LD_VAR 0 18
47752: ADD
47753: ST_TO_ADDR
// end else
47754: GO 47897
// begin for i = 1 to personel do
47756: LD_ADDR_VAR 0 8
47760: PUSH
47761: DOUBLE
47762: LD_INT 1
47764: DEC
47765: ST_TO_ADDR
47766: LD_VAR 0 6
47770: PUSH
47771: FOR_TO
47772: IFFALSE 47895
// begin if i > 4 then
47774: LD_VAR 0 8
47778: PUSH
47779: LD_INT 4
47781: GREATER
47782: IFFALSE 47786
// break ;
47784: GO 47895
// x := personel [ i ] ;
47786: LD_ADDR_VAR 0 13
47790: PUSH
47791: LD_VAR 0 6
47795: PUSH
47796: LD_VAR 0 8
47800: ARRAY
47801: ST_TO_ADDR
// if x = - 1 then
47802: LD_VAR 0 13
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: EQUAL
47811: IFFALSE 47815
// continue ;
47813: GO 47771
// PrepareHuman ( false , i , skill ) ;
47815: LD_INT 0
47817: PPUSH
47818: LD_VAR 0 8
47822: PPUSH
47823: LD_VAR 0 4
47827: PPUSH
47828: CALL_OW 380
// un := CreateHuman ;
47832: LD_ADDR_VAR 0 14
47836: PUSH
47837: CALL_OW 44
47841: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47842: LD_VAR 0 14
47846: PPUSH
47847: LD_VAR 0 1
47851: PPUSH
47852: CALL_OW 250
47856: PPUSH
47857: LD_VAR 0 1
47861: PPUSH
47862: CALL_OW 251
47866: PPUSH
47867: LD_INT 10
47869: PPUSH
47870: LD_INT 0
47872: PPUSH
47873: CALL_OW 50
// result := result ^ un ;
47877: LD_ADDR_VAR 0 7
47881: PUSH
47882: LD_VAR 0 7
47886: PUSH
47887: LD_VAR 0 14
47891: ADD
47892: ST_TO_ADDR
// end ;
47893: GO 47771
47895: POP
47896: POP
// end ; end ;
47897: LD_VAR 0 7
47901: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47902: LD_INT 0
47904: PPUSH
47905: PPUSH
47906: PPUSH
47907: PPUSH
47908: PPUSH
47909: PPUSH
47910: PPUSH
47911: PPUSH
47912: PPUSH
47913: PPUSH
47914: PPUSH
47915: PPUSH
47916: PPUSH
47917: PPUSH
47918: PPUSH
47919: PPUSH
// result := false ;
47920: LD_ADDR_VAR 0 3
47924: PUSH
47925: LD_INT 0
47927: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47928: LD_VAR 0 1
47932: NOT
47933: PUSH
47934: LD_VAR 0 1
47938: PPUSH
47939: CALL_OW 266
47943: PUSH
47944: LD_INT 32
47946: PUSH
47947: LD_INT 33
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: IN
47954: NOT
47955: OR
47956: IFFALSE 47960
// exit ;
47958: GO 49069
// nat := GetNation ( tower ) ;
47960: LD_ADDR_VAR 0 12
47964: PUSH
47965: LD_VAR 0 1
47969: PPUSH
47970: CALL_OW 248
47974: ST_TO_ADDR
// side := GetSide ( tower ) ;
47975: LD_ADDR_VAR 0 16
47979: PUSH
47980: LD_VAR 0 1
47984: PPUSH
47985: CALL_OW 255
47989: ST_TO_ADDR
// x := GetX ( tower ) ;
47990: LD_ADDR_VAR 0 10
47994: PUSH
47995: LD_VAR 0 1
47999: PPUSH
48000: CALL_OW 250
48004: ST_TO_ADDR
// y := GetY ( tower ) ;
48005: LD_ADDR_VAR 0 11
48009: PUSH
48010: LD_VAR 0 1
48014: PPUSH
48015: CALL_OW 251
48019: ST_TO_ADDR
// if not x or not y then
48020: LD_VAR 0 10
48024: NOT
48025: PUSH
48026: LD_VAR 0 11
48030: NOT
48031: OR
48032: IFFALSE 48036
// exit ;
48034: GO 49069
// weapon := 0 ;
48036: LD_ADDR_VAR 0 18
48040: PUSH
48041: LD_INT 0
48043: ST_TO_ADDR
// fac_list := [ ] ;
48044: LD_ADDR_VAR 0 17
48048: PUSH
48049: EMPTY
48050: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48051: LD_ADDR_VAR 0 6
48055: PUSH
48056: LD_VAR 0 1
48060: PPUSH
48061: CALL_OW 274
48065: PPUSH
48066: LD_VAR 0 2
48070: PPUSH
48071: LD_INT 0
48073: PPUSH
48074: CALL 45640 0 3
48078: PPUSH
48079: LD_INT 30
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PPUSH
48089: CALL_OW 72
48093: ST_TO_ADDR
// if not factories then
48094: LD_VAR 0 6
48098: NOT
48099: IFFALSE 48103
// exit ;
48101: GO 49069
// for i in factories do
48103: LD_ADDR_VAR 0 8
48107: PUSH
48108: LD_VAR 0 6
48112: PUSH
48113: FOR_IN
48114: IFFALSE 48139
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48116: LD_ADDR_VAR 0 17
48120: PUSH
48121: LD_VAR 0 17
48125: PUSH
48126: LD_VAR 0 8
48130: PPUSH
48131: CALL_OW 478
48135: UNION
48136: ST_TO_ADDR
48137: GO 48113
48139: POP
48140: POP
// if not fac_list then
48141: LD_VAR 0 17
48145: NOT
48146: IFFALSE 48150
// exit ;
48148: GO 49069
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48150: LD_ADDR_VAR 0 5
48154: PUSH
48155: LD_INT 4
48157: PUSH
48158: LD_INT 5
48160: PUSH
48161: LD_INT 9
48163: PUSH
48164: LD_INT 10
48166: PUSH
48167: LD_INT 6
48169: PUSH
48170: LD_INT 7
48172: PUSH
48173: LD_INT 11
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 27
48187: PUSH
48188: LD_INT 28
48190: PUSH
48191: LD_INT 26
48193: PUSH
48194: LD_INT 30
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 43
48205: PUSH
48206: LD_INT 44
48208: PUSH
48209: LD_INT 46
48211: PUSH
48212: LD_INT 45
48214: PUSH
48215: LD_INT 47
48217: PUSH
48218: LD_INT 49
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: LIST
48233: PUSH
48234: LD_VAR 0 12
48238: ARRAY
48239: ST_TO_ADDR
// list := list isect fac_list ;
48240: LD_ADDR_VAR 0 5
48244: PUSH
48245: LD_VAR 0 5
48249: PUSH
48250: LD_VAR 0 17
48254: ISECT
48255: ST_TO_ADDR
// if not list then
48256: LD_VAR 0 5
48260: NOT
48261: IFFALSE 48265
// exit ;
48263: GO 49069
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48265: LD_VAR 0 12
48269: PUSH
48270: LD_INT 3
48272: EQUAL
48273: PUSH
48274: LD_INT 49
48276: PUSH
48277: LD_VAR 0 5
48281: IN
48282: AND
48283: PUSH
48284: LD_INT 31
48286: PPUSH
48287: LD_VAR 0 16
48291: PPUSH
48292: CALL_OW 321
48296: PUSH
48297: LD_INT 2
48299: EQUAL
48300: AND
48301: IFFALSE 48361
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48303: LD_INT 22
48305: PUSH
48306: LD_VAR 0 16
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 35
48317: PUSH
48318: LD_INT 49
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 91
48327: PUSH
48328: LD_VAR 0 1
48332: PUSH
48333: LD_INT 10
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: LIST
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: LIST
48345: PPUSH
48346: CALL_OW 69
48350: NOT
48351: IFFALSE 48361
// weapon := ru_time_lapser ;
48353: LD_ADDR_VAR 0 18
48357: PUSH
48358: LD_INT 49
48360: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48361: LD_VAR 0 12
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: IN
48376: PUSH
48377: LD_INT 11
48379: PUSH
48380: LD_VAR 0 5
48384: IN
48385: PUSH
48386: LD_INT 30
48388: PUSH
48389: LD_VAR 0 5
48393: IN
48394: OR
48395: AND
48396: PUSH
48397: LD_INT 6
48399: PPUSH
48400: LD_VAR 0 16
48404: PPUSH
48405: CALL_OW 321
48409: PUSH
48410: LD_INT 2
48412: EQUAL
48413: AND
48414: IFFALSE 48579
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48416: LD_INT 22
48418: PUSH
48419: LD_VAR 0 16
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 35
48433: PUSH
48434: LD_INT 11
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 35
48443: PUSH
48444: LD_INT 30
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 91
48458: PUSH
48459: LD_VAR 0 1
48463: PUSH
48464: LD_INT 18
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: PPUSH
48477: CALL_OW 69
48481: NOT
48482: PUSH
48483: LD_INT 22
48485: PUSH
48486: LD_VAR 0 16
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: LD_INT 30
48500: PUSH
48501: LD_INT 32
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 30
48510: PUSH
48511: LD_INT 33
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 91
48525: PUSH
48526: LD_VAR 0 1
48530: PUSH
48531: LD_INT 12
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: PUSH
48544: EMPTY
48545: LIST
48546: PPUSH
48547: CALL_OW 69
48551: PUSH
48552: LD_INT 2
48554: GREATER
48555: AND
48556: IFFALSE 48579
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48558: LD_ADDR_VAR 0 18
48562: PUSH
48563: LD_INT 11
48565: PUSH
48566: LD_INT 30
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_VAR 0 12
48577: ARRAY
48578: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48579: LD_VAR 0 18
48583: NOT
48584: PUSH
48585: LD_INT 40
48587: PPUSH
48588: LD_VAR 0 16
48592: PPUSH
48593: CALL_OW 321
48597: PUSH
48598: LD_INT 2
48600: EQUAL
48601: AND
48602: PUSH
48603: LD_INT 7
48605: PUSH
48606: LD_VAR 0 5
48610: IN
48611: PUSH
48612: LD_INT 28
48614: PUSH
48615: LD_VAR 0 5
48619: IN
48620: OR
48621: PUSH
48622: LD_INT 45
48624: PUSH
48625: LD_VAR 0 5
48629: IN
48630: OR
48631: AND
48632: IFFALSE 48886
// begin hex := GetHexInfo ( x , y ) ;
48634: LD_ADDR_VAR 0 4
48638: PUSH
48639: LD_VAR 0 10
48643: PPUSH
48644: LD_VAR 0 11
48648: PPUSH
48649: CALL_OW 546
48653: ST_TO_ADDR
// if hex [ 1 ] then
48654: LD_VAR 0 4
48658: PUSH
48659: LD_INT 1
48661: ARRAY
48662: IFFALSE 48666
// exit ;
48664: GO 49069
// height := hex [ 2 ] ;
48666: LD_ADDR_VAR 0 15
48670: PUSH
48671: LD_VAR 0 4
48675: PUSH
48676: LD_INT 2
48678: ARRAY
48679: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48680: LD_ADDR_VAR 0 14
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: LD_INT 5
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// for i in tmp do
48703: LD_ADDR_VAR 0 8
48707: PUSH
48708: LD_VAR 0 14
48712: PUSH
48713: FOR_IN
48714: IFFALSE 48884
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48716: LD_ADDR_VAR 0 9
48720: PUSH
48721: LD_VAR 0 10
48725: PPUSH
48726: LD_VAR 0 8
48730: PPUSH
48731: LD_INT 5
48733: PPUSH
48734: CALL_OW 272
48738: PUSH
48739: LD_VAR 0 11
48743: PPUSH
48744: LD_VAR 0 8
48748: PPUSH
48749: LD_INT 5
48751: PPUSH
48752: CALL_OW 273
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48761: LD_VAR 0 9
48765: PUSH
48766: LD_INT 1
48768: ARRAY
48769: PPUSH
48770: LD_VAR 0 9
48774: PUSH
48775: LD_INT 2
48777: ARRAY
48778: PPUSH
48779: CALL_OW 488
48783: IFFALSE 48882
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48785: LD_ADDR_VAR 0 4
48789: PUSH
48790: LD_VAR 0 9
48794: PUSH
48795: LD_INT 1
48797: ARRAY
48798: PPUSH
48799: LD_VAR 0 9
48803: PUSH
48804: LD_INT 2
48806: ARRAY
48807: PPUSH
48808: CALL_OW 546
48812: ST_TO_ADDR
// if hex [ 1 ] then
48813: LD_VAR 0 4
48817: PUSH
48818: LD_INT 1
48820: ARRAY
48821: IFFALSE 48825
// continue ;
48823: GO 48713
// h := hex [ 2 ] ;
48825: LD_ADDR_VAR 0 13
48829: PUSH
48830: LD_VAR 0 4
48834: PUSH
48835: LD_INT 2
48837: ARRAY
48838: ST_TO_ADDR
// if h + 7 < height then
48839: LD_VAR 0 13
48843: PUSH
48844: LD_INT 7
48846: PLUS
48847: PUSH
48848: LD_VAR 0 15
48852: LESS
48853: IFFALSE 48882
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48855: LD_ADDR_VAR 0 18
48859: PUSH
48860: LD_INT 7
48862: PUSH
48863: LD_INT 28
48865: PUSH
48866: LD_INT 45
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: PUSH
48874: LD_VAR 0 12
48878: ARRAY
48879: ST_TO_ADDR
// break ;
48880: GO 48884
// end ; end ; end ;
48882: GO 48713
48884: POP
48885: POP
// end ; if not weapon then
48886: LD_VAR 0 18
48890: NOT
48891: IFFALSE 48951
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48893: LD_ADDR_VAR 0 5
48897: PUSH
48898: LD_VAR 0 5
48902: PUSH
48903: LD_INT 11
48905: PUSH
48906: LD_INT 30
48908: PUSH
48909: LD_INT 49
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: LIST
48916: DIFF
48917: ST_TO_ADDR
// if not list then
48918: LD_VAR 0 5
48922: NOT
48923: IFFALSE 48927
// exit ;
48925: GO 49069
// weapon := list [ rand ( 1 , list ) ] ;
48927: LD_ADDR_VAR 0 18
48931: PUSH
48932: LD_VAR 0 5
48936: PUSH
48937: LD_INT 1
48939: PPUSH
48940: LD_VAR 0 5
48944: PPUSH
48945: CALL_OW 12
48949: ARRAY
48950: ST_TO_ADDR
// end ; if weapon then
48951: LD_VAR 0 18
48955: IFFALSE 49069
// begin tmp := CostOfWeapon ( weapon ) ;
48957: LD_ADDR_VAR 0 14
48961: PUSH
48962: LD_VAR 0 18
48966: PPUSH
48967: CALL_OW 451
48971: ST_TO_ADDR
// j := GetBase ( tower ) ;
48972: LD_ADDR_VAR 0 9
48976: PUSH
48977: LD_VAR 0 1
48981: PPUSH
48982: CALL_OW 274
48986: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48987: LD_VAR 0 9
48991: PPUSH
48992: LD_INT 1
48994: PPUSH
48995: CALL_OW 275
48999: PUSH
49000: LD_VAR 0 14
49004: PUSH
49005: LD_INT 1
49007: ARRAY
49008: GREATEREQUAL
49009: PUSH
49010: LD_VAR 0 9
49014: PPUSH
49015: LD_INT 2
49017: PPUSH
49018: CALL_OW 275
49022: PUSH
49023: LD_VAR 0 14
49027: PUSH
49028: LD_INT 2
49030: ARRAY
49031: GREATEREQUAL
49032: AND
49033: PUSH
49034: LD_VAR 0 9
49038: PPUSH
49039: LD_INT 3
49041: PPUSH
49042: CALL_OW 275
49046: PUSH
49047: LD_VAR 0 14
49051: PUSH
49052: LD_INT 3
49054: ARRAY
49055: GREATEREQUAL
49056: AND
49057: IFFALSE 49069
// result := weapon ;
49059: LD_ADDR_VAR 0 3
49063: PUSH
49064: LD_VAR 0 18
49068: ST_TO_ADDR
// end ; end ;
49069: LD_VAR 0 3
49073: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49074: LD_INT 0
49076: PPUSH
49077: PPUSH
// result := true ;
49078: LD_ADDR_VAR 0 3
49082: PUSH
49083: LD_INT 1
49085: ST_TO_ADDR
// if array1 = array2 then
49086: LD_VAR 0 1
49090: PUSH
49091: LD_VAR 0 2
49095: EQUAL
49096: IFFALSE 49156
// begin for i = 1 to array1 do
49098: LD_ADDR_VAR 0 4
49102: PUSH
49103: DOUBLE
49104: LD_INT 1
49106: DEC
49107: ST_TO_ADDR
49108: LD_VAR 0 1
49112: PUSH
49113: FOR_TO
49114: IFFALSE 49152
// if array1 [ i ] <> array2 [ i ] then
49116: LD_VAR 0 1
49120: PUSH
49121: LD_VAR 0 4
49125: ARRAY
49126: PUSH
49127: LD_VAR 0 2
49131: PUSH
49132: LD_VAR 0 4
49136: ARRAY
49137: NONEQUAL
49138: IFFALSE 49150
// begin result := false ;
49140: LD_ADDR_VAR 0 3
49144: PUSH
49145: LD_INT 0
49147: ST_TO_ADDR
// break ;
49148: GO 49152
// end ;
49150: GO 49113
49152: POP
49153: POP
// end else
49154: GO 49164
// result := false ;
49156: LD_ADDR_VAR 0 3
49160: PUSH
49161: LD_INT 0
49163: ST_TO_ADDR
// end ;
49164: LD_VAR 0 3
49168: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49169: LD_INT 0
49171: PPUSH
49172: PPUSH
// if not array1 or not array2 then
49173: LD_VAR 0 1
49177: NOT
49178: PUSH
49179: LD_VAR 0 2
49183: NOT
49184: OR
49185: IFFALSE 49189
// exit ;
49187: GO 49253
// result := true ;
49189: LD_ADDR_VAR 0 3
49193: PUSH
49194: LD_INT 1
49196: ST_TO_ADDR
// for i = 1 to array1 do
49197: LD_ADDR_VAR 0 4
49201: PUSH
49202: DOUBLE
49203: LD_INT 1
49205: DEC
49206: ST_TO_ADDR
49207: LD_VAR 0 1
49211: PUSH
49212: FOR_TO
49213: IFFALSE 49251
// if array1 [ i ] <> array2 [ i ] then
49215: LD_VAR 0 1
49219: PUSH
49220: LD_VAR 0 4
49224: ARRAY
49225: PUSH
49226: LD_VAR 0 2
49230: PUSH
49231: LD_VAR 0 4
49235: ARRAY
49236: NONEQUAL
49237: IFFALSE 49249
// begin result := false ;
49239: LD_ADDR_VAR 0 3
49243: PUSH
49244: LD_INT 0
49246: ST_TO_ADDR
// break ;
49247: GO 49251
// end ;
49249: GO 49212
49251: POP
49252: POP
// end ;
49253: LD_VAR 0 3
49257: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49258: LD_INT 0
49260: PPUSH
49261: PPUSH
49262: PPUSH
// pom := GetBase ( fac ) ;
49263: LD_ADDR_VAR 0 5
49267: PUSH
49268: LD_VAR 0 1
49272: PPUSH
49273: CALL_OW 274
49277: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49278: LD_ADDR_VAR 0 4
49282: PUSH
49283: LD_VAR 0 2
49287: PUSH
49288: LD_INT 1
49290: ARRAY
49291: PPUSH
49292: LD_VAR 0 2
49296: PUSH
49297: LD_INT 2
49299: ARRAY
49300: PPUSH
49301: LD_VAR 0 2
49305: PUSH
49306: LD_INT 3
49308: ARRAY
49309: PPUSH
49310: LD_VAR 0 2
49314: PUSH
49315: LD_INT 4
49317: ARRAY
49318: PPUSH
49319: CALL_OW 449
49323: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49324: LD_ADDR_VAR 0 3
49328: PUSH
49329: LD_VAR 0 5
49333: PPUSH
49334: LD_INT 1
49336: PPUSH
49337: CALL_OW 275
49341: PUSH
49342: LD_VAR 0 4
49346: PUSH
49347: LD_INT 1
49349: ARRAY
49350: GREATEREQUAL
49351: PUSH
49352: LD_VAR 0 5
49356: PPUSH
49357: LD_INT 2
49359: PPUSH
49360: CALL_OW 275
49364: PUSH
49365: LD_VAR 0 4
49369: PUSH
49370: LD_INT 2
49372: ARRAY
49373: GREATEREQUAL
49374: AND
49375: PUSH
49376: LD_VAR 0 5
49380: PPUSH
49381: LD_INT 3
49383: PPUSH
49384: CALL_OW 275
49388: PUSH
49389: LD_VAR 0 4
49393: PUSH
49394: LD_INT 3
49396: ARRAY
49397: GREATEREQUAL
49398: AND
49399: ST_TO_ADDR
// end ;
49400: LD_VAR 0 3
49404: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49405: LD_INT 0
49407: PPUSH
49408: PPUSH
49409: PPUSH
49410: PPUSH
// pom := GetBase ( building ) ;
49411: LD_ADDR_VAR 0 3
49415: PUSH
49416: LD_VAR 0 1
49420: PPUSH
49421: CALL_OW 274
49425: ST_TO_ADDR
// if not pom then
49426: LD_VAR 0 3
49430: NOT
49431: IFFALSE 49435
// exit ;
49433: GO 49605
// btype := GetBType ( building ) ;
49435: LD_ADDR_VAR 0 5
49439: PUSH
49440: LD_VAR 0 1
49444: PPUSH
49445: CALL_OW 266
49449: ST_TO_ADDR
// if btype = b_armoury then
49450: LD_VAR 0 5
49454: PUSH
49455: LD_INT 4
49457: EQUAL
49458: IFFALSE 49468
// btype := b_barracks ;
49460: LD_ADDR_VAR 0 5
49464: PUSH
49465: LD_INT 5
49467: ST_TO_ADDR
// if btype = b_depot then
49468: LD_VAR 0 5
49472: PUSH
49473: LD_INT 0
49475: EQUAL
49476: IFFALSE 49486
// btype := b_warehouse ;
49478: LD_ADDR_VAR 0 5
49482: PUSH
49483: LD_INT 1
49485: ST_TO_ADDR
// if btype = b_workshop then
49486: LD_VAR 0 5
49490: PUSH
49491: LD_INT 2
49493: EQUAL
49494: IFFALSE 49504
// btype := b_factory ;
49496: LD_ADDR_VAR 0 5
49500: PUSH
49501: LD_INT 3
49503: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49504: LD_ADDR_VAR 0 4
49508: PUSH
49509: LD_VAR 0 5
49513: PPUSH
49514: LD_VAR 0 1
49518: PPUSH
49519: CALL_OW 248
49523: PPUSH
49524: CALL_OW 450
49528: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49529: LD_ADDR_VAR 0 2
49533: PUSH
49534: LD_VAR 0 3
49538: PPUSH
49539: LD_INT 1
49541: PPUSH
49542: CALL_OW 275
49546: PUSH
49547: LD_VAR 0 4
49551: PUSH
49552: LD_INT 1
49554: ARRAY
49555: GREATEREQUAL
49556: PUSH
49557: LD_VAR 0 3
49561: PPUSH
49562: LD_INT 2
49564: PPUSH
49565: CALL_OW 275
49569: PUSH
49570: LD_VAR 0 4
49574: PUSH
49575: LD_INT 2
49577: ARRAY
49578: GREATEREQUAL
49579: AND
49580: PUSH
49581: LD_VAR 0 3
49585: PPUSH
49586: LD_INT 3
49588: PPUSH
49589: CALL_OW 275
49593: PUSH
49594: LD_VAR 0 4
49598: PUSH
49599: LD_INT 3
49601: ARRAY
49602: GREATEREQUAL
49603: AND
49604: ST_TO_ADDR
// end ;
49605: LD_VAR 0 2
49609: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49610: LD_INT 0
49612: PPUSH
49613: PPUSH
49614: PPUSH
// pom := GetBase ( building ) ;
49615: LD_ADDR_VAR 0 4
49619: PUSH
49620: LD_VAR 0 1
49624: PPUSH
49625: CALL_OW 274
49629: ST_TO_ADDR
// if not pom then
49630: LD_VAR 0 4
49634: NOT
49635: IFFALSE 49639
// exit ;
49637: GO 49740
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49639: LD_ADDR_VAR 0 5
49643: PUSH
49644: LD_VAR 0 2
49648: PPUSH
49649: LD_VAR 0 1
49653: PPUSH
49654: CALL_OW 248
49658: PPUSH
49659: CALL_OW 450
49663: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49664: LD_ADDR_VAR 0 3
49668: PUSH
49669: LD_VAR 0 4
49673: PPUSH
49674: LD_INT 1
49676: PPUSH
49677: CALL_OW 275
49681: PUSH
49682: LD_VAR 0 5
49686: PUSH
49687: LD_INT 1
49689: ARRAY
49690: GREATEREQUAL
49691: PUSH
49692: LD_VAR 0 4
49696: PPUSH
49697: LD_INT 2
49699: PPUSH
49700: CALL_OW 275
49704: PUSH
49705: LD_VAR 0 5
49709: PUSH
49710: LD_INT 2
49712: ARRAY
49713: GREATEREQUAL
49714: AND
49715: PUSH
49716: LD_VAR 0 4
49720: PPUSH
49721: LD_INT 3
49723: PPUSH
49724: CALL_OW 275
49728: PUSH
49729: LD_VAR 0 5
49733: PUSH
49734: LD_INT 3
49736: ARRAY
49737: GREATEREQUAL
49738: AND
49739: ST_TO_ADDR
// end ;
49740: LD_VAR 0 3
49744: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49745: LD_INT 0
49747: PPUSH
49748: PPUSH
49749: PPUSH
49750: PPUSH
49751: PPUSH
49752: PPUSH
49753: PPUSH
49754: PPUSH
49755: PPUSH
49756: PPUSH
49757: PPUSH
// result := false ;
49758: LD_ADDR_VAR 0 8
49762: PUSH
49763: LD_INT 0
49765: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49766: LD_VAR 0 5
49770: NOT
49771: PUSH
49772: LD_VAR 0 1
49776: NOT
49777: OR
49778: PUSH
49779: LD_VAR 0 2
49783: NOT
49784: OR
49785: PUSH
49786: LD_VAR 0 3
49790: NOT
49791: OR
49792: IFFALSE 49796
// exit ;
49794: GO 50610
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49796: LD_ADDR_VAR 0 14
49800: PUSH
49801: LD_VAR 0 1
49805: PPUSH
49806: LD_VAR 0 2
49810: PPUSH
49811: LD_VAR 0 3
49815: PPUSH
49816: LD_VAR 0 4
49820: PPUSH
49821: LD_VAR 0 5
49825: PUSH
49826: LD_INT 1
49828: ARRAY
49829: PPUSH
49830: CALL_OW 248
49834: PPUSH
49835: LD_INT 0
49837: PPUSH
49838: CALL 51847 0 6
49842: ST_TO_ADDR
// if not hexes then
49843: LD_VAR 0 14
49847: NOT
49848: IFFALSE 49852
// exit ;
49850: GO 50610
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49852: LD_ADDR_VAR 0 17
49856: PUSH
49857: LD_VAR 0 5
49861: PPUSH
49862: LD_INT 22
49864: PUSH
49865: LD_VAR 0 13
49869: PPUSH
49870: CALL_OW 255
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: LD_INT 30
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 30
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: LIST
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PPUSH
49911: CALL_OW 72
49915: ST_TO_ADDR
// for i = 1 to hexes do
49916: LD_ADDR_VAR 0 9
49920: PUSH
49921: DOUBLE
49922: LD_INT 1
49924: DEC
49925: ST_TO_ADDR
49926: LD_VAR 0 14
49930: PUSH
49931: FOR_TO
49932: IFFALSE 50608
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49934: LD_ADDR_VAR 0 13
49938: PUSH
49939: LD_VAR 0 14
49943: PUSH
49944: LD_VAR 0 9
49948: ARRAY
49949: PUSH
49950: LD_INT 1
49952: ARRAY
49953: PPUSH
49954: LD_VAR 0 14
49958: PUSH
49959: LD_VAR 0 9
49963: ARRAY
49964: PUSH
49965: LD_INT 2
49967: ARRAY
49968: PPUSH
49969: CALL_OW 428
49973: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49974: LD_VAR 0 14
49978: PUSH
49979: LD_VAR 0 9
49983: ARRAY
49984: PUSH
49985: LD_INT 1
49987: ARRAY
49988: PPUSH
49989: LD_VAR 0 14
49993: PUSH
49994: LD_VAR 0 9
49998: ARRAY
49999: PUSH
50000: LD_INT 2
50002: ARRAY
50003: PPUSH
50004: CALL_OW 351
50008: PUSH
50009: LD_VAR 0 14
50013: PUSH
50014: LD_VAR 0 9
50018: ARRAY
50019: PUSH
50020: LD_INT 1
50022: ARRAY
50023: PPUSH
50024: LD_VAR 0 14
50028: PUSH
50029: LD_VAR 0 9
50033: ARRAY
50034: PUSH
50035: LD_INT 2
50037: ARRAY
50038: PPUSH
50039: CALL_OW 488
50043: NOT
50044: OR
50045: PUSH
50046: LD_VAR 0 13
50050: PPUSH
50051: CALL_OW 247
50055: PUSH
50056: LD_INT 3
50058: EQUAL
50059: OR
50060: IFFALSE 50066
// exit ;
50062: POP
50063: POP
50064: GO 50610
// if not tmp then
50066: LD_VAR 0 13
50070: NOT
50071: IFFALSE 50075
// continue ;
50073: GO 49931
// result := true ;
50075: LD_ADDR_VAR 0 8
50079: PUSH
50080: LD_INT 1
50082: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50083: LD_VAR 0 6
50087: PUSH
50088: LD_VAR 0 13
50092: PPUSH
50093: CALL_OW 247
50097: PUSH
50098: LD_INT 2
50100: EQUAL
50101: AND
50102: PUSH
50103: LD_VAR 0 13
50107: PPUSH
50108: CALL_OW 263
50112: PUSH
50113: LD_INT 1
50115: EQUAL
50116: AND
50117: IFFALSE 50281
// begin if IsDrivenBy ( tmp ) then
50119: LD_VAR 0 13
50123: PPUSH
50124: CALL_OW 311
50128: IFFALSE 50132
// continue ;
50130: GO 49931
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50132: LD_VAR 0 6
50136: PPUSH
50137: LD_INT 3
50139: PUSH
50140: LD_INT 60
50142: PUSH
50143: EMPTY
50144: LIST
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: LD_INT 55
50155: PUSH
50156: EMPTY
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PPUSH
50167: CALL_OW 72
50171: IFFALSE 50279
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50173: LD_ADDR_VAR 0 18
50177: PUSH
50178: LD_VAR 0 6
50182: PPUSH
50183: LD_INT 3
50185: PUSH
50186: LD_INT 60
50188: PUSH
50189: EMPTY
50190: LIST
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: PUSH
50199: LD_INT 55
50201: PUSH
50202: EMPTY
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PPUSH
50213: CALL_OW 72
50217: PUSH
50218: LD_INT 1
50220: ARRAY
50221: ST_TO_ADDR
// if IsInUnit ( driver ) then
50222: LD_VAR 0 18
50226: PPUSH
50227: CALL_OW 310
50231: IFFALSE 50242
// ComExit ( driver ) ;
50233: LD_VAR 0 18
50237: PPUSH
50238: CALL 75031 0 1
// AddComEnterUnit ( driver , tmp ) ;
50242: LD_VAR 0 18
50246: PPUSH
50247: LD_VAR 0 13
50251: PPUSH
50252: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50256: LD_VAR 0 18
50260: PPUSH
50261: LD_VAR 0 7
50265: PPUSH
50266: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50270: LD_VAR 0 18
50274: PPUSH
50275: CALL_OW 181
// end ; continue ;
50279: GO 49931
// end ; if not cleaners or not tmp in cleaners then
50281: LD_VAR 0 6
50285: NOT
50286: PUSH
50287: LD_VAR 0 13
50291: PUSH
50292: LD_VAR 0 6
50296: IN
50297: NOT
50298: OR
50299: IFFALSE 50606
// begin if dep then
50301: LD_VAR 0 17
50305: IFFALSE 50441
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50307: LD_ADDR_VAR 0 16
50311: PUSH
50312: LD_VAR 0 17
50316: PUSH
50317: LD_INT 1
50319: ARRAY
50320: PPUSH
50321: CALL_OW 250
50325: PPUSH
50326: LD_VAR 0 17
50330: PUSH
50331: LD_INT 1
50333: ARRAY
50334: PPUSH
50335: CALL_OW 254
50339: PPUSH
50340: LD_INT 5
50342: PPUSH
50343: CALL_OW 272
50347: PUSH
50348: LD_VAR 0 17
50352: PUSH
50353: LD_INT 1
50355: ARRAY
50356: PPUSH
50357: CALL_OW 251
50361: PPUSH
50362: LD_VAR 0 17
50366: PUSH
50367: LD_INT 1
50369: ARRAY
50370: PPUSH
50371: CALL_OW 254
50375: PPUSH
50376: LD_INT 5
50378: PPUSH
50379: CALL_OW 273
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50388: LD_VAR 0 16
50392: PUSH
50393: LD_INT 1
50395: ARRAY
50396: PPUSH
50397: LD_VAR 0 16
50401: PUSH
50402: LD_INT 2
50404: ARRAY
50405: PPUSH
50406: CALL_OW 488
50410: IFFALSE 50441
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50412: LD_VAR 0 13
50416: PPUSH
50417: LD_VAR 0 16
50421: PUSH
50422: LD_INT 1
50424: ARRAY
50425: PPUSH
50426: LD_VAR 0 16
50430: PUSH
50431: LD_INT 2
50433: ARRAY
50434: PPUSH
50435: CALL_OW 111
// continue ;
50439: GO 49931
// end ; end ; r := GetDir ( tmp ) ;
50441: LD_ADDR_VAR 0 15
50445: PUSH
50446: LD_VAR 0 13
50450: PPUSH
50451: CALL_OW 254
50455: ST_TO_ADDR
// if r = 5 then
50456: LD_VAR 0 15
50460: PUSH
50461: LD_INT 5
50463: EQUAL
50464: IFFALSE 50474
// r := 0 ;
50466: LD_ADDR_VAR 0 15
50470: PUSH
50471: LD_INT 0
50473: ST_TO_ADDR
// for j = r to 5 do
50474: LD_ADDR_VAR 0 10
50478: PUSH
50479: DOUBLE
50480: LD_VAR 0 15
50484: DEC
50485: ST_TO_ADDR
50486: LD_INT 5
50488: PUSH
50489: FOR_TO
50490: IFFALSE 50604
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50492: LD_ADDR_VAR 0 11
50496: PUSH
50497: LD_VAR 0 13
50501: PPUSH
50502: CALL_OW 250
50506: PPUSH
50507: LD_VAR 0 10
50511: PPUSH
50512: LD_INT 2
50514: PPUSH
50515: CALL_OW 272
50519: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50520: LD_ADDR_VAR 0 12
50524: PUSH
50525: LD_VAR 0 13
50529: PPUSH
50530: CALL_OW 251
50534: PPUSH
50535: LD_VAR 0 10
50539: PPUSH
50540: LD_INT 2
50542: PPUSH
50543: CALL_OW 273
50547: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50548: LD_VAR 0 11
50552: PPUSH
50553: LD_VAR 0 12
50557: PPUSH
50558: CALL_OW 488
50562: PUSH
50563: LD_VAR 0 11
50567: PPUSH
50568: LD_VAR 0 12
50572: PPUSH
50573: CALL_OW 428
50577: NOT
50578: AND
50579: IFFALSE 50602
// begin ComMoveXY ( tmp , _x , _y ) ;
50581: LD_VAR 0 13
50585: PPUSH
50586: LD_VAR 0 11
50590: PPUSH
50591: LD_VAR 0 12
50595: PPUSH
50596: CALL_OW 111
// break ;
50600: GO 50604
// end ; end ;
50602: GO 50489
50604: POP
50605: POP
// end ; end ;
50606: GO 49931
50608: POP
50609: POP
// end ;
50610: LD_VAR 0 8
50614: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50615: LD_INT 0
50617: PPUSH
// result := true ;
50618: LD_ADDR_VAR 0 3
50622: PUSH
50623: LD_INT 1
50625: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50626: LD_VAR 0 2
50630: PUSH
50631: LD_INT 24
50633: DOUBLE
50634: EQUAL
50635: IFTRUE 50645
50637: LD_INT 33
50639: DOUBLE
50640: EQUAL
50641: IFTRUE 50645
50643: GO 50670
50645: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50646: LD_ADDR_VAR 0 3
50650: PUSH
50651: LD_INT 32
50653: PPUSH
50654: LD_VAR 0 1
50658: PPUSH
50659: CALL_OW 321
50663: PUSH
50664: LD_INT 2
50666: EQUAL
50667: ST_TO_ADDR
50668: GO 50990
50670: LD_INT 20
50672: DOUBLE
50673: EQUAL
50674: IFTRUE 50678
50676: GO 50703
50678: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50679: LD_ADDR_VAR 0 3
50683: PUSH
50684: LD_INT 6
50686: PPUSH
50687: LD_VAR 0 1
50691: PPUSH
50692: CALL_OW 321
50696: PUSH
50697: LD_INT 2
50699: EQUAL
50700: ST_TO_ADDR
50701: GO 50990
50703: LD_INT 22
50705: DOUBLE
50706: EQUAL
50707: IFTRUE 50717
50709: LD_INT 36
50711: DOUBLE
50712: EQUAL
50713: IFTRUE 50717
50715: GO 50742
50717: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50718: LD_ADDR_VAR 0 3
50722: PUSH
50723: LD_INT 15
50725: PPUSH
50726: LD_VAR 0 1
50730: PPUSH
50731: CALL_OW 321
50735: PUSH
50736: LD_INT 2
50738: EQUAL
50739: ST_TO_ADDR
50740: GO 50990
50742: LD_INT 30
50744: DOUBLE
50745: EQUAL
50746: IFTRUE 50750
50748: GO 50775
50750: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50751: LD_ADDR_VAR 0 3
50755: PUSH
50756: LD_INT 20
50758: PPUSH
50759: LD_VAR 0 1
50763: PPUSH
50764: CALL_OW 321
50768: PUSH
50769: LD_INT 2
50771: EQUAL
50772: ST_TO_ADDR
50773: GO 50990
50775: LD_INT 28
50777: DOUBLE
50778: EQUAL
50779: IFTRUE 50789
50781: LD_INT 21
50783: DOUBLE
50784: EQUAL
50785: IFTRUE 50789
50787: GO 50814
50789: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50790: LD_ADDR_VAR 0 3
50794: PUSH
50795: LD_INT 21
50797: PPUSH
50798: LD_VAR 0 1
50802: PPUSH
50803: CALL_OW 321
50807: PUSH
50808: LD_INT 2
50810: EQUAL
50811: ST_TO_ADDR
50812: GO 50990
50814: LD_INT 16
50816: DOUBLE
50817: EQUAL
50818: IFTRUE 50822
50820: GO 50849
50822: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50823: LD_ADDR_VAR 0 3
50827: PUSH
50828: LD_EXP 147
50832: PPUSH
50833: LD_VAR 0 1
50837: PPUSH
50838: CALL_OW 321
50842: PUSH
50843: LD_INT 2
50845: EQUAL
50846: ST_TO_ADDR
50847: GO 50990
50849: LD_INT 19
50851: DOUBLE
50852: EQUAL
50853: IFTRUE 50863
50855: LD_INT 23
50857: DOUBLE
50858: EQUAL
50859: IFTRUE 50863
50861: GO 50890
50863: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50864: LD_ADDR_VAR 0 3
50868: PUSH
50869: LD_EXP 146
50873: PPUSH
50874: LD_VAR 0 1
50878: PPUSH
50879: CALL_OW 321
50883: PUSH
50884: LD_INT 2
50886: EQUAL
50887: ST_TO_ADDR
50888: GO 50990
50890: LD_INT 17
50892: DOUBLE
50893: EQUAL
50894: IFTRUE 50898
50896: GO 50923
50898: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50899: LD_ADDR_VAR 0 3
50903: PUSH
50904: LD_INT 39
50906: PPUSH
50907: LD_VAR 0 1
50911: PPUSH
50912: CALL_OW 321
50916: PUSH
50917: LD_INT 2
50919: EQUAL
50920: ST_TO_ADDR
50921: GO 50990
50923: LD_INT 18
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50931
50929: GO 50956
50931: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50932: LD_ADDR_VAR 0 3
50936: PUSH
50937: LD_INT 40
50939: PPUSH
50940: LD_VAR 0 1
50944: PPUSH
50945: CALL_OW 321
50949: PUSH
50950: LD_INT 2
50952: EQUAL
50953: ST_TO_ADDR
50954: GO 50990
50956: LD_INT 27
50958: DOUBLE
50959: EQUAL
50960: IFTRUE 50964
50962: GO 50989
50964: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50965: LD_ADDR_VAR 0 3
50969: PUSH
50970: LD_INT 35
50972: PPUSH
50973: LD_VAR 0 1
50977: PPUSH
50978: CALL_OW 321
50982: PUSH
50983: LD_INT 2
50985: EQUAL
50986: ST_TO_ADDR
50987: GO 50990
50989: POP
// end ;
50990: LD_VAR 0 3
50994: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50995: LD_INT 0
50997: PPUSH
50998: PPUSH
50999: PPUSH
51000: PPUSH
51001: PPUSH
51002: PPUSH
51003: PPUSH
51004: PPUSH
51005: PPUSH
51006: PPUSH
51007: PPUSH
// result := false ;
51008: LD_ADDR_VAR 0 6
51012: PUSH
51013: LD_INT 0
51015: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51016: LD_VAR 0 1
51020: NOT
51021: PUSH
51022: LD_VAR 0 1
51026: PPUSH
51027: CALL_OW 266
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: IN
51042: NOT
51043: OR
51044: PUSH
51045: LD_VAR 0 2
51049: NOT
51050: OR
51051: PUSH
51052: LD_VAR 0 5
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: LD_INT 3
51068: PUSH
51069: LD_INT 4
51071: PUSH
51072: LD_INT 5
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: IN
51083: NOT
51084: OR
51085: PUSH
51086: LD_VAR 0 3
51090: PPUSH
51091: LD_VAR 0 4
51095: PPUSH
51096: CALL_OW 488
51100: NOT
51101: OR
51102: IFFALSE 51106
// exit ;
51104: GO 51842
// side := GetSide ( depot ) ;
51106: LD_ADDR_VAR 0 9
51110: PUSH
51111: LD_VAR 0 1
51115: PPUSH
51116: CALL_OW 255
51120: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51121: LD_VAR 0 9
51125: PPUSH
51126: LD_VAR 0 2
51130: PPUSH
51131: CALL 50615 0 2
51135: NOT
51136: IFFALSE 51140
// exit ;
51138: GO 51842
// pom := GetBase ( depot ) ;
51140: LD_ADDR_VAR 0 10
51144: PUSH
51145: LD_VAR 0 1
51149: PPUSH
51150: CALL_OW 274
51154: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51155: LD_ADDR_VAR 0 11
51159: PUSH
51160: LD_VAR 0 2
51164: PPUSH
51165: LD_VAR 0 1
51169: PPUSH
51170: CALL_OW 248
51174: PPUSH
51175: CALL_OW 450
51179: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51180: LD_VAR 0 10
51184: PPUSH
51185: LD_INT 1
51187: PPUSH
51188: CALL_OW 275
51192: PUSH
51193: LD_VAR 0 11
51197: PUSH
51198: LD_INT 1
51200: ARRAY
51201: GREATEREQUAL
51202: PUSH
51203: LD_VAR 0 10
51207: PPUSH
51208: LD_INT 2
51210: PPUSH
51211: CALL_OW 275
51215: PUSH
51216: LD_VAR 0 11
51220: PUSH
51221: LD_INT 2
51223: ARRAY
51224: GREATEREQUAL
51225: AND
51226: PUSH
51227: LD_VAR 0 10
51231: PPUSH
51232: LD_INT 3
51234: PPUSH
51235: CALL_OW 275
51239: PUSH
51240: LD_VAR 0 11
51244: PUSH
51245: LD_INT 3
51247: ARRAY
51248: GREATEREQUAL
51249: AND
51250: NOT
51251: IFFALSE 51255
// exit ;
51253: GO 51842
// if GetBType ( depot ) = b_depot then
51255: LD_VAR 0 1
51259: PPUSH
51260: CALL_OW 266
51264: PUSH
51265: LD_INT 0
51267: EQUAL
51268: IFFALSE 51280
// dist := 28 else
51270: LD_ADDR_VAR 0 14
51274: PUSH
51275: LD_INT 28
51277: ST_TO_ADDR
51278: GO 51288
// dist := 36 ;
51280: LD_ADDR_VAR 0 14
51284: PUSH
51285: LD_INT 36
51287: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51288: LD_VAR 0 1
51292: PPUSH
51293: LD_VAR 0 3
51297: PPUSH
51298: LD_VAR 0 4
51302: PPUSH
51303: CALL_OW 297
51307: PUSH
51308: LD_VAR 0 14
51312: GREATER
51313: IFFALSE 51317
// exit ;
51315: GO 51842
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51317: LD_ADDR_VAR 0 12
51321: PUSH
51322: LD_VAR 0 2
51326: PPUSH
51327: LD_VAR 0 3
51331: PPUSH
51332: LD_VAR 0 4
51336: PPUSH
51337: LD_VAR 0 5
51341: PPUSH
51342: LD_VAR 0 1
51346: PPUSH
51347: CALL_OW 248
51351: PPUSH
51352: LD_INT 0
51354: PPUSH
51355: CALL 51847 0 6
51359: ST_TO_ADDR
// if not hexes then
51360: LD_VAR 0 12
51364: NOT
51365: IFFALSE 51369
// exit ;
51367: GO 51842
// hex := GetHexInfo ( x , y ) ;
51369: LD_ADDR_VAR 0 15
51373: PUSH
51374: LD_VAR 0 3
51378: PPUSH
51379: LD_VAR 0 4
51383: PPUSH
51384: CALL_OW 546
51388: ST_TO_ADDR
// if hex [ 1 ] then
51389: LD_VAR 0 15
51393: PUSH
51394: LD_INT 1
51396: ARRAY
51397: IFFALSE 51401
// exit ;
51399: GO 51842
// height := hex [ 2 ] ;
51401: LD_ADDR_VAR 0 13
51405: PUSH
51406: LD_VAR 0 15
51410: PUSH
51411: LD_INT 2
51413: ARRAY
51414: ST_TO_ADDR
// for i = 1 to hexes do
51415: LD_ADDR_VAR 0 7
51419: PUSH
51420: DOUBLE
51421: LD_INT 1
51423: DEC
51424: ST_TO_ADDR
51425: LD_VAR 0 12
51429: PUSH
51430: FOR_TO
51431: IFFALSE 51761
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51433: LD_VAR 0 12
51437: PUSH
51438: LD_VAR 0 7
51442: ARRAY
51443: PUSH
51444: LD_INT 1
51446: ARRAY
51447: PPUSH
51448: LD_VAR 0 12
51452: PUSH
51453: LD_VAR 0 7
51457: ARRAY
51458: PUSH
51459: LD_INT 2
51461: ARRAY
51462: PPUSH
51463: CALL_OW 488
51467: NOT
51468: PUSH
51469: LD_VAR 0 12
51473: PUSH
51474: LD_VAR 0 7
51478: ARRAY
51479: PUSH
51480: LD_INT 1
51482: ARRAY
51483: PPUSH
51484: LD_VAR 0 12
51488: PUSH
51489: LD_VAR 0 7
51493: ARRAY
51494: PUSH
51495: LD_INT 2
51497: ARRAY
51498: PPUSH
51499: CALL_OW 428
51503: PUSH
51504: LD_INT 0
51506: GREATER
51507: OR
51508: PUSH
51509: LD_VAR 0 12
51513: PUSH
51514: LD_VAR 0 7
51518: ARRAY
51519: PUSH
51520: LD_INT 1
51522: ARRAY
51523: PPUSH
51524: LD_VAR 0 12
51528: PUSH
51529: LD_VAR 0 7
51533: ARRAY
51534: PUSH
51535: LD_INT 2
51537: ARRAY
51538: PPUSH
51539: CALL_OW 351
51543: OR
51544: IFFALSE 51550
// exit ;
51546: POP
51547: POP
51548: GO 51842
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51550: LD_ADDR_VAR 0 8
51554: PUSH
51555: LD_VAR 0 12
51559: PUSH
51560: LD_VAR 0 7
51564: ARRAY
51565: PUSH
51566: LD_INT 1
51568: ARRAY
51569: PPUSH
51570: LD_VAR 0 12
51574: PUSH
51575: LD_VAR 0 7
51579: ARRAY
51580: PUSH
51581: LD_INT 2
51583: ARRAY
51584: PPUSH
51585: CALL_OW 546
51589: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51590: LD_VAR 0 8
51594: PUSH
51595: LD_INT 1
51597: ARRAY
51598: PUSH
51599: LD_VAR 0 8
51603: PUSH
51604: LD_INT 2
51606: ARRAY
51607: PUSH
51608: LD_VAR 0 13
51612: PUSH
51613: LD_INT 2
51615: PLUS
51616: GREATER
51617: OR
51618: PUSH
51619: LD_VAR 0 8
51623: PUSH
51624: LD_INT 2
51626: ARRAY
51627: PUSH
51628: LD_VAR 0 13
51632: PUSH
51633: LD_INT 2
51635: MINUS
51636: LESS
51637: OR
51638: PUSH
51639: LD_VAR 0 8
51643: PUSH
51644: LD_INT 3
51646: ARRAY
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 8
51653: PUSH
51654: LD_INT 9
51656: PUSH
51657: LD_INT 10
51659: PUSH
51660: LD_INT 11
51662: PUSH
51663: LD_INT 12
51665: PUSH
51666: LD_INT 13
51668: PUSH
51669: LD_INT 16
51671: PUSH
51672: LD_INT 17
51674: PUSH
51675: LD_INT 18
51677: PUSH
51678: LD_INT 19
51680: PUSH
51681: LD_INT 20
51683: PUSH
51684: LD_INT 21
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: IN
51702: NOT
51703: OR
51704: PUSH
51705: LD_VAR 0 8
51709: PUSH
51710: LD_INT 5
51712: ARRAY
51713: NOT
51714: OR
51715: PUSH
51716: LD_VAR 0 8
51720: PUSH
51721: LD_INT 6
51723: ARRAY
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 7
51733: PUSH
51734: LD_INT 9
51736: PUSH
51737: LD_INT 10
51739: PUSH
51740: LD_INT 11
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: IN
51751: NOT
51752: OR
51753: IFFALSE 51759
// exit ;
51755: POP
51756: POP
51757: GO 51842
// end ;
51759: GO 51430
51761: POP
51762: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51763: LD_VAR 0 9
51767: PPUSH
51768: LD_VAR 0 3
51772: PPUSH
51773: LD_VAR 0 4
51777: PPUSH
51778: LD_INT 20
51780: PPUSH
51781: CALL 43788 0 4
51785: PUSH
51786: LD_INT 4
51788: ARRAY
51789: IFFALSE 51793
// exit ;
51791: GO 51842
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51793: LD_VAR 0 2
51797: PUSH
51798: LD_INT 29
51800: PUSH
51801: LD_INT 30
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: IN
51808: PUSH
51809: LD_VAR 0 3
51813: PPUSH
51814: LD_VAR 0 4
51818: PPUSH
51819: LD_VAR 0 9
51823: PPUSH
51824: CALL_OW 440
51828: NOT
51829: AND
51830: IFFALSE 51834
// exit ;
51832: GO 51842
// result := true ;
51834: LD_ADDR_VAR 0 6
51838: PUSH
51839: LD_INT 1
51841: ST_TO_ADDR
// end ;
51842: LD_VAR 0 6
51846: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51847: LD_INT 0
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
51857: PPUSH
51858: PPUSH
51859: PPUSH
51860: PPUSH
51861: PPUSH
51862: PPUSH
51863: PPUSH
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
51870: PPUSH
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
51876: PPUSH
51877: PPUSH
51878: PPUSH
51879: PPUSH
51880: PPUSH
51881: PPUSH
51882: PPUSH
51883: PPUSH
51884: PPUSH
51885: PPUSH
51886: PPUSH
51887: PPUSH
51888: PPUSH
51889: PPUSH
51890: PPUSH
51891: PPUSH
51892: PPUSH
51893: PPUSH
51894: PPUSH
51895: PPUSH
51896: PPUSH
51897: PPUSH
51898: PPUSH
51899: PPUSH
51900: PPUSH
51901: PPUSH
51902: PPUSH
51903: PPUSH
51904: PPUSH
51905: PPUSH
51906: PPUSH
// result = [ ] ;
51907: LD_ADDR_VAR 0 7
51911: PUSH
51912: EMPTY
51913: ST_TO_ADDR
// temp_list = [ ] ;
51914: LD_ADDR_VAR 0 9
51918: PUSH
51919: EMPTY
51920: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51921: LD_VAR 0 4
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: LD_INT 4
51940: PUSH
51941: LD_INT 5
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: IN
51952: NOT
51953: PUSH
51954: LD_VAR 0 1
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: IN
51969: PUSH
51970: LD_VAR 0 5
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: IN
51989: NOT
51990: AND
51991: OR
51992: IFFALSE 51996
// exit ;
51994: GO 70387
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51996: LD_VAR 0 1
52000: PUSH
52001: LD_INT 6
52003: PUSH
52004: LD_INT 7
52006: PUSH
52007: LD_INT 8
52009: PUSH
52010: LD_INT 13
52012: PUSH
52013: LD_INT 12
52015: PUSH
52016: LD_INT 15
52018: PUSH
52019: LD_INT 11
52021: PUSH
52022: LD_INT 14
52024: PUSH
52025: LD_INT 10
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: IN
52039: IFFALSE 52049
// btype = b_lab ;
52041: LD_ADDR_VAR 0 1
52045: PUSH
52046: LD_INT 6
52048: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52049: LD_VAR 0 6
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: LIST
52067: IN
52068: NOT
52069: PUSH
52070: LD_VAR 0 1
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: LD_INT 3
52086: PUSH
52087: LD_INT 6
52089: PUSH
52090: LD_INT 36
52092: PUSH
52093: LD_INT 4
52095: PUSH
52096: LD_INT 5
52098: PUSH
52099: LD_INT 31
52101: PUSH
52102: LD_INT 32
52104: PUSH
52105: LD_INT 33
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: IN
52121: NOT
52122: PUSH
52123: LD_VAR 0 6
52127: PUSH
52128: LD_INT 1
52130: EQUAL
52131: AND
52132: OR
52133: PUSH
52134: LD_VAR 0 1
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: IN
52149: NOT
52150: PUSH
52151: LD_VAR 0 6
52155: PUSH
52156: LD_INT 2
52158: EQUAL
52159: AND
52160: OR
52161: IFFALSE 52171
// mode = 0 ;
52163: LD_ADDR_VAR 0 6
52167: PUSH
52168: LD_INT 0
52170: ST_TO_ADDR
// case mode of 0 :
52171: LD_VAR 0 6
52175: PUSH
52176: LD_INT 0
52178: DOUBLE
52179: EQUAL
52180: IFTRUE 52184
52182: GO 63637
52184: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52185: LD_ADDR_VAR 0 11
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52378: LD_ADDR_VAR 0 12
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 3
52535: NEG
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52574: LD_ADDR_VAR 0 13
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: NEG
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 3
52733: NEG
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 3
52745: NEG
52746: PUSH
52747: LD_INT 3
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52773: LD_ADDR_VAR 0 14
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 3
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 3
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52969: LD_ADDR_VAR 0 15
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53162: LD_ADDR_VAR 0 16
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53355: LD_ADDR_VAR 0 17
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53585: LD_ADDR_VAR 0 18
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53815: LD_ADDR_VAR 0 19
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54045: LD_ADDR_VAR 0 20
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54275: LD_ADDR_VAR 0 21
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54505: LD_ADDR_VAR 0 22
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: LD_INT 2
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54735: LD_ADDR_VAR 0 23
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55015: LD_ADDR_VAR 0 24
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 2
55214: NEG
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 3
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55291: LD_ADDR_VAR 0 25
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55565: LD_ADDR_VAR 0 26
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 3
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55841: LD_ADDR_VAR 0 27
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56121: LD_ADDR_VAR 0 28
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: NEG
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56403: LD_ADDR_VAR 0 29
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 3
56647: NEG
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56682: LD_ADDR_VAR 0 30
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 3
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56960: LD_ADDR_VAR 0 31
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 2
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: NEG
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: LD_INT 3
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: NEG
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57238: LD_ADDR_VAR 0 32
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57516: LD_ADDR_VAR 0 33
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57795: LD_ADDR_VAR 0 34
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: LD_INT 2
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 3
58040: NEG
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58075: LD_ADDR_VAR 0 35
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58187: LD_ADDR_VAR 0 36
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58299: LD_ADDR_VAR 0 37
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58411: LD_ADDR_VAR 0 38
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58523: LD_ADDR_VAR 0 39
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58635: LD_ADDR_VAR 0 40
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58747: LD_ADDR_VAR 0 41
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 3
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 3
59056: NEG
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59097: LD_ADDR_VAR 0 42
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: LD_INT 3
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 3
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: LD_INT 3
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59447: LD_ADDR_VAR 0 43
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: LD_INT 3
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: LD_INT 3
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: NEG
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59795: LD_ADDR_VAR 0 44
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 3
60092: NEG
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 3
60104: NEG
60105: PUSH
60106: LD_INT 3
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60145: LD_ADDR_VAR 0 45
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 2
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 2
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: LD_INT 3
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: LD_INT 3
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 3
60442: NEG
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: NEG
60455: PUSH
60456: LD_INT 3
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60495: LD_ADDR_VAR 0 46
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 3
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 3
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 3
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 3
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 2
60780: NEG
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 3
60802: NEG
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60843: LD_ADDR_VAR 0 47
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: LD_INT 2
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60994: LD_ADDR_VAR 0 48
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61141: LD_ADDR_VAR 0 49
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61285: LD_ADDR_VAR 0 50
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61429: LD_ADDR_VAR 0 51
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: LD_INT 2
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: NEG
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61576: LD_ADDR_VAR 0 52
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: NEG
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61727: LD_ADDR_VAR 0 53
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 2
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 2
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: NEG
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61957: LD_ADDR_VAR 0 54
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 2
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 2
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: NEG
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: LD_INT 2
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62187: LD_ADDR_VAR 0 55
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 2
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 2
62363: NEG
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 2
62386: NEG
62387: PUSH
62388: LD_INT 2
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62417: LD_ADDR_VAR 0 56
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: LD_INT 2
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: LD_INT 2
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 2
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62647: LD_ADDR_VAR 0 57
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: LD_INT 2
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: LD_INT 2
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 2
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 2
62834: NEG
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: LD_INT 2
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62877: LD_ADDR_VAR 0 58
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: LD_INT 2
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 2
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 2
63053: NEG
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 2
63064: NEG
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 2
63076: NEG
63077: PUSH
63078: LD_INT 2
63080: NEG
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63107: LD_ADDR_VAR 0 59
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 1
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63195: LD_ADDR_VAR 0 60
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63283: LD_ADDR_VAR 0 61
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63371: LD_ADDR_VAR 0 62
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63459: LD_ADDR_VAR 0 63
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: LD_INT 1
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 0
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63547: LD_ADDR_VAR 0 64
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: ST_TO_ADDR
// end ; 1 :
63635: GO 69532
63637: LD_INT 1
63639: DOUBLE
63640: EQUAL
63641: IFTRUE 63645
63643: GO 66268
63645: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63646: LD_ADDR_VAR 0 11
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: LD_INT 3
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: LD_INT 3
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: LIST
63689: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63690: LD_ADDR_VAR 0 12
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 3
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 3
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63731: LD_ADDR_VAR 0 13
63735: PUSH
63736: LD_INT 3
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 3
63748: PUSH
63749: LD_INT 3
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 2
63758: PUSH
63759: LD_INT 3
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: LIST
63770: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63771: LD_ADDR_VAR 0 14
63775: PUSH
63776: LD_INT 1
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: LD_INT 3
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: LD_INT 2
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: LIST
63811: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63812: LD_ADDR_VAR 0 15
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 3
63841: NEG
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: LIST
63855: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63856: LD_ADDR_VAR 0 16
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: LD_INT 3
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 3
63875: NEG
63876: PUSH
63877: LD_INT 2
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 3
63887: NEG
63888: PUSH
63889: LD_INT 3
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63902: LD_ADDR_VAR 0 17
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: LD_INT 3
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 3
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: LD_INT 2
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63946: LD_ADDR_VAR 0 18
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 3
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 3
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: LIST
63986: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63987: LD_ADDR_VAR 0 19
63991: PUSH
63992: LD_INT 3
63994: PUSH
63995: LD_INT 2
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 3
64004: PUSH
64005: LD_INT 3
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: LD_INT 3
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64027: LD_ADDR_VAR 0 20
64031: PUSH
64032: LD_INT 1
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: LD_INT 3
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 2
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: LIST
64067: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64068: LD_ADDR_VAR 0 21
64072: PUSH
64073: LD_INT 2
64075: NEG
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 3
64086: NEG
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 3
64097: NEG
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: LIST
64111: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64112: LD_ADDR_VAR 0 22
64116: PUSH
64117: LD_INT 2
64119: NEG
64120: PUSH
64121: LD_INT 3
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 3
64131: NEG
64132: PUSH
64133: LD_INT 2
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 3
64143: NEG
64144: PUSH
64145: LD_INT 3
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: LIST
64157: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64158: LD_ADDR_VAR 0 23
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 3
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: LD_INT 4
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: LD_INT 3
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: LIST
64201: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64202: LD_ADDR_VAR 0 24
64206: PUSH
64207: LD_INT 3
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 4
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64243: LD_ADDR_VAR 0 25
64247: PUSH
64248: LD_INT 3
64250: PUSH
64251: LD_INT 3
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 4
64260: PUSH
64261: LD_INT 3
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 3
64270: PUSH
64271: LD_INT 4
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: LIST
64282: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64283: LD_ADDR_VAR 0 26
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: LD_INT 3
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: LD_INT 4
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: LD_INT 3
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: LIST
64323: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64324: LD_ADDR_VAR 0 27
64328: PUSH
64329: LD_INT 3
64331: NEG
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 3
64342: NEG
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 4
64353: NEG
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64368: LD_ADDR_VAR 0 28
64372: PUSH
64373: LD_INT 3
64375: NEG
64376: PUSH
64377: LD_INT 3
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 3
64387: NEG
64388: PUSH
64389: LD_INT 4
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 4
64399: NEG
64400: PUSH
64401: LD_INT 3
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64414: LD_ADDR_VAR 0 29
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: LD_INT 3
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: LD_INT 4
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 4
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: LD_INT 3
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 5
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: LD_INT 5
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: LD_INT 4
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 6
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 6
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 5
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64569: LD_ADDR_VAR 0 30
64573: PUSH
64574: LD_INT 2
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 3
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 3
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: LD_INT 1
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 4
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 4
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 4
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 5
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 5
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 5
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 6
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 6
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64712: LD_ADDR_VAR 0 31
64716: PUSH
64717: LD_INT 3
64719: PUSH
64720: LD_INT 2
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 3
64729: PUSH
64730: LD_INT 3
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 2
64739: PUSH
64740: LD_INT 3
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 4
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 4
64759: PUSH
64760: LD_INT 4
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 3
64769: PUSH
64770: LD_INT 4
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 5
64779: PUSH
64780: LD_INT 4
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 5
64789: PUSH
64790: LD_INT 5
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 4
64799: PUSH
64800: LD_INT 5
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 6
64809: PUSH
64810: LD_INT 5
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 6
64819: PUSH
64820: LD_INT 6
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 5
64829: PUSH
64830: LD_INT 6
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64851: LD_ADDR_VAR 0 32
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: LD_INT 3
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: LD_INT 3
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: LD_INT 4
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: LD_INT 4
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: LD_INT 3
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 5
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: LD_INT 5
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 1
64940: NEG
64941: PUSH
64942: LD_INT 4
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: LD_INT 6
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 6
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 1
64971: NEG
64972: PUSH
64973: LD_INT 5
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64994: LD_ADDR_VAR 0 33
64998: PUSH
64999: LD_INT 2
65001: NEG
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 3
65012: NEG
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 3
65023: NEG
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 3
65035: NEG
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 4
65046: NEG
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 4
65057: NEG
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 4
65069: NEG
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 5
65080: NEG
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 5
65091: NEG
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 5
65103: NEG
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 6
65114: NEG
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 6
65125: NEG
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65149: LD_ADDR_VAR 0 34
65153: PUSH
65154: LD_INT 2
65156: NEG
65157: PUSH
65158: LD_INT 3
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 3
65168: NEG
65169: PUSH
65170: LD_INT 2
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: NEG
65181: PUSH
65182: LD_INT 3
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 3
65192: NEG
65193: PUSH
65194: LD_INT 4
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 4
65204: NEG
65205: PUSH
65206: LD_INT 3
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 4
65216: NEG
65217: PUSH
65218: LD_INT 4
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 4
65228: NEG
65229: PUSH
65230: LD_INT 5
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 5
65240: NEG
65241: PUSH
65242: LD_INT 4
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 5
65252: NEG
65253: PUSH
65254: LD_INT 5
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 5
65264: NEG
65265: PUSH
65266: LD_INT 6
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 6
65276: NEG
65277: PUSH
65278: LD_INT 5
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 6
65288: NEG
65289: PUSH
65290: LD_INT 6
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65312: LD_ADDR_VAR 0 41
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: LD_INT 2
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: LD_INT 3
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: LD_INT 2
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: LIST
65355: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65356: LD_ADDR_VAR 0 42
65360: PUSH
65361: LD_INT 2
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 2
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: LIST
65396: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65397: LD_ADDR_VAR 0 43
65401: PUSH
65402: LD_INT 2
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 3
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 2
65424: PUSH
65425: LD_INT 3
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: LIST
65436: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65437: LD_ADDR_VAR 0 44
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: LD_INT 3
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: LD_INT 2
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: LIST
65477: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65478: LD_ADDR_VAR 0 45
65482: PUSH
65483: LD_INT 2
65485: NEG
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 2
65496: NEG
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 3
65507: NEG
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: LIST
65521: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65522: LD_ADDR_VAR 0 46
65526: PUSH
65527: LD_INT 2
65529: NEG
65530: PUSH
65531: LD_INT 2
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 2
65541: NEG
65542: PUSH
65543: LD_INT 3
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: LD_INT 2
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: LIST
65567: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65568: LD_ADDR_VAR 0 47
65572: PUSH
65573: LD_INT 2
65575: NEG
65576: PUSH
65577: LD_INT 3
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: LD_INT 3
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65601: LD_ADDR_VAR 0 48
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 2
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65632: LD_ADDR_VAR 0 49
65636: PUSH
65637: LD_INT 3
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 3
65649: PUSH
65650: LD_INT 2
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65661: LD_ADDR_VAR 0 50
65665: PUSH
65666: LD_INT 2
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65690: LD_ADDR_VAR 0 51
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 2
65708: NEG
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65721: LD_ADDR_VAR 0 52
65725: PUSH
65726: LD_INT 3
65728: NEG
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 3
65740: NEG
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65754: LD_ADDR_VAR 0 53
65758: PUSH
65759: LD_INT 1
65761: NEG
65762: PUSH
65763: LD_INT 3
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 3
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: LD_INT 2
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: LIST
65797: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65798: LD_ADDR_VAR 0 54
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 3
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65839: LD_ADDR_VAR 0 55
65843: PUSH
65844: LD_INT 3
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 3
65856: PUSH
65857: LD_INT 3
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: LD_INT 3
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: LIST
65878: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65879: LD_ADDR_VAR 0 56
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: LD_INT 3
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65920: LD_ADDR_VAR 0 57
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 3
65938: NEG
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 3
65949: NEG
65950: PUSH
65951: LD_INT 1
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65964: LD_ADDR_VAR 0 58
65968: PUSH
65969: LD_INT 2
65971: NEG
65972: PUSH
65973: LD_INT 3
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: LD_INT 2
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 3
65995: NEG
65996: PUSH
65997: LD_INT 3
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66010: LD_ADDR_VAR 0 59
66014: PUSH
66015: LD_INT 1
66017: NEG
66018: PUSH
66019: LD_INT 2
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: LD_INT 2
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: LIST
66053: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66054: LD_ADDR_VAR 0 60
66058: PUSH
66059: LD_INT 1
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 2
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 2
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66095: LD_ADDR_VAR 0 61
66099: PUSH
66100: LD_INT 2
66102: PUSH
66103: LD_INT 1
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 2
66112: PUSH
66113: LD_INT 2
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: LD_INT 2
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66135: LD_ADDR_VAR 0 62
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: LD_INT 2
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: LD_INT 2
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66176: LD_ADDR_VAR 0 63
66180: PUSH
66181: LD_INT 1
66183: NEG
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 2
66194: NEG
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 2
66205: NEG
66206: PUSH
66207: LD_INT 1
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: LIST
66219: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66220: LD_ADDR_VAR 0 64
66224: PUSH
66225: LD_INT 1
66227: NEG
66228: PUSH
66229: LD_INT 2
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 2
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 2
66251: NEG
66252: PUSH
66253: LD_INT 2
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: LIST
66265: ST_TO_ADDR
// end ; 2 :
66266: GO 69532
66268: LD_INT 2
66270: DOUBLE
66271: EQUAL
66272: IFTRUE 66276
66274: GO 69531
66276: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66277: LD_ADDR_VAR 0 29
66281: PUSH
66282: LD_INT 4
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 4
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 5
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 5
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 4
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 3
66335: PUSH
66336: LD_INT 0
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 3
66345: PUSH
66346: LD_INT 1
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 3
66356: PUSH
66357: LD_INT 2
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 5
66367: PUSH
66368: LD_INT 2
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: LD_INT 3
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 3
66387: PUSH
66388: LD_INT 2
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 4
66397: PUSH
66398: LD_INT 3
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 4
66407: PUSH
66408: LD_INT 4
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 3
66417: PUSH
66418: LD_INT 4
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 2
66427: PUSH
66428: LD_INT 3
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 2
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 4
66447: PUSH
66448: LD_INT 2
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 2
66457: PUSH
66458: LD_INT 4
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: LD_INT 4
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: LD_INT 4
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: LD_INT 5
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: LD_INT 5
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: LD_INT 4
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 1
66528: NEG
66529: PUSH
66530: LD_INT 3
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 2
66539: PUSH
66540: LD_INT 5
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 2
66549: NEG
66550: PUSH
66551: LD_INT 3
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 3
66560: NEG
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 2
66594: NEG
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 3
66605: NEG
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 4
66616: NEG
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 4
66627: NEG
66628: PUSH
66629: LD_INT 1
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 4
66639: NEG
66640: PUSH
66641: LD_INT 2
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 2
66651: NEG
66652: PUSH
66653: LD_INT 2
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 4
66662: NEG
66663: PUSH
66664: LD_INT 4
66666: NEG
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 4
66674: NEG
66675: PUSH
66676: LD_INT 5
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 3
66686: NEG
66687: PUSH
66688: LD_INT 4
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 3
66698: NEG
66699: PUSH
66700: LD_INT 3
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 4
66710: NEG
66711: PUSH
66712: LD_INT 3
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 5
66722: NEG
66723: PUSH
66724: LD_INT 4
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 5
66734: NEG
66735: PUSH
66736: LD_INT 5
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 3
66746: NEG
66747: PUSH
66748: LD_INT 5
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 5
66758: NEG
66759: PUSH
66760: LD_INT 3
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66815: LD_ADDR_VAR 0 30
66819: PUSH
66820: LD_INT 4
66822: PUSH
66823: LD_INT 4
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 4
66832: PUSH
66833: LD_INT 3
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 5
66842: PUSH
66843: LD_INT 4
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 5
66852: PUSH
66853: LD_INT 5
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 4
66862: PUSH
66863: LD_INT 5
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 3
66872: PUSH
66873: LD_INT 4
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 3
66882: PUSH
66883: LD_INT 3
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 5
66892: PUSH
66893: LD_INT 3
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 3
66902: PUSH
66903: LD_INT 5
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: LD_INT 3
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 0
66922: PUSH
66923: LD_INT 2
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 1
66942: PUSH
66943: LD_INT 4
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: LD_INT 4
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: LD_INT 3
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: NEG
66974: PUSH
66975: LD_INT 2
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: LD_INT 4
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: NEG
66995: PUSH
66996: LD_INT 2
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 4
67005: NEG
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 4
67016: NEG
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: NEG
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 3
67039: NEG
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 4
67050: NEG
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 5
67061: NEG
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 5
67072: NEG
67073: PUSH
67074: LD_INT 1
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 5
67084: NEG
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 3
67096: NEG
67097: PUSH
67098: LD_INT 2
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 3
67107: NEG
67108: PUSH
67109: LD_INT 3
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 3
67119: NEG
67120: PUSH
67121: LD_INT 4
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 2
67131: NEG
67132: PUSH
67133: LD_INT 3
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 3
67155: NEG
67156: PUSH
67157: LD_INT 2
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 4
67167: NEG
67168: PUSH
67169: LD_INT 3
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 4
67179: NEG
67180: PUSH
67181: LD_INT 4
67183: NEG
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 2
67191: NEG
67192: PUSH
67193: LD_INT 4
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 4
67203: NEG
67204: PUSH
67205: LD_INT 2
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 4
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 5
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 1
67237: PUSH
67238: LD_INT 4
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: LD_INT 3
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: LD_INT 3
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: LD_INT 4
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 1
67282: NEG
67283: PUSH
67284: LD_INT 5
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 3
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 2
67305: NEG
67306: PUSH
67307: LD_INT 5
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67362: LD_ADDR_VAR 0 31
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 4
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: LD_INT 4
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: PUSH
67400: LD_INT 5
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: LD_INT 5
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: LD_INT 4
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: LD_INT 3
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 2
67441: PUSH
67442: LD_INT 5
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 2
67451: NEG
67452: PUSH
67453: LD_INT 3
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 3
67462: NEG
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 3
67473: NEG
67474: PUSH
67475: LD_INT 1
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 3
67507: NEG
67508: PUSH
67509: LD_INT 1
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 4
67518: NEG
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 4
67529: NEG
67530: PUSH
67531: LD_INT 1
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 4
67541: NEG
67542: PUSH
67543: LD_INT 2
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 2
67553: NEG
67554: PUSH
67555: LD_INT 2
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: LD_INT 4
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 4
67576: NEG
67577: PUSH
67578: LD_INT 5
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 3
67588: NEG
67589: PUSH
67590: LD_INT 4
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 3
67600: NEG
67601: PUSH
67602: LD_INT 3
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 4
67612: NEG
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 5
67624: NEG
67625: PUSH
67626: LD_INT 4
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 5
67636: NEG
67637: PUSH
67638: LD_INT 5
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: NEG
67649: PUSH
67650: LD_INT 5
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 5
67660: NEG
67661: PUSH
67662: LD_INT 3
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: LD_INT 3
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: LD_INT 4
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: LD_INT 3
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: LD_INT 2
67708: NEG
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: LD_INT 2
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: LD_INT 3
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: LD_INT 4
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 2
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 2
67762: NEG
67763: PUSH
67764: LD_INT 4
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 4
67774: PUSH
67775: LD_INT 0
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 4
67784: PUSH
67785: LD_INT 1
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 5
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 5
67805: PUSH
67806: LD_INT 1
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 4
67815: PUSH
67816: LD_INT 1
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 3
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 3
67835: PUSH
67836: LD_INT 1
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 3
67846: PUSH
67847: LD_INT 2
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 5
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67912: LD_ADDR_VAR 0 32
67916: PUSH
67917: LD_INT 4
67919: NEG
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 4
67930: NEG
67931: PUSH
67932: LD_INT 1
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 3
67942: NEG
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 3
67953: NEG
67954: PUSH
67955: LD_INT 1
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 4
67964: NEG
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 5
67975: NEG
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 5
67986: NEG
67987: PUSH
67988: LD_INT 1
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 5
67998: NEG
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 3
68010: NEG
68011: PUSH
68012: LD_INT 2
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 3
68021: NEG
68022: PUSH
68023: LD_INT 3
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 3
68033: NEG
68034: PUSH
68035: LD_INT 4
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 2
68045: NEG
68046: PUSH
68047: LD_INT 3
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 2
68057: NEG
68058: PUSH
68059: LD_INT 2
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 3
68069: NEG
68070: PUSH
68071: LD_INT 2
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 4
68081: NEG
68082: PUSH
68083: LD_INT 3
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 4
68093: NEG
68094: PUSH
68095: LD_INT 4
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 2
68105: NEG
68106: PUSH
68107: LD_INT 4
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 4
68117: NEG
68118: PUSH
68119: LD_INT 2
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: LD_INT 4
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: LD_INT 5
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 1
68151: PUSH
68152: LD_INT 4
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: LD_INT 3
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: LD_INT 3
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: LD_INT 4
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 1
68196: NEG
68197: PUSH
68198: LD_INT 5
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 2
68208: PUSH
68209: LD_INT 3
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 2
68219: NEG
68220: PUSH
68221: LD_INT 5
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 3
68231: PUSH
68232: LD_INT 0
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 3
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 4
68252: PUSH
68253: LD_INT 0
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 4
68262: PUSH
68263: LD_INT 1
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 3
68272: PUSH
68273: LD_INT 1
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 2
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 2
68292: PUSH
68293: LD_INT 1
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: LD_INT 2
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 4
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 4
68324: PUSH
68325: LD_INT 4
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 4
68334: PUSH
68335: LD_INT 3
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 5
68344: PUSH
68345: LD_INT 4
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 5
68354: PUSH
68355: LD_INT 5
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 4
68364: PUSH
68365: LD_INT 5
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 3
68374: PUSH
68375: LD_INT 4
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 3
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 5
68394: PUSH
68395: LD_INT 3
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 3
68404: PUSH
68405: LD_INT 5
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68459: LD_ADDR_VAR 0 33
68463: PUSH
68464: LD_INT 4
68466: NEG
68467: PUSH
68468: LD_INT 4
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 4
68478: NEG
68479: PUSH
68480: LD_INT 5
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 3
68490: NEG
68491: PUSH
68492: LD_INT 4
68494: NEG
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 3
68502: NEG
68503: PUSH
68504: LD_INT 3
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 4
68514: NEG
68515: PUSH
68516: LD_INT 3
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 5
68526: NEG
68527: PUSH
68528: LD_INT 4
68530: NEG
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 5
68538: NEG
68539: PUSH
68540: LD_INT 5
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 3
68550: NEG
68551: PUSH
68552: LD_INT 5
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 5
68562: NEG
68563: PUSH
68564: LD_INT 3
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: LD_INT 3
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: LD_INT 4
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 1
68596: PUSH
68597: LD_INT 3
68599: NEG
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 1
68607: PUSH
68608: LD_INT 2
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 2
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 1
68641: NEG
68642: PUSH
68643: LD_INT 4
68645: NEG
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 2
68653: PUSH
68654: LD_INT 2
68656: NEG
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 2
68664: NEG
68665: PUSH
68666: LD_INT 4
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 4
68676: PUSH
68677: LD_INT 0
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 4
68686: PUSH
68687: LD_INT 1
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 5
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 5
68707: PUSH
68708: LD_INT 1
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 4
68717: PUSH
68718: LD_INT 1
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 3
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 3
68737: PUSH
68738: LD_INT 1
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 3
68748: PUSH
68749: LD_INT 2
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 5
68759: PUSH
68760: LD_INT 2
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 3
68769: PUSH
68770: LD_INT 3
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: LD_INT 2
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: PUSH
68790: LD_INT 3
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 4
68799: PUSH
68800: LD_INT 4
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 3
68809: PUSH
68810: LD_INT 4
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 2
68819: PUSH
68820: LD_INT 3
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 2
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 4
68839: PUSH
68840: LD_INT 2
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 2
68849: PUSH
68850: LD_INT 4
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 0
68859: PUSH
68860: LD_INT 4
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 0
68869: PUSH
68870: LD_INT 3
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: LD_INT 4
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: LD_INT 5
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 5
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 1
68909: NEG
68910: PUSH
68911: LD_INT 4
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 1
68920: NEG
68921: PUSH
68922: LD_INT 3
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 2
68931: PUSH
68932: LD_INT 5
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 2
68941: NEG
68942: PUSH
68943: LD_INT 3
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68997: LD_ADDR_VAR 0 34
69001: PUSH
69002: LD_INT 0
69004: PUSH
69005: LD_INT 4
69007: NEG
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 0
69015: PUSH
69016: LD_INT 5
69018: NEG
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 1
69026: PUSH
69027: LD_INT 4
69029: NEG
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 1
69037: PUSH
69038: LD_INT 3
69040: NEG
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 0
69048: PUSH
69049: LD_INT 3
69051: NEG
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 1
69059: NEG
69060: PUSH
69061: LD_INT 4
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 1
69071: NEG
69072: PUSH
69073: LD_INT 5
69075: NEG
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 2
69083: PUSH
69084: LD_INT 3
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 2
69094: NEG
69095: PUSH
69096: LD_INT 5
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 3
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 4
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 4
69137: PUSH
69138: LD_INT 1
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 3
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 2
69157: PUSH
69158: LD_INT 0
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 2
69167: PUSH
69168: LD_INT 1
69170: NEG
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 2
69178: PUSH
69179: LD_INT 2
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 4
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 4
69199: PUSH
69200: LD_INT 4
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 4
69209: PUSH
69210: LD_INT 3
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 5
69219: PUSH
69220: LD_INT 4
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 5
69229: PUSH
69230: LD_INT 5
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 4
69239: PUSH
69240: LD_INT 5
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: LD_INT 4
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: LD_INT 3
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 5
69269: PUSH
69270: LD_INT 3
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 3
69279: PUSH
69280: LD_INT 5
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: LD_INT 3
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 0
69299: PUSH
69300: LD_INT 2
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: LD_INT 3
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 1
69319: PUSH
69320: LD_INT 4
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 4
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 1
69339: NEG
69340: PUSH
69341: LD_INT 3
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 1
69350: NEG
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 2
69361: PUSH
69362: LD_INT 4
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: LD_INT 2
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 4
69382: NEG
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 4
69393: NEG
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 3
69405: NEG
69406: PUSH
69407: LD_INT 0
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 3
69416: NEG
69417: PUSH
69418: LD_INT 1
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 4
69427: NEG
69428: PUSH
69429: LD_INT 1
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 5
69438: NEG
69439: PUSH
69440: LD_INT 0
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 5
69449: NEG
69450: PUSH
69451: LD_INT 1
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 5
69461: NEG
69462: PUSH
69463: LD_INT 2
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 3
69473: NEG
69474: PUSH
69475: LD_INT 2
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: ST_TO_ADDR
// end ; end ;
69529: GO 69532
69531: POP
// case btype of b_depot , b_warehouse :
69532: LD_VAR 0 1
69536: PUSH
69537: LD_INT 0
69539: DOUBLE
69540: EQUAL
69541: IFTRUE 69551
69543: LD_INT 1
69545: DOUBLE
69546: EQUAL
69547: IFTRUE 69551
69549: GO 69752
69551: POP
// case nation of nation_american :
69552: LD_VAR 0 5
69556: PUSH
69557: LD_INT 1
69559: DOUBLE
69560: EQUAL
69561: IFTRUE 69565
69563: GO 69621
69565: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69566: LD_ADDR_VAR 0 9
69570: PUSH
69571: LD_VAR 0 11
69575: PUSH
69576: LD_VAR 0 12
69580: PUSH
69581: LD_VAR 0 13
69585: PUSH
69586: LD_VAR 0 14
69590: PUSH
69591: LD_VAR 0 15
69595: PUSH
69596: LD_VAR 0 16
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: PUSH
69609: LD_VAR 0 4
69613: PUSH
69614: LD_INT 1
69616: PLUS
69617: ARRAY
69618: ST_TO_ADDR
69619: GO 69750
69621: LD_INT 2
69623: DOUBLE
69624: EQUAL
69625: IFTRUE 69629
69627: GO 69685
69629: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69630: LD_ADDR_VAR 0 9
69634: PUSH
69635: LD_VAR 0 17
69639: PUSH
69640: LD_VAR 0 18
69644: PUSH
69645: LD_VAR 0 19
69649: PUSH
69650: LD_VAR 0 20
69654: PUSH
69655: LD_VAR 0 21
69659: PUSH
69660: LD_VAR 0 22
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: PUSH
69673: LD_VAR 0 4
69677: PUSH
69678: LD_INT 1
69680: PLUS
69681: ARRAY
69682: ST_TO_ADDR
69683: GO 69750
69685: LD_INT 3
69687: DOUBLE
69688: EQUAL
69689: IFTRUE 69693
69691: GO 69749
69693: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69694: LD_ADDR_VAR 0 9
69698: PUSH
69699: LD_VAR 0 23
69703: PUSH
69704: LD_VAR 0 24
69708: PUSH
69709: LD_VAR 0 25
69713: PUSH
69714: LD_VAR 0 26
69718: PUSH
69719: LD_VAR 0 27
69723: PUSH
69724: LD_VAR 0 28
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: PUSH
69737: LD_VAR 0 4
69741: PUSH
69742: LD_INT 1
69744: PLUS
69745: ARRAY
69746: ST_TO_ADDR
69747: GO 69750
69749: POP
69750: GO 70305
69752: LD_INT 2
69754: DOUBLE
69755: EQUAL
69756: IFTRUE 69766
69758: LD_INT 3
69760: DOUBLE
69761: EQUAL
69762: IFTRUE 69766
69764: GO 69822
69766: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69767: LD_ADDR_VAR 0 9
69771: PUSH
69772: LD_VAR 0 29
69776: PUSH
69777: LD_VAR 0 30
69781: PUSH
69782: LD_VAR 0 31
69786: PUSH
69787: LD_VAR 0 32
69791: PUSH
69792: LD_VAR 0 33
69796: PUSH
69797: LD_VAR 0 34
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: PUSH
69810: LD_VAR 0 4
69814: PUSH
69815: LD_INT 1
69817: PLUS
69818: ARRAY
69819: ST_TO_ADDR
69820: GO 70305
69822: LD_INT 16
69824: DOUBLE
69825: EQUAL
69826: IFTRUE 69884
69828: LD_INT 17
69830: DOUBLE
69831: EQUAL
69832: IFTRUE 69884
69834: LD_INT 18
69836: DOUBLE
69837: EQUAL
69838: IFTRUE 69884
69840: LD_INT 19
69842: DOUBLE
69843: EQUAL
69844: IFTRUE 69884
69846: LD_INT 22
69848: DOUBLE
69849: EQUAL
69850: IFTRUE 69884
69852: LD_INT 20
69854: DOUBLE
69855: EQUAL
69856: IFTRUE 69884
69858: LD_INT 21
69860: DOUBLE
69861: EQUAL
69862: IFTRUE 69884
69864: LD_INT 23
69866: DOUBLE
69867: EQUAL
69868: IFTRUE 69884
69870: LD_INT 24
69872: DOUBLE
69873: EQUAL
69874: IFTRUE 69884
69876: LD_INT 25
69878: DOUBLE
69879: EQUAL
69880: IFTRUE 69884
69882: GO 69940
69884: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69885: LD_ADDR_VAR 0 9
69889: PUSH
69890: LD_VAR 0 35
69894: PUSH
69895: LD_VAR 0 36
69899: PUSH
69900: LD_VAR 0 37
69904: PUSH
69905: LD_VAR 0 38
69909: PUSH
69910: LD_VAR 0 39
69914: PUSH
69915: LD_VAR 0 40
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: PUSH
69928: LD_VAR 0 4
69932: PUSH
69933: LD_INT 1
69935: PLUS
69936: ARRAY
69937: ST_TO_ADDR
69938: GO 70305
69940: LD_INT 6
69942: DOUBLE
69943: EQUAL
69944: IFTRUE 69996
69946: LD_INT 7
69948: DOUBLE
69949: EQUAL
69950: IFTRUE 69996
69952: LD_INT 8
69954: DOUBLE
69955: EQUAL
69956: IFTRUE 69996
69958: LD_INT 13
69960: DOUBLE
69961: EQUAL
69962: IFTRUE 69996
69964: LD_INT 12
69966: DOUBLE
69967: EQUAL
69968: IFTRUE 69996
69970: LD_INT 15
69972: DOUBLE
69973: EQUAL
69974: IFTRUE 69996
69976: LD_INT 11
69978: DOUBLE
69979: EQUAL
69980: IFTRUE 69996
69982: LD_INT 14
69984: DOUBLE
69985: EQUAL
69986: IFTRUE 69996
69988: LD_INT 10
69990: DOUBLE
69991: EQUAL
69992: IFTRUE 69996
69994: GO 70052
69996: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69997: LD_ADDR_VAR 0 9
70001: PUSH
70002: LD_VAR 0 41
70006: PUSH
70007: LD_VAR 0 42
70011: PUSH
70012: LD_VAR 0 43
70016: PUSH
70017: LD_VAR 0 44
70021: PUSH
70022: LD_VAR 0 45
70026: PUSH
70027: LD_VAR 0 46
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: PUSH
70040: LD_VAR 0 4
70044: PUSH
70045: LD_INT 1
70047: PLUS
70048: ARRAY
70049: ST_TO_ADDR
70050: GO 70305
70052: LD_INT 36
70054: DOUBLE
70055: EQUAL
70056: IFTRUE 70060
70058: GO 70116
70060: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70061: LD_ADDR_VAR 0 9
70065: PUSH
70066: LD_VAR 0 47
70070: PUSH
70071: LD_VAR 0 48
70075: PUSH
70076: LD_VAR 0 49
70080: PUSH
70081: LD_VAR 0 50
70085: PUSH
70086: LD_VAR 0 51
70090: PUSH
70091: LD_VAR 0 52
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: PUSH
70104: LD_VAR 0 4
70108: PUSH
70109: LD_INT 1
70111: PLUS
70112: ARRAY
70113: ST_TO_ADDR
70114: GO 70305
70116: LD_INT 4
70118: DOUBLE
70119: EQUAL
70120: IFTRUE 70142
70122: LD_INT 5
70124: DOUBLE
70125: EQUAL
70126: IFTRUE 70142
70128: LD_INT 34
70130: DOUBLE
70131: EQUAL
70132: IFTRUE 70142
70134: LD_INT 37
70136: DOUBLE
70137: EQUAL
70138: IFTRUE 70142
70140: GO 70198
70142: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70143: LD_ADDR_VAR 0 9
70147: PUSH
70148: LD_VAR 0 53
70152: PUSH
70153: LD_VAR 0 54
70157: PUSH
70158: LD_VAR 0 55
70162: PUSH
70163: LD_VAR 0 56
70167: PUSH
70168: LD_VAR 0 57
70172: PUSH
70173: LD_VAR 0 58
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: PUSH
70186: LD_VAR 0 4
70190: PUSH
70191: LD_INT 1
70193: PLUS
70194: ARRAY
70195: ST_TO_ADDR
70196: GO 70305
70198: LD_INT 31
70200: DOUBLE
70201: EQUAL
70202: IFTRUE 70248
70204: LD_INT 32
70206: DOUBLE
70207: EQUAL
70208: IFTRUE 70248
70210: LD_INT 33
70212: DOUBLE
70213: EQUAL
70214: IFTRUE 70248
70216: LD_INT 27
70218: DOUBLE
70219: EQUAL
70220: IFTRUE 70248
70222: LD_INT 26
70224: DOUBLE
70225: EQUAL
70226: IFTRUE 70248
70228: LD_INT 28
70230: DOUBLE
70231: EQUAL
70232: IFTRUE 70248
70234: LD_INT 29
70236: DOUBLE
70237: EQUAL
70238: IFTRUE 70248
70240: LD_INT 30
70242: DOUBLE
70243: EQUAL
70244: IFTRUE 70248
70246: GO 70304
70248: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70249: LD_ADDR_VAR 0 9
70253: PUSH
70254: LD_VAR 0 59
70258: PUSH
70259: LD_VAR 0 60
70263: PUSH
70264: LD_VAR 0 61
70268: PUSH
70269: LD_VAR 0 62
70273: PUSH
70274: LD_VAR 0 63
70278: PUSH
70279: LD_VAR 0 64
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: PUSH
70292: LD_VAR 0 4
70296: PUSH
70297: LD_INT 1
70299: PLUS
70300: ARRAY
70301: ST_TO_ADDR
70302: GO 70305
70304: POP
// temp_list2 = [ ] ;
70305: LD_ADDR_VAR 0 10
70309: PUSH
70310: EMPTY
70311: ST_TO_ADDR
// for i in temp_list do
70312: LD_ADDR_VAR 0 8
70316: PUSH
70317: LD_VAR 0 9
70321: PUSH
70322: FOR_IN
70323: IFFALSE 70375
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70325: LD_ADDR_VAR 0 10
70329: PUSH
70330: LD_VAR 0 10
70334: PUSH
70335: LD_VAR 0 8
70339: PUSH
70340: LD_INT 1
70342: ARRAY
70343: PUSH
70344: LD_VAR 0 2
70348: PLUS
70349: PUSH
70350: LD_VAR 0 8
70354: PUSH
70355: LD_INT 2
70357: ARRAY
70358: PUSH
70359: LD_VAR 0 3
70363: PLUS
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: EMPTY
70370: LIST
70371: ADD
70372: ST_TO_ADDR
70373: GO 70322
70375: POP
70376: POP
// result = temp_list2 ;
70377: LD_ADDR_VAR 0 7
70381: PUSH
70382: LD_VAR 0 10
70386: ST_TO_ADDR
// end ;
70387: LD_VAR 0 7
70391: RET
// export function EnemyInRange ( unit , dist ) ; begin
70392: LD_INT 0
70394: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70395: LD_ADDR_VAR 0 3
70399: PUSH
70400: LD_VAR 0 1
70404: PPUSH
70405: CALL_OW 255
70409: PPUSH
70410: LD_VAR 0 1
70414: PPUSH
70415: CALL_OW 250
70419: PPUSH
70420: LD_VAR 0 1
70424: PPUSH
70425: CALL_OW 251
70429: PPUSH
70430: LD_VAR 0 2
70434: PPUSH
70435: CALL 43788 0 4
70439: PUSH
70440: LD_INT 4
70442: ARRAY
70443: ST_TO_ADDR
// end ;
70444: LD_VAR 0 3
70448: RET
// export function PlayerSeeMe ( unit ) ; begin
70449: LD_INT 0
70451: PPUSH
// result := See ( your_side , unit ) ;
70452: LD_ADDR_VAR 0 2
70456: PUSH
70457: LD_OWVAR 2
70461: PPUSH
70462: LD_VAR 0 1
70466: PPUSH
70467: CALL_OW 292
70471: ST_TO_ADDR
// end ;
70472: LD_VAR 0 2
70476: RET
// export function ReverseDir ( unit ) ; begin
70477: LD_INT 0
70479: PPUSH
// if not unit then
70480: LD_VAR 0 1
70484: NOT
70485: IFFALSE 70489
// exit ;
70487: GO 70512
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70489: LD_ADDR_VAR 0 2
70493: PUSH
70494: LD_VAR 0 1
70498: PPUSH
70499: CALL_OW 254
70503: PUSH
70504: LD_INT 3
70506: PLUS
70507: PUSH
70508: LD_INT 6
70510: MOD
70511: ST_TO_ADDR
// end ;
70512: LD_VAR 0 2
70516: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70517: LD_INT 0
70519: PPUSH
70520: PPUSH
70521: PPUSH
70522: PPUSH
70523: PPUSH
// if not hexes then
70524: LD_VAR 0 2
70528: NOT
70529: IFFALSE 70533
// exit ;
70531: GO 70681
// dist := 9999 ;
70533: LD_ADDR_VAR 0 5
70537: PUSH
70538: LD_INT 9999
70540: ST_TO_ADDR
// for i = 1 to hexes do
70541: LD_ADDR_VAR 0 4
70545: PUSH
70546: DOUBLE
70547: LD_INT 1
70549: DEC
70550: ST_TO_ADDR
70551: LD_VAR 0 2
70555: PUSH
70556: FOR_TO
70557: IFFALSE 70669
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70559: LD_VAR 0 1
70563: PPUSH
70564: LD_VAR 0 2
70568: PUSH
70569: LD_VAR 0 4
70573: ARRAY
70574: PUSH
70575: LD_INT 1
70577: ARRAY
70578: PPUSH
70579: LD_VAR 0 2
70583: PUSH
70584: LD_VAR 0 4
70588: ARRAY
70589: PUSH
70590: LD_INT 2
70592: ARRAY
70593: PPUSH
70594: CALL_OW 297
70598: PUSH
70599: LD_VAR 0 5
70603: LESS
70604: IFFALSE 70667
// begin hex := hexes [ i ] ;
70606: LD_ADDR_VAR 0 7
70610: PUSH
70611: LD_VAR 0 2
70615: PUSH
70616: LD_VAR 0 4
70620: ARRAY
70621: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70622: LD_ADDR_VAR 0 5
70626: PUSH
70627: LD_VAR 0 1
70631: PPUSH
70632: LD_VAR 0 2
70636: PUSH
70637: LD_VAR 0 4
70641: ARRAY
70642: PUSH
70643: LD_INT 1
70645: ARRAY
70646: PPUSH
70647: LD_VAR 0 2
70651: PUSH
70652: LD_VAR 0 4
70656: ARRAY
70657: PUSH
70658: LD_INT 2
70660: ARRAY
70661: PPUSH
70662: CALL_OW 297
70666: ST_TO_ADDR
// end ; end ;
70667: GO 70556
70669: POP
70670: POP
// result := hex ;
70671: LD_ADDR_VAR 0 3
70675: PUSH
70676: LD_VAR 0 7
70680: ST_TO_ADDR
// end ;
70681: LD_VAR 0 3
70685: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70686: LD_INT 0
70688: PPUSH
70689: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70690: LD_VAR 0 1
70694: NOT
70695: PUSH
70696: LD_VAR 0 1
70700: PUSH
70701: LD_INT 21
70703: PUSH
70704: LD_INT 2
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 23
70713: PUSH
70714: LD_INT 2
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PPUSH
70725: CALL_OW 69
70729: IN
70730: NOT
70731: OR
70732: IFFALSE 70736
// exit ;
70734: GO 70783
// for i = 1 to 3 do
70736: LD_ADDR_VAR 0 3
70740: PUSH
70741: DOUBLE
70742: LD_INT 1
70744: DEC
70745: ST_TO_ADDR
70746: LD_INT 3
70748: PUSH
70749: FOR_TO
70750: IFFALSE 70781
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70752: LD_VAR 0 1
70756: PPUSH
70757: CALL_OW 250
70761: PPUSH
70762: LD_VAR 0 1
70766: PPUSH
70767: CALL_OW 251
70771: PPUSH
70772: LD_INT 1
70774: PPUSH
70775: CALL_OW 453
70779: GO 70749
70781: POP
70782: POP
// end ;
70783: LD_VAR 0 2
70787: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70788: LD_INT 0
70790: PPUSH
70791: PPUSH
70792: PPUSH
70793: PPUSH
70794: PPUSH
70795: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70796: LD_VAR 0 1
70800: NOT
70801: PUSH
70802: LD_VAR 0 2
70806: NOT
70807: OR
70808: PUSH
70809: LD_VAR 0 1
70813: PPUSH
70814: CALL_OW 314
70818: OR
70819: IFFALSE 70823
// exit ;
70821: GO 71264
// x := GetX ( enemy_unit ) ;
70823: LD_ADDR_VAR 0 7
70827: PUSH
70828: LD_VAR 0 2
70832: PPUSH
70833: CALL_OW 250
70837: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70838: LD_ADDR_VAR 0 8
70842: PUSH
70843: LD_VAR 0 2
70847: PPUSH
70848: CALL_OW 251
70852: ST_TO_ADDR
// if not x or not y then
70853: LD_VAR 0 7
70857: NOT
70858: PUSH
70859: LD_VAR 0 8
70863: NOT
70864: OR
70865: IFFALSE 70869
// exit ;
70867: GO 71264
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70869: LD_ADDR_VAR 0 6
70873: PUSH
70874: LD_VAR 0 7
70878: PPUSH
70879: LD_INT 0
70881: PPUSH
70882: LD_INT 4
70884: PPUSH
70885: CALL_OW 272
70889: PUSH
70890: LD_VAR 0 8
70894: PPUSH
70895: LD_INT 0
70897: PPUSH
70898: LD_INT 4
70900: PPUSH
70901: CALL_OW 273
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_VAR 0 7
70914: PPUSH
70915: LD_INT 1
70917: PPUSH
70918: LD_INT 4
70920: PPUSH
70921: CALL_OW 272
70925: PUSH
70926: LD_VAR 0 8
70930: PPUSH
70931: LD_INT 1
70933: PPUSH
70934: LD_INT 4
70936: PPUSH
70937: CALL_OW 273
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_VAR 0 7
70950: PPUSH
70951: LD_INT 2
70953: PPUSH
70954: LD_INT 4
70956: PPUSH
70957: CALL_OW 272
70961: PUSH
70962: LD_VAR 0 8
70966: PPUSH
70967: LD_INT 2
70969: PPUSH
70970: LD_INT 4
70972: PPUSH
70973: CALL_OW 273
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_VAR 0 7
70986: PPUSH
70987: LD_INT 3
70989: PPUSH
70990: LD_INT 4
70992: PPUSH
70993: CALL_OW 272
70997: PUSH
70998: LD_VAR 0 8
71002: PPUSH
71003: LD_INT 3
71005: PPUSH
71006: LD_INT 4
71008: PPUSH
71009: CALL_OW 273
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_VAR 0 7
71022: PPUSH
71023: LD_INT 4
71025: PPUSH
71026: LD_INT 4
71028: PPUSH
71029: CALL_OW 272
71033: PUSH
71034: LD_VAR 0 8
71038: PPUSH
71039: LD_INT 4
71041: PPUSH
71042: LD_INT 4
71044: PPUSH
71045: CALL_OW 273
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_VAR 0 7
71058: PPUSH
71059: LD_INT 5
71061: PPUSH
71062: LD_INT 4
71064: PPUSH
71065: CALL_OW 272
71069: PUSH
71070: LD_VAR 0 8
71074: PPUSH
71075: LD_INT 5
71077: PPUSH
71078: LD_INT 4
71080: PPUSH
71081: CALL_OW 273
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: ST_TO_ADDR
// for i = tmp downto 1 do
71098: LD_ADDR_VAR 0 4
71102: PUSH
71103: DOUBLE
71104: LD_VAR 0 6
71108: INC
71109: ST_TO_ADDR
71110: LD_INT 1
71112: PUSH
71113: FOR_DOWNTO
71114: IFFALSE 71215
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71116: LD_VAR 0 6
71120: PUSH
71121: LD_VAR 0 4
71125: ARRAY
71126: PUSH
71127: LD_INT 1
71129: ARRAY
71130: PPUSH
71131: LD_VAR 0 6
71135: PUSH
71136: LD_VAR 0 4
71140: ARRAY
71141: PUSH
71142: LD_INT 2
71144: ARRAY
71145: PPUSH
71146: CALL_OW 488
71150: NOT
71151: PUSH
71152: LD_VAR 0 6
71156: PUSH
71157: LD_VAR 0 4
71161: ARRAY
71162: PUSH
71163: LD_INT 1
71165: ARRAY
71166: PPUSH
71167: LD_VAR 0 6
71171: PUSH
71172: LD_VAR 0 4
71176: ARRAY
71177: PUSH
71178: LD_INT 2
71180: ARRAY
71181: PPUSH
71182: CALL_OW 428
71186: PUSH
71187: LD_INT 0
71189: NONEQUAL
71190: OR
71191: IFFALSE 71213
// tmp := Delete ( tmp , i ) ;
71193: LD_ADDR_VAR 0 6
71197: PUSH
71198: LD_VAR 0 6
71202: PPUSH
71203: LD_VAR 0 4
71207: PPUSH
71208: CALL_OW 3
71212: ST_TO_ADDR
71213: GO 71113
71215: POP
71216: POP
// j := GetClosestHex ( unit , tmp ) ;
71217: LD_ADDR_VAR 0 5
71221: PUSH
71222: LD_VAR 0 1
71226: PPUSH
71227: LD_VAR 0 6
71231: PPUSH
71232: CALL 70517 0 2
71236: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71237: LD_VAR 0 1
71241: PPUSH
71242: LD_VAR 0 5
71246: PUSH
71247: LD_INT 1
71249: ARRAY
71250: PPUSH
71251: LD_VAR 0 5
71255: PUSH
71256: LD_INT 2
71258: ARRAY
71259: PPUSH
71260: CALL_OW 111
// end ;
71264: LD_VAR 0 3
71268: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71269: LD_INT 0
71271: PPUSH
71272: PPUSH
71273: PPUSH
// uc_side = 0 ;
71274: LD_ADDR_OWVAR 20
71278: PUSH
71279: LD_INT 0
71281: ST_TO_ADDR
// uc_nation = 0 ;
71282: LD_ADDR_OWVAR 21
71286: PUSH
71287: LD_INT 0
71289: ST_TO_ADDR
// InitHc_All ( ) ;
71290: CALL_OW 584
// InitVc ;
71294: CALL_OW 20
// if mastodonts then
71298: LD_VAR 0 6
71302: IFFALSE 71369
// for i = 1 to mastodonts do
71304: LD_ADDR_VAR 0 11
71308: PUSH
71309: DOUBLE
71310: LD_INT 1
71312: DEC
71313: ST_TO_ADDR
71314: LD_VAR 0 6
71318: PUSH
71319: FOR_TO
71320: IFFALSE 71367
// begin vc_chassis := 31 ;
71322: LD_ADDR_OWVAR 37
71326: PUSH
71327: LD_INT 31
71329: ST_TO_ADDR
// vc_control := control_rider ;
71330: LD_ADDR_OWVAR 38
71334: PUSH
71335: LD_INT 4
71337: ST_TO_ADDR
// animal := CreateVehicle ;
71338: LD_ADDR_VAR 0 12
71342: PUSH
71343: CALL_OW 45
71347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71348: LD_VAR 0 12
71352: PPUSH
71353: LD_VAR 0 8
71357: PPUSH
71358: LD_INT 0
71360: PPUSH
71361: CALL 73557 0 3
// end ;
71365: GO 71319
71367: POP
71368: POP
// if horses then
71369: LD_VAR 0 5
71373: IFFALSE 71440
// for i = 1 to horses do
71375: LD_ADDR_VAR 0 11
71379: PUSH
71380: DOUBLE
71381: LD_INT 1
71383: DEC
71384: ST_TO_ADDR
71385: LD_VAR 0 5
71389: PUSH
71390: FOR_TO
71391: IFFALSE 71438
// begin hc_class := 21 ;
71393: LD_ADDR_OWVAR 28
71397: PUSH
71398: LD_INT 21
71400: ST_TO_ADDR
// hc_gallery :=  ;
71401: LD_ADDR_OWVAR 33
71405: PUSH
71406: LD_STRING 
71408: ST_TO_ADDR
// animal := CreateHuman ;
71409: LD_ADDR_VAR 0 12
71413: PUSH
71414: CALL_OW 44
71418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71419: LD_VAR 0 12
71423: PPUSH
71424: LD_VAR 0 8
71428: PPUSH
71429: LD_INT 0
71431: PPUSH
71432: CALL 73557 0 3
// end ;
71436: GO 71390
71438: POP
71439: POP
// if birds then
71440: LD_VAR 0 1
71444: IFFALSE 71511
// for i = 1 to birds do
71446: LD_ADDR_VAR 0 11
71450: PUSH
71451: DOUBLE
71452: LD_INT 1
71454: DEC
71455: ST_TO_ADDR
71456: LD_VAR 0 1
71460: PUSH
71461: FOR_TO
71462: IFFALSE 71509
// begin hc_class = 18 ;
71464: LD_ADDR_OWVAR 28
71468: PUSH
71469: LD_INT 18
71471: ST_TO_ADDR
// hc_gallery =  ;
71472: LD_ADDR_OWVAR 33
71476: PUSH
71477: LD_STRING 
71479: ST_TO_ADDR
// animal := CreateHuman ;
71480: LD_ADDR_VAR 0 12
71484: PUSH
71485: CALL_OW 44
71489: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71490: LD_VAR 0 12
71494: PPUSH
71495: LD_VAR 0 8
71499: PPUSH
71500: LD_INT 0
71502: PPUSH
71503: CALL 73557 0 3
// end ;
71507: GO 71461
71509: POP
71510: POP
// if tigers then
71511: LD_VAR 0 2
71515: IFFALSE 71599
// for i = 1 to tigers do
71517: LD_ADDR_VAR 0 11
71521: PUSH
71522: DOUBLE
71523: LD_INT 1
71525: DEC
71526: ST_TO_ADDR
71527: LD_VAR 0 2
71531: PUSH
71532: FOR_TO
71533: IFFALSE 71597
// begin hc_class = class_tiger ;
71535: LD_ADDR_OWVAR 28
71539: PUSH
71540: LD_INT 14
71542: ST_TO_ADDR
// hc_gallery =  ;
71543: LD_ADDR_OWVAR 33
71547: PUSH
71548: LD_STRING 
71550: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71551: LD_ADDR_OWVAR 35
71555: PUSH
71556: LD_INT 7
71558: NEG
71559: PPUSH
71560: LD_INT 7
71562: PPUSH
71563: CALL_OW 12
71567: ST_TO_ADDR
// animal := CreateHuman ;
71568: LD_ADDR_VAR 0 12
71572: PUSH
71573: CALL_OW 44
71577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71578: LD_VAR 0 12
71582: PPUSH
71583: LD_VAR 0 8
71587: PPUSH
71588: LD_INT 0
71590: PPUSH
71591: CALL 73557 0 3
// end ;
71595: GO 71532
71597: POP
71598: POP
// if apemans then
71599: LD_VAR 0 3
71603: IFFALSE 71726
// for i = 1 to apemans do
71605: LD_ADDR_VAR 0 11
71609: PUSH
71610: DOUBLE
71611: LD_INT 1
71613: DEC
71614: ST_TO_ADDR
71615: LD_VAR 0 3
71619: PUSH
71620: FOR_TO
71621: IFFALSE 71724
// begin hc_class = class_apeman ;
71623: LD_ADDR_OWVAR 28
71627: PUSH
71628: LD_INT 12
71630: ST_TO_ADDR
// hc_gallery =  ;
71631: LD_ADDR_OWVAR 33
71635: PUSH
71636: LD_STRING 
71638: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71639: LD_ADDR_OWVAR 35
71643: PUSH
71644: LD_INT 2
71646: NEG
71647: PPUSH
71648: LD_INT 2
71650: PPUSH
71651: CALL_OW 12
71655: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71656: LD_ADDR_OWVAR 31
71660: PUSH
71661: LD_INT 1
71663: PPUSH
71664: LD_INT 3
71666: PPUSH
71667: CALL_OW 12
71671: PUSH
71672: LD_INT 1
71674: PPUSH
71675: LD_INT 3
71677: PPUSH
71678: CALL_OW 12
71682: PUSH
71683: LD_INT 0
71685: PUSH
71686: LD_INT 0
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: ST_TO_ADDR
// animal := CreateHuman ;
71695: LD_ADDR_VAR 0 12
71699: PUSH
71700: CALL_OW 44
71704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71705: LD_VAR 0 12
71709: PPUSH
71710: LD_VAR 0 8
71714: PPUSH
71715: LD_INT 0
71717: PPUSH
71718: CALL 73557 0 3
// end ;
71722: GO 71620
71724: POP
71725: POP
// if enchidnas then
71726: LD_VAR 0 4
71730: IFFALSE 71797
// for i = 1 to enchidnas do
71732: LD_ADDR_VAR 0 11
71736: PUSH
71737: DOUBLE
71738: LD_INT 1
71740: DEC
71741: ST_TO_ADDR
71742: LD_VAR 0 4
71746: PUSH
71747: FOR_TO
71748: IFFALSE 71795
// begin hc_class = 13 ;
71750: LD_ADDR_OWVAR 28
71754: PUSH
71755: LD_INT 13
71757: ST_TO_ADDR
// hc_gallery =  ;
71758: LD_ADDR_OWVAR 33
71762: PUSH
71763: LD_STRING 
71765: ST_TO_ADDR
// animal := CreateHuman ;
71766: LD_ADDR_VAR 0 12
71770: PUSH
71771: CALL_OW 44
71775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71776: LD_VAR 0 12
71780: PPUSH
71781: LD_VAR 0 8
71785: PPUSH
71786: LD_INT 0
71788: PPUSH
71789: CALL 73557 0 3
// end ;
71793: GO 71747
71795: POP
71796: POP
// if fishes then
71797: LD_VAR 0 7
71801: IFFALSE 71868
// for i = 1 to fishes do
71803: LD_ADDR_VAR 0 11
71807: PUSH
71808: DOUBLE
71809: LD_INT 1
71811: DEC
71812: ST_TO_ADDR
71813: LD_VAR 0 7
71817: PUSH
71818: FOR_TO
71819: IFFALSE 71866
// begin hc_class = 20 ;
71821: LD_ADDR_OWVAR 28
71825: PUSH
71826: LD_INT 20
71828: ST_TO_ADDR
// hc_gallery =  ;
71829: LD_ADDR_OWVAR 33
71833: PUSH
71834: LD_STRING 
71836: ST_TO_ADDR
// animal := CreateHuman ;
71837: LD_ADDR_VAR 0 12
71841: PUSH
71842: CALL_OW 44
71846: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71847: LD_VAR 0 12
71851: PPUSH
71852: LD_VAR 0 9
71856: PPUSH
71857: LD_INT 0
71859: PPUSH
71860: CALL 73557 0 3
// end ;
71864: GO 71818
71866: POP
71867: POP
// end ;
71868: LD_VAR 0 10
71872: RET
// export function WantHeal ( sci , unit ) ; begin
71873: LD_INT 0
71875: PPUSH
// if GetTaskList ( sci ) > 0 then
71876: LD_VAR 0 1
71880: PPUSH
71881: CALL_OW 437
71885: PUSH
71886: LD_INT 0
71888: GREATER
71889: IFFALSE 71959
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71891: LD_VAR 0 1
71895: PPUSH
71896: CALL_OW 437
71900: PUSH
71901: LD_INT 1
71903: ARRAY
71904: PUSH
71905: LD_INT 1
71907: ARRAY
71908: PUSH
71909: LD_STRING l
71911: EQUAL
71912: PUSH
71913: LD_VAR 0 1
71917: PPUSH
71918: CALL_OW 437
71922: PUSH
71923: LD_INT 1
71925: ARRAY
71926: PUSH
71927: LD_INT 4
71929: ARRAY
71930: PUSH
71931: LD_VAR 0 2
71935: EQUAL
71936: AND
71937: IFFALSE 71949
// result := true else
71939: LD_ADDR_VAR 0 3
71943: PUSH
71944: LD_INT 1
71946: ST_TO_ADDR
71947: GO 71957
// result := false ;
71949: LD_ADDR_VAR 0 3
71953: PUSH
71954: LD_INT 0
71956: ST_TO_ADDR
// end else
71957: GO 71967
// result := false ;
71959: LD_ADDR_VAR 0 3
71963: PUSH
71964: LD_INT 0
71966: ST_TO_ADDR
// end ;
71967: LD_VAR 0 3
71971: RET
// export function HealTarget ( sci ) ; begin
71972: LD_INT 0
71974: PPUSH
// if not sci then
71975: LD_VAR 0 1
71979: NOT
71980: IFFALSE 71984
// exit ;
71982: GO 72049
// result := 0 ;
71984: LD_ADDR_VAR 0 2
71988: PUSH
71989: LD_INT 0
71991: ST_TO_ADDR
// if GetTaskList ( sci ) then
71992: LD_VAR 0 1
71996: PPUSH
71997: CALL_OW 437
72001: IFFALSE 72049
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72003: LD_VAR 0 1
72007: PPUSH
72008: CALL_OW 437
72012: PUSH
72013: LD_INT 1
72015: ARRAY
72016: PUSH
72017: LD_INT 1
72019: ARRAY
72020: PUSH
72021: LD_STRING l
72023: EQUAL
72024: IFFALSE 72049
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72026: LD_ADDR_VAR 0 2
72030: PUSH
72031: LD_VAR 0 1
72035: PPUSH
72036: CALL_OW 437
72040: PUSH
72041: LD_INT 1
72043: ARRAY
72044: PUSH
72045: LD_INT 4
72047: ARRAY
72048: ST_TO_ADDR
// end ;
72049: LD_VAR 0 2
72053: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72054: LD_INT 0
72056: PPUSH
72057: PPUSH
72058: PPUSH
72059: PPUSH
// if not base_units then
72060: LD_VAR 0 1
72064: NOT
72065: IFFALSE 72069
// exit ;
72067: GO 72156
// result := false ;
72069: LD_ADDR_VAR 0 2
72073: PUSH
72074: LD_INT 0
72076: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72077: LD_ADDR_VAR 0 5
72081: PUSH
72082: LD_VAR 0 1
72086: PPUSH
72087: LD_INT 21
72089: PUSH
72090: LD_INT 3
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PPUSH
72097: CALL_OW 72
72101: ST_TO_ADDR
// if not tmp then
72102: LD_VAR 0 5
72106: NOT
72107: IFFALSE 72111
// exit ;
72109: GO 72156
// for i in tmp do
72111: LD_ADDR_VAR 0 3
72115: PUSH
72116: LD_VAR 0 5
72120: PUSH
72121: FOR_IN
72122: IFFALSE 72154
// begin result := EnemyInRange ( i , 22 ) ;
72124: LD_ADDR_VAR 0 2
72128: PUSH
72129: LD_VAR 0 3
72133: PPUSH
72134: LD_INT 22
72136: PPUSH
72137: CALL 70392 0 2
72141: ST_TO_ADDR
// if result then
72142: LD_VAR 0 2
72146: IFFALSE 72152
// exit ;
72148: POP
72149: POP
72150: GO 72156
// end ;
72152: GO 72121
72154: POP
72155: POP
// end ;
72156: LD_VAR 0 2
72160: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
72161: LD_INT 0
72163: PPUSH
72164: PPUSH
// if not units then
72165: LD_VAR 0 1
72169: NOT
72170: IFFALSE 72174
// exit ;
72172: GO 72244
// result := [ ] ;
72174: LD_ADDR_VAR 0 3
72178: PUSH
72179: EMPTY
72180: ST_TO_ADDR
// for i in units do
72181: LD_ADDR_VAR 0 4
72185: PUSH
72186: LD_VAR 0 1
72190: PUSH
72191: FOR_IN
72192: IFFALSE 72242
// if GetTag ( i ) = tag then
72194: LD_VAR 0 4
72198: PPUSH
72199: CALL_OW 110
72203: PUSH
72204: LD_VAR 0 2
72208: EQUAL
72209: IFFALSE 72240
// result := Replace ( result , result + 1 , i ) ;
72211: LD_ADDR_VAR 0 3
72215: PUSH
72216: LD_VAR 0 3
72220: PPUSH
72221: LD_VAR 0 3
72225: PUSH
72226: LD_INT 1
72228: PLUS
72229: PPUSH
72230: LD_VAR 0 4
72234: PPUSH
72235: CALL_OW 1
72239: ST_TO_ADDR
72240: GO 72191
72242: POP
72243: POP
// end ;
72244: LD_VAR 0 3
72248: RET
// export function IsDriver ( un ) ; begin
72249: LD_INT 0
72251: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72252: LD_ADDR_VAR 0 2
72256: PUSH
72257: LD_VAR 0 1
72261: PUSH
72262: LD_INT 55
72264: PUSH
72265: EMPTY
72266: LIST
72267: PPUSH
72268: CALL_OW 69
72272: IN
72273: ST_TO_ADDR
// end ;
72274: LD_VAR 0 2
72278: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72279: LD_INT 0
72281: PPUSH
72282: PPUSH
// list := [ ] ;
72283: LD_ADDR_VAR 0 5
72287: PUSH
72288: EMPTY
72289: ST_TO_ADDR
// case d of 0 :
72290: LD_VAR 0 3
72294: PUSH
72295: LD_INT 0
72297: DOUBLE
72298: EQUAL
72299: IFTRUE 72303
72301: GO 72436
72303: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72304: LD_ADDR_VAR 0 5
72308: PUSH
72309: LD_VAR 0 1
72313: PUSH
72314: LD_INT 4
72316: MINUS
72317: PUSH
72318: LD_VAR 0 2
72322: PUSH
72323: LD_INT 4
72325: MINUS
72326: PUSH
72327: LD_INT 2
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: LIST
72334: PUSH
72335: LD_VAR 0 1
72339: PUSH
72340: LD_INT 3
72342: MINUS
72343: PUSH
72344: LD_VAR 0 2
72348: PUSH
72349: LD_INT 1
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: LIST
72356: PUSH
72357: LD_VAR 0 1
72361: PUSH
72362: LD_INT 4
72364: PLUS
72365: PUSH
72366: LD_VAR 0 2
72370: PUSH
72371: LD_INT 4
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: LIST
72378: PUSH
72379: LD_VAR 0 1
72383: PUSH
72384: LD_INT 3
72386: PLUS
72387: PUSH
72388: LD_VAR 0 2
72392: PUSH
72393: LD_INT 3
72395: PLUS
72396: PUSH
72397: LD_INT 5
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: LIST
72404: PUSH
72405: LD_VAR 0 1
72409: PUSH
72410: LD_VAR 0 2
72414: PUSH
72415: LD_INT 4
72417: PLUS
72418: PUSH
72419: LD_INT 0
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: LIST
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: ST_TO_ADDR
// end ; 1 :
72434: GO 73134
72436: LD_INT 1
72438: DOUBLE
72439: EQUAL
72440: IFTRUE 72444
72442: GO 72577
72444: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72445: LD_ADDR_VAR 0 5
72449: PUSH
72450: LD_VAR 0 1
72454: PUSH
72455: LD_VAR 0 2
72459: PUSH
72460: LD_INT 4
72462: MINUS
72463: PUSH
72464: LD_INT 3
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: LIST
72471: PUSH
72472: LD_VAR 0 1
72476: PUSH
72477: LD_INT 3
72479: MINUS
72480: PUSH
72481: LD_VAR 0 2
72485: PUSH
72486: LD_INT 3
72488: MINUS
72489: PUSH
72490: LD_INT 2
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: LIST
72497: PUSH
72498: LD_VAR 0 1
72502: PUSH
72503: LD_INT 4
72505: MINUS
72506: PUSH
72507: LD_VAR 0 2
72511: PUSH
72512: LD_INT 1
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: LIST
72519: PUSH
72520: LD_VAR 0 1
72524: PUSH
72525: LD_VAR 0 2
72529: PUSH
72530: LD_INT 3
72532: PLUS
72533: PUSH
72534: LD_INT 0
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: LIST
72541: PUSH
72542: LD_VAR 0 1
72546: PUSH
72547: LD_INT 4
72549: PLUS
72550: PUSH
72551: LD_VAR 0 2
72555: PUSH
72556: LD_INT 4
72558: PLUS
72559: PUSH
72560: LD_INT 5
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: LIST
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: ST_TO_ADDR
// end ; 2 :
72575: GO 73134
72577: LD_INT 2
72579: DOUBLE
72580: EQUAL
72581: IFTRUE 72585
72583: GO 72714
72585: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72586: LD_ADDR_VAR 0 5
72590: PUSH
72591: LD_VAR 0 1
72595: PUSH
72596: LD_VAR 0 2
72600: PUSH
72601: LD_INT 3
72603: MINUS
72604: PUSH
72605: LD_INT 3
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: LIST
72612: PUSH
72613: LD_VAR 0 1
72617: PUSH
72618: LD_INT 4
72620: PLUS
72621: PUSH
72622: LD_VAR 0 2
72626: PUSH
72627: LD_INT 4
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: LIST
72634: PUSH
72635: LD_VAR 0 1
72639: PUSH
72640: LD_VAR 0 2
72644: PUSH
72645: LD_INT 4
72647: PLUS
72648: PUSH
72649: LD_INT 0
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: LIST
72656: PUSH
72657: LD_VAR 0 1
72661: PUSH
72662: LD_INT 3
72664: MINUS
72665: PUSH
72666: LD_VAR 0 2
72670: PUSH
72671: LD_INT 1
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: LIST
72678: PUSH
72679: LD_VAR 0 1
72683: PUSH
72684: LD_INT 4
72686: MINUS
72687: PUSH
72688: LD_VAR 0 2
72692: PUSH
72693: LD_INT 4
72695: MINUS
72696: PUSH
72697: LD_INT 2
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: LIST
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: ST_TO_ADDR
// end ; 3 :
72712: GO 73134
72714: LD_INT 3
72716: DOUBLE
72717: EQUAL
72718: IFTRUE 72722
72720: GO 72855
72722: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72723: LD_ADDR_VAR 0 5
72727: PUSH
72728: LD_VAR 0 1
72732: PUSH
72733: LD_INT 3
72735: PLUS
72736: PUSH
72737: LD_VAR 0 2
72741: PUSH
72742: LD_INT 4
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: LIST
72749: PUSH
72750: LD_VAR 0 1
72754: PUSH
72755: LD_INT 4
72757: PLUS
72758: PUSH
72759: LD_VAR 0 2
72763: PUSH
72764: LD_INT 4
72766: PLUS
72767: PUSH
72768: LD_INT 5
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: LIST
72775: PUSH
72776: LD_VAR 0 1
72780: PUSH
72781: LD_INT 4
72783: MINUS
72784: PUSH
72785: LD_VAR 0 2
72789: PUSH
72790: LD_INT 1
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: LIST
72797: PUSH
72798: LD_VAR 0 1
72802: PUSH
72803: LD_VAR 0 2
72807: PUSH
72808: LD_INT 4
72810: MINUS
72811: PUSH
72812: LD_INT 3
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: LIST
72819: PUSH
72820: LD_VAR 0 1
72824: PUSH
72825: LD_INT 3
72827: MINUS
72828: PUSH
72829: LD_VAR 0 2
72833: PUSH
72834: LD_INT 3
72836: MINUS
72837: PUSH
72838: LD_INT 2
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: LIST
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: ST_TO_ADDR
// end ; 4 :
72853: GO 73134
72855: LD_INT 4
72857: DOUBLE
72858: EQUAL
72859: IFTRUE 72863
72861: GO 72996
72863: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72864: LD_ADDR_VAR 0 5
72868: PUSH
72869: LD_VAR 0 1
72873: PUSH
72874: LD_VAR 0 2
72878: PUSH
72879: LD_INT 4
72881: PLUS
72882: PUSH
72883: LD_INT 0
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: LIST
72890: PUSH
72891: LD_VAR 0 1
72895: PUSH
72896: LD_INT 3
72898: PLUS
72899: PUSH
72900: LD_VAR 0 2
72904: PUSH
72905: LD_INT 3
72907: PLUS
72908: PUSH
72909: LD_INT 5
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: LIST
72916: PUSH
72917: LD_VAR 0 1
72921: PUSH
72922: LD_INT 4
72924: PLUS
72925: PUSH
72926: LD_VAR 0 2
72930: PUSH
72931: LD_INT 4
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: LIST
72938: PUSH
72939: LD_VAR 0 1
72943: PUSH
72944: LD_VAR 0 2
72948: PUSH
72949: LD_INT 3
72951: MINUS
72952: PUSH
72953: LD_INT 3
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: LIST
72960: PUSH
72961: LD_VAR 0 1
72965: PUSH
72966: LD_INT 4
72968: MINUS
72969: PUSH
72970: LD_VAR 0 2
72974: PUSH
72975: LD_INT 4
72977: MINUS
72978: PUSH
72979: LD_INT 2
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: LIST
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: ST_TO_ADDR
// end ; 5 :
72994: GO 73134
72996: LD_INT 5
72998: DOUBLE
72999: EQUAL
73000: IFTRUE 73004
73002: GO 73133
73004: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73005: LD_ADDR_VAR 0 5
73009: PUSH
73010: LD_VAR 0 1
73014: PUSH
73015: LD_INT 4
73017: MINUS
73018: PUSH
73019: LD_VAR 0 2
73023: PUSH
73024: LD_INT 1
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: LIST
73031: PUSH
73032: LD_VAR 0 1
73036: PUSH
73037: LD_VAR 0 2
73041: PUSH
73042: LD_INT 4
73044: MINUS
73045: PUSH
73046: LD_INT 3
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: LIST
73053: PUSH
73054: LD_VAR 0 1
73058: PUSH
73059: LD_INT 4
73061: PLUS
73062: PUSH
73063: LD_VAR 0 2
73067: PUSH
73068: LD_INT 4
73070: PLUS
73071: PUSH
73072: LD_INT 5
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: LIST
73079: PUSH
73080: LD_VAR 0 1
73084: PUSH
73085: LD_INT 3
73087: PLUS
73088: PUSH
73089: LD_VAR 0 2
73093: PUSH
73094: LD_INT 4
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: LIST
73101: PUSH
73102: LD_VAR 0 1
73106: PUSH
73107: LD_VAR 0 2
73111: PUSH
73112: LD_INT 3
73114: PLUS
73115: PUSH
73116: LD_INT 0
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: LIST
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: ST_TO_ADDR
// end ; end ;
73131: GO 73134
73133: POP
// result := list ;
73134: LD_ADDR_VAR 0 4
73138: PUSH
73139: LD_VAR 0 5
73143: ST_TO_ADDR
// end ;
73144: LD_VAR 0 4
73148: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73149: LD_INT 0
73151: PPUSH
73152: PPUSH
73153: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73154: LD_VAR 0 1
73158: NOT
73159: PUSH
73160: LD_VAR 0 2
73164: PUSH
73165: LD_INT 1
73167: PUSH
73168: LD_INT 2
73170: PUSH
73171: LD_INT 3
73173: PUSH
73174: LD_INT 4
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: IN
73183: NOT
73184: OR
73185: IFFALSE 73189
// exit ;
73187: GO 73281
// tmp := [ ] ;
73189: LD_ADDR_VAR 0 5
73193: PUSH
73194: EMPTY
73195: ST_TO_ADDR
// for i in units do
73196: LD_ADDR_VAR 0 4
73200: PUSH
73201: LD_VAR 0 1
73205: PUSH
73206: FOR_IN
73207: IFFALSE 73250
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73209: LD_ADDR_VAR 0 5
73213: PUSH
73214: LD_VAR 0 5
73218: PPUSH
73219: LD_VAR 0 5
73223: PUSH
73224: LD_INT 1
73226: PLUS
73227: PPUSH
73228: LD_VAR 0 4
73232: PPUSH
73233: LD_VAR 0 2
73237: PPUSH
73238: CALL_OW 259
73242: PPUSH
73243: CALL_OW 2
73247: ST_TO_ADDR
73248: GO 73206
73250: POP
73251: POP
// if not tmp then
73252: LD_VAR 0 5
73256: NOT
73257: IFFALSE 73261
// exit ;
73259: GO 73281
// result := SortListByListDesc ( units , tmp ) ;
73261: LD_ADDR_VAR 0 3
73265: PUSH
73266: LD_VAR 0 1
73270: PPUSH
73271: LD_VAR 0 5
73275: PPUSH
73276: CALL_OW 77
73280: ST_TO_ADDR
// end ;
73281: LD_VAR 0 3
73285: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73286: LD_INT 0
73288: PPUSH
73289: PPUSH
73290: PPUSH
// result := false ;
73291: LD_ADDR_VAR 0 3
73295: PUSH
73296: LD_INT 0
73298: ST_TO_ADDR
// x := GetX ( building ) ;
73299: LD_ADDR_VAR 0 4
73303: PUSH
73304: LD_VAR 0 2
73308: PPUSH
73309: CALL_OW 250
73313: ST_TO_ADDR
// y := GetY ( building ) ;
73314: LD_ADDR_VAR 0 5
73318: PUSH
73319: LD_VAR 0 2
73323: PPUSH
73324: CALL_OW 251
73328: ST_TO_ADDR
// if not building or not x or not y then
73329: LD_VAR 0 2
73333: NOT
73334: PUSH
73335: LD_VAR 0 4
73339: NOT
73340: OR
73341: PUSH
73342: LD_VAR 0 5
73346: NOT
73347: OR
73348: IFFALSE 73352
// exit ;
73350: GO 73444
// if GetTaskList ( unit ) then
73352: LD_VAR 0 1
73356: PPUSH
73357: CALL_OW 437
73361: IFFALSE 73444
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73363: LD_STRING e
73365: PUSH
73366: LD_VAR 0 1
73370: PPUSH
73371: CALL_OW 437
73375: PUSH
73376: LD_INT 1
73378: ARRAY
73379: PUSH
73380: LD_INT 1
73382: ARRAY
73383: EQUAL
73384: PUSH
73385: LD_VAR 0 4
73389: PUSH
73390: LD_VAR 0 1
73394: PPUSH
73395: CALL_OW 437
73399: PUSH
73400: LD_INT 1
73402: ARRAY
73403: PUSH
73404: LD_INT 2
73406: ARRAY
73407: EQUAL
73408: AND
73409: PUSH
73410: LD_VAR 0 5
73414: PUSH
73415: LD_VAR 0 1
73419: PPUSH
73420: CALL_OW 437
73424: PUSH
73425: LD_INT 1
73427: ARRAY
73428: PUSH
73429: LD_INT 3
73431: ARRAY
73432: EQUAL
73433: AND
73434: IFFALSE 73444
// result := true end ;
73436: LD_ADDR_VAR 0 3
73440: PUSH
73441: LD_INT 1
73443: ST_TO_ADDR
// end ;
73444: LD_VAR 0 3
73448: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73449: LD_INT 0
73451: PPUSH
// result := false ;
73452: LD_ADDR_VAR 0 4
73456: PUSH
73457: LD_INT 0
73459: ST_TO_ADDR
// if GetTaskList ( unit ) then
73460: LD_VAR 0 1
73464: PPUSH
73465: CALL_OW 437
73469: IFFALSE 73552
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73471: LD_STRING M
73473: PUSH
73474: LD_VAR 0 1
73478: PPUSH
73479: CALL_OW 437
73483: PUSH
73484: LD_INT 1
73486: ARRAY
73487: PUSH
73488: LD_INT 1
73490: ARRAY
73491: EQUAL
73492: PUSH
73493: LD_VAR 0 2
73497: PUSH
73498: LD_VAR 0 1
73502: PPUSH
73503: CALL_OW 437
73507: PUSH
73508: LD_INT 1
73510: ARRAY
73511: PUSH
73512: LD_INT 2
73514: ARRAY
73515: EQUAL
73516: AND
73517: PUSH
73518: LD_VAR 0 3
73522: PUSH
73523: LD_VAR 0 1
73527: PPUSH
73528: CALL_OW 437
73532: PUSH
73533: LD_INT 1
73535: ARRAY
73536: PUSH
73537: LD_INT 3
73539: ARRAY
73540: EQUAL
73541: AND
73542: IFFALSE 73552
// result := true ;
73544: LD_ADDR_VAR 0 4
73548: PUSH
73549: LD_INT 1
73551: ST_TO_ADDR
// end ; end ;
73552: LD_VAR 0 4
73556: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73557: LD_INT 0
73559: PPUSH
73560: PPUSH
73561: PPUSH
73562: PPUSH
// if not unit or not area then
73563: LD_VAR 0 1
73567: NOT
73568: PUSH
73569: LD_VAR 0 2
73573: NOT
73574: OR
73575: IFFALSE 73579
// exit ;
73577: GO 73743
// tmp := AreaToList ( area , i ) ;
73579: LD_ADDR_VAR 0 6
73583: PUSH
73584: LD_VAR 0 2
73588: PPUSH
73589: LD_VAR 0 5
73593: PPUSH
73594: CALL_OW 517
73598: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73599: LD_ADDR_VAR 0 5
73603: PUSH
73604: DOUBLE
73605: LD_INT 1
73607: DEC
73608: ST_TO_ADDR
73609: LD_VAR 0 6
73613: PUSH
73614: LD_INT 1
73616: ARRAY
73617: PUSH
73618: FOR_TO
73619: IFFALSE 73741
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73621: LD_ADDR_VAR 0 7
73625: PUSH
73626: LD_VAR 0 6
73630: PUSH
73631: LD_INT 1
73633: ARRAY
73634: PUSH
73635: LD_VAR 0 5
73639: ARRAY
73640: PUSH
73641: LD_VAR 0 6
73645: PUSH
73646: LD_INT 2
73648: ARRAY
73649: PUSH
73650: LD_VAR 0 5
73654: ARRAY
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73660: LD_VAR 0 7
73664: PUSH
73665: LD_INT 1
73667: ARRAY
73668: PPUSH
73669: LD_VAR 0 7
73673: PUSH
73674: LD_INT 2
73676: ARRAY
73677: PPUSH
73678: CALL_OW 428
73682: PUSH
73683: LD_INT 0
73685: EQUAL
73686: IFFALSE 73739
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73688: LD_VAR 0 1
73692: PPUSH
73693: LD_VAR 0 7
73697: PUSH
73698: LD_INT 1
73700: ARRAY
73701: PPUSH
73702: LD_VAR 0 7
73706: PUSH
73707: LD_INT 2
73709: ARRAY
73710: PPUSH
73711: LD_VAR 0 3
73715: PPUSH
73716: CALL_OW 48
// result := IsPlaced ( unit ) ;
73720: LD_ADDR_VAR 0 4
73724: PUSH
73725: LD_VAR 0 1
73729: PPUSH
73730: CALL_OW 305
73734: ST_TO_ADDR
// exit ;
73735: POP
73736: POP
73737: GO 73743
// end ; end ;
73739: GO 73618
73741: POP
73742: POP
// end ;
73743: LD_VAR 0 4
73747: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73748: LD_INT 0
73750: PPUSH
73751: PPUSH
73752: PPUSH
// if not side or side > 8 then
73753: LD_VAR 0 1
73757: NOT
73758: PUSH
73759: LD_VAR 0 1
73763: PUSH
73764: LD_INT 8
73766: GREATER
73767: OR
73768: IFFALSE 73772
// exit ;
73770: GO 73959
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73772: LD_ADDR_VAR 0 4
73776: PUSH
73777: LD_INT 22
73779: PUSH
73780: LD_VAR 0 1
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PUSH
73789: LD_INT 21
73791: PUSH
73792: LD_INT 3
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PPUSH
73803: CALL_OW 69
73807: ST_TO_ADDR
// if not tmp then
73808: LD_VAR 0 4
73812: NOT
73813: IFFALSE 73817
// exit ;
73815: GO 73959
// enable_addtolog := true ;
73817: LD_ADDR_OWVAR 81
73821: PUSH
73822: LD_INT 1
73824: ST_TO_ADDR
// AddToLog ( [ ) ;
73825: LD_STRING [
73827: PPUSH
73828: CALL_OW 561
// for i in tmp do
73832: LD_ADDR_VAR 0 3
73836: PUSH
73837: LD_VAR 0 4
73841: PUSH
73842: FOR_IN
73843: IFFALSE 73950
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73845: LD_STRING [
73847: PUSH
73848: LD_VAR 0 3
73852: PPUSH
73853: CALL_OW 266
73857: STR
73858: PUSH
73859: LD_STRING , 
73861: STR
73862: PUSH
73863: LD_VAR 0 3
73867: PPUSH
73868: CALL_OW 250
73872: STR
73873: PUSH
73874: LD_STRING , 
73876: STR
73877: PUSH
73878: LD_VAR 0 3
73882: PPUSH
73883: CALL_OW 251
73887: STR
73888: PUSH
73889: LD_STRING , 
73891: STR
73892: PUSH
73893: LD_VAR 0 3
73897: PPUSH
73898: CALL_OW 254
73902: STR
73903: PUSH
73904: LD_STRING , 
73906: STR
73907: PUSH
73908: LD_VAR 0 3
73912: PPUSH
73913: LD_INT 1
73915: PPUSH
73916: CALL_OW 268
73920: STR
73921: PUSH
73922: LD_STRING , 
73924: STR
73925: PUSH
73926: LD_VAR 0 3
73930: PPUSH
73931: LD_INT 2
73933: PPUSH
73934: CALL_OW 268
73938: STR
73939: PUSH
73940: LD_STRING ],
73942: STR
73943: PPUSH
73944: CALL_OW 561
// end ;
73948: GO 73842
73950: POP
73951: POP
// AddToLog ( ]; ) ;
73952: LD_STRING ];
73954: PPUSH
73955: CALL_OW 561
// end ;
73959: LD_VAR 0 2
73963: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73964: LD_INT 0
73966: PPUSH
73967: PPUSH
73968: PPUSH
73969: PPUSH
73970: PPUSH
// if not area or not rate or not max then
73971: LD_VAR 0 1
73975: NOT
73976: PUSH
73977: LD_VAR 0 2
73981: NOT
73982: OR
73983: PUSH
73984: LD_VAR 0 4
73988: NOT
73989: OR
73990: IFFALSE 73994
// exit ;
73992: GO 74186
// while 1 do
73994: LD_INT 1
73996: IFFALSE 74186
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73998: LD_ADDR_VAR 0 9
74002: PUSH
74003: LD_VAR 0 1
74007: PPUSH
74008: LD_INT 1
74010: PPUSH
74011: CALL_OW 287
74015: PUSH
74016: LD_INT 10
74018: MUL
74019: ST_TO_ADDR
// r := rate / 10 ;
74020: LD_ADDR_VAR 0 7
74024: PUSH
74025: LD_VAR 0 2
74029: PUSH
74030: LD_INT 10
74032: DIVREAL
74033: ST_TO_ADDR
// time := 1 1$00 ;
74034: LD_ADDR_VAR 0 8
74038: PUSH
74039: LD_INT 2100
74041: ST_TO_ADDR
// if amount < min then
74042: LD_VAR 0 9
74046: PUSH
74047: LD_VAR 0 3
74051: LESS
74052: IFFALSE 74070
// r := r * 2 else
74054: LD_ADDR_VAR 0 7
74058: PUSH
74059: LD_VAR 0 7
74063: PUSH
74064: LD_INT 2
74066: MUL
74067: ST_TO_ADDR
74068: GO 74096
// if amount > max then
74070: LD_VAR 0 9
74074: PUSH
74075: LD_VAR 0 4
74079: GREATER
74080: IFFALSE 74096
// r := r / 2 ;
74082: LD_ADDR_VAR 0 7
74086: PUSH
74087: LD_VAR 0 7
74091: PUSH
74092: LD_INT 2
74094: DIVREAL
74095: ST_TO_ADDR
// time := time / r ;
74096: LD_ADDR_VAR 0 8
74100: PUSH
74101: LD_VAR 0 8
74105: PUSH
74106: LD_VAR 0 7
74110: DIVREAL
74111: ST_TO_ADDR
// if time < 0 then
74112: LD_VAR 0 8
74116: PUSH
74117: LD_INT 0
74119: LESS
74120: IFFALSE 74137
// time := time * - 1 ;
74122: LD_ADDR_VAR 0 8
74126: PUSH
74127: LD_VAR 0 8
74131: PUSH
74132: LD_INT 1
74134: NEG
74135: MUL
74136: ST_TO_ADDR
// wait ( time ) ;
74137: LD_VAR 0 8
74141: PPUSH
74142: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
74146: LD_INT 35
74148: PPUSH
74149: LD_INT 875
74151: PPUSH
74152: CALL_OW 12
74156: PPUSH
74157: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74161: LD_INT 1
74163: PPUSH
74164: LD_INT 5
74166: PPUSH
74167: CALL_OW 12
74171: PPUSH
74172: LD_VAR 0 1
74176: PPUSH
74177: LD_INT 1
74179: PPUSH
74180: CALL_OW 55
// end ;
74184: GO 73994
// end ;
74186: LD_VAR 0 5
74190: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74191: LD_INT 0
74193: PPUSH
74194: PPUSH
74195: PPUSH
74196: PPUSH
74197: PPUSH
74198: PPUSH
74199: PPUSH
74200: PPUSH
// if not turrets or not factories then
74201: LD_VAR 0 1
74205: NOT
74206: PUSH
74207: LD_VAR 0 2
74211: NOT
74212: OR
74213: IFFALSE 74217
// exit ;
74215: GO 74524
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74217: LD_ADDR_VAR 0 10
74221: PUSH
74222: LD_INT 5
74224: PUSH
74225: LD_INT 6
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 2
74234: PUSH
74235: LD_INT 4
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 3
74244: PUSH
74245: LD_INT 5
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 24
74259: PUSH
74260: LD_INT 25
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 23
74269: PUSH
74270: LD_INT 27
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PUSH
74281: LD_INT 42
74283: PUSH
74284: LD_INT 43
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: LD_INT 44
74293: PUSH
74294: LD_INT 46
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: LD_INT 45
74303: PUSH
74304: LD_INT 47
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: LIST
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: LIST
74320: ST_TO_ADDR
// result := [ ] ;
74321: LD_ADDR_VAR 0 3
74325: PUSH
74326: EMPTY
74327: ST_TO_ADDR
// for i in turrets do
74328: LD_ADDR_VAR 0 4
74332: PUSH
74333: LD_VAR 0 1
74337: PUSH
74338: FOR_IN
74339: IFFALSE 74522
// begin nat := GetNation ( i ) ;
74341: LD_ADDR_VAR 0 7
74345: PUSH
74346: LD_VAR 0 4
74350: PPUSH
74351: CALL_OW 248
74355: ST_TO_ADDR
// weapon := 0 ;
74356: LD_ADDR_VAR 0 8
74360: PUSH
74361: LD_INT 0
74363: ST_TO_ADDR
// if not nat then
74364: LD_VAR 0 7
74368: NOT
74369: IFFALSE 74373
// continue ;
74371: GO 74338
// for j in list [ nat ] do
74373: LD_ADDR_VAR 0 5
74377: PUSH
74378: LD_VAR 0 10
74382: PUSH
74383: LD_VAR 0 7
74387: ARRAY
74388: PUSH
74389: FOR_IN
74390: IFFALSE 74431
// if GetBWeapon ( i ) = j [ 1 ] then
74392: LD_VAR 0 4
74396: PPUSH
74397: CALL_OW 269
74401: PUSH
74402: LD_VAR 0 5
74406: PUSH
74407: LD_INT 1
74409: ARRAY
74410: EQUAL
74411: IFFALSE 74429
// begin weapon := j [ 2 ] ;
74413: LD_ADDR_VAR 0 8
74417: PUSH
74418: LD_VAR 0 5
74422: PUSH
74423: LD_INT 2
74425: ARRAY
74426: ST_TO_ADDR
// break ;
74427: GO 74431
// end ;
74429: GO 74389
74431: POP
74432: POP
// if not weapon then
74433: LD_VAR 0 8
74437: NOT
74438: IFFALSE 74442
// continue ;
74440: GO 74338
// for k in factories do
74442: LD_ADDR_VAR 0 6
74446: PUSH
74447: LD_VAR 0 2
74451: PUSH
74452: FOR_IN
74453: IFFALSE 74518
// begin weapons := AvailableWeaponList ( k ) ;
74455: LD_ADDR_VAR 0 9
74459: PUSH
74460: LD_VAR 0 6
74464: PPUSH
74465: CALL_OW 478
74469: ST_TO_ADDR
// if not weapons then
74470: LD_VAR 0 9
74474: NOT
74475: IFFALSE 74479
// continue ;
74477: GO 74452
// if weapon in weapons then
74479: LD_VAR 0 8
74483: PUSH
74484: LD_VAR 0 9
74488: IN
74489: IFFALSE 74516
// begin result := [ i , weapon ] ;
74491: LD_ADDR_VAR 0 3
74495: PUSH
74496: LD_VAR 0 4
74500: PUSH
74501: LD_VAR 0 8
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: ST_TO_ADDR
// exit ;
74510: POP
74511: POP
74512: POP
74513: POP
74514: GO 74524
// end ; end ;
74516: GO 74452
74518: POP
74519: POP
// end ;
74520: GO 74338
74522: POP
74523: POP
// end ;
74524: LD_VAR 0 3
74528: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74529: LD_INT 0
74531: PPUSH
// if not side or side > 8 then
74532: LD_VAR 0 3
74536: NOT
74537: PUSH
74538: LD_VAR 0 3
74542: PUSH
74543: LD_INT 8
74545: GREATER
74546: OR
74547: IFFALSE 74551
// exit ;
74549: GO 74610
// if not range then
74551: LD_VAR 0 4
74555: NOT
74556: IFFALSE 74567
// range := - 12 ;
74558: LD_ADDR_VAR 0 4
74562: PUSH
74563: LD_INT 12
74565: NEG
74566: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74567: LD_VAR 0 1
74571: PPUSH
74572: LD_VAR 0 2
74576: PPUSH
74577: LD_VAR 0 3
74581: PPUSH
74582: LD_VAR 0 4
74586: PPUSH
74587: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74591: LD_VAR 0 1
74595: PPUSH
74596: LD_VAR 0 2
74600: PPUSH
74601: LD_VAR 0 3
74605: PPUSH
74606: CALL_OW 331
// end ;
74610: LD_VAR 0 5
74614: RET
// export function Video ( mode ) ; begin
74615: LD_INT 0
74617: PPUSH
// ingame_video = mode ;
74618: LD_ADDR_OWVAR 52
74622: PUSH
74623: LD_VAR 0 1
74627: ST_TO_ADDR
// interface_hidden = mode ;
74628: LD_ADDR_OWVAR 54
74632: PUSH
74633: LD_VAR 0 1
74637: ST_TO_ADDR
// end ;
74638: LD_VAR 0 2
74642: RET
// export function Join ( array , element ) ; begin
74643: LD_INT 0
74645: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74646: LD_ADDR_VAR 0 3
74650: PUSH
74651: LD_VAR 0 1
74655: PPUSH
74656: LD_VAR 0 1
74660: PUSH
74661: LD_INT 1
74663: PLUS
74664: PPUSH
74665: LD_VAR 0 2
74669: PPUSH
74670: CALL_OW 1
74674: ST_TO_ADDR
// end ;
74675: LD_VAR 0 3
74679: RET
// export function JoinUnion ( array , element ) ; begin
74680: LD_INT 0
74682: PPUSH
// result := array union element ;
74683: LD_ADDR_VAR 0 3
74687: PUSH
74688: LD_VAR 0 1
74692: PUSH
74693: LD_VAR 0 2
74697: UNION
74698: ST_TO_ADDR
// end ;
74699: LD_VAR 0 3
74703: RET
// export function GetBehemoths ( side ) ; begin
74704: LD_INT 0
74706: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74707: LD_ADDR_VAR 0 2
74711: PUSH
74712: LD_INT 22
74714: PUSH
74715: LD_VAR 0 1
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: LD_INT 31
74726: PUSH
74727: LD_INT 25
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PPUSH
74738: CALL_OW 69
74742: ST_TO_ADDR
// end ;
74743: LD_VAR 0 2
74747: RET
// export function Shuffle ( array ) ; var i , index ; begin
74748: LD_INT 0
74750: PPUSH
74751: PPUSH
74752: PPUSH
// result := [ ] ;
74753: LD_ADDR_VAR 0 2
74757: PUSH
74758: EMPTY
74759: ST_TO_ADDR
// if not array then
74760: LD_VAR 0 1
74764: NOT
74765: IFFALSE 74769
// exit ;
74767: GO 74868
// Randomize ;
74769: CALL_OW 10
// for i = array downto 1 do
74773: LD_ADDR_VAR 0 3
74777: PUSH
74778: DOUBLE
74779: LD_VAR 0 1
74783: INC
74784: ST_TO_ADDR
74785: LD_INT 1
74787: PUSH
74788: FOR_DOWNTO
74789: IFFALSE 74866
// begin index := rand ( 1 , array ) ;
74791: LD_ADDR_VAR 0 4
74795: PUSH
74796: LD_INT 1
74798: PPUSH
74799: LD_VAR 0 1
74803: PPUSH
74804: CALL_OW 12
74808: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74809: LD_ADDR_VAR 0 2
74813: PUSH
74814: LD_VAR 0 2
74818: PPUSH
74819: LD_VAR 0 2
74823: PUSH
74824: LD_INT 1
74826: PLUS
74827: PPUSH
74828: LD_VAR 0 1
74832: PUSH
74833: LD_VAR 0 4
74837: ARRAY
74838: PPUSH
74839: CALL_OW 2
74843: ST_TO_ADDR
// array := Delete ( array , index ) ;
74844: LD_ADDR_VAR 0 1
74848: PUSH
74849: LD_VAR 0 1
74853: PPUSH
74854: LD_VAR 0 4
74858: PPUSH
74859: CALL_OW 3
74863: ST_TO_ADDR
// end ;
74864: GO 74788
74866: POP
74867: POP
// end ;
74868: LD_VAR 0 2
74872: RET
// export function GetBaseMaterials ( base ) ; begin
74873: LD_INT 0
74875: PPUSH
// result := [ 0 , 0 , 0 ] ;
74876: LD_ADDR_VAR 0 2
74880: PUSH
74881: LD_INT 0
74883: PUSH
74884: LD_INT 0
74886: PUSH
74887: LD_INT 0
74889: PUSH
74890: EMPTY
74891: LIST
74892: LIST
74893: LIST
74894: ST_TO_ADDR
// if not base then
74895: LD_VAR 0 1
74899: NOT
74900: IFFALSE 74904
// exit ;
74902: GO 74953
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74904: LD_ADDR_VAR 0 2
74908: PUSH
74909: LD_VAR 0 1
74913: PPUSH
74914: LD_INT 1
74916: PPUSH
74917: CALL_OW 275
74921: PUSH
74922: LD_VAR 0 1
74926: PPUSH
74927: LD_INT 2
74929: PPUSH
74930: CALL_OW 275
74934: PUSH
74935: LD_VAR 0 1
74939: PPUSH
74940: LD_INT 3
74942: PPUSH
74943: CALL_OW 275
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: LIST
74952: ST_TO_ADDR
// end ;
74953: LD_VAR 0 2
74957: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74958: LD_INT 0
74960: PPUSH
74961: PPUSH
// result := array ;
74962: LD_ADDR_VAR 0 3
74966: PUSH
74967: LD_VAR 0 1
74971: ST_TO_ADDR
// if size > 0 then
74972: LD_VAR 0 2
74976: PUSH
74977: LD_INT 0
74979: GREATER
74980: IFFALSE 75026
// for i := array downto size do
74982: LD_ADDR_VAR 0 4
74986: PUSH
74987: DOUBLE
74988: LD_VAR 0 1
74992: INC
74993: ST_TO_ADDR
74994: LD_VAR 0 2
74998: PUSH
74999: FOR_DOWNTO
75000: IFFALSE 75024
// result := Delete ( result , result ) ;
75002: LD_ADDR_VAR 0 3
75006: PUSH
75007: LD_VAR 0 3
75011: PPUSH
75012: LD_VAR 0 3
75016: PPUSH
75017: CALL_OW 3
75021: ST_TO_ADDR
75022: GO 74999
75024: POP
75025: POP
// end ;
75026: LD_VAR 0 3
75030: RET
// export function ComExit ( unit ) ; var tmp ; begin
75031: LD_INT 0
75033: PPUSH
75034: PPUSH
// if not IsInUnit ( unit ) then
75035: LD_VAR 0 1
75039: PPUSH
75040: CALL_OW 310
75044: NOT
75045: IFFALSE 75049
// exit ;
75047: GO 75109
// tmp := IsInUnit ( unit ) ;
75049: LD_ADDR_VAR 0 3
75053: PUSH
75054: LD_VAR 0 1
75058: PPUSH
75059: CALL_OW 310
75063: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75064: LD_VAR 0 3
75068: PPUSH
75069: CALL_OW 247
75073: PUSH
75074: LD_INT 2
75076: EQUAL
75077: IFFALSE 75090
// ComExitVehicle ( unit ) else
75079: LD_VAR 0 1
75083: PPUSH
75084: CALL_OW 121
75088: GO 75099
// ComExitBuilding ( unit ) ;
75090: LD_VAR 0 1
75094: PPUSH
75095: CALL_OW 122
// result := tmp ;
75099: LD_ADDR_VAR 0 2
75103: PUSH
75104: LD_VAR 0 3
75108: ST_TO_ADDR
// end ;
75109: LD_VAR 0 2
75113: RET
// export function ComExitAll ( units ) ; var i ; begin
75114: LD_INT 0
75116: PPUSH
75117: PPUSH
// if not units then
75118: LD_VAR 0 1
75122: NOT
75123: IFFALSE 75127
// exit ;
75125: GO 75153
// for i in units do
75127: LD_ADDR_VAR 0 3
75131: PUSH
75132: LD_VAR 0 1
75136: PUSH
75137: FOR_IN
75138: IFFALSE 75151
// ComExit ( i ) ;
75140: LD_VAR 0 3
75144: PPUSH
75145: CALL 75031 0 1
75149: GO 75137
75151: POP
75152: POP
// end ;
75153: LD_VAR 0 2
75157: RET
// export function ResetHc ; begin
75158: LD_INT 0
75160: PPUSH
// InitHc ;
75161: CALL_OW 19
// hc_importance := 0 ;
75165: LD_ADDR_OWVAR 32
75169: PUSH
75170: LD_INT 0
75172: ST_TO_ADDR
// end ;
75173: LD_VAR 0 1
75177: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75178: LD_INT 0
75180: PPUSH
75181: PPUSH
75182: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75183: LD_ADDR_VAR 0 6
75187: PUSH
75188: LD_VAR 0 1
75192: PUSH
75193: LD_VAR 0 3
75197: PLUS
75198: PUSH
75199: LD_INT 2
75201: DIV
75202: ST_TO_ADDR
// if _x < 0 then
75203: LD_VAR 0 6
75207: PUSH
75208: LD_INT 0
75210: LESS
75211: IFFALSE 75228
// _x := _x * - 1 ;
75213: LD_ADDR_VAR 0 6
75217: PUSH
75218: LD_VAR 0 6
75222: PUSH
75223: LD_INT 1
75225: NEG
75226: MUL
75227: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75228: LD_ADDR_VAR 0 7
75232: PUSH
75233: LD_VAR 0 2
75237: PUSH
75238: LD_VAR 0 4
75242: PLUS
75243: PUSH
75244: LD_INT 2
75246: DIV
75247: ST_TO_ADDR
// if _y < 0 then
75248: LD_VAR 0 7
75252: PUSH
75253: LD_INT 0
75255: LESS
75256: IFFALSE 75273
// _y := _y * - 1 ;
75258: LD_ADDR_VAR 0 7
75262: PUSH
75263: LD_VAR 0 7
75267: PUSH
75268: LD_INT 1
75270: NEG
75271: MUL
75272: ST_TO_ADDR
// result := [ _x , _y ] ;
75273: LD_ADDR_VAR 0 5
75277: PUSH
75278: LD_VAR 0 6
75282: PUSH
75283: LD_VAR 0 7
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: ST_TO_ADDR
// end ;
75292: LD_VAR 0 5
75296: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75297: LD_INT 0
75299: PPUSH
75300: PPUSH
75301: PPUSH
75302: PPUSH
// task := GetTaskList ( unit ) ;
75303: LD_ADDR_VAR 0 7
75307: PUSH
75308: LD_VAR 0 1
75312: PPUSH
75313: CALL_OW 437
75317: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75318: LD_VAR 0 7
75322: NOT
75323: PUSH
75324: LD_VAR 0 1
75328: PPUSH
75329: LD_VAR 0 2
75333: PPUSH
75334: CALL_OW 308
75338: NOT
75339: AND
75340: IFFALSE 75344
// exit ;
75342: GO 75462
// if IsInArea ( unit , area ) then
75344: LD_VAR 0 1
75348: PPUSH
75349: LD_VAR 0 2
75353: PPUSH
75354: CALL_OW 308
75358: IFFALSE 75376
// begin ComMoveToArea ( unit , goAway ) ;
75360: LD_VAR 0 1
75364: PPUSH
75365: LD_VAR 0 3
75369: PPUSH
75370: CALL_OW 113
// exit ;
75374: GO 75462
// end ; if task [ 1 ] [ 1 ] <> M then
75376: LD_VAR 0 7
75380: PUSH
75381: LD_INT 1
75383: ARRAY
75384: PUSH
75385: LD_INT 1
75387: ARRAY
75388: PUSH
75389: LD_STRING M
75391: NONEQUAL
75392: IFFALSE 75396
// exit ;
75394: GO 75462
// x := task [ 1 ] [ 2 ] ;
75396: LD_ADDR_VAR 0 5
75400: PUSH
75401: LD_VAR 0 7
75405: PUSH
75406: LD_INT 1
75408: ARRAY
75409: PUSH
75410: LD_INT 2
75412: ARRAY
75413: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75414: LD_ADDR_VAR 0 6
75418: PUSH
75419: LD_VAR 0 7
75423: PUSH
75424: LD_INT 1
75426: ARRAY
75427: PUSH
75428: LD_INT 3
75430: ARRAY
75431: ST_TO_ADDR
// if InArea ( x , y , area ) then
75432: LD_VAR 0 5
75436: PPUSH
75437: LD_VAR 0 6
75441: PPUSH
75442: LD_VAR 0 2
75446: PPUSH
75447: CALL_OW 309
75451: IFFALSE 75462
// ComStop ( unit ) ;
75453: LD_VAR 0 1
75457: PPUSH
75458: CALL_OW 141
// end ;
75462: LD_VAR 0 4
75466: RET
// export function Abs ( value ) ; begin
75467: LD_INT 0
75469: PPUSH
// result := value ;
75470: LD_ADDR_VAR 0 2
75474: PUSH
75475: LD_VAR 0 1
75479: ST_TO_ADDR
// if value < 0 then
75480: LD_VAR 0 1
75484: PUSH
75485: LD_INT 0
75487: LESS
75488: IFFALSE 75505
// result := value * - 1 ;
75490: LD_ADDR_VAR 0 2
75494: PUSH
75495: LD_VAR 0 1
75499: PUSH
75500: LD_INT 1
75502: NEG
75503: MUL
75504: ST_TO_ADDR
// end ;
75505: LD_VAR 0 2
75509: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75510: LD_INT 0
75512: PPUSH
75513: PPUSH
75514: PPUSH
75515: PPUSH
75516: PPUSH
75517: PPUSH
75518: PPUSH
75519: PPUSH
// if not unit or not building then
75520: LD_VAR 0 1
75524: NOT
75525: PUSH
75526: LD_VAR 0 2
75530: NOT
75531: OR
75532: IFFALSE 75536
// exit ;
75534: GO 75762
// x := GetX ( building ) ;
75536: LD_ADDR_VAR 0 4
75540: PUSH
75541: LD_VAR 0 2
75545: PPUSH
75546: CALL_OW 250
75550: ST_TO_ADDR
// y := GetY ( building ) ;
75551: LD_ADDR_VAR 0 6
75555: PUSH
75556: LD_VAR 0 2
75560: PPUSH
75561: CALL_OW 251
75565: ST_TO_ADDR
// d := GetDir ( building ) ;
75566: LD_ADDR_VAR 0 8
75570: PUSH
75571: LD_VAR 0 2
75575: PPUSH
75576: CALL_OW 254
75580: ST_TO_ADDR
// r := 4 ;
75581: LD_ADDR_VAR 0 9
75585: PUSH
75586: LD_INT 4
75588: ST_TO_ADDR
// for i := 1 to 5 do
75589: LD_ADDR_VAR 0 10
75593: PUSH
75594: DOUBLE
75595: LD_INT 1
75597: DEC
75598: ST_TO_ADDR
75599: LD_INT 5
75601: PUSH
75602: FOR_TO
75603: IFFALSE 75760
// begin _x := ShiftX ( x , d , r + i ) ;
75605: LD_ADDR_VAR 0 5
75609: PUSH
75610: LD_VAR 0 4
75614: PPUSH
75615: LD_VAR 0 8
75619: PPUSH
75620: LD_VAR 0 9
75624: PUSH
75625: LD_VAR 0 10
75629: PLUS
75630: PPUSH
75631: CALL_OW 272
75635: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75636: LD_ADDR_VAR 0 7
75640: PUSH
75641: LD_VAR 0 6
75645: PPUSH
75646: LD_VAR 0 8
75650: PPUSH
75651: LD_VAR 0 9
75655: PUSH
75656: LD_VAR 0 10
75660: PLUS
75661: PPUSH
75662: CALL_OW 273
75666: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75667: LD_VAR 0 5
75671: PPUSH
75672: LD_VAR 0 7
75676: PPUSH
75677: CALL_OW 488
75681: PUSH
75682: LD_VAR 0 5
75686: PPUSH
75687: LD_VAR 0 7
75691: PPUSH
75692: CALL_OW 428
75696: PPUSH
75697: CALL_OW 247
75701: PUSH
75702: LD_INT 3
75704: PUSH
75705: LD_INT 2
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: IN
75712: NOT
75713: AND
75714: IFFALSE 75758
// begin ComMoveXY ( unit , _x , _y ) ;
75716: LD_VAR 0 1
75720: PPUSH
75721: LD_VAR 0 5
75725: PPUSH
75726: LD_VAR 0 7
75730: PPUSH
75731: CALL_OW 111
// result := [ _x , _y ] ;
75735: LD_ADDR_VAR 0 3
75739: PUSH
75740: LD_VAR 0 5
75744: PUSH
75745: LD_VAR 0 7
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: ST_TO_ADDR
// exit ;
75754: POP
75755: POP
75756: GO 75762
// end ; end ;
75758: GO 75602
75760: POP
75761: POP
// end ;
75762: LD_VAR 0 3
75766: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75767: LD_INT 0
75769: PPUSH
75770: PPUSH
75771: PPUSH
// result := 0 ;
75772: LD_ADDR_VAR 0 3
75776: PUSH
75777: LD_INT 0
75779: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75780: LD_VAR 0 1
75784: PUSH
75785: LD_INT 0
75787: LESS
75788: PUSH
75789: LD_VAR 0 1
75793: PUSH
75794: LD_INT 8
75796: GREATER
75797: OR
75798: PUSH
75799: LD_VAR 0 2
75803: PUSH
75804: LD_INT 0
75806: LESS
75807: OR
75808: PUSH
75809: LD_VAR 0 2
75813: PUSH
75814: LD_INT 8
75816: GREATER
75817: OR
75818: IFFALSE 75822
// exit ;
75820: GO 75897
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75822: LD_ADDR_VAR 0 4
75826: PUSH
75827: LD_INT 22
75829: PUSH
75830: LD_VAR 0 2
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PPUSH
75839: CALL_OW 69
75843: PUSH
75844: FOR_IN
75845: IFFALSE 75895
// begin un := UnitShoot ( i ) ;
75847: LD_ADDR_VAR 0 5
75851: PUSH
75852: LD_VAR 0 4
75856: PPUSH
75857: CALL_OW 504
75861: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75862: LD_VAR 0 5
75866: PPUSH
75867: CALL_OW 255
75871: PUSH
75872: LD_VAR 0 1
75876: EQUAL
75877: IFFALSE 75893
// begin result := un ;
75879: LD_ADDR_VAR 0 3
75883: PUSH
75884: LD_VAR 0 5
75888: ST_TO_ADDR
// exit ;
75889: POP
75890: POP
75891: GO 75897
// end ; end ;
75893: GO 75844
75895: POP
75896: POP
// end ;
75897: LD_VAR 0 3
75901: RET
// export function GetCargoBay ( units ) ; begin
75902: LD_INT 0
75904: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75905: LD_ADDR_VAR 0 2
75909: PUSH
75910: LD_VAR 0 1
75914: PPUSH
75915: LD_INT 2
75917: PUSH
75918: LD_INT 34
75920: PUSH
75921: LD_INT 12
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 34
75930: PUSH
75931: LD_INT 51
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: PUSH
75938: LD_INT 34
75940: PUSH
75941: LD_INT 32
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: PUSH
75948: LD_INT 34
75950: PUSH
75951: LD_EXP 136
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: PPUSH
75967: CALL_OW 72
75971: ST_TO_ADDR
// end ;
75972: LD_VAR 0 2
75976: RET
// export function Negate ( value ) ; begin
75977: LD_INT 0
75979: PPUSH
// result := not value ;
75980: LD_ADDR_VAR 0 2
75984: PUSH
75985: LD_VAR 0 1
75989: NOT
75990: ST_TO_ADDR
// end ;
75991: LD_VAR 0 2
75995: RET
// export function Inc ( value ) ; begin
75996: LD_INT 0
75998: PPUSH
// result := value + 1 ;
75999: LD_ADDR_VAR 0 2
76003: PUSH
76004: LD_VAR 0 1
76008: PUSH
76009: LD_INT 1
76011: PLUS
76012: ST_TO_ADDR
// end ;
76013: LD_VAR 0 2
76017: RET
// export function Dec ( value ) ; begin
76018: LD_INT 0
76020: PPUSH
// result := value - 1 ;
76021: LD_ADDR_VAR 0 2
76025: PUSH
76026: LD_VAR 0 1
76030: PUSH
76031: LD_INT 1
76033: MINUS
76034: ST_TO_ADDR
// end ;
76035: LD_VAR 0 2
76039: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76040: LD_INT 0
76042: PPUSH
76043: PPUSH
76044: PPUSH
76045: PPUSH
76046: PPUSH
76047: PPUSH
76048: PPUSH
76049: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76050: LD_VAR 0 1
76054: PPUSH
76055: LD_VAR 0 2
76059: PPUSH
76060: CALL_OW 488
76064: NOT
76065: PUSH
76066: LD_VAR 0 3
76070: PPUSH
76071: LD_VAR 0 4
76075: PPUSH
76076: CALL_OW 488
76080: NOT
76081: OR
76082: IFFALSE 76095
// begin result := - 1 ;
76084: LD_ADDR_VAR 0 5
76088: PUSH
76089: LD_INT 1
76091: NEG
76092: ST_TO_ADDR
// exit ;
76093: GO 76330
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76095: LD_ADDR_VAR 0 12
76099: PUSH
76100: LD_VAR 0 1
76104: PPUSH
76105: LD_VAR 0 2
76109: PPUSH
76110: LD_VAR 0 3
76114: PPUSH
76115: LD_VAR 0 4
76119: PPUSH
76120: CALL 75178 0 4
76124: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76125: LD_ADDR_VAR 0 11
76129: PUSH
76130: LD_VAR 0 1
76134: PPUSH
76135: LD_VAR 0 2
76139: PPUSH
76140: LD_VAR 0 12
76144: PUSH
76145: LD_INT 1
76147: ARRAY
76148: PPUSH
76149: LD_VAR 0 12
76153: PUSH
76154: LD_INT 2
76156: ARRAY
76157: PPUSH
76158: CALL_OW 298
76162: ST_TO_ADDR
// distance := 9999 ;
76163: LD_ADDR_VAR 0 10
76167: PUSH
76168: LD_INT 9999
76170: ST_TO_ADDR
// for i := 0 to 5 do
76171: LD_ADDR_VAR 0 6
76175: PUSH
76176: DOUBLE
76177: LD_INT 0
76179: DEC
76180: ST_TO_ADDR
76181: LD_INT 5
76183: PUSH
76184: FOR_TO
76185: IFFALSE 76328
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76187: LD_ADDR_VAR 0 7
76191: PUSH
76192: LD_VAR 0 1
76196: PPUSH
76197: LD_VAR 0 6
76201: PPUSH
76202: LD_VAR 0 11
76206: PPUSH
76207: CALL_OW 272
76211: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76212: LD_ADDR_VAR 0 8
76216: PUSH
76217: LD_VAR 0 2
76221: PPUSH
76222: LD_VAR 0 6
76226: PPUSH
76227: LD_VAR 0 11
76231: PPUSH
76232: CALL_OW 273
76236: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76237: LD_VAR 0 7
76241: PPUSH
76242: LD_VAR 0 8
76246: PPUSH
76247: CALL_OW 488
76251: NOT
76252: IFFALSE 76256
// continue ;
76254: GO 76184
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76256: LD_ADDR_VAR 0 9
76260: PUSH
76261: LD_VAR 0 12
76265: PUSH
76266: LD_INT 1
76268: ARRAY
76269: PPUSH
76270: LD_VAR 0 12
76274: PUSH
76275: LD_INT 2
76277: ARRAY
76278: PPUSH
76279: LD_VAR 0 7
76283: PPUSH
76284: LD_VAR 0 8
76288: PPUSH
76289: CALL_OW 298
76293: ST_TO_ADDR
// if tmp < distance then
76294: LD_VAR 0 9
76298: PUSH
76299: LD_VAR 0 10
76303: LESS
76304: IFFALSE 76326
// begin result := i ;
76306: LD_ADDR_VAR 0 5
76310: PUSH
76311: LD_VAR 0 6
76315: ST_TO_ADDR
// distance := tmp ;
76316: LD_ADDR_VAR 0 10
76320: PUSH
76321: LD_VAR 0 9
76325: ST_TO_ADDR
// end ; end ;
76326: GO 76184
76328: POP
76329: POP
// end ;
76330: LD_VAR 0 5
76334: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76335: LD_INT 0
76337: PPUSH
76338: PPUSH
// if not driver or not IsInUnit ( driver ) then
76339: LD_VAR 0 1
76343: NOT
76344: PUSH
76345: LD_VAR 0 1
76349: PPUSH
76350: CALL_OW 310
76354: NOT
76355: OR
76356: IFFALSE 76360
// exit ;
76358: GO 76450
// vehicle := IsInUnit ( driver ) ;
76360: LD_ADDR_VAR 0 3
76364: PUSH
76365: LD_VAR 0 1
76369: PPUSH
76370: CALL_OW 310
76374: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76375: LD_VAR 0 1
76379: PPUSH
76380: LD_STRING \
76382: PUSH
76383: LD_INT 0
76385: PUSH
76386: LD_INT 0
76388: PUSH
76389: LD_INT 0
76391: PUSH
76392: LD_INT 0
76394: PUSH
76395: LD_INT 0
76397: PUSH
76398: LD_INT 0
76400: PUSH
76401: EMPTY
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: LIST
76408: LIST
76409: PUSH
76410: LD_STRING E
76412: PUSH
76413: LD_INT 0
76415: PUSH
76416: LD_INT 0
76418: PUSH
76419: LD_VAR 0 3
76423: PUSH
76424: LD_INT 0
76426: PUSH
76427: LD_INT 0
76429: PUSH
76430: LD_INT 0
76432: PUSH
76433: EMPTY
76434: LIST
76435: LIST
76436: LIST
76437: LIST
76438: LIST
76439: LIST
76440: LIST
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PPUSH
76446: CALL_OW 446
// end ;
76450: LD_VAR 0 2
76454: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76455: LD_INT 0
76457: PPUSH
76458: PPUSH
// if not driver or not IsInUnit ( driver ) then
76459: LD_VAR 0 1
76463: NOT
76464: PUSH
76465: LD_VAR 0 1
76469: PPUSH
76470: CALL_OW 310
76474: NOT
76475: OR
76476: IFFALSE 76480
// exit ;
76478: GO 76570
// vehicle := IsInUnit ( driver ) ;
76480: LD_ADDR_VAR 0 3
76484: PUSH
76485: LD_VAR 0 1
76489: PPUSH
76490: CALL_OW 310
76494: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76495: LD_VAR 0 1
76499: PPUSH
76500: LD_STRING \
76502: PUSH
76503: LD_INT 0
76505: PUSH
76506: LD_INT 0
76508: PUSH
76509: LD_INT 0
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: LD_INT 0
76517: PUSH
76518: LD_INT 0
76520: PUSH
76521: EMPTY
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: PUSH
76530: LD_STRING E
76532: PUSH
76533: LD_INT 0
76535: PUSH
76536: LD_INT 0
76538: PUSH
76539: LD_VAR 0 3
76543: PUSH
76544: LD_INT 0
76546: PUSH
76547: LD_INT 0
76549: PUSH
76550: LD_INT 0
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: LIST
76557: LIST
76558: LIST
76559: LIST
76560: LIST
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: PPUSH
76566: CALL_OW 447
// end ;
76570: LD_VAR 0 2
76574: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76575: LD_INT 0
76577: PPUSH
76578: PPUSH
76579: PPUSH
// tmp := [ ] ;
76580: LD_ADDR_VAR 0 5
76584: PUSH
76585: EMPTY
76586: ST_TO_ADDR
// for i in units do
76587: LD_ADDR_VAR 0 4
76591: PUSH
76592: LD_VAR 0 1
76596: PUSH
76597: FOR_IN
76598: IFFALSE 76636
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76600: LD_ADDR_VAR 0 5
76604: PUSH
76605: LD_VAR 0 5
76609: PPUSH
76610: LD_VAR 0 5
76614: PUSH
76615: LD_INT 1
76617: PLUS
76618: PPUSH
76619: LD_VAR 0 4
76623: PPUSH
76624: CALL_OW 256
76628: PPUSH
76629: CALL_OW 2
76633: ST_TO_ADDR
76634: GO 76597
76636: POP
76637: POP
// if not tmp then
76638: LD_VAR 0 5
76642: NOT
76643: IFFALSE 76647
// exit ;
76645: GO 76695
// if asc then
76647: LD_VAR 0 2
76651: IFFALSE 76675
// result := SortListByListAsc ( units , tmp ) else
76653: LD_ADDR_VAR 0 3
76657: PUSH
76658: LD_VAR 0 1
76662: PPUSH
76663: LD_VAR 0 5
76667: PPUSH
76668: CALL_OW 76
76672: ST_TO_ADDR
76673: GO 76695
// result := SortListByListDesc ( units , tmp ) ;
76675: LD_ADDR_VAR 0 3
76679: PUSH
76680: LD_VAR 0 1
76684: PPUSH
76685: LD_VAR 0 5
76689: PPUSH
76690: CALL_OW 77
76694: ST_TO_ADDR
// end ;
76695: LD_VAR 0 3
76699: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76700: LD_INT 0
76702: PPUSH
76703: PPUSH
// task := GetTaskList ( mech ) ;
76704: LD_ADDR_VAR 0 4
76708: PUSH
76709: LD_VAR 0 1
76713: PPUSH
76714: CALL_OW 437
76718: ST_TO_ADDR
// if not task then
76719: LD_VAR 0 4
76723: NOT
76724: IFFALSE 76728
// exit ;
76726: GO 76770
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76728: LD_ADDR_VAR 0 3
76732: PUSH
76733: LD_VAR 0 4
76737: PUSH
76738: LD_INT 1
76740: ARRAY
76741: PUSH
76742: LD_INT 1
76744: ARRAY
76745: PUSH
76746: LD_STRING r
76748: EQUAL
76749: PUSH
76750: LD_VAR 0 4
76754: PUSH
76755: LD_INT 1
76757: ARRAY
76758: PUSH
76759: LD_INT 4
76761: ARRAY
76762: PUSH
76763: LD_VAR 0 2
76767: EQUAL
76768: AND
76769: ST_TO_ADDR
// end ;
76770: LD_VAR 0 3
76774: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76775: LD_INT 0
76777: PPUSH
// SetDir ( unit , d ) ;
76778: LD_VAR 0 1
76782: PPUSH
76783: LD_VAR 0 4
76787: PPUSH
76788: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76792: LD_VAR 0 1
76796: PPUSH
76797: LD_VAR 0 2
76801: PPUSH
76802: LD_VAR 0 3
76806: PPUSH
76807: LD_VAR 0 5
76811: PPUSH
76812: CALL_OW 48
// end ;
76816: LD_VAR 0 6
76820: RET
// export function ToNaturalNumber ( number ) ; begin
76821: LD_INT 0
76823: PPUSH
// result := number div 1 ;
76824: LD_ADDR_VAR 0 2
76828: PUSH
76829: LD_VAR 0 1
76833: PUSH
76834: LD_INT 1
76836: DIV
76837: ST_TO_ADDR
// if number < 0 then
76838: LD_VAR 0 1
76842: PUSH
76843: LD_INT 0
76845: LESS
76846: IFFALSE 76856
// result := 0 ;
76848: LD_ADDR_VAR 0 2
76852: PUSH
76853: LD_INT 0
76855: ST_TO_ADDR
// end ;
76856: LD_VAR 0 2
76860: RET
// export function SortByClass ( units , class ) ; var un ; begin
76861: LD_INT 0
76863: PPUSH
76864: PPUSH
// if not units or not class then
76865: LD_VAR 0 1
76869: NOT
76870: PUSH
76871: LD_VAR 0 2
76875: NOT
76876: OR
76877: IFFALSE 76881
// exit ;
76879: GO 76976
// result := [ ] ;
76881: LD_ADDR_VAR 0 3
76885: PUSH
76886: EMPTY
76887: ST_TO_ADDR
// for un in units do
76888: LD_ADDR_VAR 0 4
76892: PUSH
76893: LD_VAR 0 1
76897: PUSH
76898: FOR_IN
76899: IFFALSE 76974
// if GetClass ( un ) = class then
76901: LD_VAR 0 4
76905: PPUSH
76906: CALL_OW 257
76910: PUSH
76911: LD_VAR 0 2
76915: EQUAL
76916: IFFALSE 76943
// result := Insert ( result , 1 , un ) else
76918: LD_ADDR_VAR 0 3
76922: PUSH
76923: LD_VAR 0 3
76927: PPUSH
76928: LD_INT 1
76930: PPUSH
76931: LD_VAR 0 4
76935: PPUSH
76936: CALL_OW 2
76940: ST_TO_ADDR
76941: GO 76972
// result := Replace ( result , result + 1 , un ) ;
76943: LD_ADDR_VAR 0 3
76947: PUSH
76948: LD_VAR 0 3
76952: PPUSH
76953: LD_VAR 0 3
76957: PUSH
76958: LD_INT 1
76960: PLUS
76961: PPUSH
76962: LD_VAR 0 4
76966: PPUSH
76967: CALL_OW 1
76971: ST_TO_ADDR
76972: GO 76898
76974: POP
76975: POP
// end ;
76976: LD_VAR 0 3
76980: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76981: LD_INT 0
76983: PPUSH
76984: PPUSH
76985: PPUSH
76986: PPUSH
76987: PPUSH
76988: PPUSH
76989: PPUSH
// result := [ ] ;
76990: LD_ADDR_VAR 0 4
76994: PUSH
76995: EMPTY
76996: ST_TO_ADDR
// if x - r < 0 then
76997: LD_VAR 0 1
77001: PUSH
77002: LD_VAR 0 3
77006: MINUS
77007: PUSH
77008: LD_INT 0
77010: LESS
77011: IFFALSE 77023
// min_x := 0 else
77013: LD_ADDR_VAR 0 8
77017: PUSH
77018: LD_INT 0
77020: ST_TO_ADDR
77021: GO 77039
// min_x := x - r ;
77023: LD_ADDR_VAR 0 8
77027: PUSH
77028: LD_VAR 0 1
77032: PUSH
77033: LD_VAR 0 3
77037: MINUS
77038: ST_TO_ADDR
// if y - r < 0 then
77039: LD_VAR 0 2
77043: PUSH
77044: LD_VAR 0 3
77048: MINUS
77049: PUSH
77050: LD_INT 0
77052: LESS
77053: IFFALSE 77065
// min_y := 0 else
77055: LD_ADDR_VAR 0 7
77059: PUSH
77060: LD_INT 0
77062: ST_TO_ADDR
77063: GO 77081
// min_y := y - r ;
77065: LD_ADDR_VAR 0 7
77069: PUSH
77070: LD_VAR 0 2
77074: PUSH
77075: LD_VAR 0 3
77079: MINUS
77080: ST_TO_ADDR
// max_x := x + r ;
77081: LD_ADDR_VAR 0 9
77085: PUSH
77086: LD_VAR 0 1
77090: PUSH
77091: LD_VAR 0 3
77095: PLUS
77096: ST_TO_ADDR
// max_y := y + r ;
77097: LD_ADDR_VAR 0 10
77101: PUSH
77102: LD_VAR 0 2
77106: PUSH
77107: LD_VAR 0 3
77111: PLUS
77112: ST_TO_ADDR
// for _x = min_x to max_x do
77113: LD_ADDR_VAR 0 5
77117: PUSH
77118: DOUBLE
77119: LD_VAR 0 8
77123: DEC
77124: ST_TO_ADDR
77125: LD_VAR 0 9
77129: PUSH
77130: FOR_TO
77131: IFFALSE 77232
// for _y = min_y to max_y do
77133: LD_ADDR_VAR 0 6
77137: PUSH
77138: DOUBLE
77139: LD_VAR 0 7
77143: DEC
77144: ST_TO_ADDR
77145: LD_VAR 0 10
77149: PUSH
77150: FOR_TO
77151: IFFALSE 77228
// begin if not ValidHex ( _x , _y ) then
77153: LD_VAR 0 5
77157: PPUSH
77158: LD_VAR 0 6
77162: PPUSH
77163: CALL_OW 488
77167: NOT
77168: IFFALSE 77172
// continue ;
77170: GO 77150
// if GetResourceTypeXY ( _x , _y ) then
77172: LD_VAR 0 5
77176: PPUSH
77177: LD_VAR 0 6
77181: PPUSH
77182: CALL_OW 283
77186: IFFALSE 77226
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77188: LD_ADDR_VAR 0 4
77192: PUSH
77193: LD_VAR 0 4
77197: PPUSH
77198: LD_VAR 0 4
77202: PUSH
77203: LD_INT 1
77205: PLUS
77206: PPUSH
77207: LD_VAR 0 5
77211: PUSH
77212: LD_VAR 0 6
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: PPUSH
77221: CALL_OW 1
77225: ST_TO_ADDR
// end ;
77226: GO 77150
77228: POP
77229: POP
77230: GO 77130
77232: POP
77233: POP
// end ;
77234: LD_VAR 0 4
77238: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77239: LD_INT 0
77241: PPUSH
77242: PPUSH
77243: PPUSH
77244: PPUSH
77245: PPUSH
77246: PPUSH
77247: PPUSH
77248: PPUSH
// if not units then
77249: LD_VAR 0 1
77253: NOT
77254: IFFALSE 77258
// exit ;
77256: GO 77683
// result := UnitFilter ( units , [ f_ok ] ) ;
77258: LD_ADDR_VAR 0 3
77262: PUSH
77263: LD_VAR 0 1
77267: PPUSH
77268: LD_INT 50
77270: PUSH
77271: EMPTY
77272: LIST
77273: PPUSH
77274: CALL_OW 72
77278: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77279: LD_ADDR_VAR 0 8
77283: PUSH
77284: LD_VAR 0 1
77288: PUSH
77289: LD_INT 1
77291: ARRAY
77292: PPUSH
77293: CALL_OW 255
77297: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77298: LD_ADDR_VAR 0 10
77302: PUSH
77303: LD_INT 29
77305: PUSH
77306: LD_EXP 139
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: ST_TO_ADDR
// if not result then
77315: LD_VAR 0 3
77319: NOT
77320: IFFALSE 77324
// exit ;
77322: GO 77683
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77324: LD_ADDR_VAR 0 5
77328: PUSH
77329: LD_INT 81
77331: PUSH
77332: LD_VAR 0 8
77336: PUSH
77337: EMPTY
77338: LIST
77339: LIST
77340: PPUSH
77341: CALL_OW 69
77345: ST_TO_ADDR
// for i in result do
77346: LD_ADDR_VAR 0 4
77350: PUSH
77351: LD_VAR 0 3
77355: PUSH
77356: FOR_IN
77357: IFFALSE 77681
// begin tag := GetTag ( i ) + 1 ;
77359: LD_ADDR_VAR 0 9
77363: PUSH
77364: LD_VAR 0 4
77368: PPUSH
77369: CALL_OW 110
77373: PUSH
77374: LD_INT 1
77376: PLUS
77377: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77378: LD_ADDR_VAR 0 7
77382: PUSH
77383: LD_VAR 0 4
77387: PPUSH
77388: CALL_OW 250
77392: PPUSH
77393: LD_VAR 0 4
77397: PPUSH
77398: CALL_OW 251
77402: PPUSH
77403: LD_INT 6
77405: PPUSH
77406: CALL 76981 0 3
77410: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77411: LD_VAR 0 7
77415: PUSH
77416: LD_VAR 0 4
77420: PPUSH
77421: CALL_OW 264
77425: PUSH
77426: LD_VAR 0 10
77430: IN
77431: NOT
77432: AND
77433: IFFALSE 77472
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77435: LD_VAR 0 4
77439: PPUSH
77440: LD_VAR 0 7
77444: PUSH
77445: LD_INT 1
77447: ARRAY
77448: PUSH
77449: LD_INT 1
77451: ARRAY
77452: PPUSH
77453: LD_VAR 0 7
77457: PUSH
77458: LD_INT 1
77460: ARRAY
77461: PUSH
77462: LD_INT 2
77464: ARRAY
77465: PPUSH
77466: CALL_OW 116
77470: GO 77679
// if path > tag then
77472: LD_VAR 0 2
77476: PUSH
77477: LD_VAR 0 9
77481: GREATER
77482: IFFALSE 77649
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77484: LD_ADDR_VAR 0 6
77488: PUSH
77489: LD_VAR 0 5
77493: PPUSH
77494: LD_INT 91
77496: PUSH
77497: LD_VAR 0 4
77501: PUSH
77502: LD_INT 12
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: LIST
77509: PPUSH
77510: CALL_OW 72
77514: ST_TO_ADDR
// if nearEnemy then
77515: LD_VAR 0 6
77519: IFFALSE 77547
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77521: LD_VAR 0 4
77525: PPUSH
77526: LD_VAR 0 6
77530: PPUSH
77531: LD_VAR 0 4
77535: PPUSH
77536: CALL_OW 74
77540: PPUSH
77541: CALL_OW 115
77545: GO 77647
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77547: LD_VAR 0 4
77551: PPUSH
77552: LD_VAR 0 2
77556: PUSH
77557: LD_VAR 0 9
77561: ARRAY
77562: PUSH
77563: LD_INT 1
77565: ARRAY
77566: PPUSH
77567: LD_VAR 0 2
77571: PUSH
77572: LD_VAR 0 9
77576: ARRAY
77577: PUSH
77578: LD_INT 2
77580: ARRAY
77581: PPUSH
77582: CALL_OW 297
77586: PUSH
77587: LD_INT 6
77589: GREATER
77590: IFFALSE 77633
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77592: LD_VAR 0 4
77596: PPUSH
77597: LD_VAR 0 2
77601: PUSH
77602: LD_VAR 0 9
77606: ARRAY
77607: PUSH
77608: LD_INT 1
77610: ARRAY
77611: PPUSH
77612: LD_VAR 0 2
77616: PUSH
77617: LD_VAR 0 9
77621: ARRAY
77622: PUSH
77623: LD_INT 2
77625: ARRAY
77626: PPUSH
77627: CALL_OW 114
77631: GO 77647
// SetTag ( i , tag ) ;
77633: LD_VAR 0 4
77637: PPUSH
77638: LD_VAR 0 9
77642: PPUSH
77643: CALL_OW 109
// end else
77647: GO 77679
// if enemy then
77649: LD_VAR 0 5
77653: IFFALSE 77679
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77655: LD_VAR 0 4
77659: PPUSH
77660: LD_VAR 0 5
77664: PPUSH
77665: LD_VAR 0 4
77669: PPUSH
77670: CALL_OW 74
77674: PPUSH
77675: CALL_OW 115
// end ;
77679: GO 77356
77681: POP
77682: POP
// end ;
77683: LD_VAR 0 3
77687: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77688: LD_INT 0
77690: PPUSH
77691: PPUSH
77692: PPUSH
// if not unit or IsInUnit ( unit ) then
77693: LD_VAR 0 1
77697: NOT
77698: PUSH
77699: LD_VAR 0 1
77703: PPUSH
77704: CALL_OW 310
77708: OR
77709: IFFALSE 77713
// exit ;
77711: GO 77804
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77713: LD_ADDR_VAR 0 4
77717: PUSH
77718: LD_VAR 0 1
77722: PPUSH
77723: CALL_OW 250
77727: PPUSH
77728: LD_VAR 0 2
77732: PPUSH
77733: LD_INT 1
77735: PPUSH
77736: CALL_OW 272
77740: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77741: LD_ADDR_VAR 0 5
77745: PUSH
77746: LD_VAR 0 1
77750: PPUSH
77751: CALL_OW 251
77755: PPUSH
77756: LD_VAR 0 2
77760: PPUSH
77761: LD_INT 1
77763: PPUSH
77764: CALL_OW 273
77768: ST_TO_ADDR
// if ValidHex ( x , y ) then
77769: LD_VAR 0 4
77773: PPUSH
77774: LD_VAR 0 5
77778: PPUSH
77779: CALL_OW 488
77783: IFFALSE 77804
// ComTurnXY ( unit , x , y ) ;
77785: LD_VAR 0 1
77789: PPUSH
77790: LD_VAR 0 4
77794: PPUSH
77795: LD_VAR 0 5
77799: PPUSH
77800: CALL_OW 118
// end ;
77804: LD_VAR 0 3
77808: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77809: LD_INT 0
77811: PPUSH
77812: PPUSH
// result := false ;
77813: LD_ADDR_VAR 0 3
77817: PUSH
77818: LD_INT 0
77820: ST_TO_ADDR
// if not units then
77821: LD_VAR 0 2
77825: NOT
77826: IFFALSE 77830
// exit ;
77828: GO 77875
// for i in units do
77830: LD_ADDR_VAR 0 4
77834: PUSH
77835: LD_VAR 0 2
77839: PUSH
77840: FOR_IN
77841: IFFALSE 77873
// if See ( side , i ) then
77843: LD_VAR 0 1
77847: PPUSH
77848: LD_VAR 0 4
77852: PPUSH
77853: CALL_OW 292
77857: IFFALSE 77871
// begin result := true ;
77859: LD_ADDR_VAR 0 3
77863: PUSH
77864: LD_INT 1
77866: ST_TO_ADDR
// exit ;
77867: POP
77868: POP
77869: GO 77875
// end ;
77871: GO 77840
77873: POP
77874: POP
// end ;
77875: LD_VAR 0 3
77879: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77880: LD_INT 0
77882: PPUSH
77883: PPUSH
77884: PPUSH
77885: PPUSH
// if not unit or not points then
77886: LD_VAR 0 1
77890: NOT
77891: PUSH
77892: LD_VAR 0 2
77896: NOT
77897: OR
77898: IFFALSE 77902
// exit ;
77900: GO 77992
// dist := 99999 ;
77902: LD_ADDR_VAR 0 5
77906: PUSH
77907: LD_INT 99999
77909: ST_TO_ADDR
// for i in points do
77910: LD_ADDR_VAR 0 4
77914: PUSH
77915: LD_VAR 0 2
77919: PUSH
77920: FOR_IN
77921: IFFALSE 77990
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77923: LD_ADDR_VAR 0 6
77927: PUSH
77928: LD_VAR 0 1
77932: PPUSH
77933: LD_VAR 0 4
77937: PUSH
77938: LD_INT 1
77940: ARRAY
77941: PPUSH
77942: LD_VAR 0 4
77946: PUSH
77947: LD_INT 2
77949: ARRAY
77950: PPUSH
77951: CALL_OW 297
77955: ST_TO_ADDR
// if tmpDist < dist then
77956: LD_VAR 0 6
77960: PUSH
77961: LD_VAR 0 5
77965: LESS
77966: IFFALSE 77988
// begin result := i ;
77968: LD_ADDR_VAR 0 3
77972: PUSH
77973: LD_VAR 0 4
77977: ST_TO_ADDR
// dist := tmpDist ;
77978: LD_ADDR_VAR 0 5
77982: PUSH
77983: LD_VAR 0 6
77987: ST_TO_ADDR
// end ; end ;
77988: GO 77920
77990: POP
77991: POP
// end ;
77992: LD_VAR 0 3
77996: RET
