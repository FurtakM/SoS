// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InitMapConfig ;
  16: CALL 29 0 0
// PrepareRussians ;
  20: CALL 395 0 0
// end ; end_of_file
  24: LD_VAR 0 1
  28: RET
// export function InitMapConfig ; begin
  29: LD_INT 0
  31: PPUSH
// BaseMapConfig ;
  32: CALL 45 0 0
// MissionMapConfig ;
  36: CALL 143 0 0
// end ;
  40: LD_VAR 0 1
  44: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
  45: LD_INT 0
  47: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 ] ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 8
  55: PUSH
  56: LD_INT 12
  58: PUSH
  59: LD_INT 6
  61: PUSH
  62: LD_INT 6
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: LIST
  69: LIST
  70: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
  71: LD_ADDR_EXP 2
  75: PUSH
  76: LD_INT 2
  78: PUSH
  79: LD_INT 2
  81: PUSH
  82: LD_INT 2
  84: PUSH
  85: LD_INT 2
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
  94: LD_ADDR_EXP 3
  98: PUSH
  99: LD_INT 5
 101: NEG
 102: PPUSH
 103: LD_INT 5
 105: PPUSH
 106: CALL_OW 12
 110: PUSH
 111: EMPTY
 112: LIST
 113: ST_TO_ADDR
// debugMode = 0 ;
 114: LD_ADDR_EXP 6
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// missionPrefix = 04_ ;
 122: LD_ADDR_EXP 4
 126: PUSH
 127: LD_STRING 04_
 129: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 130: LD_ADDR_EXP 5
 134: PUSH
 135: LD_STRING 03_
 137: ST_TO_ADDR
// end ;
 138: LD_VAR 0 1
 142: RET
// export enemySkillLevel ; function MissionMapConfig ; begin
 143: LD_INT 0
 145: PPUSH
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 146: LD_ADDR_EXP 7
 150: PUSH
 151: LD_INT 1
 153: PUSH
 154: LD_INT 2
 156: PUSH
 157: LD_INT 2
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: PUSH
 165: LD_OWVAR 67
 169: ARRAY
 170: ST_TO_ADDR
// end ;
 171: LD_VAR 0 1
 175: RET
// every 0 0$1 trigger debugMode do var i ;
 176: LD_EXP 6
 180: IFFALSE 392
 182: GO 184
 184: DISABLE
 185: LD_INT 0
 187: PPUSH
// begin enable ;
 188: ENABLE
// FogOff ( your_side ) ;
 189: LD_OWVAR 2
 193: PPUSH
 194: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 198: LD_ADDR_VAR 0 1
 202: PUSH
 203: LD_INT 22
 205: PUSH
 206: LD_OWVAR 2
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: PUSH
 215: LD_INT 2
 217: PUSH
 218: LD_INT 21
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 21
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PPUSH
 247: CALL_OW 69
 251: PUSH
 252: FOR_IN
 253: IFFALSE 269
// SetLives ( i , 1000 ) ;
 255: LD_VAR 0 1
 259: PPUSH
 260: LD_INT 1000
 262: PPUSH
 263: CALL_OW 234
 267: GO 252
 269: POP
 270: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 271: LD_ADDR_VAR 0 1
 275: PUSH
 276: LD_INT 22
 278: PUSH
 279: LD_OWVAR 2
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 2
 290: PUSH
 291: LD_INT 30
 293: PUSH
 294: LD_INT 0
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 30
 303: PUSH
 304: LD_INT 1
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PPUSH
 320: CALL_OW 69
 324: PUSH
 325: FOR_IN
 326: IFFALSE 390
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 274
 337: PPUSH
 338: LD_INT 1
 340: PPUSH
 341: LD_INT 9999
 343: PPUSH
 344: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 348: LD_VAR 0 1
 352: PPUSH
 353: CALL_OW 274
 357: PPUSH
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 9999
 363: PPUSH
 364: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 368: LD_VAR 0 1
 372: PPUSH
 373: CALL_OW 274
 377: PPUSH
 378: LD_INT 3
 380: PPUSH
 381: LD_INT 9999
 383: PPUSH
 384: CALL_OW 277
// end ;
 388: GO 325
 390: POP
 391: POP
// end ; end_of_file
 392: PPOPN 1
 394: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaidar ; export function PrepareRussians ; begin
 395: LD_INT 0
 397: PPUSH
// PrepareHeroes ;
 398: CALL 407 0 0
// end ;
 402: LD_VAR 0 1
 406: RET
// function PrepareHeroes ; var i ; begin
 407: LD_INT 0
 409: PPUSH
 410: PPUSH
// uc_side = 3 ;
 411: LD_ADDR_OWVAR 20
 415: PUSH
 416: LD_INT 3
 418: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
 419: LD_ADDR_EXP 8
 423: PUSH
 424: LD_STRING Burlak
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: CALL 794 0 2
 434: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
 435: LD_ADDR_EXP 9
 439: PUSH
 440: LD_STRING Gnyevko
 442: PPUSH
 443: LD_INT 1
 445: PPUSH
 446: CALL 794 0 2
 450: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
 451: LD_ADDR_EXP 11
 455: PUSH
 456: LD_STRING Kovalyuk
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL 794 0 2
 466: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true ) ;
 467: LD_ADDR_EXP 10
 471: PUSH
 472: LD_STRING Kirilenkova
 474: PPUSH
 475: LD_INT 1
 477: PPUSH
 478: CALL 794 0 2
 482: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true ) ;
 483: LD_ADDR_EXP 12
 487: PUSH
 488: LD_STRING Belkov
 490: PPUSH
 491: LD_INT 1
 493: PPUSH
 494: CALL 794 0 2
 498: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
 499: LD_ADDR_EXP 13
 503: PUSH
 504: LD_STRING Belkov2
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL 794 0 2
 514: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true ) ;
 515: LD_ADDR_EXP 14
 519: PUSH
 520: LD_STRING Scholtze
 522: PPUSH
 523: LD_INT 1
 525: PPUSH
 526: CALL 794 0 2
 530: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false ) ;
 531: LD_ADDR_EXP 17
 535: PUSH
 536: LD_STRING Popov
 538: PPUSH
 539: LD_INT 0
 541: PPUSH
 542: CALL 794 0 2
 546: ST_TO_ADDR
// Gaidar := PrepareUnitExt ( Gaidar , false ) ;
 547: LD_ADDR_EXP 19
 551: PUSH
 552: LD_STRING Gaidar
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL 794 0 2
 562: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false ) ;
 563: LD_ADDR_EXP 18
 567: PUSH
 568: LD_STRING Platonov
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: CALL 794 0 2
 578: ST_TO_ADDR
// PlaceUnitArea ( Burlak , RussianSpawnArea1 , false ) ;
 579: LD_EXP 8
 583: PPUSH
 584: LD_INT 2
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// PlaceUnitArea ( Gnyevko , RussianSpawnArea1 , false ) ;
 594: LD_EXP 9
 598: PPUSH
 599: LD_INT 2
 601: PPUSH
 602: LD_INT 0
 604: PPUSH
 605: CALL_OW 49
// PlaceUnitArea ( Kovalyuk , RussianSpawnArea1 , false ) ;
 609: LD_EXP 11
 613: PPUSH
 614: LD_INT 2
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , RussianSpawnArea1 , false ) ;
 624: LD_EXP 10
 628: PPUSH
 629: LD_INT 2
 631: PPUSH
 632: LD_INT 0
 634: PPUSH
 635: CALL_OW 49
// PlaceUnitArea ( Belkov , RussianSpawnArea1 , false ) ;
 639: LD_EXP 12
 643: PPUSH
 644: LD_INT 2
 646: PPUSH
 647: LD_INT 0
 649: PPUSH
 650: CALL_OW 49
// PlaceUnitArea ( Belkov2 , RussianSpawnArea1 , false ) ;
 654: LD_EXP 13
 658: PPUSH
 659: LD_INT 2
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: CALL_OW 49
// PlaceUnitArea ( Scholtze , RussianSpawnArea1 , false ) ;
 669: LD_EXP 14
 673: PPUSH
 674: LD_INT 2
 676: PPUSH
 677: LD_INT 0
 679: PPUSH
 680: CALL_OW 49
// PlaceUnitArea ( Popov , RussianSpawnArea1 , false ) ;
 684: LD_EXP 17
 688: PPUSH
 689: LD_INT 2
 691: PPUSH
 692: LD_INT 0
 694: PPUSH
 695: CALL_OW 49
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
 699: LD_ADDR_EXP 15
 703: PUSH
 704: LD_STRING 03_other_survivors
 706: PPUSH
 707: CALL_OW 31
 711: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
 712: LD_ADDR_EXP 16
 716: PUSH
 717: LD_STRING 03_other_kirov
 719: PPUSH
 720: CALL_OW 31
 724: ST_TO_ADDR
// for i in other_survivors do
 725: LD_ADDR_VAR 0 2
 729: PUSH
 730: LD_EXP 15
 734: PUSH
 735: FOR_IN
 736: IFFALSE 755
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
 738: LD_VAR 0 2
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 49
 753: GO 735
 755: POP
 756: POP
// for i in other_kirov_survivors do
 757: LD_ADDR_VAR 0 2
 761: PUSH
 762: LD_EXP 16
 766: PUSH
 767: FOR_IN
 768: IFFALSE 787
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
 770: LD_VAR 0 2
 774: PPUSH
 775: LD_INT 2
 777: PPUSH
 778: LD_INT 0
 780: PPUSH
 781: CALL_OW 49
 785: GO 767
 787: POP
 788: POP
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file end_of_file end_of_file
 789: LD_VAR 0 1
 793: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
 794: LD_INT 0
 796: PPUSH
 797: PPUSH
// if exist_mode then
 798: LD_VAR 0 2
 802: IFFALSE 827
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
 804: LD_ADDR_VAR 0 4
 808: PUSH
 809: LD_EXP 5
 813: PUSH
 814: LD_VAR 0 1
 818: STR
 819: PPUSH
 820: CALL_OW 34
 824: ST_TO_ADDR
 825: GO 842
// unit := NewCharacter ( ident ) ;
 827: LD_ADDR_VAR 0 4
 831: PUSH
 832: LD_VAR 0 1
 836: PPUSH
 837: CALL_OW 25
 841: ST_TO_ADDR
// result := unit ;
 842: LD_ADDR_VAR 0 3
 846: PUSH
 847: LD_VAR 0 4
 851: ST_TO_ADDR
// end ;
 852: LD_VAR 0 3
 856: RET
