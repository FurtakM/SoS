// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1519 0 0
// Nef_PrepareNature ;
 250: CALL 4421 0 0
// MissionIntro ;
 254: CALL 10430 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 , 4 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 , 0 ] [ Difficulty ] ;
 413: LD_ADDR_EXP 33
 417: PUSH
 418: LD_INT 2
 420: NEG
 421: PUSH
 422: LD_INT 1
 424: NEG
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 444: LD_ADDR_EXP 34
 448: PUSH
 449: LD_INT 135
 451: PUSH
 452: LD_INT 8
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 135
 461: PUSH
 462: LD_INT 4
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 134
 471: PUSH
 472: LD_INT 19
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 132
 481: PUSH
 482: LD_INT 26
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 128
 491: PUSH
 492: LD_INT 31
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 123
 501: PUSH
 502: LD_INT 37
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 118
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 112
 521: PUSH
 522: LD_INT 51
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 106
 531: PUSH
 532: LD_INT 57
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 99
 541: PUSH
 542: LD_INT 62
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 93
 551: PUSH
 552: LD_INT 67
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 86
 561: PUSH
 562: LD_INT 72
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 78
 571: PUSH
 572: LD_INT 75
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 71
 581: PUSH
 582: LD_INT 81
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 69
 591: PUSH
 592: LD_INT 88
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: LD_INT 71
 601: PUSH
 602: LD_INT 95
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 74
 611: PUSH
 612: LD_INT 103
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 80
 621: PUSH
 622: LD_INT 113
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 84
 631: PUSH
 632: LD_INT 121
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 89
 641: PUSH
 642: LD_INT 132
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 92
 651: PUSH
 652: LD_INT 142
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 93
 661: PUSH
 662: LD_INT 151
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PUSH
 669: LD_INT 91
 671: PUSH
 672: LD_INT 157
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 90
 681: PUSH
 682: LD_INT 163
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 93
 691: PUSH
 692: LD_INT 171
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 92
 701: PUSH
 702: LD_INT 177
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 737: LD_ADDR_EXP 35
 741: PUSH
 742: LD_INT 135
 744: PUSH
 745: LD_INT 8
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 135
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 134
 764: PUSH
 765: LD_INT 19
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 132
 774: PUSH
 775: LD_INT 26
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 128
 784: PUSH
 785: LD_INT 31
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 123
 794: PUSH
 795: LD_INT 37
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 118
 804: PUSH
 805: LD_INT 45
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 112
 814: PUSH
 815: LD_INT 51
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 106
 824: PUSH
 825: LD_INT 57
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 99
 834: PUSH
 835: LD_INT 62
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 104
 844: PUSH
 845: LD_INT 71
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 110
 854: PUSH
 855: LD_INT 78
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: LD_INT 119
 864: PUSH
 865: LD_INT 88
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 128
 874: PUSH
 875: LD_INT 97
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PUSH
 882: LD_INT 135
 884: PUSH
 885: LD_INT 106
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 141
 894: PUSH
 895: LD_INT 120
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 143
 904: PUSH
 905: LD_INT 132
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 143
 914: PUSH
 915: LD_INT 142
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PUSH
 922: LD_INT 140
 924: PUSH
 925: LD_INT 149
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 132
 934: PUSH
 935: LD_INT 153
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 125
 944: PUSH
 945: LD_INT 155
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 115
 954: PUSH
 955: LD_INT 154
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 105
 964: PUSH
 965: LD_INT 153
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 93
 974: PUSH
 975: LD_INT 151
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 91
 984: PUSH
 985: LD_INT 157
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 90
 994: PUSH
 995: LD_INT 163
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 93
1004: PUSH
1005: LD_INT 171
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 92
1014: PUSH
1015: LD_INT 177
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 , 25 ] [ Difficulty ] ;
1052: LD_ADDR_EXP 36
1056: PUSH
1057: LD_INT 40
1059: PUSH
1060: LD_INT 35
1062: PUSH
1063: LD_INT 30
1065: PUSH
1066: LD_INT 25
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_OWVAR 67
1079: ARRAY
1080: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1081: LD_ADDR_EXP 37
1085: PUSH
1086: LD_INT 50
1088: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 , 15 ] [ Difficulty ] ;
1089: LD_ADDR_EXP 14
1093: PUSH
1094: LD_INT 21
1096: PUSH
1097: LD_INT 19
1099: PUSH
1100: LD_INT 17
1102: PUSH
1103: LD_INT 15
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_OWVAR 67
1116: ARRAY
1117: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1118: LD_ADDR_EXP 38
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 4
1131: PUSH
1132: LD_INT 4
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_OWVAR 67
1145: ARRAY
1146: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 4
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// arabianTroopsMin = 2 ;
1176: LD_ADDR_EXP 40
1180: PUSH
1181: LD_INT 2
1183: ST_TO_ADDR
// arabianTroopsMax = 4 ;
1184: LD_ADDR_EXP 41
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// end ;
1192: LD_VAR 0 1
1196: RET
// every 0 0$1 trigger debugMode do var i ;
1197: LD_EXP 31
1201: IFFALSE 1516
1203: GO 1205
1205: DISABLE
1206: LD_INT 0
1208: PPUSH
// begin enable ;
1209: ENABLE
// FogOff ( your_side ) ;
1210: LD_OWVAR 2
1214: PPUSH
1215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1219: LD_ADDR_VAR 0 1
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_OWVAR 2
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 2
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 21
1251: PUSH
1252: LD_INT 2
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1290
// SetLives ( i , 1000 ) ;
1276: LD_VAR 0 1
1280: PPUSH
1281: LD_INT 1000
1283: PPUSH
1284: CALL_OW 234
1288: GO 1273
1290: POP
1291: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 22
1299: PUSH
1300: LD_OWVAR 2
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 21
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: FOR_IN
1329: IFFALSE 1393
// begin SetSkill ( i , skill_combat , 10 ) ;
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_INT 10
1341: PPUSH
1342: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1346: LD_VAR 0 1
1350: PPUSH
1351: LD_INT 2
1353: PPUSH
1354: LD_INT 10
1356: PPUSH
1357: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1361: LD_VAR 0 1
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 10
1371: PPUSH
1372: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 237
// end ;
1391: GO 1328
1393: POP
1394: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_OWVAR 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 30
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 30
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 69
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1514
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL_OW 274
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 9999
1467: PPUSH
1468: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1472: LD_VAR 0 1
1476: PPUSH
1477: CALL_OW 274
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 9999
1487: PPUSH
1488: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 274
1501: PPUSH
1502: LD_INT 3
1504: PPUSH
1505: LD_INT 9999
1507: PPUSH
1508: CALL_OW 277
// end ;
1512: GO 1449
1514: POP
1515: POP
// end ; end_of_file
1516: PPOPN 1
1518: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1519: LD_INT 0
1521: PPUSH
// randomsToSave = [ ] ;
1522: LD_ADDR_EXP 62
1526: PUSH
1527: EMPTY
1528: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1529: LD_ADDR_EXP 57
1533: PUSH
1534: EMPTY
1535: ST_TO_ADDR
// ruCars = [ ] ;
1536: LD_ADDR_EXP 61
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1543: CALL 2351 0 0
// PrepareHeroes ;
1547: CALL 1556 0 0
// end ;
1551: LD_VAR 0 1
1555: RET
// function PrepareHeroes ; var i , current ; begin
1556: LD_INT 0
1558: PPUSH
1559: PPUSH
1560: PPUSH
// uc_side = 3 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 3
1568: ST_TO_ADDR
// uc_nation = 3 ;
1569: LD_ADDR_OWVAR 21
1573: PUSH
1574: LD_INT 3
1576: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1577: LD_ADDR_EXP 42
1581: PUSH
1582: LD_STRING Burlak
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: CALL 9409 0 3
1595: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1596: LD_ADDR_EXP 43
1600: PUSH
1601: LD_STRING Gnyevko
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: CALL 9409 0 3
1614: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1615: LD_ADDR_EXP 45
1619: PUSH
1620: LD_STRING Kovalyuk
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 3
1628: PPUSH
1629: CALL 9409 0 3
1633: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1634: LD_ADDR_EXP 44
1638: PUSH
1639: LD_STRING Kirilenkova
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 4
1647: PPUSH
1648: CALL 9409 0 3
1652: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1653: LD_ADDR_EXP 46
1657: PUSH
1658: LD_STRING Belkov
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL 9409 0 3
1671: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1672: LD_ADDR_EXP 47
1676: PUSH
1677: LD_STRING Belkov2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 9409 0 3
1690: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1691: LD_ADDR_EXP 48
1695: PUSH
1696: LD_STRING Scholtze
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 4
1704: PPUSH
1705: CALL 9409 0 3
1709: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1710: LD_ADDR_EXP 52
1714: PUSH
1715: LD_STRING Popov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL 9409 0 3
1728: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1729: LD_ADDR_EXP 53
1733: PUSH
1734: LD_STRING Platonov
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL 9409 0 3
1747: ST_TO_ADDR
// uc_side = 6 ;
1748: LD_ADDR_OWVAR 20
1752: PUSH
1753: LD_INT 6
1755: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1756: LD_ADDR_EXP 54
1760: PUSH
1761: LD_STRING Gaydar
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 9409 0 3
1774: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1775: LD_ADDR_EXP 49
1779: PUSH
1780: LD_STRING Kuzmov
1782: PPUSH
1783: LD_INT 0
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL 9409 0 3
1793: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1794: LD_EXP 49
1798: PPUSH
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 108
1804: PPUSH
1805: LD_INT 5
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 50
// ComHold ( Kuzmov ) ;
1815: LD_EXP 49
1819: PPUSH
1820: CALL_OW 140
// uc_side = 3 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1832: LD_EXP 42
1836: PUSH
1837: LD_EXP 43
1841: PUSH
1842: LD_EXP 44
1846: PUSH
1847: LD_EXP 45
1851: PUSH
1852: LD_EXP 46
1856: PUSH
1857: LD_EXP 47
1861: PUSH
1862: LD_EXP 48
1866: PUSH
1867: LD_EXP 52
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 9492 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1892: LD_ADDR_EXP 50
1896: PUSH
1897: LD_STRING 03_other_survivors
1899: PPUSH
1900: CALL_OW 31
1904: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1905: LD_ADDR_EXP 51
1909: PUSH
1910: LD_STRING 03_other_kirov
1912: PPUSH
1913: CALL_OW 31
1917: ST_TO_ADDR
// for i in other_survivors do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_EXP 50
1927: PUSH
1928: FOR_IN
1929: IFFALSE 1994
// begin if ruCars then
1931: LD_EXP 61
1935: IFFALSE 1977
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_EXP 61
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1955: LD_ADDR_EXP 61
1959: PUSH
1960: LD_EXP 61
1964: PUSH
1965: LD_EXP 61
1969: PUSH
1970: LD_INT 1
1972: ARRAY
1973: DIFF
1974: ST_TO_ADDR
// end else
1975: GO 1992
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1977: LD_VAR 0 2
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 49
// end ;
1992: GO 1928
1994: POP
1995: POP
// for i in other_kirov_survivors do
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_EXP 51
2005: PUSH
2006: FOR_IN
2007: IFFALSE 2072
// begin if ruCars then
2009: LD_EXP 61
2013: IFFALSE 2055
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_EXP 61
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PPUSH
2029: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2033: LD_ADDR_EXP 61
2037: PUSH
2038: LD_EXP 61
2042: PUSH
2043: LD_EXP 61
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: DIFF
2052: ST_TO_ADDR
// end else
2053: GO 2070
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2055: LD_VAR 0 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 0
2065: PPUSH
2066: CALL_OW 49
// end ;
2070: GO 2006
2072: POP
2073: POP
// PrepareSoldier ( sex_male , 1 ) ;
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 381
// dialogRus = CreateHuman ;
2084: LD_ADDR_EXP 59
2088: PUSH
2089: CALL_OW 44
2093: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2094: LD_EXP 50
2098: PUSH
2099: LD_EXP 51
2103: PLUS
2104: PUSH
2105: LD_EXP 43
2109: PUSH
2110: LD_EXP 44
2114: PUSH
2115: LD_EXP 45
2119: PUSH
2120: LD_EXP 46
2124: PUSH
2125: LD_EXP 47
2129: PUSH
2130: LD_EXP 48
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PLUS
2143: PUSH
2144: LD_INT 8
2146: LESS
2147: IFFALSE 2346
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_EXP 50
2158: PUSH
2159: LD_EXP 51
2163: PLUS
2164: PUSH
2165: LD_EXP 43
2169: PUSH
2170: LD_EXP 44
2174: PUSH
2175: LD_EXP 45
2179: PUSH
2180: LD_EXP 46
2184: PUSH
2185: LD_EXP 47
2189: PUSH
2190: LD_EXP 48
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PLUS
2203: ST_TO_ADDR
// current = 8 - current ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 8
2211: PUSH
2212: LD_VAR 0 3
2216: MINUS
2217: ST_TO_ADDR
// for i := 1 to current do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_VAR 0 3
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2344
// begin uc_nation = 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// uc_side = 3 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2252: LD_INT 0
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 4
2260: PPUSH
2261: CALL_OW 12
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 3
2271: PPUSH
2272: CALL_OW 12
2276: PPUSH
2277: CALL_OW 380
// if ruCars then
2281: LD_EXP 61
2285: IFFALSE 2327
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2287: CALL_OW 44
2291: PPUSH
2292: LD_EXP 61
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2305: LD_ADDR_EXP 61
2309: PUSH
2310: LD_EXP 61
2314: PUSH
2315: LD_EXP 61
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: DIFF
2324: ST_TO_ADDR
// end else
2325: GO 2342
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_INT 2
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL_OW 49
// end ;
2342: GO 2233
2344: POP
2345: POP
// end ; end ;
2346: LD_VAR 0 1
2350: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2351: LD_INT 0
2353: PPUSH
2354: PPUSH
2355: PPUSH
// uc_side = 3 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 3
2363: ST_TO_ADDR
// uc_nation = 3 ;
2364: LD_ADDR_OWVAR 21
2368: PUSH
2369: LD_INT 3
2371: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_EXP 5
2386: PUSH
2387: FOR_TO
2388: IFFALSE 2537
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2390: LD_ADDR_OWVAR 37
2394: PUSH
2395: LD_EXP 5
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_EXP 5
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_INT 2
2428: ARRAY
2429: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2430: LD_ADDR_OWVAR 38
2434: PUSH
2435: LD_EXP 5
2439: PUSH
2440: LD_VAR 0 2
2444: ARRAY
2445: PUSH
2446: LD_INT 3
2448: ARRAY
2449: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_EXP 5
2459: PUSH
2460: LD_VAR 0 2
2464: ARRAY
2465: PUSH
2466: LD_INT 4
2468: ARRAY
2469: ST_TO_ADDR
// uc_direction := 3 ;
2470: LD_ADDR_OWVAR 24
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2478: LD_ADDR_OWVAR 41
2482: PUSH
2483: LD_INT 25
2485: PPUSH
2486: LD_INT 30
2488: PPUSH
2489: CALL_OW 12
2493: ST_TO_ADDR
// car := CreateVehicle ;
2494: LD_ADDR_VAR 0 3
2498: PUSH
2499: CALL_OW 45
2503: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2504: LD_ADDR_EXP 61
2508: PUSH
2509: LD_EXP 61
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 2
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// end ;
2535: GO 2387
2537: POP
2538: POP
// end ;
2539: LD_VAR 0 1
2543: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2544: LD_INT 0
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// rnd = rand ( 1 , 4 ) ;
2554: LD_ADDR_VAR 0 3
2558: PUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 12
2569: ST_TO_ADDR
// uc_side = 6 ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_INT 6
2577: ST_TO_ADDR
// uc_nation = 3 ;
2578: LD_ADDR_OWVAR 21
2582: PUSH
2583: LD_INT 3
2585: ST_TO_ADDR
// if rnd < 4 then
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 4
2593: LESS
2594: IFFALSE 2970
// begin vc_chassis = ru_medium_wheeled ;
2596: LD_ADDR_OWVAR 37
2600: PUSH
2601: LD_INT 21
2603: ST_TO_ADDR
// vc_control = control_manual ;
2604: LD_ADDR_OWVAR 38
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_engine = engine_combustion ;
2612: LD_ADDR_OWVAR 39
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2620: LD_ADDR_VAR 0 5
2624: PUSH
2625: LD_INT 1
2627: PPUSH
2628: LD_INT 100
2630: PPUSH
2631: CALL_OW 12
2635: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2636: LD_VAR 0 5
2640: PUSH
2641: LD_EXP 37
2645: PUSH
2646: LD_INT 1
2648: PLUS
2649: LESS
2650: IFFALSE 2662
// vc_weapon = ru_cargo_bay else
2652: LD_ADDR_OWVAR 40
2656: PUSH
2657: LD_INT 51
2659: ST_TO_ADDR
2660: GO 2693
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2662: LD_ADDR_OWVAR 40
2666: PUSH
2667: LD_INT 42
2669: PUSH
2670: LD_INT 43
2672: PUSH
2673: LD_INT 44
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 12
2691: ARRAY
2692: ST_TO_ADDR
// vehicle = CreateVehicle ;
2693: LD_ADDR_VAR 0 7
2697: PUSH
2698: CALL_OW 45
2702: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2703: LD_VAR 0 7
2707: PPUSH
2708: LD_INT 3
2710: PPUSH
2711: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2715: LD_VAR 0 7
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 12
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: CALL_OW 12
2754: PPUSH
2755: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2759: CALL_OW 44
2763: PPUSH
2764: LD_VAR 0 7
2768: PPUSH
2769: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2773: LD_OWVAR 40
2777: PUSH
2778: LD_INT 51
2780: EQUAL
2781: IFFALSE 2798
// AddCargo ( vehicle , mat_cans , 100 ) ;
2783: LD_VAR 0 7
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2798: LD_VAR 0 7
2802: PPUSH
2803: LD_INT 500
2805: PPUSH
2806: LD_INT 1000
2808: PPUSH
2809: CALL_OW 12
2813: PPUSH
2814: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_INT 2
2828: PPUSH
2829: CALL_OW 12
2833: ST_TO_ADDR
// if rnd = 1 then
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 1
2841: EQUAL
2842: IFFALSE 2907
// for i := 3 to russianCargoPath1 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 3
2852: DEC
2853: ST_TO_ADDR
2854: LD_EXP 34
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2903
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2862: LD_VAR 0 7
2866: PPUSH
2867: LD_EXP 34
2871: PUSH
2872: LD_VAR 0 2
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: LD_EXP 34
2886: PUSH
2887: LD_VAR 0 2
2891: ARRAY
2892: PUSH
2893: LD_INT 2
2895: ARRAY
2896: PPUSH
2897: CALL_OW 171
2901: GO 2859
2903: POP
2904: POP
2905: GO 2968
// for i := 3 to russianCargoPath2 do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: DOUBLE
2913: LD_INT 3
2915: DEC
2916: ST_TO_ADDR
2917: LD_EXP 35
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2966
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2925: LD_VAR 0 7
2929: PPUSH
2930: LD_EXP 35
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 2
2954: ARRAY
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PPUSH
2960: CALL_OW 171
2964: GO 2922
2966: POP
2967: POP
// end else
2968: GO 3309
// begin for i := 1 to rand ( 1 , 3 ) do
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: DOUBLE
2976: LD_INT 1
2978: DEC
2979: ST_TO_ADDR
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 12
2990: PUSH
2991: FOR_TO
2992: IFFALSE 3070
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: CALL_OW 12
3007: PPUSH
3008: LD_INT 2
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 12
3018: PPUSH
3019: CALL_OW 380
// unit = CreateHuman ;
3023: LD_ADDR_VAR 0 6
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3033: LD_VAR 0 6
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3048: LD_VAR 0 6
3052: PPUSH
3053: LD_INT 500
3055: PPUSH
3056: LD_INT 1000
3058: PPUSH
3059: CALL_OW 12
3063: PPUSH
3064: CALL_OW 234
// end ;
3068: GO 2991
3070: POP
3071: POP
// rnd2 = rand ( 1 , 2 ) ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: CALL_OW 12
3087: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3088: LD_ADDR_VAR 0 8
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_INT 6
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 21
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: EMPTY
3117: LIST
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 60
3124: PUSH
3125: EMPTY
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3143: LD_ADDR_VAR 0 8
3147: PUSH
3148: LD_VAR 0 8
3152: PUSH
3153: LD_EXP 56
3157: DIFF
3158: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3159: LD_ADDR_VAR 0 8
3163: PUSH
3164: LD_VAR 0 8
3168: PUSH
3169: LD_EXP 57
3173: DIFF
3174: ST_TO_ADDR
// if rnd2 = 1 then
3175: LD_VAR 0 4
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: IFFALSE 3248
// for i := 3 to russianCargoPath1 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 3
3193: DEC
3194: ST_TO_ADDR
3195: LD_EXP 34
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3244
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3203: LD_VAR 0 8
3207: PPUSH
3208: LD_EXP 34
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PPUSH
3223: LD_EXP 34
3227: PUSH
3228: LD_VAR 0 2
3232: ARRAY
3233: PUSH
3234: LD_INT 2
3236: ARRAY
3237: PPUSH
3238: CALL_OW 171
3242: GO 3200
3244: POP
3245: POP
3246: GO 3309
// for i := 3 to russianCargoPath2 do
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: DOUBLE
3254: LD_INT 3
3256: DEC
3257: ST_TO_ADDR
3258: LD_EXP 35
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3307
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3266: LD_VAR 0 8
3270: PPUSH
3271: LD_EXP 35
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 1
3284: ARRAY
3285: PPUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 2
3299: ARRAY
3300: PPUSH
3301: CALL_OW 171
3305: GO 3263
3307: POP
3308: POP
// end ; end ;
3309: LD_VAR 0 1
3313: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
// for i := 1 to 2 do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_INT 2
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3399
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3335: LD_INT 0
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 3
3346: PPUSH
3347: CALL_OW 12
3351: PPUSH
3352: CALL_OW 380
// unit = CreateHuman ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: CALL_OW 44
3365: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3381: LD_ADDR_EXP 57
3385: PUSH
3386: LD_EXP 57
3390: PUSH
3391: LD_VAR 0 3
3395: ADD
3396: ST_TO_ADDR
// end ;
3397: GO 3332
3399: POP
3400: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 380
// unit = CreateHuman ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3447: LD_ADDR_EXP 57
3451: PUSH
3452: LD_EXP 57
3456: PUSH
3457: LD_VAR 0 3
3461: ADD
3462: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3463: LD_EXP 57
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: LD_INT 54
3473: PPUSH
3474: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3478: LD_EXP 57
3482: PPUSH
3483: LD_INT 25
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 72
3497: PPUSH
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 95
3503: PPUSH
3504: LD_INT 52
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: CALL_OW 205
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3519: LD_INT 0
3521: PPUSH
// uc_side = 2 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 2
3529: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3530: LD_ADDR_EXP 63
3534: PUSH
3535: LD_STRING Heike
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL 9409 0 3
3548: ST_TO_ADDR
// if Difficulty >= 2 then
3549: LD_OWVAR 67
3553: PUSH
3554: LD_INT 2
3556: GREATEREQUAL
3557: IFFALSE 3572
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3559: LD_INT 51
3561: PPUSH
3562: LD_INT 2
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 322
// end ;
3572: LD_VAR 0 1
3576: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
// currentEnemyGroup = [ ] ;
3582: LD_ADDR_EXP 65
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: DOUBLE
3595: LD_INT 1
3597: DEC
3598: ST_TO_ADDR
3599: LD_EXP 39
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3860
// begin uc_side = 2 ;
3607: LD_ADDR_OWVAR 20
3611: PUSH
3612: LD_INT 2
3614: ST_TO_ADDR
// uc_nation = nation_arabian ;
3615: LD_ADDR_OWVAR 21
3619: PUSH
3620: LD_INT 2
3622: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3623: LD_ADDR_OWVAR 40
3627: PUSH
3628: LD_INT 23
3630: PUSH
3631: LD_INT 24
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 26
3639: PUSH
3640: LD_INT 27
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 5
3655: PPUSH
3656: CALL_OW 12
3660: ARRAY
3661: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3662: LD_OWVAR 40
3666: PUSH
3667: LD_INT 25
3669: PUSH
3670: LD_INT 26
3672: PUSH
3673: LD_INT 27
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: IN
3681: IFFALSE 3712
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3683: LD_ADDR_OWVAR 37
3687: PUSH
3688: LD_INT 13
3690: PUSH
3691: LD_INT 14
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: ST_TO_ADDR
3710: GO 3743
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3712: LD_ADDR_OWVAR 37
3716: PUSH
3717: LD_INT 12
3719: PUSH
3720: LD_INT 13
3722: PUSH
3723: LD_INT 14
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: ST_TO_ADDR
// vc_control = control_manual ;
3743: LD_ADDR_OWVAR 38
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// vc_engine = engine_combustion ;
3751: LD_ADDR_OWVAR 39
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3759: LD_ADDR_OWVAR 41
3763: PUSH
3764: LD_INT 100
3766: ST_TO_ADDR
// veh = CreateVehicle ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: CALL_OW 45
3776: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3777: LD_ADDR_EXP 65
3781: PUSH
3782: LD_EXP 65
3786: PUSH
3787: LD_VAR 0 3
3791: ADD
3792: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_INT 7
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 26
3815: EQUAL
3816: IFFALSE 3832
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3818: LD_INT 0
3820: PPUSH
3821: LD_EXP 33
3825: PPUSH
3826: CALL_OW 383
3830: GO 3844
// PrepareMechanic ( false , enemySkillLevel ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_EXP 32
3839: PPUSH
3840: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3844: CALL_OW 44
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3604
3860: POP
3861: POP
// end ;
3862: LD_VAR 0 1
3866: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
// currentEnemyGroup = [ ] ;
3872: LD_ADDR_EXP 65
3876: PUSH
3877: EMPTY
3878: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_EXP 40
3893: PPUSH
3894: LD_EXP 41
3898: PPUSH
3899: CALL_OW 12
3903: PUSH
3904: FOR_TO
3905: IFFALSE 3984
// begin uc_side = 2 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 2
3914: ST_TO_ADDR
// uc_nation = nation_arabian ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 2
3922: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_EXP 32
3930: PUSH
3931: LD_INT 1
3933: MINUS
3934: PPUSH
3935: CALL_OW 381
// unit = CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3949: LD_ADDR_EXP 65
3953: PUSH
3954: LD_EXP 65
3958: PUSH
3959: LD_VAR 0 4
3963: ADD
3964: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 1
3974: PPUSH
3975: LD_INT 0
3977: PPUSH
3978: CALL_OW 49
// end ;
3982: GO 3904
3984: POP
3985: POP
// for i := 1 to rand ( 1 , 3 ) do
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 12
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4083
// begin uc_side = 2 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 2
4017: ST_TO_ADDR
// uc_nation = nation_arabian ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 32
4033: PPUSH
4034: CALL_OW 384
// unit = CreateHuman ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4048: LD_ADDR_EXP 65
4052: PUSH
4053: LD_EXP 65
4057: PUSH
4058: LD_VAR 0 4
4062: ADD
4063: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4064: LD_VAR 0 4
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_INT 0
4076: PPUSH
4077: CALL_OW 49
// end ;
4081: GO 4007
4083: POP
4084: POP
// end ;
4085: LD_VAR 0 2
4089: RET
// export function PrepareArabianKiller ; var un ; begin
4090: LD_INT 0
4092: PPUSH
4093: PPUSH
// uc_side = 5 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 5
4101: ST_TO_ADDR
// uc_nation = nation_arabian ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// hc_class = class_soldier ;
4110: LD_ADDR_OWVAR 28
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// un = CreateHuman ;
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_EXP 54
4175: PPUSH
4176: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4180: LD_ADDR_EXP 23
4184: PUSH
4185: LD_EXP 23
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: ST_TO_ADDR
// end ;
4194: LD_VAR 0 1
4198: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
// firstAttackGroup = [ ] ;
4205: LD_ADDR_EXP 64
4209: PUSH
4210: EMPTY
4211: ST_TO_ADDR
// uc_side = 2 ;
4212: LD_ADDR_OWVAR 20
4216: PUSH
4217: LD_INT 2
4219: ST_TO_ADDR
// uc_nation = nation_arabian ;
4220: LD_ADDR_OWVAR 21
4224: PUSH
4225: LD_INT 2
4227: ST_TO_ADDR
// for i := 1 to 3 do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4303
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4244: LD_INT 0
4246: PPUSH
4247: LD_EXP 32
4251: PUSH
4252: LD_INT 2
4254: MINUS
4255: PPUSH
4256: CALL_OW 381
// unit = CreateHuman ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: CALL_OW 44
4269: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4270: LD_ADDR_EXP 64
4274: PUSH
4275: LD_EXP 64
4279: PUSH
4280: LD_VAR 0 3
4284: ADD
4285: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 7
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// end ;
4301: GO 4241
4303: POP
4304: POP
// vc_weapon = ar_light_gun ;
4305: LD_ADDR_OWVAR 40
4309: PUSH
4310: LD_INT 23
4312: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4313: LD_ADDR_OWVAR 37
4317: PUSH
4318: LD_INT 13
4320: ST_TO_ADDR
// vc_control = control_manual ;
4321: LD_ADDR_OWVAR 38
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// vc_engine = engine_combustion ;
4329: LD_ADDR_OWVAR 39
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4337: LD_ADDR_OWVAR 41
4341: PUSH
4342: LD_INT 100
4344: ST_TO_ADDR
// veh = CreateVehicle ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: CALL_OW 45
4354: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4355: LD_ADDR_EXP 64
4359: PUSH
4360: LD_EXP 64
4364: PUSH
4365: LD_VAR 0 4
4369: ADD
4370: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4371: LD_VAR 0 4
4375: PPUSH
4376: LD_INT 7
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4386: LD_INT 0
4388: PPUSH
4389: LD_EXP 32
4393: PUSH
4394: LD_INT 1
4396: MINUS
4397: PPUSH
4398: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4402: CALL_OW 44
4406: PPUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: CALL_OW 52
// end ; end_of_file
4416: LD_VAR 0 1
4420: RET
// export function Nef_PrepareNature ; var i , un ; begin
4421: LD_INT 0
4423: PPUSH
4424: PPUSH
4425: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_EXP 26
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4556
// begin uc_side = 0 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 0
4455: ST_TO_ADDR
// uc_nation = nation_nature ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 0
4463: ST_TO_ADDR
// hc_class = class_apeman ;
4464: LD_ADDR_OWVAR 28
4468: PUSH
4469: LD_INT 12
4471: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4472: LD_ADDR_OWVAR 31
4476: PUSH
4477: LD_EXP 27
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_INT 2
4493: ARRAY
4494: PUSH
4495: LD_EXP 27
4499: PUSH
4500: LD_INT 3
4502: ARRAY
4503: PUSH
4504: LD_EXP 27
4508: PUSH
4509: LD_INT 4
4511: ARRAY
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4519: LD_ADDR_OWVAR 35
4523: PUSH
4524: LD_EXP 28
4528: ST_TO_ADDR
// un = CreateHuman ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: CALL_OW 44
4538: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_INT 8
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
// end ;
4554: GO 4445
4556: POP
4557: POP
// for i := 1 to animalsAmount [ 2 ] do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 26
4572: PUSH
4573: LD_INT 2
4575: ARRAY
4576: PUSH
4577: FOR_TO
4578: IFFALSE 4688
// begin uc_side = 0 ;
4580: LD_ADDR_OWVAR 20
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// uc_nation = nation_nature ;
4588: LD_ADDR_OWVAR 21
4592: PUSH
4593: LD_INT 0
4595: ST_TO_ADDR
// hc_class = class_phororhacos ;
4596: LD_ADDR_OWVAR 28
4600: PUSH
4601: LD_INT 18
4603: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4604: LD_ADDR_OWVAR 31
4608: PUSH
4609: LD_EXP 27
4613: PUSH
4614: LD_INT 1
4616: ARRAY
4617: PUSH
4618: LD_EXP 27
4622: PUSH
4623: LD_INT 2
4625: ARRAY
4626: PUSH
4627: LD_EXP 27
4631: PUSH
4632: LD_INT 3
4634: ARRAY
4635: PUSH
4636: LD_EXP 27
4640: PUSH
4641: LD_INT 4
4643: ARRAY
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4651: LD_ADDR_OWVAR 35
4655: PUSH
4656: LD_EXP 28
4660: ST_TO_ADDR
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 8
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4577
4688: POP
4689: POP
// for i := 1 to animalsAmount [ 3 ] do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_EXP 26
4704: PUSH
4705: LD_INT 3
4707: ARRAY
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4820
// begin uc_side = 0 ;
4712: LD_ADDR_OWVAR 20
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// uc_nation = nation_nature ;
4720: LD_ADDR_OWVAR 21
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// hc_class = class_tiger ;
4728: LD_ADDR_OWVAR 28
4732: PUSH
4733: LD_INT 14
4735: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4736: LD_ADDR_OWVAR 31
4740: PUSH
4741: LD_EXP 27
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PUSH
4750: LD_EXP 27
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PUSH
4759: LD_EXP 27
4763: PUSH
4764: LD_INT 3
4766: ARRAY
4767: PUSH
4768: LD_EXP 27
4772: PUSH
4773: LD_INT 4
4775: ARRAY
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4783: LD_ADDR_OWVAR 35
4787: PUSH
4788: LD_EXP 28
4792: ST_TO_ADDR
// un = CreateHuman ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: CALL_OW 44
4802: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 8
4810: PPUSH
4811: LD_INT 0
4813: PPUSH
4814: CALL_OW 49
// end ;
4818: GO 4709
4820: POP
4821: POP
// for i := 1 to animalsAmount [ 4 ] do
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 26
4836: PUSH
4837: LD_INT 4
4839: ARRAY
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4952
// begin uc_side = 0 ;
4844: LD_ADDR_OWVAR 20
4848: PUSH
4849: LD_INT 0
4851: ST_TO_ADDR
// uc_nation = nation_nature ;
4852: LD_ADDR_OWVAR 21
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// hc_class = 21 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 21
4867: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4868: LD_ADDR_OWVAR 31
4872: PUSH
4873: LD_EXP 27
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PUSH
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 2
4889: ARRAY
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: LD_EXP 27
4904: PUSH
4905: LD_INT 4
4907: ARRAY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4915: LD_ADDR_OWVAR 35
4919: PUSH
4920: LD_EXP 28
4924: ST_TO_ADDR
// un = CreateHuman ;
4925: LD_ADDR_VAR 0 3
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 8
4942: PPUSH
4943: LD_INT 0
4945: PPUSH
4946: CALL_OW 49
// end ;
4950: GO 4841
4952: POP
4953: POP
// for i := 1 to animalsAmount [ 5 ] do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: DOUBLE
4960: LD_INT 1
4962: DEC
4963: ST_TO_ADDR
4964: LD_EXP 26
4968: PUSH
4969: LD_INT 5
4971: ARRAY
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5035
// begin uc_side = 0 ;
4976: LD_ADDR_OWVAR 20
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// uc_nation = nation_nature ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// vc_chassis := 31 ;
4992: LD_ADDR_OWVAR 37
4996: PUSH
4997: LD_INT 31
4999: ST_TO_ADDR
// vc_control := control_rider ;
5000: LD_ADDR_OWVAR 38
5004: PUSH
5005: LD_INT 4
5007: ST_TO_ADDR
// un := CreateVehicle ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 45
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 8
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4973
5035: POP
5036: POP
// end ; end_of_file
5037: LD_VAR 0 1
5041: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
5051: PPUSH
5052: PPUSH
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
// for unit in units do
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5110
// if not ignorePath then
5075: LD_VAR 0 3
5079: NOT
5080: IFFALSE 5096
// SetTag ( unit , 0 ) else
5082: LD_VAR 0 8
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: CALL_OW 109
5094: GO 5108
// SetTag ( unit , 1 ) ;
5096: LD_VAR 0 8
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 109
5108: GO 5072
5110: POP
5111: POP
// startAttacks = false ;
5112: LD_ADDR_VAR 0 21
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5120: LD_ADDR_VAR 0 17
5124: PUSH
5125: LD_VAR 0 2
5129: PUSH
5130: LD_VAR 0 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_VAR 0 2
5149: ARRAY
5150: PUSH
5151: LD_INT 2
5153: ARRAY
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// mechanics = [ ] ;
5159: LD_ADDR_VAR 0 12
5163: PUSH
5164: EMPTY
5165: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5166: LD_ADDR_VAR 0 9
5170: PUSH
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 50
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5219: LD_ADDR_VAR 0 11
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 4
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 72
5253: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5254: LD_ADDR_VAR 0 13
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 1
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 24
5279: PUSH
5280: LD_INT 1000
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 72
5299: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5300: LD_ADDR_VAR 0 15
5304: PUSH
5305: LD_INT 9
5307: PPUSH
5308: CALL_OW 435
5312: ST_TO_ADDR
// if not ignorePath then
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 6300
// begin for unit in attackUnits do
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: FOR_IN
5331: IFFALSE 6074
// begin if path and not startAttacks then
5333: LD_VAR 0 2
5337: PUSH
5338: LD_VAR 0 21
5342: NOT
5343: AND
5344: IFFALSE 6063
// begin i = 1 ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5354: LD_ADDR_VAR 0 15
5358: PUSH
5359: LD_INT 9
5361: PPUSH
5362: CALL_OW 435
5366: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5367: LD_ADDR_VAR 0 18
5371: PUSH
5372: LD_INT 81
5374: PUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 255
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PPUSH
5394: LD_VAR 0 8
5398: PPUSH
5399: CALL_OW 74
5403: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5404: LD_ADDR_VAR 0 19
5408: PUSH
5409: LD_VAR 0 15
5413: PPUSH
5414: LD_VAR 0 8
5418: PPUSH
5419: CALL_OW 250
5423: PPUSH
5424: LD_VAR 0 8
5428: PPUSH
5429: CALL_OW 251
5433: PPUSH
5434: CALL_OW 439
5438: ST_TO_ADDR
// if damageUnits and medics then
5439: LD_VAR 0 13
5443: PUSH
5444: LD_VAR 0 11
5448: AND
5449: IFFALSE 5471
// ComHeal ( medics , damageUnits [ 1 ] ) else
5451: LD_VAR 0 11
5455: PPUSH
5456: LD_VAR 0 13
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 128
5469: GO 5514
// if medics then
5471: LD_VAR 0 11
5475: IFFALSE 5514
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5477: LD_VAR 0 11
5481: PPUSH
5482: LD_VAR 0 9
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PPUSH
5491: CALL_OW 250
5495: PPUSH
5496: LD_VAR 0 9
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: CALL_OW 251
5509: PPUSH
5510: CALL_OW 111
// if not HasTask ( unit ) then
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 314
5523: NOT
5524: IFFALSE 5763
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5526: LD_ADDR_VAR 0 19
5530: PUSH
5531: LD_VAR 0 15
5535: PPUSH
5536: LD_VAR 0 8
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 8
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: CALL_OW 439
5560: ST_TO_ADDR
// if i > crates then
5561: LD_VAR 0 7
5565: PUSH
5566: LD_VAR 0 15
5570: GREATER
5571: IFFALSE 5581
// i = 1 ;
5573: LD_ADDR_VAR 0 7
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5581: LD_VAR 0 18
5585: PUSH
5586: LD_VAR 0 19
5590: AND
5591: IFFALSE 5706
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5593: LD_VAR 0 8
5597: PPUSH
5598: LD_VAR 0 18
5602: PPUSH
5603: CALL_OW 250
5607: PPUSH
5608: LD_VAR 0 18
5612: PPUSH
5613: CALL_OW 251
5617: PPUSH
5618: CALL_OW 297
5622: PUSH
5623: LD_VAR 0 8
5627: PPUSH
5628: LD_VAR 0 19
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 19
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 297
5650: LESS
5651: IFFALSE 5669
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5653: LD_VAR 0 9
5657: PPUSH
5658: LD_VAR 0 18
5662: PPUSH
5663: CALL_OW 115
5667: GO 5704
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5669: LD_VAR 0 9
5673: PPUSH
5674: LD_VAR 0 15
5678: PUSH
5679: LD_VAR 0 7
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 15
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: PLUS
5698: ARRAY
5699: PPUSH
5700: CALL_OW 116
// end else
5704: GO 5763
// if crates then
5706: LD_VAR 0 15
5710: IFFALSE 5749
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5712: LD_VAR 0 9
5716: PPUSH
5717: LD_VAR 0 15
5721: PUSH
5722: LD_VAR 0 7
5726: ARRAY
5727: PPUSH
5728: LD_VAR 0 15
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: ARRAY
5742: PPUSH
5743: CALL_OW 116
5747: GO 5763
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5749: LD_VAR 0 9
5753: PPUSH
5754: LD_VAR 0 18
5758: PPUSH
5759: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5763: LD_INT 35
5765: PPUSH
5766: CALL_OW 67
// if path then
5770: LD_VAR 0 2
5774: IFFALSE 5860
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5776: LD_ADDR_VAR 0 16
5780: PUSH
5781: LD_VAR 0 8
5785: PPUSH
5786: LD_VAR 0 2
5790: PPUSH
5791: CALL 7190 0 2
5795: ST_TO_ADDR
// if agressiveMove then
5796: LD_VAR 0 4
5800: IFFALSE 5831
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5802: LD_VAR 0 9
5806: PPUSH
5807: LD_VAR 0 16
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_VAR 0 16
5820: PUSH
5821: LD_INT 2
5823: ARRAY
5824: PPUSH
5825: CALL_OW 114
5829: GO 5858
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5831: LD_VAR 0 9
5835: PPUSH
5836: LD_VAR 0 16
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 16
5849: PUSH
5850: LD_INT 2
5852: ARRAY
5853: PPUSH
5854: CALL_OW 111
// end else
5858: GO 5868
// startAttacks = true ;
5860: LD_ADDR_VAR 0 21
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// i = i + 2 ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_INT 2
5880: PLUS
5881: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5882: LD_VAR 0 8
5886: PPUSH
5887: CALL_OW 314
5891: NOT
5892: PUSH
5893: LD_INT 22
5895: PUSH
5896: LD_VAR 0 8
5900: PPUSH
5901: CALL_OW 255
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 92
5912: PUSH
5913: LD_VAR 0 16
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 16
5926: PUSH
5927: LD_INT 2
5929: ARRAY
5930: PUSH
5931: LD_INT 4
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: LD_INT 3
5951: GREATER
5952: AND
5953: PUSH
5954: LD_VAR 0 21
5958: NOT
5959: AND
5960: IFFALSE 5354
// for i := 1 to path do
5962: LD_ADDR_VAR 0 7
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_VAR 0 2
5976: PUSH
5977: FOR_TO
5978: IFFALSE 6061
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 7
5989: ARRAY
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_VAR 0 16
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: EQUAL
6004: PUSH
6005: LD_VAR 0 2
6009: PUSH
6010: LD_VAR 0 7
6014: ARRAY
6015: PUSH
6016: LD_INT 2
6018: ARRAY
6019: PUSH
6020: LD_VAR 0 16
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: EQUAL
6029: AND
6030: IFFALSE 6059
// begin path = path diff [ path [ i ] ] ;
6032: LD_ADDR_VAR 0 2
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: LD_VAR 0 7
6051: ARRAY
6052: PUSH
6053: EMPTY
6054: LIST
6055: DIFF
6056: ST_TO_ADDR
// break ;
6057: GO 6061
// end ;
6059: GO 5977
6061: POP
6062: POP
// end ; if not path then
6063: LD_VAR 0 2
6067: NOT
6068: IFFALSE 6072
// break ;
6070: GO 6074
// end ;
6072: GO 5330
6074: POP
6075: POP
// repeat unitsReachPathEnd = 0 ;
6076: LD_ADDR_VAR 0 20
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// for attackUnit in attackUnits do
6084: LD_ADDR_VAR 0 10
6088: PUSH
6089: LD_VAR 0 9
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6268
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_VAR 0 17
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 17
6115: PUSH
6116: LD_INT 2
6118: ARRAY
6119: PPUSH
6120: CALL_OW 297
6124: PUSH
6125: LD_INT 7
6127: LESS
6128: NOT
6129: PUSH
6130: LD_VAR 0 10
6134: PPUSH
6135: CALL_OW 110
6139: PUSH
6140: LD_INT 0
6142: EQUAL
6143: AND
6144: IFFALSE 6210
// begin if agressiveMove then
6146: LD_VAR 0 4
6150: IFFALSE 6181
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6152: LD_VAR 0 10
6156: PPUSH
6157: LD_VAR 0 17
6161: PUSH
6162: LD_INT 1
6164: ARRAY
6165: PPUSH
6166: LD_VAR 0 17
6170: PUSH
6171: LD_INT 2
6173: ARRAY
6174: PPUSH
6175: CALL_OW 114
6179: GO 6208
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6181: LD_VAR 0 10
6185: PPUSH
6186: LD_VAR 0 17
6190: PUSH
6191: LD_INT 1
6193: ARRAY
6194: PPUSH
6195: LD_VAR 0 17
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: CALL_OW 111
// end else
6208: GO 6237
// if GetTag ( attackUnit ) = 0 then
6210: LD_VAR 0 10
6214: PPUSH
6215: CALL_OW 110
6219: PUSH
6220: LD_INT 0
6222: EQUAL
6223: IFFALSE 6237
// SetTag ( attackUnit , 1 ) ;
6225: LD_VAR 0 10
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: CALL_OW 109
// if GetTag ( unit ) = 1 then
6237: LD_VAR 0 8
6241: PPUSH
6242: CALL_OW 110
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6266
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6252: LD_ADDR_VAR 0 20
6256: PUSH
6257: LD_VAR 0 20
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6094
6268: POP
6269: POP
// wait ( 0 0$1 ) ;
6270: LD_INT 35
6272: PPUSH
6273: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6277: LD_VAR 0 20
6281: PUSH
6282: LD_VAR 0 9
6286: PUSH
6287: LD_INT 3
6289: MINUS
6290: GREATER
6291: IFFALSE 6076
// wait ( 0 0$10 ) ;
6293: LD_INT 350
6295: PPUSH
6296: CALL_OW 67
// end ; for attackUnit in attackUnits do
6300: LD_ADDR_VAR 0 10
6304: PUSH
6305: LD_VAR 0 9
6309: PUSH
6310: FOR_IN
6311: IFFALSE 6327
// SetTag ( attackUnit , 2 ) ;
6313: LD_VAR 0 10
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 109
6325: GO 6310
6327: POP
6328: POP
// startAttacks = true ;
6329: LD_ADDR_VAR 0 21
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// if startAttacks then
6337: LD_VAR 0 21
6341: IFFALSE 7160
// begin repeat wait ( 0 0$1 ) ;
6343: LD_INT 35
6345: PPUSH
6346: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6350: LD_ADDR_VAR 0 11
6354: PUSH
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 50
6362: PUSH
6363: EMPTY
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 72
6384: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6385: LD_ADDR_VAR 0 13
6389: PUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 1000
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 72
6441: ST_TO_ADDR
// if damageUnits and medics then
6442: LD_VAR 0 13
6446: PUSH
6447: LD_VAR 0 11
6451: AND
6452: IFFALSE 6474
// ComHeal ( medics , damageUnits [ 1 ] ) else
6454: LD_VAR 0 11
6458: PPUSH
6459: LD_VAR 0 13
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: CALL_OW 128
6472: GO 6524
// if medics and not damageUnits then
6474: LD_VAR 0 11
6478: PUSH
6479: LD_VAR 0 13
6483: NOT
6484: AND
6485: IFFALSE 6524
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6487: LD_VAR 0 11
6491: PPUSH
6492: LD_VAR 0 9
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: CALL_OW 250
6505: PPUSH
6506: LD_VAR 0 9
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: PPUSH
6515: CALL_OW 251
6519: PPUSH
6520: CALL_OW 111
// for attackUnit in attackUnits do
6524: LD_ADDR_VAR 0 10
6528: PUSH
6529: LD_VAR 0 9
6533: PUSH
6534: FOR_IN
6535: IFFALSE 7151
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6537: LD_ADDR_VAR 0 22
6541: PUSH
6542: LD_INT 81
6544: PUSH
6545: LD_VAR 0 10
6549: PPUSH
6550: CALL_OW 255
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PPUSH
6564: LD_VAR 0 10
6568: PPUSH
6569: CALL_OW 74
6573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6574: LD_ADDR_VAR 0 23
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_VAR 0 10
6586: PPUSH
6587: CALL_OW 255
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 59
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 21
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: PPUSH
6643: LD_VAR 0 10
6647: PPUSH
6648: CALL_OW 74
6652: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6653: LD_VAR 0 10
6657: PPUSH
6658: CALL_OW 110
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: IFFALSE 6826
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6668: LD_VAR 0 10
6672: PPUSH
6673: LD_VAR 0 22
6677: PPUSH
6678: CALL_OW 296
6682: PUSH
6683: LD_INT 10
6685: PLUS
6686: PUSH
6687: LD_VAR 0 10
6691: PPUSH
6692: LD_VAR 0 23
6696: PPUSH
6697: CALL_OW 296
6701: LESS
6702: IFFALSE 6720
// ComAttackUnit ( attackUnit , target1 ) else
6704: LD_VAR 0 10
6708: PPUSH
6709: LD_VAR 0 22
6713: PPUSH
6714: CALL_OW 115
6718: GO 6734
// ComAttackUnit ( attackUnit , target2 ) ;
6720: LD_VAR 0 10
6724: PPUSH
6725: LD_VAR 0 23
6729: PPUSH
6730: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6734: LD_VAR 0 10
6738: PPUSH
6739: CALL_OW 256
6743: PUSH
6744: LD_INT 650
6746: LESS
6747: PUSH
6748: LD_VAR 0 10
6752: PPUSH
6753: CALL_OW 247
6757: PUSH
6758: LD_INT 2
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 10
6767: PPUSH
6768: CALL_OW 263
6772: PUSH
6773: LD_INT 1
6775: EQUAL
6776: AND
6777: IFFALSE 6826
// begin SetTag ( attackUnit , 3 ) ;
6779: LD_VAR 0 10
6783: PPUSH
6784: LD_INT 3
6786: PPUSH
6787: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6791: LD_VAR 0 10
6795: PPUSH
6796: CALL_OW 313
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: LD_INT 3
6807: PPUSH
6808: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6812: LD_VAR 0 10
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6826: LD_VAR 0 10
6830: PPUSH
6831: LD_VAR 0 5
6835: PPUSH
6836: CALL_OW 308
6840: PUSH
6841: LD_VAR 0 10
6845: PPUSH
6846: CALL_OW 110
6850: PUSH
6851: LD_INT 3
6853: EQUAL
6854: AND
6855: PUSH
6856: LD_VAR 0 10
6860: PPUSH
6861: CALL_OW 313
6865: AND
6866: IFFALSE 6939
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6868: LD_ADDR_VAR 0 14
6872: PUSH
6873: LD_VAR 0 10
6877: PPUSH
6878: CALL_OW 313
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: ST_TO_ADDR
// if not driver in mechanics then
6887: LD_VAR 0 14
6891: PUSH
6892: LD_VAR 0 12
6896: IN
6897: NOT
6898: IFFALSE 6916
// mechanics = mechanics ^ driver ;
6900: LD_ADDR_VAR 0 12
6904: PUSH
6905: LD_VAR 0 12
6909: PUSH
6910: LD_VAR 0 14
6914: ADD
6915: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6916: LD_VAR 0 14
6920: PPUSH
6921: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6925: LD_VAR 0 14
6929: PPUSH
6930: LD_VAR 0 10
6934: PPUSH
6935: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6939: LD_VAR 0 10
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: EQUAL
6952: IFFALSE 7070
// begin SetTag ( attackUnit , 2 ) ;
6954: LD_VAR 0 10
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6966: LD_VAR 0 10
6970: PPUSH
6971: CALL_OW 247
6975: PUSH
6976: LD_INT 2
6978: EQUAL
6979: PUSH
6980: LD_VAR 0 10
6984: PPUSH
6985: CALL_OW 263
6989: PUSH
6990: LD_INT 1
6992: EQUAL
6993: AND
6994: PUSH
6995: LD_VAR 0 10
6999: PPUSH
7000: CALL_OW 313
7004: NOT
7005: AND
7006: IFFALSE 7070
// begin SetFuel ( attackUnit , 100 ) ;
7008: LD_VAR 0 10
7012: PPUSH
7013: LD_INT 100
7015: PPUSH
7016: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
7020: LD_VAR 0 12
7024: PPUSH
7025: LD_VAR 0 10
7029: PPUSH
7030: CALL_OW 74
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7044: LD_ADDR_VAR 0 12
7048: PUSH
7049: LD_VAR 0 12
7053: PUSH
7054: LD_VAR 0 12
7058: PPUSH
7059: LD_VAR 0 10
7063: PPUSH
7064: CALL_OW 74
7068: DIFF
7069: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7070: LD_ADDR_VAR 0 8
7074: PUSH
7075: LD_VAR 0 12
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7147
// begin if not IsInArea ( unit , retreatArea ) then
7083: LD_VAR 0 8
7087: PPUSH
7088: LD_VAR 0 5
7092: PPUSH
7093: CALL_OW 308
7097: NOT
7098: IFFALSE 7114
// ComMoveToArea ( unit , retreatArea ) ;
7100: LD_VAR 0 8
7104: PPUSH
7105: LD_VAR 0 5
7109: PPUSH
7110: CALL_OW 113
// if GetLives ( unit ) < 250 then
7114: LD_VAR 0 8
7118: PPUSH
7119: CALL_OW 256
7123: PUSH
7124: LD_INT 250
7126: LESS
7127: IFFALSE 7145
// mechanics = mechanics diff unit ;
7129: LD_ADDR_VAR 0 12
7133: PUSH
7134: LD_VAR 0 12
7138: PUSH
7139: LD_VAR 0 8
7143: DIFF
7144: ST_TO_ADDR
// end ;
7145: GO 7080
7147: POP
7148: POP
// end ;
7149: GO 6534
7151: POP
7152: POP
// until not attackUnits ;
7153: LD_VAR 0 9
7157: NOT
7158: IFFALSE 6343
// end ; wait ( 0 0$1 ) ;
7160: LD_INT 35
7162: PPUSH
7163: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PPUSH
7178: CALL_OW 72
7182: NOT
7183: IFFALSE 5166
// end ;
7185: LD_VAR 0 6
7189: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// for i := 2 to path do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 2
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 2
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7386
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: LD_VAR 0 2
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 4
7277: ARRAY
7278: PUSH
7279: LD_INT 2
7281: ARRAY
7282: PPUSH
7283: CALL_OW 297
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_VAR 0 5
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 2
7309: ARRAY
7310: PPUSH
7311: CALL_OW 297
7315: LESS
7316: IFFALSE 7384
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7318: LD_ADDR_VAR 0 5
7322: PUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 4
7340: ARRAY
7341: PUSH
7342: LD_INT 1
7344: ARRAY
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 4
7373: ARRAY
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PPUSH
7379: CALL_OW 1
7383: ST_TO_ADDR
// end ; end ;
7384: GO 7245
7386: POP
7387: POP
// result = nearPosition ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 3
7402: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7403: LD_EXP 58
7407: PPUSH
7408: CALL_OW 274
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 275
7420: PUSH
7421: LD_INT 0
7423: GREATER
7424: IFFALSE 7530
7426: GO 7428
7428: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7429: LD_EXP 57
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 72
7448: PPUSH
7449: LD_INT 31
7451: PPUSH
7452: LD_INT 105
7454: PPUSH
7455: LD_INT 51
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7465: LD_EXP 57
7469: PPUSH
7470: LD_INT 25
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: PPUSH
7485: LD_INT 31
7487: PPUSH
7488: LD_INT 114
7490: PPUSH
7491: LD_INT 58
7493: PPUSH
7494: LD_INT 3
7496: PPUSH
7497: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7501: LD_EXP 57
7505: PPUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 72
7520: PPUSH
7521: LD_EXP 58
7525: PPUSH
7526: CALL_OW 180
// end ; end_of_file
7530: END
// export function Lose_Burlak ; begin
7531: LD_INT 0
7533: PPUSH
// YouLost ( Burlak ) ;
7534: LD_STRING Burlak
7536: PPUSH
7537: CALL_OW 104
// end ;
7541: LD_VAR 0 1
7545: RET
// export function Lose_Gaydar ; begin
7546: LD_INT 0
7548: PPUSH
// YouLost ( Gaydar ) ;
7549: LD_STRING Gaydar
7551: PPUSH
7552: CALL_OW 104
// end ;
7556: LD_VAR 0 1
7560: RET
// export function Lose_SelfAttack ; begin
7561: LD_INT 0
7563: PPUSH
// YouLost ( SelfAttack ) ;
7564: LD_STRING SelfAttack
7566: PPUSH
7567: CALL_OW 104
// end ;
7571: LD_VAR 0 1
7575: RET
// export function Lose_Arrest ; begin
7576: LD_INT 0
7578: PPUSH
// YouLost ( Arrest ) ;
7579: LD_STRING Arrest
7581: PPUSH
7582: CALL_OW 104
// end ;
7586: LD_VAR 0 1
7590: RET
// export function Lose_ArabBreakthrough ; begin
7591: LD_INT 0
7593: PPUSH
// YouLost ( ArabBreakthrough ) ;
7594: LD_STRING ArabBreakthrough
7596: PPUSH
7597: CALL_OW 104
// end ;
7601: LD_VAR 0 1
7605: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7606: LD_EXP 7
7610: NOT
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: NOT
7652: AND
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: NOT
7694: AND
7695: IFFALSE 7708
7697: GO 7699
7699: DISABLE
// begin enable ;
7700: ENABLE
// YouLost ( Engineer ) ;
7701: LD_STRING Engineer
7703: PPUSH
7704: CALL_OW 104
// end ; end_of_file
7708: END
// export function FinishMission ; begin
7709: LD_INT 0
7711: PPUSH
// SetRewards ;
7712: CALL 7733 0 0
// SavePlayerCharacters ;
7716: CALL 8158 0 0
// SaveGlobalVariables ;
7720: CALL 8386 0 0
// YouWin ;
7724: CALL_OW 103
// end ;
7728: LD_VAR 0 1
7732: RET
// function SetRewards ; var unitsToReward ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
// SetAchievements ;
7737: CALL 18539 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7741: LD_INT 22
7743: PUSH
7744: LD_INT 3
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: NOT
7770: IFFALSE 7784
// AddMedal ( Dismantle , 1 ) else
7772: LD_STRING Dismantle
7774: PPUSH
7775: LD_INT 1
7777: PPUSH
7778: CALL_OW 101
7782: GO 7795
// AddMedal ( Dismantle , - 1 ) ;
7784: LD_STRING Dismantle
7786: PPUSH
7787: LD_INT 1
7789: NEG
7790: PPUSH
7791: CALL_OW 101
// if killedArabianUnits >= 25 then
7795: LD_EXP 22
7799: PUSH
7800: LD_INT 25
7802: GREATEREQUAL
7803: IFFALSE 7825
// begin AddMedal ( EnemyLosses , 1 ) ;
7805: LD_STRING EnemyLosses
7807: PPUSH
7808: LD_INT 1
7810: PPUSH
7811: CALL_OW 101
// heikeHeavyLosses = true ;
7815: LD_ADDR_EXP 4
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// end else
7823: GO 7836
// AddMedal ( EnemyLosses , - 1 ) ;
7825: LD_STRING EnemyLosses
7827: PPUSH
7828: LD_INT 1
7830: NEG
7831: PPUSH
7832: CALL_OW 101
// if not lostUnits then
7836: LD_EXP 24
7840: NOT
7841: IFFALSE 7855
// AddMedal ( LittleLosses , 1 ) else
7843: LD_STRING LittleLosses
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 101
7853: GO 7866
// AddMedal ( LittleLosses , - 1 ) ;
7855: LD_STRING LittleLosses
7857: PPUSH
7858: LD_INT 1
7860: NEG
7861: PPUSH
7862: CALL_OW 101
// GiveMedals ( Main ) ;
7866: LD_STRING Main
7868: PPUSH
7869: CALL_OW 102
// unitsToReward = [ ] ;
7873: LD_ADDR_VAR 0 2
7877: PUSH
7878: EMPTY
7879: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7880: LD_EXP 42
7884: PPUSH
7885: CALL_OW 255
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: IFFALSE 7911
// unitsToReward = unitsToReward ^ Burlak ;
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 2
7904: PUSH
7905: LD_EXP 42
7909: ADD
7910: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7911: LD_EXP 43
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 3
7923: EQUAL
7924: IFFALSE 7942
// unitsToReward = unitsToReward ^ Gnyevko ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_EXP 43
7940: ADD
7941: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7942: LD_EXP 44
7946: PPUSH
7947: CALL_OW 255
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: IFFALSE 7973
// unitsToReward = unitsToReward ^ Kirilenkova ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 2
7966: PUSH
7967: LD_EXP 44
7971: ADD
7972: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7973: LD_EXP 45
7977: PPUSH
7978: CALL_OW 255
7982: PUSH
7983: LD_INT 3
7985: EQUAL
7986: IFFALSE 8004
// unitsToReward = unitsToReward ^ Kovalyuk ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_EXP 45
8002: ADD
8003: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
8004: LD_EXP 46
8008: PPUSH
8009: CALL_OW 255
8013: PUSH
8014: LD_INT 3
8016: EQUAL
8017: IFFALSE 8035
// unitsToReward = unitsToReward ^ Belkov ;
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: LD_VAR 0 2
8028: PUSH
8029: LD_EXP 46
8033: ADD
8034: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8035: LD_EXP 47
8039: PPUSH
8040: CALL_OW 255
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: IFFALSE 8066
// unitsToReward = unitsToReward ^ Belkov2 ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: LD_VAR 0 2
8059: PUSH
8060: LD_EXP 47
8064: ADD
8065: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8066: LD_EXP 48
8070: PPUSH
8071: CALL_OW 255
8075: PUSH
8076: LD_INT 3
8078: EQUAL
8079: IFFALSE 8097
// unitsToReward = unitsToReward ^ Scholtze ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_EXP 48
8095: ADD
8096: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8097: LD_EXP 49
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: IFFALSE 8128
// unitsToReward = unitsToReward ^ Kuzmov ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_EXP 49
8126: ADD
8127: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_EXP 62
8142: ADD
8143: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 43
// end ;
8153: LD_VAR 0 1
8157: RET
// function SavePlayerCharacters ; var othersYour ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8162: LD_EXP 42
8166: PPUSH
8167: LD_STRING 04_Burlak
8169: PPUSH
8170: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8174: LD_EXP 43
8178: PPUSH
8179: CALL_OW 255
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8201
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8189: LD_EXP 43
8193: PPUSH
8194: LD_STRING 04_Gnyevko
8196: PPUSH
8197: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8201: LD_EXP 45
8205: PPUSH
8206: CALL_OW 255
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: IFFALSE 8228
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8216: LD_EXP 45
8220: PPUSH
8221: LD_STRING 04_Kovalyuk
8223: PPUSH
8224: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8228: LD_EXP 44
8232: PPUSH
8233: CALL_OW 255
8237: PUSH
8238: LD_INT 3
8240: EQUAL
8241: IFFALSE 8255
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8243: LD_EXP 44
8247: PPUSH
8248: LD_STRING 04_Kirilenkova
8250: PPUSH
8251: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8255: LD_EXP 48
8259: PPUSH
8260: CALL_OW 255
8264: PUSH
8265: LD_INT 3
8267: EQUAL
8268: IFFALSE 8282
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8270: LD_EXP 48
8274: PPUSH
8275: LD_STRING 04_Scholtze
8277: PPUSH
8278: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8282: LD_EXP 46
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 3
8294: EQUAL
8295: IFFALSE 8309
// SaveCharacters ( Belkov , 04_Belkov ) ;
8297: LD_EXP 46
8301: PPUSH
8302: LD_STRING 04_Belkov
8304: PPUSH
8305: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8309: LD_EXP 47
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: IFFALSE 8336
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8324: LD_EXP 47
8328: PPUSH
8329: LD_STRING 04_Belkov2
8331: PPUSH
8332: CALL_OW 38
// if IsOK ( Kuzmov ) then
8336: LD_EXP 49
8340: PPUSH
8341: CALL_OW 302
8345: IFFALSE 8359
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8347: LD_EXP 49
8351: PPUSH
8352: LD_STRING 04_Kuzmov
8354: PPUSH
8355: CALL_OW 38
// othersYour = randomsToSave ;
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_EXP 62
8368: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8369: LD_EXP 62
8373: PPUSH
8374: LD_STRING 04_other_survivors
8376: PPUSH
8377: CALL_OW 38
// end ;
8381: LD_VAR 0 1
8385: RET
// function SaveGlobalVariables ; begin
8386: LD_INT 0
8388: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8389: LD_EXP 4
8393: PPUSH
8394: LD_STRING 04_HeikeHeavyLosses_1
8396: PPUSH
8397: CALL_OW 39
// end ; end_of_file
8401: LD_VAR 0 1
8405: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 255
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 266
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_INT 5
8442: PPUSH
8443: CALL_OW 308
8447: NOT
8448: AND
8449: IFFALSE 8460
// Dial_DepotInWrongPlace ( building ) ;
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL 11049 0 1
// end ;
8460: PPOPN 2
8462: END
// on BuildingComplete ( building ) do var i , cargo ;
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8467: LD_VAR 0 1
8471: PPUSH
8472: CALL_OW 255
8476: PUSH
8477: LD_INT 3
8479: EQUAL
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 266
8490: PUSH
8491: LD_INT 0
8493: EQUAL
8494: AND
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: LD_INT 5
8503: PPUSH
8504: CALL_OW 308
8508: AND
8509: PUSH
8510: LD_EXP 8
8514: NOT
8515: AND
8516: PUSH
8517: LD_EXP 9
8521: NOT
8522: AND
8523: IFFALSE 8549
// begin namedBase = true ;
8525: LD_ADDR_EXP 9
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_STRING chuikov
8540: PPUSH
8541: CALL_OW 500
// Dial_FinishDepot ;
8545: CALL 11323 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 255
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 266
8572: PUSH
8573: LD_INT 32
8575: EQUAL
8576: AND
8577: IFFALSE 8593
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8579: LD_ADDR_EXP 25
8583: PUSH
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 1
8591: PLUS
8592: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 255
8602: PUSH
8603: LD_INT 6
8605: EQUAL
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 266
8616: PUSH
8617: LD_INT 0
8619: EQUAL
8620: AND
8621: IFFALSE 8820
// begin secondBaseDepot = building ;
8623: LD_ADDR_EXP 58
8627: PUSH
8628: LD_VAR 0 1
8632: ST_TO_ADDR
// uc_side = 6 ;
8633: LD_ADDR_OWVAR 20
8637: PUSH
8638: LD_INT 6
8640: ST_TO_ADDR
// uc_nation = nation_russian ;
8641: LD_ADDR_OWVAR 21
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8649: LD_ADDR_OWVAR 37
8653: PUSH
8654: LD_INT 21
8656: ST_TO_ADDR
// vc_control = control_manual ;
8657: LD_ADDR_OWVAR 38
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// vc_engine = engine_combustion ;
8665: LD_ADDR_OWVAR 39
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8673: LD_ADDR_OWVAR 40
8677: PUSH
8678: LD_INT 51
8680: ST_TO_ADDR
// cargo = CreateVehicle ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: CALL_OW 45
8690: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8691: LD_VAR 0 3
8695: PPUSH
8696: LD_INT 3
8698: PPUSH
8699: LD_INT 0
8701: PPUSH
8702: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8706: LD_VAR 0 3
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 100
8716: PPUSH
8717: CALL_OW 291
// ComGive ( cargo , building ) ;
8721: LD_VAR 0 3
8725: PPUSH
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8735: LD_INT 0
8737: PPUSH
8738: LD_INT 2
8740: PPUSH
8741: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8745: CALL_OW 44
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: DOUBLE
8765: LD_INT 10
8767: DEC
8768: ST_TO_ADDR
8769: LD_EXP 34
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8818
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_EXP 34
8786: PUSH
8787: LD_VAR 0 2
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_EXP 34
8801: PUSH
8802: LD_VAR 0 2
8806: ARRAY
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: PPUSH
8812: CALL_OW 171
8816: GO 8774
8818: POP
8819: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 255
8829: PUSH
8830: LD_INT 6
8832: EQUAL
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 266
8843: PUSH
8844: LD_INT 31
8846: EQUAL
8847: AND
8848: IFFALSE 8893
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8850: LD_EXP 57
8854: PPUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 56
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 120
// end ;
8893: PPOPN 3
8895: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 266
8905: PUSH
8906: LD_INT 7
8908: EQUAL
8909: PUSH
8910: LD_EXP 15
8914: NOT
8915: AND
8916: IFFALSE 8922
// Dial_LabUpgraded ;
8918: CALL 11643 0 0
// end ;
8922: PPOPN 1
8924: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8925: LD_VAR 0 1
8929: PUSH
8930: LD_INT 3
8932: EQUAL
8933: PUSH
8934: LD_VAR 0 2
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: AND
8943: PUSH
8944: LD_VAR 0 1
8948: PUSH
8949: LD_INT 2
8951: EQUAL
8952: PUSH
8953: LD_VAR 0 2
8957: PUSH
8958: LD_INT 3
8960: EQUAL
8961: AND
8962: OR
8963: IFFALSE 8985
// begin if dial_contactBlock then
8965: LD_EXP 16
8969: IFFALSE 8973
// exit ;
8971: GO 9029
// dial_contactBlock = true ;
8973: LD_ADDR_EXP 16
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// Dial_Contact ;
8981: CALL 13858 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 3
8992: EQUAL
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: LD_INT 6
9001: EQUAL
9002: AND
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: LD_INT 6
9011: EQUAL
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: LD_INT 3
9020: EQUAL
9021: AND
9022: OR
9023: IFFALSE 9029
// Lose_SelfAttack ;
9025: CALL 7561 0 0
// end ;
9029: PPOPN 2
9031: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9032: LD_VAR 0 1
9036: PUSH
9037: LD_EXP 42
9041: EQUAL
9042: IFFALSE 9048
// Lose_Burlak ;
9044: CALL 7531 0 0
// if unit = Gaydar then
9048: LD_VAR 0 1
9052: PUSH
9053: LD_EXP 54
9057: EQUAL
9058: IFFALSE 9064
// Lose_Gaydar ;
9060: CALL 7546 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9064: LD_VAR 0 1
9068: PPUSH
9069: CALL_OW 255
9073: PUSH
9074: LD_INT 3
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 247
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: AND
9092: IFFALSE 9108
// lostUnits = lostUnits + 1 ;
9094: LD_ADDR_EXP 24
9098: PUSH
9099: LD_EXP 24
9103: PUSH
9104: LD_INT 1
9106: PLUS
9107: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 255
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 247
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: AND
9136: PUSH
9137: LD_EXP 54
9141: PPUSH
9142: CALL_OW 305
9146: NOT
9147: AND
9148: IFFALSE 9164
// killedArabianUnits = killedArabianUnits + 1 ;
9150: LD_ADDR_EXP 22
9154: PUSH
9155: LD_EXP 22
9159: PUSH
9160: LD_INT 1
9162: PLUS
9163: ST_TO_ADDR
// if unit in firstAttackGroup then
9164: LD_VAR 0 1
9168: PUSH
9169: LD_EXP 64
9173: IN
9174: IFFALSE 9192
// firstAttackGroup = firstAttackGroup diff unit ;
9176: LD_ADDR_EXP 64
9180: PUSH
9181: LD_EXP 64
9185: PUSH
9186: LD_VAR 0 1
9190: DIFF
9191: ST_TO_ADDR
// end ;
9192: PPOPN 1
9194: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 6
9202: EQUAL
9203: IFFALSE 9217
// SetSide ( building , 6 ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 6
9212: PPUSH
9213: CALL_OW 235
// end ;
9217: PPOPN 3
9219: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_INT 22
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 51
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9404
// if GetTaskList ( i ) > 0 then
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 437
9293: PUSH
9294: LD_INT 0
9296: GREATER
9297: IFFALSE 9402
// for j = 1 to GetTaskList ( i ) do
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 437
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9400
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9322: LD_ADDR_VAR 0 4
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: CALL_OW 437
9336: PUSH
9337: LD_VAR 0 3
9341: ARRAY
9342: PUSH
9343: LD_INT 4
9345: ARRAY
9346: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 255
9356: PUSH
9357: LD_INT 6
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 2
9365: PPUSH
9366: CALL_OW 437
9370: PUSH
9371: LD_VAR 0 3
9375: ARRAY
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PUSH
9381: LD_STRING <
9383: EQUAL
9384: AND
9385: IFFALSE 9398
// SetTaskList ( i , [ ] ) ;
9387: LD_VAR 0 2
9391: PPUSH
9392: EMPTY
9393: PPUSH
9394: CALL_OW 446
// end ;
9398: GO 9319
9400: POP
9401: POP
9402: GO 9281
9404: POP
9405: POP
// end ; end_of_file
9406: PPOPN 8
9408: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9409: LD_INT 0
9411: PPUSH
9412: PPUSH
// if exist_mode then
9413: LD_VAR 0 2
9417: IFFALSE 9442
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_EXP 30
9428: PUSH
9429: LD_VAR 0 1
9433: STR
9434: PPUSH
9435: CALL_OW 34
9439: ST_TO_ADDR
9440: GO 9457
// unit := NewCharacter ( ident ) ;
9442: LD_ADDR_VAR 0 5
9446: PUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 25
9456: ST_TO_ADDR
// if class then
9457: LD_VAR 0 3
9461: IFFALSE 9477
// SetClass ( unit , class ) ;
9463: LD_VAR 0 5
9467: PPUSH
9468: LD_VAR 0 3
9472: PPUSH
9473: CALL_OW 336
// result := unit ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_VAR 0 5
9486: ST_TO_ADDR
// end ;
9487: LD_VAR 0 4
9491: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9492: LD_INT 0
9494: PPUSH
9495: PPUSH
// for unit in units do
9496: LD_ADDR_VAR 0 5
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9530
// PlaceUnitArea ( unit , area , spawnMode ) ;
9509: LD_VAR 0 5
9513: PPUSH
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: CALL_OW 49
9528: GO 9506
9530: POP
9531: POP
// end ;
9532: LD_VAR 0 4
9536: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9537: LD_INT 0
9539: PPUSH
9540: PPUSH
9541: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_VAR 0 1
9551: PUSH
9552: LD_EXP 42
9556: PUSH
9557: LD_EXP 43
9561: PUSH
9562: LD_EXP 46
9566: PUSH
9567: LD_EXP 47
9571: PUSH
9572: LD_EXP 44
9576: PUSH
9577: LD_EXP 45
9581: PUSH
9582: LD_EXP 48
9586: PUSH
9587: LD_EXP 49
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: DIFF
9602: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: ST_TO_ADDR
// if radio then
9627: LD_VAR 0 4
9631: IFFALSE 9680
// begin if GetSex ( speaker ) = sex_male then
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL_OW 258
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9664
// SayRadio ( speaker , dialogMID ) else
9648: LD_VAR 0 7
9652: PPUSH
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL_OW 94
9662: GO 9678
// SayRadio ( speaker , dialogFID ) ;
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: CALL_OW 94
// end else
9678: GO 9725
// begin if GetSex ( speaker ) = sex_male then
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 258
9689: PUSH
9690: LD_INT 1
9692: EQUAL
9693: IFFALSE 9711
// Say ( speaker , dialogMID ) else
9695: LD_VAR 0 7
9699: PPUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 88
9709: GO 9725
// Say ( speaker , dialogFID ) ;
9711: LD_VAR 0 7
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: CALL_OW 88
// end ; result := speaker ;
9725: LD_ADDR_VAR 0 5
9729: PUSH
9730: LD_VAR 0 7
9734: ST_TO_ADDR
// end ;
9735: LD_VAR 0 5
9739: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9740: LD_INT 0
9742: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 255
9752: PUSH
9753: LD_VAR 0 3
9757: EQUAL
9758: PUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 302
9768: AND
9769: IFFALSE 9791
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9771: LD_VAR 0 1
9775: PPUSH
9776: LD_EXP 29
9780: PUSH
9781: LD_VAR 0 2
9785: STR
9786: PPUSH
9787: CALL_OW 38
// end ;
9791: LD_VAR 0 4
9795: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// resultCharactersToSave = [ ] ;
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// for unit in characters do
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_VAR 0 1
9817: PUSH
9818: FOR_IN
9819: IFFALSE 9867
// if GetSide ( unit ) = side and IsOK ( unit ) then
9821: LD_VAR 0 5
9825: PPUSH
9826: CALL_OW 255
9830: PUSH
9831: LD_VAR 0 3
9835: EQUAL
9836: PUSH
9837: LD_VAR 0 5
9841: PPUSH
9842: CALL_OW 302
9846: AND
9847: IFFALSE 9865
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 6
9858: PUSH
9859: LD_VAR 0 5
9863: ADD
9864: ST_TO_ADDR
9865: GO 9818
9867: POP
9868: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9869: LD_VAR 0 6
9873: PPUSH
9874: LD_EXP 29
9878: PUSH
9879: LD_VAR 0 2
9883: STR
9884: PPUSH
9885: CALL_OW 38
// end ;
9889: LD_VAR 0 4
9893: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9901: LD_ADDR_VAR 0 3
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 3
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 50
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_VAR 0 3
9951: PUSH
9952: LD_EXP 42
9956: DIFF
9957: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_VAR 0 3
9967: PUSH
9968: LD_EXP 52
9972: DIFF
9973: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_STRING text
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: LD_INT 8
9987: PPUSH
9988: LD_INT -5
9990: PUSH
9991: LD_EXP 42
9995: PUSH
9996: LD_INT -6
9998: PUSH
9999: LD_INT -2
10001: PUSH
10002: LD_INT -3
10004: PUSH
10005: LD_INT -5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_VAR 0 3
10020: ADD
10021: PUSH
10022: LD_INT -6
10024: PUSH
10025: LD_INT -4
10027: PUSH
10028: LD_EXP 52
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: PPUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 42
10068: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 6
10076: PPUSH
10077: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10081: LD_EXP 52
10085: PPUSH
10086: LD_INT 6
10088: PPUSH
10089: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10093: LD_VAR 0 4
10097: PPUSH
10098: LD_INT 3
10100: PPUSH
10101: CALL_OW 235
// burlakTeam = selectedPeople ;
10105: LD_ADDR_EXP 55
10109: PUSH
10110: LD_VAR 0 4
10114: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10115: LD_ADDR_EXP 56
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 6
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10149: LD_ADDR_EXP 56
10153: PUSH
10154: LD_EXP 56
10158: PUSH
10159: LD_EXP 49
10163: DIFF
10164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_INT 6
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: PUSH
10199: FOR_IN
10200: IFFALSE 10224
// if IsInUnit ( i ) then
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 310
10211: IFFALSE 10222
// ComExitVehicle ( i ) ;
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 121
10222: GO 10199
10224: POP
10225: POP
// if not Gnyevko in selectedPeople then
10226: LD_EXP 43
10230: PUSH
10231: LD_VAR 0 4
10235: IN
10236: NOT
10237: IFFALSE 10254
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10239: LD_EXP 43
10243: PPUSH
10244: LD_STRING Gnyevko
10246: PPUSH
10247: LD_INT 6
10249: PPUSH
10250: CALL 9740 0 3
// if not Kovalyuk in selectedPeople then
10254: LD_EXP 45
10258: PUSH
10259: LD_VAR 0 4
10263: IN
10264: NOT
10265: IFFALSE 10282
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10267: LD_EXP 45
10271: PPUSH
10272: LD_STRING Kovalyuk
10274: PPUSH
10275: LD_INT 6
10277: PPUSH
10278: CALL 9740 0 3
// if not Kirilenkova in selectedPeople then
10282: LD_EXP 44
10286: PUSH
10287: LD_VAR 0 4
10291: IN
10292: NOT
10293: IFFALSE 10310
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10295: LD_EXP 44
10299: PPUSH
10300: LD_STRING Kirilenkova
10302: PPUSH
10303: LD_INT 6
10305: PPUSH
10306: CALL 9740 0 3
// if not Scholtze in selectedPeople then
10310: LD_EXP 48
10314: PUSH
10315: LD_VAR 0 4
10319: IN
10320: NOT
10321: IFFALSE 10338
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10323: LD_EXP 48
10327: PPUSH
10328: LD_STRING Scholtze
10330: PPUSH
10331: LD_INT 6
10333: PPUSH
10334: CALL 9740 0 3
// if not Belkov in selectedPeople then
10338: LD_EXP 46
10342: PUSH
10343: LD_VAR 0 4
10347: IN
10348: NOT
10349: IFFALSE 10366
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10351: LD_EXP 46
10355: PPUSH
10356: LD_STRING Belkov
10358: PPUSH
10359: LD_INT 6
10361: PPUSH
10362: CALL 9740 0 3
// if not Belkov2 in selectedPeople then
10366: LD_EXP 47
10370: PUSH
10371: LD_VAR 0 4
10375: IN
10376: NOT
10377: IFFALSE 10394
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_STRING Belkov2
10386: PPUSH
10387: LD_INT 6
10389: PPUSH
10390: CALL 9740 0 3
// others = popovTeam diff Popov ;
10394: LD_ADDR_VAR 0 5
10398: PUSH
10399: LD_EXP 56
10403: PUSH
10404: LD_EXP 52
10408: DIFF
10409: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_STRING other_survivors_with_popov
10417: PPUSH
10418: LD_INT 6
10420: PPUSH
10421: CALL 9796 0 3
// end ; end_of_file
10425: LD_VAR 0 1
10429: RET
// export function MissionIntro ; var i , unit ; begin
10430: LD_INT 0
10432: PPUSH
10433: PPUSH
10434: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10435: LD_EXP 42
10439: PPUSH
10440: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10444: LD_EXP 59
10448: PPUSH
10449: LD_STRING D1-RSol1-1
10451: PPUSH
10452: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-1
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-1
10475: PPUSH
10476: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10480: LD_EXP 53
10484: PPUSH
10485: LD_STRING D1-Pla-2
10487: PPUSH
10488: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10492: LD_EXP 42
10496: PPUSH
10497: LD_STRING D1-Bur-2
10499: PPUSH
10500: CALL_OW 88
// SelectCharacters ;
10504: CALL 9894 0 0
// InGameOff ;
10508: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10512: LD_STRING M1
10514: PPUSH
10515: CALL_OW 337
// SaveForQuickRestart ;
10519: CALL_OW 22
// for unit in popovTeam do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: LD_EXP 56
10532: PUSH
10533: FOR_IN
10534: IFFALSE 10606
// begin for i := 3 to russianCargoPath1 do
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: DOUBLE
10542: LD_INT 3
10544: DEC
10545: ST_TO_ADDR
10546: LD_EXP 34
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10595
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_EXP 34
10563: PUSH
10564: LD_VAR 0 2
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: LD_EXP 34
10578: PUSH
10579: LD_VAR 0 2
10583: ARRAY
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PPUSH
10589: CALL_OW 171
10593: GO 10551
10595: POP
10596: POP
// wait ( 0 0$01 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// end ;
10604: GO 10533
10606: POP
10607: POP
// end ;
10608: LD_VAR 0 1
10612: RET
// every 0 0$1 do var unit , driver ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin enable ;
10620: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10621: LD_INT 4
10623: PPUSH
10624: LD_INT 22
10626: PUSH
10627: LD_INT 6
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: NOT
10639: PUSH
10640: LD_INT 4
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 2
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: NOT
10690: AND
10691: IFFALSE 10695
// exit ;
10693: GO 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 4
10702: PPUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 6
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10774
// begin RemoveUnit ( unit ) ;
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10730: LD_VAR 0 1
10734: PUSH
10735: LD_EXP 56
10739: IN
10740: NOT
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 264
10751: PUSH
10752: LD_INT 51
10754: EQUAL
10755: AND
10756: IFFALSE 10772
// evacuatedCargos = evacuatedCargos + 1 ;
10758: LD_ADDR_EXP 10
10762: PUSH
10763: LD_EXP 10
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ST_TO_ADDR
// end ;
10772: GO 10718
10774: POP
10775: POP
// if canExitMap then
10776: LD_EXP 6
10780: IFFALSE 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 4
10789: PPUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 70
10836: PUSH
10837: FOR_IN
10838: IFFALSE 11044
// begin if GetType ( unit ) = unit_vehicle then
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 247
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: IFFALSE 10953
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 313
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 42
10873: PUSH
10874: LD_EXP 43
10878: PUSH
10879: LD_EXP 44
10883: PUSH
10884: LD_EXP 45
10888: PUSH
10889: LD_EXP 46
10893: PUSH
10894: LD_EXP 47
10898: PUSH
10899: LD_EXP 48
10903: PUSH
10904: LD_EXP 49
10908: PUSH
10909: LD_EXP 54
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: IN
10925: NOT
10926: IFFALSE 10953
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10928: LD_ADDR_EXP 62
10932: PUSH
10933: LD_EXP 62
10937: PUSH
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 313
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: ADD
10952: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 42
10962: PUSH
10963: LD_EXP 43
10967: PUSH
10968: LD_EXP 44
10972: PUSH
10973: LD_EXP 45
10977: PUSH
10978: LD_EXP 46
10982: PUSH
10983: LD_EXP 47
10987: PUSH
10988: LD_EXP 48
10992: PUSH
10993: LD_EXP 49
10997: PUSH
10998: LD_EXP 54
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: IN
11014: NOT
11015: IFFALSE 11033
// randomsToSave = randomsToSave ^ unit ;
11017: LD_ADDR_EXP 62
11021: PUSH
11022: LD_EXP 62
11026: PUSH
11027: LD_VAR 0 1
11031: ADD
11032: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 64
// end ;
11042: GO 10837
11044: POP
11045: POP
// end ;
11046: PPOPN 2
11048: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: PPUSH
11082: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 87
// InGameOn ;
11095: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11099: LD_EXP 53
11103: PPUSH
11104: LD_STRING D2a-Pla-1
11106: PPUSH
11107: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_INT 3
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 21
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: PUSH
11156: FOR_IN
11157: IFFALSE 11195
// if GetDistUnits ( building , unit ) < 10 then
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: CALL_OW 296
11173: PUSH
11174: LD_INT 10
11176: LESS
11177: IFFALSE 11193
// ComDismantle ( unit , building ) ;
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 167
11193: GO 11156
11195: POP
11196: POP
// repeat wait ( 0 0$1 ) ;
11197: LD_INT 35
11199: PPUSH
11200: CALL_OW 67
// until not IsPlaced ( building ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 305
11213: NOT
11214: IFFALSE 11197
// InGameOff ;
11216: CALL_OW 9
// end ;
11220: LD_VAR 0 2
11224: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11225: LD_EXP 49
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 6
11237: EQUAL
11238: IFFALSE 11320
11240: GO 11242
11242: DISABLE
11243: LD_INT 0
11245: PPUSH
// begin enable ;
11246: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11318
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_EXP 49
11293: PPUSH
11294: CALL_OW 296
11298: PUSH
11299: LD_INT 9
11301: LESS
11302: IFFALSE 11316
// SetSide ( Kuzmov , 3 ) ;
11304: LD_EXP 49
11308: PPUSH
11309: LD_INT 3
11311: PPUSH
11312: CALL_OW 235
11316: GO 11281
11318: POP
11319: POP
// end ;
11320: PPOPN 1
11322: END
// export function Dial_FinishDepot ; var i ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// startEvacuation = true ;
11327: LD_ADDR_EXP 8
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11335: LD_STRING MOutBuild
11337: PPUSH
11338: CALL_OW 337
// uc_side = 6 ;
11342: LD_ADDR_OWVAR 20
11346: PUSH
11347: LD_INT 6
11349: ST_TO_ADDR
// uc_nation = 3 ;
11350: LD_ADDR_OWVAR 21
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11358: LD_ADDR_OWVAR 37
11362: PUSH
11363: LD_INT 21
11365: ST_TO_ADDR
// vc_control = control_manual ;
11366: LD_ADDR_OWVAR 38
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// vc_engine = engine_combustion ;
11374: LD_ADDR_OWVAR 39
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11382: LD_ADDR_OWVAR 40
11386: PUSH
11387: LD_INT 51
11389: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11390: LD_ADDR_EXP 60
11394: PUSH
11395: CALL_OW 45
11399: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11400: LD_EXP 60
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11412: LD_EXP 60
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11427: LD_INT 1
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11437: CALL_OW 44
11441: PPUSH
11442: LD_EXP 60
11446: PPUSH
11447: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11451: LD_EXP 60
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 100
11461: PPUSH
11462: CALL_OW 291
// for i := 1 to 19 do
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 19
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11523
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11482: LD_EXP 60
11486: PPUSH
11487: LD_EXP 34
11491: PUSH
11492: LD_VAR 0 2
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_EXP 34
11506: PUSH
11507: LD_VAR 0 2
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: CALL_OW 171
11521: GO 11479
11523: POP
11524: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11525: LD_EXP 60
11529: PPUSH
11530: LD_INT 105
11532: PPUSH
11533: LD_INT 123
11535: PPUSH
11536: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11540: LD_EXP 60
11544: PPUSH
11545: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 21
11557: DEC
11558: ST_TO_ADDR
11559: LD_EXP 34
11563: PUSH
11564: FOR_TO
11565: IFFALSE 11608
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11567: LD_EXP 60
11571: PPUSH
11572: LD_EXP 34
11576: PUSH
11577: LD_VAR 0 2
11581: ARRAY
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_EXP 34
11591: PUSH
11592: LD_VAR 0 2
11596: ARRAY
11597: PUSH
11598: LD_INT 2
11600: ARRAY
11601: PPUSH
11602: CALL_OW 171
11606: GO 11564
11608: POP
11609: POP
// Say ( Burlak , D2-Bur-1 ) ;
11610: LD_EXP 42
11614: PPUSH
11615: LD_STRING D2-Bur-1
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11622: LD_EXP 53
11626: PPUSH
11627: LD_STRING D2-Pla-1
11629: PPUSH
11630: CALL_OW 94
// PrepareSecondBaseTeam ;
11634: CALL 3314 0 0
// end ;
11638: LD_VAR 0 1
11642: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
// dial_labUpgradedBlock = true ;
11647: LD_ADDR_EXP 15
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 3
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 26
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: PUSH
11711: LD_EXP 42
11715: PUSH
11716: LD_EXP 43
11720: PUSH
11721: LD_EXP 44
11725: PUSH
11726: LD_EXP 45
11730: PUSH
11731: LD_EXP 46
11735: PUSH
11736: LD_EXP 47
11740: PUSH
11741: LD_EXP 48
11745: PUSH
11746: LD_EXP 49
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11762: LD_EXP 48
11766: PPUSH
11767: CALL_OW 302
11771: PUSH
11772: LD_EXP 48
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_INT 3
11784: EQUAL
11785: AND
11786: IFFALSE 11814
// begin Say ( Scholtze , D5-Sch-1 ) ;
11788: LD_EXP 48
11792: PPUSH
11793: LD_STRING D5-Sch-1
11795: PPUSH
11796: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11800: LD_EXP 42
11804: PPUSH
11805: LD_STRING D5-Bur-1
11807: PPUSH
11808: CALL_OW 88
// end else
11812: GO 11949
// if randomMaleSci then
11814: LD_VAR 0 2
11818: IFFALSE 11850
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11820: LD_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_STRING D5-RSci1-1
11831: PPUSH
11832: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11836: LD_EXP 42
11840: PPUSH
11841: LD_STRING D5-Bur-1
11843: PPUSH
11844: CALL_OW 88
// end else
11848: GO 11949
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11850: LD_ADDR_VAR 0 2
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 4
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: PUSH
11906: LD_EXP 42
11910: PUSH
11911: EMPTY
11912: LIST
11913: DIFF
11914: ST_TO_ADDR
// if randomMaleSci then
11915: LD_VAR 0 2
11919: IFFALSE 11949
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_STRING D5-RSci1-1
11932: PPUSH
11933: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11937: LD_EXP 42
11941: PPUSH
11942: LD_STRING D5-Bur-1
11944: PPUSH
11945: CALL_OW 88
// end ; end ; end ;
11949: LD_VAR 0 1
11953: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11954: LD_EXP 60
11958: PPUSH
11959: LD_INT 105
11961: PPUSH
11962: LD_INT 123
11964: PPUSH
11965: CALL_OW 297
11969: PUSH
11970: LD_INT 12
11972: LESS
11973: IFFALSE 11999
11975: GO 11977
11977: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11978: LD_EXP 60
11982: PPUSH
11983: CALL_OW 313
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_STRING D2a-RSol1-1
11994: PPUSH
11995: CALL_OW 88
11999: END
// every 0 0$15 trigger startEvacuation do
12000: LD_EXP 8
12004: IFFALSE 12014
12006: GO 12008
12008: DISABLE
// begin enable ;
12009: ENABLE
// CreateEvacuateUnit ;
12010: CALL 2544 0 0
// end ;
12014: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
12015: LD_EXP 10
12019: PUSH
12020: LD_INT 3
12022: GREATEREQUAL
12023: IFFALSE 12122
12025: GO 12027
12027: DISABLE
// begin if IsOk ( Kuzmov ) then
12028: LD_EXP 49
12032: PPUSH
12033: CALL_OW 302
12037: IFFALSE 12107
// begin DialogueOn ;
12039: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-1
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-1
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-2
12074: PPUSH
12075: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12079: LD_EXP 42
12083: PPUSH
12084: LD_STRING D2b-Bur-2
12086: PPUSH
12087: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12091: LD_EXP 49
12095: PPUSH
12096: LD_STRING D2b-Kuz-3
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// end ; Query ( Q1 ) ;
12107: LD_STRING Q1
12109: PPUSH
12110: CALL_OW 97
// canStealCargo = true ;
12114: LD_ADDR_EXP 11
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ;
12122: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12123: LD_EXP 11
12127: IFFALSE 12425
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
// begin enable ;
12136: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 6
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 34
12164: PUSH
12165: LD_INT 51
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PUSH
12182: FOR_IN
12183: IFFALSE 12423
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 3
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 50
12212: PUSH
12213: EMPTY
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12419
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 296
12243: PUSH
12244: LD_INT 8
12246: LESS
12247: PUSH
12248: LD_VAR 0 2
12252: PUSH
12253: LD_EXP 13
12257: IN
12258: NOT
12259: AND
12260: PUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 289
12273: PUSH
12274: LD_INT 0
12276: GREATER
12277: AND
12278: IFFALSE 12417
// begin stealCargos = stealCargos ^ cargo ;
12280: LD_ADDR_EXP 13
12284: PUSH
12285: LD_EXP 13
12289: PUSH
12290: LD_VAR 0 2
12294: ADD
12295: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12296: LD_STRING QQrSteal
12298: PPUSH
12299: CALL_OW 97
12303: PUSH
12304: LD_INT 1
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12385
12312: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12313: LD_ADDR_EXP 12
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_INT 1
12325: PLUS
12326: ST_TO_ADDR
// DialogueOn ;
12327: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12331: LD_EXP 42
12335: PPUSH
12336: LD_STRING DQrSteal#1-Bur-1
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 14
12354: PPUSH
12355: CALL_OW 113
// AddComUnload ( cargo ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 92
12375: PPUSH
12376: LD_INT 177
12378: PPUSH
12379: CALL_OW 171
// end ; 2 :
12383: GO 12417
12385: LD_INT 2
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12416
12393: POP
// begin DialogueOn ;
12394: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12398: LD_EXP 42
12402: PPUSH
12403: LD_STRING DQrSteal#2-Bur-1
12405: PPUSH
12406: CALL_OW 88
// DialogueOff ;
12410: CALL_OW 7
// end ; end ;
12414: GO 12417
12416: POP
// end ;
12417: GO 12226
12419: POP
12420: POP
12421: GO 12182
12423: POP
12424: POP
// end ;
12425: PPOPN 2
12427: END
// every 0 0$12 trigger stealWarmCount = 3 do
12428: LD_EXP 12
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: IFFALSE 12508
12438: GO 12440
12440: DISABLE
// begin DialogueOn ;
12441: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-1
12452: PPUSH
12453: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12457: LD_EXP 42
12461: PPUSH
12462: LD_STRING D3A-Bur-1
12464: PPUSH
12465: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12469: LD_EXP 53
12473: PPUSH
12474: LD_STRING D3A-Pla-2
12476: PPUSH
12477: CALL_OW 94
// if IsOK ( Kuzmov ) then
12481: LD_EXP 49
12485: PPUSH
12486: CALL_OW 302
12490: IFFALSE 12504
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12492: LD_EXP 49
12496: PPUSH
12497: LD_STRING D3A-Kuz-2
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$10 trigger stealWarmCount = 6 do
12509: LD_EXP 12
12513: PUSH
12514: LD_INT 6
12516: EQUAL
12517: IFFALSE 12566
12519: GO 12521
12521: DISABLE
// begin DialogueOn ;
12522: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-1
12533: PPUSH
12534: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12538: LD_EXP 42
12542: PPUSH
12543: LD_STRING D3B-Bur-1
12545: PPUSH
12546: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12550: LD_EXP 53
12554: PPUSH
12555: LD_STRING D3B-Pla-2
12557: PPUSH
12558: CALL_OW 94
// DialogueOff ;
12562: CALL_OW 7
// end ;
12566: END
// every 0 0$10 trigger stealWarmCount = 7 do
12567: LD_EXP 12
12571: PUSH
12572: LD_INT 7
12574: EQUAL
12575: IFFALSE 12659
12577: GO 12579
12579: DISABLE
// begin DialogueOn ;
12580: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-1
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-1
12603: PPUSH
12604: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12608: LD_EXP 53
12612: PPUSH
12613: LD_STRING D3C-Pla-2
12615: PPUSH
12616: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12620: LD_EXP 42
12624: PPUSH
12625: LD_STRING D3C-Bur-2
12627: PPUSH
12628: CALL_OW 88
// if IsOK ( Kuzmov ) then
12632: LD_EXP 49
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12655
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12643: LD_EXP 49
12647: PPUSH
12648: LD_STRING D3C-Kuz-2
12650: PPUSH
12651: CALL_OW 88
// DialogueOff ;
12655: CALL_OW 7
// end ;
12659: END
// every 0 0$10 trigger stealWarmCount = 8 do
12660: LD_EXP 12
12664: PUSH
12665: LD_INT 8
12667: EQUAL
12668: IFFALSE 12860
12670: GO 12672
12672: DISABLE
// begin canStealCargo = false ;
12673: LD_ADDR_EXP 11
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// DialogueOn ;
12681: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12685: LD_EXP 53
12689: PPUSH
12690: LD_STRING D3D-Pla-1
12692: PPUSH
12693: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12697: LD_EXP 42
12701: PPUSH
12702: LD_STRING D3D-Bur-1
12704: PPUSH
12705: CALL_OW 88
// if kurinOpinion = 0 then
12709: LD_EXP 2
12713: PUSH
12714: LD_INT 0
12716: EQUAL
12717: IFFALSE 12737
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12719: LD_EXP 53
12723: PPUSH
12724: LD_STRING D3E-Pla-1
12726: PPUSH
12727: CALL_OW 94
// Lose_Arrest ;
12731: CALL 7576 0 0
// exit ;
12735: GO 12860
// end ; if meetBelkovBrother = 1 then
12737: LD_EXP 3
12741: PUSH
12742: LD_INT 1
12744: EQUAL
12745: IFFALSE 12765
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12747: LD_EXP 53
12751: PPUSH
12752: LD_STRING D3E-Pla-1a
12754: PPUSH
12755: CALL_OW 94
// Lose_Arrest ;
12759: CALL 7576 0 0
// exit ;
12763: GO 12860
// end ; if platonovOpinion = 0 then
12765: LD_EXP 1
12769: PUSH
12770: LD_INT 0
12772: EQUAL
12773: IFFALSE 12793
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12775: LD_EXP 53
12779: PPUSH
12780: LD_STRING D3E-Pla-1b
12782: PPUSH
12783: CALL_OW 94
// Lose_Arrest ;
12787: CALL 7576 0 0
// exit ;
12791: GO 12860
// end ; if platonovOpinion = 1 then
12793: LD_EXP 1
12797: PUSH
12798: LD_INT 1
12800: EQUAL
12801: IFFALSE 12821
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12803: LD_EXP 53
12807: PPUSH
12808: LD_STRING D3E-Pla-1c
12810: PPUSH
12811: CALL_OW 94
// Lose_Arrest ;
12815: CALL 7576 0 0
// exit ;
12819: GO 12860
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12821: LD_EXP 53
12825: PPUSH
12826: LD_STRING D3D-Pla-2
12828: PPUSH
12829: CALL_OW 94
// if IsOK ( Kuzmov ) then
12833: LD_EXP 49
12837: PPUSH
12838: CALL_OW 302
12842: IFFALSE 12856
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12844: LD_EXP 49
12848: PPUSH
12849: LD_STRING D3D-Kuz-2
12851: PPUSH
12852: CALL_OW 88
// DialogueOff ;
12856: CALL_OW 7
// end ;
12860: END
// every 0 0$20 do var allyUntis ;
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// wait ( 0 0$10 ) ;
12868: LD_INT 350
12870: PPUSH
12871: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 60
12895: PUSH
12896: EMPTY
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 56
12916: DIFF
12917: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 1
12927: PUSH
12928: LD_EXP 54
12932: DIFF
12933: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_VAR 0 1
12943: PUSH
12944: LD_EXP 49
12948: DIFF
12949: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12950: LD_ADDR_VAR 0 1
12954: PUSH
12955: LD_VAR 0 1
12959: PUSH
12960: LD_EXP 57
12964: DIFF
12965: ST_TO_ADDR
// if not allyUntis then
12966: LD_VAR 0 1
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 12999
// ComUnload ( allyUntis ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12984: LD_VAR 0 1
12988: PPUSH
12989: LD_INT 92
12991: PPUSH
12992: LD_INT 176
12994: PPUSH
12995: CALL_OW 171
// end ;
12999: PPOPN 1
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: IFFALSE 13025
13014: GO 13016
13016: DISABLE
// begin startEvacuation = false ;
13017: LD_ADDR_EXP 8
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// end ;
13025: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13026: LD_EXP 10
13030: PUSH
13031: LD_EXP 14
13035: GREATEREQUAL
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 6
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 69
13083: PUSH
13084: LD_EXP 57
13088: DIFF
13089: NOT
13090: AND
13091: IFFALSE 13686
13093: GO 13095
13095: DISABLE
// begin wait ( 1 1$00 ) ;
13096: LD_INT 2100
13098: PPUSH
13099: CALL_OW 67
// DialogueOn ;
13103: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13107: LD_EXP 53
13111: PPUSH
13112: LD_STRING D4-Pla-1
13114: PPUSH
13115: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13119: LD_EXP 42
13123: PPUSH
13124: LD_STRING D4-Bur-1
13126: PPUSH
13127: CALL_OW 88
// DialogueOff ;
13131: CALL_OW 7
// wait ( 0 0$2 ) ;
13135: LD_INT 70
13137: PPUSH
13138: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13142: LD_EXP 49
13146: PPUSH
13147: CALL_OW 302
13151: PUSH
13152: LD_EXP 49
13156: PPUSH
13157: CALL_OW 255
13161: PUSH
13162: LD_INT 3
13164: EQUAL
13165: AND
13166: IFFALSE 13448
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13168: LD_EXP 49
13172: PPUSH
13173: LD_STRING D4-Kuz-1
13175: PPUSH
13176: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13180: LD_EXP 46
13184: PPUSH
13185: CALL_OW 302
13189: PUSH
13190: LD_EXP 46
13194: PPUSH
13195: CALL_OW 255
13199: PUSH
13200: LD_INT 3
13202: EQUAL
13203: AND
13204: IFFALSE 13220
// Say ( Belkov , D4-Bel-1 ) else
13206: LD_EXP 46
13210: PPUSH
13211: LD_STRING D4-Bel-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13258
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13220: LD_EXP 47
13224: PPUSH
13225: CALL_OW 302
13229: PUSH
13230: LD_EXP 47
13234: PPUSH
13235: CALL_OW 255
13239: PUSH
13240: LD_INT 3
13242: EQUAL
13243: AND
13244: IFFALSE 13258
// Say ( Belkov2 , D4-Bel-1 ) ;
13246: LD_EXP 47
13250: PPUSH
13251: LD_STRING D4-Bel-1
13253: PPUSH
13254: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13258: LD_EXP 42
13262: PPUSH
13263: LD_STRING D4-Bur-2
13265: PPUSH
13266: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13270: LD_EXP 43
13274: PPUSH
13275: CALL_OW 302
13279: PUSH
13280: LD_EXP 43
13284: PPUSH
13285: CALL_OW 255
13289: PUSH
13290: LD_INT 3
13292: EQUAL
13293: AND
13294: IFFALSE 13320
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13296: LD_EXP 43
13300: PPUSH
13301: LD_STRING D4-Gny-2
13303: PPUSH
13304: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13308: LD_EXP 42
13312: PPUSH
13313: LD_STRING D4-Bur-3
13315: PPUSH
13316: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13320: LD_EXP 42
13324: PPUSH
13325: LD_STRING D4-Bur-3a
13327: PPUSH
13328: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13332: LD_EXP 46
13336: PPUSH
13337: CALL_OW 302
13341: PUSH
13342: LD_EXP 46
13346: PPUSH
13347: CALL_OW 255
13351: PUSH
13352: LD_INT 3
13354: EQUAL
13355: AND
13356: IFFALSE 13372
// Say ( Belkov , D4-Bel-3 ) else
13358: LD_EXP 46
13362: PPUSH
13363: LD_STRING D4-Bel-3
13365: PPUSH
13366: CALL_OW 88
13370: GO 13410
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13372: LD_EXP 47
13376: PPUSH
13377: CALL_OW 302
13381: PUSH
13382: LD_EXP 47
13386: PPUSH
13387: CALL_OW 255
13391: PUSH
13392: LD_INT 3
13394: EQUAL
13395: AND
13396: IFFALSE 13410
// Say ( Belkov2 , D4-Bel-3 ) ;
13398: LD_EXP 47
13402: PPUSH
13403: LD_STRING D4-Bel-3
13405: PPUSH
13406: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13410: LD_EXP 45
13414: PPUSH
13415: CALL_OW 302
13419: PUSH
13420: LD_EXP 45
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: AND
13434: IFFALSE 13448
// Say ( Kovalyuk , D4-Kov-3 ) ;
13436: LD_EXP 45
13440: PPUSH
13441: LD_STRING D4-Kov-3
13443: PPUSH
13444: CALL_OW 88
// end ; PrepareFirstAttack ;
13448: CALL 4199 0 0
// firstAttack = true ;
13452: LD_ADDR_EXP 18
13456: PUSH
13457: LD_INT 1
13459: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13460: LD_INT 350
13462: PPUSH
13463: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13467: LD_EXP 42
13471: PPUSH
13472: LD_STRING D7-Bur-1
13474: PPUSH
13475: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13479: LD_EXP 64
13483: PPUSH
13484: LD_INT 135
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 134
13496: PUSH
13497: LD_INT 19
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 132
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 128
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 123
13526: PUSH
13527: LD_INT 37
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 118
13536: PUSH
13537: LD_INT 45
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 51
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 106
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 99
13566: PUSH
13567: LD_INT 62
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 93
13576: PUSH
13577: LD_INT 67
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 86
13586: PUSH
13587: LD_INT 72
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 78
13596: PUSH
13597: LD_INT 75
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 71
13606: PUSH
13607: LD_INT 81
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 69
13616: PUSH
13617: LD_INT 88
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 71
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 74
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 80
13646: PUSH
13647: LD_INT 113
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 11
13681: PPUSH
13682: CALL 5042 0 5
// end ;
13686: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13687: LD_EXP 64
13691: PPUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: NOT
13707: PUSH
13708: LD_EXP 18
13712: AND
13713: IFFALSE 13772
13715: GO 13717
13717: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13718: LD_EXP 57
13722: PPUSH
13723: CALL_OW 122
// wait ( 0 0$1 ) ;
13727: LD_INT 35
13729: PPUSH
13730: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13734: LD_EXP 57
13738: PPUSH
13739: LD_INT 114
13741: PPUSH
13742: LD_INT 114
13744: PPUSH
13745: CALL_OW 111
// wait ( 0 0$15 ) ;
13749: LD_INT 525
13751: PPUSH
13752: CALL_OW 67
// firstAttack = false ;
13756: LD_ADDR_EXP 18
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// enableAttacks = true ;
13764: LD_ADDR_EXP 17
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// end ;
13772: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13773: LD_OWVAR 67
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: PUSH
13782: LD_EXP 57
13786: AND
13787: IFFALSE 13855
13789: GO 13791
13791: DISABLE
13792: LD_INT 0
13794: PPUSH
// begin enable ;
13795: ENABLE
// for un in secondBaseTeam do
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_EXP 57
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13853
// if IsInArea ( un , HillArea ) then
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 5
13816: PPUSH
13817: CALL_OW 308
13821: IFFALSE 13851
// begin SetSide ( un , 3 ) ;
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13835: LD_ADDR_EXP 57
13839: PUSH
13840: LD_EXP 57
13844: PUSH
13845: LD_VAR 0 1
13849: DIFF
13850: ST_TO_ADDR
// end ;
13851: GO 13806
13853: POP
13854: POP
// end ;
13855: PPOPN 1
13857: END
// export function Dial_Contact ; begin
13858: LD_INT 0
13860: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13861: LD_EXP 42
13865: PPUSH
13866: LD_STRING D7-Bur-1a
13868: PPUSH
13869: CALL_OW 88
// wait ( 0 0$12 ) ;
13873: LD_INT 420
13875: PPUSH
13876: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13880: LD_EXP 42
13884: PPUSH
13885: LD_STRING D7-Bur-1b
13887: PPUSH
13888: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13892: LD_EXP 46
13896: PPUSH
13897: CALL_OW 302
13901: PUSH
13902: LD_EXP 46
13906: PPUSH
13907: CALL_OW 255
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: AND
13916: IFFALSE 13932
// Say ( Belkov , D7-Bel-1 ) else
13918: LD_EXP 46
13922: PPUSH
13923: LD_STRING D7-Bel-1
13925: PPUSH
13926: CALL_OW 88
13930: GO 13970
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13932: LD_EXP 47
13936: PPUSH
13937: CALL_OW 302
13941: PUSH
13942: LD_EXP 47
13946: PPUSH
13947: CALL_OW 255
13951: PUSH
13952: LD_INT 3
13954: EQUAL
13955: AND
13956: IFFALSE 13970
// Say ( Belkov2 , D7-Bel-1 ) ;
13958: LD_EXP 47
13962: PPUSH
13963: LD_STRING D7-Bel-1
13965: PPUSH
13966: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13970: LD_EXP 49
13974: PPUSH
13975: CALL_OW 302
13979: PUSH
13980: LD_EXP 49
13984: PPUSH
13985: CALL_OW 255
13989: PUSH
13990: LD_INT 3
13992: EQUAL
13993: AND
13994: IFFALSE 14008
// Say ( Kuzmov , D7-Kuz-1 ) ;
13996: LD_EXP 49
14000: PPUSH
14001: LD_STRING D7-Kuz-1
14003: PPUSH
14004: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
14008: LD_EXP 45
14012: PPUSH
14013: CALL_OW 302
14017: PUSH
14018: LD_EXP 45
14022: PPUSH
14023: CALL_OW 255
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: AND
14032: IFFALSE 14046
// Say ( Kovalyuk , D7-Kov-1 ) ;
14034: LD_EXP 45
14038: PPUSH
14039: LD_STRING D7-Kov-1
14041: PPUSH
14042: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14046: LD_EXP 48
14050: PPUSH
14051: CALL_OW 302
14055: PUSH
14056: LD_EXP 48
14060: PPUSH
14061: CALL_OW 255
14065: PUSH
14066: LD_INT 3
14068: EQUAL
14069: AND
14070: IFFALSE 14084
// Say ( Scholtze , D7-Sch-1 ) ;
14072: LD_EXP 48
14076: PPUSH
14077: LD_STRING D7-Sch-1
14079: PPUSH
14080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 21
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: PPUSH
14124: LD_STRING D7-RSol1-1
14126: PPUSH
14127: LD_STRING 
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: CALL 9537 0 4
// PrepareHeike ;
14137: CALL 3519 0 0
// wait ( 0 0$10 ) ;
14141: LD_INT 350
14143: PPUSH
14144: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14148: LD_EXP 63
14152: PPUSH
14153: LD_STRING D7a-Hke-1
14155: PPUSH
14156: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14160: LD_EXP 42
14164: PPUSH
14165: LD_STRING D7a-Bur-1
14167: PPUSH
14168: CALL_OW 88
// wait ( 0 0$50 ) ;
14172: LD_INT 1750
14174: PPUSH
14175: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14179: LD_EXP 49
14183: PPUSH
14184: CALL_OW 302
14188: PUSH
14189: LD_EXP 49
14193: PPUSH
14194: CALL_OW 255
14198: PUSH
14199: LD_INT 3
14201: EQUAL
14202: AND
14203: IFFALSE 14219
// Say ( Kuzmov , D8-Kuz-1 ) else
14205: LD_EXP 49
14209: PPUSH
14210: LD_STRING D8-Kuz-1
14212: PPUSH
14213: CALL_OW 88
14217: GO 14272
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14219: LD_INT 22
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 26
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: PPUSH
14259: LD_STRING D8-RSol1-1
14261: PPUSH
14262: LD_STRING 
14264: PPUSH
14265: LD_INT 0
14267: PPUSH
14268: CALL 9537 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14272: LD_EXP 42
14276: PPUSH
14277: LD_STRING D8-Bur-1
14279: PPUSH
14280: CALL_OW 88
// end ;
14284: LD_VAR 0 1
14288: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14289: LD_EXP 54
14293: PPUSH
14294: CALL_OW 305
14298: NOT
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 50
14322: PUSH
14323: EMPTY
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: AND
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 3
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 50
14360: PUSH
14361: EMPTY
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: PUSH
14374: LD_INT 5
14376: LESS
14377: AND
14378: PUSH
14379: LD_INT 5
14381: PPUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: PUSH
14400: LD_INT 3
14402: GREATER
14403: AND
14404: IFFALSE 14413
14406: GO 14408
14408: DISABLE
// Lose_ArabBreakthrough ;
14409: CALL 7591 0 0
14413: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14414: LD_EXP 19
14418: PUSH
14419: LD_EXP 38
14423: GREATEREQUAL
14424: IFFALSE 14648
14426: GO 14428
14428: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-1
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-1
14448: PPUSH
14449: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14453: LD_EXP 53
14457: PPUSH
14458: LD_STRING D9-Pla-2
14460: PPUSH
14461: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14465: LD_EXP 42
14469: PPUSH
14470: LD_STRING D9-Bur-2
14472: PPUSH
14473: CALL_OW 88
// wait ( 2 2$0 ) ;
14477: LD_INT 4200
14479: PPUSH
14480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14491: LD_INT 12
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 428
14501: NOT
14502: IFFALSE 14484
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14504: LD_EXP 54
14508: PPUSH
14509: LD_INT 12
14511: PPUSH
14512: LD_INT 3
14514: PPUSH
14515: LD_INT 2
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 50
// arabianCanExitMap = true ;
14525: LD_ADDR_EXP 7
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14533: LD_INT 35
14535: PPUSH
14536: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14540: LD_EXP 54
14544: PPUSH
14545: CALL_OW 87
// DialogueOn ;
14549: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-1
14560: PPUSH
14561: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14565: LD_EXP 42
14569: PPUSH
14570: LD_STRING D10-Bur-1
14572: PPUSH
14573: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-2
14584: PPUSH
14585: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14589: LD_EXP 52
14593: PPUSH
14594: LD_STRING D10-Pop-2
14596: PPUSH
14597: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14601: LD_EXP 54
14605: PPUSH
14606: LD_STRING D10-Gay-3
14608: PPUSH
14609: CALL_OW 94
// DialogueOff ;
14613: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14617: LD_EXP 54
14621: PPUSH
14622: LD_INT 36
14624: PPUSH
14625: LD_INT 38
14627: PPUSH
14628: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14632: LD_EXP 54
14636: PPUSH
14637: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14641: LD_STRING M2
14643: PPUSH
14644: CALL_OW 337
// end ;
14648: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14649: LD_EXP 7
14653: IFFALSE 14726
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
// begin enable ;
14661: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14662: LD_INT 22
14664: PUSH
14665: LD_INT 2
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: PPUSH
14675: CALL_OW 69
14679: PPUSH
14680: LD_INT 13
14682: PPUSH
14683: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 13
14694: PPUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 70
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14724
// RemoveUnit ( unit ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 64
14722: GO 14710
14724: POP
14725: POP
// end ;
14726: PPOPN 1
14728: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14729: LD_EXP 20
14733: NOT
14734: IFFALSE 15124
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
// begin enable ;
14743: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: PUSH
14778: FOR_IN
14779: IFFALSE 15122
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_EXP 54
14790: PPUSH
14791: CALL_OW 296
14795: PUSH
14796: LD_INT 6
14798: LESS
14799: IFFALSE 15120
// begin SetSide ( Gaydar , 3 ) ;
14801: LD_EXP 54
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: CALL_OW 235
// ComWalk ( Gaydar ) ;
14813: LD_EXP 54
14817: PPUSH
14818: CALL_OW 138
// saveGaydar = true ;
14822: LD_ADDR_EXP 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14830: LD_INT 35
14832: PPUSH
14833: CALL_OW 67
// DialogueOn ;
14837: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14841: LD_EXP 54
14845: PPUSH
14846: LD_STRING D11-Gay-1
14848: PPUSH
14849: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14853: LD_EXP 42
14857: PPUSH
14858: LD_EXP 54
14862: PPUSH
14863: CALL_OW 296
14867: PUSH
14868: LD_INT 6
14870: LESS
14871: NOT
14872: IFFALSE 14972
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 50
14911: PUSH
14912: EMPTY
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_EXP 54
14930: DIFF
14931: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_EXP 54
14941: PPUSH
14942: CALL_OW 74
14946: PPUSH
14947: LD_STRING D11-RSol1-1
14949: PPUSH
14950: CALL_OW 88
// gaydarWaitForBurlak = true ;
14954: LD_ADDR_EXP 21
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// DialogueOff ;
14962: CALL_OW 7
// exit ;
14966: POP
14967: POP
14968: GO 15124
// end else
14970: GO 15120
// begin Say ( Gaydar , D11-Gay-2 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-2
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-2
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-3
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-3
15015: PPUSH
15016: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15020: LD_EXP 54
15024: PPUSH
15025: LD_STRING D11-Gay-4
15027: PPUSH
15028: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15032: LD_EXP 42
15036: PPUSH
15037: LD_STRING D11-Bur-4
15039: PPUSH
15040: CALL_OW 88
// wait ( 0 0$2 ) ;
15044: LD_INT 70
15046: PPUSH
15047: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15051: LD_EXP 52
15055: PPUSH
15056: LD_STRING D12-Pop-1
15058: PPUSH
15059: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15063: LD_EXP 42
15067: PPUSH
15068: LD_STRING D12-Bur-1
15070: PPUSH
15071: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15075: LD_EXP 53
15079: PPUSH
15080: LD_STRING D12-Pla-1
15082: PPUSH
15083: CALL_OW 94
// DialogueOff ;
15087: CALL_OW 7
// canExitMap = true ;
15091: LD_ADDR_EXP 6
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15099: LD_STRING MFinal
15101: PPUSH
15102: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15106: LD_INT 4
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 424
// exit ;
15116: POP
15117: POP
15118: GO 15124
// end ; end ; end ;
15120: GO 14778
15122: POP
15123: POP
// end ;
15124: PPOPN 2
15126: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15127: LD_EXP 42
15131: PPUSH
15132: LD_EXP 54
15136: PPUSH
15137: CALL_OW 296
15141: PUSH
15142: LD_INT 6
15144: LESS
15145: PUSH
15146: LD_EXP 21
15150: AND
15151: IFFALSE 15304
15153: GO 15155
15155: DISABLE
// begin DialogueOn ;
15156: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-2
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-2
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-3
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-3
15203: PPUSH
15204: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15208: LD_EXP 54
15212: PPUSH
15213: LD_STRING D11-Gay-4
15215: PPUSH
15216: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15220: LD_EXP 42
15224: PPUSH
15225: LD_STRING D11-Bur-4
15227: PPUSH
15228: CALL_OW 88
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15239: LD_EXP 52
15243: PPUSH
15244: LD_STRING D12-Pop-1
15246: PPUSH
15247: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15251: LD_EXP 42
15255: PPUSH
15256: LD_STRING D12-Bur-1
15258: PPUSH
15259: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15263: LD_EXP 53
15267: PPUSH
15268: LD_STRING D12-Pla-1
15270: PPUSH
15271: CALL_OW 94
// DialogueOff ;
15275: CALL_OW 7
// canExitMap = true ;
15279: LD_ADDR_EXP 6
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15287: LD_STRING MFinal
15289: PPUSH
15290: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15294: LD_INT 4
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 424
// end ;
15304: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15305: LD_INT 22
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: PUSH
15334: LD_INT 0
15336: EQUAL
15337: PUSH
15338: LD_EXP 6
15342: AND
15343: IFFALSE 15352
15345: GO 15347
15347: DISABLE
// FinishMission ; end_of_file
15348: CALL 7709 0 0
15352: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15353: LD_EXP 17
15357: PUSH
15358: LD_EXP 19
15362: PUSH
15363: LD_INT 0
15365: EQUAL
15366: AND
15367: PUSH
15368: LD_EXP 19
15372: PUSH
15373: LD_EXP 38
15377: LESS
15378: AND
15379: IFFALSE 15431
15381: GO 15383
15383: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15384: LD_INT 7
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 2
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15410: LD_EXP 65
15414: PPUSH
15415: EMPTY
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 1
15425: NEG
15426: PPUSH
15427: CALL 5042 0 5
// end ;
15431: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15432: LD_EXP 17
15436: PUSH
15437: LD_EXP 19
15441: PUSH
15442: LD_INT 0
15444: GREATEREQUAL
15445: AND
15446: PUSH
15447: LD_EXP 19
15451: PUSH
15452: LD_EXP 38
15456: LESS
15457: AND
15458: IFFALSE 15688
15460: GO 15462
15462: DISABLE
// begin currentWave = currentWave + 1 ;
15463: LD_ADDR_EXP 19
15467: PUSH
15468: LD_EXP 19
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// PrepareArabianVehicles ;
15477: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15481: LD_EXP 65
15485: PPUSH
15486: LD_INT 135
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 134
15498: PUSH
15499: LD_INT 19
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 132
15508: PUSH
15509: LD_INT 26
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 128
15518: PUSH
15519: LD_INT 31
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 123
15528: PUSH
15529: LD_INT 37
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 118
15538: PUSH
15539: LD_INT 45
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 112
15548: PUSH
15549: LD_INT 51
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 106
15558: PUSH
15559: LD_INT 57
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 99
15568: PUSH
15569: LD_INT 62
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 93
15578: PUSH
15579: LD_INT 67
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 86
15588: PUSH
15589: LD_INT 72
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 78
15598: PUSH
15599: LD_INT 75
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 71
15608: PUSH
15609: LD_INT 81
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 69
15618: PUSH
15619: LD_INT 88
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 71
15628: PUSH
15629: LD_INT 95
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 74
15638: PUSH
15639: LD_INT 103
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 80
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: LD_INT 0
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: LD_INT 11
15683: PPUSH
15684: CALL 5042 0 5
// end ;
15688: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15689: LD_EXP 17
15693: PUSH
15694: LD_OWVAR 67
15698: PUSH
15699: LD_INT 2
15701: EQUAL
15702: AND
15703: PUSH
15704: LD_EXP 19
15708: PUSH
15709: LD_INT 0
15711: GREATEREQUAL
15712: AND
15713: PUSH
15714: LD_EXP 19
15718: PUSH
15719: LD_EXP 38
15723: LESS
15724: AND
15725: IFFALSE 15853
15727: GO 15729
15729: DISABLE
// begin PrepareArabianVehicles ;
15730: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15734: LD_EXP 65
15738: PPUSH
15739: LD_INT 135
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 134
15751: PUSH
15752: LD_INT 19
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 132
15761: PUSH
15762: LD_INT 26
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 128
15771: PUSH
15772: LD_INT 31
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 123
15781: PUSH
15782: LD_INT 37
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 118
15791: PUSH
15792: LD_INT 45
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 112
15801: PUSH
15802: LD_INT 51
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: LD_INT 57
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 99
15821: PUSH
15822: LD_INT 62
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PPUSH
15840: LD_INT 0
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: LD_INT 11
15848: PPUSH
15849: CALL 5042 0 5
// end ;
15853: END
// every 1 1$0 trigger enableAttacks and Difficulty >= 3 and currentWave >= 0 and currentWave < enemyWaves do
15854: LD_EXP 17
15858: PUSH
15859: LD_OWVAR 67
15863: PUSH
15864: LD_INT 3
15866: GREATEREQUAL
15867: AND
15868: PUSH
15869: LD_EXP 19
15873: PUSH
15874: LD_INT 0
15876: GREATEREQUAL
15877: AND
15878: PUSH
15879: LD_EXP 19
15883: PUSH
15884: LD_EXP 38
15888: LESS
15889: AND
15890: IFFALSE 16084
15892: GO 15894
15894: DISABLE
// begin PrepareArabianVehicles ;
15895: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15899: LD_EXP 65
15903: PPUSH
15904: LD_INT 135
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 134
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 132
15926: PUSH
15927: LD_INT 26
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 128
15936: PUSH
15937: LD_INT 31
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 123
15946: PUSH
15947: LD_INT 37
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 118
15956: PUSH
15957: LD_INT 45
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 112
15966: PUSH
15967: LD_INT 51
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 57
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 99
15986: PUSH
15987: LD_INT 62
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 104
15996: PUSH
15997: LD_INT 71
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 110
16006: PUSH
16007: LD_INT 78
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 119
16016: PUSH
16017: LD_INT 88
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 128
16026: PUSH
16027: LD_INT 97
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 135
16036: PUSH
16037: LD_INT 106
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 140
16046: PUSH
16047: LD_INT 153
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_INT 11
16079: PPUSH
16080: CALL 5042 0 5
// end ;
16084: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16085: LD_EXP 17
16089: PUSH
16090: LD_EXP 19
16094: PUSH
16095: LD_INT 1
16097: EQUAL
16098: AND
16099: PUSH
16100: LD_EXP 19
16104: PUSH
16105: LD_EXP 38
16109: LESS
16110: AND
16111: IFFALSE 16188
16113: GO 16115
16115: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16116: LD_INT 7
16118: PPUSH
16119: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16123: LD_EXP 65
16127: PPUSH
16128: LD_INT 157
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 194
16140: PUSH
16141: LD_INT 124
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 174
16150: PUSH
16151: LD_INT 158
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 151
16160: PUSH
16161: LD_INT 164
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: LD_INT 0
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 1
16182: NEG
16183: PPUSH
16184: CALL 5042 0 5
// end ;
16188: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16189: LD_EXP 17
16193: PUSH
16194: LD_EXP 19
16198: PUSH
16199: LD_INT 1
16201: EQUAL
16202: AND
16203: PUSH
16204: LD_EXP 19
16208: PUSH
16209: LD_EXP 38
16213: LESS
16214: AND
16215: IFFALSE 16364
16217: GO 16219
16219: DISABLE
// begin wait ( 1 1$30 ) ;
16220: LD_INT 3150
16222: PPUSH
16223: CALL_OW 67
// currentWave = currentWave + 1 ;
16227: LD_ADDR_EXP 19
16231: PUSH
16232: LD_EXP 19
16236: PUSH
16237: LD_INT 1
16239: PLUS
16240: ST_TO_ADDR
// PrepareArabianVehicles ;
16241: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16245: LD_EXP 65
16249: PPUSH
16250: LD_INT 135
16252: PUSH
16253: LD_INT 4
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 134
16262: PUSH
16263: LD_INT 19
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 132
16272: PUSH
16273: LD_INT 26
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 128
16282: PUSH
16283: LD_INT 31
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 123
16292: PUSH
16293: LD_INT 37
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 118
16302: PUSH
16303: LD_INT 45
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 112
16312: PUSH
16313: LD_INT 51
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 106
16322: PUSH
16323: LD_INT 57
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 99
16332: PUSH
16333: LD_INT 62
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 11
16359: PPUSH
16360: CALL 5042 0 5
// end ;
16364: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16365: LD_EXP 17
16369: PUSH
16370: LD_OWVAR 67
16374: PUSH
16375: LD_INT 2
16377: EQUAL
16378: AND
16379: PUSH
16380: LD_EXP 19
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: AND
16389: PUSH
16390: LD_EXP 19
16394: PUSH
16395: LD_EXP 38
16399: LESS
16400: AND
16401: IFFALSE 16595
16403: GO 16405
16405: DISABLE
// begin PrepareArabianVehicles ;
16406: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16410: LD_EXP 65
16414: PPUSH
16415: LD_INT 135
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 134
16427: PUSH
16428: LD_INT 19
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 132
16437: PUSH
16438: LD_INT 26
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 128
16447: PUSH
16448: LD_INT 31
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 123
16457: PUSH
16458: LD_INT 37
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 118
16467: PUSH
16468: LD_INT 45
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: LD_INT 51
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: LD_INT 57
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 99
16497: PUSH
16498: LD_INT 62
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 104
16507: PUSH
16508: LD_INT 71
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 110
16517: PUSH
16518: LD_INT 78
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 119
16527: PUSH
16528: LD_INT 88
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 128
16537: PUSH
16538: LD_INT 97
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 135
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 140
16557: PUSH
16558: LD_INT 153
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: LD_INT 11
16590: PPUSH
16591: CALL 5042 0 5
// end ;
16595: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 1 and currentWave < enemyWaves do
16596: LD_EXP 17
16600: PUSH
16601: LD_OWVAR 67
16605: PUSH
16606: LD_INT 3
16608: GREATEREQUAL
16609: AND
16610: PUSH
16611: LD_EXP 19
16615: PUSH
16616: LD_INT 1
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_EXP 19
16625: PUSH
16626: LD_EXP 38
16630: LESS
16631: AND
16632: IFFALSE 16848
16634: GO 16636
16636: DISABLE
// begin PrepareArabianVehicles ;
16637: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16641: LD_EXP 65
16645: PPUSH
16646: LD_INT 135
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 134
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 132
16668: PUSH
16669: LD_INT 26
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 128
16678: PUSH
16679: LD_INT 31
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 123
16688: PUSH
16689: LD_INT 37
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: LD_INT 45
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 112
16708: PUSH
16709: LD_INT 51
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 57
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 99
16728: PUSH
16729: LD_INT 62
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 93
16738: PUSH
16739: LD_INT 67
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 86
16748: PUSH
16749: LD_INT 72
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 78
16758: PUSH
16759: LD_INT 75
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 71
16768: PUSH
16769: LD_INT 81
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 69
16778: PUSH
16779: LD_INT 88
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 71
16788: PUSH
16789: LD_INT 95
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 74
16798: PUSH
16799: LD_INT 103
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 80
16808: PUSH
16809: LD_INT 113
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: LD_INT 0
16837: PPUSH
16838: LD_INT 1
16840: PPUSH
16841: LD_INT 11
16843: PPUSH
16844: CALL 5042 0 5
// end ;
16848: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16849: LD_EXP 17
16853: PUSH
16854: LD_EXP 19
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: AND
16863: PUSH
16864: LD_EXP 19
16868: PUSH
16869: LD_EXP 38
16873: LESS
16874: AND
16875: IFFALSE 16952
16877: GO 16879
16879: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16880: LD_INT 7
16882: PPUSH
16883: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16887: LD_EXP 65
16891: PPUSH
16892: LD_INT 157
16894: PUSH
16895: LD_INT 31
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 194
16904: PUSH
16905: LD_INT 124
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 174
16914: PUSH
16915: LD_INT 158
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 151
16924: PUSH
16925: LD_INT 164
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: LD_INT 1
16946: NEG
16947: PPUSH
16948: CALL 5042 0 5
// end ;
16952: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16953: LD_EXP 17
16957: PUSH
16958: LD_EXP 19
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: AND
16967: PUSH
16968: LD_EXP 19
16972: PUSH
16973: LD_EXP 38
16977: LESS
16978: AND
16979: IFFALSE 17216
16981: GO 16983
16983: DISABLE
// begin wait ( 1 1$30 ) ;
16984: LD_INT 3150
16986: PPUSH
16987: CALL_OW 67
// currentWave = currentWave + 1 ;
16991: LD_ADDR_EXP 19
16995: PUSH
16996: LD_EXP 19
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: ST_TO_ADDR
// PrepareArabianVehicles ;
17005: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17009: LD_EXP 65
17013: PPUSH
17014: LD_INT 135
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 134
17026: PUSH
17027: LD_INT 19
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 132
17036: PUSH
17037: LD_INT 26
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 128
17046: PUSH
17047: LD_INT 31
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 123
17056: PUSH
17057: LD_INT 37
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 118
17066: PUSH
17067: LD_INT 45
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 112
17076: PUSH
17077: LD_INT 51
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 57
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 99
17096: PUSH
17097: LD_INT 62
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 93
17106: PUSH
17107: LD_INT 67
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 86
17116: PUSH
17117: LD_INT 72
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 78
17126: PUSH
17127: LD_INT 75
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 71
17136: PUSH
17137: LD_INT 81
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 69
17146: PUSH
17147: LD_INT 88
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 71
17156: PUSH
17157: LD_INT 95
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 74
17166: PUSH
17167: LD_INT 103
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 80
17176: PUSH
17177: LD_INT 113
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: LD_INT 11
17211: PPUSH
17212: CALL 5042 0 5
// end ;
17216: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17217: LD_EXP 17
17221: PUSH
17222: LD_OWVAR 67
17226: PUSH
17227: LD_INT 2
17229: EQUAL
17230: AND
17231: PUSH
17232: LD_EXP 19
17236: PUSH
17237: LD_INT 2
17239: EQUAL
17240: AND
17241: PUSH
17242: LD_EXP 19
17246: PUSH
17247: LD_EXP 38
17251: LESS
17252: AND
17253: IFFALSE 17447
17255: GO 17257
17257: DISABLE
// begin PrepareArabianVehicles ;
17258: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17262: LD_EXP 65
17266: PPUSH
17267: LD_INT 135
17269: PUSH
17270: LD_INT 4
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 134
17279: PUSH
17280: LD_INT 19
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 132
17289: PUSH
17290: LD_INT 26
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 128
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 123
17309: PUSH
17310: LD_INT 37
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 118
17319: PUSH
17320: LD_INT 45
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 112
17329: PUSH
17330: LD_INT 51
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 106
17339: PUSH
17340: LD_INT 57
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 99
17349: PUSH
17350: LD_INT 62
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 104
17359: PUSH
17360: LD_INT 71
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 110
17369: PUSH
17370: LD_INT 78
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 119
17379: PUSH
17380: LD_INT 88
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 128
17389: PUSH
17390: LD_INT 97
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 135
17399: PUSH
17400: LD_INT 106
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 140
17409: PUSH
17410: LD_INT 153
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 11
17442: PPUSH
17443: CALL 5042 0 5
// end ;
17447: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 2 and currentWave < enemyWaves do
17448: LD_EXP 17
17452: PUSH
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 3
17460: GREATEREQUAL
17461: AND
17462: PUSH
17463: LD_EXP 19
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_EXP 19
17477: PUSH
17478: LD_EXP 38
17482: LESS
17483: AND
17484: IFFALSE 17678
17486: GO 17488
17488: DISABLE
// begin PrepareArabianVehicles ;
17489: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17493: LD_EXP 65
17497: PPUSH
17498: LD_INT 135
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 134
17510: PUSH
17511: LD_INT 19
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 132
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 128
17530: PUSH
17531: LD_INT 31
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 123
17540: PUSH
17541: LD_INT 37
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: LD_INT 45
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 112
17560: PUSH
17561: LD_INT 51
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 106
17570: PUSH
17571: LD_INT 57
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 99
17580: PUSH
17581: LD_INT 62
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 104
17590: PUSH
17591: LD_INT 71
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 110
17600: PUSH
17601: LD_INT 78
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 119
17610: PUSH
17611: LD_INT 88
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 128
17620: PUSH
17621: LD_INT 97
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 135
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 153
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PPUSH
17665: LD_INT 0
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 11
17673: PPUSH
17674: CALL 5042 0 5
// end ;
17678: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17679: LD_EXP 17
17683: PUSH
17684: LD_EXP 19
17688: PUSH
17689: LD_INT 3
17691: EQUAL
17692: AND
17693: PUSH
17694: LD_EXP 19
17698: PUSH
17699: LD_EXP 38
17703: LESS
17704: AND
17705: IFFALSE 17782
17707: GO 17709
17709: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17710: LD_INT 7
17712: PPUSH
17713: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17717: LD_EXP 65
17721: PPUSH
17722: LD_INT 157
17724: PUSH
17725: LD_INT 31
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 194
17734: PUSH
17735: LD_INT 124
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 174
17744: PUSH
17745: LD_INT 158
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 151
17754: PUSH
17755: LD_INT 164
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PPUSH
17768: LD_INT 0
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 1
17776: NEG
17777: PPUSH
17778: CALL 5042 0 5
// end ;
17782: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17783: LD_EXP 17
17787: PUSH
17788: LD_EXP 19
17792: PUSH
17793: LD_INT 3
17795: EQUAL
17796: AND
17797: PUSH
17798: LD_EXP 19
17802: PUSH
17803: LD_EXP 38
17807: LESS
17808: AND
17809: IFFALSE 18046
17811: GO 17813
17813: DISABLE
// begin wait ( 1 1$30 ) ;
17814: LD_INT 3150
17816: PPUSH
17817: CALL_OW 67
// currentWave = currentWave + 1 ;
17821: LD_ADDR_EXP 19
17825: PUSH
17826: LD_EXP 19
17830: PUSH
17831: LD_INT 1
17833: PLUS
17834: ST_TO_ADDR
// PrepareArabianVehicles ;
17835: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17839: LD_EXP 65
17843: PPUSH
17844: LD_INT 135
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 134
17856: PUSH
17857: LD_INT 19
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 132
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 128
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 123
17886: PUSH
17887: LD_INT 37
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: LD_INT 45
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 112
17906: PUSH
17907: LD_INT 51
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 106
17916: PUSH
17917: LD_INT 57
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 99
17926: PUSH
17927: LD_INT 62
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 93
17936: PUSH
17937: LD_INT 67
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 86
17946: PUSH
17947: LD_INT 72
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 78
17956: PUSH
17957: LD_INT 75
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 71
17966: PUSH
17967: LD_INT 81
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 69
17976: PUSH
17977: LD_INT 88
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 71
17986: PUSH
17987: LD_INT 95
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 74
17996: PUSH
17997: LD_INT 103
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 80
18006: PUSH
18007: LD_INT 113
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_INT 11
18041: PPUSH
18042: CALL 5042 0 5
// end ;
18046: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18047: LD_EXP 17
18051: PUSH
18052: LD_OWVAR 67
18056: PUSH
18057: LD_INT 2
18059: EQUAL
18060: AND
18061: PUSH
18062: LD_EXP 19
18066: PUSH
18067: LD_INT 3
18069: EQUAL
18070: AND
18071: PUSH
18072: LD_EXP 19
18076: PUSH
18077: LD_EXP 38
18081: LESS
18082: AND
18083: IFFALSE 18277
18085: GO 18087
18087: DISABLE
// begin PrepareArabianVehicles ;
18088: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18092: LD_EXP 65
18096: PPUSH
18097: LD_INT 135
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 134
18109: PUSH
18110: LD_INT 19
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 132
18119: PUSH
18120: LD_INT 26
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 128
18129: PUSH
18130: LD_INT 31
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 123
18139: PUSH
18140: LD_INT 37
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 118
18149: PUSH
18150: LD_INT 45
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 112
18159: PUSH
18160: LD_INT 51
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 57
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 99
18179: PUSH
18180: LD_INT 62
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 104
18189: PUSH
18190: LD_INT 71
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 110
18199: PUSH
18200: LD_INT 78
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 119
18209: PUSH
18210: LD_INT 88
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 128
18219: PUSH
18220: LD_INT 97
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 135
18229: PUSH
18230: LD_INT 106
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 140
18239: PUSH
18240: LD_INT 153
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PPUSH
18264: LD_INT 0
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_INT 11
18272: PPUSH
18273: CALL 5042 0 5
// end ;
18277: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 3 and currentWave < enemyWaves do
18278: LD_EXP 17
18282: PUSH
18283: LD_OWVAR 67
18287: PUSH
18288: LD_INT 3
18290: GREATEREQUAL
18291: AND
18292: PUSH
18293: LD_EXP 19
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: AND
18302: PUSH
18303: LD_EXP 19
18307: PUSH
18308: LD_EXP 38
18312: LESS
18313: AND
18314: IFFALSE 18508
18316: GO 18318
18318: DISABLE
// begin PrepareArabianVehicles ;
18319: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18323: LD_EXP 65
18327: PPUSH
18328: LD_INT 135
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 134
18340: PUSH
18341: LD_INT 19
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 132
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 128
18360: PUSH
18361: LD_INT 31
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 123
18370: PUSH
18371: LD_INT 37
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 118
18380: PUSH
18381: LD_INT 45
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 112
18390: PUSH
18391: LD_INT 51
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 106
18400: PUSH
18401: LD_INT 57
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 99
18410: PUSH
18411: LD_INT 62
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 104
18420: PUSH
18421: LD_INT 71
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 110
18430: PUSH
18431: LD_INT 78
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 119
18440: PUSH
18441: LD_INT 88
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 128
18450: PUSH
18451: LD_INT 97
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 135
18460: PUSH
18461: LD_INT 106
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 140
18470: PUSH
18471: LD_INT 153
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_INT 11
18503: PPUSH
18504: CALL 5042 0 5
// end ;
18508: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18509: LD_EXP 54
18513: PPUSH
18514: CALL_OW 305
18518: PUSH
18519: LD_EXP 23
18523: PUSH
18524: LD_INT 5
18526: LESS
18527: AND
18528: IFFALSE 18538
18530: GO 18532
18532: DISABLE
// begin PrepareArabianKiller ;
18533: CALL 4090 0 0
// enable ;
18537: ENABLE
// end ; end_of_file
18538: END
// export function SetAchievements ; begin
18539: LD_INT 0
18541: PPUSH
// if stealWarmCount = 0 then
18542: LD_EXP 12
18546: PUSH
18547: LD_INT 0
18549: EQUAL
18550: IFFALSE 18559
// SetAchievement ( ACH_ENO ) ;
18552: LD_STRING ACH_ENO
18554: PPUSH
18555: CALL_OW 543
// end ;
18559: LD_VAR 0 1
18563: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18564: LD_EXP 25
18568: PUSH
18569: LD_INT 6
18571: GREATEREQUAL
18572: IFFALSE 18584
18574: GO 18576
18576: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18577: LD_STRING ACH_DEFENSE
18579: PPUSH
18580: CALL_OW 543
18584: END
// every 1 trigger killedArabianUnits >= 25 do
18585: LD_EXP 22
18589: PUSH
18590: LD_INT 25
18592: GREATEREQUAL
18593: IFFALSE 18605
18595: GO 18597
18597: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18598: LD_STRING ACH_ARAB
18600: PPUSH
18601: CALL_OW 543
18605: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18606: LD_INT 0
18608: PPUSH
// if p2 = 100 then
18609: LD_VAR 0 2
18613: PUSH
18614: LD_INT 100
18616: EQUAL
18617: IFFALSE 19566
// begin if not StreamModeActive then
18619: LD_EXP 66
18623: NOT
18624: IFFALSE 18634
// StreamModeActive := true ;
18626: LD_ADDR_EXP 66
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// if p3 = 0 then
18634: LD_VAR 0 3
18638: PUSH
18639: LD_INT 0
18641: EQUAL
18642: IFFALSE 18648
// InitStreamMode ;
18644: CALL 19726 0 0
// if p3 = 1 then
18648: LD_VAR 0 3
18652: PUSH
18653: LD_INT 1
18655: EQUAL
18656: IFFALSE 18666
// sRocket := true ;
18658: LD_ADDR_EXP 71
18662: PUSH
18663: LD_INT 1
18665: ST_TO_ADDR
// if p3 = 2 then
18666: LD_VAR 0 3
18670: PUSH
18671: LD_INT 2
18673: EQUAL
18674: IFFALSE 18684
// sSpeed := true ;
18676: LD_ADDR_EXP 70
18680: PUSH
18681: LD_INT 1
18683: ST_TO_ADDR
// if p3 = 3 then
18684: LD_VAR 0 3
18688: PUSH
18689: LD_INT 3
18691: EQUAL
18692: IFFALSE 18702
// sEngine := true ;
18694: LD_ADDR_EXP 72
18698: PUSH
18699: LD_INT 1
18701: ST_TO_ADDR
// if p3 = 4 then
18702: LD_VAR 0 3
18706: PUSH
18707: LD_INT 4
18709: EQUAL
18710: IFFALSE 18720
// sSpec := true ;
18712: LD_ADDR_EXP 69
18716: PUSH
18717: LD_INT 1
18719: ST_TO_ADDR
// if p3 = 5 then
18720: LD_VAR 0 3
18724: PUSH
18725: LD_INT 5
18727: EQUAL
18728: IFFALSE 18738
// sLevel := true ;
18730: LD_ADDR_EXP 73
18734: PUSH
18735: LD_INT 1
18737: ST_TO_ADDR
// if p3 = 6 then
18738: LD_VAR 0 3
18742: PUSH
18743: LD_INT 6
18745: EQUAL
18746: IFFALSE 18756
// sArmoury := true ;
18748: LD_ADDR_EXP 74
18752: PUSH
18753: LD_INT 1
18755: ST_TO_ADDR
// if p3 = 7 then
18756: LD_VAR 0 3
18760: PUSH
18761: LD_INT 7
18763: EQUAL
18764: IFFALSE 18774
// sRadar := true ;
18766: LD_ADDR_EXP 75
18770: PUSH
18771: LD_INT 1
18773: ST_TO_ADDR
// if p3 = 8 then
18774: LD_VAR 0 3
18778: PUSH
18779: LD_INT 8
18781: EQUAL
18782: IFFALSE 18792
// sBunker := true ;
18784: LD_ADDR_EXP 76
18788: PUSH
18789: LD_INT 1
18791: ST_TO_ADDR
// if p3 = 9 then
18792: LD_VAR 0 3
18796: PUSH
18797: LD_INT 9
18799: EQUAL
18800: IFFALSE 18810
// sHack := true ;
18802: LD_ADDR_EXP 77
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// if p3 = 10 then
18810: LD_VAR 0 3
18814: PUSH
18815: LD_INT 10
18817: EQUAL
18818: IFFALSE 18828
// sFire := true ;
18820: LD_ADDR_EXP 78
18824: PUSH
18825: LD_INT 1
18827: ST_TO_ADDR
// if p3 = 11 then
18828: LD_VAR 0 3
18832: PUSH
18833: LD_INT 11
18835: EQUAL
18836: IFFALSE 18846
// sRefresh := true ;
18838: LD_ADDR_EXP 79
18842: PUSH
18843: LD_INT 1
18845: ST_TO_ADDR
// if p3 = 12 then
18846: LD_VAR 0 3
18850: PUSH
18851: LD_INT 12
18853: EQUAL
18854: IFFALSE 18864
// sExp := true ;
18856: LD_ADDR_EXP 80
18860: PUSH
18861: LD_INT 1
18863: ST_TO_ADDR
// if p3 = 13 then
18864: LD_VAR 0 3
18868: PUSH
18869: LD_INT 13
18871: EQUAL
18872: IFFALSE 18882
// sDepot := true ;
18874: LD_ADDR_EXP 81
18878: PUSH
18879: LD_INT 1
18881: ST_TO_ADDR
// if p3 = 14 then
18882: LD_VAR 0 3
18886: PUSH
18887: LD_INT 14
18889: EQUAL
18890: IFFALSE 18900
// sFlag := true ;
18892: LD_ADDR_EXP 82
18896: PUSH
18897: LD_INT 1
18899: ST_TO_ADDR
// if p3 = 15 then
18900: LD_VAR 0 3
18904: PUSH
18905: LD_INT 15
18907: EQUAL
18908: IFFALSE 18918
// sKamikadze := true ;
18910: LD_ADDR_EXP 90
18914: PUSH
18915: LD_INT 1
18917: ST_TO_ADDR
// if p3 = 16 then
18918: LD_VAR 0 3
18922: PUSH
18923: LD_INT 16
18925: EQUAL
18926: IFFALSE 18936
// sTroll := true ;
18928: LD_ADDR_EXP 91
18932: PUSH
18933: LD_INT 1
18935: ST_TO_ADDR
// if p3 = 17 then
18936: LD_VAR 0 3
18940: PUSH
18941: LD_INT 17
18943: EQUAL
18944: IFFALSE 18954
// sSlow := true ;
18946: LD_ADDR_EXP 92
18950: PUSH
18951: LD_INT 1
18953: ST_TO_ADDR
// if p3 = 18 then
18954: LD_VAR 0 3
18958: PUSH
18959: LD_INT 18
18961: EQUAL
18962: IFFALSE 18972
// sLack := true ;
18964: LD_ADDR_EXP 93
18968: PUSH
18969: LD_INT 1
18971: ST_TO_ADDR
// if p3 = 19 then
18972: LD_VAR 0 3
18976: PUSH
18977: LD_INT 19
18979: EQUAL
18980: IFFALSE 18990
// sTank := true ;
18982: LD_ADDR_EXP 95
18986: PUSH
18987: LD_INT 1
18989: ST_TO_ADDR
// if p3 = 20 then
18990: LD_VAR 0 3
18994: PUSH
18995: LD_INT 20
18997: EQUAL
18998: IFFALSE 19008
// sRemote := true ;
19000: LD_ADDR_EXP 96
19004: PUSH
19005: LD_INT 1
19007: ST_TO_ADDR
// if p3 = 21 then
19008: LD_VAR 0 3
19012: PUSH
19013: LD_INT 21
19015: EQUAL
19016: IFFALSE 19026
// sPowell := true ;
19018: LD_ADDR_EXP 97
19022: PUSH
19023: LD_INT 1
19025: ST_TO_ADDR
// if p3 = 22 then
19026: LD_VAR 0 3
19030: PUSH
19031: LD_INT 22
19033: EQUAL
19034: IFFALSE 19044
// sTeleport := true ;
19036: LD_ADDR_EXP 100
19040: PUSH
19041: LD_INT 1
19043: ST_TO_ADDR
// if p3 = 23 then
19044: LD_VAR 0 3
19048: PUSH
19049: LD_INT 23
19051: EQUAL
19052: IFFALSE 19062
// sOilTower := true ;
19054: LD_ADDR_EXP 102
19058: PUSH
19059: LD_INT 1
19061: ST_TO_ADDR
// if p3 = 24 then
19062: LD_VAR 0 3
19066: PUSH
19067: LD_INT 24
19069: EQUAL
19070: IFFALSE 19080
// sShovel := true ;
19072: LD_ADDR_EXP 103
19076: PUSH
19077: LD_INT 1
19079: ST_TO_ADDR
// if p3 = 25 then
19080: LD_VAR 0 3
19084: PUSH
19085: LD_INT 25
19087: EQUAL
19088: IFFALSE 19098
// sSheik := true ;
19090: LD_ADDR_EXP 104
19094: PUSH
19095: LD_INT 1
19097: ST_TO_ADDR
// if p3 = 26 then
19098: LD_VAR 0 3
19102: PUSH
19103: LD_INT 26
19105: EQUAL
19106: IFFALSE 19116
// sEarthquake := true ;
19108: LD_ADDR_EXP 106
19112: PUSH
19113: LD_INT 1
19115: ST_TO_ADDR
// if p3 = 27 then
19116: LD_VAR 0 3
19120: PUSH
19121: LD_INT 27
19123: EQUAL
19124: IFFALSE 19134
// sAI := true ;
19126: LD_ADDR_EXP 107
19130: PUSH
19131: LD_INT 1
19133: ST_TO_ADDR
// if p3 = 28 then
19134: LD_VAR 0 3
19138: PUSH
19139: LD_INT 28
19141: EQUAL
19142: IFFALSE 19152
// sCargo := true ;
19144: LD_ADDR_EXP 110
19148: PUSH
19149: LD_INT 1
19151: ST_TO_ADDR
// if p3 = 29 then
19152: LD_VAR 0 3
19156: PUSH
19157: LD_INT 29
19159: EQUAL
19160: IFFALSE 19170
// sDLaser := true ;
19162: LD_ADDR_EXP 111
19166: PUSH
19167: LD_INT 1
19169: ST_TO_ADDR
// if p3 = 30 then
19170: LD_VAR 0 3
19174: PUSH
19175: LD_INT 30
19177: EQUAL
19178: IFFALSE 19188
// sExchange := true ;
19180: LD_ADDR_EXP 112
19184: PUSH
19185: LD_INT 1
19187: ST_TO_ADDR
// if p3 = 31 then
19188: LD_VAR 0 3
19192: PUSH
19193: LD_INT 31
19195: EQUAL
19196: IFFALSE 19206
// sFac := true ;
19198: LD_ADDR_EXP 113
19202: PUSH
19203: LD_INT 1
19205: ST_TO_ADDR
// if p3 = 32 then
19206: LD_VAR 0 3
19210: PUSH
19211: LD_INT 32
19213: EQUAL
19214: IFFALSE 19224
// sPower := true ;
19216: LD_ADDR_EXP 114
19220: PUSH
19221: LD_INT 1
19223: ST_TO_ADDR
// if p3 = 33 then
19224: LD_VAR 0 3
19228: PUSH
19229: LD_INT 33
19231: EQUAL
19232: IFFALSE 19242
// sRandom := true ;
19234: LD_ADDR_EXP 115
19238: PUSH
19239: LD_INT 1
19241: ST_TO_ADDR
// if p3 = 34 then
19242: LD_VAR 0 3
19246: PUSH
19247: LD_INT 34
19249: EQUAL
19250: IFFALSE 19260
// sShield := true ;
19252: LD_ADDR_EXP 116
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// if p3 = 35 then
19260: LD_VAR 0 3
19264: PUSH
19265: LD_INT 35
19267: EQUAL
19268: IFFALSE 19278
// sTime := true ;
19270: LD_ADDR_EXP 117
19274: PUSH
19275: LD_INT 1
19277: ST_TO_ADDR
// if p3 = 36 then
19278: LD_VAR 0 3
19282: PUSH
19283: LD_INT 36
19285: EQUAL
19286: IFFALSE 19296
// sTools := true ;
19288: LD_ADDR_EXP 118
19292: PUSH
19293: LD_INT 1
19295: ST_TO_ADDR
// if p3 = 101 then
19296: LD_VAR 0 3
19300: PUSH
19301: LD_INT 101
19303: EQUAL
19304: IFFALSE 19314
// sSold := true ;
19306: LD_ADDR_EXP 83
19310: PUSH
19311: LD_INT 1
19313: ST_TO_ADDR
// if p3 = 102 then
19314: LD_VAR 0 3
19318: PUSH
19319: LD_INT 102
19321: EQUAL
19322: IFFALSE 19332
// sDiff := true ;
19324: LD_ADDR_EXP 84
19328: PUSH
19329: LD_INT 1
19331: ST_TO_ADDR
// if p3 = 103 then
19332: LD_VAR 0 3
19336: PUSH
19337: LD_INT 103
19339: EQUAL
19340: IFFALSE 19350
// sFog := true ;
19342: LD_ADDR_EXP 87
19346: PUSH
19347: LD_INT 1
19349: ST_TO_ADDR
// if p3 = 104 then
19350: LD_VAR 0 3
19354: PUSH
19355: LD_INT 104
19357: EQUAL
19358: IFFALSE 19368
// sReset := true ;
19360: LD_ADDR_EXP 88
19364: PUSH
19365: LD_INT 1
19367: ST_TO_ADDR
// if p3 = 105 then
19368: LD_VAR 0 3
19372: PUSH
19373: LD_INT 105
19375: EQUAL
19376: IFFALSE 19386
// sSun := true ;
19378: LD_ADDR_EXP 89
19382: PUSH
19383: LD_INT 1
19385: ST_TO_ADDR
// if p3 = 106 then
19386: LD_VAR 0 3
19390: PUSH
19391: LD_INT 106
19393: EQUAL
19394: IFFALSE 19404
// sTiger := true ;
19396: LD_ADDR_EXP 85
19400: PUSH
19401: LD_INT 1
19403: ST_TO_ADDR
// if p3 = 107 then
19404: LD_VAR 0 3
19408: PUSH
19409: LD_INT 107
19411: EQUAL
19412: IFFALSE 19422
// sBomb := true ;
19414: LD_ADDR_EXP 86
19418: PUSH
19419: LD_INT 1
19421: ST_TO_ADDR
// if p3 = 108 then
19422: LD_VAR 0 3
19426: PUSH
19427: LD_INT 108
19429: EQUAL
19430: IFFALSE 19440
// sWound := true ;
19432: LD_ADDR_EXP 94
19436: PUSH
19437: LD_INT 1
19439: ST_TO_ADDR
// if p3 = 109 then
19440: LD_VAR 0 3
19444: PUSH
19445: LD_INT 109
19447: EQUAL
19448: IFFALSE 19458
// sBetray := true ;
19450: LD_ADDR_EXP 98
19454: PUSH
19455: LD_INT 1
19457: ST_TO_ADDR
// if p3 = 110 then
19458: LD_VAR 0 3
19462: PUSH
19463: LD_INT 110
19465: EQUAL
19466: IFFALSE 19476
// sContamin := true ;
19468: LD_ADDR_EXP 99
19472: PUSH
19473: LD_INT 1
19475: ST_TO_ADDR
// if p3 = 111 then
19476: LD_VAR 0 3
19480: PUSH
19481: LD_INT 111
19483: EQUAL
19484: IFFALSE 19494
// sOil := true ;
19486: LD_ADDR_EXP 101
19490: PUSH
19491: LD_INT 1
19493: ST_TO_ADDR
// if p3 = 112 then
19494: LD_VAR 0 3
19498: PUSH
19499: LD_INT 112
19501: EQUAL
19502: IFFALSE 19512
// sStu := true ;
19504: LD_ADDR_EXP 105
19508: PUSH
19509: LD_INT 1
19511: ST_TO_ADDR
// if p3 = 113 then
19512: LD_VAR 0 3
19516: PUSH
19517: LD_INT 113
19519: EQUAL
19520: IFFALSE 19530
// sBazooka := true ;
19522: LD_ADDR_EXP 108
19526: PUSH
19527: LD_INT 1
19529: ST_TO_ADDR
// if p3 = 114 then
19530: LD_VAR 0 3
19534: PUSH
19535: LD_INT 114
19537: EQUAL
19538: IFFALSE 19548
// sMortar := true ;
19540: LD_ADDR_EXP 109
19544: PUSH
19545: LD_INT 1
19547: ST_TO_ADDR
// if p3 = 115 then
19548: LD_VAR 0 3
19552: PUSH
19553: LD_INT 115
19555: EQUAL
19556: IFFALSE 19566
// sRanger := true ;
19558: LD_ADDR_EXP 119
19562: PUSH
19563: LD_INT 1
19565: ST_TO_ADDR
// end ; if p2 = 101 then
19566: LD_VAR 0 2
19570: PUSH
19571: LD_INT 101
19573: EQUAL
19574: IFFALSE 19702
// begin case p3 of 1 :
19576: LD_VAR 0 3
19580: PUSH
19581: LD_INT 1
19583: DOUBLE
19584: EQUAL
19585: IFTRUE 19589
19587: GO 19596
19589: POP
// hHackUnlimitedResources ; 2 :
19590: CALL 30739 0 0
19594: GO 19702
19596: LD_INT 2
19598: DOUBLE
19599: EQUAL
19600: IFTRUE 19604
19602: GO 19611
19604: POP
// hHackSetLevel10 ; 3 :
19605: CALL 30872 0 0
19609: GO 19702
19611: LD_INT 3
19613: DOUBLE
19614: EQUAL
19615: IFTRUE 19619
19617: GO 19626
19619: POP
// hHackSetLevel10YourUnits ; 4 :
19620: CALL 30957 0 0
19624: GO 19702
19626: LD_INT 4
19628: DOUBLE
19629: EQUAL
19630: IFTRUE 19634
19632: GO 19641
19634: POP
// hHackInvincible ; 5 :
19635: CALL 31405 0 0
19639: GO 19702
19641: LD_INT 5
19643: DOUBLE
19644: EQUAL
19645: IFTRUE 19649
19647: GO 19656
19649: POP
// hHackInvisible ; 6 :
19650: CALL 31516 0 0
19654: GO 19702
19656: LD_INT 6
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19671
19664: POP
// hHackChangeYourSide ; 7 :
19665: CALL 31573 0 0
19669: GO 19702
19671: LD_INT 7
19673: DOUBLE
19674: EQUAL
19675: IFTRUE 19679
19677: GO 19686
19679: POP
// hHackChangeUnitSide ; 8 :
19680: CALL 31615 0 0
19684: GO 19702
19686: LD_INT 8
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19701
19694: POP
// hHackFog ; end ;
19695: CALL 31716 0 0
19699: GO 19702
19701: POP
// end ; end ;
19702: LD_VAR 0 7
19706: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19707: GO 19709
19709: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19710: LD_STRING initStreamRollete();
19712: PPUSH
19713: CALL_OW 559
// InitStreamMode ;
19717: CALL 19726 0 0
// DefineStreamItems ( ) ;
19721: CALL 20166 0 0
// end ;
19725: END
// function InitStreamMode ; begin
19726: LD_INT 0
19728: PPUSH
// streamModeActive := false ;
19729: LD_ADDR_EXP 66
19733: PUSH
19734: LD_INT 0
19736: ST_TO_ADDR
// normalCounter := 36 ;
19737: LD_ADDR_EXP 67
19741: PUSH
19742: LD_INT 36
19744: ST_TO_ADDR
// hardcoreCounter := 16 ;
19745: LD_ADDR_EXP 68
19749: PUSH
19750: LD_INT 16
19752: ST_TO_ADDR
// sRocket := false ;
19753: LD_ADDR_EXP 71
19757: PUSH
19758: LD_INT 0
19760: ST_TO_ADDR
// sSpeed := false ;
19761: LD_ADDR_EXP 70
19765: PUSH
19766: LD_INT 0
19768: ST_TO_ADDR
// sEngine := false ;
19769: LD_ADDR_EXP 72
19773: PUSH
19774: LD_INT 0
19776: ST_TO_ADDR
// sSpec := false ;
19777: LD_ADDR_EXP 69
19781: PUSH
19782: LD_INT 0
19784: ST_TO_ADDR
// sLevel := false ;
19785: LD_ADDR_EXP 73
19789: PUSH
19790: LD_INT 0
19792: ST_TO_ADDR
// sArmoury := false ;
19793: LD_ADDR_EXP 74
19797: PUSH
19798: LD_INT 0
19800: ST_TO_ADDR
// sRadar := false ;
19801: LD_ADDR_EXP 75
19805: PUSH
19806: LD_INT 0
19808: ST_TO_ADDR
// sBunker := false ;
19809: LD_ADDR_EXP 76
19813: PUSH
19814: LD_INT 0
19816: ST_TO_ADDR
// sHack := false ;
19817: LD_ADDR_EXP 77
19821: PUSH
19822: LD_INT 0
19824: ST_TO_ADDR
// sFire := false ;
19825: LD_ADDR_EXP 78
19829: PUSH
19830: LD_INT 0
19832: ST_TO_ADDR
// sRefresh := false ;
19833: LD_ADDR_EXP 79
19837: PUSH
19838: LD_INT 0
19840: ST_TO_ADDR
// sExp := false ;
19841: LD_ADDR_EXP 80
19845: PUSH
19846: LD_INT 0
19848: ST_TO_ADDR
// sDepot := false ;
19849: LD_ADDR_EXP 81
19853: PUSH
19854: LD_INT 0
19856: ST_TO_ADDR
// sFlag := false ;
19857: LD_ADDR_EXP 82
19861: PUSH
19862: LD_INT 0
19864: ST_TO_ADDR
// sKamikadze := false ;
19865: LD_ADDR_EXP 90
19869: PUSH
19870: LD_INT 0
19872: ST_TO_ADDR
// sTroll := false ;
19873: LD_ADDR_EXP 91
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// sSlow := false ;
19881: LD_ADDR_EXP 92
19885: PUSH
19886: LD_INT 0
19888: ST_TO_ADDR
// sLack := false ;
19889: LD_ADDR_EXP 93
19893: PUSH
19894: LD_INT 0
19896: ST_TO_ADDR
// sTank := false ;
19897: LD_ADDR_EXP 95
19901: PUSH
19902: LD_INT 0
19904: ST_TO_ADDR
// sRemote := false ;
19905: LD_ADDR_EXP 96
19909: PUSH
19910: LD_INT 0
19912: ST_TO_ADDR
// sPowell := false ;
19913: LD_ADDR_EXP 97
19917: PUSH
19918: LD_INT 0
19920: ST_TO_ADDR
// sTeleport := false ;
19921: LD_ADDR_EXP 100
19925: PUSH
19926: LD_INT 0
19928: ST_TO_ADDR
// sOilTower := false ;
19929: LD_ADDR_EXP 102
19933: PUSH
19934: LD_INT 0
19936: ST_TO_ADDR
// sShovel := false ;
19937: LD_ADDR_EXP 103
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// sSheik := false ;
19945: LD_ADDR_EXP 104
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// sEarthquake := false ;
19953: LD_ADDR_EXP 106
19957: PUSH
19958: LD_INT 0
19960: ST_TO_ADDR
// sAI := false ;
19961: LD_ADDR_EXP 107
19965: PUSH
19966: LD_INT 0
19968: ST_TO_ADDR
// sCargo := false ;
19969: LD_ADDR_EXP 110
19973: PUSH
19974: LD_INT 0
19976: ST_TO_ADDR
// sDLaser := false ;
19977: LD_ADDR_EXP 111
19981: PUSH
19982: LD_INT 0
19984: ST_TO_ADDR
// sExchange := false ;
19985: LD_ADDR_EXP 112
19989: PUSH
19990: LD_INT 0
19992: ST_TO_ADDR
// sFac := false ;
19993: LD_ADDR_EXP 113
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
// sPower := false ;
20001: LD_ADDR_EXP 114
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// sRandom := false ;
20009: LD_ADDR_EXP 115
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// sShield := false ;
20017: LD_ADDR_EXP 116
20021: PUSH
20022: LD_INT 0
20024: ST_TO_ADDR
// sTime := false ;
20025: LD_ADDR_EXP 117
20029: PUSH
20030: LD_INT 0
20032: ST_TO_ADDR
// sTools := false ;
20033: LD_ADDR_EXP 118
20037: PUSH
20038: LD_INT 0
20040: ST_TO_ADDR
// sSold := false ;
20041: LD_ADDR_EXP 83
20045: PUSH
20046: LD_INT 0
20048: ST_TO_ADDR
// sDiff := false ;
20049: LD_ADDR_EXP 84
20053: PUSH
20054: LD_INT 0
20056: ST_TO_ADDR
// sFog := false ;
20057: LD_ADDR_EXP 87
20061: PUSH
20062: LD_INT 0
20064: ST_TO_ADDR
// sReset := false ;
20065: LD_ADDR_EXP 88
20069: PUSH
20070: LD_INT 0
20072: ST_TO_ADDR
// sSun := false ;
20073: LD_ADDR_EXP 89
20077: PUSH
20078: LD_INT 0
20080: ST_TO_ADDR
// sTiger := false ;
20081: LD_ADDR_EXP 85
20085: PUSH
20086: LD_INT 0
20088: ST_TO_ADDR
// sBomb := false ;
20089: LD_ADDR_EXP 86
20093: PUSH
20094: LD_INT 0
20096: ST_TO_ADDR
// sWound := false ;
20097: LD_ADDR_EXP 94
20101: PUSH
20102: LD_INT 0
20104: ST_TO_ADDR
// sBetray := false ;
20105: LD_ADDR_EXP 98
20109: PUSH
20110: LD_INT 0
20112: ST_TO_ADDR
// sContamin := false ;
20113: LD_ADDR_EXP 99
20117: PUSH
20118: LD_INT 0
20120: ST_TO_ADDR
// sOil := false ;
20121: LD_ADDR_EXP 101
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// sStu := false ;
20129: LD_ADDR_EXP 105
20133: PUSH
20134: LD_INT 0
20136: ST_TO_ADDR
// sBazooka := false ;
20137: LD_ADDR_EXP 108
20141: PUSH
20142: LD_INT 0
20144: ST_TO_ADDR
// sMortar := false ;
20145: LD_ADDR_EXP 109
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// sRanger := false ;
20153: LD_ADDR_EXP 119
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// end ;
20161: LD_VAR 0 1
20165: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20166: LD_INT 0
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
20172: PPUSH
// result := [ ] ;
20173: LD_ADDR_VAR 0 1
20177: PUSH
20178: EMPTY
20179: ST_TO_ADDR
// if campaign_id = 1 then
20180: LD_OWVAR 69
20184: PUSH
20185: LD_INT 1
20187: EQUAL
20188: IFFALSE 23126
// begin case mission_number of 1 :
20190: LD_OWVAR 70
20194: PUSH
20195: LD_INT 1
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20267
20203: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20204: LD_ADDR_VAR 0 1
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: LD_INT 4
20214: PUSH
20215: LD_INT 11
20217: PUSH
20218: LD_INT 12
20220: PUSH
20221: LD_INT 15
20223: PUSH
20224: LD_INT 16
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_INT 23
20232: PUSH
20233: LD_INT 26
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 101
20249: PUSH
20250: LD_INT 102
20252: PUSH
20253: LD_INT 106
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: ST_TO_ADDR
20265: GO 23124
20267: LD_INT 2
20269: DOUBLE
20270: EQUAL
20271: IFTRUE 20275
20273: GO 20347
20275: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20276: LD_ADDR_VAR 0 1
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: LD_INT 4
20286: PUSH
20287: LD_INT 11
20289: PUSH
20290: LD_INT 12
20292: PUSH
20293: LD_INT 15
20295: PUSH
20296: LD_INT 16
20298: PUSH
20299: LD_INT 22
20301: PUSH
20302: LD_INT 23
20304: PUSH
20305: LD_INT 26
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 101
20321: PUSH
20322: LD_INT 102
20324: PUSH
20325: LD_INT 105
20327: PUSH
20328: LD_INT 106
20330: PUSH
20331: LD_INT 108
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: ST_TO_ADDR
20345: GO 23124
20347: LD_INT 3
20349: DOUBLE
20350: EQUAL
20351: IFTRUE 20355
20353: GO 20431
20355: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20356: LD_ADDR_VAR 0 1
20360: PUSH
20361: LD_INT 2
20363: PUSH
20364: LD_INT 4
20366: PUSH
20367: LD_INT 5
20369: PUSH
20370: LD_INT 11
20372: PUSH
20373: LD_INT 12
20375: PUSH
20376: LD_INT 15
20378: PUSH
20379: LD_INT 16
20381: PUSH
20382: LD_INT 22
20384: PUSH
20385: LD_INT 26
20387: PUSH
20388: LD_INT 36
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 101
20405: PUSH
20406: LD_INT 102
20408: PUSH
20409: LD_INT 105
20411: PUSH
20412: LD_INT 106
20414: PUSH
20415: LD_INT 108
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: ST_TO_ADDR
20429: GO 23124
20431: LD_INT 4
20433: DOUBLE
20434: EQUAL
20435: IFTRUE 20439
20437: GO 20523
20439: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20440: LD_ADDR_VAR 0 1
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 4
20450: PUSH
20451: LD_INT 5
20453: PUSH
20454: LD_INT 8
20456: PUSH
20457: LD_INT 11
20459: PUSH
20460: LD_INT 12
20462: PUSH
20463: LD_INT 15
20465: PUSH
20466: LD_INT 16
20468: PUSH
20469: LD_INT 22
20471: PUSH
20472: LD_INT 23
20474: PUSH
20475: LD_INT 26
20477: PUSH
20478: LD_INT 36
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 101
20497: PUSH
20498: LD_INT 102
20500: PUSH
20501: LD_INT 105
20503: PUSH
20504: LD_INT 106
20506: PUSH
20507: LD_INT 108
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: ST_TO_ADDR
20521: GO 23124
20523: LD_INT 5
20525: DOUBLE
20526: EQUAL
20527: IFTRUE 20531
20529: GO 20631
20531: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20532: LD_ADDR_VAR 0 1
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 4
20542: PUSH
20543: LD_INT 5
20545: PUSH
20546: LD_INT 6
20548: PUSH
20549: LD_INT 8
20551: PUSH
20552: LD_INT 11
20554: PUSH
20555: LD_INT 12
20557: PUSH
20558: LD_INT 15
20560: PUSH
20561: LD_INT 16
20563: PUSH
20564: LD_INT 22
20566: PUSH
20567: LD_INT 23
20569: PUSH
20570: LD_INT 25
20572: PUSH
20573: LD_INT 26
20575: PUSH
20576: LD_INT 36
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 101
20597: PUSH
20598: LD_INT 102
20600: PUSH
20601: LD_INT 105
20603: PUSH
20604: LD_INT 106
20606: PUSH
20607: LD_INT 108
20609: PUSH
20610: LD_INT 109
20612: PUSH
20613: LD_INT 112
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: ST_TO_ADDR
20629: GO 23124
20631: LD_INT 6
20633: DOUBLE
20634: EQUAL
20635: IFTRUE 20639
20637: GO 20759
20639: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20640: LD_ADDR_VAR 0 1
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 4
20650: PUSH
20651: LD_INT 5
20653: PUSH
20654: LD_INT 6
20656: PUSH
20657: LD_INT 8
20659: PUSH
20660: LD_INT 11
20662: PUSH
20663: LD_INT 12
20665: PUSH
20666: LD_INT 15
20668: PUSH
20669: LD_INT 16
20671: PUSH
20672: LD_INT 20
20674: PUSH
20675: LD_INT 21
20677: PUSH
20678: LD_INT 22
20680: PUSH
20681: LD_INT 23
20683: PUSH
20684: LD_INT 25
20686: PUSH
20687: LD_INT 26
20689: PUSH
20690: LD_INT 30
20692: PUSH
20693: LD_INT 31
20695: PUSH
20696: LD_INT 32
20698: PUSH
20699: LD_INT 36
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 101
20725: PUSH
20726: LD_INT 102
20728: PUSH
20729: LD_INT 105
20731: PUSH
20732: LD_INT 106
20734: PUSH
20735: LD_INT 108
20737: PUSH
20738: LD_INT 109
20740: PUSH
20741: LD_INT 112
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: ST_TO_ADDR
20757: GO 23124
20759: LD_INT 7
20761: DOUBLE
20762: EQUAL
20763: IFTRUE 20767
20765: GO 20867
20767: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20768: LD_ADDR_VAR 0 1
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: LD_INT 4
20778: PUSH
20779: LD_INT 5
20781: PUSH
20782: LD_INT 7
20784: PUSH
20785: LD_INT 11
20787: PUSH
20788: LD_INT 12
20790: PUSH
20791: LD_INT 15
20793: PUSH
20794: LD_INT 16
20796: PUSH
20797: LD_INT 20
20799: PUSH
20800: LD_INT 21
20802: PUSH
20803: LD_INT 22
20805: PUSH
20806: LD_INT 23
20808: PUSH
20809: LD_INT 25
20811: PUSH
20812: LD_INT 26
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 101
20833: PUSH
20834: LD_INT 102
20836: PUSH
20837: LD_INT 103
20839: PUSH
20840: LD_INT 105
20842: PUSH
20843: LD_INT 106
20845: PUSH
20846: LD_INT 108
20848: PUSH
20849: LD_INT 112
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: ST_TO_ADDR
20865: GO 23124
20867: LD_INT 8
20869: DOUBLE
20870: EQUAL
20871: IFTRUE 20875
20873: GO 21003
20875: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20876: LD_ADDR_VAR 0 1
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: LD_INT 4
20886: PUSH
20887: LD_INT 5
20889: PUSH
20890: LD_INT 6
20892: PUSH
20893: LD_INT 7
20895: PUSH
20896: LD_INT 8
20898: PUSH
20899: LD_INT 11
20901: PUSH
20902: LD_INT 12
20904: PUSH
20905: LD_INT 15
20907: PUSH
20908: LD_INT 16
20910: PUSH
20911: LD_INT 20
20913: PUSH
20914: LD_INT 21
20916: PUSH
20917: LD_INT 22
20919: PUSH
20920: LD_INT 23
20922: PUSH
20923: LD_INT 25
20925: PUSH
20926: LD_INT 26
20928: PUSH
20929: LD_INT 30
20931: PUSH
20932: LD_INT 31
20934: PUSH
20935: LD_INT 32
20937: PUSH
20938: LD_INT 36
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 101
20965: PUSH
20966: LD_INT 102
20968: PUSH
20969: LD_INT 103
20971: PUSH
20972: LD_INT 105
20974: PUSH
20975: LD_INT 106
20977: PUSH
20978: LD_INT 108
20980: PUSH
20981: LD_INT 109
20983: PUSH
20984: LD_INT 112
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: ST_TO_ADDR
21001: GO 23124
21003: LD_INT 9
21005: DOUBLE
21006: EQUAL
21007: IFTRUE 21011
21009: GO 21147
21011: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21012: LD_ADDR_VAR 0 1
21016: PUSH
21017: LD_INT 2
21019: PUSH
21020: LD_INT 4
21022: PUSH
21023: LD_INT 5
21025: PUSH
21026: LD_INT 6
21028: PUSH
21029: LD_INT 7
21031: PUSH
21032: LD_INT 8
21034: PUSH
21035: LD_INT 11
21037: PUSH
21038: LD_INT 12
21040: PUSH
21041: LD_INT 15
21043: PUSH
21044: LD_INT 16
21046: PUSH
21047: LD_INT 20
21049: PUSH
21050: LD_INT 21
21052: PUSH
21053: LD_INT 22
21055: PUSH
21056: LD_INT 23
21058: PUSH
21059: LD_INT 25
21061: PUSH
21062: LD_INT 26
21064: PUSH
21065: LD_INT 28
21067: PUSH
21068: LD_INT 30
21070: PUSH
21071: LD_INT 31
21073: PUSH
21074: LD_INT 32
21076: PUSH
21077: LD_INT 36
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 101
21105: PUSH
21106: LD_INT 102
21108: PUSH
21109: LD_INT 103
21111: PUSH
21112: LD_INT 105
21114: PUSH
21115: LD_INT 106
21117: PUSH
21118: LD_INT 108
21120: PUSH
21121: LD_INT 109
21123: PUSH
21124: LD_INT 112
21126: PUSH
21127: LD_INT 114
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: ST_TO_ADDR
21145: GO 23124
21147: LD_INT 10
21149: DOUBLE
21150: EQUAL
21151: IFTRUE 21155
21153: GO 21339
21155: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21156: LD_ADDR_VAR 0 1
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: LD_INT 4
21166: PUSH
21167: LD_INT 5
21169: PUSH
21170: LD_INT 6
21172: PUSH
21173: LD_INT 7
21175: PUSH
21176: LD_INT 8
21178: PUSH
21179: LD_INT 9
21181: PUSH
21182: LD_INT 10
21184: PUSH
21185: LD_INT 11
21187: PUSH
21188: LD_INT 12
21190: PUSH
21191: LD_INT 13
21193: PUSH
21194: LD_INT 14
21196: PUSH
21197: LD_INT 15
21199: PUSH
21200: LD_INT 16
21202: PUSH
21203: LD_INT 17
21205: PUSH
21206: LD_INT 18
21208: PUSH
21209: LD_INT 19
21211: PUSH
21212: LD_INT 20
21214: PUSH
21215: LD_INT 21
21217: PUSH
21218: LD_INT 22
21220: PUSH
21221: LD_INT 23
21223: PUSH
21224: LD_INT 24
21226: PUSH
21227: LD_INT 25
21229: PUSH
21230: LD_INT 26
21232: PUSH
21233: LD_INT 28
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 31
21241: PUSH
21242: LD_INT 32
21244: PUSH
21245: LD_INT 36
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 101
21281: PUSH
21282: LD_INT 102
21284: PUSH
21285: LD_INT 103
21287: PUSH
21288: LD_INT 104
21290: PUSH
21291: LD_INT 105
21293: PUSH
21294: LD_INT 106
21296: PUSH
21297: LD_INT 107
21299: PUSH
21300: LD_INT 108
21302: PUSH
21303: LD_INT 109
21305: PUSH
21306: LD_INT 110
21308: PUSH
21309: LD_INT 111
21311: PUSH
21312: LD_INT 112
21314: PUSH
21315: LD_INT 114
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: ST_TO_ADDR
21337: GO 23124
21339: LD_INT 11
21341: DOUBLE
21342: EQUAL
21343: IFTRUE 21347
21345: GO 21539
21347: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21348: LD_ADDR_VAR 0 1
21352: PUSH
21353: LD_INT 2
21355: PUSH
21356: LD_INT 3
21358: PUSH
21359: LD_INT 4
21361: PUSH
21362: LD_INT 5
21364: PUSH
21365: LD_INT 6
21367: PUSH
21368: LD_INT 7
21370: PUSH
21371: LD_INT 8
21373: PUSH
21374: LD_INT 9
21376: PUSH
21377: LD_INT 10
21379: PUSH
21380: LD_INT 11
21382: PUSH
21383: LD_INT 12
21385: PUSH
21386: LD_INT 13
21388: PUSH
21389: LD_INT 14
21391: PUSH
21392: LD_INT 15
21394: PUSH
21395: LD_INT 16
21397: PUSH
21398: LD_INT 17
21400: PUSH
21401: LD_INT 18
21403: PUSH
21404: LD_INT 19
21406: PUSH
21407: LD_INT 20
21409: PUSH
21410: LD_INT 21
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 23
21418: PUSH
21419: LD_INT 24
21421: PUSH
21422: LD_INT 25
21424: PUSH
21425: LD_INT 26
21427: PUSH
21428: LD_INT 28
21430: PUSH
21431: LD_INT 30
21433: PUSH
21434: LD_INT 31
21436: PUSH
21437: LD_INT 32
21439: PUSH
21440: LD_INT 34
21442: PUSH
21443: LD_INT 36
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 101
21481: PUSH
21482: LD_INT 102
21484: PUSH
21485: LD_INT 103
21487: PUSH
21488: LD_INT 104
21490: PUSH
21491: LD_INT 105
21493: PUSH
21494: LD_INT 106
21496: PUSH
21497: LD_INT 107
21499: PUSH
21500: LD_INT 108
21502: PUSH
21503: LD_INT 109
21505: PUSH
21506: LD_INT 110
21508: PUSH
21509: LD_INT 111
21511: PUSH
21512: LD_INT 112
21514: PUSH
21515: LD_INT 114
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: ST_TO_ADDR
21537: GO 23124
21539: LD_INT 12
21541: DOUBLE
21542: EQUAL
21543: IFTRUE 21547
21545: GO 21755
21547: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21548: LD_ADDR_VAR 0 1
21552: PUSH
21553: LD_INT 1
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: LD_INT 4
21564: PUSH
21565: LD_INT 5
21567: PUSH
21568: LD_INT 6
21570: PUSH
21571: LD_INT 7
21573: PUSH
21574: LD_INT 8
21576: PUSH
21577: LD_INT 9
21579: PUSH
21580: LD_INT 10
21582: PUSH
21583: LD_INT 11
21585: PUSH
21586: LD_INT 12
21588: PUSH
21589: LD_INT 13
21591: PUSH
21592: LD_INT 14
21594: PUSH
21595: LD_INT 15
21597: PUSH
21598: LD_INT 16
21600: PUSH
21601: LD_INT 17
21603: PUSH
21604: LD_INT 18
21606: PUSH
21607: LD_INT 19
21609: PUSH
21610: LD_INT 20
21612: PUSH
21613: LD_INT 21
21615: PUSH
21616: LD_INT 22
21618: PUSH
21619: LD_INT 23
21621: PUSH
21622: LD_INT 24
21624: PUSH
21625: LD_INT 25
21627: PUSH
21628: LD_INT 26
21630: PUSH
21631: LD_INT 27
21633: PUSH
21634: LD_INT 28
21636: PUSH
21637: LD_INT 30
21639: PUSH
21640: LD_INT 31
21642: PUSH
21643: LD_INT 32
21645: PUSH
21646: LD_INT 33
21648: PUSH
21649: LD_INT 34
21651: PUSH
21652: LD_INT 36
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 101
21693: PUSH
21694: LD_INT 102
21696: PUSH
21697: LD_INT 103
21699: PUSH
21700: LD_INT 104
21702: PUSH
21703: LD_INT 105
21705: PUSH
21706: LD_INT 106
21708: PUSH
21709: LD_INT 107
21711: PUSH
21712: LD_INT 108
21714: PUSH
21715: LD_INT 109
21717: PUSH
21718: LD_INT 110
21720: PUSH
21721: LD_INT 111
21723: PUSH
21724: LD_INT 112
21726: PUSH
21727: LD_INT 113
21729: PUSH
21730: LD_INT 114
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: ST_TO_ADDR
21753: GO 23124
21755: LD_INT 13
21757: DOUBLE
21758: EQUAL
21759: IFTRUE 21763
21761: GO 21959
21763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21764: LD_ADDR_VAR 0 1
21768: PUSH
21769: LD_INT 1
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: LD_INT 3
21777: PUSH
21778: LD_INT 4
21780: PUSH
21781: LD_INT 5
21783: PUSH
21784: LD_INT 8
21786: PUSH
21787: LD_INT 9
21789: PUSH
21790: LD_INT 10
21792: PUSH
21793: LD_INT 11
21795: PUSH
21796: LD_INT 12
21798: PUSH
21799: LD_INT 14
21801: PUSH
21802: LD_INT 15
21804: PUSH
21805: LD_INT 16
21807: PUSH
21808: LD_INT 17
21810: PUSH
21811: LD_INT 18
21813: PUSH
21814: LD_INT 19
21816: PUSH
21817: LD_INT 20
21819: PUSH
21820: LD_INT 21
21822: PUSH
21823: LD_INT 22
21825: PUSH
21826: LD_INT 23
21828: PUSH
21829: LD_INT 24
21831: PUSH
21832: LD_INT 25
21834: PUSH
21835: LD_INT 26
21837: PUSH
21838: LD_INT 27
21840: PUSH
21841: LD_INT 28
21843: PUSH
21844: LD_INT 30
21846: PUSH
21847: LD_INT 31
21849: PUSH
21850: LD_INT 32
21852: PUSH
21853: LD_INT 33
21855: PUSH
21856: LD_INT 34
21858: PUSH
21859: LD_INT 36
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 101
21897: PUSH
21898: LD_INT 102
21900: PUSH
21901: LD_INT 103
21903: PUSH
21904: LD_INT 104
21906: PUSH
21907: LD_INT 105
21909: PUSH
21910: LD_INT 106
21912: PUSH
21913: LD_INT 107
21915: PUSH
21916: LD_INT 108
21918: PUSH
21919: LD_INT 109
21921: PUSH
21922: LD_INT 110
21924: PUSH
21925: LD_INT 111
21927: PUSH
21928: LD_INT 112
21930: PUSH
21931: LD_INT 113
21933: PUSH
21934: LD_INT 114
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: ST_TO_ADDR
21957: GO 23124
21959: LD_INT 14
21961: DOUBLE
21962: EQUAL
21963: IFTRUE 21967
21965: GO 22179
21967: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21968: LD_ADDR_VAR 0 1
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: LD_INT 3
21981: PUSH
21982: LD_INT 4
21984: PUSH
21985: LD_INT 5
21987: PUSH
21988: LD_INT 6
21990: PUSH
21991: LD_INT 7
21993: PUSH
21994: LD_INT 8
21996: PUSH
21997: LD_INT 9
21999: PUSH
22000: LD_INT 10
22002: PUSH
22003: LD_INT 11
22005: PUSH
22006: LD_INT 12
22008: PUSH
22009: LD_INT 13
22011: PUSH
22012: LD_INT 14
22014: PUSH
22015: LD_INT 15
22017: PUSH
22018: LD_INT 16
22020: PUSH
22021: LD_INT 17
22023: PUSH
22024: LD_INT 18
22026: PUSH
22027: LD_INT 19
22029: PUSH
22030: LD_INT 20
22032: PUSH
22033: LD_INT 21
22035: PUSH
22036: LD_INT 22
22038: PUSH
22039: LD_INT 23
22041: PUSH
22042: LD_INT 24
22044: PUSH
22045: LD_INT 25
22047: PUSH
22048: LD_INT 26
22050: PUSH
22051: LD_INT 27
22053: PUSH
22054: LD_INT 28
22056: PUSH
22057: LD_INT 29
22059: PUSH
22060: LD_INT 30
22062: PUSH
22063: LD_INT 31
22065: PUSH
22066: LD_INT 32
22068: PUSH
22069: LD_INT 33
22071: PUSH
22072: LD_INT 34
22074: PUSH
22075: LD_INT 36
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 101
22117: PUSH
22118: LD_INT 102
22120: PUSH
22121: LD_INT 103
22123: PUSH
22124: LD_INT 104
22126: PUSH
22127: LD_INT 105
22129: PUSH
22130: LD_INT 106
22132: PUSH
22133: LD_INT 107
22135: PUSH
22136: LD_INT 108
22138: PUSH
22139: LD_INT 109
22141: PUSH
22142: LD_INT 110
22144: PUSH
22145: LD_INT 111
22147: PUSH
22148: LD_INT 112
22150: PUSH
22151: LD_INT 113
22153: PUSH
22154: LD_INT 114
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: ST_TO_ADDR
22177: GO 23124
22179: LD_INT 15
22181: DOUBLE
22182: EQUAL
22183: IFTRUE 22187
22185: GO 22399
22187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22188: LD_ADDR_VAR 0 1
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: LD_INT 3
22201: PUSH
22202: LD_INT 4
22204: PUSH
22205: LD_INT 5
22207: PUSH
22208: LD_INT 6
22210: PUSH
22211: LD_INT 7
22213: PUSH
22214: LD_INT 8
22216: PUSH
22217: LD_INT 9
22219: PUSH
22220: LD_INT 10
22222: PUSH
22223: LD_INT 11
22225: PUSH
22226: LD_INT 12
22228: PUSH
22229: LD_INT 13
22231: PUSH
22232: LD_INT 14
22234: PUSH
22235: LD_INT 15
22237: PUSH
22238: LD_INT 16
22240: PUSH
22241: LD_INT 17
22243: PUSH
22244: LD_INT 18
22246: PUSH
22247: LD_INT 19
22249: PUSH
22250: LD_INT 20
22252: PUSH
22253: LD_INT 21
22255: PUSH
22256: LD_INT 22
22258: PUSH
22259: LD_INT 23
22261: PUSH
22262: LD_INT 24
22264: PUSH
22265: LD_INT 25
22267: PUSH
22268: LD_INT 26
22270: PUSH
22271: LD_INT 27
22273: PUSH
22274: LD_INT 28
22276: PUSH
22277: LD_INT 29
22279: PUSH
22280: LD_INT 30
22282: PUSH
22283: LD_INT 31
22285: PUSH
22286: LD_INT 32
22288: PUSH
22289: LD_INT 33
22291: PUSH
22292: LD_INT 34
22294: PUSH
22295: LD_INT 36
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 101
22337: PUSH
22338: LD_INT 102
22340: PUSH
22341: LD_INT 103
22343: PUSH
22344: LD_INT 104
22346: PUSH
22347: LD_INT 105
22349: PUSH
22350: LD_INT 106
22352: PUSH
22353: LD_INT 107
22355: PUSH
22356: LD_INT 108
22358: PUSH
22359: LD_INT 109
22361: PUSH
22362: LD_INT 110
22364: PUSH
22365: LD_INT 111
22367: PUSH
22368: LD_INT 112
22370: PUSH
22371: LD_INT 113
22373: PUSH
22374: LD_INT 114
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: ST_TO_ADDR
22397: GO 23124
22399: LD_INT 16
22401: DOUBLE
22402: EQUAL
22403: IFTRUE 22407
22405: GO 22531
22407: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22408: LD_ADDR_VAR 0 1
22412: PUSH
22413: LD_INT 2
22415: PUSH
22416: LD_INT 4
22418: PUSH
22419: LD_INT 5
22421: PUSH
22422: LD_INT 7
22424: PUSH
22425: LD_INT 11
22427: PUSH
22428: LD_INT 12
22430: PUSH
22431: LD_INT 15
22433: PUSH
22434: LD_INT 16
22436: PUSH
22437: LD_INT 20
22439: PUSH
22440: LD_INT 21
22442: PUSH
22443: LD_INT 22
22445: PUSH
22446: LD_INT 23
22448: PUSH
22449: LD_INT 25
22451: PUSH
22452: LD_INT 26
22454: PUSH
22455: LD_INT 30
22457: PUSH
22458: LD_INT 31
22460: PUSH
22461: LD_INT 32
22463: PUSH
22464: LD_INT 33
22466: PUSH
22467: LD_INT 34
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 101
22493: PUSH
22494: LD_INT 102
22496: PUSH
22497: LD_INT 103
22499: PUSH
22500: LD_INT 106
22502: PUSH
22503: LD_INT 108
22505: PUSH
22506: LD_INT 112
22508: PUSH
22509: LD_INT 113
22511: PUSH
22512: LD_INT 114
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: ST_TO_ADDR
22529: GO 23124
22531: LD_INT 17
22533: DOUBLE
22534: EQUAL
22535: IFTRUE 22539
22537: GO 22751
22539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22540: LD_ADDR_VAR 0 1
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 3
22553: PUSH
22554: LD_INT 4
22556: PUSH
22557: LD_INT 5
22559: PUSH
22560: LD_INT 6
22562: PUSH
22563: LD_INT 7
22565: PUSH
22566: LD_INT 8
22568: PUSH
22569: LD_INT 9
22571: PUSH
22572: LD_INT 10
22574: PUSH
22575: LD_INT 11
22577: PUSH
22578: LD_INT 12
22580: PUSH
22581: LD_INT 13
22583: PUSH
22584: LD_INT 14
22586: PUSH
22587: LD_INT 15
22589: PUSH
22590: LD_INT 16
22592: PUSH
22593: LD_INT 17
22595: PUSH
22596: LD_INT 18
22598: PUSH
22599: LD_INT 19
22601: PUSH
22602: LD_INT 20
22604: PUSH
22605: LD_INT 21
22607: PUSH
22608: LD_INT 22
22610: PUSH
22611: LD_INT 23
22613: PUSH
22614: LD_INT 24
22616: PUSH
22617: LD_INT 25
22619: PUSH
22620: LD_INT 26
22622: PUSH
22623: LD_INT 27
22625: PUSH
22626: LD_INT 28
22628: PUSH
22629: LD_INT 29
22631: PUSH
22632: LD_INT 30
22634: PUSH
22635: LD_INT 31
22637: PUSH
22638: LD_INT 32
22640: PUSH
22641: LD_INT 33
22643: PUSH
22644: LD_INT 34
22646: PUSH
22647: LD_INT 36
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 101
22689: PUSH
22690: LD_INT 102
22692: PUSH
22693: LD_INT 103
22695: PUSH
22696: LD_INT 104
22698: PUSH
22699: LD_INT 105
22701: PUSH
22702: LD_INT 106
22704: PUSH
22705: LD_INT 107
22707: PUSH
22708: LD_INT 108
22710: PUSH
22711: LD_INT 109
22713: PUSH
22714: LD_INT 110
22716: PUSH
22717: LD_INT 111
22719: PUSH
22720: LD_INT 112
22722: PUSH
22723: LD_INT 113
22725: PUSH
22726: LD_INT 114
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: ST_TO_ADDR
22749: GO 23124
22751: LD_INT 18
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22895
22759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22760: LD_ADDR_VAR 0 1
22764: PUSH
22765: LD_INT 2
22767: PUSH
22768: LD_INT 4
22770: PUSH
22771: LD_INT 5
22773: PUSH
22774: LD_INT 7
22776: PUSH
22777: LD_INT 11
22779: PUSH
22780: LD_INT 12
22782: PUSH
22783: LD_INT 15
22785: PUSH
22786: LD_INT 16
22788: PUSH
22789: LD_INT 20
22791: PUSH
22792: LD_INT 21
22794: PUSH
22795: LD_INT 22
22797: PUSH
22798: LD_INT 23
22800: PUSH
22801: LD_INT 25
22803: PUSH
22804: LD_INT 26
22806: PUSH
22807: LD_INT 30
22809: PUSH
22810: LD_INT 31
22812: PUSH
22813: LD_INT 32
22815: PUSH
22816: LD_INT 33
22818: PUSH
22819: LD_INT 34
22821: PUSH
22822: LD_INT 35
22824: PUSH
22825: LD_INT 36
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 101
22853: PUSH
22854: LD_INT 102
22856: PUSH
22857: LD_INT 103
22859: PUSH
22860: LD_INT 106
22862: PUSH
22863: LD_INT 108
22865: PUSH
22866: LD_INT 112
22868: PUSH
22869: LD_INT 113
22871: PUSH
22872: LD_INT 114
22874: PUSH
22875: LD_INT 115
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: ST_TO_ADDR
22893: GO 23124
22895: LD_INT 19
22897: DOUBLE
22898: EQUAL
22899: IFTRUE 22903
22901: GO 23123
22903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22904: LD_ADDR_VAR 0 1
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: LD_INT 2
22914: PUSH
22915: LD_INT 3
22917: PUSH
22918: LD_INT 4
22920: PUSH
22921: LD_INT 5
22923: PUSH
22924: LD_INT 6
22926: PUSH
22927: LD_INT 7
22929: PUSH
22930: LD_INT 8
22932: PUSH
22933: LD_INT 9
22935: PUSH
22936: LD_INT 10
22938: PUSH
22939: LD_INT 11
22941: PUSH
22942: LD_INT 12
22944: PUSH
22945: LD_INT 13
22947: PUSH
22948: LD_INT 14
22950: PUSH
22951: LD_INT 15
22953: PUSH
22954: LD_INT 16
22956: PUSH
22957: LD_INT 17
22959: PUSH
22960: LD_INT 18
22962: PUSH
22963: LD_INT 19
22965: PUSH
22966: LD_INT 20
22968: PUSH
22969: LD_INT 21
22971: PUSH
22972: LD_INT 22
22974: PUSH
22975: LD_INT 23
22977: PUSH
22978: LD_INT 24
22980: PUSH
22981: LD_INT 25
22983: PUSH
22984: LD_INT 26
22986: PUSH
22987: LD_INT 27
22989: PUSH
22990: LD_INT 28
22992: PUSH
22993: LD_INT 29
22995: PUSH
22996: LD_INT 30
22998: PUSH
22999: LD_INT 31
23001: PUSH
23002: LD_INT 32
23004: PUSH
23005: LD_INT 33
23007: PUSH
23008: LD_INT 34
23010: PUSH
23011: LD_INT 35
23013: PUSH
23014: LD_INT 36
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 101
23057: PUSH
23058: LD_INT 102
23060: PUSH
23061: LD_INT 103
23063: PUSH
23064: LD_INT 104
23066: PUSH
23067: LD_INT 105
23069: PUSH
23070: LD_INT 106
23072: PUSH
23073: LD_INT 107
23075: PUSH
23076: LD_INT 108
23078: PUSH
23079: LD_INT 109
23081: PUSH
23082: LD_INT 110
23084: PUSH
23085: LD_INT 111
23087: PUSH
23088: LD_INT 112
23090: PUSH
23091: LD_INT 113
23093: PUSH
23094: LD_INT 114
23096: PUSH
23097: LD_INT 115
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: ST_TO_ADDR
23121: GO 23124
23123: POP
// end else
23124: GO 23343
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23126: LD_ADDR_VAR 0 1
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 2
23136: PUSH
23137: LD_INT 3
23139: PUSH
23140: LD_INT 4
23142: PUSH
23143: LD_INT 5
23145: PUSH
23146: LD_INT 6
23148: PUSH
23149: LD_INT 7
23151: PUSH
23152: LD_INT 8
23154: PUSH
23155: LD_INT 9
23157: PUSH
23158: LD_INT 10
23160: PUSH
23161: LD_INT 11
23163: PUSH
23164: LD_INT 12
23166: PUSH
23167: LD_INT 13
23169: PUSH
23170: LD_INT 14
23172: PUSH
23173: LD_INT 15
23175: PUSH
23176: LD_INT 16
23178: PUSH
23179: LD_INT 17
23181: PUSH
23182: LD_INT 18
23184: PUSH
23185: LD_INT 19
23187: PUSH
23188: LD_INT 20
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 22
23196: PUSH
23197: LD_INT 23
23199: PUSH
23200: LD_INT 24
23202: PUSH
23203: LD_INT 25
23205: PUSH
23206: LD_INT 26
23208: PUSH
23209: LD_INT 27
23211: PUSH
23212: LD_INT 28
23214: PUSH
23215: LD_INT 29
23217: PUSH
23218: LD_INT 30
23220: PUSH
23221: LD_INT 31
23223: PUSH
23224: LD_INT 32
23226: PUSH
23227: LD_INT 33
23229: PUSH
23230: LD_INT 34
23232: PUSH
23233: LD_INT 35
23235: PUSH
23236: LD_INT 36
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 101
23279: PUSH
23280: LD_INT 102
23282: PUSH
23283: LD_INT 103
23285: PUSH
23286: LD_INT 104
23288: PUSH
23289: LD_INT 105
23291: PUSH
23292: LD_INT 106
23294: PUSH
23295: LD_INT 107
23297: PUSH
23298: LD_INT 108
23300: PUSH
23301: LD_INT 109
23303: PUSH
23304: LD_INT 110
23306: PUSH
23307: LD_INT 111
23309: PUSH
23310: LD_INT 112
23312: PUSH
23313: LD_INT 113
23315: PUSH
23316: LD_INT 114
23318: PUSH
23319: LD_INT 115
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: ST_TO_ADDR
// if result then
23343: LD_VAR 0 1
23347: IFFALSE 23636
// begin normal :=  ;
23349: LD_ADDR_VAR 0 3
23353: PUSH
23354: LD_STRING 
23356: ST_TO_ADDR
// hardcore :=  ;
23357: LD_ADDR_VAR 0 4
23361: PUSH
23362: LD_STRING 
23364: ST_TO_ADDR
// for i = 1 to normalCounter do
23365: LD_ADDR_VAR 0 5
23369: PUSH
23370: DOUBLE
23371: LD_INT 1
23373: DEC
23374: ST_TO_ADDR
23375: LD_EXP 67
23379: PUSH
23380: FOR_TO
23381: IFFALSE 23482
// begin tmp := 0 ;
23383: LD_ADDR_VAR 0 2
23387: PUSH
23388: LD_STRING 0
23390: ST_TO_ADDR
// if result [ 1 ] then
23391: LD_VAR 0 1
23395: PUSH
23396: LD_INT 1
23398: ARRAY
23399: IFFALSE 23464
// if result [ 1 ] [ 1 ] = i then
23401: LD_VAR 0 1
23405: PUSH
23406: LD_INT 1
23408: ARRAY
23409: PUSH
23410: LD_INT 1
23412: ARRAY
23413: PUSH
23414: LD_VAR 0 5
23418: EQUAL
23419: IFFALSE 23464
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23421: LD_ADDR_VAR 0 1
23425: PUSH
23426: LD_VAR 0 1
23430: PPUSH
23431: LD_INT 1
23433: PPUSH
23434: LD_VAR 0 1
23438: PUSH
23439: LD_INT 1
23441: ARRAY
23442: PPUSH
23443: LD_INT 1
23445: PPUSH
23446: CALL_OW 3
23450: PPUSH
23451: CALL_OW 1
23455: ST_TO_ADDR
// tmp := 1 ;
23456: LD_ADDR_VAR 0 2
23460: PUSH
23461: LD_STRING 1
23463: ST_TO_ADDR
// end ; normal := normal & tmp ;
23464: LD_ADDR_VAR 0 3
23468: PUSH
23469: LD_VAR 0 3
23473: PUSH
23474: LD_VAR 0 2
23478: STR
23479: ST_TO_ADDR
// end ;
23480: GO 23380
23482: POP
23483: POP
// for i = 1 to hardcoreCounter do
23484: LD_ADDR_VAR 0 5
23488: PUSH
23489: DOUBLE
23490: LD_INT 1
23492: DEC
23493: ST_TO_ADDR
23494: LD_EXP 68
23498: PUSH
23499: FOR_TO
23500: IFFALSE 23605
// begin tmp := 0 ;
23502: LD_ADDR_VAR 0 2
23506: PUSH
23507: LD_STRING 0
23509: ST_TO_ADDR
// if result [ 2 ] then
23510: LD_VAR 0 1
23514: PUSH
23515: LD_INT 2
23517: ARRAY
23518: IFFALSE 23587
// if result [ 2 ] [ 1 ] = 100 + i then
23520: LD_VAR 0 1
23524: PUSH
23525: LD_INT 2
23527: ARRAY
23528: PUSH
23529: LD_INT 1
23531: ARRAY
23532: PUSH
23533: LD_INT 100
23535: PUSH
23536: LD_VAR 0 5
23540: PLUS
23541: EQUAL
23542: IFFALSE 23587
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23544: LD_ADDR_VAR 0 1
23548: PUSH
23549: LD_VAR 0 1
23553: PPUSH
23554: LD_INT 2
23556: PPUSH
23557: LD_VAR 0 1
23561: PUSH
23562: LD_INT 2
23564: ARRAY
23565: PPUSH
23566: LD_INT 1
23568: PPUSH
23569: CALL_OW 3
23573: PPUSH
23574: CALL_OW 1
23578: ST_TO_ADDR
// tmp := 1 ;
23579: LD_ADDR_VAR 0 2
23583: PUSH
23584: LD_STRING 1
23586: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23587: LD_ADDR_VAR 0 4
23591: PUSH
23592: LD_VAR 0 4
23596: PUSH
23597: LD_VAR 0 2
23601: STR
23602: ST_TO_ADDR
// end ;
23603: GO 23499
23605: POP
23606: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23607: LD_STRING getStreamItemsFromMission("
23609: PUSH
23610: LD_VAR 0 3
23614: STR
23615: PUSH
23616: LD_STRING ","
23618: STR
23619: PUSH
23620: LD_VAR 0 4
23624: STR
23625: PUSH
23626: LD_STRING ")
23628: STR
23629: PPUSH
23630: CALL_OW 559
// end else
23634: GO 23643
// ToLua ( getStreamItemsFromMission("","") ) ;
23636: LD_STRING getStreamItemsFromMission("","")
23638: PPUSH
23639: CALL_OW 559
// end ;
23643: LD_VAR 0 1
23647: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23648: LD_EXP 66
23652: PUSH
23653: LD_EXP 71
23657: AND
23658: IFFALSE 23782
23660: GO 23662
23662: DISABLE
23663: LD_INT 0
23665: PPUSH
23666: PPUSH
// begin enable ;
23667: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23668: LD_ADDR_VAR 0 2
23672: PUSH
23673: LD_INT 22
23675: PUSH
23676: LD_OWVAR 2
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: LD_INT 34
23690: PUSH
23691: LD_INT 7
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 34
23700: PUSH
23701: LD_INT 45
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 34
23710: PUSH
23711: LD_INT 28
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 34
23720: PUSH
23721: LD_INT 47
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PPUSH
23739: CALL_OW 69
23743: ST_TO_ADDR
// if not tmp then
23744: LD_VAR 0 2
23748: NOT
23749: IFFALSE 23753
// exit ;
23751: GO 23782
// for i in tmp do
23753: LD_ADDR_VAR 0 1
23757: PUSH
23758: LD_VAR 0 2
23762: PUSH
23763: FOR_IN
23764: IFFALSE 23780
// begin SetLives ( i , 0 ) ;
23766: LD_VAR 0 1
23770: PPUSH
23771: LD_INT 0
23773: PPUSH
23774: CALL_OW 234
// end ;
23778: GO 23763
23780: POP
23781: POP
// end ;
23782: PPOPN 2
23784: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23785: LD_EXP 66
23789: PUSH
23790: LD_EXP 72
23794: AND
23795: IFFALSE 23879
23797: GO 23799
23799: DISABLE
23800: LD_INT 0
23802: PPUSH
23803: PPUSH
// begin enable ;
23804: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_OWVAR 2
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 32
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PPUSH
23836: CALL_OW 69
23840: ST_TO_ADDR
// if not tmp then
23841: LD_VAR 0 2
23845: NOT
23846: IFFALSE 23850
// exit ;
23848: GO 23879
// for i in tmp do
23850: LD_ADDR_VAR 0 1
23854: PUSH
23855: LD_VAR 0 2
23859: PUSH
23860: FOR_IN
23861: IFFALSE 23877
// begin SetLives ( i , 0 ) ;
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_INT 0
23870: PPUSH
23871: CALL_OW 234
// end ;
23875: GO 23860
23877: POP
23878: POP
// end ;
23879: PPOPN 2
23881: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23882: LD_EXP 66
23886: PUSH
23887: LD_EXP 69
23891: AND
23892: IFFALSE 23985
23894: GO 23896
23896: DISABLE
23897: LD_INT 0
23899: PPUSH
// begin enable ;
23900: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23901: LD_ADDR_VAR 0 1
23905: PUSH
23906: LD_INT 22
23908: PUSH
23909: LD_OWVAR 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 25
23923: PUSH
23924: LD_INT 5
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 25
23933: PUSH
23934: LD_INT 9
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 25
23943: PUSH
23944: LD_INT 8
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PPUSH
23961: CALL_OW 69
23965: PUSH
23966: FOR_IN
23967: IFFALSE 23983
// begin SetClass ( i , 1 ) ;
23969: LD_VAR 0 1
23973: PPUSH
23974: LD_INT 1
23976: PPUSH
23977: CALL_OW 336
// end ;
23981: GO 23966
23983: POP
23984: POP
// end ;
23985: PPOPN 1
23987: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23988: LD_EXP 66
23992: PUSH
23993: LD_EXP 70
23997: AND
23998: PUSH
23999: LD_OWVAR 65
24003: PUSH
24004: LD_INT 7
24006: LESS
24007: AND
24008: IFFALSE 24022
24010: GO 24012
24012: DISABLE
// begin enable ;
24013: ENABLE
// game_speed := 7 ;
24014: LD_ADDR_OWVAR 65
24018: PUSH
24019: LD_INT 7
24021: ST_TO_ADDR
// end ;
24022: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24023: LD_EXP 66
24027: PUSH
24028: LD_EXP 73
24032: AND
24033: IFFALSE 24235
24035: GO 24037
24037: DISABLE
24038: LD_INT 0
24040: PPUSH
24041: PPUSH
24042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24043: LD_ADDR_VAR 0 3
24047: PUSH
24048: LD_INT 81
24050: PUSH
24051: LD_OWVAR 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 21
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PPUSH
24074: CALL_OW 69
24078: ST_TO_ADDR
// if not tmp then
24079: LD_VAR 0 3
24083: NOT
24084: IFFALSE 24088
// exit ;
24086: GO 24235
// if tmp > 5 then
24088: LD_VAR 0 3
24092: PUSH
24093: LD_INT 5
24095: GREATER
24096: IFFALSE 24108
// k := 5 else
24098: LD_ADDR_VAR 0 2
24102: PUSH
24103: LD_INT 5
24105: ST_TO_ADDR
24106: GO 24118
// k := tmp ;
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: LD_VAR 0 3
24117: ST_TO_ADDR
// for i := 1 to k do
24118: LD_ADDR_VAR 0 1
24122: PUSH
24123: DOUBLE
24124: LD_INT 1
24126: DEC
24127: ST_TO_ADDR
24128: LD_VAR 0 2
24132: PUSH
24133: FOR_TO
24134: IFFALSE 24233
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24136: LD_VAR 0 3
24140: PUSH
24141: LD_VAR 0 1
24145: ARRAY
24146: PPUSH
24147: LD_VAR 0 1
24151: PUSH
24152: LD_INT 4
24154: MOD
24155: PUSH
24156: LD_INT 1
24158: PLUS
24159: PPUSH
24160: CALL_OW 259
24164: PUSH
24165: LD_INT 10
24167: LESS
24168: IFFALSE 24231
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24170: LD_VAR 0 3
24174: PUSH
24175: LD_VAR 0 1
24179: ARRAY
24180: PPUSH
24181: LD_VAR 0 1
24185: PUSH
24186: LD_INT 4
24188: MOD
24189: PUSH
24190: LD_INT 1
24192: PLUS
24193: PPUSH
24194: LD_VAR 0 3
24198: PUSH
24199: LD_VAR 0 1
24203: ARRAY
24204: PPUSH
24205: LD_VAR 0 1
24209: PUSH
24210: LD_INT 4
24212: MOD
24213: PUSH
24214: LD_INT 1
24216: PLUS
24217: PPUSH
24218: CALL_OW 259
24222: PUSH
24223: LD_INT 1
24225: PLUS
24226: PPUSH
24227: CALL_OW 237
24231: GO 24133
24233: POP
24234: POP
// end ;
24235: PPOPN 3
24237: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24238: LD_EXP 66
24242: PUSH
24243: LD_EXP 74
24247: AND
24248: IFFALSE 24268
24250: GO 24252
24252: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24253: LD_INT 4
24255: PPUSH
24256: LD_OWVAR 2
24260: PPUSH
24261: LD_INT 0
24263: PPUSH
24264: CALL_OW 324
24268: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24269: LD_EXP 66
24273: PUSH
24274: LD_EXP 103
24278: AND
24279: IFFALSE 24299
24281: GO 24283
24283: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24284: LD_INT 19
24286: PPUSH
24287: LD_OWVAR 2
24291: PPUSH
24292: LD_INT 0
24294: PPUSH
24295: CALL_OW 324
24299: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24300: LD_EXP 66
24304: PUSH
24305: LD_EXP 75
24309: AND
24310: IFFALSE 24412
24312: GO 24314
24314: DISABLE
24315: LD_INT 0
24317: PPUSH
24318: PPUSH
// begin enable ;
24319: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24320: LD_ADDR_VAR 0 2
24324: PUSH
24325: LD_INT 22
24327: PUSH
24328: LD_OWVAR 2
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: LD_INT 34
24342: PUSH
24343: LD_INT 11
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 34
24352: PUSH
24353: LD_INT 30
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PPUSH
24369: CALL_OW 69
24373: ST_TO_ADDR
// if not tmp then
24374: LD_VAR 0 2
24378: NOT
24379: IFFALSE 24383
// exit ;
24381: GO 24412
// for i in tmp do
24383: LD_ADDR_VAR 0 1
24387: PUSH
24388: LD_VAR 0 2
24392: PUSH
24393: FOR_IN
24394: IFFALSE 24410
// begin SetLives ( i , 0 ) ;
24396: LD_VAR 0 1
24400: PPUSH
24401: LD_INT 0
24403: PPUSH
24404: CALL_OW 234
// end ;
24408: GO 24393
24410: POP
24411: POP
// end ;
24412: PPOPN 2
24414: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24415: LD_EXP 66
24419: PUSH
24420: LD_EXP 76
24424: AND
24425: IFFALSE 24445
24427: GO 24429
24429: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24430: LD_INT 32
24432: PPUSH
24433: LD_OWVAR 2
24437: PPUSH
24438: LD_INT 0
24440: PPUSH
24441: CALL_OW 324
24445: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24446: LD_EXP 66
24450: PUSH
24451: LD_EXP 77
24455: AND
24456: IFFALSE 24637
24458: GO 24460
24460: DISABLE
24461: LD_INT 0
24463: PPUSH
24464: PPUSH
24465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24466: LD_ADDR_VAR 0 2
24470: PUSH
24471: LD_INT 22
24473: PUSH
24474: LD_OWVAR 2
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 33
24485: PUSH
24486: LD_INT 3
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PPUSH
24497: CALL_OW 69
24501: ST_TO_ADDR
// if not tmp then
24502: LD_VAR 0 2
24506: NOT
24507: IFFALSE 24511
// exit ;
24509: GO 24637
// side := 0 ;
24511: LD_ADDR_VAR 0 3
24515: PUSH
24516: LD_INT 0
24518: ST_TO_ADDR
// for i := 1 to 8 do
24519: LD_ADDR_VAR 0 1
24523: PUSH
24524: DOUBLE
24525: LD_INT 1
24527: DEC
24528: ST_TO_ADDR
24529: LD_INT 8
24531: PUSH
24532: FOR_TO
24533: IFFALSE 24581
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24535: LD_OWVAR 2
24539: PUSH
24540: LD_VAR 0 1
24544: NONEQUAL
24545: PUSH
24546: LD_OWVAR 2
24550: PPUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: CALL_OW 81
24560: PUSH
24561: LD_INT 2
24563: EQUAL
24564: AND
24565: IFFALSE 24579
// begin side := i ;
24567: LD_ADDR_VAR 0 3
24571: PUSH
24572: LD_VAR 0 1
24576: ST_TO_ADDR
// break ;
24577: GO 24581
// end ;
24579: GO 24532
24581: POP
24582: POP
// if not side then
24583: LD_VAR 0 3
24587: NOT
24588: IFFALSE 24592
// exit ;
24590: GO 24637
// for i := 1 to tmp do
24592: LD_ADDR_VAR 0 1
24596: PUSH
24597: DOUBLE
24598: LD_INT 1
24600: DEC
24601: ST_TO_ADDR
24602: LD_VAR 0 2
24606: PUSH
24607: FOR_TO
24608: IFFALSE 24635
// if Prob ( 60 ) then
24610: LD_INT 60
24612: PPUSH
24613: CALL_OW 13
24617: IFFALSE 24633
// SetSide ( i , side ) ;
24619: LD_VAR 0 1
24623: PPUSH
24624: LD_VAR 0 3
24628: PPUSH
24629: CALL_OW 235
24633: GO 24607
24635: POP
24636: POP
// end ;
24637: PPOPN 3
24639: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24640: LD_EXP 66
24644: PUSH
24645: LD_EXP 79
24649: AND
24650: IFFALSE 24769
24652: GO 24654
24654: DISABLE
24655: LD_INT 0
24657: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24658: LD_ADDR_VAR 0 1
24662: PUSH
24663: LD_INT 22
24665: PUSH
24666: LD_OWVAR 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 21
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 3
24687: PUSH
24688: LD_INT 23
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: PUSH
24712: FOR_IN
24713: IFFALSE 24767
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24715: LD_VAR 0 1
24719: PPUSH
24720: CALL_OW 257
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: LD_INT 3
24733: PUSH
24734: LD_INT 4
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: IN
24743: IFFALSE 24765
// SetClass ( un , rand ( 1 , 4 ) ) ;
24745: LD_VAR 0 1
24749: PPUSH
24750: LD_INT 1
24752: PPUSH
24753: LD_INT 4
24755: PPUSH
24756: CALL_OW 12
24760: PPUSH
24761: CALL_OW 336
24765: GO 24712
24767: POP
24768: POP
// end ;
24769: PPOPN 1
24771: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24772: LD_EXP 66
24776: PUSH
24777: LD_EXP 78
24781: AND
24782: IFFALSE 24861
24784: GO 24786
24786: DISABLE
24787: LD_INT 0
24789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24790: LD_ADDR_VAR 0 1
24794: PUSH
24795: LD_INT 22
24797: PUSH
24798: LD_OWVAR 2
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 21
24809: PUSH
24810: LD_INT 3
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PPUSH
24821: CALL_OW 69
24825: ST_TO_ADDR
// if not tmp then
24826: LD_VAR 0 1
24830: NOT
24831: IFFALSE 24835
// exit ;
24833: GO 24861
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24835: LD_VAR 0 1
24839: PUSH
24840: LD_INT 1
24842: PPUSH
24843: LD_VAR 0 1
24847: PPUSH
24848: CALL_OW 12
24852: ARRAY
24853: PPUSH
24854: LD_INT 100
24856: PPUSH
24857: CALL_OW 234
// end ;
24861: PPOPN 1
24863: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24864: LD_EXP 66
24868: PUSH
24869: LD_EXP 80
24873: AND
24874: IFFALSE 24972
24876: GO 24878
24878: DISABLE
24879: LD_INT 0
24881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24882: LD_ADDR_VAR 0 1
24886: PUSH
24887: LD_INT 22
24889: PUSH
24890: LD_OWVAR 2
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 21
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PPUSH
24913: CALL_OW 69
24917: ST_TO_ADDR
// if not tmp then
24918: LD_VAR 0 1
24922: NOT
24923: IFFALSE 24927
// exit ;
24925: GO 24972
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24927: LD_VAR 0 1
24931: PUSH
24932: LD_INT 1
24934: PPUSH
24935: LD_VAR 0 1
24939: PPUSH
24940: CALL_OW 12
24944: ARRAY
24945: PPUSH
24946: LD_INT 1
24948: PPUSH
24949: LD_INT 4
24951: PPUSH
24952: CALL_OW 12
24956: PPUSH
24957: LD_INT 3000
24959: PPUSH
24960: LD_INT 9000
24962: PPUSH
24963: CALL_OW 12
24967: PPUSH
24968: CALL_OW 492
// end ;
24972: PPOPN 1
24974: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24975: LD_EXP 66
24979: PUSH
24980: LD_EXP 81
24984: AND
24985: IFFALSE 25005
24987: GO 24989
24989: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24990: LD_INT 1
24992: PPUSH
24993: LD_OWVAR 2
24997: PPUSH
24998: LD_INT 0
25000: PPUSH
25001: CALL_OW 324
25005: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25006: LD_EXP 66
25010: PUSH
25011: LD_EXP 82
25015: AND
25016: IFFALSE 25099
25018: GO 25020
25020: DISABLE
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25025: LD_ADDR_VAR 0 2
25029: PUSH
25030: LD_INT 22
25032: PUSH
25033: LD_OWVAR 2
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 21
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PPUSH
25056: CALL_OW 69
25060: ST_TO_ADDR
// if not tmp then
25061: LD_VAR 0 2
25065: NOT
25066: IFFALSE 25070
// exit ;
25068: GO 25099
// for i in tmp do
25070: LD_ADDR_VAR 0 1
25074: PUSH
25075: LD_VAR 0 2
25079: PUSH
25080: FOR_IN
25081: IFFALSE 25097
// SetBLevel ( i , 10 ) ;
25083: LD_VAR 0 1
25087: PPUSH
25088: LD_INT 10
25090: PPUSH
25091: CALL_OW 241
25095: GO 25080
25097: POP
25098: POP
// end ;
25099: PPOPN 2
25101: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25102: LD_EXP 66
25106: PUSH
25107: LD_EXP 83
25111: AND
25112: IFFALSE 25223
25114: GO 25116
25116: DISABLE
25117: LD_INT 0
25119: PPUSH
25120: PPUSH
25121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_INT 22
25129: PUSH
25130: LD_OWVAR 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 25
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PPUSH
25153: CALL_OW 69
25157: ST_TO_ADDR
// if not tmp then
25158: LD_VAR 0 3
25162: NOT
25163: IFFALSE 25167
// exit ;
25165: GO 25223
// un := tmp [ rand ( 1 , tmp ) ] ;
25167: LD_ADDR_VAR 0 2
25171: PUSH
25172: LD_VAR 0 3
25176: PUSH
25177: LD_INT 1
25179: PPUSH
25180: LD_VAR 0 3
25184: PPUSH
25185: CALL_OW 12
25189: ARRAY
25190: ST_TO_ADDR
// if Crawls ( un ) then
25191: LD_VAR 0 2
25195: PPUSH
25196: CALL_OW 318
25200: IFFALSE 25211
// ComWalk ( un ) ;
25202: LD_VAR 0 2
25206: PPUSH
25207: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25211: LD_VAR 0 2
25215: PPUSH
25216: LD_INT 5
25218: PPUSH
25219: CALL_OW 336
// end ;
25223: PPOPN 3
25225: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25226: LD_EXP 66
25230: PUSH
25231: LD_EXP 84
25235: AND
25236: PUSH
25237: LD_OWVAR 67
25241: PUSH
25242: LD_INT 3
25244: LESS
25245: AND
25246: IFFALSE 25265
25248: GO 25250
25250: DISABLE
// Difficulty := Difficulty + 1 ;
25251: LD_ADDR_OWVAR 67
25255: PUSH
25256: LD_OWVAR 67
25260: PUSH
25261: LD_INT 1
25263: PLUS
25264: ST_TO_ADDR
25265: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25266: LD_EXP 66
25270: PUSH
25271: LD_EXP 85
25275: AND
25276: IFFALSE 25379
25278: GO 25280
25280: DISABLE
25281: LD_INT 0
25283: PPUSH
// begin for i := 1 to 5 do
25284: LD_ADDR_VAR 0 1
25288: PUSH
25289: DOUBLE
25290: LD_INT 1
25292: DEC
25293: ST_TO_ADDR
25294: LD_INT 5
25296: PUSH
25297: FOR_TO
25298: IFFALSE 25377
// begin uc_nation := nation_nature ;
25300: LD_ADDR_OWVAR 21
25304: PUSH
25305: LD_INT 0
25307: ST_TO_ADDR
// uc_side := 0 ;
25308: LD_ADDR_OWVAR 20
25312: PUSH
25313: LD_INT 0
25315: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25316: LD_ADDR_OWVAR 29
25320: PUSH
25321: LD_INT 12
25323: PUSH
25324: LD_INT 12
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: ST_TO_ADDR
// hc_agressivity := 20 ;
25331: LD_ADDR_OWVAR 35
25335: PUSH
25336: LD_INT 20
25338: ST_TO_ADDR
// hc_class := class_tiger ;
25339: LD_ADDR_OWVAR 28
25343: PUSH
25344: LD_INT 14
25346: ST_TO_ADDR
// hc_gallery :=  ;
25347: LD_ADDR_OWVAR 33
25351: PUSH
25352: LD_STRING 
25354: ST_TO_ADDR
// hc_name :=  ;
25355: LD_ADDR_OWVAR 26
25359: PUSH
25360: LD_STRING 
25362: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25363: CALL_OW 44
25367: PPUSH
25368: LD_INT 0
25370: PPUSH
25371: CALL_OW 51
// end ;
25375: GO 25297
25377: POP
25378: POP
// end ;
25379: PPOPN 1
25381: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25382: LD_EXP 66
25386: PUSH
25387: LD_EXP 86
25391: AND
25392: IFFALSE 25401
25394: GO 25396
25396: DISABLE
// StreamSibBomb ;
25397: CALL 25402 0 0
25401: END
// export function StreamSibBomb ; var i , x , y ; begin
25402: LD_INT 0
25404: PPUSH
25405: PPUSH
25406: PPUSH
25407: PPUSH
// result := false ;
25408: LD_ADDR_VAR 0 1
25412: PUSH
25413: LD_INT 0
25415: ST_TO_ADDR
// for i := 1 to 16 do
25416: LD_ADDR_VAR 0 2
25420: PUSH
25421: DOUBLE
25422: LD_INT 1
25424: DEC
25425: ST_TO_ADDR
25426: LD_INT 16
25428: PUSH
25429: FOR_TO
25430: IFFALSE 25629
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25432: LD_ADDR_VAR 0 3
25436: PUSH
25437: LD_INT 10
25439: PUSH
25440: LD_INT 20
25442: PUSH
25443: LD_INT 30
25445: PUSH
25446: LD_INT 40
25448: PUSH
25449: LD_INT 50
25451: PUSH
25452: LD_INT 60
25454: PUSH
25455: LD_INT 70
25457: PUSH
25458: LD_INT 80
25460: PUSH
25461: LD_INT 90
25463: PUSH
25464: LD_INT 100
25466: PUSH
25467: LD_INT 110
25469: PUSH
25470: LD_INT 120
25472: PUSH
25473: LD_INT 130
25475: PUSH
25476: LD_INT 140
25478: PUSH
25479: LD_INT 150
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: PPUSH
25502: LD_INT 15
25504: PPUSH
25505: CALL_OW 12
25509: ARRAY
25510: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25511: LD_ADDR_VAR 0 4
25515: PUSH
25516: LD_INT 10
25518: PUSH
25519: LD_INT 20
25521: PUSH
25522: LD_INT 30
25524: PUSH
25525: LD_INT 40
25527: PUSH
25528: LD_INT 50
25530: PUSH
25531: LD_INT 60
25533: PUSH
25534: LD_INT 70
25536: PUSH
25537: LD_INT 80
25539: PUSH
25540: LD_INT 90
25542: PUSH
25543: LD_INT 100
25545: PUSH
25546: LD_INT 110
25548: PUSH
25549: LD_INT 120
25551: PUSH
25552: LD_INT 130
25554: PUSH
25555: LD_INT 140
25557: PUSH
25558: LD_INT 150
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 1
25580: PPUSH
25581: LD_INT 15
25583: PPUSH
25584: CALL_OW 12
25588: ARRAY
25589: ST_TO_ADDR
// if ValidHex ( x , y ) then
25590: LD_VAR 0 3
25594: PPUSH
25595: LD_VAR 0 4
25599: PPUSH
25600: CALL_OW 488
25604: IFFALSE 25627
// begin result := [ x , y ] ;
25606: LD_ADDR_VAR 0 1
25610: PUSH
25611: LD_VAR 0 3
25615: PUSH
25616: LD_VAR 0 4
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: ST_TO_ADDR
// break ;
25625: GO 25629
// end ; end ;
25627: GO 25429
25629: POP
25630: POP
// if result then
25631: LD_VAR 0 1
25635: IFFALSE 25695
// begin ToLua ( playSibBomb() ) ;
25637: LD_STRING playSibBomb()
25639: PPUSH
25640: CALL_OW 559
// wait ( 0 0$14 ) ;
25644: LD_INT 490
25646: PPUSH
25647: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25651: LD_VAR 0 1
25655: PUSH
25656: LD_INT 1
25658: ARRAY
25659: PPUSH
25660: LD_VAR 0 1
25664: PUSH
25665: LD_INT 2
25667: ARRAY
25668: PPUSH
25669: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25673: LD_VAR 0 1
25677: PUSH
25678: LD_INT 1
25680: ARRAY
25681: PPUSH
25682: LD_VAR 0 1
25686: PUSH
25687: LD_INT 2
25689: ARRAY
25690: PPUSH
25691: CALL_OW 429
// end ; end ;
25695: LD_VAR 0 1
25699: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25700: LD_EXP 66
25704: PUSH
25705: LD_EXP 88
25709: AND
25710: IFFALSE 25722
25712: GO 25714
25714: DISABLE
// YouLost (  ) ;
25715: LD_STRING 
25717: PPUSH
25718: CALL_OW 104
25722: END
// every 0 0$1 trigger StreamModeActive and sFog do
25723: LD_EXP 66
25727: PUSH
25728: LD_EXP 87
25732: AND
25733: IFFALSE 25747
25735: GO 25737
25737: DISABLE
// FogOff ( your_side ) ;
25738: LD_OWVAR 2
25742: PPUSH
25743: CALL_OW 344
25747: END
// every 0 0$1 trigger StreamModeActive and sSun do
25748: LD_EXP 66
25752: PUSH
25753: LD_EXP 89
25757: AND
25758: IFFALSE 25786
25760: GO 25762
25762: DISABLE
// begin solar_recharge_percent := 0 ;
25763: LD_ADDR_OWVAR 79
25767: PUSH
25768: LD_INT 0
25770: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25771: LD_INT 10500
25773: PPUSH
25774: CALL_OW 67
// solar_recharge_percent := 100 ;
25778: LD_ADDR_OWVAR 79
25782: PUSH
25783: LD_INT 100
25785: ST_TO_ADDR
// end ;
25786: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25787: LD_EXP 66
25791: PUSH
25792: LD_EXP 90
25796: AND
25797: IFFALSE 26036
25799: GO 25801
25801: DISABLE
25802: LD_INT 0
25804: PPUSH
25805: PPUSH
25806: PPUSH
// begin tmp := [ ] ;
25807: LD_ADDR_VAR 0 3
25811: PUSH
25812: EMPTY
25813: ST_TO_ADDR
// for i := 1 to 6 do
25814: LD_ADDR_VAR 0 1
25818: PUSH
25819: DOUBLE
25820: LD_INT 1
25822: DEC
25823: ST_TO_ADDR
25824: LD_INT 6
25826: PUSH
25827: FOR_TO
25828: IFFALSE 25933
// begin uc_nation := nation_nature ;
25830: LD_ADDR_OWVAR 21
25834: PUSH
25835: LD_INT 0
25837: ST_TO_ADDR
// uc_side := 0 ;
25838: LD_ADDR_OWVAR 20
25842: PUSH
25843: LD_INT 0
25845: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25846: LD_ADDR_OWVAR 29
25850: PUSH
25851: LD_INT 12
25853: PUSH
25854: LD_INT 12
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: ST_TO_ADDR
// hc_agressivity := 20 ;
25861: LD_ADDR_OWVAR 35
25865: PUSH
25866: LD_INT 20
25868: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25869: LD_ADDR_OWVAR 28
25873: PUSH
25874: LD_INT 17
25876: ST_TO_ADDR
// hc_gallery :=  ;
25877: LD_ADDR_OWVAR 33
25881: PUSH
25882: LD_STRING 
25884: ST_TO_ADDR
// hc_name :=  ;
25885: LD_ADDR_OWVAR 26
25889: PUSH
25890: LD_STRING 
25892: ST_TO_ADDR
// un := CreateHuman ;
25893: LD_ADDR_VAR 0 2
25897: PUSH
25898: CALL_OW 44
25902: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25903: LD_VAR 0 2
25907: PPUSH
25908: LD_INT 1
25910: PPUSH
25911: CALL_OW 51
// tmp := tmp ^ un ;
25915: LD_ADDR_VAR 0 3
25919: PUSH
25920: LD_VAR 0 3
25924: PUSH
25925: LD_VAR 0 2
25929: ADD
25930: ST_TO_ADDR
// end ;
25931: GO 25827
25933: POP
25934: POP
// repeat wait ( 0 0$1 ) ;
25935: LD_INT 35
25937: PPUSH
25938: CALL_OW 67
// for un in tmp do
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_VAR 0 3
25951: PUSH
25952: FOR_IN
25953: IFFALSE 26027
// begin if IsDead ( un ) then
25955: LD_VAR 0 2
25959: PPUSH
25960: CALL_OW 301
25964: IFFALSE 25984
// begin tmp := tmp diff un ;
25966: LD_ADDR_VAR 0 3
25970: PUSH
25971: LD_VAR 0 3
25975: PUSH
25976: LD_VAR 0 2
25980: DIFF
25981: ST_TO_ADDR
// continue ;
25982: GO 25952
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25984: LD_VAR 0 2
25988: PPUSH
25989: LD_INT 3
25991: PUSH
25992: LD_INT 22
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PPUSH
26006: CALL_OW 69
26010: PPUSH
26011: LD_VAR 0 2
26015: PPUSH
26016: CALL_OW 74
26020: PPUSH
26021: CALL_OW 115
// end ;
26025: GO 25952
26027: POP
26028: POP
// until not tmp ;
26029: LD_VAR 0 3
26033: NOT
26034: IFFALSE 25935
// end ;
26036: PPOPN 3
26038: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26039: LD_EXP 66
26043: PUSH
26044: LD_EXP 91
26048: AND
26049: IFFALSE 26103
26051: GO 26053
26053: DISABLE
// begin ToLua ( displayTroll(); ) ;
26054: LD_STRING displayTroll();
26056: PPUSH
26057: CALL_OW 559
// wait ( 3 3$00 ) ;
26061: LD_INT 6300
26063: PPUSH
26064: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26068: LD_STRING hideTroll();
26070: PPUSH
26071: CALL_OW 559
// wait ( 1 1$00 ) ;
26075: LD_INT 2100
26077: PPUSH
26078: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26082: LD_STRING displayTroll();
26084: PPUSH
26085: CALL_OW 559
// wait ( 1 1$00 ) ;
26089: LD_INT 2100
26091: PPUSH
26092: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26096: LD_STRING hideTroll();
26098: PPUSH
26099: CALL_OW 559
// end ;
26103: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26104: LD_EXP 66
26108: PUSH
26109: LD_EXP 92
26113: AND
26114: IFFALSE 26177
26116: GO 26118
26118: DISABLE
26119: LD_INT 0
26121: PPUSH
// begin p := 0 ;
26122: LD_ADDR_VAR 0 1
26126: PUSH
26127: LD_INT 0
26129: ST_TO_ADDR
// repeat game_speed := 1 ;
26130: LD_ADDR_OWVAR 65
26134: PUSH
26135: LD_INT 1
26137: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26138: LD_INT 35
26140: PPUSH
26141: CALL_OW 67
// p := p + 1 ;
26145: LD_ADDR_VAR 0 1
26149: PUSH
26150: LD_VAR 0 1
26154: PUSH
26155: LD_INT 1
26157: PLUS
26158: ST_TO_ADDR
// until p >= 60 ;
26159: LD_VAR 0 1
26163: PUSH
26164: LD_INT 60
26166: GREATEREQUAL
26167: IFFALSE 26130
// game_speed := 4 ;
26169: LD_ADDR_OWVAR 65
26173: PUSH
26174: LD_INT 4
26176: ST_TO_ADDR
// end ;
26177: PPOPN 1
26179: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26180: LD_EXP 66
26184: PUSH
26185: LD_EXP 93
26189: AND
26190: IFFALSE 26336
26192: GO 26194
26194: DISABLE
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26199: LD_ADDR_VAR 0 1
26203: PUSH
26204: LD_INT 22
26206: PUSH
26207: LD_OWVAR 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: LD_INT 30
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 30
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PPUSH
26248: CALL_OW 69
26252: ST_TO_ADDR
// if not depot then
26253: LD_VAR 0 1
26257: NOT
26258: IFFALSE 26262
// exit ;
26260: GO 26336
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26262: LD_ADDR_VAR 0 2
26266: PUSH
26267: LD_VAR 0 1
26271: PUSH
26272: LD_INT 1
26274: PPUSH
26275: LD_VAR 0 1
26279: PPUSH
26280: CALL_OW 12
26284: ARRAY
26285: PPUSH
26286: CALL_OW 274
26290: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26291: LD_VAR 0 2
26295: PPUSH
26296: LD_INT 1
26298: PPUSH
26299: LD_INT 0
26301: PPUSH
26302: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26306: LD_VAR 0 2
26310: PPUSH
26311: LD_INT 2
26313: PPUSH
26314: LD_INT 0
26316: PPUSH
26317: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26321: LD_VAR 0 2
26325: PPUSH
26326: LD_INT 3
26328: PPUSH
26329: LD_INT 0
26331: PPUSH
26332: CALL_OW 277
// end ;
26336: PPOPN 2
26338: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26339: LD_EXP 66
26343: PUSH
26344: LD_EXP 94
26348: AND
26349: IFFALSE 26446
26351: GO 26353
26353: DISABLE
26354: LD_INT 0
26356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26357: LD_ADDR_VAR 0 1
26361: PUSH
26362: LD_INT 22
26364: PUSH
26365: LD_OWVAR 2
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 21
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: LD_INT 23
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: LIST
26405: PPUSH
26406: CALL_OW 69
26410: ST_TO_ADDR
// if not tmp then
26411: LD_VAR 0 1
26415: NOT
26416: IFFALSE 26420
// exit ;
26418: GO 26446
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26420: LD_VAR 0 1
26424: PUSH
26425: LD_INT 1
26427: PPUSH
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL_OW 12
26437: ARRAY
26438: PPUSH
26439: LD_INT 200
26441: PPUSH
26442: CALL_OW 234
// end ;
26446: PPOPN 1
26448: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26449: LD_EXP 66
26453: PUSH
26454: LD_EXP 95
26458: AND
26459: IFFALSE 26538
26461: GO 26463
26463: DISABLE
26464: LD_INT 0
26466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26467: LD_ADDR_VAR 0 1
26471: PUSH
26472: LD_INT 22
26474: PUSH
26475: LD_OWVAR 2
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 21
26486: PUSH
26487: LD_INT 2
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PPUSH
26498: CALL_OW 69
26502: ST_TO_ADDR
// if not tmp then
26503: LD_VAR 0 1
26507: NOT
26508: IFFALSE 26512
// exit ;
26510: GO 26538
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26512: LD_VAR 0 1
26516: PUSH
26517: LD_INT 1
26519: PPUSH
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 12
26529: ARRAY
26530: PPUSH
26531: LD_INT 60
26533: PPUSH
26534: CALL_OW 234
// end ;
26538: PPOPN 1
26540: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26541: LD_EXP 66
26545: PUSH
26546: LD_EXP 96
26550: AND
26551: IFFALSE 26650
26553: GO 26555
26555: DISABLE
26556: LD_INT 0
26558: PPUSH
26559: PPUSH
// begin enable ;
26560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26561: LD_ADDR_VAR 0 1
26565: PUSH
26566: LD_INT 22
26568: PUSH
26569: LD_OWVAR 2
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 61
26580: PUSH
26581: EMPTY
26582: LIST
26583: PUSH
26584: LD_INT 33
26586: PUSH
26587: LD_INT 2
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: LIST
26598: PPUSH
26599: CALL_OW 69
26603: ST_TO_ADDR
// if not tmp then
26604: LD_VAR 0 1
26608: NOT
26609: IFFALSE 26613
// exit ;
26611: GO 26650
// for i in tmp do
26613: LD_ADDR_VAR 0 2
26617: PUSH
26618: LD_VAR 0 1
26622: PUSH
26623: FOR_IN
26624: IFFALSE 26648
// if IsControledBy ( i ) then
26626: LD_VAR 0 2
26630: PPUSH
26631: CALL_OW 312
26635: IFFALSE 26646
// ComUnlink ( i ) ;
26637: LD_VAR 0 2
26641: PPUSH
26642: CALL_OW 136
26646: GO 26623
26648: POP
26649: POP
// end ;
26650: PPOPN 2
26652: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26653: LD_EXP 66
26657: PUSH
26658: LD_EXP 97
26662: AND
26663: IFFALSE 26803
26665: GO 26667
26667: DISABLE
26668: LD_INT 0
26670: PPUSH
26671: PPUSH
// begin ToLua ( displayPowell(); ) ;
26672: LD_STRING displayPowell();
26674: PPUSH
26675: CALL_OW 559
// uc_side := 0 ;
26679: LD_ADDR_OWVAR 20
26683: PUSH
26684: LD_INT 0
26686: ST_TO_ADDR
// uc_nation := 2 ;
26687: LD_ADDR_OWVAR 21
26691: PUSH
26692: LD_INT 2
26694: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26695: LD_ADDR_OWVAR 37
26699: PUSH
26700: LD_INT 14
26702: ST_TO_ADDR
// vc_engine := engine_siberite ;
26703: LD_ADDR_OWVAR 39
26707: PUSH
26708: LD_INT 3
26710: ST_TO_ADDR
// vc_control := control_apeman ;
26711: LD_ADDR_OWVAR 38
26715: PUSH
26716: LD_INT 5
26718: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26719: LD_ADDR_OWVAR 40
26723: PUSH
26724: LD_INT 29
26726: ST_TO_ADDR
// un := CreateVehicle ;
26727: LD_ADDR_VAR 0 2
26731: PUSH
26732: CALL_OW 45
26736: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26737: LD_VAR 0 2
26741: PPUSH
26742: LD_INT 1
26744: PPUSH
26745: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26749: LD_INT 35
26751: PPUSH
26752: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26756: LD_VAR 0 2
26760: PPUSH
26761: LD_INT 22
26763: PUSH
26764: LD_OWVAR 2
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PPUSH
26773: CALL_OW 69
26777: PPUSH
26778: LD_VAR 0 2
26782: PPUSH
26783: CALL_OW 74
26787: PPUSH
26788: CALL_OW 115
// until IsDead ( un ) ;
26792: LD_VAR 0 2
26796: PPUSH
26797: CALL_OW 301
26801: IFFALSE 26749
// end ;
26803: PPOPN 2
26805: END
// every 0 0$1 trigger StreamModeActive and sStu do
26806: LD_EXP 66
26810: PUSH
26811: LD_EXP 105
26815: AND
26816: IFFALSE 26832
26818: GO 26820
26820: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26821: LD_STRING displayStucuk();
26823: PPUSH
26824: CALL_OW 559
// ResetFog ;
26828: CALL_OW 335
// end ;
26832: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26833: LD_EXP 66
26837: PUSH
26838: LD_EXP 98
26842: AND
26843: IFFALSE 26984
26845: GO 26847
26847: DISABLE
26848: LD_INT 0
26850: PPUSH
26851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26852: LD_ADDR_VAR 0 2
26856: PUSH
26857: LD_INT 22
26859: PUSH
26860: LD_OWVAR 2
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 21
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PPUSH
26883: CALL_OW 69
26887: ST_TO_ADDR
// if not tmp then
26888: LD_VAR 0 2
26892: NOT
26893: IFFALSE 26897
// exit ;
26895: GO 26984
// un := tmp [ rand ( 1 , tmp ) ] ;
26897: LD_ADDR_VAR 0 1
26901: PUSH
26902: LD_VAR 0 2
26906: PUSH
26907: LD_INT 1
26909: PPUSH
26910: LD_VAR 0 2
26914: PPUSH
26915: CALL_OW 12
26919: ARRAY
26920: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26921: LD_VAR 0 1
26925: PPUSH
26926: LD_INT 0
26928: PPUSH
26929: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26933: LD_VAR 0 1
26937: PPUSH
26938: LD_OWVAR 3
26942: PUSH
26943: LD_VAR 0 1
26947: DIFF
26948: PPUSH
26949: LD_VAR 0 1
26953: PPUSH
26954: CALL_OW 74
26958: PPUSH
26959: CALL_OW 115
// wait ( 0 0$20 ) ;
26963: LD_INT 700
26965: PPUSH
26966: CALL_OW 67
// SetSide ( un , your_side ) ;
26970: LD_VAR 0 1
26974: PPUSH
26975: LD_OWVAR 2
26979: PPUSH
26980: CALL_OW 235
// end ;
26984: PPOPN 2
26986: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26987: LD_EXP 66
26991: PUSH
26992: LD_EXP 99
26996: AND
26997: IFFALSE 27103
26999: GO 27001
27001: DISABLE
27002: LD_INT 0
27004: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27005: LD_ADDR_VAR 0 1
27009: PUSH
27010: LD_INT 22
27012: PUSH
27013: LD_OWVAR 2
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: LD_INT 30
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 30
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PPUSH
27054: CALL_OW 69
27058: ST_TO_ADDR
// if not depot then
27059: LD_VAR 0 1
27063: NOT
27064: IFFALSE 27068
// exit ;
27066: GO 27103
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27068: LD_VAR 0 1
27072: PUSH
27073: LD_INT 1
27075: ARRAY
27076: PPUSH
27077: CALL_OW 250
27081: PPUSH
27082: LD_VAR 0 1
27086: PUSH
27087: LD_INT 1
27089: ARRAY
27090: PPUSH
27091: CALL_OW 251
27095: PPUSH
27096: LD_INT 70
27098: PPUSH
27099: CALL_OW 495
// end ;
27103: PPOPN 1
27105: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27106: LD_EXP 66
27110: PUSH
27111: LD_EXP 100
27115: AND
27116: IFFALSE 27327
27118: GO 27120
27120: DISABLE
27121: LD_INT 0
27123: PPUSH
27124: PPUSH
27125: PPUSH
27126: PPUSH
27127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27128: LD_ADDR_VAR 0 5
27132: PUSH
27133: LD_INT 22
27135: PUSH
27136: LD_OWVAR 2
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 21
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PPUSH
27159: CALL_OW 69
27163: ST_TO_ADDR
// if not tmp then
27164: LD_VAR 0 5
27168: NOT
27169: IFFALSE 27173
// exit ;
27171: GO 27327
// for i in tmp do
27173: LD_ADDR_VAR 0 1
27177: PUSH
27178: LD_VAR 0 5
27182: PUSH
27183: FOR_IN
27184: IFFALSE 27325
// begin d := rand ( 0 , 5 ) ;
27186: LD_ADDR_VAR 0 4
27190: PUSH
27191: LD_INT 0
27193: PPUSH
27194: LD_INT 5
27196: PPUSH
27197: CALL_OW 12
27201: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27202: LD_ADDR_VAR 0 2
27206: PUSH
27207: LD_VAR 0 1
27211: PPUSH
27212: CALL_OW 250
27216: PPUSH
27217: LD_VAR 0 4
27221: PPUSH
27222: LD_INT 3
27224: PPUSH
27225: LD_INT 12
27227: PPUSH
27228: CALL_OW 12
27232: PPUSH
27233: CALL_OW 272
27237: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27238: LD_ADDR_VAR 0 3
27242: PUSH
27243: LD_VAR 0 1
27247: PPUSH
27248: CALL_OW 251
27252: PPUSH
27253: LD_VAR 0 4
27257: PPUSH
27258: LD_INT 3
27260: PPUSH
27261: LD_INT 12
27263: PPUSH
27264: CALL_OW 12
27268: PPUSH
27269: CALL_OW 273
27273: ST_TO_ADDR
// if ValidHex ( x , y ) then
27274: LD_VAR 0 2
27278: PPUSH
27279: LD_VAR 0 3
27283: PPUSH
27284: CALL_OW 488
27288: IFFALSE 27323
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27290: LD_VAR 0 1
27294: PPUSH
27295: LD_VAR 0 2
27299: PPUSH
27300: LD_VAR 0 3
27304: PPUSH
27305: LD_INT 3
27307: PPUSH
27308: LD_INT 6
27310: PPUSH
27311: CALL_OW 12
27315: PPUSH
27316: LD_INT 1
27318: PPUSH
27319: CALL_OW 483
// end ;
27323: GO 27183
27325: POP
27326: POP
// end ;
27327: PPOPN 5
27329: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27330: LD_EXP 66
27334: PUSH
27335: LD_EXP 101
27339: AND
27340: IFFALSE 27434
27342: GO 27344
27344: DISABLE
27345: LD_INT 0
27347: PPUSH
27348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27349: LD_ADDR_VAR 0 2
27353: PUSH
27354: LD_INT 22
27356: PUSH
27357: LD_OWVAR 2
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 32
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 21
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: PPUSH
27391: CALL_OW 69
27395: ST_TO_ADDR
// if not tmp then
27396: LD_VAR 0 2
27400: NOT
27401: IFFALSE 27405
// exit ;
27403: GO 27434
// for i in tmp do
27405: LD_ADDR_VAR 0 1
27409: PUSH
27410: LD_VAR 0 2
27414: PUSH
27415: FOR_IN
27416: IFFALSE 27432
// SetFuel ( i , 0 ) ;
27418: LD_VAR 0 1
27422: PPUSH
27423: LD_INT 0
27425: PPUSH
27426: CALL_OW 240
27430: GO 27415
27432: POP
27433: POP
// end ;
27434: PPOPN 2
27436: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27437: LD_EXP 66
27441: PUSH
27442: LD_EXP 102
27446: AND
27447: IFFALSE 27513
27449: GO 27451
27451: DISABLE
27452: LD_INT 0
27454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27455: LD_ADDR_VAR 0 1
27459: PUSH
27460: LD_INT 22
27462: PUSH
27463: LD_OWVAR 2
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 30
27474: PUSH
27475: LD_INT 29
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PPUSH
27486: CALL_OW 69
27490: ST_TO_ADDR
// if not tmp then
27491: LD_VAR 0 1
27495: NOT
27496: IFFALSE 27500
// exit ;
27498: GO 27513
// DestroyUnit ( tmp [ 1 ] ) ;
27500: LD_VAR 0 1
27504: PUSH
27505: LD_INT 1
27507: ARRAY
27508: PPUSH
27509: CALL_OW 65
// end ;
27513: PPOPN 1
27515: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27516: LD_EXP 66
27520: PUSH
27521: LD_EXP 104
27525: AND
27526: IFFALSE 27655
27528: GO 27530
27530: DISABLE
27531: LD_INT 0
27533: PPUSH
// begin uc_side := 0 ;
27534: LD_ADDR_OWVAR 20
27538: PUSH
27539: LD_INT 0
27541: ST_TO_ADDR
// uc_nation := nation_arabian ;
27542: LD_ADDR_OWVAR 21
27546: PUSH
27547: LD_INT 2
27549: ST_TO_ADDR
// hc_gallery :=  ;
27550: LD_ADDR_OWVAR 33
27554: PUSH
27555: LD_STRING 
27557: ST_TO_ADDR
// hc_name :=  ;
27558: LD_ADDR_OWVAR 26
27562: PUSH
27563: LD_STRING 
27565: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27566: LD_INT 1
27568: PPUSH
27569: LD_INT 11
27571: PPUSH
27572: LD_INT 10
27574: PPUSH
27575: CALL_OW 380
// un := CreateHuman ;
27579: LD_ADDR_VAR 0 1
27583: PUSH
27584: CALL_OW 44
27588: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27589: LD_VAR 0 1
27593: PPUSH
27594: LD_INT 1
27596: PPUSH
27597: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27601: LD_INT 35
27603: PPUSH
27604: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27608: LD_VAR 0 1
27612: PPUSH
27613: LD_INT 22
27615: PUSH
27616: LD_OWVAR 2
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PPUSH
27625: CALL_OW 69
27629: PPUSH
27630: LD_VAR 0 1
27634: PPUSH
27635: CALL_OW 74
27639: PPUSH
27640: CALL_OW 115
// until IsDead ( un ) ;
27644: LD_VAR 0 1
27648: PPUSH
27649: CALL_OW 301
27653: IFFALSE 27601
// end ;
27655: PPOPN 1
27657: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27658: LD_EXP 66
27662: PUSH
27663: LD_EXP 106
27667: AND
27668: IFFALSE 27680
27670: GO 27672
27672: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27673: LD_STRING earthquake(getX(game), 0, 32)
27675: PPUSH
27676: CALL_OW 559
27680: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27681: LD_EXP 66
27685: PUSH
27686: LD_EXP 107
27690: AND
27691: IFFALSE 27782
27693: GO 27695
27695: DISABLE
27696: LD_INT 0
27698: PPUSH
// begin enable ;
27699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27700: LD_ADDR_VAR 0 1
27704: PUSH
27705: LD_INT 22
27707: PUSH
27708: LD_OWVAR 2
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 21
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 33
27729: PUSH
27730: LD_INT 3
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: PPUSH
27742: CALL_OW 69
27746: ST_TO_ADDR
// if not tmp then
27747: LD_VAR 0 1
27751: NOT
27752: IFFALSE 27756
// exit ;
27754: GO 27782
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27756: LD_VAR 0 1
27760: PUSH
27761: LD_INT 1
27763: PPUSH
27764: LD_VAR 0 1
27768: PPUSH
27769: CALL_OW 12
27773: ARRAY
27774: PPUSH
27775: LD_INT 1
27777: PPUSH
27778: CALL_OW 234
// end ;
27782: PPOPN 1
27784: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27785: LD_EXP 66
27789: PUSH
27790: LD_EXP 108
27794: AND
27795: IFFALSE 27936
27797: GO 27799
27799: DISABLE
27800: LD_INT 0
27802: PPUSH
27803: PPUSH
27804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27805: LD_ADDR_VAR 0 3
27809: PUSH
27810: LD_INT 22
27812: PUSH
27813: LD_OWVAR 2
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 25
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PPUSH
27836: CALL_OW 69
27840: ST_TO_ADDR
// if not tmp then
27841: LD_VAR 0 3
27845: NOT
27846: IFFALSE 27850
// exit ;
27848: GO 27936
// un := tmp [ rand ( 1 , tmp ) ] ;
27850: LD_ADDR_VAR 0 2
27854: PUSH
27855: LD_VAR 0 3
27859: PUSH
27860: LD_INT 1
27862: PPUSH
27863: LD_VAR 0 3
27867: PPUSH
27868: CALL_OW 12
27872: ARRAY
27873: ST_TO_ADDR
// if Crawls ( un ) then
27874: LD_VAR 0 2
27878: PPUSH
27879: CALL_OW 318
27883: IFFALSE 27894
// ComWalk ( un ) ;
27885: LD_VAR 0 2
27889: PPUSH
27890: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27894: LD_VAR 0 2
27898: PPUSH
27899: LD_INT 9
27901: PPUSH
27902: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27906: LD_INT 28
27908: PPUSH
27909: LD_OWVAR 2
27913: PPUSH
27914: LD_INT 2
27916: PPUSH
27917: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27921: LD_INT 29
27923: PPUSH
27924: LD_OWVAR 2
27928: PPUSH
27929: LD_INT 2
27931: PPUSH
27932: CALL_OW 322
// end ;
27936: PPOPN 3
27938: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27939: LD_EXP 66
27943: PUSH
27944: LD_EXP 109
27948: AND
27949: IFFALSE 28060
27951: GO 27953
27953: DISABLE
27954: LD_INT 0
27956: PPUSH
27957: PPUSH
27958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27959: LD_ADDR_VAR 0 3
27963: PUSH
27964: LD_INT 22
27966: PUSH
27967: LD_OWVAR 2
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 25
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PPUSH
27990: CALL_OW 69
27994: ST_TO_ADDR
// if not tmp then
27995: LD_VAR 0 3
27999: NOT
28000: IFFALSE 28004
// exit ;
28002: GO 28060
// un := tmp [ rand ( 1 , tmp ) ] ;
28004: LD_ADDR_VAR 0 2
28008: PUSH
28009: LD_VAR 0 3
28013: PUSH
28014: LD_INT 1
28016: PPUSH
28017: LD_VAR 0 3
28021: PPUSH
28022: CALL_OW 12
28026: ARRAY
28027: ST_TO_ADDR
// if Crawls ( un ) then
28028: LD_VAR 0 2
28032: PPUSH
28033: CALL_OW 318
28037: IFFALSE 28048
// ComWalk ( un ) ;
28039: LD_VAR 0 2
28043: PPUSH
28044: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28048: LD_VAR 0 2
28052: PPUSH
28053: LD_INT 8
28055: PPUSH
28056: CALL_OW 336
// end ;
28060: PPOPN 3
28062: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28063: LD_EXP 66
28067: PUSH
28068: LD_EXP 110
28072: AND
28073: IFFALSE 28217
28075: GO 28077
28077: DISABLE
28078: LD_INT 0
28080: PPUSH
28081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28082: LD_ADDR_VAR 0 2
28086: PUSH
28087: LD_INT 22
28089: PUSH
28090: LD_OWVAR 2
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 21
28101: PUSH
28102: LD_INT 2
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 2
28111: PUSH
28112: LD_INT 34
28114: PUSH
28115: LD_INT 12
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 34
28124: PUSH
28125: LD_INT 51
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 34
28134: PUSH
28135: LD_INT 32
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: LIST
28152: PPUSH
28153: CALL_OW 69
28157: ST_TO_ADDR
// if not tmp then
28158: LD_VAR 0 2
28162: NOT
28163: IFFALSE 28167
// exit ;
28165: GO 28217
// for i in tmp do
28167: LD_ADDR_VAR 0 1
28171: PUSH
28172: LD_VAR 0 2
28176: PUSH
28177: FOR_IN
28178: IFFALSE 28215
// if GetCargo ( i , mat_artifact ) = 0 then
28180: LD_VAR 0 1
28184: PPUSH
28185: LD_INT 4
28187: PPUSH
28188: CALL_OW 289
28192: PUSH
28193: LD_INT 0
28195: EQUAL
28196: IFFALSE 28213
// SetCargo ( i , mat_siberit , 100 ) ;
28198: LD_VAR 0 1
28202: PPUSH
28203: LD_INT 3
28205: PPUSH
28206: LD_INT 100
28208: PPUSH
28209: CALL_OW 290
28213: GO 28177
28215: POP
28216: POP
// end ;
28217: PPOPN 2
28219: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28220: LD_EXP 66
28224: PUSH
28225: LD_EXP 111
28229: AND
28230: IFFALSE 28413
28232: GO 28234
28234: DISABLE
28235: LD_INT 0
28237: PPUSH
28238: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28239: LD_ADDR_VAR 0 2
28243: PUSH
28244: LD_INT 22
28246: PUSH
28247: LD_OWVAR 2
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PPUSH
28256: CALL_OW 69
28260: ST_TO_ADDR
// if not tmp then
28261: LD_VAR 0 2
28265: NOT
28266: IFFALSE 28270
// exit ;
28268: GO 28413
// for i := 1 to 2 do
28270: LD_ADDR_VAR 0 1
28274: PUSH
28275: DOUBLE
28276: LD_INT 1
28278: DEC
28279: ST_TO_ADDR
28280: LD_INT 2
28282: PUSH
28283: FOR_TO
28284: IFFALSE 28411
// begin uc_side := your_side ;
28286: LD_ADDR_OWVAR 20
28290: PUSH
28291: LD_OWVAR 2
28295: ST_TO_ADDR
// uc_nation := nation_american ;
28296: LD_ADDR_OWVAR 21
28300: PUSH
28301: LD_INT 1
28303: ST_TO_ADDR
// vc_chassis := us_morphling ;
28304: LD_ADDR_OWVAR 37
28308: PUSH
28309: LD_INT 5
28311: ST_TO_ADDR
// vc_engine := engine_siberite ;
28312: LD_ADDR_OWVAR 39
28316: PUSH
28317: LD_INT 3
28319: ST_TO_ADDR
// vc_control := control_computer ;
28320: LD_ADDR_OWVAR 38
28324: PUSH
28325: LD_INT 3
28327: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28328: LD_ADDR_OWVAR 40
28332: PUSH
28333: LD_INT 10
28335: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28336: LD_VAR 0 2
28340: PUSH
28341: LD_INT 1
28343: ARRAY
28344: PPUSH
28345: CALL_OW 310
28349: NOT
28350: IFFALSE 28397
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28352: CALL_OW 45
28356: PPUSH
28357: LD_VAR 0 2
28361: PUSH
28362: LD_INT 1
28364: ARRAY
28365: PPUSH
28366: CALL_OW 250
28370: PPUSH
28371: LD_VAR 0 2
28375: PUSH
28376: LD_INT 1
28378: ARRAY
28379: PPUSH
28380: CALL_OW 251
28384: PPUSH
28385: LD_INT 12
28387: PPUSH
28388: LD_INT 1
28390: PPUSH
28391: CALL_OW 50
28395: GO 28409
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28397: CALL_OW 45
28401: PPUSH
28402: LD_INT 1
28404: PPUSH
28405: CALL_OW 51
// end ;
28409: GO 28283
28411: POP
28412: POP
// end ;
28413: PPOPN 2
28415: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28416: LD_EXP 66
28420: PUSH
28421: LD_EXP 112
28425: AND
28426: IFFALSE 28648
28428: GO 28430
28430: DISABLE
28431: LD_INT 0
28433: PPUSH
28434: PPUSH
28435: PPUSH
28436: PPUSH
28437: PPUSH
28438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28439: LD_ADDR_VAR 0 6
28443: PUSH
28444: LD_INT 22
28446: PUSH
28447: LD_OWVAR 2
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 21
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 3
28468: PUSH
28469: LD_INT 23
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 69
28492: ST_TO_ADDR
// if not tmp then
28493: LD_VAR 0 6
28497: NOT
28498: IFFALSE 28502
// exit ;
28500: GO 28648
// s1 := rand ( 1 , 4 ) ;
28502: LD_ADDR_VAR 0 2
28506: PUSH
28507: LD_INT 1
28509: PPUSH
28510: LD_INT 4
28512: PPUSH
28513: CALL_OW 12
28517: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28518: LD_ADDR_VAR 0 4
28522: PUSH
28523: LD_VAR 0 6
28527: PUSH
28528: LD_INT 1
28530: ARRAY
28531: PPUSH
28532: LD_VAR 0 2
28536: PPUSH
28537: CALL_OW 259
28541: ST_TO_ADDR
// if s1 = 1 then
28542: LD_VAR 0 2
28546: PUSH
28547: LD_INT 1
28549: EQUAL
28550: IFFALSE 28570
// s2 := rand ( 2 , 4 ) else
28552: LD_ADDR_VAR 0 3
28556: PUSH
28557: LD_INT 2
28559: PPUSH
28560: LD_INT 4
28562: PPUSH
28563: CALL_OW 12
28567: ST_TO_ADDR
28568: GO 28578
// s2 := 1 ;
28570: LD_ADDR_VAR 0 3
28574: PUSH
28575: LD_INT 1
28577: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28578: LD_ADDR_VAR 0 5
28582: PUSH
28583: LD_VAR 0 6
28587: PUSH
28588: LD_INT 1
28590: ARRAY
28591: PPUSH
28592: LD_VAR 0 3
28596: PPUSH
28597: CALL_OW 259
28601: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28602: LD_VAR 0 6
28606: PUSH
28607: LD_INT 1
28609: ARRAY
28610: PPUSH
28611: LD_VAR 0 2
28615: PPUSH
28616: LD_VAR 0 5
28620: PPUSH
28621: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28625: LD_VAR 0 6
28629: PUSH
28630: LD_INT 1
28632: ARRAY
28633: PPUSH
28634: LD_VAR 0 3
28638: PPUSH
28639: LD_VAR 0 4
28643: PPUSH
28644: CALL_OW 237
// end ;
28648: PPOPN 6
28650: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28651: LD_EXP 66
28655: PUSH
28656: LD_EXP 113
28660: AND
28661: IFFALSE 28740
28663: GO 28665
28665: DISABLE
28666: LD_INT 0
28668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28669: LD_ADDR_VAR 0 1
28673: PUSH
28674: LD_INT 22
28676: PUSH
28677: LD_OWVAR 2
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 30
28688: PUSH
28689: LD_INT 3
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PPUSH
28700: CALL_OW 69
28704: ST_TO_ADDR
// if not tmp then
28705: LD_VAR 0 1
28709: NOT
28710: IFFALSE 28714
// exit ;
28712: GO 28740
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28714: LD_VAR 0 1
28718: PUSH
28719: LD_INT 1
28721: PPUSH
28722: LD_VAR 0 1
28726: PPUSH
28727: CALL_OW 12
28731: ARRAY
28732: PPUSH
28733: LD_INT 1
28735: PPUSH
28736: CALL_OW 234
// end ;
28740: PPOPN 1
28742: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28743: LD_EXP 66
28747: PUSH
28748: LD_EXP 114
28752: AND
28753: IFFALSE 28865
28755: GO 28757
28757: DISABLE
28758: LD_INT 0
28760: PPUSH
28761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28762: LD_ADDR_VAR 0 2
28766: PUSH
28767: LD_INT 22
28769: PUSH
28770: LD_OWVAR 2
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 30
28784: PUSH
28785: LD_INT 27
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 30
28794: PUSH
28795: LD_INT 26
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 30
28804: PUSH
28805: LD_INT 28
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PPUSH
28822: CALL_OW 69
28826: ST_TO_ADDR
// if not tmp then
28827: LD_VAR 0 2
28831: NOT
28832: IFFALSE 28836
// exit ;
28834: GO 28865
// for i in tmp do
28836: LD_ADDR_VAR 0 1
28840: PUSH
28841: LD_VAR 0 2
28845: PUSH
28846: FOR_IN
28847: IFFALSE 28863
// SetLives ( i , 1 ) ;
28849: LD_VAR 0 1
28853: PPUSH
28854: LD_INT 1
28856: PPUSH
28857: CALL_OW 234
28861: GO 28846
28863: POP
28864: POP
// end ;
28865: PPOPN 2
28867: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28868: LD_EXP 66
28872: PUSH
28873: LD_EXP 115
28877: AND
28878: IFFALSE 29152
28880: GO 28882
28882: DISABLE
28883: LD_INT 0
28885: PPUSH
28886: PPUSH
28887: PPUSH
// begin i := rand ( 1 , 7 ) ;
28888: LD_ADDR_VAR 0 1
28892: PUSH
28893: LD_INT 1
28895: PPUSH
28896: LD_INT 7
28898: PPUSH
28899: CALL_OW 12
28903: ST_TO_ADDR
// case i of 1 :
28904: LD_VAR 0 1
28908: PUSH
28909: LD_INT 1
28911: DOUBLE
28912: EQUAL
28913: IFTRUE 28917
28915: GO 28927
28917: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28918: LD_STRING earthquake(getX(game), 0, 32)
28920: PPUSH
28921: CALL_OW 559
28925: GO 29152
28927: LD_INT 2
28929: DOUBLE
28930: EQUAL
28931: IFTRUE 28935
28933: GO 28949
28935: POP
// begin ToLua ( displayStucuk(); ) ;
28936: LD_STRING displayStucuk();
28938: PPUSH
28939: CALL_OW 559
// ResetFog ;
28943: CALL_OW 335
// end ; 3 :
28947: GO 29152
28949: LD_INT 3
28951: DOUBLE
28952: EQUAL
28953: IFTRUE 28957
28955: GO 29061
28957: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28958: LD_ADDR_VAR 0 2
28962: PUSH
28963: LD_INT 22
28965: PUSH
28966: LD_OWVAR 2
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 25
28977: PUSH
28978: LD_INT 1
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PPUSH
28989: CALL_OW 69
28993: ST_TO_ADDR
// if not tmp then
28994: LD_VAR 0 2
28998: NOT
28999: IFFALSE 29003
// exit ;
29001: GO 29152
// un := tmp [ rand ( 1 , tmp ) ] ;
29003: LD_ADDR_VAR 0 3
29007: PUSH
29008: LD_VAR 0 2
29012: PUSH
29013: LD_INT 1
29015: PPUSH
29016: LD_VAR 0 2
29020: PPUSH
29021: CALL_OW 12
29025: ARRAY
29026: ST_TO_ADDR
// if Crawls ( un ) then
29027: LD_VAR 0 3
29031: PPUSH
29032: CALL_OW 318
29036: IFFALSE 29047
// ComWalk ( un ) ;
29038: LD_VAR 0 3
29042: PPUSH
29043: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29047: LD_VAR 0 3
29051: PPUSH
29052: LD_INT 8
29054: PPUSH
29055: CALL_OW 336
// end ; 4 :
29059: GO 29152
29061: LD_INT 4
29063: DOUBLE
29064: EQUAL
29065: IFTRUE 29069
29067: GO 29130
29069: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29070: LD_ADDR_VAR 0 2
29074: PUSH
29075: LD_INT 22
29077: PUSH
29078: LD_OWVAR 2
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 30
29089: PUSH
29090: LD_INT 29
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PPUSH
29101: CALL_OW 69
29105: ST_TO_ADDR
// if not tmp then
29106: LD_VAR 0 2
29110: NOT
29111: IFFALSE 29115
// exit ;
29113: GO 29152
// DestroyUnit ( tmp [ 1 ] ) ;
29115: LD_VAR 0 2
29119: PUSH
29120: LD_INT 1
29122: ARRAY
29123: PPUSH
29124: CALL_OW 65
// end ; 5 .. 7 :
29128: GO 29152
29130: LD_INT 5
29132: DOUBLE
29133: GREATEREQUAL
29134: IFFALSE 29142
29136: LD_INT 7
29138: DOUBLE
29139: LESSEQUAL
29140: IFTRUE 29144
29142: GO 29151
29144: POP
// StreamSibBomb ; end ;
29145: CALL 25402 0 0
29149: GO 29152
29151: POP
// end ;
29152: PPOPN 3
29154: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29155: LD_EXP 66
29159: PUSH
29160: LD_EXP 116
29164: AND
29165: IFFALSE 29321
29167: GO 29169
29169: DISABLE
29170: LD_INT 0
29172: PPUSH
29173: PPUSH
29174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29175: LD_ADDR_VAR 0 2
29179: PUSH
29180: LD_INT 81
29182: PUSH
29183: LD_OWVAR 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: LD_INT 21
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 21
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PPUSH
29224: CALL_OW 69
29228: ST_TO_ADDR
// if not tmp then
29229: LD_VAR 0 2
29233: NOT
29234: IFFALSE 29238
// exit ;
29236: GO 29321
// p := 0 ;
29238: LD_ADDR_VAR 0 3
29242: PUSH
29243: LD_INT 0
29245: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29246: LD_INT 35
29248: PPUSH
29249: CALL_OW 67
// p := p + 1 ;
29253: LD_ADDR_VAR 0 3
29257: PUSH
29258: LD_VAR 0 3
29262: PUSH
29263: LD_INT 1
29265: PLUS
29266: ST_TO_ADDR
// for i in tmp do
29267: LD_ADDR_VAR 0 1
29271: PUSH
29272: LD_VAR 0 2
29276: PUSH
29277: FOR_IN
29278: IFFALSE 29309
// if GetLives ( i ) < 1000 then
29280: LD_VAR 0 1
29284: PPUSH
29285: CALL_OW 256
29289: PUSH
29290: LD_INT 1000
29292: LESS
29293: IFFALSE 29307
// SetLives ( i , 1000 ) ;
29295: LD_VAR 0 1
29299: PPUSH
29300: LD_INT 1000
29302: PPUSH
29303: CALL_OW 234
29307: GO 29277
29309: POP
29310: POP
// until p > 20 ;
29311: LD_VAR 0 3
29315: PUSH
29316: LD_INT 20
29318: GREATER
29319: IFFALSE 29246
// end ;
29321: PPOPN 3
29323: END
// every 0 0$1 trigger StreamModeActive and sTime do
29324: LD_EXP 66
29328: PUSH
29329: LD_EXP 117
29333: AND
29334: IFFALSE 29369
29336: GO 29338
29338: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29339: LD_INT 28
29341: PPUSH
29342: LD_OWVAR 2
29346: PPUSH
29347: LD_INT 2
29349: PPUSH
29350: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29354: LD_INT 30
29356: PPUSH
29357: LD_OWVAR 2
29361: PPUSH
29362: LD_INT 2
29364: PPUSH
29365: CALL_OW 322
// end ;
29369: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29370: LD_EXP 66
29374: PUSH
29375: LD_EXP 118
29379: AND
29380: IFFALSE 29501
29382: GO 29384
29384: DISABLE
29385: LD_INT 0
29387: PPUSH
29388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29389: LD_ADDR_VAR 0 2
29393: PUSH
29394: LD_INT 22
29396: PUSH
29397: LD_OWVAR 2
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 21
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 3
29418: PUSH
29419: LD_INT 23
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: LIST
29437: PPUSH
29438: CALL_OW 69
29442: ST_TO_ADDR
// if not tmp then
29443: LD_VAR 0 2
29447: NOT
29448: IFFALSE 29452
// exit ;
29450: GO 29501
// for i in tmp do
29452: LD_ADDR_VAR 0 1
29456: PUSH
29457: LD_VAR 0 2
29461: PUSH
29462: FOR_IN
29463: IFFALSE 29499
// begin if Crawls ( i ) then
29465: LD_VAR 0 1
29469: PPUSH
29470: CALL_OW 318
29474: IFFALSE 29485
// ComWalk ( i ) ;
29476: LD_VAR 0 1
29480: PPUSH
29481: CALL_OW 138
// SetClass ( i , 2 ) ;
29485: LD_VAR 0 1
29489: PPUSH
29490: LD_INT 2
29492: PPUSH
29493: CALL_OW 336
// end ;
29497: GO 29462
29499: POP
29500: POP
// end ;
29501: PPOPN 2
29503: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29504: LD_EXP 66
29508: PUSH
29509: LD_EXP 119
29513: AND
29514: IFFALSE 29795
29516: GO 29518
29518: DISABLE
29519: LD_INT 0
29521: PPUSH
29522: PPUSH
29523: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29524: LD_OWVAR 2
29528: PPUSH
29529: LD_INT 9
29531: PPUSH
29532: LD_INT 1
29534: PPUSH
29535: LD_INT 1
29537: PPUSH
29538: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29542: LD_INT 9
29544: PPUSH
29545: LD_OWVAR 2
29549: PPUSH
29550: CALL_OW 343
// uc_side := 9 ;
29554: LD_ADDR_OWVAR 20
29558: PUSH
29559: LD_INT 9
29561: ST_TO_ADDR
// uc_nation := 2 ;
29562: LD_ADDR_OWVAR 21
29566: PUSH
29567: LD_INT 2
29569: ST_TO_ADDR
// hc_name := Dark Warrior ;
29570: LD_ADDR_OWVAR 26
29574: PUSH
29575: LD_STRING Dark Warrior
29577: ST_TO_ADDR
// hc_gallery :=  ;
29578: LD_ADDR_OWVAR 33
29582: PUSH
29583: LD_STRING 
29585: ST_TO_ADDR
// hc_noskilllimit := true ;
29586: LD_ADDR_OWVAR 76
29590: PUSH
29591: LD_INT 1
29593: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29594: LD_ADDR_OWVAR 31
29598: PUSH
29599: LD_INT 30
29601: PUSH
29602: LD_INT 30
29604: PUSH
29605: LD_INT 30
29607: PUSH
29608: LD_INT 30
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: ST_TO_ADDR
// un := CreateHuman ;
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: CALL_OW 44
29626: ST_TO_ADDR
// hc_noskilllimit := false ;
29627: LD_ADDR_OWVAR 76
29631: PUSH
29632: LD_INT 0
29634: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29635: LD_VAR 0 3
29639: PPUSH
29640: LD_INT 1
29642: PPUSH
29643: CALL_OW 51
// p := 0 ;
29647: LD_ADDR_VAR 0 2
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29655: LD_INT 35
29657: PPUSH
29658: CALL_OW 67
// p := p + 1 ;
29662: LD_ADDR_VAR 0 2
29666: PUSH
29667: LD_VAR 0 2
29671: PUSH
29672: LD_INT 1
29674: PLUS
29675: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29676: LD_VAR 0 3
29680: PPUSH
29681: CALL_OW 256
29685: PUSH
29686: LD_INT 1000
29688: LESS
29689: IFFALSE 29703
// SetLives ( un , 1000 ) ;
29691: LD_VAR 0 3
29695: PPUSH
29696: LD_INT 1000
29698: PPUSH
29699: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29703: LD_VAR 0 3
29707: PPUSH
29708: LD_INT 81
29710: PUSH
29711: LD_OWVAR 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 91
29722: PUSH
29723: LD_VAR 0 3
29727: PUSH
29728: LD_INT 30
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PPUSH
29740: CALL_OW 69
29744: PPUSH
29745: LD_VAR 0 3
29749: PPUSH
29750: CALL_OW 74
29754: PPUSH
29755: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29759: LD_VAR 0 2
29763: PUSH
29764: LD_INT 60
29766: GREATER
29767: PUSH
29768: LD_VAR 0 3
29772: PPUSH
29773: CALL_OW 301
29777: OR
29778: IFFALSE 29655
// if un then
29780: LD_VAR 0 3
29784: IFFALSE 29795
// RemoveUnit ( un ) ;
29786: LD_VAR 0 3
29790: PPUSH
29791: CALL_OW 64
// end ;
29795: PPOPN 3
29797: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29798: LD_INT 0
29800: PPUSH
// case cmd of 301 :
29801: LD_VAR 0 1
29805: PUSH
29806: LD_INT 301
29808: DOUBLE
29809: EQUAL
29810: IFTRUE 29814
29812: GO 29846
29814: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29815: LD_VAR 0 6
29819: PPUSH
29820: LD_VAR 0 7
29824: PPUSH
29825: LD_VAR 0 8
29829: PPUSH
29830: LD_VAR 0 4
29834: PPUSH
29835: LD_VAR 0 5
29839: PPUSH
29840: CALL 31047 0 5
29844: GO 29967
29846: LD_INT 302
29848: DOUBLE
29849: EQUAL
29850: IFTRUE 29854
29852: GO 29891
29854: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29855: LD_VAR 0 6
29859: PPUSH
29860: LD_VAR 0 7
29864: PPUSH
29865: LD_VAR 0 8
29869: PPUSH
29870: LD_VAR 0 9
29874: PPUSH
29875: LD_VAR 0 4
29879: PPUSH
29880: LD_VAR 0 5
29884: PPUSH
29885: CALL 31138 0 6
29889: GO 29967
29891: LD_INT 303
29893: DOUBLE
29894: EQUAL
29895: IFTRUE 29899
29897: GO 29936
29899: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29900: LD_VAR 0 6
29904: PPUSH
29905: LD_VAR 0 7
29909: PPUSH
29910: LD_VAR 0 8
29914: PPUSH
29915: LD_VAR 0 9
29919: PPUSH
29920: LD_VAR 0 4
29924: PPUSH
29925: LD_VAR 0 5
29929: PPUSH
29930: CALL 29972 0 6
29934: GO 29967
29936: LD_INT 304
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 29966
29944: POP
// hHackTeleport ( unit , x , y ) ; end ;
29945: LD_VAR 0 2
29949: PPUSH
29950: LD_VAR 0 4
29954: PPUSH
29955: LD_VAR 0 5
29959: PPUSH
29960: CALL 31731 0 3
29964: GO 29967
29966: POP
// end ;
29967: LD_VAR 0 12
29971: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29972: LD_INT 0
29974: PPUSH
29975: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29976: LD_VAR 0 1
29980: PUSH
29981: LD_INT 1
29983: LESS
29984: PUSH
29985: LD_VAR 0 1
29989: PUSH
29990: LD_INT 3
29992: GREATER
29993: OR
29994: PUSH
29995: LD_VAR 0 5
29999: PPUSH
30000: LD_VAR 0 6
30004: PPUSH
30005: CALL_OW 428
30009: OR
30010: IFFALSE 30014
// exit ;
30012: GO 30734
// uc_side := your_side ;
30014: LD_ADDR_OWVAR 20
30018: PUSH
30019: LD_OWVAR 2
30023: ST_TO_ADDR
// uc_nation := nation ;
30024: LD_ADDR_OWVAR 21
30028: PUSH
30029: LD_VAR 0 1
30033: ST_TO_ADDR
// bc_level = 1 ;
30034: LD_ADDR_OWVAR 43
30038: PUSH
30039: LD_INT 1
30041: ST_TO_ADDR
// case btype of 1 :
30042: LD_VAR 0 2
30046: PUSH
30047: LD_INT 1
30049: DOUBLE
30050: EQUAL
30051: IFTRUE 30055
30053: GO 30066
30055: POP
// bc_type := b_depot ; 2 :
30056: LD_ADDR_OWVAR 42
30060: PUSH
30061: LD_INT 0
30063: ST_TO_ADDR
30064: GO 30678
30066: LD_INT 2
30068: DOUBLE
30069: EQUAL
30070: IFTRUE 30074
30072: GO 30085
30074: POP
// bc_type := b_warehouse ; 3 :
30075: LD_ADDR_OWVAR 42
30079: PUSH
30080: LD_INT 1
30082: ST_TO_ADDR
30083: GO 30678
30085: LD_INT 3
30087: DOUBLE
30088: EQUAL
30089: IFTRUE 30093
30091: GO 30104
30093: POP
// bc_type := b_lab ; 4 .. 9 :
30094: LD_ADDR_OWVAR 42
30098: PUSH
30099: LD_INT 6
30101: ST_TO_ADDR
30102: GO 30678
30104: LD_INT 4
30106: DOUBLE
30107: GREATEREQUAL
30108: IFFALSE 30116
30110: LD_INT 9
30112: DOUBLE
30113: LESSEQUAL
30114: IFTRUE 30118
30116: GO 30170
30118: POP
// begin bc_type := b_lab_half ;
30119: LD_ADDR_OWVAR 42
30123: PUSH
30124: LD_INT 7
30126: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30127: LD_ADDR_OWVAR 44
30131: PUSH
30132: LD_INT 10
30134: PUSH
30135: LD_INT 11
30137: PUSH
30138: LD_INT 12
30140: PUSH
30141: LD_INT 15
30143: PUSH
30144: LD_INT 14
30146: PUSH
30147: LD_INT 13
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: PUSH
30158: LD_VAR 0 2
30162: PUSH
30163: LD_INT 3
30165: MINUS
30166: ARRAY
30167: ST_TO_ADDR
// end ; 10 .. 13 :
30168: GO 30678
30170: LD_INT 10
30172: DOUBLE
30173: GREATEREQUAL
30174: IFFALSE 30182
30176: LD_INT 13
30178: DOUBLE
30179: LESSEQUAL
30180: IFTRUE 30184
30182: GO 30261
30184: POP
// begin bc_type := b_lab_full ;
30185: LD_ADDR_OWVAR 42
30189: PUSH
30190: LD_INT 8
30192: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30193: LD_ADDR_OWVAR 44
30197: PUSH
30198: LD_INT 10
30200: PUSH
30201: LD_INT 12
30203: PUSH
30204: LD_INT 14
30206: PUSH
30207: LD_INT 13
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: PUSH
30216: LD_VAR 0 2
30220: PUSH
30221: LD_INT 9
30223: MINUS
30224: ARRAY
30225: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30226: LD_ADDR_OWVAR 45
30230: PUSH
30231: LD_INT 11
30233: PUSH
30234: LD_INT 15
30236: PUSH
30237: LD_INT 12
30239: PUSH
30240: LD_INT 15
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: PUSH
30249: LD_VAR 0 2
30253: PUSH
30254: LD_INT 9
30256: MINUS
30257: ARRAY
30258: ST_TO_ADDR
// end ; 14 :
30259: GO 30678
30261: LD_INT 14
30263: DOUBLE
30264: EQUAL
30265: IFTRUE 30269
30267: GO 30280
30269: POP
// bc_type := b_workshop ; 15 :
30270: LD_ADDR_OWVAR 42
30274: PUSH
30275: LD_INT 2
30277: ST_TO_ADDR
30278: GO 30678
30280: LD_INT 15
30282: DOUBLE
30283: EQUAL
30284: IFTRUE 30288
30286: GO 30299
30288: POP
// bc_type := b_factory ; 16 :
30289: LD_ADDR_OWVAR 42
30293: PUSH
30294: LD_INT 3
30296: ST_TO_ADDR
30297: GO 30678
30299: LD_INT 16
30301: DOUBLE
30302: EQUAL
30303: IFTRUE 30307
30305: GO 30318
30307: POP
// bc_type := b_ext_gun ; 17 :
30308: LD_ADDR_OWVAR 42
30312: PUSH
30313: LD_INT 17
30315: ST_TO_ADDR
30316: GO 30678
30318: LD_INT 17
30320: DOUBLE
30321: EQUAL
30322: IFTRUE 30326
30324: GO 30354
30326: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30327: LD_ADDR_OWVAR 42
30331: PUSH
30332: LD_INT 19
30334: PUSH
30335: LD_INT 23
30337: PUSH
30338: LD_INT 19
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: LIST
30345: PUSH
30346: LD_VAR 0 1
30350: ARRAY
30351: ST_TO_ADDR
30352: GO 30678
30354: LD_INT 18
30356: DOUBLE
30357: EQUAL
30358: IFTRUE 30362
30360: GO 30373
30362: POP
// bc_type := b_ext_radar ; 19 :
30363: LD_ADDR_OWVAR 42
30367: PUSH
30368: LD_INT 20
30370: ST_TO_ADDR
30371: GO 30678
30373: LD_INT 19
30375: DOUBLE
30376: EQUAL
30377: IFTRUE 30381
30379: GO 30392
30381: POP
// bc_type := b_ext_radio ; 20 :
30382: LD_ADDR_OWVAR 42
30386: PUSH
30387: LD_INT 22
30389: ST_TO_ADDR
30390: GO 30678
30392: LD_INT 20
30394: DOUBLE
30395: EQUAL
30396: IFTRUE 30400
30398: GO 30411
30400: POP
// bc_type := b_ext_siberium ; 21 :
30401: LD_ADDR_OWVAR 42
30405: PUSH
30406: LD_INT 21
30408: ST_TO_ADDR
30409: GO 30678
30411: LD_INT 21
30413: DOUBLE
30414: EQUAL
30415: IFTRUE 30419
30417: GO 30430
30419: POP
// bc_type := b_ext_computer ; 22 :
30420: LD_ADDR_OWVAR 42
30424: PUSH
30425: LD_INT 24
30427: ST_TO_ADDR
30428: GO 30678
30430: LD_INT 22
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30449
30438: POP
// bc_type := b_ext_track ; 23 :
30439: LD_ADDR_OWVAR 42
30443: PUSH
30444: LD_INT 16
30446: ST_TO_ADDR
30447: GO 30678
30449: LD_INT 23
30451: DOUBLE
30452: EQUAL
30453: IFTRUE 30457
30455: GO 30468
30457: POP
// bc_type := b_ext_laser ; 24 :
30458: LD_ADDR_OWVAR 42
30462: PUSH
30463: LD_INT 25
30465: ST_TO_ADDR
30466: GO 30678
30468: LD_INT 24
30470: DOUBLE
30471: EQUAL
30472: IFTRUE 30476
30474: GO 30487
30476: POP
// bc_type := b_control_tower ; 25 :
30477: LD_ADDR_OWVAR 42
30481: PUSH
30482: LD_INT 36
30484: ST_TO_ADDR
30485: GO 30678
30487: LD_INT 25
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30506
30495: POP
// bc_type := b_breastwork ; 26 :
30496: LD_ADDR_OWVAR 42
30500: PUSH
30501: LD_INT 31
30503: ST_TO_ADDR
30504: GO 30678
30506: LD_INT 26
30508: DOUBLE
30509: EQUAL
30510: IFTRUE 30514
30512: GO 30525
30514: POP
// bc_type := b_bunker ; 27 :
30515: LD_ADDR_OWVAR 42
30519: PUSH
30520: LD_INT 32
30522: ST_TO_ADDR
30523: GO 30678
30525: LD_INT 27
30527: DOUBLE
30528: EQUAL
30529: IFTRUE 30533
30531: GO 30544
30533: POP
// bc_type := b_turret ; 28 :
30534: LD_ADDR_OWVAR 42
30538: PUSH
30539: LD_INT 33
30541: ST_TO_ADDR
30542: GO 30678
30544: LD_INT 28
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30563
30552: POP
// bc_type := b_armoury ; 29 :
30553: LD_ADDR_OWVAR 42
30557: PUSH
30558: LD_INT 4
30560: ST_TO_ADDR
30561: GO 30678
30563: LD_INT 29
30565: DOUBLE
30566: EQUAL
30567: IFTRUE 30571
30569: GO 30582
30571: POP
// bc_type := b_barracks ; 30 :
30572: LD_ADDR_OWVAR 42
30576: PUSH
30577: LD_INT 5
30579: ST_TO_ADDR
30580: GO 30678
30582: LD_INT 30
30584: DOUBLE
30585: EQUAL
30586: IFTRUE 30590
30588: GO 30601
30590: POP
// bc_type := b_solar_power ; 31 :
30591: LD_ADDR_OWVAR 42
30595: PUSH
30596: LD_INT 27
30598: ST_TO_ADDR
30599: GO 30678
30601: LD_INT 31
30603: DOUBLE
30604: EQUAL
30605: IFTRUE 30609
30607: GO 30620
30609: POP
// bc_type := b_oil_power ; 32 :
30610: LD_ADDR_OWVAR 42
30614: PUSH
30615: LD_INT 26
30617: ST_TO_ADDR
30618: GO 30678
30620: LD_INT 32
30622: DOUBLE
30623: EQUAL
30624: IFTRUE 30628
30626: GO 30639
30628: POP
// bc_type := b_siberite_power ; 33 :
30629: LD_ADDR_OWVAR 42
30633: PUSH
30634: LD_INT 28
30636: ST_TO_ADDR
30637: GO 30678
30639: LD_INT 33
30641: DOUBLE
30642: EQUAL
30643: IFTRUE 30647
30645: GO 30658
30647: POP
// bc_type := b_oil_mine ; 34 :
30648: LD_ADDR_OWVAR 42
30652: PUSH
30653: LD_INT 29
30655: ST_TO_ADDR
30656: GO 30678
30658: LD_INT 34
30660: DOUBLE
30661: EQUAL
30662: IFTRUE 30666
30664: GO 30677
30666: POP
// bc_type := b_siberite_mine ; end ;
30667: LD_ADDR_OWVAR 42
30671: PUSH
30672: LD_INT 30
30674: ST_TO_ADDR
30675: GO 30678
30677: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30678: LD_ADDR_VAR 0 8
30682: PUSH
30683: LD_VAR 0 5
30687: PPUSH
30688: LD_VAR 0 6
30692: PPUSH
30693: LD_VAR 0 3
30697: PPUSH
30698: CALL_OW 47
30702: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30703: LD_OWVAR 42
30707: PUSH
30708: LD_INT 32
30710: PUSH
30711: LD_INT 33
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: IN
30718: IFFALSE 30734
// PlaceWeaponTurret ( b , weapon ) ;
30720: LD_VAR 0 8
30724: PPUSH
30725: LD_VAR 0 4
30729: PPUSH
30730: CALL_OW 431
// end ;
30734: LD_VAR 0 7
30738: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30739: LD_INT 0
30741: PPUSH
30742: PPUSH
30743: PPUSH
30744: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30745: LD_ADDR_VAR 0 4
30749: PUSH
30750: LD_INT 22
30752: PUSH
30753: LD_OWVAR 2
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 2
30764: PUSH
30765: LD_INT 30
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 30
30777: PUSH
30778: LD_INT 1
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PPUSH
30794: CALL_OW 69
30798: ST_TO_ADDR
// if not tmp then
30799: LD_VAR 0 4
30803: NOT
30804: IFFALSE 30808
// exit ;
30806: GO 30867
// for i in tmp do
30808: LD_ADDR_VAR 0 2
30812: PUSH
30813: LD_VAR 0 4
30817: PUSH
30818: FOR_IN
30819: IFFALSE 30865
// for j = 1 to 3 do
30821: LD_ADDR_VAR 0 3
30825: PUSH
30826: DOUBLE
30827: LD_INT 1
30829: DEC
30830: ST_TO_ADDR
30831: LD_INT 3
30833: PUSH
30834: FOR_TO
30835: IFFALSE 30861
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30837: LD_VAR 0 2
30841: PPUSH
30842: CALL_OW 274
30846: PPUSH
30847: LD_VAR 0 3
30851: PPUSH
30852: LD_INT 99999
30854: PPUSH
30855: CALL_OW 277
30859: GO 30834
30861: POP
30862: POP
30863: GO 30818
30865: POP
30866: POP
// end ;
30867: LD_VAR 0 1
30871: RET
// export function hHackSetLevel10 ; var i , j ; begin
30872: LD_INT 0
30874: PPUSH
30875: PPUSH
30876: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30877: LD_ADDR_VAR 0 2
30881: PUSH
30882: LD_INT 21
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PPUSH
30892: CALL_OW 69
30896: PUSH
30897: FOR_IN
30898: IFFALSE 30950
// if IsSelected ( i ) then
30900: LD_VAR 0 2
30904: PPUSH
30905: CALL_OW 306
30909: IFFALSE 30948
// begin for j := 1 to 4 do
30911: LD_ADDR_VAR 0 3
30915: PUSH
30916: DOUBLE
30917: LD_INT 1
30919: DEC
30920: ST_TO_ADDR
30921: LD_INT 4
30923: PUSH
30924: FOR_TO
30925: IFFALSE 30946
// SetSkill ( i , j , 10 ) ;
30927: LD_VAR 0 2
30931: PPUSH
30932: LD_VAR 0 3
30936: PPUSH
30937: LD_INT 10
30939: PPUSH
30940: CALL_OW 237
30944: GO 30924
30946: POP
30947: POP
// end ;
30948: GO 30897
30950: POP
30951: POP
// end ;
30952: LD_VAR 0 1
30956: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30957: LD_INT 0
30959: PPUSH
30960: PPUSH
30961: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30962: LD_ADDR_VAR 0 2
30966: PUSH
30967: LD_INT 22
30969: PUSH
30970: LD_OWVAR 2
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 21
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PPUSH
30993: CALL_OW 69
30997: PUSH
30998: FOR_IN
30999: IFFALSE 31040
// begin for j := 1 to 4 do
31001: LD_ADDR_VAR 0 3
31005: PUSH
31006: DOUBLE
31007: LD_INT 1
31009: DEC
31010: ST_TO_ADDR
31011: LD_INT 4
31013: PUSH
31014: FOR_TO
31015: IFFALSE 31036
// SetSkill ( i , j , 10 ) ;
31017: LD_VAR 0 2
31021: PPUSH
31022: LD_VAR 0 3
31026: PPUSH
31027: LD_INT 10
31029: PPUSH
31030: CALL_OW 237
31034: GO 31014
31036: POP
31037: POP
// end ;
31038: GO 30998
31040: POP
31041: POP
// end ;
31042: LD_VAR 0 1
31046: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31047: LD_INT 0
31049: PPUSH
// uc_side := your_side ;
31050: LD_ADDR_OWVAR 20
31054: PUSH
31055: LD_OWVAR 2
31059: ST_TO_ADDR
// uc_nation := nation ;
31060: LD_ADDR_OWVAR 21
31064: PUSH
31065: LD_VAR 0 1
31069: ST_TO_ADDR
// InitHc ;
31070: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31074: LD_INT 0
31076: PPUSH
31077: LD_VAR 0 2
31081: PPUSH
31082: LD_VAR 0 3
31086: PPUSH
31087: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31091: LD_VAR 0 4
31095: PPUSH
31096: LD_VAR 0 5
31100: PPUSH
31101: CALL_OW 428
31105: PUSH
31106: LD_INT 0
31108: EQUAL
31109: IFFALSE 31133
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31111: CALL_OW 44
31115: PPUSH
31116: LD_VAR 0 4
31120: PPUSH
31121: LD_VAR 0 5
31125: PPUSH
31126: LD_INT 1
31128: PPUSH
31129: CALL_OW 48
// end ;
31133: LD_VAR 0 6
31137: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31138: LD_INT 0
31140: PPUSH
31141: PPUSH
// uc_side := your_side ;
31142: LD_ADDR_OWVAR 20
31146: PUSH
31147: LD_OWVAR 2
31151: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31152: LD_VAR 0 1
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: LD_INT 4
31168: PUSH
31169: LD_INT 5
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: IN
31179: IFFALSE 31191
// uc_nation := nation_american else
31181: LD_ADDR_OWVAR 21
31185: PUSH
31186: LD_INT 1
31188: ST_TO_ADDR
31189: GO 31234
// if chassis in [ 11 , 12 , 13 , 14 ] then
31191: LD_VAR 0 1
31195: PUSH
31196: LD_INT 11
31198: PUSH
31199: LD_INT 12
31201: PUSH
31202: LD_INT 13
31204: PUSH
31205: LD_INT 14
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: IN
31214: IFFALSE 31226
// uc_nation := nation_arabian else
31216: LD_ADDR_OWVAR 21
31220: PUSH
31221: LD_INT 2
31223: ST_TO_ADDR
31224: GO 31234
// uc_nation := nation_russian ;
31226: LD_ADDR_OWVAR 21
31230: PUSH
31231: LD_INT 3
31233: ST_TO_ADDR
// vc_chassis := chassis ;
31234: LD_ADDR_OWVAR 37
31238: PUSH
31239: LD_VAR 0 1
31243: ST_TO_ADDR
// vc_engine := engine ;
31244: LD_ADDR_OWVAR 39
31248: PUSH
31249: LD_VAR 0 2
31253: ST_TO_ADDR
// vc_control := control ;
31254: LD_ADDR_OWVAR 38
31258: PUSH
31259: LD_VAR 0 3
31263: ST_TO_ADDR
// vc_weapon := weapon ;
31264: LD_ADDR_OWVAR 40
31268: PUSH
31269: LD_VAR 0 4
31273: ST_TO_ADDR
// un := CreateVehicle ;
31274: LD_ADDR_VAR 0 8
31278: PUSH
31279: CALL_OW 45
31283: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31284: LD_VAR 0 8
31288: PPUSH
31289: LD_INT 0
31291: PPUSH
31292: LD_INT 5
31294: PPUSH
31295: CALL_OW 12
31299: PPUSH
31300: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31304: LD_VAR 0 8
31308: PPUSH
31309: LD_VAR 0 5
31313: PPUSH
31314: LD_VAR 0 6
31318: PPUSH
31319: LD_INT 1
31321: PPUSH
31322: CALL_OW 48
// end ;
31326: LD_VAR 0 7
31330: RET
// export hInvincible ; every 1 do
31331: GO 31333
31333: DISABLE
// hInvincible := [ ] ;
31334: LD_ADDR_EXP 120
31338: PUSH
31339: EMPTY
31340: ST_TO_ADDR
31341: END
// every 10 do var i ;
31342: GO 31344
31344: DISABLE
31345: LD_INT 0
31347: PPUSH
// begin enable ;
31348: ENABLE
// if not hInvincible then
31349: LD_EXP 120
31353: NOT
31354: IFFALSE 31358
// exit ;
31356: GO 31402
// for i in hInvincible do
31358: LD_ADDR_VAR 0 1
31362: PUSH
31363: LD_EXP 120
31367: PUSH
31368: FOR_IN
31369: IFFALSE 31400
// if GetLives ( i ) < 1000 then
31371: LD_VAR 0 1
31375: PPUSH
31376: CALL_OW 256
31380: PUSH
31381: LD_INT 1000
31383: LESS
31384: IFFALSE 31398
// SetLives ( i , 1000 ) ;
31386: LD_VAR 0 1
31390: PPUSH
31391: LD_INT 1000
31393: PPUSH
31394: CALL_OW 234
31398: GO 31368
31400: POP
31401: POP
// end ;
31402: PPOPN 1
31404: END
// export function hHackInvincible ; var i ; begin
31405: LD_INT 0
31407: PPUSH
31408: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31409: LD_ADDR_VAR 0 2
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 21
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 21
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: PPUSH
31442: CALL_OW 69
31446: PUSH
31447: FOR_IN
31448: IFFALSE 31509
// if IsSelected ( i ) then
31450: LD_VAR 0 2
31454: PPUSH
31455: CALL_OW 306
31459: IFFALSE 31507
// begin if i in hInvincible then
31461: LD_VAR 0 2
31465: PUSH
31466: LD_EXP 120
31470: IN
31471: IFFALSE 31491
// hInvincible := hInvincible diff i else
31473: LD_ADDR_EXP 120
31477: PUSH
31478: LD_EXP 120
31482: PUSH
31483: LD_VAR 0 2
31487: DIFF
31488: ST_TO_ADDR
31489: GO 31507
// hInvincible := hInvincible union i ;
31491: LD_ADDR_EXP 120
31495: PUSH
31496: LD_EXP 120
31500: PUSH
31501: LD_VAR 0 2
31505: UNION
31506: ST_TO_ADDR
// end ;
31507: GO 31447
31509: POP
31510: POP
// end ;
31511: LD_VAR 0 1
31515: RET
// export function hHackInvisible ; var i , j ; begin
31516: LD_INT 0
31518: PPUSH
31519: PPUSH
31520: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31521: LD_ADDR_VAR 0 2
31525: PUSH
31526: LD_INT 21
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PPUSH
31536: CALL_OW 69
31540: PUSH
31541: FOR_IN
31542: IFFALSE 31566
// if IsSelected ( i ) then
31544: LD_VAR 0 2
31548: PPUSH
31549: CALL_OW 306
31553: IFFALSE 31564
// ComForceInvisible ( i ) ;
31555: LD_VAR 0 2
31559: PPUSH
31560: CALL_OW 496
31564: GO 31541
31566: POP
31567: POP
// end ;
31568: LD_VAR 0 1
31572: RET
// export function hHackChangeYourSide ; begin
31573: LD_INT 0
31575: PPUSH
// if your_side = 8 then
31576: LD_OWVAR 2
31580: PUSH
31581: LD_INT 8
31583: EQUAL
31584: IFFALSE 31596
// your_side := 0 else
31586: LD_ADDR_OWVAR 2
31590: PUSH
31591: LD_INT 0
31593: ST_TO_ADDR
31594: GO 31610
// your_side := your_side + 1 ;
31596: LD_ADDR_OWVAR 2
31600: PUSH
31601: LD_OWVAR 2
31605: PUSH
31606: LD_INT 1
31608: PLUS
31609: ST_TO_ADDR
// end ;
31610: LD_VAR 0 1
31614: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31615: LD_INT 0
31617: PPUSH
31618: PPUSH
31619: PPUSH
// for i in all_units do
31620: LD_ADDR_VAR 0 2
31624: PUSH
31625: LD_OWVAR 3
31629: PUSH
31630: FOR_IN
31631: IFFALSE 31709
// if IsSelected ( i ) then
31633: LD_VAR 0 2
31637: PPUSH
31638: CALL_OW 306
31642: IFFALSE 31707
// begin j := GetSide ( i ) ;
31644: LD_ADDR_VAR 0 3
31648: PUSH
31649: LD_VAR 0 2
31653: PPUSH
31654: CALL_OW 255
31658: ST_TO_ADDR
// if j = 8 then
31659: LD_VAR 0 3
31663: PUSH
31664: LD_INT 8
31666: EQUAL
31667: IFFALSE 31679
// j := 0 else
31669: LD_ADDR_VAR 0 3
31673: PUSH
31674: LD_INT 0
31676: ST_TO_ADDR
31677: GO 31693
// j := j + 1 ;
31679: LD_ADDR_VAR 0 3
31683: PUSH
31684: LD_VAR 0 3
31688: PUSH
31689: LD_INT 1
31691: PLUS
31692: ST_TO_ADDR
// SetSide ( i , j ) ;
31693: LD_VAR 0 2
31697: PPUSH
31698: LD_VAR 0 3
31702: PPUSH
31703: CALL_OW 235
// end ;
31707: GO 31630
31709: POP
31710: POP
// end ;
31711: LD_VAR 0 1
31715: RET
// export function hHackFog ; begin
31716: LD_INT 0
31718: PPUSH
// FogOff ( true ) ;
31719: LD_INT 1
31721: PPUSH
31722: CALL_OW 344
// end ;
31726: LD_VAR 0 1
31730: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31731: LD_INT 0
31733: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31734: LD_VAR 0 1
31738: PPUSH
31739: LD_VAR 0 2
31743: PPUSH
31744: LD_VAR 0 3
31748: PPUSH
31749: LD_INT 1
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 483
// CenterOnXY ( x , y ) ;
31759: LD_VAR 0 2
31763: PPUSH
31764: LD_VAR 0 3
31768: PPUSH
31769: CALL_OW 84
// end ; end_of_file
31773: LD_VAR 0 4
31777: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
31778: LD_VAR 0 1
31782: PUSH
31783: LD_INT 200
31785: DOUBLE
31786: GREATEREQUAL
31787: IFFALSE 31795
31789: LD_INT 299
31791: DOUBLE
31792: LESSEQUAL
31793: IFTRUE 31797
31795: GO 31829
31797: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
31798: LD_VAR 0 1
31802: PPUSH
31803: LD_VAR 0 2
31807: PPUSH
31808: LD_VAR 0 3
31812: PPUSH
31813: LD_VAR 0 4
31817: PPUSH
31818: LD_VAR 0 5
31822: PPUSH
31823: CALL 32073 0 5
31827: GO 31906
31829: LD_INT 300
31831: DOUBLE
31832: GREATEREQUAL
31833: IFFALSE 31841
31835: LD_INT 399
31837: DOUBLE
31838: LESSEQUAL
31839: IFTRUE 31843
31841: GO 31905
31843: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
31844: LD_VAR 0 1
31848: PPUSH
31849: LD_VAR 0 2
31853: PPUSH
31854: LD_VAR 0 3
31858: PPUSH
31859: LD_VAR 0 4
31863: PPUSH
31864: LD_VAR 0 5
31868: PPUSH
31869: LD_VAR 0 6
31873: PPUSH
31874: LD_VAR 0 7
31878: PPUSH
31879: LD_VAR 0 8
31883: PPUSH
31884: LD_VAR 0 9
31888: PPUSH
31889: LD_VAR 0 10
31893: PPUSH
31894: LD_VAR 0 11
31898: PPUSH
31899: CALL 29798 0 11
31903: GO 31906
31905: POP
// end ;
31906: PPOPN 11
31908: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
31909: LD_VAR 0 1
31913: PPUSH
31914: LD_VAR 0 2
31918: PPUSH
31919: LD_VAR 0 3
31923: PPUSH
31924: LD_VAR 0 4
31928: PPUSH
31929: LD_VAR 0 5
31933: PPUSH
31934: CALL 32055 0 5
// end ; end_of_file end_of_file
31938: PPOPN 5
31940: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31941: LD_INT 0
31943: PPUSH
31944: PPUSH
31945: PPUSH
31946: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31947: LD_VAR 0 1
31951: PPUSH
31952: CALL_OW 264
31956: PUSH
31957: LD_EXP 137
31961: EQUAL
31962: IFFALSE 32034
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31964: LD_INT 68
31966: PPUSH
31967: LD_VAR 0 1
31971: PPUSH
31972: CALL_OW 255
31976: PPUSH
31977: CALL_OW 321
31981: PUSH
31982: LD_INT 2
31984: EQUAL
31985: IFFALSE 31997
// eff := 70 else
31987: LD_ADDR_VAR 0 4
31991: PUSH
31992: LD_INT 70
31994: ST_TO_ADDR
31995: GO 32005
// eff := 30 ;
31997: LD_ADDR_VAR 0 4
32001: PUSH
32002: LD_INT 30
32004: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32005: LD_VAR 0 1
32009: PPUSH
32010: CALL_OW 250
32014: PPUSH
32015: LD_VAR 0 1
32019: PPUSH
32020: CALL_OW 251
32024: PPUSH
32025: LD_VAR 0 4
32029: PPUSH
32030: CALL_OW 495
// end ; end ;
32034: LD_VAR 0 2
32038: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32039: LD_INT 0
32041: PPUSH
// end ;
32042: LD_VAR 0 4
32046: RET
// export function SOS_Command ( cmd ) ; begin
32047: LD_INT 0
32049: PPUSH
// end ;
32050: LD_VAR 0 2
32054: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32055: LD_INT 0
32057: PPUSH
// if cmd = 121 then
32058: LD_VAR 0 1
32062: PUSH
32063: LD_INT 121
32065: EQUAL
32066: IFFALSE 32068
// end ;
32068: LD_VAR 0 6
32072: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32073: LD_INT 0
32075: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32076: LD_VAR 0 1
32080: PUSH
32081: LD_INT 250
32083: EQUAL
32084: PUSH
32085: LD_VAR 0 2
32089: PPUSH
32090: CALL_OW 264
32094: PUSH
32095: LD_EXP 140
32099: EQUAL
32100: AND
32101: IFFALSE 32122
// MinerPlaceMine ( unit , x , y ) ;
32103: LD_VAR 0 2
32107: PPUSH
32108: LD_VAR 0 4
32112: PPUSH
32113: LD_VAR 0 5
32117: PPUSH
32118: CALL 34471 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32122: LD_VAR 0 1
32126: PUSH
32127: LD_INT 251
32129: EQUAL
32130: PUSH
32131: LD_VAR 0 2
32135: PPUSH
32136: CALL_OW 264
32140: PUSH
32141: LD_EXP 140
32145: EQUAL
32146: AND
32147: IFFALSE 32168
// MinerDetonateMine ( unit , x , y ) ;
32149: LD_VAR 0 2
32153: PPUSH
32154: LD_VAR 0 4
32158: PPUSH
32159: LD_VAR 0 5
32163: PPUSH
32164: CALL 34748 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32168: LD_VAR 0 1
32172: PUSH
32173: LD_INT 252
32175: EQUAL
32176: PUSH
32177: LD_VAR 0 2
32181: PPUSH
32182: CALL_OW 264
32186: PUSH
32187: LD_EXP 140
32191: EQUAL
32192: AND
32193: IFFALSE 32214
// MinerCreateMinefield ( unit , x , y ) ;
32195: LD_VAR 0 2
32199: PPUSH
32200: LD_VAR 0 4
32204: PPUSH
32205: LD_VAR 0 5
32209: PPUSH
32210: CALL 35165 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32214: LD_VAR 0 1
32218: PUSH
32219: LD_INT 253
32221: EQUAL
32222: PUSH
32223: LD_VAR 0 2
32227: PPUSH
32228: CALL_OW 257
32232: PUSH
32233: LD_INT 5
32235: EQUAL
32236: AND
32237: IFFALSE 32258
// ComBinocular ( unit , x , y ) ;
32239: LD_VAR 0 2
32243: PPUSH
32244: LD_VAR 0 4
32248: PPUSH
32249: LD_VAR 0 5
32253: PPUSH
32254: CALL 35536 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32258: LD_VAR 0 1
32262: PUSH
32263: LD_INT 254
32265: EQUAL
32266: PUSH
32267: LD_VAR 0 2
32271: PPUSH
32272: CALL_OW 264
32276: PUSH
32277: LD_EXP 135
32281: EQUAL
32282: AND
32283: PUSH
32284: LD_VAR 0 3
32288: PPUSH
32289: CALL_OW 263
32293: PUSH
32294: LD_INT 3
32296: EQUAL
32297: AND
32298: IFFALSE 32314
// HackDestroyVehicle ( unit , selectedUnit ) ;
32300: LD_VAR 0 2
32304: PPUSH
32305: LD_VAR 0 3
32309: PPUSH
32310: CALL 33831 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32314: LD_VAR 0 1
32318: PUSH
32319: LD_INT 255
32321: EQUAL
32322: PUSH
32323: LD_VAR 0 2
32327: PPUSH
32328: CALL_OW 264
32332: PUSH
32333: LD_INT 14
32335: PUSH
32336: LD_INT 53
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: IN
32343: AND
32344: PUSH
32345: LD_VAR 0 4
32349: PPUSH
32350: LD_VAR 0 5
32354: PPUSH
32355: CALL_OW 488
32359: AND
32360: IFFALSE 32384
// CutTreeXYR ( unit , x , y , 12 ) ;
32362: LD_VAR 0 2
32366: PPUSH
32367: LD_VAR 0 4
32371: PPUSH
32372: LD_VAR 0 5
32376: PPUSH
32377: LD_INT 12
32379: PPUSH
32380: CALL 32397 0 4
// end ;
32384: LD_VAR 0 6
32388: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32389: LD_INT 0
32391: PPUSH
// end ;
32392: LD_VAR 0 4
32396: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32397: LD_INT 0
32399: PPUSH
32400: PPUSH
32401: PPUSH
32402: PPUSH
32403: PPUSH
32404: PPUSH
32405: PPUSH
32406: PPUSH
32407: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32408: LD_VAR 0 1
32412: NOT
32413: PUSH
32414: LD_VAR 0 2
32418: PPUSH
32419: LD_VAR 0 3
32423: PPUSH
32424: CALL_OW 488
32428: NOT
32429: OR
32430: PUSH
32431: LD_VAR 0 4
32435: NOT
32436: OR
32437: IFFALSE 32441
// exit ;
32439: GO 32781
// list := [ ] ;
32441: LD_ADDR_VAR 0 13
32445: PUSH
32446: EMPTY
32447: ST_TO_ADDR
// if x - r < 0 then
32448: LD_VAR 0 2
32452: PUSH
32453: LD_VAR 0 4
32457: MINUS
32458: PUSH
32459: LD_INT 0
32461: LESS
32462: IFFALSE 32474
// min_x := 0 else
32464: LD_ADDR_VAR 0 7
32468: PUSH
32469: LD_INT 0
32471: ST_TO_ADDR
32472: GO 32490
// min_x := x - r ;
32474: LD_ADDR_VAR 0 7
32478: PUSH
32479: LD_VAR 0 2
32483: PUSH
32484: LD_VAR 0 4
32488: MINUS
32489: ST_TO_ADDR
// if y - r < 0 then
32490: LD_VAR 0 3
32494: PUSH
32495: LD_VAR 0 4
32499: MINUS
32500: PUSH
32501: LD_INT 0
32503: LESS
32504: IFFALSE 32516
// min_y := 0 else
32506: LD_ADDR_VAR 0 8
32510: PUSH
32511: LD_INT 0
32513: ST_TO_ADDR
32514: GO 32532
// min_y := y - r ;
32516: LD_ADDR_VAR 0 8
32520: PUSH
32521: LD_VAR 0 3
32525: PUSH
32526: LD_VAR 0 4
32530: MINUS
32531: ST_TO_ADDR
// max_x := x + r ;
32532: LD_ADDR_VAR 0 9
32536: PUSH
32537: LD_VAR 0 2
32541: PUSH
32542: LD_VAR 0 4
32546: PLUS
32547: ST_TO_ADDR
// max_y := y + r ;
32548: LD_ADDR_VAR 0 10
32552: PUSH
32553: LD_VAR 0 3
32557: PUSH
32558: LD_VAR 0 4
32562: PLUS
32563: ST_TO_ADDR
// for _x = min_x to max_x do
32564: LD_ADDR_VAR 0 11
32568: PUSH
32569: DOUBLE
32570: LD_VAR 0 7
32574: DEC
32575: ST_TO_ADDR
32576: LD_VAR 0 9
32580: PUSH
32581: FOR_TO
32582: IFFALSE 32699
// for _y = min_y to max_y do
32584: LD_ADDR_VAR 0 12
32588: PUSH
32589: DOUBLE
32590: LD_VAR 0 8
32594: DEC
32595: ST_TO_ADDR
32596: LD_VAR 0 10
32600: PUSH
32601: FOR_TO
32602: IFFALSE 32695
// begin if not ValidHex ( _x , _y ) then
32604: LD_VAR 0 11
32608: PPUSH
32609: LD_VAR 0 12
32613: PPUSH
32614: CALL_OW 488
32618: NOT
32619: IFFALSE 32623
// continue ;
32621: GO 32601
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32623: LD_VAR 0 11
32627: PPUSH
32628: LD_VAR 0 12
32632: PPUSH
32633: CALL_OW 351
32637: PUSH
32638: LD_VAR 0 11
32642: PPUSH
32643: LD_VAR 0 12
32647: PPUSH
32648: CALL_OW 554
32652: AND
32653: IFFALSE 32693
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32655: LD_ADDR_VAR 0 13
32659: PUSH
32660: LD_VAR 0 13
32664: PPUSH
32665: LD_VAR 0 13
32669: PUSH
32670: LD_INT 1
32672: PLUS
32673: PPUSH
32674: LD_VAR 0 11
32678: PUSH
32679: LD_VAR 0 12
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PPUSH
32688: CALL_OW 2
32692: ST_TO_ADDR
// end ;
32693: GO 32601
32695: POP
32696: POP
32697: GO 32581
32699: POP
32700: POP
// if not list then
32701: LD_VAR 0 13
32705: NOT
32706: IFFALSE 32710
// exit ;
32708: GO 32781
// for i in list do
32710: LD_ADDR_VAR 0 6
32714: PUSH
32715: LD_VAR 0 13
32719: PUSH
32720: FOR_IN
32721: IFFALSE 32779
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32723: LD_VAR 0 1
32727: PPUSH
32728: LD_STRING M
32730: PUSH
32731: LD_VAR 0 6
32735: PUSH
32736: LD_INT 1
32738: ARRAY
32739: PUSH
32740: LD_VAR 0 6
32744: PUSH
32745: LD_INT 2
32747: ARRAY
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: PUSH
32770: EMPTY
32771: LIST
32772: PPUSH
32773: CALL_OW 447
32777: GO 32720
32779: POP
32780: POP
// end ;
32781: LD_VAR 0 5
32785: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32786: LD_EXP 123
32790: NOT
32791: IFFALSE 32841
32793: GO 32795
32795: DISABLE
// begin initHack := true ;
32796: LD_ADDR_EXP 123
32800: PUSH
32801: LD_INT 1
32803: ST_TO_ADDR
// hackTanks := [ ] ;
32804: LD_ADDR_EXP 124
32808: PUSH
32809: EMPTY
32810: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32811: LD_ADDR_EXP 125
32815: PUSH
32816: EMPTY
32817: ST_TO_ADDR
// hackLimit := 3 ;
32818: LD_ADDR_EXP 126
32822: PUSH
32823: LD_INT 3
32825: ST_TO_ADDR
// hackDist := 12 ;
32826: LD_ADDR_EXP 127
32830: PUSH
32831: LD_INT 12
32833: ST_TO_ADDR
// hackCounter := [ ] ;
32834: LD_ADDR_EXP 128
32838: PUSH
32839: EMPTY
32840: ST_TO_ADDR
// end ;
32841: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32842: LD_EXP 123
32846: PUSH
32847: LD_INT 34
32849: PUSH
32850: LD_EXP 135
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PPUSH
32859: CALL_OW 69
32863: AND
32864: IFFALSE 33119
32866: GO 32868
32868: DISABLE
32869: LD_INT 0
32871: PPUSH
32872: PPUSH
// begin enable ;
32873: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32874: LD_ADDR_VAR 0 1
32878: PUSH
32879: LD_INT 34
32881: PUSH
32882: LD_EXP 135
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PPUSH
32891: CALL_OW 69
32895: PUSH
32896: FOR_IN
32897: IFFALSE 33117
// begin if not i in hackTanks then
32899: LD_VAR 0 1
32903: PUSH
32904: LD_EXP 124
32908: IN
32909: NOT
32910: IFFALSE 32993
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32912: LD_ADDR_EXP 124
32916: PUSH
32917: LD_EXP 124
32921: PPUSH
32922: LD_EXP 124
32926: PUSH
32927: LD_INT 1
32929: PLUS
32930: PPUSH
32931: LD_VAR 0 1
32935: PPUSH
32936: CALL_OW 1
32940: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32941: LD_ADDR_EXP 125
32945: PUSH
32946: LD_EXP 125
32950: PPUSH
32951: LD_EXP 125
32955: PUSH
32956: LD_INT 1
32958: PLUS
32959: PPUSH
32960: EMPTY
32961: PPUSH
32962: CALL_OW 1
32966: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32967: LD_ADDR_EXP 128
32971: PUSH
32972: LD_EXP 128
32976: PPUSH
32977: LD_EXP 128
32981: PUSH
32982: LD_INT 1
32984: PLUS
32985: PPUSH
32986: EMPTY
32987: PPUSH
32988: CALL_OW 1
32992: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32993: LD_VAR 0 1
32997: PPUSH
32998: CALL_OW 302
33002: NOT
33003: IFFALSE 33016
// begin HackUnlinkAll ( i ) ;
33005: LD_VAR 0 1
33009: PPUSH
33010: CALL 33122 0 1
// continue ;
33014: GO 32896
// end ; HackCheckCapturedStatus ( i ) ;
33016: LD_VAR 0 1
33020: PPUSH
33021: CALL 33565 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33025: LD_ADDR_VAR 0 2
33029: PUSH
33030: LD_INT 81
33032: PUSH
33033: LD_VAR 0 1
33037: PPUSH
33038: CALL_OW 255
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 33
33049: PUSH
33050: LD_INT 3
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 91
33059: PUSH
33060: LD_VAR 0 1
33064: PUSH
33065: LD_EXP 127
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 50
33077: PUSH
33078: EMPTY
33079: LIST
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: PPUSH
33087: CALL_OW 69
33091: ST_TO_ADDR
// if not tmp then
33092: LD_VAR 0 2
33096: NOT
33097: IFFALSE 33101
// continue ;
33099: GO 32896
// HackLink ( i , tmp ) ;
33101: LD_VAR 0 1
33105: PPUSH
33106: LD_VAR 0 2
33110: PPUSH
33111: CALL 33258 0 2
// end ;
33115: GO 32896
33117: POP
33118: POP
// end ;
33119: PPOPN 2
33121: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33122: LD_INT 0
33124: PPUSH
33125: PPUSH
33126: PPUSH
// if not hack in hackTanks then
33127: LD_VAR 0 1
33131: PUSH
33132: LD_EXP 124
33136: IN
33137: NOT
33138: IFFALSE 33142
// exit ;
33140: GO 33253
// index := GetElementIndex ( hackTanks , hack ) ;
33142: LD_ADDR_VAR 0 4
33146: PUSH
33147: LD_EXP 124
33151: PPUSH
33152: LD_VAR 0 1
33156: PPUSH
33157: CALL 40895 0 2
33161: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33162: LD_EXP 125
33166: PUSH
33167: LD_VAR 0 4
33171: ARRAY
33172: IFFALSE 33253
// begin for i in hackTanksCaptured [ index ] do
33174: LD_ADDR_VAR 0 3
33178: PUSH
33179: LD_EXP 125
33183: PUSH
33184: LD_VAR 0 4
33188: ARRAY
33189: PUSH
33190: FOR_IN
33191: IFFALSE 33217
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33193: LD_VAR 0 3
33197: PUSH
33198: LD_INT 1
33200: ARRAY
33201: PPUSH
33202: LD_VAR 0 3
33206: PUSH
33207: LD_INT 2
33209: ARRAY
33210: PPUSH
33211: CALL_OW 235
33215: GO 33190
33217: POP
33218: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33219: LD_ADDR_EXP 125
33223: PUSH
33224: LD_EXP 125
33228: PPUSH
33229: LD_VAR 0 4
33233: PPUSH
33234: EMPTY
33235: PPUSH
33236: CALL_OW 1
33240: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33241: LD_VAR 0 1
33245: PPUSH
33246: LD_INT 0
33248: PPUSH
33249: CALL_OW 505
// end ; end ;
33253: LD_VAR 0 2
33257: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33258: LD_INT 0
33260: PPUSH
33261: PPUSH
33262: PPUSH
// if not hack in hackTanks or not vehicles then
33263: LD_VAR 0 1
33267: PUSH
33268: LD_EXP 124
33272: IN
33273: NOT
33274: PUSH
33275: LD_VAR 0 2
33279: NOT
33280: OR
33281: IFFALSE 33285
// exit ;
33283: GO 33560
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33285: LD_ADDR_VAR 0 2
33289: PUSH
33290: LD_VAR 0 1
33294: PPUSH
33295: LD_VAR 0 2
33299: PPUSH
33300: LD_INT 1
33302: PPUSH
33303: LD_INT 1
33305: PPUSH
33306: CALL 41545 0 4
33310: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33311: LD_ADDR_VAR 0 5
33315: PUSH
33316: LD_EXP 124
33320: PPUSH
33321: LD_VAR 0 1
33325: PPUSH
33326: CALL 40895 0 2
33330: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33331: LD_EXP 125
33335: PUSH
33336: LD_VAR 0 5
33340: ARRAY
33341: PUSH
33342: LD_EXP 126
33346: LESS
33347: IFFALSE 33536
// begin for i := 1 to vehicles do
33349: LD_ADDR_VAR 0 4
33353: PUSH
33354: DOUBLE
33355: LD_INT 1
33357: DEC
33358: ST_TO_ADDR
33359: LD_VAR 0 2
33363: PUSH
33364: FOR_TO
33365: IFFALSE 33534
// begin if hackTanksCaptured [ index ] = hackLimit then
33367: LD_EXP 125
33371: PUSH
33372: LD_VAR 0 5
33376: ARRAY
33377: PUSH
33378: LD_EXP 126
33382: EQUAL
33383: IFFALSE 33387
// break ;
33385: GO 33534
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33387: LD_ADDR_EXP 128
33391: PUSH
33392: LD_EXP 128
33396: PPUSH
33397: LD_VAR 0 5
33401: PPUSH
33402: LD_EXP 128
33406: PUSH
33407: LD_VAR 0 5
33411: ARRAY
33412: PUSH
33413: LD_INT 1
33415: PLUS
33416: PPUSH
33417: CALL_OW 1
33421: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33422: LD_ADDR_EXP 125
33426: PUSH
33427: LD_EXP 125
33431: PPUSH
33432: LD_VAR 0 5
33436: PUSH
33437: LD_EXP 125
33441: PUSH
33442: LD_VAR 0 5
33446: ARRAY
33447: PUSH
33448: LD_INT 1
33450: PLUS
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PPUSH
33456: LD_VAR 0 2
33460: PUSH
33461: LD_VAR 0 4
33465: ARRAY
33466: PUSH
33467: LD_VAR 0 2
33471: PUSH
33472: LD_VAR 0 4
33476: ARRAY
33477: PPUSH
33478: CALL_OW 255
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PPUSH
33487: CALL 41110 0 3
33491: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33492: LD_VAR 0 2
33496: PUSH
33497: LD_VAR 0 4
33501: ARRAY
33502: PPUSH
33503: LD_VAR 0 1
33507: PPUSH
33508: CALL_OW 255
33512: PPUSH
33513: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33517: LD_VAR 0 2
33521: PUSH
33522: LD_VAR 0 4
33526: ARRAY
33527: PPUSH
33528: CALL_OW 141
// end ;
33532: GO 33364
33534: POP
33535: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33536: LD_VAR 0 1
33540: PPUSH
33541: LD_EXP 125
33545: PUSH
33546: LD_VAR 0 5
33550: ARRAY
33551: PUSH
33552: LD_INT 0
33554: PLUS
33555: PPUSH
33556: CALL_OW 505
// end ;
33560: LD_VAR 0 3
33564: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33565: LD_INT 0
33567: PPUSH
33568: PPUSH
33569: PPUSH
33570: PPUSH
// if not hack in hackTanks then
33571: LD_VAR 0 1
33575: PUSH
33576: LD_EXP 124
33580: IN
33581: NOT
33582: IFFALSE 33586
// exit ;
33584: GO 33826
// index := GetElementIndex ( hackTanks , hack ) ;
33586: LD_ADDR_VAR 0 4
33590: PUSH
33591: LD_EXP 124
33595: PPUSH
33596: LD_VAR 0 1
33600: PPUSH
33601: CALL 40895 0 2
33605: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33606: LD_ADDR_VAR 0 3
33610: PUSH
33611: DOUBLE
33612: LD_EXP 125
33616: PUSH
33617: LD_VAR 0 4
33621: ARRAY
33622: INC
33623: ST_TO_ADDR
33624: LD_INT 1
33626: PUSH
33627: FOR_DOWNTO
33628: IFFALSE 33800
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33630: LD_ADDR_VAR 0 5
33634: PUSH
33635: LD_EXP 125
33639: PUSH
33640: LD_VAR 0 4
33644: ARRAY
33645: PUSH
33646: LD_VAR 0 3
33650: ARRAY
33651: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33652: LD_VAR 0 5
33656: PUSH
33657: LD_INT 1
33659: ARRAY
33660: PPUSH
33661: CALL_OW 302
33665: NOT
33666: PUSH
33667: LD_VAR 0 5
33671: PUSH
33672: LD_INT 1
33674: ARRAY
33675: PPUSH
33676: CALL_OW 255
33680: PUSH
33681: LD_VAR 0 1
33685: PPUSH
33686: CALL_OW 255
33690: NONEQUAL
33691: OR
33692: IFFALSE 33798
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33694: LD_VAR 0 5
33698: PUSH
33699: LD_INT 1
33701: ARRAY
33702: PPUSH
33703: CALL_OW 305
33707: PUSH
33708: LD_VAR 0 5
33712: PUSH
33713: LD_INT 1
33715: ARRAY
33716: PPUSH
33717: CALL_OW 255
33721: PUSH
33722: LD_VAR 0 1
33726: PPUSH
33727: CALL_OW 255
33731: EQUAL
33732: AND
33733: IFFALSE 33757
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33735: LD_VAR 0 5
33739: PUSH
33740: LD_INT 1
33742: ARRAY
33743: PPUSH
33744: LD_VAR 0 5
33748: PUSH
33749: LD_INT 2
33751: ARRAY
33752: PPUSH
33753: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33757: LD_ADDR_EXP 125
33761: PUSH
33762: LD_EXP 125
33766: PPUSH
33767: LD_VAR 0 4
33771: PPUSH
33772: LD_EXP 125
33776: PUSH
33777: LD_VAR 0 4
33781: ARRAY
33782: PPUSH
33783: LD_VAR 0 3
33787: PPUSH
33788: CALL_OW 3
33792: PPUSH
33793: CALL_OW 1
33797: ST_TO_ADDR
// end ; end ;
33798: GO 33627
33800: POP
33801: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33802: LD_VAR 0 1
33806: PPUSH
33807: LD_EXP 125
33811: PUSH
33812: LD_VAR 0 4
33816: ARRAY
33817: PUSH
33818: LD_INT 0
33820: PLUS
33821: PPUSH
33822: CALL_OW 505
// end ;
33826: LD_VAR 0 2
33830: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33831: LD_INT 0
33833: PPUSH
33834: PPUSH
33835: PPUSH
33836: PPUSH
// if not hack in hackTanks then
33837: LD_VAR 0 1
33841: PUSH
33842: LD_EXP 124
33846: IN
33847: NOT
33848: IFFALSE 33852
// exit ;
33850: GO 33937
// index := GetElementIndex ( hackTanks , hack ) ;
33852: LD_ADDR_VAR 0 5
33856: PUSH
33857: LD_EXP 124
33861: PPUSH
33862: LD_VAR 0 1
33866: PPUSH
33867: CALL 40895 0 2
33871: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33872: LD_ADDR_VAR 0 4
33876: PUSH
33877: DOUBLE
33878: LD_INT 1
33880: DEC
33881: ST_TO_ADDR
33882: LD_EXP 125
33886: PUSH
33887: LD_VAR 0 5
33891: ARRAY
33892: PUSH
33893: FOR_TO
33894: IFFALSE 33935
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33896: LD_EXP 125
33900: PUSH
33901: LD_VAR 0 5
33905: ARRAY
33906: PUSH
33907: LD_VAR 0 4
33911: ARRAY
33912: PUSH
33913: LD_INT 1
33915: ARRAY
33916: PUSH
33917: LD_VAR 0 2
33921: EQUAL
33922: IFFALSE 33933
// KillUnit ( vehicle ) ;
33924: LD_VAR 0 2
33928: PPUSH
33929: CALL_OW 66
33933: GO 33893
33935: POP
33936: POP
// end ;
33937: LD_VAR 0 3
33941: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33942: LD_EXP 129
33946: NOT
33947: IFFALSE 33982
33949: GO 33951
33951: DISABLE
// begin initMiner := true ;
33952: LD_ADDR_EXP 129
33956: PUSH
33957: LD_INT 1
33959: ST_TO_ADDR
// minersList := [ ] ;
33960: LD_ADDR_EXP 130
33964: PUSH
33965: EMPTY
33966: ST_TO_ADDR
// minerMinesList := [ ] ;
33967: LD_ADDR_EXP 131
33971: PUSH
33972: EMPTY
33973: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33974: LD_ADDR_EXP 132
33978: PUSH
33979: LD_INT 5
33981: ST_TO_ADDR
// end ;
33982: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33983: LD_EXP 129
33987: PUSH
33988: LD_INT 34
33990: PUSH
33991: LD_EXP 140
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PPUSH
34000: CALL_OW 69
34004: AND
34005: IFFALSE 34468
34007: GO 34009
34009: DISABLE
34010: LD_INT 0
34012: PPUSH
34013: PPUSH
34014: PPUSH
34015: PPUSH
// begin enable ;
34016: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34017: LD_ADDR_VAR 0 1
34021: PUSH
34022: LD_INT 34
34024: PUSH
34025: LD_EXP 140
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PPUSH
34034: CALL_OW 69
34038: PUSH
34039: FOR_IN
34040: IFFALSE 34112
// begin if not i in minersList then
34042: LD_VAR 0 1
34046: PUSH
34047: LD_EXP 130
34051: IN
34052: NOT
34053: IFFALSE 34110
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34055: LD_ADDR_EXP 130
34059: PUSH
34060: LD_EXP 130
34064: PPUSH
34065: LD_EXP 130
34069: PUSH
34070: LD_INT 1
34072: PLUS
34073: PPUSH
34074: LD_VAR 0 1
34078: PPUSH
34079: CALL_OW 1
34083: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34084: LD_ADDR_EXP 131
34088: PUSH
34089: LD_EXP 131
34093: PPUSH
34094: LD_EXP 131
34098: PUSH
34099: LD_INT 1
34101: PLUS
34102: PPUSH
34103: EMPTY
34104: PPUSH
34105: CALL_OW 1
34109: ST_TO_ADDR
// end end ;
34110: GO 34039
34112: POP
34113: POP
// for i := minerMinesList downto 1 do
34114: LD_ADDR_VAR 0 1
34118: PUSH
34119: DOUBLE
34120: LD_EXP 131
34124: INC
34125: ST_TO_ADDR
34126: LD_INT 1
34128: PUSH
34129: FOR_DOWNTO
34130: IFFALSE 34466
// begin if IsLive ( minersList [ i ] ) then
34132: LD_EXP 130
34136: PUSH
34137: LD_VAR 0 1
34141: ARRAY
34142: PPUSH
34143: CALL_OW 300
34147: IFFALSE 34175
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34149: LD_EXP 130
34153: PUSH
34154: LD_VAR 0 1
34158: ARRAY
34159: PPUSH
34160: LD_EXP 131
34164: PUSH
34165: LD_VAR 0 1
34169: ARRAY
34170: PPUSH
34171: CALL_OW 505
// if not minerMinesList [ i ] then
34175: LD_EXP 131
34179: PUSH
34180: LD_VAR 0 1
34184: ARRAY
34185: NOT
34186: IFFALSE 34190
// continue ;
34188: GO 34129
// for j := minerMinesList [ i ] downto 1 do
34190: LD_ADDR_VAR 0 2
34194: PUSH
34195: DOUBLE
34196: LD_EXP 131
34200: PUSH
34201: LD_VAR 0 1
34205: ARRAY
34206: INC
34207: ST_TO_ADDR
34208: LD_INT 1
34210: PUSH
34211: FOR_DOWNTO
34212: IFFALSE 34462
// begin side := GetSide ( minersList [ i ] ) ;
34214: LD_ADDR_VAR 0 3
34218: PUSH
34219: LD_EXP 130
34223: PUSH
34224: LD_VAR 0 1
34228: ARRAY
34229: PPUSH
34230: CALL_OW 255
34234: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34235: LD_ADDR_VAR 0 4
34239: PUSH
34240: LD_EXP 131
34244: PUSH
34245: LD_VAR 0 1
34249: ARRAY
34250: PUSH
34251: LD_VAR 0 2
34255: ARRAY
34256: PUSH
34257: LD_INT 1
34259: ARRAY
34260: PPUSH
34261: LD_EXP 131
34265: PUSH
34266: LD_VAR 0 1
34270: ARRAY
34271: PUSH
34272: LD_VAR 0 2
34276: ARRAY
34277: PUSH
34278: LD_INT 2
34280: ARRAY
34281: PPUSH
34282: CALL_OW 428
34286: ST_TO_ADDR
// if not tmp then
34287: LD_VAR 0 4
34291: NOT
34292: IFFALSE 34296
// continue ;
34294: GO 34211
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34296: LD_VAR 0 4
34300: PUSH
34301: LD_INT 81
34303: PUSH
34304: LD_VAR 0 3
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PPUSH
34313: CALL_OW 69
34317: IN
34318: PUSH
34319: LD_EXP 131
34323: PUSH
34324: LD_VAR 0 1
34328: ARRAY
34329: PUSH
34330: LD_VAR 0 2
34334: ARRAY
34335: PUSH
34336: LD_INT 1
34338: ARRAY
34339: PPUSH
34340: LD_EXP 131
34344: PUSH
34345: LD_VAR 0 1
34349: ARRAY
34350: PUSH
34351: LD_VAR 0 2
34355: ARRAY
34356: PUSH
34357: LD_INT 2
34359: ARRAY
34360: PPUSH
34361: CALL_OW 458
34365: AND
34366: IFFALSE 34460
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34368: LD_EXP 131
34372: PUSH
34373: LD_VAR 0 1
34377: ARRAY
34378: PUSH
34379: LD_VAR 0 2
34383: ARRAY
34384: PUSH
34385: LD_INT 1
34387: ARRAY
34388: PPUSH
34389: LD_EXP 131
34393: PUSH
34394: LD_VAR 0 1
34398: ARRAY
34399: PUSH
34400: LD_VAR 0 2
34404: ARRAY
34405: PUSH
34406: LD_INT 2
34408: ARRAY
34409: PPUSH
34410: LD_VAR 0 3
34414: PPUSH
34415: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34419: LD_ADDR_EXP 131
34423: PUSH
34424: LD_EXP 131
34428: PPUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: LD_EXP 131
34438: PUSH
34439: LD_VAR 0 1
34443: ARRAY
34444: PPUSH
34445: LD_VAR 0 2
34449: PPUSH
34450: CALL_OW 3
34454: PPUSH
34455: CALL_OW 1
34459: ST_TO_ADDR
// end ; end ;
34460: GO 34211
34462: POP
34463: POP
// end ;
34464: GO 34129
34466: POP
34467: POP
// end ;
34468: PPOPN 4
34470: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34471: LD_INT 0
34473: PPUSH
34474: PPUSH
// result := false ;
34475: LD_ADDR_VAR 0 4
34479: PUSH
34480: LD_INT 0
34482: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34483: LD_VAR 0 1
34487: PPUSH
34488: CALL_OW 264
34492: PUSH
34493: LD_EXP 140
34497: EQUAL
34498: NOT
34499: IFFALSE 34503
// exit ;
34501: GO 34743
// index := GetElementIndex ( minersList , unit ) ;
34503: LD_ADDR_VAR 0 5
34507: PUSH
34508: LD_EXP 130
34512: PPUSH
34513: LD_VAR 0 1
34517: PPUSH
34518: CALL 40895 0 2
34522: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34523: LD_EXP 131
34527: PUSH
34528: LD_VAR 0 5
34532: ARRAY
34533: PUSH
34534: LD_EXP 132
34538: GREATEREQUAL
34539: IFFALSE 34543
// exit ;
34541: GO 34743
// ComMoveXY ( unit , x , y ) ;
34543: LD_VAR 0 1
34547: PPUSH
34548: LD_VAR 0 2
34552: PPUSH
34553: LD_VAR 0 3
34557: PPUSH
34558: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34562: LD_INT 35
34564: PPUSH
34565: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34569: LD_VAR 0 1
34573: PPUSH
34574: LD_VAR 0 2
34578: PPUSH
34579: LD_VAR 0 3
34583: PPUSH
34584: CALL 71667 0 3
34588: NOT
34589: PUSH
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL_OW 314
34599: AND
34600: IFFALSE 34604
// exit ;
34602: GO 34743
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34604: LD_VAR 0 2
34608: PPUSH
34609: LD_VAR 0 3
34613: PPUSH
34614: CALL_OW 428
34618: PUSH
34619: LD_VAR 0 1
34623: EQUAL
34624: PUSH
34625: LD_VAR 0 1
34629: PPUSH
34630: CALL_OW 314
34634: NOT
34635: AND
34636: IFFALSE 34562
// PlaySoundXY ( x , y , PlantMine ) ;
34638: LD_VAR 0 2
34642: PPUSH
34643: LD_VAR 0 3
34647: PPUSH
34648: LD_STRING PlantMine
34650: PPUSH
34651: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34655: LD_VAR 0 2
34659: PPUSH
34660: LD_VAR 0 3
34664: PPUSH
34665: LD_VAR 0 1
34669: PPUSH
34670: CALL_OW 255
34674: PPUSH
34675: LD_INT 0
34677: PPUSH
34678: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34682: LD_ADDR_EXP 131
34686: PUSH
34687: LD_EXP 131
34691: PPUSH
34692: LD_VAR 0 5
34696: PUSH
34697: LD_EXP 131
34701: PUSH
34702: LD_VAR 0 5
34706: ARRAY
34707: PUSH
34708: LD_INT 1
34710: PLUS
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PPUSH
34716: LD_VAR 0 2
34720: PUSH
34721: LD_VAR 0 3
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PPUSH
34730: CALL 41110 0 3
34734: ST_TO_ADDR
// result := true ;
34735: LD_ADDR_VAR 0 4
34739: PUSH
34740: LD_INT 1
34742: ST_TO_ADDR
// end ;
34743: LD_VAR 0 4
34747: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34748: LD_INT 0
34750: PPUSH
34751: PPUSH
34752: PPUSH
// if not unit in minersList then
34753: LD_VAR 0 1
34757: PUSH
34758: LD_EXP 130
34762: IN
34763: NOT
34764: IFFALSE 34768
// exit ;
34766: GO 35160
// index := GetElementIndex ( minersList , unit ) ;
34768: LD_ADDR_VAR 0 6
34772: PUSH
34773: LD_EXP 130
34777: PPUSH
34778: LD_VAR 0 1
34782: PPUSH
34783: CALL 40895 0 2
34787: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34788: LD_ADDR_VAR 0 5
34792: PUSH
34793: DOUBLE
34794: LD_EXP 131
34798: PUSH
34799: LD_VAR 0 6
34803: ARRAY
34804: INC
34805: ST_TO_ADDR
34806: LD_INT 1
34808: PUSH
34809: FOR_DOWNTO
34810: IFFALSE 34971
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34812: LD_EXP 131
34816: PUSH
34817: LD_VAR 0 6
34821: ARRAY
34822: PUSH
34823: LD_VAR 0 5
34827: ARRAY
34828: PUSH
34829: LD_INT 1
34831: ARRAY
34832: PUSH
34833: LD_VAR 0 2
34837: EQUAL
34838: PUSH
34839: LD_EXP 131
34843: PUSH
34844: LD_VAR 0 6
34848: ARRAY
34849: PUSH
34850: LD_VAR 0 5
34854: ARRAY
34855: PUSH
34856: LD_INT 2
34858: ARRAY
34859: PUSH
34860: LD_VAR 0 3
34864: EQUAL
34865: AND
34866: IFFALSE 34969
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34868: LD_EXP 131
34872: PUSH
34873: LD_VAR 0 6
34877: ARRAY
34878: PUSH
34879: LD_VAR 0 5
34883: ARRAY
34884: PUSH
34885: LD_INT 1
34887: ARRAY
34888: PPUSH
34889: LD_EXP 131
34893: PUSH
34894: LD_VAR 0 6
34898: ARRAY
34899: PUSH
34900: LD_VAR 0 5
34904: ARRAY
34905: PUSH
34906: LD_INT 2
34908: ARRAY
34909: PPUSH
34910: LD_VAR 0 1
34914: PPUSH
34915: CALL_OW 255
34919: PPUSH
34920: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34924: LD_ADDR_EXP 131
34928: PUSH
34929: LD_EXP 131
34933: PPUSH
34934: LD_VAR 0 6
34938: PPUSH
34939: LD_EXP 131
34943: PUSH
34944: LD_VAR 0 6
34948: ARRAY
34949: PPUSH
34950: LD_VAR 0 5
34954: PPUSH
34955: CALL_OW 3
34959: PPUSH
34960: CALL_OW 1
34964: ST_TO_ADDR
// exit ;
34965: POP
34966: POP
34967: GO 35160
// end ; end ;
34969: GO 34809
34971: POP
34972: POP
// for i := minerMinesList [ index ] downto 1 do
34973: LD_ADDR_VAR 0 5
34977: PUSH
34978: DOUBLE
34979: LD_EXP 131
34983: PUSH
34984: LD_VAR 0 6
34988: ARRAY
34989: INC
34990: ST_TO_ADDR
34991: LD_INT 1
34993: PUSH
34994: FOR_DOWNTO
34995: IFFALSE 35158
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34997: LD_EXP 131
35001: PUSH
35002: LD_VAR 0 6
35006: ARRAY
35007: PUSH
35008: LD_VAR 0 5
35012: ARRAY
35013: PUSH
35014: LD_INT 1
35016: ARRAY
35017: PPUSH
35018: LD_EXP 131
35022: PUSH
35023: LD_VAR 0 6
35027: ARRAY
35028: PUSH
35029: LD_VAR 0 5
35033: ARRAY
35034: PUSH
35035: LD_INT 2
35037: ARRAY
35038: PPUSH
35039: LD_VAR 0 2
35043: PPUSH
35044: LD_VAR 0 3
35048: PPUSH
35049: CALL_OW 298
35053: PUSH
35054: LD_INT 6
35056: LESS
35057: IFFALSE 35156
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35059: LD_EXP 131
35063: PUSH
35064: LD_VAR 0 6
35068: ARRAY
35069: PUSH
35070: LD_VAR 0 5
35074: ARRAY
35075: PUSH
35076: LD_INT 1
35078: ARRAY
35079: PPUSH
35080: LD_EXP 131
35084: PUSH
35085: LD_VAR 0 6
35089: ARRAY
35090: PUSH
35091: LD_VAR 0 5
35095: ARRAY
35096: PUSH
35097: LD_INT 2
35099: ARRAY
35100: PPUSH
35101: LD_VAR 0 1
35105: PPUSH
35106: CALL_OW 255
35110: PPUSH
35111: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35115: LD_ADDR_EXP 131
35119: PUSH
35120: LD_EXP 131
35124: PPUSH
35125: LD_VAR 0 6
35129: PPUSH
35130: LD_EXP 131
35134: PUSH
35135: LD_VAR 0 6
35139: ARRAY
35140: PPUSH
35141: LD_VAR 0 5
35145: PPUSH
35146: CALL_OW 3
35150: PPUSH
35151: CALL_OW 1
35155: ST_TO_ADDR
// end ; end ;
35156: GO 34994
35158: POP
35159: POP
// end ;
35160: LD_VAR 0 4
35164: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35165: LD_INT 0
35167: PPUSH
35168: PPUSH
35169: PPUSH
35170: PPUSH
35171: PPUSH
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35176: LD_VAR 0 1
35180: PPUSH
35181: CALL_OW 264
35185: PUSH
35186: LD_EXP 140
35190: EQUAL
35191: NOT
35192: PUSH
35193: LD_VAR 0 1
35197: PUSH
35198: LD_EXP 130
35202: IN
35203: NOT
35204: OR
35205: IFFALSE 35209
// exit ;
35207: GO 35531
// index := GetElementIndex ( minersList , unit ) ;
35209: LD_ADDR_VAR 0 6
35213: PUSH
35214: LD_EXP 130
35218: PPUSH
35219: LD_VAR 0 1
35223: PPUSH
35224: CALL 40895 0 2
35228: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35229: LD_ADDR_VAR 0 8
35233: PUSH
35234: LD_EXP 132
35238: PUSH
35239: LD_EXP 131
35243: PUSH
35244: LD_VAR 0 6
35248: ARRAY
35249: MINUS
35250: ST_TO_ADDR
// if not minesFreeAmount then
35251: LD_VAR 0 8
35255: NOT
35256: IFFALSE 35260
// exit ;
35258: GO 35531
// tmp := [ ] ;
35260: LD_ADDR_VAR 0 7
35264: PUSH
35265: EMPTY
35266: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35267: LD_ADDR_VAR 0 5
35271: PUSH
35272: DOUBLE
35273: LD_INT 1
35275: DEC
35276: ST_TO_ADDR
35277: LD_VAR 0 8
35281: PUSH
35282: FOR_TO
35283: IFFALSE 35478
// begin _d := rand ( 0 , 5 ) ;
35285: LD_ADDR_VAR 0 11
35289: PUSH
35290: LD_INT 0
35292: PPUSH
35293: LD_INT 5
35295: PPUSH
35296: CALL_OW 12
35300: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35301: LD_ADDR_VAR 0 12
35305: PUSH
35306: LD_INT 2
35308: PPUSH
35309: LD_INT 6
35311: PPUSH
35312: CALL_OW 12
35316: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35317: LD_ADDR_VAR 0 9
35321: PUSH
35322: LD_VAR 0 2
35326: PPUSH
35327: LD_VAR 0 11
35331: PPUSH
35332: LD_VAR 0 12
35336: PPUSH
35337: CALL_OW 272
35341: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35342: LD_ADDR_VAR 0 10
35346: PUSH
35347: LD_VAR 0 3
35351: PPUSH
35352: LD_VAR 0 11
35356: PPUSH
35357: LD_VAR 0 12
35361: PPUSH
35362: CALL_OW 273
35366: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35367: LD_VAR 0 9
35371: PPUSH
35372: LD_VAR 0 10
35376: PPUSH
35377: CALL_OW 488
35381: PUSH
35382: LD_VAR 0 9
35386: PUSH
35387: LD_VAR 0 10
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_VAR 0 7
35400: IN
35401: NOT
35402: AND
35403: PUSH
35404: LD_VAR 0 9
35408: PPUSH
35409: LD_VAR 0 10
35413: PPUSH
35414: CALL_OW 458
35418: NOT
35419: AND
35420: IFFALSE 35462
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35422: LD_ADDR_VAR 0 7
35426: PUSH
35427: LD_VAR 0 7
35431: PPUSH
35432: LD_VAR 0 7
35436: PUSH
35437: LD_INT 1
35439: PLUS
35440: PPUSH
35441: LD_VAR 0 9
35445: PUSH
35446: LD_VAR 0 10
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PPUSH
35455: CALL_OW 1
35459: ST_TO_ADDR
35460: GO 35476
// i := i - 1 ;
35462: LD_ADDR_VAR 0 5
35466: PUSH
35467: LD_VAR 0 5
35471: PUSH
35472: LD_INT 1
35474: MINUS
35475: ST_TO_ADDR
// end ;
35476: GO 35282
35478: POP
35479: POP
// for i in tmp do
35480: LD_ADDR_VAR 0 5
35484: PUSH
35485: LD_VAR 0 7
35489: PUSH
35490: FOR_IN
35491: IFFALSE 35529
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35493: LD_VAR 0 1
35497: PPUSH
35498: LD_VAR 0 5
35502: PUSH
35503: LD_INT 1
35505: ARRAY
35506: PPUSH
35507: LD_VAR 0 5
35511: PUSH
35512: LD_INT 2
35514: ARRAY
35515: PPUSH
35516: CALL 34471 0 3
35520: NOT
35521: IFFALSE 35527
// exit ;
35523: POP
35524: POP
35525: GO 35531
35527: GO 35490
35529: POP
35530: POP
// end ;
35531: LD_VAR 0 4
35535: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35536: LD_INT 0
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
// if not GetClass ( unit ) = class_sniper then
35545: LD_VAR 0 1
35549: PPUSH
35550: CALL_OW 257
35554: PUSH
35555: LD_INT 5
35557: EQUAL
35558: NOT
35559: IFFALSE 35563
// exit ;
35561: GO 35951
// dist := 8 ;
35563: LD_ADDR_VAR 0 5
35567: PUSH
35568: LD_INT 8
35570: ST_TO_ADDR
// viewRange := 12 ;
35571: LD_ADDR_VAR 0 7
35575: PUSH
35576: LD_INT 12
35578: ST_TO_ADDR
// side := GetSide ( unit ) ;
35579: LD_ADDR_VAR 0 6
35583: PUSH
35584: LD_VAR 0 1
35588: PPUSH
35589: CALL_OW 255
35593: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35594: LD_INT 61
35596: PPUSH
35597: LD_VAR 0 6
35601: PPUSH
35602: CALL_OW 321
35606: PUSH
35607: LD_INT 2
35609: EQUAL
35610: IFFALSE 35620
// viewRange := 16 ;
35612: LD_ADDR_VAR 0 7
35616: PUSH
35617: LD_INT 16
35619: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35620: LD_VAR 0 1
35624: PPUSH
35625: LD_VAR 0 2
35629: PPUSH
35630: LD_VAR 0 3
35634: PPUSH
35635: CALL_OW 297
35639: PUSH
35640: LD_VAR 0 5
35644: GREATER
35645: IFFALSE 35724
// begin ComMoveXY ( unit , x , y ) ;
35647: LD_VAR 0 1
35651: PPUSH
35652: LD_VAR 0 2
35656: PPUSH
35657: LD_VAR 0 3
35661: PPUSH
35662: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35666: LD_INT 35
35668: PPUSH
35669: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35673: LD_VAR 0 1
35677: PPUSH
35678: LD_VAR 0 2
35682: PPUSH
35683: LD_VAR 0 3
35687: PPUSH
35688: CALL 71667 0 3
35692: NOT
35693: IFFALSE 35697
// exit ;
35695: GO 35951
// until GetDistUnitXY ( unit , x , y ) < dist ;
35697: LD_VAR 0 1
35701: PPUSH
35702: LD_VAR 0 2
35706: PPUSH
35707: LD_VAR 0 3
35711: PPUSH
35712: CALL_OW 297
35716: PUSH
35717: LD_VAR 0 5
35721: LESS
35722: IFFALSE 35666
// end ; ComTurnXY ( unit , x , y ) ;
35724: LD_VAR 0 1
35728: PPUSH
35729: LD_VAR 0 2
35733: PPUSH
35734: LD_VAR 0 3
35738: PPUSH
35739: CALL_OW 118
// wait ( 5 ) ;
35743: LD_INT 5
35745: PPUSH
35746: CALL_OW 67
// _d := GetDir ( unit ) ;
35750: LD_ADDR_VAR 0 10
35754: PUSH
35755: LD_VAR 0 1
35759: PPUSH
35760: CALL_OW 254
35764: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35765: LD_ADDR_VAR 0 8
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 250
35779: PPUSH
35780: LD_VAR 0 10
35784: PPUSH
35785: LD_VAR 0 5
35789: PPUSH
35790: CALL_OW 272
35794: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35795: LD_ADDR_VAR 0 9
35799: PUSH
35800: LD_VAR 0 1
35804: PPUSH
35805: CALL_OW 251
35809: PPUSH
35810: LD_VAR 0 10
35814: PPUSH
35815: LD_VAR 0 5
35819: PPUSH
35820: CALL_OW 273
35824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35825: LD_VAR 0 8
35829: PPUSH
35830: LD_VAR 0 9
35834: PPUSH
35835: CALL_OW 488
35839: NOT
35840: IFFALSE 35844
// exit ;
35842: GO 35951
// ComAnimCustom ( unit , 1 ) ;
35844: LD_VAR 0 1
35848: PPUSH
35849: LD_INT 1
35851: PPUSH
35852: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35856: LD_VAR 0 8
35860: PPUSH
35861: LD_VAR 0 9
35865: PPUSH
35866: LD_VAR 0 6
35870: PPUSH
35871: LD_VAR 0 7
35875: PPUSH
35876: CALL_OW 330
// repeat wait ( 1 ) ;
35880: LD_INT 1
35882: PPUSH
35883: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 316
35896: PUSH
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 314
35906: OR
35907: PUSH
35908: LD_VAR 0 1
35912: PPUSH
35913: CALL_OW 302
35917: NOT
35918: OR
35919: PUSH
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL_OW 301
35929: OR
35930: IFFALSE 35880
// RemoveSeeing ( _x , _y , side ) ;
35932: LD_VAR 0 8
35936: PPUSH
35937: LD_VAR 0 9
35941: PPUSH
35942: LD_VAR 0 6
35946: PPUSH
35947: CALL_OW 331
// end ; end_of_file
35951: LD_VAR 0 4
35955: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
35956: LD_INT 0
35958: PPUSH
// ar_miner := 81 ;
35959: LD_ADDR_EXP 140
35963: PUSH
35964: LD_INT 81
35966: ST_TO_ADDR
// ar_crane := 88 ;
35967: LD_ADDR_EXP 139
35971: PUSH
35972: LD_INT 88
35974: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
35975: LD_ADDR_EXP 134
35979: PUSH
35980: LD_INT 89
35982: ST_TO_ADDR
// us_hack := 99 ;
35983: LD_ADDR_EXP 135
35987: PUSH
35988: LD_INT 99
35990: ST_TO_ADDR
// us_artillery := 97 ;
35991: LD_ADDR_EXP 136
35995: PUSH
35996: LD_INT 97
35998: ST_TO_ADDR
// ar_bio_bomb := 91 ;
35999: LD_ADDR_EXP 137
36003: PUSH
36004: LD_INT 91
36006: ST_TO_ADDR
// ar_mortar := 92 ;
36007: LD_ADDR_EXP 138
36011: PUSH
36012: LD_INT 92
36014: ST_TO_ADDR
// ru_radar := 98 ;
36015: LD_ADDR_EXP 133
36019: PUSH
36020: LD_INT 98
36022: ST_TO_ADDR
// tech_Artillery := 80 ;
36023: LD_ADDR_EXP 141
36027: PUSH
36028: LD_INT 80
36030: ST_TO_ADDR
// tech_RadMat := 81 ;
36031: LD_ADDR_EXP 142
36035: PUSH
36036: LD_INT 81
36038: ST_TO_ADDR
// tech_BasicTools := 82 ;
36039: LD_ADDR_EXP 143
36043: PUSH
36044: LD_INT 82
36046: ST_TO_ADDR
// tech_Cargo := 83 ;
36047: LD_ADDR_EXP 144
36051: PUSH
36052: LD_INT 83
36054: ST_TO_ADDR
// tech_Track := 84 ;
36055: LD_ADDR_EXP 145
36059: PUSH
36060: LD_INT 84
36062: ST_TO_ADDR
// tech_Crane := 85 ;
36063: LD_ADDR_EXP 146
36067: PUSH
36068: LD_INT 85
36070: ST_TO_ADDR
// tech_Bulldozer := 86 ;
36071: LD_ADDR_EXP 147
36075: PUSH
36076: LD_INT 86
36078: ST_TO_ADDR
// tech_Hovercraft := 87 ;
36079: LD_ADDR_EXP 148
36083: PUSH
36084: LD_INT 87
36086: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
36087: LD_ADDR_EXP 149
36091: PUSH
36092: LD_INT 88
36094: ST_TO_ADDR
// class_mastodont := 31 ;
36095: LD_ADDR_EXP 150
36099: PUSH
36100: LD_INT 31
36102: ST_TO_ADDR
// class_horse := 21 ;
36103: LD_ADDR_EXP 151
36107: PUSH
36108: LD_INT 21
36110: ST_TO_ADDR
// end ;
36111: LD_VAR 0 1
36115: RET
// every 1 do
36116: GO 36118
36118: DISABLE
// InitGlobalVariables ; end_of_file
36119: CALL 35956 0 0
36123: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36124: LD_INT 0
36126: PPUSH
36127: PPUSH
// if exist_mode then
36128: LD_VAR 0 2
36132: IFFALSE 36157
// unit := CreateCharacter ( prefix & ident ) else
36134: LD_ADDR_VAR 0 5
36138: PUSH
36139: LD_VAR 0 3
36143: PUSH
36144: LD_VAR 0 1
36148: STR
36149: PPUSH
36150: CALL_OW 34
36154: ST_TO_ADDR
36155: GO 36172
// unit := NewCharacter ( ident ) ;
36157: LD_ADDR_VAR 0 5
36161: PUSH
36162: LD_VAR 0 1
36166: PPUSH
36167: CALL_OW 25
36171: ST_TO_ADDR
// result := unit ;
36172: LD_ADDR_VAR 0 4
36176: PUSH
36177: LD_VAR 0 5
36181: ST_TO_ADDR
// end ;
36182: LD_VAR 0 4
36186: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36187: LD_INT 0
36189: PPUSH
36190: PPUSH
// if not side or not nation then
36191: LD_VAR 0 1
36195: NOT
36196: PUSH
36197: LD_VAR 0 2
36201: NOT
36202: OR
36203: IFFALSE 36207
// exit ;
36205: GO 36975
// case nation of nation_american :
36207: LD_VAR 0 2
36211: PUSH
36212: LD_INT 1
36214: DOUBLE
36215: EQUAL
36216: IFTRUE 36220
36218: GO 36434
36220: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36221: LD_ADDR_VAR 0 4
36225: PUSH
36226: LD_INT 35
36228: PUSH
36229: LD_INT 45
36231: PUSH
36232: LD_INT 46
36234: PUSH
36235: LD_INT 47
36237: PUSH
36238: LD_INT 82
36240: PUSH
36241: LD_INT 83
36243: PUSH
36244: LD_INT 84
36246: PUSH
36247: LD_INT 85
36249: PUSH
36250: LD_INT 86
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: LD_INT 6
36261: PUSH
36262: LD_INT 15
36264: PUSH
36265: LD_INT 16
36267: PUSH
36268: LD_INT 7
36270: PUSH
36271: LD_INT 12
36273: PUSH
36274: LD_INT 13
36276: PUSH
36277: LD_INT 10
36279: PUSH
36280: LD_INT 14
36282: PUSH
36283: LD_INT 20
36285: PUSH
36286: LD_INT 21
36288: PUSH
36289: LD_INT 22
36291: PUSH
36292: LD_INT 25
36294: PUSH
36295: LD_INT 32
36297: PUSH
36298: LD_INT 27
36300: PUSH
36301: LD_INT 36
36303: PUSH
36304: LD_INT 69
36306: PUSH
36307: LD_INT 39
36309: PUSH
36310: LD_INT 34
36312: PUSH
36313: LD_INT 40
36315: PUSH
36316: LD_INT 48
36318: PUSH
36319: LD_INT 49
36321: PUSH
36322: LD_INT 50
36324: PUSH
36325: LD_INT 51
36327: PUSH
36328: LD_INT 52
36330: PUSH
36331: LD_INT 53
36333: PUSH
36334: LD_INT 54
36336: PUSH
36337: LD_INT 55
36339: PUSH
36340: LD_INT 56
36342: PUSH
36343: LD_INT 57
36345: PUSH
36346: LD_INT 58
36348: PUSH
36349: LD_INT 59
36351: PUSH
36352: LD_INT 60
36354: PUSH
36355: LD_INT 61
36357: PUSH
36358: LD_INT 62
36360: PUSH
36361: LD_INT 80
36363: PUSH
36364: LD_INT 82
36366: PUSH
36367: LD_INT 83
36369: PUSH
36370: LD_INT 84
36372: PUSH
36373: LD_INT 85
36375: PUSH
36376: LD_INT 86
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: ST_TO_ADDR
36432: GO 36899
36434: LD_INT 2
36436: DOUBLE
36437: EQUAL
36438: IFTRUE 36442
36440: GO 36668
36442: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36443: LD_ADDR_VAR 0 4
36447: PUSH
36448: LD_INT 35
36450: PUSH
36451: LD_INT 45
36453: PUSH
36454: LD_INT 46
36456: PUSH
36457: LD_INT 47
36459: PUSH
36460: LD_INT 82
36462: PUSH
36463: LD_INT 83
36465: PUSH
36466: LD_INT 84
36468: PUSH
36469: LD_INT 85
36471: PUSH
36472: LD_INT 87
36474: PUSH
36475: LD_INT 70
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: LD_INT 11
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: LD_INT 4
36489: PUSH
36490: LD_INT 5
36492: PUSH
36493: LD_INT 6
36495: PUSH
36496: LD_INT 15
36498: PUSH
36499: LD_INT 18
36501: PUSH
36502: LD_INT 7
36504: PUSH
36505: LD_INT 17
36507: PUSH
36508: LD_INT 8
36510: PUSH
36511: LD_INT 20
36513: PUSH
36514: LD_INT 21
36516: PUSH
36517: LD_INT 22
36519: PUSH
36520: LD_INT 72
36522: PUSH
36523: LD_INT 26
36525: PUSH
36526: LD_INT 69
36528: PUSH
36529: LD_INT 39
36531: PUSH
36532: LD_INT 40
36534: PUSH
36535: LD_INT 41
36537: PUSH
36538: LD_INT 42
36540: PUSH
36541: LD_INT 43
36543: PUSH
36544: LD_INT 48
36546: PUSH
36547: LD_INT 49
36549: PUSH
36550: LD_INT 50
36552: PUSH
36553: LD_INT 51
36555: PUSH
36556: LD_INT 52
36558: PUSH
36559: LD_INT 53
36561: PUSH
36562: LD_INT 54
36564: PUSH
36565: LD_INT 55
36567: PUSH
36568: LD_INT 56
36570: PUSH
36571: LD_INT 60
36573: PUSH
36574: LD_INT 61
36576: PUSH
36577: LD_INT 62
36579: PUSH
36580: LD_INT 66
36582: PUSH
36583: LD_INT 67
36585: PUSH
36586: LD_INT 68
36588: PUSH
36589: LD_INT 81
36591: PUSH
36592: LD_INT 82
36594: PUSH
36595: LD_INT 83
36597: PUSH
36598: LD_INT 84
36600: PUSH
36601: LD_INT 85
36603: PUSH
36604: LD_INT 87
36606: PUSH
36607: LD_INT 88
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: ST_TO_ADDR
36666: GO 36899
36668: LD_INT 3
36670: DOUBLE
36671: EQUAL
36672: IFTRUE 36676
36674: GO 36898
36676: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36677: LD_ADDR_VAR 0 4
36681: PUSH
36682: LD_INT 46
36684: PUSH
36685: LD_INT 47
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: LD_INT 82
36696: PUSH
36697: LD_INT 83
36699: PUSH
36700: LD_INT 84
36702: PUSH
36703: LD_INT 85
36705: PUSH
36706: LD_INT 86
36708: PUSH
36709: LD_INT 11
36711: PUSH
36712: LD_INT 9
36714: PUSH
36715: LD_INT 20
36717: PUSH
36718: LD_INT 19
36720: PUSH
36721: LD_INT 21
36723: PUSH
36724: LD_INT 24
36726: PUSH
36727: LD_INT 22
36729: PUSH
36730: LD_INT 25
36732: PUSH
36733: LD_INT 28
36735: PUSH
36736: LD_INT 29
36738: PUSH
36739: LD_INT 30
36741: PUSH
36742: LD_INT 31
36744: PUSH
36745: LD_INT 37
36747: PUSH
36748: LD_INT 38
36750: PUSH
36751: LD_INT 32
36753: PUSH
36754: LD_INT 27
36756: PUSH
36757: LD_INT 33
36759: PUSH
36760: LD_INT 69
36762: PUSH
36763: LD_INT 39
36765: PUSH
36766: LD_INT 34
36768: PUSH
36769: LD_INT 40
36771: PUSH
36772: LD_INT 71
36774: PUSH
36775: LD_INT 23
36777: PUSH
36778: LD_INT 44
36780: PUSH
36781: LD_INT 48
36783: PUSH
36784: LD_INT 49
36786: PUSH
36787: LD_INT 50
36789: PUSH
36790: LD_INT 51
36792: PUSH
36793: LD_INT 52
36795: PUSH
36796: LD_INT 53
36798: PUSH
36799: LD_INT 54
36801: PUSH
36802: LD_INT 55
36804: PUSH
36805: LD_INT 56
36807: PUSH
36808: LD_INT 57
36810: PUSH
36811: LD_INT 58
36813: PUSH
36814: LD_INT 59
36816: PUSH
36817: LD_INT 63
36819: PUSH
36820: LD_INT 64
36822: PUSH
36823: LD_INT 65
36825: PUSH
36826: LD_INT 82
36828: PUSH
36829: LD_INT 83
36831: PUSH
36832: LD_INT 84
36834: PUSH
36835: LD_INT 85
36837: PUSH
36838: LD_INT 86
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: ST_TO_ADDR
36896: GO 36899
36898: POP
// if state > - 1 and state < 3 then
36899: LD_VAR 0 3
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: GREATER
36908: PUSH
36909: LD_VAR 0 3
36913: PUSH
36914: LD_INT 3
36916: LESS
36917: AND
36918: IFFALSE 36975
// for i in result do
36920: LD_ADDR_VAR 0 5
36924: PUSH
36925: LD_VAR 0 4
36929: PUSH
36930: FOR_IN
36931: IFFALSE 36973
// if GetTech ( i , side ) <> state then
36933: LD_VAR 0 5
36937: PPUSH
36938: LD_VAR 0 1
36942: PPUSH
36943: CALL_OW 321
36947: PUSH
36948: LD_VAR 0 3
36952: NONEQUAL
36953: IFFALSE 36971
// result := result diff i ;
36955: LD_ADDR_VAR 0 4
36959: PUSH
36960: LD_VAR 0 4
36964: PUSH
36965: LD_VAR 0 5
36969: DIFF
36970: ST_TO_ADDR
36971: GO 36930
36973: POP
36974: POP
// end ;
36975: LD_VAR 0 4
36979: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36980: LD_INT 0
36982: PPUSH
36983: PPUSH
36984: PPUSH
// result := true ;
36985: LD_ADDR_VAR 0 3
36989: PUSH
36990: LD_INT 1
36992: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36993: LD_ADDR_VAR 0 5
36997: PUSH
36998: LD_VAR 0 2
37002: PPUSH
37003: CALL_OW 480
37007: ST_TO_ADDR
// if not tmp then
37008: LD_VAR 0 5
37012: NOT
37013: IFFALSE 37017
// exit ;
37015: GO 37066
// for i in tmp do
37017: LD_ADDR_VAR 0 4
37021: PUSH
37022: LD_VAR 0 5
37026: PUSH
37027: FOR_IN
37028: IFFALSE 37064
// if GetTech ( i , side ) <> state_researched then
37030: LD_VAR 0 4
37034: PPUSH
37035: LD_VAR 0 1
37039: PPUSH
37040: CALL_OW 321
37044: PUSH
37045: LD_INT 2
37047: NONEQUAL
37048: IFFALSE 37062
// begin result := false ;
37050: LD_ADDR_VAR 0 3
37054: PUSH
37055: LD_INT 0
37057: ST_TO_ADDR
// exit ;
37058: POP
37059: POP
37060: GO 37066
// end ;
37062: GO 37027
37064: POP
37065: POP
// end ;
37066: LD_VAR 0 3
37070: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37071: LD_INT 0
37073: PPUSH
37074: PPUSH
37075: PPUSH
37076: PPUSH
37077: PPUSH
37078: PPUSH
37079: PPUSH
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37086: LD_VAR 0 1
37090: NOT
37091: PUSH
37092: LD_VAR 0 1
37096: PPUSH
37097: CALL_OW 257
37101: PUSH
37102: LD_INT 9
37104: NONEQUAL
37105: OR
37106: IFFALSE 37110
// exit ;
37108: GO 37683
// side := GetSide ( unit ) ;
37110: LD_ADDR_VAR 0 9
37114: PUSH
37115: LD_VAR 0 1
37119: PPUSH
37120: CALL_OW 255
37124: ST_TO_ADDR
// tech_space := tech_spacanom ;
37125: LD_ADDR_VAR 0 12
37129: PUSH
37130: LD_INT 29
37132: ST_TO_ADDR
// tech_time := tech_taurad ;
37133: LD_ADDR_VAR 0 13
37137: PUSH
37138: LD_INT 28
37140: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37141: LD_ADDR_VAR 0 11
37145: PUSH
37146: LD_VAR 0 1
37150: PPUSH
37151: CALL_OW 310
37155: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37156: LD_VAR 0 11
37160: PPUSH
37161: CALL_OW 247
37165: PUSH
37166: LD_INT 2
37168: EQUAL
37169: IFFALSE 37173
// exit ;
37171: GO 37683
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37173: LD_ADDR_VAR 0 8
37177: PUSH
37178: LD_INT 81
37180: PUSH
37181: LD_VAR 0 9
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 3
37192: PUSH
37193: LD_INT 21
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PPUSH
37211: CALL_OW 69
37215: ST_TO_ADDR
// if not tmp then
37216: LD_VAR 0 8
37220: NOT
37221: IFFALSE 37225
// exit ;
37223: GO 37683
// if in_unit then
37225: LD_VAR 0 11
37229: IFFALSE 37253
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37231: LD_ADDR_VAR 0 10
37235: PUSH
37236: LD_VAR 0 8
37240: PPUSH
37241: LD_VAR 0 11
37245: PPUSH
37246: CALL_OW 74
37250: ST_TO_ADDR
37251: GO 37273
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37253: LD_ADDR_VAR 0 10
37257: PUSH
37258: LD_VAR 0 8
37262: PPUSH
37263: LD_VAR 0 1
37267: PPUSH
37268: CALL_OW 74
37272: ST_TO_ADDR
// if not enemy then
37273: LD_VAR 0 10
37277: NOT
37278: IFFALSE 37282
// exit ;
37280: GO 37683
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37282: LD_VAR 0 11
37286: PUSH
37287: LD_VAR 0 11
37291: PPUSH
37292: LD_VAR 0 10
37296: PPUSH
37297: CALL_OW 296
37301: PUSH
37302: LD_INT 13
37304: GREATER
37305: AND
37306: PUSH
37307: LD_VAR 0 1
37311: PPUSH
37312: LD_VAR 0 10
37316: PPUSH
37317: CALL_OW 296
37321: PUSH
37322: LD_INT 12
37324: GREATER
37325: OR
37326: IFFALSE 37330
// exit ;
37328: GO 37683
// missile := [ 1 ] ;
37330: LD_ADDR_VAR 0 14
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37341: LD_VAR 0 9
37345: PPUSH
37346: LD_VAR 0 12
37350: PPUSH
37351: CALL_OW 325
37355: IFFALSE 37384
// missile := Insert ( missile , missile + 1 , 2 ) ;
37357: LD_ADDR_VAR 0 14
37361: PUSH
37362: LD_VAR 0 14
37366: PPUSH
37367: LD_VAR 0 14
37371: PUSH
37372: LD_INT 1
37374: PLUS
37375: PPUSH
37376: LD_INT 2
37378: PPUSH
37379: CALL_OW 2
37383: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37384: LD_VAR 0 9
37388: PPUSH
37389: LD_VAR 0 13
37393: PPUSH
37394: CALL_OW 325
37398: PUSH
37399: LD_VAR 0 10
37403: PPUSH
37404: CALL_OW 255
37408: PPUSH
37409: LD_VAR 0 13
37413: PPUSH
37414: CALL_OW 325
37418: NOT
37419: AND
37420: IFFALSE 37449
// missile := Insert ( missile , missile + 1 , 3 ) ;
37422: LD_ADDR_VAR 0 14
37426: PUSH
37427: LD_VAR 0 14
37431: PPUSH
37432: LD_VAR 0 14
37436: PUSH
37437: LD_INT 1
37439: PLUS
37440: PPUSH
37441: LD_INT 3
37443: PPUSH
37444: CALL_OW 2
37448: ST_TO_ADDR
// if missile < 2 then
37449: LD_VAR 0 14
37453: PUSH
37454: LD_INT 2
37456: LESS
37457: IFFALSE 37461
// exit ;
37459: GO 37683
// x := GetX ( enemy ) ;
37461: LD_ADDR_VAR 0 4
37465: PUSH
37466: LD_VAR 0 10
37470: PPUSH
37471: CALL_OW 250
37475: ST_TO_ADDR
// y := GetY ( enemy ) ;
37476: LD_ADDR_VAR 0 5
37480: PUSH
37481: LD_VAR 0 10
37485: PPUSH
37486: CALL_OW 251
37490: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37491: LD_ADDR_VAR 0 6
37495: PUSH
37496: LD_VAR 0 4
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PPUSH
37505: LD_INT 1
37507: PPUSH
37508: CALL_OW 12
37512: PLUS
37513: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37514: LD_ADDR_VAR 0 7
37518: PUSH
37519: LD_VAR 0 5
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PPUSH
37528: LD_INT 1
37530: PPUSH
37531: CALL_OW 12
37535: PLUS
37536: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37537: LD_VAR 0 6
37541: PPUSH
37542: LD_VAR 0 7
37546: PPUSH
37547: CALL_OW 488
37551: NOT
37552: IFFALSE 37574
// begin _x := x ;
37554: LD_ADDR_VAR 0 6
37558: PUSH
37559: LD_VAR 0 4
37563: ST_TO_ADDR
// _y := y ;
37564: LD_ADDR_VAR 0 7
37568: PUSH
37569: LD_VAR 0 5
37573: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37574: LD_ADDR_VAR 0 3
37578: PUSH
37579: LD_INT 1
37581: PPUSH
37582: LD_VAR 0 14
37586: PPUSH
37587: CALL_OW 12
37591: ST_TO_ADDR
// case i of 1 :
37592: LD_VAR 0 3
37596: PUSH
37597: LD_INT 1
37599: DOUBLE
37600: EQUAL
37601: IFTRUE 37605
37603: GO 37622
37605: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37606: LD_VAR 0 1
37610: PPUSH
37611: LD_VAR 0 10
37615: PPUSH
37616: CALL_OW 115
37620: GO 37683
37622: LD_INT 2
37624: DOUBLE
37625: EQUAL
37626: IFTRUE 37630
37628: GO 37652
37630: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37631: LD_VAR 0 1
37635: PPUSH
37636: LD_VAR 0 6
37640: PPUSH
37641: LD_VAR 0 7
37645: PPUSH
37646: CALL_OW 153
37650: GO 37683
37652: LD_INT 3
37654: DOUBLE
37655: EQUAL
37656: IFTRUE 37660
37658: GO 37682
37660: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37661: LD_VAR 0 1
37665: PPUSH
37666: LD_VAR 0 6
37670: PPUSH
37671: LD_VAR 0 7
37675: PPUSH
37676: CALL_OW 154
37680: GO 37683
37682: POP
// end ;
37683: LD_VAR 0 2
37687: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37688: LD_INT 0
37690: PPUSH
37691: PPUSH
37692: PPUSH
37693: PPUSH
37694: PPUSH
37695: PPUSH
// if not unit or not building then
37696: LD_VAR 0 1
37700: NOT
37701: PUSH
37702: LD_VAR 0 2
37706: NOT
37707: OR
37708: IFFALSE 37712
// exit ;
37710: GO 37870
// x := GetX ( building ) ;
37712: LD_ADDR_VAR 0 5
37716: PUSH
37717: LD_VAR 0 2
37721: PPUSH
37722: CALL_OW 250
37726: ST_TO_ADDR
// y := GetY ( building ) ;
37727: LD_ADDR_VAR 0 6
37731: PUSH
37732: LD_VAR 0 2
37736: PPUSH
37737: CALL_OW 251
37741: ST_TO_ADDR
// for i = 0 to 5 do
37742: LD_ADDR_VAR 0 4
37746: PUSH
37747: DOUBLE
37748: LD_INT 0
37750: DEC
37751: ST_TO_ADDR
37752: LD_INT 5
37754: PUSH
37755: FOR_TO
37756: IFFALSE 37868
// begin _x := ShiftX ( x , i , 3 ) ;
37758: LD_ADDR_VAR 0 7
37762: PUSH
37763: LD_VAR 0 5
37767: PPUSH
37768: LD_VAR 0 4
37772: PPUSH
37773: LD_INT 3
37775: PPUSH
37776: CALL_OW 272
37780: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37781: LD_ADDR_VAR 0 8
37785: PUSH
37786: LD_VAR 0 6
37790: PPUSH
37791: LD_VAR 0 4
37795: PPUSH
37796: LD_INT 3
37798: PPUSH
37799: CALL_OW 273
37803: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37804: LD_VAR 0 7
37808: PPUSH
37809: LD_VAR 0 8
37813: PPUSH
37814: CALL_OW 488
37818: NOT
37819: IFFALSE 37823
// continue ;
37821: GO 37755
// if HexInfo ( _x , _y ) = 0 then
37823: LD_VAR 0 7
37827: PPUSH
37828: LD_VAR 0 8
37832: PPUSH
37833: CALL_OW 428
37837: PUSH
37838: LD_INT 0
37840: EQUAL
37841: IFFALSE 37866
// begin ComMoveXY ( unit , _x , _y ) ;
37843: LD_VAR 0 1
37847: PPUSH
37848: LD_VAR 0 7
37852: PPUSH
37853: LD_VAR 0 8
37857: PPUSH
37858: CALL_OW 111
// exit ;
37862: POP
37863: POP
37864: GO 37870
// end ; end ;
37866: GO 37755
37868: POP
37869: POP
// end ;
37870: LD_VAR 0 3
37874: RET
// export function ScanBase ( side , base_area ) ; begin
37875: LD_INT 0
37877: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37878: LD_ADDR_VAR 0 3
37882: PUSH
37883: LD_VAR 0 2
37887: PPUSH
37888: LD_INT 81
37890: PUSH
37891: LD_VAR 0 1
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PPUSH
37900: CALL_OW 70
37904: ST_TO_ADDR
// end ;
37905: LD_VAR 0 3
37909: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37910: LD_INT 0
37912: PPUSH
37913: PPUSH
37914: PPUSH
37915: PPUSH
// result := false ;
37916: LD_ADDR_VAR 0 2
37920: PUSH
37921: LD_INT 0
37923: ST_TO_ADDR
// side := GetSide ( unit ) ;
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: LD_VAR 0 1
37933: PPUSH
37934: CALL_OW 255
37938: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37939: LD_ADDR_VAR 0 4
37943: PUSH
37944: LD_VAR 0 1
37948: PPUSH
37949: CALL_OW 248
37953: ST_TO_ADDR
// case nat of 1 :
37954: LD_VAR 0 4
37958: PUSH
37959: LD_INT 1
37961: DOUBLE
37962: EQUAL
37963: IFTRUE 37967
37965: GO 37978
37967: POP
// tech := tech_lassight ; 2 :
37968: LD_ADDR_VAR 0 5
37972: PUSH
37973: LD_INT 12
37975: ST_TO_ADDR
37976: GO 38017
37978: LD_INT 2
37980: DOUBLE
37981: EQUAL
37982: IFTRUE 37986
37984: GO 37997
37986: POP
// tech := tech_mortar ; 3 :
37987: LD_ADDR_VAR 0 5
37991: PUSH
37992: LD_INT 41
37994: ST_TO_ADDR
37995: GO 38017
37997: LD_INT 3
37999: DOUBLE
38000: EQUAL
38001: IFTRUE 38005
38003: GO 38016
38005: POP
// tech := tech_bazooka ; end ;
38006: LD_ADDR_VAR 0 5
38010: PUSH
38011: LD_INT 44
38013: ST_TO_ADDR
38014: GO 38017
38016: POP
// if Researched ( side , tech ) then
38017: LD_VAR 0 3
38021: PPUSH
38022: LD_VAR 0 5
38026: PPUSH
38027: CALL_OW 325
38031: IFFALSE 38058
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38033: LD_ADDR_VAR 0 2
38037: PUSH
38038: LD_INT 5
38040: PUSH
38041: LD_INT 8
38043: PUSH
38044: LD_INT 9
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: PUSH
38052: LD_VAR 0 4
38056: ARRAY
38057: ST_TO_ADDR
// end ;
38058: LD_VAR 0 2
38062: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38063: LD_INT 0
38065: PPUSH
38066: PPUSH
38067: PPUSH
// if not mines then
38068: LD_VAR 0 2
38072: NOT
38073: IFFALSE 38077
// exit ;
38075: GO 38221
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38077: LD_ADDR_VAR 0 5
38081: PUSH
38082: LD_INT 81
38084: PUSH
38085: LD_VAR 0 1
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 3
38096: PUSH
38097: LD_INT 21
38099: PUSH
38100: LD_INT 3
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PPUSH
38115: CALL_OW 69
38119: ST_TO_ADDR
// for i in mines do
38120: LD_ADDR_VAR 0 4
38124: PUSH
38125: LD_VAR 0 2
38129: PUSH
38130: FOR_IN
38131: IFFALSE 38219
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38133: LD_VAR 0 4
38137: PUSH
38138: LD_INT 1
38140: ARRAY
38141: PPUSH
38142: LD_VAR 0 4
38146: PUSH
38147: LD_INT 2
38149: ARRAY
38150: PPUSH
38151: CALL_OW 458
38155: NOT
38156: IFFALSE 38160
// continue ;
38158: GO 38130
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38160: LD_VAR 0 4
38164: PUSH
38165: LD_INT 1
38167: ARRAY
38168: PPUSH
38169: LD_VAR 0 4
38173: PUSH
38174: LD_INT 2
38176: ARRAY
38177: PPUSH
38178: CALL_OW 428
38182: PUSH
38183: LD_VAR 0 5
38187: IN
38188: IFFALSE 38217
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38190: LD_VAR 0 4
38194: PUSH
38195: LD_INT 1
38197: ARRAY
38198: PPUSH
38199: LD_VAR 0 4
38203: PUSH
38204: LD_INT 2
38206: ARRAY
38207: PPUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 456
// end ;
38217: GO 38130
38219: POP
38220: POP
// end ;
38221: LD_VAR 0 3
38225: RET
// export function Count ( array ) ; var i ; begin
38226: LD_INT 0
38228: PPUSH
38229: PPUSH
// result := 0 ;
38230: LD_ADDR_VAR 0 2
38234: PUSH
38235: LD_INT 0
38237: ST_TO_ADDR
// for i in array do
38238: LD_ADDR_VAR 0 3
38242: PUSH
38243: LD_VAR 0 1
38247: PUSH
38248: FOR_IN
38249: IFFALSE 38273
// if i then
38251: LD_VAR 0 3
38255: IFFALSE 38271
// result := result + 1 ;
38257: LD_ADDR_VAR 0 2
38261: PUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_INT 1
38269: PLUS
38270: ST_TO_ADDR
38271: GO 38248
38273: POP
38274: POP
// end ;
38275: LD_VAR 0 2
38279: RET
// export function IsEmpty ( building ) ; begin
38280: LD_INT 0
38282: PPUSH
// if not building then
38283: LD_VAR 0 1
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 38335
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38292: LD_ADDR_VAR 0 2
38296: PUSH
38297: LD_VAR 0 1
38301: PUSH
38302: LD_INT 22
38304: PUSH
38305: LD_VAR 0 1
38309: PPUSH
38310: CALL_OW 255
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 58
38321: PUSH
38322: EMPTY
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PPUSH
38329: CALL_OW 69
38333: IN
38334: ST_TO_ADDR
// end ;
38335: LD_VAR 0 2
38339: RET
// export function IsNotFull ( building ) ; begin
38340: LD_INT 0
38342: PPUSH
// if not building then
38343: LD_VAR 0 1
38347: NOT
38348: IFFALSE 38352
// exit ;
38350: GO 38371
// result := UnitsInside ( building ) < 6 ;
38352: LD_ADDR_VAR 0 2
38356: PUSH
38357: LD_VAR 0 1
38361: PPUSH
38362: CALL_OW 313
38366: PUSH
38367: LD_INT 6
38369: LESS
38370: ST_TO_ADDR
// end ;
38371: LD_VAR 0 2
38375: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38376: LD_INT 0
38378: PPUSH
38379: PPUSH
38380: PPUSH
38381: PPUSH
// tmp := [ ] ;
38382: LD_ADDR_VAR 0 3
38386: PUSH
38387: EMPTY
38388: ST_TO_ADDR
// list := [ ] ;
38389: LD_ADDR_VAR 0 5
38393: PUSH
38394: EMPTY
38395: ST_TO_ADDR
// for i = 16 to 25 do
38396: LD_ADDR_VAR 0 4
38400: PUSH
38401: DOUBLE
38402: LD_INT 16
38404: DEC
38405: ST_TO_ADDR
38406: LD_INT 25
38408: PUSH
38409: FOR_TO
38410: IFFALSE 38483
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38412: LD_ADDR_VAR 0 3
38416: PUSH
38417: LD_VAR 0 3
38421: PUSH
38422: LD_INT 22
38424: PUSH
38425: LD_VAR 0 1
38429: PPUSH
38430: CALL_OW 255
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 91
38441: PUSH
38442: LD_VAR 0 1
38446: PUSH
38447: LD_INT 6
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 30
38457: PUSH
38458: LD_VAR 0 4
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: LIST
38471: PUSH
38472: EMPTY
38473: LIST
38474: PPUSH
38475: CALL_OW 69
38479: ADD
38480: ST_TO_ADDR
38481: GO 38409
38483: POP
38484: POP
// for i = 1 to tmp do
38485: LD_ADDR_VAR 0 4
38489: PUSH
38490: DOUBLE
38491: LD_INT 1
38493: DEC
38494: ST_TO_ADDR
38495: LD_VAR 0 3
38499: PUSH
38500: FOR_TO
38501: IFFALSE 38589
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38503: LD_ADDR_VAR 0 5
38507: PUSH
38508: LD_VAR 0 5
38512: PUSH
38513: LD_VAR 0 3
38517: PUSH
38518: LD_VAR 0 4
38522: ARRAY
38523: PPUSH
38524: CALL_OW 266
38528: PUSH
38529: LD_VAR 0 3
38533: PUSH
38534: LD_VAR 0 4
38538: ARRAY
38539: PPUSH
38540: CALL_OW 250
38544: PUSH
38545: LD_VAR 0 3
38549: PUSH
38550: LD_VAR 0 4
38554: ARRAY
38555: PPUSH
38556: CALL_OW 251
38560: PUSH
38561: LD_VAR 0 3
38565: PUSH
38566: LD_VAR 0 4
38570: ARRAY
38571: PPUSH
38572: CALL_OW 254
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: PUSH
38583: EMPTY
38584: LIST
38585: ADD
38586: ST_TO_ADDR
38587: GO 38500
38589: POP
38590: POP
// result := list ;
38591: LD_ADDR_VAR 0 2
38595: PUSH
38596: LD_VAR 0 5
38600: ST_TO_ADDR
// end ;
38601: LD_VAR 0 2
38605: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38606: LD_INT 0
38608: PPUSH
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
// if not factory then
38615: LD_VAR 0 1
38619: NOT
38620: IFFALSE 38624
// exit ;
38622: GO 39217
// if control = control_apeman then
38624: LD_VAR 0 4
38628: PUSH
38629: LD_INT 5
38631: EQUAL
38632: IFFALSE 38741
// begin tmp := UnitsInside ( factory ) ;
38634: LD_ADDR_VAR 0 8
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 313
38648: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38649: LD_VAR 0 8
38653: PPUSH
38654: LD_INT 25
38656: PUSH
38657: LD_INT 12
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PPUSH
38664: CALL_OW 72
38668: NOT
38669: IFFALSE 38679
// control := control_manual ;
38671: LD_ADDR_VAR 0 4
38675: PUSH
38676: LD_INT 1
38678: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38679: LD_ADDR_VAR 0 8
38683: PUSH
38684: LD_VAR 0 1
38688: PPUSH
38689: CALL 38376 0 1
38693: ST_TO_ADDR
// if tmp then
38694: LD_VAR 0 8
38698: IFFALSE 38741
// begin for i in tmp do
38700: LD_ADDR_VAR 0 7
38704: PUSH
38705: LD_VAR 0 8
38709: PUSH
38710: FOR_IN
38711: IFFALSE 38739
// if i [ 1 ] = b_ext_radio then
38713: LD_VAR 0 7
38717: PUSH
38718: LD_INT 1
38720: ARRAY
38721: PUSH
38722: LD_INT 22
38724: EQUAL
38725: IFFALSE 38737
// begin control := control_remote ;
38727: LD_ADDR_VAR 0 4
38731: PUSH
38732: LD_INT 2
38734: ST_TO_ADDR
// break ;
38735: GO 38739
// end ;
38737: GO 38710
38739: POP
38740: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38741: LD_VAR 0 1
38745: PPUSH
38746: LD_VAR 0 2
38750: PPUSH
38751: LD_VAR 0 3
38755: PPUSH
38756: LD_VAR 0 4
38760: PPUSH
38761: LD_VAR 0 5
38765: PPUSH
38766: CALL_OW 448
38770: IFFALSE 38805
// begin result := [ chassis , engine , control , weapon ] ;
38772: LD_ADDR_VAR 0 6
38776: PUSH
38777: LD_VAR 0 2
38781: PUSH
38782: LD_VAR 0 3
38786: PUSH
38787: LD_VAR 0 4
38791: PUSH
38792: LD_VAR 0 5
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: ST_TO_ADDR
// exit ;
38803: GO 39217
// end ; _chassis := AvailableChassisList ( factory ) ;
38805: LD_ADDR_VAR 0 9
38809: PUSH
38810: LD_VAR 0 1
38814: PPUSH
38815: CALL_OW 475
38819: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38820: LD_ADDR_VAR 0 11
38824: PUSH
38825: LD_VAR 0 1
38829: PPUSH
38830: CALL_OW 476
38834: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38835: LD_ADDR_VAR 0 12
38839: PUSH
38840: LD_VAR 0 1
38844: PPUSH
38845: CALL_OW 477
38849: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38850: LD_ADDR_VAR 0 10
38854: PUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 478
38864: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38865: LD_VAR 0 9
38869: NOT
38870: PUSH
38871: LD_VAR 0 11
38875: NOT
38876: OR
38877: PUSH
38878: LD_VAR 0 12
38882: NOT
38883: OR
38884: PUSH
38885: LD_VAR 0 10
38889: NOT
38890: OR
38891: IFFALSE 38926
// begin result := [ chassis , engine , control , weapon ] ;
38893: LD_ADDR_VAR 0 6
38897: PUSH
38898: LD_VAR 0 2
38902: PUSH
38903: LD_VAR 0 3
38907: PUSH
38908: LD_VAR 0 4
38912: PUSH
38913: LD_VAR 0 5
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: ST_TO_ADDR
// exit ;
38924: GO 39217
// end ; if not chassis in _chassis then
38926: LD_VAR 0 2
38930: PUSH
38931: LD_VAR 0 9
38935: IN
38936: NOT
38937: IFFALSE 38963
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38939: LD_ADDR_VAR 0 2
38943: PUSH
38944: LD_VAR 0 9
38948: PUSH
38949: LD_INT 1
38951: PPUSH
38952: LD_VAR 0 9
38956: PPUSH
38957: CALL_OW 12
38961: ARRAY
38962: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38963: LD_VAR 0 2
38967: PPUSH
38968: LD_VAR 0 3
38972: PPUSH
38973: CALL 39222 0 2
38977: NOT
38978: IFFALSE 39037
// repeat engine := _engine [ 1 ] ;
38980: LD_ADDR_VAR 0 3
38984: PUSH
38985: LD_VAR 0 11
38989: PUSH
38990: LD_INT 1
38992: ARRAY
38993: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38994: LD_ADDR_VAR 0 11
38998: PUSH
38999: LD_VAR 0 11
39003: PPUSH
39004: LD_INT 1
39006: PPUSH
39007: CALL_OW 3
39011: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39012: LD_VAR 0 2
39016: PPUSH
39017: LD_VAR 0 3
39021: PPUSH
39022: CALL 39222 0 2
39026: PUSH
39027: LD_VAR 0 11
39031: PUSH
39032: EMPTY
39033: EQUAL
39034: OR
39035: IFFALSE 38980
// if not control in _control then
39037: LD_VAR 0 4
39041: PUSH
39042: LD_VAR 0 12
39046: IN
39047: NOT
39048: IFFALSE 39074
// control := _control [ rand ( 1 , _control ) ] ;
39050: LD_ADDR_VAR 0 4
39054: PUSH
39055: LD_VAR 0 12
39059: PUSH
39060: LD_INT 1
39062: PPUSH
39063: LD_VAR 0 12
39067: PPUSH
39068: CALL_OW 12
39072: ARRAY
39073: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39074: LD_VAR 0 2
39078: PPUSH
39079: LD_VAR 0 5
39083: PPUSH
39084: CALL 39442 0 2
39088: NOT
39089: IFFALSE 39148
// repeat weapon := _weapon [ 1 ] ;
39091: LD_ADDR_VAR 0 5
39095: PUSH
39096: LD_VAR 0 10
39100: PUSH
39101: LD_INT 1
39103: ARRAY
39104: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39105: LD_ADDR_VAR 0 10
39109: PUSH
39110: LD_VAR 0 10
39114: PPUSH
39115: LD_INT 1
39117: PPUSH
39118: CALL_OW 3
39122: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39123: LD_VAR 0 2
39127: PPUSH
39128: LD_VAR 0 5
39132: PPUSH
39133: CALL 39442 0 2
39137: PUSH
39138: LD_VAR 0 10
39142: PUSH
39143: EMPTY
39144: EQUAL
39145: OR
39146: IFFALSE 39091
// result := [ ] ;
39148: LD_ADDR_VAR 0 6
39152: PUSH
39153: EMPTY
39154: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39155: LD_VAR 0 1
39159: PPUSH
39160: LD_VAR 0 2
39164: PPUSH
39165: LD_VAR 0 3
39169: PPUSH
39170: LD_VAR 0 4
39174: PPUSH
39175: LD_VAR 0 5
39179: PPUSH
39180: CALL_OW 448
39184: IFFALSE 39217
// result := [ chassis , engine , control , weapon ] ;
39186: LD_ADDR_VAR 0 6
39190: PUSH
39191: LD_VAR 0 2
39195: PUSH
39196: LD_VAR 0 3
39200: PUSH
39201: LD_VAR 0 4
39205: PUSH
39206: LD_VAR 0 5
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// end ;
39217: LD_VAR 0 6
39221: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39222: LD_INT 0
39224: PPUSH
// if not chassis or not engine then
39225: LD_VAR 0 1
39229: NOT
39230: PUSH
39231: LD_VAR 0 2
39235: NOT
39236: OR
39237: IFFALSE 39241
// exit ;
39239: GO 39437
// case engine of engine_solar :
39241: LD_VAR 0 2
39245: PUSH
39246: LD_INT 2
39248: DOUBLE
39249: EQUAL
39250: IFTRUE 39254
39252: GO 39292
39254: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39255: LD_ADDR_VAR 0 3
39259: PUSH
39260: LD_INT 11
39262: PUSH
39263: LD_INT 12
39265: PUSH
39266: LD_INT 13
39268: PUSH
39269: LD_INT 14
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: LD_INT 3
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: ST_TO_ADDR
39290: GO 39421
39292: LD_INT 1
39294: DOUBLE
39295: EQUAL
39296: IFTRUE 39300
39298: GO 39362
39300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39301: LD_ADDR_VAR 0 3
39305: PUSH
39306: LD_INT 11
39308: PUSH
39309: LD_INT 12
39311: PUSH
39312: LD_INT 13
39314: PUSH
39315: LD_INT 14
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: LD_INT 3
39326: PUSH
39327: LD_INT 4
39329: PUSH
39330: LD_INT 5
39332: PUSH
39333: LD_INT 21
39335: PUSH
39336: LD_INT 23
39338: PUSH
39339: LD_INT 22
39341: PUSH
39342: LD_INT 24
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
39360: GO 39421
39362: LD_INT 3
39364: DOUBLE
39365: EQUAL
39366: IFTRUE 39370
39368: GO 39420
39370: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_INT 13
39378: PUSH
39379: LD_INT 14
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: LD_INT 3
39387: PUSH
39388: LD_INT 4
39390: PUSH
39391: LD_INT 5
39393: PUSH
39394: LD_INT 21
39396: PUSH
39397: LD_INT 22
39399: PUSH
39400: LD_INT 23
39402: PUSH
39403: LD_INT 24
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: ST_TO_ADDR
39418: GO 39421
39420: POP
// result := ( chassis in result ) ;
39421: LD_ADDR_VAR 0 3
39425: PUSH
39426: LD_VAR 0 1
39430: PUSH
39431: LD_VAR 0 3
39435: IN
39436: ST_TO_ADDR
// end ;
39437: LD_VAR 0 3
39441: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39442: LD_INT 0
39444: PPUSH
// if not chassis or not weapon then
39445: LD_VAR 0 1
39449: NOT
39450: PUSH
39451: LD_VAR 0 2
39455: NOT
39456: OR
39457: IFFALSE 39461
// exit ;
39459: GO 40523
// case weapon of us_machine_gun :
39461: LD_VAR 0 2
39465: PUSH
39466: LD_INT 2
39468: DOUBLE
39469: EQUAL
39470: IFTRUE 39474
39472: GO 39504
39474: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39475: LD_ADDR_VAR 0 3
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: LD_INT 4
39491: PUSH
39492: LD_INT 5
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: ST_TO_ADDR
39502: GO 40507
39504: LD_INT 3
39506: DOUBLE
39507: EQUAL
39508: IFTRUE 39512
39510: GO 39542
39512: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39513: LD_ADDR_VAR 0 3
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 3
39526: PUSH
39527: LD_INT 4
39529: PUSH
39530: LD_INT 5
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
39540: GO 40507
39542: LD_INT 11
39544: DOUBLE
39545: EQUAL
39546: IFTRUE 39550
39548: GO 39580
39550: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39551: LD_ADDR_VAR 0 3
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: LD_INT 4
39567: PUSH
39568: LD_INT 5
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: ST_TO_ADDR
39578: GO 40507
39580: LD_INT 4
39582: DOUBLE
39583: EQUAL
39584: IFTRUE 39588
39586: GO 39614
39588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39589: LD_ADDR_VAR 0 3
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: LD_INT 4
39602: PUSH
39603: LD_INT 5
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: ST_TO_ADDR
39612: GO 40507
39614: LD_INT 5
39616: DOUBLE
39617: EQUAL
39618: IFTRUE 39622
39620: GO 39648
39622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39623: LD_ADDR_VAR 0 3
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 3
39633: PUSH
39634: LD_INT 4
39636: PUSH
39637: LD_INT 5
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: ST_TO_ADDR
39646: GO 40507
39648: LD_INT 9
39650: DOUBLE
39651: EQUAL
39652: IFTRUE 39656
39654: GO 39682
39656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39657: LD_ADDR_VAR 0 3
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: LD_INT 4
39670: PUSH
39671: LD_INT 5
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: ST_TO_ADDR
39680: GO 40507
39682: LD_INT 7
39684: DOUBLE
39685: EQUAL
39686: IFTRUE 39690
39688: GO 39716
39690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39691: LD_ADDR_VAR 0 3
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: LD_INT 3
39701: PUSH
39702: LD_INT 4
39704: PUSH
39705: LD_INT 5
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: ST_TO_ADDR
39714: GO 40507
39716: LD_INT 12
39718: DOUBLE
39719: EQUAL
39720: IFTRUE 39724
39722: GO 39750
39724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39725: LD_ADDR_VAR 0 3
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 3
39735: PUSH
39736: LD_INT 4
39738: PUSH
39739: LD_INT 5
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: ST_TO_ADDR
39748: GO 40507
39750: LD_INT 13
39752: DOUBLE
39753: EQUAL
39754: IFTRUE 39758
39756: GO 39784
39758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39759: LD_ADDR_VAR 0 3
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 3
39769: PUSH
39770: LD_INT 4
39772: PUSH
39773: LD_INT 5
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: ST_TO_ADDR
39782: GO 40507
39784: LD_INT 14
39786: DOUBLE
39787: EQUAL
39788: IFTRUE 39792
39790: GO 39810
39792: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39793: LD_ADDR_VAR 0 3
39797: PUSH
39798: LD_INT 4
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: ST_TO_ADDR
39808: GO 40507
39810: LD_INT 6
39812: DOUBLE
39813: EQUAL
39814: IFTRUE 39818
39816: GO 39836
39818: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39819: LD_ADDR_VAR 0 3
39823: PUSH
39824: LD_INT 4
39826: PUSH
39827: LD_INT 5
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: ST_TO_ADDR
39834: GO 40507
39836: LD_INT 10
39838: DOUBLE
39839: EQUAL
39840: IFTRUE 39844
39842: GO 39862
39844: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39845: LD_ADDR_VAR 0 3
39849: PUSH
39850: LD_INT 4
39852: PUSH
39853: LD_INT 5
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: ST_TO_ADDR
39860: GO 40507
39862: LD_INT 22
39864: DOUBLE
39865: EQUAL
39866: IFTRUE 39870
39868: GO 39896
39870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_INT 11
39878: PUSH
39879: LD_INT 12
39881: PUSH
39882: LD_INT 13
39884: PUSH
39885: LD_INT 14
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: ST_TO_ADDR
39894: GO 40507
39896: LD_INT 23
39898: DOUBLE
39899: EQUAL
39900: IFTRUE 39904
39902: GO 39930
39904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39905: LD_ADDR_VAR 0 3
39909: PUSH
39910: LD_INT 11
39912: PUSH
39913: LD_INT 12
39915: PUSH
39916: LD_INT 13
39918: PUSH
39919: LD_INT 14
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: ST_TO_ADDR
39928: GO 40507
39930: LD_INT 24
39932: DOUBLE
39933: EQUAL
39934: IFTRUE 39938
39936: GO 39964
39938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39939: LD_ADDR_VAR 0 3
39943: PUSH
39944: LD_INT 11
39946: PUSH
39947: LD_INT 12
39949: PUSH
39950: LD_INT 13
39952: PUSH
39953: LD_INT 14
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: ST_TO_ADDR
39962: GO 40507
39964: LD_INT 30
39966: DOUBLE
39967: EQUAL
39968: IFTRUE 39972
39970: GO 39998
39972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39973: LD_ADDR_VAR 0 3
39977: PUSH
39978: LD_INT 11
39980: PUSH
39981: LD_INT 12
39983: PUSH
39984: LD_INT 13
39986: PUSH
39987: LD_INT 14
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: ST_TO_ADDR
39996: GO 40507
39998: LD_INT 25
40000: DOUBLE
40001: EQUAL
40002: IFTRUE 40006
40004: GO 40024
40006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40007: LD_ADDR_VAR 0 3
40011: PUSH
40012: LD_INT 13
40014: PUSH
40015: LD_INT 14
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: ST_TO_ADDR
40022: GO 40507
40024: LD_INT 27
40026: DOUBLE
40027: EQUAL
40028: IFTRUE 40032
40030: GO 40050
40032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40033: LD_ADDR_VAR 0 3
40037: PUSH
40038: LD_INT 13
40040: PUSH
40041: LD_INT 14
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: ST_TO_ADDR
40048: GO 40507
40050: LD_EXP 138
40054: DOUBLE
40055: EQUAL
40056: IFTRUE 40060
40058: GO 40086
40060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40061: LD_ADDR_VAR 0 3
40065: PUSH
40066: LD_INT 11
40068: PUSH
40069: LD_INT 12
40071: PUSH
40072: LD_INT 13
40074: PUSH
40075: LD_INT 14
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
40084: GO 40507
40086: LD_INT 28
40088: DOUBLE
40089: EQUAL
40090: IFTRUE 40094
40092: GO 40112
40094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40095: LD_ADDR_VAR 0 3
40099: PUSH
40100: LD_INT 13
40102: PUSH
40103: LD_INT 14
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: ST_TO_ADDR
40110: GO 40507
40112: LD_INT 29
40114: DOUBLE
40115: EQUAL
40116: IFTRUE 40120
40118: GO 40138
40120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40121: LD_ADDR_VAR 0 3
40125: PUSH
40126: LD_INT 13
40128: PUSH
40129: LD_INT 14
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: ST_TO_ADDR
40136: GO 40507
40138: LD_INT 31
40140: DOUBLE
40141: EQUAL
40142: IFTRUE 40146
40144: GO 40164
40146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40147: LD_ADDR_VAR 0 3
40151: PUSH
40152: LD_INT 13
40154: PUSH
40155: LD_INT 14
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: ST_TO_ADDR
40162: GO 40507
40164: LD_INT 26
40166: DOUBLE
40167: EQUAL
40168: IFTRUE 40172
40170: GO 40190
40172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40173: LD_ADDR_VAR 0 3
40177: PUSH
40178: LD_INT 13
40180: PUSH
40181: LD_INT 14
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: ST_TO_ADDR
40188: GO 40507
40190: LD_INT 42
40192: DOUBLE
40193: EQUAL
40194: IFTRUE 40198
40196: GO 40224
40198: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40199: LD_ADDR_VAR 0 3
40203: PUSH
40204: LD_INT 21
40206: PUSH
40207: LD_INT 22
40209: PUSH
40210: LD_INT 23
40212: PUSH
40213: LD_INT 24
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: ST_TO_ADDR
40222: GO 40507
40224: LD_INT 43
40226: DOUBLE
40227: EQUAL
40228: IFTRUE 40232
40230: GO 40258
40232: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40233: LD_ADDR_VAR 0 3
40237: PUSH
40238: LD_INT 21
40240: PUSH
40241: LD_INT 22
40243: PUSH
40244: LD_INT 23
40246: PUSH
40247: LD_INT 24
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: ST_TO_ADDR
40256: GO 40507
40258: LD_INT 44
40260: DOUBLE
40261: EQUAL
40262: IFTRUE 40266
40264: GO 40292
40266: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40267: LD_ADDR_VAR 0 3
40271: PUSH
40272: LD_INT 21
40274: PUSH
40275: LD_INT 22
40277: PUSH
40278: LD_INT 23
40280: PUSH
40281: LD_INT 24
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
40290: GO 40507
40292: LD_INT 45
40294: DOUBLE
40295: EQUAL
40296: IFTRUE 40300
40298: GO 40326
40300: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40301: LD_ADDR_VAR 0 3
40305: PUSH
40306: LD_INT 21
40308: PUSH
40309: LD_INT 22
40311: PUSH
40312: LD_INT 23
40314: PUSH
40315: LD_INT 24
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: ST_TO_ADDR
40324: GO 40507
40326: LD_INT 49
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40360
40334: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40335: LD_ADDR_VAR 0 3
40339: PUSH
40340: LD_INT 21
40342: PUSH
40343: LD_INT 22
40345: PUSH
40346: LD_INT 23
40348: PUSH
40349: LD_INT 24
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: ST_TO_ADDR
40358: GO 40507
40360: LD_INT 51
40362: DOUBLE
40363: EQUAL
40364: IFTRUE 40368
40366: GO 40394
40368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40369: LD_ADDR_VAR 0 3
40373: PUSH
40374: LD_INT 21
40376: PUSH
40377: LD_INT 22
40379: PUSH
40380: LD_INT 23
40382: PUSH
40383: LD_INT 24
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: ST_TO_ADDR
40392: GO 40507
40394: LD_INT 52
40396: DOUBLE
40397: EQUAL
40398: IFTRUE 40402
40400: GO 40428
40402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40403: LD_ADDR_VAR 0 3
40407: PUSH
40408: LD_INT 21
40410: PUSH
40411: LD_INT 22
40413: PUSH
40414: LD_INT 23
40416: PUSH
40417: LD_INT 24
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: ST_TO_ADDR
40426: GO 40507
40428: LD_INT 53
40430: DOUBLE
40431: EQUAL
40432: IFTRUE 40436
40434: GO 40454
40436: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40437: LD_ADDR_VAR 0 3
40441: PUSH
40442: LD_INT 23
40444: PUSH
40445: LD_INT 24
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: ST_TO_ADDR
40452: GO 40507
40454: LD_INT 46
40456: DOUBLE
40457: EQUAL
40458: IFTRUE 40462
40460: GO 40480
40462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40463: LD_ADDR_VAR 0 3
40467: PUSH
40468: LD_INT 23
40470: PUSH
40471: LD_INT 24
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: ST_TO_ADDR
40478: GO 40507
40480: LD_INT 47
40482: DOUBLE
40483: EQUAL
40484: IFTRUE 40488
40486: GO 40506
40488: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40489: LD_ADDR_VAR 0 3
40493: PUSH
40494: LD_INT 23
40496: PUSH
40497: LD_INT 24
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: ST_TO_ADDR
40504: GO 40507
40506: POP
// result := ( chassis in result ) ;
40507: LD_ADDR_VAR 0 3
40511: PUSH
40512: LD_VAR 0 1
40516: PUSH
40517: LD_VAR 0 3
40521: IN
40522: ST_TO_ADDR
// end ;
40523: LD_VAR 0 3
40527: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40528: LD_INT 0
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
// result := array ;
40537: LD_ADDR_VAR 0 5
40541: PUSH
40542: LD_VAR 0 1
40546: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40547: LD_VAR 0 1
40551: NOT
40552: PUSH
40553: LD_VAR 0 2
40557: NOT
40558: OR
40559: PUSH
40560: LD_VAR 0 3
40564: NOT
40565: OR
40566: PUSH
40567: LD_VAR 0 2
40571: PUSH
40572: LD_VAR 0 1
40576: GREATER
40577: OR
40578: PUSH
40579: LD_VAR 0 3
40583: PUSH
40584: LD_VAR 0 1
40588: GREATER
40589: OR
40590: IFFALSE 40594
// exit ;
40592: GO 40890
// if direction then
40594: LD_VAR 0 4
40598: IFFALSE 40662
// begin d := 1 ;
40600: LD_ADDR_VAR 0 9
40604: PUSH
40605: LD_INT 1
40607: ST_TO_ADDR
// if i_from > i_to then
40608: LD_VAR 0 2
40612: PUSH
40613: LD_VAR 0 3
40617: GREATER
40618: IFFALSE 40644
// length := ( array - i_from ) + i_to else
40620: LD_ADDR_VAR 0 11
40624: PUSH
40625: LD_VAR 0 1
40629: PUSH
40630: LD_VAR 0 2
40634: MINUS
40635: PUSH
40636: LD_VAR 0 3
40640: PLUS
40641: ST_TO_ADDR
40642: GO 40660
// length := i_to - i_from ;
40644: LD_ADDR_VAR 0 11
40648: PUSH
40649: LD_VAR 0 3
40653: PUSH
40654: LD_VAR 0 2
40658: MINUS
40659: ST_TO_ADDR
// end else
40660: GO 40723
// begin d := - 1 ;
40662: LD_ADDR_VAR 0 9
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: ST_TO_ADDR
// if i_from > i_to then
40671: LD_VAR 0 2
40675: PUSH
40676: LD_VAR 0 3
40680: GREATER
40681: IFFALSE 40701
// length := i_from - i_to else
40683: LD_ADDR_VAR 0 11
40687: PUSH
40688: LD_VAR 0 2
40692: PUSH
40693: LD_VAR 0 3
40697: MINUS
40698: ST_TO_ADDR
40699: GO 40723
// length := ( array - i_to ) + i_from ;
40701: LD_ADDR_VAR 0 11
40705: PUSH
40706: LD_VAR 0 1
40710: PUSH
40711: LD_VAR 0 3
40715: MINUS
40716: PUSH
40717: LD_VAR 0 2
40721: PLUS
40722: ST_TO_ADDR
// end ; if not length then
40723: LD_VAR 0 11
40727: NOT
40728: IFFALSE 40732
// exit ;
40730: GO 40890
// tmp := array ;
40732: LD_ADDR_VAR 0 10
40736: PUSH
40737: LD_VAR 0 1
40741: ST_TO_ADDR
// for i = 1 to length do
40742: LD_ADDR_VAR 0 6
40746: PUSH
40747: DOUBLE
40748: LD_INT 1
40750: DEC
40751: ST_TO_ADDR
40752: LD_VAR 0 11
40756: PUSH
40757: FOR_TO
40758: IFFALSE 40878
// begin for j = 1 to array do
40760: LD_ADDR_VAR 0 7
40764: PUSH
40765: DOUBLE
40766: LD_INT 1
40768: DEC
40769: ST_TO_ADDR
40770: LD_VAR 0 1
40774: PUSH
40775: FOR_TO
40776: IFFALSE 40864
// begin k := j + d ;
40778: LD_ADDR_VAR 0 8
40782: PUSH
40783: LD_VAR 0 7
40787: PUSH
40788: LD_VAR 0 9
40792: PLUS
40793: ST_TO_ADDR
// if k > array then
40794: LD_VAR 0 8
40798: PUSH
40799: LD_VAR 0 1
40803: GREATER
40804: IFFALSE 40814
// k := 1 ;
40806: LD_ADDR_VAR 0 8
40810: PUSH
40811: LD_INT 1
40813: ST_TO_ADDR
// if not k then
40814: LD_VAR 0 8
40818: NOT
40819: IFFALSE 40831
// k := array ;
40821: LD_ADDR_VAR 0 8
40825: PUSH
40826: LD_VAR 0 1
40830: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40831: LD_ADDR_VAR 0 10
40835: PUSH
40836: LD_VAR 0 10
40840: PPUSH
40841: LD_VAR 0 8
40845: PPUSH
40846: LD_VAR 0 1
40850: PUSH
40851: LD_VAR 0 7
40855: ARRAY
40856: PPUSH
40857: CALL_OW 1
40861: ST_TO_ADDR
// end ;
40862: GO 40775
40864: POP
40865: POP
// array := tmp ;
40866: LD_ADDR_VAR 0 1
40870: PUSH
40871: LD_VAR 0 10
40875: ST_TO_ADDR
// end ;
40876: GO 40757
40878: POP
40879: POP
// result := array ;
40880: LD_ADDR_VAR 0 5
40884: PUSH
40885: LD_VAR 0 1
40889: ST_TO_ADDR
// end ;
40890: LD_VAR 0 5
40894: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40895: LD_INT 0
40897: PPUSH
40898: PPUSH
// result := 0 ;
40899: LD_ADDR_VAR 0 3
40903: PUSH
40904: LD_INT 0
40906: ST_TO_ADDR
// if not array or not value in array then
40907: LD_VAR 0 1
40911: NOT
40912: PUSH
40913: LD_VAR 0 2
40917: PUSH
40918: LD_VAR 0 1
40922: IN
40923: NOT
40924: OR
40925: IFFALSE 40929
// exit ;
40927: GO 40983
// for i = 1 to array do
40929: LD_ADDR_VAR 0 4
40933: PUSH
40934: DOUBLE
40935: LD_INT 1
40937: DEC
40938: ST_TO_ADDR
40939: LD_VAR 0 1
40943: PUSH
40944: FOR_TO
40945: IFFALSE 40981
// if value = array [ i ] then
40947: LD_VAR 0 2
40951: PUSH
40952: LD_VAR 0 1
40956: PUSH
40957: LD_VAR 0 4
40961: ARRAY
40962: EQUAL
40963: IFFALSE 40979
// begin result := i ;
40965: LD_ADDR_VAR 0 3
40969: PUSH
40970: LD_VAR 0 4
40974: ST_TO_ADDR
// exit ;
40975: POP
40976: POP
40977: GO 40983
// end ;
40979: GO 40944
40981: POP
40982: POP
// end ;
40983: LD_VAR 0 3
40987: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40988: LD_INT 0
40990: PPUSH
// vc_chassis := chassis ;
40991: LD_ADDR_OWVAR 37
40995: PUSH
40996: LD_VAR 0 1
41000: ST_TO_ADDR
// vc_engine := engine ;
41001: LD_ADDR_OWVAR 39
41005: PUSH
41006: LD_VAR 0 2
41010: ST_TO_ADDR
// vc_control := control ;
41011: LD_ADDR_OWVAR 38
41015: PUSH
41016: LD_VAR 0 3
41020: ST_TO_ADDR
// vc_weapon := weapon ;
41021: LD_ADDR_OWVAR 40
41025: PUSH
41026: LD_VAR 0 4
41030: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41031: LD_ADDR_OWVAR 41
41035: PUSH
41036: LD_VAR 0 5
41040: ST_TO_ADDR
// end ;
41041: LD_VAR 0 6
41045: RET
// export function WantPlant ( unit ) ; var task ; begin
41046: LD_INT 0
41048: PPUSH
41049: PPUSH
// result := false ;
41050: LD_ADDR_VAR 0 2
41054: PUSH
41055: LD_INT 0
41057: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41058: LD_ADDR_VAR 0 3
41062: PUSH
41063: LD_VAR 0 1
41067: PPUSH
41068: CALL_OW 437
41072: ST_TO_ADDR
// if task then
41073: LD_VAR 0 3
41077: IFFALSE 41105
// if task [ 1 ] [ 1 ] = p then
41079: LD_VAR 0 3
41083: PUSH
41084: LD_INT 1
41086: ARRAY
41087: PUSH
41088: LD_INT 1
41090: ARRAY
41091: PUSH
41092: LD_STRING p
41094: EQUAL
41095: IFFALSE 41105
// result := true ;
41097: LD_ADDR_VAR 0 2
41101: PUSH
41102: LD_INT 1
41104: ST_TO_ADDR
// end ;
41105: LD_VAR 0 2
41109: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41110: LD_INT 0
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
// if pos < 1 then
41116: LD_VAR 0 2
41120: PUSH
41121: LD_INT 1
41123: LESS
41124: IFFALSE 41128
// exit ;
41126: GO 41431
// if pos = 1 then
41128: LD_VAR 0 2
41132: PUSH
41133: LD_INT 1
41135: EQUAL
41136: IFFALSE 41169
// result := Replace ( arr , pos [ 1 ] , value ) else
41138: LD_ADDR_VAR 0 4
41142: PUSH
41143: LD_VAR 0 1
41147: PPUSH
41148: LD_VAR 0 2
41152: PUSH
41153: LD_INT 1
41155: ARRAY
41156: PPUSH
41157: LD_VAR 0 3
41161: PPUSH
41162: CALL_OW 1
41166: ST_TO_ADDR
41167: GO 41431
// begin tmp := arr ;
41169: LD_ADDR_VAR 0 6
41173: PUSH
41174: LD_VAR 0 1
41178: ST_TO_ADDR
// s_arr := [ tmp ] ;
41179: LD_ADDR_VAR 0 7
41183: PUSH
41184: LD_VAR 0 6
41188: PUSH
41189: EMPTY
41190: LIST
41191: ST_TO_ADDR
// for i = 1 to pos - 1 do
41192: LD_ADDR_VAR 0 5
41196: PUSH
41197: DOUBLE
41198: LD_INT 1
41200: DEC
41201: ST_TO_ADDR
41202: LD_VAR 0 2
41206: PUSH
41207: LD_INT 1
41209: MINUS
41210: PUSH
41211: FOR_TO
41212: IFFALSE 41257
// begin tmp := tmp [ pos [ i ] ] ;
41214: LD_ADDR_VAR 0 6
41218: PUSH
41219: LD_VAR 0 6
41223: PUSH
41224: LD_VAR 0 2
41228: PUSH
41229: LD_VAR 0 5
41233: ARRAY
41234: ARRAY
41235: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41236: LD_ADDR_VAR 0 7
41240: PUSH
41241: LD_VAR 0 7
41245: PUSH
41246: LD_VAR 0 6
41250: PUSH
41251: EMPTY
41252: LIST
41253: ADD
41254: ST_TO_ADDR
// end ;
41255: GO 41211
41257: POP
41258: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41259: LD_ADDR_VAR 0 6
41263: PUSH
41264: LD_VAR 0 6
41268: PPUSH
41269: LD_VAR 0 2
41273: PUSH
41274: LD_VAR 0 2
41278: ARRAY
41279: PPUSH
41280: LD_VAR 0 3
41284: PPUSH
41285: CALL_OW 1
41289: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41290: LD_ADDR_VAR 0 7
41294: PUSH
41295: LD_VAR 0 7
41299: PPUSH
41300: LD_VAR 0 7
41304: PPUSH
41305: LD_VAR 0 6
41309: PPUSH
41310: CALL_OW 1
41314: ST_TO_ADDR
// for i = s_arr downto 2 do
41315: LD_ADDR_VAR 0 5
41319: PUSH
41320: DOUBLE
41321: LD_VAR 0 7
41325: INC
41326: ST_TO_ADDR
41327: LD_INT 2
41329: PUSH
41330: FOR_DOWNTO
41331: IFFALSE 41415
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41333: LD_ADDR_VAR 0 6
41337: PUSH
41338: LD_VAR 0 7
41342: PUSH
41343: LD_VAR 0 5
41347: PUSH
41348: LD_INT 1
41350: MINUS
41351: ARRAY
41352: PPUSH
41353: LD_VAR 0 2
41357: PUSH
41358: LD_VAR 0 5
41362: PUSH
41363: LD_INT 1
41365: MINUS
41366: ARRAY
41367: PPUSH
41368: LD_VAR 0 7
41372: PUSH
41373: LD_VAR 0 5
41377: ARRAY
41378: PPUSH
41379: CALL_OW 1
41383: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41384: LD_ADDR_VAR 0 7
41388: PUSH
41389: LD_VAR 0 7
41393: PPUSH
41394: LD_VAR 0 5
41398: PUSH
41399: LD_INT 1
41401: MINUS
41402: PPUSH
41403: LD_VAR 0 6
41407: PPUSH
41408: CALL_OW 1
41412: ST_TO_ADDR
// end ;
41413: GO 41330
41415: POP
41416: POP
// result := s_arr [ 1 ] ;
41417: LD_ADDR_VAR 0 4
41421: PUSH
41422: LD_VAR 0 7
41426: PUSH
41427: LD_INT 1
41429: ARRAY
41430: ST_TO_ADDR
// end ; end ;
41431: LD_VAR 0 4
41435: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41436: LD_INT 0
41438: PPUSH
41439: PPUSH
// if not list then
41440: LD_VAR 0 1
41444: NOT
41445: IFFALSE 41449
// exit ;
41447: GO 41540
// i := list [ pos1 ] ;
41449: LD_ADDR_VAR 0 5
41453: PUSH
41454: LD_VAR 0 1
41458: PUSH
41459: LD_VAR 0 2
41463: ARRAY
41464: ST_TO_ADDR
// if not i then
41465: LD_VAR 0 5
41469: NOT
41470: IFFALSE 41474
// exit ;
41472: GO 41540
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41474: LD_ADDR_VAR 0 1
41478: PUSH
41479: LD_VAR 0 1
41483: PPUSH
41484: LD_VAR 0 2
41488: PPUSH
41489: LD_VAR 0 1
41493: PUSH
41494: LD_VAR 0 3
41498: ARRAY
41499: PPUSH
41500: CALL_OW 1
41504: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41505: LD_ADDR_VAR 0 1
41509: PUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: LD_VAR 0 3
41519: PPUSH
41520: LD_VAR 0 5
41524: PPUSH
41525: CALL_OW 1
41529: ST_TO_ADDR
// result := list ;
41530: LD_ADDR_VAR 0 4
41534: PUSH
41535: LD_VAR 0 1
41539: ST_TO_ADDR
// end ;
41540: LD_VAR 0 4
41544: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41545: LD_INT 0
41547: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41548: LD_ADDR_VAR 0 5
41552: PUSH
41553: LD_VAR 0 1
41557: PPUSH
41558: CALL_OW 250
41562: PPUSH
41563: LD_VAR 0 1
41567: PPUSH
41568: CALL_OW 251
41572: PPUSH
41573: LD_VAR 0 2
41577: PPUSH
41578: LD_VAR 0 3
41582: PPUSH
41583: LD_VAR 0 4
41587: PPUSH
41588: CALL 41598 0 5
41592: ST_TO_ADDR
// end ;
41593: LD_VAR 0 5
41597: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41598: LD_INT 0
41600: PPUSH
41601: PPUSH
41602: PPUSH
41603: PPUSH
// if not list then
41604: LD_VAR 0 3
41608: NOT
41609: IFFALSE 41613
// exit ;
41611: GO 42001
// result := [ ] ;
41613: LD_ADDR_VAR 0 6
41617: PUSH
41618: EMPTY
41619: ST_TO_ADDR
// for i in list do
41620: LD_ADDR_VAR 0 7
41624: PUSH
41625: LD_VAR 0 3
41629: PUSH
41630: FOR_IN
41631: IFFALSE 41833
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41633: LD_ADDR_VAR 0 9
41637: PUSH
41638: LD_VAR 0 7
41642: PPUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: LD_VAR 0 2
41652: PPUSH
41653: CALL_OW 297
41657: ST_TO_ADDR
// if not result then
41658: LD_VAR 0 6
41662: NOT
41663: IFFALSE 41689
// result := [ [ i , tmp ] ] else
41665: LD_ADDR_VAR 0 6
41669: PUSH
41670: LD_VAR 0 7
41674: PUSH
41675: LD_VAR 0 9
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: EMPTY
41685: LIST
41686: ST_TO_ADDR
41687: GO 41831
// begin if result [ result ] [ 2 ] < tmp then
41689: LD_VAR 0 6
41693: PUSH
41694: LD_VAR 0 6
41698: ARRAY
41699: PUSH
41700: LD_INT 2
41702: ARRAY
41703: PUSH
41704: LD_VAR 0 9
41708: LESS
41709: IFFALSE 41751
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41711: LD_ADDR_VAR 0 6
41715: PUSH
41716: LD_VAR 0 6
41720: PPUSH
41721: LD_VAR 0 6
41725: PUSH
41726: LD_INT 1
41728: PLUS
41729: PPUSH
41730: LD_VAR 0 7
41734: PUSH
41735: LD_VAR 0 9
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PPUSH
41744: CALL_OW 2
41748: ST_TO_ADDR
41749: GO 41831
// for j = 1 to result do
41751: LD_ADDR_VAR 0 8
41755: PUSH
41756: DOUBLE
41757: LD_INT 1
41759: DEC
41760: ST_TO_ADDR
41761: LD_VAR 0 6
41765: PUSH
41766: FOR_TO
41767: IFFALSE 41829
// begin if tmp < result [ j ] [ 2 ] then
41769: LD_VAR 0 9
41773: PUSH
41774: LD_VAR 0 6
41778: PUSH
41779: LD_VAR 0 8
41783: ARRAY
41784: PUSH
41785: LD_INT 2
41787: ARRAY
41788: LESS
41789: IFFALSE 41827
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41791: LD_ADDR_VAR 0 6
41795: PUSH
41796: LD_VAR 0 6
41800: PPUSH
41801: LD_VAR 0 8
41805: PPUSH
41806: LD_VAR 0 7
41810: PUSH
41811: LD_VAR 0 9
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PPUSH
41820: CALL_OW 2
41824: ST_TO_ADDR
// break ;
41825: GO 41829
// end ; end ;
41827: GO 41766
41829: POP
41830: POP
// end ; end ;
41831: GO 41630
41833: POP
41834: POP
// if result and not asc then
41835: LD_VAR 0 6
41839: PUSH
41840: LD_VAR 0 4
41844: NOT
41845: AND
41846: IFFALSE 41921
// begin tmp := result ;
41848: LD_ADDR_VAR 0 9
41852: PUSH
41853: LD_VAR 0 6
41857: ST_TO_ADDR
// for i = tmp downto 1 do
41858: LD_ADDR_VAR 0 7
41862: PUSH
41863: DOUBLE
41864: LD_VAR 0 9
41868: INC
41869: ST_TO_ADDR
41870: LD_INT 1
41872: PUSH
41873: FOR_DOWNTO
41874: IFFALSE 41919
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41876: LD_ADDR_VAR 0 6
41880: PUSH
41881: LD_VAR 0 6
41885: PPUSH
41886: LD_VAR 0 9
41890: PUSH
41891: LD_VAR 0 7
41895: MINUS
41896: PUSH
41897: LD_INT 1
41899: PLUS
41900: PPUSH
41901: LD_VAR 0 9
41905: PUSH
41906: LD_VAR 0 7
41910: ARRAY
41911: PPUSH
41912: CALL_OW 1
41916: ST_TO_ADDR
41917: GO 41873
41919: POP
41920: POP
// end ; tmp := [ ] ;
41921: LD_ADDR_VAR 0 9
41925: PUSH
41926: EMPTY
41927: ST_TO_ADDR
// if mode then
41928: LD_VAR 0 5
41932: IFFALSE 42001
// begin for i = 1 to result do
41934: LD_ADDR_VAR 0 7
41938: PUSH
41939: DOUBLE
41940: LD_INT 1
41942: DEC
41943: ST_TO_ADDR
41944: LD_VAR 0 6
41948: PUSH
41949: FOR_TO
41950: IFFALSE 41989
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41952: LD_ADDR_VAR 0 9
41956: PUSH
41957: LD_VAR 0 9
41961: PPUSH
41962: LD_VAR 0 7
41966: PPUSH
41967: LD_VAR 0 6
41971: PUSH
41972: LD_VAR 0 7
41976: ARRAY
41977: PUSH
41978: LD_INT 1
41980: ARRAY
41981: PPUSH
41982: CALL_OW 1
41986: ST_TO_ADDR
41987: GO 41949
41989: POP
41990: POP
// result := tmp ;
41991: LD_ADDR_VAR 0 6
41995: PUSH
41996: LD_VAR 0 9
42000: ST_TO_ADDR
// end ; end ;
42001: LD_VAR 0 6
42005: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42006: LD_INT 0
42008: PPUSH
42009: PPUSH
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42014: LD_ADDR_VAR 0 5
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: ST_TO_ADDR
// if not x or not y then
42036: LD_VAR 0 2
42040: NOT
42041: PUSH
42042: LD_VAR 0 3
42046: NOT
42047: OR
42048: IFFALSE 42052
// exit ;
42050: GO 43704
// if not range then
42052: LD_VAR 0 4
42056: NOT
42057: IFFALSE 42067
// range := 10 ;
42059: LD_ADDR_VAR 0 4
42063: PUSH
42064: LD_INT 10
42066: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42067: LD_ADDR_VAR 0 8
42071: PUSH
42072: LD_INT 81
42074: PUSH
42075: LD_VAR 0 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 92
42086: PUSH
42087: LD_VAR 0 2
42091: PUSH
42092: LD_VAR 0 3
42096: PUSH
42097: LD_VAR 0 4
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 3
42110: PUSH
42111: LD_INT 21
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: PPUSH
42130: CALL_OW 69
42134: ST_TO_ADDR
// if not tmp then
42135: LD_VAR 0 8
42139: NOT
42140: IFFALSE 42144
// exit ;
42142: GO 43704
// for i in tmp do
42144: LD_ADDR_VAR 0 6
42148: PUSH
42149: LD_VAR 0 8
42153: PUSH
42154: FOR_IN
42155: IFFALSE 43679
// begin points := [ 0 , 0 , 0 ] ;
42157: LD_ADDR_VAR 0 9
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: LIST
42175: ST_TO_ADDR
// bpoints := 1 ;
42176: LD_ADDR_VAR 0 10
42180: PUSH
42181: LD_INT 1
42183: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42184: LD_VAR 0 6
42188: PPUSH
42189: CALL_OW 247
42193: PUSH
42194: LD_INT 1
42196: DOUBLE
42197: EQUAL
42198: IFTRUE 42202
42200: GO 42780
42202: POP
// begin if GetClass ( i ) = 1 then
42203: LD_VAR 0 6
42207: PPUSH
42208: CALL_OW 257
42212: PUSH
42213: LD_INT 1
42215: EQUAL
42216: IFFALSE 42237
// points := [ 10 , 5 , 3 ] ;
42218: LD_ADDR_VAR 0 9
42222: PUSH
42223: LD_INT 10
42225: PUSH
42226: LD_INT 5
42228: PUSH
42229: LD_INT 3
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: LIST
42236: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42237: LD_VAR 0 6
42241: PPUSH
42242: CALL_OW 257
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: LD_INT 3
42252: PUSH
42253: LD_INT 4
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: IN
42261: IFFALSE 42282
// points := [ 3 , 2 , 1 ] ;
42263: LD_ADDR_VAR 0 9
42267: PUSH
42268: LD_INT 3
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42282: LD_VAR 0 6
42286: PPUSH
42287: CALL_OW 257
42291: PUSH
42292: LD_INT 5
42294: EQUAL
42295: IFFALSE 42316
// points := [ 130 , 5 , 2 ] ;
42297: LD_ADDR_VAR 0 9
42301: PUSH
42302: LD_INT 130
42304: PUSH
42305: LD_INT 5
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42316: LD_VAR 0 6
42320: PPUSH
42321: CALL_OW 257
42325: PUSH
42326: LD_INT 8
42328: EQUAL
42329: IFFALSE 42350
// points := [ 35 , 35 , 30 ] ;
42331: LD_ADDR_VAR 0 9
42335: PUSH
42336: LD_INT 35
42338: PUSH
42339: LD_INT 35
42341: PUSH
42342: LD_INT 30
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: LIST
42349: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42350: LD_VAR 0 6
42354: PPUSH
42355: CALL_OW 257
42359: PUSH
42360: LD_INT 9
42362: EQUAL
42363: IFFALSE 42384
// points := [ 20 , 55 , 40 ] ;
42365: LD_ADDR_VAR 0 9
42369: PUSH
42370: LD_INT 20
42372: PUSH
42373: LD_INT 55
42375: PUSH
42376: LD_INT 40
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42384: LD_VAR 0 6
42388: PPUSH
42389: CALL_OW 257
42393: PUSH
42394: LD_INT 12
42396: PUSH
42397: LD_INT 16
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: IN
42404: IFFALSE 42425
// points := [ 5 , 3 , 2 ] ;
42406: LD_ADDR_VAR 0 9
42410: PUSH
42411: LD_INT 5
42413: PUSH
42414: LD_INT 3
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42425: LD_VAR 0 6
42429: PPUSH
42430: CALL_OW 257
42434: PUSH
42435: LD_INT 17
42437: EQUAL
42438: IFFALSE 42459
// points := [ 100 , 50 , 75 ] ;
42440: LD_ADDR_VAR 0 9
42444: PUSH
42445: LD_INT 100
42447: PUSH
42448: LD_INT 50
42450: PUSH
42451: LD_INT 75
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42459: LD_VAR 0 6
42463: PPUSH
42464: CALL_OW 257
42468: PUSH
42469: LD_INT 15
42471: EQUAL
42472: IFFALSE 42493
// points := [ 10 , 5 , 3 ] ;
42474: LD_ADDR_VAR 0 9
42478: PUSH
42479: LD_INT 10
42481: PUSH
42482: LD_INT 5
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42493: LD_VAR 0 6
42497: PPUSH
42498: CALL_OW 257
42502: PUSH
42503: LD_INT 14
42505: EQUAL
42506: IFFALSE 42527
// points := [ 10 , 0 , 0 ] ;
42508: LD_ADDR_VAR 0 9
42512: PUSH
42513: LD_INT 10
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42527: LD_VAR 0 6
42531: PPUSH
42532: CALL_OW 257
42536: PUSH
42537: LD_INT 11
42539: EQUAL
42540: IFFALSE 42561
// points := [ 30 , 10 , 5 ] ;
42542: LD_ADDR_VAR 0 9
42546: PUSH
42547: LD_INT 30
42549: PUSH
42550: LD_INT 10
42552: PUSH
42553: LD_INT 5
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42561: LD_VAR 0 1
42565: PPUSH
42566: LD_INT 5
42568: PPUSH
42569: CALL_OW 321
42573: PUSH
42574: LD_INT 2
42576: EQUAL
42577: IFFALSE 42594
// bpoints := bpoints * 1.8 ;
42579: LD_ADDR_VAR 0 10
42583: PUSH
42584: LD_VAR 0 10
42588: PUSH
42589: LD_REAL  1.80000000000000E+0000
42592: MUL
42593: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42594: LD_VAR 0 6
42598: PPUSH
42599: CALL_OW 257
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 3
42612: PUSH
42613: LD_INT 4
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: IN
42622: PUSH
42623: LD_VAR 0 1
42627: PPUSH
42628: LD_INT 51
42630: PPUSH
42631: CALL_OW 321
42635: PUSH
42636: LD_INT 2
42638: EQUAL
42639: AND
42640: IFFALSE 42657
// bpoints := bpoints * 1.2 ;
42642: LD_ADDR_VAR 0 10
42646: PUSH
42647: LD_VAR 0 10
42651: PUSH
42652: LD_REAL  1.20000000000000E+0000
42655: MUL
42656: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42657: LD_VAR 0 6
42661: PPUSH
42662: CALL_OW 257
42666: PUSH
42667: LD_INT 5
42669: PUSH
42670: LD_INT 7
42672: PUSH
42673: LD_INT 9
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: IN
42681: PUSH
42682: LD_VAR 0 1
42686: PPUSH
42687: LD_INT 52
42689: PPUSH
42690: CALL_OW 321
42694: PUSH
42695: LD_INT 2
42697: EQUAL
42698: AND
42699: IFFALSE 42716
// bpoints := bpoints * 1.5 ;
42701: LD_ADDR_VAR 0 10
42705: PUSH
42706: LD_VAR 0 10
42710: PUSH
42711: LD_REAL  1.50000000000000E+0000
42714: MUL
42715: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42716: LD_VAR 0 1
42720: PPUSH
42721: LD_INT 66
42723: PPUSH
42724: CALL_OW 321
42728: PUSH
42729: LD_INT 2
42731: EQUAL
42732: IFFALSE 42749
// bpoints := bpoints * 1.1 ;
42734: LD_ADDR_VAR 0 10
42738: PUSH
42739: LD_VAR 0 10
42743: PUSH
42744: LD_REAL  1.10000000000000E+0000
42747: MUL
42748: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42749: LD_ADDR_VAR 0 10
42753: PUSH
42754: LD_VAR 0 10
42758: PUSH
42759: LD_VAR 0 6
42763: PPUSH
42764: LD_INT 1
42766: PPUSH
42767: CALL_OW 259
42771: PUSH
42772: LD_REAL  1.15000000000000E+0000
42775: MUL
42776: MUL
42777: ST_TO_ADDR
// end ; unit_vehicle :
42778: GO 43608
42780: LD_INT 2
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42788
42786: GO 43596
42788: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42789: LD_VAR 0 6
42793: PPUSH
42794: CALL_OW 264
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 42
42804: PUSH
42805: LD_INT 24
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: IN
42813: IFFALSE 42834
// points := [ 25 , 5 , 3 ] ;
42815: LD_ADDR_VAR 0 9
42819: PUSH
42820: LD_INT 25
42822: PUSH
42823: LD_INT 5
42825: PUSH
42826: LD_INT 3
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42834: LD_VAR 0 6
42838: PPUSH
42839: CALL_OW 264
42843: PUSH
42844: LD_INT 4
42846: PUSH
42847: LD_INT 43
42849: PUSH
42850: LD_INT 25
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: LIST
42857: IN
42858: IFFALSE 42879
// points := [ 40 , 15 , 5 ] ;
42860: LD_ADDR_VAR 0 9
42864: PUSH
42865: LD_INT 40
42867: PUSH
42868: LD_INT 15
42870: PUSH
42871: LD_INT 5
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: LIST
42878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42879: LD_VAR 0 6
42883: PPUSH
42884: CALL_OW 264
42888: PUSH
42889: LD_INT 3
42891: PUSH
42892: LD_INT 23
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: IN
42899: IFFALSE 42920
// points := [ 7 , 25 , 8 ] ;
42901: LD_ADDR_VAR 0 9
42905: PUSH
42906: LD_INT 7
42908: PUSH
42909: LD_INT 25
42911: PUSH
42912: LD_INT 8
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42920: LD_VAR 0 6
42924: PPUSH
42925: CALL_OW 264
42929: PUSH
42930: LD_INT 5
42932: PUSH
42933: LD_INT 27
42935: PUSH
42936: LD_INT 44
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: IN
42944: IFFALSE 42965
// points := [ 14 , 50 , 16 ] ;
42946: LD_ADDR_VAR 0 9
42950: PUSH
42951: LD_INT 14
42953: PUSH
42954: LD_INT 50
42956: PUSH
42957: LD_INT 16
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42965: LD_VAR 0 6
42969: PPUSH
42970: CALL_OW 264
42974: PUSH
42975: LD_INT 6
42977: PUSH
42978: LD_INT 46
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: IN
42985: IFFALSE 43006
// points := [ 32 , 120 , 70 ] ;
42987: LD_ADDR_VAR 0 9
42991: PUSH
42992: LD_INT 32
42994: PUSH
42995: LD_INT 120
42997: PUSH
42998: LD_INT 70
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43006: LD_VAR 0 6
43010: PPUSH
43011: CALL_OW 264
43015: PUSH
43016: LD_INT 7
43018: PUSH
43019: LD_INT 28
43021: PUSH
43022: LD_INT 45
43024: PUSH
43025: LD_EXP 138
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: IN
43036: IFFALSE 43057
// points := [ 35 , 20 , 45 ] ;
43038: LD_ADDR_VAR 0 9
43042: PUSH
43043: LD_INT 35
43045: PUSH
43046: LD_INT 20
43048: PUSH
43049: LD_INT 45
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: LIST
43056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43057: LD_VAR 0 6
43061: PPUSH
43062: CALL_OW 264
43066: PUSH
43067: LD_INT 47
43069: PUSH
43070: EMPTY
43071: LIST
43072: IN
43073: IFFALSE 43094
// points := [ 67 , 45 , 75 ] ;
43075: LD_ADDR_VAR 0 9
43079: PUSH
43080: LD_INT 67
43082: PUSH
43083: LD_INT 45
43085: PUSH
43086: LD_INT 75
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: LIST
43093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43094: LD_VAR 0 6
43098: PPUSH
43099: CALL_OW 264
43103: PUSH
43104: LD_INT 26
43106: PUSH
43107: EMPTY
43108: LIST
43109: IN
43110: IFFALSE 43131
// points := [ 120 , 30 , 80 ] ;
43112: LD_ADDR_VAR 0 9
43116: PUSH
43117: LD_INT 120
43119: PUSH
43120: LD_INT 30
43122: PUSH
43123: LD_INT 80
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43131: LD_VAR 0 6
43135: PPUSH
43136: CALL_OW 264
43140: PUSH
43141: LD_INT 22
43143: PUSH
43144: EMPTY
43145: LIST
43146: IN
43147: IFFALSE 43168
// points := [ 40 , 1 , 1 ] ;
43149: LD_ADDR_VAR 0 9
43153: PUSH
43154: LD_INT 40
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43168: LD_VAR 0 6
43172: PPUSH
43173: CALL_OW 264
43177: PUSH
43178: LD_INT 29
43180: PUSH
43181: EMPTY
43182: LIST
43183: IN
43184: IFFALSE 43205
// points := [ 70 , 200 , 400 ] ;
43186: LD_ADDR_VAR 0 9
43190: PUSH
43191: LD_INT 70
43193: PUSH
43194: LD_INT 200
43196: PUSH
43197: LD_INT 400
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: LIST
43204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43205: LD_VAR 0 6
43209: PPUSH
43210: CALL_OW 264
43214: PUSH
43215: LD_INT 14
43217: PUSH
43218: LD_INT 53
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: IN
43225: IFFALSE 43246
// points := [ 40 , 10 , 20 ] ;
43227: LD_ADDR_VAR 0 9
43231: PUSH
43232: LD_INT 40
43234: PUSH
43235: LD_INT 10
43237: PUSH
43238: LD_INT 20
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43246: LD_VAR 0 6
43250: PPUSH
43251: CALL_OW 264
43255: PUSH
43256: LD_INT 9
43258: PUSH
43259: EMPTY
43260: LIST
43261: IN
43262: IFFALSE 43283
// points := [ 5 , 70 , 20 ] ;
43264: LD_ADDR_VAR 0 9
43268: PUSH
43269: LD_INT 5
43271: PUSH
43272: LD_INT 70
43274: PUSH
43275: LD_INT 20
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43283: LD_VAR 0 6
43287: PPUSH
43288: CALL_OW 264
43292: PUSH
43293: LD_INT 10
43295: PUSH
43296: EMPTY
43297: LIST
43298: IN
43299: IFFALSE 43320
// points := [ 35 , 110 , 70 ] ;
43301: LD_ADDR_VAR 0 9
43305: PUSH
43306: LD_INT 35
43308: PUSH
43309: LD_INT 110
43311: PUSH
43312: LD_INT 70
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43320: LD_VAR 0 6
43324: PPUSH
43325: CALL_OW 265
43329: PUSH
43330: LD_INT 25
43332: EQUAL
43333: IFFALSE 43354
// points := [ 80 , 65 , 100 ] ;
43335: LD_ADDR_VAR 0 9
43339: PUSH
43340: LD_INT 80
43342: PUSH
43343: LD_INT 65
43345: PUSH
43346: LD_INT 100
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43354: LD_VAR 0 6
43358: PPUSH
43359: CALL_OW 263
43363: PUSH
43364: LD_INT 1
43366: EQUAL
43367: IFFALSE 43402
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43369: LD_ADDR_VAR 0 10
43373: PUSH
43374: LD_VAR 0 10
43378: PUSH
43379: LD_VAR 0 6
43383: PPUSH
43384: CALL_OW 311
43388: PPUSH
43389: LD_INT 3
43391: PPUSH
43392: CALL_OW 259
43396: PUSH
43397: LD_INT 4
43399: MUL
43400: MUL
43401: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43402: LD_VAR 0 6
43406: PPUSH
43407: CALL_OW 263
43411: PUSH
43412: LD_INT 2
43414: EQUAL
43415: IFFALSE 43466
// begin j := IsControledBy ( i ) ;
43417: LD_ADDR_VAR 0 7
43421: PUSH
43422: LD_VAR 0 6
43426: PPUSH
43427: CALL_OW 312
43431: ST_TO_ADDR
// if j then
43432: LD_VAR 0 7
43436: IFFALSE 43466
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43438: LD_ADDR_VAR 0 10
43442: PUSH
43443: LD_VAR 0 10
43447: PUSH
43448: LD_VAR 0 7
43452: PPUSH
43453: LD_INT 3
43455: PPUSH
43456: CALL_OW 259
43460: PUSH
43461: LD_INT 3
43463: MUL
43464: MUL
43465: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43466: LD_VAR 0 6
43470: PPUSH
43471: CALL_OW 264
43475: PUSH
43476: LD_INT 5
43478: PUSH
43479: LD_INT 6
43481: PUSH
43482: LD_INT 46
43484: PUSH
43485: LD_INT 44
43487: PUSH
43488: LD_INT 47
43490: PUSH
43491: LD_INT 45
43493: PUSH
43494: LD_INT 28
43496: PUSH
43497: LD_INT 7
43499: PUSH
43500: LD_INT 27
43502: PUSH
43503: LD_INT 29
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: IN
43518: PUSH
43519: LD_VAR 0 1
43523: PPUSH
43524: LD_INT 52
43526: PPUSH
43527: CALL_OW 321
43531: PUSH
43532: LD_INT 2
43534: EQUAL
43535: AND
43536: IFFALSE 43553
// bpoints := bpoints * 1.2 ;
43538: LD_ADDR_VAR 0 10
43542: PUSH
43543: LD_VAR 0 10
43547: PUSH
43548: LD_REAL  1.20000000000000E+0000
43551: MUL
43552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43553: LD_VAR 0 6
43557: PPUSH
43558: CALL_OW 264
43562: PUSH
43563: LD_INT 6
43565: PUSH
43566: LD_INT 46
43568: PUSH
43569: LD_INT 47
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: LIST
43576: IN
43577: IFFALSE 43594
// bpoints := bpoints * 1.2 ;
43579: LD_ADDR_VAR 0 10
43583: PUSH
43584: LD_VAR 0 10
43588: PUSH
43589: LD_REAL  1.20000000000000E+0000
43592: MUL
43593: ST_TO_ADDR
// end ; unit_building :
43594: GO 43608
43596: LD_INT 3
43598: DOUBLE
43599: EQUAL
43600: IFTRUE 43604
43602: GO 43607
43604: POP
// ; end ;
43605: GO 43608
43607: POP
// for j = 1 to 3 do
43608: LD_ADDR_VAR 0 7
43612: PUSH
43613: DOUBLE
43614: LD_INT 1
43616: DEC
43617: ST_TO_ADDR
43618: LD_INT 3
43620: PUSH
43621: FOR_TO
43622: IFFALSE 43675
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43624: LD_ADDR_VAR 0 5
43628: PUSH
43629: LD_VAR 0 5
43633: PPUSH
43634: LD_VAR 0 7
43638: PPUSH
43639: LD_VAR 0 5
43643: PUSH
43644: LD_VAR 0 7
43648: ARRAY
43649: PUSH
43650: LD_VAR 0 9
43654: PUSH
43655: LD_VAR 0 7
43659: ARRAY
43660: PUSH
43661: LD_VAR 0 10
43665: MUL
43666: PLUS
43667: PPUSH
43668: CALL_OW 1
43672: ST_TO_ADDR
43673: GO 43621
43675: POP
43676: POP
// end ;
43677: GO 42154
43679: POP
43680: POP
// result := Replace ( result , 4 , tmp ) ;
43681: LD_ADDR_VAR 0 5
43685: PUSH
43686: LD_VAR 0 5
43690: PPUSH
43691: LD_INT 4
43693: PPUSH
43694: LD_VAR 0 8
43698: PPUSH
43699: CALL_OW 1
43703: ST_TO_ADDR
// end ;
43704: LD_VAR 0 5
43708: RET
// export function DangerAtRange ( unit , range ) ; begin
43709: LD_INT 0
43711: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43712: LD_ADDR_VAR 0 3
43716: PUSH
43717: LD_VAR 0 1
43721: PPUSH
43722: CALL_OW 255
43726: PPUSH
43727: LD_VAR 0 1
43731: PPUSH
43732: CALL_OW 250
43736: PPUSH
43737: LD_VAR 0 1
43741: PPUSH
43742: CALL_OW 251
43746: PPUSH
43747: LD_VAR 0 2
43751: PPUSH
43752: CALL 42006 0 4
43756: ST_TO_ADDR
// end ;
43757: LD_VAR 0 3
43761: RET
// export function DangerInArea ( side , area ) ; begin
43762: LD_INT 0
43764: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43765: LD_ADDR_VAR 0 3
43769: PUSH
43770: LD_VAR 0 2
43774: PPUSH
43775: LD_INT 81
43777: PUSH
43778: LD_VAR 0 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PPUSH
43787: CALL_OW 70
43791: ST_TO_ADDR
// end ;
43792: LD_VAR 0 3
43796: RET
// export function IsExtension ( b ) ; begin
43797: LD_INT 0
43799: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43800: LD_ADDR_VAR 0 2
43804: PUSH
43805: LD_VAR 0 1
43809: PUSH
43810: LD_INT 23
43812: PUSH
43813: LD_INT 20
43815: PUSH
43816: LD_INT 22
43818: PUSH
43819: LD_INT 17
43821: PUSH
43822: LD_INT 24
43824: PUSH
43825: LD_INT 21
43827: PUSH
43828: LD_INT 19
43830: PUSH
43831: LD_INT 16
43833: PUSH
43834: LD_INT 25
43836: PUSH
43837: LD_INT 18
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: IN
43852: ST_TO_ADDR
// end ;
43853: LD_VAR 0 2
43857: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43858: LD_INT 0
43860: PPUSH
43861: PPUSH
43862: PPUSH
// result := [ ] ;
43863: LD_ADDR_VAR 0 4
43867: PUSH
43868: EMPTY
43869: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43870: LD_ADDR_VAR 0 5
43874: PUSH
43875: LD_VAR 0 2
43879: PPUSH
43880: LD_INT 21
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PPUSH
43890: CALL_OW 70
43894: ST_TO_ADDR
// if not tmp then
43895: LD_VAR 0 5
43899: NOT
43900: IFFALSE 43904
// exit ;
43902: GO 43968
// if checkLink then
43904: LD_VAR 0 3
43908: IFFALSE 43958
// begin for i in tmp do
43910: LD_ADDR_VAR 0 6
43914: PUSH
43915: LD_VAR 0 5
43919: PUSH
43920: FOR_IN
43921: IFFALSE 43956
// if GetBase ( i ) <> base then
43923: LD_VAR 0 6
43927: PPUSH
43928: CALL_OW 274
43932: PUSH
43933: LD_VAR 0 1
43937: NONEQUAL
43938: IFFALSE 43954
// ComLinkToBase ( base , i ) ;
43940: LD_VAR 0 1
43944: PPUSH
43945: LD_VAR 0 6
43949: PPUSH
43950: CALL_OW 169
43954: GO 43920
43956: POP
43957: POP
// end ; result := tmp ;
43958: LD_ADDR_VAR 0 4
43962: PUSH
43963: LD_VAR 0 5
43967: ST_TO_ADDR
// end ;
43968: LD_VAR 0 4
43972: RET
// export function ComComplete ( units , b ) ; var i ; begin
43973: LD_INT 0
43975: PPUSH
43976: PPUSH
// if not units then
43977: LD_VAR 0 1
43981: NOT
43982: IFFALSE 43986
// exit ;
43984: GO 44076
// for i in units do
43986: LD_ADDR_VAR 0 4
43990: PUSH
43991: LD_VAR 0 1
43995: PUSH
43996: FOR_IN
43997: IFFALSE 44074
// if BuildingStatus ( b ) = bs_build then
43999: LD_VAR 0 2
44003: PPUSH
44004: CALL_OW 461
44008: PUSH
44009: LD_INT 1
44011: EQUAL
44012: IFFALSE 44072
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44014: LD_VAR 0 4
44018: PPUSH
44019: LD_STRING h
44021: PUSH
44022: LD_VAR 0 2
44026: PPUSH
44027: CALL_OW 250
44031: PUSH
44032: LD_VAR 0 2
44036: PPUSH
44037: CALL_OW 251
44041: PUSH
44042: LD_VAR 0 2
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: PUSH
44065: EMPTY
44066: LIST
44067: PPUSH
44068: CALL_OW 446
44072: GO 43996
44074: POP
44075: POP
// end ;
44076: LD_VAR 0 3
44080: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44081: LD_INT 0
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44089: LD_VAR 0 1
44093: NOT
44094: PUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: CALL_OW 263
44104: PUSH
44105: LD_INT 2
44107: NONEQUAL
44108: OR
44109: IFFALSE 44113
// exit ;
44111: GO 44429
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44113: LD_ADDR_VAR 0 6
44117: PUSH
44118: LD_INT 22
44120: PUSH
44121: LD_VAR 0 1
44125: PPUSH
44126: CALL_OW 255
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: LD_INT 30
44140: PUSH
44141: LD_INT 36
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 34
44150: PUSH
44151: LD_INT 31
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PPUSH
44167: CALL_OW 69
44171: ST_TO_ADDR
// if not tmp then
44172: LD_VAR 0 6
44176: NOT
44177: IFFALSE 44181
// exit ;
44179: GO 44429
// result := [ ] ;
44181: LD_ADDR_VAR 0 2
44185: PUSH
44186: EMPTY
44187: ST_TO_ADDR
// for i in tmp do
44188: LD_ADDR_VAR 0 3
44192: PUSH
44193: LD_VAR 0 6
44197: PUSH
44198: FOR_IN
44199: IFFALSE 44270
// begin t := UnitsInside ( i ) ;
44201: LD_ADDR_VAR 0 4
44205: PUSH
44206: LD_VAR 0 3
44210: PPUSH
44211: CALL_OW 313
44215: ST_TO_ADDR
// if t then
44216: LD_VAR 0 4
44220: IFFALSE 44268
// for j in t do
44222: LD_ADDR_VAR 0 7
44226: PUSH
44227: LD_VAR 0 4
44231: PUSH
44232: FOR_IN
44233: IFFALSE 44266
// result := Replace ( result , result + 1 , j ) ;
44235: LD_ADDR_VAR 0 2
44239: PUSH
44240: LD_VAR 0 2
44244: PPUSH
44245: LD_VAR 0 2
44249: PUSH
44250: LD_INT 1
44252: PLUS
44253: PPUSH
44254: LD_VAR 0 7
44258: PPUSH
44259: CALL_OW 1
44263: ST_TO_ADDR
44264: GO 44232
44266: POP
44267: POP
// end ;
44268: GO 44198
44270: POP
44271: POP
// if not result then
44272: LD_VAR 0 2
44276: NOT
44277: IFFALSE 44281
// exit ;
44279: GO 44429
// mech := result [ 1 ] ;
44281: LD_ADDR_VAR 0 5
44285: PUSH
44286: LD_VAR 0 2
44290: PUSH
44291: LD_INT 1
44293: ARRAY
44294: ST_TO_ADDR
// if result > 1 then
44295: LD_VAR 0 2
44299: PUSH
44300: LD_INT 1
44302: GREATER
44303: IFFALSE 44415
// begin for i = 2 to result do
44305: LD_ADDR_VAR 0 3
44309: PUSH
44310: DOUBLE
44311: LD_INT 2
44313: DEC
44314: ST_TO_ADDR
44315: LD_VAR 0 2
44319: PUSH
44320: FOR_TO
44321: IFFALSE 44413
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44323: LD_ADDR_VAR 0 4
44327: PUSH
44328: LD_VAR 0 2
44332: PUSH
44333: LD_VAR 0 3
44337: ARRAY
44338: PPUSH
44339: LD_INT 3
44341: PPUSH
44342: CALL_OW 259
44346: PUSH
44347: LD_VAR 0 2
44351: PUSH
44352: LD_VAR 0 3
44356: ARRAY
44357: PPUSH
44358: CALL_OW 432
44362: MINUS
44363: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44364: LD_VAR 0 4
44368: PUSH
44369: LD_VAR 0 5
44373: PPUSH
44374: LD_INT 3
44376: PPUSH
44377: CALL_OW 259
44381: PUSH
44382: LD_VAR 0 5
44386: PPUSH
44387: CALL_OW 432
44391: MINUS
44392: GREATEREQUAL
44393: IFFALSE 44411
// mech := result [ i ] ;
44395: LD_ADDR_VAR 0 5
44399: PUSH
44400: LD_VAR 0 2
44404: PUSH
44405: LD_VAR 0 3
44409: ARRAY
44410: ST_TO_ADDR
// end ;
44411: GO 44320
44413: POP
44414: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44415: LD_VAR 0 1
44419: PPUSH
44420: LD_VAR 0 5
44424: PPUSH
44425: CALL_OW 135
// end ;
44429: LD_VAR 0 2
44433: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44434: LD_INT 0
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
44440: PPUSH
44441: PPUSH
44442: PPUSH
44443: PPUSH
44444: PPUSH
44445: PPUSH
44446: PPUSH
44447: PPUSH
44448: PPUSH
// result := [ ] ;
44449: LD_ADDR_VAR 0 7
44453: PUSH
44454: EMPTY
44455: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44456: LD_VAR 0 1
44460: PPUSH
44461: CALL_OW 266
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: IN
44476: NOT
44477: IFFALSE 44481
// exit ;
44479: GO 46115
// if name then
44481: LD_VAR 0 3
44485: IFFALSE 44501
// SetBName ( base_dep , name ) ;
44487: LD_VAR 0 1
44491: PPUSH
44492: LD_VAR 0 3
44496: PPUSH
44497: CALL_OW 500
// base := GetBase ( base_dep ) ;
44501: LD_ADDR_VAR 0 15
44505: PUSH
44506: LD_VAR 0 1
44510: PPUSH
44511: CALL_OW 274
44515: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44516: LD_ADDR_VAR 0 16
44520: PUSH
44521: LD_VAR 0 1
44525: PPUSH
44526: CALL_OW 255
44530: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44531: LD_ADDR_VAR 0 17
44535: PUSH
44536: LD_VAR 0 1
44540: PPUSH
44541: CALL_OW 248
44545: ST_TO_ADDR
// if sources then
44546: LD_VAR 0 5
44550: IFFALSE 44597
// for i = 1 to 3 do
44552: LD_ADDR_VAR 0 8
44556: PUSH
44557: DOUBLE
44558: LD_INT 1
44560: DEC
44561: ST_TO_ADDR
44562: LD_INT 3
44564: PUSH
44565: FOR_TO
44566: IFFALSE 44595
// AddResourceType ( base , i , sources [ i ] ) ;
44568: LD_VAR 0 15
44572: PPUSH
44573: LD_VAR 0 8
44577: PPUSH
44578: LD_VAR 0 5
44582: PUSH
44583: LD_VAR 0 8
44587: ARRAY
44588: PPUSH
44589: CALL_OW 276
44593: GO 44565
44595: POP
44596: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44597: LD_ADDR_VAR 0 18
44601: PUSH
44602: LD_VAR 0 15
44606: PPUSH
44607: LD_VAR 0 2
44611: PPUSH
44612: LD_INT 1
44614: PPUSH
44615: CALL 43858 0 3
44619: ST_TO_ADDR
// InitHc ;
44620: CALL_OW 19
// InitUc ;
44624: CALL_OW 18
// uc_side := side ;
44628: LD_ADDR_OWVAR 20
44632: PUSH
44633: LD_VAR 0 16
44637: ST_TO_ADDR
// uc_nation := nation ;
44638: LD_ADDR_OWVAR 21
44642: PUSH
44643: LD_VAR 0 17
44647: ST_TO_ADDR
// if buildings then
44648: LD_VAR 0 18
44652: IFFALSE 45974
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44654: LD_ADDR_VAR 0 19
44658: PUSH
44659: LD_VAR 0 18
44663: PPUSH
44664: LD_INT 2
44666: PUSH
44667: LD_INT 30
44669: PUSH
44670: LD_INT 29
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 30
44679: PUSH
44680: LD_INT 30
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: PPUSH
44692: CALL_OW 72
44696: ST_TO_ADDR
// if tmp then
44697: LD_VAR 0 19
44701: IFFALSE 44749
// for i in tmp do
44703: LD_ADDR_VAR 0 8
44707: PUSH
44708: LD_VAR 0 19
44712: PUSH
44713: FOR_IN
44714: IFFALSE 44747
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44716: LD_VAR 0 8
44720: PPUSH
44721: CALL_OW 250
44725: PPUSH
44726: LD_VAR 0 8
44730: PPUSH
44731: CALL_OW 251
44735: PPUSH
44736: LD_VAR 0 16
44740: PPUSH
44741: CALL_OW 441
44745: GO 44713
44747: POP
44748: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44749: LD_VAR 0 18
44753: PPUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 30
44759: PUSH
44760: LD_INT 32
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 30
44769: PUSH
44770: LD_INT 33
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: LIST
44781: PPUSH
44782: CALL_OW 72
44786: IFFALSE 44874
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44788: LD_ADDR_VAR 0 8
44792: PUSH
44793: LD_VAR 0 18
44797: PPUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 30
44803: PUSH
44804: LD_INT 32
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 30
44813: PUSH
44814: LD_INT 33
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: PPUSH
44826: CALL_OW 72
44830: PUSH
44831: FOR_IN
44832: IFFALSE 44872
// begin if not GetBWeapon ( i ) then
44834: LD_VAR 0 8
44838: PPUSH
44839: CALL_OW 269
44843: NOT
44844: IFFALSE 44870
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44846: LD_VAR 0 8
44850: PPUSH
44851: LD_VAR 0 8
44855: PPUSH
44856: LD_VAR 0 2
44860: PPUSH
44861: CALL 46120 0 2
44865: PPUSH
44866: CALL_OW 431
// end ;
44870: GO 44831
44872: POP
44873: POP
// end ; for i = 1 to personel do
44874: LD_ADDR_VAR 0 8
44878: PUSH
44879: DOUBLE
44880: LD_INT 1
44882: DEC
44883: ST_TO_ADDR
44884: LD_VAR 0 6
44888: PUSH
44889: FOR_TO
44890: IFFALSE 45954
// begin if i > 4 then
44892: LD_VAR 0 8
44896: PUSH
44897: LD_INT 4
44899: GREATER
44900: IFFALSE 44904
// break ;
44902: GO 45954
// case i of 1 :
44904: LD_VAR 0 8
44908: PUSH
44909: LD_INT 1
44911: DOUBLE
44912: EQUAL
44913: IFTRUE 44917
44915: GO 44997
44917: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44918: LD_ADDR_VAR 0 12
44922: PUSH
44923: LD_VAR 0 18
44927: PPUSH
44928: LD_INT 22
44930: PUSH
44931: LD_VAR 0 16
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 58
44942: PUSH
44943: EMPTY
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 30
44951: PUSH
44952: LD_INT 32
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 30
44961: PUSH
44962: LD_INT 4
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 30
44971: PUSH
44972: LD_INT 5
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: PPUSH
44990: CALL_OW 72
44994: ST_TO_ADDR
44995: GO 45219
44997: LD_INT 2
44999: DOUBLE
45000: EQUAL
45001: IFTRUE 45005
45003: GO 45067
45005: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45006: LD_ADDR_VAR 0 12
45010: PUSH
45011: LD_VAR 0 18
45015: PPUSH
45016: LD_INT 22
45018: PUSH
45019: LD_VAR 0 16
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: PUSH
45031: LD_INT 30
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 30
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: LIST
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PPUSH
45060: CALL_OW 72
45064: ST_TO_ADDR
45065: GO 45219
45067: LD_INT 3
45069: DOUBLE
45070: EQUAL
45071: IFTRUE 45075
45073: GO 45137
45075: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45076: LD_ADDR_VAR 0 12
45080: PUSH
45081: LD_VAR 0 18
45085: PPUSH
45086: LD_INT 22
45088: PUSH
45089: LD_VAR 0 16
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 30
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 30
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PPUSH
45130: CALL_OW 72
45134: ST_TO_ADDR
45135: GO 45219
45137: LD_INT 4
45139: DOUBLE
45140: EQUAL
45141: IFTRUE 45145
45143: GO 45218
45145: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45146: LD_ADDR_VAR 0 12
45150: PUSH
45151: LD_VAR 0 18
45155: PPUSH
45156: LD_INT 22
45158: PUSH
45159: LD_VAR 0 16
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: LD_INT 30
45173: PUSH
45174: LD_INT 6
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 30
45183: PUSH
45184: LD_INT 7
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 30
45193: PUSH
45194: LD_INT 8
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PPUSH
45211: CALL_OW 72
45215: ST_TO_ADDR
45216: GO 45219
45218: POP
// if i = 1 then
45219: LD_VAR 0 8
45223: PUSH
45224: LD_INT 1
45226: EQUAL
45227: IFFALSE 45338
// begin tmp := [ ] ;
45229: LD_ADDR_VAR 0 19
45233: PUSH
45234: EMPTY
45235: ST_TO_ADDR
// for j in f do
45236: LD_ADDR_VAR 0 9
45240: PUSH
45241: LD_VAR 0 12
45245: PUSH
45246: FOR_IN
45247: IFFALSE 45320
// if GetBType ( j ) = b_bunker then
45249: LD_VAR 0 9
45253: PPUSH
45254: CALL_OW 266
45258: PUSH
45259: LD_INT 32
45261: EQUAL
45262: IFFALSE 45289
// tmp := Insert ( tmp , 1 , j ) else
45264: LD_ADDR_VAR 0 19
45268: PUSH
45269: LD_VAR 0 19
45273: PPUSH
45274: LD_INT 1
45276: PPUSH
45277: LD_VAR 0 9
45281: PPUSH
45282: CALL_OW 2
45286: ST_TO_ADDR
45287: GO 45318
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45289: LD_ADDR_VAR 0 19
45293: PUSH
45294: LD_VAR 0 19
45298: PPUSH
45299: LD_VAR 0 19
45303: PUSH
45304: LD_INT 1
45306: PLUS
45307: PPUSH
45308: LD_VAR 0 9
45312: PPUSH
45313: CALL_OW 2
45317: ST_TO_ADDR
45318: GO 45246
45320: POP
45321: POP
// if tmp then
45322: LD_VAR 0 19
45326: IFFALSE 45338
// f := tmp ;
45328: LD_ADDR_VAR 0 12
45332: PUSH
45333: LD_VAR 0 19
45337: ST_TO_ADDR
// end ; x := personel [ i ] ;
45338: LD_ADDR_VAR 0 13
45342: PUSH
45343: LD_VAR 0 6
45347: PUSH
45348: LD_VAR 0 8
45352: ARRAY
45353: ST_TO_ADDR
// if x = - 1 then
45354: LD_VAR 0 13
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: EQUAL
45363: IFFALSE 45572
// begin for j in f do
45365: LD_ADDR_VAR 0 9
45369: PUSH
45370: LD_VAR 0 12
45374: PUSH
45375: FOR_IN
45376: IFFALSE 45568
// repeat InitHc ;
45378: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45382: LD_VAR 0 9
45386: PPUSH
45387: CALL_OW 266
45391: PUSH
45392: LD_INT 5
45394: EQUAL
45395: IFFALSE 45465
// begin if UnitsInside ( j ) < 3 then
45397: LD_VAR 0 9
45401: PPUSH
45402: CALL_OW 313
45406: PUSH
45407: LD_INT 3
45409: LESS
45410: IFFALSE 45446
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45412: LD_INT 0
45414: PPUSH
45415: LD_INT 5
45417: PUSH
45418: LD_INT 8
45420: PUSH
45421: LD_INT 9
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: PUSH
45429: LD_VAR 0 17
45433: ARRAY
45434: PPUSH
45435: LD_VAR 0 4
45439: PPUSH
45440: CALL_OW 380
45444: GO 45463
// PrepareHuman ( false , i , skill ) ;
45446: LD_INT 0
45448: PPUSH
45449: LD_VAR 0 8
45453: PPUSH
45454: LD_VAR 0 4
45458: PPUSH
45459: CALL_OW 380
// end else
45463: GO 45482
// PrepareHuman ( false , i , skill ) ;
45465: LD_INT 0
45467: PPUSH
45468: LD_VAR 0 8
45472: PPUSH
45473: LD_VAR 0 4
45477: PPUSH
45478: CALL_OW 380
// un := CreateHuman ;
45482: LD_ADDR_VAR 0 14
45486: PUSH
45487: CALL_OW 44
45491: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45492: LD_ADDR_VAR 0 7
45496: PUSH
45497: LD_VAR 0 7
45501: PPUSH
45502: LD_INT 1
45504: PPUSH
45505: LD_VAR 0 14
45509: PPUSH
45510: CALL_OW 2
45514: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45515: LD_VAR 0 14
45519: PPUSH
45520: LD_VAR 0 9
45524: PPUSH
45525: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45529: LD_VAR 0 9
45533: PPUSH
45534: CALL_OW 313
45538: PUSH
45539: LD_INT 6
45541: EQUAL
45542: PUSH
45543: LD_VAR 0 9
45547: PPUSH
45548: CALL_OW 266
45552: PUSH
45553: LD_INT 32
45555: PUSH
45556: LD_INT 31
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: IN
45563: OR
45564: IFFALSE 45378
45566: GO 45375
45568: POP
45569: POP
// end else
45570: GO 45952
// for j = 1 to x do
45572: LD_ADDR_VAR 0 9
45576: PUSH
45577: DOUBLE
45578: LD_INT 1
45580: DEC
45581: ST_TO_ADDR
45582: LD_VAR 0 13
45586: PUSH
45587: FOR_TO
45588: IFFALSE 45950
// begin InitHc ;
45590: CALL_OW 19
// if not f then
45594: LD_VAR 0 12
45598: NOT
45599: IFFALSE 45688
// begin PrepareHuman ( false , i , skill ) ;
45601: LD_INT 0
45603: PPUSH
45604: LD_VAR 0 8
45608: PPUSH
45609: LD_VAR 0 4
45613: PPUSH
45614: CALL_OW 380
// un := CreateHuman ;
45618: LD_ADDR_VAR 0 14
45622: PUSH
45623: CALL_OW 44
45627: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45628: LD_ADDR_VAR 0 7
45632: PUSH
45633: LD_VAR 0 7
45637: PPUSH
45638: LD_INT 1
45640: PPUSH
45641: LD_VAR 0 14
45645: PPUSH
45646: CALL_OW 2
45650: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45651: LD_VAR 0 14
45655: PPUSH
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 250
45665: PPUSH
45666: LD_VAR 0 1
45670: PPUSH
45671: CALL_OW 251
45675: PPUSH
45676: LD_INT 10
45678: PPUSH
45679: LD_INT 0
45681: PPUSH
45682: CALL_OW 50
// continue ;
45686: GO 45587
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45688: LD_VAR 0 12
45692: PUSH
45693: LD_INT 1
45695: ARRAY
45696: PPUSH
45697: CALL_OW 313
45701: PUSH
45702: LD_VAR 0 12
45706: PUSH
45707: LD_INT 1
45709: ARRAY
45710: PPUSH
45711: CALL_OW 266
45715: PUSH
45716: LD_INT 32
45718: PUSH
45719: LD_INT 31
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: IN
45726: AND
45727: PUSH
45728: LD_VAR 0 12
45732: PUSH
45733: LD_INT 1
45735: ARRAY
45736: PPUSH
45737: CALL_OW 313
45741: PUSH
45742: LD_INT 6
45744: EQUAL
45745: OR
45746: IFFALSE 45766
// f := Delete ( f , 1 ) ;
45748: LD_ADDR_VAR 0 12
45752: PUSH
45753: LD_VAR 0 12
45757: PPUSH
45758: LD_INT 1
45760: PPUSH
45761: CALL_OW 3
45765: ST_TO_ADDR
// if not f then
45766: LD_VAR 0 12
45770: NOT
45771: IFFALSE 45789
// begin x := x + 2 ;
45773: LD_ADDR_VAR 0 13
45777: PUSH
45778: LD_VAR 0 13
45782: PUSH
45783: LD_INT 2
45785: PLUS
45786: ST_TO_ADDR
// continue ;
45787: GO 45587
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45789: LD_VAR 0 12
45793: PUSH
45794: LD_INT 1
45796: ARRAY
45797: PPUSH
45798: CALL_OW 266
45802: PUSH
45803: LD_INT 5
45805: EQUAL
45806: IFFALSE 45880
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45808: LD_VAR 0 12
45812: PUSH
45813: LD_INT 1
45815: ARRAY
45816: PPUSH
45817: CALL_OW 313
45821: PUSH
45822: LD_INT 3
45824: LESS
45825: IFFALSE 45861
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45827: LD_INT 0
45829: PPUSH
45830: LD_INT 5
45832: PUSH
45833: LD_INT 8
45835: PUSH
45836: LD_INT 9
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: PUSH
45844: LD_VAR 0 17
45848: ARRAY
45849: PPUSH
45850: LD_VAR 0 4
45854: PPUSH
45855: CALL_OW 380
45859: GO 45878
// PrepareHuman ( false , i , skill ) ;
45861: LD_INT 0
45863: PPUSH
45864: LD_VAR 0 8
45868: PPUSH
45869: LD_VAR 0 4
45873: PPUSH
45874: CALL_OW 380
// end else
45878: GO 45897
// PrepareHuman ( false , i , skill ) ;
45880: LD_INT 0
45882: PPUSH
45883: LD_VAR 0 8
45887: PPUSH
45888: LD_VAR 0 4
45892: PPUSH
45893: CALL_OW 380
// un := CreateHuman ;
45897: LD_ADDR_VAR 0 14
45901: PUSH
45902: CALL_OW 44
45906: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45907: LD_ADDR_VAR 0 7
45911: PUSH
45912: LD_VAR 0 7
45916: PPUSH
45917: LD_INT 1
45919: PPUSH
45920: LD_VAR 0 14
45924: PPUSH
45925: CALL_OW 2
45929: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45930: LD_VAR 0 14
45934: PPUSH
45935: LD_VAR 0 12
45939: PUSH
45940: LD_INT 1
45942: ARRAY
45943: PPUSH
45944: CALL_OW 52
// end ;
45948: GO 45587
45950: POP
45951: POP
// end ;
45952: GO 44889
45954: POP
45955: POP
// result := result ^ buildings ;
45956: LD_ADDR_VAR 0 7
45960: PUSH
45961: LD_VAR 0 7
45965: PUSH
45966: LD_VAR 0 18
45970: ADD
45971: ST_TO_ADDR
// end else
45972: GO 46115
// begin for i = 1 to personel do
45974: LD_ADDR_VAR 0 8
45978: PUSH
45979: DOUBLE
45980: LD_INT 1
45982: DEC
45983: ST_TO_ADDR
45984: LD_VAR 0 6
45988: PUSH
45989: FOR_TO
45990: IFFALSE 46113
// begin if i > 4 then
45992: LD_VAR 0 8
45996: PUSH
45997: LD_INT 4
45999: GREATER
46000: IFFALSE 46004
// break ;
46002: GO 46113
// x := personel [ i ] ;
46004: LD_ADDR_VAR 0 13
46008: PUSH
46009: LD_VAR 0 6
46013: PUSH
46014: LD_VAR 0 8
46018: ARRAY
46019: ST_TO_ADDR
// if x = - 1 then
46020: LD_VAR 0 13
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: EQUAL
46029: IFFALSE 46033
// continue ;
46031: GO 45989
// PrepareHuman ( false , i , skill ) ;
46033: LD_INT 0
46035: PPUSH
46036: LD_VAR 0 8
46040: PPUSH
46041: LD_VAR 0 4
46045: PPUSH
46046: CALL_OW 380
// un := CreateHuman ;
46050: LD_ADDR_VAR 0 14
46054: PUSH
46055: CALL_OW 44
46059: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46060: LD_VAR 0 14
46064: PPUSH
46065: LD_VAR 0 1
46069: PPUSH
46070: CALL_OW 250
46074: PPUSH
46075: LD_VAR 0 1
46079: PPUSH
46080: CALL_OW 251
46084: PPUSH
46085: LD_INT 10
46087: PPUSH
46088: LD_INT 0
46090: PPUSH
46091: CALL_OW 50
// result := result ^ un ;
46095: LD_ADDR_VAR 0 7
46099: PUSH
46100: LD_VAR 0 7
46104: PUSH
46105: LD_VAR 0 14
46109: ADD
46110: ST_TO_ADDR
// end ;
46111: GO 45989
46113: POP
46114: POP
// end ; end ;
46115: LD_VAR 0 7
46119: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46120: LD_INT 0
46122: PPUSH
46123: PPUSH
46124: PPUSH
46125: PPUSH
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
46130: PPUSH
46131: PPUSH
46132: PPUSH
46133: PPUSH
46134: PPUSH
46135: PPUSH
46136: PPUSH
46137: PPUSH
// result := false ;
46138: LD_ADDR_VAR 0 3
46142: PUSH
46143: LD_INT 0
46145: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46146: LD_VAR 0 1
46150: NOT
46151: PUSH
46152: LD_VAR 0 1
46156: PPUSH
46157: CALL_OW 266
46161: PUSH
46162: LD_INT 32
46164: PUSH
46165: LD_INT 33
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: IN
46172: NOT
46173: OR
46174: IFFALSE 46178
// exit ;
46176: GO 47287
// nat := GetNation ( tower ) ;
46178: LD_ADDR_VAR 0 12
46182: PUSH
46183: LD_VAR 0 1
46187: PPUSH
46188: CALL_OW 248
46192: ST_TO_ADDR
// side := GetSide ( tower ) ;
46193: LD_ADDR_VAR 0 16
46197: PUSH
46198: LD_VAR 0 1
46202: PPUSH
46203: CALL_OW 255
46207: ST_TO_ADDR
// x := GetX ( tower ) ;
46208: LD_ADDR_VAR 0 10
46212: PUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 250
46222: ST_TO_ADDR
// y := GetY ( tower ) ;
46223: LD_ADDR_VAR 0 11
46227: PUSH
46228: LD_VAR 0 1
46232: PPUSH
46233: CALL_OW 251
46237: ST_TO_ADDR
// if not x or not y then
46238: LD_VAR 0 10
46242: NOT
46243: PUSH
46244: LD_VAR 0 11
46248: NOT
46249: OR
46250: IFFALSE 46254
// exit ;
46252: GO 47287
// weapon := 0 ;
46254: LD_ADDR_VAR 0 18
46258: PUSH
46259: LD_INT 0
46261: ST_TO_ADDR
// fac_list := [ ] ;
46262: LD_ADDR_VAR 0 17
46266: PUSH
46267: EMPTY
46268: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46269: LD_ADDR_VAR 0 6
46273: PUSH
46274: LD_VAR 0 1
46278: PPUSH
46279: CALL_OW 274
46283: PPUSH
46284: LD_VAR 0 2
46288: PPUSH
46289: LD_INT 0
46291: PPUSH
46292: CALL 43858 0 3
46296: PPUSH
46297: LD_INT 30
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PPUSH
46307: CALL_OW 72
46311: ST_TO_ADDR
// if not factories then
46312: LD_VAR 0 6
46316: NOT
46317: IFFALSE 46321
// exit ;
46319: GO 47287
// for i in factories do
46321: LD_ADDR_VAR 0 8
46325: PUSH
46326: LD_VAR 0 6
46330: PUSH
46331: FOR_IN
46332: IFFALSE 46357
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46334: LD_ADDR_VAR 0 17
46338: PUSH
46339: LD_VAR 0 17
46343: PUSH
46344: LD_VAR 0 8
46348: PPUSH
46349: CALL_OW 478
46353: UNION
46354: ST_TO_ADDR
46355: GO 46331
46357: POP
46358: POP
// if not fac_list then
46359: LD_VAR 0 17
46363: NOT
46364: IFFALSE 46368
// exit ;
46366: GO 47287
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46368: LD_ADDR_VAR 0 5
46372: PUSH
46373: LD_INT 4
46375: PUSH
46376: LD_INT 5
46378: PUSH
46379: LD_INT 9
46381: PUSH
46382: LD_INT 10
46384: PUSH
46385: LD_INT 6
46387: PUSH
46388: LD_INT 7
46390: PUSH
46391: LD_INT 11
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 27
46405: PUSH
46406: LD_INT 28
46408: PUSH
46409: LD_INT 26
46411: PUSH
46412: LD_INT 30
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 43
46423: PUSH
46424: LD_INT 44
46426: PUSH
46427: LD_INT 46
46429: PUSH
46430: LD_INT 45
46432: PUSH
46433: LD_INT 47
46435: PUSH
46436: LD_INT 49
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: PUSH
46452: LD_VAR 0 12
46456: ARRAY
46457: ST_TO_ADDR
// list := list isect fac_list ;
46458: LD_ADDR_VAR 0 5
46462: PUSH
46463: LD_VAR 0 5
46467: PUSH
46468: LD_VAR 0 17
46472: ISECT
46473: ST_TO_ADDR
// if not list then
46474: LD_VAR 0 5
46478: NOT
46479: IFFALSE 46483
// exit ;
46481: GO 47287
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46483: LD_VAR 0 12
46487: PUSH
46488: LD_INT 3
46490: EQUAL
46491: PUSH
46492: LD_INT 49
46494: PUSH
46495: LD_VAR 0 5
46499: IN
46500: AND
46501: PUSH
46502: LD_INT 31
46504: PPUSH
46505: LD_VAR 0 16
46509: PPUSH
46510: CALL_OW 321
46514: PUSH
46515: LD_INT 2
46517: EQUAL
46518: AND
46519: IFFALSE 46579
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46521: LD_INT 22
46523: PUSH
46524: LD_VAR 0 16
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 35
46535: PUSH
46536: LD_INT 49
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 91
46545: PUSH
46546: LD_VAR 0 1
46550: PUSH
46551: LD_INT 10
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: PPUSH
46564: CALL_OW 69
46568: NOT
46569: IFFALSE 46579
// weapon := ru_time_lapser ;
46571: LD_ADDR_VAR 0 18
46575: PUSH
46576: LD_INT 49
46578: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46579: LD_VAR 0 12
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: IN
46594: PUSH
46595: LD_INT 11
46597: PUSH
46598: LD_VAR 0 5
46602: IN
46603: PUSH
46604: LD_INT 30
46606: PUSH
46607: LD_VAR 0 5
46611: IN
46612: OR
46613: AND
46614: PUSH
46615: LD_INT 6
46617: PPUSH
46618: LD_VAR 0 16
46622: PPUSH
46623: CALL_OW 321
46627: PUSH
46628: LD_INT 2
46630: EQUAL
46631: AND
46632: IFFALSE 46797
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46634: LD_INT 22
46636: PUSH
46637: LD_VAR 0 16
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: LD_INT 35
46651: PUSH
46652: LD_INT 11
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 35
46661: PUSH
46662: LD_INT 30
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 91
46676: PUSH
46677: LD_VAR 0 1
46681: PUSH
46682: LD_INT 18
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: LIST
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: PPUSH
46695: CALL_OW 69
46699: NOT
46700: PUSH
46701: LD_INT 22
46703: PUSH
46704: LD_VAR 0 16
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: LD_INT 30
46718: PUSH
46719: LD_INT 32
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 30
46728: PUSH
46729: LD_INT 33
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 91
46743: PUSH
46744: LD_VAR 0 1
46748: PUSH
46749: LD_INT 12
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: PUSH
46762: EMPTY
46763: LIST
46764: PPUSH
46765: CALL_OW 69
46769: PUSH
46770: LD_INT 2
46772: GREATER
46773: AND
46774: IFFALSE 46797
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46776: LD_ADDR_VAR 0 18
46780: PUSH
46781: LD_INT 11
46783: PUSH
46784: LD_INT 30
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_VAR 0 12
46795: ARRAY
46796: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46797: LD_VAR 0 18
46801: NOT
46802: PUSH
46803: LD_INT 40
46805: PPUSH
46806: LD_VAR 0 16
46810: PPUSH
46811: CALL_OW 321
46815: PUSH
46816: LD_INT 2
46818: EQUAL
46819: AND
46820: PUSH
46821: LD_INT 7
46823: PUSH
46824: LD_VAR 0 5
46828: IN
46829: PUSH
46830: LD_INT 28
46832: PUSH
46833: LD_VAR 0 5
46837: IN
46838: OR
46839: PUSH
46840: LD_INT 45
46842: PUSH
46843: LD_VAR 0 5
46847: IN
46848: OR
46849: AND
46850: IFFALSE 47104
// begin hex := GetHexInfo ( x , y ) ;
46852: LD_ADDR_VAR 0 4
46856: PUSH
46857: LD_VAR 0 10
46861: PPUSH
46862: LD_VAR 0 11
46866: PPUSH
46867: CALL_OW 546
46871: ST_TO_ADDR
// if hex [ 1 ] then
46872: LD_VAR 0 4
46876: PUSH
46877: LD_INT 1
46879: ARRAY
46880: IFFALSE 46884
// exit ;
46882: GO 47287
// height := hex [ 2 ] ;
46884: LD_ADDR_VAR 0 15
46888: PUSH
46889: LD_VAR 0 4
46893: PUSH
46894: LD_INT 2
46896: ARRAY
46897: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46898: LD_ADDR_VAR 0 14
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 3
46911: PUSH
46912: LD_INT 5
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// for i in tmp do
46921: LD_ADDR_VAR 0 8
46925: PUSH
46926: LD_VAR 0 14
46930: PUSH
46931: FOR_IN
46932: IFFALSE 47102
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46934: LD_ADDR_VAR 0 9
46938: PUSH
46939: LD_VAR 0 10
46943: PPUSH
46944: LD_VAR 0 8
46948: PPUSH
46949: LD_INT 5
46951: PPUSH
46952: CALL_OW 272
46956: PUSH
46957: LD_VAR 0 11
46961: PPUSH
46962: LD_VAR 0 8
46966: PPUSH
46967: LD_INT 5
46969: PPUSH
46970: CALL_OW 273
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46979: LD_VAR 0 9
46983: PUSH
46984: LD_INT 1
46986: ARRAY
46987: PPUSH
46988: LD_VAR 0 9
46992: PUSH
46993: LD_INT 2
46995: ARRAY
46996: PPUSH
46997: CALL_OW 488
47001: IFFALSE 47100
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47003: LD_ADDR_VAR 0 4
47007: PUSH
47008: LD_VAR 0 9
47012: PUSH
47013: LD_INT 1
47015: ARRAY
47016: PPUSH
47017: LD_VAR 0 9
47021: PUSH
47022: LD_INT 2
47024: ARRAY
47025: PPUSH
47026: CALL_OW 546
47030: ST_TO_ADDR
// if hex [ 1 ] then
47031: LD_VAR 0 4
47035: PUSH
47036: LD_INT 1
47038: ARRAY
47039: IFFALSE 47043
// continue ;
47041: GO 46931
// h := hex [ 2 ] ;
47043: LD_ADDR_VAR 0 13
47047: PUSH
47048: LD_VAR 0 4
47052: PUSH
47053: LD_INT 2
47055: ARRAY
47056: ST_TO_ADDR
// if h + 7 < height then
47057: LD_VAR 0 13
47061: PUSH
47062: LD_INT 7
47064: PLUS
47065: PUSH
47066: LD_VAR 0 15
47070: LESS
47071: IFFALSE 47100
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47073: LD_ADDR_VAR 0 18
47077: PUSH
47078: LD_INT 7
47080: PUSH
47081: LD_INT 28
47083: PUSH
47084: LD_INT 45
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: LIST
47091: PUSH
47092: LD_VAR 0 12
47096: ARRAY
47097: ST_TO_ADDR
// break ;
47098: GO 47102
// end ; end ; end ;
47100: GO 46931
47102: POP
47103: POP
// end ; if not weapon then
47104: LD_VAR 0 18
47108: NOT
47109: IFFALSE 47169
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47111: LD_ADDR_VAR 0 5
47115: PUSH
47116: LD_VAR 0 5
47120: PUSH
47121: LD_INT 11
47123: PUSH
47124: LD_INT 30
47126: PUSH
47127: LD_INT 49
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: DIFF
47135: ST_TO_ADDR
// if not list then
47136: LD_VAR 0 5
47140: NOT
47141: IFFALSE 47145
// exit ;
47143: GO 47287
// weapon := list [ rand ( 1 , list ) ] ;
47145: LD_ADDR_VAR 0 18
47149: PUSH
47150: LD_VAR 0 5
47154: PUSH
47155: LD_INT 1
47157: PPUSH
47158: LD_VAR 0 5
47162: PPUSH
47163: CALL_OW 12
47167: ARRAY
47168: ST_TO_ADDR
// end ; if weapon then
47169: LD_VAR 0 18
47173: IFFALSE 47287
// begin tmp := CostOfWeapon ( weapon ) ;
47175: LD_ADDR_VAR 0 14
47179: PUSH
47180: LD_VAR 0 18
47184: PPUSH
47185: CALL_OW 451
47189: ST_TO_ADDR
// j := GetBase ( tower ) ;
47190: LD_ADDR_VAR 0 9
47194: PUSH
47195: LD_VAR 0 1
47199: PPUSH
47200: CALL_OW 274
47204: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47205: LD_VAR 0 9
47209: PPUSH
47210: LD_INT 1
47212: PPUSH
47213: CALL_OW 275
47217: PUSH
47218: LD_VAR 0 14
47222: PUSH
47223: LD_INT 1
47225: ARRAY
47226: GREATEREQUAL
47227: PUSH
47228: LD_VAR 0 9
47232: PPUSH
47233: LD_INT 2
47235: PPUSH
47236: CALL_OW 275
47240: PUSH
47241: LD_VAR 0 14
47245: PUSH
47246: LD_INT 2
47248: ARRAY
47249: GREATEREQUAL
47250: AND
47251: PUSH
47252: LD_VAR 0 9
47256: PPUSH
47257: LD_INT 3
47259: PPUSH
47260: CALL_OW 275
47264: PUSH
47265: LD_VAR 0 14
47269: PUSH
47270: LD_INT 3
47272: ARRAY
47273: GREATEREQUAL
47274: AND
47275: IFFALSE 47287
// result := weapon ;
47277: LD_ADDR_VAR 0 3
47281: PUSH
47282: LD_VAR 0 18
47286: ST_TO_ADDR
// end ; end ;
47287: LD_VAR 0 3
47291: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47292: LD_INT 0
47294: PPUSH
47295: PPUSH
// result := true ;
47296: LD_ADDR_VAR 0 3
47300: PUSH
47301: LD_INT 1
47303: ST_TO_ADDR
// if array1 = array2 then
47304: LD_VAR 0 1
47308: PUSH
47309: LD_VAR 0 2
47313: EQUAL
47314: IFFALSE 47374
// begin for i = 1 to array1 do
47316: LD_ADDR_VAR 0 4
47320: PUSH
47321: DOUBLE
47322: LD_INT 1
47324: DEC
47325: ST_TO_ADDR
47326: LD_VAR 0 1
47330: PUSH
47331: FOR_TO
47332: IFFALSE 47370
// if array1 [ i ] <> array2 [ i ] then
47334: LD_VAR 0 1
47338: PUSH
47339: LD_VAR 0 4
47343: ARRAY
47344: PUSH
47345: LD_VAR 0 2
47349: PUSH
47350: LD_VAR 0 4
47354: ARRAY
47355: NONEQUAL
47356: IFFALSE 47368
// begin result := false ;
47358: LD_ADDR_VAR 0 3
47362: PUSH
47363: LD_INT 0
47365: ST_TO_ADDR
// break ;
47366: GO 47370
// end ;
47368: GO 47331
47370: POP
47371: POP
// end else
47372: GO 47382
// result := false ;
47374: LD_ADDR_VAR 0 3
47378: PUSH
47379: LD_INT 0
47381: ST_TO_ADDR
// end ;
47382: LD_VAR 0 3
47386: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47387: LD_INT 0
47389: PPUSH
47390: PPUSH
// if not array1 or not array2 then
47391: LD_VAR 0 1
47395: NOT
47396: PUSH
47397: LD_VAR 0 2
47401: NOT
47402: OR
47403: IFFALSE 47407
// exit ;
47405: GO 47471
// result := true ;
47407: LD_ADDR_VAR 0 3
47411: PUSH
47412: LD_INT 1
47414: ST_TO_ADDR
// for i = 1 to array1 do
47415: LD_ADDR_VAR 0 4
47419: PUSH
47420: DOUBLE
47421: LD_INT 1
47423: DEC
47424: ST_TO_ADDR
47425: LD_VAR 0 1
47429: PUSH
47430: FOR_TO
47431: IFFALSE 47469
// if array1 [ i ] <> array2 [ i ] then
47433: LD_VAR 0 1
47437: PUSH
47438: LD_VAR 0 4
47442: ARRAY
47443: PUSH
47444: LD_VAR 0 2
47448: PUSH
47449: LD_VAR 0 4
47453: ARRAY
47454: NONEQUAL
47455: IFFALSE 47467
// begin result := false ;
47457: LD_ADDR_VAR 0 3
47461: PUSH
47462: LD_INT 0
47464: ST_TO_ADDR
// break ;
47465: GO 47469
// end ;
47467: GO 47430
47469: POP
47470: POP
// end ;
47471: LD_VAR 0 3
47475: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47476: LD_INT 0
47478: PPUSH
47479: PPUSH
47480: PPUSH
// pom := GetBase ( fac ) ;
47481: LD_ADDR_VAR 0 5
47485: PUSH
47486: LD_VAR 0 1
47490: PPUSH
47491: CALL_OW 274
47495: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47496: LD_ADDR_VAR 0 4
47500: PUSH
47501: LD_VAR 0 2
47505: PUSH
47506: LD_INT 1
47508: ARRAY
47509: PPUSH
47510: LD_VAR 0 2
47514: PUSH
47515: LD_INT 2
47517: ARRAY
47518: PPUSH
47519: LD_VAR 0 2
47523: PUSH
47524: LD_INT 3
47526: ARRAY
47527: PPUSH
47528: LD_VAR 0 2
47532: PUSH
47533: LD_INT 4
47535: ARRAY
47536: PPUSH
47537: CALL_OW 449
47541: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47542: LD_ADDR_VAR 0 3
47546: PUSH
47547: LD_VAR 0 5
47551: PPUSH
47552: LD_INT 1
47554: PPUSH
47555: CALL_OW 275
47559: PUSH
47560: LD_VAR 0 4
47564: PUSH
47565: LD_INT 1
47567: ARRAY
47568: GREATEREQUAL
47569: PUSH
47570: LD_VAR 0 5
47574: PPUSH
47575: LD_INT 2
47577: PPUSH
47578: CALL_OW 275
47582: PUSH
47583: LD_VAR 0 4
47587: PUSH
47588: LD_INT 2
47590: ARRAY
47591: GREATEREQUAL
47592: AND
47593: PUSH
47594: LD_VAR 0 5
47598: PPUSH
47599: LD_INT 3
47601: PPUSH
47602: CALL_OW 275
47606: PUSH
47607: LD_VAR 0 4
47611: PUSH
47612: LD_INT 3
47614: ARRAY
47615: GREATEREQUAL
47616: AND
47617: ST_TO_ADDR
// end ;
47618: LD_VAR 0 3
47622: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47623: LD_INT 0
47625: PPUSH
47626: PPUSH
47627: PPUSH
47628: PPUSH
// pom := GetBase ( building ) ;
47629: LD_ADDR_VAR 0 3
47633: PUSH
47634: LD_VAR 0 1
47638: PPUSH
47639: CALL_OW 274
47643: ST_TO_ADDR
// if not pom then
47644: LD_VAR 0 3
47648: NOT
47649: IFFALSE 47653
// exit ;
47651: GO 47823
// btype := GetBType ( building ) ;
47653: LD_ADDR_VAR 0 5
47657: PUSH
47658: LD_VAR 0 1
47662: PPUSH
47663: CALL_OW 266
47667: ST_TO_ADDR
// if btype = b_armoury then
47668: LD_VAR 0 5
47672: PUSH
47673: LD_INT 4
47675: EQUAL
47676: IFFALSE 47686
// btype := b_barracks ;
47678: LD_ADDR_VAR 0 5
47682: PUSH
47683: LD_INT 5
47685: ST_TO_ADDR
// if btype = b_depot then
47686: LD_VAR 0 5
47690: PUSH
47691: LD_INT 0
47693: EQUAL
47694: IFFALSE 47704
// btype := b_warehouse ;
47696: LD_ADDR_VAR 0 5
47700: PUSH
47701: LD_INT 1
47703: ST_TO_ADDR
// if btype = b_workshop then
47704: LD_VAR 0 5
47708: PUSH
47709: LD_INT 2
47711: EQUAL
47712: IFFALSE 47722
// btype := b_factory ;
47714: LD_ADDR_VAR 0 5
47718: PUSH
47719: LD_INT 3
47721: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47722: LD_ADDR_VAR 0 4
47726: PUSH
47727: LD_VAR 0 5
47731: PPUSH
47732: LD_VAR 0 1
47736: PPUSH
47737: CALL_OW 248
47741: PPUSH
47742: CALL_OW 450
47746: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47747: LD_ADDR_VAR 0 2
47751: PUSH
47752: LD_VAR 0 3
47756: PPUSH
47757: LD_INT 1
47759: PPUSH
47760: CALL_OW 275
47764: PUSH
47765: LD_VAR 0 4
47769: PUSH
47770: LD_INT 1
47772: ARRAY
47773: GREATEREQUAL
47774: PUSH
47775: LD_VAR 0 3
47779: PPUSH
47780: LD_INT 2
47782: PPUSH
47783: CALL_OW 275
47787: PUSH
47788: LD_VAR 0 4
47792: PUSH
47793: LD_INT 2
47795: ARRAY
47796: GREATEREQUAL
47797: AND
47798: PUSH
47799: LD_VAR 0 3
47803: PPUSH
47804: LD_INT 3
47806: PPUSH
47807: CALL_OW 275
47811: PUSH
47812: LD_VAR 0 4
47816: PUSH
47817: LD_INT 3
47819: ARRAY
47820: GREATEREQUAL
47821: AND
47822: ST_TO_ADDR
// end ;
47823: LD_VAR 0 2
47827: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47828: LD_INT 0
47830: PPUSH
47831: PPUSH
47832: PPUSH
// pom := GetBase ( building ) ;
47833: LD_ADDR_VAR 0 4
47837: PUSH
47838: LD_VAR 0 1
47842: PPUSH
47843: CALL_OW 274
47847: ST_TO_ADDR
// if not pom then
47848: LD_VAR 0 4
47852: NOT
47853: IFFALSE 47857
// exit ;
47855: GO 47958
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47857: LD_ADDR_VAR 0 5
47861: PUSH
47862: LD_VAR 0 2
47866: PPUSH
47867: LD_VAR 0 1
47871: PPUSH
47872: CALL_OW 248
47876: PPUSH
47877: CALL_OW 450
47881: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47882: LD_ADDR_VAR 0 3
47886: PUSH
47887: LD_VAR 0 4
47891: PPUSH
47892: LD_INT 1
47894: PPUSH
47895: CALL_OW 275
47899: PUSH
47900: LD_VAR 0 5
47904: PUSH
47905: LD_INT 1
47907: ARRAY
47908: GREATEREQUAL
47909: PUSH
47910: LD_VAR 0 4
47914: PPUSH
47915: LD_INT 2
47917: PPUSH
47918: CALL_OW 275
47922: PUSH
47923: LD_VAR 0 5
47927: PUSH
47928: LD_INT 2
47930: ARRAY
47931: GREATEREQUAL
47932: AND
47933: PUSH
47934: LD_VAR 0 4
47938: PPUSH
47939: LD_INT 3
47941: PPUSH
47942: CALL_OW 275
47946: PUSH
47947: LD_VAR 0 5
47951: PUSH
47952: LD_INT 3
47954: ARRAY
47955: GREATEREQUAL
47956: AND
47957: ST_TO_ADDR
// end ;
47958: LD_VAR 0 3
47962: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47963: LD_INT 0
47965: PPUSH
47966: PPUSH
47967: PPUSH
47968: PPUSH
47969: PPUSH
47970: PPUSH
47971: PPUSH
47972: PPUSH
47973: PPUSH
47974: PPUSH
47975: PPUSH
// result := false ;
47976: LD_ADDR_VAR 0 8
47980: PUSH
47981: LD_INT 0
47983: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47984: LD_VAR 0 5
47988: NOT
47989: PUSH
47990: LD_VAR 0 1
47994: NOT
47995: OR
47996: PUSH
47997: LD_VAR 0 2
48001: NOT
48002: OR
48003: PUSH
48004: LD_VAR 0 3
48008: NOT
48009: OR
48010: IFFALSE 48014
// exit ;
48012: GO 48828
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48014: LD_ADDR_VAR 0 14
48018: PUSH
48019: LD_VAR 0 1
48023: PPUSH
48024: LD_VAR 0 2
48028: PPUSH
48029: LD_VAR 0 3
48033: PPUSH
48034: LD_VAR 0 4
48038: PPUSH
48039: LD_VAR 0 5
48043: PUSH
48044: LD_INT 1
48046: ARRAY
48047: PPUSH
48048: CALL_OW 248
48052: PPUSH
48053: LD_INT 0
48055: PPUSH
48056: CALL 50065 0 6
48060: ST_TO_ADDR
// if not hexes then
48061: LD_VAR 0 14
48065: NOT
48066: IFFALSE 48070
// exit ;
48068: GO 48828
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48070: LD_ADDR_VAR 0 17
48074: PUSH
48075: LD_VAR 0 5
48079: PPUSH
48080: LD_INT 22
48082: PUSH
48083: LD_VAR 0 13
48087: PPUSH
48088: CALL_OW 255
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 30
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 30
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PPUSH
48129: CALL_OW 72
48133: ST_TO_ADDR
// for i = 1 to hexes do
48134: LD_ADDR_VAR 0 9
48138: PUSH
48139: DOUBLE
48140: LD_INT 1
48142: DEC
48143: ST_TO_ADDR
48144: LD_VAR 0 14
48148: PUSH
48149: FOR_TO
48150: IFFALSE 48826
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48152: LD_ADDR_VAR 0 13
48156: PUSH
48157: LD_VAR 0 14
48161: PUSH
48162: LD_VAR 0 9
48166: ARRAY
48167: PUSH
48168: LD_INT 1
48170: ARRAY
48171: PPUSH
48172: LD_VAR 0 14
48176: PUSH
48177: LD_VAR 0 9
48181: ARRAY
48182: PUSH
48183: LD_INT 2
48185: ARRAY
48186: PPUSH
48187: CALL_OW 428
48191: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48192: LD_VAR 0 14
48196: PUSH
48197: LD_VAR 0 9
48201: ARRAY
48202: PUSH
48203: LD_INT 1
48205: ARRAY
48206: PPUSH
48207: LD_VAR 0 14
48211: PUSH
48212: LD_VAR 0 9
48216: ARRAY
48217: PUSH
48218: LD_INT 2
48220: ARRAY
48221: PPUSH
48222: CALL_OW 351
48226: PUSH
48227: LD_VAR 0 14
48231: PUSH
48232: LD_VAR 0 9
48236: ARRAY
48237: PUSH
48238: LD_INT 1
48240: ARRAY
48241: PPUSH
48242: LD_VAR 0 14
48246: PUSH
48247: LD_VAR 0 9
48251: ARRAY
48252: PUSH
48253: LD_INT 2
48255: ARRAY
48256: PPUSH
48257: CALL_OW 488
48261: NOT
48262: OR
48263: PUSH
48264: LD_VAR 0 13
48268: PPUSH
48269: CALL_OW 247
48273: PUSH
48274: LD_INT 3
48276: EQUAL
48277: OR
48278: IFFALSE 48284
// exit ;
48280: POP
48281: POP
48282: GO 48828
// if not tmp then
48284: LD_VAR 0 13
48288: NOT
48289: IFFALSE 48293
// continue ;
48291: GO 48149
// result := true ;
48293: LD_ADDR_VAR 0 8
48297: PUSH
48298: LD_INT 1
48300: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48301: LD_VAR 0 6
48305: PUSH
48306: LD_VAR 0 13
48310: PPUSH
48311: CALL_OW 247
48315: PUSH
48316: LD_INT 2
48318: EQUAL
48319: AND
48320: PUSH
48321: LD_VAR 0 13
48325: PPUSH
48326: CALL_OW 263
48330: PUSH
48331: LD_INT 1
48333: EQUAL
48334: AND
48335: IFFALSE 48499
// begin if IsDrivenBy ( tmp ) then
48337: LD_VAR 0 13
48341: PPUSH
48342: CALL_OW 311
48346: IFFALSE 48350
// continue ;
48348: GO 48149
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48350: LD_VAR 0 6
48354: PPUSH
48355: LD_INT 3
48357: PUSH
48358: LD_INT 60
48360: PUSH
48361: EMPTY
48362: LIST
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: LD_INT 55
48373: PUSH
48374: EMPTY
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PPUSH
48385: CALL_OW 72
48389: IFFALSE 48497
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48391: LD_ADDR_VAR 0 18
48395: PUSH
48396: LD_VAR 0 6
48400: PPUSH
48401: LD_INT 3
48403: PUSH
48404: LD_INT 60
48406: PUSH
48407: EMPTY
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: LD_INT 55
48419: PUSH
48420: EMPTY
48421: LIST
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PPUSH
48431: CALL_OW 72
48435: PUSH
48436: LD_INT 1
48438: ARRAY
48439: ST_TO_ADDR
// if IsInUnit ( driver ) then
48440: LD_VAR 0 18
48444: PPUSH
48445: CALL_OW 310
48449: IFFALSE 48460
// ComExit ( driver ) ;
48451: LD_VAR 0 18
48455: PPUSH
48456: CALL 73249 0 1
// AddComEnterUnit ( driver , tmp ) ;
48460: LD_VAR 0 18
48464: PPUSH
48465: LD_VAR 0 13
48469: PPUSH
48470: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48474: LD_VAR 0 18
48478: PPUSH
48479: LD_VAR 0 7
48483: PPUSH
48484: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48488: LD_VAR 0 18
48492: PPUSH
48493: CALL_OW 181
// end ; continue ;
48497: GO 48149
// end ; if not cleaners or not tmp in cleaners then
48499: LD_VAR 0 6
48503: NOT
48504: PUSH
48505: LD_VAR 0 13
48509: PUSH
48510: LD_VAR 0 6
48514: IN
48515: NOT
48516: OR
48517: IFFALSE 48824
// begin if dep then
48519: LD_VAR 0 17
48523: IFFALSE 48659
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48525: LD_ADDR_VAR 0 16
48529: PUSH
48530: LD_VAR 0 17
48534: PUSH
48535: LD_INT 1
48537: ARRAY
48538: PPUSH
48539: CALL_OW 250
48543: PPUSH
48544: LD_VAR 0 17
48548: PUSH
48549: LD_INT 1
48551: ARRAY
48552: PPUSH
48553: CALL_OW 254
48557: PPUSH
48558: LD_INT 5
48560: PPUSH
48561: CALL_OW 272
48565: PUSH
48566: LD_VAR 0 17
48570: PUSH
48571: LD_INT 1
48573: ARRAY
48574: PPUSH
48575: CALL_OW 251
48579: PPUSH
48580: LD_VAR 0 17
48584: PUSH
48585: LD_INT 1
48587: ARRAY
48588: PPUSH
48589: CALL_OW 254
48593: PPUSH
48594: LD_INT 5
48596: PPUSH
48597: CALL_OW 273
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48606: LD_VAR 0 16
48610: PUSH
48611: LD_INT 1
48613: ARRAY
48614: PPUSH
48615: LD_VAR 0 16
48619: PUSH
48620: LD_INT 2
48622: ARRAY
48623: PPUSH
48624: CALL_OW 488
48628: IFFALSE 48659
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48630: LD_VAR 0 13
48634: PPUSH
48635: LD_VAR 0 16
48639: PUSH
48640: LD_INT 1
48642: ARRAY
48643: PPUSH
48644: LD_VAR 0 16
48648: PUSH
48649: LD_INT 2
48651: ARRAY
48652: PPUSH
48653: CALL_OW 111
// continue ;
48657: GO 48149
// end ; end ; r := GetDir ( tmp ) ;
48659: LD_ADDR_VAR 0 15
48663: PUSH
48664: LD_VAR 0 13
48668: PPUSH
48669: CALL_OW 254
48673: ST_TO_ADDR
// if r = 5 then
48674: LD_VAR 0 15
48678: PUSH
48679: LD_INT 5
48681: EQUAL
48682: IFFALSE 48692
// r := 0 ;
48684: LD_ADDR_VAR 0 15
48688: PUSH
48689: LD_INT 0
48691: ST_TO_ADDR
// for j = r to 5 do
48692: LD_ADDR_VAR 0 10
48696: PUSH
48697: DOUBLE
48698: LD_VAR 0 15
48702: DEC
48703: ST_TO_ADDR
48704: LD_INT 5
48706: PUSH
48707: FOR_TO
48708: IFFALSE 48822
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48710: LD_ADDR_VAR 0 11
48714: PUSH
48715: LD_VAR 0 13
48719: PPUSH
48720: CALL_OW 250
48724: PPUSH
48725: LD_VAR 0 10
48729: PPUSH
48730: LD_INT 2
48732: PPUSH
48733: CALL_OW 272
48737: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48738: LD_ADDR_VAR 0 12
48742: PUSH
48743: LD_VAR 0 13
48747: PPUSH
48748: CALL_OW 251
48752: PPUSH
48753: LD_VAR 0 10
48757: PPUSH
48758: LD_INT 2
48760: PPUSH
48761: CALL_OW 273
48765: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48766: LD_VAR 0 11
48770: PPUSH
48771: LD_VAR 0 12
48775: PPUSH
48776: CALL_OW 488
48780: PUSH
48781: LD_VAR 0 11
48785: PPUSH
48786: LD_VAR 0 12
48790: PPUSH
48791: CALL_OW 428
48795: NOT
48796: AND
48797: IFFALSE 48820
// begin ComMoveXY ( tmp , _x , _y ) ;
48799: LD_VAR 0 13
48803: PPUSH
48804: LD_VAR 0 11
48808: PPUSH
48809: LD_VAR 0 12
48813: PPUSH
48814: CALL_OW 111
// break ;
48818: GO 48822
// end ; end ;
48820: GO 48707
48822: POP
48823: POP
// end ; end ;
48824: GO 48149
48826: POP
48827: POP
// end ;
48828: LD_VAR 0 8
48832: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48833: LD_INT 0
48835: PPUSH
// result := true ;
48836: LD_ADDR_VAR 0 3
48840: PUSH
48841: LD_INT 1
48843: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48844: LD_VAR 0 2
48848: PUSH
48849: LD_INT 24
48851: DOUBLE
48852: EQUAL
48853: IFTRUE 48863
48855: LD_INT 33
48857: DOUBLE
48858: EQUAL
48859: IFTRUE 48863
48861: GO 48888
48863: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48864: LD_ADDR_VAR 0 3
48868: PUSH
48869: LD_INT 32
48871: PPUSH
48872: LD_VAR 0 1
48876: PPUSH
48877: CALL_OW 321
48881: PUSH
48882: LD_INT 2
48884: EQUAL
48885: ST_TO_ADDR
48886: GO 49208
48888: LD_INT 20
48890: DOUBLE
48891: EQUAL
48892: IFTRUE 48896
48894: GO 48921
48896: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48897: LD_ADDR_VAR 0 3
48901: PUSH
48902: LD_INT 6
48904: PPUSH
48905: LD_VAR 0 1
48909: PPUSH
48910: CALL_OW 321
48914: PUSH
48915: LD_INT 2
48917: EQUAL
48918: ST_TO_ADDR
48919: GO 49208
48921: LD_INT 22
48923: DOUBLE
48924: EQUAL
48925: IFTRUE 48935
48927: LD_INT 36
48929: DOUBLE
48930: EQUAL
48931: IFTRUE 48935
48933: GO 48960
48935: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48936: LD_ADDR_VAR 0 3
48940: PUSH
48941: LD_INT 15
48943: PPUSH
48944: LD_VAR 0 1
48948: PPUSH
48949: CALL_OW 321
48953: PUSH
48954: LD_INT 2
48956: EQUAL
48957: ST_TO_ADDR
48958: GO 49208
48960: LD_INT 30
48962: DOUBLE
48963: EQUAL
48964: IFTRUE 48968
48966: GO 48993
48968: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48969: LD_ADDR_VAR 0 3
48973: PUSH
48974: LD_INT 20
48976: PPUSH
48977: LD_VAR 0 1
48981: PPUSH
48982: CALL_OW 321
48986: PUSH
48987: LD_INT 2
48989: EQUAL
48990: ST_TO_ADDR
48991: GO 49208
48993: LD_INT 28
48995: DOUBLE
48996: EQUAL
48997: IFTRUE 49007
48999: LD_INT 21
49001: DOUBLE
49002: EQUAL
49003: IFTRUE 49007
49005: GO 49032
49007: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49008: LD_ADDR_VAR 0 3
49012: PUSH
49013: LD_INT 21
49015: PPUSH
49016: LD_VAR 0 1
49020: PPUSH
49021: CALL_OW 321
49025: PUSH
49026: LD_INT 2
49028: EQUAL
49029: ST_TO_ADDR
49030: GO 49208
49032: LD_INT 16
49034: DOUBLE
49035: EQUAL
49036: IFTRUE 49040
49038: GO 49067
49040: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49041: LD_ADDR_VAR 0 3
49045: PUSH
49046: LD_EXP 145
49050: PPUSH
49051: LD_VAR 0 1
49055: PPUSH
49056: CALL_OW 321
49060: PUSH
49061: LD_INT 2
49063: EQUAL
49064: ST_TO_ADDR
49065: GO 49208
49067: LD_INT 19
49069: DOUBLE
49070: EQUAL
49071: IFTRUE 49081
49073: LD_INT 23
49075: DOUBLE
49076: EQUAL
49077: IFTRUE 49081
49079: GO 49108
49081: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49082: LD_ADDR_VAR 0 3
49086: PUSH
49087: LD_EXP 144
49091: PPUSH
49092: LD_VAR 0 1
49096: PPUSH
49097: CALL_OW 321
49101: PUSH
49102: LD_INT 2
49104: EQUAL
49105: ST_TO_ADDR
49106: GO 49208
49108: LD_INT 17
49110: DOUBLE
49111: EQUAL
49112: IFTRUE 49116
49114: GO 49141
49116: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49117: LD_ADDR_VAR 0 3
49121: PUSH
49122: LD_INT 39
49124: PPUSH
49125: LD_VAR 0 1
49129: PPUSH
49130: CALL_OW 321
49134: PUSH
49135: LD_INT 2
49137: EQUAL
49138: ST_TO_ADDR
49139: GO 49208
49141: LD_INT 18
49143: DOUBLE
49144: EQUAL
49145: IFTRUE 49149
49147: GO 49174
49149: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49150: LD_ADDR_VAR 0 3
49154: PUSH
49155: LD_INT 40
49157: PPUSH
49158: LD_VAR 0 1
49162: PPUSH
49163: CALL_OW 321
49167: PUSH
49168: LD_INT 2
49170: EQUAL
49171: ST_TO_ADDR
49172: GO 49208
49174: LD_INT 27
49176: DOUBLE
49177: EQUAL
49178: IFTRUE 49182
49180: GO 49207
49182: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49183: LD_ADDR_VAR 0 3
49187: PUSH
49188: LD_INT 35
49190: PPUSH
49191: LD_VAR 0 1
49195: PPUSH
49196: CALL_OW 321
49200: PUSH
49201: LD_INT 2
49203: EQUAL
49204: ST_TO_ADDR
49205: GO 49208
49207: POP
// end ;
49208: LD_VAR 0 3
49212: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49213: LD_INT 0
49215: PPUSH
49216: PPUSH
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
49225: PPUSH
// result := false ;
49226: LD_ADDR_VAR 0 6
49230: PUSH
49231: LD_INT 0
49233: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49234: LD_VAR 0 1
49238: NOT
49239: PUSH
49240: LD_VAR 0 1
49244: PPUSH
49245: CALL_OW 266
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: IN
49260: NOT
49261: OR
49262: PUSH
49263: LD_VAR 0 2
49267: NOT
49268: OR
49269: PUSH
49270: LD_VAR 0 5
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: LD_INT 4
49289: PUSH
49290: LD_INT 5
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: IN
49301: NOT
49302: OR
49303: PUSH
49304: LD_VAR 0 3
49308: PPUSH
49309: LD_VAR 0 4
49313: PPUSH
49314: CALL_OW 488
49318: NOT
49319: OR
49320: IFFALSE 49324
// exit ;
49322: GO 50060
// side := GetSide ( depot ) ;
49324: LD_ADDR_VAR 0 9
49328: PUSH
49329: LD_VAR 0 1
49333: PPUSH
49334: CALL_OW 255
49338: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49339: LD_VAR 0 9
49343: PPUSH
49344: LD_VAR 0 2
49348: PPUSH
49349: CALL 48833 0 2
49353: NOT
49354: IFFALSE 49358
// exit ;
49356: GO 50060
// pom := GetBase ( depot ) ;
49358: LD_ADDR_VAR 0 10
49362: PUSH
49363: LD_VAR 0 1
49367: PPUSH
49368: CALL_OW 274
49372: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49373: LD_ADDR_VAR 0 11
49377: PUSH
49378: LD_VAR 0 2
49382: PPUSH
49383: LD_VAR 0 1
49387: PPUSH
49388: CALL_OW 248
49392: PPUSH
49393: CALL_OW 450
49397: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49398: LD_VAR 0 10
49402: PPUSH
49403: LD_INT 1
49405: PPUSH
49406: CALL_OW 275
49410: PUSH
49411: LD_VAR 0 11
49415: PUSH
49416: LD_INT 1
49418: ARRAY
49419: GREATEREQUAL
49420: PUSH
49421: LD_VAR 0 10
49425: PPUSH
49426: LD_INT 2
49428: PPUSH
49429: CALL_OW 275
49433: PUSH
49434: LD_VAR 0 11
49438: PUSH
49439: LD_INT 2
49441: ARRAY
49442: GREATEREQUAL
49443: AND
49444: PUSH
49445: LD_VAR 0 10
49449: PPUSH
49450: LD_INT 3
49452: PPUSH
49453: CALL_OW 275
49457: PUSH
49458: LD_VAR 0 11
49462: PUSH
49463: LD_INT 3
49465: ARRAY
49466: GREATEREQUAL
49467: AND
49468: NOT
49469: IFFALSE 49473
// exit ;
49471: GO 50060
// if GetBType ( depot ) = b_depot then
49473: LD_VAR 0 1
49477: PPUSH
49478: CALL_OW 266
49482: PUSH
49483: LD_INT 0
49485: EQUAL
49486: IFFALSE 49498
// dist := 28 else
49488: LD_ADDR_VAR 0 14
49492: PUSH
49493: LD_INT 28
49495: ST_TO_ADDR
49496: GO 49506
// dist := 36 ;
49498: LD_ADDR_VAR 0 14
49502: PUSH
49503: LD_INT 36
49505: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49506: LD_VAR 0 1
49510: PPUSH
49511: LD_VAR 0 3
49515: PPUSH
49516: LD_VAR 0 4
49520: PPUSH
49521: CALL_OW 297
49525: PUSH
49526: LD_VAR 0 14
49530: GREATER
49531: IFFALSE 49535
// exit ;
49533: GO 50060
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49535: LD_ADDR_VAR 0 12
49539: PUSH
49540: LD_VAR 0 2
49544: PPUSH
49545: LD_VAR 0 3
49549: PPUSH
49550: LD_VAR 0 4
49554: PPUSH
49555: LD_VAR 0 5
49559: PPUSH
49560: LD_VAR 0 1
49564: PPUSH
49565: CALL_OW 248
49569: PPUSH
49570: LD_INT 0
49572: PPUSH
49573: CALL 50065 0 6
49577: ST_TO_ADDR
// if not hexes then
49578: LD_VAR 0 12
49582: NOT
49583: IFFALSE 49587
// exit ;
49585: GO 50060
// hex := GetHexInfo ( x , y ) ;
49587: LD_ADDR_VAR 0 15
49591: PUSH
49592: LD_VAR 0 3
49596: PPUSH
49597: LD_VAR 0 4
49601: PPUSH
49602: CALL_OW 546
49606: ST_TO_ADDR
// if hex [ 1 ] then
49607: LD_VAR 0 15
49611: PUSH
49612: LD_INT 1
49614: ARRAY
49615: IFFALSE 49619
// exit ;
49617: GO 50060
// height := hex [ 2 ] ;
49619: LD_ADDR_VAR 0 13
49623: PUSH
49624: LD_VAR 0 15
49628: PUSH
49629: LD_INT 2
49631: ARRAY
49632: ST_TO_ADDR
// for i = 1 to hexes do
49633: LD_ADDR_VAR 0 7
49637: PUSH
49638: DOUBLE
49639: LD_INT 1
49641: DEC
49642: ST_TO_ADDR
49643: LD_VAR 0 12
49647: PUSH
49648: FOR_TO
49649: IFFALSE 49979
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49651: LD_VAR 0 12
49655: PUSH
49656: LD_VAR 0 7
49660: ARRAY
49661: PUSH
49662: LD_INT 1
49664: ARRAY
49665: PPUSH
49666: LD_VAR 0 12
49670: PUSH
49671: LD_VAR 0 7
49675: ARRAY
49676: PUSH
49677: LD_INT 2
49679: ARRAY
49680: PPUSH
49681: CALL_OW 488
49685: NOT
49686: PUSH
49687: LD_VAR 0 12
49691: PUSH
49692: LD_VAR 0 7
49696: ARRAY
49697: PUSH
49698: LD_INT 1
49700: ARRAY
49701: PPUSH
49702: LD_VAR 0 12
49706: PUSH
49707: LD_VAR 0 7
49711: ARRAY
49712: PUSH
49713: LD_INT 2
49715: ARRAY
49716: PPUSH
49717: CALL_OW 428
49721: PUSH
49722: LD_INT 0
49724: GREATER
49725: OR
49726: PUSH
49727: LD_VAR 0 12
49731: PUSH
49732: LD_VAR 0 7
49736: ARRAY
49737: PUSH
49738: LD_INT 1
49740: ARRAY
49741: PPUSH
49742: LD_VAR 0 12
49746: PUSH
49747: LD_VAR 0 7
49751: ARRAY
49752: PUSH
49753: LD_INT 2
49755: ARRAY
49756: PPUSH
49757: CALL_OW 351
49761: OR
49762: IFFALSE 49768
// exit ;
49764: POP
49765: POP
49766: GO 50060
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49768: LD_ADDR_VAR 0 8
49772: PUSH
49773: LD_VAR 0 12
49777: PUSH
49778: LD_VAR 0 7
49782: ARRAY
49783: PUSH
49784: LD_INT 1
49786: ARRAY
49787: PPUSH
49788: LD_VAR 0 12
49792: PUSH
49793: LD_VAR 0 7
49797: ARRAY
49798: PUSH
49799: LD_INT 2
49801: ARRAY
49802: PPUSH
49803: CALL_OW 546
49807: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49808: LD_VAR 0 8
49812: PUSH
49813: LD_INT 1
49815: ARRAY
49816: PUSH
49817: LD_VAR 0 8
49821: PUSH
49822: LD_INT 2
49824: ARRAY
49825: PUSH
49826: LD_VAR 0 13
49830: PUSH
49831: LD_INT 2
49833: PLUS
49834: GREATER
49835: OR
49836: PUSH
49837: LD_VAR 0 8
49841: PUSH
49842: LD_INT 2
49844: ARRAY
49845: PUSH
49846: LD_VAR 0 13
49850: PUSH
49851: LD_INT 2
49853: MINUS
49854: LESS
49855: OR
49856: PUSH
49857: LD_VAR 0 8
49861: PUSH
49862: LD_INT 3
49864: ARRAY
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 8
49871: PUSH
49872: LD_INT 9
49874: PUSH
49875: LD_INT 10
49877: PUSH
49878: LD_INT 11
49880: PUSH
49881: LD_INT 12
49883: PUSH
49884: LD_INT 13
49886: PUSH
49887: LD_INT 16
49889: PUSH
49890: LD_INT 17
49892: PUSH
49893: LD_INT 18
49895: PUSH
49896: LD_INT 19
49898: PUSH
49899: LD_INT 20
49901: PUSH
49902: LD_INT 21
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: IN
49920: NOT
49921: OR
49922: PUSH
49923: LD_VAR 0 8
49927: PUSH
49928: LD_INT 5
49930: ARRAY
49931: NOT
49932: OR
49933: PUSH
49934: LD_VAR 0 8
49938: PUSH
49939: LD_INT 6
49941: ARRAY
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 7
49951: PUSH
49952: LD_INT 9
49954: PUSH
49955: LD_INT 10
49957: PUSH
49958: LD_INT 11
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: IN
49969: NOT
49970: OR
49971: IFFALSE 49977
// exit ;
49973: POP
49974: POP
49975: GO 50060
// end ;
49977: GO 49648
49979: POP
49980: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49981: LD_VAR 0 9
49985: PPUSH
49986: LD_VAR 0 3
49990: PPUSH
49991: LD_VAR 0 4
49995: PPUSH
49996: LD_INT 20
49998: PPUSH
49999: CALL 42006 0 4
50003: PUSH
50004: LD_INT 4
50006: ARRAY
50007: IFFALSE 50011
// exit ;
50009: GO 50060
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50011: LD_VAR 0 2
50015: PUSH
50016: LD_INT 29
50018: PUSH
50019: LD_INT 30
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: IN
50026: PUSH
50027: LD_VAR 0 3
50031: PPUSH
50032: LD_VAR 0 4
50036: PPUSH
50037: LD_VAR 0 9
50041: PPUSH
50042: CALL_OW 440
50046: NOT
50047: AND
50048: IFFALSE 50052
// exit ;
50050: GO 50060
// result := true ;
50052: LD_ADDR_VAR 0 6
50056: PUSH
50057: LD_INT 1
50059: ST_TO_ADDR
// end ;
50060: LD_VAR 0 6
50064: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50065: LD_INT 0
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
50077: PPUSH
50078: PPUSH
50079: PPUSH
50080: PPUSH
50081: PPUSH
50082: PPUSH
50083: PPUSH
50084: PPUSH
50085: PPUSH
50086: PPUSH
50087: PPUSH
50088: PPUSH
50089: PPUSH
50090: PPUSH
50091: PPUSH
50092: PPUSH
50093: PPUSH
50094: PPUSH
50095: PPUSH
50096: PPUSH
50097: PPUSH
50098: PPUSH
50099: PPUSH
50100: PPUSH
50101: PPUSH
50102: PPUSH
50103: PPUSH
50104: PPUSH
50105: PPUSH
50106: PPUSH
50107: PPUSH
50108: PPUSH
50109: PPUSH
50110: PPUSH
50111: PPUSH
50112: PPUSH
50113: PPUSH
50114: PPUSH
50115: PPUSH
50116: PPUSH
50117: PPUSH
50118: PPUSH
50119: PPUSH
50120: PPUSH
50121: PPUSH
50122: PPUSH
50123: PPUSH
50124: PPUSH
// result = [ ] ;
50125: LD_ADDR_VAR 0 7
50129: PUSH
50130: EMPTY
50131: ST_TO_ADDR
// temp_list = [ ] ;
50132: LD_ADDR_VAR 0 9
50136: PUSH
50137: EMPTY
50138: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50139: LD_VAR 0 4
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: LD_INT 4
50158: PUSH
50159: LD_INT 5
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: IN
50170: NOT
50171: PUSH
50172: LD_VAR 0 1
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: IN
50187: PUSH
50188: LD_VAR 0 5
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: LD_INT 3
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: IN
50207: NOT
50208: AND
50209: OR
50210: IFFALSE 50214
// exit ;
50212: GO 68605
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50214: LD_VAR 0 1
50218: PUSH
50219: LD_INT 6
50221: PUSH
50222: LD_INT 7
50224: PUSH
50225: LD_INT 8
50227: PUSH
50228: LD_INT 13
50230: PUSH
50231: LD_INT 12
50233: PUSH
50234: LD_INT 15
50236: PUSH
50237: LD_INT 11
50239: PUSH
50240: LD_INT 14
50242: PUSH
50243: LD_INT 10
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: IN
50257: IFFALSE 50267
// btype = b_lab ;
50259: LD_ADDR_VAR 0 1
50263: PUSH
50264: LD_INT 6
50266: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50267: LD_VAR 0 6
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: IN
50286: NOT
50287: PUSH
50288: LD_VAR 0 1
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 6
50307: PUSH
50308: LD_INT 36
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: LD_INT 5
50316: PUSH
50317: LD_INT 31
50319: PUSH
50320: LD_INT 32
50322: PUSH
50323: LD_INT 33
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: IN
50339: NOT
50340: PUSH
50341: LD_VAR 0 6
50345: PUSH
50346: LD_INT 1
50348: EQUAL
50349: AND
50350: OR
50351: PUSH
50352: LD_VAR 0 1
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 3
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: IN
50367: NOT
50368: PUSH
50369: LD_VAR 0 6
50373: PUSH
50374: LD_INT 2
50376: EQUAL
50377: AND
50378: OR
50379: IFFALSE 50389
// mode = 0 ;
50381: LD_ADDR_VAR 0 6
50385: PUSH
50386: LD_INT 0
50388: ST_TO_ADDR
// case mode of 0 :
50389: LD_VAR 0 6
50393: PUSH
50394: LD_INT 0
50396: DOUBLE
50397: EQUAL
50398: IFTRUE 50402
50400: GO 61855
50402: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50403: LD_ADDR_VAR 0 11
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 3
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50596: LD_ADDR_VAR 0 12
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50792: LD_ADDR_VAR 0 13
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: LD_INT 3
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: LD_INT 3
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50991: LD_ADDR_VAR 0 14
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 3
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 3
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51187: LD_ADDR_VAR 0 15
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51380: LD_ADDR_VAR 0 16
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 3
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: LD_INT 3
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: LD_INT 3
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51573: LD_ADDR_VAR 0 17
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51803: LD_ADDR_VAR 0 18
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52033: LD_ADDR_VAR 0 19
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52263: LD_ADDR_VAR 0 20
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52493: LD_ADDR_VAR 0 21
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52723: LD_ADDR_VAR 0 22
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: NEG
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: LD_INT 2
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52953: LD_ADDR_VAR 0 23
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 3
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53233: LD_ADDR_VAR 0 24
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: PUSH
53477: LD_INT 2
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53509: LD_ADDR_VAR 0 25
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 3
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 3
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53783: LD_ADDR_VAR 0 26
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54059: LD_ADDR_VAR 0 27
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: NEG
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 3
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: NEG
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54339: LD_ADDR_VAR 0 28
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 3
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 3
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 3
54586: NEG
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54621: LD_ADDR_VAR 0 29
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 3
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54900: LD_ADDR_VAR 0 30
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 3
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55178: LD_ADDR_VAR 0 31
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 3
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: NEG
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55456: LD_ADDR_VAR 0 32
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 3
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 3
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55734: LD_ADDR_VAR 0 33
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: LD_INT 3
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 3
55978: NEG
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56013: LD_ADDR_VAR 0 34
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 3
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 3
56258: NEG
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56293: LD_ADDR_VAR 0 35
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56405: LD_ADDR_VAR 0 36
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56517: LD_ADDR_VAR 0 37
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56629: LD_ADDR_VAR 0 38
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56741: LD_ADDR_VAR 0 39
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56853: LD_ADDR_VAR 0 40
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56965: LD_ADDR_VAR 0 41
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 3
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57315: LD_ADDR_VAR 0 42
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 3
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 3
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 3
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 3
57612: NEG
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 3
57624: NEG
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57665: LD_ADDR_VAR 0 43
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 2
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 3
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 3
57961: NEG
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: NEG
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58013: LD_ADDR_VAR 0 44
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: LD_INT 2
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 3
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 3
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 3
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: LD_INT 3
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: NEG
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58363: LD_ADDR_VAR 0 45
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 3
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 3
58609: PUSH
58610: LD_INT 3
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: LD_INT 3
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: LD_INT 3
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58713: LD_ADDR_VAR 0 46
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 3
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 3
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 3
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 3
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59061: LD_ADDR_VAR 0 47
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 2
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59212: LD_ADDR_VAR 0 48
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59359: LD_ADDR_VAR 0 49
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59503: LD_ADDR_VAR 0 50
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 2
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59647: LD_ADDR_VAR 0 51
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59794: LD_ADDR_VAR 0 52
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59945: LD_ADDR_VAR 0 53
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60175: LD_ADDR_VAR 0 54
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: NEG
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 2
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60405: LD_ADDR_VAR 0 55
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60635: LD_ADDR_VAR 0 56
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 2
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 2
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: LD_INT 2
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60865: LD_ADDR_VAR 0 57
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 2
61041: NEG
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61095: LD_ADDR_VAR 0 58
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: LD_INT 2
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 2
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 2
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 2
61271: NEG
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: LD_INT 2
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61325: LD_ADDR_VAR 0 59
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61413: LD_ADDR_VAR 0 60
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61501: LD_ADDR_VAR 0 61
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61589: LD_ADDR_VAR 0 62
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61677: LD_ADDR_VAR 0 63
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61765: LD_ADDR_VAR 0 64
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: ST_TO_ADDR
// end ; 1 :
61853: GO 67750
61855: LD_INT 1
61857: DOUBLE
61858: EQUAL
61859: IFTRUE 61863
61861: GO 64486
61863: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61864: LD_ADDR_VAR 0 11
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 3
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61908: LD_ADDR_VAR 0 12
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: LIST
61948: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61949: LD_ADDR_VAR 0 13
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 2
61976: PUSH
61977: LD_INT 3
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: LIST
61988: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61989: LD_ADDR_VAR 0 14
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: LD_INT 3
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 3
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: LD_INT 2
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: LIST
62029: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62030: LD_ADDR_VAR 0 15
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: NEG
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: NEG
62060: PUSH
62061: LD_INT 1
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: LIST
62073: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62074: LD_ADDR_VAR 0 16
62078: PUSH
62079: LD_INT 2
62081: NEG
62082: PUSH
62083: LD_INT 3
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 3
62093: NEG
62094: PUSH
62095: LD_INT 2
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: LIST
62119: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62120: LD_ADDR_VAR 0 17
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 3
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: LD_INT 3
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 2
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62164: LD_ADDR_VAR 0 18
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 3
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62205: LD_ADDR_VAR 0 19
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 3
62222: PUSH
62223: LD_INT 3
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: PUSH
62233: LD_INT 3
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62245: LD_ADDR_VAR 0 20
62249: PUSH
62250: LD_INT 1
62252: PUSH
62253: LD_INT 3
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 2
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62286: LD_ADDR_VAR 0 21
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 3
62315: NEG
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: LIST
62329: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62330: LD_ADDR_VAR 0 22
62334: PUSH
62335: LD_INT 2
62337: NEG
62338: PUSH
62339: LD_INT 3
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: LD_INT 3
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62376: LD_ADDR_VAR 0 23
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 3
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 4
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 3
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: LIST
62419: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62420: LD_ADDR_VAR 0 24
62424: PUSH
62425: LD_INT 3
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 3
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62461: LD_ADDR_VAR 0 25
62465: PUSH
62466: LD_INT 3
62468: PUSH
62469: LD_INT 3
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 4
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: LD_INT 4
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: LIST
62500: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62501: LD_ADDR_VAR 0 26
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 4
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 3
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: LIST
62541: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62542: LD_ADDR_VAR 0 27
62546: PUSH
62547: LD_INT 3
62549: NEG
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 3
62560: NEG
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 4
62571: NEG
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: LIST
62585: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62586: LD_ADDR_VAR 0 28
62590: PUSH
62591: LD_INT 3
62593: NEG
62594: PUSH
62595: LD_INT 3
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: NEG
62606: PUSH
62607: LD_INT 4
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 4
62617: NEG
62618: PUSH
62619: LD_INT 3
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62632: LD_ADDR_VAR 0 29
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: LD_INT 3
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: LD_INT 4
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 4
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 3
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 5
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 5
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: LD_INT 4
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 6
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: LD_INT 6
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: LD_INT 5
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62787: LD_ADDR_VAR 0 30
62791: PUSH
62792: LD_INT 2
62794: PUSH
62795: LD_INT 1
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 3
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 4
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 4
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 4
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 5
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 5
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 5
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 6
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 6
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62930: LD_ADDR_VAR 0 31
62934: PUSH
62935: LD_INT 3
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 3
62947: PUSH
62948: LD_INT 3
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 4
62967: PUSH
62968: LD_INT 3
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 4
62977: PUSH
62978: LD_INT 4
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 3
62987: PUSH
62988: LD_INT 4
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 5
62997: PUSH
62998: LD_INT 4
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 5
63007: PUSH
63008: LD_INT 5
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 4
63017: PUSH
63018: LD_INT 5
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 6
63027: PUSH
63028: LD_INT 5
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 6
63037: PUSH
63038: LD_INT 6
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 5
63047: PUSH
63048: LD_INT 6
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63069: LD_ADDR_VAR 0 32
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 3
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 4
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 4
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 3
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 5
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 5
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 4
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 6
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 6
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: LD_INT 5
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63212: LD_ADDR_VAR 0 33
63216: PUSH
63217: LD_INT 2
63219: NEG
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 3
63241: NEG
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 3
63253: NEG
63254: PUSH
63255: LD_INT 1
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 4
63264: NEG
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 4
63275: NEG
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 4
63287: NEG
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 5
63298: NEG
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 5
63309: NEG
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 5
63321: NEG
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 6
63332: NEG
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 6
63343: NEG
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63367: LD_ADDR_VAR 0 34
63371: PUSH
63372: LD_INT 2
63374: NEG
63375: PUSH
63376: LD_INT 3
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 3
63386: NEG
63387: PUSH
63388: LD_INT 2
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 3
63398: NEG
63399: PUSH
63400: LD_INT 3
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 3
63410: NEG
63411: PUSH
63412: LD_INT 4
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 4
63422: NEG
63423: PUSH
63424: LD_INT 3
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 4
63434: NEG
63435: PUSH
63436: LD_INT 4
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 4
63446: NEG
63447: PUSH
63448: LD_INT 5
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 5
63458: NEG
63459: PUSH
63460: LD_INT 4
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 5
63470: NEG
63471: PUSH
63472: LD_INT 5
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 5
63482: NEG
63483: PUSH
63484: LD_INT 6
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 6
63494: NEG
63495: PUSH
63496: LD_INT 5
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 6
63506: NEG
63507: PUSH
63508: LD_INT 6
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63530: LD_ADDR_VAR 0 41
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 2
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: LD_INT 3
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63574: LD_ADDR_VAR 0 42
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 2
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 3
63602: PUSH
63603: LD_INT 1
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: LIST
63614: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63615: LD_ADDR_VAR 0 43
63619: PUSH
63620: LD_INT 2
63622: PUSH
63623: LD_INT 2
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: PUSH
63633: LD_INT 2
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: LD_INT 3
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: LIST
63654: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63655: LD_ADDR_VAR 0 44
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 2
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: LIST
63695: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63696: LD_ADDR_VAR 0 45
63700: PUSH
63701: LD_INT 2
63703: NEG
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 3
63725: NEG
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: LIST
63739: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63740: LD_ADDR_VAR 0 46
63744: PUSH
63745: LD_INT 2
63747: NEG
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 2
63759: NEG
63760: PUSH
63761: LD_INT 3
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: NEG
63772: PUSH
63773: LD_INT 2
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63786: LD_ADDR_VAR 0 47
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: LD_INT 3
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: LD_INT 3
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63819: LD_ADDR_VAR 0 48
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 2
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63850: LD_ADDR_VAR 0 49
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63879: LD_ADDR_VAR 0 50
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: LD_INT 3
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: LD_INT 3
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63908: LD_ADDR_VAR 0 51
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63939: LD_ADDR_VAR 0 52
63943: PUSH
63944: LD_INT 3
63946: NEG
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 3
63958: NEG
63959: PUSH
63960: LD_INT 2
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63972: LD_ADDR_VAR 0 53
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: LD_INT 3
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: LD_INT 3
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: PUSH
64003: LD_INT 2
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64016: LD_ADDR_VAR 0 54
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 3
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64057: LD_ADDR_VAR 0 55
64061: PUSH
64062: LD_INT 3
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 3
64074: PUSH
64075: LD_INT 3
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: LD_INT 3
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: LIST
64096: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64097: LD_ADDR_VAR 0 56
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 3
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64138: LD_ADDR_VAR 0 57
64142: PUSH
64143: LD_INT 2
64145: NEG
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 3
64156: NEG
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 3
64167: NEG
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: LIST
64181: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64182: LD_ADDR_VAR 0 58
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: LD_INT 3
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: LD_INT 2
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 3
64213: NEG
64214: PUSH
64215: LD_INT 3
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64228: LD_ADDR_VAR 0 59
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: LD_INT 2
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: LIST
64271: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64272: LD_ADDR_VAR 0 60
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: LIST
64312: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64313: LD_ADDR_VAR 0 61
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 2
64330: PUSH
64331: LD_INT 2
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: PUSH
64341: LD_INT 2
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64353: LD_ADDR_VAR 0 62
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: LD_INT 2
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: LD_INT 2
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: LIST
64393: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64394: LD_ADDR_VAR 0 63
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: LIST
64437: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64438: LD_ADDR_VAR 0 64
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 2
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 2
64457: NEG
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 2
64469: NEG
64470: PUSH
64471: LD_INT 2
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// end ; 2 :
64484: GO 67750
64486: LD_INT 2
64488: DOUBLE
64489: EQUAL
64490: IFTRUE 64494
64492: GO 67749
64494: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64495: LD_ADDR_VAR 0 29
64499: PUSH
64500: LD_INT 4
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 4
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 5
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 5
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 4
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 3
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 3
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: LD_INT 2
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 5
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 3
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 3
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 4
64615: PUSH
64616: LD_INT 3
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 4
64625: PUSH
64626: LD_INT 4
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 3
64635: PUSH
64636: LD_INT 4
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: LD_INT 3
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: LD_INT 2
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 4
64665: PUSH
64666: LD_INT 2
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 2
64675: PUSH
64676: LD_INT 4
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: LD_INT 4
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: LD_INT 3
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: LD_INT 4
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: LD_INT 5
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: LD_INT 5
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: LD_INT 4
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: LD_INT 3
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 5
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: LD_INT 3
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 3
64789: NEG
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 3
64823: NEG
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 4
64834: NEG
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 4
64845: NEG
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 4
64857: NEG
64858: PUSH
64859: LD_INT 2
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: LD_INT 2
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 4
64880: NEG
64881: PUSH
64882: LD_INT 4
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 4
64892: NEG
64893: PUSH
64894: LD_INT 5
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 3
64904: NEG
64905: PUSH
64906: LD_INT 4
64908: NEG
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 3
64916: NEG
64917: PUSH
64918: LD_INT 3
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 4
64928: NEG
64929: PUSH
64930: LD_INT 3
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 5
64940: NEG
64941: PUSH
64942: LD_INT 4
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 5
64952: NEG
64953: PUSH
64954: LD_INT 5
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 3
64964: NEG
64965: PUSH
64966: LD_INT 5
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 5
64976: NEG
64977: PUSH
64978: LD_INT 3
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65033: LD_ADDR_VAR 0 30
65037: PUSH
65038: LD_INT 4
65040: PUSH
65041: LD_INT 4
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 4
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 5
65060: PUSH
65061: LD_INT 4
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 5
65070: PUSH
65071: LD_INT 5
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 4
65080: PUSH
65081: LD_INT 5
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: LD_INT 4
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 5
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 3
65120: PUSH
65121: LD_INT 5
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: LD_INT 2
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: LD_INT 3
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: LD_INT 4
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: LD_INT 4
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 3
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 2
65202: PUSH
65203: LD_INT 4
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 2
65212: NEG
65213: PUSH
65214: LD_INT 2
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 4
65223: NEG
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 4
65234: NEG
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 4
65268: NEG
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 5
65279: NEG
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 5
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 5
65302: NEG
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 3
65314: NEG
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 3
65325: NEG
65326: PUSH
65327: LD_INT 3
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: LD_INT 4
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 2
65349: NEG
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 2
65361: NEG
65362: PUSH
65363: LD_INT 2
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 3
65373: NEG
65374: PUSH
65375: LD_INT 2
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 4
65385: NEG
65386: PUSH
65387: LD_INT 3
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 4
65397: NEG
65398: PUSH
65399: LD_INT 4
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 2
65409: NEG
65410: PUSH
65411: LD_INT 4
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 4
65421: NEG
65422: PUSH
65423: LD_INT 2
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: LD_INT 4
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: LD_INT 5
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: LD_INT 4
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: PUSH
65467: LD_INT 3
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: LD_INT 3
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: LD_INT 4
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: LD_INT 5
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: LD_INT 3
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 2
65523: NEG
65524: PUSH
65525: LD_INT 5
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65580: LD_ADDR_VAR 0 31
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: LD_INT 4
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 3
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: LD_INT 4
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: LD_INT 5
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: LD_INT 5
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: LD_INT 4
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 2
65659: PUSH
65660: LD_INT 5
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: LD_INT 3
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 3
65680: NEG
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 3
65691: NEG
65692: PUSH
65693: LD_INT 1
65695: NEG
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 2
65703: NEG
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 2
65714: NEG
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 3
65725: NEG
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 4
65736: NEG
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 4
65747: NEG
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 4
65759: NEG
65760: PUSH
65761: LD_INT 2
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: LD_INT 2
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 4
65782: NEG
65783: PUSH
65784: LD_INT 4
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 4
65794: NEG
65795: PUSH
65796: LD_INT 5
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 3
65806: NEG
65807: PUSH
65808: LD_INT 4
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 3
65818: NEG
65819: PUSH
65820: LD_INT 3
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 4
65830: NEG
65831: PUSH
65832: LD_INT 3
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 5
65842: NEG
65843: PUSH
65844: LD_INT 4
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 5
65854: NEG
65855: PUSH
65856: LD_INT 5
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 3
65866: NEG
65867: PUSH
65868: LD_INT 5
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 5
65878: NEG
65879: PUSH
65880: LD_INT 3
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 3
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: LD_INT 4
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: LD_INT 3
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: LD_INT 2
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 0
65934: PUSH
65935: LD_INT 2
65937: NEG
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: LD_INT 3
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: LD_INT 4
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 2
65969: PUSH
65970: LD_INT 2
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 2
65980: NEG
65981: PUSH
65982: LD_INT 4
65984: NEG
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 4
65992: PUSH
65993: LD_INT 0
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 4
66002: PUSH
66003: LD_INT 1
66005: NEG
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 5
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 5
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 4
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 3
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 3
66053: PUSH
66054: LD_INT 1
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 3
66064: PUSH
66065: LD_INT 2
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 5
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66130: LD_ADDR_VAR 0 32
66134: PUSH
66135: LD_INT 4
66137: NEG
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 4
66148: NEG
66149: PUSH
66150: LD_INT 1
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 3
66171: NEG
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 4
66182: NEG
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 5
66193: NEG
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 5
66204: NEG
66205: PUSH
66206: LD_INT 1
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 5
66216: NEG
66217: PUSH
66218: LD_INT 2
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 3
66228: NEG
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: LD_INT 3
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 3
66251: NEG
66252: PUSH
66253: LD_INT 4
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 2
66263: NEG
66264: PUSH
66265: LD_INT 3
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 2
66275: NEG
66276: PUSH
66277: LD_INT 2
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 3
66287: NEG
66288: PUSH
66289: LD_INT 2
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 4
66299: NEG
66300: PUSH
66301: LD_INT 3
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 4
66311: NEG
66312: PUSH
66313: LD_INT 4
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: NEG
66324: PUSH
66325: LD_INT 4
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 4
66335: NEG
66336: PUSH
66337: LD_INT 2
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: LD_INT 4
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 5
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 4
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 1
66380: PUSH
66381: LD_INT 3
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: LD_INT 3
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 1
66402: NEG
66403: PUSH
66404: LD_INT 4
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: LD_INT 5
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 2
66426: PUSH
66427: LD_INT 3
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 2
66437: NEG
66438: PUSH
66439: LD_INT 5
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 3
66459: PUSH
66460: LD_INT 1
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 4
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 4
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 3
66490: PUSH
66491: LD_INT 1
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 2
66510: PUSH
66511: LD_INT 1
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 2
66521: PUSH
66522: LD_INT 2
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 4
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 4
66542: PUSH
66543: LD_INT 4
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 4
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 5
66562: PUSH
66563: LD_INT 4
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 5
66572: PUSH
66573: LD_INT 5
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 4
66582: PUSH
66583: LD_INT 5
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 3
66592: PUSH
66593: LD_INT 4
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 3
66602: PUSH
66603: LD_INT 3
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 5
66612: PUSH
66613: LD_INT 3
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: LD_INT 5
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66677: LD_ADDR_VAR 0 33
66681: PUSH
66682: LD_INT 4
66684: NEG
66685: PUSH
66686: LD_INT 4
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 4
66696: NEG
66697: PUSH
66698: LD_INT 5
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 3
66708: NEG
66709: PUSH
66710: LD_INT 4
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 3
66720: NEG
66721: PUSH
66722: LD_INT 3
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 4
66732: NEG
66733: PUSH
66734: LD_INT 3
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 5
66744: NEG
66745: PUSH
66746: LD_INT 4
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 5
66756: NEG
66757: PUSH
66758: LD_INT 5
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: NEG
66769: PUSH
66770: LD_INT 5
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 5
66780: NEG
66781: PUSH
66782: LD_INT 3
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 0
66803: PUSH
66804: LD_INT 4
66806: NEG
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: LD_INT 3
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: LD_INT 2
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: LD_INT 2
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: LD_INT 3
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 1
66859: NEG
66860: PUSH
66861: LD_INT 4
66863: NEG
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: LD_INT 2
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: LD_INT 4
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 4
66894: PUSH
66895: LD_INT 0
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 4
66904: PUSH
66905: LD_INT 1
66907: NEG
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 5
66915: PUSH
66916: LD_INT 0
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 5
66925: PUSH
66926: LD_INT 1
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 4
66935: PUSH
66936: LD_INT 1
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 3
66966: PUSH
66967: LD_INT 2
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 5
66977: PUSH
66978: LD_INT 2
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 3
66987: PUSH
66988: LD_INT 3
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 4
67007: PUSH
67008: LD_INT 3
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 4
67017: PUSH
67018: LD_INT 4
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 3
67027: PUSH
67028: LD_INT 4
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: LD_INT 3
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: LD_INT 2
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 4
67057: PUSH
67058: LD_INT 2
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 2
67067: PUSH
67068: LD_INT 4
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: LD_INT 4
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: LD_INT 3
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: LD_INT 4
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 1
67107: PUSH
67108: LD_INT 5
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: LD_INT 5
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 1
67127: NEG
67128: PUSH
67129: LD_INT 4
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: LD_INT 5
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 2
67159: NEG
67160: PUSH
67161: LD_INT 3
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67215: LD_ADDR_VAR 0 34
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 4
67225: NEG
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: LD_INT 5
67236: NEG
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: PUSH
67245: LD_INT 4
67247: NEG
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 1
67255: PUSH
67256: LD_INT 3
67258: NEG
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: LD_INT 3
67269: NEG
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: LD_INT 4
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 1
67289: NEG
67290: PUSH
67291: LD_INT 5
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 2
67301: PUSH
67302: LD_INT 3
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 2
67312: NEG
67313: PUSH
67314: LD_INT 5
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 3
67324: PUSH
67325: LD_INT 0
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 3
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 4
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 4
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 3
67365: PUSH
67366: LD_INT 1
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 2
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 2
67385: PUSH
67386: LD_INT 1
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: LD_INT 2
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 4
67407: PUSH
67408: LD_INT 2
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 4
67417: PUSH
67418: LD_INT 4
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 4
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 5
67437: PUSH
67438: LD_INT 4
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 5
67447: PUSH
67448: LD_INT 5
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 4
67457: PUSH
67458: LD_INT 5
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: LD_INT 4
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 3
67477: PUSH
67478: LD_INT 3
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 5
67487: PUSH
67488: LD_INT 3
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 3
67497: PUSH
67498: LD_INT 5
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: LD_INT 3
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 0
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: LD_INT 3
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: LD_INT 4
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 0
67547: PUSH
67548: LD_INT 4
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 1
67557: NEG
67558: PUSH
67559: LD_INT 3
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: LD_INT 2
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 2
67579: PUSH
67580: LD_INT 4
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 2
67589: NEG
67590: PUSH
67591: LD_INT 2
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 4
67600: NEG
67601: PUSH
67602: LD_INT 0
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 4
67611: NEG
67612: PUSH
67613: LD_INT 1
67615: NEG
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 3
67623: NEG
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 3
67634: NEG
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 4
67645: NEG
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 5
67656: NEG
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 5
67667: NEG
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 5
67679: NEG
67680: PUSH
67681: LD_INT 2
67683: NEG
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 3
67691: NEG
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: ST_TO_ADDR
// end ; end ;
67747: GO 67750
67749: POP
// case btype of b_depot , b_warehouse :
67750: LD_VAR 0 1
67754: PUSH
67755: LD_INT 0
67757: DOUBLE
67758: EQUAL
67759: IFTRUE 67769
67761: LD_INT 1
67763: DOUBLE
67764: EQUAL
67765: IFTRUE 67769
67767: GO 67970
67769: POP
// case nation of nation_american :
67770: LD_VAR 0 5
67774: PUSH
67775: LD_INT 1
67777: DOUBLE
67778: EQUAL
67779: IFTRUE 67783
67781: GO 67839
67783: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67784: LD_ADDR_VAR 0 9
67788: PUSH
67789: LD_VAR 0 11
67793: PUSH
67794: LD_VAR 0 12
67798: PUSH
67799: LD_VAR 0 13
67803: PUSH
67804: LD_VAR 0 14
67808: PUSH
67809: LD_VAR 0 15
67813: PUSH
67814: LD_VAR 0 16
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: PUSH
67827: LD_VAR 0 4
67831: PUSH
67832: LD_INT 1
67834: PLUS
67835: ARRAY
67836: ST_TO_ADDR
67837: GO 67968
67839: LD_INT 2
67841: DOUBLE
67842: EQUAL
67843: IFTRUE 67847
67845: GO 67903
67847: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67848: LD_ADDR_VAR 0 9
67852: PUSH
67853: LD_VAR 0 17
67857: PUSH
67858: LD_VAR 0 18
67862: PUSH
67863: LD_VAR 0 19
67867: PUSH
67868: LD_VAR 0 20
67872: PUSH
67873: LD_VAR 0 21
67877: PUSH
67878: LD_VAR 0 22
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: PUSH
67891: LD_VAR 0 4
67895: PUSH
67896: LD_INT 1
67898: PLUS
67899: ARRAY
67900: ST_TO_ADDR
67901: GO 67968
67903: LD_INT 3
67905: DOUBLE
67906: EQUAL
67907: IFTRUE 67911
67909: GO 67967
67911: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67912: LD_ADDR_VAR 0 9
67916: PUSH
67917: LD_VAR 0 23
67921: PUSH
67922: LD_VAR 0 24
67926: PUSH
67927: LD_VAR 0 25
67931: PUSH
67932: LD_VAR 0 26
67936: PUSH
67937: LD_VAR 0 27
67941: PUSH
67942: LD_VAR 0 28
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: PUSH
67955: LD_VAR 0 4
67959: PUSH
67960: LD_INT 1
67962: PLUS
67963: ARRAY
67964: ST_TO_ADDR
67965: GO 67968
67967: POP
67968: GO 68523
67970: LD_INT 2
67972: DOUBLE
67973: EQUAL
67974: IFTRUE 67984
67976: LD_INT 3
67978: DOUBLE
67979: EQUAL
67980: IFTRUE 67984
67982: GO 68040
67984: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67985: LD_ADDR_VAR 0 9
67989: PUSH
67990: LD_VAR 0 29
67994: PUSH
67995: LD_VAR 0 30
67999: PUSH
68000: LD_VAR 0 31
68004: PUSH
68005: LD_VAR 0 32
68009: PUSH
68010: LD_VAR 0 33
68014: PUSH
68015: LD_VAR 0 34
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: PUSH
68028: LD_VAR 0 4
68032: PUSH
68033: LD_INT 1
68035: PLUS
68036: ARRAY
68037: ST_TO_ADDR
68038: GO 68523
68040: LD_INT 16
68042: DOUBLE
68043: EQUAL
68044: IFTRUE 68102
68046: LD_INT 17
68048: DOUBLE
68049: EQUAL
68050: IFTRUE 68102
68052: LD_INT 18
68054: DOUBLE
68055: EQUAL
68056: IFTRUE 68102
68058: LD_INT 19
68060: DOUBLE
68061: EQUAL
68062: IFTRUE 68102
68064: LD_INT 22
68066: DOUBLE
68067: EQUAL
68068: IFTRUE 68102
68070: LD_INT 20
68072: DOUBLE
68073: EQUAL
68074: IFTRUE 68102
68076: LD_INT 21
68078: DOUBLE
68079: EQUAL
68080: IFTRUE 68102
68082: LD_INT 23
68084: DOUBLE
68085: EQUAL
68086: IFTRUE 68102
68088: LD_INT 24
68090: DOUBLE
68091: EQUAL
68092: IFTRUE 68102
68094: LD_INT 25
68096: DOUBLE
68097: EQUAL
68098: IFTRUE 68102
68100: GO 68158
68102: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68103: LD_ADDR_VAR 0 9
68107: PUSH
68108: LD_VAR 0 35
68112: PUSH
68113: LD_VAR 0 36
68117: PUSH
68118: LD_VAR 0 37
68122: PUSH
68123: LD_VAR 0 38
68127: PUSH
68128: LD_VAR 0 39
68132: PUSH
68133: LD_VAR 0 40
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: PUSH
68146: LD_VAR 0 4
68150: PUSH
68151: LD_INT 1
68153: PLUS
68154: ARRAY
68155: ST_TO_ADDR
68156: GO 68523
68158: LD_INT 6
68160: DOUBLE
68161: EQUAL
68162: IFTRUE 68214
68164: LD_INT 7
68166: DOUBLE
68167: EQUAL
68168: IFTRUE 68214
68170: LD_INT 8
68172: DOUBLE
68173: EQUAL
68174: IFTRUE 68214
68176: LD_INT 13
68178: DOUBLE
68179: EQUAL
68180: IFTRUE 68214
68182: LD_INT 12
68184: DOUBLE
68185: EQUAL
68186: IFTRUE 68214
68188: LD_INT 15
68190: DOUBLE
68191: EQUAL
68192: IFTRUE 68214
68194: LD_INT 11
68196: DOUBLE
68197: EQUAL
68198: IFTRUE 68214
68200: LD_INT 14
68202: DOUBLE
68203: EQUAL
68204: IFTRUE 68214
68206: LD_INT 10
68208: DOUBLE
68209: EQUAL
68210: IFTRUE 68214
68212: GO 68270
68214: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68215: LD_ADDR_VAR 0 9
68219: PUSH
68220: LD_VAR 0 41
68224: PUSH
68225: LD_VAR 0 42
68229: PUSH
68230: LD_VAR 0 43
68234: PUSH
68235: LD_VAR 0 44
68239: PUSH
68240: LD_VAR 0 45
68244: PUSH
68245: LD_VAR 0 46
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: PUSH
68258: LD_VAR 0 4
68262: PUSH
68263: LD_INT 1
68265: PLUS
68266: ARRAY
68267: ST_TO_ADDR
68268: GO 68523
68270: LD_INT 36
68272: DOUBLE
68273: EQUAL
68274: IFTRUE 68278
68276: GO 68334
68278: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68279: LD_ADDR_VAR 0 9
68283: PUSH
68284: LD_VAR 0 47
68288: PUSH
68289: LD_VAR 0 48
68293: PUSH
68294: LD_VAR 0 49
68298: PUSH
68299: LD_VAR 0 50
68303: PUSH
68304: LD_VAR 0 51
68308: PUSH
68309: LD_VAR 0 52
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: PUSH
68322: LD_VAR 0 4
68326: PUSH
68327: LD_INT 1
68329: PLUS
68330: ARRAY
68331: ST_TO_ADDR
68332: GO 68523
68334: LD_INT 4
68336: DOUBLE
68337: EQUAL
68338: IFTRUE 68360
68340: LD_INT 5
68342: DOUBLE
68343: EQUAL
68344: IFTRUE 68360
68346: LD_INT 34
68348: DOUBLE
68349: EQUAL
68350: IFTRUE 68360
68352: LD_INT 37
68354: DOUBLE
68355: EQUAL
68356: IFTRUE 68360
68358: GO 68416
68360: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68361: LD_ADDR_VAR 0 9
68365: PUSH
68366: LD_VAR 0 53
68370: PUSH
68371: LD_VAR 0 54
68375: PUSH
68376: LD_VAR 0 55
68380: PUSH
68381: LD_VAR 0 56
68385: PUSH
68386: LD_VAR 0 57
68390: PUSH
68391: LD_VAR 0 58
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: PUSH
68404: LD_VAR 0 4
68408: PUSH
68409: LD_INT 1
68411: PLUS
68412: ARRAY
68413: ST_TO_ADDR
68414: GO 68523
68416: LD_INT 31
68418: DOUBLE
68419: EQUAL
68420: IFTRUE 68466
68422: LD_INT 32
68424: DOUBLE
68425: EQUAL
68426: IFTRUE 68466
68428: LD_INT 33
68430: DOUBLE
68431: EQUAL
68432: IFTRUE 68466
68434: LD_INT 27
68436: DOUBLE
68437: EQUAL
68438: IFTRUE 68466
68440: LD_INT 26
68442: DOUBLE
68443: EQUAL
68444: IFTRUE 68466
68446: LD_INT 28
68448: DOUBLE
68449: EQUAL
68450: IFTRUE 68466
68452: LD_INT 29
68454: DOUBLE
68455: EQUAL
68456: IFTRUE 68466
68458: LD_INT 30
68460: DOUBLE
68461: EQUAL
68462: IFTRUE 68466
68464: GO 68522
68466: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68467: LD_ADDR_VAR 0 9
68471: PUSH
68472: LD_VAR 0 59
68476: PUSH
68477: LD_VAR 0 60
68481: PUSH
68482: LD_VAR 0 61
68486: PUSH
68487: LD_VAR 0 62
68491: PUSH
68492: LD_VAR 0 63
68496: PUSH
68497: LD_VAR 0 64
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: PUSH
68510: LD_VAR 0 4
68514: PUSH
68515: LD_INT 1
68517: PLUS
68518: ARRAY
68519: ST_TO_ADDR
68520: GO 68523
68522: POP
// temp_list2 = [ ] ;
68523: LD_ADDR_VAR 0 10
68527: PUSH
68528: EMPTY
68529: ST_TO_ADDR
// for i in temp_list do
68530: LD_ADDR_VAR 0 8
68534: PUSH
68535: LD_VAR 0 9
68539: PUSH
68540: FOR_IN
68541: IFFALSE 68593
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68543: LD_ADDR_VAR 0 10
68547: PUSH
68548: LD_VAR 0 10
68552: PUSH
68553: LD_VAR 0 8
68557: PUSH
68558: LD_INT 1
68560: ARRAY
68561: PUSH
68562: LD_VAR 0 2
68566: PLUS
68567: PUSH
68568: LD_VAR 0 8
68572: PUSH
68573: LD_INT 2
68575: ARRAY
68576: PUSH
68577: LD_VAR 0 3
68581: PLUS
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: EMPTY
68588: LIST
68589: ADD
68590: ST_TO_ADDR
68591: GO 68540
68593: POP
68594: POP
// result = temp_list2 ;
68595: LD_ADDR_VAR 0 7
68599: PUSH
68600: LD_VAR 0 10
68604: ST_TO_ADDR
// end ;
68605: LD_VAR 0 7
68609: RET
// export function EnemyInRange ( unit , dist ) ; begin
68610: LD_INT 0
68612: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68613: LD_ADDR_VAR 0 3
68617: PUSH
68618: LD_VAR 0 1
68622: PPUSH
68623: CALL_OW 255
68627: PPUSH
68628: LD_VAR 0 1
68632: PPUSH
68633: CALL_OW 250
68637: PPUSH
68638: LD_VAR 0 1
68642: PPUSH
68643: CALL_OW 251
68647: PPUSH
68648: LD_VAR 0 2
68652: PPUSH
68653: CALL 42006 0 4
68657: PUSH
68658: LD_INT 4
68660: ARRAY
68661: ST_TO_ADDR
// end ;
68662: LD_VAR 0 3
68666: RET
// export function PlayerSeeMe ( unit ) ; begin
68667: LD_INT 0
68669: PPUSH
// result := See ( your_side , unit ) ;
68670: LD_ADDR_VAR 0 2
68674: PUSH
68675: LD_OWVAR 2
68679: PPUSH
68680: LD_VAR 0 1
68684: PPUSH
68685: CALL_OW 292
68689: ST_TO_ADDR
// end ;
68690: LD_VAR 0 2
68694: RET
// export function ReverseDir ( unit ) ; begin
68695: LD_INT 0
68697: PPUSH
// if not unit then
68698: LD_VAR 0 1
68702: NOT
68703: IFFALSE 68707
// exit ;
68705: GO 68730
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68707: LD_ADDR_VAR 0 2
68711: PUSH
68712: LD_VAR 0 1
68716: PPUSH
68717: CALL_OW 254
68721: PUSH
68722: LD_INT 3
68724: PLUS
68725: PUSH
68726: LD_INT 6
68728: MOD
68729: ST_TO_ADDR
// end ;
68730: LD_VAR 0 2
68734: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68735: LD_INT 0
68737: PPUSH
68738: PPUSH
68739: PPUSH
68740: PPUSH
68741: PPUSH
// if not hexes then
68742: LD_VAR 0 2
68746: NOT
68747: IFFALSE 68751
// exit ;
68749: GO 68899
// dist := 9999 ;
68751: LD_ADDR_VAR 0 5
68755: PUSH
68756: LD_INT 9999
68758: ST_TO_ADDR
// for i = 1 to hexes do
68759: LD_ADDR_VAR 0 4
68763: PUSH
68764: DOUBLE
68765: LD_INT 1
68767: DEC
68768: ST_TO_ADDR
68769: LD_VAR 0 2
68773: PUSH
68774: FOR_TO
68775: IFFALSE 68887
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68777: LD_VAR 0 1
68781: PPUSH
68782: LD_VAR 0 2
68786: PUSH
68787: LD_VAR 0 4
68791: ARRAY
68792: PUSH
68793: LD_INT 1
68795: ARRAY
68796: PPUSH
68797: LD_VAR 0 2
68801: PUSH
68802: LD_VAR 0 4
68806: ARRAY
68807: PUSH
68808: LD_INT 2
68810: ARRAY
68811: PPUSH
68812: CALL_OW 297
68816: PUSH
68817: LD_VAR 0 5
68821: LESS
68822: IFFALSE 68885
// begin hex := hexes [ i ] ;
68824: LD_ADDR_VAR 0 7
68828: PUSH
68829: LD_VAR 0 2
68833: PUSH
68834: LD_VAR 0 4
68838: ARRAY
68839: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68840: LD_ADDR_VAR 0 5
68844: PUSH
68845: LD_VAR 0 1
68849: PPUSH
68850: LD_VAR 0 2
68854: PUSH
68855: LD_VAR 0 4
68859: ARRAY
68860: PUSH
68861: LD_INT 1
68863: ARRAY
68864: PPUSH
68865: LD_VAR 0 2
68869: PUSH
68870: LD_VAR 0 4
68874: ARRAY
68875: PUSH
68876: LD_INT 2
68878: ARRAY
68879: PPUSH
68880: CALL_OW 297
68884: ST_TO_ADDR
// end ; end ;
68885: GO 68774
68887: POP
68888: POP
// result := hex ;
68889: LD_ADDR_VAR 0 3
68893: PUSH
68894: LD_VAR 0 7
68898: ST_TO_ADDR
// end ;
68899: LD_VAR 0 3
68903: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68904: LD_INT 0
68906: PPUSH
68907: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68908: LD_VAR 0 1
68912: NOT
68913: PUSH
68914: LD_VAR 0 1
68918: PUSH
68919: LD_INT 21
68921: PUSH
68922: LD_INT 2
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 23
68931: PUSH
68932: LD_INT 2
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PPUSH
68943: CALL_OW 69
68947: IN
68948: NOT
68949: OR
68950: IFFALSE 68954
// exit ;
68952: GO 69001
// for i = 1 to 3 do
68954: LD_ADDR_VAR 0 3
68958: PUSH
68959: DOUBLE
68960: LD_INT 1
68962: DEC
68963: ST_TO_ADDR
68964: LD_INT 3
68966: PUSH
68967: FOR_TO
68968: IFFALSE 68999
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68970: LD_VAR 0 1
68974: PPUSH
68975: CALL_OW 250
68979: PPUSH
68980: LD_VAR 0 1
68984: PPUSH
68985: CALL_OW 251
68989: PPUSH
68990: LD_INT 1
68992: PPUSH
68993: CALL_OW 453
68997: GO 68967
68999: POP
69000: POP
// end ;
69001: LD_VAR 0 2
69005: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69006: LD_INT 0
69008: PPUSH
69009: PPUSH
69010: PPUSH
69011: PPUSH
69012: PPUSH
69013: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69014: LD_VAR 0 1
69018: NOT
69019: PUSH
69020: LD_VAR 0 2
69024: NOT
69025: OR
69026: PUSH
69027: LD_VAR 0 1
69031: PPUSH
69032: CALL_OW 314
69036: OR
69037: IFFALSE 69041
// exit ;
69039: GO 69482
// x := GetX ( enemy_unit ) ;
69041: LD_ADDR_VAR 0 7
69045: PUSH
69046: LD_VAR 0 2
69050: PPUSH
69051: CALL_OW 250
69055: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69056: LD_ADDR_VAR 0 8
69060: PUSH
69061: LD_VAR 0 2
69065: PPUSH
69066: CALL_OW 251
69070: ST_TO_ADDR
// if not x or not y then
69071: LD_VAR 0 7
69075: NOT
69076: PUSH
69077: LD_VAR 0 8
69081: NOT
69082: OR
69083: IFFALSE 69087
// exit ;
69085: GO 69482
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69087: LD_ADDR_VAR 0 6
69091: PUSH
69092: LD_VAR 0 7
69096: PPUSH
69097: LD_INT 0
69099: PPUSH
69100: LD_INT 4
69102: PPUSH
69103: CALL_OW 272
69107: PUSH
69108: LD_VAR 0 8
69112: PPUSH
69113: LD_INT 0
69115: PPUSH
69116: LD_INT 4
69118: PPUSH
69119: CALL_OW 273
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_VAR 0 7
69132: PPUSH
69133: LD_INT 1
69135: PPUSH
69136: LD_INT 4
69138: PPUSH
69139: CALL_OW 272
69143: PUSH
69144: LD_VAR 0 8
69148: PPUSH
69149: LD_INT 1
69151: PPUSH
69152: LD_INT 4
69154: PPUSH
69155: CALL_OW 273
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_VAR 0 7
69168: PPUSH
69169: LD_INT 2
69171: PPUSH
69172: LD_INT 4
69174: PPUSH
69175: CALL_OW 272
69179: PUSH
69180: LD_VAR 0 8
69184: PPUSH
69185: LD_INT 2
69187: PPUSH
69188: LD_INT 4
69190: PPUSH
69191: CALL_OW 273
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_VAR 0 7
69204: PPUSH
69205: LD_INT 3
69207: PPUSH
69208: LD_INT 4
69210: PPUSH
69211: CALL_OW 272
69215: PUSH
69216: LD_VAR 0 8
69220: PPUSH
69221: LD_INT 3
69223: PPUSH
69224: LD_INT 4
69226: PPUSH
69227: CALL_OW 273
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_VAR 0 7
69240: PPUSH
69241: LD_INT 4
69243: PPUSH
69244: LD_INT 4
69246: PPUSH
69247: CALL_OW 272
69251: PUSH
69252: LD_VAR 0 8
69256: PPUSH
69257: LD_INT 4
69259: PPUSH
69260: LD_INT 4
69262: PPUSH
69263: CALL_OW 273
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_VAR 0 7
69276: PPUSH
69277: LD_INT 5
69279: PPUSH
69280: LD_INT 4
69282: PPUSH
69283: CALL_OW 272
69287: PUSH
69288: LD_VAR 0 8
69292: PPUSH
69293: LD_INT 5
69295: PPUSH
69296: LD_INT 4
69298: PPUSH
69299: CALL_OW 273
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: ST_TO_ADDR
// for i = tmp downto 1 do
69316: LD_ADDR_VAR 0 4
69320: PUSH
69321: DOUBLE
69322: LD_VAR 0 6
69326: INC
69327: ST_TO_ADDR
69328: LD_INT 1
69330: PUSH
69331: FOR_DOWNTO
69332: IFFALSE 69433
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69334: LD_VAR 0 6
69338: PUSH
69339: LD_VAR 0 4
69343: ARRAY
69344: PUSH
69345: LD_INT 1
69347: ARRAY
69348: PPUSH
69349: LD_VAR 0 6
69353: PUSH
69354: LD_VAR 0 4
69358: ARRAY
69359: PUSH
69360: LD_INT 2
69362: ARRAY
69363: PPUSH
69364: CALL_OW 488
69368: NOT
69369: PUSH
69370: LD_VAR 0 6
69374: PUSH
69375: LD_VAR 0 4
69379: ARRAY
69380: PUSH
69381: LD_INT 1
69383: ARRAY
69384: PPUSH
69385: LD_VAR 0 6
69389: PUSH
69390: LD_VAR 0 4
69394: ARRAY
69395: PUSH
69396: LD_INT 2
69398: ARRAY
69399: PPUSH
69400: CALL_OW 428
69404: PUSH
69405: LD_INT 0
69407: NONEQUAL
69408: OR
69409: IFFALSE 69431
// tmp := Delete ( tmp , i ) ;
69411: LD_ADDR_VAR 0 6
69415: PUSH
69416: LD_VAR 0 6
69420: PPUSH
69421: LD_VAR 0 4
69425: PPUSH
69426: CALL_OW 3
69430: ST_TO_ADDR
69431: GO 69331
69433: POP
69434: POP
// j := GetClosestHex ( unit , tmp ) ;
69435: LD_ADDR_VAR 0 5
69439: PUSH
69440: LD_VAR 0 1
69444: PPUSH
69445: LD_VAR 0 6
69449: PPUSH
69450: CALL 68735 0 2
69454: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69455: LD_VAR 0 1
69459: PPUSH
69460: LD_VAR 0 5
69464: PUSH
69465: LD_INT 1
69467: ARRAY
69468: PPUSH
69469: LD_VAR 0 5
69473: PUSH
69474: LD_INT 2
69476: ARRAY
69477: PPUSH
69478: CALL_OW 111
// end ;
69482: LD_VAR 0 3
69486: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69487: LD_INT 0
69489: PPUSH
69490: PPUSH
69491: PPUSH
// uc_side = 0 ;
69492: LD_ADDR_OWVAR 20
69496: PUSH
69497: LD_INT 0
69499: ST_TO_ADDR
// uc_nation = 0 ;
69500: LD_ADDR_OWVAR 21
69504: PUSH
69505: LD_INT 0
69507: ST_TO_ADDR
// InitHc_All ( ) ;
69508: CALL_OW 584
// InitVc ;
69512: CALL_OW 20
// if mastodonts then
69516: LD_VAR 0 6
69520: IFFALSE 69587
// for i = 1 to mastodonts do
69522: LD_ADDR_VAR 0 11
69526: PUSH
69527: DOUBLE
69528: LD_INT 1
69530: DEC
69531: ST_TO_ADDR
69532: LD_VAR 0 6
69536: PUSH
69537: FOR_TO
69538: IFFALSE 69585
// begin vc_chassis := 31 ;
69540: LD_ADDR_OWVAR 37
69544: PUSH
69545: LD_INT 31
69547: ST_TO_ADDR
// vc_control := control_rider ;
69548: LD_ADDR_OWVAR 38
69552: PUSH
69553: LD_INT 4
69555: ST_TO_ADDR
// animal := CreateVehicle ;
69556: LD_ADDR_VAR 0 12
69560: PUSH
69561: CALL_OW 45
69565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69566: LD_VAR 0 12
69570: PPUSH
69571: LD_VAR 0 8
69575: PPUSH
69576: LD_INT 0
69578: PPUSH
69579: CALL 71775 0 3
// end ;
69583: GO 69537
69585: POP
69586: POP
// if horses then
69587: LD_VAR 0 5
69591: IFFALSE 69658
// for i = 1 to horses do
69593: LD_ADDR_VAR 0 11
69597: PUSH
69598: DOUBLE
69599: LD_INT 1
69601: DEC
69602: ST_TO_ADDR
69603: LD_VAR 0 5
69607: PUSH
69608: FOR_TO
69609: IFFALSE 69656
// begin hc_class := 21 ;
69611: LD_ADDR_OWVAR 28
69615: PUSH
69616: LD_INT 21
69618: ST_TO_ADDR
// hc_gallery :=  ;
69619: LD_ADDR_OWVAR 33
69623: PUSH
69624: LD_STRING 
69626: ST_TO_ADDR
// animal := CreateHuman ;
69627: LD_ADDR_VAR 0 12
69631: PUSH
69632: CALL_OW 44
69636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69637: LD_VAR 0 12
69641: PPUSH
69642: LD_VAR 0 8
69646: PPUSH
69647: LD_INT 0
69649: PPUSH
69650: CALL 71775 0 3
// end ;
69654: GO 69608
69656: POP
69657: POP
// if birds then
69658: LD_VAR 0 1
69662: IFFALSE 69729
// for i = 1 to birds do
69664: LD_ADDR_VAR 0 11
69668: PUSH
69669: DOUBLE
69670: LD_INT 1
69672: DEC
69673: ST_TO_ADDR
69674: LD_VAR 0 1
69678: PUSH
69679: FOR_TO
69680: IFFALSE 69727
// begin hc_class = 18 ;
69682: LD_ADDR_OWVAR 28
69686: PUSH
69687: LD_INT 18
69689: ST_TO_ADDR
// hc_gallery =  ;
69690: LD_ADDR_OWVAR 33
69694: PUSH
69695: LD_STRING 
69697: ST_TO_ADDR
// animal := CreateHuman ;
69698: LD_ADDR_VAR 0 12
69702: PUSH
69703: CALL_OW 44
69707: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69708: LD_VAR 0 12
69712: PPUSH
69713: LD_VAR 0 8
69717: PPUSH
69718: LD_INT 0
69720: PPUSH
69721: CALL 71775 0 3
// end ;
69725: GO 69679
69727: POP
69728: POP
// if tigers then
69729: LD_VAR 0 2
69733: IFFALSE 69817
// for i = 1 to tigers do
69735: LD_ADDR_VAR 0 11
69739: PUSH
69740: DOUBLE
69741: LD_INT 1
69743: DEC
69744: ST_TO_ADDR
69745: LD_VAR 0 2
69749: PUSH
69750: FOR_TO
69751: IFFALSE 69815
// begin hc_class = class_tiger ;
69753: LD_ADDR_OWVAR 28
69757: PUSH
69758: LD_INT 14
69760: ST_TO_ADDR
// hc_gallery =  ;
69761: LD_ADDR_OWVAR 33
69765: PUSH
69766: LD_STRING 
69768: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69769: LD_ADDR_OWVAR 35
69773: PUSH
69774: LD_INT 7
69776: NEG
69777: PPUSH
69778: LD_INT 7
69780: PPUSH
69781: CALL_OW 12
69785: ST_TO_ADDR
// animal := CreateHuman ;
69786: LD_ADDR_VAR 0 12
69790: PUSH
69791: CALL_OW 44
69795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69796: LD_VAR 0 12
69800: PPUSH
69801: LD_VAR 0 8
69805: PPUSH
69806: LD_INT 0
69808: PPUSH
69809: CALL 71775 0 3
// end ;
69813: GO 69750
69815: POP
69816: POP
// if apemans then
69817: LD_VAR 0 3
69821: IFFALSE 69944
// for i = 1 to apemans do
69823: LD_ADDR_VAR 0 11
69827: PUSH
69828: DOUBLE
69829: LD_INT 1
69831: DEC
69832: ST_TO_ADDR
69833: LD_VAR 0 3
69837: PUSH
69838: FOR_TO
69839: IFFALSE 69942
// begin hc_class = class_apeman ;
69841: LD_ADDR_OWVAR 28
69845: PUSH
69846: LD_INT 12
69848: ST_TO_ADDR
// hc_gallery =  ;
69849: LD_ADDR_OWVAR 33
69853: PUSH
69854: LD_STRING 
69856: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69857: LD_ADDR_OWVAR 35
69861: PUSH
69862: LD_INT 2
69864: NEG
69865: PPUSH
69866: LD_INT 2
69868: PPUSH
69869: CALL_OW 12
69873: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69874: LD_ADDR_OWVAR 31
69878: PUSH
69879: LD_INT 1
69881: PPUSH
69882: LD_INT 3
69884: PPUSH
69885: CALL_OW 12
69889: PUSH
69890: LD_INT 1
69892: PPUSH
69893: LD_INT 3
69895: PPUSH
69896: CALL_OW 12
69900: PUSH
69901: LD_INT 0
69903: PUSH
69904: LD_INT 0
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: ST_TO_ADDR
// animal := CreateHuman ;
69913: LD_ADDR_VAR 0 12
69917: PUSH
69918: CALL_OW 44
69922: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69923: LD_VAR 0 12
69927: PPUSH
69928: LD_VAR 0 8
69932: PPUSH
69933: LD_INT 0
69935: PPUSH
69936: CALL 71775 0 3
// end ;
69940: GO 69838
69942: POP
69943: POP
// if enchidnas then
69944: LD_VAR 0 4
69948: IFFALSE 70015
// for i = 1 to enchidnas do
69950: LD_ADDR_VAR 0 11
69954: PUSH
69955: DOUBLE
69956: LD_INT 1
69958: DEC
69959: ST_TO_ADDR
69960: LD_VAR 0 4
69964: PUSH
69965: FOR_TO
69966: IFFALSE 70013
// begin hc_class = 13 ;
69968: LD_ADDR_OWVAR 28
69972: PUSH
69973: LD_INT 13
69975: ST_TO_ADDR
// hc_gallery =  ;
69976: LD_ADDR_OWVAR 33
69980: PUSH
69981: LD_STRING 
69983: ST_TO_ADDR
// animal := CreateHuman ;
69984: LD_ADDR_VAR 0 12
69988: PUSH
69989: CALL_OW 44
69993: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69994: LD_VAR 0 12
69998: PPUSH
69999: LD_VAR 0 8
70003: PPUSH
70004: LD_INT 0
70006: PPUSH
70007: CALL 71775 0 3
// end ;
70011: GO 69965
70013: POP
70014: POP
// if fishes then
70015: LD_VAR 0 7
70019: IFFALSE 70086
// for i = 1 to fishes do
70021: LD_ADDR_VAR 0 11
70025: PUSH
70026: DOUBLE
70027: LD_INT 1
70029: DEC
70030: ST_TO_ADDR
70031: LD_VAR 0 7
70035: PUSH
70036: FOR_TO
70037: IFFALSE 70084
// begin hc_class = 20 ;
70039: LD_ADDR_OWVAR 28
70043: PUSH
70044: LD_INT 20
70046: ST_TO_ADDR
// hc_gallery =  ;
70047: LD_ADDR_OWVAR 33
70051: PUSH
70052: LD_STRING 
70054: ST_TO_ADDR
// animal := CreateHuman ;
70055: LD_ADDR_VAR 0 12
70059: PUSH
70060: CALL_OW 44
70064: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70065: LD_VAR 0 12
70069: PPUSH
70070: LD_VAR 0 9
70074: PPUSH
70075: LD_INT 0
70077: PPUSH
70078: CALL 71775 0 3
// end ;
70082: GO 70036
70084: POP
70085: POP
// end ;
70086: LD_VAR 0 10
70090: RET
// export function WantHeal ( sci , unit ) ; begin
70091: LD_INT 0
70093: PPUSH
// if GetTaskList ( sci ) > 0 then
70094: LD_VAR 0 1
70098: PPUSH
70099: CALL_OW 437
70103: PUSH
70104: LD_INT 0
70106: GREATER
70107: IFFALSE 70177
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70109: LD_VAR 0 1
70113: PPUSH
70114: CALL_OW 437
70118: PUSH
70119: LD_INT 1
70121: ARRAY
70122: PUSH
70123: LD_INT 1
70125: ARRAY
70126: PUSH
70127: LD_STRING l
70129: EQUAL
70130: PUSH
70131: LD_VAR 0 1
70135: PPUSH
70136: CALL_OW 437
70140: PUSH
70141: LD_INT 1
70143: ARRAY
70144: PUSH
70145: LD_INT 4
70147: ARRAY
70148: PUSH
70149: LD_VAR 0 2
70153: EQUAL
70154: AND
70155: IFFALSE 70167
// result := true else
70157: LD_ADDR_VAR 0 3
70161: PUSH
70162: LD_INT 1
70164: ST_TO_ADDR
70165: GO 70175
// result := false ;
70167: LD_ADDR_VAR 0 3
70171: PUSH
70172: LD_INT 0
70174: ST_TO_ADDR
// end else
70175: GO 70185
// result := false ;
70177: LD_ADDR_VAR 0 3
70181: PUSH
70182: LD_INT 0
70184: ST_TO_ADDR
// end ;
70185: LD_VAR 0 3
70189: RET
// export function HealTarget ( sci ) ; begin
70190: LD_INT 0
70192: PPUSH
// if not sci then
70193: LD_VAR 0 1
70197: NOT
70198: IFFALSE 70202
// exit ;
70200: GO 70267
// result := 0 ;
70202: LD_ADDR_VAR 0 2
70206: PUSH
70207: LD_INT 0
70209: ST_TO_ADDR
// if GetTaskList ( sci ) then
70210: LD_VAR 0 1
70214: PPUSH
70215: CALL_OW 437
70219: IFFALSE 70267
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70221: LD_VAR 0 1
70225: PPUSH
70226: CALL_OW 437
70230: PUSH
70231: LD_INT 1
70233: ARRAY
70234: PUSH
70235: LD_INT 1
70237: ARRAY
70238: PUSH
70239: LD_STRING l
70241: EQUAL
70242: IFFALSE 70267
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70244: LD_ADDR_VAR 0 2
70248: PUSH
70249: LD_VAR 0 1
70253: PPUSH
70254: CALL_OW 437
70258: PUSH
70259: LD_INT 1
70261: ARRAY
70262: PUSH
70263: LD_INT 4
70265: ARRAY
70266: ST_TO_ADDR
// end ;
70267: LD_VAR 0 2
70271: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70272: LD_INT 0
70274: PPUSH
70275: PPUSH
70276: PPUSH
70277: PPUSH
// if not base_units then
70278: LD_VAR 0 1
70282: NOT
70283: IFFALSE 70287
// exit ;
70285: GO 70374
// result := false ;
70287: LD_ADDR_VAR 0 2
70291: PUSH
70292: LD_INT 0
70294: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70295: LD_ADDR_VAR 0 5
70299: PUSH
70300: LD_VAR 0 1
70304: PPUSH
70305: LD_INT 21
70307: PUSH
70308: LD_INT 3
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PPUSH
70315: CALL_OW 72
70319: ST_TO_ADDR
// if not tmp then
70320: LD_VAR 0 5
70324: NOT
70325: IFFALSE 70329
// exit ;
70327: GO 70374
// for i in tmp do
70329: LD_ADDR_VAR 0 3
70333: PUSH
70334: LD_VAR 0 5
70338: PUSH
70339: FOR_IN
70340: IFFALSE 70372
// begin result := EnemyInRange ( i , 22 ) ;
70342: LD_ADDR_VAR 0 2
70346: PUSH
70347: LD_VAR 0 3
70351: PPUSH
70352: LD_INT 22
70354: PPUSH
70355: CALL 68610 0 2
70359: ST_TO_ADDR
// if result then
70360: LD_VAR 0 2
70364: IFFALSE 70370
// exit ;
70366: POP
70367: POP
70368: GO 70374
// end ;
70370: GO 70339
70372: POP
70373: POP
// end ;
70374: LD_VAR 0 2
70378: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70379: LD_INT 0
70381: PPUSH
70382: PPUSH
// if not units then
70383: LD_VAR 0 1
70387: NOT
70388: IFFALSE 70392
// exit ;
70390: GO 70462
// result := [ ] ;
70392: LD_ADDR_VAR 0 3
70396: PUSH
70397: EMPTY
70398: ST_TO_ADDR
// for i in units do
70399: LD_ADDR_VAR 0 4
70403: PUSH
70404: LD_VAR 0 1
70408: PUSH
70409: FOR_IN
70410: IFFALSE 70460
// if GetTag ( i ) = tag then
70412: LD_VAR 0 4
70416: PPUSH
70417: CALL_OW 110
70421: PUSH
70422: LD_VAR 0 2
70426: EQUAL
70427: IFFALSE 70458
// result := Replace ( result , result + 1 , i ) ;
70429: LD_ADDR_VAR 0 3
70433: PUSH
70434: LD_VAR 0 3
70438: PPUSH
70439: LD_VAR 0 3
70443: PUSH
70444: LD_INT 1
70446: PLUS
70447: PPUSH
70448: LD_VAR 0 4
70452: PPUSH
70453: CALL_OW 1
70457: ST_TO_ADDR
70458: GO 70409
70460: POP
70461: POP
// end ;
70462: LD_VAR 0 3
70466: RET
// export function IsDriver ( un ) ; begin
70467: LD_INT 0
70469: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70470: LD_ADDR_VAR 0 2
70474: PUSH
70475: LD_VAR 0 1
70479: PUSH
70480: LD_INT 55
70482: PUSH
70483: EMPTY
70484: LIST
70485: PPUSH
70486: CALL_OW 69
70490: IN
70491: ST_TO_ADDR
// end ;
70492: LD_VAR 0 2
70496: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70497: LD_INT 0
70499: PPUSH
70500: PPUSH
// list := [ ] ;
70501: LD_ADDR_VAR 0 5
70505: PUSH
70506: EMPTY
70507: ST_TO_ADDR
// case d of 0 :
70508: LD_VAR 0 3
70512: PUSH
70513: LD_INT 0
70515: DOUBLE
70516: EQUAL
70517: IFTRUE 70521
70519: GO 70654
70521: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70522: LD_ADDR_VAR 0 5
70526: PUSH
70527: LD_VAR 0 1
70531: PUSH
70532: LD_INT 4
70534: MINUS
70535: PUSH
70536: LD_VAR 0 2
70540: PUSH
70541: LD_INT 4
70543: MINUS
70544: PUSH
70545: LD_INT 2
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: LIST
70552: PUSH
70553: LD_VAR 0 1
70557: PUSH
70558: LD_INT 3
70560: MINUS
70561: PUSH
70562: LD_VAR 0 2
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: LIST
70574: PUSH
70575: LD_VAR 0 1
70579: PUSH
70580: LD_INT 4
70582: PLUS
70583: PUSH
70584: LD_VAR 0 2
70588: PUSH
70589: LD_INT 4
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: LIST
70596: PUSH
70597: LD_VAR 0 1
70601: PUSH
70602: LD_INT 3
70604: PLUS
70605: PUSH
70606: LD_VAR 0 2
70610: PUSH
70611: LD_INT 3
70613: PLUS
70614: PUSH
70615: LD_INT 5
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: LIST
70622: PUSH
70623: LD_VAR 0 1
70627: PUSH
70628: LD_VAR 0 2
70632: PUSH
70633: LD_INT 4
70635: PLUS
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: LIST
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: ST_TO_ADDR
// end ; 1 :
70652: GO 71352
70654: LD_INT 1
70656: DOUBLE
70657: EQUAL
70658: IFTRUE 70662
70660: GO 70795
70662: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70663: LD_ADDR_VAR 0 5
70667: PUSH
70668: LD_VAR 0 1
70672: PUSH
70673: LD_VAR 0 2
70677: PUSH
70678: LD_INT 4
70680: MINUS
70681: PUSH
70682: LD_INT 3
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: LIST
70689: PUSH
70690: LD_VAR 0 1
70694: PUSH
70695: LD_INT 3
70697: MINUS
70698: PUSH
70699: LD_VAR 0 2
70703: PUSH
70704: LD_INT 3
70706: MINUS
70707: PUSH
70708: LD_INT 2
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: LIST
70715: PUSH
70716: LD_VAR 0 1
70720: PUSH
70721: LD_INT 4
70723: MINUS
70724: PUSH
70725: LD_VAR 0 2
70729: PUSH
70730: LD_INT 1
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: LIST
70737: PUSH
70738: LD_VAR 0 1
70742: PUSH
70743: LD_VAR 0 2
70747: PUSH
70748: LD_INT 3
70750: PLUS
70751: PUSH
70752: LD_INT 0
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: LIST
70759: PUSH
70760: LD_VAR 0 1
70764: PUSH
70765: LD_INT 4
70767: PLUS
70768: PUSH
70769: LD_VAR 0 2
70773: PUSH
70774: LD_INT 4
70776: PLUS
70777: PUSH
70778: LD_INT 5
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: LIST
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: ST_TO_ADDR
// end ; 2 :
70793: GO 71352
70795: LD_INT 2
70797: DOUBLE
70798: EQUAL
70799: IFTRUE 70803
70801: GO 70932
70803: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70804: LD_ADDR_VAR 0 5
70808: PUSH
70809: LD_VAR 0 1
70813: PUSH
70814: LD_VAR 0 2
70818: PUSH
70819: LD_INT 3
70821: MINUS
70822: PUSH
70823: LD_INT 3
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: LIST
70830: PUSH
70831: LD_VAR 0 1
70835: PUSH
70836: LD_INT 4
70838: PLUS
70839: PUSH
70840: LD_VAR 0 2
70844: PUSH
70845: LD_INT 4
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: LIST
70852: PUSH
70853: LD_VAR 0 1
70857: PUSH
70858: LD_VAR 0 2
70862: PUSH
70863: LD_INT 4
70865: PLUS
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: LIST
70874: PUSH
70875: LD_VAR 0 1
70879: PUSH
70880: LD_INT 3
70882: MINUS
70883: PUSH
70884: LD_VAR 0 2
70888: PUSH
70889: LD_INT 1
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: LIST
70896: PUSH
70897: LD_VAR 0 1
70901: PUSH
70902: LD_INT 4
70904: MINUS
70905: PUSH
70906: LD_VAR 0 2
70910: PUSH
70911: LD_INT 4
70913: MINUS
70914: PUSH
70915: LD_INT 2
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: LIST
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: ST_TO_ADDR
// end ; 3 :
70930: GO 71352
70932: LD_INT 3
70934: DOUBLE
70935: EQUAL
70936: IFTRUE 70940
70938: GO 71073
70940: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70941: LD_ADDR_VAR 0 5
70945: PUSH
70946: LD_VAR 0 1
70950: PUSH
70951: LD_INT 3
70953: PLUS
70954: PUSH
70955: LD_VAR 0 2
70959: PUSH
70960: LD_INT 4
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: LIST
70967: PUSH
70968: LD_VAR 0 1
70972: PUSH
70973: LD_INT 4
70975: PLUS
70976: PUSH
70977: LD_VAR 0 2
70981: PUSH
70982: LD_INT 4
70984: PLUS
70985: PUSH
70986: LD_INT 5
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: LIST
70993: PUSH
70994: LD_VAR 0 1
70998: PUSH
70999: LD_INT 4
71001: MINUS
71002: PUSH
71003: LD_VAR 0 2
71007: PUSH
71008: LD_INT 1
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: LIST
71015: PUSH
71016: LD_VAR 0 1
71020: PUSH
71021: LD_VAR 0 2
71025: PUSH
71026: LD_INT 4
71028: MINUS
71029: PUSH
71030: LD_INT 3
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: LIST
71037: PUSH
71038: LD_VAR 0 1
71042: PUSH
71043: LD_INT 3
71045: MINUS
71046: PUSH
71047: LD_VAR 0 2
71051: PUSH
71052: LD_INT 3
71054: MINUS
71055: PUSH
71056: LD_INT 2
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: LIST
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: ST_TO_ADDR
// end ; 4 :
71071: GO 71352
71073: LD_INT 4
71075: DOUBLE
71076: EQUAL
71077: IFTRUE 71081
71079: GO 71214
71081: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71082: LD_ADDR_VAR 0 5
71086: PUSH
71087: LD_VAR 0 1
71091: PUSH
71092: LD_VAR 0 2
71096: PUSH
71097: LD_INT 4
71099: PLUS
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: LIST
71108: PUSH
71109: LD_VAR 0 1
71113: PUSH
71114: LD_INT 3
71116: PLUS
71117: PUSH
71118: LD_VAR 0 2
71122: PUSH
71123: LD_INT 3
71125: PLUS
71126: PUSH
71127: LD_INT 5
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: LIST
71134: PUSH
71135: LD_VAR 0 1
71139: PUSH
71140: LD_INT 4
71142: PLUS
71143: PUSH
71144: LD_VAR 0 2
71148: PUSH
71149: LD_INT 4
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: LIST
71156: PUSH
71157: LD_VAR 0 1
71161: PUSH
71162: LD_VAR 0 2
71166: PUSH
71167: LD_INT 3
71169: MINUS
71170: PUSH
71171: LD_INT 3
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: LIST
71178: PUSH
71179: LD_VAR 0 1
71183: PUSH
71184: LD_INT 4
71186: MINUS
71187: PUSH
71188: LD_VAR 0 2
71192: PUSH
71193: LD_INT 4
71195: MINUS
71196: PUSH
71197: LD_INT 2
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: LIST
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: ST_TO_ADDR
// end ; 5 :
71212: GO 71352
71214: LD_INT 5
71216: DOUBLE
71217: EQUAL
71218: IFTRUE 71222
71220: GO 71351
71222: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71223: LD_ADDR_VAR 0 5
71227: PUSH
71228: LD_VAR 0 1
71232: PUSH
71233: LD_INT 4
71235: MINUS
71236: PUSH
71237: LD_VAR 0 2
71241: PUSH
71242: LD_INT 1
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: LIST
71249: PUSH
71250: LD_VAR 0 1
71254: PUSH
71255: LD_VAR 0 2
71259: PUSH
71260: LD_INT 4
71262: MINUS
71263: PUSH
71264: LD_INT 3
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: LIST
71271: PUSH
71272: LD_VAR 0 1
71276: PUSH
71277: LD_INT 4
71279: PLUS
71280: PUSH
71281: LD_VAR 0 2
71285: PUSH
71286: LD_INT 4
71288: PLUS
71289: PUSH
71290: LD_INT 5
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: LIST
71297: PUSH
71298: LD_VAR 0 1
71302: PUSH
71303: LD_INT 3
71305: PLUS
71306: PUSH
71307: LD_VAR 0 2
71311: PUSH
71312: LD_INT 4
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: LIST
71319: PUSH
71320: LD_VAR 0 1
71324: PUSH
71325: LD_VAR 0 2
71329: PUSH
71330: LD_INT 3
71332: PLUS
71333: PUSH
71334: LD_INT 0
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: LIST
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: ST_TO_ADDR
// end ; end ;
71349: GO 71352
71351: POP
// result := list ;
71352: LD_ADDR_VAR 0 4
71356: PUSH
71357: LD_VAR 0 5
71361: ST_TO_ADDR
// end ;
71362: LD_VAR 0 4
71366: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71367: LD_INT 0
71369: PPUSH
71370: PPUSH
71371: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71372: LD_VAR 0 1
71376: NOT
71377: PUSH
71378: LD_VAR 0 2
71382: PUSH
71383: LD_INT 1
71385: PUSH
71386: LD_INT 2
71388: PUSH
71389: LD_INT 3
71391: PUSH
71392: LD_INT 4
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: IN
71401: NOT
71402: OR
71403: IFFALSE 71407
// exit ;
71405: GO 71499
// tmp := [ ] ;
71407: LD_ADDR_VAR 0 5
71411: PUSH
71412: EMPTY
71413: ST_TO_ADDR
// for i in units do
71414: LD_ADDR_VAR 0 4
71418: PUSH
71419: LD_VAR 0 1
71423: PUSH
71424: FOR_IN
71425: IFFALSE 71468
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71427: LD_ADDR_VAR 0 5
71431: PUSH
71432: LD_VAR 0 5
71436: PPUSH
71437: LD_VAR 0 5
71441: PUSH
71442: LD_INT 1
71444: PLUS
71445: PPUSH
71446: LD_VAR 0 4
71450: PPUSH
71451: LD_VAR 0 2
71455: PPUSH
71456: CALL_OW 259
71460: PPUSH
71461: CALL_OW 2
71465: ST_TO_ADDR
71466: GO 71424
71468: POP
71469: POP
// if not tmp then
71470: LD_VAR 0 5
71474: NOT
71475: IFFALSE 71479
// exit ;
71477: GO 71499
// result := SortListByListDesc ( units , tmp ) ;
71479: LD_ADDR_VAR 0 3
71483: PUSH
71484: LD_VAR 0 1
71488: PPUSH
71489: LD_VAR 0 5
71493: PPUSH
71494: CALL_OW 77
71498: ST_TO_ADDR
// end ;
71499: LD_VAR 0 3
71503: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71504: LD_INT 0
71506: PPUSH
71507: PPUSH
71508: PPUSH
// result := false ;
71509: LD_ADDR_VAR 0 3
71513: PUSH
71514: LD_INT 0
71516: ST_TO_ADDR
// x := GetX ( building ) ;
71517: LD_ADDR_VAR 0 4
71521: PUSH
71522: LD_VAR 0 2
71526: PPUSH
71527: CALL_OW 250
71531: ST_TO_ADDR
// y := GetY ( building ) ;
71532: LD_ADDR_VAR 0 5
71536: PUSH
71537: LD_VAR 0 2
71541: PPUSH
71542: CALL_OW 251
71546: ST_TO_ADDR
// if not building or not x or not y then
71547: LD_VAR 0 2
71551: NOT
71552: PUSH
71553: LD_VAR 0 4
71557: NOT
71558: OR
71559: PUSH
71560: LD_VAR 0 5
71564: NOT
71565: OR
71566: IFFALSE 71570
// exit ;
71568: GO 71662
// if GetTaskList ( unit ) then
71570: LD_VAR 0 1
71574: PPUSH
71575: CALL_OW 437
71579: IFFALSE 71662
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71581: LD_STRING e
71583: PUSH
71584: LD_VAR 0 1
71588: PPUSH
71589: CALL_OW 437
71593: PUSH
71594: LD_INT 1
71596: ARRAY
71597: PUSH
71598: LD_INT 1
71600: ARRAY
71601: EQUAL
71602: PUSH
71603: LD_VAR 0 4
71607: PUSH
71608: LD_VAR 0 1
71612: PPUSH
71613: CALL_OW 437
71617: PUSH
71618: LD_INT 1
71620: ARRAY
71621: PUSH
71622: LD_INT 2
71624: ARRAY
71625: EQUAL
71626: AND
71627: PUSH
71628: LD_VAR 0 5
71632: PUSH
71633: LD_VAR 0 1
71637: PPUSH
71638: CALL_OW 437
71642: PUSH
71643: LD_INT 1
71645: ARRAY
71646: PUSH
71647: LD_INT 3
71649: ARRAY
71650: EQUAL
71651: AND
71652: IFFALSE 71662
// result := true end ;
71654: LD_ADDR_VAR 0 3
71658: PUSH
71659: LD_INT 1
71661: ST_TO_ADDR
// end ;
71662: LD_VAR 0 3
71666: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71667: LD_INT 0
71669: PPUSH
// result := false ;
71670: LD_ADDR_VAR 0 4
71674: PUSH
71675: LD_INT 0
71677: ST_TO_ADDR
// if GetTaskList ( unit ) then
71678: LD_VAR 0 1
71682: PPUSH
71683: CALL_OW 437
71687: IFFALSE 71770
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71689: LD_STRING M
71691: PUSH
71692: LD_VAR 0 1
71696: PPUSH
71697: CALL_OW 437
71701: PUSH
71702: LD_INT 1
71704: ARRAY
71705: PUSH
71706: LD_INT 1
71708: ARRAY
71709: EQUAL
71710: PUSH
71711: LD_VAR 0 2
71715: PUSH
71716: LD_VAR 0 1
71720: PPUSH
71721: CALL_OW 437
71725: PUSH
71726: LD_INT 1
71728: ARRAY
71729: PUSH
71730: LD_INT 2
71732: ARRAY
71733: EQUAL
71734: AND
71735: PUSH
71736: LD_VAR 0 3
71740: PUSH
71741: LD_VAR 0 1
71745: PPUSH
71746: CALL_OW 437
71750: PUSH
71751: LD_INT 1
71753: ARRAY
71754: PUSH
71755: LD_INT 3
71757: ARRAY
71758: EQUAL
71759: AND
71760: IFFALSE 71770
// result := true ;
71762: LD_ADDR_VAR 0 4
71766: PUSH
71767: LD_INT 1
71769: ST_TO_ADDR
// end ; end ;
71770: LD_VAR 0 4
71774: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71775: LD_INT 0
71777: PPUSH
71778: PPUSH
71779: PPUSH
71780: PPUSH
// if not unit or not area then
71781: LD_VAR 0 1
71785: NOT
71786: PUSH
71787: LD_VAR 0 2
71791: NOT
71792: OR
71793: IFFALSE 71797
// exit ;
71795: GO 71961
// tmp := AreaToList ( area , i ) ;
71797: LD_ADDR_VAR 0 6
71801: PUSH
71802: LD_VAR 0 2
71806: PPUSH
71807: LD_VAR 0 5
71811: PPUSH
71812: CALL_OW 517
71816: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71817: LD_ADDR_VAR 0 5
71821: PUSH
71822: DOUBLE
71823: LD_INT 1
71825: DEC
71826: ST_TO_ADDR
71827: LD_VAR 0 6
71831: PUSH
71832: LD_INT 1
71834: ARRAY
71835: PUSH
71836: FOR_TO
71837: IFFALSE 71959
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71839: LD_ADDR_VAR 0 7
71843: PUSH
71844: LD_VAR 0 6
71848: PUSH
71849: LD_INT 1
71851: ARRAY
71852: PUSH
71853: LD_VAR 0 5
71857: ARRAY
71858: PUSH
71859: LD_VAR 0 6
71863: PUSH
71864: LD_INT 2
71866: ARRAY
71867: PUSH
71868: LD_VAR 0 5
71872: ARRAY
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71878: LD_VAR 0 7
71882: PUSH
71883: LD_INT 1
71885: ARRAY
71886: PPUSH
71887: LD_VAR 0 7
71891: PUSH
71892: LD_INT 2
71894: ARRAY
71895: PPUSH
71896: CALL_OW 428
71900: PUSH
71901: LD_INT 0
71903: EQUAL
71904: IFFALSE 71957
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71906: LD_VAR 0 1
71910: PPUSH
71911: LD_VAR 0 7
71915: PUSH
71916: LD_INT 1
71918: ARRAY
71919: PPUSH
71920: LD_VAR 0 7
71924: PUSH
71925: LD_INT 2
71927: ARRAY
71928: PPUSH
71929: LD_VAR 0 3
71933: PPUSH
71934: CALL_OW 48
// result := IsPlaced ( unit ) ;
71938: LD_ADDR_VAR 0 4
71942: PUSH
71943: LD_VAR 0 1
71947: PPUSH
71948: CALL_OW 305
71952: ST_TO_ADDR
// exit ;
71953: POP
71954: POP
71955: GO 71961
// end ; end ;
71957: GO 71836
71959: POP
71960: POP
// end ;
71961: LD_VAR 0 4
71965: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71966: LD_INT 0
71968: PPUSH
71969: PPUSH
71970: PPUSH
// if not side or side > 8 then
71971: LD_VAR 0 1
71975: NOT
71976: PUSH
71977: LD_VAR 0 1
71981: PUSH
71982: LD_INT 8
71984: GREATER
71985: OR
71986: IFFALSE 71990
// exit ;
71988: GO 72177
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71990: LD_ADDR_VAR 0 4
71994: PUSH
71995: LD_INT 22
71997: PUSH
71998: LD_VAR 0 1
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 21
72009: PUSH
72010: LD_INT 3
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PPUSH
72021: CALL_OW 69
72025: ST_TO_ADDR
// if not tmp then
72026: LD_VAR 0 4
72030: NOT
72031: IFFALSE 72035
// exit ;
72033: GO 72177
// enable_addtolog := true ;
72035: LD_ADDR_OWVAR 81
72039: PUSH
72040: LD_INT 1
72042: ST_TO_ADDR
// AddToLog ( [ ) ;
72043: LD_STRING [
72045: PPUSH
72046: CALL_OW 561
// for i in tmp do
72050: LD_ADDR_VAR 0 3
72054: PUSH
72055: LD_VAR 0 4
72059: PUSH
72060: FOR_IN
72061: IFFALSE 72168
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72063: LD_STRING [
72065: PUSH
72066: LD_VAR 0 3
72070: PPUSH
72071: CALL_OW 266
72075: STR
72076: PUSH
72077: LD_STRING , 
72079: STR
72080: PUSH
72081: LD_VAR 0 3
72085: PPUSH
72086: CALL_OW 250
72090: STR
72091: PUSH
72092: LD_STRING , 
72094: STR
72095: PUSH
72096: LD_VAR 0 3
72100: PPUSH
72101: CALL_OW 251
72105: STR
72106: PUSH
72107: LD_STRING , 
72109: STR
72110: PUSH
72111: LD_VAR 0 3
72115: PPUSH
72116: CALL_OW 254
72120: STR
72121: PUSH
72122: LD_STRING , 
72124: STR
72125: PUSH
72126: LD_VAR 0 3
72130: PPUSH
72131: LD_INT 1
72133: PPUSH
72134: CALL_OW 268
72138: STR
72139: PUSH
72140: LD_STRING , 
72142: STR
72143: PUSH
72144: LD_VAR 0 3
72148: PPUSH
72149: LD_INT 2
72151: PPUSH
72152: CALL_OW 268
72156: STR
72157: PUSH
72158: LD_STRING ],
72160: STR
72161: PPUSH
72162: CALL_OW 561
// end ;
72166: GO 72060
72168: POP
72169: POP
// AddToLog ( ]; ) ;
72170: LD_STRING ];
72172: PPUSH
72173: CALL_OW 561
// end ;
72177: LD_VAR 0 2
72181: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72182: LD_INT 0
72184: PPUSH
72185: PPUSH
72186: PPUSH
72187: PPUSH
72188: PPUSH
// if not area or not rate or not max then
72189: LD_VAR 0 1
72193: NOT
72194: PUSH
72195: LD_VAR 0 2
72199: NOT
72200: OR
72201: PUSH
72202: LD_VAR 0 4
72206: NOT
72207: OR
72208: IFFALSE 72212
// exit ;
72210: GO 72404
// while 1 do
72212: LD_INT 1
72214: IFFALSE 72404
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72216: LD_ADDR_VAR 0 9
72220: PUSH
72221: LD_VAR 0 1
72225: PPUSH
72226: LD_INT 1
72228: PPUSH
72229: CALL_OW 287
72233: PUSH
72234: LD_INT 10
72236: MUL
72237: ST_TO_ADDR
// r := rate / 10 ;
72238: LD_ADDR_VAR 0 7
72242: PUSH
72243: LD_VAR 0 2
72247: PUSH
72248: LD_INT 10
72250: DIVREAL
72251: ST_TO_ADDR
// time := 1 1$00 ;
72252: LD_ADDR_VAR 0 8
72256: PUSH
72257: LD_INT 2100
72259: ST_TO_ADDR
// if amount < min then
72260: LD_VAR 0 9
72264: PUSH
72265: LD_VAR 0 3
72269: LESS
72270: IFFALSE 72288
// r := r * 2 else
72272: LD_ADDR_VAR 0 7
72276: PUSH
72277: LD_VAR 0 7
72281: PUSH
72282: LD_INT 2
72284: MUL
72285: ST_TO_ADDR
72286: GO 72314
// if amount > max then
72288: LD_VAR 0 9
72292: PUSH
72293: LD_VAR 0 4
72297: GREATER
72298: IFFALSE 72314
// r := r / 2 ;
72300: LD_ADDR_VAR 0 7
72304: PUSH
72305: LD_VAR 0 7
72309: PUSH
72310: LD_INT 2
72312: DIVREAL
72313: ST_TO_ADDR
// time := time / r ;
72314: LD_ADDR_VAR 0 8
72318: PUSH
72319: LD_VAR 0 8
72323: PUSH
72324: LD_VAR 0 7
72328: DIVREAL
72329: ST_TO_ADDR
// if time < 0 then
72330: LD_VAR 0 8
72334: PUSH
72335: LD_INT 0
72337: LESS
72338: IFFALSE 72355
// time := time * - 1 ;
72340: LD_ADDR_VAR 0 8
72344: PUSH
72345: LD_VAR 0 8
72349: PUSH
72350: LD_INT 1
72352: NEG
72353: MUL
72354: ST_TO_ADDR
// wait ( time ) ;
72355: LD_VAR 0 8
72359: PPUSH
72360: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72364: LD_INT 35
72366: PPUSH
72367: LD_INT 875
72369: PPUSH
72370: CALL_OW 12
72374: PPUSH
72375: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72379: LD_INT 1
72381: PPUSH
72382: LD_INT 5
72384: PPUSH
72385: CALL_OW 12
72389: PPUSH
72390: LD_VAR 0 1
72394: PPUSH
72395: LD_INT 1
72397: PPUSH
72398: CALL_OW 55
// end ;
72402: GO 72212
// end ;
72404: LD_VAR 0 5
72408: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72409: LD_INT 0
72411: PPUSH
72412: PPUSH
72413: PPUSH
72414: PPUSH
72415: PPUSH
72416: PPUSH
72417: PPUSH
72418: PPUSH
// if not turrets or not factories then
72419: LD_VAR 0 1
72423: NOT
72424: PUSH
72425: LD_VAR 0 2
72429: NOT
72430: OR
72431: IFFALSE 72435
// exit ;
72433: GO 72742
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72435: LD_ADDR_VAR 0 10
72439: PUSH
72440: LD_INT 5
72442: PUSH
72443: LD_INT 6
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 2
72452: PUSH
72453: LD_INT 4
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 3
72462: PUSH
72463: LD_INT 5
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 24
72477: PUSH
72478: LD_INT 25
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 23
72487: PUSH
72488: LD_INT 27
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 42
72501: PUSH
72502: LD_INT 43
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 44
72511: PUSH
72512: LD_INT 46
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 45
72521: PUSH
72522: LD_INT 47
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: LIST
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: LIST
72538: ST_TO_ADDR
// result := [ ] ;
72539: LD_ADDR_VAR 0 3
72543: PUSH
72544: EMPTY
72545: ST_TO_ADDR
// for i in turrets do
72546: LD_ADDR_VAR 0 4
72550: PUSH
72551: LD_VAR 0 1
72555: PUSH
72556: FOR_IN
72557: IFFALSE 72740
// begin nat := GetNation ( i ) ;
72559: LD_ADDR_VAR 0 7
72563: PUSH
72564: LD_VAR 0 4
72568: PPUSH
72569: CALL_OW 248
72573: ST_TO_ADDR
// weapon := 0 ;
72574: LD_ADDR_VAR 0 8
72578: PUSH
72579: LD_INT 0
72581: ST_TO_ADDR
// if not nat then
72582: LD_VAR 0 7
72586: NOT
72587: IFFALSE 72591
// continue ;
72589: GO 72556
// for j in list [ nat ] do
72591: LD_ADDR_VAR 0 5
72595: PUSH
72596: LD_VAR 0 10
72600: PUSH
72601: LD_VAR 0 7
72605: ARRAY
72606: PUSH
72607: FOR_IN
72608: IFFALSE 72649
// if GetBWeapon ( i ) = j [ 1 ] then
72610: LD_VAR 0 4
72614: PPUSH
72615: CALL_OW 269
72619: PUSH
72620: LD_VAR 0 5
72624: PUSH
72625: LD_INT 1
72627: ARRAY
72628: EQUAL
72629: IFFALSE 72647
// begin weapon := j [ 2 ] ;
72631: LD_ADDR_VAR 0 8
72635: PUSH
72636: LD_VAR 0 5
72640: PUSH
72641: LD_INT 2
72643: ARRAY
72644: ST_TO_ADDR
// break ;
72645: GO 72649
// end ;
72647: GO 72607
72649: POP
72650: POP
// if not weapon then
72651: LD_VAR 0 8
72655: NOT
72656: IFFALSE 72660
// continue ;
72658: GO 72556
// for k in factories do
72660: LD_ADDR_VAR 0 6
72664: PUSH
72665: LD_VAR 0 2
72669: PUSH
72670: FOR_IN
72671: IFFALSE 72736
// begin weapons := AvailableWeaponList ( k ) ;
72673: LD_ADDR_VAR 0 9
72677: PUSH
72678: LD_VAR 0 6
72682: PPUSH
72683: CALL_OW 478
72687: ST_TO_ADDR
// if not weapons then
72688: LD_VAR 0 9
72692: NOT
72693: IFFALSE 72697
// continue ;
72695: GO 72670
// if weapon in weapons then
72697: LD_VAR 0 8
72701: PUSH
72702: LD_VAR 0 9
72706: IN
72707: IFFALSE 72734
// begin result := [ i , weapon ] ;
72709: LD_ADDR_VAR 0 3
72713: PUSH
72714: LD_VAR 0 4
72718: PUSH
72719: LD_VAR 0 8
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: ST_TO_ADDR
// exit ;
72728: POP
72729: POP
72730: POP
72731: POP
72732: GO 72742
// end ; end ;
72734: GO 72670
72736: POP
72737: POP
// end ;
72738: GO 72556
72740: POP
72741: POP
// end ;
72742: LD_VAR 0 3
72746: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72747: LD_INT 0
72749: PPUSH
// if not side or side > 8 then
72750: LD_VAR 0 3
72754: NOT
72755: PUSH
72756: LD_VAR 0 3
72760: PUSH
72761: LD_INT 8
72763: GREATER
72764: OR
72765: IFFALSE 72769
// exit ;
72767: GO 72828
// if not range then
72769: LD_VAR 0 4
72773: NOT
72774: IFFALSE 72785
// range := - 12 ;
72776: LD_ADDR_VAR 0 4
72780: PUSH
72781: LD_INT 12
72783: NEG
72784: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72785: LD_VAR 0 1
72789: PPUSH
72790: LD_VAR 0 2
72794: PPUSH
72795: LD_VAR 0 3
72799: PPUSH
72800: LD_VAR 0 4
72804: PPUSH
72805: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72809: LD_VAR 0 1
72813: PPUSH
72814: LD_VAR 0 2
72818: PPUSH
72819: LD_VAR 0 3
72823: PPUSH
72824: CALL_OW 331
// end ;
72828: LD_VAR 0 5
72832: RET
// export function Video ( mode ) ; begin
72833: LD_INT 0
72835: PPUSH
// ingame_video = mode ;
72836: LD_ADDR_OWVAR 52
72840: PUSH
72841: LD_VAR 0 1
72845: ST_TO_ADDR
// interface_hidden = mode ;
72846: LD_ADDR_OWVAR 54
72850: PUSH
72851: LD_VAR 0 1
72855: ST_TO_ADDR
// end ;
72856: LD_VAR 0 2
72860: RET
// export function Join ( array , element ) ; begin
72861: LD_INT 0
72863: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72864: LD_ADDR_VAR 0 3
72868: PUSH
72869: LD_VAR 0 1
72873: PPUSH
72874: LD_VAR 0 1
72878: PUSH
72879: LD_INT 1
72881: PLUS
72882: PPUSH
72883: LD_VAR 0 2
72887: PPUSH
72888: CALL_OW 1
72892: ST_TO_ADDR
// end ;
72893: LD_VAR 0 3
72897: RET
// export function JoinUnion ( array , element ) ; begin
72898: LD_INT 0
72900: PPUSH
// result := array union element ;
72901: LD_ADDR_VAR 0 3
72905: PUSH
72906: LD_VAR 0 1
72910: PUSH
72911: LD_VAR 0 2
72915: UNION
72916: ST_TO_ADDR
// end ;
72917: LD_VAR 0 3
72921: RET
// export function GetBehemoths ( side ) ; begin
72922: LD_INT 0
72924: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72925: LD_ADDR_VAR 0 2
72929: PUSH
72930: LD_INT 22
72932: PUSH
72933: LD_VAR 0 1
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 31
72944: PUSH
72945: LD_INT 25
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PPUSH
72956: CALL_OW 69
72960: ST_TO_ADDR
// end ;
72961: LD_VAR 0 2
72965: RET
// export function Shuffle ( array ) ; var i , index ; begin
72966: LD_INT 0
72968: PPUSH
72969: PPUSH
72970: PPUSH
// result := [ ] ;
72971: LD_ADDR_VAR 0 2
72975: PUSH
72976: EMPTY
72977: ST_TO_ADDR
// if not array then
72978: LD_VAR 0 1
72982: NOT
72983: IFFALSE 72987
// exit ;
72985: GO 73086
// Randomize ;
72987: CALL_OW 10
// for i = array downto 1 do
72991: LD_ADDR_VAR 0 3
72995: PUSH
72996: DOUBLE
72997: LD_VAR 0 1
73001: INC
73002: ST_TO_ADDR
73003: LD_INT 1
73005: PUSH
73006: FOR_DOWNTO
73007: IFFALSE 73084
// begin index := rand ( 1 , array ) ;
73009: LD_ADDR_VAR 0 4
73013: PUSH
73014: LD_INT 1
73016: PPUSH
73017: LD_VAR 0 1
73021: PPUSH
73022: CALL_OW 12
73026: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73027: LD_ADDR_VAR 0 2
73031: PUSH
73032: LD_VAR 0 2
73036: PPUSH
73037: LD_VAR 0 2
73041: PUSH
73042: LD_INT 1
73044: PLUS
73045: PPUSH
73046: LD_VAR 0 1
73050: PUSH
73051: LD_VAR 0 4
73055: ARRAY
73056: PPUSH
73057: CALL_OW 2
73061: ST_TO_ADDR
// array := Delete ( array , index ) ;
73062: LD_ADDR_VAR 0 1
73066: PUSH
73067: LD_VAR 0 1
73071: PPUSH
73072: LD_VAR 0 4
73076: PPUSH
73077: CALL_OW 3
73081: ST_TO_ADDR
// end ;
73082: GO 73006
73084: POP
73085: POP
// end ;
73086: LD_VAR 0 2
73090: RET
// export function GetBaseMaterials ( base ) ; begin
73091: LD_INT 0
73093: PPUSH
// result := [ 0 , 0 , 0 ] ;
73094: LD_ADDR_VAR 0 2
73098: PUSH
73099: LD_INT 0
73101: PUSH
73102: LD_INT 0
73104: PUSH
73105: LD_INT 0
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: LIST
73112: ST_TO_ADDR
// if not base then
73113: LD_VAR 0 1
73117: NOT
73118: IFFALSE 73122
// exit ;
73120: GO 73171
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73122: LD_ADDR_VAR 0 2
73126: PUSH
73127: LD_VAR 0 1
73131: PPUSH
73132: LD_INT 1
73134: PPUSH
73135: CALL_OW 275
73139: PUSH
73140: LD_VAR 0 1
73144: PPUSH
73145: LD_INT 2
73147: PPUSH
73148: CALL_OW 275
73152: PUSH
73153: LD_VAR 0 1
73157: PPUSH
73158: LD_INT 3
73160: PPUSH
73161: CALL_OW 275
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: LIST
73170: ST_TO_ADDR
// end ;
73171: LD_VAR 0 2
73175: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73176: LD_INT 0
73178: PPUSH
73179: PPUSH
// result := array ;
73180: LD_ADDR_VAR 0 3
73184: PUSH
73185: LD_VAR 0 1
73189: ST_TO_ADDR
// if size > 0 then
73190: LD_VAR 0 2
73194: PUSH
73195: LD_INT 0
73197: GREATER
73198: IFFALSE 73244
// for i := array downto size do
73200: LD_ADDR_VAR 0 4
73204: PUSH
73205: DOUBLE
73206: LD_VAR 0 1
73210: INC
73211: ST_TO_ADDR
73212: LD_VAR 0 2
73216: PUSH
73217: FOR_DOWNTO
73218: IFFALSE 73242
// result := Delete ( result , result ) ;
73220: LD_ADDR_VAR 0 3
73224: PUSH
73225: LD_VAR 0 3
73229: PPUSH
73230: LD_VAR 0 3
73234: PPUSH
73235: CALL_OW 3
73239: ST_TO_ADDR
73240: GO 73217
73242: POP
73243: POP
// end ;
73244: LD_VAR 0 3
73248: RET
// export function ComExit ( unit ) ; var tmp ; begin
73249: LD_INT 0
73251: PPUSH
73252: PPUSH
// if not IsInUnit ( unit ) then
73253: LD_VAR 0 1
73257: PPUSH
73258: CALL_OW 310
73262: NOT
73263: IFFALSE 73267
// exit ;
73265: GO 73327
// tmp := IsInUnit ( unit ) ;
73267: LD_ADDR_VAR 0 3
73271: PUSH
73272: LD_VAR 0 1
73276: PPUSH
73277: CALL_OW 310
73281: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73282: LD_VAR 0 3
73286: PPUSH
73287: CALL_OW 247
73291: PUSH
73292: LD_INT 2
73294: EQUAL
73295: IFFALSE 73308
// ComExitVehicle ( unit ) else
73297: LD_VAR 0 1
73301: PPUSH
73302: CALL_OW 121
73306: GO 73317
// ComExitBuilding ( unit ) ;
73308: LD_VAR 0 1
73312: PPUSH
73313: CALL_OW 122
// result := tmp ;
73317: LD_ADDR_VAR 0 2
73321: PUSH
73322: LD_VAR 0 3
73326: ST_TO_ADDR
// end ;
73327: LD_VAR 0 2
73331: RET
// export function ComExitAll ( units ) ; var i ; begin
73332: LD_INT 0
73334: PPUSH
73335: PPUSH
// if not units then
73336: LD_VAR 0 1
73340: NOT
73341: IFFALSE 73345
// exit ;
73343: GO 73371
// for i in units do
73345: LD_ADDR_VAR 0 3
73349: PUSH
73350: LD_VAR 0 1
73354: PUSH
73355: FOR_IN
73356: IFFALSE 73369
// ComExit ( i ) ;
73358: LD_VAR 0 3
73362: PPUSH
73363: CALL 73249 0 1
73367: GO 73355
73369: POP
73370: POP
// end ;
73371: LD_VAR 0 2
73375: RET
// export function ResetHc ; begin
73376: LD_INT 0
73378: PPUSH
// InitHc ;
73379: CALL_OW 19
// hc_importance := 0 ;
73383: LD_ADDR_OWVAR 32
73387: PUSH
73388: LD_INT 0
73390: ST_TO_ADDR
// end ;
73391: LD_VAR 0 1
73395: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73396: LD_INT 0
73398: PPUSH
73399: PPUSH
73400: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73401: LD_ADDR_VAR 0 6
73405: PUSH
73406: LD_VAR 0 1
73410: PUSH
73411: LD_VAR 0 3
73415: PLUS
73416: PUSH
73417: LD_INT 2
73419: DIV
73420: ST_TO_ADDR
// if _x < 0 then
73421: LD_VAR 0 6
73425: PUSH
73426: LD_INT 0
73428: LESS
73429: IFFALSE 73446
// _x := _x * - 1 ;
73431: LD_ADDR_VAR 0 6
73435: PUSH
73436: LD_VAR 0 6
73440: PUSH
73441: LD_INT 1
73443: NEG
73444: MUL
73445: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73446: LD_ADDR_VAR 0 7
73450: PUSH
73451: LD_VAR 0 2
73455: PUSH
73456: LD_VAR 0 4
73460: PLUS
73461: PUSH
73462: LD_INT 2
73464: DIV
73465: ST_TO_ADDR
// if _y < 0 then
73466: LD_VAR 0 7
73470: PUSH
73471: LD_INT 0
73473: LESS
73474: IFFALSE 73491
// _y := _y * - 1 ;
73476: LD_ADDR_VAR 0 7
73480: PUSH
73481: LD_VAR 0 7
73485: PUSH
73486: LD_INT 1
73488: NEG
73489: MUL
73490: ST_TO_ADDR
// result := [ _x , _y ] ;
73491: LD_ADDR_VAR 0 5
73495: PUSH
73496: LD_VAR 0 6
73500: PUSH
73501: LD_VAR 0 7
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: ST_TO_ADDR
// end ;
73510: LD_VAR 0 5
73514: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73515: LD_INT 0
73517: PPUSH
73518: PPUSH
73519: PPUSH
73520: PPUSH
// task := GetTaskList ( unit ) ;
73521: LD_ADDR_VAR 0 7
73525: PUSH
73526: LD_VAR 0 1
73530: PPUSH
73531: CALL_OW 437
73535: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73536: LD_VAR 0 7
73540: NOT
73541: PUSH
73542: LD_VAR 0 1
73546: PPUSH
73547: LD_VAR 0 2
73551: PPUSH
73552: CALL_OW 308
73556: NOT
73557: AND
73558: IFFALSE 73562
// exit ;
73560: GO 73680
// if IsInArea ( unit , area ) then
73562: LD_VAR 0 1
73566: PPUSH
73567: LD_VAR 0 2
73571: PPUSH
73572: CALL_OW 308
73576: IFFALSE 73594
// begin ComMoveToArea ( unit , goAway ) ;
73578: LD_VAR 0 1
73582: PPUSH
73583: LD_VAR 0 3
73587: PPUSH
73588: CALL_OW 113
// exit ;
73592: GO 73680
// end ; if task [ 1 ] [ 1 ] <> M then
73594: LD_VAR 0 7
73598: PUSH
73599: LD_INT 1
73601: ARRAY
73602: PUSH
73603: LD_INT 1
73605: ARRAY
73606: PUSH
73607: LD_STRING M
73609: NONEQUAL
73610: IFFALSE 73614
// exit ;
73612: GO 73680
// x := task [ 1 ] [ 2 ] ;
73614: LD_ADDR_VAR 0 5
73618: PUSH
73619: LD_VAR 0 7
73623: PUSH
73624: LD_INT 1
73626: ARRAY
73627: PUSH
73628: LD_INT 2
73630: ARRAY
73631: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73632: LD_ADDR_VAR 0 6
73636: PUSH
73637: LD_VAR 0 7
73641: PUSH
73642: LD_INT 1
73644: ARRAY
73645: PUSH
73646: LD_INT 3
73648: ARRAY
73649: ST_TO_ADDR
// if InArea ( x , y , area ) then
73650: LD_VAR 0 5
73654: PPUSH
73655: LD_VAR 0 6
73659: PPUSH
73660: LD_VAR 0 2
73664: PPUSH
73665: CALL_OW 309
73669: IFFALSE 73680
// ComStop ( unit ) ;
73671: LD_VAR 0 1
73675: PPUSH
73676: CALL_OW 141
// end ;
73680: LD_VAR 0 4
73684: RET
// export function Abs ( value ) ; begin
73685: LD_INT 0
73687: PPUSH
// result := value ;
73688: LD_ADDR_VAR 0 2
73692: PUSH
73693: LD_VAR 0 1
73697: ST_TO_ADDR
// if value < 0 then
73698: LD_VAR 0 1
73702: PUSH
73703: LD_INT 0
73705: LESS
73706: IFFALSE 73723
// result := value * - 1 ;
73708: LD_ADDR_VAR 0 2
73712: PUSH
73713: LD_VAR 0 1
73717: PUSH
73718: LD_INT 1
73720: NEG
73721: MUL
73722: ST_TO_ADDR
// end ;
73723: LD_VAR 0 2
73727: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73728: LD_INT 0
73730: PPUSH
73731: PPUSH
73732: PPUSH
73733: PPUSH
73734: PPUSH
73735: PPUSH
73736: PPUSH
73737: PPUSH
// if not unit or not building then
73738: LD_VAR 0 1
73742: NOT
73743: PUSH
73744: LD_VAR 0 2
73748: NOT
73749: OR
73750: IFFALSE 73754
// exit ;
73752: GO 73980
// x := GetX ( building ) ;
73754: LD_ADDR_VAR 0 4
73758: PUSH
73759: LD_VAR 0 2
73763: PPUSH
73764: CALL_OW 250
73768: ST_TO_ADDR
// y := GetY ( building ) ;
73769: LD_ADDR_VAR 0 6
73773: PUSH
73774: LD_VAR 0 2
73778: PPUSH
73779: CALL_OW 251
73783: ST_TO_ADDR
// d := GetDir ( building ) ;
73784: LD_ADDR_VAR 0 8
73788: PUSH
73789: LD_VAR 0 2
73793: PPUSH
73794: CALL_OW 254
73798: ST_TO_ADDR
// r := 4 ;
73799: LD_ADDR_VAR 0 9
73803: PUSH
73804: LD_INT 4
73806: ST_TO_ADDR
// for i := 1 to 5 do
73807: LD_ADDR_VAR 0 10
73811: PUSH
73812: DOUBLE
73813: LD_INT 1
73815: DEC
73816: ST_TO_ADDR
73817: LD_INT 5
73819: PUSH
73820: FOR_TO
73821: IFFALSE 73978
// begin _x := ShiftX ( x , d , r + i ) ;
73823: LD_ADDR_VAR 0 5
73827: PUSH
73828: LD_VAR 0 4
73832: PPUSH
73833: LD_VAR 0 8
73837: PPUSH
73838: LD_VAR 0 9
73842: PUSH
73843: LD_VAR 0 10
73847: PLUS
73848: PPUSH
73849: CALL_OW 272
73853: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73854: LD_ADDR_VAR 0 7
73858: PUSH
73859: LD_VAR 0 6
73863: PPUSH
73864: LD_VAR 0 8
73868: PPUSH
73869: LD_VAR 0 9
73873: PUSH
73874: LD_VAR 0 10
73878: PLUS
73879: PPUSH
73880: CALL_OW 273
73884: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73885: LD_VAR 0 5
73889: PPUSH
73890: LD_VAR 0 7
73894: PPUSH
73895: CALL_OW 488
73899: PUSH
73900: LD_VAR 0 5
73904: PPUSH
73905: LD_VAR 0 7
73909: PPUSH
73910: CALL_OW 428
73914: PPUSH
73915: CALL_OW 247
73919: PUSH
73920: LD_INT 3
73922: PUSH
73923: LD_INT 2
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: IN
73930: NOT
73931: AND
73932: IFFALSE 73976
// begin ComMoveXY ( unit , _x , _y ) ;
73934: LD_VAR 0 1
73938: PPUSH
73939: LD_VAR 0 5
73943: PPUSH
73944: LD_VAR 0 7
73948: PPUSH
73949: CALL_OW 111
// result := [ _x , _y ] ;
73953: LD_ADDR_VAR 0 3
73957: PUSH
73958: LD_VAR 0 5
73962: PUSH
73963: LD_VAR 0 7
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: ST_TO_ADDR
// exit ;
73972: POP
73973: POP
73974: GO 73980
// end ; end ;
73976: GO 73820
73978: POP
73979: POP
// end ;
73980: LD_VAR 0 3
73984: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73985: LD_INT 0
73987: PPUSH
73988: PPUSH
73989: PPUSH
// result := 0 ;
73990: LD_ADDR_VAR 0 3
73994: PUSH
73995: LD_INT 0
73997: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73998: LD_VAR 0 1
74002: PUSH
74003: LD_INT 0
74005: LESS
74006: PUSH
74007: LD_VAR 0 1
74011: PUSH
74012: LD_INT 8
74014: GREATER
74015: OR
74016: PUSH
74017: LD_VAR 0 2
74021: PUSH
74022: LD_INT 0
74024: LESS
74025: OR
74026: PUSH
74027: LD_VAR 0 2
74031: PUSH
74032: LD_INT 8
74034: GREATER
74035: OR
74036: IFFALSE 74040
// exit ;
74038: GO 74115
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74040: LD_ADDR_VAR 0 4
74044: PUSH
74045: LD_INT 22
74047: PUSH
74048: LD_VAR 0 2
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: PPUSH
74057: CALL_OW 69
74061: PUSH
74062: FOR_IN
74063: IFFALSE 74113
// begin un := UnitShoot ( i ) ;
74065: LD_ADDR_VAR 0 5
74069: PUSH
74070: LD_VAR 0 4
74074: PPUSH
74075: CALL_OW 504
74079: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74080: LD_VAR 0 5
74084: PPUSH
74085: CALL_OW 255
74089: PUSH
74090: LD_VAR 0 1
74094: EQUAL
74095: IFFALSE 74111
// begin result := un ;
74097: LD_ADDR_VAR 0 3
74101: PUSH
74102: LD_VAR 0 5
74106: ST_TO_ADDR
// exit ;
74107: POP
74108: POP
74109: GO 74115
// end ; end ;
74111: GO 74062
74113: POP
74114: POP
// end ;
74115: LD_VAR 0 3
74119: RET
// export function GetCargoBay ( units ) ; begin
74120: LD_INT 0
74122: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74123: LD_ADDR_VAR 0 2
74127: PUSH
74128: LD_VAR 0 1
74132: PPUSH
74133: LD_INT 2
74135: PUSH
74136: LD_INT 34
74138: PUSH
74139: LD_INT 12
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 34
74148: PUSH
74149: LD_INT 51
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 34
74158: PUSH
74159: LD_INT 32
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 34
74168: PUSH
74169: LD_EXP 134
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: LIST
74182: LIST
74183: LIST
74184: PPUSH
74185: CALL_OW 72
74189: ST_TO_ADDR
// end ;
74190: LD_VAR 0 2
74194: RET
// export function Negate ( value ) ; begin
74195: LD_INT 0
74197: PPUSH
// result := not value ;
74198: LD_ADDR_VAR 0 2
74202: PUSH
74203: LD_VAR 0 1
74207: NOT
74208: ST_TO_ADDR
// end ;
74209: LD_VAR 0 2
74213: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74214: LD_INT 0
74216: PPUSH
// if x1 = x2 then
74217: LD_VAR 0 1
74221: PUSH
74222: LD_VAR 0 3
74226: EQUAL
74227: IFFALSE 74261
// begin if y1 > y2 then
74229: LD_VAR 0 2
74233: PUSH
74234: LD_VAR 0 4
74238: GREATER
74239: IFFALSE 74251
// result := 0 else
74241: LD_ADDR_VAR 0 5
74245: PUSH
74246: LD_INT 0
74248: ST_TO_ADDR
74249: GO 74259
// result := 3 ;
74251: LD_ADDR_VAR 0 5
74255: PUSH
74256: LD_INT 3
74258: ST_TO_ADDR
// exit ;
74259: GO 74347
// end ; if y1 = y2 then
74261: LD_VAR 0 2
74265: PUSH
74266: LD_VAR 0 4
74270: EQUAL
74271: IFFALSE 74305
// begin if x1 > x2 then
74273: LD_VAR 0 1
74277: PUSH
74278: LD_VAR 0 3
74282: GREATER
74283: IFFALSE 74295
// result := 1 else
74285: LD_ADDR_VAR 0 5
74289: PUSH
74290: LD_INT 1
74292: ST_TO_ADDR
74293: GO 74303
// result := 4 ;
74295: LD_ADDR_VAR 0 5
74299: PUSH
74300: LD_INT 4
74302: ST_TO_ADDR
// exit ;
74303: GO 74347
// end ; if x1 > x2 and y1 > y2 then
74305: LD_VAR 0 1
74309: PUSH
74310: LD_VAR 0 3
74314: GREATER
74315: PUSH
74316: LD_VAR 0 2
74320: PUSH
74321: LD_VAR 0 4
74325: GREATER
74326: AND
74327: IFFALSE 74339
// result := 2 else
74329: LD_ADDR_VAR 0 5
74333: PUSH
74334: LD_INT 2
74336: ST_TO_ADDR
74337: GO 74347
// result := 5 ;
74339: LD_ADDR_VAR 0 5
74343: PUSH
74344: LD_INT 5
74346: ST_TO_ADDR
// end ;
74347: LD_VAR 0 5
74351: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74352: LD_INT 0
74354: PPUSH
74355: PPUSH
// if not driver or not IsInUnit ( driver ) then
74356: LD_VAR 0 1
74360: NOT
74361: PUSH
74362: LD_VAR 0 1
74366: PPUSH
74367: CALL_OW 310
74371: NOT
74372: OR
74373: IFFALSE 74377
// exit ;
74375: GO 74467
// vehicle := IsInUnit ( driver ) ;
74377: LD_ADDR_VAR 0 3
74381: PUSH
74382: LD_VAR 0 1
74386: PPUSH
74387: CALL_OW 310
74391: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74392: LD_VAR 0 1
74396: PPUSH
74397: LD_STRING \
74399: PUSH
74400: LD_INT 0
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: LD_INT 0
74408: PUSH
74409: LD_INT 0
74411: PUSH
74412: LD_INT 0
74414: PUSH
74415: LD_INT 0
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: PUSH
74427: LD_STRING E
74429: PUSH
74430: LD_INT 0
74432: PUSH
74433: LD_INT 0
74435: PUSH
74436: LD_VAR 0 3
74440: PUSH
74441: LD_INT 0
74443: PUSH
74444: LD_INT 0
74446: PUSH
74447: LD_INT 0
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: LIST
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: PPUSH
74463: CALL_OW 446
// end ;
74467: LD_VAR 0 2
74471: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74472: LD_INT 0
74474: PPUSH
74475: PPUSH
// if not driver or not IsInUnit ( driver ) then
74476: LD_VAR 0 1
74480: NOT
74481: PUSH
74482: LD_VAR 0 1
74486: PPUSH
74487: CALL_OW 310
74491: NOT
74492: OR
74493: IFFALSE 74497
// exit ;
74495: GO 74587
// vehicle := IsInUnit ( driver ) ;
74497: LD_ADDR_VAR 0 3
74501: PUSH
74502: LD_VAR 0 1
74506: PPUSH
74507: CALL_OW 310
74511: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74512: LD_VAR 0 1
74516: PPUSH
74517: LD_STRING \
74519: PUSH
74520: LD_INT 0
74522: PUSH
74523: LD_INT 0
74525: PUSH
74526: LD_INT 0
74528: PUSH
74529: LD_INT 0
74531: PUSH
74532: LD_INT 0
74534: PUSH
74535: LD_INT 0
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: PUSH
74547: LD_STRING E
74549: PUSH
74550: LD_INT 0
74552: PUSH
74553: LD_INT 0
74555: PUSH
74556: LD_VAR 0 3
74560: PUSH
74561: LD_INT 0
74563: PUSH
74564: LD_INT 0
74566: PUSH
74567: LD_INT 0
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PPUSH
74583: CALL_OW 447
// end ;
74587: LD_VAR 0 2
74591: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74592: LD_INT 0
74594: PPUSH
74595: PPUSH
74596: PPUSH
// tmp := [ ] ;
74597: LD_ADDR_VAR 0 5
74601: PUSH
74602: EMPTY
74603: ST_TO_ADDR
// for i in units do
74604: LD_ADDR_VAR 0 4
74608: PUSH
74609: LD_VAR 0 1
74613: PUSH
74614: FOR_IN
74615: IFFALSE 74653
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74617: LD_ADDR_VAR 0 5
74621: PUSH
74622: LD_VAR 0 5
74626: PPUSH
74627: LD_VAR 0 5
74631: PUSH
74632: LD_INT 1
74634: PLUS
74635: PPUSH
74636: LD_VAR 0 4
74640: PPUSH
74641: CALL_OW 256
74645: PPUSH
74646: CALL_OW 2
74650: ST_TO_ADDR
74651: GO 74614
74653: POP
74654: POP
// if not tmp then
74655: LD_VAR 0 5
74659: NOT
74660: IFFALSE 74664
// exit ;
74662: GO 74712
// if asc then
74664: LD_VAR 0 2
74668: IFFALSE 74692
// result := SortListByListAsc ( units , tmp ) else
74670: LD_ADDR_VAR 0 3
74674: PUSH
74675: LD_VAR 0 1
74679: PPUSH
74680: LD_VAR 0 5
74684: PPUSH
74685: CALL_OW 76
74689: ST_TO_ADDR
74690: GO 74712
// result := SortListByListDesc ( units , tmp ) ;
74692: LD_ADDR_VAR 0 3
74696: PUSH
74697: LD_VAR 0 1
74701: PPUSH
74702: LD_VAR 0 5
74706: PPUSH
74707: CALL_OW 77
74711: ST_TO_ADDR
// end ;
74712: LD_VAR 0 3
74716: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74717: LD_INT 0
74719: PPUSH
74720: PPUSH
// task := GetTaskList ( mech ) ;
74721: LD_ADDR_VAR 0 4
74725: PUSH
74726: LD_VAR 0 1
74730: PPUSH
74731: CALL_OW 437
74735: ST_TO_ADDR
// if not task then
74736: LD_VAR 0 4
74740: NOT
74741: IFFALSE 74745
// exit ;
74743: GO 74787
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74745: LD_ADDR_VAR 0 3
74749: PUSH
74750: LD_VAR 0 4
74754: PUSH
74755: LD_INT 1
74757: ARRAY
74758: PUSH
74759: LD_INT 1
74761: ARRAY
74762: PUSH
74763: LD_STRING r
74765: EQUAL
74766: PUSH
74767: LD_VAR 0 4
74771: PUSH
74772: LD_INT 1
74774: ARRAY
74775: PUSH
74776: LD_INT 4
74778: ARRAY
74779: PUSH
74780: LD_VAR 0 2
74784: EQUAL
74785: AND
74786: ST_TO_ADDR
// end ;
74787: LD_VAR 0 3
74791: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74792: LD_INT 0
74794: PPUSH
// SetDir ( unit , d ) ;
74795: LD_VAR 0 1
74799: PPUSH
74800: LD_VAR 0 4
74804: PPUSH
74805: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74809: LD_VAR 0 1
74813: PPUSH
74814: LD_VAR 0 2
74818: PPUSH
74819: LD_VAR 0 3
74823: PPUSH
74824: LD_VAR 0 5
74828: PPUSH
74829: CALL_OW 48
// end ;
74833: LD_VAR 0 6
74837: RET
// export function ToNaturalNumber ( number ) ; begin
74838: LD_INT 0
74840: PPUSH
// result := number div 1 ;
74841: LD_ADDR_VAR 0 2
74845: PUSH
74846: LD_VAR 0 1
74850: PUSH
74851: LD_INT 1
74853: DIV
74854: ST_TO_ADDR
// if number < 0 then
74855: LD_VAR 0 1
74859: PUSH
74860: LD_INT 0
74862: LESS
74863: IFFALSE 74873
// result := 0 ;
74865: LD_ADDR_VAR 0 2
74869: PUSH
74870: LD_INT 0
74872: ST_TO_ADDR
// end ;
74873: LD_VAR 0 2
74877: RET
// export function SortByClass ( units , class ) ; var un ; begin
74878: LD_INT 0
74880: PPUSH
74881: PPUSH
// if not units or not class then
74882: LD_VAR 0 1
74886: NOT
74887: PUSH
74888: LD_VAR 0 2
74892: NOT
74893: OR
74894: IFFALSE 74898
// exit ;
74896: GO 74993
// result := [ ] ;
74898: LD_ADDR_VAR 0 3
74902: PUSH
74903: EMPTY
74904: ST_TO_ADDR
// for un in units do
74905: LD_ADDR_VAR 0 4
74909: PUSH
74910: LD_VAR 0 1
74914: PUSH
74915: FOR_IN
74916: IFFALSE 74991
// if GetClass ( un ) = class then
74918: LD_VAR 0 4
74922: PPUSH
74923: CALL_OW 257
74927: PUSH
74928: LD_VAR 0 2
74932: EQUAL
74933: IFFALSE 74960
// result := Insert ( result , 1 , un ) else
74935: LD_ADDR_VAR 0 3
74939: PUSH
74940: LD_VAR 0 3
74944: PPUSH
74945: LD_INT 1
74947: PPUSH
74948: LD_VAR 0 4
74952: PPUSH
74953: CALL_OW 2
74957: ST_TO_ADDR
74958: GO 74989
// result := Replace ( result , result + 1 , un ) ;
74960: LD_ADDR_VAR 0 3
74964: PUSH
74965: LD_VAR 0 3
74969: PPUSH
74970: LD_VAR 0 3
74974: PUSH
74975: LD_INT 1
74977: PLUS
74978: PPUSH
74979: LD_VAR 0 4
74983: PPUSH
74984: CALL_OW 1
74988: ST_TO_ADDR
74989: GO 74915
74991: POP
74992: POP
// end ;
74993: LD_VAR 0 3
74997: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74998: LD_INT 0
75000: PPUSH
75001: PPUSH
75002: PPUSH
75003: PPUSH
75004: PPUSH
75005: PPUSH
75006: PPUSH
// result := [ ] ;
75007: LD_ADDR_VAR 0 4
75011: PUSH
75012: EMPTY
75013: ST_TO_ADDR
// if x - r < 0 then
75014: LD_VAR 0 1
75018: PUSH
75019: LD_VAR 0 3
75023: MINUS
75024: PUSH
75025: LD_INT 0
75027: LESS
75028: IFFALSE 75040
// min_x := 0 else
75030: LD_ADDR_VAR 0 8
75034: PUSH
75035: LD_INT 0
75037: ST_TO_ADDR
75038: GO 75056
// min_x := x - r ;
75040: LD_ADDR_VAR 0 8
75044: PUSH
75045: LD_VAR 0 1
75049: PUSH
75050: LD_VAR 0 3
75054: MINUS
75055: ST_TO_ADDR
// if y - r < 0 then
75056: LD_VAR 0 2
75060: PUSH
75061: LD_VAR 0 3
75065: MINUS
75066: PUSH
75067: LD_INT 0
75069: LESS
75070: IFFALSE 75082
// min_y := 0 else
75072: LD_ADDR_VAR 0 7
75076: PUSH
75077: LD_INT 0
75079: ST_TO_ADDR
75080: GO 75098
// min_y := y - r ;
75082: LD_ADDR_VAR 0 7
75086: PUSH
75087: LD_VAR 0 2
75091: PUSH
75092: LD_VAR 0 3
75096: MINUS
75097: ST_TO_ADDR
// max_x := x + r ;
75098: LD_ADDR_VAR 0 9
75102: PUSH
75103: LD_VAR 0 1
75107: PUSH
75108: LD_VAR 0 3
75112: PLUS
75113: ST_TO_ADDR
// max_y := y + r ;
75114: LD_ADDR_VAR 0 10
75118: PUSH
75119: LD_VAR 0 2
75123: PUSH
75124: LD_VAR 0 3
75128: PLUS
75129: ST_TO_ADDR
// for _x = min_x to max_x do
75130: LD_ADDR_VAR 0 5
75134: PUSH
75135: DOUBLE
75136: LD_VAR 0 8
75140: DEC
75141: ST_TO_ADDR
75142: LD_VAR 0 9
75146: PUSH
75147: FOR_TO
75148: IFFALSE 75249
// for _y = min_y to max_y do
75150: LD_ADDR_VAR 0 6
75154: PUSH
75155: DOUBLE
75156: LD_VAR 0 7
75160: DEC
75161: ST_TO_ADDR
75162: LD_VAR 0 10
75166: PUSH
75167: FOR_TO
75168: IFFALSE 75245
// begin if not ValidHex ( _x , _y ) then
75170: LD_VAR 0 5
75174: PPUSH
75175: LD_VAR 0 6
75179: PPUSH
75180: CALL_OW 488
75184: NOT
75185: IFFALSE 75189
// continue ;
75187: GO 75167
// if GetResourceTypeXY ( _x , _y ) then
75189: LD_VAR 0 5
75193: PPUSH
75194: LD_VAR 0 6
75198: PPUSH
75199: CALL_OW 283
75203: IFFALSE 75243
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75205: LD_ADDR_VAR 0 4
75209: PUSH
75210: LD_VAR 0 4
75214: PPUSH
75215: LD_VAR 0 4
75219: PUSH
75220: LD_INT 1
75222: PLUS
75223: PPUSH
75224: LD_VAR 0 5
75228: PUSH
75229: LD_VAR 0 6
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: PPUSH
75238: CALL_OW 1
75242: ST_TO_ADDR
// end ;
75243: GO 75167
75245: POP
75246: POP
75247: GO 75147
75249: POP
75250: POP
// end ;
75251: LD_VAR 0 4
75255: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
75256: LD_INT 0
75258: PPUSH
75259: PPUSH
75260: PPUSH
75261: PPUSH
75262: PPUSH
75263: PPUSH
// if not units then
75264: LD_VAR 0 1
75268: NOT
75269: IFFALSE 75273
// exit ;
75271: GO 75674
// result := UnitFilter ( units , [ f_ok ] ) ;
75273: LD_ADDR_VAR 0 3
75277: PUSH
75278: LD_VAR 0 1
75282: PPUSH
75283: LD_INT 50
75285: PUSH
75286: EMPTY
75287: LIST
75288: PPUSH
75289: CALL_OW 72
75293: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75294: LD_ADDR_VAR 0 7
75298: PUSH
75299: LD_VAR 0 1
75303: PUSH
75304: LD_INT 1
75306: ARRAY
75307: PPUSH
75308: CALL_OW 255
75312: ST_TO_ADDR
// if not result then
75313: LD_VAR 0 3
75317: NOT
75318: IFFALSE 75322
// exit ;
75320: GO 75674
// for i in result do
75322: LD_ADDR_VAR 0 4
75326: PUSH
75327: LD_VAR 0 3
75331: PUSH
75332: FOR_IN
75333: IFFALSE 75672
// begin tag := GetTag ( i ) + 1 ;
75335: LD_ADDR_VAR 0 8
75339: PUSH
75340: LD_VAR 0 4
75344: PPUSH
75345: CALL_OW 110
75349: PUSH
75350: LD_INT 1
75352: PLUS
75353: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75354: LD_ADDR_VAR 0 6
75358: PUSH
75359: LD_VAR 0 4
75363: PPUSH
75364: CALL_OW 250
75368: PPUSH
75369: LD_VAR 0 4
75373: PPUSH
75374: CALL_OW 251
75378: PPUSH
75379: LD_INT 6
75381: PPUSH
75382: CALL 74998 0 3
75386: ST_TO_ADDR
// if cr then
75387: LD_VAR 0 6
75391: IFFALSE 75430
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75393: LD_VAR 0 4
75397: PPUSH
75398: LD_VAR 0 6
75402: PUSH
75403: LD_INT 1
75405: ARRAY
75406: PUSH
75407: LD_INT 1
75409: ARRAY
75410: PPUSH
75411: LD_VAR 0 6
75415: PUSH
75416: LD_INT 1
75418: ARRAY
75419: PUSH
75420: LD_INT 2
75422: ARRAY
75423: PPUSH
75424: CALL_OW 116
75428: GO 75670
// if path > tag then
75430: LD_VAR 0 2
75434: PUSH
75435: LD_VAR 0 8
75439: GREATER
75440: IFFALSE 75618
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
75442: LD_ADDR_VAR 0 5
75446: PUSH
75447: LD_INT 81
75449: PUSH
75450: LD_VAR 0 7
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: PUSH
75459: LD_INT 91
75461: PUSH
75462: LD_VAR 0 4
75466: PUSH
75467: LD_INT 12
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: LIST
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: PPUSH
75479: CALL_OW 69
75483: ST_TO_ADDR
// if enemy then
75484: LD_VAR 0 5
75488: IFFALSE 75516
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75490: LD_VAR 0 4
75494: PPUSH
75495: LD_VAR 0 5
75499: PPUSH
75500: LD_VAR 0 4
75504: PPUSH
75505: CALL_OW 74
75509: PPUSH
75510: CALL_OW 115
75514: GO 75616
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75516: LD_VAR 0 4
75520: PPUSH
75521: LD_VAR 0 2
75525: PUSH
75526: LD_VAR 0 8
75530: ARRAY
75531: PUSH
75532: LD_INT 1
75534: ARRAY
75535: PPUSH
75536: LD_VAR 0 2
75540: PUSH
75541: LD_VAR 0 8
75545: ARRAY
75546: PUSH
75547: LD_INT 2
75549: ARRAY
75550: PPUSH
75551: CALL_OW 297
75555: PUSH
75556: LD_INT 6
75558: GREATER
75559: IFFALSE 75602
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75561: LD_VAR 0 4
75565: PPUSH
75566: LD_VAR 0 2
75570: PUSH
75571: LD_VAR 0 8
75575: ARRAY
75576: PUSH
75577: LD_INT 1
75579: ARRAY
75580: PPUSH
75581: LD_VAR 0 2
75585: PUSH
75586: LD_VAR 0 8
75590: ARRAY
75591: PUSH
75592: LD_INT 2
75594: ARRAY
75595: PPUSH
75596: CALL_OW 114
75600: GO 75616
// SetTag ( i , tag ) ;
75602: LD_VAR 0 4
75606: PPUSH
75607: LD_VAR 0 8
75611: PPUSH
75612: CALL_OW 109
// end else
75616: GO 75670
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75618: LD_ADDR_VAR 0 5
75622: PUSH
75623: LD_INT 81
75625: PUSH
75626: LD_VAR 0 7
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PPUSH
75635: CALL_OW 69
75639: ST_TO_ADDR
// if enemy then
75640: LD_VAR 0 5
75644: IFFALSE 75670
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75646: LD_VAR 0 4
75650: PPUSH
75651: LD_VAR 0 5
75655: PPUSH
75656: LD_VAR 0 4
75660: PPUSH
75661: CALL_OW 74
75665: PPUSH
75666: CALL_OW 115
// end ; end ;
75670: GO 75332
75672: POP
75673: POP
// end ;
75674: LD_VAR 0 3
75678: RET
