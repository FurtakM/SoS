// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1495 0 0
// Nef_PrepareNature ;
 250: CALL 4397 0 0
// MissionIntro ;
 254: CALL 10406 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: LD_OWVAR 67
 407: ARRAY
 408: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 409: LD_ADDR_EXP 33
 413: PUSH
 414: LD_INT 2
 416: NEG
 417: PUSH
 418: LD_INT 1
 420: NEG
 421: PUSH
 422: LD_INT 0
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 436: LD_ADDR_EXP 34
 440: PUSH
 441: LD_INT 135
 443: PUSH
 444: LD_INT 8
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 135
 453: PUSH
 454: LD_INT 4
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 134
 463: PUSH
 464: LD_INT 19
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 132
 473: PUSH
 474: LD_INT 26
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PUSH
 481: LD_INT 128
 483: PUSH
 484: LD_INT 31
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PUSH
 491: LD_INT 123
 493: PUSH
 494: LD_INT 37
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 118
 503: PUSH
 504: LD_INT 45
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: LD_INT 112
 513: PUSH
 514: LD_INT 51
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 106
 523: PUSH
 524: LD_INT 57
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 99
 533: PUSH
 534: LD_INT 62
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 93
 543: PUSH
 544: LD_INT 67
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: PUSH
 551: LD_INT 86
 553: PUSH
 554: LD_INT 72
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 78
 563: PUSH
 564: LD_INT 75
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 71
 573: PUSH
 574: LD_INT 81
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 69
 583: PUSH
 584: LD_INT 88
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 71
 593: PUSH
 594: LD_INT 95
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: LD_INT 74
 603: PUSH
 604: LD_INT 103
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 80
 613: PUSH
 614: LD_INT 113
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 84
 623: PUSH
 624: LD_INT 121
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 89
 633: PUSH
 634: LD_INT 132
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 92
 643: PUSH
 644: LD_INT 142
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 93
 653: PUSH
 654: LD_INT 151
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: LD_INT 91
 663: PUSH
 664: LD_INT 157
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 90
 673: PUSH
 674: LD_INT 163
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 93
 683: PUSH
 684: LD_INT 171
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 92
 693: PUSH
 694: LD_INT 177
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 729: LD_ADDR_EXP 35
 733: PUSH
 734: LD_INT 135
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 135
 746: PUSH
 747: LD_INT 4
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: LD_INT 134
 756: PUSH
 757: LD_INT 19
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 132
 766: PUSH
 767: LD_INT 26
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 128
 776: PUSH
 777: LD_INT 31
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 123
 786: PUSH
 787: LD_INT 37
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 118
 796: PUSH
 797: LD_INT 45
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 112
 806: PUSH
 807: LD_INT 51
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 106
 816: PUSH
 817: LD_INT 57
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 99
 826: PUSH
 827: LD_INT 62
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 104
 836: PUSH
 837: LD_INT 71
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 110
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 119
 856: PUSH
 857: LD_INT 88
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 128
 866: PUSH
 867: LD_INT 97
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PUSH
 874: LD_INT 135
 876: PUSH
 877: LD_INT 106
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 141
 886: PUSH
 887: LD_INT 120
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 143
 896: PUSH
 897: LD_INT 132
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 143
 906: PUSH
 907: LD_INT 142
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 140
 916: PUSH
 917: LD_INT 149
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 132
 926: PUSH
 927: LD_INT 153
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 125
 936: PUSH
 937: LD_INT 155
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: LD_INT 115
 946: PUSH
 947: LD_INT 154
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 105
 956: PUSH
 957: LD_INT 153
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 93
 966: PUSH
 967: LD_INT 151
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 91
 976: PUSH
 977: LD_INT 157
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 163
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 93
 996: PUSH
 997: LD_INT 171
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 92
1006: PUSH
1007: LD_INT 177
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1044: LD_ADDR_EXP 36
1048: PUSH
1049: LD_INT 40
1051: PUSH
1052: LD_INT 35
1054: PUSH
1055: LD_INT 30
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_OWVAR 67
1067: ARRAY
1068: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1069: LD_ADDR_EXP 37
1073: PUSH
1074: LD_INT 50
1076: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1077: LD_ADDR_EXP 14
1081: PUSH
1082: LD_INT 21
1084: PUSH
1085: LD_INT 19
1087: PUSH
1088: LD_INT 17
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_OWVAR 67
1100: ARRAY
1101: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1102: LD_ADDR_EXP 38
1106: PUSH
1107: LD_INT 3
1109: PUSH
1110: LD_INT 4
1112: PUSH
1113: LD_INT 4
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_OWVAR 67
1125: ARRAY
1126: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1127: LD_ADDR_EXP 39
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: LD_INT 4
1137: PUSH
1138: LD_INT 4
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_OWVAR 67
1150: ARRAY
1151: ST_TO_ADDR
// arabianTroopsMin = 2 ;
1152: LD_ADDR_EXP 40
1156: PUSH
1157: LD_INT 2
1159: ST_TO_ADDR
// arabianTroopsMax = 4 ;
1160: LD_ADDR_EXP 41
1164: PUSH
1165: LD_INT 4
1167: ST_TO_ADDR
// end ;
1168: LD_VAR 0 1
1172: RET
// every 0 0$1 trigger debugMode do var i ;
1173: LD_EXP 31
1177: IFFALSE 1492
1179: GO 1181
1181: DISABLE
1182: LD_INT 0
1184: PPUSH
// begin enable ;
1185: ENABLE
// FogOff ( your_side ) ;
1186: LD_OWVAR 2
1190: PPUSH
1191: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1195: LD_ADDR_VAR 0 1
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_OWVAR 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 2
1214: PUSH
1215: LD_INT 21
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 21
1227: PUSH
1228: LD_INT 2
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: PUSH
1249: FOR_IN
1250: IFFALSE 1266
// SetLives ( i , 1000 ) ;
1252: LD_VAR 0 1
1256: PPUSH
1257: LD_INT 1000
1259: PPUSH
1260: CALL_OW 234
1264: GO 1249
1266: POP
1267: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1268: LD_ADDR_VAR 0 1
1272: PUSH
1273: LD_INT 22
1275: PUSH
1276: LD_OWVAR 2
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: PUSH
1304: FOR_IN
1305: IFFALSE 1369
// begin SetSkill ( i , skill_combat , 10 ) ;
1307: LD_VAR 0 1
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_INT 10
1317: PPUSH
1318: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1322: LD_VAR 0 1
1326: PPUSH
1327: LD_INT 2
1329: PPUSH
1330: LD_INT 10
1332: PPUSH
1333: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1337: LD_VAR 0 1
1341: PPUSH
1342: LD_INT 3
1344: PPUSH
1345: LD_INT 10
1347: PPUSH
1348: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1352: LD_VAR 0 1
1356: PPUSH
1357: LD_INT 4
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: CALL_OW 237
// end ;
1367: GO 1304
1369: POP
1370: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1371: LD_ADDR_VAR 0 1
1375: PUSH
1376: LD_INT 22
1378: PUSH
1379: LD_OWVAR 2
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: LD_INT 30
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 30
1403: PUSH
1404: LD_INT 1
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: PUSH
1425: FOR_IN
1426: IFFALSE 1490
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1428: LD_VAR 0 1
1432: PPUSH
1433: CALL_OW 274
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 9999
1443: PPUSH
1444: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 274
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 9999
1463: PPUSH
1464: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1468: LD_VAR 0 1
1472: PPUSH
1473: CALL_OW 274
1477: PPUSH
1478: LD_INT 3
1480: PPUSH
1481: LD_INT 9999
1483: PPUSH
1484: CALL_OW 277
// end ;
1488: GO 1425
1490: POP
1491: POP
// end ; end_of_file
1492: PPOPN 1
1494: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1495: LD_INT 0
1497: PPUSH
// randomsToSave = [ ] ;
1498: LD_ADDR_EXP 62
1502: PUSH
1503: EMPTY
1504: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1505: LD_ADDR_EXP 57
1509: PUSH
1510: EMPTY
1511: ST_TO_ADDR
// ruCars = [ ] ;
1512: LD_ADDR_EXP 61
1516: PUSH
1517: EMPTY
1518: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1519: CALL 2327 0 0
// PrepareHeroes ;
1523: CALL 1532 0 0
// end ;
1527: LD_VAR 0 1
1531: RET
// function PrepareHeroes ; var i , current ; begin
1532: LD_INT 0
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation = 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1553: LD_ADDR_EXP 42
1557: PUSH
1558: LD_STRING Burlak
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_INT 3
1566: PPUSH
1567: CALL 9385 0 3
1571: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1572: LD_ADDR_EXP 43
1576: PUSH
1577: LD_STRING Gnyevko
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: LD_INT 3
1585: PPUSH
1586: CALL 9385 0 3
1590: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1591: LD_ADDR_EXP 45
1595: PUSH
1596: LD_STRING Kovalyuk
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: CALL 9385 0 3
1609: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1610: LD_ADDR_EXP 44
1614: PUSH
1615: LD_STRING Kirilenkova
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: LD_INT 4
1623: PPUSH
1624: CALL 9385 0 3
1628: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1629: LD_ADDR_EXP 46
1633: PUSH
1634: LD_STRING Belkov
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: CALL 9385 0 3
1647: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1648: LD_ADDR_EXP 47
1652: PUSH
1653: LD_STRING Belkov2
1655: PPUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL 9385 0 3
1666: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1667: LD_ADDR_EXP 48
1671: PUSH
1672: LD_STRING Scholtze
1674: PPUSH
1675: LD_INT 1
1677: PPUSH
1678: LD_INT 4
1680: PPUSH
1681: CALL 9385 0 3
1685: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1686: LD_ADDR_EXP 52
1690: PUSH
1691: LD_STRING Popov
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL 9385 0 3
1704: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1705: LD_ADDR_EXP 53
1709: PUSH
1710: LD_STRING Platonov
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL 9385 0 3
1723: ST_TO_ADDR
// uc_side = 6 ;
1724: LD_ADDR_OWVAR 20
1728: PUSH
1729: LD_INT 6
1731: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1732: LD_ADDR_EXP 54
1736: PUSH
1737: LD_STRING Gaydar
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL 9385 0 3
1750: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1751: LD_ADDR_EXP 49
1755: PUSH
1756: LD_STRING Kuzmov
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 9385 0 3
1769: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1770: LD_EXP 49
1774: PPUSH
1775: LD_INT 109
1777: PPUSH
1778: LD_INT 108
1780: PPUSH
1781: LD_INT 5
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 50
// ComHold ( Kuzmov ) ;
1791: LD_EXP 49
1795: PPUSH
1796: CALL_OW 140
// uc_side = 3 ;
1800: LD_ADDR_OWVAR 20
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1808: LD_EXP 42
1812: PUSH
1813: LD_EXP 43
1817: PUSH
1818: LD_EXP 44
1822: PUSH
1823: LD_EXP 45
1827: PUSH
1828: LD_EXP 46
1832: PUSH
1833: LD_EXP 47
1837: PUSH
1838: LD_EXP 48
1842: PUSH
1843: LD_EXP 52
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: LD_INT 2
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL 9468 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1868: LD_ADDR_EXP 50
1872: PUSH
1873: LD_STRING 03_other_survivors
1875: PPUSH
1876: CALL_OW 31
1880: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1881: LD_ADDR_EXP 51
1885: PUSH
1886: LD_STRING 03_other_kirov
1888: PPUSH
1889: CALL_OW 31
1893: ST_TO_ADDR
// for i in other_survivors do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: LD_EXP 50
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1970
// begin if ruCars then
1907: LD_EXP 61
1911: IFFALSE 1953
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_EXP 61
1922: PUSH
1923: LD_INT 1
1925: ARRAY
1926: PPUSH
1927: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1931: LD_ADDR_EXP 61
1935: PUSH
1936: LD_EXP 61
1940: PUSH
1941: LD_EXP 61
1945: PUSH
1946: LD_INT 1
1948: ARRAY
1949: DIFF
1950: ST_TO_ADDR
// end else
1951: GO 1968
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_INT 2
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 49
// end ;
1968: GO 1904
1970: POP
1971: POP
// for i in other_kirov_survivors do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: LD_EXP 51
1981: PUSH
1982: FOR_IN
1983: IFFALSE 2048
// begin if ruCars then
1985: LD_EXP 61
1989: IFFALSE 2031
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_EXP 61
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2009: LD_ADDR_EXP 61
2013: PUSH
2014: LD_EXP 61
2018: PUSH
2019: LD_EXP 61
2023: PUSH
2024: LD_INT 1
2026: ARRAY
2027: DIFF
2028: ST_TO_ADDR
// end else
2029: GO 2046
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ;
2046: GO 1982
2048: POP
2049: POP
// PrepareSoldier ( sex_male , 1 ) ;
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 381
// dialogRus = CreateHuman ;
2060: LD_ADDR_EXP 59
2064: PUSH
2065: CALL_OW 44
2069: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2070: LD_EXP 50
2074: PUSH
2075: LD_EXP 51
2079: PLUS
2080: PUSH
2081: LD_EXP 43
2085: PUSH
2086: LD_EXP 44
2090: PUSH
2091: LD_EXP 45
2095: PUSH
2096: LD_EXP 46
2100: PUSH
2101: LD_EXP 47
2105: PUSH
2106: LD_EXP 48
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: PLUS
2119: PUSH
2120: LD_INT 8
2122: LESS
2123: IFFALSE 2322
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 50
2134: PUSH
2135: LD_EXP 51
2139: PLUS
2140: PUSH
2141: LD_EXP 43
2145: PUSH
2146: LD_EXP 44
2150: PUSH
2151: LD_EXP 45
2155: PUSH
2156: LD_EXP 46
2160: PUSH
2161: LD_EXP 47
2165: PUSH
2166: LD_EXP 48
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PLUS
2179: ST_TO_ADDR
// current = 8 - current ;
2180: LD_ADDR_VAR 0 3
2184: PUSH
2185: LD_INT 8
2187: PUSH
2188: LD_VAR 0 3
2192: MINUS
2193: ST_TO_ADDR
// for i := 1 to current do
2194: LD_ADDR_VAR 0 2
2198: PUSH
2199: DOUBLE
2200: LD_INT 1
2202: DEC
2203: ST_TO_ADDR
2204: LD_VAR 0 3
2208: PUSH
2209: FOR_TO
2210: IFFALSE 2320
// begin uc_nation = 3 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 3
2219: ST_TO_ADDR
// uc_side = 3 ;
2220: LD_ADDR_OWVAR 20
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2228: LD_INT 0
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 4
2236: PPUSH
2237: CALL_OW 12
2241: PPUSH
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 3
2247: PPUSH
2248: CALL_OW 12
2252: PPUSH
2253: CALL_OW 380
// if ruCars then
2257: LD_EXP 61
2261: IFFALSE 2303
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2263: CALL_OW 44
2267: PPUSH
2268: LD_EXP 61
2272: PUSH
2273: LD_INT 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2281: LD_ADDR_EXP 61
2285: PUSH
2286: LD_EXP 61
2290: PUSH
2291: LD_EXP 61
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: DIFF
2300: ST_TO_ADDR
// end else
2301: GO 2318
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2303: CALL_OW 44
2307: PPUSH
2308: LD_INT 2
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 49
// end ;
2318: GO 2209
2320: POP
2321: POP
// end ; end ;
2322: LD_VAR 0 1
2326: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2327: LD_INT 0
2329: PPUSH
2330: PPUSH
2331: PPUSH
// uc_side = 3 ;
2332: LD_ADDR_OWVAR 20
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// uc_nation = 3 ;
2340: LD_ADDR_OWVAR 21
2344: PUSH
2345: LD_INT 3
2347: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_EXP 5
2362: PUSH
2363: FOR_TO
2364: IFFALSE 2513
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2366: LD_ADDR_OWVAR 37
2370: PUSH
2371: LD_EXP 5
2375: PUSH
2376: LD_VAR 0 2
2380: ARRAY
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2386: LD_ADDR_OWVAR 39
2390: PUSH
2391: LD_EXP 5
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: PUSH
2402: LD_INT 2
2404: ARRAY
2405: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2406: LD_ADDR_OWVAR 38
2410: PUSH
2411: LD_EXP 5
2415: PUSH
2416: LD_VAR 0 2
2420: ARRAY
2421: PUSH
2422: LD_INT 3
2424: ARRAY
2425: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2426: LD_ADDR_OWVAR 40
2430: PUSH
2431: LD_EXP 5
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 4
2444: ARRAY
2445: ST_TO_ADDR
// uc_direction := 3 ;
2446: LD_ADDR_OWVAR 24
2450: PUSH
2451: LD_INT 3
2453: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2454: LD_ADDR_OWVAR 41
2458: PUSH
2459: LD_INT 25
2461: PPUSH
2462: LD_INT 30
2464: PPUSH
2465: CALL_OW 12
2469: ST_TO_ADDR
// car := CreateVehicle ;
2470: LD_ADDR_VAR 0 3
2474: PUSH
2475: CALL_OW 45
2479: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2480: LD_ADDR_EXP 61
2484: PUSH
2485: LD_EXP 61
2489: PUSH
2490: LD_VAR 0 3
2494: ADD
2495: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL_OW 49
// end ;
2511: GO 2363
2513: POP
2514: POP
// end ;
2515: LD_VAR 0 1
2519: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
// rnd = rand ( 1 , 4 ) ;
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 4
2540: PPUSH
2541: CALL_OW 12
2545: ST_TO_ADDR
// uc_side = 6 ;
2546: LD_ADDR_OWVAR 20
2550: PUSH
2551: LD_INT 6
2553: ST_TO_ADDR
// uc_nation = 3 ;
2554: LD_ADDR_OWVAR 21
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// if rnd < 4 then
2562: LD_VAR 0 3
2566: PUSH
2567: LD_INT 4
2569: LESS
2570: IFFALSE 2946
// begin vc_chassis = ru_medium_wheeled ;
2572: LD_ADDR_OWVAR 37
2576: PUSH
2577: LD_INT 21
2579: ST_TO_ADDR
// vc_control = control_manual ;
2580: LD_ADDR_OWVAR 38
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// vc_engine = engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2596: LD_ADDR_VAR 0 5
2600: PUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 100
2606: PPUSH
2607: CALL_OW 12
2611: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2612: LD_VAR 0 5
2616: PUSH
2617: LD_EXP 37
2621: PUSH
2622: LD_INT 1
2624: PLUS
2625: LESS
2626: IFFALSE 2638
// vc_weapon = ru_cargo_bay else
2628: LD_ADDR_OWVAR 40
2632: PUSH
2633: LD_INT 51
2635: ST_TO_ADDR
2636: GO 2669
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 42
2645: PUSH
2646: LD_INT 43
2648: PUSH
2649: LD_INT 44
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 3
2662: PPUSH
2663: CALL_OW 12
2667: ARRAY
2668: ST_TO_ADDR
// vehicle = CreateVehicle ;
2669: LD_ADDR_VAR 0 7
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2679: LD_VAR 0 7
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2691: LD_VAR 0 7
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 4
2714: PPUSH
2715: CALL_OW 12
2719: PPUSH
2720: LD_INT 2
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: CALL_OW 12
2730: PPUSH
2731: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2735: CALL_OW 44
2739: PPUSH
2740: LD_VAR 0 7
2744: PPUSH
2745: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2749: LD_OWVAR 40
2753: PUSH
2754: LD_INT 51
2756: EQUAL
2757: IFFALSE 2774
// AddCargo ( vehicle , mat_cans , 100 ) ;
2759: LD_VAR 0 7
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2774: LD_VAR 0 7
2778: PPUSH
2779: LD_INT 500
2781: PPUSH
2782: LD_INT 1000
2784: PPUSH
2785: CALL_OW 12
2789: PPUSH
2790: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2794: LD_ADDR_VAR 0 3
2798: PUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_INT 2
2804: PPUSH
2805: CALL_OW 12
2809: ST_TO_ADDR
// if rnd = 1 then
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 1
2817: EQUAL
2818: IFFALSE 2883
// for i := 3 to russianCargoPath1 do
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: DOUBLE
2826: LD_INT 3
2828: DEC
2829: ST_TO_ADDR
2830: LD_EXP 34
2834: PUSH
2835: FOR_TO
2836: IFFALSE 2879
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2838: LD_VAR 0 7
2842: PPUSH
2843: LD_EXP 34
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: PUSH
2854: LD_INT 1
2856: ARRAY
2857: PPUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 2
2867: ARRAY
2868: PUSH
2869: LD_INT 2
2871: ARRAY
2872: PPUSH
2873: CALL_OW 171
2877: GO 2835
2879: POP
2880: POP
2881: GO 2944
// for i := 3 to russianCargoPath2 do
2883: LD_ADDR_VAR 0 2
2887: PUSH
2888: DOUBLE
2889: LD_INT 3
2891: DEC
2892: ST_TO_ADDR
2893: LD_EXP 35
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2942
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2901: LD_VAR 0 7
2905: PPUSH
2906: LD_EXP 35
2910: PUSH
2911: LD_VAR 0 2
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_EXP 35
2925: PUSH
2926: LD_VAR 0 2
2930: ARRAY
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PPUSH
2936: CALL_OW 171
2940: GO 2898
2942: POP
2943: POP
// end else
2944: GO 3285
// begin for i := 1 to rand ( 1 , 3 ) do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 1
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 12
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3046
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2970: LD_INT 0
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: LD_INT 4
2978: PPUSH
2979: CALL_OW 12
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: LD_INT 3
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: CALL_OW 380
// unit = CreateHuman ;
2999: LD_ADDR_VAR 0 6
3003: PUSH
3004: CALL_OW 44
3008: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3009: LD_VAR 0 6
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3024: LD_VAR 0 6
3028: PPUSH
3029: LD_INT 500
3031: PPUSH
3032: LD_INT 1000
3034: PPUSH
3035: CALL_OW 12
3039: PPUSH
3040: CALL_OW 234
// end ;
3044: GO 2967
3046: POP
3047: POP
// rnd2 = rand ( 1 , 2 ) ;
3048: LD_ADDR_VAR 0 4
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 12
3063: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3064: LD_ADDR_VAR 0 8
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 6
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 56
3091: PUSH
3092: EMPTY
3093: LIST
3094: PUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 60
3100: PUSH
3101: EMPTY
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: PPUSH
3114: CALL_OW 69
3118: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3119: LD_ADDR_VAR 0 8
3123: PUSH
3124: LD_VAR 0 8
3128: PUSH
3129: LD_EXP 56
3133: DIFF
3134: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: LD_VAR 0 8
3144: PUSH
3145: LD_EXP 57
3149: DIFF
3150: ST_TO_ADDR
// if rnd2 = 1 then
3151: LD_VAR 0 4
3155: PUSH
3156: LD_INT 1
3158: EQUAL
3159: IFFALSE 3224
// for i := 3 to russianCargoPath1 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 3
3169: DEC
3170: ST_TO_ADDR
3171: LD_EXP 34
3175: PUSH
3176: FOR_TO
3177: IFFALSE 3220
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3179: LD_VAR 0 8
3183: PPUSH
3184: LD_EXP 34
3188: PUSH
3189: LD_VAR 0 2
3193: ARRAY
3194: PUSH
3195: LD_INT 1
3197: ARRAY
3198: PPUSH
3199: LD_EXP 34
3203: PUSH
3204: LD_VAR 0 2
3208: ARRAY
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: CALL_OW 171
3218: GO 3176
3220: POP
3221: POP
3222: GO 3285
// for i := 3 to russianCargoPath2 do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 3
3232: DEC
3233: ST_TO_ADDR
3234: LD_EXP 35
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3283
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3242: LD_VAR 0 8
3246: PPUSH
3247: LD_EXP 35
3251: PUSH
3252: LD_VAR 0 2
3256: ARRAY
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: LD_EXP 35
3266: PUSH
3267: LD_VAR 0 2
3271: ARRAY
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: CALL_OW 171
3281: GO 3239
3283: POP
3284: POP
// end ; end ;
3285: LD_VAR 0 1
3289: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3290: LD_INT 0
3292: PPUSH
3293: PPUSH
3294: PPUSH
// for i := 1 to 2 do
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: DOUBLE
3301: LD_INT 1
3303: DEC
3304: ST_TO_ADDR
3305: LD_INT 2
3307: PUSH
3308: FOR_TO
3309: IFFALSE 3375
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3311: LD_INT 0
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: CALL_OW 12
3327: PPUSH
3328: CALL_OW 380
// unit = CreateHuman ;
3332: LD_ADDR_VAR 0 3
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3342: LD_VAR 0 3
3346: PPUSH
3347: LD_INT 3
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3357: LD_ADDR_EXP 57
3361: PUSH
3362: LD_EXP 57
3366: PUSH
3367: LD_VAR 0 3
3371: ADD
3372: ST_TO_ADDR
// end ;
3373: GO 3308
3375: POP
3376: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3377: LD_INT 0
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: LD_INT 2
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: CALL_OW 12
3393: PPUSH
3394: CALL_OW 380
// unit = CreateHuman ;
3398: LD_ADDR_VAR 0 3
3402: PUSH
3403: CALL_OW 44
3407: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3423: LD_ADDR_EXP 57
3427: PUSH
3428: LD_EXP 57
3432: PUSH
3433: LD_VAR 0 3
3437: ADD
3438: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3439: LD_EXP 57
3443: PPUSH
3444: LD_INT 100
3446: PPUSH
3447: LD_INT 54
3449: PPUSH
3450: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3454: LD_EXP 57
3458: PPUSH
3459: LD_INT 25
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 72
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 95
3479: PPUSH
3480: LD_INT 52
3482: PPUSH
3483: LD_INT 2
3485: PPUSH
3486: CALL_OW 205
// end ; end_of_file
3490: LD_VAR 0 1
3494: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3495: LD_INT 0
3497: PPUSH
// uc_side = 2 ;
3498: LD_ADDR_OWVAR 20
3502: PUSH
3503: LD_INT 2
3505: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3506: LD_ADDR_EXP 63
3510: PUSH
3511: LD_STRING Heike
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: LD_INT 0
3519: PPUSH
3520: CALL 9385 0 3
3524: ST_TO_ADDR
// if Difficulty >= 2 then
3525: LD_OWVAR 67
3529: PUSH
3530: LD_INT 2
3532: GREATEREQUAL
3533: IFFALSE 3548
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3535: LD_INT 51
3537: PPUSH
3538: LD_INT 2
3540: PPUSH
3541: LD_INT 2
3543: PPUSH
3544: CALL_OW 322
// end ;
3548: LD_VAR 0 1
3552: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
3557: PPUSH
// currentEnemyGroup = [ ] ;
3558: LD_ADDR_EXP 65
3562: PUSH
3563: EMPTY
3564: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_EXP 39
3579: PUSH
3580: FOR_TO
3581: IFFALSE 3836
// begin uc_side = 2 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_INT 2
3590: ST_TO_ADDR
// uc_nation = nation_arabian ;
3591: LD_ADDR_OWVAR 21
3595: PUSH
3596: LD_INT 2
3598: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3599: LD_ADDR_OWVAR 40
3603: PUSH
3604: LD_INT 23
3606: PUSH
3607: LD_INT 24
3609: PUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 26
3615: PUSH
3616: LD_INT 27
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 5
3631: PPUSH
3632: CALL_OW 12
3636: ARRAY
3637: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3638: LD_OWVAR 40
3642: PUSH
3643: LD_INT 25
3645: PUSH
3646: LD_INT 26
3648: PUSH
3649: LD_INT 27
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: IN
3657: IFFALSE 3688
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3659: LD_ADDR_OWVAR 37
3663: PUSH
3664: LD_INT 13
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 1
3676: PPUSH
3677: LD_INT 2
3679: PPUSH
3680: CALL_OW 12
3684: ARRAY
3685: ST_TO_ADDR
3686: GO 3719
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3688: LD_ADDR_OWVAR 37
3692: PUSH
3693: LD_INT 12
3695: PUSH
3696: LD_INT 13
3698: PUSH
3699: LD_INT 14
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 1
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: CALL_OW 12
3717: ARRAY
3718: ST_TO_ADDR
// vc_control = control_manual ;
3719: LD_ADDR_OWVAR 38
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// vc_engine = engine_combustion ;
3727: LD_ADDR_OWVAR 39
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3735: LD_ADDR_OWVAR 41
3739: PUSH
3740: LD_INT 100
3742: ST_TO_ADDR
// veh = CreateVehicle ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: CALL_OW 45
3752: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3753: LD_ADDR_EXP 65
3757: PUSH
3758: LD_EXP 65
3762: PUSH
3763: LD_VAR 0 3
3767: ADD
3768: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 7
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3784: LD_OWVAR 40
3788: PUSH
3789: LD_INT 26
3791: EQUAL
3792: IFFALSE 3808
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3794: LD_INT 0
3796: PPUSH
3797: LD_EXP 33
3801: PPUSH
3802: CALL_OW 383
3806: GO 3820
// PrepareMechanic ( false , enemySkillLevel ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_EXP 32
3815: PPUSH
3816: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3820: CALL_OW 44
3824: PPUSH
3825: LD_VAR 0 3
3829: PPUSH
3830: CALL_OW 52
// end ;
3834: GO 3580
3836: POP
3837: POP
// end ;
3838: LD_VAR 0 1
3842: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3843: LD_INT 0
3845: PPUSH
3846: PPUSH
3847: PPUSH
// currentEnemyGroup = [ ] ;
3848: LD_ADDR_EXP 65
3852: PUSH
3853: EMPTY
3854: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: DOUBLE
3861: LD_INT 1
3863: DEC
3864: ST_TO_ADDR
3865: LD_EXP 40
3869: PPUSH
3870: LD_EXP 41
3874: PPUSH
3875: CALL_OW 12
3879: PUSH
3880: FOR_TO
3881: IFFALSE 3960
// begin uc_side = 2 ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_INT 2
3890: ST_TO_ADDR
// uc_nation = nation_arabian ;
3891: LD_ADDR_OWVAR 21
3895: PUSH
3896: LD_INT 2
3898: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3899: LD_INT 0
3901: PPUSH
3902: LD_EXP 32
3906: PUSH
3907: LD_INT 1
3909: MINUS
3910: PPUSH
3911: CALL_OW 381
// unit = CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3925: LD_ADDR_EXP 65
3929: PUSH
3930: LD_EXP 65
3934: PUSH
3935: LD_VAR 0 4
3939: ADD
3940: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3941: LD_VAR 0 4
3945: PPUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 49
// end ;
3958: GO 3880
3960: POP
3961: POP
// for i := 1 to rand ( 1 , 3 ) do
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: DOUBLE
3968: LD_INT 1
3970: DEC
3971: ST_TO_ADDR
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 12
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4059
// begin uc_side = 2 ;
3986: LD_ADDR_OWVAR 20
3990: PUSH
3991: LD_INT 2
3993: ST_TO_ADDR
// uc_nation = nation_arabian ;
3994: LD_ADDR_OWVAR 21
3998: PUSH
3999: LD_INT 2
4001: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_EXP 32
4009: PPUSH
4010: CALL_OW 384
// unit = CreateHuman ;
4014: LD_ADDR_VAR 0 4
4018: PUSH
4019: CALL_OW 44
4023: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4024: LD_ADDR_EXP 65
4028: PUSH
4029: LD_EXP 65
4033: PUSH
4034: LD_VAR 0 4
4038: ADD
4039: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4040: LD_VAR 0 4
4044: PPUSH
4045: LD_VAR 0 1
4049: PPUSH
4050: LD_INT 0
4052: PPUSH
4053: CALL_OW 49
// end ;
4057: GO 3983
4059: POP
4060: POP
// end ;
4061: LD_VAR 0 2
4065: RET
// export function PrepareArabianKiller ; var un ; begin
4066: LD_INT 0
4068: PPUSH
4069: PPUSH
// uc_side = 5 ;
4070: LD_ADDR_OWVAR 20
4074: PUSH
4075: LD_INT 5
4077: ST_TO_ADDR
// uc_nation = nation_arabian ;
4078: LD_ADDR_OWVAR 21
4082: PUSH
4083: LD_INT 2
4085: ST_TO_ADDR
// hc_class = class_soldier ;
4086: LD_ADDR_OWVAR 28
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4094: LD_ADDR_OWVAR 31
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: ST_TO_ADDR
// un = CreateHuman ;
4117: LD_ADDR_VAR 0 2
4121: PUSH
4122: CALL_OW 44
4126: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4127: LD_VAR 0 2
4131: PPUSH
4132: LD_INT 12
4134: PPUSH
4135: LD_INT 0
4137: PPUSH
4138: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_EXP 54
4151: PPUSH
4152: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4156: LD_ADDR_EXP 23
4160: PUSH
4161: LD_EXP 23
4165: PUSH
4166: LD_INT 1
4168: PLUS
4169: ST_TO_ADDR
// end ;
4170: LD_VAR 0 1
4174: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4175: LD_INT 0
4177: PPUSH
4178: PPUSH
4179: PPUSH
4180: PPUSH
// firstAttackGroup = [ ] ;
4181: LD_ADDR_EXP 64
4185: PUSH
4186: EMPTY
4187: ST_TO_ADDR
// uc_side = 2 ;
4188: LD_ADDR_OWVAR 20
4192: PUSH
4193: LD_INT 2
4195: ST_TO_ADDR
// uc_nation = nation_arabian ;
4196: LD_ADDR_OWVAR 21
4200: PUSH
4201: LD_INT 2
4203: ST_TO_ADDR
// for i := 1 to 3 do
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_INT 3
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4279
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4220: LD_INT 0
4222: PPUSH
4223: LD_EXP 32
4227: PUSH
4228: LD_INT 2
4230: MINUS
4231: PPUSH
4232: CALL_OW 381
// unit = CreateHuman ;
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: CALL_OW 44
4245: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4246: LD_ADDR_EXP 64
4250: PUSH
4251: LD_EXP 64
4255: PUSH
4256: LD_VAR 0 3
4260: ADD
4261: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_INT 7
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 49
// end ;
4277: GO 4217
4279: POP
4280: POP
// vc_weapon = ar_light_gun ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 23
4288: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4289: LD_ADDR_OWVAR 37
4293: PUSH
4294: LD_INT 13
4296: ST_TO_ADDR
// vc_control = control_manual ;
4297: LD_ADDR_OWVAR 38
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// vc_engine = engine_combustion ;
4305: LD_ADDR_OWVAR 39
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4313: LD_ADDR_OWVAR 41
4317: PUSH
4318: LD_INT 100
4320: ST_TO_ADDR
// veh = CreateVehicle ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: CALL_OW 45
4330: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4331: LD_ADDR_EXP 64
4335: PUSH
4336: LD_EXP 64
4340: PUSH
4341: LD_VAR 0 4
4345: ADD
4346: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4347: LD_VAR 0 4
4351: PPUSH
4352: LD_INT 7
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_EXP 32
4369: PUSH
4370: LD_INT 1
4372: MINUS
4373: PPUSH
4374: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4378: CALL_OW 44
4382: PPUSH
4383: LD_VAR 0 4
4387: PPUSH
4388: CALL_OW 52
// end ; end_of_file
4392: LD_VAR 0 1
4396: RET
// export function Nef_PrepareNature ; var i , un ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4402: LD_ADDR_VAR 0 2
4406: PUSH
4407: DOUBLE
4408: LD_INT 1
4410: DEC
4411: ST_TO_ADDR
4412: LD_EXP 26
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4532
// begin uc_side = 0 ;
4424: LD_ADDR_OWVAR 20
4428: PUSH
4429: LD_INT 0
4431: ST_TO_ADDR
// uc_nation = nation_nature ;
4432: LD_ADDR_OWVAR 21
4436: PUSH
4437: LD_INT 0
4439: ST_TO_ADDR
// hc_class = class_apeman ;
4440: LD_ADDR_OWVAR 28
4444: PUSH
4445: LD_INT 12
4447: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4448: LD_ADDR_OWVAR 31
4452: PUSH
4453: LD_EXP 27
4457: PUSH
4458: LD_INT 1
4460: ARRAY
4461: PUSH
4462: LD_EXP 27
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: PUSH
4471: LD_EXP 27
4475: PUSH
4476: LD_INT 3
4478: ARRAY
4479: PUSH
4480: LD_EXP 27
4484: PUSH
4485: LD_INT 4
4487: ARRAY
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4495: LD_ADDR_OWVAR 35
4499: PUSH
4500: LD_EXP 28
4504: ST_TO_ADDR
// un = CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_INT 8
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
// end ;
4530: GO 4421
4532: POP
4533: POP
// for i := 1 to animalsAmount [ 2 ] do
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: DOUBLE
4540: LD_INT 1
4542: DEC
4543: ST_TO_ADDR
4544: LD_EXP 26
4548: PUSH
4549: LD_INT 2
4551: ARRAY
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4664
// begin uc_side = 0 ;
4556: LD_ADDR_OWVAR 20
4560: PUSH
4561: LD_INT 0
4563: ST_TO_ADDR
// uc_nation = nation_nature ;
4564: LD_ADDR_OWVAR 21
4568: PUSH
4569: LD_INT 0
4571: ST_TO_ADDR
// hc_class = class_phororhacos ;
4572: LD_ADDR_OWVAR 28
4576: PUSH
4577: LD_INT 18
4579: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4580: LD_ADDR_OWVAR 31
4584: PUSH
4585: LD_EXP 27
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PUSH
4594: LD_EXP 27
4598: PUSH
4599: LD_INT 2
4601: ARRAY
4602: PUSH
4603: LD_EXP 27
4607: PUSH
4608: LD_INT 3
4610: ARRAY
4611: PUSH
4612: LD_EXP 27
4616: PUSH
4617: LD_INT 4
4619: ARRAY
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4627: LD_ADDR_OWVAR 35
4631: PUSH
4632: LD_EXP 28
4636: ST_TO_ADDR
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 8
4654: PPUSH
4655: LD_INT 0
4657: PPUSH
4658: CALL_OW 49
// end ;
4662: GO 4553
4664: POP
4665: POP
// for i := 1 to animalsAmount [ 3 ] do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_EXP 26
4680: PUSH
4681: LD_INT 3
4683: ARRAY
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4796
// begin uc_side = 0 ;
4688: LD_ADDR_OWVAR 20
4692: PUSH
4693: LD_INT 0
4695: ST_TO_ADDR
// uc_nation = nation_nature ;
4696: LD_ADDR_OWVAR 21
4700: PUSH
4701: LD_INT 0
4703: ST_TO_ADDR
// hc_class = class_tiger ;
4704: LD_ADDR_OWVAR 28
4708: PUSH
4709: LD_INT 14
4711: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4712: LD_ADDR_OWVAR 31
4716: PUSH
4717: LD_EXP 27
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PUSH
4726: LD_EXP 27
4730: PUSH
4731: LD_INT 2
4733: ARRAY
4734: PUSH
4735: LD_EXP 27
4739: PUSH
4740: LD_INT 3
4742: ARRAY
4743: PUSH
4744: LD_EXP 27
4748: PUSH
4749: LD_INT 4
4751: ARRAY
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4759: LD_ADDR_OWVAR 35
4763: PUSH
4764: LD_EXP 28
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 8
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// end ;
4794: GO 4685
4796: POP
4797: POP
// for i := 1 to animalsAmount [ 4 ] do
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: DOUBLE
4804: LD_INT 1
4806: DEC
4807: ST_TO_ADDR
4808: LD_EXP 26
4812: PUSH
4813: LD_INT 4
4815: ARRAY
4816: PUSH
4817: FOR_TO
4818: IFFALSE 4928
// begin uc_side = 0 ;
4820: LD_ADDR_OWVAR 20
4824: PUSH
4825: LD_INT 0
4827: ST_TO_ADDR
// uc_nation = nation_nature ;
4828: LD_ADDR_OWVAR 21
4832: PUSH
4833: LD_INT 0
4835: ST_TO_ADDR
// hc_class = 21 ;
4836: LD_ADDR_OWVAR 28
4840: PUSH
4841: LD_INT 21
4843: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4844: LD_ADDR_OWVAR 31
4848: PUSH
4849: LD_EXP 27
4853: PUSH
4854: LD_INT 1
4856: ARRAY
4857: PUSH
4858: LD_EXP 27
4862: PUSH
4863: LD_INT 2
4865: ARRAY
4866: PUSH
4867: LD_EXP 27
4871: PUSH
4872: LD_INT 3
4874: ARRAY
4875: PUSH
4876: LD_EXP 27
4880: PUSH
4881: LD_INT 4
4883: ARRAY
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4891: LD_ADDR_OWVAR 35
4895: PUSH
4896: LD_EXP 28
4900: ST_TO_ADDR
// un = CreateHuman ;
4901: LD_ADDR_VAR 0 3
4905: PUSH
4906: CALL_OW 44
4910: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4911: LD_VAR 0 3
4915: PPUSH
4916: LD_INT 8
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 49
// end ;
4926: GO 4817
4928: POP
4929: POP
// for i := 1 to animalsAmount [ 5 ] do
4930: LD_ADDR_VAR 0 2
4934: PUSH
4935: DOUBLE
4936: LD_INT 1
4938: DEC
4939: ST_TO_ADDR
4940: LD_EXP 26
4944: PUSH
4945: LD_INT 5
4947: ARRAY
4948: PUSH
4949: FOR_TO
4950: IFFALSE 5011
// begin uc_side = 0 ;
4952: LD_ADDR_OWVAR 20
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// uc_nation = nation_nature ;
4960: LD_ADDR_OWVAR 21
4964: PUSH
4965: LD_INT 0
4967: ST_TO_ADDR
// vc_chassis := 31 ;
4968: LD_ADDR_OWVAR 37
4972: PUSH
4973: LD_INT 31
4975: ST_TO_ADDR
// vc_control := control_rider ;
4976: LD_ADDR_OWVAR 38
4980: PUSH
4981: LD_INT 4
4983: ST_TO_ADDR
// un := CreateVehicle ;
4984: LD_ADDR_VAR 0 3
4988: PUSH
4989: CALL_OW 45
4993: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4994: LD_VAR 0 3
4998: PPUSH
4999: LD_INT 8
5001: PPUSH
5002: LD_INT 0
5004: PPUSH
5005: CALL_OW 49
// end ;
5009: GO 4949
5011: POP
5012: POP
// end ; end_of_file
5013: LD_VAR 0 1
5017: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5018: LD_INT 0
5020: PPUSH
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
5025: PPUSH
5026: PPUSH
5027: PPUSH
5028: PPUSH
5029: PPUSH
5030: PPUSH
5031: PPUSH
5032: PPUSH
5033: PPUSH
5034: PPUSH
5035: PPUSH
5036: PPUSH
5037: PPUSH
// for unit in units do
5038: LD_ADDR_VAR 0 8
5042: PUSH
5043: LD_VAR 0 1
5047: PUSH
5048: FOR_IN
5049: IFFALSE 5086
// if not ignorePath then
5051: LD_VAR 0 3
5055: NOT
5056: IFFALSE 5072
// SetTag ( unit , 0 ) else
5058: LD_VAR 0 8
5062: PPUSH
5063: LD_INT 0
5065: PPUSH
5066: CALL_OW 109
5070: GO 5084
// SetTag ( unit , 1 ) ;
5072: LD_VAR 0 8
5076: PPUSH
5077: LD_INT 1
5079: PPUSH
5080: CALL_OW 109
5084: GO 5048
5086: POP
5087: POP
// startAttacks = false ;
5088: LD_ADDR_VAR 0 21
5092: PUSH
5093: LD_INT 0
5095: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5096: LD_ADDR_VAR 0 17
5100: PUSH
5101: LD_VAR 0 2
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PUSH
5112: LD_INT 1
5114: ARRAY
5115: PUSH
5116: LD_VAR 0 2
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: ST_TO_ADDR
// mechanics = [ ] ;
5135: LD_ADDR_VAR 0 12
5139: PUSH
5140: EMPTY
5141: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5142: LD_ADDR_VAR 0 9
5146: PUSH
5147: LD_VAR 0 1
5151: PPUSH
5152: LD_INT 50
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 72
5194: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5195: LD_ADDR_VAR 0 11
5199: PUSH
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_INT 50
5207: PUSH
5208: EMPTY
5209: LIST
5210: PUSH
5211: LD_INT 25
5213: PUSH
5214: LD_INT 4
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 72
5229: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5230: LD_ADDR_VAR 0 13
5234: PUSH
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_INT 21
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 24
5255: PUSH
5256: LD_INT 1000
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 72
5275: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5276: LD_ADDR_VAR 0 15
5280: PUSH
5281: LD_INT 9
5283: PPUSH
5284: CALL_OW 435
5288: ST_TO_ADDR
// if not ignorePath then
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 6276
// begin for unit in attackUnits do
5296: LD_ADDR_VAR 0 8
5300: PUSH
5301: LD_VAR 0 9
5305: PUSH
5306: FOR_IN
5307: IFFALSE 6050
// begin if path and not startAttacks then
5309: LD_VAR 0 2
5313: PUSH
5314: LD_VAR 0 21
5318: NOT
5319: AND
5320: IFFALSE 6039
// begin i = 1 ;
5322: LD_ADDR_VAR 0 7
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5330: LD_ADDR_VAR 0 15
5334: PUSH
5335: LD_INT 9
5337: PPUSH
5338: CALL_OW 435
5342: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5343: LD_ADDR_VAR 0 18
5347: PUSH
5348: LD_INT 81
5350: PUSH
5351: LD_VAR 0 8
5355: PPUSH
5356: CALL_OW 255
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_VAR 0 8
5374: PPUSH
5375: CALL_OW 74
5379: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5380: LD_ADDR_VAR 0 19
5384: PUSH
5385: LD_VAR 0 15
5389: PPUSH
5390: LD_VAR 0 8
5394: PPUSH
5395: CALL_OW 250
5399: PPUSH
5400: LD_VAR 0 8
5404: PPUSH
5405: CALL_OW 251
5409: PPUSH
5410: CALL_OW 439
5414: ST_TO_ADDR
// if damageUnits and medics then
5415: LD_VAR 0 13
5419: PUSH
5420: LD_VAR 0 11
5424: AND
5425: IFFALSE 5447
// ComHeal ( medics , damageUnits [ 1 ] ) else
5427: LD_VAR 0 11
5431: PPUSH
5432: LD_VAR 0 13
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: CALL_OW 128
5445: GO 5490
// if medics then
5447: LD_VAR 0 11
5451: IFFALSE 5490
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5453: LD_VAR 0 11
5457: PPUSH
5458: LD_VAR 0 9
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 250
5471: PPUSH
5472: LD_VAR 0 9
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 251
5485: PPUSH
5486: CALL_OW 111
// if not HasTask ( unit ) then
5490: LD_VAR 0 8
5494: PPUSH
5495: CALL_OW 314
5499: NOT
5500: IFFALSE 5739
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5502: LD_ADDR_VAR 0 19
5506: PUSH
5507: LD_VAR 0 15
5511: PPUSH
5512: LD_VAR 0 8
5516: PPUSH
5517: CALL_OW 250
5521: PPUSH
5522: LD_VAR 0 8
5526: PPUSH
5527: CALL_OW 251
5531: PPUSH
5532: CALL_OW 439
5536: ST_TO_ADDR
// if i > crates then
5537: LD_VAR 0 7
5541: PUSH
5542: LD_VAR 0 15
5546: GREATER
5547: IFFALSE 5557
// i = 1 ;
5549: LD_ADDR_VAR 0 7
5553: PUSH
5554: LD_INT 1
5556: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5557: LD_VAR 0 18
5561: PUSH
5562: LD_VAR 0 19
5566: AND
5567: IFFALSE 5682
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5569: LD_VAR 0 8
5573: PPUSH
5574: LD_VAR 0 18
5578: PPUSH
5579: CALL_OW 250
5583: PPUSH
5584: LD_VAR 0 18
5588: PPUSH
5589: CALL_OW 251
5593: PPUSH
5594: CALL_OW 297
5598: PUSH
5599: LD_VAR 0 8
5603: PPUSH
5604: LD_VAR 0 19
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 19
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 297
5626: LESS
5627: IFFALSE 5645
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5629: LD_VAR 0 9
5633: PPUSH
5634: LD_VAR 0 18
5638: PPUSH
5639: CALL_OW 115
5643: GO 5680
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5645: LD_VAR 0 9
5649: PPUSH
5650: LD_VAR 0 15
5654: PUSH
5655: LD_VAR 0 7
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 15
5665: PUSH
5666: LD_VAR 0 7
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: CALL_OW 116
// end else
5680: GO 5739
// if crates then
5682: LD_VAR 0 15
5686: IFFALSE 5725
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5688: LD_VAR 0 9
5692: PPUSH
5693: LD_VAR 0 15
5697: PUSH
5698: LD_VAR 0 7
5702: ARRAY
5703: PPUSH
5704: LD_VAR 0 15
5708: PUSH
5709: LD_VAR 0 7
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: ARRAY
5718: PPUSH
5719: CALL_OW 116
5723: GO 5739
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5725: LD_VAR 0 9
5729: PPUSH
5730: LD_VAR 0 18
5734: PPUSH
5735: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// if path then
5746: LD_VAR 0 2
5750: IFFALSE 5836
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5752: LD_ADDR_VAR 0 16
5756: PUSH
5757: LD_VAR 0 8
5761: PPUSH
5762: LD_VAR 0 2
5766: PPUSH
5767: CALL 7166 0 2
5771: ST_TO_ADDR
// if agressiveMove then
5772: LD_VAR 0 4
5776: IFFALSE 5807
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5778: LD_VAR 0 9
5782: PPUSH
5783: LD_VAR 0 16
5787: PUSH
5788: LD_INT 1
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 16
5796: PUSH
5797: LD_INT 2
5799: ARRAY
5800: PPUSH
5801: CALL_OW 114
5805: GO 5834
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5807: LD_VAR 0 9
5811: PPUSH
5812: LD_VAR 0 16
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: LD_VAR 0 16
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 111
// end else
5834: GO 5844
// startAttacks = true ;
5836: LD_ADDR_VAR 0 21
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// i = i + 2 ;
5844: LD_ADDR_VAR 0 7
5848: PUSH
5849: LD_VAR 0 7
5853: PUSH
5854: LD_INT 2
5856: PLUS
5857: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5858: LD_VAR 0 8
5862: PPUSH
5863: CALL_OW 314
5867: NOT
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_VAR 0 8
5876: PPUSH
5877: CALL_OW 255
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 92
5888: PUSH
5889: LD_VAR 0 16
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PUSH
5898: LD_VAR 0 16
5902: PUSH
5903: LD_INT 2
5905: ARRAY
5906: PUSH
5907: LD_INT 4
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_INT 3
5927: GREATER
5928: AND
5929: PUSH
5930: LD_VAR 0 21
5934: NOT
5935: AND
5936: IFFALSE 5330
// for i := 1 to path do
5938: LD_ADDR_VAR 0 7
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6037
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5956: LD_VAR 0 2
5960: PUSH
5961: LD_VAR 0 7
5965: ARRAY
5966: PUSH
5967: LD_INT 1
5969: ARRAY
5970: PUSH
5971: LD_VAR 0 16
5975: PUSH
5976: LD_INT 1
5978: ARRAY
5979: EQUAL
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_VAR 0 7
5990: ARRAY
5991: PUSH
5992: LD_INT 2
5994: ARRAY
5995: PUSH
5996: LD_VAR 0 16
6000: PUSH
6001: LD_INT 2
6003: ARRAY
6004: EQUAL
6005: AND
6006: IFFALSE 6035
// begin path = path diff [ path [ i ] ] ;
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: LD_VAR 0 2
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_VAR 0 7
6027: ARRAY
6028: PUSH
6029: EMPTY
6030: LIST
6031: DIFF
6032: ST_TO_ADDR
// break ;
6033: GO 6037
// end ;
6035: GO 5953
6037: POP
6038: POP
// end ; if not path then
6039: LD_VAR 0 2
6043: NOT
6044: IFFALSE 6048
// break ;
6046: GO 6050
// end ;
6048: GO 5306
6050: POP
6051: POP
// repeat unitsReachPathEnd = 0 ;
6052: LD_ADDR_VAR 0 20
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// for attackUnit in attackUnits do
6060: LD_ADDR_VAR 0 10
6064: PUSH
6065: LD_VAR 0 9
6069: PUSH
6070: FOR_IN
6071: IFFALSE 6244
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6073: LD_VAR 0 10
6077: PPUSH
6078: LD_VAR 0 17
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: LD_VAR 0 17
6091: PUSH
6092: LD_INT 2
6094: ARRAY
6095: PPUSH
6096: CALL_OW 297
6100: PUSH
6101: LD_INT 7
6103: LESS
6104: NOT
6105: PUSH
6106: LD_VAR 0 10
6110: PPUSH
6111: CALL_OW 110
6115: PUSH
6116: LD_INT 0
6118: EQUAL
6119: AND
6120: IFFALSE 6186
// begin if agressiveMove then
6122: LD_VAR 0 4
6126: IFFALSE 6157
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6128: LD_VAR 0 10
6132: PPUSH
6133: LD_VAR 0 17
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: LD_VAR 0 17
6146: PUSH
6147: LD_INT 2
6149: ARRAY
6150: PPUSH
6151: CALL_OW 114
6155: GO 6184
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6157: LD_VAR 0 10
6161: PPUSH
6162: LD_VAR 0 17
6166: PUSH
6167: LD_INT 1
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 17
6175: PUSH
6176: LD_INT 2
6178: ARRAY
6179: PPUSH
6180: CALL_OW 111
// end else
6184: GO 6213
// if GetTag ( attackUnit ) = 0 then
6186: LD_VAR 0 10
6190: PPUSH
6191: CALL_OW 110
6195: PUSH
6196: LD_INT 0
6198: EQUAL
6199: IFFALSE 6213
// SetTag ( attackUnit , 1 ) ;
6201: LD_VAR 0 10
6205: PPUSH
6206: LD_INT 1
6208: PPUSH
6209: CALL_OW 109
// if GetTag ( unit ) = 1 then
6213: LD_VAR 0 8
6217: PPUSH
6218: CALL_OW 110
6222: PUSH
6223: LD_INT 1
6225: EQUAL
6226: IFFALSE 6242
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6228: LD_ADDR_VAR 0 20
6232: PUSH
6233: LD_VAR 0 20
6237: PUSH
6238: LD_INT 1
6240: PLUS
6241: ST_TO_ADDR
// end ;
6242: GO 6070
6244: POP
6245: POP
// wait ( 0 0$1 ) ;
6246: LD_INT 35
6248: PPUSH
6249: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6253: LD_VAR 0 20
6257: PUSH
6258: LD_VAR 0 9
6262: PUSH
6263: LD_INT 3
6265: MINUS
6266: GREATER
6267: IFFALSE 6052
// wait ( 0 0$10 ) ;
6269: LD_INT 350
6271: PPUSH
6272: CALL_OW 67
// end ; for attackUnit in attackUnits do
6276: LD_ADDR_VAR 0 10
6280: PUSH
6281: LD_VAR 0 9
6285: PUSH
6286: FOR_IN
6287: IFFALSE 6303
// SetTag ( attackUnit , 2 ) ;
6289: LD_VAR 0 10
6293: PPUSH
6294: LD_INT 2
6296: PPUSH
6297: CALL_OW 109
6301: GO 6286
6303: POP
6304: POP
// startAttacks = true ;
6305: LD_ADDR_VAR 0 21
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// if startAttacks then
6313: LD_VAR 0 21
6317: IFFALSE 7136
// begin repeat wait ( 0 0$1 ) ;
6319: LD_INT 35
6321: PPUSH
6322: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6326: LD_ADDR_VAR 0 11
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 50
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 72
6360: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6361: LD_ADDR_VAR 0 13
6365: PUSH
6366: LD_VAR 0 1
6370: PPUSH
6371: LD_INT 21
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: LD_INT 25
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 24
6396: PUSH
6397: LD_INT 1000
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: ST_TO_ADDR
// if damageUnits and medics then
6418: LD_VAR 0 13
6422: PUSH
6423: LD_VAR 0 11
6427: AND
6428: IFFALSE 6450
// ComHeal ( medics , damageUnits [ 1 ] ) else
6430: LD_VAR 0 11
6434: PPUSH
6435: LD_VAR 0 13
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: CALL_OW 128
6448: GO 6500
// if medics and not damageUnits then
6450: LD_VAR 0 11
6454: PUSH
6455: LD_VAR 0 13
6459: NOT
6460: AND
6461: IFFALSE 6500
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6463: LD_VAR 0 11
6467: PPUSH
6468: LD_VAR 0 9
6472: PUSH
6473: LD_INT 1
6475: ARRAY
6476: PPUSH
6477: CALL_OW 250
6481: PPUSH
6482: LD_VAR 0 9
6486: PUSH
6487: LD_INT 1
6489: ARRAY
6490: PPUSH
6491: CALL_OW 251
6495: PPUSH
6496: CALL_OW 111
// for attackUnit in attackUnits do
6500: LD_ADDR_VAR 0 10
6504: PUSH
6505: LD_VAR 0 9
6509: PUSH
6510: FOR_IN
6511: IFFALSE 7127
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6513: LD_ADDR_VAR 0 22
6517: PUSH
6518: LD_INT 81
6520: PUSH
6521: LD_VAR 0 10
6525: PPUSH
6526: CALL_OW 255
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: PPUSH
6540: LD_VAR 0 10
6544: PPUSH
6545: CALL_OW 74
6549: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6550: LD_ADDR_VAR 0 23
6554: PUSH
6555: LD_INT 81
6557: PUSH
6558: LD_VAR 0 10
6562: PPUSH
6563: CALL_OW 255
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 59
6577: PUSH
6578: EMPTY
6579: LIST
6580: PUSH
6581: LD_INT 21
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 21
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: PPUSH
6619: LD_VAR 0 10
6623: PPUSH
6624: CALL_OW 74
6628: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6629: LD_VAR 0 10
6633: PPUSH
6634: CALL_OW 110
6638: PUSH
6639: LD_INT 2
6641: EQUAL
6642: IFFALSE 6802
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6644: LD_VAR 0 10
6648: PPUSH
6649: LD_VAR 0 22
6653: PPUSH
6654: CALL_OW 296
6658: PUSH
6659: LD_INT 10
6661: PLUS
6662: PUSH
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 23
6672: PPUSH
6673: CALL_OW 296
6677: LESS
6678: IFFALSE 6696
// ComAttackUnit ( attackUnit , target1 ) else
6680: LD_VAR 0 10
6684: PPUSH
6685: LD_VAR 0 22
6689: PPUSH
6690: CALL_OW 115
6694: GO 6710
// ComAttackUnit ( attackUnit , target2 ) ;
6696: LD_VAR 0 10
6700: PPUSH
6701: LD_VAR 0 23
6705: PPUSH
6706: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6710: LD_VAR 0 10
6714: PPUSH
6715: CALL_OW 256
6719: PUSH
6720: LD_INT 650
6722: LESS
6723: PUSH
6724: LD_VAR 0 10
6728: PPUSH
6729: CALL_OW 247
6733: PUSH
6734: LD_INT 2
6736: EQUAL
6737: AND
6738: PUSH
6739: LD_VAR 0 10
6743: PPUSH
6744: CALL_OW 263
6748: PUSH
6749: LD_INT 1
6751: EQUAL
6752: AND
6753: IFFALSE 6802
// begin SetTag ( attackUnit , 3 ) ;
6755: LD_VAR 0 10
6759: PPUSH
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 313
6776: PUSH
6777: LD_INT 1
6779: ARRAY
6780: PPUSH
6781: LD_INT 3
6783: PPUSH
6784: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6788: LD_VAR 0 10
6792: PPUSH
6793: LD_VAR 0 5
6797: PPUSH
6798: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6802: LD_VAR 0 10
6806: PPUSH
6807: LD_VAR 0 5
6811: PPUSH
6812: CALL_OW 308
6816: PUSH
6817: LD_VAR 0 10
6821: PPUSH
6822: CALL_OW 110
6826: PUSH
6827: LD_INT 3
6829: EQUAL
6830: AND
6831: PUSH
6832: LD_VAR 0 10
6836: PPUSH
6837: CALL_OW 313
6841: AND
6842: IFFALSE 6915
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6844: LD_ADDR_VAR 0 14
6848: PUSH
6849: LD_VAR 0 10
6853: PPUSH
6854: CALL_OW 313
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: ST_TO_ADDR
// if not driver in mechanics then
6863: LD_VAR 0 14
6867: PUSH
6868: LD_VAR 0 12
6872: IN
6873: NOT
6874: IFFALSE 6892
// mechanics = mechanics ^ driver ;
6876: LD_ADDR_VAR 0 12
6880: PUSH
6881: LD_VAR 0 12
6885: PUSH
6886: LD_VAR 0 14
6890: ADD
6891: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6892: LD_VAR 0 14
6896: PPUSH
6897: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6901: LD_VAR 0 14
6905: PPUSH
6906: LD_VAR 0 10
6910: PPUSH
6911: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6915: LD_VAR 0 10
6919: PPUSH
6920: CALL_OW 256
6924: PUSH
6925: LD_INT 1000
6927: EQUAL
6928: IFFALSE 7046
// begin SetTag ( attackUnit , 2 ) ;
6930: LD_VAR 0 10
6934: PPUSH
6935: LD_INT 2
6937: PPUSH
6938: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6942: LD_VAR 0 10
6946: PPUSH
6947: CALL_OW 247
6951: PUSH
6952: LD_INT 2
6954: EQUAL
6955: PUSH
6956: LD_VAR 0 10
6960: PPUSH
6961: CALL_OW 263
6965: PUSH
6966: LD_INT 1
6968: EQUAL
6969: AND
6970: PUSH
6971: LD_VAR 0 10
6975: PPUSH
6976: CALL_OW 313
6980: NOT
6981: AND
6982: IFFALSE 7046
// begin SetFuel ( attackUnit , 100 ) ;
6984: LD_VAR 0 10
6988: PPUSH
6989: LD_INT 100
6991: PPUSH
6992: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6996: LD_VAR 0 12
7000: PPUSH
7001: LD_VAR 0 10
7005: PPUSH
7006: CALL_OW 74
7010: PPUSH
7011: LD_VAR 0 10
7015: PPUSH
7016: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7020: LD_ADDR_VAR 0 12
7024: PUSH
7025: LD_VAR 0 12
7029: PUSH
7030: LD_VAR 0 12
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 74
7044: DIFF
7045: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7046: LD_ADDR_VAR 0 8
7050: PUSH
7051: LD_VAR 0 12
7055: PUSH
7056: FOR_IN
7057: IFFALSE 7123
// begin if not IsInArea ( unit , retreatArea ) then
7059: LD_VAR 0 8
7063: PPUSH
7064: LD_VAR 0 5
7068: PPUSH
7069: CALL_OW 308
7073: NOT
7074: IFFALSE 7090
// ComMoveToArea ( unit , retreatArea ) ;
7076: LD_VAR 0 8
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 113
// if GetLives ( unit ) < 250 then
7090: LD_VAR 0 8
7094: PPUSH
7095: CALL_OW 256
7099: PUSH
7100: LD_INT 250
7102: LESS
7103: IFFALSE 7121
// mechanics = mechanics diff unit ;
7105: LD_ADDR_VAR 0 12
7109: PUSH
7110: LD_VAR 0 12
7114: PUSH
7115: LD_VAR 0 8
7119: DIFF
7120: ST_TO_ADDR
// end ;
7121: GO 7056
7123: POP
7124: POP
// end ;
7125: GO 6510
7127: POP
7128: POP
// until not attackUnits ;
7129: LD_VAR 0 9
7133: NOT
7134: IFFALSE 6319
// end ; wait ( 0 0$1 ) ;
7136: LD_INT 35
7138: PPUSH
7139: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7143: LD_VAR 0 1
7147: PPUSH
7148: LD_INT 50
7150: PUSH
7151: EMPTY
7152: LIST
7153: PPUSH
7154: CALL_OW 72
7158: NOT
7159: IFFALSE 5142
// end ;
7161: LD_VAR 0 6
7165: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7166: LD_INT 0
7168: PPUSH
7169: PPUSH
7170: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7171: LD_ADDR_VAR 0 5
7175: PUSH
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PUSH
7185: LD_INT 1
7187: ARRAY
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: LD_INT 1
7196: ARRAY
7197: PUSH
7198: LD_INT 2
7200: ARRAY
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// for i := 2 to path do
7206: LD_ADDR_VAR 0 4
7210: PUSH
7211: DOUBLE
7212: LD_INT 2
7214: DEC
7215: ST_TO_ADDR
7216: LD_VAR 0 2
7220: PUSH
7221: FOR_TO
7222: IFFALSE 7362
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_VAR 0 2
7233: PUSH
7234: LD_VAR 0 4
7238: ARRAY
7239: PUSH
7240: LD_INT 1
7242: ARRAY
7243: PPUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_VAR 0 4
7253: ARRAY
7254: PUSH
7255: LD_INT 2
7257: ARRAY
7258: PPUSH
7259: CALL_OW 297
7263: PUSH
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 5
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL_OW 297
7291: LESS
7292: IFFALSE 7360
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7294: LD_ADDR_VAR 0 5
7298: PUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_VAR 0 4
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: CALL_OW 1
7326: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7327: LD_ADDR_VAR 0 5
7331: PUSH
7332: LD_VAR 0 5
7336: PPUSH
7337: LD_INT 2
7339: PPUSH
7340: LD_VAR 0 2
7344: PUSH
7345: LD_VAR 0 4
7349: ARRAY
7350: PUSH
7351: LD_INT 2
7353: ARRAY
7354: PPUSH
7355: CALL_OW 1
7359: ST_TO_ADDR
// end ; end ;
7360: GO 7221
7362: POP
7363: POP
// result = nearPosition ;
7364: LD_ADDR_VAR 0 3
7368: PUSH
7369: LD_VAR 0 5
7373: ST_TO_ADDR
// end ;
7374: LD_VAR 0 3
7378: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7379: LD_EXP 58
7383: PPUSH
7384: CALL_OW 274
7388: PPUSH
7389: LD_INT 1
7391: PPUSH
7392: CALL_OW 275
7396: PUSH
7397: LD_INT 0
7399: GREATER
7400: IFFALSE 7506
7402: GO 7404
7404: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7405: LD_EXP 57
7409: PPUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 72
7424: PPUSH
7425: LD_INT 31
7427: PPUSH
7428: LD_INT 105
7430: PPUSH
7431: LD_INT 51
7433: PPUSH
7434: LD_INT 3
7436: PPUSH
7437: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7441: LD_EXP 57
7445: PPUSH
7446: LD_INT 25
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 72
7460: PPUSH
7461: LD_INT 31
7463: PPUSH
7464: LD_INT 114
7466: PPUSH
7467: LD_INT 58
7469: PPUSH
7470: LD_INT 3
7472: PPUSH
7473: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7477: LD_EXP 57
7481: PPUSH
7482: LD_INT 25
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 72
7496: PPUSH
7497: LD_EXP 58
7501: PPUSH
7502: CALL_OW 180
// end ; end_of_file
7506: END
// export function Lose_Burlak ; begin
7507: LD_INT 0
7509: PPUSH
// YouLost ( Burlak ) ;
7510: LD_STRING Burlak
7512: PPUSH
7513: CALL_OW 104
// end ;
7517: LD_VAR 0 1
7521: RET
// export function Lose_Gaydar ; begin
7522: LD_INT 0
7524: PPUSH
// YouLost ( Gaydar ) ;
7525: LD_STRING Gaydar
7527: PPUSH
7528: CALL_OW 104
// end ;
7532: LD_VAR 0 1
7536: RET
// export function Lose_SelfAttack ; begin
7537: LD_INT 0
7539: PPUSH
// YouLost ( SelfAttack ) ;
7540: LD_STRING SelfAttack
7542: PPUSH
7543: CALL_OW 104
// end ;
7547: LD_VAR 0 1
7551: RET
// export function Lose_Arrest ; begin
7552: LD_INT 0
7554: PPUSH
// YouLost ( Arrest ) ;
7555: LD_STRING Arrest
7557: PPUSH
7558: CALL_OW 104
// end ;
7562: LD_VAR 0 1
7566: RET
// export function Lose_ArabBreakthrough ; begin
7567: LD_INT 0
7569: PPUSH
// YouLost ( ArabBreakthrough ) ;
7570: LD_STRING ArabBreakthrough
7572: PPUSH
7573: CALL_OW 104
// end ;
7577: LD_VAR 0 1
7581: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7582: LD_EXP 7
7586: NOT
7587: PUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 21
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 25
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: NOT
7628: AND
7629: PUSH
7630: LD_INT 22
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 21
7642: PUSH
7643: LD_INT 3
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 30
7652: PUSH
7653: LD_INT 0
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: PPUSH
7665: CALL_OW 69
7669: NOT
7670: AND
7671: IFFALSE 7684
7673: GO 7675
7675: DISABLE
// begin enable ;
7676: ENABLE
// YouLost ( Engineer ) ;
7677: LD_STRING Engineer
7679: PPUSH
7680: CALL_OW 104
// end ; end_of_file
7684: END
// export function FinishMission ; begin
7685: LD_INT 0
7687: PPUSH
// SetRewards ;
7688: CALL 7709 0 0
// SavePlayerCharacters ;
7692: CALL 8134 0 0
// SaveGlobalVariables ;
7696: CALL 8362 0 0
// YouWin ;
7700: CALL_OW 103
// end ;
7704: LD_VAR 0 1
7708: RET
// function SetRewards ; var unitsToReward ; begin
7709: LD_INT 0
7711: PPUSH
7712: PPUSH
// SetAchievements ;
7713: CALL 18515 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7717: LD_INT 22
7719: PUSH
7720: LD_INT 3
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 3
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 69
7745: NOT
7746: IFFALSE 7760
// AddMedal ( Dismantle , 1 ) else
7748: LD_STRING Dismantle
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 101
7758: GO 7771
// AddMedal ( Dismantle , - 1 ) ;
7760: LD_STRING Dismantle
7762: PPUSH
7763: LD_INT 1
7765: NEG
7766: PPUSH
7767: CALL_OW 101
// if killedArabianUnits >= 25 then
7771: LD_EXP 22
7775: PUSH
7776: LD_INT 25
7778: GREATEREQUAL
7779: IFFALSE 7801
// begin AddMedal ( EnemyLosses , 1 ) ;
7781: LD_STRING EnemyLosses
7783: PPUSH
7784: LD_INT 1
7786: PPUSH
7787: CALL_OW 101
// heikeHeavyLosses = true ;
7791: LD_ADDR_EXP 4
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// end else
7799: GO 7812
// AddMedal ( EnemyLosses , - 1 ) ;
7801: LD_STRING EnemyLosses
7803: PPUSH
7804: LD_INT 1
7806: NEG
7807: PPUSH
7808: CALL_OW 101
// if not lostUnits then
7812: LD_EXP 24
7816: NOT
7817: IFFALSE 7831
// AddMedal ( LittleLosses , 1 ) else
7819: LD_STRING LittleLosses
7821: PPUSH
7822: LD_INT 1
7824: PPUSH
7825: CALL_OW 101
7829: GO 7842
// AddMedal ( LittleLosses , - 1 ) ;
7831: LD_STRING LittleLosses
7833: PPUSH
7834: LD_INT 1
7836: NEG
7837: PPUSH
7838: CALL_OW 101
// GiveMedals ( Main ) ;
7842: LD_STRING Main
7844: PPUSH
7845: CALL_OW 102
// unitsToReward = [ ] ;
7849: LD_ADDR_VAR 0 2
7853: PUSH
7854: EMPTY
7855: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7856: LD_EXP 42
7860: PPUSH
7861: CALL_OW 255
7865: PUSH
7866: LD_INT 3
7868: EQUAL
7869: IFFALSE 7887
// unitsToReward = unitsToReward ^ Burlak ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_VAR 0 2
7880: PUSH
7881: LD_EXP 42
7885: ADD
7886: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7887: LD_EXP 43
7891: PPUSH
7892: CALL_OW 255
7896: PUSH
7897: LD_INT 3
7899: EQUAL
7900: IFFALSE 7918
// unitsToReward = unitsToReward ^ Gnyevko ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 2
7911: PUSH
7912: LD_EXP 43
7916: ADD
7917: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7918: LD_EXP 44
7922: PPUSH
7923: CALL_OW 255
7927: PUSH
7928: LD_INT 3
7930: EQUAL
7931: IFFALSE 7949
// unitsToReward = unitsToReward ^ Kirilenkova ;
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_VAR 0 2
7942: PUSH
7943: LD_EXP 44
7947: ADD
7948: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7949: LD_EXP 45
7953: PPUSH
7954: CALL_OW 255
7958: PUSH
7959: LD_INT 3
7961: EQUAL
7962: IFFALSE 7980
// unitsToReward = unitsToReward ^ Kovalyuk ;
7964: LD_ADDR_VAR 0 2
7968: PUSH
7969: LD_VAR 0 2
7973: PUSH
7974: LD_EXP 45
7978: ADD
7979: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
7980: LD_EXP 46
7984: PPUSH
7985: CALL_OW 255
7989: PUSH
7990: LD_INT 3
7992: EQUAL
7993: IFFALSE 8011
// unitsToReward = unitsToReward ^ Belkov ;
7995: LD_ADDR_VAR 0 2
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_EXP 46
8009: ADD
8010: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8011: LD_EXP 47
8015: PPUSH
8016: CALL_OW 255
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8042
// unitsToReward = unitsToReward ^ Belkov2 ;
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 2
8035: PUSH
8036: LD_EXP 47
8040: ADD
8041: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8042: LD_EXP 48
8046: PPUSH
8047: CALL_OW 255
8051: PUSH
8052: LD_INT 3
8054: EQUAL
8055: IFFALSE 8073
// unitsToReward = unitsToReward ^ Scholtze ;
8057: LD_ADDR_VAR 0 2
8061: PUSH
8062: LD_VAR 0 2
8066: PUSH
8067: LD_EXP 48
8071: ADD
8072: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8073: LD_EXP 49
8077: PPUSH
8078: CALL_OW 255
8082: PUSH
8083: LD_INT 3
8085: EQUAL
8086: IFFALSE 8104
// unitsToReward = unitsToReward ^ Kuzmov ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_VAR 0 2
8097: PUSH
8098: LD_EXP 49
8102: ADD
8103: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_EXP 62
8118: ADD
8119: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: CALL_OW 43
// end ;
8129: LD_VAR 0 1
8133: RET
// function SavePlayerCharacters ; var othersYour ; begin
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8138: LD_EXP 42
8142: PPUSH
8143: LD_STRING 04_Burlak
8145: PPUSH
8146: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8150: LD_EXP 43
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_INT 3
8162: EQUAL
8163: IFFALSE 8177
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8165: LD_EXP 43
8169: PPUSH
8170: LD_STRING 04_Gnyevko
8172: PPUSH
8173: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8177: LD_EXP 45
8181: PPUSH
8182: CALL_OW 255
8186: PUSH
8187: LD_INT 3
8189: EQUAL
8190: IFFALSE 8204
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8192: LD_EXP 45
8196: PPUSH
8197: LD_STRING 04_Kovalyuk
8199: PPUSH
8200: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8204: LD_EXP 44
8208: PPUSH
8209: CALL_OW 255
8213: PUSH
8214: LD_INT 3
8216: EQUAL
8217: IFFALSE 8231
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8219: LD_EXP 44
8223: PPUSH
8224: LD_STRING 04_Kirilenkova
8226: PPUSH
8227: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8231: LD_EXP 48
8235: PPUSH
8236: CALL_OW 255
8240: PUSH
8241: LD_INT 3
8243: EQUAL
8244: IFFALSE 8258
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8246: LD_EXP 48
8250: PPUSH
8251: LD_STRING 04_Scholtze
8253: PPUSH
8254: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8258: LD_EXP 46
8262: PPUSH
8263: CALL_OW 255
8267: PUSH
8268: LD_INT 3
8270: EQUAL
8271: IFFALSE 8285
// SaveCharacters ( Belkov , 04_Belkov ) ;
8273: LD_EXP 46
8277: PPUSH
8278: LD_STRING 04_Belkov
8280: PPUSH
8281: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8285: LD_EXP 47
8289: PPUSH
8290: CALL_OW 255
8294: PUSH
8295: LD_INT 3
8297: EQUAL
8298: IFFALSE 8312
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8300: LD_EXP 47
8304: PPUSH
8305: LD_STRING 04_Belkov2
8307: PPUSH
8308: CALL_OW 38
// if IsOK ( Kuzmov ) then
8312: LD_EXP 49
8316: PPUSH
8317: CALL_OW 302
8321: IFFALSE 8335
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8323: LD_EXP 49
8327: PPUSH
8328: LD_STRING 04_Kuzmov
8330: PPUSH
8331: CALL_OW 38
// othersYour = randomsToSave ;
8335: LD_ADDR_VAR 0 2
8339: PUSH
8340: LD_EXP 62
8344: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8345: LD_EXP 62
8349: PPUSH
8350: LD_STRING 04_other_survivors
8352: PPUSH
8353: CALL_OW 38
// end ;
8357: LD_VAR 0 1
8361: RET
// function SaveGlobalVariables ; begin
8362: LD_INT 0
8364: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8365: LD_EXP 4
8369: PPUSH
8370: LD_STRING 04_HeikeHeavyLosses_1
8372: PPUSH
8373: CALL_OW 39
// end ; end_of_file
8377: LD_VAR 0 1
8381: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 255
8391: PUSH
8392: LD_INT 3
8394: EQUAL
8395: PUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 266
8405: PUSH
8406: LD_INT 0
8408: EQUAL
8409: AND
8410: PUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: LD_INT 5
8418: PPUSH
8419: CALL_OW 308
8423: NOT
8424: AND
8425: IFFALSE 8436
// Dial_DepotInWrongPlace ( building ) ;
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL 11025 0 1
// end ;
8436: PPOPN 2
8438: END
// on BuildingComplete ( building ) do var i , cargo ;
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 255
8452: PUSH
8453: LD_INT 3
8455: EQUAL
8456: PUSH
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 266
8466: PUSH
8467: LD_INT 0
8469: EQUAL
8470: AND
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: LD_INT 5
8479: PPUSH
8480: CALL_OW 308
8484: AND
8485: PUSH
8486: LD_EXP 8
8490: NOT
8491: AND
8492: PUSH
8493: LD_EXP 9
8497: NOT
8498: AND
8499: IFFALSE 8525
// begin namedBase = true ;
8501: LD_ADDR_EXP 9
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8509: LD_VAR 0 1
8513: PPUSH
8514: LD_STRING chuikov
8516: PPUSH
8517: CALL_OW 500
// Dial_FinishDepot ;
8521: CALL 11299 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 255
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 266
8548: PUSH
8549: LD_INT 32
8551: EQUAL
8552: AND
8553: IFFALSE 8569
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8555: LD_ADDR_EXP 25
8559: PUSH
8560: LD_EXP 25
8564: PUSH
8565: LD_INT 1
8567: PLUS
8568: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 255
8578: PUSH
8579: LD_INT 6
8581: EQUAL
8582: PUSH
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 266
8592: PUSH
8593: LD_INT 0
8595: EQUAL
8596: AND
8597: IFFALSE 8796
// begin secondBaseDepot = building ;
8599: LD_ADDR_EXP 58
8603: PUSH
8604: LD_VAR 0 1
8608: ST_TO_ADDR
// uc_side = 6 ;
8609: LD_ADDR_OWVAR 20
8613: PUSH
8614: LD_INT 6
8616: ST_TO_ADDR
// uc_nation = nation_russian ;
8617: LD_ADDR_OWVAR 21
8621: PUSH
8622: LD_INT 3
8624: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8625: LD_ADDR_OWVAR 37
8629: PUSH
8630: LD_INT 21
8632: ST_TO_ADDR
// vc_control = control_manual ;
8633: LD_ADDR_OWVAR 38
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// vc_engine = engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8649: LD_ADDR_OWVAR 40
8653: PUSH
8654: LD_INT 51
8656: ST_TO_ADDR
// cargo = CreateVehicle ;
8657: LD_ADDR_VAR 0 3
8661: PUSH
8662: CALL_OW 45
8666: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_INT 3
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_INT 100
8692: PPUSH
8693: CALL_OW 291
// ComGive ( cargo , building ) ;
8697: LD_VAR 0 3
8701: PPUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8721: CALL_OW 44
8725: PPUSH
8726: LD_VAR 0 3
8730: PPUSH
8731: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: DOUBLE
8741: LD_INT 10
8743: DEC
8744: ST_TO_ADDR
8745: LD_EXP 34
8749: PUSH
8750: FOR_TO
8751: IFFALSE 8794
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8753: LD_VAR 0 3
8757: PPUSH
8758: LD_EXP 34
8762: PUSH
8763: LD_VAR 0 2
8767: ARRAY
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_EXP 34
8777: PUSH
8778: LD_VAR 0 2
8782: ARRAY
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PPUSH
8788: CALL_OW 171
8792: GO 8750
8794: POP
8795: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 255
8805: PUSH
8806: LD_INT 6
8808: EQUAL
8809: PUSH
8810: LD_VAR 0 1
8814: PPUSH
8815: CALL_OW 266
8819: PUSH
8820: LD_INT 31
8822: EQUAL
8823: AND
8824: IFFALSE 8869
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8826: LD_EXP 57
8830: PPUSH
8831: LD_INT 25
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 56
8843: PUSH
8844: EMPTY
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 72
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 120
// end ;
8869: PPOPN 3
8871: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 266
8881: PUSH
8882: LD_INT 7
8884: EQUAL
8885: PUSH
8886: LD_EXP 15
8890: NOT
8891: AND
8892: IFFALSE 8898
// Dial_LabUpgraded ;
8894: CALL 11619 0 0
// end ;
8898: PPOPN 1
8900: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8901: LD_VAR 0 1
8905: PUSH
8906: LD_INT 3
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PUSH
8915: LD_INT 2
8917: EQUAL
8918: AND
8919: PUSH
8920: LD_VAR 0 1
8924: PUSH
8925: LD_INT 2
8927: EQUAL
8928: PUSH
8929: LD_VAR 0 2
8933: PUSH
8934: LD_INT 3
8936: EQUAL
8937: AND
8938: OR
8939: IFFALSE 8961
// begin if dial_contactBlock then
8941: LD_EXP 16
8945: IFFALSE 8949
// exit ;
8947: GO 9005
// dial_contactBlock = true ;
8949: LD_ADDR_EXP 16
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// Dial_Contact ;
8957: CALL 13834 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8961: LD_VAR 0 1
8965: PUSH
8966: LD_INT 3
8968: EQUAL
8969: PUSH
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 6
8977: EQUAL
8978: AND
8979: PUSH
8980: LD_VAR 0 1
8984: PUSH
8985: LD_INT 6
8987: EQUAL
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: LD_INT 3
8996: EQUAL
8997: AND
8998: OR
8999: IFFALSE 9005
// Lose_SelfAttack ;
9001: CALL 7537 0 0
// end ;
9005: PPOPN 2
9007: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9008: LD_VAR 0 1
9012: PUSH
9013: LD_EXP 42
9017: EQUAL
9018: IFFALSE 9024
// Lose_Burlak ;
9020: CALL 7507 0 0
// if unit = Gaydar then
9024: LD_VAR 0 1
9028: PUSH
9029: LD_EXP 54
9033: EQUAL
9034: IFFALSE 9040
// Lose_Gaydar ;
9036: CALL 7522 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9040: LD_VAR 0 1
9044: PPUSH
9045: CALL_OW 255
9049: PUSH
9050: LD_INT 3
9052: EQUAL
9053: PUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 247
9063: PUSH
9064: LD_INT 1
9066: EQUAL
9067: AND
9068: IFFALSE 9084
// lostUnits = lostUnits + 1 ;
9070: LD_ADDR_EXP 24
9074: PUSH
9075: LD_EXP 24
9079: PUSH
9080: LD_INT 1
9082: PLUS
9083: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PUSH
9094: LD_INT 2
9096: EQUAL
9097: PUSH
9098: LD_VAR 0 1
9102: PPUSH
9103: CALL_OW 247
9107: PUSH
9108: LD_INT 1
9110: EQUAL
9111: AND
9112: PUSH
9113: LD_EXP 54
9117: PPUSH
9118: CALL_OW 305
9122: NOT
9123: AND
9124: IFFALSE 9140
// killedArabianUnits = killedArabianUnits + 1 ;
9126: LD_ADDR_EXP 22
9130: PUSH
9131: LD_EXP 22
9135: PUSH
9136: LD_INT 1
9138: PLUS
9139: ST_TO_ADDR
// if unit in firstAttackGroup then
9140: LD_VAR 0 1
9144: PUSH
9145: LD_EXP 64
9149: IN
9150: IFFALSE 9168
// firstAttackGroup = firstAttackGroup diff unit ;
9152: LD_ADDR_EXP 64
9156: PUSH
9157: LD_EXP 64
9161: PUSH
9162: LD_VAR 0 1
9166: DIFF
9167: ST_TO_ADDR
// end ;
9168: PPOPN 1
9170: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9171: LD_VAR 0 2
9175: PUSH
9176: LD_INT 6
9178: EQUAL
9179: IFFALSE 9193
// SetSide ( building , 6 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 6
9188: PPUSH
9189: CALL_OW 235
// end ;
9193: PPOPN 3
9195: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 34
9225: PUSH
9226: LD_INT 51
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 21
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PPUSH
9252: CALL_OW 69
9256: PUSH
9257: FOR_IN
9258: IFFALSE 9380
// if GetTaskList ( i ) > 0 then
9260: LD_VAR 0 2
9264: PPUSH
9265: CALL_OW 437
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9378
// for j = 1 to GetTaskList ( i ) do
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: DOUBLE
9281: LD_INT 1
9283: DEC
9284: ST_TO_ADDR
9285: LD_VAR 0 2
9289: PPUSH
9290: CALL_OW 437
9294: PUSH
9295: FOR_TO
9296: IFFALSE 9376
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9298: LD_ADDR_VAR 0 4
9302: PUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: CALL_OW 437
9312: PUSH
9313: LD_VAR 0 3
9317: ARRAY
9318: PUSH
9319: LD_INT 4
9321: ARRAY
9322: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9323: LD_VAR 0 4
9327: PPUSH
9328: CALL_OW 255
9332: PUSH
9333: LD_INT 6
9335: EQUAL
9336: PUSH
9337: LD_VAR 0 2
9341: PPUSH
9342: CALL_OW 437
9346: PUSH
9347: LD_VAR 0 3
9351: ARRAY
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PUSH
9357: LD_STRING <
9359: EQUAL
9360: AND
9361: IFFALSE 9374
// SetTaskList ( i , [ ] ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: EMPTY
9369: PPUSH
9370: CALL_OW 446
// end ;
9374: GO 9295
9376: POP
9377: POP
9378: GO 9257
9380: POP
9381: POP
// end ; end_of_file
9382: PPOPN 8
9384: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9385: LD_INT 0
9387: PPUSH
9388: PPUSH
// if exist_mode then
9389: LD_VAR 0 2
9393: IFFALSE 9418
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_EXP 30
9404: PUSH
9405: LD_VAR 0 1
9409: STR
9410: PPUSH
9411: CALL_OW 34
9415: ST_TO_ADDR
9416: GO 9433
// unit := NewCharacter ( ident ) ;
9418: LD_ADDR_VAR 0 5
9422: PUSH
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 25
9432: ST_TO_ADDR
// if class then
9433: LD_VAR 0 3
9437: IFFALSE 9453
// SetClass ( unit , class ) ;
9439: LD_VAR 0 5
9443: PPUSH
9444: LD_VAR 0 3
9448: PPUSH
9449: CALL_OW 336
// result := unit ;
9453: LD_ADDR_VAR 0 4
9457: PUSH
9458: LD_VAR 0 5
9462: ST_TO_ADDR
// end ;
9463: LD_VAR 0 4
9467: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9468: LD_INT 0
9470: PPUSH
9471: PPUSH
// for unit in units do
9472: LD_ADDR_VAR 0 5
9476: PUSH
9477: LD_VAR 0 1
9481: PUSH
9482: FOR_IN
9483: IFFALSE 9506
// PlaceUnitArea ( unit , area , spawnMode ) ;
9485: LD_VAR 0 5
9489: PPUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: LD_VAR 0 3
9499: PPUSH
9500: CALL_OW 49
9504: GO 9482
9506: POP
9507: POP
// end ;
9508: LD_VAR 0 4
9512: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9513: LD_INT 0
9515: PPUSH
9516: PPUSH
9517: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9518: LD_ADDR_VAR 0 1
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: LD_EXP 42
9532: PUSH
9533: LD_EXP 43
9537: PUSH
9538: LD_EXP 46
9542: PUSH
9543: LD_EXP 47
9547: PUSH
9548: LD_EXP 44
9552: PUSH
9553: LD_EXP 45
9557: PUSH
9558: LD_EXP 48
9562: PUSH
9563: LD_EXP 49
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: DIFF
9578: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9579: LD_ADDR_VAR 0 7
9583: PUSH
9584: LD_VAR 0 1
9588: PUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_VAR 0 1
9596: PPUSH
9597: CALL_OW 12
9601: ARRAY
9602: ST_TO_ADDR
// if radio then
9603: LD_VAR 0 4
9607: IFFALSE 9656
// begin if GetSex ( speaker ) = sex_male then
9609: LD_VAR 0 7
9613: PPUSH
9614: CALL_OW 258
9618: PUSH
9619: LD_INT 1
9621: EQUAL
9622: IFFALSE 9640
// SayRadio ( speaker , dialogMID ) else
9624: LD_VAR 0 7
9628: PPUSH
9629: LD_VAR 0 2
9633: PPUSH
9634: CALL_OW 94
9638: GO 9654
// SayRadio ( speaker , dialogFID ) ;
9640: LD_VAR 0 7
9644: PPUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: CALL_OW 94
// end else
9654: GO 9701
// begin if GetSex ( speaker ) = sex_male then
9656: LD_VAR 0 7
9660: PPUSH
9661: CALL_OW 258
9665: PUSH
9666: LD_INT 1
9668: EQUAL
9669: IFFALSE 9687
// Say ( speaker , dialogMID ) else
9671: LD_VAR 0 7
9675: PPUSH
9676: LD_VAR 0 2
9680: PPUSH
9681: CALL_OW 88
9685: GO 9701
// Say ( speaker , dialogFID ) ;
9687: LD_VAR 0 7
9691: PPUSH
9692: LD_VAR 0 3
9696: PPUSH
9697: CALL_OW 88
// end ; result := speaker ;
9701: LD_ADDR_VAR 0 5
9705: PUSH
9706: LD_VAR 0 7
9710: ST_TO_ADDR
// end ;
9711: LD_VAR 0 5
9715: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9716: LD_INT 0
9718: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 255
9728: PUSH
9729: LD_VAR 0 3
9733: EQUAL
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL_OW 302
9744: AND
9745: IFFALSE 9767
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_EXP 29
9756: PUSH
9757: LD_VAR 0 2
9761: STR
9762: PPUSH
9763: CALL_OW 38
// end ;
9767: LD_VAR 0 4
9771: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9772: LD_INT 0
9774: PPUSH
9775: PPUSH
9776: PPUSH
// resultCharactersToSave = [ ] ;
9777: LD_ADDR_VAR 0 6
9781: PUSH
9782: EMPTY
9783: ST_TO_ADDR
// for unit in characters do
9784: LD_ADDR_VAR 0 5
9788: PUSH
9789: LD_VAR 0 1
9793: PUSH
9794: FOR_IN
9795: IFFALSE 9843
// if GetSide ( unit ) = side and IsOK ( unit ) then
9797: LD_VAR 0 5
9801: PPUSH
9802: CALL_OW 255
9806: PUSH
9807: LD_VAR 0 3
9811: EQUAL
9812: PUSH
9813: LD_VAR 0 5
9817: PPUSH
9818: CALL_OW 302
9822: AND
9823: IFFALSE 9841
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9825: LD_ADDR_VAR 0 6
9829: PUSH
9830: LD_VAR 0 6
9834: PUSH
9835: LD_VAR 0 5
9839: ADD
9840: ST_TO_ADDR
9841: GO 9794
9843: POP
9844: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9845: LD_VAR 0 6
9849: PPUSH
9850: LD_EXP 29
9854: PUSH
9855: LD_VAR 0 2
9859: STR
9860: PPUSH
9861: CALL_OW 38
// end ;
9865: LD_VAR 0 4
9869: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9870: LD_INT 0
9872: PPUSH
9873: PPUSH
9874: PPUSH
9875: PPUSH
9876: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9877: LD_ADDR_VAR 0 3
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 21
9894: PUSH
9895: LD_INT 1
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 50
9904: PUSH
9905: EMPTY
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: PPUSH
9913: CALL_OW 69
9917: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9918: LD_ADDR_VAR 0 3
9922: PUSH
9923: LD_VAR 0 3
9927: PUSH
9928: LD_EXP 42
9932: DIFF
9933: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9934: LD_ADDR_VAR 0 3
9938: PUSH
9939: LD_VAR 0 3
9943: PUSH
9944: LD_EXP 52
9948: DIFF
9949: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_STRING text
9957: PPUSH
9958: LD_INT 8
9960: PPUSH
9961: LD_INT 8
9963: PPUSH
9964: LD_INT -5
9966: PUSH
9967: LD_EXP 42
9971: PUSH
9972: LD_INT -6
9974: PUSH
9975: LD_INT -2
9977: PUSH
9978: LD_INT -3
9980: PUSH
9981: LD_INT -5
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_VAR 0 3
9996: ADD
9997: PUSH
9998: LD_INT -6
10000: PUSH
10001: LD_INT -4
10003: PUSH
10004: LD_EXP 52
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: ADD
10014: PPUSH
10015: LD_INT 1
10017: PUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 4
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 42
10044: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10045: LD_VAR 0 3
10049: PPUSH
10050: LD_INT 6
10052: PPUSH
10053: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10057: LD_EXP 52
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10069: LD_VAR 0 4
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: CALL_OW 235
// burlakTeam = selectedPeople ;
10081: LD_ADDR_EXP 55
10085: PUSH
10086: LD_VAR 0 4
10090: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10091: LD_ADDR_EXP 56
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 6
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10125: LD_ADDR_EXP 56
10129: PUSH
10130: LD_EXP 56
10134: PUSH
10135: LD_EXP 49
10139: DIFF
10140: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10141: LD_ADDR_VAR 0 2
10145: PUSH
10146: LD_INT 22
10148: PUSH
10149: LD_INT 6
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 21
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: CALL_OW 69
10174: PUSH
10175: FOR_IN
10176: IFFALSE 10200
// if IsInUnit ( i ) then
10178: LD_VAR 0 2
10182: PPUSH
10183: CALL_OW 310
10187: IFFALSE 10198
// ComExitVehicle ( i ) ;
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 121
10198: GO 10175
10200: POP
10201: POP
// if not Gnyevko in selectedPeople then
10202: LD_EXP 43
10206: PUSH
10207: LD_VAR 0 4
10211: IN
10212: NOT
10213: IFFALSE 10230
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10215: LD_EXP 43
10219: PPUSH
10220: LD_STRING Gnyevko
10222: PPUSH
10223: LD_INT 6
10225: PPUSH
10226: CALL 9716 0 3
// if not Kovalyuk in selectedPeople then
10230: LD_EXP 45
10234: PUSH
10235: LD_VAR 0 4
10239: IN
10240: NOT
10241: IFFALSE 10258
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10243: LD_EXP 45
10247: PPUSH
10248: LD_STRING Kovalyuk
10250: PPUSH
10251: LD_INT 6
10253: PPUSH
10254: CALL 9716 0 3
// if not Kirilenkova in selectedPeople then
10258: LD_EXP 44
10262: PUSH
10263: LD_VAR 0 4
10267: IN
10268: NOT
10269: IFFALSE 10286
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10271: LD_EXP 44
10275: PPUSH
10276: LD_STRING Kirilenkova
10278: PPUSH
10279: LD_INT 6
10281: PPUSH
10282: CALL 9716 0 3
// if not Scholtze in selectedPeople then
10286: LD_EXP 48
10290: PUSH
10291: LD_VAR 0 4
10295: IN
10296: NOT
10297: IFFALSE 10314
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10299: LD_EXP 48
10303: PPUSH
10304: LD_STRING Scholtze
10306: PPUSH
10307: LD_INT 6
10309: PPUSH
10310: CALL 9716 0 3
// if not Belkov in selectedPeople then
10314: LD_EXP 46
10318: PUSH
10319: LD_VAR 0 4
10323: IN
10324: NOT
10325: IFFALSE 10342
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10327: LD_EXP 46
10331: PPUSH
10332: LD_STRING Belkov
10334: PPUSH
10335: LD_INT 6
10337: PPUSH
10338: CALL 9716 0 3
// if not Belkov2 in selectedPeople then
10342: LD_EXP 47
10346: PUSH
10347: LD_VAR 0 4
10351: IN
10352: NOT
10353: IFFALSE 10370
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10355: LD_EXP 47
10359: PPUSH
10360: LD_STRING Belkov2
10362: PPUSH
10363: LD_INT 6
10365: PPUSH
10366: CALL 9716 0 3
// others = popovTeam diff Popov ;
10370: LD_ADDR_VAR 0 5
10374: PUSH
10375: LD_EXP 56
10379: PUSH
10380: LD_EXP 52
10384: DIFF
10385: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10386: LD_VAR 0 5
10390: PPUSH
10391: LD_STRING other_survivors_with_popov
10393: PPUSH
10394: LD_INT 6
10396: PPUSH
10397: CALL 9772 0 3
// end ; end_of_file
10401: LD_VAR 0 1
10405: RET
// export function MissionIntro ; var i , unit ; begin
10406: LD_INT 0
10408: PPUSH
10409: PPUSH
10410: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10411: LD_EXP 42
10415: PPUSH
10416: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10420: LD_EXP 59
10424: PPUSH
10425: LD_STRING D1-RSol1-1
10427: PPUSH
10428: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10432: LD_EXP 53
10436: PPUSH
10437: LD_STRING D1-Pla-1
10439: PPUSH
10440: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10444: LD_EXP 42
10448: PPUSH
10449: LD_STRING D1-Bur-1
10451: PPUSH
10452: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-2
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-2
10475: PPUSH
10476: CALL_OW 88
// SelectCharacters ;
10480: CALL 9870 0 0
// InGameOff ;
10484: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10488: LD_STRING M1
10490: PPUSH
10491: CALL_OW 337
// SaveForQuickRestart ;
10495: CALL_OW 22
// for unit in popovTeam do
10499: LD_ADDR_VAR 0 3
10503: PUSH
10504: LD_EXP 56
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10582
// begin for i := 3 to russianCargoPath1 do
10512: LD_ADDR_VAR 0 2
10516: PUSH
10517: DOUBLE
10518: LD_INT 3
10520: DEC
10521: ST_TO_ADDR
10522: LD_EXP 34
10526: PUSH
10527: FOR_TO
10528: IFFALSE 10571
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_EXP 34
10539: PUSH
10540: LD_VAR 0 2
10544: ARRAY
10545: PUSH
10546: LD_INT 1
10548: ARRAY
10549: PPUSH
10550: LD_EXP 34
10554: PUSH
10555: LD_VAR 0 2
10559: ARRAY
10560: PUSH
10561: LD_INT 2
10563: ARRAY
10564: PPUSH
10565: CALL_OW 171
10569: GO 10527
10571: POP
10572: POP
// wait ( 0 0$01 ) ;
10573: LD_INT 35
10575: PPUSH
10576: CALL_OW 67
// end ;
10580: GO 10509
10582: POP
10583: POP
// end ;
10584: LD_VAR 0 1
10588: RET
// every 0 0$1 do var unit , driver ;
10589: GO 10591
10591: DISABLE
10592: LD_INT 0
10594: PPUSH
10595: PPUSH
// begin enable ;
10596: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10597: LD_INT 4
10599: PPUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 6
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 70
10614: NOT
10615: PUSH
10616: LD_INT 4
10618: PPUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: LD_INT 21
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 2
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 70
10665: NOT
10666: AND
10667: IFFALSE 10671
// exit ;
10669: GO 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10671: LD_ADDR_VAR 0 1
10675: PUSH
10676: LD_INT 4
10678: PPUSH
10679: LD_INT 22
10681: PUSH
10682: LD_INT 6
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PPUSH
10689: CALL_OW 70
10693: PUSH
10694: FOR_IN
10695: IFFALSE 10750
// begin RemoveUnit ( unit ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10706: LD_VAR 0 1
10710: PUSH
10711: LD_EXP 56
10715: IN
10716: NOT
10717: PUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 264
10727: PUSH
10728: LD_INT 51
10730: EQUAL
10731: AND
10732: IFFALSE 10748
// evacuatedCargos = evacuatedCargos + 1 ;
10734: LD_ADDR_EXP 10
10738: PUSH
10739: LD_EXP 10
10743: PUSH
10744: LD_INT 1
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: GO 10694
10750: POP
10751: POP
// if canExitMap then
10752: LD_EXP 6
10756: IFFALSE 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10758: LD_ADDR_VAR 0 1
10762: PUSH
10763: LD_INT 4
10765: PPUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: LD_INT 21
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 21
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 70
10812: PUSH
10813: FOR_IN
10814: IFFALSE 11020
// begin if GetType ( unit ) = unit_vehicle then
10816: LD_VAR 0 1
10820: PPUSH
10821: CALL_OW 247
10825: PUSH
10826: LD_INT 2
10828: EQUAL
10829: IFFALSE 10929
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 313
10840: PUSH
10841: LD_INT 1
10843: ARRAY
10844: PUSH
10845: LD_EXP 42
10849: PUSH
10850: LD_EXP 43
10854: PUSH
10855: LD_EXP 44
10859: PUSH
10860: LD_EXP 45
10864: PUSH
10865: LD_EXP 46
10869: PUSH
10870: LD_EXP 47
10874: PUSH
10875: LD_EXP 48
10879: PUSH
10880: LD_EXP 49
10884: PUSH
10885: LD_EXP 54
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: IN
10901: NOT
10902: IFFALSE 10929
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10904: LD_ADDR_EXP 62
10908: PUSH
10909: LD_EXP 62
10913: PUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 313
10923: PUSH
10924: LD_INT 1
10926: ARRAY
10927: ADD
10928: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10929: LD_VAR 0 1
10933: PUSH
10934: LD_EXP 42
10938: PUSH
10939: LD_EXP 43
10943: PUSH
10944: LD_EXP 44
10948: PUSH
10949: LD_EXP 45
10953: PUSH
10954: LD_EXP 46
10958: PUSH
10959: LD_EXP 47
10963: PUSH
10964: LD_EXP 48
10968: PUSH
10969: LD_EXP 49
10973: PUSH
10974: LD_EXP 54
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: IN
10990: NOT
10991: IFFALSE 11009
// randomsToSave = randomsToSave ^ unit ;
10993: LD_ADDR_EXP 62
10997: PUSH
10998: LD_EXP 62
11002: PUSH
11003: LD_VAR 0 1
11007: ADD
11008: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 64
// end ;
11018: GO 10813
11020: POP
11021: POP
// end ;
11022: PPOPN 2
11024: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11025: LD_INT 0
11027: PPUSH
11028: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11029: LD_INT 22
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: PPUSH
11058: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11062: LD_VAR 0 1
11066: PPUSH
11067: CALL_OW 87
// InGameOn ;
11071: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11075: LD_EXP 53
11079: PPUSH
11080: LD_STRING D2a-Pla-1
11082: PPUSH
11083: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 21
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 25
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: PPUSH
11127: CALL_OW 69
11131: PUSH
11132: FOR_IN
11133: IFFALSE 11171
// if GetDistUnits ( building , unit ) < 10 then
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: CALL_OW 296
11149: PUSH
11150: LD_INT 10
11152: LESS
11153: IFFALSE 11169
// ComDismantle ( unit , building ) ;
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 167
11169: GO 11132
11171: POP
11172: POP
// repeat wait ( 0 0$1 ) ;
11173: LD_INT 35
11175: PPUSH
11176: CALL_OW 67
// until not IsPlaced ( building ) ;
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 305
11189: NOT
11190: IFFALSE 11173
// InGameOff ;
11192: CALL_OW 9
// end ;
11196: LD_VAR 0 2
11200: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11201: LD_EXP 49
11205: PPUSH
11206: CALL_OW 255
11210: PUSH
11211: LD_INT 6
11213: EQUAL
11214: IFFALSE 11296
11216: GO 11218
11218: DISABLE
11219: LD_INT 0
11221: PPUSH
// begin enable ;
11222: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: LD_INT 22
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11294
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11260: LD_VAR 0 1
11264: PPUSH
11265: LD_EXP 49
11269: PPUSH
11270: CALL_OW 296
11274: PUSH
11275: LD_INT 9
11277: LESS
11278: IFFALSE 11292
// SetSide ( Kuzmov , 3 ) ;
11280: LD_EXP 49
11284: PPUSH
11285: LD_INT 3
11287: PPUSH
11288: CALL_OW 235
11292: GO 11257
11294: POP
11295: POP
// end ;
11296: PPOPN 1
11298: END
// export function Dial_FinishDepot ; var i ; begin
11299: LD_INT 0
11301: PPUSH
11302: PPUSH
// startEvacuation = true ;
11303: LD_ADDR_EXP 8
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11311: LD_STRING MOutBuild
11313: PPUSH
11314: CALL_OW 337
// uc_side = 6 ;
11318: LD_ADDR_OWVAR 20
11322: PUSH
11323: LD_INT 6
11325: ST_TO_ADDR
// uc_nation = 3 ;
11326: LD_ADDR_OWVAR 21
11330: PUSH
11331: LD_INT 3
11333: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11334: LD_ADDR_OWVAR 37
11338: PUSH
11339: LD_INT 21
11341: ST_TO_ADDR
// vc_control = control_manual ;
11342: LD_ADDR_OWVAR 38
11346: PUSH
11347: LD_INT 1
11349: ST_TO_ADDR
// vc_engine = engine_combustion ;
11350: LD_ADDR_OWVAR 39
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11358: LD_ADDR_OWVAR 40
11362: PUSH
11363: LD_INT 51
11365: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11366: LD_ADDR_EXP 60
11370: PUSH
11371: CALL_OW 45
11375: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11376: LD_EXP 60
11380: PPUSH
11381: LD_INT 3
11383: PPUSH
11384: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11388: LD_EXP 60
11392: PPUSH
11393: LD_INT 3
11395: PPUSH
11396: LD_INT 0
11398: PPUSH
11399: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11403: LD_INT 1
11405: PPUSH
11406: LD_INT 3
11408: PPUSH
11409: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11413: CALL_OW 44
11417: PPUSH
11418: LD_EXP 60
11422: PPUSH
11423: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11427: LD_EXP 60
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_INT 100
11437: PPUSH
11438: CALL_OW 291
// for i := 1 to 19 do
11442: LD_ADDR_VAR 0 2
11446: PUSH
11447: DOUBLE
11448: LD_INT 1
11450: DEC
11451: ST_TO_ADDR
11452: LD_INT 19
11454: PUSH
11455: FOR_TO
11456: IFFALSE 11499
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11458: LD_EXP 60
11462: PPUSH
11463: LD_EXP 34
11467: PUSH
11468: LD_VAR 0 2
11472: ARRAY
11473: PUSH
11474: LD_INT 1
11476: ARRAY
11477: PPUSH
11478: LD_EXP 34
11482: PUSH
11483: LD_VAR 0 2
11487: ARRAY
11488: PUSH
11489: LD_INT 2
11491: ARRAY
11492: PPUSH
11493: CALL_OW 171
11497: GO 11455
11499: POP
11500: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11501: LD_EXP 60
11505: PPUSH
11506: LD_INT 105
11508: PPUSH
11509: LD_INT 123
11511: PPUSH
11512: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11516: LD_EXP 60
11520: PPUSH
11521: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: DOUBLE
11531: LD_INT 21
11533: DEC
11534: ST_TO_ADDR
11535: LD_EXP 34
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11584
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11543: LD_EXP 60
11547: PPUSH
11548: LD_EXP 34
11552: PUSH
11553: LD_VAR 0 2
11557: ARRAY
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PPUSH
11563: LD_EXP 34
11567: PUSH
11568: LD_VAR 0 2
11572: ARRAY
11573: PUSH
11574: LD_INT 2
11576: ARRAY
11577: PPUSH
11578: CALL_OW 171
11582: GO 11540
11584: POP
11585: POP
// Say ( Burlak , D2-Bur-1 ) ;
11586: LD_EXP 42
11590: PPUSH
11591: LD_STRING D2-Bur-1
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11598: LD_EXP 53
11602: PPUSH
11603: LD_STRING D2-Pla-1
11605: PPUSH
11606: CALL_OW 94
// PrepareSecondBaseTeam ;
11610: CALL 3290 0 0
// end ;
11614: LD_VAR 0 1
11618: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
// dial_labUpgradedBlock = true ;
11623: LD_ADDR_EXP 15
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11631: LD_ADDR_VAR 0 2
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 21
11648: PUSH
11649: LD_INT 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 26
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 25
11668: PUSH
11669: LD_INT 4
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PUSH
11687: LD_EXP 42
11691: PUSH
11692: LD_EXP 43
11696: PUSH
11697: LD_EXP 44
11701: PUSH
11702: LD_EXP 45
11706: PUSH
11707: LD_EXP 46
11711: PUSH
11712: LD_EXP 47
11716: PUSH
11717: LD_EXP 48
11721: PUSH
11722: LD_EXP 49
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: DIFF
11737: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11738: LD_EXP 48
11742: PPUSH
11743: CALL_OW 302
11747: PUSH
11748: LD_EXP 48
11752: PPUSH
11753: CALL_OW 255
11757: PUSH
11758: LD_INT 3
11760: EQUAL
11761: AND
11762: IFFALSE 11790
// begin Say ( Scholtze , D5-Sch-1 ) ;
11764: LD_EXP 48
11768: PPUSH
11769: LD_STRING D5-Sch-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11776: LD_EXP 42
11780: PPUSH
11781: LD_STRING D5-Bur-1
11783: PPUSH
11784: CALL_OW 88
// end else
11788: GO 11925
// if randomMaleSci then
11790: LD_VAR 0 2
11794: IFFALSE 11826
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11796: LD_VAR 0 2
11800: PUSH
11801: LD_INT 1
11803: ARRAY
11804: PPUSH
11805: LD_STRING D5-RSci1-1
11807: PPUSH
11808: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11812: LD_EXP 42
11816: PPUSH
11817: LD_STRING D5-Bur-1
11819: PPUSH
11820: CALL_OW 88
// end else
11824: GO 11925
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11826: LD_ADDR_VAR 0 2
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_INT 3
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 21
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 26
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 25
11863: PUSH
11864: LD_INT 4
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PUSH
11882: LD_EXP 42
11886: PUSH
11887: EMPTY
11888: LIST
11889: DIFF
11890: ST_TO_ADDR
// if randomMaleSci then
11891: LD_VAR 0 2
11895: IFFALSE 11925
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11897: LD_VAR 0 2
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_STRING D5-RSci1-1
11908: PPUSH
11909: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11913: LD_EXP 42
11917: PPUSH
11918: LD_STRING D5-Bur-1
11920: PPUSH
11921: CALL_OW 88
// end ; end ; end ;
11925: LD_VAR 0 1
11929: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11930: LD_EXP 60
11934: PPUSH
11935: LD_INT 105
11937: PPUSH
11938: LD_INT 123
11940: PPUSH
11941: CALL_OW 297
11945: PUSH
11946: LD_INT 12
11948: LESS
11949: IFFALSE 11975
11951: GO 11953
11953: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11954: LD_EXP 60
11958: PPUSH
11959: CALL_OW 313
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PPUSH
11968: LD_STRING D2a-RSol1-1
11970: PPUSH
11971: CALL_OW 88
11975: END
// every 0 0$15 trigger startEvacuation do
11976: LD_EXP 8
11980: IFFALSE 11990
11982: GO 11984
11984: DISABLE
// begin enable ;
11985: ENABLE
// CreateEvacuateUnit ;
11986: CALL 2520 0 0
// end ;
11990: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
11991: LD_EXP 10
11995: PUSH
11996: LD_INT 3
11998: GREATEREQUAL
11999: IFFALSE 12098
12001: GO 12003
12003: DISABLE
// begin if IsOk ( Kuzmov ) then
12004: LD_EXP 49
12008: PPUSH
12009: CALL_OW 302
12013: IFFALSE 12083
// begin DialogueOn ;
12015: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12019: LD_EXP 49
12023: PPUSH
12024: LD_STRING D2b-Kuz-1
12026: PPUSH
12027: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12031: LD_EXP 42
12035: PPUSH
12036: LD_STRING D2b-Bur-1
12038: PPUSH
12039: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-2
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-2
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-3
12074: PPUSH
12075: CALL_OW 88
// DialogueOff ;
12079: CALL_OW 7
// end ; Query ( Q1 ) ;
12083: LD_STRING Q1
12085: PPUSH
12086: CALL_OW 97
// canStealCargo = true ;
12090: LD_ADDR_EXP 11
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// end ;
12098: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12099: LD_EXP 11
12103: IFFALSE 12401
12105: GO 12107
12107: DISABLE
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
// begin enable ;
12112: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 34
12140: PUSH
12141: LD_INT 51
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12399
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_INT 22
12168: PUSH
12169: LD_INT 3
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 50
12188: PUSH
12189: EMPTY
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 69
12201: PUSH
12202: FOR_IN
12203: IFFALSE 12395
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12205: LD_VAR 0 2
12209: PPUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 296
12219: PUSH
12220: LD_INT 8
12222: LESS
12223: PUSH
12224: LD_VAR 0 2
12228: PUSH
12229: LD_EXP 13
12233: IN
12234: NOT
12235: AND
12236: PUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 289
12249: PUSH
12250: LD_INT 0
12252: GREATER
12253: AND
12254: IFFALSE 12393
// begin stealCargos = stealCargos ^ cargo ;
12256: LD_ADDR_EXP 13
12260: PUSH
12261: LD_EXP 13
12265: PUSH
12266: LD_VAR 0 2
12270: ADD
12271: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12272: LD_STRING QQrSteal
12274: PPUSH
12275: CALL_OW 97
12279: PUSH
12280: LD_INT 1
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12361
12288: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12289: LD_ADDR_EXP 12
12293: PUSH
12294: LD_EXP 12
12298: PUSH
12299: LD_INT 1
12301: PLUS
12302: ST_TO_ADDR
// DialogueOn ;
12303: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12307: LD_EXP 42
12311: PPUSH
12312: LD_STRING DQrSteal#1-Bur-1
12314: PPUSH
12315: CALL_OW 88
// DialogueOff ;
12319: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12323: LD_VAR 0 2
12327: PPUSH
12328: LD_INT 14
12330: PPUSH
12331: CALL_OW 113
// AddComUnload ( cargo ) ;
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12344: LD_VAR 0 2
12348: PPUSH
12349: LD_INT 92
12351: PPUSH
12352: LD_INT 177
12354: PPUSH
12355: CALL_OW 171
// end ; 2 :
12359: GO 12393
12361: LD_INT 2
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12369
12367: GO 12392
12369: POP
// begin DialogueOn ;
12370: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12374: LD_EXP 42
12378: PPUSH
12379: LD_STRING DQrSteal#2-Bur-1
12381: PPUSH
12382: CALL_OW 88
// DialogueOff ;
12386: CALL_OW 7
// end ; end ;
12390: GO 12393
12392: POP
// end ;
12393: GO 12202
12395: POP
12396: POP
12397: GO 12158
12399: POP
12400: POP
// end ;
12401: PPOPN 2
12403: END
// every 0 0$12 trigger stealWarmCount = 3 do
12404: LD_EXP 12
12408: PUSH
12409: LD_INT 3
12411: EQUAL
12412: IFFALSE 12484
12414: GO 12416
12416: DISABLE
// begin DialogueOn ;
12417: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12421: LD_EXP 53
12425: PPUSH
12426: LD_STRING D3A-Pla-1
12428: PPUSH
12429: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12433: LD_EXP 42
12437: PPUSH
12438: LD_STRING D3A-Bur-1
12440: PPUSH
12441: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-2
12452: PPUSH
12453: CALL_OW 94
// if IsOK ( Kuzmov ) then
12457: LD_EXP 49
12461: PPUSH
12462: CALL_OW 302
12466: IFFALSE 12480
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12468: LD_EXP 49
12472: PPUSH
12473: LD_STRING D3A-Kuz-2
12475: PPUSH
12476: CALL_OW 88
// DialogueOff ;
12480: CALL_OW 7
// end ;
12484: END
// every 0 0$10 trigger stealWarmCount = 6 do
12485: LD_EXP 12
12489: PUSH
12490: LD_INT 6
12492: EQUAL
12493: IFFALSE 12542
12495: GO 12497
12497: DISABLE
// begin DialogueOn ;
12498: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12502: LD_EXP 53
12506: PPUSH
12507: LD_STRING D3B-Pla-1
12509: PPUSH
12510: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12514: LD_EXP 42
12518: PPUSH
12519: LD_STRING D3B-Bur-1
12521: PPUSH
12522: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-2
12533: PPUSH
12534: CALL_OW 94
// DialogueOff ;
12538: CALL_OW 7
// end ;
12542: END
// every 0 0$10 trigger stealWarmCount = 7 do
12543: LD_EXP 12
12547: PUSH
12548: LD_INT 7
12550: EQUAL
12551: IFFALSE 12635
12553: GO 12555
12555: DISABLE
// begin DialogueOn ;
12556: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12560: LD_EXP 53
12564: PPUSH
12565: LD_STRING D3C-Pla-1
12567: PPUSH
12568: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12572: LD_EXP 42
12576: PPUSH
12577: LD_STRING D3C-Bur-1
12579: PPUSH
12580: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-2
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-2
12603: PPUSH
12604: CALL_OW 88
// if IsOK ( Kuzmov ) then
12608: LD_EXP 49
12612: PPUSH
12613: CALL_OW 302
12617: IFFALSE 12631
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12619: LD_EXP 49
12623: PPUSH
12624: LD_STRING D3C-Kuz-2
12626: PPUSH
12627: CALL_OW 88
// DialogueOff ;
12631: CALL_OW 7
// end ;
12635: END
// every 0 0$10 trigger stealWarmCount = 8 do
12636: LD_EXP 12
12640: PUSH
12641: LD_INT 8
12643: EQUAL
12644: IFFALSE 12836
12646: GO 12648
12648: DISABLE
// begin canStealCargo = false ;
12649: LD_ADDR_EXP 11
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// DialogueOn ;
12657: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12661: LD_EXP 53
12665: PPUSH
12666: LD_STRING D3D-Pla-1
12668: PPUSH
12669: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12673: LD_EXP 42
12677: PPUSH
12678: LD_STRING D3D-Bur-1
12680: PPUSH
12681: CALL_OW 88
// if kurinOpinion = 0 then
12685: LD_EXP 2
12689: PUSH
12690: LD_INT 0
12692: EQUAL
12693: IFFALSE 12713
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12695: LD_EXP 53
12699: PPUSH
12700: LD_STRING D3E-Pla-1
12702: PPUSH
12703: CALL_OW 94
// Lose_Arrest ;
12707: CALL 7552 0 0
// exit ;
12711: GO 12836
// end ; if meetBelkovBrother = 1 then
12713: LD_EXP 3
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: IFFALSE 12741
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12723: LD_EXP 53
12727: PPUSH
12728: LD_STRING D3E-Pla-1a
12730: PPUSH
12731: CALL_OW 94
// Lose_Arrest ;
12735: CALL 7552 0 0
// exit ;
12739: GO 12836
// end ; if platonovOpinion = 0 then
12741: LD_EXP 1
12745: PUSH
12746: LD_INT 0
12748: EQUAL
12749: IFFALSE 12769
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12751: LD_EXP 53
12755: PPUSH
12756: LD_STRING D3E-Pla-1b
12758: PPUSH
12759: CALL_OW 94
// Lose_Arrest ;
12763: CALL 7552 0 0
// exit ;
12767: GO 12836
// end ; if platonovOpinion = 1 then
12769: LD_EXP 1
12773: PUSH
12774: LD_INT 1
12776: EQUAL
12777: IFFALSE 12797
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12779: LD_EXP 53
12783: PPUSH
12784: LD_STRING D3E-Pla-1c
12786: PPUSH
12787: CALL_OW 94
// Lose_Arrest ;
12791: CALL 7552 0 0
// exit ;
12795: GO 12836
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12797: LD_EXP 53
12801: PPUSH
12802: LD_STRING D3D-Pla-2
12804: PPUSH
12805: CALL_OW 94
// if IsOK ( Kuzmov ) then
12809: LD_EXP 49
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12832
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12820: LD_EXP 49
12824: PPUSH
12825: LD_STRING D3D-Kuz-2
12827: PPUSH
12828: CALL_OW 88
// DialogueOff ;
12832: CALL_OW 7
// end ;
12836: END
// every 0 0$20 do var allyUntis ;
12837: GO 12839
12839: DISABLE
12840: LD_INT 0
12842: PPUSH
// begin enable ;
12843: ENABLE
// wait ( 0 0$10 ) ;
12844: LD_INT 350
12846: PPUSH
12847: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 6
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 60
12871: PUSH
12872: EMPTY
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: PUSH
12888: LD_EXP 56
12892: DIFF
12893: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_VAR 0 1
12903: PUSH
12904: LD_EXP 54
12908: DIFF
12909: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_VAR 0 1
12919: PUSH
12920: LD_EXP 49
12924: DIFF
12925: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_VAR 0 1
12935: PUSH
12936: LD_EXP 57
12940: DIFF
12941: ST_TO_ADDR
// if not allyUntis then
12942: LD_VAR 0 1
12946: NOT
12947: IFFALSE 12951
// exit ;
12949: GO 12975
// ComUnload ( allyUntis ) ;
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 92
12967: PPUSH
12968: LD_INT 176
12970: PPUSH
12971: CALL_OW 171
// end ;
12975: PPOPN 1
12977: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
12978: LD_EXP 10
12982: PUSH
12983: LD_EXP 14
12987: GREATEREQUAL
12988: IFFALSE 13001
12990: GO 12992
12992: DISABLE
// begin startEvacuation = false ;
12993: LD_ADDR_EXP 8
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// end ;
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: PUSH
13013: LD_INT 22
13015: PUSH
13016: LD_INT 6
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 2
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 69
13059: PUSH
13060: LD_EXP 57
13064: DIFF
13065: NOT
13066: AND
13067: IFFALSE 13662
13069: GO 13071
13071: DISABLE
// begin wait ( 1 1$00 ) ;
13072: LD_INT 2100
13074: PPUSH
13075: CALL_OW 67
// DialogueOn ;
13079: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13083: LD_EXP 53
13087: PPUSH
13088: LD_STRING D4-Pla-1
13090: PPUSH
13091: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13095: LD_EXP 42
13099: PPUSH
13100: LD_STRING D4-Bur-1
13102: PPUSH
13103: CALL_OW 88
// DialogueOff ;
13107: CALL_OW 7
// wait ( 0 0$2 ) ;
13111: LD_INT 70
13113: PPUSH
13114: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13118: LD_EXP 49
13122: PPUSH
13123: CALL_OW 302
13127: PUSH
13128: LD_EXP 49
13132: PPUSH
13133: CALL_OW 255
13137: PUSH
13138: LD_INT 3
13140: EQUAL
13141: AND
13142: IFFALSE 13424
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13144: LD_EXP 49
13148: PPUSH
13149: LD_STRING D4-Kuz-1
13151: PPUSH
13152: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13156: LD_EXP 46
13160: PPUSH
13161: CALL_OW 302
13165: PUSH
13166: LD_EXP 46
13170: PPUSH
13171: CALL_OW 255
13175: PUSH
13176: LD_INT 3
13178: EQUAL
13179: AND
13180: IFFALSE 13196
// Say ( Belkov , D4-Bel-1 ) else
13182: LD_EXP 46
13186: PPUSH
13187: LD_STRING D4-Bel-1
13189: PPUSH
13190: CALL_OW 88
13194: GO 13234
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13196: LD_EXP 47
13200: PPUSH
13201: CALL_OW 302
13205: PUSH
13206: LD_EXP 47
13210: PPUSH
13211: CALL_OW 255
13215: PUSH
13216: LD_INT 3
13218: EQUAL
13219: AND
13220: IFFALSE 13234
// Say ( Belkov2 , D4-Bel-1 ) ;
13222: LD_EXP 47
13226: PPUSH
13227: LD_STRING D4-Bel-1
13229: PPUSH
13230: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13234: LD_EXP 42
13238: PPUSH
13239: LD_STRING D4-Bur-2
13241: PPUSH
13242: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13246: LD_EXP 43
13250: PPUSH
13251: CALL_OW 302
13255: PUSH
13256: LD_EXP 43
13260: PPUSH
13261: CALL_OW 255
13265: PUSH
13266: LD_INT 3
13268: EQUAL
13269: AND
13270: IFFALSE 13296
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13272: LD_EXP 43
13276: PPUSH
13277: LD_STRING D4-Gny-2
13279: PPUSH
13280: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13284: LD_EXP 42
13288: PPUSH
13289: LD_STRING D4-Bur-3
13291: PPUSH
13292: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13296: LD_EXP 42
13300: PPUSH
13301: LD_STRING D4-Bur-3a
13303: PPUSH
13304: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13308: LD_EXP 46
13312: PPUSH
13313: CALL_OW 302
13317: PUSH
13318: LD_EXP 46
13322: PPUSH
13323: CALL_OW 255
13327: PUSH
13328: LD_INT 3
13330: EQUAL
13331: AND
13332: IFFALSE 13348
// Say ( Belkov , D4-Bel-3 ) else
13334: LD_EXP 46
13338: PPUSH
13339: LD_STRING D4-Bel-3
13341: PPUSH
13342: CALL_OW 88
13346: GO 13386
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13348: LD_EXP 47
13352: PPUSH
13353: CALL_OW 302
13357: PUSH
13358: LD_EXP 47
13362: PPUSH
13363: CALL_OW 255
13367: PUSH
13368: LD_INT 3
13370: EQUAL
13371: AND
13372: IFFALSE 13386
// Say ( Belkov2 , D4-Bel-3 ) ;
13374: LD_EXP 47
13378: PPUSH
13379: LD_STRING D4-Bel-3
13381: PPUSH
13382: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13386: LD_EXP 45
13390: PPUSH
13391: CALL_OW 302
13395: PUSH
13396: LD_EXP 45
13400: PPUSH
13401: CALL_OW 255
13405: PUSH
13406: LD_INT 3
13408: EQUAL
13409: AND
13410: IFFALSE 13424
// Say ( Kovalyuk , D4-Kov-3 ) ;
13412: LD_EXP 45
13416: PPUSH
13417: LD_STRING D4-Kov-3
13419: PPUSH
13420: CALL_OW 88
// end ; PrepareFirstAttack ;
13424: CALL 4175 0 0
// firstAttack = true ;
13428: LD_ADDR_EXP 18
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13436: LD_INT 350
13438: PPUSH
13439: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13443: LD_EXP 42
13447: PPUSH
13448: LD_STRING D7-Bur-1
13450: PPUSH
13451: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13455: LD_EXP 64
13459: PPUSH
13460: LD_INT 135
13462: PUSH
13463: LD_INT 4
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 134
13472: PUSH
13473: LD_INT 19
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 132
13482: PUSH
13483: LD_INT 26
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 128
13492: PUSH
13493: LD_INT 31
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 123
13502: PUSH
13503: LD_INT 37
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 118
13512: PUSH
13513: LD_INT 45
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 112
13522: PUSH
13523: LD_INT 51
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 106
13532: PUSH
13533: LD_INT 57
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 99
13542: PUSH
13543: LD_INT 62
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 93
13552: PUSH
13553: LD_INT 67
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 86
13562: PUSH
13563: LD_INT 72
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 78
13572: PUSH
13573: LD_INT 75
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 71
13582: PUSH
13583: LD_INT 81
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 69
13592: PUSH
13593: LD_INT 88
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 71
13602: PUSH
13603: LD_INT 95
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 74
13612: PUSH
13613: LD_INT 103
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 80
13622: PUSH
13623: LD_INT 113
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: LD_INT 11
13657: PPUSH
13658: CALL 5018 0 5
// end ;
13662: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13663: LD_EXP 64
13667: PPUSH
13668: LD_INT 21
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 72
13682: NOT
13683: PUSH
13684: LD_EXP 18
13688: AND
13689: IFFALSE 13748
13691: GO 13693
13693: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13694: LD_EXP 57
13698: PPUSH
13699: CALL_OW 122
// wait ( 0 0$1 ) ;
13703: LD_INT 35
13705: PPUSH
13706: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13710: LD_EXP 57
13714: PPUSH
13715: LD_INT 114
13717: PPUSH
13718: LD_INT 114
13720: PPUSH
13721: CALL_OW 111
// wait ( 0 0$15 ) ;
13725: LD_INT 525
13727: PPUSH
13728: CALL_OW 67
// firstAttack = false ;
13732: LD_ADDR_EXP 18
13736: PUSH
13737: LD_INT 0
13739: ST_TO_ADDR
// enableAttacks = true ;
13740: LD_ADDR_EXP 17
13744: PUSH
13745: LD_INT 1
13747: ST_TO_ADDR
// end ;
13748: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13749: LD_OWVAR 67
13753: PUSH
13754: LD_INT 1
13756: EQUAL
13757: PUSH
13758: LD_EXP 57
13762: AND
13763: IFFALSE 13831
13765: GO 13767
13767: DISABLE
13768: LD_INT 0
13770: PPUSH
// begin enable ;
13771: ENABLE
// for un in secondBaseTeam do
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: LD_EXP 57
13781: PUSH
13782: FOR_IN
13783: IFFALSE 13829
// if IsInArea ( un , HillArea ) then
13785: LD_VAR 0 1
13789: PPUSH
13790: LD_INT 5
13792: PPUSH
13793: CALL_OW 308
13797: IFFALSE 13827
// begin SetSide ( un , 3 ) ;
13799: LD_VAR 0 1
13803: PPUSH
13804: LD_INT 3
13806: PPUSH
13807: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13811: LD_ADDR_EXP 57
13815: PUSH
13816: LD_EXP 57
13820: PUSH
13821: LD_VAR 0 1
13825: DIFF
13826: ST_TO_ADDR
// end ;
13827: GO 13782
13829: POP
13830: POP
// end ;
13831: PPOPN 1
13833: END
// export function Dial_Contact ; begin
13834: LD_INT 0
13836: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13837: LD_EXP 42
13841: PPUSH
13842: LD_STRING D7-Bur-1a
13844: PPUSH
13845: CALL_OW 88
// wait ( 0 0$12 ) ;
13849: LD_INT 420
13851: PPUSH
13852: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13856: LD_EXP 42
13860: PPUSH
13861: LD_STRING D7-Bur-1b
13863: PPUSH
13864: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13868: LD_EXP 46
13872: PPUSH
13873: CALL_OW 302
13877: PUSH
13878: LD_EXP 46
13882: PPUSH
13883: CALL_OW 255
13887: PUSH
13888: LD_INT 3
13890: EQUAL
13891: AND
13892: IFFALSE 13908
// Say ( Belkov , D7-Bel-1 ) else
13894: LD_EXP 46
13898: PPUSH
13899: LD_STRING D7-Bel-1
13901: PPUSH
13902: CALL_OW 88
13906: GO 13946
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13908: LD_EXP 47
13912: PPUSH
13913: CALL_OW 302
13917: PUSH
13918: LD_EXP 47
13922: PPUSH
13923: CALL_OW 255
13927: PUSH
13928: LD_INT 3
13930: EQUAL
13931: AND
13932: IFFALSE 13946
// Say ( Belkov2 , D7-Bel-1 ) ;
13934: LD_EXP 47
13938: PPUSH
13939: LD_STRING D7-Bel-1
13941: PPUSH
13942: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13946: LD_EXP 49
13950: PPUSH
13951: CALL_OW 302
13955: PUSH
13956: LD_EXP 49
13960: PPUSH
13961: CALL_OW 255
13965: PUSH
13966: LD_INT 3
13968: EQUAL
13969: AND
13970: IFFALSE 13984
// Say ( Kuzmov , D7-Kuz-1 ) ;
13972: LD_EXP 49
13976: PPUSH
13977: LD_STRING D7-Kuz-1
13979: PPUSH
13980: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13984: LD_EXP 45
13988: PPUSH
13989: CALL_OW 302
13993: PUSH
13994: LD_EXP 45
13998: PPUSH
13999: CALL_OW 255
14003: PUSH
14004: LD_INT 3
14006: EQUAL
14007: AND
14008: IFFALSE 14022
// Say ( Kovalyuk , D7-Kov-1 ) ;
14010: LD_EXP 45
14014: PPUSH
14015: LD_STRING D7-Kov-1
14017: PPUSH
14018: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14022: LD_EXP 48
14026: PPUSH
14027: CALL_OW 302
14031: PUSH
14032: LD_EXP 48
14036: PPUSH
14037: CALL_OW 255
14041: PUSH
14042: LD_INT 3
14044: EQUAL
14045: AND
14046: IFFALSE 14060
// Say ( Scholtze , D7-Sch-1 ) ;
14048: LD_EXP 48
14052: PPUSH
14053: LD_STRING D7-Sch-1
14055: PPUSH
14056: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14060: LD_INT 22
14062: PUSH
14063: LD_INT 3
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 26
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: PPUSH
14100: LD_STRING D7-RSol1-1
14102: PPUSH
14103: LD_STRING 
14105: PPUSH
14106: LD_INT 0
14108: PPUSH
14109: CALL 9513 0 4
// PrepareHeike ;
14113: CALL 3495 0 0
// wait ( 0 0$10 ) ;
14117: LD_INT 350
14119: PPUSH
14120: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14124: LD_EXP 63
14128: PPUSH
14129: LD_STRING D7a-Hke-1
14131: PPUSH
14132: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14136: LD_EXP 42
14140: PPUSH
14141: LD_STRING D7a-Bur-1
14143: PPUSH
14144: CALL_OW 88
// wait ( 0 0$50 ) ;
14148: LD_INT 1750
14150: PPUSH
14151: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14155: LD_EXP 49
14159: PPUSH
14160: CALL_OW 302
14164: PUSH
14165: LD_EXP 49
14169: PPUSH
14170: CALL_OW 255
14174: PUSH
14175: LD_INT 3
14177: EQUAL
14178: AND
14179: IFFALSE 14195
// Say ( Kuzmov , D8-Kuz-1 ) else
14181: LD_EXP 49
14185: PPUSH
14186: LD_STRING D8-Kuz-1
14188: PPUSH
14189: CALL_OW 88
14193: GO 14248
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14195: LD_INT 22
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 1
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 26
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PPUSH
14235: LD_STRING D8-RSol1-1
14237: PPUSH
14238: LD_STRING 
14240: PPUSH
14241: LD_INT 0
14243: PPUSH
14244: CALL 9513 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14248: LD_EXP 42
14252: PPUSH
14253: LD_STRING D8-Bur-1
14255: PPUSH
14256: CALL_OW 88
// end ;
14260: LD_VAR 0 1
14264: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14265: LD_EXP 54
14269: PPUSH
14270: CALL_OW 305
14274: NOT
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 50
14298: PUSH
14299: EMPTY
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: NOT
14312: AND
14313: PUSH
14314: LD_INT 22
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 21
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 50
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: PPUSH
14345: CALL_OW 69
14349: PUSH
14350: LD_INT 5
14352: LESS
14353: AND
14354: PUSH
14355: LD_INT 5
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: PPUSH
14371: CALL_OW 70
14375: PUSH
14376: LD_INT 3
14378: GREATER
14379: AND
14380: IFFALSE 14389
14382: GO 14384
14384: DISABLE
// Lose_ArabBreakthrough ;
14385: CALL 7567 0 0
14389: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14390: LD_EXP 19
14394: PUSH
14395: LD_EXP 38
14399: GREATEREQUAL
14400: IFFALSE 14624
14402: GO 14404
14404: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14405: LD_EXP 53
14409: PPUSH
14410: LD_STRING D9-Pla-1
14412: PPUSH
14413: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14417: LD_EXP 42
14421: PPUSH
14422: LD_STRING D9-Bur-1
14424: PPUSH
14425: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-2
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-2
14448: PPUSH
14449: CALL_OW 88
// wait ( 2 2$0 ) ;
14453: LD_INT 4200
14455: PPUSH
14456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14460: LD_INT 35
14462: PPUSH
14463: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14467: LD_INT 12
14469: PPUSH
14470: LD_INT 3
14472: PPUSH
14473: CALL_OW 428
14477: NOT
14478: IFFALSE 14460
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14480: LD_EXP 54
14484: PPUSH
14485: LD_INT 12
14487: PPUSH
14488: LD_INT 3
14490: PPUSH
14491: LD_INT 2
14493: PPUSH
14494: LD_INT 0
14496: PPUSH
14497: CALL_OW 50
// arabianCanExitMap = true ;
14501: LD_ADDR_EXP 7
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14509: LD_INT 35
14511: PPUSH
14512: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14516: LD_EXP 54
14520: PPUSH
14521: CALL_OW 87
// DialogueOn ;
14525: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14529: LD_EXP 54
14533: PPUSH
14534: LD_STRING D10-Gay-1
14536: PPUSH
14537: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14541: LD_EXP 42
14545: PPUSH
14546: LD_STRING D10-Bur-1
14548: PPUSH
14549: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-2
14560: PPUSH
14561: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14565: LD_EXP 52
14569: PPUSH
14570: LD_STRING D10-Pop-2
14572: PPUSH
14573: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-3
14584: PPUSH
14585: CALL_OW 94
// DialogueOff ;
14589: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14593: LD_EXP 54
14597: PPUSH
14598: LD_INT 36
14600: PPUSH
14601: LD_INT 38
14603: PPUSH
14604: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14608: LD_EXP 54
14612: PPUSH
14613: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14617: LD_STRING M2
14619: PPUSH
14620: CALL_OW 337
// end ;
14624: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14625: LD_EXP 7
14629: IFFALSE 14702
14631: GO 14633
14633: DISABLE
14634: LD_INT 0
14636: PPUSH
// begin enable ;
14637: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14638: LD_INT 22
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: PPUSH
14651: CALL_OW 69
14655: PPUSH
14656: LD_INT 13
14658: PPUSH
14659: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14663: LD_ADDR_VAR 0 1
14667: PUSH
14668: LD_INT 13
14670: PPUSH
14671: LD_INT 22
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PPUSH
14681: CALL_OW 70
14685: PUSH
14686: FOR_IN
14687: IFFALSE 14700
// RemoveUnit ( unit ) ;
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL_OW 64
14698: GO 14686
14700: POP
14701: POP
// end ;
14702: PPOPN 1
14704: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14705: LD_EXP 20
14709: NOT
14710: IFFALSE 15100
14712: GO 14714
14714: DISABLE
14715: LD_INT 0
14717: PPUSH
14718: PPUSH
// begin enable ;
14719: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14720: LD_ADDR_VAR 0 1
14724: PUSH
14725: LD_INT 22
14727: PUSH
14728: LD_INT 3
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 21
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PPUSH
14749: CALL_OW 69
14753: PUSH
14754: FOR_IN
14755: IFFALSE 15098
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_EXP 54
14766: PPUSH
14767: CALL_OW 296
14771: PUSH
14772: LD_INT 6
14774: LESS
14775: IFFALSE 15096
// begin SetSide ( Gaydar , 3 ) ;
14777: LD_EXP 54
14781: PPUSH
14782: LD_INT 3
14784: PPUSH
14785: CALL_OW 235
// ComWalk ( Gaydar ) ;
14789: LD_EXP 54
14793: PPUSH
14794: CALL_OW 138
// saveGaydar = true ;
14798: LD_ADDR_EXP 20
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14806: LD_INT 35
14808: PPUSH
14809: CALL_OW 67
// DialogueOn ;
14813: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14817: LD_EXP 54
14821: PPUSH
14822: LD_STRING D11-Gay-1
14824: PPUSH
14825: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14829: LD_EXP 42
14833: PPUSH
14834: LD_EXP 54
14838: PPUSH
14839: CALL_OW 296
14843: PUSH
14844: LD_INT 6
14846: LESS
14847: NOT
14848: IFFALSE 14948
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14850: LD_ADDR_VAR 0 2
14854: PUSH
14855: LD_INT 22
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 21
14867: PUSH
14868: LD_INT 1
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 26
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 50
14887: PUSH
14888: EMPTY
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: PUSH
14902: LD_EXP 54
14906: DIFF
14907: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14908: LD_VAR 0 2
14912: PPUSH
14913: LD_EXP 54
14917: PPUSH
14918: CALL_OW 74
14922: PPUSH
14923: LD_STRING D11-RSol1-1
14925: PPUSH
14926: CALL_OW 88
// gaydarWaitForBurlak = true ;
14930: LD_ADDR_EXP 21
14934: PUSH
14935: LD_INT 1
14937: ST_TO_ADDR
// DialogueOff ;
14938: CALL_OW 7
// exit ;
14942: POP
14943: POP
14944: GO 15100
// end else
14946: GO 15096
// begin Say ( Gaydar , D11-Gay-2 ) ;
14948: LD_EXP 54
14952: PPUSH
14953: LD_STRING D11-Gay-2
14955: PPUSH
14956: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14960: LD_EXP 42
14964: PPUSH
14965: LD_STRING D11-Bur-2
14967: PPUSH
14968: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-3
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-3
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-4
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-4
15015: PPUSH
15016: CALL_OW 88
// wait ( 0 0$2 ) ;
15020: LD_INT 70
15022: PPUSH
15023: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15027: LD_EXP 52
15031: PPUSH
15032: LD_STRING D12-Pop-1
15034: PPUSH
15035: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15039: LD_EXP 42
15043: PPUSH
15044: LD_STRING D12-Bur-1
15046: PPUSH
15047: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15051: LD_EXP 53
15055: PPUSH
15056: LD_STRING D12-Pla-1
15058: PPUSH
15059: CALL_OW 94
// DialogueOff ;
15063: CALL_OW 7
// canExitMap = true ;
15067: LD_ADDR_EXP 6
15071: PUSH
15072: LD_INT 1
15074: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15075: LD_STRING MFinal
15077: PPUSH
15078: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15082: LD_INT 4
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 424
// exit ;
15092: POP
15093: POP
15094: GO 15100
// end ; end ; end ;
15096: GO 14754
15098: POP
15099: POP
// end ;
15100: PPOPN 2
15102: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15103: LD_EXP 42
15107: PPUSH
15108: LD_EXP 54
15112: PPUSH
15113: CALL_OW 296
15117: PUSH
15118: LD_INT 6
15120: LESS
15121: PUSH
15122: LD_EXP 21
15126: AND
15127: IFFALSE 15280
15129: GO 15131
15131: DISABLE
// begin DialogueOn ;
15132: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15136: LD_EXP 54
15140: PPUSH
15141: LD_STRING D11-Gay-2
15143: PPUSH
15144: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15148: LD_EXP 42
15152: PPUSH
15153: LD_STRING D11-Bur-2
15155: PPUSH
15156: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-3
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-3
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-4
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-4
15203: PPUSH
15204: CALL_OW 88
// wait ( 0 0$2 ) ;
15208: LD_INT 70
15210: PPUSH
15211: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15215: LD_EXP 52
15219: PPUSH
15220: LD_STRING D12-Pop-1
15222: PPUSH
15223: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15227: LD_EXP 42
15231: PPUSH
15232: LD_STRING D12-Bur-1
15234: PPUSH
15235: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15239: LD_EXP 53
15243: PPUSH
15244: LD_STRING D12-Pla-1
15246: PPUSH
15247: CALL_OW 94
// DialogueOff ;
15251: CALL_OW 7
// canExitMap = true ;
15255: LD_ADDR_EXP 6
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15263: LD_STRING MFinal
15265: PPUSH
15266: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15270: LD_INT 4
15272: PPUSH
15273: LD_INT 1
15275: PPUSH
15276: CALL_OW 424
// end ;
15280: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15281: LD_INT 22
15283: PUSH
15284: LD_INT 3
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 21
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PPUSH
15305: CALL_OW 69
15309: PUSH
15310: LD_INT 0
15312: EQUAL
15313: PUSH
15314: LD_EXP 6
15318: AND
15319: IFFALSE 15328
15321: GO 15323
15323: DISABLE
// FinishMission ; end_of_file
15324: CALL 7685 0 0
15328: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15329: LD_EXP 17
15333: PUSH
15334: LD_EXP 19
15338: PUSH
15339: LD_INT 0
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_EXP 19
15348: PUSH
15349: LD_EXP 38
15353: LESS
15354: AND
15355: IFFALSE 15407
15357: GO 15359
15359: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15360: LD_INT 7
15362: PUSH
15363: LD_INT 10
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 1
15372: PPUSH
15373: LD_INT 2
15375: PPUSH
15376: CALL_OW 12
15380: ARRAY
15381: PPUSH
15382: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15386: LD_EXP 65
15390: PPUSH
15391: EMPTY
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: LD_INT 1
15398: PPUSH
15399: LD_INT 1
15401: NEG
15402: PPUSH
15403: CALL 5018 0 5
// end ;
15407: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15408: LD_EXP 17
15412: PUSH
15413: LD_EXP 19
15417: PUSH
15418: LD_INT 0
15420: GREATEREQUAL
15421: AND
15422: PUSH
15423: LD_EXP 19
15427: PUSH
15428: LD_EXP 38
15432: LESS
15433: AND
15434: IFFALSE 15664
15436: GO 15438
15438: DISABLE
// begin currentWave = currentWave + 1 ;
15439: LD_ADDR_EXP 19
15443: PUSH
15444: LD_EXP 19
15448: PUSH
15449: LD_INT 1
15451: PLUS
15452: ST_TO_ADDR
// PrepareArabianVehicles ;
15453: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15457: LD_EXP 65
15461: PPUSH
15462: LD_INT 135
15464: PUSH
15465: LD_INT 4
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 134
15474: PUSH
15475: LD_INT 19
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 132
15484: PUSH
15485: LD_INT 26
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 128
15494: PUSH
15495: LD_INT 31
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 123
15504: PUSH
15505: LD_INT 37
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 118
15514: PUSH
15515: LD_INT 45
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 112
15524: PUSH
15525: LD_INT 51
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 106
15534: PUSH
15535: LD_INT 57
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 99
15544: PUSH
15545: LD_INT 62
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 93
15554: PUSH
15555: LD_INT 67
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 86
15564: PUSH
15565: LD_INT 72
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 78
15574: PUSH
15575: LD_INT 75
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 71
15584: PUSH
15585: LD_INT 81
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 69
15594: PUSH
15595: LD_INT 88
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 71
15604: PUSH
15605: LD_INT 95
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 74
15614: PUSH
15615: LD_INT 103
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 80
15624: PUSH
15625: LD_INT 113
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: PPUSH
15651: LD_INT 0
15653: PPUSH
15654: LD_INT 1
15656: PPUSH
15657: LD_INT 11
15659: PPUSH
15660: CALL 5018 0 5
// end ;
15664: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15665: LD_EXP 17
15669: PUSH
15670: LD_OWVAR 67
15674: PUSH
15675: LD_INT 2
15677: EQUAL
15678: AND
15679: PUSH
15680: LD_EXP 19
15684: PUSH
15685: LD_INT 0
15687: GREATEREQUAL
15688: AND
15689: PUSH
15690: LD_EXP 19
15694: PUSH
15695: LD_EXP 38
15699: LESS
15700: AND
15701: IFFALSE 15829
15703: GO 15705
15705: DISABLE
// begin PrepareArabianVehicles ;
15706: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15710: LD_EXP 65
15714: PPUSH
15715: LD_INT 135
15717: PUSH
15718: LD_INT 4
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 134
15727: PUSH
15728: LD_INT 19
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 132
15737: PUSH
15738: LD_INT 26
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 128
15747: PUSH
15748: LD_INT 31
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 123
15757: PUSH
15758: LD_INT 37
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 118
15767: PUSH
15768: LD_INT 45
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 112
15777: PUSH
15778: LD_INT 51
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 106
15787: PUSH
15788: LD_INT 57
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 99
15797: PUSH
15798: LD_INT 62
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: PPUSH
15816: LD_INT 0
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: LD_INT 11
15824: PPUSH
15825: CALL 5018 0 5
// end ;
15829: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
15830: LD_EXP 17
15834: PUSH
15835: LD_OWVAR 67
15839: PUSH
15840: LD_INT 3
15842: EQUAL
15843: AND
15844: PUSH
15845: LD_EXP 19
15849: PUSH
15850: LD_INT 0
15852: GREATEREQUAL
15853: AND
15854: PUSH
15855: LD_EXP 19
15859: PUSH
15860: LD_EXP 38
15864: LESS
15865: AND
15866: IFFALSE 16060
15868: GO 15870
15870: DISABLE
// begin PrepareArabianVehicles ;
15871: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15875: LD_EXP 65
15879: PPUSH
15880: LD_INT 135
15882: PUSH
15883: LD_INT 4
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 134
15892: PUSH
15893: LD_INT 19
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 132
15902: PUSH
15903: LD_INT 26
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 128
15912: PUSH
15913: LD_INT 31
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 123
15922: PUSH
15923: LD_INT 37
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 118
15932: PUSH
15933: LD_INT 45
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 112
15942: PUSH
15943: LD_INT 51
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 106
15952: PUSH
15953: LD_INT 57
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 99
15962: PUSH
15963: LD_INT 62
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 104
15972: PUSH
15973: LD_INT 71
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 110
15982: PUSH
15983: LD_INT 78
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 119
15992: PUSH
15993: LD_INT 88
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 128
16002: PUSH
16003: LD_INT 97
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 135
16012: PUSH
16013: LD_INT 106
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 140
16022: PUSH
16023: LD_INT 153
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: PPUSH
16047: LD_INT 0
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: LD_INT 11
16055: PPUSH
16056: CALL 5018 0 5
// end ;
16060: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16061: LD_EXP 17
16065: PUSH
16066: LD_EXP 19
16070: PUSH
16071: LD_INT 1
16073: EQUAL
16074: AND
16075: PUSH
16076: LD_EXP 19
16080: PUSH
16081: LD_EXP 38
16085: LESS
16086: AND
16087: IFFALSE 16164
16089: GO 16091
16091: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16092: LD_INT 7
16094: PPUSH
16095: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16099: LD_EXP 65
16103: PPUSH
16104: LD_INT 157
16106: PUSH
16107: LD_INT 31
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 194
16116: PUSH
16117: LD_INT 124
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 174
16126: PUSH
16127: LD_INT 158
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 151
16136: PUSH
16137: LD_INT 164
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: PPUSH
16150: LD_INT 0
16152: PPUSH
16153: LD_INT 1
16155: PPUSH
16156: LD_INT 1
16158: NEG
16159: PPUSH
16160: CALL 5018 0 5
// end ;
16164: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16165: LD_EXP 17
16169: PUSH
16170: LD_EXP 19
16174: PUSH
16175: LD_INT 1
16177: EQUAL
16178: AND
16179: PUSH
16180: LD_EXP 19
16184: PUSH
16185: LD_EXP 38
16189: LESS
16190: AND
16191: IFFALSE 16340
16193: GO 16195
16195: DISABLE
// begin wait ( 1 1$30 ) ;
16196: LD_INT 3150
16198: PPUSH
16199: CALL_OW 67
// currentWave = currentWave + 1 ;
16203: LD_ADDR_EXP 19
16207: PUSH
16208: LD_EXP 19
16212: PUSH
16213: LD_INT 1
16215: PLUS
16216: ST_TO_ADDR
// PrepareArabianVehicles ;
16217: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16221: LD_EXP 65
16225: PPUSH
16226: LD_INT 135
16228: PUSH
16229: LD_INT 4
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 134
16238: PUSH
16239: LD_INT 19
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 132
16248: PUSH
16249: LD_INT 26
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 128
16258: PUSH
16259: LD_INT 31
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 123
16268: PUSH
16269: LD_INT 37
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 118
16278: PUSH
16279: LD_INT 45
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 112
16288: PUSH
16289: LD_INT 51
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 106
16298: PUSH
16299: LD_INT 57
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 99
16308: PUSH
16309: LD_INT 62
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: PPUSH
16327: LD_INT 0
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: LD_INT 11
16335: PPUSH
16336: CALL 5018 0 5
// end ;
16340: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16341: LD_EXP 17
16345: PUSH
16346: LD_OWVAR 67
16350: PUSH
16351: LD_INT 2
16353: EQUAL
16354: AND
16355: PUSH
16356: LD_EXP 19
16360: PUSH
16361: LD_INT 1
16363: EQUAL
16364: AND
16365: PUSH
16366: LD_EXP 19
16370: PUSH
16371: LD_EXP 38
16375: LESS
16376: AND
16377: IFFALSE 16571
16379: GO 16381
16381: DISABLE
// begin PrepareArabianVehicles ;
16382: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16386: LD_EXP 65
16390: PPUSH
16391: LD_INT 135
16393: PUSH
16394: LD_INT 4
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 134
16403: PUSH
16404: LD_INT 19
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 132
16413: PUSH
16414: LD_INT 26
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 128
16423: PUSH
16424: LD_INT 31
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 123
16433: PUSH
16434: LD_INT 37
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 118
16443: PUSH
16444: LD_INT 45
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 112
16453: PUSH
16454: LD_INT 51
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 106
16463: PUSH
16464: LD_INT 57
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 99
16473: PUSH
16474: LD_INT 62
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 104
16483: PUSH
16484: LD_INT 71
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 110
16493: PUSH
16494: LD_INT 78
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 119
16503: PUSH
16504: LD_INT 88
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 128
16513: PUSH
16514: LD_INT 97
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 135
16523: PUSH
16524: LD_INT 106
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 140
16533: PUSH
16534: LD_INT 153
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: PPUSH
16558: LD_INT 0
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 11
16566: PPUSH
16567: CALL 5018 0 5
// end ;
16571: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
16572: LD_EXP 17
16576: PUSH
16577: LD_OWVAR 67
16581: PUSH
16582: LD_INT 3
16584: EQUAL
16585: AND
16586: PUSH
16587: LD_EXP 19
16591: PUSH
16592: LD_INT 1
16594: EQUAL
16595: AND
16596: PUSH
16597: LD_EXP 19
16601: PUSH
16602: LD_EXP 38
16606: LESS
16607: AND
16608: IFFALSE 16824
16610: GO 16612
16612: DISABLE
// begin PrepareArabianVehicles ;
16613: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16617: LD_EXP 65
16621: PPUSH
16622: LD_INT 135
16624: PUSH
16625: LD_INT 4
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 134
16634: PUSH
16635: LD_INT 19
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 132
16644: PUSH
16645: LD_INT 26
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 128
16654: PUSH
16655: LD_INT 31
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 123
16664: PUSH
16665: LD_INT 37
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 118
16674: PUSH
16675: LD_INT 45
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 112
16684: PUSH
16685: LD_INT 51
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 106
16694: PUSH
16695: LD_INT 57
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 99
16704: PUSH
16705: LD_INT 62
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 93
16714: PUSH
16715: LD_INT 67
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 86
16724: PUSH
16725: LD_INT 72
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 78
16734: PUSH
16735: LD_INT 75
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 71
16744: PUSH
16745: LD_INT 81
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 69
16754: PUSH
16755: LD_INT 88
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 71
16764: PUSH
16765: LD_INT 95
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 74
16774: PUSH
16775: LD_INT 103
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 80
16784: PUSH
16785: LD_INT 113
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: PPUSH
16811: LD_INT 0
16813: PPUSH
16814: LD_INT 1
16816: PPUSH
16817: LD_INT 11
16819: PPUSH
16820: CALL 5018 0 5
// end ;
16824: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16825: LD_EXP 17
16829: PUSH
16830: LD_EXP 19
16834: PUSH
16835: LD_INT 2
16837: EQUAL
16838: AND
16839: PUSH
16840: LD_EXP 19
16844: PUSH
16845: LD_EXP 38
16849: LESS
16850: AND
16851: IFFALSE 16928
16853: GO 16855
16855: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16856: LD_INT 7
16858: PPUSH
16859: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16863: LD_EXP 65
16867: PPUSH
16868: LD_INT 157
16870: PUSH
16871: LD_INT 31
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 194
16880: PUSH
16881: LD_INT 124
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 174
16890: PUSH
16891: LD_INT 158
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 151
16900: PUSH
16901: LD_INT 164
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: PPUSH
16914: LD_INT 0
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: LD_INT 1
16922: NEG
16923: PPUSH
16924: CALL 5018 0 5
// end ;
16928: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16929: LD_EXP 17
16933: PUSH
16934: LD_EXP 19
16938: PUSH
16939: LD_INT 2
16941: EQUAL
16942: AND
16943: PUSH
16944: LD_EXP 19
16948: PUSH
16949: LD_EXP 38
16953: LESS
16954: AND
16955: IFFALSE 17192
16957: GO 16959
16959: DISABLE
// begin wait ( 1 1$30 ) ;
16960: LD_INT 3150
16962: PPUSH
16963: CALL_OW 67
// currentWave = currentWave + 1 ;
16967: LD_ADDR_EXP 19
16971: PUSH
16972: LD_EXP 19
16976: PUSH
16977: LD_INT 1
16979: PLUS
16980: ST_TO_ADDR
// PrepareArabianVehicles ;
16981: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16985: LD_EXP 65
16989: PPUSH
16990: LD_INT 135
16992: PUSH
16993: LD_INT 4
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 134
17002: PUSH
17003: LD_INT 19
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 132
17012: PUSH
17013: LD_INT 26
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 128
17022: PUSH
17023: LD_INT 31
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 123
17032: PUSH
17033: LD_INT 37
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 118
17042: PUSH
17043: LD_INT 45
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 112
17052: PUSH
17053: LD_INT 51
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 106
17062: PUSH
17063: LD_INT 57
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 99
17072: PUSH
17073: LD_INT 62
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 93
17082: PUSH
17083: LD_INT 67
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 86
17092: PUSH
17093: LD_INT 72
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 78
17102: PUSH
17103: LD_INT 75
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 71
17112: PUSH
17113: LD_INT 81
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 69
17122: PUSH
17123: LD_INT 88
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 71
17132: PUSH
17133: LD_INT 95
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 74
17142: PUSH
17143: LD_INT 103
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 80
17152: PUSH
17153: LD_INT 113
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_INT 11
17187: PPUSH
17188: CALL 5018 0 5
// end ;
17192: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17193: LD_EXP 17
17197: PUSH
17198: LD_OWVAR 67
17202: PUSH
17203: LD_INT 2
17205: EQUAL
17206: AND
17207: PUSH
17208: LD_EXP 19
17212: PUSH
17213: LD_INT 2
17215: EQUAL
17216: AND
17217: PUSH
17218: LD_EXP 19
17222: PUSH
17223: LD_EXP 38
17227: LESS
17228: AND
17229: IFFALSE 17423
17231: GO 17233
17233: DISABLE
// begin PrepareArabianVehicles ;
17234: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17238: LD_EXP 65
17242: PPUSH
17243: LD_INT 135
17245: PUSH
17246: LD_INT 4
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 134
17255: PUSH
17256: LD_INT 19
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 132
17265: PUSH
17266: LD_INT 26
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 128
17275: PUSH
17276: LD_INT 31
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 123
17285: PUSH
17286: LD_INT 37
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 118
17295: PUSH
17296: LD_INT 45
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 112
17305: PUSH
17306: LD_INT 51
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 106
17315: PUSH
17316: LD_INT 57
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 99
17325: PUSH
17326: LD_INT 62
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 104
17335: PUSH
17336: LD_INT 71
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 110
17345: PUSH
17346: LD_INT 78
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 119
17355: PUSH
17356: LD_INT 88
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 128
17365: PUSH
17366: LD_INT 97
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 135
17375: PUSH
17376: LD_INT 106
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 140
17385: PUSH
17386: LD_INT 153
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: PPUSH
17410: LD_INT 0
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_INT 11
17418: PPUSH
17419: CALL 5018 0 5
// end ;
17423: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
17424: LD_EXP 17
17428: PUSH
17429: LD_OWVAR 67
17433: PUSH
17434: LD_INT 3
17436: EQUAL
17437: AND
17438: PUSH
17439: LD_EXP 19
17443: PUSH
17444: LD_INT 2
17446: EQUAL
17447: AND
17448: PUSH
17449: LD_EXP 19
17453: PUSH
17454: LD_EXP 38
17458: LESS
17459: AND
17460: IFFALSE 17654
17462: GO 17464
17464: DISABLE
// begin PrepareArabianVehicles ;
17465: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17469: LD_EXP 65
17473: PPUSH
17474: LD_INT 135
17476: PUSH
17477: LD_INT 4
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 134
17486: PUSH
17487: LD_INT 19
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 132
17496: PUSH
17497: LD_INT 26
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 128
17506: PUSH
17507: LD_INT 31
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 123
17516: PUSH
17517: LD_INT 37
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 118
17526: PUSH
17527: LD_INT 45
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 112
17536: PUSH
17537: LD_INT 51
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 106
17546: PUSH
17547: LD_INT 57
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 99
17556: PUSH
17557: LD_INT 62
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 104
17566: PUSH
17567: LD_INT 71
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 110
17576: PUSH
17577: LD_INT 78
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 119
17586: PUSH
17587: LD_INT 88
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 128
17596: PUSH
17597: LD_INT 97
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 135
17606: PUSH
17607: LD_INT 106
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 140
17616: PUSH
17617: LD_INT 153
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: PPUSH
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: LD_INT 11
17649: PPUSH
17650: CALL 5018 0 5
// end ;
17654: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17655: LD_EXP 17
17659: PUSH
17660: LD_EXP 19
17664: PUSH
17665: LD_INT 3
17667: EQUAL
17668: AND
17669: PUSH
17670: LD_EXP 19
17674: PUSH
17675: LD_EXP 38
17679: LESS
17680: AND
17681: IFFALSE 17758
17683: GO 17685
17685: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17686: LD_INT 7
17688: PPUSH
17689: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17693: LD_EXP 65
17697: PPUSH
17698: LD_INT 157
17700: PUSH
17701: LD_INT 31
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 194
17710: PUSH
17711: LD_INT 124
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 174
17720: PUSH
17721: LD_INT 158
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 151
17730: PUSH
17731: LD_INT 164
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: PPUSH
17744: LD_INT 0
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: LD_INT 1
17752: NEG
17753: PPUSH
17754: CALL 5018 0 5
// end ;
17758: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17759: LD_EXP 17
17763: PUSH
17764: LD_EXP 19
17768: PUSH
17769: LD_INT 3
17771: EQUAL
17772: AND
17773: PUSH
17774: LD_EXP 19
17778: PUSH
17779: LD_EXP 38
17783: LESS
17784: AND
17785: IFFALSE 18022
17787: GO 17789
17789: DISABLE
// begin wait ( 1 1$30 ) ;
17790: LD_INT 3150
17792: PPUSH
17793: CALL_OW 67
// currentWave = currentWave + 1 ;
17797: LD_ADDR_EXP 19
17801: PUSH
17802: LD_EXP 19
17806: PUSH
17807: LD_INT 1
17809: PLUS
17810: ST_TO_ADDR
// PrepareArabianVehicles ;
17811: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17815: LD_EXP 65
17819: PPUSH
17820: LD_INT 135
17822: PUSH
17823: LD_INT 4
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 134
17832: PUSH
17833: LD_INT 19
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 132
17842: PUSH
17843: LD_INT 26
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 128
17852: PUSH
17853: LD_INT 31
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 123
17862: PUSH
17863: LD_INT 37
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 118
17872: PUSH
17873: LD_INT 45
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 112
17882: PUSH
17883: LD_INT 51
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 106
17892: PUSH
17893: LD_INT 57
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 99
17902: PUSH
17903: LD_INT 62
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 93
17912: PUSH
17913: LD_INT 67
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 86
17922: PUSH
17923: LD_INT 72
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 78
17932: PUSH
17933: LD_INT 75
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 71
17942: PUSH
17943: LD_INT 81
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 69
17952: PUSH
17953: LD_INT 88
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 71
17962: PUSH
17963: LD_INT 95
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 74
17972: PUSH
17973: LD_INT 103
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 80
17982: PUSH
17983: LD_INT 113
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: PPUSH
18009: LD_INT 0
18011: PPUSH
18012: LD_INT 1
18014: PPUSH
18015: LD_INT 11
18017: PPUSH
18018: CALL 5018 0 5
// end ;
18022: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18023: LD_EXP 17
18027: PUSH
18028: LD_OWVAR 67
18032: PUSH
18033: LD_INT 2
18035: EQUAL
18036: AND
18037: PUSH
18038: LD_EXP 19
18042: PUSH
18043: LD_INT 3
18045: EQUAL
18046: AND
18047: PUSH
18048: LD_EXP 19
18052: PUSH
18053: LD_EXP 38
18057: LESS
18058: AND
18059: IFFALSE 18253
18061: GO 18063
18063: DISABLE
// begin PrepareArabianVehicles ;
18064: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18068: LD_EXP 65
18072: PPUSH
18073: LD_INT 135
18075: PUSH
18076: LD_INT 4
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 134
18085: PUSH
18086: LD_INT 19
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 132
18095: PUSH
18096: LD_INT 26
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 128
18105: PUSH
18106: LD_INT 31
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 123
18115: PUSH
18116: LD_INT 37
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 118
18125: PUSH
18126: LD_INT 45
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 112
18135: PUSH
18136: LD_INT 51
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 106
18145: PUSH
18146: LD_INT 57
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 99
18155: PUSH
18156: LD_INT 62
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 104
18165: PUSH
18166: LD_INT 71
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 110
18175: PUSH
18176: LD_INT 78
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 119
18185: PUSH
18186: LD_INT 88
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 128
18195: PUSH
18196: LD_INT 97
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 135
18205: PUSH
18206: LD_INT 106
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 140
18215: PUSH
18216: LD_INT 153
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: PPUSH
18240: LD_INT 0
18242: PPUSH
18243: LD_INT 1
18245: PPUSH
18246: LD_INT 11
18248: PPUSH
18249: CALL 5018 0 5
// end ;
18253: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
18254: LD_EXP 17
18258: PUSH
18259: LD_OWVAR 67
18263: PUSH
18264: LD_INT 3
18266: EQUAL
18267: AND
18268: PUSH
18269: LD_EXP 19
18273: PUSH
18274: LD_INT 3
18276: EQUAL
18277: AND
18278: PUSH
18279: LD_EXP 19
18283: PUSH
18284: LD_EXP 38
18288: LESS
18289: AND
18290: IFFALSE 18484
18292: GO 18294
18294: DISABLE
// begin PrepareArabianVehicles ;
18295: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18299: LD_EXP 65
18303: PPUSH
18304: LD_INT 135
18306: PUSH
18307: LD_INT 4
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 134
18316: PUSH
18317: LD_INT 19
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 132
18326: PUSH
18327: LD_INT 26
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 128
18336: PUSH
18337: LD_INT 31
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 123
18346: PUSH
18347: LD_INT 37
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 118
18356: PUSH
18357: LD_INT 45
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 112
18366: PUSH
18367: LD_INT 51
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 106
18376: PUSH
18377: LD_INT 57
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 99
18386: PUSH
18387: LD_INT 62
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 104
18396: PUSH
18397: LD_INT 71
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 110
18406: PUSH
18407: LD_INT 78
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 119
18416: PUSH
18417: LD_INT 88
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 128
18426: PUSH
18427: LD_INT 97
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 135
18436: PUSH
18437: LD_INT 106
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 140
18446: PUSH
18447: LD_INT 153
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PPUSH
18471: LD_INT 0
18473: PPUSH
18474: LD_INT 1
18476: PPUSH
18477: LD_INT 11
18479: PPUSH
18480: CALL 5018 0 5
// end ;
18484: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18485: LD_EXP 54
18489: PPUSH
18490: CALL_OW 305
18494: PUSH
18495: LD_EXP 23
18499: PUSH
18500: LD_INT 5
18502: LESS
18503: AND
18504: IFFALSE 18514
18506: GO 18508
18508: DISABLE
// begin PrepareArabianKiller ;
18509: CALL 4066 0 0
// enable ;
18513: ENABLE
// end ; end_of_file
18514: END
// export function SetAchievements ; begin
18515: LD_INT 0
18517: PPUSH
// if stealWarmCount = 0 then
18518: LD_EXP 12
18522: PUSH
18523: LD_INT 0
18525: EQUAL
18526: IFFALSE 18535
// SetAchievement ( ACH_ENO ) ;
18528: LD_STRING ACH_ENO
18530: PPUSH
18531: CALL_OW 543
// end ;
18535: LD_VAR 0 1
18539: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18540: LD_EXP 25
18544: PUSH
18545: LD_INT 6
18547: GREATEREQUAL
18548: IFFALSE 18560
18550: GO 18552
18552: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18553: LD_STRING ACH_DEFENSE
18555: PPUSH
18556: CALL_OW 543
18560: END
// every 1 trigger killedArabianUnits >= 25 do
18561: LD_EXP 22
18565: PUSH
18566: LD_INT 25
18568: GREATEREQUAL
18569: IFFALSE 18581
18571: GO 18573
18573: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18574: LD_STRING ACH_ARAB
18576: PPUSH
18577: CALL_OW 543
18581: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18582: LD_VAR 0 2
18586: PUSH
18587: LD_INT 100
18589: EQUAL
18590: IFFALSE 19539
// begin if not StreamModeActive then
18592: LD_EXP 66
18596: NOT
18597: IFFALSE 18607
// StreamModeActive := true ;
18599: LD_ADDR_EXP 66
18603: PUSH
18604: LD_INT 1
18606: ST_TO_ADDR
// if p3 = 0 then
18607: LD_VAR 0 3
18611: PUSH
18612: LD_INT 0
18614: EQUAL
18615: IFFALSE 18621
// InitStreamMode ;
18617: CALL 19697 0 0
// if p3 = 1 then
18621: LD_VAR 0 3
18625: PUSH
18626: LD_INT 1
18628: EQUAL
18629: IFFALSE 18639
// sRocket := true ;
18631: LD_ADDR_EXP 71
18635: PUSH
18636: LD_INT 1
18638: ST_TO_ADDR
// if p3 = 2 then
18639: LD_VAR 0 3
18643: PUSH
18644: LD_INT 2
18646: EQUAL
18647: IFFALSE 18657
// sSpeed := true ;
18649: LD_ADDR_EXP 70
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// if p3 = 3 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 3
18664: EQUAL
18665: IFFALSE 18675
// sEngine := true ;
18667: LD_ADDR_EXP 72
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 4 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 4
18682: EQUAL
18683: IFFALSE 18693
// sSpec := true ;
18685: LD_ADDR_EXP 69
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 5 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 5
18700: EQUAL
18701: IFFALSE 18711
// sLevel := true ;
18703: LD_ADDR_EXP 73
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 6 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 6
18718: EQUAL
18719: IFFALSE 18729
// sArmoury := true ;
18721: LD_ADDR_EXP 74
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 7 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 7
18736: EQUAL
18737: IFFALSE 18747
// sRadar := true ;
18739: LD_ADDR_EXP 75
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 8 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 8
18754: EQUAL
18755: IFFALSE 18765
// sBunker := true ;
18757: LD_ADDR_EXP 76
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 9 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 9
18772: EQUAL
18773: IFFALSE 18783
// sHack := true ;
18775: LD_ADDR_EXP 77
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 10 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 10
18790: EQUAL
18791: IFFALSE 18801
// sFire := true ;
18793: LD_ADDR_EXP 78
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 11 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 11
18808: EQUAL
18809: IFFALSE 18819
// sRefresh := true ;
18811: LD_ADDR_EXP 79
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 12 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 12
18826: EQUAL
18827: IFFALSE 18837
// sExp := true ;
18829: LD_ADDR_EXP 80
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// if p3 = 13 then
18837: LD_VAR 0 3
18841: PUSH
18842: LD_INT 13
18844: EQUAL
18845: IFFALSE 18855
// sDepot := true ;
18847: LD_ADDR_EXP 81
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// if p3 = 14 then
18855: LD_VAR 0 3
18859: PUSH
18860: LD_INT 14
18862: EQUAL
18863: IFFALSE 18873
// sFlag := true ;
18865: LD_ADDR_EXP 82
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// if p3 = 15 then
18873: LD_VAR 0 3
18877: PUSH
18878: LD_INT 15
18880: EQUAL
18881: IFFALSE 18891
// sKamikadze := true ;
18883: LD_ADDR_EXP 90
18887: PUSH
18888: LD_INT 1
18890: ST_TO_ADDR
// if p3 = 16 then
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 16
18898: EQUAL
18899: IFFALSE 18909
// sTroll := true ;
18901: LD_ADDR_EXP 91
18905: PUSH
18906: LD_INT 1
18908: ST_TO_ADDR
// if p3 = 17 then
18909: LD_VAR 0 3
18913: PUSH
18914: LD_INT 17
18916: EQUAL
18917: IFFALSE 18927
// sSlow := true ;
18919: LD_ADDR_EXP 92
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// if p3 = 18 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 18
18934: EQUAL
18935: IFFALSE 18945
// sLack := true ;
18937: LD_ADDR_EXP 93
18941: PUSH
18942: LD_INT 1
18944: ST_TO_ADDR
// if p3 = 19 then
18945: LD_VAR 0 3
18949: PUSH
18950: LD_INT 19
18952: EQUAL
18953: IFFALSE 18963
// sTank := true ;
18955: LD_ADDR_EXP 95
18959: PUSH
18960: LD_INT 1
18962: ST_TO_ADDR
// if p3 = 20 then
18963: LD_VAR 0 3
18967: PUSH
18968: LD_INT 20
18970: EQUAL
18971: IFFALSE 18981
// sRemote := true ;
18973: LD_ADDR_EXP 96
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if p3 = 21 then
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 21
18988: EQUAL
18989: IFFALSE 18999
// sPowell := true ;
18991: LD_ADDR_EXP 97
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// if p3 = 22 then
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 22
19006: EQUAL
19007: IFFALSE 19017
// sTeleport := true ;
19009: LD_ADDR_EXP 100
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
// if p3 = 23 then
19017: LD_VAR 0 3
19021: PUSH
19022: LD_INT 23
19024: EQUAL
19025: IFFALSE 19035
// sOilTower := true ;
19027: LD_ADDR_EXP 102
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// if p3 = 24 then
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 24
19042: EQUAL
19043: IFFALSE 19053
// sShovel := true ;
19045: LD_ADDR_EXP 103
19049: PUSH
19050: LD_INT 1
19052: ST_TO_ADDR
// if p3 = 25 then
19053: LD_VAR 0 3
19057: PUSH
19058: LD_INT 25
19060: EQUAL
19061: IFFALSE 19071
// sSheik := true ;
19063: LD_ADDR_EXP 104
19067: PUSH
19068: LD_INT 1
19070: ST_TO_ADDR
// if p3 = 26 then
19071: LD_VAR 0 3
19075: PUSH
19076: LD_INT 26
19078: EQUAL
19079: IFFALSE 19089
// sEarthquake := true ;
19081: LD_ADDR_EXP 106
19085: PUSH
19086: LD_INT 1
19088: ST_TO_ADDR
// if p3 = 27 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_INT 27
19096: EQUAL
19097: IFFALSE 19107
// sAI := true ;
19099: LD_ADDR_EXP 107
19103: PUSH
19104: LD_INT 1
19106: ST_TO_ADDR
// if p3 = 28 then
19107: LD_VAR 0 3
19111: PUSH
19112: LD_INT 28
19114: EQUAL
19115: IFFALSE 19125
// sCargo := true ;
19117: LD_ADDR_EXP 110
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// if p3 = 29 then
19125: LD_VAR 0 3
19129: PUSH
19130: LD_INT 29
19132: EQUAL
19133: IFFALSE 19143
// sDLaser := true ;
19135: LD_ADDR_EXP 111
19139: PUSH
19140: LD_INT 1
19142: ST_TO_ADDR
// if p3 = 30 then
19143: LD_VAR 0 3
19147: PUSH
19148: LD_INT 30
19150: EQUAL
19151: IFFALSE 19161
// sExchange := true ;
19153: LD_ADDR_EXP 112
19157: PUSH
19158: LD_INT 1
19160: ST_TO_ADDR
// if p3 = 31 then
19161: LD_VAR 0 3
19165: PUSH
19166: LD_INT 31
19168: EQUAL
19169: IFFALSE 19179
// sFac := true ;
19171: LD_ADDR_EXP 113
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// if p3 = 32 then
19179: LD_VAR 0 3
19183: PUSH
19184: LD_INT 32
19186: EQUAL
19187: IFFALSE 19197
// sPower := true ;
19189: LD_ADDR_EXP 114
19193: PUSH
19194: LD_INT 1
19196: ST_TO_ADDR
// if p3 = 33 then
19197: LD_VAR 0 3
19201: PUSH
19202: LD_INT 33
19204: EQUAL
19205: IFFALSE 19215
// sRandom := true ;
19207: LD_ADDR_EXP 115
19211: PUSH
19212: LD_INT 1
19214: ST_TO_ADDR
// if p3 = 34 then
19215: LD_VAR 0 3
19219: PUSH
19220: LD_INT 34
19222: EQUAL
19223: IFFALSE 19233
// sShield := true ;
19225: LD_ADDR_EXP 116
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if p3 = 35 then
19233: LD_VAR 0 3
19237: PUSH
19238: LD_INT 35
19240: EQUAL
19241: IFFALSE 19251
// sTime := true ;
19243: LD_ADDR_EXP 117
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// if p3 = 36 then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_INT 36
19258: EQUAL
19259: IFFALSE 19269
// sTools := true ;
19261: LD_ADDR_EXP 118
19265: PUSH
19266: LD_INT 1
19268: ST_TO_ADDR
// if p3 = 101 then
19269: LD_VAR 0 3
19273: PUSH
19274: LD_INT 101
19276: EQUAL
19277: IFFALSE 19287
// sSold := true ;
19279: LD_ADDR_EXP 83
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// if p3 = 102 then
19287: LD_VAR 0 3
19291: PUSH
19292: LD_INT 102
19294: EQUAL
19295: IFFALSE 19305
// sDiff := true ;
19297: LD_ADDR_EXP 84
19301: PUSH
19302: LD_INT 1
19304: ST_TO_ADDR
// if p3 = 103 then
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 103
19312: EQUAL
19313: IFFALSE 19323
// sFog := true ;
19315: LD_ADDR_EXP 87
19319: PUSH
19320: LD_INT 1
19322: ST_TO_ADDR
// if p3 = 104 then
19323: LD_VAR 0 3
19327: PUSH
19328: LD_INT 104
19330: EQUAL
19331: IFFALSE 19341
// sReset := true ;
19333: LD_ADDR_EXP 88
19337: PUSH
19338: LD_INT 1
19340: ST_TO_ADDR
// if p3 = 105 then
19341: LD_VAR 0 3
19345: PUSH
19346: LD_INT 105
19348: EQUAL
19349: IFFALSE 19359
// sSun := true ;
19351: LD_ADDR_EXP 89
19355: PUSH
19356: LD_INT 1
19358: ST_TO_ADDR
// if p3 = 106 then
19359: LD_VAR 0 3
19363: PUSH
19364: LD_INT 106
19366: EQUAL
19367: IFFALSE 19377
// sTiger := true ;
19369: LD_ADDR_EXP 85
19373: PUSH
19374: LD_INT 1
19376: ST_TO_ADDR
// if p3 = 107 then
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 107
19384: EQUAL
19385: IFFALSE 19395
// sBomb := true ;
19387: LD_ADDR_EXP 86
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// if p3 = 108 then
19395: LD_VAR 0 3
19399: PUSH
19400: LD_INT 108
19402: EQUAL
19403: IFFALSE 19413
// sWound := true ;
19405: LD_ADDR_EXP 94
19409: PUSH
19410: LD_INT 1
19412: ST_TO_ADDR
// if p3 = 109 then
19413: LD_VAR 0 3
19417: PUSH
19418: LD_INT 109
19420: EQUAL
19421: IFFALSE 19431
// sBetray := true ;
19423: LD_ADDR_EXP 98
19427: PUSH
19428: LD_INT 1
19430: ST_TO_ADDR
// if p3 = 110 then
19431: LD_VAR 0 3
19435: PUSH
19436: LD_INT 110
19438: EQUAL
19439: IFFALSE 19449
// sContamin := true ;
19441: LD_ADDR_EXP 99
19445: PUSH
19446: LD_INT 1
19448: ST_TO_ADDR
// if p3 = 111 then
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 111
19456: EQUAL
19457: IFFALSE 19467
// sOil := true ;
19459: LD_ADDR_EXP 101
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 112 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 112
19474: EQUAL
19475: IFFALSE 19485
// sStu := true ;
19477: LD_ADDR_EXP 105
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// if p3 = 113 then
19485: LD_VAR 0 3
19489: PUSH
19490: LD_INT 113
19492: EQUAL
19493: IFFALSE 19503
// sBazooka := true ;
19495: LD_ADDR_EXP 108
19499: PUSH
19500: LD_INT 1
19502: ST_TO_ADDR
// if p3 = 114 then
19503: LD_VAR 0 3
19507: PUSH
19508: LD_INT 114
19510: EQUAL
19511: IFFALSE 19521
// sMortar := true ;
19513: LD_ADDR_EXP 109
19517: PUSH
19518: LD_INT 1
19520: ST_TO_ADDR
// if p3 = 115 then
19521: LD_VAR 0 3
19525: PUSH
19526: LD_INT 115
19528: EQUAL
19529: IFFALSE 19539
// sRanger := true ;
19531: LD_ADDR_EXP 119
19535: PUSH
19536: LD_INT 1
19538: ST_TO_ADDR
// end ; if p2 = 101 then
19539: LD_VAR 0 2
19543: PUSH
19544: LD_INT 101
19546: EQUAL
19547: IFFALSE 19675
// begin case p3 of 1 :
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 1
19556: DOUBLE
19557: EQUAL
19558: IFTRUE 19562
19560: GO 19569
19562: POP
// hHackUnlimitedResources ; 2 :
19563: CALL 30710 0 0
19567: GO 19675
19569: LD_INT 2
19571: DOUBLE
19572: EQUAL
19573: IFTRUE 19577
19575: GO 19584
19577: POP
// hHackSetLevel10 ; 3 :
19578: CALL 30843 0 0
19582: GO 19675
19584: LD_INT 3
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19599
19592: POP
// hHackSetLevel10YourUnits ; 4 :
19593: CALL 30928 0 0
19597: GO 19675
19599: LD_INT 4
19601: DOUBLE
19602: EQUAL
19603: IFTRUE 19607
19605: GO 19614
19607: POP
// hHackInvincible ; 5 :
19608: CALL 31376 0 0
19612: GO 19675
19614: LD_INT 5
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19629
19622: POP
// hHackInvisible ; 6 :
19623: CALL 31487 0 0
19627: GO 19675
19629: LD_INT 6
19631: DOUBLE
19632: EQUAL
19633: IFTRUE 19637
19635: GO 19644
19637: POP
// hHackChangeYourSide ; 7 :
19638: CALL 31544 0 0
19642: GO 19675
19644: LD_INT 7
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19659
19652: POP
// hHackChangeUnitSide ; 8 :
19653: CALL 31586 0 0
19657: GO 19675
19659: LD_INT 8
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19674
19667: POP
// hHackFog ; end ;
19668: CALL 31687 0 0
19672: GO 19675
19674: POP
// end ; end ;
19675: PPOPN 6
19677: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19678: GO 19680
19680: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19681: LD_STRING initStreamRollete();
19683: PPUSH
19684: CALL_OW 559
// InitStreamMode ;
19688: CALL 19697 0 0
// DefineStreamItems ( ) ;
19692: CALL 20137 0 0
// end ;
19696: END
// function InitStreamMode ; begin
19697: LD_INT 0
19699: PPUSH
// streamModeActive := false ;
19700: LD_ADDR_EXP 66
19704: PUSH
19705: LD_INT 0
19707: ST_TO_ADDR
// normalCounter := 36 ;
19708: LD_ADDR_EXP 67
19712: PUSH
19713: LD_INT 36
19715: ST_TO_ADDR
// hardcoreCounter := 16 ;
19716: LD_ADDR_EXP 68
19720: PUSH
19721: LD_INT 16
19723: ST_TO_ADDR
// sRocket := false ;
19724: LD_ADDR_EXP 71
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// sSpeed := false ;
19732: LD_ADDR_EXP 70
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// sEngine := false ;
19740: LD_ADDR_EXP 72
19744: PUSH
19745: LD_INT 0
19747: ST_TO_ADDR
// sSpec := false ;
19748: LD_ADDR_EXP 69
19752: PUSH
19753: LD_INT 0
19755: ST_TO_ADDR
// sLevel := false ;
19756: LD_ADDR_EXP 73
19760: PUSH
19761: LD_INT 0
19763: ST_TO_ADDR
// sArmoury := false ;
19764: LD_ADDR_EXP 74
19768: PUSH
19769: LD_INT 0
19771: ST_TO_ADDR
// sRadar := false ;
19772: LD_ADDR_EXP 75
19776: PUSH
19777: LD_INT 0
19779: ST_TO_ADDR
// sBunker := false ;
19780: LD_ADDR_EXP 76
19784: PUSH
19785: LD_INT 0
19787: ST_TO_ADDR
// sHack := false ;
19788: LD_ADDR_EXP 77
19792: PUSH
19793: LD_INT 0
19795: ST_TO_ADDR
// sFire := false ;
19796: LD_ADDR_EXP 78
19800: PUSH
19801: LD_INT 0
19803: ST_TO_ADDR
// sRefresh := false ;
19804: LD_ADDR_EXP 79
19808: PUSH
19809: LD_INT 0
19811: ST_TO_ADDR
// sExp := false ;
19812: LD_ADDR_EXP 80
19816: PUSH
19817: LD_INT 0
19819: ST_TO_ADDR
// sDepot := false ;
19820: LD_ADDR_EXP 81
19824: PUSH
19825: LD_INT 0
19827: ST_TO_ADDR
// sFlag := false ;
19828: LD_ADDR_EXP 82
19832: PUSH
19833: LD_INT 0
19835: ST_TO_ADDR
// sKamikadze := false ;
19836: LD_ADDR_EXP 90
19840: PUSH
19841: LD_INT 0
19843: ST_TO_ADDR
// sTroll := false ;
19844: LD_ADDR_EXP 91
19848: PUSH
19849: LD_INT 0
19851: ST_TO_ADDR
// sSlow := false ;
19852: LD_ADDR_EXP 92
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// sLack := false ;
19860: LD_ADDR_EXP 93
19864: PUSH
19865: LD_INT 0
19867: ST_TO_ADDR
// sTank := false ;
19868: LD_ADDR_EXP 95
19872: PUSH
19873: LD_INT 0
19875: ST_TO_ADDR
// sRemote := false ;
19876: LD_ADDR_EXP 96
19880: PUSH
19881: LD_INT 0
19883: ST_TO_ADDR
// sPowell := false ;
19884: LD_ADDR_EXP 97
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// sTeleport := false ;
19892: LD_ADDR_EXP 100
19896: PUSH
19897: LD_INT 0
19899: ST_TO_ADDR
// sOilTower := false ;
19900: LD_ADDR_EXP 102
19904: PUSH
19905: LD_INT 0
19907: ST_TO_ADDR
// sShovel := false ;
19908: LD_ADDR_EXP 103
19912: PUSH
19913: LD_INT 0
19915: ST_TO_ADDR
// sSheik := false ;
19916: LD_ADDR_EXP 104
19920: PUSH
19921: LD_INT 0
19923: ST_TO_ADDR
// sEarthquake := false ;
19924: LD_ADDR_EXP 106
19928: PUSH
19929: LD_INT 0
19931: ST_TO_ADDR
// sAI := false ;
19932: LD_ADDR_EXP 107
19936: PUSH
19937: LD_INT 0
19939: ST_TO_ADDR
// sCargo := false ;
19940: LD_ADDR_EXP 110
19944: PUSH
19945: LD_INT 0
19947: ST_TO_ADDR
// sDLaser := false ;
19948: LD_ADDR_EXP 111
19952: PUSH
19953: LD_INT 0
19955: ST_TO_ADDR
// sExchange := false ;
19956: LD_ADDR_EXP 112
19960: PUSH
19961: LD_INT 0
19963: ST_TO_ADDR
// sFac := false ;
19964: LD_ADDR_EXP 113
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// sPower := false ;
19972: LD_ADDR_EXP 114
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// sRandom := false ;
19980: LD_ADDR_EXP 115
19984: PUSH
19985: LD_INT 0
19987: ST_TO_ADDR
// sShield := false ;
19988: LD_ADDR_EXP 116
19992: PUSH
19993: LD_INT 0
19995: ST_TO_ADDR
// sTime := false ;
19996: LD_ADDR_EXP 117
20000: PUSH
20001: LD_INT 0
20003: ST_TO_ADDR
// sTools := false ;
20004: LD_ADDR_EXP 118
20008: PUSH
20009: LD_INT 0
20011: ST_TO_ADDR
// sSold := false ;
20012: LD_ADDR_EXP 83
20016: PUSH
20017: LD_INT 0
20019: ST_TO_ADDR
// sDiff := false ;
20020: LD_ADDR_EXP 84
20024: PUSH
20025: LD_INT 0
20027: ST_TO_ADDR
// sFog := false ;
20028: LD_ADDR_EXP 87
20032: PUSH
20033: LD_INT 0
20035: ST_TO_ADDR
// sReset := false ;
20036: LD_ADDR_EXP 88
20040: PUSH
20041: LD_INT 0
20043: ST_TO_ADDR
// sSun := false ;
20044: LD_ADDR_EXP 89
20048: PUSH
20049: LD_INT 0
20051: ST_TO_ADDR
// sTiger := false ;
20052: LD_ADDR_EXP 85
20056: PUSH
20057: LD_INT 0
20059: ST_TO_ADDR
// sBomb := false ;
20060: LD_ADDR_EXP 86
20064: PUSH
20065: LD_INT 0
20067: ST_TO_ADDR
// sWound := false ;
20068: LD_ADDR_EXP 94
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
// sBetray := false ;
20076: LD_ADDR_EXP 98
20080: PUSH
20081: LD_INT 0
20083: ST_TO_ADDR
// sContamin := false ;
20084: LD_ADDR_EXP 99
20088: PUSH
20089: LD_INT 0
20091: ST_TO_ADDR
// sOil := false ;
20092: LD_ADDR_EXP 101
20096: PUSH
20097: LD_INT 0
20099: ST_TO_ADDR
// sStu := false ;
20100: LD_ADDR_EXP 105
20104: PUSH
20105: LD_INT 0
20107: ST_TO_ADDR
// sBazooka := false ;
20108: LD_ADDR_EXP 108
20112: PUSH
20113: LD_INT 0
20115: ST_TO_ADDR
// sMortar := false ;
20116: LD_ADDR_EXP 109
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// sRanger := false ;
20124: LD_ADDR_EXP 119
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// end ;
20132: LD_VAR 0 1
20136: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20137: LD_INT 0
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
20143: PPUSH
// result := [ ] ;
20144: LD_ADDR_VAR 0 1
20148: PUSH
20149: EMPTY
20150: ST_TO_ADDR
// if campaign_id = 1 then
20151: LD_OWVAR 69
20155: PUSH
20156: LD_INT 1
20158: EQUAL
20159: IFFALSE 23097
// begin case mission_number of 1 :
20161: LD_OWVAR 70
20165: PUSH
20166: LD_INT 1
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20238
20174: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20175: LD_ADDR_VAR 0 1
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 4
20185: PUSH
20186: LD_INT 11
20188: PUSH
20189: LD_INT 12
20191: PUSH
20192: LD_INT 15
20194: PUSH
20195: LD_INT 16
20197: PUSH
20198: LD_INT 22
20200: PUSH
20201: LD_INT 23
20203: PUSH
20204: LD_INT 26
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 101
20220: PUSH
20221: LD_INT 102
20223: PUSH
20224: LD_INT 106
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: ST_TO_ADDR
20236: GO 23095
20238: LD_INT 2
20240: DOUBLE
20241: EQUAL
20242: IFTRUE 20246
20244: GO 20318
20246: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20247: LD_ADDR_VAR 0 1
20251: PUSH
20252: LD_INT 2
20254: PUSH
20255: LD_INT 4
20257: PUSH
20258: LD_INT 11
20260: PUSH
20261: LD_INT 12
20263: PUSH
20264: LD_INT 15
20266: PUSH
20267: LD_INT 16
20269: PUSH
20270: LD_INT 22
20272: PUSH
20273: LD_INT 23
20275: PUSH
20276: LD_INT 26
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 101
20292: PUSH
20293: LD_INT 102
20295: PUSH
20296: LD_INT 105
20298: PUSH
20299: LD_INT 106
20301: PUSH
20302: LD_INT 108
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: ST_TO_ADDR
20316: GO 23095
20318: LD_INT 3
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20402
20326: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 4
20337: PUSH
20338: LD_INT 5
20340: PUSH
20341: LD_INT 11
20343: PUSH
20344: LD_INT 12
20346: PUSH
20347: LD_INT 15
20349: PUSH
20350: LD_INT 16
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_INT 26
20358: PUSH
20359: LD_INT 36
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 101
20376: PUSH
20377: LD_INT 102
20379: PUSH
20380: LD_INT 105
20382: PUSH
20383: LD_INT 106
20385: PUSH
20386: LD_INT 108
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: ST_TO_ADDR
20400: GO 23095
20402: LD_INT 4
20404: DOUBLE
20405: EQUAL
20406: IFTRUE 20410
20408: GO 20494
20410: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20411: LD_ADDR_VAR 0 1
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: LD_INT 4
20421: PUSH
20422: LD_INT 5
20424: PUSH
20425: LD_INT 8
20427: PUSH
20428: LD_INT 11
20430: PUSH
20431: LD_INT 12
20433: PUSH
20434: LD_INT 15
20436: PUSH
20437: LD_INT 16
20439: PUSH
20440: LD_INT 22
20442: PUSH
20443: LD_INT 23
20445: PUSH
20446: LD_INT 26
20448: PUSH
20449: LD_INT 36
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 101
20468: PUSH
20469: LD_INT 102
20471: PUSH
20472: LD_INT 105
20474: PUSH
20475: LD_INT 106
20477: PUSH
20478: LD_INT 108
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: ST_TO_ADDR
20492: GO 23095
20494: LD_INT 5
20496: DOUBLE
20497: EQUAL
20498: IFTRUE 20502
20500: GO 20602
20502: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20503: LD_ADDR_VAR 0 1
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: LD_INT 4
20513: PUSH
20514: LD_INT 5
20516: PUSH
20517: LD_INT 6
20519: PUSH
20520: LD_INT 8
20522: PUSH
20523: LD_INT 11
20525: PUSH
20526: LD_INT 12
20528: PUSH
20529: LD_INT 15
20531: PUSH
20532: LD_INT 16
20534: PUSH
20535: LD_INT 22
20537: PUSH
20538: LD_INT 23
20540: PUSH
20541: LD_INT 25
20543: PUSH
20544: LD_INT 26
20546: PUSH
20547: LD_INT 36
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 101
20568: PUSH
20569: LD_INT 102
20571: PUSH
20572: LD_INT 105
20574: PUSH
20575: LD_INT 106
20577: PUSH
20578: LD_INT 108
20580: PUSH
20581: LD_INT 109
20583: PUSH
20584: LD_INT 112
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: ST_TO_ADDR
20600: GO 23095
20602: LD_INT 6
20604: DOUBLE
20605: EQUAL
20606: IFTRUE 20610
20608: GO 20730
20610: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20611: LD_ADDR_VAR 0 1
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 4
20621: PUSH
20622: LD_INT 5
20624: PUSH
20625: LD_INT 6
20627: PUSH
20628: LD_INT 8
20630: PUSH
20631: LD_INT 11
20633: PUSH
20634: LD_INT 12
20636: PUSH
20637: LD_INT 15
20639: PUSH
20640: LD_INT 16
20642: PUSH
20643: LD_INT 20
20645: PUSH
20646: LD_INT 21
20648: PUSH
20649: LD_INT 22
20651: PUSH
20652: LD_INT 23
20654: PUSH
20655: LD_INT 25
20657: PUSH
20658: LD_INT 26
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 31
20666: PUSH
20667: LD_INT 32
20669: PUSH
20670: LD_INT 36
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 101
20696: PUSH
20697: LD_INT 102
20699: PUSH
20700: LD_INT 105
20702: PUSH
20703: LD_INT 106
20705: PUSH
20706: LD_INT 108
20708: PUSH
20709: LD_INT 109
20711: PUSH
20712: LD_INT 112
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: ST_TO_ADDR
20728: GO 23095
20730: LD_INT 7
20732: DOUBLE
20733: EQUAL
20734: IFTRUE 20738
20736: GO 20838
20738: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20739: LD_ADDR_VAR 0 1
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: LD_INT 4
20749: PUSH
20750: LD_INT 5
20752: PUSH
20753: LD_INT 7
20755: PUSH
20756: LD_INT 11
20758: PUSH
20759: LD_INT 12
20761: PUSH
20762: LD_INT 15
20764: PUSH
20765: LD_INT 16
20767: PUSH
20768: LD_INT 20
20770: PUSH
20771: LD_INT 21
20773: PUSH
20774: LD_INT 22
20776: PUSH
20777: LD_INT 23
20779: PUSH
20780: LD_INT 25
20782: PUSH
20783: LD_INT 26
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 101
20804: PUSH
20805: LD_INT 102
20807: PUSH
20808: LD_INT 103
20810: PUSH
20811: LD_INT 105
20813: PUSH
20814: LD_INT 106
20816: PUSH
20817: LD_INT 108
20819: PUSH
20820: LD_INT 112
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: ST_TO_ADDR
20836: GO 23095
20838: LD_INT 8
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20974
20846: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20847: LD_ADDR_VAR 0 1
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 4
20857: PUSH
20858: LD_INT 5
20860: PUSH
20861: LD_INT 6
20863: PUSH
20864: LD_INT 7
20866: PUSH
20867: LD_INT 8
20869: PUSH
20870: LD_INT 11
20872: PUSH
20873: LD_INT 12
20875: PUSH
20876: LD_INT 15
20878: PUSH
20879: LD_INT 16
20881: PUSH
20882: LD_INT 20
20884: PUSH
20885: LD_INT 21
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 23
20893: PUSH
20894: LD_INT 25
20896: PUSH
20897: LD_INT 26
20899: PUSH
20900: LD_INT 30
20902: PUSH
20903: LD_INT 31
20905: PUSH
20906: LD_INT 32
20908: PUSH
20909: LD_INT 36
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 101
20936: PUSH
20937: LD_INT 102
20939: PUSH
20940: LD_INT 103
20942: PUSH
20943: LD_INT 105
20945: PUSH
20946: LD_INT 106
20948: PUSH
20949: LD_INT 108
20951: PUSH
20952: LD_INT 109
20954: PUSH
20955: LD_INT 112
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: ST_TO_ADDR
20972: GO 23095
20974: LD_INT 9
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 21118
20982: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20983: LD_ADDR_VAR 0 1
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: LD_INT 4
20993: PUSH
20994: LD_INT 5
20996: PUSH
20997: LD_INT 6
20999: PUSH
21000: LD_INT 7
21002: PUSH
21003: LD_INT 8
21005: PUSH
21006: LD_INT 11
21008: PUSH
21009: LD_INT 12
21011: PUSH
21012: LD_INT 15
21014: PUSH
21015: LD_INT 16
21017: PUSH
21018: LD_INT 20
21020: PUSH
21021: LD_INT 21
21023: PUSH
21024: LD_INT 22
21026: PUSH
21027: LD_INT 23
21029: PUSH
21030: LD_INT 25
21032: PUSH
21033: LD_INT 26
21035: PUSH
21036: LD_INT 28
21038: PUSH
21039: LD_INT 30
21041: PUSH
21042: LD_INT 31
21044: PUSH
21045: LD_INT 32
21047: PUSH
21048: LD_INT 36
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 101
21076: PUSH
21077: LD_INT 102
21079: PUSH
21080: LD_INT 103
21082: PUSH
21083: LD_INT 105
21085: PUSH
21086: LD_INT 106
21088: PUSH
21089: LD_INT 108
21091: PUSH
21092: LD_INT 109
21094: PUSH
21095: LD_INT 112
21097: PUSH
21098: LD_INT 114
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: ST_TO_ADDR
21116: GO 23095
21118: LD_INT 10
21120: DOUBLE
21121: EQUAL
21122: IFTRUE 21126
21124: GO 21310
21126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21127: LD_ADDR_VAR 0 1
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: LD_INT 4
21137: PUSH
21138: LD_INT 5
21140: PUSH
21141: LD_INT 6
21143: PUSH
21144: LD_INT 7
21146: PUSH
21147: LD_INT 8
21149: PUSH
21150: LD_INT 9
21152: PUSH
21153: LD_INT 10
21155: PUSH
21156: LD_INT 11
21158: PUSH
21159: LD_INT 12
21161: PUSH
21162: LD_INT 13
21164: PUSH
21165: LD_INT 14
21167: PUSH
21168: LD_INT 15
21170: PUSH
21171: LD_INT 16
21173: PUSH
21174: LD_INT 17
21176: PUSH
21177: LD_INT 18
21179: PUSH
21180: LD_INT 19
21182: PUSH
21183: LD_INT 20
21185: PUSH
21186: LD_INT 21
21188: PUSH
21189: LD_INT 22
21191: PUSH
21192: LD_INT 23
21194: PUSH
21195: LD_INT 24
21197: PUSH
21198: LD_INT 25
21200: PUSH
21201: LD_INT 26
21203: PUSH
21204: LD_INT 28
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 31
21212: PUSH
21213: LD_INT 32
21215: PUSH
21216: LD_INT 36
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 101
21252: PUSH
21253: LD_INT 102
21255: PUSH
21256: LD_INT 103
21258: PUSH
21259: LD_INT 104
21261: PUSH
21262: LD_INT 105
21264: PUSH
21265: LD_INT 106
21267: PUSH
21268: LD_INT 107
21270: PUSH
21271: LD_INT 108
21273: PUSH
21274: LD_INT 109
21276: PUSH
21277: LD_INT 110
21279: PUSH
21280: LD_INT 111
21282: PUSH
21283: LD_INT 112
21285: PUSH
21286: LD_INT 114
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: ST_TO_ADDR
21308: GO 23095
21310: LD_INT 11
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21510
21318: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21319: LD_ADDR_VAR 0 1
21323: PUSH
21324: LD_INT 2
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: LD_INT 4
21332: PUSH
21333: LD_INT 5
21335: PUSH
21336: LD_INT 6
21338: PUSH
21339: LD_INT 7
21341: PUSH
21342: LD_INT 8
21344: PUSH
21345: LD_INT 9
21347: PUSH
21348: LD_INT 10
21350: PUSH
21351: LD_INT 11
21353: PUSH
21354: LD_INT 12
21356: PUSH
21357: LD_INT 13
21359: PUSH
21360: LD_INT 14
21362: PUSH
21363: LD_INT 15
21365: PUSH
21366: LD_INT 16
21368: PUSH
21369: LD_INT 17
21371: PUSH
21372: LD_INT 18
21374: PUSH
21375: LD_INT 19
21377: PUSH
21378: LD_INT 20
21380: PUSH
21381: LD_INT 21
21383: PUSH
21384: LD_INT 22
21386: PUSH
21387: LD_INT 23
21389: PUSH
21390: LD_INT 24
21392: PUSH
21393: LD_INT 25
21395: PUSH
21396: LD_INT 26
21398: PUSH
21399: LD_INT 28
21401: PUSH
21402: LD_INT 30
21404: PUSH
21405: LD_INT 31
21407: PUSH
21408: LD_INT 32
21410: PUSH
21411: LD_INT 34
21413: PUSH
21414: LD_INT 36
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 101
21452: PUSH
21453: LD_INT 102
21455: PUSH
21456: LD_INT 103
21458: PUSH
21459: LD_INT 104
21461: PUSH
21462: LD_INT 105
21464: PUSH
21465: LD_INT 106
21467: PUSH
21468: LD_INT 107
21470: PUSH
21471: LD_INT 108
21473: PUSH
21474: LD_INT 109
21476: PUSH
21477: LD_INT 110
21479: PUSH
21480: LD_INT 111
21482: PUSH
21483: LD_INT 112
21485: PUSH
21486: LD_INT 114
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: ST_TO_ADDR
21508: GO 23095
21510: LD_INT 12
21512: DOUBLE
21513: EQUAL
21514: IFTRUE 21518
21516: GO 21726
21518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: LD_INT 3
21532: PUSH
21533: LD_INT 4
21535: PUSH
21536: LD_INT 5
21538: PUSH
21539: LD_INT 6
21541: PUSH
21542: LD_INT 7
21544: PUSH
21545: LD_INT 8
21547: PUSH
21548: LD_INT 9
21550: PUSH
21551: LD_INT 10
21553: PUSH
21554: LD_INT 11
21556: PUSH
21557: LD_INT 12
21559: PUSH
21560: LD_INT 13
21562: PUSH
21563: LD_INT 14
21565: PUSH
21566: LD_INT 15
21568: PUSH
21569: LD_INT 16
21571: PUSH
21572: LD_INT 17
21574: PUSH
21575: LD_INT 18
21577: PUSH
21578: LD_INT 19
21580: PUSH
21581: LD_INT 20
21583: PUSH
21584: LD_INT 21
21586: PUSH
21587: LD_INT 22
21589: PUSH
21590: LD_INT 23
21592: PUSH
21593: LD_INT 24
21595: PUSH
21596: LD_INT 25
21598: PUSH
21599: LD_INT 26
21601: PUSH
21602: LD_INT 27
21604: PUSH
21605: LD_INT 28
21607: PUSH
21608: LD_INT 30
21610: PUSH
21611: LD_INT 31
21613: PUSH
21614: LD_INT 32
21616: PUSH
21617: LD_INT 33
21619: PUSH
21620: LD_INT 34
21622: PUSH
21623: LD_INT 36
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 101
21664: PUSH
21665: LD_INT 102
21667: PUSH
21668: LD_INT 103
21670: PUSH
21671: LD_INT 104
21673: PUSH
21674: LD_INT 105
21676: PUSH
21677: LD_INT 106
21679: PUSH
21680: LD_INT 107
21682: PUSH
21683: LD_INT 108
21685: PUSH
21686: LD_INT 109
21688: PUSH
21689: LD_INT 110
21691: PUSH
21692: LD_INT 111
21694: PUSH
21695: LD_INT 112
21697: PUSH
21698: LD_INT 113
21700: PUSH
21701: LD_INT 114
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: ST_TO_ADDR
21724: GO 23095
21726: LD_INT 13
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21930
21734: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21735: LD_ADDR_VAR 0 1
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: LD_INT 3
21748: PUSH
21749: LD_INT 4
21751: PUSH
21752: LD_INT 5
21754: PUSH
21755: LD_INT 8
21757: PUSH
21758: LD_INT 9
21760: PUSH
21761: LD_INT 10
21763: PUSH
21764: LD_INT 11
21766: PUSH
21767: LD_INT 12
21769: PUSH
21770: LD_INT 14
21772: PUSH
21773: LD_INT 15
21775: PUSH
21776: LD_INT 16
21778: PUSH
21779: LD_INT 17
21781: PUSH
21782: LD_INT 18
21784: PUSH
21785: LD_INT 19
21787: PUSH
21788: LD_INT 20
21790: PUSH
21791: LD_INT 21
21793: PUSH
21794: LD_INT 22
21796: PUSH
21797: LD_INT 23
21799: PUSH
21800: LD_INT 24
21802: PUSH
21803: LD_INT 25
21805: PUSH
21806: LD_INT 26
21808: PUSH
21809: LD_INT 27
21811: PUSH
21812: LD_INT 28
21814: PUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 31
21820: PUSH
21821: LD_INT 32
21823: PUSH
21824: LD_INT 33
21826: PUSH
21827: LD_INT 34
21829: PUSH
21830: LD_INT 36
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 101
21868: PUSH
21869: LD_INT 102
21871: PUSH
21872: LD_INT 103
21874: PUSH
21875: LD_INT 104
21877: PUSH
21878: LD_INT 105
21880: PUSH
21881: LD_INT 106
21883: PUSH
21884: LD_INT 107
21886: PUSH
21887: LD_INT 108
21889: PUSH
21890: LD_INT 109
21892: PUSH
21893: LD_INT 110
21895: PUSH
21896: LD_INT 111
21898: PUSH
21899: LD_INT 112
21901: PUSH
21902: LD_INT 113
21904: PUSH
21905: LD_INT 114
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: ST_TO_ADDR
21928: GO 23095
21930: LD_INT 14
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 22150
21938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21939: LD_ADDR_VAR 0 1
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 3
21952: PUSH
21953: LD_INT 4
21955: PUSH
21956: LD_INT 5
21958: PUSH
21959: LD_INT 6
21961: PUSH
21962: LD_INT 7
21964: PUSH
21965: LD_INT 8
21967: PUSH
21968: LD_INT 9
21970: PUSH
21971: LD_INT 10
21973: PUSH
21974: LD_INT 11
21976: PUSH
21977: LD_INT 12
21979: PUSH
21980: LD_INT 13
21982: PUSH
21983: LD_INT 14
21985: PUSH
21986: LD_INT 15
21988: PUSH
21989: LD_INT 16
21991: PUSH
21992: LD_INT 17
21994: PUSH
21995: LD_INT 18
21997: PUSH
21998: LD_INT 19
22000: PUSH
22001: LD_INT 20
22003: PUSH
22004: LD_INT 21
22006: PUSH
22007: LD_INT 22
22009: PUSH
22010: LD_INT 23
22012: PUSH
22013: LD_INT 24
22015: PUSH
22016: LD_INT 25
22018: PUSH
22019: LD_INT 26
22021: PUSH
22022: LD_INT 27
22024: PUSH
22025: LD_INT 28
22027: PUSH
22028: LD_INT 29
22030: PUSH
22031: LD_INT 30
22033: PUSH
22034: LD_INT 31
22036: PUSH
22037: LD_INT 32
22039: PUSH
22040: LD_INT 33
22042: PUSH
22043: LD_INT 34
22045: PUSH
22046: LD_INT 36
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 101
22088: PUSH
22089: LD_INT 102
22091: PUSH
22092: LD_INT 103
22094: PUSH
22095: LD_INT 104
22097: PUSH
22098: LD_INT 105
22100: PUSH
22101: LD_INT 106
22103: PUSH
22104: LD_INT 107
22106: PUSH
22107: LD_INT 108
22109: PUSH
22110: LD_INT 109
22112: PUSH
22113: LD_INT 110
22115: PUSH
22116: LD_INT 111
22118: PUSH
22119: LD_INT 112
22121: PUSH
22122: LD_INT 113
22124: PUSH
22125: LD_INT 114
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: ST_TO_ADDR
22148: GO 23095
22150: LD_INT 15
22152: DOUBLE
22153: EQUAL
22154: IFTRUE 22158
22156: GO 22370
22158: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22159: LD_ADDR_VAR 0 1
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: LD_INT 3
22172: PUSH
22173: LD_INT 4
22175: PUSH
22176: LD_INT 5
22178: PUSH
22179: LD_INT 6
22181: PUSH
22182: LD_INT 7
22184: PUSH
22185: LD_INT 8
22187: PUSH
22188: LD_INT 9
22190: PUSH
22191: LD_INT 10
22193: PUSH
22194: LD_INT 11
22196: PUSH
22197: LD_INT 12
22199: PUSH
22200: LD_INT 13
22202: PUSH
22203: LD_INT 14
22205: PUSH
22206: LD_INT 15
22208: PUSH
22209: LD_INT 16
22211: PUSH
22212: LD_INT 17
22214: PUSH
22215: LD_INT 18
22217: PUSH
22218: LD_INT 19
22220: PUSH
22221: LD_INT 20
22223: PUSH
22224: LD_INT 21
22226: PUSH
22227: LD_INT 22
22229: PUSH
22230: LD_INT 23
22232: PUSH
22233: LD_INT 24
22235: PUSH
22236: LD_INT 25
22238: PUSH
22239: LD_INT 26
22241: PUSH
22242: LD_INT 27
22244: PUSH
22245: LD_INT 28
22247: PUSH
22248: LD_INT 29
22250: PUSH
22251: LD_INT 30
22253: PUSH
22254: LD_INT 31
22256: PUSH
22257: LD_INT 32
22259: PUSH
22260: LD_INT 33
22262: PUSH
22263: LD_INT 34
22265: PUSH
22266: LD_INT 36
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 101
22308: PUSH
22309: LD_INT 102
22311: PUSH
22312: LD_INT 103
22314: PUSH
22315: LD_INT 104
22317: PUSH
22318: LD_INT 105
22320: PUSH
22321: LD_INT 106
22323: PUSH
22324: LD_INT 107
22326: PUSH
22327: LD_INT 108
22329: PUSH
22330: LD_INT 109
22332: PUSH
22333: LD_INT 110
22335: PUSH
22336: LD_INT 111
22338: PUSH
22339: LD_INT 112
22341: PUSH
22342: LD_INT 113
22344: PUSH
22345: LD_INT 114
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: ST_TO_ADDR
22368: GO 23095
22370: LD_INT 16
22372: DOUBLE
22373: EQUAL
22374: IFTRUE 22378
22376: GO 22502
22378: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22379: LD_ADDR_VAR 0 1
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: LD_INT 4
22389: PUSH
22390: LD_INT 5
22392: PUSH
22393: LD_INT 7
22395: PUSH
22396: LD_INT 11
22398: PUSH
22399: LD_INT 12
22401: PUSH
22402: LD_INT 15
22404: PUSH
22405: LD_INT 16
22407: PUSH
22408: LD_INT 20
22410: PUSH
22411: LD_INT 21
22413: PUSH
22414: LD_INT 22
22416: PUSH
22417: LD_INT 23
22419: PUSH
22420: LD_INT 25
22422: PUSH
22423: LD_INT 26
22425: PUSH
22426: LD_INT 30
22428: PUSH
22429: LD_INT 31
22431: PUSH
22432: LD_INT 32
22434: PUSH
22435: LD_INT 33
22437: PUSH
22438: LD_INT 34
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 101
22464: PUSH
22465: LD_INT 102
22467: PUSH
22468: LD_INT 103
22470: PUSH
22471: LD_INT 106
22473: PUSH
22474: LD_INT 108
22476: PUSH
22477: LD_INT 112
22479: PUSH
22480: LD_INT 113
22482: PUSH
22483: LD_INT 114
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: ST_TO_ADDR
22500: GO 23095
22502: LD_INT 17
22504: DOUBLE
22505: EQUAL
22506: IFTRUE 22510
22508: GO 22722
22510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22511: LD_ADDR_VAR 0 1
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: LD_INT 4
22527: PUSH
22528: LD_INT 5
22530: PUSH
22531: LD_INT 6
22533: PUSH
22534: LD_INT 7
22536: PUSH
22537: LD_INT 8
22539: PUSH
22540: LD_INT 9
22542: PUSH
22543: LD_INT 10
22545: PUSH
22546: LD_INT 11
22548: PUSH
22549: LD_INT 12
22551: PUSH
22552: LD_INT 13
22554: PUSH
22555: LD_INT 14
22557: PUSH
22558: LD_INT 15
22560: PUSH
22561: LD_INT 16
22563: PUSH
22564: LD_INT 17
22566: PUSH
22567: LD_INT 18
22569: PUSH
22570: LD_INT 19
22572: PUSH
22573: LD_INT 20
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 22
22581: PUSH
22582: LD_INT 23
22584: PUSH
22585: LD_INT 24
22587: PUSH
22588: LD_INT 25
22590: PUSH
22591: LD_INT 26
22593: PUSH
22594: LD_INT 27
22596: PUSH
22597: LD_INT 28
22599: PUSH
22600: LD_INT 29
22602: PUSH
22603: LD_INT 30
22605: PUSH
22606: LD_INT 31
22608: PUSH
22609: LD_INT 32
22611: PUSH
22612: LD_INT 33
22614: PUSH
22615: LD_INT 34
22617: PUSH
22618: LD_INT 36
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 101
22660: PUSH
22661: LD_INT 102
22663: PUSH
22664: LD_INT 103
22666: PUSH
22667: LD_INT 104
22669: PUSH
22670: LD_INT 105
22672: PUSH
22673: LD_INT 106
22675: PUSH
22676: LD_INT 107
22678: PUSH
22679: LD_INT 108
22681: PUSH
22682: LD_INT 109
22684: PUSH
22685: LD_INT 110
22687: PUSH
22688: LD_INT 111
22690: PUSH
22691: LD_INT 112
22693: PUSH
22694: LD_INT 113
22696: PUSH
22697: LD_INT 114
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: ST_TO_ADDR
22720: GO 23095
22722: LD_INT 18
22724: DOUBLE
22725: EQUAL
22726: IFTRUE 22730
22728: GO 22866
22730: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22731: LD_ADDR_VAR 0 1
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: LD_INT 4
22741: PUSH
22742: LD_INT 5
22744: PUSH
22745: LD_INT 7
22747: PUSH
22748: LD_INT 11
22750: PUSH
22751: LD_INT 12
22753: PUSH
22754: LD_INT 15
22756: PUSH
22757: LD_INT 16
22759: PUSH
22760: LD_INT 20
22762: PUSH
22763: LD_INT 21
22765: PUSH
22766: LD_INT 22
22768: PUSH
22769: LD_INT 23
22771: PUSH
22772: LD_INT 25
22774: PUSH
22775: LD_INT 26
22777: PUSH
22778: LD_INT 30
22780: PUSH
22781: LD_INT 31
22783: PUSH
22784: LD_INT 32
22786: PUSH
22787: LD_INT 33
22789: PUSH
22790: LD_INT 34
22792: PUSH
22793: LD_INT 35
22795: PUSH
22796: LD_INT 36
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 101
22824: PUSH
22825: LD_INT 102
22827: PUSH
22828: LD_INT 103
22830: PUSH
22831: LD_INT 106
22833: PUSH
22834: LD_INT 108
22836: PUSH
22837: LD_INT 112
22839: PUSH
22840: LD_INT 113
22842: PUSH
22843: LD_INT 114
22845: PUSH
22846: LD_INT 115
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: ST_TO_ADDR
22864: GO 23095
22866: LD_INT 19
22868: DOUBLE
22869: EQUAL
22870: IFTRUE 22874
22872: GO 23094
22874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22875: LD_ADDR_VAR 0 1
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: LD_INT 4
22891: PUSH
22892: LD_INT 5
22894: PUSH
22895: LD_INT 6
22897: PUSH
22898: LD_INT 7
22900: PUSH
22901: LD_INT 8
22903: PUSH
22904: LD_INT 9
22906: PUSH
22907: LD_INT 10
22909: PUSH
22910: LD_INT 11
22912: PUSH
22913: LD_INT 12
22915: PUSH
22916: LD_INT 13
22918: PUSH
22919: LD_INT 14
22921: PUSH
22922: LD_INT 15
22924: PUSH
22925: LD_INT 16
22927: PUSH
22928: LD_INT 17
22930: PUSH
22931: LD_INT 18
22933: PUSH
22934: LD_INT 19
22936: PUSH
22937: LD_INT 20
22939: PUSH
22940: LD_INT 21
22942: PUSH
22943: LD_INT 22
22945: PUSH
22946: LD_INT 23
22948: PUSH
22949: LD_INT 24
22951: PUSH
22952: LD_INT 25
22954: PUSH
22955: LD_INT 26
22957: PUSH
22958: LD_INT 27
22960: PUSH
22961: LD_INT 28
22963: PUSH
22964: LD_INT 29
22966: PUSH
22967: LD_INT 30
22969: PUSH
22970: LD_INT 31
22972: PUSH
22973: LD_INT 32
22975: PUSH
22976: LD_INT 33
22978: PUSH
22979: LD_INT 34
22981: PUSH
22982: LD_INT 35
22984: PUSH
22985: LD_INT 36
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 101
23028: PUSH
23029: LD_INT 102
23031: PUSH
23032: LD_INT 103
23034: PUSH
23035: LD_INT 104
23037: PUSH
23038: LD_INT 105
23040: PUSH
23041: LD_INT 106
23043: PUSH
23044: LD_INT 107
23046: PUSH
23047: LD_INT 108
23049: PUSH
23050: LD_INT 109
23052: PUSH
23053: LD_INT 110
23055: PUSH
23056: LD_INT 111
23058: PUSH
23059: LD_INT 112
23061: PUSH
23062: LD_INT 113
23064: PUSH
23065: LD_INT 114
23067: PUSH
23068: LD_INT 115
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: ST_TO_ADDR
23092: GO 23095
23094: POP
// end else
23095: GO 23314
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23097: LD_ADDR_VAR 0 1
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: LD_INT 4
23113: PUSH
23114: LD_INT 5
23116: PUSH
23117: LD_INT 6
23119: PUSH
23120: LD_INT 7
23122: PUSH
23123: LD_INT 8
23125: PUSH
23126: LD_INT 9
23128: PUSH
23129: LD_INT 10
23131: PUSH
23132: LD_INT 11
23134: PUSH
23135: LD_INT 12
23137: PUSH
23138: LD_INT 13
23140: PUSH
23141: LD_INT 14
23143: PUSH
23144: LD_INT 15
23146: PUSH
23147: LD_INT 16
23149: PUSH
23150: LD_INT 17
23152: PUSH
23153: LD_INT 18
23155: PUSH
23156: LD_INT 19
23158: PUSH
23159: LD_INT 20
23161: PUSH
23162: LD_INT 21
23164: PUSH
23165: LD_INT 22
23167: PUSH
23168: LD_INT 23
23170: PUSH
23171: LD_INT 24
23173: PUSH
23174: LD_INT 25
23176: PUSH
23177: LD_INT 26
23179: PUSH
23180: LD_INT 27
23182: PUSH
23183: LD_INT 28
23185: PUSH
23186: LD_INT 29
23188: PUSH
23189: LD_INT 30
23191: PUSH
23192: LD_INT 31
23194: PUSH
23195: LD_INT 32
23197: PUSH
23198: LD_INT 33
23200: PUSH
23201: LD_INT 34
23203: PUSH
23204: LD_INT 35
23206: PUSH
23207: LD_INT 36
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 101
23250: PUSH
23251: LD_INT 102
23253: PUSH
23254: LD_INT 103
23256: PUSH
23257: LD_INT 104
23259: PUSH
23260: LD_INT 105
23262: PUSH
23263: LD_INT 106
23265: PUSH
23266: LD_INT 107
23268: PUSH
23269: LD_INT 108
23271: PUSH
23272: LD_INT 109
23274: PUSH
23275: LD_INT 110
23277: PUSH
23278: LD_INT 111
23280: PUSH
23281: LD_INT 112
23283: PUSH
23284: LD_INT 113
23286: PUSH
23287: LD_INT 114
23289: PUSH
23290: LD_INT 115
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: ST_TO_ADDR
// if result then
23314: LD_VAR 0 1
23318: IFFALSE 23607
// begin normal :=  ;
23320: LD_ADDR_VAR 0 3
23324: PUSH
23325: LD_STRING 
23327: ST_TO_ADDR
// hardcore :=  ;
23328: LD_ADDR_VAR 0 4
23332: PUSH
23333: LD_STRING 
23335: ST_TO_ADDR
// for i = 1 to normalCounter do
23336: LD_ADDR_VAR 0 5
23340: PUSH
23341: DOUBLE
23342: LD_INT 1
23344: DEC
23345: ST_TO_ADDR
23346: LD_EXP 67
23350: PUSH
23351: FOR_TO
23352: IFFALSE 23453
// begin tmp := 0 ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_STRING 0
23361: ST_TO_ADDR
// if result [ 1 ] then
23362: LD_VAR 0 1
23366: PUSH
23367: LD_INT 1
23369: ARRAY
23370: IFFALSE 23435
// if result [ 1 ] [ 1 ] = i then
23372: LD_VAR 0 1
23376: PUSH
23377: LD_INT 1
23379: ARRAY
23380: PUSH
23381: LD_INT 1
23383: ARRAY
23384: PUSH
23385: LD_VAR 0 5
23389: EQUAL
23390: IFFALSE 23435
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23392: LD_ADDR_VAR 0 1
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: LD_INT 1
23404: PPUSH
23405: LD_VAR 0 1
23409: PUSH
23410: LD_INT 1
23412: ARRAY
23413: PPUSH
23414: LD_INT 1
23416: PPUSH
23417: CALL_OW 3
23421: PPUSH
23422: CALL_OW 1
23426: ST_TO_ADDR
// tmp := 1 ;
23427: LD_ADDR_VAR 0 2
23431: PUSH
23432: LD_STRING 1
23434: ST_TO_ADDR
// end ; normal := normal & tmp ;
23435: LD_ADDR_VAR 0 3
23439: PUSH
23440: LD_VAR 0 3
23444: PUSH
23445: LD_VAR 0 2
23449: STR
23450: ST_TO_ADDR
// end ;
23451: GO 23351
23453: POP
23454: POP
// for i = 1 to hardcoreCounter do
23455: LD_ADDR_VAR 0 5
23459: PUSH
23460: DOUBLE
23461: LD_INT 1
23463: DEC
23464: ST_TO_ADDR
23465: LD_EXP 68
23469: PUSH
23470: FOR_TO
23471: IFFALSE 23576
// begin tmp := 0 ;
23473: LD_ADDR_VAR 0 2
23477: PUSH
23478: LD_STRING 0
23480: ST_TO_ADDR
// if result [ 2 ] then
23481: LD_VAR 0 1
23485: PUSH
23486: LD_INT 2
23488: ARRAY
23489: IFFALSE 23558
// if result [ 2 ] [ 1 ] = 100 + i then
23491: LD_VAR 0 1
23495: PUSH
23496: LD_INT 2
23498: ARRAY
23499: PUSH
23500: LD_INT 1
23502: ARRAY
23503: PUSH
23504: LD_INT 100
23506: PUSH
23507: LD_VAR 0 5
23511: PLUS
23512: EQUAL
23513: IFFALSE 23558
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23515: LD_ADDR_VAR 0 1
23519: PUSH
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_INT 2
23527: PPUSH
23528: LD_VAR 0 1
23532: PUSH
23533: LD_INT 2
23535: ARRAY
23536: PPUSH
23537: LD_INT 1
23539: PPUSH
23540: CALL_OW 3
23544: PPUSH
23545: CALL_OW 1
23549: ST_TO_ADDR
// tmp := 1 ;
23550: LD_ADDR_VAR 0 2
23554: PUSH
23555: LD_STRING 1
23557: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23558: LD_ADDR_VAR 0 4
23562: PUSH
23563: LD_VAR 0 4
23567: PUSH
23568: LD_VAR 0 2
23572: STR
23573: ST_TO_ADDR
// end ;
23574: GO 23470
23576: POP
23577: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23578: LD_STRING getStreamItemsFromMission("
23580: PUSH
23581: LD_VAR 0 3
23585: STR
23586: PUSH
23587: LD_STRING ","
23589: STR
23590: PUSH
23591: LD_VAR 0 4
23595: STR
23596: PUSH
23597: LD_STRING ")
23599: STR
23600: PPUSH
23601: CALL_OW 559
// end else
23605: GO 23614
// ToLua ( getStreamItemsFromMission("","") ) ;
23607: LD_STRING getStreamItemsFromMission("","")
23609: PPUSH
23610: CALL_OW 559
// end ;
23614: LD_VAR 0 1
23618: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23619: LD_EXP 66
23623: PUSH
23624: LD_EXP 71
23628: AND
23629: IFFALSE 23753
23631: GO 23633
23633: DISABLE
23634: LD_INT 0
23636: PPUSH
23637: PPUSH
// begin enable ;
23638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23639: LD_ADDR_VAR 0 2
23643: PUSH
23644: LD_INT 22
23646: PUSH
23647: LD_OWVAR 2
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 34
23661: PUSH
23662: LD_INT 7
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 34
23671: PUSH
23672: LD_INT 45
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 34
23681: PUSH
23682: LD_INT 28
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 34
23691: PUSH
23692: LD_INT 47
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PPUSH
23710: CALL_OW 69
23714: ST_TO_ADDR
// if not tmp then
23715: LD_VAR 0 2
23719: NOT
23720: IFFALSE 23724
// exit ;
23722: GO 23753
// for i in tmp do
23724: LD_ADDR_VAR 0 1
23728: PUSH
23729: LD_VAR 0 2
23733: PUSH
23734: FOR_IN
23735: IFFALSE 23751
// begin SetLives ( i , 0 ) ;
23737: LD_VAR 0 1
23741: PPUSH
23742: LD_INT 0
23744: PPUSH
23745: CALL_OW 234
// end ;
23749: GO 23734
23751: POP
23752: POP
// end ;
23753: PPOPN 2
23755: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23756: LD_EXP 66
23760: PUSH
23761: LD_EXP 72
23765: AND
23766: IFFALSE 23850
23768: GO 23770
23770: DISABLE
23771: LD_INT 0
23773: PPUSH
23774: PPUSH
// begin enable ;
23775: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23776: LD_ADDR_VAR 0 2
23780: PUSH
23781: LD_INT 22
23783: PUSH
23784: LD_OWVAR 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 32
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PPUSH
23807: CALL_OW 69
23811: ST_TO_ADDR
// if not tmp then
23812: LD_VAR 0 2
23816: NOT
23817: IFFALSE 23821
// exit ;
23819: GO 23850
// for i in tmp do
23821: LD_ADDR_VAR 0 1
23825: PUSH
23826: LD_VAR 0 2
23830: PUSH
23831: FOR_IN
23832: IFFALSE 23848
// begin SetLives ( i , 0 ) ;
23834: LD_VAR 0 1
23838: PPUSH
23839: LD_INT 0
23841: PPUSH
23842: CALL_OW 234
// end ;
23846: GO 23831
23848: POP
23849: POP
// end ;
23850: PPOPN 2
23852: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23853: LD_EXP 66
23857: PUSH
23858: LD_EXP 69
23862: AND
23863: IFFALSE 23956
23865: GO 23867
23867: DISABLE
23868: LD_INT 0
23870: PPUSH
// begin enable ;
23871: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23872: LD_ADDR_VAR 0 1
23876: PUSH
23877: LD_INT 22
23879: PUSH
23880: LD_OWVAR 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: LD_INT 25
23894: PUSH
23895: LD_INT 5
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 25
23904: PUSH
23905: LD_INT 9
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 25
23914: PUSH
23915: LD_INT 8
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23954
// begin SetClass ( i , 1 ) ;
23940: LD_VAR 0 1
23944: PPUSH
23945: LD_INT 1
23947: PPUSH
23948: CALL_OW 336
// end ;
23952: GO 23937
23954: POP
23955: POP
// end ;
23956: PPOPN 1
23958: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23959: LD_EXP 66
23963: PUSH
23964: LD_EXP 70
23968: AND
23969: PUSH
23970: LD_OWVAR 65
23974: PUSH
23975: LD_INT 7
23977: LESS
23978: AND
23979: IFFALSE 23993
23981: GO 23983
23983: DISABLE
// begin enable ;
23984: ENABLE
// game_speed := 7 ;
23985: LD_ADDR_OWVAR 65
23989: PUSH
23990: LD_INT 7
23992: ST_TO_ADDR
// end ;
23993: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23994: LD_EXP 66
23998: PUSH
23999: LD_EXP 73
24003: AND
24004: IFFALSE 24206
24006: GO 24008
24008: DISABLE
24009: LD_INT 0
24011: PPUSH
24012: PPUSH
24013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24014: LD_ADDR_VAR 0 3
24018: PUSH
24019: LD_INT 81
24021: PUSH
24022: LD_OWVAR 2
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 21
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PPUSH
24045: CALL_OW 69
24049: ST_TO_ADDR
// if not tmp then
24050: LD_VAR 0 3
24054: NOT
24055: IFFALSE 24059
// exit ;
24057: GO 24206
// if tmp > 5 then
24059: LD_VAR 0 3
24063: PUSH
24064: LD_INT 5
24066: GREATER
24067: IFFALSE 24079
// k := 5 else
24069: LD_ADDR_VAR 0 2
24073: PUSH
24074: LD_INT 5
24076: ST_TO_ADDR
24077: GO 24089
// k := tmp ;
24079: LD_ADDR_VAR 0 2
24083: PUSH
24084: LD_VAR 0 3
24088: ST_TO_ADDR
// for i := 1 to k do
24089: LD_ADDR_VAR 0 1
24093: PUSH
24094: DOUBLE
24095: LD_INT 1
24097: DEC
24098: ST_TO_ADDR
24099: LD_VAR 0 2
24103: PUSH
24104: FOR_TO
24105: IFFALSE 24204
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24107: LD_VAR 0 3
24111: PUSH
24112: LD_VAR 0 1
24116: ARRAY
24117: PPUSH
24118: LD_VAR 0 1
24122: PUSH
24123: LD_INT 4
24125: MOD
24126: PUSH
24127: LD_INT 1
24129: PLUS
24130: PPUSH
24131: CALL_OW 259
24135: PUSH
24136: LD_INT 10
24138: LESS
24139: IFFALSE 24202
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24141: LD_VAR 0 3
24145: PUSH
24146: LD_VAR 0 1
24150: ARRAY
24151: PPUSH
24152: LD_VAR 0 1
24156: PUSH
24157: LD_INT 4
24159: MOD
24160: PUSH
24161: LD_INT 1
24163: PLUS
24164: PPUSH
24165: LD_VAR 0 3
24169: PUSH
24170: LD_VAR 0 1
24174: ARRAY
24175: PPUSH
24176: LD_VAR 0 1
24180: PUSH
24181: LD_INT 4
24183: MOD
24184: PUSH
24185: LD_INT 1
24187: PLUS
24188: PPUSH
24189: CALL_OW 259
24193: PUSH
24194: LD_INT 1
24196: PLUS
24197: PPUSH
24198: CALL_OW 237
24202: GO 24104
24204: POP
24205: POP
// end ;
24206: PPOPN 3
24208: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24209: LD_EXP 66
24213: PUSH
24214: LD_EXP 74
24218: AND
24219: IFFALSE 24239
24221: GO 24223
24223: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24224: LD_INT 4
24226: PPUSH
24227: LD_OWVAR 2
24231: PPUSH
24232: LD_INT 0
24234: PPUSH
24235: CALL_OW 324
24239: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24240: LD_EXP 66
24244: PUSH
24245: LD_EXP 103
24249: AND
24250: IFFALSE 24270
24252: GO 24254
24254: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24255: LD_INT 19
24257: PPUSH
24258: LD_OWVAR 2
24262: PPUSH
24263: LD_INT 0
24265: PPUSH
24266: CALL_OW 324
24270: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24271: LD_EXP 66
24275: PUSH
24276: LD_EXP 75
24280: AND
24281: IFFALSE 24383
24283: GO 24285
24285: DISABLE
24286: LD_INT 0
24288: PPUSH
24289: PPUSH
// begin enable ;
24290: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24291: LD_ADDR_VAR 0 2
24295: PUSH
24296: LD_INT 22
24298: PUSH
24299: LD_OWVAR 2
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 2
24310: PUSH
24311: LD_INT 34
24313: PUSH
24314: LD_INT 11
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 34
24323: PUSH
24324: LD_INT 30
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PPUSH
24340: CALL_OW 69
24344: ST_TO_ADDR
// if not tmp then
24345: LD_VAR 0 2
24349: NOT
24350: IFFALSE 24354
// exit ;
24352: GO 24383
// for i in tmp do
24354: LD_ADDR_VAR 0 1
24358: PUSH
24359: LD_VAR 0 2
24363: PUSH
24364: FOR_IN
24365: IFFALSE 24381
// begin SetLives ( i , 0 ) ;
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_INT 0
24374: PPUSH
24375: CALL_OW 234
// end ;
24379: GO 24364
24381: POP
24382: POP
// end ;
24383: PPOPN 2
24385: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24386: LD_EXP 66
24390: PUSH
24391: LD_EXP 76
24395: AND
24396: IFFALSE 24416
24398: GO 24400
24400: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24401: LD_INT 32
24403: PPUSH
24404: LD_OWVAR 2
24408: PPUSH
24409: LD_INT 0
24411: PPUSH
24412: CALL_OW 324
24416: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24417: LD_EXP 66
24421: PUSH
24422: LD_EXP 77
24426: AND
24427: IFFALSE 24608
24429: GO 24431
24431: DISABLE
24432: LD_INT 0
24434: PPUSH
24435: PPUSH
24436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24437: LD_ADDR_VAR 0 2
24441: PUSH
24442: LD_INT 22
24444: PUSH
24445: LD_OWVAR 2
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 33
24456: PUSH
24457: LD_INT 3
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 69
24472: ST_TO_ADDR
// if not tmp then
24473: LD_VAR 0 2
24477: NOT
24478: IFFALSE 24482
// exit ;
24480: GO 24608
// side := 0 ;
24482: LD_ADDR_VAR 0 3
24486: PUSH
24487: LD_INT 0
24489: ST_TO_ADDR
// for i := 1 to 8 do
24490: LD_ADDR_VAR 0 1
24494: PUSH
24495: DOUBLE
24496: LD_INT 1
24498: DEC
24499: ST_TO_ADDR
24500: LD_INT 8
24502: PUSH
24503: FOR_TO
24504: IFFALSE 24552
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24506: LD_OWVAR 2
24510: PUSH
24511: LD_VAR 0 1
24515: NONEQUAL
24516: PUSH
24517: LD_OWVAR 2
24521: PPUSH
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL_OW 81
24531: PUSH
24532: LD_INT 2
24534: EQUAL
24535: AND
24536: IFFALSE 24550
// begin side := i ;
24538: LD_ADDR_VAR 0 3
24542: PUSH
24543: LD_VAR 0 1
24547: ST_TO_ADDR
// break ;
24548: GO 24552
// end ;
24550: GO 24503
24552: POP
24553: POP
// if not side then
24554: LD_VAR 0 3
24558: NOT
24559: IFFALSE 24563
// exit ;
24561: GO 24608
// for i := 1 to tmp do
24563: LD_ADDR_VAR 0 1
24567: PUSH
24568: DOUBLE
24569: LD_INT 1
24571: DEC
24572: ST_TO_ADDR
24573: LD_VAR 0 2
24577: PUSH
24578: FOR_TO
24579: IFFALSE 24606
// if Prob ( 60 ) then
24581: LD_INT 60
24583: PPUSH
24584: CALL_OW 13
24588: IFFALSE 24604
// SetSide ( i , side ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: CALL_OW 235
24604: GO 24578
24606: POP
24607: POP
// end ;
24608: PPOPN 3
24610: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24611: LD_EXP 66
24615: PUSH
24616: LD_EXP 79
24620: AND
24621: IFFALSE 24740
24623: GO 24625
24625: DISABLE
24626: LD_INT 0
24628: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24629: LD_ADDR_VAR 0 1
24633: PUSH
24634: LD_INT 22
24636: PUSH
24637: LD_OWVAR 2
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 21
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: LD_INT 23
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: PPUSH
24678: CALL_OW 69
24682: PUSH
24683: FOR_IN
24684: IFFALSE 24738
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 257
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 2
24701: PUSH
24702: LD_INT 3
24704: PUSH
24705: LD_INT 4
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: IN
24714: IFFALSE 24736
// SetClass ( un , rand ( 1 , 4 ) ) ;
24716: LD_VAR 0 1
24720: PPUSH
24721: LD_INT 1
24723: PPUSH
24724: LD_INT 4
24726: PPUSH
24727: CALL_OW 12
24731: PPUSH
24732: CALL_OW 336
24736: GO 24683
24738: POP
24739: POP
// end ;
24740: PPOPN 1
24742: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24743: LD_EXP 66
24747: PUSH
24748: LD_EXP 78
24752: AND
24753: IFFALSE 24832
24755: GO 24757
24757: DISABLE
24758: LD_INT 0
24760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24761: LD_ADDR_VAR 0 1
24765: PUSH
24766: LD_INT 22
24768: PUSH
24769: LD_OWVAR 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 3
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PPUSH
24792: CALL_OW 69
24796: ST_TO_ADDR
// if not tmp then
24797: LD_VAR 0 1
24801: NOT
24802: IFFALSE 24806
// exit ;
24804: GO 24832
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24806: LD_VAR 0 1
24810: PUSH
24811: LD_INT 1
24813: PPUSH
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 12
24823: ARRAY
24824: PPUSH
24825: LD_INT 100
24827: PPUSH
24828: CALL_OW 234
// end ;
24832: PPOPN 1
24834: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24835: LD_EXP 66
24839: PUSH
24840: LD_EXP 80
24844: AND
24845: IFFALSE 24943
24847: GO 24849
24849: DISABLE
24850: LD_INT 0
24852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24853: LD_ADDR_VAR 0 1
24857: PUSH
24858: LD_INT 22
24860: PUSH
24861: LD_OWVAR 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 21
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PPUSH
24884: CALL_OW 69
24888: ST_TO_ADDR
// if not tmp then
24889: LD_VAR 0 1
24893: NOT
24894: IFFALSE 24898
// exit ;
24896: GO 24943
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24898: LD_VAR 0 1
24902: PUSH
24903: LD_INT 1
24905: PPUSH
24906: LD_VAR 0 1
24910: PPUSH
24911: CALL_OW 12
24915: ARRAY
24916: PPUSH
24917: LD_INT 1
24919: PPUSH
24920: LD_INT 4
24922: PPUSH
24923: CALL_OW 12
24927: PPUSH
24928: LD_INT 3000
24930: PPUSH
24931: LD_INT 9000
24933: PPUSH
24934: CALL_OW 12
24938: PPUSH
24939: CALL_OW 492
// end ;
24943: PPOPN 1
24945: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24946: LD_EXP 66
24950: PUSH
24951: LD_EXP 81
24955: AND
24956: IFFALSE 24976
24958: GO 24960
24960: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24961: LD_INT 1
24963: PPUSH
24964: LD_OWVAR 2
24968: PPUSH
24969: LD_INT 0
24971: PPUSH
24972: CALL_OW 324
24976: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24977: LD_EXP 66
24981: PUSH
24982: LD_EXP 82
24986: AND
24987: IFFALSE 25070
24989: GO 24991
24991: DISABLE
24992: LD_INT 0
24994: PPUSH
24995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24996: LD_ADDR_VAR 0 2
25000: PUSH
25001: LD_INT 22
25003: PUSH
25004: LD_OWVAR 2
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 21
25015: PUSH
25016: LD_INT 3
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PPUSH
25027: CALL_OW 69
25031: ST_TO_ADDR
// if not tmp then
25032: LD_VAR 0 2
25036: NOT
25037: IFFALSE 25041
// exit ;
25039: GO 25070
// for i in tmp do
25041: LD_ADDR_VAR 0 1
25045: PUSH
25046: LD_VAR 0 2
25050: PUSH
25051: FOR_IN
25052: IFFALSE 25068
// SetBLevel ( i , 10 ) ;
25054: LD_VAR 0 1
25058: PPUSH
25059: LD_INT 10
25061: PPUSH
25062: CALL_OW 241
25066: GO 25051
25068: POP
25069: POP
// end ;
25070: PPOPN 2
25072: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25073: LD_EXP 66
25077: PUSH
25078: LD_EXP 83
25082: AND
25083: IFFALSE 25194
25085: GO 25087
25087: DISABLE
25088: LD_INT 0
25090: PPUSH
25091: PPUSH
25092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_INT 22
25100: PUSH
25101: LD_OWVAR 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 25
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PPUSH
25124: CALL_OW 69
25128: ST_TO_ADDR
// if not tmp then
25129: LD_VAR 0 3
25133: NOT
25134: IFFALSE 25138
// exit ;
25136: GO 25194
// un := tmp [ rand ( 1 , tmp ) ] ;
25138: LD_ADDR_VAR 0 2
25142: PUSH
25143: LD_VAR 0 3
25147: PUSH
25148: LD_INT 1
25150: PPUSH
25151: LD_VAR 0 3
25155: PPUSH
25156: CALL_OW 12
25160: ARRAY
25161: ST_TO_ADDR
// if Crawls ( un ) then
25162: LD_VAR 0 2
25166: PPUSH
25167: CALL_OW 318
25171: IFFALSE 25182
// ComWalk ( un ) ;
25173: LD_VAR 0 2
25177: PPUSH
25178: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25182: LD_VAR 0 2
25186: PPUSH
25187: LD_INT 5
25189: PPUSH
25190: CALL_OW 336
// end ;
25194: PPOPN 3
25196: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25197: LD_EXP 66
25201: PUSH
25202: LD_EXP 84
25206: AND
25207: PUSH
25208: LD_OWVAR 67
25212: PUSH
25213: LD_INT 3
25215: LESS
25216: AND
25217: IFFALSE 25236
25219: GO 25221
25221: DISABLE
// Difficulty := Difficulty + 1 ;
25222: LD_ADDR_OWVAR 67
25226: PUSH
25227: LD_OWVAR 67
25231: PUSH
25232: LD_INT 1
25234: PLUS
25235: ST_TO_ADDR
25236: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25237: LD_EXP 66
25241: PUSH
25242: LD_EXP 85
25246: AND
25247: IFFALSE 25350
25249: GO 25251
25251: DISABLE
25252: LD_INT 0
25254: PPUSH
// begin for i := 1 to 5 do
25255: LD_ADDR_VAR 0 1
25259: PUSH
25260: DOUBLE
25261: LD_INT 1
25263: DEC
25264: ST_TO_ADDR
25265: LD_INT 5
25267: PUSH
25268: FOR_TO
25269: IFFALSE 25348
// begin uc_nation := nation_nature ;
25271: LD_ADDR_OWVAR 21
25275: PUSH
25276: LD_INT 0
25278: ST_TO_ADDR
// uc_side := 0 ;
25279: LD_ADDR_OWVAR 20
25283: PUSH
25284: LD_INT 0
25286: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25287: LD_ADDR_OWVAR 29
25291: PUSH
25292: LD_INT 12
25294: PUSH
25295: LD_INT 12
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: ST_TO_ADDR
// hc_agressivity := 20 ;
25302: LD_ADDR_OWVAR 35
25306: PUSH
25307: LD_INT 20
25309: ST_TO_ADDR
// hc_class := class_tiger ;
25310: LD_ADDR_OWVAR 28
25314: PUSH
25315: LD_INT 14
25317: ST_TO_ADDR
// hc_gallery :=  ;
25318: LD_ADDR_OWVAR 33
25322: PUSH
25323: LD_STRING 
25325: ST_TO_ADDR
// hc_name :=  ;
25326: LD_ADDR_OWVAR 26
25330: PUSH
25331: LD_STRING 
25333: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25334: CALL_OW 44
25338: PPUSH
25339: LD_INT 0
25341: PPUSH
25342: CALL_OW 51
// end ;
25346: GO 25268
25348: POP
25349: POP
// end ;
25350: PPOPN 1
25352: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25353: LD_EXP 66
25357: PUSH
25358: LD_EXP 86
25362: AND
25363: IFFALSE 25372
25365: GO 25367
25367: DISABLE
// StreamSibBomb ;
25368: CALL 25373 0 0
25372: END
// export function StreamSibBomb ; var i , x , y ; begin
25373: LD_INT 0
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
// result := false ;
25379: LD_ADDR_VAR 0 1
25383: PUSH
25384: LD_INT 0
25386: ST_TO_ADDR
// for i := 1 to 16 do
25387: LD_ADDR_VAR 0 2
25391: PUSH
25392: DOUBLE
25393: LD_INT 1
25395: DEC
25396: ST_TO_ADDR
25397: LD_INT 16
25399: PUSH
25400: FOR_TO
25401: IFFALSE 25600
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25403: LD_ADDR_VAR 0 3
25407: PUSH
25408: LD_INT 10
25410: PUSH
25411: LD_INT 20
25413: PUSH
25414: LD_INT 30
25416: PUSH
25417: LD_INT 40
25419: PUSH
25420: LD_INT 50
25422: PUSH
25423: LD_INT 60
25425: PUSH
25426: LD_INT 70
25428: PUSH
25429: LD_INT 80
25431: PUSH
25432: LD_INT 90
25434: PUSH
25435: LD_INT 100
25437: PUSH
25438: LD_INT 110
25440: PUSH
25441: LD_INT 120
25443: PUSH
25444: LD_INT 130
25446: PUSH
25447: LD_INT 140
25449: PUSH
25450: LD_INT 150
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: PPUSH
25473: LD_INT 15
25475: PPUSH
25476: CALL_OW 12
25480: ARRAY
25481: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25482: LD_ADDR_VAR 0 4
25486: PUSH
25487: LD_INT 10
25489: PUSH
25490: LD_INT 20
25492: PUSH
25493: LD_INT 30
25495: PUSH
25496: LD_INT 40
25498: PUSH
25499: LD_INT 50
25501: PUSH
25502: LD_INT 60
25504: PUSH
25505: LD_INT 70
25507: PUSH
25508: LD_INT 80
25510: PUSH
25511: LD_INT 90
25513: PUSH
25514: LD_INT 100
25516: PUSH
25517: LD_INT 110
25519: PUSH
25520: LD_INT 120
25522: PUSH
25523: LD_INT 130
25525: PUSH
25526: LD_INT 140
25528: PUSH
25529: LD_INT 150
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: PPUSH
25552: LD_INT 15
25554: PPUSH
25555: CALL_OW 12
25559: ARRAY
25560: ST_TO_ADDR
// if ValidHex ( x , y ) then
25561: LD_VAR 0 3
25565: PPUSH
25566: LD_VAR 0 4
25570: PPUSH
25571: CALL_OW 488
25575: IFFALSE 25598
// begin result := [ x , y ] ;
25577: LD_ADDR_VAR 0 1
25581: PUSH
25582: LD_VAR 0 3
25586: PUSH
25587: LD_VAR 0 4
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: ST_TO_ADDR
// break ;
25596: GO 25600
// end ; end ;
25598: GO 25400
25600: POP
25601: POP
// if result then
25602: LD_VAR 0 1
25606: IFFALSE 25666
// begin ToLua ( playSibBomb() ) ;
25608: LD_STRING playSibBomb()
25610: PPUSH
25611: CALL_OW 559
// wait ( 0 0$14 ) ;
25615: LD_INT 490
25617: PPUSH
25618: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25622: LD_VAR 0 1
25626: PUSH
25627: LD_INT 1
25629: ARRAY
25630: PPUSH
25631: LD_VAR 0 1
25635: PUSH
25636: LD_INT 2
25638: ARRAY
25639: PPUSH
25640: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25644: LD_VAR 0 1
25648: PUSH
25649: LD_INT 1
25651: ARRAY
25652: PPUSH
25653: LD_VAR 0 1
25657: PUSH
25658: LD_INT 2
25660: ARRAY
25661: PPUSH
25662: CALL_OW 429
// end ; end ;
25666: LD_VAR 0 1
25670: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25671: LD_EXP 66
25675: PUSH
25676: LD_EXP 88
25680: AND
25681: IFFALSE 25693
25683: GO 25685
25685: DISABLE
// YouLost (  ) ;
25686: LD_STRING 
25688: PPUSH
25689: CALL_OW 104
25693: END
// every 0 0$1 trigger StreamModeActive and sFog do
25694: LD_EXP 66
25698: PUSH
25699: LD_EXP 87
25703: AND
25704: IFFALSE 25718
25706: GO 25708
25708: DISABLE
// FogOff ( your_side ) ;
25709: LD_OWVAR 2
25713: PPUSH
25714: CALL_OW 344
25718: END
// every 0 0$1 trigger StreamModeActive and sSun do
25719: LD_EXP 66
25723: PUSH
25724: LD_EXP 89
25728: AND
25729: IFFALSE 25757
25731: GO 25733
25733: DISABLE
// begin solar_recharge_percent := 0 ;
25734: LD_ADDR_OWVAR 79
25738: PUSH
25739: LD_INT 0
25741: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25742: LD_INT 10500
25744: PPUSH
25745: CALL_OW 67
// solar_recharge_percent := 100 ;
25749: LD_ADDR_OWVAR 79
25753: PUSH
25754: LD_INT 100
25756: ST_TO_ADDR
// end ;
25757: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25758: LD_EXP 66
25762: PUSH
25763: LD_EXP 90
25767: AND
25768: IFFALSE 26007
25770: GO 25772
25772: DISABLE
25773: LD_INT 0
25775: PPUSH
25776: PPUSH
25777: PPUSH
// begin tmp := [ ] ;
25778: LD_ADDR_VAR 0 3
25782: PUSH
25783: EMPTY
25784: ST_TO_ADDR
// for i := 1 to 6 do
25785: LD_ADDR_VAR 0 1
25789: PUSH
25790: DOUBLE
25791: LD_INT 1
25793: DEC
25794: ST_TO_ADDR
25795: LD_INT 6
25797: PUSH
25798: FOR_TO
25799: IFFALSE 25904
// begin uc_nation := nation_nature ;
25801: LD_ADDR_OWVAR 21
25805: PUSH
25806: LD_INT 0
25808: ST_TO_ADDR
// uc_side := 0 ;
25809: LD_ADDR_OWVAR 20
25813: PUSH
25814: LD_INT 0
25816: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25817: LD_ADDR_OWVAR 29
25821: PUSH
25822: LD_INT 12
25824: PUSH
25825: LD_INT 12
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: ST_TO_ADDR
// hc_agressivity := 20 ;
25832: LD_ADDR_OWVAR 35
25836: PUSH
25837: LD_INT 20
25839: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25840: LD_ADDR_OWVAR 28
25844: PUSH
25845: LD_INT 17
25847: ST_TO_ADDR
// hc_gallery :=  ;
25848: LD_ADDR_OWVAR 33
25852: PUSH
25853: LD_STRING 
25855: ST_TO_ADDR
// hc_name :=  ;
25856: LD_ADDR_OWVAR 26
25860: PUSH
25861: LD_STRING 
25863: ST_TO_ADDR
// un := CreateHuman ;
25864: LD_ADDR_VAR 0 2
25868: PUSH
25869: CALL_OW 44
25873: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25874: LD_VAR 0 2
25878: PPUSH
25879: LD_INT 1
25881: PPUSH
25882: CALL_OW 51
// tmp := tmp ^ un ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_VAR 0 3
25895: PUSH
25896: LD_VAR 0 2
25900: ADD
25901: ST_TO_ADDR
// end ;
25902: GO 25798
25904: POP
25905: POP
// repeat wait ( 0 0$1 ) ;
25906: LD_INT 35
25908: PPUSH
25909: CALL_OW 67
// for un in tmp do
25913: LD_ADDR_VAR 0 2
25917: PUSH
25918: LD_VAR 0 3
25922: PUSH
25923: FOR_IN
25924: IFFALSE 25998
// begin if IsDead ( un ) then
25926: LD_VAR 0 2
25930: PPUSH
25931: CALL_OW 301
25935: IFFALSE 25955
// begin tmp := tmp diff un ;
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_VAR 0 3
25946: PUSH
25947: LD_VAR 0 2
25951: DIFF
25952: ST_TO_ADDR
// continue ;
25953: GO 25923
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25955: LD_VAR 0 2
25959: PPUSH
25960: LD_INT 3
25962: PUSH
25963: LD_INT 22
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PPUSH
25977: CALL_OW 69
25981: PPUSH
25982: LD_VAR 0 2
25986: PPUSH
25987: CALL_OW 74
25991: PPUSH
25992: CALL_OW 115
// end ;
25996: GO 25923
25998: POP
25999: POP
// until not tmp ;
26000: LD_VAR 0 3
26004: NOT
26005: IFFALSE 25906
// end ;
26007: PPOPN 3
26009: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26010: LD_EXP 66
26014: PUSH
26015: LD_EXP 91
26019: AND
26020: IFFALSE 26074
26022: GO 26024
26024: DISABLE
// begin ToLua ( displayTroll(); ) ;
26025: LD_STRING displayTroll();
26027: PPUSH
26028: CALL_OW 559
// wait ( 3 3$00 ) ;
26032: LD_INT 6300
26034: PPUSH
26035: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26039: LD_STRING hideTroll();
26041: PPUSH
26042: CALL_OW 559
// wait ( 1 1$00 ) ;
26046: LD_INT 2100
26048: PPUSH
26049: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26053: LD_STRING displayTroll();
26055: PPUSH
26056: CALL_OW 559
// wait ( 1 1$00 ) ;
26060: LD_INT 2100
26062: PPUSH
26063: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26067: LD_STRING hideTroll();
26069: PPUSH
26070: CALL_OW 559
// end ;
26074: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26075: LD_EXP 66
26079: PUSH
26080: LD_EXP 92
26084: AND
26085: IFFALSE 26148
26087: GO 26089
26089: DISABLE
26090: LD_INT 0
26092: PPUSH
// begin p := 0 ;
26093: LD_ADDR_VAR 0 1
26097: PUSH
26098: LD_INT 0
26100: ST_TO_ADDR
// repeat game_speed := 1 ;
26101: LD_ADDR_OWVAR 65
26105: PUSH
26106: LD_INT 1
26108: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26109: LD_INT 35
26111: PPUSH
26112: CALL_OW 67
// p := p + 1 ;
26116: LD_ADDR_VAR 0 1
26120: PUSH
26121: LD_VAR 0 1
26125: PUSH
26126: LD_INT 1
26128: PLUS
26129: ST_TO_ADDR
// until p >= 60 ;
26130: LD_VAR 0 1
26134: PUSH
26135: LD_INT 60
26137: GREATEREQUAL
26138: IFFALSE 26101
// game_speed := 4 ;
26140: LD_ADDR_OWVAR 65
26144: PUSH
26145: LD_INT 4
26147: ST_TO_ADDR
// end ;
26148: PPOPN 1
26150: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26151: LD_EXP 66
26155: PUSH
26156: LD_EXP 93
26160: AND
26161: IFFALSE 26307
26163: GO 26165
26165: DISABLE
26166: LD_INT 0
26168: PPUSH
26169: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26170: LD_ADDR_VAR 0 1
26174: PUSH
26175: LD_INT 22
26177: PUSH
26178: LD_OWVAR 2
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 30
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 30
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PPUSH
26219: CALL_OW 69
26223: ST_TO_ADDR
// if not depot then
26224: LD_VAR 0 1
26228: NOT
26229: IFFALSE 26233
// exit ;
26231: GO 26307
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26233: LD_ADDR_VAR 0 2
26237: PUSH
26238: LD_VAR 0 1
26242: PUSH
26243: LD_INT 1
26245: PPUSH
26246: LD_VAR 0 1
26250: PPUSH
26251: CALL_OW 12
26255: ARRAY
26256: PPUSH
26257: CALL_OW 274
26261: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26262: LD_VAR 0 2
26266: PPUSH
26267: LD_INT 1
26269: PPUSH
26270: LD_INT 0
26272: PPUSH
26273: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26277: LD_VAR 0 2
26281: PPUSH
26282: LD_INT 2
26284: PPUSH
26285: LD_INT 0
26287: PPUSH
26288: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26292: LD_VAR 0 2
26296: PPUSH
26297: LD_INT 3
26299: PPUSH
26300: LD_INT 0
26302: PPUSH
26303: CALL_OW 277
// end ;
26307: PPOPN 2
26309: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26310: LD_EXP 66
26314: PUSH
26315: LD_EXP 94
26319: AND
26320: IFFALSE 26417
26322: GO 26324
26324: DISABLE
26325: LD_INT 0
26327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26328: LD_ADDR_VAR 0 1
26332: PUSH
26333: LD_INT 22
26335: PUSH
26336: LD_OWVAR 2
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 21
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: LD_INT 23
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: PPUSH
26377: CALL_OW 69
26381: ST_TO_ADDR
// if not tmp then
26382: LD_VAR 0 1
26386: NOT
26387: IFFALSE 26391
// exit ;
26389: GO 26417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26391: LD_VAR 0 1
26395: PUSH
26396: LD_INT 1
26398: PPUSH
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL_OW 12
26408: ARRAY
26409: PPUSH
26410: LD_INT 200
26412: PPUSH
26413: CALL_OW 234
// end ;
26417: PPOPN 1
26419: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26420: LD_EXP 66
26424: PUSH
26425: LD_EXP 95
26429: AND
26430: IFFALSE 26509
26432: GO 26434
26434: DISABLE
26435: LD_INT 0
26437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26438: LD_ADDR_VAR 0 1
26442: PUSH
26443: LD_INT 22
26445: PUSH
26446: LD_OWVAR 2
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 21
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PPUSH
26469: CALL_OW 69
26473: ST_TO_ADDR
// if not tmp then
26474: LD_VAR 0 1
26478: NOT
26479: IFFALSE 26483
// exit ;
26481: GO 26509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26483: LD_VAR 0 1
26487: PUSH
26488: LD_INT 1
26490: PPUSH
26491: LD_VAR 0 1
26495: PPUSH
26496: CALL_OW 12
26500: ARRAY
26501: PPUSH
26502: LD_INT 60
26504: PPUSH
26505: CALL_OW 234
// end ;
26509: PPOPN 1
26511: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26512: LD_EXP 66
26516: PUSH
26517: LD_EXP 96
26521: AND
26522: IFFALSE 26621
26524: GO 26526
26526: DISABLE
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
// begin enable ;
26531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26532: LD_ADDR_VAR 0 1
26536: PUSH
26537: LD_INT 22
26539: PUSH
26540: LD_OWVAR 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 61
26551: PUSH
26552: EMPTY
26553: LIST
26554: PUSH
26555: LD_INT 33
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: PPUSH
26570: CALL_OW 69
26574: ST_TO_ADDR
// if not tmp then
26575: LD_VAR 0 1
26579: NOT
26580: IFFALSE 26584
// exit ;
26582: GO 26621
// for i in tmp do
26584: LD_ADDR_VAR 0 2
26588: PUSH
26589: LD_VAR 0 1
26593: PUSH
26594: FOR_IN
26595: IFFALSE 26619
// if IsControledBy ( i ) then
26597: LD_VAR 0 2
26601: PPUSH
26602: CALL_OW 312
26606: IFFALSE 26617
// ComUnlink ( i ) ;
26608: LD_VAR 0 2
26612: PPUSH
26613: CALL_OW 136
26617: GO 26594
26619: POP
26620: POP
// end ;
26621: PPOPN 2
26623: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26624: LD_EXP 66
26628: PUSH
26629: LD_EXP 97
26633: AND
26634: IFFALSE 26774
26636: GO 26638
26638: DISABLE
26639: LD_INT 0
26641: PPUSH
26642: PPUSH
// begin ToLua ( displayPowell(); ) ;
26643: LD_STRING displayPowell();
26645: PPUSH
26646: CALL_OW 559
// uc_side := 0 ;
26650: LD_ADDR_OWVAR 20
26654: PUSH
26655: LD_INT 0
26657: ST_TO_ADDR
// uc_nation := 2 ;
26658: LD_ADDR_OWVAR 21
26662: PUSH
26663: LD_INT 2
26665: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26666: LD_ADDR_OWVAR 37
26670: PUSH
26671: LD_INT 14
26673: ST_TO_ADDR
// vc_engine := engine_siberite ;
26674: LD_ADDR_OWVAR 39
26678: PUSH
26679: LD_INT 3
26681: ST_TO_ADDR
// vc_control := control_apeman ;
26682: LD_ADDR_OWVAR 38
26686: PUSH
26687: LD_INT 5
26689: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26690: LD_ADDR_OWVAR 40
26694: PUSH
26695: LD_INT 29
26697: ST_TO_ADDR
// un := CreateVehicle ;
26698: LD_ADDR_VAR 0 2
26702: PUSH
26703: CALL_OW 45
26707: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26708: LD_VAR 0 2
26712: PPUSH
26713: LD_INT 1
26715: PPUSH
26716: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26720: LD_INT 35
26722: PPUSH
26723: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26727: LD_VAR 0 2
26731: PPUSH
26732: LD_INT 22
26734: PUSH
26735: LD_OWVAR 2
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PPUSH
26744: CALL_OW 69
26748: PPUSH
26749: LD_VAR 0 2
26753: PPUSH
26754: CALL_OW 74
26758: PPUSH
26759: CALL_OW 115
// until IsDead ( un ) ;
26763: LD_VAR 0 2
26767: PPUSH
26768: CALL_OW 301
26772: IFFALSE 26720
// end ;
26774: PPOPN 2
26776: END
// every 0 0$1 trigger StreamModeActive and sStu do
26777: LD_EXP 66
26781: PUSH
26782: LD_EXP 105
26786: AND
26787: IFFALSE 26803
26789: GO 26791
26791: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26792: LD_STRING displayStucuk();
26794: PPUSH
26795: CALL_OW 559
// ResetFog ;
26799: CALL_OW 335
// end ;
26803: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26804: LD_EXP 66
26808: PUSH
26809: LD_EXP 98
26813: AND
26814: IFFALSE 26955
26816: GO 26818
26818: DISABLE
26819: LD_INT 0
26821: PPUSH
26822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26823: LD_ADDR_VAR 0 2
26827: PUSH
26828: LD_INT 22
26830: PUSH
26831: LD_OWVAR 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 21
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 69
26858: ST_TO_ADDR
// if not tmp then
26859: LD_VAR 0 2
26863: NOT
26864: IFFALSE 26868
// exit ;
26866: GO 26955
// un := tmp [ rand ( 1 , tmp ) ] ;
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: LD_VAR 0 2
26877: PUSH
26878: LD_INT 1
26880: PPUSH
26881: LD_VAR 0 2
26885: PPUSH
26886: CALL_OW 12
26890: ARRAY
26891: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26892: LD_VAR 0 1
26896: PPUSH
26897: LD_INT 0
26899: PPUSH
26900: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26904: LD_VAR 0 1
26908: PPUSH
26909: LD_OWVAR 3
26913: PUSH
26914: LD_VAR 0 1
26918: DIFF
26919: PPUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 74
26929: PPUSH
26930: CALL_OW 115
// wait ( 0 0$20 ) ;
26934: LD_INT 700
26936: PPUSH
26937: CALL_OW 67
// SetSide ( un , your_side ) ;
26941: LD_VAR 0 1
26945: PPUSH
26946: LD_OWVAR 2
26950: PPUSH
26951: CALL_OW 235
// end ;
26955: PPOPN 2
26957: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26958: LD_EXP 66
26962: PUSH
26963: LD_EXP 99
26967: AND
26968: IFFALSE 27074
26970: GO 26972
26972: DISABLE
26973: LD_INT 0
26975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: LD_INT 22
26983: PUSH
26984: LD_OWVAR 2
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: LD_INT 30
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 30
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PPUSH
27025: CALL_OW 69
27029: ST_TO_ADDR
// if not depot then
27030: LD_VAR 0 1
27034: NOT
27035: IFFALSE 27039
// exit ;
27037: GO 27074
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27039: LD_VAR 0 1
27043: PUSH
27044: LD_INT 1
27046: ARRAY
27047: PPUSH
27048: CALL_OW 250
27052: PPUSH
27053: LD_VAR 0 1
27057: PUSH
27058: LD_INT 1
27060: ARRAY
27061: PPUSH
27062: CALL_OW 251
27066: PPUSH
27067: LD_INT 70
27069: PPUSH
27070: CALL_OW 495
// end ;
27074: PPOPN 1
27076: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27077: LD_EXP 66
27081: PUSH
27082: LD_EXP 100
27086: AND
27087: IFFALSE 27298
27089: GO 27091
27091: DISABLE
27092: LD_INT 0
27094: PPUSH
27095: PPUSH
27096: PPUSH
27097: PPUSH
27098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27099: LD_ADDR_VAR 0 5
27103: PUSH
27104: LD_INT 22
27106: PUSH
27107: LD_OWVAR 2
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 21
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PPUSH
27130: CALL_OW 69
27134: ST_TO_ADDR
// if not tmp then
27135: LD_VAR 0 5
27139: NOT
27140: IFFALSE 27144
// exit ;
27142: GO 27298
// for i in tmp do
27144: LD_ADDR_VAR 0 1
27148: PUSH
27149: LD_VAR 0 5
27153: PUSH
27154: FOR_IN
27155: IFFALSE 27296
// begin d := rand ( 0 , 5 ) ;
27157: LD_ADDR_VAR 0 4
27161: PUSH
27162: LD_INT 0
27164: PPUSH
27165: LD_INT 5
27167: PPUSH
27168: CALL_OW 12
27172: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27173: LD_ADDR_VAR 0 2
27177: PUSH
27178: LD_VAR 0 1
27182: PPUSH
27183: CALL_OW 250
27187: PPUSH
27188: LD_VAR 0 4
27192: PPUSH
27193: LD_INT 3
27195: PPUSH
27196: LD_INT 12
27198: PPUSH
27199: CALL_OW 12
27203: PPUSH
27204: CALL_OW 272
27208: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27209: LD_ADDR_VAR 0 3
27213: PUSH
27214: LD_VAR 0 1
27218: PPUSH
27219: CALL_OW 251
27223: PPUSH
27224: LD_VAR 0 4
27228: PPUSH
27229: LD_INT 3
27231: PPUSH
27232: LD_INT 12
27234: PPUSH
27235: CALL_OW 12
27239: PPUSH
27240: CALL_OW 273
27244: ST_TO_ADDR
// if ValidHex ( x , y ) then
27245: LD_VAR 0 2
27249: PPUSH
27250: LD_VAR 0 3
27254: PPUSH
27255: CALL_OW 488
27259: IFFALSE 27294
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_VAR 0 2
27270: PPUSH
27271: LD_VAR 0 3
27275: PPUSH
27276: LD_INT 3
27278: PPUSH
27279: LD_INT 6
27281: PPUSH
27282: CALL_OW 12
27286: PPUSH
27287: LD_INT 1
27289: PPUSH
27290: CALL_OW 483
// end ;
27294: GO 27154
27296: POP
27297: POP
// end ;
27298: PPOPN 5
27300: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27301: LD_EXP 66
27305: PUSH
27306: LD_EXP 101
27310: AND
27311: IFFALSE 27405
27313: GO 27315
27315: DISABLE
27316: LD_INT 0
27318: PPUSH
27319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27320: LD_ADDR_VAR 0 2
27324: PUSH
27325: LD_INT 22
27327: PUSH
27328: LD_OWVAR 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 32
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 21
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: PPUSH
27362: CALL_OW 69
27366: ST_TO_ADDR
// if not tmp then
27367: LD_VAR 0 2
27371: NOT
27372: IFFALSE 27376
// exit ;
27374: GO 27405
// for i in tmp do
27376: LD_ADDR_VAR 0 1
27380: PUSH
27381: LD_VAR 0 2
27385: PUSH
27386: FOR_IN
27387: IFFALSE 27403
// SetFuel ( i , 0 ) ;
27389: LD_VAR 0 1
27393: PPUSH
27394: LD_INT 0
27396: PPUSH
27397: CALL_OW 240
27401: GO 27386
27403: POP
27404: POP
// end ;
27405: PPOPN 2
27407: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27408: LD_EXP 66
27412: PUSH
27413: LD_EXP 102
27417: AND
27418: IFFALSE 27484
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_INT 22
27433: PUSH
27434: LD_OWVAR 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 30
27445: PUSH
27446: LD_INT 29
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: ST_TO_ADDR
// if not tmp then
27462: LD_VAR 0 1
27466: NOT
27467: IFFALSE 27471
// exit ;
27469: GO 27484
// DestroyUnit ( tmp [ 1 ] ) ;
27471: LD_VAR 0 1
27475: PUSH
27476: LD_INT 1
27478: ARRAY
27479: PPUSH
27480: CALL_OW 65
// end ;
27484: PPOPN 1
27486: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27487: LD_EXP 66
27491: PUSH
27492: LD_EXP 104
27496: AND
27497: IFFALSE 27626
27499: GO 27501
27501: DISABLE
27502: LD_INT 0
27504: PPUSH
// begin uc_side := 0 ;
27505: LD_ADDR_OWVAR 20
27509: PUSH
27510: LD_INT 0
27512: ST_TO_ADDR
// uc_nation := nation_arabian ;
27513: LD_ADDR_OWVAR 21
27517: PUSH
27518: LD_INT 2
27520: ST_TO_ADDR
// hc_gallery :=  ;
27521: LD_ADDR_OWVAR 33
27525: PUSH
27526: LD_STRING 
27528: ST_TO_ADDR
// hc_name :=  ;
27529: LD_ADDR_OWVAR 26
27533: PUSH
27534: LD_STRING 
27536: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27537: LD_INT 1
27539: PPUSH
27540: LD_INT 11
27542: PPUSH
27543: LD_INT 10
27545: PPUSH
27546: CALL_OW 380
// un := CreateHuman ;
27550: LD_ADDR_VAR 0 1
27554: PUSH
27555: CALL_OW 44
27559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27560: LD_VAR 0 1
27564: PPUSH
27565: LD_INT 1
27567: PPUSH
27568: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27572: LD_INT 35
27574: PPUSH
27575: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27579: LD_VAR 0 1
27583: PPUSH
27584: LD_INT 22
27586: PUSH
27587: LD_OWVAR 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PPUSH
27596: CALL_OW 69
27600: PPUSH
27601: LD_VAR 0 1
27605: PPUSH
27606: CALL_OW 74
27610: PPUSH
27611: CALL_OW 115
// until IsDead ( un ) ;
27615: LD_VAR 0 1
27619: PPUSH
27620: CALL_OW 301
27624: IFFALSE 27572
// end ;
27626: PPOPN 1
27628: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27629: LD_EXP 66
27633: PUSH
27634: LD_EXP 106
27638: AND
27639: IFFALSE 27651
27641: GO 27643
27643: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27644: LD_STRING earthquake(getX(game), 0, 32)
27646: PPUSH
27647: CALL_OW 559
27651: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27652: LD_EXP 66
27656: PUSH
27657: LD_EXP 107
27661: AND
27662: IFFALSE 27753
27664: GO 27666
27666: DISABLE
27667: LD_INT 0
27669: PPUSH
// begin enable ;
27670: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27671: LD_ADDR_VAR 0 1
27675: PUSH
27676: LD_INT 22
27678: PUSH
27679: LD_OWVAR 2
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 21
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 33
27700: PUSH
27701: LD_INT 3
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: PPUSH
27713: CALL_OW 69
27717: ST_TO_ADDR
// if not tmp then
27718: LD_VAR 0 1
27722: NOT
27723: IFFALSE 27727
// exit ;
27725: GO 27753
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27727: LD_VAR 0 1
27731: PUSH
27732: LD_INT 1
27734: PPUSH
27735: LD_VAR 0 1
27739: PPUSH
27740: CALL_OW 12
27744: ARRAY
27745: PPUSH
27746: LD_INT 1
27748: PPUSH
27749: CALL_OW 234
// end ;
27753: PPOPN 1
27755: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27756: LD_EXP 66
27760: PUSH
27761: LD_EXP 108
27765: AND
27766: IFFALSE 27907
27768: GO 27770
27770: DISABLE
27771: LD_INT 0
27773: PPUSH
27774: PPUSH
27775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27776: LD_ADDR_VAR 0 3
27780: PUSH
27781: LD_INT 22
27783: PUSH
27784: LD_OWVAR 2
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 25
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PPUSH
27807: CALL_OW 69
27811: ST_TO_ADDR
// if not tmp then
27812: LD_VAR 0 3
27816: NOT
27817: IFFALSE 27821
// exit ;
27819: GO 27907
// un := tmp [ rand ( 1 , tmp ) ] ;
27821: LD_ADDR_VAR 0 2
27825: PUSH
27826: LD_VAR 0 3
27830: PUSH
27831: LD_INT 1
27833: PPUSH
27834: LD_VAR 0 3
27838: PPUSH
27839: CALL_OW 12
27843: ARRAY
27844: ST_TO_ADDR
// if Crawls ( un ) then
27845: LD_VAR 0 2
27849: PPUSH
27850: CALL_OW 318
27854: IFFALSE 27865
// ComWalk ( un ) ;
27856: LD_VAR 0 2
27860: PPUSH
27861: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27865: LD_VAR 0 2
27869: PPUSH
27870: LD_INT 9
27872: PPUSH
27873: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27877: LD_INT 28
27879: PPUSH
27880: LD_OWVAR 2
27884: PPUSH
27885: LD_INT 2
27887: PPUSH
27888: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27892: LD_INT 29
27894: PPUSH
27895: LD_OWVAR 2
27899: PPUSH
27900: LD_INT 2
27902: PPUSH
27903: CALL_OW 322
// end ;
27907: PPOPN 3
27909: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27910: LD_EXP 66
27914: PUSH
27915: LD_EXP 109
27919: AND
27920: IFFALSE 28031
27922: GO 27924
27924: DISABLE
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27930: LD_ADDR_VAR 0 3
27934: PUSH
27935: LD_INT 22
27937: PUSH
27938: LD_OWVAR 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 25
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PPUSH
27961: CALL_OW 69
27965: ST_TO_ADDR
// if not tmp then
27966: LD_VAR 0 3
27970: NOT
27971: IFFALSE 27975
// exit ;
27973: GO 28031
// un := tmp [ rand ( 1 , tmp ) ] ;
27975: LD_ADDR_VAR 0 2
27979: PUSH
27980: LD_VAR 0 3
27984: PUSH
27985: LD_INT 1
27987: PPUSH
27988: LD_VAR 0 3
27992: PPUSH
27993: CALL_OW 12
27997: ARRAY
27998: ST_TO_ADDR
// if Crawls ( un ) then
27999: LD_VAR 0 2
28003: PPUSH
28004: CALL_OW 318
28008: IFFALSE 28019
// ComWalk ( un ) ;
28010: LD_VAR 0 2
28014: PPUSH
28015: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28019: LD_VAR 0 2
28023: PPUSH
28024: LD_INT 8
28026: PPUSH
28027: CALL_OW 336
// end ;
28031: PPOPN 3
28033: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28034: LD_EXP 66
28038: PUSH
28039: LD_EXP 110
28043: AND
28044: IFFALSE 28188
28046: GO 28048
28048: DISABLE
28049: LD_INT 0
28051: PPUSH
28052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28053: LD_ADDR_VAR 0 2
28057: PUSH
28058: LD_INT 22
28060: PUSH
28061: LD_OWVAR 2
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 21
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 34
28085: PUSH
28086: LD_INT 12
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 34
28095: PUSH
28096: LD_INT 51
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 34
28105: PUSH
28106: LD_INT 32
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: PPUSH
28124: CALL_OW 69
28128: ST_TO_ADDR
// if not tmp then
28129: LD_VAR 0 2
28133: NOT
28134: IFFALSE 28138
// exit ;
28136: GO 28188
// for i in tmp do
28138: LD_ADDR_VAR 0 1
28142: PUSH
28143: LD_VAR 0 2
28147: PUSH
28148: FOR_IN
28149: IFFALSE 28186
// if GetCargo ( i , mat_artifact ) = 0 then
28151: LD_VAR 0 1
28155: PPUSH
28156: LD_INT 4
28158: PPUSH
28159: CALL_OW 289
28163: PUSH
28164: LD_INT 0
28166: EQUAL
28167: IFFALSE 28184
// SetCargo ( i , mat_siberit , 100 ) ;
28169: LD_VAR 0 1
28173: PPUSH
28174: LD_INT 3
28176: PPUSH
28177: LD_INT 100
28179: PPUSH
28180: CALL_OW 290
28184: GO 28148
28186: POP
28187: POP
// end ;
28188: PPOPN 2
28190: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28191: LD_EXP 66
28195: PUSH
28196: LD_EXP 111
28200: AND
28201: IFFALSE 28384
28203: GO 28205
28205: DISABLE
28206: LD_INT 0
28208: PPUSH
28209: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28210: LD_ADDR_VAR 0 2
28214: PUSH
28215: LD_INT 22
28217: PUSH
28218: LD_OWVAR 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PPUSH
28227: CALL_OW 69
28231: ST_TO_ADDR
// if not tmp then
28232: LD_VAR 0 2
28236: NOT
28237: IFFALSE 28241
// exit ;
28239: GO 28384
// for i := 1 to 2 do
28241: LD_ADDR_VAR 0 1
28245: PUSH
28246: DOUBLE
28247: LD_INT 1
28249: DEC
28250: ST_TO_ADDR
28251: LD_INT 2
28253: PUSH
28254: FOR_TO
28255: IFFALSE 28382
// begin uc_side := your_side ;
28257: LD_ADDR_OWVAR 20
28261: PUSH
28262: LD_OWVAR 2
28266: ST_TO_ADDR
// uc_nation := nation_american ;
28267: LD_ADDR_OWVAR 21
28271: PUSH
28272: LD_INT 1
28274: ST_TO_ADDR
// vc_chassis := us_morphling ;
28275: LD_ADDR_OWVAR 37
28279: PUSH
28280: LD_INT 5
28282: ST_TO_ADDR
// vc_engine := engine_siberite ;
28283: LD_ADDR_OWVAR 39
28287: PUSH
28288: LD_INT 3
28290: ST_TO_ADDR
// vc_control := control_computer ;
28291: LD_ADDR_OWVAR 38
28295: PUSH
28296: LD_INT 3
28298: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28299: LD_ADDR_OWVAR 40
28303: PUSH
28304: LD_INT 10
28306: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28307: LD_VAR 0 2
28311: PUSH
28312: LD_INT 1
28314: ARRAY
28315: PPUSH
28316: CALL_OW 310
28320: NOT
28321: IFFALSE 28368
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28323: CALL_OW 45
28327: PPUSH
28328: LD_VAR 0 2
28332: PUSH
28333: LD_INT 1
28335: ARRAY
28336: PPUSH
28337: CALL_OW 250
28341: PPUSH
28342: LD_VAR 0 2
28346: PUSH
28347: LD_INT 1
28349: ARRAY
28350: PPUSH
28351: CALL_OW 251
28355: PPUSH
28356: LD_INT 12
28358: PPUSH
28359: LD_INT 1
28361: PPUSH
28362: CALL_OW 50
28366: GO 28380
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28368: CALL_OW 45
28372: PPUSH
28373: LD_INT 1
28375: PPUSH
28376: CALL_OW 51
// end ;
28380: GO 28254
28382: POP
28383: POP
// end ;
28384: PPOPN 2
28386: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28387: LD_EXP 66
28391: PUSH
28392: LD_EXP 112
28396: AND
28397: IFFALSE 28619
28399: GO 28401
28401: DISABLE
28402: LD_INT 0
28404: PPUSH
28405: PPUSH
28406: PPUSH
28407: PPUSH
28408: PPUSH
28409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28410: LD_ADDR_VAR 0 6
28414: PUSH
28415: LD_INT 22
28417: PUSH
28418: LD_OWVAR 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 21
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 3
28439: PUSH
28440: LD_INT 23
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: PPUSH
28459: CALL_OW 69
28463: ST_TO_ADDR
// if not tmp then
28464: LD_VAR 0 6
28468: NOT
28469: IFFALSE 28473
// exit ;
28471: GO 28619
// s1 := rand ( 1 , 4 ) ;
28473: LD_ADDR_VAR 0 2
28477: PUSH
28478: LD_INT 1
28480: PPUSH
28481: LD_INT 4
28483: PPUSH
28484: CALL_OW 12
28488: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28489: LD_ADDR_VAR 0 4
28493: PUSH
28494: LD_VAR 0 6
28498: PUSH
28499: LD_INT 1
28501: ARRAY
28502: PPUSH
28503: LD_VAR 0 2
28507: PPUSH
28508: CALL_OW 259
28512: ST_TO_ADDR
// if s1 = 1 then
28513: LD_VAR 0 2
28517: PUSH
28518: LD_INT 1
28520: EQUAL
28521: IFFALSE 28541
// s2 := rand ( 2 , 4 ) else
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_INT 2
28530: PPUSH
28531: LD_INT 4
28533: PPUSH
28534: CALL_OW 12
28538: ST_TO_ADDR
28539: GO 28549
// s2 := 1 ;
28541: LD_ADDR_VAR 0 3
28545: PUSH
28546: LD_INT 1
28548: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28549: LD_ADDR_VAR 0 5
28553: PUSH
28554: LD_VAR 0 6
28558: PUSH
28559: LD_INT 1
28561: ARRAY
28562: PPUSH
28563: LD_VAR 0 3
28567: PPUSH
28568: CALL_OW 259
28572: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28573: LD_VAR 0 6
28577: PUSH
28578: LD_INT 1
28580: ARRAY
28581: PPUSH
28582: LD_VAR 0 2
28586: PPUSH
28587: LD_VAR 0 5
28591: PPUSH
28592: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28596: LD_VAR 0 6
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: PPUSH
28605: LD_VAR 0 3
28609: PPUSH
28610: LD_VAR 0 4
28614: PPUSH
28615: CALL_OW 237
// end ;
28619: PPOPN 6
28621: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28622: LD_EXP 66
28626: PUSH
28627: LD_EXP 113
28631: AND
28632: IFFALSE 28711
28634: GO 28636
28636: DISABLE
28637: LD_INT 0
28639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28640: LD_ADDR_VAR 0 1
28644: PUSH
28645: LD_INT 22
28647: PUSH
28648: LD_OWVAR 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 30
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PPUSH
28671: CALL_OW 69
28675: ST_TO_ADDR
// if not tmp then
28676: LD_VAR 0 1
28680: NOT
28681: IFFALSE 28685
// exit ;
28683: GO 28711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28685: LD_VAR 0 1
28689: PUSH
28690: LD_INT 1
28692: PPUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: CALL_OW 12
28702: ARRAY
28703: PPUSH
28704: LD_INT 1
28706: PPUSH
28707: CALL_OW 234
// end ;
28711: PPOPN 1
28713: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28714: LD_EXP 66
28718: PUSH
28719: LD_EXP 114
28723: AND
28724: IFFALSE 28836
28726: GO 28728
28728: DISABLE
28729: LD_INT 0
28731: PPUSH
28732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28733: LD_ADDR_VAR 0 2
28737: PUSH
28738: LD_INT 22
28740: PUSH
28741: LD_OWVAR 2
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 30
28755: PUSH
28756: LD_INT 27
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: LD_INT 26
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 30
28775: PUSH
28776: LD_INT 28
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PPUSH
28793: CALL_OW 69
28797: ST_TO_ADDR
// if not tmp then
28798: LD_VAR 0 2
28802: NOT
28803: IFFALSE 28807
// exit ;
28805: GO 28836
// for i in tmp do
28807: LD_ADDR_VAR 0 1
28811: PUSH
28812: LD_VAR 0 2
28816: PUSH
28817: FOR_IN
28818: IFFALSE 28834
// SetLives ( i , 1 ) ;
28820: LD_VAR 0 1
28824: PPUSH
28825: LD_INT 1
28827: PPUSH
28828: CALL_OW 234
28832: GO 28817
28834: POP
28835: POP
// end ;
28836: PPOPN 2
28838: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28839: LD_EXP 66
28843: PUSH
28844: LD_EXP 115
28848: AND
28849: IFFALSE 29123
28851: GO 28853
28853: DISABLE
28854: LD_INT 0
28856: PPUSH
28857: PPUSH
28858: PPUSH
// begin i := rand ( 1 , 7 ) ;
28859: LD_ADDR_VAR 0 1
28863: PUSH
28864: LD_INT 1
28866: PPUSH
28867: LD_INT 7
28869: PPUSH
28870: CALL_OW 12
28874: ST_TO_ADDR
// case i of 1 :
28875: LD_VAR 0 1
28879: PUSH
28880: LD_INT 1
28882: DOUBLE
28883: EQUAL
28884: IFTRUE 28888
28886: GO 28898
28888: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28889: LD_STRING earthquake(getX(game), 0, 32)
28891: PPUSH
28892: CALL_OW 559
28896: GO 29123
28898: LD_INT 2
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28906
28904: GO 28920
28906: POP
// begin ToLua ( displayStucuk(); ) ;
28907: LD_STRING displayStucuk();
28909: PPUSH
28910: CALL_OW 559
// ResetFog ;
28914: CALL_OW 335
// end ; 3 :
28918: GO 29123
28920: LD_INT 3
28922: DOUBLE
28923: EQUAL
28924: IFTRUE 28928
28926: GO 29032
28928: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28929: LD_ADDR_VAR 0 2
28933: PUSH
28934: LD_INT 22
28936: PUSH
28937: LD_OWVAR 2
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 25
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PPUSH
28960: CALL_OW 69
28964: ST_TO_ADDR
// if not tmp then
28965: LD_VAR 0 2
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29123
// un := tmp [ rand ( 1 , tmp ) ] ;
28974: LD_ADDR_VAR 0 3
28978: PUSH
28979: LD_VAR 0 2
28983: PUSH
28984: LD_INT 1
28986: PPUSH
28987: LD_VAR 0 2
28991: PPUSH
28992: CALL_OW 12
28996: ARRAY
28997: ST_TO_ADDR
// if Crawls ( un ) then
28998: LD_VAR 0 3
29002: PPUSH
29003: CALL_OW 318
29007: IFFALSE 29018
// ComWalk ( un ) ;
29009: LD_VAR 0 3
29013: PPUSH
29014: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29018: LD_VAR 0 3
29022: PPUSH
29023: LD_INT 8
29025: PPUSH
29026: CALL_OW 336
// end ; 4 :
29030: GO 29123
29032: LD_INT 4
29034: DOUBLE
29035: EQUAL
29036: IFTRUE 29040
29038: GO 29101
29040: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_OWVAR 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 30
29060: PUSH
29061: LD_INT 29
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PPUSH
29072: CALL_OW 69
29076: ST_TO_ADDR
// if not tmp then
29077: LD_VAR 0 2
29081: NOT
29082: IFFALSE 29086
// exit ;
29084: GO 29123
// DestroyUnit ( tmp [ 1 ] ) ;
29086: LD_VAR 0 2
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: CALL_OW 65
// end ; 5 .. 7 :
29099: GO 29123
29101: LD_INT 5
29103: DOUBLE
29104: GREATEREQUAL
29105: IFFALSE 29113
29107: LD_INT 7
29109: DOUBLE
29110: LESSEQUAL
29111: IFTRUE 29115
29113: GO 29122
29115: POP
// StreamSibBomb ; end ;
29116: CALL 25373 0 0
29120: GO 29123
29122: POP
// end ;
29123: PPOPN 3
29125: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29126: LD_EXP 66
29130: PUSH
29131: LD_EXP 116
29135: AND
29136: IFFALSE 29292
29138: GO 29140
29140: DISABLE
29141: LD_INT 0
29143: PPUSH
29144: PPUSH
29145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29146: LD_ADDR_VAR 0 2
29150: PUSH
29151: LD_INT 81
29153: PUSH
29154: LD_OWVAR 2
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: LD_INT 21
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 21
29178: PUSH
29179: LD_INT 2
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PPUSH
29195: CALL_OW 69
29199: ST_TO_ADDR
// if not tmp then
29200: LD_VAR 0 2
29204: NOT
29205: IFFALSE 29209
// exit ;
29207: GO 29292
// p := 0 ;
29209: LD_ADDR_VAR 0 3
29213: PUSH
29214: LD_INT 0
29216: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29217: LD_INT 35
29219: PPUSH
29220: CALL_OW 67
// p := p + 1 ;
29224: LD_ADDR_VAR 0 3
29228: PUSH
29229: LD_VAR 0 3
29233: PUSH
29234: LD_INT 1
29236: PLUS
29237: ST_TO_ADDR
// for i in tmp do
29238: LD_ADDR_VAR 0 1
29242: PUSH
29243: LD_VAR 0 2
29247: PUSH
29248: FOR_IN
29249: IFFALSE 29280
// if GetLives ( i ) < 1000 then
29251: LD_VAR 0 1
29255: PPUSH
29256: CALL_OW 256
29260: PUSH
29261: LD_INT 1000
29263: LESS
29264: IFFALSE 29278
// SetLives ( i , 1000 ) ;
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_INT 1000
29273: PPUSH
29274: CALL_OW 234
29278: GO 29248
29280: POP
29281: POP
// until p > 20 ;
29282: LD_VAR 0 3
29286: PUSH
29287: LD_INT 20
29289: GREATER
29290: IFFALSE 29217
// end ;
29292: PPOPN 3
29294: END
// every 0 0$1 trigger StreamModeActive and sTime do
29295: LD_EXP 66
29299: PUSH
29300: LD_EXP 117
29304: AND
29305: IFFALSE 29340
29307: GO 29309
29309: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29310: LD_INT 28
29312: PPUSH
29313: LD_OWVAR 2
29317: PPUSH
29318: LD_INT 2
29320: PPUSH
29321: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29325: LD_INT 30
29327: PPUSH
29328: LD_OWVAR 2
29332: PPUSH
29333: LD_INT 2
29335: PPUSH
29336: CALL_OW 322
// end ;
29340: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29341: LD_EXP 66
29345: PUSH
29346: LD_EXP 118
29350: AND
29351: IFFALSE 29472
29353: GO 29355
29355: DISABLE
29356: LD_INT 0
29358: PPUSH
29359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29360: LD_ADDR_VAR 0 2
29364: PUSH
29365: LD_INT 22
29367: PUSH
29368: LD_OWVAR 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 21
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: LD_INT 23
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: ST_TO_ADDR
// if not tmp then
29414: LD_VAR 0 2
29418: NOT
29419: IFFALSE 29423
// exit ;
29421: GO 29472
// for i in tmp do
29423: LD_ADDR_VAR 0 1
29427: PUSH
29428: LD_VAR 0 2
29432: PUSH
29433: FOR_IN
29434: IFFALSE 29470
// begin if Crawls ( i ) then
29436: LD_VAR 0 1
29440: PPUSH
29441: CALL_OW 318
29445: IFFALSE 29456
// ComWalk ( i ) ;
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL_OW 138
// SetClass ( i , 2 ) ;
29456: LD_VAR 0 1
29460: PPUSH
29461: LD_INT 2
29463: PPUSH
29464: CALL_OW 336
// end ;
29468: GO 29433
29470: POP
29471: POP
// end ;
29472: PPOPN 2
29474: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29475: LD_EXP 66
29479: PUSH
29480: LD_EXP 119
29484: AND
29485: IFFALSE 29766
29487: GO 29489
29489: DISABLE
29490: LD_INT 0
29492: PPUSH
29493: PPUSH
29494: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29495: LD_OWVAR 2
29499: PPUSH
29500: LD_INT 9
29502: PPUSH
29503: LD_INT 1
29505: PPUSH
29506: LD_INT 1
29508: PPUSH
29509: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29513: LD_INT 9
29515: PPUSH
29516: LD_OWVAR 2
29520: PPUSH
29521: CALL_OW 343
// uc_side := 9 ;
29525: LD_ADDR_OWVAR 20
29529: PUSH
29530: LD_INT 9
29532: ST_TO_ADDR
// uc_nation := 2 ;
29533: LD_ADDR_OWVAR 21
29537: PUSH
29538: LD_INT 2
29540: ST_TO_ADDR
// hc_name := Dark Warrior ;
29541: LD_ADDR_OWVAR 26
29545: PUSH
29546: LD_STRING Dark Warrior
29548: ST_TO_ADDR
// hc_gallery :=  ;
29549: LD_ADDR_OWVAR 33
29553: PUSH
29554: LD_STRING 
29556: ST_TO_ADDR
// hc_noskilllimit := true ;
29557: LD_ADDR_OWVAR 76
29561: PUSH
29562: LD_INT 1
29564: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29565: LD_ADDR_OWVAR 31
29569: PUSH
29570: LD_INT 30
29572: PUSH
29573: LD_INT 30
29575: PUSH
29576: LD_INT 30
29578: PUSH
29579: LD_INT 30
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
// un := CreateHuman ;
29588: LD_ADDR_VAR 0 3
29592: PUSH
29593: CALL_OW 44
29597: ST_TO_ADDR
// hc_noskilllimit := false ;
29598: LD_ADDR_OWVAR 76
29602: PUSH
29603: LD_INT 0
29605: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29606: LD_VAR 0 3
29610: PPUSH
29611: LD_INT 1
29613: PPUSH
29614: CALL_OW 51
// p := 0 ;
29618: LD_ADDR_VAR 0 2
29622: PUSH
29623: LD_INT 0
29625: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29626: LD_INT 35
29628: PPUSH
29629: CALL_OW 67
// p := p + 1 ;
29633: LD_ADDR_VAR 0 2
29637: PUSH
29638: LD_VAR 0 2
29642: PUSH
29643: LD_INT 1
29645: PLUS
29646: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29647: LD_VAR 0 3
29651: PPUSH
29652: CALL_OW 256
29656: PUSH
29657: LD_INT 1000
29659: LESS
29660: IFFALSE 29674
// SetLives ( un , 1000 ) ;
29662: LD_VAR 0 3
29666: PPUSH
29667: LD_INT 1000
29669: PPUSH
29670: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29674: LD_VAR 0 3
29678: PPUSH
29679: LD_INT 81
29681: PUSH
29682: LD_OWVAR 2
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 91
29693: PUSH
29694: LD_VAR 0 3
29698: PUSH
29699: LD_INT 30
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PPUSH
29711: CALL_OW 69
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: CALL_OW 74
29725: PPUSH
29726: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29730: LD_VAR 0 2
29734: PUSH
29735: LD_INT 60
29737: GREATER
29738: PUSH
29739: LD_VAR 0 3
29743: PPUSH
29744: CALL_OW 301
29748: OR
29749: IFFALSE 29626
// if un then
29751: LD_VAR 0 3
29755: IFFALSE 29766
// RemoveUnit ( un ) ;
29757: LD_VAR 0 3
29761: PPUSH
29762: CALL_OW 64
// end ;
29766: PPOPN 3
29768: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29769: LD_INT 0
29771: PPUSH
// case cmd of 301 :
29772: LD_VAR 0 1
29776: PUSH
29777: LD_INT 301
29779: DOUBLE
29780: EQUAL
29781: IFTRUE 29785
29783: GO 29817
29785: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29786: LD_VAR 0 6
29790: PPUSH
29791: LD_VAR 0 7
29795: PPUSH
29796: LD_VAR 0 8
29800: PPUSH
29801: LD_VAR 0 4
29805: PPUSH
29806: LD_VAR 0 5
29810: PPUSH
29811: CALL 31018 0 5
29815: GO 29938
29817: LD_INT 302
29819: DOUBLE
29820: EQUAL
29821: IFTRUE 29825
29823: GO 29862
29825: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29826: LD_VAR 0 6
29830: PPUSH
29831: LD_VAR 0 7
29835: PPUSH
29836: LD_VAR 0 8
29840: PPUSH
29841: LD_VAR 0 9
29845: PPUSH
29846: LD_VAR 0 4
29850: PPUSH
29851: LD_VAR 0 5
29855: PPUSH
29856: CALL 31109 0 6
29860: GO 29938
29862: LD_INT 303
29864: DOUBLE
29865: EQUAL
29866: IFTRUE 29870
29868: GO 29907
29870: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29871: LD_VAR 0 6
29875: PPUSH
29876: LD_VAR 0 7
29880: PPUSH
29881: LD_VAR 0 8
29885: PPUSH
29886: LD_VAR 0 9
29890: PPUSH
29891: LD_VAR 0 4
29895: PPUSH
29896: LD_VAR 0 5
29900: PPUSH
29901: CALL 29943 0 6
29905: GO 29938
29907: LD_INT 304
29909: DOUBLE
29910: EQUAL
29911: IFTRUE 29915
29913: GO 29937
29915: POP
// hHackTeleport ( unit , x , y ) ; end ;
29916: LD_VAR 0 2
29920: PPUSH
29921: LD_VAR 0 4
29925: PPUSH
29926: LD_VAR 0 5
29930: PPUSH
29931: CALL 31702 0 3
29935: GO 29938
29937: POP
// end ;
29938: LD_VAR 0 12
29942: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29947: LD_VAR 0 1
29951: PUSH
29952: LD_INT 1
29954: LESS
29955: PUSH
29956: LD_VAR 0 1
29960: PUSH
29961: LD_INT 3
29963: GREATER
29964: OR
29965: PUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: LD_VAR 0 6
29975: PPUSH
29976: CALL_OW 428
29980: OR
29981: IFFALSE 29985
// exit ;
29983: GO 30705
// uc_side := your_side ;
29985: LD_ADDR_OWVAR 20
29989: PUSH
29990: LD_OWVAR 2
29994: ST_TO_ADDR
// uc_nation := nation ;
29995: LD_ADDR_OWVAR 21
29999: PUSH
30000: LD_VAR 0 1
30004: ST_TO_ADDR
// bc_level = 1 ;
30005: LD_ADDR_OWVAR 43
30009: PUSH
30010: LD_INT 1
30012: ST_TO_ADDR
// case btype of 1 :
30013: LD_VAR 0 2
30017: PUSH
30018: LD_INT 1
30020: DOUBLE
30021: EQUAL
30022: IFTRUE 30026
30024: GO 30037
30026: POP
// bc_type := b_depot ; 2 :
30027: LD_ADDR_OWVAR 42
30031: PUSH
30032: LD_INT 0
30034: ST_TO_ADDR
30035: GO 30649
30037: LD_INT 2
30039: DOUBLE
30040: EQUAL
30041: IFTRUE 30045
30043: GO 30056
30045: POP
// bc_type := b_warehouse ; 3 :
30046: LD_ADDR_OWVAR 42
30050: PUSH
30051: LD_INT 1
30053: ST_TO_ADDR
30054: GO 30649
30056: LD_INT 3
30058: DOUBLE
30059: EQUAL
30060: IFTRUE 30064
30062: GO 30075
30064: POP
// bc_type := b_lab ; 4 .. 9 :
30065: LD_ADDR_OWVAR 42
30069: PUSH
30070: LD_INT 6
30072: ST_TO_ADDR
30073: GO 30649
30075: LD_INT 4
30077: DOUBLE
30078: GREATEREQUAL
30079: IFFALSE 30087
30081: LD_INT 9
30083: DOUBLE
30084: LESSEQUAL
30085: IFTRUE 30089
30087: GO 30141
30089: POP
// begin bc_type := b_lab_half ;
30090: LD_ADDR_OWVAR 42
30094: PUSH
30095: LD_INT 7
30097: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30098: LD_ADDR_OWVAR 44
30102: PUSH
30103: LD_INT 10
30105: PUSH
30106: LD_INT 11
30108: PUSH
30109: LD_INT 12
30111: PUSH
30112: LD_INT 15
30114: PUSH
30115: LD_INT 14
30117: PUSH
30118: LD_INT 13
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: PUSH
30129: LD_VAR 0 2
30133: PUSH
30134: LD_INT 3
30136: MINUS
30137: ARRAY
30138: ST_TO_ADDR
// end ; 10 .. 13 :
30139: GO 30649
30141: LD_INT 10
30143: DOUBLE
30144: GREATEREQUAL
30145: IFFALSE 30153
30147: LD_INT 13
30149: DOUBLE
30150: LESSEQUAL
30151: IFTRUE 30155
30153: GO 30232
30155: POP
// begin bc_type := b_lab_full ;
30156: LD_ADDR_OWVAR 42
30160: PUSH
30161: LD_INT 8
30163: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30164: LD_ADDR_OWVAR 44
30168: PUSH
30169: LD_INT 10
30171: PUSH
30172: LD_INT 12
30174: PUSH
30175: LD_INT 14
30177: PUSH
30178: LD_INT 13
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: PUSH
30187: LD_VAR 0 2
30191: PUSH
30192: LD_INT 9
30194: MINUS
30195: ARRAY
30196: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30197: LD_ADDR_OWVAR 45
30201: PUSH
30202: LD_INT 11
30204: PUSH
30205: LD_INT 15
30207: PUSH
30208: LD_INT 12
30210: PUSH
30211: LD_INT 15
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: PUSH
30220: LD_VAR 0 2
30224: PUSH
30225: LD_INT 9
30227: MINUS
30228: ARRAY
30229: ST_TO_ADDR
// end ; 14 :
30230: GO 30649
30232: LD_INT 14
30234: DOUBLE
30235: EQUAL
30236: IFTRUE 30240
30238: GO 30251
30240: POP
// bc_type := b_workshop ; 15 :
30241: LD_ADDR_OWVAR 42
30245: PUSH
30246: LD_INT 2
30248: ST_TO_ADDR
30249: GO 30649
30251: LD_INT 15
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30270
30259: POP
// bc_type := b_factory ; 16 :
30260: LD_ADDR_OWVAR 42
30264: PUSH
30265: LD_INT 3
30267: ST_TO_ADDR
30268: GO 30649
30270: LD_INT 16
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30289
30278: POP
// bc_type := b_ext_gun ; 17 :
30279: LD_ADDR_OWVAR 42
30283: PUSH
30284: LD_INT 17
30286: ST_TO_ADDR
30287: GO 30649
30289: LD_INT 17
30291: DOUBLE
30292: EQUAL
30293: IFTRUE 30297
30295: GO 30325
30297: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30298: LD_ADDR_OWVAR 42
30302: PUSH
30303: LD_INT 19
30305: PUSH
30306: LD_INT 23
30308: PUSH
30309: LD_INT 19
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: PUSH
30317: LD_VAR 0 1
30321: ARRAY
30322: ST_TO_ADDR
30323: GO 30649
30325: LD_INT 18
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30333
30331: GO 30344
30333: POP
// bc_type := b_ext_radar ; 19 :
30334: LD_ADDR_OWVAR 42
30338: PUSH
30339: LD_INT 20
30341: ST_TO_ADDR
30342: GO 30649
30344: LD_INT 19
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30363
30352: POP
// bc_type := b_ext_radio ; 20 :
30353: LD_ADDR_OWVAR 42
30357: PUSH
30358: LD_INT 22
30360: ST_TO_ADDR
30361: GO 30649
30363: LD_INT 20
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30382
30371: POP
// bc_type := b_ext_siberium ; 21 :
30372: LD_ADDR_OWVAR 42
30376: PUSH
30377: LD_INT 21
30379: ST_TO_ADDR
30380: GO 30649
30382: LD_INT 21
30384: DOUBLE
30385: EQUAL
30386: IFTRUE 30390
30388: GO 30401
30390: POP
// bc_type := b_ext_computer ; 22 :
30391: LD_ADDR_OWVAR 42
30395: PUSH
30396: LD_INT 24
30398: ST_TO_ADDR
30399: GO 30649
30401: LD_INT 22
30403: DOUBLE
30404: EQUAL
30405: IFTRUE 30409
30407: GO 30420
30409: POP
// bc_type := b_ext_track ; 23 :
30410: LD_ADDR_OWVAR 42
30414: PUSH
30415: LD_INT 16
30417: ST_TO_ADDR
30418: GO 30649
30420: LD_INT 23
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30439
30428: POP
// bc_type := b_ext_laser ; 24 :
30429: LD_ADDR_OWVAR 42
30433: PUSH
30434: LD_INT 25
30436: ST_TO_ADDR
30437: GO 30649
30439: LD_INT 24
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30458
30447: POP
// bc_type := b_control_tower ; 25 :
30448: LD_ADDR_OWVAR 42
30452: PUSH
30453: LD_INT 36
30455: ST_TO_ADDR
30456: GO 30649
30458: LD_INT 25
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30477
30466: POP
// bc_type := b_breastwork ; 26 :
30467: LD_ADDR_OWVAR 42
30471: PUSH
30472: LD_INT 31
30474: ST_TO_ADDR
30475: GO 30649
30477: LD_INT 26
30479: DOUBLE
30480: EQUAL
30481: IFTRUE 30485
30483: GO 30496
30485: POP
// bc_type := b_bunker ; 27 :
30486: LD_ADDR_OWVAR 42
30490: PUSH
30491: LD_INT 32
30493: ST_TO_ADDR
30494: GO 30649
30496: LD_INT 27
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30515
30504: POP
// bc_type := b_turret ; 28 :
30505: LD_ADDR_OWVAR 42
30509: PUSH
30510: LD_INT 33
30512: ST_TO_ADDR
30513: GO 30649
30515: LD_INT 28
30517: DOUBLE
30518: EQUAL
30519: IFTRUE 30523
30521: GO 30534
30523: POP
// bc_type := b_armoury ; 29 :
30524: LD_ADDR_OWVAR 42
30528: PUSH
30529: LD_INT 4
30531: ST_TO_ADDR
30532: GO 30649
30534: LD_INT 29
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30553
30542: POP
// bc_type := b_barracks ; 30 :
30543: LD_ADDR_OWVAR 42
30547: PUSH
30548: LD_INT 5
30550: ST_TO_ADDR
30551: GO 30649
30553: LD_INT 30
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 30572
30561: POP
// bc_type := b_solar_power ; 31 :
30562: LD_ADDR_OWVAR 42
30566: PUSH
30567: LD_INT 27
30569: ST_TO_ADDR
30570: GO 30649
30572: LD_INT 31
30574: DOUBLE
30575: EQUAL
30576: IFTRUE 30580
30578: GO 30591
30580: POP
// bc_type := b_oil_power ; 32 :
30581: LD_ADDR_OWVAR 42
30585: PUSH
30586: LD_INT 26
30588: ST_TO_ADDR
30589: GO 30649
30591: LD_INT 32
30593: DOUBLE
30594: EQUAL
30595: IFTRUE 30599
30597: GO 30610
30599: POP
// bc_type := b_siberite_power ; 33 :
30600: LD_ADDR_OWVAR 42
30604: PUSH
30605: LD_INT 28
30607: ST_TO_ADDR
30608: GO 30649
30610: LD_INT 33
30612: DOUBLE
30613: EQUAL
30614: IFTRUE 30618
30616: GO 30629
30618: POP
// bc_type := b_oil_mine ; 34 :
30619: LD_ADDR_OWVAR 42
30623: PUSH
30624: LD_INT 29
30626: ST_TO_ADDR
30627: GO 30649
30629: LD_INT 34
30631: DOUBLE
30632: EQUAL
30633: IFTRUE 30637
30635: GO 30648
30637: POP
// bc_type := b_siberite_mine ; end ;
30638: LD_ADDR_OWVAR 42
30642: PUSH
30643: LD_INT 30
30645: ST_TO_ADDR
30646: GO 30649
30648: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30649: LD_ADDR_VAR 0 8
30653: PUSH
30654: LD_VAR 0 5
30658: PPUSH
30659: LD_VAR 0 6
30663: PPUSH
30664: LD_VAR 0 3
30668: PPUSH
30669: CALL_OW 47
30673: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30674: LD_OWVAR 42
30678: PUSH
30679: LD_INT 32
30681: PUSH
30682: LD_INT 33
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: IN
30689: IFFALSE 30705
// PlaceWeaponTurret ( b , weapon ) ;
30691: LD_VAR 0 8
30695: PPUSH
30696: LD_VAR 0 4
30700: PPUSH
30701: CALL_OW 431
// end ;
30705: LD_VAR 0 7
30709: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
30715: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30716: LD_ADDR_VAR 0 4
30720: PUSH
30721: LD_INT 22
30723: PUSH
30724: LD_OWVAR 2
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: LD_INT 30
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 30
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: LIST
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PPUSH
30765: CALL_OW 69
30769: ST_TO_ADDR
// if not tmp then
30770: LD_VAR 0 4
30774: NOT
30775: IFFALSE 30779
// exit ;
30777: GO 30838
// for i in tmp do
30779: LD_ADDR_VAR 0 2
30783: PUSH
30784: LD_VAR 0 4
30788: PUSH
30789: FOR_IN
30790: IFFALSE 30836
// for j = 1 to 3 do
30792: LD_ADDR_VAR 0 3
30796: PUSH
30797: DOUBLE
30798: LD_INT 1
30800: DEC
30801: ST_TO_ADDR
30802: LD_INT 3
30804: PUSH
30805: FOR_TO
30806: IFFALSE 30832
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30808: LD_VAR 0 2
30812: PPUSH
30813: CALL_OW 274
30817: PPUSH
30818: LD_VAR 0 3
30822: PPUSH
30823: LD_INT 99999
30825: PPUSH
30826: CALL_OW 277
30830: GO 30805
30832: POP
30833: POP
30834: GO 30789
30836: POP
30837: POP
// end ;
30838: LD_VAR 0 1
30842: RET
// export function hHackSetLevel10 ; var i , j ; begin
30843: LD_INT 0
30845: PPUSH
30846: PPUSH
30847: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30848: LD_ADDR_VAR 0 2
30852: PUSH
30853: LD_INT 21
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PPUSH
30863: CALL_OW 69
30867: PUSH
30868: FOR_IN
30869: IFFALSE 30921
// if IsSelected ( i ) then
30871: LD_VAR 0 2
30875: PPUSH
30876: CALL_OW 306
30880: IFFALSE 30919
// begin for j := 1 to 4 do
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: DOUBLE
30888: LD_INT 1
30890: DEC
30891: ST_TO_ADDR
30892: LD_INT 4
30894: PUSH
30895: FOR_TO
30896: IFFALSE 30917
// SetSkill ( i , j , 10 ) ;
30898: LD_VAR 0 2
30902: PPUSH
30903: LD_VAR 0 3
30907: PPUSH
30908: LD_INT 10
30910: PPUSH
30911: CALL_OW 237
30915: GO 30895
30917: POP
30918: POP
// end ;
30919: GO 30868
30921: POP
30922: POP
// end ;
30923: LD_VAR 0 1
30927: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30928: LD_INT 0
30930: PPUSH
30931: PPUSH
30932: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30933: LD_ADDR_VAR 0 2
30937: PUSH
30938: LD_INT 22
30940: PUSH
30941: LD_OWVAR 2
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 21
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PPUSH
30964: CALL_OW 69
30968: PUSH
30969: FOR_IN
30970: IFFALSE 31011
// begin for j := 1 to 4 do
30972: LD_ADDR_VAR 0 3
30976: PUSH
30977: DOUBLE
30978: LD_INT 1
30980: DEC
30981: ST_TO_ADDR
30982: LD_INT 4
30984: PUSH
30985: FOR_TO
30986: IFFALSE 31007
// SetSkill ( i , j , 10 ) ;
30988: LD_VAR 0 2
30992: PPUSH
30993: LD_VAR 0 3
30997: PPUSH
30998: LD_INT 10
31000: PPUSH
31001: CALL_OW 237
31005: GO 30985
31007: POP
31008: POP
// end ;
31009: GO 30969
31011: POP
31012: POP
// end ;
31013: LD_VAR 0 1
31017: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31018: LD_INT 0
31020: PPUSH
// uc_side := your_side ;
31021: LD_ADDR_OWVAR 20
31025: PUSH
31026: LD_OWVAR 2
31030: ST_TO_ADDR
// uc_nation := nation ;
31031: LD_ADDR_OWVAR 21
31035: PUSH
31036: LD_VAR 0 1
31040: ST_TO_ADDR
// InitHc ;
31041: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31045: LD_INT 0
31047: PPUSH
31048: LD_VAR 0 2
31052: PPUSH
31053: LD_VAR 0 3
31057: PPUSH
31058: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31062: LD_VAR 0 4
31066: PPUSH
31067: LD_VAR 0 5
31071: PPUSH
31072: CALL_OW 428
31076: PUSH
31077: LD_INT 0
31079: EQUAL
31080: IFFALSE 31104
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31082: CALL_OW 44
31086: PPUSH
31087: LD_VAR 0 4
31091: PPUSH
31092: LD_VAR 0 5
31096: PPUSH
31097: LD_INT 1
31099: PPUSH
31100: CALL_OW 48
// end ;
31104: LD_VAR 0 6
31108: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31109: LD_INT 0
31111: PPUSH
31112: PPUSH
// uc_side := your_side ;
31113: LD_ADDR_OWVAR 20
31117: PUSH
31118: LD_OWVAR 2
31122: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31123: LD_VAR 0 1
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: LD_INT 4
31139: PUSH
31140: LD_INT 5
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: IN
31150: IFFALSE 31162
// uc_nation := nation_american else
31152: LD_ADDR_OWVAR 21
31156: PUSH
31157: LD_INT 1
31159: ST_TO_ADDR
31160: GO 31205
// if chassis in [ 11 , 12 , 13 , 14 ] then
31162: LD_VAR 0 1
31166: PUSH
31167: LD_INT 11
31169: PUSH
31170: LD_INT 12
31172: PUSH
31173: LD_INT 13
31175: PUSH
31176: LD_INT 14
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: IN
31185: IFFALSE 31197
// uc_nation := nation_arabian else
31187: LD_ADDR_OWVAR 21
31191: PUSH
31192: LD_INT 2
31194: ST_TO_ADDR
31195: GO 31205
// uc_nation := nation_russian ;
31197: LD_ADDR_OWVAR 21
31201: PUSH
31202: LD_INT 3
31204: ST_TO_ADDR
// vc_chassis := chassis ;
31205: LD_ADDR_OWVAR 37
31209: PUSH
31210: LD_VAR 0 1
31214: ST_TO_ADDR
// vc_engine := engine ;
31215: LD_ADDR_OWVAR 39
31219: PUSH
31220: LD_VAR 0 2
31224: ST_TO_ADDR
// vc_control := control ;
31225: LD_ADDR_OWVAR 38
31229: PUSH
31230: LD_VAR 0 3
31234: ST_TO_ADDR
// vc_weapon := weapon ;
31235: LD_ADDR_OWVAR 40
31239: PUSH
31240: LD_VAR 0 4
31244: ST_TO_ADDR
// un := CreateVehicle ;
31245: LD_ADDR_VAR 0 8
31249: PUSH
31250: CALL_OW 45
31254: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31255: LD_VAR 0 8
31259: PPUSH
31260: LD_INT 0
31262: PPUSH
31263: LD_INT 5
31265: PPUSH
31266: CALL_OW 12
31270: PPUSH
31271: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_VAR 0 5
31284: PPUSH
31285: LD_VAR 0 6
31289: PPUSH
31290: LD_INT 1
31292: PPUSH
31293: CALL_OW 48
// end ;
31297: LD_VAR 0 7
31301: RET
// export hInvincible ; every 1 do
31302: GO 31304
31304: DISABLE
// hInvincible := [ ] ;
31305: LD_ADDR_EXP 120
31309: PUSH
31310: EMPTY
31311: ST_TO_ADDR
31312: END
// every 10 do var i ;
31313: GO 31315
31315: DISABLE
31316: LD_INT 0
31318: PPUSH
// begin enable ;
31319: ENABLE
// if not hInvincible then
31320: LD_EXP 120
31324: NOT
31325: IFFALSE 31329
// exit ;
31327: GO 31373
// for i in hInvincible do
31329: LD_ADDR_VAR 0 1
31333: PUSH
31334: LD_EXP 120
31338: PUSH
31339: FOR_IN
31340: IFFALSE 31371
// if GetLives ( i ) < 1000 then
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 256
31351: PUSH
31352: LD_INT 1000
31354: LESS
31355: IFFALSE 31369
// SetLives ( i , 1000 ) ;
31357: LD_VAR 0 1
31361: PPUSH
31362: LD_INT 1000
31364: PPUSH
31365: CALL_OW 234
31369: GO 31339
31371: POP
31372: POP
// end ;
31373: PPOPN 1
31375: END
// export function hHackInvincible ; var i ; begin
31376: LD_INT 0
31378: PPUSH
31379: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31380: LD_ADDR_VAR 0 2
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 21
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 21
31400: PUSH
31401: LD_INT 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: LIST
31412: PPUSH
31413: CALL_OW 69
31417: PUSH
31418: FOR_IN
31419: IFFALSE 31480
// if IsSelected ( i ) then
31421: LD_VAR 0 2
31425: PPUSH
31426: CALL_OW 306
31430: IFFALSE 31478
// begin if i in hInvincible then
31432: LD_VAR 0 2
31436: PUSH
31437: LD_EXP 120
31441: IN
31442: IFFALSE 31462
// hInvincible := hInvincible diff i else
31444: LD_ADDR_EXP 120
31448: PUSH
31449: LD_EXP 120
31453: PUSH
31454: LD_VAR 0 2
31458: DIFF
31459: ST_TO_ADDR
31460: GO 31478
// hInvincible := hInvincible union i ;
31462: LD_ADDR_EXP 120
31466: PUSH
31467: LD_EXP 120
31471: PUSH
31472: LD_VAR 0 2
31476: UNION
31477: ST_TO_ADDR
// end ;
31478: GO 31418
31480: POP
31481: POP
// end ;
31482: LD_VAR 0 1
31486: RET
// export function hHackInvisible ; var i , j ; begin
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
31491: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31492: LD_ADDR_VAR 0 2
31496: PUSH
31497: LD_INT 21
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PPUSH
31507: CALL_OW 69
31511: PUSH
31512: FOR_IN
31513: IFFALSE 31537
// if IsSelected ( i ) then
31515: LD_VAR 0 2
31519: PPUSH
31520: CALL_OW 306
31524: IFFALSE 31535
// ComForceInvisible ( i ) ;
31526: LD_VAR 0 2
31530: PPUSH
31531: CALL_OW 496
31535: GO 31512
31537: POP
31538: POP
// end ;
31539: LD_VAR 0 1
31543: RET
// export function hHackChangeYourSide ; begin
31544: LD_INT 0
31546: PPUSH
// if your_side = 8 then
31547: LD_OWVAR 2
31551: PUSH
31552: LD_INT 8
31554: EQUAL
31555: IFFALSE 31567
// your_side := 0 else
31557: LD_ADDR_OWVAR 2
31561: PUSH
31562: LD_INT 0
31564: ST_TO_ADDR
31565: GO 31581
// your_side := your_side + 1 ;
31567: LD_ADDR_OWVAR 2
31571: PUSH
31572: LD_OWVAR 2
31576: PUSH
31577: LD_INT 1
31579: PLUS
31580: ST_TO_ADDR
// end ;
31581: LD_VAR 0 1
31585: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31586: LD_INT 0
31588: PPUSH
31589: PPUSH
31590: PPUSH
// for i in all_units do
31591: LD_ADDR_VAR 0 2
31595: PUSH
31596: LD_OWVAR 3
31600: PUSH
31601: FOR_IN
31602: IFFALSE 31680
// if IsSelected ( i ) then
31604: LD_VAR 0 2
31608: PPUSH
31609: CALL_OW 306
31613: IFFALSE 31678
// begin j := GetSide ( i ) ;
31615: LD_ADDR_VAR 0 3
31619: PUSH
31620: LD_VAR 0 2
31624: PPUSH
31625: CALL_OW 255
31629: ST_TO_ADDR
// if j = 8 then
31630: LD_VAR 0 3
31634: PUSH
31635: LD_INT 8
31637: EQUAL
31638: IFFALSE 31650
// j := 0 else
31640: LD_ADDR_VAR 0 3
31644: PUSH
31645: LD_INT 0
31647: ST_TO_ADDR
31648: GO 31664
// j := j + 1 ;
31650: LD_ADDR_VAR 0 3
31654: PUSH
31655: LD_VAR 0 3
31659: PUSH
31660: LD_INT 1
31662: PLUS
31663: ST_TO_ADDR
// SetSide ( i , j ) ;
31664: LD_VAR 0 2
31668: PPUSH
31669: LD_VAR 0 3
31673: PPUSH
31674: CALL_OW 235
// end ;
31678: GO 31601
31680: POP
31681: POP
// end ;
31682: LD_VAR 0 1
31686: RET
// export function hHackFog ; begin
31687: LD_INT 0
31689: PPUSH
// FogOff ( true ) ;
31690: LD_INT 1
31692: PPUSH
31693: CALL_OW 344
// end ;
31697: LD_VAR 0 1
31701: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31702: LD_INT 0
31704: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31705: LD_VAR 0 1
31709: PPUSH
31710: LD_VAR 0 2
31714: PPUSH
31715: LD_VAR 0 3
31719: PPUSH
31720: LD_INT 1
31722: PPUSH
31723: LD_INT 1
31725: PPUSH
31726: CALL_OW 483
// CenterOnXY ( x , y ) ;
31730: LD_VAR 0 2
31734: PPUSH
31735: LD_VAR 0 3
31739: PPUSH
31740: CALL_OW 84
// end ; end_of_file
31744: LD_VAR 0 4
31748: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
31749: LD_VAR 0 1
31753: PUSH
31754: LD_INT 200
31756: DOUBLE
31757: GREATEREQUAL
31758: IFFALSE 31766
31760: LD_INT 299
31762: DOUBLE
31763: LESSEQUAL
31764: IFTRUE 31768
31766: GO 31800
31768: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
31769: LD_VAR 0 1
31773: PPUSH
31774: LD_VAR 0 2
31778: PPUSH
31779: LD_VAR 0 3
31783: PPUSH
31784: LD_VAR 0 4
31788: PPUSH
31789: LD_VAR 0 5
31793: PPUSH
31794: CALL 32044 0 5
31798: GO 31877
31800: LD_INT 300
31802: DOUBLE
31803: GREATEREQUAL
31804: IFFALSE 31812
31806: LD_INT 399
31808: DOUBLE
31809: LESSEQUAL
31810: IFTRUE 31814
31812: GO 31876
31814: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
31815: LD_VAR 0 1
31819: PPUSH
31820: LD_VAR 0 2
31824: PPUSH
31825: LD_VAR 0 3
31829: PPUSH
31830: LD_VAR 0 4
31834: PPUSH
31835: LD_VAR 0 5
31839: PPUSH
31840: LD_VAR 0 6
31844: PPUSH
31845: LD_VAR 0 7
31849: PPUSH
31850: LD_VAR 0 8
31854: PPUSH
31855: LD_VAR 0 9
31859: PPUSH
31860: LD_VAR 0 10
31864: PPUSH
31865: LD_VAR 0 11
31869: PPUSH
31870: CALL 29769 0 11
31874: GO 31877
31876: POP
// end ;
31877: PPOPN 11
31879: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
31880: LD_VAR 0 1
31884: PPUSH
31885: LD_VAR 0 2
31889: PPUSH
31890: LD_VAR 0 3
31894: PPUSH
31895: LD_VAR 0 4
31899: PPUSH
31900: LD_VAR 0 5
31904: PPUSH
31905: CALL 32026 0 5
// end ; end_of_file end_of_file
31909: PPOPN 5
31911: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31912: LD_INT 0
31914: PPUSH
31915: PPUSH
31916: PPUSH
31917: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31918: LD_VAR 0 1
31922: PPUSH
31923: CALL_OW 264
31927: PUSH
31928: LD_EXP 137
31932: EQUAL
31933: IFFALSE 32005
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31935: LD_INT 68
31937: PPUSH
31938: LD_VAR 0 1
31942: PPUSH
31943: CALL_OW 255
31947: PPUSH
31948: CALL_OW 321
31952: PUSH
31953: LD_INT 2
31955: EQUAL
31956: IFFALSE 31968
// eff := 70 else
31958: LD_ADDR_VAR 0 4
31962: PUSH
31963: LD_INT 70
31965: ST_TO_ADDR
31966: GO 31976
// eff := 30 ;
31968: LD_ADDR_VAR 0 4
31972: PUSH
31973: LD_INT 30
31975: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31976: LD_VAR 0 1
31980: PPUSH
31981: CALL_OW 250
31985: PPUSH
31986: LD_VAR 0 1
31990: PPUSH
31991: CALL_OW 251
31995: PPUSH
31996: LD_VAR 0 4
32000: PPUSH
32001: CALL_OW 495
// end ; end ;
32005: LD_VAR 0 2
32009: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32010: LD_INT 0
32012: PPUSH
// end ;
32013: LD_VAR 0 4
32017: RET
// export function SOS_Command ( cmd ) ; begin
32018: LD_INT 0
32020: PPUSH
// end ;
32021: LD_VAR 0 2
32025: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32026: LD_INT 0
32028: PPUSH
// if cmd = 121 then
32029: LD_VAR 0 1
32033: PUSH
32034: LD_INT 121
32036: EQUAL
32037: IFFALSE 32039
// end ;
32039: LD_VAR 0 6
32043: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32044: LD_INT 0
32046: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32047: LD_VAR 0 1
32051: PUSH
32052: LD_INT 250
32054: EQUAL
32055: PUSH
32056: LD_VAR 0 2
32060: PPUSH
32061: CALL_OW 264
32065: PUSH
32066: LD_EXP 140
32070: EQUAL
32071: AND
32072: IFFALSE 32093
// MinerPlaceMine ( unit , x , y ) ;
32074: LD_VAR 0 2
32078: PPUSH
32079: LD_VAR 0 4
32083: PPUSH
32084: LD_VAR 0 5
32088: PPUSH
32089: CALL 34442 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32093: LD_VAR 0 1
32097: PUSH
32098: LD_INT 251
32100: EQUAL
32101: PUSH
32102: LD_VAR 0 2
32106: PPUSH
32107: CALL_OW 264
32111: PUSH
32112: LD_EXP 140
32116: EQUAL
32117: AND
32118: IFFALSE 32139
// MinerDetonateMine ( unit , x , y ) ;
32120: LD_VAR 0 2
32124: PPUSH
32125: LD_VAR 0 4
32129: PPUSH
32130: LD_VAR 0 5
32134: PPUSH
32135: CALL 34719 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32139: LD_VAR 0 1
32143: PUSH
32144: LD_INT 252
32146: EQUAL
32147: PUSH
32148: LD_VAR 0 2
32152: PPUSH
32153: CALL_OW 264
32157: PUSH
32158: LD_EXP 140
32162: EQUAL
32163: AND
32164: IFFALSE 32185
// MinerCreateMinefield ( unit , x , y ) ;
32166: LD_VAR 0 2
32170: PPUSH
32171: LD_VAR 0 4
32175: PPUSH
32176: LD_VAR 0 5
32180: PPUSH
32181: CALL 35136 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32185: LD_VAR 0 1
32189: PUSH
32190: LD_INT 253
32192: EQUAL
32193: PUSH
32194: LD_VAR 0 2
32198: PPUSH
32199: CALL_OW 257
32203: PUSH
32204: LD_INT 5
32206: EQUAL
32207: AND
32208: IFFALSE 32229
// ComBinocular ( unit , x , y ) ;
32210: LD_VAR 0 2
32214: PPUSH
32215: LD_VAR 0 4
32219: PPUSH
32220: LD_VAR 0 5
32224: PPUSH
32225: CALL 35507 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32229: LD_VAR 0 1
32233: PUSH
32234: LD_INT 254
32236: EQUAL
32237: PUSH
32238: LD_VAR 0 2
32242: PPUSH
32243: CALL_OW 264
32247: PUSH
32248: LD_EXP 135
32252: EQUAL
32253: AND
32254: PUSH
32255: LD_VAR 0 3
32259: PPUSH
32260: CALL_OW 263
32264: PUSH
32265: LD_INT 3
32267: EQUAL
32268: AND
32269: IFFALSE 32285
// HackDestroyVehicle ( unit , selectedUnit ) ;
32271: LD_VAR 0 2
32275: PPUSH
32276: LD_VAR 0 3
32280: PPUSH
32281: CALL 33802 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32285: LD_VAR 0 1
32289: PUSH
32290: LD_INT 255
32292: EQUAL
32293: PUSH
32294: LD_VAR 0 2
32298: PPUSH
32299: CALL_OW 264
32303: PUSH
32304: LD_INT 14
32306: PUSH
32307: LD_INT 53
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: IN
32314: AND
32315: PUSH
32316: LD_VAR 0 4
32320: PPUSH
32321: LD_VAR 0 5
32325: PPUSH
32326: CALL_OW 488
32330: AND
32331: IFFALSE 32355
// CutTreeXYR ( unit , x , y , 12 ) ;
32333: LD_VAR 0 2
32337: PPUSH
32338: LD_VAR 0 4
32342: PPUSH
32343: LD_VAR 0 5
32347: PPUSH
32348: LD_INT 12
32350: PPUSH
32351: CALL 32368 0 4
// end ;
32355: LD_VAR 0 6
32359: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32360: LD_INT 0
32362: PPUSH
// end ;
32363: LD_VAR 0 4
32367: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32368: LD_INT 0
32370: PPUSH
32371: PPUSH
32372: PPUSH
32373: PPUSH
32374: PPUSH
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32379: LD_VAR 0 1
32383: NOT
32384: PUSH
32385: LD_VAR 0 2
32389: PPUSH
32390: LD_VAR 0 3
32394: PPUSH
32395: CALL_OW 488
32399: NOT
32400: OR
32401: PUSH
32402: LD_VAR 0 4
32406: NOT
32407: OR
32408: IFFALSE 32412
// exit ;
32410: GO 32752
// list := [ ] ;
32412: LD_ADDR_VAR 0 13
32416: PUSH
32417: EMPTY
32418: ST_TO_ADDR
// if x - r < 0 then
32419: LD_VAR 0 2
32423: PUSH
32424: LD_VAR 0 4
32428: MINUS
32429: PUSH
32430: LD_INT 0
32432: LESS
32433: IFFALSE 32445
// min_x := 0 else
32435: LD_ADDR_VAR 0 7
32439: PUSH
32440: LD_INT 0
32442: ST_TO_ADDR
32443: GO 32461
// min_x := x - r ;
32445: LD_ADDR_VAR 0 7
32449: PUSH
32450: LD_VAR 0 2
32454: PUSH
32455: LD_VAR 0 4
32459: MINUS
32460: ST_TO_ADDR
// if y - r < 0 then
32461: LD_VAR 0 3
32465: PUSH
32466: LD_VAR 0 4
32470: MINUS
32471: PUSH
32472: LD_INT 0
32474: LESS
32475: IFFALSE 32487
// min_y := 0 else
32477: LD_ADDR_VAR 0 8
32481: PUSH
32482: LD_INT 0
32484: ST_TO_ADDR
32485: GO 32503
// min_y := y - r ;
32487: LD_ADDR_VAR 0 8
32491: PUSH
32492: LD_VAR 0 3
32496: PUSH
32497: LD_VAR 0 4
32501: MINUS
32502: ST_TO_ADDR
// max_x := x + r ;
32503: LD_ADDR_VAR 0 9
32507: PUSH
32508: LD_VAR 0 2
32512: PUSH
32513: LD_VAR 0 4
32517: PLUS
32518: ST_TO_ADDR
// max_y := y + r ;
32519: LD_ADDR_VAR 0 10
32523: PUSH
32524: LD_VAR 0 3
32528: PUSH
32529: LD_VAR 0 4
32533: PLUS
32534: ST_TO_ADDR
// for _x = min_x to max_x do
32535: LD_ADDR_VAR 0 11
32539: PUSH
32540: DOUBLE
32541: LD_VAR 0 7
32545: DEC
32546: ST_TO_ADDR
32547: LD_VAR 0 9
32551: PUSH
32552: FOR_TO
32553: IFFALSE 32670
// for _y = min_y to max_y do
32555: LD_ADDR_VAR 0 12
32559: PUSH
32560: DOUBLE
32561: LD_VAR 0 8
32565: DEC
32566: ST_TO_ADDR
32567: LD_VAR 0 10
32571: PUSH
32572: FOR_TO
32573: IFFALSE 32666
// begin if not ValidHex ( _x , _y ) then
32575: LD_VAR 0 11
32579: PPUSH
32580: LD_VAR 0 12
32584: PPUSH
32585: CALL_OW 488
32589: NOT
32590: IFFALSE 32594
// continue ;
32592: GO 32572
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32594: LD_VAR 0 11
32598: PPUSH
32599: LD_VAR 0 12
32603: PPUSH
32604: CALL_OW 351
32608: PUSH
32609: LD_VAR 0 11
32613: PPUSH
32614: LD_VAR 0 12
32618: PPUSH
32619: CALL_OW 554
32623: AND
32624: IFFALSE 32664
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32626: LD_ADDR_VAR 0 13
32630: PUSH
32631: LD_VAR 0 13
32635: PPUSH
32636: LD_VAR 0 13
32640: PUSH
32641: LD_INT 1
32643: PLUS
32644: PPUSH
32645: LD_VAR 0 11
32649: PUSH
32650: LD_VAR 0 12
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PPUSH
32659: CALL_OW 2
32663: ST_TO_ADDR
// end ;
32664: GO 32572
32666: POP
32667: POP
32668: GO 32552
32670: POP
32671: POP
// if not list then
32672: LD_VAR 0 13
32676: NOT
32677: IFFALSE 32681
// exit ;
32679: GO 32752
// for i in list do
32681: LD_ADDR_VAR 0 6
32685: PUSH
32686: LD_VAR 0 13
32690: PUSH
32691: FOR_IN
32692: IFFALSE 32750
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32694: LD_VAR 0 1
32698: PPUSH
32699: LD_STRING M
32701: PUSH
32702: LD_VAR 0 6
32706: PUSH
32707: LD_INT 1
32709: ARRAY
32710: PUSH
32711: LD_VAR 0 6
32715: PUSH
32716: LD_INT 2
32718: ARRAY
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: PUSH
32741: EMPTY
32742: LIST
32743: PPUSH
32744: CALL_OW 447
32748: GO 32691
32750: POP
32751: POP
// end ;
32752: LD_VAR 0 5
32756: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32757: LD_EXP 123
32761: NOT
32762: IFFALSE 32812
32764: GO 32766
32766: DISABLE
// begin initHack := true ;
32767: LD_ADDR_EXP 123
32771: PUSH
32772: LD_INT 1
32774: ST_TO_ADDR
// hackTanks := [ ] ;
32775: LD_ADDR_EXP 124
32779: PUSH
32780: EMPTY
32781: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32782: LD_ADDR_EXP 125
32786: PUSH
32787: EMPTY
32788: ST_TO_ADDR
// hackLimit := 3 ;
32789: LD_ADDR_EXP 126
32793: PUSH
32794: LD_INT 3
32796: ST_TO_ADDR
// hackDist := 12 ;
32797: LD_ADDR_EXP 127
32801: PUSH
32802: LD_INT 12
32804: ST_TO_ADDR
// hackCounter := [ ] ;
32805: LD_ADDR_EXP 128
32809: PUSH
32810: EMPTY
32811: ST_TO_ADDR
// end ;
32812: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32813: LD_EXP 123
32817: PUSH
32818: LD_INT 34
32820: PUSH
32821: LD_EXP 135
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PPUSH
32830: CALL_OW 69
32834: AND
32835: IFFALSE 33090
32837: GO 32839
32839: DISABLE
32840: LD_INT 0
32842: PPUSH
32843: PPUSH
// begin enable ;
32844: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32845: LD_ADDR_VAR 0 1
32849: PUSH
32850: LD_INT 34
32852: PUSH
32853: LD_EXP 135
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PPUSH
32862: CALL_OW 69
32866: PUSH
32867: FOR_IN
32868: IFFALSE 33088
// begin if not i in hackTanks then
32870: LD_VAR 0 1
32874: PUSH
32875: LD_EXP 124
32879: IN
32880: NOT
32881: IFFALSE 32964
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32883: LD_ADDR_EXP 124
32887: PUSH
32888: LD_EXP 124
32892: PPUSH
32893: LD_EXP 124
32897: PUSH
32898: LD_INT 1
32900: PLUS
32901: PPUSH
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL_OW 1
32911: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32912: LD_ADDR_EXP 125
32916: PUSH
32917: LD_EXP 125
32921: PPUSH
32922: LD_EXP 125
32926: PUSH
32927: LD_INT 1
32929: PLUS
32930: PPUSH
32931: EMPTY
32932: PPUSH
32933: CALL_OW 1
32937: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32938: LD_ADDR_EXP 128
32942: PUSH
32943: LD_EXP 128
32947: PPUSH
32948: LD_EXP 128
32952: PUSH
32953: LD_INT 1
32955: PLUS
32956: PPUSH
32957: EMPTY
32958: PPUSH
32959: CALL_OW 1
32963: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32964: LD_VAR 0 1
32968: PPUSH
32969: CALL_OW 302
32973: NOT
32974: IFFALSE 32987
// begin HackUnlinkAll ( i ) ;
32976: LD_VAR 0 1
32980: PPUSH
32981: CALL 33093 0 1
// continue ;
32985: GO 32867
// end ; HackCheckCapturedStatus ( i ) ;
32987: LD_VAR 0 1
32991: PPUSH
32992: CALL 33536 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32996: LD_ADDR_VAR 0 2
33000: PUSH
33001: LD_INT 81
33003: PUSH
33004: LD_VAR 0 1
33008: PPUSH
33009: CALL_OW 255
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 33
33020: PUSH
33021: LD_INT 3
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 91
33030: PUSH
33031: LD_VAR 0 1
33035: PUSH
33036: LD_EXP 127
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 50
33048: PUSH
33049: EMPTY
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: PPUSH
33058: CALL_OW 69
33062: ST_TO_ADDR
// if not tmp then
33063: LD_VAR 0 2
33067: NOT
33068: IFFALSE 33072
// continue ;
33070: GO 32867
// HackLink ( i , tmp ) ;
33072: LD_VAR 0 1
33076: PPUSH
33077: LD_VAR 0 2
33081: PPUSH
33082: CALL 33229 0 2
// end ;
33086: GO 32867
33088: POP
33089: POP
// end ;
33090: PPOPN 2
33092: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33093: LD_INT 0
33095: PPUSH
33096: PPUSH
33097: PPUSH
// if not hack in hackTanks then
33098: LD_VAR 0 1
33102: PUSH
33103: LD_EXP 124
33107: IN
33108: NOT
33109: IFFALSE 33113
// exit ;
33111: GO 33224
// index := GetElementIndex ( hackTanks , hack ) ;
33113: LD_ADDR_VAR 0 4
33117: PUSH
33118: LD_EXP 124
33122: PPUSH
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL 40802 0 2
33132: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33133: LD_EXP 125
33137: PUSH
33138: LD_VAR 0 4
33142: ARRAY
33143: IFFALSE 33224
// begin for i in hackTanksCaptured [ index ] do
33145: LD_ADDR_VAR 0 3
33149: PUSH
33150: LD_EXP 125
33154: PUSH
33155: LD_VAR 0 4
33159: ARRAY
33160: PUSH
33161: FOR_IN
33162: IFFALSE 33188
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33164: LD_VAR 0 3
33168: PUSH
33169: LD_INT 1
33171: ARRAY
33172: PPUSH
33173: LD_VAR 0 3
33177: PUSH
33178: LD_INT 2
33180: ARRAY
33181: PPUSH
33182: CALL_OW 235
33186: GO 33161
33188: POP
33189: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33190: LD_ADDR_EXP 125
33194: PUSH
33195: LD_EXP 125
33199: PPUSH
33200: LD_VAR 0 4
33204: PPUSH
33205: EMPTY
33206: PPUSH
33207: CALL_OW 1
33211: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33212: LD_VAR 0 1
33216: PPUSH
33217: LD_INT 0
33219: PPUSH
33220: CALL_OW 505
// end ; end ;
33224: LD_VAR 0 2
33228: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33229: LD_INT 0
33231: PPUSH
33232: PPUSH
33233: PPUSH
// if not hack in hackTanks or not vehicles then
33234: LD_VAR 0 1
33238: PUSH
33239: LD_EXP 124
33243: IN
33244: NOT
33245: PUSH
33246: LD_VAR 0 2
33250: NOT
33251: OR
33252: IFFALSE 33256
// exit ;
33254: GO 33531
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33256: LD_ADDR_VAR 0 2
33260: PUSH
33261: LD_VAR 0 1
33265: PPUSH
33266: LD_VAR 0 2
33270: PPUSH
33271: LD_INT 1
33273: PPUSH
33274: LD_INT 1
33276: PPUSH
33277: CALL 41452 0 4
33281: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33282: LD_ADDR_VAR 0 5
33286: PUSH
33287: LD_EXP 124
33291: PPUSH
33292: LD_VAR 0 1
33296: PPUSH
33297: CALL 40802 0 2
33301: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33302: LD_EXP 125
33306: PUSH
33307: LD_VAR 0 5
33311: ARRAY
33312: PUSH
33313: LD_EXP 126
33317: LESS
33318: IFFALSE 33507
// begin for i := 1 to vehicles do
33320: LD_ADDR_VAR 0 4
33324: PUSH
33325: DOUBLE
33326: LD_INT 1
33328: DEC
33329: ST_TO_ADDR
33330: LD_VAR 0 2
33334: PUSH
33335: FOR_TO
33336: IFFALSE 33505
// begin if hackTanksCaptured [ index ] = hackLimit then
33338: LD_EXP 125
33342: PUSH
33343: LD_VAR 0 5
33347: ARRAY
33348: PUSH
33349: LD_EXP 126
33353: EQUAL
33354: IFFALSE 33358
// break ;
33356: GO 33505
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33358: LD_ADDR_EXP 128
33362: PUSH
33363: LD_EXP 128
33367: PPUSH
33368: LD_VAR 0 5
33372: PPUSH
33373: LD_EXP 128
33377: PUSH
33378: LD_VAR 0 5
33382: ARRAY
33383: PUSH
33384: LD_INT 1
33386: PLUS
33387: PPUSH
33388: CALL_OW 1
33392: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33393: LD_ADDR_EXP 125
33397: PUSH
33398: LD_EXP 125
33402: PPUSH
33403: LD_VAR 0 5
33407: PUSH
33408: LD_EXP 125
33412: PUSH
33413: LD_VAR 0 5
33417: ARRAY
33418: PUSH
33419: LD_INT 1
33421: PLUS
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PPUSH
33427: LD_VAR 0 2
33431: PUSH
33432: LD_VAR 0 4
33436: ARRAY
33437: PUSH
33438: LD_VAR 0 2
33442: PUSH
33443: LD_VAR 0 4
33447: ARRAY
33448: PPUSH
33449: CALL_OW 255
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PPUSH
33458: CALL 41017 0 3
33462: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33463: LD_VAR 0 2
33467: PUSH
33468: LD_VAR 0 4
33472: ARRAY
33473: PPUSH
33474: LD_VAR 0 1
33478: PPUSH
33479: CALL_OW 255
33483: PPUSH
33484: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33488: LD_VAR 0 2
33492: PUSH
33493: LD_VAR 0 4
33497: ARRAY
33498: PPUSH
33499: CALL_OW 141
// end ;
33503: GO 33335
33505: POP
33506: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33507: LD_VAR 0 1
33511: PPUSH
33512: LD_EXP 125
33516: PUSH
33517: LD_VAR 0 5
33521: ARRAY
33522: PUSH
33523: LD_INT 0
33525: PLUS
33526: PPUSH
33527: CALL_OW 505
// end ;
33531: LD_VAR 0 3
33535: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33536: LD_INT 0
33538: PPUSH
33539: PPUSH
33540: PPUSH
33541: PPUSH
// if not hack in hackTanks then
33542: LD_VAR 0 1
33546: PUSH
33547: LD_EXP 124
33551: IN
33552: NOT
33553: IFFALSE 33557
// exit ;
33555: GO 33797
// index := GetElementIndex ( hackTanks , hack ) ;
33557: LD_ADDR_VAR 0 4
33561: PUSH
33562: LD_EXP 124
33566: PPUSH
33567: LD_VAR 0 1
33571: PPUSH
33572: CALL 40802 0 2
33576: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33577: LD_ADDR_VAR 0 3
33581: PUSH
33582: DOUBLE
33583: LD_EXP 125
33587: PUSH
33588: LD_VAR 0 4
33592: ARRAY
33593: INC
33594: ST_TO_ADDR
33595: LD_INT 1
33597: PUSH
33598: FOR_DOWNTO
33599: IFFALSE 33771
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33601: LD_ADDR_VAR 0 5
33605: PUSH
33606: LD_EXP 125
33610: PUSH
33611: LD_VAR 0 4
33615: ARRAY
33616: PUSH
33617: LD_VAR 0 3
33621: ARRAY
33622: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33623: LD_VAR 0 5
33627: PUSH
33628: LD_INT 1
33630: ARRAY
33631: PPUSH
33632: CALL_OW 302
33636: NOT
33637: PUSH
33638: LD_VAR 0 5
33642: PUSH
33643: LD_INT 1
33645: ARRAY
33646: PPUSH
33647: CALL_OW 255
33651: PUSH
33652: LD_VAR 0 1
33656: PPUSH
33657: CALL_OW 255
33661: NONEQUAL
33662: OR
33663: IFFALSE 33769
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33665: LD_VAR 0 5
33669: PUSH
33670: LD_INT 1
33672: ARRAY
33673: PPUSH
33674: CALL_OW 305
33678: PUSH
33679: LD_VAR 0 5
33683: PUSH
33684: LD_INT 1
33686: ARRAY
33687: PPUSH
33688: CALL_OW 255
33692: PUSH
33693: LD_VAR 0 1
33697: PPUSH
33698: CALL_OW 255
33702: EQUAL
33703: AND
33704: IFFALSE 33728
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33706: LD_VAR 0 5
33710: PUSH
33711: LD_INT 1
33713: ARRAY
33714: PPUSH
33715: LD_VAR 0 5
33719: PUSH
33720: LD_INT 2
33722: ARRAY
33723: PPUSH
33724: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33728: LD_ADDR_EXP 125
33732: PUSH
33733: LD_EXP 125
33737: PPUSH
33738: LD_VAR 0 4
33742: PPUSH
33743: LD_EXP 125
33747: PUSH
33748: LD_VAR 0 4
33752: ARRAY
33753: PPUSH
33754: LD_VAR 0 3
33758: PPUSH
33759: CALL_OW 3
33763: PPUSH
33764: CALL_OW 1
33768: ST_TO_ADDR
// end ; end ;
33769: GO 33598
33771: POP
33772: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33773: LD_VAR 0 1
33777: PPUSH
33778: LD_EXP 125
33782: PUSH
33783: LD_VAR 0 4
33787: ARRAY
33788: PUSH
33789: LD_INT 0
33791: PLUS
33792: PPUSH
33793: CALL_OW 505
// end ;
33797: LD_VAR 0 2
33801: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33802: LD_INT 0
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
// if not hack in hackTanks then
33808: LD_VAR 0 1
33812: PUSH
33813: LD_EXP 124
33817: IN
33818: NOT
33819: IFFALSE 33823
// exit ;
33821: GO 33908
// index := GetElementIndex ( hackTanks , hack ) ;
33823: LD_ADDR_VAR 0 5
33827: PUSH
33828: LD_EXP 124
33832: PPUSH
33833: LD_VAR 0 1
33837: PPUSH
33838: CALL 40802 0 2
33842: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33843: LD_ADDR_VAR 0 4
33847: PUSH
33848: DOUBLE
33849: LD_INT 1
33851: DEC
33852: ST_TO_ADDR
33853: LD_EXP 125
33857: PUSH
33858: LD_VAR 0 5
33862: ARRAY
33863: PUSH
33864: FOR_TO
33865: IFFALSE 33906
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33867: LD_EXP 125
33871: PUSH
33872: LD_VAR 0 5
33876: ARRAY
33877: PUSH
33878: LD_VAR 0 4
33882: ARRAY
33883: PUSH
33884: LD_INT 1
33886: ARRAY
33887: PUSH
33888: LD_VAR 0 2
33892: EQUAL
33893: IFFALSE 33904
// KillUnit ( vehicle ) ;
33895: LD_VAR 0 2
33899: PPUSH
33900: CALL_OW 66
33904: GO 33864
33906: POP
33907: POP
// end ;
33908: LD_VAR 0 3
33912: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33913: LD_EXP 129
33917: NOT
33918: IFFALSE 33953
33920: GO 33922
33922: DISABLE
// begin initMiner := true ;
33923: LD_ADDR_EXP 129
33927: PUSH
33928: LD_INT 1
33930: ST_TO_ADDR
// minersList := [ ] ;
33931: LD_ADDR_EXP 130
33935: PUSH
33936: EMPTY
33937: ST_TO_ADDR
// minerMinesList := [ ] ;
33938: LD_ADDR_EXP 131
33942: PUSH
33943: EMPTY
33944: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33945: LD_ADDR_EXP 132
33949: PUSH
33950: LD_INT 5
33952: ST_TO_ADDR
// end ;
33953: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33954: LD_EXP 129
33958: PUSH
33959: LD_INT 34
33961: PUSH
33962: LD_EXP 140
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PPUSH
33971: CALL_OW 69
33975: AND
33976: IFFALSE 34439
33978: GO 33980
33980: DISABLE
33981: LD_INT 0
33983: PPUSH
33984: PPUSH
33985: PPUSH
33986: PPUSH
// begin enable ;
33987: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33988: LD_ADDR_VAR 0 1
33992: PUSH
33993: LD_INT 34
33995: PUSH
33996: LD_EXP 140
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PPUSH
34005: CALL_OW 69
34009: PUSH
34010: FOR_IN
34011: IFFALSE 34083
// begin if not i in minersList then
34013: LD_VAR 0 1
34017: PUSH
34018: LD_EXP 130
34022: IN
34023: NOT
34024: IFFALSE 34081
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34026: LD_ADDR_EXP 130
34030: PUSH
34031: LD_EXP 130
34035: PPUSH
34036: LD_EXP 130
34040: PUSH
34041: LD_INT 1
34043: PLUS
34044: PPUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: CALL_OW 1
34054: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34055: LD_ADDR_EXP 131
34059: PUSH
34060: LD_EXP 131
34064: PPUSH
34065: LD_EXP 131
34069: PUSH
34070: LD_INT 1
34072: PLUS
34073: PPUSH
34074: EMPTY
34075: PPUSH
34076: CALL_OW 1
34080: ST_TO_ADDR
// end end ;
34081: GO 34010
34083: POP
34084: POP
// for i := minerMinesList downto 1 do
34085: LD_ADDR_VAR 0 1
34089: PUSH
34090: DOUBLE
34091: LD_EXP 131
34095: INC
34096: ST_TO_ADDR
34097: LD_INT 1
34099: PUSH
34100: FOR_DOWNTO
34101: IFFALSE 34437
// begin if IsLive ( minersList [ i ] ) then
34103: LD_EXP 130
34107: PUSH
34108: LD_VAR 0 1
34112: ARRAY
34113: PPUSH
34114: CALL_OW 300
34118: IFFALSE 34146
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34120: LD_EXP 130
34124: PUSH
34125: LD_VAR 0 1
34129: ARRAY
34130: PPUSH
34131: LD_EXP 131
34135: PUSH
34136: LD_VAR 0 1
34140: ARRAY
34141: PPUSH
34142: CALL_OW 505
// if not minerMinesList [ i ] then
34146: LD_EXP 131
34150: PUSH
34151: LD_VAR 0 1
34155: ARRAY
34156: NOT
34157: IFFALSE 34161
// continue ;
34159: GO 34100
// for j := minerMinesList [ i ] downto 1 do
34161: LD_ADDR_VAR 0 2
34165: PUSH
34166: DOUBLE
34167: LD_EXP 131
34171: PUSH
34172: LD_VAR 0 1
34176: ARRAY
34177: INC
34178: ST_TO_ADDR
34179: LD_INT 1
34181: PUSH
34182: FOR_DOWNTO
34183: IFFALSE 34433
// begin side := GetSide ( minersList [ i ] ) ;
34185: LD_ADDR_VAR 0 3
34189: PUSH
34190: LD_EXP 130
34194: PUSH
34195: LD_VAR 0 1
34199: ARRAY
34200: PPUSH
34201: CALL_OW 255
34205: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34206: LD_ADDR_VAR 0 4
34210: PUSH
34211: LD_EXP 131
34215: PUSH
34216: LD_VAR 0 1
34220: ARRAY
34221: PUSH
34222: LD_VAR 0 2
34226: ARRAY
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: PPUSH
34232: LD_EXP 131
34236: PUSH
34237: LD_VAR 0 1
34241: ARRAY
34242: PUSH
34243: LD_VAR 0 2
34247: ARRAY
34248: PUSH
34249: LD_INT 2
34251: ARRAY
34252: PPUSH
34253: CALL_OW 428
34257: ST_TO_ADDR
// if not tmp then
34258: LD_VAR 0 4
34262: NOT
34263: IFFALSE 34267
// continue ;
34265: GO 34182
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34267: LD_VAR 0 4
34271: PUSH
34272: LD_INT 81
34274: PUSH
34275: LD_VAR 0 3
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PPUSH
34284: CALL_OW 69
34288: IN
34289: PUSH
34290: LD_EXP 131
34294: PUSH
34295: LD_VAR 0 1
34299: ARRAY
34300: PUSH
34301: LD_VAR 0 2
34305: ARRAY
34306: PUSH
34307: LD_INT 1
34309: ARRAY
34310: PPUSH
34311: LD_EXP 131
34315: PUSH
34316: LD_VAR 0 1
34320: ARRAY
34321: PUSH
34322: LD_VAR 0 2
34326: ARRAY
34327: PUSH
34328: LD_INT 2
34330: ARRAY
34331: PPUSH
34332: CALL_OW 458
34336: AND
34337: IFFALSE 34431
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34339: LD_EXP 131
34343: PUSH
34344: LD_VAR 0 1
34348: ARRAY
34349: PUSH
34350: LD_VAR 0 2
34354: ARRAY
34355: PUSH
34356: LD_INT 1
34358: ARRAY
34359: PPUSH
34360: LD_EXP 131
34364: PUSH
34365: LD_VAR 0 1
34369: ARRAY
34370: PUSH
34371: LD_VAR 0 2
34375: ARRAY
34376: PUSH
34377: LD_INT 2
34379: ARRAY
34380: PPUSH
34381: LD_VAR 0 3
34385: PPUSH
34386: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34390: LD_ADDR_EXP 131
34394: PUSH
34395: LD_EXP 131
34399: PPUSH
34400: LD_VAR 0 1
34404: PPUSH
34405: LD_EXP 131
34409: PUSH
34410: LD_VAR 0 1
34414: ARRAY
34415: PPUSH
34416: LD_VAR 0 2
34420: PPUSH
34421: CALL_OW 3
34425: PPUSH
34426: CALL_OW 1
34430: ST_TO_ADDR
// end ; end ;
34431: GO 34182
34433: POP
34434: POP
// end ;
34435: GO 34100
34437: POP
34438: POP
// end ;
34439: PPOPN 4
34441: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34442: LD_INT 0
34444: PPUSH
34445: PPUSH
// result := false ;
34446: LD_ADDR_VAR 0 4
34450: PUSH
34451: LD_INT 0
34453: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34454: LD_VAR 0 1
34458: PPUSH
34459: CALL_OW 264
34463: PUSH
34464: LD_EXP 140
34468: EQUAL
34469: NOT
34470: IFFALSE 34474
// exit ;
34472: GO 34714
// index := GetElementIndex ( minersList , unit ) ;
34474: LD_ADDR_VAR 0 5
34478: PUSH
34479: LD_EXP 130
34483: PPUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL 40802 0 2
34493: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34494: LD_EXP 131
34498: PUSH
34499: LD_VAR 0 5
34503: ARRAY
34504: PUSH
34505: LD_EXP 132
34509: GREATEREQUAL
34510: IFFALSE 34514
// exit ;
34512: GO 34714
// ComMoveXY ( unit , x , y ) ;
34514: LD_VAR 0 1
34518: PPUSH
34519: LD_VAR 0 2
34523: PPUSH
34524: LD_VAR 0 3
34528: PPUSH
34529: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34533: LD_INT 35
34535: PPUSH
34536: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34540: LD_VAR 0 1
34544: PPUSH
34545: LD_VAR 0 2
34549: PPUSH
34550: LD_VAR 0 3
34554: PPUSH
34555: CALL 71199 0 3
34559: NOT
34560: PUSH
34561: LD_VAR 0 1
34565: PPUSH
34566: CALL_OW 314
34570: AND
34571: IFFALSE 34575
// exit ;
34573: GO 34714
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34575: LD_VAR 0 2
34579: PPUSH
34580: LD_VAR 0 3
34584: PPUSH
34585: CALL_OW 428
34589: PUSH
34590: LD_VAR 0 1
34594: EQUAL
34595: PUSH
34596: LD_VAR 0 1
34600: PPUSH
34601: CALL_OW 314
34605: NOT
34606: AND
34607: IFFALSE 34533
// PlaySoundXY ( x , y , PlantMine ) ;
34609: LD_VAR 0 2
34613: PPUSH
34614: LD_VAR 0 3
34618: PPUSH
34619: LD_STRING PlantMine
34621: PPUSH
34622: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34626: LD_VAR 0 2
34630: PPUSH
34631: LD_VAR 0 3
34635: PPUSH
34636: LD_VAR 0 1
34640: PPUSH
34641: CALL_OW 255
34645: PPUSH
34646: LD_INT 0
34648: PPUSH
34649: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34653: LD_ADDR_EXP 131
34657: PUSH
34658: LD_EXP 131
34662: PPUSH
34663: LD_VAR 0 5
34667: PUSH
34668: LD_EXP 131
34672: PUSH
34673: LD_VAR 0 5
34677: ARRAY
34678: PUSH
34679: LD_INT 1
34681: PLUS
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PPUSH
34687: LD_VAR 0 2
34691: PUSH
34692: LD_VAR 0 3
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PPUSH
34701: CALL 41017 0 3
34705: ST_TO_ADDR
// result := true ;
34706: LD_ADDR_VAR 0 4
34710: PUSH
34711: LD_INT 1
34713: ST_TO_ADDR
// end ;
34714: LD_VAR 0 4
34718: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34719: LD_INT 0
34721: PPUSH
34722: PPUSH
34723: PPUSH
// if not unit in minersList then
34724: LD_VAR 0 1
34728: PUSH
34729: LD_EXP 130
34733: IN
34734: NOT
34735: IFFALSE 34739
// exit ;
34737: GO 35131
// index := GetElementIndex ( minersList , unit ) ;
34739: LD_ADDR_VAR 0 6
34743: PUSH
34744: LD_EXP 130
34748: PPUSH
34749: LD_VAR 0 1
34753: PPUSH
34754: CALL 40802 0 2
34758: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34759: LD_ADDR_VAR 0 5
34763: PUSH
34764: DOUBLE
34765: LD_EXP 131
34769: PUSH
34770: LD_VAR 0 6
34774: ARRAY
34775: INC
34776: ST_TO_ADDR
34777: LD_INT 1
34779: PUSH
34780: FOR_DOWNTO
34781: IFFALSE 34942
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34783: LD_EXP 131
34787: PUSH
34788: LD_VAR 0 6
34792: ARRAY
34793: PUSH
34794: LD_VAR 0 5
34798: ARRAY
34799: PUSH
34800: LD_INT 1
34802: ARRAY
34803: PUSH
34804: LD_VAR 0 2
34808: EQUAL
34809: PUSH
34810: LD_EXP 131
34814: PUSH
34815: LD_VAR 0 6
34819: ARRAY
34820: PUSH
34821: LD_VAR 0 5
34825: ARRAY
34826: PUSH
34827: LD_INT 2
34829: ARRAY
34830: PUSH
34831: LD_VAR 0 3
34835: EQUAL
34836: AND
34837: IFFALSE 34940
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34839: LD_EXP 131
34843: PUSH
34844: LD_VAR 0 6
34848: ARRAY
34849: PUSH
34850: LD_VAR 0 5
34854: ARRAY
34855: PUSH
34856: LD_INT 1
34858: ARRAY
34859: PPUSH
34860: LD_EXP 131
34864: PUSH
34865: LD_VAR 0 6
34869: ARRAY
34870: PUSH
34871: LD_VAR 0 5
34875: ARRAY
34876: PUSH
34877: LD_INT 2
34879: ARRAY
34880: PPUSH
34881: LD_VAR 0 1
34885: PPUSH
34886: CALL_OW 255
34890: PPUSH
34891: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34895: LD_ADDR_EXP 131
34899: PUSH
34900: LD_EXP 131
34904: PPUSH
34905: LD_VAR 0 6
34909: PPUSH
34910: LD_EXP 131
34914: PUSH
34915: LD_VAR 0 6
34919: ARRAY
34920: PPUSH
34921: LD_VAR 0 5
34925: PPUSH
34926: CALL_OW 3
34930: PPUSH
34931: CALL_OW 1
34935: ST_TO_ADDR
// exit ;
34936: POP
34937: POP
34938: GO 35131
// end ; end ;
34940: GO 34780
34942: POP
34943: POP
// for i := minerMinesList [ index ] downto 1 do
34944: LD_ADDR_VAR 0 5
34948: PUSH
34949: DOUBLE
34950: LD_EXP 131
34954: PUSH
34955: LD_VAR 0 6
34959: ARRAY
34960: INC
34961: ST_TO_ADDR
34962: LD_INT 1
34964: PUSH
34965: FOR_DOWNTO
34966: IFFALSE 35129
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34968: LD_EXP 131
34972: PUSH
34973: LD_VAR 0 6
34977: ARRAY
34978: PUSH
34979: LD_VAR 0 5
34983: ARRAY
34984: PUSH
34985: LD_INT 1
34987: ARRAY
34988: PPUSH
34989: LD_EXP 131
34993: PUSH
34994: LD_VAR 0 6
34998: ARRAY
34999: PUSH
35000: LD_VAR 0 5
35004: ARRAY
35005: PUSH
35006: LD_INT 2
35008: ARRAY
35009: PPUSH
35010: LD_VAR 0 2
35014: PPUSH
35015: LD_VAR 0 3
35019: PPUSH
35020: CALL_OW 298
35024: PUSH
35025: LD_INT 6
35027: LESS
35028: IFFALSE 35127
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35030: LD_EXP 131
35034: PUSH
35035: LD_VAR 0 6
35039: ARRAY
35040: PUSH
35041: LD_VAR 0 5
35045: ARRAY
35046: PUSH
35047: LD_INT 1
35049: ARRAY
35050: PPUSH
35051: LD_EXP 131
35055: PUSH
35056: LD_VAR 0 6
35060: ARRAY
35061: PUSH
35062: LD_VAR 0 5
35066: ARRAY
35067: PUSH
35068: LD_INT 2
35070: ARRAY
35071: PPUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 255
35081: PPUSH
35082: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35086: LD_ADDR_EXP 131
35090: PUSH
35091: LD_EXP 131
35095: PPUSH
35096: LD_VAR 0 6
35100: PPUSH
35101: LD_EXP 131
35105: PUSH
35106: LD_VAR 0 6
35110: ARRAY
35111: PPUSH
35112: LD_VAR 0 5
35116: PPUSH
35117: CALL_OW 3
35121: PPUSH
35122: CALL_OW 1
35126: ST_TO_ADDR
// end ; end ;
35127: GO 34965
35129: POP
35130: POP
// end ;
35131: LD_VAR 0 4
35135: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35136: LD_INT 0
35138: PPUSH
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 264
35156: PUSH
35157: LD_EXP 140
35161: EQUAL
35162: NOT
35163: PUSH
35164: LD_VAR 0 1
35168: PUSH
35169: LD_EXP 130
35173: IN
35174: NOT
35175: OR
35176: IFFALSE 35180
// exit ;
35178: GO 35502
// index := GetElementIndex ( minersList , unit ) ;
35180: LD_ADDR_VAR 0 6
35184: PUSH
35185: LD_EXP 130
35189: PPUSH
35190: LD_VAR 0 1
35194: PPUSH
35195: CALL 40802 0 2
35199: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35200: LD_ADDR_VAR 0 8
35204: PUSH
35205: LD_EXP 132
35209: PUSH
35210: LD_EXP 131
35214: PUSH
35215: LD_VAR 0 6
35219: ARRAY
35220: MINUS
35221: ST_TO_ADDR
// if not minesFreeAmount then
35222: LD_VAR 0 8
35226: NOT
35227: IFFALSE 35231
// exit ;
35229: GO 35502
// tmp := [ ] ;
35231: LD_ADDR_VAR 0 7
35235: PUSH
35236: EMPTY
35237: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35238: LD_ADDR_VAR 0 5
35242: PUSH
35243: DOUBLE
35244: LD_INT 1
35246: DEC
35247: ST_TO_ADDR
35248: LD_VAR 0 8
35252: PUSH
35253: FOR_TO
35254: IFFALSE 35449
// begin _d := rand ( 0 , 5 ) ;
35256: LD_ADDR_VAR 0 11
35260: PUSH
35261: LD_INT 0
35263: PPUSH
35264: LD_INT 5
35266: PPUSH
35267: CALL_OW 12
35271: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35272: LD_ADDR_VAR 0 12
35276: PUSH
35277: LD_INT 2
35279: PPUSH
35280: LD_INT 6
35282: PPUSH
35283: CALL_OW 12
35287: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35288: LD_ADDR_VAR 0 9
35292: PUSH
35293: LD_VAR 0 2
35297: PPUSH
35298: LD_VAR 0 11
35302: PPUSH
35303: LD_VAR 0 12
35307: PPUSH
35308: CALL_OW 272
35312: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35313: LD_ADDR_VAR 0 10
35317: PUSH
35318: LD_VAR 0 3
35322: PPUSH
35323: LD_VAR 0 11
35327: PPUSH
35328: LD_VAR 0 12
35332: PPUSH
35333: CALL_OW 273
35337: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35338: LD_VAR 0 9
35342: PPUSH
35343: LD_VAR 0 10
35347: PPUSH
35348: CALL_OW 488
35352: PUSH
35353: LD_VAR 0 9
35357: PUSH
35358: LD_VAR 0 10
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_VAR 0 7
35371: IN
35372: NOT
35373: AND
35374: PUSH
35375: LD_VAR 0 9
35379: PPUSH
35380: LD_VAR 0 10
35384: PPUSH
35385: CALL_OW 458
35389: NOT
35390: AND
35391: IFFALSE 35433
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35393: LD_ADDR_VAR 0 7
35397: PUSH
35398: LD_VAR 0 7
35402: PPUSH
35403: LD_VAR 0 7
35407: PUSH
35408: LD_INT 1
35410: PLUS
35411: PPUSH
35412: LD_VAR 0 9
35416: PUSH
35417: LD_VAR 0 10
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PPUSH
35426: CALL_OW 1
35430: ST_TO_ADDR
35431: GO 35447
// i := i - 1 ;
35433: LD_ADDR_VAR 0 5
35437: PUSH
35438: LD_VAR 0 5
35442: PUSH
35443: LD_INT 1
35445: MINUS
35446: ST_TO_ADDR
// end ;
35447: GO 35253
35449: POP
35450: POP
// for i in tmp do
35451: LD_ADDR_VAR 0 5
35455: PUSH
35456: LD_VAR 0 7
35460: PUSH
35461: FOR_IN
35462: IFFALSE 35500
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35464: LD_VAR 0 1
35468: PPUSH
35469: LD_VAR 0 5
35473: PUSH
35474: LD_INT 1
35476: ARRAY
35477: PPUSH
35478: LD_VAR 0 5
35482: PUSH
35483: LD_INT 2
35485: ARRAY
35486: PPUSH
35487: CALL 34442 0 3
35491: NOT
35492: IFFALSE 35498
// exit ;
35494: POP
35495: POP
35496: GO 35502
35498: GO 35461
35500: POP
35501: POP
// end ;
35502: LD_VAR 0 4
35506: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35507: LD_INT 0
35509: PPUSH
35510: PPUSH
35511: PPUSH
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
// if not GetClass ( unit ) = class_sniper then
35516: LD_VAR 0 1
35520: PPUSH
35521: CALL_OW 257
35525: PUSH
35526: LD_INT 5
35528: EQUAL
35529: NOT
35530: IFFALSE 35534
// exit ;
35532: GO 35922
// dist := 8 ;
35534: LD_ADDR_VAR 0 5
35538: PUSH
35539: LD_INT 8
35541: ST_TO_ADDR
// viewRange := 12 ;
35542: LD_ADDR_VAR 0 7
35546: PUSH
35547: LD_INT 12
35549: ST_TO_ADDR
// side := GetSide ( unit ) ;
35550: LD_ADDR_VAR 0 6
35554: PUSH
35555: LD_VAR 0 1
35559: PPUSH
35560: CALL_OW 255
35564: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35565: LD_INT 61
35567: PPUSH
35568: LD_VAR 0 6
35572: PPUSH
35573: CALL_OW 321
35577: PUSH
35578: LD_INT 2
35580: EQUAL
35581: IFFALSE 35591
// viewRange := 16 ;
35583: LD_ADDR_VAR 0 7
35587: PUSH
35588: LD_INT 16
35590: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35591: LD_VAR 0 1
35595: PPUSH
35596: LD_VAR 0 2
35600: PPUSH
35601: LD_VAR 0 3
35605: PPUSH
35606: CALL_OW 297
35610: PUSH
35611: LD_VAR 0 5
35615: GREATER
35616: IFFALSE 35695
// begin ComMoveXY ( unit , x , y ) ;
35618: LD_VAR 0 1
35622: PPUSH
35623: LD_VAR 0 2
35627: PPUSH
35628: LD_VAR 0 3
35632: PPUSH
35633: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35637: LD_INT 35
35639: PPUSH
35640: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35644: LD_VAR 0 1
35648: PPUSH
35649: LD_VAR 0 2
35653: PPUSH
35654: LD_VAR 0 3
35658: PPUSH
35659: CALL 71199 0 3
35663: NOT
35664: IFFALSE 35668
// exit ;
35666: GO 35922
// until GetDistUnitXY ( unit , x , y ) < dist ;
35668: LD_VAR 0 1
35672: PPUSH
35673: LD_VAR 0 2
35677: PPUSH
35678: LD_VAR 0 3
35682: PPUSH
35683: CALL_OW 297
35687: PUSH
35688: LD_VAR 0 5
35692: LESS
35693: IFFALSE 35637
// end ; ComTurnXY ( unit , x , y ) ;
35695: LD_VAR 0 1
35699: PPUSH
35700: LD_VAR 0 2
35704: PPUSH
35705: LD_VAR 0 3
35709: PPUSH
35710: CALL_OW 118
// wait ( 5 ) ;
35714: LD_INT 5
35716: PPUSH
35717: CALL_OW 67
// _d := GetDir ( unit ) ;
35721: LD_ADDR_VAR 0 10
35725: PUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 254
35735: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35736: LD_ADDR_VAR 0 8
35740: PUSH
35741: LD_VAR 0 1
35745: PPUSH
35746: CALL_OW 250
35750: PPUSH
35751: LD_VAR 0 10
35755: PPUSH
35756: LD_VAR 0 5
35760: PPUSH
35761: CALL_OW 272
35765: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35766: LD_ADDR_VAR 0 9
35770: PUSH
35771: LD_VAR 0 1
35775: PPUSH
35776: CALL_OW 251
35780: PPUSH
35781: LD_VAR 0 10
35785: PPUSH
35786: LD_VAR 0 5
35790: PPUSH
35791: CALL_OW 273
35795: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35796: LD_VAR 0 8
35800: PPUSH
35801: LD_VAR 0 9
35805: PPUSH
35806: CALL_OW 488
35810: NOT
35811: IFFALSE 35815
// exit ;
35813: GO 35922
// ComAnimCustom ( unit , 1 ) ;
35815: LD_VAR 0 1
35819: PPUSH
35820: LD_INT 1
35822: PPUSH
35823: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35827: LD_VAR 0 8
35831: PPUSH
35832: LD_VAR 0 9
35836: PPUSH
35837: LD_VAR 0 6
35841: PPUSH
35842: LD_VAR 0 7
35846: PPUSH
35847: CALL_OW 330
// repeat wait ( 1 ) ;
35851: LD_INT 1
35853: PPUSH
35854: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35858: LD_VAR 0 1
35862: PPUSH
35863: CALL_OW 316
35867: PUSH
35868: LD_VAR 0 1
35872: PPUSH
35873: CALL_OW 314
35877: OR
35878: PUSH
35879: LD_VAR 0 1
35883: PPUSH
35884: CALL_OW 302
35888: NOT
35889: OR
35890: PUSH
35891: LD_VAR 0 1
35895: PPUSH
35896: CALL_OW 301
35900: OR
35901: IFFALSE 35851
// RemoveSeeing ( _x , _y , side ) ;
35903: LD_VAR 0 8
35907: PPUSH
35908: LD_VAR 0 9
35912: PPUSH
35913: LD_VAR 0 6
35917: PPUSH
35918: CALL_OW 331
// end ; end_of_file
35922: LD_VAR 0 4
35926: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
35927: LD_INT 0
35929: PPUSH
// ar_miner := 81 ;
35930: LD_ADDR_EXP 140
35934: PUSH
35935: LD_INT 81
35937: ST_TO_ADDR
// ar_crane := 88 ;
35938: LD_ADDR_EXP 139
35942: PUSH
35943: LD_INT 88
35945: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
35946: LD_ADDR_EXP 134
35950: PUSH
35951: LD_INT 89
35953: ST_TO_ADDR
// us_hack := 99 ;
35954: LD_ADDR_EXP 135
35958: PUSH
35959: LD_INT 99
35961: ST_TO_ADDR
// us_artillery := 97 ;
35962: LD_ADDR_EXP 136
35966: PUSH
35967: LD_INT 97
35969: ST_TO_ADDR
// ar_bio_bomb := 91 ;
35970: LD_ADDR_EXP 137
35974: PUSH
35975: LD_INT 91
35977: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
35978: LD_ADDR_EXP 138
35982: PUSH
35983: LD_INT 92
35985: ST_TO_ADDR
// ru_radar := 98 ;
35986: LD_ADDR_EXP 133
35990: PUSH
35991: LD_INT 98
35993: ST_TO_ADDR
// tech_Artillery := 80 ;
35994: LD_ADDR_EXP 141
35998: PUSH
35999: LD_INT 80
36001: ST_TO_ADDR
// tech_RadMat := 81 ;
36002: LD_ADDR_EXP 142
36006: PUSH
36007: LD_INT 81
36009: ST_TO_ADDR
// tech_BasicTools := 82 ;
36010: LD_ADDR_EXP 143
36014: PUSH
36015: LD_INT 82
36017: ST_TO_ADDR
// tech_Cargo := 83 ;
36018: LD_ADDR_EXP 144
36022: PUSH
36023: LD_INT 83
36025: ST_TO_ADDR
// tech_Track := 84 ;
36026: LD_ADDR_EXP 145
36030: PUSH
36031: LD_INT 84
36033: ST_TO_ADDR
// tech_Crane := 85 ;
36034: LD_ADDR_EXP 146
36038: PUSH
36039: LD_INT 85
36041: ST_TO_ADDR
// tech_Bulldozer := 86 ;
36042: LD_ADDR_EXP 147
36046: PUSH
36047: LD_INT 86
36049: ST_TO_ADDR
// tech_Hovercraft := 87 ;
36050: LD_ADDR_EXP 148
36054: PUSH
36055: LD_INT 87
36057: ST_TO_ADDR
// end ;
36058: LD_VAR 0 1
36062: RET
// every 1 do
36063: GO 36065
36065: DISABLE
// InitGlobalVariables ; end_of_file
36066: CALL 35927 0 0
36070: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36071: LD_INT 0
36073: PPUSH
36074: PPUSH
// if exist_mode then
36075: LD_VAR 0 2
36079: IFFALSE 36104
// unit := CreateCharacter ( prefix & ident ) else
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: LD_VAR 0 3
36090: PUSH
36091: LD_VAR 0 1
36095: STR
36096: PPUSH
36097: CALL_OW 34
36101: ST_TO_ADDR
36102: GO 36119
// unit := NewCharacter ( ident ) ;
36104: LD_ADDR_VAR 0 5
36108: PUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 25
36118: ST_TO_ADDR
// result := unit ;
36119: LD_ADDR_VAR 0 4
36123: PUSH
36124: LD_VAR 0 5
36128: ST_TO_ADDR
// end ;
36129: LD_VAR 0 4
36133: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36134: LD_INT 0
36136: PPUSH
36137: PPUSH
// if not side or not nation then
36138: LD_VAR 0 1
36142: NOT
36143: PUSH
36144: LD_VAR 0 2
36148: NOT
36149: OR
36150: IFFALSE 36154
// exit ;
36152: GO 36918
// case nation of nation_american :
36154: LD_VAR 0 2
36158: PUSH
36159: LD_INT 1
36161: DOUBLE
36162: EQUAL
36163: IFTRUE 36167
36165: GO 36381
36167: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36168: LD_ADDR_VAR 0 4
36172: PUSH
36173: LD_INT 35
36175: PUSH
36176: LD_INT 45
36178: PUSH
36179: LD_INT 46
36181: PUSH
36182: LD_INT 47
36184: PUSH
36185: LD_INT 82
36187: PUSH
36188: LD_INT 83
36190: PUSH
36191: LD_INT 84
36193: PUSH
36194: LD_INT 85
36196: PUSH
36197: LD_INT 86
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: LD_INT 6
36208: PUSH
36209: LD_INT 15
36211: PUSH
36212: LD_INT 16
36214: PUSH
36215: LD_INT 7
36217: PUSH
36218: LD_INT 12
36220: PUSH
36221: LD_INT 13
36223: PUSH
36224: LD_INT 10
36226: PUSH
36227: LD_INT 14
36229: PUSH
36230: LD_INT 20
36232: PUSH
36233: LD_INT 21
36235: PUSH
36236: LD_INT 22
36238: PUSH
36239: LD_INT 25
36241: PUSH
36242: LD_INT 32
36244: PUSH
36245: LD_INT 27
36247: PUSH
36248: LD_INT 36
36250: PUSH
36251: LD_INT 69
36253: PUSH
36254: LD_INT 39
36256: PUSH
36257: LD_INT 34
36259: PUSH
36260: LD_INT 40
36262: PUSH
36263: LD_INT 48
36265: PUSH
36266: LD_INT 49
36268: PUSH
36269: LD_INT 50
36271: PUSH
36272: LD_INT 51
36274: PUSH
36275: LD_INT 52
36277: PUSH
36278: LD_INT 53
36280: PUSH
36281: LD_INT 54
36283: PUSH
36284: LD_INT 55
36286: PUSH
36287: LD_INT 56
36289: PUSH
36290: LD_INT 57
36292: PUSH
36293: LD_INT 58
36295: PUSH
36296: LD_INT 59
36298: PUSH
36299: LD_INT 60
36301: PUSH
36302: LD_INT 61
36304: PUSH
36305: LD_INT 62
36307: PUSH
36308: LD_INT 80
36310: PUSH
36311: LD_INT 82
36313: PUSH
36314: LD_INT 83
36316: PUSH
36317: LD_INT 84
36319: PUSH
36320: LD_INT 85
36322: PUSH
36323: LD_INT 86
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: ST_TO_ADDR
36379: GO 36842
36381: LD_INT 2
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36389
36387: GO 36611
36389: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36390: LD_ADDR_VAR 0 4
36394: PUSH
36395: LD_INT 35
36397: PUSH
36398: LD_INT 45
36400: PUSH
36401: LD_INT 46
36403: PUSH
36404: LD_INT 47
36406: PUSH
36407: LD_INT 82
36409: PUSH
36410: LD_INT 83
36412: PUSH
36413: LD_INT 84
36415: PUSH
36416: LD_INT 85
36418: PUSH
36419: LD_INT 87
36421: PUSH
36422: LD_INT 70
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: LD_INT 11
36430: PUSH
36431: LD_INT 3
36433: PUSH
36434: LD_INT 4
36436: PUSH
36437: LD_INT 5
36439: PUSH
36440: LD_INT 6
36442: PUSH
36443: LD_INT 15
36445: PUSH
36446: LD_INT 18
36448: PUSH
36449: LD_INT 7
36451: PUSH
36452: LD_INT 17
36454: PUSH
36455: LD_INT 8
36457: PUSH
36458: LD_INT 20
36460: PUSH
36461: LD_INT 21
36463: PUSH
36464: LD_INT 22
36466: PUSH
36467: LD_INT 72
36469: PUSH
36470: LD_INT 26
36472: PUSH
36473: LD_INT 69
36475: PUSH
36476: LD_INT 39
36478: PUSH
36479: LD_INT 40
36481: PUSH
36482: LD_INT 41
36484: PUSH
36485: LD_INT 42
36487: PUSH
36488: LD_INT 43
36490: PUSH
36491: LD_INT 48
36493: PUSH
36494: LD_INT 49
36496: PUSH
36497: LD_INT 50
36499: PUSH
36500: LD_INT 51
36502: PUSH
36503: LD_INT 52
36505: PUSH
36506: LD_INT 53
36508: PUSH
36509: LD_INT 54
36511: PUSH
36512: LD_INT 55
36514: PUSH
36515: LD_INT 56
36517: PUSH
36518: LD_INT 60
36520: PUSH
36521: LD_INT 61
36523: PUSH
36524: LD_INT 62
36526: PUSH
36527: LD_INT 66
36529: PUSH
36530: LD_INT 67
36532: PUSH
36533: LD_INT 68
36535: PUSH
36536: LD_INT 81
36538: PUSH
36539: LD_INT 82
36541: PUSH
36542: LD_INT 83
36544: PUSH
36545: LD_INT 84
36547: PUSH
36548: LD_INT 85
36550: PUSH
36551: LD_INT 87
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: ST_TO_ADDR
36609: GO 36842
36611: LD_INT 3
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36841
36619: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36620: LD_ADDR_VAR 0 4
36624: PUSH
36625: LD_INT 46
36627: PUSH
36628: LD_INT 47
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: LD_INT 2
36636: PUSH
36637: LD_INT 82
36639: PUSH
36640: LD_INT 83
36642: PUSH
36643: LD_INT 84
36645: PUSH
36646: LD_INT 85
36648: PUSH
36649: LD_INT 86
36651: PUSH
36652: LD_INT 11
36654: PUSH
36655: LD_INT 9
36657: PUSH
36658: LD_INT 20
36660: PUSH
36661: LD_INT 19
36663: PUSH
36664: LD_INT 21
36666: PUSH
36667: LD_INT 24
36669: PUSH
36670: LD_INT 22
36672: PUSH
36673: LD_INT 25
36675: PUSH
36676: LD_INT 28
36678: PUSH
36679: LD_INT 29
36681: PUSH
36682: LD_INT 30
36684: PUSH
36685: LD_INT 31
36687: PUSH
36688: LD_INT 37
36690: PUSH
36691: LD_INT 38
36693: PUSH
36694: LD_INT 32
36696: PUSH
36697: LD_INT 27
36699: PUSH
36700: LD_INT 33
36702: PUSH
36703: LD_INT 69
36705: PUSH
36706: LD_INT 39
36708: PUSH
36709: LD_INT 34
36711: PUSH
36712: LD_INT 40
36714: PUSH
36715: LD_INT 71
36717: PUSH
36718: LD_INT 23
36720: PUSH
36721: LD_INT 44
36723: PUSH
36724: LD_INT 48
36726: PUSH
36727: LD_INT 49
36729: PUSH
36730: LD_INT 50
36732: PUSH
36733: LD_INT 51
36735: PUSH
36736: LD_INT 52
36738: PUSH
36739: LD_INT 53
36741: PUSH
36742: LD_INT 54
36744: PUSH
36745: LD_INT 55
36747: PUSH
36748: LD_INT 56
36750: PUSH
36751: LD_INT 57
36753: PUSH
36754: LD_INT 58
36756: PUSH
36757: LD_INT 59
36759: PUSH
36760: LD_INT 63
36762: PUSH
36763: LD_INT 64
36765: PUSH
36766: LD_INT 65
36768: PUSH
36769: LD_INT 82
36771: PUSH
36772: LD_INT 83
36774: PUSH
36775: LD_INT 84
36777: PUSH
36778: LD_INT 85
36780: PUSH
36781: LD_INT 86
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: ST_TO_ADDR
36839: GO 36842
36841: POP
// if state > - 1 and state < 3 then
36842: LD_VAR 0 3
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: GREATER
36851: PUSH
36852: LD_VAR 0 3
36856: PUSH
36857: LD_INT 3
36859: LESS
36860: AND
36861: IFFALSE 36918
// for i in result do
36863: LD_ADDR_VAR 0 5
36867: PUSH
36868: LD_VAR 0 4
36872: PUSH
36873: FOR_IN
36874: IFFALSE 36916
// if GetTech ( i , side ) <> state then
36876: LD_VAR 0 5
36880: PPUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: CALL_OW 321
36890: PUSH
36891: LD_VAR 0 3
36895: NONEQUAL
36896: IFFALSE 36914
// result := result diff i ;
36898: LD_ADDR_VAR 0 4
36902: PUSH
36903: LD_VAR 0 4
36907: PUSH
36908: LD_VAR 0 5
36912: DIFF
36913: ST_TO_ADDR
36914: GO 36873
36916: POP
36917: POP
// end ;
36918: LD_VAR 0 4
36922: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36923: LD_INT 0
36925: PPUSH
36926: PPUSH
36927: PPUSH
// result := true ;
36928: LD_ADDR_VAR 0 3
36932: PUSH
36933: LD_INT 1
36935: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36936: LD_ADDR_VAR 0 5
36940: PUSH
36941: LD_VAR 0 2
36945: PPUSH
36946: CALL_OW 480
36950: ST_TO_ADDR
// if not tmp then
36951: LD_VAR 0 5
36955: NOT
36956: IFFALSE 36960
// exit ;
36958: GO 37009
// for i in tmp do
36960: LD_ADDR_VAR 0 4
36964: PUSH
36965: LD_VAR 0 5
36969: PUSH
36970: FOR_IN
36971: IFFALSE 37007
// if GetTech ( i , side ) <> state_researched then
36973: LD_VAR 0 4
36977: PPUSH
36978: LD_VAR 0 1
36982: PPUSH
36983: CALL_OW 321
36987: PUSH
36988: LD_INT 2
36990: NONEQUAL
36991: IFFALSE 37005
// begin result := false ;
36993: LD_ADDR_VAR 0 3
36997: PUSH
36998: LD_INT 0
37000: ST_TO_ADDR
// exit ;
37001: POP
37002: POP
37003: GO 37009
// end ;
37005: GO 36970
37007: POP
37008: POP
// end ;
37009: LD_VAR 0 3
37013: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37014: LD_INT 0
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
37028: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37029: LD_VAR 0 1
37033: NOT
37034: PUSH
37035: LD_VAR 0 1
37039: PPUSH
37040: CALL_OW 257
37044: PUSH
37045: LD_INT 9
37047: NONEQUAL
37048: OR
37049: IFFALSE 37053
// exit ;
37051: GO 37626
// side := GetSide ( unit ) ;
37053: LD_ADDR_VAR 0 9
37057: PUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: CALL_OW 255
37067: ST_TO_ADDR
// tech_space := tech_spacanom ;
37068: LD_ADDR_VAR 0 12
37072: PUSH
37073: LD_INT 29
37075: ST_TO_ADDR
// tech_time := tech_taurad ;
37076: LD_ADDR_VAR 0 13
37080: PUSH
37081: LD_INT 28
37083: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37084: LD_ADDR_VAR 0 11
37088: PUSH
37089: LD_VAR 0 1
37093: PPUSH
37094: CALL_OW 310
37098: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37099: LD_VAR 0 11
37103: PPUSH
37104: CALL_OW 247
37108: PUSH
37109: LD_INT 2
37111: EQUAL
37112: IFFALSE 37116
// exit ;
37114: GO 37626
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37116: LD_ADDR_VAR 0 8
37120: PUSH
37121: LD_INT 81
37123: PUSH
37124: LD_VAR 0 9
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: LD_INT 21
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PPUSH
37154: CALL_OW 69
37158: ST_TO_ADDR
// if not tmp then
37159: LD_VAR 0 8
37163: NOT
37164: IFFALSE 37168
// exit ;
37166: GO 37626
// if in_unit then
37168: LD_VAR 0 11
37172: IFFALSE 37196
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37174: LD_ADDR_VAR 0 10
37178: PUSH
37179: LD_VAR 0 8
37183: PPUSH
37184: LD_VAR 0 11
37188: PPUSH
37189: CALL_OW 74
37193: ST_TO_ADDR
37194: GO 37216
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37196: LD_ADDR_VAR 0 10
37200: PUSH
37201: LD_VAR 0 8
37205: PPUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: CALL_OW 74
37215: ST_TO_ADDR
// if not enemy then
37216: LD_VAR 0 10
37220: NOT
37221: IFFALSE 37225
// exit ;
37223: GO 37626
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37225: LD_VAR 0 11
37229: PUSH
37230: LD_VAR 0 11
37234: PPUSH
37235: LD_VAR 0 10
37239: PPUSH
37240: CALL_OW 296
37244: PUSH
37245: LD_INT 13
37247: GREATER
37248: AND
37249: PUSH
37250: LD_VAR 0 1
37254: PPUSH
37255: LD_VAR 0 10
37259: PPUSH
37260: CALL_OW 296
37264: PUSH
37265: LD_INT 12
37267: GREATER
37268: OR
37269: IFFALSE 37273
// exit ;
37271: GO 37626
// missile := [ 1 ] ;
37273: LD_ADDR_VAR 0 14
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37284: LD_VAR 0 9
37288: PPUSH
37289: LD_VAR 0 12
37293: PPUSH
37294: CALL_OW 325
37298: IFFALSE 37327
// missile := Insert ( missile , missile + 1 , 2 ) ;
37300: LD_ADDR_VAR 0 14
37304: PUSH
37305: LD_VAR 0 14
37309: PPUSH
37310: LD_VAR 0 14
37314: PUSH
37315: LD_INT 1
37317: PLUS
37318: PPUSH
37319: LD_INT 2
37321: PPUSH
37322: CALL_OW 2
37326: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37327: LD_VAR 0 9
37331: PPUSH
37332: LD_VAR 0 13
37336: PPUSH
37337: CALL_OW 325
37341: PUSH
37342: LD_VAR 0 10
37346: PPUSH
37347: CALL_OW 255
37351: PPUSH
37352: LD_VAR 0 13
37356: PPUSH
37357: CALL_OW 325
37361: NOT
37362: AND
37363: IFFALSE 37392
// missile := Insert ( missile , missile + 1 , 3 ) ;
37365: LD_ADDR_VAR 0 14
37369: PUSH
37370: LD_VAR 0 14
37374: PPUSH
37375: LD_VAR 0 14
37379: PUSH
37380: LD_INT 1
37382: PLUS
37383: PPUSH
37384: LD_INT 3
37386: PPUSH
37387: CALL_OW 2
37391: ST_TO_ADDR
// if missile < 2 then
37392: LD_VAR 0 14
37396: PUSH
37397: LD_INT 2
37399: LESS
37400: IFFALSE 37404
// exit ;
37402: GO 37626
// x := GetX ( enemy ) ;
37404: LD_ADDR_VAR 0 4
37408: PUSH
37409: LD_VAR 0 10
37413: PPUSH
37414: CALL_OW 250
37418: ST_TO_ADDR
// y := GetY ( enemy ) ;
37419: LD_ADDR_VAR 0 5
37423: PUSH
37424: LD_VAR 0 10
37428: PPUSH
37429: CALL_OW 251
37433: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37434: LD_ADDR_VAR 0 6
37438: PUSH
37439: LD_VAR 0 4
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PPUSH
37448: LD_INT 1
37450: PPUSH
37451: CALL_OW 12
37455: PLUS
37456: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37457: LD_ADDR_VAR 0 7
37461: PUSH
37462: LD_VAR 0 5
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PPUSH
37471: LD_INT 1
37473: PPUSH
37474: CALL_OW 12
37478: PLUS
37479: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37480: LD_VAR 0 6
37484: PPUSH
37485: LD_VAR 0 7
37489: PPUSH
37490: CALL_OW 488
37494: NOT
37495: IFFALSE 37517
// begin _x := x ;
37497: LD_ADDR_VAR 0 6
37501: PUSH
37502: LD_VAR 0 4
37506: ST_TO_ADDR
// _y := y ;
37507: LD_ADDR_VAR 0 7
37511: PUSH
37512: LD_VAR 0 5
37516: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37517: LD_ADDR_VAR 0 3
37521: PUSH
37522: LD_INT 1
37524: PPUSH
37525: LD_VAR 0 14
37529: PPUSH
37530: CALL_OW 12
37534: ST_TO_ADDR
// case i of 1 :
37535: LD_VAR 0 3
37539: PUSH
37540: LD_INT 1
37542: DOUBLE
37543: EQUAL
37544: IFTRUE 37548
37546: GO 37565
37548: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37549: LD_VAR 0 1
37553: PPUSH
37554: LD_VAR 0 10
37558: PPUSH
37559: CALL_OW 115
37563: GO 37626
37565: LD_INT 2
37567: DOUBLE
37568: EQUAL
37569: IFTRUE 37573
37571: GO 37595
37573: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37574: LD_VAR 0 1
37578: PPUSH
37579: LD_VAR 0 6
37583: PPUSH
37584: LD_VAR 0 7
37588: PPUSH
37589: CALL_OW 153
37593: GO 37626
37595: LD_INT 3
37597: DOUBLE
37598: EQUAL
37599: IFTRUE 37603
37601: GO 37625
37603: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37604: LD_VAR 0 1
37608: PPUSH
37609: LD_VAR 0 6
37613: PPUSH
37614: LD_VAR 0 7
37618: PPUSH
37619: CALL_OW 154
37623: GO 37626
37625: POP
// end ;
37626: LD_VAR 0 2
37630: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37631: LD_INT 0
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
37637: PPUSH
37638: PPUSH
// if not unit or not building then
37639: LD_VAR 0 1
37643: NOT
37644: PUSH
37645: LD_VAR 0 2
37649: NOT
37650: OR
37651: IFFALSE 37655
// exit ;
37653: GO 37813
// x := GetX ( building ) ;
37655: LD_ADDR_VAR 0 5
37659: PUSH
37660: LD_VAR 0 2
37664: PPUSH
37665: CALL_OW 250
37669: ST_TO_ADDR
// y := GetY ( building ) ;
37670: LD_ADDR_VAR 0 6
37674: PUSH
37675: LD_VAR 0 2
37679: PPUSH
37680: CALL_OW 251
37684: ST_TO_ADDR
// for i = 0 to 5 do
37685: LD_ADDR_VAR 0 4
37689: PUSH
37690: DOUBLE
37691: LD_INT 0
37693: DEC
37694: ST_TO_ADDR
37695: LD_INT 5
37697: PUSH
37698: FOR_TO
37699: IFFALSE 37811
// begin _x := ShiftX ( x , i , 3 ) ;
37701: LD_ADDR_VAR 0 7
37705: PUSH
37706: LD_VAR 0 5
37710: PPUSH
37711: LD_VAR 0 4
37715: PPUSH
37716: LD_INT 3
37718: PPUSH
37719: CALL_OW 272
37723: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37724: LD_ADDR_VAR 0 8
37728: PUSH
37729: LD_VAR 0 6
37733: PPUSH
37734: LD_VAR 0 4
37738: PPUSH
37739: LD_INT 3
37741: PPUSH
37742: CALL_OW 273
37746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37747: LD_VAR 0 7
37751: PPUSH
37752: LD_VAR 0 8
37756: PPUSH
37757: CALL_OW 488
37761: NOT
37762: IFFALSE 37766
// continue ;
37764: GO 37698
// if HexInfo ( _x , _y ) = 0 then
37766: LD_VAR 0 7
37770: PPUSH
37771: LD_VAR 0 8
37775: PPUSH
37776: CALL_OW 428
37780: PUSH
37781: LD_INT 0
37783: EQUAL
37784: IFFALSE 37809
// begin ComMoveXY ( unit , _x , _y ) ;
37786: LD_VAR 0 1
37790: PPUSH
37791: LD_VAR 0 7
37795: PPUSH
37796: LD_VAR 0 8
37800: PPUSH
37801: CALL_OW 111
// exit ;
37805: POP
37806: POP
37807: GO 37813
// end ; end ;
37809: GO 37698
37811: POP
37812: POP
// end ;
37813: LD_VAR 0 3
37817: RET
// export function ScanBase ( side , base_area ) ; begin
37818: LD_INT 0
37820: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37821: LD_ADDR_VAR 0 3
37825: PUSH
37826: LD_VAR 0 2
37830: PPUSH
37831: LD_INT 81
37833: PUSH
37834: LD_VAR 0 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PPUSH
37843: CALL_OW 70
37847: ST_TO_ADDR
// end ;
37848: LD_VAR 0 3
37852: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37853: LD_INT 0
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
// result := false ;
37859: LD_ADDR_VAR 0 2
37863: PUSH
37864: LD_INT 0
37866: ST_TO_ADDR
// side := GetSide ( unit ) ;
37867: LD_ADDR_VAR 0 3
37871: PUSH
37872: LD_VAR 0 1
37876: PPUSH
37877: CALL_OW 255
37881: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37882: LD_ADDR_VAR 0 4
37886: PUSH
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 248
37896: ST_TO_ADDR
// case nat of 1 :
37897: LD_VAR 0 4
37901: PUSH
37902: LD_INT 1
37904: DOUBLE
37905: EQUAL
37906: IFTRUE 37910
37908: GO 37921
37910: POP
// tech := tech_lassight ; 2 :
37911: LD_ADDR_VAR 0 5
37915: PUSH
37916: LD_INT 12
37918: ST_TO_ADDR
37919: GO 37960
37921: LD_INT 2
37923: DOUBLE
37924: EQUAL
37925: IFTRUE 37929
37927: GO 37940
37929: POP
// tech := tech_mortar ; 3 :
37930: LD_ADDR_VAR 0 5
37934: PUSH
37935: LD_INT 41
37937: ST_TO_ADDR
37938: GO 37960
37940: LD_INT 3
37942: DOUBLE
37943: EQUAL
37944: IFTRUE 37948
37946: GO 37959
37948: POP
// tech := tech_bazooka ; end ;
37949: LD_ADDR_VAR 0 5
37953: PUSH
37954: LD_INT 44
37956: ST_TO_ADDR
37957: GO 37960
37959: POP
// if Researched ( side , tech ) then
37960: LD_VAR 0 3
37964: PPUSH
37965: LD_VAR 0 5
37969: PPUSH
37970: CALL_OW 325
37974: IFFALSE 38001
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37976: LD_ADDR_VAR 0 2
37980: PUSH
37981: LD_INT 5
37983: PUSH
37984: LD_INT 8
37986: PUSH
37987: LD_INT 9
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: PUSH
37995: LD_VAR 0 4
37999: ARRAY
38000: ST_TO_ADDR
// end ;
38001: LD_VAR 0 2
38005: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38006: LD_INT 0
38008: PPUSH
38009: PPUSH
38010: PPUSH
// if not mines then
38011: LD_VAR 0 2
38015: NOT
38016: IFFALSE 38020
// exit ;
38018: GO 38164
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38020: LD_ADDR_VAR 0 5
38024: PUSH
38025: LD_INT 81
38027: PUSH
38028: LD_VAR 0 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 3
38039: PUSH
38040: LD_INT 21
38042: PUSH
38043: LD_INT 3
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PPUSH
38058: CALL_OW 69
38062: ST_TO_ADDR
// for i in mines do
38063: LD_ADDR_VAR 0 4
38067: PUSH
38068: LD_VAR 0 2
38072: PUSH
38073: FOR_IN
38074: IFFALSE 38162
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38076: LD_VAR 0 4
38080: PUSH
38081: LD_INT 1
38083: ARRAY
38084: PPUSH
38085: LD_VAR 0 4
38089: PUSH
38090: LD_INT 2
38092: ARRAY
38093: PPUSH
38094: CALL_OW 458
38098: NOT
38099: IFFALSE 38103
// continue ;
38101: GO 38073
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38103: LD_VAR 0 4
38107: PUSH
38108: LD_INT 1
38110: ARRAY
38111: PPUSH
38112: LD_VAR 0 4
38116: PUSH
38117: LD_INT 2
38119: ARRAY
38120: PPUSH
38121: CALL_OW 428
38125: PUSH
38126: LD_VAR 0 5
38130: IN
38131: IFFALSE 38160
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38133: LD_VAR 0 4
38137: PUSH
38138: LD_INT 1
38140: ARRAY
38141: PPUSH
38142: LD_VAR 0 4
38146: PUSH
38147: LD_INT 2
38149: ARRAY
38150: PPUSH
38151: LD_VAR 0 1
38155: PPUSH
38156: CALL_OW 456
// end ;
38160: GO 38073
38162: POP
38163: POP
// end ;
38164: LD_VAR 0 3
38168: RET
// export function Count ( array ) ; var i ; begin
38169: LD_INT 0
38171: PPUSH
38172: PPUSH
// result := 0 ;
38173: LD_ADDR_VAR 0 2
38177: PUSH
38178: LD_INT 0
38180: ST_TO_ADDR
// for i in array do
38181: LD_ADDR_VAR 0 3
38185: PUSH
38186: LD_VAR 0 1
38190: PUSH
38191: FOR_IN
38192: IFFALSE 38216
// if i then
38194: LD_VAR 0 3
38198: IFFALSE 38214
// result := result + 1 ;
38200: LD_ADDR_VAR 0 2
38204: PUSH
38205: LD_VAR 0 2
38209: PUSH
38210: LD_INT 1
38212: PLUS
38213: ST_TO_ADDR
38214: GO 38191
38216: POP
38217: POP
// end ;
38218: LD_VAR 0 2
38222: RET
// export function IsEmpty ( building ) ; begin
38223: LD_INT 0
38225: PPUSH
// if not building then
38226: LD_VAR 0 1
38230: NOT
38231: IFFALSE 38235
// exit ;
38233: GO 38278
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38235: LD_ADDR_VAR 0 2
38239: PUSH
38240: LD_VAR 0 1
38244: PUSH
38245: LD_INT 22
38247: PUSH
38248: LD_VAR 0 1
38252: PPUSH
38253: CALL_OW 255
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 58
38264: PUSH
38265: EMPTY
38266: LIST
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PPUSH
38272: CALL_OW 69
38276: IN
38277: ST_TO_ADDR
// end ;
38278: LD_VAR 0 2
38282: RET
// export function IsNotFull ( building ) ; begin
38283: LD_INT 0
38285: PPUSH
// if not building then
38286: LD_VAR 0 1
38290: NOT
38291: IFFALSE 38295
// exit ;
38293: GO 38314
// result := UnitsInside ( building ) < 6 ;
38295: LD_ADDR_VAR 0 2
38299: PUSH
38300: LD_VAR 0 1
38304: PPUSH
38305: CALL_OW 313
38309: PUSH
38310: LD_INT 6
38312: LESS
38313: ST_TO_ADDR
// end ;
38314: LD_VAR 0 2
38318: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38319: LD_INT 0
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
// tmp := [ ] ;
38325: LD_ADDR_VAR 0 3
38329: PUSH
38330: EMPTY
38331: ST_TO_ADDR
// list := [ ] ;
38332: LD_ADDR_VAR 0 5
38336: PUSH
38337: EMPTY
38338: ST_TO_ADDR
// for i = 16 to 25 do
38339: LD_ADDR_VAR 0 4
38343: PUSH
38344: DOUBLE
38345: LD_INT 16
38347: DEC
38348: ST_TO_ADDR
38349: LD_INT 25
38351: PUSH
38352: FOR_TO
38353: IFFALSE 38426
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38355: LD_ADDR_VAR 0 3
38359: PUSH
38360: LD_VAR 0 3
38364: PUSH
38365: LD_INT 22
38367: PUSH
38368: LD_VAR 0 1
38372: PPUSH
38373: CALL_OW 255
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 91
38384: PUSH
38385: LD_VAR 0 1
38389: PUSH
38390: LD_INT 6
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 30
38400: PUSH
38401: LD_VAR 0 4
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: PPUSH
38418: CALL_OW 69
38422: ADD
38423: ST_TO_ADDR
38424: GO 38352
38426: POP
38427: POP
// for i = 1 to tmp do
38428: LD_ADDR_VAR 0 4
38432: PUSH
38433: DOUBLE
38434: LD_INT 1
38436: DEC
38437: ST_TO_ADDR
38438: LD_VAR 0 3
38442: PUSH
38443: FOR_TO
38444: IFFALSE 38532
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38446: LD_ADDR_VAR 0 5
38450: PUSH
38451: LD_VAR 0 5
38455: PUSH
38456: LD_VAR 0 3
38460: PUSH
38461: LD_VAR 0 4
38465: ARRAY
38466: PPUSH
38467: CALL_OW 266
38471: PUSH
38472: LD_VAR 0 3
38476: PUSH
38477: LD_VAR 0 4
38481: ARRAY
38482: PPUSH
38483: CALL_OW 250
38487: PUSH
38488: LD_VAR 0 3
38492: PUSH
38493: LD_VAR 0 4
38497: ARRAY
38498: PPUSH
38499: CALL_OW 251
38503: PUSH
38504: LD_VAR 0 3
38508: PUSH
38509: LD_VAR 0 4
38513: ARRAY
38514: PPUSH
38515: CALL_OW 254
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: PUSH
38526: EMPTY
38527: LIST
38528: ADD
38529: ST_TO_ADDR
38530: GO 38443
38532: POP
38533: POP
// result := list ;
38534: LD_ADDR_VAR 0 2
38538: PUSH
38539: LD_VAR 0 5
38543: ST_TO_ADDR
// end ;
38544: LD_VAR 0 2
38548: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38549: LD_INT 0
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
// if not factory then
38558: LD_VAR 0 1
38562: NOT
38563: IFFALSE 38567
// exit ;
38565: GO 39160
// if control = control_apeman then
38567: LD_VAR 0 4
38571: PUSH
38572: LD_INT 5
38574: EQUAL
38575: IFFALSE 38684
// begin tmp := UnitsInside ( factory ) ;
38577: LD_ADDR_VAR 0 8
38581: PUSH
38582: LD_VAR 0 1
38586: PPUSH
38587: CALL_OW 313
38591: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38592: LD_VAR 0 8
38596: PPUSH
38597: LD_INT 25
38599: PUSH
38600: LD_INT 12
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PPUSH
38607: CALL_OW 72
38611: NOT
38612: IFFALSE 38622
// control := control_manual ;
38614: LD_ADDR_VAR 0 4
38618: PUSH
38619: LD_INT 1
38621: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38622: LD_ADDR_VAR 0 8
38626: PUSH
38627: LD_VAR 0 1
38631: PPUSH
38632: CALL 38319 0 1
38636: ST_TO_ADDR
// if tmp then
38637: LD_VAR 0 8
38641: IFFALSE 38684
// begin for i in tmp do
38643: LD_ADDR_VAR 0 7
38647: PUSH
38648: LD_VAR 0 8
38652: PUSH
38653: FOR_IN
38654: IFFALSE 38682
// if i [ 1 ] = b_ext_radio then
38656: LD_VAR 0 7
38660: PUSH
38661: LD_INT 1
38663: ARRAY
38664: PUSH
38665: LD_INT 22
38667: EQUAL
38668: IFFALSE 38680
// begin control := control_remote ;
38670: LD_ADDR_VAR 0 4
38674: PUSH
38675: LD_INT 2
38677: ST_TO_ADDR
// break ;
38678: GO 38682
// end ;
38680: GO 38653
38682: POP
38683: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38684: LD_VAR 0 1
38688: PPUSH
38689: LD_VAR 0 2
38693: PPUSH
38694: LD_VAR 0 3
38698: PPUSH
38699: LD_VAR 0 4
38703: PPUSH
38704: LD_VAR 0 5
38708: PPUSH
38709: CALL_OW 448
38713: IFFALSE 38748
// begin result := [ chassis , engine , control , weapon ] ;
38715: LD_ADDR_VAR 0 6
38719: PUSH
38720: LD_VAR 0 2
38724: PUSH
38725: LD_VAR 0 3
38729: PUSH
38730: LD_VAR 0 4
38734: PUSH
38735: LD_VAR 0 5
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: ST_TO_ADDR
// exit ;
38746: GO 39160
// end ; _chassis := AvailableChassisList ( factory ) ;
38748: LD_ADDR_VAR 0 9
38752: PUSH
38753: LD_VAR 0 1
38757: PPUSH
38758: CALL_OW 475
38762: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38763: LD_ADDR_VAR 0 11
38767: PUSH
38768: LD_VAR 0 1
38772: PPUSH
38773: CALL_OW 476
38777: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38778: LD_ADDR_VAR 0 12
38782: PUSH
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 477
38792: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38793: LD_ADDR_VAR 0 10
38797: PUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 478
38807: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38808: LD_VAR 0 9
38812: NOT
38813: PUSH
38814: LD_VAR 0 11
38818: NOT
38819: OR
38820: PUSH
38821: LD_VAR 0 12
38825: NOT
38826: OR
38827: PUSH
38828: LD_VAR 0 10
38832: NOT
38833: OR
38834: IFFALSE 38869
// begin result := [ chassis , engine , control , weapon ] ;
38836: LD_ADDR_VAR 0 6
38840: PUSH
38841: LD_VAR 0 2
38845: PUSH
38846: LD_VAR 0 3
38850: PUSH
38851: LD_VAR 0 4
38855: PUSH
38856: LD_VAR 0 5
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
// exit ;
38867: GO 39160
// end ; if not chassis in _chassis then
38869: LD_VAR 0 2
38873: PUSH
38874: LD_VAR 0 9
38878: IN
38879: NOT
38880: IFFALSE 38906
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38882: LD_ADDR_VAR 0 2
38886: PUSH
38887: LD_VAR 0 9
38891: PUSH
38892: LD_INT 1
38894: PPUSH
38895: LD_VAR 0 9
38899: PPUSH
38900: CALL_OW 12
38904: ARRAY
38905: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38906: LD_VAR 0 2
38910: PPUSH
38911: LD_VAR 0 3
38915: PPUSH
38916: CALL 39165 0 2
38920: NOT
38921: IFFALSE 38980
// repeat engine := _engine [ 1 ] ;
38923: LD_ADDR_VAR 0 3
38927: PUSH
38928: LD_VAR 0 11
38932: PUSH
38933: LD_INT 1
38935: ARRAY
38936: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38937: LD_ADDR_VAR 0 11
38941: PUSH
38942: LD_VAR 0 11
38946: PPUSH
38947: LD_INT 1
38949: PPUSH
38950: CALL_OW 3
38954: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38955: LD_VAR 0 2
38959: PPUSH
38960: LD_VAR 0 3
38964: PPUSH
38965: CALL 39165 0 2
38969: PUSH
38970: LD_VAR 0 11
38974: PUSH
38975: EMPTY
38976: EQUAL
38977: OR
38978: IFFALSE 38923
// if not control in _control then
38980: LD_VAR 0 4
38984: PUSH
38985: LD_VAR 0 12
38989: IN
38990: NOT
38991: IFFALSE 39017
// control := _control [ rand ( 1 , _control ) ] ;
38993: LD_ADDR_VAR 0 4
38997: PUSH
38998: LD_VAR 0 12
39002: PUSH
39003: LD_INT 1
39005: PPUSH
39006: LD_VAR 0 12
39010: PPUSH
39011: CALL_OW 12
39015: ARRAY
39016: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39017: LD_VAR 0 2
39021: PPUSH
39022: LD_VAR 0 5
39026: PPUSH
39027: CALL 39385 0 2
39031: NOT
39032: IFFALSE 39091
// repeat weapon := _weapon [ 1 ] ;
39034: LD_ADDR_VAR 0 5
39038: PUSH
39039: LD_VAR 0 10
39043: PUSH
39044: LD_INT 1
39046: ARRAY
39047: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39048: LD_ADDR_VAR 0 10
39052: PUSH
39053: LD_VAR 0 10
39057: PPUSH
39058: LD_INT 1
39060: PPUSH
39061: CALL_OW 3
39065: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39066: LD_VAR 0 2
39070: PPUSH
39071: LD_VAR 0 5
39075: PPUSH
39076: CALL 39385 0 2
39080: PUSH
39081: LD_VAR 0 10
39085: PUSH
39086: EMPTY
39087: EQUAL
39088: OR
39089: IFFALSE 39034
// result := [ ] ;
39091: LD_ADDR_VAR 0 6
39095: PUSH
39096: EMPTY
39097: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39098: LD_VAR 0 1
39102: PPUSH
39103: LD_VAR 0 2
39107: PPUSH
39108: LD_VAR 0 3
39112: PPUSH
39113: LD_VAR 0 4
39117: PPUSH
39118: LD_VAR 0 5
39122: PPUSH
39123: CALL_OW 448
39127: IFFALSE 39160
// result := [ chassis , engine , control , weapon ] ;
39129: LD_ADDR_VAR 0 6
39133: PUSH
39134: LD_VAR 0 2
39138: PUSH
39139: LD_VAR 0 3
39143: PUSH
39144: LD_VAR 0 4
39148: PUSH
39149: LD_VAR 0 5
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: ST_TO_ADDR
// end ;
39160: LD_VAR 0 6
39164: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39165: LD_INT 0
39167: PPUSH
// if not chassis or not engine then
39168: LD_VAR 0 1
39172: NOT
39173: PUSH
39174: LD_VAR 0 2
39178: NOT
39179: OR
39180: IFFALSE 39184
// exit ;
39182: GO 39380
// case engine of engine_solar :
39184: LD_VAR 0 2
39188: PUSH
39189: LD_INT 2
39191: DOUBLE
39192: EQUAL
39193: IFTRUE 39197
39195: GO 39235
39197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39198: LD_ADDR_VAR 0 3
39202: PUSH
39203: LD_INT 11
39205: PUSH
39206: LD_INT 12
39208: PUSH
39209: LD_INT 13
39211: PUSH
39212: LD_INT 14
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: LD_INT 3
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: ST_TO_ADDR
39233: GO 39364
39235: LD_INT 1
39237: DOUBLE
39238: EQUAL
39239: IFTRUE 39243
39241: GO 39305
39243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39244: LD_ADDR_VAR 0 3
39248: PUSH
39249: LD_INT 11
39251: PUSH
39252: LD_INT 12
39254: PUSH
39255: LD_INT 13
39257: PUSH
39258: LD_INT 14
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: LD_INT 3
39269: PUSH
39270: LD_INT 4
39272: PUSH
39273: LD_INT 5
39275: PUSH
39276: LD_INT 21
39278: PUSH
39279: LD_INT 23
39281: PUSH
39282: LD_INT 22
39284: PUSH
39285: LD_INT 24
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: ST_TO_ADDR
39303: GO 39364
39305: LD_INT 3
39307: DOUBLE
39308: EQUAL
39309: IFTRUE 39313
39311: GO 39363
39313: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39314: LD_ADDR_VAR 0 3
39318: PUSH
39319: LD_INT 13
39321: PUSH
39322: LD_INT 14
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: LD_INT 3
39330: PUSH
39331: LD_INT 4
39333: PUSH
39334: LD_INT 5
39336: PUSH
39337: LD_INT 21
39339: PUSH
39340: LD_INT 22
39342: PUSH
39343: LD_INT 23
39345: PUSH
39346: LD_INT 24
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: ST_TO_ADDR
39361: GO 39364
39363: POP
// result := ( chassis in result ) ;
39364: LD_ADDR_VAR 0 3
39368: PUSH
39369: LD_VAR 0 1
39373: PUSH
39374: LD_VAR 0 3
39378: IN
39379: ST_TO_ADDR
// end ;
39380: LD_VAR 0 3
39384: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39385: LD_INT 0
39387: PPUSH
// if not chassis or not weapon then
39388: LD_VAR 0 1
39392: NOT
39393: PUSH
39394: LD_VAR 0 2
39398: NOT
39399: OR
39400: IFFALSE 39404
// exit ;
39402: GO 40430
// case weapon of us_machine_gun :
39404: LD_VAR 0 2
39408: PUSH
39409: LD_INT 2
39411: DOUBLE
39412: EQUAL
39413: IFTRUE 39417
39415: GO 39447
39417: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39418: LD_ADDR_VAR 0 3
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: LD_INT 4
39434: PUSH
39435: LD_INT 5
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: ST_TO_ADDR
39445: GO 40414
39447: LD_INT 3
39449: DOUBLE
39450: EQUAL
39451: IFTRUE 39455
39453: GO 39485
39455: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39456: LD_ADDR_VAR 0 3
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 3
39469: PUSH
39470: LD_INT 4
39472: PUSH
39473: LD_INT 5
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: ST_TO_ADDR
39483: GO 40414
39485: LD_INT 11
39487: DOUBLE
39488: EQUAL
39489: IFTRUE 39493
39491: GO 39523
39493: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39494: LD_ADDR_VAR 0 3
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 3
39507: PUSH
39508: LD_INT 4
39510: PUSH
39511: LD_INT 5
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: ST_TO_ADDR
39521: GO 40414
39523: LD_INT 4
39525: DOUBLE
39526: EQUAL
39527: IFTRUE 39531
39529: GO 39557
39531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39532: LD_ADDR_VAR 0 3
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: LD_INT 4
39545: PUSH
39546: LD_INT 5
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
39555: GO 40414
39557: LD_INT 5
39559: DOUBLE
39560: EQUAL
39561: IFTRUE 39565
39563: GO 39591
39565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39566: LD_ADDR_VAR 0 3
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: LD_INT 3
39576: PUSH
39577: LD_INT 4
39579: PUSH
39580: LD_INT 5
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: ST_TO_ADDR
39589: GO 40414
39591: LD_INT 9
39593: DOUBLE
39594: EQUAL
39595: IFTRUE 39599
39597: GO 39625
39599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39600: LD_ADDR_VAR 0 3
39604: PUSH
39605: LD_INT 2
39607: PUSH
39608: LD_INT 3
39610: PUSH
39611: LD_INT 4
39613: PUSH
39614: LD_INT 5
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: ST_TO_ADDR
39623: GO 40414
39625: LD_INT 7
39627: DOUBLE
39628: EQUAL
39629: IFTRUE 39633
39631: GO 39659
39633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39634: LD_ADDR_VAR 0 3
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: LD_INT 3
39644: PUSH
39645: LD_INT 4
39647: PUSH
39648: LD_INT 5
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: ST_TO_ADDR
39657: GO 40414
39659: LD_INT 12
39661: DOUBLE
39662: EQUAL
39663: IFTRUE 39667
39665: GO 39693
39667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39668: LD_ADDR_VAR 0 3
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: LD_INT 3
39678: PUSH
39679: LD_INT 4
39681: PUSH
39682: LD_INT 5
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: ST_TO_ADDR
39691: GO 40414
39693: LD_INT 13
39695: DOUBLE
39696: EQUAL
39697: IFTRUE 39701
39699: GO 39727
39701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39702: LD_ADDR_VAR 0 3
39706: PUSH
39707: LD_INT 2
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: LD_INT 4
39715: PUSH
39716: LD_INT 5
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: ST_TO_ADDR
39725: GO 40414
39727: LD_INT 14
39729: DOUBLE
39730: EQUAL
39731: IFTRUE 39735
39733: GO 39753
39735: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39736: LD_ADDR_VAR 0 3
39740: PUSH
39741: LD_INT 4
39743: PUSH
39744: LD_INT 5
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: ST_TO_ADDR
39751: GO 40414
39753: LD_INT 6
39755: DOUBLE
39756: EQUAL
39757: IFTRUE 39761
39759: GO 39779
39761: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39762: LD_ADDR_VAR 0 3
39766: PUSH
39767: LD_INT 4
39769: PUSH
39770: LD_INT 5
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: ST_TO_ADDR
39777: GO 40414
39779: LD_INT 10
39781: DOUBLE
39782: EQUAL
39783: IFTRUE 39787
39785: GO 39805
39787: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39788: LD_ADDR_VAR 0 3
39792: PUSH
39793: LD_INT 4
39795: PUSH
39796: LD_INT 5
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: ST_TO_ADDR
39803: GO 40414
39805: LD_INT 22
39807: DOUBLE
39808: EQUAL
39809: IFTRUE 39813
39811: GO 39839
39813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39814: LD_ADDR_VAR 0 3
39818: PUSH
39819: LD_INT 11
39821: PUSH
39822: LD_INT 12
39824: PUSH
39825: LD_INT 13
39827: PUSH
39828: LD_INT 14
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: ST_TO_ADDR
39837: GO 40414
39839: LD_INT 23
39841: DOUBLE
39842: EQUAL
39843: IFTRUE 39847
39845: GO 39873
39847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39848: LD_ADDR_VAR 0 3
39852: PUSH
39853: LD_INT 11
39855: PUSH
39856: LD_INT 12
39858: PUSH
39859: LD_INT 13
39861: PUSH
39862: LD_INT 14
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: ST_TO_ADDR
39871: GO 40414
39873: LD_INT 24
39875: DOUBLE
39876: EQUAL
39877: IFTRUE 39881
39879: GO 39907
39881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_INT 11
39889: PUSH
39890: LD_INT 12
39892: PUSH
39893: LD_INT 13
39895: PUSH
39896: LD_INT 14
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
39905: GO 40414
39907: LD_INT 30
39909: DOUBLE
39910: EQUAL
39911: IFTRUE 39915
39913: GO 39941
39915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39916: LD_ADDR_VAR 0 3
39920: PUSH
39921: LD_INT 11
39923: PUSH
39924: LD_INT 12
39926: PUSH
39927: LD_INT 13
39929: PUSH
39930: LD_INT 14
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: ST_TO_ADDR
39939: GO 40414
39941: LD_INT 25
39943: DOUBLE
39944: EQUAL
39945: IFTRUE 39949
39947: GO 39967
39949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39950: LD_ADDR_VAR 0 3
39954: PUSH
39955: LD_INT 13
39957: PUSH
39958: LD_INT 14
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: ST_TO_ADDR
39965: GO 40414
39967: LD_INT 27
39969: DOUBLE
39970: EQUAL
39971: IFTRUE 39975
39973: GO 39993
39975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39976: LD_ADDR_VAR 0 3
39980: PUSH
39981: LD_INT 13
39983: PUSH
39984: LD_INT 14
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: ST_TO_ADDR
39991: GO 40414
39993: LD_INT 28
39995: DOUBLE
39996: EQUAL
39997: IFTRUE 40001
39999: GO 40019
40001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40002: LD_ADDR_VAR 0 3
40006: PUSH
40007: LD_INT 13
40009: PUSH
40010: LD_INT 14
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: ST_TO_ADDR
40017: GO 40414
40019: LD_INT 29
40021: DOUBLE
40022: EQUAL
40023: IFTRUE 40027
40025: GO 40045
40027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40028: LD_ADDR_VAR 0 3
40032: PUSH
40033: LD_INT 13
40035: PUSH
40036: LD_INT 14
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: ST_TO_ADDR
40043: GO 40414
40045: LD_INT 31
40047: DOUBLE
40048: EQUAL
40049: IFTRUE 40053
40051: GO 40071
40053: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40054: LD_ADDR_VAR 0 3
40058: PUSH
40059: LD_INT 13
40061: PUSH
40062: LD_INT 14
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: ST_TO_ADDR
40069: GO 40414
40071: LD_INT 26
40073: DOUBLE
40074: EQUAL
40075: IFTRUE 40079
40077: GO 40097
40079: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40080: LD_ADDR_VAR 0 3
40084: PUSH
40085: LD_INT 13
40087: PUSH
40088: LD_INT 14
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: ST_TO_ADDR
40095: GO 40414
40097: LD_INT 42
40099: DOUBLE
40100: EQUAL
40101: IFTRUE 40105
40103: GO 40131
40105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40106: LD_ADDR_VAR 0 3
40110: PUSH
40111: LD_INT 21
40113: PUSH
40114: LD_INT 22
40116: PUSH
40117: LD_INT 23
40119: PUSH
40120: LD_INT 24
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: ST_TO_ADDR
40129: GO 40414
40131: LD_INT 43
40133: DOUBLE
40134: EQUAL
40135: IFTRUE 40139
40137: GO 40165
40139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40140: LD_ADDR_VAR 0 3
40144: PUSH
40145: LD_INT 21
40147: PUSH
40148: LD_INT 22
40150: PUSH
40151: LD_INT 23
40153: PUSH
40154: LD_INT 24
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: ST_TO_ADDR
40163: GO 40414
40165: LD_INT 44
40167: DOUBLE
40168: EQUAL
40169: IFTRUE 40173
40171: GO 40199
40173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40174: LD_ADDR_VAR 0 3
40178: PUSH
40179: LD_INT 21
40181: PUSH
40182: LD_INT 22
40184: PUSH
40185: LD_INT 23
40187: PUSH
40188: LD_INT 24
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: ST_TO_ADDR
40197: GO 40414
40199: LD_INT 45
40201: DOUBLE
40202: EQUAL
40203: IFTRUE 40207
40205: GO 40233
40207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40208: LD_ADDR_VAR 0 3
40212: PUSH
40213: LD_INT 21
40215: PUSH
40216: LD_INT 22
40218: PUSH
40219: LD_INT 23
40221: PUSH
40222: LD_INT 24
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: ST_TO_ADDR
40231: GO 40414
40233: LD_INT 49
40235: DOUBLE
40236: EQUAL
40237: IFTRUE 40241
40239: GO 40267
40241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40242: LD_ADDR_VAR 0 3
40246: PUSH
40247: LD_INT 21
40249: PUSH
40250: LD_INT 22
40252: PUSH
40253: LD_INT 23
40255: PUSH
40256: LD_INT 24
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
40265: GO 40414
40267: LD_INT 51
40269: DOUBLE
40270: EQUAL
40271: IFTRUE 40275
40273: GO 40301
40275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40276: LD_ADDR_VAR 0 3
40280: PUSH
40281: LD_INT 21
40283: PUSH
40284: LD_INT 22
40286: PUSH
40287: LD_INT 23
40289: PUSH
40290: LD_INT 24
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: ST_TO_ADDR
40299: GO 40414
40301: LD_INT 52
40303: DOUBLE
40304: EQUAL
40305: IFTRUE 40309
40307: GO 40335
40309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40310: LD_ADDR_VAR 0 3
40314: PUSH
40315: LD_INT 21
40317: PUSH
40318: LD_INT 22
40320: PUSH
40321: LD_INT 23
40323: PUSH
40324: LD_INT 24
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
40333: GO 40414
40335: LD_INT 53
40337: DOUBLE
40338: EQUAL
40339: IFTRUE 40343
40341: GO 40361
40343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40344: LD_ADDR_VAR 0 3
40348: PUSH
40349: LD_INT 23
40351: PUSH
40352: LD_INT 24
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: ST_TO_ADDR
40359: GO 40414
40361: LD_INT 46
40363: DOUBLE
40364: EQUAL
40365: IFTRUE 40369
40367: GO 40387
40369: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40370: LD_ADDR_VAR 0 3
40374: PUSH
40375: LD_INT 23
40377: PUSH
40378: LD_INT 24
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: ST_TO_ADDR
40385: GO 40414
40387: LD_INT 47
40389: DOUBLE
40390: EQUAL
40391: IFTRUE 40395
40393: GO 40413
40395: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40396: LD_ADDR_VAR 0 3
40400: PUSH
40401: LD_INT 23
40403: PUSH
40404: LD_INT 24
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: ST_TO_ADDR
40411: GO 40414
40413: POP
// result := ( chassis in result ) ;
40414: LD_ADDR_VAR 0 3
40418: PUSH
40419: LD_VAR 0 1
40423: PUSH
40424: LD_VAR 0 3
40428: IN
40429: ST_TO_ADDR
// end ;
40430: LD_VAR 0 3
40434: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40435: LD_INT 0
40437: PPUSH
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
// result := array ;
40444: LD_ADDR_VAR 0 5
40448: PUSH
40449: LD_VAR 0 1
40453: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40454: LD_VAR 0 1
40458: NOT
40459: PUSH
40460: LD_VAR 0 2
40464: NOT
40465: OR
40466: PUSH
40467: LD_VAR 0 3
40471: NOT
40472: OR
40473: PUSH
40474: LD_VAR 0 2
40478: PUSH
40479: LD_VAR 0 1
40483: GREATER
40484: OR
40485: PUSH
40486: LD_VAR 0 3
40490: PUSH
40491: LD_VAR 0 1
40495: GREATER
40496: OR
40497: IFFALSE 40501
// exit ;
40499: GO 40797
// if direction then
40501: LD_VAR 0 4
40505: IFFALSE 40569
// begin d := 1 ;
40507: LD_ADDR_VAR 0 9
40511: PUSH
40512: LD_INT 1
40514: ST_TO_ADDR
// if i_from > i_to then
40515: LD_VAR 0 2
40519: PUSH
40520: LD_VAR 0 3
40524: GREATER
40525: IFFALSE 40551
// length := ( array - i_from ) + i_to else
40527: LD_ADDR_VAR 0 11
40531: PUSH
40532: LD_VAR 0 1
40536: PUSH
40537: LD_VAR 0 2
40541: MINUS
40542: PUSH
40543: LD_VAR 0 3
40547: PLUS
40548: ST_TO_ADDR
40549: GO 40567
// length := i_to - i_from ;
40551: LD_ADDR_VAR 0 11
40555: PUSH
40556: LD_VAR 0 3
40560: PUSH
40561: LD_VAR 0 2
40565: MINUS
40566: ST_TO_ADDR
// end else
40567: GO 40630
// begin d := - 1 ;
40569: LD_ADDR_VAR 0 9
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: ST_TO_ADDR
// if i_from > i_to then
40578: LD_VAR 0 2
40582: PUSH
40583: LD_VAR 0 3
40587: GREATER
40588: IFFALSE 40608
// length := i_from - i_to else
40590: LD_ADDR_VAR 0 11
40594: PUSH
40595: LD_VAR 0 2
40599: PUSH
40600: LD_VAR 0 3
40604: MINUS
40605: ST_TO_ADDR
40606: GO 40630
// length := ( array - i_to ) + i_from ;
40608: LD_ADDR_VAR 0 11
40612: PUSH
40613: LD_VAR 0 1
40617: PUSH
40618: LD_VAR 0 3
40622: MINUS
40623: PUSH
40624: LD_VAR 0 2
40628: PLUS
40629: ST_TO_ADDR
// end ; if not length then
40630: LD_VAR 0 11
40634: NOT
40635: IFFALSE 40639
// exit ;
40637: GO 40797
// tmp := array ;
40639: LD_ADDR_VAR 0 10
40643: PUSH
40644: LD_VAR 0 1
40648: ST_TO_ADDR
// for i = 1 to length do
40649: LD_ADDR_VAR 0 6
40653: PUSH
40654: DOUBLE
40655: LD_INT 1
40657: DEC
40658: ST_TO_ADDR
40659: LD_VAR 0 11
40663: PUSH
40664: FOR_TO
40665: IFFALSE 40785
// begin for j = 1 to array do
40667: LD_ADDR_VAR 0 7
40671: PUSH
40672: DOUBLE
40673: LD_INT 1
40675: DEC
40676: ST_TO_ADDR
40677: LD_VAR 0 1
40681: PUSH
40682: FOR_TO
40683: IFFALSE 40771
// begin k := j + d ;
40685: LD_ADDR_VAR 0 8
40689: PUSH
40690: LD_VAR 0 7
40694: PUSH
40695: LD_VAR 0 9
40699: PLUS
40700: ST_TO_ADDR
// if k > array then
40701: LD_VAR 0 8
40705: PUSH
40706: LD_VAR 0 1
40710: GREATER
40711: IFFALSE 40721
// k := 1 ;
40713: LD_ADDR_VAR 0 8
40717: PUSH
40718: LD_INT 1
40720: ST_TO_ADDR
// if not k then
40721: LD_VAR 0 8
40725: NOT
40726: IFFALSE 40738
// k := array ;
40728: LD_ADDR_VAR 0 8
40732: PUSH
40733: LD_VAR 0 1
40737: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40738: LD_ADDR_VAR 0 10
40742: PUSH
40743: LD_VAR 0 10
40747: PPUSH
40748: LD_VAR 0 8
40752: PPUSH
40753: LD_VAR 0 1
40757: PUSH
40758: LD_VAR 0 7
40762: ARRAY
40763: PPUSH
40764: CALL_OW 1
40768: ST_TO_ADDR
// end ;
40769: GO 40682
40771: POP
40772: POP
// array := tmp ;
40773: LD_ADDR_VAR 0 1
40777: PUSH
40778: LD_VAR 0 10
40782: ST_TO_ADDR
// end ;
40783: GO 40664
40785: POP
40786: POP
// result := array ;
40787: LD_ADDR_VAR 0 5
40791: PUSH
40792: LD_VAR 0 1
40796: ST_TO_ADDR
// end ;
40797: LD_VAR 0 5
40801: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40802: LD_INT 0
40804: PPUSH
40805: PPUSH
// result := 0 ;
40806: LD_ADDR_VAR 0 3
40810: PUSH
40811: LD_INT 0
40813: ST_TO_ADDR
// if not array or not value in array then
40814: LD_VAR 0 1
40818: NOT
40819: PUSH
40820: LD_VAR 0 2
40824: PUSH
40825: LD_VAR 0 1
40829: IN
40830: NOT
40831: OR
40832: IFFALSE 40836
// exit ;
40834: GO 40890
// for i = 1 to array do
40836: LD_ADDR_VAR 0 4
40840: PUSH
40841: DOUBLE
40842: LD_INT 1
40844: DEC
40845: ST_TO_ADDR
40846: LD_VAR 0 1
40850: PUSH
40851: FOR_TO
40852: IFFALSE 40888
// if value = array [ i ] then
40854: LD_VAR 0 2
40858: PUSH
40859: LD_VAR 0 1
40863: PUSH
40864: LD_VAR 0 4
40868: ARRAY
40869: EQUAL
40870: IFFALSE 40886
// begin result := i ;
40872: LD_ADDR_VAR 0 3
40876: PUSH
40877: LD_VAR 0 4
40881: ST_TO_ADDR
// exit ;
40882: POP
40883: POP
40884: GO 40890
// end ;
40886: GO 40851
40888: POP
40889: POP
// end ;
40890: LD_VAR 0 3
40894: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40895: LD_INT 0
40897: PPUSH
// vc_chassis := chassis ;
40898: LD_ADDR_OWVAR 37
40902: PUSH
40903: LD_VAR 0 1
40907: ST_TO_ADDR
// vc_engine := engine ;
40908: LD_ADDR_OWVAR 39
40912: PUSH
40913: LD_VAR 0 2
40917: ST_TO_ADDR
// vc_control := control ;
40918: LD_ADDR_OWVAR 38
40922: PUSH
40923: LD_VAR 0 3
40927: ST_TO_ADDR
// vc_weapon := weapon ;
40928: LD_ADDR_OWVAR 40
40932: PUSH
40933: LD_VAR 0 4
40937: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40938: LD_ADDR_OWVAR 41
40942: PUSH
40943: LD_VAR 0 5
40947: ST_TO_ADDR
// end ;
40948: LD_VAR 0 6
40952: RET
// export function WantPlant ( unit ) ; var task ; begin
40953: LD_INT 0
40955: PPUSH
40956: PPUSH
// result := false ;
40957: LD_ADDR_VAR 0 2
40961: PUSH
40962: LD_INT 0
40964: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40965: LD_ADDR_VAR 0 3
40969: PUSH
40970: LD_VAR 0 1
40974: PPUSH
40975: CALL_OW 437
40979: ST_TO_ADDR
// if task then
40980: LD_VAR 0 3
40984: IFFALSE 41012
// if task [ 1 ] [ 1 ] = p then
40986: LD_VAR 0 3
40990: PUSH
40991: LD_INT 1
40993: ARRAY
40994: PUSH
40995: LD_INT 1
40997: ARRAY
40998: PUSH
40999: LD_STRING p
41001: EQUAL
41002: IFFALSE 41012
// result := true ;
41004: LD_ADDR_VAR 0 2
41008: PUSH
41009: LD_INT 1
41011: ST_TO_ADDR
// end ;
41012: LD_VAR 0 2
41016: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41017: LD_INT 0
41019: PPUSH
41020: PPUSH
41021: PPUSH
41022: PPUSH
// if pos < 1 then
41023: LD_VAR 0 2
41027: PUSH
41028: LD_INT 1
41030: LESS
41031: IFFALSE 41035
// exit ;
41033: GO 41338
// if pos = 1 then
41035: LD_VAR 0 2
41039: PUSH
41040: LD_INT 1
41042: EQUAL
41043: IFFALSE 41076
// result := Replace ( arr , pos [ 1 ] , value ) else
41045: LD_ADDR_VAR 0 4
41049: PUSH
41050: LD_VAR 0 1
41054: PPUSH
41055: LD_VAR 0 2
41059: PUSH
41060: LD_INT 1
41062: ARRAY
41063: PPUSH
41064: LD_VAR 0 3
41068: PPUSH
41069: CALL_OW 1
41073: ST_TO_ADDR
41074: GO 41338
// begin tmp := arr ;
41076: LD_ADDR_VAR 0 6
41080: PUSH
41081: LD_VAR 0 1
41085: ST_TO_ADDR
// s_arr := [ tmp ] ;
41086: LD_ADDR_VAR 0 7
41090: PUSH
41091: LD_VAR 0 6
41095: PUSH
41096: EMPTY
41097: LIST
41098: ST_TO_ADDR
// for i = 1 to pos - 1 do
41099: LD_ADDR_VAR 0 5
41103: PUSH
41104: DOUBLE
41105: LD_INT 1
41107: DEC
41108: ST_TO_ADDR
41109: LD_VAR 0 2
41113: PUSH
41114: LD_INT 1
41116: MINUS
41117: PUSH
41118: FOR_TO
41119: IFFALSE 41164
// begin tmp := tmp [ pos [ i ] ] ;
41121: LD_ADDR_VAR 0 6
41125: PUSH
41126: LD_VAR 0 6
41130: PUSH
41131: LD_VAR 0 2
41135: PUSH
41136: LD_VAR 0 5
41140: ARRAY
41141: ARRAY
41142: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41143: LD_ADDR_VAR 0 7
41147: PUSH
41148: LD_VAR 0 7
41152: PUSH
41153: LD_VAR 0 6
41157: PUSH
41158: EMPTY
41159: LIST
41160: ADD
41161: ST_TO_ADDR
// end ;
41162: GO 41118
41164: POP
41165: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41166: LD_ADDR_VAR 0 6
41170: PUSH
41171: LD_VAR 0 6
41175: PPUSH
41176: LD_VAR 0 2
41180: PUSH
41181: LD_VAR 0 2
41185: ARRAY
41186: PPUSH
41187: LD_VAR 0 3
41191: PPUSH
41192: CALL_OW 1
41196: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41197: LD_ADDR_VAR 0 7
41201: PUSH
41202: LD_VAR 0 7
41206: PPUSH
41207: LD_VAR 0 7
41211: PPUSH
41212: LD_VAR 0 6
41216: PPUSH
41217: CALL_OW 1
41221: ST_TO_ADDR
// for i = s_arr downto 2 do
41222: LD_ADDR_VAR 0 5
41226: PUSH
41227: DOUBLE
41228: LD_VAR 0 7
41232: INC
41233: ST_TO_ADDR
41234: LD_INT 2
41236: PUSH
41237: FOR_DOWNTO
41238: IFFALSE 41322
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41240: LD_ADDR_VAR 0 6
41244: PUSH
41245: LD_VAR 0 7
41249: PUSH
41250: LD_VAR 0 5
41254: PUSH
41255: LD_INT 1
41257: MINUS
41258: ARRAY
41259: PPUSH
41260: LD_VAR 0 2
41264: PUSH
41265: LD_VAR 0 5
41269: PUSH
41270: LD_INT 1
41272: MINUS
41273: ARRAY
41274: PPUSH
41275: LD_VAR 0 7
41279: PUSH
41280: LD_VAR 0 5
41284: ARRAY
41285: PPUSH
41286: CALL_OW 1
41290: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41291: LD_ADDR_VAR 0 7
41295: PUSH
41296: LD_VAR 0 7
41300: PPUSH
41301: LD_VAR 0 5
41305: PUSH
41306: LD_INT 1
41308: MINUS
41309: PPUSH
41310: LD_VAR 0 6
41314: PPUSH
41315: CALL_OW 1
41319: ST_TO_ADDR
// end ;
41320: GO 41237
41322: POP
41323: POP
// result := s_arr [ 1 ] ;
41324: LD_ADDR_VAR 0 4
41328: PUSH
41329: LD_VAR 0 7
41333: PUSH
41334: LD_INT 1
41336: ARRAY
41337: ST_TO_ADDR
// end ; end ;
41338: LD_VAR 0 4
41342: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41343: LD_INT 0
41345: PPUSH
41346: PPUSH
// if not list then
41347: LD_VAR 0 1
41351: NOT
41352: IFFALSE 41356
// exit ;
41354: GO 41447
// i := list [ pos1 ] ;
41356: LD_ADDR_VAR 0 5
41360: PUSH
41361: LD_VAR 0 1
41365: PUSH
41366: LD_VAR 0 2
41370: ARRAY
41371: ST_TO_ADDR
// if not i then
41372: LD_VAR 0 5
41376: NOT
41377: IFFALSE 41381
// exit ;
41379: GO 41447
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41381: LD_ADDR_VAR 0 1
41385: PUSH
41386: LD_VAR 0 1
41390: PPUSH
41391: LD_VAR 0 2
41395: PPUSH
41396: LD_VAR 0 1
41400: PUSH
41401: LD_VAR 0 3
41405: ARRAY
41406: PPUSH
41407: CALL_OW 1
41411: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41412: LD_ADDR_VAR 0 1
41416: PUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: LD_VAR 0 3
41426: PPUSH
41427: LD_VAR 0 5
41431: PPUSH
41432: CALL_OW 1
41436: ST_TO_ADDR
// result := list ;
41437: LD_ADDR_VAR 0 4
41441: PUSH
41442: LD_VAR 0 1
41446: ST_TO_ADDR
// end ;
41447: LD_VAR 0 4
41451: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41452: LD_INT 0
41454: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41455: LD_ADDR_VAR 0 5
41459: PUSH
41460: LD_VAR 0 1
41464: PPUSH
41465: CALL_OW 250
41469: PPUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: CALL_OW 251
41479: PPUSH
41480: LD_VAR 0 2
41484: PPUSH
41485: LD_VAR 0 3
41489: PPUSH
41490: LD_VAR 0 4
41494: PPUSH
41495: CALL 41505 0 5
41499: ST_TO_ADDR
// end ;
41500: LD_VAR 0 5
41504: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41505: LD_INT 0
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
// if not list then
41511: LD_VAR 0 3
41515: NOT
41516: IFFALSE 41520
// exit ;
41518: GO 41908
// result := [ ] ;
41520: LD_ADDR_VAR 0 6
41524: PUSH
41525: EMPTY
41526: ST_TO_ADDR
// for i in list do
41527: LD_ADDR_VAR 0 7
41531: PUSH
41532: LD_VAR 0 3
41536: PUSH
41537: FOR_IN
41538: IFFALSE 41740
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41540: LD_ADDR_VAR 0 9
41544: PUSH
41545: LD_VAR 0 7
41549: PPUSH
41550: LD_VAR 0 1
41554: PPUSH
41555: LD_VAR 0 2
41559: PPUSH
41560: CALL_OW 297
41564: ST_TO_ADDR
// if not result then
41565: LD_VAR 0 6
41569: NOT
41570: IFFALSE 41596
// result := [ [ i , tmp ] ] else
41572: LD_ADDR_VAR 0 6
41576: PUSH
41577: LD_VAR 0 7
41581: PUSH
41582: LD_VAR 0 9
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: EMPTY
41592: LIST
41593: ST_TO_ADDR
41594: GO 41738
// begin if result [ result ] [ 2 ] < tmp then
41596: LD_VAR 0 6
41600: PUSH
41601: LD_VAR 0 6
41605: ARRAY
41606: PUSH
41607: LD_INT 2
41609: ARRAY
41610: PUSH
41611: LD_VAR 0 9
41615: LESS
41616: IFFALSE 41658
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41618: LD_ADDR_VAR 0 6
41622: PUSH
41623: LD_VAR 0 6
41627: PPUSH
41628: LD_VAR 0 6
41632: PUSH
41633: LD_INT 1
41635: PLUS
41636: PPUSH
41637: LD_VAR 0 7
41641: PUSH
41642: LD_VAR 0 9
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PPUSH
41651: CALL_OW 2
41655: ST_TO_ADDR
41656: GO 41738
// for j = 1 to result do
41658: LD_ADDR_VAR 0 8
41662: PUSH
41663: DOUBLE
41664: LD_INT 1
41666: DEC
41667: ST_TO_ADDR
41668: LD_VAR 0 6
41672: PUSH
41673: FOR_TO
41674: IFFALSE 41736
// begin if tmp < result [ j ] [ 2 ] then
41676: LD_VAR 0 9
41680: PUSH
41681: LD_VAR 0 6
41685: PUSH
41686: LD_VAR 0 8
41690: ARRAY
41691: PUSH
41692: LD_INT 2
41694: ARRAY
41695: LESS
41696: IFFALSE 41734
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41698: LD_ADDR_VAR 0 6
41702: PUSH
41703: LD_VAR 0 6
41707: PPUSH
41708: LD_VAR 0 8
41712: PPUSH
41713: LD_VAR 0 7
41717: PUSH
41718: LD_VAR 0 9
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PPUSH
41727: CALL_OW 2
41731: ST_TO_ADDR
// break ;
41732: GO 41736
// end ; end ;
41734: GO 41673
41736: POP
41737: POP
// end ; end ;
41738: GO 41537
41740: POP
41741: POP
// if result and not asc then
41742: LD_VAR 0 6
41746: PUSH
41747: LD_VAR 0 4
41751: NOT
41752: AND
41753: IFFALSE 41828
// begin tmp := result ;
41755: LD_ADDR_VAR 0 9
41759: PUSH
41760: LD_VAR 0 6
41764: ST_TO_ADDR
// for i = tmp downto 1 do
41765: LD_ADDR_VAR 0 7
41769: PUSH
41770: DOUBLE
41771: LD_VAR 0 9
41775: INC
41776: ST_TO_ADDR
41777: LD_INT 1
41779: PUSH
41780: FOR_DOWNTO
41781: IFFALSE 41826
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41783: LD_ADDR_VAR 0 6
41787: PUSH
41788: LD_VAR 0 6
41792: PPUSH
41793: LD_VAR 0 9
41797: PUSH
41798: LD_VAR 0 7
41802: MINUS
41803: PUSH
41804: LD_INT 1
41806: PLUS
41807: PPUSH
41808: LD_VAR 0 9
41812: PUSH
41813: LD_VAR 0 7
41817: ARRAY
41818: PPUSH
41819: CALL_OW 1
41823: ST_TO_ADDR
41824: GO 41780
41826: POP
41827: POP
// end ; tmp := [ ] ;
41828: LD_ADDR_VAR 0 9
41832: PUSH
41833: EMPTY
41834: ST_TO_ADDR
// if mode then
41835: LD_VAR 0 5
41839: IFFALSE 41908
// begin for i = 1 to result do
41841: LD_ADDR_VAR 0 7
41845: PUSH
41846: DOUBLE
41847: LD_INT 1
41849: DEC
41850: ST_TO_ADDR
41851: LD_VAR 0 6
41855: PUSH
41856: FOR_TO
41857: IFFALSE 41896
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41859: LD_ADDR_VAR 0 9
41863: PUSH
41864: LD_VAR 0 9
41868: PPUSH
41869: LD_VAR 0 7
41873: PPUSH
41874: LD_VAR 0 6
41878: PUSH
41879: LD_VAR 0 7
41883: ARRAY
41884: PUSH
41885: LD_INT 1
41887: ARRAY
41888: PPUSH
41889: CALL_OW 1
41893: ST_TO_ADDR
41894: GO 41856
41896: POP
41897: POP
// result := tmp ;
41898: LD_ADDR_VAR 0 6
41902: PUSH
41903: LD_VAR 0 9
41907: ST_TO_ADDR
// end ; end ;
41908: LD_VAR 0 6
41912: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41913: LD_INT 0
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41921: LD_ADDR_VAR 0 5
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: ST_TO_ADDR
// if not x or not y then
41943: LD_VAR 0 2
41947: NOT
41948: PUSH
41949: LD_VAR 0 3
41953: NOT
41954: OR
41955: IFFALSE 41959
// exit ;
41957: GO 43605
// if not range then
41959: LD_VAR 0 4
41963: NOT
41964: IFFALSE 41974
// range := 10 ;
41966: LD_ADDR_VAR 0 4
41970: PUSH
41971: LD_INT 10
41973: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41974: LD_ADDR_VAR 0 8
41978: PUSH
41979: LD_INT 81
41981: PUSH
41982: LD_VAR 0 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 92
41993: PUSH
41994: LD_VAR 0 2
41998: PUSH
41999: LD_VAR 0 3
42003: PUSH
42004: LD_VAR 0 4
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: LD_INT 21
42020: PUSH
42021: LD_INT 3
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: PPUSH
42037: CALL_OW 69
42041: ST_TO_ADDR
// if not tmp then
42042: LD_VAR 0 8
42046: NOT
42047: IFFALSE 42051
// exit ;
42049: GO 43605
// for i in tmp do
42051: LD_ADDR_VAR 0 6
42055: PUSH
42056: LD_VAR 0 8
42060: PUSH
42061: FOR_IN
42062: IFFALSE 43580
// begin points := [ 0 , 0 , 0 ] ;
42064: LD_ADDR_VAR 0 9
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: ST_TO_ADDR
// bpoints := 1 ;
42083: LD_ADDR_VAR 0 10
42087: PUSH
42088: LD_INT 1
42090: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42091: LD_VAR 0 6
42095: PPUSH
42096: CALL_OW 247
42100: PUSH
42101: LD_INT 1
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42109
42107: GO 42687
42109: POP
// begin if GetClass ( i ) = 1 then
42110: LD_VAR 0 6
42114: PPUSH
42115: CALL_OW 257
42119: PUSH
42120: LD_INT 1
42122: EQUAL
42123: IFFALSE 42144
// points := [ 10 , 5 , 3 ] ;
42125: LD_ADDR_VAR 0 9
42129: PUSH
42130: LD_INT 10
42132: PUSH
42133: LD_INT 5
42135: PUSH
42136: LD_INT 3
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42144: LD_VAR 0 6
42148: PPUSH
42149: CALL_OW 257
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 4
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: LIST
42167: IN
42168: IFFALSE 42189
// points := [ 3 , 2 , 1 ] ;
42170: LD_ADDR_VAR 0 9
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42189: LD_VAR 0 6
42193: PPUSH
42194: CALL_OW 257
42198: PUSH
42199: LD_INT 5
42201: EQUAL
42202: IFFALSE 42223
// points := [ 130 , 5 , 2 ] ;
42204: LD_ADDR_VAR 0 9
42208: PUSH
42209: LD_INT 130
42211: PUSH
42212: LD_INT 5
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42223: LD_VAR 0 6
42227: PPUSH
42228: CALL_OW 257
42232: PUSH
42233: LD_INT 8
42235: EQUAL
42236: IFFALSE 42257
// points := [ 35 , 35 , 30 ] ;
42238: LD_ADDR_VAR 0 9
42242: PUSH
42243: LD_INT 35
42245: PUSH
42246: LD_INT 35
42248: PUSH
42249: LD_INT 30
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42257: LD_VAR 0 6
42261: PPUSH
42262: CALL_OW 257
42266: PUSH
42267: LD_INT 9
42269: EQUAL
42270: IFFALSE 42291
// points := [ 20 , 55 , 40 ] ;
42272: LD_ADDR_VAR 0 9
42276: PUSH
42277: LD_INT 20
42279: PUSH
42280: LD_INT 55
42282: PUSH
42283: LD_INT 40
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42291: LD_VAR 0 6
42295: PPUSH
42296: CALL_OW 257
42300: PUSH
42301: LD_INT 12
42303: PUSH
42304: LD_INT 16
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: IN
42311: IFFALSE 42332
// points := [ 5 , 3 , 2 ] ;
42313: LD_ADDR_VAR 0 9
42317: PUSH
42318: LD_INT 5
42320: PUSH
42321: LD_INT 3
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42332: LD_VAR 0 6
42336: PPUSH
42337: CALL_OW 257
42341: PUSH
42342: LD_INT 17
42344: EQUAL
42345: IFFALSE 42366
// points := [ 100 , 50 , 75 ] ;
42347: LD_ADDR_VAR 0 9
42351: PUSH
42352: LD_INT 100
42354: PUSH
42355: LD_INT 50
42357: PUSH
42358: LD_INT 75
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42366: LD_VAR 0 6
42370: PPUSH
42371: CALL_OW 257
42375: PUSH
42376: LD_INT 15
42378: EQUAL
42379: IFFALSE 42400
// points := [ 10 , 5 , 3 ] ;
42381: LD_ADDR_VAR 0 9
42385: PUSH
42386: LD_INT 10
42388: PUSH
42389: LD_INT 5
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42400: LD_VAR 0 6
42404: PPUSH
42405: CALL_OW 257
42409: PUSH
42410: LD_INT 14
42412: EQUAL
42413: IFFALSE 42434
// points := [ 10 , 0 , 0 ] ;
42415: LD_ADDR_VAR 0 9
42419: PUSH
42420: LD_INT 10
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: LIST
42433: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42434: LD_VAR 0 6
42438: PPUSH
42439: CALL_OW 257
42443: PUSH
42444: LD_INT 11
42446: EQUAL
42447: IFFALSE 42468
// points := [ 30 , 10 , 5 ] ;
42449: LD_ADDR_VAR 0 9
42453: PUSH
42454: LD_INT 30
42456: PUSH
42457: LD_INT 10
42459: PUSH
42460: LD_INT 5
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42468: LD_VAR 0 1
42472: PPUSH
42473: LD_INT 5
42475: PPUSH
42476: CALL_OW 321
42480: PUSH
42481: LD_INT 2
42483: EQUAL
42484: IFFALSE 42501
// bpoints := bpoints * 1.8 ;
42486: LD_ADDR_VAR 0 10
42490: PUSH
42491: LD_VAR 0 10
42495: PUSH
42496: LD_REAL  1.80000000000000E+0000
42499: MUL
42500: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42501: LD_VAR 0 6
42505: PPUSH
42506: CALL_OW 257
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: LD_INT 4
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: IN
42529: PUSH
42530: LD_VAR 0 1
42534: PPUSH
42535: LD_INT 51
42537: PPUSH
42538: CALL_OW 321
42542: PUSH
42543: LD_INT 2
42545: EQUAL
42546: AND
42547: IFFALSE 42564
// bpoints := bpoints * 1.2 ;
42549: LD_ADDR_VAR 0 10
42553: PUSH
42554: LD_VAR 0 10
42558: PUSH
42559: LD_REAL  1.20000000000000E+0000
42562: MUL
42563: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42564: LD_VAR 0 6
42568: PPUSH
42569: CALL_OW 257
42573: PUSH
42574: LD_INT 5
42576: PUSH
42577: LD_INT 7
42579: PUSH
42580: LD_INT 9
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: IN
42588: PUSH
42589: LD_VAR 0 1
42593: PPUSH
42594: LD_INT 52
42596: PPUSH
42597: CALL_OW 321
42601: PUSH
42602: LD_INT 2
42604: EQUAL
42605: AND
42606: IFFALSE 42623
// bpoints := bpoints * 1.5 ;
42608: LD_ADDR_VAR 0 10
42612: PUSH
42613: LD_VAR 0 10
42617: PUSH
42618: LD_REAL  1.50000000000000E+0000
42621: MUL
42622: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42623: LD_VAR 0 1
42627: PPUSH
42628: LD_INT 66
42630: PPUSH
42631: CALL_OW 321
42635: PUSH
42636: LD_INT 2
42638: EQUAL
42639: IFFALSE 42656
// bpoints := bpoints * 1.1 ;
42641: LD_ADDR_VAR 0 10
42645: PUSH
42646: LD_VAR 0 10
42650: PUSH
42651: LD_REAL  1.10000000000000E+0000
42654: MUL
42655: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42656: LD_ADDR_VAR 0 10
42660: PUSH
42661: LD_VAR 0 10
42665: PUSH
42666: LD_VAR 0 6
42670: PPUSH
42671: LD_INT 1
42673: PPUSH
42674: CALL_OW 259
42678: PUSH
42679: LD_REAL  1.15000000000000E+0000
42682: MUL
42683: MUL
42684: ST_TO_ADDR
// end ; unit_vehicle :
42685: GO 43509
42687: LD_INT 2
42689: DOUBLE
42690: EQUAL
42691: IFTRUE 42695
42693: GO 43497
42695: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42696: LD_VAR 0 6
42700: PPUSH
42701: CALL_OW 264
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: LD_INT 42
42711: PUSH
42712: LD_INT 24
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: IN
42720: IFFALSE 42741
// points := [ 25 , 5 , 3 ] ;
42722: LD_ADDR_VAR 0 9
42726: PUSH
42727: LD_INT 25
42729: PUSH
42730: LD_INT 5
42732: PUSH
42733: LD_INT 3
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42741: LD_VAR 0 6
42745: PPUSH
42746: CALL_OW 264
42750: PUSH
42751: LD_INT 4
42753: PUSH
42754: LD_INT 43
42756: PUSH
42757: LD_INT 25
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: LIST
42764: IN
42765: IFFALSE 42786
// points := [ 40 , 15 , 5 ] ;
42767: LD_ADDR_VAR 0 9
42771: PUSH
42772: LD_INT 40
42774: PUSH
42775: LD_INT 15
42777: PUSH
42778: LD_INT 5
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42786: LD_VAR 0 6
42790: PPUSH
42791: CALL_OW 264
42795: PUSH
42796: LD_INT 3
42798: PUSH
42799: LD_INT 23
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: IN
42806: IFFALSE 42827
// points := [ 7 , 25 , 8 ] ;
42808: LD_ADDR_VAR 0 9
42812: PUSH
42813: LD_INT 7
42815: PUSH
42816: LD_INT 25
42818: PUSH
42819: LD_INT 8
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42827: LD_VAR 0 6
42831: PPUSH
42832: CALL_OW 264
42836: PUSH
42837: LD_INT 5
42839: PUSH
42840: LD_INT 27
42842: PUSH
42843: LD_INT 44
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: IN
42851: IFFALSE 42872
// points := [ 14 , 50 , 16 ] ;
42853: LD_ADDR_VAR 0 9
42857: PUSH
42858: LD_INT 14
42860: PUSH
42861: LD_INT 50
42863: PUSH
42864: LD_INT 16
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42872: LD_VAR 0 6
42876: PPUSH
42877: CALL_OW 264
42881: PUSH
42882: LD_INT 6
42884: PUSH
42885: LD_INT 46
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: IN
42892: IFFALSE 42913
// points := [ 32 , 120 , 70 ] ;
42894: LD_ADDR_VAR 0 9
42898: PUSH
42899: LD_INT 32
42901: PUSH
42902: LD_INT 120
42904: PUSH
42905: LD_INT 70
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42913: LD_VAR 0 6
42917: PPUSH
42918: CALL_OW 264
42922: PUSH
42923: LD_INT 7
42925: PUSH
42926: LD_INT 28
42928: PUSH
42929: LD_INT 45
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: IN
42937: IFFALSE 42958
// points := [ 35 , 20 , 45 ] ;
42939: LD_ADDR_VAR 0 9
42943: PUSH
42944: LD_INT 35
42946: PUSH
42947: LD_INT 20
42949: PUSH
42950: LD_INT 45
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42958: LD_VAR 0 6
42962: PPUSH
42963: CALL_OW 264
42967: PUSH
42968: LD_INT 47
42970: PUSH
42971: EMPTY
42972: LIST
42973: IN
42974: IFFALSE 42995
// points := [ 67 , 45 , 75 ] ;
42976: LD_ADDR_VAR 0 9
42980: PUSH
42981: LD_INT 67
42983: PUSH
42984: LD_INT 45
42986: PUSH
42987: LD_INT 75
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42995: LD_VAR 0 6
42999: PPUSH
43000: CALL_OW 264
43004: PUSH
43005: LD_INT 26
43007: PUSH
43008: EMPTY
43009: LIST
43010: IN
43011: IFFALSE 43032
// points := [ 120 , 30 , 80 ] ;
43013: LD_ADDR_VAR 0 9
43017: PUSH
43018: LD_INT 120
43020: PUSH
43021: LD_INT 30
43023: PUSH
43024: LD_INT 80
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43032: LD_VAR 0 6
43036: PPUSH
43037: CALL_OW 264
43041: PUSH
43042: LD_INT 22
43044: PUSH
43045: EMPTY
43046: LIST
43047: IN
43048: IFFALSE 43069
// points := [ 40 , 1 , 1 ] ;
43050: LD_ADDR_VAR 0 9
43054: PUSH
43055: LD_INT 40
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: LIST
43068: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43069: LD_VAR 0 6
43073: PPUSH
43074: CALL_OW 264
43078: PUSH
43079: LD_INT 29
43081: PUSH
43082: EMPTY
43083: LIST
43084: IN
43085: IFFALSE 43106
// points := [ 70 , 200 , 400 ] ;
43087: LD_ADDR_VAR 0 9
43091: PUSH
43092: LD_INT 70
43094: PUSH
43095: LD_INT 200
43097: PUSH
43098: LD_INT 400
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: LIST
43105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43106: LD_VAR 0 6
43110: PPUSH
43111: CALL_OW 264
43115: PUSH
43116: LD_INT 14
43118: PUSH
43119: LD_INT 53
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: IN
43126: IFFALSE 43147
// points := [ 40 , 10 , 20 ] ;
43128: LD_ADDR_VAR 0 9
43132: PUSH
43133: LD_INT 40
43135: PUSH
43136: LD_INT 10
43138: PUSH
43139: LD_INT 20
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: LIST
43146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43147: LD_VAR 0 6
43151: PPUSH
43152: CALL_OW 264
43156: PUSH
43157: LD_INT 9
43159: PUSH
43160: EMPTY
43161: LIST
43162: IN
43163: IFFALSE 43184
// points := [ 5 , 70 , 20 ] ;
43165: LD_ADDR_VAR 0 9
43169: PUSH
43170: LD_INT 5
43172: PUSH
43173: LD_INT 70
43175: PUSH
43176: LD_INT 20
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43184: LD_VAR 0 6
43188: PPUSH
43189: CALL_OW 264
43193: PUSH
43194: LD_INT 10
43196: PUSH
43197: EMPTY
43198: LIST
43199: IN
43200: IFFALSE 43221
// points := [ 35 , 110 , 70 ] ;
43202: LD_ADDR_VAR 0 9
43206: PUSH
43207: LD_INT 35
43209: PUSH
43210: LD_INT 110
43212: PUSH
43213: LD_INT 70
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43221: LD_VAR 0 6
43225: PPUSH
43226: CALL_OW 265
43230: PUSH
43231: LD_INT 25
43233: EQUAL
43234: IFFALSE 43255
// points := [ 80 , 65 , 100 ] ;
43236: LD_ADDR_VAR 0 9
43240: PUSH
43241: LD_INT 80
43243: PUSH
43244: LD_INT 65
43246: PUSH
43247: LD_INT 100
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43255: LD_VAR 0 6
43259: PPUSH
43260: CALL_OW 263
43264: PUSH
43265: LD_INT 1
43267: EQUAL
43268: IFFALSE 43303
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43270: LD_ADDR_VAR 0 10
43274: PUSH
43275: LD_VAR 0 10
43279: PUSH
43280: LD_VAR 0 6
43284: PPUSH
43285: CALL_OW 311
43289: PPUSH
43290: LD_INT 3
43292: PPUSH
43293: CALL_OW 259
43297: PUSH
43298: LD_INT 4
43300: MUL
43301: MUL
43302: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43303: LD_VAR 0 6
43307: PPUSH
43308: CALL_OW 263
43312: PUSH
43313: LD_INT 2
43315: EQUAL
43316: IFFALSE 43367
// begin j := IsControledBy ( i ) ;
43318: LD_ADDR_VAR 0 7
43322: PUSH
43323: LD_VAR 0 6
43327: PPUSH
43328: CALL_OW 312
43332: ST_TO_ADDR
// if j then
43333: LD_VAR 0 7
43337: IFFALSE 43367
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43339: LD_ADDR_VAR 0 10
43343: PUSH
43344: LD_VAR 0 10
43348: PUSH
43349: LD_VAR 0 7
43353: PPUSH
43354: LD_INT 3
43356: PPUSH
43357: CALL_OW 259
43361: PUSH
43362: LD_INT 3
43364: MUL
43365: MUL
43366: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43367: LD_VAR 0 6
43371: PPUSH
43372: CALL_OW 264
43376: PUSH
43377: LD_INT 5
43379: PUSH
43380: LD_INT 6
43382: PUSH
43383: LD_INT 46
43385: PUSH
43386: LD_INT 44
43388: PUSH
43389: LD_INT 47
43391: PUSH
43392: LD_INT 45
43394: PUSH
43395: LD_INT 28
43397: PUSH
43398: LD_INT 7
43400: PUSH
43401: LD_INT 27
43403: PUSH
43404: LD_INT 29
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: IN
43419: PUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: LD_INT 52
43427: PPUSH
43428: CALL_OW 321
43432: PUSH
43433: LD_INT 2
43435: EQUAL
43436: AND
43437: IFFALSE 43454
// bpoints := bpoints * 1.2 ;
43439: LD_ADDR_VAR 0 10
43443: PUSH
43444: LD_VAR 0 10
43448: PUSH
43449: LD_REAL  1.20000000000000E+0000
43452: MUL
43453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43454: LD_VAR 0 6
43458: PPUSH
43459: CALL_OW 264
43463: PUSH
43464: LD_INT 6
43466: PUSH
43467: LD_INT 46
43469: PUSH
43470: LD_INT 47
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: IN
43478: IFFALSE 43495
// bpoints := bpoints * 1.2 ;
43480: LD_ADDR_VAR 0 10
43484: PUSH
43485: LD_VAR 0 10
43489: PUSH
43490: LD_REAL  1.20000000000000E+0000
43493: MUL
43494: ST_TO_ADDR
// end ; unit_building :
43495: GO 43509
43497: LD_INT 3
43499: DOUBLE
43500: EQUAL
43501: IFTRUE 43505
43503: GO 43508
43505: POP
// ; end ;
43506: GO 43509
43508: POP
// for j = 1 to 3 do
43509: LD_ADDR_VAR 0 7
43513: PUSH
43514: DOUBLE
43515: LD_INT 1
43517: DEC
43518: ST_TO_ADDR
43519: LD_INT 3
43521: PUSH
43522: FOR_TO
43523: IFFALSE 43576
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43525: LD_ADDR_VAR 0 5
43529: PUSH
43530: LD_VAR 0 5
43534: PPUSH
43535: LD_VAR 0 7
43539: PPUSH
43540: LD_VAR 0 5
43544: PUSH
43545: LD_VAR 0 7
43549: ARRAY
43550: PUSH
43551: LD_VAR 0 9
43555: PUSH
43556: LD_VAR 0 7
43560: ARRAY
43561: PUSH
43562: LD_VAR 0 10
43566: MUL
43567: PLUS
43568: PPUSH
43569: CALL_OW 1
43573: ST_TO_ADDR
43574: GO 43522
43576: POP
43577: POP
// end ;
43578: GO 42061
43580: POP
43581: POP
// result := Replace ( result , 4 , tmp ) ;
43582: LD_ADDR_VAR 0 5
43586: PUSH
43587: LD_VAR 0 5
43591: PPUSH
43592: LD_INT 4
43594: PPUSH
43595: LD_VAR 0 8
43599: PPUSH
43600: CALL_OW 1
43604: ST_TO_ADDR
// end ;
43605: LD_VAR 0 5
43609: RET
// export function DangerAtRange ( unit , range ) ; begin
43610: LD_INT 0
43612: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43613: LD_ADDR_VAR 0 3
43617: PUSH
43618: LD_VAR 0 1
43622: PPUSH
43623: CALL_OW 255
43627: PPUSH
43628: LD_VAR 0 1
43632: PPUSH
43633: CALL_OW 250
43637: PPUSH
43638: LD_VAR 0 1
43642: PPUSH
43643: CALL_OW 251
43647: PPUSH
43648: LD_VAR 0 2
43652: PPUSH
43653: CALL 41913 0 4
43657: ST_TO_ADDR
// end ;
43658: LD_VAR 0 3
43662: RET
// export function DangerInArea ( side , area ) ; begin
43663: LD_INT 0
43665: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43666: LD_ADDR_VAR 0 3
43670: PUSH
43671: LD_VAR 0 2
43675: PPUSH
43676: LD_INT 81
43678: PUSH
43679: LD_VAR 0 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PPUSH
43688: CALL_OW 70
43692: ST_TO_ADDR
// end ;
43693: LD_VAR 0 3
43697: RET
// export function IsExtension ( b ) ; begin
43698: LD_INT 0
43700: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43701: LD_ADDR_VAR 0 2
43705: PUSH
43706: LD_VAR 0 1
43710: PUSH
43711: LD_INT 23
43713: PUSH
43714: LD_INT 20
43716: PUSH
43717: LD_INT 22
43719: PUSH
43720: LD_INT 17
43722: PUSH
43723: LD_INT 24
43725: PUSH
43726: LD_INT 21
43728: PUSH
43729: LD_INT 19
43731: PUSH
43732: LD_INT 16
43734: PUSH
43735: LD_INT 25
43737: PUSH
43738: LD_INT 18
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: IN
43753: ST_TO_ADDR
// end ;
43754: LD_VAR 0 2
43758: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43759: LD_INT 0
43761: PPUSH
43762: PPUSH
43763: PPUSH
// result := [ ] ;
43764: LD_ADDR_VAR 0 4
43768: PUSH
43769: EMPTY
43770: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43771: LD_ADDR_VAR 0 5
43775: PUSH
43776: LD_VAR 0 2
43780: PPUSH
43781: LD_INT 21
43783: PUSH
43784: LD_INT 3
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PPUSH
43791: CALL_OW 70
43795: ST_TO_ADDR
// if not tmp then
43796: LD_VAR 0 5
43800: NOT
43801: IFFALSE 43805
// exit ;
43803: GO 43869
// if checkLink then
43805: LD_VAR 0 3
43809: IFFALSE 43859
// begin for i in tmp do
43811: LD_ADDR_VAR 0 6
43815: PUSH
43816: LD_VAR 0 5
43820: PUSH
43821: FOR_IN
43822: IFFALSE 43857
// if GetBase ( i ) <> base then
43824: LD_VAR 0 6
43828: PPUSH
43829: CALL_OW 274
43833: PUSH
43834: LD_VAR 0 1
43838: NONEQUAL
43839: IFFALSE 43855
// ComLinkToBase ( base , i ) ;
43841: LD_VAR 0 1
43845: PPUSH
43846: LD_VAR 0 6
43850: PPUSH
43851: CALL_OW 169
43855: GO 43821
43857: POP
43858: POP
// end ; result := tmp ;
43859: LD_ADDR_VAR 0 4
43863: PUSH
43864: LD_VAR 0 5
43868: ST_TO_ADDR
// end ;
43869: LD_VAR 0 4
43873: RET
// export function ComComplete ( units , b ) ; var i ; begin
43874: LD_INT 0
43876: PPUSH
43877: PPUSH
// if not units then
43878: LD_VAR 0 1
43882: NOT
43883: IFFALSE 43887
// exit ;
43885: GO 43977
// for i in units do
43887: LD_ADDR_VAR 0 4
43891: PUSH
43892: LD_VAR 0 1
43896: PUSH
43897: FOR_IN
43898: IFFALSE 43975
// if BuildingStatus ( b ) = bs_build then
43900: LD_VAR 0 2
43904: PPUSH
43905: CALL_OW 461
43909: PUSH
43910: LD_INT 1
43912: EQUAL
43913: IFFALSE 43973
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43915: LD_VAR 0 4
43919: PPUSH
43920: LD_STRING h
43922: PUSH
43923: LD_VAR 0 2
43927: PPUSH
43928: CALL_OW 250
43932: PUSH
43933: LD_VAR 0 2
43937: PPUSH
43938: CALL_OW 251
43942: PUSH
43943: LD_VAR 0 2
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: PUSH
43966: EMPTY
43967: LIST
43968: PPUSH
43969: CALL_OW 446
43973: GO 43897
43975: POP
43976: POP
// end ;
43977: LD_VAR 0 3
43981: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43982: LD_INT 0
43984: PPUSH
43985: PPUSH
43986: PPUSH
43987: PPUSH
43988: PPUSH
43989: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43990: LD_VAR 0 1
43994: NOT
43995: PUSH
43996: LD_VAR 0 1
44000: PPUSH
44001: CALL_OW 263
44005: PUSH
44006: LD_INT 2
44008: EQUAL
44009: NOT
44010: OR
44011: IFFALSE 44015
// exit ;
44013: GO 44331
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44015: LD_ADDR_VAR 0 6
44019: PUSH
44020: LD_INT 22
44022: PUSH
44023: LD_VAR 0 1
44027: PPUSH
44028: CALL_OW 255
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 30
44042: PUSH
44043: LD_INT 36
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 34
44052: PUSH
44053: LD_INT 31
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PPUSH
44069: CALL_OW 69
44073: ST_TO_ADDR
// if not tmp then
44074: LD_VAR 0 6
44078: NOT
44079: IFFALSE 44083
// exit ;
44081: GO 44331
// result := [ ] ;
44083: LD_ADDR_VAR 0 2
44087: PUSH
44088: EMPTY
44089: ST_TO_ADDR
// for i in tmp do
44090: LD_ADDR_VAR 0 3
44094: PUSH
44095: LD_VAR 0 6
44099: PUSH
44100: FOR_IN
44101: IFFALSE 44172
// begin t := UnitsInside ( i ) ;
44103: LD_ADDR_VAR 0 4
44107: PUSH
44108: LD_VAR 0 3
44112: PPUSH
44113: CALL_OW 313
44117: ST_TO_ADDR
// if t then
44118: LD_VAR 0 4
44122: IFFALSE 44170
// for j in t do
44124: LD_ADDR_VAR 0 7
44128: PUSH
44129: LD_VAR 0 4
44133: PUSH
44134: FOR_IN
44135: IFFALSE 44168
// result := Insert ( result , result + 1 , j ) ;
44137: LD_ADDR_VAR 0 2
44141: PUSH
44142: LD_VAR 0 2
44146: PPUSH
44147: LD_VAR 0 2
44151: PUSH
44152: LD_INT 1
44154: PLUS
44155: PPUSH
44156: LD_VAR 0 7
44160: PPUSH
44161: CALL_OW 2
44165: ST_TO_ADDR
44166: GO 44134
44168: POP
44169: POP
// end ;
44170: GO 44100
44172: POP
44173: POP
// if not result then
44174: LD_VAR 0 2
44178: NOT
44179: IFFALSE 44183
// exit ;
44181: GO 44331
// mech := result [ 1 ] ;
44183: LD_ADDR_VAR 0 5
44187: PUSH
44188: LD_VAR 0 2
44192: PUSH
44193: LD_INT 1
44195: ARRAY
44196: ST_TO_ADDR
// if result > 1 then
44197: LD_VAR 0 2
44201: PUSH
44202: LD_INT 1
44204: GREATER
44205: IFFALSE 44317
// for i = 2 to result do
44207: LD_ADDR_VAR 0 3
44211: PUSH
44212: DOUBLE
44213: LD_INT 2
44215: DEC
44216: ST_TO_ADDR
44217: LD_VAR 0 2
44221: PUSH
44222: FOR_TO
44223: IFFALSE 44315
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44225: LD_ADDR_VAR 0 4
44229: PUSH
44230: LD_VAR 0 2
44234: PUSH
44235: LD_VAR 0 3
44239: ARRAY
44240: PPUSH
44241: LD_INT 3
44243: PPUSH
44244: CALL_OW 259
44248: PUSH
44249: LD_VAR 0 2
44253: PUSH
44254: LD_VAR 0 3
44258: ARRAY
44259: PPUSH
44260: CALL_OW 432
44264: MINUS
44265: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44266: LD_VAR 0 4
44270: PUSH
44271: LD_VAR 0 5
44275: PPUSH
44276: LD_INT 3
44278: PPUSH
44279: CALL_OW 259
44283: PUSH
44284: LD_VAR 0 5
44288: PPUSH
44289: CALL_OW 432
44293: MINUS
44294: GREATEREQUAL
44295: IFFALSE 44313
// mech := result [ i ] ;
44297: LD_ADDR_VAR 0 5
44301: PUSH
44302: LD_VAR 0 2
44306: PUSH
44307: LD_VAR 0 3
44311: ARRAY
44312: ST_TO_ADDR
// end ;
44313: GO 44222
44315: POP
44316: POP
// ComLinkTo ( vehicle , mech ) ;
44317: LD_VAR 0 1
44321: PPUSH
44322: LD_VAR 0 5
44326: PPUSH
44327: CALL_OW 135
// end ;
44331: LD_VAR 0 2
44335: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44336: LD_INT 0
44338: PPUSH
44339: PPUSH
44340: PPUSH
44341: PPUSH
44342: PPUSH
44343: PPUSH
44344: PPUSH
44345: PPUSH
44346: PPUSH
44347: PPUSH
44348: PPUSH
44349: PPUSH
44350: PPUSH
// result := [ ] ;
44351: LD_ADDR_VAR 0 7
44355: PUSH
44356: EMPTY
44357: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44358: LD_VAR 0 1
44362: PPUSH
44363: CALL_OW 266
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: IN
44378: NOT
44379: IFFALSE 44383
// exit ;
44381: GO 46017
// if name then
44383: LD_VAR 0 3
44387: IFFALSE 44403
// SetBName ( base_dep , name ) ;
44389: LD_VAR 0 1
44393: PPUSH
44394: LD_VAR 0 3
44398: PPUSH
44399: CALL_OW 500
// base := GetBase ( base_dep ) ;
44403: LD_ADDR_VAR 0 15
44407: PUSH
44408: LD_VAR 0 1
44412: PPUSH
44413: CALL_OW 274
44417: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44418: LD_ADDR_VAR 0 16
44422: PUSH
44423: LD_VAR 0 1
44427: PPUSH
44428: CALL_OW 255
44432: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44433: LD_ADDR_VAR 0 17
44437: PUSH
44438: LD_VAR 0 1
44442: PPUSH
44443: CALL_OW 248
44447: ST_TO_ADDR
// if sources then
44448: LD_VAR 0 5
44452: IFFALSE 44499
// for i = 1 to 3 do
44454: LD_ADDR_VAR 0 8
44458: PUSH
44459: DOUBLE
44460: LD_INT 1
44462: DEC
44463: ST_TO_ADDR
44464: LD_INT 3
44466: PUSH
44467: FOR_TO
44468: IFFALSE 44497
// AddResourceType ( base , i , sources [ i ] ) ;
44470: LD_VAR 0 15
44474: PPUSH
44475: LD_VAR 0 8
44479: PPUSH
44480: LD_VAR 0 5
44484: PUSH
44485: LD_VAR 0 8
44489: ARRAY
44490: PPUSH
44491: CALL_OW 276
44495: GO 44467
44497: POP
44498: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44499: LD_ADDR_VAR 0 18
44503: PUSH
44504: LD_VAR 0 15
44508: PPUSH
44509: LD_VAR 0 2
44513: PPUSH
44514: LD_INT 1
44516: PPUSH
44517: CALL 43759 0 3
44521: ST_TO_ADDR
// InitHc ;
44522: CALL_OW 19
// InitUc ;
44526: CALL_OW 18
// uc_side := side ;
44530: LD_ADDR_OWVAR 20
44534: PUSH
44535: LD_VAR 0 16
44539: ST_TO_ADDR
// uc_nation := nation ;
44540: LD_ADDR_OWVAR 21
44544: PUSH
44545: LD_VAR 0 17
44549: ST_TO_ADDR
// if buildings then
44550: LD_VAR 0 18
44554: IFFALSE 45876
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44556: LD_ADDR_VAR 0 19
44560: PUSH
44561: LD_VAR 0 18
44565: PPUSH
44566: LD_INT 2
44568: PUSH
44569: LD_INT 30
44571: PUSH
44572: LD_INT 29
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 30
44581: PUSH
44582: LD_INT 30
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: LIST
44593: PPUSH
44594: CALL_OW 72
44598: ST_TO_ADDR
// if tmp then
44599: LD_VAR 0 19
44603: IFFALSE 44651
// for i in tmp do
44605: LD_ADDR_VAR 0 8
44609: PUSH
44610: LD_VAR 0 19
44614: PUSH
44615: FOR_IN
44616: IFFALSE 44649
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44618: LD_VAR 0 8
44622: PPUSH
44623: CALL_OW 250
44627: PPUSH
44628: LD_VAR 0 8
44632: PPUSH
44633: CALL_OW 251
44637: PPUSH
44638: LD_VAR 0 16
44642: PPUSH
44643: CALL_OW 441
44647: GO 44615
44649: POP
44650: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44651: LD_VAR 0 18
44655: PPUSH
44656: LD_INT 2
44658: PUSH
44659: LD_INT 30
44661: PUSH
44662: LD_INT 32
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 30
44671: PUSH
44672: LD_INT 33
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: PPUSH
44684: CALL_OW 72
44688: IFFALSE 44776
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44690: LD_ADDR_VAR 0 8
44694: PUSH
44695: LD_VAR 0 18
44699: PPUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 30
44705: PUSH
44706: LD_INT 32
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 30
44715: PUSH
44716: LD_INT 33
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: PPUSH
44728: CALL_OW 72
44732: PUSH
44733: FOR_IN
44734: IFFALSE 44774
// begin if not GetBWeapon ( i ) then
44736: LD_VAR 0 8
44740: PPUSH
44741: CALL_OW 269
44745: NOT
44746: IFFALSE 44772
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44748: LD_VAR 0 8
44752: PPUSH
44753: LD_VAR 0 8
44757: PPUSH
44758: LD_VAR 0 2
44762: PPUSH
44763: CALL 46022 0 2
44767: PPUSH
44768: CALL_OW 431
// end ;
44772: GO 44733
44774: POP
44775: POP
// end ; for i = 1 to personel do
44776: LD_ADDR_VAR 0 8
44780: PUSH
44781: DOUBLE
44782: LD_INT 1
44784: DEC
44785: ST_TO_ADDR
44786: LD_VAR 0 6
44790: PUSH
44791: FOR_TO
44792: IFFALSE 45856
// begin if i > 4 then
44794: LD_VAR 0 8
44798: PUSH
44799: LD_INT 4
44801: GREATER
44802: IFFALSE 44806
// break ;
44804: GO 45856
// case i of 1 :
44806: LD_VAR 0 8
44810: PUSH
44811: LD_INT 1
44813: DOUBLE
44814: EQUAL
44815: IFTRUE 44819
44817: GO 44899
44819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44820: LD_ADDR_VAR 0 12
44824: PUSH
44825: LD_VAR 0 18
44829: PPUSH
44830: LD_INT 22
44832: PUSH
44833: LD_VAR 0 16
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 58
44844: PUSH
44845: EMPTY
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: LD_INT 30
44853: PUSH
44854: LD_INT 32
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 30
44863: PUSH
44864: LD_INT 4
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 30
44873: PUSH
44874: LD_INT 5
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: LIST
44891: PPUSH
44892: CALL_OW 72
44896: ST_TO_ADDR
44897: GO 45121
44899: LD_INT 2
44901: DOUBLE
44902: EQUAL
44903: IFTRUE 44907
44905: GO 44969
44907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44908: LD_ADDR_VAR 0 12
44912: PUSH
44913: LD_VAR 0 18
44917: PPUSH
44918: LD_INT 22
44920: PUSH
44921: LD_VAR 0 16
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 30
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 30
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PPUSH
44962: CALL_OW 72
44966: ST_TO_ADDR
44967: GO 45121
44969: LD_INT 3
44971: DOUBLE
44972: EQUAL
44973: IFTRUE 44977
44975: GO 45039
44977: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44978: LD_ADDR_VAR 0 12
44982: PUSH
44983: LD_VAR 0 18
44987: PPUSH
44988: LD_INT 22
44990: PUSH
44991: LD_VAR 0 16
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 30
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 30
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PPUSH
45032: CALL_OW 72
45036: ST_TO_ADDR
45037: GO 45121
45039: LD_INT 4
45041: DOUBLE
45042: EQUAL
45043: IFTRUE 45047
45045: GO 45120
45047: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45048: LD_ADDR_VAR 0 12
45052: PUSH
45053: LD_VAR 0 18
45057: PPUSH
45058: LD_INT 22
45060: PUSH
45061: LD_VAR 0 16
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 30
45075: PUSH
45076: LD_INT 6
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 30
45085: PUSH
45086: LD_INT 7
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 30
45095: PUSH
45096: LD_INT 8
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PPUSH
45113: CALL_OW 72
45117: ST_TO_ADDR
45118: GO 45121
45120: POP
// if i = 1 then
45121: LD_VAR 0 8
45125: PUSH
45126: LD_INT 1
45128: EQUAL
45129: IFFALSE 45240
// begin tmp := [ ] ;
45131: LD_ADDR_VAR 0 19
45135: PUSH
45136: EMPTY
45137: ST_TO_ADDR
// for j in f do
45138: LD_ADDR_VAR 0 9
45142: PUSH
45143: LD_VAR 0 12
45147: PUSH
45148: FOR_IN
45149: IFFALSE 45222
// if GetBType ( j ) = b_bunker then
45151: LD_VAR 0 9
45155: PPUSH
45156: CALL_OW 266
45160: PUSH
45161: LD_INT 32
45163: EQUAL
45164: IFFALSE 45191
// tmp := Insert ( tmp , 1 , j ) else
45166: LD_ADDR_VAR 0 19
45170: PUSH
45171: LD_VAR 0 19
45175: PPUSH
45176: LD_INT 1
45178: PPUSH
45179: LD_VAR 0 9
45183: PPUSH
45184: CALL_OW 2
45188: ST_TO_ADDR
45189: GO 45220
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45191: LD_ADDR_VAR 0 19
45195: PUSH
45196: LD_VAR 0 19
45200: PPUSH
45201: LD_VAR 0 19
45205: PUSH
45206: LD_INT 1
45208: PLUS
45209: PPUSH
45210: LD_VAR 0 9
45214: PPUSH
45215: CALL_OW 2
45219: ST_TO_ADDR
45220: GO 45148
45222: POP
45223: POP
// if tmp then
45224: LD_VAR 0 19
45228: IFFALSE 45240
// f := tmp ;
45230: LD_ADDR_VAR 0 12
45234: PUSH
45235: LD_VAR 0 19
45239: ST_TO_ADDR
// end ; x := personel [ i ] ;
45240: LD_ADDR_VAR 0 13
45244: PUSH
45245: LD_VAR 0 6
45249: PUSH
45250: LD_VAR 0 8
45254: ARRAY
45255: ST_TO_ADDR
// if x = - 1 then
45256: LD_VAR 0 13
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: EQUAL
45265: IFFALSE 45474
// begin for j in f do
45267: LD_ADDR_VAR 0 9
45271: PUSH
45272: LD_VAR 0 12
45276: PUSH
45277: FOR_IN
45278: IFFALSE 45470
// repeat InitHc ;
45280: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45284: LD_VAR 0 9
45288: PPUSH
45289: CALL_OW 266
45293: PUSH
45294: LD_INT 5
45296: EQUAL
45297: IFFALSE 45367
// begin if UnitsInside ( j ) < 3 then
45299: LD_VAR 0 9
45303: PPUSH
45304: CALL_OW 313
45308: PUSH
45309: LD_INT 3
45311: LESS
45312: IFFALSE 45348
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45314: LD_INT 0
45316: PPUSH
45317: LD_INT 5
45319: PUSH
45320: LD_INT 8
45322: PUSH
45323: LD_INT 9
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: PUSH
45331: LD_VAR 0 17
45335: ARRAY
45336: PPUSH
45337: LD_VAR 0 4
45341: PPUSH
45342: CALL_OW 380
45346: GO 45365
// PrepareHuman ( false , i , skill ) ;
45348: LD_INT 0
45350: PPUSH
45351: LD_VAR 0 8
45355: PPUSH
45356: LD_VAR 0 4
45360: PPUSH
45361: CALL_OW 380
// end else
45365: GO 45384
// PrepareHuman ( false , i , skill ) ;
45367: LD_INT 0
45369: PPUSH
45370: LD_VAR 0 8
45374: PPUSH
45375: LD_VAR 0 4
45379: PPUSH
45380: CALL_OW 380
// un := CreateHuman ;
45384: LD_ADDR_VAR 0 14
45388: PUSH
45389: CALL_OW 44
45393: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45394: LD_ADDR_VAR 0 7
45398: PUSH
45399: LD_VAR 0 7
45403: PPUSH
45404: LD_INT 1
45406: PPUSH
45407: LD_VAR 0 14
45411: PPUSH
45412: CALL_OW 2
45416: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45417: LD_VAR 0 14
45421: PPUSH
45422: LD_VAR 0 9
45426: PPUSH
45427: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45431: LD_VAR 0 9
45435: PPUSH
45436: CALL_OW 313
45440: PUSH
45441: LD_INT 6
45443: EQUAL
45444: PUSH
45445: LD_VAR 0 9
45449: PPUSH
45450: CALL_OW 266
45454: PUSH
45455: LD_INT 32
45457: PUSH
45458: LD_INT 31
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: IN
45465: OR
45466: IFFALSE 45280
45468: GO 45277
45470: POP
45471: POP
// end else
45472: GO 45854
// for j = 1 to x do
45474: LD_ADDR_VAR 0 9
45478: PUSH
45479: DOUBLE
45480: LD_INT 1
45482: DEC
45483: ST_TO_ADDR
45484: LD_VAR 0 13
45488: PUSH
45489: FOR_TO
45490: IFFALSE 45852
// begin InitHc ;
45492: CALL_OW 19
// if not f then
45496: LD_VAR 0 12
45500: NOT
45501: IFFALSE 45590
// begin PrepareHuman ( false , i , skill ) ;
45503: LD_INT 0
45505: PPUSH
45506: LD_VAR 0 8
45510: PPUSH
45511: LD_VAR 0 4
45515: PPUSH
45516: CALL_OW 380
// un := CreateHuman ;
45520: LD_ADDR_VAR 0 14
45524: PUSH
45525: CALL_OW 44
45529: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45530: LD_ADDR_VAR 0 7
45534: PUSH
45535: LD_VAR 0 7
45539: PPUSH
45540: LD_INT 1
45542: PPUSH
45543: LD_VAR 0 14
45547: PPUSH
45548: CALL_OW 2
45552: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45553: LD_VAR 0 14
45557: PPUSH
45558: LD_VAR 0 1
45562: PPUSH
45563: CALL_OW 250
45567: PPUSH
45568: LD_VAR 0 1
45572: PPUSH
45573: CALL_OW 251
45577: PPUSH
45578: LD_INT 10
45580: PPUSH
45581: LD_INT 0
45583: PPUSH
45584: CALL_OW 50
// continue ;
45588: GO 45489
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45590: LD_VAR 0 12
45594: PUSH
45595: LD_INT 1
45597: ARRAY
45598: PPUSH
45599: CALL_OW 313
45603: PUSH
45604: LD_VAR 0 12
45608: PUSH
45609: LD_INT 1
45611: ARRAY
45612: PPUSH
45613: CALL_OW 266
45617: PUSH
45618: LD_INT 32
45620: PUSH
45621: LD_INT 31
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: IN
45628: AND
45629: PUSH
45630: LD_VAR 0 12
45634: PUSH
45635: LD_INT 1
45637: ARRAY
45638: PPUSH
45639: CALL_OW 313
45643: PUSH
45644: LD_INT 6
45646: EQUAL
45647: OR
45648: IFFALSE 45668
// f := Delete ( f , 1 ) ;
45650: LD_ADDR_VAR 0 12
45654: PUSH
45655: LD_VAR 0 12
45659: PPUSH
45660: LD_INT 1
45662: PPUSH
45663: CALL_OW 3
45667: ST_TO_ADDR
// if not f then
45668: LD_VAR 0 12
45672: NOT
45673: IFFALSE 45691
// begin x := x + 2 ;
45675: LD_ADDR_VAR 0 13
45679: PUSH
45680: LD_VAR 0 13
45684: PUSH
45685: LD_INT 2
45687: PLUS
45688: ST_TO_ADDR
// continue ;
45689: GO 45489
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45691: LD_VAR 0 12
45695: PUSH
45696: LD_INT 1
45698: ARRAY
45699: PPUSH
45700: CALL_OW 266
45704: PUSH
45705: LD_INT 5
45707: EQUAL
45708: IFFALSE 45782
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45710: LD_VAR 0 12
45714: PUSH
45715: LD_INT 1
45717: ARRAY
45718: PPUSH
45719: CALL_OW 313
45723: PUSH
45724: LD_INT 3
45726: LESS
45727: IFFALSE 45763
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45729: LD_INT 0
45731: PPUSH
45732: LD_INT 5
45734: PUSH
45735: LD_INT 8
45737: PUSH
45738: LD_INT 9
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: PUSH
45746: LD_VAR 0 17
45750: ARRAY
45751: PPUSH
45752: LD_VAR 0 4
45756: PPUSH
45757: CALL_OW 380
45761: GO 45780
// PrepareHuman ( false , i , skill ) ;
45763: LD_INT 0
45765: PPUSH
45766: LD_VAR 0 8
45770: PPUSH
45771: LD_VAR 0 4
45775: PPUSH
45776: CALL_OW 380
// end else
45780: GO 45799
// PrepareHuman ( false , i , skill ) ;
45782: LD_INT 0
45784: PPUSH
45785: LD_VAR 0 8
45789: PPUSH
45790: LD_VAR 0 4
45794: PPUSH
45795: CALL_OW 380
// un := CreateHuman ;
45799: LD_ADDR_VAR 0 14
45803: PUSH
45804: CALL_OW 44
45808: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45809: LD_ADDR_VAR 0 7
45813: PUSH
45814: LD_VAR 0 7
45818: PPUSH
45819: LD_INT 1
45821: PPUSH
45822: LD_VAR 0 14
45826: PPUSH
45827: CALL_OW 2
45831: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45832: LD_VAR 0 14
45836: PPUSH
45837: LD_VAR 0 12
45841: PUSH
45842: LD_INT 1
45844: ARRAY
45845: PPUSH
45846: CALL_OW 52
// end ;
45850: GO 45489
45852: POP
45853: POP
// end ;
45854: GO 44791
45856: POP
45857: POP
// result := result ^ buildings ;
45858: LD_ADDR_VAR 0 7
45862: PUSH
45863: LD_VAR 0 7
45867: PUSH
45868: LD_VAR 0 18
45872: ADD
45873: ST_TO_ADDR
// end else
45874: GO 46017
// begin for i = 1 to personel do
45876: LD_ADDR_VAR 0 8
45880: PUSH
45881: DOUBLE
45882: LD_INT 1
45884: DEC
45885: ST_TO_ADDR
45886: LD_VAR 0 6
45890: PUSH
45891: FOR_TO
45892: IFFALSE 46015
// begin if i > 4 then
45894: LD_VAR 0 8
45898: PUSH
45899: LD_INT 4
45901: GREATER
45902: IFFALSE 45906
// break ;
45904: GO 46015
// x := personel [ i ] ;
45906: LD_ADDR_VAR 0 13
45910: PUSH
45911: LD_VAR 0 6
45915: PUSH
45916: LD_VAR 0 8
45920: ARRAY
45921: ST_TO_ADDR
// if x = - 1 then
45922: LD_VAR 0 13
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: EQUAL
45931: IFFALSE 45935
// continue ;
45933: GO 45891
// PrepareHuman ( false , i , skill ) ;
45935: LD_INT 0
45937: PPUSH
45938: LD_VAR 0 8
45942: PPUSH
45943: LD_VAR 0 4
45947: PPUSH
45948: CALL_OW 380
// un := CreateHuman ;
45952: LD_ADDR_VAR 0 14
45956: PUSH
45957: CALL_OW 44
45961: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45962: LD_VAR 0 14
45966: PPUSH
45967: LD_VAR 0 1
45971: PPUSH
45972: CALL_OW 250
45976: PPUSH
45977: LD_VAR 0 1
45981: PPUSH
45982: CALL_OW 251
45986: PPUSH
45987: LD_INT 10
45989: PPUSH
45990: LD_INT 0
45992: PPUSH
45993: CALL_OW 50
// result := result ^ un ;
45997: LD_ADDR_VAR 0 7
46001: PUSH
46002: LD_VAR 0 7
46006: PUSH
46007: LD_VAR 0 14
46011: ADD
46012: ST_TO_ADDR
// end ;
46013: GO 45891
46015: POP
46016: POP
// end ; end ;
46017: LD_VAR 0 7
46021: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46022: LD_INT 0
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
46032: PPUSH
46033: PPUSH
46034: PPUSH
46035: PPUSH
46036: PPUSH
46037: PPUSH
46038: PPUSH
46039: PPUSH
// result := false ;
46040: LD_ADDR_VAR 0 3
46044: PUSH
46045: LD_INT 0
46047: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46048: LD_VAR 0 1
46052: NOT
46053: PUSH
46054: LD_VAR 0 1
46058: PPUSH
46059: CALL_OW 266
46063: PUSH
46064: LD_INT 32
46066: PUSH
46067: LD_INT 33
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: IN
46074: NOT
46075: OR
46076: IFFALSE 46080
// exit ;
46078: GO 47219
// nat := GetNation ( tower ) ;
46080: LD_ADDR_VAR 0 12
46084: PUSH
46085: LD_VAR 0 1
46089: PPUSH
46090: CALL_OW 248
46094: ST_TO_ADDR
// side := GetSide ( tower ) ;
46095: LD_ADDR_VAR 0 16
46099: PUSH
46100: LD_VAR 0 1
46104: PPUSH
46105: CALL_OW 255
46109: ST_TO_ADDR
// x := GetX ( tower ) ;
46110: LD_ADDR_VAR 0 10
46114: PUSH
46115: LD_VAR 0 1
46119: PPUSH
46120: CALL_OW 250
46124: ST_TO_ADDR
// y := GetY ( tower ) ;
46125: LD_ADDR_VAR 0 11
46129: PUSH
46130: LD_VAR 0 1
46134: PPUSH
46135: CALL_OW 251
46139: ST_TO_ADDR
// if not x or not y then
46140: LD_VAR 0 10
46144: NOT
46145: PUSH
46146: LD_VAR 0 11
46150: NOT
46151: OR
46152: IFFALSE 46156
// exit ;
46154: GO 47219
// weapon := 0 ;
46156: LD_ADDR_VAR 0 18
46160: PUSH
46161: LD_INT 0
46163: ST_TO_ADDR
// fac_list := [ ] ;
46164: LD_ADDR_VAR 0 17
46168: PUSH
46169: EMPTY
46170: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46171: LD_ADDR_VAR 0 6
46175: PUSH
46176: LD_VAR 0 1
46180: PPUSH
46181: CALL_OW 274
46185: PPUSH
46186: LD_VAR 0 2
46190: PPUSH
46191: LD_INT 0
46193: PPUSH
46194: CALL 43759 0 3
46198: PPUSH
46199: LD_INT 30
46201: PUSH
46202: LD_INT 3
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PPUSH
46209: CALL_OW 72
46213: ST_TO_ADDR
// if not factories then
46214: LD_VAR 0 6
46218: NOT
46219: IFFALSE 46223
// exit ;
46221: GO 47219
// for i in factories do
46223: LD_ADDR_VAR 0 8
46227: PUSH
46228: LD_VAR 0 6
46232: PUSH
46233: FOR_IN
46234: IFFALSE 46259
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46236: LD_ADDR_VAR 0 17
46240: PUSH
46241: LD_VAR 0 17
46245: PUSH
46246: LD_VAR 0 8
46250: PPUSH
46251: CALL_OW 478
46255: UNION
46256: ST_TO_ADDR
46257: GO 46233
46259: POP
46260: POP
// if not fac_list then
46261: LD_VAR 0 17
46265: NOT
46266: IFFALSE 46270
// exit ;
46268: GO 47219
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46270: LD_ADDR_VAR 0 5
46274: PUSH
46275: LD_INT 4
46277: PUSH
46278: LD_INT 5
46280: PUSH
46281: LD_INT 9
46283: PUSH
46284: LD_INT 10
46286: PUSH
46287: LD_INT 6
46289: PUSH
46290: LD_INT 7
46292: PUSH
46293: LD_INT 11
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 27
46307: PUSH
46308: LD_INT 28
46310: PUSH
46311: LD_INT 26
46313: PUSH
46314: LD_INT 30
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 43
46325: PUSH
46326: LD_INT 44
46328: PUSH
46329: LD_INT 46
46331: PUSH
46332: LD_INT 45
46334: PUSH
46335: LD_INT 47
46337: PUSH
46338: LD_INT 49
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: LIST
46353: PUSH
46354: LD_VAR 0 12
46358: ARRAY
46359: ST_TO_ADDR
// for i in list do
46360: LD_ADDR_VAR 0 8
46364: PUSH
46365: LD_VAR 0 5
46369: PUSH
46370: FOR_IN
46371: IFFALSE 46404
// if not i in fac_list then
46373: LD_VAR 0 8
46377: PUSH
46378: LD_VAR 0 17
46382: IN
46383: NOT
46384: IFFALSE 46402
// list := list diff i ;
46386: LD_ADDR_VAR 0 5
46390: PUSH
46391: LD_VAR 0 5
46395: PUSH
46396: LD_VAR 0 8
46400: DIFF
46401: ST_TO_ADDR
46402: GO 46370
46404: POP
46405: POP
// if not list then
46406: LD_VAR 0 5
46410: NOT
46411: IFFALSE 46415
// exit ;
46413: GO 47219
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46415: LD_VAR 0 12
46419: PUSH
46420: LD_INT 3
46422: EQUAL
46423: PUSH
46424: LD_INT 49
46426: PUSH
46427: LD_VAR 0 5
46431: IN
46432: AND
46433: PUSH
46434: LD_INT 31
46436: PPUSH
46437: LD_VAR 0 16
46441: PPUSH
46442: CALL_OW 321
46446: PUSH
46447: LD_INT 2
46449: EQUAL
46450: AND
46451: IFFALSE 46511
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46453: LD_INT 22
46455: PUSH
46456: LD_VAR 0 16
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 35
46467: PUSH
46468: LD_INT 49
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 91
46477: PUSH
46478: LD_VAR 0 1
46482: PUSH
46483: LD_INT 10
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: PPUSH
46496: CALL_OW 69
46500: NOT
46501: IFFALSE 46511
// weapon := ru_time_lapser ;
46503: LD_ADDR_VAR 0 18
46507: PUSH
46508: LD_INT 49
46510: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46511: LD_VAR 0 12
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: IN
46526: PUSH
46527: LD_INT 11
46529: PUSH
46530: LD_VAR 0 5
46534: IN
46535: PUSH
46536: LD_INT 30
46538: PUSH
46539: LD_VAR 0 5
46543: IN
46544: OR
46545: AND
46546: PUSH
46547: LD_INT 6
46549: PPUSH
46550: LD_VAR 0 16
46554: PPUSH
46555: CALL_OW 321
46559: PUSH
46560: LD_INT 2
46562: EQUAL
46563: AND
46564: IFFALSE 46729
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46566: LD_INT 22
46568: PUSH
46569: LD_VAR 0 16
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 35
46583: PUSH
46584: LD_INT 11
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 35
46593: PUSH
46594: LD_INT 30
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 91
46608: PUSH
46609: LD_VAR 0 1
46613: PUSH
46614: LD_INT 18
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: PPUSH
46627: CALL_OW 69
46631: NOT
46632: PUSH
46633: LD_INT 22
46635: PUSH
46636: LD_VAR 0 16
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: PUSH
46648: LD_INT 30
46650: PUSH
46651: LD_INT 32
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 30
46660: PUSH
46661: LD_INT 33
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 91
46675: PUSH
46676: LD_VAR 0 1
46680: PUSH
46681: LD_INT 12
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: PUSH
46694: EMPTY
46695: LIST
46696: PPUSH
46697: CALL_OW 69
46701: PUSH
46702: LD_INT 2
46704: GREATER
46705: AND
46706: IFFALSE 46729
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46708: LD_ADDR_VAR 0 18
46712: PUSH
46713: LD_INT 11
46715: PUSH
46716: LD_INT 30
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_VAR 0 12
46727: ARRAY
46728: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46729: LD_VAR 0 18
46733: NOT
46734: PUSH
46735: LD_INT 40
46737: PPUSH
46738: LD_VAR 0 16
46742: PPUSH
46743: CALL_OW 321
46747: PUSH
46748: LD_INT 2
46750: EQUAL
46751: AND
46752: PUSH
46753: LD_INT 7
46755: PUSH
46756: LD_VAR 0 5
46760: IN
46761: PUSH
46762: LD_INT 28
46764: PUSH
46765: LD_VAR 0 5
46769: IN
46770: OR
46771: PUSH
46772: LD_INT 45
46774: PUSH
46775: LD_VAR 0 5
46779: IN
46780: OR
46781: AND
46782: IFFALSE 47036
// begin hex := GetHexInfo ( x , y ) ;
46784: LD_ADDR_VAR 0 4
46788: PUSH
46789: LD_VAR 0 10
46793: PPUSH
46794: LD_VAR 0 11
46798: PPUSH
46799: CALL_OW 546
46803: ST_TO_ADDR
// if hex [ 1 ] then
46804: LD_VAR 0 4
46808: PUSH
46809: LD_INT 1
46811: ARRAY
46812: IFFALSE 46816
// exit ;
46814: GO 47219
// height := hex [ 2 ] ;
46816: LD_ADDR_VAR 0 15
46820: PUSH
46821: LD_VAR 0 4
46825: PUSH
46826: LD_INT 2
46828: ARRAY
46829: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46830: LD_ADDR_VAR 0 14
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: LD_INT 5
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: ST_TO_ADDR
// for i in tmp do
46853: LD_ADDR_VAR 0 8
46857: PUSH
46858: LD_VAR 0 14
46862: PUSH
46863: FOR_IN
46864: IFFALSE 47034
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46866: LD_ADDR_VAR 0 9
46870: PUSH
46871: LD_VAR 0 10
46875: PPUSH
46876: LD_VAR 0 8
46880: PPUSH
46881: LD_INT 5
46883: PPUSH
46884: CALL_OW 272
46888: PUSH
46889: LD_VAR 0 11
46893: PPUSH
46894: LD_VAR 0 8
46898: PPUSH
46899: LD_INT 5
46901: PPUSH
46902: CALL_OW 273
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46911: LD_VAR 0 9
46915: PUSH
46916: LD_INT 1
46918: ARRAY
46919: PPUSH
46920: LD_VAR 0 9
46924: PUSH
46925: LD_INT 2
46927: ARRAY
46928: PPUSH
46929: CALL_OW 488
46933: IFFALSE 47032
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46935: LD_ADDR_VAR 0 4
46939: PUSH
46940: LD_VAR 0 9
46944: PUSH
46945: LD_INT 1
46947: ARRAY
46948: PPUSH
46949: LD_VAR 0 9
46953: PUSH
46954: LD_INT 2
46956: ARRAY
46957: PPUSH
46958: CALL_OW 546
46962: ST_TO_ADDR
// if hex [ 1 ] then
46963: LD_VAR 0 4
46967: PUSH
46968: LD_INT 1
46970: ARRAY
46971: IFFALSE 46975
// continue ;
46973: GO 46863
// h := hex [ 2 ] ;
46975: LD_ADDR_VAR 0 13
46979: PUSH
46980: LD_VAR 0 4
46984: PUSH
46985: LD_INT 2
46987: ARRAY
46988: ST_TO_ADDR
// if h + 7 < height then
46989: LD_VAR 0 13
46993: PUSH
46994: LD_INT 7
46996: PLUS
46997: PUSH
46998: LD_VAR 0 15
47002: LESS
47003: IFFALSE 47032
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47005: LD_ADDR_VAR 0 18
47009: PUSH
47010: LD_INT 7
47012: PUSH
47013: LD_INT 28
47015: PUSH
47016: LD_INT 45
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: PUSH
47024: LD_VAR 0 12
47028: ARRAY
47029: ST_TO_ADDR
// break ;
47030: GO 47034
// end ; end ; end ;
47032: GO 46863
47034: POP
47035: POP
// end ; if not weapon then
47036: LD_VAR 0 18
47040: NOT
47041: IFFALSE 47101
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47043: LD_ADDR_VAR 0 5
47047: PUSH
47048: LD_VAR 0 5
47052: PUSH
47053: LD_INT 11
47055: PUSH
47056: LD_INT 30
47058: PUSH
47059: LD_INT 49
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: DIFF
47067: ST_TO_ADDR
// if not list then
47068: LD_VAR 0 5
47072: NOT
47073: IFFALSE 47077
// exit ;
47075: GO 47219
// weapon := list [ rand ( 1 , list ) ] ;
47077: LD_ADDR_VAR 0 18
47081: PUSH
47082: LD_VAR 0 5
47086: PUSH
47087: LD_INT 1
47089: PPUSH
47090: LD_VAR 0 5
47094: PPUSH
47095: CALL_OW 12
47099: ARRAY
47100: ST_TO_ADDR
// end ; if weapon then
47101: LD_VAR 0 18
47105: IFFALSE 47219
// begin tmp := CostOfWeapon ( weapon ) ;
47107: LD_ADDR_VAR 0 14
47111: PUSH
47112: LD_VAR 0 18
47116: PPUSH
47117: CALL_OW 451
47121: ST_TO_ADDR
// j := GetBase ( tower ) ;
47122: LD_ADDR_VAR 0 9
47126: PUSH
47127: LD_VAR 0 1
47131: PPUSH
47132: CALL_OW 274
47136: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47137: LD_VAR 0 9
47141: PPUSH
47142: LD_INT 1
47144: PPUSH
47145: CALL_OW 275
47149: PUSH
47150: LD_VAR 0 14
47154: PUSH
47155: LD_INT 1
47157: ARRAY
47158: GREATEREQUAL
47159: PUSH
47160: LD_VAR 0 9
47164: PPUSH
47165: LD_INT 2
47167: PPUSH
47168: CALL_OW 275
47172: PUSH
47173: LD_VAR 0 14
47177: PUSH
47178: LD_INT 2
47180: ARRAY
47181: GREATEREQUAL
47182: AND
47183: PUSH
47184: LD_VAR 0 9
47188: PPUSH
47189: LD_INT 3
47191: PPUSH
47192: CALL_OW 275
47196: PUSH
47197: LD_VAR 0 14
47201: PUSH
47202: LD_INT 3
47204: ARRAY
47205: GREATEREQUAL
47206: AND
47207: IFFALSE 47219
// result := weapon ;
47209: LD_ADDR_VAR 0 3
47213: PUSH
47214: LD_VAR 0 18
47218: ST_TO_ADDR
// end ; end ;
47219: LD_VAR 0 3
47223: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47224: LD_INT 0
47226: PPUSH
47227: PPUSH
// result := true ;
47228: LD_ADDR_VAR 0 3
47232: PUSH
47233: LD_INT 1
47235: ST_TO_ADDR
// if array1 = array2 then
47236: LD_VAR 0 1
47240: PUSH
47241: LD_VAR 0 2
47245: EQUAL
47246: IFFALSE 47306
// begin for i = 1 to array1 do
47248: LD_ADDR_VAR 0 4
47252: PUSH
47253: DOUBLE
47254: LD_INT 1
47256: DEC
47257: ST_TO_ADDR
47258: LD_VAR 0 1
47262: PUSH
47263: FOR_TO
47264: IFFALSE 47302
// if array1 [ i ] <> array2 [ i ] then
47266: LD_VAR 0 1
47270: PUSH
47271: LD_VAR 0 4
47275: ARRAY
47276: PUSH
47277: LD_VAR 0 2
47281: PUSH
47282: LD_VAR 0 4
47286: ARRAY
47287: NONEQUAL
47288: IFFALSE 47300
// begin result := false ;
47290: LD_ADDR_VAR 0 3
47294: PUSH
47295: LD_INT 0
47297: ST_TO_ADDR
// break ;
47298: GO 47302
// end ;
47300: GO 47263
47302: POP
47303: POP
// end else
47304: GO 47314
// result := false ;
47306: LD_ADDR_VAR 0 3
47310: PUSH
47311: LD_INT 0
47313: ST_TO_ADDR
// end ;
47314: LD_VAR 0 3
47318: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47319: LD_INT 0
47321: PPUSH
47322: PPUSH
// if not array1 or not array2 then
47323: LD_VAR 0 1
47327: NOT
47328: PUSH
47329: LD_VAR 0 2
47333: NOT
47334: OR
47335: IFFALSE 47339
// exit ;
47337: GO 47403
// result := true ;
47339: LD_ADDR_VAR 0 3
47343: PUSH
47344: LD_INT 1
47346: ST_TO_ADDR
// for i = 1 to array1 do
47347: LD_ADDR_VAR 0 4
47351: PUSH
47352: DOUBLE
47353: LD_INT 1
47355: DEC
47356: ST_TO_ADDR
47357: LD_VAR 0 1
47361: PUSH
47362: FOR_TO
47363: IFFALSE 47401
// if array1 [ i ] <> array2 [ i ] then
47365: LD_VAR 0 1
47369: PUSH
47370: LD_VAR 0 4
47374: ARRAY
47375: PUSH
47376: LD_VAR 0 2
47380: PUSH
47381: LD_VAR 0 4
47385: ARRAY
47386: NONEQUAL
47387: IFFALSE 47399
// begin result := false ;
47389: LD_ADDR_VAR 0 3
47393: PUSH
47394: LD_INT 0
47396: ST_TO_ADDR
// break ;
47397: GO 47401
// end ;
47399: GO 47362
47401: POP
47402: POP
// end ;
47403: LD_VAR 0 3
47407: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47408: LD_INT 0
47410: PPUSH
47411: PPUSH
47412: PPUSH
// pom := GetBase ( fac ) ;
47413: LD_ADDR_VAR 0 5
47417: PUSH
47418: LD_VAR 0 1
47422: PPUSH
47423: CALL_OW 274
47427: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47428: LD_ADDR_VAR 0 4
47432: PUSH
47433: LD_VAR 0 2
47437: PUSH
47438: LD_INT 1
47440: ARRAY
47441: PPUSH
47442: LD_VAR 0 2
47446: PUSH
47447: LD_INT 2
47449: ARRAY
47450: PPUSH
47451: LD_VAR 0 2
47455: PUSH
47456: LD_INT 3
47458: ARRAY
47459: PPUSH
47460: LD_VAR 0 2
47464: PUSH
47465: LD_INT 4
47467: ARRAY
47468: PPUSH
47469: CALL_OW 449
47473: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47474: LD_ADDR_VAR 0 3
47478: PUSH
47479: LD_VAR 0 5
47483: PPUSH
47484: LD_INT 1
47486: PPUSH
47487: CALL_OW 275
47491: PUSH
47492: LD_VAR 0 4
47496: PUSH
47497: LD_INT 1
47499: ARRAY
47500: GREATEREQUAL
47501: PUSH
47502: LD_VAR 0 5
47506: PPUSH
47507: LD_INT 2
47509: PPUSH
47510: CALL_OW 275
47514: PUSH
47515: LD_VAR 0 4
47519: PUSH
47520: LD_INT 2
47522: ARRAY
47523: GREATEREQUAL
47524: AND
47525: PUSH
47526: LD_VAR 0 5
47530: PPUSH
47531: LD_INT 3
47533: PPUSH
47534: CALL_OW 275
47538: PUSH
47539: LD_VAR 0 4
47543: PUSH
47544: LD_INT 3
47546: ARRAY
47547: GREATEREQUAL
47548: AND
47549: ST_TO_ADDR
// end ;
47550: LD_VAR 0 3
47554: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47555: LD_INT 0
47557: PPUSH
47558: PPUSH
47559: PPUSH
47560: PPUSH
// pom := GetBase ( building ) ;
47561: LD_ADDR_VAR 0 3
47565: PUSH
47566: LD_VAR 0 1
47570: PPUSH
47571: CALL_OW 274
47575: ST_TO_ADDR
// if not pom then
47576: LD_VAR 0 3
47580: NOT
47581: IFFALSE 47585
// exit ;
47583: GO 47755
// btype := GetBType ( building ) ;
47585: LD_ADDR_VAR 0 5
47589: PUSH
47590: LD_VAR 0 1
47594: PPUSH
47595: CALL_OW 266
47599: ST_TO_ADDR
// if btype = b_armoury then
47600: LD_VAR 0 5
47604: PUSH
47605: LD_INT 4
47607: EQUAL
47608: IFFALSE 47618
// btype := b_barracks ;
47610: LD_ADDR_VAR 0 5
47614: PUSH
47615: LD_INT 5
47617: ST_TO_ADDR
// if btype = b_depot then
47618: LD_VAR 0 5
47622: PUSH
47623: LD_INT 0
47625: EQUAL
47626: IFFALSE 47636
// btype := b_warehouse ;
47628: LD_ADDR_VAR 0 5
47632: PUSH
47633: LD_INT 1
47635: ST_TO_ADDR
// if btype = b_workshop then
47636: LD_VAR 0 5
47640: PUSH
47641: LD_INT 2
47643: EQUAL
47644: IFFALSE 47654
// btype := b_factory ;
47646: LD_ADDR_VAR 0 5
47650: PUSH
47651: LD_INT 3
47653: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47654: LD_ADDR_VAR 0 4
47658: PUSH
47659: LD_VAR 0 5
47663: PPUSH
47664: LD_VAR 0 1
47668: PPUSH
47669: CALL_OW 248
47673: PPUSH
47674: CALL_OW 450
47678: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47679: LD_ADDR_VAR 0 2
47683: PUSH
47684: LD_VAR 0 3
47688: PPUSH
47689: LD_INT 1
47691: PPUSH
47692: CALL_OW 275
47696: PUSH
47697: LD_VAR 0 4
47701: PUSH
47702: LD_INT 1
47704: ARRAY
47705: GREATEREQUAL
47706: PUSH
47707: LD_VAR 0 3
47711: PPUSH
47712: LD_INT 2
47714: PPUSH
47715: CALL_OW 275
47719: PUSH
47720: LD_VAR 0 4
47724: PUSH
47725: LD_INT 2
47727: ARRAY
47728: GREATEREQUAL
47729: AND
47730: PUSH
47731: LD_VAR 0 3
47735: PPUSH
47736: LD_INT 3
47738: PPUSH
47739: CALL_OW 275
47743: PUSH
47744: LD_VAR 0 4
47748: PUSH
47749: LD_INT 3
47751: ARRAY
47752: GREATEREQUAL
47753: AND
47754: ST_TO_ADDR
// end ;
47755: LD_VAR 0 2
47759: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47760: LD_INT 0
47762: PPUSH
47763: PPUSH
47764: PPUSH
// pom := GetBase ( building ) ;
47765: LD_ADDR_VAR 0 4
47769: PUSH
47770: LD_VAR 0 1
47774: PPUSH
47775: CALL_OW 274
47779: ST_TO_ADDR
// if not pom then
47780: LD_VAR 0 4
47784: NOT
47785: IFFALSE 47789
// exit ;
47787: GO 47890
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47789: LD_ADDR_VAR 0 5
47793: PUSH
47794: LD_VAR 0 2
47798: PPUSH
47799: LD_VAR 0 1
47803: PPUSH
47804: CALL_OW 248
47808: PPUSH
47809: CALL_OW 450
47813: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47814: LD_ADDR_VAR 0 3
47818: PUSH
47819: LD_VAR 0 4
47823: PPUSH
47824: LD_INT 1
47826: PPUSH
47827: CALL_OW 275
47831: PUSH
47832: LD_VAR 0 5
47836: PUSH
47837: LD_INT 1
47839: ARRAY
47840: GREATEREQUAL
47841: PUSH
47842: LD_VAR 0 4
47846: PPUSH
47847: LD_INT 2
47849: PPUSH
47850: CALL_OW 275
47854: PUSH
47855: LD_VAR 0 5
47859: PUSH
47860: LD_INT 2
47862: ARRAY
47863: GREATEREQUAL
47864: AND
47865: PUSH
47866: LD_VAR 0 4
47870: PPUSH
47871: LD_INT 3
47873: PPUSH
47874: CALL_OW 275
47878: PUSH
47879: LD_VAR 0 5
47883: PUSH
47884: LD_INT 3
47886: ARRAY
47887: GREATEREQUAL
47888: AND
47889: ST_TO_ADDR
// end ;
47890: LD_VAR 0 3
47894: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47895: LD_INT 0
47897: PPUSH
47898: PPUSH
47899: PPUSH
47900: PPUSH
47901: PPUSH
47902: PPUSH
47903: PPUSH
47904: PPUSH
47905: PPUSH
47906: PPUSH
47907: PPUSH
// result := false ;
47908: LD_ADDR_VAR 0 8
47912: PUSH
47913: LD_INT 0
47915: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47916: LD_VAR 0 5
47920: NOT
47921: PUSH
47922: LD_VAR 0 1
47926: NOT
47927: OR
47928: PUSH
47929: LD_VAR 0 2
47933: NOT
47934: OR
47935: PUSH
47936: LD_VAR 0 3
47940: NOT
47941: OR
47942: IFFALSE 47946
// exit ;
47944: GO 48760
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47946: LD_ADDR_VAR 0 14
47950: PUSH
47951: LD_VAR 0 1
47955: PPUSH
47956: LD_VAR 0 2
47960: PPUSH
47961: LD_VAR 0 3
47965: PPUSH
47966: LD_VAR 0 4
47970: PPUSH
47971: LD_VAR 0 5
47975: PUSH
47976: LD_INT 1
47978: ARRAY
47979: PPUSH
47980: CALL_OW 248
47984: PPUSH
47985: LD_INT 0
47987: PPUSH
47988: CALL 49597 0 6
47992: ST_TO_ADDR
// if not hexes then
47993: LD_VAR 0 14
47997: NOT
47998: IFFALSE 48002
// exit ;
48000: GO 48760
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48002: LD_ADDR_VAR 0 17
48006: PUSH
48007: LD_VAR 0 5
48011: PPUSH
48012: LD_INT 22
48014: PUSH
48015: LD_VAR 0 13
48019: PPUSH
48020: CALL_OW 255
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 30
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 30
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PPUSH
48061: CALL_OW 72
48065: ST_TO_ADDR
// for i = 1 to hexes do
48066: LD_ADDR_VAR 0 9
48070: PUSH
48071: DOUBLE
48072: LD_INT 1
48074: DEC
48075: ST_TO_ADDR
48076: LD_VAR 0 14
48080: PUSH
48081: FOR_TO
48082: IFFALSE 48758
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48084: LD_ADDR_VAR 0 13
48088: PUSH
48089: LD_VAR 0 14
48093: PUSH
48094: LD_VAR 0 9
48098: ARRAY
48099: PUSH
48100: LD_INT 1
48102: ARRAY
48103: PPUSH
48104: LD_VAR 0 14
48108: PUSH
48109: LD_VAR 0 9
48113: ARRAY
48114: PUSH
48115: LD_INT 2
48117: ARRAY
48118: PPUSH
48119: CALL_OW 428
48123: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48124: LD_VAR 0 14
48128: PUSH
48129: LD_VAR 0 9
48133: ARRAY
48134: PUSH
48135: LD_INT 1
48137: ARRAY
48138: PPUSH
48139: LD_VAR 0 14
48143: PUSH
48144: LD_VAR 0 9
48148: ARRAY
48149: PUSH
48150: LD_INT 2
48152: ARRAY
48153: PPUSH
48154: CALL_OW 351
48158: PUSH
48159: LD_VAR 0 14
48163: PUSH
48164: LD_VAR 0 9
48168: ARRAY
48169: PUSH
48170: LD_INT 1
48172: ARRAY
48173: PPUSH
48174: LD_VAR 0 14
48178: PUSH
48179: LD_VAR 0 9
48183: ARRAY
48184: PUSH
48185: LD_INT 2
48187: ARRAY
48188: PPUSH
48189: CALL_OW 488
48193: NOT
48194: OR
48195: PUSH
48196: LD_VAR 0 13
48200: PPUSH
48201: CALL_OW 247
48205: PUSH
48206: LD_INT 3
48208: EQUAL
48209: OR
48210: IFFALSE 48216
// exit ;
48212: POP
48213: POP
48214: GO 48760
// if not tmp then
48216: LD_VAR 0 13
48220: NOT
48221: IFFALSE 48225
// continue ;
48223: GO 48081
// result := true ;
48225: LD_ADDR_VAR 0 8
48229: PUSH
48230: LD_INT 1
48232: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48233: LD_VAR 0 6
48237: PUSH
48238: LD_VAR 0 13
48242: PPUSH
48243: CALL_OW 247
48247: PUSH
48248: LD_INT 2
48250: EQUAL
48251: AND
48252: PUSH
48253: LD_VAR 0 13
48257: PPUSH
48258: CALL_OW 263
48262: PUSH
48263: LD_INT 1
48265: EQUAL
48266: AND
48267: IFFALSE 48431
// begin if IsDrivenBy ( tmp ) then
48269: LD_VAR 0 13
48273: PPUSH
48274: CALL_OW 311
48278: IFFALSE 48282
// continue ;
48280: GO 48081
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48282: LD_VAR 0 6
48286: PPUSH
48287: LD_INT 3
48289: PUSH
48290: LD_INT 60
48292: PUSH
48293: EMPTY
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 3
48302: PUSH
48303: LD_INT 55
48305: PUSH
48306: EMPTY
48307: LIST
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PPUSH
48317: CALL_OW 72
48321: IFFALSE 48429
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48323: LD_ADDR_VAR 0 18
48327: PUSH
48328: LD_VAR 0 6
48332: PPUSH
48333: LD_INT 3
48335: PUSH
48336: LD_INT 60
48338: PUSH
48339: EMPTY
48340: LIST
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: LD_INT 55
48351: PUSH
48352: EMPTY
48353: LIST
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PPUSH
48363: CALL_OW 72
48367: PUSH
48368: LD_INT 1
48370: ARRAY
48371: ST_TO_ADDR
// if IsInUnit ( driver ) then
48372: LD_VAR 0 18
48376: PPUSH
48377: CALL_OW 310
48381: IFFALSE 48392
// ComExit ( driver ) ;
48383: LD_VAR 0 18
48387: PPUSH
48388: CALL 72781 0 1
// AddComEnterUnit ( driver , tmp ) ;
48392: LD_VAR 0 18
48396: PPUSH
48397: LD_VAR 0 13
48401: PPUSH
48402: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48406: LD_VAR 0 18
48410: PPUSH
48411: LD_VAR 0 7
48415: PPUSH
48416: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48420: LD_VAR 0 18
48424: PPUSH
48425: CALL_OW 181
// end ; continue ;
48429: GO 48081
// end ; if not cleaners or not tmp in cleaners then
48431: LD_VAR 0 6
48435: NOT
48436: PUSH
48437: LD_VAR 0 13
48441: PUSH
48442: LD_VAR 0 6
48446: IN
48447: NOT
48448: OR
48449: IFFALSE 48756
// begin if dep then
48451: LD_VAR 0 17
48455: IFFALSE 48591
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48457: LD_ADDR_VAR 0 16
48461: PUSH
48462: LD_VAR 0 17
48466: PUSH
48467: LD_INT 1
48469: ARRAY
48470: PPUSH
48471: CALL_OW 250
48475: PPUSH
48476: LD_VAR 0 17
48480: PUSH
48481: LD_INT 1
48483: ARRAY
48484: PPUSH
48485: CALL_OW 254
48489: PPUSH
48490: LD_INT 5
48492: PPUSH
48493: CALL_OW 272
48497: PUSH
48498: LD_VAR 0 17
48502: PUSH
48503: LD_INT 1
48505: ARRAY
48506: PPUSH
48507: CALL_OW 251
48511: PPUSH
48512: LD_VAR 0 17
48516: PUSH
48517: LD_INT 1
48519: ARRAY
48520: PPUSH
48521: CALL_OW 254
48525: PPUSH
48526: LD_INT 5
48528: PPUSH
48529: CALL_OW 273
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48538: LD_VAR 0 16
48542: PUSH
48543: LD_INT 1
48545: ARRAY
48546: PPUSH
48547: LD_VAR 0 16
48551: PUSH
48552: LD_INT 2
48554: ARRAY
48555: PPUSH
48556: CALL_OW 488
48560: IFFALSE 48591
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48562: LD_VAR 0 13
48566: PPUSH
48567: LD_VAR 0 16
48571: PUSH
48572: LD_INT 1
48574: ARRAY
48575: PPUSH
48576: LD_VAR 0 16
48580: PUSH
48581: LD_INT 2
48583: ARRAY
48584: PPUSH
48585: CALL_OW 111
// continue ;
48589: GO 48081
// end ; end ; r := GetDir ( tmp ) ;
48591: LD_ADDR_VAR 0 15
48595: PUSH
48596: LD_VAR 0 13
48600: PPUSH
48601: CALL_OW 254
48605: ST_TO_ADDR
// if r = 5 then
48606: LD_VAR 0 15
48610: PUSH
48611: LD_INT 5
48613: EQUAL
48614: IFFALSE 48624
// r := 0 ;
48616: LD_ADDR_VAR 0 15
48620: PUSH
48621: LD_INT 0
48623: ST_TO_ADDR
// for j = r to 5 do
48624: LD_ADDR_VAR 0 10
48628: PUSH
48629: DOUBLE
48630: LD_VAR 0 15
48634: DEC
48635: ST_TO_ADDR
48636: LD_INT 5
48638: PUSH
48639: FOR_TO
48640: IFFALSE 48754
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48642: LD_ADDR_VAR 0 11
48646: PUSH
48647: LD_VAR 0 13
48651: PPUSH
48652: CALL_OW 250
48656: PPUSH
48657: LD_VAR 0 10
48661: PPUSH
48662: LD_INT 2
48664: PPUSH
48665: CALL_OW 272
48669: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48670: LD_ADDR_VAR 0 12
48674: PUSH
48675: LD_VAR 0 13
48679: PPUSH
48680: CALL_OW 251
48684: PPUSH
48685: LD_VAR 0 10
48689: PPUSH
48690: LD_INT 2
48692: PPUSH
48693: CALL_OW 273
48697: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48698: LD_VAR 0 11
48702: PPUSH
48703: LD_VAR 0 12
48707: PPUSH
48708: CALL_OW 488
48712: PUSH
48713: LD_VAR 0 11
48717: PPUSH
48718: LD_VAR 0 12
48722: PPUSH
48723: CALL_OW 428
48727: NOT
48728: AND
48729: IFFALSE 48752
// begin ComMoveXY ( tmp , _x , _y ) ;
48731: LD_VAR 0 13
48735: PPUSH
48736: LD_VAR 0 11
48740: PPUSH
48741: LD_VAR 0 12
48745: PPUSH
48746: CALL_OW 111
// break ;
48750: GO 48754
// end ; end ;
48752: GO 48639
48754: POP
48755: POP
// end ; end ;
48756: GO 48081
48758: POP
48759: POP
// end ;
48760: LD_VAR 0 8
48764: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48765: LD_INT 0
48767: PPUSH
48768: PPUSH
48769: PPUSH
48770: PPUSH
48771: PPUSH
48772: PPUSH
48773: PPUSH
48774: PPUSH
48775: PPUSH
48776: PPUSH
// result := false ;
48777: LD_ADDR_VAR 0 6
48781: PUSH
48782: LD_INT 0
48784: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48785: LD_VAR 0 1
48789: NOT
48790: PUSH
48791: LD_VAR 0 1
48795: PPUSH
48796: CALL_OW 266
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: IN
48811: NOT
48812: OR
48813: PUSH
48814: LD_VAR 0 2
48818: NOT
48819: OR
48820: PUSH
48821: LD_VAR 0 5
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: LD_INT 3
48837: PUSH
48838: LD_INT 4
48840: PUSH
48841: LD_INT 5
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: IN
48852: NOT
48853: OR
48854: PUSH
48855: LD_VAR 0 3
48859: PPUSH
48860: LD_VAR 0 4
48864: PPUSH
48865: CALL_OW 488
48869: NOT
48870: OR
48871: IFFALSE 48875
// exit ;
48873: GO 49592
// pom := GetBase ( depot ) ;
48875: LD_ADDR_VAR 0 10
48879: PUSH
48880: LD_VAR 0 1
48884: PPUSH
48885: CALL_OW 274
48889: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48890: LD_ADDR_VAR 0 11
48894: PUSH
48895: LD_VAR 0 2
48899: PPUSH
48900: LD_VAR 0 1
48904: PPUSH
48905: CALL_OW 248
48909: PPUSH
48910: CALL_OW 450
48914: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48915: LD_VAR 0 10
48919: PPUSH
48920: LD_INT 1
48922: PPUSH
48923: CALL_OW 275
48927: PUSH
48928: LD_VAR 0 11
48932: PUSH
48933: LD_INT 1
48935: ARRAY
48936: GREATEREQUAL
48937: PUSH
48938: LD_VAR 0 10
48942: PPUSH
48943: LD_INT 2
48945: PPUSH
48946: CALL_OW 275
48950: PUSH
48951: LD_VAR 0 11
48955: PUSH
48956: LD_INT 2
48958: ARRAY
48959: GREATEREQUAL
48960: AND
48961: PUSH
48962: LD_VAR 0 10
48966: PPUSH
48967: LD_INT 3
48969: PPUSH
48970: CALL_OW 275
48974: PUSH
48975: LD_VAR 0 11
48979: PUSH
48980: LD_INT 3
48982: ARRAY
48983: GREATEREQUAL
48984: AND
48985: NOT
48986: IFFALSE 48990
// exit ;
48988: GO 49592
// if GetBType ( depot ) = b_depot then
48990: LD_VAR 0 1
48994: PPUSH
48995: CALL_OW 266
48999: PUSH
49000: LD_INT 0
49002: EQUAL
49003: IFFALSE 49015
// dist := 28 else
49005: LD_ADDR_VAR 0 14
49009: PUSH
49010: LD_INT 28
49012: ST_TO_ADDR
49013: GO 49023
// dist := 36 ;
49015: LD_ADDR_VAR 0 14
49019: PUSH
49020: LD_INT 36
49022: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49023: LD_VAR 0 1
49027: PPUSH
49028: LD_VAR 0 3
49032: PPUSH
49033: LD_VAR 0 4
49037: PPUSH
49038: CALL_OW 297
49042: PUSH
49043: LD_VAR 0 14
49047: GREATER
49048: IFFALSE 49052
// exit ;
49050: GO 49592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49052: LD_ADDR_VAR 0 12
49056: PUSH
49057: LD_VAR 0 2
49061: PPUSH
49062: LD_VAR 0 3
49066: PPUSH
49067: LD_VAR 0 4
49071: PPUSH
49072: LD_VAR 0 5
49076: PPUSH
49077: LD_VAR 0 1
49081: PPUSH
49082: CALL_OW 248
49086: PPUSH
49087: LD_INT 0
49089: PPUSH
49090: CALL 49597 0 6
49094: ST_TO_ADDR
// if not hexes then
49095: LD_VAR 0 12
49099: NOT
49100: IFFALSE 49104
// exit ;
49102: GO 49592
// hex := GetHexInfo ( x , y ) ;
49104: LD_ADDR_VAR 0 15
49108: PUSH
49109: LD_VAR 0 3
49113: PPUSH
49114: LD_VAR 0 4
49118: PPUSH
49119: CALL_OW 546
49123: ST_TO_ADDR
// if hex [ 1 ] then
49124: LD_VAR 0 15
49128: PUSH
49129: LD_INT 1
49131: ARRAY
49132: IFFALSE 49136
// exit ;
49134: GO 49592
// height := hex [ 2 ] ;
49136: LD_ADDR_VAR 0 13
49140: PUSH
49141: LD_VAR 0 15
49145: PUSH
49146: LD_INT 2
49148: ARRAY
49149: ST_TO_ADDR
// for i = 1 to hexes do
49150: LD_ADDR_VAR 0 7
49154: PUSH
49155: DOUBLE
49156: LD_INT 1
49158: DEC
49159: ST_TO_ADDR
49160: LD_VAR 0 12
49164: PUSH
49165: FOR_TO
49166: IFFALSE 49496
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49168: LD_VAR 0 12
49172: PUSH
49173: LD_VAR 0 7
49177: ARRAY
49178: PUSH
49179: LD_INT 1
49181: ARRAY
49182: PPUSH
49183: LD_VAR 0 12
49187: PUSH
49188: LD_VAR 0 7
49192: ARRAY
49193: PUSH
49194: LD_INT 2
49196: ARRAY
49197: PPUSH
49198: CALL_OW 488
49202: NOT
49203: PUSH
49204: LD_VAR 0 12
49208: PUSH
49209: LD_VAR 0 7
49213: ARRAY
49214: PUSH
49215: LD_INT 1
49217: ARRAY
49218: PPUSH
49219: LD_VAR 0 12
49223: PUSH
49224: LD_VAR 0 7
49228: ARRAY
49229: PUSH
49230: LD_INT 2
49232: ARRAY
49233: PPUSH
49234: CALL_OW 428
49238: PUSH
49239: LD_INT 0
49241: GREATER
49242: OR
49243: PUSH
49244: LD_VAR 0 12
49248: PUSH
49249: LD_VAR 0 7
49253: ARRAY
49254: PUSH
49255: LD_INT 1
49257: ARRAY
49258: PPUSH
49259: LD_VAR 0 12
49263: PUSH
49264: LD_VAR 0 7
49268: ARRAY
49269: PUSH
49270: LD_INT 2
49272: ARRAY
49273: PPUSH
49274: CALL_OW 351
49278: OR
49279: IFFALSE 49285
// exit ;
49281: POP
49282: POP
49283: GO 49592
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49285: LD_ADDR_VAR 0 8
49289: PUSH
49290: LD_VAR 0 12
49294: PUSH
49295: LD_VAR 0 7
49299: ARRAY
49300: PUSH
49301: LD_INT 1
49303: ARRAY
49304: PPUSH
49305: LD_VAR 0 12
49309: PUSH
49310: LD_VAR 0 7
49314: ARRAY
49315: PUSH
49316: LD_INT 2
49318: ARRAY
49319: PPUSH
49320: CALL_OW 546
49324: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49325: LD_VAR 0 8
49329: PUSH
49330: LD_INT 1
49332: ARRAY
49333: PUSH
49334: LD_VAR 0 8
49338: PUSH
49339: LD_INT 2
49341: ARRAY
49342: PUSH
49343: LD_VAR 0 13
49347: PUSH
49348: LD_INT 2
49350: PLUS
49351: GREATER
49352: OR
49353: PUSH
49354: LD_VAR 0 8
49358: PUSH
49359: LD_INT 2
49361: ARRAY
49362: PUSH
49363: LD_VAR 0 13
49367: PUSH
49368: LD_INT 2
49370: MINUS
49371: LESS
49372: OR
49373: PUSH
49374: LD_VAR 0 8
49378: PUSH
49379: LD_INT 3
49381: ARRAY
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 8
49388: PUSH
49389: LD_INT 9
49391: PUSH
49392: LD_INT 10
49394: PUSH
49395: LD_INT 11
49397: PUSH
49398: LD_INT 12
49400: PUSH
49401: LD_INT 13
49403: PUSH
49404: LD_INT 16
49406: PUSH
49407: LD_INT 17
49409: PUSH
49410: LD_INT 18
49412: PUSH
49413: LD_INT 19
49415: PUSH
49416: LD_INT 20
49418: PUSH
49419: LD_INT 21
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: IN
49437: NOT
49438: OR
49439: PUSH
49440: LD_VAR 0 8
49444: PUSH
49445: LD_INT 5
49447: ARRAY
49448: NOT
49449: OR
49450: PUSH
49451: LD_VAR 0 8
49455: PUSH
49456: LD_INT 6
49458: ARRAY
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: LD_INT 7
49468: PUSH
49469: LD_INT 9
49471: PUSH
49472: LD_INT 10
49474: PUSH
49475: LD_INT 11
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: IN
49486: NOT
49487: OR
49488: IFFALSE 49494
// exit ;
49490: POP
49491: POP
49492: GO 49592
// end ;
49494: GO 49165
49496: POP
49497: POP
// side := GetSide ( depot ) ;
49498: LD_ADDR_VAR 0 9
49502: PUSH
49503: LD_VAR 0 1
49507: PPUSH
49508: CALL_OW 255
49512: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49513: LD_VAR 0 9
49517: PPUSH
49518: LD_VAR 0 3
49522: PPUSH
49523: LD_VAR 0 4
49527: PPUSH
49528: LD_INT 20
49530: PPUSH
49531: CALL 41913 0 4
49535: PUSH
49536: LD_INT 4
49538: ARRAY
49539: IFFALSE 49543
// exit ;
49541: GO 49592
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49543: LD_VAR 0 2
49547: PUSH
49548: LD_INT 29
49550: PUSH
49551: LD_INT 30
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: IN
49558: PUSH
49559: LD_VAR 0 3
49563: PPUSH
49564: LD_VAR 0 4
49568: PPUSH
49569: LD_VAR 0 9
49573: PPUSH
49574: CALL_OW 440
49578: NOT
49579: AND
49580: IFFALSE 49584
// exit ;
49582: GO 49592
// result := true ;
49584: LD_ADDR_VAR 0 6
49588: PUSH
49589: LD_INT 1
49591: ST_TO_ADDR
// end ;
49592: LD_VAR 0 6
49596: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49597: LD_INT 0
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
49615: PPUSH
49616: PPUSH
49617: PPUSH
49618: PPUSH
49619: PPUSH
49620: PPUSH
49621: PPUSH
49622: PPUSH
49623: PPUSH
49624: PPUSH
49625: PPUSH
49626: PPUSH
49627: PPUSH
49628: PPUSH
49629: PPUSH
49630: PPUSH
49631: PPUSH
49632: PPUSH
49633: PPUSH
49634: PPUSH
49635: PPUSH
49636: PPUSH
49637: PPUSH
49638: PPUSH
49639: PPUSH
49640: PPUSH
49641: PPUSH
49642: PPUSH
49643: PPUSH
49644: PPUSH
49645: PPUSH
49646: PPUSH
49647: PPUSH
49648: PPUSH
49649: PPUSH
49650: PPUSH
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
49655: PPUSH
49656: PPUSH
// result = [ ] ;
49657: LD_ADDR_VAR 0 7
49661: PUSH
49662: EMPTY
49663: ST_TO_ADDR
// temp_list = [ ] ;
49664: LD_ADDR_VAR 0 9
49668: PUSH
49669: EMPTY
49670: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49671: LD_VAR 0 4
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: LD_INT 4
49690: PUSH
49691: LD_INT 5
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: IN
49702: NOT
49703: PUSH
49704: LD_VAR 0 1
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: IN
49719: PUSH
49720: LD_VAR 0 5
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: IN
49739: NOT
49740: AND
49741: OR
49742: IFFALSE 49746
// exit ;
49744: GO 68137
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49746: LD_VAR 0 1
49750: PUSH
49751: LD_INT 6
49753: PUSH
49754: LD_INT 7
49756: PUSH
49757: LD_INT 8
49759: PUSH
49760: LD_INT 13
49762: PUSH
49763: LD_INT 12
49765: PUSH
49766: LD_INT 15
49768: PUSH
49769: LD_INT 11
49771: PUSH
49772: LD_INT 14
49774: PUSH
49775: LD_INT 10
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: IN
49789: IFFALSE 49799
// btype = b_lab ;
49791: LD_ADDR_VAR 0 1
49795: PUSH
49796: LD_INT 6
49798: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49799: LD_VAR 0 6
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: LIST
49817: IN
49818: NOT
49819: PUSH
49820: LD_VAR 0 1
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: LD_INT 6
49839: PUSH
49840: LD_INT 36
49842: PUSH
49843: LD_INT 4
49845: PUSH
49846: LD_INT 5
49848: PUSH
49849: LD_INT 31
49851: PUSH
49852: LD_INT 32
49854: PUSH
49855: LD_INT 33
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: IN
49871: NOT
49872: PUSH
49873: LD_VAR 0 6
49877: PUSH
49878: LD_INT 1
49880: EQUAL
49881: AND
49882: OR
49883: PUSH
49884: LD_VAR 0 1
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: IN
49899: NOT
49900: PUSH
49901: LD_VAR 0 6
49905: PUSH
49906: LD_INT 2
49908: EQUAL
49909: AND
49910: OR
49911: IFFALSE 49921
// mode = 0 ;
49913: LD_ADDR_VAR 0 6
49917: PUSH
49918: LD_INT 0
49920: ST_TO_ADDR
// case mode of 0 :
49921: LD_VAR 0 6
49925: PUSH
49926: LD_INT 0
49928: DOUBLE
49929: EQUAL
49930: IFTRUE 49934
49932: GO 61387
49934: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49935: LD_ADDR_VAR 0 11
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50128: LD_ADDR_VAR 0 12
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50324: LD_ADDR_VAR 0 13
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: NEG
50496: PUSH
50497: LD_INT 3
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50523: LD_ADDR_VAR 0 14
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50719: LD_ADDR_VAR 0 15
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50912: LD_ADDR_VAR 0 16
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 3
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51105: LD_ADDR_VAR 0 17
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51335: LD_ADDR_VAR 0 18
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51565: LD_ADDR_VAR 0 19
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51795: LD_ADDR_VAR 0 20
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52025: LD_ADDR_VAR 0 21
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52255: LD_ADDR_VAR 0 22
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52485: LD_ADDR_VAR 0 23
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52765: LD_ADDR_VAR 0 24
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53041: LD_ADDR_VAR 0 25
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 3
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53315: LD_ADDR_VAR 0 26
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53591: LD_ADDR_VAR 0 27
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53871: LD_ADDR_VAR 0 28
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 3
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 3
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54153: LD_ADDR_VAR 0 29
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 3
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: NEG
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54432: LD_ADDR_VAR 0 30
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54710: LD_ADDR_VAR 0 31
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: LD_INT 3
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 3
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54988: LD_ADDR_VAR 0 32
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55266: LD_ADDR_VAR 0 33
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 3
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 3
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 3
55510: NEG
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55545: LD_ADDR_VAR 0 34
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 3
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55825: LD_ADDR_VAR 0 35
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55937: LD_ADDR_VAR 0 36
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56049: LD_ADDR_VAR 0 37
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56161: LD_ADDR_VAR 0 38
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: NEG
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56273: LD_ADDR_VAR 0 39
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56385: LD_ADDR_VAR 0 40
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56497: LD_ADDR_VAR 0 41
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: LD_INT 3
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56847: LD_ADDR_VAR 0 42
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 2
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 3
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: LD_INT 3
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 3
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57197: LD_ADDR_VAR 0 43
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 3
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 3
57504: NEG
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57545: LD_ADDR_VAR 0 44
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 2
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: NEG
57736: PUSH
57737: LD_INT 3
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 3
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: NEG
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 3
57854: NEG
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57895: LD_ADDR_VAR 0 45
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: LD_INT 3
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 3
58192: NEG
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: NEG
58205: PUSH
58206: LD_INT 3
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58245: LD_ADDR_VAR 0 46
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 3
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 3
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 3
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 3
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 3
58541: NEG
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58593: LD_ADDR_VAR 0 47
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58744: LD_ADDR_VAR 0 48
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 2
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58891: LD_ADDR_VAR 0 49
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59035: LD_ADDR_VAR 0 50
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59179: LD_ADDR_VAR 0 51
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: NEG
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59326: LD_ADDR_VAR 0 52
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59477: LD_ADDR_VAR 0 53
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59707: LD_ADDR_VAR 0 54
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 2
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59937: LD_ADDR_VAR 0 55
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: LD_INT 2
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 2
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60167: LD_ADDR_VAR 0 56
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60397: LD_ADDR_VAR 0 57
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60627: LD_ADDR_VAR 0 58
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 2
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: NEG
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60857: LD_ADDR_VAR 0 59
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60945: LD_ADDR_VAR 0 60
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61033: LD_ADDR_VAR 0 61
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61121: LD_ADDR_VAR 0 62
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61209: LD_ADDR_VAR 0 63
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61297: LD_ADDR_VAR 0 64
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: ST_TO_ADDR
// end ; 1 :
61385: GO 67282
61387: LD_INT 1
61389: DOUBLE
61390: EQUAL
61391: IFTRUE 61395
61393: GO 64018
61395: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61396: LD_ADDR_VAR 0 11
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: LD_INT 3
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: LIST
61439: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61440: LD_ADDR_VAR 0 12
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 3
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: LIST
61480: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61481: LD_ADDR_VAR 0 13
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: LIST
61520: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61521: LD_ADDR_VAR 0 14
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61562: LD_ADDR_VAR 0 15
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: NEG
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 3
61591: NEG
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: LIST
61605: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61606: LD_ADDR_VAR 0 16
61610: PUSH
61611: LD_INT 2
61613: NEG
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: NEG
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 3
61637: NEG
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: LIST
61651: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61652: LD_ADDR_VAR 0 17
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 3
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: LIST
61695: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61696: LD_ADDR_VAR 0 18
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61737: LD_ADDR_VAR 0 19
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: LD_INT 3
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: LD_INT 3
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61777: LD_ADDR_VAR 0 20
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61818: LD_ADDR_VAR 0 21
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 3
61836: NEG
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 3
61847: NEG
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61862: LD_ADDR_VAR 0 22
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: NEG
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: NEG
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61908: LD_ADDR_VAR 0 23
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: LD_INT 3
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 3
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61952: LD_ADDR_VAR 0 24
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 4
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61993: LD_ADDR_VAR 0 25
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: LD_INT 3
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 4
62010: PUSH
62011: LD_INT 3
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: LD_INT 4
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62033: LD_ADDR_VAR 0 26
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: LD_INT 3
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: LD_INT 4
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 3
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: LIST
62073: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62074: LD_ADDR_VAR 0 27
62078: PUSH
62079: LD_INT 3
62081: NEG
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 3
62092: NEG
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 4
62103: NEG
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62118: LD_ADDR_VAR 0 28
62122: PUSH
62123: LD_INT 3
62125: NEG
62126: PUSH
62127: LD_INT 3
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: NEG
62138: PUSH
62139: LD_INT 4
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 4
62149: NEG
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62164: LD_ADDR_VAR 0 29
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: LD_INT 3
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: LD_INT 3
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: LD_INT 4
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 4
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: LD_INT 3
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: LD_INT 5
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 5
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: LD_INT 4
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: LD_INT 6
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 6
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: LD_INT 5
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62319: LD_ADDR_VAR 0 30
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 3
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 3
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 4
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 4
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 4
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 5
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 5
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 5
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 6
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 6
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62462: LD_ADDR_VAR 0 31
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 3
62479: PUSH
62480: LD_INT 3
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: LD_INT 3
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 4
62499: PUSH
62500: LD_INT 3
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 4
62509: PUSH
62510: LD_INT 4
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 3
62519: PUSH
62520: LD_INT 4
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 5
62529: PUSH
62530: LD_INT 4
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 5
62539: PUSH
62540: LD_INT 5
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: LD_INT 5
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 6
62559: PUSH
62560: LD_INT 5
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 6
62569: PUSH
62570: LD_INT 6
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 5
62579: PUSH
62580: LD_INT 6
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62601: LD_ADDR_VAR 0 32
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: LD_INT 3
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 3
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 4
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 4
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 3
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: LD_INT 5
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 5
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: LD_INT 4
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 6
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 6
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: LD_INT 5
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62744: LD_ADDR_VAR 0 33
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 3
62762: NEG
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 3
62773: NEG
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 3
62785: NEG
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 4
62796: NEG
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 4
62807: NEG
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 4
62819: NEG
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 5
62830: NEG
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 5
62841: NEG
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 5
62853: NEG
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 6
62864: NEG
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 6
62875: NEG
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62899: LD_ADDR_VAR 0 34
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: LD_INT 3
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: NEG
62919: PUSH
62920: LD_INT 2
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 3
62930: NEG
62931: PUSH
62932: LD_INT 3
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 3
62942: NEG
62943: PUSH
62944: LD_INT 4
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 4
62954: NEG
62955: PUSH
62956: LD_INT 3
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 4
62966: NEG
62967: PUSH
62968: LD_INT 4
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 4
62978: NEG
62979: PUSH
62980: LD_INT 5
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 5
62990: NEG
62991: PUSH
62992: LD_INT 4
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 5
63002: NEG
63003: PUSH
63004: LD_INT 5
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 5
63014: NEG
63015: PUSH
63016: LD_INT 6
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 6
63026: NEG
63027: PUSH
63028: LD_INT 5
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 6
63038: NEG
63039: PUSH
63040: LD_INT 6
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63062: LD_ADDR_VAR 0 41
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 2
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: LD_INT 3
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63106: LD_ADDR_VAR 0 42
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: LIST
63146: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63147: LD_ADDR_VAR 0 43
63151: PUSH
63152: LD_INT 2
63154: PUSH
63155: LD_INT 2
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: LD_INT 2
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: PUSH
63175: LD_INT 3
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63187: LD_ADDR_VAR 0 44
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: LD_INT 3
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: LIST
63227: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63228: LD_ADDR_VAR 0 45
63232: PUSH
63233: LD_INT 2
63235: NEG
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: NEG
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: NEG
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63272: LD_ADDR_VAR 0 46
63276: PUSH
63277: LD_INT 2
63279: NEG
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 2
63291: NEG
63292: PUSH
63293: LD_INT 3
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 3
63303: NEG
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63318: LD_ADDR_VAR 0 47
63322: PUSH
63323: LD_INT 2
63325: NEG
63326: PUSH
63327: LD_INT 3
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: LD_INT 3
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63351: LD_ADDR_VAR 0 48
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: LD_INT 2
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63382: LD_ADDR_VAR 0 49
63386: PUSH
63387: LD_INT 3
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 3
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63411: LD_ADDR_VAR 0 50
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: LD_INT 3
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 3
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63440: LD_ADDR_VAR 0 51
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: LD_INT 2
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: NEG
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63471: LD_ADDR_VAR 0 52
63475: PUSH
63476: LD_INT 3
63478: NEG
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 3
63490: NEG
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63504: LD_ADDR_VAR 0 53
63508: PUSH
63509: LD_INT 1
63511: NEG
63512: PUSH
63513: LD_INT 3
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 3
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63548: LD_ADDR_VAR 0 54
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 3
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63589: LD_ADDR_VAR 0 55
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: LD_INT 2
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 3
63606: PUSH
63607: LD_INT 3
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: LD_INT 3
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: LIST
63628: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63629: LD_ADDR_VAR 0 56
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 3
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: LD_INT 3
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: LIST
63669: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63670: LD_ADDR_VAR 0 57
63674: PUSH
63675: LD_INT 2
63677: NEG
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 3
63688: NEG
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 3
63699: NEG
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: LIST
63713: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63714: LD_ADDR_VAR 0 58
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: LD_INT 3
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 3
63733: NEG
63734: PUSH
63735: LD_INT 2
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 3
63745: NEG
63746: PUSH
63747: LD_INT 3
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: LIST
63759: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63760: LD_ADDR_VAR 0 59
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: LD_INT 2
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 2
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: LIST
63803: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63804: LD_ADDR_VAR 0 60
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: LIST
63844: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63845: LD_ADDR_VAR 0 61
63849: PUSH
63850: LD_INT 2
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: LD_INT 2
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63885: LD_ADDR_VAR 0 62
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63926: LD_ADDR_VAR 0 63
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 2
63944: NEG
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 2
63955: NEG
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63970: LD_ADDR_VAR 0 64
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: LD_INT 2
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 2
64001: NEG
64002: PUSH
64003: LD_INT 2
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: ST_TO_ADDR
// end ; 2 :
64016: GO 67282
64018: LD_INT 2
64020: DOUBLE
64021: EQUAL
64022: IFTRUE 64026
64024: GO 67281
64026: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64027: LD_ADDR_VAR 0 29
64031: PUSH
64032: LD_INT 4
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 4
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 5
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 5
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 4
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 3
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 3
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 3
64106: PUSH
64107: LD_INT 2
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 5
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 3
64127: PUSH
64128: LD_INT 3
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 3
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 4
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 4
64157: PUSH
64158: LD_INT 4
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 3
64167: PUSH
64168: LD_INT 4
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 2
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: LD_INT 2
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 4
64197: PUSH
64198: LD_INT 2
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: LD_INT 4
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 4
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 3
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 4
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 1
64247: PUSH
64248: LD_INT 5
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: LD_INT 5
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: LD_INT 4
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: LD_INT 3
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: LD_INT 5
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: LD_INT 3
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 2
64344: NEG
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 3
64355: NEG
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 4
64366: NEG
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 4
64377: NEG
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 4
64389: NEG
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 2
64401: NEG
64402: PUSH
64403: LD_INT 2
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 4
64412: NEG
64413: PUSH
64414: LD_INT 4
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 4
64424: NEG
64425: PUSH
64426: LD_INT 5
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: LD_INT 4
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: LD_INT 3
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 4
64460: NEG
64461: PUSH
64462: LD_INT 3
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 5
64472: NEG
64473: PUSH
64474: LD_INT 4
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 5
64484: NEG
64485: PUSH
64486: LD_INT 5
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 3
64496: NEG
64497: PUSH
64498: LD_INT 5
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 5
64508: NEG
64509: PUSH
64510: LD_INT 3
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64565: LD_ADDR_VAR 0 30
64569: PUSH
64570: LD_INT 4
64572: PUSH
64573: LD_INT 4
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 4
64582: PUSH
64583: LD_INT 3
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 5
64592: PUSH
64593: LD_INT 4
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 5
64602: PUSH
64603: LD_INT 5
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 4
64612: PUSH
64613: LD_INT 5
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: LD_INT 4
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 3
64632: PUSH
64633: LD_INT 3
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 5
64642: PUSH
64643: LD_INT 3
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 3
64652: PUSH
64653: LD_INT 5
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: LD_INT 3
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: LD_INT 2
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: LD_INT 3
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: LD_INT 4
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 4
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 3
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 2
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 2
64734: PUSH
64735: LD_INT 4
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 2
64744: NEG
64745: PUSH
64746: LD_INT 2
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 4
64755: NEG
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 4
64766: NEG
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 3
64789: NEG
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 4
64800: NEG
64801: PUSH
64802: LD_INT 1
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 5
64811: NEG
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 5
64822: NEG
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 5
64834: NEG
64835: PUSH
64836: LD_INT 2
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 3
64846: NEG
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 3
64857: NEG
64858: PUSH
64859: LD_INT 3
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 3
64869: NEG
64870: PUSH
64871: LD_INT 4
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: NEG
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: LD_INT 2
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 3
64905: NEG
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 4
64917: NEG
64918: PUSH
64919: LD_INT 3
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 4
64929: NEG
64930: PUSH
64931: LD_INT 4
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: NEG
64942: PUSH
64943: LD_INT 4
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 4
64953: NEG
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 0
64965: PUSH
64966: LD_INT 4
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 5
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: LD_INT 4
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: LD_INT 3
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: LD_INT 4
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: LD_INT 5
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: LD_INT 3
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 2
65055: NEG
65056: PUSH
65057: LD_INT 5
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65112: LD_ADDR_VAR 0 31
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 4
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 3
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 4
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: LD_INT 5
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: LD_INT 5
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: LD_INT 4
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 3
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 2
65191: PUSH
65192: LD_INT 5
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 2
65201: NEG
65202: PUSH
65203: LD_INT 3
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 3
65212: NEG
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 2
65235: NEG
65236: PUSH
65237: LD_INT 0
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 4
65268: NEG
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 4
65279: NEG
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 4
65291: NEG
65292: PUSH
65293: LD_INT 2
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 2
65303: NEG
65304: PUSH
65305: LD_INT 2
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 4
65314: NEG
65315: PUSH
65316: LD_INT 4
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 4
65326: NEG
65327: PUSH
65328: LD_INT 5
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: LD_INT 4
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 3
65350: NEG
65351: PUSH
65352: LD_INT 3
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 4
65362: NEG
65363: PUSH
65364: LD_INT 3
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 5
65374: NEG
65375: PUSH
65376: LD_INT 4
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 5
65386: NEG
65387: PUSH
65388: LD_INT 5
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 3
65398: NEG
65399: PUSH
65400: LD_INT 5
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 5
65410: NEG
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: LD_INT 3
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: LD_INT 4
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: LD_INT 3
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 0
65466: PUSH
65467: LD_INT 2
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 1
65477: NEG
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: LD_INT 4
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 2
65501: PUSH
65502: LD_INT 2
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: NEG
65513: PUSH
65514: LD_INT 4
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 4
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 4
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 5
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 5
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 4
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 3
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: PUSH
65586: LD_INT 1
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 5
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65662: LD_ADDR_VAR 0 32
65666: PUSH
65667: LD_INT 4
65669: NEG
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 4
65680: NEG
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 3
65692: NEG
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 3
65703: NEG
65704: PUSH
65705: LD_INT 1
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 4
65714: NEG
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 5
65725: NEG
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 5
65736: NEG
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 5
65748: NEG
65749: PUSH
65750: LD_INT 2
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 3
65760: NEG
65761: PUSH
65762: LD_INT 2
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 3
65771: NEG
65772: PUSH
65773: LD_INT 3
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 3
65783: NEG
65784: PUSH
65785: LD_INT 4
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 2
65795: NEG
65796: PUSH
65797: LD_INT 3
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 2
65807: NEG
65808: PUSH
65809: LD_INT 2
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 3
65819: NEG
65820: PUSH
65821: LD_INT 2
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 4
65831: NEG
65832: PUSH
65833: LD_INT 3
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 4
65843: NEG
65844: PUSH
65845: LD_INT 4
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: LD_INT 4
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 4
65867: NEG
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: LD_INT 4
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 5
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: LD_INT 4
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: LD_INT 3
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: LD_INT 3
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: LD_INT 4
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: NEG
65947: PUSH
65948: LD_INT 5
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: LD_INT 3
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 2
65969: NEG
65970: PUSH
65971: LD_INT 5
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 3
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 4
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 4
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 3
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: PUSH
66054: LD_INT 2
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 4
66064: PUSH
66065: LD_INT 2
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 4
66074: PUSH
66075: LD_INT 4
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 4
66084: PUSH
66085: LD_INT 3
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 5
66094: PUSH
66095: LD_INT 4
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 5
66104: PUSH
66105: LD_INT 5
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 4
66114: PUSH
66115: LD_INT 5
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: LD_INT 4
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 3
66134: PUSH
66135: LD_INT 3
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 5
66144: PUSH
66145: LD_INT 3
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 3
66154: PUSH
66155: LD_INT 5
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66209: LD_ADDR_VAR 0 33
66213: PUSH
66214: LD_INT 4
66216: NEG
66217: PUSH
66218: LD_INT 4
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 4
66228: NEG
66229: PUSH
66230: LD_INT 5
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 3
66240: NEG
66241: PUSH
66242: LD_INT 4
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 3
66252: NEG
66253: PUSH
66254: LD_INT 3
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 4
66264: NEG
66265: PUSH
66266: LD_INT 3
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 5
66276: NEG
66277: PUSH
66278: LD_INT 4
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 5
66288: NEG
66289: PUSH
66290: LD_INT 5
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 3
66300: NEG
66301: PUSH
66302: LD_INT 5
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 5
66312: NEG
66313: PUSH
66314: LD_INT 3
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: LD_INT 3
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: LD_INT 4
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: LD_INT 3
66349: NEG
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: LD_INT 2
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: LD_INT 2
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: NEG
66380: PUSH
66381: LD_INT 3
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 1
66391: NEG
66392: PUSH
66393: LD_INT 4
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: LD_INT 2
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 2
66414: NEG
66415: PUSH
66416: LD_INT 4
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 4
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 4
66436: PUSH
66437: LD_INT 1
66439: NEG
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 5
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 5
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 4
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 3
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 3
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 3
66498: PUSH
66499: LD_INT 2
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 5
66509: PUSH
66510: LD_INT 2
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 3
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 3
66529: PUSH
66530: LD_INT 2
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 4
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 4
66549: PUSH
66550: LD_INT 4
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: PUSH
66560: LD_INT 4
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: LD_INT 3
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 2
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 4
66589: PUSH
66590: LD_INT 2
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 2
66599: PUSH
66600: LD_INT 4
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: LD_INT 4
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 1
66629: PUSH
66630: LD_INT 4
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: LD_INT 5
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: LD_INT 5
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: LD_INT 4
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: LD_INT 3
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 2
66681: PUSH
66682: LD_INT 5
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: LD_INT 3
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66747: LD_ADDR_VAR 0 34
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: LD_INT 4
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: LD_INT 5
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: PUSH
66777: LD_INT 4
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: LD_INT 3
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: LD_INT 3
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: LD_INT 4
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: LD_INT 5
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 2
66833: PUSH
66834: LD_INT 3
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 2
66844: NEG
66845: PUSH
66846: LD_INT 5
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 3
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 3
66866: PUSH
66867: LD_INT 1
66869: NEG
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 4
66877: PUSH
66878: LD_INT 0
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 4
66887: PUSH
66888: LD_INT 1
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 3
66897: PUSH
66898: LD_INT 1
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 2
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 2
66917: PUSH
66918: LD_INT 1
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 2
66928: PUSH
66929: LD_INT 2
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 4
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 4
66949: PUSH
66950: LD_INT 4
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 4
66959: PUSH
66960: LD_INT 3
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 5
66969: PUSH
66970: LD_INT 4
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 5
66979: PUSH
66980: LD_INT 5
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 4
66989: PUSH
66990: LD_INT 5
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 3
66999: PUSH
67000: LD_INT 4
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 3
67009: PUSH
67010: LD_INT 3
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 5
67019: PUSH
67020: LD_INT 3
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 3
67029: PUSH
67030: LD_INT 5
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 0
67039: PUSH
67040: LD_INT 3
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: LD_INT 2
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: LD_INT 3
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: LD_INT 4
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: LD_INT 4
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: LD_INT 3
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: LD_INT 2
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 2
67111: PUSH
67112: LD_INT 4
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 2
67121: NEG
67122: PUSH
67123: LD_INT 2
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 4
67132: NEG
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 4
67143: NEG
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 3
67155: NEG
67156: PUSH
67157: LD_INT 0
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 3
67166: NEG
67167: PUSH
67168: LD_INT 1
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 4
67177: NEG
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 5
67188: NEG
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 5
67199: NEG
67200: PUSH
67201: LD_INT 1
67203: NEG
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 5
67211: NEG
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 3
67223: NEG
67224: PUSH
67225: LD_INT 2
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: ST_TO_ADDR
// end ; end ;
67279: GO 67282
67281: POP
// case btype of b_depot , b_warehouse :
67282: LD_VAR 0 1
67286: PUSH
67287: LD_INT 0
67289: DOUBLE
67290: EQUAL
67291: IFTRUE 67301
67293: LD_INT 1
67295: DOUBLE
67296: EQUAL
67297: IFTRUE 67301
67299: GO 67502
67301: POP
// case nation of nation_american :
67302: LD_VAR 0 5
67306: PUSH
67307: LD_INT 1
67309: DOUBLE
67310: EQUAL
67311: IFTRUE 67315
67313: GO 67371
67315: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67316: LD_ADDR_VAR 0 9
67320: PUSH
67321: LD_VAR 0 11
67325: PUSH
67326: LD_VAR 0 12
67330: PUSH
67331: LD_VAR 0 13
67335: PUSH
67336: LD_VAR 0 14
67340: PUSH
67341: LD_VAR 0 15
67345: PUSH
67346: LD_VAR 0 16
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: PUSH
67359: LD_VAR 0 4
67363: PUSH
67364: LD_INT 1
67366: PLUS
67367: ARRAY
67368: ST_TO_ADDR
67369: GO 67500
67371: LD_INT 2
67373: DOUBLE
67374: EQUAL
67375: IFTRUE 67379
67377: GO 67435
67379: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67380: LD_ADDR_VAR 0 9
67384: PUSH
67385: LD_VAR 0 17
67389: PUSH
67390: LD_VAR 0 18
67394: PUSH
67395: LD_VAR 0 19
67399: PUSH
67400: LD_VAR 0 20
67404: PUSH
67405: LD_VAR 0 21
67409: PUSH
67410: LD_VAR 0 22
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: PUSH
67423: LD_VAR 0 4
67427: PUSH
67428: LD_INT 1
67430: PLUS
67431: ARRAY
67432: ST_TO_ADDR
67433: GO 67500
67435: LD_INT 3
67437: DOUBLE
67438: EQUAL
67439: IFTRUE 67443
67441: GO 67499
67443: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67444: LD_ADDR_VAR 0 9
67448: PUSH
67449: LD_VAR 0 23
67453: PUSH
67454: LD_VAR 0 24
67458: PUSH
67459: LD_VAR 0 25
67463: PUSH
67464: LD_VAR 0 26
67468: PUSH
67469: LD_VAR 0 27
67473: PUSH
67474: LD_VAR 0 28
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: PUSH
67487: LD_VAR 0 4
67491: PUSH
67492: LD_INT 1
67494: PLUS
67495: ARRAY
67496: ST_TO_ADDR
67497: GO 67500
67499: POP
67500: GO 68055
67502: LD_INT 2
67504: DOUBLE
67505: EQUAL
67506: IFTRUE 67516
67508: LD_INT 3
67510: DOUBLE
67511: EQUAL
67512: IFTRUE 67516
67514: GO 67572
67516: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67517: LD_ADDR_VAR 0 9
67521: PUSH
67522: LD_VAR 0 29
67526: PUSH
67527: LD_VAR 0 30
67531: PUSH
67532: LD_VAR 0 31
67536: PUSH
67537: LD_VAR 0 32
67541: PUSH
67542: LD_VAR 0 33
67546: PUSH
67547: LD_VAR 0 34
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: PUSH
67560: LD_VAR 0 4
67564: PUSH
67565: LD_INT 1
67567: PLUS
67568: ARRAY
67569: ST_TO_ADDR
67570: GO 68055
67572: LD_INT 16
67574: DOUBLE
67575: EQUAL
67576: IFTRUE 67634
67578: LD_INT 17
67580: DOUBLE
67581: EQUAL
67582: IFTRUE 67634
67584: LD_INT 18
67586: DOUBLE
67587: EQUAL
67588: IFTRUE 67634
67590: LD_INT 19
67592: DOUBLE
67593: EQUAL
67594: IFTRUE 67634
67596: LD_INT 22
67598: DOUBLE
67599: EQUAL
67600: IFTRUE 67634
67602: LD_INT 20
67604: DOUBLE
67605: EQUAL
67606: IFTRUE 67634
67608: LD_INT 21
67610: DOUBLE
67611: EQUAL
67612: IFTRUE 67634
67614: LD_INT 23
67616: DOUBLE
67617: EQUAL
67618: IFTRUE 67634
67620: LD_INT 24
67622: DOUBLE
67623: EQUAL
67624: IFTRUE 67634
67626: LD_INT 25
67628: DOUBLE
67629: EQUAL
67630: IFTRUE 67634
67632: GO 67690
67634: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67635: LD_ADDR_VAR 0 9
67639: PUSH
67640: LD_VAR 0 35
67644: PUSH
67645: LD_VAR 0 36
67649: PUSH
67650: LD_VAR 0 37
67654: PUSH
67655: LD_VAR 0 38
67659: PUSH
67660: LD_VAR 0 39
67664: PUSH
67665: LD_VAR 0 40
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: PUSH
67678: LD_VAR 0 4
67682: PUSH
67683: LD_INT 1
67685: PLUS
67686: ARRAY
67687: ST_TO_ADDR
67688: GO 68055
67690: LD_INT 6
67692: DOUBLE
67693: EQUAL
67694: IFTRUE 67746
67696: LD_INT 7
67698: DOUBLE
67699: EQUAL
67700: IFTRUE 67746
67702: LD_INT 8
67704: DOUBLE
67705: EQUAL
67706: IFTRUE 67746
67708: LD_INT 13
67710: DOUBLE
67711: EQUAL
67712: IFTRUE 67746
67714: LD_INT 12
67716: DOUBLE
67717: EQUAL
67718: IFTRUE 67746
67720: LD_INT 15
67722: DOUBLE
67723: EQUAL
67724: IFTRUE 67746
67726: LD_INT 11
67728: DOUBLE
67729: EQUAL
67730: IFTRUE 67746
67732: LD_INT 14
67734: DOUBLE
67735: EQUAL
67736: IFTRUE 67746
67738: LD_INT 10
67740: DOUBLE
67741: EQUAL
67742: IFTRUE 67746
67744: GO 67802
67746: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67747: LD_ADDR_VAR 0 9
67751: PUSH
67752: LD_VAR 0 41
67756: PUSH
67757: LD_VAR 0 42
67761: PUSH
67762: LD_VAR 0 43
67766: PUSH
67767: LD_VAR 0 44
67771: PUSH
67772: LD_VAR 0 45
67776: PUSH
67777: LD_VAR 0 46
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: PUSH
67790: LD_VAR 0 4
67794: PUSH
67795: LD_INT 1
67797: PLUS
67798: ARRAY
67799: ST_TO_ADDR
67800: GO 68055
67802: LD_INT 36
67804: DOUBLE
67805: EQUAL
67806: IFTRUE 67810
67808: GO 67866
67810: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67811: LD_ADDR_VAR 0 9
67815: PUSH
67816: LD_VAR 0 47
67820: PUSH
67821: LD_VAR 0 48
67825: PUSH
67826: LD_VAR 0 49
67830: PUSH
67831: LD_VAR 0 50
67835: PUSH
67836: LD_VAR 0 51
67840: PUSH
67841: LD_VAR 0 52
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: PUSH
67854: LD_VAR 0 4
67858: PUSH
67859: LD_INT 1
67861: PLUS
67862: ARRAY
67863: ST_TO_ADDR
67864: GO 68055
67866: LD_INT 4
67868: DOUBLE
67869: EQUAL
67870: IFTRUE 67892
67872: LD_INT 5
67874: DOUBLE
67875: EQUAL
67876: IFTRUE 67892
67878: LD_INT 34
67880: DOUBLE
67881: EQUAL
67882: IFTRUE 67892
67884: LD_INT 37
67886: DOUBLE
67887: EQUAL
67888: IFTRUE 67892
67890: GO 67948
67892: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67893: LD_ADDR_VAR 0 9
67897: PUSH
67898: LD_VAR 0 53
67902: PUSH
67903: LD_VAR 0 54
67907: PUSH
67908: LD_VAR 0 55
67912: PUSH
67913: LD_VAR 0 56
67917: PUSH
67918: LD_VAR 0 57
67922: PUSH
67923: LD_VAR 0 58
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: PUSH
67936: LD_VAR 0 4
67940: PUSH
67941: LD_INT 1
67943: PLUS
67944: ARRAY
67945: ST_TO_ADDR
67946: GO 68055
67948: LD_INT 31
67950: DOUBLE
67951: EQUAL
67952: IFTRUE 67998
67954: LD_INT 32
67956: DOUBLE
67957: EQUAL
67958: IFTRUE 67998
67960: LD_INT 33
67962: DOUBLE
67963: EQUAL
67964: IFTRUE 67998
67966: LD_INT 27
67968: DOUBLE
67969: EQUAL
67970: IFTRUE 67998
67972: LD_INT 26
67974: DOUBLE
67975: EQUAL
67976: IFTRUE 67998
67978: LD_INT 28
67980: DOUBLE
67981: EQUAL
67982: IFTRUE 67998
67984: LD_INT 29
67986: DOUBLE
67987: EQUAL
67988: IFTRUE 67998
67990: LD_INT 30
67992: DOUBLE
67993: EQUAL
67994: IFTRUE 67998
67996: GO 68054
67998: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67999: LD_ADDR_VAR 0 9
68003: PUSH
68004: LD_VAR 0 59
68008: PUSH
68009: LD_VAR 0 60
68013: PUSH
68014: LD_VAR 0 61
68018: PUSH
68019: LD_VAR 0 62
68023: PUSH
68024: LD_VAR 0 63
68028: PUSH
68029: LD_VAR 0 64
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: PUSH
68042: LD_VAR 0 4
68046: PUSH
68047: LD_INT 1
68049: PLUS
68050: ARRAY
68051: ST_TO_ADDR
68052: GO 68055
68054: POP
// temp_list2 = [ ] ;
68055: LD_ADDR_VAR 0 10
68059: PUSH
68060: EMPTY
68061: ST_TO_ADDR
// for i in temp_list do
68062: LD_ADDR_VAR 0 8
68066: PUSH
68067: LD_VAR 0 9
68071: PUSH
68072: FOR_IN
68073: IFFALSE 68125
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68075: LD_ADDR_VAR 0 10
68079: PUSH
68080: LD_VAR 0 10
68084: PUSH
68085: LD_VAR 0 8
68089: PUSH
68090: LD_INT 1
68092: ARRAY
68093: PUSH
68094: LD_VAR 0 2
68098: PLUS
68099: PUSH
68100: LD_VAR 0 8
68104: PUSH
68105: LD_INT 2
68107: ARRAY
68108: PUSH
68109: LD_VAR 0 3
68113: PLUS
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: ADD
68122: ST_TO_ADDR
68123: GO 68072
68125: POP
68126: POP
// result = temp_list2 ;
68127: LD_ADDR_VAR 0 7
68131: PUSH
68132: LD_VAR 0 10
68136: ST_TO_ADDR
// end ;
68137: LD_VAR 0 7
68141: RET
// export function EnemyInRange ( unit , dist ) ; begin
68142: LD_INT 0
68144: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68145: LD_ADDR_VAR 0 3
68149: PUSH
68150: LD_VAR 0 1
68154: PPUSH
68155: CALL_OW 255
68159: PPUSH
68160: LD_VAR 0 1
68164: PPUSH
68165: CALL_OW 250
68169: PPUSH
68170: LD_VAR 0 1
68174: PPUSH
68175: CALL_OW 251
68179: PPUSH
68180: LD_VAR 0 2
68184: PPUSH
68185: CALL 41913 0 4
68189: PUSH
68190: LD_INT 4
68192: ARRAY
68193: ST_TO_ADDR
// end ;
68194: LD_VAR 0 3
68198: RET
// export function PlayerSeeMe ( unit ) ; begin
68199: LD_INT 0
68201: PPUSH
// result := See ( your_side , unit ) ;
68202: LD_ADDR_VAR 0 2
68206: PUSH
68207: LD_OWVAR 2
68211: PPUSH
68212: LD_VAR 0 1
68216: PPUSH
68217: CALL_OW 292
68221: ST_TO_ADDR
// end ;
68222: LD_VAR 0 2
68226: RET
// export function ReverseDir ( unit ) ; begin
68227: LD_INT 0
68229: PPUSH
// if not unit then
68230: LD_VAR 0 1
68234: NOT
68235: IFFALSE 68239
// exit ;
68237: GO 68262
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68239: LD_ADDR_VAR 0 2
68243: PUSH
68244: LD_VAR 0 1
68248: PPUSH
68249: CALL_OW 254
68253: PUSH
68254: LD_INT 3
68256: PLUS
68257: PUSH
68258: LD_INT 6
68260: MOD
68261: ST_TO_ADDR
// end ;
68262: LD_VAR 0 2
68266: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68267: LD_INT 0
68269: PPUSH
68270: PPUSH
68271: PPUSH
68272: PPUSH
68273: PPUSH
// if not hexes then
68274: LD_VAR 0 2
68278: NOT
68279: IFFALSE 68283
// exit ;
68281: GO 68431
// dist := 9999 ;
68283: LD_ADDR_VAR 0 5
68287: PUSH
68288: LD_INT 9999
68290: ST_TO_ADDR
// for i = 1 to hexes do
68291: LD_ADDR_VAR 0 4
68295: PUSH
68296: DOUBLE
68297: LD_INT 1
68299: DEC
68300: ST_TO_ADDR
68301: LD_VAR 0 2
68305: PUSH
68306: FOR_TO
68307: IFFALSE 68419
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68309: LD_VAR 0 1
68313: PPUSH
68314: LD_VAR 0 2
68318: PUSH
68319: LD_VAR 0 4
68323: ARRAY
68324: PUSH
68325: LD_INT 1
68327: ARRAY
68328: PPUSH
68329: LD_VAR 0 2
68333: PUSH
68334: LD_VAR 0 4
68338: ARRAY
68339: PUSH
68340: LD_INT 2
68342: ARRAY
68343: PPUSH
68344: CALL_OW 297
68348: PUSH
68349: LD_VAR 0 5
68353: LESS
68354: IFFALSE 68417
// begin hex := hexes [ i ] ;
68356: LD_ADDR_VAR 0 7
68360: PUSH
68361: LD_VAR 0 2
68365: PUSH
68366: LD_VAR 0 4
68370: ARRAY
68371: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68372: LD_ADDR_VAR 0 5
68376: PUSH
68377: LD_VAR 0 1
68381: PPUSH
68382: LD_VAR 0 2
68386: PUSH
68387: LD_VAR 0 4
68391: ARRAY
68392: PUSH
68393: LD_INT 1
68395: ARRAY
68396: PPUSH
68397: LD_VAR 0 2
68401: PUSH
68402: LD_VAR 0 4
68406: ARRAY
68407: PUSH
68408: LD_INT 2
68410: ARRAY
68411: PPUSH
68412: CALL_OW 297
68416: ST_TO_ADDR
// end ; end ;
68417: GO 68306
68419: POP
68420: POP
// result := hex ;
68421: LD_ADDR_VAR 0 3
68425: PUSH
68426: LD_VAR 0 7
68430: ST_TO_ADDR
// end ;
68431: LD_VAR 0 3
68435: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68436: LD_INT 0
68438: PPUSH
68439: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68440: LD_VAR 0 1
68444: NOT
68445: PUSH
68446: LD_VAR 0 1
68450: PUSH
68451: LD_INT 21
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 23
68463: PUSH
68464: LD_INT 2
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PPUSH
68475: CALL_OW 69
68479: IN
68480: NOT
68481: OR
68482: IFFALSE 68486
// exit ;
68484: GO 68533
// for i = 1 to 3 do
68486: LD_ADDR_VAR 0 3
68490: PUSH
68491: DOUBLE
68492: LD_INT 1
68494: DEC
68495: ST_TO_ADDR
68496: LD_INT 3
68498: PUSH
68499: FOR_TO
68500: IFFALSE 68531
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68502: LD_VAR 0 1
68506: PPUSH
68507: CALL_OW 250
68511: PPUSH
68512: LD_VAR 0 1
68516: PPUSH
68517: CALL_OW 251
68521: PPUSH
68522: LD_INT 1
68524: PPUSH
68525: CALL_OW 453
68529: GO 68499
68531: POP
68532: POP
// end ;
68533: LD_VAR 0 2
68537: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68538: LD_INT 0
68540: PPUSH
68541: PPUSH
68542: PPUSH
68543: PPUSH
68544: PPUSH
68545: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68546: LD_VAR 0 1
68550: NOT
68551: PUSH
68552: LD_VAR 0 2
68556: NOT
68557: OR
68558: PUSH
68559: LD_VAR 0 1
68563: PPUSH
68564: CALL_OW 314
68568: OR
68569: IFFALSE 68573
// exit ;
68571: GO 69014
// x := GetX ( enemy_unit ) ;
68573: LD_ADDR_VAR 0 7
68577: PUSH
68578: LD_VAR 0 2
68582: PPUSH
68583: CALL_OW 250
68587: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68588: LD_ADDR_VAR 0 8
68592: PUSH
68593: LD_VAR 0 2
68597: PPUSH
68598: CALL_OW 251
68602: ST_TO_ADDR
// if not x or not y then
68603: LD_VAR 0 7
68607: NOT
68608: PUSH
68609: LD_VAR 0 8
68613: NOT
68614: OR
68615: IFFALSE 68619
// exit ;
68617: GO 69014
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68619: LD_ADDR_VAR 0 6
68623: PUSH
68624: LD_VAR 0 7
68628: PPUSH
68629: LD_INT 0
68631: PPUSH
68632: LD_INT 4
68634: PPUSH
68635: CALL_OW 272
68639: PUSH
68640: LD_VAR 0 8
68644: PPUSH
68645: LD_INT 0
68647: PPUSH
68648: LD_INT 4
68650: PPUSH
68651: CALL_OW 273
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_VAR 0 7
68664: PPUSH
68665: LD_INT 1
68667: PPUSH
68668: LD_INT 4
68670: PPUSH
68671: CALL_OW 272
68675: PUSH
68676: LD_VAR 0 8
68680: PPUSH
68681: LD_INT 1
68683: PPUSH
68684: LD_INT 4
68686: PPUSH
68687: CALL_OW 273
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_VAR 0 7
68700: PPUSH
68701: LD_INT 2
68703: PPUSH
68704: LD_INT 4
68706: PPUSH
68707: CALL_OW 272
68711: PUSH
68712: LD_VAR 0 8
68716: PPUSH
68717: LD_INT 2
68719: PPUSH
68720: LD_INT 4
68722: PPUSH
68723: CALL_OW 273
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_VAR 0 7
68736: PPUSH
68737: LD_INT 3
68739: PPUSH
68740: LD_INT 4
68742: PPUSH
68743: CALL_OW 272
68747: PUSH
68748: LD_VAR 0 8
68752: PPUSH
68753: LD_INT 3
68755: PPUSH
68756: LD_INT 4
68758: PPUSH
68759: CALL_OW 273
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_VAR 0 7
68772: PPUSH
68773: LD_INT 4
68775: PPUSH
68776: LD_INT 4
68778: PPUSH
68779: CALL_OW 272
68783: PUSH
68784: LD_VAR 0 8
68788: PPUSH
68789: LD_INT 4
68791: PPUSH
68792: LD_INT 4
68794: PPUSH
68795: CALL_OW 273
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_VAR 0 7
68808: PPUSH
68809: LD_INT 5
68811: PPUSH
68812: LD_INT 4
68814: PPUSH
68815: CALL_OW 272
68819: PUSH
68820: LD_VAR 0 8
68824: PPUSH
68825: LD_INT 5
68827: PPUSH
68828: LD_INT 4
68830: PPUSH
68831: CALL_OW 273
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: ST_TO_ADDR
// for i = tmp downto 1 do
68848: LD_ADDR_VAR 0 4
68852: PUSH
68853: DOUBLE
68854: LD_VAR 0 6
68858: INC
68859: ST_TO_ADDR
68860: LD_INT 1
68862: PUSH
68863: FOR_DOWNTO
68864: IFFALSE 68965
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68866: LD_VAR 0 6
68870: PUSH
68871: LD_VAR 0 4
68875: ARRAY
68876: PUSH
68877: LD_INT 1
68879: ARRAY
68880: PPUSH
68881: LD_VAR 0 6
68885: PUSH
68886: LD_VAR 0 4
68890: ARRAY
68891: PUSH
68892: LD_INT 2
68894: ARRAY
68895: PPUSH
68896: CALL_OW 488
68900: NOT
68901: PUSH
68902: LD_VAR 0 6
68906: PUSH
68907: LD_VAR 0 4
68911: ARRAY
68912: PUSH
68913: LD_INT 1
68915: ARRAY
68916: PPUSH
68917: LD_VAR 0 6
68921: PUSH
68922: LD_VAR 0 4
68926: ARRAY
68927: PUSH
68928: LD_INT 2
68930: ARRAY
68931: PPUSH
68932: CALL_OW 428
68936: PUSH
68937: LD_INT 0
68939: NONEQUAL
68940: OR
68941: IFFALSE 68963
// tmp := Delete ( tmp , i ) ;
68943: LD_ADDR_VAR 0 6
68947: PUSH
68948: LD_VAR 0 6
68952: PPUSH
68953: LD_VAR 0 4
68957: PPUSH
68958: CALL_OW 3
68962: ST_TO_ADDR
68963: GO 68863
68965: POP
68966: POP
// j := GetClosestHex ( unit , tmp ) ;
68967: LD_ADDR_VAR 0 5
68971: PUSH
68972: LD_VAR 0 1
68976: PPUSH
68977: LD_VAR 0 6
68981: PPUSH
68982: CALL 68267 0 2
68986: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68987: LD_VAR 0 1
68991: PPUSH
68992: LD_VAR 0 5
68996: PUSH
68997: LD_INT 1
68999: ARRAY
69000: PPUSH
69001: LD_VAR 0 5
69005: PUSH
69006: LD_INT 2
69008: ARRAY
69009: PPUSH
69010: CALL_OW 111
// end ;
69014: LD_VAR 0 3
69018: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69019: LD_INT 0
69021: PPUSH
69022: PPUSH
69023: PPUSH
// uc_side = 0 ;
69024: LD_ADDR_OWVAR 20
69028: PUSH
69029: LD_INT 0
69031: ST_TO_ADDR
// uc_nation = 0 ;
69032: LD_ADDR_OWVAR 21
69036: PUSH
69037: LD_INT 0
69039: ST_TO_ADDR
// InitHc_All ( ) ;
69040: CALL_OW 584
// InitVc ;
69044: CALL_OW 20
// if mastodonts then
69048: LD_VAR 0 6
69052: IFFALSE 69119
// for i = 1 to mastodonts do
69054: LD_ADDR_VAR 0 11
69058: PUSH
69059: DOUBLE
69060: LD_INT 1
69062: DEC
69063: ST_TO_ADDR
69064: LD_VAR 0 6
69068: PUSH
69069: FOR_TO
69070: IFFALSE 69117
// begin vc_chassis := 31 ;
69072: LD_ADDR_OWVAR 37
69076: PUSH
69077: LD_INT 31
69079: ST_TO_ADDR
// vc_control := control_rider ;
69080: LD_ADDR_OWVAR 38
69084: PUSH
69085: LD_INT 4
69087: ST_TO_ADDR
// animal := CreateVehicle ;
69088: LD_ADDR_VAR 0 12
69092: PUSH
69093: CALL_OW 45
69097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69098: LD_VAR 0 12
69102: PPUSH
69103: LD_VAR 0 8
69107: PPUSH
69108: LD_INT 0
69110: PPUSH
69111: CALL 71307 0 3
// end ;
69115: GO 69069
69117: POP
69118: POP
// if horses then
69119: LD_VAR 0 5
69123: IFFALSE 69190
// for i = 1 to horses do
69125: LD_ADDR_VAR 0 11
69129: PUSH
69130: DOUBLE
69131: LD_INT 1
69133: DEC
69134: ST_TO_ADDR
69135: LD_VAR 0 5
69139: PUSH
69140: FOR_TO
69141: IFFALSE 69188
// begin hc_class := 21 ;
69143: LD_ADDR_OWVAR 28
69147: PUSH
69148: LD_INT 21
69150: ST_TO_ADDR
// hc_gallery :=  ;
69151: LD_ADDR_OWVAR 33
69155: PUSH
69156: LD_STRING 
69158: ST_TO_ADDR
// animal := CreateHuman ;
69159: LD_ADDR_VAR 0 12
69163: PUSH
69164: CALL_OW 44
69168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69169: LD_VAR 0 12
69173: PPUSH
69174: LD_VAR 0 8
69178: PPUSH
69179: LD_INT 0
69181: PPUSH
69182: CALL 71307 0 3
// end ;
69186: GO 69140
69188: POP
69189: POP
// if birds then
69190: LD_VAR 0 1
69194: IFFALSE 69261
// for i = 1 to birds do
69196: LD_ADDR_VAR 0 11
69200: PUSH
69201: DOUBLE
69202: LD_INT 1
69204: DEC
69205: ST_TO_ADDR
69206: LD_VAR 0 1
69210: PUSH
69211: FOR_TO
69212: IFFALSE 69259
// begin hc_class = 18 ;
69214: LD_ADDR_OWVAR 28
69218: PUSH
69219: LD_INT 18
69221: ST_TO_ADDR
// hc_gallery =  ;
69222: LD_ADDR_OWVAR 33
69226: PUSH
69227: LD_STRING 
69229: ST_TO_ADDR
// animal := CreateHuman ;
69230: LD_ADDR_VAR 0 12
69234: PUSH
69235: CALL_OW 44
69239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69240: LD_VAR 0 12
69244: PPUSH
69245: LD_VAR 0 8
69249: PPUSH
69250: LD_INT 0
69252: PPUSH
69253: CALL 71307 0 3
// end ;
69257: GO 69211
69259: POP
69260: POP
// if tigers then
69261: LD_VAR 0 2
69265: IFFALSE 69349
// for i = 1 to tigers do
69267: LD_ADDR_VAR 0 11
69271: PUSH
69272: DOUBLE
69273: LD_INT 1
69275: DEC
69276: ST_TO_ADDR
69277: LD_VAR 0 2
69281: PUSH
69282: FOR_TO
69283: IFFALSE 69347
// begin hc_class = class_tiger ;
69285: LD_ADDR_OWVAR 28
69289: PUSH
69290: LD_INT 14
69292: ST_TO_ADDR
// hc_gallery =  ;
69293: LD_ADDR_OWVAR 33
69297: PUSH
69298: LD_STRING 
69300: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69301: LD_ADDR_OWVAR 35
69305: PUSH
69306: LD_INT 7
69308: NEG
69309: PPUSH
69310: LD_INT 7
69312: PPUSH
69313: CALL_OW 12
69317: ST_TO_ADDR
// animal := CreateHuman ;
69318: LD_ADDR_VAR 0 12
69322: PUSH
69323: CALL_OW 44
69327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69328: LD_VAR 0 12
69332: PPUSH
69333: LD_VAR 0 8
69337: PPUSH
69338: LD_INT 0
69340: PPUSH
69341: CALL 71307 0 3
// end ;
69345: GO 69282
69347: POP
69348: POP
// if apemans then
69349: LD_VAR 0 3
69353: IFFALSE 69476
// for i = 1 to apemans do
69355: LD_ADDR_VAR 0 11
69359: PUSH
69360: DOUBLE
69361: LD_INT 1
69363: DEC
69364: ST_TO_ADDR
69365: LD_VAR 0 3
69369: PUSH
69370: FOR_TO
69371: IFFALSE 69474
// begin hc_class = class_apeman ;
69373: LD_ADDR_OWVAR 28
69377: PUSH
69378: LD_INT 12
69380: ST_TO_ADDR
// hc_gallery =  ;
69381: LD_ADDR_OWVAR 33
69385: PUSH
69386: LD_STRING 
69388: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69389: LD_ADDR_OWVAR 35
69393: PUSH
69394: LD_INT 5
69396: NEG
69397: PPUSH
69398: LD_INT 5
69400: PPUSH
69401: CALL_OW 12
69405: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69406: LD_ADDR_OWVAR 31
69410: PUSH
69411: LD_INT 1
69413: PPUSH
69414: LD_INT 3
69416: PPUSH
69417: CALL_OW 12
69421: PUSH
69422: LD_INT 1
69424: PPUSH
69425: LD_INT 3
69427: PPUSH
69428: CALL_OW 12
69432: PUSH
69433: LD_INT 0
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: ST_TO_ADDR
// animal := CreateHuman ;
69445: LD_ADDR_VAR 0 12
69449: PUSH
69450: CALL_OW 44
69454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69455: LD_VAR 0 12
69459: PPUSH
69460: LD_VAR 0 8
69464: PPUSH
69465: LD_INT 0
69467: PPUSH
69468: CALL 71307 0 3
// end ;
69472: GO 69370
69474: POP
69475: POP
// if enchidnas then
69476: LD_VAR 0 4
69480: IFFALSE 69547
// for i = 1 to enchidnas do
69482: LD_ADDR_VAR 0 11
69486: PUSH
69487: DOUBLE
69488: LD_INT 1
69490: DEC
69491: ST_TO_ADDR
69492: LD_VAR 0 4
69496: PUSH
69497: FOR_TO
69498: IFFALSE 69545
// begin hc_class = 13 ;
69500: LD_ADDR_OWVAR 28
69504: PUSH
69505: LD_INT 13
69507: ST_TO_ADDR
// hc_gallery =  ;
69508: LD_ADDR_OWVAR 33
69512: PUSH
69513: LD_STRING 
69515: ST_TO_ADDR
// animal := CreateHuman ;
69516: LD_ADDR_VAR 0 12
69520: PUSH
69521: CALL_OW 44
69525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69526: LD_VAR 0 12
69530: PPUSH
69531: LD_VAR 0 8
69535: PPUSH
69536: LD_INT 0
69538: PPUSH
69539: CALL 71307 0 3
// end ;
69543: GO 69497
69545: POP
69546: POP
// if fishes then
69547: LD_VAR 0 7
69551: IFFALSE 69618
// for i = 1 to fishes do
69553: LD_ADDR_VAR 0 11
69557: PUSH
69558: DOUBLE
69559: LD_INT 1
69561: DEC
69562: ST_TO_ADDR
69563: LD_VAR 0 7
69567: PUSH
69568: FOR_TO
69569: IFFALSE 69616
// begin hc_class = 20 ;
69571: LD_ADDR_OWVAR 28
69575: PUSH
69576: LD_INT 20
69578: ST_TO_ADDR
// hc_gallery =  ;
69579: LD_ADDR_OWVAR 33
69583: PUSH
69584: LD_STRING 
69586: ST_TO_ADDR
// animal := CreateHuman ;
69587: LD_ADDR_VAR 0 12
69591: PUSH
69592: CALL_OW 44
69596: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69597: LD_VAR 0 12
69601: PPUSH
69602: LD_VAR 0 9
69606: PPUSH
69607: LD_INT 0
69609: PPUSH
69610: CALL 71307 0 3
// end ;
69614: GO 69568
69616: POP
69617: POP
// end ;
69618: LD_VAR 0 10
69622: RET
// export function WantHeal ( sci , unit ) ; begin
69623: LD_INT 0
69625: PPUSH
// if GetTaskList ( sci ) > 0 then
69626: LD_VAR 0 1
69630: PPUSH
69631: CALL_OW 437
69635: PUSH
69636: LD_INT 0
69638: GREATER
69639: IFFALSE 69709
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69641: LD_VAR 0 1
69645: PPUSH
69646: CALL_OW 437
69650: PUSH
69651: LD_INT 1
69653: ARRAY
69654: PUSH
69655: LD_INT 1
69657: ARRAY
69658: PUSH
69659: LD_STRING l
69661: EQUAL
69662: PUSH
69663: LD_VAR 0 1
69667: PPUSH
69668: CALL_OW 437
69672: PUSH
69673: LD_INT 1
69675: ARRAY
69676: PUSH
69677: LD_INT 4
69679: ARRAY
69680: PUSH
69681: LD_VAR 0 2
69685: EQUAL
69686: AND
69687: IFFALSE 69699
// result := true else
69689: LD_ADDR_VAR 0 3
69693: PUSH
69694: LD_INT 1
69696: ST_TO_ADDR
69697: GO 69707
// result := false ;
69699: LD_ADDR_VAR 0 3
69703: PUSH
69704: LD_INT 0
69706: ST_TO_ADDR
// end else
69707: GO 69717
// result := false ;
69709: LD_ADDR_VAR 0 3
69713: PUSH
69714: LD_INT 0
69716: ST_TO_ADDR
// end ;
69717: LD_VAR 0 3
69721: RET
// export function HealTarget ( sci ) ; begin
69722: LD_INT 0
69724: PPUSH
// if not sci then
69725: LD_VAR 0 1
69729: NOT
69730: IFFALSE 69734
// exit ;
69732: GO 69799
// result := 0 ;
69734: LD_ADDR_VAR 0 2
69738: PUSH
69739: LD_INT 0
69741: ST_TO_ADDR
// if GetTaskList ( sci ) then
69742: LD_VAR 0 1
69746: PPUSH
69747: CALL_OW 437
69751: IFFALSE 69799
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69753: LD_VAR 0 1
69757: PPUSH
69758: CALL_OW 437
69762: PUSH
69763: LD_INT 1
69765: ARRAY
69766: PUSH
69767: LD_INT 1
69769: ARRAY
69770: PUSH
69771: LD_STRING l
69773: EQUAL
69774: IFFALSE 69799
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69776: LD_ADDR_VAR 0 2
69780: PUSH
69781: LD_VAR 0 1
69785: PPUSH
69786: CALL_OW 437
69790: PUSH
69791: LD_INT 1
69793: ARRAY
69794: PUSH
69795: LD_INT 4
69797: ARRAY
69798: ST_TO_ADDR
// end ;
69799: LD_VAR 0 2
69803: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69804: LD_INT 0
69806: PPUSH
69807: PPUSH
69808: PPUSH
69809: PPUSH
// if not base_units then
69810: LD_VAR 0 1
69814: NOT
69815: IFFALSE 69819
// exit ;
69817: GO 69906
// result := false ;
69819: LD_ADDR_VAR 0 2
69823: PUSH
69824: LD_INT 0
69826: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69827: LD_ADDR_VAR 0 5
69831: PUSH
69832: LD_VAR 0 1
69836: PPUSH
69837: LD_INT 21
69839: PUSH
69840: LD_INT 3
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PPUSH
69847: CALL_OW 72
69851: ST_TO_ADDR
// if not tmp then
69852: LD_VAR 0 5
69856: NOT
69857: IFFALSE 69861
// exit ;
69859: GO 69906
// for i in tmp do
69861: LD_ADDR_VAR 0 3
69865: PUSH
69866: LD_VAR 0 5
69870: PUSH
69871: FOR_IN
69872: IFFALSE 69904
// begin result := EnemyInRange ( i , 22 ) ;
69874: LD_ADDR_VAR 0 2
69878: PUSH
69879: LD_VAR 0 3
69883: PPUSH
69884: LD_INT 22
69886: PPUSH
69887: CALL 68142 0 2
69891: ST_TO_ADDR
// if result then
69892: LD_VAR 0 2
69896: IFFALSE 69902
// exit ;
69898: POP
69899: POP
69900: GO 69906
// end ;
69902: GO 69871
69904: POP
69905: POP
// end ;
69906: LD_VAR 0 2
69910: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69911: LD_INT 0
69913: PPUSH
69914: PPUSH
// if not units then
69915: LD_VAR 0 1
69919: NOT
69920: IFFALSE 69924
// exit ;
69922: GO 69994
// result := [ ] ;
69924: LD_ADDR_VAR 0 3
69928: PUSH
69929: EMPTY
69930: ST_TO_ADDR
// for i in units do
69931: LD_ADDR_VAR 0 4
69935: PUSH
69936: LD_VAR 0 1
69940: PUSH
69941: FOR_IN
69942: IFFALSE 69992
// if GetTag ( i ) = tag then
69944: LD_VAR 0 4
69948: PPUSH
69949: CALL_OW 110
69953: PUSH
69954: LD_VAR 0 2
69958: EQUAL
69959: IFFALSE 69990
// result := Insert ( result , result + 1 , i ) ;
69961: LD_ADDR_VAR 0 3
69965: PUSH
69966: LD_VAR 0 3
69970: PPUSH
69971: LD_VAR 0 3
69975: PUSH
69976: LD_INT 1
69978: PLUS
69979: PPUSH
69980: LD_VAR 0 4
69984: PPUSH
69985: CALL_OW 2
69989: ST_TO_ADDR
69990: GO 69941
69992: POP
69993: POP
// end ;
69994: LD_VAR 0 3
69998: RET
// export function IsDriver ( un ) ; begin
69999: LD_INT 0
70001: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70002: LD_ADDR_VAR 0 2
70006: PUSH
70007: LD_VAR 0 1
70011: PUSH
70012: LD_INT 55
70014: PUSH
70015: EMPTY
70016: LIST
70017: PPUSH
70018: CALL_OW 69
70022: IN
70023: ST_TO_ADDR
// end ;
70024: LD_VAR 0 2
70028: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70029: LD_INT 0
70031: PPUSH
70032: PPUSH
// list := [ ] ;
70033: LD_ADDR_VAR 0 5
70037: PUSH
70038: EMPTY
70039: ST_TO_ADDR
// case d of 0 :
70040: LD_VAR 0 3
70044: PUSH
70045: LD_INT 0
70047: DOUBLE
70048: EQUAL
70049: IFTRUE 70053
70051: GO 70186
70053: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70054: LD_ADDR_VAR 0 5
70058: PUSH
70059: LD_VAR 0 1
70063: PUSH
70064: LD_INT 4
70066: MINUS
70067: PUSH
70068: LD_VAR 0 2
70072: PUSH
70073: LD_INT 4
70075: MINUS
70076: PUSH
70077: LD_INT 2
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: LIST
70084: PUSH
70085: LD_VAR 0 1
70089: PUSH
70090: LD_INT 3
70092: MINUS
70093: PUSH
70094: LD_VAR 0 2
70098: PUSH
70099: LD_INT 1
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: LIST
70106: PUSH
70107: LD_VAR 0 1
70111: PUSH
70112: LD_INT 4
70114: PLUS
70115: PUSH
70116: LD_VAR 0 2
70120: PUSH
70121: LD_INT 4
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: LIST
70128: PUSH
70129: LD_VAR 0 1
70133: PUSH
70134: LD_INT 3
70136: PLUS
70137: PUSH
70138: LD_VAR 0 2
70142: PUSH
70143: LD_INT 3
70145: PLUS
70146: PUSH
70147: LD_INT 5
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: LIST
70154: PUSH
70155: LD_VAR 0 1
70159: PUSH
70160: LD_VAR 0 2
70164: PUSH
70165: LD_INT 4
70167: PLUS
70168: PUSH
70169: LD_INT 0
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: LIST
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: ST_TO_ADDR
// end ; 1 :
70184: GO 70884
70186: LD_INT 1
70188: DOUBLE
70189: EQUAL
70190: IFTRUE 70194
70192: GO 70327
70194: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70195: LD_ADDR_VAR 0 5
70199: PUSH
70200: LD_VAR 0 1
70204: PUSH
70205: LD_VAR 0 2
70209: PUSH
70210: LD_INT 4
70212: MINUS
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: LIST
70221: PUSH
70222: LD_VAR 0 1
70226: PUSH
70227: LD_INT 3
70229: MINUS
70230: PUSH
70231: LD_VAR 0 2
70235: PUSH
70236: LD_INT 3
70238: MINUS
70239: PUSH
70240: LD_INT 2
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: LIST
70247: PUSH
70248: LD_VAR 0 1
70252: PUSH
70253: LD_INT 4
70255: MINUS
70256: PUSH
70257: LD_VAR 0 2
70261: PUSH
70262: LD_INT 1
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: PUSH
70270: LD_VAR 0 1
70274: PUSH
70275: LD_VAR 0 2
70279: PUSH
70280: LD_INT 3
70282: PLUS
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: PUSH
70292: LD_VAR 0 1
70296: PUSH
70297: LD_INT 4
70299: PLUS
70300: PUSH
70301: LD_VAR 0 2
70305: PUSH
70306: LD_INT 4
70308: PLUS
70309: PUSH
70310: LD_INT 5
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: LIST
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: ST_TO_ADDR
// end ; 2 :
70325: GO 70884
70327: LD_INT 2
70329: DOUBLE
70330: EQUAL
70331: IFTRUE 70335
70333: GO 70464
70335: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70336: LD_ADDR_VAR 0 5
70340: PUSH
70341: LD_VAR 0 1
70345: PUSH
70346: LD_VAR 0 2
70350: PUSH
70351: LD_INT 3
70353: MINUS
70354: PUSH
70355: LD_INT 3
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: LIST
70362: PUSH
70363: LD_VAR 0 1
70367: PUSH
70368: LD_INT 4
70370: PLUS
70371: PUSH
70372: LD_VAR 0 2
70376: PUSH
70377: LD_INT 4
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: LIST
70384: PUSH
70385: LD_VAR 0 1
70389: PUSH
70390: LD_VAR 0 2
70394: PUSH
70395: LD_INT 4
70397: PLUS
70398: PUSH
70399: LD_INT 0
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: LIST
70406: PUSH
70407: LD_VAR 0 1
70411: PUSH
70412: LD_INT 3
70414: MINUS
70415: PUSH
70416: LD_VAR 0 2
70420: PUSH
70421: LD_INT 1
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: LIST
70428: PUSH
70429: LD_VAR 0 1
70433: PUSH
70434: LD_INT 4
70436: MINUS
70437: PUSH
70438: LD_VAR 0 2
70442: PUSH
70443: LD_INT 4
70445: MINUS
70446: PUSH
70447: LD_INT 2
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: LIST
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: ST_TO_ADDR
// end ; 3 :
70462: GO 70884
70464: LD_INT 3
70466: DOUBLE
70467: EQUAL
70468: IFTRUE 70472
70470: GO 70605
70472: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70473: LD_ADDR_VAR 0 5
70477: PUSH
70478: LD_VAR 0 1
70482: PUSH
70483: LD_INT 3
70485: PLUS
70486: PUSH
70487: LD_VAR 0 2
70491: PUSH
70492: LD_INT 4
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: LIST
70499: PUSH
70500: LD_VAR 0 1
70504: PUSH
70505: LD_INT 4
70507: PLUS
70508: PUSH
70509: LD_VAR 0 2
70513: PUSH
70514: LD_INT 4
70516: PLUS
70517: PUSH
70518: LD_INT 5
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: LIST
70525: PUSH
70526: LD_VAR 0 1
70530: PUSH
70531: LD_INT 4
70533: MINUS
70534: PUSH
70535: LD_VAR 0 2
70539: PUSH
70540: LD_INT 1
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: LIST
70547: PUSH
70548: LD_VAR 0 1
70552: PUSH
70553: LD_VAR 0 2
70557: PUSH
70558: LD_INT 4
70560: MINUS
70561: PUSH
70562: LD_INT 3
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: LIST
70569: PUSH
70570: LD_VAR 0 1
70574: PUSH
70575: LD_INT 3
70577: MINUS
70578: PUSH
70579: LD_VAR 0 2
70583: PUSH
70584: LD_INT 3
70586: MINUS
70587: PUSH
70588: LD_INT 2
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: LIST
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: ST_TO_ADDR
// end ; 4 :
70603: GO 70884
70605: LD_INT 4
70607: DOUBLE
70608: EQUAL
70609: IFTRUE 70613
70611: GO 70746
70613: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70614: LD_ADDR_VAR 0 5
70618: PUSH
70619: LD_VAR 0 1
70623: PUSH
70624: LD_VAR 0 2
70628: PUSH
70629: LD_INT 4
70631: PLUS
70632: PUSH
70633: LD_INT 0
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: LIST
70640: PUSH
70641: LD_VAR 0 1
70645: PUSH
70646: LD_INT 3
70648: PLUS
70649: PUSH
70650: LD_VAR 0 2
70654: PUSH
70655: LD_INT 3
70657: PLUS
70658: PUSH
70659: LD_INT 5
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: LIST
70666: PUSH
70667: LD_VAR 0 1
70671: PUSH
70672: LD_INT 4
70674: PLUS
70675: PUSH
70676: LD_VAR 0 2
70680: PUSH
70681: LD_INT 4
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: LIST
70688: PUSH
70689: LD_VAR 0 1
70693: PUSH
70694: LD_VAR 0 2
70698: PUSH
70699: LD_INT 3
70701: MINUS
70702: PUSH
70703: LD_INT 3
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: LIST
70710: PUSH
70711: LD_VAR 0 1
70715: PUSH
70716: LD_INT 4
70718: MINUS
70719: PUSH
70720: LD_VAR 0 2
70724: PUSH
70725: LD_INT 4
70727: MINUS
70728: PUSH
70729: LD_INT 2
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: LIST
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: ST_TO_ADDR
// end ; 5 :
70744: GO 70884
70746: LD_INT 5
70748: DOUBLE
70749: EQUAL
70750: IFTRUE 70754
70752: GO 70883
70754: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70755: LD_ADDR_VAR 0 5
70759: PUSH
70760: LD_VAR 0 1
70764: PUSH
70765: LD_INT 4
70767: MINUS
70768: PUSH
70769: LD_VAR 0 2
70773: PUSH
70774: LD_INT 1
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: LIST
70781: PUSH
70782: LD_VAR 0 1
70786: PUSH
70787: LD_VAR 0 2
70791: PUSH
70792: LD_INT 4
70794: MINUS
70795: PUSH
70796: LD_INT 3
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: LIST
70803: PUSH
70804: LD_VAR 0 1
70808: PUSH
70809: LD_INT 4
70811: PLUS
70812: PUSH
70813: LD_VAR 0 2
70817: PUSH
70818: LD_INT 4
70820: PLUS
70821: PUSH
70822: LD_INT 5
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: LIST
70829: PUSH
70830: LD_VAR 0 1
70834: PUSH
70835: LD_INT 3
70837: PLUS
70838: PUSH
70839: LD_VAR 0 2
70843: PUSH
70844: LD_INT 4
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: LIST
70851: PUSH
70852: LD_VAR 0 1
70856: PUSH
70857: LD_VAR 0 2
70861: PUSH
70862: LD_INT 3
70864: PLUS
70865: PUSH
70866: LD_INT 0
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: LIST
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: ST_TO_ADDR
// end ; end ;
70881: GO 70884
70883: POP
// result := list ;
70884: LD_ADDR_VAR 0 4
70888: PUSH
70889: LD_VAR 0 5
70893: ST_TO_ADDR
// end ;
70894: LD_VAR 0 4
70898: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70899: LD_INT 0
70901: PPUSH
70902: PPUSH
70903: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70904: LD_VAR 0 1
70908: NOT
70909: PUSH
70910: LD_VAR 0 2
70914: PUSH
70915: LD_INT 1
70917: PUSH
70918: LD_INT 2
70920: PUSH
70921: LD_INT 3
70923: PUSH
70924: LD_INT 4
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: IN
70933: NOT
70934: OR
70935: IFFALSE 70939
// exit ;
70937: GO 71031
// tmp := [ ] ;
70939: LD_ADDR_VAR 0 5
70943: PUSH
70944: EMPTY
70945: ST_TO_ADDR
// for i in units do
70946: LD_ADDR_VAR 0 4
70950: PUSH
70951: LD_VAR 0 1
70955: PUSH
70956: FOR_IN
70957: IFFALSE 71000
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70959: LD_ADDR_VAR 0 5
70963: PUSH
70964: LD_VAR 0 5
70968: PPUSH
70969: LD_VAR 0 5
70973: PUSH
70974: LD_INT 1
70976: PLUS
70977: PPUSH
70978: LD_VAR 0 4
70982: PPUSH
70983: LD_VAR 0 2
70987: PPUSH
70988: CALL_OW 259
70992: PPUSH
70993: CALL_OW 2
70997: ST_TO_ADDR
70998: GO 70956
71000: POP
71001: POP
// if not tmp then
71002: LD_VAR 0 5
71006: NOT
71007: IFFALSE 71011
// exit ;
71009: GO 71031
// result := SortListByListDesc ( units , tmp ) ;
71011: LD_ADDR_VAR 0 3
71015: PUSH
71016: LD_VAR 0 1
71020: PPUSH
71021: LD_VAR 0 5
71025: PPUSH
71026: CALL_OW 77
71030: ST_TO_ADDR
// end ;
71031: LD_VAR 0 3
71035: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71036: LD_INT 0
71038: PPUSH
71039: PPUSH
71040: PPUSH
// result := false ;
71041: LD_ADDR_VAR 0 3
71045: PUSH
71046: LD_INT 0
71048: ST_TO_ADDR
// x := GetX ( building ) ;
71049: LD_ADDR_VAR 0 4
71053: PUSH
71054: LD_VAR 0 2
71058: PPUSH
71059: CALL_OW 250
71063: ST_TO_ADDR
// y := GetY ( building ) ;
71064: LD_ADDR_VAR 0 5
71068: PUSH
71069: LD_VAR 0 2
71073: PPUSH
71074: CALL_OW 251
71078: ST_TO_ADDR
// if not building or not x or not y then
71079: LD_VAR 0 2
71083: NOT
71084: PUSH
71085: LD_VAR 0 4
71089: NOT
71090: OR
71091: PUSH
71092: LD_VAR 0 5
71096: NOT
71097: OR
71098: IFFALSE 71102
// exit ;
71100: GO 71194
// if GetTaskList ( unit ) then
71102: LD_VAR 0 1
71106: PPUSH
71107: CALL_OW 437
71111: IFFALSE 71194
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71113: LD_STRING e
71115: PUSH
71116: LD_VAR 0 1
71120: PPUSH
71121: CALL_OW 437
71125: PUSH
71126: LD_INT 1
71128: ARRAY
71129: PUSH
71130: LD_INT 1
71132: ARRAY
71133: EQUAL
71134: PUSH
71135: LD_VAR 0 4
71139: PUSH
71140: LD_VAR 0 1
71144: PPUSH
71145: CALL_OW 437
71149: PUSH
71150: LD_INT 1
71152: ARRAY
71153: PUSH
71154: LD_INT 2
71156: ARRAY
71157: EQUAL
71158: AND
71159: PUSH
71160: LD_VAR 0 5
71164: PUSH
71165: LD_VAR 0 1
71169: PPUSH
71170: CALL_OW 437
71174: PUSH
71175: LD_INT 1
71177: ARRAY
71178: PUSH
71179: LD_INT 3
71181: ARRAY
71182: EQUAL
71183: AND
71184: IFFALSE 71194
// result := true end ;
71186: LD_ADDR_VAR 0 3
71190: PUSH
71191: LD_INT 1
71193: ST_TO_ADDR
// end ;
71194: LD_VAR 0 3
71198: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71199: LD_INT 0
71201: PPUSH
// result := false ;
71202: LD_ADDR_VAR 0 4
71206: PUSH
71207: LD_INT 0
71209: ST_TO_ADDR
// if GetTaskList ( unit ) then
71210: LD_VAR 0 1
71214: PPUSH
71215: CALL_OW 437
71219: IFFALSE 71302
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71221: LD_STRING M
71223: PUSH
71224: LD_VAR 0 1
71228: PPUSH
71229: CALL_OW 437
71233: PUSH
71234: LD_INT 1
71236: ARRAY
71237: PUSH
71238: LD_INT 1
71240: ARRAY
71241: EQUAL
71242: PUSH
71243: LD_VAR 0 2
71247: PUSH
71248: LD_VAR 0 1
71252: PPUSH
71253: CALL_OW 437
71257: PUSH
71258: LD_INT 1
71260: ARRAY
71261: PUSH
71262: LD_INT 2
71264: ARRAY
71265: EQUAL
71266: AND
71267: PUSH
71268: LD_VAR 0 3
71272: PUSH
71273: LD_VAR 0 1
71277: PPUSH
71278: CALL_OW 437
71282: PUSH
71283: LD_INT 1
71285: ARRAY
71286: PUSH
71287: LD_INT 3
71289: ARRAY
71290: EQUAL
71291: AND
71292: IFFALSE 71302
// result := true ;
71294: LD_ADDR_VAR 0 4
71298: PUSH
71299: LD_INT 1
71301: ST_TO_ADDR
// end ; end ;
71302: LD_VAR 0 4
71306: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71307: LD_INT 0
71309: PPUSH
71310: PPUSH
71311: PPUSH
71312: PPUSH
// if not unit or not area then
71313: LD_VAR 0 1
71317: NOT
71318: PUSH
71319: LD_VAR 0 2
71323: NOT
71324: OR
71325: IFFALSE 71329
// exit ;
71327: GO 71493
// tmp := AreaToList ( area , i ) ;
71329: LD_ADDR_VAR 0 6
71333: PUSH
71334: LD_VAR 0 2
71338: PPUSH
71339: LD_VAR 0 5
71343: PPUSH
71344: CALL_OW 517
71348: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71349: LD_ADDR_VAR 0 5
71353: PUSH
71354: DOUBLE
71355: LD_INT 1
71357: DEC
71358: ST_TO_ADDR
71359: LD_VAR 0 6
71363: PUSH
71364: LD_INT 1
71366: ARRAY
71367: PUSH
71368: FOR_TO
71369: IFFALSE 71491
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71371: LD_ADDR_VAR 0 7
71375: PUSH
71376: LD_VAR 0 6
71380: PUSH
71381: LD_INT 1
71383: ARRAY
71384: PUSH
71385: LD_VAR 0 5
71389: ARRAY
71390: PUSH
71391: LD_VAR 0 6
71395: PUSH
71396: LD_INT 2
71398: ARRAY
71399: PUSH
71400: LD_VAR 0 5
71404: ARRAY
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71410: LD_VAR 0 7
71414: PUSH
71415: LD_INT 1
71417: ARRAY
71418: PPUSH
71419: LD_VAR 0 7
71423: PUSH
71424: LD_INT 2
71426: ARRAY
71427: PPUSH
71428: CALL_OW 428
71432: PUSH
71433: LD_INT 0
71435: EQUAL
71436: IFFALSE 71489
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71438: LD_VAR 0 1
71442: PPUSH
71443: LD_VAR 0 7
71447: PUSH
71448: LD_INT 1
71450: ARRAY
71451: PPUSH
71452: LD_VAR 0 7
71456: PUSH
71457: LD_INT 2
71459: ARRAY
71460: PPUSH
71461: LD_VAR 0 3
71465: PPUSH
71466: CALL_OW 48
// result := IsPlaced ( unit ) ;
71470: LD_ADDR_VAR 0 4
71474: PUSH
71475: LD_VAR 0 1
71479: PPUSH
71480: CALL_OW 305
71484: ST_TO_ADDR
// exit ;
71485: POP
71486: POP
71487: GO 71493
// end ; end ;
71489: GO 71368
71491: POP
71492: POP
// end ;
71493: LD_VAR 0 4
71497: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71498: LD_INT 0
71500: PPUSH
71501: PPUSH
71502: PPUSH
// if not side or side > 8 then
71503: LD_VAR 0 1
71507: NOT
71508: PUSH
71509: LD_VAR 0 1
71513: PUSH
71514: LD_INT 8
71516: GREATER
71517: OR
71518: IFFALSE 71522
// exit ;
71520: GO 71709
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71522: LD_ADDR_VAR 0 4
71526: PUSH
71527: LD_INT 22
71529: PUSH
71530: LD_VAR 0 1
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 21
71541: PUSH
71542: LD_INT 3
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PPUSH
71553: CALL_OW 69
71557: ST_TO_ADDR
// if not tmp then
71558: LD_VAR 0 4
71562: NOT
71563: IFFALSE 71567
// exit ;
71565: GO 71709
// enable_addtolog := true ;
71567: LD_ADDR_OWVAR 81
71571: PUSH
71572: LD_INT 1
71574: ST_TO_ADDR
// AddToLog ( [ ) ;
71575: LD_STRING [
71577: PPUSH
71578: CALL_OW 561
// for i in tmp do
71582: LD_ADDR_VAR 0 3
71586: PUSH
71587: LD_VAR 0 4
71591: PUSH
71592: FOR_IN
71593: IFFALSE 71700
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71595: LD_STRING [
71597: PUSH
71598: LD_VAR 0 3
71602: PPUSH
71603: CALL_OW 266
71607: STR
71608: PUSH
71609: LD_STRING , 
71611: STR
71612: PUSH
71613: LD_VAR 0 3
71617: PPUSH
71618: CALL_OW 250
71622: STR
71623: PUSH
71624: LD_STRING , 
71626: STR
71627: PUSH
71628: LD_VAR 0 3
71632: PPUSH
71633: CALL_OW 251
71637: STR
71638: PUSH
71639: LD_STRING , 
71641: STR
71642: PUSH
71643: LD_VAR 0 3
71647: PPUSH
71648: CALL_OW 254
71652: STR
71653: PUSH
71654: LD_STRING , 
71656: STR
71657: PUSH
71658: LD_VAR 0 3
71662: PPUSH
71663: LD_INT 1
71665: PPUSH
71666: CALL_OW 268
71670: STR
71671: PUSH
71672: LD_STRING , 
71674: STR
71675: PUSH
71676: LD_VAR 0 3
71680: PPUSH
71681: LD_INT 2
71683: PPUSH
71684: CALL_OW 268
71688: STR
71689: PUSH
71690: LD_STRING ],
71692: STR
71693: PPUSH
71694: CALL_OW 561
// end ;
71698: GO 71592
71700: POP
71701: POP
// AddToLog ( ]; ) ;
71702: LD_STRING ];
71704: PPUSH
71705: CALL_OW 561
// end ;
71709: LD_VAR 0 2
71713: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71714: LD_INT 0
71716: PPUSH
71717: PPUSH
71718: PPUSH
71719: PPUSH
71720: PPUSH
// if not area or not rate or not max then
71721: LD_VAR 0 1
71725: NOT
71726: PUSH
71727: LD_VAR 0 2
71731: NOT
71732: OR
71733: PUSH
71734: LD_VAR 0 4
71738: NOT
71739: OR
71740: IFFALSE 71744
// exit ;
71742: GO 71936
// while 1 do
71744: LD_INT 1
71746: IFFALSE 71936
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71748: LD_ADDR_VAR 0 9
71752: PUSH
71753: LD_VAR 0 1
71757: PPUSH
71758: LD_INT 1
71760: PPUSH
71761: CALL_OW 287
71765: PUSH
71766: LD_INT 10
71768: MUL
71769: ST_TO_ADDR
// r := rate / 10 ;
71770: LD_ADDR_VAR 0 7
71774: PUSH
71775: LD_VAR 0 2
71779: PUSH
71780: LD_INT 10
71782: DIVREAL
71783: ST_TO_ADDR
// time := 1 1$00 ;
71784: LD_ADDR_VAR 0 8
71788: PUSH
71789: LD_INT 2100
71791: ST_TO_ADDR
// if amount < min then
71792: LD_VAR 0 9
71796: PUSH
71797: LD_VAR 0 3
71801: LESS
71802: IFFALSE 71820
// r := r * 2 else
71804: LD_ADDR_VAR 0 7
71808: PUSH
71809: LD_VAR 0 7
71813: PUSH
71814: LD_INT 2
71816: MUL
71817: ST_TO_ADDR
71818: GO 71846
// if amount > max then
71820: LD_VAR 0 9
71824: PUSH
71825: LD_VAR 0 4
71829: GREATER
71830: IFFALSE 71846
// r := r / 2 ;
71832: LD_ADDR_VAR 0 7
71836: PUSH
71837: LD_VAR 0 7
71841: PUSH
71842: LD_INT 2
71844: DIVREAL
71845: ST_TO_ADDR
// time := time / r ;
71846: LD_ADDR_VAR 0 8
71850: PUSH
71851: LD_VAR 0 8
71855: PUSH
71856: LD_VAR 0 7
71860: DIVREAL
71861: ST_TO_ADDR
// if time < 0 then
71862: LD_VAR 0 8
71866: PUSH
71867: LD_INT 0
71869: LESS
71870: IFFALSE 71887
// time := time * - 1 ;
71872: LD_ADDR_VAR 0 8
71876: PUSH
71877: LD_VAR 0 8
71881: PUSH
71882: LD_INT 1
71884: NEG
71885: MUL
71886: ST_TO_ADDR
// wait ( time ) ;
71887: LD_VAR 0 8
71891: PPUSH
71892: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71896: LD_INT 35
71898: PPUSH
71899: LD_INT 875
71901: PPUSH
71902: CALL_OW 12
71906: PPUSH
71907: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71911: LD_INT 1
71913: PPUSH
71914: LD_INT 5
71916: PPUSH
71917: CALL_OW 12
71921: PPUSH
71922: LD_VAR 0 1
71926: PPUSH
71927: LD_INT 1
71929: PPUSH
71930: CALL_OW 55
// end ;
71934: GO 71744
// end ;
71936: LD_VAR 0 5
71940: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71941: LD_INT 0
71943: PPUSH
71944: PPUSH
71945: PPUSH
71946: PPUSH
71947: PPUSH
71948: PPUSH
71949: PPUSH
71950: PPUSH
// if not turrets or not factories then
71951: LD_VAR 0 1
71955: NOT
71956: PUSH
71957: LD_VAR 0 2
71961: NOT
71962: OR
71963: IFFALSE 71967
// exit ;
71965: GO 72274
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71967: LD_ADDR_VAR 0 10
71971: PUSH
71972: LD_INT 5
71974: PUSH
71975: LD_INT 6
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 2
71984: PUSH
71985: LD_INT 4
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 3
71994: PUSH
71995: LD_INT 5
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 24
72009: PUSH
72010: LD_INT 25
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 23
72019: PUSH
72020: LD_INT 27
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 42
72033: PUSH
72034: LD_INT 43
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 44
72043: PUSH
72044: LD_INT 46
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 45
72053: PUSH
72054: LD_INT 47
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: LIST
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: LIST
72070: ST_TO_ADDR
// result := [ ] ;
72071: LD_ADDR_VAR 0 3
72075: PUSH
72076: EMPTY
72077: ST_TO_ADDR
// for i in turrets do
72078: LD_ADDR_VAR 0 4
72082: PUSH
72083: LD_VAR 0 1
72087: PUSH
72088: FOR_IN
72089: IFFALSE 72272
// begin nat := GetNation ( i ) ;
72091: LD_ADDR_VAR 0 7
72095: PUSH
72096: LD_VAR 0 4
72100: PPUSH
72101: CALL_OW 248
72105: ST_TO_ADDR
// weapon := 0 ;
72106: LD_ADDR_VAR 0 8
72110: PUSH
72111: LD_INT 0
72113: ST_TO_ADDR
// if not nat then
72114: LD_VAR 0 7
72118: NOT
72119: IFFALSE 72123
// continue ;
72121: GO 72088
// for j in list [ nat ] do
72123: LD_ADDR_VAR 0 5
72127: PUSH
72128: LD_VAR 0 10
72132: PUSH
72133: LD_VAR 0 7
72137: ARRAY
72138: PUSH
72139: FOR_IN
72140: IFFALSE 72181
// if GetBWeapon ( i ) = j [ 1 ] then
72142: LD_VAR 0 4
72146: PPUSH
72147: CALL_OW 269
72151: PUSH
72152: LD_VAR 0 5
72156: PUSH
72157: LD_INT 1
72159: ARRAY
72160: EQUAL
72161: IFFALSE 72179
// begin weapon := j [ 2 ] ;
72163: LD_ADDR_VAR 0 8
72167: PUSH
72168: LD_VAR 0 5
72172: PUSH
72173: LD_INT 2
72175: ARRAY
72176: ST_TO_ADDR
// break ;
72177: GO 72181
// end ;
72179: GO 72139
72181: POP
72182: POP
// if not weapon then
72183: LD_VAR 0 8
72187: NOT
72188: IFFALSE 72192
// continue ;
72190: GO 72088
// for k in factories do
72192: LD_ADDR_VAR 0 6
72196: PUSH
72197: LD_VAR 0 2
72201: PUSH
72202: FOR_IN
72203: IFFALSE 72268
// begin weapons := AvailableWeaponList ( k ) ;
72205: LD_ADDR_VAR 0 9
72209: PUSH
72210: LD_VAR 0 6
72214: PPUSH
72215: CALL_OW 478
72219: ST_TO_ADDR
// if not weapons then
72220: LD_VAR 0 9
72224: NOT
72225: IFFALSE 72229
// continue ;
72227: GO 72202
// if weapon in weapons then
72229: LD_VAR 0 8
72233: PUSH
72234: LD_VAR 0 9
72238: IN
72239: IFFALSE 72266
// begin result := [ i , weapon ] ;
72241: LD_ADDR_VAR 0 3
72245: PUSH
72246: LD_VAR 0 4
72250: PUSH
72251: LD_VAR 0 8
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: ST_TO_ADDR
// exit ;
72260: POP
72261: POP
72262: POP
72263: POP
72264: GO 72274
// end ; end ;
72266: GO 72202
72268: POP
72269: POP
// end ;
72270: GO 72088
72272: POP
72273: POP
// end ;
72274: LD_VAR 0 3
72278: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72279: LD_INT 0
72281: PPUSH
// if not side or side > 8 then
72282: LD_VAR 0 3
72286: NOT
72287: PUSH
72288: LD_VAR 0 3
72292: PUSH
72293: LD_INT 8
72295: GREATER
72296: OR
72297: IFFALSE 72301
// exit ;
72299: GO 72360
// if not range then
72301: LD_VAR 0 4
72305: NOT
72306: IFFALSE 72317
// range := - 12 ;
72308: LD_ADDR_VAR 0 4
72312: PUSH
72313: LD_INT 12
72315: NEG
72316: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72317: LD_VAR 0 1
72321: PPUSH
72322: LD_VAR 0 2
72326: PPUSH
72327: LD_VAR 0 3
72331: PPUSH
72332: LD_VAR 0 4
72336: PPUSH
72337: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72341: LD_VAR 0 1
72345: PPUSH
72346: LD_VAR 0 2
72350: PPUSH
72351: LD_VAR 0 3
72355: PPUSH
72356: CALL_OW 331
// end ;
72360: LD_VAR 0 5
72364: RET
// export function Video ( mode ) ; begin
72365: LD_INT 0
72367: PPUSH
// ingame_video = mode ;
72368: LD_ADDR_OWVAR 52
72372: PUSH
72373: LD_VAR 0 1
72377: ST_TO_ADDR
// interface_hidden = mode ;
72378: LD_ADDR_OWVAR 54
72382: PUSH
72383: LD_VAR 0 1
72387: ST_TO_ADDR
// end ;
72388: LD_VAR 0 2
72392: RET
// export function Join ( array , element ) ; begin
72393: LD_INT 0
72395: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72396: LD_ADDR_VAR 0 3
72400: PUSH
72401: LD_VAR 0 1
72405: PPUSH
72406: LD_VAR 0 1
72410: PUSH
72411: LD_INT 1
72413: PLUS
72414: PPUSH
72415: LD_VAR 0 2
72419: PPUSH
72420: CALL_OW 1
72424: ST_TO_ADDR
// end ;
72425: LD_VAR 0 3
72429: RET
// export function JoinUnion ( array , element ) ; begin
72430: LD_INT 0
72432: PPUSH
// result := array union element ;
72433: LD_ADDR_VAR 0 3
72437: PUSH
72438: LD_VAR 0 1
72442: PUSH
72443: LD_VAR 0 2
72447: UNION
72448: ST_TO_ADDR
// end ;
72449: LD_VAR 0 3
72453: RET
// export function GetBehemoths ( side ) ; begin
72454: LD_INT 0
72456: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72457: LD_ADDR_VAR 0 2
72461: PUSH
72462: LD_INT 22
72464: PUSH
72465: LD_VAR 0 1
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 31
72476: PUSH
72477: LD_INT 25
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PPUSH
72488: CALL_OW 69
72492: ST_TO_ADDR
// end ;
72493: LD_VAR 0 2
72497: RET
// export function Shuffle ( array ) ; var i , index ; begin
72498: LD_INT 0
72500: PPUSH
72501: PPUSH
72502: PPUSH
// result := [ ] ;
72503: LD_ADDR_VAR 0 2
72507: PUSH
72508: EMPTY
72509: ST_TO_ADDR
// if not array then
72510: LD_VAR 0 1
72514: NOT
72515: IFFALSE 72519
// exit ;
72517: GO 72618
// Randomize ;
72519: CALL_OW 10
// for i = array downto 1 do
72523: LD_ADDR_VAR 0 3
72527: PUSH
72528: DOUBLE
72529: LD_VAR 0 1
72533: INC
72534: ST_TO_ADDR
72535: LD_INT 1
72537: PUSH
72538: FOR_DOWNTO
72539: IFFALSE 72616
// begin index := rand ( 1 , array ) ;
72541: LD_ADDR_VAR 0 4
72545: PUSH
72546: LD_INT 1
72548: PPUSH
72549: LD_VAR 0 1
72553: PPUSH
72554: CALL_OW 12
72558: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72559: LD_ADDR_VAR 0 2
72563: PUSH
72564: LD_VAR 0 2
72568: PPUSH
72569: LD_VAR 0 2
72573: PUSH
72574: LD_INT 1
72576: PLUS
72577: PPUSH
72578: LD_VAR 0 1
72582: PUSH
72583: LD_VAR 0 4
72587: ARRAY
72588: PPUSH
72589: CALL_OW 2
72593: ST_TO_ADDR
// array := Delete ( array , index ) ;
72594: LD_ADDR_VAR 0 1
72598: PUSH
72599: LD_VAR 0 1
72603: PPUSH
72604: LD_VAR 0 4
72608: PPUSH
72609: CALL_OW 3
72613: ST_TO_ADDR
// end ;
72614: GO 72538
72616: POP
72617: POP
// end ;
72618: LD_VAR 0 2
72622: RET
// export function GetBaseMaterials ( base ) ; begin
72623: LD_INT 0
72625: PPUSH
// result := [ 0 , 0 , 0 ] ;
72626: LD_ADDR_VAR 0 2
72630: PUSH
72631: LD_INT 0
72633: PUSH
72634: LD_INT 0
72636: PUSH
72637: LD_INT 0
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: LIST
72644: ST_TO_ADDR
// if not base then
72645: LD_VAR 0 1
72649: NOT
72650: IFFALSE 72654
// exit ;
72652: GO 72703
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72654: LD_ADDR_VAR 0 2
72658: PUSH
72659: LD_VAR 0 1
72663: PPUSH
72664: LD_INT 1
72666: PPUSH
72667: CALL_OW 275
72671: PUSH
72672: LD_VAR 0 1
72676: PPUSH
72677: LD_INT 2
72679: PPUSH
72680: CALL_OW 275
72684: PUSH
72685: LD_VAR 0 1
72689: PPUSH
72690: LD_INT 3
72692: PPUSH
72693: CALL_OW 275
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: LIST
72702: ST_TO_ADDR
// end ;
72703: LD_VAR 0 2
72707: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72708: LD_INT 0
72710: PPUSH
72711: PPUSH
// result := array ;
72712: LD_ADDR_VAR 0 3
72716: PUSH
72717: LD_VAR 0 1
72721: ST_TO_ADDR
// if size > 0 then
72722: LD_VAR 0 2
72726: PUSH
72727: LD_INT 0
72729: GREATER
72730: IFFALSE 72776
// for i := array downto size do
72732: LD_ADDR_VAR 0 4
72736: PUSH
72737: DOUBLE
72738: LD_VAR 0 1
72742: INC
72743: ST_TO_ADDR
72744: LD_VAR 0 2
72748: PUSH
72749: FOR_DOWNTO
72750: IFFALSE 72774
// result := Delete ( result , result ) ;
72752: LD_ADDR_VAR 0 3
72756: PUSH
72757: LD_VAR 0 3
72761: PPUSH
72762: LD_VAR 0 3
72766: PPUSH
72767: CALL_OW 3
72771: ST_TO_ADDR
72772: GO 72749
72774: POP
72775: POP
// end ;
72776: LD_VAR 0 3
72780: RET
// export function ComExit ( unit ) ; var tmp ; begin
72781: LD_INT 0
72783: PPUSH
72784: PPUSH
// if not IsInUnit ( unit ) then
72785: LD_VAR 0 1
72789: PPUSH
72790: CALL_OW 310
72794: NOT
72795: IFFALSE 72799
// exit ;
72797: GO 72859
// tmp := IsInUnit ( unit ) ;
72799: LD_ADDR_VAR 0 3
72803: PUSH
72804: LD_VAR 0 1
72808: PPUSH
72809: CALL_OW 310
72813: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72814: LD_VAR 0 3
72818: PPUSH
72819: CALL_OW 247
72823: PUSH
72824: LD_INT 2
72826: EQUAL
72827: IFFALSE 72840
// ComExitVehicle ( unit ) else
72829: LD_VAR 0 1
72833: PPUSH
72834: CALL_OW 121
72838: GO 72849
// ComExitBuilding ( unit ) ;
72840: LD_VAR 0 1
72844: PPUSH
72845: CALL_OW 122
// result := tmp ;
72849: LD_ADDR_VAR 0 2
72853: PUSH
72854: LD_VAR 0 3
72858: ST_TO_ADDR
// end ;
72859: LD_VAR 0 2
72863: RET
// export function ComExitAll ( units ) ; var i ; begin
72864: LD_INT 0
72866: PPUSH
72867: PPUSH
// if not units then
72868: LD_VAR 0 1
72872: NOT
72873: IFFALSE 72877
// exit ;
72875: GO 72903
// for i in units do
72877: LD_ADDR_VAR 0 3
72881: PUSH
72882: LD_VAR 0 1
72886: PUSH
72887: FOR_IN
72888: IFFALSE 72901
// ComExit ( i ) ;
72890: LD_VAR 0 3
72894: PPUSH
72895: CALL 72781 0 1
72899: GO 72887
72901: POP
72902: POP
// end ;
72903: LD_VAR 0 2
72907: RET
// export function ResetHc ; begin
72908: LD_INT 0
72910: PPUSH
// InitHc ;
72911: CALL_OW 19
// hc_importance := 0 ;
72915: LD_ADDR_OWVAR 32
72919: PUSH
72920: LD_INT 0
72922: ST_TO_ADDR
// end ;
72923: LD_VAR 0 1
72927: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72928: LD_INT 0
72930: PPUSH
72931: PPUSH
72932: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72933: LD_ADDR_VAR 0 6
72937: PUSH
72938: LD_VAR 0 1
72942: PUSH
72943: LD_VAR 0 3
72947: PLUS
72948: PUSH
72949: LD_INT 2
72951: DIV
72952: ST_TO_ADDR
// if _x < 0 then
72953: LD_VAR 0 6
72957: PUSH
72958: LD_INT 0
72960: LESS
72961: IFFALSE 72978
// _x := _x * - 1 ;
72963: LD_ADDR_VAR 0 6
72967: PUSH
72968: LD_VAR 0 6
72972: PUSH
72973: LD_INT 1
72975: NEG
72976: MUL
72977: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72978: LD_ADDR_VAR 0 7
72982: PUSH
72983: LD_VAR 0 2
72987: PUSH
72988: LD_VAR 0 4
72992: PLUS
72993: PUSH
72994: LD_INT 2
72996: DIV
72997: ST_TO_ADDR
// if _y < 0 then
72998: LD_VAR 0 7
73002: PUSH
73003: LD_INT 0
73005: LESS
73006: IFFALSE 73023
// _y := _y * - 1 ;
73008: LD_ADDR_VAR 0 7
73012: PUSH
73013: LD_VAR 0 7
73017: PUSH
73018: LD_INT 1
73020: NEG
73021: MUL
73022: ST_TO_ADDR
// result := [ _x , _y ] ;
73023: LD_ADDR_VAR 0 5
73027: PUSH
73028: LD_VAR 0 6
73032: PUSH
73033: LD_VAR 0 7
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: ST_TO_ADDR
// end ;
73042: LD_VAR 0 5
73046: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73047: LD_INT 0
73049: PPUSH
73050: PPUSH
73051: PPUSH
73052: PPUSH
// task := GetTaskList ( unit ) ;
73053: LD_ADDR_VAR 0 7
73057: PUSH
73058: LD_VAR 0 1
73062: PPUSH
73063: CALL_OW 437
73067: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73068: LD_VAR 0 7
73072: NOT
73073: PUSH
73074: LD_VAR 0 1
73078: PPUSH
73079: LD_VAR 0 2
73083: PPUSH
73084: CALL_OW 308
73088: NOT
73089: AND
73090: IFFALSE 73094
// exit ;
73092: GO 73212
// if IsInArea ( unit , area ) then
73094: LD_VAR 0 1
73098: PPUSH
73099: LD_VAR 0 2
73103: PPUSH
73104: CALL_OW 308
73108: IFFALSE 73126
// begin ComMoveToArea ( unit , goAway ) ;
73110: LD_VAR 0 1
73114: PPUSH
73115: LD_VAR 0 3
73119: PPUSH
73120: CALL_OW 113
// exit ;
73124: GO 73212
// end ; if task [ 1 ] [ 1 ] <> M then
73126: LD_VAR 0 7
73130: PUSH
73131: LD_INT 1
73133: ARRAY
73134: PUSH
73135: LD_INT 1
73137: ARRAY
73138: PUSH
73139: LD_STRING M
73141: NONEQUAL
73142: IFFALSE 73146
// exit ;
73144: GO 73212
// x := task [ 1 ] [ 2 ] ;
73146: LD_ADDR_VAR 0 5
73150: PUSH
73151: LD_VAR 0 7
73155: PUSH
73156: LD_INT 1
73158: ARRAY
73159: PUSH
73160: LD_INT 2
73162: ARRAY
73163: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73164: LD_ADDR_VAR 0 6
73168: PUSH
73169: LD_VAR 0 7
73173: PUSH
73174: LD_INT 1
73176: ARRAY
73177: PUSH
73178: LD_INT 3
73180: ARRAY
73181: ST_TO_ADDR
// if InArea ( x , y , area ) then
73182: LD_VAR 0 5
73186: PPUSH
73187: LD_VAR 0 6
73191: PPUSH
73192: LD_VAR 0 2
73196: PPUSH
73197: CALL_OW 309
73201: IFFALSE 73212
// ComStop ( unit ) ;
73203: LD_VAR 0 1
73207: PPUSH
73208: CALL_OW 141
// end ;
73212: LD_VAR 0 4
73216: RET
// export function Abs ( value ) ; begin
73217: LD_INT 0
73219: PPUSH
// result := value ;
73220: LD_ADDR_VAR 0 2
73224: PUSH
73225: LD_VAR 0 1
73229: ST_TO_ADDR
// if value < 0 then
73230: LD_VAR 0 1
73234: PUSH
73235: LD_INT 0
73237: LESS
73238: IFFALSE 73255
// result := value * - 1 ;
73240: LD_ADDR_VAR 0 2
73244: PUSH
73245: LD_VAR 0 1
73249: PUSH
73250: LD_INT 1
73252: NEG
73253: MUL
73254: ST_TO_ADDR
// end ;
73255: LD_VAR 0 2
73259: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73260: LD_INT 0
73262: PPUSH
73263: PPUSH
73264: PPUSH
73265: PPUSH
73266: PPUSH
73267: PPUSH
73268: PPUSH
73269: PPUSH
// if not unit or not building then
73270: LD_VAR 0 1
73274: NOT
73275: PUSH
73276: LD_VAR 0 2
73280: NOT
73281: OR
73282: IFFALSE 73286
// exit ;
73284: GO 73512
// x := GetX ( building ) ;
73286: LD_ADDR_VAR 0 4
73290: PUSH
73291: LD_VAR 0 2
73295: PPUSH
73296: CALL_OW 250
73300: ST_TO_ADDR
// y := GetY ( building ) ;
73301: LD_ADDR_VAR 0 6
73305: PUSH
73306: LD_VAR 0 2
73310: PPUSH
73311: CALL_OW 251
73315: ST_TO_ADDR
// d := GetDir ( building ) ;
73316: LD_ADDR_VAR 0 8
73320: PUSH
73321: LD_VAR 0 2
73325: PPUSH
73326: CALL_OW 254
73330: ST_TO_ADDR
// r := 4 ;
73331: LD_ADDR_VAR 0 9
73335: PUSH
73336: LD_INT 4
73338: ST_TO_ADDR
// for i := 1 to 5 do
73339: LD_ADDR_VAR 0 10
73343: PUSH
73344: DOUBLE
73345: LD_INT 1
73347: DEC
73348: ST_TO_ADDR
73349: LD_INT 5
73351: PUSH
73352: FOR_TO
73353: IFFALSE 73510
// begin _x := ShiftX ( x , d , r + i ) ;
73355: LD_ADDR_VAR 0 5
73359: PUSH
73360: LD_VAR 0 4
73364: PPUSH
73365: LD_VAR 0 8
73369: PPUSH
73370: LD_VAR 0 9
73374: PUSH
73375: LD_VAR 0 10
73379: PLUS
73380: PPUSH
73381: CALL_OW 272
73385: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73386: LD_ADDR_VAR 0 7
73390: PUSH
73391: LD_VAR 0 6
73395: PPUSH
73396: LD_VAR 0 8
73400: PPUSH
73401: LD_VAR 0 9
73405: PUSH
73406: LD_VAR 0 10
73410: PLUS
73411: PPUSH
73412: CALL_OW 273
73416: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73417: LD_VAR 0 5
73421: PPUSH
73422: LD_VAR 0 7
73426: PPUSH
73427: CALL_OW 488
73431: PUSH
73432: LD_VAR 0 5
73436: PPUSH
73437: LD_VAR 0 7
73441: PPUSH
73442: CALL_OW 428
73446: PPUSH
73447: CALL_OW 247
73451: PUSH
73452: LD_INT 3
73454: PUSH
73455: LD_INT 2
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: IN
73462: NOT
73463: AND
73464: IFFALSE 73508
// begin ComMoveXY ( unit , _x , _y ) ;
73466: LD_VAR 0 1
73470: PPUSH
73471: LD_VAR 0 5
73475: PPUSH
73476: LD_VAR 0 7
73480: PPUSH
73481: CALL_OW 111
// result := [ _x , _y ] ;
73485: LD_ADDR_VAR 0 3
73489: PUSH
73490: LD_VAR 0 5
73494: PUSH
73495: LD_VAR 0 7
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: ST_TO_ADDR
// exit ;
73504: POP
73505: POP
73506: GO 73512
// end ; end ;
73508: GO 73352
73510: POP
73511: POP
// end ;
73512: LD_VAR 0 3
73516: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73517: LD_INT 0
73519: PPUSH
73520: PPUSH
73521: PPUSH
// result := 0 ;
73522: LD_ADDR_VAR 0 3
73526: PUSH
73527: LD_INT 0
73529: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73530: LD_VAR 0 1
73534: PUSH
73535: LD_INT 0
73537: LESS
73538: PUSH
73539: LD_VAR 0 1
73543: PUSH
73544: LD_INT 8
73546: GREATER
73547: OR
73548: PUSH
73549: LD_VAR 0 2
73553: PUSH
73554: LD_INT 0
73556: LESS
73557: OR
73558: PUSH
73559: LD_VAR 0 2
73563: PUSH
73564: LD_INT 8
73566: GREATER
73567: OR
73568: IFFALSE 73572
// exit ;
73570: GO 73647
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73572: LD_ADDR_VAR 0 4
73576: PUSH
73577: LD_INT 22
73579: PUSH
73580: LD_VAR 0 2
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PPUSH
73589: CALL_OW 69
73593: PUSH
73594: FOR_IN
73595: IFFALSE 73645
// begin un := UnitShoot ( i ) ;
73597: LD_ADDR_VAR 0 5
73601: PUSH
73602: LD_VAR 0 4
73606: PPUSH
73607: CALL_OW 504
73611: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73612: LD_VAR 0 5
73616: PPUSH
73617: CALL_OW 255
73621: PUSH
73622: LD_VAR 0 1
73626: EQUAL
73627: IFFALSE 73643
// begin result := un ;
73629: LD_ADDR_VAR 0 3
73633: PUSH
73634: LD_VAR 0 5
73638: ST_TO_ADDR
// exit ;
73639: POP
73640: POP
73641: GO 73647
// end ; end ;
73643: GO 73594
73645: POP
73646: POP
// end ;
73647: LD_VAR 0 3
73651: RET
// export function GetCargoBay ( units ) ; begin
73652: LD_INT 0
73654: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73655: LD_ADDR_VAR 0 2
73659: PUSH
73660: LD_VAR 0 1
73664: PPUSH
73665: LD_INT 2
73667: PUSH
73668: LD_INT 34
73670: PUSH
73671: LD_INT 12
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: LD_INT 34
73680: PUSH
73681: LD_INT 51
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 34
73690: PUSH
73691: LD_INT 32
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 34
73700: PUSH
73701: LD_EXP 134
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: PPUSH
73717: CALL_OW 72
73721: ST_TO_ADDR
// end ;
73722: LD_VAR 0 2
73726: RET
