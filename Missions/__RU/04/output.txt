// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1519 0 0
// Nef_PrepareNature ;
 250: CALL 4421 0 0
// MissionIntro ;
 254: CALL 10430 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 , 4 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 , 0 ] [ Difficulty ] ;
 413: LD_ADDR_EXP 33
 417: PUSH
 418: LD_INT 2
 420: NEG
 421: PUSH
 422: LD_INT 1
 424: NEG
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: LD_OWVAR 67
 442: ARRAY
 443: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 444: LD_ADDR_EXP 34
 448: PUSH
 449: LD_INT 135
 451: PUSH
 452: LD_INT 8
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 135
 461: PUSH
 462: LD_INT 4
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 134
 471: PUSH
 472: LD_INT 19
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 132
 481: PUSH
 482: LD_INT 26
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 128
 491: PUSH
 492: LD_INT 31
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 123
 501: PUSH
 502: LD_INT 37
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 118
 511: PUSH
 512: LD_INT 45
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 112
 521: PUSH
 522: LD_INT 51
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 106
 531: PUSH
 532: LD_INT 57
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: LD_INT 99
 541: PUSH
 542: LD_INT 62
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 93
 551: PUSH
 552: LD_INT 67
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 86
 561: PUSH
 562: LD_INT 72
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 78
 571: PUSH
 572: LD_INT 75
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 71
 581: PUSH
 582: LD_INT 81
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 69
 591: PUSH
 592: LD_INT 88
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: LD_INT 71
 601: PUSH
 602: LD_INT 95
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 74
 611: PUSH
 612: LD_INT 103
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 80
 621: PUSH
 622: LD_INT 113
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 84
 631: PUSH
 632: LD_INT 121
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 89
 641: PUSH
 642: LD_INT 132
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 92
 651: PUSH
 652: LD_INT 142
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: LD_INT 93
 661: PUSH
 662: LD_INT 151
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PUSH
 669: LD_INT 91
 671: PUSH
 672: LD_INT 157
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 90
 681: PUSH
 682: LD_INT 163
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 93
 691: PUSH
 692: LD_INT 171
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 92
 701: PUSH
 702: LD_INT 177
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: LIST
 736: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 737: LD_ADDR_EXP 35
 741: PUSH
 742: LD_INT 135
 744: PUSH
 745: LD_INT 8
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 135
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 134
 764: PUSH
 765: LD_INT 19
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 132
 774: PUSH
 775: LD_INT 26
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 128
 784: PUSH
 785: LD_INT 31
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 123
 794: PUSH
 795: LD_INT 37
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 118
 804: PUSH
 805: LD_INT 45
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 112
 814: PUSH
 815: LD_INT 51
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 106
 824: PUSH
 825: LD_INT 57
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 99
 834: PUSH
 835: LD_INT 62
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 104
 844: PUSH
 845: LD_INT 71
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 110
 854: PUSH
 855: LD_INT 78
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: PUSH
 862: LD_INT 119
 864: PUSH
 865: LD_INT 88
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 128
 874: PUSH
 875: LD_INT 97
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: PUSH
 882: LD_INT 135
 884: PUSH
 885: LD_INT 106
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 141
 894: PUSH
 895: LD_INT 120
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 143
 904: PUSH
 905: LD_INT 132
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 143
 914: PUSH
 915: LD_INT 142
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: PUSH
 922: LD_INT 140
 924: PUSH
 925: LD_INT 149
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 132
 934: PUSH
 935: LD_INT 153
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 125
 944: PUSH
 945: LD_INT 155
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PUSH
 952: LD_INT 115
 954: PUSH
 955: LD_INT 154
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 105
 964: PUSH
 965: LD_INT 153
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 93
 974: PUSH
 975: LD_INT 151
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 91
 984: PUSH
 985: LD_INT 157
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 90
 994: PUSH
 995: LD_INT 163
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 93
1004: PUSH
1005: LD_INT 171
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 92
1014: PUSH
1015: LD_INT 177
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 , 25 ] [ Difficulty ] ;
1052: LD_ADDR_EXP 36
1056: PUSH
1057: LD_INT 40
1059: PUSH
1060: LD_INT 35
1062: PUSH
1063: LD_INT 30
1065: PUSH
1066: LD_INT 25
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_OWVAR 67
1079: ARRAY
1080: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1081: LD_ADDR_EXP 37
1085: PUSH
1086: LD_INT 50
1088: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 , 15 ] [ Difficulty ] ;
1089: LD_ADDR_EXP 14
1093: PUSH
1094: LD_INT 21
1096: PUSH
1097: LD_INT 19
1099: PUSH
1100: LD_INT 17
1102: PUSH
1103: LD_INT 15
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_OWVAR 67
1116: ARRAY
1117: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1118: LD_ADDR_EXP 38
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 4
1128: PUSH
1129: LD_INT 4
1131: PUSH
1132: LD_INT 4
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_OWVAR 67
1145: ARRAY
1146: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 , 4 ] [ Difficulty ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_INT 3
1154: PUSH
1155: LD_INT 4
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_OWVAR 67
1174: ARRAY
1175: ST_TO_ADDR
// arabianTroopsMin = 2 ;
1176: LD_ADDR_EXP 40
1180: PUSH
1181: LD_INT 2
1183: ST_TO_ADDR
// arabianTroopsMax = 4 ;
1184: LD_ADDR_EXP 41
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// end ;
1192: LD_VAR 0 1
1196: RET
// every 0 0$1 trigger debugMode do var i ;
1197: LD_EXP 31
1201: IFFALSE 1516
1203: GO 1205
1205: DISABLE
1206: LD_INT 0
1208: PPUSH
// begin enable ;
1209: ENABLE
// FogOff ( your_side ) ;
1210: LD_OWVAR 2
1214: PPUSH
1215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1219: LD_ADDR_VAR 0 1
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_OWVAR 2
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 2
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 21
1251: PUSH
1252: LD_INT 2
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1290
// SetLives ( i , 1000 ) ;
1276: LD_VAR 0 1
1280: PPUSH
1281: LD_INT 1000
1283: PPUSH
1284: CALL_OW 234
1288: GO 1273
1290: POP
1291: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1292: LD_ADDR_VAR 0 1
1296: PUSH
1297: LD_INT 22
1299: PUSH
1300: LD_OWVAR 2
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 21
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: FOR_IN
1329: IFFALSE 1393
// begin SetSkill ( i , skill_combat , 10 ) ;
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 1
1338: PPUSH
1339: LD_INT 10
1341: PPUSH
1342: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1346: LD_VAR 0 1
1350: PPUSH
1351: LD_INT 2
1353: PPUSH
1354: LD_INT 10
1356: PPUSH
1357: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1361: LD_VAR 0 1
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 10
1371: PPUSH
1372: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: LD_INT 4
1383: PPUSH
1384: LD_INT 10
1386: PPUSH
1387: CALL_OW 237
// end ;
1391: GO 1328
1393: POP
1394: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_OWVAR 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 30
1417: PUSH
1418: LD_INT 0
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 30
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 69
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1514
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL_OW 274
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 9999
1467: PPUSH
1468: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1472: LD_VAR 0 1
1476: PPUSH
1477: CALL_OW 274
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 9999
1487: PPUSH
1488: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 274
1501: PPUSH
1502: LD_INT 3
1504: PPUSH
1505: LD_INT 9999
1507: PPUSH
1508: CALL_OW 277
// end ;
1512: GO 1449
1514: POP
1515: POP
// end ; end_of_file
1516: PPOPN 1
1518: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1519: LD_INT 0
1521: PPUSH
// randomsToSave = [ ] ;
1522: LD_ADDR_EXP 62
1526: PUSH
1527: EMPTY
1528: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1529: LD_ADDR_EXP 57
1533: PUSH
1534: EMPTY
1535: ST_TO_ADDR
// ruCars = [ ] ;
1536: LD_ADDR_EXP 61
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1543: CALL 2351 0 0
// PrepareHeroes ;
1547: CALL 1556 0 0
// end ;
1551: LD_VAR 0 1
1555: RET
// function PrepareHeroes ; var i , current ; begin
1556: LD_INT 0
1558: PPUSH
1559: PPUSH
1560: PPUSH
// uc_side = 3 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 3
1568: ST_TO_ADDR
// uc_nation = 3 ;
1569: LD_ADDR_OWVAR 21
1573: PUSH
1574: LD_INT 3
1576: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1577: LD_ADDR_EXP 42
1581: PUSH
1582: LD_STRING Burlak
1584: PPUSH
1585: LD_INT 1
1587: PPUSH
1588: LD_INT 3
1590: PPUSH
1591: CALL 9409 0 3
1595: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1596: LD_ADDR_EXP 43
1600: PUSH
1601: LD_STRING Gnyevko
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: LD_INT 3
1609: PPUSH
1610: CALL 9409 0 3
1614: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1615: LD_ADDR_EXP 45
1619: PUSH
1620: LD_STRING Kovalyuk
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 3
1628: PPUSH
1629: CALL 9409 0 3
1633: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1634: LD_ADDR_EXP 44
1638: PUSH
1639: LD_STRING Kirilenkova
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: LD_INT 4
1647: PPUSH
1648: CALL 9409 0 3
1652: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1653: LD_ADDR_EXP 46
1657: PUSH
1658: LD_STRING Belkov
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL 9409 0 3
1671: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1672: LD_ADDR_EXP 47
1676: PUSH
1677: LD_STRING Belkov2
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 9409 0 3
1690: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1691: LD_ADDR_EXP 48
1695: PUSH
1696: LD_STRING Scholtze
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: LD_INT 4
1704: PPUSH
1705: CALL 9409 0 3
1709: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1710: LD_ADDR_EXP 52
1714: PUSH
1715: LD_STRING Popov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL 9409 0 3
1728: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1729: LD_ADDR_EXP 53
1733: PUSH
1734: LD_STRING Platonov
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL 9409 0 3
1747: ST_TO_ADDR
// uc_side = 6 ;
1748: LD_ADDR_OWVAR 20
1752: PUSH
1753: LD_INT 6
1755: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1756: LD_ADDR_EXP 54
1760: PUSH
1761: LD_STRING Gaydar
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 9409 0 3
1774: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1775: LD_ADDR_EXP 49
1779: PUSH
1780: LD_STRING Kuzmov
1782: PPUSH
1783: LD_INT 0
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: CALL 9409 0 3
1793: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1794: LD_EXP 49
1798: PPUSH
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 108
1804: PPUSH
1805: LD_INT 5
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 50
// ComHold ( Kuzmov ) ;
1815: LD_EXP 49
1819: PPUSH
1820: CALL_OW 140
// uc_side = 3 ;
1824: LD_ADDR_OWVAR 20
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1832: LD_EXP 42
1836: PUSH
1837: LD_EXP 43
1841: PUSH
1842: LD_EXP 44
1846: PUSH
1847: LD_EXP 45
1851: PUSH
1852: LD_EXP 46
1856: PUSH
1857: LD_EXP 47
1861: PUSH
1862: LD_EXP 48
1866: PUSH
1867: LD_EXP 52
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL 9492 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1892: LD_ADDR_EXP 50
1896: PUSH
1897: LD_STRING 03_other_survivors
1899: PPUSH
1900: CALL_OW 31
1904: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1905: LD_ADDR_EXP 51
1909: PUSH
1910: LD_STRING 03_other_kirov
1912: PPUSH
1913: CALL_OW 31
1917: ST_TO_ADDR
// for i in other_survivors do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_EXP 50
1927: PUSH
1928: FOR_IN
1929: IFFALSE 1994
// begin if ruCars then
1931: LD_EXP 61
1935: IFFALSE 1977
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_EXP 61
1946: PUSH
1947: LD_INT 1
1949: ARRAY
1950: PPUSH
1951: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1955: LD_ADDR_EXP 61
1959: PUSH
1960: LD_EXP 61
1964: PUSH
1965: LD_EXP 61
1969: PUSH
1970: LD_INT 1
1972: ARRAY
1973: DIFF
1974: ST_TO_ADDR
// end else
1975: GO 1992
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1977: LD_VAR 0 2
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: CALL_OW 49
// end ;
1992: GO 1928
1994: POP
1995: POP
// for i in other_kirov_survivors do
1996: LD_ADDR_VAR 0 2
2000: PUSH
2001: LD_EXP 51
2005: PUSH
2006: FOR_IN
2007: IFFALSE 2072
// begin if ruCars then
2009: LD_EXP 61
2013: IFFALSE 2055
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
2015: LD_VAR 0 2
2019: PPUSH
2020: LD_EXP 61
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PPUSH
2029: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2033: LD_ADDR_EXP 61
2037: PUSH
2038: LD_EXP 61
2042: PUSH
2043: LD_EXP 61
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: DIFF
2052: ST_TO_ADDR
// end else
2053: GO 2070
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2055: LD_VAR 0 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 0
2065: PPUSH
2066: CALL_OW 49
// end ;
2070: GO 2006
2072: POP
2073: POP
// PrepareSoldier ( sex_male , 1 ) ;
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 381
// dialogRus = CreateHuman ;
2084: LD_ADDR_EXP 59
2088: PUSH
2089: CALL_OW 44
2093: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2094: LD_EXP 50
2098: PUSH
2099: LD_EXP 51
2103: PLUS
2104: PUSH
2105: LD_EXP 43
2109: PUSH
2110: LD_EXP 44
2114: PUSH
2115: LD_EXP 45
2119: PUSH
2120: LD_EXP 46
2124: PUSH
2125: LD_EXP 47
2129: PUSH
2130: LD_EXP 48
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PLUS
2143: PUSH
2144: LD_INT 8
2146: LESS
2147: IFFALSE 2346
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_EXP 50
2158: PUSH
2159: LD_EXP 51
2163: PLUS
2164: PUSH
2165: LD_EXP 43
2169: PUSH
2170: LD_EXP 44
2174: PUSH
2175: LD_EXP 45
2179: PUSH
2180: LD_EXP 46
2184: PUSH
2185: LD_EXP 47
2189: PUSH
2190: LD_EXP 48
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PLUS
2203: ST_TO_ADDR
// current = 8 - current ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_INT 8
2211: PUSH
2212: LD_VAR 0 3
2216: MINUS
2217: ST_TO_ADDR
// for i := 1 to current do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_VAR 0 3
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2344
// begin uc_nation = 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// uc_side = 3 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2252: LD_INT 0
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 4
2260: PPUSH
2261: CALL_OW 12
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 3
2271: PPUSH
2272: CALL_OW 12
2276: PPUSH
2277: CALL_OW 380
// if ruCars then
2281: LD_EXP 61
2285: IFFALSE 2327
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2287: CALL_OW 44
2291: PPUSH
2292: LD_EXP 61
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2305: LD_ADDR_EXP 61
2309: PUSH
2310: LD_EXP 61
2314: PUSH
2315: LD_EXP 61
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: DIFF
2324: ST_TO_ADDR
// end else
2325: GO 2342
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2327: CALL_OW 44
2331: PPUSH
2332: LD_INT 2
2334: PPUSH
2335: LD_INT 0
2337: PPUSH
2338: CALL_OW 49
// end ;
2342: GO 2233
2344: POP
2345: POP
// end ; end ;
2346: LD_VAR 0 1
2350: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2351: LD_INT 0
2353: PPUSH
2354: PPUSH
2355: PPUSH
// uc_side = 3 ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_INT 3
2363: ST_TO_ADDR
// uc_nation = 3 ;
2364: LD_ADDR_OWVAR 21
2368: PUSH
2369: LD_INT 3
2371: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: DOUBLE
2378: LD_INT 1
2380: DEC
2381: ST_TO_ADDR
2382: LD_EXP 5
2386: PUSH
2387: FOR_TO
2388: IFFALSE 2537
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2390: LD_ADDR_OWVAR 37
2394: PUSH
2395: LD_EXP 5
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2410: LD_ADDR_OWVAR 39
2414: PUSH
2415: LD_EXP 5
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_INT 2
2428: ARRAY
2429: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2430: LD_ADDR_OWVAR 38
2434: PUSH
2435: LD_EXP 5
2439: PUSH
2440: LD_VAR 0 2
2444: ARRAY
2445: PUSH
2446: LD_INT 3
2448: ARRAY
2449: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_EXP 5
2459: PUSH
2460: LD_VAR 0 2
2464: ARRAY
2465: PUSH
2466: LD_INT 4
2468: ARRAY
2469: ST_TO_ADDR
// uc_direction := 3 ;
2470: LD_ADDR_OWVAR 24
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2478: LD_ADDR_OWVAR 41
2482: PUSH
2483: LD_INT 25
2485: PPUSH
2486: LD_INT 30
2488: PPUSH
2489: CALL_OW 12
2493: ST_TO_ADDR
// car := CreateVehicle ;
2494: LD_ADDR_VAR 0 3
2498: PUSH
2499: CALL_OW 45
2503: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2504: LD_ADDR_EXP 61
2508: PUSH
2509: LD_EXP 61
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2520: LD_VAR 0 3
2524: PPUSH
2525: LD_INT 2
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// end ;
2535: GO 2387
2537: POP
2538: POP
// end ;
2539: LD_VAR 0 1
2543: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2544: LD_INT 0
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// rnd = rand ( 1 , 4 ) ;
2554: LD_ADDR_VAR 0 3
2558: PUSH
2559: LD_INT 1
2561: PPUSH
2562: LD_INT 4
2564: PPUSH
2565: CALL_OW 12
2569: ST_TO_ADDR
// uc_side = 6 ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_INT 6
2577: ST_TO_ADDR
// uc_nation = 3 ;
2578: LD_ADDR_OWVAR 21
2582: PUSH
2583: LD_INT 3
2585: ST_TO_ADDR
// if rnd < 4 then
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 4
2593: LESS
2594: IFFALSE 2970
// begin vc_chassis = ru_medium_wheeled ;
2596: LD_ADDR_OWVAR 37
2600: PUSH
2601: LD_INT 21
2603: ST_TO_ADDR
// vc_control = control_manual ;
2604: LD_ADDR_OWVAR 38
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_engine = engine_combustion ;
2612: LD_ADDR_OWVAR 39
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2620: LD_ADDR_VAR 0 5
2624: PUSH
2625: LD_INT 1
2627: PPUSH
2628: LD_INT 100
2630: PPUSH
2631: CALL_OW 12
2635: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2636: LD_VAR 0 5
2640: PUSH
2641: LD_EXP 37
2645: PUSH
2646: LD_INT 1
2648: PLUS
2649: LESS
2650: IFFALSE 2662
// vc_weapon = ru_cargo_bay else
2652: LD_ADDR_OWVAR 40
2656: PUSH
2657: LD_INT 51
2659: ST_TO_ADDR
2660: GO 2693
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2662: LD_ADDR_OWVAR 40
2666: PUSH
2667: LD_INT 42
2669: PUSH
2670: LD_INT 43
2672: PUSH
2673: LD_INT 44
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 12
2691: ARRAY
2692: ST_TO_ADDR
// vehicle = CreateVehicle ;
2693: LD_ADDR_VAR 0 7
2697: PUSH
2698: CALL_OW 45
2702: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2703: LD_VAR 0 7
2707: PPUSH
2708: LD_INT 3
2710: PPUSH
2711: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2715: LD_VAR 0 7
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 12
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: LD_INT 3
2749: PPUSH
2750: CALL_OW 12
2754: PPUSH
2755: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2759: CALL_OW 44
2763: PPUSH
2764: LD_VAR 0 7
2768: PPUSH
2769: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2773: LD_OWVAR 40
2777: PUSH
2778: LD_INT 51
2780: EQUAL
2781: IFFALSE 2798
// AddCargo ( vehicle , mat_cans , 100 ) ;
2783: LD_VAR 0 7
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2798: LD_VAR 0 7
2802: PPUSH
2803: LD_INT 500
2805: PPUSH
2806: LD_INT 1000
2808: PPUSH
2809: CALL_OW 12
2813: PPUSH
2814: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_INT 2
2828: PPUSH
2829: CALL_OW 12
2833: ST_TO_ADDR
// if rnd = 1 then
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 1
2841: EQUAL
2842: IFFALSE 2907
// for i := 3 to russianCargoPath1 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 3
2852: DEC
2853: ST_TO_ADDR
2854: LD_EXP 34
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2903
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2862: LD_VAR 0 7
2866: PPUSH
2867: LD_EXP 34
2871: PUSH
2872: LD_VAR 0 2
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: LD_EXP 34
2886: PUSH
2887: LD_VAR 0 2
2891: ARRAY
2892: PUSH
2893: LD_INT 2
2895: ARRAY
2896: PPUSH
2897: CALL_OW 171
2901: GO 2859
2903: POP
2904: POP
2905: GO 2968
// for i := 3 to russianCargoPath2 do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: DOUBLE
2913: LD_INT 3
2915: DEC
2916: ST_TO_ADDR
2917: LD_EXP 35
2921: PUSH
2922: FOR_TO
2923: IFFALSE 2966
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2925: LD_VAR 0 7
2929: PPUSH
2930: LD_EXP 35
2934: PUSH
2935: LD_VAR 0 2
2939: ARRAY
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 2
2954: ARRAY
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PPUSH
2960: CALL_OW 171
2964: GO 2922
2966: POP
2967: POP
// end else
2968: GO 3309
// begin for i := 1 to rand ( 1 , 3 ) do
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: DOUBLE
2976: LD_INT 1
2978: DEC
2979: ST_TO_ADDR
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: CALL_OW 12
2990: PUSH
2991: FOR_TO
2992: IFFALSE 3070
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 1
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: CALL_OW 12
3007: PPUSH
3008: LD_INT 2
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 12
3018: PPUSH
3019: CALL_OW 380
// unit = CreateHuman ;
3023: LD_ADDR_VAR 0 6
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3033: LD_VAR 0 6
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3048: LD_VAR 0 6
3052: PPUSH
3053: LD_INT 500
3055: PPUSH
3056: LD_INT 1000
3058: PPUSH
3059: CALL_OW 12
3063: PPUSH
3064: CALL_OW 234
// end ;
3068: GO 2991
3070: POP
3071: POP
// rnd2 = rand ( 1 , 2 ) ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: CALL_OW 12
3087: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3088: LD_ADDR_VAR 0 8
3092: PUSH
3093: LD_INT 22
3095: PUSH
3096: LD_INT 6
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 21
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PUSH
3113: LD_INT 56
3115: PUSH
3116: EMPTY
3117: LIST
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 60
3124: PUSH
3125: EMPTY
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3143: LD_ADDR_VAR 0 8
3147: PUSH
3148: LD_VAR 0 8
3152: PUSH
3153: LD_EXP 56
3157: DIFF
3158: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3159: LD_ADDR_VAR 0 8
3163: PUSH
3164: LD_VAR 0 8
3168: PUSH
3169: LD_EXP 57
3173: DIFF
3174: ST_TO_ADDR
// if rnd2 = 1 then
3175: LD_VAR 0 4
3179: PUSH
3180: LD_INT 1
3182: EQUAL
3183: IFFALSE 3248
// for i := 3 to russianCargoPath1 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 3
3193: DEC
3194: ST_TO_ADDR
3195: LD_EXP 34
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3244
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3203: LD_VAR 0 8
3207: PPUSH
3208: LD_EXP 34
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PPUSH
3223: LD_EXP 34
3227: PUSH
3228: LD_VAR 0 2
3232: ARRAY
3233: PUSH
3234: LD_INT 2
3236: ARRAY
3237: PPUSH
3238: CALL_OW 171
3242: GO 3200
3244: POP
3245: POP
3246: GO 3309
// for i := 3 to russianCargoPath2 do
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: DOUBLE
3254: LD_INT 3
3256: DEC
3257: ST_TO_ADDR
3258: LD_EXP 35
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3307
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3266: LD_VAR 0 8
3270: PPUSH
3271: LD_EXP 35
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 1
3284: ARRAY
3285: PPUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 2
3299: ARRAY
3300: PPUSH
3301: CALL_OW 171
3305: GO 3263
3307: POP
3308: POP
// end ; end ;
3309: LD_VAR 0 1
3313: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
// for i := 1 to 2 do
3319: LD_ADDR_VAR 0 2
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_INT 2
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3399
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3335: LD_INT 0
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 3
3346: PPUSH
3347: CALL_OW 12
3351: PPUSH
3352: CALL_OW 380
// unit = CreateHuman ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: CALL_OW 44
3365: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3381: LD_ADDR_EXP 57
3385: PUSH
3386: LD_EXP 57
3390: PUSH
3391: LD_VAR 0 3
3395: ADD
3396: ST_TO_ADDR
// end ;
3397: GO 3332
3399: POP
3400: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3401: LD_INT 0
3403: PPUSH
3404: LD_INT 2
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 380
// unit = CreateHuman ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3432: LD_VAR 0 3
3436: PPUSH
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3447: LD_ADDR_EXP 57
3451: PUSH
3452: LD_EXP 57
3456: PUSH
3457: LD_VAR 0 3
3461: ADD
3462: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3463: LD_EXP 57
3467: PPUSH
3468: LD_INT 100
3470: PPUSH
3471: LD_INT 54
3473: PPUSH
3474: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3478: LD_EXP 57
3482: PPUSH
3483: LD_INT 25
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 72
3497: PPUSH
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 95
3503: PPUSH
3504: LD_INT 52
3506: PPUSH
3507: LD_INT 2
3509: PPUSH
3510: CALL_OW 205
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3519: LD_INT 0
3521: PPUSH
// uc_side = 2 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 2
3529: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3530: LD_ADDR_EXP 63
3534: PUSH
3535: LD_STRING Heike
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL 9409 0 3
3548: ST_TO_ADDR
// if Difficulty >= 2 then
3549: LD_OWVAR 67
3553: PUSH
3554: LD_INT 2
3556: GREATEREQUAL
3557: IFFALSE 3572
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3559: LD_INT 51
3561: PPUSH
3562: LD_INT 2
3564: PPUSH
3565: LD_INT 2
3567: PPUSH
3568: CALL_OW 322
// end ;
3572: LD_VAR 0 1
3576: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3577: LD_INT 0
3579: PPUSH
3580: PPUSH
3581: PPUSH
// currentEnemyGroup = [ ] ;
3582: LD_ADDR_EXP 65
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3589: LD_ADDR_VAR 0 2
3593: PUSH
3594: DOUBLE
3595: LD_INT 1
3597: DEC
3598: ST_TO_ADDR
3599: LD_EXP 39
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3860
// begin uc_side = 2 ;
3607: LD_ADDR_OWVAR 20
3611: PUSH
3612: LD_INT 2
3614: ST_TO_ADDR
// uc_nation = nation_arabian ;
3615: LD_ADDR_OWVAR 21
3619: PUSH
3620: LD_INT 2
3622: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3623: LD_ADDR_OWVAR 40
3627: PUSH
3628: LD_INT 23
3630: PUSH
3631: LD_INT 24
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 26
3639: PUSH
3640: LD_INT 27
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_INT 1
3652: PPUSH
3653: LD_INT 5
3655: PPUSH
3656: CALL_OW 12
3660: ARRAY
3661: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3662: LD_OWVAR 40
3666: PUSH
3667: LD_INT 25
3669: PUSH
3670: LD_INT 26
3672: PUSH
3673: LD_INT 27
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: IN
3681: IFFALSE 3712
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3683: LD_ADDR_OWVAR 37
3687: PUSH
3688: LD_INT 13
3690: PUSH
3691: LD_INT 14
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_INT 2
3703: PPUSH
3704: CALL_OW 12
3708: ARRAY
3709: ST_TO_ADDR
3710: GO 3743
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3712: LD_ADDR_OWVAR 37
3716: PUSH
3717: LD_INT 12
3719: PUSH
3720: LD_INT 13
3722: PUSH
3723: LD_INT 14
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: ST_TO_ADDR
// vc_control = control_manual ;
3743: LD_ADDR_OWVAR 38
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// vc_engine = engine_combustion ;
3751: LD_ADDR_OWVAR 39
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3759: LD_ADDR_OWVAR 41
3763: PUSH
3764: LD_INT 100
3766: ST_TO_ADDR
// veh = CreateVehicle ;
3767: LD_ADDR_VAR 0 3
3771: PUSH
3772: CALL_OW 45
3776: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3777: LD_ADDR_EXP 65
3781: PUSH
3782: LD_EXP 65
3786: PUSH
3787: LD_VAR 0 3
3791: ADD
3792: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_INT 7
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3808: LD_OWVAR 40
3812: PUSH
3813: LD_INT 26
3815: EQUAL
3816: IFFALSE 3832
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3818: LD_INT 0
3820: PPUSH
3821: LD_EXP 33
3825: PPUSH
3826: CALL_OW 383
3830: GO 3844
// PrepareMechanic ( false , enemySkillLevel ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_EXP 32
3839: PPUSH
3840: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3844: CALL_OW 44
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 52
// end ;
3858: GO 3604
3860: POP
3861: POP
// end ;
3862: LD_VAR 0 1
3866: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3867: LD_INT 0
3869: PPUSH
3870: PPUSH
3871: PPUSH
// currentEnemyGroup = [ ] ;
3872: LD_ADDR_EXP 65
3876: PUSH
3877: EMPTY
3878: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3879: LD_ADDR_VAR 0 3
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_EXP 40
3893: PPUSH
3894: LD_EXP 41
3898: PPUSH
3899: CALL_OW 12
3903: PUSH
3904: FOR_TO
3905: IFFALSE 3984
// begin uc_side = 2 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 2
3914: ST_TO_ADDR
// uc_nation = nation_arabian ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 2
3922: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3923: LD_INT 0
3925: PPUSH
3926: LD_EXP 32
3930: PUSH
3931: LD_INT 1
3933: MINUS
3934: PPUSH
3935: CALL_OW 381
// unit = CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3949: LD_ADDR_EXP 65
3953: PUSH
3954: LD_EXP 65
3958: PUSH
3959: LD_VAR 0 4
3963: ADD
3964: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 1
3974: PPUSH
3975: LD_INT 0
3977: PPUSH
3978: CALL_OW 49
// end ;
3982: GO 3904
3984: POP
3985: POP
// for i := 1 to rand ( 1 , 3 ) do
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 1
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 12
4006: PUSH
4007: FOR_TO
4008: IFFALSE 4083
// begin uc_side = 2 ;
4010: LD_ADDR_OWVAR 20
4014: PUSH
4015: LD_INT 2
4017: ST_TO_ADDR
// uc_nation = nation_arabian ;
4018: LD_ADDR_OWVAR 21
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 32
4033: PPUSH
4034: CALL_OW 384
// unit = CreateHuman ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4048: LD_ADDR_EXP 65
4052: PUSH
4053: LD_EXP 65
4057: PUSH
4058: LD_VAR 0 4
4062: ADD
4063: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4064: LD_VAR 0 4
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_INT 0
4076: PPUSH
4077: CALL_OW 49
// end ;
4081: GO 4007
4083: POP
4084: POP
// end ;
4085: LD_VAR 0 2
4089: RET
// export function PrepareArabianKiller ; var un ; begin
4090: LD_INT 0
4092: PPUSH
4093: PPUSH
// uc_side = 5 ;
4094: LD_ADDR_OWVAR 20
4098: PUSH
4099: LD_INT 5
4101: ST_TO_ADDR
// uc_nation = nation_arabian ;
4102: LD_ADDR_OWVAR 21
4106: PUSH
4107: LD_INT 2
4109: ST_TO_ADDR
// hc_class = class_soldier ;
4110: LD_ADDR_OWVAR 28
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// un = CreateHuman ;
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4151: LD_VAR 0 2
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_EXP 54
4175: PPUSH
4176: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4180: LD_ADDR_EXP 23
4184: PUSH
4185: LD_EXP 23
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: ST_TO_ADDR
// end ;
4194: LD_VAR 0 1
4198: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
// firstAttackGroup = [ ] ;
4205: LD_ADDR_EXP 64
4209: PUSH
4210: EMPTY
4211: ST_TO_ADDR
// uc_side = 2 ;
4212: LD_ADDR_OWVAR 20
4216: PUSH
4217: LD_INT 2
4219: ST_TO_ADDR
// uc_nation = nation_arabian ;
4220: LD_ADDR_OWVAR 21
4224: PUSH
4225: LD_INT 2
4227: ST_TO_ADDR
// for i := 1 to 3 do
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: DOUBLE
4234: LD_INT 1
4236: DEC
4237: ST_TO_ADDR
4238: LD_INT 3
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4303
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4244: LD_INT 0
4246: PPUSH
4247: LD_EXP 32
4251: PUSH
4252: LD_INT 2
4254: MINUS
4255: PPUSH
4256: CALL_OW 381
// unit = CreateHuman ;
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: CALL_OW 44
4269: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4270: LD_ADDR_EXP 64
4274: PUSH
4275: LD_EXP 64
4279: PUSH
4280: LD_VAR 0 3
4284: ADD
4285: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 7
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// end ;
4301: GO 4241
4303: POP
4304: POP
// vc_weapon = ar_light_gun ;
4305: LD_ADDR_OWVAR 40
4309: PUSH
4310: LD_INT 23
4312: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4313: LD_ADDR_OWVAR 37
4317: PUSH
4318: LD_INT 13
4320: ST_TO_ADDR
// vc_control = control_manual ;
4321: LD_ADDR_OWVAR 38
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// vc_engine = engine_combustion ;
4329: LD_ADDR_OWVAR 39
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4337: LD_ADDR_OWVAR 41
4341: PUSH
4342: LD_INT 100
4344: ST_TO_ADDR
// veh = CreateVehicle ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: CALL_OW 45
4354: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4355: LD_ADDR_EXP 64
4359: PUSH
4360: LD_EXP 64
4364: PUSH
4365: LD_VAR 0 4
4369: ADD
4370: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4371: LD_VAR 0 4
4375: PPUSH
4376: LD_INT 7
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4386: LD_INT 0
4388: PPUSH
4389: LD_EXP 32
4393: PUSH
4394: LD_INT 1
4396: MINUS
4397: PPUSH
4398: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4402: CALL_OW 44
4406: PPUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: CALL_OW 52
// end ; end_of_file
4416: LD_VAR 0 1
4420: RET
// export function Nef_PrepareNature ; var i , un ; begin
4421: LD_INT 0
4423: PPUSH
4424: PPUSH
4425: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4426: LD_ADDR_VAR 0 2
4430: PUSH
4431: DOUBLE
4432: LD_INT 1
4434: DEC
4435: ST_TO_ADDR
4436: LD_EXP 26
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4556
// begin uc_side = 0 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 0
4455: ST_TO_ADDR
// uc_nation = nation_nature ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 0
4463: ST_TO_ADDR
// hc_class = class_apeman ;
4464: LD_ADDR_OWVAR 28
4468: PUSH
4469: LD_INT 12
4471: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4472: LD_ADDR_OWVAR 31
4476: PUSH
4477: LD_EXP 27
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_INT 2
4493: ARRAY
4494: PUSH
4495: LD_EXP 27
4499: PUSH
4500: LD_INT 3
4502: ARRAY
4503: PUSH
4504: LD_EXP 27
4508: PUSH
4509: LD_INT 4
4511: ARRAY
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4519: LD_ADDR_OWVAR 35
4523: PUSH
4524: LD_EXP 28
4528: ST_TO_ADDR
// un = CreateHuman ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: CALL_OW 44
4538: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_INT 8
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 49
// end ;
4554: GO 4445
4556: POP
4557: POP
// for i := 1 to animalsAmount [ 2 ] do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_EXP 26
4572: PUSH
4573: LD_INT 2
4575: ARRAY
4576: PUSH
4577: FOR_TO
4578: IFFALSE 4688
// begin uc_side = 0 ;
4580: LD_ADDR_OWVAR 20
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// uc_nation = nation_nature ;
4588: LD_ADDR_OWVAR 21
4592: PUSH
4593: LD_INT 0
4595: ST_TO_ADDR
// hc_class = class_phororhacos ;
4596: LD_ADDR_OWVAR 28
4600: PUSH
4601: LD_INT 18
4603: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4604: LD_ADDR_OWVAR 31
4608: PUSH
4609: LD_EXP 27
4613: PUSH
4614: LD_INT 1
4616: ARRAY
4617: PUSH
4618: LD_EXP 27
4622: PUSH
4623: LD_INT 2
4625: ARRAY
4626: PUSH
4627: LD_EXP 27
4631: PUSH
4632: LD_INT 3
4634: ARRAY
4635: PUSH
4636: LD_EXP 27
4640: PUSH
4641: LD_INT 4
4643: ARRAY
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4651: LD_ADDR_OWVAR 35
4655: PUSH
4656: LD_EXP 28
4660: ST_TO_ADDR
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 8
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4577
4688: POP
4689: POP
// for i := 1 to animalsAmount [ 3 ] do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_EXP 26
4704: PUSH
4705: LD_INT 3
4707: ARRAY
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4820
// begin uc_side = 0 ;
4712: LD_ADDR_OWVAR 20
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// uc_nation = nation_nature ;
4720: LD_ADDR_OWVAR 21
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// hc_class = class_tiger ;
4728: LD_ADDR_OWVAR 28
4732: PUSH
4733: LD_INT 14
4735: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4736: LD_ADDR_OWVAR 31
4740: PUSH
4741: LD_EXP 27
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PUSH
4750: LD_EXP 27
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PUSH
4759: LD_EXP 27
4763: PUSH
4764: LD_INT 3
4766: ARRAY
4767: PUSH
4768: LD_EXP 27
4772: PUSH
4773: LD_INT 4
4775: ARRAY
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4783: LD_ADDR_OWVAR 35
4787: PUSH
4788: LD_EXP 28
4792: ST_TO_ADDR
// un = CreateHuman ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: CALL_OW 44
4802: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_INT 8
4810: PPUSH
4811: LD_INT 0
4813: PPUSH
4814: CALL_OW 49
// end ;
4818: GO 4709
4820: POP
4821: POP
// for i := 1 to animalsAmount [ 4 ] do
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_EXP 26
4836: PUSH
4837: LD_INT 4
4839: ARRAY
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4952
// begin uc_side = 0 ;
4844: LD_ADDR_OWVAR 20
4848: PUSH
4849: LD_INT 0
4851: ST_TO_ADDR
// uc_nation = nation_nature ;
4852: LD_ADDR_OWVAR 21
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// hc_class = 21 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 21
4867: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4868: LD_ADDR_OWVAR 31
4872: PUSH
4873: LD_EXP 27
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PUSH
4882: LD_EXP 27
4886: PUSH
4887: LD_INT 2
4889: ARRAY
4890: PUSH
4891: LD_EXP 27
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: LD_EXP 27
4904: PUSH
4905: LD_INT 4
4907: ARRAY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4915: LD_ADDR_OWVAR 35
4919: PUSH
4920: LD_EXP 28
4924: ST_TO_ADDR
// un = CreateHuman ;
4925: LD_ADDR_VAR 0 3
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: LD_INT 8
4942: PPUSH
4943: LD_INT 0
4945: PPUSH
4946: CALL_OW 49
// end ;
4950: GO 4841
4952: POP
4953: POP
// for i := 1 to animalsAmount [ 5 ] do
4954: LD_ADDR_VAR 0 2
4958: PUSH
4959: DOUBLE
4960: LD_INT 1
4962: DEC
4963: ST_TO_ADDR
4964: LD_EXP 26
4968: PUSH
4969: LD_INT 5
4971: ARRAY
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5035
// begin uc_side = 0 ;
4976: LD_ADDR_OWVAR 20
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// uc_nation = nation_nature ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// vc_chassis := 31 ;
4992: LD_ADDR_OWVAR 37
4996: PUSH
4997: LD_INT 31
4999: ST_TO_ADDR
// vc_control := control_rider ;
5000: LD_ADDR_OWVAR 38
5004: PUSH
5005: LD_INT 4
5007: ST_TO_ADDR
// un := CreateVehicle ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 45
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 8
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4973
5035: POP
5036: POP
// end ; end_of_file
5037: LD_VAR 0 1
5041: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5042: LD_INT 0
5044: PPUSH
5045: PPUSH
5046: PPUSH
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
5051: PPUSH
5052: PPUSH
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
// for unit in units do
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5110
// if not ignorePath then
5075: LD_VAR 0 3
5079: NOT
5080: IFFALSE 5096
// SetTag ( unit , 0 ) else
5082: LD_VAR 0 8
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: CALL_OW 109
5094: GO 5108
// SetTag ( unit , 1 ) ;
5096: LD_VAR 0 8
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 109
5108: GO 5072
5110: POP
5111: POP
// startAttacks = false ;
5112: LD_ADDR_VAR 0 21
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5120: LD_ADDR_VAR 0 17
5124: PUSH
5125: LD_VAR 0 2
5129: PUSH
5130: LD_VAR 0 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_VAR 0 2
5149: ARRAY
5150: PUSH
5151: LD_INT 2
5153: ARRAY
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: ST_TO_ADDR
// mechanics = [ ] ;
5159: LD_ADDR_VAR 0 12
5163: PUSH
5164: EMPTY
5165: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5166: LD_ADDR_VAR 0 9
5170: PUSH
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 50
5178: PUSH
5179: EMPTY
5180: LIST
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 1
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5219: LD_ADDR_VAR 0 11
5223: PUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 4
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL_OW 72
5253: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5254: LD_ADDR_VAR 0 13
5258: PUSH
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 1
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 24
5279: PUSH
5280: LD_INT 1000
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PPUSH
5295: CALL_OW 72
5299: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5300: LD_ADDR_VAR 0 15
5304: PUSH
5305: LD_INT 9
5307: PPUSH
5308: CALL_OW 435
5312: ST_TO_ADDR
// if not ignorePath then
5313: LD_VAR 0 3
5317: NOT
5318: IFFALSE 6300
// begin for unit in attackUnits do
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: FOR_IN
5331: IFFALSE 6074
// begin if path and not startAttacks then
5333: LD_VAR 0 2
5337: PUSH
5338: LD_VAR 0 21
5342: NOT
5343: AND
5344: IFFALSE 6063
// begin i = 1 ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5354: LD_ADDR_VAR 0 15
5358: PUSH
5359: LD_INT 9
5361: PPUSH
5362: CALL_OW 435
5366: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5367: LD_ADDR_VAR 0 18
5371: PUSH
5372: LD_INT 81
5374: PUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 255
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PPUSH
5394: LD_VAR 0 8
5398: PPUSH
5399: CALL_OW 74
5403: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5404: LD_ADDR_VAR 0 19
5408: PUSH
5409: LD_VAR 0 15
5413: PPUSH
5414: LD_VAR 0 8
5418: PPUSH
5419: CALL_OW 250
5423: PPUSH
5424: LD_VAR 0 8
5428: PPUSH
5429: CALL_OW 251
5433: PPUSH
5434: CALL_OW 439
5438: ST_TO_ADDR
// if damageUnits and medics then
5439: LD_VAR 0 13
5443: PUSH
5444: LD_VAR 0 11
5448: AND
5449: IFFALSE 5471
// ComHeal ( medics , damageUnits [ 1 ] ) else
5451: LD_VAR 0 11
5455: PPUSH
5456: LD_VAR 0 13
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 128
5469: GO 5514
// if medics then
5471: LD_VAR 0 11
5475: IFFALSE 5514
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5477: LD_VAR 0 11
5481: PPUSH
5482: LD_VAR 0 9
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: PPUSH
5491: CALL_OW 250
5495: PPUSH
5496: LD_VAR 0 9
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: CALL_OW 251
5509: PPUSH
5510: CALL_OW 111
// if not HasTask ( unit ) then
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 314
5523: NOT
5524: IFFALSE 5763
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5526: LD_ADDR_VAR 0 19
5530: PUSH
5531: LD_VAR 0 15
5535: PPUSH
5536: LD_VAR 0 8
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 8
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: CALL_OW 439
5560: ST_TO_ADDR
// if i > crates then
5561: LD_VAR 0 7
5565: PUSH
5566: LD_VAR 0 15
5570: GREATER
5571: IFFALSE 5581
// i = 1 ;
5573: LD_ADDR_VAR 0 7
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5581: LD_VAR 0 18
5585: PUSH
5586: LD_VAR 0 19
5590: AND
5591: IFFALSE 5706
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5593: LD_VAR 0 8
5597: PPUSH
5598: LD_VAR 0 18
5602: PPUSH
5603: CALL_OW 250
5607: PPUSH
5608: LD_VAR 0 18
5612: PPUSH
5613: CALL_OW 251
5617: PPUSH
5618: CALL_OW 297
5622: PUSH
5623: LD_VAR 0 8
5627: PPUSH
5628: LD_VAR 0 19
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 19
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 297
5650: LESS
5651: IFFALSE 5669
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5653: LD_VAR 0 9
5657: PPUSH
5658: LD_VAR 0 18
5662: PPUSH
5663: CALL_OW 115
5667: GO 5704
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5669: LD_VAR 0 9
5673: PPUSH
5674: LD_VAR 0 15
5678: PUSH
5679: LD_VAR 0 7
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 15
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: PLUS
5698: ARRAY
5699: PPUSH
5700: CALL_OW 116
// end else
5704: GO 5763
// if crates then
5706: LD_VAR 0 15
5710: IFFALSE 5749
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5712: LD_VAR 0 9
5716: PPUSH
5717: LD_VAR 0 15
5721: PUSH
5722: LD_VAR 0 7
5726: ARRAY
5727: PPUSH
5728: LD_VAR 0 15
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: ARRAY
5742: PPUSH
5743: CALL_OW 116
5747: GO 5763
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5749: LD_VAR 0 9
5753: PPUSH
5754: LD_VAR 0 18
5758: PPUSH
5759: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5763: LD_INT 35
5765: PPUSH
5766: CALL_OW 67
// if path then
5770: LD_VAR 0 2
5774: IFFALSE 5860
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5776: LD_ADDR_VAR 0 16
5780: PUSH
5781: LD_VAR 0 8
5785: PPUSH
5786: LD_VAR 0 2
5790: PPUSH
5791: CALL 7190 0 2
5795: ST_TO_ADDR
// if agressiveMove then
5796: LD_VAR 0 4
5800: IFFALSE 5831
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5802: LD_VAR 0 9
5806: PPUSH
5807: LD_VAR 0 16
5811: PUSH
5812: LD_INT 1
5814: ARRAY
5815: PPUSH
5816: LD_VAR 0 16
5820: PUSH
5821: LD_INT 2
5823: ARRAY
5824: PPUSH
5825: CALL_OW 114
5829: GO 5858
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5831: LD_VAR 0 9
5835: PPUSH
5836: LD_VAR 0 16
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 16
5849: PUSH
5850: LD_INT 2
5852: ARRAY
5853: PPUSH
5854: CALL_OW 111
// end else
5858: GO 5868
// startAttacks = true ;
5860: LD_ADDR_VAR 0 21
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// i = i + 2 ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_INT 2
5880: PLUS
5881: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5882: LD_VAR 0 8
5886: PPUSH
5887: CALL_OW 314
5891: NOT
5892: PUSH
5893: LD_INT 22
5895: PUSH
5896: LD_VAR 0 8
5900: PPUSH
5901: CALL_OW 255
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 92
5912: PUSH
5913: LD_VAR 0 16
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 16
5926: PUSH
5927: LD_INT 2
5929: ARRAY
5930: PUSH
5931: LD_INT 4
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: LD_INT 3
5951: GREATER
5952: AND
5953: PUSH
5954: LD_VAR 0 21
5958: NOT
5959: AND
5960: IFFALSE 5354
// for i := 1 to path do
5962: LD_ADDR_VAR 0 7
5966: PUSH
5967: DOUBLE
5968: LD_INT 1
5970: DEC
5971: ST_TO_ADDR
5972: LD_VAR 0 2
5976: PUSH
5977: FOR_TO
5978: IFFALSE 6061
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5980: LD_VAR 0 2
5984: PUSH
5985: LD_VAR 0 7
5989: ARRAY
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_VAR 0 16
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: EQUAL
6004: PUSH
6005: LD_VAR 0 2
6009: PUSH
6010: LD_VAR 0 7
6014: ARRAY
6015: PUSH
6016: LD_INT 2
6018: ARRAY
6019: PUSH
6020: LD_VAR 0 16
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: EQUAL
6029: AND
6030: IFFALSE 6059
// begin path = path diff [ path [ i ] ] ;
6032: LD_ADDR_VAR 0 2
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: LD_VAR 0 7
6051: ARRAY
6052: PUSH
6053: EMPTY
6054: LIST
6055: DIFF
6056: ST_TO_ADDR
// break ;
6057: GO 6061
// end ;
6059: GO 5977
6061: POP
6062: POP
// end ; if not path then
6063: LD_VAR 0 2
6067: NOT
6068: IFFALSE 6072
// break ;
6070: GO 6074
// end ;
6072: GO 5330
6074: POP
6075: POP
// repeat unitsReachPathEnd = 0 ;
6076: LD_ADDR_VAR 0 20
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// for attackUnit in attackUnits do
6084: LD_ADDR_VAR 0 10
6088: PUSH
6089: LD_VAR 0 9
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6268
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_VAR 0 17
6106: PUSH
6107: LD_INT 1
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 17
6115: PUSH
6116: LD_INT 2
6118: ARRAY
6119: PPUSH
6120: CALL_OW 297
6124: PUSH
6125: LD_INT 7
6127: LESS
6128: NOT
6129: PUSH
6130: LD_VAR 0 10
6134: PPUSH
6135: CALL_OW 110
6139: PUSH
6140: LD_INT 0
6142: EQUAL
6143: AND
6144: IFFALSE 6210
// begin if agressiveMove then
6146: LD_VAR 0 4
6150: IFFALSE 6181
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6152: LD_VAR 0 10
6156: PPUSH
6157: LD_VAR 0 17
6161: PUSH
6162: LD_INT 1
6164: ARRAY
6165: PPUSH
6166: LD_VAR 0 17
6170: PUSH
6171: LD_INT 2
6173: ARRAY
6174: PPUSH
6175: CALL_OW 114
6179: GO 6208
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6181: LD_VAR 0 10
6185: PPUSH
6186: LD_VAR 0 17
6190: PUSH
6191: LD_INT 1
6193: ARRAY
6194: PPUSH
6195: LD_VAR 0 17
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PPUSH
6204: CALL_OW 111
// end else
6208: GO 6237
// if GetTag ( attackUnit ) = 0 then
6210: LD_VAR 0 10
6214: PPUSH
6215: CALL_OW 110
6219: PUSH
6220: LD_INT 0
6222: EQUAL
6223: IFFALSE 6237
// SetTag ( attackUnit , 1 ) ;
6225: LD_VAR 0 10
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: CALL_OW 109
// if GetTag ( unit ) = 1 then
6237: LD_VAR 0 8
6241: PPUSH
6242: CALL_OW 110
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6266
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6252: LD_ADDR_VAR 0 20
6256: PUSH
6257: LD_VAR 0 20
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6094
6268: POP
6269: POP
// wait ( 0 0$1 ) ;
6270: LD_INT 35
6272: PPUSH
6273: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6277: LD_VAR 0 20
6281: PUSH
6282: LD_VAR 0 9
6286: PUSH
6287: LD_INT 3
6289: MINUS
6290: GREATER
6291: IFFALSE 6076
// wait ( 0 0$10 ) ;
6293: LD_INT 350
6295: PPUSH
6296: CALL_OW 67
// end ; for attackUnit in attackUnits do
6300: LD_ADDR_VAR 0 10
6304: PUSH
6305: LD_VAR 0 9
6309: PUSH
6310: FOR_IN
6311: IFFALSE 6327
// SetTag ( attackUnit , 2 ) ;
6313: LD_VAR 0 10
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 109
6325: GO 6310
6327: POP
6328: POP
// startAttacks = true ;
6329: LD_ADDR_VAR 0 21
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// if startAttacks then
6337: LD_VAR 0 21
6341: IFFALSE 7160
// begin repeat wait ( 0 0$1 ) ;
6343: LD_INT 35
6345: PPUSH
6346: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6350: LD_ADDR_VAR 0 11
6354: PUSH
6355: LD_VAR 0 1
6359: PPUSH
6360: LD_INT 50
6362: PUSH
6363: EMPTY
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 72
6384: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6385: LD_ADDR_VAR 0 13
6389: PUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 3
6417: PUSH
6418: LD_INT 24
6420: PUSH
6421: LD_INT 1000
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 72
6441: ST_TO_ADDR
// if damageUnits and medics then
6442: LD_VAR 0 13
6446: PUSH
6447: LD_VAR 0 11
6451: AND
6452: IFFALSE 6474
// ComHeal ( medics , damageUnits [ 1 ] ) else
6454: LD_VAR 0 11
6458: PPUSH
6459: LD_VAR 0 13
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: CALL_OW 128
6472: GO 6524
// if medics and not damageUnits then
6474: LD_VAR 0 11
6478: PUSH
6479: LD_VAR 0 13
6483: NOT
6484: AND
6485: IFFALSE 6524
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6487: LD_VAR 0 11
6491: PPUSH
6492: LD_VAR 0 9
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: CALL_OW 250
6505: PPUSH
6506: LD_VAR 0 9
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: PPUSH
6515: CALL_OW 251
6519: PPUSH
6520: CALL_OW 111
// for attackUnit in attackUnits do
6524: LD_ADDR_VAR 0 10
6528: PUSH
6529: LD_VAR 0 9
6533: PUSH
6534: FOR_IN
6535: IFFALSE 7151
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6537: LD_ADDR_VAR 0 22
6541: PUSH
6542: LD_INT 81
6544: PUSH
6545: LD_VAR 0 10
6549: PPUSH
6550: CALL_OW 255
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PPUSH
6564: LD_VAR 0 10
6568: PPUSH
6569: CALL_OW 74
6573: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6574: LD_ADDR_VAR 0 23
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_VAR 0 10
6586: PPUSH
6587: CALL_OW 255
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 59
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 21
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: PPUSH
6643: LD_VAR 0 10
6647: PPUSH
6648: CALL_OW 74
6652: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6653: LD_VAR 0 10
6657: PPUSH
6658: CALL_OW 110
6662: PUSH
6663: LD_INT 2
6665: EQUAL
6666: IFFALSE 6826
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6668: LD_VAR 0 10
6672: PPUSH
6673: LD_VAR 0 22
6677: PPUSH
6678: CALL_OW 296
6682: PUSH
6683: LD_INT 10
6685: PLUS
6686: PUSH
6687: LD_VAR 0 10
6691: PPUSH
6692: LD_VAR 0 23
6696: PPUSH
6697: CALL_OW 296
6701: LESS
6702: IFFALSE 6720
// ComAttackUnit ( attackUnit , target1 ) else
6704: LD_VAR 0 10
6708: PPUSH
6709: LD_VAR 0 22
6713: PPUSH
6714: CALL_OW 115
6718: GO 6734
// ComAttackUnit ( attackUnit , target2 ) ;
6720: LD_VAR 0 10
6724: PPUSH
6725: LD_VAR 0 23
6729: PPUSH
6730: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6734: LD_VAR 0 10
6738: PPUSH
6739: CALL_OW 256
6743: PUSH
6744: LD_INT 650
6746: LESS
6747: PUSH
6748: LD_VAR 0 10
6752: PPUSH
6753: CALL_OW 247
6757: PUSH
6758: LD_INT 2
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 10
6767: PPUSH
6768: CALL_OW 263
6772: PUSH
6773: LD_INT 1
6775: EQUAL
6776: AND
6777: IFFALSE 6826
// begin SetTag ( attackUnit , 3 ) ;
6779: LD_VAR 0 10
6783: PPUSH
6784: LD_INT 3
6786: PPUSH
6787: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6791: LD_VAR 0 10
6795: PPUSH
6796: CALL_OW 313
6800: PUSH
6801: LD_INT 1
6803: ARRAY
6804: PPUSH
6805: LD_INT 3
6807: PPUSH
6808: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6812: LD_VAR 0 10
6816: PPUSH
6817: LD_VAR 0 5
6821: PPUSH
6822: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6826: LD_VAR 0 10
6830: PPUSH
6831: LD_VAR 0 5
6835: PPUSH
6836: CALL_OW 308
6840: PUSH
6841: LD_VAR 0 10
6845: PPUSH
6846: CALL_OW 110
6850: PUSH
6851: LD_INT 3
6853: EQUAL
6854: AND
6855: PUSH
6856: LD_VAR 0 10
6860: PPUSH
6861: CALL_OW 313
6865: AND
6866: IFFALSE 6939
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6868: LD_ADDR_VAR 0 14
6872: PUSH
6873: LD_VAR 0 10
6877: PPUSH
6878: CALL_OW 313
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: ST_TO_ADDR
// if not driver in mechanics then
6887: LD_VAR 0 14
6891: PUSH
6892: LD_VAR 0 12
6896: IN
6897: NOT
6898: IFFALSE 6916
// mechanics = mechanics ^ driver ;
6900: LD_ADDR_VAR 0 12
6904: PUSH
6905: LD_VAR 0 12
6909: PUSH
6910: LD_VAR 0 14
6914: ADD
6915: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6916: LD_VAR 0 14
6920: PPUSH
6921: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6925: LD_VAR 0 14
6929: PPUSH
6930: LD_VAR 0 10
6934: PPUSH
6935: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6939: LD_VAR 0 10
6943: PPUSH
6944: CALL_OW 256
6948: PUSH
6949: LD_INT 1000
6951: EQUAL
6952: IFFALSE 7070
// begin SetTag ( attackUnit , 2 ) ;
6954: LD_VAR 0 10
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6966: LD_VAR 0 10
6970: PPUSH
6971: CALL_OW 247
6975: PUSH
6976: LD_INT 2
6978: EQUAL
6979: PUSH
6980: LD_VAR 0 10
6984: PPUSH
6985: CALL_OW 263
6989: PUSH
6990: LD_INT 1
6992: EQUAL
6993: AND
6994: PUSH
6995: LD_VAR 0 10
6999: PPUSH
7000: CALL_OW 313
7004: NOT
7005: AND
7006: IFFALSE 7070
// begin SetFuel ( attackUnit , 100 ) ;
7008: LD_VAR 0 10
7012: PPUSH
7013: LD_INT 100
7015: PPUSH
7016: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
7020: LD_VAR 0 12
7024: PPUSH
7025: LD_VAR 0 10
7029: PPUSH
7030: CALL_OW 74
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7044: LD_ADDR_VAR 0 12
7048: PUSH
7049: LD_VAR 0 12
7053: PUSH
7054: LD_VAR 0 12
7058: PPUSH
7059: LD_VAR 0 10
7063: PPUSH
7064: CALL_OW 74
7068: DIFF
7069: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7070: LD_ADDR_VAR 0 8
7074: PUSH
7075: LD_VAR 0 12
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7147
// begin if not IsInArea ( unit , retreatArea ) then
7083: LD_VAR 0 8
7087: PPUSH
7088: LD_VAR 0 5
7092: PPUSH
7093: CALL_OW 308
7097: NOT
7098: IFFALSE 7114
// ComMoveToArea ( unit , retreatArea ) ;
7100: LD_VAR 0 8
7104: PPUSH
7105: LD_VAR 0 5
7109: PPUSH
7110: CALL_OW 113
// if GetLives ( unit ) < 250 then
7114: LD_VAR 0 8
7118: PPUSH
7119: CALL_OW 256
7123: PUSH
7124: LD_INT 250
7126: LESS
7127: IFFALSE 7145
// mechanics = mechanics diff unit ;
7129: LD_ADDR_VAR 0 12
7133: PUSH
7134: LD_VAR 0 12
7138: PUSH
7139: LD_VAR 0 8
7143: DIFF
7144: ST_TO_ADDR
// end ;
7145: GO 7080
7147: POP
7148: POP
// end ;
7149: GO 6534
7151: POP
7152: POP
// until not attackUnits ;
7153: LD_VAR 0 9
7157: NOT
7158: IFFALSE 6343
// end ; wait ( 0 0$1 ) ;
7160: LD_INT 35
7162: PPUSH
7163: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: LD_INT 50
7174: PUSH
7175: EMPTY
7176: LIST
7177: PPUSH
7178: CALL_OW 72
7182: NOT
7183: IFFALSE 5166
// end ;
7185: LD_VAR 0 6
7189: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7195: LD_ADDR_VAR 0 5
7199: PUSH
7200: LD_VAR 0 2
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 1
7220: ARRAY
7221: PUSH
7222: LD_INT 2
7224: ARRAY
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// for i := 2 to path do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 2
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 2
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7386
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7248: LD_VAR 0 1
7252: PPUSH
7253: LD_VAR 0 2
7257: PUSH
7258: LD_VAR 0 4
7262: ARRAY
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_VAR 0 4
7277: ARRAY
7278: PUSH
7279: LD_INT 2
7281: ARRAY
7282: PPUSH
7283: CALL_OW 297
7287: PUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: LD_VAR 0 5
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PPUSH
7302: LD_VAR 0 5
7306: PUSH
7307: LD_INT 2
7309: ARRAY
7310: PPUSH
7311: CALL_OW 297
7315: LESS
7316: IFFALSE 7384
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7318: LD_ADDR_VAR 0 5
7322: PUSH
7323: LD_VAR 0 5
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 4
7340: ARRAY
7341: PUSH
7342: LD_INT 1
7344: ARRAY
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_VAR 0 4
7373: ARRAY
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PPUSH
7379: CALL_OW 1
7383: ST_TO_ADDR
// end ; end ;
7384: GO 7245
7386: POP
7387: POP
// result = nearPosition ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 5
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 3
7402: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7403: LD_EXP 58
7407: PPUSH
7408: CALL_OW 274
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 275
7420: PUSH
7421: LD_INT 0
7423: GREATER
7424: IFFALSE 7530
7426: GO 7428
7428: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7429: LD_EXP 57
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 72
7448: PPUSH
7449: LD_INT 31
7451: PPUSH
7452: LD_INT 105
7454: PPUSH
7455: LD_INT 51
7457: PPUSH
7458: LD_INT 3
7460: PPUSH
7461: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7465: LD_EXP 57
7469: PPUSH
7470: LD_INT 25
7472: PUSH
7473: LD_INT 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 72
7484: PPUSH
7485: LD_INT 31
7487: PPUSH
7488: LD_INT 114
7490: PPUSH
7491: LD_INT 58
7493: PPUSH
7494: LD_INT 3
7496: PPUSH
7497: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7501: LD_EXP 57
7505: PPUSH
7506: LD_INT 25
7508: PUSH
7509: LD_INT 2
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 72
7520: PPUSH
7521: LD_EXP 58
7525: PPUSH
7526: CALL_OW 180
// end ; end_of_file
7530: END
// export function Lose_Burlak ; begin
7531: LD_INT 0
7533: PPUSH
// YouLost ( Burlak ) ;
7534: LD_STRING Burlak
7536: PPUSH
7537: CALL_OW 104
// end ;
7541: LD_VAR 0 1
7545: RET
// export function Lose_Gaydar ; begin
7546: LD_INT 0
7548: PPUSH
// YouLost ( Gaydar ) ;
7549: LD_STRING Gaydar
7551: PPUSH
7552: CALL_OW 104
// end ;
7556: LD_VAR 0 1
7560: RET
// export function Lose_SelfAttack ; begin
7561: LD_INT 0
7563: PPUSH
// YouLost ( SelfAttack ) ;
7564: LD_STRING SelfAttack
7566: PPUSH
7567: CALL_OW 104
// end ;
7571: LD_VAR 0 1
7575: RET
// export function Lose_Arrest ; begin
7576: LD_INT 0
7578: PPUSH
// YouLost ( Arrest ) ;
7579: LD_STRING Arrest
7581: PPUSH
7582: CALL_OW 104
// end ;
7586: LD_VAR 0 1
7590: RET
// export function Lose_ArabBreakthrough ; begin
7591: LD_INT 0
7593: PPUSH
// YouLost ( ArabBreakthrough ) ;
7594: LD_STRING ArabBreakthrough
7596: PPUSH
7597: CALL_OW 104
// end ;
7601: LD_VAR 0 1
7605: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7606: LD_EXP 7
7610: NOT
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: NOT
7652: AND
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: NOT
7694: AND
7695: IFFALSE 7708
7697: GO 7699
7699: DISABLE
// begin enable ;
7700: ENABLE
// YouLost ( Engineer ) ;
7701: LD_STRING Engineer
7703: PPUSH
7704: CALL_OW 104
// end ; end_of_file
7708: END
// export function FinishMission ; begin
7709: LD_INT 0
7711: PPUSH
// SetRewards ;
7712: CALL 7733 0 0
// SavePlayerCharacters ;
7716: CALL 8158 0 0
// SaveGlobalVariables ;
7720: CALL 8386 0 0
// YouWin ;
7724: CALL_OW 103
// end ;
7728: LD_VAR 0 1
7732: RET
// function SetRewards ; var unitsToReward ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
// SetAchievements ;
7737: CALL 18539 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7741: LD_INT 22
7743: PUSH
7744: LD_INT 3
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 21
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PPUSH
7765: CALL_OW 69
7769: NOT
7770: IFFALSE 7784
// AddMedal ( Dismantle , 1 ) else
7772: LD_STRING Dismantle
7774: PPUSH
7775: LD_INT 1
7777: PPUSH
7778: CALL_OW 101
7782: GO 7795
// AddMedal ( Dismantle , - 1 ) ;
7784: LD_STRING Dismantle
7786: PPUSH
7787: LD_INT 1
7789: NEG
7790: PPUSH
7791: CALL_OW 101
// if killedArabianUnits >= 25 then
7795: LD_EXP 22
7799: PUSH
7800: LD_INT 25
7802: GREATEREQUAL
7803: IFFALSE 7825
// begin AddMedal ( EnemyLosses , 1 ) ;
7805: LD_STRING EnemyLosses
7807: PPUSH
7808: LD_INT 1
7810: PPUSH
7811: CALL_OW 101
// heikeHeavyLosses = true ;
7815: LD_ADDR_EXP 4
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// end else
7823: GO 7836
// AddMedal ( EnemyLosses , - 1 ) ;
7825: LD_STRING EnemyLosses
7827: PPUSH
7828: LD_INT 1
7830: NEG
7831: PPUSH
7832: CALL_OW 101
// if not lostUnits then
7836: LD_EXP 24
7840: NOT
7841: IFFALSE 7855
// AddMedal ( LittleLosses , 1 ) else
7843: LD_STRING LittleLosses
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 101
7853: GO 7866
// AddMedal ( LittleLosses , - 1 ) ;
7855: LD_STRING LittleLosses
7857: PPUSH
7858: LD_INT 1
7860: NEG
7861: PPUSH
7862: CALL_OW 101
// GiveMedals ( Main ) ;
7866: LD_STRING Main
7868: PPUSH
7869: CALL_OW 102
// unitsToReward = [ ] ;
7873: LD_ADDR_VAR 0 2
7877: PUSH
7878: EMPTY
7879: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7880: LD_EXP 42
7884: PPUSH
7885: CALL_OW 255
7889: PUSH
7890: LD_INT 3
7892: EQUAL
7893: IFFALSE 7911
// unitsToReward = unitsToReward ^ Burlak ;
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 2
7904: PUSH
7905: LD_EXP 42
7909: ADD
7910: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7911: LD_EXP 43
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 3
7923: EQUAL
7924: IFFALSE 7942
// unitsToReward = unitsToReward ^ Gnyevko ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_EXP 43
7940: ADD
7941: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7942: LD_EXP 44
7946: PPUSH
7947: CALL_OW 255
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: IFFALSE 7973
// unitsToReward = unitsToReward ^ Kirilenkova ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 2
7966: PUSH
7967: LD_EXP 44
7971: ADD
7972: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7973: LD_EXP 45
7977: PPUSH
7978: CALL_OW 255
7982: PUSH
7983: LD_INT 3
7985: EQUAL
7986: IFFALSE 8004
// unitsToReward = unitsToReward ^ Kovalyuk ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_EXP 45
8002: ADD
8003: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
8004: LD_EXP 46
8008: PPUSH
8009: CALL_OW 255
8013: PUSH
8014: LD_INT 3
8016: EQUAL
8017: IFFALSE 8035
// unitsToReward = unitsToReward ^ Belkov ;
8019: LD_ADDR_VAR 0 2
8023: PUSH
8024: LD_VAR 0 2
8028: PUSH
8029: LD_EXP 46
8033: ADD
8034: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8035: LD_EXP 47
8039: PPUSH
8040: CALL_OW 255
8044: PUSH
8045: LD_INT 3
8047: EQUAL
8048: IFFALSE 8066
// unitsToReward = unitsToReward ^ Belkov2 ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: LD_VAR 0 2
8059: PUSH
8060: LD_EXP 47
8064: ADD
8065: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8066: LD_EXP 48
8070: PPUSH
8071: CALL_OW 255
8075: PUSH
8076: LD_INT 3
8078: EQUAL
8079: IFFALSE 8097
// unitsToReward = unitsToReward ^ Scholtze ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_EXP 48
8095: ADD
8096: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8097: LD_EXP 49
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: IFFALSE 8128
// unitsToReward = unitsToReward ^ Kuzmov ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_EXP 49
8126: ADD
8127: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_EXP 62
8142: ADD
8143: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 43
// end ;
8153: LD_VAR 0 1
8157: RET
// function SavePlayerCharacters ; var othersYour ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8162: LD_EXP 42
8166: PPUSH
8167: LD_STRING 04_Burlak
8169: PPUSH
8170: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8174: LD_EXP 43
8178: PPUSH
8179: CALL_OW 255
8183: PUSH
8184: LD_INT 3
8186: EQUAL
8187: IFFALSE 8201
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8189: LD_EXP 43
8193: PPUSH
8194: LD_STRING 04_Gnyevko
8196: PPUSH
8197: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8201: LD_EXP 45
8205: PPUSH
8206: CALL_OW 255
8210: PUSH
8211: LD_INT 3
8213: EQUAL
8214: IFFALSE 8228
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8216: LD_EXP 45
8220: PPUSH
8221: LD_STRING 04_Kovalyuk
8223: PPUSH
8224: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8228: LD_EXP 44
8232: PPUSH
8233: CALL_OW 255
8237: PUSH
8238: LD_INT 3
8240: EQUAL
8241: IFFALSE 8255
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8243: LD_EXP 44
8247: PPUSH
8248: LD_STRING 04_Kirilenkova
8250: PPUSH
8251: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8255: LD_EXP 48
8259: PPUSH
8260: CALL_OW 255
8264: PUSH
8265: LD_INT 3
8267: EQUAL
8268: IFFALSE 8282
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8270: LD_EXP 48
8274: PPUSH
8275: LD_STRING 04_Scholtze
8277: PPUSH
8278: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8282: LD_EXP 46
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_INT 3
8294: EQUAL
8295: IFFALSE 8309
// SaveCharacters ( Belkov , 04_Belkov ) ;
8297: LD_EXP 46
8301: PPUSH
8302: LD_STRING 04_Belkov
8304: PPUSH
8305: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8309: LD_EXP 47
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: IFFALSE 8336
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8324: LD_EXP 47
8328: PPUSH
8329: LD_STRING 04_Belkov2
8331: PPUSH
8332: CALL_OW 38
// if IsOK ( Kuzmov ) then
8336: LD_EXP 49
8340: PPUSH
8341: CALL_OW 302
8345: IFFALSE 8359
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8347: LD_EXP 49
8351: PPUSH
8352: LD_STRING 04_Kuzmov
8354: PPUSH
8355: CALL_OW 38
// othersYour = randomsToSave ;
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_EXP 62
8368: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8369: LD_EXP 62
8373: PPUSH
8374: LD_STRING 04_other_survivors
8376: PPUSH
8377: CALL_OW 38
// end ;
8381: LD_VAR 0 1
8385: RET
// function SaveGlobalVariables ; begin
8386: LD_INT 0
8388: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8389: LD_EXP 4
8393: PPUSH
8394: LD_STRING 04_HeikeHeavyLosses_1
8396: PPUSH
8397: CALL_OW 39
// end ; end_of_file
8401: LD_VAR 0 1
8405: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 255
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 266
8429: PUSH
8430: LD_INT 0
8432: EQUAL
8433: AND
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_INT 5
8442: PPUSH
8443: CALL_OW 308
8447: NOT
8448: AND
8449: IFFALSE 8460
// Dial_DepotInWrongPlace ( building ) ;
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL 11049 0 1
// end ;
8460: PPOPN 2
8462: END
// on BuildingComplete ( building ) do var i , cargo ;
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8467: LD_VAR 0 1
8471: PPUSH
8472: CALL_OW 255
8476: PUSH
8477: LD_INT 3
8479: EQUAL
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 266
8490: PUSH
8491: LD_INT 0
8493: EQUAL
8494: AND
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: LD_INT 5
8503: PPUSH
8504: CALL_OW 308
8508: AND
8509: PUSH
8510: LD_EXP 8
8514: NOT
8515: AND
8516: PUSH
8517: LD_EXP 9
8521: NOT
8522: AND
8523: IFFALSE 8549
// begin namedBase = true ;
8525: LD_ADDR_EXP 9
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_STRING chuikov
8540: PPUSH
8541: CALL_OW 500
// Dial_FinishDepot ;
8545: CALL 11323 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8549: LD_VAR 0 1
8553: PPUSH
8554: CALL_OW 255
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 266
8572: PUSH
8573: LD_INT 32
8575: EQUAL
8576: AND
8577: IFFALSE 8593
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8579: LD_ADDR_EXP 25
8583: PUSH
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 1
8591: PLUS
8592: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 255
8602: PUSH
8603: LD_INT 6
8605: EQUAL
8606: PUSH
8607: LD_VAR 0 1
8611: PPUSH
8612: CALL_OW 266
8616: PUSH
8617: LD_INT 0
8619: EQUAL
8620: AND
8621: IFFALSE 8820
// begin secondBaseDepot = building ;
8623: LD_ADDR_EXP 58
8627: PUSH
8628: LD_VAR 0 1
8632: ST_TO_ADDR
// uc_side = 6 ;
8633: LD_ADDR_OWVAR 20
8637: PUSH
8638: LD_INT 6
8640: ST_TO_ADDR
// uc_nation = nation_russian ;
8641: LD_ADDR_OWVAR 21
8645: PUSH
8646: LD_INT 3
8648: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8649: LD_ADDR_OWVAR 37
8653: PUSH
8654: LD_INT 21
8656: ST_TO_ADDR
// vc_control = control_manual ;
8657: LD_ADDR_OWVAR 38
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// vc_engine = engine_combustion ;
8665: LD_ADDR_OWVAR 39
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8673: LD_ADDR_OWVAR 40
8677: PUSH
8678: LD_INT 51
8680: ST_TO_ADDR
// cargo = CreateVehicle ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: CALL_OW 45
8690: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8691: LD_VAR 0 3
8695: PPUSH
8696: LD_INT 3
8698: PPUSH
8699: LD_INT 0
8701: PPUSH
8702: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8706: LD_VAR 0 3
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 100
8716: PPUSH
8717: CALL_OW 291
// ComGive ( cargo , building ) ;
8721: LD_VAR 0 3
8725: PPUSH
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8735: LD_INT 0
8737: PPUSH
8738: LD_INT 2
8740: PPUSH
8741: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8745: CALL_OW 44
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: DOUBLE
8765: LD_INT 10
8767: DEC
8768: ST_TO_ADDR
8769: LD_EXP 34
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8818
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_EXP 34
8786: PUSH
8787: LD_VAR 0 2
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_EXP 34
8801: PUSH
8802: LD_VAR 0 2
8806: ARRAY
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: PPUSH
8812: CALL_OW 171
8816: GO 8774
8818: POP
8819: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 255
8829: PUSH
8830: LD_INT 6
8832: EQUAL
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 266
8843: PUSH
8844: LD_INT 31
8846: EQUAL
8847: AND
8848: IFFALSE 8893
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8850: LD_EXP 57
8854: PPUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 56
8867: PUSH
8868: EMPTY
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 120
// end ;
8893: PPOPN 3
8895: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 266
8905: PUSH
8906: LD_INT 7
8908: EQUAL
8909: PUSH
8910: LD_EXP 15
8914: NOT
8915: AND
8916: IFFALSE 8922
// Dial_LabUpgraded ;
8918: CALL 11643 0 0
// end ;
8922: PPOPN 1
8924: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8925: LD_VAR 0 1
8929: PUSH
8930: LD_INT 3
8932: EQUAL
8933: PUSH
8934: LD_VAR 0 2
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: AND
8943: PUSH
8944: LD_VAR 0 1
8948: PUSH
8949: LD_INT 2
8951: EQUAL
8952: PUSH
8953: LD_VAR 0 2
8957: PUSH
8958: LD_INT 3
8960: EQUAL
8961: AND
8962: OR
8963: IFFALSE 8985
// begin if dial_contactBlock then
8965: LD_EXP 16
8969: IFFALSE 8973
// exit ;
8971: GO 9029
// dial_contactBlock = true ;
8973: LD_ADDR_EXP 16
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// Dial_Contact ;
8981: CALL 13858 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8985: LD_VAR 0 1
8989: PUSH
8990: LD_INT 3
8992: EQUAL
8993: PUSH
8994: LD_VAR 0 2
8998: PUSH
8999: LD_INT 6
9001: EQUAL
9002: AND
9003: PUSH
9004: LD_VAR 0 1
9008: PUSH
9009: LD_INT 6
9011: EQUAL
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: LD_INT 3
9020: EQUAL
9021: AND
9022: OR
9023: IFFALSE 9029
// Lose_SelfAttack ;
9025: CALL 7561 0 0
// end ;
9029: PPOPN 2
9031: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9032: LD_VAR 0 1
9036: PUSH
9037: LD_EXP 42
9041: EQUAL
9042: IFFALSE 9048
// Lose_Burlak ;
9044: CALL 7531 0 0
// if unit = Gaydar then
9048: LD_VAR 0 1
9052: PUSH
9053: LD_EXP 54
9057: EQUAL
9058: IFFALSE 9064
// Lose_Gaydar ;
9060: CALL 7546 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9064: LD_VAR 0 1
9068: PPUSH
9069: CALL_OW 255
9073: PUSH
9074: LD_INT 3
9076: EQUAL
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 247
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: AND
9092: IFFALSE 9108
// lostUnits = lostUnits + 1 ;
9094: LD_ADDR_EXP 24
9098: PUSH
9099: LD_EXP 24
9103: PUSH
9104: LD_INT 1
9106: PLUS
9107: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 255
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: PUSH
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 247
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: AND
9136: PUSH
9137: LD_EXP 54
9141: PPUSH
9142: CALL_OW 305
9146: NOT
9147: AND
9148: IFFALSE 9164
// killedArabianUnits = killedArabianUnits + 1 ;
9150: LD_ADDR_EXP 22
9154: PUSH
9155: LD_EXP 22
9159: PUSH
9160: LD_INT 1
9162: PLUS
9163: ST_TO_ADDR
// if unit in firstAttackGroup then
9164: LD_VAR 0 1
9168: PUSH
9169: LD_EXP 64
9173: IN
9174: IFFALSE 9192
// firstAttackGroup = firstAttackGroup diff unit ;
9176: LD_ADDR_EXP 64
9180: PUSH
9181: LD_EXP 64
9185: PUSH
9186: LD_VAR 0 1
9190: DIFF
9191: ST_TO_ADDR
// end ;
9192: PPOPN 1
9194: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9195: LD_VAR 0 2
9199: PUSH
9200: LD_INT 6
9202: EQUAL
9203: IFFALSE 9217
// SetSide ( building , 6 ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: LD_INT 6
9212: PPUSH
9213: CALL_OW 235
// end ;
9217: PPOPN 3
9219: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9220: LD_INT 0
9222: PPUSH
9223: PPUSH
9224: PPUSH
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_INT 22
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 51
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: PUSH
9281: FOR_IN
9282: IFFALSE 9404
// if GetTaskList ( i ) > 0 then
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 437
9293: PUSH
9294: LD_INT 0
9296: GREATER
9297: IFFALSE 9402
// for j = 1 to GetTaskList ( i ) do
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 437
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9400
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9322: LD_ADDR_VAR 0 4
9326: PUSH
9327: LD_VAR 0 2
9331: PPUSH
9332: CALL_OW 437
9336: PUSH
9337: LD_VAR 0 3
9341: ARRAY
9342: PUSH
9343: LD_INT 4
9345: ARRAY
9346: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 255
9356: PUSH
9357: LD_INT 6
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 2
9365: PPUSH
9366: CALL_OW 437
9370: PUSH
9371: LD_VAR 0 3
9375: ARRAY
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PUSH
9381: LD_STRING <
9383: EQUAL
9384: AND
9385: IFFALSE 9398
// SetTaskList ( i , [ ] ) ;
9387: LD_VAR 0 2
9391: PPUSH
9392: EMPTY
9393: PPUSH
9394: CALL_OW 446
// end ;
9398: GO 9319
9400: POP
9401: POP
9402: GO 9281
9404: POP
9405: POP
// end ; end_of_file
9406: PPOPN 8
9408: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9409: LD_INT 0
9411: PPUSH
9412: PPUSH
// if exist_mode then
9413: LD_VAR 0 2
9417: IFFALSE 9442
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_EXP 30
9428: PUSH
9429: LD_VAR 0 1
9433: STR
9434: PPUSH
9435: CALL_OW 34
9439: ST_TO_ADDR
9440: GO 9457
// unit := NewCharacter ( ident ) ;
9442: LD_ADDR_VAR 0 5
9446: PUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: CALL_OW 25
9456: ST_TO_ADDR
// if class then
9457: LD_VAR 0 3
9461: IFFALSE 9477
// SetClass ( unit , class ) ;
9463: LD_VAR 0 5
9467: PPUSH
9468: LD_VAR 0 3
9472: PPUSH
9473: CALL_OW 336
// result := unit ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_VAR 0 5
9486: ST_TO_ADDR
// end ;
9487: LD_VAR 0 4
9491: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9492: LD_INT 0
9494: PPUSH
9495: PPUSH
// for unit in units do
9496: LD_ADDR_VAR 0 5
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9530
// PlaceUnitArea ( unit , area , spawnMode ) ;
9509: LD_VAR 0 5
9513: PPUSH
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: CALL_OW 49
9528: GO 9506
9530: POP
9531: POP
// end ;
9532: LD_VAR 0 4
9536: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9537: LD_INT 0
9539: PPUSH
9540: PPUSH
9541: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_VAR 0 1
9551: PUSH
9552: LD_EXP 42
9556: PUSH
9557: LD_EXP 43
9561: PUSH
9562: LD_EXP 46
9566: PUSH
9567: LD_EXP 47
9571: PUSH
9572: LD_EXP 44
9576: PUSH
9577: LD_EXP 45
9581: PUSH
9582: LD_EXP 48
9586: PUSH
9587: LD_EXP 49
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: DIFF
9602: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 1
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: ST_TO_ADDR
// if radio then
9627: LD_VAR 0 4
9631: IFFALSE 9680
// begin if GetSex ( speaker ) = sex_male then
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL_OW 258
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9664
// SayRadio ( speaker , dialogMID ) else
9648: LD_VAR 0 7
9652: PPUSH
9653: LD_VAR 0 2
9657: PPUSH
9658: CALL_OW 94
9662: GO 9678
// SayRadio ( speaker , dialogFID ) ;
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: CALL_OW 94
// end else
9678: GO 9725
// begin if GetSex ( speaker ) = sex_male then
9680: LD_VAR 0 7
9684: PPUSH
9685: CALL_OW 258
9689: PUSH
9690: LD_INT 1
9692: EQUAL
9693: IFFALSE 9711
// Say ( speaker , dialogMID ) else
9695: LD_VAR 0 7
9699: PPUSH
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 88
9709: GO 9725
// Say ( speaker , dialogFID ) ;
9711: LD_VAR 0 7
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: CALL_OW 88
// end ; result := speaker ;
9725: LD_ADDR_VAR 0 5
9729: PUSH
9730: LD_VAR 0 7
9734: ST_TO_ADDR
// end ;
9735: LD_VAR 0 5
9739: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9740: LD_INT 0
9742: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 255
9752: PUSH
9753: LD_VAR 0 3
9757: EQUAL
9758: PUSH
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 302
9768: AND
9769: IFFALSE 9791
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9771: LD_VAR 0 1
9775: PPUSH
9776: LD_EXP 29
9780: PUSH
9781: LD_VAR 0 2
9785: STR
9786: PPUSH
9787: CALL_OW 38
// end ;
9791: LD_VAR 0 4
9795: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
9800: PPUSH
// resultCharactersToSave = [ ] ;
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// for unit in characters do
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_VAR 0 1
9817: PUSH
9818: FOR_IN
9819: IFFALSE 9867
// if GetSide ( unit ) = side and IsOK ( unit ) then
9821: LD_VAR 0 5
9825: PPUSH
9826: CALL_OW 255
9830: PUSH
9831: LD_VAR 0 3
9835: EQUAL
9836: PUSH
9837: LD_VAR 0 5
9841: PPUSH
9842: CALL_OW 302
9846: AND
9847: IFFALSE 9865
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_VAR 0 6
9858: PUSH
9859: LD_VAR 0 5
9863: ADD
9864: ST_TO_ADDR
9865: GO 9818
9867: POP
9868: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9869: LD_VAR 0 6
9873: PPUSH
9874: LD_EXP 29
9878: PUSH
9879: LD_VAR 0 2
9883: STR
9884: PPUSH
9885: CALL_OW 38
// end ;
9889: LD_VAR 0 4
9893: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9901: LD_ADDR_VAR 0 3
9905: PUSH
9906: LD_INT 22
9908: PUSH
9909: LD_INT 3
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 50
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_VAR 0 3
9951: PUSH
9952: LD_EXP 42
9956: DIFF
9957: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_VAR 0 3
9967: PUSH
9968: LD_EXP 52
9972: DIFF
9973: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_STRING text
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: LD_INT 8
9987: PPUSH
9988: LD_INT -5
9990: PUSH
9991: LD_EXP 42
9995: PUSH
9996: LD_INT -6
9998: PUSH
9999: LD_INT -2
10001: PUSH
10002: LD_INT -3
10004: PUSH
10005: LD_INT -5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_VAR 0 3
10020: ADD
10021: PUSH
10022: LD_INT -6
10024: PUSH
10025: LD_INT -4
10027: PUSH
10028: LD_EXP 52
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: PPUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 42
10068: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 6
10076: PPUSH
10077: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10081: LD_EXP 52
10085: PPUSH
10086: LD_INT 6
10088: PPUSH
10089: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10093: LD_VAR 0 4
10097: PPUSH
10098: LD_INT 3
10100: PPUSH
10101: CALL_OW 235
// burlakTeam = selectedPeople ;
10105: LD_ADDR_EXP 55
10109: PUSH
10110: LD_VAR 0 4
10114: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10115: LD_ADDR_EXP 56
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_INT 6
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10149: LD_ADDR_EXP 56
10153: PUSH
10154: LD_EXP 56
10158: PUSH
10159: LD_EXP 49
10163: DIFF
10164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_INT 6
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: PUSH
10199: FOR_IN
10200: IFFALSE 10224
// if IsInUnit ( i ) then
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 310
10211: IFFALSE 10222
// ComExitVehicle ( i ) ;
10213: LD_VAR 0 2
10217: PPUSH
10218: CALL_OW 121
10222: GO 10199
10224: POP
10225: POP
// if not Gnyevko in selectedPeople then
10226: LD_EXP 43
10230: PUSH
10231: LD_VAR 0 4
10235: IN
10236: NOT
10237: IFFALSE 10254
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10239: LD_EXP 43
10243: PPUSH
10244: LD_STRING Gnyevko
10246: PPUSH
10247: LD_INT 6
10249: PPUSH
10250: CALL 9740 0 3
// if not Kovalyuk in selectedPeople then
10254: LD_EXP 45
10258: PUSH
10259: LD_VAR 0 4
10263: IN
10264: NOT
10265: IFFALSE 10282
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10267: LD_EXP 45
10271: PPUSH
10272: LD_STRING Kovalyuk
10274: PPUSH
10275: LD_INT 6
10277: PPUSH
10278: CALL 9740 0 3
// if not Kirilenkova in selectedPeople then
10282: LD_EXP 44
10286: PUSH
10287: LD_VAR 0 4
10291: IN
10292: NOT
10293: IFFALSE 10310
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10295: LD_EXP 44
10299: PPUSH
10300: LD_STRING Kirilenkova
10302: PPUSH
10303: LD_INT 6
10305: PPUSH
10306: CALL 9740 0 3
// if not Scholtze in selectedPeople then
10310: LD_EXP 48
10314: PUSH
10315: LD_VAR 0 4
10319: IN
10320: NOT
10321: IFFALSE 10338
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10323: LD_EXP 48
10327: PPUSH
10328: LD_STRING Scholtze
10330: PPUSH
10331: LD_INT 6
10333: PPUSH
10334: CALL 9740 0 3
// if not Belkov in selectedPeople then
10338: LD_EXP 46
10342: PUSH
10343: LD_VAR 0 4
10347: IN
10348: NOT
10349: IFFALSE 10366
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10351: LD_EXP 46
10355: PPUSH
10356: LD_STRING Belkov
10358: PPUSH
10359: LD_INT 6
10361: PPUSH
10362: CALL 9740 0 3
// if not Belkov2 in selectedPeople then
10366: LD_EXP 47
10370: PUSH
10371: LD_VAR 0 4
10375: IN
10376: NOT
10377: IFFALSE 10394
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10379: LD_EXP 47
10383: PPUSH
10384: LD_STRING Belkov2
10386: PPUSH
10387: LD_INT 6
10389: PPUSH
10390: CALL 9740 0 3
// others = popovTeam diff Popov ;
10394: LD_ADDR_VAR 0 5
10398: PUSH
10399: LD_EXP 56
10403: PUSH
10404: LD_EXP 52
10408: DIFF
10409: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10410: LD_VAR 0 5
10414: PPUSH
10415: LD_STRING other_survivors_with_popov
10417: PPUSH
10418: LD_INT 6
10420: PPUSH
10421: CALL 9796 0 3
// end ; end_of_file
10425: LD_VAR 0 1
10429: RET
// export function MissionIntro ; var i , unit ; begin
10430: LD_INT 0
10432: PPUSH
10433: PPUSH
10434: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10435: LD_EXP 42
10439: PPUSH
10440: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10444: LD_EXP 59
10448: PPUSH
10449: LD_STRING D1-RSol1-1
10451: PPUSH
10452: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-1
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-1
10475: PPUSH
10476: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10480: LD_EXP 53
10484: PPUSH
10485: LD_STRING D1-Pla-2
10487: PPUSH
10488: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10492: LD_EXP 42
10496: PPUSH
10497: LD_STRING D1-Bur-2
10499: PPUSH
10500: CALL_OW 88
// SelectCharacters ;
10504: CALL 9894 0 0
// InGameOff ;
10508: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10512: LD_STRING M1
10514: PPUSH
10515: CALL_OW 337
// SaveForQuickRestart ;
10519: CALL_OW 22
// for unit in popovTeam do
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: LD_EXP 56
10532: PUSH
10533: FOR_IN
10534: IFFALSE 10606
// begin for i := 3 to russianCargoPath1 do
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: DOUBLE
10542: LD_INT 3
10544: DEC
10545: ST_TO_ADDR
10546: LD_EXP 34
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10595
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_EXP 34
10563: PUSH
10564: LD_VAR 0 2
10568: ARRAY
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PPUSH
10574: LD_EXP 34
10578: PUSH
10579: LD_VAR 0 2
10583: ARRAY
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PPUSH
10589: CALL_OW 171
10593: GO 10551
10595: POP
10596: POP
// wait ( 0 0$01 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// end ;
10604: GO 10533
10606: POP
10607: POP
// end ;
10608: LD_VAR 0 1
10612: RET
// every 0 0$1 do var unit , driver ;
10613: GO 10615
10615: DISABLE
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// begin enable ;
10620: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10621: LD_INT 4
10623: PPUSH
10624: LD_INT 22
10626: PUSH
10627: LD_INT 6
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: NOT
10639: PUSH
10640: LD_INT 4
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 2
10655: PUSH
10656: LD_INT 21
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: NOT
10690: AND
10691: IFFALSE 10695
// exit ;
10693: GO 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 4
10702: PPUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 6
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10774
// begin RemoveUnit ( unit ) ;
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10730: LD_VAR 0 1
10734: PUSH
10735: LD_EXP 56
10739: IN
10740: NOT
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 264
10751: PUSH
10752: LD_INT 51
10754: EQUAL
10755: AND
10756: IFFALSE 10772
// evacuatedCargos = evacuatedCargos + 1 ;
10758: LD_ADDR_EXP 10
10762: PUSH
10763: LD_EXP 10
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ST_TO_ADDR
// end ;
10772: GO 10718
10774: POP
10775: POP
// if canExitMap then
10776: LD_EXP 6
10780: IFFALSE 11046
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 4
10789: PPUSH
10790: LD_INT 22
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 70
10836: PUSH
10837: FOR_IN
10838: IFFALSE 11044
// begin if GetType ( unit ) = unit_vehicle then
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 247
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: IFFALSE 10953
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 313
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 42
10873: PUSH
10874: LD_EXP 43
10878: PUSH
10879: LD_EXP 44
10883: PUSH
10884: LD_EXP 45
10888: PUSH
10889: LD_EXP 46
10893: PUSH
10894: LD_EXP 47
10898: PUSH
10899: LD_EXP 48
10903: PUSH
10904: LD_EXP 49
10908: PUSH
10909: LD_EXP 54
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: IN
10925: NOT
10926: IFFALSE 10953
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10928: LD_ADDR_EXP 62
10932: PUSH
10933: LD_EXP 62
10937: PUSH
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 313
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: ADD
10952: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 42
10962: PUSH
10963: LD_EXP 43
10967: PUSH
10968: LD_EXP 44
10972: PUSH
10973: LD_EXP 45
10977: PUSH
10978: LD_EXP 46
10982: PUSH
10983: LD_EXP 47
10987: PUSH
10988: LD_EXP 48
10992: PUSH
10993: LD_EXP 49
10997: PUSH
10998: LD_EXP 54
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: IN
11014: NOT
11015: IFFALSE 11033
// randomsToSave = randomsToSave ^ unit ;
11017: LD_ADDR_EXP 62
11021: PUSH
11022: LD_EXP 62
11026: PUSH
11027: LD_VAR 0 1
11031: ADD
11032: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 64
// end ;
11042: GO 10837
11044: POP
11045: POP
// end ;
11046: PPOPN 2
11048: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: PPUSH
11082: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 87
// InGameOn ;
11095: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11099: LD_EXP 53
11103: PPUSH
11104: LD_STRING D2a-Pla-1
11106: PPUSH
11107: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 22
11118: PUSH
11119: LD_INT 3
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 21
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: LD_INT 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: PUSH
11156: FOR_IN
11157: IFFALSE 11195
// if GetDistUnits ( building , unit ) < 10 then
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: CALL_OW 296
11173: PUSH
11174: LD_INT 10
11176: LESS
11177: IFFALSE 11193
// ComDismantle ( unit , building ) ;
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 167
11193: GO 11156
11195: POP
11196: POP
// repeat wait ( 0 0$1 ) ;
11197: LD_INT 35
11199: PPUSH
11200: CALL_OW 67
// until not IsPlaced ( building ) ;
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 305
11213: NOT
11214: IFFALSE 11197
// InGameOff ;
11216: CALL_OW 9
// end ;
11220: LD_VAR 0 2
11224: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11225: LD_EXP 49
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 6
11237: EQUAL
11238: IFFALSE 11320
11240: GO 11242
11242: DISABLE
11243: LD_INT 0
11245: PPUSH
// begin enable ;
11246: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11318
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_EXP 49
11293: PPUSH
11294: CALL_OW 296
11298: PUSH
11299: LD_INT 9
11301: LESS
11302: IFFALSE 11316
// SetSide ( Kuzmov , 3 ) ;
11304: LD_EXP 49
11308: PPUSH
11309: LD_INT 3
11311: PPUSH
11312: CALL_OW 235
11316: GO 11281
11318: POP
11319: POP
// end ;
11320: PPOPN 1
11322: END
// export function Dial_FinishDepot ; var i ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// startEvacuation = true ;
11327: LD_ADDR_EXP 8
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11335: LD_STRING MOutBuild
11337: PPUSH
11338: CALL_OW 337
// uc_side = 6 ;
11342: LD_ADDR_OWVAR 20
11346: PUSH
11347: LD_INT 6
11349: ST_TO_ADDR
// uc_nation = 3 ;
11350: LD_ADDR_OWVAR 21
11354: PUSH
11355: LD_INT 3
11357: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11358: LD_ADDR_OWVAR 37
11362: PUSH
11363: LD_INT 21
11365: ST_TO_ADDR
// vc_control = control_manual ;
11366: LD_ADDR_OWVAR 38
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// vc_engine = engine_combustion ;
11374: LD_ADDR_OWVAR 39
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11382: LD_ADDR_OWVAR 40
11386: PUSH
11387: LD_INT 51
11389: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11390: LD_ADDR_EXP 60
11394: PUSH
11395: CALL_OW 45
11399: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11400: LD_EXP 60
11404: PPUSH
11405: LD_INT 3
11407: PPUSH
11408: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11412: LD_EXP 60
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11427: LD_INT 1
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11437: CALL_OW 44
11441: PPUSH
11442: LD_EXP 60
11446: PPUSH
11447: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11451: LD_EXP 60
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 100
11461: PPUSH
11462: CALL_OW 291
// for i := 1 to 19 do
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 19
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11523
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11482: LD_EXP 60
11486: PPUSH
11487: LD_EXP 34
11491: PUSH
11492: LD_VAR 0 2
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_EXP 34
11506: PUSH
11507: LD_VAR 0 2
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: CALL_OW 171
11521: GO 11479
11523: POP
11524: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11525: LD_EXP 60
11529: PPUSH
11530: LD_INT 105
11532: PPUSH
11533: LD_INT 123
11535: PPUSH
11536: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11540: LD_EXP 60
11544: PPUSH
11545: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 21
11557: DEC
11558: ST_TO_ADDR
11559: LD_EXP 34
11563: PUSH
11564: FOR_TO
11565: IFFALSE 11608
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11567: LD_EXP 60
11571: PPUSH
11572: LD_EXP 34
11576: PUSH
11577: LD_VAR 0 2
11581: ARRAY
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_EXP 34
11591: PUSH
11592: LD_VAR 0 2
11596: ARRAY
11597: PUSH
11598: LD_INT 2
11600: ARRAY
11601: PPUSH
11602: CALL_OW 171
11606: GO 11564
11608: POP
11609: POP
// Say ( Burlak , D2-Bur-1 ) ;
11610: LD_EXP 42
11614: PPUSH
11615: LD_STRING D2-Bur-1
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11622: LD_EXP 53
11626: PPUSH
11627: LD_STRING D2-Pla-1
11629: PPUSH
11630: CALL_OW 94
// PrepareSecondBaseTeam ;
11634: CALL 3314 0 0
// end ;
11638: LD_VAR 0 1
11642: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
// dial_labUpgradedBlock = true ;
11647: LD_ADDR_EXP 15
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 3
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 26
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 25
11692: PUSH
11693: LD_INT 4
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: PUSH
11711: LD_EXP 42
11715: PUSH
11716: LD_EXP 43
11720: PUSH
11721: LD_EXP 44
11725: PUSH
11726: LD_EXP 45
11730: PUSH
11731: LD_EXP 46
11735: PUSH
11736: LD_EXP 47
11740: PUSH
11741: LD_EXP 48
11745: PUSH
11746: LD_EXP 49
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11762: LD_EXP 48
11766: PPUSH
11767: CALL_OW 302
11771: PUSH
11772: LD_EXP 48
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_INT 3
11784: EQUAL
11785: AND
11786: IFFALSE 11814
// begin Say ( Scholtze , D5-Sch-1 ) ;
11788: LD_EXP 48
11792: PPUSH
11793: LD_STRING D5-Sch-1
11795: PPUSH
11796: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11800: LD_EXP 42
11804: PPUSH
11805: LD_STRING D5-Bur-1
11807: PPUSH
11808: CALL_OW 88
// end else
11812: GO 11949
// if randomMaleSci then
11814: LD_VAR 0 2
11818: IFFALSE 11850
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11820: LD_VAR 0 2
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_STRING D5-RSci1-1
11831: PPUSH
11832: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11836: LD_EXP 42
11840: PPUSH
11841: LD_STRING D5-Bur-1
11843: PPUSH
11844: CALL_OW 88
// end else
11848: GO 11949
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11850: LD_ADDR_VAR 0 2
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 4
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 69
11905: PUSH
11906: LD_EXP 42
11910: PUSH
11911: EMPTY
11912: LIST
11913: DIFF
11914: ST_TO_ADDR
// if randomMaleSci then
11915: LD_VAR 0 2
11919: IFFALSE 11949
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_STRING D5-RSci1-1
11932: PPUSH
11933: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11937: LD_EXP 42
11941: PPUSH
11942: LD_STRING D5-Bur-1
11944: PPUSH
11945: CALL_OW 88
// end ; end ; end ;
11949: LD_VAR 0 1
11953: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11954: LD_EXP 60
11958: PPUSH
11959: LD_INT 105
11961: PPUSH
11962: LD_INT 123
11964: PPUSH
11965: CALL_OW 297
11969: PUSH
11970: LD_INT 12
11972: LESS
11973: IFFALSE 11999
11975: GO 11977
11977: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11978: LD_EXP 60
11982: PPUSH
11983: CALL_OW 313
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_STRING D2a-RSol1-1
11994: PPUSH
11995: CALL_OW 88
11999: END
// every 0 0$15 trigger startEvacuation do
12000: LD_EXP 8
12004: IFFALSE 12014
12006: GO 12008
12008: DISABLE
// begin enable ;
12009: ENABLE
// CreateEvacuateUnit ;
12010: CALL 2544 0 0
// end ;
12014: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
12015: LD_EXP 10
12019: PUSH
12020: LD_INT 3
12022: GREATEREQUAL
12023: IFFALSE 12122
12025: GO 12027
12027: DISABLE
// begin if IsOk ( Kuzmov ) then
12028: LD_EXP 49
12032: PPUSH
12033: CALL_OW 302
12037: IFFALSE 12107
// begin DialogueOn ;
12039: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-1
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-1
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-2
12074: PPUSH
12075: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12079: LD_EXP 42
12083: PPUSH
12084: LD_STRING D2b-Bur-2
12086: PPUSH
12087: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12091: LD_EXP 49
12095: PPUSH
12096: LD_STRING D2b-Kuz-3
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// end ; Query ( Q1 ) ;
12107: LD_STRING Q1
12109: PPUSH
12110: CALL_OW 97
// canStealCargo = true ;
12114: LD_ADDR_EXP 11
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// end ;
12122: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12123: LD_EXP 11
12127: IFFALSE 12425
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
// begin enable ;
12136: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 6
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 2
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 34
12164: PUSH
12165: LD_INT 51
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: PUSH
12182: FOR_IN
12183: IFFALSE 12423
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 3
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 50
12212: PUSH
12213: EMPTY
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: PPUSH
12221: CALL_OW 69
12225: PUSH
12226: FOR_IN
12227: IFFALSE 12419
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 296
12243: PUSH
12244: LD_INT 8
12246: LESS
12247: PUSH
12248: LD_VAR 0 2
12252: PUSH
12253: LD_EXP 13
12257: IN
12258: NOT
12259: AND
12260: PUSH
12261: LD_VAR 0 2
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 289
12273: PUSH
12274: LD_INT 0
12276: GREATER
12277: AND
12278: IFFALSE 12417
// begin stealCargos = stealCargos ^ cargo ;
12280: LD_ADDR_EXP 13
12284: PUSH
12285: LD_EXP 13
12289: PUSH
12290: LD_VAR 0 2
12294: ADD
12295: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12296: LD_STRING QQrSteal
12298: PPUSH
12299: CALL_OW 97
12303: PUSH
12304: LD_INT 1
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12385
12312: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12313: LD_ADDR_EXP 12
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_INT 1
12325: PLUS
12326: ST_TO_ADDR
// DialogueOn ;
12327: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12331: LD_EXP 42
12335: PPUSH
12336: LD_STRING DQrSteal#1-Bur-1
12338: PPUSH
12339: CALL_OW 88
// DialogueOff ;
12343: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 14
12354: PPUSH
12355: CALL_OW 113
// AddComUnload ( cargo ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 92
12375: PPUSH
12376: LD_INT 177
12378: PPUSH
12379: CALL_OW 171
// end ; 2 :
12383: GO 12417
12385: LD_INT 2
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12393
12391: GO 12416
12393: POP
// begin DialogueOn ;
12394: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12398: LD_EXP 42
12402: PPUSH
12403: LD_STRING DQrSteal#2-Bur-1
12405: PPUSH
12406: CALL_OW 88
// DialogueOff ;
12410: CALL_OW 7
// end ; end ;
12414: GO 12417
12416: POP
// end ;
12417: GO 12226
12419: POP
12420: POP
12421: GO 12182
12423: POP
12424: POP
// end ;
12425: PPOPN 2
12427: END
// every 0 0$12 trigger stealWarmCount = 3 do
12428: LD_EXP 12
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: IFFALSE 12508
12438: GO 12440
12440: DISABLE
// begin DialogueOn ;
12441: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-1
12452: PPUSH
12453: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12457: LD_EXP 42
12461: PPUSH
12462: LD_STRING D3A-Bur-1
12464: PPUSH
12465: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12469: LD_EXP 53
12473: PPUSH
12474: LD_STRING D3A-Pla-2
12476: PPUSH
12477: CALL_OW 94
// if IsOK ( Kuzmov ) then
12481: LD_EXP 49
12485: PPUSH
12486: CALL_OW 302
12490: IFFALSE 12504
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12492: LD_EXP 49
12496: PPUSH
12497: LD_STRING D3A-Kuz-2
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$10 trigger stealWarmCount = 6 do
12509: LD_EXP 12
12513: PUSH
12514: LD_INT 6
12516: EQUAL
12517: IFFALSE 12566
12519: GO 12521
12521: DISABLE
// begin DialogueOn ;
12522: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-1
12533: PPUSH
12534: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12538: LD_EXP 42
12542: PPUSH
12543: LD_STRING D3B-Bur-1
12545: PPUSH
12546: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12550: LD_EXP 53
12554: PPUSH
12555: LD_STRING D3B-Pla-2
12557: PPUSH
12558: CALL_OW 94
// DialogueOff ;
12562: CALL_OW 7
// end ;
12566: END
// every 0 0$10 trigger stealWarmCount = 7 do
12567: LD_EXP 12
12571: PUSH
12572: LD_INT 7
12574: EQUAL
12575: IFFALSE 12659
12577: GO 12579
12579: DISABLE
// begin DialogueOn ;
12580: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-1
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-1
12603: PPUSH
12604: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12608: LD_EXP 53
12612: PPUSH
12613: LD_STRING D3C-Pla-2
12615: PPUSH
12616: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12620: LD_EXP 42
12624: PPUSH
12625: LD_STRING D3C-Bur-2
12627: PPUSH
12628: CALL_OW 88
// if IsOK ( Kuzmov ) then
12632: LD_EXP 49
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12655
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12643: LD_EXP 49
12647: PPUSH
12648: LD_STRING D3C-Kuz-2
12650: PPUSH
12651: CALL_OW 88
// DialogueOff ;
12655: CALL_OW 7
// end ;
12659: END
// every 0 0$10 trigger stealWarmCount = 8 do
12660: LD_EXP 12
12664: PUSH
12665: LD_INT 8
12667: EQUAL
12668: IFFALSE 12860
12670: GO 12672
12672: DISABLE
// begin canStealCargo = false ;
12673: LD_ADDR_EXP 11
12677: PUSH
12678: LD_INT 0
12680: ST_TO_ADDR
// DialogueOn ;
12681: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12685: LD_EXP 53
12689: PPUSH
12690: LD_STRING D3D-Pla-1
12692: PPUSH
12693: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12697: LD_EXP 42
12701: PPUSH
12702: LD_STRING D3D-Bur-1
12704: PPUSH
12705: CALL_OW 88
// if kurinOpinion = 0 then
12709: LD_EXP 2
12713: PUSH
12714: LD_INT 0
12716: EQUAL
12717: IFFALSE 12737
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12719: LD_EXP 53
12723: PPUSH
12724: LD_STRING D3E-Pla-1
12726: PPUSH
12727: CALL_OW 94
// Lose_Arrest ;
12731: CALL 7576 0 0
// exit ;
12735: GO 12860
// end ; if meetBelkovBrother = 1 then
12737: LD_EXP 3
12741: PUSH
12742: LD_INT 1
12744: EQUAL
12745: IFFALSE 12765
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12747: LD_EXP 53
12751: PPUSH
12752: LD_STRING D3E-Pla-1a
12754: PPUSH
12755: CALL_OW 94
// Lose_Arrest ;
12759: CALL 7576 0 0
// exit ;
12763: GO 12860
// end ; if platonovOpinion = 0 then
12765: LD_EXP 1
12769: PUSH
12770: LD_INT 0
12772: EQUAL
12773: IFFALSE 12793
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12775: LD_EXP 53
12779: PPUSH
12780: LD_STRING D3E-Pla-1b
12782: PPUSH
12783: CALL_OW 94
// Lose_Arrest ;
12787: CALL 7576 0 0
// exit ;
12791: GO 12860
// end ; if platonovOpinion = 1 then
12793: LD_EXP 1
12797: PUSH
12798: LD_INT 1
12800: EQUAL
12801: IFFALSE 12821
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12803: LD_EXP 53
12807: PPUSH
12808: LD_STRING D3E-Pla-1c
12810: PPUSH
12811: CALL_OW 94
// Lose_Arrest ;
12815: CALL 7576 0 0
// exit ;
12819: GO 12860
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12821: LD_EXP 53
12825: PPUSH
12826: LD_STRING D3D-Pla-2
12828: PPUSH
12829: CALL_OW 94
// if IsOK ( Kuzmov ) then
12833: LD_EXP 49
12837: PPUSH
12838: CALL_OW 302
12842: IFFALSE 12856
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12844: LD_EXP 49
12848: PPUSH
12849: LD_STRING D3D-Kuz-2
12851: PPUSH
12852: CALL_OW 88
// DialogueOff ;
12856: CALL_OW 7
// end ;
12860: END
// every 0 0$20 do var allyUntis ;
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// wait ( 0 0$10 ) ;
12868: LD_INT 350
12870: PPUSH
12871: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 60
12895: PUSH
12896: EMPTY
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 56
12916: DIFF
12917: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 1
12927: PUSH
12928: LD_EXP 54
12932: DIFF
12933: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_VAR 0 1
12943: PUSH
12944: LD_EXP 49
12948: DIFF
12949: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12950: LD_ADDR_VAR 0 1
12954: PUSH
12955: LD_VAR 0 1
12959: PUSH
12960: LD_EXP 57
12964: DIFF
12965: ST_TO_ADDR
// if not allyUntis then
12966: LD_VAR 0 1
12970: NOT
12971: IFFALSE 12975
// exit ;
12973: GO 12999
// ComUnload ( allyUntis ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12984: LD_VAR 0 1
12988: PPUSH
12989: LD_INT 92
12991: PPUSH
12992: LD_INT 176
12994: PPUSH
12995: CALL_OW 171
// end ;
12999: PPOPN 1
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: IFFALSE 13025
13014: GO 13016
13016: DISABLE
// begin startEvacuation = false ;
13017: LD_ADDR_EXP 8
13021: PUSH
13022: LD_INT 0
13024: ST_TO_ADDR
// end ;
13025: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13026: LD_EXP 10
13030: PUSH
13031: LD_EXP 14
13035: GREATEREQUAL
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 6
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 69
13083: PUSH
13084: LD_EXP 57
13088: DIFF
13089: NOT
13090: AND
13091: IFFALSE 13686
13093: GO 13095
13095: DISABLE
// begin wait ( 1 1$00 ) ;
13096: LD_INT 2100
13098: PPUSH
13099: CALL_OW 67
// DialogueOn ;
13103: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13107: LD_EXP 53
13111: PPUSH
13112: LD_STRING D4-Pla-1
13114: PPUSH
13115: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13119: LD_EXP 42
13123: PPUSH
13124: LD_STRING D4-Bur-1
13126: PPUSH
13127: CALL_OW 88
// DialogueOff ;
13131: CALL_OW 7
// wait ( 0 0$2 ) ;
13135: LD_INT 70
13137: PPUSH
13138: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13142: LD_EXP 49
13146: PPUSH
13147: CALL_OW 302
13151: PUSH
13152: LD_EXP 49
13156: PPUSH
13157: CALL_OW 255
13161: PUSH
13162: LD_INT 3
13164: EQUAL
13165: AND
13166: IFFALSE 13448
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13168: LD_EXP 49
13172: PPUSH
13173: LD_STRING D4-Kuz-1
13175: PPUSH
13176: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13180: LD_EXP 46
13184: PPUSH
13185: CALL_OW 302
13189: PUSH
13190: LD_EXP 46
13194: PPUSH
13195: CALL_OW 255
13199: PUSH
13200: LD_INT 3
13202: EQUAL
13203: AND
13204: IFFALSE 13220
// Say ( Belkov , D4-Bel-1 ) else
13206: LD_EXP 46
13210: PPUSH
13211: LD_STRING D4-Bel-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13258
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13220: LD_EXP 47
13224: PPUSH
13225: CALL_OW 302
13229: PUSH
13230: LD_EXP 47
13234: PPUSH
13235: CALL_OW 255
13239: PUSH
13240: LD_INT 3
13242: EQUAL
13243: AND
13244: IFFALSE 13258
// Say ( Belkov2 , D4-Bel-1 ) ;
13246: LD_EXP 47
13250: PPUSH
13251: LD_STRING D4-Bel-1
13253: PPUSH
13254: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13258: LD_EXP 42
13262: PPUSH
13263: LD_STRING D4-Bur-2
13265: PPUSH
13266: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13270: LD_EXP 43
13274: PPUSH
13275: CALL_OW 302
13279: PUSH
13280: LD_EXP 43
13284: PPUSH
13285: CALL_OW 255
13289: PUSH
13290: LD_INT 3
13292: EQUAL
13293: AND
13294: IFFALSE 13320
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13296: LD_EXP 43
13300: PPUSH
13301: LD_STRING D4-Gny-2
13303: PPUSH
13304: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13308: LD_EXP 42
13312: PPUSH
13313: LD_STRING D4-Bur-3
13315: PPUSH
13316: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13320: LD_EXP 42
13324: PPUSH
13325: LD_STRING D4-Bur-3a
13327: PPUSH
13328: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13332: LD_EXP 46
13336: PPUSH
13337: CALL_OW 302
13341: PUSH
13342: LD_EXP 46
13346: PPUSH
13347: CALL_OW 255
13351: PUSH
13352: LD_INT 3
13354: EQUAL
13355: AND
13356: IFFALSE 13372
// Say ( Belkov , D4-Bel-3 ) else
13358: LD_EXP 46
13362: PPUSH
13363: LD_STRING D4-Bel-3
13365: PPUSH
13366: CALL_OW 88
13370: GO 13410
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13372: LD_EXP 47
13376: PPUSH
13377: CALL_OW 302
13381: PUSH
13382: LD_EXP 47
13386: PPUSH
13387: CALL_OW 255
13391: PUSH
13392: LD_INT 3
13394: EQUAL
13395: AND
13396: IFFALSE 13410
// Say ( Belkov2 , D4-Bel-3 ) ;
13398: LD_EXP 47
13402: PPUSH
13403: LD_STRING D4-Bel-3
13405: PPUSH
13406: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13410: LD_EXP 45
13414: PPUSH
13415: CALL_OW 302
13419: PUSH
13420: LD_EXP 45
13424: PPUSH
13425: CALL_OW 255
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: AND
13434: IFFALSE 13448
// Say ( Kovalyuk , D4-Kov-3 ) ;
13436: LD_EXP 45
13440: PPUSH
13441: LD_STRING D4-Kov-3
13443: PPUSH
13444: CALL_OW 88
// end ; PrepareFirstAttack ;
13448: CALL 4199 0 0
// firstAttack = true ;
13452: LD_ADDR_EXP 18
13456: PUSH
13457: LD_INT 1
13459: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13460: LD_INT 350
13462: PPUSH
13463: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13467: LD_EXP 42
13471: PPUSH
13472: LD_STRING D7-Bur-1
13474: PPUSH
13475: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13479: LD_EXP 64
13483: PPUSH
13484: LD_INT 135
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 134
13496: PUSH
13497: LD_INT 19
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 132
13506: PUSH
13507: LD_INT 26
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 128
13516: PUSH
13517: LD_INT 31
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 123
13526: PUSH
13527: LD_INT 37
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 118
13536: PUSH
13537: LD_INT 45
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 112
13546: PUSH
13547: LD_INT 51
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 106
13556: PUSH
13557: LD_INT 57
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 99
13566: PUSH
13567: LD_INT 62
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 93
13576: PUSH
13577: LD_INT 67
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 86
13586: PUSH
13587: LD_INT 72
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 78
13596: PUSH
13597: LD_INT 75
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 71
13606: PUSH
13607: LD_INT 81
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 69
13616: PUSH
13617: LD_INT 88
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 71
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 74
13636: PUSH
13637: LD_INT 103
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 80
13646: PUSH
13647: LD_INT 113
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 11
13681: PPUSH
13682: CALL 5042 0 5
// end ;
13686: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13687: LD_EXP 64
13691: PPUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 72
13706: NOT
13707: PUSH
13708: LD_EXP 18
13712: AND
13713: IFFALSE 13772
13715: GO 13717
13717: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13718: LD_EXP 57
13722: PPUSH
13723: CALL_OW 122
// wait ( 0 0$1 ) ;
13727: LD_INT 35
13729: PPUSH
13730: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13734: LD_EXP 57
13738: PPUSH
13739: LD_INT 114
13741: PPUSH
13742: LD_INT 114
13744: PPUSH
13745: CALL_OW 111
// wait ( 0 0$15 ) ;
13749: LD_INT 525
13751: PPUSH
13752: CALL_OW 67
// firstAttack = false ;
13756: LD_ADDR_EXP 18
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// enableAttacks = true ;
13764: LD_ADDR_EXP 17
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// end ;
13772: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13773: LD_OWVAR 67
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: PUSH
13782: LD_EXP 57
13786: AND
13787: IFFALSE 13855
13789: GO 13791
13791: DISABLE
13792: LD_INT 0
13794: PPUSH
// begin enable ;
13795: ENABLE
// for un in secondBaseTeam do
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_EXP 57
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13853
// if IsInArea ( un , HillArea ) then
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 5
13816: PPUSH
13817: CALL_OW 308
13821: IFFALSE 13851
// begin SetSide ( un , 3 ) ;
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13835: LD_ADDR_EXP 57
13839: PUSH
13840: LD_EXP 57
13844: PUSH
13845: LD_VAR 0 1
13849: DIFF
13850: ST_TO_ADDR
// end ;
13851: GO 13806
13853: POP
13854: POP
// end ;
13855: PPOPN 1
13857: END
// export function Dial_Contact ; begin
13858: LD_INT 0
13860: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13861: LD_EXP 42
13865: PPUSH
13866: LD_STRING D7-Bur-1a
13868: PPUSH
13869: CALL_OW 88
// wait ( 0 0$12 ) ;
13873: LD_INT 420
13875: PPUSH
13876: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13880: LD_EXP 42
13884: PPUSH
13885: LD_STRING D7-Bur-1b
13887: PPUSH
13888: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13892: LD_EXP 46
13896: PPUSH
13897: CALL_OW 302
13901: PUSH
13902: LD_EXP 46
13906: PPUSH
13907: CALL_OW 255
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: AND
13916: IFFALSE 13932
// Say ( Belkov , D7-Bel-1 ) else
13918: LD_EXP 46
13922: PPUSH
13923: LD_STRING D7-Bel-1
13925: PPUSH
13926: CALL_OW 88
13930: GO 13970
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13932: LD_EXP 47
13936: PPUSH
13937: CALL_OW 302
13941: PUSH
13942: LD_EXP 47
13946: PPUSH
13947: CALL_OW 255
13951: PUSH
13952: LD_INT 3
13954: EQUAL
13955: AND
13956: IFFALSE 13970
// Say ( Belkov2 , D7-Bel-1 ) ;
13958: LD_EXP 47
13962: PPUSH
13963: LD_STRING D7-Bel-1
13965: PPUSH
13966: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13970: LD_EXP 49
13974: PPUSH
13975: CALL_OW 302
13979: PUSH
13980: LD_EXP 49
13984: PPUSH
13985: CALL_OW 255
13989: PUSH
13990: LD_INT 3
13992: EQUAL
13993: AND
13994: IFFALSE 14008
// Say ( Kuzmov , D7-Kuz-1 ) ;
13996: LD_EXP 49
14000: PPUSH
14001: LD_STRING D7-Kuz-1
14003: PPUSH
14004: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
14008: LD_EXP 45
14012: PPUSH
14013: CALL_OW 302
14017: PUSH
14018: LD_EXP 45
14022: PPUSH
14023: CALL_OW 255
14027: PUSH
14028: LD_INT 3
14030: EQUAL
14031: AND
14032: IFFALSE 14046
// Say ( Kovalyuk , D7-Kov-1 ) ;
14034: LD_EXP 45
14038: PPUSH
14039: LD_STRING D7-Kov-1
14041: PPUSH
14042: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14046: LD_EXP 48
14050: PPUSH
14051: CALL_OW 302
14055: PUSH
14056: LD_EXP 48
14060: PPUSH
14061: CALL_OW 255
14065: PUSH
14066: LD_INT 3
14068: EQUAL
14069: AND
14070: IFFALSE 14084
// Say ( Scholtze , D7-Sch-1 ) ;
14072: LD_EXP 48
14076: PPUSH
14077: LD_STRING D7-Sch-1
14079: PPUSH
14080: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14084: LD_INT 22
14086: PUSH
14087: LD_INT 3
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 21
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 26
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PPUSH
14119: CALL_OW 69
14123: PPUSH
14124: LD_STRING D7-RSol1-1
14126: PPUSH
14127: LD_STRING 
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: CALL 9537 0 4
// PrepareHeike ;
14137: CALL 3519 0 0
// wait ( 0 0$10 ) ;
14141: LD_INT 350
14143: PPUSH
14144: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14148: LD_EXP 63
14152: PPUSH
14153: LD_STRING D7a-Hke-1
14155: PPUSH
14156: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14160: LD_EXP 42
14164: PPUSH
14165: LD_STRING D7a-Bur-1
14167: PPUSH
14168: CALL_OW 88
// wait ( 0 0$50 ) ;
14172: LD_INT 1750
14174: PPUSH
14175: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14179: LD_EXP 49
14183: PPUSH
14184: CALL_OW 302
14188: PUSH
14189: LD_EXP 49
14193: PPUSH
14194: CALL_OW 255
14198: PUSH
14199: LD_INT 3
14201: EQUAL
14202: AND
14203: IFFALSE 14219
// Say ( Kuzmov , D8-Kuz-1 ) else
14205: LD_EXP 49
14209: PPUSH
14210: LD_STRING D8-Kuz-1
14212: PPUSH
14213: CALL_OW 88
14217: GO 14272
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14219: LD_INT 22
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 21
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 26
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: PPUSH
14259: LD_STRING D8-RSol1-1
14261: PPUSH
14262: LD_STRING 
14264: PPUSH
14265: LD_INT 0
14267: PPUSH
14268: CALL 9537 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14272: LD_EXP 42
14276: PPUSH
14277: LD_STRING D8-Bur-1
14279: PPUSH
14280: CALL_OW 88
// end ;
14284: LD_VAR 0 1
14288: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14289: LD_EXP 54
14293: PPUSH
14294: CALL_OW 305
14298: NOT
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 3
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 50
14322: PUSH
14323: EMPTY
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: AND
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 3
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 21
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 50
14360: PUSH
14361: EMPTY
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: PUSH
14374: LD_INT 5
14376: LESS
14377: AND
14378: PUSH
14379: LD_INT 5
14381: PPUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: PUSH
14400: LD_INT 3
14402: GREATER
14403: AND
14404: IFFALSE 14413
14406: GO 14408
14408: DISABLE
// Lose_ArabBreakthrough ;
14409: CALL 7591 0 0
14413: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14414: LD_EXP 19
14418: PUSH
14419: LD_EXP 38
14423: GREATEREQUAL
14424: IFFALSE 14648
14426: GO 14428
14428: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-1
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-1
14448: PPUSH
14449: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14453: LD_EXP 53
14457: PPUSH
14458: LD_STRING D9-Pla-2
14460: PPUSH
14461: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14465: LD_EXP 42
14469: PPUSH
14470: LD_STRING D9-Bur-2
14472: PPUSH
14473: CALL_OW 88
// wait ( 2 2$0 ) ;
14477: LD_INT 4200
14479: PPUSH
14480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// until not HexInfo ( 12 , 3 ) ;
14491: LD_INT 12
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 428
14501: NOT
14502: IFFALSE 14484
// PlaceUnitXYR ( Gaydar , 12 , 3 , 2 , false ) ;
14504: LD_EXP 54
14508: PPUSH
14509: LD_INT 12
14511: PPUSH
14512: LD_INT 3
14514: PPUSH
14515: LD_INT 2
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 50
// arabianCanExitMap = true ;
14525: LD_ADDR_EXP 7
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14533: LD_INT 35
14535: PPUSH
14536: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14540: LD_EXP 54
14544: PPUSH
14545: CALL_OW 87
// DialogueOn ;
14549: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14553: LD_EXP 54
14557: PPUSH
14558: LD_STRING D10-Gay-1
14560: PPUSH
14561: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14565: LD_EXP 42
14569: PPUSH
14570: LD_STRING D10-Bur-1
14572: PPUSH
14573: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14577: LD_EXP 54
14581: PPUSH
14582: LD_STRING D10-Gay-2
14584: PPUSH
14585: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14589: LD_EXP 52
14593: PPUSH
14594: LD_STRING D10-Pop-2
14596: PPUSH
14597: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14601: LD_EXP 54
14605: PPUSH
14606: LD_STRING D10-Gay-3
14608: PPUSH
14609: CALL_OW 94
// DialogueOff ;
14613: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14617: LD_EXP 54
14621: PPUSH
14622: LD_INT 36
14624: PPUSH
14625: LD_INT 38
14627: PPUSH
14628: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14632: LD_EXP 54
14636: PPUSH
14637: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14641: LD_STRING M2
14643: PPUSH
14644: CALL_OW 337
// end ;
14648: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14649: LD_EXP 7
14653: IFFALSE 14726
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
// begin enable ;
14661: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14662: LD_INT 22
14664: PUSH
14665: LD_INT 2
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: PPUSH
14675: CALL_OW 69
14679: PPUSH
14680: LD_INT 13
14682: PPUSH
14683: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14687: LD_ADDR_VAR 0 1
14691: PUSH
14692: LD_INT 13
14694: PPUSH
14695: LD_INT 22
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 70
14709: PUSH
14710: FOR_IN
14711: IFFALSE 14724
// RemoveUnit ( unit ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 64
14722: GO 14710
14724: POP
14725: POP
// end ;
14726: PPOPN 1
14728: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14729: LD_EXP 20
14733: NOT
14734: IFFALSE 15124
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
// begin enable ;
14743: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14744: LD_ADDR_VAR 0 1
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 3
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: PUSH
14778: FOR_IN
14779: IFFALSE 15122
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14781: LD_VAR 0 1
14785: PPUSH
14786: LD_EXP 54
14790: PPUSH
14791: CALL_OW 296
14795: PUSH
14796: LD_INT 6
14798: LESS
14799: IFFALSE 15120
// begin SetSide ( Gaydar , 3 ) ;
14801: LD_EXP 54
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: CALL_OW 235
// ComWalk ( Gaydar ) ;
14813: LD_EXP 54
14817: PPUSH
14818: CALL_OW 138
// saveGaydar = true ;
14822: LD_ADDR_EXP 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14830: LD_INT 35
14832: PPUSH
14833: CALL_OW 67
// DialogueOn ;
14837: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14841: LD_EXP 54
14845: PPUSH
14846: LD_STRING D11-Gay-1
14848: PPUSH
14849: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14853: LD_EXP 42
14857: PPUSH
14858: LD_EXP 54
14862: PPUSH
14863: CALL_OW 296
14867: PUSH
14868: LD_INT 6
14870: LESS
14871: NOT
14872: IFFALSE 14972
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 26
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 50
14911: PUSH
14912: EMPTY
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_EXP 54
14930: DIFF
14931: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14932: LD_VAR 0 2
14936: PPUSH
14937: LD_EXP 54
14941: PPUSH
14942: CALL_OW 74
14946: PPUSH
14947: LD_STRING D11-RSol1-1
14949: PPUSH
14950: CALL_OW 88
// gaydarWaitForBurlak = true ;
14954: LD_ADDR_EXP 21
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// DialogueOff ;
14962: CALL_OW 7
// exit ;
14966: POP
14967: POP
14968: GO 15124
// end else
14970: GO 15120
// begin Say ( Gaydar , D11-Gay-2 ) ;
14972: LD_EXP 54
14976: PPUSH
14977: LD_STRING D11-Gay-2
14979: PPUSH
14980: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14984: LD_EXP 42
14988: PPUSH
14989: LD_STRING D11-Bur-2
14991: PPUSH
14992: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_STRING D11-Gay-3
15003: PPUSH
15004: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15008: LD_EXP 42
15012: PPUSH
15013: LD_STRING D11-Bur-3
15015: PPUSH
15016: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15020: LD_EXP 54
15024: PPUSH
15025: LD_STRING D11-Gay-4
15027: PPUSH
15028: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15032: LD_EXP 42
15036: PPUSH
15037: LD_STRING D11-Bur-4
15039: PPUSH
15040: CALL_OW 88
// wait ( 0 0$2 ) ;
15044: LD_INT 70
15046: PPUSH
15047: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15051: LD_EXP 52
15055: PPUSH
15056: LD_STRING D12-Pop-1
15058: PPUSH
15059: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15063: LD_EXP 42
15067: PPUSH
15068: LD_STRING D12-Bur-1
15070: PPUSH
15071: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15075: LD_EXP 53
15079: PPUSH
15080: LD_STRING D12-Pla-1
15082: PPUSH
15083: CALL_OW 94
// DialogueOff ;
15087: CALL_OW 7
// canExitMap = true ;
15091: LD_ADDR_EXP 6
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15099: LD_STRING MFinal
15101: PPUSH
15102: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15106: LD_INT 4
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 424
// exit ;
15116: POP
15117: POP
15118: GO 15124
// end ; end ; end ;
15120: GO 14778
15122: POP
15123: POP
// end ;
15124: PPOPN 2
15126: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15127: LD_EXP 42
15131: PPUSH
15132: LD_EXP 54
15136: PPUSH
15137: CALL_OW 296
15141: PUSH
15142: LD_INT 6
15144: LESS
15145: PUSH
15146: LD_EXP 21
15150: AND
15151: IFFALSE 15304
15153: GO 15155
15155: DISABLE
// begin DialogueOn ;
15156: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15160: LD_EXP 54
15164: PPUSH
15165: LD_STRING D11-Gay-2
15167: PPUSH
15168: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15172: LD_EXP 42
15176: PPUSH
15177: LD_STRING D11-Bur-2
15179: PPUSH
15180: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15184: LD_EXP 54
15188: PPUSH
15189: LD_STRING D11-Gay-3
15191: PPUSH
15192: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15196: LD_EXP 42
15200: PPUSH
15201: LD_STRING D11-Bur-3
15203: PPUSH
15204: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15208: LD_EXP 54
15212: PPUSH
15213: LD_STRING D11-Gay-4
15215: PPUSH
15216: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15220: LD_EXP 42
15224: PPUSH
15225: LD_STRING D11-Bur-4
15227: PPUSH
15228: CALL_OW 88
// wait ( 0 0$2 ) ;
15232: LD_INT 70
15234: PPUSH
15235: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15239: LD_EXP 52
15243: PPUSH
15244: LD_STRING D12-Pop-1
15246: PPUSH
15247: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15251: LD_EXP 42
15255: PPUSH
15256: LD_STRING D12-Bur-1
15258: PPUSH
15259: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15263: LD_EXP 53
15267: PPUSH
15268: LD_STRING D12-Pla-1
15270: PPUSH
15271: CALL_OW 94
// DialogueOff ;
15275: CALL_OW 7
// canExitMap = true ;
15279: LD_ADDR_EXP 6
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15287: LD_STRING MFinal
15289: PPUSH
15290: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15294: LD_INT 4
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 424
// end ;
15304: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15305: LD_INT 22
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 21
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PPUSH
15329: CALL_OW 69
15333: PUSH
15334: LD_INT 0
15336: EQUAL
15337: PUSH
15338: LD_EXP 6
15342: AND
15343: IFFALSE 15352
15345: GO 15347
15347: DISABLE
// FinishMission ; end_of_file
15348: CALL 7709 0 0
15352: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15353: LD_EXP 17
15357: PUSH
15358: LD_EXP 19
15362: PUSH
15363: LD_INT 0
15365: EQUAL
15366: AND
15367: PUSH
15368: LD_EXP 19
15372: PUSH
15373: LD_EXP 38
15377: LESS
15378: AND
15379: IFFALSE 15431
15381: GO 15383
15383: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15384: LD_INT 7
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: LD_INT 2
15399: PPUSH
15400: CALL_OW 12
15404: ARRAY
15405: PPUSH
15406: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15410: LD_EXP 65
15414: PPUSH
15415: EMPTY
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: LD_INT 1
15425: NEG
15426: PPUSH
15427: CALL 5042 0 5
// end ;
15431: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15432: LD_EXP 17
15436: PUSH
15437: LD_EXP 19
15441: PUSH
15442: LD_INT 0
15444: GREATEREQUAL
15445: AND
15446: PUSH
15447: LD_EXP 19
15451: PUSH
15452: LD_EXP 38
15456: LESS
15457: AND
15458: IFFALSE 15688
15460: GO 15462
15462: DISABLE
// begin currentWave = currentWave + 1 ;
15463: LD_ADDR_EXP 19
15467: PUSH
15468: LD_EXP 19
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// PrepareArabianVehicles ;
15477: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15481: LD_EXP 65
15485: PPUSH
15486: LD_INT 135
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 134
15498: PUSH
15499: LD_INT 19
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 132
15508: PUSH
15509: LD_INT 26
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 128
15518: PUSH
15519: LD_INT 31
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 123
15528: PUSH
15529: LD_INT 37
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 118
15538: PUSH
15539: LD_INT 45
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 112
15548: PUSH
15549: LD_INT 51
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 106
15558: PUSH
15559: LD_INT 57
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 99
15568: PUSH
15569: LD_INT 62
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 93
15578: PUSH
15579: LD_INT 67
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 86
15588: PUSH
15589: LD_INT 72
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 78
15598: PUSH
15599: LD_INT 75
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 71
15608: PUSH
15609: LD_INT 81
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 69
15618: PUSH
15619: LD_INT 88
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 71
15628: PUSH
15629: LD_INT 95
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 74
15638: PUSH
15639: LD_INT 103
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 80
15648: PUSH
15649: LD_INT 113
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PPUSH
15675: LD_INT 0
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: LD_INT 11
15683: PPUSH
15684: CALL 5042 0 5
// end ;
15688: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15689: LD_EXP 17
15693: PUSH
15694: LD_OWVAR 67
15698: PUSH
15699: LD_INT 2
15701: EQUAL
15702: AND
15703: PUSH
15704: LD_EXP 19
15708: PUSH
15709: LD_INT 0
15711: GREATEREQUAL
15712: AND
15713: PUSH
15714: LD_EXP 19
15718: PUSH
15719: LD_EXP 38
15723: LESS
15724: AND
15725: IFFALSE 15853
15727: GO 15729
15729: DISABLE
// begin PrepareArabianVehicles ;
15730: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15734: LD_EXP 65
15738: PPUSH
15739: LD_INT 135
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 134
15751: PUSH
15752: LD_INT 19
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 132
15761: PUSH
15762: LD_INT 26
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 128
15771: PUSH
15772: LD_INT 31
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 123
15781: PUSH
15782: LD_INT 37
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 118
15791: PUSH
15792: LD_INT 45
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 112
15801: PUSH
15802: LD_INT 51
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 106
15811: PUSH
15812: LD_INT 57
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 99
15821: PUSH
15822: LD_INT 62
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PPUSH
15840: LD_INT 0
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: LD_INT 11
15848: PPUSH
15849: CALL 5042 0 5
// end ;
15853: END
// every 1 1$0 trigger enableAttacks and Difficulty >= 3 and currentWave >= 0 and currentWave < enemyWaves do
15854: LD_EXP 17
15858: PUSH
15859: LD_OWVAR 67
15863: PUSH
15864: LD_INT 3
15866: GREATEREQUAL
15867: AND
15868: PUSH
15869: LD_EXP 19
15873: PUSH
15874: LD_INT 0
15876: GREATEREQUAL
15877: AND
15878: PUSH
15879: LD_EXP 19
15883: PUSH
15884: LD_EXP 38
15888: LESS
15889: AND
15890: IFFALSE 16084
15892: GO 15894
15894: DISABLE
// begin PrepareArabianVehicles ;
15895: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15899: LD_EXP 65
15903: PPUSH
15904: LD_INT 135
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 134
15916: PUSH
15917: LD_INT 19
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 132
15926: PUSH
15927: LD_INT 26
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 128
15936: PUSH
15937: LD_INT 31
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 123
15946: PUSH
15947: LD_INT 37
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 118
15956: PUSH
15957: LD_INT 45
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 112
15966: PUSH
15967: LD_INT 51
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 57
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 99
15986: PUSH
15987: LD_INT 62
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 104
15996: PUSH
15997: LD_INT 71
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 110
16006: PUSH
16007: LD_INT 78
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 119
16016: PUSH
16017: LD_INT 88
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 128
16026: PUSH
16027: LD_INT 97
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 135
16036: PUSH
16037: LD_INT 106
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 140
16046: PUSH
16047: LD_INT 153
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: PPUSH
16071: LD_INT 0
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: LD_INT 11
16079: PPUSH
16080: CALL 5042 0 5
// end ;
16084: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16085: LD_EXP 17
16089: PUSH
16090: LD_EXP 19
16094: PUSH
16095: LD_INT 1
16097: EQUAL
16098: AND
16099: PUSH
16100: LD_EXP 19
16104: PUSH
16105: LD_EXP 38
16109: LESS
16110: AND
16111: IFFALSE 16188
16113: GO 16115
16115: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16116: LD_INT 7
16118: PPUSH
16119: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16123: LD_EXP 65
16127: PPUSH
16128: LD_INT 157
16130: PUSH
16131: LD_INT 31
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 194
16140: PUSH
16141: LD_INT 124
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 174
16150: PUSH
16151: LD_INT 158
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 151
16160: PUSH
16161: LD_INT 164
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: LD_INT 0
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 1
16182: NEG
16183: PPUSH
16184: CALL 5042 0 5
// end ;
16188: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16189: LD_EXP 17
16193: PUSH
16194: LD_EXP 19
16198: PUSH
16199: LD_INT 1
16201: EQUAL
16202: AND
16203: PUSH
16204: LD_EXP 19
16208: PUSH
16209: LD_EXP 38
16213: LESS
16214: AND
16215: IFFALSE 16364
16217: GO 16219
16219: DISABLE
// begin wait ( 1 1$30 ) ;
16220: LD_INT 3150
16222: PPUSH
16223: CALL_OW 67
// currentWave = currentWave + 1 ;
16227: LD_ADDR_EXP 19
16231: PUSH
16232: LD_EXP 19
16236: PUSH
16237: LD_INT 1
16239: PLUS
16240: ST_TO_ADDR
// PrepareArabianVehicles ;
16241: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16245: LD_EXP 65
16249: PPUSH
16250: LD_INT 135
16252: PUSH
16253: LD_INT 4
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 134
16262: PUSH
16263: LD_INT 19
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 132
16272: PUSH
16273: LD_INT 26
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 128
16282: PUSH
16283: LD_INT 31
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 123
16292: PUSH
16293: LD_INT 37
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 118
16302: PUSH
16303: LD_INT 45
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 112
16312: PUSH
16313: LD_INT 51
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 106
16322: PUSH
16323: LD_INT 57
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 99
16332: PUSH
16333: LD_INT 62
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 11
16359: PPUSH
16360: CALL 5042 0 5
// end ;
16364: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16365: LD_EXP 17
16369: PUSH
16370: LD_OWVAR 67
16374: PUSH
16375: LD_INT 2
16377: EQUAL
16378: AND
16379: PUSH
16380: LD_EXP 19
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: AND
16389: PUSH
16390: LD_EXP 19
16394: PUSH
16395: LD_EXP 38
16399: LESS
16400: AND
16401: IFFALSE 16595
16403: GO 16405
16405: DISABLE
// begin PrepareArabianVehicles ;
16406: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16410: LD_EXP 65
16414: PPUSH
16415: LD_INT 135
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 134
16427: PUSH
16428: LD_INT 19
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 132
16437: PUSH
16438: LD_INT 26
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 128
16447: PUSH
16448: LD_INT 31
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 123
16457: PUSH
16458: LD_INT 37
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 118
16467: PUSH
16468: LD_INT 45
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: LD_INT 51
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 106
16487: PUSH
16488: LD_INT 57
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 99
16497: PUSH
16498: LD_INT 62
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 104
16507: PUSH
16508: LD_INT 71
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 110
16517: PUSH
16518: LD_INT 78
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 119
16527: PUSH
16528: LD_INT 88
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 128
16537: PUSH
16538: LD_INT 97
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 135
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 140
16557: PUSH
16558: LD_INT 153
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PPUSH
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: LD_INT 11
16590: PPUSH
16591: CALL 5042 0 5
// end ;
16595: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 1 and currentWave < enemyWaves do
16596: LD_EXP 17
16600: PUSH
16601: LD_OWVAR 67
16605: PUSH
16606: LD_INT 3
16608: GREATEREQUAL
16609: AND
16610: PUSH
16611: LD_EXP 19
16615: PUSH
16616: LD_INT 1
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_EXP 19
16625: PUSH
16626: LD_EXP 38
16630: LESS
16631: AND
16632: IFFALSE 16848
16634: GO 16636
16636: DISABLE
// begin PrepareArabianVehicles ;
16637: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16641: LD_EXP 65
16645: PPUSH
16646: LD_INT 135
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 134
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 132
16668: PUSH
16669: LD_INT 26
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 128
16678: PUSH
16679: LD_INT 31
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 123
16688: PUSH
16689: LD_INT 37
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: LD_INT 45
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 112
16708: PUSH
16709: LD_INT 51
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 57
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 99
16728: PUSH
16729: LD_INT 62
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 93
16738: PUSH
16739: LD_INT 67
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 86
16748: PUSH
16749: LD_INT 72
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 78
16758: PUSH
16759: LD_INT 75
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 71
16768: PUSH
16769: LD_INT 81
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 69
16778: PUSH
16779: LD_INT 88
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 71
16788: PUSH
16789: LD_INT 95
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 74
16798: PUSH
16799: LD_INT 103
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 80
16808: PUSH
16809: LD_INT 113
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: LD_INT 0
16837: PPUSH
16838: LD_INT 1
16840: PPUSH
16841: LD_INT 11
16843: PPUSH
16844: CALL 5042 0 5
// end ;
16848: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16849: LD_EXP 17
16853: PUSH
16854: LD_EXP 19
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: AND
16863: PUSH
16864: LD_EXP 19
16868: PUSH
16869: LD_EXP 38
16873: LESS
16874: AND
16875: IFFALSE 16952
16877: GO 16879
16879: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16880: LD_INT 7
16882: PPUSH
16883: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16887: LD_EXP 65
16891: PPUSH
16892: LD_INT 157
16894: PUSH
16895: LD_INT 31
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 194
16904: PUSH
16905: LD_INT 124
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 174
16914: PUSH
16915: LD_INT 158
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 151
16924: PUSH
16925: LD_INT 164
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: LD_INT 1
16946: NEG
16947: PPUSH
16948: CALL 5042 0 5
// end ;
16952: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16953: LD_EXP 17
16957: PUSH
16958: LD_EXP 19
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: AND
16967: PUSH
16968: LD_EXP 19
16972: PUSH
16973: LD_EXP 38
16977: LESS
16978: AND
16979: IFFALSE 17216
16981: GO 16983
16983: DISABLE
// begin wait ( 1 1$30 ) ;
16984: LD_INT 3150
16986: PPUSH
16987: CALL_OW 67
// currentWave = currentWave + 1 ;
16991: LD_ADDR_EXP 19
16995: PUSH
16996: LD_EXP 19
17000: PUSH
17001: LD_INT 1
17003: PLUS
17004: ST_TO_ADDR
// PrepareArabianVehicles ;
17005: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17009: LD_EXP 65
17013: PPUSH
17014: LD_INT 135
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 134
17026: PUSH
17027: LD_INT 19
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 132
17036: PUSH
17037: LD_INT 26
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 128
17046: PUSH
17047: LD_INT 31
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 123
17056: PUSH
17057: LD_INT 37
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 118
17066: PUSH
17067: LD_INT 45
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 112
17076: PUSH
17077: LD_INT 51
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 106
17086: PUSH
17087: LD_INT 57
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 99
17096: PUSH
17097: LD_INT 62
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 93
17106: PUSH
17107: LD_INT 67
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 86
17116: PUSH
17117: LD_INT 72
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 78
17126: PUSH
17127: LD_INT 75
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 71
17136: PUSH
17137: LD_INT 81
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 69
17146: PUSH
17147: LD_INT 88
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 71
17156: PUSH
17157: LD_INT 95
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 74
17166: PUSH
17167: LD_INT 103
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 80
17176: PUSH
17177: LD_INT 113
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: PPUSH
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: LD_INT 11
17211: PPUSH
17212: CALL 5042 0 5
// end ;
17216: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17217: LD_EXP 17
17221: PUSH
17222: LD_OWVAR 67
17226: PUSH
17227: LD_INT 2
17229: EQUAL
17230: AND
17231: PUSH
17232: LD_EXP 19
17236: PUSH
17237: LD_INT 2
17239: EQUAL
17240: AND
17241: PUSH
17242: LD_EXP 19
17246: PUSH
17247: LD_EXP 38
17251: LESS
17252: AND
17253: IFFALSE 17447
17255: GO 17257
17257: DISABLE
// begin PrepareArabianVehicles ;
17258: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17262: LD_EXP 65
17266: PPUSH
17267: LD_INT 135
17269: PUSH
17270: LD_INT 4
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 134
17279: PUSH
17280: LD_INT 19
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 132
17289: PUSH
17290: LD_INT 26
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 128
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 123
17309: PUSH
17310: LD_INT 37
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 118
17319: PUSH
17320: LD_INT 45
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 112
17329: PUSH
17330: LD_INT 51
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 106
17339: PUSH
17340: LD_INT 57
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 99
17349: PUSH
17350: LD_INT 62
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 104
17359: PUSH
17360: LD_INT 71
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 110
17369: PUSH
17370: LD_INT 78
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 119
17379: PUSH
17380: LD_INT 88
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 128
17389: PUSH
17390: LD_INT 97
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 135
17399: PUSH
17400: LD_INT 106
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 140
17409: PUSH
17410: LD_INT 153
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 11
17442: PPUSH
17443: CALL 5042 0 5
// end ;
17447: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 2 and currentWave < enemyWaves do
17448: LD_EXP 17
17452: PUSH
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 3
17460: GREATEREQUAL
17461: AND
17462: PUSH
17463: LD_EXP 19
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_EXP 19
17477: PUSH
17478: LD_EXP 38
17482: LESS
17483: AND
17484: IFFALSE 17678
17486: GO 17488
17488: DISABLE
// begin PrepareArabianVehicles ;
17489: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17493: LD_EXP 65
17497: PPUSH
17498: LD_INT 135
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 134
17510: PUSH
17511: LD_INT 19
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 132
17520: PUSH
17521: LD_INT 26
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 128
17530: PUSH
17531: LD_INT 31
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 123
17540: PUSH
17541: LD_INT 37
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 118
17550: PUSH
17551: LD_INT 45
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 112
17560: PUSH
17561: LD_INT 51
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 106
17570: PUSH
17571: LD_INT 57
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 99
17580: PUSH
17581: LD_INT 62
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 104
17590: PUSH
17591: LD_INT 71
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 110
17600: PUSH
17601: LD_INT 78
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 119
17610: PUSH
17611: LD_INT 88
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 128
17620: PUSH
17621: LD_INT 97
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 135
17630: PUSH
17631: LD_INT 106
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 153
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: PPUSH
17665: LD_INT 0
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 11
17673: PPUSH
17674: CALL 5042 0 5
// end ;
17678: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17679: LD_EXP 17
17683: PUSH
17684: LD_EXP 19
17688: PUSH
17689: LD_INT 3
17691: EQUAL
17692: AND
17693: PUSH
17694: LD_EXP 19
17698: PUSH
17699: LD_EXP 38
17703: LESS
17704: AND
17705: IFFALSE 17782
17707: GO 17709
17709: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17710: LD_INT 7
17712: PPUSH
17713: CALL 3867 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17717: LD_EXP 65
17721: PPUSH
17722: LD_INT 157
17724: PUSH
17725: LD_INT 31
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 194
17734: PUSH
17735: LD_INT 124
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 174
17744: PUSH
17745: LD_INT 158
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 151
17754: PUSH
17755: LD_INT 164
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PPUSH
17768: LD_INT 0
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 1
17776: NEG
17777: PPUSH
17778: CALL 5042 0 5
// end ;
17782: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17783: LD_EXP 17
17787: PUSH
17788: LD_EXP 19
17792: PUSH
17793: LD_INT 3
17795: EQUAL
17796: AND
17797: PUSH
17798: LD_EXP 19
17802: PUSH
17803: LD_EXP 38
17807: LESS
17808: AND
17809: IFFALSE 18046
17811: GO 17813
17813: DISABLE
// begin wait ( 1 1$30 ) ;
17814: LD_INT 3150
17816: PPUSH
17817: CALL_OW 67
// currentWave = currentWave + 1 ;
17821: LD_ADDR_EXP 19
17825: PUSH
17826: LD_EXP 19
17830: PUSH
17831: LD_INT 1
17833: PLUS
17834: ST_TO_ADDR
// PrepareArabianVehicles ;
17835: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17839: LD_EXP 65
17843: PPUSH
17844: LD_INT 135
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 134
17856: PUSH
17857: LD_INT 19
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 132
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 128
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 123
17886: PUSH
17887: LD_INT 37
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: LD_INT 45
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 112
17906: PUSH
17907: LD_INT 51
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 106
17916: PUSH
17917: LD_INT 57
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 99
17926: PUSH
17927: LD_INT 62
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 93
17936: PUSH
17937: LD_INT 67
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 86
17946: PUSH
17947: LD_INT 72
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 78
17956: PUSH
17957: LD_INT 75
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 71
17966: PUSH
17967: LD_INT 81
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 69
17976: PUSH
17977: LD_INT 88
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 71
17986: PUSH
17987: LD_INT 95
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 74
17996: PUSH
17997: LD_INT 103
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 80
18006: PUSH
18007: LD_INT 113
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: LD_INT 0
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_INT 11
18041: PPUSH
18042: CALL 5042 0 5
// end ;
18046: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
18047: LD_EXP 17
18051: PUSH
18052: LD_OWVAR 67
18056: PUSH
18057: LD_INT 2
18059: EQUAL
18060: AND
18061: PUSH
18062: LD_EXP 19
18066: PUSH
18067: LD_INT 3
18069: EQUAL
18070: AND
18071: PUSH
18072: LD_EXP 19
18076: PUSH
18077: LD_EXP 38
18081: LESS
18082: AND
18083: IFFALSE 18277
18085: GO 18087
18087: DISABLE
// begin PrepareArabianVehicles ;
18088: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18092: LD_EXP 65
18096: PPUSH
18097: LD_INT 135
18099: PUSH
18100: LD_INT 4
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 134
18109: PUSH
18110: LD_INT 19
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 132
18119: PUSH
18120: LD_INT 26
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 128
18129: PUSH
18130: LD_INT 31
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 123
18139: PUSH
18140: LD_INT 37
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 118
18149: PUSH
18150: LD_INT 45
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 112
18159: PUSH
18160: LD_INT 51
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 106
18169: PUSH
18170: LD_INT 57
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 99
18179: PUSH
18180: LD_INT 62
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 104
18189: PUSH
18190: LD_INT 71
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 110
18199: PUSH
18200: LD_INT 78
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 119
18209: PUSH
18210: LD_INT 88
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 128
18219: PUSH
18220: LD_INT 97
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 135
18229: PUSH
18230: LD_INT 106
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 140
18239: PUSH
18240: LD_INT 153
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PPUSH
18264: LD_INT 0
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_INT 11
18272: PPUSH
18273: CALL 5042 0 5
// end ;
18277: END
// every 2 2$0 trigger enableAttacks and Difficulty >= 3 and currentWave = 3 and currentWave < enemyWaves do
18278: LD_EXP 17
18282: PUSH
18283: LD_OWVAR 67
18287: PUSH
18288: LD_INT 3
18290: GREATEREQUAL
18291: AND
18292: PUSH
18293: LD_EXP 19
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: AND
18302: PUSH
18303: LD_EXP 19
18307: PUSH
18308: LD_EXP 38
18312: LESS
18313: AND
18314: IFFALSE 18508
18316: GO 18318
18318: DISABLE
// begin PrepareArabianVehicles ;
18319: CALL 3577 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18323: LD_EXP 65
18327: PPUSH
18328: LD_INT 135
18330: PUSH
18331: LD_INT 4
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 134
18340: PUSH
18341: LD_INT 19
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 132
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 128
18360: PUSH
18361: LD_INT 31
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 123
18370: PUSH
18371: LD_INT 37
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 118
18380: PUSH
18381: LD_INT 45
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 112
18390: PUSH
18391: LD_INT 51
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 106
18400: PUSH
18401: LD_INT 57
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 99
18410: PUSH
18411: LD_INT 62
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 104
18420: PUSH
18421: LD_INT 71
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 110
18430: PUSH
18431: LD_INT 78
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 119
18440: PUSH
18441: LD_INT 88
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 128
18450: PUSH
18451: LD_INT 97
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 135
18460: PUSH
18461: LD_INT 106
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 140
18470: PUSH
18471: LD_INT 153
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_INT 11
18503: PPUSH
18504: CALL 5042 0 5
// end ;
18508: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18509: LD_EXP 54
18513: PPUSH
18514: CALL_OW 305
18518: PUSH
18519: LD_EXP 23
18523: PUSH
18524: LD_INT 5
18526: LESS
18527: AND
18528: IFFALSE 18538
18530: GO 18532
18532: DISABLE
// begin PrepareArabianKiller ;
18533: CALL 4090 0 0
// enable ;
18537: ENABLE
// end ; end_of_file
18538: END
// export function SetAchievements ; begin
18539: LD_INT 0
18541: PPUSH
// if stealWarmCount = 0 then
18542: LD_EXP 12
18546: PUSH
18547: LD_INT 0
18549: EQUAL
18550: IFFALSE 18559
// SetAchievement ( ACH_ENO ) ;
18552: LD_STRING ACH_ENO
18554: PPUSH
18555: CALL_OW 543
// end ;
18559: LD_VAR 0 1
18563: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18564: LD_EXP 25
18568: PUSH
18569: LD_INT 6
18571: GREATEREQUAL
18572: IFFALSE 18584
18574: GO 18576
18576: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18577: LD_STRING ACH_DEFENSE
18579: PPUSH
18580: CALL_OW 543
18584: END
// every 1 trigger killedArabianUnits >= 25 do
18585: LD_EXP 22
18589: PUSH
18590: LD_INT 25
18592: GREATEREQUAL
18593: IFFALSE 18605
18595: GO 18597
18597: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18598: LD_STRING ACH_ARAB
18600: PPUSH
18601: CALL_OW 543
18605: END
// every 0 0$1 do
18606: GO 18608
18608: DISABLE
// begin enable ;
18609: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18610: LD_STRING updateTimer(
18612: PUSH
18613: LD_OWVAR 1
18617: STR
18618: PUSH
18619: LD_STRING );
18621: STR
18622: PPUSH
18623: CALL_OW 559
// end ;
18627: END
// export function SOS_MapStart ( ) ; begin
18628: LD_INT 0
18630: PPUSH
// if streamModeActive then
18631: LD_EXP 67
18635: IFFALSE 18644
// DefineStreamItems ( true ) ;
18637: LD_INT 1
18639: PPUSH
18640: CALL 20448 0 1
// UpdateLuaVariables ( ) ;
18644: CALL 18661 0 0
// UpdateFactoryWaypoints ( ) ;
18648: CALL 33309 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18652: CALL 33566 0 0
// end ;
18656: LD_VAR 0 1
18660: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
18661: LD_INT 0
18663: PPUSH
// if not globalGameSaveCounter then
18664: LD_EXP 66
18668: NOT
18669: IFFALSE 18680
// ToLua ( setGameSaveCounter(0) ) else
18671: LD_STRING setGameSaveCounter(0)
18673: PPUSH
18674: CALL_OW 559
18678: GO 18712
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18680: LD_ADDR_EXP 66
18684: PUSH
18685: LD_EXP 66
18689: PPUSH
18690: CALL 77686 0 1
18694: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18695: LD_STRING setGameSaveCounter(
18697: PUSH
18698: LD_EXP 66
18702: STR
18703: PUSH
18704: LD_STRING )
18706: STR
18707: PPUSH
18708: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18712: LD_STRING setGameDifficulty(
18714: PUSH
18715: LD_OWVAR 67
18719: STR
18720: PUSH
18721: LD_STRING )
18723: STR
18724: PPUSH
18725: CALL_OW 559
// end ;
18729: LD_VAR 0 1
18733: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18734: LD_INT 0
18736: PPUSH
// if p2 = stream_mode then
18737: LD_VAR 0 2
18741: PUSH
18742: LD_INT 100
18744: EQUAL
18745: IFFALSE 19748
// begin if not StreamModeActive then
18747: LD_EXP 67
18751: NOT
18752: IFFALSE 18762
// StreamModeActive := true ;
18754: LD_ADDR_EXP 67
18758: PUSH
18759: LD_INT 1
18761: ST_TO_ADDR
// if p3 = 0 then
18762: LD_VAR 0 3
18766: PUSH
18767: LD_INT 0
18769: EQUAL
18770: IFFALSE 18776
// InitStreamMode ;
18772: CALL 19984 0 0
// if p3 = 1 then
18776: LD_VAR 0 3
18780: PUSH
18781: LD_INT 1
18783: EQUAL
18784: IFFALSE 18794
// sRocket := true ;
18786: LD_ADDR_EXP 72
18790: PUSH
18791: LD_INT 1
18793: ST_TO_ADDR
// if p3 = 2 then
18794: LD_VAR 0 3
18798: PUSH
18799: LD_INT 2
18801: EQUAL
18802: IFFALSE 18812
// sSpeed := true ;
18804: LD_ADDR_EXP 71
18808: PUSH
18809: LD_INT 1
18811: ST_TO_ADDR
// if p3 = 3 then
18812: LD_VAR 0 3
18816: PUSH
18817: LD_INT 3
18819: EQUAL
18820: IFFALSE 18830
// sEngine := true ;
18822: LD_ADDR_EXP 73
18826: PUSH
18827: LD_INT 1
18829: ST_TO_ADDR
// if p3 = 4 then
18830: LD_VAR 0 3
18834: PUSH
18835: LD_INT 4
18837: EQUAL
18838: IFFALSE 18848
// sSpec := true ;
18840: LD_ADDR_EXP 70
18844: PUSH
18845: LD_INT 1
18847: ST_TO_ADDR
// if p3 = 5 then
18848: LD_VAR 0 3
18852: PUSH
18853: LD_INT 5
18855: EQUAL
18856: IFFALSE 18866
// sLevel := true ;
18858: LD_ADDR_EXP 74
18862: PUSH
18863: LD_INT 1
18865: ST_TO_ADDR
// if p3 = 6 then
18866: LD_VAR 0 3
18870: PUSH
18871: LD_INT 6
18873: EQUAL
18874: IFFALSE 18884
// sArmoury := true ;
18876: LD_ADDR_EXP 75
18880: PUSH
18881: LD_INT 1
18883: ST_TO_ADDR
// if p3 = 7 then
18884: LD_VAR 0 3
18888: PUSH
18889: LD_INT 7
18891: EQUAL
18892: IFFALSE 18902
// sRadar := true ;
18894: LD_ADDR_EXP 76
18898: PUSH
18899: LD_INT 1
18901: ST_TO_ADDR
// if p3 = 8 then
18902: LD_VAR 0 3
18906: PUSH
18907: LD_INT 8
18909: EQUAL
18910: IFFALSE 18920
// sBunker := true ;
18912: LD_ADDR_EXP 77
18916: PUSH
18917: LD_INT 1
18919: ST_TO_ADDR
// if p3 = 9 then
18920: LD_VAR 0 3
18924: PUSH
18925: LD_INT 9
18927: EQUAL
18928: IFFALSE 18938
// sHack := true ;
18930: LD_ADDR_EXP 78
18934: PUSH
18935: LD_INT 1
18937: ST_TO_ADDR
// if p3 = 10 then
18938: LD_VAR 0 3
18942: PUSH
18943: LD_INT 10
18945: EQUAL
18946: IFFALSE 18956
// sFire := true ;
18948: LD_ADDR_EXP 79
18952: PUSH
18953: LD_INT 1
18955: ST_TO_ADDR
// if p3 = 11 then
18956: LD_VAR 0 3
18960: PUSH
18961: LD_INT 11
18963: EQUAL
18964: IFFALSE 18974
// sRefresh := true ;
18966: LD_ADDR_EXP 80
18970: PUSH
18971: LD_INT 1
18973: ST_TO_ADDR
// if p3 = 12 then
18974: LD_VAR 0 3
18978: PUSH
18979: LD_INT 12
18981: EQUAL
18982: IFFALSE 18992
// sExp := true ;
18984: LD_ADDR_EXP 81
18988: PUSH
18989: LD_INT 1
18991: ST_TO_ADDR
// if p3 = 13 then
18992: LD_VAR 0 3
18996: PUSH
18997: LD_INT 13
18999: EQUAL
19000: IFFALSE 19010
// sDepot := true ;
19002: LD_ADDR_EXP 82
19006: PUSH
19007: LD_INT 1
19009: ST_TO_ADDR
// if p3 = 14 then
19010: LD_VAR 0 3
19014: PUSH
19015: LD_INT 14
19017: EQUAL
19018: IFFALSE 19028
// sFlag := true ;
19020: LD_ADDR_EXP 83
19024: PUSH
19025: LD_INT 1
19027: ST_TO_ADDR
// if p3 = 15 then
19028: LD_VAR 0 3
19032: PUSH
19033: LD_INT 15
19035: EQUAL
19036: IFFALSE 19046
// sKamikadze := true ;
19038: LD_ADDR_EXP 91
19042: PUSH
19043: LD_INT 1
19045: ST_TO_ADDR
// if p3 = 16 then
19046: LD_VAR 0 3
19050: PUSH
19051: LD_INT 16
19053: EQUAL
19054: IFFALSE 19064
// sTroll := true ;
19056: LD_ADDR_EXP 92
19060: PUSH
19061: LD_INT 1
19063: ST_TO_ADDR
// if p3 = 17 then
19064: LD_VAR 0 3
19068: PUSH
19069: LD_INT 17
19071: EQUAL
19072: IFFALSE 19082
// sSlow := true ;
19074: LD_ADDR_EXP 93
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// if p3 = 18 then
19082: LD_VAR 0 3
19086: PUSH
19087: LD_INT 18
19089: EQUAL
19090: IFFALSE 19100
// sLack := true ;
19092: LD_ADDR_EXP 94
19096: PUSH
19097: LD_INT 1
19099: ST_TO_ADDR
// if p3 = 19 then
19100: LD_VAR 0 3
19104: PUSH
19105: LD_INT 19
19107: EQUAL
19108: IFFALSE 19118
// sTank := true ;
19110: LD_ADDR_EXP 96
19114: PUSH
19115: LD_INT 1
19117: ST_TO_ADDR
// if p3 = 20 then
19118: LD_VAR 0 3
19122: PUSH
19123: LD_INT 20
19125: EQUAL
19126: IFFALSE 19136
// sRemote := true ;
19128: LD_ADDR_EXP 97
19132: PUSH
19133: LD_INT 1
19135: ST_TO_ADDR
// if p3 = 21 then
19136: LD_VAR 0 3
19140: PUSH
19141: LD_INT 21
19143: EQUAL
19144: IFFALSE 19154
// sPowell := true ;
19146: LD_ADDR_EXP 98
19150: PUSH
19151: LD_INT 1
19153: ST_TO_ADDR
// if p3 = 22 then
19154: LD_VAR 0 3
19158: PUSH
19159: LD_INT 22
19161: EQUAL
19162: IFFALSE 19172
// sTeleport := true ;
19164: LD_ADDR_EXP 101
19168: PUSH
19169: LD_INT 1
19171: ST_TO_ADDR
// if p3 = 23 then
19172: LD_VAR 0 3
19176: PUSH
19177: LD_INT 23
19179: EQUAL
19180: IFFALSE 19190
// sOilTower := true ;
19182: LD_ADDR_EXP 103
19186: PUSH
19187: LD_INT 1
19189: ST_TO_ADDR
// if p3 = 24 then
19190: LD_VAR 0 3
19194: PUSH
19195: LD_INT 24
19197: EQUAL
19198: IFFALSE 19208
// sShovel := true ;
19200: LD_ADDR_EXP 104
19204: PUSH
19205: LD_INT 1
19207: ST_TO_ADDR
// if p3 = 25 then
19208: LD_VAR 0 3
19212: PUSH
19213: LD_INT 25
19215: EQUAL
19216: IFFALSE 19226
// sSheik := true ;
19218: LD_ADDR_EXP 105
19222: PUSH
19223: LD_INT 1
19225: ST_TO_ADDR
// if p3 = 26 then
19226: LD_VAR 0 3
19230: PUSH
19231: LD_INT 26
19233: EQUAL
19234: IFFALSE 19244
// sEarthquake := true ;
19236: LD_ADDR_EXP 107
19240: PUSH
19241: LD_INT 1
19243: ST_TO_ADDR
// if p3 = 27 then
19244: LD_VAR 0 3
19248: PUSH
19249: LD_INT 27
19251: EQUAL
19252: IFFALSE 19262
// sAI := true ;
19254: LD_ADDR_EXP 108
19258: PUSH
19259: LD_INT 1
19261: ST_TO_ADDR
// if p3 = 28 then
19262: LD_VAR 0 3
19266: PUSH
19267: LD_INT 28
19269: EQUAL
19270: IFFALSE 19280
// sCargo := true ;
19272: LD_ADDR_EXP 111
19276: PUSH
19277: LD_INT 1
19279: ST_TO_ADDR
// if p3 = 29 then
19280: LD_VAR 0 3
19284: PUSH
19285: LD_INT 29
19287: EQUAL
19288: IFFALSE 19298
// sDLaser := true ;
19290: LD_ADDR_EXP 112
19294: PUSH
19295: LD_INT 1
19297: ST_TO_ADDR
// if p3 = 30 then
19298: LD_VAR 0 3
19302: PUSH
19303: LD_INT 30
19305: EQUAL
19306: IFFALSE 19316
// sExchange := true ;
19308: LD_ADDR_EXP 113
19312: PUSH
19313: LD_INT 1
19315: ST_TO_ADDR
// if p3 = 31 then
19316: LD_VAR 0 3
19320: PUSH
19321: LD_INT 31
19323: EQUAL
19324: IFFALSE 19334
// sFac := true ;
19326: LD_ADDR_EXP 114
19330: PUSH
19331: LD_INT 1
19333: ST_TO_ADDR
// if p3 = 32 then
19334: LD_VAR 0 3
19338: PUSH
19339: LD_INT 32
19341: EQUAL
19342: IFFALSE 19352
// sPower := true ;
19344: LD_ADDR_EXP 115
19348: PUSH
19349: LD_INT 1
19351: ST_TO_ADDR
// if p3 = 33 then
19352: LD_VAR 0 3
19356: PUSH
19357: LD_INT 33
19359: EQUAL
19360: IFFALSE 19370
// sRandom := true ;
19362: LD_ADDR_EXP 116
19366: PUSH
19367: LD_INT 1
19369: ST_TO_ADDR
// if p3 = 34 then
19370: LD_VAR 0 3
19374: PUSH
19375: LD_INT 34
19377: EQUAL
19378: IFFALSE 19388
// sShield := true ;
19380: LD_ADDR_EXP 117
19384: PUSH
19385: LD_INT 1
19387: ST_TO_ADDR
// if p3 = 35 then
19388: LD_VAR 0 3
19392: PUSH
19393: LD_INT 35
19395: EQUAL
19396: IFFALSE 19406
// sTime := true ;
19398: LD_ADDR_EXP 118
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
// if p3 = 36 then
19406: LD_VAR 0 3
19410: PUSH
19411: LD_INT 36
19413: EQUAL
19414: IFFALSE 19424
// sTools := true ;
19416: LD_ADDR_EXP 119
19420: PUSH
19421: LD_INT 1
19423: ST_TO_ADDR
// if p3 = 101 then
19424: LD_VAR 0 3
19428: PUSH
19429: LD_INT 101
19431: EQUAL
19432: IFFALSE 19442
// sSold := true ;
19434: LD_ADDR_EXP 84
19438: PUSH
19439: LD_INT 1
19441: ST_TO_ADDR
// if p3 = 102 then
19442: LD_VAR 0 3
19446: PUSH
19447: LD_INT 102
19449: EQUAL
19450: IFFALSE 19460
// sDiff := true ;
19452: LD_ADDR_EXP 85
19456: PUSH
19457: LD_INT 1
19459: ST_TO_ADDR
// if p3 = 103 then
19460: LD_VAR 0 3
19464: PUSH
19465: LD_INT 103
19467: EQUAL
19468: IFFALSE 19478
// sFog := true ;
19470: LD_ADDR_EXP 88
19474: PUSH
19475: LD_INT 1
19477: ST_TO_ADDR
// if p3 = 104 then
19478: LD_VAR 0 3
19482: PUSH
19483: LD_INT 104
19485: EQUAL
19486: IFFALSE 19496
// sReset := true ;
19488: LD_ADDR_EXP 89
19492: PUSH
19493: LD_INT 1
19495: ST_TO_ADDR
// if p3 = 105 then
19496: LD_VAR 0 3
19500: PUSH
19501: LD_INT 105
19503: EQUAL
19504: IFFALSE 19514
// sSun := true ;
19506: LD_ADDR_EXP 90
19510: PUSH
19511: LD_INT 1
19513: ST_TO_ADDR
// if p3 = 106 then
19514: LD_VAR 0 3
19518: PUSH
19519: LD_INT 106
19521: EQUAL
19522: IFFALSE 19532
// sTiger := true ;
19524: LD_ADDR_EXP 86
19528: PUSH
19529: LD_INT 1
19531: ST_TO_ADDR
// if p3 = 107 then
19532: LD_VAR 0 3
19536: PUSH
19537: LD_INT 107
19539: EQUAL
19540: IFFALSE 19550
// sBomb := true ;
19542: LD_ADDR_EXP 87
19546: PUSH
19547: LD_INT 1
19549: ST_TO_ADDR
// if p3 = 108 then
19550: LD_VAR 0 3
19554: PUSH
19555: LD_INT 108
19557: EQUAL
19558: IFFALSE 19568
// sWound := true ;
19560: LD_ADDR_EXP 95
19564: PUSH
19565: LD_INT 1
19567: ST_TO_ADDR
// if p3 = 109 then
19568: LD_VAR 0 3
19572: PUSH
19573: LD_INT 109
19575: EQUAL
19576: IFFALSE 19586
// sBetray := true ;
19578: LD_ADDR_EXP 99
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
// if p3 = 110 then
19586: LD_VAR 0 3
19590: PUSH
19591: LD_INT 110
19593: EQUAL
19594: IFFALSE 19604
// sContamin := true ;
19596: LD_ADDR_EXP 100
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// if p3 = 111 then
19604: LD_VAR 0 3
19608: PUSH
19609: LD_INT 111
19611: EQUAL
19612: IFFALSE 19622
// sOil := true ;
19614: LD_ADDR_EXP 102
19618: PUSH
19619: LD_INT 1
19621: ST_TO_ADDR
// if p3 = 112 then
19622: LD_VAR 0 3
19626: PUSH
19627: LD_INT 112
19629: EQUAL
19630: IFFALSE 19640
// sStu := true ;
19632: LD_ADDR_EXP 106
19636: PUSH
19637: LD_INT 1
19639: ST_TO_ADDR
// if p3 = 113 then
19640: LD_VAR 0 3
19644: PUSH
19645: LD_INT 113
19647: EQUAL
19648: IFFALSE 19658
// sBazooka := true ;
19650: LD_ADDR_EXP 109
19654: PUSH
19655: LD_INT 1
19657: ST_TO_ADDR
// if p3 = 114 then
19658: LD_VAR 0 3
19662: PUSH
19663: LD_INT 114
19665: EQUAL
19666: IFFALSE 19676
// sMortar := true ;
19668: LD_ADDR_EXP 110
19672: PUSH
19673: LD_INT 1
19675: ST_TO_ADDR
// if p3 = 115 then
19676: LD_VAR 0 3
19680: PUSH
19681: LD_INT 115
19683: EQUAL
19684: IFFALSE 19694
// sRanger := true ;
19686: LD_ADDR_EXP 120
19690: PUSH
19691: LD_INT 1
19693: ST_TO_ADDR
// if p3 = 116 then
19694: LD_VAR 0 3
19698: PUSH
19699: LD_INT 116
19701: EQUAL
19702: IFFALSE 19712
// sComputer := true ;
19704: LD_ADDR_EXP 121
19708: PUSH
19709: LD_INT 1
19711: ST_TO_ADDR
// if p3 = 117 then
19712: LD_VAR 0 3
19716: PUSH
19717: LD_INT 117
19719: EQUAL
19720: IFFALSE 19730
// s30 := true ;
19722: LD_ADDR_EXP 122
19726: PUSH
19727: LD_INT 1
19729: ST_TO_ADDR
// if p3 = 118 then
19730: LD_VAR 0 3
19734: PUSH
19735: LD_INT 118
19737: EQUAL
19738: IFFALSE 19748
// s60 := true ;
19740: LD_ADDR_EXP 123
19744: PUSH
19745: LD_INT 1
19747: ST_TO_ADDR
// end ; if p2 = hack_mode then
19748: LD_VAR 0 2
19752: PUSH
19753: LD_INT 101
19755: EQUAL
19756: IFFALSE 19884
// begin case p3 of 1 :
19758: LD_VAR 0 3
19762: PUSH
19763: LD_INT 1
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19778
19771: POP
// hHackUnlimitedResources ; 2 :
19772: CALL 32055 0 0
19776: GO 19884
19778: LD_INT 2
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19793
19786: POP
// hHackSetLevel10 ; 3 :
19787: CALL 32188 0 0
19791: GO 19884
19793: LD_INT 3
19795: DOUBLE
19796: EQUAL
19797: IFTRUE 19801
19799: GO 19808
19801: POP
// hHackSetLevel10YourUnits ; 4 :
19802: CALL 32273 0 0
19806: GO 19884
19808: LD_INT 4
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19823
19816: POP
// hHackInvincible ; 5 :
19817: CALL 32721 0 0
19821: GO 19884
19823: LD_INT 5
19825: DOUBLE
19826: EQUAL
19827: IFTRUE 19831
19829: GO 19838
19831: POP
// hHackInvisible ; 6 :
19832: CALL 32832 0 0
19836: GO 19884
19838: LD_INT 6
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 19853
19846: POP
// hHackChangeYourSide ; 7 :
19847: CALL 32889 0 0
19851: GO 19884
19853: LD_INT 7
19855: DOUBLE
19856: EQUAL
19857: IFTRUE 19861
19859: GO 19868
19861: POP
// hHackChangeUnitSide ; 8 :
19862: CALL 32931 0 0
19866: GO 19884
19868: LD_INT 8
19870: DOUBLE
19871: EQUAL
19872: IFTRUE 19876
19874: GO 19883
19876: POP
// hHackFog ; end ;
19877: CALL 33032 0 0
19881: GO 19884
19883: POP
// end ; if p2 = game_save_mode then
19884: LD_VAR 0 2
19888: PUSH
19889: LD_INT 102
19891: EQUAL
19892: IFFALSE 19957
// begin if p3 = 1 then
19894: LD_VAR 0 3
19898: PUSH
19899: LD_INT 1
19901: EQUAL
19902: IFFALSE 19914
// globalGameSaveCounter := p4 ;
19904: LD_ADDR_EXP 66
19908: PUSH
19909: LD_VAR 0 4
19913: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19914: LD_VAR 0 3
19918: PUSH
19919: LD_INT 2
19921: EQUAL
19922: PUSH
19923: LD_EXP 66
19927: AND
19928: IFFALSE 19947
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19930: LD_STRING setGameSaveCounter(
19932: PUSH
19933: LD_EXP 66
19937: STR
19938: PUSH
19939: LD_STRING )
19941: STR
19942: PPUSH
19943: CALL_OW 559
// display_strings := globalGameSaveCounter ;
19947: LD_ADDR_OWVAR 47
19951: PUSH
19952: LD_EXP 66
19956: ST_TO_ADDR
// end ; end ;
19957: LD_VAR 0 7
19961: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19962: GO 19964
19964: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19965: LD_STRING initStreamRollete();
19967: PPUSH
19968: CALL_OW 559
// InitStreamMode ;
19972: CALL 19984 0 0
// DefineStreamItems ( false ) ;
19976: LD_INT 0
19978: PPUSH
19979: CALL 20448 0 1
// end ;
19983: END
// function InitStreamMode ; begin
19984: LD_INT 0
19986: PPUSH
// streamModeActive := false ;
19987: LD_ADDR_EXP 67
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// normalCounter := 36 ;
19995: LD_ADDR_EXP 68
19999: PUSH
20000: LD_INT 36
20002: ST_TO_ADDR
// hardcoreCounter := 18 ;
20003: LD_ADDR_EXP 69
20007: PUSH
20008: LD_INT 18
20010: ST_TO_ADDR
// sRocket := false ;
20011: LD_ADDR_EXP 72
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// sSpeed := false ;
20019: LD_ADDR_EXP 71
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// sEngine := false ;
20027: LD_ADDR_EXP 73
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// sSpec := false ;
20035: LD_ADDR_EXP 70
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// sLevel := false ;
20043: LD_ADDR_EXP 74
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// sArmoury := false ;
20051: LD_ADDR_EXP 75
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// sRadar := false ;
20059: LD_ADDR_EXP 76
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// sBunker := false ;
20067: LD_ADDR_EXP 77
20071: PUSH
20072: LD_INT 0
20074: ST_TO_ADDR
// sHack := false ;
20075: LD_ADDR_EXP 78
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// sFire := false ;
20083: LD_ADDR_EXP 79
20087: PUSH
20088: LD_INT 0
20090: ST_TO_ADDR
// sRefresh := false ;
20091: LD_ADDR_EXP 80
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// sExp := false ;
20099: LD_ADDR_EXP 81
20103: PUSH
20104: LD_INT 0
20106: ST_TO_ADDR
// sDepot := false ;
20107: LD_ADDR_EXP 82
20111: PUSH
20112: LD_INT 0
20114: ST_TO_ADDR
// sFlag := false ;
20115: LD_ADDR_EXP 83
20119: PUSH
20120: LD_INT 0
20122: ST_TO_ADDR
// sKamikadze := false ;
20123: LD_ADDR_EXP 91
20127: PUSH
20128: LD_INT 0
20130: ST_TO_ADDR
// sTroll := false ;
20131: LD_ADDR_EXP 92
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
// sSlow := false ;
20139: LD_ADDR_EXP 93
20143: PUSH
20144: LD_INT 0
20146: ST_TO_ADDR
// sLack := false ;
20147: LD_ADDR_EXP 94
20151: PUSH
20152: LD_INT 0
20154: ST_TO_ADDR
// sTank := false ;
20155: LD_ADDR_EXP 96
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
// sRemote := false ;
20163: LD_ADDR_EXP 97
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// sPowell := false ;
20171: LD_ADDR_EXP 98
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// sTeleport := false ;
20179: LD_ADDR_EXP 101
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// sOilTower := false ;
20187: LD_ADDR_EXP 103
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// sShovel := false ;
20195: LD_ADDR_EXP 104
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// sSheik := false ;
20203: LD_ADDR_EXP 105
20207: PUSH
20208: LD_INT 0
20210: ST_TO_ADDR
// sEarthquake := false ;
20211: LD_ADDR_EXP 107
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// sAI := false ;
20219: LD_ADDR_EXP 108
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
// sCargo := false ;
20227: LD_ADDR_EXP 111
20231: PUSH
20232: LD_INT 0
20234: ST_TO_ADDR
// sDLaser := false ;
20235: LD_ADDR_EXP 112
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// sExchange := false ;
20243: LD_ADDR_EXP 113
20247: PUSH
20248: LD_INT 0
20250: ST_TO_ADDR
// sFac := false ;
20251: LD_ADDR_EXP 114
20255: PUSH
20256: LD_INT 0
20258: ST_TO_ADDR
// sPower := false ;
20259: LD_ADDR_EXP 115
20263: PUSH
20264: LD_INT 0
20266: ST_TO_ADDR
// sRandom := false ;
20267: LD_ADDR_EXP 116
20271: PUSH
20272: LD_INT 0
20274: ST_TO_ADDR
// sShield := false ;
20275: LD_ADDR_EXP 117
20279: PUSH
20280: LD_INT 0
20282: ST_TO_ADDR
// sTime := false ;
20283: LD_ADDR_EXP 118
20287: PUSH
20288: LD_INT 0
20290: ST_TO_ADDR
// sTools := false ;
20291: LD_ADDR_EXP 119
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// sSold := false ;
20299: LD_ADDR_EXP 84
20303: PUSH
20304: LD_INT 0
20306: ST_TO_ADDR
// sDiff := false ;
20307: LD_ADDR_EXP 85
20311: PUSH
20312: LD_INT 0
20314: ST_TO_ADDR
// sFog := false ;
20315: LD_ADDR_EXP 88
20319: PUSH
20320: LD_INT 0
20322: ST_TO_ADDR
// sReset := false ;
20323: LD_ADDR_EXP 89
20327: PUSH
20328: LD_INT 0
20330: ST_TO_ADDR
// sSun := false ;
20331: LD_ADDR_EXP 90
20335: PUSH
20336: LD_INT 0
20338: ST_TO_ADDR
// sTiger := false ;
20339: LD_ADDR_EXP 86
20343: PUSH
20344: LD_INT 0
20346: ST_TO_ADDR
// sBomb := false ;
20347: LD_ADDR_EXP 87
20351: PUSH
20352: LD_INT 0
20354: ST_TO_ADDR
// sWound := false ;
20355: LD_ADDR_EXP 95
20359: PUSH
20360: LD_INT 0
20362: ST_TO_ADDR
// sBetray := false ;
20363: LD_ADDR_EXP 99
20367: PUSH
20368: LD_INT 0
20370: ST_TO_ADDR
// sContamin := false ;
20371: LD_ADDR_EXP 100
20375: PUSH
20376: LD_INT 0
20378: ST_TO_ADDR
// sOil := false ;
20379: LD_ADDR_EXP 102
20383: PUSH
20384: LD_INT 0
20386: ST_TO_ADDR
// sStu := false ;
20387: LD_ADDR_EXP 106
20391: PUSH
20392: LD_INT 0
20394: ST_TO_ADDR
// sBazooka := false ;
20395: LD_ADDR_EXP 109
20399: PUSH
20400: LD_INT 0
20402: ST_TO_ADDR
// sMortar := false ;
20403: LD_ADDR_EXP 110
20407: PUSH
20408: LD_INT 0
20410: ST_TO_ADDR
// sRanger := false ;
20411: LD_ADDR_EXP 120
20415: PUSH
20416: LD_INT 0
20418: ST_TO_ADDR
// sComputer := false ;
20419: LD_ADDR_EXP 121
20423: PUSH
20424: LD_INT 0
20426: ST_TO_ADDR
// s30 := false ;
20427: LD_ADDR_EXP 122
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// s60 := false ;
20435: LD_ADDR_EXP 123
20439: PUSH
20440: LD_INT 0
20442: ST_TO_ADDR
// end ;
20443: LD_VAR 0 1
20447: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20448: LD_INT 0
20450: PPUSH
20451: PPUSH
20452: PPUSH
20453: PPUSH
20454: PPUSH
20455: PPUSH
20456: PPUSH
// result := [ ] ;
20457: LD_ADDR_VAR 0 2
20461: PUSH
20462: EMPTY
20463: ST_TO_ADDR
// if campaign_id = 1 then
20464: LD_OWVAR 69
20468: PUSH
20469: LD_INT 1
20471: EQUAL
20472: IFFALSE 23638
// begin case mission_number of 1 :
20474: LD_OWVAR 70
20478: PUSH
20479: LD_INT 1
20481: DOUBLE
20482: EQUAL
20483: IFTRUE 20487
20485: GO 20563
20487: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20488: LD_ADDR_VAR 0 2
20492: PUSH
20493: LD_INT 2
20495: PUSH
20496: LD_INT 4
20498: PUSH
20499: LD_INT 11
20501: PUSH
20502: LD_INT 12
20504: PUSH
20505: LD_INT 15
20507: PUSH
20508: LD_INT 16
20510: PUSH
20511: LD_INT 22
20513: PUSH
20514: LD_INT 23
20516: PUSH
20517: LD_INT 26
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 101
20533: PUSH
20534: LD_INT 102
20536: PUSH
20537: LD_INT 106
20539: PUSH
20540: LD_INT 116
20542: PUSH
20543: LD_INT 117
20545: PUSH
20546: LD_INT 118
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: ST_TO_ADDR
20561: GO 23636
20563: LD_INT 2
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20655
20571: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20572: LD_ADDR_VAR 0 2
20576: PUSH
20577: LD_INT 2
20579: PUSH
20580: LD_INT 4
20582: PUSH
20583: LD_INT 11
20585: PUSH
20586: LD_INT 12
20588: PUSH
20589: LD_INT 15
20591: PUSH
20592: LD_INT 16
20594: PUSH
20595: LD_INT 22
20597: PUSH
20598: LD_INT 23
20600: PUSH
20601: LD_INT 26
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 101
20617: PUSH
20618: LD_INT 102
20620: PUSH
20621: LD_INT 105
20623: PUSH
20624: LD_INT 106
20626: PUSH
20627: LD_INT 108
20629: PUSH
20630: LD_INT 116
20632: PUSH
20633: LD_INT 117
20635: PUSH
20636: LD_INT 118
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: ST_TO_ADDR
20653: GO 23636
20655: LD_INT 3
20657: DOUBLE
20658: EQUAL
20659: IFTRUE 20663
20661: GO 20751
20663: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20664: LD_ADDR_VAR 0 2
20668: PUSH
20669: LD_INT 2
20671: PUSH
20672: LD_INT 4
20674: PUSH
20675: LD_INT 5
20677: PUSH
20678: LD_INT 11
20680: PUSH
20681: LD_INT 12
20683: PUSH
20684: LD_INT 15
20686: PUSH
20687: LD_INT 16
20689: PUSH
20690: LD_INT 22
20692: PUSH
20693: LD_INT 26
20695: PUSH
20696: LD_INT 36
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 101
20713: PUSH
20714: LD_INT 102
20716: PUSH
20717: LD_INT 105
20719: PUSH
20720: LD_INT 106
20722: PUSH
20723: LD_INT 108
20725: PUSH
20726: LD_INT 116
20728: PUSH
20729: LD_INT 117
20731: PUSH
20732: LD_INT 118
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: ST_TO_ADDR
20749: GO 23636
20751: LD_INT 4
20753: DOUBLE
20754: EQUAL
20755: IFTRUE 20759
20757: GO 20855
20759: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20760: LD_ADDR_VAR 0 2
20764: PUSH
20765: LD_INT 2
20767: PUSH
20768: LD_INT 4
20770: PUSH
20771: LD_INT 5
20773: PUSH
20774: LD_INT 8
20776: PUSH
20777: LD_INT 11
20779: PUSH
20780: LD_INT 12
20782: PUSH
20783: LD_INT 15
20785: PUSH
20786: LD_INT 16
20788: PUSH
20789: LD_INT 22
20791: PUSH
20792: LD_INT 23
20794: PUSH
20795: LD_INT 26
20797: PUSH
20798: LD_INT 36
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 101
20817: PUSH
20818: LD_INT 102
20820: PUSH
20821: LD_INT 105
20823: PUSH
20824: LD_INT 106
20826: PUSH
20827: LD_INT 108
20829: PUSH
20830: LD_INT 116
20832: PUSH
20833: LD_INT 117
20835: PUSH
20836: LD_INT 118
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: ST_TO_ADDR
20853: GO 23636
20855: LD_INT 5
20857: DOUBLE
20858: EQUAL
20859: IFTRUE 20863
20861: GO 20975
20863: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20864: LD_ADDR_VAR 0 2
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: LD_INT 4
20874: PUSH
20875: LD_INT 5
20877: PUSH
20878: LD_INT 6
20880: PUSH
20881: LD_INT 8
20883: PUSH
20884: LD_INT 11
20886: PUSH
20887: LD_INT 12
20889: PUSH
20890: LD_INT 15
20892: PUSH
20893: LD_INT 16
20895: PUSH
20896: LD_INT 22
20898: PUSH
20899: LD_INT 23
20901: PUSH
20902: LD_INT 25
20904: PUSH
20905: LD_INT 26
20907: PUSH
20908: LD_INT 36
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 101
20929: PUSH
20930: LD_INT 102
20932: PUSH
20933: LD_INT 105
20935: PUSH
20936: LD_INT 106
20938: PUSH
20939: LD_INT 108
20941: PUSH
20942: LD_INT 109
20944: PUSH
20945: LD_INT 112
20947: PUSH
20948: LD_INT 116
20950: PUSH
20951: LD_INT 117
20953: PUSH
20954: LD_INT 118
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: ST_TO_ADDR
20973: GO 23636
20975: LD_INT 6
20977: DOUBLE
20978: EQUAL
20979: IFTRUE 20983
20981: GO 21115
20983: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20984: LD_ADDR_VAR 0 2
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: LD_INT 4
20994: PUSH
20995: LD_INT 5
20997: PUSH
20998: LD_INT 6
21000: PUSH
21001: LD_INT 8
21003: PUSH
21004: LD_INT 11
21006: PUSH
21007: LD_INT 12
21009: PUSH
21010: LD_INT 15
21012: PUSH
21013: LD_INT 16
21015: PUSH
21016: LD_INT 20
21018: PUSH
21019: LD_INT 21
21021: PUSH
21022: LD_INT 22
21024: PUSH
21025: LD_INT 23
21027: PUSH
21028: LD_INT 25
21030: PUSH
21031: LD_INT 26
21033: PUSH
21034: LD_INT 30
21036: PUSH
21037: LD_INT 31
21039: PUSH
21040: LD_INT 32
21042: PUSH
21043: LD_INT 36
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 101
21069: PUSH
21070: LD_INT 102
21072: PUSH
21073: LD_INT 105
21075: PUSH
21076: LD_INT 106
21078: PUSH
21079: LD_INT 108
21081: PUSH
21082: LD_INT 109
21084: PUSH
21085: LD_INT 112
21087: PUSH
21088: LD_INT 116
21090: PUSH
21091: LD_INT 117
21093: PUSH
21094: LD_INT 118
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: ST_TO_ADDR
21113: GO 23636
21115: LD_INT 7
21117: DOUBLE
21118: EQUAL
21119: IFTRUE 21123
21121: GO 21235
21123: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21124: LD_ADDR_VAR 0 2
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: LD_INT 4
21134: PUSH
21135: LD_INT 5
21137: PUSH
21138: LD_INT 7
21140: PUSH
21141: LD_INT 11
21143: PUSH
21144: LD_INT 12
21146: PUSH
21147: LD_INT 15
21149: PUSH
21150: LD_INT 16
21152: PUSH
21153: LD_INT 20
21155: PUSH
21156: LD_INT 21
21158: PUSH
21159: LD_INT 22
21161: PUSH
21162: LD_INT 23
21164: PUSH
21165: LD_INT 25
21167: PUSH
21168: LD_INT 26
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 101
21189: PUSH
21190: LD_INT 102
21192: PUSH
21193: LD_INT 103
21195: PUSH
21196: LD_INT 105
21198: PUSH
21199: LD_INT 106
21201: PUSH
21202: LD_INT 108
21204: PUSH
21205: LD_INT 112
21207: PUSH
21208: LD_INT 116
21210: PUSH
21211: LD_INT 117
21213: PUSH
21214: LD_INT 118
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: ST_TO_ADDR
21233: GO 23636
21235: LD_INT 8
21237: DOUBLE
21238: EQUAL
21239: IFTRUE 21243
21241: GO 21383
21243: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21244: LD_ADDR_VAR 0 2
21248: PUSH
21249: LD_INT 2
21251: PUSH
21252: LD_INT 4
21254: PUSH
21255: LD_INT 5
21257: PUSH
21258: LD_INT 6
21260: PUSH
21261: LD_INT 7
21263: PUSH
21264: LD_INT 8
21266: PUSH
21267: LD_INT 11
21269: PUSH
21270: LD_INT 12
21272: PUSH
21273: LD_INT 15
21275: PUSH
21276: LD_INT 16
21278: PUSH
21279: LD_INT 20
21281: PUSH
21282: LD_INT 21
21284: PUSH
21285: LD_INT 22
21287: PUSH
21288: LD_INT 23
21290: PUSH
21291: LD_INT 25
21293: PUSH
21294: LD_INT 26
21296: PUSH
21297: LD_INT 30
21299: PUSH
21300: LD_INT 31
21302: PUSH
21303: LD_INT 32
21305: PUSH
21306: LD_INT 36
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 101
21333: PUSH
21334: LD_INT 102
21336: PUSH
21337: LD_INT 103
21339: PUSH
21340: LD_INT 105
21342: PUSH
21343: LD_INT 106
21345: PUSH
21346: LD_INT 108
21348: PUSH
21349: LD_INT 109
21351: PUSH
21352: LD_INT 112
21354: PUSH
21355: LD_INT 116
21357: PUSH
21358: LD_INT 117
21360: PUSH
21361: LD_INT 118
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: ST_TO_ADDR
21381: GO 23636
21383: LD_INT 9
21385: DOUBLE
21386: EQUAL
21387: IFTRUE 21391
21389: GO 21539
21391: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21392: LD_ADDR_VAR 0 2
21396: PUSH
21397: LD_INT 2
21399: PUSH
21400: LD_INT 4
21402: PUSH
21403: LD_INT 5
21405: PUSH
21406: LD_INT 6
21408: PUSH
21409: LD_INT 7
21411: PUSH
21412: LD_INT 8
21414: PUSH
21415: LD_INT 11
21417: PUSH
21418: LD_INT 12
21420: PUSH
21421: LD_INT 15
21423: PUSH
21424: LD_INT 16
21426: PUSH
21427: LD_INT 20
21429: PUSH
21430: LD_INT 21
21432: PUSH
21433: LD_INT 22
21435: PUSH
21436: LD_INT 23
21438: PUSH
21439: LD_INT 25
21441: PUSH
21442: LD_INT 26
21444: PUSH
21445: LD_INT 28
21447: PUSH
21448: LD_INT 30
21450: PUSH
21451: LD_INT 31
21453: PUSH
21454: LD_INT 32
21456: PUSH
21457: LD_INT 36
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 101
21485: PUSH
21486: LD_INT 102
21488: PUSH
21489: LD_INT 103
21491: PUSH
21492: LD_INT 105
21494: PUSH
21495: LD_INT 106
21497: PUSH
21498: LD_INT 108
21500: PUSH
21501: LD_INT 109
21503: PUSH
21504: LD_INT 112
21506: PUSH
21507: LD_INT 114
21509: PUSH
21510: LD_INT 116
21512: PUSH
21513: LD_INT 117
21515: PUSH
21516: LD_INT 118
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: ST_TO_ADDR
21537: GO 23636
21539: LD_INT 10
21541: DOUBLE
21542: EQUAL
21543: IFTRUE 21547
21545: GO 21743
21547: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21548: LD_ADDR_VAR 0 2
21552: PUSH
21553: LD_INT 2
21555: PUSH
21556: LD_INT 4
21558: PUSH
21559: LD_INT 5
21561: PUSH
21562: LD_INT 6
21564: PUSH
21565: LD_INT 7
21567: PUSH
21568: LD_INT 8
21570: PUSH
21571: LD_INT 9
21573: PUSH
21574: LD_INT 10
21576: PUSH
21577: LD_INT 11
21579: PUSH
21580: LD_INT 12
21582: PUSH
21583: LD_INT 13
21585: PUSH
21586: LD_INT 14
21588: PUSH
21589: LD_INT 15
21591: PUSH
21592: LD_INT 16
21594: PUSH
21595: LD_INT 17
21597: PUSH
21598: LD_INT 18
21600: PUSH
21601: LD_INT 19
21603: PUSH
21604: LD_INT 20
21606: PUSH
21607: LD_INT 21
21609: PUSH
21610: LD_INT 22
21612: PUSH
21613: LD_INT 23
21615: PUSH
21616: LD_INT 24
21618: PUSH
21619: LD_INT 25
21621: PUSH
21622: LD_INT 26
21624: PUSH
21625: LD_INT 28
21627: PUSH
21628: LD_INT 30
21630: PUSH
21631: LD_INT 31
21633: PUSH
21634: LD_INT 32
21636: PUSH
21637: LD_INT 36
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 101
21673: PUSH
21674: LD_INT 102
21676: PUSH
21677: LD_INT 103
21679: PUSH
21680: LD_INT 104
21682: PUSH
21683: LD_INT 105
21685: PUSH
21686: LD_INT 106
21688: PUSH
21689: LD_INT 107
21691: PUSH
21692: LD_INT 108
21694: PUSH
21695: LD_INT 109
21697: PUSH
21698: LD_INT 110
21700: PUSH
21701: LD_INT 111
21703: PUSH
21704: LD_INT 112
21706: PUSH
21707: LD_INT 114
21709: PUSH
21710: LD_INT 116
21712: PUSH
21713: LD_INT 117
21715: PUSH
21716: LD_INT 118
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: ST_TO_ADDR
21741: GO 23636
21743: LD_INT 11
21745: DOUBLE
21746: EQUAL
21747: IFTRUE 21751
21749: GO 21955
21751: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21752: LD_ADDR_VAR 0 2
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 3
21762: PUSH
21763: LD_INT 4
21765: PUSH
21766: LD_INT 5
21768: PUSH
21769: LD_INT 6
21771: PUSH
21772: LD_INT 7
21774: PUSH
21775: LD_INT 8
21777: PUSH
21778: LD_INT 9
21780: PUSH
21781: LD_INT 10
21783: PUSH
21784: LD_INT 11
21786: PUSH
21787: LD_INT 12
21789: PUSH
21790: LD_INT 13
21792: PUSH
21793: LD_INT 14
21795: PUSH
21796: LD_INT 15
21798: PUSH
21799: LD_INT 16
21801: PUSH
21802: LD_INT 17
21804: PUSH
21805: LD_INT 18
21807: PUSH
21808: LD_INT 19
21810: PUSH
21811: LD_INT 20
21813: PUSH
21814: LD_INT 21
21816: PUSH
21817: LD_INT 22
21819: PUSH
21820: LD_INT 23
21822: PUSH
21823: LD_INT 24
21825: PUSH
21826: LD_INT 25
21828: PUSH
21829: LD_INT 26
21831: PUSH
21832: LD_INT 28
21834: PUSH
21835: LD_INT 30
21837: PUSH
21838: LD_INT 31
21840: PUSH
21841: LD_INT 32
21843: PUSH
21844: LD_INT 34
21846: PUSH
21847: LD_INT 36
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 101
21885: PUSH
21886: LD_INT 102
21888: PUSH
21889: LD_INT 103
21891: PUSH
21892: LD_INT 104
21894: PUSH
21895: LD_INT 105
21897: PUSH
21898: LD_INT 106
21900: PUSH
21901: LD_INT 107
21903: PUSH
21904: LD_INT 108
21906: PUSH
21907: LD_INT 109
21909: PUSH
21910: LD_INT 110
21912: PUSH
21913: LD_INT 111
21915: PUSH
21916: LD_INT 112
21918: PUSH
21919: LD_INT 114
21921: PUSH
21922: LD_INT 116
21924: PUSH
21925: LD_INT 117
21927: PUSH
21928: LD_INT 118
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: ST_TO_ADDR
21953: GO 23636
21955: LD_INT 12
21957: DOUBLE
21958: EQUAL
21959: IFTRUE 21963
21961: GO 22183
21963: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21964: LD_ADDR_VAR 0 2
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: LD_INT 2
21974: PUSH
21975: LD_INT 3
21977: PUSH
21978: LD_INT 4
21980: PUSH
21981: LD_INT 5
21983: PUSH
21984: LD_INT 6
21986: PUSH
21987: LD_INT 7
21989: PUSH
21990: LD_INT 8
21992: PUSH
21993: LD_INT 9
21995: PUSH
21996: LD_INT 10
21998: PUSH
21999: LD_INT 11
22001: PUSH
22002: LD_INT 12
22004: PUSH
22005: LD_INT 13
22007: PUSH
22008: LD_INT 14
22010: PUSH
22011: LD_INT 15
22013: PUSH
22014: LD_INT 16
22016: PUSH
22017: LD_INT 17
22019: PUSH
22020: LD_INT 18
22022: PUSH
22023: LD_INT 19
22025: PUSH
22026: LD_INT 20
22028: PUSH
22029: LD_INT 21
22031: PUSH
22032: LD_INT 22
22034: PUSH
22035: LD_INT 23
22037: PUSH
22038: LD_INT 24
22040: PUSH
22041: LD_INT 25
22043: PUSH
22044: LD_INT 26
22046: PUSH
22047: LD_INT 27
22049: PUSH
22050: LD_INT 28
22052: PUSH
22053: LD_INT 30
22055: PUSH
22056: LD_INT 31
22058: PUSH
22059: LD_INT 32
22061: PUSH
22062: LD_INT 33
22064: PUSH
22065: LD_INT 34
22067: PUSH
22068: LD_INT 36
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 101
22109: PUSH
22110: LD_INT 102
22112: PUSH
22113: LD_INT 103
22115: PUSH
22116: LD_INT 104
22118: PUSH
22119: LD_INT 105
22121: PUSH
22122: LD_INT 106
22124: PUSH
22125: LD_INT 107
22127: PUSH
22128: LD_INT 108
22130: PUSH
22131: LD_INT 109
22133: PUSH
22134: LD_INT 110
22136: PUSH
22137: LD_INT 111
22139: PUSH
22140: LD_INT 112
22142: PUSH
22143: LD_INT 113
22145: PUSH
22146: LD_INT 114
22148: PUSH
22149: LD_INT 116
22151: PUSH
22152: LD_INT 117
22154: PUSH
22155: LD_INT 118
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: ST_TO_ADDR
22181: GO 23636
22183: LD_INT 13
22185: DOUBLE
22186: EQUAL
22187: IFTRUE 22191
22189: GO 22399
22191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22192: LD_ADDR_VAR 0 2
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: LD_INT 3
22205: PUSH
22206: LD_INT 4
22208: PUSH
22209: LD_INT 5
22211: PUSH
22212: LD_INT 8
22214: PUSH
22215: LD_INT 9
22217: PUSH
22218: LD_INT 10
22220: PUSH
22221: LD_INT 11
22223: PUSH
22224: LD_INT 12
22226: PUSH
22227: LD_INT 14
22229: PUSH
22230: LD_INT 15
22232: PUSH
22233: LD_INT 16
22235: PUSH
22236: LD_INT 17
22238: PUSH
22239: LD_INT 18
22241: PUSH
22242: LD_INT 19
22244: PUSH
22245: LD_INT 20
22247: PUSH
22248: LD_INT 21
22250: PUSH
22251: LD_INT 22
22253: PUSH
22254: LD_INT 23
22256: PUSH
22257: LD_INT 24
22259: PUSH
22260: LD_INT 25
22262: PUSH
22263: LD_INT 26
22265: PUSH
22266: LD_INT 27
22268: PUSH
22269: LD_INT 28
22271: PUSH
22272: LD_INT 30
22274: PUSH
22275: LD_INT 31
22277: PUSH
22278: LD_INT 32
22280: PUSH
22281: LD_INT 33
22283: PUSH
22284: LD_INT 34
22286: PUSH
22287: LD_INT 36
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 101
22325: PUSH
22326: LD_INT 102
22328: PUSH
22329: LD_INT 103
22331: PUSH
22332: LD_INT 104
22334: PUSH
22335: LD_INT 105
22337: PUSH
22338: LD_INT 106
22340: PUSH
22341: LD_INT 107
22343: PUSH
22344: LD_INT 108
22346: PUSH
22347: LD_INT 109
22349: PUSH
22350: LD_INT 110
22352: PUSH
22353: LD_INT 111
22355: PUSH
22356: LD_INT 112
22358: PUSH
22359: LD_INT 113
22361: PUSH
22362: LD_INT 114
22364: PUSH
22365: LD_INT 116
22367: PUSH
22368: LD_INT 117
22370: PUSH
22371: LD_INT 118
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: ST_TO_ADDR
22397: GO 23636
22399: LD_INT 14
22401: DOUBLE
22402: EQUAL
22403: IFTRUE 22407
22405: GO 22631
22407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22408: LD_ADDR_VAR 0 2
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: LD_INT 3
22421: PUSH
22422: LD_INT 4
22424: PUSH
22425: LD_INT 5
22427: PUSH
22428: LD_INT 6
22430: PUSH
22431: LD_INT 7
22433: PUSH
22434: LD_INT 8
22436: PUSH
22437: LD_INT 9
22439: PUSH
22440: LD_INT 10
22442: PUSH
22443: LD_INT 11
22445: PUSH
22446: LD_INT 12
22448: PUSH
22449: LD_INT 13
22451: PUSH
22452: LD_INT 14
22454: PUSH
22455: LD_INT 15
22457: PUSH
22458: LD_INT 16
22460: PUSH
22461: LD_INT 17
22463: PUSH
22464: LD_INT 18
22466: PUSH
22467: LD_INT 19
22469: PUSH
22470: LD_INT 20
22472: PUSH
22473: LD_INT 21
22475: PUSH
22476: LD_INT 22
22478: PUSH
22479: LD_INT 23
22481: PUSH
22482: LD_INT 24
22484: PUSH
22485: LD_INT 25
22487: PUSH
22488: LD_INT 26
22490: PUSH
22491: LD_INT 27
22493: PUSH
22494: LD_INT 28
22496: PUSH
22497: LD_INT 29
22499: PUSH
22500: LD_INT 30
22502: PUSH
22503: LD_INT 31
22505: PUSH
22506: LD_INT 32
22508: PUSH
22509: LD_INT 33
22511: PUSH
22512: LD_INT 34
22514: PUSH
22515: LD_INT 36
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 101
22557: PUSH
22558: LD_INT 102
22560: PUSH
22561: LD_INT 103
22563: PUSH
22564: LD_INT 104
22566: PUSH
22567: LD_INT 105
22569: PUSH
22570: LD_INT 106
22572: PUSH
22573: LD_INT 107
22575: PUSH
22576: LD_INT 108
22578: PUSH
22579: LD_INT 109
22581: PUSH
22582: LD_INT 110
22584: PUSH
22585: LD_INT 111
22587: PUSH
22588: LD_INT 112
22590: PUSH
22591: LD_INT 113
22593: PUSH
22594: LD_INT 114
22596: PUSH
22597: LD_INT 116
22599: PUSH
22600: LD_INT 117
22602: PUSH
22603: LD_INT 118
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: ST_TO_ADDR
22629: GO 23636
22631: LD_INT 15
22633: DOUBLE
22634: EQUAL
22635: IFTRUE 22639
22637: GO 22863
22639: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22640: LD_ADDR_VAR 0 2
22644: PUSH
22645: LD_INT 1
22647: PUSH
22648: LD_INT 2
22650: PUSH
22651: LD_INT 3
22653: PUSH
22654: LD_INT 4
22656: PUSH
22657: LD_INT 5
22659: PUSH
22660: LD_INT 6
22662: PUSH
22663: LD_INT 7
22665: PUSH
22666: LD_INT 8
22668: PUSH
22669: LD_INT 9
22671: PUSH
22672: LD_INT 10
22674: PUSH
22675: LD_INT 11
22677: PUSH
22678: LD_INT 12
22680: PUSH
22681: LD_INT 13
22683: PUSH
22684: LD_INT 14
22686: PUSH
22687: LD_INT 15
22689: PUSH
22690: LD_INT 16
22692: PUSH
22693: LD_INT 17
22695: PUSH
22696: LD_INT 18
22698: PUSH
22699: LD_INT 19
22701: PUSH
22702: LD_INT 20
22704: PUSH
22705: LD_INT 21
22707: PUSH
22708: LD_INT 22
22710: PUSH
22711: LD_INT 23
22713: PUSH
22714: LD_INT 24
22716: PUSH
22717: LD_INT 25
22719: PUSH
22720: LD_INT 26
22722: PUSH
22723: LD_INT 27
22725: PUSH
22726: LD_INT 28
22728: PUSH
22729: LD_INT 29
22731: PUSH
22732: LD_INT 30
22734: PUSH
22735: LD_INT 31
22737: PUSH
22738: LD_INT 32
22740: PUSH
22741: LD_INT 33
22743: PUSH
22744: LD_INT 34
22746: PUSH
22747: LD_INT 36
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 101
22789: PUSH
22790: LD_INT 102
22792: PUSH
22793: LD_INT 103
22795: PUSH
22796: LD_INT 104
22798: PUSH
22799: LD_INT 105
22801: PUSH
22802: LD_INT 106
22804: PUSH
22805: LD_INT 107
22807: PUSH
22808: LD_INT 108
22810: PUSH
22811: LD_INT 109
22813: PUSH
22814: LD_INT 110
22816: PUSH
22817: LD_INT 111
22819: PUSH
22820: LD_INT 112
22822: PUSH
22823: LD_INT 113
22825: PUSH
22826: LD_INT 114
22828: PUSH
22829: LD_INT 116
22831: PUSH
22832: LD_INT 117
22834: PUSH
22835: LD_INT 118
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: ST_TO_ADDR
22861: GO 23636
22863: LD_INT 16
22865: DOUBLE
22866: EQUAL
22867: IFTRUE 22871
22869: GO 23007
22871: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22872: LD_ADDR_VAR 0 2
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: LD_INT 4
22882: PUSH
22883: LD_INT 5
22885: PUSH
22886: LD_INT 7
22888: PUSH
22889: LD_INT 11
22891: PUSH
22892: LD_INT 12
22894: PUSH
22895: LD_INT 15
22897: PUSH
22898: LD_INT 16
22900: PUSH
22901: LD_INT 20
22903: PUSH
22904: LD_INT 21
22906: PUSH
22907: LD_INT 22
22909: PUSH
22910: LD_INT 23
22912: PUSH
22913: LD_INT 25
22915: PUSH
22916: LD_INT 26
22918: PUSH
22919: LD_INT 30
22921: PUSH
22922: LD_INT 31
22924: PUSH
22925: LD_INT 32
22927: PUSH
22928: LD_INT 33
22930: PUSH
22931: LD_INT 34
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 101
22957: PUSH
22958: LD_INT 102
22960: PUSH
22961: LD_INT 103
22963: PUSH
22964: LD_INT 106
22966: PUSH
22967: LD_INT 108
22969: PUSH
22970: LD_INT 112
22972: PUSH
22973: LD_INT 113
22975: PUSH
22976: LD_INT 114
22978: PUSH
22979: LD_INT 116
22981: PUSH
22982: LD_INT 117
22984: PUSH
22985: LD_INT 118
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: ST_TO_ADDR
23005: GO 23636
23007: LD_INT 17
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23239
23015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23016: LD_ADDR_VAR 0 2
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: LD_INT 2
23026: PUSH
23027: LD_INT 3
23029: PUSH
23030: LD_INT 4
23032: PUSH
23033: LD_INT 5
23035: PUSH
23036: LD_INT 6
23038: PUSH
23039: LD_INT 7
23041: PUSH
23042: LD_INT 8
23044: PUSH
23045: LD_INT 9
23047: PUSH
23048: LD_INT 10
23050: PUSH
23051: LD_INT 11
23053: PUSH
23054: LD_INT 12
23056: PUSH
23057: LD_INT 13
23059: PUSH
23060: LD_INT 14
23062: PUSH
23063: LD_INT 15
23065: PUSH
23066: LD_INT 16
23068: PUSH
23069: LD_INT 17
23071: PUSH
23072: LD_INT 18
23074: PUSH
23075: LD_INT 19
23077: PUSH
23078: LD_INT 20
23080: PUSH
23081: LD_INT 21
23083: PUSH
23084: LD_INT 22
23086: PUSH
23087: LD_INT 23
23089: PUSH
23090: LD_INT 24
23092: PUSH
23093: LD_INT 25
23095: PUSH
23096: LD_INT 26
23098: PUSH
23099: LD_INT 27
23101: PUSH
23102: LD_INT 28
23104: PUSH
23105: LD_INT 29
23107: PUSH
23108: LD_INT 30
23110: PUSH
23111: LD_INT 31
23113: PUSH
23114: LD_INT 32
23116: PUSH
23117: LD_INT 33
23119: PUSH
23120: LD_INT 34
23122: PUSH
23123: LD_INT 36
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 101
23165: PUSH
23166: LD_INT 102
23168: PUSH
23169: LD_INT 103
23171: PUSH
23172: LD_INT 104
23174: PUSH
23175: LD_INT 105
23177: PUSH
23178: LD_INT 106
23180: PUSH
23181: LD_INT 107
23183: PUSH
23184: LD_INT 108
23186: PUSH
23187: LD_INT 109
23189: PUSH
23190: LD_INT 110
23192: PUSH
23193: LD_INT 111
23195: PUSH
23196: LD_INT 112
23198: PUSH
23199: LD_INT 113
23201: PUSH
23202: LD_INT 114
23204: PUSH
23205: LD_INT 116
23207: PUSH
23208: LD_INT 117
23210: PUSH
23211: LD_INT 118
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: ST_TO_ADDR
23237: GO 23636
23239: LD_INT 18
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23395
23247: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_INT 2
23255: PUSH
23256: LD_INT 4
23258: PUSH
23259: LD_INT 5
23261: PUSH
23262: LD_INT 7
23264: PUSH
23265: LD_INT 11
23267: PUSH
23268: LD_INT 12
23270: PUSH
23271: LD_INT 15
23273: PUSH
23274: LD_INT 16
23276: PUSH
23277: LD_INT 20
23279: PUSH
23280: LD_INT 21
23282: PUSH
23283: LD_INT 22
23285: PUSH
23286: LD_INT 23
23288: PUSH
23289: LD_INT 25
23291: PUSH
23292: LD_INT 26
23294: PUSH
23295: LD_INT 30
23297: PUSH
23298: LD_INT 31
23300: PUSH
23301: LD_INT 32
23303: PUSH
23304: LD_INT 33
23306: PUSH
23307: LD_INT 34
23309: PUSH
23310: LD_INT 35
23312: PUSH
23313: LD_INT 36
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 101
23341: PUSH
23342: LD_INT 102
23344: PUSH
23345: LD_INT 103
23347: PUSH
23348: LD_INT 106
23350: PUSH
23351: LD_INT 108
23353: PUSH
23354: LD_INT 112
23356: PUSH
23357: LD_INT 113
23359: PUSH
23360: LD_INT 114
23362: PUSH
23363: LD_INT 115
23365: PUSH
23366: LD_INT 116
23368: PUSH
23369: LD_INT 117
23371: PUSH
23372: LD_INT 118
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: ST_TO_ADDR
23393: GO 23636
23395: LD_INT 19
23397: DOUBLE
23398: EQUAL
23399: IFTRUE 23403
23401: GO 23635
23403: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23404: LD_ADDR_VAR 0 2
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 2
23414: PUSH
23415: LD_INT 3
23417: PUSH
23418: LD_INT 4
23420: PUSH
23421: LD_INT 5
23423: PUSH
23424: LD_INT 6
23426: PUSH
23427: LD_INT 7
23429: PUSH
23430: LD_INT 8
23432: PUSH
23433: LD_INT 9
23435: PUSH
23436: LD_INT 10
23438: PUSH
23439: LD_INT 11
23441: PUSH
23442: LD_INT 12
23444: PUSH
23445: LD_INT 13
23447: PUSH
23448: LD_INT 14
23450: PUSH
23451: LD_INT 15
23453: PUSH
23454: LD_INT 16
23456: PUSH
23457: LD_INT 17
23459: PUSH
23460: LD_INT 18
23462: PUSH
23463: LD_INT 19
23465: PUSH
23466: LD_INT 20
23468: PUSH
23469: LD_INT 21
23471: PUSH
23472: LD_INT 22
23474: PUSH
23475: LD_INT 23
23477: PUSH
23478: LD_INT 24
23480: PUSH
23481: LD_INT 25
23483: PUSH
23484: LD_INT 26
23486: PUSH
23487: LD_INT 27
23489: PUSH
23490: LD_INT 28
23492: PUSH
23493: LD_INT 29
23495: PUSH
23496: LD_INT 30
23498: PUSH
23499: LD_INT 31
23501: PUSH
23502: LD_INT 32
23504: PUSH
23505: LD_INT 33
23507: PUSH
23508: LD_INT 34
23510: PUSH
23511: LD_INT 35
23513: PUSH
23514: LD_INT 36
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 101
23557: PUSH
23558: LD_INT 102
23560: PUSH
23561: LD_INT 103
23563: PUSH
23564: LD_INT 104
23566: PUSH
23567: LD_INT 105
23569: PUSH
23570: LD_INT 106
23572: PUSH
23573: LD_INT 107
23575: PUSH
23576: LD_INT 108
23578: PUSH
23579: LD_INT 109
23581: PUSH
23582: LD_INT 110
23584: PUSH
23585: LD_INT 111
23587: PUSH
23588: LD_INT 112
23590: PUSH
23591: LD_INT 113
23593: PUSH
23594: LD_INT 114
23596: PUSH
23597: LD_INT 115
23599: PUSH
23600: LD_INT 116
23602: PUSH
23603: LD_INT 117
23605: PUSH
23606: LD_INT 118
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: ST_TO_ADDR
23633: GO 23636
23635: POP
// end else
23636: GO 23867
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23638: LD_ADDR_VAR 0 2
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: LD_INT 4
23654: PUSH
23655: LD_INT 5
23657: PUSH
23658: LD_INT 6
23660: PUSH
23661: LD_INT 7
23663: PUSH
23664: LD_INT 8
23666: PUSH
23667: LD_INT 9
23669: PUSH
23670: LD_INT 10
23672: PUSH
23673: LD_INT 11
23675: PUSH
23676: LD_INT 12
23678: PUSH
23679: LD_INT 13
23681: PUSH
23682: LD_INT 14
23684: PUSH
23685: LD_INT 15
23687: PUSH
23688: LD_INT 16
23690: PUSH
23691: LD_INT 17
23693: PUSH
23694: LD_INT 18
23696: PUSH
23697: LD_INT 19
23699: PUSH
23700: LD_INT 20
23702: PUSH
23703: LD_INT 21
23705: PUSH
23706: LD_INT 22
23708: PUSH
23709: LD_INT 23
23711: PUSH
23712: LD_INT 24
23714: PUSH
23715: LD_INT 25
23717: PUSH
23718: LD_INT 26
23720: PUSH
23721: LD_INT 27
23723: PUSH
23724: LD_INT 28
23726: PUSH
23727: LD_INT 29
23729: PUSH
23730: LD_INT 30
23732: PUSH
23733: LD_INT 31
23735: PUSH
23736: LD_INT 32
23738: PUSH
23739: LD_INT 33
23741: PUSH
23742: LD_INT 34
23744: PUSH
23745: LD_INT 35
23747: PUSH
23748: LD_INT 36
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 101
23791: PUSH
23792: LD_INT 102
23794: PUSH
23795: LD_INT 103
23797: PUSH
23798: LD_INT 104
23800: PUSH
23801: LD_INT 105
23803: PUSH
23804: LD_INT 106
23806: PUSH
23807: LD_INT 107
23809: PUSH
23810: LD_INT 108
23812: PUSH
23813: LD_INT 109
23815: PUSH
23816: LD_INT 110
23818: PUSH
23819: LD_INT 111
23821: PUSH
23822: LD_INT 112
23824: PUSH
23825: LD_INT 113
23827: PUSH
23828: LD_INT 114
23830: PUSH
23831: LD_INT 115
23833: PUSH
23834: LD_INT 116
23836: PUSH
23837: LD_INT 117
23839: PUSH
23840: LD_INT 118
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: ST_TO_ADDR
// if result then
23867: LD_VAR 0 2
23871: IFFALSE 24657
// begin normal :=  ;
23873: LD_ADDR_VAR 0 5
23877: PUSH
23878: LD_STRING 
23880: ST_TO_ADDR
// hardcore :=  ;
23881: LD_ADDR_VAR 0 6
23885: PUSH
23886: LD_STRING 
23888: ST_TO_ADDR
// active :=  ;
23889: LD_ADDR_VAR 0 7
23893: PUSH
23894: LD_STRING 
23896: ST_TO_ADDR
// for i = 1 to normalCounter do
23897: LD_ADDR_VAR 0 8
23901: PUSH
23902: DOUBLE
23903: LD_INT 1
23905: DEC
23906: ST_TO_ADDR
23907: LD_EXP 68
23911: PUSH
23912: FOR_TO
23913: IFFALSE 24014
// begin tmp := 0 ;
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_STRING 0
23922: ST_TO_ADDR
// if result [ 1 ] then
23923: LD_VAR 0 2
23927: PUSH
23928: LD_INT 1
23930: ARRAY
23931: IFFALSE 23996
// if result [ 1 ] [ 1 ] = i then
23933: LD_VAR 0 2
23937: PUSH
23938: LD_INT 1
23940: ARRAY
23941: PUSH
23942: LD_INT 1
23944: ARRAY
23945: PUSH
23946: LD_VAR 0 8
23950: EQUAL
23951: IFFALSE 23996
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23953: LD_ADDR_VAR 0 2
23957: PUSH
23958: LD_VAR 0 2
23962: PPUSH
23963: LD_INT 1
23965: PPUSH
23966: LD_VAR 0 2
23970: PUSH
23971: LD_INT 1
23973: ARRAY
23974: PPUSH
23975: LD_INT 1
23977: PPUSH
23978: CALL_OW 3
23982: PPUSH
23983: CALL_OW 1
23987: ST_TO_ADDR
// tmp := 1 ;
23988: LD_ADDR_VAR 0 3
23992: PUSH
23993: LD_STRING 1
23995: ST_TO_ADDR
// end ; normal := normal & tmp ;
23996: LD_ADDR_VAR 0 5
24000: PUSH
24001: LD_VAR 0 5
24005: PUSH
24006: LD_VAR 0 3
24010: STR
24011: ST_TO_ADDR
// end ;
24012: GO 23912
24014: POP
24015: POP
// for i = 1 to hardcoreCounter do
24016: LD_ADDR_VAR 0 8
24020: PUSH
24021: DOUBLE
24022: LD_INT 1
24024: DEC
24025: ST_TO_ADDR
24026: LD_EXP 69
24030: PUSH
24031: FOR_TO
24032: IFFALSE 24137
// begin tmp := 0 ;
24034: LD_ADDR_VAR 0 3
24038: PUSH
24039: LD_STRING 0
24041: ST_TO_ADDR
// if result [ 2 ] then
24042: LD_VAR 0 2
24046: PUSH
24047: LD_INT 2
24049: ARRAY
24050: IFFALSE 24119
// if result [ 2 ] [ 1 ] = 100 + i then
24052: LD_VAR 0 2
24056: PUSH
24057: LD_INT 2
24059: ARRAY
24060: PUSH
24061: LD_INT 1
24063: ARRAY
24064: PUSH
24065: LD_INT 100
24067: PUSH
24068: LD_VAR 0 8
24072: PLUS
24073: EQUAL
24074: IFFALSE 24119
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24076: LD_ADDR_VAR 0 2
24080: PUSH
24081: LD_VAR 0 2
24085: PPUSH
24086: LD_INT 2
24088: PPUSH
24089: LD_VAR 0 2
24093: PUSH
24094: LD_INT 2
24096: ARRAY
24097: PPUSH
24098: LD_INT 1
24100: PPUSH
24101: CALL_OW 3
24105: PPUSH
24106: CALL_OW 1
24110: ST_TO_ADDR
// tmp := 1 ;
24111: LD_ADDR_VAR 0 3
24115: PUSH
24116: LD_STRING 1
24118: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24119: LD_ADDR_VAR 0 6
24123: PUSH
24124: LD_VAR 0 6
24128: PUSH
24129: LD_VAR 0 3
24133: STR
24134: ST_TO_ADDR
// end ;
24135: GO 24031
24137: POP
24138: POP
// if isGameLoad then
24139: LD_VAR 0 1
24143: IFFALSE 24618
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24145: LD_ADDR_VAR 0 4
24149: PUSH
24150: LD_EXP 72
24154: PUSH
24155: LD_EXP 71
24159: PUSH
24160: LD_EXP 73
24164: PUSH
24165: LD_EXP 70
24169: PUSH
24170: LD_EXP 74
24174: PUSH
24175: LD_EXP 75
24179: PUSH
24180: LD_EXP 76
24184: PUSH
24185: LD_EXP 77
24189: PUSH
24190: LD_EXP 78
24194: PUSH
24195: LD_EXP 79
24199: PUSH
24200: LD_EXP 80
24204: PUSH
24205: LD_EXP 81
24209: PUSH
24210: LD_EXP 82
24214: PUSH
24215: LD_EXP 83
24219: PUSH
24220: LD_EXP 91
24224: PUSH
24225: LD_EXP 92
24229: PUSH
24230: LD_EXP 93
24234: PUSH
24235: LD_EXP 94
24239: PUSH
24240: LD_EXP 96
24244: PUSH
24245: LD_EXP 97
24249: PUSH
24250: LD_EXP 98
24254: PUSH
24255: LD_EXP 101
24259: PUSH
24260: LD_EXP 103
24264: PUSH
24265: LD_EXP 104
24269: PUSH
24270: LD_EXP 105
24274: PUSH
24275: LD_EXP 107
24279: PUSH
24280: LD_EXP 108
24284: PUSH
24285: LD_EXP 111
24289: PUSH
24290: LD_EXP 112
24294: PUSH
24295: LD_EXP 113
24299: PUSH
24300: LD_EXP 114
24304: PUSH
24305: LD_EXP 115
24309: PUSH
24310: LD_EXP 116
24314: PUSH
24315: LD_EXP 117
24319: PUSH
24320: LD_EXP 118
24324: PUSH
24325: LD_EXP 119
24329: PUSH
24330: LD_EXP 84
24334: PUSH
24335: LD_EXP 85
24339: PUSH
24340: LD_EXP 88
24344: PUSH
24345: LD_EXP 89
24349: PUSH
24350: LD_EXP 90
24354: PUSH
24355: LD_EXP 86
24359: PUSH
24360: LD_EXP 87
24364: PUSH
24365: LD_EXP 95
24369: PUSH
24370: LD_EXP 99
24374: PUSH
24375: LD_EXP 100
24379: PUSH
24380: LD_EXP 102
24384: PUSH
24385: LD_EXP 106
24389: PUSH
24390: LD_EXP 109
24394: PUSH
24395: LD_EXP 110
24399: PUSH
24400: LD_EXP 120
24404: PUSH
24405: LD_EXP 121
24409: PUSH
24410: LD_EXP 122
24414: PUSH
24415: LD_EXP 123
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: ST_TO_ADDR
// tmp :=  ;
24476: LD_ADDR_VAR 0 3
24480: PUSH
24481: LD_STRING 
24483: ST_TO_ADDR
// for i = 1 to normalCounter do
24484: LD_ADDR_VAR 0 8
24488: PUSH
24489: DOUBLE
24490: LD_INT 1
24492: DEC
24493: ST_TO_ADDR
24494: LD_EXP 68
24498: PUSH
24499: FOR_TO
24500: IFFALSE 24536
// begin if flags [ i ] then
24502: LD_VAR 0 4
24506: PUSH
24507: LD_VAR 0 8
24511: ARRAY
24512: IFFALSE 24534
// tmp := tmp & i & ; ;
24514: LD_ADDR_VAR 0 3
24518: PUSH
24519: LD_VAR 0 3
24523: PUSH
24524: LD_VAR 0 8
24528: STR
24529: PUSH
24530: LD_STRING ;
24532: STR
24533: ST_TO_ADDR
// end ;
24534: GO 24499
24536: POP
24537: POP
// for i = 1 to hardcoreCounter do
24538: LD_ADDR_VAR 0 8
24542: PUSH
24543: DOUBLE
24544: LD_INT 1
24546: DEC
24547: ST_TO_ADDR
24548: LD_EXP 69
24552: PUSH
24553: FOR_TO
24554: IFFALSE 24600
// begin if flags [ normalCounter + i ] then
24556: LD_VAR 0 4
24560: PUSH
24561: LD_EXP 68
24565: PUSH
24566: LD_VAR 0 8
24570: PLUS
24571: ARRAY
24572: IFFALSE 24598
// tmp := tmp & ( 100 + i ) & ; ;
24574: LD_ADDR_VAR 0 3
24578: PUSH
24579: LD_VAR 0 3
24583: PUSH
24584: LD_INT 100
24586: PUSH
24587: LD_VAR 0 8
24591: PLUS
24592: STR
24593: PUSH
24594: LD_STRING ;
24596: STR
24597: ST_TO_ADDR
// end ;
24598: GO 24553
24600: POP
24601: POP
// if tmp then
24602: LD_VAR 0 3
24606: IFFALSE 24618
// active := tmp ;
24608: LD_ADDR_VAR 0 7
24612: PUSH
24613: LD_VAR 0 3
24617: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24618: LD_STRING getStreamItemsFromMission("
24620: PUSH
24621: LD_VAR 0 5
24625: STR
24626: PUSH
24627: LD_STRING ","
24629: STR
24630: PUSH
24631: LD_VAR 0 6
24635: STR
24636: PUSH
24637: LD_STRING ","
24639: STR
24640: PUSH
24641: LD_VAR 0 7
24645: STR
24646: PUSH
24647: LD_STRING ")
24649: STR
24650: PPUSH
24651: CALL_OW 559
// end else
24655: GO 24664
// ToLua ( getStreamItemsFromMission("","","") ) ;
24657: LD_STRING getStreamItemsFromMission("","","")
24659: PPUSH
24660: CALL_OW 559
// end ;
24664: LD_VAR 0 2
24668: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24669: LD_EXP 67
24673: PUSH
24674: LD_EXP 72
24678: AND
24679: IFFALSE 24803
24681: GO 24683
24683: DISABLE
24684: LD_INT 0
24686: PPUSH
24687: PPUSH
// begin enable ;
24688: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24689: LD_ADDR_VAR 0 2
24693: PUSH
24694: LD_INT 22
24696: PUSH
24697: LD_OWVAR 2
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 2
24708: PUSH
24709: LD_INT 34
24711: PUSH
24712: LD_INT 7
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 34
24721: PUSH
24722: LD_INT 45
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 34
24731: PUSH
24732: LD_INT 28
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 34
24741: PUSH
24742: LD_INT 47
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PPUSH
24760: CALL_OW 69
24764: ST_TO_ADDR
// if not tmp then
24765: LD_VAR 0 2
24769: NOT
24770: IFFALSE 24774
// exit ;
24772: GO 24803
// for i in tmp do
24774: LD_ADDR_VAR 0 1
24778: PUSH
24779: LD_VAR 0 2
24783: PUSH
24784: FOR_IN
24785: IFFALSE 24801
// begin SetLives ( i , 0 ) ;
24787: LD_VAR 0 1
24791: PPUSH
24792: LD_INT 0
24794: PPUSH
24795: CALL_OW 234
// end ;
24799: GO 24784
24801: POP
24802: POP
// end ;
24803: PPOPN 2
24805: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24806: LD_EXP 67
24810: PUSH
24811: LD_EXP 73
24815: AND
24816: IFFALSE 24900
24818: GO 24820
24820: DISABLE
24821: LD_INT 0
24823: PPUSH
24824: PPUSH
// begin enable ;
24825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24826: LD_ADDR_VAR 0 2
24830: PUSH
24831: LD_INT 22
24833: PUSH
24834: LD_OWVAR 2
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 32
24845: PUSH
24846: LD_INT 3
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PPUSH
24857: CALL_OW 69
24861: ST_TO_ADDR
// if not tmp then
24862: LD_VAR 0 2
24866: NOT
24867: IFFALSE 24871
// exit ;
24869: GO 24900
// for i in tmp do
24871: LD_ADDR_VAR 0 1
24875: PUSH
24876: LD_VAR 0 2
24880: PUSH
24881: FOR_IN
24882: IFFALSE 24898
// begin SetLives ( i , 0 ) ;
24884: LD_VAR 0 1
24888: PPUSH
24889: LD_INT 0
24891: PPUSH
24892: CALL_OW 234
// end ;
24896: GO 24881
24898: POP
24899: POP
// end ;
24900: PPOPN 2
24902: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24903: LD_EXP 67
24907: PUSH
24908: LD_EXP 70
24912: AND
24913: IFFALSE 25006
24915: GO 24917
24917: DISABLE
24918: LD_INT 0
24920: PPUSH
// begin enable ;
24921: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24922: LD_ADDR_VAR 0 1
24926: PUSH
24927: LD_INT 22
24929: PUSH
24930: LD_OWVAR 2
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: LD_INT 25
24944: PUSH
24945: LD_INT 5
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 25
24954: PUSH
24955: LD_INT 9
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 25
24964: PUSH
24965: LD_INT 8
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PPUSH
24982: CALL_OW 69
24986: PUSH
24987: FOR_IN
24988: IFFALSE 25004
// begin SetClass ( i , 1 ) ;
24990: LD_VAR 0 1
24994: PPUSH
24995: LD_INT 1
24997: PPUSH
24998: CALL_OW 336
// end ;
25002: GO 24987
25004: POP
25005: POP
// end ;
25006: PPOPN 1
25008: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25009: LD_EXP 67
25013: PUSH
25014: LD_EXP 71
25018: AND
25019: PUSH
25020: LD_OWVAR 65
25024: PUSH
25025: LD_INT 7
25027: LESS
25028: AND
25029: IFFALSE 25043
25031: GO 25033
25033: DISABLE
// begin enable ;
25034: ENABLE
// game_speed := 7 ;
25035: LD_ADDR_OWVAR 65
25039: PUSH
25040: LD_INT 7
25042: ST_TO_ADDR
// end ;
25043: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25044: LD_EXP 67
25048: PUSH
25049: LD_EXP 74
25053: AND
25054: IFFALSE 25256
25056: GO 25058
25058: DISABLE
25059: LD_INT 0
25061: PPUSH
25062: PPUSH
25063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25064: LD_ADDR_VAR 0 3
25068: PUSH
25069: LD_INT 81
25071: PUSH
25072: LD_OWVAR 2
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 21
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PPUSH
25095: CALL_OW 69
25099: ST_TO_ADDR
// if not tmp then
25100: LD_VAR 0 3
25104: NOT
25105: IFFALSE 25109
// exit ;
25107: GO 25256
// if tmp > 5 then
25109: LD_VAR 0 3
25113: PUSH
25114: LD_INT 5
25116: GREATER
25117: IFFALSE 25129
// k := 5 else
25119: LD_ADDR_VAR 0 2
25123: PUSH
25124: LD_INT 5
25126: ST_TO_ADDR
25127: GO 25139
// k := tmp ;
25129: LD_ADDR_VAR 0 2
25133: PUSH
25134: LD_VAR 0 3
25138: ST_TO_ADDR
// for i := 1 to k do
25139: LD_ADDR_VAR 0 1
25143: PUSH
25144: DOUBLE
25145: LD_INT 1
25147: DEC
25148: ST_TO_ADDR
25149: LD_VAR 0 2
25153: PUSH
25154: FOR_TO
25155: IFFALSE 25254
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25157: LD_VAR 0 3
25161: PUSH
25162: LD_VAR 0 1
25166: ARRAY
25167: PPUSH
25168: LD_VAR 0 1
25172: PUSH
25173: LD_INT 4
25175: MOD
25176: PUSH
25177: LD_INT 1
25179: PLUS
25180: PPUSH
25181: CALL_OW 259
25185: PUSH
25186: LD_INT 10
25188: LESS
25189: IFFALSE 25252
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25191: LD_VAR 0 3
25195: PUSH
25196: LD_VAR 0 1
25200: ARRAY
25201: PPUSH
25202: LD_VAR 0 1
25206: PUSH
25207: LD_INT 4
25209: MOD
25210: PUSH
25211: LD_INT 1
25213: PLUS
25214: PPUSH
25215: LD_VAR 0 3
25219: PUSH
25220: LD_VAR 0 1
25224: ARRAY
25225: PPUSH
25226: LD_VAR 0 1
25230: PUSH
25231: LD_INT 4
25233: MOD
25234: PUSH
25235: LD_INT 1
25237: PLUS
25238: PPUSH
25239: CALL_OW 259
25243: PUSH
25244: LD_INT 1
25246: PLUS
25247: PPUSH
25248: CALL_OW 237
25252: GO 25154
25254: POP
25255: POP
// end ;
25256: PPOPN 3
25258: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25259: LD_EXP 67
25263: PUSH
25264: LD_EXP 75
25268: AND
25269: IFFALSE 25289
25271: GO 25273
25273: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25274: LD_INT 4
25276: PPUSH
25277: LD_OWVAR 2
25281: PPUSH
25282: LD_INT 0
25284: PPUSH
25285: CALL_OW 324
25289: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25290: LD_EXP 67
25294: PUSH
25295: LD_EXP 104
25299: AND
25300: IFFALSE 25320
25302: GO 25304
25304: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25305: LD_INT 19
25307: PPUSH
25308: LD_OWVAR 2
25312: PPUSH
25313: LD_INT 0
25315: PPUSH
25316: CALL_OW 324
25320: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25321: LD_EXP 67
25325: PUSH
25326: LD_EXP 76
25330: AND
25331: IFFALSE 25433
25333: GO 25335
25335: DISABLE
25336: LD_INT 0
25338: PPUSH
25339: PPUSH
// begin enable ;
25340: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25341: LD_ADDR_VAR 0 2
25345: PUSH
25346: LD_INT 22
25348: PUSH
25349: LD_OWVAR 2
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 2
25360: PUSH
25361: LD_INT 34
25363: PUSH
25364: LD_INT 11
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 34
25373: PUSH
25374: LD_INT 30
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PPUSH
25390: CALL_OW 69
25394: ST_TO_ADDR
// if not tmp then
25395: LD_VAR 0 2
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25433
// for i in tmp do
25404: LD_ADDR_VAR 0 1
25408: PUSH
25409: LD_VAR 0 2
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25431
// begin SetLives ( i , 0 ) ;
25417: LD_VAR 0 1
25421: PPUSH
25422: LD_INT 0
25424: PPUSH
25425: CALL_OW 234
// end ;
25429: GO 25414
25431: POP
25432: POP
// end ;
25433: PPOPN 2
25435: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25436: LD_EXP 67
25440: PUSH
25441: LD_EXP 77
25445: AND
25446: IFFALSE 25466
25448: GO 25450
25450: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25451: LD_INT 32
25453: PPUSH
25454: LD_OWVAR 2
25458: PPUSH
25459: LD_INT 0
25461: PPUSH
25462: CALL_OW 324
25466: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25467: LD_EXP 67
25471: PUSH
25472: LD_EXP 78
25476: AND
25477: IFFALSE 25658
25479: GO 25481
25481: DISABLE
25482: LD_INT 0
25484: PPUSH
25485: PPUSH
25486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25487: LD_ADDR_VAR 0 2
25491: PUSH
25492: LD_INT 22
25494: PUSH
25495: LD_OWVAR 2
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 33
25506: PUSH
25507: LD_INT 3
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PPUSH
25518: CALL_OW 69
25522: ST_TO_ADDR
// if not tmp then
25523: LD_VAR 0 2
25527: NOT
25528: IFFALSE 25532
// exit ;
25530: GO 25658
// side := 0 ;
25532: LD_ADDR_VAR 0 3
25536: PUSH
25537: LD_INT 0
25539: ST_TO_ADDR
// for i := 1 to 8 do
25540: LD_ADDR_VAR 0 1
25544: PUSH
25545: DOUBLE
25546: LD_INT 1
25548: DEC
25549: ST_TO_ADDR
25550: LD_INT 8
25552: PUSH
25553: FOR_TO
25554: IFFALSE 25602
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25556: LD_OWVAR 2
25560: PUSH
25561: LD_VAR 0 1
25565: NONEQUAL
25566: PUSH
25567: LD_OWVAR 2
25571: PPUSH
25572: LD_VAR 0 1
25576: PPUSH
25577: CALL_OW 81
25581: PUSH
25582: LD_INT 2
25584: EQUAL
25585: AND
25586: IFFALSE 25600
// begin side := i ;
25588: LD_ADDR_VAR 0 3
25592: PUSH
25593: LD_VAR 0 1
25597: ST_TO_ADDR
// break ;
25598: GO 25602
// end ;
25600: GO 25553
25602: POP
25603: POP
// if not side then
25604: LD_VAR 0 3
25608: NOT
25609: IFFALSE 25613
// exit ;
25611: GO 25658
// for i := 1 to tmp do
25613: LD_ADDR_VAR 0 1
25617: PUSH
25618: DOUBLE
25619: LD_INT 1
25621: DEC
25622: ST_TO_ADDR
25623: LD_VAR 0 2
25627: PUSH
25628: FOR_TO
25629: IFFALSE 25656
// if Prob ( 60 ) then
25631: LD_INT 60
25633: PPUSH
25634: CALL_OW 13
25638: IFFALSE 25654
// SetSide ( i , side ) ;
25640: LD_VAR 0 1
25644: PPUSH
25645: LD_VAR 0 3
25649: PPUSH
25650: CALL_OW 235
25654: GO 25628
25656: POP
25657: POP
// end ;
25658: PPOPN 3
25660: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25661: LD_EXP 67
25665: PUSH
25666: LD_EXP 80
25670: AND
25671: IFFALSE 25790
25673: GO 25675
25675: DISABLE
25676: LD_INT 0
25678: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25679: LD_ADDR_VAR 0 1
25683: PUSH
25684: LD_INT 22
25686: PUSH
25687: LD_OWVAR 2
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 21
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 3
25708: PUSH
25709: LD_INT 23
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: PPUSH
25728: CALL_OW 69
25732: PUSH
25733: FOR_IN
25734: IFFALSE 25788
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25736: LD_VAR 0 1
25740: PPUSH
25741: CALL_OW 257
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 3
25754: PUSH
25755: LD_INT 4
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: IN
25764: IFFALSE 25786
// SetClass ( un , rand ( 1 , 4 ) ) ;
25766: LD_VAR 0 1
25770: PPUSH
25771: LD_INT 1
25773: PPUSH
25774: LD_INT 4
25776: PPUSH
25777: CALL_OW 12
25781: PPUSH
25782: CALL_OW 336
25786: GO 25733
25788: POP
25789: POP
// end ;
25790: PPOPN 1
25792: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25793: LD_EXP 67
25797: PUSH
25798: LD_EXP 79
25802: AND
25803: IFFALSE 25882
25805: GO 25807
25807: DISABLE
25808: LD_INT 0
25810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25811: LD_ADDR_VAR 0 1
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_OWVAR 2
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 21
25830: PUSH
25831: LD_INT 3
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PPUSH
25842: CALL_OW 69
25846: ST_TO_ADDR
// if not tmp then
25847: LD_VAR 0 1
25851: NOT
25852: IFFALSE 25856
// exit ;
25854: GO 25882
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25856: LD_VAR 0 1
25860: PUSH
25861: LD_INT 1
25863: PPUSH
25864: LD_VAR 0 1
25868: PPUSH
25869: CALL_OW 12
25873: ARRAY
25874: PPUSH
25875: LD_INT 100
25877: PPUSH
25878: CALL_OW 234
// end ;
25882: PPOPN 1
25884: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25885: LD_EXP 67
25889: PUSH
25890: LD_EXP 81
25894: AND
25895: IFFALSE 25993
25897: GO 25899
25899: DISABLE
25900: LD_INT 0
25902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25903: LD_ADDR_VAR 0 1
25907: PUSH
25908: LD_INT 22
25910: PUSH
25911: LD_OWVAR 2
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 21
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 69
25938: ST_TO_ADDR
// if not tmp then
25939: LD_VAR 0 1
25943: NOT
25944: IFFALSE 25948
// exit ;
25946: GO 25993
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25948: LD_VAR 0 1
25952: PUSH
25953: LD_INT 1
25955: PPUSH
25956: LD_VAR 0 1
25960: PPUSH
25961: CALL_OW 12
25965: ARRAY
25966: PPUSH
25967: LD_INT 1
25969: PPUSH
25970: LD_INT 4
25972: PPUSH
25973: CALL_OW 12
25977: PPUSH
25978: LD_INT 3000
25980: PPUSH
25981: LD_INT 9000
25983: PPUSH
25984: CALL_OW 12
25988: PPUSH
25989: CALL_OW 492
// end ;
25993: PPOPN 1
25995: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25996: LD_EXP 67
26000: PUSH
26001: LD_EXP 82
26005: AND
26006: IFFALSE 26026
26008: GO 26010
26010: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26011: LD_INT 1
26013: PPUSH
26014: LD_OWVAR 2
26018: PPUSH
26019: LD_INT 0
26021: PPUSH
26022: CALL_OW 324
26026: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26027: LD_EXP 67
26031: PUSH
26032: LD_EXP 83
26036: AND
26037: IFFALSE 26120
26039: GO 26041
26041: DISABLE
26042: LD_INT 0
26044: PPUSH
26045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26046: LD_ADDR_VAR 0 2
26050: PUSH
26051: LD_INT 22
26053: PUSH
26054: LD_OWVAR 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 21
26065: PUSH
26066: LD_INT 3
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PPUSH
26077: CALL_OW 69
26081: ST_TO_ADDR
// if not tmp then
26082: LD_VAR 0 2
26086: NOT
26087: IFFALSE 26091
// exit ;
26089: GO 26120
// for i in tmp do
26091: LD_ADDR_VAR 0 1
26095: PUSH
26096: LD_VAR 0 2
26100: PUSH
26101: FOR_IN
26102: IFFALSE 26118
// SetBLevel ( i , 10 ) ;
26104: LD_VAR 0 1
26108: PPUSH
26109: LD_INT 10
26111: PPUSH
26112: CALL_OW 241
26116: GO 26101
26118: POP
26119: POP
// end ;
26120: PPOPN 2
26122: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26123: LD_EXP 67
26127: PUSH
26128: LD_EXP 84
26132: AND
26133: IFFALSE 26244
26135: GO 26137
26137: DISABLE
26138: LD_INT 0
26140: PPUSH
26141: PPUSH
26142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26143: LD_ADDR_VAR 0 3
26147: PUSH
26148: LD_INT 22
26150: PUSH
26151: LD_OWVAR 2
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 25
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PPUSH
26174: CALL_OW 69
26178: ST_TO_ADDR
// if not tmp then
26179: LD_VAR 0 3
26183: NOT
26184: IFFALSE 26188
// exit ;
26186: GO 26244
// un := tmp [ rand ( 1 , tmp ) ] ;
26188: LD_ADDR_VAR 0 2
26192: PUSH
26193: LD_VAR 0 3
26197: PUSH
26198: LD_INT 1
26200: PPUSH
26201: LD_VAR 0 3
26205: PPUSH
26206: CALL_OW 12
26210: ARRAY
26211: ST_TO_ADDR
// if Crawls ( un ) then
26212: LD_VAR 0 2
26216: PPUSH
26217: CALL_OW 318
26221: IFFALSE 26232
// ComWalk ( un ) ;
26223: LD_VAR 0 2
26227: PPUSH
26228: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26232: LD_VAR 0 2
26236: PPUSH
26237: LD_INT 5
26239: PPUSH
26240: CALL_OW 336
// end ;
26244: PPOPN 3
26246: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26247: LD_EXP 67
26251: PUSH
26252: LD_EXP 85
26256: AND
26257: PUSH
26258: LD_OWVAR 67
26262: PUSH
26263: LD_INT 4
26265: LESS
26266: AND
26267: IFFALSE 26286
26269: GO 26271
26271: DISABLE
// begin Difficulty := Difficulty + 1 ;
26272: LD_ADDR_OWVAR 67
26276: PUSH
26277: LD_OWVAR 67
26281: PUSH
26282: LD_INT 1
26284: PLUS
26285: ST_TO_ADDR
// end ;
26286: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26287: LD_EXP 67
26291: PUSH
26292: LD_EXP 86
26296: AND
26297: IFFALSE 26400
26299: GO 26301
26301: DISABLE
26302: LD_INT 0
26304: PPUSH
// begin for i := 1 to 5 do
26305: LD_ADDR_VAR 0 1
26309: PUSH
26310: DOUBLE
26311: LD_INT 1
26313: DEC
26314: ST_TO_ADDR
26315: LD_INT 5
26317: PUSH
26318: FOR_TO
26319: IFFALSE 26398
// begin uc_nation := nation_nature ;
26321: LD_ADDR_OWVAR 21
26325: PUSH
26326: LD_INT 0
26328: ST_TO_ADDR
// uc_side := 0 ;
26329: LD_ADDR_OWVAR 20
26333: PUSH
26334: LD_INT 0
26336: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26337: LD_ADDR_OWVAR 29
26341: PUSH
26342: LD_INT 12
26344: PUSH
26345: LD_INT 12
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: ST_TO_ADDR
// hc_agressivity := 20 ;
26352: LD_ADDR_OWVAR 35
26356: PUSH
26357: LD_INT 20
26359: ST_TO_ADDR
// hc_class := class_tiger ;
26360: LD_ADDR_OWVAR 28
26364: PUSH
26365: LD_INT 14
26367: ST_TO_ADDR
// hc_gallery :=  ;
26368: LD_ADDR_OWVAR 33
26372: PUSH
26373: LD_STRING 
26375: ST_TO_ADDR
// hc_name :=  ;
26376: LD_ADDR_OWVAR 26
26380: PUSH
26381: LD_STRING 
26383: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26384: CALL_OW 44
26388: PPUSH
26389: LD_INT 0
26391: PPUSH
26392: CALL_OW 51
// end ;
26396: GO 26318
26398: POP
26399: POP
// end ;
26400: PPOPN 1
26402: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26403: LD_EXP 67
26407: PUSH
26408: LD_EXP 87
26412: AND
26413: IFFALSE 26422
26415: GO 26417
26417: DISABLE
// StreamSibBomb ;
26418: CALL 26423 0 0
26422: END
// export function StreamSibBomb ; var i , x , y ; begin
26423: LD_INT 0
26425: PPUSH
26426: PPUSH
26427: PPUSH
26428: PPUSH
// result := false ;
26429: LD_ADDR_VAR 0 1
26433: PUSH
26434: LD_INT 0
26436: ST_TO_ADDR
// for i := 1 to 16 do
26437: LD_ADDR_VAR 0 2
26441: PUSH
26442: DOUBLE
26443: LD_INT 1
26445: DEC
26446: ST_TO_ADDR
26447: LD_INT 16
26449: PUSH
26450: FOR_TO
26451: IFFALSE 26650
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26453: LD_ADDR_VAR 0 3
26457: PUSH
26458: LD_INT 10
26460: PUSH
26461: LD_INT 20
26463: PUSH
26464: LD_INT 30
26466: PUSH
26467: LD_INT 40
26469: PUSH
26470: LD_INT 50
26472: PUSH
26473: LD_INT 60
26475: PUSH
26476: LD_INT 70
26478: PUSH
26479: LD_INT 80
26481: PUSH
26482: LD_INT 90
26484: PUSH
26485: LD_INT 100
26487: PUSH
26488: LD_INT 110
26490: PUSH
26491: LD_INT 120
26493: PUSH
26494: LD_INT 130
26496: PUSH
26497: LD_INT 140
26499: PUSH
26500: LD_INT 150
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: PPUSH
26523: LD_INT 15
26525: PPUSH
26526: CALL_OW 12
26530: ARRAY
26531: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26532: LD_ADDR_VAR 0 4
26536: PUSH
26537: LD_INT 10
26539: PUSH
26540: LD_INT 20
26542: PUSH
26543: LD_INT 30
26545: PUSH
26546: LD_INT 40
26548: PUSH
26549: LD_INT 50
26551: PUSH
26552: LD_INT 60
26554: PUSH
26555: LD_INT 70
26557: PUSH
26558: LD_INT 80
26560: PUSH
26561: LD_INT 90
26563: PUSH
26564: LD_INT 100
26566: PUSH
26567: LD_INT 110
26569: PUSH
26570: LD_INT 120
26572: PUSH
26573: LD_INT 130
26575: PUSH
26576: LD_INT 140
26578: PUSH
26579: LD_INT 150
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 1
26601: PPUSH
26602: LD_INT 15
26604: PPUSH
26605: CALL_OW 12
26609: ARRAY
26610: ST_TO_ADDR
// if ValidHex ( x , y ) then
26611: LD_VAR 0 3
26615: PPUSH
26616: LD_VAR 0 4
26620: PPUSH
26621: CALL_OW 488
26625: IFFALSE 26648
// begin result := [ x , y ] ;
26627: LD_ADDR_VAR 0 1
26631: PUSH
26632: LD_VAR 0 3
26636: PUSH
26637: LD_VAR 0 4
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: ST_TO_ADDR
// break ;
26646: GO 26650
// end ; end ;
26648: GO 26450
26650: POP
26651: POP
// if result then
26652: LD_VAR 0 1
26656: IFFALSE 26716
// begin ToLua ( playSibBomb() ) ;
26658: LD_STRING playSibBomb()
26660: PPUSH
26661: CALL_OW 559
// wait ( 0 0$14 ) ;
26665: LD_INT 490
26667: PPUSH
26668: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26672: LD_VAR 0 1
26676: PUSH
26677: LD_INT 1
26679: ARRAY
26680: PPUSH
26681: LD_VAR 0 1
26685: PUSH
26686: LD_INT 2
26688: ARRAY
26689: PPUSH
26690: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26694: LD_VAR 0 1
26698: PUSH
26699: LD_INT 1
26701: ARRAY
26702: PPUSH
26703: LD_VAR 0 1
26707: PUSH
26708: LD_INT 2
26710: ARRAY
26711: PPUSH
26712: CALL_OW 429
// end ; end ;
26716: LD_VAR 0 1
26720: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26721: LD_EXP 67
26725: PUSH
26726: LD_EXP 89
26730: AND
26731: IFFALSE 26743
26733: GO 26735
26735: DISABLE
// YouLost (  ) ;
26736: LD_STRING 
26738: PPUSH
26739: CALL_OW 104
26743: END
// every 0 0$1 trigger StreamModeActive and sFog do
26744: LD_EXP 67
26748: PUSH
26749: LD_EXP 88
26753: AND
26754: IFFALSE 26768
26756: GO 26758
26758: DISABLE
// FogOff ( your_side ) ;
26759: LD_OWVAR 2
26763: PPUSH
26764: CALL_OW 344
26768: END
// every 0 0$1 trigger StreamModeActive and sSun do
26769: LD_EXP 67
26773: PUSH
26774: LD_EXP 90
26778: AND
26779: IFFALSE 26807
26781: GO 26783
26783: DISABLE
// begin solar_recharge_percent := 0 ;
26784: LD_ADDR_OWVAR 79
26788: PUSH
26789: LD_INT 0
26791: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26792: LD_INT 10500
26794: PPUSH
26795: CALL_OW 67
// solar_recharge_percent := 100 ;
26799: LD_ADDR_OWVAR 79
26803: PUSH
26804: LD_INT 100
26806: ST_TO_ADDR
// end ;
26807: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26808: LD_EXP 67
26812: PUSH
26813: LD_EXP 91
26817: AND
26818: IFFALSE 27057
26820: GO 26822
26822: DISABLE
26823: LD_INT 0
26825: PPUSH
26826: PPUSH
26827: PPUSH
// begin tmp := [ ] ;
26828: LD_ADDR_VAR 0 3
26832: PUSH
26833: EMPTY
26834: ST_TO_ADDR
// for i := 1 to 6 do
26835: LD_ADDR_VAR 0 1
26839: PUSH
26840: DOUBLE
26841: LD_INT 1
26843: DEC
26844: ST_TO_ADDR
26845: LD_INT 6
26847: PUSH
26848: FOR_TO
26849: IFFALSE 26954
// begin uc_nation := nation_nature ;
26851: LD_ADDR_OWVAR 21
26855: PUSH
26856: LD_INT 0
26858: ST_TO_ADDR
// uc_side := 0 ;
26859: LD_ADDR_OWVAR 20
26863: PUSH
26864: LD_INT 0
26866: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26867: LD_ADDR_OWVAR 29
26871: PUSH
26872: LD_INT 12
26874: PUSH
26875: LD_INT 12
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: ST_TO_ADDR
// hc_agressivity := 20 ;
26882: LD_ADDR_OWVAR 35
26886: PUSH
26887: LD_INT 20
26889: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26890: LD_ADDR_OWVAR 28
26894: PUSH
26895: LD_INT 17
26897: ST_TO_ADDR
// hc_gallery :=  ;
26898: LD_ADDR_OWVAR 33
26902: PUSH
26903: LD_STRING 
26905: ST_TO_ADDR
// hc_name :=  ;
26906: LD_ADDR_OWVAR 26
26910: PUSH
26911: LD_STRING 
26913: ST_TO_ADDR
// un := CreateHuman ;
26914: LD_ADDR_VAR 0 2
26918: PUSH
26919: CALL_OW 44
26923: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26924: LD_VAR 0 2
26928: PPUSH
26929: LD_INT 1
26931: PPUSH
26932: CALL_OW 51
// tmp := tmp ^ un ;
26936: LD_ADDR_VAR 0 3
26940: PUSH
26941: LD_VAR 0 3
26945: PUSH
26946: LD_VAR 0 2
26950: ADD
26951: ST_TO_ADDR
// end ;
26952: GO 26848
26954: POP
26955: POP
// repeat wait ( 0 0$1 ) ;
26956: LD_INT 35
26958: PPUSH
26959: CALL_OW 67
// for un in tmp do
26963: LD_ADDR_VAR 0 2
26967: PUSH
26968: LD_VAR 0 3
26972: PUSH
26973: FOR_IN
26974: IFFALSE 27048
// begin if IsDead ( un ) then
26976: LD_VAR 0 2
26980: PPUSH
26981: CALL_OW 301
26985: IFFALSE 27005
// begin tmp := tmp diff un ;
26987: LD_ADDR_VAR 0 3
26991: PUSH
26992: LD_VAR 0 3
26996: PUSH
26997: LD_VAR 0 2
27001: DIFF
27002: ST_TO_ADDR
// continue ;
27003: GO 26973
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27005: LD_VAR 0 2
27009: PPUSH
27010: LD_INT 3
27012: PUSH
27013: LD_INT 22
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PPUSH
27027: CALL_OW 69
27031: PPUSH
27032: LD_VAR 0 2
27036: PPUSH
27037: CALL_OW 74
27041: PPUSH
27042: CALL_OW 115
// end ;
27046: GO 26973
27048: POP
27049: POP
// until not tmp ;
27050: LD_VAR 0 3
27054: NOT
27055: IFFALSE 26956
// end ;
27057: PPOPN 3
27059: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27060: LD_EXP 67
27064: PUSH
27065: LD_EXP 92
27069: AND
27070: IFFALSE 27124
27072: GO 27074
27074: DISABLE
// begin ToLua ( displayTroll(); ) ;
27075: LD_STRING displayTroll();
27077: PPUSH
27078: CALL_OW 559
// wait ( 3 3$00 ) ;
27082: LD_INT 6300
27084: PPUSH
27085: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27089: LD_STRING hideTroll();
27091: PPUSH
27092: CALL_OW 559
// wait ( 1 1$00 ) ;
27096: LD_INT 2100
27098: PPUSH
27099: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27103: LD_STRING displayTroll();
27105: PPUSH
27106: CALL_OW 559
// wait ( 1 1$00 ) ;
27110: LD_INT 2100
27112: PPUSH
27113: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27117: LD_STRING hideTroll();
27119: PPUSH
27120: CALL_OW 559
// end ;
27124: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27125: LD_EXP 67
27129: PUSH
27130: LD_EXP 93
27134: AND
27135: IFFALSE 27198
27137: GO 27139
27139: DISABLE
27140: LD_INT 0
27142: PPUSH
// begin p := 0 ;
27143: LD_ADDR_VAR 0 1
27147: PUSH
27148: LD_INT 0
27150: ST_TO_ADDR
// repeat game_speed := 1 ;
27151: LD_ADDR_OWVAR 65
27155: PUSH
27156: LD_INT 1
27158: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27159: LD_INT 35
27161: PPUSH
27162: CALL_OW 67
// p := p + 1 ;
27166: LD_ADDR_VAR 0 1
27170: PUSH
27171: LD_VAR 0 1
27175: PUSH
27176: LD_INT 1
27178: PLUS
27179: ST_TO_ADDR
// until p >= 60 ;
27180: LD_VAR 0 1
27184: PUSH
27185: LD_INT 60
27187: GREATEREQUAL
27188: IFFALSE 27151
// game_speed := 4 ;
27190: LD_ADDR_OWVAR 65
27194: PUSH
27195: LD_INT 4
27197: ST_TO_ADDR
// end ;
27198: PPOPN 1
27200: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27201: LD_EXP 67
27205: PUSH
27206: LD_EXP 94
27210: AND
27211: IFFALSE 27357
27213: GO 27215
27215: DISABLE
27216: LD_INT 0
27218: PPUSH
27219: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27220: LD_ADDR_VAR 0 1
27224: PUSH
27225: LD_INT 22
27227: PUSH
27228: LD_OWVAR 2
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: LD_INT 30
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 30
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 69
27273: ST_TO_ADDR
// if not depot then
27274: LD_VAR 0 1
27278: NOT
27279: IFFALSE 27283
// exit ;
27281: GO 27357
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27283: LD_ADDR_VAR 0 2
27287: PUSH
27288: LD_VAR 0 1
27292: PUSH
27293: LD_INT 1
27295: PPUSH
27296: LD_VAR 0 1
27300: PPUSH
27301: CALL_OW 12
27305: ARRAY
27306: PPUSH
27307: CALL_OW 274
27311: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27312: LD_VAR 0 2
27316: PPUSH
27317: LD_INT 1
27319: PPUSH
27320: LD_INT 0
27322: PPUSH
27323: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27327: LD_VAR 0 2
27331: PPUSH
27332: LD_INT 2
27334: PPUSH
27335: LD_INT 0
27337: PPUSH
27338: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27342: LD_VAR 0 2
27346: PPUSH
27347: LD_INT 3
27349: PPUSH
27350: LD_INT 0
27352: PPUSH
27353: CALL_OW 277
// end ;
27357: PPOPN 2
27359: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27360: LD_EXP 67
27364: PUSH
27365: LD_EXP 95
27369: AND
27370: IFFALSE 27467
27372: GO 27374
27374: DISABLE
27375: LD_INT 0
27377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27378: LD_ADDR_VAR 0 1
27382: PUSH
27383: LD_INT 22
27385: PUSH
27386: LD_OWVAR 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 21
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 3
27407: PUSH
27408: LD_INT 23
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: LIST
27426: PPUSH
27427: CALL_OW 69
27431: ST_TO_ADDR
// if not tmp then
27432: LD_VAR 0 1
27436: NOT
27437: IFFALSE 27441
// exit ;
27439: GO 27467
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27441: LD_VAR 0 1
27445: PUSH
27446: LD_INT 1
27448: PPUSH
27449: LD_VAR 0 1
27453: PPUSH
27454: CALL_OW 12
27458: ARRAY
27459: PPUSH
27460: LD_INT 200
27462: PPUSH
27463: CALL_OW 234
// end ;
27467: PPOPN 1
27469: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27470: LD_EXP 67
27474: PUSH
27475: LD_EXP 96
27479: AND
27480: IFFALSE 27559
27482: GO 27484
27484: DISABLE
27485: LD_INT 0
27487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27488: LD_ADDR_VAR 0 1
27492: PUSH
27493: LD_INT 22
27495: PUSH
27496: LD_OWVAR 2
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 21
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PPUSH
27519: CALL_OW 69
27523: ST_TO_ADDR
// if not tmp then
27524: LD_VAR 0 1
27528: NOT
27529: IFFALSE 27533
// exit ;
27531: GO 27559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27533: LD_VAR 0 1
27537: PUSH
27538: LD_INT 1
27540: PPUSH
27541: LD_VAR 0 1
27545: PPUSH
27546: CALL_OW 12
27550: ARRAY
27551: PPUSH
27552: LD_INT 60
27554: PPUSH
27555: CALL_OW 234
// end ;
27559: PPOPN 1
27561: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27562: LD_EXP 67
27566: PUSH
27567: LD_EXP 97
27571: AND
27572: IFFALSE 27671
27574: GO 27576
27576: DISABLE
27577: LD_INT 0
27579: PPUSH
27580: PPUSH
// begin enable ;
27581: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27582: LD_ADDR_VAR 0 1
27586: PUSH
27587: LD_INT 22
27589: PUSH
27590: LD_OWVAR 2
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 61
27601: PUSH
27602: EMPTY
27603: LIST
27604: PUSH
27605: LD_INT 33
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: PPUSH
27620: CALL_OW 69
27624: ST_TO_ADDR
// if not tmp then
27625: LD_VAR 0 1
27629: NOT
27630: IFFALSE 27634
// exit ;
27632: GO 27671
// for i in tmp do
27634: LD_ADDR_VAR 0 2
27638: PUSH
27639: LD_VAR 0 1
27643: PUSH
27644: FOR_IN
27645: IFFALSE 27669
// if IsControledBy ( i ) then
27647: LD_VAR 0 2
27651: PPUSH
27652: CALL_OW 312
27656: IFFALSE 27667
// ComUnlink ( i ) ;
27658: LD_VAR 0 2
27662: PPUSH
27663: CALL_OW 136
27667: GO 27644
27669: POP
27670: POP
// end ;
27671: PPOPN 2
27673: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27674: LD_EXP 67
27678: PUSH
27679: LD_EXP 98
27683: AND
27684: IFFALSE 27824
27686: GO 27688
27688: DISABLE
27689: LD_INT 0
27691: PPUSH
27692: PPUSH
// begin ToLua ( displayPowell(); ) ;
27693: LD_STRING displayPowell();
27695: PPUSH
27696: CALL_OW 559
// uc_side := 0 ;
27700: LD_ADDR_OWVAR 20
27704: PUSH
27705: LD_INT 0
27707: ST_TO_ADDR
// uc_nation := 2 ;
27708: LD_ADDR_OWVAR 21
27712: PUSH
27713: LD_INT 2
27715: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27716: LD_ADDR_OWVAR 37
27720: PUSH
27721: LD_INT 14
27723: ST_TO_ADDR
// vc_engine := engine_siberite ;
27724: LD_ADDR_OWVAR 39
27728: PUSH
27729: LD_INT 3
27731: ST_TO_ADDR
// vc_control := control_apeman ;
27732: LD_ADDR_OWVAR 38
27736: PUSH
27737: LD_INT 5
27739: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27740: LD_ADDR_OWVAR 40
27744: PUSH
27745: LD_INT 29
27747: ST_TO_ADDR
// un := CreateVehicle ;
27748: LD_ADDR_VAR 0 2
27752: PUSH
27753: CALL_OW 45
27757: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27758: LD_VAR 0 2
27762: PPUSH
27763: LD_INT 1
27765: PPUSH
27766: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27770: LD_INT 35
27772: PPUSH
27773: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27777: LD_VAR 0 2
27781: PPUSH
27782: LD_INT 22
27784: PUSH
27785: LD_OWVAR 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PPUSH
27794: CALL_OW 69
27798: PPUSH
27799: LD_VAR 0 2
27803: PPUSH
27804: CALL_OW 74
27808: PPUSH
27809: CALL_OW 115
// until IsDead ( un ) ;
27813: LD_VAR 0 2
27817: PPUSH
27818: CALL_OW 301
27822: IFFALSE 27770
// end ;
27824: PPOPN 2
27826: END
// every 0 0$1 trigger StreamModeActive and sStu do
27827: LD_EXP 67
27831: PUSH
27832: LD_EXP 106
27836: AND
27837: IFFALSE 27853
27839: GO 27841
27841: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27842: LD_STRING displayStucuk();
27844: PPUSH
27845: CALL_OW 559
// ResetFog ;
27849: CALL_OW 335
// end ;
27853: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27854: LD_EXP 67
27858: PUSH
27859: LD_EXP 99
27863: AND
27864: IFFALSE 28005
27866: GO 27868
27868: DISABLE
27869: LD_INT 0
27871: PPUSH
27872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27873: LD_ADDR_VAR 0 2
27877: PUSH
27878: LD_INT 22
27880: PUSH
27881: LD_OWVAR 2
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 21
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PPUSH
27904: CALL_OW 69
27908: ST_TO_ADDR
// if not tmp then
27909: LD_VAR 0 2
27913: NOT
27914: IFFALSE 27918
// exit ;
27916: GO 28005
// un := tmp [ rand ( 1 , tmp ) ] ;
27918: LD_ADDR_VAR 0 1
27922: PUSH
27923: LD_VAR 0 2
27927: PUSH
27928: LD_INT 1
27930: PPUSH
27931: LD_VAR 0 2
27935: PPUSH
27936: CALL_OW 12
27940: ARRAY
27941: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27942: LD_VAR 0 1
27946: PPUSH
27947: LD_INT 0
27949: PPUSH
27950: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27954: LD_VAR 0 1
27958: PPUSH
27959: LD_OWVAR 3
27963: PUSH
27964: LD_VAR 0 1
27968: DIFF
27969: PPUSH
27970: LD_VAR 0 1
27974: PPUSH
27975: CALL_OW 74
27979: PPUSH
27980: CALL_OW 115
// wait ( 0 0$20 ) ;
27984: LD_INT 700
27986: PPUSH
27987: CALL_OW 67
// SetSide ( un , your_side ) ;
27991: LD_VAR 0 1
27995: PPUSH
27996: LD_OWVAR 2
28000: PPUSH
28001: CALL_OW 235
// end ;
28005: PPOPN 2
28007: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28008: LD_EXP 67
28012: PUSH
28013: LD_EXP 100
28017: AND
28018: IFFALSE 28124
28020: GO 28022
28022: DISABLE
28023: LD_INT 0
28025: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28026: LD_ADDR_VAR 0 1
28030: PUSH
28031: LD_INT 22
28033: PUSH
28034: LD_OWVAR 2
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: LD_INT 30
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 30
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PPUSH
28075: CALL_OW 69
28079: ST_TO_ADDR
// if not depot then
28080: LD_VAR 0 1
28084: NOT
28085: IFFALSE 28089
// exit ;
28087: GO 28124
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28089: LD_VAR 0 1
28093: PUSH
28094: LD_INT 1
28096: ARRAY
28097: PPUSH
28098: CALL_OW 250
28102: PPUSH
28103: LD_VAR 0 1
28107: PUSH
28108: LD_INT 1
28110: ARRAY
28111: PPUSH
28112: CALL_OW 251
28116: PPUSH
28117: LD_INT 70
28119: PPUSH
28120: CALL_OW 495
// end ;
28124: PPOPN 1
28126: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28127: LD_EXP 67
28131: PUSH
28132: LD_EXP 101
28136: AND
28137: IFFALSE 28348
28139: GO 28141
28141: DISABLE
28142: LD_INT 0
28144: PPUSH
28145: PPUSH
28146: PPUSH
28147: PPUSH
28148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28149: LD_ADDR_VAR 0 5
28153: PUSH
28154: LD_INT 22
28156: PUSH
28157: LD_OWVAR 2
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 21
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PPUSH
28180: CALL_OW 69
28184: ST_TO_ADDR
// if not tmp then
28185: LD_VAR 0 5
28189: NOT
28190: IFFALSE 28194
// exit ;
28192: GO 28348
// for i in tmp do
28194: LD_ADDR_VAR 0 1
28198: PUSH
28199: LD_VAR 0 5
28203: PUSH
28204: FOR_IN
28205: IFFALSE 28346
// begin d := rand ( 0 , 5 ) ;
28207: LD_ADDR_VAR 0 4
28211: PUSH
28212: LD_INT 0
28214: PPUSH
28215: LD_INT 5
28217: PPUSH
28218: CALL_OW 12
28222: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28223: LD_ADDR_VAR 0 2
28227: PUSH
28228: LD_VAR 0 1
28232: PPUSH
28233: CALL_OW 250
28237: PPUSH
28238: LD_VAR 0 4
28242: PPUSH
28243: LD_INT 3
28245: PPUSH
28246: LD_INT 12
28248: PPUSH
28249: CALL_OW 12
28253: PPUSH
28254: CALL_OW 272
28258: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28259: LD_ADDR_VAR 0 3
28263: PUSH
28264: LD_VAR 0 1
28268: PPUSH
28269: CALL_OW 251
28273: PPUSH
28274: LD_VAR 0 4
28278: PPUSH
28279: LD_INT 3
28281: PPUSH
28282: LD_INT 12
28284: PPUSH
28285: CALL_OW 12
28289: PPUSH
28290: CALL_OW 273
28294: ST_TO_ADDR
// if ValidHex ( x , y ) then
28295: LD_VAR 0 2
28299: PPUSH
28300: LD_VAR 0 3
28304: PPUSH
28305: CALL_OW 488
28309: IFFALSE 28344
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28311: LD_VAR 0 1
28315: PPUSH
28316: LD_VAR 0 2
28320: PPUSH
28321: LD_VAR 0 3
28325: PPUSH
28326: LD_INT 3
28328: PPUSH
28329: LD_INT 6
28331: PPUSH
28332: CALL_OW 12
28336: PPUSH
28337: LD_INT 1
28339: PPUSH
28340: CALL_OW 483
// end ;
28344: GO 28204
28346: POP
28347: POP
// end ;
28348: PPOPN 5
28350: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28351: LD_EXP 67
28355: PUSH
28356: LD_EXP 102
28360: AND
28361: IFFALSE 28455
28363: GO 28365
28365: DISABLE
28366: LD_INT 0
28368: PPUSH
28369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28370: LD_ADDR_VAR 0 2
28374: PUSH
28375: LD_INT 22
28377: PUSH
28378: LD_OWVAR 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 32
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 21
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: LIST
28411: PPUSH
28412: CALL_OW 69
28416: ST_TO_ADDR
// if not tmp then
28417: LD_VAR 0 2
28421: NOT
28422: IFFALSE 28426
// exit ;
28424: GO 28455
// for i in tmp do
28426: LD_ADDR_VAR 0 1
28430: PUSH
28431: LD_VAR 0 2
28435: PUSH
28436: FOR_IN
28437: IFFALSE 28453
// SetFuel ( i , 0 ) ;
28439: LD_VAR 0 1
28443: PPUSH
28444: LD_INT 0
28446: PPUSH
28447: CALL_OW 240
28451: GO 28436
28453: POP
28454: POP
// end ;
28455: PPOPN 2
28457: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28458: LD_EXP 67
28462: PUSH
28463: LD_EXP 103
28467: AND
28468: IFFALSE 28534
28470: GO 28472
28472: DISABLE
28473: LD_INT 0
28475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28476: LD_ADDR_VAR 0 1
28480: PUSH
28481: LD_INT 22
28483: PUSH
28484: LD_OWVAR 2
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 30
28495: PUSH
28496: LD_INT 29
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PPUSH
28507: CALL_OW 69
28511: ST_TO_ADDR
// if not tmp then
28512: LD_VAR 0 1
28516: NOT
28517: IFFALSE 28521
// exit ;
28519: GO 28534
// DestroyUnit ( tmp [ 1 ] ) ;
28521: LD_VAR 0 1
28525: PUSH
28526: LD_INT 1
28528: ARRAY
28529: PPUSH
28530: CALL_OW 65
// end ;
28534: PPOPN 1
28536: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28537: LD_EXP 67
28541: PUSH
28542: LD_EXP 105
28546: AND
28547: IFFALSE 28676
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
// begin uc_side := 0 ;
28555: LD_ADDR_OWVAR 20
28559: PUSH
28560: LD_INT 0
28562: ST_TO_ADDR
// uc_nation := nation_arabian ;
28563: LD_ADDR_OWVAR 21
28567: PUSH
28568: LD_INT 2
28570: ST_TO_ADDR
// hc_gallery :=  ;
28571: LD_ADDR_OWVAR 33
28575: PUSH
28576: LD_STRING 
28578: ST_TO_ADDR
// hc_name :=  ;
28579: LD_ADDR_OWVAR 26
28583: PUSH
28584: LD_STRING 
28586: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28587: LD_INT 1
28589: PPUSH
28590: LD_INT 11
28592: PPUSH
28593: LD_INT 10
28595: PPUSH
28596: CALL_OW 380
// un := CreateHuman ;
28600: LD_ADDR_VAR 0 1
28604: PUSH
28605: CALL_OW 44
28609: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28610: LD_VAR 0 1
28614: PPUSH
28615: LD_INT 1
28617: PPUSH
28618: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28622: LD_INT 35
28624: PPUSH
28625: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28629: LD_VAR 0 1
28633: PPUSH
28634: LD_INT 22
28636: PUSH
28637: LD_OWVAR 2
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PPUSH
28646: CALL_OW 69
28650: PPUSH
28651: LD_VAR 0 1
28655: PPUSH
28656: CALL_OW 74
28660: PPUSH
28661: CALL_OW 115
// until IsDead ( un ) ;
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 301
28674: IFFALSE 28622
// end ;
28676: PPOPN 1
28678: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28679: LD_EXP 67
28683: PUSH
28684: LD_EXP 107
28688: AND
28689: IFFALSE 28701
28691: GO 28693
28693: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28694: LD_STRING earthquake(getX(game), 0, 32)
28696: PPUSH
28697: CALL_OW 559
28701: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28702: LD_EXP 67
28706: PUSH
28707: LD_EXP 108
28711: AND
28712: IFFALSE 28803
28714: GO 28716
28716: DISABLE
28717: LD_INT 0
28719: PPUSH
// begin enable ;
28720: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28721: LD_ADDR_VAR 0 1
28725: PUSH
28726: LD_INT 22
28728: PUSH
28729: LD_OWVAR 2
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 21
28740: PUSH
28741: LD_INT 2
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 33
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: LIST
28762: PPUSH
28763: CALL_OW 69
28767: ST_TO_ADDR
// if not tmp then
28768: LD_VAR 0 1
28772: NOT
28773: IFFALSE 28777
// exit ;
28775: GO 28803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28777: LD_VAR 0 1
28781: PUSH
28782: LD_INT 1
28784: PPUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 12
28794: ARRAY
28795: PPUSH
28796: LD_INT 1
28798: PPUSH
28799: CALL_OW 234
// end ;
28803: PPOPN 1
28805: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28806: LD_EXP 67
28810: PUSH
28811: LD_EXP 109
28815: AND
28816: IFFALSE 28957
28818: GO 28820
28820: DISABLE
28821: LD_INT 0
28823: PPUSH
28824: PPUSH
28825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28826: LD_ADDR_VAR 0 3
28830: PUSH
28831: LD_INT 22
28833: PUSH
28834: LD_OWVAR 2
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 25
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PPUSH
28857: CALL_OW 69
28861: ST_TO_ADDR
// if not tmp then
28862: LD_VAR 0 3
28866: NOT
28867: IFFALSE 28871
// exit ;
28869: GO 28957
// un := tmp [ rand ( 1 , tmp ) ] ;
28871: LD_ADDR_VAR 0 2
28875: PUSH
28876: LD_VAR 0 3
28880: PUSH
28881: LD_INT 1
28883: PPUSH
28884: LD_VAR 0 3
28888: PPUSH
28889: CALL_OW 12
28893: ARRAY
28894: ST_TO_ADDR
// if Crawls ( un ) then
28895: LD_VAR 0 2
28899: PPUSH
28900: CALL_OW 318
28904: IFFALSE 28915
// ComWalk ( un ) ;
28906: LD_VAR 0 2
28910: PPUSH
28911: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28915: LD_VAR 0 2
28919: PPUSH
28920: LD_INT 9
28922: PPUSH
28923: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28927: LD_INT 28
28929: PPUSH
28930: LD_OWVAR 2
28934: PPUSH
28935: LD_INT 2
28937: PPUSH
28938: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28942: LD_INT 29
28944: PPUSH
28945: LD_OWVAR 2
28949: PPUSH
28950: LD_INT 2
28952: PPUSH
28953: CALL_OW 322
// end ;
28957: PPOPN 3
28959: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28960: LD_EXP 67
28964: PUSH
28965: LD_EXP 110
28969: AND
28970: IFFALSE 29081
28972: GO 28974
28974: DISABLE
28975: LD_INT 0
28977: PPUSH
28978: PPUSH
28979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28980: LD_ADDR_VAR 0 3
28984: PUSH
28985: LD_INT 22
28987: PUSH
28988: LD_OWVAR 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 25
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PPUSH
29011: CALL_OW 69
29015: ST_TO_ADDR
// if not tmp then
29016: LD_VAR 0 3
29020: NOT
29021: IFFALSE 29025
// exit ;
29023: GO 29081
// un := tmp [ rand ( 1 , tmp ) ] ;
29025: LD_ADDR_VAR 0 2
29029: PUSH
29030: LD_VAR 0 3
29034: PUSH
29035: LD_INT 1
29037: PPUSH
29038: LD_VAR 0 3
29042: PPUSH
29043: CALL_OW 12
29047: ARRAY
29048: ST_TO_ADDR
// if Crawls ( un ) then
29049: LD_VAR 0 2
29053: PPUSH
29054: CALL_OW 318
29058: IFFALSE 29069
// ComWalk ( un ) ;
29060: LD_VAR 0 2
29064: PPUSH
29065: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29069: LD_VAR 0 2
29073: PPUSH
29074: LD_INT 8
29076: PPUSH
29077: CALL_OW 336
// end ;
29081: PPOPN 3
29083: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29084: LD_EXP 67
29088: PUSH
29089: LD_EXP 111
29093: AND
29094: IFFALSE 29238
29096: GO 29098
29098: DISABLE
29099: LD_INT 0
29101: PPUSH
29102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29103: LD_ADDR_VAR 0 2
29107: PUSH
29108: LD_INT 22
29110: PUSH
29111: LD_OWVAR 2
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 21
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 2
29132: PUSH
29133: LD_INT 34
29135: PUSH
29136: LD_INT 12
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 34
29145: PUSH
29146: LD_INT 51
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 34
29155: PUSH
29156: LD_INT 32
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: PPUSH
29174: CALL_OW 69
29178: ST_TO_ADDR
// if not tmp then
29179: LD_VAR 0 2
29183: NOT
29184: IFFALSE 29188
// exit ;
29186: GO 29238
// for i in tmp do
29188: LD_ADDR_VAR 0 1
29192: PUSH
29193: LD_VAR 0 2
29197: PUSH
29198: FOR_IN
29199: IFFALSE 29236
// if GetCargo ( i , mat_artifact ) = 0 then
29201: LD_VAR 0 1
29205: PPUSH
29206: LD_INT 4
29208: PPUSH
29209: CALL_OW 289
29213: PUSH
29214: LD_INT 0
29216: EQUAL
29217: IFFALSE 29234
// SetCargo ( i , mat_siberit , 100 ) ;
29219: LD_VAR 0 1
29223: PPUSH
29224: LD_INT 3
29226: PPUSH
29227: LD_INT 100
29229: PPUSH
29230: CALL_OW 290
29234: GO 29198
29236: POP
29237: POP
// end ;
29238: PPOPN 2
29240: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29241: LD_EXP 67
29245: PUSH
29246: LD_EXP 112
29250: AND
29251: IFFALSE 29434
29253: GO 29255
29255: DISABLE
29256: LD_INT 0
29258: PPUSH
29259: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29260: LD_ADDR_VAR 0 2
29264: PUSH
29265: LD_INT 22
29267: PUSH
29268: LD_OWVAR 2
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PPUSH
29277: CALL_OW 69
29281: ST_TO_ADDR
// if not tmp then
29282: LD_VAR 0 2
29286: NOT
29287: IFFALSE 29291
// exit ;
29289: GO 29434
// for i := 1 to 2 do
29291: LD_ADDR_VAR 0 1
29295: PUSH
29296: DOUBLE
29297: LD_INT 1
29299: DEC
29300: ST_TO_ADDR
29301: LD_INT 2
29303: PUSH
29304: FOR_TO
29305: IFFALSE 29432
// begin uc_side := your_side ;
29307: LD_ADDR_OWVAR 20
29311: PUSH
29312: LD_OWVAR 2
29316: ST_TO_ADDR
// uc_nation := nation_american ;
29317: LD_ADDR_OWVAR 21
29321: PUSH
29322: LD_INT 1
29324: ST_TO_ADDR
// vc_chassis := us_morphling ;
29325: LD_ADDR_OWVAR 37
29329: PUSH
29330: LD_INT 5
29332: ST_TO_ADDR
// vc_engine := engine_siberite ;
29333: LD_ADDR_OWVAR 39
29337: PUSH
29338: LD_INT 3
29340: ST_TO_ADDR
// vc_control := control_computer ;
29341: LD_ADDR_OWVAR 38
29345: PUSH
29346: LD_INT 3
29348: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29349: LD_ADDR_OWVAR 40
29353: PUSH
29354: LD_INT 10
29356: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29357: LD_VAR 0 2
29361: PUSH
29362: LD_INT 1
29364: ARRAY
29365: PPUSH
29366: CALL_OW 310
29370: NOT
29371: IFFALSE 29418
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29373: CALL_OW 45
29377: PPUSH
29378: LD_VAR 0 2
29382: PUSH
29383: LD_INT 1
29385: ARRAY
29386: PPUSH
29387: CALL_OW 250
29391: PPUSH
29392: LD_VAR 0 2
29396: PUSH
29397: LD_INT 1
29399: ARRAY
29400: PPUSH
29401: CALL_OW 251
29405: PPUSH
29406: LD_INT 12
29408: PPUSH
29409: LD_INT 1
29411: PPUSH
29412: CALL_OW 50
29416: GO 29430
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29418: CALL_OW 45
29422: PPUSH
29423: LD_INT 1
29425: PPUSH
29426: CALL_OW 51
// end ;
29430: GO 29304
29432: POP
29433: POP
// end ;
29434: PPOPN 2
29436: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29437: LD_EXP 67
29441: PUSH
29442: LD_EXP 113
29446: AND
29447: IFFALSE 29669
29449: GO 29451
29451: DISABLE
29452: LD_INT 0
29454: PPUSH
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
29459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29460: LD_ADDR_VAR 0 6
29464: PUSH
29465: LD_INT 22
29467: PUSH
29468: LD_OWVAR 2
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 21
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 3
29489: PUSH
29490: LD_INT 23
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: LIST
29508: PPUSH
29509: CALL_OW 69
29513: ST_TO_ADDR
// if not tmp then
29514: LD_VAR 0 6
29518: NOT
29519: IFFALSE 29523
// exit ;
29521: GO 29669
// s1 := rand ( 1 , 4 ) ;
29523: LD_ADDR_VAR 0 2
29527: PUSH
29528: LD_INT 1
29530: PPUSH
29531: LD_INT 4
29533: PPUSH
29534: CALL_OW 12
29538: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29539: LD_ADDR_VAR 0 4
29543: PUSH
29544: LD_VAR 0 6
29548: PUSH
29549: LD_INT 1
29551: ARRAY
29552: PPUSH
29553: LD_VAR 0 2
29557: PPUSH
29558: CALL_OW 259
29562: ST_TO_ADDR
// if s1 = 1 then
29563: LD_VAR 0 2
29567: PUSH
29568: LD_INT 1
29570: EQUAL
29571: IFFALSE 29591
// s2 := rand ( 2 , 4 ) else
29573: LD_ADDR_VAR 0 3
29577: PUSH
29578: LD_INT 2
29580: PPUSH
29581: LD_INT 4
29583: PPUSH
29584: CALL_OW 12
29588: ST_TO_ADDR
29589: GO 29599
// s2 := 1 ;
29591: LD_ADDR_VAR 0 3
29595: PUSH
29596: LD_INT 1
29598: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29599: LD_ADDR_VAR 0 5
29603: PUSH
29604: LD_VAR 0 6
29608: PUSH
29609: LD_INT 1
29611: ARRAY
29612: PPUSH
29613: LD_VAR 0 3
29617: PPUSH
29618: CALL_OW 259
29622: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29623: LD_VAR 0 6
29627: PUSH
29628: LD_INT 1
29630: ARRAY
29631: PPUSH
29632: LD_VAR 0 2
29636: PPUSH
29637: LD_VAR 0 5
29641: PPUSH
29642: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29646: LD_VAR 0 6
29650: PUSH
29651: LD_INT 1
29653: ARRAY
29654: PPUSH
29655: LD_VAR 0 3
29659: PPUSH
29660: LD_VAR 0 4
29664: PPUSH
29665: CALL_OW 237
// end ;
29669: PPOPN 6
29671: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29672: LD_EXP 67
29676: PUSH
29677: LD_EXP 114
29681: AND
29682: IFFALSE 29761
29684: GO 29686
29686: DISABLE
29687: LD_INT 0
29689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29690: LD_ADDR_VAR 0 1
29694: PUSH
29695: LD_INT 22
29697: PUSH
29698: LD_OWVAR 2
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 30
29709: PUSH
29710: LD_INT 3
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PPUSH
29721: CALL_OW 69
29725: ST_TO_ADDR
// if not tmp then
29726: LD_VAR 0 1
29730: NOT
29731: IFFALSE 29735
// exit ;
29733: GO 29761
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29735: LD_VAR 0 1
29739: PUSH
29740: LD_INT 1
29742: PPUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 12
29752: ARRAY
29753: PPUSH
29754: LD_INT 1
29756: PPUSH
29757: CALL_OW 234
// end ;
29761: PPOPN 1
29763: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29764: LD_EXP 67
29768: PUSH
29769: LD_EXP 115
29773: AND
29774: IFFALSE 29886
29776: GO 29778
29778: DISABLE
29779: LD_INT 0
29781: PPUSH
29782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29783: LD_ADDR_VAR 0 2
29787: PUSH
29788: LD_INT 22
29790: PUSH
29791: LD_OWVAR 2
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 2
29802: PUSH
29803: LD_INT 30
29805: PUSH
29806: LD_INT 27
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 30
29815: PUSH
29816: LD_INT 26
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 30
29825: PUSH
29826: LD_INT 28
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PPUSH
29843: CALL_OW 69
29847: ST_TO_ADDR
// if not tmp then
29848: LD_VAR 0 2
29852: NOT
29853: IFFALSE 29857
// exit ;
29855: GO 29886
// for i in tmp do
29857: LD_ADDR_VAR 0 1
29861: PUSH
29862: LD_VAR 0 2
29866: PUSH
29867: FOR_IN
29868: IFFALSE 29884
// SetLives ( i , 1 ) ;
29870: LD_VAR 0 1
29874: PPUSH
29875: LD_INT 1
29877: PPUSH
29878: CALL_OW 234
29882: GO 29867
29884: POP
29885: POP
// end ;
29886: PPOPN 2
29888: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29889: LD_EXP 67
29893: PUSH
29894: LD_EXP 116
29898: AND
29899: IFFALSE 30186
29901: GO 29903
29903: DISABLE
29904: LD_INT 0
29906: PPUSH
29907: PPUSH
29908: PPUSH
// begin i := rand ( 1 , 7 ) ;
29909: LD_ADDR_VAR 0 1
29913: PUSH
29914: LD_INT 1
29916: PPUSH
29917: LD_INT 7
29919: PPUSH
29920: CALL_OW 12
29924: ST_TO_ADDR
// case i of 1 :
29925: LD_VAR 0 1
29929: PUSH
29930: LD_INT 1
29932: DOUBLE
29933: EQUAL
29934: IFTRUE 29938
29936: GO 29948
29938: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29939: LD_STRING earthquake(getX(game), 0, 32)
29941: PPUSH
29942: CALL_OW 559
29946: GO 30186
29948: LD_INT 2
29950: DOUBLE
29951: EQUAL
29952: IFTRUE 29956
29954: GO 29970
29956: POP
// begin ToLua ( displayStucuk(); ) ;
29957: LD_STRING displayStucuk();
29959: PPUSH
29960: CALL_OW 559
// ResetFog ;
29964: CALL_OW 335
// end ; 3 :
29968: GO 30186
29970: LD_INT 3
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 30082
29978: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29979: LD_ADDR_VAR 0 2
29983: PUSH
29984: LD_INT 22
29986: PUSH
29987: LD_OWVAR 2
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 25
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PPUSH
30010: CALL_OW 69
30014: ST_TO_ADDR
// if not tmp then
30015: LD_VAR 0 2
30019: NOT
30020: IFFALSE 30024
// exit ;
30022: GO 30186
// un := tmp [ rand ( 1 , tmp ) ] ;
30024: LD_ADDR_VAR 0 3
30028: PUSH
30029: LD_VAR 0 2
30033: PUSH
30034: LD_INT 1
30036: PPUSH
30037: LD_VAR 0 2
30041: PPUSH
30042: CALL_OW 12
30046: ARRAY
30047: ST_TO_ADDR
// if Crawls ( un ) then
30048: LD_VAR 0 3
30052: PPUSH
30053: CALL_OW 318
30057: IFFALSE 30068
// ComWalk ( un ) ;
30059: LD_VAR 0 3
30063: PPUSH
30064: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30068: LD_VAR 0 3
30072: PPUSH
30073: LD_INT 8
30075: PPUSH
30076: CALL_OW 336
// end ; 4 :
30080: GO 30186
30082: LD_INT 4
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 30164
30090: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30091: LD_ADDR_VAR 0 2
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: LD_OWVAR 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 30
30110: PUSH
30111: LD_INT 29
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PPUSH
30122: CALL_OW 69
30126: ST_TO_ADDR
// if not tmp then
30127: LD_VAR 0 2
30131: NOT
30132: IFFALSE 30136
// exit ;
30134: GO 30186
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30136: LD_VAR 0 2
30140: PUSH
30141: LD_INT 1
30143: ARRAY
30144: PPUSH
30145: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30149: LD_VAR 0 2
30153: PUSH
30154: LD_INT 1
30156: ARRAY
30157: PPUSH
30158: CALL_OW 65
// end ; 5 .. 7 :
30162: GO 30186
30164: LD_INT 5
30166: DOUBLE
30167: GREATEREQUAL
30168: IFFALSE 30176
30170: LD_INT 7
30172: DOUBLE
30173: LESSEQUAL
30174: IFTRUE 30178
30176: GO 30185
30178: POP
// StreamSibBomb ; end ;
30179: CALL 26423 0 0
30183: GO 30186
30185: POP
// end ;
30186: PPOPN 3
30188: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30189: LD_EXP 67
30193: PUSH
30194: LD_EXP 117
30198: AND
30199: IFFALSE 30355
30201: GO 30203
30203: DISABLE
30204: LD_INT 0
30206: PPUSH
30207: PPUSH
30208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30209: LD_ADDR_VAR 0 2
30213: PUSH
30214: LD_INT 81
30216: PUSH
30217: LD_OWVAR 2
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 21
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 21
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PPUSH
30258: CALL_OW 69
30262: ST_TO_ADDR
// if not tmp then
30263: LD_VAR 0 2
30267: NOT
30268: IFFALSE 30272
// exit ;
30270: GO 30355
// p := 0 ;
30272: LD_ADDR_VAR 0 3
30276: PUSH
30277: LD_INT 0
30279: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30280: LD_INT 35
30282: PPUSH
30283: CALL_OW 67
// p := p + 1 ;
30287: LD_ADDR_VAR 0 3
30291: PUSH
30292: LD_VAR 0 3
30296: PUSH
30297: LD_INT 1
30299: PLUS
30300: ST_TO_ADDR
// for i in tmp do
30301: LD_ADDR_VAR 0 1
30305: PUSH
30306: LD_VAR 0 2
30310: PUSH
30311: FOR_IN
30312: IFFALSE 30343
// if GetLives ( i ) < 1000 then
30314: LD_VAR 0 1
30318: PPUSH
30319: CALL_OW 256
30323: PUSH
30324: LD_INT 1000
30326: LESS
30327: IFFALSE 30341
// SetLives ( i , 1000 ) ;
30329: LD_VAR 0 1
30333: PPUSH
30334: LD_INT 1000
30336: PPUSH
30337: CALL_OW 234
30341: GO 30311
30343: POP
30344: POP
// until p > 20 ;
30345: LD_VAR 0 3
30349: PUSH
30350: LD_INT 20
30352: GREATER
30353: IFFALSE 30280
// end ;
30355: PPOPN 3
30357: END
// every 0 0$1 trigger StreamModeActive and sTime do
30358: LD_EXP 67
30362: PUSH
30363: LD_EXP 118
30367: AND
30368: IFFALSE 30403
30370: GO 30372
30372: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30373: LD_INT 28
30375: PPUSH
30376: LD_OWVAR 2
30380: PPUSH
30381: LD_INT 2
30383: PPUSH
30384: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30388: LD_INT 30
30390: PPUSH
30391: LD_OWVAR 2
30395: PPUSH
30396: LD_INT 2
30398: PPUSH
30399: CALL_OW 322
// end ;
30403: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30404: LD_EXP 67
30408: PUSH
30409: LD_EXP 119
30413: AND
30414: IFFALSE 30535
30416: GO 30418
30418: DISABLE
30419: LD_INT 0
30421: PPUSH
30422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30423: LD_ADDR_VAR 0 2
30427: PUSH
30428: LD_INT 22
30430: PUSH
30431: LD_OWVAR 2
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 21
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: LD_INT 23
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: LIST
30471: PPUSH
30472: CALL_OW 69
30476: ST_TO_ADDR
// if not tmp then
30477: LD_VAR 0 2
30481: NOT
30482: IFFALSE 30486
// exit ;
30484: GO 30535
// for i in tmp do
30486: LD_ADDR_VAR 0 1
30490: PUSH
30491: LD_VAR 0 2
30495: PUSH
30496: FOR_IN
30497: IFFALSE 30533
// begin if Crawls ( i ) then
30499: LD_VAR 0 1
30503: PPUSH
30504: CALL_OW 318
30508: IFFALSE 30519
// ComWalk ( i ) ;
30510: LD_VAR 0 1
30514: PPUSH
30515: CALL_OW 138
// SetClass ( i , 2 ) ;
30519: LD_VAR 0 1
30523: PPUSH
30524: LD_INT 2
30526: PPUSH
30527: CALL_OW 336
// end ;
30531: GO 30496
30533: POP
30534: POP
// end ;
30535: PPOPN 2
30537: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30538: LD_EXP 67
30542: PUSH
30543: LD_EXP 120
30547: AND
30548: IFFALSE 30836
30550: GO 30552
30552: DISABLE
30553: LD_INT 0
30555: PPUSH
30556: PPUSH
30557: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30558: LD_OWVAR 2
30562: PPUSH
30563: LD_INT 9
30565: PPUSH
30566: LD_INT 1
30568: PPUSH
30569: LD_INT 1
30571: PPUSH
30572: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30576: LD_INT 9
30578: PPUSH
30579: LD_OWVAR 2
30583: PPUSH
30584: CALL_OW 343
// uc_side := 9 ;
30588: LD_ADDR_OWVAR 20
30592: PUSH
30593: LD_INT 9
30595: ST_TO_ADDR
// uc_nation := 2 ;
30596: LD_ADDR_OWVAR 21
30600: PUSH
30601: LD_INT 2
30603: ST_TO_ADDR
// hc_name := Dark Warrior ;
30604: LD_ADDR_OWVAR 26
30608: PUSH
30609: LD_STRING Dark Warrior
30611: ST_TO_ADDR
// hc_gallery :=  ;
30612: LD_ADDR_OWVAR 33
30616: PUSH
30617: LD_STRING 
30619: ST_TO_ADDR
// hc_noskilllimit := true ;
30620: LD_ADDR_OWVAR 76
30624: PUSH
30625: LD_INT 1
30627: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30628: LD_ADDR_OWVAR 31
30632: PUSH
30633: LD_INT 30
30635: PUSH
30636: LD_INT 30
30638: PUSH
30639: LD_INT 30
30641: PUSH
30642: LD_INT 30
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: ST_TO_ADDR
// un := CreateHuman ;
30651: LD_ADDR_VAR 0 3
30655: PUSH
30656: CALL_OW 44
30660: ST_TO_ADDR
// hc_noskilllimit := false ;
30661: LD_ADDR_OWVAR 76
30665: PUSH
30666: LD_INT 0
30668: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30669: LD_VAR 0 3
30673: PPUSH
30674: LD_INT 1
30676: PPUSH
30677: CALL_OW 51
// ToLua ( playRanger() ) ;
30681: LD_STRING playRanger()
30683: PPUSH
30684: CALL_OW 559
// p := 0 ;
30688: LD_ADDR_VAR 0 2
30692: PUSH
30693: LD_INT 0
30695: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30696: LD_INT 35
30698: PPUSH
30699: CALL_OW 67
// p := p + 1 ;
30703: LD_ADDR_VAR 0 2
30707: PUSH
30708: LD_VAR 0 2
30712: PUSH
30713: LD_INT 1
30715: PLUS
30716: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30717: LD_VAR 0 3
30721: PPUSH
30722: CALL_OW 256
30726: PUSH
30727: LD_INT 1000
30729: LESS
30730: IFFALSE 30744
// SetLives ( un , 1000 ) ;
30732: LD_VAR 0 3
30736: PPUSH
30737: LD_INT 1000
30739: PPUSH
30740: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30744: LD_VAR 0 3
30748: PPUSH
30749: LD_INT 81
30751: PUSH
30752: LD_OWVAR 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 91
30763: PUSH
30764: LD_VAR 0 3
30768: PUSH
30769: LD_INT 30
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PPUSH
30781: CALL_OW 69
30785: PPUSH
30786: LD_VAR 0 3
30790: PPUSH
30791: CALL_OW 74
30795: PPUSH
30796: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30800: LD_VAR 0 2
30804: PUSH
30805: LD_INT 80
30807: GREATER
30808: PUSH
30809: LD_VAR 0 3
30813: PPUSH
30814: CALL_OW 301
30818: OR
30819: IFFALSE 30696
// if un then
30821: LD_VAR 0 3
30825: IFFALSE 30836
// RemoveUnit ( un ) ;
30827: LD_VAR 0 3
30831: PPUSH
30832: CALL_OW 64
// end ;
30836: PPOPN 3
30838: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30839: LD_EXP 121
30843: IFFALSE 30959
30845: GO 30847
30847: DISABLE
30848: LD_INT 0
30850: PPUSH
30851: PPUSH
30852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30853: LD_ADDR_VAR 0 2
30857: PUSH
30858: LD_INT 81
30860: PUSH
30861: LD_OWVAR 2
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 21
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PPUSH
30884: CALL_OW 69
30888: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30889: LD_STRING playComputer()
30891: PPUSH
30892: CALL_OW 559
// if not tmp then
30896: LD_VAR 0 2
30900: NOT
30901: IFFALSE 30905
// exit ;
30903: GO 30959
// for i in tmp do
30905: LD_ADDR_VAR 0 1
30909: PUSH
30910: LD_VAR 0 2
30914: PUSH
30915: FOR_IN
30916: IFFALSE 30957
// for j := 1 to 4 do
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: DOUBLE
30924: LD_INT 1
30926: DEC
30927: ST_TO_ADDR
30928: LD_INT 4
30930: PUSH
30931: FOR_TO
30932: IFFALSE 30953
// SetSkill ( i , j , 10 ) ;
30934: LD_VAR 0 1
30938: PPUSH
30939: LD_VAR 0 3
30943: PPUSH
30944: LD_INT 10
30946: PPUSH
30947: CALL_OW 237
30951: GO 30931
30953: POP
30954: POP
30955: GO 30915
30957: POP
30958: POP
// end ;
30959: PPOPN 3
30961: END
// every 0 0$1 trigger s30 do var i , tmp ;
30962: LD_EXP 122
30966: IFFALSE 31035
30968: GO 30970
30970: DISABLE
30971: LD_INT 0
30973: PPUSH
30974: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30975: LD_ADDR_VAR 0 2
30979: PUSH
30980: LD_INT 22
30982: PUSH
30983: LD_OWVAR 2
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PPUSH
30992: CALL_OW 69
30996: ST_TO_ADDR
// if not tmp then
30997: LD_VAR 0 2
31001: NOT
31002: IFFALSE 31006
// exit ;
31004: GO 31035
// for i in tmp do
31006: LD_ADDR_VAR 0 1
31010: PUSH
31011: LD_VAR 0 2
31015: PUSH
31016: FOR_IN
31017: IFFALSE 31033
// SetLives ( i , 300 ) ;
31019: LD_VAR 0 1
31023: PPUSH
31024: LD_INT 300
31026: PPUSH
31027: CALL_OW 234
31031: GO 31016
31033: POP
31034: POP
// end ;
31035: PPOPN 2
31037: END
// every 0 0$1 trigger s60 do var i , tmp ;
31038: LD_EXP 123
31042: IFFALSE 31111
31044: GO 31046
31046: DISABLE
31047: LD_INT 0
31049: PPUSH
31050: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31051: LD_ADDR_VAR 0 2
31055: PUSH
31056: LD_INT 22
31058: PUSH
31059: LD_OWVAR 2
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PPUSH
31068: CALL_OW 69
31072: ST_TO_ADDR
// if not tmp then
31073: LD_VAR 0 2
31077: NOT
31078: IFFALSE 31082
// exit ;
31080: GO 31111
// for i in tmp do
31082: LD_ADDR_VAR 0 1
31086: PUSH
31087: LD_VAR 0 2
31091: PUSH
31092: FOR_IN
31093: IFFALSE 31109
// SetLives ( i , 600 ) ;
31095: LD_VAR 0 1
31099: PPUSH
31100: LD_INT 600
31102: PPUSH
31103: CALL_OW 234
31107: GO 31092
31109: POP
31110: POP
// end ;
31111: PPOPN 2
31113: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31114: LD_INT 0
31116: PPUSH
// case cmd of 301 :
31117: LD_VAR 0 1
31121: PUSH
31122: LD_INT 301
31124: DOUBLE
31125: EQUAL
31126: IFTRUE 31130
31128: GO 31162
31130: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31131: LD_VAR 0 6
31135: PPUSH
31136: LD_VAR 0 7
31140: PPUSH
31141: LD_VAR 0 8
31145: PPUSH
31146: LD_VAR 0 4
31150: PPUSH
31151: LD_VAR 0 5
31155: PPUSH
31156: CALL 32363 0 5
31160: GO 31283
31162: LD_INT 302
31164: DOUBLE
31165: EQUAL
31166: IFTRUE 31170
31168: GO 31207
31170: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31171: LD_VAR 0 6
31175: PPUSH
31176: LD_VAR 0 7
31180: PPUSH
31181: LD_VAR 0 8
31185: PPUSH
31186: LD_VAR 0 9
31190: PPUSH
31191: LD_VAR 0 4
31195: PPUSH
31196: LD_VAR 0 5
31200: PPUSH
31201: CALL 32454 0 6
31205: GO 31283
31207: LD_INT 303
31209: DOUBLE
31210: EQUAL
31211: IFTRUE 31215
31213: GO 31252
31215: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31216: LD_VAR 0 6
31220: PPUSH
31221: LD_VAR 0 7
31225: PPUSH
31226: LD_VAR 0 8
31230: PPUSH
31231: LD_VAR 0 9
31235: PPUSH
31236: LD_VAR 0 4
31240: PPUSH
31241: LD_VAR 0 5
31245: PPUSH
31246: CALL 31288 0 6
31250: GO 31283
31252: LD_INT 304
31254: DOUBLE
31255: EQUAL
31256: IFTRUE 31260
31258: GO 31282
31260: POP
// hHackTeleport ( unit , x , y ) ; end ;
31261: LD_VAR 0 2
31265: PPUSH
31266: LD_VAR 0 4
31270: PPUSH
31271: LD_VAR 0 5
31275: PPUSH
31276: CALL 33047 0 3
31280: GO 31283
31282: POP
// end ;
31283: LD_VAR 0 12
31287: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31288: LD_INT 0
31290: PPUSH
31291: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31292: LD_VAR 0 1
31296: PUSH
31297: LD_INT 1
31299: LESS
31300: PUSH
31301: LD_VAR 0 1
31305: PUSH
31306: LD_INT 3
31308: GREATER
31309: OR
31310: PUSH
31311: LD_VAR 0 5
31315: PPUSH
31316: LD_VAR 0 6
31320: PPUSH
31321: CALL_OW 428
31325: OR
31326: IFFALSE 31330
// exit ;
31328: GO 32050
// uc_side := your_side ;
31330: LD_ADDR_OWVAR 20
31334: PUSH
31335: LD_OWVAR 2
31339: ST_TO_ADDR
// uc_nation := nation ;
31340: LD_ADDR_OWVAR 21
31344: PUSH
31345: LD_VAR 0 1
31349: ST_TO_ADDR
// bc_level = 1 ;
31350: LD_ADDR_OWVAR 43
31354: PUSH
31355: LD_INT 1
31357: ST_TO_ADDR
// case btype of 1 :
31358: LD_VAR 0 2
31362: PUSH
31363: LD_INT 1
31365: DOUBLE
31366: EQUAL
31367: IFTRUE 31371
31369: GO 31382
31371: POP
// bc_type := b_depot ; 2 :
31372: LD_ADDR_OWVAR 42
31376: PUSH
31377: LD_INT 0
31379: ST_TO_ADDR
31380: GO 31994
31382: LD_INT 2
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31401
31390: POP
// bc_type := b_warehouse ; 3 :
31391: LD_ADDR_OWVAR 42
31395: PUSH
31396: LD_INT 1
31398: ST_TO_ADDR
31399: GO 31994
31401: LD_INT 3
31403: DOUBLE
31404: EQUAL
31405: IFTRUE 31409
31407: GO 31420
31409: POP
// bc_type := b_lab ; 4 .. 9 :
31410: LD_ADDR_OWVAR 42
31414: PUSH
31415: LD_INT 6
31417: ST_TO_ADDR
31418: GO 31994
31420: LD_INT 4
31422: DOUBLE
31423: GREATEREQUAL
31424: IFFALSE 31432
31426: LD_INT 9
31428: DOUBLE
31429: LESSEQUAL
31430: IFTRUE 31434
31432: GO 31486
31434: POP
// begin bc_type := b_lab_half ;
31435: LD_ADDR_OWVAR 42
31439: PUSH
31440: LD_INT 7
31442: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31443: LD_ADDR_OWVAR 44
31447: PUSH
31448: LD_INT 10
31450: PUSH
31451: LD_INT 11
31453: PUSH
31454: LD_INT 12
31456: PUSH
31457: LD_INT 15
31459: PUSH
31460: LD_INT 14
31462: PUSH
31463: LD_INT 13
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: PUSH
31474: LD_VAR 0 2
31478: PUSH
31479: LD_INT 3
31481: MINUS
31482: ARRAY
31483: ST_TO_ADDR
// end ; 10 .. 13 :
31484: GO 31994
31486: LD_INT 10
31488: DOUBLE
31489: GREATEREQUAL
31490: IFFALSE 31498
31492: LD_INT 13
31494: DOUBLE
31495: LESSEQUAL
31496: IFTRUE 31500
31498: GO 31577
31500: POP
// begin bc_type := b_lab_full ;
31501: LD_ADDR_OWVAR 42
31505: PUSH
31506: LD_INT 8
31508: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31509: LD_ADDR_OWVAR 44
31513: PUSH
31514: LD_INT 10
31516: PUSH
31517: LD_INT 12
31519: PUSH
31520: LD_INT 14
31522: PUSH
31523: LD_INT 13
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: PUSH
31532: LD_VAR 0 2
31536: PUSH
31537: LD_INT 9
31539: MINUS
31540: ARRAY
31541: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31542: LD_ADDR_OWVAR 45
31546: PUSH
31547: LD_INT 11
31549: PUSH
31550: LD_INT 15
31552: PUSH
31553: LD_INT 12
31555: PUSH
31556: LD_INT 15
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: PUSH
31565: LD_VAR 0 2
31569: PUSH
31570: LD_INT 9
31572: MINUS
31573: ARRAY
31574: ST_TO_ADDR
// end ; 14 :
31575: GO 31994
31577: LD_INT 14
31579: DOUBLE
31580: EQUAL
31581: IFTRUE 31585
31583: GO 31596
31585: POP
// bc_type := b_workshop ; 15 :
31586: LD_ADDR_OWVAR 42
31590: PUSH
31591: LD_INT 2
31593: ST_TO_ADDR
31594: GO 31994
31596: LD_INT 15
31598: DOUBLE
31599: EQUAL
31600: IFTRUE 31604
31602: GO 31615
31604: POP
// bc_type := b_factory ; 16 :
31605: LD_ADDR_OWVAR 42
31609: PUSH
31610: LD_INT 3
31612: ST_TO_ADDR
31613: GO 31994
31615: LD_INT 16
31617: DOUBLE
31618: EQUAL
31619: IFTRUE 31623
31621: GO 31634
31623: POP
// bc_type := b_ext_gun ; 17 :
31624: LD_ADDR_OWVAR 42
31628: PUSH
31629: LD_INT 17
31631: ST_TO_ADDR
31632: GO 31994
31634: LD_INT 17
31636: DOUBLE
31637: EQUAL
31638: IFTRUE 31642
31640: GO 31670
31642: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31643: LD_ADDR_OWVAR 42
31647: PUSH
31648: LD_INT 19
31650: PUSH
31651: LD_INT 23
31653: PUSH
31654: LD_INT 19
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: PUSH
31662: LD_VAR 0 1
31666: ARRAY
31667: ST_TO_ADDR
31668: GO 31994
31670: LD_INT 18
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31678
31676: GO 31689
31678: POP
// bc_type := b_ext_radar ; 19 :
31679: LD_ADDR_OWVAR 42
31683: PUSH
31684: LD_INT 20
31686: ST_TO_ADDR
31687: GO 31994
31689: LD_INT 19
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31708
31697: POP
// bc_type := b_ext_radio ; 20 :
31698: LD_ADDR_OWVAR 42
31702: PUSH
31703: LD_INT 22
31705: ST_TO_ADDR
31706: GO 31994
31708: LD_INT 20
31710: DOUBLE
31711: EQUAL
31712: IFTRUE 31716
31714: GO 31727
31716: POP
// bc_type := b_ext_siberium ; 21 :
31717: LD_ADDR_OWVAR 42
31721: PUSH
31722: LD_INT 21
31724: ST_TO_ADDR
31725: GO 31994
31727: LD_INT 21
31729: DOUBLE
31730: EQUAL
31731: IFTRUE 31735
31733: GO 31746
31735: POP
// bc_type := b_ext_computer ; 22 :
31736: LD_ADDR_OWVAR 42
31740: PUSH
31741: LD_INT 24
31743: ST_TO_ADDR
31744: GO 31994
31746: LD_INT 22
31748: DOUBLE
31749: EQUAL
31750: IFTRUE 31754
31752: GO 31765
31754: POP
// bc_type := b_ext_track ; 23 :
31755: LD_ADDR_OWVAR 42
31759: PUSH
31760: LD_INT 16
31762: ST_TO_ADDR
31763: GO 31994
31765: LD_INT 23
31767: DOUBLE
31768: EQUAL
31769: IFTRUE 31773
31771: GO 31784
31773: POP
// bc_type := b_ext_laser ; 24 :
31774: LD_ADDR_OWVAR 42
31778: PUSH
31779: LD_INT 25
31781: ST_TO_ADDR
31782: GO 31994
31784: LD_INT 24
31786: DOUBLE
31787: EQUAL
31788: IFTRUE 31792
31790: GO 31803
31792: POP
// bc_type := b_control_tower ; 25 :
31793: LD_ADDR_OWVAR 42
31797: PUSH
31798: LD_INT 36
31800: ST_TO_ADDR
31801: GO 31994
31803: LD_INT 25
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 31822
31811: POP
// bc_type := b_breastwork ; 26 :
31812: LD_ADDR_OWVAR 42
31816: PUSH
31817: LD_INT 31
31819: ST_TO_ADDR
31820: GO 31994
31822: LD_INT 26
31824: DOUBLE
31825: EQUAL
31826: IFTRUE 31830
31828: GO 31841
31830: POP
// bc_type := b_bunker ; 27 :
31831: LD_ADDR_OWVAR 42
31835: PUSH
31836: LD_INT 32
31838: ST_TO_ADDR
31839: GO 31994
31841: LD_INT 27
31843: DOUBLE
31844: EQUAL
31845: IFTRUE 31849
31847: GO 31860
31849: POP
// bc_type := b_turret ; 28 :
31850: LD_ADDR_OWVAR 42
31854: PUSH
31855: LD_INT 33
31857: ST_TO_ADDR
31858: GO 31994
31860: LD_INT 28
31862: DOUBLE
31863: EQUAL
31864: IFTRUE 31868
31866: GO 31879
31868: POP
// bc_type := b_armoury ; 29 :
31869: LD_ADDR_OWVAR 42
31873: PUSH
31874: LD_INT 4
31876: ST_TO_ADDR
31877: GO 31994
31879: LD_INT 29
31881: DOUBLE
31882: EQUAL
31883: IFTRUE 31887
31885: GO 31898
31887: POP
// bc_type := b_barracks ; 30 :
31888: LD_ADDR_OWVAR 42
31892: PUSH
31893: LD_INT 5
31895: ST_TO_ADDR
31896: GO 31994
31898: LD_INT 30
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 31917
31906: POP
// bc_type := b_solar_power ; 31 :
31907: LD_ADDR_OWVAR 42
31911: PUSH
31912: LD_INT 27
31914: ST_TO_ADDR
31915: GO 31994
31917: LD_INT 31
31919: DOUBLE
31920: EQUAL
31921: IFTRUE 31925
31923: GO 31936
31925: POP
// bc_type := b_oil_power ; 32 :
31926: LD_ADDR_OWVAR 42
31930: PUSH
31931: LD_INT 26
31933: ST_TO_ADDR
31934: GO 31994
31936: LD_INT 32
31938: DOUBLE
31939: EQUAL
31940: IFTRUE 31944
31942: GO 31955
31944: POP
// bc_type := b_siberite_power ; 33 :
31945: LD_ADDR_OWVAR 42
31949: PUSH
31950: LD_INT 28
31952: ST_TO_ADDR
31953: GO 31994
31955: LD_INT 33
31957: DOUBLE
31958: EQUAL
31959: IFTRUE 31963
31961: GO 31974
31963: POP
// bc_type := b_oil_mine ; 34 :
31964: LD_ADDR_OWVAR 42
31968: PUSH
31969: LD_INT 29
31971: ST_TO_ADDR
31972: GO 31994
31974: LD_INT 34
31976: DOUBLE
31977: EQUAL
31978: IFTRUE 31982
31980: GO 31993
31982: POP
// bc_type := b_siberite_mine ; end ;
31983: LD_ADDR_OWVAR 42
31987: PUSH
31988: LD_INT 30
31990: ST_TO_ADDR
31991: GO 31994
31993: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31994: LD_ADDR_VAR 0 8
31998: PUSH
31999: LD_VAR 0 5
32003: PPUSH
32004: LD_VAR 0 6
32008: PPUSH
32009: LD_VAR 0 3
32013: PPUSH
32014: CALL_OW 47
32018: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32019: LD_OWVAR 42
32023: PUSH
32024: LD_INT 32
32026: PUSH
32027: LD_INT 33
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: IN
32034: IFFALSE 32050
// PlaceWeaponTurret ( b , weapon ) ;
32036: LD_VAR 0 8
32040: PPUSH
32041: LD_VAR 0 4
32045: PPUSH
32046: CALL_OW 431
// end ;
32050: LD_VAR 0 7
32054: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32055: LD_INT 0
32057: PPUSH
32058: PPUSH
32059: PPUSH
32060: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32061: LD_ADDR_VAR 0 4
32065: PUSH
32066: LD_INT 22
32068: PUSH
32069: LD_OWVAR 2
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 30
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 30
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PPUSH
32110: CALL_OW 69
32114: ST_TO_ADDR
// if not tmp then
32115: LD_VAR 0 4
32119: NOT
32120: IFFALSE 32124
// exit ;
32122: GO 32183
// for i in tmp do
32124: LD_ADDR_VAR 0 2
32128: PUSH
32129: LD_VAR 0 4
32133: PUSH
32134: FOR_IN
32135: IFFALSE 32181
// for j = 1 to 3 do
32137: LD_ADDR_VAR 0 3
32141: PUSH
32142: DOUBLE
32143: LD_INT 1
32145: DEC
32146: ST_TO_ADDR
32147: LD_INT 3
32149: PUSH
32150: FOR_TO
32151: IFFALSE 32177
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32153: LD_VAR 0 2
32157: PPUSH
32158: CALL_OW 274
32162: PPUSH
32163: LD_VAR 0 3
32167: PPUSH
32168: LD_INT 99999
32170: PPUSH
32171: CALL_OW 277
32175: GO 32150
32177: POP
32178: POP
32179: GO 32134
32181: POP
32182: POP
// end ;
32183: LD_VAR 0 1
32187: RET
// export function hHackSetLevel10 ; var i , j ; begin
32188: LD_INT 0
32190: PPUSH
32191: PPUSH
32192: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32193: LD_ADDR_VAR 0 2
32197: PUSH
32198: LD_INT 21
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PPUSH
32208: CALL_OW 69
32212: PUSH
32213: FOR_IN
32214: IFFALSE 32266
// if IsSelected ( i ) then
32216: LD_VAR 0 2
32220: PPUSH
32221: CALL_OW 306
32225: IFFALSE 32264
// begin for j := 1 to 4 do
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: DOUBLE
32233: LD_INT 1
32235: DEC
32236: ST_TO_ADDR
32237: LD_INT 4
32239: PUSH
32240: FOR_TO
32241: IFFALSE 32262
// SetSkill ( i , j , 10 ) ;
32243: LD_VAR 0 2
32247: PPUSH
32248: LD_VAR 0 3
32252: PPUSH
32253: LD_INT 10
32255: PPUSH
32256: CALL_OW 237
32260: GO 32240
32262: POP
32263: POP
// end ;
32264: GO 32213
32266: POP
32267: POP
// end ;
32268: LD_VAR 0 1
32272: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32273: LD_INT 0
32275: PPUSH
32276: PPUSH
32277: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32278: LD_ADDR_VAR 0 2
32282: PUSH
32283: LD_INT 22
32285: PUSH
32286: LD_OWVAR 2
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 21
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PPUSH
32309: CALL_OW 69
32313: PUSH
32314: FOR_IN
32315: IFFALSE 32356
// begin for j := 1 to 4 do
32317: LD_ADDR_VAR 0 3
32321: PUSH
32322: DOUBLE
32323: LD_INT 1
32325: DEC
32326: ST_TO_ADDR
32327: LD_INT 4
32329: PUSH
32330: FOR_TO
32331: IFFALSE 32352
// SetSkill ( i , j , 10 ) ;
32333: LD_VAR 0 2
32337: PPUSH
32338: LD_VAR 0 3
32342: PPUSH
32343: LD_INT 10
32345: PPUSH
32346: CALL_OW 237
32350: GO 32330
32352: POP
32353: POP
// end ;
32354: GO 32314
32356: POP
32357: POP
// end ;
32358: LD_VAR 0 1
32362: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32363: LD_INT 0
32365: PPUSH
// uc_side := your_side ;
32366: LD_ADDR_OWVAR 20
32370: PUSH
32371: LD_OWVAR 2
32375: ST_TO_ADDR
// uc_nation := nation ;
32376: LD_ADDR_OWVAR 21
32380: PUSH
32381: LD_VAR 0 1
32385: ST_TO_ADDR
// InitHc ;
32386: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32390: LD_INT 0
32392: PPUSH
32393: LD_VAR 0 2
32397: PPUSH
32398: LD_VAR 0 3
32402: PPUSH
32403: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32407: LD_VAR 0 4
32411: PPUSH
32412: LD_VAR 0 5
32416: PPUSH
32417: CALL_OW 428
32421: PUSH
32422: LD_INT 0
32424: EQUAL
32425: IFFALSE 32449
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32427: CALL_OW 44
32431: PPUSH
32432: LD_VAR 0 4
32436: PPUSH
32437: LD_VAR 0 5
32441: PPUSH
32442: LD_INT 1
32444: PPUSH
32445: CALL_OW 48
// end ;
32449: LD_VAR 0 6
32453: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32454: LD_INT 0
32456: PPUSH
32457: PPUSH
// uc_side := your_side ;
32458: LD_ADDR_OWVAR 20
32462: PUSH
32463: LD_OWVAR 2
32467: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32468: LD_VAR 0 1
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 3
32481: PUSH
32482: LD_INT 4
32484: PUSH
32485: LD_INT 5
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: IN
32495: IFFALSE 32507
// uc_nation := nation_american else
32497: LD_ADDR_OWVAR 21
32501: PUSH
32502: LD_INT 1
32504: ST_TO_ADDR
32505: GO 32550
// if chassis in [ 11 , 12 , 13 , 14 ] then
32507: LD_VAR 0 1
32511: PUSH
32512: LD_INT 11
32514: PUSH
32515: LD_INT 12
32517: PUSH
32518: LD_INT 13
32520: PUSH
32521: LD_INT 14
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: IN
32530: IFFALSE 32542
// uc_nation := nation_arabian else
32532: LD_ADDR_OWVAR 21
32536: PUSH
32537: LD_INT 2
32539: ST_TO_ADDR
32540: GO 32550
// uc_nation := nation_russian ;
32542: LD_ADDR_OWVAR 21
32546: PUSH
32547: LD_INT 3
32549: ST_TO_ADDR
// vc_chassis := chassis ;
32550: LD_ADDR_OWVAR 37
32554: PUSH
32555: LD_VAR 0 1
32559: ST_TO_ADDR
// vc_engine := engine ;
32560: LD_ADDR_OWVAR 39
32564: PUSH
32565: LD_VAR 0 2
32569: ST_TO_ADDR
// vc_control := control ;
32570: LD_ADDR_OWVAR 38
32574: PUSH
32575: LD_VAR 0 3
32579: ST_TO_ADDR
// vc_weapon := weapon ;
32580: LD_ADDR_OWVAR 40
32584: PUSH
32585: LD_VAR 0 4
32589: ST_TO_ADDR
// un := CreateVehicle ;
32590: LD_ADDR_VAR 0 8
32594: PUSH
32595: CALL_OW 45
32599: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32600: LD_VAR 0 8
32604: PPUSH
32605: LD_INT 0
32607: PPUSH
32608: LD_INT 5
32610: PPUSH
32611: CALL_OW 12
32615: PPUSH
32616: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32620: LD_VAR 0 8
32624: PPUSH
32625: LD_VAR 0 5
32629: PPUSH
32630: LD_VAR 0 6
32634: PPUSH
32635: LD_INT 1
32637: PPUSH
32638: CALL_OW 48
// end ;
32642: LD_VAR 0 7
32646: RET
// export hInvincible ; every 1 do
32647: GO 32649
32649: DISABLE
// hInvincible := [ ] ;
32650: LD_ADDR_EXP 124
32654: PUSH
32655: EMPTY
32656: ST_TO_ADDR
32657: END
// every 10 do var i ;
32658: GO 32660
32660: DISABLE
32661: LD_INT 0
32663: PPUSH
// begin enable ;
32664: ENABLE
// if not hInvincible then
32665: LD_EXP 124
32669: NOT
32670: IFFALSE 32674
// exit ;
32672: GO 32718
// for i in hInvincible do
32674: LD_ADDR_VAR 0 1
32678: PUSH
32679: LD_EXP 124
32683: PUSH
32684: FOR_IN
32685: IFFALSE 32716
// if GetLives ( i ) < 1000 then
32687: LD_VAR 0 1
32691: PPUSH
32692: CALL_OW 256
32696: PUSH
32697: LD_INT 1000
32699: LESS
32700: IFFALSE 32714
// SetLives ( i , 1000 ) ;
32702: LD_VAR 0 1
32706: PPUSH
32707: LD_INT 1000
32709: PPUSH
32710: CALL_OW 234
32714: GO 32684
32716: POP
32717: POP
// end ;
32718: PPOPN 1
32720: END
// export function hHackInvincible ; var i ; begin
32721: LD_INT 0
32723: PPUSH
32724: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32725: LD_ADDR_VAR 0 2
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 21
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 21
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: PPUSH
32758: CALL_OW 69
32762: PUSH
32763: FOR_IN
32764: IFFALSE 32825
// if IsSelected ( i ) then
32766: LD_VAR 0 2
32770: PPUSH
32771: CALL_OW 306
32775: IFFALSE 32823
// begin if i in hInvincible then
32777: LD_VAR 0 2
32781: PUSH
32782: LD_EXP 124
32786: IN
32787: IFFALSE 32807
// hInvincible := hInvincible diff i else
32789: LD_ADDR_EXP 124
32793: PUSH
32794: LD_EXP 124
32798: PUSH
32799: LD_VAR 0 2
32803: DIFF
32804: ST_TO_ADDR
32805: GO 32823
// hInvincible := hInvincible union i ;
32807: LD_ADDR_EXP 124
32811: PUSH
32812: LD_EXP 124
32816: PUSH
32817: LD_VAR 0 2
32821: UNION
32822: ST_TO_ADDR
// end ;
32823: GO 32763
32825: POP
32826: POP
// end ;
32827: LD_VAR 0 1
32831: RET
// export function hHackInvisible ; var i , j ; begin
32832: LD_INT 0
32834: PPUSH
32835: PPUSH
32836: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32837: LD_ADDR_VAR 0 2
32841: PUSH
32842: LD_INT 21
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PPUSH
32852: CALL_OW 69
32856: PUSH
32857: FOR_IN
32858: IFFALSE 32882
// if IsSelected ( i ) then
32860: LD_VAR 0 2
32864: PPUSH
32865: CALL_OW 306
32869: IFFALSE 32880
// ComForceInvisible ( i ) ;
32871: LD_VAR 0 2
32875: PPUSH
32876: CALL_OW 496
32880: GO 32857
32882: POP
32883: POP
// end ;
32884: LD_VAR 0 1
32888: RET
// export function hHackChangeYourSide ; begin
32889: LD_INT 0
32891: PPUSH
// if your_side = 8 then
32892: LD_OWVAR 2
32896: PUSH
32897: LD_INT 8
32899: EQUAL
32900: IFFALSE 32912
// your_side := 0 else
32902: LD_ADDR_OWVAR 2
32906: PUSH
32907: LD_INT 0
32909: ST_TO_ADDR
32910: GO 32926
// your_side := your_side + 1 ;
32912: LD_ADDR_OWVAR 2
32916: PUSH
32917: LD_OWVAR 2
32921: PUSH
32922: LD_INT 1
32924: PLUS
32925: ST_TO_ADDR
// end ;
32926: LD_VAR 0 1
32930: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32931: LD_INT 0
32933: PPUSH
32934: PPUSH
32935: PPUSH
// for i in all_units do
32936: LD_ADDR_VAR 0 2
32940: PUSH
32941: LD_OWVAR 3
32945: PUSH
32946: FOR_IN
32947: IFFALSE 33025
// if IsSelected ( i ) then
32949: LD_VAR 0 2
32953: PPUSH
32954: CALL_OW 306
32958: IFFALSE 33023
// begin j := GetSide ( i ) ;
32960: LD_ADDR_VAR 0 3
32964: PUSH
32965: LD_VAR 0 2
32969: PPUSH
32970: CALL_OW 255
32974: ST_TO_ADDR
// if j = 8 then
32975: LD_VAR 0 3
32979: PUSH
32980: LD_INT 8
32982: EQUAL
32983: IFFALSE 32995
// j := 0 else
32985: LD_ADDR_VAR 0 3
32989: PUSH
32990: LD_INT 0
32992: ST_TO_ADDR
32993: GO 33009
// j := j + 1 ;
32995: LD_ADDR_VAR 0 3
32999: PUSH
33000: LD_VAR 0 3
33004: PUSH
33005: LD_INT 1
33007: PLUS
33008: ST_TO_ADDR
// SetSide ( i , j ) ;
33009: LD_VAR 0 2
33013: PPUSH
33014: LD_VAR 0 3
33018: PPUSH
33019: CALL_OW 235
// end ;
33023: GO 32946
33025: POP
33026: POP
// end ;
33027: LD_VAR 0 1
33031: RET
// export function hHackFog ; begin
33032: LD_INT 0
33034: PPUSH
// FogOff ( true ) ;
33035: LD_INT 1
33037: PPUSH
33038: CALL_OW 344
// end ;
33042: LD_VAR 0 1
33046: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33047: LD_INT 0
33049: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33050: LD_VAR 0 1
33054: PPUSH
33055: LD_VAR 0 2
33059: PPUSH
33060: LD_VAR 0 3
33064: PPUSH
33065: LD_INT 1
33067: PPUSH
33068: LD_INT 1
33070: PPUSH
33071: CALL_OW 483
// CenterOnXY ( x , y ) ;
33075: LD_VAR 0 2
33079: PPUSH
33080: LD_VAR 0 3
33084: PPUSH
33085: CALL_OW 84
// end ;
33089: LD_VAR 0 4
33093: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33094: LD_INT 0
33096: PPUSH
33097: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33098: LD_VAR 0 1
33102: NOT
33103: PUSH
33104: LD_VAR 0 2
33108: PPUSH
33109: LD_VAR 0 3
33113: PPUSH
33114: CALL_OW 488
33118: NOT
33119: OR
33120: PUSH
33121: LD_VAR 0 1
33125: PPUSH
33126: CALL_OW 266
33130: PUSH
33131: LD_INT 3
33133: NONEQUAL
33134: PUSH
33135: LD_VAR 0 1
33139: PPUSH
33140: CALL_OW 247
33144: PUSH
33145: LD_INT 1
33147: EQUAL
33148: NOT
33149: AND
33150: OR
33151: IFFALSE 33155
// exit ;
33153: GO 33304
// if GetType ( factory ) = unit_human then
33155: LD_VAR 0 1
33159: PPUSH
33160: CALL_OW 247
33164: PUSH
33165: LD_INT 1
33167: EQUAL
33168: IFFALSE 33185
// factory := IsInUnit ( factory ) ;
33170: LD_ADDR_VAR 0 1
33174: PUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: CALL_OW 310
33184: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33185: LD_VAR 0 1
33189: PPUSH
33190: CALL_OW 266
33194: PUSH
33195: LD_INT 3
33197: NONEQUAL
33198: IFFALSE 33202
// exit ;
33200: GO 33304
// if HexInfo ( x , y ) = factory then
33202: LD_VAR 0 2
33206: PPUSH
33207: LD_VAR 0 3
33211: PPUSH
33212: CALL_OW 428
33216: PUSH
33217: LD_VAR 0 1
33221: EQUAL
33222: IFFALSE 33249
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33224: LD_ADDR_EXP 125
33228: PUSH
33229: LD_EXP 125
33233: PPUSH
33234: LD_VAR 0 1
33238: PPUSH
33239: LD_INT 0
33241: PPUSH
33242: CALL_OW 1
33246: ST_TO_ADDR
33247: GO 33300
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33249: LD_ADDR_EXP 125
33253: PUSH
33254: LD_EXP 125
33258: PPUSH
33259: LD_VAR 0 1
33263: PPUSH
33264: LD_VAR 0 1
33268: PPUSH
33269: CALL_OW 255
33273: PUSH
33274: LD_VAR 0 1
33278: PUSH
33279: LD_VAR 0 2
33283: PUSH
33284: LD_VAR 0 3
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: PPUSH
33295: CALL_OW 1
33299: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33300: CALL 33309 0 0
// end ;
33304: LD_VAR 0 4
33308: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33309: LD_INT 0
33311: PPUSH
33312: PPUSH
33313: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33314: LD_STRING resetFactoryWaypoint();
33316: PPUSH
33317: CALL_OW 559
// if factoryWaypoints then
33321: LD_EXP 125
33325: IFFALSE 33451
// begin list := PrepareArray ( factoryWaypoints ) ;
33327: LD_ADDR_VAR 0 3
33331: PUSH
33332: LD_EXP 125
33336: PPUSH
33337: CALL 80083 0 1
33341: ST_TO_ADDR
// for i := 1 to list do
33342: LD_ADDR_VAR 0 2
33346: PUSH
33347: DOUBLE
33348: LD_INT 1
33350: DEC
33351: ST_TO_ADDR
33352: LD_VAR 0 3
33356: PUSH
33357: FOR_TO
33358: IFFALSE 33449
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33360: LD_STRING setFactoryWaypointXY(
33362: PUSH
33363: LD_VAR 0 3
33367: PUSH
33368: LD_VAR 0 2
33372: ARRAY
33373: PUSH
33374: LD_INT 1
33376: ARRAY
33377: STR
33378: PUSH
33379: LD_STRING ,
33381: STR
33382: PUSH
33383: LD_VAR 0 3
33387: PUSH
33388: LD_VAR 0 2
33392: ARRAY
33393: PUSH
33394: LD_INT 2
33396: ARRAY
33397: STR
33398: PUSH
33399: LD_STRING ,
33401: STR
33402: PUSH
33403: LD_VAR 0 3
33407: PUSH
33408: LD_VAR 0 2
33412: ARRAY
33413: PUSH
33414: LD_INT 3
33416: ARRAY
33417: STR
33418: PUSH
33419: LD_STRING ,
33421: STR
33422: PUSH
33423: LD_VAR 0 3
33427: PUSH
33428: LD_VAR 0 2
33432: ARRAY
33433: PUSH
33434: LD_INT 4
33436: ARRAY
33437: STR
33438: PUSH
33439: LD_STRING )
33441: STR
33442: PPUSH
33443: CALL_OW 559
33447: GO 33357
33449: POP
33450: POP
// end ; end ;
33451: LD_VAR 0 1
33455: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33456: LD_INT 0
33458: PPUSH
// if HexInfo ( x , y ) = warehouse then
33459: LD_VAR 0 2
33463: PPUSH
33464: LD_VAR 0 3
33468: PPUSH
33469: CALL_OW 428
33473: PUSH
33474: LD_VAR 0 1
33478: EQUAL
33479: IFFALSE 33506
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33481: LD_ADDR_EXP 126
33485: PUSH
33486: LD_EXP 126
33490: PPUSH
33491: LD_VAR 0 1
33495: PPUSH
33496: LD_INT 0
33498: PPUSH
33499: CALL_OW 1
33503: ST_TO_ADDR
33504: GO 33557
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33506: LD_ADDR_EXP 126
33510: PUSH
33511: LD_EXP 126
33515: PPUSH
33516: LD_VAR 0 1
33520: PPUSH
33521: LD_VAR 0 1
33525: PPUSH
33526: CALL_OW 255
33530: PUSH
33531: LD_VAR 0 1
33535: PUSH
33536: LD_VAR 0 2
33540: PUSH
33541: LD_VAR 0 3
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: PPUSH
33552: CALL_OW 1
33556: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33557: CALL 33566 0 0
// end ;
33561: LD_VAR 0 4
33565: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33566: LD_INT 0
33568: PPUSH
33569: PPUSH
33570: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33571: LD_STRING resetWarehouseGatheringPoints();
33573: PPUSH
33574: CALL_OW 559
// if warehouseGatheringPoints then
33578: LD_EXP 126
33582: IFFALSE 33708
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_EXP 126
33593: PPUSH
33594: CALL 80083 0 1
33598: ST_TO_ADDR
// for i := 1 to list do
33599: LD_ADDR_VAR 0 2
33603: PUSH
33604: DOUBLE
33605: LD_INT 1
33607: DEC
33608: ST_TO_ADDR
33609: LD_VAR 0 3
33613: PUSH
33614: FOR_TO
33615: IFFALSE 33706
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33617: LD_STRING setWarehouseGatheringPointXY(
33619: PUSH
33620: LD_VAR 0 3
33624: PUSH
33625: LD_VAR 0 2
33629: ARRAY
33630: PUSH
33631: LD_INT 1
33633: ARRAY
33634: STR
33635: PUSH
33636: LD_STRING ,
33638: STR
33639: PUSH
33640: LD_VAR 0 3
33644: PUSH
33645: LD_VAR 0 2
33649: ARRAY
33650: PUSH
33651: LD_INT 2
33653: ARRAY
33654: STR
33655: PUSH
33656: LD_STRING ,
33658: STR
33659: PUSH
33660: LD_VAR 0 3
33664: PUSH
33665: LD_VAR 0 2
33669: ARRAY
33670: PUSH
33671: LD_INT 3
33673: ARRAY
33674: STR
33675: PUSH
33676: LD_STRING ,
33678: STR
33679: PUSH
33680: LD_VAR 0 3
33684: PUSH
33685: LD_VAR 0 2
33689: ARRAY
33690: PUSH
33691: LD_INT 4
33693: ARRAY
33694: STR
33695: PUSH
33696: LD_STRING )
33698: STR
33699: PPUSH
33700: CALL_OW 559
33704: GO 33614
33706: POP
33707: POP
// end ; end ;
33708: LD_VAR 0 1
33712: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33713: LD_EXP 126
33717: IFFALSE 34402
33719: GO 33721
33721: DISABLE
33722: LD_INT 0
33724: PPUSH
33725: PPUSH
33726: PPUSH
33727: PPUSH
33728: PPUSH
33729: PPUSH
33730: PPUSH
33731: PPUSH
33732: PPUSH
// begin enable ;
33733: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33734: LD_ADDR_VAR 0 3
33738: PUSH
33739: LD_EXP 126
33743: PPUSH
33744: CALL 80083 0 1
33748: ST_TO_ADDR
// if not list then
33749: LD_VAR 0 3
33753: NOT
33754: IFFALSE 33758
// exit ;
33756: GO 34402
// for i := 1 to list do
33758: LD_ADDR_VAR 0 1
33762: PUSH
33763: DOUBLE
33764: LD_INT 1
33766: DEC
33767: ST_TO_ADDR
33768: LD_VAR 0 3
33772: PUSH
33773: FOR_TO
33774: IFFALSE 34400
// begin depot := list [ i ] [ 2 ] ;
33776: LD_ADDR_VAR 0 8
33780: PUSH
33781: LD_VAR 0 3
33785: PUSH
33786: LD_VAR 0 1
33790: ARRAY
33791: PUSH
33792: LD_INT 2
33794: ARRAY
33795: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33796: LD_ADDR_VAR 0 5
33800: PUSH
33801: LD_VAR 0 3
33805: PUSH
33806: LD_VAR 0 1
33810: ARRAY
33811: PUSH
33812: LD_INT 1
33814: ARRAY
33815: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33816: LD_VAR 0 8
33820: PPUSH
33821: CALL_OW 301
33825: PUSH
33826: LD_VAR 0 5
33830: PUSH
33831: LD_VAR 0 8
33835: PPUSH
33836: CALL_OW 255
33840: NONEQUAL
33841: OR
33842: IFFALSE 33871
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33844: LD_ADDR_EXP 126
33848: PUSH
33849: LD_EXP 126
33853: PPUSH
33854: LD_VAR 0 8
33858: PPUSH
33859: LD_INT 0
33861: PPUSH
33862: CALL_OW 1
33866: ST_TO_ADDR
// exit ;
33867: POP
33868: POP
33869: GO 34402
// end ; x := list [ i ] [ 3 ] ;
33871: LD_ADDR_VAR 0 6
33875: PUSH
33876: LD_VAR 0 3
33880: PUSH
33881: LD_VAR 0 1
33885: ARRAY
33886: PUSH
33887: LD_INT 3
33889: ARRAY
33890: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33891: LD_ADDR_VAR 0 7
33895: PUSH
33896: LD_VAR 0 3
33900: PUSH
33901: LD_VAR 0 1
33905: ARRAY
33906: PUSH
33907: LD_INT 4
33909: ARRAY
33910: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33911: LD_ADDR_VAR 0 9
33915: PUSH
33916: LD_VAR 0 6
33920: PPUSH
33921: LD_VAR 0 7
33925: PPUSH
33926: LD_INT 16
33928: PPUSH
33929: CALL 78671 0 3
33933: ST_TO_ADDR
// if not cratesNearbyPoint then
33934: LD_VAR 0 9
33938: NOT
33939: IFFALSE 33945
// exit ;
33941: POP
33942: POP
33943: GO 34402
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33945: LD_ADDR_VAR 0 4
33949: PUSH
33950: LD_INT 22
33952: PUSH
33953: LD_VAR 0 5
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 3
33964: PUSH
33965: LD_INT 60
33967: PUSH
33968: EMPTY
33969: LIST
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 91
33977: PUSH
33978: LD_VAR 0 8
33982: PUSH
33983: LD_INT 6
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 2
33993: PUSH
33994: LD_INT 25
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 25
34006: PUSH
34007: LD_INT 16
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: LIST
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: PPUSH
34025: CALL_OW 69
34029: PUSH
34030: LD_VAR 0 8
34034: PPUSH
34035: CALL_OW 313
34039: PPUSH
34040: LD_INT 3
34042: PUSH
34043: LD_INT 60
34045: PUSH
34046: EMPTY
34047: LIST
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: LD_INT 25
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 25
34068: PUSH
34069: LD_INT 16
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PPUSH
34085: CALL_OW 72
34089: UNION
34090: ST_TO_ADDR
// if tmp then
34091: LD_VAR 0 4
34095: IFFALSE 34175
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34097: LD_ADDR_VAR 0 4
34101: PUSH
34102: LD_VAR 0 4
34106: PPUSH
34107: LD_INT 3
34109: PPUSH
34110: CALL 76640 0 2
34114: ST_TO_ADDR
// for j in tmp do
34115: LD_ADDR_VAR 0 2
34119: PUSH
34120: LD_VAR 0 4
34124: PUSH
34125: FOR_IN
34126: IFFALSE 34169
// begin if IsInUnit ( j ) then
34128: LD_VAR 0 2
34132: PPUSH
34133: CALL_OW 310
34137: IFFALSE 34148
// ComExit ( j ) ;
34139: LD_VAR 0 2
34143: PPUSH
34144: CALL 76723 0 1
// AddComCollect ( j , x , y ) ;
34148: LD_VAR 0 2
34152: PPUSH
34153: LD_VAR 0 6
34157: PPUSH
34158: LD_VAR 0 7
34162: PPUSH
34163: CALL_OW 177
// end ;
34167: GO 34125
34169: POP
34170: POP
// exit ;
34171: POP
34172: POP
34173: GO 34402
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34175: LD_ADDR_VAR 0 4
34179: PUSH
34180: LD_INT 22
34182: PUSH
34183: LD_VAR 0 5
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 91
34194: PUSH
34195: LD_VAR 0 8
34199: PUSH
34200: LD_INT 8
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 2
34210: PUSH
34211: LD_INT 34
34213: PUSH
34214: LD_INT 12
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 34
34223: PUSH
34224: LD_INT 51
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 34
34233: PUSH
34234: LD_INT 32
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 34
34243: PUSH
34244: LD_INT 89
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: PPUSH
34263: CALL_OW 69
34267: ST_TO_ADDR
// if tmp then
34268: LD_VAR 0 4
34272: IFFALSE 34398
// begin for j in tmp do
34274: LD_ADDR_VAR 0 2
34278: PUSH
34279: LD_VAR 0 4
34283: PUSH
34284: FOR_IN
34285: IFFALSE 34396
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34287: LD_VAR 0 2
34291: PPUSH
34292: CALL_OW 262
34296: PUSH
34297: LD_INT 3
34299: EQUAL
34300: PUSH
34301: LD_VAR 0 2
34305: PPUSH
34306: CALL_OW 261
34310: PUSH
34311: LD_INT 20
34313: GREATER
34314: OR
34315: PUSH
34316: LD_VAR 0 2
34320: PPUSH
34321: CALL_OW 314
34325: NOT
34326: AND
34327: PUSH
34328: LD_VAR 0 2
34332: PPUSH
34333: CALL_OW 263
34337: PUSH
34338: LD_INT 1
34340: NONEQUAL
34341: PUSH
34342: LD_VAR 0 2
34346: PPUSH
34347: CALL_OW 311
34351: OR
34352: AND
34353: IFFALSE 34394
// begin ComCollect ( j , x , y ) ;
34355: LD_VAR 0 2
34359: PPUSH
34360: LD_VAR 0 6
34364: PPUSH
34365: LD_VAR 0 7
34369: PPUSH
34370: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34374: LD_VAR 0 2
34378: PPUSH
34379: LD_VAR 0 8
34383: PPUSH
34384: CALL_OW 172
// exit ;
34388: POP
34389: POP
34390: POP
34391: POP
34392: GO 34402
// end ;
34394: GO 34284
34396: POP
34397: POP
// end ; end ;
34398: GO 33773
34400: POP
34401: POP
// end ; end_of_file
34402: PPOPN 9
34404: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34405: LD_VAR 0 1
34409: PUSH
34410: LD_INT 200
34412: DOUBLE
34413: GREATEREQUAL
34414: IFFALSE 34422
34416: LD_INT 299
34418: DOUBLE
34419: LESSEQUAL
34420: IFTRUE 34424
34422: GO 34456
34424: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34425: LD_VAR 0 1
34429: PPUSH
34430: LD_VAR 0 2
34434: PPUSH
34435: LD_VAR 0 3
34439: PPUSH
34440: LD_VAR 0 4
34444: PPUSH
34445: LD_VAR 0 5
34449: PPUSH
34450: CALL 34944 0 5
34454: GO 34533
34456: LD_INT 300
34458: DOUBLE
34459: GREATEREQUAL
34460: IFFALSE 34468
34462: LD_INT 399
34464: DOUBLE
34465: LESSEQUAL
34466: IFTRUE 34470
34468: GO 34532
34470: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
34471: LD_VAR 0 1
34475: PPUSH
34476: LD_VAR 0 2
34480: PPUSH
34481: LD_VAR 0 3
34485: PPUSH
34486: LD_VAR 0 4
34490: PPUSH
34491: LD_VAR 0 5
34495: PPUSH
34496: LD_VAR 0 6
34500: PPUSH
34501: LD_VAR 0 7
34505: PPUSH
34506: LD_VAR 0 8
34510: PPUSH
34511: LD_VAR 0 9
34515: PPUSH
34516: LD_VAR 0 10
34520: PPUSH
34521: LD_VAR 0 11
34525: PPUSH
34526: CALL 31114 0 11
34530: GO 34533
34532: POP
// end ;
34533: PPOPN 11
34535: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
34536: LD_VAR 0 1
34540: PPUSH
34541: LD_VAR 0 2
34545: PPUSH
34546: LD_VAR 0 3
34550: PPUSH
34551: LD_VAR 0 4
34555: PPUSH
34556: LD_VAR 0 5
34560: PPUSH
34561: CALL 34680 0 5
// end ; end_of_file end_of_file
34565: PPOPN 5
34567: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34568: LD_INT 0
34570: PPUSH
34571: PPUSH
34572: PPUSH
34573: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34574: LD_VAR 0 1
34578: PPUSH
34579: CALL_OW 264
34583: PUSH
34584: LD_INT 91
34586: EQUAL
34587: IFFALSE 34659
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34589: LD_INT 68
34591: PPUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: CALL_OW 255
34601: PPUSH
34602: CALL_OW 321
34606: PUSH
34607: LD_INT 2
34609: EQUAL
34610: IFFALSE 34622
// eff := 70 else
34612: LD_ADDR_VAR 0 4
34616: PUSH
34617: LD_INT 70
34619: ST_TO_ADDR
34620: GO 34630
// eff := 30 ;
34622: LD_ADDR_VAR 0 4
34626: PUSH
34627: LD_INT 30
34629: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34630: LD_VAR 0 1
34634: PPUSH
34635: CALL_OW 250
34639: PPUSH
34640: LD_VAR 0 1
34644: PPUSH
34645: CALL_OW 251
34649: PPUSH
34650: LD_VAR 0 4
34654: PPUSH
34655: CALL_OW 495
// end ; end ;
34659: LD_VAR 0 2
34663: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34664: LD_INT 0
34666: PPUSH
// end ;
34667: LD_VAR 0 4
34671: RET
// export function SOS_Command ( cmd ) ; begin
34672: LD_INT 0
34674: PPUSH
// end ;
34675: LD_VAR 0 2
34679: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34680: LD_INT 0
34682: PPUSH
// end ;
34683: LD_VAR 0 6
34687: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34688: LD_INT 0
34690: PPUSH
34691: PPUSH
// if not vehicle or not factory then
34692: LD_VAR 0 1
34696: NOT
34697: PUSH
34698: LD_VAR 0 2
34702: NOT
34703: OR
34704: IFFALSE 34708
// exit ;
34706: GO 34939
// if factoryWaypoints >= factory then
34708: LD_EXP 125
34712: PUSH
34713: LD_VAR 0 2
34717: GREATEREQUAL
34718: IFFALSE 34939
// if factoryWaypoints [ factory ] then
34720: LD_EXP 125
34724: PUSH
34725: LD_VAR 0 2
34729: ARRAY
34730: IFFALSE 34939
// begin if GetControl ( vehicle ) = control_manual then
34732: LD_VAR 0 1
34736: PPUSH
34737: CALL_OW 263
34741: PUSH
34742: LD_INT 1
34744: EQUAL
34745: IFFALSE 34826
// begin driver := IsDrivenBy ( vehicle ) ;
34747: LD_ADDR_VAR 0 4
34751: PUSH
34752: LD_VAR 0 1
34756: PPUSH
34757: CALL_OW 311
34761: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34762: LD_VAR 0 4
34766: PPUSH
34767: LD_EXP 125
34771: PUSH
34772: LD_VAR 0 2
34776: ARRAY
34777: PUSH
34778: LD_INT 3
34780: ARRAY
34781: PPUSH
34782: LD_EXP 125
34786: PUSH
34787: LD_VAR 0 2
34791: ARRAY
34792: PUSH
34793: LD_INT 4
34795: ARRAY
34796: PPUSH
34797: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34801: LD_VAR 0 4
34805: PPUSH
34806: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34810: LD_VAR 0 4
34814: PPUSH
34815: LD_VAR 0 2
34819: PPUSH
34820: CALL_OW 180
// end else
34824: GO 34939
// if GetControl ( vehicle ) = control_remote then
34826: LD_VAR 0 1
34830: PPUSH
34831: CALL_OW 263
34835: PUSH
34836: LD_INT 2
34838: EQUAL
34839: IFFALSE 34900
// begin wait ( 0 0$2 ) ;
34841: LD_INT 70
34843: PPUSH
34844: CALL_OW 67
// if Connect ( vehicle ) then
34848: LD_VAR 0 1
34852: PPUSH
34853: CALL 46963 0 1
34857: IFFALSE 34898
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34859: LD_VAR 0 1
34863: PPUSH
34864: LD_EXP 125
34868: PUSH
34869: LD_VAR 0 2
34873: ARRAY
34874: PUSH
34875: LD_INT 3
34877: ARRAY
34878: PPUSH
34879: LD_EXP 125
34883: PUSH
34884: LD_VAR 0 2
34888: ARRAY
34889: PUSH
34890: LD_INT 4
34892: ARRAY
34893: PPUSH
34894: CALL_OW 171
// end else
34898: GO 34939
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34900: LD_VAR 0 1
34904: PPUSH
34905: LD_EXP 125
34909: PUSH
34910: LD_VAR 0 2
34914: ARRAY
34915: PUSH
34916: LD_INT 3
34918: ARRAY
34919: PPUSH
34920: LD_EXP 125
34924: PUSH
34925: LD_VAR 0 2
34929: ARRAY
34930: PUSH
34931: LD_INT 4
34933: ARRAY
34934: PPUSH
34935: CALL_OW 171
// end ; end ;
34939: LD_VAR 0 3
34943: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34944: LD_INT 0
34946: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34947: LD_VAR 0 1
34951: PUSH
34952: LD_INT 250
34954: EQUAL
34955: PUSH
34956: LD_VAR 0 2
34960: PPUSH
34961: CALL_OW 264
34965: PUSH
34966: LD_INT 81
34968: EQUAL
34969: AND
34970: IFFALSE 34991
// MinerPlaceMine ( unit , x , y ) ;
34972: LD_VAR 0 2
34976: PPUSH
34977: LD_VAR 0 4
34981: PPUSH
34982: LD_VAR 0 5
34986: PPUSH
34987: CALL 37376 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34991: LD_VAR 0 1
34995: PUSH
34996: LD_INT 251
34998: EQUAL
34999: PUSH
35000: LD_VAR 0 2
35004: PPUSH
35005: CALL_OW 264
35009: PUSH
35010: LD_INT 81
35012: EQUAL
35013: AND
35014: IFFALSE 35035
// MinerDetonateMine ( unit , x , y ) ;
35016: LD_VAR 0 2
35020: PPUSH
35021: LD_VAR 0 4
35025: PPUSH
35026: LD_VAR 0 5
35030: PPUSH
35031: CALL 37651 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35035: LD_VAR 0 1
35039: PUSH
35040: LD_INT 252
35042: EQUAL
35043: PUSH
35044: LD_VAR 0 2
35048: PPUSH
35049: CALL_OW 264
35053: PUSH
35054: LD_INT 81
35056: EQUAL
35057: AND
35058: IFFALSE 35079
// MinerCreateMinefield ( unit , x , y ) ;
35060: LD_VAR 0 2
35064: PPUSH
35065: LD_VAR 0 4
35069: PPUSH
35070: LD_VAR 0 5
35074: PPUSH
35075: CALL 38068 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35079: LD_VAR 0 1
35083: PUSH
35084: LD_INT 253
35086: EQUAL
35087: PUSH
35088: LD_VAR 0 2
35092: PPUSH
35093: CALL_OW 257
35097: PUSH
35098: LD_INT 5
35100: EQUAL
35101: AND
35102: IFFALSE 35123
// ComBinocular ( unit , x , y ) ;
35104: LD_VAR 0 2
35108: PPUSH
35109: LD_VAR 0 4
35113: PPUSH
35114: LD_VAR 0 5
35118: PPUSH
35119: CALL 38437 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35123: LD_VAR 0 1
35127: PUSH
35128: LD_INT 254
35130: EQUAL
35131: PUSH
35132: LD_VAR 0 2
35136: PPUSH
35137: CALL_OW 264
35141: PUSH
35142: LD_INT 99
35144: EQUAL
35145: AND
35146: PUSH
35147: LD_VAR 0 3
35151: PPUSH
35152: CALL_OW 263
35156: PUSH
35157: LD_INT 3
35159: EQUAL
35160: AND
35161: IFFALSE 35177
// HackDestroyVehicle ( unit , selectedUnit ) ;
35163: LD_VAR 0 2
35167: PPUSH
35168: LD_VAR 0 3
35172: PPUSH
35173: CALL 36740 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35177: LD_VAR 0 1
35181: PUSH
35182: LD_INT 255
35184: EQUAL
35185: PUSH
35186: LD_VAR 0 2
35190: PPUSH
35191: CALL_OW 264
35195: PUSH
35196: LD_INT 14
35198: PUSH
35199: LD_INT 53
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: IN
35206: AND
35207: PUSH
35208: LD_VAR 0 4
35212: PPUSH
35213: LD_VAR 0 5
35217: PPUSH
35218: CALL_OW 488
35222: AND
35223: IFFALSE 35247
// CutTreeXYR ( unit , x , y , 12 ) ;
35225: LD_VAR 0 2
35229: PPUSH
35230: LD_VAR 0 4
35234: PPUSH
35235: LD_VAR 0 5
35239: PPUSH
35240: LD_INT 12
35242: PPUSH
35243: CALL 35310 0 4
// if cmd = 256 then
35247: LD_VAR 0 1
35251: PUSH
35252: LD_INT 256
35254: EQUAL
35255: IFFALSE 35276
// SetFactoryWaypoint ( unit , x , y ) ;
35257: LD_VAR 0 2
35261: PPUSH
35262: LD_VAR 0 4
35266: PPUSH
35267: LD_VAR 0 5
35271: PPUSH
35272: CALL 33094 0 3
// if cmd = 257 then
35276: LD_VAR 0 1
35280: PUSH
35281: LD_INT 257
35283: EQUAL
35284: IFFALSE 35305
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35286: LD_VAR 0 2
35290: PPUSH
35291: LD_VAR 0 4
35295: PPUSH
35296: LD_VAR 0 5
35300: PPUSH
35301: CALL 33456 0 3
// end ;
35305: LD_VAR 0 6
35309: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35310: LD_INT 0
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
35316: PPUSH
35317: PPUSH
35318: PPUSH
35319: PPUSH
35320: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35321: LD_VAR 0 1
35325: NOT
35326: PUSH
35327: LD_VAR 0 2
35331: PPUSH
35332: LD_VAR 0 3
35336: PPUSH
35337: CALL_OW 488
35341: NOT
35342: OR
35343: PUSH
35344: LD_VAR 0 4
35348: NOT
35349: OR
35350: IFFALSE 35354
// exit ;
35352: GO 35694
// list := [ ] ;
35354: LD_ADDR_VAR 0 13
35358: PUSH
35359: EMPTY
35360: ST_TO_ADDR
// if x - r < 0 then
35361: LD_VAR 0 2
35365: PUSH
35366: LD_VAR 0 4
35370: MINUS
35371: PUSH
35372: LD_INT 0
35374: LESS
35375: IFFALSE 35387
// min_x := 0 else
35377: LD_ADDR_VAR 0 7
35381: PUSH
35382: LD_INT 0
35384: ST_TO_ADDR
35385: GO 35403
// min_x := x - r ;
35387: LD_ADDR_VAR 0 7
35391: PUSH
35392: LD_VAR 0 2
35396: PUSH
35397: LD_VAR 0 4
35401: MINUS
35402: ST_TO_ADDR
// if y - r < 0 then
35403: LD_VAR 0 3
35407: PUSH
35408: LD_VAR 0 4
35412: MINUS
35413: PUSH
35414: LD_INT 0
35416: LESS
35417: IFFALSE 35429
// min_y := 0 else
35419: LD_ADDR_VAR 0 8
35423: PUSH
35424: LD_INT 0
35426: ST_TO_ADDR
35427: GO 35445
// min_y := y - r ;
35429: LD_ADDR_VAR 0 8
35433: PUSH
35434: LD_VAR 0 3
35438: PUSH
35439: LD_VAR 0 4
35443: MINUS
35444: ST_TO_ADDR
// max_x := x + r ;
35445: LD_ADDR_VAR 0 9
35449: PUSH
35450: LD_VAR 0 2
35454: PUSH
35455: LD_VAR 0 4
35459: PLUS
35460: ST_TO_ADDR
// max_y := y + r ;
35461: LD_ADDR_VAR 0 10
35465: PUSH
35466: LD_VAR 0 3
35470: PUSH
35471: LD_VAR 0 4
35475: PLUS
35476: ST_TO_ADDR
// for _x = min_x to max_x do
35477: LD_ADDR_VAR 0 11
35481: PUSH
35482: DOUBLE
35483: LD_VAR 0 7
35487: DEC
35488: ST_TO_ADDR
35489: LD_VAR 0 9
35493: PUSH
35494: FOR_TO
35495: IFFALSE 35612
// for _y = min_y to max_y do
35497: LD_ADDR_VAR 0 12
35501: PUSH
35502: DOUBLE
35503: LD_VAR 0 8
35507: DEC
35508: ST_TO_ADDR
35509: LD_VAR 0 10
35513: PUSH
35514: FOR_TO
35515: IFFALSE 35608
// begin if not ValidHex ( _x , _y ) then
35517: LD_VAR 0 11
35521: PPUSH
35522: LD_VAR 0 12
35526: PPUSH
35527: CALL_OW 488
35531: NOT
35532: IFFALSE 35536
// continue ;
35534: GO 35514
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35536: LD_VAR 0 11
35540: PPUSH
35541: LD_VAR 0 12
35545: PPUSH
35546: CALL_OW 351
35550: PUSH
35551: LD_VAR 0 11
35555: PPUSH
35556: LD_VAR 0 12
35560: PPUSH
35561: CALL_OW 554
35565: AND
35566: IFFALSE 35606
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35568: LD_ADDR_VAR 0 13
35572: PUSH
35573: LD_VAR 0 13
35577: PPUSH
35578: LD_VAR 0 13
35582: PUSH
35583: LD_INT 1
35585: PLUS
35586: PPUSH
35587: LD_VAR 0 11
35591: PUSH
35592: LD_VAR 0 12
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PPUSH
35601: CALL_OW 2
35605: ST_TO_ADDR
// end ;
35606: GO 35514
35608: POP
35609: POP
35610: GO 35494
35612: POP
35613: POP
// if not list then
35614: LD_VAR 0 13
35618: NOT
35619: IFFALSE 35623
// exit ;
35621: GO 35694
// for i in list do
35623: LD_ADDR_VAR 0 6
35627: PUSH
35628: LD_VAR 0 13
35632: PUSH
35633: FOR_IN
35634: IFFALSE 35692
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35636: LD_VAR 0 1
35640: PPUSH
35641: LD_STRING M
35643: PUSH
35644: LD_VAR 0 6
35648: PUSH
35649: LD_INT 1
35651: ARRAY
35652: PUSH
35653: LD_VAR 0 6
35657: PUSH
35658: LD_INT 2
35660: ARRAY
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: PUSH
35683: EMPTY
35684: LIST
35685: PPUSH
35686: CALL_OW 447
35690: GO 35633
35692: POP
35693: POP
// end ;
35694: LD_VAR 0 5
35698: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35699: LD_EXP 128
35703: NOT
35704: IFFALSE 35754
35706: GO 35708
35708: DISABLE
// begin initHack := true ;
35709: LD_ADDR_EXP 128
35713: PUSH
35714: LD_INT 1
35716: ST_TO_ADDR
// hackTanks := [ ] ;
35717: LD_ADDR_EXP 129
35721: PUSH
35722: EMPTY
35723: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35724: LD_ADDR_EXP 130
35728: PUSH
35729: EMPTY
35730: ST_TO_ADDR
// hackLimit := 3 ;
35731: LD_ADDR_EXP 131
35735: PUSH
35736: LD_INT 3
35738: ST_TO_ADDR
// hackDist := 12 ;
35739: LD_ADDR_EXP 132
35743: PUSH
35744: LD_INT 12
35746: ST_TO_ADDR
// hackCounter := [ ] ;
35747: LD_ADDR_EXP 133
35751: PUSH
35752: EMPTY
35753: ST_TO_ADDR
// end ;
35754: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35755: LD_EXP 128
35759: PUSH
35760: LD_INT 34
35762: PUSH
35763: LD_INT 99
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PPUSH
35770: CALL_OW 69
35774: AND
35775: IFFALSE 36028
35777: GO 35779
35779: DISABLE
35780: LD_INT 0
35782: PPUSH
35783: PPUSH
// begin enable ;
35784: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35785: LD_ADDR_VAR 0 1
35789: PUSH
35790: LD_INT 34
35792: PUSH
35793: LD_INT 99
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PPUSH
35800: CALL_OW 69
35804: PUSH
35805: FOR_IN
35806: IFFALSE 36026
// begin if not i in hackTanks then
35808: LD_VAR 0 1
35812: PUSH
35813: LD_EXP 129
35817: IN
35818: NOT
35819: IFFALSE 35902
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35821: LD_ADDR_EXP 129
35825: PUSH
35826: LD_EXP 129
35830: PPUSH
35831: LD_EXP 129
35835: PUSH
35836: LD_INT 1
35838: PLUS
35839: PPUSH
35840: LD_VAR 0 1
35844: PPUSH
35845: CALL_OW 1
35849: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35850: LD_ADDR_EXP 130
35854: PUSH
35855: LD_EXP 130
35859: PPUSH
35860: LD_EXP 130
35864: PUSH
35865: LD_INT 1
35867: PLUS
35868: PPUSH
35869: EMPTY
35870: PPUSH
35871: CALL_OW 1
35875: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35876: LD_ADDR_EXP 133
35880: PUSH
35881: LD_EXP 133
35885: PPUSH
35886: LD_EXP 133
35890: PUSH
35891: LD_INT 1
35893: PLUS
35894: PPUSH
35895: EMPTY
35896: PPUSH
35897: CALL_OW 1
35901: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL_OW 302
35911: NOT
35912: IFFALSE 35925
// begin HackUnlinkAll ( i ) ;
35914: LD_VAR 0 1
35918: PPUSH
35919: CALL 36031 0 1
// continue ;
35923: GO 35805
// end ; HackCheckCapturedStatus ( i ) ;
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL 36474 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35934: LD_ADDR_VAR 0 2
35938: PUSH
35939: LD_INT 81
35941: PUSH
35942: LD_VAR 0 1
35946: PPUSH
35947: CALL_OW 255
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 33
35958: PUSH
35959: LD_INT 3
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 91
35968: PUSH
35969: LD_VAR 0 1
35973: PUSH
35974: LD_EXP 132
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 50
35986: PUSH
35987: EMPTY
35988: LIST
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: PPUSH
35996: CALL_OW 69
36000: ST_TO_ADDR
// if not tmp then
36001: LD_VAR 0 2
36005: NOT
36006: IFFALSE 36010
// continue ;
36008: GO 35805
// HackLink ( i , tmp ) ;
36010: LD_VAR 0 1
36014: PPUSH
36015: LD_VAR 0 2
36019: PPUSH
36020: CALL 36167 0 2
// end ;
36024: GO 35805
36026: POP
36027: POP
// end ;
36028: PPOPN 2
36030: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36031: LD_INT 0
36033: PPUSH
36034: PPUSH
36035: PPUSH
// if not hack in hackTanks then
36036: LD_VAR 0 1
36040: PUSH
36041: LD_EXP 129
36045: IN
36046: NOT
36047: IFFALSE 36051
// exit ;
36049: GO 36162
// index := GetElementIndex ( hackTanks , hack ) ;
36051: LD_ADDR_VAR 0 4
36055: PUSH
36056: LD_EXP 129
36060: PPUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL 43779 0 2
36070: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36071: LD_EXP 130
36075: PUSH
36076: LD_VAR 0 4
36080: ARRAY
36081: IFFALSE 36162
// begin for i in hackTanksCaptured [ index ] do
36083: LD_ADDR_VAR 0 3
36087: PUSH
36088: LD_EXP 130
36092: PUSH
36093: LD_VAR 0 4
36097: ARRAY
36098: PUSH
36099: FOR_IN
36100: IFFALSE 36126
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36102: LD_VAR 0 3
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: PPUSH
36111: LD_VAR 0 3
36115: PUSH
36116: LD_INT 2
36118: ARRAY
36119: PPUSH
36120: CALL_OW 235
36124: GO 36099
36126: POP
36127: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36128: LD_ADDR_EXP 130
36132: PUSH
36133: LD_EXP 130
36137: PPUSH
36138: LD_VAR 0 4
36142: PPUSH
36143: EMPTY
36144: PPUSH
36145: CALL_OW 1
36149: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36150: LD_VAR 0 1
36154: PPUSH
36155: LD_INT 0
36157: PPUSH
36158: CALL_OW 505
// end ; end ;
36162: LD_VAR 0 2
36166: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36167: LD_INT 0
36169: PPUSH
36170: PPUSH
36171: PPUSH
// if not hack in hackTanks or not vehicles then
36172: LD_VAR 0 1
36176: PUSH
36177: LD_EXP 129
36181: IN
36182: NOT
36183: PUSH
36184: LD_VAR 0 2
36188: NOT
36189: OR
36190: IFFALSE 36194
// exit ;
36192: GO 36469
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36194: LD_ADDR_VAR 0 2
36198: PUSH
36199: LD_VAR 0 1
36203: PPUSH
36204: LD_VAR 0 2
36208: PPUSH
36209: LD_INT 1
36211: PPUSH
36212: LD_INT 1
36214: PPUSH
36215: CALL 44429 0 4
36219: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36220: LD_ADDR_VAR 0 5
36224: PUSH
36225: LD_EXP 129
36229: PPUSH
36230: LD_VAR 0 1
36234: PPUSH
36235: CALL 43779 0 2
36239: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36240: LD_EXP 130
36244: PUSH
36245: LD_VAR 0 5
36249: ARRAY
36250: PUSH
36251: LD_EXP 131
36255: LESS
36256: IFFALSE 36445
// begin for i := 1 to vehicles do
36258: LD_ADDR_VAR 0 4
36262: PUSH
36263: DOUBLE
36264: LD_INT 1
36266: DEC
36267: ST_TO_ADDR
36268: LD_VAR 0 2
36272: PUSH
36273: FOR_TO
36274: IFFALSE 36443
// begin if hackTanksCaptured [ index ] = hackLimit then
36276: LD_EXP 130
36280: PUSH
36281: LD_VAR 0 5
36285: ARRAY
36286: PUSH
36287: LD_EXP 131
36291: EQUAL
36292: IFFALSE 36296
// break ;
36294: GO 36443
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36296: LD_ADDR_EXP 133
36300: PUSH
36301: LD_EXP 133
36305: PPUSH
36306: LD_VAR 0 5
36310: PPUSH
36311: LD_EXP 133
36315: PUSH
36316: LD_VAR 0 5
36320: ARRAY
36321: PUSH
36322: LD_INT 1
36324: PLUS
36325: PPUSH
36326: CALL_OW 1
36330: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36331: LD_ADDR_EXP 130
36335: PUSH
36336: LD_EXP 130
36340: PPUSH
36341: LD_VAR 0 5
36345: PUSH
36346: LD_EXP 130
36350: PUSH
36351: LD_VAR 0 5
36355: ARRAY
36356: PUSH
36357: LD_INT 1
36359: PLUS
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PPUSH
36365: LD_VAR 0 2
36369: PUSH
36370: LD_VAR 0 4
36374: ARRAY
36375: PUSH
36376: LD_VAR 0 2
36380: PUSH
36381: LD_VAR 0 4
36385: ARRAY
36386: PPUSH
36387: CALL_OW 255
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PPUSH
36396: CALL 43994 0 3
36400: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36401: LD_VAR 0 2
36405: PUSH
36406: LD_VAR 0 4
36410: ARRAY
36411: PPUSH
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 255
36421: PPUSH
36422: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36426: LD_VAR 0 2
36430: PUSH
36431: LD_VAR 0 4
36435: ARRAY
36436: PPUSH
36437: CALL_OW 141
// end ;
36441: GO 36273
36443: POP
36444: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36445: LD_VAR 0 1
36449: PPUSH
36450: LD_EXP 130
36454: PUSH
36455: LD_VAR 0 5
36459: ARRAY
36460: PUSH
36461: LD_INT 0
36463: PLUS
36464: PPUSH
36465: CALL_OW 505
// end ;
36469: LD_VAR 0 3
36473: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36474: LD_INT 0
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
// if not hack in hackTanks then
36480: LD_VAR 0 1
36484: PUSH
36485: LD_EXP 129
36489: IN
36490: NOT
36491: IFFALSE 36495
// exit ;
36493: GO 36735
// index := GetElementIndex ( hackTanks , hack ) ;
36495: LD_ADDR_VAR 0 4
36499: PUSH
36500: LD_EXP 129
36504: PPUSH
36505: LD_VAR 0 1
36509: PPUSH
36510: CALL 43779 0 2
36514: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36515: LD_ADDR_VAR 0 3
36519: PUSH
36520: DOUBLE
36521: LD_EXP 130
36525: PUSH
36526: LD_VAR 0 4
36530: ARRAY
36531: INC
36532: ST_TO_ADDR
36533: LD_INT 1
36535: PUSH
36536: FOR_DOWNTO
36537: IFFALSE 36709
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36539: LD_ADDR_VAR 0 5
36543: PUSH
36544: LD_EXP 130
36548: PUSH
36549: LD_VAR 0 4
36553: ARRAY
36554: PUSH
36555: LD_VAR 0 3
36559: ARRAY
36560: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36561: LD_VAR 0 5
36565: PUSH
36566: LD_INT 1
36568: ARRAY
36569: PPUSH
36570: CALL_OW 302
36574: NOT
36575: PUSH
36576: LD_VAR 0 5
36580: PUSH
36581: LD_INT 1
36583: ARRAY
36584: PPUSH
36585: CALL_OW 255
36589: PUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: CALL_OW 255
36599: NONEQUAL
36600: OR
36601: IFFALSE 36707
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36603: LD_VAR 0 5
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: PPUSH
36612: CALL_OW 305
36616: PUSH
36617: LD_VAR 0 5
36621: PUSH
36622: LD_INT 1
36624: ARRAY
36625: PPUSH
36626: CALL_OW 255
36630: PUSH
36631: LD_VAR 0 1
36635: PPUSH
36636: CALL_OW 255
36640: EQUAL
36641: AND
36642: IFFALSE 36666
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36644: LD_VAR 0 5
36648: PUSH
36649: LD_INT 1
36651: ARRAY
36652: PPUSH
36653: LD_VAR 0 5
36657: PUSH
36658: LD_INT 2
36660: ARRAY
36661: PPUSH
36662: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36666: LD_ADDR_EXP 130
36670: PUSH
36671: LD_EXP 130
36675: PPUSH
36676: LD_VAR 0 4
36680: PPUSH
36681: LD_EXP 130
36685: PUSH
36686: LD_VAR 0 4
36690: ARRAY
36691: PPUSH
36692: LD_VAR 0 3
36696: PPUSH
36697: CALL_OW 3
36701: PPUSH
36702: CALL_OW 1
36706: ST_TO_ADDR
// end ; end ;
36707: GO 36536
36709: POP
36710: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36711: LD_VAR 0 1
36715: PPUSH
36716: LD_EXP 130
36720: PUSH
36721: LD_VAR 0 4
36725: ARRAY
36726: PUSH
36727: LD_INT 0
36729: PLUS
36730: PPUSH
36731: CALL_OW 505
// end ;
36735: LD_VAR 0 2
36739: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36740: LD_INT 0
36742: PPUSH
36743: PPUSH
36744: PPUSH
36745: PPUSH
// if not hack in hackTanks then
36746: LD_VAR 0 1
36750: PUSH
36751: LD_EXP 129
36755: IN
36756: NOT
36757: IFFALSE 36761
// exit ;
36759: GO 36846
// index := GetElementIndex ( hackTanks , hack ) ;
36761: LD_ADDR_VAR 0 5
36765: PUSH
36766: LD_EXP 129
36770: PPUSH
36771: LD_VAR 0 1
36775: PPUSH
36776: CALL 43779 0 2
36780: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36781: LD_ADDR_VAR 0 4
36785: PUSH
36786: DOUBLE
36787: LD_INT 1
36789: DEC
36790: ST_TO_ADDR
36791: LD_EXP 130
36795: PUSH
36796: LD_VAR 0 5
36800: ARRAY
36801: PUSH
36802: FOR_TO
36803: IFFALSE 36844
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36805: LD_EXP 130
36809: PUSH
36810: LD_VAR 0 5
36814: ARRAY
36815: PUSH
36816: LD_VAR 0 4
36820: ARRAY
36821: PUSH
36822: LD_INT 1
36824: ARRAY
36825: PUSH
36826: LD_VAR 0 2
36830: EQUAL
36831: IFFALSE 36842
// KillUnit ( vehicle ) ;
36833: LD_VAR 0 2
36837: PPUSH
36838: CALL_OW 66
36842: GO 36802
36844: POP
36845: POP
// end ;
36846: LD_VAR 0 3
36850: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36851: LD_EXP 134
36855: NOT
36856: IFFALSE 36891
36858: GO 36860
36860: DISABLE
// begin initMiner := true ;
36861: LD_ADDR_EXP 134
36865: PUSH
36866: LD_INT 1
36868: ST_TO_ADDR
// minersList := [ ] ;
36869: LD_ADDR_EXP 135
36873: PUSH
36874: EMPTY
36875: ST_TO_ADDR
// minerMinesList := [ ] ;
36876: LD_ADDR_EXP 136
36880: PUSH
36881: EMPTY
36882: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36883: LD_ADDR_EXP 137
36887: PUSH
36888: LD_INT 5
36890: ST_TO_ADDR
// end ;
36891: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36892: LD_EXP 134
36896: PUSH
36897: LD_INT 34
36899: PUSH
36900: LD_INT 81
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PPUSH
36907: CALL_OW 69
36911: AND
36912: IFFALSE 37373
36914: GO 36916
36916: DISABLE
36917: LD_INT 0
36919: PPUSH
36920: PPUSH
36921: PPUSH
36922: PPUSH
// begin enable ;
36923: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36924: LD_ADDR_VAR 0 1
36928: PUSH
36929: LD_INT 34
36931: PUSH
36932: LD_INT 81
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PPUSH
36939: CALL_OW 69
36943: PUSH
36944: FOR_IN
36945: IFFALSE 37017
// begin if not i in minersList then
36947: LD_VAR 0 1
36951: PUSH
36952: LD_EXP 135
36956: IN
36957: NOT
36958: IFFALSE 37015
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36960: LD_ADDR_EXP 135
36964: PUSH
36965: LD_EXP 135
36969: PPUSH
36970: LD_EXP 135
36974: PUSH
36975: LD_INT 1
36977: PLUS
36978: PPUSH
36979: LD_VAR 0 1
36983: PPUSH
36984: CALL_OW 1
36988: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36989: LD_ADDR_EXP 136
36993: PUSH
36994: LD_EXP 136
36998: PPUSH
36999: LD_EXP 136
37003: PUSH
37004: LD_INT 1
37006: PLUS
37007: PPUSH
37008: EMPTY
37009: PPUSH
37010: CALL_OW 1
37014: ST_TO_ADDR
// end end ;
37015: GO 36944
37017: POP
37018: POP
// for i := minerMinesList downto 1 do
37019: LD_ADDR_VAR 0 1
37023: PUSH
37024: DOUBLE
37025: LD_EXP 136
37029: INC
37030: ST_TO_ADDR
37031: LD_INT 1
37033: PUSH
37034: FOR_DOWNTO
37035: IFFALSE 37371
// begin if IsLive ( minersList [ i ] ) then
37037: LD_EXP 135
37041: PUSH
37042: LD_VAR 0 1
37046: ARRAY
37047: PPUSH
37048: CALL_OW 300
37052: IFFALSE 37080
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37054: LD_EXP 135
37058: PUSH
37059: LD_VAR 0 1
37063: ARRAY
37064: PPUSH
37065: LD_EXP 136
37069: PUSH
37070: LD_VAR 0 1
37074: ARRAY
37075: PPUSH
37076: CALL_OW 505
// if not minerMinesList [ i ] then
37080: LD_EXP 136
37084: PUSH
37085: LD_VAR 0 1
37089: ARRAY
37090: NOT
37091: IFFALSE 37095
// continue ;
37093: GO 37034
// for j := minerMinesList [ i ] downto 1 do
37095: LD_ADDR_VAR 0 2
37099: PUSH
37100: DOUBLE
37101: LD_EXP 136
37105: PUSH
37106: LD_VAR 0 1
37110: ARRAY
37111: INC
37112: ST_TO_ADDR
37113: LD_INT 1
37115: PUSH
37116: FOR_DOWNTO
37117: IFFALSE 37367
// begin side := GetSide ( minersList [ i ] ) ;
37119: LD_ADDR_VAR 0 3
37123: PUSH
37124: LD_EXP 135
37128: PUSH
37129: LD_VAR 0 1
37133: ARRAY
37134: PPUSH
37135: CALL_OW 255
37139: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37140: LD_ADDR_VAR 0 4
37144: PUSH
37145: LD_EXP 136
37149: PUSH
37150: LD_VAR 0 1
37154: ARRAY
37155: PUSH
37156: LD_VAR 0 2
37160: ARRAY
37161: PUSH
37162: LD_INT 1
37164: ARRAY
37165: PPUSH
37166: LD_EXP 136
37170: PUSH
37171: LD_VAR 0 1
37175: ARRAY
37176: PUSH
37177: LD_VAR 0 2
37181: ARRAY
37182: PUSH
37183: LD_INT 2
37185: ARRAY
37186: PPUSH
37187: CALL_OW 428
37191: ST_TO_ADDR
// if not tmp then
37192: LD_VAR 0 4
37196: NOT
37197: IFFALSE 37201
// continue ;
37199: GO 37116
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37201: LD_VAR 0 4
37205: PUSH
37206: LD_INT 81
37208: PUSH
37209: LD_VAR 0 3
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PPUSH
37218: CALL_OW 69
37222: IN
37223: PUSH
37224: LD_EXP 136
37228: PUSH
37229: LD_VAR 0 1
37233: ARRAY
37234: PUSH
37235: LD_VAR 0 2
37239: ARRAY
37240: PUSH
37241: LD_INT 1
37243: ARRAY
37244: PPUSH
37245: LD_EXP 136
37249: PUSH
37250: LD_VAR 0 1
37254: ARRAY
37255: PUSH
37256: LD_VAR 0 2
37260: ARRAY
37261: PUSH
37262: LD_INT 2
37264: ARRAY
37265: PPUSH
37266: CALL_OW 458
37270: AND
37271: IFFALSE 37365
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37273: LD_EXP 136
37277: PUSH
37278: LD_VAR 0 1
37282: ARRAY
37283: PUSH
37284: LD_VAR 0 2
37288: ARRAY
37289: PUSH
37290: LD_INT 1
37292: ARRAY
37293: PPUSH
37294: LD_EXP 136
37298: PUSH
37299: LD_VAR 0 1
37303: ARRAY
37304: PUSH
37305: LD_VAR 0 2
37309: ARRAY
37310: PUSH
37311: LD_INT 2
37313: ARRAY
37314: PPUSH
37315: LD_VAR 0 3
37319: PPUSH
37320: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37324: LD_ADDR_EXP 136
37328: PUSH
37329: LD_EXP 136
37333: PPUSH
37334: LD_VAR 0 1
37338: PPUSH
37339: LD_EXP 136
37343: PUSH
37344: LD_VAR 0 1
37348: ARRAY
37349: PPUSH
37350: LD_VAR 0 2
37354: PPUSH
37355: CALL_OW 3
37359: PPUSH
37360: CALL_OW 1
37364: ST_TO_ADDR
// end ; end ;
37365: GO 37116
37367: POP
37368: POP
// end ;
37369: GO 37034
37371: POP
37372: POP
// end ;
37373: PPOPN 4
37375: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37376: LD_INT 0
37378: PPUSH
37379: PPUSH
// result := false ;
37380: LD_ADDR_VAR 0 4
37384: PUSH
37385: LD_INT 0
37387: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37388: LD_VAR 0 1
37392: PPUSH
37393: CALL_OW 264
37397: PUSH
37398: LD_INT 81
37400: EQUAL
37401: NOT
37402: IFFALSE 37406
// exit ;
37404: GO 37646
// index := GetElementIndex ( minersList , unit ) ;
37406: LD_ADDR_VAR 0 5
37410: PUSH
37411: LD_EXP 135
37415: PPUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: CALL 43779 0 2
37425: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37426: LD_EXP 136
37430: PUSH
37431: LD_VAR 0 5
37435: ARRAY
37436: PUSH
37437: LD_EXP 137
37441: GREATEREQUAL
37442: IFFALSE 37446
// exit ;
37444: GO 37646
// ComMoveXY ( unit , x , y ) ;
37446: LD_VAR 0 1
37450: PPUSH
37451: LD_VAR 0 2
37455: PPUSH
37456: LD_VAR 0 3
37460: PPUSH
37461: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37465: LD_INT 35
37467: PPUSH
37468: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37472: LD_VAR 0 1
37476: PPUSH
37477: LD_VAR 0 2
37481: PPUSH
37482: LD_VAR 0 3
37486: PPUSH
37487: CALL 75134 0 3
37491: NOT
37492: PUSH
37493: LD_VAR 0 1
37497: PPUSH
37498: CALL_OW 314
37502: AND
37503: IFFALSE 37507
// exit ;
37505: GO 37646
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37507: LD_VAR 0 2
37511: PPUSH
37512: LD_VAR 0 3
37516: PPUSH
37517: CALL_OW 428
37521: PUSH
37522: LD_VAR 0 1
37526: EQUAL
37527: PUSH
37528: LD_VAR 0 1
37532: PPUSH
37533: CALL_OW 314
37537: NOT
37538: AND
37539: IFFALSE 37465
// PlaySoundXY ( x , y , PlantMine ) ;
37541: LD_VAR 0 2
37545: PPUSH
37546: LD_VAR 0 3
37550: PPUSH
37551: LD_STRING PlantMine
37553: PPUSH
37554: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37558: LD_VAR 0 2
37562: PPUSH
37563: LD_VAR 0 3
37567: PPUSH
37568: LD_VAR 0 1
37572: PPUSH
37573: CALL_OW 255
37577: PPUSH
37578: LD_INT 0
37580: PPUSH
37581: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37585: LD_ADDR_EXP 136
37589: PUSH
37590: LD_EXP 136
37594: PPUSH
37595: LD_VAR 0 5
37599: PUSH
37600: LD_EXP 136
37604: PUSH
37605: LD_VAR 0 5
37609: ARRAY
37610: PUSH
37611: LD_INT 1
37613: PLUS
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PPUSH
37619: LD_VAR 0 2
37623: PUSH
37624: LD_VAR 0 3
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PPUSH
37633: CALL 43994 0 3
37637: ST_TO_ADDR
// result := true ;
37638: LD_ADDR_VAR 0 4
37642: PUSH
37643: LD_INT 1
37645: ST_TO_ADDR
// end ;
37646: LD_VAR 0 4
37650: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37651: LD_INT 0
37653: PPUSH
37654: PPUSH
37655: PPUSH
// if not unit in minersList then
37656: LD_VAR 0 1
37660: PUSH
37661: LD_EXP 135
37665: IN
37666: NOT
37667: IFFALSE 37671
// exit ;
37669: GO 38063
// index := GetElementIndex ( minersList , unit ) ;
37671: LD_ADDR_VAR 0 6
37675: PUSH
37676: LD_EXP 135
37680: PPUSH
37681: LD_VAR 0 1
37685: PPUSH
37686: CALL 43779 0 2
37690: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37691: LD_ADDR_VAR 0 5
37695: PUSH
37696: DOUBLE
37697: LD_EXP 136
37701: PUSH
37702: LD_VAR 0 6
37706: ARRAY
37707: INC
37708: ST_TO_ADDR
37709: LD_INT 1
37711: PUSH
37712: FOR_DOWNTO
37713: IFFALSE 37874
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37715: LD_EXP 136
37719: PUSH
37720: LD_VAR 0 6
37724: ARRAY
37725: PUSH
37726: LD_VAR 0 5
37730: ARRAY
37731: PUSH
37732: LD_INT 1
37734: ARRAY
37735: PUSH
37736: LD_VAR 0 2
37740: EQUAL
37741: PUSH
37742: LD_EXP 136
37746: PUSH
37747: LD_VAR 0 6
37751: ARRAY
37752: PUSH
37753: LD_VAR 0 5
37757: ARRAY
37758: PUSH
37759: LD_INT 2
37761: ARRAY
37762: PUSH
37763: LD_VAR 0 3
37767: EQUAL
37768: AND
37769: IFFALSE 37872
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37771: LD_EXP 136
37775: PUSH
37776: LD_VAR 0 6
37780: ARRAY
37781: PUSH
37782: LD_VAR 0 5
37786: ARRAY
37787: PUSH
37788: LD_INT 1
37790: ARRAY
37791: PPUSH
37792: LD_EXP 136
37796: PUSH
37797: LD_VAR 0 6
37801: ARRAY
37802: PUSH
37803: LD_VAR 0 5
37807: ARRAY
37808: PUSH
37809: LD_INT 2
37811: ARRAY
37812: PPUSH
37813: LD_VAR 0 1
37817: PPUSH
37818: CALL_OW 255
37822: PPUSH
37823: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37827: LD_ADDR_EXP 136
37831: PUSH
37832: LD_EXP 136
37836: PPUSH
37837: LD_VAR 0 6
37841: PPUSH
37842: LD_EXP 136
37846: PUSH
37847: LD_VAR 0 6
37851: ARRAY
37852: PPUSH
37853: LD_VAR 0 5
37857: PPUSH
37858: CALL_OW 3
37862: PPUSH
37863: CALL_OW 1
37867: ST_TO_ADDR
// exit ;
37868: POP
37869: POP
37870: GO 38063
// end ; end ;
37872: GO 37712
37874: POP
37875: POP
// for i := minerMinesList [ index ] downto 1 do
37876: LD_ADDR_VAR 0 5
37880: PUSH
37881: DOUBLE
37882: LD_EXP 136
37886: PUSH
37887: LD_VAR 0 6
37891: ARRAY
37892: INC
37893: ST_TO_ADDR
37894: LD_INT 1
37896: PUSH
37897: FOR_DOWNTO
37898: IFFALSE 38061
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37900: LD_EXP 136
37904: PUSH
37905: LD_VAR 0 6
37909: ARRAY
37910: PUSH
37911: LD_VAR 0 5
37915: ARRAY
37916: PUSH
37917: LD_INT 1
37919: ARRAY
37920: PPUSH
37921: LD_EXP 136
37925: PUSH
37926: LD_VAR 0 6
37930: ARRAY
37931: PUSH
37932: LD_VAR 0 5
37936: ARRAY
37937: PUSH
37938: LD_INT 2
37940: ARRAY
37941: PPUSH
37942: LD_VAR 0 2
37946: PPUSH
37947: LD_VAR 0 3
37951: PPUSH
37952: CALL_OW 298
37956: PUSH
37957: LD_INT 6
37959: LESS
37960: IFFALSE 38059
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37962: LD_EXP 136
37966: PUSH
37967: LD_VAR 0 6
37971: ARRAY
37972: PUSH
37973: LD_VAR 0 5
37977: ARRAY
37978: PUSH
37979: LD_INT 1
37981: ARRAY
37982: PPUSH
37983: LD_EXP 136
37987: PUSH
37988: LD_VAR 0 6
37992: ARRAY
37993: PUSH
37994: LD_VAR 0 5
37998: ARRAY
37999: PUSH
38000: LD_INT 2
38002: ARRAY
38003: PPUSH
38004: LD_VAR 0 1
38008: PPUSH
38009: CALL_OW 255
38013: PPUSH
38014: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38018: LD_ADDR_EXP 136
38022: PUSH
38023: LD_EXP 136
38027: PPUSH
38028: LD_VAR 0 6
38032: PPUSH
38033: LD_EXP 136
38037: PUSH
38038: LD_VAR 0 6
38042: ARRAY
38043: PPUSH
38044: LD_VAR 0 5
38048: PPUSH
38049: CALL_OW 3
38053: PPUSH
38054: CALL_OW 1
38058: ST_TO_ADDR
// end ; end ;
38059: GO 37897
38061: POP
38062: POP
// end ;
38063: LD_VAR 0 4
38067: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38068: LD_INT 0
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38079: LD_VAR 0 1
38083: PPUSH
38084: CALL_OW 264
38088: PUSH
38089: LD_INT 81
38091: EQUAL
38092: NOT
38093: PUSH
38094: LD_VAR 0 1
38098: PUSH
38099: LD_EXP 135
38103: IN
38104: NOT
38105: OR
38106: IFFALSE 38110
// exit ;
38108: GO 38432
// index := GetElementIndex ( minersList , unit ) ;
38110: LD_ADDR_VAR 0 6
38114: PUSH
38115: LD_EXP 135
38119: PPUSH
38120: LD_VAR 0 1
38124: PPUSH
38125: CALL 43779 0 2
38129: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38130: LD_ADDR_VAR 0 8
38134: PUSH
38135: LD_EXP 137
38139: PUSH
38140: LD_EXP 136
38144: PUSH
38145: LD_VAR 0 6
38149: ARRAY
38150: MINUS
38151: ST_TO_ADDR
// if not minesFreeAmount then
38152: LD_VAR 0 8
38156: NOT
38157: IFFALSE 38161
// exit ;
38159: GO 38432
// tmp := [ ] ;
38161: LD_ADDR_VAR 0 7
38165: PUSH
38166: EMPTY
38167: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38168: LD_ADDR_VAR 0 5
38172: PUSH
38173: DOUBLE
38174: LD_INT 1
38176: DEC
38177: ST_TO_ADDR
38178: LD_VAR 0 8
38182: PUSH
38183: FOR_TO
38184: IFFALSE 38379
// begin _d := rand ( 0 , 5 ) ;
38186: LD_ADDR_VAR 0 11
38190: PUSH
38191: LD_INT 0
38193: PPUSH
38194: LD_INT 5
38196: PPUSH
38197: CALL_OW 12
38201: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38202: LD_ADDR_VAR 0 12
38206: PUSH
38207: LD_INT 2
38209: PPUSH
38210: LD_INT 6
38212: PPUSH
38213: CALL_OW 12
38217: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38218: LD_ADDR_VAR 0 9
38222: PUSH
38223: LD_VAR 0 2
38227: PPUSH
38228: LD_VAR 0 11
38232: PPUSH
38233: LD_VAR 0 12
38237: PPUSH
38238: CALL_OW 272
38242: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38243: LD_ADDR_VAR 0 10
38247: PUSH
38248: LD_VAR 0 3
38252: PPUSH
38253: LD_VAR 0 11
38257: PPUSH
38258: LD_VAR 0 12
38262: PPUSH
38263: CALL_OW 273
38267: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38268: LD_VAR 0 9
38272: PPUSH
38273: LD_VAR 0 10
38277: PPUSH
38278: CALL_OW 488
38282: PUSH
38283: LD_VAR 0 9
38287: PUSH
38288: LD_VAR 0 10
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_VAR 0 7
38301: IN
38302: NOT
38303: AND
38304: PUSH
38305: LD_VAR 0 9
38309: PPUSH
38310: LD_VAR 0 10
38314: PPUSH
38315: CALL_OW 458
38319: NOT
38320: AND
38321: IFFALSE 38363
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38323: LD_ADDR_VAR 0 7
38327: PUSH
38328: LD_VAR 0 7
38332: PPUSH
38333: LD_VAR 0 7
38337: PUSH
38338: LD_INT 1
38340: PLUS
38341: PPUSH
38342: LD_VAR 0 9
38346: PUSH
38347: LD_VAR 0 10
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PPUSH
38356: CALL_OW 1
38360: ST_TO_ADDR
38361: GO 38377
// i := i - 1 ;
38363: LD_ADDR_VAR 0 5
38367: PUSH
38368: LD_VAR 0 5
38372: PUSH
38373: LD_INT 1
38375: MINUS
38376: ST_TO_ADDR
// end ;
38377: GO 38183
38379: POP
38380: POP
// for i in tmp do
38381: LD_ADDR_VAR 0 5
38385: PUSH
38386: LD_VAR 0 7
38390: PUSH
38391: FOR_IN
38392: IFFALSE 38430
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38394: LD_VAR 0 1
38398: PPUSH
38399: LD_VAR 0 5
38403: PUSH
38404: LD_INT 1
38406: ARRAY
38407: PPUSH
38408: LD_VAR 0 5
38412: PUSH
38413: LD_INT 2
38415: ARRAY
38416: PPUSH
38417: CALL 37376 0 3
38421: NOT
38422: IFFALSE 38428
// exit ;
38424: POP
38425: POP
38426: GO 38432
38428: GO 38391
38430: POP
38431: POP
// end ;
38432: LD_VAR 0 4
38436: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38437: LD_INT 0
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
// if not GetClass ( unit ) = class_sniper then
38446: LD_VAR 0 1
38450: PPUSH
38451: CALL_OW 257
38455: PUSH
38456: LD_INT 5
38458: EQUAL
38459: NOT
38460: IFFALSE 38464
// exit ;
38462: GO 38852
// dist := 8 ;
38464: LD_ADDR_VAR 0 5
38468: PUSH
38469: LD_INT 8
38471: ST_TO_ADDR
// viewRange := 12 ;
38472: LD_ADDR_VAR 0 7
38476: PUSH
38477: LD_INT 12
38479: ST_TO_ADDR
// side := GetSide ( unit ) ;
38480: LD_ADDR_VAR 0 6
38484: PUSH
38485: LD_VAR 0 1
38489: PPUSH
38490: CALL_OW 255
38494: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38495: LD_INT 61
38497: PPUSH
38498: LD_VAR 0 6
38502: PPUSH
38503: CALL_OW 321
38507: PUSH
38508: LD_INT 2
38510: EQUAL
38511: IFFALSE 38521
// viewRange := 16 ;
38513: LD_ADDR_VAR 0 7
38517: PUSH
38518: LD_INT 16
38520: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38521: LD_VAR 0 1
38525: PPUSH
38526: LD_VAR 0 2
38530: PPUSH
38531: LD_VAR 0 3
38535: PPUSH
38536: CALL_OW 297
38540: PUSH
38541: LD_VAR 0 5
38545: GREATER
38546: IFFALSE 38625
// begin ComMoveXY ( unit , x , y ) ;
38548: LD_VAR 0 1
38552: PPUSH
38553: LD_VAR 0 2
38557: PPUSH
38558: LD_VAR 0 3
38562: PPUSH
38563: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38567: LD_INT 35
38569: PPUSH
38570: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38574: LD_VAR 0 1
38578: PPUSH
38579: LD_VAR 0 2
38583: PPUSH
38584: LD_VAR 0 3
38588: PPUSH
38589: CALL 75134 0 3
38593: NOT
38594: IFFALSE 38598
// exit ;
38596: GO 38852
// until GetDistUnitXY ( unit , x , y ) < dist ;
38598: LD_VAR 0 1
38602: PPUSH
38603: LD_VAR 0 2
38607: PPUSH
38608: LD_VAR 0 3
38612: PPUSH
38613: CALL_OW 297
38617: PUSH
38618: LD_VAR 0 5
38622: LESS
38623: IFFALSE 38567
// end ; ComTurnXY ( unit , x , y ) ;
38625: LD_VAR 0 1
38629: PPUSH
38630: LD_VAR 0 2
38634: PPUSH
38635: LD_VAR 0 3
38639: PPUSH
38640: CALL_OW 118
// wait ( 5 ) ;
38644: LD_INT 5
38646: PPUSH
38647: CALL_OW 67
// _d := GetDir ( unit ) ;
38651: LD_ADDR_VAR 0 10
38655: PUSH
38656: LD_VAR 0 1
38660: PPUSH
38661: CALL_OW 254
38665: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38666: LD_ADDR_VAR 0 8
38670: PUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: CALL_OW 250
38680: PPUSH
38681: LD_VAR 0 10
38685: PPUSH
38686: LD_VAR 0 5
38690: PPUSH
38691: CALL_OW 272
38695: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38696: LD_ADDR_VAR 0 9
38700: PUSH
38701: LD_VAR 0 1
38705: PPUSH
38706: CALL_OW 251
38710: PPUSH
38711: LD_VAR 0 10
38715: PPUSH
38716: LD_VAR 0 5
38720: PPUSH
38721: CALL_OW 273
38725: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38726: LD_VAR 0 8
38730: PPUSH
38731: LD_VAR 0 9
38735: PPUSH
38736: CALL_OW 488
38740: NOT
38741: IFFALSE 38745
// exit ;
38743: GO 38852
// ComAnimCustom ( unit , 1 ) ;
38745: LD_VAR 0 1
38749: PPUSH
38750: LD_INT 1
38752: PPUSH
38753: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38757: LD_VAR 0 8
38761: PPUSH
38762: LD_VAR 0 9
38766: PPUSH
38767: LD_VAR 0 6
38771: PPUSH
38772: LD_VAR 0 7
38776: PPUSH
38777: CALL_OW 330
// repeat wait ( 1 ) ;
38781: LD_INT 1
38783: PPUSH
38784: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38788: LD_VAR 0 1
38792: PPUSH
38793: CALL_OW 316
38797: PUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 314
38807: OR
38808: PUSH
38809: LD_VAR 0 1
38813: PPUSH
38814: CALL_OW 302
38818: NOT
38819: OR
38820: PUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 301
38830: OR
38831: IFFALSE 38781
// RemoveSeeing ( _x , _y , side ) ;
38833: LD_VAR 0 8
38837: PPUSH
38838: LD_VAR 0 9
38842: PPUSH
38843: LD_VAR 0 6
38847: PPUSH
38848: CALL_OW 331
// end ; end_of_file
38852: LD_VAR 0 4
38856: RET
// export ru_radar export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38857: LD_INT 0
38859: PPUSH
38860: PPUSH
// if exist_mode then
38861: LD_VAR 0 2
38865: IFFALSE 38890
// unit := CreateCharacter ( prefix & ident ) else
38867: LD_ADDR_VAR 0 5
38871: PUSH
38872: LD_VAR 0 3
38876: PUSH
38877: LD_VAR 0 1
38881: STR
38882: PPUSH
38883: CALL_OW 34
38887: ST_TO_ADDR
38888: GO 38905
// unit := NewCharacter ( ident ) ;
38890: LD_ADDR_VAR 0 5
38894: PUSH
38895: LD_VAR 0 1
38899: PPUSH
38900: CALL_OW 25
38904: ST_TO_ADDR
// result := unit ;
38905: LD_ADDR_VAR 0 4
38909: PUSH
38910: LD_VAR 0 5
38914: ST_TO_ADDR
// end ;
38915: LD_VAR 0 4
38919: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38920: LD_INT 0
38922: PPUSH
38923: PPUSH
// if not side or not nation then
38924: LD_VAR 0 1
38928: NOT
38929: PUSH
38930: LD_VAR 0 2
38934: NOT
38935: OR
38936: IFFALSE 38940
// exit ;
38938: GO 39708
// case nation of nation_american :
38940: LD_VAR 0 2
38944: PUSH
38945: LD_INT 1
38947: DOUBLE
38948: EQUAL
38949: IFTRUE 38953
38951: GO 39167
38953: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38954: LD_ADDR_VAR 0 4
38958: PUSH
38959: LD_INT 35
38961: PUSH
38962: LD_INT 45
38964: PUSH
38965: LD_INT 46
38967: PUSH
38968: LD_INT 47
38970: PUSH
38971: LD_INT 82
38973: PUSH
38974: LD_INT 83
38976: PUSH
38977: LD_INT 84
38979: PUSH
38980: LD_INT 85
38982: PUSH
38983: LD_INT 86
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: LD_INT 6
38994: PUSH
38995: LD_INT 15
38997: PUSH
38998: LD_INT 16
39000: PUSH
39001: LD_INT 7
39003: PUSH
39004: LD_INT 12
39006: PUSH
39007: LD_INT 13
39009: PUSH
39010: LD_INT 10
39012: PUSH
39013: LD_INT 14
39015: PUSH
39016: LD_INT 20
39018: PUSH
39019: LD_INT 21
39021: PUSH
39022: LD_INT 22
39024: PUSH
39025: LD_INT 25
39027: PUSH
39028: LD_INT 32
39030: PUSH
39031: LD_INT 27
39033: PUSH
39034: LD_INT 36
39036: PUSH
39037: LD_INT 69
39039: PUSH
39040: LD_INT 39
39042: PUSH
39043: LD_INT 34
39045: PUSH
39046: LD_INT 40
39048: PUSH
39049: LD_INT 48
39051: PUSH
39052: LD_INT 49
39054: PUSH
39055: LD_INT 50
39057: PUSH
39058: LD_INT 51
39060: PUSH
39061: LD_INT 52
39063: PUSH
39064: LD_INT 53
39066: PUSH
39067: LD_INT 54
39069: PUSH
39070: LD_INT 55
39072: PUSH
39073: LD_INT 56
39075: PUSH
39076: LD_INT 57
39078: PUSH
39079: LD_INT 58
39081: PUSH
39082: LD_INT 59
39084: PUSH
39085: LD_INT 60
39087: PUSH
39088: LD_INT 61
39090: PUSH
39091: LD_INT 62
39093: PUSH
39094: LD_INT 80
39096: PUSH
39097: LD_INT 82
39099: PUSH
39100: LD_INT 83
39102: PUSH
39103: LD_INT 84
39105: PUSH
39106: LD_INT 85
39108: PUSH
39109: LD_INT 86
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: ST_TO_ADDR
39165: GO 39632
39167: LD_INT 2
39169: DOUBLE
39170: EQUAL
39171: IFTRUE 39175
39173: GO 39401
39175: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39176: LD_ADDR_VAR 0 4
39180: PUSH
39181: LD_INT 35
39183: PUSH
39184: LD_INT 45
39186: PUSH
39187: LD_INT 46
39189: PUSH
39190: LD_INT 47
39192: PUSH
39193: LD_INT 82
39195: PUSH
39196: LD_INT 83
39198: PUSH
39199: LD_INT 84
39201: PUSH
39202: LD_INT 85
39204: PUSH
39205: LD_INT 87
39207: PUSH
39208: LD_INT 70
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: LD_INT 11
39216: PUSH
39217: LD_INT 3
39219: PUSH
39220: LD_INT 4
39222: PUSH
39223: LD_INT 5
39225: PUSH
39226: LD_INT 6
39228: PUSH
39229: LD_INT 15
39231: PUSH
39232: LD_INT 18
39234: PUSH
39235: LD_INT 7
39237: PUSH
39238: LD_INT 17
39240: PUSH
39241: LD_INT 8
39243: PUSH
39244: LD_INT 20
39246: PUSH
39247: LD_INT 21
39249: PUSH
39250: LD_INT 22
39252: PUSH
39253: LD_INT 72
39255: PUSH
39256: LD_INT 26
39258: PUSH
39259: LD_INT 69
39261: PUSH
39262: LD_INT 39
39264: PUSH
39265: LD_INT 40
39267: PUSH
39268: LD_INT 41
39270: PUSH
39271: LD_INT 42
39273: PUSH
39274: LD_INT 43
39276: PUSH
39277: LD_INT 48
39279: PUSH
39280: LD_INT 49
39282: PUSH
39283: LD_INT 50
39285: PUSH
39286: LD_INT 51
39288: PUSH
39289: LD_INT 52
39291: PUSH
39292: LD_INT 53
39294: PUSH
39295: LD_INT 54
39297: PUSH
39298: LD_INT 55
39300: PUSH
39301: LD_INT 56
39303: PUSH
39304: LD_INT 60
39306: PUSH
39307: LD_INT 61
39309: PUSH
39310: LD_INT 62
39312: PUSH
39313: LD_INT 66
39315: PUSH
39316: LD_INT 67
39318: PUSH
39319: LD_INT 68
39321: PUSH
39322: LD_INT 81
39324: PUSH
39325: LD_INT 82
39327: PUSH
39328: LD_INT 83
39330: PUSH
39331: LD_INT 84
39333: PUSH
39334: LD_INT 85
39336: PUSH
39337: LD_INT 87
39339: PUSH
39340: LD_INT 88
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: ST_TO_ADDR
39399: GO 39632
39401: LD_INT 3
39403: DOUBLE
39404: EQUAL
39405: IFTRUE 39409
39407: GO 39631
39409: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39410: LD_ADDR_VAR 0 4
39414: PUSH
39415: LD_INT 46
39417: PUSH
39418: LD_INT 47
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 82
39429: PUSH
39430: LD_INT 83
39432: PUSH
39433: LD_INT 84
39435: PUSH
39436: LD_INT 85
39438: PUSH
39439: LD_INT 86
39441: PUSH
39442: LD_INT 11
39444: PUSH
39445: LD_INT 9
39447: PUSH
39448: LD_INT 20
39450: PUSH
39451: LD_INT 19
39453: PUSH
39454: LD_INT 21
39456: PUSH
39457: LD_INT 24
39459: PUSH
39460: LD_INT 22
39462: PUSH
39463: LD_INT 25
39465: PUSH
39466: LD_INT 28
39468: PUSH
39469: LD_INT 29
39471: PUSH
39472: LD_INT 30
39474: PUSH
39475: LD_INT 31
39477: PUSH
39478: LD_INT 37
39480: PUSH
39481: LD_INT 38
39483: PUSH
39484: LD_INT 32
39486: PUSH
39487: LD_INT 27
39489: PUSH
39490: LD_INT 33
39492: PUSH
39493: LD_INT 69
39495: PUSH
39496: LD_INT 39
39498: PUSH
39499: LD_INT 34
39501: PUSH
39502: LD_INT 40
39504: PUSH
39505: LD_INT 71
39507: PUSH
39508: LD_INT 23
39510: PUSH
39511: LD_INT 44
39513: PUSH
39514: LD_INT 48
39516: PUSH
39517: LD_INT 49
39519: PUSH
39520: LD_INT 50
39522: PUSH
39523: LD_INT 51
39525: PUSH
39526: LD_INT 52
39528: PUSH
39529: LD_INT 53
39531: PUSH
39532: LD_INT 54
39534: PUSH
39535: LD_INT 55
39537: PUSH
39538: LD_INT 56
39540: PUSH
39541: LD_INT 57
39543: PUSH
39544: LD_INT 58
39546: PUSH
39547: LD_INT 59
39549: PUSH
39550: LD_INT 63
39552: PUSH
39553: LD_INT 64
39555: PUSH
39556: LD_INT 65
39558: PUSH
39559: LD_INT 82
39561: PUSH
39562: LD_INT 83
39564: PUSH
39565: LD_INT 84
39567: PUSH
39568: LD_INT 85
39570: PUSH
39571: LD_INT 86
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
39629: GO 39632
39631: POP
// if state > - 1 and state < 3 then
39632: LD_VAR 0 3
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: GREATER
39641: PUSH
39642: LD_VAR 0 3
39646: PUSH
39647: LD_INT 3
39649: LESS
39650: AND
39651: IFFALSE 39708
// for i in result do
39653: LD_ADDR_VAR 0 5
39657: PUSH
39658: LD_VAR 0 4
39662: PUSH
39663: FOR_IN
39664: IFFALSE 39706
// if GetTech ( i , side ) <> state then
39666: LD_VAR 0 5
39670: PPUSH
39671: LD_VAR 0 1
39675: PPUSH
39676: CALL_OW 321
39680: PUSH
39681: LD_VAR 0 3
39685: NONEQUAL
39686: IFFALSE 39704
// result := result diff i ;
39688: LD_ADDR_VAR 0 4
39692: PUSH
39693: LD_VAR 0 4
39697: PUSH
39698: LD_VAR 0 5
39702: DIFF
39703: ST_TO_ADDR
39704: GO 39663
39706: POP
39707: POP
// end ;
39708: LD_VAR 0 4
39712: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39713: LD_INT 0
39715: PPUSH
39716: PPUSH
39717: PPUSH
// result := true ;
39718: LD_ADDR_VAR 0 3
39722: PUSH
39723: LD_INT 1
39725: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39726: LD_ADDR_VAR 0 5
39730: PUSH
39731: LD_VAR 0 2
39735: PPUSH
39736: CALL_OW 480
39740: ST_TO_ADDR
// if not tmp then
39741: LD_VAR 0 5
39745: NOT
39746: IFFALSE 39750
// exit ;
39748: GO 39799
// for i in tmp do
39750: LD_ADDR_VAR 0 4
39754: PUSH
39755: LD_VAR 0 5
39759: PUSH
39760: FOR_IN
39761: IFFALSE 39797
// if GetTech ( i , side ) <> state_researched then
39763: LD_VAR 0 4
39767: PPUSH
39768: LD_VAR 0 1
39772: PPUSH
39773: CALL_OW 321
39777: PUSH
39778: LD_INT 2
39780: NONEQUAL
39781: IFFALSE 39795
// begin result := false ;
39783: LD_ADDR_VAR 0 3
39787: PUSH
39788: LD_INT 0
39790: ST_TO_ADDR
// exit ;
39791: POP
39792: POP
39793: GO 39799
// end ;
39795: GO 39760
39797: POP
39798: POP
// end ;
39799: LD_VAR 0 3
39803: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39804: LD_INT 0
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39819: LD_VAR 0 1
39823: NOT
39824: PUSH
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 257
39834: PUSH
39835: LD_INT 9
39837: NONEQUAL
39838: OR
39839: IFFALSE 39843
// exit ;
39841: GO 40416
// side := GetSide ( unit ) ;
39843: LD_ADDR_VAR 0 9
39847: PUSH
39848: LD_VAR 0 1
39852: PPUSH
39853: CALL_OW 255
39857: ST_TO_ADDR
// tech_space := tech_spacanom ;
39858: LD_ADDR_VAR 0 12
39862: PUSH
39863: LD_INT 29
39865: ST_TO_ADDR
// tech_time := tech_taurad ;
39866: LD_ADDR_VAR 0 13
39870: PUSH
39871: LD_INT 28
39873: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39874: LD_ADDR_VAR 0 11
39878: PUSH
39879: LD_VAR 0 1
39883: PPUSH
39884: CALL_OW 310
39888: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39889: LD_VAR 0 11
39893: PPUSH
39894: CALL_OW 247
39898: PUSH
39899: LD_INT 2
39901: EQUAL
39902: IFFALSE 39906
// exit ;
39904: GO 40416
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39906: LD_ADDR_VAR 0 8
39910: PUSH
39911: LD_INT 81
39913: PUSH
39914: LD_VAR 0 9
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: LD_INT 21
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PPUSH
39944: CALL_OW 69
39948: ST_TO_ADDR
// if not tmp then
39949: LD_VAR 0 8
39953: NOT
39954: IFFALSE 39958
// exit ;
39956: GO 40416
// if in_unit then
39958: LD_VAR 0 11
39962: IFFALSE 39986
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39964: LD_ADDR_VAR 0 10
39968: PUSH
39969: LD_VAR 0 8
39973: PPUSH
39974: LD_VAR 0 11
39978: PPUSH
39979: CALL_OW 74
39983: ST_TO_ADDR
39984: GO 40006
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39986: LD_ADDR_VAR 0 10
39990: PUSH
39991: LD_VAR 0 8
39995: PPUSH
39996: LD_VAR 0 1
40000: PPUSH
40001: CALL_OW 74
40005: ST_TO_ADDR
// if not enemy then
40006: LD_VAR 0 10
40010: NOT
40011: IFFALSE 40015
// exit ;
40013: GO 40416
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40015: LD_VAR 0 11
40019: PUSH
40020: LD_VAR 0 11
40024: PPUSH
40025: LD_VAR 0 10
40029: PPUSH
40030: CALL_OW 296
40034: PUSH
40035: LD_INT 13
40037: GREATER
40038: AND
40039: PUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: LD_VAR 0 10
40049: PPUSH
40050: CALL_OW 296
40054: PUSH
40055: LD_INT 12
40057: GREATER
40058: OR
40059: IFFALSE 40063
// exit ;
40061: GO 40416
// missile := [ 1 ] ;
40063: LD_ADDR_VAR 0 14
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40074: LD_VAR 0 9
40078: PPUSH
40079: LD_VAR 0 12
40083: PPUSH
40084: CALL_OW 325
40088: IFFALSE 40117
// missile := Replace ( missile , missile + 1 , 2 ) ;
40090: LD_ADDR_VAR 0 14
40094: PUSH
40095: LD_VAR 0 14
40099: PPUSH
40100: LD_VAR 0 14
40104: PUSH
40105: LD_INT 1
40107: PLUS
40108: PPUSH
40109: LD_INT 2
40111: PPUSH
40112: CALL_OW 1
40116: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40117: LD_VAR 0 9
40121: PPUSH
40122: LD_VAR 0 13
40126: PPUSH
40127: CALL_OW 325
40131: PUSH
40132: LD_VAR 0 10
40136: PPUSH
40137: CALL_OW 255
40141: PPUSH
40142: LD_VAR 0 13
40146: PPUSH
40147: CALL_OW 325
40151: NOT
40152: AND
40153: IFFALSE 40182
// missile := Replace ( missile , missile + 1 , 3 ) ;
40155: LD_ADDR_VAR 0 14
40159: PUSH
40160: LD_VAR 0 14
40164: PPUSH
40165: LD_VAR 0 14
40169: PUSH
40170: LD_INT 1
40172: PLUS
40173: PPUSH
40174: LD_INT 3
40176: PPUSH
40177: CALL_OW 1
40181: ST_TO_ADDR
// if missile < 2 then
40182: LD_VAR 0 14
40186: PUSH
40187: LD_INT 2
40189: LESS
40190: IFFALSE 40194
// exit ;
40192: GO 40416
// x := GetX ( enemy ) ;
40194: LD_ADDR_VAR 0 4
40198: PUSH
40199: LD_VAR 0 10
40203: PPUSH
40204: CALL_OW 250
40208: ST_TO_ADDR
// y := GetY ( enemy ) ;
40209: LD_ADDR_VAR 0 5
40213: PUSH
40214: LD_VAR 0 10
40218: PPUSH
40219: CALL_OW 251
40223: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40224: LD_ADDR_VAR 0 6
40228: PUSH
40229: LD_VAR 0 4
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PPUSH
40238: LD_INT 1
40240: PPUSH
40241: CALL_OW 12
40245: PLUS
40246: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40247: LD_ADDR_VAR 0 7
40251: PUSH
40252: LD_VAR 0 5
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PPUSH
40261: LD_INT 1
40263: PPUSH
40264: CALL_OW 12
40268: PLUS
40269: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40270: LD_VAR 0 6
40274: PPUSH
40275: LD_VAR 0 7
40279: PPUSH
40280: CALL_OW 488
40284: NOT
40285: IFFALSE 40307
// begin _x := x ;
40287: LD_ADDR_VAR 0 6
40291: PUSH
40292: LD_VAR 0 4
40296: ST_TO_ADDR
// _y := y ;
40297: LD_ADDR_VAR 0 7
40301: PUSH
40302: LD_VAR 0 5
40306: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40307: LD_ADDR_VAR 0 3
40311: PUSH
40312: LD_INT 1
40314: PPUSH
40315: LD_VAR 0 14
40319: PPUSH
40320: CALL_OW 12
40324: ST_TO_ADDR
// case i of 1 :
40325: LD_VAR 0 3
40329: PUSH
40330: LD_INT 1
40332: DOUBLE
40333: EQUAL
40334: IFTRUE 40338
40336: GO 40355
40338: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40339: LD_VAR 0 1
40343: PPUSH
40344: LD_VAR 0 10
40348: PPUSH
40349: CALL_OW 115
40353: GO 40416
40355: LD_INT 2
40357: DOUBLE
40358: EQUAL
40359: IFTRUE 40363
40361: GO 40385
40363: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40364: LD_VAR 0 1
40368: PPUSH
40369: LD_VAR 0 6
40373: PPUSH
40374: LD_VAR 0 7
40378: PPUSH
40379: CALL_OW 153
40383: GO 40416
40385: LD_INT 3
40387: DOUBLE
40388: EQUAL
40389: IFTRUE 40393
40391: GO 40415
40393: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40394: LD_VAR 0 1
40398: PPUSH
40399: LD_VAR 0 6
40403: PPUSH
40404: LD_VAR 0 7
40408: PPUSH
40409: CALL_OW 154
40413: GO 40416
40415: POP
// end ;
40416: LD_VAR 0 2
40420: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40421: LD_INT 0
40423: PPUSH
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
// if not unit or not building then
40429: LD_VAR 0 1
40433: NOT
40434: PUSH
40435: LD_VAR 0 2
40439: NOT
40440: OR
40441: IFFALSE 40445
// exit ;
40443: GO 40603
// x := GetX ( building ) ;
40445: LD_ADDR_VAR 0 5
40449: PUSH
40450: LD_VAR 0 2
40454: PPUSH
40455: CALL_OW 250
40459: ST_TO_ADDR
// y := GetY ( building ) ;
40460: LD_ADDR_VAR 0 6
40464: PUSH
40465: LD_VAR 0 2
40469: PPUSH
40470: CALL_OW 251
40474: ST_TO_ADDR
// for i = 0 to 5 do
40475: LD_ADDR_VAR 0 4
40479: PUSH
40480: DOUBLE
40481: LD_INT 0
40483: DEC
40484: ST_TO_ADDR
40485: LD_INT 5
40487: PUSH
40488: FOR_TO
40489: IFFALSE 40601
// begin _x := ShiftX ( x , i , 3 ) ;
40491: LD_ADDR_VAR 0 7
40495: PUSH
40496: LD_VAR 0 5
40500: PPUSH
40501: LD_VAR 0 4
40505: PPUSH
40506: LD_INT 3
40508: PPUSH
40509: CALL_OW 272
40513: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40514: LD_ADDR_VAR 0 8
40518: PUSH
40519: LD_VAR 0 6
40523: PPUSH
40524: LD_VAR 0 4
40528: PPUSH
40529: LD_INT 3
40531: PPUSH
40532: CALL_OW 273
40536: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40537: LD_VAR 0 7
40541: PPUSH
40542: LD_VAR 0 8
40546: PPUSH
40547: CALL_OW 488
40551: NOT
40552: IFFALSE 40556
// continue ;
40554: GO 40488
// if HexInfo ( _x , _y ) = 0 then
40556: LD_VAR 0 7
40560: PPUSH
40561: LD_VAR 0 8
40565: PPUSH
40566: CALL_OW 428
40570: PUSH
40571: LD_INT 0
40573: EQUAL
40574: IFFALSE 40599
// begin ComMoveXY ( unit , _x , _y ) ;
40576: LD_VAR 0 1
40580: PPUSH
40581: LD_VAR 0 7
40585: PPUSH
40586: LD_VAR 0 8
40590: PPUSH
40591: CALL_OW 111
// exit ;
40595: POP
40596: POP
40597: GO 40603
// end ; end ;
40599: GO 40488
40601: POP
40602: POP
// end ;
40603: LD_VAR 0 3
40607: RET
// export function ScanBase ( side , base_area ) ; begin
40608: LD_INT 0
40610: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40611: LD_ADDR_VAR 0 3
40615: PUSH
40616: LD_VAR 0 2
40620: PPUSH
40621: LD_INT 81
40623: PUSH
40624: LD_VAR 0 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PPUSH
40633: CALL_OW 70
40637: ST_TO_ADDR
// end ;
40638: LD_VAR 0 3
40642: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40643: LD_INT 0
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
// result := false ;
40649: LD_ADDR_VAR 0 2
40653: PUSH
40654: LD_INT 0
40656: ST_TO_ADDR
// side := GetSide ( unit ) ;
40657: LD_ADDR_VAR 0 3
40661: PUSH
40662: LD_VAR 0 1
40666: PPUSH
40667: CALL_OW 255
40671: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40672: LD_ADDR_VAR 0 4
40676: PUSH
40677: LD_VAR 0 1
40681: PPUSH
40682: CALL_OW 248
40686: ST_TO_ADDR
// case nat of 1 :
40687: LD_VAR 0 4
40691: PUSH
40692: LD_INT 1
40694: DOUBLE
40695: EQUAL
40696: IFTRUE 40700
40698: GO 40711
40700: POP
// tech := tech_lassight ; 2 :
40701: LD_ADDR_VAR 0 5
40705: PUSH
40706: LD_INT 12
40708: ST_TO_ADDR
40709: GO 40750
40711: LD_INT 2
40713: DOUBLE
40714: EQUAL
40715: IFTRUE 40719
40717: GO 40730
40719: POP
// tech := tech_mortar ; 3 :
40720: LD_ADDR_VAR 0 5
40724: PUSH
40725: LD_INT 41
40727: ST_TO_ADDR
40728: GO 40750
40730: LD_INT 3
40732: DOUBLE
40733: EQUAL
40734: IFTRUE 40738
40736: GO 40749
40738: POP
// tech := tech_bazooka ; end ;
40739: LD_ADDR_VAR 0 5
40743: PUSH
40744: LD_INT 44
40746: ST_TO_ADDR
40747: GO 40750
40749: POP
// if Researched ( side , tech ) then
40750: LD_VAR 0 3
40754: PPUSH
40755: LD_VAR 0 5
40759: PPUSH
40760: CALL_OW 325
40764: IFFALSE 40791
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40766: LD_ADDR_VAR 0 2
40770: PUSH
40771: LD_INT 5
40773: PUSH
40774: LD_INT 8
40776: PUSH
40777: LD_INT 9
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: PUSH
40785: LD_VAR 0 4
40789: ARRAY
40790: ST_TO_ADDR
// end ;
40791: LD_VAR 0 2
40795: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40796: LD_INT 0
40798: PPUSH
40799: PPUSH
40800: PPUSH
// if not mines then
40801: LD_VAR 0 2
40805: NOT
40806: IFFALSE 40810
// exit ;
40808: GO 40954
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40810: LD_ADDR_VAR 0 5
40814: PUSH
40815: LD_INT 81
40817: PUSH
40818: LD_VAR 0 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 3
40829: PUSH
40830: LD_INT 21
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PPUSH
40848: CALL_OW 69
40852: ST_TO_ADDR
// for i in mines do
40853: LD_ADDR_VAR 0 4
40857: PUSH
40858: LD_VAR 0 2
40862: PUSH
40863: FOR_IN
40864: IFFALSE 40952
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40866: LD_VAR 0 4
40870: PUSH
40871: LD_INT 1
40873: ARRAY
40874: PPUSH
40875: LD_VAR 0 4
40879: PUSH
40880: LD_INT 2
40882: ARRAY
40883: PPUSH
40884: CALL_OW 458
40888: NOT
40889: IFFALSE 40893
// continue ;
40891: GO 40863
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40893: LD_VAR 0 4
40897: PUSH
40898: LD_INT 1
40900: ARRAY
40901: PPUSH
40902: LD_VAR 0 4
40906: PUSH
40907: LD_INT 2
40909: ARRAY
40910: PPUSH
40911: CALL_OW 428
40915: PUSH
40916: LD_VAR 0 5
40920: IN
40921: IFFALSE 40950
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40923: LD_VAR 0 4
40927: PUSH
40928: LD_INT 1
40930: ARRAY
40931: PPUSH
40932: LD_VAR 0 4
40936: PUSH
40937: LD_INT 2
40939: ARRAY
40940: PPUSH
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 456
// end ;
40950: GO 40863
40952: POP
40953: POP
// end ;
40954: LD_VAR 0 3
40958: RET
// export function Count ( array ) ; var i ; begin
40959: LD_INT 0
40961: PPUSH
40962: PPUSH
// result := 0 ;
40963: LD_ADDR_VAR 0 2
40967: PUSH
40968: LD_INT 0
40970: ST_TO_ADDR
// for i in array do
40971: LD_ADDR_VAR 0 3
40975: PUSH
40976: LD_VAR 0 1
40980: PUSH
40981: FOR_IN
40982: IFFALSE 41006
// if i then
40984: LD_VAR 0 3
40988: IFFALSE 41004
// result := result + 1 ;
40990: LD_ADDR_VAR 0 2
40994: PUSH
40995: LD_VAR 0 2
40999: PUSH
41000: LD_INT 1
41002: PLUS
41003: ST_TO_ADDR
41004: GO 40981
41006: POP
41007: POP
// end ;
41008: LD_VAR 0 2
41012: RET
// export function IsEmpty ( building ) ; begin
41013: LD_INT 0
41015: PPUSH
// if not building then
41016: LD_VAR 0 1
41020: NOT
41021: IFFALSE 41025
// exit ;
41023: GO 41068
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41025: LD_ADDR_VAR 0 2
41029: PUSH
41030: LD_VAR 0 1
41034: PUSH
41035: LD_INT 22
41037: PUSH
41038: LD_VAR 0 1
41042: PPUSH
41043: CALL_OW 255
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 58
41054: PUSH
41055: EMPTY
41056: LIST
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PPUSH
41062: CALL_OW 69
41066: IN
41067: ST_TO_ADDR
// end ;
41068: LD_VAR 0 2
41072: RET
// export function IsNotFull ( building ) ; var places ; begin
41073: LD_INT 0
41075: PPUSH
41076: PPUSH
// if not building then
41077: LD_VAR 0 1
41081: NOT
41082: IFFALSE 41086
// exit ;
41084: GO 41257
// result := false ;
41086: LD_ADDR_VAR 0 2
41090: PUSH
41091: LD_INT 0
41093: ST_TO_ADDR
// places := 0 ;
41094: LD_ADDR_VAR 0 3
41098: PUSH
41099: LD_INT 0
41101: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41102: LD_VAR 0 1
41106: PPUSH
41107: CALL_OW 266
41111: PUSH
41112: LD_INT 0
41114: DOUBLE
41115: EQUAL
41116: IFTRUE 41174
41118: LD_INT 1
41120: DOUBLE
41121: EQUAL
41122: IFTRUE 41174
41124: LD_INT 6
41126: DOUBLE
41127: EQUAL
41128: IFTRUE 41174
41130: LD_INT 7
41132: DOUBLE
41133: EQUAL
41134: IFTRUE 41174
41136: LD_INT 8
41138: DOUBLE
41139: EQUAL
41140: IFTRUE 41174
41142: LD_INT 4
41144: DOUBLE
41145: EQUAL
41146: IFTRUE 41174
41148: LD_INT 5
41150: DOUBLE
41151: EQUAL
41152: IFTRUE 41174
41154: LD_INT 2
41156: DOUBLE
41157: EQUAL
41158: IFTRUE 41174
41160: LD_INT 3
41162: DOUBLE
41163: EQUAL
41164: IFTRUE 41174
41166: LD_INT 35
41168: DOUBLE
41169: EQUAL
41170: IFTRUE 41174
41172: GO 41185
41174: POP
// places := 6 ; b_bunker , b_breastwork :
41175: LD_ADDR_VAR 0 3
41179: PUSH
41180: LD_INT 6
41182: ST_TO_ADDR
41183: GO 41230
41185: LD_INT 32
41187: DOUBLE
41188: EQUAL
41189: IFTRUE 41199
41191: LD_INT 31
41193: DOUBLE
41194: EQUAL
41195: IFTRUE 41199
41197: GO 41210
41199: POP
// places := 1 ; b_control_tower :
41200: LD_ADDR_VAR 0 3
41204: PUSH
41205: LD_INT 1
41207: ST_TO_ADDR
41208: GO 41230
41210: LD_INT 36
41212: DOUBLE
41213: EQUAL
41214: IFTRUE 41218
41216: GO 41229
41218: POP
// places := 3 ; end ;
41219: LD_ADDR_VAR 0 3
41223: PUSH
41224: LD_INT 3
41226: ST_TO_ADDR
41227: GO 41230
41229: POP
// if places then
41230: LD_VAR 0 3
41234: IFFALSE 41257
// result := UnitsInside ( building ) < places ;
41236: LD_ADDR_VAR 0 2
41240: PUSH
41241: LD_VAR 0 1
41245: PPUSH
41246: CALL_OW 313
41250: PUSH
41251: LD_VAR 0 3
41255: LESS
41256: ST_TO_ADDR
// end ;
41257: LD_VAR 0 2
41261: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
// tmp := [ ] ;
41268: LD_ADDR_VAR 0 3
41272: PUSH
41273: EMPTY
41274: ST_TO_ADDR
// list := [ ] ;
41275: LD_ADDR_VAR 0 5
41279: PUSH
41280: EMPTY
41281: ST_TO_ADDR
// for i = 16 to 25 do
41282: LD_ADDR_VAR 0 4
41286: PUSH
41287: DOUBLE
41288: LD_INT 16
41290: DEC
41291: ST_TO_ADDR
41292: LD_INT 25
41294: PUSH
41295: FOR_TO
41296: IFFALSE 41369
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41298: LD_ADDR_VAR 0 3
41302: PUSH
41303: LD_VAR 0 3
41307: PUSH
41308: LD_INT 22
41310: PUSH
41311: LD_VAR 0 1
41315: PPUSH
41316: CALL_OW 255
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 91
41327: PUSH
41328: LD_VAR 0 1
41332: PUSH
41333: LD_INT 6
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 30
41343: PUSH
41344: LD_VAR 0 4
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: PUSH
41358: EMPTY
41359: LIST
41360: PPUSH
41361: CALL_OW 69
41365: ADD
41366: ST_TO_ADDR
41367: GO 41295
41369: POP
41370: POP
// for i = 1 to tmp do
41371: LD_ADDR_VAR 0 4
41375: PUSH
41376: DOUBLE
41377: LD_INT 1
41379: DEC
41380: ST_TO_ADDR
41381: LD_VAR 0 3
41385: PUSH
41386: FOR_TO
41387: IFFALSE 41475
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41389: LD_ADDR_VAR 0 5
41393: PUSH
41394: LD_VAR 0 5
41398: PUSH
41399: LD_VAR 0 3
41403: PUSH
41404: LD_VAR 0 4
41408: ARRAY
41409: PPUSH
41410: CALL_OW 266
41414: PUSH
41415: LD_VAR 0 3
41419: PUSH
41420: LD_VAR 0 4
41424: ARRAY
41425: PPUSH
41426: CALL_OW 250
41430: PUSH
41431: LD_VAR 0 3
41435: PUSH
41436: LD_VAR 0 4
41440: ARRAY
41441: PPUSH
41442: CALL_OW 251
41446: PUSH
41447: LD_VAR 0 3
41451: PUSH
41452: LD_VAR 0 4
41456: ARRAY
41457: PPUSH
41458: CALL_OW 254
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: PUSH
41469: EMPTY
41470: LIST
41471: ADD
41472: ST_TO_ADDR
41473: GO 41386
41475: POP
41476: POP
// result := list ;
41477: LD_ADDR_VAR 0 2
41481: PUSH
41482: LD_VAR 0 5
41486: ST_TO_ADDR
// end ;
41487: LD_VAR 0 2
41491: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41492: LD_INT 0
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
// if not factory then
41501: LD_VAR 0 1
41505: NOT
41506: IFFALSE 41510
// exit ;
41508: GO 42103
// if control = control_apeman then
41510: LD_VAR 0 4
41514: PUSH
41515: LD_INT 5
41517: EQUAL
41518: IFFALSE 41627
// begin tmp := UnitsInside ( factory ) ;
41520: LD_ADDR_VAR 0 8
41524: PUSH
41525: LD_VAR 0 1
41529: PPUSH
41530: CALL_OW 313
41534: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41535: LD_VAR 0 8
41539: PPUSH
41540: LD_INT 25
41542: PUSH
41543: LD_INT 12
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PPUSH
41550: CALL_OW 72
41554: NOT
41555: IFFALSE 41565
// control := control_manual ;
41557: LD_ADDR_VAR 0 4
41561: PUSH
41562: LD_INT 1
41564: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41565: LD_ADDR_VAR 0 8
41569: PUSH
41570: LD_VAR 0 1
41574: PPUSH
41575: CALL 41262 0 1
41579: ST_TO_ADDR
// if tmp then
41580: LD_VAR 0 8
41584: IFFALSE 41627
// begin for i in tmp do
41586: LD_ADDR_VAR 0 7
41590: PUSH
41591: LD_VAR 0 8
41595: PUSH
41596: FOR_IN
41597: IFFALSE 41625
// if i [ 1 ] = b_ext_radio then
41599: LD_VAR 0 7
41603: PUSH
41604: LD_INT 1
41606: ARRAY
41607: PUSH
41608: LD_INT 22
41610: EQUAL
41611: IFFALSE 41623
// begin control := control_remote ;
41613: LD_ADDR_VAR 0 4
41617: PUSH
41618: LD_INT 2
41620: ST_TO_ADDR
// break ;
41621: GO 41625
// end ;
41623: GO 41596
41625: POP
41626: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41627: LD_VAR 0 1
41631: PPUSH
41632: LD_VAR 0 2
41636: PPUSH
41637: LD_VAR 0 3
41641: PPUSH
41642: LD_VAR 0 4
41646: PPUSH
41647: LD_VAR 0 5
41651: PPUSH
41652: CALL_OW 448
41656: IFFALSE 41691
// begin result := [ chassis , engine , control , weapon ] ;
41658: LD_ADDR_VAR 0 6
41662: PUSH
41663: LD_VAR 0 2
41667: PUSH
41668: LD_VAR 0 3
41672: PUSH
41673: LD_VAR 0 4
41677: PUSH
41678: LD_VAR 0 5
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: ST_TO_ADDR
// exit ;
41689: GO 42103
// end ; _chassis := AvailableChassisList ( factory ) ;
41691: LD_ADDR_VAR 0 9
41695: PUSH
41696: LD_VAR 0 1
41700: PPUSH
41701: CALL_OW 475
41705: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41706: LD_ADDR_VAR 0 11
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: CALL_OW 476
41720: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41721: LD_ADDR_VAR 0 12
41725: PUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 477
41735: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41736: LD_ADDR_VAR 0 10
41740: PUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: CALL_OW 478
41750: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41751: LD_VAR 0 9
41755: NOT
41756: PUSH
41757: LD_VAR 0 11
41761: NOT
41762: OR
41763: PUSH
41764: LD_VAR 0 12
41768: NOT
41769: OR
41770: PUSH
41771: LD_VAR 0 10
41775: NOT
41776: OR
41777: IFFALSE 41812
// begin result := [ chassis , engine , control , weapon ] ;
41779: LD_ADDR_VAR 0 6
41783: PUSH
41784: LD_VAR 0 2
41788: PUSH
41789: LD_VAR 0 3
41793: PUSH
41794: LD_VAR 0 4
41798: PUSH
41799: LD_VAR 0 5
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: ST_TO_ADDR
// exit ;
41810: GO 42103
// end ; if not chassis in _chassis then
41812: LD_VAR 0 2
41816: PUSH
41817: LD_VAR 0 9
41821: IN
41822: NOT
41823: IFFALSE 41849
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41825: LD_ADDR_VAR 0 2
41829: PUSH
41830: LD_VAR 0 9
41834: PUSH
41835: LD_INT 1
41837: PPUSH
41838: LD_VAR 0 9
41842: PPUSH
41843: CALL_OW 12
41847: ARRAY
41848: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41849: LD_VAR 0 2
41853: PPUSH
41854: LD_VAR 0 3
41858: PPUSH
41859: CALL 42108 0 2
41863: NOT
41864: IFFALSE 41923
// repeat engine := _engine [ 1 ] ;
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_VAR 0 11
41875: PUSH
41876: LD_INT 1
41878: ARRAY
41879: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41880: LD_ADDR_VAR 0 11
41884: PUSH
41885: LD_VAR 0 11
41889: PPUSH
41890: LD_INT 1
41892: PPUSH
41893: CALL_OW 3
41897: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41898: LD_VAR 0 2
41902: PPUSH
41903: LD_VAR 0 3
41907: PPUSH
41908: CALL 42108 0 2
41912: PUSH
41913: LD_VAR 0 11
41917: PUSH
41918: EMPTY
41919: EQUAL
41920: OR
41921: IFFALSE 41866
// if not control in _control then
41923: LD_VAR 0 4
41927: PUSH
41928: LD_VAR 0 12
41932: IN
41933: NOT
41934: IFFALSE 41960
// control := _control [ rand ( 1 , _control ) ] ;
41936: LD_ADDR_VAR 0 4
41940: PUSH
41941: LD_VAR 0 12
41945: PUSH
41946: LD_INT 1
41948: PPUSH
41949: LD_VAR 0 12
41953: PPUSH
41954: CALL_OW 12
41958: ARRAY
41959: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41960: LD_VAR 0 2
41964: PPUSH
41965: LD_VAR 0 5
41969: PPUSH
41970: CALL 42328 0 2
41974: NOT
41975: IFFALSE 42034
// repeat weapon := _weapon [ 1 ] ;
41977: LD_ADDR_VAR 0 5
41981: PUSH
41982: LD_VAR 0 10
41986: PUSH
41987: LD_INT 1
41989: ARRAY
41990: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41991: LD_ADDR_VAR 0 10
41995: PUSH
41996: LD_VAR 0 10
42000: PPUSH
42001: LD_INT 1
42003: PPUSH
42004: CALL_OW 3
42008: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42009: LD_VAR 0 2
42013: PPUSH
42014: LD_VAR 0 5
42018: PPUSH
42019: CALL 42328 0 2
42023: PUSH
42024: LD_VAR 0 10
42028: PUSH
42029: EMPTY
42030: EQUAL
42031: OR
42032: IFFALSE 41977
// result := [ ] ;
42034: LD_ADDR_VAR 0 6
42038: PUSH
42039: EMPTY
42040: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42041: LD_VAR 0 1
42045: PPUSH
42046: LD_VAR 0 2
42050: PPUSH
42051: LD_VAR 0 3
42055: PPUSH
42056: LD_VAR 0 4
42060: PPUSH
42061: LD_VAR 0 5
42065: PPUSH
42066: CALL_OW 448
42070: IFFALSE 42103
// result := [ chassis , engine , control , weapon ] ;
42072: LD_ADDR_VAR 0 6
42076: PUSH
42077: LD_VAR 0 2
42081: PUSH
42082: LD_VAR 0 3
42086: PUSH
42087: LD_VAR 0 4
42091: PUSH
42092: LD_VAR 0 5
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// end ;
42103: LD_VAR 0 6
42107: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42108: LD_INT 0
42110: PPUSH
// if not chassis or not engine then
42111: LD_VAR 0 1
42115: NOT
42116: PUSH
42117: LD_VAR 0 2
42121: NOT
42122: OR
42123: IFFALSE 42127
// exit ;
42125: GO 42323
// case engine of engine_solar :
42127: LD_VAR 0 2
42131: PUSH
42132: LD_INT 2
42134: DOUBLE
42135: EQUAL
42136: IFTRUE 42140
42138: GO 42178
42140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42141: LD_ADDR_VAR 0 3
42145: PUSH
42146: LD_INT 11
42148: PUSH
42149: LD_INT 12
42151: PUSH
42152: LD_INT 13
42154: PUSH
42155: LD_INT 14
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: ST_TO_ADDR
42176: GO 42307
42178: LD_INT 1
42180: DOUBLE
42181: EQUAL
42182: IFTRUE 42186
42184: GO 42248
42186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42187: LD_ADDR_VAR 0 3
42191: PUSH
42192: LD_INT 11
42194: PUSH
42195: LD_INT 12
42197: PUSH
42198: LD_INT 13
42200: PUSH
42201: LD_INT 14
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: LD_INT 4
42215: PUSH
42216: LD_INT 5
42218: PUSH
42219: LD_INT 21
42221: PUSH
42222: LD_INT 23
42224: PUSH
42225: LD_INT 22
42227: PUSH
42228: LD_INT 24
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: ST_TO_ADDR
42246: GO 42307
42248: LD_INT 3
42250: DOUBLE
42251: EQUAL
42252: IFTRUE 42256
42254: GO 42306
42256: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_INT 13
42264: PUSH
42265: LD_INT 14
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 3
42273: PUSH
42274: LD_INT 4
42276: PUSH
42277: LD_INT 5
42279: PUSH
42280: LD_INT 21
42282: PUSH
42283: LD_INT 22
42285: PUSH
42286: LD_INT 23
42288: PUSH
42289: LD_INT 24
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
42304: GO 42307
42306: POP
// result := ( chassis in result ) ;
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: LD_VAR 0 1
42316: PUSH
42317: LD_VAR 0 3
42321: IN
42322: ST_TO_ADDR
// end ;
42323: LD_VAR 0 3
42327: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42328: LD_INT 0
42330: PPUSH
// if not chassis or not weapon then
42331: LD_VAR 0 1
42335: NOT
42336: PUSH
42337: LD_VAR 0 2
42341: NOT
42342: OR
42343: IFFALSE 42347
// exit ;
42345: GO 43407
// case weapon of us_machine_gun :
42347: LD_VAR 0 2
42351: PUSH
42352: LD_INT 2
42354: DOUBLE
42355: EQUAL
42356: IFTRUE 42360
42358: GO 42390
42360: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42361: LD_ADDR_VAR 0 3
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: LD_INT 3
42374: PUSH
42375: LD_INT 4
42377: PUSH
42378: LD_INT 5
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
42388: GO 43391
42390: LD_INT 3
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42398
42396: GO 42428
42398: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 3
42412: PUSH
42413: LD_INT 4
42415: PUSH
42416: LD_INT 5
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: ST_TO_ADDR
42426: GO 43391
42428: LD_INT 11
42430: DOUBLE
42431: EQUAL
42432: IFTRUE 42436
42434: GO 42466
42436: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42437: LD_ADDR_VAR 0 3
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: LD_INT 3
42450: PUSH
42451: LD_INT 4
42453: PUSH
42454: LD_INT 5
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: ST_TO_ADDR
42464: GO 43391
42466: LD_INT 4
42468: DOUBLE
42469: EQUAL
42470: IFTRUE 42474
42472: GO 42500
42474: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42475: LD_ADDR_VAR 0 3
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 3
42485: PUSH
42486: LD_INT 4
42488: PUSH
42489: LD_INT 5
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: ST_TO_ADDR
42498: GO 43391
42500: LD_INT 5
42502: DOUBLE
42503: EQUAL
42504: IFTRUE 42508
42506: GO 42534
42508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: LD_INT 4
42522: PUSH
42523: LD_INT 5
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
42532: GO 43391
42534: LD_INT 9
42536: DOUBLE
42537: EQUAL
42538: IFTRUE 42542
42540: GO 42568
42542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: LD_INT 3
42553: PUSH
42554: LD_INT 4
42556: PUSH
42557: LD_INT 5
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
42566: GO 43391
42568: LD_INT 7
42570: DOUBLE
42571: EQUAL
42572: IFTRUE 42576
42574: GO 42602
42576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42577: LD_ADDR_VAR 0 3
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: LD_INT 3
42587: PUSH
42588: LD_INT 4
42590: PUSH
42591: LD_INT 5
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: ST_TO_ADDR
42600: GO 43391
42602: LD_INT 12
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42636
42610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 3
42621: PUSH
42622: LD_INT 4
42624: PUSH
42625: LD_INT 5
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: ST_TO_ADDR
42634: GO 43391
42636: LD_INT 13
42638: DOUBLE
42639: EQUAL
42640: IFTRUE 42644
42642: GO 42670
42644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42645: LD_ADDR_VAR 0 3
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 4
42658: PUSH
42659: LD_INT 5
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
42668: GO 43391
42670: LD_INT 14
42672: DOUBLE
42673: EQUAL
42674: IFTRUE 42678
42676: GO 42696
42678: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_INT 4
42686: PUSH
42687: LD_INT 5
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: ST_TO_ADDR
42694: GO 43391
42696: LD_INT 6
42698: DOUBLE
42699: EQUAL
42700: IFTRUE 42704
42702: GO 42722
42704: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42705: LD_ADDR_VAR 0 3
42709: PUSH
42710: LD_INT 4
42712: PUSH
42713: LD_INT 5
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: ST_TO_ADDR
42720: GO 43391
42722: LD_INT 10
42724: DOUBLE
42725: EQUAL
42726: IFTRUE 42730
42728: GO 42748
42730: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42731: LD_ADDR_VAR 0 3
42735: PUSH
42736: LD_INT 4
42738: PUSH
42739: LD_INT 5
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: ST_TO_ADDR
42746: GO 43391
42748: LD_INT 22
42750: DOUBLE
42751: EQUAL
42752: IFTRUE 42756
42754: GO 42782
42756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42757: LD_ADDR_VAR 0 3
42761: PUSH
42762: LD_INT 11
42764: PUSH
42765: LD_INT 12
42767: PUSH
42768: LD_INT 13
42770: PUSH
42771: LD_INT 14
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: ST_TO_ADDR
42780: GO 43391
42782: LD_INT 23
42784: DOUBLE
42785: EQUAL
42786: IFTRUE 42790
42788: GO 42816
42790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42791: LD_ADDR_VAR 0 3
42795: PUSH
42796: LD_INT 11
42798: PUSH
42799: LD_INT 12
42801: PUSH
42802: LD_INT 13
42804: PUSH
42805: LD_INT 14
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: ST_TO_ADDR
42814: GO 43391
42816: LD_INT 24
42818: DOUBLE
42819: EQUAL
42820: IFTRUE 42824
42822: GO 42850
42824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42825: LD_ADDR_VAR 0 3
42829: PUSH
42830: LD_INT 11
42832: PUSH
42833: LD_INT 12
42835: PUSH
42836: LD_INT 13
42838: PUSH
42839: LD_INT 14
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: ST_TO_ADDR
42848: GO 43391
42850: LD_INT 30
42852: DOUBLE
42853: EQUAL
42854: IFTRUE 42858
42856: GO 42884
42858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42859: LD_ADDR_VAR 0 3
42863: PUSH
42864: LD_INT 11
42866: PUSH
42867: LD_INT 12
42869: PUSH
42870: LD_INT 13
42872: PUSH
42873: LD_INT 14
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
42882: GO 43391
42884: LD_INT 25
42886: DOUBLE
42887: EQUAL
42888: IFTRUE 42892
42890: GO 42910
42892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42893: LD_ADDR_VAR 0 3
42897: PUSH
42898: LD_INT 13
42900: PUSH
42901: LD_INT 14
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: ST_TO_ADDR
42908: GO 43391
42910: LD_INT 27
42912: DOUBLE
42913: EQUAL
42914: IFTRUE 42918
42916: GO 42936
42918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42919: LD_ADDR_VAR 0 3
42923: PUSH
42924: LD_INT 13
42926: PUSH
42927: LD_INT 14
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: ST_TO_ADDR
42934: GO 43391
42936: LD_INT 92
42938: DOUBLE
42939: EQUAL
42940: IFTRUE 42944
42942: GO 42970
42944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42945: LD_ADDR_VAR 0 3
42949: PUSH
42950: LD_INT 11
42952: PUSH
42953: LD_INT 12
42955: PUSH
42956: LD_INT 13
42958: PUSH
42959: LD_INT 14
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
42968: GO 43391
42970: LD_INT 28
42972: DOUBLE
42973: EQUAL
42974: IFTRUE 42978
42976: GO 42996
42978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42979: LD_ADDR_VAR 0 3
42983: PUSH
42984: LD_INT 13
42986: PUSH
42987: LD_INT 14
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: ST_TO_ADDR
42994: GO 43391
42996: LD_INT 29
42998: DOUBLE
42999: EQUAL
43000: IFTRUE 43004
43002: GO 43022
43004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43005: LD_ADDR_VAR 0 3
43009: PUSH
43010: LD_INT 13
43012: PUSH
43013: LD_INT 14
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: ST_TO_ADDR
43020: GO 43391
43022: LD_INT 31
43024: DOUBLE
43025: EQUAL
43026: IFTRUE 43030
43028: GO 43048
43030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43031: LD_ADDR_VAR 0 3
43035: PUSH
43036: LD_INT 13
43038: PUSH
43039: LD_INT 14
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: ST_TO_ADDR
43046: GO 43391
43048: LD_INT 26
43050: DOUBLE
43051: EQUAL
43052: IFTRUE 43056
43054: GO 43074
43056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43057: LD_ADDR_VAR 0 3
43061: PUSH
43062: LD_INT 13
43064: PUSH
43065: LD_INT 14
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: ST_TO_ADDR
43072: GO 43391
43074: LD_INT 42
43076: DOUBLE
43077: EQUAL
43078: IFTRUE 43082
43080: GO 43108
43082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43083: LD_ADDR_VAR 0 3
43087: PUSH
43088: LD_INT 21
43090: PUSH
43091: LD_INT 22
43093: PUSH
43094: LD_INT 23
43096: PUSH
43097: LD_INT 24
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: ST_TO_ADDR
43106: GO 43391
43108: LD_INT 43
43110: DOUBLE
43111: EQUAL
43112: IFTRUE 43116
43114: GO 43142
43116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43117: LD_ADDR_VAR 0 3
43121: PUSH
43122: LD_INT 21
43124: PUSH
43125: LD_INT 22
43127: PUSH
43128: LD_INT 23
43130: PUSH
43131: LD_INT 24
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: ST_TO_ADDR
43140: GO 43391
43142: LD_INT 44
43144: DOUBLE
43145: EQUAL
43146: IFTRUE 43150
43148: GO 43176
43150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43151: LD_ADDR_VAR 0 3
43155: PUSH
43156: LD_INT 21
43158: PUSH
43159: LD_INT 22
43161: PUSH
43162: LD_INT 23
43164: PUSH
43165: LD_INT 24
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
43174: GO 43391
43176: LD_INT 45
43178: DOUBLE
43179: EQUAL
43180: IFTRUE 43184
43182: GO 43210
43184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43185: LD_ADDR_VAR 0 3
43189: PUSH
43190: LD_INT 21
43192: PUSH
43193: LD_INT 22
43195: PUSH
43196: LD_INT 23
43198: PUSH
43199: LD_INT 24
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: ST_TO_ADDR
43208: GO 43391
43210: LD_INT 49
43212: DOUBLE
43213: EQUAL
43214: IFTRUE 43218
43216: GO 43244
43218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43219: LD_ADDR_VAR 0 3
43223: PUSH
43224: LD_INT 21
43226: PUSH
43227: LD_INT 22
43229: PUSH
43230: LD_INT 23
43232: PUSH
43233: LD_INT 24
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: ST_TO_ADDR
43242: GO 43391
43244: LD_INT 51
43246: DOUBLE
43247: EQUAL
43248: IFTRUE 43252
43250: GO 43278
43252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43253: LD_ADDR_VAR 0 3
43257: PUSH
43258: LD_INT 21
43260: PUSH
43261: LD_INT 22
43263: PUSH
43264: LD_INT 23
43266: PUSH
43267: LD_INT 24
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: ST_TO_ADDR
43276: GO 43391
43278: LD_INT 52
43280: DOUBLE
43281: EQUAL
43282: IFTRUE 43286
43284: GO 43312
43286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43287: LD_ADDR_VAR 0 3
43291: PUSH
43292: LD_INT 21
43294: PUSH
43295: LD_INT 22
43297: PUSH
43298: LD_INT 23
43300: PUSH
43301: LD_INT 24
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: ST_TO_ADDR
43310: GO 43391
43312: LD_INT 53
43314: DOUBLE
43315: EQUAL
43316: IFTRUE 43320
43318: GO 43338
43320: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43321: LD_ADDR_VAR 0 3
43325: PUSH
43326: LD_INT 23
43328: PUSH
43329: LD_INT 24
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: ST_TO_ADDR
43336: GO 43391
43338: LD_INT 46
43340: DOUBLE
43341: EQUAL
43342: IFTRUE 43346
43344: GO 43364
43346: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43347: LD_ADDR_VAR 0 3
43351: PUSH
43352: LD_INT 23
43354: PUSH
43355: LD_INT 24
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: ST_TO_ADDR
43362: GO 43391
43364: LD_INT 47
43366: DOUBLE
43367: EQUAL
43368: IFTRUE 43372
43370: GO 43390
43372: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43373: LD_ADDR_VAR 0 3
43377: PUSH
43378: LD_INT 23
43380: PUSH
43381: LD_INT 24
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: ST_TO_ADDR
43388: GO 43391
43390: POP
// result := ( chassis in result ) ;
43391: LD_ADDR_VAR 0 3
43395: PUSH
43396: LD_VAR 0 1
43400: PUSH
43401: LD_VAR 0 3
43405: IN
43406: ST_TO_ADDR
// end ;
43407: LD_VAR 0 3
43411: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43412: LD_INT 0
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
43420: PPUSH
// result := array ;
43421: LD_ADDR_VAR 0 5
43425: PUSH
43426: LD_VAR 0 1
43430: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43431: LD_VAR 0 1
43435: NOT
43436: PUSH
43437: LD_VAR 0 2
43441: NOT
43442: OR
43443: PUSH
43444: LD_VAR 0 3
43448: NOT
43449: OR
43450: PUSH
43451: LD_VAR 0 2
43455: PUSH
43456: LD_VAR 0 1
43460: GREATER
43461: OR
43462: PUSH
43463: LD_VAR 0 3
43467: PUSH
43468: LD_VAR 0 1
43472: GREATER
43473: OR
43474: IFFALSE 43478
// exit ;
43476: GO 43774
// if direction then
43478: LD_VAR 0 4
43482: IFFALSE 43546
// begin d := 1 ;
43484: LD_ADDR_VAR 0 9
43488: PUSH
43489: LD_INT 1
43491: ST_TO_ADDR
// if i_from > i_to then
43492: LD_VAR 0 2
43496: PUSH
43497: LD_VAR 0 3
43501: GREATER
43502: IFFALSE 43528
// length := ( array - i_from ) + i_to else
43504: LD_ADDR_VAR 0 11
43508: PUSH
43509: LD_VAR 0 1
43513: PUSH
43514: LD_VAR 0 2
43518: MINUS
43519: PUSH
43520: LD_VAR 0 3
43524: PLUS
43525: ST_TO_ADDR
43526: GO 43544
// length := i_to - i_from ;
43528: LD_ADDR_VAR 0 11
43532: PUSH
43533: LD_VAR 0 3
43537: PUSH
43538: LD_VAR 0 2
43542: MINUS
43543: ST_TO_ADDR
// end else
43544: GO 43607
// begin d := - 1 ;
43546: LD_ADDR_VAR 0 9
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: ST_TO_ADDR
// if i_from > i_to then
43555: LD_VAR 0 2
43559: PUSH
43560: LD_VAR 0 3
43564: GREATER
43565: IFFALSE 43585
// length := i_from - i_to else
43567: LD_ADDR_VAR 0 11
43571: PUSH
43572: LD_VAR 0 2
43576: PUSH
43577: LD_VAR 0 3
43581: MINUS
43582: ST_TO_ADDR
43583: GO 43607
// length := ( array - i_to ) + i_from ;
43585: LD_ADDR_VAR 0 11
43589: PUSH
43590: LD_VAR 0 1
43594: PUSH
43595: LD_VAR 0 3
43599: MINUS
43600: PUSH
43601: LD_VAR 0 2
43605: PLUS
43606: ST_TO_ADDR
// end ; if not length then
43607: LD_VAR 0 11
43611: NOT
43612: IFFALSE 43616
// exit ;
43614: GO 43774
// tmp := array ;
43616: LD_ADDR_VAR 0 10
43620: PUSH
43621: LD_VAR 0 1
43625: ST_TO_ADDR
// for i = 1 to length do
43626: LD_ADDR_VAR 0 6
43630: PUSH
43631: DOUBLE
43632: LD_INT 1
43634: DEC
43635: ST_TO_ADDR
43636: LD_VAR 0 11
43640: PUSH
43641: FOR_TO
43642: IFFALSE 43762
// begin for j = 1 to array do
43644: LD_ADDR_VAR 0 7
43648: PUSH
43649: DOUBLE
43650: LD_INT 1
43652: DEC
43653: ST_TO_ADDR
43654: LD_VAR 0 1
43658: PUSH
43659: FOR_TO
43660: IFFALSE 43748
// begin k := j + d ;
43662: LD_ADDR_VAR 0 8
43666: PUSH
43667: LD_VAR 0 7
43671: PUSH
43672: LD_VAR 0 9
43676: PLUS
43677: ST_TO_ADDR
// if k > array then
43678: LD_VAR 0 8
43682: PUSH
43683: LD_VAR 0 1
43687: GREATER
43688: IFFALSE 43698
// k := 1 ;
43690: LD_ADDR_VAR 0 8
43694: PUSH
43695: LD_INT 1
43697: ST_TO_ADDR
// if not k then
43698: LD_VAR 0 8
43702: NOT
43703: IFFALSE 43715
// k := array ;
43705: LD_ADDR_VAR 0 8
43709: PUSH
43710: LD_VAR 0 1
43714: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43715: LD_ADDR_VAR 0 10
43719: PUSH
43720: LD_VAR 0 10
43724: PPUSH
43725: LD_VAR 0 8
43729: PPUSH
43730: LD_VAR 0 1
43734: PUSH
43735: LD_VAR 0 7
43739: ARRAY
43740: PPUSH
43741: CALL_OW 1
43745: ST_TO_ADDR
// end ;
43746: GO 43659
43748: POP
43749: POP
// array := tmp ;
43750: LD_ADDR_VAR 0 1
43754: PUSH
43755: LD_VAR 0 10
43759: ST_TO_ADDR
// end ;
43760: GO 43641
43762: POP
43763: POP
// result := array ;
43764: LD_ADDR_VAR 0 5
43768: PUSH
43769: LD_VAR 0 1
43773: ST_TO_ADDR
// end ;
43774: LD_VAR 0 5
43778: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43779: LD_INT 0
43781: PPUSH
43782: PPUSH
// result := 0 ;
43783: LD_ADDR_VAR 0 3
43787: PUSH
43788: LD_INT 0
43790: ST_TO_ADDR
// if not array or not value in array then
43791: LD_VAR 0 1
43795: NOT
43796: PUSH
43797: LD_VAR 0 2
43801: PUSH
43802: LD_VAR 0 1
43806: IN
43807: NOT
43808: OR
43809: IFFALSE 43813
// exit ;
43811: GO 43867
// for i = 1 to array do
43813: LD_ADDR_VAR 0 4
43817: PUSH
43818: DOUBLE
43819: LD_INT 1
43821: DEC
43822: ST_TO_ADDR
43823: LD_VAR 0 1
43827: PUSH
43828: FOR_TO
43829: IFFALSE 43865
// if value = array [ i ] then
43831: LD_VAR 0 2
43835: PUSH
43836: LD_VAR 0 1
43840: PUSH
43841: LD_VAR 0 4
43845: ARRAY
43846: EQUAL
43847: IFFALSE 43863
// begin result := i ;
43849: LD_ADDR_VAR 0 3
43853: PUSH
43854: LD_VAR 0 4
43858: ST_TO_ADDR
// exit ;
43859: POP
43860: POP
43861: GO 43867
// end ;
43863: GO 43828
43865: POP
43866: POP
// end ;
43867: LD_VAR 0 3
43871: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43872: LD_INT 0
43874: PPUSH
// vc_chassis := chassis ;
43875: LD_ADDR_OWVAR 37
43879: PUSH
43880: LD_VAR 0 1
43884: ST_TO_ADDR
// vc_engine := engine ;
43885: LD_ADDR_OWVAR 39
43889: PUSH
43890: LD_VAR 0 2
43894: ST_TO_ADDR
// vc_control := control ;
43895: LD_ADDR_OWVAR 38
43899: PUSH
43900: LD_VAR 0 3
43904: ST_TO_ADDR
// vc_weapon := weapon ;
43905: LD_ADDR_OWVAR 40
43909: PUSH
43910: LD_VAR 0 4
43914: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43915: LD_ADDR_OWVAR 41
43919: PUSH
43920: LD_VAR 0 5
43924: ST_TO_ADDR
// end ;
43925: LD_VAR 0 6
43929: RET
// export function WantPlant ( unit ) ; var task ; begin
43930: LD_INT 0
43932: PPUSH
43933: PPUSH
// result := false ;
43934: LD_ADDR_VAR 0 2
43938: PUSH
43939: LD_INT 0
43941: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43942: LD_ADDR_VAR 0 3
43946: PUSH
43947: LD_VAR 0 1
43951: PPUSH
43952: CALL_OW 437
43956: ST_TO_ADDR
// if task then
43957: LD_VAR 0 3
43961: IFFALSE 43989
// if task [ 1 ] [ 1 ] = p then
43963: LD_VAR 0 3
43967: PUSH
43968: LD_INT 1
43970: ARRAY
43971: PUSH
43972: LD_INT 1
43974: ARRAY
43975: PUSH
43976: LD_STRING p
43978: EQUAL
43979: IFFALSE 43989
// result := true ;
43981: LD_ADDR_VAR 0 2
43985: PUSH
43986: LD_INT 1
43988: ST_TO_ADDR
// end ;
43989: LD_VAR 0 2
43993: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43994: LD_INT 0
43996: PPUSH
43997: PPUSH
43998: PPUSH
43999: PPUSH
// if pos < 1 then
44000: LD_VAR 0 2
44004: PUSH
44005: LD_INT 1
44007: LESS
44008: IFFALSE 44012
// exit ;
44010: GO 44315
// if pos = 1 then
44012: LD_VAR 0 2
44016: PUSH
44017: LD_INT 1
44019: EQUAL
44020: IFFALSE 44053
// result := Replace ( arr , pos [ 1 ] , value ) else
44022: LD_ADDR_VAR 0 4
44026: PUSH
44027: LD_VAR 0 1
44031: PPUSH
44032: LD_VAR 0 2
44036: PUSH
44037: LD_INT 1
44039: ARRAY
44040: PPUSH
44041: LD_VAR 0 3
44045: PPUSH
44046: CALL_OW 1
44050: ST_TO_ADDR
44051: GO 44315
// begin tmp := arr ;
44053: LD_ADDR_VAR 0 6
44057: PUSH
44058: LD_VAR 0 1
44062: ST_TO_ADDR
// s_arr := [ tmp ] ;
44063: LD_ADDR_VAR 0 7
44067: PUSH
44068: LD_VAR 0 6
44072: PUSH
44073: EMPTY
44074: LIST
44075: ST_TO_ADDR
// for i = 1 to pos - 1 do
44076: LD_ADDR_VAR 0 5
44080: PUSH
44081: DOUBLE
44082: LD_INT 1
44084: DEC
44085: ST_TO_ADDR
44086: LD_VAR 0 2
44090: PUSH
44091: LD_INT 1
44093: MINUS
44094: PUSH
44095: FOR_TO
44096: IFFALSE 44141
// begin tmp := tmp [ pos [ i ] ] ;
44098: LD_ADDR_VAR 0 6
44102: PUSH
44103: LD_VAR 0 6
44107: PUSH
44108: LD_VAR 0 2
44112: PUSH
44113: LD_VAR 0 5
44117: ARRAY
44118: ARRAY
44119: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44120: LD_ADDR_VAR 0 7
44124: PUSH
44125: LD_VAR 0 7
44129: PUSH
44130: LD_VAR 0 6
44134: PUSH
44135: EMPTY
44136: LIST
44137: ADD
44138: ST_TO_ADDR
// end ;
44139: GO 44095
44141: POP
44142: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44143: LD_ADDR_VAR 0 6
44147: PUSH
44148: LD_VAR 0 6
44152: PPUSH
44153: LD_VAR 0 2
44157: PUSH
44158: LD_VAR 0 2
44162: ARRAY
44163: PPUSH
44164: LD_VAR 0 3
44168: PPUSH
44169: CALL_OW 1
44173: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44174: LD_ADDR_VAR 0 7
44178: PUSH
44179: LD_VAR 0 7
44183: PPUSH
44184: LD_VAR 0 7
44188: PPUSH
44189: LD_VAR 0 6
44193: PPUSH
44194: CALL_OW 1
44198: ST_TO_ADDR
// for i = s_arr downto 2 do
44199: LD_ADDR_VAR 0 5
44203: PUSH
44204: DOUBLE
44205: LD_VAR 0 7
44209: INC
44210: ST_TO_ADDR
44211: LD_INT 2
44213: PUSH
44214: FOR_DOWNTO
44215: IFFALSE 44299
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44217: LD_ADDR_VAR 0 6
44221: PUSH
44222: LD_VAR 0 7
44226: PUSH
44227: LD_VAR 0 5
44231: PUSH
44232: LD_INT 1
44234: MINUS
44235: ARRAY
44236: PPUSH
44237: LD_VAR 0 2
44241: PUSH
44242: LD_VAR 0 5
44246: PUSH
44247: LD_INT 1
44249: MINUS
44250: ARRAY
44251: PPUSH
44252: LD_VAR 0 7
44256: PUSH
44257: LD_VAR 0 5
44261: ARRAY
44262: PPUSH
44263: CALL_OW 1
44267: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44268: LD_ADDR_VAR 0 7
44272: PUSH
44273: LD_VAR 0 7
44277: PPUSH
44278: LD_VAR 0 5
44282: PUSH
44283: LD_INT 1
44285: MINUS
44286: PPUSH
44287: LD_VAR 0 6
44291: PPUSH
44292: CALL_OW 1
44296: ST_TO_ADDR
// end ;
44297: GO 44214
44299: POP
44300: POP
// result := s_arr [ 1 ] ;
44301: LD_ADDR_VAR 0 4
44305: PUSH
44306: LD_VAR 0 7
44310: PUSH
44311: LD_INT 1
44313: ARRAY
44314: ST_TO_ADDR
// end ; end ;
44315: LD_VAR 0 4
44319: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44320: LD_INT 0
44322: PPUSH
44323: PPUSH
// if not list then
44324: LD_VAR 0 1
44328: NOT
44329: IFFALSE 44333
// exit ;
44331: GO 44424
// i := list [ pos1 ] ;
44333: LD_ADDR_VAR 0 5
44337: PUSH
44338: LD_VAR 0 1
44342: PUSH
44343: LD_VAR 0 2
44347: ARRAY
44348: ST_TO_ADDR
// if not i then
44349: LD_VAR 0 5
44353: NOT
44354: IFFALSE 44358
// exit ;
44356: GO 44424
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44358: LD_ADDR_VAR 0 1
44362: PUSH
44363: LD_VAR 0 1
44367: PPUSH
44368: LD_VAR 0 2
44372: PPUSH
44373: LD_VAR 0 1
44377: PUSH
44378: LD_VAR 0 3
44382: ARRAY
44383: PPUSH
44384: CALL_OW 1
44388: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44389: LD_ADDR_VAR 0 1
44393: PUSH
44394: LD_VAR 0 1
44398: PPUSH
44399: LD_VAR 0 3
44403: PPUSH
44404: LD_VAR 0 5
44408: PPUSH
44409: CALL_OW 1
44413: ST_TO_ADDR
// result := list ;
44414: LD_ADDR_VAR 0 4
44418: PUSH
44419: LD_VAR 0 1
44423: ST_TO_ADDR
// end ;
44424: LD_VAR 0 4
44428: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44429: LD_INT 0
44431: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44432: LD_ADDR_VAR 0 5
44436: PUSH
44437: LD_VAR 0 1
44441: PPUSH
44442: CALL_OW 250
44446: PPUSH
44447: LD_VAR 0 1
44451: PPUSH
44452: CALL_OW 251
44456: PPUSH
44457: LD_VAR 0 2
44461: PPUSH
44462: LD_VAR 0 3
44466: PPUSH
44467: LD_VAR 0 4
44471: PPUSH
44472: CALL 44482 0 5
44476: ST_TO_ADDR
// end ;
44477: LD_VAR 0 5
44481: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44482: LD_INT 0
44484: PPUSH
44485: PPUSH
44486: PPUSH
44487: PPUSH
// if not list then
44488: LD_VAR 0 3
44492: NOT
44493: IFFALSE 44497
// exit ;
44495: GO 44885
// result := [ ] ;
44497: LD_ADDR_VAR 0 6
44501: PUSH
44502: EMPTY
44503: ST_TO_ADDR
// for i in list do
44504: LD_ADDR_VAR 0 7
44508: PUSH
44509: LD_VAR 0 3
44513: PUSH
44514: FOR_IN
44515: IFFALSE 44717
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44517: LD_ADDR_VAR 0 9
44521: PUSH
44522: LD_VAR 0 7
44526: PPUSH
44527: LD_VAR 0 1
44531: PPUSH
44532: LD_VAR 0 2
44536: PPUSH
44537: CALL_OW 297
44541: ST_TO_ADDR
// if not result then
44542: LD_VAR 0 6
44546: NOT
44547: IFFALSE 44573
// result := [ [ i , tmp ] ] else
44549: LD_ADDR_VAR 0 6
44553: PUSH
44554: LD_VAR 0 7
44558: PUSH
44559: LD_VAR 0 9
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: EMPTY
44569: LIST
44570: ST_TO_ADDR
44571: GO 44715
// begin if result [ result ] [ 2 ] < tmp then
44573: LD_VAR 0 6
44577: PUSH
44578: LD_VAR 0 6
44582: ARRAY
44583: PUSH
44584: LD_INT 2
44586: ARRAY
44587: PUSH
44588: LD_VAR 0 9
44592: LESS
44593: IFFALSE 44635
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44595: LD_ADDR_VAR 0 6
44599: PUSH
44600: LD_VAR 0 6
44604: PPUSH
44605: LD_VAR 0 6
44609: PUSH
44610: LD_INT 1
44612: PLUS
44613: PPUSH
44614: LD_VAR 0 7
44618: PUSH
44619: LD_VAR 0 9
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PPUSH
44628: CALL_OW 2
44632: ST_TO_ADDR
44633: GO 44715
// for j = 1 to result do
44635: LD_ADDR_VAR 0 8
44639: PUSH
44640: DOUBLE
44641: LD_INT 1
44643: DEC
44644: ST_TO_ADDR
44645: LD_VAR 0 6
44649: PUSH
44650: FOR_TO
44651: IFFALSE 44713
// begin if tmp < result [ j ] [ 2 ] then
44653: LD_VAR 0 9
44657: PUSH
44658: LD_VAR 0 6
44662: PUSH
44663: LD_VAR 0 8
44667: ARRAY
44668: PUSH
44669: LD_INT 2
44671: ARRAY
44672: LESS
44673: IFFALSE 44711
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44675: LD_ADDR_VAR 0 6
44679: PUSH
44680: LD_VAR 0 6
44684: PPUSH
44685: LD_VAR 0 8
44689: PPUSH
44690: LD_VAR 0 7
44694: PUSH
44695: LD_VAR 0 9
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PPUSH
44704: CALL_OW 2
44708: ST_TO_ADDR
// break ;
44709: GO 44713
// end ; end ;
44711: GO 44650
44713: POP
44714: POP
// end ; end ;
44715: GO 44514
44717: POP
44718: POP
// if result and not asc then
44719: LD_VAR 0 6
44723: PUSH
44724: LD_VAR 0 4
44728: NOT
44729: AND
44730: IFFALSE 44805
// begin tmp := result ;
44732: LD_ADDR_VAR 0 9
44736: PUSH
44737: LD_VAR 0 6
44741: ST_TO_ADDR
// for i = tmp downto 1 do
44742: LD_ADDR_VAR 0 7
44746: PUSH
44747: DOUBLE
44748: LD_VAR 0 9
44752: INC
44753: ST_TO_ADDR
44754: LD_INT 1
44756: PUSH
44757: FOR_DOWNTO
44758: IFFALSE 44803
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44760: LD_ADDR_VAR 0 6
44764: PUSH
44765: LD_VAR 0 6
44769: PPUSH
44770: LD_VAR 0 9
44774: PUSH
44775: LD_VAR 0 7
44779: MINUS
44780: PUSH
44781: LD_INT 1
44783: PLUS
44784: PPUSH
44785: LD_VAR 0 9
44789: PUSH
44790: LD_VAR 0 7
44794: ARRAY
44795: PPUSH
44796: CALL_OW 1
44800: ST_TO_ADDR
44801: GO 44757
44803: POP
44804: POP
// end ; tmp := [ ] ;
44805: LD_ADDR_VAR 0 9
44809: PUSH
44810: EMPTY
44811: ST_TO_ADDR
// if mode then
44812: LD_VAR 0 5
44816: IFFALSE 44885
// begin for i = 1 to result do
44818: LD_ADDR_VAR 0 7
44822: PUSH
44823: DOUBLE
44824: LD_INT 1
44826: DEC
44827: ST_TO_ADDR
44828: LD_VAR 0 6
44832: PUSH
44833: FOR_TO
44834: IFFALSE 44873
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44836: LD_ADDR_VAR 0 9
44840: PUSH
44841: LD_VAR 0 9
44845: PPUSH
44846: LD_VAR 0 7
44850: PPUSH
44851: LD_VAR 0 6
44855: PUSH
44856: LD_VAR 0 7
44860: ARRAY
44861: PUSH
44862: LD_INT 1
44864: ARRAY
44865: PPUSH
44866: CALL_OW 1
44870: ST_TO_ADDR
44871: GO 44833
44873: POP
44874: POP
// result := tmp ;
44875: LD_ADDR_VAR 0 6
44879: PUSH
44880: LD_VAR 0 9
44884: ST_TO_ADDR
// end ; end ;
44885: LD_VAR 0 6
44889: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44890: LD_INT 0
44892: PPUSH
44893: PPUSH
44894: PPUSH
44895: PPUSH
44896: PPUSH
44897: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44898: LD_ADDR_VAR 0 5
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: ST_TO_ADDR
// if not x or not y then
44920: LD_VAR 0 2
44924: NOT
44925: PUSH
44926: LD_VAR 0 3
44930: NOT
44931: OR
44932: IFFALSE 44936
// exit ;
44934: GO 46586
// if not range then
44936: LD_VAR 0 4
44940: NOT
44941: IFFALSE 44951
// range := 10 ;
44943: LD_ADDR_VAR 0 4
44947: PUSH
44948: LD_INT 10
44950: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44951: LD_ADDR_VAR 0 8
44955: PUSH
44956: LD_INT 81
44958: PUSH
44959: LD_VAR 0 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 92
44970: PUSH
44971: LD_VAR 0 2
44975: PUSH
44976: LD_VAR 0 3
44980: PUSH
44981: LD_VAR 0 4
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: LD_INT 21
44997: PUSH
44998: LD_INT 3
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: PPUSH
45014: CALL_OW 69
45018: ST_TO_ADDR
// if not tmp then
45019: LD_VAR 0 8
45023: NOT
45024: IFFALSE 45028
// exit ;
45026: GO 46586
// for i in tmp do
45028: LD_ADDR_VAR 0 6
45032: PUSH
45033: LD_VAR 0 8
45037: PUSH
45038: FOR_IN
45039: IFFALSE 46561
// begin points := [ 0 , 0 , 0 ] ;
45041: LD_ADDR_VAR 0 9
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// bpoints := 1 ;
45060: LD_ADDR_VAR 0 10
45064: PUSH
45065: LD_INT 1
45067: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45068: LD_VAR 0 6
45072: PPUSH
45073: CALL_OW 247
45077: PUSH
45078: LD_INT 1
45080: DOUBLE
45081: EQUAL
45082: IFTRUE 45086
45084: GO 45664
45086: POP
// begin if GetClass ( i ) = 1 then
45087: LD_VAR 0 6
45091: PPUSH
45092: CALL_OW 257
45096: PUSH
45097: LD_INT 1
45099: EQUAL
45100: IFFALSE 45121
// points := [ 10 , 5 , 3 ] ;
45102: LD_ADDR_VAR 0 9
45106: PUSH
45107: LD_INT 10
45109: PUSH
45110: LD_INT 5
45112: PUSH
45113: LD_INT 3
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: LIST
45120: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45121: LD_VAR 0 6
45125: PPUSH
45126: CALL_OW 257
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: LD_INT 4
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: LIST
45144: IN
45145: IFFALSE 45166
// points := [ 3 , 2 , 1 ] ;
45147: LD_ADDR_VAR 0 9
45151: PUSH
45152: LD_INT 3
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45166: LD_VAR 0 6
45170: PPUSH
45171: CALL_OW 257
45175: PUSH
45176: LD_INT 5
45178: EQUAL
45179: IFFALSE 45200
// points := [ 130 , 5 , 2 ] ;
45181: LD_ADDR_VAR 0 9
45185: PUSH
45186: LD_INT 130
45188: PUSH
45189: LD_INT 5
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45200: LD_VAR 0 6
45204: PPUSH
45205: CALL_OW 257
45209: PUSH
45210: LD_INT 8
45212: EQUAL
45213: IFFALSE 45234
// points := [ 35 , 35 , 30 ] ;
45215: LD_ADDR_VAR 0 9
45219: PUSH
45220: LD_INT 35
45222: PUSH
45223: LD_INT 35
45225: PUSH
45226: LD_INT 30
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45234: LD_VAR 0 6
45238: PPUSH
45239: CALL_OW 257
45243: PUSH
45244: LD_INT 9
45246: EQUAL
45247: IFFALSE 45268
// points := [ 20 , 55 , 40 ] ;
45249: LD_ADDR_VAR 0 9
45253: PUSH
45254: LD_INT 20
45256: PUSH
45257: LD_INT 55
45259: PUSH
45260: LD_INT 40
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45268: LD_VAR 0 6
45272: PPUSH
45273: CALL_OW 257
45277: PUSH
45278: LD_INT 12
45280: PUSH
45281: LD_INT 16
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: IN
45288: IFFALSE 45309
// points := [ 5 , 3 , 2 ] ;
45290: LD_ADDR_VAR 0 9
45294: PUSH
45295: LD_INT 5
45297: PUSH
45298: LD_INT 3
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45309: LD_VAR 0 6
45313: PPUSH
45314: CALL_OW 257
45318: PUSH
45319: LD_INT 17
45321: EQUAL
45322: IFFALSE 45343
// points := [ 100 , 50 , 75 ] ;
45324: LD_ADDR_VAR 0 9
45328: PUSH
45329: LD_INT 100
45331: PUSH
45332: LD_INT 50
45334: PUSH
45335: LD_INT 75
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45343: LD_VAR 0 6
45347: PPUSH
45348: CALL_OW 257
45352: PUSH
45353: LD_INT 15
45355: EQUAL
45356: IFFALSE 45377
// points := [ 10 , 5 , 3 ] ;
45358: LD_ADDR_VAR 0 9
45362: PUSH
45363: LD_INT 10
45365: PUSH
45366: LD_INT 5
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45377: LD_VAR 0 6
45381: PPUSH
45382: CALL_OW 257
45386: PUSH
45387: LD_INT 14
45389: EQUAL
45390: IFFALSE 45411
// points := [ 10 , 0 , 0 ] ;
45392: LD_ADDR_VAR 0 9
45396: PUSH
45397: LD_INT 10
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: LIST
45410: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45411: LD_VAR 0 6
45415: PPUSH
45416: CALL_OW 257
45420: PUSH
45421: LD_INT 11
45423: EQUAL
45424: IFFALSE 45445
// points := [ 30 , 10 , 5 ] ;
45426: LD_ADDR_VAR 0 9
45430: PUSH
45431: LD_INT 30
45433: PUSH
45434: LD_INT 10
45436: PUSH
45437: LD_INT 5
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45445: LD_VAR 0 1
45449: PPUSH
45450: LD_INT 5
45452: PPUSH
45453: CALL_OW 321
45457: PUSH
45458: LD_INT 2
45460: EQUAL
45461: IFFALSE 45478
// bpoints := bpoints * 1.8 ;
45463: LD_ADDR_VAR 0 10
45467: PUSH
45468: LD_VAR 0 10
45472: PUSH
45473: LD_REAL  1.80000000000000E+0000
45476: MUL
45477: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45478: LD_VAR 0 6
45482: PPUSH
45483: CALL_OW 257
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 3
45496: PUSH
45497: LD_INT 4
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: IN
45506: PUSH
45507: LD_VAR 0 1
45511: PPUSH
45512: LD_INT 51
45514: PPUSH
45515: CALL_OW 321
45519: PUSH
45520: LD_INT 2
45522: EQUAL
45523: AND
45524: IFFALSE 45541
// bpoints := bpoints * 1.2 ;
45526: LD_ADDR_VAR 0 10
45530: PUSH
45531: LD_VAR 0 10
45535: PUSH
45536: LD_REAL  1.20000000000000E+0000
45539: MUL
45540: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45541: LD_VAR 0 6
45545: PPUSH
45546: CALL_OW 257
45550: PUSH
45551: LD_INT 5
45553: PUSH
45554: LD_INT 7
45556: PUSH
45557: LD_INT 9
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: IN
45565: PUSH
45566: LD_VAR 0 1
45570: PPUSH
45571: LD_INT 52
45573: PPUSH
45574: CALL_OW 321
45578: PUSH
45579: LD_INT 2
45581: EQUAL
45582: AND
45583: IFFALSE 45600
// bpoints := bpoints * 1.5 ;
45585: LD_ADDR_VAR 0 10
45589: PUSH
45590: LD_VAR 0 10
45594: PUSH
45595: LD_REAL  1.50000000000000E+0000
45598: MUL
45599: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45600: LD_VAR 0 1
45604: PPUSH
45605: LD_INT 66
45607: PPUSH
45608: CALL_OW 321
45612: PUSH
45613: LD_INT 2
45615: EQUAL
45616: IFFALSE 45633
// bpoints := bpoints * 1.1 ;
45618: LD_ADDR_VAR 0 10
45622: PUSH
45623: LD_VAR 0 10
45627: PUSH
45628: LD_REAL  1.10000000000000E+0000
45631: MUL
45632: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45633: LD_ADDR_VAR 0 10
45637: PUSH
45638: LD_VAR 0 10
45642: PUSH
45643: LD_VAR 0 6
45647: PPUSH
45648: LD_INT 1
45650: PPUSH
45651: CALL_OW 259
45655: PUSH
45656: LD_REAL  1.15000000000000E+0000
45659: MUL
45660: MUL
45661: ST_TO_ADDR
// end ; unit_vehicle :
45662: GO 46490
45664: LD_INT 2
45666: DOUBLE
45667: EQUAL
45668: IFTRUE 45672
45670: GO 46478
45672: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45673: LD_VAR 0 6
45677: PPUSH
45678: CALL_OW 264
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: LD_INT 42
45688: PUSH
45689: LD_INT 24
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: IN
45697: IFFALSE 45718
// points := [ 25 , 5 , 3 ] ;
45699: LD_ADDR_VAR 0 9
45703: PUSH
45704: LD_INT 25
45706: PUSH
45707: LD_INT 5
45709: PUSH
45710: LD_INT 3
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45718: LD_VAR 0 6
45722: PPUSH
45723: CALL_OW 264
45727: PUSH
45728: LD_INT 4
45730: PUSH
45731: LD_INT 43
45733: PUSH
45734: LD_INT 25
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: IN
45742: IFFALSE 45763
// points := [ 40 , 15 , 5 ] ;
45744: LD_ADDR_VAR 0 9
45748: PUSH
45749: LD_INT 40
45751: PUSH
45752: LD_INT 15
45754: PUSH
45755: LD_INT 5
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45763: LD_VAR 0 6
45767: PPUSH
45768: CALL_OW 264
45772: PUSH
45773: LD_INT 3
45775: PUSH
45776: LD_INT 23
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: IN
45783: IFFALSE 45804
// points := [ 7 , 25 , 8 ] ;
45785: LD_ADDR_VAR 0 9
45789: PUSH
45790: LD_INT 7
45792: PUSH
45793: LD_INT 25
45795: PUSH
45796: LD_INT 8
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45804: LD_VAR 0 6
45808: PPUSH
45809: CALL_OW 264
45813: PUSH
45814: LD_INT 5
45816: PUSH
45817: LD_INT 27
45819: PUSH
45820: LD_INT 44
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: LIST
45827: IN
45828: IFFALSE 45849
// points := [ 14 , 50 , 16 ] ;
45830: LD_ADDR_VAR 0 9
45834: PUSH
45835: LD_INT 14
45837: PUSH
45838: LD_INT 50
45840: PUSH
45841: LD_INT 16
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45849: LD_VAR 0 6
45853: PPUSH
45854: CALL_OW 264
45858: PUSH
45859: LD_INT 6
45861: PUSH
45862: LD_INT 46
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: IN
45869: IFFALSE 45890
// points := [ 32 , 120 , 70 ] ;
45871: LD_ADDR_VAR 0 9
45875: PUSH
45876: LD_INT 32
45878: PUSH
45879: LD_INT 120
45881: PUSH
45882: LD_INT 70
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45890: LD_VAR 0 6
45894: PPUSH
45895: CALL_OW 264
45899: PUSH
45900: LD_INT 7
45902: PUSH
45903: LD_INT 28
45905: PUSH
45906: LD_INT 45
45908: PUSH
45909: LD_INT 92
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: IN
45918: IFFALSE 45939
// points := [ 35 , 20 , 45 ] ;
45920: LD_ADDR_VAR 0 9
45924: PUSH
45925: LD_INT 35
45927: PUSH
45928: LD_INT 20
45930: PUSH
45931: LD_INT 45
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45939: LD_VAR 0 6
45943: PPUSH
45944: CALL_OW 264
45948: PUSH
45949: LD_INT 47
45951: PUSH
45952: EMPTY
45953: LIST
45954: IN
45955: IFFALSE 45976
// points := [ 67 , 45 , 75 ] ;
45957: LD_ADDR_VAR 0 9
45961: PUSH
45962: LD_INT 67
45964: PUSH
45965: LD_INT 45
45967: PUSH
45968: LD_INT 75
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: LIST
45975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45976: LD_VAR 0 6
45980: PPUSH
45981: CALL_OW 264
45985: PUSH
45986: LD_INT 26
45988: PUSH
45989: EMPTY
45990: LIST
45991: IN
45992: IFFALSE 46013
// points := [ 120 , 30 , 80 ] ;
45994: LD_ADDR_VAR 0 9
45998: PUSH
45999: LD_INT 120
46001: PUSH
46002: LD_INT 30
46004: PUSH
46005: LD_INT 80
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46013: LD_VAR 0 6
46017: PPUSH
46018: CALL_OW 264
46022: PUSH
46023: LD_INT 22
46025: PUSH
46026: EMPTY
46027: LIST
46028: IN
46029: IFFALSE 46050
// points := [ 40 , 1 , 1 ] ;
46031: LD_ADDR_VAR 0 9
46035: PUSH
46036: LD_INT 40
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46050: LD_VAR 0 6
46054: PPUSH
46055: CALL_OW 264
46059: PUSH
46060: LD_INT 29
46062: PUSH
46063: EMPTY
46064: LIST
46065: IN
46066: IFFALSE 46087
// points := [ 70 , 200 , 400 ] ;
46068: LD_ADDR_VAR 0 9
46072: PUSH
46073: LD_INT 70
46075: PUSH
46076: LD_INT 200
46078: PUSH
46079: LD_INT 400
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46087: LD_VAR 0 6
46091: PPUSH
46092: CALL_OW 264
46096: PUSH
46097: LD_INT 14
46099: PUSH
46100: LD_INT 53
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: IN
46107: IFFALSE 46128
// points := [ 40 , 10 , 20 ] ;
46109: LD_ADDR_VAR 0 9
46113: PUSH
46114: LD_INT 40
46116: PUSH
46117: LD_INT 10
46119: PUSH
46120: LD_INT 20
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46128: LD_VAR 0 6
46132: PPUSH
46133: CALL_OW 264
46137: PUSH
46138: LD_INT 9
46140: PUSH
46141: EMPTY
46142: LIST
46143: IN
46144: IFFALSE 46165
// points := [ 5 , 70 , 20 ] ;
46146: LD_ADDR_VAR 0 9
46150: PUSH
46151: LD_INT 5
46153: PUSH
46154: LD_INT 70
46156: PUSH
46157: LD_INT 20
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46165: LD_VAR 0 6
46169: PPUSH
46170: CALL_OW 264
46174: PUSH
46175: LD_INT 10
46177: PUSH
46178: EMPTY
46179: LIST
46180: IN
46181: IFFALSE 46202
// points := [ 35 , 110 , 70 ] ;
46183: LD_ADDR_VAR 0 9
46187: PUSH
46188: LD_INT 35
46190: PUSH
46191: LD_INT 110
46193: PUSH
46194: LD_INT 70
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46202: LD_VAR 0 6
46206: PPUSH
46207: CALL_OW 265
46211: PUSH
46212: LD_INT 25
46214: EQUAL
46215: IFFALSE 46236
// points := [ 80 , 65 , 100 ] ;
46217: LD_ADDR_VAR 0 9
46221: PUSH
46222: LD_INT 80
46224: PUSH
46225: LD_INT 65
46227: PUSH
46228: LD_INT 100
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46236: LD_VAR 0 6
46240: PPUSH
46241: CALL_OW 263
46245: PUSH
46246: LD_INT 1
46248: EQUAL
46249: IFFALSE 46284
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46251: LD_ADDR_VAR 0 10
46255: PUSH
46256: LD_VAR 0 10
46260: PUSH
46261: LD_VAR 0 6
46265: PPUSH
46266: CALL_OW 311
46270: PPUSH
46271: LD_INT 3
46273: PPUSH
46274: CALL_OW 259
46278: PUSH
46279: LD_INT 4
46281: MUL
46282: MUL
46283: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46284: LD_VAR 0 6
46288: PPUSH
46289: CALL_OW 263
46293: PUSH
46294: LD_INT 2
46296: EQUAL
46297: IFFALSE 46348
// begin j := IsControledBy ( i ) ;
46299: LD_ADDR_VAR 0 7
46303: PUSH
46304: LD_VAR 0 6
46308: PPUSH
46309: CALL_OW 312
46313: ST_TO_ADDR
// if j then
46314: LD_VAR 0 7
46318: IFFALSE 46348
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46320: LD_ADDR_VAR 0 10
46324: PUSH
46325: LD_VAR 0 10
46329: PUSH
46330: LD_VAR 0 7
46334: PPUSH
46335: LD_INT 3
46337: PPUSH
46338: CALL_OW 259
46342: PUSH
46343: LD_INT 3
46345: MUL
46346: MUL
46347: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46348: LD_VAR 0 6
46352: PPUSH
46353: CALL_OW 264
46357: PUSH
46358: LD_INT 5
46360: PUSH
46361: LD_INT 6
46363: PUSH
46364: LD_INT 46
46366: PUSH
46367: LD_INT 44
46369: PUSH
46370: LD_INT 47
46372: PUSH
46373: LD_INT 45
46375: PUSH
46376: LD_INT 28
46378: PUSH
46379: LD_INT 7
46381: PUSH
46382: LD_INT 27
46384: PUSH
46385: LD_INT 29
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: IN
46400: PUSH
46401: LD_VAR 0 1
46405: PPUSH
46406: LD_INT 52
46408: PPUSH
46409: CALL_OW 321
46413: PUSH
46414: LD_INT 2
46416: EQUAL
46417: AND
46418: IFFALSE 46435
// bpoints := bpoints * 1.2 ;
46420: LD_ADDR_VAR 0 10
46424: PUSH
46425: LD_VAR 0 10
46429: PUSH
46430: LD_REAL  1.20000000000000E+0000
46433: MUL
46434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46435: LD_VAR 0 6
46439: PPUSH
46440: CALL_OW 264
46444: PUSH
46445: LD_INT 6
46447: PUSH
46448: LD_INT 46
46450: PUSH
46451: LD_INT 47
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: LIST
46458: IN
46459: IFFALSE 46476
// bpoints := bpoints * 1.2 ;
46461: LD_ADDR_VAR 0 10
46465: PUSH
46466: LD_VAR 0 10
46470: PUSH
46471: LD_REAL  1.20000000000000E+0000
46474: MUL
46475: ST_TO_ADDR
// end ; unit_building :
46476: GO 46490
46478: LD_INT 3
46480: DOUBLE
46481: EQUAL
46482: IFTRUE 46486
46484: GO 46489
46486: POP
// ; end ;
46487: GO 46490
46489: POP
// for j = 1 to 3 do
46490: LD_ADDR_VAR 0 7
46494: PUSH
46495: DOUBLE
46496: LD_INT 1
46498: DEC
46499: ST_TO_ADDR
46500: LD_INT 3
46502: PUSH
46503: FOR_TO
46504: IFFALSE 46557
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46506: LD_ADDR_VAR 0 5
46510: PUSH
46511: LD_VAR 0 5
46515: PPUSH
46516: LD_VAR 0 7
46520: PPUSH
46521: LD_VAR 0 5
46525: PUSH
46526: LD_VAR 0 7
46530: ARRAY
46531: PUSH
46532: LD_VAR 0 9
46536: PUSH
46537: LD_VAR 0 7
46541: ARRAY
46542: PUSH
46543: LD_VAR 0 10
46547: MUL
46548: PLUS
46549: PPUSH
46550: CALL_OW 1
46554: ST_TO_ADDR
46555: GO 46503
46557: POP
46558: POP
// end ;
46559: GO 45038
46561: POP
46562: POP
// result := Replace ( result , 4 , tmp ) ;
46563: LD_ADDR_VAR 0 5
46567: PUSH
46568: LD_VAR 0 5
46572: PPUSH
46573: LD_INT 4
46575: PPUSH
46576: LD_VAR 0 8
46580: PPUSH
46581: CALL_OW 1
46585: ST_TO_ADDR
// end ;
46586: LD_VAR 0 5
46590: RET
// export function DangerAtRange ( unit , range ) ; begin
46591: LD_INT 0
46593: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46594: LD_ADDR_VAR 0 3
46598: PUSH
46599: LD_VAR 0 1
46603: PPUSH
46604: CALL_OW 255
46608: PPUSH
46609: LD_VAR 0 1
46613: PPUSH
46614: CALL_OW 250
46618: PPUSH
46619: LD_VAR 0 1
46623: PPUSH
46624: CALL_OW 251
46628: PPUSH
46629: LD_VAR 0 2
46633: PPUSH
46634: CALL 44890 0 4
46638: ST_TO_ADDR
// end ;
46639: LD_VAR 0 3
46643: RET
// export function DangerInArea ( side , area ) ; begin
46644: LD_INT 0
46646: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46647: LD_ADDR_VAR 0 3
46651: PUSH
46652: LD_VAR 0 2
46656: PPUSH
46657: LD_INT 81
46659: PUSH
46660: LD_VAR 0 1
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PPUSH
46669: CALL_OW 70
46673: ST_TO_ADDR
// end ;
46674: LD_VAR 0 3
46678: RET
// export function IsExtension ( b ) ; begin
46679: LD_INT 0
46681: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46682: LD_ADDR_VAR 0 2
46686: PUSH
46687: LD_VAR 0 1
46691: PUSH
46692: LD_INT 23
46694: PUSH
46695: LD_INT 20
46697: PUSH
46698: LD_INT 22
46700: PUSH
46701: LD_INT 17
46703: PUSH
46704: LD_INT 24
46706: PUSH
46707: LD_INT 21
46709: PUSH
46710: LD_INT 19
46712: PUSH
46713: LD_INT 16
46715: PUSH
46716: LD_INT 25
46718: PUSH
46719: LD_INT 18
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: IN
46734: ST_TO_ADDR
// end ;
46735: LD_VAR 0 2
46739: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46740: LD_INT 0
46742: PPUSH
46743: PPUSH
46744: PPUSH
// result := [ ] ;
46745: LD_ADDR_VAR 0 4
46749: PUSH
46750: EMPTY
46751: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46752: LD_ADDR_VAR 0 5
46756: PUSH
46757: LD_VAR 0 2
46761: PPUSH
46762: LD_INT 21
46764: PUSH
46765: LD_INT 3
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PPUSH
46772: CALL_OW 70
46776: ST_TO_ADDR
// if not tmp then
46777: LD_VAR 0 5
46781: NOT
46782: IFFALSE 46786
// exit ;
46784: GO 46850
// if checkLink then
46786: LD_VAR 0 3
46790: IFFALSE 46840
// begin for i in tmp do
46792: LD_ADDR_VAR 0 6
46796: PUSH
46797: LD_VAR 0 5
46801: PUSH
46802: FOR_IN
46803: IFFALSE 46838
// if GetBase ( i ) <> base then
46805: LD_VAR 0 6
46809: PPUSH
46810: CALL_OW 274
46814: PUSH
46815: LD_VAR 0 1
46819: NONEQUAL
46820: IFFALSE 46836
// ComLinkToBase ( base , i ) ;
46822: LD_VAR 0 1
46826: PPUSH
46827: LD_VAR 0 6
46831: PPUSH
46832: CALL_OW 169
46836: GO 46802
46838: POP
46839: POP
// end ; result := tmp ;
46840: LD_ADDR_VAR 0 4
46844: PUSH
46845: LD_VAR 0 5
46849: ST_TO_ADDR
// end ;
46850: LD_VAR 0 4
46854: RET
// export function ComComplete ( units , b ) ; var i ; begin
46855: LD_INT 0
46857: PPUSH
46858: PPUSH
// if not units then
46859: LD_VAR 0 1
46863: NOT
46864: IFFALSE 46868
// exit ;
46866: GO 46958
// for i in units do
46868: LD_ADDR_VAR 0 4
46872: PUSH
46873: LD_VAR 0 1
46877: PUSH
46878: FOR_IN
46879: IFFALSE 46956
// if BuildingStatus ( b ) = bs_build then
46881: LD_VAR 0 2
46885: PPUSH
46886: CALL_OW 461
46890: PUSH
46891: LD_INT 1
46893: EQUAL
46894: IFFALSE 46954
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46896: LD_VAR 0 4
46900: PPUSH
46901: LD_STRING h
46903: PUSH
46904: LD_VAR 0 2
46908: PPUSH
46909: CALL_OW 250
46913: PUSH
46914: LD_VAR 0 2
46918: PPUSH
46919: CALL_OW 251
46923: PUSH
46924: LD_VAR 0 2
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: PPUSH
46950: CALL_OW 446
46954: GO 46878
46956: POP
46957: POP
// end ;
46958: LD_VAR 0 3
46962: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46963: LD_INT 0
46965: PPUSH
46966: PPUSH
46967: PPUSH
46968: PPUSH
46969: PPUSH
46970: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46971: LD_VAR 0 1
46975: NOT
46976: PUSH
46977: LD_VAR 0 1
46981: PPUSH
46982: CALL_OW 263
46986: PUSH
46987: LD_INT 2
46989: NONEQUAL
46990: OR
46991: IFFALSE 46995
// exit ;
46993: GO 47311
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46995: LD_ADDR_VAR 0 6
46999: PUSH
47000: LD_INT 22
47002: PUSH
47003: LD_VAR 0 1
47007: PPUSH
47008: CALL_OW 255
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 30
47022: PUSH
47023: LD_INT 36
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 34
47032: PUSH
47033: LD_INT 31
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PPUSH
47049: CALL_OW 69
47053: ST_TO_ADDR
// if not tmp then
47054: LD_VAR 0 6
47058: NOT
47059: IFFALSE 47063
// exit ;
47061: GO 47311
// result := [ ] ;
47063: LD_ADDR_VAR 0 2
47067: PUSH
47068: EMPTY
47069: ST_TO_ADDR
// for i in tmp do
47070: LD_ADDR_VAR 0 3
47074: PUSH
47075: LD_VAR 0 6
47079: PUSH
47080: FOR_IN
47081: IFFALSE 47152
// begin t := UnitsInside ( i ) ;
47083: LD_ADDR_VAR 0 4
47087: PUSH
47088: LD_VAR 0 3
47092: PPUSH
47093: CALL_OW 313
47097: ST_TO_ADDR
// if t then
47098: LD_VAR 0 4
47102: IFFALSE 47150
// for j in t do
47104: LD_ADDR_VAR 0 7
47108: PUSH
47109: LD_VAR 0 4
47113: PUSH
47114: FOR_IN
47115: IFFALSE 47148
// result := Replace ( result , result + 1 , j ) ;
47117: LD_ADDR_VAR 0 2
47121: PUSH
47122: LD_VAR 0 2
47126: PPUSH
47127: LD_VAR 0 2
47131: PUSH
47132: LD_INT 1
47134: PLUS
47135: PPUSH
47136: LD_VAR 0 7
47140: PPUSH
47141: CALL_OW 1
47145: ST_TO_ADDR
47146: GO 47114
47148: POP
47149: POP
// end ;
47150: GO 47080
47152: POP
47153: POP
// if not result then
47154: LD_VAR 0 2
47158: NOT
47159: IFFALSE 47163
// exit ;
47161: GO 47311
// mech := result [ 1 ] ;
47163: LD_ADDR_VAR 0 5
47167: PUSH
47168: LD_VAR 0 2
47172: PUSH
47173: LD_INT 1
47175: ARRAY
47176: ST_TO_ADDR
// if result > 1 then
47177: LD_VAR 0 2
47181: PUSH
47182: LD_INT 1
47184: GREATER
47185: IFFALSE 47297
// begin for i = 2 to result do
47187: LD_ADDR_VAR 0 3
47191: PUSH
47192: DOUBLE
47193: LD_INT 2
47195: DEC
47196: ST_TO_ADDR
47197: LD_VAR 0 2
47201: PUSH
47202: FOR_TO
47203: IFFALSE 47295
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47205: LD_ADDR_VAR 0 4
47209: PUSH
47210: LD_VAR 0 2
47214: PUSH
47215: LD_VAR 0 3
47219: ARRAY
47220: PPUSH
47221: LD_INT 3
47223: PPUSH
47224: CALL_OW 259
47228: PUSH
47229: LD_VAR 0 2
47233: PUSH
47234: LD_VAR 0 3
47238: ARRAY
47239: PPUSH
47240: CALL_OW 432
47244: MINUS
47245: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47246: LD_VAR 0 4
47250: PUSH
47251: LD_VAR 0 5
47255: PPUSH
47256: LD_INT 3
47258: PPUSH
47259: CALL_OW 259
47263: PUSH
47264: LD_VAR 0 5
47268: PPUSH
47269: CALL_OW 432
47273: MINUS
47274: GREATEREQUAL
47275: IFFALSE 47293
// mech := result [ i ] ;
47277: LD_ADDR_VAR 0 5
47281: PUSH
47282: LD_VAR 0 2
47286: PUSH
47287: LD_VAR 0 3
47291: ARRAY
47292: ST_TO_ADDR
// end ;
47293: GO 47202
47295: POP
47296: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47297: LD_VAR 0 1
47301: PPUSH
47302: LD_VAR 0 5
47306: PPUSH
47307: CALL_OW 135
// end ;
47311: LD_VAR 0 2
47315: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47316: LD_INT 0
47318: PPUSH
47319: PPUSH
47320: PPUSH
47321: PPUSH
47322: PPUSH
47323: PPUSH
47324: PPUSH
47325: PPUSH
47326: PPUSH
47327: PPUSH
47328: PPUSH
47329: PPUSH
47330: PPUSH
// result := [ ] ;
47331: LD_ADDR_VAR 0 7
47335: PUSH
47336: EMPTY
47337: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47338: LD_VAR 0 1
47342: PPUSH
47343: CALL_OW 266
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: IN
47358: NOT
47359: IFFALSE 47363
// exit ;
47361: GO 48997
// if name then
47363: LD_VAR 0 3
47367: IFFALSE 47383
// SetBName ( base_dep , name ) ;
47369: LD_VAR 0 1
47373: PPUSH
47374: LD_VAR 0 3
47378: PPUSH
47379: CALL_OW 500
// base := GetBase ( base_dep ) ;
47383: LD_ADDR_VAR 0 15
47387: PUSH
47388: LD_VAR 0 1
47392: PPUSH
47393: CALL_OW 274
47397: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47398: LD_ADDR_VAR 0 16
47402: PUSH
47403: LD_VAR 0 1
47407: PPUSH
47408: CALL_OW 255
47412: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47413: LD_ADDR_VAR 0 17
47417: PUSH
47418: LD_VAR 0 1
47422: PPUSH
47423: CALL_OW 248
47427: ST_TO_ADDR
// if sources then
47428: LD_VAR 0 5
47432: IFFALSE 47479
// for i = 1 to 3 do
47434: LD_ADDR_VAR 0 8
47438: PUSH
47439: DOUBLE
47440: LD_INT 1
47442: DEC
47443: ST_TO_ADDR
47444: LD_INT 3
47446: PUSH
47447: FOR_TO
47448: IFFALSE 47477
// AddResourceType ( base , i , sources [ i ] ) ;
47450: LD_VAR 0 15
47454: PPUSH
47455: LD_VAR 0 8
47459: PPUSH
47460: LD_VAR 0 5
47464: PUSH
47465: LD_VAR 0 8
47469: ARRAY
47470: PPUSH
47471: CALL_OW 276
47475: GO 47447
47477: POP
47478: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47479: LD_ADDR_VAR 0 18
47483: PUSH
47484: LD_VAR 0 15
47488: PPUSH
47489: LD_VAR 0 2
47493: PPUSH
47494: LD_INT 1
47496: PPUSH
47497: CALL 46740 0 3
47501: ST_TO_ADDR
// InitHc ;
47502: CALL_OW 19
// InitUc ;
47506: CALL_OW 18
// uc_side := side ;
47510: LD_ADDR_OWVAR 20
47514: PUSH
47515: LD_VAR 0 16
47519: ST_TO_ADDR
// uc_nation := nation ;
47520: LD_ADDR_OWVAR 21
47524: PUSH
47525: LD_VAR 0 17
47529: ST_TO_ADDR
// if buildings then
47530: LD_VAR 0 18
47534: IFFALSE 48856
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47536: LD_ADDR_VAR 0 19
47540: PUSH
47541: LD_VAR 0 18
47545: PPUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 30
47551: PUSH
47552: LD_INT 29
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 30
47561: PUSH
47562: LD_INT 30
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: PPUSH
47574: CALL_OW 72
47578: ST_TO_ADDR
// if tmp then
47579: LD_VAR 0 19
47583: IFFALSE 47631
// for i in tmp do
47585: LD_ADDR_VAR 0 8
47589: PUSH
47590: LD_VAR 0 19
47594: PUSH
47595: FOR_IN
47596: IFFALSE 47629
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47598: LD_VAR 0 8
47602: PPUSH
47603: CALL_OW 250
47607: PPUSH
47608: LD_VAR 0 8
47612: PPUSH
47613: CALL_OW 251
47617: PPUSH
47618: LD_VAR 0 16
47622: PPUSH
47623: CALL_OW 441
47627: GO 47595
47629: POP
47630: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47631: LD_VAR 0 18
47635: PPUSH
47636: LD_INT 2
47638: PUSH
47639: LD_INT 30
47641: PUSH
47642: LD_INT 32
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 30
47651: PUSH
47652: LD_INT 33
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: PPUSH
47664: CALL_OW 72
47668: IFFALSE 47756
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47670: LD_ADDR_VAR 0 8
47674: PUSH
47675: LD_VAR 0 18
47679: PPUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 30
47685: PUSH
47686: LD_INT 32
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 30
47695: PUSH
47696: LD_INT 33
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: PPUSH
47708: CALL_OW 72
47712: PUSH
47713: FOR_IN
47714: IFFALSE 47754
// begin if not GetBWeapon ( i ) then
47716: LD_VAR 0 8
47720: PPUSH
47721: CALL_OW 269
47725: NOT
47726: IFFALSE 47752
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47728: LD_VAR 0 8
47732: PPUSH
47733: LD_VAR 0 8
47737: PPUSH
47738: LD_VAR 0 2
47742: PPUSH
47743: CALL 49002 0 2
47747: PPUSH
47748: CALL_OW 431
// end ;
47752: GO 47713
47754: POP
47755: POP
// end ; for i = 1 to personel do
47756: LD_ADDR_VAR 0 8
47760: PUSH
47761: DOUBLE
47762: LD_INT 1
47764: DEC
47765: ST_TO_ADDR
47766: LD_VAR 0 6
47770: PUSH
47771: FOR_TO
47772: IFFALSE 48836
// begin if i > 4 then
47774: LD_VAR 0 8
47778: PUSH
47779: LD_INT 4
47781: GREATER
47782: IFFALSE 47786
// break ;
47784: GO 48836
// case i of 1 :
47786: LD_VAR 0 8
47790: PUSH
47791: LD_INT 1
47793: DOUBLE
47794: EQUAL
47795: IFTRUE 47799
47797: GO 47879
47799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47800: LD_ADDR_VAR 0 12
47804: PUSH
47805: LD_VAR 0 18
47809: PPUSH
47810: LD_INT 22
47812: PUSH
47813: LD_VAR 0 16
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 58
47824: PUSH
47825: EMPTY
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 30
47833: PUSH
47834: LD_INT 32
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 30
47843: PUSH
47844: LD_INT 4
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 30
47853: PUSH
47854: LD_INT 5
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: PPUSH
47872: CALL_OW 72
47876: ST_TO_ADDR
47877: GO 48101
47879: LD_INT 2
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47887
47885: GO 47949
47887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47888: LD_ADDR_VAR 0 12
47892: PUSH
47893: LD_VAR 0 18
47897: PPUSH
47898: LD_INT 22
47900: PUSH
47901: LD_VAR 0 16
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: LD_INT 30
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 30
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PPUSH
47942: CALL_OW 72
47946: ST_TO_ADDR
47947: GO 48101
47949: LD_INT 3
47951: DOUBLE
47952: EQUAL
47953: IFTRUE 47957
47955: GO 48019
47957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47958: LD_ADDR_VAR 0 12
47962: PUSH
47963: LD_VAR 0 18
47967: PPUSH
47968: LD_INT 22
47970: PUSH
47971: LD_VAR 0 16
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 30
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 30
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: LIST
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PPUSH
48012: CALL_OW 72
48016: ST_TO_ADDR
48017: GO 48101
48019: LD_INT 4
48021: DOUBLE
48022: EQUAL
48023: IFTRUE 48027
48025: GO 48100
48027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48028: LD_ADDR_VAR 0 12
48032: PUSH
48033: LD_VAR 0 18
48037: PPUSH
48038: LD_INT 22
48040: PUSH
48041: LD_VAR 0 16
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 30
48055: PUSH
48056: LD_INT 6
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 30
48065: PUSH
48066: LD_INT 7
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 30
48075: PUSH
48076: LD_INT 8
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PPUSH
48093: CALL_OW 72
48097: ST_TO_ADDR
48098: GO 48101
48100: POP
// if i = 1 then
48101: LD_VAR 0 8
48105: PUSH
48106: LD_INT 1
48108: EQUAL
48109: IFFALSE 48220
// begin tmp := [ ] ;
48111: LD_ADDR_VAR 0 19
48115: PUSH
48116: EMPTY
48117: ST_TO_ADDR
// for j in f do
48118: LD_ADDR_VAR 0 9
48122: PUSH
48123: LD_VAR 0 12
48127: PUSH
48128: FOR_IN
48129: IFFALSE 48202
// if GetBType ( j ) = b_bunker then
48131: LD_VAR 0 9
48135: PPUSH
48136: CALL_OW 266
48140: PUSH
48141: LD_INT 32
48143: EQUAL
48144: IFFALSE 48171
// tmp := Insert ( tmp , 1 , j ) else
48146: LD_ADDR_VAR 0 19
48150: PUSH
48151: LD_VAR 0 19
48155: PPUSH
48156: LD_INT 1
48158: PPUSH
48159: LD_VAR 0 9
48163: PPUSH
48164: CALL_OW 2
48168: ST_TO_ADDR
48169: GO 48200
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48171: LD_ADDR_VAR 0 19
48175: PUSH
48176: LD_VAR 0 19
48180: PPUSH
48181: LD_VAR 0 19
48185: PUSH
48186: LD_INT 1
48188: PLUS
48189: PPUSH
48190: LD_VAR 0 9
48194: PPUSH
48195: CALL_OW 2
48199: ST_TO_ADDR
48200: GO 48128
48202: POP
48203: POP
// if tmp then
48204: LD_VAR 0 19
48208: IFFALSE 48220
// f := tmp ;
48210: LD_ADDR_VAR 0 12
48214: PUSH
48215: LD_VAR 0 19
48219: ST_TO_ADDR
// end ; x := personel [ i ] ;
48220: LD_ADDR_VAR 0 13
48224: PUSH
48225: LD_VAR 0 6
48229: PUSH
48230: LD_VAR 0 8
48234: ARRAY
48235: ST_TO_ADDR
// if x = - 1 then
48236: LD_VAR 0 13
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: EQUAL
48245: IFFALSE 48454
// begin for j in f do
48247: LD_ADDR_VAR 0 9
48251: PUSH
48252: LD_VAR 0 12
48256: PUSH
48257: FOR_IN
48258: IFFALSE 48450
// repeat InitHc ;
48260: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48264: LD_VAR 0 9
48268: PPUSH
48269: CALL_OW 266
48273: PUSH
48274: LD_INT 5
48276: EQUAL
48277: IFFALSE 48347
// begin if UnitsInside ( j ) < 3 then
48279: LD_VAR 0 9
48283: PPUSH
48284: CALL_OW 313
48288: PUSH
48289: LD_INT 3
48291: LESS
48292: IFFALSE 48328
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48294: LD_INT 0
48296: PPUSH
48297: LD_INT 5
48299: PUSH
48300: LD_INT 8
48302: PUSH
48303: LD_INT 9
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: LIST
48310: PUSH
48311: LD_VAR 0 17
48315: ARRAY
48316: PPUSH
48317: LD_VAR 0 4
48321: PPUSH
48322: CALL_OW 380
48326: GO 48345
// PrepareHuman ( false , i , skill ) ;
48328: LD_INT 0
48330: PPUSH
48331: LD_VAR 0 8
48335: PPUSH
48336: LD_VAR 0 4
48340: PPUSH
48341: CALL_OW 380
// end else
48345: GO 48364
// PrepareHuman ( false , i , skill ) ;
48347: LD_INT 0
48349: PPUSH
48350: LD_VAR 0 8
48354: PPUSH
48355: LD_VAR 0 4
48359: PPUSH
48360: CALL_OW 380
// un := CreateHuman ;
48364: LD_ADDR_VAR 0 14
48368: PUSH
48369: CALL_OW 44
48373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48374: LD_ADDR_VAR 0 7
48378: PUSH
48379: LD_VAR 0 7
48383: PPUSH
48384: LD_INT 1
48386: PPUSH
48387: LD_VAR 0 14
48391: PPUSH
48392: CALL_OW 2
48396: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48397: LD_VAR 0 14
48401: PPUSH
48402: LD_VAR 0 9
48406: PPUSH
48407: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48411: LD_VAR 0 9
48415: PPUSH
48416: CALL_OW 313
48420: PUSH
48421: LD_INT 6
48423: EQUAL
48424: PUSH
48425: LD_VAR 0 9
48429: PPUSH
48430: CALL_OW 266
48434: PUSH
48435: LD_INT 32
48437: PUSH
48438: LD_INT 31
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: IN
48445: OR
48446: IFFALSE 48260
48448: GO 48257
48450: POP
48451: POP
// end else
48452: GO 48834
// for j = 1 to x do
48454: LD_ADDR_VAR 0 9
48458: PUSH
48459: DOUBLE
48460: LD_INT 1
48462: DEC
48463: ST_TO_ADDR
48464: LD_VAR 0 13
48468: PUSH
48469: FOR_TO
48470: IFFALSE 48832
// begin InitHc ;
48472: CALL_OW 19
// if not f then
48476: LD_VAR 0 12
48480: NOT
48481: IFFALSE 48570
// begin PrepareHuman ( false , i , skill ) ;
48483: LD_INT 0
48485: PPUSH
48486: LD_VAR 0 8
48490: PPUSH
48491: LD_VAR 0 4
48495: PPUSH
48496: CALL_OW 380
// un := CreateHuman ;
48500: LD_ADDR_VAR 0 14
48504: PUSH
48505: CALL_OW 44
48509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48510: LD_ADDR_VAR 0 7
48514: PUSH
48515: LD_VAR 0 7
48519: PPUSH
48520: LD_INT 1
48522: PPUSH
48523: LD_VAR 0 14
48527: PPUSH
48528: CALL_OW 2
48532: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48533: LD_VAR 0 14
48537: PPUSH
48538: LD_VAR 0 1
48542: PPUSH
48543: CALL_OW 250
48547: PPUSH
48548: LD_VAR 0 1
48552: PPUSH
48553: CALL_OW 251
48557: PPUSH
48558: LD_INT 10
48560: PPUSH
48561: LD_INT 0
48563: PPUSH
48564: CALL_OW 50
// continue ;
48568: GO 48469
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48570: LD_VAR 0 12
48574: PUSH
48575: LD_INT 1
48577: ARRAY
48578: PPUSH
48579: CALL_OW 313
48583: PUSH
48584: LD_VAR 0 12
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: PPUSH
48593: CALL_OW 266
48597: PUSH
48598: LD_INT 32
48600: PUSH
48601: LD_INT 31
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: IN
48608: AND
48609: PUSH
48610: LD_VAR 0 12
48614: PUSH
48615: LD_INT 1
48617: ARRAY
48618: PPUSH
48619: CALL_OW 313
48623: PUSH
48624: LD_INT 6
48626: EQUAL
48627: OR
48628: IFFALSE 48648
// f := Delete ( f , 1 ) ;
48630: LD_ADDR_VAR 0 12
48634: PUSH
48635: LD_VAR 0 12
48639: PPUSH
48640: LD_INT 1
48642: PPUSH
48643: CALL_OW 3
48647: ST_TO_ADDR
// if not f then
48648: LD_VAR 0 12
48652: NOT
48653: IFFALSE 48671
// begin x := x + 2 ;
48655: LD_ADDR_VAR 0 13
48659: PUSH
48660: LD_VAR 0 13
48664: PUSH
48665: LD_INT 2
48667: PLUS
48668: ST_TO_ADDR
// continue ;
48669: GO 48469
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48671: LD_VAR 0 12
48675: PUSH
48676: LD_INT 1
48678: ARRAY
48679: PPUSH
48680: CALL_OW 266
48684: PUSH
48685: LD_INT 5
48687: EQUAL
48688: IFFALSE 48762
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48690: LD_VAR 0 12
48694: PUSH
48695: LD_INT 1
48697: ARRAY
48698: PPUSH
48699: CALL_OW 313
48703: PUSH
48704: LD_INT 3
48706: LESS
48707: IFFALSE 48743
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48709: LD_INT 0
48711: PPUSH
48712: LD_INT 5
48714: PUSH
48715: LD_INT 8
48717: PUSH
48718: LD_INT 9
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: LIST
48725: PUSH
48726: LD_VAR 0 17
48730: ARRAY
48731: PPUSH
48732: LD_VAR 0 4
48736: PPUSH
48737: CALL_OW 380
48741: GO 48760
// PrepareHuman ( false , i , skill ) ;
48743: LD_INT 0
48745: PPUSH
48746: LD_VAR 0 8
48750: PPUSH
48751: LD_VAR 0 4
48755: PPUSH
48756: CALL_OW 380
// end else
48760: GO 48779
// PrepareHuman ( false , i , skill ) ;
48762: LD_INT 0
48764: PPUSH
48765: LD_VAR 0 8
48769: PPUSH
48770: LD_VAR 0 4
48774: PPUSH
48775: CALL_OW 380
// un := CreateHuman ;
48779: LD_ADDR_VAR 0 14
48783: PUSH
48784: CALL_OW 44
48788: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48789: LD_ADDR_VAR 0 7
48793: PUSH
48794: LD_VAR 0 7
48798: PPUSH
48799: LD_INT 1
48801: PPUSH
48802: LD_VAR 0 14
48806: PPUSH
48807: CALL_OW 2
48811: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48812: LD_VAR 0 14
48816: PPUSH
48817: LD_VAR 0 12
48821: PUSH
48822: LD_INT 1
48824: ARRAY
48825: PPUSH
48826: CALL_OW 52
// end ;
48830: GO 48469
48832: POP
48833: POP
// end ;
48834: GO 47771
48836: POP
48837: POP
// result := result ^ buildings ;
48838: LD_ADDR_VAR 0 7
48842: PUSH
48843: LD_VAR 0 7
48847: PUSH
48848: LD_VAR 0 18
48852: ADD
48853: ST_TO_ADDR
// end else
48854: GO 48997
// begin for i = 1 to personel do
48856: LD_ADDR_VAR 0 8
48860: PUSH
48861: DOUBLE
48862: LD_INT 1
48864: DEC
48865: ST_TO_ADDR
48866: LD_VAR 0 6
48870: PUSH
48871: FOR_TO
48872: IFFALSE 48995
// begin if i > 4 then
48874: LD_VAR 0 8
48878: PUSH
48879: LD_INT 4
48881: GREATER
48882: IFFALSE 48886
// break ;
48884: GO 48995
// x := personel [ i ] ;
48886: LD_ADDR_VAR 0 13
48890: PUSH
48891: LD_VAR 0 6
48895: PUSH
48896: LD_VAR 0 8
48900: ARRAY
48901: ST_TO_ADDR
// if x = - 1 then
48902: LD_VAR 0 13
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: EQUAL
48911: IFFALSE 48915
// continue ;
48913: GO 48871
// PrepareHuman ( false , i , skill ) ;
48915: LD_INT 0
48917: PPUSH
48918: LD_VAR 0 8
48922: PPUSH
48923: LD_VAR 0 4
48927: PPUSH
48928: CALL_OW 380
// un := CreateHuman ;
48932: LD_ADDR_VAR 0 14
48936: PUSH
48937: CALL_OW 44
48941: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48942: LD_VAR 0 14
48946: PPUSH
48947: LD_VAR 0 1
48951: PPUSH
48952: CALL_OW 250
48956: PPUSH
48957: LD_VAR 0 1
48961: PPUSH
48962: CALL_OW 251
48966: PPUSH
48967: LD_INT 10
48969: PPUSH
48970: LD_INT 0
48972: PPUSH
48973: CALL_OW 50
// result := result ^ un ;
48977: LD_ADDR_VAR 0 7
48981: PUSH
48982: LD_VAR 0 7
48986: PUSH
48987: LD_VAR 0 14
48991: ADD
48992: ST_TO_ADDR
// end ;
48993: GO 48871
48995: POP
48996: POP
// end ; end ;
48997: LD_VAR 0 7
49001: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49002: LD_INT 0
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
49009: PPUSH
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
49014: PPUSH
49015: PPUSH
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
// result := false ;
49020: LD_ADDR_VAR 0 3
49024: PUSH
49025: LD_INT 0
49027: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49028: LD_VAR 0 1
49032: NOT
49033: PUSH
49034: LD_VAR 0 1
49038: PPUSH
49039: CALL_OW 266
49043: PUSH
49044: LD_INT 32
49046: PUSH
49047: LD_INT 33
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: IN
49054: NOT
49055: OR
49056: IFFALSE 49060
// exit ;
49058: GO 50169
// nat := GetNation ( tower ) ;
49060: LD_ADDR_VAR 0 12
49064: PUSH
49065: LD_VAR 0 1
49069: PPUSH
49070: CALL_OW 248
49074: ST_TO_ADDR
// side := GetSide ( tower ) ;
49075: LD_ADDR_VAR 0 16
49079: PUSH
49080: LD_VAR 0 1
49084: PPUSH
49085: CALL_OW 255
49089: ST_TO_ADDR
// x := GetX ( tower ) ;
49090: LD_ADDR_VAR 0 10
49094: PUSH
49095: LD_VAR 0 1
49099: PPUSH
49100: CALL_OW 250
49104: ST_TO_ADDR
// y := GetY ( tower ) ;
49105: LD_ADDR_VAR 0 11
49109: PUSH
49110: LD_VAR 0 1
49114: PPUSH
49115: CALL_OW 251
49119: ST_TO_ADDR
// if not x or not y then
49120: LD_VAR 0 10
49124: NOT
49125: PUSH
49126: LD_VAR 0 11
49130: NOT
49131: OR
49132: IFFALSE 49136
// exit ;
49134: GO 50169
// weapon := 0 ;
49136: LD_ADDR_VAR 0 18
49140: PUSH
49141: LD_INT 0
49143: ST_TO_ADDR
// fac_list := [ ] ;
49144: LD_ADDR_VAR 0 17
49148: PUSH
49149: EMPTY
49150: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49151: LD_ADDR_VAR 0 6
49155: PUSH
49156: LD_VAR 0 1
49160: PPUSH
49161: CALL_OW 274
49165: PPUSH
49166: LD_VAR 0 2
49170: PPUSH
49171: LD_INT 0
49173: PPUSH
49174: CALL 46740 0 3
49178: PPUSH
49179: LD_INT 30
49181: PUSH
49182: LD_INT 3
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PPUSH
49189: CALL_OW 72
49193: ST_TO_ADDR
// if not factories then
49194: LD_VAR 0 6
49198: NOT
49199: IFFALSE 49203
// exit ;
49201: GO 50169
// for i in factories do
49203: LD_ADDR_VAR 0 8
49207: PUSH
49208: LD_VAR 0 6
49212: PUSH
49213: FOR_IN
49214: IFFALSE 49239
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49216: LD_ADDR_VAR 0 17
49220: PUSH
49221: LD_VAR 0 17
49225: PUSH
49226: LD_VAR 0 8
49230: PPUSH
49231: CALL_OW 478
49235: UNION
49236: ST_TO_ADDR
49237: GO 49213
49239: POP
49240: POP
// if not fac_list then
49241: LD_VAR 0 17
49245: NOT
49246: IFFALSE 49250
// exit ;
49248: GO 50169
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49250: LD_ADDR_VAR 0 5
49254: PUSH
49255: LD_INT 4
49257: PUSH
49258: LD_INT 5
49260: PUSH
49261: LD_INT 9
49263: PUSH
49264: LD_INT 10
49266: PUSH
49267: LD_INT 6
49269: PUSH
49270: LD_INT 7
49272: PUSH
49273: LD_INT 11
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 27
49287: PUSH
49288: LD_INT 28
49290: PUSH
49291: LD_INT 26
49293: PUSH
49294: LD_INT 30
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 43
49305: PUSH
49306: LD_INT 44
49308: PUSH
49309: LD_INT 46
49311: PUSH
49312: LD_INT 45
49314: PUSH
49315: LD_INT 47
49317: PUSH
49318: LD_INT 49
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: PUSH
49334: LD_VAR 0 12
49338: ARRAY
49339: ST_TO_ADDR
// list := list isect fac_list ;
49340: LD_ADDR_VAR 0 5
49344: PUSH
49345: LD_VAR 0 5
49349: PUSH
49350: LD_VAR 0 17
49354: ISECT
49355: ST_TO_ADDR
// if not list then
49356: LD_VAR 0 5
49360: NOT
49361: IFFALSE 49365
// exit ;
49363: GO 50169
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49365: LD_VAR 0 12
49369: PUSH
49370: LD_INT 3
49372: EQUAL
49373: PUSH
49374: LD_INT 49
49376: PUSH
49377: LD_VAR 0 5
49381: IN
49382: AND
49383: PUSH
49384: LD_INT 31
49386: PPUSH
49387: LD_VAR 0 16
49391: PPUSH
49392: CALL_OW 321
49396: PUSH
49397: LD_INT 2
49399: EQUAL
49400: AND
49401: IFFALSE 49461
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49403: LD_INT 22
49405: PUSH
49406: LD_VAR 0 16
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 35
49417: PUSH
49418: LD_INT 49
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 91
49427: PUSH
49428: LD_VAR 0 1
49432: PUSH
49433: LD_INT 10
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: LIST
49445: PPUSH
49446: CALL_OW 69
49450: NOT
49451: IFFALSE 49461
// weapon := ru_time_lapser ;
49453: LD_ADDR_VAR 0 18
49457: PUSH
49458: LD_INT 49
49460: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49461: LD_VAR 0 12
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: IN
49476: PUSH
49477: LD_INT 11
49479: PUSH
49480: LD_VAR 0 5
49484: IN
49485: PUSH
49486: LD_INT 30
49488: PUSH
49489: LD_VAR 0 5
49493: IN
49494: OR
49495: AND
49496: PUSH
49497: LD_INT 6
49499: PPUSH
49500: LD_VAR 0 16
49504: PPUSH
49505: CALL_OW 321
49509: PUSH
49510: LD_INT 2
49512: EQUAL
49513: AND
49514: IFFALSE 49679
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49516: LD_INT 22
49518: PUSH
49519: LD_VAR 0 16
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 35
49533: PUSH
49534: LD_INT 11
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 35
49543: PUSH
49544: LD_INT 30
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 91
49558: PUSH
49559: LD_VAR 0 1
49563: PUSH
49564: LD_INT 18
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: LIST
49576: PPUSH
49577: CALL_OW 69
49581: NOT
49582: PUSH
49583: LD_INT 22
49585: PUSH
49586: LD_VAR 0 16
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: LD_INT 30
49600: PUSH
49601: LD_INT 32
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 30
49610: PUSH
49611: LD_INT 33
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 91
49625: PUSH
49626: LD_VAR 0 1
49630: PUSH
49631: LD_INT 12
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: PPUSH
49647: CALL_OW 69
49651: PUSH
49652: LD_INT 2
49654: GREATER
49655: AND
49656: IFFALSE 49679
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49658: LD_ADDR_VAR 0 18
49662: PUSH
49663: LD_INT 11
49665: PUSH
49666: LD_INT 30
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_VAR 0 12
49677: ARRAY
49678: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49679: LD_VAR 0 18
49683: NOT
49684: PUSH
49685: LD_INT 40
49687: PPUSH
49688: LD_VAR 0 16
49692: PPUSH
49693: CALL_OW 321
49697: PUSH
49698: LD_INT 2
49700: EQUAL
49701: AND
49702: PUSH
49703: LD_INT 7
49705: PUSH
49706: LD_VAR 0 5
49710: IN
49711: PUSH
49712: LD_INT 28
49714: PUSH
49715: LD_VAR 0 5
49719: IN
49720: OR
49721: PUSH
49722: LD_INT 45
49724: PUSH
49725: LD_VAR 0 5
49729: IN
49730: OR
49731: AND
49732: IFFALSE 49986
// begin hex := GetHexInfo ( x , y ) ;
49734: LD_ADDR_VAR 0 4
49738: PUSH
49739: LD_VAR 0 10
49743: PPUSH
49744: LD_VAR 0 11
49748: PPUSH
49749: CALL_OW 546
49753: ST_TO_ADDR
// if hex [ 1 ] then
49754: LD_VAR 0 4
49758: PUSH
49759: LD_INT 1
49761: ARRAY
49762: IFFALSE 49766
// exit ;
49764: GO 50169
// height := hex [ 2 ] ;
49766: LD_ADDR_VAR 0 15
49770: PUSH
49771: LD_VAR 0 4
49775: PUSH
49776: LD_INT 2
49778: ARRAY
49779: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49780: LD_ADDR_VAR 0 14
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 3
49793: PUSH
49794: LD_INT 5
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: ST_TO_ADDR
// for i in tmp do
49803: LD_ADDR_VAR 0 8
49807: PUSH
49808: LD_VAR 0 14
49812: PUSH
49813: FOR_IN
49814: IFFALSE 49984
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49816: LD_ADDR_VAR 0 9
49820: PUSH
49821: LD_VAR 0 10
49825: PPUSH
49826: LD_VAR 0 8
49830: PPUSH
49831: LD_INT 5
49833: PPUSH
49834: CALL_OW 272
49838: PUSH
49839: LD_VAR 0 11
49843: PPUSH
49844: LD_VAR 0 8
49848: PPUSH
49849: LD_INT 5
49851: PPUSH
49852: CALL_OW 273
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49861: LD_VAR 0 9
49865: PUSH
49866: LD_INT 1
49868: ARRAY
49869: PPUSH
49870: LD_VAR 0 9
49874: PUSH
49875: LD_INT 2
49877: ARRAY
49878: PPUSH
49879: CALL_OW 488
49883: IFFALSE 49982
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49885: LD_ADDR_VAR 0 4
49889: PUSH
49890: LD_VAR 0 9
49894: PUSH
49895: LD_INT 1
49897: ARRAY
49898: PPUSH
49899: LD_VAR 0 9
49903: PUSH
49904: LD_INT 2
49906: ARRAY
49907: PPUSH
49908: CALL_OW 546
49912: ST_TO_ADDR
// if hex [ 1 ] then
49913: LD_VAR 0 4
49917: PUSH
49918: LD_INT 1
49920: ARRAY
49921: IFFALSE 49925
// continue ;
49923: GO 49813
// h := hex [ 2 ] ;
49925: LD_ADDR_VAR 0 13
49929: PUSH
49930: LD_VAR 0 4
49934: PUSH
49935: LD_INT 2
49937: ARRAY
49938: ST_TO_ADDR
// if h + 7 < height then
49939: LD_VAR 0 13
49943: PUSH
49944: LD_INT 7
49946: PLUS
49947: PUSH
49948: LD_VAR 0 15
49952: LESS
49953: IFFALSE 49982
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49955: LD_ADDR_VAR 0 18
49959: PUSH
49960: LD_INT 7
49962: PUSH
49963: LD_INT 28
49965: PUSH
49966: LD_INT 45
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: LIST
49973: PUSH
49974: LD_VAR 0 12
49978: ARRAY
49979: ST_TO_ADDR
// break ;
49980: GO 49984
// end ; end ; end ;
49982: GO 49813
49984: POP
49985: POP
// end ; if not weapon then
49986: LD_VAR 0 18
49990: NOT
49991: IFFALSE 50051
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49993: LD_ADDR_VAR 0 5
49997: PUSH
49998: LD_VAR 0 5
50002: PUSH
50003: LD_INT 11
50005: PUSH
50006: LD_INT 30
50008: PUSH
50009: LD_INT 49
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: DIFF
50017: ST_TO_ADDR
// if not list then
50018: LD_VAR 0 5
50022: NOT
50023: IFFALSE 50027
// exit ;
50025: GO 50169
// weapon := list [ rand ( 1 , list ) ] ;
50027: LD_ADDR_VAR 0 18
50031: PUSH
50032: LD_VAR 0 5
50036: PUSH
50037: LD_INT 1
50039: PPUSH
50040: LD_VAR 0 5
50044: PPUSH
50045: CALL_OW 12
50049: ARRAY
50050: ST_TO_ADDR
// end ; if weapon then
50051: LD_VAR 0 18
50055: IFFALSE 50169
// begin tmp := CostOfWeapon ( weapon ) ;
50057: LD_ADDR_VAR 0 14
50061: PUSH
50062: LD_VAR 0 18
50066: PPUSH
50067: CALL_OW 451
50071: ST_TO_ADDR
// j := GetBase ( tower ) ;
50072: LD_ADDR_VAR 0 9
50076: PUSH
50077: LD_VAR 0 1
50081: PPUSH
50082: CALL_OW 274
50086: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50087: LD_VAR 0 9
50091: PPUSH
50092: LD_INT 1
50094: PPUSH
50095: CALL_OW 275
50099: PUSH
50100: LD_VAR 0 14
50104: PUSH
50105: LD_INT 1
50107: ARRAY
50108: GREATEREQUAL
50109: PUSH
50110: LD_VAR 0 9
50114: PPUSH
50115: LD_INT 2
50117: PPUSH
50118: CALL_OW 275
50122: PUSH
50123: LD_VAR 0 14
50127: PUSH
50128: LD_INT 2
50130: ARRAY
50131: GREATEREQUAL
50132: AND
50133: PUSH
50134: LD_VAR 0 9
50138: PPUSH
50139: LD_INT 3
50141: PPUSH
50142: CALL_OW 275
50146: PUSH
50147: LD_VAR 0 14
50151: PUSH
50152: LD_INT 3
50154: ARRAY
50155: GREATEREQUAL
50156: AND
50157: IFFALSE 50169
// result := weapon ;
50159: LD_ADDR_VAR 0 3
50163: PUSH
50164: LD_VAR 0 18
50168: ST_TO_ADDR
// end ; end ;
50169: LD_VAR 0 3
50173: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50174: LD_INT 0
50176: PPUSH
50177: PPUSH
// result := true ;
50178: LD_ADDR_VAR 0 3
50182: PUSH
50183: LD_INT 1
50185: ST_TO_ADDR
// if array1 = array2 then
50186: LD_VAR 0 1
50190: PUSH
50191: LD_VAR 0 2
50195: EQUAL
50196: IFFALSE 50256
// begin for i = 1 to array1 do
50198: LD_ADDR_VAR 0 4
50202: PUSH
50203: DOUBLE
50204: LD_INT 1
50206: DEC
50207: ST_TO_ADDR
50208: LD_VAR 0 1
50212: PUSH
50213: FOR_TO
50214: IFFALSE 50252
// if array1 [ i ] <> array2 [ i ] then
50216: LD_VAR 0 1
50220: PUSH
50221: LD_VAR 0 4
50225: ARRAY
50226: PUSH
50227: LD_VAR 0 2
50231: PUSH
50232: LD_VAR 0 4
50236: ARRAY
50237: NONEQUAL
50238: IFFALSE 50250
// begin result := false ;
50240: LD_ADDR_VAR 0 3
50244: PUSH
50245: LD_INT 0
50247: ST_TO_ADDR
// break ;
50248: GO 50252
// end ;
50250: GO 50213
50252: POP
50253: POP
// end else
50254: GO 50264
// result := false ;
50256: LD_ADDR_VAR 0 3
50260: PUSH
50261: LD_INT 0
50263: ST_TO_ADDR
// end ;
50264: LD_VAR 0 3
50268: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50269: LD_INT 0
50271: PPUSH
50272: PPUSH
// if not array1 or not array2 then
50273: LD_VAR 0 1
50277: NOT
50278: PUSH
50279: LD_VAR 0 2
50283: NOT
50284: OR
50285: IFFALSE 50289
// exit ;
50287: GO 50353
// result := true ;
50289: LD_ADDR_VAR 0 3
50293: PUSH
50294: LD_INT 1
50296: ST_TO_ADDR
// for i = 1 to array1 do
50297: LD_ADDR_VAR 0 4
50301: PUSH
50302: DOUBLE
50303: LD_INT 1
50305: DEC
50306: ST_TO_ADDR
50307: LD_VAR 0 1
50311: PUSH
50312: FOR_TO
50313: IFFALSE 50351
// if array1 [ i ] <> array2 [ i ] then
50315: LD_VAR 0 1
50319: PUSH
50320: LD_VAR 0 4
50324: ARRAY
50325: PUSH
50326: LD_VAR 0 2
50330: PUSH
50331: LD_VAR 0 4
50335: ARRAY
50336: NONEQUAL
50337: IFFALSE 50349
// begin result := false ;
50339: LD_ADDR_VAR 0 3
50343: PUSH
50344: LD_INT 0
50346: ST_TO_ADDR
// break ;
50347: GO 50351
// end ;
50349: GO 50312
50351: POP
50352: POP
// end ;
50353: LD_VAR 0 3
50357: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50358: LD_INT 0
50360: PPUSH
50361: PPUSH
50362: PPUSH
// pom := GetBase ( fac ) ;
50363: LD_ADDR_VAR 0 5
50367: PUSH
50368: LD_VAR 0 1
50372: PPUSH
50373: CALL_OW 274
50377: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50378: LD_ADDR_VAR 0 4
50382: PUSH
50383: LD_VAR 0 2
50387: PUSH
50388: LD_INT 1
50390: ARRAY
50391: PPUSH
50392: LD_VAR 0 2
50396: PUSH
50397: LD_INT 2
50399: ARRAY
50400: PPUSH
50401: LD_VAR 0 2
50405: PUSH
50406: LD_INT 3
50408: ARRAY
50409: PPUSH
50410: LD_VAR 0 2
50414: PUSH
50415: LD_INT 4
50417: ARRAY
50418: PPUSH
50419: CALL_OW 449
50423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50424: LD_ADDR_VAR 0 3
50428: PUSH
50429: LD_VAR 0 5
50433: PPUSH
50434: LD_INT 1
50436: PPUSH
50437: CALL_OW 275
50441: PUSH
50442: LD_VAR 0 4
50446: PUSH
50447: LD_INT 1
50449: ARRAY
50450: GREATEREQUAL
50451: PUSH
50452: LD_VAR 0 5
50456: PPUSH
50457: LD_INT 2
50459: PPUSH
50460: CALL_OW 275
50464: PUSH
50465: LD_VAR 0 4
50469: PUSH
50470: LD_INT 2
50472: ARRAY
50473: GREATEREQUAL
50474: AND
50475: PUSH
50476: LD_VAR 0 5
50480: PPUSH
50481: LD_INT 3
50483: PPUSH
50484: CALL_OW 275
50488: PUSH
50489: LD_VAR 0 4
50493: PUSH
50494: LD_INT 3
50496: ARRAY
50497: GREATEREQUAL
50498: AND
50499: ST_TO_ADDR
// end ;
50500: LD_VAR 0 3
50504: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50505: LD_INT 0
50507: PPUSH
50508: PPUSH
50509: PPUSH
50510: PPUSH
// pom := GetBase ( building ) ;
50511: LD_ADDR_VAR 0 3
50515: PUSH
50516: LD_VAR 0 1
50520: PPUSH
50521: CALL_OW 274
50525: ST_TO_ADDR
// if not pom then
50526: LD_VAR 0 3
50530: NOT
50531: IFFALSE 50535
// exit ;
50533: GO 50705
// btype := GetBType ( building ) ;
50535: LD_ADDR_VAR 0 5
50539: PUSH
50540: LD_VAR 0 1
50544: PPUSH
50545: CALL_OW 266
50549: ST_TO_ADDR
// if btype = b_armoury then
50550: LD_VAR 0 5
50554: PUSH
50555: LD_INT 4
50557: EQUAL
50558: IFFALSE 50568
// btype := b_barracks ;
50560: LD_ADDR_VAR 0 5
50564: PUSH
50565: LD_INT 5
50567: ST_TO_ADDR
// if btype = b_depot then
50568: LD_VAR 0 5
50572: PUSH
50573: LD_INT 0
50575: EQUAL
50576: IFFALSE 50586
// btype := b_warehouse ;
50578: LD_ADDR_VAR 0 5
50582: PUSH
50583: LD_INT 1
50585: ST_TO_ADDR
// if btype = b_workshop then
50586: LD_VAR 0 5
50590: PUSH
50591: LD_INT 2
50593: EQUAL
50594: IFFALSE 50604
// btype := b_factory ;
50596: LD_ADDR_VAR 0 5
50600: PUSH
50601: LD_INT 3
50603: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50604: LD_ADDR_VAR 0 4
50608: PUSH
50609: LD_VAR 0 5
50613: PPUSH
50614: LD_VAR 0 1
50618: PPUSH
50619: CALL_OW 248
50623: PPUSH
50624: CALL_OW 450
50628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50629: LD_ADDR_VAR 0 2
50633: PUSH
50634: LD_VAR 0 3
50638: PPUSH
50639: LD_INT 1
50641: PPUSH
50642: CALL_OW 275
50646: PUSH
50647: LD_VAR 0 4
50651: PUSH
50652: LD_INT 1
50654: ARRAY
50655: GREATEREQUAL
50656: PUSH
50657: LD_VAR 0 3
50661: PPUSH
50662: LD_INT 2
50664: PPUSH
50665: CALL_OW 275
50669: PUSH
50670: LD_VAR 0 4
50674: PUSH
50675: LD_INT 2
50677: ARRAY
50678: GREATEREQUAL
50679: AND
50680: PUSH
50681: LD_VAR 0 3
50685: PPUSH
50686: LD_INT 3
50688: PPUSH
50689: CALL_OW 275
50693: PUSH
50694: LD_VAR 0 4
50698: PUSH
50699: LD_INT 3
50701: ARRAY
50702: GREATEREQUAL
50703: AND
50704: ST_TO_ADDR
// end ;
50705: LD_VAR 0 2
50709: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50710: LD_INT 0
50712: PPUSH
50713: PPUSH
50714: PPUSH
// pom := GetBase ( building ) ;
50715: LD_ADDR_VAR 0 4
50719: PUSH
50720: LD_VAR 0 1
50724: PPUSH
50725: CALL_OW 274
50729: ST_TO_ADDR
// if not pom then
50730: LD_VAR 0 4
50734: NOT
50735: IFFALSE 50739
// exit ;
50737: GO 50840
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50739: LD_ADDR_VAR 0 5
50743: PUSH
50744: LD_VAR 0 2
50748: PPUSH
50749: LD_VAR 0 1
50753: PPUSH
50754: CALL_OW 248
50758: PPUSH
50759: CALL_OW 450
50763: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50764: LD_ADDR_VAR 0 3
50768: PUSH
50769: LD_VAR 0 4
50773: PPUSH
50774: LD_INT 1
50776: PPUSH
50777: CALL_OW 275
50781: PUSH
50782: LD_VAR 0 5
50786: PUSH
50787: LD_INT 1
50789: ARRAY
50790: GREATEREQUAL
50791: PUSH
50792: LD_VAR 0 4
50796: PPUSH
50797: LD_INT 2
50799: PPUSH
50800: CALL_OW 275
50804: PUSH
50805: LD_VAR 0 5
50809: PUSH
50810: LD_INT 2
50812: ARRAY
50813: GREATEREQUAL
50814: AND
50815: PUSH
50816: LD_VAR 0 4
50820: PPUSH
50821: LD_INT 3
50823: PPUSH
50824: CALL_OW 275
50828: PUSH
50829: LD_VAR 0 5
50833: PUSH
50834: LD_INT 3
50836: ARRAY
50837: GREATEREQUAL
50838: AND
50839: ST_TO_ADDR
// end ;
50840: LD_VAR 0 3
50844: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50845: LD_INT 0
50847: PPUSH
50848: PPUSH
50849: PPUSH
50850: PPUSH
50851: PPUSH
50852: PPUSH
50853: PPUSH
50854: PPUSH
50855: PPUSH
50856: PPUSH
50857: PPUSH
// result := false ;
50858: LD_ADDR_VAR 0 8
50862: PUSH
50863: LD_INT 0
50865: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50866: LD_VAR 0 5
50870: NOT
50871: PUSH
50872: LD_VAR 0 1
50876: NOT
50877: OR
50878: PUSH
50879: LD_VAR 0 2
50883: NOT
50884: OR
50885: PUSH
50886: LD_VAR 0 3
50890: NOT
50891: OR
50892: IFFALSE 50896
// exit ;
50894: GO 51710
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50896: LD_ADDR_VAR 0 14
50900: PUSH
50901: LD_VAR 0 1
50905: PPUSH
50906: LD_VAR 0 2
50910: PPUSH
50911: LD_VAR 0 3
50915: PPUSH
50916: LD_VAR 0 4
50920: PPUSH
50921: LD_VAR 0 5
50925: PUSH
50926: LD_INT 1
50928: ARRAY
50929: PPUSH
50930: CALL_OW 248
50934: PPUSH
50935: LD_INT 0
50937: PPUSH
50938: CALL 52943 0 6
50942: ST_TO_ADDR
// if not hexes then
50943: LD_VAR 0 14
50947: NOT
50948: IFFALSE 50952
// exit ;
50950: GO 51710
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50952: LD_ADDR_VAR 0 17
50956: PUSH
50957: LD_VAR 0 5
50961: PPUSH
50962: LD_INT 22
50964: PUSH
50965: LD_VAR 0 13
50969: PPUSH
50970: CALL_OW 255
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 30
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 30
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PPUSH
51011: CALL_OW 72
51015: ST_TO_ADDR
// for i = 1 to hexes do
51016: LD_ADDR_VAR 0 9
51020: PUSH
51021: DOUBLE
51022: LD_INT 1
51024: DEC
51025: ST_TO_ADDR
51026: LD_VAR 0 14
51030: PUSH
51031: FOR_TO
51032: IFFALSE 51708
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51034: LD_ADDR_VAR 0 13
51038: PUSH
51039: LD_VAR 0 14
51043: PUSH
51044: LD_VAR 0 9
51048: ARRAY
51049: PUSH
51050: LD_INT 1
51052: ARRAY
51053: PPUSH
51054: LD_VAR 0 14
51058: PUSH
51059: LD_VAR 0 9
51063: ARRAY
51064: PUSH
51065: LD_INT 2
51067: ARRAY
51068: PPUSH
51069: CALL_OW 428
51073: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51074: LD_VAR 0 14
51078: PUSH
51079: LD_VAR 0 9
51083: ARRAY
51084: PUSH
51085: LD_INT 1
51087: ARRAY
51088: PPUSH
51089: LD_VAR 0 14
51093: PUSH
51094: LD_VAR 0 9
51098: ARRAY
51099: PUSH
51100: LD_INT 2
51102: ARRAY
51103: PPUSH
51104: CALL_OW 351
51108: PUSH
51109: LD_VAR 0 14
51113: PUSH
51114: LD_VAR 0 9
51118: ARRAY
51119: PUSH
51120: LD_INT 1
51122: ARRAY
51123: PPUSH
51124: LD_VAR 0 14
51128: PUSH
51129: LD_VAR 0 9
51133: ARRAY
51134: PUSH
51135: LD_INT 2
51137: ARRAY
51138: PPUSH
51139: CALL_OW 488
51143: NOT
51144: OR
51145: PUSH
51146: LD_VAR 0 13
51150: PPUSH
51151: CALL_OW 247
51155: PUSH
51156: LD_INT 3
51158: EQUAL
51159: OR
51160: IFFALSE 51166
// exit ;
51162: POP
51163: POP
51164: GO 51710
// if not tmp then
51166: LD_VAR 0 13
51170: NOT
51171: IFFALSE 51175
// continue ;
51173: GO 51031
// result := true ;
51175: LD_ADDR_VAR 0 8
51179: PUSH
51180: LD_INT 1
51182: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51183: LD_VAR 0 6
51187: PUSH
51188: LD_VAR 0 13
51192: PPUSH
51193: CALL_OW 247
51197: PUSH
51198: LD_INT 2
51200: EQUAL
51201: AND
51202: PUSH
51203: LD_VAR 0 13
51207: PPUSH
51208: CALL_OW 263
51212: PUSH
51213: LD_INT 1
51215: EQUAL
51216: AND
51217: IFFALSE 51381
// begin if IsDrivenBy ( tmp ) then
51219: LD_VAR 0 13
51223: PPUSH
51224: CALL_OW 311
51228: IFFALSE 51232
// continue ;
51230: GO 51031
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51232: LD_VAR 0 6
51236: PPUSH
51237: LD_INT 3
51239: PUSH
51240: LD_INT 60
51242: PUSH
51243: EMPTY
51244: LIST
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: LD_INT 55
51255: PUSH
51256: EMPTY
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PPUSH
51267: CALL_OW 72
51271: IFFALSE 51379
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51273: LD_ADDR_VAR 0 18
51277: PUSH
51278: LD_VAR 0 6
51282: PPUSH
51283: LD_INT 3
51285: PUSH
51286: LD_INT 60
51288: PUSH
51289: EMPTY
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: LD_INT 55
51301: PUSH
51302: EMPTY
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PPUSH
51313: CALL_OW 72
51317: PUSH
51318: LD_INT 1
51320: ARRAY
51321: ST_TO_ADDR
// if IsInUnit ( driver ) then
51322: LD_VAR 0 18
51326: PPUSH
51327: CALL_OW 310
51331: IFFALSE 51342
// ComExit ( driver ) ;
51333: LD_VAR 0 18
51337: PPUSH
51338: CALL 76723 0 1
// AddComEnterUnit ( driver , tmp ) ;
51342: LD_VAR 0 18
51346: PPUSH
51347: LD_VAR 0 13
51351: PPUSH
51352: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51356: LD_VAR 0 18
51360: PPUSH
51361: LD_VAR 0 7
51365: PPUSH
51366: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51370: LD_VAR 0 18
51374: PPUSH
51375: CALL_OW 181
// end ; continue ;
51379: GO 51031
// end ; if not cleaners or not tmp in cleaners then
51381: LD_VAR 0 6
51385: NOT
51386: PUSH
51387: LD_VAR 0 13
51391: PUSH
51392: LD_VAR 0 6
51396: IN
51397: NOT
51398: OR
51399: IFFALSE 51706
// begin if dep then
51401: LD_VAR 0 17
51405: IFFALSE 51541
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51407: LD_ADDR_VAR 0 16
51411: PUSH
51412: LD_VAR 0 17
51416: PUSH
51417: LD_INT 1
51419: ARRAY
51420: PPUSH
51421: CALL_OW 250
51425: PPUSH
51426: LD_VAR 0 17
51430: PUSH
51431: LD_INT 1
51433: ARRAY
51434: PPUSH
51435: CALL_OW 254
51439: PPUSH
51440: LD_INT 5
51442: PPUSH
51443: CALL_OW 272
51447: PUSH
51448: LD_VAR 0 17
51452: PUSH
51453: LD_INT 1
51455: ARRAY
51456: PPUSH
51457: CALL_OW 251
51461: PPUSH
51462: LD_VAR 0 17
51466: PUSH
51467: LD_INT 1
51469: ARRAY
51470: PPUSH
51471: CALL_OW 254
51475: PPUSH
51476: LD_INT 5
51478: PPUSH
51479: CALL_OW 273
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51488: LD_VAR 0 16
51492: PUSH
51493: LD_INT 1
51495: ARRAY
51496: PPUSH
51497: LD_VAR 0 16
51501: PUSH
51502: LD_INT 2
51504: ARRAY
51505: PPUSH
51506: CALL_OW 488
51510: IFFALSE 51541
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51512: LD_VAR 0 13
51516: PPUSH
51517: LD_VAR 0 16
51521: PUSH
51522: LD_INT 1
51524: ARRAY
51525: PPUSH
51526: LD_VAR 0 16
51530: PUSH
51531: LD_INT 2
51533: ARRAY
51534: PPUSH
51535: CALL_OW 111
// continue ;
51539: GO 51031
// end ; end ; r := GetDir ( tmp ) ;
51541: LD_ADDR_VAR 0 15
51545: PUSH
51546: LD_VAR 0 13
51550: PPUSH
51551: CALL_OW 254
51555: ST_TO_ADDR
// if r = 5 then
51556: LD_VAR 0 15
51560: PUSH
51561: LD_INT 5
51563: EQUAL
51564: IFFALSE 51574
// r := 0 ;
51566: LD_ADDR_VAR 0 15
51570: PUSH
51571: LD_INT 0
51573: ST_TO_ADDR
// for j = r to 5 do
51574: LD_ADDR_VAR 0 10
51578: PUSH
51579: DOUBLE
51580: LD_VAR 0 15
51584: DEC
51585: ST_TO_ADDR
51586: LD_INT 5
51588: PUSH
51589: FOR_TO
51590: IFFALSE 51704
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51592: LD_ADDR_VAR 0 11
51596: PUSH
51597: LD_VAR 0 13
51601: PPUSH
51602: CALL_OW 250
51606: PPUSH
51607: LD_VAR 0 10
51611: PPUSH
51612: LD_INT 2
51614: PPUSH
51615: CALL_OW 272
51619: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51620: LD_ADDR_VAR 0 12
51624: PUSH
51625: LD_VAR 0 13
51629: PPUSH
51630: CALL_OW 251
51634: PPUSH
51635: LD_VAR 0 10
51639: PPUSH
51640: LD_INT 2
51642: PPUSH
51643: CALL_OW 273
51647: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51648: LD_VAR 0 11
51652: PPUSH
51653: LD_VAR 0 12
51657: PPUSH
51658: CALL_OW 488
51662: PUSH
51663: LD_VAR 0 11
51667: PPUSH
51668: LD_VAR 0 12
51672: PPUSH
51673: CALL_OW 428
51677: NOT
51678: AND
51679: IFFALSE 51702
// begin ComMoveXY ( tmp , _x , _y ) ;
51681: LD_VAR 0 13
51685: PPUSH
51686: LD_VAR 0 11
51690: PPUSH
51691: LD_VAR 0 12
51695: PPUSH
51696: CALL_OW 111
// break ;
51700: GO 51704
// end ; end ;
51702: GO 51589
51704: POP
51705: POP
// end ; end ;
51706: GO 51031
51708: POP
51709: POP
// end ;
51710: LD_VAR 0 8
51714: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51715: LD_INT 0
51717: PPUSH
// result := true ;
51718: LD_ADDR_VAR 0 3
51722: PUSH
51723: LD_INT 1
51725: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51726: LD_VAR 0 2
51730: PUSH
51731: LD_INT 24
51733: DOUBLE
51734: EQUAL
51735: IFTRUE 51745
51737: LD_INT 33
51739: DOUBLE
51740: EQUAL
51741: IFTRUE 51745
51743: GO 51770
51745: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51746: LD_ADDR_VAR 0 3
51750: PUSH
51751: LD_INT 32
51753: PPUSH
51754: LD_VAR 0 1
51758: PPUSH
51759: CALL_OW 321
51763: PUSH
51764: LD_INT 2
51766: EQUAL
51767: ST_TO_ADDR
51768: GO 52086
51770: LD_INT 20
51772: DOUBLE
51773: EQUAL
51774: IFTRUE 51778
51776: GO 51803
51778: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51779: LD_ADDR_VAR 0 3
51783: PUSH
51784: LD_INT 6
51786: PPUSH
51787: LD_VAR 0 1
51791: PPUSH
51792: CALL_OW 321
51796: PUSH
51797: LD_INT 2
51799: EQUAL
51800: ST_TO_ADDR
51801: GO 52086
51803: LD_INT 22
51805: DOUBLE
51806: EQUAL
51807: IFTRUE 51817
51809: LD_INT 36
51811: DOUBLE
51812: EQUAL
51813: IFTRUE 51817
51815: GO 51842
51817: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51818: LD_ADDR_VAR 0 3
51822: PUSH
51823: LD_INT 15
51825: PPUSH
51826: LD_VAR 0 1
51830: PPUSH
51831: CALL_OW 321
51835: PUSH
51836: LD_INT 2
51838: EQUAL
51839: ST_TO_ADDR
51840: GO 52086
51842: LD_INT 30
51844: DOUBLE
51845: EQUAL
51846: IFTRUE 51850
51848: GO 51875
51850: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51851: LD_ADDR_VAR 0 3
51855: PUSH
51856: LD_INT 20
51858: PPUSH
51859: LD_VAR 0 1
51863: PPUSH
51864: CALL_OW 321
51868: PUSH
51869: LD_INT 2
51871: EQUAL
51872: ST_TO_ADDR
51873: GO 52086
51875: LD_INT 28
51877: DOUBLE
51878: EQUAL
51879: IFTRUE 51889
51881: LD_INT 21
51883: DOUBLE
51884: EQUAL
51885: IFTRUE 51889
51887: GO 51914
51889: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51890: LD_ADDR_VAR 0 3
51894: PUSH
51895: LD_INT 21
51897: PPUSH
51898: LD_VAR 0 1
51902: PPUSH
51903: CALL_OW 321
51907: PUSH
51908: LD_INT 2
51910: EQUAL
51911: ST_TO_ADDR
51912: GO 52086
51914: LD_INT 16
51916: DOUBLE
51917: EQUAL
51918: IFTRUE 51922
51920: GO 51947
51922: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51923: LD_ADDR_VAR 0 3
51927: PUSH
51928: LD_INT 84
51930: PPUSH
51931: LD_VAR 0 1
51935: PPUSH
51936: CALL_OW 321
51940: PUSH
51941: LD_INT 2
51943: EQUAL
51944: ST_TO_ADDR
51945: GO 52086
51947: LD_INT 19
51949: DOUBLE
51950: EQUAL
51951: IFTRUE 51961
51953: LD_INT 23
51955: DOUBLE
51956: EQUAL
51957: IFTRUE 51961
51959: GO 51986
51961: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51962: LD_ADDR_VAR 0 3
51966: PUSH
51967: LD_INT 83
51969: PPUSH
51970: LD_VAR 0 1
51974: PPUSH
51975: CALL_OW 321
51979: PUSH
51980: LD_INT 2
51982: EQUAL
51983: ST_TO_ADDR
51984: GO 52086
51986: LD_INT 17
51988: DOUBLE
51989: EQUAL
51990: IFTRUE 51994
51992: GO 52019
51994: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51995: LD_ADDR_VAR 0 3
51999: PUSH
52000: LD_INT 39
52002: PPUSH
52003: LD_VAR 0 1
52007: PPUSH
52008: CALL_OW 321
52012: PUSH
52013: LD_INT 2
52015: EQUAL
52016: ST_TO_ADDR
52017: GO 52086
52019: LD_INT 18
52021: DOUBLE
52022: EQUAL
52023: IFTRUE 52027
52025: GO 52052
52027: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52028: LD_ADDR_VAR 0 3
52032: PUSH
52033: LD_INT 40
52035: PPUSH
52036: LD_VAR 0 1
52040: PPUSH
52041: CALL_OW 321
52045: PUSH
52046: LD_INT 2
52048: EQUAL
52049: ST_TO_ADDR
52050: GO 52086
52052: LD_INT 27
52054: DOUBLE
52055: EQUAL
52056: IFTRUE 52060
52058: GO 52085
52060: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52061: LD_ADDR_VAR 0 3
52065: PUSH
52066: LD_INT 35
52068: PPUSH
52069: LD_VAR 0 1
52073: PPUSH
52074: CALL_OW 321
52078: PUSH
52079: LD_INT 2
52081: EQUAL
52082: ST_TO_ADDR
52083: GO 52086
52085: POP
// end ;
52086: LD_VAR 0 3
52090: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52091: LD_INT 0
52093: PPUSH
52094: PPUSH
52095: PPUSH
52096: PPUSH
52097: PPUSH
52098: PPUSH
52099: PPUSH
52100: PPUSH
52101: PPUSH
52102: PPUSH
52103: PPUSH
// result := false ;
52104: LD_ADDR_VAR 0 6
52108: PUSH
52109: LD_INT 0
52111: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52112: LD_VAR 0 1
52116: NOT
52117: PUSH
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL_OW 266
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: IN
52138: NOT
52139: OR
52140: PUSH
52141: LD_VAR 0 2
52145: NOT
52146: OR
52147: PUSH
52148: LD_VAR 0 5
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 4
52167: PUSH
52168: LD_INT 5
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: IN
52179: NOT
52180: OR
52181: PUSH
52182: LD_VAR 0 3
52186: PPUSH
52187: LD_VAR 0 4
52191: PPUSH
52192: CALL_OW 488
52196: NOT
52197: OR
52198: IFFALSE 52202
// exit ;
52200: GO 52938
// side := GetSide ( depot ) ;
52202: LD_ADDR_VAR 0 9
52206: PUSH
52207: LD_VAR 0 1
52211: PPUSH
52212: CALL_OW 255
52216: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52217: LD_VAR 0 9
52221: PPUSH
52222: LD_VAR 0 2
52226: PPUSH
52227: CALL 51715 0 2
52231: NOT
52232: IFFALSE 52236
// exit ;
52234: GO 52938
// pom := GetBase ( depot ) ;
52236: LD_ADDR_VAR 0 10
52240: PUSH
52241: LD_VAR 0 1
52245: PPUSH
52246: CALL_OW 274
52250: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52251: LD_ADDR_VAR 0 11
52255: PUSH
52256: LD_VAR 0 2
52260: PPUSH
52261: LD_VAR 0 1
52265: PPUSH
52266: CALL_OW 248
52270: PPUSH
52271: CALL_OW 450
52275: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52276: LD_VAR 0 10
52280: PPUSH
52281: LD_INT 1
52283: PPUSH
52284: CALL_OW 275
52288: PUSH
52289: LD_VAR 0 11
52293: PUSH
52294: LD_INT 1
52296: ARRAY
52297: GREATEREQUAL
52298: PUSH
52299: LD_VAR 0 10
52303: PPUSH
52304: LD_INT 2
52306: PPUSH
52307: CALL_OW 275
52311: PUSH
52312: LD_VAR 0 11
52316: PUSH
52317: LD_INT 2
52319: ARRAY
52320: GREATEREQUAL
52321: AND
52322: PUSH
52323: LD_VAR 0 10
52327: PPUSH
52328: LD_INT 3
52330: PPUSH
52331: CALL_OW 275
52335: PUSH
52336: LD_VAR 0 11
52340: PUSH
52341: LD_INT 3
52343: ARRAY
52344: GREATEREQUAL
52345: AND
52346: NOT
52347: IFFALSE 52351
// exit ;
52349: GO 52938
// if GetBType ( depot ) = b_depot then
52351: LD_VAR 0 1
52355: PPUSH
52356: CALL_OW 266
52360: PUSH
52361: LD_INT 0
52363: EQUAL
52364: IFFALSE 52376
// dist := 28 else
52366: LD_ADDR_VAR 0 14
52370: PUSH
52371: LD_INT 28
52373: ST_TO_ADDR
52374: GO 52384
// dist := 36 ;
52376: LD_ADDR_VAR 0 14
52380: PUSH
52381: LD_INT 36
52383: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52384: LD_VAR 0 1
52388: PPUSH
52389: LD_VAR 0 3
52393: PPUSH
52394: LD_VAR 0 4
52398: PPUSH
52399: CALL_OW 297
52403: PUSH
52404: LD_VAR 0 14
52408: GREATER
52409: IFFALSE 52413
// exit ;
52411: GO 52938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52413: LD_ADDR_VAR 0 12
52417: PUSH
52418: LD_VAR 0 2
52422: PPUSH
52423: LD_VAR 0 3
52427: PPUSH
52428: LD_VAR 0 4
52432: PPUSH
52433: LD_VAR 0 5
52437: PPUSH
52438: LD_VAR 0 1
52442: PPUSH
52443: CALL_OW 248
52447: PPUSH
52448: LD_INT 0
52450: PPUSH
52451: CALL 52943 0 6
52455: ST_TO_ADDR
// if not hexes then
52456: LD_VAR 0 12
52460: NOT
52461: IFFALSE 52465
// exit ;
52463: GO 52938
// hex := GetHexInfo ( x , y ) ;
52465: LD_ADDR_VAR 0 15
52469: PUSH
52470: LD_VAR 0 3
52474: PPUSH
52475: LD_VAR 0 4
52479: PPUSH
52480: CALL_OW 546
52484: ST_TO_ADDR
// if hex [ 1 ] then
52485: LD_VAR 0 15
52489: PUSH
52490: LD_INT 1
52492: ARRAY
52493: IFFALSE 52497
// exit ;
52495: GO 52938
// height := hex [ 2 ] ;
52497: LD_ADDR_VAR 0 13
52501: PUSH
52502: LD_VAR 0 15
52506: PUSH
52507: LD_INT 2
52509: ARRAY
52510: ST_TO_ADDR
// for i = 1 to hexes do
52511: LD_ADDR_VAR 0 7
52515: PUSH
52516: DOUBLE
52517: LD_INT 1
52519: DEC
52520: ST_TO_ADDR
52521: LD_VAR 0 12
52525: PUSH
52526: FOR_TO
52527: IFFALSE 52857
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52529: LD_VAR 0 12
52533: PUSH
52534: LD_VAR 0 7
52538: ARRAY
52539: PUSH
52540: LD_INT 1
52542: ARRAY
52543: PPUSH
52544: LD_VAR 0 12
52548: PUSH
52549: LD_VAR 0 7
52553: ARRAY
52554: PUSH
52555: LD_INT 2
52557: ARRAY
52558: PPUSH
52559: CALL_OW 488
52563: NOT
52564: PUSH
52565: LD_VAR 0 12
52569: PUSH
52570: LD_VAR 0 7
52574: ARRAY
52575: PUSH
52576: LD_INT 1
52578: ARRAY
52579: PPUSH
52580: LD_VAR 0 12
52584: PUSH
52585: LD_VAR 0 7
52589: ARRAY
52590: PUSH
52591: LD_INT 2
52593: ARRAY
52594: PPUSH
52595: CALL_OW 428
52599: PUSH
52600: LD_INT 0
52602: GREATER
52603: OR
52604: PUSH
52605: LD_VAR 0 12
52609: PUSH
52610: LD_VAR 0 7
52614: ARRAY
52615: PUSH
52616: LD_INT 1
52618: ARRAY
52619: PPUSH
52620: LD_VAR 0 12
52624: PUSH
52625: LD_VAR 0 7
52629: ARRAY
52630: PUSH
52631: LD_INT 2
52633: ARRAY
52634: PPUSH
52635: CALL_OW 351
52639: OR
52640: IFFALSE 52646
// exit ;
52642: POP
52643: POP
52644: GO 52938
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52646: LD_ADDR_VAR 0 8
52650: PUSH
52651: LD_VAR 0 12
52655: PUSH
52656: LD_VAR 0 7
52660: ARRAY
52661: PUSH
52662: LD_INT 1
52664: ARRAY
52665: PPUSH
52666: LD_VAR 0 12
52670: PUSH
52671: LD_VAR 0 7
52675: ARRAY
52676: PUSH
52677: LD_INT 2
52679: ARRAY
52680: PPUSH
52681: CALL_OW 546
52685: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52686: LD_VAR 0 8
52690: PUSH
52691: LD_INT 1
52693: ARRAY
52694: PUSH
52695: LD_VAR 0 8
52699: PUSH
52700: LD_INT 2
52702: ARRAY
52703: PUSH
52704: LD_VAR 0 13
52708: PUSH
52709: LD_INT 2
52711: PLUS
52712: GREATER
52713: OR
52714: PUSH
52715: LD_VAR 0 8
52719: PUSH
52720: LD_INT 2
52722: ARRAY
52723: PUSH
52724: LD_VAR 0 13
52728: PUSH
52729: LD_INT 2
52731: MINUS
52732: LESS
52733: OR
52734: PUSH
52735: LD_VAR 0 8
52739: PUSH
52740: LD_INT 3
52742: ARRAY
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 8
52749: PUSH
52750: LD_INT 9
52752: PUSH
52753: LD_INT 10
52755: PUSH
52756: LD_INT 11
52758: PUSH
52759: LD_INT 12
52761: PUSH
52762: LD_INT 13
52764: PUSH
52765: LD_INT 16
52767: PUSH
52768: LD_INT 17
52770: PUSH
52771: LD_INT 18
52773: PUSH
52774: LD_INT 19
52776: PUSH
52777: LD_INT 20
52779: PUSH
52780: LD_INT 21
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: IN
52798: NOT
52799: OR
52800: PUSH
52801: LD_VAR 0 8
52805: PUSH
52806: LD_INT 5
52808: ARRAY
52809: NOT
52810: OR
52811: PUSH
52812: LD_VAR 0 8
52816: PUSH
52817: LD_INT 6
52819: ARRAY
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 7
52829: PUSH
52830: LD_INT 9
52832: PUSH
52833: LD_INT 10
52835: PUSH
52836: LD_INT 11
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: IN
52847: NOT
52848: OR
52849: IFFALSE 52855
// exit ;
52851: POP
52852: POP
52853: GO 52938
// end ;
52855: GO 52526
52857: POP
52858: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52859: LD_VAR 0 9
52863: PPUSH
52864: LD_VAR 0 3
52868: PPUSH
52869: LD_VAR 0 4
52873: PPUSH
52874: LD_INT 20
52876: PPUSH
52877: CALL 44890 0 4
52881: PUSH
52882: LD_INT 4
52884: ARRAY
52885: IFFALSE 52889
// exit ;
52887: GO 52938
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52889: LD_VAR 0 2
52893: PUSH
52894: LD_INT 29
52896: PUSH
52897: LD_INT 30
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: IN
52904: PUSH
52905: LD_VAR 0 3
52909: PPUSH
52910: LD_VAR 0 4
52914: PPUSH
52915: LD_VAR 0 9
52919: PPUSH
52920: CALL_OW 440
52924: NOT
52925: AND
52926: IFFALSE 52930
// exit ;
52928: GO 52938
// result := true ;
52930: LD_ADDR_VAR 0 6
52934: PUSH
52935: LD_INT 1
52937: ST_TO_ADDR
// end ;
52938: LD_VAR 0 6
52942: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52943: LD_INT 0
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
52956: PPUSH
52957: PPUSH
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
52983: PPUSH
52984: PPUSH
52985: PPUSH
52986: PPUSH
52987: PPUSH
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
// result = [ ] ;
53003: LD_ADDR_VAR 0 7
53007: PUSH
53008: EMPTY
53009: ST_TO_ADDR
// temp_list = [ ] ;
53010: LD_ADDR_VAR 0 9
53014: PUSH
53015: EMPTY
53016: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53017: LD_VAR 0 4
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: LD_INT 3
53033: PUSH
53034: LD_INT 4
53036: PUSH
53037: LD_INT 5
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: IN
53048: NOT
53049: PUSH
53050: LD_VAR 0 1
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: IN
53065: PUSH
53066: LD_VAR 0 5
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: LD_INT 3
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: IN
53085: NOT
53086: AND
53087: OR
53088: IFFALSE 53092
// exit ;
53090: GO 71483
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53092: LD_VAR 0 1
53096: PUSH
53097: LD_INT 6
53099: PUSH
53100: LD_INT 7
53102: PUSH
53103: LD_INT 8
53105: PUSH
53106: LD_INT 13
53108: PUSH
53109: LD_INT 12
53111: PUSH
53112: LD_INT 15
53114: PUSH
53115: LD_INT 11
53117: PUSH
53118: LD_INT 14
53120: PUSH
53121: LD_INT 10
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: IN
53135: IFFALSE 53145
// btype = b_lab ;
53137: LD_ADDR_VAR 0 1
53141: PUSH
53142: LD_INT 6
53144: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53145: LD_VAR 0 6
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: IN
53164: NOT
53165: PUSH
53166: LD_VAR 0 1
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 6
53185: PUSH
53186: LD_INT 36
53188: PUSH
53189: LD_INT 4
53191: PUSH
53192: LD_INT 5
53194: PUSH
53195: LD_INT 31
53197: PUSH
53198: LD_INT 32
53200: PUSH
53201: LD_INT 33
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: IN
53217: NOT
53218: PUSH
53219: LD_VAR 0 6
53223: PUSH
53224: LD_INT 1
53226: EQUAL
53227: AND
53228: OR
53229: PUSH
53230: LD_VAR 0 1
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: IN
53245: NOT
53246: PUSH
53247: LD_VAR 0 6
53251: PUSH
53252: LD_INT 2
53254: EQUAL
53255: AND
53256: OR
53257: IFFALSE 53267
// mode = 0 ;
53259: LD_ADDR_VAR 0 6
53263: PUSH
53264: LD_INT 0
53266: ST_TO_ADDR
// case mode of 0 :
53267: LD_VAR 0 6
53271: PUSH
53272: LD_INT 0
53274: DOUBLE
53275: EQUAL
53276: IFTRUE 53280
53278: GO 64733
53280: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53281: LD_ADDR_VAR 0 11
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53474: LD_ADDR_VAR 0 12
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53670: LD_ADDR_VAR 0 13
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53869: LD_ADDR_VAR 0 14
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54065: LD_ADDR_VAR 0 15
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 3
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54258: LD_ADDR_VAR 0 16
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 2
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: LD_INT 3
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54451: LD_ADDR_VAR 0 17
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54681: LD_ADDR_VAR 0 18
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54911: LD_ADDR_VAR 0 19
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55141: LD_ADDR_VAR 0 20
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55371: LD_ADDR_VAR 0 21
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55601: LD_ADDR_VAR 0 22
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55831: LD_ADDR_VAR 0 23
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56111: LD_ADDR_VAR 0 24
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56387: LD_ADDR_VAR 0 25
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 3
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 3
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56661: LD_ADDR_VAR 0 26
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56937: LD_ADDR_VAR 0 27
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 2
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 3
57170: NEG
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57217: LD_ADDR_VAR 0 28
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 3
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 3
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57499: LD_ADDR_VAR 0 29
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 3
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57778: LD_ADDR_VAR 0 30
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58056: LD_ADDR_VAR 0 31
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58334: LD_ADDR_VAR 0 32
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 2
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 2
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58612: LD_ADDR_VAR 0 33
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: LD_INT 2
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58891: LD_ADDR_VAR 0 34
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 3
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59171: LD_ADDR_VAR 0 35
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59283: LD_ADDR_VAR 0 36
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59395: LD_ADDR_VAR 0 37
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59507: LD_ADDR_VAR 0 38
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59619: LD_ADDR_VAR 0 39
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59731: LD_ADDR_VAR 0 40
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59843: LD_ADDR_VAR 0 41
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 3
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 3
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 3
60140: NEG
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: LD_INT 3
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60193: LD_ADDR_VAR 0 42
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: LD_INT 3
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: LD_INT 3
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60543: LD_ADDR_VAR 0 43
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60891: LD_ADDR_VAR 0 44
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: LD_INT 3
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 3
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: LD_INT 3
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 3
61165: NEG
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 3
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 3
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: LD_INT 3
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61241: LD_ADDR_VAR 0 45
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: NEG
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: NEG
61432: PUSH
61433: LD_INT 3
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 3
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 3
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 2
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 3
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: LD_INT 3
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 3
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 3
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 3
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61591: LD_ADDR_VAR 0 46
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 2
61768: NEG
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 3
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 3
61887: NEG
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61939: LD_ADDR_VAR 0 47
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: LD_INT 2
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: LD_INT 2
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62090: LD_ADDR_VAR 0 48
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62237: LD_ADDR_VAR 0 49
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 2
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62381: LD_ADDR_VAR 0 50
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 2
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: LD_INT 2
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62525: LD_ADDR_VAR 0 51
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62672: LD_ADDR_VAR 0 52
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: LD_INT 2
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62823: LD_ADDR_VAR 0 53
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: LD_INT 2
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 2
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63053: LD_ADDR_VAR 0 54
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: LD_INT 2
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: LD_INT 2
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63283: LD_ADDR_VAR 0 55
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 2
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 2
63470: NEG
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63513: LD_ADDR_VAR 0 56
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: LD_INT 2
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: LD_INT 1
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 2
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63743: LD_ADDR_VAR 0 57
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 2
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: NEG
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63973: LD_ADDR_VAR 0 58
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 2
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 2
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: NEG
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64203: LD_ADDR_VAR 0 59
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64291: LD_ADDR_VAR 0 60
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64379: LD_ADDR_VAR 0 61
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: NEG
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64467: LD_ADDR_VAR 0 62
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64555: LD_ADDR_VAR 0 63
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64643: LD_ADDR_VAR 0 64
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: ST_TO_ADDR
// end ; 1 :
64731: GO 70628
64733: LD_INT 1
64735: DOUBLE
64736: EQUAL
64737: IFTRUE 64741
64739: GO 67364
64741: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64742: LD_ADDR_VAR 0 11
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: LD_INT 3
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 3
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: LD_INT 2
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64786: LD_ADDR_VAR 0 12
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64827: LD_ADDR_VAR 0 13
64831: PUSH
64832: LD_INT 3
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: LD_INT 3
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: LIST
64866: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64867: LD_ADDR_VAR 0 14
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: LD_INT 3
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: NEG
64895: PUSH
64896: LD_INT 2
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: LIST
64907: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64908: LD_ADDR_VAR 0 15
64912: PUSH
64913: LD_INT 2
64915: NEG
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 3
64926: NEG
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 3
64937: NEG
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64952: LD_ADDR_VAR 0 16
64956: PUSH
64957: LD_INT 2
64959: NEG
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 3
64971: NEG
64972: PUSH
64973: LD_INT 2
64975: NEG
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 3
64983: NEG
64984: PUSH
64985: LD_INT 3
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64998: LD_ADDR_VAR 0 17
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 3
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65042: LD_ADDR_VAR 0 18
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 3
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65083: LD_ADDR_VAR 0 19
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: LIST
65122: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65123: LD_ADDR_VAR 0 20
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65164: LD_ADDR_VAR 0 21
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 3
65182: NEG
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 3
65193: NEG
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65208: LD_ADDR_VAR 0 22
65212: PUSH
65213: LD_INT 2
65215: NEG
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: LD_INT 2
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: LD_INT 3
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65254: LD_ADDR_VAR 0 23
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_INT 3
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: LD_INT 4
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: LD_INT 3
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65298: LD_ADDR_VAR 0 24
65302: PUSH
65303: LD_INT 3
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 3
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 4
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65339: LD_ADDR_VAR 0 25
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: LD_INT 3
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 4
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 3
65366: PUSH
65367: LD_INT 4
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65379: LD_ADDR_VAR 0 26
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: LD_INT 3
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: LD_INT 4
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: LD_INT 3
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: LIST
65419: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65420: LD_ADDR_VAR 0 27
65424: PUSH
65425: LD_INT 3
65427: NEG
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: LD_INT 1
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 4
65449: NEG
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65464: LD_ADDR_VAR 0 28
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: LD_INT 3
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: LD_INT 4
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 4
65495: NEG
65496: PUSH
65497: LD_INT 3
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65510: LD_ADDR_VAR 0 29
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: LD_INT 3
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: LD_INT 3
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: LD_INT 4
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 4
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: NEG
65586: PUSH
65587: LD_INT 5
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 5
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 4
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 6
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: LD_INT 6
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: LD_INT 5
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65665: LD_ADDR_VAR 0 30
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: PUSH
65694: LD_INT 1
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: LD_INT 1
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 4
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 4
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 4
65734: PUSH
65735: LD_INT 1
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 5
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 5
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 5
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 6
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 6
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65808: LD_ADDR_VAR 0 31
65812: PUSH
65813: LD_INT 3
65815: PUSH
65816: LD_INT 2
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 3
65825: PUSH
65826: LD_INT 3
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: LD_INT 3
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: LD_INT 3
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 4
65855: PUSH
65856: LD_INT 4
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 3
65865: PUSH
65866: LD_INT 4
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 5
65875: PUSH
65876: LD_INT 4
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 5
65885: PUSH
65886: LD_INT 5
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 4
65895: PUSH
65896: LD_INT 5
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 6
65905: PUSH
65906: LD_INT 5
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 6
65915: PUSH
65916: LD_INT 6
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 5
65925: PUSH
65926: LD_INT 6
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65947: LD_ADDR_VAR 0 32
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: LD_INT 3
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: LD_INT 3
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 1
65974: NEG
65975: PUSH
65976: LD_INT 2
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 4
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 0
65995: PUSH
65996: LD_INT 4
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 1
66005: NEG
66006: PUSH
66007: LD_INT 3
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: PUSH
66017: LD_INT 5
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: LD_INT 5
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: LD_INT 4
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: LD_INT 6
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: LD_INT 6
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: LD_INT 5
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66090: LD_ADDR_VAR 0 33
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 3
66108: NEG
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 3
66119: NEG
66120: PUSH
66121: LD_INT 1
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 3
66131: NEG
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 4
66142: NEG
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 4
66153: NEG
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 4
66165: NEG
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 5
66176: NEG
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 5
66187: NEG
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 5
66199: NEG
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 6
66210: NEG
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 6
66221: NEG
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66245: LD_ADDR_VAR 0 34
66249: PUSH
66250: LD_INT 2
66252: NEG
66253: PUSH
66254: LD_INT 3
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 3
66264: NEG
66265: PUSH
66266: LD_INT 2
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 3
66276: NEG
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: LD_INT 4
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 4
66300: NEG
66301: PUSH
66302: LD_INT 3
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 4
66312: NEG
66313: PUSH
66314: LD_INT 4
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 4
66324: NEG
66325: PUSH
66326: LD_INT 5
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 5
66336: NEG
66337: PUSH
66338: LD_INT 4
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 5
66348: NEG
66349: PUSH
66350: LD_INT 5
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 5
66360: NEG
66361: PUSH
66362: LD_INT 6
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 6
66372: NEG
66373: PUSH
66374: LD_INT 5
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 6
66384: NEG
66385: PUSH
66386: LD_INT 6
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66408: LD_ADDR_VAR 0 41
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 2
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: LD_INT 2
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66452: LD_ADDR_VAR 0 42
66456: PUSH
66457: LD_INT 2
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 2
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: LIST
66492: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66493: LD_ADDR_VAR 0 43
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66533: LD_ADDR_VAR 0 44
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: LD_INT 3
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: LD_INT 2
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66574: LD_ADDR_VAR 0 45
66578: PUSH
66579: LD_INT 2
66581: NEG
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 2
66592: NEG
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 3
66603: NEG
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66618: LD_ADDR_VAR 0 46
66622: PUSH
66623: LD_INT 2
66625: NEG
66626: PUSH
66627: LD_INT 2
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 2
66637: NEG
66638: PUSH
66639: LD_INT 3
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 3
66649: NEG
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: LIST
66663: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66664: LD_ADDR_VAR 0 47
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: LD_INT 3
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: PUSH
66685: LD_INT 3
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66697: LD_ADDR_VAR 0 48
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 2
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: LD_INT 1
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66728: LD_ADDR_VAR 0 49
66732: PUSH
66733: LD_INT 3
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 3
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66757: LD_ADDR_VAR 0 50
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 1
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66786: LD_ADDR_VAR 0 51
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: LD_INT 2
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 2
66804: NEG
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66817: LD_ADDR_VAR 0 52
66821: PUSH
66822: LD_INT 3
66824: NEG
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 3
66836: NEG
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66850: LD_ADDR_VAR 0 53
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: LD_INT 3
66861: NEG
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: LD_INT 3
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 1
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66894: LD_ADDR_VAR 0 54
66898: PUSH
66899: LD_INT 2
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 3
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: LIST
66934: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66935: LD_ADDR_VAR 0 55
66939: PUSH
66940: LD_INT 3
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 3
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 2
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66975: LD_ADDR_VAR 0 56
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: LD_INT 3
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: LD_INT 2
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67016: LD_ADDR_VAR 0 57
67020: PUSH
67021: LD_INT 2
67023: NEG
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 3
67034: NEG
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 3
67045: NEG
67046: PUSH
67047: LD_INT 1
67049: NEG
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67060: LD_ADDR_VAR 0 58
67064: PUSH
67065: LD_INT 2
67067: NEG
67068: PUSH
67069: LD_INT 3
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 3
67079: NEG
67080: PUSH
67081: LD_INT 2
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: LD_INT 3
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67106: LD_ADDR_VAR 0 59
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: LD_INT 2
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 2
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67150: LD_ADDR_VAR 0 60
67154: PUSH
67155: LD_INT 1
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 2
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67191: LD_ADDR_VAR 0 61
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 2
67208: PUSH
67209: LD_INT 2
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: LD_INT 2
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67231: LD_ADDR_VAR 0 62
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: LD_INT 2
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: LD_INT 2
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67272: LD_ADDR_VAR 0 63
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: LD_INT 1
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 2
67290: NEG
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 2
67301: NEG
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67316: LD_ADDR_VAR 0 64
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 2
67335: NEG
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: LD_INT 2
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// end ; 2 :
67362: GO 70628
67364: LD_INT 2
67366: DOUBLE
67367: EQUAL
67368: IFTRUE 67372
67370: GO 70627
67372: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67373: LD_ADDR_VAR 0 29
67377: PUSH
67378: LD_INT 4
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 4
67390: PUSH
67391: LD_INT 1
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 5
67401: PUSH
67402: LD_INT 0
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 5
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 4
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 3
67431: PUSH
67432: LD_INT 0
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: PUSH
67442: LD_INT 1
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: LD_INT 2
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 5
67463: PUSH
67464: LD_INT 2
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: LD_INT 3
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 2
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 4
67493: PUSH
67494: LD_INT 3
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 4
67503: PUSH
67504: LD_INT 4
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 3
67513: PUSH
67514: LD_INT 4
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: LD_INT 2
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 4
67543: PUSH
67544: LD_INT 2
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 2
67553: PUSH
67554: LD_INT 4
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 4
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: LD_INT 3
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: LD_INT 4
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: LD_INT 5
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 5
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: NEG
67614: PUSH
67615: LD_INT 4
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 2
67635: PUSH
67636: LD_INT 5
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: LD_INT 3
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 3
67667: NEG
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 2
67679: NEG
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 2
67690: NEG
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 3
67701: NEG
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 4
67712: NEG
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 4
67723: NEG
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 4
67735: NEG
67736: PUSH
67737: LD_INT 2
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 2
67747: NEG
67748: PUSH
67749: LD_INT 2
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 4
67758: NEG
67759: PUSH
67760: LD_INT 4
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 4
67770: NEG
67771: PUSH
67772: LD_INT 5
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 3
67782: NEG
67783: PUSH
67784: LD_INT 4
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 3
67794: NEG
67795: PUSH
67796: LD_INT 3
67798: NEG
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 4
67806: NEG
67807: PUSH
67808: LD_INT 3
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 5
67818: NEG
67819: PUSH
67820: LD_INT 4
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 5
67830: NEG
67831: PUSH
67832: LD_INT 5
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 3
67842: NEG
67843: PUSH
67844: LD_INT 5
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 5
67854: NEG
67855: PUSH
67856: LD_INT 3
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67911: LD_ADDR_VAR 0 30
67915: PUSH
67916: LD_INT 4
67918: PUSH
67919: LD_INT 4
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 4
67928: PUSH
67929: LD_INT 3
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 5
67938: PUSH
67939: LD_INT 4
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 5
67948: PUSH
67949: LD_INT 5
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 4
67958: PUSH
67959: LD_INT 5
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: PUSH
67969: LD_INT 4
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: PUSH
67979: LD_INT 3
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 5
67988: PUSH
67989: LD_INT 3
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 3
67998: PUSH
67999: LD_INT 5
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: LD_INT 3
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 1
68038: PUSH
68039: LD_INT 4
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 4
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: LD_INT 3
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: LD_INT 2
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 2
68080: PUSH
68081: LD_INT 4
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 2
68090: NEG
68091: PUSH
68092: LD_INT 2
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 4
68101: NEG
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 4
68112: NEG
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 3
68124: NEG
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 3
68135: NEG
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 4
68146: NEG
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 5
68157: NEG
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 5
68168: NEG
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 5
68180: NEG
68181: PUSH
68182: LD_INT 2
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 3
68192: NEG
68193: PUSH
68194: LD_INT 2
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 3
68203: NEG
68204: PUSH
68205: LD_INT 3
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 3
68215: NEG
68216: PUSH
68217: LD_INT 4
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 2
68227: NEG
68228: PUSH
68229: LD_INT 3
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 2
68239: NEG
68240: PUSH
68241: LD_INT 2
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 3
68251: NEG
68252: PUSH
68253: LD_INT 2
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 4
68263: NEG
68264: PUSH
68265: LD_INT 3
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 4
68275: NEG
68276: PUSH
68277: LD_INT 4
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 2
68287: NEG
68288: PUSH
68289: LD_INT 4
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 4
68299: NEG
68300: PUSH
68301: LD_INT 2
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 0
68311: PUSH
68312: LD_INT 4
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: LD_INT 5
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 1
68333: PUSH
68334: LD_INT 4
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 1
68344: PUSH
68345: LD_INT 3
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 1
68366: NEG
68367: PUSH
68368: LD_INT 4
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 1
68378: NEG
68379: PUSH
68380: LD_INT 5
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 2
68390: PUSH
68391: LD_INT 3
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 2
68401: NEG
68402: PUSH
68403: LD_INT 5
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68458: LD_ADDR_VAR 0 31
68462: PUSH
68463: LD_INT 0
68465: PUSH
68466: LD_INT 4
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 3
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: PUSH
68486: LD_INT 4
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 1
68495: PUSH
68496: LD_INT 5
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: LD_INT 5
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: NEG
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: NEG
68527: PUSH
68528: LD_INT 3
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 2
68537: PUSH
68538: LD_INT 5
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: LD_INT 3
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: NEG
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 3
68569: NEG
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 2
68581: NEG
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 2
68592: NEG
68593: PUSH
68594: LD_INT 1
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 3
68603: NEG
68604: PUSH
68605: LD_INT 1
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 4
68614: NEG
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 4
68625: NEG
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 4
68637: NEG
68638: PUSH
68639: LD_INT 2
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 2
68649: NEG
68650: PUSH
68651: LD_INT 2
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 4
68660: NEG
68661: PUSH
68662: LD_INT 4
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 4
68672: NEG
68673: PUSH
68674: LD_INT 5
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 3
68684: NEG
68685: PUSH
68686: LD_INT 4
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 3
68696: NEG
68697: PUSH
68698: LD_INT 3
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 4
68708: NEG
68709: PUSH
68710: LD_INT 3
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 5
68720: NEG
68721: PUSH
68722: LD_INT 4
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 5
68732: NEG
68733: PUSH
68734: LD_INT 5
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 3
68744: NEG
68745: PUSH
68746: LD_INT 5
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 5
68756: NEG
68757: PUSH
68758: LD_INT 3
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: LD_INT 3
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: LD_INT 4
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 1
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 1
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 1
68823: NEG
68824: PUSH
68825: LD_INT 3
68827: NEG
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 1
68835: NEG
68836: PUSH
68837: LD_INT 4
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 2
68847: PUSH
68848: LD_INT 2
68850: NEG
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 2
68858: NEG
68859: PUSH
68860: LD_INT 4
68862: NEG
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 4
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 4
68880: PUSH
68881: LD_INT 1
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 5
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 5
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 4
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 3
68921: PUSH
68922: LD_INT 0
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: LD_INT 1
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 3
68942: PUSH
68943: LD_INT 2
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 5
68953: PUSH
68954: LD_INT 2
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69008: LD_ADDR_VAR 0 32
69012: PUSH
69013: LD_INT 4
69015: NEG
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 4
69026: NEG
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 3
69038: NEG
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 3
69049: NEG
69050: PUSH
69051: LD_INT 1
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 4
69060: NEG
69061: PUSH
69062: LD_INT 1
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 5
69071: NEG
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 5
69082: NEG
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 5
69094: NEG
69095: PUSH
69096: LD_INT 2
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 3
69106: NEG
69107: PUSH
69108: LD_INT 2
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: NEG
69118: PUSH
69119: LD_INT 3
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: LD_INT 4
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 2
69141: NEG
69142: PUSH
69143: LD_INT 3
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 2
69153: NEG
69154: PUSH
69155: LD_INT 2
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 3
69165: NEG
69166: PUSH
69167: LD_INT 2
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 4
69177: NEG
69178: PUSH
69179: LD_INT 3
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 4
69189: NEG
69190: PUSH
69191: LD_INT 4
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 2
69201: NEG
69202: PUSH
69203: LD_INT 4
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 4
69213: NEG
69214: PUSH
69215: LD_INT 2
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: LD_INT 4
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 0
69236: PUSH
69237: LD_INT 5
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: LD_INT 4
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 1
69258: PUSH
69259: LD_INT 3
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 3
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 1
69280: NEG
69281: PUSH
69282: LD_INT 4
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: PUSH
69294: LD_INT 5
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 2
69304: PUSH
69305: LD_INT 3
69307: NEG
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 2
69315: NEG
69316: PUSH
69317: LD_INT 5
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 3
69337: PUSH
69338: LD_INT 1
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 4
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 4
69358: PUSH
69359: LD_INT 1
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 3
69368: PUSH
69369: LD_INT 1
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 2
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 2
69388: PUSH
69389: LD_INT 1
69391: NEG
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 2
69399: PUSH
69400: LD_INT 2
69402: NEG
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 4
69410: PUSH
69411: LD_INT 2
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 4
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 4
69430: PUSH
69431: LD_INT 3
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 5
69440: PUSH
69441: LD_INT 4
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 5
69450: PUSH
69451: LD_INT 5
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 4
69460: PUSH
69461: LD_INT 5
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 3
69470: PUSH
69471: LD_INT 4
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 3
69480: PUSH
69481: LD_INT 3
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 5
69490: PUSH
69491: LD_INT 3
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 3
69500: PUSH
69501: LD_INT 5
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69555: LD_ADDR_VAR 0 33
69559: PUSH
69560: LD_INT 4
69562: NEG
69563: PUSH
69564: LD_INT 4
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 4
69574: NEG
69575: PUSH
69576: LD_INT 5
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 3
69586: NEG
69587: PUSH
69588: LD_INT 4
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 3
69598: NEG
69599: PUSH
69600: LD_INT 3
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 4
69610: NEG
69611: PUSH
69612: LD_INT 3
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 5
69622: NEG
69623: PUSH
69624: LD_INT 4
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 5
69634: NEG
69635: PUSH
69636: LD_INT 5
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 3
69646: NEG
69647: PUSH
69648: LD_INT 5
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 5
69658: NEG
69659: PUSH
69660: LD_INT 3
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 0
69670: PUSH
69671: LD_INT 3
69673: NEG
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: LD_INT 4
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 1
69703: PUSH
69704: LD_INT 2
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: LD_INT 2
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 1
69725: NEG
69726: PUSH
69727: LD_INT 3
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 1
69737: NEG
69738: PUSH
69739: LD_INT 4
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 2
69749: PUSH
69750: LD_INT 2
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 2
69760: NEG
69761: PUSH
69762: LD_INT 4
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 4
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 4
69782: PUSH
69783: LD_INT 1
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 5
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 5
69803: PUSH
69804: LD_INT 1
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 4
69813: PUSH
69814: LD_INT 1
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 3
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 3
69833: PUSH
69834: LD_INT 1
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 3
69844: PUSH
69845: LD_INT 2
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 5
69855: PUSH
69856: LD_INT 2
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: LD_INT 3
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 3
69875: PUSH
69876: LD_INT 2
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 4
69885: PUSH
69886: LD_INT 3
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 4
69895: PUSH
69896: LD_INT 4
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 3
69905: PUSH
69906: LD_INT 4
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 2
69915: PUSH
69916: LD_INT 3
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 2
69925: PUSH
69926: LD_INT 2
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 4
69935: PUSH
69936: LD_INT 2
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 2
69945: PUSH
69946: LD_INT 4
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 0
69955: PUSH
69956: LD_INT 4
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 0
69965: PUSH
69966: LD_INT 3
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 1
69975: PUSH
69976: LD_INT 4
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 1
69985: PUSH
69986: LD_INT 5
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 0
69995: PUSH
69996: LD_INT 5
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 1
70005: NEG
70006: PUSH
70007: LD_INT 4
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 1
70016: NEG
70017: PUSH
70018: LD_INT 3
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 2
70027: PUSH
70028: LD_INT 5
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 2
70037: NEG
70038: PUSH
70039: LD_INT 3
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70093: LD_ADDR_VAR 0 34
70097: PUSH
70098: LD_INT 0
70100: PUSH
70101: LD_INT 4
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 0
70111: PUSH
70112: LD_INT 5
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: LD_INT 4
70125: NEG
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 1
70133: PUSH
70134: LD_INT 3
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 0
70144: PUSH
70145: LD_INT 3
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 1
70155: NEG
70156: PUSH
70157: LD_INT 4
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 1
70167: NEG
70168: PUSH
70169: LD_INT 5
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 2
70179: PUSH
70180: LD_INT 3
70182: NEG
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 2
70190: NEG
70191: PUSH
70192: LD_INT 5
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 3
70212: PUSH
70213: LD_INT 1
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 4
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 4
70233: PUSH
70234: LD_INT 1
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 3
70243: PUSH
70244: LD_INT 1
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: PUSH
70254: LD_INT 0
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: PUSH
70264: LD_INT 1
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 2
70274: PUSH
70275: LD_INT 2
70277: NEG
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 4
70285: PUSH
70286: LD_INT 2
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 4
70295: PUSH
70296: LD_INT 4
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 4
70305: PUSH
70306: LD_INT 3
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 5
70315: PUSH
70316: LD_INT 4
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 5
70325: PUSH
70326: LD_INT 5
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 4
70335: PUSH
70336: LD_INT 5
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 3
70345: PUSH
70346: LD_INT 4
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 3
70355: PUSH
70356: LD_INT 3
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 5
70365: PUSH
70366: LD_INT 3
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: LD_INT 5
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: LD_INT 3
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: LD_INT 2
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 1
70415: PUSH
70416: LD_INT 4
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 0
70425: PUSH
70426: LD_INT 4
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 1
70435: NEG
70436: PUSH
70437: LD_INT 3
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 1
70446: NEG
70447: PUSH
70448: LD_INT 2
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 2
70457: PUSH
70458: LD_INT 4
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 2
70467: NEG
70468: PUSH
70469: LD_INT 2
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 4
70478: NEG
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 4
70489: NEG
70490: PUSH
70491: LD_INT 1
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 3
70501: NEG
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: NEG
70513: PUSH
70514: LD_INT 1
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 4
70523: NEG
70524: PUSH
70525: LD_INT 1
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 5
70534: NEG
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 5
70545: NEG
70546: PUSH
70547: LD_INT 1
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 5
70557: NEG
70558: PUSH
70559: LD_INT 2
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 3
70569: NEG
70570: PUSH
70571: LD_INT 2
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: ST_TO_ADDR
// end ; end ;
70625: GO 70628
70627: POP
// case btype of b_depot , b_warehouse :
70628: LD_VAR 0 1
70632: PUSH
70633: LD_INT 0
70635: DOUBLE
70636: EQUAL
70637: IFTRUE 70647
70639: LD_INT 1
70641: DOUBLE
70642: EQUAL
70643: IFTRUE 70647
70645: GO 70848
70647: POP
// case nation of nation_american :
70648: LD_VAR 0 5
70652: PUSH
70653: LD_INT 1
70655: DOUBLE
70656: EQUAL
70657: IFTRUE 70661
70659: GO 70717
70661: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70662: LD_ADDR_VAR 0 9
70666: PUSH
70667: LD_VAR 0 11
70671: PUSH
70672: LD_VAR 0 12
70676: PUSH
70677: LD_VAR 0 13
70681: PUSH
70682: LD_VAR 0 14
70686: PUSH
70687: LD_VAR 0 15
70691: PUSH
70692: LD_VAR 0 16
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: PUSH
70705: LD_VAR 0 4
70709: PUSH
70710: LD_INT 1
70712: PLUS
70713: ARRAY
70714: ST_TO_ADDR
70715: GO 70846
70717: LD_INT 2
70719: DOUBLE
70720: EQUAL
70721: IFTRUE 70725
70723: GO 70781
70725: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70726: LD_ADDR_VAR 0 9
70730: PUSH
70731: LD_VAR 0 17
70735: PUSH
70736: LD_VAR 0 18
70740: PUSH
70741: LD_VAR 0 19
70745: PUSH
70746: LD_VAR 0 20
70750: PUSH
70751: LD_VAR 0 21
70755: PUSH
70756: LD_VAR 0 22
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: PUSH
70769: LD_VAR 0 4
70773: PUSH
70774: LD_INT 1
70776: PLUS
70777: ARRAY
70778: ST_TO_ADDR
70779: GO 70846
70781: LD_INT 3
70783: DOUBLE
70784: EQUAL
70785: IFTRUE 70789
70787: GO 70845
70789: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70790: LD_ADDR_VAR 0 9
70794: PUSH
70795: LD_VAR 0 23
70799: PUSH
70800: LD_VAR 0 24
70804: PUSH
70805: LD_VAR 0 25
70809: PUSH
70810: LD_VAR 0 26
70814: PUSH
70815: LD_VAR 0 27
70819: PUSH
70820: LD_VAR 0 28
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: PUSH
70833: LD_VAR 0 4
70837: PUSH
70838: LD_INT 1
70840: PLUS
70841: ARRAY
70842: ST_TO_ADDR
70843: GO 70846
70845: POP
70846: GO 71401
70848: LD_INT 2
70850: DOUBLE
70851: EQUAL
70852: IFTRUE 70862
70854: LD_INT 3
70856: DOUBLE
70857: EQUAL
70858: IFTRUE 70862
70860: GO 70918
70862: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70863: LD_ADDR_VAR 0 9
70867: PUSH
70868: LD_VAR 0 29
70872: PUSH
70873: LD_VAR 0 30
70877: PUSH
70878: LD_VAR 0 31
70882: PUSH
70883: LD_VAR 0 32
70887: PUSH
70888: LD_VAR 0 33
70892: PUSH
70893: LD_VAR 0 34
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: PUSH
70906: LD_VAR 0 4
70910: PUSH
70911: LD_INT 1
70913: PLUS
70914: ARRAY
70915: ST_TO_ADDR
70916: GO 71401
70918: LD_INT 16
70920: DOUBLE
70921: EQUAL
70922: IFTRUE 70980
70924: LD_INT 17
70926: DOUBLE
70927: EQUAL
70928: IFTRUE 70980
70930: LD_INT 18
70932: DOUBLE
70933: EQUAL
70934: IFTRUE 70980
70936: LD_INT 19
70938: DOUBLE
70939: EQUAL
70940: IFTRUE 70980
70942: LD_INT 22
70944: DOUBLE
70945: EQUAL
70946: IFTRUE 70980
70948: LD_INT 20
70950: DOUBLE
70951: EQUAL
70952: IFTRUE 70980
70954: LD_INT 21
70956: DOUBLE
70957: EQUAL
70958: IFTRUE 70980
70960: LD_INT 23
70962: DOUBLE
70963: EQUAL
70964: IFTRUE 70980
70966: LD_INT 24
70968: DOUBLE
70969: EQUAL
70970: IFTRUE 70980
70972: LD_INT 25
70974: DOUBLE
70975: EQUAL
70976: IFTRUE 70980
70978: GO 71036
70980: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70981: LD_ADDR_VAR 0 9
70985: PUSH
70986: LD_VAR 0 35
70990: PUSH
70991: LD_VAR 0 36
70995: PUSH
70996: LD_VAR 0 37
71000: PUSH
71001: LD_VAR 0 38
71005: PUSH
71006: LD_VAR 0 39
71010: PUSH
71011: LD_VAR 0 40
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: PUSH
71024: LD_VAR 0 4
71028: PUSH
71029: LD_INT 1
71031: PLUS
71032: ARRAY
71033: ST_TO_ADDR
71034: GO 71401
71036: LD_INT 6
71038: DOUBLE
71039: EQUAL
71040: IFTRUE 71092
71042: LD_INT 7
71044: DOUBLE
71045: EQUAL
71046: IFTRUE 71092
71048: LD_INT 8
71050: DOUBLE
71051: EQUAL
71052: IFTRUE 71092
71054: LD_INT 13
71056: DOUBLE
71057: EQUAL
71058: IFTRUE 71092
71060: LD_INT 12
71062: DOUBLE
71063: EQUAL
71064: IFTRUE 71092
71066: LD_INT 15
71068: DOUBLE
71069: EQUAL
71070: IFTRUE 71092
71072: LD_INT 11
71074: DOUBLE
71075: EQUAL
71076: IFTRUE 71092
71078: LD_INT 14
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71092
71084: LD_INT 10
71086: DOUBLE
71087: EQUAL
71088: IFTRUE 71092
71090: GO 71148
71092: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71093: LD_ADDR_VAR 0 9
71097: PUSH
71098: LD_VAR 0 41
71102: PUSH
71103: LD_VAR 0 42
71107: PUSH
71108: LD_VAR 0 43
71112: PUSH
71113: LD_VAR 0 44
71117: PUSH
71118: LD_VAR 0 45
71122: PUSH
71123: LD_VAR 0 46
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: PUSH
71136: LD_VAR 0 4
71140: PUSH
71141: LD_INT 1
71143: PLUS
71144: ARRAY
71145: ST_TO_ADDR
71146: GO 71401
71148: LD_INT 36
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71156
71154: GO 71212
71156: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71157: LD_ADDR_VAR 0 9
71161: PUSH
71162: LD_VAR 0 47
71166: PUSH
71167: LD_VAR 0 48
71171: PUSH
71172: LD_VAR 0 49
71176: PUSH
71177: LD_VAR 0 50
71181: PUSH
71182: LD_VAR 0 51
71186: PUSH
71187: LD_VAR 0 52
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: PUSH
71200: LD_VAR 0 4
71204: PUSH
71205: LD_INT 1
71207: PLUS
71208: ARRAY
71209: ST_TO_ADDR
71210: GO 71401
71212: LD_INT 4
71214: DOUBLE
71215: EQUAL
71216: IFTRUE 71238
71218: LD_INT 5
71220: DOUBLE
71221: EQUAL
71222: IFTRUE 71238
71224: LD_INT 34
71226: DOUBLE
71227: EQUAL
71228: IFTRUE 71238
71230: LD_INT 37
71232: DOUBLE
71233: EQUAL
71234: IFTRUE 71238
71236: GO 71294
71238: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71239: LD_ADDR_VAR 0 9
71243: PUSH
71244: LD_VAR 0 53
71248: PUSH
71249: LD_VAR 0 54
71253: PUSH
71254: LD_VAR 0 55
71258: PUSH
71259: LD_VAR 0 56
71263: PUSH
71264: LD_VAR 0 57
71268: PUSH
71269: LD_VAR 0 58
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: PUSH
71282: LD_VAR 0 4
71286: PUSH
71287: LD_INT 1
71289: PLUS
71290: ARRAY
71291: ST_TO_ADDR
71292: GO 71401
71294: LD_INT 31
71296: DOUBLE
71297: EQUAL
71298: IFTRUE 71344
71300: LD_INT 32
71302: DOUBLE
71303: EQUAL
71304: IFTRUE 71344
71306: LD_INT 33
71308: DOUBLE
71309: EQUAL
71310: IFTRUE 71344
71312: LD_INT 27
71314: DOUBLE
71315: EQUAL
71316: IFTRUE 71344
71318: LD_INT 26
71320: DOUBLE
71321: EQUAL
71322: IFTRUE 71344
71324: LD_INT 28
71326: DOUBLE
71327: EQUAL
71328: IFTRUE 71344
71330: LD_INT 29
71332: DOUBLE
71333: EQUAL
71334: IFTRUE 71344
71336: LD_INT 30
71338: DOUBLE
71339: EQUAL
71340: IFTRUE 71344
71342: GO 71400
71344: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71345: LD_ADDR_VAR 0 9
71349: PUSH
71350: LD_VAR 0 59
71354: PUSH
71355: LD_VAR 0 60
71359: PUSH
71360: LD_VAR 0 61
71364: PUSH
71365: LD_VAR 0 62
71369: PUSH
71370: LD_VAR 0 63
71374: PUSH
71375: LD_VAR 0 64
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: PUSH
71388: LD_VAR 0 4
71392: PUSH
71393: LD_INT 1
71395: PLUS
71396: ARRAY
71397: ST_TO_ADDR
71398: GO 71401
71400: POP
// temp_list2 = [ ] ;
71401: LD_ADDR_VAR 0 10
71405: PUSH
71406: EMPTY
71407: ST_TO_ADDR
// for i in temp_list do
71408: LD_ADDR_VAR 0 8
71412: PUSH
71413: LD_VAR 0 9
71417: PUSH
71418: FOR_IN
71419: IFFALSE 71471
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71421: LD_ADDR_VAR 0 10
71425: PUSH
71426: LD_VAR 0 10
71430: PUSH
71431: LD_VAR 0 8
71435: PUSH
71436: LD_INT 1
71438: ARRAY
71439: PUSH
71440: LD_VAR 0 2
71444: PLUS
71445: PUSH
71446: LD_VAR 0 8
71450: PUSH
71451: LD_INT 2
71453: ARRAY
71454: PUSH
71455: LD_VAR 0 3
71459: PLUS
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: EMPTY
71466: LIST
71467: ADD
71468: ST_TO_ADDR
71469: GO 71418
71471: POP
71472: POP
// result = temp_list2 ;
71473: LD_ADDR_VAR 0 7
71477: PUSH
71478: LD_VAR 0 10
71482: ST_TO_ADDR
// end ;
71483: LD_VAR 0 7
71487: RET
// export function EnemyInRange ( unit , dist ) ; begin
71488: LD_INT 0
71490: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71491: LD_ADDR_VAR 0 3
71495: PUSH
71496: LD_VAR 0 1
71500: PPUSH
71501: CALL_OW 255
71505: PPUSH
71506: LD_VAR 0 1
71510: PPUSH
71511: CALL_OW 250
71515: PPUSH
71516: LD_VAR 0 1
71520: PPUSH
71521: CALL_OW 251
71525: PPUSH
71526: LD_VAR 0 2
71530: PPUSH
71531: CALL 44890 0 4
71535: PUSH
71536: LD_INT 4
71538: ARRAY
71539: ST_TO_ADDR
// end ;
71540: LD_VAR 0 3
71544: RET
// export function PlayerSeeMe ( unit ) ; begin
71545: LD_INT 0
71547: PPUSH
// result := See ( your_side , unit ) ;
71548: LD_ADDR_VAR 0 2
71552: PUSH
71553: LD_OWVAR 2
71557: PPUSH
71558: LD_VAR 0 1
71562: PPUSH
71563: CALL_OW 292
71567: ST_TO_ADDR
// end ;
71568: LD_VAR 0 2
71572: RET
// export function ReverseDir ( unit ) ; begin
71573: LD_INT 0
71575: PPUSH
// if not unit then
71576: LD_VAR 0 1
71580: NOT
71581: IFFALSE 71585
// exit ;
71583: GO 71608
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71585: LD_ADDR_VAR 0 2
71589: PUSH
71590: LD_VAR 0 1
71594: PPUSH
71595: CALL_OW 254
71599: PUSH
71600: LD_INT 3
71602: PLUS
71603: PUSH
71604: LD_INT 6
71606: MOD
71607: ST_TO_ADDR
// end ;
71608: LD_VAR 0 2
71612: RET
// export function ReverseArray ( array ) ; var i ; begin
71613: LD_INT 0
71615: PPUSH
71616: PPUSH
// if not array then
71617: LD_VAR 0 1
71621: NOT
71622: IFFALSE 71626
// exit ;
71624: GO 71681
// result := [ ] ;
71626: LD_ADDR_VAR 0 2
71630: PUSH
71631: EMPTY
71632: ST_TO_ADDR
// for i := array downto 1 do
71633: LD_ADDR_VAR 0 3
71637: PUSH
71638: DOUBLE
71639: LD_VAR 0 1
71643: INC
71644: ST_TO_ADDR
71645: LD_INT 1
71647: PUSH
71648: FOR_DOWNTO
71649: IFFALSE 71679
// result := Join ( result , array [ i ] ) ;
71651: LD_ADDR_VAR 0 2
71655: PUSH
71656: LD_VAR 0 2
71660: PPUSH
71661: LD_VAR 0 1
71665: PUSH
71666: LD_VAR 0 3
71670: ARRAY
71671: PPUSH
71672: CALL 76325 0 2
71676: ST_TO_ADDR
71677: GO 71648
71679: POP
71680: POP
// end ;
71681: LD_VAR 0 2
71685: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71686: LD_INT 0
71688: PPUSH
71689: PPUSH
71690: PPUSH
71691: PPUSH
71692: PPUSH
71693: PPUSH
// if not unit or not hexes then
71694: LD_VAR 0 1
71698: NOT
71699: PUSH
71700: LD_VAR 0 2
71704: NOT
71705: OR
71706: IFFALSE 71710
// exit ;
71708: GO 71833
// dist := 9999 ;
71710: LD_ADDR_VAR 0 5
71714: PUSH
71715: LD_INT 9999
71717: ST_TO_ADDR
// for i = 1 to hexes do
71718: LD_ADDR_VAR 0 4
71722: PUSH
71723: DOUBLE
71724: LD_INT 1
71726: DEC
71727: ST_TO_ADDR
71728: LD_VAR 0 2
71732: PUSH
71733: FOR_TO
71734: IFFALSE 71821
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71736: LD_ADDR_VAR 0 6
71740: PUSH
71741: LD_VAR 0 1
71745: PPUSH
71746: LD_VAR 0 2
71750: PUSH
71751: LD_VAR 0 4
71755: ARRAY
71756: PUSH
71757: LD_INT 1
71759: ARRAY
71760: PPUSH
71761: LD_VAR 0 2
71765: PUSH
71766: LD_VAR 0 4
71770: ARRAY
71771: PUSH
71772: LD_INT 2
71774: ARRAY
71775: PPUSH
71776: CALL_OW 297
71780: ST_TO_ADDR
// if tdist < dist then
71781: LD_VAR 0 6
71785: PUSH
71786: LD_VAR 0 5
71790: LESS
71791: IFFALSE 71819
// begin hex := hexes [ i ] ;
71793: LD_ADDR_VAR 0 8
71797: PUSH
71798: LD_VAR 0 2
71802: PUSH
71803: LD_VAR 0 4
71807: ARRAY
71808: ST_TO_ADDR
// dist := tdist ;
71809: LD_ADDR_VAR 0 5
71813: PUSH
71814: LD_VAR 0 6
71818: ST_TO_ADDR
// end ; end ;
71819: GO 71733
71821: POP
71822: POP
// result := hex ;
71823: LD_ADDR_VAR 0 3
71827: PUSH
71828: LD_VAR 0 8
71832: ST_TO_ADDR
// end ;
71833: LD_VAR 0 3
71837: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71838: LD_INT 0
71840: PPUSH
71841: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71842: LD_VAR 0 1
71846: NOT
71847: PUSH
71848: LD_VAR 0 1
71852: PUSH
71853: LD_INT 21
71855: PUSH
71856: LD_INT 2
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 23
71865: PUSH
71866: LD_INT 2
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PPUSH
71877: CALL_OW 69
71881: IN
71882: NOT
71883: OR
71884: IFFALSE 71888
// exit ;
71886: GO 71935
// for i = 1 to 3 do
71888: LD_ADDR_VAR 0 3
71892: PUSH
71893: DOUBLE
71894: LD_INT 1
71896: DEC
71897: ST_TO_ADDR
71898: LD_INT 3
71900: PUSH
71901: FOR_TO
71902: IFFALSE 71933
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71904: LD_VAR 0 1
71908: PPUSH
71909: CALL_OW 250
71913: PPUSH
71914: LD_VAR 0 1
71918: PPUSH
71919: CALL_OW 251
71923: PPUSH
71924: LD_INT 1
71926: PPUSH
71927: CALL_OW 453
71931: GO 71901
71933: POP
71934: POP
// end ;
71935: LD_VAR 0 2
71939: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71940: LD_INT 0
71942: PPUSH
71943: PPUSH
71944: PPUSH
71945: PPUSH
71946: PPUSH
71947: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71948: LD_VAR 0 1
71952: NOT
71953: PUSH
71954: LD_VAR 0 2
71958: NOT
71959: OR
71960: PUSH
71961: LD_VAR 0 1
71965: PPUSH
71966: CALL_OW 314
71970: OR
71971: IFFALSE 71975
// exit ;
71973: GO 72442
// if GetLives ( i ) < 250 then
71975: LD_VAR 0 4
71979: PPUSH
71980: CALL_OW 256
71984: PUSH
71985: LD_INT 250
71987: LESS
71988: IFFALSE 72001
// begin ComAutodestruct ( i ) ;
71990: LD_VAR 0 4
71994: PPUSH
71995: CALL 71838 0 1
// exit ;
71999: GO 72442
// end ; x := GetX ( enemy_unit ) ;
72001: LD_ADDR_VAR 0 7
72005: PUSH
72006: LD_VAR 0 2
72010: PPUSH
72011: CALL_OW 250
72015: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72016: LD_ADDR_VAR 0 8
72020: PUSH
72021: LD_VAR 0 2
72025: PPUSH
72026: CALL_OW 251
72030: ST_TO_ADDR
// if not x or not y then
72031: LD_VAR 0 7
72035: NOT
72036: PUSH
72037: LD_VAR 0 8
72041: NOT
72042: OR
72043: IFFALSE 72047
// exit ;
72045: GO 72442
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72047: LD_ADDR_VAR 0 6
72051: PUSH
72052: LD_VAR 0 7
72056: PPUSH
72057: LD_INT 0
72059: PPUSH
72060: LD_INT 4
72062: PPUSH
72063: CALL_OW 272
72067: PUSH
72068: LD_VAR 0 8
72072: PPUSH
72073: LD_INT 0
72075: PPUSH
72076: LD_INT 4
72078: PPUSH
72079: CALL_OW 273
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_VAR 0 7
72092: PPUSH
72093: LD_INT 1
72095: PPUSH
72096: LD_INT 4
72098: PPUSH
72099: CALL_OW 272
72103: PUSH
72104: LD_VAR 0 8
72108: PPUSH
72109: LD_INT 1
72111: PPUSH
72112: LD_INT 4
72114: PPUSH
72115: CALL_OW 273
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_VAR 0 7
72128: PPUSH
72129: LD_INT 2
72131: PPUSH
72132: LD_INT 4
72134: PPUSH
72135: CALL_OW 272
72139: PUSH
72140: LD_VAR 0 8
72144: PPUSH
72145: LD_INT 2
72147: PPUSH
72148: LD_INT 4
72150: PPUSH
72151: CALL_OW 273
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_VAR 0 7
72164: PPUSH
72165: LD_INT 3
72167: PPUSH
72168: LD_INT 4
72170: PPUSH
72171: CALL_OW 272
72175: PUSH
72176: LD_VAR 0 8
72180: PPUSH
72181: LD_INT 3
72183: PPUSH
72184: LD_INT 4
72186: PPUSH
72187: CALL_OW 273
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_VAR 0 7
72200: PPUSH
72201: LD_INT 4
72203: PPUSH
72204: LD_INT 4
72206: PPUSH
72207: CALL_OW 272
72211: PUSH
72212: LD_VAR 0 8
72216: PPUSH
72217: LD_INT 4
72219: PPUSH
72220: LD_INT 4
72222: PPUSH
72223: CALL_OW 273
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_VAR 0 7
72236: PPUSH
72237: LD_INT 5
72239: PPUSH
72240: LD_INT 4
72242: PPUSH
72243: CALL_OW 272
72247: PUSH
72248: LD_VAR 0 8
72252: PPUSH
72253: LD_INT 5
72255: PPUSH
72256: LD_INT 4
72258: PPUSH
72259: CALL_OW 273
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: ST_TO_ADDR
// for i = tmp downto 1 do
72276: LD_ADDR_VAR 0 4
72280: PUSH
72281: DOUBLE
72282: LD_VAR 0 6
72286: INC
72287: ST_TO_ADDR
72288: LD_INT 1
72290: PUSH
72291: FOR_DOWNTO
72292: IFFALSE 72393
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72294: LD_VAR 0 6
72298: PUSH
72299: LD_VAR 0 4
72303: ARRAY
72304: PUSH
72305: LD_INT 1
72307: ARRAY
72308: PPUSH
72309: LD_VAR 0 6
72313: PUSH
72314: LD_VAR 0 4
72318: ARRAY
72319: PUSH
72320: LD_INT 2
72322: ARRAY
72323: PPUSH
72324: CALL_OW 488
72328: NOT
72329: PUSH
72330: LD_VAR 0 6
72334: PUSH
72335: LD_VAR 0 4
72339: ARRAY
72340: PUSH
72341: LD_INT 1
72343: ARRAY
72344: PPUSH
72345: LD_VAR 0 6
72349: PUSH
72350: LD_VAR 0 4
72354: ARRAY
72355: PUSH
72356: LD_INT 2
72358: ARRAY
72359: PPUSH
72360: CALL_OW 428
72364: PUSH
72365: LD_INT 0
72367: NONEQUAL
72368: OR
72369: IFFALSE 72391
// tmp := Delete ( tmp , i ) ;
72371: LD_ADDR_VAR 0 6
72375: PUSH
72376: LD_VAR 0 6
72380: PPUSH
72381: LD_VAR 0 4
72385: PPUSH
72386: CALL_OW 3
72390: ST_TO_ADDR
72391: GO 72291
72393: POP
72394: POP
// j := GetClosestHex ( unit , tmp ) ;
72395: LD_ADDR_VAR 0 5
72399: PUSH
72400: LD_VAR 0 1
72404: PPUSH
72405: LD_VAR 0 6
72409: PPUSH
72410: CALL 71686 0 2
72414: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72415: LD_VAR 0 1
72419: PPUSH
72420: LD_VAR 0 5
72424: PUSH
72425: LD_INT 1
72427: ARRAY
72428: PPUSH
72429: LD_VAR 0 5
72433: PUSH
72434: LD_INT 2
72436: ARRAY
72437: PPUSH
72438: CALL_OW 111
// end ;
72442: LD_VAR 0 3
72446: RET
// export function PrepareApemanSoldier ( ) ; begin
72447: LD_INT 0
72449: PPUSH
// uc_nation := 0 ;
72450: LD_ADDR_OWVAR 21
72454: PUSH
72455: LD_INT 0
72457: ST_TO_ADDR
// hc_sex := sex_male ;
72458: LD_ADDR_OWVAR 27
72462: PUSH
72463: LD_INT 1
72465: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72466: LD_ADDR_OWVAR 28
72470: PUSH
72471: LD_INT 15
72473: ST_TO_ADDR
// hc_gallery :=  ;
72474: LD_ADDR_OWVAR 33
72478: PUSH
72479: LD_STRING 
72481: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72482: LD_ADDR_OWVAR 31
72486: PUSH
72487: LD_INT 0
72489: PPUSH
72490: LD_INT 3
72492: PPUSH
72493: CALL_OW 12
72497: PUSH
72498: LD_INT 0
72500: PPUSH
72501: LD_INT 3
72503: PPUSH
72504: CALL_OW 12
72508: PUSH
72509: LD_INT 0
72511: PUSH
72512: LD_INT 0
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: ST_TO_ADDR
// end ;
72521: LD_VAR 0 1
72525: RET
// export function PrepareApemanEngineer ( ) ; begin
72526: LD_INT 0
72528: PPUSH
// uc_nation := 0 ;
72529: LD_ADDR_OWVAR 21
72533: PUSH
72534: LD_INT 0
72536: ST_TO_ADDR
// hc_sex := sex_male ;
72537: LD_ADDR_OWVAR 27
72541: PUSH
72542: LD_INT 1
72544: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72545: LD_ADDR_OWVAR 28
72549: PUSH
72550: LD_INT 16
72552: ST_TO_ADDR
// hc_gallery :=  ;
72553: LD_ADDR_OWVAR 33
72557: PUSH
72558: LD_STRING 
72560: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72561: LD_ADDR_OWVAR 31
72565: PUSH
72566: LD_INT 0
72568: PPUSH
72569: LD_INT 3
72571: PPUSH
72572: CALL_OW 12
72576: PUSH
72577: LD_INT 0
72579: PPUSH
72580: LD_INT 3
72582: PPUSH
72583: CALL_OW 12
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: LD_INT 0
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: ST_TO_ADDR
// end ;
72600: LD_VAR 0 1
72604: RET
// export function PrepareApeman ( agressivity ) ; begin
72605: LD_INT 0
72607: PPUSH
// uc_side := 0 ;
72608: LD_ADDR_OWVAR 20
72612: PUSH
72613: LD_INT 0
72615: ST_TO_ADDR
// uc_nation := 0 ;
72616: LD_ADDR_OWVAR 21
72620: PUSH
72621: LD_INT 0
72623: ST_TO_ADDR
// hc_sex := sex_male ;
72624: LD_ADDR_OWVAR 27
72628: PUSH
72629: LD_INT 1
72631: ST_TO_ADDR
// hc_class := class_apeman ;
72632: LD_ADDR_OWVAR 28
72636: PUSH
72637: LD_INT 12
72639: ST_TO_ADDR
// hc_gallery :=  ;
72640: LD_ADDR_OWVAR 33
72644: PUSH
72645: LD_STRING 
72647: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72648: LD_ADDR_OWVAR 35
72652: PUSH
72653: LD_VAR 0 1
72657: NEG
72658: PPUSH
72659: LD_VAR 0 1
72663: PPUSH
72664: CALL_OW 12
72668: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72669: LD_ADDR_OWVAR 31
72673: PUSH
72674: LD_INT 0
72676: PPUSH
72677: LD_INT 3
72679: PPUSH
72680: CALL_OW 12
72684: PUSH
72685: LD_INT 0
72687: PPUSH
72688: LD_INT 3
72690: PPUSH
72691: CALL_OW 12
72695: PUSH
72696: LD_INT 0
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: ST_TO_ADDR
// end ;
72708: LD_VAR 0 2
72712: RET
// export function PrepareTiger ( agressivity ) ; begin
72713: LD_INT 0
72715: PPUSH
// uc_side := 0 ;
72716: LD_ADDR_OWVAR 20
72720: PUSH
72721: LD_INT 0
72723: ST_TO_ADDR
// uc_nation := 0 ;
72724: LD_ADDR_OWVAR 21
72728: PUSH
72729: LD_INT 0
72731: ST_TO_ADDR
// hc_class := class_tiger ;
72732: LD_ADDR_OWVAR 28
72736: PUSH
72737: LD_INT 14
72739: ST_TO_ADDR
// hc_gallery :=  ;
72740: LD_ADDR_OWVAR 33
72744: PUSH
72745: LD_STRING 
72747: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72748: LD_ADDR_OWVAR 35
72752: PUSH
72753: LD_VAR 0 1
72757: NEG
72758: PPUSH
72759: LD_VAR 0 1
72763: PPUSH
72764: CALL_OW 12
72768: ST_TO_ADDR
// end ;
72769: LD_VAR 0 2
72773: RET
// export function PrepareEnchidna ( ) ; begin
72774: LD_INT 0
72776: PPUSH
// uc_side := 0 ;
72777: LD_ADDR_OWVAR 20
72781: PUSH
72782: LD_INT 0
72784: ST_TO_ADDR
// uc_nation := 0 ;
72785: LD_ADDR_OWVAR 21
72789: PUSH
72790: LD_INT 0
72792: ST_TO_ADDR
// hc_class := class_baggie ;
72793: LD_ADDR_OWVAR 28
72797: PUSH
72798: LD_INT 13
72800: ST_TO_ADDR
// hc_gallery :=  ;
72801: LD_ADDR_OWVAR 33
72805: PUSH
72806: LD_STRING 
72808: ST_TO_ADDR
// end ;
72809: LD_VAR 0 1
72813: RET
// export function PrepareFrog ( ) ; begin
72814: LD_INT 0
72816: PPUSH
// uc_side := 0 ;
72817: LD_ADDR_OWVAR 20
72821: PUSH
72822: LD_INT 0
72824: ST_TO_ADDR
// uc_nation := 0 ;
72825: LD_ADDR_OWVAR 21
72829: PUSH
72830: LD_INT 0
72832: ST_TO_ADDR
// hc_class := class_frog ;
72833: LD_ADDR_OWVAR 28
72837: PUSH
72838: LD_INT 19
72840: ST_TO_ADDR
// hc_gallery :=  ;
72841: LD_ADDR_OWVAR 33
72845: PUSH
72846: LD_STRING 
72848: ST_TO_ADDR
// end ;
72849: LD_VAR 0 1
72853: RET
// export function PrepareFish ( ) ; begin
72854: LD_INT 0
72856: PPUSH
// uc_side := 0 ;
72857: LD_ADDR_OWVAR 20
72861: PUSH
72862: LD_INT 0
72864: ST_TO_ADDR
// uc_nation := 0 ;
72865: LD_ADDR_OWVAR 21
72869: PUSH
72870: LD_INT 0
72872: ST_TO_ADDR
// hc_class := class_fish ;
72873: LD_ADDR_OWVAR 28
72877: PUSH
72878: LD_INT 20
72880: ST_TO_ADDR
// hc_gallery :=  ;
72881: LD_ADDR_OWVAR 33
72885: PUSH
72886: LD_STRING 
72888: ST_TO_ADDR
// end ;
72889: LD_VAR 0 1
72893: RET
// export function PrepareBird ( ) ; begin
72894: LD_INT 0
72896: PPUSH
// uc_side := 0 ;
72897: LD_ADDR_OWVAR 20
72901: PUSH
72902: LD_INT 0
72904: ST_TO_ADDR
// uc_nation := 0 ;
72905: LD_ADDR_OWVAR 21
72909: PUSH
72910: LD_INT 0
72912: ST_TO_ADDR
// hc_class := class_phororhacos ;
72913: LD_ADDR_OWVAR 28
72917: PUSH
72918: LD_INT 18
72920: ST_TO_ADDR
// hc_gallery :=  ;
72921: LD_ADDR_OWVAR 33
72925: PUSH
72926: LD_STRING 
72928: ST_TO_ADDR
// end ;
72929: LD_VAR 0 1
72933: RET
// export function PrepareHorse ( ) ; begin
72934: LD_INT 0
72936: PPUSH
// uc_side := 0 ;
72937: LD_ADDR_OWVAR 20
72941: PUSH
72942: LD_INT 0
72944: ST_TO_ADDR
// uc_nation := 0 ;
72945: LD_ADDR_OWVAR 21
72949: PUSH
72950: LD_INT 0
72952: ST_TO_ADDR
// hc_class := class_horse ;
72953: LD_ADDR_OWVAR 28
72957: PUSH
72958: LD_INT 21
72960: ST_TO_ADDR
// hc_gallery :=  ;
72961: LD_ADDR_OWVAR 33
72965: PUSH
72966: LD_STRING 
72968: ST_TO_ADDR
// end ;
72969: LD_VAR 0 1
72973: RET
// export function PrepareMastodont ( ) ; begin
72974: LD_INT 0
72976: PPUSH
// uc_side := 0 ;
72977: LD_ADDR_OWVAR 20
72981: PUSH
72982: LD_INT 0
72984: ST_TO_ADDR
// uc_nation := 0 ;
72985: LD_ADDR_OWVAR 21
72989: PUSH
72990: LD_INT 0
72992: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72993: LD_ADDR_OWVAR 37
72997: PUSH
72998: LD_INT 31
73000: ST_TO_ADDR
// vc_control := control_rider ;
73001: LD_ADDR_OWVAR 38
73005: PUSH
73006: LD_INT 4
73008: ST_TO_ADDR
// end ;
73009: LD_VAR 0 1
73013: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73014: LD_INT 0
73016: PPUSH
73017: PPUSH
73018: PPUSH
// uc_side = 0 ;
73019: LD_ADDR_OWVAR 20
73023: PUSH
73024: LD_INT 0
73026: ST_TO_ADDR
// uc_nation = 0 ;
73027: LD_ADDR_OWVAR 21
73031: PUSH
73032: LD_INT 0
73034: ST_TO_ADDR
// InitHc_All ( ) ;
73035: CALL_OW 584
// InitVc ;
73039: CALL_OW 20
// if mastodonts then
73043: LD_VAR 0 6
73047: IFFALSE 73114
// for i = 1 to mastodonts do
73049: LD_ADDR_VAR 0 11
73053: PUSH
73054: DOUBLE
73055: LD_INT 1
73057: DEC
73058: ST_TO_ADDR
73059: LD_VAR 0 6
73063: PUSH
73064: FOR_TO
73065: IFFALSE 73112
// begin vc_chassis := 31 ;
73067: LD_ADDR_OWVAR 37
73071: PUSH
73072: LD_INT 31
73074: ST_TO_ADDR
// vc_control := control_rider ;
73075: LD_ADDR_OWVAR 38
73079: PUSH
73080: LD_INT 4
73082: ST_TO_ADDR
// animal := CreateVehicle ;
73083: LD_ADDR_VAR 0 12
73087: PUSH
73088: CALL_OW 45
73092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73093: LD_VAR 0 12
73097: PPUSH
73098: LD_VAR 0 8
73102: PPUSH
73103: LD_INT 0
73105: PPUSH
73106: CALL 75242 0 3
// end ;
73110: GO 73064
73112: POP
73113: POP
// if horses then
73114: LD_VAR 0 5
73118: IFFALSE 73185
// for i = 1 to horses do
73120: LD_ADDR_VAR 0 11
73124: PUSH
73125: DOUBLE
73126: LD_INT 1
73128: DEC
73129: ST_TO_ADDR
73130: LD_VAR 0 5
73134: PUSH
73135: FOR_TO
73136: IFFALSE 73183
// begin hc_class := 21 ;
73138: LD_ADDR_OWVAR 28
73142: PUSH
73143: LD_INT 21
73145: ST_TO_ADDR
// hc_gallery :=  ;
73146: LD_ADDR_OWVAR 33
73150: PUSH
73151: LD_STRING 
73153: ST_TO_ADDR
// animal := CreateHuman ;
73154: LD_ADDR_VAR 0 12
73158: PUSH
73159: CALL_OW 44
73163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73164: LD_VAR 0 12
73168: PPUSH
73169: LD_VAR 0 8
73173: PPUSH
73174: LD_INT 0
73176: PPUSH
73177: CALL 75242 0 3
// end ;
73181: GO 73135
73183: POP
73184: POP
// if birds then
73185: LD_VAR 0 1
73189: IFFALSE 73256
// for i = 1 to birds do
73191: LD_ADDR_VAR 0 11
73195: PUSH
73196: DOUBLE
73197: LD_INT 1
73199: DEC
73200: ST_TO_ADDR
73201: LD_VAR 0 1
73205: PUSH
73206: FOR_TO
73207: IFFALSE 73254
// begin hc_class = 18 ;
73209: LD_ADDR_OWVAR 28
73213: PUSH
73214: LD_INT 18
73216: ST_TO_ADDR
// hc_gallery =  ;
73217: LD_ADDR_OWVAR 33
73221: PUSH
73222: LD_STRING 
73224: ST_TO_ADDR
// animal := CreateHuman ;
73225: LD_ADDR_VAR 0 12
73229: PUSH
73230: CALL_OW 44
73234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73235: LD_VAR 0 12
73239: PPUSH
73240: LD_VAR 0 8
73244: PPUSH
73245: LD_INT 0
73247: PPUSH
73248: CALL 75242 0 3
// end ;
73252: GO 73206
73254: POP
73255: POP
// if tigers then
73256: LD_VAR 0 2
73260: IFFALSE 73344
// for i = 1 to tigers do
73262: LD_ADDR_VAR 0 11
73266: PUSH
73267: DOUBLE
73268: LD_INT 1
73270: DEC
73271: ST_TO_ADDR
73272: LD_VAR 0 2
73276: PUSH
73277: FOR_TO
73278: IFFALSE 73342
// begin hc_class = class_tiger ;
73280: LD_ADDR_OWVAR 28
73284: PUSH
73285: LD_INT 14
73287: ST_TO_ADDR
// hc_gallery =  ;
73288: LD_ADDR_OWVAR 33
73292: PUSH
73293: LD_STRING 
73295: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73296: LD_ADDR_OWVAR 35
73300: PUSH
73301: LD_INT 7
73303: NEG
73304: PPUSH
73305: LD_INT 7
73307: PPUSH
73308: CALL_OW 12
73312: ST_TO_ADDR
// animal := CreateHuman ;
73313: LD_ADDR_VAR 0 12
73317: PUSH
73318: CALL_OW 44
73322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73323: LD_VAR 0 12
73327: PPUSH
73328: LD_VAR 0 8
73332: PPUSH
73333: LD_INT 0
73335: PPUSH
73336: CALL 75242 0 3
// end ;
73340: GO 73277
73342: POP
73343: POP
// if apemans then
73344: LD_VAR 0 3
73348: IFFALSE 73471
// for i = 1 to apemans do
73350: LD_ADDR_VAR 0 11
73354: PUSH
73355: DOUBLE
73356: LD_INT 1
73358: DEC
73359: ST_TO_ADDR
73360: LD_VAR 0 3
73364: PUSH
73365: FOR_TO
73366: IFFALSE 73469
// begin hc_class = class_apeman ;
73368: LD_ADDR_OWVAR 28
73372: PUSH
73373: LD_INT 12
73375: ST_TO_ADDR
// hc_gallery =  ;
73376: LD_ADDR_OWVAR 33
73380: PUSH
73381: LD_STRING 
73383: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73384: LD_ADDR_OWVAR 35
73388: PUSH
73389: LD_INT 2
73391: NEG
73392: PPUSH
73393: LD_INT 2
73395: PPUSH
73396: CALL_OW 12
73400: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73401: LD_ADDR_OWVAR 31
73405: PUSH
73406: LD_INT 1
73408: PPUSH
73409: LD_INT 3
73411: PPUSH
73412: CALL_OW 12
73416: PUSH
73417: LD_INT 1
73419: PPUSH
73420: LD_INT 3
73422: PPUSH
73423: CALL_OW 12
73427: PUSH
73428: LD_INT 0
73430: PUSH
73431: LD_INT 0
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: ST_TO_ADDR
// animal := CreateHuman ;
73440: LD_ADDR_VAR 0 12
73444: PUSH
73445: CALL_OW 44
73449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73450: LD_VAR 0 12
73454: PPUSH
73455: LD_VAR 0 8
73459: PPUSH
73460: LD_INT 0
73462: PPUSH
73463: CALL 75242 0 3
// end ;
73467: GO 73365
73469: POP
73470: POP
// if enchidnas then
73471: LD_VAR 0 4
73475: IFFALSE 73542
// for i = 1 to enchidnas do
73477: LD_ADDR_VAR 0 11
73481: PUSH
73482: DOUBLE
73483: LD_INT 1
73485: DEC
73486: ST_TO_ADDR
73487: LD_VAR 0 4
73491: PUSH
73492: FOR_TO
73493: IFFALSE 73540
// begin hc_class = 13 ;
73495: LD_ADDR_OWVAR 28
73499: PUSH
73500: LD_INT 13
73502: ST_TO_ADDR
// hc_gallery =  ;
73503: LD_ADDR_OWVAR 33
73507: PUSH
73508: LD_STRING 
73510: ST_TO_ADDR
// animal := CreateHuman ;
73511: LD_ADDR_VAR 0 12
73515: PUSH
73516: CALL_OW 44
73520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73521: LD_VAR 0 12
73525: PPUSH
73526: LD_VAR 0 8
73530: PPUSH
73531: LD_INT 0
73533: PPUSH
73534: CALL 75242 0 3
// end ;
73538: GO 73492
73540: POP
73541: POP
// if fishes then
73542: LD_VAR 0 7
73546: IFFALSE 73613
// for i = 1 to fishes do
73548: LD_ADDR_VAR 0 11
73552: PUSH
73553: DOUBLE
73554: LD_INT 1
73556: DEC
73557: ST_TO_ADDR
73558: LD_VAR 0 7
73562: PUSH
73563: FOR_TO
73564: IFFALSE 73611
// begin hc_class = 20 ;
73566: LD_ADDR_OWVAR 28
73570: PUSH
73571: LD_INT 20
73573: ST_TO_ADDR
// hc_gallery =  ;
73574: LD_ADDR_OWVAR 33
73578: PUSH
73579: LD_STRING 
73581: ST_TO_ADDR
// animal := CreateHuman ;
73582: LD_ADDR_VAR 0 12
73586: PUSH
73587: CALL_OW 44
73591: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73592: LD_VAR 0 12
73596: PPUSH
73597: LD_VAR 0 9
73601: PPUSH
73602: LD_INT 0
73604: PPUSH
73605: CALL 75242 0 3
// end ;
73609: GO 73563
73611: POP
73612: POP
// end ;
73613: LD_VAR 0 10
73617: RET
// export function WantHeal ( sci , unit ) ; begin
73618: LD_INT 0
73620: PPUSH
// if GetTaskList ( sci ) > 0 then
73621: LD_VAR 0 1
73625: PPUSH
73626: CALL_OW 437
73630: PUSH
73631: LD_INT 0
73633: GREATER
73634: IFFALSE 73704
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73636: LD_VAR 0 1
73640: PPUSH
73641: CALL_OW 437
73645: PUSH
73646: LD_INT 1
73648: ARRAY
73649: PUSH
73650: LD_INT 1
73652: ARRAY
73653: PUSH
73654: LD_STRING l
73656: EQUAL
73657: PUSH
73658: LD_VAR 0 1
73662: PPUSH
73663: CALL_OW 437
73667: PUSH
73668: LD_INT 1
73670: ARRAY
73671: PUSH
73672: LD_INT 4
73674: ARRAY
73675: PUSH
73676: LD_VAR 0 2
73680: EQUAL
73681: AND
73682: IFFALSE 73694
// result := true else
73684: LD_ADDR_VAR 0 3
73688: PUSH
73689: LD_INT 1
73691: ST_TO_ADDR
73692: GO 73702
// result := false ;
73694: LD_ADDR_VAR 0 3
73698: PUSH
73699: LD_INT 0
73701: ST_TO_ADDR
// end else
73702: GO 73712
// result := false ;
73704: LD_ADDR_VAR 0 3
73708: PUSH
73709: LD_INT 0
73711: ST_TO_ADDR
// end ;
73712: LD_VAR 0 3
73716: RET
// export function HealTarget ( sci ) ; begin
73717: LD_INT 0
73719: PPUSH
// if not sci then
73720: LD_VAR 0 1
73724: NOT
73725: IFFALSE 73729
// exit ;
73727: GO 73794
// result := 0 ;
73729: LD_ADDR_VAR 0 2
73733: PUSH
73734: LD_INT 0
73736: ST_TO_ADDR
// if GetTaskList ( sci ) then
73737: LD_VAR 0 1
73741: PPUSH
73742: CALL_OW 437
73746: IFFALSE 73794
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73748: LD_VAR 0 1
73752: PPUSH
73753: CALL_OW 437
73757: PUSH
73758: LD_INT 1
73760: ARRAY
73761: PUSH
73762: LD_INT 1
73764: ARRAY
73765: PUSH
73766: LD_STRING l
73768: EQUAL
73769: IFFALSE 73794
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73771: LD_ADDR_VAR 0 2
73775: PUSH
73776: LD_VAR 0 1
73780: PPUSH
73781: CALL_OW 437
73785: PUSH
73786: LD_INT 1
73788: ARRAY
73789: PUSH
73790: LD_INT 4
73792: ARRAY
73793: ST_TO_ADDR
// end ;
73794: LD_VAR 0 2
73798: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73799: LD_INT 0
73801: PPUSH
73802: PPUSH
73803: PPUSH
73804: PPUSH
// if not base_units then
73805: LD_VAR 0 1
73809: NOT
73810: IFFALSE 73814
// exit ;
73812: GO 73901
// result := false ;
73814: LD_ADDR_VAR 0 2
73818: PUSH
73819: LD_INT 0
73821: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73822: LD_ADDR_VAR 0 5
73826: PUSH
73827: LD_VAR 0 1
73831: PPUSH
73832: LD_INT 21
73834: PUSH
73835: LD_INT 3
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PPUSH
73842: CALL_OW 72
73846: ST_TO_ADDR
// if not tmp then
73847: LD_VAR 0 5
73851: NOT
73852: IFFALSE 73856
// exit ;
73854: GO 73901
// for i in tmp do
73856: LD_ADDR_VAR 0 3
73860: PUSH
73861: LD_VAR 0 5
73865: PUSH
73866: FOR_IN
73867: IFFALSE 73899
// begin result := EnemyInRange ( i , 22 ) ;
73869: LD_ADDR_VAR 0 2
73873: PUSH
73874: LD_VAR 0 3
73878: PPUSH
73879: LD_INT 22
73881: PPUSH
73882: CALL 71488 0 2
73886: ST_TO_ADDR
// if result then
73887: LD_VAR 0 2
73891: IFFALSE 73897
// exit ;
73893: POP
73894: POP
73895: GO 73901
// end ;
73897: GO 73866
73899: POP
73900: POP
// end ;
73901: LD_VAR 0 2
73905: RET
// export function FilterByTag ( units , tag ) ; begin
73906: LD_INT 0
73908: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73909: LD_ADDR_VAR 0 3
73913: PUSH
73914: LD_VAR 0 1
73918: PPUSH
73919: LD_INT 120
73921: PUSH
73922: LD_VAR 0 2
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PPUSH
73931: CALL_OW 72
73935: ST_TO_ADDR
// end ;
73936: LD_VAR 0 3
73940: RET
// export function IsDriver ( un ) ; begin
73941: LD_INT 0
73943: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73944: LD_ADDR_VAR 0 2
73948: PUSH
73949: LD_VAR 0 1
73953: PUSH
73954: LD_INT 55
73956: PUSH
73957: EMPTY
73958: LIST
73959: PPUSH
73960: CALL_OW 69
73964: IN
73965: ST_TO_ADDR
// end ;
73966: LD_VAR 0 2
73970: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73971: LD_INT 0
73973: PPUSH
73974: PPUSH
// list := [ ] ;
73975: LD_ADDR_VAR 0 5
73979: PUSH
73980: EMPTY
73981: ST_TO_ADDR
// case d of 0 :
73982: LD_VAR 0 3
73986: PUSH
73987: LD_INT 0
73989: DOUBLE
73990: EQUAL
73991: IFTRUE 73995
73993: GO 74128
73995: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73996: LD_ADDR_VAR 0 5
74000: PUSH
74001: LD_VAR 0 1
74005: PUSH
74006: LD_INT 4
74008: MINUS
74009: PUSH
74010: LD_VAR 0 2
74014: PUSH
74015: LD_INT 4
74017: MINUS
74018: PUSH
74019: LD_INT 2
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: LIST
74026: PUSH
74027: LD_VAR 0 1
74031: PUSH
74032: LD_INT 3
74034: MINUS
74035: PUSH
74036: LD_VAR 0 2
74040: PUSH
74041: LD_INT 1
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: LIST
74048: PUSH
74049: LD_VAR 0 1
74053: PUSH
74054: LD_INT 4
74056: PLUS
74057: PUSH
74058: LD_VAR 0 2
74062: PUSH
74063: LD_INT 4
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: LIST
74070: PUSH
74071: LD_VAR 0 1
74075: PUSH
74076: LD_INT 3
74078: PLUS
74079: PUSH
74080: LD_VAR 0 2
74084: PUSH
74085: LD_INT 3
74087: PLUS
74088: PUSH
74089: LD_INT 5
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: LIST
74096: PUSH
74097: LD_VAR 0 1
74101: PUSH
74102: LD_VAR 0 2
74106: PUSH
74107: LD_INT 4
74109: PLUS
74110: PUSH
74111: LD_INT 0
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: LIST
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: ST_TO_ADDR
// end ; 1 :
74126: GO 74826
74128: LD_INT 1
74130: DOUBLE
74131: EQUAL
74132: IFTRUE 74136
74134: GO 74269
74136: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74137: LD_ADDR_VAR 0 5
74141: PUSH
74142: LD_VAR 0 1
74146: PUSH
74147: LD_VAR 0 2
74151: PUSH
74152: LD_INT 4
74154: MINUS
74155: PUSH
74156: LD_INT 3
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: LIST
74163: PUSH
74164: LD_VAR 0 1
74168: PUSH
74169: LD_INT 3
74171: MINUS
74172: PUSH
74173: LD_VAR 0 2
74177: PUSH
74178: LD_INT 3
74180: MINUS
74181: PUSH
74182: LD_INT 2
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: LIST
74189: PUSH
74190: LD_VAR 0 1
74194: PUSH
74195: LD_INT 4
74197: MINUS
74198: PUSH
74199: LD_VAR 0 2
74203: PUSH
74204: LD_INT 1
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: LIST
74211: PUSH
74212: LD_VAR 0 1
74216: PUSH
74217: LD_VAR 0 2
74221: PUSH
74222: LD_INT 3
74224: PLUS
74225: PUSH
74226: LD_INT 0
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: LIST
74233: PUSH
74234: LD_VAR 0 1
74238: PUSH
74239: LD_INT 4
74241: PLUS
74242: PUSH
74243: LD_VAR 0 2
74247: PUSH
74248: LD_INT 4
74250: PLUS
74251: PUSH
74252: LD_INT 5
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: LIST
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: ST_TO_ADDR
// end ; 2 :
74267: GO 74826
74269: LD_INT 2
74271: DOUBLE
74272: EQUAL
74273: IFTRUE 74277
74275: GO 74406
74277: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74278: LD_ADDR_VAR 0 5
74282: PUSH
74283: LD_VAR 0 1
74287: PUSH
74288: LD_VAR 0 2
74292: PUSH
74293: LD_INT 3
74295: MINUS
74296: PUSH
74297: LD_INT 3
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: LIST
74304: PUSH
74305: LD_VAR 0 1
74309: PUSH
74310: LD_INT 4
74312: PLUS
74313: PUSH
74314: LD_VAR 0 2
74318: PUSH
74319: LD_INT 4
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: LIST
74326: PUSH
74327: LD_VAR 0 1
74331: PUSH
74332: LD_VAR 0 2
74336: PUSH
74337: LD_INT 4
74339: PLUS
74340: PUSH
74341: LD_INT 0
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: LIST
74348: PUSH
74349: LD_VAR 0 1
74353: PUSH
74354: LD_INT 3
74356: MINUS
74357: PUSH
74358: LD_VAR 0 2
74362: PUSH
74363: LD_INT 1
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: LIST
74370: PUSH
74371: LD_VAR 0 1
74375: PUSH
74376: LD_INT 4
74378: MINUS
74379: PUSH
74380: LD_VAR 0 2
74384: PUSH
74385: LD_INT 4
74387: MINUS
74388: PUSH
74389: LD_INT 2
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: LIST
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: ST_TO_ADDR
// end ; 3 :
74404: GO 74826
74406: LD_INT 3
74408: DOUBLE
74409: EQUAL
74410: IFTRUE 74414
74412: GO 74547
74414: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74415: LD_ADDR_VAR 0 5
74419: PUSH
74420: LD_VAR 0 1
74424: PUSH
74425: LD_INT 3
74427: PLUS
74428: PUSH
74429: LD_VAR 0 2
74433: PUSH
74434: LD_INT 4
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: LIST
74441: PUSH
74442: LD_VAR 0 1
74446: PUSH
74447: LD_INT 4
74449: PLUS
74450: PUSH
74451: LD_VAR 0 2
74455: PUSH
74456: LD_INT 4
74458: PLUS
74459: PUSH
74460: LD_INT 5
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: LIST
74467: PUSH
74468: LD_VAR 0 1
74472: PUSH
74473: LD_INT 4
74475: MINUS
74476: PUSH
74477: LD_VAR 0 2
74481: PUSH
74482: LD_INT 1
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: LIST
74489: PUSH
74490: LD_VAR 0 1
74494: PUSH
74495: LD_VAR 0 2
74499: PUSH
74500: LD_INT 4
74502: MINUS
74503: PUSH
74504: LD_INT 3
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: LIST
74511: PUSH
74512: LD_VAR 0 1
74516: PUSH
74517: LD_INT 3
74519: MINUS
74520: PUSH
74521: LD_VAR 0 2
74525: PUSH
74526: LD_INT 3
74528: MINUS
74529: PUSH
74530: LD_INT 2
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: LIST
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: ST_TO_ADDR
// end ; 4 :
74545: GO 74826
74547: LD_INT 4
74549: DOUBLE
74550: EQUAL
74551: IFTRUE 74555
74553: GO 74688
74555: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74556: LD_ADDR_VAR 0 5
74560: PUSH
74561: LD_VAR 0 1
74565: PUSH
74566: LD_VAR 0 2
74570: PUSH
74571: LD_INT 4
74573: PLUS
74574: PUSH
74575: LD_INT 0
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: LIST
74582: PUSH
74583: LD_VAR 0 1
74587: PUSH
74588: LD_INT 3
74590: PLUS
74591: PUSH
74592: LD_VAR 0 2
74596: PUSH
74597: LD_INT 3
74599: PLUS
74600: PUSH
74601: LD_INT 5
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: LIST
74608: PUSH
74609: LD_VAR 0 1
74613: PUSH
74614: LD_INT 4
74616: PLUS
74617: PUSH
74618: LD_VAR 0 2
74622: PUSH
74623: LD_INT 4
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: LIST
74630: PUSH
74631: LD_VAR 0 1
74635: PUSH
74636: LD_VAR 0 2
74640: PUSH
74641: LD_INT 3
74643: MINUS
74644: PUSH
74645: LD_INT 3
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: LIST
74652: PUSH
74653: LD_VAR 0 1
74657: PUSH
74658: LD_INT 4
74660: MINUS
74661: PUSH
74662: LD_VAR 0 2
74666: PUSH
74667: LD_INT 4
74669: MINUS
74670: PUSH
74671: LD_INT 2
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: LIST
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: ST_TO_ADDR
// end ; 5 :
74686: GO 74826
74688: LD_INT 5
74690: DOUBLE
74691: EQUAL
74692: IFTRUE 74696
74694: GO 74825
74696: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74697: LD_ADDR_VAR 0 5
74701: PUSH
74702: LD_VAR 0 1
74706: PUSH
74707: LD_INT 4
74709: MINUS
74710: PUSH
74711: LD_VAR 0 2
74715: PUSH
74716: LD_INT 1
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: LIST
74723: PUSH
74724: LD_VAR 0 1
74728: PUSH
74729: LD_VAR 0 2
74733: PUSH
74734: LD_INT 4
74736: MINUS
74737: PUSH
74738: LD_INT 3
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: LIST
74745: PUSH
74746: LD_VAR 0 1
74750: PUSH
74751: LD_INT 4
74753: PLUS
74754: PUSH
74755: LD_VAR 0 2
74759: PUSH
74760: LD_INT 4
74762: PLUS
74763: PUSH
74764: LD_INT 5
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: LIST
74771: PUSH
74772: LD_VAR 0 1
74776: PUSH
74777: LD_INT 3
74779: PLUS
74780: PUSH
74781: LD_VAR 0 2
74785: PUSH
74786: LD_INT 4
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: LIST
74793: PUSH
74794: LD_VAR 0 1
74798: PUSH
74799: LD_VAR 0 2
74803: PUSH
74804: LD_INT 3
74806: PLUS
74807: PUSH
74808: LD_INT 0
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: LIST
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: ST_TO_ADDR
// end ; end ;
74823: GO 74826
74825: POP
// result := list ;
74826: LD_ADDR_VAR 0 4
74830: PUSH
74831: LD_VAR 0 5
74835: ST_TO_ADDR
// end ;
74836: LD_VAR 0 4
74840: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74841: LD_INT 0
74843: PPUSH
74844: PPUSH
74845: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74846: LD_VAR 0 1
74850: NOT
74851: PUSH
74852: LD_VAR 0 2
74856: PUSH
74857: LD_INT 1
74859: PUSH
74860: LD_INT 2
74862: PUSH
74863: LD_INT 3
74865: PUSH
74866: LD_INT 4
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: IN
74875: NOT
74876: OR
74877: IFFALSE 74881
// exit ;
74879: GO 74964
// tmp := [ ] ;
74881: LD_ADDR_VAR 0 5
74885: PUSH
74886: EMPTY
74887: ST_TO_ADDR
// for i in units do
74888: LD_ADDR_VAR 0 4
74892: PUSH
74893: LD_VAR 0 1
74897: PUSH
74898: FOR_IN
74899: IFFALSE 74933
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74901: LD_ADDR_VAR 0 5
74905: PUSH
74906: LD_VAR 0 5
74910: PPUSH
74911: LD_VAR 0 4
74915: PPUSH
74916: LD_VAR 0 2
74920: PPUSH
74921: CALL_OW 259
74925: PPUSH
74926: CALL 76325 0 2
74930: ST_TO_ADDR
74931: GO 74898
74933: POP
74934: POP
// if not tmp then
74935: LD_VAR 0 5
74939: NOT
74940: IFFALSE 74944
// exit ;
74942: GO 74964
// result := SortListByListDesc ( units , tmp ) ;
74944: LD_ADDR_VAR 0 3
74948: PUSH
74949: LD_VAR 0 1
74953: PPUSH
74954: LD_VAR 0 5
74958: PPUSH
74959: CALL_OW 77
74963: ST_TO_ADDR
// end ;
74964: LD_VAR 0 3
74968: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74969: LD_INT 0
74971: PPUSH
74972: PPUSH
74973: PPUSH
// result := false ;
74974: LD_ADDR_VAR 0 3
74978: PUSH
74979: LD_INT 0
74981: ST_TO_ADDR
// if not building then
74982: LD_VAR 0 2
74986: NOT
74987: IFFALSE 74991
// exit ;
74989: GO 75129
// x := GetX ( building ) ;
74991: LD_ADDR_VAR 0 4
74995: PUSH
74996: LD_VAR 0 2
75000: PPUSH
75001: CALL_OW 250
75005: ST_TO_ADDR
// y := GetY ( building ) ;
75006: LD_ADDR_VAR 0 5
75010: PUSH
75011: LD_VAR 0 2
75015: PPUSH
75016: CALL_OW 251
75020: ST_TO_ADDR
// if not x or not y then
75021: LD_VAR 0 4
75025: NOT
75026: PUSH
75027: LD_VAR 0 5
75031: NOT
75032: OR
75033: IFFALSE 75037
// exit ;
75035: GO 75129
// if GetTaskList ( unit ) then
75037: LD_VAR 0 1
75041: PPUSH
75042: CALL_OW 437
75046: IFFALSE 75129
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75048: LD_STRING e
75050: PUSH
75051: LD_VAR 0 1
75055: PPUSH
75056: CALL_OW 437
75060: PUSH
75061: LD_INT 1
75063: ARRAY
75064: PUSH
75065: LD_INT 1
75067: ARRAY
75068: EQUAL
75069: PUSH
75070: LD_VAR 0 4
75074: PUSH
75075: LD_VAR 0 1
75079: PPUSH
75080: CALL_OW 437
75084: PUSH
75085: LD_INT 1
75087: ARRAY
75088: PUSH
75089: LD_INT 2
75091: ARRAY
75092: EQUAL
75093: AND
75094: PUSH
75095: LD_VAR 0 5
75099: PUSH
75100: LD_VAR 0 1
75104: PPUSH
75105: CALL_OW 437
75109: PUSH
75110: LD_INT 1
75112: ARRAY
75113: PUSH
75114: LD_INT 3
75116: ARRAY
75117: EQUAL
75118: AND
75119: IFFALSE 75129
// result := true end ;
75121: LD_ADDR_VAR 0 3
75125: PUSH
75126: LD_INT 1
75128: ST_TO_ADDR
// end ;
75129: LD_VAR 0 3
75133: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75134: LD_INT 0
75136: PPUSH
// result := false ;
75137: LD_ADDR_VAR 0 4
75141: PUSH
75142: LD_INT 0
75144: ST_TO_ADDR
// if GetTaskList ( unit ) then
75145: LD_VAR 0 1
75149: PPUSH
75150: CALL_OW 437
75154: IFFALSE 75237
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75156: LD_STRING M
75158: PUSH
75159: LD_VAR 0 1
75163: PPUSH
75164: CALL_OW 437
75168: PUSH
75169: LD_INT 1
75171: ARRAY
75172: PUSH
75173: LD_INT 1
75175: ARRAY
75176: EQUAL
75177: PUSH
75178: LD_VAR 0 2
75182: PUSH
75183: LD_VAR 0 1
75187: PPUSH
75188: CALL_OW 437
75192: PUSH
75193: LD_INT 1
75195: ARRAY
75196: PUSH
75197: LD_INT 2
75199: ARRAY
75200: EQUAL
75201: AND
75202: PUSH
75203: LD_VAR 0 3
75207: PUSH
75208: LD_VAR 0 1
75212: PPUSH
75213: CALL_OW 437
75217: PUSH
75218: LD_INT 1
75220: ARRAY
75221: PUSH
75222: LD_INT 3
75224: ARRAY
75225: EQUAL
75226: AND
75227: IFFALSE 75237
// result := true ;
75229: LD_ADDR_VAR 0 4
75233: PUSH
75234: LD_INT 1
75236: ST_TO_ADDR
// end ; end ;
75237: LD_VAR 0 4
75241: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75242: LD_INT 0
75244: PPUSH
75245: PPUSH
75246: PPUSH
75247: PPUSH
// if not unit or not area then
75248: LD_VAR 0 1
75252: NOT
75253: PUSH
75254: LD_VAR 0 2
75258: NOT
75259: OR
75260: IFFALSE 75264
// exit ;
75262: GO 75428
// tmp := AreaToList ( area , i ) ;
75264: LD_ADDR_VAR 0 6
75268: PUSH
75269: LD_VAR 0 2
75273: PPUSH
75274: LD_VAR 0 5
75278: PPUSH
75279: CALL_OW 517
75283: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75284: LD_ADDR_VAR 0 5
75288: PUSH
75289: DOUBLE
75290: LD_INT 1
75292: DEC
75293: ST_TO_ADDR
75294: LD_VAR 0 6
75298: PUSH
75299: LD_INT 1
75301: ARRAY
75302: PUSH
75303: FOR_TO
75304: IFFALSE 75426
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75306: LD_ADDR_VAR 0 7
75310: PUSH
75311: LD_VAR 0 6
75315: PUSH
75316: LD_INT 1
75318: ARRAY
75319: PUSH
75320: LD_VAR 0 5
75324: ARRAY
75325: PUSH
75326: LD_VAR 0 6
75330: PUSH
75331: LD_INT 2
75333: ARRAY
75334: PUSH
75335: LD_VAR 0 5
75339: ARRAY
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75345: LD_VAR 0 7
75349: PUSH
75350: LD_INT 1
75352: ARRAY
75353: PPUSH
75354: LD_VAR 0 7
75358: PUSH
75359: LD_INT 2
75361: ARRAY
75362: PPUSH
75363: CALL_OW 428
75367: PUSH
75368: LD_INT 0
75370: EQUAL
75371: IFFALSE 75424
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75373: LD_VAR 0 1
75377: PPUSH
75378: LD_VAR 0 7
75382: PUSH
75383: LD_INT 1
75385: ARRAY
75386: PPUSH
75387: LD_VAR 0 7
75391: PUSH
75392: LD_INT 2
75394: ARRAY
75395: PPUSH
75396: LD_VAR 0 3
75400: PPUSH
75401: CALL_OW 48
// result := IsPlaced ( unit ) ;
75405: LD_ADDR_VAR 0 4
75409: PUSH
75410: LD_VAR 0 1
75414: PPUSH
75415: CALL_OW 305
75419: ST_TO_ADDR
// exit ;
75420: POP
75421: POP
75422: GO 75428
// end ; end ;
75424: GO 75303
75426: POP
75427: POP
// end ;
75428: LD_VAR 0 4
75432: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75433: LD_INT 0
75435: PPUSH
75436: PPUSH
75437: PPUSH
// if not side or side > 8 then
75438: LD_VAR 0 1
75442: NOT
75443: PUSH
75444: LD_VAR 0 1
75448: PUSH
75449: LD_INT 8
75451: GREATER
75452: OR
75453: IFFALSE 75457
// exit ;
75455: GO 75644
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75457: LD_ADDR_VAR 0 4
75461: PUSH
75462: LD_INT 22
75464: PUSH
75465: LD_VAR 0 1
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 21
75476: PUSH
75477: LD_INT 3
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: PPUSH
75488: CALL_OW 69
75492: ST_TO_ADDR
// if not tmp then
75493: LD_VAR 0 4
75497: NOT
75498: IFFALSE 75502
// exit ;
75500: GO 75644
// enable_addtolog := true ;
75502: LD_ADDR_OWVAR 81
75506: PUSH
75507: LD_INT 1
75509: ST_TO_ADDR
// AddToLog ( [ ) ;
75510: LD_STRING [
75512: PPUSH
75513: CALL_OW 561
// for i in tmp do
75517: LD_ADDR_VAR 0 3
75521: PUSH
75522: LD_VAR 0 4
75526: PUSH
75527: FOR_IN
75528: IFFALSE 75635
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75530: LD_STRING [
75532: PUSH
75533: LD_VAR 0 3
75537: PPUSH
75538: CALL_OW 266
75542: STR
75543: PUSH
75544: LD_STRING , 
75546: STR
75547: PUSH
75548: LD_VAR 0 3
75552: PPUSH
75553: CALL_OW 250
75557: STR
75558: PUSH
75559: LD_STRING , 
75561: STR
75562: PUSH
75563: LD_VAR 0 3
75567: PPUSH
75568: CALL_OW 251
75572: STR
75573: PUSH
75574: LD_STRING , 
75576: STR
75577: PUSH
75578: LD_VAR 0 3
75582: PPUSH
75583: CALL_OW 254
75587: STR
75588: PUSH
75589: LD_STRING , 
75591: STR
75592: PUSH
75593: LD_VAR 0 3
75597: PPUSH
75598: LD_INT 1
75600: PPUSH
75601: CALL_OW 268
75605: STR
75606: PUSH
75607: LD_STRING , 
75609: STR
75610: PUSH
75611: LD_VAR 0 3
75615: PPUSH
75616: LD_INT 2
75618: PPUSH
75619: CALL_OW 268
75623: STR
75624: PUSH
75625: LD_STRING ],
75627: STR
75628: PPUSH
75629: CALL_OW 561
// end ;
75633: GO 75527
75635: POP
75636: POP
// AddToLog ( ]; ) ;
75637: LD_STRING ];
75639: PPUSH
75640: CALL_OW 561
// end ;
75644: LD_VAR 0 2
75648: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75649: LD_INT 0
75651: PPUSH
75652: PPUSH
75653: PPUSH
75654: PPUSH
75655: PPUSH
// if not area or not rate or not max then
75656: LD_VAR 0 1
75660: NOT
75661: PUSH
75662: LD_VAR 0 2
75666: NOT
75667: OR
75668: PUSH
75669: LD_VAR 0 4
75673: NOT
75674: OR
75675: IFFALSE 75679
// exit ;
75677: GO 75868
// while 1 do
75679: LD_INT 1
75681: IFFALSE 75868
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75683: LD_ADDR_VAR 0 9
75687: PUSH
75688: LD_VAR 0 1
75692: PPUSH
75693: LD_INT 1
75695: PPUSH
75696: CALL_OW 287
75700: PUSH
75701: LD_INT 10
75703: MUL
75704: ST_TO_ADDR
// r := rate / 10 ;
75705: LD_ADDR_VAR 0 7
75709: PUSH
75710: LD_VAR 0 2
75714: PUSH
75715: LD_INT 10
75717: DIVREAL
75718: ST_TO_ADDR
// time := 1 1$00 ;
75719: LD_ADDR_VAR 0 8
75723: PUSH
75724: LD_INT 2100
75726: ST_TO_ADDR
// if amount < min then
75727: LD_VAR 0 9
75731: PUSH
75732: LD_VAR 0 3
75736: LESS
75737: IFFALSE 75755
// r := r * 2 else
75739: LD_ADDR_VAR 0 7
75743: PUSH
75744: LD_VAR 0 7
75748: PUSH
75749: LD_INT 2
75751: MUL
75752: ST_TO_ADDR
75753: GO 75781
// if amount > max then
75755: LD_VAR 0 9
75759: PUSH
75760: LD_VAR 0 4
75764: GREATER
75765: IFFALSE 75781
// r := r / 2 ;
75767: LD_ADDR_VAR 0 7
75771: PUSH
75772: LD_VAR 0 7
75776: PUSH
75777: LD_INT 2
75779: DIVREAL
75780: ST_TO_ADDR
// time := time / r ;
75781: LD_ADDR_VAR 0 8
75785: PUSH
75786: LD_VAR 0 8
75790: PUSH
75791: LD_VAR 0 7
75795: DIVREAL
75796: ST_TO_ADDR
// if time < 0 then
75797: LD_VAR 0 8
75801: PUSH
75802: LD_INT 0
75804: LESS
75805: IFFALSE 75822
// time := time * - 1 ;
75807: LD_ADDR_VAR 0 8
75811: PUSH
75812: LD_VAR 0 8
75816: PUSH
75817: LD_INT 1
75819: NEG
75820: MUL
75821: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75822: LD_VAR 0 8
75826: PUSH
75827: LD_INT 35
75829: PPUSH
75830: LD_INT 875
75832: PPUSH
75833: CALL_OW 12
75837: PLUS
75838: PPUSH
75839: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75843: LD_INT 1
75845: PPUSH
75846: LD_INT 5
75848: PPUSH
75849: CALL_OW 12
75853: PPUSH
75854: LD_VAR 0 1
75858: PPUSH
75859: LD_INT 1
75861: PPUSH
75862: CALL_OW 55
// end ;
75866: GO 75679
// end ;
75868: LD_VAR 0 5
75872: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75873: LD_INT 0
75875: PPUSH
75876: PPUSH
75877: PPUSH
75878: PPUSH
75879: PPUSH
75880: PPUSH
75881: PPUSH
75882: PPUSH
// if not turrets or not factories then
75883: LD_VAR 0 1
75887: NOT
75888: PUSH
75889: LD_VAR 0 2
75893: NOT
75894: OR
75895: IFFALSE 75899
// exit ;
75897: GO 76206
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75899: LD_ADDR_VAR 0 10
75903: PUSH
75904: LD_INT 5
75906: PUSH
75907: LD_INT 6
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: PUSH
75914: LD_INT 2
75916: PUSH
75917: LD_INT 4
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 3
75926: PUSH
75927: LD_INT 5
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: LIST
75938: PUSH
75939: LD_INT 24
75941: PUSH
75942: LD_INT 25
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 23
75951: PUSH
75952: LD_INT 27
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: LD_INT 42
75965: PUSH
75966: LD_INT 43
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: PUSH
75973: LD_INT 44
75975: PUSH
75976: LD_INT 46
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: PUSH
75983: LD_INT 45
75985: PUSH
75986: LD_INT 47
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: LIST
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: LIST
76002: ST_TO_ADDR
// result := [ ] ;
76003: LD_ADDR_VAR 0 3
76007: PUSH
76008: EMPTY
76009: ST_TO_ADDR
// for i in turrets do
76010: LD_ADDR_VAR 0 4
76014: PUSH
76015: LD_VAR 0 1
76019: PUSH
76020: FOR_IN
76021: IFFALSE 76204
// begin nat := GetNation ( i ) ;
76023: LD_ADDR_VAR 0 7
76027: PUSH
76028: LD_VAR 0 4
76032: PPUSH
76033: CALL_OW 248
76037: ST_TO_ADDR
// weapon := 0 ;
76038: LD_ADDR_VAR 0 8
76042: PUSH
76043: LD_INT 0
76045: ST_TO_ADDR
// if not nat then
76046: LD_VAR 0 7
76050: NOT
76051: IFFALSE 76055
// continue ;
76053: GO 76020
// for j in list [ nat ] do
76055: LD_ADDR_VAR 0 5
76059: PUSH
76060: LD_VAR 0 10
76064: PUSH
76065: LD_VAR 0 7
76069: ARRAY
76070: PUSH
76071: FOR_IN
76072: IFFALSE 76113
// if GetBWeapon ( i ) = j [ 1 ] then
76074: LD_VAR 0 4
76078: PPUSH
76079: CALL_OW 269
76083: PUSH
76084: LD_VAR 0 5
76088: PUSH
76089: LD_INT 1
76091: ARRAY
76092: EQUAL
76093: IFFALSE 76111
// begin weapon := j [ 2 ] ;
76095: LD_ADDR_VAR 0 8
76099: PUSH
76100: LD_VAR 0 5
76104: PUSH
76105: LD_INT 2
76107: ARRAY
76108: ST_TO_ADDR
// break ;
76109: GO 76113
// end ;
76111: GO 76071
76113: POP
76114: POP
// if not weapon then
76115: LD_VAR 0 8
76119: NOT
76120: IFFALSE 76124
// continue ;
76122: GO 76020
// for k in factories do
76124: LD_ADDR_VAR 0 6
76128: PUSH
76129: LD_VAR 0 2
76133: PUSH
76134: FOR_IN
76135: IFFALSE 76200
// begin weapons := AvailableWeaponList ( k ) ;
76137: LD_ADDR_VAR 0 9
76141: PUSH
76142: LD_VAR 0 6
76146: PPUSH
76147: CALL_OW 478
76151: ST_TO_ADDR
// if not weapons then
76152: LD_VAR 0 9
76156: NOT
76157: IFFALSE 76161
// continue ;
76159: GO 76134
// if weapon in weapons then
76161: LD_VAR 0 8
76165: PUSH
76166: LD_VAR 0 9
76170: IN
76171: IFFALSE 76198
// begin result := [ i , weapon ] ;
76173: LD_ADDR_VAR 0 3
76177: PUSH
76178: LD_VAR 0 4
76182: PUSH
76183: LD_VAR 0 8
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: ST_TO_ADDR
// exit ;
76192: POP
76193: POP
76194: POP
76195: POP
76196: GO 76206
// end ; end ;
76198: GO 76134
76200: POP
76201: POP
// end ;
76202: GO 76020
76204: POP
76205: POP
// end ;
76206: LD_VAR 0 3
76210: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76211: LD_INT 0
76213: PPUSH
// if not side or side > 8 then
76214: LD_VAR 0 3
76218: NOT
76219: PUSH
76220: LD_VAR 0 3
76224: PUSH
76225: LD_INT 8
76227: GREATER
76228: OR
76229: IFFALSE 76233
// exit ;
76231: GO 76292
// if not range then
76233: LD_VAR 0 4
76237: NOT
76238: IFFALSE 76249
// range := - 12 ;
76240: LD_ADDR_VAR 0 4
76244: PUSH
76245: LD_INT 12
76247: NEG
76248: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76249: LD_VAR 0 1
76253: PPUSH
76254: LD_VAR 0 2
76258: PPUSH
76259: LD_VAR 0 3
76263: PPUSH
76264: LD_VAR 0 4
76268: PPUSH
76269: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76273: LD_VAR 0 1
76277: PPUSH
76278: LD_VAR 0 2
76282: PPUSH
76283: LD_VAR 0 3
76287: PPUSH
76288: CALL_OW 331
// end ;
76292: LD_VAR 0 5
76296: RET
// export function Video ( mode ) ; begin
76297: LD_INT 0
76299: PPUSH
// ingame_video = mode ;
76300: LD_ADDR_OWVAR 52
76304: PUSH
76305: LD_VAR 0 1
76309: ST_TO_ADDR
// interface_hidden = mode ;
76310: LD_ADDR_OWVAR 54
76314: PUSH
76315: LD_VAR 0 1
76319: ST_TO_ADDR
// end ;
76320: LD_VAR 0 2
76324: RET
// export function Join ( array , element ) ; begin
76325: LD_INT 0
76327: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76328: LD_ADDR_VAR 0 3
76332: PUSH
76333: LD_VAR 0 1
76337: PPUSH
76338: LD_VAR 0 1
76342: PUSH
76343: LD_INT 1
76345: PLUS
76346: PPUSH
76347: LD_VAR 0 2
76351: PPUSH
76352: CALL_OW 1
76356: ST_TO_ADDR
// end ;
76357: LD_VAR 0 3
76361: RET
// export function JoinUnion ( array , element ) ; begin
76362: LD_INT 0
76364: PPUSH
// result := array union element ;
76365: LD_ADDR_VAR 0 3
76369: PUSH
76370: LD_VAR 0 1
76374: PUSH
76375: LD_VAR 0 2
76379: UNION
76380: ST_TO_ADDR
// end ;
76381: LD_VAR 0 3
76385: RET
// export function GetBehemoths ( side ) ; begin
76386: LD_INT 0
76388: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76389: LD_ADDR_VAR 0 2
76393: PUSH
76394: LD_INT 22
76396: PUSH
76397: LD_VAR 0 1
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: PUSH
76406: LD_INT 31
76408: PUSH
76409: LD_INT 25
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PPUSH
76420: CALL_OW 69
76424: ST_TO_ADDR
// end ;
76425: LD_VAR 0 2
76429: RET
// export function Shuffle ( array ) ; var i , index ; begin
76430: LD_INT 0
76432: PPUSH
76433: PPUSH
76434: PPUSH
// result := [ ] ;
76435: LD_ADDR_VAR 0 2
76439: PUSH
76440: EMPTY
76441: ST_TO_ADDR
// if not array then
76442: LD_VAR 0 1
76446: NOT
76447: IFFALSE 76451
// exit ;
76449: GO 76550
// Randomize ;
76451: CALL_OW 10
// for i = array downto 1 do
76455: LD_ADDR_VAR 0 3
76459: PUSH
76460: DOUBLE
76461: LD_VAR 0 1
76465: INC
76466: ST_TO_ADDR
76467: LD_INT 1
76469: PUSH
76470: FOR_DOWNTO
76471: IFFALSE 76548
// begin index := rand ( 1 , array ) ;
76473: LD_ADDR_VAR 0 4
76477: PUSH
76478: LD_INT 1
76480: PPUSH
76481: LD_VAR 0 1
76485: PPUSH
76486: CALL_OW 12
76490: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76491: LD_ADDR_VAR 0 2
76495: PUSH
76496: LD_VAR 0 2
76500: PPUSH
76501: LD_VAR 0 2
76505: PUSH
76506: LD_INT 1
76508: PLUS
76509: PPUSH
76510: LD_VAR 0 1
76514: PUSH
76515: LD_VAR 0 4
76519: ARRAY
76520: PPUSH
76521: CALL_OW 2
76525: ST_TO_ADDR
// array := Delete ( array , index ) ;
76526: LD_ADDR_VAR 0 1
76530: PUSH
76531: LD_VAR 0 1
76535: PPUSH
76536: LD_VAR 0 4
76540: PPUSH
76541: CALL_OW 3
76545: ST_TO_ADDR
// end ;
76546: GO 76470
76548: POP
76549: POP
// end ;
76550: LD_VAR 0 2
76554: RET
// export function GetBaseMaterials ( base ) ; begin
76555: LD_INT 0
76557: PPUSH
// result := [ 0 , 0 , 0 ] ;
76558: LD_ADDR_VAR 0 2
76562: PUSH
76563: LD_INT 0
76565: PUSH
76566: LD_INT 0
76568: PUSH
76569: LD_INT 0
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: LIST
76576: ST_TO_ADDR
// if not base then
76577: LD_VAR 0 1
76581: NOT
76582: IFFALSE 76586
// exit ;
76584: GO 76635
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76586: LD_ADDR_VAR 0 2
76590: PUSH
76591: LD_VAR 0 1
76595: PPUSH
76596: LD_INT 1
76598: PPUSH
76599: CALL_OW 275
76603: PUSH
76604: LD_VAR 0 1
76608: PPUSH
76609: LD_INT 2
76611: PPUSH
76612: CALL_OW 275
76616: PUSH
76617: LD_VAR 0 1
76621: PPUSH
76622: LD_INT 3
76624: PPUSH
76625: CALL_OW 275
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: LIST
76634: ST_TO_ADDR
// end ;
76635: LD_VAR 0 2
76639: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76640: LD_INT 0
76642: PPUSH
76643: PPUSH
// result := array ;
76644: LD_ADDR_VAR 0 3
76648: PUSH
76649: LD_VAR 0 1
76653: ST_TO_ADDR
// if size >= result then
76654: LD_VAR 0 2
76658: PUSH
76659: LD_VAR 0 3
76663: GREATEREQUAL
76664: IFFALSE 76668
// exit ;
76666: GO 76718
// if size then
76668: LD_VAR 0 2
76672: IFFALSE 76718
// for i := array downto size do
76674: LD_ADDR_VAR 0 4
76678: PUSH
76679: DOUBLE
76680: LD_VAR 0 1
76684: INC
76685: ST_TO_ADDR
76686: LD_VAR 0 2
76690: PUSH
76691: FOR_DOWNTO
76692: IFFALSE 76716
// result := Delete ( result , result ) ;
76694: LD_ADDR_VAR 0 3
76698: PUSH
76699: LD_VAR 0 3
76703: PPUSH
76704: LD_VAR 0 3
76708: PPUSH
76709: CALL_OW 3
76713: ST_TO_ADDR
76714: GO 76691
76716: POP
76717: POP
// end ;
76718: LD_VAR 0 3
76722: RET
// export function ComExit ( unit ) ; var tmp ; begin
76723: LD_INT 0
76725: PPUSH
76726: PPUSH
// if not IsInUnit ( unit ) then
76727: LD_VAR 0 1
76731: PPUSH
76732: CALL_OW 310
76736: NOT
76737: IFFALSE 76741
// exit ;
76739: GO 76801
// tmp := IsInUnit ( unit ) ;
76741: LD_ADDR_VAR 0 3
76745: PUSH
76746: LD_VAR 0 1
76750: PPUSH
76751: CALL_OW 310
76755: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76756: LD_VAR 0 3
76760: PPUSH
76761: CALL_OW 247
76765: PUSH
76766: LD_INT 2
76768: EQUAL
76769: IFFALSE 76782
// ComExitVehicle ( unit ) else
76771: LD_VAR 0 1
76775: PPUSH
76776: CALL_OW 121
76780: GO 76791
// ComExitBuilding ( unit ) ;
76782: LD_VAR 0 1
76786: PPUSH
76787: CALL_OW 122
// result := tmp ;
76791: LD_ADDR_VAR 0 2
76795: PUSH
76796: LD_VAR 0 3
76800: ST_TO_ADDR
// end ;
76801: LD_VAR 0 2
76805: RET
// export function ComExitAll ( units ) ; var i ; begin
76806: LD_INT 0
76808: PPUSH
76809: PPUSH
// if not units then
76810: LD_VAR 0 1
76814: NOT
76815: IFFALSE 76819
// exit ;
76817: GO 76845
// for i in units do
76819: LD_ADDR_VAR 0 3
76823: PUSH
76824: LD_VAR 0 1
76828: PUSH
76829: FOR_IN
76830: IFFALSE 76843
// ComExit ( i ) ;
76832: LD_VAR 0 3
76836: PPUSH
76837: CALL 76723 0 1
76841: GO 76829
76843: POP
76844: POP
// end ;
76845: LD_VAR 0 2
76849: RET
// export function ResetHc ; begin
76850: LD_INT 0
76852: PPUSH
// InitHc ;
76853: CALL_OW 19
// hc_importance := 0 ;
76857: LD_ADDR_OWVAR 32
76861: PUSH
76862: LD_INT 0
76864: ST_TO_ADDR
// end ;
76865: LD_VAR 0 1
76869: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76870: LD_INT 0
76872: PPUSH
76873: PPUSH
76874: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76875: LD_ADDR_VAR 0 6
76879: PUSH
76880: LD_VAR 0 1
76884: PUSH
76885: LD_VAR 0 3
76889: PLUS
76890: PUSH
76891: LD_INT 2
76893: DIV
76894: ST_TO_ADDR
// if _x < 0 then
76895: LD_VAR 0 6
76899: PUSH
76900: LD_INT 0
76902: LESS
76903: IFFALSE 76920
// _x := _x * - 1 ;
76905: LD_ADDR_VAR 0 6
76909: PUSH
76910: LD_VAR 0 6
76914: PUSH
76915: LD_INT 1
76917: NEG
76918: MUL
76919: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76920: LD_ADDR_VAR 0 7
76924: PUSH
76925: LD_VAR 0 2
76929: PUSH
76930: LD_VAR 0 4
76934: PLUS
76935: PUSH
76936: LD_INT 2
76938: DIV
76939: ST_TO_ADDR
// if _y < 0 then
76940: LD_VAR 0 7
76944: PUSH
76945: LD_INT 0
76947: LESS
76948: IFFALSE 76965
// _y := _y * - 1 ;
76950: LD_ADDR_VAR 0 7
76954: PUSH
76955: LD_VAR 0 7
76959: PUSH
76960: LD_INT 1
76962: NEG
76963: MUL
76964: ST_TO_ADDR
// result := [ _x , _y ] ;
76965: LD_ADDR_VAR 0 5
76969: PUSH
76970: LD_VAR 0 6
76974: PUSH
76975: LD_VAR 0 7
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: ST_TO_ADDR
// end ;
76984: LD_VAR 0 5
76988: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76989: LD_INT 0
76991: PPUSH
76992: PPUSH
76993: PPUSH
76994: PPUSH
// task := GetTaskList ( unit ) ;
76995: LD_ADDR_VAR 0 7
76999: PUSH
77000: LD_VAR 0 1
77004: PPUSH
77005: CALL_OW 437
77009: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77010: LD_VAR 0 7
77014: NOT
77015: PUSH
77016: LD_VAR 0 1
77020: PPUSH
77021: LD_VAR 0 2
77025: PPUSH
77026: CALL_OW 308
77030: NOT
77031: AND
77032: IFFALSE 77036
// exit ;
77034: GO 77154
// if IsInArea ( unit , area ) then
77036: LD_VAR 0 1
77040: PPUSH
77041: LD_VAR 0 2
77045: PPUSH
77046: CALL_OW 308
77050: IFFALSE 77068
// begin ComMoveToArea ( unit , goAway ) ;
77052: LD_VAR 0 1
77056: PPUSH
77057: LD_VAR 0 3
77061: PPUSH
77062: CALL_OW 113
// exit ;
77066: GO 77154
// end ; if task [ 1 ] [ 1 ] <> M then
77068: LD_VAR 0 7
77072: PUSH
77073: LD_INT 1
77075: ARRAY
77076: PUSH
77077: LD_INT 1
77079: ARRAY
77080: PUSH
77081: LD_STRING M
77083: NONEQUAL
77084: IFFALSE 77088
// exit ;
77086: GO 77154
// x := task [ 1 ] [ 2 ] ;
77088: LD_ADDR_VAR 0 5
77092: PUSH
77093: LD_VAR 0 7
77097: PUSH
77098: LD_INT 1
77100: ARRAY
77101: PUSH
77102: LD_INT 2
77104: ARRAY
77105: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77106: LD_ADDR_VAR 0 6
77110: PUSH
77111: LD_VAR 0 7
77115: PUSH
77116: LD_INT 1
77118: ARRAY
77119: PUSH
77120: LD_INT 3
77122: ARRAY
77123: ST_TO_ADDR
// if InArea ( x , y , area ) then
77124: LD_VAR 0 5
77128: PPUSH
77129: LD_VAR 0 6
77133: PPUSH
77134: LD_VAR 0 2
77138: PPUSH
77139: CALL_OW 309
77143: IFFALSE 77154
// ComStop ( unit ) ;
77145: LD_VAR 0 1
77149: PPUSH
77150: CALL_OW 141
// end ;
77154: LD_VAR 0 4
77158: RET
// export function Abs ( value ) ; begin
77159: LD_INT 0
77161: PPUSH
// result := value ;
77162: LD_ADDR_VAR 0 2
77166: PUSH
77167: LD_VAR 0 1
77171: ST_TO_ADDR
// if value < 0 then
77172: LD_VAR 0 1
77176: PUSH
77177: LD_INT 0
77179: LESS
77180: IFFALSE 77197
// result := value * - 1 ;
77182: LD_ADDR_VAR 0 2
77186: PUSH
77187: LD_VAR 0 1
77191: PUSH
77192: LD_INT 1
77194: NEG
77195: MUL
77196: ST_TO_ADDR
// end ;
77197: LD_VAR 0 2
77201: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77202: LD_INT 0
77204: PPUSH
77205: PPUSH
77206: PPUSH
77207: PPUSH
77208: PPUSH
77209: PPUSH
77210: PPUSH
77211: PPUSH
// if not unit or not building then
77212: LD_VAR 0 1
77216: NOT
77217: PUSH
77218: LD_VAR 0 2
77222: NOT
77223: OR
77224: IFFALSE 77228
// exit ;
77226: GO 77454
// x := GetX ( building ) ;
77228: LD_ADDR_VAR 0 4
77232: PUSH
77233: LD_VAR 0 2
77237: PPUSH
77238: CALL_OW 250
77242: ST_TO_ADDR
// y := GetY ( building ) ;
77243: LD_ADDR_VAR 0 6
77247: PUSH
77248: LD_VAR 0 2
77252: PPUSH
77253: CALL_OW 251
77257: ST_TO_ADDR
// d := GetDir ( building ) ;
77258: LD_ADDR_VAR 0 8
77262: PUSH
77263: LD_VAR 0 2
77267: PPUSH
77268: CALL_OW 254
77272: ST_TO_ADDR
// r := 4 ;
77273: LD_ADDR_VAR 0 9
77277: PUSH
77278: LD_INT 4
77280: ST_TO_ADDR
// for i := 1 to 5 do
77281: LD_ADDR_VAR 0 10
77285: PUSH
77286: DOUBLE
77287: LD_INT 1
77289: DEC
77290: ST_TO_ADDR
77291: LD_INT 5
77293: PUSH
77294: FOR_TO
77295: IFFALSE 77452
// begin _x := ShiftX ( x , d , r + i ) ;
77297: LD_ADDR_VAR 0 5
77301: PUSH
77302: LD_VAR 0 4
77306: PPUSH
77307: LD_VAR 0 8
77311: PPUSH
77312: LD_VAR 0 9
77316: PUSH
77317: LD_VAR 0 10
77321: PLUS
77322: PPUSH
77323: CALL_OW 272
77327: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77328: LD_ADDR_VAR 0 7
77332: PUSH
77333: LD_VAR 0 6
77337: PPUSH
77338: LD_VAR 0 8
77342: PPUSH
77343: LD_VAR 0 9
77347: PUSH
77348: LD_VAR 0 10
77352: PLUS
77353: PPUSH
77354: CALL_OW 273
77358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77359: LD_VAR 0 5
77363: PPUSH
77364: LD_VAR 0 7
77368: PPUSH
77369: CALL_OW 488
77373: PUSH
77374: LD_VAR 0 5
77378: PPUSH
77379: LD_VAR 0 7
77383: PPUSH
77384: CALL_OW 428
77388: PPUSH
77389: CALL_OW 247
77393: PUSH
77394: LD_INT 3
77396: PUSH
77397: LD_INT 2
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: IN
77404: NOT
77405: AND
77406: IFFALSE 77450
// begin ComMoveXY ( unit , _x , _y ) ;
77408: LD_VAR 0 1
77412: PPUSH
77413: LD_VAR 0 5
77417: PPUSH
77418: LD_VAR 0 7
77422: PPUSH
77423: CALL_OW 111
// result := [ _x , _y ] ;
77427: LD_ADDR_VAR 0 3
77431: PUSH
77432: LD_VAR 0 5
77436: PUSH
77437: LD_VAR 0 7
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: ST_TO_ADDR
// exit ;
77446: POP
77447: POP
77448: GO 77454
// end ; end ;
77450: GO 77294
77452: POP
77453: POP
// end ;
77454: LD_VAR 0 3
77458: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77459: LD_INT 0
77461: PPUSH
77462: PPUSH
77463: PPUSH
// result := 0 ;
77464: LD_ADDR_VAR 0 3
77468: PUSH
77469: LD_INT 0
77471: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77472: LD_VAR 0 1
77476: PUSH
77477: LD_INT 0
77479: LESS
77480: PUSH
77481: LD_VAR 0 1
77485: PUSH
77486: LD_INT 8
77488: GREATER
77489: OR
77490: PUSH
77491: LD_VAR 0 2
77495: PUSH
77496: LD_INT 0
77498: LESS
77499: OR
77500: PUSH
77501: LD_VAR 0 2
77505: PUSH
77506: LD_INT 8
77508: GREATER
77509: OR
77510: IFFALSE 77514
// exit ;
77512: GO 77589
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77514: LD_ADDR_VAR 0 4
77518: PUSH
77519: LD_INT 22
77521: PUSH
77522: LD_VAR 0 2
77526: PUSH
77527: EMPTY
77528: LIST
77529: LIST
77530: PPUSH
77531: CALL_OW 69
77535: PUSH
77536: FOR_IN
77537: IFFALSE 77587
// begin un := UnitShoot ( i ) ;
77539: LD_ADDR_VAR 0 5
77543: PUSH
77544: LD_VAR 0 4
77548: PPUSH
77549: CALL_OW 504
77553: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77554: LD_VAR 0 5
77558: PPUSH
77559: CALL_OW 255
77563: PUSH
77564: LD_VAR 0 1
77568: EQUAL
77569: IFFALSE 77585
// begin result := un ;
77571: LD_ADDR_VAR 0 3
77575: PUSH
77576: LD_VAR 0 5
77580: ST_TO_ADDR
// exit ;
77581: POP
77582: POP
77583: GO 77589
// end ; end ;
77585: GO 77536
77587: POP
77588: POP
// end ;
77589: LD_VAR 0 3
77593: RET
// export function GetCargoBay ( units ) ; begin
77594: LD_INT 0
77596: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77597: LD_ADDR_VAR 0 2
77601: PUSH
77602: LD_VAR 0 1
77606: PPUSH
77607: LD_INT 2
77609: PUSH
77610: LD_INT 34
77612: PUSH
77613: LD_INT 12
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: PUSH
77620: LD_INT 34
77622: PUSH
77623: LD_INT 51
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: PUSH
77630: LD_INT 34
77632: PUSH
77633: LD_INT 32
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: PUSH
77640: LD_INT 34
77642: PUSH
77643: LD_INT 89
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: LIST
77654: LIST
77655: LIST
77656: PPUSH
77657: CALL_OW 72
77661: ST_TO_ADDR
// end ;
77662: LD_VAR 0 2
77666: RET
// export function Negate ( value ) ; begin
77667: LD_INT 0
77669: PPUSH
// result := not value ;
77670: LD_ADDR_VAR 0 2
77674: PUSH
77675: LD_VAR 0 1
77679: NOT
77680: ST_TO_ADDR
// end ;
77681: LD_VAR 0 2
77685: RET
// export function Inc ( value ) ; begin
77686: LD_INT 0
77688: PPUSH
// result := value + 1 ;
77689: LD_ADDR_VAR 0 2
77693: PUSH
77694: LD_VAR 0 1
77698: PUSH
77699: LD_INT 1
77701: PLUS
77702: ST_TO_ADDR
// end ;
77703: LD_VAR 0 2
77707: RET
// export function Dec ( value ) ; begin
77708: LD_INT 0
77710: PPUSH
// result := value - 1 ;
77711: LD_ADDR_VAR 0 2
77715: PUSH
77716: LD_VAR 0 1
77720: PUSH
77721: LD_INT 1
77723: MINUS
77724: ST_TO_ADDR
// end ;
77725: LD_VAR 0 2
77729: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77730: LD_INT 0
77732: PPUSH
77733: PPUSH
77734: PPUSH
77735: PPUSH
77736: PPUSH
77737: PPUSH
77738: PPUSH
77739: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77740: LD_VAR 0 1
77744: PPUSH
77745: LD_VAR 0 2
77749: PPUSH
77750: CALL_OW 488
77754: NOT
77755: PUSH
77756: LD_VAR 0 3
77760: PPUSH
77761: LD_VAR 0 4
77765: PPUSH
77766: CALL_OW 488
77770: NOT
77771: OR
77772: IFFALSE 77785
// begin result := - 1 ;
77774: LD_ADDR_VAR 0 5
77778: PUSH
77779: LD_INT 1
77781: NEG
77782: ST_TO_ADDR
// exit ;
77783: GO 78020
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77785: LD_ADDR_VAR 0 12
77789: PUSH
77790: LD_VAR 0 1
77794: PPUSH
77795: LD_VAR 0 2
77799: PPUSH
77800: LD_VAR 0 3
77804: PPUSH
77805: LD_VAR 0 4
77809: PPUSH
77810: CALL 76870 0 4
77814: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77815: LD_ADDR_VAR 0 11
77819: PUSH
77820: LD_VAR 0 1
77824: PPUSH
77825: LD_VAR 0 2
77829: PPUSH
77830: LD_VAR 0 12
77834: PUSH
77835: LD_INT 1
77837: ARRAY
77838: PPUSH
77839: LD_VAR 0 12
77843: PUSH
77844: LD_INT 2
77846: ARRAY
77847: PPUSH
77848: CALL_OW 298
77852: ST_TO_ADDR
// distance := 9999 ;
77853: LD_ADDR_VAR 0 10
77857: PUSH
77858: LD_INT 9999
77860: ST_TO_ADDR
// for i := 0 to 5 do
77861: LD_ADDR_VAR 0 6
77865: PUSH
77866: DOUBLE
77867: LD_INT 0
77869: DEC
77870: ST_TO_ADDR
77871: LD_INT 5
77873: PUSH
77874: FOR_TO
77875: IFFALSE 78018
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77877: LD_ADDR_VAR 0 7
77881: PUSH
77882: LD_VAR 0 1
77886: PPUSH
77887: LD_VAR 0 6
77891: PPUSH
77892: LD_VAR 0 11
77896: PPUSH
77897: CALL_OW 272
77901: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77902: LD_ADDR_VAR 0 8
77906: PUSH
77907: LD_VAR 0 2
77911: PPUSH
77912: LD_VAR 0 6
77916: PPUSH
77917: LD_VAR 0 11
77921: PPUSH
77922: CALL_OW 273
77926: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77927: LD_VAR 0 7
77931: PPUSH
77932: LD_VAR 0 8
77936: PPUSH
77937: CALL_OW 488
77941: NOT
77942: IFFALSE 77946
// continue ;
77944: GO 77874
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77946: LD_ADDR_VAR 0 9
77950: PUSH
77951: LD_VAR 0 12
77955: PUSH
77956: LD_INT 1
77958: ARRAY
77959: PPUSH
77960: LD_VAR 0 12
77964: PUSH
77965: LD_INT 2
77967: ARRAY
77968: PPUSH
77969: LD_VAR 0 7
77973: PPUSH
77974: LD_VAR 0 8
77978: PPUSH
77979: CALL_OW 298
77983: ST_TO_ADDR
// if tmp < distance then
77984: LD_VAR 0 9
77988: PUSH
77989: LD_VAR 0 10
77993: LESS
77994: IFFALSE 78016
// begin result := i ;
77996: LD_ADDR_VAR 0 5
78000: PUSH
78001: LD_VAR 0 6
78005: ST_TO_ADDR
// distance := tmp ;
78006: LD_ADDR_VAR 0 10
78010: PUSH
78011: LD_VAR 0 9
78015: ST_TO_ADDR
// end ; end ;
78016: GO 77874
78018: POP
78019: POP
// end ;
78020: LD_VAR 0 5
78024: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78025: LD_INT 0
78027: PPUSH
78028: PPUSH
// if not driver or not IsInUnit ( driver ) then
78029: LD_VAR 0 1
78033: NOT
78034: PUSH
78035: LD_VAR 0 1
78039: PPUSH
78040: CALL_OW 310
78044: NOT
78045: OR
78046: IFFALSE 78050
// exit ;
78048: GO 78140
// vehicle := IsInUnit ( driver ) ;
78050: LD_ADDR_VAR 0 3
78054: PUSH
78055: LD_VAR 0 1
78059: PPUSH
78060: CALL_OW 310
78064: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78065: LD_VAR 0 1
78069: PPUSH
78070: LD_STRING \
78072: PUSH
78073: LD_INT 0
78075: PUSH
78076: LD_INT 0
78078: PUSH
78079: LD_INT 0
78081: PUSH
78082: LD_INT 0
78084: PUSH
78085: LD_INT 0
78087: PUSH
78088: LD_INT 0
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: LIST
78095: LIST
78096: LIST
78097: LIST
78098: LIST
78099: PUSH
78100: LD_STRING E
78102: PUSH
78103: LD_INT 0
78105: PUSH
78106: LD_INT 0
78108: PUSH
78109: LD_VAR 0 3
78113: PUSH
78114: LD_INT 0
78116: PUSH
78117: LD_INT 0
78119: PUSH
78120: LD_INT 0
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: LIST
78127: LIST
78128: LIST
78129: LIST
78130: LIST
78131: PUSH
78132: EMPTY
78133: LIST
78134: LIST
78135: PPUSH
78136: CALL_OW 446
// end ;
78140: LD_VAR 0 2
78144: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78145: LD_INT 0
78147: PPUSH
78148: PPUSH
// if not driver or not IsInUnit ( driver ) then
78149: LD_VAR 0 1
78153: NOT
78154: PUSH
78155: LD_VAR 0 1
78159: PPUSH
78160: CALL_OW 310
78164: NOT
78165: OR
78166: IFFALSE 78170
// exit ;
78168: GO 78260
// vehicle := IsInUnit ( driver ) ;
78170: LD_ADDR_VAR 0 3
78174: PUSH
78175: LD_VAR 0 1
78179: PPUSH
78180: CALL_OW 310
78184: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78185: LD_VAR 0 1
78189: PPUSH
78190: LD_STRING \
78192: PUSH
78193: LD_INT 0
78195: PUSH
78196: LD_INT 0
78198: PUSH
78199: LD_INT 0
78201: PUSH
78202: LD_INT 0
78204: PUSH
78205: LD_INT 0
78207: PUSH
78208: LD_INT 0
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: PUSH
78220: LD_STRING E
78222: PUSH
78223: LD_INT 0
78225: PUSH
78226: LD_INT 0
78228: PUSH
78229: LD_VAR 0 3
78233: PUSH
78234: LD_INT 0
78236: PUSH
78237: LD_INT 0
78239: PUSH
78240: LD_INT 0
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: LIST
78249: LIST
78250: LIST
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: PPUSH
78256: CALL_OW 447
// end ;
78260: LD_VAR 0 2
78264: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78265: LD_INT 0
78267: PPUSH
78268: PPUSH
78269: PPUSH
// tmp := [ ] ;
78270: LD_ADDR_VAR 0 5
78274: PUSH
78275: EMPTY
78276: ST_TO_ADDR
// for i in units do
78277: LD_ADDR_VAR 0 4
78281: PUSH
78282: LD_VAR 0 1
78286: PUSH
78287: FOR_IN
78288: IFFALSE 78326
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78290: LD_ADDR_VAR 0 5
78294: PUSH
78295: LD_VAR 0 5
78299: PPUSH
78300: LD_VAR 0 5
78304: PUSH
78305: LD_INT 1
78307: PLUS
78308: PPUSH
78309: LD_VAR 0 4
78313: PPUSH
78314: CALL_OW 256
78318: PPUSH
78319: CALL_OW 2
78323: ST_TO_ADDR
78324: GO 78287
78326: POP
78327: POP
// if not tmp then
78328: LD_VAR 0 5
78332: NOT
78333: IFFALSE 78337
// exit ;
78335: GO 78385
// if asc then
78337: LD_VAR 0 2
78341: IFFALSE 78365
// result := SortListByListAsc ( units , tmp ) else
78343: LD_ADDR_VAR 0 3
78347: PUSH
78348: LD_VAR 0 1
78352: PPUSH
78353: LD_VAR 0 5
78357: PPUSH
78358: CALL_OW 76
78362: ST_TO_ADDR
78363: GO 78385
// result := SortListByListDesc ( units , tmp ) ;
78365: LD_ADDR_VAR 0 3
78369: PUSH
78370: LD_VAR 0 1
78374: PPUSH
78375: LD_VAR 0 5
78379: PPUSH
78380: CALL_OW 77
78384: ST_TO_ADDR
// end ;
78385: LD_VAR 0 3
78389: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78390: LD_INT 0
78392: PPUSH
78393: PPUSH
// task := GetTaskList ( mech ) ;
78394: LD_ADDR_VAR 0 4
78398: PUSH
78399: LD_VAR 0 1
78403: PPUSH
78404: CALL_OW 437
78408: ST_TO_ADDR
// if not task then
78409: LD_VAR 0 4
78413: NOT
78414: IFFALSE 78418
// exit ;
78416: GO 78460
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78418: LD_ADDR_VAR 0 3
78422: PUSH
78423: LD_VAR 0 4
78427: PUSH
78428: LD_INT 1
78430: ARRAY
78431: PUSH
78432: LD_INT 1
78434: ARRAY
78435: PUSH
78436: LD_STRING r
78438: EQUAL
78439: PUSH
78440: LD_VAR 0 4
78444: PUSH
78445: LD_INT 1
78447: ARRAY
78448: PUSH
78449: LD_INT 4
78451: ARRAY
78452: PUSH
78453: LD_VAR 0 2
78457: EQUAL
78458: AND
78459: ST_TO_ADDR
// end ;
78460: LD_VAR 0 3
78464: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78465: LD_INT 0
78467: PPUSH
// SetDir ( unit , d ) ;
78468: LD_VAR 0 1
78472: PPUSH
78473: LD_VAR 0 4
78477: PPUSH
78478: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78482: LD_VAR 0 1
78486: PPUSH
78487: LD_VAR 0 2
78491: PPUSH
78492: LD_VAR 0 3
78496: PPUSH
78497: LD_VAR 0 5
78501: PPUSH
78502: CALL_OW 48
// end ;
78506: LD_VAR 0 6
78510: RET
// export function ToNaturalNumber ( number ) ; begin
78511: LD_INT 0
78513: PPUSH
// result := number div 1 ;
78514: LD_ADDR_VAR 0 2
78518: PUSH
78519: LD_VAR 0 1
78523: PUSH
78524: LD_INT 1
78526: DIV
78527: ST_TO_ADDR
// if number < 0 then
78528: LD_VAR 0 1
78532: PUSH
78533: LD_INT 0
78535: LESS
78536: IFFALSE 78546
// result := 0 ;
78538: LD_ADDR_VAR 0 2
78542: PUSH
78543: LD_INT 0
78545: ST_TO_ADDR
// end ;
78546: LD_VAR 0 2
78550: RET
// export function SortByClass ( units , class ) ; var un ; begin
78551: LD_INT 0
78553: PPUSH
78554: PPUSH
// if not units or not class then
78555: LD_VAR 0 1
78559: NOT
78560: PUSH
78561: LD_VAR 0 2
78565: NOT
78566: OR
78567: IFFALSE 78571
// exit ;
78569: GO 78666
// result := [ ] ;
78571: LD_ADDR_VAR 0 3
78575: PUSH
78576: EMPTY
78577: ST_TO_ADDR
// for un in units do
78578: LD_ADDR_VAR 0 4
78582: PUSH
78583: LD_VAR 0 1
78587: PUSH
78588: FOR_IN
78589: IFFALSE 78664
// if GetClass ( un ) = class then
78591: LD_VAR 0 4
78595: PPUSH
78596: CALL_OW 257
78600: PUSH
78601: LD_VAR 0 2
78605: EQUAL
78606: IFFALSE 78633
// result := Insert ( result , 1 , un ) else
78608: LD_ADDR_VAR 0 3
78612: PUSH
78613: LD_VAR 0 3
78617: PPUSH
78618: LD_INT 1
78620: PPUSH
78621: LD_VAR 0 4
78625: PPUSH
78626: CALL_OW 2
78630: ST_TO_ADDR
78631: GO 78662
// result := Replace ( result , result + 1 , un ) ;
78633: LD_ADDR_VAR 0 3
78637: PUSH
78638: LD_VAR 0 3
78642: PPUSH
78643: LD_VAR 0 3
78647: PUSH
78648: LD_INT 1
78650: PLUS
78651: PPUSH
78652: LD_VAR 0 4
78656: PPUSH
78657: CALL_OW 1
78661: ST_TO_ADDR
78662: GO 78588
78664: POP
78665: POP
// end ;
78666: LD_VAR 0 3
78670: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78671: LD_INT 0
78673: PPUSH
78674: PPUSH
78675: PPUSH
78676: PPUSH
78677: PPUSH
78678: PPUSH
78679: PPUSH
// result := [ ] ;
78680: LD_ADDR_VAR 0 4
78684: PUSH
78685: EMPTY
78686: ST_TO_ADDR
// if x - r < 0 then
78687: LD_VAR 0 1
78691: PUSH
78692: LD_VAR 0 3
78696: MINUS
78697: PUSH
78698: LD_INT 0
78700: LESS
78701: IFFALSE 78713
// min_x := 0 else
78703: LD_ADDR_VAR 0 8
78707: PUSH
78708: LD_INT 0
78710: ST_TO_ADDR
78711: GO 78729
// min_x := x - r ;
78713: LD_ADDR_VAR 0 8
78717: PUSH
78718: LD_VAR 0 1
78722: PUSH
78723: LD_VAR 0 3
78727: MINUS
78728: ST_TO_ADDR
// if y - r < 0 then
78729: LD_VAR 0 2
78733: PUSH
78734: LD_VAR 0 3
78738: MINUS
78739: PUSH
78740: LD_INT 0
78742: LESS
78743: IFFALSE 78755
// min_y := 0 else
78745: LD_ADDR_VAR 0 7
78749: PUSH
78750: LD_INT 0
78752: ST_TO_ADDR
78753: GO 78771
// min_y := y - r ;
78755: LD_ADDR_VAR 0 7
78759: PUSH
78760: LD_VAR 0 2
78764: PUSH
78765: LD_VAR 0 3
78769: MINUS
78770: ST_TO_ADDR
// max_x := x + r ;
78771: LD_ADDR_VAR 0 9
78775: PUSH
78776: LD_VAR 0 1
78780: PUSH
78781: LD_VAR 0 3
78785: PLUS
78786: ST_TO_ADDR
// max_y := y + r ;
78787: LD_ADDR_VAR 0 10
78791: PUSH
78792: LD_VAR 0 2
78796: PUSH
78797: LD_VAR 0 3
78801: PLUS
78802: ST_TO_ADDR
// for _x = min_x to max_x do
78803: LD_ADDR_VAR 0 5
78807: PUSH
78808: DOUBLE
78809: LD_VAR 0 8
78813: DEC
78814: ST_TO_ADDR
78815: LD_VAR 0 9
78819: PUSH
78820: FOR_TO
78821: IFFALSE 78922
// for _y = min_y to max_y do
78823: LD_ADDR_VAR 0 6
78827: PUSH
78828: DOUBLE
78829: LD_VAR 0 7
78833: DEC
78834: ST_TO_ADDR
78835: LD_VAR 0 10
78839: PUSH
78840: FOR_TO
78841: IFFALSE 78918
// begin if not ValidHex ( _x , _y ) then
78843: LD_VAR 0 5
78847: PPUSH
78848: LD_VAR 0 6
78852: PPUSH
78853: CALL_OW 488
78857: NOT
78858: IFFALSE 78862
// continue ;
78860: GO 78840
// if GetResourceTypeXY ( _x , _y ) then
78862: LD_VAR 0 5
78866: PPUSH
78867: LD_VAR 0 6
78871: PPUSH
78872: CALL_OW 283
78876: IFFALSE 78916
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78878: LD_ADDR_VAR 0 4
78882: PUSH
78883: LD_VAR 0 4
78887: PPUSH
78888: LD_VAR 0 4
78892: PUSH
78893: LD_INT 1
78895: PLUS
78896: PPUSH
78897: LD_VAR 0 5
78901: PUSH
78902: LD_VAR 0 6
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: PPUSH
78911: CALL_OW 1
78915: ST_TO_ADDR
// end ;
78916: GO 78840
78918: POP
78919: POP
78920: GO 78820
78922: POP
78923: POP
// end ;
78924: LD_VAR 0 4
78928: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78929: LD_INT 0
78931: PPUSH
78932: PPUSH
78933: PPUSH
78934: PPUSH
78935: PPUSH
78936: PPUSH
78937: PPUSH
78938: PPUSH
// if not units then
78939: LD_VAR 0 1
78943: NOT
78944: IFFALSE 78948
// exit ;
78946: GO 79472
// result := UnitFilter ( units , [ f_ok ] ) ;
78948: LD_ADDR_VAR 0 3
78952: PUSH
78953: LD_VAR 0 1
78957: PPUSH
78958: LD_INT 50
78960: PUSH
78961: EMPTY
78962: LIST
78963: PPUSH
78964: CALL_OW 72
78968: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78969: LD_ADDR_VAR 0 8
78973: PUSH
78974: LD_VAR 0 1
78978: PUSH
78979: LD_INT 1
78981: ARRAY
78982: PPUSH
78983: CALL_OW 255
78987: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78988: LD_ADDR_VAR 0 10
78992: PUSH
78993: LD_INT 29
78995: PUSH
78996: LD_INT 91
78998: PUSH
78999: LD_INT 49
79001: PUSH
79002: EMPTY
79003: LIST
79004: LIST
79005: LIST
79006: ST_TO_ADDR
// if not result then
79007: LD_VAR 0 3
79011: NOT
79012: IFFALSE 79016
// exit ;
79014: GO 79472
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79016: LD_ADDR_VAR 0 5
79020: PUSH
79021: LD_INT 81
79023: PUSH
79024: LD_VAR 0 8
79028: PUSH
79029: EMPTY
79030: LIST
79031: LIST
79032: PPUSH
79033: CALL_OW 69
79037: ST_TO_ADDR
// for i in result do
79038: LD_ADDR_VAR 0 4
79042: PUSH
79043: LD_VAR 0 3
79047: PUSH
79048: FOR_IN
79049: IFFALSE 79470
// begin tag := GetTag ( i ) + 1 ;
79051: LD_ADDR_VAR 0 9
79055: PUSH
79056: LD_VAR 0 4
79060: PPUSH
79061: CALL_OW 110
79065: PUSH
79066: LD_INT 1
79068: PLUS
79069: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79070: LD_ADDR_VAR 0 7
79074: PUSH
79075: LD_VAR 0 4
79079: PPUSH
79080: CALL_OW 250
79084: PPUSH
79085: LD_VAR 0 4
79089: PPUSH
79090: CALL_OW 251
79094: PPUSH
79095: LD_INT 6
79097: PPUSH
79098: CALL 78671 0 3
79102: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79103: LD_VAR 0 4
79107: PPUSH
79108: CALL_OW 247
79112: PUSH
79113: LD_INT 2
79115: EQUAL
79116: PUSH
79117: LD_VAR 0 7
79121: AND
79122: PUSH
79123: LD_VAR 0 4
79127: PPUSH
79128: CALL_OW 264
79132: PUSH
79133: LD_VAR 0 10
79137: IN
79138: NOT
79139: AND
79140: IFFALSE 79179
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79142: LD_VAR 0 4
79146: PPUSH
79147: LD_VAR 0 7
79151: PUSH
79152: LD_INT 1
79154: ARRAY
79155: PUSH
79156: LD_INT 1
79158: ARRAY
79159: PPUSH
79160: LD_VAR 0 7
79164: PUSH
79165: LD_INT 1
79167: ARRAY
79168: PUSH
79169: LD_INT 2
79171: ARRAY
79172: PPUSH
79173: CALL_OW 116
79177: GO 79468
// if path > tag then
79179: LD_VAR 0 2
79183: PUSH
79184: LD_VAR 0 9
79188: GREATER
79189: IFFALSE 79397
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79191: LD_ADDR_VAR 0 6
79195: PUSH
79196: LD_VAR 0 5
79200: PPUSH
79201: LD_INT 91
79203: PUSH
79204: LD_VAR 0 4
79208: PUSH
79209: LD_INT 8
79211: PUSH
79212: EMPTY
79213: LIST
79214: LIST
79215: LIST
79216: PPUSH
79217: CALL_OW 72
79221: ST_TO_ADDR
// if nearEnemy then
79222: LD_VAR 0 6
79226: IFFALSE 79295
// begin if GetWeapon ( i ) = ru_time_lapser then
79228: LD_VAR 0 4
79232: PPUSH
79233: CALL_OW 264
79237: PUSH
79238: LD_INT 49
79240: EQUAL
79241: IFFALSE 79269
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79243: LD_VAR 0 4
79247: PPUSH
79248: LD_VAR 0 6
79252: PPUSH
79253: LD_VAR 0 4
79257: PPUSH
79258: CALL_OW 74
79262: PPUSH
79263: CALL_OW 112
79267: GO 79293
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79269: LD_VAR 0 4
79273: PPUSH
79274: LD_VAR 0 6
79278: PPUSH
79279: LD_VAR 0 4
79283: PPUSH
79284: CALL_OW 74
79288: PPUSH
79289: CALL_OW 115
// end else
79293: GO 79395
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79295: LD_VAR 0 4
79299: PPUSH
79300: LD_VAR 0 2
79304: PUSH
79305: LD_VAR 0 9
79309: ARRAY
79310: PUSH
79311: LD_INT 1
79313: ARRAY
79314: PPUSH
79315: LD_VAR 0 2
79319: PUSH
79320: LD_VAR 0 9
79324: ARRAY
79325: PUSH
79326: LD_INT 2
79328: ARRAY
79329: PPUSH
79330: CALL_OW 297
79334: PUSH
79335: LD_INT 6
79337: GREATER
79338: IFFALSE 79381
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79340: LD_VAR 0 4
79344: PPUSH
79345: LD_VAR 0 2
79349: PUSH
79350: LD_VAR 0 9
79354: ARRAY
79355: PUSH
79356: LD_INT 1
79358: ARRAY
79359: PPUSH
79360: LD_VAR 0 2
79364: PUSH
79365: LD_VAR 0 9
79369: ARRAY
79370: PUSH
79371: LD_INT 2
79373: ARRAY
79374: PPUSH
79375: CALL_OW 114
79379: GO 79395
// SetTag ( i , tag ) ;
79381: LD_VAR 0 4
79385: PPUSH
79386: LD_VAR 0 9
79390: PPUSH
79391: CALL_OW 109
// end else
79395: GO 79468
// if enemy then
79397: LD_VAR 0 5
79401: IFFALSE 79468
// begin if GetWeapon ( i ) = ru_time_lapser then
79403: LD_VAR 0 4
79407: PPUSH
79408: CALL_OW 264
79412: PUSH
79413: LD_INT 49
79415: EQUAL
79416: IFFALSE 79444
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79418: LD_VAR 0 4
79422: PPUSH
79423: LD_VAR 0 5
79427: PPUSH
79428: LD_VAR 0 4
79432: PPUSH
79433: CALL_OW 74
79437: PPUSH
79438: CALL_OW 112
79442: GO 79468
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79444: LD_VAR 0 4
79448: PPUSH
79449: LD_VAR 0 5
79453: PPUSH
79454: LD_VAR 0 4
79458: PPUSH
79459: CALL_OW 74
79463: PPUSH
79464: CALL_OW 115
// end ; end ;
79468: GO 79048
79470: POP
79471: POP
// end ;
79472: LD_VAR 0 3
79476: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79477: LD_INT 0
79479: PPUSH
79480: PPUSH
79481: PPUSH
// if not unit or IsInUnit ( unit ) then
79482: LD_VAR 0 1
79486: NOT
79487: PUSH
79488: LD_VAR 0 1
79492: PPUSH
79493: CALL_OW 310
79497: OR
79498: IFFALSE 79502
// exit ;
79500: GO 79593
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79502: LD_ADDR_VAR 0 4
79506: PUSH
79507: LD_VAR 0 1
79511: PPUSH
79512: CALL_OW 250
79516: PPUSH
79517: LD_VAR 0 2
79521: PPUSH
79522: LD_INT 1
79524: PPUSH
79525: CALL_OW 272
79529: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79530: LD_ADDR_VAR 0 5
79534: PUSH
79535: LD_VAR 0 1
79539: PPUSH
79540: CALL_OW 251
79544: PPUSH
79545: LD_VAR 0 2
79549: PPUSH
79550: LD_INT 1
79552: PPUSH
79553: CALL_OW 273
79557: ST_TO_ADDR
// if ValidHex ( x , y ) then
79558: LD_VAR 0 4
79562: PPUSH
79563: LD_VAR 0 5
79567: PPUSH
79568: CALL_OW 488
79572: IFFALSE 79593
// ComTurnXY ( unit , x , y ) ;
79574: LD_VAR 0 1
79578: PPUSH
79579: LD_VAR 0 4
79583: PPUSH
79584: LD_VAR 0 5
79588: PPUSH
79589: CALL_OW 118
// end ;
79593: LD_VAR 0 3
79597: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79598: LD_INT 0
79600: PPUSH
79601: PPUSH
// result := false ;
79602: LD_ADDR_VAR 0 3
79606: PUSH
79607: LD_INT 0
79609: ST_TO_ADDR
// if not units then
79610: LD_VAR 0 2
79614: NOT
79615: IFFALSE 79619
// exit ;
79617: GO 79664
// for i in units do
79619: LD_ADDR_VAR 0 4
79623: PUSH
79624: LD_VAR 0 2
79628: PUSH
79629: FOR_IN
79630: IFFALSE 79662
// if See ( side , i ) then
79632: LD_VAR 0 1
79636: PPUSH
79637: LD_VAR 0 4
79641: PPUSH
79642: CALL_OW 292
79646: IFFALSE 79660
// begin result := true ;
79648: LD_ADDR_VAR 0 3
79652: PUSH
79653: LD_INT 1
79655: ST_TO_ADDR
// exit ;
79656: POP
79657: POP
79658: GO 79664
// end ;
79660: GO 79629
79662: POP
79663: POP
// end ;
79664: LD_VAR 0 3
79668: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79669: LD_INT 0
79671: PPUSH
79672: PPUSH
79673: PPUSH
79674: PPUSH
// if not unit or not points then
79675: LD_VAR 0 1
79679: NOT
79680: PUSH
79681: LD_VAR 0 2
79685: NOT
79686: OR
79687: IFFALSE 79691
// exit ;
79689: GO 79781
// dist := 99999 ;
79691: LD_ADDR_VAR 0 5
79695: PUSH
79696: LD_INT 99999
79698: ST_TO_ADDR
// for i in points do
79699: LD_ADDR_VAR 0 4
79703: PUSH
79704: LD_VAR 0 2
79708: PUSH
79709: FOR_IN
79710: IFFALSE 79779
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79712: LD_ADDR_VAR 0 6
79716: PUSH
79717: LD_VAR 0 1
79721: PPUSH
79722: LD_VAR 0 4
79726: PUSH
79727: LD_INT 1
79729: ARRAY
79730: PPUSH
79731: LD_VAR 0 4
79735: PUSH
79736: LD_INT 2
79738: ARRAY
79739: PPUSH
79740: CALL_OW 297
79744: ST_TO_ADDR
// if tmpDist < dist then
79745: LD_VAR 0 6
79749: PUSH
79750: LD_VAR 0 5
79754: LESS
79755: IFFALSE 79777
// begin result := i ;
79757: LD_ADDR_VAR 0 3
79761: PUSH
79762: LD_VAR 0 4
79766: ST_TO_ADDR
// dist := tmpDist ;
79767: LD_ADDR_VAR 0 5
79771: PUSH
79772: LD_VAR 0 6
79776: ST_TO_ADDR
// end ; end ;
79777: GO 79709
79779: POP
79780: POP
// end ;
79781: LD_VAR 0 3
79785: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79786: LD_INT 0
79788: PPUSH
// uc_side := side ;
79789: LD_ADDR_OWVAR 20
79793: PUSH
79794: LD_VAR 0 1
79798: ST_TO_ADDR
// uc_nation := 3 ;
79799: LD_ADDR_OWVAR 21
79803: PUSH
79804: LD_INT 3
79806: ST_TO_ADDR
// vc_chassis := 25 ;
79807: LD_ADDR_OWVAR 37
79811: PUSH
79812: LD_INT 25
79814: ST_TO_ADDR
// vc_engine := engine_siberite ;
79815: LD_ADDR_OWVAR 39
79819: PUSH
79820: LD_INT 3
79822: ST_TO_ADDR
// vc_control := control_computer ;
79823: LD_ADDR_OWVAR 38
79827: PUSH
79828: LD_INT 3
79830: ST_TO_ADDR
// vc_weapon := 59 ;
79831: LD_ADDR_OWVAR 40
79835: PUSH
79836: LD_INT 59
79838: ST_TO_ADDR
// result := CreateVehicle ;
79839: LD_ADDR_VAR 0 5
79843: PUSH
79844: CALL_OW 45
79848: ST_TO_ADDR
// SetDir ( result , d ) ;
79849: LD_VAR 0 5
79853: PPUSH
79854: LD_VAR 0 4
79858: PPUSH
79859: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79863: LD_VAR 0 5
79867: PPUSH
79868: LD_VAR 0 2
79872: PPUSH
79873: LD_VAR 0 3
79877: PPUSH
79878: LD_INT 0
79880: PPUSH
79881: CALL_OW 48
// end ;
79885: LD_VAR 0 5
79889: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79890: LD_INT 0
79892: PPUSH
79893: PPUSH
79894: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79895: LD_ADDR_VAR 0 2
79899: PUSH
79900: LD_INT 0
79902: PUSH
79903: LD_INT 0
79905: PUSH
79906: LD_INT 0
79908: PUSH
79909: LD_INT 0
79911: PUSH
79912: EMPTY
79913: LIST
79914: LIST
79915: LIST
79916: LIST
79917: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79918: LD_VAR 0 1
79922: NOT
79923: PUSH
79924: LD_VAR 0 1
79928: PPUSH
79929: CALL_OW 264
79933: PUSH
79934: LD_INT 12
79936: PUSH
79937: LD_INT 51
79939: PUSH
79940: LD_INT 32
79942: PUSH
79943: LD_INT 89
79945: PUSH
79946: EMPTY
79947: LIST
79948: LIST
79949: LIST
79950: LIST
79951: IN
79952: NOT
79953: OR
79954: IFFALSE 79958
// exit ;
79956: GO 80056
// for i := 1 to 3 do
79958: LD_ADDR_VAR 0 3
79962: PUSH
79963: DOUBLE
79964: LD_INT 1
79966: DEC
79967: ST_TO_ADDR
79968: LD_INT 3
79970: PUSH
79971: FOR_TO
79972: IFFALSE 80054
// begin tmp := GetCargo ( cargo , i ) ;
79974: LD_ADDR_VAR 0 4
79978: PUSH
79979: LD_VAR 0 1
79983: PPUSH
79984: LD_VAR 0 3
79988: PPUSH
79989: CALL_OW 289
79993: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79994: LD_ADDR_VAR 0 2
79998: PUSH
79999: LD_VAR 0 2
80003: PPUSH
80004: LD_VAR 0 3
80008: PPUSH
80009: LD_VAR 0 4
80013: PPUSH
80014: CALL_OW 1
80018: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80019: LD_ADDR_VAR 0 2
80023: PUSH
80024: LD_VAR 0 2
80028: PPUSH
80029: LD_INT 4
80031: PPUSH
80032: LD_VAR 0 2
80036: PUSH
80037: LD_INT 4
80039: ARRAY
80040: PUSH
80041: LD_VAR 0 4
80045: PLUS
80046: PPUSH
80047: CALL_OW 1
80051: ST_TO_ADDR
// end ;
80052: GO 79971
80054: POP
80055: POP
// end ;
80056: LD_VAR 0 2
80060: RET
// export function Length ( array ) ; begin
80061: LD_INT 0
80063: PPUSH
// result := array + 0 ;
80064: LD_ADDR_VAR 0 2
80068: PUSH
80069: LD_VAR 0 1
80073: PUSH
80074: LD_INT 0
80076: PLUS
80077: ST_TO_ADDR
// end ;
80078: LD_VAR 0 2
80082: RET
// export function PrepareArray ( array ) ; begin
80083: LD_INT 0
80085: PPUSH
// result := array diff 0 ;
80086: LD_ADDR_VAR 0 2
80090: PUSH
80091: LD_VAR 0 1
80095: PUSH
80096: LD_INT 0
80098: DIFF
80099: ST_TO_ADDR
// if not result [ 1 ] then
80100: LD_VAR 0 2
80104: PUSH
80105: LD_INT 1
80107: ARRAY
80108: NOT
80109: IFFALSE 80129
// result := Delete ( result , 1 ) ;
80111: LD_ADDR_VAR 0 2
80115: PUSH
80116: LD_VAR 0 2
80120: PPUSH
80121: LD_INT 1
80123: PPUSH
80124: CALL_OW 3
80128: ST_TO_ADDR
// end ;
80129: LD_VAR 0 2
80133: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80134: LD_INT 0
80136: PPUSH
80137: PPUSH
80138: PPUSH
80139: PPUSH
// sibRocketRange := 25 ;
80140: LD_ADDR_VAR 0 6
80144: PUSH
80145: LD_INT 25
80147: ST_TO_ADDR
// result := false ;
80148: LD_ADDR_VAR 0 4
80152: PUSH
80153: LD_INT 0
80155: ST_TO_ADDR
// for i := 0 to 5 do
80156: LD_ADDR_VAR 0 5
80160: PUSH
80161: DOUBLE
80162: LD_INT 0
80164: DEC
80165: ST_TO_ADDR
80166: LD_INT 5
80168: PUSH
80169: FOR_TO
80170: IFFALSE 80237
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80172: LD_VAR 0 1
80176: PPUSH
80177: LD_VAR 0 5
80181: PPUSH
80182: LD_VAR 0 6
80186: PPUSH
80187: CALL_OW 272
80191: PPUSH
80192: LD_VAR 0 2
80196: PPUSH
80197: LD_VAR 0 5
80201: PPUSH
80202: LD_VAR 0 6
80206: PPUSH
80207: CALL_OW 273
80211: PPUSH
80212: LD_VAR 0 3
80216: PPUSH
80217: CALL_OW 309
80221: IFFALSE 80235
// begin result := true ;
80223: LD_ADDR_VAR 0 4
80227: PUSH
80228: LD_INT 1
80230: ST_TO_ADDR
// exit ;
80231: POP
80232: POP
80233: GO 80239
// end ;
80235: GO 80169
80237: POP
80238: POP
// end ;
80239: LD_VAR 0 4
80243: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80244: LD_INT 0
80246: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80247: LD_VAR 0 1
80251: PPUSH
80252: LD_VAR 0 2
80256: PPUSH
80257: LD_INT 0
80259: PPUSH
80260: LD_INT 0
80262: PPUSH
80263: LD_INT 1
80265: PPUSH
80266: LD_INT 0
80268: PPUSH
80269: CALL_OW 587
// end ;
80273: LD_VAR 0 3
80277: RET
