// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 232 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// canExitMap = false ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// arabianCanExitMap = false ;
  88: LD_ADDR_EXP 6
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// namedBase = false ;
  96: LD_ADDR_EXP 8
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// startEvacuation = false ;
 104: LD_ADDR_EXP 7
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// stealCargos = [ ] ;
 112: LD_ADDR_EXP 12
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// stealWarmCount = 0 ;
 119: LD_ADDR_EXP 11
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// evacuatedCargos = 0 ;
 127: LD_ADDR_EXP 9
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// canStealCargo = false ;
 135: LD_ADDR_EXP 10
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 143: LD_ADDR_EXP 14
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// dial_contactBlock = false ;
 151: LD_ADDR_EXP 15
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// currentWave = 0 ;
 159: LD_ADDR_EXP 17
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// saveGaydar = false ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 175: LD_ADDR_EXP 19
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// killedArabianUnits = 0 ;
 183: LD_ADDR_EXP 20
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// arabianKillers = 0 ;
 191: LD_ADDR_EXP 21
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// lostUnits = 0 ;
 199: LD_ADDR_EXP 22
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// enableAttacks = false ;
 207: LD_ADDR_EXP 16
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// PrepareRussians ;
 215: CALL 1473 0 0
// Nef_PrepareNature ;
 219: CALL 3599 0 0
// MissionIntro ;
 223: CALL 8657 0 0
// end ; end_of_file
 227: LD_VAR 0 1
 231: RET
// export function InitMapConfig ; begin
 232: LD_INT 0
 234: PPUSH
// BaseMapConfig ;
 235: CALL 248 0 0
// MissionMapConfig ;
 239: CALL 350 0 0
// end ;
 243: LD_VAR 0 1
 247: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 248: LD_INT 0
 250: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 251: LD_ADDR_EXP 23
 255: PUSH
 256: LD_INT 8
 258: PUSH
 259: LD_INT 12
 261: PUSH
 262: LD_INT 6
 264: PUSH
 265: LD_INT 6
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: LIST
 275: LIST
 276: LIST
 277: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 278: LD_ADDR_EXP 24
 282: PUSH
 283: LD_INT 2
 285: PUSH
 286: LD_INT 2
 288: PUSH
 289: LD_INT 2
 291: PUSH
 292: LD_INT 2
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 301: LD_ADDR_EXP 25
 305: PUSH
 306: LD_INT 5
 308: NEG
 309: PPUSH
 310: LD_INT 5
 312: PPUSH
 313: CALL_OW 12
 317: PUSH
 318: EMPTY
 319: LIST
 320: ST_TO_ADDR
// debugMode = 0 ;
 321: LD_ADDR_EXP 28
 325: PUSH
 326: LD_INT 0
 328: ST_TO_ADDR
// missionPrefix = 04_ ;
 329: LD_ADDR_EXP 26
 333: PUSH
 334: LD_STRING 04_
 336: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 337: LD_ADDR_EXP 27
 341: PUSH
 342: LD_STRING 03_
 344: ST_TO_ADDR
// end ;
 345: LD_VAR 0 1
 349: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles , enemyGroupHumans ; function MissionMapConfig ; begin
 350: LD_INT 0
 352: PPUSH
// enemySkillLevel = [ 1 , 2 , 3 ] [ Difficulty ] ;
 353: LD_ADDR_EXP 29
 357: PUSH
 358: LD_INT 1
 360: PUSH
 361: LD_INT 2
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: LIST
 371: PUSH
 372: LD_OWVAR 67
 376: ARRAY
 377: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 378: LD_ADDR_EXP 30
 382: PUSH
 383: LD_INT 2
 385: NEG
 386: PUSH
 387: LD_INT 1
 389: NEG
 390: PUSH
 391: LD_INT 0
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: PUSH
 399: LD_OWVAR 67
 403: ARRAY
 404: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 405: LD_ADDR_EXP 31
 409: PUSH
 410: LD_INT 135
 412: PUSH
 413: LD_INT 8
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: LD_INT 135
 422: PUSH
 423: LD_INT 4
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: PUSH
 430: LD_INT 134
 432: PUSH
 433: LD_INT 19
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 132
 442: PUSH
 443: LD_INT 26
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 128
 452: PUSH
 453: LD_INT 31
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 123
 462: PUSH
 463: LD_INT 37
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 118
 472: PUSH
 473: LD_INT 45
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: LD_INT 112
 482: PUSH
 483: LD_INT 51
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 106
 492: PUSH
 493: LD_INT 57
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 99
 502: PUSH
 503: LD_INT 62
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: LD_INT 93
 512: PUSH
 513: LD_INT 67
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: PUSH
 520: LD_INT 86
 522: PUSH
 523: LD_INT 72
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 78
 532: PUSH
 533: LD_INT 75
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 71
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 69
 552: PUSH
 553: LD_INT 88
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 71
 562: PUSH
 563: LD_INT 95
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 74
 572: PUSH
 573: LD_INT 103
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 80
 582: PUSH
 583: LD_INT 113
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 84
 592: PUSH
 593: LD_INT 121
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 89
 602: PUSH
 603: LD_INT 132
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 92
 612: PUSH
 613: LD_INT 142
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 93
 622: PUSH
 623: LD_INT 151
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 91
 632: PUSH
 633: LD_INT 157
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 90
 642: PUSH
 643: LD_INT 163
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: LD_INT 93
 652: PUSH
 653: LD_INT 171
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: PUSH
 660: LD_INT 92
 662: PUSH
 663: LD_INT 177
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 698: LD_ADDR_EXP 32
 702: PUSH
 703: LD_INT 135
 705: PUSH
 706: LD_INT 8
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 135
 715: PUSH
 716: LD_INT 4
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 134
 725: PUSH
 726: LD_INT 19
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 132
 735: PUSH
 736: LD_INT 26
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 128
 745: PUSH
 746: LD_INT 31
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 123
 755: PUSH
 756: LD_INT 37
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PUSH
 763: LD_INT 118
 765: PUSH
 766: LD_INT 45
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 112
 775: PUSH
 776: LD_INT 51
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: LD_INT 106
 785: PUSH
 786: LD_INT 57
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: LD_INT 99
 795: PUSH
 796: LD_INT 62
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 104
 805: PUSH
 806: LD_INT 71
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 110
 815: PUSH
 816: LD_INT 78
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 119
 825: PUSH
 826: LD_INT 88
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 128
 835: PUSH
 836: LD_INT 97
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: LD_INT 135
 845: PUSH
 846: LD_INT 106
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 141
 855: PUSH
 856: LD_INT 120
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: LD_INT 143
 865: PUSH
 866: LD_INT 132
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 143
 875: PUSH
 876: LD_INT 142
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 140
 885: PUSH
 886: LD_INT 149
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 132
 895: PUSH
 896: LD_INT 153
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 125
 905: PUSH
 906: LD_INT 155
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 115
 915: PUSH
 916: LD_INT 154
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PUSH
 923: LD_INT 105
 925: PUSH
 926: LD_INT 153
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_INT 93
 935: PUSH
 936: LD_INT 151
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 91
 945: PUSH
 946: LD_INT 157
 948: PUSH
 949: EMPTY
 950: LIST
 951: LIST
 952: PUSH
 953: LD_INT 90
 955: PUSH
 956: LD_INT 163
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 93
 965: PUSH
 966: LD_INT 171
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 92
 975: PUSH
 976: LD_INT 177
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1013: LD_ADDR_EXP 33
1017: PUSH
1018: LD_INT 40
1020: PUSH
1021: LD_INT 35
1023: PUSH
1024: LD_INT 30
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_OWVAR 67
1036: ARRAY
1037: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1038: LD_ADDR_EXP 34
1042: PUSH
1043: LD_INT 50
1045: ST_TO_ADDR
// cargosToTriggerAttacks = [ 18 , 16 , 15 ] [ Difficulty ] ;
1046: LD_ADDR_EXP 13
1050: PUSH
1051: LD_INT 18
1053: PUSH
1054: LD_INT 16
1056: PUSH
1057: LD_INT 15
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_OWVAR 67
1069: ARRAY
1070: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1071: LD_ADDR_EXP 35
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: LD_INT 4
1081: PUSH
1082: LD_INT 4
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_OWVAR 67
1094: ARRAY
1095: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1096: LD_ADDR_EXP 36
1100: PUSH
1101: LD_INT 3
1103: PUSH
1104: LD_INT 4
1106: PUSH
1107: LD_INT 4
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_OWVAR 67
1119: ARRAY
1120: ST_TO_ADDR
// enemyGroupHumans = [ 5 , 6 , 7 ] [ Difficulty ] ;
1121: LD_ADDR_EXP 37
1125: PUSH
1126: LD_INT 5
1128: PUSH
1129: LD_INT 6
1131: PUSH
1132: LD_INT 7
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_OWVAR 67
1144: ARRAY
1145: ST_TO_ADDR
// end ;
1146: LD_VAR 0 1
1150: RET
// every 0 0$1 trigger debugMode do var i ;
1151: LD_EXP 28
1155: IFFALSE 1470
1157: GO 1159
1159: DISABLE
1160: LD_INT 0
1162: PPUSH
// begin enable ;
1163: ENABLE
// FogOff ( your_side ) ;
1164: LD_OWVAR 2
1168: PPUSH
1169: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1173: LD_ADDR_VAR 0 1
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_OWVAR 2
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 2
1192: PUSH
1193: LD_INT 21
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 21
1205: PUSH
1206: LD_INT 2
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: PPUSH
1222: CALL_OW 69
1226: PUSH
1227: FOR_IN
1228: IFFALSE 1244
// SetLives ( i , 1000 ) ;
1230: LD_VAR 0 1
1234: PPUSH
1235: LD_INT 1000
1237: PPUSH
1238: CALL_OW 234
1242: GO 1227
1244: POP
1245: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1246: LD_ADDR_VAR 0 1
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_OWVAR 2
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 21
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 69
1281: PUSH
1282: FOR_IN
1283: IFFALSE 1347
// begin SetSkill ( i , skill_combat , 10 ) ;
1285: LD_VAR 0 1
1289: PPUSH
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 10
1295: PPUSH
1296: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 2
1307: PPUSH
1308: LD_INT 10
1310: PPUSH
1311: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1315: LD_VAR 0 1
1319: PPUSH
1320: LD_INT 3
1322: PPUSH
1323: LD_INT 10
1325: PPUSH
1326: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 4
1337: PPUSH
1338: LD_INT 10
1340: PPUSH
1341: CALL_OW 237
// end ;
1345: GO 1282
1347: POP
1348: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1349: LD_ADDR_VAR 0 1
1353: PUSH
1354: LD_INT 22
1356: PUSH
1357: LD_OWVAR 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 2
1368: PUSH
1369: LD_INT 30
1371: PUSH
1372: LD_INT 0
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 30
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: LIST
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PPUSH
1398: CALL_OW 69
1402: PUSH
1403: FOR_IN
1404: IFFALSE 1468
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1406: LD_VAR 0 1
1410: PPUSH
1411: CALL_OW 274
1415: PPUSH
1416: LD_INT 1
1418: PPUSH
1419: LD_INT 9999
1421: PPUSH
1422: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1426: LD_VAR 0 1
1430: PPUSH
1431: CALL_OW 274
1435: PPUSH
1436: LD_INT 2
1438: PPUSH
1439: LD_INT 9999
1441: PPUSH
1442: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1446: LD_VAR 0 1
1450: PPUSH
1451: CALL_OW 274
1455: PPUSH
1456: LD_INT 3
1458: PPUSH
1459: LD_INT 9999
1461: PPUSH
1462: CALL_OW 277
// end ;
1466: GO 1403
1468: POP
1469: POP
// end ; end_of_file
1470: PPOPN 1
1472: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam ; export dialogRus ; export firstCargo ; export randomsToSave ; export function PrepareRussians ; begin
1473: LD_INT 0
1475: PPUSH
// randomsToSave = [ ] ;
1476: LD_ADDR_EXP 55
1480: PUSH
1481: EMPTY
1482: ST_TO_ADDR
// PrepareHeroes ;
1483: CALL 1492 0 0
// end ;
1487: LD_VAR 0 1
1491: RET
// function PrepareHeroes ; var i , current ; begin
1492: LD_INT 0
1494: PPUSH
1495: PPUSH
1496: PPUSH
// uc_side = 3 ;
1497: LD_ADDR_OWVAR 20
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// uc_nation = 3 ;
1505: LD_ADDR_OWVAR 21
1509: PUSH
1510: LD_INT 3
1512: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1513: LD_ADDR_EXP 38
1517: PUSH
1518: LD_STRING Burlak
1520: PPUSH
1521: LD_INT 1
1523: PPUSH
1524: LD_INT 3
1526: PPUSH
1527: CALL 7697 0 3
1531: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1532: LD_ADDR_EXP 39
1536: PUSH
1537: LD_STRING Gnyevko
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 3
1545: PPUSH
1546: CALL 7697 0 3
1550: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1551: LD_ADDR_EXP 41
1555: PUSH
1556: LD_STRING Kovalyuk
1558: PPUSH
1559: LD_INT 1
1561: PPUSH
1562: LD_INT 3
1564: PPUSH
1565: CALL 7697 0 3
1569: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1570: LD_ADDR_EXP 40
1574: PUSH
1575: LD_STRING Kirilenkova
1577: PPUSH
1578: LD_INT 1
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: CALL 7697 0 3
1588: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1589: LD_ADDR_EXP 42
1593: PUSH
1594: LD_STRING Belkov
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: CALL 7697 0 3
1607: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1608: LD_ADDR_EXP 43
1612: PUSH
1613: LD_STRING Belkov2
1615: PPUSH
1616: LD_INT 1
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: CALL 7697 0 3
1626: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1627: LD_ADDR_EXP 44
1631: PUSH
1632: LD_STRING Scholtze
1634: PPUSH
1635: LD_INT 1
1637: PPUSH
1638: LD_INT 4
1640: PPUSH
1641: CALL 7697 0 3
1645: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1646: LD_ADDR_EXP 48
1650: PUSH
1651: LD_STRING Popov
1653: PPUSH
1654: LD_INT 0
1656: PPUSH
1657: LD_INT 0
1659: PPUSH
1660: CALL 7697 0 3
1664: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1665: LD_ADDR_EXP 49
1669: PUSH
1670: LD_STRING Platonov
1672: PPUSH
1673: LD_INT 0
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL 7697 0 3
1683: ST_TO_ADDR
// uc_side = 6 ;
1684: LD_ADDR_OWVAR 20
1688: PUSH
1689: LD_INT 6
1691: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1692: LD_ADDR_EXP 50
1696: PUSH
1697: LD_STRING Gaydar
1699: PPUSH
1700: LD_INT 0
1702: PPUSH
1703: LD_INT 0
1705: PPUSH
1706: CALL 7697 0 3
1710: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1711: LD_ADDR_EXP 45
1715: PUSH
1716: LD_STRING Kuzmov
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL 7697 0 3
1729: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1730: LD_EXP 45
1734: PPUSH
1735: LD_INT 109
1737: PPUSH
1738: LD_INT 108
1740: PPUSH
1741: LD_INT 5
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL_OW 50
// ComHold ( Kuzmov ) ;
1751: LD_EXP 45
1755: PPUSH
1756: CALL_OW 140
// uc_side = 3 ;
1760: LD_ADDR_OWVAR 20
1764: PUSH
1765: LD_INT 3
1767: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1768: LD_EXP 38
1772: PUSH
1773: LD_EXP 39
1777: PUSH
1778: LD_EXP 40
1782: PUSH
1783: LD_EXP 41
1787: PUSH
1788: LD_EXP 42
1792: PUSH
1793: LD_EXP 43
1797: PUSH
1798: LD_EXP 44
1802: PUSH
1803: LD_EXP 48
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_INT 2
1820: PPUSH
1821: LD_INT 0
1823: PPUSH
1824: CALL 7780 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1828: LD_ADDR_EXP 46
1832: PUSH
1833: LD_STRING 03_other_survivors
1835: PPUSH
1836: CALL_OW 31
1840: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1841: LD_ADDR_EXP 47
1845: PUSH
1846: LD_STRING 03_other_kirov
1848: PPUSH
1849: CALL_OW 31
1853: ST_TO_ADDR
// for i in other_survivors do
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_EXP 46
1863: PUSH
1864: FOR_IN
1865: IFFALSE 1884
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
1882: GO 1864
1884: POP
1885: POP
// for i in other_kirov_survivors do
1886: LD_ADDR_VAR 0 2
1890: PUSH
1891: LD_EXP 47
1895: PUSH
1896: FOR_IN
1897: IFFALSE 1916
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1899: LD_VAR 0 2
1903: PPUSH
1904: LD_INT 2
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 49
1914: GO 1896
1916: POP
1917: POP
// PrepareSoldier ( sex_male , 1 ) ;
1918: LD_INT 1
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL_OW 381
// dialogRus = CreateHuman ;
1928: LD_ADDR_EXP 53
1932: PUSH
1933: CALL_OW 44
1937: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
1938: LD_EXP 46
1942: PUSH
1943: LD_EXP 47
1947: PLUS
1948: PUSH
1949: LD_EXP 39
1953: PUSH
1954: LD_EXP 40
1958: PUSH
1959: LD_EXP 41
1963: PUSH
1964: LD_EXP 42
1968: PUSH
1969: LD_EXP 43
1973: PUSH
1974: LD_EXP 44
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: PLUS
1987: PUSH
1988: LD_INT 8
1990: LESS
1991: IFFALSE 2144
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
1993: LD_ADDR_VAR 0 3
1997: PUSH
1998: LD_EXP 46
2002: PUSH
2003: LD_EXP 47
2007: PLUS
2008: PUSH
2009: LD_EXP 39
2013: PUSH
2014: LD_EXP 40
2018: PUSH
2019: LD_EXP 41
2023: PUSH
2024: LD_EXP 42
2028: PUSH
2029: LD_EXP 43
2033: PUSH
2034: LD_EXP 44
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: PLUS
2047: ST_TO_ADDR
// current = 8 - current ;
2048: LD_ADDR_VAR 0 3
2052: PUSH
2053: LD_INT 8
2055: PUSH
2056: LD_VAR 0 3
2060: MINUS
2061: ST_TO_ADDR
// for i := 1 to current do
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: DOUBLE
2068: LD_INT 1
2070: DEC
2071: ST_TO_ADDR
2072: LD_VAR 0 3
2076: PUSH
2077: FOR_TO
2078: IFFALSE 2142
// begin uc_nation = 3 ;
2080: LD_ADDR_OWVAR 21
2084: PUSH
2085: LD_INT 3
2087: ST_TO_ADDR
// uc_side = 6 ;
2088: LD_ADDR_OWVAR 20
2092: PUSH
2093: LD_INT 6
2095: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2096: LD_INT 0
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 4
2104: PPUSH
2105: CALL_OW 12
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 3
2115: PPUSH
2116: CALL_OW 12
2120: PPUSH
2121: CALL_OW 380
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2125: CALL_OW 44
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ;
2140: GO 2077
2142: POP
2143: POP
// end ; end ;
2144: LD_VAR 0 1
2148: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
2154: PPUSH
2155: PPUSH
2156: PPUSH
2157: PPUSH
// rnd = rand ( 1 , 2 ) ;
2158: LD_ADDR_VAR 0 3
2162: PUSH
2163: LD_INT 1
2165: PPUSH
2166: LD_INT 2
2168: PPUSH
2169: CALL_OW 12
2173: ST_TO_ADDR
// uc_side = 6 ;
2174: LD_ADDR_OWVAR 20
2178: PUSH
2179: LD_INT 6
2181: ST_TO_ADDR
// uc_nation = 3 ;
2182: LD_ADDR_OWVAR 21
2186: PUSH
2187: LD_INT 3
2189: ST_TO_ADDR
// if rnd = 1 then
2190: LD_VAR 0 3
2194: PUSH
2195: LD_INT 1
2197: EQUAL
2198: IFFALSE 2574
// begin vc_chassis = ru_medium_wheeled ;
2200: LD_ADDR_OWVAR 37
2204: PUSH
2205: LD_INT 21
2207: ST_TO_ADDR
// vc_control = control_manual ;
2208: LD_ADDR_OWVAR 38
2212: PUSH
2213: LD_INT 1
2215: ST_TO_ADDR
// vc_engine = engine_combustion ;
2216: LD_ADDR_OWVAR 39
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2224: LD_ADDR_VAR 0 5
2228: PUSH
2229: LD_INT 1
2231: PPUSH
2232: LD_INT 100
2234: PPUSH
2235: CALL_OW 12
2239: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2240: LD_VAR 0 5
2244: PUSH
2245: LD_EXP 34
2249: PUSH
2250: LD_INT 1
2252: PLUS
2253: LESS
2254: IFFALSE 2266
// vc_weapon = ru_cargo_bay else
2256: LD_ADDR_OWVAR 40
2260: PUSH
2261: LD_INT 51
2263: ST_TO_ADDR
2264: GO 2297
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2266: LD_ADDR_OWVAR 40
2270: PUSH
2271: LD_INT 42
2273: PUSH
2274: LD_INT 43
2276: PUSH
2277: LD_INT 44
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 1
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: CALL_OW 12
2295: ARRAY
2296: ST_TO_ADDR
// vehicle = CreateVehicle ;
2297: LD_ADDR_VAR 0 7
2301: PUSH
2302: CALL_OW 45
2306: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2307: LD_VAR 0 7
2311: PPUSH
2312: LD_INT 3
2314: PPUSH
2315: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2319: LD_VAR 0 7
2323: PPUSH
2324: LD_INT 3
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2334: LD_INT 0
2336: PPUSH
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: CALL_OW 12
2347: PPUSH
2348: LD_INT 2
2350: PPUSH
2351: LD_INT 3
2353: PPUSH
2354: CALL_OW 12
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 7
2372: PPUSH
2373: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2377: LD_OWVAR 40
2381: PUSH
2382: LD_INT 51
2384: EQUAL
2385: IFFALSE 2402
// AddCargo ( vehicle , mat_cans , 100 ) ;
2387: LD_VAR 0 7
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: LD_INT 100
2397: PPUSH
2398: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2402: LD_VAR 0 7
2406: PPUSH
2407: LD_INT 500
2409: PPUSH
2410: LD_INT 1000
2412: PPUSH
2413: CALL_OW 12
2417: PPUSH
2418: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2422: LD_ADDR_VAR 0 3
2426: PUSH
2427: LD_INT 1
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: CALL_OW 12
2437: ST_TO_ADDR
// if rnd = 1 then
2438: LD_VAR 0 3
2442: PUSH
2443: LD_INT 1
2445: EQUAL
2446: IFFALSE 2511
// for i := 3 to russianCargoPath1 do
2448: LD_ADDR_VAR 0 2
2452: PUSH
2453: DOUBLE
2454: LD_INT 3
2456: DEC
2457: ST_TO_ADDR
2458: LD_EXP 31
2462: PUSH
2463: FOR_TO
2464: IFFALSE 2507
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2466: LD_VAR 0 7
2470: PPUSH
2471: LD_EXP 31
2475: PUSH
2476: LD_VAR 0 2
2480: ARRAY
2481: PUSH
2482: LD_INT 1
2484: ARRAY
2485: PPUSH
2486: LD_EXP 31
2490: PUSH
2491: LD_VAR 0 2
2495: ARRAY
2496: PUSH
2497: LD_INT 2
2499: ARRAY
2500: PPUSH
2501: CALL_OW 171
2505: GO 2463
2507: POP
2508: POP
2509: GO 2572
// for i := 3 to russianCargoPath2 do
2511: LD_ADDR_VAR 0 2
2515: PUSH
2516: DOUBLE
2517: LD_INT 3
2519: DEC
2520: ST_TO_ADDR
2521: LD_EXP 32
2525: PUSH
2526: FOR_TO
2527: IFFALSE 2570
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2529: LD_VAR 0 7
2533: PPUSH
2534: LD_EXP 32
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: PUSH
2545: LD_INT 1
2547: ARRAY
2548: PPUSH
2549: LD_EXP 32
2553: PUSH
2554: LD_VAR 0 2
2558: ARRAY
2559: PUSH
2560: LD_INT 2
2562: ARRAY
2563: PPUSH
2564: CALL_OW 171
2568: GO 2526
2570: POP
2571: POP
// end else
2572: GO 2928
// begin for i := 1 to rand ( 3 , 6 ) do
2574: LD_ADDR_VAR 0 2
2578: PUSH
2579: DOUBLE
2580: LD_INT 1
2582: DEC
2583: ST_TO_ADDR
2584: LD_INT 3
2586: PPUSH
2587: LD_INT 6
2589: PPUSH
2590: CALL_OW 12
2594: PUSH
2595: FOR_TO
2596: IFFALSE 2674
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2598: LD_INT 0
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 4
2606: PPUSH
2607: CALL_OW 12
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: LD_INT 3
2617: PPUSH
2618: CALL_OW 12
2622: PPUSH
2623: CALL_OW 380
// unit = CreateHuman ;
2627: LD_ADDR_VAR 0 6
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
2637: LD_VAR 0 6
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
2652: LD_VAR 0 6
2656: PPUSH
2657: LD_INT 500
2659: PPUSH
2660: LD_INT 1000
2662: PPUSH
2663: CALL_OW 12
2667: PPUSH
2668: CALL_OW 234
// end ;
2672: GO 2595
2674: POP
2675: POP
// rnd2 = rand ( 1 , 2 ) ;
2676: LD_ADDR_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: PPUSH
2684: LD_INT 2
2686: PPUSH
2687: CALL_OW 12
2691: ST_TO_ADDR
// if rnd2 = 1 then
2692: LD_VAR 0 4
2696: PUSH
2697: LD_INT 1
2699: EQUAL
2700: IFFALSE 2816
// for i := 3 to russianCargoPath1 do
2702: LD_ADDR_VAR 0 2
2706: PUSH
2707: DOUBLE
2708: LD_INT 3
2710: DEC
2711: ST_TO_ADDR
2712: LD_EXP 31
2716: PUSH
2717: FOR_TO
2718: IFFALSE 2812
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2720: LD_INT 22
2722: PUSH
2723: LD_INT 6
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 21
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 56
2742: PUSH
2743: EMPTY
2744: LIST
2745: PUSH
2746: LD_INT 3
2748: PUSH
2749: LD_INT 60
2751: PUSH
2752: EMPTY
2753: LIST
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 69
2769: PUSH
2770: LD_EXP 52
2774: DIFF
2775: PPUSH
2776: LD_EXP 31
2780: PUSH
2781: LD_VAR 0 2
2785: ARRAY
2786: PUSH
2787: LD_INT 1
2789: ARRAY
2790: PPUSH
2791: LD_EXP 31
2795: PUSH
2796: LD_VAR 0 2
2800: ARRAY
2801: PUSH
2802: LD_INT 2
2804: ARRAY
2805: PPUSH
2806: CALL_OW 171
2810: GO 2717
2812: POP
2813: POP
2814: GO 2928
// for i := 3 to russianCargoPath2 do
2816: LD_ADDR_VAR 0 2
2820: PUSH
2821: DOUBLE
2822: LD_INT 3
2824: DEC
2825: ST_TO_ADDR
2826: LD_EXP 32
2830: PUSH
2831: FOR_TO
2832: IFFALSE 2926
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2834: LD_INT 22
2836: PUSH
2837: LD_INT 6
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: PUSH
2844: LD_INT 21
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 56
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: LD_INT 60
2865: PUSH
2866: EMPTY
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: LD_EXP 52
2888: DIFF
2889: PPUSH
2890: LD_EXP 32
2894: PUSH
2895: LD_VAR 0 2
2899: ARRAY
2900: PUSH
2901: LD_INT 1
2903: ARRAY
2904: PPUSH
2905: LD_EXP 32
2909: PUSH
2910: LD_VAR 0 2
2914: ARRAY
2915: PUSH
2916: LD_INT 2
2918: ARRAY
2919: PPUSH
2920: CALL_OW 171
2924: GO 2831
2926: POP
2927: POP
// end ; end ; end_of_file
2928: LD_VAR 0 1
2932: RET
// export Heike ; export function PrepareHeike ; begin
2933: LD_INT 0
2935: PPUSH
// uc_side = 2 ;
2936: LD_ADDR_OWVAR 20
2940: PUSH
2941: LD_INT 2
2943: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
2944: LD_ADDR_EXP 56
2948: PUSH
2949: LD_STRING Heike
2951: PPUSH
2952: LD_INT 0
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL 7697 0 3
2962: ST_TO_ADDR
// if Difficulty >= 2 then
2963: LD_OWVAR 67
2967: PUSH
2968: LD_INT 2
2970: GREATEREQUAL
2971: IFFALSE 2986
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2973: LD_INT 51
2975: PPUSH
2976: LD_INT 2
2978: PPUSH
2979: LD_INT 2
2981: PPUSH
2982: CALL_OW 322
// end ;
2986: LD_VAR 0 1
2990: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
2991: LD_INT 0
2993: PPUSH
2994: PPUSH
2995: PPUSH
// currentEnemyGroup = [ ] ;
2996: LD_ADDR_EXP 57
3000: PUSH
3001: EMPTY
3002: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3003: LD_ADDR_VAR 0 2
3007: PUSH
3008: DOUBLE
3009: LD_INT 1
3011: DEC
3012: ST_TO_ADDR
3013: LD_EXP 36
3017: PUSH
3018: FOR_TO
3019: IFFALSE 3274
// begin uc_side = 2 ;
3021: LD_ADDR_OWVAR 20
3025: PUSH
3026: LD_INT 2
3028: ST_TO_ADDR
// uc_nation = nation_arabian ;
3029: LD_ADDR_OWVAR 21
3033: PUSH
3034: LD_INT 2
3036: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3037: LD_ADDR_OWVAR 40
3041: PUSH
3042: LD_INT 23
3044: PUSH
3045: LD_INT 24
3047: PUSH
3048: LD_INT 25
3050: PUSH
3051: LD_INT 26
3053: PUSH
3054: LD_INT 27
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 5
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3076: LD_OWVAR 40
3080: PUSH
3081: LD_INT 25
3083: PUSH
3084: LD_INT 26
3086: PUSH
3087: LD_INT 27
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: IN
3095: IFFALSE 3126
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3097: LD_ADDR_OWVAR 37
3101: PUSH
3102: LD_INT 13
3104: PUSH
3105: LD_INT 14
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_INT 2
3117: PPUSH
3118: CALL_OW 12
3122: ARRAY
3123: ST_TO_ADDR
3124: GO 3157
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3126: LD_ADDR_OWVAR 37
3130: PUSH
3131: LD_INT 12
3133: PUSH
3134: LD_INT 13
3136: PUSH
3137: LD_INT 14
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 1
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: CALL_OW 12
3155: ARRAY
3156: ST_TO_ADDR
// vc_control = control_manual ;
3157: LD_ADDR_OWVAR 38
3161: PUSH
3162: LD_INT 1
3164: ST_TO_ADDR
// vc_engine = engine_combustion ;
3165: LD_ADDR_OWVAR 39
3169: PUSH
3170: LD_INT 1
3172: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3173: LD_ADDR_OWVAR 41
3177: PUSH
3178: LD_INT 100
3180: ST_TO_ADDR
// veh = CreateVehicle ;
3181: LD_ADDR_VAR 0 3
3185: PUSH
3186: CALL_OW 45
3190: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3191: LD_ADDR_EXP 57
3195: PUSH
3196: LD_EXP 57
3200: PUSH
3201: LD_VAR 0 3
3205: ADD
3206: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3207: LD_VAR 0 3
3211: PPUSH
3212: LD_INT 7
3214: PPUSH
3215: LD_INT 0
3217: PPUSH
3218: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3222: LD_OWVAR 40
3226: PUSH
3227: LD_INT 26
3229: EQUAL
3230: IFFALSE 3246
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3232: LD_INT 0
3234: PPUSH
3235: LD_EXP 30
3239: PPUSH
3240: CALL_OW 383
3244: GO 3258
// PrepareMechanic ( false , enemySkillLevel ) ;
3246: LD_INT 0
3248: PPUSH
3249: LD_EXP 29
3253: PPUSH
3254: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3258: CALL_OW 44
3262: PPUSH
3263: LD_VAR 0 3
3267: PPUSH
3268: CALL_OW 52
// end ;
3272: GO 3018
3274: POP
3275: POP
// end ;
3276: LD_VAR 0 1
3280: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3281: LD_INT 0
3283: PPUSH
3284: PPUSH
3285: PPUSH
// currentEnemyGroup = [ ] ;
3286: LD_ADDR_EXP 57
3290: PUSH
3291: EMPTY
3292: ST_TO_ADDR
// for i := 1 to enemyGroupHumans do
3293: LD_ADDR_VAR 0 3
3297: PUSH
3298: DOUBLE
3299: LD_INT 1
3301: DEC
3302: ST_TO_ADDR
3303: LD_EXP 37
3307: PUSH
3308: FOR_TO
3309: IFFALSE 3384
// begin uc_side = 2 ;
3311: LD_ADDR_OWVAR 20
3315: PUSH
3316: LD_INT 2
3318: ST_TO_ADDR
// uc_nation = nation_arabian ;
3319: LD_ADDR_OWVAR 21
3323: PUSH
3324: LD_INT 2
3326: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
3327: LD_INT 0
3329: PPUSH
3330: LD_EXP 29
3334: PPUSH
3335: CALL_OW 381
// unit = CreateHuman ;
3339: LD_ADDR_VAR 0 4
3343: PUSH
3344: CALL_OW 44
3348: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3349: LD_ADDR_EXP 57
3353: PUSH
3354: LD_EXP 57
3358: PUSH
3359: LD_VAR 0 4
3363: ADD
3364: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3365: LD_VAR 0 4
3369: PPUSH
3370: LD_VAR 0 1
3374: PPUSH
3375: LD_INT 0
3377: PPUSH
3378: CALL_OW 49
// end ;
3382: GO 3308
3384: POP
3385: POP
// for i := 1 to rand ( 1 , 3 ) do
3386: LD_ADDR_VAR 0 3
3390: PUSH
3391: DOUBLE
3392: LD_INT 1
3394: DEC
3395: ST_TO_ADDR
3396: LD_INT 1
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: CALL_OW 12
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3483
// begin uc_side = 2 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 2
3417: ST_TO_ADDR
// uc_nation = nation_arabian ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 2
3425: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_EXP 29
3433: PPUSH
3434: CALL_OW 384
// unit = CreateHuman ;
3438: LD_ADDR_VAR 0 4
3442: PUSH
3443: CALL_OW 44
3447: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3448: LD_ADDR_EXP 57
3452: PUSH
3453: LD_EXP 57
3457: PUSH
3458: LD_VAR 0 4
3462: ADD
3463: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3464: LD_VAR 0 4
3468: PPUSH
3469: LD_VAR 0 1
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: CALL_OW 49
// end ;
3481: GO 3407
3483: POP
3484: POP
// end ;
3485: LD_VAR 0 2
3489: RET
// export function PrepareArabianKiller ; var un ; begin
3490: LD_INT 0
3492: PPUSH
3493: PPUSH
// uc_side = 5 ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_INT 5
3501: ST_TO_ADDR
// uc_nation = nation_arabian ;
3502: LD_ADDR_OWVAR 21
3506: PUSH
3507: LD_INT 2
3509: ST_TO_ADDR
// hc_class = class_soldier ;
3510: LD_ADDR_OWVAR 28
3514: PUSH
3515: LD_INT 1
3517: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3518: LD_ADDR_OWVAR 31
3522: PUSH
3523: LD_INT 0
3525: PUSH
3526: LD_INT 0
3528: PUSH
3529: LD_INT 0
3531: PUSH
3532: LD_INT 0
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: ST_TO_ADDR
// un = CreateHuman ;
3541: LD_ADDR_VAR 0 2
3545: PUSH
3546: CALL_OW 44
3550: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
3551: LD_VAR 0 2
3555: PPUSH
3556: LD_INT 12
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
3566: LD_VAR 0 2
3570: PPUSH
3571: LD_EXP 50
3575: PPUSH
3576: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
3580: LD_ADDR_EXP 21
3584: PUSH
3585: LD_EXP 21
3589: PUSH
3590: LD_INT 1
3592: PLUS
3593: ST_TO_ADDR
// end ; end_of_file
3594: LD_VAR 0 1
3598: RET
// export function Nef_PrepareNature ; var i , un ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
3603: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
3604: LD_ADDR_VAR 0 2
3608: PUSH
3609: DOUBLE
3610: LD_INT 1
3612: DEC
3613: ST_TO_ADDR
3614: LD_EXP 23
3618: PUSH
3619: LD_INT 1
3621: ARRAY
3622: PUSH
3623: FOR_TO
3624: IFFALSE 3734
// begin uc_side = 0 ;
3626: LD_ADDR_OWVAR 20
3630: PUSH
3631: LD_INT 0
3633: ST_TO_ADDR
// uc_nation = nation_nature ;
3634: LD_ADDR_OWVAR 21
3638: PUSH
3639: LD_INT 0
3641: ST_TO_ADDR
// hc_class = class_apeman ;
3642: LD_ADDR_OWVAR 28
3646: PUSH
3647: LD_INT 12
3649: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3650: LD_ADDR_OWVAR 31
3654: PUSH
3655: LD_EXP 24
3659: PUSH
3660: LD_INT 1
3662: ARRAY
3663: PUSH
3664: LD_EXP 24
3668: PUSH
3669: LD_INT 2
3671: ARRAY
3672: PUSH
3673: LD_EXP 24
3677: PUSH
3678: LD_INT 3
3680: ARRAY
3681: PUSH
3682: LD_EXP 24
3686: PUSH
3687: LD_INT 4
3689: ARRAY
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3697: LD_ADDR_OWVAR 35
3701: PUSH
3702: LD_EXP 25
3706: ST_TO_ADDR
// un = CreateHuman ;
3707: LD_ADDR_VAR 0 3
3711: PUSH
3712: CALL_OW 44
3716: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3717: LD_VAR 0 3
3721: PPUSH
3722: LD_INT 8
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: CALL_OW 49
// end ;
3732: GO 3623
3734: POP
3735: POP
// for i := 1 to animalsAmount [ 2 ] do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_EXP 23
3750: PUSH
3751: LD_INT 2
3753: ARRAY
3754: PUSH
3755: FOR_TO
3756: IFFALSE 3866
// begin uc_side = 0 ;
3758: LD_ADDR_OWVAR 20
3762: PUSH
3763: LD_INT 0
3765: ST_TO_ADDR
// uc_nation = nation_nature ;
3766: LD_ADDR_OWVAR 21
3770: PUSH
3771: LD_INT 0
3773: ST_TO_ADDR
// hc_class = class_phororhacos ;
3774: LD_ADDR_OWVAR 28
3778: PUSH
3779: LD_INT 18
3781: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3782: LD_ADDR_OWVAR 31
3786: PUSH
3787: LD_EXP 24
3791: PUSH
3792: LD_INT 1
3794: ARRAY
3795: PUSH
3796: LD_EXP 24
3800: PUSH
3801: LD_INT 2
3803: ARRAY
3804: PUSH
3805: LD_EXP 24
3809: PUSH
3810: LD_INT 3
3812: ARRAY
3813: PUSH
3814: LD_EXP 24
3818: PUSH
3819: LD_INT 4
3821: ARRAY
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3829: LD_ADDR_OWVAR 35
3833: PUSH
3834: LD_EXP 25
3838: ST_TO_ADDR
// un = CreateHuman ;
3839: LD_ADDR_VAR 0 3
3843: PUSH
3844: CALL_OW 44
3848: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3849: LD_VAR 0 3
3853: PPUSH
3854: LD_INT 8
3856: PPUSH
3857: LD_INT 0
3859: PPUSH
3860: CALL_OW 49
// end ;
3864: GO 3755
3866: POP
3867: POP
// for i := 1 to animalsAmount [ 3 ] do
3868: LD_ADDR_VAR 0 2
3872: PUSH
3873: DOUBLE
3874: LD_INT 1
3876: DEC
3877: ST_TO_ADDR
3878: LD_EXP 23
3882: PUSH
3883: LD_INT 3
3885: ARRAY
3886: PUSH
3887: FOR_TO
3888: IFFALSE 3998
// begin uc_side = 0 ;
3890: LD_ADDR_OWVAR 20
3894: PUSH
3895: LD_INT 0
3897: ST_TO_ADDR
// uc_nation = nation_nature ;
3898: LD_ADDR_OWVAR 21
3902: PUSH
3903: LD_INT 0
3905: ST_TO_ADDR
// hc_class = class_tiger ;
3906: LD_ADDR_OWVAR 28
3910: PUSH
3911: LD_INT 14
3913: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
3914: LD_ADDR_OWVAR 31
3918: PUSH
3919: LD_EXP 24
3923: PUSH
3924: LD_INT 1
3926: ARRAY
3927: PUSH
3928: LD_EXP 24
3932: PUSH
3933: LD_INT 2
3935: ARRAY
3936: PUSH
3937: LD_EXP 24
3941: PUSH
3942: LD_INT 3
3944: ARRAY
3945: PUSH
3946: LD_EXP 24
3950: PUSH
3951: LD_INT 4
3953: ARRAY
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
3961: LD_ADDR_OWVAR 35
3965: PUSH
3966: LD_EXP 25
3970: ST_TO_ADDR
// un = CreateHuman ;
3971: LD_ADDR_VAR 0 3
3975: PUSH
3976: CALL_OW 44
3980: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_INT 8
3988: PPUSH
3989: LD_INT 0
3991: PPUSH
3992: CALL_OW 49
// end ;
3996: GO 3887
3998: POP
3999: POP
// for i := 1 to animalsAmount [ 4 ] do
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: DOUBLE
4006: LD_INT 1
4008: DEC
4009: ST_TO_ADDR
4010: LD_EXP 23
4014: PUSH
4015: LD_INT 4
4017: ARRAY
4018: PUSH
4019: FOR_TO
4020: IFFALSE 4130
// begin uc_side = 0 ;
4022: LD_ADDR_OWVAR 20
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// uc_nation = nation_nature ;
4030: LD_ADDR_OWVAR 21
4034: PUSH
4035: LD_INT 0
4037: ST_TO_ADDR
// hc_class = 21 ;
4038: LD_ADDR_OWVAR 28
4042: PUSH
4043: LD_INT 21
4045: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4046: LD_ADDR_OWVAR 31
4050: PUSH
4051: LD_EXP 24
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PUSH
4060: LD_EXP 24
4064: PUSH
4065: LD_INT 2
4067: ARRAY
4068: PUSH
4069: LD_EXP 24
4073: PUSH
4074: LD_INT 3
4076: ARRAY
4077: PUSH
4078: LD_EXP 24
4082: PUSH
4083: LD_INT 4
4085: ARRAY
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4093: LD_ADDR_OWVAR 35
4097: PUSH
4098: LD_EXP 25
4102: ST_TO_ADDR
// un = CreateHuman ;
4103: LD_ADDR_VAR 0 3
4107: PUSH
4108: CALL_OW 44
4112: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4113: LD_VAR 0 3
4117: PPUSH
4118: LD_INT 8
4120: PPUSH
4121: LD_INT 0
4123: PPUSH
4124: CALL_OW 49
// end ;
4128: GO 4019
4130: POP
4131: POP
// for i := 1 to animalsAmount [ 5 ] do
4132: LD_ADDR_VAR 0 2
4136: PUSH
4137: DOUBLE
4138: LD_INT 1
4140: DEC
4141: ST_TO_ADDR
4142: LD_EXP 23
4146: PUSH
4147: LD_INT 5
4149: ARRAY
4150: PUSH
4151: FOR_TO
4152: IFFALSE 4213
// begin uc_side = 0 ;
4154: LD_ADDR_OWVAR 20
4158: PUSH
4159: LD_INT 0
4161: ST_TO_ADDR
// uc_nation = nation_nature ;
4162: LD_ADDR_OWVAR 21
4166: PUSH
4167: LD_INT 0
4169: ST_TO_ADDR
// vc_chassis := 31 ;
4170: LD_ADDR_OWVAR 37
4174: PUSH
4175: LD_INT 31
4177: ST_TO_ADDR
// vc_control := control_rider ;
4178: LD_ADDR_OWVAR 38
4182: PUSH
4183: LD_INT 4
4185: ST_TO_ADDR
// un := CreateVehicle ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 45
4195: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4196: LD_VAR 0 3
4200: PPUSH
4201: LD_INT 8
4203: PPUSH
4204: LD_INT 0
4206: PPUSH
4207: CALL_OW 49
// end ;
4211: GO 4151
4213: POP
4214: POP
// end ; end_of_file
4215: LD_VAR 0 1
4219: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
4220: LD_INT 0
4222: PPUSH
4223: PPUSH
4224: PPUSH
4225: PPUSH
4226: PPUSH
4227: PPUSH
4228: PPUSH
4229: PPUSH
4230: PPUSH
4231: PPUSH
4232: PPUSH
4233: PPUSH
4234: PPUSH
4235: PPUSH
4236: PPUSH
4237: PPUSH
4238: PPUSH
4239: PPUSH
// for unit in units do
4240: LD_ADDR_VAR 0 8
4244: PUSH
4245: LD_VAR 0 1
4249: PUSH
4250: FOR_IN
4251: IFFALSE 4288
// if not ignorePath then
4253: LD_VAR 0 3
4257: NOT
4258: IFFALSE 4274
// SetTag ( unit , 0 ) else
4260: LD_VAR 0 8
4264: PPUSH
4265: LD_INT 0
4267: PPUSH
4268: CALL_OW 109
4272: GO 4286
// SetTag ( unit , 1 ) ;
4274: LD_VAR 0 8
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: CALL_OW 109
4286: GO 4250
4288: POP
4289: POP
// startAttacks = false ;
4290: LD_ADDR_VAR 0 21
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
4298: LD_ADDR_VAR 0 17
4302: PUSH
4303: LD_VAR 0 2
4307: PUSH
4308: LD_VAR 0 2
4312: ARRAY
4313: PUSH
4314: LD_INT 1
4316: ARRAY
4317: PUSH
4318: LD_VAR 0 2
4322: PUSH
4323: LD_VAR 0 2
4327: ARRAY
4328: PUSH
4329: LD_INT 2
4331: ARRAY
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: ST_TO_ADDR
// mechanics = [ ] ;
4337: LD_ADDR_VAR 0 12
4341: PUSH
4342: EMPTY
4343: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
4344: LD_ADDR_VAR 0 9
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: LD_INT 50
4356: PUSH
4357: EMPTY
4358: LIST
4359: PUSH
4360: LD_INT 2
4362: PUSH
4363: LD_INT 25
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 21
4375: PUSH
4376: LD_INT 2
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PPUSH
4392: CALL_OW 72
4396: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
4397: LD_ADDR_VAR 0 11
4401: PUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 50
4409: PUSH
4410: EMPTY
4411: LIST
4412: PUSH
4413: LD_INT 25
4415: PUSH
4416: LD_INT 4
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4432: LD_ADDR_VAR 0 13
4436: PUSH
4437: LD_VAR 0 1
4441: PPUSH
4442: LD_INT 21
4444: PUSH
4445: LD_INT 1
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 3
4454: PUSH
4455: LD_INT 24
4457: PUSH
4458: LD_INT 1000
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PPUSH
4473: CALL_OW 72
4477: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
4478: LD_ADDR_VAR 0 15
4482: PUSH
4483: LD_INT 9
4485: PPUSH
4486: CALL_OW 435
4490: ST_TO_ADDR
// if not ignorePath then
4491: LD_VAR 0 3
4495: NOT
4496: IFFALSE 5443
// begin for unit in attackUnits do
4498: LD_ADDR_VAR 0 8
4502: PUSH
4503: LD_VAR 0 9
4507: PUSH
4508: FOR_IN
4509: IFFALSE 5252
// begin if path and not startAttacks then
4511: LD_VAR 0 2
4515: PUSH
4516: LD_VAR 0 21
4520: NOT
4521: AND
4522: IFFALSE 5241
// begin i = 1 ;
4524: LD_ADDR_VAR 0 7
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
4532: LD_ADDR_VAR 0 15
4536: PUSH
4537: LD_INT 9
4539: PPUSH
4540: CALL_OW 435
4544: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
4545: LD_ADDR_VAR 0 18
4549: PUSH
4550: LD_INT 81
4552: PUSH
4553: LD_VAR 0 8
4557: PPUSH
4558: CALL_OW 255
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: PPUSH
4572: LD_VAR 0 8
4576: PPUSH
4577: CALL_OW 74
4581: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
4582: LD_ADDR_VAR 0 19
4586: PUSH
4587: LD_VAR 0 15
4591: PPUSH
4592: LD_VAR 0 8
4596: PPUSH
4597: CALL_OW 250
4601: PPUSH
4602: LD_VAR 0 8
4606: PPUSH
4607: CALL_OW 251
4611: PPUSH
4612: CALL_OW 439
4616: ST_TO_ADDR
// if damageUnits and medics then
4617: LD_VAR 0 13
4621: PUSH
4622: LD_VAR 0 11
4626: AND
4627: IFFALSE 4649
// ComHeal ( medics , damageUnits [ 1 ] ) else
4629: LD_VAR 0 11
4633: PPUSH
4634: LD_VAR 0 13
4638: PUSH
4639: LD_INT 1
4641: ARRAY
4642: PPUSH
4643: CALL_OW 128
4647: GO 4692
// if medics then
4649: LD_VAR 0 11
4653: IFFALSE 4692
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
4655: LD_VAR 0 11
4659: PPUSH
4660: LD_VAR 0 9
4664: PUSH
4665: LD_INT 1
4667: ARRAY
4668: PPUSH
4669: CALL_OW 250
4673: PPUSH
4674: LD_VAR 0 9
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: CALL_OW 251
4687: PPUSH
4688: CALL_OW 111
// if not HasTask ( unit ) then
4692: LD_VAR 0 8
4696: PPUSH
4697: CALL_OW 314
4701: NOT
4702: IFFALSE 4941
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
4704: LD_ADDR_VAR 0 19
4708: PUSH
4709: LD_VAR 0 15
4713: PPUSH
4714: LD_VAR 0 8
4718: PPUSH
4719: CALL_OW 250
4723: PPUSH
4724: LD_VAR 0 8
4728: PPUSH
4729: CALL_OW 251
4733: PPUSH
4734: CALL_OW 439
4738: ST_TO_ADDR
// if i > crates then
4739: LD_VAR 0 7
4743: PUSH
4744: LD_VAR 0 15
4748: GREATER
4749: IFFALSE 4759
// i = 1 ;
4751: LD_ADDR_VAR 0 7
4755: PUSH
4756: LD_INT 1
4758: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
4759: LD_VAR 0 18
4763: PUSH
4764: LD_VAR 0 19
4768: AND
4769: IFFALSE 4884
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
4771: LD_VAR 0 8
4775: PPUSH
4776: LD_VAR 0 18
4780: PPUSH
4781: CALL_OW 250
4785: PPUSH
4786: LD_VAR 0 18
4790: PPUSH
4791: CALL_OW 251
4795: PPUSH
4796: CALL_OW 297
4800: PUSH
4801: LD_VAR 0 8
4805: PPUSH
4806: LD_VAR 0 19
4810: PUSH
4811: LD_INT 1
4813: ARRAY
4814: PPUSH
4815: LD_VAR 0 19
4819: PUSH
4820: LD_INT 2
4822: ARRAY
4823: PPUSH
4824: CALL_OW 297
4828: LESS
4829: IFFALSE 4847
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
4831: LD_VAR 0 9
4835: PPUSH
4836: LD_VAR 0 18
4840: PPUSH
4841: CALL_OW 115
4845: GO 4882
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
4847: LD_VAR 0 9
4851: PPUSH
4852: LD_VAR 0 15
4856: PUSH
4857: LD_VAR 0 7
4861: ARRAY
4862: PPUSH
4863: LD_VAR 0 15
4867: PUSH
4868: LD_VAR 0 7
4872: PUSH
4873: LD_INT 1
4875: PLUS
4876: ARRAY
4877: PPUSH
4878: CALL_OW 116
// end else
4882: GO 4941
// if crates then
4884: LD_VAR 0 15
4888: IFFALSE 4927
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
4890: LD_VAR 0 9
4894: PPUSH
4895: LD_VAR 0 15
4899: PUSH
4900: LD_VAR 0 7
4904: ARRAY
4905: PPUSH
4906: LD_VAR 0 15
4910: PUSH
4911: LD_VAR 0 7
4915: PUSH
4916: LD_INT 1
4918: PLUS
4919: ARRAY
4920: PPUSH
4921: CALL_OW 116
4925: GO 4941
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
4927: LD_VAR 0 9
4931: PPUSH
4932: LD_VAR 0 18
4936: PPUSH
4937: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
4941: LD_INT 35
4943: PPUSH
4944: CALL_OW 67
// if path then
4948: LD_VAR 0 2
4952: IFFALSE 5038
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
4954: LD_ADDR_VAR 0 16
4958: PUSH
4959: LD_VAR 0 8
4963: PPUSH
4964: LD_VAR 0 2
4968: PPUSH
4969: CALL 6333 0 2
4973: ST_TO_ADDR
// if agressiveMove then
4974: LD_VAR 0 4
4978: IFFALSE 5009
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
4980: LD_VAR 0 9
4984: PPUSH
4985: LD_VAR 0 16
4989: PUSH
4990: LD_INT 1
4992: ARRAY
4993: PPUSH
4994: LD_VAR 0 16
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: CALL_OW 114
5007: GO 5036
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5009: LD_VAR 0 9
5013: PPUSH
5014: LD_VAR 0 16
5018: PUSH
5019: LD_INT 1
5021: ARRAY
5022: PPUSH
5023: LD_VAR 0 16
5027: PUSH
5028: LD_INT 2
5030: ARRAY
5031: PPUSH
5032: CALL_OW 111
// end else
5036: GO 5046
// startAttacks = true ;
5038: LD_ADDR_VAR 0 21
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// i = i + 2 ;
5046: LD_ADDR_VAR 0 7
5050: PUSH
5051: LD_VAR 0 7
5055: PUSH
5056: LD_INT 2
5058: PLUS
5059: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5060: LD_VAR 0 8
5064: PPUSH
5065: CALL_OW 314
5069: NOT
5070: PUSH
5071: LD_INT 22
5073: PUSH
5074: LD_VAR 0 8
5078: PPUSH
5079: CALL_OW 255
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 92
5090: PUSH
5091: LD_VAR 0 16
5095: PUSH
5096: LD_INT 1
5098: ARRAY
5099: PUSH
5100: LD_VAR 0 16
5104: PUSH
5105: LD_INT 2
5107: ARRAY
5108: PUSH
5109: LD_INT 4
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: PUSH
5127: LD_INT 3
5129: GREATER
5130: AND
5131: PUSH
5132: LD_VAR 0 21
5136: NOT
5137: AND
5138: IFFALSE 4532
// for i := 1 to path do
5140: LD_ADDR_VAR 0 7
5144: PUSH
5145: DOUBLE
5146: LD_INT 1
5148: DEC
5149: ST_TO_ADDR
5150: LD_VAR 0 2
5154: PUSH
5155: FOR_TO
5156: IFFALSE 5239
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5158: LD_VAR 0 2
5162: PUSH
5163: LD_VAR 0 7
5167: ARRAY
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PUSH
5173: LD_VAR 0 16
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: EQUAL
5182: PUSH
5183: LD_VAR 0 2
5187: PUSH
5188: LD_VAR 0 7
5192: ARRAY
5193: PUSH
5194: LD_INT 2
5196: ARRAY
5197: PUSH
5198: LD_VAR 0 16
5202: PUSH
5203: LD_INT 2
5205: ARRAY
5206: EQUAL
5207: AND
5208: IFFALSE 5237
// begin path = path diff [ path [ i ] ] ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_VAR 0 2
5219: PUSH
5220: LD_VAR 0 2
5224: PUSH
5225: LD_VAR 0 7
5229: ARRAY
5230: PUSH
5231: EMPTY
5232: LIST
5233: DIFF
5234: ST_TO_ADDR
// break ;
5235: GO 5239
// end ;
5237: GO 5155
5239: POP
5240: POP
// end ; if not path then
5241: LD_VAR 0 2
5245: NOT
5246: IFFALSE 5250
// break ;
5248: GO 5252
// end ;
5250: GO 4508
5252: POP
5253: POP
// repeat unitsReachPathEnd = 0 ;
5254: LD_ADDR_VAR 0 20
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// for attackUnit in attackUnits do
5262: LD_ADDR_VAR 0 10
5266: PUSH
5267: LD_VAR 0 9
5271: PUSH
5272: FOR_IN
5273: IFFALSE 5411
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
5275: LD_VAR 0 10
5279: PPUSH
5280: LD_VAR 0 17
5284: PUSH
5285: LD_INT 1
5287: ARRAY
5288: PPUSH
5289: LD_VAR 0 17
5293: PUSH
5294: LD_INT 2
5296: ARRAY
5297: PPUSH
5298: CALL_OW 297
5302: PUSH
5303: LD_INT 7
5305: LESS
5306: NOT
5307: PUSH
5308: LD_VAR 0 10
5312: PPUSH
5313: CALL_OW 110
5317: PUSH
5318: LD_INT 0
5320: EQUAL
5321: AND
5322: IFFALSE 5353
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
5324: LD_VAR 0 10
5328: PPUSH
5329: LD_VAR 0 17
5333: PUSH
5334: LD_INT 1
5336: ARRAY
5337: PPUSH
5338: LD_VAR 0 17
5342: PUSH
5343: LD_INT 2
5345: ARRAY
5346: PPUSH
5347: CALL_OW 111
5351: GO 5380
// if GetTag ( attackUnit ) = 0 then
5353: LD_VAR 0 10
5357: PPUSH
5358: CALL_OW 110
5362: PUSH
5363: LD_INT 0
5365: EQUAL
5366: IFFALSE 5380
// SetTag ( attackUnit , 1 ) ;
5368: LD_VAR 0 10
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: CALL_OW 109
// if GetTag ( unit ) = 1 then
5380: LD_VAR 0 8
5384: PPUSH
5385: CALL_OW 110
5389: PUSH
5390: LD_INT 1
5392: EQUAL
5393: IFFALSE 5409
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
5395: LD_ADDR_VAR 0 20
5399: PUSH
5400: LD_VAR 0 20
5404: PUSH
5405: LD_INT 1
5407: PLUS
5408: ST_TO_ADDR
// end ;
5409: GO 5272
5411: POP
5412: POP
// wait ( 0 0$1 ) ;
5413: LD_INT 35
5415: PPUSH
5416: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
5420: LD_VAR 0 20
5424: PUSH
5425: LD_VAR 0 9
5429: PUSH
5430: LD_INT 3
5432: MINUS
5433: GREATER
5434: IFFALSE 5254
// wait ( 0 0$10 ) ;
5436: LD_INT 350
5438: PPUSH
5439: CALL_OW 67
// end ; for attackUnit in attackUnits do
5443: LD_ADDR_VAR 0 10
5447: PUSH
5448: LD_VAR 0 9
5452: PUSH
5453: FOR_IN
5454: IFFALSE 5470
// SetTag ( attackUnit , 2 ) ;
5456: LD_VAR 0 10
5460: PPUSH
5461: LD_INT 2
5463: PPUSH
5464: CALL_OW 109
5468: GO 5453
5470: POP
5471: POP
// startAttacks = true ;
5472: LD_ADDR_VAR 0 21
5476: PUSH
5477: LD_INT 1
5479: ST_TO_ADDR
// if startAttacks then
5480: LD_VAR 0 21
5484: IFFALSE 6303
// begin repeat wait ( 0 0$1 ) ;
5486: LD_INT 35
5488: PPUSH
5489: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5493: LD_ADDR_VAR 0 11
5497: PUSH
5498: LD_VAR 0 1
5502: PPUSH
5503: LD_INT 50
5505: PUSH
5506: EMPTY
5507: LIST
5508: PUSH
5509: LD_INT 25
5511: PUSH
5512: LD_INT 4
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PPUSH
5523: CALL_OW 72
5527: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5528: LD_ADDR_VAR 0 13
5532: PUSH
5533: LD_VAR 0 1
5537: PPUSH
5538: LD_INT 21
5540: PUSH
5541: LD_INT 1
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 25
5550: PUSH
5551: LD_INT 1
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: LD_INT 3
5560: PUSH
5561: LD_INT 24
5563: PUSH
5564: LD_INT 1000
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: PPUSH
5580: CALL_OW 72
5584: ST_TO_ADDR
// if damageUnits and medics then
5585: LD_VAR 0 13
5589: PUSH
5590: LD_VAR 0 11
5594: AND
5595: IFFALSE 5617
// ComHeal ( medics , damageUnits [ 1 ] ) else
5597: LD_VAR 0 11
5601: PPUSH
5602: LD_VAR 0 13
5606: PUSH
5607: LD_INT 1
5609: ARRAY
5610: PPUSH
5611: CALL_OW 128
5615: GO 5667
// if medics and not damageUnits then
5617: LD_VAR 0 11
5621: PUSH
5622: LD_VAR 0 13
5626: NOT
5627: AND
5628: IFFALSE 5667
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5630: LD_VAR 0 11
5634: PPUSH
5635: LD_VAR 0 9
5639: PUSH
5640: LD_INT 1
5642: ARRAY
5643: PPUSH
5644: CALL_OW 250
5648: PPUSH
5649: LD_VAR 0 9
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: CALL_OW 251
5662: PPUSH
5663: CALL_OW 111
// for attackUnit in attackUnits do
5667: LD_ADDR_VAR 0 10
5671: PUSH
5672: LD_VAR 0 9
5676: PUSH
5677: FOR_IN
5678: IFFALSE 6294
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
5680: LD_ADDR_VAR 0 22
5684: PUSH
5685: LD_INT 81
5687: PUSH
5688: LD_VAR 0 10
5692: PPUSH
5693: CALL_OW 255
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PPUSH
5702: CALL_OW 69
5706: PPUSH
5707: LD_VAR 0 10
5711: PPUSH
5712: CALL_OW 74
5716: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
5717: LD_ADDR_VAR 0 23
5721: PUSH
5722: LD_INT 81
5724: PUSH
5725: LD_VAR 0 10
5729: PPUSH
5730: CALL_OW 255
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 2
5741: PUSH
5742: LD_INT 59
5744: PUSH
5745: EMPTY
5746: LIST
5747: PUSH
5748: LD_INT 21
5750: PUSH
5751: LD_INT 1
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: LD_INT 21
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: EMPTY
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PPUSH
5786: LD_VAR 0 10
5790: PPUSH
5791: CALL_OW 74
5795: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
5796: LD_VAR 0 10
5800: PPUSH
5801: CALL_OW 110
5805: PUSH
5806: LD_INT 2
5808: EQUAL
5809: IFFALSE 5969
// begin if GetDistUnits ( attackUnit , target1 ) + 8 < GetDistUnits ( attackUnit , target2 ) then
5811: LD_VAR 0 10
5815: PPUSH
5816: LD_VAR 0 22
5820: PPUSH
5821: CALL_OW 296
5825: PUSH
5826: LD_INT 8
5828: PLUS
5829: PUSH
5830: LD_VAR 0 10
5834: PPUSH
5835: LD_VAR 0 23
5839: PPUSH
5840: CALL_OW 296
5844: LESS
5845: IFFALSE 5863
// ComAttackUnit ( attackUnit , target1 ) else
5847: LD_VAR 0 10
5851: PPUSH
5852: LD_VAR 0 22
5856: PPUSH
5857: CALL_OW 115
5861: GO 5877
// ComAttackUnit ( attackUnit , target2 ) ;
5863: LD_VAR 0 10
5867: PPUSH
5868: LD_VAR 0 23
5872: PPUSH
5873: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
5877: LD_VAR 0 10
5881: PPUSH
5882: CALL_OW 256
5886: PUSH
5887: LD_INT 650
5889: LESS
5890: PUSH
5891: LD_VAR 0 10
5895: PPUSH
5896: CALL_OW 247
5900: PUSH
5901: LD_INT 2
5903: EQUAL
5904: AND
5905: PUSH
5906: LD_VAR 0 10
5910: PPUSH
5911: CALL_OW 263
5915: PUSH
5916: LD_INT 1
5918: EQUAL
5919: AND
5920: IFFALSE 5969
// begin SetTag ( attackUnit , 3 ) ;
5922: LD_VAR 0 10
5926: PPUSH
5927: LD_INT 3
5929: PPUSH
5930: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
5934: LD_VAR 0 10
5938: PPUSH
5939: CALL_OW 313
5943: PUSH
5944: LD_INT 1
5946: ARRAY
5947: PPUSH
5948: LD_INT 3
5950: PPUSH
5951: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
5955: LD_VAR 0 10
5959: PPUSH
5960: LD_VAR 0 5
5964: PPUSH
5965: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
5969: LD_VAR 0 10
5973: PPUSH
5974: LD_VAR 0 5
5978: PPUSH
5979: CALL_OW 308
5983: PUSH
5984: LD_VAR 0 10
5988: PPUSH
5989: CALL_OW 110
5993: PUSH
5994: LD_INT 3
5996: EQUAL
5997: AND
5998: PUSH
5999: LD_VAR 0 10
6003: PPUSH
6004: CALL_OW 313
6008: AND
6009: IFFALSE 6082
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6011: LD_ADDR_VAR 0 14
6015: PUSH
6016: LD_VAR 0 10
6020: PPUSH
6021: CALL_OW 313
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: ST_TO_ADDR
// if not driver in mechanics then
6030: LD_VAR 0 14
6034: PUSH
6035: LD_VAR 0 12
6039: IN
6040: NOT
6041: IFFALSE 6059
// mechanics = mechanics ^ driver ;
6043: LD_ADDR_VAR 0 12
6047: PUSH
6048: LD_VAR 0 12
6052: PUSH
6053: LD_VAR 0 14
6057: ADD
6058: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6059: LD_VAR 0 14
6063: PPUSH
6064: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6068: LD_VAR 0 14
6072: PPUSH
6073: LD_VAR 0 10
6077: PPUSH
6078: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6082: LD_VAR 0 10
6086: PPUSH
6087: CALL_OW 256
6091: PUSH
6092: LD_INT 1000
6094: EQUAL
6095: IFFALSE 6213
// begin SetTag ( attackUnit , 2 ) ;
6097: LD_VAR 0 10
6101: PPUSH
6102: LD_INT 2
6104: PPUSH
6105: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6109: LD_VAR 0 10
6113: PPUSH
6114: CALL_OW 247
6118: PUSH
6119: LD_INT 2
6121: EQUAL
6122: PUSH
6123: LD_VAR 0 10
6127: PPUSH
6128: CALL_OW 263
6132: PUSH
6133: LD_INT 1
6135: EQUAL
6136: AND
6137: PUSH
6138: LD_VAR 0 10
6142: PPUSH
6143: CALL_OW 313
6147: NOT
6148: AND
6149: IFFALSE 6213
// begin SetFuel ( attackUnit , 100 ) ;
6151: LD_VAR 0 10
6155: PPUSH
6156: LD_INT 100
6158: PPUSH
6159: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6163: LD_VAR 0 12
6167: PPUSH
6168: LD_VAR 0 10
6172: PPUSH
6173: CALL_OW 74
6177: PPUSH
6178: LD_VAR 0 10
6182: PPUSH
6183: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
6187: LD_ADDR_VAR 0 12
6191: PUSH
6192: LD_VAR 0 12
6196: PUSH
6197: LD_VAR 0 12
6201: PPUSH
6202: LD_VAR 0 10
6206: PPUSH
6207: CALL_OW 74
6211: DIFF
6212: ST_TO_ADDR
// end ; end ; for unit in mechanics do
6213: LD_ADDR_VAR 0 8
6217: PUSH
6218: LD_VAR 0 12
6222: PUSH
6223: FOR_IN
6224: IFFALSE 6290
// begin if not IsInArea ( unit , retreatArea ) then
6226: LD_VAR 0 8
6230: PPUSH
6231: LD_VAR 0 5
6235: PPUSH
6236: CALL_OW 308
6240: NOT
6241: IFFALSE 6257
// ComMoveToArea ( unit , retreatArea ) ;
6243: LD_VAR 0 8
6247: PPUSH
6248: LD_VAR 0 5
6252: PPUSH
6253: CALL_OW 113
// if GetLives ( unit ) < 250 then
6257: LD_VAR 0 8
6261: PPUSH
6262: CALL_OW 256
6266: PUSH
6267: LD_INT 250
6269: LESS
6270: IFFALSE 6288
// mechanics = mechanics diff unit ;
6272: LD_ADDR_VAR 0 12
6276: PUSH
6277: LD_VAR 0 12
6281: PUSH
6282: LD_VAR 0 8
6286: DIFF
6287: ST_TO_ADDR
// end ;
6288: GO 6223
6290: POP
6291: POP
// end ;
6292: GO 5677
6294: POP
6295: POP
// until not attackUnits ;
6296: LD_VAR 0 9
6300: NOT
6301: IFFALSE 5486
// end ; wait ( 0 0$1 ) ;
6303: LD_INT 35
6305: PPUSH
6306: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
6310: LD_VAR 0 1
6314: PPUSH
6315: LD_INT 50
6317: PUSH
6318: EMPTY
6319: LIST
6320: PPUSH
6321: CALL_OW 72
6325: NOT
6326: IFFALSE 4344
// end ;
6328: LD_VAR 0 6
6332: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
6333: LD_INT 0
6335: PPUSH
6336: PPUSH
6337: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
6338: LD_ADDR_VAR 0 5
6342: PUSH
6343: LD_VAR 0 2
6347: PUSH
6348: LD_INT 1
6350: ARRAY
6351: PUSH
6352: LD_INT 1
6354: ARRAY
6355: PUSH
6356: LD_VAR 0 2
6360: PUSH
6361: LD_INT 1
6363: ARRAY
6364: PUSH
6365: LD_INT 2
6367: ARRAY
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: ST_TO_ADDR
// for i := 2 to path do
6373: LD_ADDR_VAR 0 4
6377: PUSH
6378: DOUBLE
6379: LD_INT 2
6381: DEC
6382: ST_TO_ADDR
6383: LD_VAR 0 2
6387: PUSH
6388: FOR_TO
6389: IFFALSE 6529
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
6391: LD_VAR 0 1
6395: PPUSH
6396: LD_VAR 0 2
6400: PUSH
6401: LD_VAR 0 4
6405: ARRAY
6406: PUSH
6407: LD_INT 1
6409: ARRAY
6410: PPUSH
6411: LD_VAR 0 2
6415: PUSH
6416: LD_VAR 0 4
6420: ARRAY
6421: PUSH
6422: LD_INT 2
6424: ARRAY
6425: PPUSH
6426: CALL_OW 297
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: LD_VAR 0 5
6440: PUSH
6441: LD_INT 1
6443: ARRAY
6444: PPUSH
6445: LD_VAR 0 5
6449: PUSH
6450: LD_INT 2
6452: ARRAY
6453: PPUSH
6454: CALL_OW 297
6458: LESS
6459: IFFALSE 6527
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
6461: LD_ADDR_VAR 0 5
6465: PUSH
6466: LD_VAR 0 5
6470: PPUSH
6471: LD_INT 1
6473: PPUSH
6474: LD_VAR 0 2
6478: PUSH
6479: LD_VAR 0 4
6483: ARRAY
6484: PUSH
6485: LD_INT 1
6487: ARRAY
6488: PPUSH
6489: CALL_OW 1
6493: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
6494: LD_ADDR_VAR 0 5
6498: PUSH
6499: LD_VAR 0 5
6503: PPUSH
6504: LD_INT 2
6506: PPUSH
6507: LD_VAR 0 2
6511: PUSH
6512: LD_VAR 0 4
6516: ARRAY
6517: PUSH
6518: LD_INT 2
6520: ARRAY
6521: PPUSH
6522: CALL_OW 1
6526: ST_TO_ADDR
// end ; end ;
6527: GO 6388
6529: POP
6530: POP
// result = nearPosition ;
6531: LD_ADDR_VAR 0 3
6535: PUSH
6536: LD_VAR 0 5
6540: ST_TO_ADDR
// end ; end_of_file
6541: LD_VAR 0 3
6545: RET
// export function Lose_Burlak ; begin
6546: LD_INT 0
6548: PPUSH
// YouLost ( Burlak ) ;
6549: LD_STRING Burlak
6551: PPUSH
6552: CALL_OW 104
// end ;
6556: LD_VAR 0 1
6560: RET
// export function Lose_Gaydar ; begin
6561: LD_INT 0
6563: PPUSH
// YouLost ( Gaydar ) ;
6564: LD_STRING Gaydar
6566: PPUSH
6567: CALL_OW 104
// end ;
6571: LD_VAR 0 1
6575: RET
// export function Lose_SelfAttack ; begin
6576: LD_INT 0
6578: PPUSH
// YouLost ( SelfAttack ) ;
6579: LD_STRING SelfAttack
6581: PPUSH
6582: CALL_OW 104
// end ;
6586: LD_VAR 0 1
6590: RET
// export function Lose_Arrest ; begin
6591: LD_INT 0
6593: PPUSH
// YouLost ( Arrest ) ;
6594: LD_STRING Arrest
6596: PPUSH
6597: CALL_OW 104
// end ;
6601: LD_VAR 0 1
6605: RET
// export function Lose_ArabBreakthrough ; begin
6606: LD_INT 0
6608: PPUSH
// YouLost ( ArabBreakthrough ) ;
6609: LD_STRING ArabBreakthrough
6611: PPUSH
6612: CALL_OW 104
// end ; end_of_file
6616: LD_VAR 0 1
6620: RET
// export function FinishMission ; begin
6621: LD_INT 0
6623: PPUSH
// SetRewards ;
6624: CALL 6645 0 0
// SavePlayerCharacters ;
6628: CALL 7066 0 0
// SaveGlobalVariables ;
6632: CALL 7294 0 0
// YouWin ;
6636: CALL_OW 103
// end ;
6640: LD_VAR 0 1
6644: RET
// function SetRewards ; var unitsToReward ; begin
6645: LD_INT 0
6647: PPUSH
6648: PPUSH
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
6649: LD_INT 22
6651: PUSH
6652: LD_INT 3
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 21
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: NOT
6678: IFFALSE 6692
// AddMedal ( Dismantle , 1 ) else
6680: LD_STRING Dismantle
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: CALL_OW 101
6690: GO 6703
// AddMedal ( Dismantle , - 1 ) ;
6692: LD_STRING Dismantle
6694: PPUSH
6695: LD_INT 1
6697: NEG
6698: PPUSH
6699: CALL_OW 101
// if killedArabianUnits > 30 then
6703: LD_EXP 20
6707: PUSH
6708: LD_INT 30
6710: GREATER
6711: IFFALSE 6733
// begin AddMedal ( EnemyLosses , 1 ) ;
6713: LD_STRING EnemyLosses
6715: PPUSH
6716: LD_INT 1
6718: PPUSH
6719: CALL_OW 101
// heikeHeavyLosses = true ;
6723: LD_ADDR_EXP 4
6727: PUSH
6728: LD_INT 1
6730: ST_TO_ADDR
// end else
6731: GO 6744
// AddMedal ( EnemyLosses , - 1 ) ;
6733: LD_STRING EnemyLosses
6735: PPUSH
6736: LD_INT 1
6738: NEG
6739: PPUSH
6740: CALL_OW 101
// if not lostUnits then
6744: LD_EXP 22
6748: NOT
6749: IFFALSE 6763
// AddMedal ( lostUnits , 1 ) else
6751: LD_STRING lostUnits
6753: PPUSH
6754: LD_INT 1
6756: PPUSH
6757: CALL_OW 101
6761: GO 6774
// AddMedal ( lostUnits , - 1 ) ;
6763: LD_STRING lostUnits
6765: PPUSH
6766: LD_INT 1
6768: NEG
6769: PPUSH
6770: CALL_OW 101
// GiveMedals ( Main ) ;
6774: LD_STRING Main
6776: PPUSH
6777: CALL_OW 102
// unitsToReward = [ ] ;
6781: LD_ADDR_VAR 0 2
6785: PUSH
6786: EMPTY
6787: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
6788: LD_EXP 38
6792: PPUSH
6793: CALL_OW 255
6797: PUSH
6798: LD_INT 3
6800: EQUAL
6801: IFFALSE 6819
// unitsToReward = unitsToReward ^ Burlak ;
6803: LD_ADDR_VAR 0 2
6807: PUSH
6808: LD_VAR 0 2
6812: PUSH
6813: LD_EXP 38
6817: ADD
6818: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
6819: LD_EXP 39
6823: PPUSH
6824: CALL_OW 255
6828: PUSH
6829: LD_INT 3
6831: EQUAL
6832: IFFALSE 6850
// unitsToReward = unitsToReward ^ Gnyevko ;
6834: LD_ADDR_VAR 0 2
6838: PUSH
6839: LD_VAR 0 2
6843: PUSH
6844: LD_EXP 39
6848: ADD
6849: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
6850: LD_EXP 40
6854: PPUSH
6855: CALL_OW 255
6859: PUSH
6860: LD_INT 3
6862: EQUAL
6863: IFFALSE 6881
// unitsToReward = unitsToReward ^ Kirilenkova ;
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_VAR 0 2
6874: PUSH
6875: LD_EXP 40
6879: ADD
6880: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
6881: LD_EXP 41
6885: PPUSH
6886: CALL_OW 255
6890: PUSH
6891: LD_INT 3
6893: EQUAL
6894: IFFALSE 6912
// unitsToReward = unitsToReward ^ Kovalyuk ;
6896: LD_ADDR_VAR 0 2
6900: PUSH
6901: LD_VAR 0 2
6905: PUSH
6906: LD_EXP 41
6910: ADD
6911: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
6912: LD_EXP 42
6916: PPUSH
6917: CALL_OW 255
6921: PUSH
6922: LD_INT 3
6924: EQUAL
6925: IFFALSE 6943
// unitsToReward = unitsToReward ^ Belkov ;
6927: LD_ADDR_VAR 0 2
6931: PUSH
6932: LD_VAR 0 2
6936: PUSH
6937: LD_EXP 42
6941: ADD
6942: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
6943: LD_EXP 43
6947: PPUSH
6948: CALL_OW 255
6952: PUSH
6953: LD_INT 3
6955: EQUAL
6956: IFFALSE 6974
// unitsToReward = unitsToReward ^ Belkov2 ;
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: LD_VAR 0 2
6967: PUSH
6968: LD_EXP 43
6972: ADD
6973: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
6974: LD_EXP 44
6978: PPUSH
6979: CALL_OW 255
6983: PUSH
6984: LD_INT 3
6986: EQUAL
6987: IFFALSE 7005
// unitsToReward = unitsToReward ^ Scholtze ;
6989: LD_ADDR_VAR 0 2
6993: PUSH
6994: LD_VAR 0 2
6998: PUSH
6999: LD_EXP 44
7003: ADD
7004: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
7005: LD_EXP 45
7009: PPUSH
7010: CALL_OW 255
7014: PUSH
7015: LD_INT 3
7017: EQUAL
7018: IFFALSE 7036
// unitsToReward = unitsToReward ^ Kuzmov ;
7020: LD_ADDR_VAR 0 2
7024: PUSH
7025: LD_VAR 0 2
7029: PUSH
7030: LD_EXP 45
7034: ADD
7035: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
7036: LD_ADDR_VAR 0 2
7040: PUSH
7041: LD_VAR 0 2
7045: PUSH
7046: LD_EXP 55
7050: ADD
7051: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: CALL_OW 43
// end ;
7061: LD_VAR 0 1
7065: RET
// function SavePlayerCharacters ; var othersYour ; begin
7066: LD_INT 0
7068: PPUSH
7069: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
7070: LD_EXP 38
7074: PPUSH
7075: LD_STRING 04_Burlak
7077: PPUSH
7078: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
7082: LD_EXP 39
7086: PPUSH
7087: CALL_OW 255
7091: PUSH
7092: LD_INT 3
7094: EQUAL
7095: IFFALSE 7109
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
7097: LD_EXP 39
7101: PPUSH
7102: LD_STRING 04_Gnyevko
7104: PPUSH
7105: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
7109: LD_EXP 41
7113: PPUSH
7114: CALL_OW 255
7118: PUSH
7119: LD_INT 3
7121: EQUAL
7122: IFFALSE 7136
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
7124: LD_EXP 41
7128: PPUSH
7129: LD_STRING 04_Kovalyuk
7131: PPUSH
7132: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
7136: LD_EXP 40
7140: PPUSH
7141: CALL_OW 255
7145: PUSH
7146: LD_INT 3
7148: EQUAL
7149: IFFALSE 7163
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
7151: LD_EXP 40
7155: PPUSH
7156: LD_STRING 04_Kirilenkova
7158: PPUSH
7159: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
7163: LD_EXP 44
7167: PPUSH
7168: CALL_OW 255
7172: PUSH
7173: LD_INT 3
7175: EQUAL
7176: IFFALSE 7190
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
7178: LD_EXP 44
7182: PPUSH
7183: LD_STRING 04_Scholtze
7185: PPUSH
7186: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
7190: LD_EXP 42
7194: PPUSH
7195: CALL_OW 255
7199: PUSH
7200: LD_INT 3
7202: EQUAL
7203: IFFALSE 7217
// SaveCharacters ( Belkov , 04_Belkov ) ;
7205: LD_EXP 42
7209: PPUSH
7210: LD_STRING 04_Belkov
7212: PPUSH
7213: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
7217: LD_EXP 43
7221: PPUSH
7222: CALL_OW 255
7226: PUSH
7227: LD_INT 3
7229: EQUAL
7230: IFFALSE 7244
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
7232: LD_EXP 43
7236: PPUSH
7237: LD_STRING 04_Belkov2
7239: PPUSH
7240: CALL_OW 38
// if IsOK ( Kuzmov ) then
7244: LD_EXP 45
7248: PPUSH
7249: CALL_OW 302
7253: IFFALSE 7267
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
7255: LD_EXP 45
7259: PPUSH
7260: LD_STRING 04_Kuzmov
7262: PPUSH
7263: CALL_OW 38
// othersYour = randomsToSave ;
7267: LD_ADDR_VAR 0 2
7271: PUSH
7272: LD_EXP 55
7276: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
7277: LD_EXP 55
7281: PPUSH
7282: LD_STRING 04_other_survivors
7284: PPUSH
7285: CALL_OW 38
// end ;
7289: LD_VAR 0 1
7293: RET
// function SaveGlobalVariables ; begin
7294: LD_INT 0
7296: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
7297: LD_EXP 4
7301: PPUSH
7302: LD_STRING 04_HeikeHeavyLosses_1
7304: PPUSH
7305: CALL_OW 39
// end ; end_of_file
7309: LD_VAR 0 1
7313: RET
// on BuildingStarted ( building , unit ) do begin if GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
7314: LD_VAR 0 1
7318: PPUSH
7319: CALL_OW 266
7323: PUSH
7324: LD_INT 0
7326: EQUAL
7327: PUSH
7328: LD_VAR 0 1
7332: PPUSH
7333: LD_INT 5
7335: PPUSH
7336: CALL_OW 308
7340: NOT
7341: AND
7342: IFFALSE 7353
// Dial_DepotInWrongPlace ( building ) ;
7344: LD_VAR 0 1
7348: PPUSH
7349: CALL 9276 0 1
// end ;
7353: PPOPN 2
7355: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
7356: LD_VAR 0 1
7360: PPUSH
7361: CALL_OW 266
7365: PUSH
7366: LD_INT 0
7368: EQUAL
7369: PUSH
7370: LD_VAR 0 1
7374: PPUSH
7375: LD_INT 5
7377: PPUSH
7378: CALL_OW 308
7382: AND
7383: PUSH
7384: LD_EXP 7
7388: NOT
7389: AND
7390: PUSH
7391: LD_EXP 8
7395: NOT
7396: AND
7397: IFFALSE 7423
// begin namedBase = true ;
7399: LD_ADDR_EXP 8
7403: PUSH
7404: LD_INT 1
7406: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
7407: LD_VAR 0 1
7411: PPUSH
7412: LD_STRING chuikov
7414: PPUSH
7415: CALL_OW 500
// Dial_FinishDepot ;
7419: CALL 9420 0 0
// end ; end ;
7423: PPOPN 1
7425: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 266
7435: PUSH
7436: LD_INT 7
7438: EQUAL
7439: PUSH
7440: LD_EXP 14
7444: NOT
7445: AND
7446: IFFALSE 7452
// Dial_LabUpgraded ;
7448: CALL 9736 0 0
// end ;
7452: PPOPN 1
7454: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
7455: LD_VAR 0 1
7459: PUSH
7460: LD_INT 3
7462: EQUAL
7463: PUSH
7464: LD_VAR 0 2
7468: PUSH
7469: LD_INT 2
7471: EQUAL
7472: AND
7473: PUSH
7474: LD_VAR 0 1
7478: PUSH
7479: LD_INT 2
7481: EQUAL
7482: PUSH
7483: LD_VAR 0 2
7487: PUSH
7488: LD_INT 3
7490: EQUAL
7491: AND
7492: OR
7493: IFFALSE 7515
// begin if dial_contactBlock then
7495: LD_EXP 15
7499: IFFALSE 7503
// exit ;
7501: GO 7559
// dial_contactBlock = true ;
7503: LD_ADDR_EXP 15
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// Dial_Contact ;
7511: CALL 11503 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
7515: LD_VAR 0 1
7519: PUSH
7520: LD_INT 3
7522: EQUAL
7523: PUSH
7524: LD_VAR 0 2
7528: PUSH
7529: LD_INT 6
7531: EQUAL
7532: AND
7533: PUSH
7534: LD_VAR 0 1
7538: PUSH
7539: LD_INT 6
7541: EQUAL
7542: PUSH
7543: LD_VAR 0 2
7547: PUSH
7548: LD_INT 3
7550: EQUAL
7551: AND
7552: OR
7553: IFFALSE 7559
// Lose_SelfAttack ;
7555: CALL 6576 0 0
// end ;
7559: PPOPN 2
7561: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
7562: LD_VAR 0 1
7566: PUSH
7567: LD_EXP 38
7571: EQUAL
7572: IFFALSE 7578
// Lose_Burlak ;
7574: CALL 6546 0 0
// if unit = Gaydar then
7578: LD_VAR 0 1
7582: PUSH
7583: LD_EXP 50
7587: EQUAL
7588: IFFALSE 7594
// Lose_Gaydar ;
7590: CALL 6561 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 255
7603: PUSH
7604: LD_INT 3
7606: EQUAL
7607: PUSH
7608: LD_VAR 0 1
7612: PPUSH
7613: CALL_OW 247
7617: PUSH
7618: LD_INT 1
7620: EQUAL
7621: AND
7622: IFFALSE 7638
// lostUnits = lostUnits + 1 ;
7624: LD_ADDR_EXP 22
7628: PUSH
7629: LD_EXP 22
7633: PUSH
7634: LD_INT 1
7636: PLUS
7637: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
7638: LD_VAR 0 1
7642: PPUSH
7643: CALL_OW 255
7647: PUSH
7648: LD_INT 2
7650: EQUAL
7651: PUSH
7652: LD_VAR 0 1
7656: PPUSH
7657: CALL_OW 247
7661: PUSH
7662: LD_INT 1
7664: EQUAL
7665: AND
7666: PUSH
7667: LD_EXP 50
7671: PPUSH
7672: CALL_OW 305
7676: NOT
7677: AND
7678: IFFALSE 7694
// killedArabianUnits = killedArabianUnits + 1 ;
7680: LD_ADDR_EXP 20
7684: PUSH
7685: LD_EXP 20
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: ST_TO_ADDR
// end ; end_of_file
7694: PPOPN 1
7696: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
7697: LD_INT 0
7699: PPUSH
7700: PPUSH
// if exist_mode then
7701: LD_VAR 0 2
7705: IFFALSE 7730
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7707: LD_ADDR_VAR 0 5
7711: PUSH
7712: LD_EXP 27
7716: PUSH
7717: LD_VAR 0 1
7721: STR
7722: PPUSH
7723: CALL_OW 34
7727: ST_TO_ADDR
7728: GO 7745
// unit := NewCharacter ( ident ) ;
7730: LD_ADDR_VAR 0 5
7734: PUSH
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 25
7744: ST_TO_ADDR
// if class then
7745: LD_VAR 0 3
7749: IFFALSE 7765
// SetClass ( unit , class ) ;
7751: LD_VAR 0 5
7755: PPUSH
7756: LD_VAR 0 3
7760: PPUSH
7761: CALL_OW 336
// result := unit ;
7765: LD_ADDR_VAR 0 4
7769: PUSH
7770: LD_VAR 0 5
7774: ST_TO_ADDR
// end ;
7775: LD_VAR 0 4
7779: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
7780: LD_INT 0
7782: PPUSH
7783: PPUSH
// for unit in units do
7784: LD_ADDR_VAR 0 5
7788: PUSH
7789: LD_VAR 0 1
7793: PUSH
7794: FOR_IN
7795: IFFALSE 7818
// PlaceUnitArea ( unit , area , spawnMode ) ;
7797: LD_VAR 0 5
7801: PPUSH
7802: LD_VAR 0 2
7806: PPUSH
7807: LD_VAR 0 3
7811: PPUSH
7812: CALL_OW 49
7816: GO 7794
7818: POP
7819: POP
// end ;
7820: LD_VAR 0 4
7824: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7825: LD_INT 0
7827: PPUSH
7828: PPUSH
7829: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: LD_VAR 0 1
7839: PUSH
7840: LD_EXP 38
7844: PUSH
7845: LD_EXP 39
7849: PUSH
7850: LD_EXP 42
7854: PUSH
7855: LD_EXP 43
7859: PUSH
7860: LD_EXP 40
7864: PUSH
7865: LD_EXP 41
7869: PUSH
7870: LD_EXP 44
7874: PUSH
7875: LD_EXP 45
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: DIFF
7890: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7891: LD_ADDR_VAR 0 7
7895: PUSH
7896: LD_VAR 0 1
7900: PUSH
7901: LD_INT 1
7903: PPUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 12
7913: ARRAY
7914: ST_TO_ADDR
// if radio then
7915: LD_VAR 0 4
7919: IFFALSE 7968
// begin if GetSex ( speaker ) = sex_male then
7921: LD_VAR 0 7
7925: PPUSH
7926: CALL_OW 258
7930: PUSH
7931: LD_INT 1
7933: EQUAL
7934: IFFALSE 7952
// SayRadio ( speaker , dialogMID ) else
7936: LD_VAR 0 7
7940: PPUSH
7941: LD_VAR 0 2
7945: PPUSH
7946: CALL_OW 94
7950: GO 7966
// SayRadio ( speaker , dialogFID ) ;
7952: LD_VAR 0 7
7956: PPUSH
7957: LD_VAR 0 3
7961: PPUSH
7962: CALL_OW 94
// end else
7966: GO 8013
// begin if GetSex ( speaker ) = sex_male then
7968: LD_VAR 0 7
7972: PPUSH
7973: CALL_OW 258
7977: PUSH
7978: LD_INT 1
7980: EQUAL
7981: IFFALSE 7999
// Say ( speaker , dialogMID ) else
7983: LD_VAR 0 7
7987: PPUSH
7988: LD_VAR 0 2
7992: PPUSH
7993: CALL_OW 88
7997: GO 8013
// Say ( speaker , dialogFID ) ;
7999: LD_VAR 0 7
8003: PPUSH
8004: LD_VAR 0 3
8008: PPUSH
8009: CALL_OW 88
// end ; result := speaker ;
8013: LD_ADDR_VAR 0 5
8017: PUSH
8018: LD_VAR 0 7
8022: ST_TO_ADDR
// end ;
8023: LD_VAR 0 5
8027: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8028: LD_INT 0
8030: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8031: LD_VAR 0 1
8035: PPUSH
8036: CALL_OW 255
8040: PUSH
8041: LD_VAR 0 3
8045: EQUAL
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: CALL_OW 302
8056: AND
8057: IFFALSE 8079
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8059: LD_VAR 0 1
8063: PPUSH
8064: LD_EXP 26
8068: PUSH
8069: LD_VAR 0 2
8073: STR
8074: PPUSH
8075: CALL_OW 38
// end ;
8079: LD_VAR 0 4
8083: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8084: LD_INT 0
8086: PPUSH
8087: PPUSH
8088: PPUSH
// resultCharactersToSave = [ ] ;
8089: LD_ADDR_VAR 0 6
8093: PUSH
8094: EMPTY
8095: ST_TO_ADDR
// for unit in characters do
8096: LD_ADDR_VAR 0 5
8100: PUSH
8101: LD_VAR 0 1
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8155
// if GetSide ( unit ) = side and IsOK ( unit ) then
8109: LD_VAR 0 5
8113: PPUSH
8114: CALL_OW 255
8118: PUSH
8119: LD_VAR 0 3
8123: EQUAL
8124: PUSH
8125: LD_VAR 0 5
8129: PPUSH
8130: CALL_OW 302
8134: AND
8135: IFFALSE 8153
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8137: LD_ADDR_VAR 0 6
8141: PUSH
8142: LD_VAR 0 6
8146: PUSH
8147: LD_VAR 0 5
8151: ADD
8152: ST_TO_ADDR
8153: GO 8106
8155: POP
8156: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8157: LD_VAR 0 6
8161: PPUSH
8162: LD_EXP 26
8166: PUSH
8167: LD_VAR 0 2
8171: STR
8172: PPUSH
8173: CALL_OW 38
// end ;
8177: LD_VAR 0 4
8181: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
8182: LD_INT 0
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
8188: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8189: LD_ADDR_VAR 0 3
8193: PUSH
8194: LD_INT 22
8196: PUSH
8197: LD_INT 3
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 21
8206: PUSH
8207: LD_INT 1
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 50
8216: PUSH
8217: EMPTY
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: PPUSH
8225: CALL_OW 69
8229: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
8230: LD_ADDR_VAR 0 3
8234: PUSH
8235: LD_VAR 0 3
8239: PUSH
8240: LD_EXP 38
8244: DIFF
8245: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
8246: LD_ADDR_VAR 0 3
8250: PUSH
8251: LD_VAR 0 3
8255: PUSH
8256: LD_EXP 48
8260: DIFF
8261: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
8262: LD_ADDR_VAR 0 4
8266: PUSH
8267: LD_STRING text
8269: PPUSH
8270: LD_INT 8
8272: PPUSH
8273: LD_INT 8
8275: PPUSH
8276: LD_INT -5
8278: PUSH
8279: LD_EXP 38
8283: PUSH
8284: LD_INT -6
8286: PUSH
8287: LD_INT -2
8289: PUSH
8290: LD_INT -3
8292: PUSH
8293: LD_INT -5
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: LD_VAR 0 3
8308: ADD
8309: PUSH
8310: LD_INT -6
8312: PUSH
8313: LD_INT -4
8315: PUSH
8316: LD_EXP 48
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: LIST
8325: ADD
8326: PPUSH
8327: LD_INT 1
8329: PUSH
8330: LD_INT 3
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 4
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 42
8356: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
8357: LD_VAR 0 3
8361: PPUSH
8362: LD_INT 6
8364: PPUSH
8365: CALL_OW 235
// SetSide ( Popov , 6 ) ;
8369: LD_EXP 48
8373: PPUSH
8374: LD_INT 6
8376: PPUSH
8377: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
8381: LD_VAR 0 4
8385: PPUSH
8386: LD_INT 3
8388: PPUSH
8389: CALL_OW 235
// burlakTeam = selectedPeople ;
8393: LD_ADDR_EXP 51
8397: PUSH
8398: LD_VAR 0 4
8402: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
8403: LD_ADDR_EXP 52
8407: PUSH
8408: LD_INT 22
8410: PUSH
8411: LD_INT 6
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 21
8420: PUSH
8421: LD_INT 1
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PPUSH
8432: CALL_OW 69
8436: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
8437: LD_ADDR_EXP 52
8441: PUSH
8442: LD_EXP 52
8446: PUSH
8447: LD_EXP 45
8451: DIFF
8452: ST_TO_ADDR
// if not Gnyevko in selectedPeople then
8453: LD_EXP 39
8457: PUSH
8458: LD_VAR 0 4
8462: IN
8463: NOT
8464: IFFALSE 8481
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
8466: LD_EXP 39
8470: PPUSH
8471: LD_STRING Gnyevko
8473: PPUSH
8474: LD_INT 6
8476: PPUSH
8477: CALL 8028 0 3
// if not Kovalyuk in selectedPeople then
8481: LD_EXP 41
8485: PUSH
8486: LD_VAR 0 4
8490: IN
8491: NOT
8492: IFFALSE 8509
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
8494: LD_EXP 41
8498: PPUSH
8499: LD_STRING Kovalyuk
8501: PPUSH
8502: LD_INT 6
8504: PPUSH
8505: CALL 8028 0 3
// if not Kirilenkova in selectedPeople then
8509: LD_EXP 40
8513: PUSH
8514: LD_VAR 0 4
8518: IN
8519: NOT
8520: IFFALSE 8537
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
8522: LD_EXP 40
8526: PPUSH
8527: LD_STRING Kirilenkova
8529: PPUSH
8530: LD_INT 6
8532: PPUSH
8533: CALL 8028 0 3
// if not Scholtze in selectedPeople then
8537: LD_EXP 44
8541: PUSH
8542: LD_VAR 0 4
8546: IN
8547: NOT
8548: IFFALSE 8565
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
8550: LD_EXP 44
8554: PPUSH
8555: LD_STRING Scholtze
8557: PPUSH
8558: LD_INT 6
8560: PPUSH
8561: CALL 8028 0 3
// if not Belkov in selectedPeople then
8565: LD_EXP 42
8569: PUSH
8570: LD_VAR 0 4
8574: IN
8575: NOT
8576: IFFALSE 8593
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
8578: LD_EXP 42
8582: PPUSH
8583: LD_STRING Belkov
8585: PPUSH
8586: LD_INT 6
8588: PPUSH
8589: CALL 8028 0 3
// if not Belkov2 in selectedPeople then
8593: LD_EXP 43
8597: PUSH
8598: LD_VAR 0 4
8602: IN
8603: NOT
8604: IFFALSE 8621
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
8606: LD_EXP 43
8610: PPUSH
8611: LD_STRING Belkov2
8613: PPUSH
8614: LD_INT 6
8616: PPUSH
8617: CALL 8028 0 3
// others = popovTeam diff Popov ;
8621: LD_ADDR_VAR 0 5
8625: PUSH
8626: LD_EXP 52
8630: PUSH
8631: LD_EXP 48
8635: DIFF
8636: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
8637: LD_VAR 0 5
8641: PPUSH
8642: LD_STRING other_survivors_with_popov
8644: PPUSH
8645: LD_INT 6
8647: PPUSH
8648: CALL 8084 0 3
// end ; end_of_file
8652: LD_VAR 0 1
8656: RET
// export function MissionIntro ; var i , unit ; begin
8657: LD_INT 0
8659: PPUSH
8660: PPUSH
8661: PPUSH
// CenterNowOnUnits ( Burlak ) ;
8662: LD_EXP 38
8666: PPUSH
8667: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
8671: LD_EXP 53
8675: PPUSH
8676: LD_STRING D1-RSol1-1
8678: PPUSH
8679: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
8683: LD_EXP 49
8687: PPUSH
8688: LD_STRING D1-Pla-1
8690: PPUSH
8691: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
8695: LD_EXP 38
8699: PPUSH
8700: LD_STRING D1-Bur-1
8702: PPUSH
8703: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
8707: LD_EXP 49
8711: PPUSH
8712: LD_STRING D1-Pla-2
8714: PPUSH
8715: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
8719: LD_EXP 38
8723: PPUSH
8724: LD_STRING D1-Bur-2
8726: PPUSH
8727: CALL_OW 88
// SelectCharacters ;
8731: CALL 8182 0 0
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8739: LD_STRING M1
8741: PPUSH
8742: CALL_OW 337
// SaveForQuickRestart ;
8746: CALL_OW 22
// for unit in popovTeam do
8750: LD_ADDR_VAR 0 3
8754: PUSH
8755: LD_EXP 52
8759: PUSH
8760: FOR_IN
8761: IFFALSE 8833
// begin for i := 3 to russianCargoPath1 do
8763: LD_ADDR_VAR 0 2
8767: PUSH
8768: DOUBLE
8769: LD_INT 3
8771: DEC
8772: ST_TO_ADDR
8773: LD_EXP 31
8777: PUSH
8778: FOR_TO
8779: IFFALSE 8822
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8781: LD_VAR 0 3
8785: PPUSH
8786: LD_EXP 31
8790: PUSH
8791: LD_VAR 0 2
8795: ARRAY
8796: PUSH
8797: LD_INT 1
8799: ARRAY
8800: PPUSH
8801: LD_EXP 31
8805: PUSH
8806: LD_VAR 0 2
8810: ARRAY
8811: PUSH
8812: LD_INT 2
8814: ARRAY
8815: PPUSH
8816: CALL_OW 171
8820: GO 8778
8822: POP
8823: POP
// wait ( 0 0$01 ) ;
8824: LD_INT 35
8826: PPUSH
8827: CALL_OW 67
// end ;
8831: GO 8760
8833: POP
8834: POP
// end ;
8835: LD_VAR 0 1
8839: RET
// every 0 0$1 do var unit , driver ;
8840: GO 8842
8842: DISABLE
8843: LD_INT 0
8845: PPUSH
8846: PPUSH
// begin enable ;
8847: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
8848: LD_INT 4
8850: PPUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 6
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PPUSH
8861: CALL_OW 70
8865: NOT
8866: PUSH
8867: LD_INT 4
8869: PPUSH
8870: LD_INT 22
8872: PUSH
8873: LD_INT 3
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 2
8882: PUSH
8883: LD_INT 21
8885: PUSH
8886: LD_INT 1
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 21
8895: PUSH
8896: LD_INT 2
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 70
8916: NOT
8917: AND
8918: IFFALSE 8922
// exit ;
8920: GO 9273
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
8922: LD_ADDR_VAR 0 1
8926: PUSH
8927: LD_INT 4
8929: PPUSH
8930: LD_INT 22
8932: PUSH
8933: LD_INT 6
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 70
8944: PUSH
8945: FOR_IN
8946: IFFALSE 9001
// begin RemoveUnit ( unit ) ;
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
8957: LD_VAR 0 1
8961: PUSH
8962: LD_EXP 52
8966: IN
8967: NOT
8968: PUSH
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 264
8978: PUSH
8979: LD_INT 51
8981: EQUAL
8982: AND
8983: IFFALSE 8999
// evacuatedCargos = evacuatedCargos + 1 ;
8985: LD_ADDR_EXP 9
8989: PUSH
8990: LD_EXP 9
8994: PUSH
8995: LD_INT 1
8997: PLUS
8998: ST_TO_ADDR
// end ;
8999: GO 8945
9001: POP
9002: POP
// if canExitMap then
9003: LD_EXP 5
9007: IFFALSE 9273
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9009: LD_ADDR_VAR 0 1
9013: PUSH
9014: LD_INT 4
9016: PPUSH
9017: LD_INT 22
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 2
9029: PUSH
9030: LD_INT 21
9032: PUSH
9033: LD_INT 1
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 21
9042: PUSH
9043: LD_INT 2
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PPUSH
9059: CALL_OW 70
9063: PUSH
9064: FOR_IN
9065: IFFALSE 9271
// begin if GetType ( unit ) = unit_vehicle then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 247
9076: PUSH
9077: LD_INT 2
9079: EQUAL
9080: IFFALSE 9180
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
9082: LD_VAR 0 1
9086: PPUSH
9087: CALL_OW 313
9091: PUSH
9092: LD_INT 1
9094: ARRAY
9095: PUSH
9096: LD_EXP 38
9100: PUSH
9101: LD_EXP 39
9105: PUSH
9106: LD_EXP 40
9110: PUSH
9111: LD_EXP 41
9115: PUSH
9116: LD_EXP 42
9120: PUSH
9121: LD_EXP 43
9125: PUSH
9126: LD_EXP 44
9130: PUSH
9131: LD_EXP 45
9135: PUSH
9136: LD_EXP 50
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: IN
9152: NOT
9153: IFFALSE 9180
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
9155: LD_ADDR_EXP 55
9159: PUSH
9160: LD_EXP 55
9164: PUSH
9165: LD_VAR 0 1
9169: PPUSH
9170: CALL_OW 313
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: ADD
9179: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
9180: LD_VAR 0 1
9184: PUSH
9185: LD_EXP 38
9189: PUSH
9190: LD_EXP 39
9194: PUSH
9195: LD_EXP 40
9199: PUSH
9200: LD_EXP 41
9204: PUSH
9205: LD_EXP 42
9209: PUSH
9210: LD_EXP 43
9214: PUSH
9215: LD_EXP 44
9219: PUSH
9220: LD_EXP 45
9224: PUSH
9225: LD_EXP 50
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: IN
9241: NOT
9242: IFFALSE 9260
// randomsToSave = randomsToSave ^ unit ;
9244: LD_ADDR_EXP 55
9248: PUSH
9249: LD_EXP 55
9253: PUSH
9254: LD_VAR 0 1
9258: ADD
9259: ST_TO_ADDR
// RemoveUnit ( unit ) ;
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 64
// end ;
9269: GO 9064
9271: POP
9272: POP
// end ;
9273: PPOPN 2
9275: END
// export function Dial_DepotInWrongPlace ( building ) ; begin
9276: LD_INT 0
9278: PPUSH
// CenterNowOnUnits ( building ) ;
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 87
// DialogueOn ;
9288: CALL_OW 6
// SayRadio ( Platonov , D2a-Pla-1 ) ;
9292: LD_EXP 49
9296: PPUSH
9297: LD_STRING D2a-Pla-1
9299: PPUSH
9300: CALL_OW 94
// DialogueOff ;
9304: CALL_OW 7
// RemoveUnit ( building ) ;
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 64
// end ;
9317: LD_VAR 0 2
9321: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
9322: LD_EXP 45
9326: PPUSH
9327: CALL_OW 255
9331: PUSH
9332: LD_INT 6
9334: EQUAL
9335: IFFALSE 9417
9337: GO 9339
9339: DISABLE
9340: LD_INT 0
9342: PPUSH
// begin enable ;
9343: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
9344: LD_ADDR_VAR 0 1
9348: PUSH
9349: LD_INT 22
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 21
9361: PUSH
9362: LD_INT 1
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 69
9377: PUSH
9378: FOR_IN
9379: IFFALSE 9415
// if GetDistUnits ( unit , Kuzmov ) < 9 then
9381: LD_VAR 0 1
9385: PPUSH
9386: LD_EXP 45
9390: PPUSH
9391: CALL_OW 296
9395: PUSH
9396: LD_INT 9
9398: LESS
9399: IFFALSE 9413
// SetSide ( Kuzmov , 3 ) ;
9401: LD_EXP 45
9405: PPUSH
9406: LD_INT 3
9408: PPUSH
9409: CALL_OW 235
9413: GO 9378
9415: POP
9416: POP
// end ;
9417: PPOPN 1
9419: END
// export function Dial_FinishDepot ; var i ; begin
9420: LD_INT 0
9422: PPUSH
9423: PPUSH
// startEvacuation = true ;
9424: LD_ADDR_EXP 7
9428: PUSH
9429: LD_INT 1
9431: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
9432: LD_STRING MOutBuild
9434: PPUSH
9435: CALL_OW 337
// uc_side = 6 ;
9439: LD_ADDR_OWVAR 20
9443: PUSH
9444: LD_INT 6
9446: ST_TO_ADDR
// uc_nation = 3 ;
9447: LD_ADDR_OWVAR 21
9451: PUSH
9452: LD_INT 3
9454: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
9455: LD_ADDR_OWVAR 37
9459: PUSH
9460: LD_INT 21
9462: ST_TO_ADDR
// vc_control = control_manual ;
9463: LD_ADDR_OWVAR 38
9467: PUSH
9468: LD_INT 1
9470: ST_TO_ADDR
// vc_engine = engine_combustion ;
9471: LD_ADDR_OWVAR 39
9475: PUSH
9476: LD_INT 1
9478: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
9479: LD_ADDR_OWVAR 40
9483: PUSH
9484: LD_INT 51
9486: ST_TO_ADDR
// firstCargo = CreateVehicle ;
9487: LD_ADDR_EXP 54
9491: PUSH
9492: CALL_OW 45
9496: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
9497: LD_EXP 54
9501: PPUSH
9502: LD_INT 3
9504: PPUSH
9505: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
9509: LD_EXP 54
9513: PPUSH
9514: LD_INT 3
9516: PPUSH
9517: LD_INT 0
9519: PPUSH
9520: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
9524: LD_INT 1
9526: PPUSH
9527: LD_INT 3
9529: PPUSH
9530: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
9534: CALL_OW 44
9538: PPUSH
9539: LD_EXP 54
9543: PPUSH
9544: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
9548: LD_EXP 54
9552: PPUSH
9553: LD_INT 1
9555: PPUSH
9556: LD_INT 100
9558: PPUSH
9559: CALL_OW 291
// for i := 1 to 19 do
9563: LD_ADDR_VAR 0 2
9567: PUSH
9568: DOUBLE
9569: LD_INT 1
9571: DEC
9572: ST_TO_ADDR
9573: LD_INT 19
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9620
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
9579: LD_EXP 54
9583: PPUSH
9584: LD_EXP 31
9588: PUSH
9589: LD_VAR 0 2
9593: ARRAY
9594: PUSH
9595: LD_INT 1
9597: ARRAY
9598: PPUSH
9599: LD_EXP 31
9603: PUSH
9604: LD_VAR 0 2
9608: ARRAY
9609: PUSH
9610: LD_INT 2
9612: ARRAY
9613: PPUSH
9614: CALL_OW 171
9618: GO 9576
9620: POP
9621: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
9622: LD_EXP 54
9626: PPUSH
9627: LD_INT 105
9629: PPUSH
9630: LD_INT 123
9632: PPUSH
9633: CALL_OW 171
// AddComUnload ( firstCargo ) ;
9637: LD_EXP 54
9641: PPUSH
9642: CALL_OW 219
// for i := 21 to russianCargoPath1 do
9646: LD_ADDR_VAR 0 2
9650: PUSH
9651: DOUBLE
9652: LD_INT 21
9654: DEC
9655: ST_TO_ADDR
9656: LD_EXP 31
9660: PUSH
9661: FOR_TO
9662: IFFALSE 9705
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
9664: LD_EXP 54
9668: PPUSH
9669: LD_EXP 31
9673: PUSH
9674: LD_VAR 0 2
9678: ARRAY
9679: PUSH
9680: LD_INT 1
9682: ARRAY
9683: PPUSH
9684: LD_EXP 31
9688: PUSH
9689: LD_VAR 0 2
9693: ARRAY
9694: PUSH
9695: LD_INT 2
9697: ARRAY
9698: PPUSH
9699: CALL_OW 171
9703: GO 9661
9705: POP
9706: POP
// Say ( Burlak , D2-Bur-1 ) ;
9707: LD_EXP 38
9711: PPUSH
9712: LD_STRING D2-Bur-1
9714: PPUSH
9715: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
9719: LD_EXP 49
9723: PPUSH
9724: LD_STRING D2-Pla-1
9726: PPUSH
9727: CALL_OW 94
// end ;
9731: LD_VAR 0 1
9735: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
9736: LD_INT 0
9738: PPUSH
9739: PPUSH
// dial_labUpgradedBlock = true ;
9740: LD_ADDR_EXP 14
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
9748: LD_ADDR_VAR 0 2
9752: PUSH
9753: LD_INT 22
9755: PUSH
9756: LD_INT 3
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 21
9765: PUSH
9766: LD_INT 1
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 26
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 4
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 69
9803: PUSH
9804: LD_EXP 38
9808: PUSH
9809: LD_EXP 39
9813: PUSH
9814: LD_EXP 40
9818: PUSH
9819: LD_EXP 41
9823: PUSH
9824: LD_EXP 42
9828: PUSH
9829: LD_EXP 43
9833: PUSH
9834: LD_EXP 44
9838: PUSH
9839: LD_EXP 45
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: DIFF
9854: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
9855: LD_EXP 44
9859: PPUSH
9860: CALL_OW 302
9864: PUSH
9865: LD_EXP 44
9869: PPUSH
9870: CALL_OW 255
9874: PUSH
9875: LD_INT 3
9877: EQUAL
9878: AND
9879: IFFALSE 9907
// begin Say ( Scholtze , D5-Sch-1 ) ;
9881: LD_EXP 44
9885: PPUSH
9886: LD_STRING D5-Sch-1
9888: PPUSH
9889: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
9893: LD_EXP 38
9897: PPUSH
9898: LD_STRING D5-Bur-1
9900: PPUSH
9901: CALL_OW 88
// end else
9905: GO 10042
// if randomMaleSci then
9907: LD_VAR 0 2
9911: IFFALSE 9943
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
9913: LD_VAR 0 2
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: LD_STRING D5-RSci1-1
9924: PPUSH
9925: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
9929: LD_EXP 38
9933: PPUSH
9934: LD_STRING D5-Bur-1
9936: PPUSH
9937: CALL_OW 88
// end else
9941: GO 10042
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
9943: LD_ADDR_VAR 0 2
9947: PUSH
9948: LD_INT 22
9950: PUSH
9951: LD_INT 3
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 21
9960: PUSH
9961: LD_INT 1
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 26
9970: PUSH
9971: LD_INT 1
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 25
9980: PUSH
9981: LD_INT 4
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: PPUSH
9994: CALL_OW 69
9998: PUSH
9999: LD_EXP 38
10003: PUSH
10004: EMPTY
10005: LIST
10006: DIFF
10007: ST_TO_ADDR
// if randomMaleSci then
10008: LD_VAR 0 2
10012: IFFALSE 10042
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
10014: LD_VAR 0 2
10018: PUSH
10019: LD_INT 1
10021: ARRAY
10022: PPUSH
10023: LD_STRING D5-RSci1-1
10025: PPUSH
10026: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
10030: LD_EXP 38
10034: PPUSH
10035: LD_STRING D5-Bur-1
10037: PPUSH
10038: CALL_OW 88
// end ; end ; end ;
10042: LD_VAR 0 1
10046: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
10047: LD_EXP 54
10051: PPUSH
10052: LD_INT 105
10054: PPUSH
10055: LD_INT 123
10057: PPUSH
10058: CALL_OW 297
10062: PUSH
10063: LD_INT 12
10065: LESS
10066: IFFALSE 10092
10068: GO 10070
10070: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
10071: LD_EXP 54
10075: PPUSH
10076: CALL_OW 313
10080: PUSH
10081: LD_INT 1
10083: ARRAY
10084: PPUSH
10085: LD_STRING D2a-RSol1-1
10087: PPUSH
10088: CALL_OW 88
10092: END
// every 0 0$15 trigger startEvacuation do
10093: LD_EXP 7
10097: IFFALSE 10107
10099: GO 10101
10101: DISABLE
// begin enable ;
10102: ENABLE
// CreateEvacuateUnit ;
10103: CALL 2149 0 0
// end ;
10107: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
10108: LD_EXP 9
10112: PUSH
10113: LD_INT 3
10115: GREATEREQUAL
10116: IFFALSE 10215
10118: GO 10120
10120: DISABLE
// begin if IsOk ( Kuzmov ) then
10121: LD_EXP 45
10125: PPUSH
10126: CALL_OW 302
10130: IFFALSE 10200
// begin DialogueOn ;
10132: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
10136: LD_EXP 45
10140: PPUSH
10141: LD_STRING D2b-Kuz-1
10143: PPUSH
10144: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
10148: LD_EXP 38
10152: PPUSH
10153: LD_STRING D2b-Bur-1
10155: PPUSH
10156: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
10160: LD_EXP 45
10164: PPUSH
10165: LD_STRING D2b-Kuz-2
10167: PPUSH
10168: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
10172: LD_EXP 38
10176: PPUSH
10177: LD_STRING D2b-Bur-2
10179: PPUSH
10180: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
10184: LD_EXP 45
10188: PPUSH
10189: LD_STRING D2b-Kuz-3
10191: PPUSH
10192: CALL_OW 88
// DialogueOff ;
10196: CALL_OW 7
// end ; Query ( Q1 ) ;
10200: LD_STRING Q1
10202: PPUSH
10203: CALL_OW 97
// canStealCargo = true ;
10207: LD_ADDR_EXP 10
10211: PUSH
10212: LD_INT 1
10214: ST_TO_ADDR
// end ;
10215: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
10216: LD_EXP 10
10220: IFFALSE 10503
10222: GO 10224
10224: DISABLE
10225: LD_INT 0
10227: PPUSH
10228: PPUSH
// begin enable ;
10229: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
10230: LD_ADDR_VAR 0 2
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_INT 6
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 21
10247: PUSH
10248: LD_INT 2
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 34
10257: PUSH
10258: LD_INT 51
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 69
10274: PUSH
10275: FOR_IN
10276: IFFALSE 10501
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
10278: LD_ADDR_VAR 0 1
10282: PUSH
10283: LD_INT 22
10285: PUSH
10286: LD_INT 3
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 21
10295: PUSH
10296: LD_INT 1
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 50
10305: PUSH
10306: EMPTY
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: LIST
10313: PPUSH
10314: CALL_OW 69
10318: PUSH
10319: FOR_IN
10320: IFFALSE 10497
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos then
10322: LD_VAR 0 2
10326: PPUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 296
10336: PUSH
10337: LD_INT 8
10339: LESS
10340: PUSH
10341: LD_VAR 0 2
10345: PUSH
10346: LD_EXP 12
10350: IN
10351: NOT
10352: AND
10353: IFFALSE 10495
// begin stealCargos = stealCargos ^ cargo ;
10355: LD_ADDR_EXP 12
10359: PUSH
10360: LD_EXP 12
10364: PUSH
10365: LD_VAR 0 2
10369: ADD
10370: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
10371: LD_STRING QQrSteal
10373: PPUSH
10374: CALL_OW 97
10378: PUSH
10379: LD_INT 1
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10463
10387: POP
// begin DialogueOn ;
10388: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
10392: LD_EXP 38
10396: PPUSH
10397: LD_STRING DQrSteal#1-Bur-1
10399: PPUSH
10400: CALL_OW 88
// DialogueOff ;
10404: CALL_OW 7
// ComMoveXY ( cargo , 115 , 126 ) ;
10408: LD_VAR 0 2
10412: PPUSH
10413: LD_INT 115
10415: PPUSH
10416: LD_INT 126
10418: PPUSH
10419: CALL_OW 111
// AddComUnload ( cargo ) ;
10423: LD_VAR 0 2
10427: PPUSH
10428: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
10432: LD_VAR 0 2
10436: PPUSH
10437: LD_INT 92
10439: PPUSH
10440: LD_INT 177
10442: PPUSH
10443: CALL_OW 171
// stealWarmCount = stealWarmCount + 1 ;
10447: LD_ADDR_EXP 11
10451: PUSH
10452: LD_EXP 11
10456: PUSH
10457: LD_INT 1
10459: PLUS
10460: ST_TO_ADDR
// end ; 2 :
10461: GO 10495
10463: LD_INT 2
10465: DOUBLE
10466: EQUAL
10467: IFTRUE 10471
10469: GO 10494
10471: POP
// begin DialogueOn ;
10472: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
10476: LD_EXP 38
10480: PPUSH
10481: LD_STRING DQrSteal#2-Bur-1
10483: PPUSH
10484: CALL_OW 88
// DialogueOff ;
10488: CALL_OW 7
// end ; end ;
10492: GO 10495
10494: POP
// end ;
10495: GO 10319
10497: POP
10498: POP
10499: GO 10275
10501: POP
10502: POP
// end ;
10503: PPOPN 2
10505: END
// every 0 0$10 trigger stealWarmCount = 3 do
10506: LD_EXP 11
10510: PUSH
10511: LD_INT 3
10513: EQUAL
10514: IFFALSE 10586
10516: GO 10518
10518: DISABLE
// begin DialogueOn ;
10519: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
10523: LD_EXP 49
10527: PPUSH
10528: LD_STRING D3A-Pla-1
10530: PPUSH
10531: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
10535: LD_EXP 38
10539: PPUSH
10540: LD_STRING D3A-Bur-1
10542: PPUSH
10543: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
10547: LD_EXP 49
10551: PPUSH
10552: LD_STRING D3A-Pla-2
10554: PPUSH
10555: CALL_OW 94
// if IsOK ( Kuzmov ) then
10559: LD_EXP 45
10563: PPUSH
10564: CALL_OW 302
10568: IFFALSE 10582
// Say ( Kuzmov , D3A-Kuz-2 ) ;
10570: LD_EXP 45
10574: PPUSH
10575: LD_STRING D3A-Kuz-2
10577: PPUSH
10578: CALL_OW 88
// DialogueOff ;
10582: CALL_OW 7
// end ;
10586: END
// every 0 0$10 trigger stealWarmCount = 6 do
10587: LD_EXP 11
10591: PUSH
10592: LD_INT 6
10594: EQUAL
10595: IFFALSE 10644
10597: GO 10599
10599: DISABLE
// begin DialogueOn ;
10600: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
10604: LD_EXP 49
10608: PPUSH
10609: LD_STRING D3B-Pla-1
10611: PPUSH
10612: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
10616: LD_EXP 38
10620: PPUSH
10621: LD_STRING D3B-Bur-1
10623: PPUSH
10624: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
10628: LD_EXP 49
10632: PPUSH
10633: LD_STRING D3B-Pla-2
10635: PPUSH
10636: CALL_OW 94
// DialogueOff ;
10640: CALL_OW 7
// end ;
10644: END
// every 0 0$10 trigger stealWarmCount = 7 do
10645: LD_EXP 11
10649: PUSH
10650: LD_INT 7
10652: EQUAL
10653: IFFALSE 10737
10655: GO 10657
10657: DISABLE
// begin DialogueOn ;
10658: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
10662: LD_EXP 49
10666: PPUSH
10667: LD_STRING D3C-Pla-1
10669: PPUSH
10670: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
10674: LD_EXP 38
10678: PPUSH
10679: LD_STRING D3C-Bur-1
10681: PPUSH
10682: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
10686: LD_EXP 49
10690: PPUSH
10691: LD_STRING D3C-Pla-2
10693: PPUSH
10694: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
10698: LD_EXP 38
10702: PPUSH
10703: LD_STRING D3C-Bur-2
10705: PPUSH
10706: CALL_OW 88
// if IsOK ( Kuzmov ) then
10710: LD_EXP 45
10714: PPUSH
10715: CALL_OW 302
10719: IFFALSE 10733
// Say ( Kuzmov , D3C-Kuz-2 ) ;
10721: LD_EXP 45
10725: PPUSH
10726: LD_STRING D3C-Kuz-2
10728: PPUSH
10729: CALL_OW 88
// DialogueOff ;
10733: CALL_OW 7
// end ;
10737: END
// every 0 0$10 trigger stealWarmCount = 8 do
10738: LD_EXP 11
10742: PUSH
10743: LD_INT 8
10745: EQUAL
10746: IFFALSE 10938
10748: GO 10750
10750: DISABLE
// begin canStealCargo = false ;
10751: LD_ADDR_EXP 10
10755: PUSH
10756: LD_INT 0
10758: ST_TO_ADDR
// DialogueOn ;
10759: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
10763: LD_EXP 49
10767: PPUSH
10768: LD_STRING D3D-Pla-1
10770: PPUSH
10771: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
10775: LD_EXP 38
10779: PPUSH
10780: LD_STRING D3D-Bur-1
10782: PPUSH
10783: CALL_OW 88
// if kurinOpinion = 0 then
10787: LD_EXP 2
10791: PUSH
10792: LD_INT 0
10794: EQUAL
10795: IFFALSE 10815
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
10797: LD_EXP 49
10801: PPUSH
10802: LD_STRING D3E-Pla-1
10804: PPUSH
10805: CALL_OW 94
// Lose_Arrest ;
10809: CALL 6591 0 0
// exit ;
10813: GO 10938
// end ; if meetBelkovBrother = 1 then
10815: LD_EXP 3
10819: PUSH
10820: LD_INT 1
10822: EQUAL
10823: IFFALSE 10843
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
10825: LD_EXP 49
10829: PPUSH
10830: LD_STRING D3E-Pla-1a
10832: PPUSH
10833: CALL_OW 94
// Lose_Arrest ;
10837: CALL 6591 0 0
// exit ;
10841: GO 10938
// end ; if platonovOpinion = 0 then
10843: LD_EXP 1
10847: PUSH
10848: LD_INT 0
10850: EQUAL
10851: IFFALSE 10871
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
10853: LD_EXP 49
10857: PPUSH
10858: LD_STRING D3E-Pla-1b
10860: PPUSH
10861: CALL_OW 94
// Lose_Arrest ;
10865: CALL 6591 0 0
// exit ;
10869: GO 10938
// end ; if platonovOpinion = 1 then
10871: LD_EXP 1
10875: PUSH
10876: LD_INT 1
10878: EQUAL
10879: IFFALSE 10899
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
10881: LD_EXP 49
10885: PPUSH
10886: LD_STRING D3E-Pla-1c
10888: PPUSH
10889: CALL_OW 94
// Lose_Arrest ;
10893: CALL 6591 0 0
// exit ;
10897: GO 10938
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
10899: LD_EXP 49
10903: PPUSH
10904: LD_STRING D3D-Pla-2
10906: PPUSH
10907: CALL_OW 94
// if IsOK ( Kuzmov ) then
10911: LD_EXP 45
10915: PPUSH
10916: CALL_OW 302
10920: IFFALSE 10934
// Say ( Kuzmov , D3D-Kuz-2 ) ;
10922: LD_EXP 45
10926: PPUSH
10927: LD_STRING D3D-Kuz-2
10929: PPUSH
10930: CALL_OW 88
// DialogueOff ;
10934: CALL_OW 7
// end ;
10938: END
// every 0 0$20 do var allyUntis ;
10939: GO 10941
10941: DISABLE
10942: LD_INT 0
10944: PPUSH
// begin enable ;
10945: ENABLE
// wait ( 0 0$10 ) ;
10946: LD_INT 350
10948: PPUSH
10949: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
10953: LD_ADDR_VAR 0 1
10957: PUSH
10958: LD_INT 22
10960: PUSH
10961: LD_INT 6
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 3
10970: PUSH
10971: LD_INT 60
10973: PUSH
10974: EMPTY
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PPUSH
10985: CALL_OW 69
10989: PUSH
10990: LD_EXP 52
10994: DIFF
10995: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
10996: LD_ADDR_VAR 0 1
11000: PUSH
11001: LD_VAR 0 1
11005: PUSH
11006: LD_EXP 50
11010: DIFF
11011: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
11012: LD_ADDR_VAR 0 1
11016: PUSH
11017: LD_VAR 0 1
11021: PUSH
11022: LD_EXP 45
11026: DIFF
11027: ST_TO_ADDR
// if not allyUntis then
11028: LD_VAR 0 1
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11061
// ComUnload ( allyUntis ) ;
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
11046: LD_VAR 0 1
11050: PPUSH
11051: LD_INT 92
11053: PPUSH
11054: LD_INT 176
11056: PPUSH
11057: CALL_OW 171
// end ;
11061: PPOPN 1
11063: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
11064: LD_EXP 9
11068: PUSH
11069: LD_EXP 13
11073: GREATEREQUAL
11074: IFFALSE 11087
11076: GO 11078
11078: DISABLE
// begin startEvacuation = false ;
11079: LD_ADDR_EXP 7
11083: PUSH
11084: LD_INT 0
11086: ST_TO_ADDR
// end ;
11087: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] ] ) do
11088: LD_EXP 9
11092: PUSH
11093: LD_EXP 13
11097: GREATEREQUAL
11098: PUSH
11099: LD_INT 22
11101: PUSH
11102: LD_INT 6
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: PPUSH
11112: CALL_OW 69
11116: NOT
11117: AND
11118: IFFALSE 11502
11120: GO 11122
11122: DISABLE
// begin wait ( 1 1$00 ) ;
11123: LD_INT 2100
11125: PPUSH
11126: CALL_OW 67
// DialogueOn ;
11130: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
11134: LD_EXP 49
11138: PPUSH
11139: LD_STRING D4-Pla-1
11141: PPUSH
11142: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
11146: LD_EXP 38
11150: PPUSH
11151: LD_STRING D4-Bur-1
11153: PPUSH
11154: CALL_OW 88
// DialogueOff ;
11158: CALL_OW 7
// wait ( 0 0$2 ) ;
11162: LD_INT 70
11164: PPUSH
11165: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
11169: LD_EXP 45
11173: PPUSH
11174: CALL_OW 302
11178: PUSH
11179: LD_EXP 45
11183: PPUSH
11184: CALL_OW 255
11188: PUSH
11189: LD_INT 3
11191: EQUAL
11192: AND
11193: IFFALSE 11475
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
11195: LD_EXP 45
11199: PPUSH
11200: LD_STRING D4-Kuz-1
11202: PPUSH
11203: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
11207: LD_EXP 42
11211: PPUSH
11212: CALL_OW 302
11216: PUSH
11217: LD_EXP 42
11221: PPUSH
11222: CALL_OW 255
11226: PUSH
11227: LD_INT 3
11229: EQUAL
11230: AND
11231: IFFALSE 11247
// Say ( Belkov , D4-Bel-1 ) else
11233: LD_EXP 42
11237: PPUSH
11238: LD_STRING D4-Bel-1
11240: PPUSH
11241: CALL_OW 88
11245: GO 11285
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
11247: LD_EXP 43
11251: PPUSH
11252: CALL_OW 302
11256: PUSH
11257: LD_EXP 43
11261: PPUSH
11262: CALL_OW 255
11266: PUSH
11267: LD_INT 3
11269: EQUAL
11270: AND
11271: IFFALSE 11285
// Say ( Belkov2 , D4-Bel-1 ) ;
11273: LD_EXP 43
11277: PPUSH
11278: LD_STRING D4-Bel-1
11280: PPUSH
11281: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
11285: LD_EXP 38
11289: PPUSH
11290: LD_STRING D4-Bur-2
11292: PPUSH
11293: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
11297: LD_EXP 39
11301: PPUSH
11302: CALL_OW 302
11306: PUSH
11307: LD_EXP 39
11311: PPUSH
11312: CALL_OW 255
11316: PUSH
11317: LD_INT 3
11319: EQUAL
11320: AND
11321: IFFALSE 11347
// begin Say ( Gnyevko , D4-Gny-2 ) ;
11323: LD_EXP 39
11327: PPUSH
11328: LD_STRING D4-Gny-2
11330: PPUSH
11331: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
11335: LD_EXP 38
11339: PPUSH
11340: LD_STRING D4-Bur-3
11342: PPUSH
11343: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
11347: LD_EXP 38
11351: PPUSH
11352: LD_STRING D4-Bur-3a
11354: PPUSH
11355: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
11359: LD_EXP 42
11363: PPUSH
11364: CALL_OW 302
11368: PUSH
11369: LD_EXP 42
11373: PPUSH
11374: CALL_OW 255
11378: PUSH
11379: LD_INT 3
11381: EQUAL
11382: AND
11383: IFFALSE 11399
// Say ( Belkov , D4-Bel-3 ) else
11385: LD_EXP 42
11389: PPUSH
11390: LD_STRING D4-Bel-3
11392: PPUSH
11393: CALL_OW 88
11397: GO 11437
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
11399: LD_EXP 43
11403: PPUSH
11404: CALL_OW 302
11408: PUSH
11409: LD_EXP 43
11413: PPUSH
11414: CALL_OW 255
11418: PUSH
11419: LD_INT 3
11421: EQUAL
11422: AND
11423: IFFALSE 11437
// Say ( Belkov2 , D4-Bel-3 ) ;
11425: LD_EXP 43
11429: PPUSH
11430: LD_STRING D4-Bel-3
11432: PPUSH
11433: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
11437: LD_EXP 41
11441: PPUSH
11442: CALL_OW 302
11446: PUSH
11447: LD_EXP 41
11451: PPUSH
11452: CALL_OW 255
11456: PUSH
11457: LD_INT 3
11459: EQUAL
11460: AND
11461: IFFALSE 11475
// Say ( Kovalyuk , D4-Kov-3 ) ;
11463: LD_EXP 41
11467: PPUSH
11468: LD_STRING D4-Kov-3
11470: PPUSH
11471: CALL_OW 88
// end ; enableAttacks = true ;
11475: LD_ADDR_EXP 16
11479: PUSH
11480: LD_INT 1
11482: ST_TO_ADDR
// wait ( 0 0$10 ) ;
11483: LD_INT 350
11485: PPUSH
11486: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
11490: LD_EXP 38
11494: PPUSH
11495: LD_STRING D7-Bur-1
11497: PPUSH
11498: CALL_OW 88
// end ;
11502: END
// export function Dial_Contact ; begin
11503: LD_INT 0
11505: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
11506: LD_EXP 38
11510: PPUSH
11511: LD_STRING D7-Bur-1a
11513: PPUSH
11514: CALL_OW 88
// wait ( 0 0$12 ) ;
11518: LD_INT 420
11520: PPUSH
11521: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
11525: LD_EXP 38
11529: PPUSH
11530: LD_STRING D7-Bur-1b
11532: PPUSH
11533: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
11537: LD_EXP 42
11541: PPUSH
11542: CALL_OW 302
11546: PUSH
11547: LD_EXP 42
11551: PPUSH
11552: CALL_OW 255
11556: PUSH
11557: LD_INT 3
11559: EQUAL
11560: AND
11561: IFFALSE 11577
// Say ( Belkov , D7-Bel-1 ) else
11563: LD_EXP 42
11567: PPUSH
11568: LD_STRING D7-Bel-1
11570: PPUSH
11571: CALL_OW 88
11575: GO 11615
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
11577: LD_EXP 43
11581: PPUSH
11582: CALL_OW 302
11586: PUSH
11587: LD_EXP 43
11591: PPUSH
11592: CALL_OW 255
11596: PUSH
11597: LD_INT 3
11599: EQUAL
11600: AND
11601: IFFALSE 11615
// Say ( Belkov2 , D7-Bel-1 ) ;
11603: LD_EXP 43
11607: PPUSH
11608: LD_STRING D7-Bel-1
11610: PPUSH
11611: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
11615: LD_EXP 45
11619: PPUSH
11620: CALL_OW 302
11624: PUSH
11625: LD_EXP 45
11629: PPUSH
11630: CALL_OW 255
11634: PUSH
11635: LD_INT 3
11637: EQUAL
11638: AND
11639: IFFALSE 11653
// Say ( Kuzmov , D7-Kuz-1 ) ;
11641: LD_EXP 45
11645: PPUSH
11646: LD_STRING D7-Kuz-1
11648: PPUSH
11649: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
11653: LD_EXP 41
11657: PPUSH
11658: CALL_OW 302
11662: PUSH
11663: LD_EXP 41
11667: PPUSH
11668: CALL_OW 255
11672: PUSH
11673: LD_INT 3
11675: EQUAL
11676: AND
11677: IFFALSE 11691
// Say ( Kovalyuk , D7-Kov-1 ) ;
11679: LD_EXP 41
11683: PPUSH
11684: LD_STRING D7-Kov-1
11686: PPUSH
11687: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11691: LD_EXP 44
11695: PPUSH
11696: CALL_OW 302
11700: PUSH
11701: LD_EXP 44
11705: PPUSH
11706: CALL_OW 255
11710: PUSH
11711: LD_INT 3
11713: EQUAL
11714: AND
11715: IFFALSE 11729
// Say ( Scholtze , D7-Sch-1 ) ;
11717: LD_EXP 44
11721: PPUSH
11722: LD_STRING D7-Sch-1
11724: PPUSH
11725: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
11729: LD_INT 22
11731: PUSH
11732: LD_INT 3
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 21
11741: PUSH
11742: LD_INT 1
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 26
11751: PUSH
11752: LD_INT 1
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: PPUSH
11764: CALL_OW 69
11768: PPUSH
11769: LD_STRING D7-RSol1-1
11771: PPUSH
11772: LD_STRING 
11774: PPUSH
11775: LD_INT 0
11777: PPUSH
11778: CALL 7825 0 4
// PrepareHeike ;
11782: CALL 2933 0 0
// wait ( 0 0$10 ) ;
11786: LD_INT 350
11788: PPUSH
11789: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
11793: LD_EXP 56
11797: PPUSH
11798: LD_STRING D7a-Hke-1
11800: PPUSH
11801: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
11805: LD_EXP 38
11809: PPUSH
11810: LD_STRING D7a-Bur-1
11812: PPUSH
11813: CALL_OW 88
// wait ( 0 0$50 ) ;
11817: LD_INT 1750
11819: PPUSH
11820: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
11824: LD_EXP 45
11828: PPUSH
11829: CALL_OW 302
11833: PUSH
11834: LD_EXP 45
11838: PPUSH
11839: CALL_OW 255
11843: PUSH
11844: LD_INT 3
11846: EQUAL
11847: AND
11848: IFFALSE 11864
// Say ( Kuzmov , D8-Kuz-1 ) else
11850: LD_EXP 45
11854: PPUSH
11855: LD_STRING D8-Kuz-1
11857: PPUSH
11858: CALL_OW 88
11862: GO 11917
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
11864: LD_INT 22
11866: PUSH
11867: LD_INT 3
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 21
11876: PUSH
11877: LD_INT 1
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 26
11886: PUSH
11887: LD_INT 1
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: LIST
11898: PPUSH
11899: CALL_OW 69
11903: PPUSH
11904: LD_STRING D8-RSol1-1
11906: PPUSH
11907: LD_STRING 
11909: PPUSH
11910: LD_INT 0
11912: PPUSH
11913: CALL 7825 0 4
// Say ( Burlak , D8-Bur-1 ) ;
11917: LD_EXP 38
11921: PPUSH
11922: LD_STRING D8-Bur-1
11924: PPUSH
11925: CALL_OW 88
// end ;
11929: LD_VAR 0 1
11933: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
11934: LD_EXP 50
11938: PPUSH
11939: CALL_OW 305
11943: NOT
11944: PUSH
11945: LD_INT 22
11947: PUSH
11948: LD_INT 3
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 21
11957: PUSH
11958: LD_INT 3
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 50
11967: PUSH
11968: EMPTY
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: PPUSH
11976: CALL_OW 69
11980: NOT
11981: AND
11982: PUSH
11983: LD_INT 22
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 21
11995: PUSH
11996: LD_INT 1
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 50
12005: PUSH
12006: EMPTY
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: PPUSH
12014: CALL_OW 69
12018: PUSH
12019: LD_INT 5
12021: LESS
12022: AND
12023: PUSH
12024: LD_INT 5
12026: PPUSH
12027: LD_INT 22
12029: PUSH
12030: LD_INT 2
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: PPUSH
12040: CALL_OW 70
12044: PUSH
12045: LD_INT 3
12047: GREATER
12048: AND
12049: IFFALSE 12058
12051: GO 12053
12053: DISABLE
// Lose_ArabBreakthrough ;
12054: CALL 6606 0 0
12058: END
// every 1 1$30 trigger currentWave >= enemyWaves do
12059: LD_EXP 17
12063: PUSH
12064: LD_EXP 35
12068: GREATEREQUAL
12069: IFFALSE 12267
12071: GO 12073
12073: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
12074: LD_EXP 49
12078: PPUSH
12079: LD_STRING D9-Pla-1
12081: PPUSH
12082: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
12086: LD_EXP 38
12090: PPUSH
12091: LD_STRING D9-Bur-1
12093: PPUSH
12094: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
12098: LD_EXP 49
12102: PPUSH
12103: LD_STRING D9-Pla-2
12105: PPUSH
12106: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
12110: LD_EXP 38
12114: PPUSH
12115: LD_STRING D9-Bur-2
12117: PPUSH
12118: CALL_OW 88
// wait ( 2 2$0 ) ;
12122: LD_INT 4200
12124: PPUSH
12125: CALL_OW 67
// PlaceUnitArea ( Gaydar , GaydarSpawnArea , false ) ;
12129: LD_EXP 50
12133: PPUSH
12134: LD_INT 6
12136: PPUSH
12137: LD_INT 0
12139: PPUSH
12140: CALL_OW 49
// arabianCanExitMap = true ;
12144: LD_ADDR_EXP 6
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12152: LD_INT 35
12154: PPUSH
12155: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
12159: LD_EXP 50
12163: PPUSH
12164: CALL_OW 87
// DialogueOn ;
12168: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
12172: LD_EXP 50
12176: PPUSH
12177: LD_STRING D10-Gay-1
12179: PPUSH
12180: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
12184: LD_EXP 38
12188: PPUSH
12189: LD_STRING D10-Bur-1
12191: PPUSH
12192: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
12196: LD_EXP 50
12200: PPUSH
12201: LD_STRING D10-Gay-2
12203: PPUSH
12204: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
12208: LD_EXP 48
12212: PPUSH
12213: LD_STRING D10-Pop-2
12215: PPUSH
12216: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
12220: LD_EXP 50
12224: PPUSH
12225: LD_STRING D10-Gay-3
12227: PPUSH
12228: CALL_OW 94
// DialogueOff ;
12232: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
12236: LD_EXP 50
12240: PPUSH
12241: LD_INT 36
12243: PPUSH
12244: LD_INT 38
12246: PPUSH
12247: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
12251: LD_EXP 50
12255: PPUSH
12256: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
12260: LD_STRING M2
12262: PPUSH
12263: CALL_OW 337
// end ;
12267: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
12268: LD_EXP 6
12272: IFFALSE 12345
12274: GO 12276
12276: DISABLE
12277: LD_INT 0
12279: PPUSH
// begin enable ;
12280: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
12281: LD_INT 22
12283: PUSH
12284: LD_INT 2
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: PPUSH
12294: CALL_OW 69
12298: PPUSH
12299: LD_INT 13
12301: PPUSH
12302: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
12306: LD_ADDR_VAR 0 1
12310: PUSH
12311: LD_INT 13
12313: PPUSH
12314: LD_INT 22
12316: PUSH
12317: LD_INT 2
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PPUSH
12324: CALL_OW 70
12328: PUSH
12329: FOR_IN
12330: IFFALSE 12343
// RemoveUnit ( unit ) ;
12332: LD_VAR 0 1
12336: PPUSH
12337: CALL_OW 64
12341: GO 12329
12343: POP
12344: POP
// end ;
12345: PPOPN 1
12347: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
12348: LD_EXP 18
12352: NOT
12353: IFFALSE 12743
12355: GO 12357
12357: DISABLE
12358: LD_INT 0
12360: PPUSH
12361: PPUSH
// begin enable ;
12362: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
12363: LD_ADDR_VAR 0 1
12367: PUSH
12368: LD_INT 22
12370: PUSH
12371: LD_INT 3
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: LD_INT 21
12380: PUSH
12381: LD_INT 1
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 69
12396: PUSH
12397: FOR_IN
12398: IFFALSE 12741
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
12400: LD_VAR 0 1
12404: PPUSH
12405: LD_EXP 50
12409: PPUSH
12410: CALL_OW 296
12414: PUSH
12415: LD_INT 6
12417: LESS
12418: IFFALSE 12739
// begin ComWalk ( Gaydar ) ;
12420: LD_EXP 50
12424: PPUSH
12425: CALL_OW 138
// saveGaydar = true ;
12429: LD_ADDR_EXP 18
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12437: LD_INT 35
12439: PPUSH
12440: CALL_OW 67
// DialogueOn ;
12444: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
12448: LD_EXP 50
12452: PPUSH
12453: LD_STRING D11-Gay-1
12455: PPUSH
12456: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
12460: LD_EXP 38
12464: PPUSH
12465: LD_EXP 50
12469: PPUSH
12470: CALL_OW 296
12474: PUSH
12475: LD_INT 6
12477: LESS
12478: NOT
12479: IFFALSE 12579
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
12481: LD_ADDR_VAR 0 2
12485: PUSH
12486: LD_INT 22
12488: PUSH
12489: LD_INT 3
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 21
12498: PUSH
12499: LD_INT 1
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 26
12508: PUSH
12509: LD_INT 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 50
12518: PUSH
12519: EMPTY
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: PPUSH
12528: CALL_OW 69
12532: PUSH
12533: LD_EXP 50
12537: DIFF
12538: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
12539: LD_VAR 0 2
12543: PPUSH
12544: LD_EXP 50
12548: PPUSH
12549: CALL_OW 74
12553: PPUSH
12554: LD_STRING D11-RSol1-1
12556: PPUSH
12557: CALL_OW 88
// gaydarWaitForBurlak = true ;
12561: LD_ADDR_EXP 19
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// DialogueOff ;
12569: CALL_OW 7
// exit ;
12573: POP
12574: POP
12575: GO 12743
// end else
12577: GO 12739
// begin SetSide ( Gaydar , 3 ) ;
12579: LD_EXP 50
12583: PPUSH
12584: LD_INT 3
12586: PPUSH
12587: CALL_OW 235
// Say ( Gaydar , D11-Gay-2 ) ;
12591: LD_EXP 50
12595: PPUSH
12596: LD_STRING D11-Gay-2
12598: PPUSH
12599: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
12603: LD_EXP 38
12607: PPUSH
12608: LD_STRING D11-Bur-2
12610: PPUSH
12611: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
12615: LD_EXP 50
12619: PPUSH
12620: LD_STRING D11-Gay-3
12622: PPUSH
12623: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
12627: LD_EXP 38
12631: PPUSH
12632: LD_STRING D11-Bur-3
12634: PPUSH
12635: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
12639: LD_EXP 50
12643: PPUSH
12644: LD_STRING D11-Gay-4
12646: PPUSH
12647: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
12651: LD_EXP 38
12655: PPUSH
12656: LD_STRING D11-Bur-4
12658: PPUSH
12659: CALL_OW 88
// wait ( 0 0$2 ) ;
12663: LD_INT 70
12665: PPUSH
12666: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
12670: LD_EXP 48
12674: PPUSH
12675: LD_STRING D12-Pop-1
12677: PPUSH
12678: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
12682: LD_EXP 38
12686: PPUSH
12687: LD_STRING D12-Bur-1
12689: PPUSH
12690: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
12694: LD_EXP 49
12698: PPUSH
12699: LD_STRING D12-Pla-1
12701: PPUSH
12702: CALL_OW 94
// DialogueOff ;
12706: CALL_OW 7
// canExitMap = true ;
12710: LD_ADDR_EXP 5
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
12718: LD_STRING MFinal
12720: PPUSH
12721: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
12725: LD_INT 4
12727: PPUSH
12728: LD_INT 1
12730: PPUSH
12731: CALL_OW 424
// exit ;
12735: POP
12736: POP
12737: GO 12743
// end ; end ; end ;
12739: GO 12397
12741: POP
12742: POP
// end ;
12743: PPOPN 2
12745: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
12746: LD_EXP 38
12750: PPUSH
12751: LD_EXP 50
12755: PPUSH
12756: CALL_OW 296
12760: PUSH
12761: LD_INT 6
12763: LESS
12764: PUSH
12765: LD_EXP 19
12769: AND
12770: IFFALSE 12935
12772: GO 12774
12774: DISABLE
// begin SetSide ( Gaydar , 3 ) ;
12775: LD_EXP 50
12779: PPUSH
12780: LD_INT 3
12782: PPUSH
12783: CALL_OW 235
// DialogueOn ;
12787: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
12791: LD_EXP 50
12795: PPUSH
12796: LD_STRING D11-Gay-2
12798: PPUSH
12799: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
12803: LD_EXP 38
12807: PPUSH
12808: LD_STRING D11-Bur-2
12810: PPUSH
12811: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
12815: LD_EXP 50
12819: PPUSH
12820: LD_STRING D11-Gay-3
12822: PPUSH
12823: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
12827: LD_EXP 38
12831: PPUSH
12832: LD_STRING D11-Bur-3
12834: PPUSH
12835: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
12839: LD_EXP 50
12843: PPUSH
12844: LD_STRING D11-Gay-4
12846: PPUSH
12847: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
12851: LD_EXP 38
12855: PPUSH
12856: LD_STRING D11-Bur-4
12858: PPUSH
12859: CALL_OW 88
// wait ( 0 0$2 ) ;
12863: LD_INT 70
12865: PPUSH
12866: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
12870: LD_EXP 48
12874: PPUSH
12875: LD_STRING D12-Pop-1
12877: PPUSH
12878: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
12882: LD_EXP 38
12886: PPUSH
12887: LD_STRING D12-Bur-1
12889: PPUSH
12890: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
12894: LD_EXP 49
12898: PPUSH
12899: LD_STRING D12-Pla-1
12901: PPUSH
12902: CALL_OW 94
// DialogueOff ;
12906: CALL_OW 7
// canExitMap = true ;
12910: LD_ADDR_EXP 5
12914: PUSH
12915: LD_INT 1
12917: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
12918: LD_STRING MFinal
12920: PPUSH
12921: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
12925: LD_INT 4
12927: PPUSH
12928: LD_INT 1
12930: PPUSH
12931: CALL_OW 424
// end ;
12935: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
12936: LD_INT 22
12938: PUSH
12939: LD_INT 3
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 21
12948: PUSH
12949: LD_INT 1
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 69
12964: PUSH
12965: LD_INT 0
12967: EQUAL
12968: PUSH
12969: LD_EXP 5
12973: AND
12974: IFFALSE 12983
12976: GO 12978
12978: DISABLE
// FinishMission ; end_of_file
12979: CALL 6621 0 0
12983: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
12984: LD_EXP 16
12988: PUSH
12989: LD_EXP 17
12993: PUSH
12994: LD_INT 0
12996: EQUAL
12997: AND
12998: PUSH
12999: LD_EXP 17
13003: PUSH
13004: LD_EXP 35
13008: LESS
13009: AND
13010: IFFALSE 13062
13012: GO 13014
13014: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
13015: LD_INT 7
13017: PUSH
13018: LD_INT 10
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_INT 2
13030: PPUSH
13031: CALL_OW 12
13035: ARRAY
13036: PPUSH
13037: CALL 3281 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
13041: LD_EXP 57
13045: PPUSH
13046: EMPTY
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_INT 1
13053: PPUSH
13054: LD_INT 1
13056: NEG
13057: PPUSH
13058: CALL 4220 0 5
// end ;
13062: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
13063: LD_EXP 16
13067: PUSH
13068: LD_EXP 17
13072: PUSH
13073: LD_INT 0
13075: GREATEREQUAL
13076: AND
13077: PUSH
13078: LD_EXP 17
13082: PUSH
13083: LD_EXP 35
13087: LESS
13088: AND
13089: IFFALSE 13319
13091: GO 13093
13093: DISABLE
// begin currentWave = currentWave + 1 ;
13094: LD_ADDR_EXP 17
13098: PUSH
13099: LD_EXP 17
13103: PUSH
13104: LD_INT 1
13106: PLUS
13107: ST_TO_ADDR
// PrepareArabianVehicles ;
13108: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13112: LD_EXP 57
13116: PPUSH
13117: LD_INT 135
13119: PUSH
13120: LD_INT 4
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 134
13129: PUSH
13130: LD_INT 19
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 132
13139: PUSH
13140: LD_INT 26
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 128
13149: PUSH
13150: LD_INT 31
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 123
13159: PUSH
13160: LD_INT 37
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 118
13169: PUSH
13170: LD_INT 45
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 112
13179: PUSH
13180: LD_INT 51
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 106
13189: PUSH
13190: LD_INT 57
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 99
13199: PUSH
13200: LD_INT 62
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 93
13209: PUSH
13210: LD_INT 67
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 86
13219: PUSH
13220: LD_INT 72
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 78
13229: PUSH
13230: LD_INT 75
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 71
13239: PUSH
13240: LD_INT 81
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 69
13249: PUSH
13250: LD_INT 88
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 71
13259: PUSH
13260: LD_INT 95
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 74
13269: PUSH
13270: LD_INT 103
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 80
13279: PUSH
13280: LD_INT 113
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: PPUSH
13306: LD_INT 0
13308: PPUSH
13309: LD_INT 1
13311: PPUSH
13312: LD_INT 11
13314: PPUSH
13315: CALL 4220 0 5
// end ;
13319: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
13320: LD_EXP 16
13324: PUSH
13325: LD_OWVAR 67
13329: PUSH
13330: LD_INT 2
13332: EQUAL
13333: AND
13334: PUSH
13335: LD_EXP 17
13339: PUSH
13340: LD_INT 0
13342: GREATEREQUAL
13343: AND
13344: PUSH
13345: LD_EXP 17
13349: PUSH
13350: LD_EXP 35
13354: LESS
13355: AND
13356: IFFALSE 13506
13358: GO 13360
13360: DISABLE
// begin PrepareArabianVehicles ;
13361: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
13365: LD_EXP 57
13369: PPUSH
13370: LD_INT 135
13372: PUSH
13373: LD_INT 4
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 134
13382: PUSH
13383: LD_INT 19
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 132
13392: PUSH
13393: LD_INT 26
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 128
13402: PUSH
13403: LD_INT 31
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 123
13412: PUSH
13413: LD_INT 37
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 118
13422: PUSH
13423: LD_INT 45
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 112
13432: PUSH
13433: LD_INT 51
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 106
13442: PUSH
13443: LD_INT 57
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 99
13452: PUSH
13453: LD_INT 62
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 104
13462: PUSH
13463: LD_INT 71
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 110
13472: PUSH
13473: LD_INT 78
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: PPUSH
13493: LD_INT 0
13495: PPUSH
13496: LD_INT 1
13498: PPUSH
13499: LD_INT 11
13501: PPUSH
13502: CALL 4220 0 5
// end ;
13506: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
13507: LD_EXP 16
13511: PUSH
13512: LD_OWVAR 67
13516: PUSH
13517: LD_INT 3
13519: EQUAL
13520: AND
13521: PUSH
13522: LD_EXP 17
13526: PUSH
13527: LD_INT 0
13529: GREATEREQUAL
13530: AND
13531: PUSH
13532: LD_EXP 17
13536: PUSH
13537: LD_EXP 35
13541: LESS
13542: AND
13543: IFFALSE 13737
13545: GO 13547
13547: DISABLE
// begin PrepareArabianVehicles ;
13548: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
13552: LD_EXP 57
13556: PPUSH
13557: LD_INT 135
13559: PUSH
13560: LD_INT 4
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 134
13569: PUSH
13570: LD_INT 19
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 132
13579: PUSH
13580: LD_INT 26
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 128
13589: PUSH
13590: LD_INT 31
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 123
13599: PUSH
13600: LD_INT 37
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 118
13609: PUSH
13610: LD_INT 45
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 112
13619: PUSH
13620: LD_INT 51
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 106
13629: PUSH
13630: LD_INT 57
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 99
13639: PUSH
13640: LD_INT 62
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 104
13649: PUSH
13650: LD_INT 71
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 110
13659: PUSH
13660: LD_INT 78
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 119
13669: PUSH
13670: LD_INT 88
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 128
13679: PUSH
13680: LD_INT 97
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 135
13689: PUSH
13690: LD_INT 106
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 140
13699: PUSH
13700: LD_INT 153
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: PPUSH
13724: LD_INT 0
13726: PPUSH
13727: LD_INT 1
13729: PPUSH
13730: LD_INT 11
13732: PPUSH
13733: CALL 4220 0 5
// end ;
13737: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
13738: LD_EXP 16
13742: PUSH
13743: LD_EXP 17
13747: PUSH
13748: LD_INT 1
13750: EQUAL
13751: AND
13752: PUSH
13753: LD_EXP 17
13757: PUSH
13758: LD_EXP 35
13762: LESS
13763: AND
13764: IFFALSE 13841
13766: GO 13768
13768: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
13769: LD_INT 7
13771: PPUSH
13772: CALL 3281 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
13776: LD_EXP 57
13780: PPUSH
13781: LD_INT 157
13783: PUSH
13784: LD_INT 31
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 194
13793: PUSH
13794: LD_INT 124
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 174
13803: PUSH
13804: LD_INT 158
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 151
13813: PUSH
13814: LD_INT 164
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PPUSH
13827: LD_INT 0
13829: PPUSH
13830: LD_INT 1
13832: PPUSH
13833: LD_INT 1
13835: NEG
13836: PPUSH
13837: CALL 4220 0 5
// end ;
13841: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
13842: LD_EXP 16
13846: PUSH
13847: LD_EXP 17
13851: PUSH
13852: LD_INT 1
13854: EQUAL
13855: AND
13856: PUSH
13857: LD_EXP 17
13861: PUSH
13862: LD_EXP 35
13866: LESS
13867: AND
13868: IFFALSE 14039
13870: GO 13872
13872: DISABLE
// begin wait ( 1 1$30 ) ;
13873: LD_INT 3150
13875: PPUSH
13876: CALL_OW 67
// currentWave = currentWave + 1 ;
13880: LD_ADDR_EXP 17
13884: PUSH
13885: LD_EXP 17
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: ST_TO_ADDR
// PrepareArabianVehicles ;
13894: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] ] , false , true , ArabianRetreatArea ) ;
13898: LD_EXP 57
13902: PPUSH
13903: LD_INT 135
13905: PUSH
13906: LD_INT 4
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 134
13915: PUSH
13916: LD_INT 19
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 132
13925: PUSH
13926: LD_INT 26
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 128
13935: PUSH
13936: LD_INT 31
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 123
13945: PUSH
13946: LD_INT 37
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 118
13955: PUSH
13956: LD_INT 45
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 112
13965: PUSH
13966: LD_INT 51
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 106
13975: PUSH
13976: LD_INT 57
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 99
13985: PUSH
13986: LD_INT 62
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 104
13995: PUSH
13996: LD_INT 71
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 110
14005: PUSH
14006: LD_INT 78
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: PPUSH
14026: LD_INT 0
14028: PPUSH
14029: LD_INT 1
14031: PPUSH
14032: LD_INT 11
14034: PPUSH
14035: CALL 4220 0 5
// end ;
14039: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
14040: LD_EXP 16
14044: PUSH
14045: LD_OWVAR 67
14049: PUSH
14050: LD_INT 2
14052: EQUAL
14053: AND
14054: PUSH
14055: LD_EXP 17
14059: PUSH
14060: LD_INT 1
14062: EQUAL
14063: AND
14064: PUSH
14065: LD_EXP 17
14069: PUSH
14070: LD_EXP 35
14074: LESS
14075: AND
14076: IFFALSE 14270
14078: GO 14080
14080: DISABLE
// begin PrepareArabianVehicles ;
14081: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
14085: LD_EXP 57
14089: PPUSH
14090: LD_INT 135
14092: PUSH
14093: LD_INT 4
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 134
14102: PUSH
14103: LD_INT 19
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 132
14112: PUSH
14113: LD_INT 26
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 128
14122: PUSH
14123: LD_INT 31
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 123
14132: PUSH
14133: LD_INT 37
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 118
14142: PUSH
14143: LD_INT 45
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 112
14152: PUSH
14153: LD_INT 51
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 106
14162: PUSH
14163: LD_INT 57
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 99
14172: PUSH
14173: LD_INT 62
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 104
14182: PUSH
14183: LD_INT 71
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 110
14192: PUSH
14193: LD_INT 78
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 119
14202: PUSH
14203: LD_INT 88
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 128
14212: PUSH
14213: LD_INT 97
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 135
14222: PUSH
14223: LD_INT 106
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 140
14232: PUSH
14233: LD_INT 153
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: PPUSH
14257: LD_INT 0
14259: PPUSH
14260: LD_INT 1
14262: PPUSH
14263: LD_INT 11
14265: PPUSH
14266: CALL 4220 0 5
// end ;
14270: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
14271: LD_EXP 16
14275: PUSH
14276: LD_OWVAR 67
14280: PUSH
14281: LD_INT 3
14283: EQUAL
14284: AND
14285: PUSH
14286: LD_EXP 17
14290: PUSH
14291: LD_INT 1
14293: EQUAL
14294: AND
14295: PUSH
14296: LD_EXP 17
14300: PUSH
14301: LD_EXP 35
14305: LESS
14306: AND
14307: IFFALSE 14523
14309: GO 14311
14311: DISABLE
// begin PrepareArabianVehicles ;
14312: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
14316: LD_EXP 57
14320: PPUSH
14321: LD_INT 135
14323: PUSH
14324: LD_INT 4
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 134
14333: PUSH
14334: LD_INT 19
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 132
14343: PUSH
14344: LD_INT 26
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 128
14353: PUSH
14354: LD_INT 31
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 123
14363: PUSH
14364: LD_INT 37
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 118
14373: PUSH
14374: LD_INT 45
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 112
14383: PUSH
14384: LD_INT 51
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 106
14393: PUSH
14394: LD_INT 57
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 99
14403: PUSH
14404: LD_INT 62
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 93
14413: PUSH
14414: LD_INT 67
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 86
14423: PUSH
14424: LD_INT 72
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 78
14433: PUSH
14434: LD_INT 75
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 71
14443: PUSH
14444: LD_INT 81
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 69
14453: PUSH
14454: LD_INT 88
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 71
14463: PUSH
14464: LD_INT 95
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 74
14473: PUSH
14474: LD_INT 103
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 80
14483: PUSH
14484: LD_INT 113
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: PPUSH
14510: LD_INT 0
14512: PPUSH
14513: LD_INT 1
14515: PPUSH
14516: LD_INT 11
14518: PPUSH
14519: CALL 4220 0 5
// end ;
14523: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
14524: LD_EXP 16
14528: PUSH
14529: LD_EXP 17
14533: PUSH
14534: LD_INT 2
14536: EQUAL
14537: AND
14538: PUSH
14539: LD_EXP 17
14543: PUSH
14544: LD_EXP 35
14548: LESS
14549: AND
14550: IFFALSE 14627
14552: GO 14554
14554: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
14555: LD_INT 7
14557: PPUSH
14558: CALL 3281 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
14562: LD_EXP 57
14566: PPUSH
14567: LD_INT 157
14569: PUSH
14570: LD_INT 31
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 194
14579: PUSH
14580: LD_INT 124
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 174
14589: PUSH
14590: LD_INT 158
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 151
14599: PUSH
14600: LD_INT 164
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: PPUSH
14613: LD_INT 0
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: LD_INT 1
14621: NEG
14622: PPUSH
14623: CALL 4220 0 5
// end ;
14627: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
14628: LD_EXP 16
14632: PUSH
14633: LD_EXP 17
14637: PUSH
14638: LD_INT 2
14640: EQUAL
14641: AND
14642: PUSH
14643: LD_EXP 17
14647: PUSH
14648: LD_EXP 35
14652: LESS
14653: AND
14654: IFFALSE 14891
14656: GO 14658
14658: DISABLE
// begin wait ( 1 1$30 ) ;
14659: LD_INT 3150
14661: PPUSH
14662: CALL_OW 67
// currentWave = currentWave + 1 ;
14666: LD_ADDR_EXP 17
14670: PUSH
14671: LD_EXP 17
14675: PUSH
14676: LD_INT 1
14678: PLUS
14679: ST_TO_ADDR
// PrepareArabianVehicles ;
14680: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
14684: LD_EXP 57
14688: PPUSH
14689: LD_INT 135
14691: PUSH
14692: LD_INT 4
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 134
14701: PUSH
14702: LD_INT 19
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 132
14711: PUSH
14712: LD_INT 26
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 128
14721: PUSH
14722: LD_INT 31
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 123
14731: PUSH
14732: LD_INT 37
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 118
14741: PUSH
14742: LD_INT 45
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 112
14751: PUSH
14752: LD_INT 51
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 106
14761: PUSH
14762: LD_INT 57
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 99
14771: PUSH
14772: LD_INT 62
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 93
14781: PUSH
14782: LD_INT 67
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 86
14791: PUSH
14792: LD_INT 72
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 78
14801: PUSH
14802: LD_INT 75
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 71
14811: PUSH
14812: LD_INT 81
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 69
14821: PUSH
14822: LD_INT 88
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 71
14831: PUSH
14832: LD_INT 95
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 74
14841: PUSH
14842: LD_INT 103
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 80
14851: PUSH
14852: LD_INT 113
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: PPUSH
14878: LD_INT 0
14880: PPUSH
14881: LD_INT 1
14883: PPUSH
14884: LD_INT 11
14886: PPUSH
14887: CALL 4220 0 5
// end ;
14891: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
14892: LD_EXP 16
14896: PUSH
14897: LD_OWVAR 67
14901: PUSH
14902: LD_INT 2
14904: EQUAL
14905: AND
14906: PUSH
14907: LD_EXP 17
14911: PUSH
14912: LD_INT 2
14914: EQUAL
14915: AND
14916: PUSH
14917: LD_EXP 17
14921: PUSH
14922: LD_EXP 35
14926: LESS
14927: AND
14928: IFFALSE 15122
14930: GO 14932
14932: DISABLE
// begin PrepareArabianVehicles ;
14933: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
14937: LD_EXP 57
14941: PPUSH
14942: LD_INT 135
14944: PUSH
14945: LD_INT 4
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 134
14954: PUSH
14955: LD_INT 19
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 132
14964: PUSH
14965: LD_INT 26
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 128
14974: PUSH
14975: LD_INT 31
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 123
14984: PUSH
14985: LD_INT 37
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 118
14994: PUSH
14995: LD_INT 45
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 112
15004: PUSH
15005: LD_INT 51
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 106
15014: PUSH
15015: LD_INT 57
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 99
15024: PUSH
15025: LD_INT 62
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 104
15034: PUSH
15035: LD_INT 71
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 110
15044: PUSH
15045: LD_INT 78
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 119
15054: PUSH
15055: LD_INT 88
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 128
15064: PUSH
15065: LD_INT 97
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 135
15074: PUSH
15075: LD_INT 106
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 140
15084: PUSH
15085: LD_INT 153
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: PPUSH
15109: LD_INT 0
15111: PPUSH
15112: LD_INT 1
15114: PPUSH
15115: LD_INT 11
15117: PPUSH
15118: CALL 4220 0 5
// end ;
15122: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
15123: LD_EXP 16
15127: PUSH
15128: LD_OWVAR 67
15132: PUSH
15133: LD_INT 3
15135: EQUAL
15136: AND
15137: PUSH
15138: LD_EXP 17
15142: PUSH
15143: LD_INT 2
15145: EQUAL
15146: AND
15147: PUSH
15148: LD_EXP 17
15152: PUSH
15153: LD_EXP 35
15157: LESS
15158: AND
15159: IFFALSE 15353
15161: GO 15163
15163: DISABLE
// begin PrepareArabianVehicles ;
15164: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15168: LD_EXP 57
15172: PPUSH
15173: LD_INT 135
15175: PUSH
15176: LD_INT 4
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 134
15185: PUSH
15186: LD_INT 19
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 132
15195: PUSH
15196: LD_INT 26
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 128
15205: PUSH
15206: LD_INT 31
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 123
15215: PUSH
15216: LD_INT 37
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 118
15225: PUSH
15226: LD_INT 45
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: LD_INT 112
15235: PUSH
15236: LD_INT 51
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 106
15245: PUSH
15246: LD_INT 57
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 99
15255: PUSH
15256: LD_INT 62
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 104
15265: PUSH
15266: LD_INT 71
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 110
15275: PUSH
15276: LD_INT 78
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 119
15285: PUSH
15286: LD_INT 88
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 128
15295: PUSH
15296: LD_INT 97
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 135
15305: PUSH
15306: LD_INT 106
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 140
15315: PUSH
15316: LD_INT 153
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: PPUSH
15340: LD_INT 0
15342: PPUSH
15343: LD_INT 1
15345: PPUSH
15346: LD_INT 11
15348: PPUSH
15349: CALL 4220 0 5
// end ;
15353: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
15354: LD_EXP 16
15358: PUSH
15359: LD_EXP 17
15363: PUSH
15364: LD_INT 3
15366: EQUAL
15367: AND
15368: PUSH
15369: LD_EXP 17
15373: PUSH
15374: LD_EXP 35
15378: LESS
15379: AND
15380: IFFALSE 15457
15382: GO 15384
15384: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
15385: LD_INT 7
15387: PPUSH
15388: CALL 3281 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
15392: LD_EXP 57
15396: PPUSH
15397: LD_INT 157
15399: PUSH
15400: LD_INT 31
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 194
15409: PUSH
15410: LD_INT 124
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 174
15419: PUSH
15420: LD_INT 158
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 151
15429: PUSH
15430: LD_INT 164
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: PPUSH
15443: LD_INT 0
15445: PPUSH
15446: LD_INT 1
15448: PPUSH
15449: LD_INT 1
15451: NEG
15452: PPUSH
15453: CALL 4220 0 5
// end ;
15457: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
15458: LD_EXP 16
15462: PUSH
15463: LD_EXP 17
15467: PUSH
15468: LD_INT 3
15470: EQUAL
15471: AND
15472: PUSH
15473: LD_EXP 17
15477: PUSH
15478: LD_EXP 35
15482: LESS
15483: AND
15484: IFFALSE 15721
15486: GO 15488
15488: DISABLE
// begin wait ( 1 1$30 ) ;
15489: LD_INT 3150
15491: PPUSH
15492: CALL_OW 67
// currentWave = currentWave + 1 ;
15496: LD_ADDR_EXP 17
15500: PUSH
15501: LD_EXP 17
15505: PUSH
15506: LD_INT 1
15508: PLUS
15509: ST_TO_ADDR
// PrepareArabianVehicles ;
15510: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15514: LD_EXP 57
15518: PPUSH
15519: LD_INT 135
15521: PUSH
15522: LD_INT 4
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 134
15531: PUSH
15532: LD_INT 19
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 132
15541: PUSH
15542: LD_INT 26
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 128
15551: PUSH
15552: LD_INT 31
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 123
15561: PUSH
15562: LD_INT 37
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 118
15571: PUSH
15572: LD_INT 45
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 112
15581: PUSH
15582: LD_INT 51
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 106
15591: PUSH
15592: LD_INT 57
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 99
15601: PUSH
15602: LD_INT 62
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 93
15611: PUSH
15612: LD_INT 67
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 86
15621: PUSH
15622: LD_INT 72
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 78
15631: PUSH
15632: LD_INT 75
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 71
15641: PUSH
15642: LD_INT 81
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 69
15651: PUSH
15652: LD_INT 88
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 71
15661: PUSH
15662: LD_INT 95
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 74
15671: PUSH
15672: LD_INT 103
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 80
15681: PUSH
15682: LD_INT 113
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: PPUSH
15708: LD_INT 0
15710: PPUSH
15711: LD_INT 1
15713: PPUSH
15714: LD_INT 11
15716: PPUSH
15717: CALL 4220 0 5
// end ;
15721: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
15722: LD_EXP 16
15726: PUSH
15727: LD_OWVAR 67
15731: PUSH
15732: LD_INT 2
15734: EQUAL
15735: AND
15736: PUSH
15737: LD_EXP 17
15741: PUSH
15742: LD_INT 3
15744: EQUAL
15745: AND
15746: PUSH
15747: LD_EXP 17
15751: PUSH
15752: LD_EXP 35
15756: LESS
15757: AND
15758: IFFALSE 15952
15760: GO 15762
15762: DISABLE
// begin PrepareArabianVehicles ;
15763: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15767: LD_EXP 57
15771: PPUSH
15772: LD_INT 135
15774: PUSH
15775: LD_INT 4
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: LD_INT 134
15784: PUSH
15785: LD_INT 19
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 132
15794: PUSH
15795: LD_INT 26
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 128
15804: PUSH
15805: LD_INT 31
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 123
15814: PUSH
15815: LD_INT 37
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 118
15824: PUSH
15825: LD_INT 45
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 112
15834: PUSH
15835: LD_INT 51
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 106
15844: PUSH
15845: LD_INT 57
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 99
15854: PUSH
15855: LD_INT 62
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 104
15864: PUSH
15865: LD_INT 71
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 110
15874: PUSH
15875: LD_INT 78
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 119
15884: PUSH
15885: LD_INT 88
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 128
15894: PUSH
15895: LD_INT 97
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 135
15904: PUSH
15905: LD_INT 106
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 140
15914: PUSH
15915: LD_INT 153
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: PPUSH
15939: LD_INT 0
15941: PPUSH
15942: LD_INT 1
15944: PPUSH
15945: LD_INT 11
15947: PPUSH
15948: CALL 4220 0 5
// end ;
15952: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
15953: LD_EXP 16
15957: PUSH
15958: LD_OWVAR 67
15962: PUSH
15963: LD_INT 3
15965: EQUAL
15966: AND
15967: PUSH
15968: LD_EXP 17
15972: PUSH
15973: LD_INT 3
15975: EQUAL
15976: AND
15977: PUSH
15978: LD_EXP 17
15982: PUSH
15983: LD_EXP 35
15987: LESS
15988: AND
15989: IFFALSE 16183
15991: GO 15993
15993: DISABLE
// begin PrepareArabianVehicles ;
15994: CALL 2991 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15998: LD_EXP 57
16002: PPUSH
16003: LD_INT 135
16005: PUSH
16006: LD_INT 4
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 134
16015: PUSH
16016: LD_INT 19
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 132
16025: PUSH
16026: LD_INT 26
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: LD_INT 128
16035: PUSH
16036: LD_INT 31
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 123
16045: PUSH
16046: LD_INT 37
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 118
16055: PUSH
16056: LD_INT 45
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 112
16065: PUSH
16066: LD_INT 51
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 106
16075: PUSH
16076: LD_INT 57
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: LD_INT 99
16085: PUSH
16086: LD_INT 62
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 104
16095: PUSH
16096: LD_INT 71
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 110
16105: PUSH
16106: LD_INT 78
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 119
16115: PUSH
16116: LD_INT 88
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 128
16125: PUSH
16126: LD_INT 97
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 135
16135: PUSH
16136: LD_INT 106
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 140
16145: PUSH
16146: LD_INT 153
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: PPUSH
16170: LD_INT 0
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: LD_INT 11
16178: PPUSH
16179: CALL 4220 0 5
// end ;
16183: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
16184: LD_EXP 50
16188: PPUSH
16189: CALL_OW 305
16193: PUSH
16194: LD_EXP 21
16198: PUSH
16199: LD_INT 5
16201: LESS
16202: AND
16203: IFFALSE 16213
16205: GO 16207
16207: DISABLE
// begin PrepareArabianKiller ;
16208: CALL 3490 0 0
// enable ;
16212: ENABLE
// end ;
16213: END
