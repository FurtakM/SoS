// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export platonovOpinion , kurinOpinion , meetBelkovBrother ; export heikeHeavyLosses ; export tanksFromPreviousMission ; export canExitMap , arabianCanExitMap ; export startEvacuation , namedBase ; export evacuatedCargos , canStealCargo , stealWarmCount , stealCargos , cargosToTriggerAttacks ; export dial_labUpgradedBlock , dial_contactBlock ; export enableAttacks , firstAttack , currentWave ; export saveGaydar , gaydarWaitForBurlak ; export killedArabianUnits , arabianKillers ; export lostUnits ; export achievement_ConstructedTurrets ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 263 0 0
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_PlatonovOpinion_9
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// kurinOpinion = LoadVariable ( 03_KurinOpinion_1 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 03_KurinOpinion_1
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_MeetBelkovBrother_6
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// tanksFromPreviousMission = LoadVariable ( 03_SavedVehicles_2 , [ ] ) ;
  72: LD_ADDR_EXP 5
  76: PUSH
  77: LD_STRING 03_SavedVehicles_2
  79: PPUSH
  80: EMPTY
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// heikeHeavyLosses = 0 ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// canExitMap = false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// arabianCanExitMap = false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// namedBase = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// startEvacuation = false ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// stealCargos = [ ] ;
 127: LD_ADDR_EXP 13
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// stealWarmCount = 0 ;
 134: LD_ADDR_EXP 12
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// evacuatedCargos = 0 ;
 142: LD_ADDR_EXP 10
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// canStealCargo = false ;
 150: LD_ADDR_EXP 11
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_labUpgradedBlock = false ;
 158: LD_ADDR_EXP 15
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_contactBlock = false ;
 166: LD_ADDR_EXP 16
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// currentWave = 0 ;
 174: LD_ADDR_EXP 19
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// firstAttack = false ;
 182: LD_ADDR_EXP 18
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// saveGaydar = false ;
 190: LD_ADDR_EXP 20
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// gaydarWaitForBurlak = false ;
 198: LD_ADDR_EXP 21
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// killedArabianUnits = 0 ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// arabianKillers = 0 ;
 214: LD_ADDR_EXP 23
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// lostUnits = 0 ;
 222: LD_ADDR_EXP 24
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// enableAttacks = false ;
 230: LD_ADDR_EXP 17
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// achievement_ConstructedTurrets = 0 ;
 238: LD_ADDR_EXP 25
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareRussians ;
 246: CALL 1495 0 0
// Nef_PrepareNature ;
 250: CALL 4397 0 0
// MissionIntro ;
 254: CALL 10406 0 0
// end ; end_of_file
 258: LD_VAR 0 1
 262: RET
// export function InitMapConfig ; begin
 263: LD_INT 0
 265: PPUSH
// BaseMapConfig ;
 266: CALL 279 0 0
// MissionMapConfig ;
 270: CALL 381 0 0
// end ;
 274: LD_VAR 0 1
 278: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 279: LD_INT 0
 281: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 0 ] ;
 282: LD_ADDR_EXP 26
 286: PUSH
 287: LD_INT 8
 289: PUSH
 290: LD_INT 12
 292: PUSH
 293: LD_INT 6
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_INT 0
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 309: LD_ADDR_EXP 27
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 332: LD_ADDR_EXP 28
 336: PUSH
 337: LD_INT 5
 339: NEG
 340: PPUSH
 341: LD_INT 5
 343: PPUSH
 344: CALL_OW 12
 348: PUSH
 349: EMPTY
 350: LIST
 351: ST_TO_ADDR
// debugMode = 0 ;
 352: LD_ADDR_EXP 31
 356: PUSH
 357: LD_INT 0
 359: ST_TO_ADDR
// missionPrefix = 04_ ;
 360: LD_ADDR_EXP 29
 364: PUSH
 365: LD_STRING 04_
 367: ST_TO_ADDR
// previousMissionPrefix = 03_ ;
 368: LD_ADDR_EXP 30
 372: PUSH
 373: LD_STRING 03_
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// export enemySkillLevel , enemySkillLevelFlame , russianCargoPath1 , russianCargoPath2 ; export groupsToEvacuation ; export cargoChanceSpawn ; export enemyWaves , enemyGroupVehicles ; export arabianTroopsMin , arabianTroopsMax ; function MissionMapConfig ; begin
 381: LD_INT 0
 383: PPUSH
// enemySkillLevel = [ 2 , 3 , 3 ] [ Difficulty ] ;
 384: LD_ADDR_EXP 32
 388: PUSH
 389: LD_INT 2
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 3
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: LD_OWVAR 67
 407: ARRAY
 408: ST_TO_ADDR
// enemySkillLevelFlame = [ - 2 , - 1 , 0 ] [ Difficulty ] ;
 409: LD_ADDR_EXP 33
 413: PUSH
 414: LD_INT 2
 416: NEG
 417: PUSH
 418: LD_INT 1
 420: NEG
 421: PUSH
 422: LD_INT 0
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// russianCargoPath1 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] , [ 84 , 121 ] , [ 89 , 132 ] , [ 92 , 142 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 436: LD_ADDR_EXP 34
 440: PUSH
 441: LD_INT 135
 443: PUSH
 444: LD_INT 8
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 135
 453: PUSH
 454: LD_INT 4
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 134
 463: PUSH
 464: LD_INT 19
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 132
 473: PUSH
 474: LD_INT 26
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PUSH
 481: LD_INT 128
 483: PUSH
 484: LD_INT 31
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: PUSH
 491: LD_INT 123
 493: PUSH
 494: LD_INT 37
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 118
 503: PUSH
 504: LD_INT 45
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: LD_INT 112
 513: PUSH
 514: LD_INT 51
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 106
 523: PUSH
 524: LD_INT 57
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 99
 533: PUSH
 534: LD_INT 62
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 93
 543: PUSH
 544: LD_INT 67
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: PUSH
 551: LD_INT 86
 553: PUSH
 554: LD_INT 72
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 78
 563: PUSH
 564: LD_INT 75
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 71
 573: PUSH
 574: LD_INT 81
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 69
 583: PUSH
 584: LD_INT 88
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 71
 593: PUSH
 594: LD_INT 95
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: LD_INT 74
 603: PUSH
 604: LD_INT 103
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PUSH
 611: LD_INT 80
 613: PUSH
 614: LD_INT 113
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 84
 623: PUSH
 624: LD_INT 121
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 89
 633: PUSH
 634: LD_INT 132
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 92
 643: PUSH
 644: LD_INT 142
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 93
 653: PUSH
 654: LD_INT 151
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: LD_INT 91
 663: PUSH
 664: LD_INT 157
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 90
 673: PUSH
 674: LD_INT 163
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 93
 683: PUSH
 684: LD_INT 171
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 92
 693: PUSH
 694: LD_INT 177
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: ST_TO_ADDR
// russianCargoPath2 = [ [ 135 , 8 ] , [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 141 , 120 ] , [ 143 , 132 ] , [ 143 , 142 ] , [ 140 , 149 ] , [ 132 , 153 ] , [ 125 , 155 ] , [ 115 , 154 ] , [ 105 , 153 ] , [ 93 , 151 ] , [ 91 , 157 ] , [ 90 , 163 ] , [ 93 , 171 ] , [ 92 , 177 ] ] ;
 729: LD_ADDR_EXP 35
 733: PUSH
 734: LD_INT 135
 736: PUSH
 737: LD_INT 8
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 135
 746: PUSH
 747: LD_INT 4
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: LD_INT 134
 756: PUSH
 757: LD_INT 19
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 132
 766: PUSH
 767: LD_INT 26
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 128
 776: PUSH
 777: LD_INT 31
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 123
 786: PUSH
 787: LD_INT 37
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 118
 796: PUSH
 797: LD_INT 45
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 112
 806: PUSH
 807: LD_INT 51
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 106
 816: PUSH
 817: LD_INT 57
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 99
 826: PUSH
 827: LD_INT 62
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 104
 836: PUSH
 837: LD_INT 71
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 110
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 119
 856: PUSH
 857: LD_INT 88
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 128
 866: PUSH
 867: LD_INT 97
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PUSH
 874: LD_INT 135
 876: PUSH
 877: LD_INT 106
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 141
 886: PUSH
 887: LD_INT 120
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 143
 896: PUSH
 897: LD_INT 132
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 143
 906: PUSH
 907: LD_INT 142
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 140
 916: PUSH
 917: LD_INT 149
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 132
 926: PUSH
 927: LD_INT 153
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 125
 936: PUSH
 937: LD_INT 155
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: LD_INT 115
 946: PUSH
 947: LD_INT 154
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 105
 956: PUSH
 957: LD_INT 153
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 93
 966: PUSH
 967: LD_INT 151
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 91
 976: PUSH
 977: LD_INT 157
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 163
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 93
 996: PUSH
 997: LD_INT 171
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 92
1006: PUSH
1007: LD_INT 177
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: ST_TO_ADDR
// groupsToEvacuation = [ 40 , 35 , 30 ] [ Difficulty ] ;
1044: LD_ADDR_EXP 36
1048: PUSH
1049: LD_INT 40
1051: PUSH
1052: LD_INT 35
1054: PUSH
1055: LD_INT 30
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_OWVAR 67
1067: ARRAY
1068: ST_TO_ADDR
// cargoChanceSpawn = 50 ;
1069: LD_ADDR_EXP 37
1073: PUSH
1074: LD_INT 50
1076: ST_TO_ADDR
// cargosToTriggerAttacks = [ 21 , 19 , 17 ] [ Difficulty ] ;
1077: LD_ADDR_EXP 14
1081: PUSH
1082: LD_INT 21
1084: PUSH
1085: LD_INT 19
1087: PUSH
1088: LD_INT 17
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_OWVAR 67
1100: ARRAY
1101: ST_TO_ADDR
// enemyWaves = [ 3 , 4 , 4 ] [ Difficulty ] ;
1102: LD_ADDR_EXP 38
1106: PUSH
1107: LD_INT 3
1109: PUSH
1110: LD_INT 4
1112: PUSH
1113: LD_INT 4
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_OWVAR 67
1125: ARRAY
1126: ST_TO_ADDR
// enemyGroupVehicles = [ 3 , 4 , 4 ] [ Difficulty ] ;
1127: LD_ADDR_EXP 39
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: LD_INT 4
1137: PUSH
1138: LD_INT 4
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_OWVAR 67
1150: ARRAY
1151: ST_TO_ADDR
// arabianTroopsMin = 7 ;
1152: LD_ADDR_EXP 40
1156: PUSH
1157: LD_INT 7
1159: ST_TO_ADDR
// arabianTroopsMax = 7 ;
1160: LD_ADDR_EXP 41
1164: PUSH
1165: LD_INT 7
1167: ST_TO_ADDR
// end ;
1168: LD_VAR 0 1
1172: RET
// every 0 0$1 trigger debugMode do var i ;
1173: LD_EXP 31
1177: IFFALSE 1492
1179: GO 1181
1181: DISABLE
1182: LD_INT 0
1184: PPUSH
// begin enable ;
1185: ENABLE
// FogOff ( your_side ) ;
1186: LD_OWVAR 2
1190: PPUSH
1191: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1195: LD_ADDR_VAR 0 1
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_OWVAR 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 2
1214: PUSH
1215: LD_INT 21
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 21
1227: PUSH
1228: LD_INT 2
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: PUSH
1249: FOR_IN
1250: IFFALSE 1266
// SetLives ( i , 1000 ) ;
1252: LD_VAR 0 1
1256: PPUSH
1257: LD_INT 1000
1259: PPUSH
1260: CALL_OW 234
1264: GO 1249
1266: POP
1267: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
1268: LD_ADDR_VAR 0 1
1272: PUSH
1273: LD_INT 22
1275: PUSH
1276: LD_OWVAR 2
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: PUSH
1304: FOR_IN
1305: IFFALSE 1369
// begin SetSkill ( i , skill_combat , 10 ) ;
1307: LD_VAR 0 1
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_INT 10
1317: PPUSH
1318: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
1322: LD_VAR 0 1
1326: PPUSH
1327: LD_INT 2
1329: PPUSH
1330: LD_INT 10
1332: PPUSH
1333: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
1337: LD_VAR 0 1
1341: PPUSH
1342: LD_INT 3
1344: PPUSH
1345: LD_INT 10
1347: PPUSH
1348: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
1352: LD_VAR 0 1
1356: PPUSH
1357: LD_INT 4
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: CALL_OW 237
// end ;
1367: GO 1304
1369: POP
1370: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1371: LD_ADDR_VAR 0 1
1375: PUSH
1376: LD_INT 22
1378: PUSH
1379: LD_OWVAR 2
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: LD_INT 30
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 30
1403: PUSH
1404: LD_INT 1
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 69
1424: PUSH
1425: FOR_IN
1426: IFFALSE 1490
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1428: LD_VAR 0 1
1432: PPUSH
1433: CALL_OW 274
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 9999
1443: PPUSH
1444: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 274
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 9999
1463: PPUSH
1464: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1468: LD_VAR 0 1
1472: PPUSH
1473: CALL_OW 274
1477: PPUSH
1478: LD_INT 3
1480: PPUSH
1481: LD_INT 9999
1483: PPUSH
1484: CALL_OW 277
// end ;
1488: GO 1425
1490: POP
1491: POP
// end ; end_of_file
1492: PPOPN 1
1494: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ; export Kuzmov ; export other_survivors ; export other_kirov_survivors ; export Popov , Platonov , Gaydar ; export burlakTeam , popovTeam , secondBaseTeam , secondBaseDepot ; export dialogRus ; export firstCargo ; export ruCars ; export randomsToSave ; export function PrepareRussians ; begin
1495: LD_INT 0
1497: PPUSH
// randomsToSave = [ ] ;
1498: LD_ADDR_EXP 62
1502: PUSH
1503: EMPTY
1504: ST_TO_ADDR
// secondBaseTeam = [ ] ;
1505: LD_ADDR_EXP 57
1509: PUSH
1510: EMPTY
1511: ST_TO_ADDR
// ruCars = [ ] ;
1512: LD_ADDR_EXP 61
1516: PUSH
1517: EMPTY
1518: ST_TO_ADDR
// LoadVehiclesFromPreviousMission ;
1519: CALL 2327 0 0
// PrepareHeroes ;
1523: CALL 1532 0 0
// end ;
1527: LD_VAR 0 1
1531: RET
// function PrepareHeroes ; var i , current ; begin
1532: LD_INT 0
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation = 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
1553: LD_ADDR_EXP 42
1557: PUSH
1558: LD_STRING Burlak
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_INT 3
1566: PPUSH
1567: CALL 9385 0 3
1571: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true , class_mechanic ) ;
1572: LD_ADDR_EXP 43
1576: PUSH
1577: LD_STRING Gnyevko
1579: PPUSH
1580: LD_INT 1
1582: PPUSH
1583: LD_INT 3
1585: PPUSH
1586: CALL 9385 0 3
1590: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true , class_mechanic ) ;
1591: LD_ADDR_EXP 45
1595: PUSH
1596: LD_STRING Kovalyuk
1598: PPUSH
1599: LD_INT 1
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: CALL 9385 0 3
1609: ST_TO_ADDR
// Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1610: LD_ADDR_EXP 44
1614: PUSH
1615: LD_STRING Kirilenkova
1617: PPUSH
1618: LD_INT 1
1620: PPUSH
1621: LD_INT 4
1623: PPUSH
1624: CALL 9385 0 3
1628: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1629: LD_ADDR_EXP 46
1633: PUSH
1634: LD_STRING Belkov
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: CALL 9385 0 3
1647: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1648: LD_ADDR_EXP 47
1652: PUSH
1653: LD_STRING Belkov2
1655: PPUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: CALL 9385 0 3
1666: ST_TO_ADDR
// Scholtze := PrepareUnitExt ( Scholtze , true , class_scientistic ) ;
1667: LD_ADDR_EXP 48
1671: PUSH
1672: LD_STRING Scholtze
1674: PPUSH
1675: LD_INT 1
1677: PPUSH
1678: LD_INT 4
1680: PPUSH
1681: CALL 9385 0 3
1685: ST_TO_ADDR
// Popov := PrepareUnitExt ( Popov , false , 0 ) ;
1686: LD_ADDR_EXP 52
1690: PUSH
1691: LD_STRING Popov
1693: PPUSH
1694: LD_INT 0
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL 9385 0 3
1704: ST_TO_ADDR
// Platonov := PrepareUnitExt ( Platonov , false , 0 ) ;
1705: LD_ADDR_EXP 53
1709: PUSH
1710: LD_STRING Platonov
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL 9385 0 3
1723: ST_TO_ADDR
// uc_side = 6 ;
1724: LD_ADDR_OWVAR 20
1728: PUSH
1729: LD_INT 6
1731: ST_TO_ADDR
// Gaydar := PrepareUnitExt ( Gaydar , false , 0 ) ;
1732: LD_ADDR_EXP 54
1736: PUSH
1737: LD_STRING Gaydar
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: LD_INT 0
1745: PPUSH
1746: CALL 9385 0 3
1750: ST_TO_ADDR
// Kuzmov := PrepareUnitExt ( Kuzmov , false , 0 ) ;
1751: LD_ADDR_EXP 49
1755: PUSH
1756: LD_STRING Kuzmov
1758: PPUSH
1759: LD_INT 0
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL 9385 0 3
1769: ST_TO_ADDR
// PlaceUnitXYR ( Kuzmov , 109 , 108 , 5 , false ) ;
1770: LD_EXP 49
1774: PPUSH
1775: LD_INT 109
1777: PPUSH
1778: LD_INT 108
1780: PPUSH
1781: LD_INT 5
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 50
// ComHold ( Kuzmov ) ;
1791: LD_EXP 49
1795: PPUSH
1796: CALL_OW 140
// uc_side = 3 ;
1800: LD_ADDR_OWVAR 20
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// PlaceUnitsArea ( [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Popov ] , RussianSpawnArea1 , false ) ;
1808: LD_EXP 42
1812: PUSH
1813: LD_EXP 43
1817: PUSH
1818: LD_EXP 44
1822: PUSH
1823: LD_EXP 45
1827: PUSH
1828: LD_EXP 46
1832: PUSH
1833: LD_EXP 47
1837: PUSH
1838: LD_EXP 48
1842: PUSH
1843: LD_EXP 52
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: LD_INT 2
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL 9468 0 3
// other_survivors = CreateCharacterSet ( 03_other_survivors ) ;
1868: LD_ADDR_EXP 50
1872: PUSH
1873: LD_STRING 03_other_survivors
1875: PPUSH
1876: CALL_OW 31
1880: ST_TO_ADDR
// other_kirov_survivors = CreateCharacterSet ( 03_other_kirov ) ;
1881: LD_ADDR_EXP 51
1885: PUSH
1886: LD_STRING 03_other_kirov
1888: PPUSH
1889: CALL_OW 31
1893: ST_TO_ADDR
// for i in other_survivors do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: LD_EXP 50
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1970
// begin if ruCars then
1907: LD_EXP 61
1911: IFFALSE 1953
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_EXP 61
1922: PUSH
1923: LD_INT 1
1925: ARRAY
1926: PPUSH
1927: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
1931: LD_ADDR_EXP 61
1935: PUSH
1936: LD_EXP 61
1940: PUSH
1941: LD_EXP 61
1945: PUSH
1946: LD_INT 1
1948: ARRAY
1949: DIFF
1950: ST_TO_ADDR
// end else
1951: GO 1968
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_INT 2
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 49
// end ;
1968: GO 1904
1970: POP
1971: POP
// for i in other_kirov_survivors do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: LD_EXP 51
1981: PUSH
1982: FOR_IN
1983: IFFALSE 2048
// begin if ruCars then
1985: LD_EXP 61
1989: IFFALSE 2031
// begin PlaceHumanInUnit ( i , ruCars [ 1 ] ) ;
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_EXP 61
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2009: LD_ADDR_EXP 61
2013: PUSH
2014: LD_EXP 61
2018: PUSH
2019: LD_EXP 61
2023: PUSH
2024: LD_INT 1
2026: ARRAY
2027: DIFF
2028: ST_TO_ADDR
// end else
2029: GO 2046
// PlaceUnitArea ( i , RussianSpawnArea1 , false ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ;
2046: GO 1982
2048: POP
2049: POP
// PrepareSoldier ( sex_male , 1 ) ;
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 381
// dialogRus = CreateHuman ;
2060: LD_ADDR_EXP 59
2064: PUSH
2065: CALL_OW 44
2069: ST_TO_ADDR
// if other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] < 8 then
2070: LD_EXP 50
2074: PUSH
2075: LD_EXP 51
2079: PLUS
2080: PUSH
2081: LD_EXP 43
2085: PUSH
2086: LD_EXP 44
2090: PUSH
2091: LD_EXP 45
2095: PUSH
2096: LD_EXP 46
2100: PUSH
2101: LD_EXP 47
2105: PUSH
2106: LD_EXP 48
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: PLUS
2119: PUSH
2120: LD_INT 8
2122: LESS
2123: IFFALSE 2322
// begin current = other_survivors + other_kirov_survivors + [ Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 50
2134: PUSH
2135: LD_EXP 51
2139: PLUS
2140: PUSH
2141: LD_EXP 43
2145: PUSH
2146: LD_EXP 44
2150: PUSH
2151: LD_EXP 45
2155: PUSH
2156: LD_EXP 46
2160: PUSH
2161: LD_EXP 47
2165: PUSH
2166: LD_EXP 48
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PLUS
2179: ST_TO_ADDR
// current = 8 - current ;
2180: LD_ADDR_VAR 0 3
2184: PUSH
2185: LD_INT 8
2187: PUSH
2188: LD_VAR 0 3
2192: MINUS
2193: ST_TO_ADDR
// for i := 1 to current do
2194: LD_ADDR_VAR 0 2
2198: PUSH
2199: DOUBLE
2200: LD_INT 1
2202: DEC
2203: ST_TO_ADDR
2204: LD_VAR 0 3
2208: PUSH
2209: FOR_TO
2210: IFFALSE 2320
// begin uc_nation = 3 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 3
2219: ST_TO_ADDR
// uc_side = 3 ;
2220: LD_ADDR_OWVAR 20
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 3 ) ) ;
2228: LD_INT 0
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: LD_INT 4
2236: PPUSH
2237: CALL_OW 12
2241: PPUSH
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 3
2247: PPUSH
2248: CALL_OW 12
2252: PPUSH
2253: CALL_OW 380
// if ruCars then
2257: LD_EXP 61
2261: IFFALSE 2303
// begin PlaceHumanInUnit ( CreateHuman , ruCars [ 1 ] ) ;
2263: CALL_OW 44
2267: PPUSH
2268: LD_EXP 61
2272: PUSH
2273: LD_INT 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 52
// ruCars = ruCars diff ruCars [ 1 ] ;
2281: LD_ADDR_EXP 61
2285: PUSH
2286: LD_EXP 61
2290: PUSH
2291: LD_EXP 61
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: DIFF
2300: ST_TO_ADDR
// end else
2301: GO 2318
// PlaceUnitArea ( CreateHuman , RussianSpawnArea1 , false ) ;
2303: CALL_OW 44
2307: PPUSH
2308: LD_INT 2
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 49
// end ;
2318: GO 2209
2320: POP
2321: POP
// end ; end ;
2322: LD_VAR 0 1
2326: RET
// export function LoadVehiclesFromPreviousMission ; var i , car ; begin
2327: LD_INT 0
2329: PPUSH
2330: PPUSH
2331: PPUSH
// uc_side = 3 ;
2332: LD_ADDR_OWVAR 20
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// uc_nation = 3 ;
2340: LD_ADDR_OWVAR 21
2344: PUSH
2345: LD_INT 3
2347: ST_TO_ADDR
// for i := 1 to tanksFromPreviousMission do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_EXP 5
2362: PUSH
2363: FOR_TO
2364: IFFALSE 2513
// begin vc_chassis := tanksFromPreviousMission [ i ] [ 1 ] ;
2366: LD_ADDR_OWVAR 37
2370: PUSH
2371: LD_EXP 5
2375: PUSH
2376: LD_VAR 0 2
2380: ARRAY
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: ST_TO_ADDR
// vc_engine = tanksFromPreviousMission [ i ] [ 2 ] ;
2386: LD_ADDR_OWVAR 39
2390: PUSH
2391: LD_EXP 5
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: PUSH
2402: LD_INT 2
2404: ARRAY
2405: ST_TO_ADDR
// vc_control = tanksFromPreviousMission [ i ] [ 3 ] ;
2406: LD_ADDR_OWVAR 38
2410: PUSH
2411: LD_EXP 5
2415: PUSH
2416: LD_VAR 0 2
2420: ARRAY
2421: PUSH
2422: LD_INT 3
2424: ARRAY
2425: ST_TO_ADDR
// vc_weapon := tanksFromPreviousMission [ i ] [ 4 ] ;
2426: LD_ADDR_OWVAR 40
2430: PUSH
2431: LD_EXP 5
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 4
2444: ARRAY
2445: ST_TO_ADDR
// uc_direction := 3 ;
2446: LD_ADDR_OWVAR 24
2450: PUSH
2451: LD_INT 3
2453: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 30 ) ;
2454: LD_ADDR_OWVAR 41
2458: PUSH
2459: LD_INT 25
2461: PPUSH
2462: LD_INT 30
2464: PPUSH
2465: CALL_OW 12
2469: ST_TO_ADDR
// car := CreateVehicle ;
2470: LD_ADDR_VAR 0 3
2474: PUSH
2475: CALL_OW 45
2479: ST_TO_ADDR
// ruCars := ruCars ^ car ;
2480: LD_ADDR_EXP 61
2484: PUSH
2485: LD_EXP 61
2489: PUSH
2490: LD_VAR 0 3
2494: ADD
2495: ST_TO_ADDR
// PlaceUnitArea ( car , RussianSpawnArea1 , false ) ;
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_INT 2
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL_OW 49
// end ;
2511: GO 2363
2513: POP
2514: POP
// end ;
2515: LD_VAR 0 1
2519: RET
// export function CreateEvacuateUnit ; var i , rnd , rnd2 , rnd3 , unit , vehicle , unitsToEvacuate ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
2528: PPUSH
2529: PPUSH
// rnd = rand ( 1 , 4 ) ;
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: LD_INT 1
2537: PPUSH
2538: LD_INT 4
2540: PPUSH
2541: CALL_OW 12
2545: ST_TO_ADDR
// uc_side = 6 ;
2546: LD_ADDR_OWVAR 20
2550: PUSH
2551: LD_INT 6
2553: ST_TO_ADDR
// uc_nation = 3 ;
2554: LD_ADDR_OWVAR 21
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// if rnd < 4 then
2562: LD_VAR 0 3
2566: PUSH
2567: LD_INT 4
2569: LESS
2570: IFFALSE 2946
// begin vc_chassis = ru_medium_wheeled ;
2572: LD_ADDR_OWVAR 37
2576: PUSH
2577: LD_INT 21
2579: ST_TO_ADDR
// vc_control = control_manual ;
2580: LD_ADDR_OWVAR 38
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// vc_engine = engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// rnd3 = rand ( 1 , 100 ) ;
2596: LD_ADDR_VAR 0 5
2600: PUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 100
2606: PPUSH
2607: CALL_OW 12
2611: ST_TO_ADDR
// if rnd3 < cargoChanceSpawn + 1 then
2612: LD_VAR 0 5
2616: PUSH
2617: LD_EXP 37
2621: PUSH
2622: LD_INT 1
2624: PLUS
2625: LESS
2626: IFFALSE 2638
// vc_weapon = ru_cargo_bay else
2628: LD_ADDR_OWVAR 40
2632: PUSH
2633: LD_INT 51
2635: ST_TO_ADDR
2636: GO 2669
// vc_weapon = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ;
2638: LD_ADDR_OWVAR 40
2642: PUSH
2643: LD_INT 42
2645: PUSH
2646: LD_INT 43
2648: PUSH
2649: LD_INT 44
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 3
2662: PPUSH
2663: CALL_OW 12
2667: ARRAY
2668: ST_TO_ADDR
// vehicle = CreateVehicle ;
2669: LD_ADDR_VAR 0 7
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( vehicle , 3 ) ;
2679: LD_VAR 0 7
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( vehicle , RussianSpawnArea2 , false ) ;
2691: LD_VAR 0 7
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: LD_INT 4
2714: PPUSH
2715: CALL_OW 12
2719: PPUSH
2720: LD_INT 2
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: CALL_OW 12
2730: PPUSH
2731: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , vehicle ) ;
2735: CALL_OW 44
2739: PPUSH
2740: LD_VAR 0 7
2744: PPUSH
2745: CALL_OW 52
// if vc_weapon = ru_cargo_bay then
2749: LD_OWVAR 40
2753: PUSH
2754: LD_INT 51
2756: EQUAL
2757: IFFALSE 2774
// AddCargo ( vehicle , mat_cans , 100 ) ;
2759: LD_VAR 0 7
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// SetLives ( vehicle , rand ( 500 , 1000 ) ) ;
2774: LD_VAR 0 7
2778: PPUSH
2779: LD_INT 500
2781: PPUSH
2782: LD_INT 1000
2784: PPUSH
2785: CALL_OW 12
2789: PPUSH
2790: CALL_OW 234
// rnd = rand ( 1 , 2 ) ;
2794: LD_ADDR_VAR 0 3
2798: PUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_INT 2
2804: PPUSH
2805: CALL_OW 12
2809: ST_TO_ADDR
// if rnd = 1 then
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 1
2817: EQUAL
2818: IFFALSE 2883
// for i := 3 to russianCargoPath1 do
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: DOUBLE
2826: LD_INT 3
2828: DEC
2829: ST_TO_ADDR
2830: LD_EXP 34
2834: PUSH
2835: FOR_TO
2836: IFFALSE 2879
// AddComMoveXY ( vehicle , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
2838: LD_VAR 0 7
2842: PPUSH
2843: LD_EXP 34
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: PUSH
2854: LD_INT 1
2856: ARRAY
2857: PPUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 2
2867: ARRAY
2868: PUSH
2869: LD_INT 2
2871: ARRAY
2872: PPUSH
2873: CALL_OW 171
2877: GO 2835
2879: POP
2880: POP
2881: GO 2944
// for i := 3 to russianCargoPath2 do
2883: LD_ADDR_VAR 0 2
2887: PUSH
2888: DOUBLE
2889: LD_INT 3
2891: DEC
2892: ST_TO_ADDR
2893: LD_EXP 35
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2942
// AddComMoveXY ( vehicle , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
2901: LD_VAR 0 7
2905: PPUSH
2906: LD_EXP 35
2910: PUSH
2911: LD_VAR 0 2
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_EXP 35
2925: PUSH
2926: LD_VAR 0 2
2930: ARRAY
2931: PUSH
2932: LD_INT 2
2934: ARRAY
2935: PPUSH
2936: CALL_OW 171
2940: GO 2898
2942: POP
2943: POP
// end else
2944: GO 3285
// begin for i := 1 to rand ( 1 , 3 ) do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 1
2958: PPUSH
2959: LD_INT 3
2961: PPUSH
2962: CALL_OW 12
2966: PUSH
2967: FOR_TO
2968: IFFALSE 3046
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 3 ) ) ;
2970: LD_INT 0
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: LD_INT 4
2978: PPUSH
2979: CALL_OW 12
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: LD_INT 3
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: CALL_OW 380
// unit = CreateHuman ;
2999: LD_ADDR_VAR 0 6
3003: PUSH
3004: CALL_OW 44
3008: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3009: LD_VAR 0 6
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL_OW 49
// SetLives ( unit , rand ( 500 , 1000 ) ) ;
3024: LD_VAR 0 6
3028: PPUSH
3029: LD_INT 500
3031: PPUSH
3032: LD_INT 1000
3034: PPUSH
3035: CALL_OW 12
3039: PPUSH
3040: CALL_OW 234
// end ;
3044: GO 2967
3046: POP
3047: POP
// rnd2 = rand ( 1 , 2 ) ;
3048: LD_ADDR_VAR 0 4
3052: PUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 12
3063: ST_TO_ADDR
// unitsToEvacuate = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) ;
3064: LD_ADDR_VAR 0 8
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 6
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 56
3091: PUSH
3092: EMPTY
3093: LIST
3094: PUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 60
3100: PUSH
3101: EMPTY
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: PPUSH
3114: CALL_OW 69
3118: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff popovTeam ;
3119: LD_ADDR_VAR 0 8
3123: PUSH
3124: LD_VAR 0 8
3128: PUSH
3129: LD_EXP 56
3133: DIFF
3134: ST_TO_ADDR
// unitsToEvacuate = unitsToEvacuate diff secondBaseTeam ;
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: LD_VAR 0 8
3144: PUSH
3145: LD_EXP 57
3149: DIFF
3150: ST_TO_ADDR
// if rnd2 = 1 then
3151: LD_VAR 0 4
3155: PUSH
3156: LD_INT 1
3158: EQUAL
3159: IFFALSE 3224
// for i := 3 to russianCargoPath1 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 3
3169: DEC
3170: ST_TO_ADDR
3171: LD_EXP 34
3175: PUSH
3176: FOR_TO
3177: IFFALSE 3220
// AddComMoveXY ( unitsToEvacuate , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) else
3179: LD_VAR 0 8
3183: PPUSH
3184: LD_EXP 34
3188: PUSH
3189: LD_VAR 0 2
3193: ARRAY
3194: PUSH
3195: LD_INT 1
3197: ARRAY
3198: PPUSH
3199: LD_EXP 34
3203: PUSH
3204: LD_VAR 0 2
3208: ARRAY
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: CALL_OW 171
3218: GO 3176
3220: POP
3221: POP
3222: GO 3285
// for i := 3 to russianCargoPath2 do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 3
3232: DEC
3233: ST_TO_ADDR
3234: LD_EXP 35
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3283
// AddComMoveXY ( unitsToEvacuate , russianCargoPath2 [ i ] [ 1 ] , russianCargoPath2 [ i ] [ 2 ] ) ;
3242: LD_VAR 0 8
3246: PPUSH
3247: LD_EXP 35
3251: PUSH
3252: LD_VAR 0 2
3256: ARRAY
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: LD_EXP 35
3266: PUSH
3267: LD_VAR 0 2
3271: ARRAY
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: CALL_OW 171
3281: GO 3239
3283: POP
3284: POP
// end ; end ;
3285: LD_VAR 0 1
3289: RET
// export function PrepareSecondBaseTeam ; var i , unit ; begin
3290: LD_INT 0
3292: PPUSH
3293: PPUSH
3294: PPUSH
// for i := 1 to 2 do
3295: LD_ADDR_VAR 0 2
3299: PUSH
3300: DOUBLE
3301: LD_INT 1
3303: DEC
3304: ST_TO_ADDR
3305: LD_INT 2
3307: PUSH
3308: FOR_TO
3309: IFFALSE 3375
// begin PrepareHuman ( false , 1 , rand ( 2 , 3 ) ) ;
3311: LD_INT 0
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: CALL_OW 12
3327: PPUSH
3328: CALL_OW 380
// unit = CreateHuman ;
3332: LD_ADDR_VAR 0 3
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3342: LD_VAR 0 3
3346: PPUSH
3347: LD_INT 3
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3357: LD_ADDR_EXP 57
3361: PUSH
3362: LD_EXP 57
3366: PUSH
3367: LD_VAR 0 3
3371: ADD
3372: ST_TO_ADDR
// end ;
3373: GO 3308
3375: POP
3376: POP
// PrepareHuman ( false , 2 , rand ( 2 , 3 ) ) ;
3377: LD_INT 0
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: LD_INT 2
3385: PPUSH
3386: LD_INT 3
3388: PPUSH
3389: CALL_OW 12
3393: PPUSH
3394: CALL_OW 380
// unit = CreateHuman ;
3398: LD_ADDR_VAR 0 3
3402: PUSH
3403: CALL_OW 44
3407: ST_TO_ADDR
// PlaceUnitArea ( unit , RussianSpawnArea2 , false ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 49
// secondBaseTeam = secondBaseTeam ^ unit ;
3423: LD_ADDR_EXP 57
3427: PUSH
3428: LD_EXP 57
3432: PUSH
3433: LD_VAR 0 3
3437: ADD
3438: ST_TO_ADDR
// ComMoveXY ( secondBaseTeam , 100 , 54 ) ;
3439: LD_EXP 57
3443: PPUSH
3444: LD_INT 100
3446: PPUSH
3447: LD_INT 54
3449: PPUSH
3450: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 95 , 52 , 2 ) ;
3454: LD_EXP 57
3458: PPUSH
3459: LD_INT 25
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 72
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 95
3479: PPUSH
3480: LD_INT 52
3482: PPUSH
3483: LD_INT 2
3485: PPUSH
3486: CALL_OW 205
// end ; end_of_file
3490: LD_VAR 0 1
3494: RET
// export Heike ; export firstAttackGroup ; export function PrepareHeike ; begin
3495: LD_INT 0
3497: PPUSH
// uc_side = 2 ;
3498: LD_ADDR_OWVAR 20
3502: PUSH
3503: LD_INT 2
3505: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
3506: LD_ADDR_EXP 63
3510: PUSH
3511: LD_STRING Heike
3513: PPUSH
3514: LD_INT 0
3516: PPUSH
3517: LD_INT 0
3519: PPUSH
3520: CALL 9385 0 3
3524: ST_TO_ADDR
// if Difficulty >= 2 then
3525: LD_OWVAR 67
3529: PUSH
3530: LD_INT 2
3532: GREATEREQUAL
3533: IFFALSE 3548
// SetTech ( tech_weap1 , 2 , state_researched ) ;
3535: LD_INT 51
3537: PPUSH
3538: LD_INT 2
3540: PPUSH
3541: LD_INT 2
3543: PPUSH
3544: CALL_OW 322
// end ;
3548: LD_VAR 0 1
3552: RET
// export currentEnemyGroup ; export function PrepareArabianVehicles ; var i , veh ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
3557: PPUSH
// currentEnemyGroup = [ ] ;
3558: LD_ADDR_EXP 65
3562: PUSH
3563: EMPTY
3564: ST_TO_ADDR
// for i := 1 to enemyGroupVehicles do
3565: LD_ADDR_VAR 0 2
3569: PUSH
3570: DOUBLE
3571: LD_INT 1
3573: DEC
3574: ST_TO_ADDR
3575: LD_EXP 39
3579: PUSH
3580: FOR_TO
3581: IFFALSE 3836
// begin uc_side = 2 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_INT 2
3590: ST_TO_ADDR
// uc_nation = nation_arabian ;
3591: LD_ADDR_OWVAR 21
3595: PUSH
3596: LD_INT 2
3598: ST_TO_ADDR
// vc_weapon = [ ar_light_gun , ar_double_machine_gun , ar_gatling_gun , ar_flame_thrower , ar_gun ] [ rand ( 1 , 5 ) ] ;
3599: LD_ADDR_OWVAR 40
3603: PUSH
3604: LD_INT 23
3606: PUSH
3607: LD_INT 24
3609: PUSH
3610: LD_INT 25
3612: PUSH
3613: LD_INT 26
3615: PUSH
3616: LD_INT 27
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 5
3631: PPUSH
3632: CALL_OW 12
3636: ARRAY
3637: ST_TO_ADDR
// if vc_weapon in [ ar_gatling_gun , ar_flame_thrower , ar_gun ] then
3638: LD_OWVAR 40
3642: PUSH
3643: LD_INT 25
3645: PUSH
3646: LD_INT 26
3648: PUSH
3649: LD_INT 27
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: IN
3657: IFFALSE 3688
// vc_chassis = [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] else
3659: LD_ADDR_OWVAR 37
3663: PUSH
3664: LD_INT 13
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 1
3676: PPUSH
3677: LD_INT 2
3679: PPUSH
3680: CALL_OW 12
3684: ARRAY
3685: ST_TO_ADDR
3686: GO 3719
// vc_chassis = [ ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 3 ) ] ;
3688: LD_ADDR_OWVAR 37
3692: PUSH
3693: LD_INT 12
3695: PUSH
3696: LD_INT 13
3698: PUSH
3699: LD_INT 14
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 1
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: CALL_OW 12
3717: ARRAY
3718: ST_TO_ADDR
// vc_control = control_manual ;
3719: LD_ADDR_OWVAR 38
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// vc_engine = engine_combustion ;
3727: LD_ADDR_OWVAR 39
3731: PUSH
3732: LD_INT 1
3734: ST_TO_ADDR
// vc_fuel_battery = 100 ;
3735: LD_ADDR_OWVAR 41
3739: PUSH
3740: LD_INT 100
3742: ST_TO_ADDR
// veh = CreateVehicle ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: CALL_OW 45
3752: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ veh ;
3753: LD_ADDR_EXP 65
3757: PUSH
3758: LD_EXP 65
3762: PUSH
3763: LD_VAR 0 3
3767: ADD
3768: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 7
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: CALL_OW 49
// if vc_weapon = ar_flame_thrower then
3784: LD_OWVAR 40
3788: PUSH
3789: LD_INT 26
3791: EQUAL
3792: IFFALSE 3808
// PrepareMechanic ( false , enemySkillLevelFlame ) else
3794: LD_INT 0
3796: PPUSH
3797: LD_EXP 33
3801: PPUSH
3802: CALL_OW 383
3806: GO 3820
// PrepareMechanic ( false , enemySkillLevel ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_EXP 32
3815: PPUSH
3816: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3820: CALL_OW 44
3824: PPUSH
3825: LD_VAR 0 3
3829: PPUSH
3830: CALL_OW 52
// end ;
3834: GO 3580
3836: POP
3837: POP
// end ;
3838: LD_VAR 0 1
3842: RET
// export function PrepareArabianHumans ( spawnArea ) ; var i , unit ; begin
3843: LD_INT 0
3845: PPUSH
3846: PPUSH
3847: PPUSH
// currentEnemyGroup = [ ] ;
3848: LD_ADDR_EXP 65
3852: PUSH
3853: EMPTY
3854: ST_TO_ADDR
// for i := 1 to rand ( arabianTroopsMin , arabianTroopsMax ) do
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: DOUBLE
3861: LD_INT 1
3863: DEC
3864: ST_TO_ADDR
3865: LD_EXP 40
3869: PPUSH
3870: LD_EXP 41
3874: PPUSH
3875: CALL_OW 12
3879: PUSH
3880: FOR_TO
3881: IFFALSE 3960
// begin uc_side = 2 ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_INT 2
3890: ST_TO_ADDR
// uc_nation = nation_arabian ;
3891: LD_ADDR_OWVAR 21
3895: PUSH
3896: LD_INT 2
3898: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel - 1 ) ;
3899: LD_INT 0
3901: PPUSH
3902: LD_EXP 32
3906: PUSH
3907: LD_INT 1
3909: MINUS
3910: PPUSH
3911: CALL_OW 381
// unit = CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
3925: LD_ADDR_EXP 65
3929: PUSH
3930: LD_EXP 65
3934: PUSH
3935: LD_VAR 0 4
3939: ADD
3940: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
3941: LD_VAR 0 4
3945: PPUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 49
// end ;
3958: GO 3880
3960: POP
3961: POP
// for i := 1 to rand ( 1 , 3 ) do
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: DOUBLE
3968: LD_INT 1
3970: DEC
3971: ST_TO_ADDR
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 12
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4059
// begin uc_side = 2 ;
3986: LD_ADDR_OWVAR 20
3990: PUSH
3991: LD_INT 2
3993: ST_TO_ADDR
// uc_nation = nation_arabian ;
3994: LD_ADDR_OWVAR 21
3998: PUSH
3999: LD_INT 2
4001: ST_TO_ADDR
// PrepareScientist ( false , enemySkillLevel ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_EXP 32
4009: PPUSH
4010: CALL_OW 384
// unit = CreateHuman ;
4014: LD_ADDR_VAR 0 4
4018: PUSH
4019: CALL_OW 44
4023: ST_TO_ADDR
// currentEnemyGroup = currentEnemyGroup ^ unit ;
4024: LD_ADDR_EXP 65
4028: PUSH
4029: LD_EXP 65
4033: PUSH
4034: LD_VAR 0 4
4038: ADD
4039: ST_TO_ADDR
// PlaceUnitArea ( unit , spawnArea , false ) ;
4040: LD_VAR 0 4
4044: PPUSH
4045: LD_VAR 0 1
4049: PPUSH
4050: LD_INT 0
4052: PPUSH
4053: CALL_OW 49
// end ;
4057: GO 3983
4059: POP
4060: POP
// end ;
4061: LD_VAR 0 2
4065: RET
// export function PrepareArabianKiller ; var un ; begin
4066: LD_INT 0
4068: PPUSH
4069: PPUSH
// uc_side = 5 ;
4070: LD_ADDR_OWVAR 20
4074: PUSH
4075: LD_INT 5
4077: ST_TO_ADDR
// uc_nation = nation_arabian ;
4078: LD_ADDR_OWVAR 21
4082: PUSH
4083: LD_INT 2
4085: ST_TO_ADDR
// hc_class = class_soldier ;
4086: LD_ADDR_OWVAR 28
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
4094: LD_ADDR_OWVAR 31
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: ST_TO_ADDR
// un = CreateHuman ;
4117: LD_ADDR_VAR 0 2
4121: PUSH
4122: CALL_OW 44
4126: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea3 , false ) ;
4127: LD_VAR 0 2
4131: PPUSH
4132: LD_INT 12
4134: PPUSH
4135: LD_INT 0
4137: PPUSH
4138: CALL_OW 49
// ComAttackUnit ( un , Gaydar ) ;
4142: LD_VAR 0 2
4146: PPUSH
4147: LD_EXP 54
4151: PPUSH
4152: CALL_OW 115
// arabianKillers = arabianKillers + 1 ;
4156: LD_ADDR_EXP 23
4160: PUSH
4161: LD_EXP 23
4165: PUSH
4166: LD_INT 1
4168: PLUS
4169: ST_TO_ADDR
// end ;
4170: LD_VAR 0 1
4174: RET
// export function PrepareFirstAttack ; var i , unit , veh ; begin
4175: LD_INT 0
4177: PPUSH
4178: PPUSH
4179: PPUSH
4180: PPUSH
// firstAttackGroup = [ ] ;
4181: LD_ADDR_EXP 64
4185: PUSH
4186: EMPTY
4187: ST_TO_ADDR
// uc_side = 2 ;
4188: LD_ADDR_OWVAR 20
4192: PUSH
4193: LD_INT 2
4195: ST_TO_ADDR
// uc_nation = nation_arabian ;
4196: LD_ADDR_OWVAR 21
4200: PUSH
4201: LD_INT 2
4203: ST_TO_ADDR
// for i := 1 to 3 do
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: DOUBLE
4210: LD_INT 1
4212: DEC
4213: ST_TO_ADDR
4214: LD_INT 3
4216: PUSH
4217: FOR_TO
4218: IFFALSE 4279
// begin PrepareSoldier ( false , enemySkillLevel - 2 ) ;
4220: LD_INT 0
4222: PPUSH
4223: LD_EXP 32
4227: PUSH
4228: LD_INT 2
4230: MINUS
4231: PPUSH
4232: CALL_OW 381
// unit = CreateHuman ;
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: CALL_OW 44
4245: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ unit ;
4246: LD_ADDR_EXP 64
4250: PUSH
4251: LD_EXP 64
4255: PUSH
4256: LD_VAR 0 3
4260: ADD
4261: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_INT 7
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 49
// end ;
4277: GO 4217
4279: POP
4280: POP
// vc_weapon = ar_light_gun ;
4281: LD_ADDR_OWVAR 40
4285: PUSH
4286: LD_INT 23
4288: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4289: LD_ADDR_OWVAR 37
4293: PUSH
4294: LD_INT 13
4296: ST_TO_ADDR
// vc_control = control_manual ;
4297: LD_ADDR_OWVAR 38
4301: PUSH
4302: LD_INT 1
4304: ST_TO_ADDR
// vc_engine = engine_combustion ;
4305: LD_ADDR_OWVAR 39
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// vc_fuel_battery = 100 ;
4313: LD_ADDR_OWVAR 41
4317: PUSH
4318: LD_INT 100
4320: ST_TO_ADDR
// veh = CreateVehicle ;
4321: LD_ADDR_VAR 0 4
4325: PUSH
4326: CALL_OW 45
4330: ST_TO_ADDR
// firstAttackGroup = firstAttackGroup ^ veh ;
4331: LD_ADDR_EXP 64
4335: PUSH
4336: LD_EXP 64
4340: PUSH
4341: LD_VAR 0 4
4345: ADD
4346: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
4347: LD_VAR 0 4
4351: PPUSH
4352: LD_INT 7
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel - 1 ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_EXP 32
4369: PUSH
4370: LD_INT 1
4372: MINUS
4373: PPUSH
4374: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4378: CALL_OW 44
4382: PPUSH
4383: LD_VAR 0 4
4387: PPUSH
4388: CALL_OW 52
// end ; end_of_file
4392: LD_VAR 0 1
4396: RET
// export function Nef_PrepareNature ; var i , un ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4402: LD_ADDR_VAR 0 2
4406: PUSH
4407: DOUBLE
4408: LD_INT 1
4410: DEC
4411: ST_TO_ADDR
4412: LD_EXP 26
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4532
// begin uc_side = 0 ;
4424: LD_ADDR_OWVAR 20
4428: PUSH
4429: LD_INT 0
4431: ST_TO_ADDR
// uc_nation = nation_nature ;
4432: LD_ADDR_OWVAR 21
4436: PUSH
4437: LD_INT 0
4439: ST_TO_ADDR
// hc_class = class_apeman ;
4440: LD_ADDR_OWVAR 28
4444: PUSH
4445: LD_INT 12
4447: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4448: LD_ADDR_OWVAR 31
4452: PUSH
4453: LD_EXP 27
4457: PUSH
4458: LD_INT 1
4460: ARRAY
4461: PUSH
4462: LD_EXP 27
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: PUSH
4471: LD_EXP 27
4475: PUSH
4476: LD_INT 3
4478: ARRAY
4479: PUSH
4480: LD_EXP 27
4484: PUSH
4485: LD_INT 4
4487: ARRAY
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4495: LD_ADDR_OWVAR 35
4499: PUSH
4500: LD_EXP 28
4504: ST_TO_ADDR
// un = CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_INT 8
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
// end ;
4530: GO 4421
4532: POP
4533: POP
// for i := 1 to animalsAmount [ 2 ] do
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: DOUBLE
4540: LD_INT 1
4542: DEC
4543: ST_TO_ADDR
4544: LD_EXP 26
4548: PUSH
4549: LD_INT 2
4551: ARRAY
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4664
// begin uc_side = 0 ;
4556: LD_ADDR_OWVAR 20
4560: PUSH
4561: LD_INT 0
4563: ST_TO_ADDR
// uc_nation = nation_nature ;
4564: LD_ADDR_OWVAR 21
4568: PUSH
4569: LD_INT 0
4571: ST_TO_ADDR
// hc_class = class_phororhacos ;
4572: LD_ADDR_OWVAR 28
4576: PUSH
4577: LD_INT 18
4579: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4580: LD_ADDR_OWVAR 31
4584: PUSH
4585: LD_EXP 27
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PUSH
4594: LD_EXP 27
4598: PUSH
4599: LD_INT 2
4601: ARRAY
4602: PUSH
4603: LD_EXP 27
4607: PUSH
4608: LD_INT 3
4610: ARRAY
4611: PUSH
4612: LD_EXP 27
4616: PUSH
4617: LD_INT 4
4619: ARRAY
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4627: LD_ADDR_OWVAR 35
4631: PUSH
4632: LD_EXP 28
4636: ST_TO_ADDR
// un = CreateHuman ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: CALL_OW 44
4646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4647: LD_VAR 0 3
4651: PPUSH
4652: LD_INT 8
4654: PPUSH
4655: LD_INT 0
4657: PPUSH
4658: CALL_OW 49
// end ;
4662: GO 4553
4664: POP
4665: POP
// for i := 1 to animalsAmount [ 3 ] do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_EXP 26
4680: PUSH
4681: LD_INT 3
4683: ARRAY
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4796
// begin uc_side = 0 ;
4688: LD_ADDR_OWVAR 20
4692: PUSH
4693: LD_INT 0
4695: ST_TO_ADDR
// uc_nation = nation_nature ;
4696: LD_ADDR_OWVAR 21
4700: PUSH
4701: LD_INT 0
4703: ST_TO_ADDR
// hc_class = class_tiger ;
4704: LD_ADDR_OWVAR 28
4708: PUSH
4709: LD_INT 14
4711: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4712: LD_ADDR_OWVAR 31
4716: PUSH
4717: LD_EXP 27
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PUSH
4726: LD_EXP 27
4730: PUSH
4731: LD_INT 2
4733: ARRAY
4734: PUSH
4735: LD_EXP 27
4739: PUSH
4740: LD_INT 3
4742: ARRAY
4743: PUSH
4744: LD_EXP 27
4748: PUSH
4749: LD_INT 4
4751: ARRAY
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4759: LD_ADDR_OWVAR 35
4763: PUSH
4764: LD_EXP 28
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 8
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// end ;
4794: GO 4685
4796: POP
4797: POP
// for i := 1 to animalsAmount [ 4 ] do
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: DOUBLE
4804: LD_INT 1
4806: DEC
4807: ST_TO_ADDR
4808: LD_EXP 26
4812: PUSH
4813: LD_INT 4
4815: ARRAY
4816: PUSH
4817: FOR_TO
4818: IFFALSE 4928
// begin uc_side = 0 ;
4820: LD_ADDR_OWVAR 20
4824: PUSH
4825: LD_INT 0
4827: ST_TO_ADDR
// uc_nation = nation_nature ;
4828: LD_ADDR_OWVAR 21
4832: PUSH
4833: LD_INT 0
4835: ST_TO_ADDR
// hc_class = 21 ;
4836: LD_ADDR_OWVAR 28
4840: PUSH
4841: LD_INT 21
4843: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4844: LD_ADDR_OWVAR 31
4848: PUSH
4849: LD_EXP 27
4853: PUSH
4854: LD_INT 1
4856: ARRAY
4857: PUSH
4858: LD_EXP 27
4862: PUSH
4863: LD_INT 2
4865: ARRAY
4866: PUSH
4867: LD_EXP 27
4871: PUSH
4872: LD_INT 3
4874: ARRAY
4875: PUSH
4876: LD_EXP 27
4880: PUSH
4881: LD_INT 4
4883: ARRAY
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4891: LD_ADDR_OWVAR 35
4895: PUSH
4896: LD_EXP 28
4900: ST_TO_ADDR
// un = CreateHuman ;
4901: LD_ADDR_VAR 0 3
4905: PUSH
4906: CALL_OW 44
4910: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4911: LD_VAR 0 3
4915: PPUSH
4916: LD_INT 8
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 49
// end ;
4926: GO 4817
4928: POP
4929: POP
// for i := 1 to animalsAmount [ 5 ] do
4930: LD_ADDR_VAR 0 2
4934: PUSH
4935: DOUBLE
4936: LD_INT 1
4938: DEC
4939: ST_TO_ADDR
4940: LD_EXP 26
4944: PUSH
4945: LD_INT 5
4947: ARRAY
4948: PUSH
4949: FOR_TO
4950: IFFALSE 5011
// begin uc_side = 0 ;
4952: LD_ADDR_OWVAR 20
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// uc_nation = nation_nature ;
4960: LD_ADDR_OWVAR 21
4964: PUSH
4965: LD_INT 0
4967: ST_TO_ADDR
// vc_chassis := 31 ;
4968: LD_ADDR_OWVAR 37
4972: PUSH
4973: LD_INT 31
4975: ST_TO_ADDR
// vc_control := control_rider ;
4976: LD_ADDR_OWVAR 38
4980: PUSH
4981: LD_INT 4
4983: ST_TO_ADDR
// un := CreateVehicle ;
4984: LD_ADDR_VAR 0 3
4988: PUSH
4989: CALL_OW 45
4993: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4994: LD_VAR 0 3
4998: PPUSH
4999: LD_INT 8
5001: PPUSH
5002: LD_INT 0
5004: PPUSH
5005: CALL_OW 49
// end ;
5009: GO 4949
5011: POP
5012: POP
// end ; end_of_file
5013: LD_VAR 0 1
5017: RET
// export function AttackEnemy ( units , path , ignorePath , agressiveMove , retreatArea ) ; var i , unit , attackUnits , attackUnit , medics , mechanics , damageUnits , driver , crates , nearPathNode , lastPathNode , nearEnemyObject , nearCrate , unitsReachPathEnd , startAttacks , target1 , target2 ; begin
5018: LD_INT 0
5020: PPUSH
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
5025: PPUSH
5026: PPUSH
5027: PPUSH
5028: PPUSH
5029: PPUSH
5030: PPUSH
5031: PPUSH
5032: PPUSH
5033: PPUSH
5034: PPUSH
5035: PPUSH
5036: PPUSH
5037: PPUSH
// for unit in units do
5038: LD_ADDR_VAR 0 8
5042: PUSH
5043: LD_VAR 0 1
5047: PUSH
5048: FOR_IN
5049: IFFALSE 5086
// if not ignorePath then
5051: LD_VAR 0 3
5055: NOT
5056: IFFALSE 5072
// SetTag ( unit , 0 ) else
5058: LD_VAR 0 8
5062: PPUSH
5063: LD_INT 0
5065: PPUSH
5066: CALL_OW 109
5070: GO 5084
// SetTag ( unit , 1 ) ;
5072: LD_VAR 0 8
5076: PPUSH
5077: LD_INT 1
5079: PPUSH
5080: CALL_OW 109
5084: GO 5048
5086: POP
5087: POP
// startAttacks = false ;
5088: LD_ADDR_VAR 0 21
5092: PUSH
5093: LD_INT 0
5095: ST_TO_ADDR
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
5096: LD_ADDR_VAR 0 17
5100: PUSH
5101: LD_VAR 0 2
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PUSH
5112: LD_INT 1
5114: ARRAY
5115: PUSH
5116: LD_VAR 0 2
5120: PUSH
5121: LD_VAR 0 2
5125: ARRAY
5126: PUSH
5127: LD_INT 2
5129: ARRAY
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: ST_TO_ADDR
// mechanics = [ ] ;
5135: LD_ADDR_VAR 0 12
5139: PUSH
5140: EMPTY
5141: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_type , unit_vehicle ] ] ] ) ;
5142: LD_ADDR_VAR 0 9
5146: PUSH
5147: LD_VAR 0 1
5151: PPUSH
5152: LD_INT 50
5154: PUSH
5155: EMPTY
5156: LIST
5157: PUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 25
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: CALL_OW 72
5194: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
5195: LD_ADDR_VAR 0 11
5199: PUSH
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_INT 50
5207: PUSH
5208: EMPTY
5209: LIST
5210: PUSH
5211: LD_INT 25
5213: PUSH
5214: LD_INT 4
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 72
5229: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5230: LD_ADDR_VAR 0 13
5234: PUSH
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_INT 21
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: LD_INT 24
5255: PUSH
5256: LD_INT 1000
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 72
5275: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
5276: LD_ADDR_VAR 0 15
5280: PUSH
5281: LD_INT 9
5283: PPUSH
5284: CALL_OW 435
5288: ST_TO_ADDR
// if not ignorePath then
5289: LD_VAR 0 3
5293: NOT
5294: IFFALSE 6276
// begin for unit in attackUnits do
5296: LD_ADDR_VAR 0 8
5300: PUSH
5301: LD_VAR 0 9
5305: PUSH
5306: FOR_IN
5307: IFFALSE 6050
// begin if path and not startAttacks then
5309: LD_VAR 0 2
5313: PUSH
5314: LD_VAR 0 21
5318: NOT
5319: AND
5320: IFFALSE 6039
// begin i = 1 ;
5322: LD_ADDR_VAR 0 7
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
5330: LD_ADDR_VAR 0 15
5334: PUSH
5335: LD_INT 9
5337: PPUSH
5338: CALL_OW 435
5342: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
5343: LD_ADDR_VAR 0 18
5347: PUSH
5348: LD_INT 81
5350: PUSH
5351: LD_VAR 0 8
5355: PPUSH
5356: CALL_OW 255
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_VAR 0 8
5374: PPUSH
5375: CALL_OW 74
5379: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5380: LD_ADDR_VAR 0 19
5384: PUSH
5385: LD_VAR 0 15
5389: PPUSH
5390: LD_VAR 0 8
5394: PPUSH
5395: CALL_OW 250
5399: PPUSH
5400: LD_VAR 0 8
5404: PPUSH
5405: CALL_OW 251
5409: PPUSH
5410: CALL_OW 439
5414: ST_TO_ADDR
// if damageUnits and medics then
5415: LD_VAR 0 13
5419: PUSH
5420: LD_VAR 0 11
5424: AND
5425: IFFALSE 5447
// ComHeal ( medics , damageUnits [ 1 ] ) else
5427: LD_VAR 0 11
5431: PPUSH
5432: LD_VAR 0 13
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: CALL_OW 128
5445: GO 5490
// if medics then
5447: LD_VAR 0 11
5451: IFFALSE 5490
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
5453: LD_VAR 0 11
5457: PPUSH
5458: LD_VAR 0 9
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 250
5471: PPUSH
5472: LD_VAR 0 9
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 251
5485: PPUSH
5486: CALL_OW 111
// if not HasTask ( unit ) then
5490: LD_VAR 0 8
5494: PPUSH
5495: CALL_OW 314
5499: NOT
5500: IFFALSE 5739
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
5502: LD_ADDR_VAR 0 19
5506: PUSH
5507: LD_VAR 0 15
5511: PPUSH
5512: LD_VAR 0 8
5516: PPUSH
5517: CALL_OW 250
5521: PPUSH
5522: LD_VAR 0 8
5526: PPUSH
5527: CALL_OW 251
5531: PPUSH
5532: CALL_OW 439
5536: ST_TO_ADDR
// if i > crates then
5537: LD_VAR 0 7
5541: PUSH
5542: LD_VAR 0 15
5546: GREATER
5547: IFFALSE 5557
// i = 1 ;
5549: LD_ADDR_VAR 0 7
5553: PUSH
5554: LD_INT 1
5556: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
5557: LD_VAR 0 18
5561: PUSH
5562: LD_VAR 0 19
5566: AND
5567: IFFALSE 5682
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
5569: LD_VAR 0 8
5573: PPUSH
5574: LD_VAR 0 18
5578: PPUSH
5579: CALL_OW 250
5583: PPUSH
5584: LD_VAR 0 18
5588: PPUSH
5589: CALL_OW 251
5593: PPUSH
5594: CALL_OW 297
5598: PUSH
5599: LD_VAR 0 8
5603: PPUSH
5604: LD_VAR 0 19
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 19
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 297
5626: LESS
5627: IFFALSE 5645
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
5629: LD_VAR 0 9
5633: PPUSH
5634: LD_VAR 0 18
5638: PPUSH
5639: CALL_OW 115
5643: GO 5680
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
5645: LD_VAR 0 9
5649: PPUSH
5650: LD_VAR 0 15
5654: PUSH
5655: LD_VAR 0 7
5659: ARRAY
5660: PPUSH
5661: LD_VAR 0 15
5665: PUSH
5666: LD_VAR 0 7
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: ARRAY
5675: PPUSH
5676: CALL_OW 116
// end else
5680: GO 5739
// if crates then
5682: LD_VAR 0 15
5686: IFFALSE 5725
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
5688: LD_VAR 0 9
5692: PPUSH
5693: LD_VAR 0 15
5697: PUSH
5698: LD_VAR 0 7
5702: ARRAY
5703: PPUSH
5704: LD_VAR 0 15
5708: PUSH
5709: LD_VAR 0 7
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: ARRAY
5718: PPUSH
5719: CALL_OW 116
5723: GO 5739
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
5725: LD_VAR 0 9
5729: PPUSH
5730: LD_VAR 0 18
5734: PPUSH
5735: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
5739: LD_INT 35
5741: PPUSH
5742: CALL_OW 67
// if path then
5746: LD_VAR 0 2
5750: IFFALSE 5836
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
5752: LD_ADDR_VAR 0 16
5756: PUSH
5757: LD_VAR 0 8
5761: PPUSH
5762: LD_VAR 0 2
5766: PPUSH
5767: CALL 7166 0 2
5771: ST_TO_ADDR
// if agressiveMove then
5772: LD_VAR 0 4
5776: IFFALSE 5807
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) else
5778: LD_VAR 0 9
5782: PPUSH
5783: LD_VAR 0 16
5787: PUSH
5788: LD_INT 1
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 16
5796: PUSH
5797: LD_INT 2
5799: ARRAY
5800: PPUSH
5801: CALL_OW 114
5805: GO 5834
// ComMoveXY ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
5807: LD_VAR 0 9
5811: PPUSH
5812: LD_VAR 0 16
5816: PUSH
5817: LD_INT 1
5819: ARRAY
5820: PPUSH
5821: LD_VAR 0 16
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 111
// end else
5834: GO 5844
// startAttacks = true ;
5836: LD_ADDR_VAR 0 21
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// i = i + 2 ;
5844: LD_ADDR_VAR 0 7
5848: PUSH
5849: LD_VAR 0 7
5853: PUSH
5854: LD_INT 2
5856: PLUS
5857: ST_TO_ADDR
// until not HasTask ( unit ) and FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_distxy , nearPathNode [ 1 ] , nearPathNode [ 2 ] , 4 ] ] ) > 3 and not startAttacks ;
5858: LD_VAR 0 8
5862: PPUSH
5863: CALL_OW 314
5867: NOT
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_VAR 0 8
5876: PPUSH
5877: CALL_OW 255
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 92
5888: PUSH
5889: LD_VAR 0 16
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PUSH
5898: LD_VAR 0 16
5902: PUSH
5903: LD_INT 2
5905: ARRAY
5906: PUSH
5907: LD_INT 4
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_INT 3
5927: GREATER
5928: AND
5929: PUSH
5930: LD_VAR 0 21
5934: NOT
5935: AND
5936: IFFALSE 5330
// for i := 1 to path do
5938: LD_ADDR_VAR 0 7
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6037
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
5956: LD_VAR 0 2
5960: PUSH
5961: LD_VAR 0 7
5965: ARRAY
5966: PUSH
5967: LD_INT 1
5969: ARRAY
5970: PUSH
5971: LD_VAR 0 16
5975: PUSH
5976: LD_INT 1
5978: ARRAY
5979: EQUAL
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_VAR 0 7
5990: ARRAY
5991: PUSH
5992: LD_INT 2
5994: ARRAY
5995: PUSH
5996: LD_VAR 0 16
6000: PUSH
6001: LD_INT 2
6003: ARRAY
6004: EQUAL
6005: AND
6006: IFFALSE 6035
// begin path = path diff [ path [ i ] ] ;
6008: LD_ADDR_VAR 0 2
6012: PUSH
6013: LD_VAR 0 2
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_VAR 0 7
6027: ARRAY
6028: PUSH
6029: EMPTY
6030: LIST
6031: DIFF
6032: ST_TO_ADDR
// break ;
6033: GO 6037
// end ;
6035: GO 5953
6037: POP
6038: POP
// end ; if not path then
6039: LD_VAR 0 2
6043: NOT
6044: IFFALSE 6048
// break ;
6046: GO 6050
// end ;
6048: GO 5306
6050: POP
6051: POP
// repeat unitsReachPathEnd = 0 ;
6052: LD_ADDR_VAR 0 20
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// for attackUnit in attackUnits do
6060: LD_ADDR_VAR 0 10
6064: PUSH
6065: LD_VAR 0 9
6069: PUSH
6070: FOR_IN
6071: IFFALSE 6244
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
6073: LD_VAR 0 10
6077: PPUSH
6078: LD_VAR 0 17
6082: PUSH
6083: LD_INT 1
6085: ARRAY
6086: PPUSH
6087: LD_VAR 0 17
6091: PUSH
6092: LD_INT 2
6094: ARRAY
6095: PPUSH
6096: CALL_OW 297
6100: PUSH
6101: LD_INT 7
6103: LESS
6104: NOT
6105: PUSH
6106: LD_VAR 0 10
6110: PPUSH
6111: CALL_OW 110
6115: PUSH
6116: LD_INT 0
6118: EQUAL
6119: AND
6120: IFFALSE 6186
// begin if agressiveMove then
6122: LD_VAR 0 4
6126: IFFALSE 6157
// ComAgressiveMove ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
6128: LD_VAR 0 10
6132: PPUSH
6133: LD_VAR 0 17
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: LD_VAR 0 17
6146: PUSH
6147: LD_INT 2
6149: ARRAY
6150: PPUSH
6151: CALL_OW 114
6155: GO 6184
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) ;
6157: LD_VAR 0 10
6161: PPUSH
6162: LD_VAR 0 17
6166: PUSH
6167: LD_INT 1
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 17
6175: PUSH
6176: LD_INT 2
6178: ARRAY
6179: PPUSH
6180: CALL_OW 111
// end else
6184: GO 6213
// if GetTag ( attackUnit ) = 0 then
6186: LD_VAR 0 10
6190: PPUSH
6191: CALL_OW 110
6195: PUSH
6196: LD_INT 0
6198: EQUAL
6199: IFFALSE 6213
// SetTag ( attackUnit , 1 ) ;
6201: LD_VAR 0 10
6205: PPUSH
6206: LD_INT 1
6208: PPUSH
6209: CALL_OW 109
// if GetTag ( unit ) = 1 then
6213: LD_VAR 0 8
6217: PPUSH
6218: CALL_OW 110
6222: PUSH
6223: LD_INT 1
6225: EQUAL
6226: IFFALSE 6242
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
6228: LD_ADDR_VAR 0 20
6232: PUSH
6233: LD_VAR 0 20
6237: PUSH
6238: LD_INT 1
6240: PLUS
6241: ST_TO_ADDR
// end ;
6242: GO 6070
6244: POP
6245: POP
// wait ( 0 0$1 ) ;
6246: LD_INT 35
6248: PPUSH
6249: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
6253: LD_VAR 0 20
6257: PUSH
6258: LD_VAR 0 9
6262: PUSH
6263: LD_INT 3
6265: MINUS
6266: GREATER
6267: IFFALSE 6052
// wait ( 0 0$10 ) ;
6269: LD_INT 350
6271: PPUSH
6272: CALL_OW 67
// end ; for attackUnit in attackUnits do
6276: LD_ADDR_VAR 0 10
6280: PUSH
6281: LD_VAR 0 9
6285: PUSH
6286: FOR_IN
6287: IFFALSE 6303
// SetTag ( attackUnit , 2 ) ;
6289: LD_VAR 0 10
6293: PPUSH
6294: LD_INT 2
6296: PPUSH
6297: CALL_OW 109
6301: GO 6286
6303: POP
6304: POP
// startAttacks = true ;
6305: LD_ADDR_VAR 0 21
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// if startAttacks then
6313: LD_VAR 0 21
6317: IFFALSE 7136
// begin repeat wait ( 0 0$1 ) ;
6319: LD_INT 35
6321: PPUSH
6322: CALL_OW 67
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
6326: LD_ADDR_VAR 0 11
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: LD_INT 50
6338: PUSH
6339: EMPTY
6340: LIST
6341: PUSH
6342: LD_INT 25
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 72
6360: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6361: LD_ADDR_VAR 0 13
6365: PUSH
6366: LD_VAR 0 1
6370: PPUSH
6371: LD_INT 21
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: LD_INT 25
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 24
6396: PUSH
6397: LD_INT 1000
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: ST_TO_ADDR
// if damageUnits and medics then
6418: LD_VAR 0 13
6422: PUSH
6423: LD_VAR 0 11
6427: AND
6428: IFFALSE 6450
// ComHeal ( medics , damageUnits [ 1 ] ) else
6430: LD_VAR 0 11
6434: PPUSH
6435: LD_VAR 0 13
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: CALL_OW 128
6448: GO 6500
// if medics and not damageUnits then
6450: LD_VAR 0 11
6454: PUSH
6455: LD_VAR 0 13
6459: NOT
6460: AND
6461: IFFALSE 6500
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
6463: LD_VAR 0 11
6467: PPUSH
6468: LD_VAR 0 9
6472: PUSH
6473: LD_INT 1
6475: ARRAY
6476: PPUSH
6477: CALL_OW 250
6481: PPUSH
6482: LD_VAR 0 9
6486: PUSH
6487: LD_INT 1
6489: ARRAY
6490: PPUSH
6491: CALL_OW 251
6495: PPUSH
6496: CALL_OW 111
// for attackUnit in attackUnits do
6500: LD_ADDR_VAR 0 10
6504: PUSH
6505: LD_VAR 0 9
6509: PUSH
6510: FOR_IN
6511: IFFALSE 7127
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( attackUnit ) ] ) , attackUnit ) ;
6513: LD_ADDR_VAR 0 22
6517: PUSH
6518: LD_INT 81
6520: PUSH
6521: LD_VAR 0 10
6525: PPUSH
6526: CALL_OW 255
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: PPUSH
6540: LD_VAR 0 10
6544: PPUSH
6545: CALL_OW 74
6549: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , GetSide ( attackUnit ) ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , attackUnit ) ;
6550: LD_ADDR_VAR 0 23
6554: PUSH
6555: LD_INT 81
6557: PUSH
6558: LD_VAR 0 10
6562: PPUSH
6563: CALL_OW 255
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 59
6577: PUSH
6578: EMPTY
6579: LIST
6580: PUSH
6581: LD_INT 21
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 21
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: PPUSH
6619: LD_VAR 0 10
6623: PPUSH
6624: CALL_OW 74
6628: ST_TO_ADDR
// if GetTag ( attackUnit ) = 2 then
6629: LD_VAR 0 10
6633: PPUSH
6634: CALL_OW 110
6638: PUSH
6639: LD_INT 2
6641: EQUAL
6642: IFFALSE 6802
// begin if GetDistUnits ( attackUnit , target1 ) + 10 < GetDistUnits ( attackUnit , target2 ) then
6644: LD_VAR 0 10
6648: PPUSH
6649: LD_VAR 0 22
6653: PPUSH
6654: CALL_OW 296
6658: PUSH
6659: LD_INT 10
6661: PLUS
6662: PUSH
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 23
6672: PPUSH
6673: CALL_OW 296
6677: LESS
6678: IFFALSE 6696
// ComAttackUnit ( attackUnit , target1 ) else
6680: LD_VAR 0 10
6684: PPUSH
6685: LD_VAR 0 22
6689: PPUSH
6690: CALL_OW 115
6694: GO 6710
// ComAttackUnit ( attackUnit , target2 ) ;
6696: LD_VAR 0 10
6700: PPUSH
6701: LD_VAR 0 23
6705: PPUSH
6706: CALL_OW 115
// if GetLives ( attackUnit ) < 650 and GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual then
6710: LD_VAR 0 10
6714: PPUSH
6715: CALL_OW 256
6719: PUSH
6720: LD_INT 650
6722: LESS
6723: PUSH
6724: LD_VAR 0 10
6728: PPUSH
6729: CALL_OW 247
6733: PUSH
6734: LD_INT 2
6736: EQUAL
6737: AND
6738: PUSH
6739: LD_VAR 0 10
6743: PPUSH
6744: CALL_OW 263
6748: PUSH
6749: LD_INT 1
6751: EQUAL
6752: AND
6753: IFFALSE 6802
// begin SetTag ( attackUnit , 3 ) ;
6755: LD_VAR 0 10
6759: PPUSH
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 109
// SetTag ( UnitsInside ( attackUnit ) [ 1 ] , 3 ) ;
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 313
6776: PUSH
6777: LD_INT 1
6779: ARRAY
6780: PPUSH
6781: LD_INT 3
6783: PPUSH
6784: CALL_OW 109
// ComMoveToArea ( attackUnit , retreatArea ) ;
6788: LD_VAR 0 10
6792: PPUSH
6793: LD_VAR 0 5
6797: PPUSH
6798: CALL_OW 113
// end ; end ; if IsInArea ( attackUnit , retreatArea ) and GetTag ( attackUnit ) = 3 and UnitsInside ( attackUnit ) then
6802: LD_VAR 0 10
6806: PPUSH
6807: LD_VAR 0 5
6811: PPUSH
6812: CALL_OW 308
6816: PUSH
6817: LD_VAR 0 10
6821: PPUSH
6822: CALL_OW 110
6826: PUSH
6827: LD_INT 3
6829: EQUAL
6830: AND
6831: PUSH
6832: LD_VAR 0 10
6836: PPUSH
6837: CALL_OW 313
6841: AND
6842: IFFALSE 6915
// begin driver = UnitsInside ( attackUnit ) [ 1 ] ;
6844: LD_ADDR_VAR 0 14
6848: PUSH
6849: LD_VAR 0 10
6853: PPUSH
6854: CALL_OW 313
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: ST_TO_ADDR
// if not driver in mechanics then
6863: LD_VAR 0 14
6867: PUSH
6868: LD_VAR 0 12
6872: IN
6873: NOT
6874: IFFALSE 6892
// mechanics = mechanics ^ driver ;
6876: LD_ADDR_VAR 0 12
6880: PUSH
6881: LD_VAR 0 12
6885: PUSH
6886: LD_VAR 0 14
6890: ADD
6891: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
6892: LD_VAR 0 14
6896: PPUSH
6897: CALL_OW 121
// AddComRepairVehicle ( driver , attackUnit ) ;
6901: LD_VAR 0 14
6905: PPUSH
6906: LD_VAR 0 10
6910: PPUSH
6911: CALL_OW 189
// end ; if GetLives ( attackUnit ) = 1000 then
6915: LD_VAR 0 10
6919: PPUSH
6920: CALL_OW 256
6924: PUSH
6925: LD_INT 1000
6927: EQUAL
6928: IFFALSE 7046
// begin SetTag ( attackUnit , 2 ) ;
6930: LD_VAR 0 10
6934: PPUSH
6935: LD_INT 2
6937: PPUSH
6938: CALL_OW 109
// if GetType ( attackUnit ) = unit_vehicle and GetControl ( attackUnit ) = control_manual and not UnitsInside ( attackUnit ) then
6942: LD_VAR 0 10
6946: PPUSH
6947: CALL_OW 247
6951: PUSH
6952: LD_INT 2
6954: EQUAL
6955: PUSH
6956: LD_VAR 0 10
6960: PPUSH
6961: CALL_OW 263
6965: PUSH
6966: LD_INT 1
6968: EQUAL
6969: AND
6970: PUSH
6971: LD_VAR 0 10
6975: PPUSH
6976: CALL_OW 313
6980: NOT
6981: AND
6982: IFFALSE 7046
// begin SetFuel ( attackUnit , 100 ) ;
6984: LD_VAR 0 10
6988: PPUSH
6989: LD_INT 100
6991: PPUSH
6992: CALL_OW 240
// ComEnterUnit ( NearestUnitToUnit ( mechanics , attackUnit ) , attackUnit ) ;
6996: LD_VAR 0 12
7000: PPUSH
7001: LD_VAR 0 10
7005: PPUSH
7006: CALL_OW 74
7010: PPUSH
7011: LD_VAR 0 10
7015: PPUSH
7016: CALL_OW 120
// mechanics = mechanics diff NearestUnitToUnit ( mechanics , attackUnit ) ;
7020: LD_ADDR_VAR 0 12
7024: PUSH
7025: LD_VAR 0 12
7029: PUSH
7030: LD_VAR 0 12
7034: PPUSH
7035: LD_VAR 0 10
7039: PPUSH
7040: CALL_OW 74
7044: DIFF
7045: ST_TO_ADDR
// end ; end ; for unit in mechanics do
7046: LD_ADDR_VAR 0 8
7050: PUSH
7051: LD_VAR 0 12
7055: PUSH
7056: FOR_IN
7057: IFFALSE 7123
// begin if not IsInArea ( unit , retreatArea ) then
7059: LD_VAR 0 8
7063: PPUSH
7064: LD_VAR 0 5
7068: PPUSH
7069: CALL_OW 308
7073: NOT
7074: IFFALSE 7090
// ComMoveToArea ( unit , retreatArea ) ;
7076: LD_VAR 0 8
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 113
// if GetLives ( unit ) < 250 then
7090: LD_VAR 0 8
7094: PPUSH
7095: CALL_OW 256
7099: PUSH
7100: LD_INT 250
7102: LESS
7103: IFFALSE 7121
// mechanics = mechanics diff unit ;
7105: LD_ADDR_VAR 0 12
7109: PUSH
7110: LD_VAR 0 12
7114: PUSH
7115: LD_VAR 0 8
7119: DIFF
7120: ST_TO_ADDR
// end ;
7121: GO 7056
7123: POP
7124: POP
// end ;
7125: GO 6510
7127: POP
7128: POP
// until not attackUnits ;
7129: LD_VAR 0 9
7133: NOT
7134: IFFALSE 6319
// end ; wait ( 0 0$1 ) ;
7136: LD_INT 35
7138: PPUSH
7139: CALL_OW 67
// until not UnitFilter ( units , [ f_ok ] ) ;
7143: LD_VAR 0 1
7147: PPUSH
7148: LD_INT 50
7150: PUSH
7151: EMPTY
7152: LIST
7153: PPUSH
7154: CALL_OW 72
7158: NOT
7159: IFFALSE 5142
// end ;
7161: LD_VAR 0 6
7165: RET
// export function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
7166: LD_INT 0
7168: PPUSH
7169: PPUSH
7170: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
7171: LD_ADDR_VAR 0 5
7175: PUSH
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PUSH
7185: LD_INT 1
7187: ARRAY
7188: PUSH
7189: LD_VAR 0 2
7193: PUSH
7194: LD_INT 1
7196: ARRAY
7197: PUSH
7198: LD_INT 2
7200: ARRAY
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// for i := 2 to path do
7206: LD_ADDR_VAR 0 4
7210: PUSH
7211: DOUBLE
7212: LD_INT 2
7214: DEC
7215: ST_TO_ADDR
7216: LD_VAR 0 2
7220: PUSH
7221: FOR_TO
7222: IFFALSE 7362
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
7224: LD_VAR 0 1
7228: PPUSH
7229: LD_VAR 0 2
7233: PUSH
7234: LD_VAR 0 4
7238: ARRAY
7239: PUSH
7240: LD_INT 1
7242: ARRAY
7243: PPUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_VAR 0 4
7253: ARRAY
7254: PUSH
7255: LD_INT 2
7257: ARRAY
7258: PPUSH
7259: CALL_OW 297
7263: PUSH
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 5
7282: PUSH
7283: LD_INT 2
7285: ARRAY
7286: PPUSH
7287: CALL_OW 297
7291: LESS
7292: IFFALSE 7360
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
7294: LD_ADDR_VAR 0 5
7298: PUSH
7299: LD_VAR 0 5
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_VAR 0 4
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: CALL_OW 1
7326: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
7327: LD_ADDR_VAR 0 5
7331: PUSH
7332: LD_VAR 0 5
7336: PPUSH
7337: LD_INT 2
7339: PPUSH
7340: LD_VAR 0 2
7344: PUSH
7345: LD_VAR 0 4
7349: ARRAY
7350: PUSH
7351: LD_INT 2
7353: ARRAY
7354: PPUSH
7355: CALL_OW 1
7359: ST_TO_ADDR
// end ; end ;
7360: GO 7221
7362: POP
7363: POP
// result = nearPosition ;
7364: LD_ADDR_VAR 0 3
7368: PUSH
7369: LD_VAR 0 5
7373: ST_TO_ADDR
// end ;
7374: LD_VAR 0 3
7378: RET
// every 0 0$1 trigger GetResourceType ( GetBase ( secondBaseDepot ) , mat_cans ) > 0 do
7379: LD_EXP 58
7383: PPUSH
7384: CALL_OW 274
7388: PPUSH
7389: LD_INT 1
7391: PPUSH
7392: CALL_OW 275
7396: PUSH
7397: LD_INT 0
7399: GREATER
7400: IFFALSE 7506
7402: GO 7404
7404: DISABLE
// begin AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 105 , 51 , 3 ) ;
7405: LD_EXP 57
7409: PPUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 72
7424: PPUSH
7425: LD_INT 31
7427: PPUSH
7428: LD_INT 105
7430: PPUSH
7431: LD_INT 51
7433: PPUSH
7434: LD_INT 3
7436: PPUSH
7437: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 114 , 58 , 3 ) ;
7441: LD_EXP 57
7445: PPUSH
7446: LD_INT 25
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 72
7460: PPUSH
7461: LD_INT 31
7463: PPUSH
7464: LD_INT 114
7466: PPUSH
7467: LD_INT 58
7469: PPUSH
7470: LD_INT 3
7472: PPUSH
7473: CALL_OW 205
// AddComEnterUnit ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , secondBaseDepot ) ;
7477: LD_EXP 57
7481: PPUSH
7482: LD_INT 25
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 72
7496: PPUSH
7497: LD_EXP 58
7501: PPUSH
7502: CALL_OW 180
// end ; end_of_file
7506: END
// export function Lose_Burlak ; begin
7507: LD_INT 0
7509: PPUSH
// YouLost ( Burlak ) ;
7510: LD_STRING Burlak
7512: PPUSH
7513: CALL_OW 104
// end ;
7517: LD_VAR 0 1
7521: RET
// export function Lose_Gaydar ; begin
7522: LD_INT 0
7524: PPUSH
// YouLost ( Gaydar ) ;
7525: LD_STRING Gaydar
7527: PPUSH
7528: CALL_OW 104
// end ;
7532: LD_VAR 0 1
7536: RET
// export function Lose_SelfAttack ; begin
7537: LD_INT 0
7539: PPUSH
// YouLost ( SelfAttack ) ;
7540: LD_STRING SelfAttack
7542: PPUSH
7543: CALL_OW 104
// end ;
7547: LD_VAR 0 1
7551: RET
// export function Lose_Arrest ; begin
7552: LD_INT 0
7554: PPUSH
// YouLost ( Arrest ) ;
7555: LD_STRING Arrest
7557: PPUSH
7558: CALL_OW 104
// end ;
7562: LD_VAR 0 1
7566: RET
// export function Lose_ArabBreakthrough ; begin
7567: LD_INT 0
7569: PPUSH
// YouLost ( ArabBreakthrough ) ;
7570: LD_STRING ArabBreakthrough
7572: PPUSH
7573: CALL_OW 104
// end ;
7577: LD_VAR 0 1
7581: RET
// every 0 0$1 trigger not arabianCanExitMap and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) do
7582: LD_EXP 7
7586: NOT
7587: PUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 21
7600: PUSH
7601: LD_INT 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 25
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: NOT
7628: AND
7629: PUSH
7630: LD_INT 22
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 21
7642: PUSH
7643: LD_INT 3
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 30
7652: PUSH
7653: LD_INT 0
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: PPUSH
7665: CALL_OW 69
7669: NOT
7670: AND
7671: IFFALSE 7684
7673: GO 7675
7675: DISABLE
// begin enable ;
7676: ENABLE
// YouLost ( Engineer ) ;
7677: LD_STRING Engineer
7679: PPUSH
7680: CALL_OW 104
// end ; end_of_file
7684: END
// export function FinishMission ; begin
7685: LD_INT 0
7687: PPUSH
// SetRewards ;
7688: CALL 7709 0 0
// SavePlayerCharacters ;
7692: CALL 8134 0 0
// SaveGlobalVariables ;
7696: CALL 8362 0 0
// YouWin ;
7700: CALL_OW 103
// end ;
7704: LD_VAR 0 1
7708: RET
// function SetRewards ; var unitsToReward ; begin
7709: LD_INT 0
7711: PPUSH
7712: PPUSH
// SetAchievements ;
7713: CALL 18489 0 0
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
7717: LD_INT 22
7719: PUSH
7720: LD_INT 3
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 3
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 69
7745: NOT
7746: IFFALSE 7760
// AddMedal ( Dismantle , 1 ) else
7748: LD_STRING Dismantle
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 101
7758: GO 7771
// AddMedal ( Dismantle , - 1 ) ;
7760: LD_STRING Dismantle
7762: PPUSH
7763: LD_INT 1
7765: NEG
7766: PPUSH
7767: CALL_OW 101
// if killedArabianUnits >= 25 then
7771: LD_EXP 22
7775: PUSH
7776: LD_INT 25
7778: GREATEREQUAL
7779: IFFALSE 7801
// begin AddMedal ( EnemyLosses , 1 ) ;
7781: LD_STRING EnemyLosses
7783: PPUSH
7784: LD_INT 1
7786: PPUSH
7787: CALL_OW 101
// heikeHeavyLosses = true ;
7791: LD_ADDR_EXP 4
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// end else
7799: GO 7812
// AddMedal ( EnemyLosses , - 1 ) ;
7801: LD_STRING EnemyLosses
7803: PPUSH
7804: LD_INT 1
7806: NEG
7807: PPUSH
7808: CALL_OW 101
// if not lostUnits then
7812: LD_EXP 24
7816: NOT
7817: IFFALSE 7831
// AddMedal ( LittleLosses , 1 ) else
7819: LD_STRING LittleLosses
7821: PPUSH
7822: LD_INT 1
7824: PPUSH
7825: CALL_OW 101
7829: GO 7842
// AddMedal ( LittleLosses , - 1 ) ;
7831: LD_STRING LittleLosses
7833: PPUSH
7834: LD_INT 1
7836: NEG
7837: PPUSH
7838: CALL_OW 101
// GiveMedals ( Main ) ;
7842: LD_STRING Main
7844: PPUSH
7845: CALL_OW 102
// unitsToReward = [ ] ;
7849: LD_ADDR_VAR 0 2
7853: PUSH
7854: EMPTY
7855: ST_TO_ADDR
// if GetSide ( Burlak ) = 3 then
7856: LD_EXP 42
7860: PPUSH
7861: CALL_OW 255
7865: PUSH
7866: LD_INT 3
7868: EQUAL
7869: IFFALSE 7887
// unitsToReward = unitsToReward ^ Burlak ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_VAR 0 2
7880: PUSH
7881: LD_EXP 42
7885: ADD
7886: ST_TO_ADDR
// if GetSide ( Gnyevko ) = 3 then
7887: LD_EXP 43
7891: PPUSH
7892: CALL_OW 255
7896: PUSH
7897: LD_INT 3
7899: EQUAL
7900: IFFALSE 7918
// unitsToReward = unitsToReward ^ Gnyevko ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 2
7911: PUSH
7912: LD_EXP 43
7916: ADD
7917: ST_TO_ADDR
// if GetSide ( Kirilenkova ) = 3 then
7918: LD_EXP 44
7922: PPUSH
7923: CALL_OW 255
7927: PUSH
7928: LD_INT 3
7930: EQUAL
7931: IFFALSE 7949
// unitsToReward = unitsToReward ^ Kirilenkova ;
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_VAR 0 2
7942: PUSH
7943: LD_EXP 44
7947: ADD
7948: ST_TO_ADDR
// if GetSide ( Kovalyuk ) = 3 then
7949: LD_EXP 45
7953: PPUSH
7954: CALL_OW 255
7958: PUSH
7959: LD_INT 3
7961: EQUAL
7962: IFFALSE 7980
// unitsToReward = unitsToReward ^ Kovalyuk ;
7964: LD_ADDR_VAR 0 2
7968: PUSH
7969: LD_VAR 0 2
7973: PUSH
7974: LD_EXP 45
7978: ADD
7979: ST_TO_ADDR
// if GetSide ( Belkov ) = 3 then
7980: LD_EXP 46
7984: PPUSH
7985: CALL_OW 255
7989: PUSH
7990: LD_INT 3
7992: EQUAL
7993: IFFALSE 8011
// unitsToReward = unitsToReward ^ Belkov ;
7995: LD_ADDR_VAR 0 2
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_EXP 46
8009: ADD
8010: ST_TO_ADDR
// if GetSide ( Belkov2 ) = 3 then
8011: LD_EXP 47
8015: PPUSH
8016: CALL_OW 255
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8042
// unitsToReward = unitsToReward ^ Belkov2 ;
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 2
8035: PUSH
8036: LD_EXP 47
8040: ADD
8041: ST_TO_ADDR
// if GetSide ( Scholtze ) = 3 then
8042: LD_EXP 48
8046: PPUSH
8047: CALL_OW 255
8051: PUSH
8052: LD_INT 3
8054: EQUAL
8055: IFFALSE 8073
// unitsToReward = unitsToReward ^ Scholtze ;
8057: LD_ADDR_VAR 0 2
8061: PUSH
8062: LD_VAR 0 2
8066: PUSH
8067: LD_EXP 48
8071: ADD
8072: ST_TO_ADDR
// if GetSide ( Kuzmov ) = 3 then
8073: LD_EXP 49
8077: PPUSH
8078: CALL_OW 255
8082: PUSH
8083: LD_INT 3
8085: EQUAL
8086: IFFALSE 8104
// unitsToReward = unitsToReward ^ Kuzmov ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_VAR 0 2
8097: PUSH
8098: LD_EXP 49
8102: ADD
8103: ST_TO_ADDR
// unitsToReward = unitsToReward ^ randomsToSave ;
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_EXP 62
8118: ADD
8119: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: CALL_OW 43
// end ;
8129: LD_VAR 0 1
8133: RET
// function SavePlayerCharacters ; var othersYour ; begin
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
// SaveCharacters ( Burlak , 04_Burlak ) ;
8138: LD_EXP 42
8142: PPUSH
8143: LD_STRING 04_Burlak
8145: PPUSH
8146: CALL_OW 38
// if GetSide ( Gnyevko ) = 3 then
8150: LD_EXP 43
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_INT 3
8162: EQUAL
8163: IFFALSE 8177
// SaveCharacters ( Gnyevko , 04_Gnyevko ) ;
8165: LD_EXP 43
8169: PPUSH
8170: LD_STRING 04_Gnyevko
8172: PPUSH
8173: CALL_OW 38
// if GetSide ( Kovalyuk ) = 3 then
8177: LD_EXP 45
8181: PPUSH
8182: CALL_OW 255
8186: PUSH
8187: LD_INT 3
8189: EQUAL
8190: IFFALSE 8204
// SaveCharacters ( Kovalyuk , 04_Kovalyuk ) ;
8192: LD_EXP 45
8196: PPUSH
8197: LD_STRING 04_Kovalyuk
8199: PPUSH
8200: CALL_OW 38
// if GetSide ( Kirilenkova ) = 3 then
8204: LD_EXP 44
8208: PPUSH
8209: CALL_OW 255
8213: PUSH
8214: LD_INT 3
8216: EQUAL
8217: IFFALSE 8231
// SaveCharacters ( Kirilenkova , 04_Kirilenkova ) ;
8219: LD_EXP 44
8223: PPUSH
8224: LD_STRING 04_Kirilenkova
8226: PPUSH
8227: CALL_OW 38
// if GetSide ( Scholtze ) = 3 then
8231: LD_EXP 48
8235: PPUSH
8236: CALL_OW 255
8240: PUSH
8241: LD_INT 3
8243: EQUAL
8244: IFFALSE 8258
// SaveCharacters ( Scholtze , 04_Scholtze ) ;
8246: LD_EXP 48
8250: PPUSH
8251: LD_STRING 04_Scholtze
8253: PPUSH
8254: CALL_OW 38
// if GetSide ( Belkov ) = 3 then
8258: LD_EXP 46
8262: PPUSH
8263: CALL_OW 255
8267: PUSH
8268: LD_INT 3
8270: EQUAL
8271: IFFALSE 8285
// SaveCharacters ( Belkov , 04_Belkov ) ;
8273: LD_EXP 46
8277: PPUSH
8278: LD_STRING 04_Belkov
8280: PPUSH
8281: CALL_OW 38
// if GetSide ( Belkov2 ) = 3 then
8285: LD_EXP 47
8289: PPUSH
8290: CALL_OW 255
8294: PUSH
8295: LD_INT 3
8297: EQUAL
8298: IFFALSE 8312
// SaveCharacters ( Belkov2 , 04_Belkov2 ) ;
8300: LD_EXP 47
8304: PPUSH
8305: LD_STRING 04_Belkov2
8307: PPUSH
8308: CALL_OW 38
// if IsOK ( Kuzmov ) then
8312: LD_EXP 49
8316: PPUSH
8317: CALL_OW 302
8321: IFFALSE 8335
// SaveCharacters ( Kuzmov , 04_Kuzmov ) ;
8323: LD_EXP 49
8327: PPUSH
8328: LD_STRING 04_Kuzmov
8330: PPUSH
8331: CALL_OW 38
// othersYour = randomsToSave ;
8335: LD_ADDR_VAR 0 2
8339: PUSH
8340: LD_EXP 62
8344: ST_TO_ADDR
// SaveCharacters ( randomsToSave , 04_other_survivors ) ;
8345: LD_EXP 62
8349: PPUSH
8350: LD_STRING 04_other_survivors
8352: PPUSH
8353: CALL_OW 38
// end ;
8357: LD_VAR 0 1
8361: RET
// function SaveGlobalVariables ; begin
8362: LD_INT 0
8364: PPUSH
// SaveVariable ( heikeHeavyLosses , 04_HeikeHeavyLosses_1 ) ;
8365: LD_EXP 4
8369: PPUSH
8370: LD_STRING 04_HeikeHeavyLosses_1
8372: PPUSH
8373: CALL_OW 39
// end ; end_of_file
8377: LD_VAR 0 1
8381: RET
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and not IsInArea ( building , HillArea ) then
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 255
8391: PUSH
8392: LD_INT 3
8394: EQUAL
8395: PUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 266
8405: PUSH
8406: LD_INT 0
8408: EQUAL
8409: AND
8410: PUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: LD_INT 5
8418: PPUSH
8419: CALL_OW 308
8423: NOT
8424: AND
8425: IFFALSE 8436
// Dial_DepotInWrongPlace ( building ) ;
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL 11025 0 1
// end ;
8436: PPOPN 2
8438: END
// on BuildingComplete ( building ) do var i , cargo ;
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , HillArea ) and not startEvacuation and not namedBase then
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 255
8452: PUSH
8453: LD_INT 3
8455: EQUAL
8456: PUSH
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 266
8466: PUSH
8467: LD_INT 0
8469: EQUAL
8470: AND
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: LD_INT 5
8479: PPUSH
8480: CALL_OW 308
8484: AND
8485: PUSH
8486: LD_EXP 8
8490: NOT
8491: AND
8492: PUSH
8493: LD_EXP 9
8497: NOT
8498: AND
8499: IFFALSE 8525
// begin namedBase = true ;
8501: LD_ADDR_EXP 9
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// SetBName ( building , chuikov ) ;
8509: LD_VAR 0 1
8513: PPUSH
8514: LD_STRING chuikov
8516: PPUSH
8517: CALL_OW 500
// Dial_FinishDepot ;
8521: CALL 11299 0 0
// end ; if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 255
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: PUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 266
8548: PUSH
8549: LD_INT 32
8551: EQUAL
8552: AND
8553: IFFALSE 8569
// achievement_ConstructedTurrets = achievement_ConstructedTurrets + 1 ;
8555: LD_ADDR_EXP 25
8559: PUSH
8560: LD_EXP 25
8564: PUSH
8565: LD_INT 1
8567: PLUS
8568: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 255
8578: PUSH
8579: LD_INT 6
8581: EQUAL
8582: PUSH
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 266
8592: PUSH
8593: LD_INT 0
8595: EQUAL
8596: AND
8597: IFFALSE 8796
// begin secondBaseDepot = building ;
8599: LD_ADDR_EXP 58
8603: PUSH
8604: LD_VAR 0 1
8608: ST_TO_ADDR
// uc_side = 6 ;
8609: LD_ADDR_OWVAR 20
8613: PUSH
8614: LD_INT 6
8616: ST_TO_ADDR
// uc_nation = nation_russian ;
8617: LD_ADDR_OWVAR 21
8621: PUSH
8622: LD_INT 3
8624: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
8625: LD_ADDR_OWVAR 37
8629: PUSH
8630: LD_INT 21
8632: ST_TO_ADDR
// vc_control = control_manual ;
8633: LD_ADDR_OWVAR 38
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// vc_engine = engine_combustion ;
8641: LD_ADDR_OWVAR 39
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
8649: LD_ADDR_OWVAR 40
8653: PUSH
8654: LD_INT 51
8656: ST_TO_ADDR
// cargo = CreateVehicle ;
8657: LD_ADDR_VAR 0 3
8661: PUSH
8662: CALL_OW 45
8666: ST_TO_ADDR
// PlaceUnitArea ( cargo , RussianSpawnArea2 , false ) ;
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_INT 3
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: LD_INT 100
8692: PPUSH
8693: CALL_OW 291
// ComGive ( cargo , building ) ;
8697: LD_VAR 0 3
8701: PPUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: CALL_OW 161
// PrepareMechanic ( false , 2 ) ;
8711: LD_INT 0
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo ) ;
8721: CALL_OW 44
8725: PPUSH
8726: LD_VAR 0 3
8730: PPUSH
8731: CALL_OW 52
// for i := 10 to russianCargoPath1 do
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: DOUBLE
8741: LD_INT 10
8743: DEC
8744: ST_TO_ADDR
8745: LD_EXP 34
8749: PUSH
8750: FOR_TO
8751: IFFALSE 8794
// AddComMoveXY ( cargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
8753: LD_VAR 0 3
8757: PPUSH
8758: LD_EXP 34
8762: PUSH
8763: LD_VAR 0 2
8767: ARRAY
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_EXP 34
8777: PUSH
8778: LD_VAR 0 2
8782: ARRAY
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PPUSH
8788: CALL_OW 171
8792: GO 8750
8794: POP
8795: POP
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_breastwork then
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 255
8805: PUSH
8806: LD_INT 6
8808: EQUAL
8809: PUSH
8810: LD_VAR 0 1
8814: PPUSH
8815: CALL_OW 266
8819: PUSH
8820: LD_INT 31
8822: EQUAL
8823: AND
8824: IFFALSE 8869
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
8826: LD_EXP 57
8830: PPUSH
8831: LD_INT 25
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 56
8843: PUSH
8844: EMPTY
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 72
8855: PUSH
8856: LD_INT 1
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 120
// end ;
8869: PPOPN 3
8871: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_lab_half and not dial_labUpgradedBlock then
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 266
8881: PUSH
8882: LD_INT 7
8884: EQUAL
8885: PUSH
8886: LD_EXP 15
8890: NOT
8891: AND
8892: IFFALSE 8898
// Dial_LabUpgraded ;
8894: CALL 11619 0 0
// end ;
8898: PPOPN 1
8900: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 2 ) or ( side1 = 2 and side2 = 3 ) then
8901: LD_VAR 0 1
8905: PUSH
8906: LD_INT 3
8908: EQUAL
8909: PUSH
8910: LD_VAR 0 2
8914: PUSH
8915: LD_INT 2
8917: EQUAL
8918: AND
8919: PUSH
8920: LD_VAR 0 1
8924: PUSH
8925: LD_INT 2
8927: EQUAL
8928: PUSH
8929: LD_VAR 0 2
8933: PUSH
8934: LD_INT 3
8936: EQUAL
8937: AND
8938: OR
8939: IFFALSE 8961
// begin if dial_contactBlock then
8941: LD_EXP 16
8945: IFFALSE 8949
// exit ;
8947: GO 9005
// dial_contactBlock = true ;
8949: LD_ADDR_EXP 16
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// Dial_Contact ;
8957: CALL 13834 0 0
// end ; if ( side1 = 3 and side2 = 6 ) or ( side1 = 6 and side2 = 3 ) then
8961: LD_VAR 0 1
8965: PUSH
8966: LD_INT 3
8968: EQUAL
8969: PUSH
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 6
8977: EQUAL
8978: AND
8979: PUSH
8980: LD_VAR 0 1
8984: PUSH
8985: LD_INT 6
8987: EQUAL
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: LD_INT 3
8996: EQUAL
8997: AND
8998: OR
8999: IFFALSE 9005
// Lose_SelfAttack ;
9001: CALL 7537 0 0
// end ;
9005: PPOPN 2
9007: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9008: LD_VAR 0 1
9012: PUSH
9013: LD_EXP 42
9017: EQUAL
9018: IFFALSE 9024
// Lose_Burlak ;
9020: CALL 7507 0 0
// if unit = Gaydar then
9024: LD_VAR 0 1
9028: PUSH
9029: LD_EXP 54
9033: EQUAL
9034: IFFALSE 9040
// Lose_Gaydar ;
9036: CALL 7522 0 0
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
9040: LD_VAR 0 1
9044: PPUSH
9045: CALL_OW 255
9049: PUSH
9050: LD_INT 3
9052: EQUAL
9053: PUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 247
9063: PUSH
9064: LD_INT 1
9066: EQUAL
9067: AND
9068: IFFALSE 9084
// lostUnits = lostUnits + 1 ;
9070: LD_ADDR_EXP 24
9074: PUSH
9075: LD_EXP 24
9079: PUSH
9080: LD_INT 1
9082: PLUS
9083: ST_TO_ADDR
// if GetSide ( unit ) = 2 and GetType ( unit ) = unit_human and not IsPlaced ( Gaydar ) then
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PUSH
9094: LD_INT 2
9096: EQUAL
9097: PUSH
9098: LD_VAR 0 1
9102: PPUSH
9103: CALL_OW 247
9107: PUSH
9108: LD_INT 1
9110: EQUAL
9111: AND
9112: PUSH
9113: LD_EXP 54
9117: PPUSH
9118: CALL_OW 305
9122: NOT
9123: AND
9124: IFFALSE 9140
// killedArabianUnits = killedArabianUnits + 1 ;
9126: LD_ADDR_EXP 22
9130: PUSH
9131: LD_EXP 22
9135: PUSH
9136: LD_INT 1
9138: PLUS
9139: ST_TO_ADDR
// if unit in firstAttackGroup then
9140: LD_VAR 0 1
9144: PUSH
9145: LD_EXP 64
9149: IN
9150: IFFALSE 9168
// firstAttackGroup = firstAttackGroup diff unit ;
9152: LD_ADDR_EXP 64
9156: PUSH
9157: LD_EXP 64
9161: PUSH
9162: LD_VAR 0 1
9166: DIFF
9167: ST_TO_ADDR
// end ;
9168: PPOPN 1
9170: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
9171: LD_VAR 0 2
9175: PUSH
9176: LD_INT 6
9178: EQUAL
9179: IFFALSE 9193
// SetSide ( building , 6 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 6
9188: PPUSH
9189: CALL_OW 235
// end ;
9193: PPOPN 3
9195: END
// on Command ( com ) do var i , j , temp , order , x , y , building ;
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_type , unit_human ] ] ] ) do
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 34
9225: PUSH
9226: LD_INT 51
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 21
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PPUSH
9252: CALL_OW 69
9256: PUSH
9257: FOR_IN
9258: IFFALSE 9380
// if GetTaskList ( i ) > 0 then
9260: LD_VAR 0 2
9264: PPUSH
9265: CALL_OW 437
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9378
// for j = 1 to GetTaskList ( i ) do
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: DOUBLE
9281: LD_INT 1
9283: DEC
9284: ST_TO_ADDR
9285: LD_VAR 0 2
9289: PPUSH
9290: CALL_OW 437
9294: PUSH
9295: FOR_TO
9296: IFFALSE 9376
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
9298: LD_ADDR_VAR 0 4
9302: PUSH
9303: LD_VAR 0 2
9307: PPUSH
9308: CALL_OW 437
9312: PUSH
9313: LD_VAR 0 3
9317: ARRAY
9318: PUSH
9319: LD_INT 4
9321: ARRAY
9322: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
9323: LD_VAR 0 4
9327: PPUSH
9328: CALL_OW 255
9332: PUSH
9333: LD_INT 6
9335: EQUAL
9336: PUSH
9337: LD_VAR 0 2
9341: PPUSH
9342: CALL_OW 437
9346: PUSH
9347: LD_VAR 0 3
9351: ARRAY
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PUSH
9357: LD_STRING <
9359: EQUAL
9360: AND
9361: IFFALSE 9374
// SetTaskList ( i , [ ] ) ;
9363: LD_VAR 0 2
9367: PPUSH
9368: EMPTY
9369: PPUSH
9370: CALL_OW 446
// end ;
9374: GO 9295
9376: POP
9377: POP
9378: GO 9257
9380: POP
9381: POP
// end ; end_of_file
9382: PPOPN 8
9384: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
9385: LD_INT 0
9387: PPUSH
9388: PPUSH
// if exist_mode then
9389: LD_VAR 0 2
9393: IFFALSE 9418
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
9395: LD_ADDR_VAR 0 5
9399: PUSH
9400: LD_EXP 30
9404: PUSH
9405: LD_VAR 0 1
9409: STR
9410: PPUSH
9411: CALL_OW 34
9415: ST_TO_ADDR
9416: GO 9433
// unit := NewCharacter ( ident ) ;
9418: LD_ADDR_VAR 0 5
9422: PUSH
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 25
9432: ST_TO_ADDR
// if class then
9433: LD_VAR 0 3
9437: IFFALSE 9453
// SetClass ( unit , class ) ;
9439: LD_VAR 0 5
9443: PPUSH
9444: LD_VAR 0 3
9448: PPUSH
9449: CALL_OW 336
// result := unit ;
9453: LD_ADDR_VAR 0 4
9457: PUSH
9458: LD_VAR 0 5
9462: ST_TO_ADDR
// end ;
9463: LD_VAR 0 4
9467: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
9468: LD_INT 0
9470: PPUSH
9471: PPUSH
// for unit in units do
9472: LD_ADDR_VAR 0 5
9476: PUSH
9477: LD_VAR 0 1
9481: PUSH
9482: FOR_IN
9483: IFFALSE 9506
// PlaceUnitArea ( unit , area , spawnMode ) ;
9485: LD_VAR 0 5
9489: PPUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: LD_VAR 0 3
9499: PPUSH
9500: CALL_OW 49
9504: GO 9482
9506: POP
9507: POP
// end ;
9508: LD_VAR 0 4
9512: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
9513: LD_INT 0
9515: PPUSH
9516: PPUSH
9517: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze , Kuzmov ] ;
9518: LD_ADDR_VAR 0 1
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: LD_EXP 42
9532: PUSH
9533: LD_EXP 43
9537: PUSH
9538: LD_EXP 46
9542: PUSH
9543: LD_EXP 47
9547: PUSH
9548: LD_EXP 44
9552: PUSH
9553: LD_EXP 45
9557: PUSH
9558: LD_EXP 48
9562: PUSH
9563: LD_EXP 49
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: DIFF
9578: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
9579: LD_ADDR_VAR 0 7
9583: PUSH
9584: LD_VAR 0 1
9588: PUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_VAR 0 1
9596: PPUSH
9597: CALL_OW 12
9601: ARRAY
9602: ST_TO_ADDR
// if radio then
9603: LD_VAR 0 4
9607: IFFALSE 9656
// begin if GetSex ( speaker ) = sex_male then
9609: LD_VAR 0 7
9613: PPUSH
9614: CALL_OW 258
9618: PUSH
9619: LD_INT 1
9621: EQUAL
9622: IFFALSE 9640
// SayRadio ( speaker , dialogMID ) else
9624: LD_VAR 0 7
9628: PPUSH
9629: LD_VAR 0 2
9633: PPUSH
9634: CALL_OW 94
9638: GO 9654
// SayRadio ( speaker , dialogFID ) ;
9640: LD_VAR 0 7
9644: PPUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: CALL_OW 94
// end else
9654: GO 9701
// begin if GetSex ( speaker ) = sex_male then
9656: LD_VAR 0 7
9660: PPUSH
9661: CALL_OW 258
9665: PUSH
9666: LD_INT 1
9668: EQUAL
9669: IFFALSE 9687
// Say ( speaker , dialogMID ) else
9671: LD_VAR 0 7
9675: PPUSH
9676: LD_VAR 0 2
9680: PPUSH
9681: CALL_OW 88
9685: GO 9701
// Say ( speaker , dialogFID ) ;
9687: LD_VAR 0 7
9691: PPUSH
9692: LD_VAR 0 3
9696: PPUSH
9697: CALL_OW 88
// end ; result := speaker ;
9701: LD_ADDR_VAR 0 5
9705: PUSH
9706: LD_VAR 0 7
9710: ST_TO_ADDR
// end ;
9711: LD_VAR 0 5
9715: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
9716: LD_INT 0
9718: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 255
9728: PUSH
9729: LD_VAR 0 3
9733: EQUAL
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL_OW 302
9744: AND
9745: IFFALSE 9767
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_EXP 29
9756: PUSH
9757: LD_VAR 0 2
9761: STR
9762: PPUSH
9763: CALL_OW 38
// end ;
9767: LD_VAR 0 4
9771: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
9772: LD_INT 0
9774: PPUSH
9775: PPUSH
9776: PPUSH
// resultCharactersToSave = [ ] ;
9777: LD_ADDR_VAR 0 6
9781: PUSH
9782: EMPTY
9783: ST_TO_ADDR
// for unit in characters do
9784: LD_ADDR_VAR 0 5
9788: PUSH
9789: LD_VAR 0 1
9793: PUSH
9794: FOR_IN
9795: IFFALSE 9843
// if GetSide ( unit ) = side and IsOK ( unit ) then
9797: LD_VAR 0 5
9801: PPUSH
9802: CALL_OW 255
9806: PUSH
9807: LD_VAR 0 3
9811: EQUAL
9812: PUSH
9813: LD_VAR 0 5
9817: PPUSH
9818: CALL_OW 302
9822: AND
9823: IFFALSE 9841
// resultCharactersToSave = resultCharactersToSave ^ unit ;
9825: LD_ADDR_VAR 0 6
9829: PUSH
9830: LD_VAR 0 6
9834: PUSH
9835: LD_VAR 0 5
9839: ADD
9840: ST_TO_ADDR
9841: GO 9794
9843: POP
9844: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
9845: LD_VAR 0 6
9849: PPUSH
9850: LD_EXP 29
9854: PUSH
9855: LD_VAR 0 2
9859: STR
9860: PPUSH
9861: CALL_OW 38
// end ;
9865: LD_VAR 0 4
9869: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others ; begin
9870: LD_INT 0
9872: PPUSH
9873: PPUSH
9874: PPUSH
9875: PPUSH
9876: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
9877: LD_ADDR_VAR 0 3
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 21
9894: PUSH
9895: LD_INT 1
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 50
9904: PUSH
9905: EMPTY
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: PPUSH
9913: CALL_OW 69
9917: ST_TO_ADDR
// charsToChoose = charsToChoose diff Burlak ;
9918: LD_ADDR_VAR 0 3
9922: PUSH
9923: LD_VAR 0 3
9927: PUSH
9928: LD_EXP 42
9932: DIFF
9933: ST_TO_ADDR
// charsToChoose = charsToChoose diff Popov ;
9934: LD_ADDR_VAR 0 3
9938: PUSH
9939: LD_VAR 0 3
9943: PUSH
9944: LD_EXP 52
9948: DIFF
9949: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 8 , 8 , [ sel_change_class , Burlak , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
9950: LD_ADDR_VAR 0 4
9954: PUSH
9955: LD_STRING text
9957: PPUSH
9958: LD_INT 8
9960: PPUSH
9961: LD_INT 8
9963: PPUSH
9964: LD_INT -5
9966: PUSH
9967: LD_EXP 42
9971: PUSH
9972: LD_INT -6
9974: PUSH
9975: LD_INT -2
9977: PUSH
9978: LD_INT -3
9980: PUSH
9981: LD_INT -5
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_VAR 0 3
9996: ADD
9997: PUSH
9998: LD_INT -6
10000: PUSH
10001: LD_INT -4
10003: PUSH
10004: LD_EXP 52
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: ADD
10014: PPUSH
10015: LD_INT 1
10017: PUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 4
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 42
10044: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
10045: LD_VAR 0 3
10049: PPUSH
10050: LD_INT 6
10052: PPUSH
10053: CALL_OW 235
// SetSide ( Popov , 6 ) ;
10057: LD_EXP 52
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
10069: LD_VAR 0 4
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: CALL_OW 235
// burlakTeam = selectedPeople ;
10081: LD_ADDR_EXP 55
10085: PUSH
10086: LD_VAR 0 4
10090: ST_TO_ADDR
// popovTeam = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
10091: LD_ADDR_EXP 56
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 6
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// popovTeam = popovTeam diff Kuzmov ;
10125: LD_ADDR_EXP 56
10129: PUSH
10130: LD_EXP 56
10134: PUSH
10135: LD_EXP 49
10139: DIFF
10140: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
10141: LD_ADDR_VAR 0 2
10145: PUSH
10146: LD_INT 22
10148: PUSH
10149: LD_INT 6
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 21
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: CALL_OW 69
10174: PUSH
10175: FOR_IN
10176: IFFALSE 10200
// if IsInUnit ( i ) then
10178: LD_VAR 0 2
10182: PPUSH
10183: CALL_OW 310
10187: IFFALSE 10198
// ComExitVehicle ( i ) ;
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 121
10198: GO 10175
10200: POP
10201: POP
// if not Gnyevko in selectedPeople then
10202: LD_EXP 43
10206: PUSH
10207: LD_VAR 0 4
10211: IN
10212: NOT
10213: IFFALSE 10230
// ExtSaveCharacter ( Gnyevko , Gnyevko , 6 ) ;
10215: LD_EXP 43
10219: PPUSH
10220: LD_STRING Gnyevko
10222: PPUSH
10223: LD_INT 6
10225: PPUSH
10226: CALL 9716 0 3
// if not Kovalyuk in selectedPeople then
10230: LD_EXP 45
10234: PUSH
10235: LD_VAR 0 4
10239: IN
10240: NOT
10241: IFFALSE 10258
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 6 ) ;
10243: LD_EXP 45
10247: PPUSH
10248: LD_STRING Kovalyuk
10250: PPUSH
10251: LD_INT 6
10253: PPUSH
10254: CALL 9716 0 3
// if not Kirilenkova in selectedPeople then
10258: LD_EXP 44
10262: PUSH
10263: LD_VAR 0 4
10267: IN
10268: NOT
10269: IFFALSE 10286
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 6 ) ;
10271: LD_EXP 44
10275: PPUSH
10276: LD_STRING Kirilenkova
10278: PPUSH
10279: LD_INT 6
10281: PPUSH
10282: CALL 9716 0 3
// if not Scholtze in selectedPeople then
10286: LD_EXP 48
10290: PUSH
10291: LD_VAR 0 4
10295: IN
10296: NOT
10297: IFFALSE 10314
// ExtSaveCharacter ( Scholtze , Scholtze , 6 ) ;
10299: LD_EXP 48
10303: PPUSH
10304: LD_STRING Scholtze
10306: PPUSH
10307: LD_INT 6
10309: PPUSH
10310: CALL 9716 0 3
// if not Belkov in selectedPeople then
10314: LD_EXP 46
10318: PUSH
10319: LD_VAR 0 4
10323: IN
10324: NOT
10325: IFFALSE 10342
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
10327: LD_EXP 46
10331: PPUSH
10332: LD_STRING Belkov
10334: PPUSH
10335: LD_INT 6
10337: PPUSH
10338: CALL 9716 0 3
// if not Belkov2 in selectedPeople then
10342: LD_EXP 47
10346: PUSH
10347: LD_VAR 0 4
10351: IN
10352: NOT
10353: IFFALSE 10370
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
10355: LD_EXP 47
10359: PPUSH
10360: LD_STRING Belkov2
10362: PPUSH
10363: LD_INT 6
10365: PPUSH
10366: CALL 9716 0 3
// others = popovTeam diff Popov ;
10370: LD_ADDR_VAR 0 5
10374: PUSH
10375: LD_EXP 56
10379: PUSH
10380: LD_EXP 52
10384: DIFF
10385: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_popov , 6 ) ;
10386: LD_VAR 0 5
10390: PPUSH
10391: LD_STRING other_survivors_with_popov
10393: PPUSH
10394: LD_INT 6
10396: PPUSH
10397: CALL 9772 0 3
// end ; end_of_file
10401: LD_VAR 0 1
10405: RET
// export function MissionIntro ; var i , unit ; begin
10406: LD_INT 0
10408: PPUSH
10409: PPUSH
10410: PPUSH
// CenterNowOnUnits ( Burlak ) ;
10411: LD_EXP 42
10415: PPUSH
10416: CALL_OW 87
// SayRadio ( dialogRus , D1-RSol1-1 ) ;
10420: LD_EXP 59
10424: PPUSH
10425: LD_STRING D1-RSol1-1
10427: PPUSH
10428: CALL_OW 94
// SayRadio ( Platonov , D1-Pla-1 ) ;
10432: LD_EXP 53
10436: PPUSH
10437: LD_STRING D1-Pla-1
10439: PPUSH
10440: CALL_OW 94
// Say ( Burlak , D1-Bur-1 ) ;
10444: LD_EXP 42
10448: PPUSH
10449: LD_STRING D1-Bur-1
10451: PPUSH
10452: CALL_OW 88
// SayRadio ( Platonov , D1-Pla-2 ) ;
10456: LD_EXP 53
10460: PPUSH
10461: LD_STRING D1-Pla-2
10463: PPUSH
10464: CALL_OW 94
// Say ( Burlak , D1-Bur-2 ) ;
10468: LD_EXP 42
10472: PPUSH
10473: LD_STRING D1-Bur-2
10475: PPUSH
10476: CALL_OW 88
// SelectCharacters ;
10480: CALL 9870 0 0
// InGameOff ;
10484: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10488: LD_STRING M1
10490: PPUSH
10491: CALL_OW 337
// SaveForQuickRestart ;
10495: CALL_OW 22
// for unit in popovTeam do
10499: LD_ADDR_VAR 0 3
10503: PUSH
10504: LD_EXP 56
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10582
// begin for i := 3 to russianCargoPath1 do
10512: LD_ADDR_VAR 0 2
10516: PUSH
10517: DOUBLE
10518: LD_INT 3
10520: DEC
10521: ST_TO_ADDR
10522: LD_EXP 34
10526: PUSH
10527: FOR_TO
10528: IFFALSE 10571
// AddComMoveXY ( unit , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_EXP 34
10539: PUSH
10540: LD_VAR 0 2
10544: ARRAY
10545: PUSH
10546: LD_INT 1
10548: ARRAY
10549: PPUSH
10550: LD_EXP 34
10554: PUSH
10555: LD_VAR 0 2
10559: ARRAY
10560: PUSH
10561: LD_INT 2
10563: ARRAY
10564: PPUSH
10565: CALL_OW 171
10569: GO 10527
10571: POP
10572: POP
// wait ( 0 0$01 ) ;
10573: LD_INT 35
10575: PPUSH
10576: CALL_OW 67
// end ;
10580: GO 10509
10582: POP
10583: POP
// end ;
10584: LD_VAR 0 1
10588: RET
// every 0 0$1 do var unit , driver ;
10589: GO 10591
10591: DISABLE
10592: LD_INT 0
10594: PPUSH
10595: PPUSH
// begin enable ;
10596: ENABLE
// if not FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) and not FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) then
10597: LD_INT 4
10599: PPUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 6
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 70
10614: NOT
10615: PUSH
10616: LD_INT 4
10618: PPUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: LD_INT 21
10634: PUSH
10635: LD_INT 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 2
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 70
10665: NOT
10666: AND
10667: IFFALSE 10671
// exit ;
10669: GO 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ f_side , 6 ] ) do
10671: LD_ADDR_VAR 0 1
10675: PUSH
10676: LD_INT 4
10678: PPUSH
10679: LD_INT 22
10681: PUSH
10682: LD_INT 6
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PPUSH
10689: CALL_OW 70
10693: PUSH
10694: FOR_IN
10695: IFFALSE 10750
// begin RemoveUnit ( unit ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: CALL_OW 64
// if not unit in popovTeam and GetWeapon ( unit ) = ru_cargo_bay then
10706: LD_VAR 0 1
10710: PUSH
10711: LD_EXP 56
10715: IN
10716: NOT
10717: PUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 264
10727: PUSH
10728: LD_INT 51
10730: EQUAL
10731: AND
10732: IFFALSE 10748
// evacuatedCargos = evacuatedCargos + 1 ;
10734: LD_ADDR_EXP 10
10738: PUSH
10739: LD_EXP 10
10743: PUSH
10744: LD_INT 1
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: GO 10694
10750: POP
10751: POP
// if canExitMap then
10752: LD_EXP 6
10756: IFFALSE 11022
// for unit in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10758: LD_ADDR_VAR 0 1
10762: PUSH
10763: LD_INT 4
10765: PPUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: LD_INT 21
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 21
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 70
10812: PUSH
10813: FOR_IN
10814: IFFALSE 11020
// begin if GetType ( unit ) = unit_vehicle then
10816: LD_VAR 0 1
10820: PPUSH
10821: CALL_OW 247
10825: PUSH
10826: LD_INT 2
10828: EQUAL
10829: IFFALSE 10929
// if not UnitsInside ( unit ) [ 1 ] in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 313
10840: PUSH
10841: LD_INT 1
10843: ARRAY
10844: PUSH
10845: LD_EXP 42
10849: PUSH
10850: LD_EXP 43
10854: PUSH
10855: LD_EXP 44
10859: PUSH
10860: LD_EXP 45
10864: PUSH
10865: LD_EXP 46
10869: PUSH
10870: LD_EXP 47
10874: PUSH
10875: LD_EXP 48
10879: PUSH
10880: LD_EXP 49
10884: PUSH
10885: LD_EXP 54
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: IN
10901: NOT
10902: IFFALSE 10929
// randomsToSave = randomsToSave ^ UnitsInside ( unit ) [ 1 ] ;
10904: LD_ADDR_EXP 62
10908: PUSH
10909: LD_EXP 62
10913: PUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 313
10923: PUSH
10924: LD_INT 1
10926: ARRAY
10927: ADD
10928: ST_TO_ADDR
// if not unit in [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov , Gaydar ] then
10929: LD_VAR 0 1
10933: PUSH
10934: LD_EXP 42
10938: PUSH
10939: LD_EXP 43
10943: PUSH
10944: LD_EXP 44
10948: PUSH
10949: LD_EXP 45
10953: PUSH
10954: LD_EXP 46
10958: PUSH
10959: LD_EXP 47
10963: PUSH
10964: LD_EXP 48
10968: PUSH
10969: LD_EXP 49
10973: PUSH
10974: LD_EXP 54
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: IN
10990: NOT
10991: IFFALSE 11009
// randomsToSave = randomsToSave ^ unit ;
10993: LD_ADDR_EXP 62
10997: PUSH
10998: LD_EXP 62
11002: PUSH
11003: LD_VAR 0 1
11007: ADD
11008: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 64
// end ;
11018: GO 10813
11020: POP
11021: POP
// end ;
11022: PPOPN 2
11024: END
// export function Dial_DepotInWrongPlace ( building ) ; var unit ; begin
11025: LD_INT 0
11027: PPUSH
11028: PPUSH
// ComFree ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11029: LD_INT 22
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 21
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: PPUSH
11058: CALL_OW 139
// CenterNowOnUnits ( building ) ;
11062: LD_VAR 0 1
11066: PPUSH
11067: CALL_OW 87
// InGameOn ;
11071: CALL_OW 8
// SayRadio ( Platonov , D2a-Pla-1 ) ;
11075: LD_EXP 53
11079: PPUSH
11080: LD_STRING D2a-Pla-1
11082: PPUSH
11083: CALL_OW 94
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) do
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 21
11104: PUSH
11105: LD_INT 1
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 25
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: PPUSH
11127: CALL_OW 69
11131: PUSH
11132: FOR_IN
11133: IFFALSE 11171
// if GetDistUnits ( building , unit ) < 10 then
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: CALL_OW 296
11149: PUSH
11150: LD_INT 10
11152: LESS
11153: IFFALSE 11169
// ComDismantle ( unit , building ) ;
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 167
11169: GO 11132
11171: POP
11172: POP
// repeat wait ( 0 0$1 ) ;
11173: LD_INT 35
11175: PPUSH
11176: CALL_OW 67
// until not IsPlaced ( building ) ;
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 305
11189: NOT
11190: IFFALSE 11173
// InGameOff ;
11192: CALL_OW 9
// end ;
11196: LD_VAR 0 2
11200: RET
// every 0 0$1 trigger GetSide ( Kuzmov ) = 6 do var unit ;
11201: LD_EXP 49
11205: PPUSH
11206: CALL_OW 255
11210: PUSH
11211: LD_INT 6
11213: EQUAL
11214: IFFALSE 11296
11216: GO 11218
11218: DISABLE
11219: LD_INT 0
11221: PPUSH
// begin enable ;
11222: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: LD_INT 22
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PPUSH
11252: CALL_OW 69
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11294
// if GetDistUnits ( unit , Kuzmov ) < 9 then
11260: LD_VAR 0 1
11264: PPUSH
11265: LD_EXP 49
11269: PPUSH
11270: CALL_OW 296
11274: PUSH
11275: LD_INT 9
11277: LESS
11278: IFFALSE 11292
// SetSide ( Kuzmov , 3 ) ;
11280: LD_EXP 49
11284: PPUSH
11285: LD_INT 3
11287: PPUSH
11288: CALL_OW 235
11292: GO 11257
11294: POP
11295: POP
// end ;
11296: PPOPN 1
11298: END
// export function Dial_FinishDepot ; var i ; begin
11299: LD_INT 0
11301: PPUSH
11302: PPUSH
// startEvacuation = true ;
11303: LD_ADDR_EXP 8
11307: PUSH
11308: LD_INT 1
11310: ST_TO_ADDR
// ChangeMissionObjectives ( MOutBuild ) ;
11311: LD_STRING MOutBuild
11313: PPUSH
11314: CALL_OW 337
// uc_side = 6 ;
11318: LD_ADDR_OWVAR 20
11322: PUSH
11323: LD_INT 6
11325: ST_TO_ADDR
// uc_nation = 3 ;
11326: LD_ADDR_OWVAR 21
11330: PUSH
11331: LD_INT 3
11333: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
11334: LD_ADDR_OWVAR 37
11338: PUSH
11339: LD_INT 21
11341: ST_TO_ADDR
// vc_control = control_manual ;
11342: LD_ADDR_OWVAR 38
11346: PUSH
11347: LD_INT 1
11349: ST_TO_ADDR
// vc_engine = engine_combustion ;
11350: LD_ADDR_OWVAR 39
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
11358: LD_ADDR_OWVAR 40
11362: PUSH
11363: LD_INT 51
11365: ST_TO_ADDR
// firstCargo = CreateVehicle ;
11366: LD_ADDR_EXP 60
11370: PUSH
11371: CALL_OW 45
11375: ST_TO_ADDR
// SetDir ( firstCargo , 3 ) ;
11376: LD_EXP 60
11380: PPUSH
11381: LD_INT 3
11383: PPUSH
11384: CALL_OW 233
// PlaceUnitArea ( firstCargo , RussianSpawnArea2 , false ) ;
11388: LD_EXP 60
11392: PPUSH
11393: LD_INT 3
11395: PPUSH
11396: LD_INT 0
11398: PPUSH
11399: CALL_OW 49
// PrepareMechanic ( sex_male , 3 ) ;
11403: LD_INT 1
11405: PPUSH
11406: LD_INT 3
11408: PPUSH
11409: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , firstCargo ) ;
11413: CALL_OW 44
11417: PPUSH
11418: LD_EXP 60
11422: PPUSH
11423: CALL_OW 52
// AddCargo ( firstCargo , mat_cans , 100 ) ;
11427: LD_EXP 60
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_INT 100
11437: PPUSH
11438: CALL_OW 291
// for i := 1 to 19 do
11442: LD_ADDR_VAR 0 2
11446: PUSH
11447: DOUBLE
11448: LD_INT 1
11450: DEC
11451: ST_TO_ADDR
11452: LD_INT 19
11454: PUSH
11455: FOR_TO
11456: IFFALSE 11499
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11458: LD_EXP 60
11462: PPUSH
11463: LD_EXP 34
11467: PUSH
11468: LD_VAR 0 2
11472: ARRAY
11473: PUSH
11474: LD_INT 1
11476: ARRAY
11477: PPUSH
11478: LD_EXP 34
11482: PUSH
11483: LD_VAR 0 2
11487: ARRAY
11488: PUSH
11489: LD_INT 2
11491: ARRAY
11492: PPUSH
11493: CALL_OW 171
11497: GO 11455
11499: POP
11500: POP
// AddComMoveXY ( firstCargo , 105 , 123 ) ;
11501: LD_EXP 60
11505: PPUSH
11506: LD_INT 105
11508: PPUSH
11509: LD_INT 123
11511: PPUSH
11512: CALL_OW 171
// AddComUnload ( firstCargo ) ;
11516: LD_EXP 60
11520: PPUSH
11521: CALL_OW 219
// for i := 21 to russianCargoPath1 do
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: DOUBLE
11531: LD_INT 21
11533: DEC
11534: ST_TO_ADDR
11535: LD_EXP 34
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11584
// AddComMoveXY ( firstCargo , russianCargoPath1 [ i ] [ 1 ] , russianCargoPath1 [ i ] [ 2 ] ) ;
11543: LD_EXP 60
11547: PPUSH
11548: LD_EXP 34
11552: PUSH
11553: LD_VAR 0 2
11557: ARRAY
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PPUSH
11563: LD_EXP 34
11567: PUSH
11568: LD_VAR 0 2
11572: ARRAY
11573: PUSH
11574: LD_INT 2
11576: ARRAY
11577: PPUSH
11578: CALL_OW 171
11582: GO 11540
11584: POP
11585: POP
// Say ( Burlak , D2-Bur-1 ) ;
11586: LD_EXP 42
11590: PPUSH
11591: LD_STRING D2-Bur-1
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Platonov , D2-Pla-1 ) ;
11598: LD_EXP 53
11602: PPUSH
11603: LD_STRING D2-Pla-1
11605: PPUSH
11606: CALL_OW 94
// PrepareSecondBaseTeam ;
11610: CALL 3290 0 0
// end ;
11614: LD_VAR 0 1
11618: RET
// export function Dial_LabUpgraded ; var randomMaleSci ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
// dial_labUpgradedBlock = true ;
11623: LD_ADDR_EXP 15
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze , Kuzmov ] ;
11631: LD_ADDR_VAR 0 2
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 21
11648: PUSH
11649: LD_INT 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 26
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 25
11668: PUSH
11669: LD_INT 4
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: PUSH
11687: LD_EXP 42
11691: PUSH
11692: LD_EXP 43
11696: PUSH
11697: LD_EXP 44
11701: PUSH
11702: LD_EXP 45
11706: PUSH
11707: LD_EXP 46
11711: PUSH
11712: LD_EXP 47
11716: PUSH
11717: LD_EXP 48
11721: PUSH
11722: LD_EXP 49
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: DIFF
11737: ST_TO_ADDR
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
11738: LD_EXP 48
11742: PPUSH
11743: CALL_OW 302
11747: PUSH
11748: LD_EXP 48
11752: PPUSH
11753: CALL_OW 255
11757: PUSH
11758: LD_INT 3
11760: EQUAL
11761: AND
11762: IFFALSE 11790
// begin Say ( Scholtze , D5-Sch-1 ) ;
11764: LD_EXP 48
11768: PPUSH
11769: LD_STRING D5-Sch-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11776: LD_EXP 42
11780: PPUSH
11781: LD_STRING D5-Bur-1
11783: PPUSH
11784: CALL_OW 88
// end else
11788: GO 11925
// if randomMaleSci then
11790: LD_VAR 0 2
11794: IFFALSE 11826
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11796: LD_VAR 0 2
11800: PUSH
11801: LD_INT 1
11803: ARRAY
11804: PPUSH
11805: LD_STRING D5-RSci1-1
11807: PPUSH
11808: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11812: LD_EXP 42
11816: PPUSH
11817: LD_STRING D5-Bur-1
11819: PPUSH
11820: CALL_OW 88
// end else
11824: GO 11925
// begin randomMaleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] ] ) diff [ Burlak ] ;
11826: LD_ADDR_VAR 0 2
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_INT 3
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 21
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 26
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 25
11863: PUSH
11864: LD_INT 4
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PUSH
11882: LD_EXP 42
11886: PUSH
11887: EMPTY
11888: LIST
11889: DIFF
11890: ST_TO_ADDR
// if randomMaleSci then
11891: LD_VAR 0 2
11895: IFFALSE 11925
// begin Say ( randomMaleSci [ 1 ] , D5-RSci1-1 ) ;
11897: LD_VAR 0 2
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_STRING D5-RSci1-1
11908: PPUSH
11909: CALL_OW 88
// Say ( Burlak , D5-Bur-1 ) ;
11913: LD_EXP 42
11917: PPUSH
11918: LD_STRING D5-Bur-1
11920: PPUSH
11921: CALL_OW 88
// end ; end ; end ;
11925: LD_VAR 0 1
11929: RET
// every 0 0$1 trigger GetDistUnitXY ( firstCargo , 105 , 123 ) < 12 do
11930: LD_EXP 60
11934: PPUSH
11935: LD_INT 105
11937: PPUSH
11938: LD_INT 123
11940: PPUSH
11941: CALL_OW 297
11945: PUSH
11946: LD_INT 12
11948: LESS
11949: IFFALSE 11975
11951: GO 11953
11953: DISABLE
// Say ( UnitsInside ( firstCargo ) [ 1 ] , D2a-RSol1-1 ) ;
11954: LD_EXP 60
11958: PPUSH
11959: CALL_OW 313
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PPUSH
11968: LD_STRING D2a-RSol1-1
11970: PPUSH
11971: CALL_OW 88
11975: END
// every 0 0$15 trigger startEvacuation do
11976: LD_EXP 8
11980: IFFALSE 11990
11982: GO 11984
11984: DISABLE
// begin enable ;
11985: ENABLE
// CreateEvacuateUnit ;
11986: CALL 2520 0 0
// end ;
11990: END
// every 0 0$1 trigger evacuatedCargos >= 3 do
11991: LD_EXP 10
11995: PUSH
11996: LD_INT 3
11998: GREATEREQUAL
11999: IFFALSE 12098
12001: GO 12003
12003: DISABLE
// begin if IsOk ( Kuzmov ) then
12004: LD_EXP 49
12008: PPUSH
12009: CALL_OW 302
12013: IFFALSE 12083
// begin DialogueOn ;
12015: CALL_OW 6
// Say ( Kuzmov , D2b-Kuz-1 ) ;
12019: LD_EXP 49
12023: PPUSH
12024: LD_STRING D2b-Kuz-1
12026: PPUSH
12027: CALL_OW 88
// Say ( Burlak , D2b-Bur-1 ) ;
12031: LD_EXP 42
12035: PPUSH
12036: LD_STRING D2b-Bur-1
12038: PPUSH
12039: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-2 ) ;
12043: LD_EXP 49
12047: PPUSH
12048: LD_STRING D2b-Kuz-2
12050: PPUSH
12051: CALL_OW 88
// Say ( Burlak , D2b-Bur-2 ) ;
12055: LD_EXP 42
12059: PPUSH
12060: LD_STRING D2b-Bur-2
12062: PPUSH
12063: CALL_OW 88
// Say ( Kuzmov , D2b-Kuz-3 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_STRING D2b-Kuz-3
12074: PPUSH
12075: CALL_OW 88
// DialogueOff ;
12079: CALL_OW 7
// end ; Query ( Q1 ) ;
12083: LD_STRING Q1
12085: PPUSH
12086: CALL_OW 97
// canStealCargo = true ;
12090: LD_ADDR_EXP 11
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// end ;
12098: END
// every 0 0$1 trigger canStealCargo do var unit , cargo ;
12099: LD_EXP 11
12103: IFFALSE 12401
12105: GO 12107
12107: DISABLE
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
// begin enable ;
12112: ENABLE
// for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] ] ) do
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 6
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 34
12140: PUSH
12141: LD_INT 51
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12399
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_INT 22
12168: PUSH
12169: LD_INT 3
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 50
12188: PUSH
12189: EMPTY
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 69
12201: PUSH
12202: FOR_IN
12203: IFFALSE 12395
// if GetDistUnits ( cargo , unit ) < 8 and not cargo in stealCargos and GetCargo ( cargo , mat_cans ) > 0 then
12205: LD_VAR 0 2
12209: PPUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 296
12219: PUSH
12220: LD_INT 8
12222: LESS
12223: PUSH
12224: LD_VAR 0 2
12228: PUSH
12229: LD_EXP 13
12233: IN
12234: NOT
12235: AND
12236: PUSH
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 289
12249: PUSH
12250: LD_INT 0
12252: GREATER
12253: AND
12254: IFFALSE 12393
// begin stealCargos = stealCargos ^ cargo ;
12256: LD_ADDR_EXP 13
12260: PUSH
12261: LD_EXP 13
12265: PUSH
12266: LD_VAR 0 2
12270: ADD
12271: ST_TO_ADDR
// case Query ( QQrSteal ) of 1 :
12272: LD_STRING QQrSteal
12274: PPUSH
12275: CALL_OW 97
12279: PUSH
12280: LD_INT 1
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12361
12288: POP
// begin stealWarmCount = stealWarmCount + 1 ;
12289: LD_ADDR_EXP 12
12293: PUSH
12294: LD_EXP 12
12298: PUSH
12299: LD_INT 1
12301: PLUS
12302: ST_TO_ADDR
// DialogueOn ;
12303: CALL_OW 6
// Say ( Burlak , DQrSteal#1-Bur-1 ) ;
12307: LD_EXP 42
12311: PPUSH
12312: LD_STRING DQrSteal#1-Bur-1
12314: PPUSH
12315: CALL_OW 88
// DialogueOff ;
12319: CALL_OW 7
// ComMoveToArea ( cargo , UnloadCargoArea ) ;
12323: LD_VAR 0 2
12327: PPUSH
12328: LD_INT 14
12330: PPUSH
12331: CALL_OW 113
// AddComUnload ( cargo ) ;
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL_OW 219
// AddComMoveXY ( cargo , 92 , 177 ) ;
12344: LD_VAR 0 2
12348: PPUSH
12349: LD_INT 92
12351: PPUSH
12352: LD_INT 177
12354: PPUSH
12355: CALL_OW 171
// end ; 2 :
12359: GO 12393
12361: LD_INT 2
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12369
12367: GO 12392
12369: POP
// begin DialogueOn ;
12370: CALL_OW 6
// Say ( Burlak , DQrSteal#2-Bur-1 ) ;
12374: LD_EXP 42
12378: PPUSH
12379: LD_STRING DQrSteal#2-Bur-1
12381: PPUSH
12382: CALL_OW 88
// DialogueOff ;
12386: CALL_OW 7
// end ; end ;
12390: GO 12393
12392: POP
// end ;
12393: GO 12202
12395: POP
12396: POP
12397: GO 12158
12399: POP
12400: POP
// end ;
12401: PPOPN 2
12403: END
// every 0 0$12 trigger stealWarmCount = 3 do
12404: LD_EXP 12
12408: PUSH
12409: LD_INT 3
12411: EQUAL
12412: IFFALSE 12484
12414: GO 12416
12416: DISABLE
// begin DialogueOn ;
12417: CALL_OW 6
// SayRadio ( Platonov , D3A-Pla-1 ) ;
12421: LD_EXP 53
12425: PPUSH
12426: LD_STRING D3A-Pla-1
12428: PPUSH
12429: CALL_OW 94
// Say ( Burlak , D3A-Bur-1 ) ;
12433: LD_EXP 42
12437: PPUSH
12438: LD_STRING D3A-Bur-1
12440: PPUSH
12441: CALL_OW 88
// SayRadio ( Platonov , D3A-Pla-2 ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D3A-Pla-2
12452: PPUSH
12453: CALL_OW 94
// if IsOK ( Kuzmov ) then
12457: LD_EXP 49
12461: PPUSH
12462: CALL_OW 302
12466: IFFALSE 12480
// Say ( Kuzmov , D3A-Kuz-2 ) ;
12468: LD_EXP 49
12472: PPUSH
12473: LD_STRING D3A-Kuz-2
12475: PPUSH
12476: CALL_OW 88
// DialogueOff ;
12480: CALL_OW 7
// end ;
12484: END
// every 0 0$10 trigger stealWarmCount = 6 do
12485: LD_EXP 12
12489: PUSH
12490: LD_INT 6
12492: EQUAL
12493: IFFALSE 12542
12495: GO 12497
12497: DISABLE
// begin DialogueOn ;
12498: CALL_OW 6
// SayRadio ( Platonov , D3B-Pla-1 ) ;
12502: LD_EXP 53
12506: PPUSH
12507: LD_STRING D3B-Pla-1
12509: PPUSH
12510: CALL_OW 94
// Say ( Burlak , D3B-Bur-1 ) ;
12514: LD_EXP 42
12518: PPUSH
12519: LD_STRING D3B-Bur-1
12521: PPUSH
12522: CALL_OW 88
// SayRadio ( Platonov , D3B-Pla-2 ) ;
12526: LD_EXP 53
12530: PPUSH
12531: LD_STRING D3B-Pla-2
12533: PPUSH
12534: CALL_OW 94
// DialogueOff ;
12538: CALL_OW 7
// end ;
12542: END
// every 0 0$10 trigger stealWarmCount = 7 do
12543: LD_EXP 12
12547: PUSH
12548: LD_INT 7
12550: EQUAL
12551: IFFALSE 12635
12553: GO 12555
12555: DISABLE
// begin DialogueOn ;
12556: CALL_OW 6
// SayRadio ( Platonov , D3C-Pla-1 ) ;
12560: LD_EXP 53
12564: PPUSH
12565: LD_STRING D3C-Pla-1
12567: PPUSH
12568: CALL_OW 94
// Say ( Burlak , D3C-Bur-1 ) ;
12572: LD_EXP 42
12576: PPUSH
12577: LD_STRING D3C-Bur-1
12579: PPUSH
12580: CALL_OW 88
// SayRadio ( Platonov , D3C-Pla-2 ) ;
12584: LD_EXP 53
12588: PPUSH
12589: LD_STRING D3C-Pla-2
12591: PPUSH
12592: CALL_OW 94
// Say ( Burlak , D3C-Bur-2 ) ;
12596: LD_EXP 42
12600: PPUSH
12601: LD_STRING D3C-Bur-2
12603: PPUSH
12604: CALL_OW 88
// if IsOK ( Kuzmov ) then
12608: LD_EXP 49
12612: PPUSH
12613: CALL_OW 302
12617: IFFALSE 12631
// Say ( Kuzmov , D3C-Kuz-2 ) ;
12619: LD_EXP 49
12623: PPUSH
12624: LD_STRING D3C-Kuz-2
12626: PPUSH
12627: CALL_OW 88
// DialogueOff ;
12631: CALL_OW 7
// end ;
12635: END
// every 0 0$10 trigger stealWarmCount = 8 do
12636: LD_EXP 12
12640: PUSH
12641: LD_INT 8
12643: EQUAL
12644: IFFALSE 12836
12646: GO 12648
12648: DISABLE
// begin canStealCargo = false ;
12649: LD_ADDR_EXP 11
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// DialogueOn ;
12657: CALL_OW 6
// SayRadio ( Platonov , D3D-Pla-1 ) ;
12661: LD_EXP 53
12665: PPUSH
12666: LD_STRING D3D-Pla-1
12668: PPUSH
12669: CALL_OW 94
// Say ( Burlak , D3D-Bur-1 ) ;
12673: LD_EXP 42
12677: PPUSH
12678: LD_STRING D3D-Bur-1
12680: PPUSH
12681: CALL_OW 88
// if kurinOpinion = 0 then
12685: LD_EXP 2
12689: PUSH
12690: LD_INT 0
12692: EQUAL
12693: IFFALSE 12713
// begin SayRadio ( Platonov , D3E-Pla-1 ) ;
12695: LD_EXP 53
12699: PPUSH
12700: LD_STRING D3E-Pla-1
12702: PPUSH
12703: CALL_OW 94
// Lose_Arrest ;
12707: CALL 7552 0 0
// exit ;
12711: GO 12836
// end ; if meetBelkovBrother = 1 then
12713: LD_EXP 3
12717: PUSH
12718: LD_INT 1
12720: EQUAL
12721: IFFALSE 12741
// begin SayRadio ( Platonov , D3E-Pla-1a ) ;
12723: LD_EXP 53
12727: PPUSH
12728: LD_STRING D3E-Pla-1a
12730: PPUSH
12731: CALL_OW 94
// Lose_Arrest ;
12735: CALL 7552 0 0
// exit ;
12739: GO 12836
// end ; if platonovOpinion = 0 then
12741: LD_EXP 1
12745: PUSH
12746: LD_INT 0
12748: EQUAL
12749: IFFALSE 12769
// begin SayRadio ( Platonov , D3E-Pla-1b ) ;
12751: LD_EXP 53
12755: PPUSH
12756: LD_STRING D3E-Pla-1b
12758: PPUSH
12759: CALL_OW 94
// Lose_Arrest ;
12763: CALL 7552 0 0
// exit ;
12767: GO 12836
// end ; if platonovOpinion = 1 then
12769: LD_EXP 1
12773: PUSH
12774: LD_INT 1
12776: EQUAL
12777: IFFALSE 12797
// begin SayRadio ( Platonov , D3E-Pla-1c ) ;
12779: LD_EXP 53
12783: PPUSH
12784: LD_STRING D3E-Pla-1c
12786: PPUSH
12787: CALL_OW 94
// Lose_Arrest ;
12791: CALL 7552 0 0
// exit ;
12795: GO 12836
// end ; SayRadio ( Platonov , D3D-Pla-2 ) ;
12797: LD_EXP 53
12801: PPUSH
12802: LD_STRING D3D-Pla-2
12804: PPUSH
12805: CALL_OW 94
// if IsOK ( Kuzmov ) then
12809: LD_EXP 49
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12832
// Say ( Kuzmov , D3D-Kuz-2 ) ;
12820: LD_EXP 49
12824: PPUSH
12825: LD_STRING D3D-Kuz-2
12827: PPUSH
12828: CALL_OW 88
// DialogueOff ;
12832: CALL_OW 7
// end ;
12836: END
// every 0 0$20 do var allyUntis ;
12837: GO 12839
12839: DISABLE
12840: LD_INT 0
12842: PPUSH
// begin enable ;
12843: ENABLE
// wait ( 0 0$10 ) ;
12844: LD_INT 350
12846: PPUSH
12847: CALL_OW 67
// allyUntis = FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_hastask ] ] ] ) diff popovTeam ;
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 6
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 60
12871: PUSH
12872: EMPTY
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: PUSH
12888: LD_EXP 56
12892: DIFF
12893: ST_TO_ADDR
// allyUntis = allyUntis diff Gaydar ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_VAR 0 1
12903: PUSH
12904: LD_EXP 54
12908: DIFF
12909: ST_TO_ADDR
// allyUntis = allyUntis diff Kuzmov ;
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_VAR 0 1
12919: PUSH
12920: LD_EXP 49
12924: DIFF
12925: ST_TO_ADDR
// allyUntis = allyUntis diff secondBaseTeam ;
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_VAR 0 1
12935: PUSH
12936: LD_EXP 57
12940: DIFF
12941: ST_TO_ADDR
// if not allyUntis then
12942: LD_VAR 0 1
12946: NOT
12947: IFFALSE 12951
// exit ;
12949: GO 12975
// ComUnload ( allyUntis ) ;
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 159
// AddComMoveXY ( allyUntis , 92 , 176 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 92
12967: PPUSH
12968: LD_INT 176
12970: PPUSH
12971: CALL_OW 171
// end ;
12975: PPOPN 1
12977: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks do
12978: LD_EXP 10
12982: PUSH
12983: LD_EXP 14
12987: GREATEREQUAL
12988: IFFALSE 13001
12990: GO 12992
12992: DISABLE
// begin startEvacuation = false ;
12993: LD_ADDR_EXP 8
12997: PUSH
12998: LD_INT 0
13000: ST_TO_ADDR
// end ;
13001: END
// every 0 0$1 trigger evacuatedCargos >= cargosToTriggerAttacks and not FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) diff secondBaseTeam do
13002: LD_EXP 10
13006: PUSH
13007: LD_EXP 14
13011: GREATEREQUAL
13012: PUSH
13013: LD_INT 22
13015: PUSH
13016: LD_INT 6
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 2
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 69
13059: PUSH
13060: LD_EXP 57
13064: DIFF
13065: NOT
13066: AND
13067: IFFALSE 13662
13069: GO 13071
13071: DISABLE
// begin wait ( 1 1$00 ) ;
13072: LD_INT 2100
13074: PPUSH
13075: CALL_OW 67
// DialogueOn ;
13079: CALL_OW 6
// SayRadio ( Platonov , D4-Pla-1 ) ;
13083: LD_EXP 53
13087: PPUSH
13088: LD_STRING D4-Pla-1
13090: PPUSH
13091: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
13095: LD_EXP 42
13099: PPUSH
13100: LD_STRING D4-Bur-1
13102: PPUSH
13103: CALL_OW 88
// DialogueOff ;
13107: CALL_OW 7
// wait ( 0 0$2 ) ;
13111: LD_INT 70
13113: PPUSH
13114: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13118: LD_EXP 49
13122: PPUSH
13123: CALL_OW 302
13127: PUSH
13128: LD_EXP 49
13132: PPUSH
13133: CALL_OW 255
13137: PUSH
13138: LD_INT 3
13140: EQUAL
13141: AND
13142: IFFALSE 13424
// begin Say ( Kuzmov , D4-Kuz-1 ) ;
13144: LD_EXP 49
13148: PPUSH
13149: LD_STRING D4-Kuz-1
13151: PPUSH
13152: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13156: LD_EXP 46
13160: PPUSH
13161: CALL_OW 302
13165: PUSH
13166: LD_EXP 46
13170: PPUSH
13171: CALL_OW 255
13175: PUSH
13176: LD_INT 3
13178: EQUAL
13179: AND
13180: IFFALSE 13196
// Say ( Belkov , D4-Bel-1 ) else
13182: LD_EXP 46
13186: PPUSH
13187: LD_STRING D4-Bel-1
13189: PPUSH
13190: CALL_OW 88
13194: GO 13234
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13196: LD_EXP 47
13200: PPUSH
13201: CALL_OW 302
13205: PUSH
13206: LD_EXP 47
13210: PPUSH
13211: CALL_OW 255
13215: PUSH
13216: LD_INT 3
13218: EQUAL
13219: AND
13220: IFFALSE 13234
// Say ( Belkov2 , D4-Bel-1 ) ;
13222: LD_EXP 47
13226: PPUSH
13227: LD_STRING D4-Bel-1
13229: PPUSH
13230: CALL_OW 88
// Say ( Burlak , D4-Bur-2 ) ;
13234: LD_EXP 42
13238: PPUSH
13239: LD_STRING D4-Bur-2
13241: PPUSH
13242: CALL_OW 88
// if IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 3 then
13246: LD_EXP 43
13250: PPUSH
13251: CALL_OW 302
13255: PUSH
13256: LD_EXP 43
13260: PPUSH
13261: CALL_OW 255
13265: PUSH
13266: LD_INT 3
13268: EQUAL
13269: AND
13270: IFFALSE 13296
// begin Say ( Gnyevko , D4-Gny-2 ) ;
13272: LD_EXP 43
13276: PPUSH
13277: LD_STRING D4-Gny-2
13279: PPUSH
13280: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
13284: LD_EXP 42
13288: PPUSH
13289: LD_STRING D4-Bur-3
13291: PPUSH
13292: CALL_OW 88
// end ; Say ( Burlak , D4-Bur-3a ) ;
13296: LD_EXP 42
13300: PPUSH
13301: LD_STRING D4-Bur-3a
13303: PPUSH
13304: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13308: LD_EXP 46
13312: PPUSH
13313: CALL_OW 302
13317: PUSH
13318: LD_EXP 46
13322: PPUSH
13323: CALL_OW 255
13327: PUSH
13328: LD_INT 3
13330: EQUAL
13331: AND
13332: IFFALSE 13348
// Say ( Belkov , D4-Bel-3 ) else
13334: LD_EXP 46
13338: PPUSH
13339: LD_STRING D4-Bel-3
13341: PPUSH
13342: CALL_OW 88
13346: GO 13386
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13348: LD_EXP 47
13352: PPUSH
13353: CALL_OW 302
13357: PUSH
13358: LD_EXP 47
13362: PPUSH
13363: CALL_OW 255
13367: PUSH
13368: LD_INT 3
13370: EQUAL
13371: AND
13372: IFFALSE 13386
// Say ( Belkov2 , D4-Bel-3 ) ;
13374: LD_EXP 47
13378: PPUSH
13379: LD_STRING D4-Bel-3
13381: PPUSH
13382: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13386: LD_EXP 45
13390: PPUSH
13391: CALL_OW 302
13395: PUSH
13396: LD_EXP 45
13400: PPUSH
13401: CALL_OW 255
13405: PUSH
13406: LD_INT 3
13408: EQUAL
13409: AND
13410: IFFALSE 13424
// Say ( Kovalyuk , D4-Kov-3 ) ;
13412: LD_EXP 45
13416: PPUSH
13417: LD_STRING D4-Kov-3
13419: PPUSH
13420: CALL_OW 88
// end ; PrepareFirstAttack ;
13424: CALL 4175 0 0
// firstAttack = true ;
13428: LD_ADDR_EXP 18
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13436: LD_INT 350
13438: PPUSH
13439: CALL_OW 67
// Say ( Burlak , D7-Bur-1 ) ;
13443: LD_EXP 42
13447: PPUSH
13448: LD_STRING D7-Bur-1
13450: PPUSH
13451: CALL_OW 88
// AttackEnemy ( firstAttackGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
13455: LD_EXP 64
13459: PPUSH
13460: LD_INT 135
13462: PUSH
13463: LD_INT 4
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 134
13472: PUSH
13473: LD_INT 19
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 132
13482: PUSH
13483: LD_INT 26
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 128
13492: PUSH
13493: LD_INT 31
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 123
13502: PUSH
13503: LD_INT 37
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 118
13512: PUSH
13513: LD_INT 45
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 112
13522: PUSH
13523: LD_INT 51
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 106
13532: PUSH
13533: LD_INT 57
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 99
13542: PUSH
13543: LD_INT 62
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 93
13552: PUSH
13553: LD_INT 67
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 86
13562: PUSH
13563: LD_INT 72
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 78
13572: PUSH
13573: LD_INT 75
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 71
13582: PUSH
13583: LD_INT 81
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 69
13592: PUSH
13593: LD_INT 88
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 71
13602: PUSH
13603: LD_INT 95
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 74
13612: PUSH
13613: LD_INT 103
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 80
13622: PUSH
13623: LD_INT 113
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: LD_INT 11
13657: PPUSH
13658: CALL 5018 0 5
// end ;
13662: END
// every 0 0$1 trigger not UnitFilter ( firstAttackGroup , [ f_type , unit_human ] ) and firstAttack do
13663: LD_EXP 64
13667: PPUSH
13668: LD_INT 21
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PPUSH
13678: CALL_OW 72
13682: NOT
13683: PUSH
13684: LD_EXP 18
13688: AND
13689: IFFALSE 13748
13691: GO 13693
13693: DISABLE
// begin ComExitBuilding ( secondBaseTeam ) ;
13694: LD_EXP 57
13698: PPUSH
13699: CALL_OW 122
// wait ( 0 0$1 ) ;
13703: LD_INT 35
13705: PPUSH
13706: CALL_OW 67
// ComMoveXY ( secondBaseTeam , 114 , 114 ) ;
13710: LD_EXP 57
13714: PPUSH
13715: LD_INT 114
13717: PPUSH
13718: LD_INT 114
13720: PPUSH
13721: CALL_OW 111
// wait ( 0 0$15 ) ;
13725: LD_INT 525
13727: PPUSH
13728: CALL_OW 67
// firstAttack = false ;
13732: LD_ADDR_EXP 18
13736: PUSH
13737: LD_INT 0
13739: ST_TO_ADDR
// enableAttacks = true ;
13740: LD_ADDR_EXP 17
13744: PUSH
13745: LD_INT 1
13747: ST_TO_ADDR
// end ;
13748: END
// every 0 0$1 trigger Difficulty = 1 and secondBaseTeam do var un ;
13749: LD_OWVAR 67
13753: PUSH
13754: LD_INT 1
13756: EQUAL
13757: PUSH
13758: LD_EXP 57
13762: AND
13763: IFFALSE 13831
13765: GO 13767
13767: DISABLE
13768: LD_INT 0
13770: PPUSH
// begin enable ;
13771: ENABLE
// for un in secondBaseTeam do
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: LD_EXP 57
13781: PUSH
13782: FOR_IN
13783: IFFALSE 13829
// if IsInArea ( un , HillArea ) then
13785: LD_VAR 0 1
13789: PPUSH
13790: LD_INT 5
13792: PPUSH
13793: CALL_OW 308
13797: IFFALSE 13827
// begin SetSide ( un , 3 ) ;
13799: LD_VAR 0 1
13803: PPUSH
13804: LD_INT 3
13806: PPUSH
13807: CALL_OW 235
// secondBaseTeam = secondBaseTeam diff un ;
13811: LD_ADDR_EXP 57
13815: PUSH
13816: LD_EXP 57
13820: PUSH
13821: LD_VAR 0 1
13825: DIFF
13826: ST_TO_ADDR
// end ;
13827: GO 13782
13829: POP
13830: POP
// end ;
13831: PPOPN 1
13833: END
// export function Dial_Contact ; begin
13834: LD_INT 0
13836: PPUSH
// Say ( Burlak , D7-Bur-1a ) ;
13837: LD_EXP 42
13841: PPUSH
13842: LD_STRING D7-Bur-1a
13844: PPUSH
13845: CALL_OW 88
// wait ( 0 0$12 ) ;
13849: LD_INT 420
13851: PPUSH
13852: CALL_OW 67
// Say ( Burlak , D7-Bur-1b ) ;
13856: LD_EXP 42
13860: PPUSH
13861: LD_STRING D7-Bur-1b
13863: PPUSH
13864: CALL_OW 88
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 3 then
13868: LD_EXP 46
13872: PPUSH
13873: CALL_OW 302
13877: PUSH
13878: LD_EXP 46
13882: PPUSH
13883: CALL_OW 255
13887: PUSH
13888: LD_INT 3
13890: EQUAL
13891: AND
13892: IFFALSE 13908
// Say ( Belkov , D7-Bel-1 ) else
13894: LD_EXP 46
13898: PPUSH
13899: LD_STRING D7-Bel-1
13901: PPUSH
13902: CALL_OW 88
13906: GO 13946
// if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 3 then
13908: LD_EXP 47
13912: PPUSH
13913: CALL_OW 302
13917: PUSH
13918: LD_EXP 47
13922: PPUSH
13923: CALL_OW 255
13927: PUSH
13928: LD_INT 3
13930: EQUAL
13931: AND
13932: IFFALSE 13946
// Say ( Belkov2 , D7-Bel-1 ) ;
13934: LD_EXP 47
13938: PPUSH
13939: LD_STRING D7-Bel-1
13941: PPUSH
13942: CALL_OW 88
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
13946: LD_EXP 49
13950: PPUSH
13951: CALL_OW 302
13955: PUSH
13956: LD_EXP 49
13960: PPUSH
13961: CALL_OW 255
13965: PUSH
13966: LD_INT 3
13968: EQUAL
13969: AND
13970: IFFALSE 13984
// Say ( Kuzmov , D7-Kuz-1 ) ;
13972: LD_EXP 49
13976: PPUSH
13977: LD_STRING D7-Kuz-1
13979: PPUSH
13980: CALL_OW 88
// if IsOK ( Kovalyuk ) and GetSide ( Kovalyuk ) = 3 then
13984: LD_EXP 45
13988: PPUSH
13989: CALL_OW 302
13993: PUSH
13994: LD_EXP 45
13998: PPUSH
13999: CALL_OW 255
14003: PUSH
14004: LD_INT 3
14006: EQUAL
14007: AND
14008: IFFALSE 14022
// Say ( Kovalyuk , D7-Kov-1 ) ;
14010: LD_EXP 45
14014: PPUSH
14015: LD_STRING D7-Kov-1
14017: PPUSH
14018: CALL_OW 88
// if IsOK ( Scholtze ) and GetSide ( Scholtze ) = 3 then
14022: LD_EXP 48
14026: PPUSH
14027: CALL_OW 302
14031: PUSH
14032: LD_EXP 48
14036: PPUSH
14037: CALL_OW 255
14041: PUSH
14042: LD_INT 3
14044: EQUAL
14045: AND
14046: IFFALSE 14060
// Say ( Scholtze , D7-Sch-1 ) ;
14048: LD_EXP 48
14052: PPUSH
14053: LD_STRING D7-Sch-1
14055: PPUSH
14056: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D7-RSol1-1 ,  , false ) ;
14060: LD_INT 22
14062: PUSH
14063: LD_INT 3
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 26
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: PPUSH
14100: LD_STRING D7-RSol1-1
14102: PPUSH
14103: LD_STRING 
14105: PPUSH
14106: LD_INT 0
14108: PPUSH
14109: CALL 9513 0 4
// PrepareHeike ;
14113: CALL 3495 0 0
// wait ( 0 0$10 ) ;
14117: LD_INT 350
14119: PPUSH
14120: CALL_OW 67
// Say ( Heike , D7a-Hke-1 ) ;
14124: LD_EXP 63
14128: PPUSH
14129: LD_STRING D7a-Hke-1
14131: PPUSH
14132: CALL_OW 88
// Say ( Burlak , D7a-Bur-1 ) ;
14136: LD_EXP 42
14140: PPUSH
14141: LD_STRING D7a-Bur-1
14143: PPUSH
14144: CALL_OW 88
// wait ( 0 0$50 ) ;
14148: LD_INT 1750
14150: PPUSH
14151: CALL_OW 67
// if IsOK ( Kuzmov ) and GetSide ( Kuzmov ) = 3 then
14155: LD_EXP 49
14159: PPUSH
14160: CALL_OW 302
14164: PUSH
14165: LD_EXP 49
14169: PPUSH
14170: CALL_OW 255
14174: PUSH
14175: LD_INT 3
14177: EQUAL
14178: AND
14179: IFFALSE 14195
// Say ( Kuzmov , D8-Kuz-1 ) else
14181: LD_EXP 49
14185: PPUSH
14186: LD_STRING D8-Kuz-1
14188: PPUSH
14189: CALL_OW 88
14193: GO 14248
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
14195: LD_INT 22
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 1
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 26
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PPUSH
14235: LD_STRING D8-RSol1-1
14237: PPUSH
14238: LD_STRING 
14240: PPUSH
14241: LD_INT 0
14243: PPUSH
14244: CALL 9513 0 4
// Say ( Burlak , D8-Bur-1 ) ;
14248: LD_EXP 42
14252: PPUSH
14253: LD_STRING D8-Bur-1
14255: PPUSH
14256: CALL_OW 88
// end ;
14260: LD_VAR 0 1
14264: RET
// every 0 0$1 trigger not IsPlaced ( Gaydar ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) < 5 and FilterUnitsInArea ( HillArea , [ [ f_side , 2 ] ] ) > 3 do
14265: LD_EXP 54
14269: PPUSH
14270: CALL_OW 305
14274: NOT
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 50
14298: PUSH
14299: EMPTY
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: NOT
14312: AND
14313: PUSH
14314: LD_INT 22
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 21
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 50
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: PPUSH
14345: CALL_OW 69
14349: PUSH
14350: LD_INT 5
14352: LESS
14353: AND
14354: PUSH
14355: LD_INT 5
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: PPUSH
14371: CALL_OW 70
14375: PUSH
14376: LD_INT 3
14378: GREATER
14379: AND
14380: IFFALSE 14389
14382: GO 14384
14384: DISABLE
// Lose_ArabBreakthrough ;
14385: CALL 7567 0 0
14389: END
// every 1 1$30 trigger currentWave >= enemyWaves do
14390: LD_EXP 19
14394: PUSH
14395: LD_EXP 38
14399: GREATEREQUAL
14400: IFFALSE 14598
14402: GO 14404
14404: DISABLE
// begin SayRadio ( Platonov , D9-Pla-1 ) ;
14405: LD_EXP 53
14409: PPUSH
14410: LD_STRING D9-Pla-1
14412: PPUSH
14413: CALL_OW 94
// Say ( Burlak , D9-Bur-1 ) ;
14417: LD_EXP 42
14421: PPUSH
14422: LD_STRING D9-Bur-1
14424: PPUSH
14425: CALL_OW 88
// SayRadio ( Platonov , D9-Pla-2 ) ;
14429: LD_EXP 53
14433: PPUSH
14434: LD_STRING D9-Pla-2
14436: PPUSH
14437: CALL_OW 94
// Say ( Burlak , D9-Bur-2 ) ;
14441: LD_EXP 42
14445: PPUSH
14446: LD_STRING D9-Bur-2
14448: PPUSH
14449: CALL_OW 88
// wait ( 2 2$0 ) ;
14453: LD_INT 4200
14455: PPUSH
14456: CALL_OW 67
// PlaceUnitArea ( Gaydar , GaydarSpawnArea , false ) ;
14460: LD_EXP 54
14464: PPUSH
14465: LD_INT 6
14467: PPUSH
14468: LD_INT 0
14470: PPUSH
14471: CALL_OW 49
// arabianCanExitMap = true ;
14475: LD_ADDR_EXP 7
14479: PUSH
14480: LD_INT 1
14482: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14483: LD_INT 35
14485: PPUSH
14486: CALL_OW 67
// CenterNowOnUnits ( Gaydar ) ;
14490: LD_EXP 54
14494: PPUSH
14495: CALL_OW 87
// DialogueOn ;
14499: CALL_OW 6
// SayRadio ( Gaydar , D10-Gay-1 ) ;
14503: LD_EXP 54
14507: PPUSH
14508: LD_STRING D10-Gay-1
14510: PPUSH
14511: CALL_OW 94
// Say ( Burlak , D10-Bur-1 ) ;
14515: LD_EXP 42
14519: PPUSH
14520: LD_STRING D10-Bur-1
14522: PPUSH
14523: CALL_OW 88
// SayRadio ( Gaydar , D10-Gay-2 ) ;
14527: LD_EXP 54
14531: PPUSH
14532: LD_STRING D10-Gay-2
14534: PPUSH
14535: CALL_OW 94
// SayRadio ( Popov , D10-Pop-2 ) ;
14539: LD_EXP 52
14543: PPUSH
14544: LD_STRING D10-Pop-2
14546: PPUSH
14547: CALL_OW 94
// SayRadio ( Gaydar , D10-Gay-3 ) ;
14551: LD_EXP 54
14555: PPUSH
14556: LD_STRING D10-Gay-3
14558: PPUSH
14559: CALL_OW 94
// DialogueOff ;
14563: CALL_OW 7
// ComMoveXY ( Gaydar , 36 , 38 ) ;
14567: LD_EXP 54
14571: PPUSH
14572: LD_INT 36
14574: PPUSH
14575: LD_INT 38
14577: PPUSH
14578: CALL_OW 111
// AddComCrawl ( Gaydar ) ;
14582: LD_EXP 54
14586: PPUSH
14587: CALL_OW 197
// ChangeMissionObjectives ( M2 ) ;
14591: LD_STRING M2
14593: PPUSH
14594: CALL_OW 337
// end ;
14598: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
14599: LD_EXP 7
14603: IFFALSE 14676
14605: GO 14607
14607: DISABLE
14608: LD_INT 0
14610: PPUSH
// begin enable ;
14611: ENABLE
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 2 ] ] ) , ArabianExitMapArea ) ;
14612: LD_INT 22
14614: PUSH
14615: LD_INT 2
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: EMPTY
14623: LIST
14624: PPUSH
14625: CALL_OW 69
14629: PPUSH
14630: LD_INT 13
14632: PPUSH
14633: CALL_OW 113
// for unit in FilterUnitsInArea ( ArabianExitMapArea , [ f_side , 2 ] ) do
14637: LD_ADDR_VAR 0 1
14641: PUSH
14642: LD_INT 13
14644: PPUSH
14645: LD_INT 22
14647: PUSH
14648: LD_INT 2
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PPUSH
14655: CALL_OW 70
14659: PUSH
14660: FOR_IN
14661: IFFALSE 14674
// RemoveUnit ( unit ) ;
14663: LD_VAR 0 1
14667: PPUSH
14668: CALL_OW 64
14672: GO 14660
14674: POP
14675: POP
// end ;
14676: PPOPN 1
14678: END
// every 0 0$01 trigger not saveGaydar do var unit , maleUnits ;
14679: LD_EXP 20
14683: NOT
14684: IFFALSE 15074
14686: GO 14688
14688: DISABLE
14689: LD_INT 0
14691: PPUSH
14692: PPUSH
// begin enable ;
14693: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
14694: LD_ADDR_VAR 0 1
14698: PUSH
14699: LD_INT 22
14701: PUSH
14702: LD_INT 3
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 21
14711: PUSH
14712: LD_INT 1
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PPUSH
14723: CALL_OW 69
14727: PUSH
14728: FOR_IN
14729: IFFALSE 15072
// begin if GetDistUnits ( unit , Gaydar ) < 6 then
14731: LD_VAR 0 1
14735: PPUSH
14736: LD_EXP 54
14740: PPUSH
14741: CALL_OW 296
14745: PUSH
14746: LD_INT 6
14748: LESS
14749: IFFALSE 15070
// begin SetSide ( Gaydar , 3 ) ;
14751: LD_EXP 54
14755: PPUSH
14756: LD_INT 3
14758: PPUSH
14759: CALL_OW 235
// ComWalk ( Gaydar ) ;
14763: LD_EXP 54
14767: PPUSH
14768: CALL_OW 138
// saveGaydar = true ;
14772: LD_ADDR_EXP 20
14776: PUSH
14777: LD_INT 1
14779: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14780: LD_INT 35
14782: PPUSH
14783: CALL_OW 67
// DialogueOn ;
14787: CALL_OW 6
// Say ( Gaydar , D11-Gay-1 ) ;
14791: LD_EXP 54
14795: PPUSH
14796: LD_STRING D11-Gay-1
14798: PPUSH
14799: CALL_OW 88
// if not GetDistUnits ( Burlak , Gaydar ) < 6 then
14803: LD_EXP 42
14807: PPUSH
14808: LD_EXP 54
14812: PPUSH
14813: CALL_OW 296
14817: PUSH
14818: LD_INT 6
14820: LESS
14821: NOT
14822: IFFALSE 14922
// begin maleUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff Gaydar ;
14824: LD_ADDR_VAR 0 2
14828: PUSH
14829: LD_INT 22
14831: PUSH
14832: LD_INT 3
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 21
14841: PUSH
14842: LD_INT 1
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 26
14851: PUSH
14852: LD_INT 1
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 50
14861: PUSH
14862: EMPTY
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: PUSH
14876: LD_EXP 54
14880: DIFF
14881: ST_TO_ADDR
// Say ( NearestUnitToUnit ( maleUnits , Gaydar ) , D11-RSol1-1 ) ;
14882: LD_VAR 0 2
14886: PPUSH
14887: LD_EXP 54
14891: PPUSH
14892: CALL_OW 74
14896: PPUSH
14897: LD_STRING D11-RSol1-1
14899: PPUSH
14900: CALL_OW 88
// gaydarWaitForBurlak = true ;
14904: LD_ADDR_EXP 21
14908: PUSH
14909: LD_INT 1
14911: ST_TO_ADDR
// DialogueOff ;
14912: CALL_OW 7
// exit ;
14916: POP
14917: POP
14918: GO 15074
// end else
14920: GO 15070
// begin Say ( Gaydar , D11-Gay-2 ) ;
14922: LD_EXP 54
14926: PPUSH
14927: LD_STRING D11-Gay-2
14929: PPUSH
14930: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
14934: LD_EXP 42
14938: PPUSH
14939: LD_STRING D11-Bur-2
14941: PPUSH
14942: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
14946: LD_EXP 54
14950: PPUSH
14951: LD_STRING D11-Gay-3
14953: PPUSH
14954: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
14958: LD_EXP 42
14962: PPUSH
14963: LD_STRING D11-Bur-3
14965: PPUSH
14966: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
14970: LD_EXP 54
14974: PPUSH
14975: LD_STRING D11-Gay-4
14977: PPUSH
14978: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
14982: LD_EXP 42
14986: PPUSH
14987: LD_STRING D11-Bur-4
14989: PPUSH
14990: CALL_OW 88
// wait ( 0 0$2 ) ;
14994: LD_INT 70
14996: PPUSH
14997: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15001: LD_EXP 52
15005: PPUSH
15006: LD_STRING D12-Pop-1
15008: PPUSH
15009: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15013: LD_EXP 42
15017: PPUSH
15018: LD_STRING D12-Bur-1
15020: PPUSH
15021: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15025: LD_EXP 53
15029: PPUSH
15030: LD_STRING D12-Pla-1
15032: PPUSH
15033: CALL_OW 94
// DialogueOff ;
15037: CALL_OW 7
// canExitMap = true ;
15041: LD_ADDR_EXP 6
15045: PUSH
15046: LD_INT 1
15048: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15049: LD_STRING MFinal
15051: PPUSH
15052: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15056: LD_INT 4
15058: PPUSH
15059: LD_INT 1
15061: PPUSH
15062: CALL_OW 424
// exit ;
15066: POP
15067: POP
15068: GO 15074
// end ; end ; end ;
15070: GO 14728
15072: POP
15073: POP
// end ;
15074: PPOPN 2
15076: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Gaydar ) < 6 and gaydarWaitForBurlak do
15077: LD_EXP 42
15081: PPUSH
15082: LD_EXP 54
15086: PPUSH
15087: CALL_OW 296
15091: PUSH
15092: LD_INT 6
15094: LESS
15095: PUSH
15096: LD_EXP 21
15100: AND
15101: IFFALSE 15254
15103: GO 15105
15105: DISABLE
// begin DialogueOn ;
15106: CALL_OW 6
// Say ( Gaydar , D11-Gay-2 ) ;
15110: LD_EXP 54
15114: PPUSH
15115: LD_STRING D11-Gay-2
15117: PPUSH
15118: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
15122: LD_EXP 42
15126: PPUSH
15127: LD_STRING D11-Bur-2
15129: PPUSH
15130: CALL_OW 88
// Say ( Gaydar , D11-Gay-3 ) ;
15134: LD_EXP 54
15138: PPUSH
15139: LD_STRING D11-Gay-3
15141: PPUSH
15142: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
15146: LD_EXP 42
15150: PPUSH
15151: LD_STRING D11-Bur-3
15153: PPUSH
15154: CALL_OW 88
// Say ( Gaydar , D11-Gay-4 ) ;
15158: LD_EXP 54
15162: PPUSH
15163: LD_STRING D11-Gay-4
15165: PPUSH
15166: CALL_OW 88
// Say ( Burlak , D11-Bur-4 ) ;
15170: LD_EXP 42
15174: PPUSH
15175: LD_STRING D11-Bur-4
15177: PPUSH
15178: CALL_OW 88
// wait ( 0 0$2 ) ;
15182: LD_INT 70
15184: PPUSH
15185: CALL_OW 67
// SayRadio ( Popov , D12-Pop-1 ) ;
15189: LD_EXP 52
15193: PPUSH
15194: LD_STRING D12-Pop-1
15196: PPUSH
15197: CALL_OW 94
// Say ( Burlak , D12-Bur-1 ) ;
15201: LD_EXP 42
15205: PPUSH
15206: LD_STRING D12-Bur-1
15208: PPUSH
15209: CALL_OW 88
// SayRadio ( Platonov , D12-Pla-1 ) ;
15213: LD_EXP 53
15217: PPUSH
15218: LD_STRING D12-Pla-1
15220: PPUSH
15221: CALL_OW 94
// DialogueOff ;
15225: CALL_OW 7
// canExitMap = true ;
15229: LD_ADDR_EXP 6
15233: PUSH
15234: LD_INT 1
15236: ST_TO_ADDR
// ChangeMissionObjectives ( MFinal ) ;
15237: LD_STRING MFinal
15239: PPUSH
15240: CALL_OW 337
// SetAreaMapShow ( ExitMapArea , 1 ) ;
15244: LD_INT 4
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: CALL_OW 424
// end ;
15254: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and canExitMap do
15255: LD_INT 22
15257: PUSH
15258: LD_INT 3
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 21
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PPUSH
15279: CALL_OW 69
15283: PUSH
15284: LD_INT 0
15286: EQUAL
15287: PUSH
15288: LD_EXP 6
15292: AND
15293: IFFALSE 15302
15295: GO 15297
15297: DISABLE
// FinishMission ; end_of_file
15298: CALL 7685 0 0
15302: END
// every 0 0$1 trigger enableAttacks and currentWave = 0 and currentWave < enemyWaves do
15303: LD_EXP 17
15307: PUSH
15308: LD_EXP 19
15312: PUSH
15313: LD_INT 0
15315: EQUAL
15316: AND
15317: PUSH
15318: LD_EXP 19
15322: PUSH
15323: LD_EXP 38
15327: LESS
15328: AND
15329: IFFALSE 15381
15331: GO 15333
15333: DISABLE
// begin PrepareArabianHumans ( [ ArabianSpawnArea1 , ArabianSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
15334: LD_INT 7
15336: PUSH
15337: LD_INT 10
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 1
15346: PPUSH
15347: LD_INT 2
15349: PPUSH
15350: CALL_OW 12
15354: ARRAY
15355: PPUSH
15356: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ ] , true , true , - 1 ) ;
15360: LD_EXP 65
15364: PPUSH
15365: EMPTY
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: LD_INT 1
15372: PPUSH
15373: LD_INT 1
15375: NEG
15376: PPUSH
15377: CALL 5018 0 5
// end ;
15381: END
// every 1 1$10 trigger enableAttacks and currentWave >= 0 and currentWave < enemyWaves do
15382: LD_EXP 17
15386: PUSH
15387: LD_EXP 19
15391: PUSH
15392: LD_INT 0
15394: GREATEREQUAL
15395: AND
15396: PUSH
15397: LD_EXP 19
15401: PUSH
15402: LD_EXP 38
15406: LESS
15407: AND
15408: IFFALSE 15638
15410: GO 15412
15412: DISABLE
// begin currentWave = currentWave + 1 ;
15413: LD_ADDR_EXP 19
15417: PUSH
15418: LD_EXP 19
15422: PUSH
15423: LD_INT 1
15425: PLUS
15426: ST_TO_ADDR
// PrepareArabianVehicles ;
15427: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
15431: LD_EXP 65
15435: PPUSH
15436: LD_INT 135
15438: PUSH
15439: LD_INT 4
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 134
15448: PUSH
15449: LD_INT 19
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 132
15458: PUSH
15459: LD_INT 26
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 128
15468: PUSH
15469: LD_INT 31
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 123
15478: PUSH
15479: LD_INT 37
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 118
15488: PUSH
15489: LD_INT 45
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 112
15498: PUSH
15499: LD_INT 51
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 106
15508: PUSH
15509: LD_INT 57
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 99
15518: PUSH
15519: LD_INT 62
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 93
15528: PUSH
15529: LD_INT 67
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 86
15538: PUSH
15539: LD_INT 72
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 78
15548: PUSH
15549: LD_INT 75
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 71
15558: PUSH
15559: LD_INT 81
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 69
15568: PUSH
15569: LD_INT 88
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 71
15578: PUSH
15579: LD_INT 95
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 74
15588: PUSH
15589: LD_INT 103
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 80
15598: PUSH
15599: LD_INT 113
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: PPUSH
15625: LD_INT 0
15627: PPUSH
15628: LD_INT 1
15630: PPUSH
15631: LD_INT 11
15633: PPUSH
15634: CALL 5018 0 5
// end ;
15638: END
// every 1 1$0 trigger enableAttacks and Difficulty = 2 and currentWave >= 0 and currentWave < enemyWaves do
15639: LD_EXP 17
15643: PUSH
15644: LD_OWVAR 67
15648: PUSH
15649: LD_INT 2
15651: EQUAL
15652: AND
15653: PUSH
15654: LD_EXP 19
15658: PUSH
15659: LD_INT 0
15661: GREATEREQUAL
15662: AND
15663: PUSH
15664: LD_EXP 19
15668: PUSH
15669: LD_EXP 38
15673: LESS
15674: AND
15675: IFFALSE 15803
15677: GO 15679
15679: DISABLE
// begin PrepareArabianVehicles ;
15680: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
15684: LD_EXP 65
15688: PPUSH
15689: LD_INT 135
15691: PUSH
15692: LD_INT 4
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 134
15701: PUSH
15702: LD_INT 19
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 132
15711: PUSH
15712: LD_INT 26
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 128
15721: PUSH
15722: LD_INT 31
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 123
15731: PUSH
15732: LD_INT 37
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 118
15741: PUSH
15742: LD_INT 45
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 112
15751: PUSH
15752: LD_INT 51
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 106
15761: PUSH
15762: LD_INT 57
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 99
15771: PUSH
15772: LD_INT 62
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: PPUSH
15790: LD_INT 0
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: LD_INT 11
15798: PPUSH
15799: CALL 5018 0 5
// end ;
15803: END
// every 1 1$0 trigger enableAttacks and Difficulty = 3 and currentWave >= 0 and currentWave < enemyWaves do
15804: LD_EXP 17
15808: PUSH
15809: LD_OWVAR 67
15813: PUSH
15814: LD_INT 3
15816: EQUAL
15817: AND
15818: PUSH
15819: LD_EXP 19
15823: PUSH
15824: LD_INT 0
15826: GREATEREQUAL
15827: AND
15828: PUSH
15829: LD_EXP 19
15833: PUSH
15834: LD_EXP 38
15838: LESS
15839: AND
15840: IFFALSE 16034
15842: GO 15844
15844: DISABLE
// begin PrepareArabianVehicles ;
15845: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
15849: LD_EXP 65
15853: PPUSH
15854: LD_INT 135
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 134
15866: PUSH
15867: LD_INT 19
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 132
15876: PUSH
15877: LD_INT 26
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 128
15886: PUSH
15887: LD_INT 31
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 123
15896: PUSH
15897: LD_INT 37
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 118
15906: PUSH
15907: LD_INT 45
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 112
15916: PUSH
15917: LD_INT 51
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 106
15926: PUSH
15927: LD_INT 57
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 99
15936: PUSH
15937: LD_INT 62
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 104
15946: PUSH
15947: LD_INT 71
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 110
15956: PUSH
15957: LD_INT 78
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 119
15966: PUSH
15967: LD_INT 88
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 128
15976: PUSH
15977: LD_INT 97
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 135
15986: PUSH
15987: LD_INT 106
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 140
15996: PUSH
15997: LD_INT 153
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: PPUSH
16021: LD_INT 0
16023: PPUSH
16024: LD_INT 1
16026: PPUSH
16027: LD_INT 11
16029: PPUSH
16030: CALL 5018 0 5
// end ;
16034: END
// every 1 1$1 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16035: LD_EXP 17
16039: PUSH
16040: LD_EXP 19
16044: PUSH
16045: LD_INT 1
16047: EQUAL
16048: AND
16049: PUSH
16050: LD_EXP 19
16054: PUSH
16055: LD_EXP 38
16059: LESS
16060: AND
16061: IFFALSE 16138
16063: GO 16065
16065: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16066: LD_INT 7
16068: PPUSH
16069: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16073: LD_EXP 65
16077: PPUSH
16078: LD_INT 157
16080: PUSH
16081: LD_INT 31
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 194
16090: PUSH
16091: LD_INT 124
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 174
16100: PUSH
16101: LD_INT 158
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 151
16110: PUSH
16111: LD_INT 164
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: PPUSH
16124: LD_INT 0
16126: PPUSH
16127: LD_INT 1
16129: PPUSH
16130: LD_INT 1
16132: NEG
16133: PPUSH
16134: CALL 5018 0 5
// end ;
16138: END
// every 2 2$10 trigger enableAttacks and currentWave = 1 and currentWave < enemyWaves do
16139: LD_EXP 17
16143: PUSH
16144: LD_EXP 19
16148: PUSH
16149: LD_INT 1
16151: EQUAL
16152: AND
16153: PUSH
16154: LD_EXP 19
16158: PUSH
16159: LD_EXP 38
16163: LESS
16164: AND
16165: IFFALSE 16314
16167: GO 16169
16169: DISABLE
// begin wait ( 1 1$30 ) ;
16170: LD_INT 3150
16172: PPUSH
16173: CALL_OW 67
// currentWave = currentWave + 1 ;
16177: LD_ADDR_EXP 19
16181: PUSH
16182: LD_EXP 19
16186: PUSH
16187: LD_INT 1
16189: PLUS
16190: ST_TO_ADDR
// PrepareArabianVehicles ;
16191: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] ] , false , true , ArabianRetreatArea ) ;
16195: LD_EXP 65
16199: PPUSH
16200: LD_INT 135
16202: PUSH
16203: LD_INT 4
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 134
16212: PUSH
16213: LD_INT 19
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 132
16222: PUSH
16223: LD_INT 26
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 128
16232: PUSH
16233: LD_INT 31
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 123
16242: PUSH
16243: LD_INT 37
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 118
16252: PUSH
16253: LD_INT 45
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 112
16262: PUSH
16263: LD_INT 51
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 106
16272: PUSH
16273: LD_INT 57
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 99
16282: PUSH
16283: LD_INT 62
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: PPUSH
16301: LD_INT 0
16303: PPUSH
16304: LD_INT 1
16306: PPUSH
16307: LD_INT 11
16309: PPUSH
16310: CALL 5018 0 5
// end ;
16314: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 1 and currentWave < enemyWaves do
16315: LD_EXP 17
16319: PUSH
16320: LD_OWVAR 67
16324: PUSH
16325: LD_INT 2
16327: EQUAL
16328: AND
16329: PUSH
16330: LD_EXP 19
16334: PUSH
16335: LD_INT 1
16337: EQUAL
16338: AND
16339: PUSH
16340: LD_EXP 19
16344: PUSH
16345: LD_EXP 38
16349: LESS
16350: AND
16351: IFFALSE 16545
16353: GO 16355
16355: DISABLE
// begin PrepareArabianVehicles ;
16356: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
16360: LD_EXP 65
16364: PPUSH
16365: LD_INT 135
16367: PUSH
16368: LD_INT 4
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 134
16377: PUSH
16378: LD_INT 19
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 132
16387: PUSH
16388: LD_INT 26
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 128
16397: PUSH
16398: LD_INT 31
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 123
16407: PUSH
16408: LD_INT 37
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 118
16417: PUSH
16418: LD_INT 45
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 112
16427: PUSH
16428: LD_INT 51
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 106
16437: PUSH
16438: LD_INT 57
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 99
16447: PUSH
16448: LD_INT 62
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 104
16457: PUSH
16458: LD_INT 71
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 110
16467: PUSH
16468: LD_INT 78
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 119
16477: PUSH
16478: LD_INT 88
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 128
16487: PUSH
16488: LD_INT 97
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 135
16497: PUSH
16498: LD_INT 106
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 140
16507: PUSH
16508: LD_INT 153
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: LD_INT 0
16534: PPUSH
16535: LD_INT 1
16537: PPUSH
16538: LD_INT 11
16540: PPUSH
16541: CALL 5018 0 5
// end ;
16545: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 1 and currentWave < enemyWaves do
16546: LD_EXP 17
16550: PUSH
16551: LD_OWVAR 67
16555: PUSH
16556: LD_INT 3
16558: EQUAL
16559: AND
16560: PUSH
16561: LD_EXP 19
16565: PUSH
16566: LD_INT 1
16568: EQUAL
16569: AND
16570: PUSH
16571: LD_EXP 19
16575: PUSH
16576: LD_EXP 38
16580: LESS
16581: AND
16582: IFFALSE 16798
16584: GO 16586
16586: DISABLE
// begin PrepareArabianVehicles ;
16587: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16591: LD_EXP 65
16595: PPUSH
16596: LD_INT 135
16598: PUSH
16599: LD_INT 4
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 134
16608: PUSH
16609: LD_INT 19
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 132
16618: PUSH
16619: LD_INT 26
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 128
16628: PUSH
16629: LD_INT 31
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 123
16638: PUSH
16639: LD_INT 37
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 118
16648: PUSH
16649: LD_INT 45
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 112
16658: PUSH
16659: LD_INT 51
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 106
16668: PUSH
16669: LD_INT 57
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 99
16678: PUSH
16679: LD_INT 62
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 93
16688: PUSH
16689: LD_INT 67
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 86
16698: PUSH
16699: LD_INT 72
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 78
16708: PUSH
16709: LD_INT 75
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 71
16718: PUSH
16719: LD_INT 81
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 69
16728: PUSH
16729: LD_INT 88
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 71
16738: PUSH
16739: LD_INT 95
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 74
16748: PUSH
16749: LD_INT 103
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 80
16758: PUSH
16759: LD_INT 113
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: PPUSH
16785: LD_INT 0
16787: PPUSH
16788: LD_INT 1
16790: PPUSH
16791: LD_INT 11
16793: PPUSH
16794: CALL 5018 0 5
// end ;
16798: END
// every 1 1$1 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16799: LD_EXP 17
16803: PUSH
16804: LD_EXP 19
16808: PUSH
16809: LD_INT 2
16811: EQUAL
16812: AND
16813: PUSH
16814: LD_EXP 19
16818: PUSH
16819: LD_EXP 38
16823: LESS
16824: AND
16825: IFFALSE 16902
16827: GO 16829
16829: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
16830: LD_INT 7
16832: PPUSH
16833: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
16837: LD_EXP 65
16841: PPUSH
16842: LD_INT 157
16844: PUSH
16845: LD_INT 31
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 194
16854: PUSH
16855: LD_INT 124
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 174
16864: PUSH
16865: LD_INT 158
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 151
16874: PUSH
16875: LD_INT 164
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: PPUSH
16888: LD_INT 0
16890: PPUSH
16891: LD_INT 1
16893: PPUSH
16894: LD_INT 1
16896: NEG
16897: PPUSH
16898: CALL 5018 0 5
// end ;
16902: END
// every 2 2$10 trigger enableAttacks and currentWave = 2 and currentWave < enemyWaves do
16903: LD_EXP 17
16907: PUSH
16908: LD_EXP 19
16912: PUSH
16913: LD_INT 2
16915: EQUAL
16916: AND
16917: PUSH
16918: LD_EXP 19
16922: PUSH
16923: LD_EXP 38
16927: LESS
16928: AND
16929: IFFALSE 17166
16931: GO 16933
16933: DISABLE
// begin wait ( 1 1$30 ) ;
16934: LD_INT 3150
16936: PPUSH
16937: CALL_OW 67
// currentWave = currentWave + 1 ;
16941: LD_ADDR_EXP 19
16945: PUSH
16946: LD_EXP 19
16950: PUSH
16951: LD_INT 1
16953: PLUS
16954: ST_TO_ADDR
// PrepareArabianVehicles ;
16955: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
16959: LD_EXP 65
16963: PPUSH
16964: LD_INT 135
16966: PUSH
16967: LD_INT 4
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 134
16976: PUSH
16977: LD_INT 19
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 132
16986: PUSH
16987: LD_INT 26
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 128
16996: PUSH
16997: LD_INT 31
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 123
17006: PUSH
17007: LD_INT 37
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 118
17016: PUSH
17017: LD_INT 45
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 112
17026: PUSH
17027: LD_INT 51
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 106
17036: PUSH
17037: LD_INT 57
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 99
17046: PUSH
17047: LD_INT 62
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 93
17056: PUSH
17057: LD_INT 67
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 86
17066: PUSH
17067: LD_INT 72
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 78
17076: PUSH
17077: LD_INT 75
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 71
17086: PUSH
17087: LD_INT 81
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 69
17096: PUSH
17097: LD_INT 88
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 71
17106: PUSH
17107: LD_INT 95
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 74
17116: PUSH
17117: LD_INT 103
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 80
17126: PUSH
17127: LD_INT 113
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: PPUSH
17153: LD_INT 0
17155: PPUSH
17156: LD_INT 1
17158: PPUSH
17159: LD_INT 11
17161: PPUSH
17162: CALL 5018 0 5
// end ;
17166: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 2 and currentWave < enemyWaves do
17167: LD_EXP 17
17171: PUSH
17172: LD_OWVAR 67
17176: PUSH
17177: LD_INT 2
17179: EQUAL
17180: AND
17181: PUSH
17182: LD_EXP 19
17186: PUSH
17187: LD_INT 2
17189: EQUAL
17190: AND
17191: PUSH
17192: LD_EXP 19
17196: PUSH
17197: LD_EXP 38
17201: LESS
17202: AND
17203: IFFALSE 17397
17205: GO 17207
17207: DISABLE
// begin PrepareArabianVehicles ;
17208: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17212: LD_EXP 65
17216: PPUSH
17217: LD_INT 135
17219: PUSH
17220: LD_INT 4
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 134
17229: PUSH
17230: LD_INT 19
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 132
17239: PUSH
17240: LD_INT 26
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 128
17249: PUSH
17250: LD_INT 31
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 123
17259: PUSH
17260: LD_INT 37
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 118
17269: PUSH
17270: LD_INT 45
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 112
17279: PUSH
17280: LD_INT 51
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 106
17289: PUSH
17290: LD_INT 57
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 99
17299: PUSH
17300: LD_INT 62
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 104
17309: PUSH
17310: LD_INT 71
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 110
17319: PUSH
17320: LD_INT 78
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 119
17329: PUSH
17330: LD_INT 88
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 128
17339: PUSH
17340: LD_INT 97
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 135
17349: PUSH
17350: LD_INT 106
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 140
17359: PUSH
17360: LD_INT 153
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: PPUSH
17384: LD_INT 0
17386: PPUSH
17387: LD_INT 1
17389: PPUSH
17390: LD_INT 11
17392: PPUSH
17393: CALL 5018 0 5
// end ;
17397: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 2 and currentWave < enemyWaves do
17398: LD_EXP 17
17402: PUSH
17403: LD_OWVAR 67
17407: PUSH
17408: LD_INT 3
17410: EQUAL
17411: AND
17412: PUSH
17413: LD_EXP 19
17417: PUSH
17418: LD_INT 2
17420: EQUAL
17421: AND
17422: PUSH
17423: LD_EXP 19
17427: PUSH
17428: LD_EXP 38
17432: LESS
17433: AND
17434: IFFALSE 17628
17436: GO 17438
17438: DISABLE
// begin PrepareArabianVehicles ;
17439: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
17443: LD_EXP 65
17447: PPUSH
17448: LD_INT 135
17450: PUSH
17451: LD_INT 4
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 134
17460: PUSH
17461: LD_INT 19
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 132
17470: PUSH
17471: LD_INT 26
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 128
17480: PUSH
17481: LD_INT 31
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 123
17490: PUSH
17491: LD_INT 37
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 118
17500: PUSH
17501: LD_INT 45
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 112
17510: PUSH
17511: LD_INT 51
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 106
17520: PUSH
17521: LD_INT 57
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 99
17530: PUSH
17531: LD_INT 62
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 104
17540: PUSH
17541: LD_INT 71
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 110
17550: PUSH
17551: LD_INT 78
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 119
17560: PUSH
17561: LD_INT 88
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 128
17570: PUSH
17571: LD_INT 97
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 135
17580: PUSH
17581: LD_INT 106
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 140
17590: PUSH
17591: LD_INT 153
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: PPUSH
17615: LD_INT 0
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_INT 11
17623: PPUSH
17624: CALL 5018 0 5
// end ;
17628: END
// every 1 1$1 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17629: LD_EXP 17
17633: PUSH
17634: LD_EXP 19
17638: PUSH
17639: LD_INT 3
17641: EQUAL
17642: AND
17643: PUSH
17644: LD_EXP 19
17648: PUSH
17649: LD_EXP 38
17653: LESS
17654: AND
17655: IFFALSE 17732
17657: GO 17659
17659: DISABLE
// begin PrepareArabianHumans ( ArabianSpawnArea1 ) ;
17660: LD_INT 7
17662: PPUSH
17663: CALL 3843 0 1
// AttackEnemy ( currentEnemyGroup , [ [ 157 , 31 ] , [ 194 , 124 ] , [ 174 , 158 ] , [ 151 , 164 ] ] , false , true , - 1 ) ;
17667: LD_EXP 65
17671: PPUSH
17672: LD_INT 157
17674: PUSH
17675: LD_INT 31
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 194
17684: PUSH
17685: LD_INT 124
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 174
17694: PUSH
17695: LD_INT 158
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 151
17704: PUSH
17705: LD_INT 164
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: PPUSH
17718: LD_INT 0
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: LD_INT 1
17726: NEG
17727: PPUSH
17728: CALL 5018 0 5
// end ;
17732: END
// every 2 2$10 trigger enableAttacks and currentWave = 3 and currentWave < enemyWaves do
17733: LD_EXP 17
17737: PUSH
17738: LD_EXP 19
17742: PUSH
17743: LD_INT 3
17745: EQUAL
17746: AND
17747: PUSH
17748: LD_EXP 19
17752: PUSH
17753: LD_EXP 38
17757: LESS
17758: AND
17759: IFFALSE 17996
17761: GO 17763
17763: DISABLE
// begin wait ( 1 1$30 ) ;
17764: LD_INT 3150
17766: PPUSH
17767: CALL_OW 67
// currentWave = currentWave + 1 ;
17771: LD_ADDR_EXP 19
17775: PUSH
17776: LD_EXP 19
17780: PUSH
17781: LD_INT 1
17783: PLUS
17784: ST_TO_ADDR
// PrepareArabianVehicles ;
17785: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 93 , 67 ] , [ 86 , 72 ] , [ 78 , 75 ] , [ 71 , 81 ] , [ 69 , 88 ] , [ 71 , 95 ] , [ 74 , 103 ] , [ 80 , 113 ] ] , false , true , ArabianRetreatArea ) ;
17789: LD_EXP 65
17793: PPUSH
17794: LD_INT 135
17796: PUSH
17797: LD_INT 4
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 134
17806: PUSH
17807: LD_INT 19
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 132
17816: PUSH
17817: LD_INT 26
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 128
17826: PUSH
17827: LD_INT 31
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 123
17836: PUSH
17837: LD_INT 37
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 118
17846: PUSH
17847: LD_INT 45
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 112
17856: PUSH
17857: LD_INT 51
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 106
17866: PUSH
17867: LD_INT 57
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 99
17876: PUSH
17877: LD_INT 62
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 93
17886: PUSH
17887: LD_INT 67
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 86
17896: PUSH
17897: LD_INT 72
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 78
17906: PUSH
17907: LD_INT 75
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 71
17916: PUSH
17917: LD_INT 81
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 69
17926: PUSH
17927: LD_INT 88
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 71
17936: PUSH
17937: LD_INT 95
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 74
17946: PUSH
17947: LD_INT 103
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 80
17956: PUSH
17957: LD_INT 113
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: PPUSH
17983: LD_INT 0
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: LD_INT 11
17991: PPUSH
17992: CALL 5018 0 5
// end ;
17996: END
// every 2 2$0 trigger enableAttacks and Difficulty = 2 and currentWave = 3 and currentWave < enemyWaves do
17997: LD_EXP 17
18001: PUSH
18002: LD_OWVAR 67
18006: PUSH
18007: LD_INT 2
18009: EQUAL
18010: AND
18011: PUSH
18012: LD_EXP 19
18016: PUSH
18017: LD_INT 3
18019: EQUAL
18020: AND
18021: PUSH
18022: LD_EXP 19
18026: PUSH
18027: LD_EXP 38
18031: LESS
18032: AND
18033: IFFALSE 18227
18035: GO 18037
18037: DISABLE
// begin PrepareArabianVehicles ;
18038: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18042: LD_EXP 65
18046: PPUSH
18047: LD_INT 135
18049: PUSH
18050: LD_INT 4
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 134
18059: PUSH
18060: LD_INT 19
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 132
18069: PUSH
18070: LD_INT 26
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 128
18079: PUSH
18080: LD_INT 31
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 123
18089: PUSH
18090: LD_INT 37
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 118
18099: PUSH
18100: LD_INT 45
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 112
18109: PUSH
18110: LD_INT 51
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 106
18119: PUSH
18120: LD_INT 57
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 99
18129: PUSH
18130: LD_INT 62
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 104
18139: PUSH
18140: LD_INT 71
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 110
18149: PUSH
18150: LD_INT 78
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 119
18159: PUSH
18160: LD_INT 88
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 128
18169: PUSH
18170: LD_INT 97
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 135
18179: PUSH
18180: LD_INT 106
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 140
18189: PUSH
18190: LD_INT 153
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: PPUSH
18214: LD_INT 0
18216: PPUSH
18217: LD_INT 1
18219: PPUSH
18220: LD_INT 11
18222: PPUSH
18223: CALL 5018 0 5
// end ;
18227: END
// every 2 2$0 trigger enableAttacks and Difficulty = 3 and currentWave = 3 and currentWave < enemyWaves do
18228: LD_EXP 17
18232: PUSH
18233: LD_OWVAR 67
18237: PUSH
18238: LD_INT 3
18240: EQUAL
18241: AND
18242: PUSH
18243: LD_EXP 19
18247: PUSH
18248: LD_INT 3
18250: EQUAL
18251: AND
18252: PUSH
18253: LD_EXP 19
18257: PUSH
18258: LD_EXP 38
18262: LESS
18263: AND
18264: IFFALSE 18458
18266: GO 18268
18268: DISABLE
// begin PrepareArabianVehicles ;
18269: CALL 3553 0 0
// AttackEnemy ( currentEnemyGroup , [ [ 135 , 4 ] , [ 134 , 19 ] , [ 132 , 26 ] , [ 128 , 31 ] , [ 123 , 37 ] , [ 118 , 45 ] , [ 112 , 51 ] , [ 106 , 57 ] , [ 99 , 62 ] , [ 104 , 71 ] , [ 110 , 78 ] , [ 119 , 88 ] , [ 128 , 97 ] , [ 135 , 106 ] , [ 140 , 153 ] ] , false , true , ArabianRetreatArea ) ;
18273: LD_EXP 65
18277: PPUSH
18278: LD_INT 135
18280: PUSH
18281: LD_INT 4
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 134
18290: PUSH
18291: LD_INT 19
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 132
18300: PUSH
18301: LD_INT 26
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 128
18310: PUSH
18311: LD_INT 31
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 123
18320: PUSH
18321: LD_INT 37
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 118
18330: PUSH
18331: LD_INT 45
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 112
18340: PUSH
18341: LD_INT 51
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 106
18350: PUSH
18351: LD_INT 57
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 99
18360: PUSH
18361: LD_INT 62
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 104
18370: PUSH
18371: LD_INT 71
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 110
18380: PUSH
18381: LD_INT 78
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 119
18390: PUSH
18391: LD_INT 88
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 128
18400: PUSH
18401: LD_INT 97
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 135
18410: PUSH
18411: LD_INT 106
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 140
18420: PUSH
18421: LD_INT 153
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: PPUSH
18445: LD_INT 0
18447: PPUSH
18448: LD_INT 1
18450: PPUSH
18451: LD_INT 11
18453: PPUSH
18454: CALL 5018 0 5
// end ;
18458: END
// every 2 2$0 trigger IsPlaced ( Gaydar ) and arabianKillers < 5 do
18459: LD_EXP 54
18463: PPUSH
18464: CALL_OW 305
18468: PUSH
18469: LD_EXP 23
18473: PUSH
18474: LD_INT 5
18476: LESS
18477: AND
18478: IFFALSE 18488
18480: GO 18482
18482: DISABLE
// begin PrepareArabianKiller ;
18483: CALL 4066 0 0
// enable ;
18487: ENABLE
// end ; end_of_file
18488: END
// export function SetAchievements ; begin
18489: LD_INT 0
18491: PPUSH
// if stealWarmCount = 0 then
18492: LD_EXP 12
18496: PUSH
18497: LD_INT 0
18499: EQUAL
18500: IFFALSE 18509
// SetAchievement ( ACH_ENO ) ;
18502: LD_STRING ACH_ENO
18504: PPUSH
18505: CALL_OW 543
// end ;
18509: LD_VAR 0 1
18513: RET
// every 1 trigger achievement_ConstructedTurrets >= 6 do
18514: LD_EXP 25
18518: PUSH
18519: LD_INT 6
18521: GREATEREQUAL
18522: IFFALSE 18534
18524: GO 18526
18526: DISABLE
// SetAchievement ( ACH_DEFENSE ) ;
18527: LD_STRING ACH_DEFENSE
18529: PPUSH
18530: CALL_OW 543
18534: END
// every 1 trigger killedArabianUnits >= 25 do
18535: LD_EXP 22
18539: PUSH
18540: LD_INT 25
18542: GREATEREQUAL
18543: IFFALSE 18555
18545: GO 18547
18547: DISABLE
// SetAchievement ( ACH_ARAB ) ; end_of_file
18548: LD_STRING ACH_ARAB
18550: PPUSH
18551: CALL_OW 543
18555: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18556: LD_VAR 0 2
18560: PUSH
18561: LD_INT 100
18563: EQUAL
18564: IFFALSE 19513
// begin if not StreamModeActive then
18566: LD_EXP 66
18570: NOT
18571: IFFALSE 18581
// StreamModeActive := true ;
18573: LD_ADDR_EXP 66
18577: PUSH
18578: LD_INT 1
18580: ST_TO_ADDR
// if p3 = 0 then
18581: LD_VAR 0 3
18585: PUSH
18586: LD_INT 0
18588: EQUAL
18589: IFFALSE 18595
// InitStreamMode ;
18591: CALL 19746 0 0
// if p3 = 1 then
18595: LD_VAR 0 3
18599: PUSH
18600: LD_INT 1
18602: EQUAL
18603: IFFALSE 18613
// sRocket := true ;
18605: LD_ADDR_EXP 71
18609: PUSH
18610: LD_INT 1
18612: ST_TO_ADDR
// if p3 = 2 then
18613: LD_VAR 0 3
18617: PUSH
18618: LD_INT 2
18620: EQUAL
18621: IFFALSE 18631
// sSpeed := true ;
18623: LD_ADDR_EXP 70
18627: PUSH
18628: LD_INT 1
18630: ST_TO_ADDR
// if p3 = 3 then
18631: LD_VAR 0 3
18635: PUSH
18636: LD_INT 3
18638: EQUAL
18639: IFFALSE 18649
// sEngine := true ;
18641: LD_ADDR_EXP 72
18645: PUSH
18646: LD_INT 1
18648: ST_TO_ADDR
// if p3 = 4 then
18649: LD_VAR 0 3
18653: PUSH
18654: LD_INT 4
18656: EQUAL
18657: IFFALSE 18667
// sSpec := true ;
18659: LD_ADDR_EXP 69
18663: PUSH
18664: LD_INT 1
18666: ST_TO_ADDR
// if p3 = 5 then
18667: LD_VAR 0 3
18671: PUSH
18672: LD_INT 5
18674: EQUAL
18675: IFFALSE 18685
// sLevel := true ;
18677: LD_ADDR_EXP 73
18681: PUSH
18682: LD_INT 1
18684: ST_TO_ADDR
// if p3 = 6 then
18685: LD_VAR 0 3
18689: PUSH
18690: LD_INT 6
18692: EQUAL
18693: IFFALSE 18703
// sArmoury := true ;
18695: LD_ADDR_EXP 74
18699: PUSH
18700: LD_INT 1
18702: ST_TO_ADDR
// if p3 = 7 then
18703: LD_VAR 0 3
18707: PUSH
18708: LD_INT 7
18710: EQUAL
18711: IFFALSE 18721
// sRadar := true ;
18713: LD_ADDR_EXP 75
18717: PUSH
18718: LD_INT 1
18720: ST_TO_ADDR
// if p3 = 8 then
18721: LD_VAR 0 3
18725: PUSH
18726: LD_INT 8
18728: EQUAL
18729: IFFALSE 18739
// sBunker := true ;
18731: LD_ADDR_EXP 76
18735: PUSH
18736: LD_INT 1
18738: ST_TO_ADDR
// if p3 = 9 then
18739: LD_VAR 0 3
18743: PUSH
18744: LD_INT 9
18746: EQUAL
18747: IFFALSE 18757
// sHack := true ;
18749: LD_ADDR_EXP 77
18753: PUSH
18754: LD_INT 1
18756: ST_TO_ADDR
// if p3 = 10 then
18757: LD_VAR 0 3
18761: PUSH
18762: LD_INT 10
18764: EQUAL
18765: IFFALSE 18775
// sFire := true ;
18767: LD_ADDR_EXP 78
18771: PUSH
18772: LD_INT 1
18774: ST_TO_ADDR
// if p3 = 11 then
18775: LD_VAR 0 3
18779: PUSH
18780: LD_INT 11
18782: EQUAL
18783: IFFALSE 18793
// sRefresh := true ;
18785: LD_ADDR_EXP 79
18789: PUSH
18790: LD_INT 1
18792: ST_TO_ADDR
// if p3 = 12 then
18793: LD_VAR 0 3
18797: PUSH
18798: LD_INT 12
18800: EQUAL
18801: IFFALSE 18811
// sExp := true ;
18803: LD_ADDR_EXP 80
18807: PUSH
18808: LD_INT 1
18810: ST_TO_ADDR
// if p3 = 13 then
18811: LD_VAR 0 3
18815: PUSH
18816: LD_INT 13
18818: EQUAL
18819: IFFALSE 18829
// sDepot := true ;
18821: LD_ADDR_EXP 81
18825: PUSH
18826: LD_INT 1
18828: ST_TO_ADDR
// if p3 = 14 then
18829: LD_VAR 0 3
18833: PUSH
18834: LD_INT 14
18836: EQUAL
18837: IFFALSE 18847
// sFlag := true ;
18839: LD_ADDR_EXP 82
18843: PUSH
18844: LD_INT 1
18846: ST_TO_ADDR
// if p3 = 15 then
18847: LD_VAR 0 3
18851: PUSH
18852: LD_INT 15
18854: EQUAL
18855: IFFALSE 18865
// sKamikadze := true ;
18857: LD_ADDR_EXP 90
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
// if p3 = 16 then
18865: LD_VAR 0 3
18869: PUSH
18870: LD_INT 16
18872: EQUAL
18873: IFFALSE 18883
// sTroll := true ;
18875: LD_ADDR_EXP 91
18879: PUSH
18880: LD_INT 1
18882: ST_TO_ADDR
// if p3 = 17 then
18883: LD_VAR 0 3
18887: PUSH
18888: LD_INT 17
18890: EQUAL
18891: IFFALSE 18901
// sSlow := true ;
18893: LD_ADDR_EXP 92
18897: PUSH
18898: LD_INT 1
18900: ST_TO_ADDR
// if p3 = 18 then
18901: LD_VAR 0 3
18905: PUSH
18906: LD_INT 18
18908: EQUAL
18909: IFFALSE 18919
// sLack := true ;
18911: LD_ADDR_EXP 93
18915: PUSH
18916: LD_INT 1
18918: ST_TO_ADDR
// if p3 = 19 then
18919: LD_VAR 0 3
18923: PUSH
18924: LD_INT 19
18926: EQUAL
18927: IFFALSE 18937
// sTank := true ;
18929: LD_ADDR_EXP 95
18933: PUSH
18934: LD_INT 1
18936: ST_TO_ADDR
// if p3 = 20 then
18937: LD_VAR 0 3
18941: PUSH
18942: LD_INT 20
18944: EQUAL
18945: IFFALSE 18955
// sRemote := true ;
18947: LD_ADDR_EXP 96
18951: PUSH
18952: LD_INT 1
18954: ST_TO_ADDR
// if p3 = 21 then
18955: LD_VAR 0 3
18959: PUSH
18960: LD_INT 21
18962: EQUAL
18963: IFFALSE 18973
// sPowell := true ;
18965: LD_ADDR_EXP 97
18969: PUSH
18970: LD_INT 1
18972: ST_TO_ADDR
// if p3 = 22 then
18973: LD_VAR 0 3
18977: PUSH
18978: LD_INT 22
18980: EQUAL
18981: IFFALSE 18991
// sTeleport := true ;
18983: LD_ADDR_EXP 100
18987: PUSH
18988: LD_INT 1
18990: ST_TO_ADDR
// if p3 = 23 then
18991: LD_VAR 0 3
18995: PUSH
18996: LD_INT 23
18998: EQUAL
18999: IFFALSE 19009
// sOilTower := true ;
19001: LD_ADDR_EXP 102
19005: PUSH
19006: LD_INT 1
19008: ST_TO_ADDR
// if p3 = 24 then
19009: LD_VAR 0 3
19013: PUSH
19014: LD_INT 24
19016: EQUAL
19017: IFFALSE 19027
// sShovel := true ;
19019: LD_ADDR_EXP 103
19023: PUSH
19024: LD_INT 1
19026: ST_TO_ADDR
// if p3 = 25 then
19027: LD_VAR 0 3
19031: PUSH
19032: LD_INT 25
19034: EQUAL
19035: IFFALSE 19045
// sSheik := true ;
19037: LD_ADDR_EXP 104
19041: PUSH
19042: LD_INT 1
19044: ST_TO_ADDR
// if p3 = 26 then
19045: LD_VAR 0 3
19049: PUSH
19050: LD_INT 26
19052: EQUAL
19053: IFFALSE 19063
// sEarthquake := true ;
19055: LD_ADDR_EXP 106
19059: PUSH
19060: LD_INT 1
19062: ST_TO_ADDR
// if p3 = 27 then
19063: LD_VAR 0 3
19067: PUSH
19068: LD_INT 27
19070: EQUAL
19071: IFFALSE 19081
// sAI := true ;
19073: LD_ADDR_EXP 107
19077: PUSH
19078: LD_INT 1
19080: ST_TO_ADDR
// if p3 = 28 then
19081: LD_VAR 0 3
19085: PUSH
19086: LD_INT 28
19088: EQUAL
19089: IFFALSE 19099
// sCargo := true ;
19091: LD_ADDR_EXP 110
19095: PUSH
19096: LD_INT 1
19098: ST_TO_ADDR
// if p3 = 29 then
19099: LD_VAR 0 3
19103: PUSH
19104: LD_INT 29
19106: EQUAL
19107: IFFALSE 19117
// sDLaser := true ;
19109: LD_ADDR_EXP 111
19113: PUSH
19114: LD_INT 1
19116: ST_TO_ADDR
// if p3 = 30 then
19117: LD_VAR 0 3
19121: PUSH
19122: LD_INT 30
19124: EQUAL
19125: IFFALSE 19135
// sExchange := true ;
19127: LD_ADDR_EXP 112
19131: PUSH
19132: LD_INT 1
19134: ST_TO_ADDR
// if p3 = 31 then
19135: LD_VAR 0 3
19139: PUSH
19140: LD_INT 31
19142: EQUAL
19143: IFFALSE 19153
// sFac := true ;
19145: LD_ADDR_EXP 113
19149: PUSH
19150: LD_INT 1
19152: ST_TO_ADDR
// if p3 = 32 then
19153: LD_VAR 0 3
19157: PUSH
19158: LD_INT 32
19160: EQUAL
19161: IFFALSE 19171
// sPower := true ;
19163: LD_ADDR_EXP 114
19167: PUSH
19168: LD_INT 1
19170: ST_TO_ADDR
// if p3 = 33 then
19171: LD_VAR 0 3
19175: PUSH
19176: LD_INT 33
19178: EQUAL
19179: IFFALSE 19189
// sRandom := true ;
19181: LD_ADDR_EXP 115
19185: PUSH
19186: LD_INT 1
19188: ST_TO_ADDR
// if p3 = 34 then
19189: LD_VAR 0 3
19193: PUSH
19194: LD_INT 34
19196: EQUAL
19197: IFFALSE 19207
// sShield := true ;
19199: LD_ADDR_EXP 116
19203: PUSH
19204: LD_INT 1
19206: ST_TO_ADDR
// if p3 = 35 then
19207: LD_VAR 0 3
19211: PUSH
19212: LD_INT 35
19214: EQUAL
19215: IFFALSE 19225
// sTime := true ;
19217: LD_ADDR_EXP 117
19221: PUSH
19222: LD_INT 1
19224: ST_TO_ADDR
// if p3 = 36 then
19225: LD_VAR 0 3
19229: PUSH
19230: LD_INT 36
19232: EQUAL
19233: IFFALSE 19243
// sTools := true ;
19235: LD_ADDR_EXP 118
19239: PUSH
19240: LD_INT 1
19242: ST_TO_ADDR
// if p3 = 101 then
19243: LD_VAR 0 3
19247: PUSH
19248: LD_INT 101
19250: EQUAL
19251: IFFALSE 19261
// sSold := true ;
19253: LD_ADDR_EXP 83
19257: PUSH
19258: LD_INT 1
19260: ST_TO_ADDR
// if p3 = 102 then
19261: LD_VAR 0 3
19265: PUSH
19266: LD_INT 102
19268: EQUAL
19269: IFFALSE 19279
// sDiff := true ;
19271: LD_ADDR_EXP 84
19275: PUSH
19276: LD_INT 1
19278: ST_TO_ADDR
// if p3 = 103 then
19279: LD_VAR 0 3
19283: PUSH
19284: LD_INT 103
19286: EQUAL
19287: IFFALSE 19297
// sFog := true ;
19289: LD_ADDR_EXP 87
19293: PUSH
19294: LD_INT 1
19296: ST_TO_ADDR
// if p3 = 104 then
19297: LD_VAR 0 3
19301: PUSH
19302: LD_INT 104
19304: EQUAL
19305: IFFALSE 19315
// sReset := true ;
19307: LD_ADDR_EXP 88
19311: PUSH
19312: LD_INT 1
19314: ST_TO_ADDR
// if p3 = 105 then
19315: LD_VAR 0 3
19319: PUSH
19320: LD_INT 105
19322: EQUAL
19323: IFFALSE 19333
// sSun := true ;
19325: LD_ADDR_EXP 89
19329: PUSH
19330: LD_INT 1
19332: ST_TO_ADDR
// if p3 = 106 then
19333: LD_VAR 0 3
19337: PUSH
19338: LD_INT 106
19340: EQUAL
19341: IFFALSE 19351
// sTiger := true ;
19343: LD_ADDR_EXP 85
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
// if p3 = 107 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 107
19358: EQUAL
19359: IFFALSE 19369
// sBomb := true ;
19361: LD_ADDR_EXP 86
19365: PUSH
19366: LD_INT 1
19368: ST_TO_ADDR
// if p3 = 108 then
19369: LD_VAR 0 3
19373: PUSH
19374: LD_INT 108
19376: EQUAL
19377: IFFALSE 19387
// sWound := true ;
19379: LD_ADDR_EXP 94
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// if p3 = 109 then
19387: LD_VAR 0 3
19391: PUSH
19392: LD_INT 109
19394: EQUAL
19395: IFFALSE 19405
// sBetray := true ;
19397: LD_ADDR_EXP 98
19401: PUSH
19402: LD_INT 1
19404: ST_TO_ADDR
// if p3 = 110 then
19405: LD_VAR 0 3
19409: PUSH
19410: LD_INT 110
19412: EQUAL
19413: IFFALSE 19423
// sContamin := true ;
19415: LD_ADDR_EXP 99
19419: PUSH
19420: LD_INT 1
19422: ST_TO_ADDR
// if p3 = 111 then
19423: LD_VAR 0 3
19427: PUSH
19428: LD_INT 111
19430: EQUAL
19431: IFFALSE 19441
// sOil := true ;
19433: LD_ADDR_EXP 101
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// if p3 = 112 then
19441: LD_VAR 0 3
19445: PUSH
19446: LD_INT 112
19448: EQUAL
19449: IFFALSE 19459
// sStu := true ;
19451: LD_ADDR_EXP 105
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// if p3 = 113 then
19459: LD_VAR 0 3
19463: PUSH
19464: LD_INT 113
19466: EQUAL
19467: IFFALSE 19477
// sBazooka := true ;
19469: LD_ADDR_EXP 108
19473: PUSH
19474: LD_INT 1
19476: ST_TO_ADDR
// if p3 = 114 then
19477: LD_VAR 0 3
19481: PUSH
19482: LD_INT 114
19484: EQUAL
19485: IFFALSE 19495
// sMortar := true ;
19487: LD_ADDR_EXP 109
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if p3 = 115 then
19495: LD_VAR 0 3
19499: PUSH
19500: LD_INT 115
19502: EQUAL
19503: IFFALSE 19513
// sRanger := true ;
19505: LD_ADDR_EXP 119
19509: PUSH
19510: LD_INT 1
19512: ST_TO_ADDR
// end ; if p2 = 101 then
19513: LD_VAR 0 2
19517: PUSH
19518: LD_INT 101
19520: EQUAL
19521: IFFALSE 19724
// begin case p3 of 1 :
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 1
19530: DOUBLE
19531: EQUAL
19532: IFTRUE 19536
19534: GO 19543
19536: POP
// hHackUnlimitedResources ; 2 :
19537: CALL 29843 0 0
19541: GO 19724
19543: LD_INT 2
19545: DOUBLE
19546: EQUAL
19547: IFTRUE 19551
19549: GO 19558
19551: POP
// hHackSetLevel10 ; 3 :
19552: CALL 29976 0 0
19556: GO 19724
19558: LD_INT 3
19560: DOUBLE
19561: EQUAL
19562: IFTRUE 19566
19564: GO 19573
19566: POP
// hHackSetLevel10YourUnits ; 4 :
19567: CALL 30061 0 0
19571: GO 19724
19573: LD_INT 4
19575: DOUBLE
19576: EQUAL
19577: IFTRUE 19581
19579: GO 19603
19581: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
19582: LD_VAR 0 4
19586: PPUSH
19587: LD_VAR 0 5
19591: PPUSH
19592: LD_VAR 0 6
19596: PPUSH
19597: CALL 30151 0 3
19601: GO 19724
19603: LD_INT 5
19605: DOUBLE
19606: EQUAL
19607: IFTRUE 19611
19609: GO 19618
19611: POP
// hHackSpawnVehicle ; 6 :
19612: CALL 30212 0 0
19616: GO 19724
19618: LD_INT 6
19620: DOUBLE
19621: EQUAL
19622: IFTRUE 19626
19624: GO 19633
19626: POP
// hHackInvincible ; 7 :
19627: CALL 30758 0 0
19631: GO 19724
19633: LD_INT 7
19635: DOUBLE
19636: EQUAL
19637: IFTRUE 19641
19639: GO 19648
19641: POP
// hHackInvisible ; 8 :
19642: CALL 30869 0 0
19646: GO 19724
19648: LD_INT 8
19650: DOUBLE
19651: EQUAL
19652: IFTRUE 19656
19654: GO 19663
19656: POP
// hHackChangeYourSide ; 9 :
19657: CALL 30926 0 0
19661: GO 19724
19663: LD_INT 9
19665: DOUBLE
19666: EQUAL
19667: IFTRUE 19671
19669: GO 19678
19671: POP
// hHackChangeUnitSide ; 10 :
19672: CALL 30968 0 0
19676: GO 19724
19678: LD_INT 10
19680: DOUBLE
19681: EQUAL
19682: IFTRUE 19686
19684: GO 19693
19686: POP
// hHackFog ; 11 :
19687: CALL 31069 0 0
19691: GO 19724
19693: LD_INT 11
19695: DOUBLE
19696: EQUAL
19697: IFTRUE 19701
19699: GO 19708
19701: POP
// hHackApeman ; 12 :
19702: CALL 31084 0 0
19706: GO 19724
19708: LD_INT 12
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19716
19714: GO 19723
19716: POP
// hHackBoom ; end ;
19717: CALL 31169 0 0
19721: GO 19724
19723: POP
// end ; end ;
19724: PPOPN 6
19726: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19727: GO 19729
19729: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19730: LD_STRING initStreamRollete();
19732: PPUSH
19733: CALL_OW 559
// InitStreamMode ;
19737: CALL 19746 0 0
// DefineStreamItems ( ) ;
19741: CALL 20186 0 0
// end ;
19745: END
// function InitStreamMode ; begin
19746: LD_INT 0
19748: PPUSH
// streamModeActive := false ;
19749: LD_ADDR_EXP 66
19753: PUSH
19754: LD_INT 0
19756: ST_TO_ADDR
// normalCounter := 36 ;
19757: LD_ADDR_EXP 67
19761: PUSH
19762: LD_INT 36
19764: ST_TO_ADDR
// hardcoreCounter := 16 ;
19765: LD_ADDR_EXP 68
19769: PUSH
19770: LD_INT 16
19772: ST_TO_ADDR
// sRocket := false ;
19773: LD_ADDR_EXP 71
19777: PUSH
19778: LD_INT 0
19780: ST_TO_ADDR
// sSpeed := false ;
19781: LD_ADDR_EXP 70
19785: PUSH
19786: LD_INT 0
19788: ST_TO_ADDR
// sEngine := false ;
19789: LD_ADDR_EXP 72
19793: PUSH
19794: LD_INT 0
19796: ST_TO_ADDR
// sSpec := false ;
19797: LD_ADDR_EXP 69
19801: PUSH
19802: LD_INT 0
19804: ST_TO_ADDR
// sLevel := false ;
19805: LD_ADDR_EXP 73
19809: PUSH
19810: LD_INT 0
19812: ST_TO_ADDR
// sArmoury := false ;
19813: LD_ADDR_EXP 74
19817: PUSH
19818: LD_INT 0
19820: ST_TO_ADDR
// sRadar := false ;
19821: LD_ADDR_EXP 75
19825: PUSH
19826: LD_INT 0
19828: ST_TO_ADDR
// sBunker := false ;
19829: LD_ADDR_EXP 76
19833: PUSH
19834: LD_INT 0
19836: ST_TO_ADDR
// sHack := false ;
19837: LD_ADDR_EXP 77
19841: PUSH
19842: LD_INT 0
19844: ST_TO_ADDR
// sFire := false ;
19845: LD_ADDR_EXP 78
19849: PUSH
19850: LD_INT 0
19852: ST_TO_ADDR
// sRefresh := false ;
19853: LD_ADDR_EXP 79
19857: PUSH
19858: LD_INT 0
19860: ST_TO_ADDR
// sExp := false ;
19861: LD_ADDR_EXP 80
19865: PUSH
19866: LD_INT 0
19868: ST_TO_ADDR
// sDepot := false ;
19869: LD_ADDR_EXP 81
19873: PUSH
19874: LD_INT 0
19876: ST_TO_ADDR
// sFlag := false ;
19877: LD_ADDR_EXP 82
19881: PUSH
19882: LD_INT 0
19884: ST_TO_ADDR
// sKamikadze := false ;
19885: LD_ADDR_EXP 90
19889: PUSH
19890: LD_INT 0
19892: ST_TO_ADDR
// sTroll := false ;
19893: LD_ADDR_EXP 91
19897: PUSH
19898: LD_INT 0
19900: ST_TO_ADDR
// sSlow := false ;
19901: LD_ADDR_EXP 92
19905: PUSH
19906: LD_INT 0
19908: ST_TO_ADDR
// sLack := false ;
19909: LD_ADDR_EXP 93
19913: PUSH
19914: LD_INT 0
19916: ST_TO_ADDR
// sTank := false ;
19917: LD_ADDR_EXP 95
19921: PUSH
19922: LD_INT 0
19924: ST_TO_ADDR
// sRemote := false ;
19925: LD_ADDR_EXP 96
19929: PUSH
19930: LD_INT 0
19932: ST_TO_ADDR
// sPowell := false ;
19933: LD_ADDR_EXP 97
19937: PUSH
19938: LD_INT 0
19940: ST_TO_ADDR
// sTeleport := false ;
19941: LD_ADDR_EXP 100
19945: PUSH
19946: LD_INT 0
19948: ST_TO_ADDR
// sOilTower := false ;
19949: LD_ADDR_EXP 102
19953: PUSH
19954: LD_INT 0
19956: ST_TO_ADDR
// sShovel := false ;
19957: LD_ADDR_EXP 103
19961: PUSH
19962: LD_INT 0
19964: ST_TO_ADDR
// sSheik := false ;
19965: LD_ADDR_EXP 104
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// sEarthquake := false ;
19973: LD_ADDR_EXP 106
19977: PUSH
19978: LD_INT 0
19980: ST_TO_ADDR
// sAI := false ;
19981: LD_ADDR_EXP 107
19985: PUSH
19986: LD_INT 0
19988: ST_TO_ADDR
// sCargo := false ;
19989: LD_ADDR_EXP 110
19993: PUSH
19994: LD_INT 0
19996: ST_TO_ADDR
// sDLaser := false ;
19997: LD_ADDR_EXP 111
20001: PUSH
20002: LD_INT 0
20004: ST_TO_ADDR
// sExchange := false ;
20005: LD_ADDR_EXP 112
20009: PUSH
20010: LD_INT 0
20012: ST_TO_ADDR
// sFac := false ;
20013: LD_ADDR_EXP 113
20017: PUSH
20018: LD_INT 0
20020: ST_TO_ADDR
// sPower := false ;
20021: LD_ADDR_EXP 114
20025: PUSH
20026: LD_INT 0
20028: ST_TO_ADDR
// sRandom := false ;
20029: LD_ADDR_EXP 115
20033: PUSH
20034: LD_INT 0
20036: ST_TO_ADDR
// sShield := false ;
20037: LD_ADDR_EXP 116
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
// sTime := false ;
20045: LD_ADDR_EXP 117
20049: PUSH
20050: LD_INT 0
20052: ST_TO_ADDR
// sTools := false ;
20053: LD_ADDR_EXP 118
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// sSold := false ;
20061: LD_ADDR_EXP 83
20065: PUSH
20066: LD_INT 0
20068: ST_TO_ADDR
// sDiff := false ;
20069: LD_ADDR_EXP 84
20073: PUSH
20074: LD_INT 0
20076: ST_TO_ADDR
// sFog := false ;
20077: LD_ADDR_EXP 87
20081: PUSH
20082: LD_INT 0
20084: ST_TO_ADDR
// sReset := false ;
20085: LD_ADDR_EXP 88
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// sSun := false ;
20093: LD_ADDR_EXP 89
20097: PUSH
20098: LD_INT 0
20100: ST_TO_ADDR
// sTiger := false ;
20101: LD_ADDR_EXP 85
20105: PUSH
20106: LD_INT 0
20108: ST_TO_ADDR
// sBomb := false ;
20109: LD_ADDR_EXP 86
20113: PUSH
20114: LD_INT 0
20116: ST_TO_ADDR
// sWound := false ;
20117: LD_ADDR_EXP 94
20121: PUSH
20122: LD_INT 0
20124: ST_TO_ADDR
// sBetray := false ;
20125: LD_ADDR_EXP 98
20129: PUSH
20130: LD_INT 0
20132: ST_TO_ADDR
// sContamin := false ;
20133: LD_ADDR_EXP 99
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
// sOil := false ;
20141: LD_ADDR_EXP 101
20145: PUSH
20146: LD_INT 0
20148: ST_TO_ADDR
// sStu := false ;
20149: LD_ADDR_EXP 105
20153: PUSH
20154: LD_INT 0
20156: ST_TO_ADDR
// sBazooka := false ;
20157: LD_ADDR_EXP 108
20161: PUSH
20162: LD_INT 0
20164: ST_TO_ADDR
// sMortar := false ;
20165: LD_ADDR_EXP 109
20169: PUSH
20170: LD_INT 0
20172: ST_TO_ADDR
// sRanger := false ;
20173: LD_ADDR_EXP 119
20177: PUSH
20178: LD_INT 0
20180: ST_TO_ADDR
// end ;
20181: LD_VAR 0 1
20185: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20186: LD_INT 0
20188: PPUSH
20189: PPUSH
20190: PPUSH
20191: PPUSH
20192: PPUSH
// result := [ ] ;
20193: LD_ADDR_VAR 0 1
20197: PUSH
20198: EMPTY
20199: ST_TO_ADDR
// if campaign_id = 1 then
20200: LD_OWVAR 69
20204: PUSH
20205: LD_INT 1
20207: EQUAL
20208: IFFALSE 23146
// begin case mission_number of 1 :
20210: LD_OWVAR 70
20214: PUSH
20215: LD_INT 1
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20287
20223: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20224: LD_ADDR_VAR 0 1
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: LD_INT 4
20234: PUSH
20235: LD_INT 11
20237: PUSH
20238: LD_INT 12
20240: PUSH
20241: LD_INT 15
20243: PUSH
20244: LD_INT 16
20246: PUSH
20247: LD_INT 22
20249: PUSH
20250: LD_INT 23
20252: PUSH
20253: LD_INT 26
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 101
20269: PUSH
20270: LD_INT 102
20272: PUSH
20273: LD_INT 106
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: ST_TO_ADDR
20285: GO 23144
20287: LD_INT 2
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20367
20295: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20296: LD_ADDR_VAR 0 1
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: LD_INT 4
20306: PUSH
20307: LD_INT 11
20309: PUSH
20310: LD_INT 12
20312: PUSH
20313: LD_INT 15
20315: PUSH
20316: LD_INT 16
20318: PUSH
20319: LD_INT 22
20321: PUSH
20322: LD_INT 23
20324: PUSH
20325: LD_INT 26
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 101
20341: PUSH
20342: LD_INT 102
20344: PUSH
20345: LD_INT 105
20347: PUSH
20348: LD_INT 106
20350: PUSH
20351: LD_INT 108
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: ST_TO_ADDR
20365: GO 23144
20367: LD_INT 3
20369: DOUBLE
20370: EQUAL
20371: IFTRUE 20375
20373: GO 20451
20375: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20376: LD_ADDR_VAR 0 1
20380: PUSH
20381: LD_INT 2
20383: PUSH
20384: LD_INT 4
20386: PUSH
20387: LD_INT 5
20389: PUSH
20390: LD_INT 11
20392: PUSH
20393: LD_INT 12
20395: PUSH
20396: LD_INT 15
20398: PUSH
20399: LD_INT 16
20401: PUSH
20402: LD_INT 22
20404: PUSH
20405: LD_INT 26
20407: PUSH
20408: LD_INT 36
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 101
20425: PUSH
20426: LD_INT 102
20428: PUSH
20429: LD_INT 105
20431: PUSH
20432: LD_INT 106
20434: PUSH
20435: LD_INT 108
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: ST_TO_ADDR
20449: GO 23144
20451: LD_INT 4
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20543
20459: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20460: LD_ADDR_VAR 0 1
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: LD_INT 4
20470: PUSH
20471: LD_INT 5
20473: PUSH
20474: LD_INT 8
20476: PUSH
20477: LD_INT 11
20479: PUSH
20480: LD_INT 12
20482: PUSH
20483: LD_INT 15
20485: PUSH
20486: LD_INT 16
20488: PUSH
20489: LD_INT 22
20491: PUSH
20492: LD_INT 23
20494: PUSH
20495: LD_INT 26
20497: PUSH
20498: LD_INT 36
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 101
20517: PUSH
20518: LD_INT 102
20520: PUSH
20521: LD_INT 105
20523: PUSH
20524: LD_INT 106
20526: PUSH
20527: LD_INT 108
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: ST_TO_ADDR
20541: GO 23144
20543: LD_INT 5
20545: DOUBLE
20546: EQUAL
20547: IFTRUE 20551
20549: GO 20651
20551: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20552: LD_ADDR_VAR 0 1
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: LD_INT 4
20562: PUSH
20563: LD_INT 5
20565: PUSH
20566: LD_INT 6
20568: PUSH
20569: LD_INT 8
20571: PUSH
20572: LD_INT 11
20574: PUSH
20575: LD_INT 12
20577: PUSH
20578: LD_INT 15
20580: PUSH
20581: LD_INT 16
20583: PUSH
20584: LD_INT 22
20586: PUSH
20587: LD_INT 23
20589: PUSH
20590: LD_INT 25
20592: PUSH
20593: LD_INT 26
20595: PUSH
20596: LD_INT 36
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 101
20617: PUSH
20618: LD_INT 102
20620: PUSH
20621: LD_INT 105
20623: PUSH
20624: LD_INT 106
20626: PUSH
20627: LD_INT 108
20629: PUSH
20630: LD_INT 109
20632: PUSH
20633: LD_INT 112
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: ST_TO_ADDR
20649: GO 23144
20651: LD_INT 6
20653: DOUBLE
20654: EQUAL
20655: IFTRUE 20659
20657: GO 20779
20659: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20660: LD_ADDR_VAR 0 1
20664: PUSH
20665: LD_INT 2
20667: PUSH
20668: LD_INT 4
20670: PUSH
20671: LD_INT 5
20673: PUSH
20674: LD_INT 6
20676: PUSH
20677: LD_INT 8
20679: PUSH
20680: LD_INT 11
20682: PUSH
20683: LD_INT 12
20685: PUSH
20686: LD_INT 15
20688: PUSH
20689: LD_INT 16
20691: PUSH
20692: LD_INT 20
20694: PUSH
20695: LD_INT 21
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 23
20703: PUSH
20704: LD_INT 25
20706: PUSH
20707: LD_INT 26
20709: PUSH
20710: LD_INT 30
20712: PUSH
20713: LD_INT 31
20715: PUSH
20716: LD_INT 32
20718: PUSH
20719: LD_INT 36
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 101
20745: PUSH
20746: LD_INT 102
20748: PUSH
20749: LD_INT 105
20751: PUSH
20752: LD_INT 106
20754: PUSH
20755: LD_INT 108
20757: PUSH
20758: LD_INT 109
20760: PUSH
20761: LD_INT 112
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: ST_TO_ADDR
20777: GO 23144
20779: LD_INT 7
20781: DOUBLE
20782: EQUAL
20783: IFTRUE 20787
20785: GO 20887
20787: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20788: LD_ADDR_VAR 0 1
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: LD_INT 4
20798: PUSH
20799: LD_INT 5
20801: PUSH
20802: LD_INT 7
20804: PUSH
20805: LD_INT 11
20807: PUSH
20808: LD_INT 12
20810: PUSH
20811: LD_INT 15
20813: PUSH
20814: LD_INT 16
20816: PUSH
20817: LD_INT 20
20819: PUSH
20820: LD_INT 21
20822: PUSH
20823: LD_INT 22
20825: PUSH
20826: LD_INT 23
20828: PUSH
20829: LD_INT 25
20831: PUSH
20832: LD_INT 26
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 101
20853: PUSH
20854: LD_INT 102
20856: PUSH
20857: LD_INT 103
20859: PUSH
20860: LD_INT 105
20862: PUSH
20863: LD_INT 106
20865: PUSH
20866: LD_INT 108
20868: PUSH
20869: LD_INT 112
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: ST_TO_ADDR
20885: GO 23144
20887: LD_INT 8
20889: DOUBLE
20890: EQUAL
20891: IFTRUE 20895
20893: GO 21023
20895: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20896: LD_ADDR_VAR 0 1
20900: PUSH
20901: LD_INT 2
20903: PUSH
20904: LD_INT 4
20906: PUSH
20907: LD_INT 5
20909: PUSH
20910: LD_INT 6
20912: PUSH
20913: LD_INT 7
20915: PUSH
20916: LD_INT 8
20918: PUSH
20919: LD_INT 11
20921: PUSH
20922: LD_INT 12
20924: PUSH
20925: LD_INT 15
20927: PUSH
20928: LD_INT 16
20930: PUSH
20931: LD_INT 20
20933: PUSH
20934: LD_INT 21
20936: PUSH
20937: LD_INT 22
20939: PUSH
20940: LD_INT 23
20942: PUSH
20943: LD_INT 25
20945: PUSH
20946: LD_INT 26
20948: PUSH
20949: LD_INT 30
20951: PUSH
20952: LD_INT 31
20954: PUSH
20955: LD_INT 32
20957: PUSH
20958: LD_INT 36
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 101
20985: PUSH
20986: LD_INT 102
20988: PUSH
20989: LD_INT 103
20991: PUSH
20992: LD_INT 105
20994: PUSH
20995: LD_INT 106
20997: PUSH
20998: LD_INT 108
21000: PUSH
21001: LD_INT 109
21003: PUSH
21004: LD_INT 112
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: ST_TO_ADDR
21021: GO 23144
21023: LD_INT 9
21025: DOUBLE
21026: EQUAL
21027: IFTRUE 21031
21029: GO 21167
21031: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21032: LD_ADDR_VAR 0 1
21036: PUSH
21037: LD_INT 2
21039: PUSH
21040: LD_INT 4
21042: PUSH
21043: LD_INT 5
21045: PUSH
21046: LD_INT 6
21048: PUSH
21049: LD_INT 7
21051: PUSH
21052: LD_INT 8
21054: PUSH
21055: LD_INT 11
21057: PUSH
21058: LD_INT 12
21060: PUSH
21061: LD_INT 15
21063: PUSH
21064: LD_INT 16
21066: PUSH
21067: LD_INT 20
21069: PUSH
21070: LD_INT 21
21072: PUSH
21073: LD_INT 22
21075: PUSH
21076: LD_INT 23
21078: PUSH
21079: LD_INT 25
21081: PUSH
21082: LD_INT 26
21084: PUSH
21085: LD_INT 28
21087: PUSH
21088: LD_INT 30
21090: PUSH
21091: LD_INT 31
21093: PUSH
21094: LD_INT 32
21096: PUSH
21097: LD_INT 36
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 101
21125: PUSH
21126: LD_INT 102
21128: PUSH
21129: LD_INT 103
21131: PUSH
21132: LD_INT 105
21134: PUSH
21135: LD_INT 106
21137: PUSH
21138: LD_INT 108
21140: PUSH
21141: LD_INT 109
21143: PUSH
21144: LD_INT 112
21146: PUSH
21147: LD_INT 114
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: ST_TO_ADDR
21165: GO 23144
21167: LD_INT 10
21169: DOUBLE
21170: EQUAL
21171: IFTRUE 21175
21173: GO 21359
21175: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21176: LD_ADDR_VAR 0 1
21180: PUSH
21181: LD_INT 2
21183: PUSH
21184: LD_INT 4
21186: PUSH
21187: LD_INT 5
21189: PUSH
21190: LD_INT 6
21192: PUSH
21193: LD_INT 7
21195: PUSH
21196: LD_INT 8
21198: PUSH
21199: LD_INT 9
21201: PUSH
21202: LD_INT 10
21204: PUSH
21205: LD_INT 11
21207: PUSH
21208: LD_INT 12
21210: PUSH
21211: LD_INT 13
21213: PUSH
21214: LD_INT 14
21216: PUSH
21217: LD_INT 15
21219: PUSH
21220: LD_INT 16
21222: PUSH
21223: LD_INT 17
21225: PUSH
21226: LD_INT 18
21228: PUSH
21229: LD_INT 19
21231: PUSH
21232: LD_INT 20
21234: PUSH
21235: LD_INT 21
21237: PUSH
21238: LD_INT 22
21240: PUSH
21241: LD_INT 23
21243: PUSH
21244: LD_INT 24
21246: PUSH
21247: LD_INT 25
21249: PUSH
21250: LD_INT 26
21252: PUSH
21253: LD_INT 28
21255: PUSH
21256: LD_INT 30
21258: PUSH
21259: LD_INT 31
21261: PUSH
21262: LD_INT 32
21264: PUSH
21265: LD_INT 36
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 101
21301: PUSH
21302: LD_INT 102
21304: PUSH
21305: LD_INT 103
21307: PUSH
21308: LD_INT 104
21310: PUSH
21311: LD_INT 105
21313: PUSH
21314: LD_INT 106
21316: PUSH
21317: LD_INT 107
21319: PUSH
21320: LD_INT 108
21322: PUSH
21323: LD_INT 109
21325: PUSH
21326: LD_INT 110
21328: PUSH
21329: LD_INT 111
21331: PUSH
21332: LD_INT 112
21334: PUSH
21335: LD_INT 114
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: ST_TO_ADDR
21357: GO 23144
21359: LD_INT 11
21361: DOUBLE
21362: EQUAL
21363: IFTRUE 21367
21365: GO 21559
21367: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21368: LD_ADDR_VAR 0 1
21372: PUSH
21373: LD_INT 2
21375: PUSH
21376: LD_INT 3
21378: PUSH
21379: LD_INT 4
21381: PUSH
21382: LD_INT 5
21384: PUSH
21385: LD_INT 6
21387: PUSH
21388: LD_INT 7
21390: PUSH
21391: LD_INT 8
21393: PUSH
21394: LD_INT 9
21396: PUSH
21397: LD_INT 10
21399: PUSH
21400: LD_INT 11
21402: PUSH
21403: LD_INT 12
21405: PUSH
21406: LD_INT 13
21408: PUSH
21409: LD_INT 14
21411: PUSH
21412: LD_INT 15
21414: PUSH
21415: LD_INT 16
21417: PUSH
21418: LD_INT 17
21420: PUSH
21421: LD_INT 18
21423: PUSH
21424: LD_INT 19
21426: PUSH
21427: LD_INT 20
21429: PUSH
21430: LD_INT 21
21432: PUSH
21433: LD_INT 22
21435: PUSH
21436: LD_INT 23
21438: PUSH
21439: LD_INT 24
21441: PUSH
21442: LD_INT 25
21444: PUSH
21445: LD_INT 26
21447: PUSH
21448: LD_INT 28
21450: PUSH
21451: LD_INT 30
21453: PUSH
21454: LD_INT 31
21456: PUSH
21457: LD_INT 32
21459: PUSH
21460: LD_INT 34
21462: PUSH
21463: LD_INT 36
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 101
21501: PUSH
21502: LD_INT 102
21504: PUSH
21505: LD_INT 103
21507: PUSH
21508: LD_INT 104
21510: PUSH
21511: LD_INT 105
21513: PUSH
21514: LD_INT 106
21516: PUSH
21517: LD_INT 107
21519: PUSH
21520: LD_INT 108
21522: PUSH
21523: LD_INT 109
21525: PUSH
21526: LD_INT 110
21528: PUSH
21529: LD_INT 111
21531: PUSH
21532: LD_INT 112
21534: PUSH
21535: LD_INT 114
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: ST_TO_ADDR
21557: GO 23144
21559: LD_INT 12
21561: DOUBLE
21562: EQUAL
21563: IFTRUE 21567
21565: GO 21775
21567: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21568: LD_ADDR_VAR 0 1
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: LD_INT 2
21578: PUSH
21579: LD_INT 3
21581: PUSH
21582: LD_INT 4
21584: PUSH
21585: LD_INT 5
21587: PUSH
21588: LD_INT 6
21590: PUSH
21591: LD_INT 7
21593: PUSH
21594: LD_INT 8
21596: PUSH
21597: LD_INT 9
21599: PUSH
21600: LD_INT 10
21602: PUSH
21603: LD_INT 11
21605: PUSH
21606: LD_INT 12
21608: PUSH
21609: LD_INT 13
21611: PUSH
21612: LD_INT 14
21614: PUSH
21615: LD_INT 15
21617: PUSH
21618: LD_INT 16
21620: PUSH
21621: LD_INT 17
21623: PUSH
21624: LD_INT 18
21626: PUSH
21627: LD_INT 19
21629: PUSH
21630: LD_INT 20
21632: PUSH
21633: LD_INT 21
21635: PUSH
21636: LD_INT 22
21638: PUSH
21639: LD_INT 23
21641: PUSH
21642: LD_INT 24
21644: PUSH
21645: LD_INT 25
21647: PUSH
21648: LD_INT 26
21650: PUSH
21651: LD_INT 27
21653: PUSH
21654: LD_INT 28
21656: PUSH
21657: LD_INT 30
21659: PUSH
21660: LD_INT 31
21662: PUSH
21663: LD_INT 32
21665: PUSH
21666: LD_INT 33
21668: PUSH
21669: LD_INT 34
21671: PUSH
21672: LD_INT 36
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 101
21713: PUSH
21714: LD_INT 102
21716: PUSH
21717: LD_INT 103
21719: PUSH
21720: LD_INT 104
21722: PUSH
21723: LD_INT 105
21725: PUSH
21726: LD_INT 106
21728: PUSH
21729: LD_INT 107
21731: PUSH
21732: LD_INT 108
21734: PUSH
21735: LD_INT 109
21737: PUSH
21738: LD_INT 110
21740: PUSH
21741: LD_INT 111
21743: PUSH
21744: LD_INT 112
21746: PUSH
21747: LD_INT 113
21749: PUSH
21750: LD_INT 114
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: ST_TO_ADDR
21773: GO 23144
21775: LD_INT 13
21777: DOUBLE
21778: EQUAL
21779: IFTRUE 21783
21781: GO 21979
21783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21784: LD_ADDR_VAR 0 1
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 2
21794: PUSH
21795: LD_INT 3
21797: PUSH
21798: LD_INT 4
21800: PUSH
21801: LD_INT 5
21803: PUSH
21804: LD_INT 8
21806: PUSH
21807: LD_INT 9
21809: PUSH
21810: LD_INT 10
21812: PUSH
21813: LD_INT 11
21815: PUSH
21816: LD_INT 12
21818: PUSH
21819: LD_INT 14
21821: PUSH
21822: LD_INT 15
21824: PUSH
21825: LD_INT 16
21827: PUSH
21828: LD_INT 17
21830: PUSH
21831: LD_INT 18
21833: PUSH
21834: LD_INT 19
21836: PUSH
21837: LD_INT 20
21839: PUSH
21840: LD_INT 21
21842: PUSH
21843: LD_INT 22
21845: PUSH
21846: LD_INT 23
21848: PUSH
21849: LD_INT 24
21851: PUSH
21852: LD_INT 25
21854: PUSH
21855: LD_INT 26
21857: PUSH
21858: LD_INT 27
21860: PUSH
21861: LD_INT 28
21863: PUSH
21864: LD_INT 30
21866: PUSH
21867: LD_INT 31
21869: PUSH
21870: LD_INT 32
21872: PUSH
21873: LD_INT 33
21875: PUSH
21876: LD_INT 34
21878: PUSH
21879: LD_INT 36
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 101
21917: PUSH
21918: LD_INT 102
21920: PUSH
21921: LD_INT 103
21923: PUSH
21924: LD_INT 104
21926: PUSH
21927: LD_INT 105
21929: PUSH
21930: LD_INT 106
21932: PUSH
21933: LD_INT 107
21935: PUSH
21936: LD_INT 108
21938: PUSH
21939: LD_INT 109
21941: PUSH
21942: LD_INT 110
21944: PUSH
21945: LD_INT 111
21947: PUSH
21948: LD_INT 112
21950: PUSH
21951: LD_INT 113
21953: PUSH
21954: LD_INT 114
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: ST_TO_ADDR
21977: GO 23144
21979: LD_INT 14
21981: DOUBLE
21982: EQUAL
21983: IFTRUE 21987
21985: GO 22199
21987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21988: LD_ADDR_VAR 0 1
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: LD_INT 2
21998: PUSH
21999: LD_INT 3
22001: PUSH
22002: LD_INT 4
22004: PUSH
22005: LD_INT 5
22007: PUSH
22008: LD_INT 6
22010: PUSH
22011: LD_INT 7
22013: PUSH
22014: LD_INT 8
22016: PUSH
22017: LD_INT 9
22019: PUSH
22020: LD_INT 10
22022: PUSH
22023: LD_INT 11
22025: PUSH
22026: LD_INT 12
22028: PUSH
22029: LD_INT 13
22031: PUSH
22032: LD_INT 14
22034: PUSH
22035: LD_INT 15
22037: PUSH
22038: LD_INT 16
22040: PUSH
22041: LD_INT 17
22043: PUSH
22044: LD_INT 18
22046: PUSH
22047: LD_INT 19
22049: PUSH
22050: LD_INT 20
22052: PUSH
22053: LD_INT 21
22055: PUSH
22056: LD_INT 22
22058: PUSH
22059: LD_INT 23
22061: PUSH
22062: LD_INT 24
22064: PUSH
22065: LD_INT 25
22067: PUSH
22068: LD_INT 26
22070: PUSH
22071: LD_INT 27
22073: PUSH
22074: LD_INT 28
22076: PUSH
22077: LD_INT 29
22079: PUSH
22080: LD_INT 30
22082: PUSH
22083: LD_INT 31
22085: PUSH
22086: LD_INT 32
22088: PUSH
22089: LD_INT 33
22091: PUSH
22092: LD_INT 34
22094: PUSH
22095: LD_INT 36
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 101
22137: PUSH
22138: LD_INT 102
22140: PUSH
22141: LD_INT 103
22143: PUSH
22144: LD_INT 104
22146: PUSH
22147: LD_INT 105
22149: PUSH
22150: LD_INT 106
22152: PUSH
22153: LD_INT 107
22155: PUSH
22156: LD_INT 108
22158: PUSH
22159: LD_INT 109
22161: PUSH
22162: LD_INT 110
22164: PUSH
22165: LD_INT 111
22167: PUSH
22168: LD_INT 112
22170: PUSH
22171: LD_INT 113
22173: PUSH
22174: LD_INT 114
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: ST_TO_ADDR
22197: GO 23144
22199: LD_INT 15
22201: DOUBLE
22202: EQUAL
22203: IFTRUE 22207
22205: GO 22419
22207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22208: LD_ADDR_VAR 0 1
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 3
22221: PUSH
22222: LD_INT 4
22224: PUSH
22225: LD_INT 5
22227: PUSH
22228: LD_INT 6
22230: PUSH
22231: LD_INT 7
22233: PUSH
22234: LD_INT 8
22236: PUSH
22237: LD_INT 9
22239: PUSH
22240: LD_INT 10
22242: PUSH
22243: LD_INT 11
22245: PUSH
22246: LD_INT 12
22248: PUSH
22249: LD_INT 13
22251: PUSH
22252: LD_INT 14
22254: PUSH
22255: LD_INT 15
22257: PUSH
22258: LD_INT 16
22260: PUSH
22261: LD_INT 17
22263: PUSH
22264: LD_INT 18
22266: PUSH
22267: LD_INT 19
22269: PUSH
22270: LD_INT 20
22272: PUSH
22273: LD_INT 21
22275: PUSH
22276: LD_INT 22
22278: PUSH
22279: LD_INT 23
22281: PUSH
22282: LD_INT 24
22284: PUSH
22285: LD_INT 25
22287: PUSH
22288: LD_INT 26
22290: PUSH
22291: LD_INT 27
22293: PUSH
22294: LD_INT 28
22296: PUSH
22297: LD_INT 29
22299: PUSH
22300: LD_INT 30
22302: PUSH
22303: LD_INT 31
22305: PUSH
22306: LD_INT 32
22308: PUSH
22309: LD_INT 33
22311: PUSH
22312: LD_INT 34
22314: PUSH
22315: LD_INT 36
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 101
22357: PUSH
22358: LD_INT 102
22360: PUSH
22361: LD_INT 103
22363: PUSH
22364: LD_INT 104
22366: PUSH
22367: LD_INT 105
22369: PUSH
22370: LD_INT 106
22372: PUSH
22373: LD_INT 107
22375: PUSH
22376: LD_INT 108
22378: PUSH
22379: LD_INT 109
22381: PUSH
22382: LD_INT 110
22384: PUSH
22385: LD_INT 111
22387: PUSH
22388: LD_INT 112
22390: PUSH
22391: LD_INT 113
22393: PUSH
22394: LD_INT 114
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: ST_TO_ADDR
22417: GO 23144
22419: LD_INT 16
22421: DOUBLE
22422: EQUAL
22423: IFTRUE 22427
22425: GO 22551
22427: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22428: LD_ADDR_VAR 0 1
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 4
22438: PUSH
22439: LD_INT 5
22441: PUSH
22442: LD_INT 7
22444: PUSH
22445: LD_INT 11
22447: PUSH
22448: LD_INT 12
22450: PUSH
22451: LD_INT 15
22453: PUSH
22454: LD_INT 16
22456: PUSH
22457: LD_INT 20
22459: PUSH
22460: LD_INT 21
22462: PUSH
22463: LD_INT 22
22465: PUSH
22466: LD_INT 23
22468: PUSH
22469: LD_INT 25
22471: PUSH
22472: LD_INT 26
22474: PUSH
22475: LD_INT 30
22477: PUSH
22478: LD_INT 31
22480: PUSH
22481: LD_INT 32
22483: PUSH
22484: LD_INT 33
22486: PUSH
22487: LD_INT 34
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 101
22513: PUSH
22514: LD_INT 102
22516: PUSH
22517: LD_INT 103
22519: PUSH
22520: LD_INT 106
22522: PUSH
22523: LD_INT 108
22525: PUSH
22526: LD_INT 112
22528: PUSH
22529: LD_INT 113
22531: PUSH
22532: LD_INT 114
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: ST_TO_ADDR
22549: GO 23144
22551: LD_INT 17
22553: DOUBLE
22554: EQUAL
22555: IFTRUE 22559
22557: GO 22771
22559: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22560: LD_ADDR_VAR 0 1
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: LD_INT 3
22573: PUSH
22574: LD_INT 4
22576: PUSH
22577: LD_INT 5
22579: PUSH
22580: LD_INT 6
22582: PUSH
22583: LD_INT 7
22585: PUSH
22586: LD_INT 8
22588: PUSH
22589: LD_INT 9
22591: PUSH
22592: LD_INT 10
22594: PUSH
22595: LD_INT 11
22597: PUSH
22598: LD_INT 12
22600: PUSH
22601: LD_INT 13
22603: PUSH
22604: LD_INT 14
22606: PUSH
22607: LD_INT 15
22609: PUSH
22610: LD_INT 16
22612: PUSH
22613: LD_INT 17
22615: PUSH
22616: LD_INT 18
22618: PUSH
22619: LD_INT 19
22621: PUSH
22622: LD_INT 20
22624: PUSH
22625: LD_INT 21
22627: PUSH
22628: LD_INT 22
22630: PUSH
22631: LD_INT 23
22633: PUSH
22634: LD_INT 24
22636: PUSH
22637: LD_INT 25
22639: PUSH
22640: LD_INT 26
22642: PUSH
22643: LD_INT 27
22645: PUSH
22646: LD_INT 28
22648: PUSH
22649: LD_INT 29
22651: PUSH
22652: LD_INT 30
22654: PUSH
22655: LD_INT 31
22657: PUSH
22658: LD_INT 32
22660: PUSH
22661: LD_INT 33
22663: PUSH
22664: LD_INT 34
22666: PUSH
22667: LD_INT 36
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 101
22709: PUSH
22710: LD_INT 102
22712: PUSH
22713: LD_INT 103
22715: PUSH
22716: LD_INT 104
22718: PUSH
22719: LD_INT 105
22721: PUSH
22722: LD_INT 106
22724: PUSH
22725: LD_INT 107
22727: PUSH
22728: LD_INT 108
22730: PUSH
22731: LD_INT 109
22733: PUSH
22734: LD_INT 110
22736: PUSH
22737: LD_INT 111
22739: PUSH
22740: LD_INT 112
22742: PUSH
22743: LD_INT 113
22745: PUSH
22746: LD_INT 114
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: ST_TO_ADDR
22769: GO 23144
22771: LD_INT 18
22773: DOUBLE
22774: EQUAL
22775: IFTRUE 22779
22777: GO 22915
22779: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22780: LD_ADDR_VAR 0 1
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: LD_INT 4
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: LD_INT 7
22796: PUSH
22797: LD_INT 11
22799: PUSH
22800: LD_INT 12
22802: PUSH
22803: LD_INT 15
22805: PUSH
22806: LD_INT 16
22808: PUSH
22809: LD_INT 20
22811: PUSH
22812: LD_INT 21
22814: PUSH
22815: LD_INT 22
22817: PUSH
22818: LD_INT 23
22820: PUSH
22821: LD_INT 25
22823: PUSH
22824: LD_INT 26
22826: PUSH
22827: LD_INT 30
22829: PUSH
22830: LD_INT 31
22832: PUSH
22833: LD_INT 32
22835: PUSH
22836: LD_INT 33
22838: PUSH
22839: LD_INT 34
22841: PUSH
22842: LD_INT 35
22844: PUSH
22845: LD_INT 36
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 101
22873: PUSH
22874: LD_INT 102
22876: PUSH
22877: LD_INT 103
22879: PUSH
22880: LD_INT 106
22882: PUSH
22883: LD_INT 108
22885: PUSH
22886: LD_INT 112
22888: PUSH
22889: LD_INT 113
22891: PUSH
22892: LD_INT 114
22894: PUSH
22895: LD_INT 115
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: ST_TO_ADDR
22913: GO 23144
22915: LD_INT 19
22917: DOUBLE
22918: EQUAL
22919: IFTRUE 22923
22921: GO 23143
22923: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22924: LD_ADDR_VAR 0 1
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: LD_INT 2
22934: PUSH
22935: LD_INT 3
22937: PUSH
22938: LD_INT 4
22940: PUSH
22941: LD_INT 5
22943: PUSH
22944: LD_INT 6
22946: PUSH
22947: LD_INT 7
22949: PUSH
22950: LD_INT 8
22952: PUSH
22953: LD_INT 9
22955: PUSH
22956: LD_INT 10
22958: PUSH
22959: LD_INT 11
22961: PUSH
22962: LD_INT 12
22964: PUSH
22965: LD_INT 13
22967: PUSH
22968: LD_INT 14
22970: PUSH
22971: LD_INT 15
22973: PUSH
22974: LD_INT 16
22976: PUSH
22977: LD_INT 17
22979: PUSH
22980: LD_INT 18
22982: PUSH
22983: LD_INT 19
22985: PUSH
22986: LD_INT 20
22988: PUSH
22989: LD_INT 21
22991: PUSH
22992: LD_INT 22
22994: PUSH
22995: LD_INT 23
22997: PUSH
22998: LD_INT 24
23000: PUSH
23001: LD_INT 25
23003: PUSH
23004: LD_INT 26
23006: PUSH
23007: LD_INT 27
23009: PUSH
23010: LD_INT 28
23012: PUSH
23013: LD_INT 29
23015: PUSH
23016: LD_INT 30
23018: PUSH
23019: LD_INT 31
23021: PUSH
23022: LD_INT 32
23024: PUSH
23025: LD_INT 33
23027: PUSH
23028: LD_INT 34
23030: PUSH
23031: LD_INT 35
23033: PUSH
23034: LD_INT 36
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 101
23077: PUSH
23078: LD_INT 102
23080: PUSH
23081: LD_INT 103
23083: PUSH
23084: LD_INT 104
23086: PUSH
23087: LD_INT 105
23089: PUSH
23090: LD_INT 106
23092: PUSH
23093: LD_INT 107
23095: PUSH
23096: LD_INT 108
23098: PUSH
23099: LD_INT 109
23101: PUSH
23102: LD_INT 110
23104: PUSH
23105: LD_INT 111
23107: PUSH
23108: LD_INT 112
23110: PUSH
23111: LD_INT 113
23113: PUSH
23114: LD_INT 114
23116: PUSH
23117: LD_INT 115
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: ST_TO_ADDR
23141: GO 23144
23143: POP
// end else
23144: GO 23363
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23146: LD_ADDR_VAR 0 1
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 3
23159: PUSH
23160: LD_INT 4
23162: PUSH
23163: LD_INT 5
23165: PUSH
23166: LD_INT 6
23168: PUSH
23169: LD_INT 7
23171: PUSH
23172: LD_INT 8
23174: PUSH
23175: LD_INT 9
23177: PUSH
23178: LD_INT 10
23180: PUSH
23181: LD_INT 11
23183: PUSH
23184: LD_INT 12
23186: PUSH
23187: LD_INT 13
23189: PUSH
23190: LD_INT 14
23192: PUSH
23193: LD_INT 15
23195: PUSH
23196: LD_INT 16
23198: PUSH
23199: LD_INT 17
23201: PUSH
23202: LD_INT 18
23204: PUSH
23205: LD_INT 19
23207: PUSH
23208: LD_INT 20
23210: PUSH
23211: LD_INT 21
23213: PUSH
23214: LD_INT 22
23216: PUSH
23217: LD_INT 23
23219: PUSH
23220: LD_INT 24
23222: PUSH
23223: LD_INT 25
23225: PUSH
23226: LD_INT 26
23228: PUSH
23229: LD_INT 27
23231: PUSH
23232: LD_INT 28
23234: PUSH
23235: LD_INT 29
23237: PUSH
23238: LD_INT 30
23240: PUSH
23241: LD_INT 31
23243: PUSH
23244: LD_INT 32
23246: PUSH
23247: LD_INT 33
23249: PUSH
23250: LD_INT 34
23252: PUSH
23253: LD_INT 35
23255: PUSH
23256: LD_INT 36
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 101
23299: PUSH
23300: LD_INT 102
23302: PUSH
23303: LD_INT 103
23305: PUSH
23306: LD_INT 104
23308: PUSH
23309: LD_INT 105
23311: PUSH
23312: LD_INT 106
23314: PUSH
23315: LD_INT 107
23317: PUSH
23318: LD_INT 108
23320: PUSH
23321: LD_INT 109
23323: PUSH
23324: LD_INT 110
23326: PUSH
23327: LD_INT 111
23329: PUSH
23330: LD_INT 112
23332: PUSH
23333: LD_INT 113
23335: PUSH
23336: LD_INT 114
23338: PUSH
23339: LD_INT 115
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: ST_TO_ADDR
// if result then
23363: LD_VAR 0 1
23367: IFFALSE 23656
// begin normal :=  ;
23369: LD_ADDR_VAR 0 3
23373: PUSH
23374: LD_STRING 
23376: ST_TO_ADDR
// hardcore :=  ;
23377: LD_ADDR_VAR 0 4
23381: PUSH
23382: LD_STRING 
23384: ST_TO_ADDR
// for i = 1 to normalCounter do
23385: LD_ADDR_VAR 0 5
23389: PUSH
23390: DOUBLE
23391: LD_INT 1
23393: DEC
23394: ST_TO_ADDR
23395: LD_EXP 67
23399: PUSH
23400: FOR_TO
23401: IFFALSE 23502
// begin tmp := 0 ;
23403: LD_ADDR_VAR 0 2
23407: PUSH
23408: LD_STRING 0
23410: ST_TO_ADDR
// if result [ 1 ] then
23411: LD_VAR 0 1
23415: PUSH
23416: LD_INT 1
23418: ARRAY
23419: IFFALSE 23484
// if result [ 1 ] [ 1 ] = i then
23421: LD_VAR 0 1
23425: PUSH
23426: LD_INT 1
23428: ARRAY
23429: PUSH
23430: LD_INT 1
23432: ARRAY
23433: PUSH
23434: LD_VAR 0 5
23438: EQUAL
23439: IFFALSE 23484
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23441: LD_ADDR_VAR 0 1
23445: PUSH
23446: LD_VAR 0 1
23450: PPUSH
23451: LD_INT 1
23453: PPUSH
23454: LD_VAR 0 1
23458: PUSH
23459: LD_INT 1
23461: ARRAY
23462: PPUSH
23463: LD_INT 1
23465: PPUSH
23466: CALL_OW 3
23470: PPUSH
23471: CALL_OW 1
23475: ST_TO_ADDR
// tmp := 1 ;
23476: LD_ADDR_VAR 0 2
23480: PUSH
23481: LD_STRING 1
23483: ST_TO_ADDR
// end ; normal := normal & tmp ;
23484: LD_ADDR_VAR 0 3
23488: PUSH
23489: LD_VAR 0 3
23493: PUSH
23494: LD_VAR 0 2
23498: STR
23499: ST_TO_ADDR
// end ;
23500: GO 23400
23502: POP
23503: POP
// for i = 1 to hardcoreCounter do
23504: LD_ADDR_VAR 0 5
23508: PUSH
23509: DOUBLE
23510: LD_INT 1
23512: DEC
23513: ST_TO_ADDR
23514: LD_EXP 68
23518: PUSH
23519: FOR_TO
23520: IFFALSE 23625
// begin tmp := 0 ;
23522: LD_ADDR_VAR 0 2
23526: PUSH
23527: LD_STRING 0
23529: ST_TO_ADDR
// if result [ 2 ] then
23530: LD_VAR 0 1
23534: PUSH
23535: LD_INT 2
23537: ARRAY
23538: IFFALSE 23607
// if result [ 2 ] [ 1 ] = 100 + i then
23540: LD_VAR 0 1
23544: PUSH
23545: LD_INT 2
23547: ARRAY
23548: PUSH
23549: LD_INT 1
23551: ARRAY
23552: PUSH
23553: LD_INT 100
23555: PUSH
23556: LD_VAR 0 5
23560: PLUS
23561: EQUAL
23562: IFFALSE 23607
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23564: LD_ADDR_VAR 0 1
23568: PUSH
23569: LD_VAR 0 1
23573: PPUSH
23574: LD_INT 2
23576: PPUSH
23577: LD_VAR 0 1
23581: PUSH
23582: LD_INT 2
23584: ARRAY
23585: PPUSH
23586: LD_INT 1
23588: PPUSH
23589: CALL_OW 3
23593: PPUSH
23594: CALL_OW 1
23598: ST_TO_ADDR
// tmp := 1 ;
23599: LD_ADDR_VAR 0 2
23603: PUSH
23604: LD_STRING 1
23606: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23607: LD_ADDR_VAR 0 4
23611: PUSH
23612: LD_VAR 0 4
23616: PUSH
23617: LD_VAR 0 2
23621: STR
23622: ST_TO_ADDR
// end ;
23623: GO 23519
23625: POP
23626: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23627: LD_STRING getStreamItemsFromMission("
23629: PUSH
23630: LD_VAR 0 3
23634: STR
23635: PUSH
23636: LD_STRING ","
23638: STR
23639: PUSH
23640: LD_VAR 0 4
23644: STR
23645: PUSH
23646: LD_STRING ")
23648: STR
23649: PPUSH
23650: CALL_OW 559
// end else
23654: GO 23663
// ToLua ( getStreamItemsFromMission("","") ) ;
23656: LD_STRING getStreamItemsFromMission("","")
23658: PPUSH
23659: CALL_OW 559
// end ;
23663: LD_VAR 0 1
23667: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23668: LD_EXP 66
23672: PUSH
23673: LD_EXP 71
23677: AND
23678: IFFALSE 23802
23680: GO 23682
23682: DISABLE
23683: LD_INT 0
23685: PPUSH
23686: PPUSH
// begin enable ;
23687: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23688: LD_ADDR_VAR 0 2
23692: PUSH
23693: LD_INT 22
23695: PUSH
23696: LD_OWVAR 2
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: LD_INT 34
23710: PUSH
23711: LD_INT 7
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 34
23720: PUSH
23721: LD_INT 45
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 34
23730: PUSH
23731: LD_INT 28
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 34
23740: PUSH
23741: LD_INT 47
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PPUSH
23759: CALL_OW 69
23763: ST_TO_ADDR
// if not tmp then
23764: LD_VAR 0 2
23768: NOT
23769: IFFALSE 23773
// exit ;
23771: GO 23802
// for i in tmp do
23773: LD_ADDR_VAR 0 1
23777: PUSH
23778: LD_VAR 0 2
23782: PUSH
23783: FOR_IN
23784: IFFALSE 23800
// begin SetLives ( i , 0 ) ;
23786: LD_VAR 0 1
23790: PPUSH
23791: LD_INT 0
23793: PPUSH
23794: CALL_OW 234
// end ;
23798: GO 23783
23800: POP
23801: POP
// end ;
23802: PPOPN 2
23804: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23805: LD_EXP 66
23809: PUSH
23810: LD_EXP 72
23814: AND
23815: IFFALSE 23899
23817: GO 23819
23819: DISABLE
23820: LD_INT 0
23822: PPUSH
23823: PPUSH
// begin enable ;
23824: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23825: LD_ADDR_VAR 0 2
23829: PUSH
23830: LD_INT 22
23832: PUSH
23833: LD_OWVAR 2
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 32
23844: PUSH
23845: LD_INT 3
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PPUSH
23856: CALL_OW 69
23860: ST_TO_ADDR
// if not tmp then
23861: LD_VAR 0 2
23865: NOT
23866: IFFALSE 23870
// exit ;
23868: GO 23899
// for i in tmp do
23870: LD_ADDR_VAR 0 1
23874: PUSH
23875: LD_VAR 0 2
23879: PUSH
23880: FOR_IN
23881: IFFALSE 23897
// begin SetLives ( i , 0 ) ;
23883: LD_VAR 0 1
23887: PPUSH
23888: LD_INT 0
23890: PPUSH
23891: CALL_OW 234
// end ;
23895: GO 23880
23897: POP
23898: POP
// end ;
23899: PPOPN 2
23901: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23902: LD_EXP 66
23906: PUSH
23907: LD_EXP 69
23911: AND
23912: IFFALSE 24005
23914: GO 23916
23916: DISABLE
23917: LD_INT 0
23919: PPUSH
// begin enable ;
23920: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23921: LD_ADDR_VAR 0 1
23925: PUSH
23926: LD_INT 22
23928: PUSH
23929: LD_OWVAR 2
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: LD_INT 25
23943: PUSH
23944: LD_INT 5
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 25
23953: PUSH
23954: LD_INT 9
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 25
23963: PUSH
23964: LD_INT 8
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PPUSH
23981: CALL_OW 69
23985: PUSH
23986: FOR_IN
23987: IFFALSE 24003
// begin SetClass ( i , 1 ) ;
23989: LD_VAR 0 1
23993: PPUSH
23994: LD_INT 1
23996: PPUSH
23997: CALL_OW 336
// end ;
24001: GO 23986
24003: POP
24004: POP
// end ;
24005: PPOPN 1
24007: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24008: LD_EXP 66
24012: PUSH
24013: LD_EXP 70
24017: AND
24018: PUSH
24019: LD_OWVAR 65
24023: PUSH
24024: LD_INT 7
24026: LESS
24027: AND
24028: IFFALSE 24042
24030: GO 24032
24032: DISABLE
// begin enable ;
24033: ENABLE
// game_speed := 7 ;
24034: LD_ADDR_OWVAR 65
24038: PUSH
24039: LD_INT 7
24041: ST_TO_ADDR
// end ;
24042: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24043: LD_EXP 66
24047: PUSH
24048: LD_EXP 73
24052: AND
24053: IFFALSE 24255
24055: GO 24057
24057: DISABLE
24058: LD_INT 0
24060: PPUSH
24061: PPUSH
24062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24063: LD_ADDR_VAR 0 3
24067: PUSH
24068: LD_INT 81
24070: PUSH
24071: LD_OWVAR 2
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 21
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PPUSH
24094: CALL_OW 69
24098: ST_TO_ADDR
// if not tmp then
24099: LD_VAR 0 3
24103: NOT
24104: IFFALSE 24108
// exit ;
24106: GO 24255
// if tmp > 5 then
24108: LD_VAR 0 3
24112: PUSH
24113: LD_INT 5
24115: GREATER
24116: IFFALSE 24128
// k := 5 else
24118: LD_ADDR_VAR 0 2
24122: PUSH
24123: LD_INT 5
24125: ST_TO_ADDR
24126: GO 24138
// k := tmp ;
24128: LD_ADDR_VAR 0 2
24132: PUSH
24133: LD_VAR 0 3
24137: ST_TO_ADDR
// for i := 1 to k do
24138: LD_ADDR_VAR 0 1
24142: PUSH
24143: DOUBLE
24144: LD_INT 1
24146: DEC
24147: ST_TO_ADDR
24148: LD_VAR 0 2
24152: PUSH
24153: FOR_TO
24154: IFFALSE 24253
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24156: LD_VAR 0 3
24160: PUSH
24161: LD_VAR 0 1
24165: ARRAY
24166: PPUSH
24167: LD_VAR 0 1
24171: PUSH
24172: LD_INT 4
24174: MOD
24175: PUSH
24176: LD_INT 1
24178: PLUS
24179: PPUSH
24180: CALL_OW 259
24184: PUSH
24185: LD_INT 10
24187: LESS
24188: IFFALSE 24251
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24190: LD_VAR 0 3
24194: PUSH
24195: LD_VAR 0 1
24199: ARRAY
24200: PPUSH
24201: LD_VAR 0 1
24205: PUSH
24206: LD_INT 4
24208: MOD
24209: PUSH
24210: LD_INT 1
24212: PLUS
24213: PPUSH
24214: LD_VAR 0 3
24218: PUSH
24219: LD_VAR 0 1
24223: ARRAY
24224: PPUSH
24225: LD_VAR 0 1
24229: PUSH
24230: LD_INT 4
24232: MOD
24233: PUSH
24234: LD_INT 1
24236: PLUS
24237: PPUSH
24238: CALL_OW 259
24242: PUSH
24243: LD_INT 1
24245: PLUS
24246: PPUSH
24247: CALL_OW 237
24251: GO 24153
24253: POP
24254: POP
// end ;
24255: PPOPN 3
24257: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24258: LD_EXP 66
24262: PUSH
24263: LD_EXP 74
24267: AND
24268: IFFALSE 24288
24270: GO 24272
24272: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24273: LD_INT 4
24275: PPUSH
24276: LD_OWVAR 2
24280: PPUSH
24281: LD_INT 0
24283: PPUSH
24284: CALL_OW 324
24288: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24289: LD_EXP 66
24293: PUSH
24294: LD_EXP 103
24298: AND
24299: IFFALSE 24319
24301: GO 24303
24303: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24304: LD_INT 19
24306: PPUSH
24307: LD_OWVAR 2
24311: PPUSH
24312: LD_INT 0
24314: PPUSH
24315: CALL_OW 324
24319: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24320: LD_EXP 66
24324: PUSH
24325: LD_EXP 75
24329: AND
24330: IFFALSE 24432
24332: GO 24334
24334: DISABLE
24335: LD_INT 0
24337: PPUSH
24338: PPUSH
// begin enable ;
24339: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24340: LD_ADDR_VAR 0 2
24344: PUSH
24345: LD_INT 22
24347: PUSH
24348: LD_OWVAR 2
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: PUSH
24360: LD_INT 34
24362: PUSH
24363: LD_INT 11
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 34
24372: PUSH
24373: LD_INT 30
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PPUSH
24389: CALL_OW 69
24393: ST_TO_ADDR
// if not tmp then
24394: LD_VAR 0 2
24398: NOT
24399: IFFALSE 24403
// exit ;
24401: GO 24432
// for i in tmp do
24403: LD_ADDR_VAR 0 1
24407: PUSH
24408: LD_VAR 0 2
24412: PUSH
24413: FOR_IN
24414: IFFALSE 24430
// begin SetLives ( i , 0 ) ;
24416: LD_VAR 0 1
24420: PPUSH
24421: LD_INT 0
24423: PPUSH
24424: CALL_OW 234
// end ;
24428: GO 24413
24430: POP
24431: POP
// end ;
24432: PPOPN 2
24434: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24435: LD_EXP 66
24439: PUSH
24440: LD_EXP 76
24444: AND
24445: IFFALSE 24465
24447: GO 24449
24449: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24450: LD_INT 32
24452: PPUSH
24453: LD_OWVAR 2
24457: PPUSH
24458: LD_INT 0
24460: PPUSH
24461: CALL_OW 324
24465: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24466: LD_EXP 66
24470: PUSH
24471: LD_EXP 77
24475: AND
24476: IFFALSE 24657
24478: GO 24480
24480: DISABLE
24481: LD_INT 0
24483: PPUSH
24484: PPUSH
24485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24486: LD_ADDR_VAR 0 2
24490: PUSH
24491: LD_INT 22
24493: PUSH
24494: LD_OWVAR 2
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 33
24505: PUSH
24506: LD_INT 3
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PPUSH
24517: CALL_OW 69
24521: ST_TO_ADDR
// if not tmp then
24522: LD_VAR 0 2
24526: NOT
24527: IFFALSE 24531
// exit ;
24529: GO 24657
// side := 0 ;
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: LD_INT 0
24538: ST_TO_ADDR
// for i := 1 to 8 do
24539: LD_ADDR_VAR 0 1
24543: PUSH
24544: DOUBLE
24545: LD_INT 1
24547: DEC
24548: ST_TO_ADDR
24549: LD_INT 8
24551: PUSH
24552: FOR_TO
24553: IFFALSE 24601
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24555: LD_OWVAR 2
24559: PUSH
24560: LD_VAR 0 1
24564: NONEQUAL
24565: PUSH
24566: LD_OWVAR 2
24570: PPUSH
24571: LD_VAR 0 1
24575: PPUSH
24576: CALL_OW 81
24580: PUSH
24581: LD_INT 2
24583: EQUAL
24584: AND
24585: IFFALSE 24599
// begin side := i ;
24587: LD_ADDR_VAR 0 3
24591: PUSH
24592: LD_VAR 0 1
24596: ST_TO_ADDR
// break ;
24597: GO 24601
// end ;
24599: GO 24552
24601: POP
24602: POP
// if not side then
24603: LD_VAR 0 3
24607: NOT
24608: IFFALSE 24612
// exit ;
24610: GO 24657
// for i := 1 to tmp do
24612: LD_ADDR_VAR 0 1
24616: PUSH
24617: DOUBLE
24618: LD_INT 1
24620: DEC
24621: ST_TO_ADDR
24622: LD_VAR 0 2
24626: PUSH
24627: FOR_TO
24628: IFFALSE 24655
// if Prob ( 60 ) then
24630: LD_INT 60
24632: PPUSH
24633: CALL_OW 13
24637: IFFALSE 24653
// SetSide ( i , side ) ;
24639: LD_VAR 0 1
24643: PPUSH
24644: LD_VAR 0 3
24648: PPUSH
24649: CALL_OW 235
24653: GO 24627
24655: POP
24656: POP
// end ;
24657: PPOPN 3
24659: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24660: LD_EXP 66
24664: PUSH
24665: LD_EXP 79
24669: AND
24670: IFFALSE 24789
24672: GO 24674
24674: DISABLE
24675: LD_INT 0
24677: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24678: LD_ADDR_VAR 0 1
24682: PUSH
24683: LD_INT 22
24685: PUSH
24686: LD_OWVAR 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 21
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 3
24707: PUSH
24708: LD_INT 23
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: LIST
24726: PPUSH
24727: CALL_OW 69
24731: PUSH
24732: FOR_IN
24733: IFFALSE 24787
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24735: LD_VAR 0 1
24739: PPUSH
24740: CALL_OW 257
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: LD_INT 4
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: IN
24763: IFFALSE 24785
// SetClass ( un , rand ( 1 , 4 ) ) ;
24765: LD_VAR 0 1
24769: PPUSH
24770: LD_INT 1
24772: PPUSH
24773: LD_INT 4
24775: PPUSH
24776: CALL_OW 12
24780: PPUSH
24781: CALL_OW 336
24785: GO 24732
24787: POP
24788: POP
// end ;
24789: PPOPN 1
24791: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24792: LD_EXP 66
24796: PUSH
24797: LD_EXP 78
24801: AND
24802: IFFALSE 24881
24804: GO 24806
24806: DISABLE
24807: LD_INT 0
24809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24810: LD_ADDR_VAR 0 1
24814: PUSH
24815: LD_INT 22
24817: PUSH
24818: LD_OWVAR 2
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 21
24829: PUSH
24830: LD_INT 3
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PPUSH
24841: CALL_OW 69
24845: ST_TO_ADDR
// if not tmp then
24846: LD_VAR 0 1
24850: NOT
24851: IFFALSE 24855
// exit ;
24853: GO 24881
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24855: LD_VAR 0 1
24859: PUSH
24860: LD_INT 1
24862: PPUSH
24863: LD_VAR 0 1
24867: PPUSH
24868: CALL_OW 12
24872: ARRAY
24873: PPUSH
24874: LD_INT 100
24876: PPUSH
24877: CALL_OW 234
// end ;
24881: PPOPN 1
24883: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24884: LD_EXP 66
24888: PUSH
24889: LD_EXP 80
24893: AND
24894: IFFALSE 24992
24896: GO 24898
24898: DISABLE
24899: LD_INT 0
24901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24902: LD_ADDR_VAR 0 1
24906: PUSH
24907: LD_INT 22
24909: PUSH
24910: LD_OWVAR 2
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 21
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL_OW 69
24937: ST_TO_ADDR
// if not tmp then
24938: LD_VAR 0 1
24942: NOT
24943: IFFALSE 24947
// exit ;
24945: GO 24992
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24947: LD_VAR 0 1
24951: PUSH
24952: LD_INT 1
24954: PPUSH
24955: LD_VAR 0 1
24959: PPUSH
24960: CALL_OW 12
24964: ARRAY
24965: PPUSH
24966: LD_INT 1
24968: PPUSH
24969: LD_INT 4
24971: PPUSH
24972: CALL_OW 12
24976: PPUSH
24977: LD_INT 3000
24979: PPUSH
24980: LD_INT 9000
24982: PPUSH
24983: CALL_OW 12
24987: PPUSH
24988: CALL_OW 492
// end ;
24992: PPOPN 1
24994: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24995: LD_EXP 66
24999: PUSH
25000: LD_EXP 81
25004: AND
25005: IFFALSE 25025
25007: GO 25009
25009: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25010: LD_INT 1
25012: PPUSH
25013: LD_OWVAR 2
25017: PPUSH
25018: LD_INT 0
25020: PPUSH
25021: CALL_OW 324
25025: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25026: LD_EXP 66
25030: PUSH
25031: LD_EXP 82
25035: AND
25036: IFFALSE 25119
25038: GO 25040
25040: DISABLE
25041: LD_INT 0
25043: PPUSH
25044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25045: LD_ADDR_VAR 0 2
25049: PUSH
25050: LD_INT 22
25052: PUSH
25053: LD_OWVAR 2
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 21
25064: PUSH
25065: LD_INT 3
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PPUSH
25076: CALL_OW 69
25080: ST_TO_ADDR
// if not tmp then
25081: LD_VAR 0 2
25085: NOT
25086: IFFALSE 25090
// exit ;
25088: GO 25119
// for i in tmp do
25090: LD_ADDR_VAR 0 1
25094: PUSH
25095: LD_VAR 0 2
25099: PUSH
25100: FOR_IN
25101: IFFALSE 25117
// SetBLevel ( i , 10 ) ;
25103: LD_VAR 0 1
25107: PPUSH
25108: LD_INT 10
25110: PPUSH
25111: CALL_OW 241
25115: GO 25100
25117: POP
25118: POP
// end ;
25119: PPOPN 2
25121: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25122: LD_EXP 66
25126: PUSH
25127: LD_EXP 83
25131: AND
25132: IFFALSE 25243
25134: GO 25136
25136: DISABLE
25137: LD_INT 0
25139: PPUSH
25140: PPUSH
25141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25142: LD_ADDR_VAR 0 3
25146: PUSH
25147: LD_INT 22
25149: PUSH
25150: LD_OWVAR 2
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 25
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PPUSH
25173: CALL_OW 69
25177: ST_TO_ADDR
// if not tmp then
25178: LD_VAR 0 3
25182: NOT
25183: IFFALSE 25187
// exit ;
25185: GO 25243
// un := tmp [ rand ( 1 , tmp ) ] ;
25187: LD_ADDR_VAR 0 2
25191: PUSH
25192: LD_VAR 0 3
25196: PUSH
25197: LD_INT 1
25199: PPUSH
25200: LD_VAR 0 3
25204: PPUSH
25205: CALL_OW 12
25209: ARRAY
25210: ST_TO_ADDR
// if Crawls ( un ) then
25211: LD_VAR 0 2
25215: PPUSH
25216: CALL_OW 318
25220: IFFALSE 25231
// ComWalk ( un ) ;
25222: LD_VAR 0 2
25226: PPUSH
25227: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25231: LD_VAR 0 2
25235: PPUSH
25236: LD_INT 5
25238: PPUSH
25239: CALL_OW 336
// end ;
25243: PPOPN 3
25245: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25246: LD_EXP 66
25250: PUSH
25251: LD_EXP 84
25255: AND
25256: PUSH
25257: LD_OWVAR 67
25261: PUSH
25262: LD_INT 3
25264: LESS
25265: AND
25266: IFFALSE 25285
25268: GO 25270
25270: DISABLE
// Difficulty := Difficulty + 1 ;
25271: LD_ADDR_OWVAR 67
25275: PUSH
25276: LD_OWVAR 67
25280: PUSH
25281: LD_INT 1
25283: PLUS
25284: ST_TO_ADDR
25285: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25286: LD_EXP 66
25290: PUSH
25291: LD_EXP 85
25295: AND
25296: IFFALSE 25399
25298: GO 25300
25300: DISABLE
25301: LD_INT 0
25303: PPUSH
// begin for i := 1 to 5 do
25304: LD_ADDR_VAR 0 1
25308: PUSH
25309: DOUBLE
25310: LD_INT 1
25312: DEC
25313: ST_TO_ADDR
25314: LD_INT 5
25316: PUSH
25317: FOR_TO
25318: IFFALSE 25397
// begin uc_nation := nation_nature ;
25320: LD_ADDR_OWVAR 21
25324: PUSH
25325: LD_INT 0
25327: ST_TO_ADDR
// uc_side := 0 ;
25328: LD_ADDR_OWVAR 20
25332: PUSH
25333: LD_INT 0
25335: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25336: LD_ADDR_OWVAR 29
25340: PUSH
25341: LD_INT 12
25343: PUSH
25344: LD_INT 12
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: ST_TO_ADDR
// hc_agressivity := 20 ;
25351: LD_ADDR_OWVAR 35
25355: PUSH
25356: LD_INT 20
25358: ST_TO_ADDR
// hc_class := class_tiger ;
25359: LD_ADDR_OWVAR 28
25363: PUSH
25364: LD_INT 14
25366: ST_TO_ADDR
// hc_gallery :=  ;
25367: LD_ADDR_OWVAR 33
25371: PUSH
25372: LD_STRING 
25374: ST_TO_ADDR
// hc_name :=  ;
25375: LD_ADDR_OWVAR 26
25379: PUSH
25380: LD_STRING 
25382: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25383: CALL_OW 44
25387: PPUSH
25388: LD_INT 0
25390: PPUSH
25391: CALL_OW 51
// end ;
25395: GO 25317
25397: POP
25398: POP
// end ;
25399: PPOPN 1
25401: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25402: LD_EXP 66
25406: PUSH
25407: LD_EXP 86
25411: AND
25412: IFFALSE 25421
25414: GO 25416
25416: DISABLE
// StreamSibBomb ;
25417: CALL 25422 0 0
25421: END
// export function StreamSibBomb ; var i , x , y ; begin
25422: LD_INT 0
25424: PPUSH
25425: PPUSH
25426: PPUSH
25427: PPUSH
// result := false ;
25428: LD_ADDR_VAR 0 1
25432: PUSH
25433: LD_INT 0
25435: ST_TO_ADDR
// for i := 1 to 16 do
25436: LD_ADDR_VAR 0 2
25440: PUSH
25441: DOUBLE
25442: LD_INT 1
25444: DEC
25445: ST_TO_ADDR
25446: LD_INT 16
25448: PUSH
25449: FOR_TO
25450: IFFALSE 25649
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25452: LD_ADDR_VAR 0 3
25456: PUSH
25457: LD_INT 10
25459: PUSH
25460: LD_INT 20
25462: PUSH
25463: LD_INT 30
25465: PUSH
25466: LD_INT 40
25468: PUSH
25469: LD_INT 50
25471: PUSH
25472: LD_INT 60
25474: PUSH
25475: LD_INT 70
25477: PUSH
25478: LD_INT 80
25480: PUSH
25481: LD_INT 90
25483: PUSH
25484: LD_INT 100
25486: PUSH
25487: LD_INT 110
25489: PUSH
25490: LD_INT 120
25492: PUSH
25493: LD_INT 130
25495: PUSH
25496: LD_INT 140
25498: PUSH
25499: LD_INT 150
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 1
25521: PPUSH
25522: LD_INT 15
25524: PPUSH
25525: CALL_OW 12
25529: ARRAY
25530: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25531: LD_ADDR_VAR 0 4
25535: PUSH
25536: LD_INT 10
25538: PUSH
25539: LD_INT 20
25541: PUSH
25542: LD_INT 30
25544: PUSH
25545: LD_INT 40
25547: PUSH
25548: LD_INT 50
25550: PUSH
25551: LD_INT 60
25553: PUSH
25554: LD_INT 70
25556: PUSH
25557: LD_INT 80
25559: PUSH
25560: LD_INT 90
25562: PUSH
25563: LD_INT 100
25565: PUSH
25566: LD_INT 110
25568: PUSH
25569: LD_INT 120
25571: PUSH
25572: LD_INT 130
25574: PUSH
25575: LD_INT 140
25577: PUSH
25578: LD_INT 150
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 1
25600: PPUSH
25601: LD_INT 15
25603: PPUSH
25604: CALL_OW 12
25608: ARRAY
25609: ST_TO_ADDR
// if ValidHex ( x , y ) then
25610: LD_VAR 0 3
25614: PPUSH
25615: LD_VAR 0 4
25619: PPUSH
25620: CALL_OW 488
25624: IFFALSE 25647
// begin result := [ x , y ] ;
25626: LD_ADDR_VAR 0 1
25630: PUSH
25631: LD_VAR 0 3
25635: PUSH
25636: LD_VAR 0 4
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: ST_TO_ADDR
// break ;
25645: GO 25649
// end ; end ;
25647: GO 25449
25649: POP
25650: POP
// if result then
25651: LD_VAR 0 1
25655: IFFALSE 25715
// begin ToLua ( playSibBomb() ) ;
25657: LD_STRING playSibBomb()
25659: PPUSH
25660: CALL_OW 559
// wait ( 0 0$14 ) ;
25664: LD_INT 490
25666: PPUSH
25667: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25671: LD_VAR 0 1
25675: PUSH
25676: LD_INT 1
25678: ARRAY
25679: PPUSH
25680: LD_VAR 0 1
25684: PUSH
25685: LD_INT 2
25687: ARRAY
25688: PPUSH
25689: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25693: LD_VAR 0 1
25697: PUSH
25698: LD_INT 1
25700: ARRAY
25701: PPUSH
25702: LD_VAR 0 1
25706: PUSH
25707: LD_INT 2
25709: ARRAY
25710: PPUSH
25711: CALL_OW 429
// end ; end ;
25715: LD_VAR 0 1
25719: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25720: LD_EXP 66
25724: PUSH
25725: LD_EXP 88
25729: AND
25730: IFFALSE 25742
25732: GO 25734
25734: DISABLE
// YouLost (  ) ;
25735: LD_STRING 
25737: PPUSH
25738: CALL_OW 104
25742: END
// every 0 0$1 trigger StreamModeActive and sFog do
25743: LD_EXP 66
25747: PUSH
25748: LD_EXP 87
25752: AND
25753: IFFALSE 25767
25755: GO 25757
25757: DISABLE
// FogOff ( your_side ) ;
25758: LD_OWVAR 2
25762: PPUSH
25763: CALL_OW 344
25767: END
// every 0 0$1 trigger StreamModeActive and sSun do
25768: LD_EXP 66
25772: PUSH
25773: LD_EXP 89
25777: AND
25778: IFFALSE 25806
25780: GO 25782
25782: DISABLE
// begin solar_recharge_percent := 0 ;
25783: LD_ADDR_OWVAR 79
25787: PUSH
25788: LD_INT 0
25790: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25791: LD_INT 10500
25793: PPUSH
25794: CALL_OW 67
// solar_recharge_percent := 100 ;
25798: LD_ADDR_OWVAR 79
25802: PUSH
25803: LD_INT 100
25805: ST_TO_ADDR
// end ;
25806: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25807: LD_EXP 66
25811: PUSH
25812: LD_EXP 90
25816: AND
25817: IFFALSE 26056
25819: GO 25821
25821: DISABLE
25822: LD_INT 0
25824: PPUSH
25825: PPUSH
25826: PPUSH
// begin tmp := [ ] ;
25827: LD_ADDR_VAR 0 3
25831: PUSH
25832: EMPTY
25833: ST_TO_ADDR
// for i := 1 to 6 do
25834: LD_ADDR_VAR 0 1
25838: PUSH
25839: DOUBLE
25840: LD_INT 1
25842: DEC
25843: ST_TO_ADDR
25844: LD_INT 6
25846: PUSH
25847: FOR_TO
25848: IFFALSE 25953
// begin uc_nation := nation_nature ;
25850: LD_ADDR_OWVAR 21
25854: PUSH
25855: LD_INT 0
25857: ST_TO_ADDR
// uc_side := 0 ;
25858: LD_ADDR_OWVAR 20
25862: PUSH
25863: LD_INT 0
25865: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25866: LD_ADDR_OWVAR 29
25870: PUSH
25871: LD_INT 12
25873: PUSH
25874: LD_INT 12
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: ST_TO_ADDR
// hc_agressivity := 20 ;
25881: LD_ADDR_OWVAR 35
25885: PUSH
25886: LD_INT 20
25888: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25889: LD_ADDR_OWVAR 28
25893: PUSH
25894: LD_INT 17
25896: ST_TO_ADDR
// hc_gallery :=  ;
25897: LD_ADDR_OWVAR 33
25901: PUSH
25902: LD_STRING 
25904: ST_TO_ADDR
// hc_name :=  ;
25905: LD_ADDR_OWVAR 26
25909: PUSH
25910: LD_STRING 
25912: ST_TO_ADDR
// un := CreateHuman ;
25913: LD_ADDR_VAR 0 2
25917: PUSH
25918: CALL_OW 44
25922: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25923: LD_VAR 0 2
25927: PPUSH
25928: LD_INT 1
25930: PPUSH
25931: CALL_OW 51
// tmp := tmp ^ un ;
25935: LD_ADDR_VAR 0 3
25939: PUSH
25940: LD_VAR 0 3
25944: PUSH
25945: LD_VAR 0 2
25949: ADD
25950: ST_TO_ADDR
// end ;
25951: GO 25847
25953: POP
25954: POP
// repeat wait ( 0 0$1 ) ;
25955: LD_INT 35
25957: PPUSH
25958: CALL_OW 67
// for un in tmp do
25962: LD_ADDR_VAR 0 2
25966: PUSH
25967: LD_VAR 0 3
25971: PUSH
25972: FOR_IN
25973: IFFALSE 26047
// begin if IsDead ( un ) then
25975: LD_VAR 0 2
25979: PPUSH
25980: CALL_OW 301
25984: IFFALSE 26004
// begin tmp := tmp diff un ;
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_VAR 0 3
25995: PUSH
25996: LD_VAR 0 2
26000: DIFF
26001: ST_TO_ADDR
// continue ;
26002: GO 25972
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26004: LD_VAR 0 2
26008: PPUSH
26009: LD_INT 3
26011: PUSH
26012: LD_INT 22
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PPUSH
26026: CALL_OW 69
26030: PPUSH
26031: LD_VAR 0 2
26035: PPUSH
26036: CALL_OW 74
26040: PPUSH
26041: CALL_OW 115
// end ;
26045: GO 25972
26047: POP
26048: POP
// until not tmp ;
26049: LD_VAR 0 3
26053: NOT
26054: IFFALSE 25955
// end ;
26056: PPOPN 3
26058: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26059: LD_EXP 66
26063: PUSH
26064: LD_EXP 91
26068: AND
26069: IFFALSE 26123
26071: GO 26073
26073: DISABLE
// begin ToLua ( displayTroll(); ) ;
26074: LD_STRING displayTroll();
26076: PPUSH
26077: CALL_OW 559
// wait ( 3 3$00 ) ;
26081: LD_INT 6300
26083: PPUSH
26084: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26088: LD_STRING hideTroll();
26090: PPUSH
26091: CALL_OW 559
// wait ( 1 1$00 ) ;
26095: LD_INT 2100
26097: PPUSH
26098: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26102: LD_STRING displayTroll();
26104: PPUSH
26105: CALL_OW 559
// wait ( 1 1$00 ) ;
26109: LD_INT 2100
26111: PPUSH
26112: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26116: LD_STRING hideTroll();
26118: PPUSH
26119: CALL_OW 559
// end ;
26123: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26124: LD_EXP 66
26128: PUSH
26129: LD_EXP 92
26133: AND
26134: IFFALSE 26197
26136: GO 26138
26138: DISABLE
26139: LD_INT 0
26141: PPUSH
// begin p := 0 ;
26142: LD_ADDR_VAR 0 1
26146: PUSH
26147: LD_INT 0
26149: ST_TO_ADDR
// repeat game_speed := 1 ;
26150: LD_ADDR_OWVAR 65
26154: PUSH
26155: LD_INT 1
26157: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26158: LD_INT 35
26160: PPUSH
26161: CALL_OW 67
// p := p + 1 ;
26165: LD_ADDR_VAR 0 1
26169: PUSH
26170: LD_VAR 0 1
26174: PUSH
26175: LD_INT 1
26177: PLUS
26178: ST_TO_ADDR
// until p >= 60 ;
26179: LD_VAR 0 1
26183: PUSH
26184: LD_INT 60
26186: GREATEREQUAL
26187: IFFALSE 26150
// game_speed := 4 ;
26189: LD_ADDR_OWVAR 65
26193: PUSH
26194: LD_INT 4
26196: ST_TO_ADDR
// end ;
26197: PPOPN 1
26199: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26200: LD_EXP 66
26204: PUSH
26205: LD_EXP 93
26209: AND
26210: IFFALSE 26356
26212: GO 26214
26214: DISABLE
26215: LD_INT 0
26217: PPUSH
26218: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26219: LD_ADDR_VAR 0 1
26223: PUSH
26224: LD_INT 22
26226: PUSH
26227: LD_OWVAR 2
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 30
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 30
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PPUSH
26268: CALL_OW 69
26272: ST_TO_ADDR
// if not depot then
26273: LD_VAR 0 1
26277: NOT
26278: IFFALSE 26282
// exit ;
26280: GO 26356
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26282: LD_ADDR_VAR 0 2
26286: PUSH
26287: LD_VAR 0 1
26291: PUSH
26292: LD_INT 1
26294: PPUSH
26295: LD_VAR 0 1
26299: PPUSH
26300: CALL_OW 12
26304: ARRAY
26305: PPUSH
26306: CALL_OW 274
26310: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26311: LD_VAR 0 2
26315: PPUSH
26316: LD_INT 1
26318: PPUSH
26319: LD_INT 0
26321: PPUSH
26322: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26326: LD_VAR 0 2
26330: PPUSH
26331: LD_INT 2
26333: PPUSH
26334: LD_INT 0
26336: PPUSH
26337: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26341: LD_VAR 0 2
26345: PPUSH
26346: LD_INT 3
26348: PPUSH
26349: LD_INT 0
26351: PPUSH
26352: CALL_OW 277
// end ;
26356: PPOPN 2
26358: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26359: LD_EXP 66
26363: PUSH
26364: LD_EXP 94
26368: AND
26369: IFFALSE 26466
26371: GO 26373
26373: DISABLE
26374: LD_INT 0
26376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26377: LD_ADDR_VAR 0 1
26381: PUSH
26382: LD_INT 22
26384: PUSH
26385: LD_OWVAR 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 21
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 3
26406: PUSH
26407: LD_INT 23
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: PPUSH
26426: CALL_OW 69
26430: ST_TO_ADDR
// if not tmp then
26431: LD_VAR 0 1
26435: NOT
26436: IFFALSE 26440
// exit ;
26438: GO 26466
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26440: LD_VAR 0 1
26444: PUSH
26445: LD_INT 1
26447: PPUSH
26448: LD_VAR 0 1
26452: PPUSH
26453: CALL_OW 12
26457: ARRAY
26458: PPUSH
26459: LD_INT 200
26461: PPUSH
26462: CALL_OW 234
// end ;
26466: PPOPN 1
26468: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26469: LD_EXP 66
26473: PUSH
26474: LD_EXP 95
26478: AND
26479: IFFALSE 26558
26481: GO 26483
26483: DISABLE
26484: LD_INT 0
26486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26487: LD_ADDR_VAR 0 1
26491: PUSH
26492: LD_INT 22
26494: PUSH
26495: LD_OWVAR 2
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 21
26506: PUSH
26507: LD_INT 2
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PPUSH
26518: CALL_OW 69
26522: ST_TO_ADDR
// if not tmp then
26523: LD_VAR 0 1
26527: NOT
26528: IFFALSE 26532
// exit ;
26530: GO 26558
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26532: LD_VAR 0 1
26536: PUSH
26537: LD_INT 1
26539: PPUSH
26540: LD_VAR 0 1
26544: PPUSH
26545: CALL_OW 12
26549: ARRAY
26550: PPUSH
26551: LD_INT 60
26553: PPUSH
26554: CALL_OW 234
// end ;
26558: PPOPN 1
26560: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26561: LD_EXP 66
26565: PUSH
26566: LD_EXP 96
26570: AND
26571: IFFALSE 26670
26573: GO 26575
26575: DISABLE
26576: LD_INT 0
26578: PPUSH
26579: PPUSH
// begin enable ;
26580: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26581: LD_ADDR_VAR 0 1
26585: PUSH
26586: LD_INT 22
26588: PUSH
26589: LD_OWVAR 2
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 61
26600: PUSH
26601: EMPTY
26602: LIST
26603: PUSH
26604: LD_INT 33
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: PPUSH
26619: CALL_OW 69
26623: ST_TO_ADDR
// if not tmp then
26624: LD_VAR 0 1
26628: NOT
26629: IFFALSE 26633
// exit ;
26631: GO 26670
// for i in tmp do
26633: LD_ADDR_VAR 0 2
26637: PUSH
26638: LD_VAR 0 1
26642: PUSH
26643: FOR_IN
26644: IFFALSE 26668
// if IsControledBy ( i ) then
26646: LD_VAR 0 2
26650: PPUSH
26651: CALL_OW 312
26655: IFFALSE 26666
// ComUnlink ( i ) ;
26657: LD_VAR 0 2
26661: PPUSH
26662: CALL_OW 136
26666: GO 26643
26668: POP
26669: POP
// end ;
26670: PPOPN 2
26672: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26673: LD_EXP 66
26677: PUSH
26678: LD_EXP 97
26682: AND
26683: IFFALSE 26823
26685: GO 26687
26687: DISABLE
26688: LD_INT 0
26690: PPUSH
26691: PPUSH
// begin ToLua ( displayPowell(); ) ;
26692: LD_STRING displayPowell();
26694: PPUSH
26695: CALL_OW 559
// uc_side := 0 ;
26699: LD_ADDR_OWVAR 20
26703: PUSH
26704: LD_INT 0
26706: ST_TO_ADDR
// uc_nation := 2 ;
26707: LD_ADDR_OWVAR 21
26711: PUSH
26712: LD_INT 2
26714: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26715: LD_ADDR_OWVAR 37
26719: PUSH
26720: LD_INT 14
26722: ST_TO_ADDR
// vc_engine := engine_siberite ;
26723: LD_ADDR_OWVAR 39
26727: PUSH
26728: LD_INT 3
26730: ST_TO_ADDR
// vc_control := control_apeman ;
26731: LD_ADDR_OWVAR 38
26735: PUSH
26736: LD_INT 5
26738: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26739: LD_ADDR_OWVAR 40
26743: PUSH
26744: LD_INT 29
26746: ST_TO_ADDR
// un := CreateVehicle ;
26747: LD_ADDR_VAR 0 2
26751: PUSH
26752: CALL_OW 45
26756: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26757: LD_VAR 0 2
26761: PPUSH
26762: LD_INT 1
26764: PPUSH
26765: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26769: LD_INT 35
26771: PPUSH
26772: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26776: LD_VAR 0 2
26780: PPUSH
26781: LD_INT 22
26783: PUSH
26784: LD_OWVAR 2
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PPUSH
26793: CALL_OW 69
26797: PPUSH
26798: LD_VAR 0 2
26802: PPUSH
26803: CALL_OW 74
26807: PPUSH
26808: CALL_OW 115
// until IsDead ( un ) ;
26812: LD_VAR 0 2
26816: PPUSH
26817: CALL_OW 301
26821: IFFALSE 26769
// end ;
26823: PPOPN 2
26825: END
// every 0 0$1 trigger StreamModeActive and sStu do
26826: LD_EXP 66
26830: PUSH
26831: LD_EXP 105
26835: AND
26836: IFFALSE 26852
26838: GO 26840
26840: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26841: LD_STRING displayStucuk();
26843: PPUSH
26844: CALL_OW 559
// ResetFog ;
26848: CALL_OW 335
// end ;
26852: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26853: LD_EXP 66
26857: PUSH
26858: LD_EXP 98
26862: AND
26863: IFFALSE 27004
26865: GO 26867
26867: DISABLE
26868: LD_INT 0
26870: PPUSH
26871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26872: LD_ADDR_VAR 0 2
26876: PUSH
26877: LD_INT 22
26879: PUSH
26880: LD_OWVAR 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 21
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PPUSH
26903: CALL_OW 69
26907: ST_TO_ADDR
// if not tmp then
26908: LD_VAR 0 2
26912: NOT
26913: IFFALSE 26917
// exit ;
26915: GO 27004
// un := tmp [ rand ( 1 , tmp ) ] ;
26917: LD_ADDR_VAR 0 1
26921: PUSH
26922: LD_VAR 0 2
26926: PUSH
26927: LD_INT 1
26929: PPUSH
26930: LD_VAR 0 2
26934: PPUSH
26935: CALL_OW 12
26939: ARRAY
26940: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26941: LD_VAR 0 1
26945: PPUSH
26946: LD_INT 0
26948: PPUSH
26949: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26953: LD_VAR 0 1
26957: PPUSH
26958: LD_OWVAR 3
26962: PUSH
26963: LD_VAR 0 1
26967: DIFF
26968: PPUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL_OW 74
26978: PPUSH
26979: CALL_OW 115
// wait ( 0 0$20 ) ;
26983: LD_INT 700
26985: PPUSH
26986: CALL_OW 67
// SetSide ( un , your_side ) ;
26990: LD_VAR 0 1
26994: PPUSH
26995: LD_OWVAR 2
26999: PPUSH
27000: CALL_OW 235
// end ;
27004: PPOPN 2
27006: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27007: LD_EXP 66
27011: PUSH
27012: LD_EXP 99
27016: AND
27017: IFFALSE 27123
27019: GO 27021
27021: DISABLE
27022: LD_INT 0
27024: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27025: LD_ADDR_VAR 0 1
27029: PUSH
27030: LD_INT 22
27032: PUSH
27033: LD_OWVAR 2
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 2
27044: PUSH
27045: LD_INT 30
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 30
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PPUSH
27074: CALL_OW 69
27078: ST_TO_ADDR
// if not depot then
27079: LD_VAR 0 1
27083: NOT
27084: IFFALSE 27088
// exit ;
27086: GO 27123
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27088: LD_VAR 0 1
27092: PUSH
27093: LD_INT 1
27095: ARRAY
27096: PPUSH
27097: CALL_OW 250
27101: PPUSH
27102: LD_VAR 0 1
27106: PUSH
27107: LD_INT 1
27109: ARRAY
27110: PPUSH
27111: CALL_OW 251
27115: PPUSH
27116: LD_INT 70
27118: PPUSH
27119: CALL_OW 495
// end ;
27123: PPOPN 1
27125: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27126: LD_EXP 66
27130: PUSH
27131: LD_EXP 100
27135: AND
27136: IFFALSE 27347
27138: GO 27140
27140: DISABLE
27141: LD_INT 0
27143: PPUSH
27144: PPUSH
27145: PPUSH
27146: PPUSH
27147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27148: LD_ADDR_VAR 0 5
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_OWVAR 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 21
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PPUSH
27179: CALL_OW 69
27183: ST_TO_ADDR
// if not tmp then
27184: LD_VAR 0 5
27188: NOT
27189: IFFALSE 27193
// exit ;
27191: GO 27347
// for i in tmp do
27193: LD_ADDR_VAR 0 1
27197: PUSH
27198: LD_VAR 0 5
27202: PUSH
27203: FOR_IN
27204: IFFALSE 27345
// begin d := rand ( 0 , 5 ) ;
27206: LD_ADDR_VAR 0 4
27210: PUSH
27211: LD_INT 0
27213: PPUSH
27214: LD_INT 5
27216: PPUSH
27217: CALL_OW 12
27221: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27222: LD_ADDR_VAR 0 2
27226: PUSH
27227: LD_VAR 0 1
27231: PPUSH
27232: CALL_OW 250
27236: PPUSH
27237: LD_VAR 0 4
27241: PPUSH
27242: LD_INT 3
27244: PPUSH
27245: LD_INT 12
27247: PPUSH
27248: CALL_OW 12
27252: PPUSH
27253: CALL_OW 272
27257: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27258: LD_ADDR_VAR 0 3
27262: PUSH
27263: LD_VAR 0 1
27267: PPUSH
27268: CALL_OW 251
27272: PPUSH
27273: LD_VAR 0 4
27277: PPUSH
27278: LD_INT 3
27280: PPUSH
27281: LD_INT 12
27283: PPUSH
27284: CALL_OW 12
27288: PPUSH
27289: CALL_OW 273
27293: ST_TO_ADDR
// if ValidHex ( x , y ) then
27294: LD_VAR 0 2
27298: PPUSH
27299: LD_VAR 0 3
27303: PPUSH
27304: CALL_OW 488
27308: IFFALSE 27343
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27310: LD_VAR 0 1
27314: PPUSH
27315: LD_VAR 0 2
27319: PPUSH
27320: LD_VAR 0 3
27324: PPUSH
27325: LD_INT 3
27327: PPUSH
27328: LD_INT 6
27330: PPUSH
27331: CALL_OW 12
27335: PPUSH
27336: LD_INT 1
27338: PPUSH
27339: CALL_OW 483
// end ;
27343: GO 27203
27345: POP
27346: POP
// end ;
27347: PPOPN 5
27349: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27350: LD_EXP 66
27354: PUSH
27355: LD_EXP 101
27359: AND
27360: IFFALSE 27454
27362: GO 27364
27364: DISABLE
27365: LD_INT 0
27367: PPUSH
27368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27369: LD_ADDR_VAR 0 2
27373: PUSH
27374: LD_INT 22
27376: PUSH
27377: LD_OWVAR 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 32
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 21
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: PPUSH
27411: CALL_OW 69
27415: ST_TO_ADDR
// if not tmp then
27416: LD_VAR 0 2
27420: NOT
27421: IFFALSE 27425
// exit ;
27423: GO 27454
// for i in tmp do
27425: LD_ADDR_VAR 0 1
27429: PUSH
27430: LD_VAR 0 2
27434: PUSH
27435: FOR_IN
27436: IFFALSE 27452
// SetFuel ( i , 0 ) ;
27438: LD_VAR 0 1
27442: PPUSH
27443: LD_INT 0
27445: PPUSH
27446: CALL_OW 240
27450: GO 27435
27452: POP
27453: POP
// end ;
27454: PPOPN 2
27456: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27457: LD_EXP 66
27461: PUSH
27462: LD_EXP 102
27466: AND
27467: IFFALSE 27533
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27475: LD_ADDR_VAR 0 1
27479: PUSH
27480: LD_INT 22
27482: PUSH
27483: LD_OWVAR 2
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 30
27494: PUSH
27495: LD_INT 29
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PPUSH
27506: CALL_OW 69
27510: ST_TO_ADDR
// if not tmp then
27511: LD_VAR 0 1
27515: NOT
27516: IFFALSE 27520
// exit ;
27518: GO 27533
// DestroyUnit ( tmp [ 1 ] ) ;
27520: LD_VAR 0 1
27524: PUSH
27525: LD_INT 1
27527: ARRAY
27528: PPUSH
27529: CALL_OW 65
// end ;
27533: PPOPN 1
27535: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27536: LD_EXP 66
27540: PUSH
27541: LD_EXP 104
27545: AND
27546: IFFALSE 27675
27548: GO 27550
27550: DISABLE
27551: LD_INT 0
27553: PPUSH
// begin uc_side := 0 ;
27554: LD_ADDR_OWVAR 20
27558: PUSH
27559: LD_INT 0
27561: ST_TO_ADDR
// uc_nation := nation_arabian ;
27562: LD_ADDR_OWVAR 21
27566: PUSH
27567: LD_INT 2
27569: ST_TO_ADDR
// hc_gallery :=  ;
27570: LD_ADDR_OWVAR 33
27574: PUSH
27575: LD_STRING 
27577: ST_TO_ADDR
// hc_name :=  ;
27578: LD_ADDR_OWVAR 26
27582: PUSH
27583: LD_STRING 
27585: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27586: LD_INT 1
27588: PPUSH
27589: LD_INT 11
27591: PPUSH
27592: LD_INT 10
27594: PPUSH
27595: CALL_OW 380
// un := CreateHuman ;
27599: LD_ADDR_VAR 0 1
27603: PUSH
27604: CALL_OW 44
27608: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27609: LD_VAR 0 1
27613: PPUSH
27614: LD_INT 1
27616: PPUSH
27617: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27621: LD_INT 35
27623: PPUSH
27624: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27628: LD_VAR 0 1
27632: PPUSH
27633: LD_INT 22
27635: PUSH
27636: LD_OWVAR 2
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PPUSH
27645: CALL_OW 69
27649: PPUSH
27650: LD_VAR 0 1
27654: PPUSH
27655: CALL_OW 74
27659: PPUSH
27660: CALL_OW 115
// until IsDead ( un ) ;
27664: LD_VAR 0 1
27668: PPUSH
27669: CALL_OW 301
27673: IFFALSE 27621
// end ;
27675: PPOPN 1
27677: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27678: LD_EXP 66
27682: PUSH
27683: LD_EXP 106
27687: AND
27688: IFFALSE 27700
27690: GO 27692
27692: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27693: LD_STRING earthquake(getX(game), 0, 32)
27695: PPUSH
27696: CALL_OW 559
27700: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27701: LD_EXP 66
27705: PUSH
27706: LD_EXP 107
27710: AND
27711: IFFALSE 27802
27713: GO 27715
27715: DISABLE
27716: LD_INT 0
27718: PPUSH
// begin enable ;
27719: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27720: LD_ADDR_VAR 0 1
27724: PUSH
27725: LD_INT 22
27727: PUSH
27728: LD_OWVAR 2
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 21
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 33
27749: PUSH
27750: LD_INT 3
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: PPUSH
27762: CALL_OW 69
27766: ST_TO_ADDR
// if not tmp then
27767: LD_VAR 0 1
27771: NOT
27772: IFFALSE 27776
// exit ;
27774: GO 27802
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27776: LD_VAR 0 1
27780: PUSH
27781: LD_INT 1
27783: PPUSH
27784: LD_VAR 0 1
27788: PPUSH
27789: CALL_OW 12
27793: ARRAY
27794: PPUSH
27795: LD_INT 1
27797: PPUSH
27798: CALL_OW 234
// end ;
27802: PPOPN 1
27804: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27805: LD_EXP 66
27809: PUSH
27810: LD_EXP 108
27814: AND
27815: IFFALSE 27956
27817: GO 27819
27819: DISABLE
27820: LD_INT 0
27822: PPUSH
27823: PPUSH
27824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27825: LD_ADDR_VAR 0 3
27829: PUSH
27830: LD_INT 22
27832: PUSH
27833: LD_OWVAR 2
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 25
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PPUSH
27856: CALL_OW 69
27860: ST_TO_ADDR
// if not tmp then
27861: LD_VAR 0 3
27865: NOT
27866: IFFALSE 27870
// exit ;
27868: GO 27956
// un := tmp [ rand ( 1 , tmp ) ] ;
27870: LD_ADDR_VAR 0 2
27874: PUSH
27875: LD_VAR 0 3
27879: PUSH
27880: LD_INT 1
27882: PPUSH
27883: LD_VAR 0 3
27887: PPUSH
27888: CALL_OW 12
27892: ARRAY
27893: ST_TO_ADDR
// if Crawls ( un ) then
27894: LD_VAR 0 2
27898: PPUSH
27899: CALL_OW 318
27903: IFFALSE 27914
// ComWalk ( un ) ;
27905: LD_VAR 0 2
27909: PPUSH
27910: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27914: LD_VAR 0 2
27918: PPUSH
27919: LD_INT 9
27921: PPUSH
27922: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27926: LD_INT 28
27928: PPUSH
27929: LD_OWVAR 2
27933: PPUSH
27934: LD_INT 2
27936: PPUSH
27937: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27941: LD_INT 29
27943: PPUSH
27944: LD_OWVAR 2
27948: PPUSH
27949: LD_INT 2
27951: PPUSH
27952: CALL_OW 322
// end ;
27956: PPOPN 3
27958: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27959: LD_EXP 66
27963: PUSH
27964: LD_EXP 109
27968: AND
27969: IFFALSE 28080
27971: GO 27973
27973: DISABLE
27974: LD_INT 0
27976: PPUSH
27977: PPUSH
27978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27979: LD_ADDR_VAR 0 3
27983: PUSH
27984: LD_INT 22
27986: PUSH
27987: LD_OWVAR 2
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 25
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PPUSH
28010: CALL_OW 69
28014: ST_TO_ADDR
// if not tmp then
28015: LD_VAR 0 3
28019: NOT
28020: IFFALSE 28024
// exit ;
28022: GO 28080
// un := tmp [ rand ( 1 , tmp ) ] ;
28024: LD_ADDR_VAR 0 2
28028: PUSH
28029: LD_VAR 0 3
28033: PUSH
28034: LD_INT 1
28036: PPUSH
28037: LD_VAR 0 3
28041: PPUSH
28042: CALL_OW 12
28046: ARRAY
28047: ST_TO_ADDR
// if Crawls ( un ) then
28048: LD_VAR 0 2
28052: PPUSH
28053: CALL_OW 318
28057: IFFALSE 28068
// ComWalk ( un ) ;
28059: LD_VAR 0 2
28063: PPUSH
28064: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28068: LD_VAR 0 2
28072: PPUSH
28073: LD_INT 8
28075: PPUSH
28076: CALL_OW 336
// end ;
28080: PPOPN 3
28082: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28083: LD_EXP 66
28087: PUSH
28088: LD_EXP 110
28092: AND
28093: IFFALSE 28237
28095: GO 28097
28097: DISABLE
28098: LD_INT 0
28100: PPUSH
28101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28102: LD_ADDR_VAR 0 2
28106: PUSH
28107: LD_INT 22
28109: PUSH
28110: LD_OWVAR 2
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 21
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: LD_INT 34
28134: PUSH
28135: LD_INT 12
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 34
28144: PUSH
28145: LD_INT 51
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 34
28154: PUSH
28155: LD_INT 32
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: PPUSH
28173: CALL_OW 69
28177: ST_TO_ADDR
// if not tmp then
28178: LD_VAR 0 2
28182: NOT
28183: IFFALSE 28187
// exit ;
28185: GO 28237
// for i in tmp do
28187: LD_ADDR_VAR 0 1
28191: PUSH
28192: LD_VAR 0 2
28196: PUSH
28197: FOR_IN
28198: IFFALSE 28235
// if GetCargo ( i , mat_artifact ) = 0 then
28200: LD_VAR 0 1
28204: PPUSH
28205: LD_INT 4
28207: PPUSH
28208: CALL_OW 289
28212: PUSH
28213: LD_INT 0
28215: EQUAL
28216: IFFALSE 28233
// SetCargo ( i , mat_siberit , 100 ) ;
28218: LD_VAR 0 1
28222: PPUSH
28223: LD_INT 3
28225: PPUSH
28226: LD_INT 100
28228: PPUSH
28229: CALL_OW 290
28233: GO 28197
28235: POP
28236: POP
// end ;
28237: PPOPN 2
28239: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28240: LD_EXP 66
28244: PUSH
28245: LD_EXP 111
28249: AND
28250: IFFALSE 28433
28252: GO 28254
28254: DISABLE
28255: LD_INT 0
28257: PPUSH
28258: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28259: LD_ADDR_VAR 0 2
28263: PUSH
28264: LD_INT 22
28266: PUSH
28267: LD_OWVAR 2
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PPUSH
28276: CALL_OW 69
28280: ST_TO_ADDR
// if not tmp then
28281: LD_VAR 0 2
28285: NOT
28286: IFFALSE 28290
// exit ;
28288: GO 28433
// for i := 1 to 2 do
28290: LD_ADDR_VAR 0 1
28294: PUSH
28295: DOUBLE
28296: LD_INT 1
28298: DEC
28299: ST_TO_ADDR
28300: LD_INT 2
28302: PUSH
28303: FOR_TO
28304: IFFALSE 28431
// begin uc_side := your_side ;
28306: LD_ADDR_OWVAR 20
28310: PUSH
28311: LD_OWVAR 2
28315: ST_TO_ADDR
// uc_nation := nation_american ;
28316: LD_ADDR_OWVAR 21
28320: PUSH
28321: LD_INT 1
28323: ST_TO_ADDR
// vc_chassis := us_morphling ;
28324: LD_ADDR_OWVAR 37
28328: PUSH
28329: LD_INT 5
28331: ST_TO_ADDR
// vc_engine := engine_siberite ;
28332: LD_ADDR_OWVAR 39
28336: PUSH
28337: LD_INT 3
28339: ST_TO_ADDR
// vc_control := control_computer ;
28340: LD_ADDR_OWVAR 38
28344: PUSH
28345: LD_INT 3
28347: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28348: LD_ADDR_OWVAR 40
28352: PUSH
28353: LD_INT 10
28355: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28356: LD_VAR 0 2
28360: PUSH
28361: LD_INT 1
28363: ARRAY
28364: PPUSH
28365: CALL_OW 310
28369: NOT
28370: IFFALSE 28417
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28372: CALL_OW 45
28376: PPUSH
28377: LD_VAR 0 2
28381: PUSH
28382: LD_INT 1
28384: ARRAY
28385: PPUSH
28386: CALL_OW 250
28390: PPUSH
28391: LD_VAR 0 2
28395: PUSH
28396: LD_INT 1
28398: ARRAY
28399: PPUSH
28400: CALL_OW 251
28404: PPUSH
28405: LD_INT 12
28407: PPUSH
28408: LD_INT 1
28410: PPUSH
28411: CALL_OW 50
28415: GO 28429
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28417: CALL_OW 45
28421: PPUSH
28422: LD_INT 1
28424: PPUSH
28425: CALL_OW 51
// end ;
28429: GO 28303
28431: POP
28432: POP
// end ;
28433: PPOPN 2
28435: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28436: LD_EXP 66
28440: PUSH
28441: LD_EXP 112
28445: AND
28446: IFFALSE 28668
28448: GO 28450
28450: DISABLE
28451: LD_INT 0
28453: PPUSH
28454: PPUSH
28455: PPUSH
28456: PPUSH
28457: PPUSH
28458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28459: LD_ADDR_VAR 0 6
28463: PUSH
28464: LD_INT 22
28466: PUSH
28467: LD_OWVAR 2
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 21
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 3
28488: PUSH
28489: LD_INT 23
28491: PUSH
28492: LD_INT 0
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: PPUSH
28508: CALL_OW 69
28512: ST_TO_ADDR
// if not tmp then
28513: LD_VAR 0 6
28517: NOT
28518: IFFALSE 28522
// exit ;
28520: GO 28668
// s1 := rand ( 1 , 4 ) ;
28522: LD_ADDR_VAR 0 2
28526: PUSH
28527: LD_INT 1
28529: PPUSH
28530: LD_INT 4
28532: PPUSH
28533: CALL_OW 12
28537: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28538: LD_ADDR_VAR 0 4
28542: PUSH
28543: LD_VAR 0 6
28547: PUSH
28548: LD_INT 1
28550: ARRAY
28551: PPUSH
28552: LD_VAR 0 2
28556: PPUSH
28557: CALL_OW 259
28561: ST_TO_ADDR
// if s1 = 1 then
28562: LD_VAR 0 2
28566: PUSH
28567: LD_INT 1
28569: EQUAL
28570: IFFALSE 28590
// s2 := rand ( 2 , 4 ) else
28572: LD_ADDR_VAR 0 3
28576: PUSH
28577: LD_INT 2
28579: PPUSH
28580: LD_INT 4
28582: PPUSH
28583: CALL_OW 12
28587: ST_TO_ADDR
28588: GO 28598
// s2 := 1 ;
28590: LD_ADDR_VAR 0 3
28594: PUSH
28595: LD_INT 1
28597: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28598: LD_ADDR_VAR 0 5
28602: PUSH
28603: LD_VAR 0 6
28607: PUSH
28608: LD_INT 1
28610: ARRAY
28611: PPUSH
28612: LD_VAR 0 3
28616: PPUSH
28617: CALL_OW 259
28621: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28622: LD_VAR 0 6
28626: PUSH
28627: LD_INT 1
28629: ARRAY
28630: PPUSH
28631: LD_VAR 0 2
28635: PPUSH
28636: LD_VAR 0 5
28640: PPUSH
28641: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28645: LD_VAR 0 6
28649: PUSH
28650: LD_INT 1
28652: ARRAY
28653: PPUSH
28654: LD_VAR 0 3
28658: PPUSH
28659: LD_VAR 0 4
28663: PPUSH
28664: CALL_OW 237
// end ;
28668: PPOPN 6
28670: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28671: LD_EXP 66
28675: PUSH
28676: LD_EXP 113
28680: AND
28681: IFFALSE 28760
28683: GO 28685
28685: DISABLE
28686: LD_INT 0
28688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28689: LD_ADDR_VAR 0 1
28693: PUSH
28694: LD_INT 22
28696: PUSH
28697: LD_OWVAR 2
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 30
28708: PUSH
28709: LD_INT 3
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PPUSH
28720: CALL_OW 69
28724: ST_TO_ADDR
// if not tmp then
28725: LD_VAR 0 1
28729: NOT
28730: IFFALSE 28734
// exit ;
28732: GO 28760
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28734: LD_VAR 0 1
28738: PUSH
28739: LD_INT 1
28741: PPUSH
28742: LD_VAR 0 1
28746: PPUSH
28747: CALL_OW 12
28751: ARRAY
28752: PPUSH
28753: LD_INT 1
28755: PPUSH
28756: CALL_OW 234
// end ;
28760: PPOPN 1
28762: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28763: LD_EXP 66
28767: PUSH
28768: LD_EXP 114
28772: AND
28773: IFFALSE 28885
28775: GO 28777
28777: DISABLE
28778: LD_INT 0
28780: PPUSH
28781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28782: LD_ADDR_VAR 0 2
28786: PUSH
28787: LD_INT 22
28789: PUSH
28790: LD_OWVAR 2
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: PUSH
28802: LD_INT 30
28804: PUSH
28805: LD_INT 27
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 30
28814: PUSH
28815: LD_INT 26
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 30
28824: PUSH
28825: LD_INT 28
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PPUSH
28842: CALL_OW 69
28846: ST_TO_ADDR
// if not tmp then
28847: LD_VAR 0 2
28851: NOT
28852: IFFALSE 28856
// exit ;
28854: GO 28885
// for i in tmp do
28856: LD_ADDR_VAR 0 1
28860: PUSH
28861: LD_VAR 0 2
28865: PUSH
28866: FOR_IN
28867: IFFALSE 28883
// SetLives ( i , 1 ) ;
28869: LD_VAR 0 1
28873: PPUSH
28874: LD_INT 1
28876: PPUSH
28877: CALL_OW 234
28881: GO 28866
28883: POP
28884: POP
// end ;
28885: PPOPN 2
28887: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28888: LD_EXP 66
28892: PUSH
28893: LD_EXP 115
28897: AND
28898: IFFALSE 29172
28900: GO 28902
28902: DISABLE
28903: LD_INT 0
28905: PPUSH
28906: PPUSH
28907: PPUSH
// begin i := rand ( 1 , 7 ) ;
28908: LD_ADDR_VAR 0 1
28912: PUSH
28913: LD_INT 1
28915: PPUSH
28916: LD_INT 7
28918: PPUSH
28919: CALL_OW 12
28923: ST_TO_ADDR
// case i of 1 :
28924: LD_VAR 0 1
28928: PUSH
28929: LD_INT 1
28931: DOUBLE
28932: EQUAL
28933: IFTRUE 28937
28935: GO 28947
28937: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28938: LD_STRING earthquake(getX(game), 0, 32)
28940: PPUSH
28941: CALL_OW 559
28945: GO 29172
28947: LD_INT 2
28949: DOUBLE
28950: EQUAL
28951: IFTRUE 28955
28953: GO 28969
28955: POP
// begin ToLua ( displayStucuk(); ) ;
28956: LD_STRING displayStucuk();
28958: PPUSH
28959: CALL_OW 559
// ResetFog ;
28963: CALL_OW 335
// end ; 3 :
28967: GO 29172
28969: LD_INT 3
28971: DOUBLE
28972: EQUAL
28973: IFTRUE 28977
28975: GO 29081
28977: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28978: LD_ADDR_VAR 0 2
28982: PUSH
28983: LD_INT 22
28985: PUSH
28986: LD_OWVAR 2
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 25
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PPUSH
29009: CALL_OW 69
29013: ST_TO_ADDR
// if not tmp then
29014: LD_VAR 0 2
29018: NOT
29019: IFFALSE 29023
// exit ;
29021: GO 29172
// un := tmp [ rand ( 1 , tmp ) ] ;
29023: LD_ADDR_VAR 0 3
29027: PUSH
29028: LD_VAR 0 2
29032: PUSH
29033: LD_INT 1
29035: PPUSH
29036: LD_VAR 0 2
29040: PPUSH
29041: CALL_OW 12
29045: ARRAY
29046: ST_TO_ADDR
// if Crawls ( un ) then
29047: LD_VAR 0 3
29051: PPUSH
29052: CALL_OW 318
29056: IFFALSE 29067
// ComWalk ( un ) ;
29058: LD_VAR 0 3
29062: PPUSH
29063: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29067: LD_VAR 0 3
29071: PPUSH
29072: LD_INT 8
29074: PPUSH
29075: CALL_OW 336
// end ; 4 :
29079: GO 29172
29081: LD_INT 4
29083: DOUBLE
29084: EQUAL
29085: IFTRUE 29089
29087: GO 29150
29089: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29090: LD_ADDR_VAR 0 2
29094: PUSH
29095: LD_INT 22
29097: PUSH
29098: LD_OWVAR 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 30
29109: PUSH
29110: LD_INT 29
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PPUSH
29121: CALL_OW 69
29125: ST_TO_ADDR
// if not tmp then
29126: LD_VAR 0 2
29130: NOT
29131: IFFALSE 29135
// exit ;
29133: GO 29172
// DestroyUnit ( tmp [ 1 ] ) ;
29135: LD_VAR 0 2
29139: PUSH
29140: LD_INT 1
29142: ARRAY
29143: PPUSH
29144: CALL_OW 65
// end ; 5 .. 7 :
29148: GO 29172
29150: LD_INT 5
29152: DOUBLE
29153: GREATEREQUAL
29154: IFFALSE 29162
29156: LD_INT 7
29158: DOUBLE
29159: LESSEQUAL
29160: IFTRUE 29164
29162: GO 29171
29164: POP
// StreamSibBomb ; end ;
29165: CALL 25422 0 0
29169: GO 29172
29171: POP
// end ;
29172: PPOPN 3
29174: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29175: LD_EXP 66
29179: PUSH
29180: LD_EXP 116
29184: AND
29185: IFFALSE 29341
29187: GO 29189
29189: DISABLE
29190: LD_INT 0
29192: PPUSH
29193: PPUSH
29194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29195: LD_ADDR_VAR 0 2
29199: PUSH
29200: LD_INT 81
29202: PUSH
29203: LD_OWVAR 2
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 2
29214: PUSH
29215: LD_INT 21
29217: PUSH
29218: LD_INT 1
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 21
29227: PUSH
29228: LD_INT 2
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: LIST
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 69
29248: ST_TO_ADDR
// if not tmp then
29249: LD_VAR 0 2
29253: NOT
29254: IFFALSE 29258
// exit ;
29256: GO 29341
// p := 0 ;
29258: LD_ADDR_VAR 0 3
29262: PUSH
29263: LD_INT 0
29265: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29266: LD_INT 35
29268: PPUSH
29269: CALL_OW 67
// p := p + 1 ;
29273: LD_ADDR_VAR 0 3
29277: PUSH
29278: LD_VAR 0 3
29282: PUSH
29283: LD_INT 1
29285: PLUS
29286: ST_TO_ADDR
// for i in tmp do
29287: LD_ADDR_VAR 0 1
29291: PUSH
29292: LD_VAR 0 2
29296: PUSH
29297: FOR_IN
29298: IFFALSE 29329
// if GetLives ( i ) < 1000 then
29300: LD_VAR 0 1
29304: PPUSH
29305: CALL_OW 256
29309: PUSH
29310: LD_INT 1000
29312: LESS
29313: IFFALSE 29327
// SetLives ( i , 1000 ) ;
29315: LD_VAR 0 1
29319: PPUSH
29320: LD_INT 1000
29322: PPUSH
29323: CALL_OW 234
29327: GO 29297
29329: POP
29330: POP
// until p > 20 ;
29331: LD_VAR 0 3
29335: PUSH
29336: LD_INT 20
29338: GREATER
29339: IFFALSE 29266
// end ;
29341: PPOPN 3
29343: END
// every 0 0$1 trigger StreamModeActive and sTime do
29344: LD_EXP 66
29348: PUSH
29349: LD_EXP 117
29353: AND
29354: IFFALSE 29389
29356: GO 29358
29358: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29359: LD_INT 28
29361: PPUSH
29362: LD_OWVAR 2
29366: PPUSH
29367: LD_INT 2
29369: PPUSH
29370: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29374: LD_INT 30
29376: PPUSH
29377: LD_OWVAR 2
29381: PPUSH
29382: LD_INT 2
29384: PPUSH
29385: CALL_OW 322
// end ;
29389: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29390: LD_EXP 66
29394: PUSH
29395: LD_EXP 118
29399: AND
29400: IFFALSE 29521
29402: GO 29404
29404: DISABLE
29405: LD_INT 0
29407: PPUSH
29408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29409: LD_ADDR_VAR 0 2
29413: PUSH
29414: LD_INT 22
29416: PUSH
29417: LD_OWVAR 2
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 21
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: LD_INT 23
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: PPUSH
29458: CALL_OW 69
29462: ST_TO_ADDR
// if not tmp then
29463: LD_VAR 0 2
29467: NOT
29468: IFFALSE 29472
// exit ;
29470: GO 29521
// for i in tmp do
29472: LD_ADDR_VAR 0 1
29476: PUSH
29477: LD_VAR 0 2
29481: PUSH
29482: FOR_IN
29483: IFFALSE 29519
// begin if Crawls ( i ) then
29485: LD_VAR 0 1
29489: PPUSH
29490: CALL_OW 318
29494: IFFALSE 29505
// ComWalk ( i ) ;
29496: LD_VAR 0 1
29500: PPUSH
29501: CALL_OW 138
// SetClass ( i , 2 ) ;
29505: LD_VAR 0 1
29509: PPUSH
29510: LD_INT 2
29512: PPUSH
29513: CALL_OW 336
// end ;
29517: GO 29482
29519: POP
29520: POP
// end ;
29521: PPOPN 2
29523: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29524: LD_EXP 66
29528: PUSH
29529: LD_EXP 119
29533: AND
29534: IFFALSE 29815
29536: GO 29538
29538: DISABLE
29539: LD_INT 0
29541: PPUSH
29542: PPUSH
29543: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29544: LD_OWVAR 2
29548: PPUSH
29549: LD_INT 9
29551: PPUSH
29552: LD_INT 1
29554: PPUSH
29555: LD_INT 1
29557: PPUSH
29558: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29562: LD_INT 9
29564: PPUSH
29565: LD_OWVAR 2
29569: PPUSH
29570: CALL_OW 343
// uc_side := 9 ;
29574: LD_ADDR_OWVAR 20
29578: PUSH
29579: LD_INT 9
29581: ST_TO_ADDR
// uc_nation := 2 ;
29582: LD_ADDR_OWVAR 21
29586: PUSH
29587: LD_INT 2
29589: ST_TO_ADDR
// hc_name := Dark Warrior ;
29590: LD_ADDR_OWVAR 26
29594: PUSH
29595: LD_STRING Dark Warrior
29597: ST_TO_ADDR
// hc_gallery :=  ;
29598: LD_ADDR_OWVAR 33
29602: PUSH
29603: LD_STRING 
29605: ST_TO_ADDR
// hc_noskilllimit := true ;
29606: LD_ADDR_OWVAR 76
29610: PUSH
29611: LD_INT 1
29613: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29614: LD_ADDR_OWVAR 31
29618: PUSH
29619: LD_INT 30
29621: PUSH
29622: LD_INT 30
29624: PUSH
29625: LD_INT 30
29627: PUSH
29628: LD_INT 30
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: ST_TO_ADDR
// un := CreateHuman ;
29637: LD_ADDR_VAR 0 3
29641: PUSH
29642: CALL_OW 44
29646: ST_TO_ADDR
// hc_noskilllimit := false ;
29647: LD_ADDR_OWVAR 76
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29655: LD_VAR 0 3
29659: PPUSH
29660: LD_INT 1
29662: PPUSH
29663: CALL_OW 51
// p := 0 ;
29667: LD_ADDR_VAR 0 2
29671: PUSH
29672: LD_INT 0
29674: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29675: LD_INT 35
29677: PPUSH
29678: CALL_OW 67
// p := p + 1 ;
29682: LD_ADDR_VAR 0 2
29686: PUSH
29687: LD_VAR 0 2
29691: PUSH
29692: LD_INT 1
29694: PLUS
29695: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29696: LD_VAR 0 3
29700: PPUSH
29701: CALL_OW 256
29705: PUSH
29706: LD_INT 1000
29708: LESS
29709: IFFALSE 29723
// SetLives ( un , 1000 ) ;
29711: LD_VAR 0 3
29715: PPUSH
29716: LD_INT 1000
29718: PPUSH
29719: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29723: LD_VAR 0 3
29727: PPUSH
29728: LD_INT 81
29730: PUSH
29731: LD_OWVAR 2
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 91
29742: PUSH
29743: LD_VAR 0 3
29747: PUSH
29748: LD_INT 30
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PPUSH
29760: CALL_OW 69
29764: PPUSH
29765: LD_VAR 0 3
29769: PPUSH
29770: CALL_OW 74
29774: PPUSH
29775: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29779: LD_VAR 0 2
29783: PUSH
29784: LD_INT 60
29786: GREATER
29787: PUSH
29788: LD_VAR 0 3
29792: PPUSH
29793: CALL_OW 301
29797: OR
29798: IFFALSE 29675
// if un then
29800: LD_VAR 0 3
29804: IFFALSE 29815
// RemoveUnit ( un ) ;
29806: LD_VAR 0 3
29810: PPUSH
29811: CALL_OW 64
// end ;
29815: PPOPN 3
29817: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y ) ; begin
29818: LD_INT 0
29820: PPUSH
// case cmd of 301 :
29821: LD_VAR 0 1
29825: PUSH
29826: LD_INT 301
29828: DOUBLE
29829: EQUAL
29830: IFTRUE 29834
29832: GO 29837
29834: POP
// ; end ;
29835: GO 29838
29837: POP
// end ;
29838: LD_VAR 0 6
29842: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29843: LD_INT 0
29845: PPUSH
29846: PPUSH
29847: PPUSH
29848: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29849: LD_ADDR_VAR 0 4
29853: PUSH
29854: LD_INT 22
29856: PUSH
29857: LD_OWVAR 2
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 2
29868: PUSH
29869: LD_INT 30
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 30
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PPUSH
29898: CALL_OW 69
29902: ST_TO_ADDR
// if not tmp then
29903: LD_VAR 0 4
29907: NOT
29908: IFFALSE 29912
// exit ;
29910: GO 29971
// for i in tmp do
29912: LD_ADDR_VAR 0 2
29916: PUSH
29917: LD_VAR 0 4
29921: PUSH
29922: FOR_IN
29923: IFFALSE 29969
// for j = 1 to 3 do
29925: LD_ADDR_VAR 0 3
29929: PUSH
29930: DOUBLE
29931: LD_INT 1
29933: DEC
29934: ST_TO_ADDR
29935: LD_INT 3
29937: PUSH
29938: FOR_TO
29939: IFFALSE 29965
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29941: LD_VAR 0 2
29945: PPUSH
29946: CALL_OW 274
29950: PPUSH
29951: LD_VAR 0 3
29955: PPUSH
29956: LD_INT 99999
29958: PPUSH
29959: CALL_OW 277
29963: GO 29938
29965: POP
29966: POP
29967: GO 29922
29969: POP
29970: POP
// end ;
29971: LD_VAR 0 1
29975: RET
// export function hHackSetLevel10 ; var i , j ; begin
29976: LD_INT 0
29978: PPUSH
29979: PPUSH
29980: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29981: LD_ADDR_VAR 0 2
29985: PUSH
29986: LD_INT 21
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PPUSH
29996: CALL_OW 69
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30054
// if IsSelected ( i ) then
30004: LD_VAR 0 2
30008: PPUSH
30009: CALL_OW 306
30013: IFFALSE 30052
// begin for j := 1 to 4 do
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: DOUBLE
30021: LD_INT 1
30023: DEC
30024: ST_TO_ADDR
30025: LD_INT 4
30027: PUSH
30028: FOR_TO
30029: IFFALSE 30050
// SetSkill ( i , j , 10 ) ;
30031: LD_VAR 0 2
30035: PPUSH
30036: LD_VAR 0 3
30040: PPUSH
30041: LD_INT 10
30043: PPUSH
30044: CALL_OW 237
30048: GO 30028
30050: POP
30051: POP
// end ;
30052: GO 30001
30054: POP
30055: POP
// end ;
30056: LD_VAR 0 1
30060: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30061: LD_INT 0
30063: PPUSH
30064: PPUSH
30065: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30066: LD_ADDR_VAR 0 2
30070: PUSH
30071: LD_INT 22
30073: PUSH
30074: LD_OWVAR 2
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 21
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PPUSH
30097: CALL_OW 69
30101: PUSH
30102: FOR_IN
30103: IFFALSE 30144
// begin for j := 1 to 4 do
30105: LD_ADDR_VAR 0 3
30109: PUSH
30110: DOUBLE
30111: LD_INT 1
30113: DEC
30114: ST_TO_ADDR
30115: LD_INT 4
30117: PUSH
30118: FOR_TO
30119: IFFALSE 30140
// SetSkill ( i , j , 10 ) ;
30121: LD_VAR 0 2
30125: PPUSH
30126: LD_VAR 0 3
30130: PPUSH
30131: LD_INT 10
30133: PPUSH
30134: CALL_OW 237
30138: GO 30118
30140: POP
30141: POP
// end ;
30142: GO 30102
30144: POP
30145: POP
// end ;
30146: LD_VAR 0 1
30150: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
30151: LD_INT 0
30153: PPUSH
// uc_side := your_side ;
30154: LD_ADDR_OWVAR 20
30158: PUSH
30159: LD_OWVAR 2
30163: ST_TO_ADDR
// uc_nation := nation ;
30164: LD_ADDR_OWVAR 21
30168: PUSH
30169: LD_VAR 0 1
30173: ST_TO_ADDR
// InitHc ;
30174: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30178: LD_INT 0
30180: PPUSH
30181: LD_VAR 0 2
30185: PPUSH
30186: LD_VAR 0 3
30190: PPUSH
30191: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30195: CALL_OW 44
30199: PPUSH
30200: LD_INT 1
30202: PPUSH
30203: CALL_OW 51
// end ;
30207: LD_VAR 0 4
30211: RET
// export function hHackSpawnVehicle ; begin
30212: LD_INT 0
30214: PPUSH
// uc_side := your_side ;
30215: LD_ADDR_OWVAR 20
30219: PUSH
30220: LD_OWVAR 2
30224: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
30225: LD_ADDR_OWVAR 21
30229: PUSH
30230: LD_INT 1
30232: PPUSH
30233: LD_INT 3
30235: PPUSH
30236: CALL_OW 12
30240: ST_TO_ADDR
// InitVc ;
30241: CALL_OW 20
// case uc_nation of 1 :
30245: LD_OWVAR 21
30249: PUSH
30250: LD_INT 1
30252: DOUBLE
30253: EQUAL
30254: IFTRUE 30258
30256: GO 30402
30258: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
30259: LD_ADDR_OWVAR 37
30263: PUSH
30264: LD_INT 1
30266: PUSH
30267: LD_INT 2
30269: PUSH
30270: LD_INT 3
30272: PUSH
30273: LD_INT 4
30275: PUSH
30276: LD_INT 5
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PPUSH
30289: LD_INT 5
30291: PPUSH
30292: CALL_OW 12
30296: ARRAY
30297: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30298: LD_ADDR_OWVAR 39
30302: PUSH
30303: LD_INT 1
30305: PPUSH
30306: LD_INT 3
30308: PPUSH
30309: CALL_OW 12
30313: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
30314: LD_ADDR_OWVAR 38
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PPUSH
30336: LD_INT 3
30338: PPUSH
30339: CALL_OW 12
30343: ARRAY
30344: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
30345: LD_ADDR_OWVAR 40
30349: PUSH
30350: LD_INT 2
30352: PUSH
30353: LD_INT 4
30355: PUSH
30356: LD_INT 5
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 7
30364: PUSH
30365: LD_INT 8
30367: PUSH
30368: LD_INT 9
30370: PUSH
30371: LD_INT 10
30373: PUSH
30374: LD_INT 6
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: PPUSH
30391: LD_INT 9
30393: PPUSH
30394: CALL_OW 12
30398: ARRAY
30399: ST_TO_ADDR
// end ; 2 :
30400: GO 30667
30402: LD_INT 2
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30534
30410: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
30411: LD_ADDR_OWVAR 37
30415: PUSH
30416: LD_INT 11
30418: PUSH
30419: LD_INT 12
30421: PUSH
30422: LD_INT 13
30424: PUSH
30425: LD_INT 14
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 1
30436: PPUSH
30437: LD_INT 4
30439: PPUSH
30440: CALL_OW 12
30444: ARRAY
30445: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30446: LD_ADDR_OWVAR 39
30450: PUSH
30451: LD_INT 1
30453: PPUSH
30454: LD_INT 3
30456: PPUSH
30457: CALL_OW 12
30461: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
30462: LD_ADDR_OWVAR 38
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: LD_INT 5
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: PPUSH
30484: LD_INT 3
30486: PPUSH
30487: CALL_OW 12
30491: ARRAY
30492: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
30493: LD_ADDR_OWVAR 40
30497: PUSH
30498: LD_INT 24
30500: PUSH
30501: LD_INT 26
30503: PUSH
30504: LD_INT 27
30506: PUSH
30507: LD_INT 28
30509: PUSH
30510: LD_INT 29
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PPUSH
30523: LD_INT 5
30525: PPUSH
30526: CALL_OW 12
30530: ARRAY
30531: ST_TO_ADDR
// end ; 3 :
30532: GO 30667
30534: LD_INT 3
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30666
30542: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
30543: LD_ADDR_OWVAR 37
30547: PUSH
30548: LD_INT 21
30550: PUSH
30551: LD_INT 23
30553: PUSH
30554: LD_INT 22
30556: PUSH
30557: LD_INT 24
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: PPUSH
30569: LD_INT 4
30571: PPUSH
30572: CALL_OW 12
30576: ARRAY
30577: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30578: LD_ADDR_OWVAR 39
30582: PUSH
30583: LD_INT 1
30585: PPUSH
30586: LD_INT 3
30588: PPUSH
30589: CALL_OW 12
30593: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
30594: LD_ADDR_OWVAR 38
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: LD_INT 3
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: PPUSH
30612: LD_INT 2
30614: PPUSH
30615: CALL_OW 12
30619: ARRAY
30620: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
30621: LD_ADDR_OWVAR 40
30625: PUSH
30626: LD_INT 42
30628: PUSH
30629: LD_INT 43
30631: PUSH
30632: LD_INT 44
30634: PUSH
30635: LD_INT 46
30637: PUSH
30638: LD_INT 48
30640: PUSH
30641: LD_INT 47
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 1
30654: PPUSH
30655: LD_INT 6
30657: PPUSH
30658: CALL_OW 12
30662: ARRAY
30663: ST_TO_ADDR
// end ; end ;
30664: GO 30667
30666: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30667: CALL_OW 45
30671: PPUSH
30672: LD_INT 1
30674: PPUSH
30675: CALL_OW 51
// end ;
30679: LD_VAR 0 1
30683: RET
// export hInvincible ; every 1 do
30684: GO 30686
30686: DISABLE
// hInvincible := [ ] ;
30687: LD_ADDR_EXP 120
30691: PUSH
30692: EMPTY
30693: ST_TO_ADDR
30694: END
// every 10 do var i ;
30695: GO 30697
30697: DISABLE
30698: LD_INT 0
30700: PPUSH
// begin enable ;
30701: ENABLE
// if not hInvincible then
30702: LD_EXP 120
30706: NOT
30707: IFFALSE 30711
// exit ;
30709: GO 30755
// for i in hInvincible do
30711: LD_ADDR_VAR 0 1
30715: PUSH
30716: LD_EXP 120
30720: PUSH
30721: FOR_IN
30722: IFFALSE 30753
// if GetLives ( i ) < 1000 then
30724: LD_VAR 0 1
30728: PPUSH
30729: CALL_OW 256
30733: PUSH
30734: LD_INT 1000
30736: LESS
30737: IFFALSE 30751
// SetLives ( i , 1000 ) ;
30739: LD_VAR 0 1
30743: PPUSH
30744: LD_INT 1000
30746: PPUSH
30747: CALL_OW 234
30751: GO 30721
30753: POP
30754: POP
// end ;
30755: PPOPN 1
30757: END
// export function hHackInvincible ; var i ; begin
30758: LD_INT 0
30760: PPUSH
30761: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30762: LD_ADDR_VAR 0 2
30766: PUSH
30767: LD_INT 2
30769: PUSH
30770: LD_INT 21
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 21
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: PPUSH
30795: CALL_OW 69
30799: PUSH
30800: FOR_IN
30801: IFFALSE 30862
// if IsSelected ( i ) then
30803: LD_VAR 0 2
30807: PPUSH
30808: CALL_OW 306
30812: IFFALSE 30860
// begin if i in hInvincible then
30814: LD_VAR 0 2
30818: PUSH
30819: LD_EXP 120
30823: IN
30824: IFFALSE 30844
// hInvincible := hInvincible diff i else
30826: LD_ADDR_EXP 120
30830: PUSH
30831: LD_EXP 120
30835: PUSH
30836: LD_VAR 0 2
30840: DIFF
30841: ST_TO_ADDR
30842: GO 30860
// hInvincible := hInvincible union i ;
30844: LD_ADDR_EXP 120
30848: PUSH
30849: LD_EXP 120
30853: PUSH
30854: LD_VAR 0 2
30858: UNION
30859: ST_TO_ADDR
// end ;
30860: GO 30800
30862: POP
30863: POP
// end ;
30864: LD_VAR 0 1
30868: RET
// export function hHackInvisible ; var i , j ; begin
30869: LD_INT 0
30871: PPUSH
30872: PPUSH
30873: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30874: LD_ADDR_VAR 0 2
30878: PUSH
30879: LD_INT 21
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PPUSH
30889: CALL_OW 69
30893: PUSH
30894: FOR_IN
30895: IFFALSE 30919
// if IsSelected ( i ) then
30897: LD_VAR 0 2
30901: PPUSH
30902: CALL_OW 306
30906: IFFALSE 30917
// ComForceInvisible ( i ) ;
30908: LD_VAR 0 2
30912: PPUSH
30913: CALL_OW 496
30917: GO 30894
30919: POP
30920: POP
// end ;
30921: LD_VAR 0 1
30925: RET
// export function hHackChangeYourSide ; begin
30926: LD_INT 0
30928: PPUSH
// if your_side = 8 then
30929: LD_OWVAR 2
30933: PUSH
30934: LD_INT 8
30936: EQUAL
30937: IFFALSE 30949
// your_side := 0 else
30939: LD_ADDR_OWVAR 2
30943: PUSH
30944: LD_INT 0
30946: ST_TO_ADDR
30947: GO 30963
// your_side := your_side + 1 ;
30949: LD_ADDR_OWVAR 2
30953: PUSH
30954: LD_OWVAR 2
30958: PUSH
30959: LD_INT 1
30961: PLUS
30962: ST_TO_ADDR
// end ;
30963: LD_VAR 0 1
30967: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30968: LD_INT 0
30970: PPUSH
30971: PPUSH
30972: PPUSH
// for i in all_units do
30973: LD_ADDR_VAR 0 2
30977: PUSH
30978: LD_OWVAR 3
30982: PUSH
30983: FOR_IN
30984: IFFALSE 31062
// if IsSelected ( i ) then
30986: LD_VAR 0 2
30990: PPUSH
30991: CALL_OW 306
30995: IFFALSE 31060
// begin j := GetSide ( i ) ;
30997: LD_ADDR_VAR 0 3
31001: PUSH
31002: LD_VAR 0 2
31006: PPUSH
31007: CALL_OW 255
31011: ST_TO_ADDR
// if j = 8 then
31012: LD_VAR 0 3
31016: PUSH
31017: LD_INT 8
31019: EQUAL
31020: IFFALSE 31032
// j := 0 else
31022: LD_ADDR_VAR 0 3
31026: PUSH
31027: LD_INT 0
31029: ST_TO_ADDR
31030: GO 31046
// j := j + 1 ;
31032: LD_ADDR_VAR 0 3
31036: PUSH
31037: LD_VAR 0 3
31041: PUSH
31042: LD_INT 1
31044: PLUS
31045: ST_TO_ADDR
// SetSide ( i , j ) ;
31046: LD_VAR 0 2
31050: PPUSH
31051: LD_VAR 0 3
31055: PPUSH
31056: CALL_OW 235
// end ;
31060: GO 30983
31062: POP
31063: POP
// end ;
31064: LD_VAR 0 1
31068: RET
// export function hHackFog ; begin
31069: LD_INT 0
31071: PPUSH
// FogOff ( true ) ;
31072: LD_INT 1
31074: PPUSH
31075: CALL_OW 344
// end ;
31079: LD_VAR 0 1
31083: RET
// export function hHackApeman ; begin
31084: LD_INT 0
31086: PPUSH
// uc_side := your_side ;
31087: LD_ADDR_OWVAR 20
31091: PUSH
31092: LD_OWVAR 2
31096: ST_TO_ADDR
// uc_nation := 0 ;
31097: LD_ADDR_OWVAR 21
31101: PUSH
31102: LD_INT 0
31104: ST_TO_ADDR
// hc_name :=  ;
31105: LD_ADDR_OWVAR 26
31109: PUSH
31110: LD_STRING 
31112: ST_TO_ADDR
// hc_gallery :=  ;
31113: LD_ADDR_OWVAR 33
31117: PUSH
31118: LD_STRING 
31120: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
31121: LD_ADDR_OWVAR 31
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
// hc_class := class_apeman ;
31144: LD_ADDR_OWVAR 28
31148: PUSH
31149: LD_INT 12
31151: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
31152: CALL_OW 44
31156: PPUSH
31157: LD_INT 1
31159: PPUSH
31160: CALL_OW 51
// end ;
31164: LD_VAR 0 1
31168: RET
// export function hHackBoom ; begin
31169: LD_INT 0
31171: PPUSH
// uc_side := your_side ;
31172: LD_ADDR_OWVAR 20
31176: PUSH
31177: LD_OWVAR 2
31181: ST_TO_ADDR
// uc_nation := 1 ;
31182: LD_ADDR_OWVAR 21
31186: PUSH
31187: LD_INT 1
31189: ST_TO_ADDR
// vc_chassis := us_morphling ;
31190: LD_ADDR_OWVAR 37
31194: PUSH
31195: LD_INT 5
31197: ST_TO_ADDR
// vc_engine := engine_siberite ;
31198: LD_ADDR_OWVAR 39
31202: PUSH
31203: LD_INT 3
31205: ST_TO_ADDR
// vc_control := control_computer ;
31206: LD_ADDR_OWVAR 38
31210: PUSH
31211: LD_INT 3
31213: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
31214: LD_ADDR_OWVAR 40
31218: PUSH
31219: LD_INT 8
31221: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31222: CALL_OW 45
31226: PPUSH
31227: LD_INT 1
31229: PPUSH
31230: CALL_OW 51
// end ;
31234: LD_VAR 0 1
31238: RET
