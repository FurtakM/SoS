
// Summary: sending units to attack at once or after crossing a certain path. Units will attack any objects that block their movement as they cross the path.
//Units that reach the end of the path will wait for the rest of the units and attack, during which wounded units will be healed and damaged vehicles will be retreat and repaired.
// Agressive move == true -> ComAgressiveMove else ComMove
// Path struct: [ [x,y], [x,y], ...]
// Input: [list] units, [list][list] path, [bool] ignorePath, [bool] agressiveMove, [name] retreatArea
// Example: AttackEnemy([PowellPack, JakesPack, SerpentPack], [[10,10],[11, 11]], false, true, PackArea);
Export Function AttackEnemy(units, path, ignorePath, agressiveMove, retreatArea);
var i, unit, attackUnits, attackUnit, medics, mechanics, damageUnits, driver, crates, nearPathNode, lastPathNode, nearEnemyObject, nearCrate, unitsReachPathEnd, startAttacks, target1, target2;
begin

    { 
        tags/states:
        0 - no reach path
        1 - reach path
        2 - attack
        3 - retreat and heal/repair

        Logic:
        1. Move units to next path nodes.
        2. If can't reach next node destroy all object which can block (buildings, vehicles, units, crates).
        3. If units destroy block objects, find near path node.
        4. Delete from list node that the units could not reach and move to them.
        5. Wait X seconds and start attack.
    }

    // Set state
    for unit in units do
        if NOT ignorePath then
            SetTag(unit, 0)
        else
            SetTag(unit, 1);

    startAttacks = false;

    lastPathNode = [path[path][1], path[path][2]];
    mechanics = [];

    repeat
        attackUnits = UnitFilter(units, [[f_ok], [f_or, [f_class, class_soldier], [f_type, unit_vehicle]]]);
        medics = UnitFilter(units, [[f_ok], [f_class, class_scientistic]]);
        damageUnits = UnitFilter(units, [[f_type, unit_human], [f_not, [f_lives, 1000]]]);
        crates = GetListOfCratesInArea(AllMapArea); // struct:  [x1, y1, x2, y2, x3, y3, x4, y4]

        if NOT ignorePath then
        begin
            for unit in attackUnits do
            begin

                // Move to next road node and attack all block objects
                if path AND NOT startAttacks then
                begin
                    i = 1;

                    repeat
                        crates = GetListOfCratesInArea(AllMapArea);
                        nearEnemyObject = NearestUnitToUnit(FilterAllUnits([f_enemy, GetSide(unit)]), unit);
    
                        nearCrate = FindNearestPoint(crates, GetX(unit), GetY(unit));  
                        
                        if damageUnits AND medics then
                            ComHeal(medics, damageUnits[1])
                        else if medics then
                            ComMoveXY(medics, GetX(attackUnits[1]), GetY(attackUnits[1]));

                        if NOT HasTask(unit) then
                        begin
                            nearCrate = FindNearestPoint(crates, GetX(unit), GetY(unit)); 

                            if i > crates then
                                i = 1;

                            if nearEnemyObject AND nearCrate then
                            begin
                                if GetDistUnitXY(unit, GetX(nearEnemyObject), GetY(nearEnemyObject)) < GetDistUnitXY(unit, nearCrate[1], nearCrate[2]) then
                                    ComAttackUnit(attackUnits, nearEnemyObject)    
                                else
                                    ComAttackPlace(attackUnits, crates[i], crates[i+1]);  
                            end
                            else if crates then
                                ComAttackPlace(attackUnits, crates[i], crates[i+1])
                            else
                                ComAttackUnit(attackUnits, nearEnemyObject);               
                        end;

                        wait(0$1);

                        if path then
                        begin
                            nearPathNode = FindNearPathNode(unit, path);

                            if agressiveMove then
                                ComAgressiveMove(attackUnits, nearPathNode[1], nearPathNode[2])
                            else
                                ComMoveXY(attackUnits, nearPathNode[1], nearPathNode[2]);
                        end
                        else startAttacks = true;


                        i = i + 2;

                    until NOT HasTask(unit) AND FilterAllUnits([[f_side, GetSide(unit)], [f_distxy, nearPathNode[1], nearPathNode[2], 4]]) > 3 AND NOT startAttacks;    
            
                    for i := 1 to path do
                        if path[i][1] = nearPathNode[1] AND path[i][2] = nearPathNode[2] then
                        begin
                            path = path diff [path[i]]; 
                            break;
                        end;                  
                end;

                if NOT path then
                    break;                
            end;

            // Count units
            repeat
                unitsReachPathEnd = 0;

                for attackUnit in attackUnits do
                begin
                    if NOT GetDistUnitXY(attackUnit, lastPathNode[1], lastPathNode[2]) < 7 AND GetTag(attackUnit) = 0 then
                        ComMoveXY(attackUnit, lastPathNode[1], lastPathNode[2])
                    else if GetTag(attackUnit) = 0 then
                        SetTag(attackUnit, 1);

                    if GetTag(unit) = 1 then
                        unitsReachPathEnd = unitsReachPathEnd + 1;
                end;       

                wait(0$1); 

            until unitsReachPathEnd > attackUnits - 3;

            // Wait some seconds before attack
            wait(0$10);

            
        end;
 
      
        for attackUnit in attackUnits do
            SetTag(attackUnit, 2);

        startAttacks = true;
   
        // Attack, heal, repair etc.
        if startAttacks then
        begin
            repeat
                wait(0$1);

                medics = UnitFilter(units, [[f_ok], [f_class, class_scientistic]]);
                damageUnits = UnitFilter(units, [[f_type, unit_human], [f_class, class_soldier], [f_not, [f_lives, 1000]]]);

                if damageUnits AND medics then
                    ComHeal(medics, damageUnits[1])
                else if medics AND NOT damageUnits then
                    ComMoveXY(medics, GetX(attackUnits[1]), GetY(attackUnits[1]));

                for attackUnit in attackUnits do
                begin
                    target1 := NearestUnitToUnit(FilterAllUnits([f_enemy, GetSide(attackUnit)]), attackUnit);
                    target2 := NearestUnitToUnit(FilterAllUnits([[[f_enemy, GetSide(attackUnit)], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), attackUnit);

                    if GetTag(attackUnit) = 2 then
                    begin
                        If GetDistUnits(attackUnit, target1)+8 < GetDistUnits(attackUnit, target2) then ComAttackUnit(attackUnit, target1)
                        else ComAttackUnit(attackUnit, target2);

                        if GetLives(attackUnit) < 650 AND GetType(attackUnit) = unit_vehicle AND GetControl(attackUnit) = control_manual then
                        begin
                            SetTag(attackUnit, 3);
                            SetTag(UnitsInside(attackUnit)[1], 3);
                            ComMoveToArea(attackUnit, retreatArea);
                        end;
                    end;

                    if IsInArea(attackUnit, retreatArea) AND GetTag(attackUnit) = 3 AND UnitsInside(attackUnit) then
                    begin
                        driver = UnitsInside(attackUnit)[1];

                        if NOT driver IN mechanics then
                            mechanics = mechanics ^ driver;

                        ComExitVehicle(driver);
                        AddComRepairVehicle(driver, attackUnit);
                    end;

                    if GetLives(attackUnit) = 1000 then
                    begin
                        SetTag(attackUnit, 2);

                        if GetType(attackUnit) = unit_vehicle AND GetControl(attackUnit) = control_manual AND NOT UnitsInside(attackUnit) then
                        begin
                            SetFuel(attackUnit, 100);
                            ComEnterUnit(NearestUnitToUnit(mechanics, attackUnit), attackUnit);
                            mechanics = mechanics diff NearestUnitToUnit(mechanics, attackUnit);
                        end;
                    end;

                    for unit in mechanics do
                    begin
                        if NOT IsInArea(unit, retreatArea) then
                            ComMoveToArea(unit, retreatArea);

                        if GetLives(unit) < 250 then
                        mechanics = mechanics diff unit;
                    end;
                  
                end;

            until NOT attackUnits;
        end;

        wait(0$1);

    until NOT UnitFilter(units, [f_ok]);
end;

// Summary: Find near path node for unit
// Input: [int] unit, [list][list] path
// Output: [list] nearNode struct: [x, y]
Export Function FindNearPathNode(unit, path);
var i, nearPosition;
begin

    nearPosition = [path[1][1], path[1][2]];

    for i := 2 to path do
    begin
        if GetDistUnitXY(unit, path[i][1], path[i][2]) < GetDistUnitXY(unit, nearPosition[1], nearPosition[2]) then
        begin
            nearPosition = Replace(nearPosition, 1, path[i][1]);   
            nearPosition = Replace(nearPosition, 2, path[i][2]);
        end;         
    end; 

    result = nearPosition;
end;