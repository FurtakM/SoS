// export you , americans , arabians , neutral ; export rulive ; export savedTanks ; starting begin InGameOn ;
   0: CALL_OW 8
// savedTanks = [ ] ;
   4: LD_ADDR_EXP 6
   8: PUSH
   9: EMPTY
  10: ST_TO_ADDR
// disable ( 10 ) ;
  11: LD_INT 10
  13: DISABLE_MARKED
// set_sides ;
  14: CALL 52 0 0
// load_chars ;
  18: CALL 92 0 0
// place_in_ru_cars ;
  22: CALL 756 0 0
// place_ru_cars ( ru_place ) ;
  26: LD_INT 1
  28: PPUSH
  29: CALL 1245 0 1
// DIntro ;
  33: CALL 1536 0 0
// Save ;
  37: CALL 1375 0 0
// ChangeMap ( %_cont , %_cont ) ;
  41: LD_STRING %_cont
  43: PPUSH
  44: LD_STRING %_cont
  46: PPUSH
  47: CALL_OW 340
// end ;
  51: END
// function set_sides ; begin
  52: LD_INT 0
  54: PPUSH
// you := 3 ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 3
  62: ST_TO_ADDR
// americans := 1 ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_INT 1
  70: ST_TO_ADDR
// arabians := 2 ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_INT 2
  78: ST_TO_ADDR
// neutral := 0 ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// end ; end_of_file
  87: LD_VAR 0 1
  91: RET
// export Burlak , Platonov , Karamazov , Petrovova , Gleb , Petrosyan , Dolgov , Lipshchin , Titov ; export used , ru_cars , other_from6i ; export function load_chars ; var i , so , en , me , sc ; begin
  92: LD_INT 0
  94: PPUSH
  95: PPUSH
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
// InitUc ;
 100: CALL_OW 18
// InitHc ;
 104: CALL_OW 19
// uc_side := you ;
 108: LD_ADDR_OWVAR 20
 112: PUSH
 113: LD_EXP 1
 117: ST_TO_ADDR
// uc_nation := nation_russian ;
 118: LD_ADDR_OWVAR 21
 122: PUSH
 123: LD_INT 3
 125: ST_TO_ADDR
// Platonov := MyCreateCharacter ( Platonov , 0 , class_soldier , true ) ;
 126: LD_ADDR_EXP 8
 130: PUSH
 131: LD_STRING Platonov
 133: PPUSH
 134: LD_INT 0
 136: PPUSH
 137: LD_INT 1
 139: PPUSH
 140: LD_INT 1
 142: PPUSH
 143: CALL 1288 0 4
 147: ST_TO_ADDR
// Burlak := MyCreateCharacter ( 04_Burlak , 0 , class_mechanic , false ) ;
 148: LD_ADDR_EXP 7
 152: PUSH
 153: LD_STRING 04_Burlak
 155: PPUSH
 156: LD_INT 0
 158: PPUSH
 159: LD_INT 3
 161: PPUSH
 162: LD_INT 0
 164: PPUSH
 165: CALL 1288 0 4
 169: ST_TO_ADDR
// Karamazov := MyCreateCharacter ( Karamazov , 0 , class_engineer , true ) ;
 170: LD_ADDR_EXP 9
 174: PUSH
 175: LD_STRING Karamazov
 177: PPUSH
 178: LD_INT 0
 180: PPUSH
 181: LD_INT 2
 183: PPUSH
 184: LD_INT 1
 186: PPUSH
 187: CALL 1288 0 4
 191: ST_TO_ADDR
// Petrovova := MyCreateCharacter ( Petrovova , 0 , class_soldier , true ) ;
 192: LD_ADDR_EXP 10
 196: PUSH
 197: LD_STRING Petrovova
 199: PPUSH
 200: LD_INT 0
 202: PPUSH
 203: LD_INT 1
 205: PPUSH
 206: LD_INT 1
 208: PPUSH
 209: CALL 1288 0 4
 213: ST_TO_ADDR
// Gleb := MyCreateCharacter ( Gleb , 0 , class_soldier , true ) ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_STRING Gleb
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: LD_INT 1
 227: PPUSH
 228: LD_INT 1
 230: PPUSH
 231: CALL 1288 0 4
 235: ST_TO_ADDR
// Petrosyan := MyCreateCharacter ( Petrosyan , 0 , class_scientistic , true ) ;
 236: LD_ADDR_EXP 12
 240: PUSH
 241: LD_STRING Petrosyan
 243: PPUSH
 244: LD_INT 0
 246: PPUSH
 247: LD_INT 4
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL 1288 0 4
 257: ST_TO_ADDR
// Dolgov := MyCreateCharacter ( Dolgov , 0 , class_scientistic , true ) ;
 258: LD_ADDR_EXP 13
 262: PUSH
 263: LD_STRING Dolgov
 265: PPUSH
 266: LD_INT 0
 268: PPUSH
 269: LD_INT 4
 271: PPUSH
 272: LD_INT 1
 274: PPUSH
 275: CALL 1288 0 4
 279: ST_TO_ADDR
// Lipshchin := MyCreateCharacter ( Lipshchin , 0 , class_soldier , true ) ;
 280: LD_ADDR_EXP 14
 284: PUSH
 285: LD_STRING Lipshchin
 287: PPUSH
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PPUSH
 294: LD_INT 1
 296: PPUSH
 297: CALL 1288 0 4
 301: ST_TO_ADDR
// Titov := MyCreateCharacter ( Titov , 0 , class_soldier , true ) ;
 302: LD_ADDR_EXP 15
 306: PUSH
 307: LD_STRING Titov
 309: PPUSH
 310: LD_INT 0
 312: PPUSH
 313: LD_INT 1
 315: PPUSH
 316: LD_INT 1
 318: PPUSH
 319: CALL 1288 0 4
 323: ST_TO_ADDR
// used := [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Lipshchin , Dolgov , Titov ] diff 0 ;
 324: LD_ADDR_EXP 16
 328: PUSH
 329: LD_EXP 7
 333: PUSH
 334: LD_EXP 9
 338: PUSH
 339: LD_EXP 10
 343: PUSH
 344: LD_EXP 11
 348: PUSH
 349: LD_EXP 12
 353: PUSH
 354: LD_EXP 14
 358: PUSH
 359: LD_EXP 13
 363: PUSH
 364: LD_EXP 15
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 0
 381: DIFF
 382: ST_TO_ADDR
// so := ( UnitFilter ( used , [ [ f_class , class_soldier ] ] ) + 0 ) ;
 383: LD_ADDR_VAR 0 3
 387: PUSH
 388: LD_EXP 16
 392: PPUSH
 393: LD_INT 25
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: PPUSH
 406: CALL_OW 72
 410: PUSH
 411: LD_INT 0
 413: PLUS
 414: ST_TO_ADDR
// en := ( UnitFilter ( used , [ [ f_class , class_engineer ] ] ) + 0 ) ;
 415: LD_ADDR_VAR 0 4
 419: PUSH
 420: LD_EXP 16
 424: PPUSH
 425: LD_INT 25
 427: PUSH
 428: LD_INT 2
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: EMPTY
 436: LIST
 437: PPUSH
 438: CALL_OW 72
 442: PUSH
 443: LD_INT 0
 445: PLUS
 446: ST_TO_ADDR
// me := ( UnitFilter ( used , [ [ f_class , class_mechanic ] ] ) + 0 ) ;
 447: LD_ADDR_VAR 0 5
 451: PUSH
 452: LD_EXP 16
 456: PPUSH
 457: LD_INT 25
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: EMPTY
 468: LIST
 469: PPUSH
 470: CALL_OW 72
 474: PUSH
 475: LD_INT 0
 477: PLUS
 478: ST_TO_ADDR
// sc := ( UnitFilter ( used , [ [ f_class , class_scientistic ] ] ) + 0 ) ;
 479: LD_ADDR_VAR 0 6
 483: PUSH
 484: LD_EXP 16
 488: PPUSH
 489: LD_INT 25
 491: PUSH
 492: LD_INT 4
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: PPUSH
 502: CALL_OW 72
 506: PUSH
 507: LD_INT 0
 509: PLUS
 510: ST_TO_ADDR
// for i := so to 4 do
 511: LD_ADDR_VAR 0 2
 515: PUSH
 516: DOUBLE
 517: LD_VAR 0 3
 521: DEC
 522: ST_TO_ADDR
 523: LD_INT 4
 525: PUSH
 526: FOR_TO
 527: IFFALSE 569
// begin PrepareSoldier ( Rand ( 10 , 23 ) div 10 , 3 ) ;
 529: LD_INT 10
 531: PPUSH
 532: LD_INT 23
 534: PPUSH
 535: CALL_OW 12
 539: PUSH
 540: LD_INT 10
 542: DIV
 543: PPUSH
 544: LD_INT 3
 546: PPUSH
 547: CALL_OW 381
// used := used ^ CreateHuman ;
 551: LD_ADDR_EXP 16
 555: PUSH
 556: LD_EXP 16
 560: PUSH
 561: CALL_OW 44
 565: ADD
 566: ST_TO_ADDR
// end ;
 567: GO 526
 569: POP
 570: POP
// for i := en to 1 do
 571: LD_ADDR_VAR 0 2
 575: PUSH
 576: DOUBLE
 577: LD_VAR 0 4
 581: DEC
 582: ST_TO_ADDR
 583: LD_INT 1
 585: PUSH
 586: FOR_TO
 587: IFFALSE 629
// begin PrepareEngineer ( Rand ( 10 , 23 ) div 10 , 3 ) ;
 589: LD_INT 10
 591: PPUSH
 592: LD_INT 23
 594: PPUSH
 595: CALL_OW 12
 599: PUSH
 600: LD_INT 10
 602: DIV
 603: PPUSH
 604: LD_INT 3
 606: PPUSH
 607: CALL_OW 382
// used := used ^ CreateHuman ;
 611: LD_ADDR_EXP 16
 615: PUSH
 616: LD_EXP 16
 620: PUSH
 621: CALL_OW 44
 625: ADD
 626: ST_TO_ADDR
// end ;
 627: GO 586
 629: POP
 630: POP
// for i := me to 1 do
 631: LD_ADDR_VAR 0 2
 635: PUSH
 636: DOUBLE
 637: LD_VAR 0 5
 641: DEC
 642: ST_TO_ADDR
 643: LD_INT 1
 645: PUSH
 646: FOR_TO
 647: IFFALSE 689
// begin PrepareMechanic ( Rand ( 10 , 23 ) div 10 , 3 ) ;
 649: LD_INT 10
 651: PPUSH
 652: LD_INT 23
 654: PPUSH
 655: CALL_OW 12
 659: PUSH
 660: LD_INT 10
 662: DIV
 663: PPUSH
 664: LD_INT 3
 666: PPUSH
 667: CALL_OW 383
// used := used ^ CreateHuman ;
 671: LD_ADDR_EXP 16
 675: PUSH
 676: LD_EXP 16
 680: PUSH
 681: CALL_OW 44
 685: ADD
 686: ST_TO_ADDR
// end ;
 687: GO 646
 689: POP
 690: POP
// for i := sc to 2 do
 691: LD_ADDR_VAR 0 2
 695: PUSH
 696: DOUBLE
 697: LD_VAR 0 6
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 2
 705: PUSH
 706: FOR_TO
 707: IFFALSE 749
// begin PrepareScientist ( Rand ( 10 , 23 ) div 10 , 3 ) ;
 709: LD_INT 10
 711: PPUSH
 712: LD_INT 23
 714: PPUSH
 715: CALL_OW 12
 719: PUSH
 720: LD_INT 10
 722: DIV
 723: PPUSH
 724: LD_INT 3
 726: PPUSH
 727: CALL_OW 384
// used := used ^ CreateHuman ;
 731: LD_ADDR_EXP 16
 735: PUSH
 736: LD_EXP 16
 740: PUSH
 741: CALL_OW 44
 745: ADD
 746: ST_TO_ADDR
// end ;
 747: GO 706
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function place_in_ru_cars ; var cars , car , i ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
// cars := [ [ ru_medium_tracked , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Rand ( 1 , 3 ) ] ] ] ;
 762: LD_ADDR_VAR 0 2
 766: PUSH
 767: LD_INT 22
 769: PUSH
 770: LD_INT 42
 772: PUSH
 773: LD_INT 43
 775: PUSH
 776: LD_INT 44
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_INT 3
 789: PPUSH
 790: CALL_OW 12
 794: ARRAY
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 22
 802: PUSH
 803: LD_INT 42
 805: PUSH
 806: LD_INT 43
 808: PUSH
 809: LD_INT 44
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 1
 819: PPUSH
 820: LD_INT 3
 822: PPUSH
 823: CALL_OW 12
 827: ARRAY
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 22
 835: PUSH
 836: LD_INT 42
 838: PUSH
 839: LD_INT 43
 841: PUSH
 842: LD_INT 44
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 1
 852: PPUSH
 853: LD_INT 3
 855: PPUSH
 856: CALL_OW 12
 860: ARRAY
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_INT 42
 871: PUSH
 872: LD_INT 43
 874: PUSH
 875: LD_INT 44
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 1
 885: PPUSH
 886: LD_INT 3
 888: PPUSH
 889: CALL_OW 12
 893: ARRAY
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 22
 901: PUSH
 902: LD_INT 42
 904: PUSH
 905: LD_INT 43
 907: PUSH
 908: LD_INT 44
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: LIST
 915: PUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 3
 921: PPUSH
 922: CALL_OW 12
 926: ARRAY
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 42
 937: PUSH
 938: LD_INT 43
 940: PUSH
 941: LD_INT 44
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 1
 951: PPUSH
 952: LD_INT 3
 954: PPUSH
 955: CALL_OW 12
 959: ARRAY
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 22
 967: PUSH
 968: LD_INT 42
 970: PUSH
 971: LD_INT 43
 973: PUSH
 974: LD_INT 44
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 1
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 12
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 22
1000: PUSH
1001: LD_INT 42
1003: PUSH
1004: LD_INT 43
1006: PUSH
1007: LD_INT 44
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: LIST
1014: PUSH
1015: LD_INT 1
1017: PPUSH
1018: LD_INT 3
1020: PPUSH
1021: CALL_OW 12
1025: ARRAY
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: ST_TO_ADDR
// InitUc ;
1041: CALL_OW 18
// InitVc ;
1045: CALL_OW 20
// vc_control := control_manual ;
1049: LD_ADDR_OWVAR 38
1053: PUSH
1054: LD_INT 1
1056: ST_TO_ADDR
// vc_engine := engine_combustion ;
1057: LD_ADDR_OWVAR 39
1061: PUSH
1062: LD_INT 1
1064: ST_TO_ADDR
// uc_side := you ;
1065: LD_ADDR_OWVAR 20
1069: PUSH
1070: LD_EXP 1
1074: ST_TO_ADDR
// uc_nation := nation_russian ;
1075: LD_ADDR_OWVAR 21
1079: PUSH
1080: LD_INT 3
1082: ST_TO_ADDR
// ru_cars := [ ] ;
1083: LD_ADDR_EXP 17
1087: PUSH
1088: EMPTY
1089: ST_TO_ADDR
// for i := 1 to 8 do
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: DOUBLE
1096: LD_INT 1
1098: DEC
1099: ST_TO_ADDR
1100: LD_INT 8
1102: PUSH
1103: FOR_TO
1104: IFFALSE 1238
// begin vc_chassis := cars [ i ] [ 1 ] ;
1106: LD_ADDR_OWVAR 37
1110: PUSH
1111: LD_VAR 0 2
1115: PUSH
1116: LD_VAR 0 4
1120: ARRAY
1121: PUSH
1122: LD_INT 1
1124: ARRAY
1125: ST_TO_ADDR
// vc_weapon := cars [ i ] [ 2 ] ;
1126: LD_ADDR_OWVAR 40
1130: PUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_VAR 0 4
1140: ARRAY
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: ST_TO_ADDR
// uc_direction := 5 ;
1146: LD_ADDR_OWVAR 24
1150: PUSH
1151: LD_INT 5
1153: ST_TO_ADDR
// vc_fuel_battery := Rand ( 70 , 90 ) ;
1154: LD_ADDR_OWVAR 41
1158: PUSH
1159: LD_INT 70
1161: PPUSH
1162: LD_INT 90
1164: PPUSH
1165: CALL_OW 12
1169: ST_TO_ADDR
// car := CreateVehicle ;
1170: LD_ADDR_VAR 0 3
1174: PUSH
1175: CALL_OW 45
1179: ST_TO_ADDR
// ru_cars := ru_cars ^ car ;
1180: LD_ADDR_EXP 17
1184: PUSH
1185: LD_EXP 17
1189: PUSH
1190: LD_VAR 0 3
1194: ADD
1195: ST_TO_ADDR
// PlaceHumanInUnit ( used [ i ] , car ) ;
1196: LD_EXP 16
1200: PUSH
1201: LD_VAR 0 4
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 3
1211: PPUSH
1212: CALL_OW 52
// SetLives ( car , Rand ( 750 , 1000 ) ) ;
1216: LD_VAR 0 3
1220: PPUSH
1221: LD_INT 750
1223: PPUSH
1224: LD_INT 1000
1226: PPUSH
1227: CALL_OW 12
1231: PPUSH
1232: CALL_OW 234
// end ;
1236: GO 1103
1238: POP
1239: POP
// end ;
1240: LD_VAR 0 1
1244: RET
// export function place_ru_cars ( area ) ; var i ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
// for i in ru_cars do
1249: LD_ADDR_VAR 0 3
1253: PUSH
1254: LD_EXP 17
1258: PUSH
1259: FOR_IN
1260: IFFALSE 1281
// PlaceUnitArea ( i , area , false ) ;
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_VAR 0 1
1271: PPUSH
1272: LD_INT 0
1274: PPUSH
1275: CALL_OW 49
1279: GO 1259
1281: POP
1282: POP
// end ;
1283: LD_VAR 0 2
1287: RET
// function MyCreateCharacter ( name , loc , unclass , new ) ; begin
1288: LD_INT 0
1290: PPUSH
// if new then
1291: LD_VAR 0 4
1295: IFFALSE 1314
// result := NewCharacter ( name ) else
1297: LD_ADDR_VAR 0 5
1301: PUSH
1302: LD_VAR 0 1
1306: PPUSH
1307: CALL_OW 25
1311: ST_TO_ADDR
1312: GO 1350
// begin if CheckCharacterSet ( name ) then
1314: LD_VAR 0 1
1318: PPUSH
1319: CALL_OW 29
1323: IFFALSE 1342
// result := CreateCharacter ( name ) else
1325: LD_ADDR_VAR 0 5
1329: PUSH
1330: LD_VAR 0 1
1334: PPUSH
1335: CALL_OW 34
1339: ST_TO_ADDR
1340: GO 1350
// result := 0 ;
1342: LD_ADDR_VAR 0 5
1346: PUSH
1347: LD_INT 0
1349: ST_TO_ADDR
// end ; if unclass then
1350: LD_VAR 0 3
1354: IFFALSE 1370
// SetClass ( result , unclass ) ;
1356: LD_VAR 0 5
1360: PPUSH
1361: LD_VAR 0 3
1365: PPUSH
1366: CALL_OW 336
// end ;
1370: LD_VAR 0 5
1374: RET
// export function Save ; begin
1375: LD_INT 0
1377: PPUSH
// SaveVariable ( savedTanks , 05_TanksIntro_1 ) ;
1378: LD_EXP 6
1382: PPUSH
1383: LD_STRING 05_TanksIntro_1
1385: PPUSH
1386: CALL_OW 39
// end ; end_of_file
1390: LD_VAR 0 1
1394: RET
// var Bur , Bel , Pla , Kar , Ptr , Glb , Pet , Stv , Dol , Lip , Tit ; var donttalk ; function set_shorts ; begin
1395: LD_INT 0
1397: PPUSH
// Bur := Burlak ;
1398: LD_ADDR_LOC 1
1402: PUSH
1403: LD_EXP 7
1407: ST_TO_ADDR
// Pla := Platonov ;
1408: LD_ADDR_LOC 3
1412: PUSH
1413: LD_EXP 8
1417: ST_TO_ADDR
// Kar := Karamazov ;
1418: LD_ADDR_LOC 4
1422: PUSH
1423: LD_EXP 9
1427: ST_TO_ADDR
// Ptr := Petrovova ;
1428: LD_ADDR_LOC 5
1432: PUSH
1433: LD_EXP 10
1437: ST_TO_ADDR
// Glb := Gleb ;
1438: LD_ADDR_LOC 6
1442: PUSH
1443: LD_EXP 11
1447: ST_TO_ADDR
// Pet := Petrosyan ;
1448: LD_ADDR_LOC 7
1452: PUSH
1453: LD_EXP 12
1457: ST_TO_ADDR
// Dol := Dolgov ;
1458: LD_ADDR_LOC 9
1462: PUSH
1463: LD_EXP 13
1467: ST_TO_ADDR
// Lip := Lipshchin ;
1468: LD_ADDR_LOC 10
1472: PUSH
1473: LD_EXP 14
1477: ST_TO_ADDR
// Tit := Titov ;
1478: LD_ADDR_LOC 11
1482: PUSH
1483: LD_EXP 15
1487: ST_TO_ADDR
// donttalk := used diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan ] ;
1488: LD_ADDR_LOC 12
1492: PUSH
1493: LD_EXP 16
1497: PUSH
1498: LD_EXP 7
1502: PUSH
1503: LD_EXP 9
1507: PUSH
1508: LD_EXP 10
1512: PUSH
1513: LD_EXP 11
1517: PUSH
1518: LD_EXP 12
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: DIFF
1530: ST_TO_ADDR
// end ;
1531: LD_VAR 0 1
1535: RET
// export function DIntro ; var pos , auta , i , hex , rcars , mt , vzdal , driver , driverShortName ; begin
1536: LD_INT 0
1538: PPUSH
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
1544: PPUSH
1545: PPUSH
1546: PPUSH
1547: PPUSH
// set_shorts ;
1548: CALL 1395 0 0
// auta := FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_vehicle ] ] ) ;
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 22
1559: PUSH
1560: LD_EXP 1
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 21
1571: PUSH
1572: LD_INT 2
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PPUSH
1583: CALL_OW 69
1587: ST_TO_ADDR
// vzdal := [ ] ;
1588: LD_ADDR_VAR 0 8
1592: PUSH
1593: EMPTY
1594: ST_TO_ADDR
// for i in auta do
1595: LD_ADDR_VAR 0 4
1599: PUSH
1600: LD_VAR 0 3
1604: PUSH
1605: FOR_IN
1606: IFFALSE 1640
// begin vzdal := vzdal ^ [ GetDistUnitXY ( i , 20 , 2 ) ] ;
1608: LD_ADDR_VAR 0 8
1612: PUSH
1613: LD_VAR 0 8
1617: PUSH
1618: LD_VAR 0 4
1622: PPUSH
1623: LD_INT 20
1625: PPUSH
1626: LD_INT 2
1628: PPUSH
1629: CALL_OW 297
1633: PUSH
1634: EMPTY
1635: LIST
1636: ADD
1637: ST_TO_ADDR
// end ;
1638: GO 1605
1640: POP
1641: POP
// auta := SortListByListAsc ( auta , vzdal ) ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: LD_VAR 0 8
1656: PPUSH
1657: CALL_OW 76
1661: ST_TO_ADDR
// interface_hidden := true ;
1662: LD_ADDR_OWVAR 54
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// CenterNowOnUnits ( auta ) ;
1670: LD_VAR 0 3
1674: PPUSH
1675: CALL_OW 87
// RevealFogArea ( you , co_vidi ) ;
1679: LD_EXP 1
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: CALL_OW 332
// enable ( 10 ) ;
1691: LD_INT 10
1693: ENABLE_MARKED
// wait ( 0 0$1 ) ;
1694: LD_INT 35
1696: PPUSH
1697: CALL_OW 67
// SayRadio ( Pla , DIntro-Pla-1 ) ;
1701: LD_LOC 3
1705: PPUSH
1706: LD_STRING DIntro-Pla-1
1708: PPUSH
1709: CALL_OW 94
// Say ( Bur , DIntro-Bur-1 ) ;
1713: LD_LOC 1
1717: PPUSH
1718: LD_STRING DIntro-Bur-1
1720: PPUSH
1721: CALL_OW 88
// SayRadio ( Pla , DIntro-Pla-2 ) ;
1725: LD_LOC 3
1729: PPUSH
1730: LD_STRING DIntro-Pla-2
1732: PPUSH
1733: CALL_OW 94
// Say ( Bur , DIntro-Bur-2 ) ;
1737: LD_LOC 1
1741: PPUSH
1742: LD_STRING DIntro-Bur-2
1744: PPUSH
1745: CALL_OW 88
// SayRadio ( Pla , DIntro-Pla-3 ) ;
1749: LD_LOC 3
1753: PPUSH
1754: LD_STRING DIntro-Pla-3
1756: PPUSH
1757: CALL_OW 94
// ComMoveToArea ( auta [ 1 ] , ru_exit ) ;
1761: LD_VAR 0 3
1765: PUSH
1766: LD_INT 1
1768: ARRAY
1769: PPUSH
1770: LD_INT 2
1772: PPUSH
1773: CALL_OW 113
// for i := 1 to auta - 1 do
1777: LD_ADDR_VAR 0 4
1781: PUSH
1782: DOUBLE
1783: LD_INT 1
1785: DEC
1786: ST_TO_ADDR
1787: LD_VAR 0 3
1791: PUSH
1792: LD_INT 1
1794: MINUS
1795: PUSH
1796: FOR_TO
1797: IFFALSE 1831
// begin ComMoveUnit ( auta [ i + 1 ] , auta [ i ] ) ;
1799: LD_VAR 0 3
1803: PUSH
1804: LD_VAR 0 4
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: ARRAY
1813: PPUSH
1814: LD_VAR 0 3
1818: PUSH
1819: LD_VAR 0 4
1823: ARRAY
1824: PPUSH
1825: CALL_OW 112
// end ;
1829: GO 1796
1831: POP
1832: POP
// AddComMoveToArea ( auta , ru_exit ) ;
1833: LD_VAR 0 3
1837: PPUSH
1838: LD_INT 2
1840: PPUSH
1841: CALL_OW 173
// mt := tick + 0 0$2 ;
1845: LD_ADDR_VAR 0 7
1849: PUSH
1850: LD_OWVAR 1
1854: PUSH
1855: LD_INT 70
1857: PLUS
1858: ST_TO_ADDR
// while FilterAllUnits ( [ [ f_side , you ] , [ f_placed ] ] ) do
1859: LD_INT 22
1861: PUSH
1862: LD_EXP 1
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 52
1873: PUSH
1874: EMPTY
1875: LIST
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PPUSH
1881: CALL_OW 69
1885: IFFALSE 2309
// begin wait ( 0 0$0.2 ) ;
1887: LD_INT 7
1889: PPUSH
1890: CALL_OW 67
// for i in auta do
1894: LD_ADDR_VAR 0 4
1898: PUSH
1899: LD_VAR 0 3
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1960
// begin if GetLives ( i ) < 500 then
1907: LD_VAR 0 4
1911: PPUSH
1912: CALL_OW 256
1916: PUSH
1917: LD_INT 500
1919: LESS
1920: IFFALSE 1934
// SetLives ( i , 500 ) ;
1922: LD_VAR 0 4
1926: PPUSH
1927: LD_INT 500
1929: PPUSH
1930: CALL_OW 234
// if not HasTask ( i ) then
1934: LD_VAR 0 4
1938: PPUSH
1939: CALL_OW 314
1943: NOT
1944: IFFALSE 1958
// ComMoveToArea ( i , ru_exit ) ;
1946: LD_VAR 0 4
1950: PPUSH
1951: LD_INT 2
1953: PPUSH
1954: CALL_OW 113
// end ;
1958: GO 1904
1960: POP
1961: POP
// for i in FilterUnitsInArea ( ru_exit , [ ] ) do
1962: LD_ADDR_VAR 0 4
1966: PUSH
1967: LD_INT 2
1969: PPUSH
1970: EMPTY
1971: PPUSH
1972: CALL_OW 70
1976: PUSH
1977: FOR_IN
1978: IFFALSE 2266
// begin if GetType ( i ) = unit_vehicle and GetSide ( i ) = 3 then
1980: LD_VAR 0 4
1984: PPUSH
1985: CALL_OW 247
1989: PUSH
1990: LD_INT 2
1992: EQUAL
1993: PUSH
1994: LD_VAR 0 4
1998: PPUSH
1999: CALL_OW 255
2003: PUSH
2004: LD_INT 3
2006: EQUAL
2007: AND
2008: IFFALSE 2255
// begin driver = UnitsInside ( i ) [ 1 ] ;
2010: LD_ADDR_VAR 0 9
2014: PUSH
2015: LD_VAR 0 4
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: ST_TO_ADDR
// if driver = Burlak then
2029: LD_VAR 0 9
2033: PUSH
2034: LD_EXP 7
2038: EQUAL
2039: IFFALSE 2049
// driverShortName = Bur ;
2041: LD_ADDR_VAR 0 10
2045: PUSH
2046: LD_STRING Bur
2048: ST_TO_ADDR
// if driver = Karamazov then
2049: LD_VAR 0 9
2053: PUSH
2054: LD_EXP 9
2058: EQUAL
2059: IFFALSE 2069
// driverShortName = Kar ;
2061: LD_ADDR_VAR 0 10
2065: PUSH
2066: LD_STRING Kar
2068: ST_TO_ADDR
// if driver = Petrovova then
2069: LD_VAR 0 9
2073: PUSH
2074: LD_EXP 10
2078: EQUAL
2079: IFFALSE 2089
// driverShortName = Ptr ;
2081: LD_ADDR_VAR 0 10
2085: PUSH
2086: LD_STRING Ptr
2088: ST_TO_ADDR
// if driver = Gleb then
2089: LD_VAR 0 9
2093: PUSH
2094: LD_EXP 11
2098: EQUAL
2099: IFFALSE 2109
// driverShortName = Glb ;
2101: LD_ADDR_VAR 0 10
2105: PUSH
2106: LD_STRING Glb
2108: ST_TO_ADDR
// if driver = Petrosyan then
2109: LD_VAR 0 9
2113: PUSH
2114: LD_EXP 12
2118: EQUAL
2119: IFFALSE 2129
// driverShortName = Pet ;
2121: LD_ADDR_VAR 0 10
2125: PUSH
2126: LD_STRING Pet
2128: ST_TO_ADDR
// if driver = Dolgov then
2129: LD_VAR 0 9
2133: PUSH
2134: LD_EXP 13
2138: EQUAL
2139: IFFALSE 2149
// driverShortName = Dol ;
2141: LD_ADDR_VAR 0 10
2145: PUSH
2146: LD_STRING Dol
2148: ST_TO_ADDR
// if driver = Lipshchin then
2149: LD_VAR 0 9
2153: PUSH
2154: LD_EXP 14
2158: EQUAL
2159: IFFALSE 2169
// driverShortName = Lip ;
2161: LD_ADDR_VAR 0 10
2165: PUSH
2166: LD_STRING Lip
2168: ST_TO_ADDR
// if driver = Titov then
2169: LD_VAR 0 9
2173: PUSH
2174: LD_EXP 15
2178: EQUAL
2179: IFFALSE 2189
// driverShortName = Tit ;
2181: LD_ADDR_VAR 0 10
2185: PUSH
2186: LD_STRING Tit
2188: ST_TO_ADDR
// savedTanks = savedTanks ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
2189: LD_ADDR_EXP 6
2193: PUSH
2194: LD_EXP 6
2198: PUSH
2199: LD_VAR 0 4
2203: PPUSH
2204: CALL_OW 265
2208: PUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 262
2218: PUSH
2219: LD_VAR 0 4
2223: PPUSH
2224: CALL_OW 263
2228: PUSH
2229: LD_VAR 0 4
2233: PPUSH
2234: CALL_OW 264
2238: PUSH
2239: LD_VAR 0 10
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: PUSH
2251: EMPTY
2252: LIST
2253: ADD
2254: ST_TO_ADDR
// end ; RemoveUnit ( i ) ;
2255: LD_VAR 0 4
2259: PPUSH
2260: CALL_OW 64
// end ;
2264: GO 1977
2266: POP
2267: POP
// if tick > mt then
2268: LD_OWVAR 1
2272: PUSH
2273: LD_VAR 0 7
2277: GREATER
2278: IFFALSE 2307
// begin CenterOnUnits ( auta [ 3 ] ) ;
2280: LD_VAR 0 3
2284: PUSH
2285: LD_INT 3
2287: ARRAY
2288: PPUSH
2289: CALL_OW 85
// mt := tick + 0 0$2 ;
2293: LD_ADDR_VAR 0 7
2297: PUSH
2298: LD_OWVAR 1
2302: PUSH
2303: LD_INT 70
2305: PLUS
2306: ST_TO_ADDR
// end ; end ;
2307: GO 1859
// ingame_video := false ;
2309: LD_ADDR_OWVAR 52
2313: PUSH
2314: LD_INT 0
2316: ST_TO_ADDR
// interface_hidden := false ;
2317: LD_ADDR_OWVAR 54
2321: PUSH
2322: LD_INT 0
2324: ST_TO_ADDR
// end ;
2325: LD_VAR 0 1
2329: RET
// every 0 0$0.5 marked 10 do var arabsc , arabsp , i ;
2330: GO 2332
2332: DISABLE
2333: LD_INT 0
2335: PPUSH
2336: PPUSH
2337: PPUSH
// begin ComEnterUnit ( ar1 , b1 ) ;
2338: LD_INT 26
2340: PPUSH
2341: LD_INT 1
2343: PPUSH
2344: CALL_OW 120
// ComEnterUnit ( ar2 , b2 ) ;
2348: LD_INT 16
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 120
// arabsc := FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_vehicle ] ] ) ;
2358: LD_ADDR_VAR 0 1
2362: PUSH
2363: LD_INT 22
2365: PUSH
2366: LD_EXP 3
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 21
2377: PUSH
2378: LD_INT 2
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: ST_TO_ADDR
// arabsp := FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] ] ) diff [ ar1 , ar2 ] ;
2394: LD_ADDR_VAR 0 2
2398: PUSH
2399: LD_INT 22
2401: PUSH
2402: LD_EXP 3
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 21
2413: PUSH
2414: LD_INT 1
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PPUSH
2425: CALL_OW 69
2429: PUSH
2430: LD_INT 26
2432: PUSH
2433: LD_INT 16
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: DIFF
2440: ST_TO_ADDR
// for i := 1 to arabsc do
2441: LD_ADDR_VAR 0 3
2445: PUSH
2446: DOUBLE
2447: LD_INT 1
2449: DEC
2450: ST_TO_ADDR
2451: LD_VAR 0 1
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2487
// begin ComEnterUnit ( arabsp [ i ] , arabsc [ i ] ) ;
2459: LD_VAR 0 2
2463: PUSH
2464: LD_VAR 0 3
2468: ARRAY
2469: PPUSH
2470: LD_VAR 0 1
2474: PUSH
2475: LD_VAR 0 3
2479: ARRAY
2480: PPUSH
2481: CALL_OW 120
// end ;
2485: GO 2456
2487: POP
2488: POP
// while not UnitFilter ( arabsc , [ [ f_occupied ] ] ) do
2489: LD_VAR 0 1
2493: PPUSH
2494: LD_INT 59
2496: PUSH
2497: EMPTY
2498: LIST
2499: PUSH
2500: EMPTY
2501: LIST
2502: PPUSH
2503: CALL_OW 72
2507: NOT
2508: IFFALSE 2519
// wait ( 0 0$1 ) ;
2510: LD_INT 35
2512: PPUSH
2513: CALL_OW 67
2517: GO 2489
// wait ( 0 0$3 ) ;
2519: LD_INT 105
2521: PPUSH
2522: CALL_OW 67
// ComMoveToArea ( arabsc , ru_exit ) ;
2526: LD_VAR 0 1
2530: PPUSH
2531: LD_INT 2
2533: PPUSH
2534: CALL_OW 113
// wait ( 0 0$2 ) ;
2538: LD_INT 70
2540: PPUSH
2541: CALL_OW 67
// ComStop ( arabsc ) ;
2545: LD_VAR 0 1
2549: PPUSH
2550: CALL_OW 141
// wait ( 0 0$1 ) ;
2554: LD_INT 35
2556: PPUSH
2557: CALL_OW 67
// ComMoveToArea ( arabsc , ru_exit ) ;
2561: LD_VAR 0 1
2565: PPUSH
2566: LD_INT 2
2568: PPUSH
2569: CALL_OW 113
// end ;
2573: PPOPN 3
2575: END
// on DestinationUnreachable ( un ) do begin ComStop ( un ) ;
2576: LD_VAR 0 1
2580: PPUSH
2581: CALL_OW 141
// wait ( 0 0$0.5 ) ;
2585: LD_INT 18
2587: PPUSH
2588: CALL_OW 67
// AddComMoveToArea ( un , ru_exit ) ;
2592: LD_VAR 0 1
2596: PPUSH
2597: LD_INT 2
2599: PPUSH
2600: CALL_OW 173
// end ;
2604: PPOPN 1
2606: END
// on Contact ( side1 , side2 ) do begin if ( ( side1 = you ) and ( side2 = arabians ) ) or ( ( side2 = you ) and ( side1 = arabians ) ) then
2607: LD_VAR 0 1
2611: PUSH
2612: LD_EXP 1
2616: EQUAL
2617: PUSH
2618: LD_VAR 0 2
2622: PUSH
2623: LD_EXP 3
2627: EQUAL
2628: AND
2629: PUSH
2630: LD_VAR 0 2
2634: PUSH
2635: LD_EXP 1
2639: EQUAL
2640: PUSH
2641: LD_VAR 0 1
2645: PUSH
2646: LD_EXP 3
2650: EQUAL
2651: AND
2652: OR
2653: IFFALSE 2671
// begin music_nat := nation_arabian_music ;
2655: LD_ADDR_OWVAR 71
2659: PUSH
2660: LD_INT 4
2662: ST_TO_ADDR
// music_class := music_combat ;
2663: LD_ADDR_OWVAR 72
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// end ; end ;
2671: PPOPN 2
2673: END
