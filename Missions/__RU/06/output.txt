// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export vehiclesFrom05 , resourcesFrom05 , fastBreakthrough , stevensStatus , apeTechsStatus ; export techMatPredStatus ; export vehsFrom06 , resourcesFrom06 ; export dial_SibTechsBlocker , dial_VsevolodContactBlocker , dial_TrapDialogBlocker , dial_ConvoyDialogBlocker , dial_NorthBlocker , dial_EndMissionDialogBlocker ; export claimOvsyenkoBase , claimTerminalBase , lostAgainBase ; export immortalVsevolodTeam , savedVsevolod , vsevolodWaitGorky ; export canGoNorth ; export enableVsevolodCounter ; export canSpawnReinforces ; export canEndMission ; export canRemoveUnits ; export timeToAttack ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// YouLost ( Demo ) ;
  20: LD_STRING Demo
  22: PPUSH
  23: CALL_OW 104
// InitMapConfig ;
  27: CALL 315 0 0
// vehiclesFrom05 = LoadVariable ( 05_Tanks_4 , [ ] ) ;
  31: LD_ADDR_EXP 1
  35: PUSH
  36: LD_STRING 05_Tanks_4
  38: PPUSH
  39: EMPTY
  40: PPUSH
  41: CALL_OW 30
  45: ST_TO_ADDR
// resourcesFrom05 = LoadVariable ( 05_ResourcesInCargo_3 , [ ] ) ;
  46: LD_ADDR_EXP 2
  50: PUSH
  51: LD_STRING 05_ResourcesInCargo_3
  53: PPUSH
  54: EMPTY
  55: PPUSH
  56: CALL_OW 30
  60: ST_TO_ADDR
// fastBreakthrough = LoadVariable ( 05_FastBreakthrough_6 , false ) ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 05_FastBreakthrough_6
  68: PPUSH
  69: LD_INT 0
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// stevensStatus = LoadVariable ( 05_StevensStatus_1 , 0 ) ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 05_StevensStatus_1
  84: PPUSH
  85: LD_INT 0
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// apeTechsStatus = LoadVariable ( 05_ApeTechsStatus_7 , [ 0 , 0 , 0 ] ) ;
  93: LD_ADDR_EXP 5
  97: PUSH
  98: LD_STRING 05_ApeTechsStatus_7
 100: PPUSH
 101: LD_INT 0
 103: PUSH
 104: LD_INT 0
 106: PUSH
 107: LD_INT 0
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PPUSH
 115: CALL_OW 30
 119: ST_TO_ADDR
// techMatPredStatus = state_enabled ;
 120: LD_ADDR_EXP 6
 124: PUSH
 125: LD_INT 1
 127: ST_TO_ADDR
// vehsFrom06 = [ ] ;
 128: LD_ADDR_EXP 7
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// resourcesFrom06 = [ ] ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: EMPTY
 141: ST_TO_ADDR
// dial_SibTechsBlocker = false ;
 142: LD_ADDR_EXP 9
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// dial_VsevolodContactBlocker = false ;
 150: LD_ADDR_EXP 10
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// dial_TrapDialogBlocker = false ;
 158: LD_ADDR_EXP 11
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// dial_ConvoyDialogBlocker = false ;
 166: LD_ADDR_EXP 12
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// dial_NorthBlocker = false ;
 174: LD_ADDR_EXP 13
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// dial_EndMissionDialogBlocker = false ;
 182: LD_ADDR_EXP 14
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// claimOvsyenkoBase = false ;
 190: LD_ADDR_EXP 15
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// claimTerminalBase = false ;
 198: LD_ADDR_EXP 16
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// lostAgainBase = false ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// immortalVsevolodTeam = true ;
 214: LD_ADDR_EXP 18
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// savedVsevolod = false ;
 222: LD_ADDR_EXP 19
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// vsevolodWaitGorky = false ;
 230: LD_ADDR_EXP 20
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// enableVsevolodCounter = false ;
 238: LD_ADDR_EXP 22
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// canGoNorth = false ;
 246: LD_ADDR_EXP 21
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// canSpawnReinforces = false ;
 254: LD_ADDR_EXP 23
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// canEndMission = false ;
 262: LD_ADDR_EXP 24
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// canRemoveUnits = false ;
 270: LD_ADDR_EXP 25
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// timeToAttack = 0 0$00 ;
 278: LD_ADDR_EXP 26
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// cratesSpawned = 0 ;
 286: LD_ADDR_EXP 27
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// PrepareRussians ;
 294: CALL 900 0 0
// PrepareAmericans ;
 298: CALL 2952 0 0
// Nef_PrepareNature ;
 302: CALL 4046 0 0
// MissionIntro ;
 306: CALL 15652 0 0
// end ; end_of_file
 310: LD_VAR 0 1
 314: RET
// export function InitMapConfig ; begin
 315: LD_INT 0
 317: PPUSH
// BaseMapConfig ;
 318: CALL 331 0 0
// MissionMapConfig ;
 322: CALL 421 0 0
// end ;
 326: LD_VAR 0 1
 330: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 331: LD_INT 0
 333: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 0 ] ;
 334: LD_ADDR_EXP 28
 338: PUSH
 339: LD_INT 3
 341: PUSH
 342: LD_INT 3
 344: PUSH
 345: LD_INT 1
 347: PUSH
 348: LD_INT 3
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 361: LD_ADDR_EXP 29
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: LD_INT 2
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: ST_TO_ADDR
// animalsAgression = 3 ;
 384: LD_ADDR_EXP 30
 388: PUSH
 389: LD_INT 3
 391: ST_TO_ADDR
// debugMode = 0 ;
 392: LD_ADDR_EXP 33
 396: PUSH
 397: LD_INT 0
 399: ST_TO_ADDR
// missionPrefix = 06_ ;
 400: LD_ADDR_EXP 31
 404: PUSH
 405: LD_STRING 06_
 407: ST_TO_ADDR
// previousMissionPrefix = 05_ ;
 408: LD_ADDR_EXP 32
 412: PUSH
 413: LD_STRING 05_
 415: ST_TO_ADDR
// end ;
 416: LD_VAR 0 1
 420: RET
// export enemySkillLevel ; export ovsyenkoStartCrates , terminalStartSiberite ; export trapAmount ; export vsevolodSaveTime ; function MissionMapConfig ; begin
 421: LD_INT 0
 423: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 ] [ Difficulty ] ;
 424: LD_ADDR_EXP 34
 428: PUSH
 429: LD_INT 3
 431: PUSH
 432: LD_INT 4
 434: PUSH
 435: LD_INT 5
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: LIST
 442: PUSH
 443: LD_OWVAR 67
 447: ARRAY
 448: ST_TO_ADDR
// ovsyenkoStartCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 449: LD_ADDR_EXP 35
 453: PUSH
 454: LD_INT 150
 456: PUSH
 457: LD_INT 100
 459: PUSH
 460: LD_INT 50
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: PUSH
 468: LD_OWVAR 67
 472: ARRAY
 473: ST_TO_ADDR
// terminalStartSiberite = [ 100 , 70 , 50 ] [ Difficulty ] ;
 474: LD_ADDR_EXP 36
 478: PUSH
 479: LD_INT 100
 481: PUSH
 482: LD_INT 70
 484: PUSH
 485: LD_INT 50
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: PUSH
 493: LD_OWVAR 67
 497: ARRAY
 498: ST_TO_ADDR
// trapAmount = [ rand ( 4 , 5 ) , rand ( 5 , 6 ) , rand ( 6 , 7 ) ] [ Difficulty ] ;
 499: LD_ADDR_EXP 37
 503: PUSH
 504: LD_INT 4
 506: PPUSH
 507: LD_INT 5
 509: PPUSH
 510: CALL_OW 12
 514: PUSH
 515: LD_INT 5
 517: PPUSH
 518: LD_INT 6
 520: PPUSH
 521: CALL_OW 12
 525: PUSH
 526: LD_INT 6
 528: PPUSH
 529: LD_INT 7
 531: PPUSH
 532: CALL_OW 12
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: LIST
 541: PUSH
 542: LD_OWVAR 67
 546: ARRAY
 547: ST_TO_ADDR
// vsevolodSaveTime = [ 12 12$0 , 11 11$0 , 10 10$0 ] [ Difficulty ] ;
 548: LD_ADDR_EXP 38
 552: PUSH
 553: LD_INT 25200
 555: PUSH
 556: LD_INT 23100
 558: PUSH
 559: LD_INT 21000
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PUSH
 567: LD_OWVAR 67
 571: ARRAY
 572: ST_TO_ADDR
// end ;
 573: LD_VAR 0 1
 577: RET
// every 0 0$1 trigger debugMode do var i ;
 578: LD_EXP 33
 582: IFFALSE 897
 584: GO 586
 586: DISABLE
 587: LD_INT 0
 589: PPUSH
// begin enable ;
 590: ENABLE
// FogOff ( your_side ) ;
 591: LD_OWVAR 2
 595: PPUSH
 596: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 600: LD_ADDR_VAR 0 1
 604: PUSH
 605: LD_INT 22
 607: PUSH
 608: LD_OWVAR 2
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: LD_INT 2
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 21
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: LIST
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: FOR_IN
 655: IFFALSE 671
// SetLives ( i , 1000 ) ;
 657: LD_VAR 0 1
 661: PPUSH
 662: LD_INT 1000
 664: PPUSH
 665: CALL_OW 234
 669: GO 654
 671: POP
 672: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 673: LD_ADDR_VAR 0 1
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_OWVAR 2
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: PUSH
 690: LD_INT 21
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: PPUSH
 704: CALL_OW 69
 708: PUSH
 709: FOR_IN
 710: IFFALSE 774
// begin SetSkill ( i , skill_combat , 10 ) ;
 712: LD_VAR 0 1
 716: PPUSH
 717: LD_INT 1
 719: PPUSH
 720: LD_INT 10
 722: PPUSH
 723: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 727: LD_VAR 0 1
 731: PPUSH
 732: LD_INT 2
 734: PPUSH
 735: LD_INT 10
 737: PPUSH
 738: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 742: LD_VAR 0 1
 746: PPUSH
 747: LD_INT 3
 749: PPUSH
 750: LD_INT 10
 752: PPUSH
 753: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 757: LD_VAR 0 1
 761: PPUSH
 762: LD_INT 4
 764: PPUSH
 765: LD_INT 10
 767: PPUSH
 768: CALL_OW 237
// end ;
 772: GO 709
 774: POP
 775: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 776: LD_ADDR_VAR 0 1
 780: PUSH
 781: LD_INT 22
 783: PUSH
 784: LD_OWVAR 2
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: LD_INT 2
 795: PUSH
 796: LD_INT 30
 798: PUSH
 799: LD_INT 0
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PUSH
 806: LD_INT 30
 808: PUSH
 809: LD_INT 1
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: PUSH
 830: FOR_IN
 831: IFFALSE 895
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 833: LD_VAR 0 1
 837: PPUSH
 838: CALL_OW 274
 842: PPUSH
 843: LD_INT 1
 845: PPUSH
 846: LD_INT 9999
 848: PPUSH
 849: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 853: LD_VAR 0 1
 857: PPUSH
 858: CALL_OW 274
 862: PPUSH
 863: LD_INT 2
 865: PPUSH
 866: LD_INT 9999
 868: PPUSH
 869: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 873: LD_VAR 0 1
 877: PPUSH
 878: CALL_OW 274
 882: PPUSH
 883: LD_INT 3
 885: PPUSH
 886: LD_INT 9999
 888: PPUSH
 889: CALL_OW 277
// end ;
 893: GO 830
 895: POP
 896: POP
// end ; end_of_file
 897: PPOPN 1
 899: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov , Kirilenkova , Belkov , Belkov2 ; export Vsevolod , vsevolodTeam , Petr , Igor ; export function PrepareRussians ; begin
 900: LD_INT 0
 902: PPUSH
// PrepareHeroes ;
 903: CALL 912 0 0
// end ;
 907: LD_VAR 0 1
 911: RET
// function PrepareHeroes ; var i , j , car , tmp , cargoList , point , areaPoints , nearPosition , burlakPosition , distance , index ; begin
 912: LD_INT 0
 914: PPUSH
 915: PPUSH
 916: PPUSH
 917: PPUSH
 918: PPUSH
 919: PPUSH
 920: PPUSH
 921: PPUSH
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// point = [ 170 , 208 ] ;
 926: LD_ADDR_VAR 0 7
 930: PUSH
 931: LD_INT 170
 933: PUSH
 934: LD_INT 208
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: ST_TO_ADDR
// areaPoints = AreaToList ( RussianSpawnArea1 , 0 ) ;
 941: LD_ADDR_VAR 0 8
 945: PUSH
 946: LD_INT 1
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: CALL_OW 517
 956: ST_TO_ADDR
// uc_side = 3 ;
 957: LD_ADDR_OWVAR 20
 961: PUSH
 962: LD_INT 3
 964: ST_TO_ADDR
// uc_nation = 3 ;
 965: LD_ADDR_OWVAR 21
 969: PUSH
 970: LD_INT 3
 972: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
 973: LD_ADDR_EXP 39
 977: PUSH
 978: LD_STRING Burlak
 980: PPUSH
 981: LD_INT 1
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL 11372 0 3
 991: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
 992: LD_ADDR_EXP 44
 996: PUSH
 997: LD_STRING Titov
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: CALL 11372 0 3
1010: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1011: LD_ADDR_EXP 45
1015: PUSH
1016: LD_STRING Dolgov
1018: PPUSH
1019: LD_INT 1
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: CALL 11372 0 3
1029: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1030: LD_ADDR_EXP 46
1034: PUSH
1035: LD_STRING Lipshchin
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL 11372 0 3
1048: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , true , class_engineer ) ;
1049: LD_ADDR_EXP 40
1053: PUSH
1054: LD_STRING Karamazov
1056: PPUSH
1057: LD_INT 1
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL 11372 0 3
1067: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1068: LD_ADDR_EXP 41
1072: PUSH
1073: LD_STRING Petrovova
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_INT 0
1081: PPUSH
1082: CALL 11372 0 3
1086: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1087: LD_ADDR_EXP 42
1091: PUSH
1092: LD_STRING Gleb
1094: PPUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL 11372 0 3
1105: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1106: LD_ADDR_EXP 43
1110: PUSH
1111: LD_STRING Petrosyan
1113: PPUSH
1114: LD_INT 1
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: CALL 11372 0 3
1124: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1125: LD_ADDR_EXP 47
1129: PUSH
1130: LD_STRING Platonov
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: LD_INT 0
1138: PPUSH
1139: CALL 11372 0 3
1143: ST_TO_ADDR
// if TestCharacters ( 04_Kirilenkova ) then
1144: LD_STRING 04_Kirilenkova
1146: PPUSH
1147: CALL_OW 28
1151: IFFALSE 1178
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1153: LD_ADDR_EXP 48
1157: PUSH
1158: LD_STRING 04_Kirilenkova
1160: PPUSH
1161: CALL_OW 34
1165: ST_TO_ADDR
// SetClass ( Kirilenkova , class_scientistic ) ;
1166: LD_EXP 48
1170: PPUSH
1171: LD_INT 4
1173: PPUSH
1174: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov ) then
1178: LD_STRING 04_Belkov
1180: PPUSH
1181: CALL_OW 28
1185: IFFALSE 1212
// begin Belkov := CreateCharacter ( 04_Belkov ) ;
1187: LD_ADDR_EXP 49
1191: PUSH
1192: LD_STRING 04_Belkov
1194: PPUSH
1195: CALL_OW 34
1199: ST_TO_ADDR
// SetClass ( Belkov , class_soldier ) ;
1200: LD_EXP 49
1204: PPUSH
1205: LD_INT 1
1207: PPUSH
1208: CALL_OW 336
// end ; if TestCharacters ( 04_Belkov2 ) then
1212: LD_STRING 04_Belkov2
1214: PPUSH
1215: CALL_OW 28
1219: IFFALSE 1246
// begin Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1221: LD_ADDR_EXP 50
1225: PUSH
1226: LD_STRING 04_Belkov2
1228: PPUSH
1229: CALL_OW 34
1233: ST_TO_ADDR
// SetClass ( Belkov2 , class_soldier ) ;
1234: LD_EXP 50
1238: PPUSH
1239: LD_INT 1
1241: PPUSH
1242: CALL_OW 336
// end ; for i := 1 to vehiclesFrom05 do
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: DOUBLE
1252: LD_INT 1
1254: DEC
1255: ST_TO_ADDR
1256: LD_EXP 1
1260: PUSH
1261: FOR_TO
1262: IFFALSE 1924
// begin uc_nation = vehiclesFrom05 [ i ] [ 1 ] ;
1264: LD_ADDR_OWVAR 21
1268: PUSH
1269: LD_EXP 1
1273: PUSH
1274: LD_VAR 0 2
1278: ARRAY
1279: PUSH
1280: LD_INT 1
1282: ARRAY
1283: ST_TO_ADDR
// vc_chassis := vehiclesFrom05 [ i ] [ 2 ] ;
1284: LD_ADDR_OWVAR 37
1288: PUSH
1289: LD_EXP 1
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 2
1302: ARRAY
1303: ST_TO_ADDR
// vc_engine = vehiclesFrom05 [ i ] [ 3 ] ;
1304: LD_ADDR_OWVAR 39
1308: PUSH
1309: LD_EXP 1
1313: PUSH
1314: LD_VAR 0 2
1318: ARRAY
1319: PUSH
1320: LD_INT 3
1322: ARRAY
1323: ST_TO_ADDR
// vc_control = vehiclesFrom05 [ i ] [ 4 ] ;
1324: LD_ADDR_OWVAR 38
1328: PUSH
1329: LD_EXP 1
1333: PUSH
1334: LD_VAR 0 2
1338: ARRAY
1339: PUSH
1340: LD_INT 4
1342: ARRAY
1343: ST_TO_ADDR
// vc_weapon := vehiclesFrom05 [ i ] [ 5 ] ;
1344: LD_ADDR_OWVAR 40
1348: PUSH
1349: LD_EXP 1
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: PUSH
1360: LD_INT 5
1362: ARRAY
1363: ST_TO_ADDR
// uc_direction := 0 ;
1364: LD_ADDR_OWVAR 24
1368: PUSH
1369: LD_INT 0
1371: ST_TO_ADDR
// vc_fuel_battery := Rand ( 10 , 15 ) ;
1372: LD_ADDR_OWVAR 41
1376: PUSH
1377: LD_INT 10
1379: PPUSH
1380: LD_INT 15
1382: PPUSH
1383: CALL_OW 12
1387: ST_TO_ADDR
// car := CreateVehicle ;
1388: LD_ADDR_VAR 0 4
1392: PUSH
1393: CALL_OW 45
1397: ST_TO_ADDR
// distance = 999 ;
1398: LD_ADDR_VAR 0 11
1402: PUSH
1403: LD_INT 999
1405: ST_TO_ADDR
// index = 1 ;
1406: LD_ADDR_VAR 0 12
1410: PUSH
1411: LD_INT 1
1413: ST_TO_ADDR
// for j := 1 to areaPoints [ 1 ] do
1414: LD_ADDR_VAR 0 3
1418: PUSH
1419: DOUBLE
1420: LD_INT 1
1422: DEC
1423: ST_TO_ADDR
1424: LD_VAR 0 8
1428: PUSH
1429: LD_INT 1
1431: ARRAY
1432: PUSH
1433: FOR_TO
1434: IFFALSE 1605
// begin if GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) < distance then
1436: LD_VAR 0 7
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 7
1449: PUSH
1450: LD_INT 2
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_INT 1
1461: ARRAY
1462: PUSH
1463: LD_VAR 0 3
1467: ARRAY
1468: PPUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_INT 2
1476: ARRAY
1477: PUSH
1478: LD_VAR 0 3
1482: ARRAY
1483: PPUSH
1484: CALL_OW 298
1488: PUSH
1489: LD_VAR 0 11
1493: LESS
1494: IFFALSE 1603
// begin distance = GetDistXY ( point [ 1 ] , point [ 2 ] , areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ) ;
1496: LD_ADDR_VAR 0 11
1500: PUSH
1501: LD_VAR 0 7
1505: PUSH
1506: LD_INT 1
1508: ARRAY
1509: PPUSH
1510: LD_VAR 0 7
1514: PUSH
1515: LD_INT 2
1517: ARRAY
1518: PPUSH
1519: LD_VAR 0 8
1523: PUSH
1524: LD_INT 1
1526: ARRAY
1527: PUSH
1528: LD_VAR 0 3
1532: ARRAY
1533: PPUSH
1534: LD_VAR 0 8
1538: PUSH
1539: LD_INT 2
1541: ARRAY
1542: PUSH
1543: LD_VAR 0 3
1547: ARRAY
1548: PPUSH
1549: CALL_OW 298
1553: ST_TO_ADDR
// nearPosition = [ areaPoints [ 1 ] [ j ] , areaPoints [ 2 ] [ j ] ] ;
1554: LD_ADDR_VAR 0 9
1558: PUSH
1559: LD_VAR 0 8
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PUSH
1568: LD_VAR 0 3
1572: ARRAY
1573: PUSH
1574: LD_VAR 0 8
1578: PUSH
1579: LD_INT 2
1581: ARRAY
1582: PUSH
1583: LD_VAR 0 3
1587: ARRAY
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: ST_TO_ADDR
// index = j ;
1593: LD_ADDR_VAR 0 12
1597: PUSH
1598: LD_VAR 0 3
1602: ST_TO_ADDR
// end ; end ;
1603: GO 1433
1605: POP
1606: POP
// if not burlakPosition then
1607: LD_VAR 0 10
1611: NOT
1612: IFFALSE 1624
// burlakPosition = nearPosition ;
1614: LD_ADDR_VAR 0 10
1618: PUSH
1619: LD_VAR 0 9
1623: ST_TO_ADDR
// if areaPoints then
1624: LD_VAR 0 8
1628: IFFALSE 1676
// begin areaPoints = Delete2D ( areaPoints , 1 , index ) ;
1630: LD_ADDR_VAR 0 8
1634: PUSH
1635: LD_VAR 0 8
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: LD_VAR 0 12
1647: PPUSH
1648: CALL 12201 0 3
1652: ST_TO_ADDR
// areaPoints = Delete2D ( areaPoints , 2 , index ) ;
1653: LD_ADDR_VAR 0 8
1657: PUSH
1658: LD_VAR 0 8
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: LD_VAR 0 12
1670: PPUSH
1671: CALL 12201 0 3
1675: ST_TO_ADDR
// end ; PlaceUnitXY ( car , nearPosition [ 1 ] , nearPosition [ 2 ] , false ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_VAR 0 9
1685: PUSH
1686: LD_INT 1
1688: ARRAY
1689: PPUSH
1690: LD_VAR 0 9
1694: PUSH
1695: LD_INT 2
1697: ARRAY
1698: PPUSH
1699: LD_INT 0
1701: PPUSH
1702: CALL_OW 48
// case vehiclesFrom05 [ i ] [ 6 ] of Bur :
1706: LD_EXP 1
1710: PUSH
1711: LD_VAR 0 2
1715: ARRAY
1716: PUSH
1717: LD_INT 6
1719: ARRAY
1720: PUSH
1721: LD_STRING Bur
1723: DOUBLE
1724: EQUAL
1725: IFTRUE 1729
1727: GO 1746
1729: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1730: LD_EXP 39
1734: PPUSH
1735: LD_VAR 0 4
1739: PPUSH
1740: CALL_OW 52
1744: GO 1922
1746: LD_STRING Kar
1748: DOUBLE
1749: EQUAL
1750: IFTRUE 1754
1752: GO 1771
1754: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1755: LD_EXP 40
1759: PPUSH
1760: LD_VAR 0 4
1764: PPUSH
1765: CALL_OW 52
1769: GO 1922
1771: LD_STRING Ptr
1773: DOUBLE
1774: EQUAL
1775: IFTRUE 1779
1777: GO 1796
1779: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1780: LD_EXP 41
1784: PPUSH
1785: LD_VAR 0 4
1789: PPUSH
1790: CALL_OW 52
1794: GO 1922
1796: LD_STRING Glb
1798: DOUBLE
1799: EQUAL
1800: IFTRUE 1804
1802: GO 1821
1804: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1805: LD_EXP 42
1809: PPUSH
1810: LD_VAR 0 4
1814: PPUSH
1815: CALL_OW 52
1819: GO 1922
1821: LD_STRING Pet
1823: DOUBLE
1824: EQUAL
1825: IFTRUE 1829
1827: GO 1846
1829: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1830: LD_EXP 43
1834: PPUSH
1835: LD_VAR 0 4
1839: PPUSH
1840: CALL_OW 52
1844: GO 1922
1846: LD_STRING Dol
1848: DOUBLE
1849: EQUAL
1850: IFTRUE 1854
1852: GO 1871
1854: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1855: LD_EXP 45
1859: PPUSH
1860: LD_VAR 0 4
1864: PPUSH
1865: CALL_OW 52
1869: GO 1922
1871: LD_STRING Lip
1873: DOUBLE
1874: EQUAL
1875: IFTRUE 1879
1877: GO 1896
1879: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1880: LD_EXP 46
1884: PPUSH
1885: LD_VAR 0 4
1889: PPUSH
1890: CALL_OW 52
1894: GO 1922
1896: LD_STRING Tit
1898: DOUBLE
1899: EQUAL
1900: IFTRUE 1904
1902: GO 1921
1904: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1905: LD_EXP 44
1909: PPUSH
1910: LD_VAR 0 4
1914: PPUSH
1915: CALL_OW 52
1919: GO 1922
1921: POP
// end ;
1922: GO 1261
1924: POP
1925: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
1926: LD_ADDR_VAR 0 6
1930: PUSH
1931: LD_INT 22
1933: PUSH
1934: LD_INT 3
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 21
1943: PUSH
1944: LD_INT 2
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 2
1953: PUSH
1954: LD_INT 34
1956: PUSH
1957: LD_INT 51
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 34
1966: PUSH
1967: LD_INT 32
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PPUSH
1984: CALL_OW 69
1988: ST_TO_ADDR
// if cargoList then
1989: LD_VAR 0 6
1993: IFFALSE 2122
// for i = 1 to cargoList do
1995: LD_ADDR_VAR 0 2
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_VAR 0 6
2009: PUSH
2010: FOR_TO
2011: IFFALSE 2120
// if resourcesFrom05 then
2013: LD_EXP 2
2017: IFFALSE 2118
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom05 [ i ] [ 1 ] ) ;
2019: LD_VAR 0 6
2023: PUSH
2024: LD_VAR 0 2
2028: ARRAY
2029: PPUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_EXP 2
2037: PUSH
2038: LD_VAR 0 2
2042: ARRAY
2043: PUSH
2044: LD_INT 1
2046: ARRAY
2047: PPUSH
2048: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom05 [ i ] [ 2 ] ) ;
2052: LD_VAR 0 6
2056: PUSH
2057: LD_VAR 0 2
2061: ARRAY
2062: PPUSH
2063: LD_INT 2
2065: PPUSH
2066: LD_EXP 2
2070: PUSH
2071: LD_VAR 0 2
2075: ARRAY
2076: PUSH
2077: LD_INT 2
2079: ARRAY
2080: PPUSH
2081: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom05 [ i ] [ 3 ] ) ;
2085: LD_VAR 0 6
2089: PUSH
2090: LD_VAR 0 2
2094: ARRAY
2095: PPUSH
2096: LD_INT 3
2098: PPUSH
2099: LD_EXP 2
2103: PUSH
2104: LD_VAR 0 2
2108: ARRAY
2109: PUSH
2110: LD_INT 3
2112: ARRAY
2113: PPUSH
2114: CALL_OW 291
// end ;
2118: GO 2010
2120: POP
2121: POP
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) then
2122: LD_INT 22
2124: PUSH
2125: LD_INT 3
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: LD_INT 21
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 25
2154: PUSH
2155: LD_INT 2
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: PPUSH
2168: CALL_OW 69
2172: NOT
2173: IFFALSE 2278
// begin if IsOk ( Lipshchin ) then
2175: LD_EXP 46
2179: PPUSH
2180: CALL_OW 302
2184: IFFALSE 2200
// SetClass ( Lipshchin , class_engineer ) else
2186: LD_EXP 46
2190: PPUSH
2191: LD_INT 2
2193: PPUSH
2194: CALL_OW 336
2198: GO 2278
// begin tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
2200: LD_ADDR_VAR 0 5
2204: PUSH
2205: LD_INT 22
2207: PUSH
2208: LD_INT 3
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 21
2217: PUSH
2218: LD_INT 1
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: LD_INT 23
2227: PUSH
2228: LD_INT 3
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 50
2237: PUSH
2238: EMPTY
2239: LIST
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: PPUSH
2247: CALL_OW 69
2251: ST_TO_ADDR
// SetClass ( tmp [ rand ( 0 , tmp ) ] , class_engineer ) ;
2252: LD_VAR 0 5
2256: PUSH
2257: LD_INT 0
2259: PPUSH
2260: LD_VAR 0 5
2264: PPUSH
2265: CALL_OW 12
2269: ARRAY
2270: PPUSH
2271: LD_INT 2
2273: PPUSH
2274: CALL_OW 336
// end ; end ; SetTech ( tech_ApeLang , 3 , apeTechsStatus [ 1 ] ) ;
2278: LD_INT 1
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_EXP 5
2288: PUSH
2289: LD_INT 1
2291: ARRAY
2292: PPUSH
2293: CALL_OW 322
// SetTech ( tech_ApePsych , 3 , apeTechsStatus [ 2 ] ) ;
2297: LD_INT 2
2299: PPUSH
2300: LD_INT 3
2302: PPUSH
2303: LD_EXP 5
2307: PUSH
2308: LD_INT 2
2310: ARRAY
2311: PPUSH
2312: CALL_OW 322
// SetTech ( tech_ApeAgres , 3 , apeTechsStatus [ 3 ] ) ;
2316: LD_INT 11
2318: PPUSH
2319: LD_INT 3
2321: PPUSH
2322: LD_EXP 5
2326: PUSH
2327: LD_INT 3
2329: ARRAY
2330: PPUSH
2331: CALL_OW 322
// end ;
2335: LD_VAR 0 1
2339: RET
// export function PrepareVsevolod ; var i , un ; begin
2340: LD_INT 0
2342: PPUSH
2343: PPUSH
2344: PPUSH
// uc_side = 6 ;
2345: LD_ADDR_OWVAR 20
2349: PUSH
2350: LD_INT 6
2352: ST_TO_ADDR
// uc_nation = 3 ;
2353: LD_ADDR_OWVAR 21
2357: PUSH
2358: LD_INT 3
2360: ST_TO_ADDR
// vsevolodTeam = [ ] ;
2361: LD_ADDR_EXP 52
2365: PUSH
2366: EMPTY
2367: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , false , class_soldier ) ;
2368: LD_ADDR_EXP 51
2372: PUSH
2373: LD_STRING Vsevolod
2375: PPUSH
2376: LD_INT 0
2378: PPUSH
2379: LD_INT 1
2381: PPUSH
2382: CALL 11372 0 3
2386: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , VsevolodSpawnArea , false ) ;
2387: LD_EXP 51
2391: PPUSH
2392: LD_INT 7
2394: PPUSH
2395: LD_INT 0
2397: PPUSH
2398: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Vsevolod ;
2402: LD_ADDR_EXP 52
2406: PUSH
2407: LD_EXP 52
2411: PUSH
2412: LD_EXP 51
2416: ADD
2417: ST_TO_ADDR
// Petr = PrepareUnitExt ( SPetr , false , class_soldier ) ;
2418: LD_ADDR_EXP 53
2422: PUSH
2423: LD_STRING SPetr
2425: PPUSH
2426: LD_INT 0
2428: PPUSH
2429: LD_INT 1
2431: PPUSH
2432: CALL 11372 0 3
2436: ST_TO_ADDR
// PlaceUnitArea ( Petr , VsevolodSpawnArea , false ) ;
2437: LD_EXP 53
2441: PPUSH
2442: LD_INT 7
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Petr ;
2452: LD_ADDR_EXP 52
2456: PUSH
2457: LD_EXP 52
2461: PUSH
2462: LD_EXP 53
2466: ADD
2467: ST_TO_ADDR
// Igor = PrepareUnitExt ( SIgor , false , class_soldier ) ;
2468: LD_ADDR_EXP 54
2472: PUSH
2473: LD_STRING SIgor
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL 11372 0 3
2486: ST_TO_ADDR
// PlaceUnitArea ( Igor , VsevolodSpawnArea , false ) ;
2487: LD_EXP 54
2491: PPUSH
2492: LD_INT 7
2494: PPUSH
2495: LD_INT 0
2497: PPUSH
2498: CALL_OW 49
// vsevolodTeam = vsevolodTeam ^ Igor ;
2502: LD_ADDR_EXP 52
2506: PUSH
2507: LD_EXP 52
2511: PUSH
2512: LD_EXP 54
2516: ADD
2517: ST_TO_ADDR
// end ;
2518: LD_VAR 0 1
2522: RET
// export function SpawnPlatonovReinforces ; var i , un , veh ; begin
2523: LD_INT 0
2525: PPUSH
2526: PPUSH
2527: PPUSH
2528: PPUSH
// uc_side = 3 ;
2529: LD_ADDR_OWVAR 20
2533: PUSH
2534: LD_INT 3
2536: ST_TO_ADDR
// uc_nation = 3 ;
2537: LD_ADDR_OWVAR 21
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
2545: LD_INT 0
2547: PPUSH
2548: LD_INT 4
2550: PPUSH
2551: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
2555: LD_INT 22
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: LD_INT 43
2566: PUSH
2567: LD_INT 44
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 1
2576: PPUSH
2577: LD_INT 2
2579: PPUSH
2580: CALL_OW 12
2584: ARRAY
2585: PPUSH
2586: LD_INT 50
2588: PPUSH
2589: LD_INT 60
2591: PPUSH
2592: CALL_OW 12
2596: PPUSH
2597: CALL 45679 0 5
// veh = CreateVehicle ;
2601: LD_ADDR_VAR 0 4
2605: PUSH
2606: CALL_OW 45
2610: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2611: LD_VAR 0 4
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 230 , false ) ;
2623: LD_VAR 0 4
2627: PPUSH
2628: LD_INT 134
2630: PPUSH
2631: LD_INT 230
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 48
// if Belkov then
2641: LD_EXP 49
2645: IFFALSE 2663
// PlaceHumanInUnit ( Belkov , veh ) else
2647: LD_EXP 49
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: CALL_OW 52
2661: GO 2707
// if Difficulty = 1 or Difficulty = 2 then
2663: LD_OWVAR 67
2667: PUSH
2668: LD_INT 1
2670: EQUAL
2671: PUSH
2672: LD_OWVAR 67
2676: PUSH
2677: LD_INT 2
2679: EQUAL
2680: OR
2681: IFFALSE 2707
// begin un = CreateHuman ;
2683: LD_ADDR_VAR 0 3
2687: PUSH
2688: CALL_OW 44
2692: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2693: LD_VAR 0 3
2697: PPUSH
2698: LD_VAR 0 4
2702: PPUSH
2703: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
2707: LD_INT 22
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: LD_INT 1
2715: PPUSH
2716: LD_INT 51
2718: PPUSH
2719: LD_INT 50
2721: PPUSH
2722: LD_INT 60
2724: PPUSH
2725: CALL_OW 12
2729: PPUSH
2730: CALL 45679 0 5
// veh = CreateVehicle ;
2734: LD_ADDR_VAR 0 4
2738: PUSH
2739: CALL_OW 45
2743: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2744: LD_VAR 0 4
2748: PPUSH
2749: LD_INT 0
2751: PPUSH
2752: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 233 , false ) ;
2756: LD_VAR 0 4
2760: PPUSH
2761: LD_INT 134
2763: PPUSH
2764: LD_INT 233
2766: PPUSH
2767: LD_INT 0
2769: PPUSH
2770: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2774: LD_VAR 0 4
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: LD_INT 100
2784: PPUSH
2785: CALL_OW 290
// if Belkov2 then
2789: LD_EXP 50
2793: IFFALSE 2811
// PlaceHumanInUnit ( Belkov2 , veh ) else
2795: LD_EXP 50
2799: PPUSH
2800: LD_VAR 0 4
2804: PPUSH
2805: CALL_OW 52
2809: GO 2845
// if Difficulty = 1 then
2811: LD_OWVAR 67
2815: PUSH
2816: LD_INT 1
2818: EQUAL
2819: IFFALSE 2845
// begin un = CreateHuman ;
2821: LD_ADDR_VAR 0 3
2825: PUSH
2826: CALL_OW 44
2830: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_VAR 0 4
2840: PPUSH
2841: CALL_OW 52
// end ; if Kirilenkova then
2845: LD_EXP 48
2849: IFFALSE 2947
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
2851: LD_INT 22
2853: PPUSH
2854: LD_INT 1
2856: PPUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 51
2862: PPUSH
2863: LD_INT 50
2865: PPUSH
2866: LD_INT 60
2868: PPUSH
2869: CALL_OW 12
2873: PPUSH
2874: CALL 45679 0 5
// veh = CreateVehicle ;
2878: LD_ADDR_VAR 0 4
2882: PUSH
2883: CALL_OW 45
2887: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2888: LD_VAR 0 4
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL_OW 233
// PlaceUnitXY ( veh , 134 , 236 , false ) ;
2900: LD_VAR 0 4
2904: PPUSH
2905: LD_INT 134
2907: PPUSH
2908: LD_INT 236
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2918: LD_VAR 0 4
2922: PPUSH
2923: LD_INT 1
2925: PPUSH
2926: LD_INT 100
2928: PPUSH
2929: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
2933: LD_EXP 48
2937: PPUSH
2938: LD_VAR 0 4
2942: PPUSH
2943: CALL_OW 52
// end ; end ; end_of_file
2947: LD_VAR 0 1
2951: RET
// export VanHouten ; export ovsyenkoBase , terminalBase , headAmBase ; export trapTeam , convoyTeam , attackTeam ; export function PrepareAmericans ; begin
2952: LD_INT 0
2954: PPUSH
// PrepareOvsyenko ;
2955: CALL 2972 0 0
// PrepareTerminal ;
2959: CALL 3167 0 0
// PrepareMainAmericanBase ;
2963: CALL 3250 0 0
// end ;
2967: LD_VAR 0 1
2971: RET
// function PrepareOvsyenko ; var soldiersAmount ; begin
2972: LD_INT 0
2974: PPUSH
2975: PPUSH
// uc_side = 1 ;
2976: LD_ADDR_OWVAR 20
2980: PUSH
2981: LD_INT 1
2983: ST_TO_ADDR
// uc_nation = nation_american ;
2984: LD_ADDR_OWVAR 21
2988: PUSH
2989: LD_INT 1
2991: ST_TO_ADDR
// soldiersAmount = 3 ;
2992: LD_ADDR_VAR 0 2
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// if fastBreakthrough then
3000: LD_EXP 3
3004: IFFALSE 3022
// begin RemoveUnit ( ovs_bun2 ) ;
3006: LD_INT 229
3008: PPUSH
3009: CALL_OW 64
// RemoveUnit ( ovs_bun3 ) ;
3013: LD_INT 258
3015: PPUSH
3016: CALL_OW 64
// end else
3020: GO 3030
// soldiersAmount = 4 ;
3022: LD_ADDR_VAR 0 2
3026: PUSH
3027: LD_INT 4
3029: ST_TO_ADDR
// ovsyenkoBase := Nef_PrepareBase ( ovsyenko , OvsyenkoBaseArea , ovsyenko , enemySkillLevel , [ ovsyenkoStartCrates , 50 , 0 ] , 1 , [ soldiersAmount , 1 , 0 , 1 ] ) ;
3030: LD_ADDR_EXP 56
3034: PUSH
3035: LD_INT 86
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_STRING ovsyenko
3043: PPUSH
3044: LD_EXP 34
3048: PPUSH
3049: LD_EXP 35
3053: PUSH
3054: LD_INT 50
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PPUSH
3065: LD_INT 1
3067: PPUSH
3068: LD_VAR 0 2
3072: PUSH
3073: LD_INT 1
3075: PUSH
3076: LD_INT 0
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: PPUSH
3088: CALL 12273 0 7
3092: ST_TO_ADDR
// case Difficulty of 1 :
3093: LD_OWVAR 67
3097: PUSH
3098: LD_INT 1
3100: DOUBLE
3101: EQUAL
3102: IFTRUE 3106
3104: GO 3119
3106: POP
// PlaceWeaponTurret ( ovs_bun1 , us_double_gun ) ; 2 :
3107: LD_INT 97
3109: PPUSH
3110: LD_INT 5
3112: PPUSH
3113: CALL_OW 431
3117: GO 3162
3119: LD_INT 2
3121: DOUBLE
3122: EQUAL
3123: IFTRUE 3127
3125: GO 3140
3127: POP
// PlaceWeaponTurret ( ovs_bun1 , us_light_gun ) ; 3 :
3128: LD_INT 97
3130: PPUSH
3131: LD_INT 3
3133: PPUSH
3134: CALL_OW 431
3138: GO 3162
3140: LD_INT 3
3142: DOUBLE
3143: EQUAL
3144: IFTRUE 3148
3146: GO 3161
3148: POP
// PlaceWeaponTurret ( ovs_bun1 , us_gatling_gun ) ; end ;
3149: LD_INT 97
3151: PPUSH
3152: LD_INT 4
3154: PPUSH
3155: CALL_OW 431
3159: GO 3162
3161: POP
// end ;
3162: LD_VAR 0 1
3166: RET
// function PrepareTerminal ; begin
3167: LD_INT 0
3169: PPUSH
// uc_side = 1 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 1
3177: ST_TO_ADDR
// uc_nation = nation_american ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 1
3185: ST_TO_ADDR
// terminalBase := Nef_PrepareBase ( terminal , terminalBaseArea , terminal , enemySkillLevel , [ 100 , 50 , 0 ] , 1 , [ 2 , 1 , 0 , 0 ] ) ;
3186: LD_ADDR_EXP 57
3190: PUSH
3191: LD_INT 168
3193: PPUSH
3194: LD_INT 4
3196: PPUSH
3197: LD_STRING terminal
3199: PPUSH
3200: LD_EXP 34
3204: PPUSH
3205: LD_INT 100
3207: PUSH
3208: LD_INT 50
3210: PUSH
3211: LD_INT 0
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: LIST
3218: PPUSH
3219: LD_INT 1
3221: PPUSH
3222: LD_INT 2
3224: PUSH
3225: LD_INT 1
3227: PUSH
3228: LD_INT 0
3230: PUSH
3231: LD_INT 0
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: PPUSH
3240: CALL 12273 0 7
3244: ST_TO_ADDR
// end ;
3245: LD_VAR 0 1
3249: RET
// function PrepareMainAmericanBase ; begin
3250: LD_INT 0
3252: PPUSH
// uc_side = 1 ;
3253: LD_ADDR_OWVAR 20
3257: PUSH
3258: LD_INT 1
3260: ST_TO_ADDR
// uc_nation = nation_american ;
3261: LD_ADDR_OWVAR 21
3265: PUSH
3266: LD_INT 1
3268: ST_TO_ADDR
// if fastBreakthrough then
3269: LD_EXP 3
3273: IFFALSE 3282
// RemoveUnit ( ovs_bun2 ) ;
3275: LD_INT 229
3277: PPUSH
3278: CALL_OW 64
// headAmBase := Nef_PrepareBase ( headamdepot , HeadAmericanBaseArea ,  , enemySkillLevel , [ 3000 , 1000 , 0 ] , 1 , [ 9 , 3 , 6 , 2 ] ) ;
3282: LD_ADDR_EXP 58
3286: PUSH
3287: LD_INT 106
3289: PPUSH
3290: LD_INT 5
3292: PPUSH
3293: LD_STRING 
3295: PPUSH
3296: LD_EXP 34
3300: PPUSH
3301: LD_INT 3000
3303: PUSH
3304: LD_INT 1000
3306: PUSH
3307: LD_INT 0
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: LD_INT 9
3320: PUSH
3321: LD_INT 3
3323: PUSH
3324: LD_INT 6
3326: PUSH
3327: LD_INT 2
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL 12273 0 7
3340: ST_TO_ADDR
// VanHouten = PrepareUnitExt ( VanHouten , false , class_soldier ) ;
3341: LD_ADDR_EXP 55
3345: PUSH
3346: LD_STRING VanHouten
3348: PPUSH
3349: LD_INT 0
3351: PPUSH
3352: LD_INT 1
3354: PPUSH
3355: CALL 11372 0 3
3359: ST_TO_ADDR
// headAmBase = headAmBase ^ VanHouten ;
3360: LD_ADDR_EXP 58
3364: PUSH
3365: LD_EXP 58
3369: PUSH
3370: LD_EXP 55
3374: ADD
3375: ST_TO_ADDR
// PlaceUnitXYR ( VanHouten , 35 , 57 , 3 , false ) ;
3376: LD_EXP 55
3380: PPUSH
3381: LD_INT 35
3383: PPUSH
3384: LD_INT 57
3386: PPUSH
3387: LD_INT 3
3389: PPUSH
3390: LD_INT 0
3392: PPUSH
3393: CALL_OW 50
// end ;
3397: LD_VAR 0 1
3401: RET
// export function PrepareTrap ; var i , un , nearEnemyUnit ; begin
3402: LD_INT 0
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
// uc_side = 1 ;
3408: LD_ADDR_OWVAR 20
3412: PUSH
3413: LD_INT 1
3415: ST_TO_ADDR
// uc_nation = nation_american ;
3416: LD_ADDR_OWVAR 21
3420: PUSH
3421: LD_INT 1
3423: ST_TO_ADDR
// for i := 1 to trapAmount do
3424: LD_ADDR_VAR 0 2
3428: PUSH
3429: DOUBLE
3430: LD_INT 1
3432: DEC
3433: ST_TO_ADDR
3434: LD_EXP 37
3438: PUSH
3439: FOR_TO
3440: IFFALSE 3559
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3442: LD_INT 0
3444: PPUSH
3445: LD_EXP 34
3449: PPUSH
3450: CALL_OW 381
// un = CreateHuman ;
3454: LD_ADDR_VAR 0 3
3458: PUSH
3459: CALL_OW 44
3463: ST_TO_ADDR
// trapTeam = trapTeam ^ un ;
3464: LD_ADDR_EXP 59
3468: PUSH
3469: LD_EXP 59
3473: PUSH
3474: LD_VAR 0 3
3478: ADD
3479: ST_TO_ADDR
// PlaceUnitArea ( un , TrapSpawnArea , false ) ;
3480: LD_VAR 0 3
3484: PPUSH
3485: LD_INT 11
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: CALL_OW 49
// nearEnemyUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , un ) ;
3495: LD_ADDR_VAR 0 4
3499: PUSH
3500: LD_INT 22
3502: PUSH
3503: LD_INT 3
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: PPUSH
3518: LD_VAR 0 3
3522: PPUSH
3523: CALL_OW 74
3527: ST_TO_ADDR
// ComAgressiveMove ( un , GetX ( nearEnemyUnit ) , GetY ( nearEnemyUnit ) ) ;
3528: LD_VAR 0 3
3532: PPUSH
3533: LD_VAR 0 4
3537: PPUSH
3538: CALL_OW 250
3542: PPUSH
3543: LD_VAR 0 4
3547: PPUSH
3548: CALL_OW 251
3552: PPUSH
3553: CALL_OW 114
// end ;
3557: GO 3439
3559: POP
3560: POP
// end ;
3561: LD_VAR 0 1
3565: RET
// export function PrepareSoldiersInBunkers ; begin
3566: LD_INT 0
3568: PPUSH
// PrepareSolBun ( enemySkilLLevel , non_bun1 ) ;
3569: LD_EXP 34
3573: PPUSH
3574: LD_INT 236
3576: PPUSH
3577: CALL 14814 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun2 ) ;
3581: LD_EXP 34
3585: PPUSH
3586: LD_INT 240
3588: PPUSH
3589: CALL 14814 0 2
// PrepareSolBun ( enemySkilLLevel , non_bun3 ) ;
3593: LD_EXP 34
3597: PPUSH
3598: LD_INT 243
3600: PPUSH
3601: CALL 14814 0 2
// end ;
3605: LD_VAR 0 1
3609: RET
// export function PrepareConvoy ; var i , un , veh ; begin
3610: LD_INT 0
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
// convoyTeam = [ ] ;
3616: LD_ADDR_EXP 60
3620: PUSH
3621: EMPTY
3622: ST_TO_ADDR
// uc_side = 1 ;
3623: LD_ADDR_OWVAR 20
3627: PUSH
3628: LD_INT 1
3630: ST_TO_ADDR
// uc_nation = nation_american ;
3631: LD_ADDR_OWVAR 21
3635: PUSH
3636: LD_INT 1
3638: ST_TO_ADDR
// for i := 1 to 2 do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: DOUBLE
3645: LD_INT 1
3647: DEC
3648: ST_TO_ADDR
3649: LD_INT 2
3651: PUSH
3652: FOR_TO
3653: IFFALSE 3784
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
3655: LD_INT 3
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: LD_INT 1
3663: PPUSH
3664: LD_INT 12
3666: PPUSH
3667: LD_INT 80
3669: PPUSH
3670: CALL 45679 0 5
// veh = CreateVehicle ;
3674: LD_ADDR_VAR 0 4
3678: PUSH
3679: CALL_OW 45
3683: ST_TO_ADDR
// AddCargo ( veh , mat_cans , 100 ) ;
3684: LD_VAR 0 4
3688: PPUSH
3689: LD_INT 1
3691: PPUSH
3692: LD_INT 100
3694: PPUSH
3695: CALL_OW 291
// convoyTeam = convoyTeam ^ veh ;
3699: LD_ADDR_EXP 60
3703: PUSH
3704: LD_EXP 60
3708: PUSH
3709: LD_VAR 0 4
3713: ADD
3714: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea1 , false ) ;
3715: LD_VAR 0 4
3719: PPUSH
3720: LD_INT 8
3722: PPUSH
3723: LD_INT 0
3725: PPUSH
3726: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
3730: LD_INT 0
3732: PPUSH
3733: LD_EXP 34
3737: PPUSH
3738: CALL_OW 383
// un = CreateHuman ;
3742: LD_ADDR_VAR 0 3
3746: PUSH
3747: CALL_OW 44
3751: ST_TO_ADDR
// convoyTeam = convoyTeam ^ un ;
3752: LD_ADDR_EXP 60
3756: PUSH
3757: LD_EXP 60
3761: PUSH
3762: LD_VAR 0 3
3766: ADD
3767: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3768: LD_VAR 0 3
3772: PPUSH
3773: LD_VAR 0 4
3777: PPUSH
3778: CALL_OW 52
// end ;
3782: GO 3652
3784: POP
3785: POP
// end ;
3786: LD_VAR 0 1
3790: RET
// export function PrepareAttack ; var i , un , veh ; begin
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
// uc_side = 1 ;
3797: LD_ADDR_OWVAR 20
3801: PUSH
3802: LD_INT 1
3804: ST_TO_ADDR
// uc_nation = nation_american ;
3805: LD_ADDR_OWVAR 21
3809: PUSH
3810: LD_INT 1
3812: ST_TO_ADDR
// for i := 1 to 4 do
3813: LD_ADDR_VAR 0 2
3817: PUSH
3818: DOUBLE
3819: LD_INT 1
3821: DEC
3822: ST_TO_ADDR
3823: LD_INT 4
3825: PUSH
3826: FOR_TO
3827: IFFALSE 3966
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ Rand ( 1 , 3 ) ] , 80 ) ;
3829: LD_INT 3
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 5
3843: PUSH
3844: LD_INT 4
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 3
3857: PPUSH
3858: CALL_OW 12
3862: ARRAY
3863: PPUSH
3864: LD_INT 80
3866: PPUSH
3867: CALL 45679 0 5
// veh = CreateVehicle ;
3871: LD_ADDR_VAR 0 4
3875: PUSH
3876: CALL_OW 45
3880: ST_TO_ADDR
// attackTeam = attackTeam ^ veh ;
3881: LD_ADDR_EXP 61
3885: PUSH
3886: LD_EXP 61
3890: PUSH
3891: LD_VAR 0 4
3895: ADD
3896: ST_TO_ADDR
// PlaceUnitArea ( veh , AmericanSpawnArea2 , false ) ;
3897: LD_VAR 0 4
3901: PPUSH
3902: LD_INT 17
3904: PPUSH
3905: LD_INT 0
3907: PPUSH
3908: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
3912: LD_INT 0
3914: PPUSH
3915: LD_EXP 34
3919: PPUSH
3920: CALL_OW 383
// un = CreateHuman ;
3924: LD_ADDR_VAR 0 3
3928: PUSH
3929: CALL_OW 44
3933: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
3934: LD_ADDR_EXP 61
3938: PUSH
3939: LD_EXP 61
3943: PUSH
3944: LD_VAR 0 3
3948: ADD
3949: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3950: LD_VAR 0 3
3954: PPUSH
3955: LD_VAR 0 4
3959: PPUSH
3960: CALL_OW 52
// end ;
3964: GO 3826
3966: POP
3967: POP
// for i := 1 to 3 do
3968: LD_ADDR_VAR 0 2
3972: PUSH
3973: DOUBLE
3974: LD_INT 1
3976: DEC
3977: ST_TO_ADDR
3978: LD_INT 3
3980: PUSH
3981: FOR_TO
3982: IFFALSE 4039
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3984: LD_INT 0
3986: PPUSH
3987: LD_EXP 34
3991: PPUSH
3992: CALL_OW 381
// un = CreateHuman ;
3996: LD_ADDR_VAR 0 3
4000: PUSH
4001: CALL_OW 44
4005: ST_TO_ADDR
// attackTeam = attackTeam ^ un ;
4006: LD_ADDR_EXP 61
4010: PUSH
4011: LD_EXP 61
4015: PUSH
4016: LD_VAR 0 3
4020: ADD
4021: ST_TO_ADDR
// PlaceUnitArea ( un , AmericanSpawnArea2 , false ) ;
4022: LD_VAR 0 3
4026: PPUSH
4027: LD_INT 17
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 49
// end ;
4037: GO 3981
4039: POP
4040: POP
// end ; end_of_file
4041: LD_VAR 0 1
4045: RET
// export function Nef_PrepareNature ; var i , un ; begin
4046: LD_INT 0
4048: PPUSH
4049: PPUSH
4050: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
4051: LD_ADDR_VAR 0 2
4055: PUSH
4056: DOUBLE
4057: LD_INT 1
4059: DEC
4060: ST_TO_ADDR
4061: LD_EXP 28
4065: PUSH
4066: LD_INT 1
4068: ARRAY
4069: PUSH
4070: FOR_TO
4071: IFFALSE 4181
// begin uc_side = 0 ;
4073: LD_ADDR_OWVAR 20
4077: PUSH
4078: LD_INT 0
4080: ST_TO_ADDR
// uc_nation = nation_nature ;
4081: LD_ADDR_OWVAR 21
4085: PUSH
4086: LD_INT 0
4088: ST_TO_ADDR
// hc_class = class_apeman ;
4089: LD_ADDR_OWVAR 28
4093: PUSH
4094: LD_INT 12
4096: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4097: LD_ADDR_OWVAR 31
4101: PUSH
4102: LD_EXP 29
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PUSH
4111: LD_EXP 29
4115: PUSH
4116: LD_INT 2
4118: ARRAY
4119: PUSH
4120: LD_EXP 29
4124: PUSH
4125: LD_INT 3
4127: ARRAY
4128: PUSH
4129: LD_EXP 29
4133: PUSH
4134: LD_INT 4
4136: ARRAY
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4144: LD_ADDR_OWVAR 35
4148: PUSH
4149: LD_EXP 30
4153: ST_TO_ADDR
// un = CreateHuman ;
4154: LD_ADDR_VAR 0 3
4158: PUSH
4159: CALL_OW 44
4163: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4164: LD_VAR 0 3
4168: PPUSH
4169: LD_INT 2
4171: PPUSH
4172: LD_INT 0
4174: PPUSH
4175: CALL_OW 49
// end ;
4179: GO 4070
4181: POP
4182: POP
// for i := 1 to animalsAmount [ 2 ] do
4183: LD_ADDR_VAR 0 2
4187: PUSH
4188: DOUBLE
4189: LD_INT 1
4191: DEC
4192: ST_TO_ADDR
4193: LD_EXP 28
4197: PUSH
4198: LD_INT 2
4200: ARRAY
4201: PUSH
4202: FOR_TO
4203: IFFALSE 4313
// begin uc_side = 0 ;
4205: LD_ADDR_OWVAR 20
4209: PUSH
4210: LD_INT 0
4212: ST_TO_ADDR
// uc_nation = nation_nature ;
4213: LD_ADDR_OWVAR 21
4217: PUSH
4218: LD_INT 0
4220: ST_TO_ADDR
// hc_class = class_phororhacos ;
4221: LD_ADDR_OWVAR 28
4225: PUSH
4226: LD_INT 18
4228: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4229: LD_ADDR_OWVAR 31
4233: PUSH
4234: LD_EXP 29
4238: PUSH
4239: LD_INT 1
4241: ARRAY
4242: PUSH
4243: LD_EXP 29
4247: PUSH
4248: LD_INT 2
4250: ARRAY
4251: PUSH
4252: LD_EXP 29
4256: PUSH
4257: LD_INT 3
4259: ARRAY
4260: PUSH
4261: LD_EXP 29
4265: PUSH
4266: LD_INT 4
4268: ARRAY
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4276: LD_ADDR_OWVAR 35
4280: PUSH
4281: LD_EXP 30
4285: ST_TO_ADDR
// un = CreateHuman ;
4286: LD_ADDR_VAR 0 3
4290: PUSH
4291: CALL_OW 44
4295: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4296: LD_VAR 0 3
4300: PPUSH
4301: LD_INT 2
4303: PPUSH
4304: LD_INT 0
4306: PPUSH
4307: CALL_OW 49
// end ;
4311: GO 4202
4313: POP
4314: POP
// for i := 1 to animalsAmount [ 3 ] do
4315: LD_ADDR_VAR 0 2
4319: PUSH
4320: DOUBLE
4321: LD_INT 1
4323: DEC
4324: ST_TO_ADDR
4325: LD_EXP 28
4329: PUSH
4330: LD_INT 3
4332: ARRAY
4333: PUSH
4334: FOR_TO
4335: IFFALSE 4445
// begin uc_side = 0 ;
4337: LD_ADDR_OWVAR 20
4341: PUSH
4342: LD_INT 0
4344: ST_TO_ADDR
// uc_nation = nation_nature ;
4345: LD_ADDR_OWVAR 21
4349: PUSH
4350: LD_INT 0
4352: ST_TO_ADDR
// hc_class = class_tiger ;
4353: LD_ADDR_OWVAR 28
4357: PUSH
4358: LD_INT 14
4360: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4361: LD_ADDR_OWVAR 31
4365: PUSH
4366: LD_EXP 29
4370: PUSH
4371: LD_INT 1
4373: ARRAY
4374: PUSH
4375: LD_EXP 29
4379: PUSH
4380: LD_INT 2
4382: ARRAY
4383: PUSH
4384: LD_EXP 29
4388: PUSH
4389: LD_INT 3
4391: ARRAY
4392: PUSH
4393: LD_EXP 29
4397: PUSH
4398: LD_INT 4
4400: ARRAY
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4408: LD_ADDR_OWVAR 35
4412: PUSH
4413: LD_EXP 30
4417: ST_TO_ADDR
// un = CreateHuman ;
4418: LD_ADDR_VAR 0 3
4422: PUSH
4423: CALL_OW 44
4427: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4428: LD_VAR 0 3
4432: PPUSH
4433: LD_INT 2
4435: PPUSH
4436: LD_INT 0
4438: PPUSH
4439: CALL_OW 49
// end ;
4443: GO 4334
4445: POP
4446: POP
// for i := 1 to animalsAmount [ 4 ] do
4447: LD_ADDR_VAR 0 2
4451: PUSH
4452: DOUBLE
4453: LD_INT 1
4455: DEC
4456: ST_TO_ADDR
4457: LD_EXP 28
4461: PUSH
4462: LD_INT 4
4464: ARRAY
4465: PUSH
4466: FOR_TO
4467: IFFALSE 4577
// begin uc_side = 0 ;
4469: LD_ADDR_OWVAR 20
4473: PUSH
4474: LD_INT 0
4476: ST_TO_ADDR
// uc_nation = nation_nature ;
4477: LD_ADDR_OWVAR 21
4481: PUSH
4482: LD_INT 0
4484: ST_TO_ADDR
// hc_class = 21 ;
4485: LD_ADDR_OWVAR 28
4489: PUSH
4490: LD_INT 21
4492: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
4493: LD_ADDR_OWVAR 31
4497: PUSH
4498: LD_EXP 29
4502: PUSH
4503: LD_INT 1
4505: ARRAY
4506: PUSH
4507: LD_EXP 29
4511: PUSH
4512: LD_INT 2
4514: ARRAY
4515: PUSH
4516: LD_EXP 29
4520: PUSH
4521: LD_INT 3
4523: ARRAY
4524: PUSH
4525: LD_EXP 29
4529: PUSH
4530: LD_INT 4
4532: ARRAY
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
4540: LD_ADDR_OWVAR 35
4544: PUSH
4545: LD_EXP 30
4549: ST_TO_ADDR
// un = CreateHuman ;
4550: LD_ADDR_VAR 0 3
4554: PUSH
4555: CALL_OW 44
4559: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4560: LD_VAR 0 3
4564: PPUSH
4565: LD_INT 2
4567: PPUSH
4568: LD_INT 0
4570: PPUSH
4571: CALL_OW 49
// end ;
4575: GO 4466
4577: POP
4578: POP
// for i := 1 to animalsAmount [ 5 ] do
4579: LD_ADDR_VAR 0 2
4583: PUSH
4584: DOUBLE
4585: LD_INT 1
4587: DEC
4588: ST_TO_ADDR
4589: LD_EXP 28
4593: PUSH
4594: LD_INT 5
4596: ARRAY
4597: PUSH
4598: FOR_TO
4599: IFFALSE 4660
// begin uc_side = 0 ;
4601: LD_ADDR_OWVAR 20
4605: PUSH
4606: LD_INT 0
4608: ST_TO_ADDR
// uc_nation = nation_nature ;
4609: LD_ADDR_OWVAR 21
4613: PUSH
4614: LD_INT 0
4616: ST_TO_ADDR
// vc_chassis := 31 ;
4617: LD_ADDR_OWVAR 37
4621: PUSH
4622: LD_INT 31
4624: ST_TO_ADDR
// vc_control := control_rider ;
4625: LD_ADDR_OWVAR 38
4629: PUSH
4630: LD_INT 4
4632: ST_TO_ADDR
// un := CreateVehicle ;
4633: LD_ADDR_VAR 0 3
4637: PUSH
4638: CALL_OW 45
4642: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
4643: LD_VAR 0 3
4647: PPUSH
4648: LD_INT 2
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL_OW 49
// end ;
4658: GO 4598
4660: POP
4661: POP
// end ; end_of_file
4662: LD_VAR 0 1
4666: RET
// every 0 0$1 do
4667: GO 4669
4669: DISABLE
// InitAIManager ( 1 , 2 , UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) , OvsyenkoBaseArea , OvsyenkoHealArea , false , false , 0 , 0 , 0 , 0 , 0 ) ;
4670: LD_INT 1
4672: PPUSH
4673: LD_INT 2
4675: PPUSH
4676: LD_EXP 56
4680: PPUSH
4681: LD_INT 21
4683: PUSH
4684: LD_INT 1
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PPUSH
4691: CALL_OW 72
4695: PPUSH
4696: LD_INT 3
4698: PPUSH
4699: LD_INT 6
4701: PPUSH
4702: LD_INT 0
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: LD_INT 0
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: LD_INT 0
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: LD_INT 0
4722: PPUSH
4723: CALL 4835 0 12
4727: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do var unit ;
4728: LD_INT 22
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 50
4740: PUSH
4741: EMPTY
4742: LIST
4743: PUSH
4744: LD_INT 34
4746: PUSH
4747: LD_INT 14
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 69
4763: IFFALSE 4832
4765: GO 4767
4767: DISABLE
4768: LD_INT 0
4770: PPUSH
// begin enable ;
4771: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_weapon , us_bulldozer ] ] ) do
4772: LD_ADDR_VAR 0 1
4776: PUSH
4777: LD_INT 22
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: LD_INT 50
4789: PUSH
4790: EMPTY
4791: LIST
4792: PUSH
4793: LD_INT 34
4795: PUSH
4796: LD_INT 14
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: LIST
4807: PPUSH
4808: CALL_OW 69
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4830
// CutTreeInArea ( unit , TreeArea ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_INT 18
4823: PPUSH
4824: CALL 14671 0 2
4828: GO 4813
4830: POP
4831: POP
// end ;
4832: PPOPN 1
4834: END
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , repairArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack , canRebuild ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , offensiveUnits , offensiveReadyCounter , target1 , target2 , defenceUnits , weapons , chassis , baseBuildings , destroyedBuildings , destroyedBuilding , constructedBuilding , constructedBuildings , depot , factory , lab , bunkers , barracks , controlTowers , attackBuildings , enemyBuildings , damageBuilding , damageUnit , emptyBunkers , enemyUnits ; begin
4835: LD_INT 0
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
4854: PPUSH
4855: PPUSH
4856: PPUSH
4857: PPUSH
4858: PPUSH
4859: PPUSH
4860: PPUSH
4861: PPUSH
4862: PPUSH
4863: PPUSH
4864: PPUSH
4865: PPUSH
4866: PPUSH
4867: PPUSH
4868: PPUSH
4869: PPUSH
4870: PPUSH
4871: PPUSH
4872: PPUSH
4873: PPUSH
4874: PPUSH
// personel = [ ] ;
4875: LD_ADDR_VAR 0 19
4879: PUSH
4880: EMPTY
4881: ST_TO_ADDR
// vehicles = [ ] ;
4882: LD_ADDR_VAR 0 25
4886: PUSH
4887: EMPTY
4888: ST_TO_ADDR
// destroyedBuildings = [ ] ;
4889: LD_ADDR_VAR 0 35
4893: PUSH
4894: EMPTY
4895: ST_TO_ADDR
// for unit in basePersonel do
4896: LD_ADDR_VAR 0 18
4900: PUSH
4901: LD_VAR 0 3
4905: PUSH
4906: FOR_IN
4907: IFFALSE 4927
// personel = personel ^ unit ;
4909: LD_ADDR_VAR 0 19
4913: PUSH
4914: LD_VAR 0 19
4918: PUSH
4919: LD_VAR 0 18
4923: ADD
4924: ST_TO_ADDR
4925: GO 4906
4927: POP
4928: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
4929: LD_ADDR_VAR 0 24
4933: PUSH
4934: LD_VAR 0 4
4938: PPUSH
4939: LD_INT 22
4941: PUSH
4942: LD_VAR 0 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 21
4953: PUSH
4954: LD_INT 2
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 50
4963: PUSH
4964: EMPTY
4965: LIST
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: LD_INT 2
4972: PUSH
4973: LD_INT 34
4975: PUSH
4976: LD_INT 12
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: LD_INT 34
4985: PUSH
4986: LD_INT 51
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 34
4995: PUSH
4996: LD_INT 32
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PUSH
5003: LD_INT 34
5005: PUSH
5006: LD_INT 31
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 70
5034: PUSH
5035: FOR_IN
5036: IFFALSE 5056
// vehicles = vehicles ^ vehicle ;
5038: LD_ADDR_VAR 0 25
5042: PUSH
5043: LD_VAR 0 25
5047: PUSH
5048: LD_VAR 0 24
5052: ADD
5053: ST_TO_ADDR
5054: GO 5035
5056: POP
5057: POP
// repeat soldiers = [ ] ;
5058: LD_ADDR_VAR 0 20
5062: PUSH
5063: EMPTY
5064: ST_TO_ADDR
// engineers = [ ] ;
5065: LD_ADDR_VAR 0 21
5069: PUSH
5070: EMPTY
5071: ST_TO_ADDR
// mechanics = [ ] ;
5072: LD_ADDR_VAR 0 22
5076: PUSH
5077: EMPTY
5078: ST_TO_ADDR
// scientists = [ ] ;
5079: LD_ADDR_VAR 0 23
5083: PUSH
5084: EMPTY
5085: ST_TO_ADDR
// baseBuildings = [ ] ;
5086: LD_ADDR_VAR 0 34
5090: PUSH
5091: EMPTY
5092: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5093: LD_ADDR_VAR 0 39
5097: PUSH
5098: LD_VAR 0 4
5102: PPUSH
5103: LD_INT 22
5105: PUSH
5106: LD_VAR 0 1
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PUSH
5115: LD_INT 21
5117: PUSH
5118: LD_INT 3
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 50
5127: PUSH
5128: EMPTY
5129: LIST
5130: PUSH
5131: LD_INT 2
5133: PUSH
5134: LD_INT 30
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 30
5146: PUSH
5147: LD_INT 1
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: PPUSH
5165: CALL_OW 70
5169: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
5170: LD_ADDR_VAR 0 40
5174: PUSH
5175: LD_VAR 0 4
5179: PPUSH
5180: LD_INT 22
5182: PUSH
5183: LD_VAR 0 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 21
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PUSH
5202: LD_INT 50
5204: PUSH
5205: EMPTY
5206: LIST
5207: PUSH
5208: LD_INT 2
5210: PUSH
5211: LD_INT 30
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 30
5223: PUSH
5224: LD_INT 3
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: PPUSH
5242: CALL_OW 70
5246: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5247: LD_ADDR_VAR 0 41
5251: PUSH
5252: LD_VAR 0 4
5256: PPUSH
5257: LD_INT 22
5259: PUSH
5260: LD_VAR 0 1
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: LD_INT 21
5271: PUSH
5272: LD_INT 3
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PUSH
5279: LD_INT 50
5281: PUSH
5282: EMPTY
5283: LIST
5284: PUSH
5285: LD_INT 2
5287: PUSH
5288: LD_INT 30
5290: PUSH
5291: LD_INT 6
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PUSH
5298: LD_INT 30
5300: PUSH
5301: LD_INT 7
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 30
5310: PUSH
5311: LD_INT 8
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: PPUSH
5330: CALL_OW 70
5334: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
5335: LD_ADDR_VAR 0 42
5339: PUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: LD_INT 22
5347: PUSH
5348: LD_VAR 0 1
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 21
5359: PUSH
5360: LD_INT 3
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 50
5369: PUSH
5370: EMPTY
5371: LIST
5372: PUSH
5373: LD_INT 2
5375: PUSH
5376: LD_INT 30
5378: PUSH
5379: LD_INT 31
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 30
5388: PUSH
5389: LD_INT 32
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: LIST
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL_OW 70
5411: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
5412: LD_ADDR_VAR 0 43
5416: PUSH
5417: LD_VAR 0 4
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_VAR 0 1
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PUSH
5434: LD_INT 21
5436: PUSH
5437: LD_INT 3
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 50
5446: PUSH
5447: EMPTY
5448: LIST
5449: PUSH
5450: LD_INT 2
5452: PUSH
5453: LD_INT 30
5455: PUSH
5456: LD_INT 4
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: LD_INT 30
5465: PUSH
5466: LD_INT 5
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: PPUSH
5484: CALL_OW 70
5488: ST_TO_ADDR
// controlTowers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5489: LD_ADDR_VAR 0 44
5493: PUSH
5494: LD_VAR 0 4
5498: PPUSH
5499: LD_INT 22
5501: PUSH
5502: LD_VAR 0 1
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: LD_INT 50
5513: PUSH
5514: EMPTY
5515: LIST
5516: PUSH
5517: LD_INT 2
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 21
5532: PUSH
5533: LD_INT 2
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 2
5547: PUSH
5548: LD_INT 30
5550: PUSH
5551: LD_INT 36
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: LD_INT 34
5560: PUSH
5561: LD_INT 31
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: ST_TO_ADDR
// constructedBuildings = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] ] ) ;
5584: LD_ADDR_VAR 0 38
5588: PUSH
5589: LD_VAR 0 4
5593: PPUSH
5594: LD_INT 22
5596: PUSH
5597: LD_VAR 0 1
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 21
5608: PUSH
5609: LD_INT 3
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 3
5618: PUSH
5619: LD_INT 57
5621: PUSH
5622: EMPTY
5623: LIST
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: LIST
5633: PPUSH
5634: CALL_OW 70
5638: ST_TO_ADDR
// for i := 1 to personel do
5639: LD_ADDR_VAR 0 14
5643: PUSH
5644: DOUBLE
5645: LD_INT 1
5647: DEC
5648: ST_TO_ADDR
5649: LD_VAR 0 19
5653: PUSH
5654: FOR_TO
5655: IFFALSE 5823
// begin if GetLives ( personel [ i ] ) = 1000 then
5657: LD_VAR 0 19
5661: PUSH
5662: LD_VAR 0 14
5666: ARRAY
5667: PPUSH
5668: CALL_OW 256
5672: PUSH
5673: LD_INT 1000
5675: EQUAL
5676: IFFALSE 5698
// SetTag ( personel [ i ] , 1 ) else
5678: LD_VAR 0 19
5682: PUSH
5683: LD_VAR 0 14
5687: ARRAY
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: CALL_OW 109
5696: GO 5778
// if GetLives ( personel [ i ] ) <= 950 and GetLives ( personel [ i ] ) > 250 then
5698: LD_VAR 0 19
5702: PUSH
5703: LD_VAR 0 14
5707: ARRAY
5708: PPUSH
5709: CALL_OW 256
5713: PUSH
5714: LD_INT 950
5716: LESSEQUAL
5717: PUSH
5718: LD_VAR 0 19
5722: PUSH
5723: LD_VAR 0 14
5727: ARRAY
5728: PPUSH
5729: CALL_OW 256
5733: PUSH
5734: LD_INT 250
5736: GREATER
5737: AND
5738: IFFALSE 5778
// begin SetTag ( personel [ i ] , 0 ) ;
5740: LD_VAR 0 19
5744: PUSH
5745: LD_VAR 0 14
5749: ARRAY
5750: PPUSH
5751: LD_INT 0
5753: PPUSH
5754: CALL_OW 109
// ComMoveToArea ( personel [ i ] , healArea ) ;
5758: LD_VAR 0 19
5762: PUSH
5763: LD_VAR 0 14
5767: ARRAY
5768: PPUSH
5769: LD_VAR 0 5
5773: PPUSH
5774: CALL_OW 113
// end ; if GetLives ( personel [ i ] ) < 100 then
5778: LD_VAR 0 19
5782: PUSH
5783: LD_VAR 0 14
5787: ARRAY
5788: PPUSH
5789: CALL_OW 256
5793: PUSH
5794: LD_INT 100
5796: LESS
5797: IFFALSE 5821
// personel = personel diff personel [ i ] ;
5799: LD_ADDR_VAR 0 19
5803: PUSH
5804: LD_VAR 0 19
5808: PUSH
5809: LD_VAR 0 19
5813: PUSH
5814: LD_VAR 0 14
5818: ARRAY
5819: DIFF
5820: ST_TO_ADDR
// end ;
5821: GO 5654
5823: POP
5824: POP
// for i := 1 to vehicles do
5825: LD_ADDR_VAR 0 14
5829: PUSH
5830: DOUBLE
5831: LD_INT 1
5833: DEC
5834: ST_TO_ADDR
5835: LD_VAR 0 25
5839: PUSH
5840: FOR_TO
5841: IFFALSE 6203
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
5843: LD_VAR 0 25
5847: PUSH
5848: LD_VAR 0 14
5852: ARRAY
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PPUSH
5858: CALL_OW 256
5862: PUSH
5863: LD_INT 1000
5865: EQUAL
5866: IFFALSE 6030
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
5868: LD_VAR 0 25
5872: PUSH
5873: LD_VAR 0 14
5877: ARRAY
5878: PUSH
5879: LD_INT 1
5881: ARRAY
5882: PPUSH
5883: CALL_OW 263
5887: PUSH
5888: LD_INT 1
5890: EQUAL
5891: IFFALSE 5970
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) and IsOK ( vehicles [ i ] [ 2 ] ) then
5893: LD_VAR 0 25
5897: PUSH
5898: LD_VAR 0 14
5902: ARRAY
5903: PUSH
5904: LD_INT 2
5906: ARRAY
5907: PPUSH
5908: CALL_OW 310
5912: NOT
5913: PUSH
5914: LD_VAR 0 25
5918: PUSH
5919: LD_VAR 0 14
5923: ARRAY
5924: PUSH
5925: LD_INT 2
5927: ARRAY
5928: PPUSH
5929: CALL_OW 302
5933: AND
5934: IFFALSE 5970
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
5936: LD_VAR 0 25
5940: PUSH
5941: LD_VAR 0 14
5945: ARRAY
5946: PUSH
5947: LD_INT 2
5949: ARRAY
5950: PPUSH
5951: LD_VAR 0 25
5955: PUSH
5956: LD_VAR 0 14
5960: ARRAY
5961: PUSH
5962: LD_INT 1
5964: ARRAY
5965: PPUSH
5966: CALL_OW 120
// if offensiveUnits < vehiclesToAttackAmount then
5970: LD_VAR 0 27
5974: PUSH
5975: LD_VAR 0 10
5979: LESS
5980: IFFALSE 6006
// SetTag ( vehicles [ i ] [ 1 ] , 2 ) else
5982: LD_VAR 0 25
5986: PUSH
5987: LD_VAR 0 14
5991: ARRAY
5992: PUSH
5993: LD_INT 1
5995: ARRAY
5996: PPUSH
5997: LD_INT 2
5999: PPUSH
6000: CALL_OW 109
6004: GO 6028
// SetTag ( vehicles [ i ] [ 1 ] , 3 ) ;
6006: LD_VAR 0 25
6010: PUSH
6011: LD_VAR 0 14
6015: ARRAY
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: LD_INT 3
6023: PPUSH
6024: CALL_OW 109
// end else
6028: GO 6151
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 and GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
6030: LD_VAR 0 25
6034: PUSH
6035: LD_VAR 0 14
6039: ARRAY
6040: PUSH
6041: LD_INT 1
6043: ARRAY
6044: PPUSH
6045: CALL_OW 256
6049: PUSH
6050: LD_INT 650
6052: LESSEQUAL
6053: PUSH
6054: LD_VAR 0 25
6058: PUSH
6059: LD_VAR 0 14
6063: ARRAY
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PPUSH
6069: CALL_OW 256
6073: PUSH
6074: LD_INT 250
6076: GREATER
6077: AND
6078: PUSH
6079: LD_VAR 0 25
6083: PUSH
6084: LD_VAR 0 14
6088: ARRAY
6089: PUSH
6090: LD_INT 1
6092: ARRAY
6093: PPUSH
6094: CALL_OW 263
6098: PUSH
6099: LD_INT 1
6101: EQUAL
6102: AND
6103: IFFALSE 6151
// begin SetTag ( vehicles [ i ] [ 1 ] , 0 ) ;
6105: LD_VAR 0 25
6109: PUSH
6110: LD_VAR 0 14
6114: ARRAY
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: LD_INT 0
6122: PPUSH
6123: CALL_OW 109
// ComMoveToArea ( vehicles [ i ] [ 1 ] , repairArea ) ;
6127: LD_VAR 0 25
6131: PUSH
6132: LD_VAR 0 14
6136: ARRAY
6137: PUSH
6138: LD_INT 1
6140: ARRAY
6141: PPUSH
6142: LD_VAR 0 6
6146: PPUSH
6147: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
6151: LD_VAR 0 25
6155: PUSH
6156: LD_VAR 0 14
6160: ARRAY
6161: PUSH
6162: LD_INT 1
6164: ARRAY
6165: PPUSH
6166: CALL_OW 256
6170: PUSH
6171: LD_INT 250
6173: LESS
6174: IFFALSE 6201
// begin vehicles = vehicles diff [ vehicles [ i ] ] ;
6176: LD_ADDR_VAR 0 25
6180: PUSH
6181: LD_VAR 0 25
6185: PUSH
6186: LD_VAR 0 25
6190: PUSH
6191: LD_VAR 0 14
6195: ARRAY
6196: PUSH
6197: EMPTY
6198: LIST
6199: DIFF
6200: ST_TO_ADDR
// end ; end ;
6201: GO 5840
6203: POP
6204: POP
// for i := 1 to personel do
6205: LD_ADDR_VAR 0 14
6209: PUSH
6210: DOUBLE
6211: LD_INT 1
6213: DEC
6214: ST_TO_ADDR
6215: LD_VAR 0 19
6219: PUSH
6220: FOR_TO
6221: IFFALSE 6272
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
6223: LD_ADDR_VAR 0 20
6227: PUSH
6228: LD_VAR 0 20
6232: PUSH
6233: LD_VAR 0 19
6237: PUSH
6238: LD_VAR 0 14
6242: ARRAY
6243: PPUSH
6244: LD_INT 25
6246: PUSH
6247: LD_INT 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 50
6256: PUSH
6257: EMPTY
6258: LIST
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PPUSH
6264: CALL_OW 72
6268: ADD
6269: ST_TO_ADDR
6270: GO 6220
6272: POP
6273: POP
// if soldiers and UnitFilter ( bunkers , [ f_empty ] ) then
6274: LD_VAR 0 20
6278: PUSH
6279: LD_VAR 0 42
6283: PPUSH
6284: LD_INT 58
6286: PUSH
6287: EMPTY
6288: LIST
6289: PPUSH
6290: CALL_OW 72
6294: AND
6295: IFFALSE 6553
// begin for i := 1 to soldiers do
6297: LD_ADDR_VAR 0 14
6301: PUSH
6302: DOUBLE
6303: LD_INT 1
6305: DEC
6306: ST_TO_ADDR
6307: LD_VAR 0 20
6311: PUSH
6312: FOR_TO
6313: IFFALSE 6549
// if GetTag ( soldiers [ i ] ) = 1 then
6315: LD_VAR 0 20
6319: PUSH
6320: LD_VAR 0 14
6324: ARRAY
6325: PPUSH
6326: CALL_OW 110
6330: PUSH
6331: LD_INT 1
6333: EQUAL
6334: IFFALSE 6547
// begin if GetTaskList ( soldiers [ i ] ) then
6336: LD_VAR 0 20
6340: PUSH
6341: LD_VAR 0 14
6345: ARRAY
6346: PPUSH
6347: CALL_OW 437
6351: IFFALSE 6440
// if GetTaskList ( soldiers [ i ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( soldiers [ i ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
6353: LD_VAR 0 20
6357: PUSH
6358: LD_VAR 0 14
6362: ARRAY
6363: PPUSH
6364: CALL_OW 437
6368: PUSH
6369: LD_INT 1
6371: ARRAY
6372: PUSH
6373: LD_INT 1
6375: ARRAY
6376: PUSH
6377: LD_STRING e
6379: EQUAL
6380: PUSH
6381: LD_VAR 0 20
6385: PUSH
6386: LD_VAR 0 14
6390: ARRAY
6391: PPUSH
6392: CALL_OW 437
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PUSH
6401: LD_INT 4
6403: ARRAY
6404: PPUSH
6405: CALL_OW 266
6409: PUSH
6410: LD_INT 4
6412: PUSH
6413: LD_INT 5
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: IN
6420: AND
6421: IFFALSE 6440
// SetTaskList ( soldiers [ i ] , [ ] ) ;
6423: LD_VAR 0 20
6427: PUSH
6428: LD_VAR 0 14
6432: ARRAY
6433: PPUSH
6434: EMPTY
6435: PPUSH
6436: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
6440: LD_ADDR_VAR 0 49
6444: PUSH
6445: LD_VAR 0 42
6449: PPUSH
6450: LD_INT 3
6452: PUSH
6453: LD_INT 59
6455: PUSH
6456: EMPTY
6457: LIST
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PPUSH
6463: CALL_OW 72
6467: PUSH
6468: FOR_IN
6469: IFFALSE 6545
// if not HasTask ( soldiers [ i ] ) and not GetBType ( IsInUnit ( soldiers [ i ] ) ) in [ b_breastwork , b_bunker ] then
6471: LD_VAR 0 20
6475: PUSH
6476: LD_VAR 0 14
6480: ARRAY
6481: PPUSH
6482: CALL_OW 314
6486: NOT
6487: PUSH
6488: LD_VAR 0 20
6492: PUSH
6493: LD_VAR 0 14
6497: ARRAY
6498: PPUSH
6499: CALL_OW 310
6503: PPUSH
6504: CALL_OW 266
6508: PUSH
6509: LD_INT 31
6511: PUSH
6512: LD_INT 32
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: IN
6519: NOT
6520: AND
6521: IFFALSE 6543
// ComEnterUnit ( soldiers [ i ] , emptyBunkers ) ;
6523: LD_VAR 0 20
6527: PUSH
6528: LD_VAR 0 14
6532: ARRAY
6533: PPUSH
6534: LD_VAR 0 49
6538: PPUSH
6539: CALL_OW 120
6543: GO 6468
6545: POP
6546: POP
// end ;
6547: GO 6312
6549: POP
6550: POP
// end else
6551: GO 6725
// if soldiers and barracks then
6553: LD_VAR 0 20
6557: PUSH
6558: LD_VAR 0 43
6562: AND
6563: IFFALSE 6685
// begin for i := 1 to soldiers do
6565: LD_ADDR_VAR 0 14
6569: PUSH
6570: DOUBLE
6571: LD_INT 1
6573: DEC
6574: ST_TO_ADDR
6575: LD_VAR 0 20
6579: PUSH
6580: FOR_TO
6581: IFFALSE 6681
// if GetTag ( soldiers [ i ] ) = 1 and UnitFilter ( soldiers [ i ] , [ f_outside ] ) and not HasTask ( soldiers [ i ] ) then
6583: LD_VAR 0 20
6587: PUSH
6588: LD_VAR 0 14
6592: ARRAY
6593: PPUSH
6594: CALL_OW 110
6598: PUSH
6599: LD_INT 1
6601: EQUAL
6602: PUSH
6603: LD_VAR 0 20
6607: PUSH
6608: LD_VAR 0 14
6612: ARRAY
6613: PPUSH
6614: LD_INT 56
6616: PUSH
6617: EMPTY
6618: LIST
6619: PPUSH
6620: CALL_OW 72
6624: AND
6625: PUSH
6626: LD_VAR 0 20
6630: PUSH
6631: LD_VAR 0 14
6635: ARRAY
6636: PPUSH
6637: CALL_OW 314
6641: NOT
6642: AND
6643: IFFALSE 6679
// ComEnterUnit ( soldiers [ i ] , barracks [ rand ( 1 , barracks ) ] ) ;
6645: LD_VAR 0 20
6649: PUSH
6650: LD_VAR 0 14
6654: ARRAY
6655: PPUSH
6656: LD_VAR 0 43
6660: PUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_VAR 0 43
6668: PPUSH
6669: CALL_OW 12
6673: ARRAY
6674: PPUSH
6675: CALL_OW 120
6679: GO 6580
6681: POP
6682: POP
// end else
6683: GO 6725
// for i := 1 to soldiers do
6685: LD_ADDR_VAR 0 14
6689: PUSH
6690: DOUBLE
6691: LD_INT 1
6693: DEC
6694: ST_TO_ADDR
6695: LD_VAR 0 20
6699: PUSH
6700: FOR_TO
6701: IFFALSE 6723
// SetTag ( soldiers [ i ] , 3 ) ;
6703: LD_VAR 0 20
6707: PUSH
6708: LD_VAR 0 14
6712: ARRAY
6713: PPUSH
6714: LD_INT 3
6716: PPUSH
6717: CALL_OW 109
6721: GO 6700
6723: POP
6724: POP
// for i := 1 to personel do
6725: LD_ADDR_VAR 0 14
6729: PUSH
6730: DOUBLE
6731: LD_INT 1
6733: DEC
6734: ST_TO_ADDR
6735: LD_VAR 0 19
6739: PUSH
6740: FOR_TO
6741: IFFALSE 6782
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
6743: LD_ADDR_VAR 0 21
6747: PUSH
6748: LD_VAR 0 21
6752: PUSH
6753: LD_VAR 0 19
6757: PUSH
6758: LD_VAR 0 14
6762: ARRAY
6763: PPUSH
6764: LD_INT 25
6766: PUSH
6767: LD_INT 2
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 72
6778: ADD
6779: ST_TO_ADDR
6780: GO 6740
6782: POP
6783: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6784: LD_VAR 0 21
6788: PUSH
6789: LD_VAR 0 4
6793: PPUSH
6794: LD_INT 22
6796: PUSH
6797: LD_VAR 0 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 21
6808: PUSH
6809: LD_INT 3
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: LD_INT 24
6821: PUSH
6822: LD_INT 1000
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: PPUSH
6838: CALL_OW 70
6842: AND
6843: IFFALSE 7071
// begin for i := 1 to engineers do
6845: LD_ADDR_VAR 0 14
6849: PUSH
6850: DOUBLE
6851: LD_INT 1
6853: DEC
6854: ST_TO_ADDR
6855: LD_VAR 0 21
6859: PUSH
6860: FOR_TO
6861: IFFALSE 7067
// if GetTag ( engineers [ i ] ) = 1 then
6863: LD_VAR 0 21
6867: PUSH
6868: LD_VAR 0 14
6872: ARRAY
6873: PPUSH
6874: CALL_OW 110
6878: PUSH
6879: LD_INT 1
6881: EQUAL
6882: IFFALSE 7065
// begin if GetTaskList ( engineers [ i ] ) then
6884: LD_VAR 0 21
6888: PUSH
6889: LD_VAR 0 14
6893: ARRAY
6894: PPUSH
6895: CALL_OW 437
6899: IFFALSE 6947
// if GetTaskList ( engineers [ i ] ) [ 1 ] [ 1 ] = e then
6901: LD_VAR 0 21
6905: PUSH
6906: LD_VAR 0 14
6910: ARRAY
6911: PPUSH
6912: CALL_OW 437
6916: PUSH
6917: LD_INT 1
6919: ARRAY
6920: PUSH
6921: LD_INT 1
6923: ARRAY
6924: PUSH
6925: LD_STRING e
6927: EQUAL
6928: IFFALSE 6947
// SetTaskList ( engineers [ i ] , [ ] ) ;
6930: LD_VAR 0 21
6934: PUSH
6935: LD_VAR 0 14
6939: ARRAY
6940: PPUSH
6941: EMPTY
6942: PPUSH
6943: CALL_OW 446
// if IsInUnit ( engineers [ i ] ) then
6947: LD_VAR 0 21
6951: PUSH
6952: LD_VAR 0 14
6956: ARRAY
6957: PPUSH
6958: CALL_OW 310
6962: IFFALSE 6979
// ComExitBuilding ( engineers [ i ] ) ;
6964: LD_VAR 0 21
6968: PUSH
6969: LD_VAR 0 14
6973: ARRAY
6974: PPUSH
6975: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
6979: LD_ADDR_VAR 0 47
6983: PUSH
6984: LD_VAR 0 4
6988: PPUSH
6989: LD_INT 22
6991: PUSH
6992: LD_VAR 0 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 21
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 3
7013: PUSH
7014: LD_INT 24
7016: PUSH
7017: LD_INT 1000
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 70
7037: PUSH
7038: FOR_IN
7039: IFFALSE 7063
// AddComRepairBuilding ( engineers [ i ] , damageBuilding ) ;
7041: LD_VAR 0 21
7045: PUSH
7046: LD_VAR 0 14
7050: ARRAY
7051: PPUSH
7052: LD_VAR 0 47
7056: PPUSH
7057: CALL_OW 190
7061: GO 7038
7063: POP
7064: POP
// end ;
7065: GO 6860
7067: POP
7068: POP
// end else
7069: GO 7378
// if engineers and destroyedBuildings then
7071: LD_VAR 0 21
7075: PUSH
7076: LD_VAR 0 35
7080: AND
7081: IFFALSE 7257
// begin for i := 1 to engineers do
7083: LD_ADDR_VAR 0 14
7087: PUSH
7088: DOUBLE
7089: LD_INT 1
7091: DEC
7092: ST_TO_ADDR
7093: LD_VAR 0 21
7097: PUSH
7098: FOR_TO
7099: IFFALSE 7253
// if GetTag ( engineers [ i ] ) = 1 then
7101: LD_VAR 0 21
7105: PUSH
7106: LD_VAR 0 14
7110: ARRAY
7111: PPUSH
7112: CALL_OW 110
7116: PUSH
7117: LD_INT 1
7119: EQUAL
7120: IFFALSE 7251
// begin if IsInUnit ( engineers [ i ] ) then
7122: LD_VAR 0 21
7126: PUSH
7127: LD_VAR 0 14
7131: ARRAY
7132: PPUSH
7133: CALL_OW 310
7137: IFFALSE 7154
// ComExitBuilding ( engineers [ i ] ) ;
7139: LD_VAR 0 21
7143: PUSH
7144: LD_VAR 0 14
7148: ARRAY
7149: PPUSH
7150: CALL_OW 122
// for j := 1 to destroyedBuildings / 4 do
7154: LD_ADDR_VAR 0 15
7158: PUSH
7159: DOUBLE
7160: LD_INT 1
7162: DEC
7163: ST_TO_ADDR
7164: LD_VAR 0 35
7168: PUSH
7169: LD_INT 4
7171: DIVREAL
7172: PUSH
7173: FOR_TO
7174: IFFALSE 7249
// AddComBuild ( engineers [ i ] , destroyedBuildings [ j ] , destroyedBuildings [ j + 1 ] , destroyedBuildings [ j + 2 ] , destroyedBuildings [ j + 3 ] ) ;
7176: LD_VAR 0 21
7180: PUSH
7181: LD_VAR 0 14
7185: ARRAY
7186: PPUSH
7187: LD_VAR 0 35
7191: PUSH
7192: LD_VAR 0 15
7196: ARRAY
7197: PPUSH
7198: LD_VAR 0 35
7202: PUSH
7203: LD_VAR 0 15
7207: PUSH
7208: LD_INT 1
7210: PLUS
7211: ARRAY
7212: PPUSH
7213: LD_VAR 0 35
7217: PUSH
7218: LD_VAR 0 15
7222: PUSH
7223: LD_INT 2
7225: PLUS
7226: ARRAY
7227: PPUSH
7228: LD_VAR 0 35
7232: PUSH
7233: LD_VAR 0 15
7237: PUSH
7238: LD_INT 3
7240: PLUS
7241: ARRAY
7242: PPUSH
7243: CALL_OW 205
7247: GO 7173
7249: POP
7250: POP
// end ;
7251: GO 7098
7253: POP
7254: POP
// end else
7255: GO 7378
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot and not destroyedBuildings then
7257: LD_VAR 0 21
7261: PUSH
7262: LD_VAR 0 21
7266: PPUSH
7267: LD_INT 56
7269: PUSH
7270: EMPTY
7271: LIST
7272: PPUSH
7273: CALL_OW 72
7277: AND
7278: PUSH
7279: LD_VAR 0 39
7283: AND
7284: PUSH
7285: LD_VAR 0 35
7289: NOT
7290: AND
7291: IFFALSE 7378
// for i := 1 to engineers do
7293: LD_ADDR_VAR 0 14
7297: PUSH
7298: DOUBLE
7299: LD_INT 1
7301: DEC
7302: ST_TO_ADDR
7303: LD_VAR 0 21
7307: PUSH
7308: FOR_TO
7309: IFFALSE 7376
// begin if GetTag ( engineers [ i ] ) = 1 and not HasTask ( engineers [ i ] ) then
7311: LD_VAR 0 21
7315: PUSH
7316: LD_VAR 0 14
7320: ARRAY
7321: PPUSH
7322: CALL_OW 110
7326: PUSH
7327: LD_INT 1
7329: EQUAL
7330: PUSH
7331: LD_VAR 0 21
7335: PUSH
7336: LD_VAR 0 14
7340: ARRAY
7341: PPUSH
7342: CALL_OW 314
7346: NOT
7347: AND
7348: IFFALSE 7374
// ComEnterUnit ( engineers [ i ] , depot [ 1 ] ) ;
7350: LD_VAR 0 21
7354: PUSH
7355: LD_VAR 0 14
7359: ARRAY
7360: PPUSH
7361: LD_VAR 0 39
7365: PUSH
7366: LD_INT 1
7368: ARRAY
7369: PPUSH
7370: CALL_OW 120
// end ;
7374: GO 7308
7376: POP
7377: POP
// for i := 1 to personel do
7378: LD_ADDR_VAR 0 14
7382: PUSH
7383: DOUBLE
7384: LD_INT 1
7386: DEC
7387: ST_TO_ADDR
7388: LD_VAR 0 19
7392: PUSH
7393: FOR_TO
7394: IFFALSE 7435
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
7396: LD_ADDR_VAR 0 22
7400: PUSH
7401: LD_VAR 0 22
7405: PUSH
7406: LD_VAR 0 19
7410: PUSH
7411: LD_VAR 0 14
7415: ARRAY
7416: PPUSH
7417: LD_INT 25
7419: PUSH
7420: LD_INT 3
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 72
7431: ADD
7432: ST_TO_ADDR
7433: GO 7393
7435: POP
7436: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7437: LD_VAR 0 22
7441: PUSH
7442: LD_VAR 0 4
7446: PPUSH
7447: LD_INT 22
7449: PUSH
7450: LD_VAR 0 1
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PUSH
7459: LD_INT 21
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 3
7471: PUSH
7472: LD_INT 24
7474: PUSH
7475: LD_INT 1000
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: LIST
7490: PPUSH
7491: CALL_OW 70
7495: AND
7496: IFFALSE 8076
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7498: LD_ADDR_VAR 0 48
7502: PUSH
7503: LD_VAR 0 4
7507: PPUSH
7508: LD_INT 22
7510: PUSH
7511: LD_VAR 0 1
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 21
7522: PUSH
7523: LD_INT 2
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 3
7532: PUSH
7533: LD_INT 24
7535: PUSH
7536: LD_INT 1000
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: LIST
7551: PPUSH
7552: CALL_OW 70
7556: PUSH
7557: FOR_IN
7558: IFFALSE 8072
// begin if GetDistUnitArea ( damageUnit , repairArea ) <= 5 then
7560: LD_VAR 0 48
7564: PPUSH
7565: LD_VAR 0 6
7569: PPUSH
7570: CALL_OW 299
7574: PUSH
7575: LD_INT 5
7577: LESSEQUAL
7578: IFFALSE 7667
// for i := 1 to vehicles do
7580: LD_ADDR_VAR 0 14
7584: PUSH
7585: DOUBLE
7586: LD_INT 1
7588: DEC
7589: ST_TO_ADDR
7590: LD_VAR 0 25
7594: PUSH
7595: FOR_TO
7596: IFFALSE 7665
// if vehicles [ i ] [ 1 ] = damageUnit then
7598: LD_VAR 0 25
7602: PUSH
7603: LD_VAR 0 14
7607: ARRAY
7608: PUSH
7609: LD_INT 1
7611: ARRAY
7612: PUSH
7613: LD_VAR 0 48
7617: EQUAL
7618: IFFALSE 7663
// begin ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
7620: LD_VAR 0 25
7624: PUSH
7625: LD_VAR 0 14
7629: ARRAY
7630: PUSH
7631: LD_INT 2
7633: ARRAY
7634: PPUSH
7635: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
7639: LD_VAR 0 25
7643: PUSH
7644: LD_VAR 0 14
7648: ARRAY
7649: PUSH
7650: LD_INT 2
7652: ARRAY
7653: PPUSH
7654: LD_VAR 0 48
7658: PPUSH
7659: CALL_OW 189
// end ;
7663: GO 7595
7665: POP
7666: POP
// for i := 1 to mechanics do
7667: LD_ADDR_VAR 0 14
7671: PUSH
7672: DOUBLE
7673: LD_INT 1
7675: DEC
7676: ST_TO_ADDR
7677: LD_VAR 0 22
7681: PUSH
7682: FOR_TO
7683: IFFALSE 7851
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
7685: LD_VAR 0 22
7689: PUSH
7690: LD_VAR 0 14
7694: ARRAY
7695: PPUSH
7696: CALL_OW 110
7700: PUSH
7701: LD_INT 1
7703: EQUAL
7704: PUSH
7705: LD_VAR 0 22
7709: PUSH
7710: LD_VAR 0 14
7714: ARRAY
7715: PPUSH
7716: CALL_OW 310
7720: PUSH
7721: LD_INT 2
7723: PUSH
7724: LD_INT 3
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: IN
7731: AND
7732: IFFALSE 7849
// begin if GetTaskList ( mechanics [ i ] ) then
7734: LD_VAR 0 22
7738: PUSH
7739: LD_VAR 0 14
7743: ARRAY
7744: PPUSH
7745: CALL_OW 437
7749: IFFALSE 7797
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
7751: LD_VAR 0 22
7755: PUSH
7756: LD_VAR 0 14
7760: ARRAY
7761: PPUSH
7762: CALL_OW 437
7766: PUSH
7767: LD_INT 1
7769: ARRAY
7770: PUSH
7771: LD_INT 1
7773: ARRAY
7774: PUSH
7775: LD_STRING e
7777: EQUAL
7778: IFFALSE 7797
// SetTaskList ( mechanics [ i ] , [ ] ) ;
7780: LD_VAR 0 22
7784: PUSH
7785: LD_VAR 0 14
7789: ARRAY
7790: PPUSH
7791: EMPTY
7792: PPUSH
7793: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
7797: LD_VAR 0 22
7801: PUSH
7802: LD_VAR 0 14
7806: ARRAY
7807: PPUSH
7808: CALL_OW 310
7812: IFFALSE 7829
// ComExitBuilding ( mechanics [ i ] ) ;
7814: LD_VAR 0 22
7818: PUSH
7819: LD_VAR 0 14
7823: ARRAY
7824: PPUSH
7825: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
7829: LD_VAR 0 22
7833: PUSH
7834: LD_VAR 0 14
7838: ARRAY
7839: PPUSH
7840: LD_VAR 0 48
7844: PPUSH
7845: CALL_OW 189
// end ;
7849: GO 7682
7851: POP
7852: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
7853: LD_VAR 0 48
7857: PPUSH
7858: CALL_OW 256
7862: PUSH
7863: LD_INT 250
7865: LESS
7866: PUSH
7867: LD_VAR 0 48
7871: PPUSH
7872: LD_VAR 0 4
7876: PPUSH
7877: CALL_OW 308
7881: AND
7882: IFFALSE 8070
// for i := 1 to personel do
7884: LD_ADDR_VAR 0 14
7888: PUSH
7889: DOUBLE
7890: LD_INT 1
7892: DEC
7893: ST_TO_ADDR
7894: LD_VAR 0 19
7898: PUSH
7899: FOR_TO
7900: IFFALSE 8068
// if GetTag ( mechanics [ i ] ) = 1 and IsInUnit ( mechanics [ i ] ) in [ b_workshop , b_factory ] then
7902: LD_VAR 0 22
7906: PUSH
7907: LD_VAR 0 14
7911: ARRAY
7912: PPUSH
7913: CALL_OW 110
7917: PUSH
7918: LD_INT 1
7920: EQUAL
7921: PUSH
7922: LD_VAR 0 22
7926: PUSH
7927: LD_VAR 0 14
7931: ARRAY
7932: PPUSH
7933: CALL_OW 310
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: LD_INT 3
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: IN
7948: AND
7949: IFFALSE 8066
// begin if GetTaskList ( mechanics [ i ] ) then
7951: LD_VAR 0 22
7955: PUSH
7956: LD_VAR 0 14
7960: ARRAY
7961: PPUSH
7962: CALL_OW 437
7966: IFFALSE 8014
// if GetTaskList ( mechanics [ i ] ) [ 1 ] [ 1 ] = e then
7968: LD_VAR 0 22
7972: PUSH
7973: LD_VAR 0 14
7977: ARRAY
7978: PPUSH
7979: CALL_OW 437
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PUSH
7988: LD_INT 1
7990: ARRAY
7991: PUSH
7992: LD_STRING e
7994: EQUAL
7995: IFFALSE 8014
// SetTaskList ( mechanics [ i ] , [ ] ) ;
7997: LD_VAR 0 22
8001: PUSH
8002: LD_VAR 0 14
8006: ARRAY
8007: PPUSH
8008: EMPTY
8009: PPUSH
8010: CALL_OW 446
// if IsInUnit ( mechanics [ i ] ) then
8014: LD_VAR 0 22
8018: PUSH
8019: LD_VAR 0 14
8023: ARRAY
8024: PPUSH
8025: CALL_OW 310
8029: IFFALSE 8046
// ComExitBuilding ( mechanics [ i ] ) ;
8031: LD_VAR 0 22
8035: PUSH
8036: LD_VAR 0 14
8040: ARRAY
8041: PPUSH
8042: CALL_OW 122
// AddComRepairVehicle ( mechanics [ i ] , damageUnit ) ;
8046: LD_VAR 0 22
8050: PUSH
8051: LD_VAR 0 14
8055: ARRAY
8056: PPUSH
8057: LD_VAR 0 48
8061: PPUSH
8062: CALL_OW 189
// end ;
8066: GO 7899
8068: POP
8069: POP
// end ;
8070: GO 7557
8072: POP
8073: POP
// end else
8074: GO 8373
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and UnitFilter ( controlTowers , [ f_empty ] ) then
8076: LD_VAR 0 22
8080: PUSH
8081: LD_VAR 0 22
8085: PPUSH
8086: LD_INT 56
8088: PUSH
8089: EMPTY
8090: LIST
8091: PPUSH
8092: CALL_OW 72
8096: AND
8097: PUSH
8098: LD_VAR 0 44
8102: PPUSH
8103: LD_INT 58
8105: PUSH
8106: EMPTY
8107: LIST
8108: PPUSH
8109: CALL_OW 72
8113: AND
8114: IFFALSE 8231
// begin for i := 1 to mechanics do
8116: LD_ADDR_VAR 0 14
8120: PUSH
8121: DOUBLE
8122: LD_INT 1
8124: DEC
8125: ST_TO_ADDR
8126: LD_VAR 0 22
8130: PUSH
8131: FOR_TO
8132: IFFALSE 8227
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8134: LD_VAR 0 22
8138: PUSH
8139: LD_VAR 0 14
8143: ARRAY
8144: PPUSH
8145: CALL_OW 110
8149: PUSH
8150: LD_INT 1
8152: EQUAL
8153: PUSH
8154: LD_VAR 0 22
8158: PUSH
8159: LD_VAR 0 14
8163: ARRAY
8164: PPUSH
8165: CALL_OW 314
8169: NOT
8170: AND
8171: PUSH
8172: LD_VAR 0 22
8176: PUSH
8177: LD_VAR 0 14
8181: ARRAY
8182: PPUSH
8183: CALL_OW 310
8187: NOT
8188: AND
8189: IFFALSE 8225
// ComEnterUnit ( mechanics [ i ] , controlTowers [ rand ( 1 , controlTowers ) ] ) ;
8191: LD_VAR 0 22
8195: PUSH
8196: LD_VAR 0 14
8200: ARRAY
8201: PPUSH
8202: LD_VAR 0 44
8206: PUSH
8207: LD_INT 1
8209: PPUSH
8210: LD_VAR 0 44
8214: PPUSH
8215: CALL_OW 12
8219: ARRAY
8220: PPUSH
8221: CALL_OW 120
8225: GO 8131
8227: POP
8228: POP
// end else
8229: GO 8373
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
8231: LD_VAR 0 22
8235: PUSH
8236: LD_VAR 0 22
8240: PPUSH
8241: LD_INT 56
8243: PUSH
8244: EMPTY
8245: LIST
8246: PPUSH
8247: CALL_OW 72
8251: AND
8252: PUSH
8253: LD_VAR 0 40
8257: AND
8258: IFFALSE 8373
// for i := 1 to mechanics do
8260: LD_ADDR_VAR 0 14
8264: PUSH
8265: DOUBLE
8266: LD_INT 1
8268: DEC
8269: ST_TO_ADDR
8270: LD_VAR 0 22
8274: PUSH
8275: FOR_TO
8276: IFFALSE 8371
// if GetTag ( mechanics [ i ] ) = 1 and not HasTask ( mechanics [ i ] ) and not IsInUnit ( mechanics [ i ] ) then
8278: LD_VAR 0 22
8282: PUSH
8283: LD_VAR 0 14
8287: ARRAY
8288: PPUSH
8289: CALL_OW 110
8293: PUSH
8294: LD_INT 1
8296: EQUAL
8297: PUSH
8298: LD_VAR 0 22
8302: PUSH
8303: LD_VAR 0 14
8307: ARRAY
8308: PPUSH
8309: CALL_OW 314
8313: NOT
8314: AND
8315: PUSH
8316: LD_VAR 0 22
8320: PUSH
8321: LD_VAR 0 14
8325: ARRAY
8326: PPUSH
8327: CALL_OW 310
8331: NOT
8332: AND
8333: IFFALSE 8369
// ComEnterUnit ( mechanics [ i ] , factory [ rand ( 1 , factory ) ] ) ;
8335: LD_VAR 0 22
8339: PUSH
8340: LD_VAR 0 14
8344: ARRAY
8345: PPUSH
8346: LD_VAR 0 40
8350: PUSH
8351: LD_INT 1
8353: PPUSH
8354: LD_VAR 0 40
8358: PPUSH
8359: CALL_OW 12
8363: ARRAY
8364: PPUSH
8365: CALL_OW 120
8369: GO 8275
8371: POP
8372: POP
// for i := 1 to personel do
8373: LD_ADDR_VAR 0 14
8377: PUSH
8378: DOUBLE
8379: LD_INT 1
8381: DEC
8382: ST_TO_ADDR
8383: LD_VAR 0 19
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8430
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
8391: LD_ADDR_VAR 0 23
8395: PUSH
8396: LD_VAR 0 23
8400: PUSH
8401: LD_VAR 0 19
8405: PUSH
8406: LD_VAR 0 14
8410: ARRAY
8411: PPUSH
8412: LD_INT 25
8414: PUSH
8415: LD_INT 4
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 72
8426: ADD
8427: ST_TO_ADDR
8428: GO 8388
8430: POP
8431: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8432: LD_VAR 0 23
8436: PUSH
8437: LD_VAR 0 4
8441: PPUSH
8442: LD_INT 22
8444: PUSH
8445: LD_VAR 0 1
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 21
8456: PUSH
8457: LD_INT 1
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 3
8466: PUSH
8467: LD_INT 24
8469: PUSH
8470: LD_INT 1000
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 70
8490: AND
8491: IFFALSE 8928
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
8493: LD_ADDR_VAR 0 48
8497: PUSH
8498: LD_VAR 0 4
8502: PPUSH
8503: LD_INT 22
8505: PUSH
8506: LD_VAR 0 1
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PUSH
8515: LD_INT 21
8517: PUSH
8518: LD_INT 1
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: LD_INT 24
8530: PUSH
8531: LD_INT 1000
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 70
8551: PUSH
8552: FOR_IN
8553: IFFALSE 8924
// begin if GetDistUnitArea ( damageUnit , healArea ) <= 5 then
8555: LD_VAR 0 48
8559: PPUSH
8560: LD_VAR 0 5
8564: PPUSH
8565: CALL_OW 299
8569: PUSH
8570: LD_INT 5
8572: LESSEQUAL
8573: IFFALSE 8733
// for i := 1 to scientists do
8575: LD_ADDR_VAR 0 14
8579: PUSH
8580: DOUBLE
8581: LD_INT 1
8583: DEC
8584: ST_TO_ADDR
8585: LD_VAR 0 23
8589: PUSH
8590: FOR_TO
8591: IFFALSE 8731
// if GetTag ( scientists [ i ] ) = 1 then
8593: LD_VAR 0 23
8597: PUSH
8598: LD_VAR 0 14
8602: ARRAY
8603: PPUSH
8604: CALL_OW 110
8608: PUSH
8609: LD_INT 1
8611: EQUAL
8612: IFFALSE 8729
// begin if GetTaskList ( scientists [ i ] ) then
8614: LD_VAR 0 23
8618: PUSH
8619: LD_VAR 0 14
8623: ARRAY
8624: PPUSH
8625: CALL_OW 437
8629: IFFALSE 8677
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
8631: LD_VAR 0 23
8635: PUSH
8636: LD_VAR 0 14
8640: ARRAY
8641: PPUSH
8642: CALL_OW 437
8646: PUSH
8647: LD_INT 1
8649: ARRAY
8650: PUSH
8651: LD_INT 1
8653: ARRAY
8654: PUSH
8655: LD_STRING e
8657: EQUAL
8658: IFFALSE 8677
// SetTaskList ( scientists [ i ] , [ ] ) ;
8660: LD_VAR 0 23
8664: PUSH
8665: LD_VAR 0 14
8669: ARRAY
8670: PPUSH
8671: EMPTY
8672: PPUSH
8673: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
8677: LD_VAR 0 23
8681: PUSH
8682: LD_VAR 0 14
8686: ARRAY
8687: PPUSH
8688: CALL_OW 310
8692: IFFALSE 8709
// ComExitBuilding ( scientists [ i ] ) ;
8694: LD_VAR 0 23
8698: PUSH
8699: LD_VAR 0 14
8703: ARRAY
8704: PPUSH
8705: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
8709: LD_VAR 0 23
8713: PUSH
8714: LD_VAR 0 14
8718: ARRAY
8719: PPUSH
8720: LD_VAR 0 48
8724: PPUSH
8725: CALL_OW 188
// end ;
8729: GO 8590
8731: POP
8732: POP
// if GetLives ( damageUnit ) < 250 and IsInArea ( damageUnit , baseArea ) then
8733: LD_VAR 0 48
8737: PPUSH
8738: CALL_OW 256
8742: PUSH
8743: LD_INT 250
8745: LESS
8746: PUSH
8747: LD_VAR 0 48
8751: PPUSH
8752: LD_VAR 0 4
8756: PPUSH
8757: CALL_OW 308
8761: AND
8762: IFFALSE 8922
// for i := 1 to scientists do
8764: LD_ADDR_VAR 0 14
8768: PUSH
8769: DOUBLE
8770: LD_INT 1
8772: DEC
8773: ST_TO_ADDR
8774: LD_VAR 0 23
8778: PUSH
8779: FOR_TO
8780: IFFALSE 8920
// if GetTag ( scientists [ i ] ) = 1 then
8782: LD_VAR 0 23
8786: PUSH
8787: LD_VAR 0 14
8791: ARRAY
8792: PPUSH
8793: CALL_OW 110
8797: PUSH
8798: LD_INT 1
8800: EQUAL
8801: IFFALSE 8918
// begin if GetTaskList ( scientists [ i ] ) then
8803: LD_VAR 0 23
8807: PUSH
8808: LD_VAR 0 14
8812: ARRAY
8813: PPUSH
8814: CALL_OW 437
8818: IFFALSE 8866
// if GetTaskList ( scientists [ i ] ) [ 1 ] [ 1 ] = e then
8820: LD_VAR 0 23
8824: PUSH
8825: LD_VAR 0 14
8829: ARRAY
8830: PPUSH
8831: CALL_OW 437
8835: PUSH
8836: LD_INT 1
8838: ARRAY
8839: PUSH
8840: LD_INT 1
8842: ARRAY
8843: PUSH
8844: LD_STRING e
8846: EQUAL
8847: IFFALSE 8866
// SetTaskList ( scientists [ i ] , [ ] ) ;
8849: LD_VAR 0 23
8853: PUSH
8854: LD_VAR 0 14
8858: ARRAY
8859: PPUSH
8860: EMPTY
8861: PPUSH
8862: CALL_OW 446
// if IsInUnit ( scientists [ i ] ) then
8866: LD_VAR 0 23
8870: PUSH
8871: LD_VAR 0 14
8875: ARRAY
8876: PPUSH
8877: CALL_OW 310
8881: IFFALSE 8898
// ComExitBuilding ( scientists [ i ] ) ;
8883: LD_VAR 0 23
8887: PUSH
8888: LD_VAR 0 14
8892: ARRAY
8893: PPUSH
8894: CALL_OW 122
// AddComHeal ( scientists [ i ] , damageUnit ) ;
8898: LD_VAR 0 23
8902: PUSH
8903: LD_VAR 0 14
8907: ARRAY
8908: PPUSH
8909: LD_VAR 0 48
8913: PPUSH
8914: CALL_OW 188
// end ;
8918: GO 8779
8920: POP
8921: POP
// end ;
8922: GO 8552
8924: POP
8925: POP
// end else
8926: GO 9070
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
8928: LD_VAR 0 23
8932: PUSH
8933: LD_VAR 0 23
8937: PPUSH
8938: LD_INT 56
8940: PUSH
8941: EMPTY
8942: LIST
8943: PPUSH
8944: CALL_OW 72
8948: AND
8949: PUSH
8950: LD_VAR 0 41
8954: AND
8955: IFFALSE 9070
// for i := 1 to scientists do
8957: LD_ADDR_VAR 0 14
8961: PUSH
8962: DOUBLE
8963: LD_INT 1
8965: DEC
8966: ST_TO_ADDR
8967: LD_VAR 0 23
8971: PUSH
8972: FOR_TO
8973: IFFALSE 9068
// if GetTag ( scientists [ i ] ) = 1 and not HasTask ( scientists [ i ] ) and not IsInUnit ( scientists [ i ] ) then
8975: LD_VAR 0 23
8979: PUSH
8980: LD_VAR 0 14
8984: ARRAY
8985: PPUSH
8986: CALL_OW 110
8990: PUSH
8991: LD_INT 1
8993: EQUAL
8994: PUSH
8995: LD_VAR 0 23
8999: PUSH
9000: LD_VAR 0 14
9004: ARRAY
9005: PPUSH
9006: CALL_OW 314
9010: NOT
9011: AND
9012: PUSH
9013: LD_VAR 0 23
9017: PUSH
9018: LD_VAR 0 14
9022: ARRAY
9023: PPUSH
9024: CALL_OW 310
9028: NOT
9029: AND
9030: IFFALSE 9066
// ComEnterUnit ( scientists [ i ] , lab [ rand ( 1 , lab ) ] ) ;
9032: LD_VAR 0 23
9036: PUSH
9037: LD_VAR 0 14
9041: ARRAY
9042: PPUSH
9043: LD_VAR 0 41
9047: PUSH
9048: LD_INT 1
9050: PPUSH
9051: LD_VAR 0 41
9055: PPUSH
9056: CALL_OW 12
9060: ARRAY
9061: PPUSH
9062: CALL_OW 120
9066: GO 8972
9068: POP
9069: POP
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , us_bulldozer ] ] ) then
9070: LD_INT 22
9072: PUSH
9073: LD_VAR 0 1
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 34
9084: PUSH
9085: LD_INT 14
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PPUSH
9096: CALL_OW 69
9100: NOT
9101: IFFALSE 9128
// AddComConstruct ( factory [ 1 ] , us_heavy_tracked , engine_combustion , control_remote , us_bulldozer ) ;
9103: LD_VAR 0 40
9107: PUSH
9108: LD_INT 1
9110: ARRAY
9111: PPUSH
9112: LD_INT 4
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: LD_INT 2
9120: PPUSH
9121: LD_INT 14
9123: PPUSH
9124: CALL_OW 185
// if vehicles < vehiclesAmount and factory then
9128: LD_VAR 0 25
9132: PUSH
9133: LD_VAR 0 8
9137: LESS
9138: PUSH
9139: LD_VAR 0 40
9143: AND
9144: IFFALSE 9392
// begin tmp = vehiclesAmount - vehicles ;
9146: LD_ADDR_VAR 0 16
9150: PUSH
9151: LD_VAR 0 8
9155: PUSH
9156: LD_VAR 0 25
9160: MINUS
9161: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
9162: LD_ADDR_VAR 0 32
9166: PUSH
9167: LD_VAR 0 1
9171: PPUSH
9172: LD_VAR 0 2
9176: PPUSH
9177: CALL 13999 0 2
9181: ST_TO_ADDR
// for i := 1 to tmp do
9182: LD_ADDR_VAR 0 14
9186: PUSH
9187: DOUBLE
9188: LD_INT 1
9190: DEC
9191: ST_TO_ADDR
9192: LD_VAR 0 16
9196: PUSH
9197: FOR_TO
9198: IFFALSE 9388
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
9200: LD_ADDR_VAR 0 16
9204: PUSH
9205: LD_VAR 0 32
9209: PUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_VAR 0 32
9217: PPUSH
9218: CALL_OW 12
9222: ARRAY
9223: ST_TO_ADDR
// if tmp in [ 6 , 34 , 14 , 71 , 47 ] then
9224: LD_VAR 0 16
9228: PUSH
9229: LD_INT 6
9231: PUSH
9232: LD_INT 34
9234: PUSH
9235: LD_INT 14
9237: PUSH
9238: LD_INT 71
9240: PUSH
9241: LD_INT 47
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: IN
9251: IFFALSE 9289
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
9253: LD_ADDR_VAR 0 33
9257: PUSH
9258: LD_INT 4
9260: PUSH
9261: EMPTY
9262: LIST
9263: PUSH
9264: LD_INT 14
9266: PUSH
9267: EMPTY
9268: LIST
9269: PUSH
9270: LD_INT 24
9272: PUSH
9273: EMPTY
9274: LIST
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: PUSH
9281: LD_VAR 0 2
9285: ARRAY
9286: ST_TO_ADDR
9287: GO 9343
// chassis = [ [ us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
9289: LD_ADDR_VAR 0 33
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: LD_INT 4
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 13
9306: PUSH
9307: LD_INT 14
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 21
9316: PUSH
9317: LD_INT 23
9319: PUSH
9320: LD_INT 24
9322: PUSH
9323: LD_INT 22
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: PUSH
9337: LD_VAR 0 2
9341: ARRAY
9342: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_remote , tmp ) ;
9343: LD_VAR 0 40
9347: PUSH
9348: LD_INT 1
9350: ARRAY
9351: PPUSH
9352: LD_VAR 0 33
9356: PUSH
9357: LD_INT 1
9359: PPUSH
9360: LD_VAR 0 33
9364: PPUSH
9365: CALL_OW 12
9369: ARRAY
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: LD_INT 2
9376: PPUSH
9377: LD_VAR 0 16
9381: PPUSH
9382: CALL_OW 185
// end ;
9386: GO 9197
9388: POP
9389: POP
// end else
9390: GO 9405
// ComCancel ( factory [ 1 ] ) ;
9392: LD_VAR 0 40
9396: PUSH
9397: LD_INT 1
9399: ARRAY
9400: PPUSH
9401: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ] ] ) do
9405: LD_ADDR_VAR 0 24
9409: PUSH
9410: LD_VAR 0 4
9414: PPUSH
9415: LD_INT 22
9417: PUSH
9418: LD_VAR 0 1
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: LD_INT 21
9429: PUSH
9430: LD_INT 2
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 50
9439: PUSH
9440: EMPTY
9441: LIST
9442: PUSH
9443: LD_INT 3
9445: PUSH
9446: LD_INT 2
9448: PUSH
9449: LD_INT 34
9451: PUSH
9452: LD_INT 12
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 34
9461: PUSH
9462: LD_INT 51
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 34
9471: PUSH
9472: LD_INT 32
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 34
9481: PUSH
9482: LD_INT 31
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PPUSH
9506: CALL_OW 70
9510: PUSH
9511: FOR_IN
9512: IFFALSE 9667
// begin vehicleInList = false ;
9514: LD_ADDR_VAR 0 26
9518: PUSH
9519: LD_INT 0
9521: ST_TO_ADDR
// for i := 1 to vehicles do
9522: LD_ADDR_VAR 0 14
9526: PUSH
9527: DOUBLE
9528: LD_INT 1
9530: DEC
9531: ST_TO_ADDR
9532: LD_VAR 0 25
9536: PUSH
9537: FOR_TO
9538: IFFALSE 9568
// if vehicle in vehicles [ i ] then
9540: LD_VAR 0 24
9544: PUSH
9545: LD_VAR 0 25
9549: PUSH
9550: LD_VAR 0 14
9554: ARRAY
9555: IN
9556: IFFALSE 9566
// vehicleInList = true ;
9558: LD_ADDR_VAR 0 26
9562: PUSH
9563: LD_INT 1
9565: ST_TO_ADDR
9566: GO 9537
9568: POP
9569: POP
// if not vehicleInList then
9570: LD_VAR 0 26
9574: NOT
9575: IFFALSE 9665
// begin if vehicles < vehiclesToAttackAmount then
9577: LD_VAR 0 25
9581: PUSH
9582: LD_VAR 0 10
9586: LESS
9587: IFFALSE 9628
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] else
9589: LD_ADDR_VAR 0 25
9593: PUSH
9594: LD_VAR 0 25
9598: PUSH
9599: LD_VAR 0 24
9603: PUSH
9604: LD_VAR 0 24
9608: PPUSH
9609: CALL_OW 313
9613: PUSH
9614: LD_INT 1
9616: ARRAY
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: EMPTY
9623: LIST
9624: ADD
9625: ST_TO_ADDR
9626: GO 9665
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] ] ] ;
9628: LD_ADDR_VAR 0 25
9632: PUSH
9633: LD_VAR 0 25
9637: PUSH
9638: LD_VAR 0 24
9642: PUSH
9643: LD_VAR 0 24
9647: PPUSH
9648: CALL_OW 313
9652: PUSH
9653: LD_INT 1
9655: ARRAY
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: ADD
9664: ST_TO_ADDR
// end ; end ;
9665: GO 9511
9667: POP
9668: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
9669: LD_ADDR_VAR 0 50
9673: PUSH
9674: LD_INT 81
9676: PUSH
9677: LD_VAR 0 1
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PPUSH
9686: CALL_OW 69
9690: PUSH
9691: FOR_IN
9692: IFFALSE 10210
// begin offensiveUnits = [ ] ;
9694: LD_ADDR_VAR 0 27
9698: PUSH
9699: EMPTY
9700: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
9701: LD_ADDR_VAR 0 28
9705: PUSH
9706: LD_INT 0
9708: ST_TO_ADDR
// for i := 1 to vehicles do
9709: LD_ADDR_VAR 0 14
9713: PUSH
9714: DOUBLE
9715: LD_INT 1
9717: DEC
9718: ST_TO_ADDR
9719: LD_VAR 0 25
9723: PUSH
9724: FOR_TO
9725: IFFALSE 9933
// if GetTag ( vehicles [ i ] [ 1 ] ) = 2 then
9727: LD_VAR 0 25
9731: PUSH
9732: LD_VAR 0 14
9736: ARRAY
9737: PUSH
9738: LD_INT 1
9740: ARRAY
9741: PPUSH
9742: CALL_OW 110
9746: PUSH
9747: LD_INT 2
9749: EQUAL
9750: IFFALSE 9931
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
9752: LD_VAR 0 25
9756: PUSH
9757: LD_VAR 0 14
9761: ARRAY
9762: PUSH
9763: LD_INT 1
9765: ARRAY
9766: PPUSH
9767: CALL_OW 256
9771: PUSH
9772: LD_INT 650
9774: GREATER
9775: IFFALSE 9791
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
9777: LD_ADDR_VAR 0 28
9781: PUSH
9782: LD_VAR 0 28
9786: PUSH
9787: LD_INT 1
9789: PLUS
9790: ST_TO_ADDR
// if IsInArea ( vehicles [ i ] [ 1 ] , baseArea ) then
9791: LD_VAR 0 25
9795: PUSH
9796: LD_VAR 0 14
9800: ARRAY
9801: PUSH
9802: LD_INT 1
9804: ARRAY
9805: PPUSH
9806: LD_VAR 0 4
9810: PPUSH
9811: CALL_OW 308
9815: IFFALSE 9843
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
9817: LD_ADDR_VAR 0 27
9821: PUSH
9822: LD_VAR 0 27
9826: PUSH
9827: LD_VAR 0 25
9831: PUSH
9832: LD_VAR 0 14
9836: ARRAY
9837: PUSH
9838: LD_INT 1
9840: ARRAY
9841: ADD
9842: ST_TO_ADDR
// for j = 1 to personel do
9843: LD_ADDR_VAR 0 15
9847: PUSH
9848: DOUBLE
9849: LD_INT 1
9851: DEC
9852: ST_TO_ADDR
9853: LD_VAR 0 19
9857: PUSH
9858: FOR_TO
9859: IFFALSE 9929
// if personel [ j ] = vehicles [ i ] [ 2 ] then
9861: LD_VAR 0 19
9865: PUSH
9866: LD_VAR 0 15
9870: ARRAY
9871: PUSH
9872: LD_VAR 0 25
9876: PUSH
9877: LD_VAR 0 14
9881: ARRAY
9882: PUSH
9883: LD_INT 2
9885: ARRAY
9886: EQUAL
9887: IFFALSE 9927
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
9889: LD_ADDR_VAR 0 19
9893: PUSH
9894: LD_VAR 0 19
9898: PPUSH
9899: LD_VAR 0 15
9903: PUSH
9904: LD_VAR 0 19
9908: PUSH
9909: LD_VAR 0 15
9913: ARRAY
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PPUSH
9919: LD_INT 3
9921: PPUSH
9922: CALL 45801 0 3
9926: ST_TO_ADDR
9927: GO 9858
9929: POP
9930: POP
// end ;
9931: GO 9724
9933: POP
9934: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
9935: LD_VAR 0 10
9939: PUSH
9940: LD_VAR 0 28
9944: LESSEQUAL
9945: IFFALSE 10208
// begin for i := 1 to offensiveUnits do
9947: LD_ADDR_VAR 0 14
9951: PUSH
9952: DOUBLE
9953: LD_INT 1
9955: DEC
9956: ST_TO_ADDR
9957: LD_VAR 0 27
9961: PUSH
9962: FOR_TO
9963: IFFALSE 10206
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , offensiveUnits [ i ] ) ;
9965: LD_ADDR_VAR 0 29
9969: PUSH
9970: LD_INT 81
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 69
9984: PPUSH
9985: LD_VAR 0 27
9989: PUSH
9990: LD_VAR 0 14
9994: ARRAY
9995: PPUSH
9996: CALL_OW 74
10000: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ i ] ) ;
10001: LD_ADDR_VAR 0 30
10005: PUSH
10006: LD_INT 81
10008: PUSH
10009: LD_INT 1
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 59
10021: PUSH
10022: EMPTY
10023: LIST
10024: PUSH
10025: LD_INT 21
10027: PUSH
10028: LD_INT 1
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 2
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: PPUSH
10058: CALL_OW 69
10062: PPUSH
10063: LD_VAR 0 27
10067: PUSH
10068: LD_VAR 0 14
10072: ARRAY
10073: PPUSH
10074: CALL_OW 74
10078: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ i ] , target1 ) + 9 < GetDistUnits ( offensiveUnits [ i ] , target2 ) then
10079: LD_VAR 0 27
10083: PUSH
10084: LD_VAR 0 14
10088: ARRAY
10089: PPUSH
10090: LD_VAR 0 29
10094: PPUSH
10095: CALL_OW 296
10099: PUSH
10100: LD_INT 9
10102: PLUS
10103: PUSH
10104: LD_VAR 0 27
10108: PUSH
10109: LD_VAR 0 14
10113: ARRAY
10114: PPUSH
10115: LD_VAR 0 30
10119: PPUSH
10120: CALL_OW 296
10124: LESS
10125: IFFALSE 10149
// ComAttackUnit ( offensiveUnits [ i ] , target1 ) else
10127: LD_VAR 0 27
10131: PUSH
10132: LD_VAR 0 14
10136: ARRAY
10137: PPUSH
10138: LD_VAR 0 29
10142: PPUSH
10143: CALL_OW 115
10147: GO 10169
// ComAttackUnit ( offensiveUnits [ i ] , target2 ) ;
10149: LD_VAR 0 27
10153: PUSH
10154: LD_VAR 0 14
10158: ARRAY
10159: PPUSH
10160: LD_VAR 0 30
10164: PPUSH
10165: CALL_OW 115
// AddComAgressiveMove ( offensiveUnits [ i ] , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10169: LD_VAR 0 27
10173: PUSH
10174: LD_VAR 0 14
10178: ARRAY
10179: PPUSH
10180: LD_VAR 0 50
10184: PPUSH
10185: CALL_OW 250
10189: PPUSH
10190: LD_VAR 0 50
10194: PPUSH
10195: CALL_OW 251
10199: PPUSH
10200: CALL_OW 174
// end ;
10204: GO 9962
10206: POP
10207: POP
// end ; end ;
10208: GO 9691
10210: POP
10211: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
10212: LD_ADDR_VAR 0 50
10216: PUSH
10217: LD_VAR 0 7
10221: PPUSH
10222: LD_INT 81
10224: PUSH
10225: LD_VAR 0 1
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 70
10238: PUSH
10239: FOR_IN
10240: IFFALSE 10468
// begin defenceUnits = [ ] ;
10242: LD_ADDR_VAR 0 31
10246: PUSH
10247: EMPTY
10248: ST_TO_ADDR
// for i := 1 to personel do
10249: LD_ADDR_VAR 0 14
10253: PUSH
10254: DOUBLE
10255: LD_INT 1
10257: DEC
10258: ST_TO_ADDR
10259: LD_VAR 0 19
10263: PUSH
10264: FOR_TO
10265: IFFALSE 10312
// if GetTag ( personel [ i ] ) = 3 then
10267: LD_VAR 0 19
10271: PUSH
10272: LD_VAR 0 14
10276: ARRAY
10277: PPUSH
10278: CALL_OW 110
10282: PUSH
10283: LD_INT 3
10285: EQUAL
10286: IFFALSE 10310
// defenceUnits = defenceUnits ^ personel [ i ] ;
10288: LD_ADDR_VAR 0 31
10292: PUSH
10293: LD_VAR 0 31
10297: PUSH
10298: LD_VAR 0 19
10302: PUSH
10303: LD_VAR 0 14
10307: ARRAY
10308: ADD
10309: ST_TO_ADDR
10310: GO 10264
10312: POP
10313: POP
// for i := 1 to vehicles do
10314: LD_ADDR_VAR 0 14
10318: PUSH
10319: DOUBLE
10320: LD_INT 1
10322: DEC
10323: ST_TO_ADDR
10324: LD_VAR 0 25
10328: PUSH
10329: FOR_TO
10330: IFFALSE 10385
// if GetTag ( vehicles [ i ] [ 1 ] ) = 3 then
10332: LD_VAR 0 25
10336: PUSH
10337: LD_VAR 0 14
10341: ARRAY
10342: PUSH
10343: LD_INT 1
10345: ARRAY
10346: PPUSH
10347: CALL_OW 110
10351: PUSH
10352: LD_INT 3
10354: EQUAL
10355: IFFALSE 10383
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
10357: LD_ADDR_VAR 0 31
10361: PUSH
10362: LD_VAR 0 31
10366: PUSH
10367: LD_VAR 0 25
10371: PUSH
10372: LD_VAR 0 14
10376: ARRAY
10377: PUSH
10378: LD_INT 1
10380: ARRAY
10381: ADD
10382: ST_TO_ADDR
10383: GO 10329
10385: POP
10386: POP
// ComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
10387: LD_VAR 0 31
10391: PPUSH
10392: LD_INT 3
10394: PUSH
10395: LD_INT 60
10397: PUSH
10398: EMPTY
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 72
10409: PPUSH
10410: LD_VAR 0 50
10414: PPUSH
10415: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , GetX ( enemyUnits ) , GetY ( enemyUnits ) ) ;
10419: LD_VAR 0 31
10423: PPUSH
10424: LD_INT 3
10426: PUSH
10427: LD_INT 60
10429: PUSH
10430: EMPTY
10431: LIST
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PPUSH
10437: CALL_OW 72
10441: PPUSH
10442: LD_VAR 0 50
10446: PPUSH
10447: CALL_OW 250
10451: PPUSH
10452: LD_VAR 0 50
10456: PPUSH
10457: CALL_OW 251
10461: PPUSH
10462: CALL_OW 174
// end ;
10466: GO 10239
10468: POP
10469: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
10470: LD_ADDR_VAR 0 45
10474: PUSH
10475: LD_INT 22
10477: PUSH
10478: LD_VAR 0 1
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 2
10489: PUSH
10490: LD_INT 30
10492: PUSH
10493: LD_INT 31
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 30
10502: PUSH
10503: LD_INT 32
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 30
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 30
10522: PUSH
10523: LD_INT 4
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 30
10532: PUSH
10533: LD_INT 5
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PPUSH
10552: CALL_OW 69
10556: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
10557: LD_ADDR_VAR 0 46
10561: PUSH
10562: LD_INT 81
10564: PUSH
10565: LD_VAR 0 1
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 21
10576: PUSH
10577: LD_INT 3
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 58
10586: PUSH
10587: EMPTY
10588: LIST
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: LIST
10594: PPUSH
10595: CALL_OW 69
10599: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
10600: LD_VAR 0 45
10604: PUSH
10605: LD_VAR 0 46
10609: AND
10610: IFFALSE 10680
// for i in attackBuildings do
10612: LD_ADDR_VAR 0 14
10616: PUSH
10617: LD_VAR 0 45
10621: PUSH
10622: FOR_IN
10623: IFFALSE 10678
// for j in enemyBuildings do
10625: LD_ADDR_VAR 0 15
10629: PUSH
10630: LD_VAR 0 46
10634: PUSH
10635: FOR_IN
10636: IFFALSE 10674
// if GetDistUnits ( i , j ) < 12 then
10638: LD_VAR 0 14
10642: PPUSH
10643: LD_VAR 0 15
10647: PPUSH
10648: CALL_OW 296
10652: PUSH
10653: LD_INT 12
10655: LESS
10656: IFFALSE 10672
// ComAttackUnit ( i , j ) ;
10658: LD_VAR 0 14
10662: PPUSH
10663: LD_VAR 0 15
10667: PPUSH
10668: CALL_OW 115
10672: GO 10635
10674: POP
10675: POP
10676: GO 10622
10678: POP
10679: POP
// if canRebuild then
10680: LD_VAR 0 12
10684: IFFALSE 11353
// begin tmp = false ;
10686: LD_ADDR_VAR 0 16
10690: PUSH
10691: LD_INT 0
10693: ST_TO_ADDR
// unit = false ;
10694: LD_ADDR_VAR 0 18
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// for destroyedBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
10702: LD_ADDR_VAR 0 36
10706: PUSH
10707: LD_VAR 0 4
10711: PPUSH
10712: LD_INT 22
10714: PUSH
10715: LD_VAR 0 1
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 21
10726: PUSH
10727: LD_INT 3
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 3
10736: PUSH
10737: LD_INT 24
10739: PUSH
10740: LD_INT 250
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 70
10760: PUSH
10761: FOR_IN
10762: IFFALSE 10864
// begin unit = destroyedBuilding ;
10764: LD_ADDR_VAR 0 18
10768: PUSH
10769: LD_VAR 0 36
10773: ST_TO_ADDR
// for i := 1 to destroyedBuildings / 4 do
10774: LD_ADDR_VAR 0 14
10778: PUSH
10779: DOUBLE
10780: LD_INT 1
10782: DEC
10783: ST_TO_ADDR
10784: LD_VAR 0 35
10788: PUSH
10789: LD_INT 4
10791: DIVREAL
10792: PUSH
10793: FOR_TO
10794: IFFALSE 10860
// if destroyedBuildings [ i + 1 ] = GetX ( destroyedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( destroyedBuilding ) then
10796: LD_VAR 0 35
10800: PUSH
10801: LD_VAR 0 14
10805: PUSH
10806: LD_INT 1
10808: PLUS
10809: ARRAY
10810: PUSH
10811: LD_VAR 0 36
10815: PPUSH
10816: CALL_OW 250
10820: EQUAL
10821: PUSH
10822: LD_VAR 0 35
10826: PUSH
10827: LD_VAR 0 14
10831: PUSH
10832: LD_INT 2
10834: PLUS
10835: ARRAY
10836: PUSH
10837: LD_VAR 0 36
10841: PPUSH
10842: CALL_OW 251
10846: EQUAL
10847: AND
10848: IFFALSE 10858
// tmp = true ;
10850: LD_ADDR_VAR 0 16
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
10858: GO 10793
10860: POP
10861: POP
// end ;
10862: GO 10761
10864: POP
10865: POP
// if not tmp and unit then
10866: LD_VAR 0 16
10870: NOT
10871: PUSH
10872: LD_VAR 0 18
10876: AND
10877: IFFALSE 11137
// begin if GetBType ( unit ) = 1 then
10879: LD_VAR 0 18
10883: PPUSH
10884: CALL_OW 266
10888: PUSH
10889: LD_INT 1
10891: EQUAL
10892: IFFALSE 10946
// destroyedBuildings = destroyedBuildings ^ [ 0 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10894: LD_ADDR_VAR 0 35
10898: PUSH
10899: LD_VAR 0 35
10903: PUSH
10904: LD_INT 0
10906: PUSH
10907: LD_VAR 0 18
10911: PPUSH
10912: CALL_OW 250
10916: PUSH
10917: LD_VAR 0 18
10921: PPUSH
10922: CALL_OW 251
10926: PUSH
10927: LD_VAR 0 18
10931: PPUSH
10932: CALL_OW 254
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: ADD
10943: ST_TO_ADDR
10944: GO 11137
// if GetBType ( unit ) = 3 then
10946: LD_VAR 0 18
10950: PPUSH
10951: CALL_OW 266
10955: PUSH
10956: LD_INT 3
10958: EQUAL
10959: IFFALSE 11013
// destroyedBuildings = destroyedBuildings ^ [ 2 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
10961: LD_ADDR_VAR 0 35
10965: PUSH
10966: LD_VAR 0 35
10970: PUSH
10971: LD_INT 2
10973: PUSH
10974: LD_VAR 0 18
10978: PPUSH
10979: CALL_OW 250
10983: PUSH
10984: LD_VAR 0 18
10988: PPUSH
10989: CALL_OW 251
10993: PUSH
10994: LD_VAR 0 18
10998: PPUSH
10999: CALL_OW 254
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: ADD
11010: ST_TO_ADDR
11011: GO 11137
// if GetBType ( unit ) = 5 then
11013: LD_VAR 0 18
11017: PPUSH
11018: CALL_OW 266
11022: PUSH
11023: LD_INT 5
11025: EQUAL
11026: IFFALSE 11080
// destroyedBuildings = destroyedBuildings ^ [ 4 , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] else
11028: LD_ADDR_VAR 0 35
11032: PUSH
11033: LD_VAR 0 35
11037: PUSH
11038: LD_INT 4
11040: PUSH
11041: LD_VAR 0 18
11045: PPUSH
11046: CALL_OW 250
11050: PUSH
11051: LD_VAR 0 18
11055: PPUSH
11056: CALL_OW 251
11060: PUSH
11061: LD_VAR 0 18
11065: PPUSH
11066: CALL_OW 254
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: ADD
11077: ST_TO_ADDR
11078: GO 11137
// destroyedBuildings = destroyedBuildings ^ [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ;
11080: LD_ADDR_VAR 0 35
11084: PUSH
11085: LD_VAR 0 35
11089: PUSH
11090: LD_VAR 0 18
11094: PPUSH
11095: CALL_OW 266
11099: PUSH
11100: LD_VAR 0 18
11104: PPUSH
11105: CALL_OW 250
11109: PUSH
11110: LD_VAR 0 18
11114: PPUSH
11115: CALL_OW 251
11119: PUSH
11120: LD_VAR 0 18
11124: PPUSH
11125: CALL_OW 254
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: ADD
11136: ST_TO_ADDR
// end ; for constructedBuilding in constructedBuildings do
11137: LD_ADDR_VAR 0 37
11141: PUSH
11142: LD_VAR 0 38
11146: PUSH
11147: FOR_IN
11148: IFFALSE 11351
// for i := 1 to destroyedBuildings / 4 do
11150: LD_ADDR_VAR 0 14
11154: PUSH
11155: DOUBLE
11156: LD_INT 1
11158: DEC
11159: ST_TO_ADDR
11160: LD_VAR 0 35
11164: PUSH
11165: LD_INT 4
11167: DIVREAL
11168: PUSH
11169: FOR_TO
11170: IFFALSE 11347
// if destroyedBuildings [ i + 1 ] = GetX ( constructedBuilding ) and destroyedBuildings [ i + 2 ] = GetY ( constructedBuilding ) and IsOK ( constructedBuilding ) then
11172: LD_VAR 0 35
11176: PUSH
11177: LD_VAR 0 14
11181: PUSH
11182: LD_INT 1
11184: PLUS
11185: ARRAY
11186: PUSH
11187: LD_VAR 0 37
11191: PPUSH
11192: CALL_OW 250
11196: EQUAL
11197: PUSH
11198: LD_VAR 0 35
11202: PUSH
11203: LD_VAR 0 14
11207: PUSH
11208: LD_INT 2
11210: PLUS
11211: ARRAY
11212: PUSH
11213: LD_VAR 0 37
11217: PPUSH
11218: CALL_OW 251
11222: EQUAL
11223: AND
11224: PUSH
11225: LD_VAR 0 37
11229: PPUSH
11230: CALL_OW 302
11234: AND
11235: IFFALSE 11345
// begin destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11237: LD_ADDR_VAR 0 35
11241: PUSH
11242: LD_VAR 0 35
11246: PPUSH
11247: LD_INT 1
11249: PPUSH
11250: CALL_OW 3
11254: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11255: LD_ADDR_VAR 0 35
11259: PUSH
11260: LD_VAR 0 35
11264: PPUSH
11265: LD_INT 1
11267: PPUSH
11268: CALL_OW 3
11272: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11273: LD_ADDR_VAR 0 35
11277: PUSH
11278: LD_VAR 0 35
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: CALL_OW 3
11290: ST_TO_ADDR
// destroyedBuildings := Delete ( destroyedBuildings , 1 ) ;
11291: LD_ADDR_VAR 0 35
11295: PUSH
11296: LD_VAR 0 35
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 3
11308: ST_TO_ADDR
// if GetType ( constructedBuilding ) in [ b_bunker , b_turret ] then
11309: LD_VAR 0 37
11313: PPUSH
11314: CALL_OW 247
11318: PUSH
11319: LD_INT 32
11321: PUSH
11322: LD_INT 33
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: IN
11329: IFFALSE 11345
// AddComPlaceWeapon ( constructedBuilding , weapons ) ;
11331: LD_VAR 0 37
11335: PPUSH
11336: LD_VAR 0 32
11340: PPUSH
11341: CALL_OW 208
// end ;
11345: GO 11169
11347: POP
11348: POP
11349: GO 11147
11351: POP
11352: POP
// end ; wait ( 0 0$01 ) ;
11353: LD_INT 35
11355: PPUSH
11356: CALL_OW 67
// until not personel ;
11360: LD_VAR 0 19
11364: NOT
11365: IFFALSE 5058
// end ; end_of_file
11367: LD_VAR 0 13
11371: RET
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
11372: LD_INT 0
11374: PPUSH
11375: PPUSH
// if debugMode then
11376: LD_EXP 33
11380: IFFALSE 11397
// unit := NewCharacter ( ident ) ;
11382: LD_ADDR_VAR 0 5
11386: PUSH
11387: LD_VAR 0 1
11391: PPUSH
11392: CALL_OW 25
11396: ST_TO_ADDR
// if exist_mode and not debugMode then
11397: LD_VAR 0 2
11401: PUSH
11402: LD_EXP 33
11406: NOT
11407: AND
11408: IFFALSE 11433
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
11410: LD_ADDR_VAR 0 5
11414: PUSH
11415: LD_EXP 32
11419: PUSH
11420: LD_VAR 0 1
11424: STR
11425: PPUSH
11426: CALL_OW 34
11430: ST_TO_ADDR
11431: GO 11455
// if not debugMode then
11433: LD_EXP 33
11437: NOT
11438: IFFALSE 11455
// unit := NewCharacter ( ident ) ;
11440: LD_ADDR_VAR 0 5
11444: PUSH
11445: LD_VAR 0 1
11449: PPUSH
11450: CALL_OW 25
11454: ST_TO_ADDR
// if class then
11455: LD_VAR 0 3
11459: IFFALSE 11475
// SetClass ( unit , class ) ;
11461: LD_VAR 0 5
11465: PPUSH
11466: LD_VAR 0 3
11470: PPUSH
11471: CALL_OW 336
// result := unit ;
11475: LD_ADDR_VAR 0 4
11479: PUSH
11480: LD_VAR 0 5
11484: ST_TO_ADDR
// end ;
11485: LD_VAR 0 4
11489: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
11490: LD_INT 0
11492: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
11493: LD_VAR 0 1
11497: PPUSH
11498: CALL_OW 255
11502: PUSH
11503: LD_VAR 0 3
11507: EQUAL
11508: PUSH
11509: LD_VAR 0 1
11513: PPUSH
11514: CALL_OW 302
11518: AND
11519: IFFALSE 11541
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
11521: LD_VAR 0 1
11525: PPUSH
11526: LD_EXP 31
11530: PUSH
11531: LD_VAR 0 2
11535: STR
11536: PPUSH
11537: CALL_OW 38
// end ;
11541: LD_VAR 0 4
11545: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
11546: LD_INT 0
11548: PPUSH
11549: PPUSH
11550: PPUSH
// resultCharactersToSave = [ ] ;
11551: LD_ADDR_VAR 0 6
11555: PUSH
11556: EMPTY
11557: ST_TO_ADDR
// for unit in characters do
11558: LD_ADDR_VAR 0 5
11562: PUSH
11563: LD_VAR 0 1
11567: PUSH
11568: FOR_IN
11569: IFFALSE 11617
// if GetSide ( unit ) = side and IsOK ( unit ) then
11571: LD_VAR 0 5
11575: PPUSH
11576: CALL_OW 255
11580: PUSH
11581: LD_VAR 0 3
11585: EQUAL
11586: PUSH
11587: LD_VAR 0 5
11591: PPUSH
11592: CALL_OW 302
11596: AND
11597: IFFALSE 11615
// resultCharactersToSave = resultCharactersToSave ^ unit ;
11599: LD_ADDR_VAR 0 6
11603: PUSH
11604: LD_VAR 0 6
11608: PUSH
11609: LD_VAR 0 5
11613: ADD
11614: ST_TO_ADDR
11615: GO 11568
11617: POP
11618: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
11619: LD_VAR 0 6
11623: PPUSH
11624: LD_EXP 31
11628: PUSH
11629: LD_VAR 0 2
11633: STR
11634: PPUSH
11635: CALL_OW 38
// end ;
11639: LD_VAR 0 4
11643: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
11644: LD_INT 0
11646: PPUSH
11647: PPUSH
// for unit in units do
11648: LD_ADDR_VAR 0 5
11652: PUSH
11653: LD_VAR 0 1
11657: PUSH
11658: FOR_IN
11659: IFFALSE 11682
// PlaceUnitArea ( unit , area , spawnMode ) ;
11661: LD_VAR 0 5
11665: PPUSH
11666: LD_VAR 0 2
11670: PPUSH
11671: LD_VAR 0 3
11675: PPUSH
11676: CALL_OW 49
11680: GO 11658
11682: POP
11683: POP
// end ;
11684: LD_VAR 0 4
11688: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
11693: PPUSH
11694: PPUSH
// units = characters ;
11695: LD_ADDR_VAR 0 9
11699: PUSH
11700: LD_VAR 0 1
11704: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
11705: LD_ADDR_VAR 0 9
11709: PUSH
11710: LD_VAR 0 9
11714: PUSH
11715: LD_EXP 39
11719: PUSH
11720: LD_EXP 40
11724: PUSH
11725: LD_EXP 41
11729: PUSH
11730: LD_EXP 42
11734: PUSH
11735: LD_EXP 43
11739: PUSH
11740: LD_EXP 44
11744: PUSH
11745: LD_EXP 45
11749: PUSH
11750: LD_EXP 46
11754: PUSH
11755: LD_EXP 51
11759: PUSH
11760: LD_EXP 48
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: DIFF
11777: ST_TO_ADDR
// if not units and not canTalkHero then
11778: LD_VAR 0 9
11782: NOT
11783: PUSH
11784: LD_VAR 0 5
11788: NOT
11789: AND
11790: IFFALSE 11794
// exit ;
11792: GO 11967
// if not units then
11794: LD_VAR 0 9
11798: NOT
11799: IFFALSE 11820
// units = characters diff [ Burlak ] ;
11801: LD_ADDR_VAR 0 9
11805: PUSH
11806: LD_VAR 0 1
11810: PUSH
11811: LD_EXP 39
11815: PUSH
11816: EMPTY
11817: LIST
11818: DIFF
11819: ST_TO_ADDR
// if not units and canTalkHero then
11820: LD_VAR 0 9
11824: NOT
11825: PUSH
11826: LD_VAR 0 5
11830: AND
11831: IFFALSE 11835
// exit ;
11833: GO 11967
// speaker := units [ rand ( 1 , units ) ] ;
11835: LD_ADDR_VAR 0 8
11839: PUSH
11840: LD_VAR 0 9
11844: PUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 9
11852: PPUSH
11853: CALL_OW 12
11857: ARRAY
11858: ST_TO_ADDR
// if radio then
11859: LD_VAR 0 4
11863: IFFALSE 11912
// begin if GetSex ( speaker ) = sex_male then
11865: LD_VAR 0 8
11869: PPUSH
11870: CALL_OW 258
11874: PUSH
11875: LD_INT 1
11877: EQUAL
11878: IFFALSE 11896
// SayRadio ( speaker , dialogMID ) else
11880: LD_VAR 0 8
11884: PPUSH
11885: LD_VAR 0 2
11889: PPUSH
11890: CALL_OW 94
11894: GO 11910
// SayRadio ( speaker , dialogFID ) ;
11896: LD_VAR 0 8
11900: PPUSH
11901: LD_VAR 0 3
11905: PPUSH
11906: CALL_OW 94
// end else
11910: GO 11957
// begin if GetSex ( speaker ) = sex_male then
11912: LD_VAR 0 8
11916: PPUSH
11917: CALL_OW 258
11921: PUSH
11922: LD_INT 1
11924: EQUAL
11925: IFFALSE 11943
// Say ( speaker , dialogMID ) else
11927: LD_VAR 0 8
11931: PPUSH
11932: LD_VAR 0 2
11936: PPUSH
11937: CALL_OW 88
11941: GO 11957
// Say ( speaker , dialogFID ) ;
11943: LD_VAR 0 8
11947: PPUSH
11948: LD_VAR 0 3
11952: PPUSH
11953: CALL_OW 88
// end ; result := speaker ;
11957: LD_ADDR_VAR 0 6
11961: PUSH
11962: LD_VAR 0 8
11966: ST_TO_ADDR
// end ;
11967: LD_VAR 0 6
11971: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
11972: LD_INT 0
11974: PPUSH
11975: PPUSH
// dir := GetDir ( bunker ) - 3 ;
11976: LD_ADDR_VAR 0 4
11980: PUSH
11981: LD_VAR 0 2
11985: PPUSH
11986: CALL_OW 254
11990: PUSH
11991: LD_INT 3
11993: MINUS
11994: ST_TO_ADDR
// if dir < 0 then
11995: LD_VAR 0 4
11999: PUSH
12000: LD_INT 0
12002: LESS
12003: IFFALSE 12019
// dir := 6 + dir ;
12005: LD_ADDR_VAR 0 4
12009: PUSH
12010: LD_INT 6
12012: PUSH
12013: LD_VAR 0 4
12017: PLUS
12018: ST_TO_ADDR
// SetDir ( un , dir ) ;
12019: LD_VAR 0 1
12023: PPUSH
12024: LD_VAR 0 4
12028: PPUSH
12029: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12033: LD_VAR 0 1
12037: PPUSH
12038: LD_VAR 0 2
12042: PPUSH
12043: CALL_OW 52
// result = un ;
12047: LD_ADDR_VAR 0 3
12051: PUSH
12052: LD_VAR 0 1
12056: ST_TO_ADDR
// end ;
12057: LD_VAR 0 3
12061: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12062: LD_INT 0
12064: PPUSH
12065: PPUSH
// for eng in engs do
12066: LD_ADDR_VAR 0 4
12070: PUSH
12071: LD_VAR 0 1
12075: PUSH
12076: FOR_IN
12077: IFFALSE 12194
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12079: LD_VAR 0 4
12083: PPUSH
12084: CALL_OW 257
12088: PUSH
12089: LD_INT 2
12091: EQUAL
12092: PUSH
12093: LD_VAR 0 4
12097: PPUSH
12098: CALL_OW 302
12102: AND
12103: PUSH
12104: LD_VAR 0 2
12108: AND
12109: PUSH
12110: LD_VAR 0 2
12114: PPUSH
12115: CALL_OW 255
12119: PUSH
12120: LD_VAR 0 4
12124: PPUSH
12125: CALL_OW 255
12129: EQUAL
12130: NOT
12131: AND
12132: IFFALSE 12192
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12134: LD_VAR 0 4
12138: PPUSH
12139: LD_STRING e
12141: PUSH
12142: LD_VAR 0 2
12146: PPUSH
12147: CALL_OW 250
12151: PUSH
12152: LD_VAR 0 2
12156: PPUSH
12157: CALL_OW 251
12161: PUSH
12162: LD_VAR 0 2
12166: PUSH
12167: LD_INT 0
12169: PUSH
12170: LD_INT 0
12172: PUSH
12173: LD_INT 0
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: PPUSH
12188: CALL_OW 447
12192: GO 12076
12194: POP
12195: POP
12196: LD_VAR 0 3
12200: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
12201: LD_INT 0
12203: PPUSH
12204: PPUSH
12205: PPUSH
12206: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
12207: LD_ADDR_VAR 0 7
12211: PUSH
12212: LD_VAR 0 1
12216: PUSH
12217: LD_VAR 0 2
12221: ARRAY
12222: PPUSH
12223: LD_VAR 0 3
12227: PPUSH
12228: CALL_OW 3
12232: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
12233: LD_ADDR_VAR 0 1
12237: PUSH
12238: LD_VAR 0 1
12242: PPUSH
12243: LD_VAR 0 2
12247: PPUSH
12248: LD_VAR 0 7
12252: PPUSH
12253: CALL_OW 1
12257: ST_TO_ADDR
// result := tab ;
12258: LD_ADDR_VAR 0 4
12262: PUSH
12263: LD_VAR 0 1
12267: ST_TO_ADDR
// end ;
12268: LD_VAR 0 4
12272: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
12273: LD_INT 0
12275: PPUSH
12276: PPUSH
12277: PPUSH
12278: PPUSH
12279: PPUSH
12280: PPUSH
12281: PPUSH
12282: PPUSH
12283: PPUSH
12284: PPUSH
12285: PPUSH
12286: PPUSH
// result := [ ] ;
12287: LD_ADDR_VAR 0 8
12291: PUSH
12292: EMPTY
12293: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12294: LD_VAR 0 1
12298: PPUSH
12299: CALL_OW 266
12303: PUSH
12304: LD_INT 0
12306: PUSH
12307: LD_INT 1
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: IN
12314: NOT
12315: IFFALSE 12319
// exit ;
12317: GO 13994
// if name then
12319: LD_VAR 0 3
12323: IFFALSE 12339
// SetBName ( base_dep , name ) ;
12325: LD_VAR 0 1
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: CALL_OW 500
// base := GetBase ( base_dep ) ;
12339: LD_ADDR_VAR 0 16
12343: PUSH
12344: LD_VAR 0 1
12348: PPUSH
12349: CALL_OW 274
12353: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12354: LD_ADDR_VAR 0 17
12358: PUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 255
12368: ST_TO_ADDR
// if sources then
12369: LD_VAR 0 5
12373: IFFALSE 12420
// for i = 1 to 3 do
12375: LD_ADDR_VAR 0 9
12379: PUSH
12380: DOUBLE
12381: LD_INT 1
12383: DEC
12384: ST_TO_ADDR
12385: LD_INT 3
12387: PUSH
12388: FOR_TO
12389: IFFALSE 12418
// AddResourceType ( base , i , sources [ i ] ) ;
12391: LD_VAR 0 16
12395: PPUSH
12396: LD_VAR 0 9
12400: PPUSH
12401: LD_VAR 0 5
12405: PUSH
12406: LD_VAR 0 9
12410: ARRAY
12411: PPUSH
12412: CALL_OW 276
12416: GO 12388
12418: POP
12419: POP
// buildings := GetBaseBuildings ( base , area ) ;
12420: LD_ADDR_VAR 0 18
12424: PUSH
12425: LD_VAR 0 16
12429: PPUSH
12430: LD_VAR 0 2
12434: PPUSH
12435: CALL 48543 0 2
12439: ST_TO_ADDR
// InitHc ;
12440: CALL_OW 19
// InitUc ;
12444: CALL_OW 18
// uc_side := side ;
12448: LD_ADDR_OWVAR 20
12452: PUSH
12453: LD_VAR 0 17
12457: ST_TO_ADDR
// uc_nation := nation ;
12458: LD_ADDR_OWVAR 21
12462: PUSH
12463: LD_VAR 0 6
12467: ST_TO_ADDR
// if buildings then
12468: LD_VAR 0 18
12472: IFFALSE 13853
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12474: LD_ADDR_VAR 0 19
12478: PUSH
12479: LD_VAR 0 18
12483: PPUSH
12484: LD_INT 2
12486: PUSH
12487: LD_INT 30
12489: PUSH
12490: LD_INT 29
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 30
12499: PUSH
12500: LD_INT 30
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 72
12516: ST_TO_ADDR
// if tmp then
12517: LD_VAR 0 19
12521: IFFALSE 12569
// for i in tmp do
12523: LD_ADDR_VAR 0 9
12527: PUSH
12528: LD_VAR 0 19
12532: PUSH
12533: FOR_IN
12534: IFFALSE 12567
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12536: LD_VAR 0 9
12540: PPUSH
12541: CALL_OW 250
12545: PPUSH
12546: LD_VAR 0 9
12550: PPUSH
12551: CALL_OW 251
12555: PPUSH
12556: LD_VAR 0 17
12560: PPUSH
12561: CALL_OW 441
12565: GO 12533
12567: POP
12568: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12569: LD_VAR 0 18
12573: PPUSH
12574: LD_INT 2
12576: PUSH
12577: LD_INT 30
12579: PUSH
12580: LD_INT 31
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 30
12589: PUSH
12590: LD_INT 32
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 30
12599: PUSH
12600: LD_INT 33
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 72
12617: IFFALSE 12716
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12619: LD_ADDR_VAR 0 9
12623: PUSH
12624: LD_VAR 0 18
12628: PPUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 30
12634: PUSH
12635: LD_INT 31
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 30
12644: PUSH
12645: LD_INT 32
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 30
12654: PUSH
12655: LD_INT 33
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PPUSH
12668: CALL_OW 72
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12714
// begin if not GetBWeapon ( i ) then
12676: LD_VAR 0 9
12680: PPUSH
12681: CALL_OW 269
12685: NOT
12686: IFFALSE 12712
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12688: LD_VAR 0 9
12692: PPUSH
12693: LD_VAR 0 9
12697: PPUSH
12698: LD_VAR 0 2
12702: PPUSH
12703: CALL 50771 0 2
12707: PPUSH
12708: CALL_OW 431
// end ;
12712: GO 12673
12714: POP
12715: POP
// end ; for i = 1 to personel do
12716: LD_ADDR_VAR 0 9
12720: PUSH
12721: DOUBLE
12722: LD_INT 1
12724: DEC
12725: ST_TO_ADDR
12726: LD_VAR 0 7
12730: PUSH
12731: FOR_TO
12732: IFFALSE 13833
// begin if i > 4 then
12734: LD_VAR 0 9
12738: PUSH
12739: LD_INT 4
12741: GREATER
12742: IFFALSE 12746
// break ;
12744: GO 13833
// case i of 1 :
12746: LD_VAR 0 9
12750: PUSH
12751: LD_INT 1
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12850
12759: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12760: LD_ADDR_VAR 0 13
12764: PUSH
12765: LD_VAR 0 18
12769: PPUSH
12770: LD_INT 22
12772: PUSH
12773: LD_VAR 0 17
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 58
12784: PUSH
12785: EMPTY
12786: LIST
12787: PUSH
12788: LD_INT 2
12790: PUSH
12791: LD_INT 30
12793: PUSH
12794: LD_INT 31
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 30
12803: PUSH
12804: LD_INT 32
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 30
12813: PUSH
12814: LD_INT 4
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 30
12823: PUSH
12824: LD_INT 5
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: PPUSH
12843: CALL_OW 72
12847: ST_TO_ADDR
12848: GO 13083
12850: LD_INT 2
12852: DOUBLE
12853: EQUAL
12854: IFTRUE 12858
12856: GO 12920
12858: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12859: LD_ADDR_VAR 0 13
12863: PUSH
12864: LD_VAR 0 18
12868: PPUSH
12869: LD_INT 22
12871: PUSH
12872: LD_VAR 0 17
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 2
12883: PUSH
12884: LD_INT 30
12886: PUSH
12887: LD_INT 0
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 30
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PPUSH
12913: CALL_OW 72
12917: ST_TO_ADDR
12918: GO 13083
12920: LD_INT 3
12922: DOUBLE
12923: EQUAL
12924: IFTRUE 12928
12926: GO 13001
12928: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_control_tower ] , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12929: LD_ADDR_VAR 0 13
12933: PUSH
12934: LD_VAR 0 18
12938: PPUSH
12939: LD_INT 22
12941: PUSH
12942: LD_VAR 0 17
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 2
12953: PUSH
12954: LD_INT 30
12956: PUSH
12957: LD_INT 36
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 30
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 30
12976: PUSH
12977: LD_INT 3
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 72
12998: ST_TO_ADDR
12999: GO 13083
13001: LD_INT 4
13003: DOUBLE
13004: EQUAL
13005: IFTRUE 13009
13007: GO 13082
13009: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13010: LD_ADDR_VAR 0 13
13014: PUSH
13015: LD_VAR 0 18
13019: PPUSH
13020: LD_INT 22
13022: PUSH
13023: LD_VAR 0 17
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: LD_INT 30
13037: PUSH
13038: LD_INT 6
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 30
13047: PUSH
13048: LD_INT 7
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 30
13057: PUSH
13058: LD_INT 8
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 72
13079: ST_TO_ADDR
13080: GO 13083
13082: POP
// if i = 1 then
13083: LD_VAR 0 9
13087: PUSH
13088: LD_INT 1
13090: EQUAL
13091: IFFALSE 13209
// begin tmp := [ ] ;
13093: LD_ADDR_VAR 0 19
13097: PUSH
13098: EMPTY
13099: ST_TO_ADDR
// for j in f do
13100: LD_ADDR_VAR 0 10
13104: PUSH
13105: LD_VAR 0 13
13109: PUSH
13110: FOR_IN
13111: IFFALSE 13191
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13113: LD_VAR 0 10
13117: PPUSH
13118: CALL_OW 266
13122: PUSH
13123: LD_INT 31
13125: PUSH
13126: LD_INT 32
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: IN
13133: IFFALSE 13160
// tmp := Insert ( tmp , 1 , j ) else
13135: LD_ADDR_VAR 0 19
13139: PUSH
13140: LD_VAR 0 19
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: LD_VAR 0 10
13152: PPUSH
13153: CALL_OW 2
13157: ST_TO_ADDR
13158: GO 13189
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13160: LD_ADDR_VAR 0 19
13164: PUSH
13165: LD_VAR 0 19
13169: PPUSH
13170: LD_VAR 0 19
13174: PUSH
13175: LD_INT 1
13177: PLUS
13178: PPUSH
13179: LD_VAR 0 10
13183: PPUSH
13184: CALL_OW 2
13188: ST_TO_ADDR
13189: GO 13110
13191: POP
13192: POP
// if tmp then
13193: LD_VAR 0 19
13197: IFFALSE 13209
// f := tmp ;
13199: LD_ADDR_VAR 0 13
13203: PUSH
13204: LD_VAR 0 19
13208: ST_TO_ADDR
// end ; x := personel [ i ] ;
13209: LD_ADDR_VAR 0 14
13213: PUSH
13214: LD_VAR 0 7
13218: PUSH
13219: LD_VAR 0 9
13223: ARRAY
13224: ST_TO_ADDR
// if x = - 1 then
13225: LD_VAR 0 14
13229: PUSH
13230: LD_INT 1
13232: NEG
13233: EQUAL
13234: IFFALSE 13428
// begin for j in f do
13236: LD_ADDR_VAR 0 10
13240: PUSH
13241: LD_VAR 0 13
13245: PUSH
13246: FOR_IN
13247: IFFALSE 13424
// repeat InitHc ;
13249: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13253: LD_VAR 0 10
13257: PPUSH
13258: CALL_OW 266
13262: PUSH
13263: LD_INT 5
13265: EQUAL
13266: IFFALSE 13321
// begin if UnitsInside ( j ) < 3 then
13268: LD_VAR 0 10
13272: PPUSH
13273: CALL_OW 313
13277: PUSH
13278: LD_INT 3
13280: LESS
13281: IFFALSE 13302
// PrepareHuman ( false , i , skill ) else
13283: LD_INT 0
13285: PPUSH
13286: LD_VAR 0 9
13290: PPUSH
13291: LD_VAR 0 4
13295: PPUSH
13296: CALL_OW 380
13300: GO 13319
// PrepareHuman ( false , i , skill ) ;
13302: LD_INT 0
13304: PPUSH
13305: LD_VAR 0 9
13309: PPUSH
13310: LD_VAR 0 4
13314: PPUSH
13315: CALL_OW 380
// end else
13319: GO 13338
// PrepareHuman ( false , i , skill ) ;
13321: LD_INT 0
13323: PPUSH
13324: LD_VAR 0 9
13328: PPUSH
13329: LD_VAR 0 4
13333: PPUSH
13334: CALL_OW 380
// un := CreateHuman ;
13338: LD_ADDR_VAR 0 15
13342: PUSH
13343: CALL_OW 44
13347: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13348: LD_ADDR_VAR 0 8
13352: PUSH
13353: LD_VAR 0 8
13357: PPUSH
13358: LD_INT 1
13360: PPUSH
13361: LD_VAR 0 15
13365: PPUSH
13366: CALL_OW 2
13370: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13371: LD_VAR 0 15
13375: PPUSH
13376: LD_VAR 0 10
13380: PPUSH
13381: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13385: LD_VAR 0 10
13389: PPUSH
13390: CALL_OW 313
13394: PUSH
13395: LD_INT 6
13397: EQUAL
13398: PUSH
13399: LD_VAR 0 10
13403: PPUSH
13404: CALL_OW 266
13408: PUSH
13409: LD_INT 32
13411: PUSH
13412: LD_INT 31
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: IN
13419: OR
13420: IFFALSE 13249
13422: GO 13246
13424: POP
13425: POP
// end else
13426: GO 13831
// for j = 1 to x do
13428: LD_ADDR_VAR 0 10
13432: PUSH
13433: DOUBLE
13434: LD_INT 1
13436: DEC
13437: ST_TO_ADDR
13438: LD_VAR 0 14
13442: PUSH
13443: FOR_TO
13444: IFFALSE 13829
// begin InitHc ;
13446: CALL_OW 19
// if not f then
13450: LD_VAR 0 13
13454: NOT
13455: IFFALSE 13544
// begin PrepareHuman ( false , i , skill ) ;
13457: LD_INT 0
13459: PPUSH
13460: LD_VAR 0 9
13464: PPUSH
13465: LD_VAR 0 4
13469: PPUSH
13470: CALL_OW 380
// un := CreateHuman ;
13474: LD_ADDR_VAR 0 15
13478: PUSH
13479: CALL_OW 44
13483: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13484: LD_ADDR_VAR 0 8
13488: PUSH
13489: LD_VAR 0 8
13493: PPUSH
13494: LD_INT 1
13496: PPUSH
13497: LD_VAR 0 15
13501: PPUSH
13502: CALL_OW 2
13506: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13507: LD_VAR 0 15
13511: PPUSH
13512: LD_VAR 0 1
13516: PPUSH
13517: CALL_OW 250
13521: PPUSH
13522: LD_VAR 0 1
13526: PPUSH
13527: CALL_OW 251
13531: PPUSH
13532: LD_INT 10
13534: PPUSH
13535: LD_INT 0
13537: PPUSH
13538: CALL_OW 50
// continue ;
13542: GO 13443
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 3 and GetBType ( f [ 1 ] ) = b_control_tower ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13544: LD_VAR 0 13
13548: PUSH
13549: LD_INT 1
13551: ARRAY
13552: PPUSH
13553: CALL_OW 313
13557: PUSH
13558: LD_VAR 0 13
13562: PUSH
13563: LD_INT 1
13565: ARRAY
13566: PPUSH
13567: CALL_OW 266
13571: PUSH
13572: LD_INT 32
13574: PUSH
13575: LD_INT 31
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: IN
13582: AND
13583: PUSH
13584: LD_VAR 0 13
13588: PUSH
13589: LD_INT 1
13591: ARRAY
13592: PPUSH
13593: CALL_OW 313
13597: PUSH
13598: LD_INT 3
13600: EQUAL
13601: PUSH
13602: LD_VAR 0 13
13606: PUSH
13607: LD_INT 1
13609: ARRAY
13610: PPUSH
13611: CALL_OW 266
13615: PUSH
13616: LD_INT 36
13618: EQUAL
13619: AND
13620: OR
13621: PUSH
13622: LD_VAR 0 13
13626: PUSH
13627: LD_INT 1
13629: ARRAY
13630: PPUSH
13631: CALL_OW 313
13635: PUSH
13636: LD_INT 6
13638: EQUAL
13639: OR
13640: IFFALSE 13660
// f := Delete ( f , 1 ) ;
13642: LD_ADDR_VAR 0 13
13646: PUSH
13647: LD_VAR 0 13
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: CALL_OW 3
13659: ST_TO_ADDR
// if not f then
13660: LD_VAR 0 13
13664: NOT
13665: IFFALSE 13683
// begin x := x + 2 ;
13667: LD_ADDR_VAR 0 14
13671: PUSH
13672: LD_VAR 0 14
13676: PUSH
13677: LD_INT 2
13679: PLUS
13680: ST_TO_ADDR
// continue ;
13681: GO 13443
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13683: LD_VAR 0 13
13687: PUSH
13688: LD_INT 1
13690: ARRAY
13691: PPUSH
13692: CALL_OW 266
13696: PUSH
13697: LD_INT 5
13699: EQUAL
13700: IFFALSE 13759
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13702: LD_VAR 0 13
13706: PUSH
13707: LD_INT 1
13709: ARRAY
13710: PPUSH
13711: CALL_OW 313
13715: PUSH
13716: LD_INT 3
13718: LESS
13719: IFFALSE 13740
// PrepareHuman ( false , i , skill ) else
13721: LD_INT 0
13723: PPUSH
13724: LD_VAR 0 9
13728: PPUSH
13729: LD_VAR 0 4
13733: PPUSH
13734: CALL_OW 380
13738: GO 13757
// PrepareHuman ( false , i , skill ) ;
13740: LD_INT 0
13742: PPUSH
13743: LD_VAR 0 9
13747: PPUSH
13748: LD_VAR 0 4
13752: PPUSH
13753: CALL_OW 380
// end else
13757: GO 13776
// PrepareHuman ( false , i , skill ) ;
13759: LD_INT 0
13761: PPUSH
13762: LD_VAR 0 9
13766: PPUSH
13767: LD_VAR 0 4
13771: PPUSH
13772: CALL_OW 380
// un := CreateHuman ;
13776: LD_ADDR_VAR 0 15
13780: PUSH
13781: CALL_OW 44
13785: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13786: LD_ADDR_VAR 0 8
13790: PUSH
13791: LD_VAR 0 8
13795: PPUSH
13796: LD_INT 1
13798: PPUSH
13799: LD_VAR 0 15
13803: PPUSH
13804: CALL_OW 2
13808: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13809: LD_VAR 0 15
13813: PPUSH
13814: LD_VAR 0 13
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: CALL_OW 52
// end ;
13827: GO 13443
13829: POP
13830: POP
// end ;
13831: GO 12731
13833: POP
13834: POP
// result := result ^ buildings ;
13835: LD_ADDR_VAR 0 8
13839: PUSH
13840: LD_VAR 0 8
13844: PUSH
13845: LD_VAR 0 18
13849: ADD
13850: ST_TO_ADDR
// end else
13851: GO 13994
// begin for i = 1 to personel do
13853: LD_ADDR_VAR 0 9
13857: PUSH
13858: DOUBLE
13859: LD_INT 1
13861: DEC
13862: ST_TO_ADDR
13863: LD_VAR 0 7
13867: PUSH
13868: FOR_TO
13869: IFFALSE 13992
// begin if i > 4 then
13871: LD_VAR 0 9
13875: PUSH
13876: LD_INT 4
13878: GREATER
13879: IFFALSE 13883
// break ;
13881: GO 13992
// x := personel [ i ] ;
13883: LD_ADDR_VAR 0 14
13887: PUSH
13888: LD_VAR 0 7
13892: PUSH
13893: LD_VAR 0 9
13897: ARRAY
13898: ST_TO_ADDR
// if x = - 1 then
13899: LD_VAR 0 14
13903: PUSH
13904: LD_INT 1
13906: NEG
13907: EQUAL
13908: IFFALSE 13912
// continue ;
13910: GO 13868
// PrepareHuman ( false , i , skill ) ;
13912: LD_INT 0
13914: PPUSH
13915: LD_VAR 0 9
13919: PPUSH
13920: LD_VAR 0 4
13924: PPUSH
13925: CALL_OW 380
// un := CreateHuman ;
13929: LD_ADDR_VAR 0 15
13933: PUSH
13934: CALL_OW 44
13938: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13939: LD_VAR 0 15
13943: PPUSH
13944: LD_VAR 0 1
13948: PPUSH
13949: CALL_OW 250
13953: PPUSH
13954: LD_VAR 0 1
13958: PPUSH
13959: CALL_OW 251
13963: PPUSH
13964: LD_INT 10
13966: PPUSH
13967: LD_INT 0
13969: PPUSH
13970: CALL_OW 50
// result := result ^ un ;
13974: LD_ADDR_VAR 0 8
13978: PUSH
13979: LD_VAR 0 8
13983: PUSH
13984: LD_VAR 0 15
13988: ADD
13989: ST_TO_ADDR
// end ;
13990: GO 13868
13992: POP
13993: POP
// end ; end ;
13994: LD_VAR 0 8
13998: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
13999: LD_INT 0
14001: PPUSH
14002: PPUSH
14003: PPUSH
14004: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14005: LD_ADDR_VAR 0 6
14009: PUSH
14010: LD_INT 34
14012: PUSH
14013: LD_INT 71
14015: PUSH
14016: LD_INT 70
14018: PUSH
14019: LD_INT 69
14021: PUSH
14022: LD_INT 39
14024: PUSH
14025: LD_INT 31
14027: PUSH
14028: LD_INT 14
14030: PUSH
14031: LD_INT 10
14033: PUSH
14034: LD_INT 40
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: ST_TO_ADDR
// resultWeapons = [ ] ;
14048: LD_ADDR_VAR 0 5
14052: PUSH
14053: EMPTY
14054: ST_TO_ADDR
// for i := 1 to weaponTechs do
14055: LD_ADDR_VAR 0 4
14059: PUSH
14060: DOUBLE
14061: LD_INT 1
14063: DEC
14064: ST_TO_ADDR
14065: LD_VAR 0 6
14069: PUSH
14070: FOR_TO
14071: IFFALSE 14258
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14073: LD_VAR 0 6
14077: PUSH
14078: LD_VAR 0 4
14082: ARRAY
14083: PPUSH
14084: LD_VAR 0 2
14088: PPUSH
14089: CALL_OW 482
14093: PUSH
14094: LD_VAR 0 6
14098: PUSH
14099: LD_VAR 0 4
14103: ARRAY
14104: PPUSH
14105: LD_VAR 0 1
14109: PPUSH
14110: CALL_OW 321
14114: PUSH
14115: LD_INT 2
14117: EQUAL
14118: AND
14119: IFFALSE 14256
// case nation of nation_american :
14121: LD_VAR 0 2
14125: PUSH
14126: LD_INT 1
14128: DOUBLE
14129: EQUAL
14130: IFTRUE 14134
14132: GO 14169
14134: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14135: LD_ADDR_VAR 0 5
14139: PUSH
14140: LD_VAR 0 5
14144: PUSH
14145: LD_VAR 0 6
14149: PUSH
14150: LD_VAR 0 4
14154: ARRAY
14155: PPUSH
14156: LD_VAR 0 2
14160: PPUSH
14161: CALL 14275 0 2
14165: ADD
14166: ST_TO_ADDR
14167: GO 14256
14169: LD_INT 2
14171: DOUBLE
14172: EQUAL
14173: IFTRUE 14177
14175: GO 14212
14177: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14178: LD_ADDR_VAR 0 5
14182: PUSH
14183: LD_VAR 0 5
14187: PUSH
14188: LD_VAR 0 6
14192: PUSH
14193: LD_VAR 0 4
14197: ARRAY
14198: PPUSH
14199: LD_VAR 0 2
14203: PPUSH
14204: CALL 14275 0 2
14208: ADD
14209: ST_TO_ADDR
14210: GO 14256
14212: LD_INT 3
14214: DOUBLE
14215: EQUAL
14216: IFTRUE 14220
14218: GO 14255
14220: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
14221: LD_ADDR_VAR 0 5
14225: PUSH
14226: LD_VAR 0 5
14230: PUSH
14231: LD_VAR 0 6
14235: PUSH
14236: LD_VAR 0 4
14240: ARRAY
14241: PPUSH
14242: LD_VAR 0 2
14246: PPUSH
14247: CALL 14275 0 2
14251: ADD
14252: ST_TO_ADDR
14253: GO 14256
14255: POP
// end ;
14256: GO 14070
14258: POP
14259: POP
// result = resultWeapons ;
14260: LD_ADDR_VAR 0 3
14264: PUSH
14265: LD_VAR 0 5
14269: ST_TO_ADDR
// end ;
14270: LD_VAR 0 3
14274: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
14275: LD_INT 0
14277: PPUSH
// case tech of tech_AdvMet :
14278: LD_VAR 0 1
14282: PUSH
14283: LD_INT 34
14285: DOUBLE
14286: EQUAL
14287: IFTRUE 14291
14289: GO 14319
14291: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
14292: LD_ADDR_VAR 0 3
14296: PUSH
14297: LD_INT 6
14299: PUSH
14300: LD_STRING 
14302: PUSH
14303: LD_INT 46
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: PUSH
14311: LD_VAR 0 2
14315: ARRAY
14316: ST_TO_ADDR
14317: GO 14608
14319: LD_INT 71
14321: DOUBLE
14322: EQUAL
14323: IFTRUE 14327
14325: GO 14355
14327: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
14328: LD_ADDR_VAR 0 3
14332: PUSH
14333: LD_STRING 
14335: PUSH
14336: LD_STRING 
14338: PUSH
14339: LD_INT 47
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: LD_VAR 0 2
14351: ARRAY
14352: ST_TO_ADDR
14353: GO 14608
14355: LD_INT 70
14357: DOUBLE
14358: EQUAL
14359: IFTRUE 14363
14361: GO 14391
14363: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
14364: LD_ADDR_VAR 0 3
14368: PUSH
14369: LD_STRING 
14371: PUSH
14372: LD_INT 26
14374: PUSH
14375: LD_STRING 
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: PUSH
14383: LD_VAR 0 2
14387: ARRAY
14388: ST_TO_ADDR
14389: GO 14608
14391: LD_INT 69
14393: DOUBLE
14394: EQUAL
14395: IFTRUE 14399
14397: GO 14427
14399: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
14400: LD_ADDR_VAR 0 3
14404: PUSH
14405: LD_INT 4
14407: PUSH
14408: LD_INT 25
14410: PUSH
14411: LD_INT 43
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: PUSH
14419: LD_VAR 0 2
14423: ARRAY
14424: ST_TO_ADDR
14425: GO 14608
14427: LD_INT 39
14429: DOUBLE
14430: EQUAL
14431: IFTRUE 14435
14433: GO 14463
14435: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
14436: LD_ADDR_VAR 0 3
14440: PUSH
14441: LD_INT 5
14443: PUSH
14444: LD_INT 27
14446: PUSH
14447: LD_INT 44
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: PUSH
14455: LD_VAR 0 2
14459: ARRAY
14460: ST_TO_ADDR
14461: GO 14608
14463: LD_INT 31
14465: DOUBLE
14466: EQUAL
14467: IFTRUE 14471
14469: GO 14499
14471: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
14472: LD_ADDR_VAR 0 3
14476: PUSH
14477: LD_STRING 
14479: PUSH
14480: LD_STRING 
14482: PUSH
14483: LD_INT 49
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: LIST
14490: PUSH
14491: LD_VAR 0 2
14495: ARRAY
14496: ST_TO_ADDR
14497: GO 14608
14499: LD_INT 14
14501: DOUBLE
14502: EQUAL
14503: IFTRUE 14507
14505: GO 14535
14507: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
14508: LD_ADDR_VAR 0 3
14512: PUSH
14513: LD_INT 10
14515: PUSH
14516: LD_STRING 
14518: PUSH
14519: LD_STRING 
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: LIST
14526: PUSH
14527: LD_VAR 0 2
14531: ARRAY
14532: ST_TO_ADDR
14533: GO 14608
14535: LD_INT 10
14537: DOUBLE
14538: EQUAL
14539: IFTRUE 14543
14541: GO 14571
14543: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
14544: LD_ADDR_VAR 0 3
14548: PUSH
14549: LD_INT 9
14551: PUSH
14552: LD_STRING 
14554: PUSH
14555: LD_STRING 
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_VAR 0 2
14567: ARRAY
14568: ST_TO_ADDR
14569: GO 14608
14571: LD_INT 40
14573: DOUBLE
14574: EQUAL
14575: IFTRUE 14579
14577: GO 14607
14579: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
14580: LD_ADDR_VAR 0 3
14584: PUSH
14585: LD_INT 7
14587: PUSH
14588: LD_INT 28
14590: PUSH
14591: LD_INT 45
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: PUSH
14599: LD_VAR 0 2
14603: ARRAY
14604: ST_TO_ADDR
14605: GO 14608
14607: POP
// end ;
14608: LD_VAR 0 3
14612: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
14613: LD_INT 0
14615: PPUSH
14616: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
14617: LD_ADDR_VAR 0 2
14621: PUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: LD_INT 1
14629: PPUSH
14630: CALL_OW 289
14634: PUSH
14635: LD_VAR 0 1
14639: PPUSH
14640: LD_INT 2
14642: PPUSH
14643: CALL_OW 289
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: LD_INT 3
14655: PPUSH
14656: CALL_OW 289
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: ST_TO_ADDR
// end ;
14666: LD_VAR 0 2
14670: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
14671: LD_INT 0
14673: PPUSH
14674: PPUSH
// area = ListEnvironmentArea ( area ) ;
14675: LD_ADDR_VAR 0 2
14679: PUSH
14680: LD_VAR 0 2
14684: PPUSH
14685: CALL_OW 353
14689: ST_TO_ADDR
// if bulldozer > 0 then
14690: LD_VAR 0 1
14694: PUSH
14695: LD_INT 0
14697: GREATER
14698: IFFALSE 14809
// for i = area downto 1 do
14700: LD_ADDR_VAR 0 4
14704: PUSH
14705: DOUBLE
14706: LD_VAR 0 2
14710: INC
14711: ST_TO_ADDR
14712: LD_INT 1
14714: PUSH
14715: FOR_DOWNTO
14716: IFFALSE 14807
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
14718: LD_VAR 0 2
14722: PUSH
14723: LD_VAR 0 4
14727: ARRAY
14728: PUSH
14729: LD_INT 1
14731: ARRAY
14732: PPUSH
14733: LD_VAR 0 2
14737: PUSH
14738: LD_VAR 0 4
14742: ARRAY
14743: PUSH
14744: LD_INT 2
14746: ARRAY
14747: PPUSH
14748: CALL_OW 351
14752: IFFALSE 14805
// if not HasTask ( bulldozer ) then
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 314
14763: NOT
14764: IFFALSE 14805
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
14766: LD_VAR 0 1
14770: PPUSH
14771: LD_VAR 0 2
14775: PUSH
14776: LD_VAR 0 4
14780: ARRAY
14781: PUSH
14782: LD_INT 1
14784: ARRAY
14785: PPUSH
14786: LD_VAR 0 2
14790: PUSH
14791: LD_VAR 0 4
14795: ARRAY
14796: PUSH
14797: LD_INT 2
14799: ARRAY
14800: PPUSH
14801: CALL_OW 171
14805: GO 14715
14807: POP
14808: POP
// end ;
14809: LD_VAR 0 3
14813: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
14814: LD_INT 0
14816: PPUSH
14817: PPUSH
14818: PPUSH
// uc_side := GetSide ( b ) ;
14819: LD_ADDR_OWVAR 20
14823: PUSH
14824: LD_VAR 0 2
14828: PPUSH
14829: CALL_OW 255
14833: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
14834: LD_ADDR_OWVAR 21
14838: PUSH
14839: LD_VAR 0 2
14843: PPUSH
14844: CALL_OW 248
14848: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
14849: LD_INT 0
14851: PPUSH
14852: LD_INT 1
14854: PPUSH
14855: LD_VAR 0 1
14859: PPUSH
14860: CALL_OW 380
// un = CreateHuman ;
14864: LD_ADDR_VAR 0 4
14868: PUSH
14869: CALL_OW 44
14873: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
14874: LD_ADDR_VAR 0 5
14878: PUSH
14879: LD_VAR 0 2
14883: PPUSH
14884: CALL_OW 254
14888: PUSH
14889: LD_INT 3
14891: MINUS
14892: ST_TO_ADDR
// if dir < 0 then
14893: LD_VAR 0 5
14897: PUSH
14898: LD_INT 0
14900: LESS
14901: IFFALSE 14917
// dir := 6 + dir ;
14903: LD_ADDR_VAR 0 5
14907: PUSH
14908: LD_INT 6
14910: PUSH
14911: LD_VAR 0 5
14915: PLUS
14916: ST_TO_ADDR
// SetDir ( un , dir ) ;
14917: LD_VAR 0 4
14921: PPUSH
14922: LD_VAR 0 5
14926: PPUSH
14927: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
14931: LD_VAR 0 4
14935: PPUSH
14936: LD_VAR 0 2
14940: PPUSH
14941: CALL_OW 52
// result = un ;
14945: LD_ADDR_VAR 0 3
14949: PUSH
14950: LD_VAR 0 4
14954: ST_TO_ADDR
// end ;
14955: LD_VAR 0 3
14959: RET
// export function SelectCharacters ; var i , charsToChoose , selectedPeople , others , max , test1 , test2 ; begin
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
14967: PPUSH
14968: PPUSH
14969: PPUSH
// charsToChoose = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Vsevolod ] ;
14970: LD_ADDR_VAR 0 3
14974: PUSH
14975: LD_INT 22
14977: PUSH
14978: LD_INT 3
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 21
14987: PUSH
14988: LD_INT 1
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 3
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 69
15014: PUSH
15015: LD_EXP 39
15019: PUSH
15020: LD_EXP 51
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: DIFF
15029: ST_TO_ADDR
// charsToChoose = charsToChoose diff vsevolodTeam ;
15030: LD_ADDR_VAR 0 3
15034: PUSH
15035: LD_VAR 0 3
15039: PUSH
15040: LD_EXP 52
15044: DIFF
15045: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam diff Vsevolod ;
15046: LD_ADDR_EXP 52
15050: PUSH
15051: LD_EXP 52
15055: PUSH
15056: LD_EXP 51
15060: DIFF
15061: ST_TO_ADDR
// max = charsToChoose div 2 + charsToChoose mod 2 ;
15062: LD_ADDR_VAR 0 6
15066: PUSH
15067: LD_VAR 0 3
15071: PUSH
15072: LD_INT 2
15074: DIV
15075: PUSH
15076: LD_VAR 0 3
15080: PUSH
15081: LD_INT 2
15083: MOD
15084: PLUS
15085: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 0 , 3 , [ Burlak , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_not_hired ] ^ vsevolodTeam ^ [ sel_not_changeable , Vsevolod ] , [ class_soldier , class_mechanic , class_engineer , class_scientistic ] ) ;
15086: LD_ADDR_VAR 0 4
15090: PUSH
15091: LD_STRING text
15093: PPUSH
15094: LD_INT 0
15096: PPUSH
15097: LD_INT 3
15099: PPUSH
15100: LD_EXP 39
15104: PUSH
15105: LD_INT -3
15107: PUSH
15108: LD_INT -5
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: PUSH
15116: LD_VAR 0 3
15120: ADD
15121: PUSH
15122: LD_INT -2
15124: PUSH
15125: EMPTY
15126: LIST
15127: ADD
15128: PUSH
15129: LD_EXP 52
15133: ADD
15134: PUSH
15135: LD_INT -4
15137: PUSH
15138: LD_EXP 51
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: ADD
15147: PPUSH
15148: LD_INT 1
15150: PUSH
15151: LD_INT 3
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 4
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: PPUSH
15166: CALL_OW 42
15170: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) , 6 ) ;
15171: LD_INT 22
15173: PUSH
15174: LD_INT 3
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 21
15183: PUSH
15184: LD_INT 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 23
15193: PUSH
15194: LD_INT 3
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: LIST
15205: PPUSH
15206: CALL_OW 69
15210: PPUSH
15211: LD_INT 6
15213: PPUSH
15214: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
15218: LD_VAR 0 4
15222: PPUSH
15223: LD_INT 3
15225: PPUSH
15226: CALL_OW 235
// SetSide ( Burlak , 3 ) ;
15230: LD_EXP 39
15234: PPUSH
15235: LD_INT 3
15237: PPUSH
15238: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
15242: LD_ADDR_VAR 0 2
15246: PUSH
15247: LD_INT 22
15249: PUSH
15250: LD_INT 6
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 21
15259: PUSH
15260: LD_INT 1
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PPUSH
15271: CALL_OW 69
15275: PUSH
15276: FOR_IN
15277: IFFALSE 15310
// if IsInUnit ( i ) then
15279: LD_VAR 0 2
15283: PPUSH
15284: CALL_OW 310
15288: IFFALSE 15308
// begin ComExitVehicle ( i ) ;
15290: LD_VAR 0 2
15294: PPUSH
15295: CALL_OW 121
// ComExitBuilding ( i ) ;
15299: LD_VAR 0 2
15303: PPUSH
15304: CALL_OW 122
// end ;
15308: GO 15276
15310: POP
15311: POP
// if not Vsevolod in selectedPeople then
15312: LD_EXP 51
15316: PUSH
15317: LD_VAR 0 4
15321: IN
15322: NOT
15323: IFFALSE 15340
// ExtSaveCharacter ( Vsevolod , Vsevolod , 6 ) ;
15325: LD_EXP 51
15329: PPUSH
15330: LD_STRING Vsevolod
15332: PPUSH
15333: LD_INT 6
15335: PPUSH
15336: CALL 11490 0 3
// if not Karamazov in selectedPeople then
15340: LD_EXP 40
15344: PUSH
15345: LD_VAR 0 4
15349: IN
15350: NOT
15351: IFFALSE 15368
// ExtSaveCharacter ( Karamazov , VSKaramazov , 6 ) ;
15353: LD_EXP 40
15357: PPUSH
15358: LD_STRING VSKaramazov
15360: PPUSH
15361: LD_INT 6
15363: PPUSH
15364: CALL 11490 0 3
// if not Petrovova in selectedPeople then
15368: LD_EXP 41
15372: PUSH
15373: LD_VAR 0 4
15377: IN
15378: NOT
15379: IFFALSE 15396
// ExtSaveCharacter ( Petrovova , VSPetrovova , 6 ) ;
15381: LD_EXP 41
15385: PPUSH
15386: LD_STRING VSPetrovova
15388: PPUSH
15389: LD_INT 6
15391: PPUSH
15392: CALL 11490 0 3
// if not Gleb in selectedPeople then
15396: LD_EXP 42
15400: PUSH
15401: LD_VAR 0 4
15405: IN
15406: NOT
15407: IFFALSE 15424
// ExtSaveCharacter ( Gleb , VSGleb , 6 ) ;
15409: LD_EXP 42
15413: PPUSH
15414: LD_STRING VSGleb
15416: PPUSH
15417: LD_INT 6
15419: PPUSH
15420: CALL 11490 0 3
// if not Petrosyan in selectedPeople then
15424: LD_EXP 43
15428: PUSH
15429: LD_VAR 0 4
15433: IN
15434: NOT
15435: IFFALSE 15452
// ExtSaveCharacter ( Petrosyan , VSPetrosyan , 6 ) ;
15437: LD_EXP 43
15441: PPUSH
15442: LD_STRING VSPetrosyan
15444: PPUSH
15445: LD_INT 6
15447: PPUSH
15448: CALL 11490 0 3
// if not Titov in selectedPeople then
15452: LD_EXP 44
15456: PUSH
15457: LD_VAR 0 4
15461: IN
15462: NOT
15463: IFFALSE 15480
// ExtSaveCharacter ( Titov , VSTitov , 6 ) ;
15465: LD_EXP 44
15469: PPUSH
15470: LD_STRING VSTitov
15472: PPUSH
15473: LD_INT 6
15475: PPUSH
15476: CALL 11490 0 3
// if not Dolgov in selectedPeople then
15480: LD_EXP 45
15484: PUSH
15485: LD_VAR 0 4
15489: IN
15490: NOT
15491: IFFALSE 15508
// ExtSaveCharacter ( Dolgov , VSDolgov , 6 ) ;
15493: LD_EXP 45
15497: PPUSH
15498: LD_STRING VSDolgov
15500: PPUSH
15501: LD_INT 6
15503: PPUSH
15504: CALL 11490 0 3
// if not Lipshchin in selectedPeople then
15508: LD_EXP 46
15512: PUSH
15513: LD_VAR 0 4
15517: IN
15518: NOT
15519: IFFALSE 15536
// ExtSaveCharacter ( Lipshchin , VSLipshchin , 6 ) ;
15521: LD_EXP 46
15525: PPUSH
15526: LD_STRING VSLipshchin
15528: PPUSH
15529: LD_INT 6
15531: PPUSH
15532: CALL 11490 0 3
// others = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod ] ;
15536: LD_ADDR_VAR 0 5
15540: PUSH
15541: LD_INT 22
15543: PUSH
15544: LD_INT 6
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 21
15553: PUSH
15554: LD_INT 1
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 23
15563: PUSH
15564: LD_INT 3
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: PPUSH
15576: CALL_OW 69
15580: PUSH
15581: LD_EXP 40
15585: PUSH
15586: LD_EXP 41
15590: PUSH
15591: LD_EXP 42
15595: PUSH
15596: LD_EXP 43
15600: PUSH
15601: LD_EXP 44
15605: PUSH
15606: LD_EXP 45
15610: PUSH
15611: LD_EXP 46
15615: PUSH
15616: LD_EXP 51
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: DIFF
15631: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors_with_vsevolod , 6 ) ;
15632: LD_VAR 0 5
15636: PPUSH
15637: LD_STRING other_survivors_with_vsevolod
15639: PPUSH
15640: LD_INT 6
15642: PPUSH
15643: CALL 11546 0 3
// end ; end_of_file
15647: LD_VAR 0 1
15651: RET
// export function MissionIntro ; var i , ruEng , unit ; begin
15652: LD_INT 0
15654: PPUSH
15655: PPUSH
15656: PPUSH
15657: PPUSH
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
15658: LD_EXP 39
15662: PPUSH
15663: CALL_OW 310
15667: PPUSH
15668: CALL_OW 87
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
15672: LD_ADDR_VAR 0 4
15676: PUSH
15677: LD_INT 22
15679: PUSH
15680: LD_INT 3
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 21
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PPUSH
15701: CALL_OW 69
15705: PUSH
15706: FOR_IN
15707: IFFALSE 15771
// begin if ( i mod 2 ) = 0 then
15709: LD_VAR 0 2
15713: PUSH
15714: LD_INT 2
15716: MOD
15717: PUSH
15718: LD_INT 0
15720: EQUAL
15721: IFFALSE 15740
// ComMoveXY ( unit , 150 , 212 ) else
15723: LD_VAR 0 4
15727: PPUSH
15728: LD_INT 150
15730: PPUSH
15731: LD_INT 212
15733: PPUSH
15734: CALL_OW 111
15738: GO 15755
// ComMoveXY ( unit , 160 , 215 ) ;
15740: LD_VAR 0 4
15744: PPUSH
15745: LD_INT 160
15747: PPUSH
15748: LD_INT 215
15750: PPUSH
15751: CALL_OW 111
// i = i + 1 ;
15755: LD_ADDR_VAR 0 2
15759: PUSH
15760: LD_VAR 0 2
15764: PUSH
15765: LD_INT 1
15767: PLUS
15768: ST_TO_ADDR
// end ;
15769: GO 15706
15771: POP
15772: POP
// if IsOK ( Karamazov ) then
15773: LD_EXP 40
15777: PPUSH
15778: CALL_OW 302
15782: IFFALSE 15796
// ruEng = Karamazov else
15784: LD_ADDR_VAR 0 3
15788: PUSH
15789: LD_EXP 40
15793: ST_TO_ADDR
15794: GO 15879
// if IsOK ( Lipshchin ) then
15796: LD_EXP 46
15800: PPUSH
15801: CALL_OW 302
15805: IFFALSE 15819
// ruEng = Lipshchin else
15807: LD_ADDR_VAR 0 3
15811: PUSH
15812: LD_EXP 46
15816: ST_TO_ADDR
15817: GO 15879
// ruEng = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_class , class_engineer ] ] ) [ 1 ] ;
15819: LD_ADDR_VAR 0 3
15823: PUSH
15824: LD_INT 22
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 21
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 23
15846: PUSH
15847: LD_INT 3
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 25
15856: PUSH
15857: LD_INT 2
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: PPUSH
15870: CALL_OW 69
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: ST_TO_ADDR
// repeat ComMoveXY ( IsInUnit ( ruEng ) , 149 , 212 ) ;
15879: LD_VAR 0 3
15883: PPUSH
15884: CALL_OW 310
15888: PPUSH
15889: LD_INT 149
15891: PPUSH
15892: LD_INT 212
15894: PPUSH
15895: CALL_OW 111
// wait ( 0 0$1 ) ;
15899: LD_INT 35
15901: PPUSH
15902: CALL_OW 67
// until GetDistUnitXY ( IsInUnit ( ruEng ) , 149 , 212 ) <= 2 ;
15906: LD_VAR 0 3
15910: PPUSH
15911: CALL_OW 310
15915: PPUSH
15916: LD_INT 149
15918: PPUSH
15919: LD_INT 212
15921: PPUSH
15922: CALL_OW 297
15926: PUSH
15927: LD_INT 2
15929: LESSEQUAL
15930: IFFALSE 15879
// ComExitVehicle ( ruEng ) ;
15932: LD_VAR 0 3
15936: PPUSH
15937: CALL_OW 121
// wait ( 0 0$1 ) ;
15941: LD_INT 35
15943: PPUSH
15944: CALL_OW 67
// AddComCaptureBuilding ( ruEng , rudepot ) ;
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 74
15955: PPUSH
15956: CALL 12062 0 2
// repeat wait ( 0 0$1 ) ;
15960: LD_INT 35
15962: PPUSH
15963: CALL_OW 67
// until GetSide ( rudepot ) = 3 ;
15967: LD_INT 74
15969: PPUSH
15970: CALL_OW 255
15974: PUSH
15975: LD_INT 3
15977: EQUAL
15978: IFFALSE 15960
// ComEnterUnit ( ruEng , rudepot ) ;
15980: LD_VAR 0 3
15984: PPUSH
15985: LD_INT 74
15987: PPUSH
15988: CALL_OW 120
// wait ( 0 0$2 ) ;
15992: LD_INT 70
15994: PPUSH
15995: CALL_OW 67
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
15999: LD_INT 22
16001: PUSH
16002: LD_INT 6
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 69
16013: PPUSH
16014: LD_INT 3
16016: PPUSH
16017: CALL_OW 235
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16021: LD_ADDR_VAR 0 4
16025: PUSH
16026: LD_INT 22
16028: PUSH
16029: LD_INT 3
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 21
16038: PUSH
16039: LD_INT 1
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PPUSH
16050: CALL_OW 69
16054: PUSH
16055: FOR_IN
16056: IFFALSE 16089
// if GetType ( IsInUnit ( unit ) ) = unit_vehicle then
16058: LD_VAR 0 4
16062: PPUSH
16063: CALL_OW 310
16067: PPUSH
16068: CALL_OW 247
16072: PUSH
16073: LD_INT 2
16075: EQUAL
16076: IFFALSE 16087
// ComExitVehicle ( unit ) ;
16078: LD_VAR 0 4
16082: PPUSH
16083: CALL_OW 121
16087: GO 16055
16089: POP
16090: POP
// if ruEng = Karamazov then
16091: LD_VAR 0 3
16095: PUSH
16096: LD_EXP 40
16100: EQUAL
16101: IFFALSE 16117
// Say ( Karamazov , DStart-Kar-1 ) else
16103: LD_EXP 40
16107: PPUSH
16108: LD_STRING DStart-Kar-1
16110: PPUSH
16111: CALL_OW 88
16115: GO 16141
// if ruEng = Lipshchin then
16117: LD_VAR 0 3
16121: PUSH
16122: LD_EXP 46
16126: EQUAL
16127: IFFALSE 16141
// Say ( Lipshchin , DStart-Lip-1 ) ;
16129: LD_EXP 46
16133: PPUSH
16134: LD_STRING DStart-Lip-1
16136: PPUSH
16137: CALL_OW 88
// ComExitBuilding ( ruEng ) ;
16141: LD_VAR 0 3
16145: PPUSH
16146: CALL_OW 122
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 250 ] ] ] ) do
16150: LD_ADDR_VAR 0 4
16154: PUSH
16155: LD_INT 22
16157: PUSH
16158: LD_INT 3
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 21
16167: PUSH
16168: LD_INT 3
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 3
16177: PUSH
16178: LD_INT 24
16180: PUSH
16181: LD_INT 250
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: PPUSH
16197: CALL_OW 69
16201: PUSH
16202: FOR_IN
16203: IFFALSE 16256
// AddComRepairBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , unit ) ;
16205: LD_INT 22
16207: PUSH
16208: LD_INT 3
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 21
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 25
16227: PUSH
16228: LD_INT 2
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: LIST
16239: PPUSH
16240: CALL_OW 69
16244: PPUSH
16245: LD_VAR 0 4
16249: PPUSH
16250: CALL_OW 190
16254: GO 16202
16256: POP
16257: POP
// Say ( Burlak , DStart-Bur-1 ) ;
16258: LD_EXP 39
16262: PPUSH
16263: LD_STRING DStart-Bur-1
16265: PPUSH
16266: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
16270: LD_EXP 47
16274: PPUSH
16275: LD_STRING DStart-Pla-1
16277: PPUSH
16278: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
16282: LD_EXP 39
16286: PPUSH
16287: LD_STRING DStart-Bur-2
16289: PPUSH
16290: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
16294: LD_EXP 47
16298: PPUSH
16299: LD_STRING DStart-Pla-2
16301: PPUSH
16302: CALL_OW 94
// if IsOK ( Petrovova ) then
16306: LD_EXP 41
16310: PPUSH
16311: CALL_OW 302
16315: IFFALSE 16329
// Say ( Petrovova , DStart-Ptr-2 ) ;
16317: LD_EXP 41
16321: PPUSH
16322: LD_STRING DStart-Ptr-2
16324: PPUSH
16325: CALL_OW 88
// InGameOff ;
16329: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
16333: LD_STRING MStart
16335: PPUSH
16336: CALL_OW 337
// SaveForQuickRestart ;
16340: CALL_OW 22
// wait ( 0 0$10 ) ;
16344: LD_INT 350
16346: PPUSH
16347: CALL_OW 67
// if IsOK ( Petrosyan ) then
16351: LD_EXP 43
16355: PPUSH
16356: CALL_OW 302
16360: IFFALSE 16376
// Say ( Petrosyan , DMatPrediction-Pty-1 ) else
16362: LD_EXP 43
16366: PPUSH
16367: LD_STRING DMatPrediction-Pty-1
16369: PPUSH
16370: CALL_OW 88
16374: GO 16399
// if IsOK ( Dolgov ) then
16376: LD_EXP 45
16380: PPUSH
16381: CALL_OW 302
16385: IFFALSE 16399
// Say ( Dolgov , DMatPrediction-Dol-1 ) ;
16387: LD_EXP 45
16391: PPUSH
16392: LD_STRING DMatPrediction-Dol-1
16394: PPUSH
16395: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16399: LD_EXP 43
16403: PPUSH
16404: CALL_OW 302
16408: PUSH
16409: LD_EXP 45
16413: PPUSH
16414: CALL_OW 302
16418: OR
16419: IFFALSE 16433
// Say ( Burlak , DMatPrediction-Bur-1 ) ;
16421: LD_EXP 39
16425: PPUSH
16426: LD_STRING DMatPrediction-Bur-1
16428: PPUSH
16429: CALL_OW 88
// if IsOK ( Petrosyan ) then
16433: LD_EXP 43
16437: PPUSH
16438: CALL_OW 302
16442: IFFALSE 16458
// Say ( Petrosyan , DMatPrediction-Pty-2 ) else
16444: LD_EXP 43
16448: PPUSH
16449: LD_STRING DMatPrediction-Pty-2
16451: PPUSH
16452: CALL_OW 88
16456: GO 16481
// if IsOK ( Dolgov ) then
16458: LD_EXP 45
16462: PPUSH
16463: CALL_OW 302
16467: IFFALSE 16481
// Say ( Dolgov , DMatPrediction-Dol-2 ) ;
16469: LD_EXP 45
16473: PPUSH
16474: LD_STRING DMatPrediction-Dol-2
16476: PPUSH
16477: CALL_OW 88
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16481: LD_EXP 43
16485: PPUSH
16486: CALL_OW 302
16490: PUSH
16491: LD_EXP 45
16495: PPUSH
16496: CALL_OW 302
16500: OR
16501: IFFALSE 16515
// Say ( Burlak , DMatPrediction-Bur-2 ) ;
16503: LD_EXP 39
16507: PPUSH
16508: LD_STRING DMatPrediction-Bur-2
16510: PPUSH
16511: CALL_OW 88
// if IsOK ( Petrosyan ) then
16515: LD_EXP 43
16519: PPUSH
16520: CALL_OW 302
16524: IFFALSE 16540
// Say ( Petrosyan , DMatPrediction-Pty-3 ) else
16526: LD_EXP 43
16530: PPUSH
16531: LD_STRING DMatPrediction-Pty-3
16533: PPUSH
16534: CALL_OW 88
16538: GO 16563
// if IsOK ( Dolgov ) then
16540: LD_EXP 45
16544: PPUSH
16545: CALL_OW 302
16549: IFFALSE 16563
// Say ( Dolgov , DMatPrediction-Dol-3 ) ;
16551: LD_EXP 45
16555: PPUSH
16556: LD_STRING DMatPrediction-Dol-3
16558: PPUSH
16559: CALL_OW 88
// ChangeMissionObjectives ( MPred ) ;
16563: LD_STRING MPred
16565: PPUSH
16566: CALL_OW 337
// end ;
16570: LD_VAR 0 1
16574: RET
// every 0 0$1 trigger not UnitFilter ( ovsyenkoBase , [ f_type , unit_human ] ) do
16575: LD_EXP 56
16579: PPUSH
16580: LD_INT 21
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PPUSH
16590: CALL_OW 72
16594: NOT
16595: IFFALSE 16817
16597: GO 16599
16599: DISABLE
// begin DialogueOn ;
16600: CALL_OW 6
// Say ( Burlak , DOvsyenkoTaken-Bur-1 ) ;
16604: LD_EXP 39
16608: PPUSH
16609: LD_STRING DOvsyenkoTaken-Bur-1
16611: PPUSH
16612: CALL_OW 88
// SayRadio ( Platonov , DOvsyenkoTaken-Pla-1 ) ;
16616: LD_EXP 47
16620: PPUSH
16621: LD_STRING DOvsyenkoTaken-Pla-1
16623: PPUSH
16624: CALL_OW 94
// if IsOK ( Karamazov ) then
16628: LD_EXP 40
16632: PPUSH
16633: CALL_OW 302
16637: IFFALSE 16651
// Say ( Karamazov , DOvsyenkoTaken-Kar-1 ) ;
16639: LD_EXP 40
16643: PPUSH
16644: LD_STRING DOvsyenkoTaken-Kar-1
16646: PPUSH
16647: CALL_OW 88
// if IsOK ( Titov ) then
16651: LD_EXP 44
16655: PPUSH
16656: CALL_OW 302
16660: IFFALSE 16674
// Say ( Titov , DOvsyenkoTaken-Tit-1 ) ;
16662: LD_EXP 44
16666: PPUSH
16667: LD_STRING DOvsyenkoTaken-Tit-1
16669: PPUSH
16670: CALL_OW 88
// if IsOK ( Lipshchin ) and ( IsOK ( Karamazov ) or IsOK ( Titov ) ) then
16674: LD_EXP 46
16678: PPUSH
16679: CALL_OW 302
16683: PUSH
16684: LD_EXP 40
16688: PPUSH
16689: CALL_OW 302
16693: PUSH
16694: LD_EXP 44
16698: PPUSH
16699: CALL_OW 302
16703: OR
16704: AND
16705: IFFALSE 16742
// begin Say ( Lipshchin , DOvsyenkoTaken-Lip-1 ) ;
16707: LD_EXP 46
16711: PPUSH
16712: LD_STRING DOvsyenkoTaken-Lip-1
16714: PPUSH
16715: CALL_OW 88
// if IsOK ( Gleb ) then
16719: LD_EXP 42
16723: PPUSH
16724: CALL_OW 302
16728: IFFALSE 16742
// Say ( Gleb , DOvsyenkoTaken-Glb-1 ) ;
16730: LD_EXP 42
16734: PPUSH
16735: LD_STRING DOvsyenkoTaken-Glb-1
16737: PPUSH
16738: CALL_OW 88
// end ; DialogueOff ;
16742: CALL_OW 7
// ChangeMissionObjectives ( MOutCapture ) ;
16746: LD_STRING MOutCapture
16748: PPUSH
16749: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
16753: LD_STRING MAddMine
16755: PPUSH
16756: CALL_OW 337
// claimOvsyenkoBase = true ;
16760: LD_ADDR_EXP 15
16764: PUSH
16765: LD_INT 1
16767: ST_TO_ADDR
// wait ( 1 1$10 ) ;
16768: LD_INT 2450
16770: PPUSH
16771: CALL_OW 67
// InitAIManager ( 1 , 1 , headAmBase , HeadAmericanBaseArea , HeadAmericanHealArea , false , HeadAmericanBaseArea , 6 , 2 , 4 , true , true ) ;
16775: LD_INT 1
16777: PPUSH
16778: LD_INT 1
16780: PPUSH
16781: LD_EXP 58
16785: PPUSH
16786: LD_INT 5
16788: PPUSH
16789: LD_INT 9
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: LD_INT 5
16797: PPUSH
16798: LD_INT 6
16800: PPUSH
16801: LD_INT 2
16803: PPUSH
16804: LD_INT 4
16806: PPUSH
16807: LD_INT 1
16809: PPUSH
16810: LD_INT 1
16812: PPUSH
16813: CALL 4835 0 12
// end ;
16817: END
// export function Dial_SibTechs ; begin
16818: LD_INT 0
16820: PPUSH
// dial_SibTechsBlocker = true ;
16821: LD_ADDR_EXP 9
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// DialogueOn ;
16829: CALL_OW 6
// if IsOK ( Petrosyan ) then
16833: LD_EXP 43
16837: PPUSH
16838: CALL_OW 302
16842: IFFALSE 16858
// Say ( Petrosyan , DSibResearch-Pty-1 ) else
16844: LD_EXP 43
16848: PPUSH
16849: LD_STRING DSibResearch-Pty-1
16851: PPUSH
16852: CALL_OW 88
16856: GO 16881
// if IsOK ( Dolgov ) then
16858: LD_EXP 45
16862: PPUSH
16863: CALL_OW 302
16867: IFFALSE 16881
// Say ( Dolgov , DSibResearch-Dol-1 ) ;
16869: LD_EXP 45
16873: PPUSH
16874: LD_STRING DSibResearch-Dol-1
16876: PPUSH
16877: CALL_OW 88
// Say ( Burlak , DSibResearch-Bur-1 ) ;
16881: LD_EXP 39
16885: PPUSH
16886: LD_STRING DSibResearch-Bur-1
16888: PPUSH
16889: CALL_OW 88
// SayRadio ( Platonov , DSibResearch-Pla-1 ) ;
16893: LD_EXP 47
16897: PPUSH
16898: LD_STRING DSibResearch-Pla-1
16900: PPUSH
16901: CALL_OW 94
// DialogueOff ;
16905: CALL_OW 7
// ChangeMissionObjectives ( MResearch ) ;
16909: LD_STRING MResearch
16911: PPUSH
16912: CALL_OW 337
// SetRestrict ( b_ext_siberium , 3 , true ) ;
16916: LD_INT 21
16918: PPUSH
16919: LD_INT 3
16921: PPUSH
16922: LD_INT 1
16924: PPUSH
16925: CALL_OW 324
// SetRestrict ( b_siberite_power , 3 , true ) ;
16929: LD_INT 28
16931: PPUSH
16932: LD_INT 3
16934: PPUSH
16935: LD_INT 1
16937: PPUSH
16938: CALL_OW 324
// SetRestrict ( b_lab_siberium , 3 , true ) ;
16942: LD_INT 11
16944: PPUSH
16945: LD_INT 3
16947: PPUSH
16948: LD_INT 1
16950: PPUSH
16951: CALL_OW 324
// SetRestrict ( b_lab_spacetime , 3 , true ) ;
16955: LD_INT 14
16957: PPUSH
16958: LD_INT 3
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: CALL_OW 324
// end ;
16968: LD_VAR 0 1
16972: RET
// export function Dial_ResearchMatPredictions ; begin
16973: LD_INT 0
16975: PPUSH
// ChangeMissionObjectives ( MOutResearch ) ;
16976: LD_STRING MOutResearch
16978: PPUSH
16979: CALL_OW 337
// DialogueOn ;
16983: CALL_OW 6
// if IsOK ( Petrosyan ) or IsOK ( Dolgov ) then
16987: LD_EXP 43
16991: PPUSH
16992: CALL_OW 302
16996: PUSH
16997: LD_EXP 45
17001: PPUSH
17002: CALL_OW 302
17006: OR
17007: IFFALSE 17129
// begin if IsOK ( Petrosyan ) then
17009: LD_EXP 43
17013: PPUSH
17014: CALL_OW 302
17018: IFFALSE 17034
// Say ( Petrosyan , DNoMaterial-Pty-1 ) else
17020: LD_EXP 43
17024: PPUSH
17025: LD_STRING DNoMaterial-Pty-1
17027: PPUSH
17028: CALL_OW 88
17032: GO 17057
// if IsOK ( Dolgov ) then
17034: LD_EXP 45
17038: PPUSH
17039: CALL_OW 302
17043: IFFALSE 17057
// Say ( Dolgov , DNoMaterial-Dol-1 ) ;
17045: LD_EXP 45
17049: PPUSH
17050: LD_STRING DNoMaterial-Dol-1
17052: PPUSH
17053: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-1 ) ;
17057: LD_EXP 39
17061: PPUSH
17062: LD_STRING DNoMaterial-Bur-1
17064: PPUSH
17065: CALL_OW 88
// if IsOK ( Petrosyan ) then
17069: LD_EXP 43
17073: PPUSH
17074: CALL_OW 302
17078: IFFALSE 17094
// Say ( Petrosyan , DNoMaterial-Pty-2 ) else
17080: LD_EXP 43
17084: PPUSH
17085: LD_STRING DNoMaterial-Pty-2
17087: PPUSH
17088: CALL_OW 88
17092: GO 17117
// if IsOK ( Dolgov ) then
17094: LD_EXP 45
17098: PPUSH
17099: CALL_OW 302
17103: IFFALSE 17117
// Say ( Dolgov , DNoMaterial-Dol-2 ) ;
17105: LD_EXP 45
17109: PPUSH
17110: LD_STRING DNoMaterial-Dol-2
17112: PPUSH
17113: CALL_OW 88
// Say ( Burlak , DNoMaterial-Bur-2 ) ;
17117: LD_EXP 39
17121: PPUSH
17122: LD_STRING DNoMaterial-Bur-2
17124: PPUSH
17125: CALL_OW 88
// end ; DialogueOff ;
17129: CALL_OW 7
// end ;
17133: LD_VAR 0 1
17137: RET
// every 0 0$1 trigger not dial_SibTechsBlocker and ( GetResourceVisibility ( 116 , 123 , 3 ) or GetResourceVisibility ( 72 , 86 , 3 ) ) do
17138: LD_EXP 9
17142: NOT
17143: PUSH
17144: LD_INT 116
17146: PPUSH
17147: LD_INT 123
17149: PPUSH
17150: LD_INT 3
17152: PPUSH
17153: CALL_OW 440
17157: PUSH
17158: LD_INT 72
17160: PPUSH
17161: LD_INT 86
17163: PPUSH
17164: LD_INT 3
17166: PPUSH
17167: CALL_OW 440
17171: OR
17172: AND
17173: IFFALSE 17182
17175: GO 17177
17177: DISABLE
// Dial_SibTechs ;
17178: CALL 16818 0 0
17182: END
// every 5 5$0 trigger claimOvsyenkoBase do
17183: LD_EXP 15
17187: IFFALSE 17211
17189: GO 17191
17191: DISABLE
// begin PrepareVsevolod ;
17192: CALL 2340 0 0
// ComAgressiveMove ( vsevolodTeam , 61 , 45 ) ;
17196: LD_EXP 52
17200: PPUSH
17201: LD_INT 61
17203: PPUSH
17204: LD_INT 45
17206: PPUSH
17207: CALL_OW 114
// end ;
17211: END
// every 0 0$1 trigger immortalVsevolodTeam do var unit ;
17212: LD_EXP 18
17216: IFFALSE 17254
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
// begin enable ;
17224: ENABLE
// for unit in vsevolodTeam do
17225: LD_ADDR_VAR 0 1
17229: PUSH
17230: LD_EXP 52
17234: PUSH
17235: FOR_IN
17236: IFFALSE 17252
// SetLives ( unit , 1000 ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_INT 1000
17245: PPUSH
17246: CALL_OW 234
17250: GO 17235
17252: POP
17253: POP
// end ;
17254: PPOPN 1
17256: END
// every 0 0$1 trigger GetLives ( ter_bun1 ) <= 650 or GetLives ( ter_arm1 ) <= 650 do var belkovSavedIn02 , tmp , speaker ;
17257: LD_INT 170
17259: PPUSH
17260: CALL_OW 256
17264: PUSH
17265: LD_INT 650
17267: LESSEQUAL
17268: PUSH
17269: LD_INT 174
17271: PPUSH
17272: CALL_OW 256
17276: PUSH
17277: LD_INT 650
17279: LESSEQUAL
17280: OR
17281: IFFALSE 18414
17283: GO 17285
17285: DISABLE
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
17290: PPUSH
// begin ComMoveXY ( UnitFilter ( terminalBase , [ f_type , unit_human ] ) , 35 , 58 ) ;
17291: LD_EXP 57
17295: PPUSH
17296: LD_INT 21
17298: PUSH
17299: LD_INT 1
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PPUSH
17306: CALL_OW 72
17310: PPUSH
17311: LD_INT 35
17313: PPUSH
17314: LD_INT 58
17316: PPUSH
17317: CALL_OW 111
// SetSide ( UnitFilter ( terminalBase , [ f_type , unit_building ] ) , 6 ) ;
17321: LD_EXP 57
17325: PPUSH
17326: LD_INT 21
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PPUSH
17336: CALL_OW 72
17340: PPUSH
17341: LD_INT 6
17343: PPUSH
17344: CALL_OW 235
// immortalVsevolodTeam = false ;
17348: LD_ADDR_EXP 18
17352: PUSH
17353: LD_INT 0
17355: ST_TO_ADDR
// ComEnterUnit ( [ Vsevolod , vsevolodTeam [ 2 ] ] , ter_arm1 ) ;
17356: LD_EXP 51
17360: PUSH
17361: LD_EXP 52
17365: PUSH
17366: LD_INT 2
17368: ARRAY
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PPUSH
17374: LD_INT 174
17376: PPUSH
17377: CALL_OW 120
// ComEnterUnit ( vsevolodTeam [ 3 ] , ter_bun1 ) ;
17381: LD_EXP 52
17385: PUSH
17386: LD_INT 3
17388: ARRAY
17389: PPUSH
17390: LD_INT 170
17392: PPUSH
17393: CALL_OW 120
// wait ( 0 0$5 ) ;
17397: LD_INT 175
17399: PPUSH
17400: CALL_OW 67
// DialogueOn ;
17404: CALL_OW 6
// if IsOK ( Dolgov ) then
17408: LD_EXP 45
17412: PPUSH
17413: CALL_OW 302
17417: IFFALSE 17431
// Say ( Dolgov , DVsevolod-Dol-1 ) ;
17419: LD_EXP 45
17423: PPUSH
17424: LD_STRING DVsevolod-Dol-1
17426: PPUSH
17427: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-1 ) ;
17431: LD_EXP 51
17435: PPUSH
17436: LD_STRING DVsevolod-Vse-1
17438: PPUSH
17439: CALL_OW 94
// if IsOK ( Gleb ) then
17443: LD_EXP 42
17447: PPUSH
17448: CALL_OW 302
17452: IFFALSE 17490
// begin Say ( Burlak , DVsevolod-Bur-1 ) ;
17454: LD_EXP 39
17458: PPUSH
17459: LD_STRING DVsevolod-Bur-1
17461: PPUSH
17462: CALL_OW 88
// Say ( Gleb , DVsevolod-Glb-1 ) ;
17466: LD_EXP 42
17470: PPUSH
17471: LD_STRING DVsevolod-Glb-1
17473: PPUSH
17474: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-2 ) ;
17478: LD_EXP 51
17482: PPUSH
17483: LD_STRING DVsevolod-Vse-2
17485: PPUSH
17486: CALL_OW 94
// end ; Say ( Burlak , DVsevolod-Bur-2 ) ;
17490: LD_EXP 39
17494: PPUSH
17495: LD_STRING DVsevolod-Bur-2
17497: PPUSH
17498: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-3 ) ;
17502: LD_EXP 51
17506: PPUSH
17507: LD_STRING DVsevolod-Vse-3
17509: PPUSH
17510: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-3 ) ;
17514: LD_EXP 39
17518: PPUSH
17519: LD_STRING DVsevolod-Bur-3
17521: PPUSH
17522: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-4 ) ;
17526: LD_EXP 51
17530: PPUSH
17531: LD_STRING DVsevolod-Vse-4
17533: PPUSH
17534: CALL_OW 94
// Say ( Burlak , DVsevolod-Bur-4 ) ;
17538: LD_EXP 39
17542: PPUSH
17543: LD_STRING DVsevolod-Bur-4
17545: PPUSH
17546: CALL_OW 88
// if IsOK ( Gleb ) then
17550: LD_EXP 42
17554: PPUSH
17555: CALL_OW 302
17559: IFFALSE 17587
// begin Say ( Gleb , DVsevolod-Glb-4 ) ;
17561: LD_EXP 42
17565: PPUSH
17566: LD_STRING DVsevolod-Glb-4
17568: PPUSH
17569: CALL_OW 88
// Say ( Burlak , DVsevolod-Bur-5 ) ;
17573: LD_EXP 39
17577: PPUSH
17578: LD_STRING DVsevolod-Bur-5
17580: PPUSH
17581: CALL_OW 88
// end else
17585: GO 17661
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-RSol1-5 ,  , false , true ) ;
17587: LD_INT 22
17589: PUSH
17590: LD_INT 3
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 21
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 50
17609: PUSH
17610: EMPTY
17611: LIST
17612: PUSH
17613: LD_INT 26
17615: PUSH
17616: LD_INT 1
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 23
17625: PUSH
17626: LD_INT 3
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: PPUSH
17645: LD_STRING DVsevolod-RSol1-5
17647: PPUSH
17648: LD_STRING 
17650: PPUSH
17651: LD_INT 0
17653: PPUSH
17654: LD_INT 1
17656: PPUSH
17657: CALL 11689 0 5
// Say ( Burlak , DVsevolod-Bur-6 ) ;
17661: LD_EXP 39
17665: PPUSH
17666: LD_STRING DVsevolod-Bur-6
17668: PPUSH
17669: CALL_OW 88
// CenterOnXY ( 59 , 40 ) ;
17673: LD_INT 59
17675: PPUSH
17676: LD_INT 40
17678: PPUSH
17679: CALL_OW 84
// RevealFogArea ( 3 , TerminalBaseArea ) ;
17683: LD_INT 3
17685: PPUSH
17686: LD_INT 4
17688: PPUSH
17689: CALL_OW 332
// if IsOK ( Dolgov ) then
17693: LD_EXP 45
17697: PPUSH
17698: CALL_OW 302
17702: IFFALSE 17718
// Say ( Dolgov , DVsevolod-Dol-6 ) else
17704: LD_EXP 45
17708: PPUSH
17709: LD_STRING DVsevolod-Dol-6
17711: PPUSH
17712: CALL_OW 88
17716: GO 17792
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
17718: LD_INT 22
17720: PUSH
17721: LD_INT 3
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 50
17740: PUSH
17741: EMPTY
17742: LIST
17743: PUSH
17744: LD_INT 26
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 23
17756: PUSH
17757: LD_INT 3
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 69
17775: PPUSH
17776: LD_STRING DVsevolod-Dol-6
17778: PPUSH
17779: LD_STRING 
17781: PPUSH
17782: LD_INT 0
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL 11689 0 5
// Say ( Burlak , DVsevolod-Bur-7 ) ;
17792: LD_EXP 39
17796: PPUSH
17797: LD_STRING DVsevolod-Bur-7
17799: PPUSH
17800: CALL_OW 88
// SayRadio ( Vsevolod , DVsevolod-Vse-7 ) ;
17804: LD_EXP 51
17808: PPUSH
17809: LD_STRING DVsevolod-Vse-7
17811: PPUSH
17812: CALL_OW 94
// DialogueOff ;
17816: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
17820: LD_STRING MVsevolod
17822: PPUSH
17823: CALL_OW 337
// enableVsevolodCounter = true ;
17827: LD_ADDR_EXP 22
17831: PUSH
17832: LD_INT 1
17834: ST_TO_ADDR
// canGoNorth = true ;
17835: LD_ADDR_EXP 21
17839: PUSH
17840: LD_INT 1
17842: ST_TO_ADDR
// PrepareSoldiersInBunkers ;
17843: CALL 3566 0 0
// wait ( 0 0$7 ) ;
17847: LD_INT 245
17849: PPUSH
17850: CALL_OW 67
// belkovSavedIn02 = TestCharacters ( 02_Belkov ) ;
17854: LD_ADDR_VAR 0 1
17858: PUSH
17859: LD_STRING 02_Belkov
17861: PPUSH
17862: CALL_OW 28
17866: ST_TO_ADDR
// DialogueOn ;
17867: CALL_OW 6
// if belkovSavedIn02 then
17871: LD_VAR 0 1
17875: IFFALSE 18076
// begin if IsOK ( Gleb ) then
17877: LD_EXP 42
17881: PPUSH
17882: CALL_OW 302
17886: IFFALSE 17900
// Say ( Gleb , DHelp1-Glb-1 ) ;
17888: LD_EXP 42
17892: PPUSH
17893: LD_STRING DHelp1-Glb-1
17895: PPUSH
17896: CALL_OW 88
// if IsOK ( Dolgov ) then
17900: LD_EXP 45
17904: PPUSH
17905: CALL_OW 302
17909: IFFALSE 17923
// Say ( Dolgov , DHelp1-Dol-1 ) ;
17911: LD_EXP 45
17915: PPUSH
17916: LD_STRING DHelp1-Dol-1
17918: PPUSH
17919: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Dolgov , Titov ] ;
17923: LD_ADDR_VAR 0 2
17927: PUSH
17928: LD_INT 22
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 21
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 50
17950: PUSH
17951: EMPTY
17952: LIST
17953: PUSH
17954: LD_INT 26
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 23
17966: PUSH
17967: LD_INT 3
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: PPUSH
17981: CALL_OW 69
17985: PUSH
17986: LD_EXP 42
17990: PUSH
17991: LD_EXP 45
17995: PUSH
17996: LD_EXP 44
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: DIFF
18006: ST_TO_ADDR
// DialogRandom ( tmp , DHelp1-RSol1-1 ,  , false , true ) ;
18007: LD_VAR 0 2
18011: PPUSH
18012: LD_STRING DHelp1-RSol1-1
18014: PPUSH
18015: LD_STRING 
18017: PPUSH
18018: LD_INT 0
18020: PPUSH
18021: LD_INT 1
18023: PPUSH
18024: CALL 11689 0 5
// if IsOK ( Titov ) then
18028: LD_EXP 44
18032: PPUSH
18033: CALL_OW 302
18037: IFFALSE 18051
// Say ( Titov , DHelp1-Tit-1 ) ;
18039: LD_EXP 44
18043: PPUSH
18044: LD_STRING DHelp1-Tit-1
18046: PPUSH
18047: CALL_OW 88
// if IsOK ( Gleb ) then
18051: LD_EXP 42
18055: PPUSH
18056: CALL_OW 302
18060: IFFALSE 18074
// Say ( Gleb , DHelp1-Glb-2 ) ;
18062: LD_EXP 42
18066: PPUSH
18067: LD_STRING DHelp1-Glb-2
18069: PPUSH
18070: CALL_OW 88
// end else
18074: GO 18287
// begin if IsOK ( Titov ) then
18076: LD_EXP 44
18080: PPUSH
18081: CALL_OW 302
18085: IFFALSE 18099
// Say ( Titov , DHelp2-Tit-1 ) ;
18087: LD_EXP 44
18091: PPUSH
18092: LD_STRING DHelp2-Tit-1
18094: PPUSH
18095: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Gleb , Titov ] ;
18099: LD_ADDR_VAR 0 2
18103: PUSH
18104: LD_INT 22
18106: PUSH
18107: LD_INT 3
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 21
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 50
18126: PUSH
18127: EMPTY
18128: LIST
18129: PUSH
18130: LD_INT 26
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 23
18142: PUSH
18143: LD_INT 3
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: PPUSH
18157: CALL_OW 69
18161: PUSH
18162: LD_EXP 42
18166: PUSH
18167: LD_EXP 44
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: DIFF
18176: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DHelp2-RSol1-1 ,  , false , true ) ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 2
18186: PPUSH
18187: LD_STRING DHelp2-RSol1-1
18189: PPUSH
18190: LD_STRING 
18192: PPUSH
18193: LD_INT 0
18195: PPUSH
18196: LD_INT 1
18198: PPUSH
18199: CALL 11689 0 5
18203: ST_TO_ADDR
// if IsOK ( Gleb ) then
18204: LD_EXP 42
18208: PPUSH
18209: CALL_OW 302
18213: IFFALSE 18227
// Say ( Gleb , DHelp2-Glb-1 ) ;
18215: LD_EXP 42
18219: PPUSH
18220: LD_STRING DHelp2-Glb-1
18222: PPUSH
18223: CALL_OW 88
// tmp = tmp diff speaker ;
18227: LD_ADDR_VAR 0 2
18231: PUSH
18232: LD_VAR 0 2
18236: PUSH
18237: LD_VAR 0 3
18241: DIFF
18242: ST_TO_ADDR
// DialogRandom ( tmp , DHelp2-RSol2-1 ,  , false , true ) ;
18243: LD_VAR 0 2
18247: PPUSH
18248: LD_STRING DHelp2-RSol2-1
18250: PPUSH
18251: LD_STRING 
18253: PPUSH
18254: LD_INT 0
18256: PPUSH
18257: LD_INT 1
18259: PPUSH
18260: CALL 11689 0 5
// if IsOK ( Titov ) then
18264: LD_EXP 44
18268: PPUSH
18269: CALL_OW 302
18273: IFFALSE 18287
// Say ( Titov , DHelp2-Tit-2 ) ;
18275: LD_EXP 44
18279: PPUSH
18280: LD_STRING DHelp2-Tit-2
18282: PPUSH
18283: CALL_OW 88
// end ; Say ( Burlak , DHelp3-Bur-1 ) ;
18287: LD_EXP 39
18291: PPUSH
18292: LD_STRING DHelp3-Bur-1
18294: PPUSH
18295: CALL_OW 88
// if IsOK ( Lipshchin ) then
18299: LD_EXP 46
18303: PPUSH
18304: CALL_OW 302
18308: IFFALSE 18324
// Say ( Lipshchin , DHelp3-Lip-1 ) else
18310: LD_EXP 46
18314: PPUSH
18315: LD_STRING DHelp3-Lip-1
18317: PPUSH
18318: CALL_OW 88
18322: GO 18398
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) , DVsevolod-Dol-6 ,  , false , true ) ;
18324: LD_INT 22
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 21
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 50
18346: PUSH
18347: EMPTY
18348: LIST
18349: PUSH
18350: LD_INT 26
18352: PUSH
18353: LD_INT 1
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 23
18362: PUSH
18363: LD_INT 3
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: PPUSH
18382: LD_STRING DVsevolod-Dol-6
18384: PPUSH
18385: LD_STRING 
18387: PPUSH
18388: LD_INT 0
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL 11689 0 5
// Say ( Burlak , DHelp3-Bur-2 ) ;
18398: LD_EXP 39
18402: PPUSH
18403: LD_STRING DHelp3-Bur-2
18405: PPUSH
18406: CALL_OW 88
// DialogueOff ;
18410: CALL_OW 7
// end ;
18414: PPOPN 3
18416: END
// every 0 0$1 trigger claimOvsyenkoBase and not FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] , [ f_type , unit_vehicle ] ] ] ) and FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18417: LD_EXP 15
18421: PUSH
18422: LD_INT 3
18424: PPUSH
18425: LD_INT 22
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: LD_INT 21
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 59
18450: PUSH
18451: EMPTY
18452: LIST
18453: PUSH
18454: LD_INT 21
18456: PUSH
18457: LD_INT 2
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 70
18478: NOT
18479: AND
18480: PUSH
18481: LD_INT 3
18483: PPUSH
18484: LD_INT 22
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 21
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 21
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 70
18530: AND
18531: IFFALSE 18698
18533: GO 18535
18535: DISABLE
// begin lostAgainBase = true ;
18536: LD_ADDR_EXP 17
18540: PUSH
18541: LD_INT 1
18543: ST_TO_ADDR
// SetSide ( FilterUnitsInArea ( OvsyenkoBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) , 1 ) ;
18544: LD_INT 3
18546: PPUSH
18547: LD_INT 22
18549: PUSH
18550: LD_INT 3
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 21
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 70
18575: PPUSH
18576: LD_INT 1
18578: PPUSH
18579: CALL_OW 235
// if IsOK ( Gleb ) then
18583: LD_EXP 42
18587: PPUSH
18588: CALL_OW 302
18592: IFFALSE 18618
// begin Say ( Gleb , DOvsyenkoCaptured-Glb-1 ) ;
18594: LD_EXP 42
18598: PPUSH
18599: LD_STRING DOvsyenkoCaptured-Glb-1
18601: PPUSH
18602: CALL_OW 88
// Say ( Burlak , DOvsyenkoCaptured-Bur-1 ) ;
18606: LD_EXP 39
18610: PPUSH
18611: LD_STRING DOvsyenkoCaptured-Bur-1
18613: PPUSH
18614: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb , DOvsyenkoCaptured-RSol1-1 ,  , false , true ) ;
18618: LD_INT 22
18620: PUSH
18621: LD_INT 3
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 21
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 50
18640: PUSH
18641: EMPTY
18642: LIST
18643: PUSH
18644: LD_INT 26
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 23
18656: PUSH
18657: LD_INT 3
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_EXP 42
18680: DIFF
18681: PPUSH
18682: LD_STRING DOvsyenkoCaptured-RSol1-1
18684: PPUSH
18685: LD_STRING 
18687: PPUSH
18688: LD_INT 0
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL 11689 0 5
// end ;
18698: END
// every 0 0$1 trigger FilterUnitsInArea ( TrapArea , [ [ f_side , 3 ] , [ f_ok ] ] ) do
18699: LD_INT 12
18701: PPUSH
18702: LD_INT 22
18704: PUSH
18705: LD_INT 3
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 50
18714: PUSH
18715: EMPTY
18716: LIST
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PPUSH
18722: CALL_OW 70
18726: IFFALSE 18735
18728: GO 18730
18730: DISABLE
// PrepareTrap ;
18731: CALL 3402 0 0
18735: END
// every 0 0$1 trigger not dial_TrapDialogBlocker do var tmp , speaker , unit ;
18736: LD_EXP 11
18740: NOT
18741: IFFALSE 18959
18743: GO 18745
18745: DISABLE
18746: LD_INT 0
18748: PPUSH
18749: PPUSH
18750: PPUSH
// begin enable ;
18751: ENABLE
// for unit in trapTeam do
18752: LD_ADDR_VAR 0 3
18756: PUSH
18757: LD_EXP 59
18761: PUSH
18762: FOR_IN
18763: IFFALSE 18957
// if See ( 3 , unit ) then
18765: LD_INT 3
18767: PPUSH
18768: LD_VAR 0 3
18772: PPUSH
18773: CALL_OW 292
18777: IFFALSE 18955
// begin dial_TrapDialogBlocker = true ;
18779: LD_ADDR_EXP 11
18783: PUSH
18784: LD_INT 1
18786: ST_TO_ADDR
// DialogueOn ;
18787: CALL_OW 6
// tmp = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Gleb ;
18791: LD_ADDR_VAR 0 1
18795: PUSH
18796: LD_INT 22
18798: PUSH
18799: LD_INT 3
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 50
18818: PUSH
18819: EMPTY
18820: LIST
18821: PUSH
18822: LD_INT 26
18824: PUSH
18825: LD_INT 1
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 23
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 69
18853: PUSH
18854: LD_EXP 42
18858: DIFF
18859: ST_TO_ADDR
// speaker = DialogRandom ( tmp , DPartyAttacked-RSol1-1 ,  , false , true ) ;
18860: LD_ADDR_VAR 0 2
18864: PUSH
18865: LD_VAR 0 1
18869: PPUSH
18870: LD_STRING DPartyAttacked-RSol1-1
18872: PPUSH
18873: LD_STRING 
18875: PPUSH
18876: LD_INT 0
18878: PPUSH
18879: LD_INT 1
18881: PPUSH
18882: CALL 11689 0 5
18886: ST_TO_ADDR
// tmp = tmp diff speaker ;
18887: LD_ADDR_VAR 0 1
18891: PUSH
18892: LD_VAR 0 1
18896: PUSH
18897: LD_VAR 0 2
18901: DIFF
18902: ST_TO_ADDR
// if IsOK ( Gleb ) then
18903: LD_EXP 42
18907: PPUSH
18908: CALL_OW 302
18912: IFFALSE 18926
// Say ( Gleb , DPartyAttacked-Glb-1 ) ;
18914: LD_EXP 42
18918: PPUSH
18919: LD_STRING DPartyAttacked-Glb-1
18921: PPUSH
18922: CALL_OW 88
// DialogRandom ( tmp , DPartyAttacked-RSol1-2 ,  , false , true ) ;
18926: LD_VAR 0 1
18930: PPUSH
18931: LD_STRING DPartyAttacked-RSol1-2
18933: PPUSH
18934: LD_STRING 
18936: PPUSH
18937: LD_INT 0
18939: PPUSH
18940: LD_INT 1
18942: PPUSH
18943: CALL 11689 0 5
// DialogueOff ;
18947: CALL_OW 7
// exit ;
18951: POP
18952: POP
18953: GO 18959
// end ;
18955: GO 18762
18957: POP
18958: POP
// end ;
18959: PPOPN 3
18961: END
// every 0 0$1 trigger not savedVsevolod and IsOK ( Vsevolod ) and FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) do var nearUnit , unit , maleRandomUnits ;
18962: LD_EXP 19
18966: NOT
18967: PUSH
18968: LD_EXP 51
18972: PPUSH
18973: CALL_OW 302
18977: AND
18978: PUSH
18979: LD_INT 4
18981: PPUSH
18982: LD_INT 22
18984: PUSH
18985: LD_INT 3
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 50
18994: PUSH
18995: EMPTY
18996: LIST
18997: PUSH
18998: LD_INT 2
19000: PUSH
19001: LD_INT 21
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 23
19013: PUSH
19014: LD_INT 3
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 21
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: PPUSH
19045: CALL_OW 70
19049: AND
19050: IFFALSE 19692
19052: GO 19054
19054: DISABLE
19055: LD_INT 0
19057: PPUSH
19058: PPUSH
19059: PPUSH
// begin savedVsevolod = true ;
19060: LD_ADDR_EXP 19
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
19068: LD_STRING MVsevolodOut
19070: PPUSH
19071: CALL_OW 337
// unit = FilterUnitsInArea ( TerminalBaseArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ [ f_type , unit_human ] , [ f_nation , nation_russian ] ] , [ f_type , unit_vehicle ] ] ] ) ;
19075: LD_ADDR_VAR 0 2
19079: PUSH
19080: LD_INT 4
19082: PPUSH
19083: LD_INT 22
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 50
19095: PUSH
19096: EMPTY
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: LD_INT 21
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 23
19114: PUSH
19115: LD_INT 3
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 21
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: PPUSH
19146: CALL_OW 70
19150: ST_TO_ADDR
// unit = unit [ 1 ] ;
19151: LD_ADDR_VAR 0 2
19155: PUSH
19156: LD_VAR 0 2
19160: PUSH
19161: LD_INT 1
19163: ARRAY
19164: ST_TO_ADDR
// if GetType ( unit ) = unit_vehicle then
19165: LD_VAR 0 2
19169: PPUSH
19170: CALL_OW 247
19174: PUSH
19175: LD_INT 2
19177: EQUAL
19178: IFFALSE 19199
// unit = UnitsInside ( unit ) [ 1 ] ;
19180: LD_ADDR_VAR 0 2
19184: PUSH
19185: LD_VAR 0 2
19189: PPUSH
19190: CALL_OW 313
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
19199: LD_INT 22
19201: PUSH
19202: LD_INT 6
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PPUSH
19209: CALL_OW 69
19213: PPUSH
19214: LD_INT 3
19216: PPUSH
19217: CALL_OW 235
// if not unit = Burlak then
19221: LD_VAR 0 2
19225: PUSH
19226: LD_EXP 39
19230: EQUAL
19231: NOT
19232: IFFALSE 19409
// begin vsevolodWaitGorky = true ;
19234: LD_ADDR_EXP 20
19238: PUSH
19239: LD_INT 1
19241: ST_TO_ADDR
// DialogueOn ;
19242: CALL_OW 6
// Say ( Vsevolod , DOtherMeetVsev-Vse-1 ) ;
19246: LD_EXP 51
19250: PPUSH
19251: LD_STRING DOtherMeetVsev-Vse-1
19253: PPUSH
19254: CALL_OW 88
// if GetSex ( unit ) = sex_female then
19258: LD_VAR 0 2
19262: PPUSH
19263: CALL_OW 258
19267: PUSH
19268: LD_INT 2
19270: EQUAL
19271: IFFALSE 19391
// begin maleRandomUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff vsevolodTeam ;
19273: LD_ADDR_VAR 0 3
19277: PUSH
19278: LD_INT 22
19280: PUSH
19281: LD_INT 3
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 21
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 50
19300: PUSH
19301: EMPTY
19302: LIST
19303: PUSH
19304: LD_INT 26
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 23
19316: PUSH
19317: LD_INT 3
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: PPUSH
19331: CALL_OW 69
19335: PUSH
19336: LD_EXP 52
19340: DIFF
19341: ST_TO_ADDR
// maleRandomUnits = maleRandomUnits diff Gleb ;
19342: LD_ADDR_VAR 0 3
19346: PUSH
19347: LD_VAR 0 3
19351: PUSH
19352: LD_EXP 42
19356: DIFF
19357: ST_TO_ADDR
// if maleRandomUnits then
19358: LD_VAR 0 3
19362: IFFALSE 19389
// DialogRandom ( maleRandomUnits [ 1 ] , DOtherMeetVsev-RSol1-1 ,  , false , true ) ;
19364: LD_VAR 0 3
19368: PUSH
19369: LD_INT 1
19371: ARRAY
19372: PPUSH
19373: LD_STRING DOtherMeetVsev-RSol1-1
19375: PPUSH
19376: LD_STRING 
19378: PPUSH
19379: LD_INT 0
19381: PPUSH
19382: LD_INT 1
19384: PPUSH
19385: CALL 11689 0 5
// end else
19389: GO 19403
// Say ( unit , DOtherMeetVsev-RSol1-1 ) ;
19391: LD_VAR 0 2
19395: PPUSH
19396: LD_STRING DOtherMeetVsev-RSol1-1
19398: PPUSH
19399: CALL_OW 88
// DialogueOff ;
19403: CALL_OW 7
// end else
19407: GO 19692
// begin DialogueOn ;
19409: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19413: LD_EXP 51
19417: PPUSH
19418: LD_STRING DMeetVsev-Vse-1
19420: PPUSH
19421: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19425: LD_EXP 39
19429: PPUSH
19430: LD_STRING DMeetVsev-Bur-1
19432: PPUSH
19433: CALL_OW 88
// if lostAgainBase then
19437: LD_EXP 17
19441: IFFALSE 19481
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19443: LD_EXP 51
19447: PPUSH
19448: LD_STRING DMeetVsev2-Vse-1
19450: PPUSH
19451: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19455: LD_EXP 39
19459: PPUSH
19460: LD_STRING DMeetVsev2-Bur-1
19462: PPUSH
19463: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19467: LD_EXP 51
19471: PPUSH
19472: LD_STRING DMeetVsev2-Vse-2
19474: PPUSH
19475: CALL_OW 88
// end else
19479: GO 19517
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19481: LD_EXP 51
19485: PPUSH
19486: LD_STRING DMeetVsev2-Vse-2a
19488: PPUSH
19489: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19493: LD_EXP 39
19497: PPUSH
19498: LD_STRING DMeetVsev2-Bur-2
19500: PPUSH
19501: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19505: LD_EXP 51
19509: PPUSH
19510: LD_STRING DMeetVsev2-Vse-3
19512: PPUSH
19513: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19517: LD_EXP 39
19521: PPUSH
19522: LD_STRING DMeetVsev3-Bur-1
19524: PPUSH
19525: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19529: LD_EXP 51
19533: PPUSH
19534: LD_STRING DMeetVsev3-Vse-1
19536: PPUSH
19537: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19541: LD_EXP 39
19545: PPUSH
19546: LD_STRING DMeetVsev3-Bur-2
19548: PPUSH
19549: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
19553: LD_EXP 51
19557: PPUSH
19558: LD_STRING DMeetVsev3-Vse-2
19560: PPUSH
19561: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
19565: LD_EXP 39
19569: PPUSH
19570: LD_STRING DMeetVsev3-Bur-3
19572: PPUSH
19573: CALL_OW 88
// if stevensStatus = 0 then
19577: LD_EXP 4
19581: PUSH
19582: LD_INT 0
19584: EQUAL
19585: IFFALSE 19599
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
19587: LD_EXP 39
19591: PPUSH
19592: LD_STRING DMeetVsev4-Bur-1
19594: PPUSH
19595: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
19599: LD_EXP 39
19603: PPUSH
19604: LD_STRING DMeetVsev5-Bur-1
19606: PPUSH
19607: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
19611: LD_EXP 51
19615: PPUSH
19616: LD_STRING DMeetVsev5-Vse-1
19618: PPUSH
19619: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
19623: LD_EXP 39
19627: PPUSH
19628: LD_STRING DMeetVsev6-Bur-1
19630: PPUSH
19631: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
19635: LD_EXP 51
19639: PPUSH
19640: LD_STRING DMeetVsev6-Vse-1
19642: PPUSH
19643: CALL_OW 88
// DialogueOff ;
19647: CALL_OW 7
// wait ( 0 0$20 ) ;
19651: LD_INT 700
19653: PPUSH
19654: CALL_OW 67
// PrepareConvoy ;
19658: CALL 3610 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
19662: LD_EXP 60
19666: PPUSH
19667: LD_INT 57
19669: PPUSH
19670: LD_INT 40
19672: PPUSH
19673: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
19677: LD_EXP 60
19681: PPUSH
19682: LD_INT 37
19684: PPUSH
19685: LD_INT 59
19687: PPUSH
19688: CALL_OW 171
// end ; end ;
19692: PPOPN 3
19694: END
// every 0 0$1 trigger vsevolodWaitGorky and GetDistUnits ( Vsevolod , Burlak ) <= 7 do
19695: LD_EXP 20
19699: PUSH
19700: LD_EXP 51
19704: PPUSH
19705: LD_EXP 39
19709: PPUSH
19710: CALL_OW 296
19714: PUSH
19715: LD_INT 7
19717: LESSEQUAL
19718: AND
19719: IFFALSE 20015
19721: GO 19723
19723: DISABLE
// begin vsevolodWaitGorky = false ;
19724: LD_ADDR_EXP 20
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// DialogueOn ;
19732: CALL_OW 6
// Say ( Vsevolod , DMeetVsev-Vse-1 ) ;
19736: LD_EXP 51
19740: PPUSH
19741: LD_STRING DMeetVsev-Vse-1
19743: PPUSH
19744: CALL_OW 88
// Say ( Burlak , DMeetVsev-Bur-1 ) ;
19748: LD_EXP 39
19752: PPUSH
19753: LD_STRING DMeetVsev-Bur-1
19755: PPUSH
19756: CALL_OW 88
// if lostAgainBase then
19760: LD_EXP 17
19764: IFFALSE 19804
// begin Say ( Vsevolod , DMeetVsev2-Vse-1 ) ;
19766: LD_EXP 51
19770: PPUSH
19771: LD_STRING DMeetVsev2-Vse-1
19773: PPUSH
19774: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-1 ) ;
19778: LD_EXP 39
19782: PPUSH
19783: LD_STRING DMeetVsev2-Bur-1
19785: PPUSH
19786: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-2 ) ;
19790: LD_EXP 51
19794: PPUSH
19795: LD_STRING DMeetVsev2-Vse-2
19797: PPUSH
19798: CALL_OW 88
// end else
19802: GO 19840
// begin Say ( Vsevolod , DMeetVsev2-Vse-2a ) ;
19804: LD_EXP 51
19808: PPUSH
19809: LD_STRING DMeetVsev2-Vse-2a
19811: PPUSH
19812: CALL_OW 88
// Say ( Burlak , DMeetVsev2-Bur-2 ) ;
19816: LD_EXP 39
19820: PPUSH
19821: LD_STRING DMeetVsev2-Bur-2
19823: PPUSH
19824: CALL_OW 88
// Say ( Vsevolod , DMeetVsev2-Vse-3 ) ;
19828: LD_EXP 51
19832: PPUSH
19833: LD_STRING DMeetVsev2-Vse-3
19835: PPUSH
19836: CALL_OW 88
// end ; Say ( Burlak , DMeetVsev3-Bur-1 ) ;
19840: LD_EXP 39
19844: PPUSH
19845: LD_STRING DMeetVsev3-Bur-1
19847: PPUSH
19848: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-1 ) ;
19852: LD_EXP 51
19856: PPUSH
19857: LD_STRING DMeetVsev3-Vse-1
19859: PPUSH
19860: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-2 ) ;
19864: LD_EXP 39
19868: PPUSH
19869: LD_STRING DMeetVsev3-Bur-2
19871: PPUSH
19872: CALL_OW 88
// Say ( Vsevolod , DMeetVsev3-Vse-2 ) ;
19876: LD_EXP 51
19880: PPUSH
19881: LD_STRING DMeetVsev3-Vse-2
19883: PPUSH
19884: CALL_OW 88
// Say ( Burlak , DMeetVsev3-Bur-3 ) ;
19888: LD_EXP 39
19892: PPUSH
19893: LD_STRING DMeetVsev3-Bur-3
19895: PPUSH
19896: CALL_OW 88
// if stevensStatus = 0 then
19900: LD_EXP 4
19904: PUSH
19905: LD_INT 0
19907: EQUAL
19908: IFFALSE 19922
// Say ( Burlak , DMeetVsev4-Bur-1 ) ;
19910: LD_EXP 39
19914: PPUSH
19915: LD_STRING DMeetVsev4-Bur-1
19917: PPUSH
19918: CALL_OW 88
// Say ( Burlak , DMeetVsev5-Bur-1 ) ;
19922: LD_EXP 39
19926: PPUSH
19927: LD_STRING DMeetVsev5-Bur-1
19929: PPUSH
19930: CALL_OW 88
// Say ( Vsevolod , DMeetVsev5-Vse-1 ) ;
19934: LD_EXP 51
19938: PPUSH
19939: LD_STRING DMeetVsev5-Vse-1
19941: PPUSH
19942: CALL_OW 88
// Say ( Vsevolod , DMeetVsev6-Vse-1 ) ;
19946: LD_EXP 51
19950: PPUSH
19951: LD_STRING DMeetVsev6-Vse-1
19953: PPUSH
19954: CALL_OW 88
// Say ( Burlak , DMeetVsev6-Bur-1 ) ;
19958: LD_EXP 39
19962: PPUSH
19963: LD_STRING DMeetVsev6-Bur-1
19965: PPUSH
19966: CALL_OW 88
// DialogueOff ;
19970: CALL_OW 7
// wait ( 0 0$20 ) ;
19974: LD_INT 700
19976: PPUSH
19977: CALL_OW 67
// PrepareConvoy ;
19981: CALL 3610 0 0
// ComMoveXY ( convoyTeam , 57 , 40 ) ;
19985: LD_EXP 60
19989: PPUSH
19990: LD_INT 57
19992: PPUSH
19993: LD_INT 40
19995: PPUSH
19996: CALL_OW 111
// AddComMoveXY ( convoyTeam , 37 , 59 ) ;
20000: LD_EXP 60
20004: PPUSH
20005: LD_INT 37
20007: PPUSH
20008: LD_INT 59
20010: PPUSH
20011: CALL_OW 171
// end ;
20015: END
// every 0 0$1 trigger not dial_ConvoyDialogBlocker do var tmp , speaker , unit ;
20016: LD_EXP 12
20020: NOT
20021: IFFALSE 20151
20023: GO 20025
20025: DISABLE
20026: LD_INT 0
20028: PPUSH
20029: PPUSH
20030: PPUSH
// begin enable ;
20031: ENABLE
// for unit in convoyTeam do
20032: LD_ADDR_VAR 0 3
20036: PUSH
20037: LD_EXP 60
20041: PUSH
20042: FOR_IN
20043: IFFALSE 20149
// if See ( 3 , unit ) and not IsInArea ( unit , InsideBaseArea ) then
20045: LD_INT 3
20047: PPUSH
20048: LD_VAR 0 3
20052: PPUSH
20053: CALL_OW 292
20057: PUSH
20058: LD_VAR 0 3
20062: PPUSH
20063: LD_INT 19
20065: PPUSH
20066: CALL_OW 308
20070: NOT
20071: AND
20072: IFFALSE 20147
// begin dial_ConvoyDialogBlocker = true ;
20074: LD_ADDR_EXP 12
20078: PUSH
20079: LD_INT 1
20081: ST_TO_ADDR
// DialogueOn ;
20082: CALL_OW 6
// speaker = UnitFilter ( convoyTeam , [ f_type , unit_human ] ) [ 1 ] ;
20086: LD_ADDR_VAR 0 2
20090: PUSH
20091: LD_EXP 60
20095: PPUSH
20096: LD_INT 21
20098: PUSH
20099: LD_INT 1
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PPUSH
20106: CALL_OW 72
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: ST_TO_ADDR
// Say ( speaker , DTruck-Sol1-1 ) ;
20115: LD_VAR 0 2
20119: PPUSH
20120: LD_STRING DTruck-Sol1-1
20122: PPUSH
20123: CALL_OW 88
// Say ( Burlak , DTruck-Bur-1 ) ;
20127: LD_EXP 39
20131: PPUSH
20132: LD_STRING DTruck-Bur-1
20134: PPUSH
20135: CALL_OW 88
// DialogueOff ;
20139: CALL_OW 7
// exit ;
20143: POP
20144: POP
20145: GO 20151
// end ;
20147: GO 20042
20149: POP
20150: POP
// end ;
20151: PPOPN 3
20153: END
// every 0 0$1 trigger timeToAttack >= vsevolodSaveTime do
20154: LD_EXP 26
20158: PUSH
20159: LD_EXP 38
20163: GREATEREQUAL
20164: IFFALSE 20203
20166: GO 20168
20168: DISABLE
// begin PrepareAttack ;
20169: CALL 3791 0 0
// ComAgressiveMove ( attackTeam , 60 , 41 ) ;
20173: LD_EXP 61
20177: PPUSH
20178: LD_INT 60
20180: PPUSH
20181: LD_INT 41
20183: PPUSH
20184: CALL_OW 114
// AddComAgressiveMove ( attackTeam , 107 , 125 ) ;
20188: LD_EXP 61
20192: PPUSH
20193: LD_INT 107
20195: PPUSH
20196: LD_INT 125
20198: PPUSH
20199: CALL_OW 174
// end ;
20203: END
// every 1 trigger not savedVsevolod and GetLives ( Vsevolod ) <= 500 do
20204: LD_EXP 19
20208: NOT
20209: PUSH
20210: LD_EXP 51
20214: PPUSH
20215: CALL_OW 256
20219: PUSH
20220: LD_INT 500
20222: LESSEQUAL
20223: AND
20224: IFFALSE 20249
20226: GO 20228
20228: DISABLE
// begin DialogueOn ;
20229: CALL_OW 6
// SayRadio ( Vsevolod , DDieVsev2-Vse-1 ) ;
20233: LD_EXP 51
20237: PPUSH
20238: LD_STRING DDieVsev2-Vse-1
20240: PPUSH
20241: CALL_OW 94
// DialogueOff ;
20245: CALL_OW 7
// end ;
20249: END
// export function Dial_ResearchTauField ; var speaker , sci , randomTalkDialog ; begin
20250: LD_INT 0
20252: PPUSH
20253: PPUSH
20254: PPUSH
20255: PPUSH
// DialogueOn ;
20256: CALL_OW 6
// if IsOK ( Petrosyan ) then
20260: LD_EXP 43
20264: PPUSH
20265: CALL_OW 302
20269: IFFALSE 20285
// Say ( Petrosyan , DStasis-Pty-1 ) else
20271: LD_EXP 43
20275: PPUSH
20276: LD_STRING DStasis-Pty-1
20278: PPUSH
20279: CALL_OW 88
20283: GO 20507
// if IsOK ( Dolgov ) then
20285: LD_EXP 45
20289: PPUSH
20290: CALL_OW 302
20294: IFFALSE 20310
// Say ( Dolgov , DStasis-Dol-1 ) else
20296: LD_EXP 45
20300: PPUSH
20301: LD_STRING DStasis-Dol-1
20303: PPUSH
20304: CALL_OW 88
20308: GO 20507
// begin sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_class , class_scientistic ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20310: LD_ADDR_VAR 0 3
20314: PUSH
20315: LD_INT 22
20317: PUSH
20318: LD_INT 3
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 21
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 50
20337: PUSH
20338: EMPTY
20339: LIST
20340: PUSH
20341: LD_INT 26
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 25
20353: PUSH
20354: LD_INT 4
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 23
20363: PUSH
20364: LD_INT 3
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: PPUSH
20379: CALL_OW 69
20383: PUSH
20384: LD_EXP 39
20388: DIFF
20389: ST_TO_ADDR
// if not sci then
20390: LD_VAR 0 3
20394: NOT
20395: IFFALSE 20466
// sci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff Burlak ;
20397: LD_ADDR_VAR 0 3
20401: PUSH
20402: LD_INT 22
20404: PUSH
20405: LD_INT 3
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 21
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 50
20424: PUSH
20425: EMPTY
20426: LIST
20427: PUSH
20428: LD_INT 26
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 23
20440: PUSH
20441: LD_INT 3
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 69
20459: PUSH
20460: LD_EXP 39
20464: DIFF
20465: ST_TO_ADDR
// if sci then
20466: LD_VAR 0 3
20470: IFFALSE 20507
// begin speaker = DialogRandom ( sci , DStasis-RSol1-1 ,  , false , true ) ;
20472: LD_ADDR_VAR 0 2
20476: PUSH
20477: LD_VAR 0 3
20481: PPUSH
20482: LD_STRING DStasis-RSol1-1
20484: PPUSH
20485: LD_STRING 
20487: PPUSH
20488: LD_INT 0
20490: PPUSH
20491: LD_INT 1
20493: PPUSH
20494: CALL 11689 0 5
20498: ST_TO_ADDR
// randomTalkDialog = true ;
20499: LD_ADDR_VAR 0 4
20503: PUSH
20504: LD_INT 1
20506: ST_TO_ADDR
// end ; end ; if IsOK ( Petrosyan ) or IsOK ( Dolgov ) or randomTalkDialog then
20507: LD_EXP 43
20511: PPUSH
20512: CALL_OW 302
20516: PUSH
20517: LD_EXP 45
20521: PPUSH
20522: CALL_OW 302
20526: OR
20527: PUSH
20528: LD_VAR 0 4
20532: OR
20533: IFFALSE 20630
// begin Say ( Burlak , DStasis-Bur-1 ) ;
20535: LD_EXP 39
20539: PPUSH
20540: LD_STRING DStasis-Bur-1
20542: PPUSH
20543: CALL_OW 88
// if IsOK ( Petrosyan ) then
20547: LD_EXP 43
20551: PPUSH
20552: CALL_OW 302
20556: IFFALSE 20572
// Say ( Petrosyan , DStasis-Pty-2 ) else
20558: LD_EXP 43
20562: PPUSH
20563: LD_STRING DStasis-Pty-2
20565: PPUSH
20566: CALL_OW 88
20570: GO 20618
// if IsOK ( Dolgov ) then
20572: LD_EXP 45
20576: PPUSH
20577: CALL_OW 302
20581: IFFALSE 20597
// Say ( Dolgov , DStasis-Dol-2 ) else
20583: LD_EXP 45
20587: PPUSH
20588: LD_STRING DStasis-Dol-2
20590: PPUSH
20591: CALL_OW 88
20595: GO 20618
// DialogRandom ( speaker , DStasis-RSol1-2 ,  , false , true ) ;
20597: LD_VAR 0 2
20601: PPUSH
20602: LD_STRING DStasis-RSol1-2
20604: PPUSH
20605: LD_STRING 
20607: PPUSH
20608: LD_INT 0
20610: PPUSH
20611: LD_INT 1
20613: PPUSH
20614: CALL 11689 0 5
// Say ( Burlak , DStasis-Bur-2 ) ;
20618: LD_EXP 39
20622: PPUSH
20623: LD_STRING DStasis-Bur-2
20625: PPUSH
20626: CALL_OW 88
// end ; DialogueOff ;
20630: CALL_OW 7
// if GetTech ( tech_SibEng , 3 ) = state_researched then
20634: LD_INT 22
20636: PPUSH
20637: LD_INT 3
20639: PPUSH
20640: CALL_OW 321
20644: PUSH
20645: LD_INT 2
20647: EQUAL
20648: IFFALSE 20657
// ChangeMissionObjectives ( MOutResearch ) ;
20650: LD_STRING MOutResearch
20652: PPUSH
20653: CALL_OW 337
// end ;
20657: LD_VAR 0 1
20661: RET
// every 0 0$01 trigger GetTech ( tech_SibEng , 3 ) = state_researched and GetTech ( tech_TauField , 3 ) = state_researched and not dial_EndMissionDialogBlocker do var depots , depot , sibCounter ;
20662: LD_INT 22
20664: PPUSH
20665: LD_INT 3
20667: PPUSH
20668: CALL_OW 321
20672: PUSH
20673: LD_INT 2
20675: EQUAL
20676: PUSH
20677: LD_INT 30
20679: PPUSH
20680: LD_INT 3
20682: PPUSH
20683: CALL_OW 321
20687: PUSH
20688: LD_INT 2
20690: EQUAL
20691: AND
20692: PUSH
20693: LD_EXP 14
20697: NOT
20698: AND
20699: IFFALSE 21042
20701: GO 20703
20703: DISABLE
20704: LD_INT 0
20706: PPUSH
20707: PPUSH
20708: PPUSH
// begin wait ( 0 0$15 ) ;
20709: LD_INT 525
20711: PPUSH
20712: CALL_OW 67
// depots = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20716: LD_ADDR_VAR 0 1
20720: PUSH
20721: LD_INT 22
20723: PUSH
20724: LD_INT 3
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 50
20733: PUSH
20734: EMPTY
20735: LIST
20736: PUSH
20737: LD_INT 21
20739: PUSH
20740: LD_INT 3
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: LD_INT 30
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 30
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: LIST
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: PPUSH
20781: CALL_OW 69
20785: ST_TO_ADDR
// sibCounter = 0 ;
20786: LD_ADDR_VAR 0 3
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// for depot in depots do
20794: LD_ADDR_VAR 0 2
20798: PUSH
20799: LD_VAR 0 1
20803: PUSH
20804: FOR_IN
20805: IFFALSE 20838
// sibCounter = sibCounter + GetResourceType ( GetBase ( depot ) , mat_siberit ) ;
20807: LD_ADDR_VAR 0 3
20811: PUSH
20812: LD_VAR 0 3
20816: PUSH
20817: LD_VAR 0 2
20821: PPUSH
20822: CALL_OW 274
20826: PPUSH
20827: LD_INT 3
20829: PPUSH
20830: CALL_OW 275
20834: PLUS
20835: ST_TO_ADDR
20836: GO 20804
20838: POP
20839: POP
// if sibCounter >= 100 then
20840: LD_VAR 0 3
20844: PUSH
20845: LD_INT 100
20847: GREATEREQUAL
20848: IFFALSE 21034
// begin ChangeMissionObjectives ( MOutMine ) ;
20850: LD_STRING MOutMine
20852: PPUSH
20853: CALL_OW 337
// dial_EndMissionDialogBlocker = true ;
20857: LD_ADDR_EXP 14
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// DialogueOn ;
20865: CALL_OW 6
// SayRadio ( Platonov , DNextMiss1-Pla-1 ) ;
20869: LD_EXP 47
20873: PPUSH
20874: LD_STRING DNextMiss1-Pla-1
20876: PPUSH
20877: CALL_OW 94
// if not savedVsevolod then
20881: LD_EXP 19
20885: NOT
20886: IFFALSE 20932
// begin SayRadio ( Platonov , DNextMiss2-Pla-1 ) ;
20888: LD_EXP 47
20892: PPUSH
20893: LD_STRING DNextMiss2-Pla-1
20895: PPUSH
20896: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
20900: LD_EXP 39
20904: PPUSH
20905: LD_STRING DNextMiss4-Bur-1
20907: PPUSH
20908: CALL_OW 88
// SayRadio ( Vsevolod , DDieVsev1-Vse-1 ) ;
20912: LD_EXP 51
20916: PPUSH
20917: LD_STRING DDieVsev1-Vse-1
20919: PPUSH
20920: CALL_OW 94
// ForceFinishGame ;
20924: CALL 21715 0 0
// exit ;
20928: GO 21042
// end else
20930: GO 20968
// begin SayRadio ( Platonov , DNextMiss3-Pla-1 ) ;
20932: LD_EXP 47
20936: PPUSH
20937: LD_STRING DNextMiss3-Pla-1
20939: PPUSH
20940: CALL_OW 94
// SayRadio ( Platonov , DNextMiss4-Pla-1 ) ;
20944: LD_EXP 47
20948: PPUSH
20949: LD_STRING DNextMiss4-Pla-1
20951: PPUSH
20952: CALL_OW 94
// Say ( Burlak , DNextMiss4-Bur-1 ) ;
20956: LD_EXP 39
20960: PPUSH
20961: LD_STRING DNextMiss4-Bur-1
20963: PPUSH
20964: CALL_OW 88
// end ; DialogueOff ;
20968: CALL_OW 7
// SelectCharacters ;
20972: CALL 14960 0 0
// canSpawnReinforces = true ;
20976: LD_ADDR_EXP 23
20980: PUSH
20981: LD_INT 1
20983: ST_TO_ADDR
// canRemoveUnits = true ;
20984: LD_ADDR_EXP 25
20988: PUSH
20989: LD_INT 1
20991: ST_TO_ADDR
// SetAttitude ( 1 , 6 , att_friend , true ) ;
20992: LD_INT 1
20994: PPUSH
20995: LD_INT 6
20997: PPUSH
20998: LD_INT 1
21000: PPUSH
21001: LD_INT 1
21003: PPUSH
21004: CALL_OW 80
// SetAreaMapShow ( ExitMapArea , 1 ) ;
21008: LD_INT 14
21010: PPUSH
21011: LD_INT 1
21013: PPUSH
21014: CALL_OW 424
// ChangeMissionObjectives ( MOutResearch ) ;
21018: LD_STRING MOutResearch
21020: PPUSH
21021: CALL_OW 337
// ChangeMissionObjectives ( MCars ) ;
21025: LD_STRING MCars
21027: PPUSH
21028: CALL_OW 337
// exit ;
21032: GO 21042
// end ; wait ( 0 0$10 ) ;
21034: LD_INT 350
21036: PPUSH
21037: CALL_OW 67
// enable ;
21041: ENABLE
// end ;
21042: PPOPN 3
21044: END
// every 0 0$1 trigger canRemoveUnits do var un ;
21045: LD_EXP 25
21049: IFFALSE 21159
21051: GO 21053
21053: DISABLE
21054: LD_INT 0
21056: PPUSH
// begin enable ;
21057: ENABLE
// SetLives ( Vsevolod , 1000 ) ;
21058: LD_EXP 51
21062: PPUSH
21063: LD_INT 1000
21065: PPUSH
21066: CALL_OW 234
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , ExitMapArea ) ;
21070: LD_INT 22
21072: PUSH
21073: LD_INT 6
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 21
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PPUSH
21094: CALL_OW 69
21098: PPUSH
21099: LD_INT 14
21101: PPUSH
21102: CALL_OW 113
// for un in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
21106: LD_ADDR_VAR 0 1
21110: PUSH
21111: LD_INT 14
21113: PPUSH
21114: LD_INT 22
21116: PUSH
21117: LD_INT 6
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PPUSH
21138: CALL_OW 70
21142: PUSH
21143: FOR_IN
21144: IFFALSE 21157
// RemoveUnit ( un ) ;
21146: LD_VAR 0 1
21150: PPUSH
21151: CALL_OW 64
21155: GO 21143
21157: POP
21158: POP
// end ;
21159: PPOPN 1
21161: END
// every 1 trigger not canGoNorth and FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do var unit ;
21162: LD_EXP 21
21166: NOT
21167: PUSH
21168: LD_INT 15
21170: PPUSH
21171: LD_INT 22
21173: PUSH
21174: LD_INT 3
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 50
21183: PUSH
21184: EMPTY
21185: LIST
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 21
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 21
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 70
21224: AND
21225: IFFALSE 21357
21227: GO 21229
21229: DISABLE
21230: LD_INT 0
21232: PPUSH
// begin enable ;
21233: ENABLE
// for unit in FilterUnitsInArea ( NorthBlockerArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
21234: LD_ADDR_VAR 0 1
21238: PUSH
21239: LD_INT 15
21241: PPUSH
21242: LD_INT 22
21244: PUSH
21245: LD_INT 3
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 50
21254: PUSH
21255: EMPTY
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: LD_INT 21
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 21
21273: PUSH
21274: LD_INT 2
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: PPUSH
21291: CALL_OW 70
21295: PUSH
21296: FOR_IN
21297: IFFALSE 21313
// ComMoveToArea ( unit , NorthBlockerReturnArea ) ;
21299: LD_VAR 0 1
21303: PPUSH
21304: LD_INT 16
21306: PPUSH
21307: CALL_OW 113
21311: GO 21296
21313: POP
21314: POP
// if not dial_NorthBlocker then
21315: LD_EXP 13
21319: NOT
21320: IFFALSE 21357
// begin dial_NorthBlocker = true ;
21322: LD_ADDR_EXP 13
21326: PUSH
21327: LD_INT 1
21329: ST_TO_ADDR
// Say ( Burlak , DMoveNorth-Bur-1 ) ;
21330: LD_EXP 39
21334: PPUSH
21335: LD_STRING DMoveNorth-Bur-1
21337: PPUSH
21338: CALL_OW 88
// wait ( 0 0$5 ) ;
21342: LD_INT 175
21344: PPUSH
21345: CALL_OW 67
// dial_NorthBlocker = false ;
21349: LD_ADDR_EXP 13
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// end ; end ;
21357: PPOPN 1
21359: END
// every 2 2$30 trigger canSpawnReinforces do
21360: LD_EXP 23
21364: IFFALSE 21420
21366: GO 21368
21368: DISABLE
// begin SpawnPlatonovReinforces ;
21369: CALL 2523 0 0
// CenterOnXY ( 134 , 233 ) ;
21373: LD_INT 134
21375: PPUSH
21376: LD_INT 233
21378: PPUSH
21379: CALL_OW 84
// if Kirilenkova and IsPlaced ( Kirilenkova ) then
21383: LD_EXP 48
21387: PUSH
21388: LD_EXP 48
21392: PPUSH
21393: CALL_OW 305
21397: AND
21398: IFFALSE 21412
// Say ( Kirilenkova , DMeetKirilenkova-Kir-1 ) ;
21400: LD_EXP 48
21404: PPUSH
21405: LD_STRING DMeetKirilenkova-Kir-1
21407: PPUSH
21408: CALL_OW 88
// canEndMission = true ;
21412: LD_ADDR_EXP 24
21416: PUSH
21417: LD_INT 1
21419: ST_TO_ADDR
// end ; end_of_file
21420: END
// export function Lose_Burlak ; begin
21421: LD_INT 0
21423: PPUSH
// YouLost ( Burlak ) ;
21424: LD_STRING Burlak
21426: PPUSH
21427: CALL_OW 104
// end ;
21431: LD_VAR 0 1
21435: RET
// export function Lose_Gleb ; begin
21436: LD_INT 0
21438: PPUSH
// SayRadio ( Platonov , DKillGleb-Pla-1 ) ;
21439: LD_EXP 47
21443: PPUSH
21444: LD_STRING DKillGleb-Pla-1
21446: PPUSH
21447: CALL_OW 94
// YouLost ( Gleb ) ;
21451: LD_STRING Gleb
21453: PPUSH
21454: CALL_OW 104
// end ;
21458: LD_VAR 0 1
21462: RET
// every 0 0$1 trigger not canEndMission and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21463: LD_EXP 24
21467: NOT
21468: PUSH
21469: LD_INT 22
21471: PUSH
21472: LD_INT 3
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: LD_INT 25
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 30
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 30
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 30
21514: PUSH
21515: LD_INT 6
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 30
21524: PUSH
21525: LD_INT 7
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 30
21534: PUSH
21535: LD_INT 8
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PPUSH
21555: CALL_OW 69
21559: NOT
21560: AND
21561: IFFALSE 21573
21563: GO 21565
21565: DISABLE
// YouLost ( NoDepotNoEngineerNoLab ) ;
21566: LD_STRING NoDepotNoEngineerNoLab
21568: PPUSH
21569: CALL_OW 104
21573: END
// export function Lose_NoDepotNoEngineerNoLab ; begin
21574: LD_INT 0
21576: PPUSH
// YouLost ( NoDepotNoEngineerNoLab ) ;
21577: LD_STRING NoDepotNoEngineerNoLab
21579: PPUSH
21580: CALL_OW 104
// end ; end_of_file
21584: LD_VAR 0 1
21588: RET
// every 0 0$5 trigger canEndMission and not FilterUnitsExceptArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) do var units , qr ;
21589: LD_EXP 24
21593: PUSH
21594: LD_INT 14
21596: PPUSH
21597: LD_INT 22
21599: PUSH
21600: LD_INT 3
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 50
21609: PUSH
21610: EMPTY
21611: LIST
21612: PUSH
21613: LD_INT 2
21615: PUSH
21616: LD_INT 21
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: LD_INT 21
21631: PUSH
21632: LD_INT 2
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 59
21641: PUSH
21642: EMPTY
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: LIST
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: LIST
21659: PPUSH
21660: CALL_OW 71
21664: NOT
21665: AND
21666: IFFALSE 21712
21668: GO 21670
21670: DISABLE
21671: LD_INT 0
21673: PPUSH
21674: PPUSH
// begin case Query ( QEndGame ) of 1 :
21675: LD_STRING QEndGame
21677: PPUSH
21678: CALL_OW 97
21682: PUSH
21683: LD_INT 1
21685: DOUBLE
21686: EQUAL
21687: IFTRUE 21691
21689: GO 21710
21691: POP
// begin SetRewards ;
21692: CALL 21739 0 0
// SavePlayerCharacters ;
21696: CALL 21903 0 0
// SaveGlobalVariables ;
21700: CALL 22292 0 0
// YouWin ;
21704: CALL_OW 103
// end ; end ;
21708: GO 21711
21710: POP
// enable ;
21711: ENABLE
// end ;
21712: PPOPN 2
21714: END
// export function ForceFinishGame ; begin
21715: LD_INT 0
21717: PPUSH
// SetRewards ;
21718: CALL 21739 0 0
// SavePlayerCharacters ;
21722: CALL 21903 0 0
// SaveGlobalVariables ;
21726: CALL 22292 0 0
// YouWin ;
21730: CALL_OW 103
// end ;
21734: LD_VAR 0 1
21738: RET
// function SetRewards ; begin
21739: LD_INT 0
21741: PPUSH
// if savedVsevolod then
21742: LD_EXP 19
21746: IFFALSE 21760
// AddMedal ( Vsevolod , 1 ) else
21748: LD_STRING Vsevolod
21750: PPUSH
21751: LD_INT 1
21753: PPUSH
21754: CALL_OW 101
21758: GO 21771
// AddMedal ( Vsevolod , - 1 ) ;
21760: LD_STRING Vsevolod
21762: PPUSH
21763: LD_INT 1
21765: NEG
21766: PPUSH
21767: CALL_OW 101
// if not lostAgainBase then
21771: LD_EXP 17
21775: NOT
21776: IFFALSE 21790
// AddMedal ( Ovsyenko , 1 ) else
21778: LD_STRING Ovsyenko
21780: PPUSH
21781: LD_INT 1
21783: PPUSH
21784: CALL_OW 101
21788: GO 21801
// AddMedal ( Ovsyenko , - 1 ) ;
21790: LD_STRING Ovsyenko
21792: PPUSH
21793: LD_INT 1
21795: NEG
21796: PPUSH
21797: CALL_OW 101
// if GetTech ( tech_MatPred , 3 ) = state_researched then
21801: LD_INT 9
21803: PPUSH
21804: LD_INT 3
21806: PPUSH
21807: CALL_OW 321
21811: PUSH
21812: LD_INT 2
21814: EQUAL
21815: IFFALSE 21829
// AddMedal ( Prediction , 1 ) else
21817: LD_STRING Prediction
21819: PPUSH
21820: LD_INT 1
21822: PPUSH
21823: CALL_OW 101
21827: GO 21840
// AddMedal ( Prediction , - 1 ) ;
21829: LD_STRING Prediction
21831: PPUSH
21832: LD_INT 1
21834: NEG
21835: PPUSH
21836: CALL_OW 101
// GiveMedals ( Main ) ;
21840: LD_STRING Main
21842: PPUSH
21843: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
21847: LD_INT 22
21849: PUSH
21850: LD_INT 3
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 21
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 23
21869: PUSH
21870: LD_INT 3
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 50
21879: PUSH
21880: EMPTY
21881: LIST
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: PPUSH
21889: CALL_OW 69
21893: PPUSH
21894: CALL_OW 43
// end ;
21898: LD_VAR 0 1
21902: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
21903: LD_INT 0
21905: PPUSH
21906: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
21907: LD_EXP 39
21911: PPUSH
21912: LD_STRING Burlak
21914: PPUSH
21915: LD_INT 3
21917: PPUSH
21918: CALL 11490 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
21922: LD_EXP 40
21926: PPUSH
21927: LD_STRING Karamazov
21929: PPUSH
21930: LD_INT 3
21932: PPUSH
21933: CALL 11490 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
21937: LD_EXP 41
21941: PPUSH
21942: LD_STRING Petrovova
21944: PPUSH
21945: LD_INT 3
21947: PPUSH
21948: CALL 11490 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
21952: LD_EXP 42
21956: PPUSH
21957: LD_STRING Gleb
21959: PPUSH
21960: LD_INT 3
21962: PPUSH
21963: CALL 11490 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
21967: LD_EXP 43
21971: PPUSH
21972: LD_STRING Petrosyan
21974: PPUSH
21975: LD_INT 3
21977: PPUSH
21978: CALL 11490 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
21982: LD_EXP 45
21986: PPUSH
21987: LD_STRING Dolgov
21989: PPUSH
21990: LD_INT 3
21992: PPUSH
21993: CALL 11490 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
21997: LD_EXP 46
22001: PPUSH
22002: LD_STRING Lipshchin
22004: PPUSH
22005: LD_INT 3
22007: PPUSH
22008: CALL 11490 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
22012: LD_EXP 44
22016: PPUSH
22017: LD_STRING Titov
22019: PPUSH
22020: LD_INT 3
22022: PPUSH
22023: CALL 11490 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
22027: LD_EXP 48
22031: PPUSH
22032: LD_STRING Kirilenkova
22034: PPUSH
22035: LD_INT 3
22037: PPUSH
22038: CALL 11490 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
22042: LD_EXP 49
22046: PPUSH
22047: LD_STRING Belkov
22049: PPUSH
22050: LD_INT 3
22052: PPUSH
22053: CALL 11490 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
22057: LD_EXP 50
22061: PPUSH
22062: LD_STRING Belkov2
22064: PPUSH
22065: LD_INT 3
22067: PPUSH
22068: CALL 11490 0 3
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
22072: LD_INT 22
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 21
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: LD_INT 25
22097: PUSH
22098: LD_INT 12
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 25
22107: PUSH
22108: LD_INT 16
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 25
22117: PUSH
22118: LD_INT 15
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PPUSH
22136: CALL_OW 69
22140: PPUSH
22141: LD_STRING other_apemans
22143: PPUSH
22144: LD_INT 3
22146: PPUSH
22147: CALL 11546 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] ;
22151: LD_ADDR_VAR 0 2
22155: PUSH
22156: LD_INT 22
22158: PUSH
22159: LD_INT 3
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 21
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 23
22178: PUSH
22179: LD_INT 3
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 50
22188: PUSH
22189: EMPTY
22190: LIST
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: PPUSH
22198: CALL_OW 69
22202: PUSH
22203: LD_EXP 39
22207: PUSH
22208: LD_EXP 40
22212: PUSH
22213: LD_EXP 41
22217: PUSH
22218: LD_EXP 42
22222: PUSH
22223: LD_EXP 43
22227: PUSH
22228: LD_EXP 44
22232: PUSH
22233: LD_EXP 45
22237: PUSH
22238: LD_EXP 46
22242: PUSH
22243: LD_EXP 48
22247: PUSH
22248: LD_EXP 49
22252: PUSH
22253: LD_EXP 50
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: DIFF
22271: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
22272: LD_VAR 0 2
22276: PPUSH
22277: LD_STRING other_survivors
22279: PPUSH
22280: LD_INT 3
22282: PPUSH
22283: CALL 11546 0 3
// end ;
22287: LD_VAR 0 1
22291: RET
// function SaveGlobalVariables ; var i , driver , driverShortName ; begin
22292: LD_INT 0
22294: PPUSH
22295: PPUSH
22296: PPUSH
22297: PPUSH
// resourcesFrom06 = [ ] ;
22298: LD_ADDR_EXP 8
22302: PUSH
22303: EMPTY
22304: ST_TO_ADDR
// SaveVariable ( techMatPredStatus , 06_TechMatPredStatus_1 ) ;
22305: LD_EXP 6
22309: PPUSH
22310: LD_STRING 06_TechMatPredStatus_1
22312: PPUSH
22313: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
22317: LD_ADDR_VAR 0 2
22321: PUSH
22322: LD_INT 14
22324: PPUSH
22325: LD_INT 22
22327: PUSH
22328: LD_INT 3
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 59
22337: PUSH
22338: EMPTY
22339: LIST
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: LD_INT 34
22346: PUSH
22347: LD_INT 51
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 34
22356: PUSH
22357: LD_INT 32
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 34
22366: PUSH
22367: LD_INT 12
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 34
22376: PUSH
22377: LD_INT 89
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: PPUSH
22396: CALL_OW 70
22400: PUSH
22401: FOR_IN
22402: IFFALSE 22430
// resourcesFrom06 = resourcesFrom06 ^ [ GetMultiCargo ( i ) ] ;
22404: LD_ADDR_EXP 8
22408: PUSH
22409: LD_EXP 8
22413: PUSH
22414: LD_VAR 0 2
22418: PPUSH
22419: CALL 14613 0 1
22423: PUSH
22424: EMPTY
22425: LIST
22426: ADD
22427: ST_TO_ADDR
22428: GO 22401
22430: POP
22431: POP
// SaveVariable ( resourcesFrom06 , 06_ResourcesInCargo_3 ) ;
22432: LD_EXP 8
22436: PPUSH
22437: LD_STRING 06_ResourcesInCargo_3
22439: PPUSH
22440: CALL_OW 39
// for i in FilterUnitsInArea ( ExitMapArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
22444: LD_ADDR_VAR 0 2
22448: PUSH
22449: LD_INT 14
22451: PPUSH
22452: LD_INT 22
22454: PUSH
22455: LD_INT 3
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 21
22464: PUSH
22465: LD_INT 2
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 59
22474: PUSH
22475: EMPTY
22476: LIST
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: LIST
22482: PPUSH
22483: CALL_OW 70
22487: PUSH
22488: FOR_IN
22489: IFFALSE 22893
// begin driver = UnitsInside ( i ) [ 1 ] ;
22491: LD_ADDR_VAR 0 3
22495: PUSH
22496: LD_VAR 0 2
22500: PPUSH
22501: CALL_OW 313
22505: PUSH
22506: LD_INT 1
22508: ARRAY
22509: ST_TO_ADDR
// if driver = Burlak then
22510: LD_VAR 0 3
22514: PUSH
22515: LD_EXP 39
22519: EQUAL
22520: IFFALSE 22530
// driverShortName = Bur ;
22522: LD_ADDR_VAR 0 4
22526: PUSH
22527: LD_STRING Bur
22529: ST_TO_ADDR
// if driver = Karamazov then
22530: LD_VAR 0 3
22534: PUSH
22535: LD_EXP 40
22539: EQUAL
22540: IFFALSE 22550
// driverShortName = Kar ;
22542: LD_ADDR_VAR 0 4
22546: PUSH
22547: LD_STRING Kar
22549: ST_TO_ADDR
// if driver = Petrovova then
22550: LD_VAR 0 3
22554: PUSH
22555: LD_EXP 41
22559: EQUAL
22560: IFFALSE 22570
// driverShortName = Ptr ;
22562: LD_ADDR_VAR 0 4
22566: PUSH
22567: LD_STRING Ptr
22569: ST_TO_ADDR
// if driver = Gleb then
22570: LD_VAR 0 3
22574: PUSH
22575: LD_EXP 42
22579: EQUAL
22580: IFFALSE 22590
// driverShortName = Glb ;
22582: LD_ADDR_VAR 0 4
22586: PUSH
22587: LD_STRING Glb
22589: ST_TO_ADDR
// if driver = Petrosyan then
22590: LD_VAR 0 3
22594: PUSH
22595: LD_EXP 43
22599: EQUAL
22600: IFFALSE 22610
// driverShortName = Pet ;
22602: LD_ADDR_VAR 0 4
22606: PUSH
22607: LD_STRING Pet
22609: ST_TO_ADDR
// if driver = Dolgov then
22610: LD_VAR 0 3
22614: PUSH
22615: LD_EXP 45
22619: EQUAL
22620: IFFALSE 22630
// driverShortName = Dol ;
22622: LD_ADDR_VAR 0 4
22626: PUSH
22627: LD_STRING Dol
22629: ST_TO_ADDR
// if driver = Lipshchin then
22630: LD_VAR 0 3
22634: PUSH
22635: LD_EXP 46
22639: EQUAL
22640: IFFALSE 22650
// driverShortName = Lip ;
22642: LD_ADDR_VAR 0 4
22646: PUSH
22647: LD_STRING Lip
22649: ST_TO_ADDR
// if driver = Titov then
22650: LD_VAR 0 3
22654: PUSH
22655: LD_EXP 44
22659: EQUAL
22660: IFFALSE 22670
// driverShortName = Tit ;
22662: LD_ADDR_VAR 0 4
22666: PUSH
22667: LD_STRING Tit
22669: ST_TO_ADDR
// if driver = Kirilenkova then
22670: LD_VAR 0 3
22674: PUSH
22675: LD_EXP 48
22679: EQUAL
22680: IFFALSE 22690
// driverShortName = Kir ;
22682: LD_ADDR_VAR 0 4
22686: PUSH
22687: LD_STRING Kir
22689: ST_TO_ADDR
// if driver = Belkov then
22690: LD_VAR 0 3
22694: PUSH
22695: LD_EXP 49
22699: EQUAL
22700: IFFALSE 22710
// driverShortName = Bel ;
22702: LD_ADDR_VAR 0 4
22706: PUSH
22707: LD_STRING Bel
22709: ST_TO_ADDR
// if driver = Belkov2 then
22710: LD_VAR 0 3
22714: PUSH
22715: LD_EXP 50
22719: EQUAL
22720: IFFALSE 22730
// driverShortName = Bel2 ;
22722: LD_ADDR_VAR 0 4
22726: PUSH
22727: LD_STRING Bel2
22729: ST_TO_ADDR
// if not driver in [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 ] then
22730: LD_VAR 0 3
22734: PUSH
22735: LD_EXP 39
22739: PUSH
22740: LD_EXP 40
22744: PUSH
22745: LD_EXP 41
22749: PUSH
22750: LD_EXP 42
22754: PUSH
22755: LD_EXP 43
22759: PUSH
22760: LD_EXP 44
22764: PUSH
22765: LD_EXP 45
22769: PUSH
22770: LD_EXP 46
22774: PUSH
22775: LD_EXP 48
22779: PUSH
22780: LD_EXP 49
22784: PUSH
22785: LD_EXP 50
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: IN
22803: NOT
22804: IFFALSE 22814
// driverShortName = rand ;
22806: LD_ADDR_VAR 0 4
22810: PUSH
22811: LD_STRING rand
22813: ST_TO_ADDR
// vehsFrom06 = vehsFrom06 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
22814: LD_ADDR_EXP 7
22818: PUSH
22819: LD_EXP 7
22823: PUSH
22824: LD_VAR 0 2
22828: PPUSH
22829: CALL_OW 248
22833: PUSH
22834: LD_VAR 0 2
22838: PPUSH
22839: CALL_OW 265
22843: PUSH
22844: LD_VAR 0 2
22848: PPUSH
22849: CALL_OW 262
22853: PUSH
22854: LD_VAR 0 2
22858: PPUSH
22859: CALL_OW 263
22863: PUSH
22864: LD_VAR 0 2
22868: PPUSH
22869: CALL_OW 264
22873: PUSH
22874: LD_VAR 0 4
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: PUSH
22887: EMPTY
22888: LIST
22889: ADD
22890: ST_TO_ADDR
// end ;
22891: GO 22488
22893: POP
22894: POP
// SaveVariable ( vehsFrom06 , 06_Vehicles_2 ) ;
22895: LD_EXP 7
22899: PPUSH
22900: LD_STRING 06_Vehicles_2
22902: PPUSH
22903: CALL_OW 39
// SaveVariable ( savedVsevolod , 06_VsevolodStatus_4 ) ;
22907: LD_EXP 19
22911: PPUSH
22912: LD_STRING 06_VsevolodStatus_4
22914: PPUSH
22915: CALL_OW 39
// end ; end_of_file
22919: LD_VAR 0 1
22923: RET
// on UnitDestroyed ( unit ) do begin if unit in ovsyenkoBase then
22924: LD_VAR 0 1
22928: PUSH
22929: LD_EXP 56
22933: IN
22934: IFFALSE 22952
// ovsyenkoBase = ovsyenkoBase diff unit ;
22936: LD_ADDR_EXP 56
22940: PUSH
22941: LD_EXP 56
22945: PUSH
22946: LD_VAR 0 1
22950: DIFF
22951: ST_TO_ADDR
// if unit = Burlak then
22952: LD_VAR 0 1
22956: PUSH
22957: LD_EXP 39
22961: EQUAL
22962: IFFALSE 22968
// Lose_Burlak ;
22964: CALL 21421 0 0
// if unit = Vsevolod and GetSide ( Vsevolod ) = 3 then
22968: LD_VAR 0 1
22972: PUSH
22973: LD_EXP 51
22977: EQUAL
22978: PUSH
22979: LD_EXP 51
22983: PPUSH
22984: CALL_OW 255
22988: PUSH
22989: LD_INT 3
22991: EQUAL
22992: AND
22993: IFFALSE 23003
// savedVsevolod = false ;
22995: LD_ADDR_EXP 19
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
// if unit = ovsyenko and GetSide ( ovsyenko ) = 3 then
23003: LD_VAR 0 1
23007: PUSH
23008: LD_INT 86
23010: EQUAL
23011: PUSH
23012: LD_INT 86
23014: PPUSH
23015: CALL_OW 255
23019: PUSH
23020: LD_INT 3
23022: EQUAL
23023: AND
23024: IFFALSE 23034
// lostAgainBase = true ;
23026: LD_ADDR_EXP 17
23030: PUSH
23031: LD_INT 1
23033: ST_TO_ADDR
// end ;
23034: PPOPN 1
23036: END
// on UnitDestroyed_Extra ( unit , killer_side , killer_unit ) do begin if unit = Gleb and killer_side = 3 then
23037: LD_VAR 0 1
23041: PUSH
23042: LD_EXP 42
23046: EQUAL
23047: PUSH
23048: LD_VAR 0 2
23052: PUSH
23053: LD_INT 3
23055: EQUAL
23056: AND
23057: IFFALSE 23063
// Lose_Gleb ;
23059: CALL 21436 0 0
// if unit = Vsevolod then
23063: LD_VAR 0 1
23067: PUSH
23068: LD_EXP 51
23072: EQUAL
23073: IFFALSE 23083
// savedVsevolod = false ;
23075: LD_ADDR_EXP 19
23079: PUSH
23080: LD_INT 0
23082: ST_TO_ADDR
// end ;
23083: PPOPN 3
23085: END
// on BuildingComplete ( building ) do begin end ;
23086: PPOPN 1
23088: END
// on BuildingCaptured ( building , side , human ) do begin if GetSide ( human ) = 3 and GetBType ( building ) = b_siberite_mine and not dial_SibTechsBlocker then
23089: LD_VAR 0 3
23093: PPUSH
23094: CALL_OW 255
23098: PUSH
23099: LD_INT 3
23101: EQUAL
23102: PUSH
23103: LD_VAR 0 1
23107: PPUSH
23108: CALL_OW 266
23112: PUSH
23113: LD_INT 30
23115: EQUAL
23116: AND
23117: PUSH
23118: LD_EXP 9
23122: NOT
23123: AND
23124: IFFALSE 23130
// Dial_SibTechs ;
23126: CALL 16818 0 0
// if GetSide ( human ) = 3 and GetBType ( building ) in [ b_depot , b_warehouse ] and GetResourceType ( GetBase ( building ) , mat_siberit ) > 0 and not dial_SibTechsBlocker then
23130: LD_VAR 0 3
23134: PPUSH
23135: CALL_OW 255
23139: PUSH
23140: LD_INT 3
23142: EQUAL
23143: PUSH
23144: LD_VAR 0 1
23148: PPUSH
23149: CALL_OW 266
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: IN
23164: AND
23165: PUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 274
23175: PPUSH
23176: LD_INT 3
23178: PPUSH
23179: CALL_OW 275
23183: PUSH
23184: LD_INT 0
23186: GREATER
23187: AND
23188: PUSH
23189: LD_EXP 9
23193: NOT
23194: AND
23195: IFFALSE 23201
// Dial_SibTechs ;
23197: CALL 16818 0 0
// end ;
23201: PPOPN 3
23203: END
// on Contact ( side1 , side2 ) do begin end ;
23204: PPOPN 2
23206: END
// on VehicleConstructed ( vehicle , building ) do var side , controlTowers , tmp ;
23207: LD_INT 0
23209: PPUSH
23210: PPUSH
23211: PPUSH
// begin if GetSide ( vehicle ) = 1 then
23212: LD_VAR 0 1
23216: PPUSH
23217: CALL_OW 255
23221: PUSH
23222: LD_INT 1
23224: EQUAL
23225: IFFALSE 23392
// begin controlTowers = FilterUnitsInArea ( HeadAmericanBaseArea , [ [ f_side , 1 ] , [ f_ok ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_vehicle ] ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23227: LD_ADDR_VAR 0 4
23231: PUSH
23232: LD_INT 5
23234: PPUSH
23235: LD_INT 22
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 50
23247: PUSH
23248: EMPTY
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: LD_INT 21
23256: PUSH
23257: LD_INT 3
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 21
23266: PUSH
23267: LD_INT 2
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: LD_INT 30
23284: PUSH
23285: LD_INT 36
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 34
23294: PUSH
23295: LD_INT 31
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: PPUSH
23313: CALL_OW 70
23317: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote and controlTowers then
23318: LD_VAR 0 1
23322: PPUSH
23323: CALL_OW 263
23327: PUSH
23328: LD_INT 2
23330: EQUAL
23331: PUSH
23332: LD_VAR 0 4
23336: AND
23337: IFFALSE 23392
// begin tmp = UnitsInside ( controlTowers [ 1 ] ) ;
23339: LD_ADDR_VAR 0 5
23343: PUSH
23344: LD_VAR 0 4
23348: PUSH
23349: LD_INT 1
23351: ARRAY
23352: PPUSH
23353: CALL_OW 313
23357: ST_TO_ADDR
// if tmp then
23358: LD_VAR 0 5
23362: IFFALSE 23392
// LinkVehicleToHuman ( vehicle , tmp [ rand ( 1 , tmp ) ] ) ;
23364: LD_VAR 0 1
23368: PPUSH
23369: LD_VAR 0 5
23373: PUSH
23374: LD_INT 1
23376: PPUSH
23377: LD_VAR 0 5
23381: PPUSH
23382: CALL_OW 12
23386: ARRAY
23387: PPUSH
23388: CALL_OW 53
// end ; end ; end ;
23392: PPOPN 5
23394: END
// on ResearchComplete ( research , building ) do begin if research = tech_TauField then
23395: LD_VAR 0 1
23399: PUSH
23400: LD_INT 30
23402: EQUAL
23403: IFFALSE 23409
// Dial_ResearchTauField ;
23405: CALL 20250 0 0
// if research = tech_SibEng and GetTech ( tech_TauField , 3 ) = state_researched then
23409: LD_VAR 0 1
23413: PUSH
23414: LD_INT 22
23416: EQUAL
23417: PUSH
23418: LD_INT 30
23420: PPUSH
23421: LD_INT 3
23423: PPUSH
23424: CALL_OW 321
23428: PUSH
23429: LD_INT 2
23431: EQUAL
23432: AND
23433: IFFALSE 23442
// ChangeMissionObjectives ( MOutResearch ) ;
23435: LD_STRING MOutResearch
23437: PPUSH
23438: CALL_OW 337
// if research = tech_MatPred then
23442: LD_VAR 0 1
23446: PUSH
23447: LD_INT 9
23449: EQUAL
23450: IFFALSE 23456
// Dial_ResearchMatPredictions ;
23452: CALL 16973 0 0
// end ; end_of_file
23456: PPOPN 2
23458: END
// every 0 0$1 trigger enableVsevolodCounter do
23459: LD_EXP 22
23463: IFFALSE 23483
23465: GO 23467
23467: DISABLE
// begin enable ;
23468: ENABLE
// timeToAttack = timeToAttack + 0 0$01 ;
23469: LD_ADDR_EXP 26
23473: PUSH
23474: LD_EXP 26
23478: PUSH
23479: LD_INT 35
23481: PLUS
23482: ST_TO_ADDR
// end ; end_of_file
23483: END
// every 0 0$01 do var timer ;
23484: GO 23486
23486: DISABLE
23487: LD_INT 0
23489: PPUSH
// begin timer := 5 5$30 ;
23490: LD_ADDR_VAR 0 1
23494: PUSH
23495: LD_INT 11550
23497: ST_TO_ADDR
// repeat wait ( timer ) ;
23498: LD_VAR 0 1
23502: PPUSH
23503: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23507: LD_INT 3
23509: PPUSH
23510: LD_INT 5
23512: PPUSH
23513: CALL_OW 12
23517: PPUSH
23518: LD_INT 20
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23528: LD_ADDR_EXP 27
23532: PUSH
23533: LD_EXP 27
23537: PUSH
23538: LD_INT 1
23540: PLUS
23541: ST_TO_ADDR
// until cratesSpawned = 3 ;
23542: LD_EXP 27
23546: PUSH
23547: LD_INT 3
23549: EQUAL
23550: IFFALSE 23498
// end ; end_of_file
23552: PPOPN 1
23554: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
23555: LD_INT 0
23557: PPUSH
// ar_miner := 81 ;
23558: LD_ADDR_EXP 69
23562: PUSH
23563: LD_INT 81
23565: ST_TO_ADDR
// ar_crane := 88 ;
23566: LD_ADDR_EXP 68
23570: PUSH
23571: LD_INT 88
23573: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23574: LD_ADDR_EXP 63
23578: PUSH
23579: LD_INT 89
23581: ST_TO_ADDR
// us_hack := 99 ;
23582: LD_ADDR_EXP 64
23586: PUSH
23587: LD_INT 99
23589: ST_TO_ADDR
// us_artillery := 97 ;
23590: LD_ADDR_EXP 65
23594: PUSH
23595: LD_INT 97
23597: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23598: LD_ADDR_EXP 66
23602: PUSH
23603: LD_INT 91
23605: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
23606: LD_ADDR_EXP 67
23610: PUSH
23611: LD_INT 92
23613: ST_TO_ADDR
// ru_radar := 98 ;
23614: LD_ADDR_EXP 62
23618: PUSH
23619: LD_INT 98
23621: ST_TO_ADDR
// tech_Artillery := 80 ;
23622: LD_ADDR_EXP 70
23626: PUSH
23627: LD_INT 80
23629: ST_TO_ADDR
// tech_RadMat := 81 ;
23630: LD_ADDR_EXP 71
23634: PUSH
23635: LD_INT 81
23637: ST_TO_ADDR
// tech_BasicTools := 82 ;
23638: LD_ADDR_EXP 72
23642: PUSH
23643: LD_INT 82
23645: ST_TO_ADDR
// tech_Cargo := 83 ;
23646: LD_ADDR_EXP 73
23650: PUSH
23651: LD_INT 83
23653: ST_TO_ADDR
// tech_Track := 84 ;
23654: LD_ADDR_EXP 74
23658: PUSH
23659: LD_INT 84
23661: ST_TO_ADDR
// tech_Crane := 85 ;
23662: LD_ADDR_EXP 75
23666: PUSH
23667: LD_INT 85
23669: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23670: LD_ADDR_EXP 76
23674: PUSH
23675: LD_INT 86
23677: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23678: LD_ADDR_EXP 77
23682: PUSH
23683: LD_INT 87
23685: ST_TO_ADDR
// end ;
23686: LD_VAR 0 1
23690: RET
// every 1 do
23691: GO 23693
23693: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
23694: CALL 23555 0 0
23698: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
23699: LD_VAR 0 2
23703: PUSH
23704: LD_INT 100
23706: EQUAL
23707: IFFALSE 24656
// begin if not StreamModeActive then
23709: LD_EXP 78
23713: NOT
23714: IFFALSE 23724
// StreamModeActive := true ;
23716: LD_ADDR_EXP 78
23720: PUSH
23721: LD_INT 1
23723: ST_TO_ADDR
// if p3 = 0 then
23724: LD_VAR 0 3
23728: PUSH
23729: LD_INT 0
23731: EQUAL
23732: IFFALSE 23738
// InitStreamMode ;
23734: CALL 24814 0 0
// if p3 = 1 then
23738: LD_VAR 0 3
23742: PUSH
23743: LD_INT 1
23745: EQUAL
23746: IFFALSE 23756
// sRocket := true ;
23748: LD_ADDR_EXP 83
23752: PUSH
23753: LD_INT 1
23755: ST_TO_ADDR
// if p3 = 2 then
23756: LD_VAR 0 3
23760: PUSH
23761: LD_INT 2
23763: EQUAL
23764: IFFALSE 23774
// sSpeed := true ;
23766: LD_ADDR_EXP 82
23770: PUSH
23771: LD_INT 1
23773: ST_TO_ADDR
// if p3 = 3 then
23774: LD_VAR 0 3
23778: PUSH
23779: LD_INT 3
23781: EQUAL
23782: IFFALSE 23792
// sEngine := true ;
23784: LD_ADDR_EXP 84
23788: PUSH
23789: LD_INT 1
23791: ST_TO_ADDR
// if p3 = 4 then
23792: LD_VAR 0 3
23796: PUSH
23797: LD_INT 4
23799: EQUAL
23800: IFFALSE 23810
// sSpec := true ;
23802: LD_ADDR_EXP 81
23806: PUSH
23807: LD_INT 1
23809: ST_TO_ADDR
// if p3 = 5 then
23810: LD_VAR 0 3
23814: PUSH
23815: LD_INT 5
23817: EQUAL
23818: IFFALSE 23828
// sLevel := true ;
23820: LD_ADDR_EXP 85
23824: PUSH
23825: LD_INT 1
23827: ST_TO_ADDR
// if p3 = 6 then
23828: LD_VAR 0 3
23832: PUSH
23833: LD_INT 6
23835: EQUAL
23836: IFFALSE 23846
// sArmoury := true ;
23838: LD_ADDR_EXP 86
23842: PUSH
23843: LD_INT 1
23845: ST_TO_ADDR
// if p3 = 7 then
23846: LD_VAR 0 3
23850: PUSH
23851: LD_INT 7
23853: EQUAL
23854: IFFALSE 23864
// sRadar := true ;
23856: LD_ADDR_EXP 87
23860: PUSH
23861: LD_INT 1
23863: ST_TO_ADDR
// if p3 = 8 then
23864: LD_VAR 0 3
23868: PUSH
23869: LD_INT 8
23871: EQUAL
23872: IFFALSE 23882
// sBunker := true ;
23874: LD_ADDR_EXP 88
23878: PUSH
23879: LD_INT 1
23881: ST_TO_ADDR
// if p3 = 9 then
23882: LD_VAR 0 3
23886: PUSH
23887: LD_INT 9
23889: EQUAL
23890: IFFALSE 23900
// sHack := true ;
23892: LD_ADDR_EXP 89
23896: PUSH
23897: LD_INT 1
23899: ST_TO_ADDR
// if p3 = 10 then
23900: LD_VAR 0 3
23904: PUSH
23905: LD_INT 10
23907: EQUAL
23908: IFFALSE 23918
// sFire := true ;
23910: LD_ADDR_EXP 90
23914: PUSH
23915: LD_INT 1
23917: ST_TO_ADDR
// if p3 = 11 then
23918: LD_VAR 0 3
23922: PUSH
23923: LD_INT 11
23925: EQUAL
23926: IFFALSE 23936
// sRefresh := true ;
23928: LD_ADDR_EXP 91
23932: PUSH
23933: LD_INT 1
23935: ST_TO_ADDR
// if p3 = 12 then
23936: LD_VAR 0 3
23940: PUSH
23941: LD_INT 12
23943: EQUAL
23944: IFFALSE 23954
// sExp := true ;
23946: LD_ADDR_EXP 92
23950: PUSH
23951: LD_INT 1
23953: ST_TO_ADDR
// if p3 = 13 then
23954: LD_VAR 0 3
23958: PUSH
23959: LD_INT 13
23961: EQUAL
23962: IFFALSE 23972
// sDepot := true ;
23964: LD_ADDR_EXP 93
23968: PUSH
23969: LD_INT 1
23971: ST_TO_ADDR
// if p3 = 14 then
23972: LD_VAR 0 3
23976: PUSH
23977: LD_INT 14
23979: EQUAL
23980: IFFALSE 23990
// sFlag := true ;
23982: LD_ADDR_EXP 94
23986: PUSH
23987: LD_INT 1
23989: ST_TO_ADDR
// if p3 = 15 then
23990: LD_VAR 0 3
23994: PUSH
23995: LD_INT 15
23997: EQUAL
23998: IFFALSE 24008
// sKamikadze := true ;
24000: LD_ADDR_EXP 102
24004: PUSH
24005: LD_INT 1
24007: ST_TO_ADDR
// if p3 = 16 then
24008: LD_VAR 0 3
24012: PUSH
24013: LD_INT 16
24015: EQUAL
24016: IFFALSE 24026
// sTroll := true ;
24018: LD_ADDR_EXP 103
24022: PUSH
24023: LD_INT 1
24025: ST_TO_ADDR
// if p3 = 17 then
24026: LD_VAR 0 3
24030: PUSH
24031: LD_INT 17
24033: EQUAL
24034: IFFALSE 24044
// sSlow := true ;
24036: LD_ADDR_EXP 104
24040: PUSH
24041: LD_INT 1
24043: ST_TO_ADDR
// if p3 = 18 then
24044: LD_VAR 0 3
24048: PUSH
24049: LD_INT 18
24051: EQUAL
24052: IFFALSE 24062
// sLack := true ;
24054: LD_ADDR_EXP 105
24058: PUSH
24059: LD_INT 1
24061: ST_TO_ADDR
// if p3 = 19 then
24062: LD_VAR 0 3
24066: PUSH
24067: LD_INT 19
24069: EQUAL
24070: IFFALSE 24080
// sTank := true ;
24072: LD_ADDR_EXP 107
24076: PUSH
24077: LD_INT 1
24079: ST_TO_ADDR
// if p3 = 20 then
24080: LD_VAR 0 3
24084: PUSH
24085: LD_INT 20
24087: EQUAL
24088: IFFALSE 24098
// sRemote := true ;
24090: LD_ADDR_EXP 108
24094: PUSH
24095: LD_INT 1
24097: ST_TO_ADDR
// if p3 = 21 then
24098: LD_VAR 0 3
24102: PUSH
24103: LD_INT 21
24105: EQUAL
24106: IFFALSE 24116
// sPowell := true ;
24108: LD_ADDR_EXP 109
24112: PUSH
24113: LD_INT 1
24115: ST_TO_ADDR
// if p3 = 22 then
24116: LD_VAR 0 3
24120: PUSH
24121: LD_INT 22
24123: EQUAL
24124: IFFALSE 24134
// sTeleport := true ;
24126: LD_ADDR_EXP 112
24130: PUSH
24131: LD_INT 1
24133: ST_TO_ADDR
// if p3 = 23 then
24134: LD_VAR 0 3
24138: PUSH
24139: LD_INT 23
24141: EQUAL
24142: IFFALSE 24152
// sOilTower := true ;
24144: LD_ADDR_EXP 114
24148: PUSH
24149: LD_INT 1
24151: ST_TO_ADDR
// if p3 = 24 then
24152: LD_VAR 0 3
24156: PUSH
24157: LD_INT 24
24159: EQUAL
24160: IFFALSE 24170
// sShovel := true ;
24162: LD_ADDR_EXP 115
24166: PUSH
24167: LD_INT 1
24169: ST_TO_ADDR
// if p3 = 25 then
24170: LD_VAR 0 3
24174: PUSH
24175: LD_INT 25
24177: EQUAL
24178: IFFALSE 24188
// sSheik := true ;
24180: LD_ADDR_EXP 116
24184: PUSH
24185: LD_INT 1
24187: ST_TO_ADDR
// if p3 = 26 then
24188: LD_VAR 0 3
24192: PUSH
24193: LD_INT 26
24195: EQUAL
24196: IFFALSE 24206
// sEarthquake := true ;
24198: LD_ADDR_EXP 118
24202: PUSH
24203: LD_INT 1
24205: ST_TO_ADDR
// if p3 = 27 then
24206: LD_VAR 0 3
24210: PUSH
24211: LD_INT 27
24213: EQUAL
24214: IFFALSE 24224
// sAI := true ;
24216: LD_ADDR_EXP 119
24220: PUSH
24221: LD_INT 1
24223: ST_TO_ADDR
// if p3 = 28 then
24224: LD_VAR 0 3
24228: PUSH
24229: LD_INT 28
24231: EQUAL
24232: IFFALSE 24242
// sCargo := true ;
24234: LD_ADDR_EXP 122
24238: PUSH
24239: LD_INT 1
24241: ST_TO_ADDR
// if p3 = 29 then
24242: LD_VAR 0 3
24246: PUSH
24247: LD_INT 29
24249: EQUAL
24250: IFFALSE 24260
// sDLaser := true ;
24252: LD_ADDR_EXP 123
24256: PUSH
24257: LD_INT 1
24259: ST_TO_ADDR
// if p3 = 30 then
24260: LD_VAR 0 3
24264: PUSH
24265: LD_INT 30
24267: EQUAL
24268: IFFALSE 24278
// sExchange := true ;
24270: LD_ADDR_EXP 124
24274: PUSH
24275: LD_INT 1
24277: ST_TO_ADDR
// if p3 = 31 then
24278: LD_VAR 0 3
24282: PUSH
24283: LD_INT 31
24285: EQUAL
24286: IFFALSE 24296
// sFac := true ;
24288: LD_ADDR_EXP 125
24292: PUSH
24293: LD_INT 1
24295: ST_TO_ADDR
// if p3 = 32 then
24296: LD_VAR 0 3
24300: PUSH
24301: LD_INT 32
24303: EQUAL
24304: IFFALSE 24314
// sPower := true ;
24306: LD_ADDR_EXP 126
24310: PUSH
24311: LD_INT 1
24313: ST_TO_ADDR
// if p3 = 33 then
24314: LD_VAR 0 3
24318: PUSH
24319: LD_INT 33
24321: EQUAL
24322: IFFALSE 24332
// sRandom := true ;
24324: LD_ADDR_EXP 127
24328: PUSH
24329: LD_INT 1
24331: ST_TO_ADDR
// if p3 = 34 then
24332: LD_VAR 0 3
24336: PUSH
24337: LD_INT 34
24339: EQUAL
24340: IFFALSE 24350
// sShield := true ;
24342: LD_ADDR_EXP 128
24346: PUSH
24347: LD_INT 1
24349: ST_TO_ADDR
// if p3 = 35 then
24350: LD_VAR 0 3
24354: PUSH
24355: LD_INT 35
24357: EQUAL
24358: IFFALSE 24368
// sTime := true ;
24360: LD_ADDR_EXP 129
24364: PUSH
24365: LD_INT 1
24367: ST_TO_ADDR
// if p3 = 36 then
24368: LD_VAR 0 3
24372: PUSH
24373: LD_INT 36
24375: EQUAL
24376: IFFALSE 24386
// sTools := true ;
24378: LD_ADDR_EXP 130
24382: PUSH
24383: LD_INT 1
24385: ST_TO_ADDR
// if p3 = 101 then
24386: LD_VAR 0 3
24390: PUSH
24391: LD_INT 101
24393: EQUAL
24394: IFFALSE 24404
// sSold := true ;
24396: LD_ADDR_EXP 95
24400: PUSH
24401: LD_INT 1
24403: ST_TO_ADDR
// if p3 = 102 then
24404: LD_VAR 0 3
24408: PUSH
24409: LD_INT 102
24411: EQUAL
24412: IFFALSE 24422
// sDiff := true ;
24414: LD_ADDR_EXP 96
24418: PUSH
24419: LD_INT 1
24421: ST_TO_ADDR
// if p3 = 103 then
24422: LD_VAR 0 3
24426: PUSH
24427: LD_INT 103
24429: EQUAL
24430: IFFALSE 24440
// sFog := true ;
24432: LD_ADDR_EXP 99
24436: PUSH
24437: LD_INT 1
24439: ST_TO_ADDR
// if p3 = 104 then
24440: LD_VAR 0 3
24444: PUSH
24445: LD_INT 104
24447: EQUAL
24448: IFFALSE 24458
// sReset := true ;
24450: LD_ADDR_EXP 100
24454: PUSH
24455: LD_INT 1
24457: ST_TO_ADDR
// if p3 = 105 then
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 105
24465: EQUAL
24466: IFFALSE 24476
// sSun := true ;
24468: LD_ADDR_EXP 101
24472: PUSH
24473: LD_INT 1
24475: ST_TO_ADDR
// if p3 = 106 then
24476: LD_VAR 0 3
24480: PUSH
24481: LD_INT 106
24483: EQUAL
24484: IFFALSE 24494
// sTiger := true ;
24486: LD_ADDR_EXP 97
24490: PUSH
24491: LD_INT 1
24493: ST_TO_ADDR
// if p3 = 107 then
24494: LD_VAR 0 3
24498: PUSH
24499: LD_INT 107
24501: EQUAL
24502: IFFALSE 24512
// sBomb := true ;
24504: LD_ADDR_EXP 98
24508: PUSH
24509: LD_INT 1
24511: ST_TO_ADDR
// if p3 = 108 then
24512: LD_VAR 0 3
24516: PUSH
24517: LD_INT 108
24519: EQUAL
24520: IFFALSE 24530
// sWound := true ;
24522: LD_ADDR_EXP 106
24526: PUSH
24527: LD_INT 1
24529: ST_TO_ADDR
// if p3 = 109 then
24530: LD_VAR 0 3
24534: PUSH
24535: LD_INT 109
24537: EQUAL
24538: IFFALSE 24548
// sBetray := true ;
24540: LD_ADDR_EXP 110
24544: PUSH
24545: LD_INT 1
24547: ST_TO_ADDR
// if p3 = 110 then
24548: LD_VAR 0 3
24552: PUSH
24553: LD_INT 110
24555: EQUAL
24556: IFFALSE 24566
// sContamin := true ;
24558: LD_ADDR_EXP 111
24562: PUSH
24563: LD_INT 1
24565: ST_TO_ADDR
// if p3 = 111 then
24566: LD_VAR 0 3
24570: PUSH
24571: LD_INT 111
24573: EQUAL
24574: IFFALSE 24584
// sOil := true ;
24576: LD_ADDR_EXP 113
24580: PUSH
24581: LD_INT 1
24583: ST_TO_ADDR
// if p3 = 112 then
24584: LD_VAR 0 3
24588: PUSH
24589: LD_INT 112
24591: EQUAL
24592: IFFALSE 24602
// sStu := true ;
24594: LD_ADDR_EXP 117
24598: PUSH
24599: LD_INT 1
24601: ST_TO_ADDR
// if p3 = 113 then
24602: LD_VAR 0 3
24606: PUSH
24607: LD_INT 113
24609: EQUAL
24610: IFFALSE 24620
// sBazooka := true ;
24612: LD_ADDR_EXP 120
24616: PUSH
24617: LD_INT 1
24619: ST_TO_ADDR
// if p3 = 114 then
24620: LD_VAR 0 3
24624: PUSH
24625: LD_INT 114
24627: EQUAL
24628: IFFALSE 24638
// sMortar := true ;
24630: LD_ADDR_EXP 121
24634: PUSH
24635: LD_INT 1
24637: ST_TO_ADDR
// if p3 = 115 then
24638: LD_VAR 0 3
24642: PUSH
24643: LD_INT 115
24645: EQUAL
24646: IFFALSE 24656
// sRanger := true ;
24648: LD_ADDR_EXP 131
24652: PUSH
24653: LD_INT 1
24655: ST_TO_ADDR
// end ; if p2 = 101 then
24656: LD_VAR 0 2
24660: PUSH
24661: LD_INT 101
24663: EQUAL
24664: IFFALSE 24792
// begin case p3 of 1 :
24666: LD_VAR 0 3
24670: PUSH
24671: LD_INT 1
24673: DOUBLE
24674: EQUAL
24675: IFTRUE 24679
24677: GO 24686
24679: POP
// hHackUnlimitedResources ; 2 :
24680: CALL 35827 0 0
24684: GO 24792
24686: LD_INT 2
24688: DOUBLE
24689: EQUAL
24690: IFTRUE 24694
24692: GO 24701
24694: POP
// hHackSetLevel10 ; 3 :
24695: CALL 35960 0 0
24699: GO 24792
24701: LD_INT 3
24703: DOUBLE
24704: EQUAL
24705: IFTRUE 24709
24707: GO 24716
24709: POP
// hHackSetLevel10YourUnits ; 4 :
24710: CALL 36045 0 0
24714: GO 24792
24716: LD_INT 4
24718: DOUBLE
24719: EQUAL
24720: IFTRUE 24724
24722: GO 24731
24724: POP
// hHackInvincible ; 5 :
24725: CALL 36493 0 0
24729: GO 24792
24731: LD_INT 5
24733: DOUBLE
24734: EQUAL
24735: IFTRUE 24739
24737: GO 24746
24739: POP
// hHackInvisible ; 6 :
24740: CALL 36604 0 0
24744: GO 24792
24746: LD_INT 6
24748: DOUBLE
24749: EQUAL
24750: IFTRUE 24754
24752: GO 24761
24754: POP
// hHackChangeYourSide ; 7 :
24755: CALL 36661 0 0
24759: GO 24792
24761: LD_INT 7
24763: DOUBLE
24764: EQUAL
24765: IFTRUE 24769
24767: GO 24776
24769: POP
// hHackChangeUnitSide ; 8 :
24770: CALL 36703 0 0
24774: GO 24792
24776: LD_INT 8
24778: DOUBLE
24779: EQUAL
24780: IFTRUE 24784
24782: GO 24791
24784: POP
// hHackFog ; end ;
24785: CALL 36804 0 0
24789: GO 24792
24791: POP
// end ; end ;
24792: PPOPN 6
24794: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
24795: GO 24797
24797: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
24798: LD_STRING initStreamRollete();
24800: PPUSH
24801: CALL_OW 559
// InitStreamMode ;
24805: CALL 24814 0 0
// DefineStreamItems ( ) ;
24809: CALL 25254 0 0
// end ;
24813: END
// function InitStreamMode ; begin
24814: LD_INT 0
24816: PPUSH
// streamModeActive := false ;
24817: LD_ADDR_EXP 78
24821: PUSH
24822: LD_INT 0
24824: ST_TO_ADDR
// normalCounter := 36 ;
24825: LD_ADDR_EXP 79
24829: PUSH
24830: LD_INT 36
24832: ST_TO_ADDR
// hardcoreCounter := 16 ;
24833: LD_ADDR_EXP 80
24837: PUSH
24838: LD_INT 16
24840: ST_TO_ADDR
// sRocket := false ;
24841: LD_ADDR_EXP 83
24845: PUSH
24846: LD_INT 0
24848: ST_TO_ADDR
// sSpeed := false ;
24849: LD_ADDR_EXP 82
24853: PUSH
24854: LD_INT 0
24856: ST_TO_ADDR
// sEngine := false ;
24857: LD_ADDR_EXP 84
24861: PUSH
24862: LD_INT 0
24864: ST_TO_ADDR
// sSpec := false ;
24865: LD_ADDR_EXP 81
24869: PUSH
24870: LD_INT 0
24872: ST_TO_ADDR
// sLevel := false ;
24873: LD_ADDR_EXP 85
24877: PUSH
24878: LD_INT 0
24880: ST_TO_ADDR
// sArmoury := false ;
24881: LD_ADDR_EXP 86
24885: PUSH
24886: LD_INT 0
24888: ST_TO_ADDR
// sRadar := false ;
24889: LD_ADDR_EXP 87
24893: PUSH
24894: LD_INT 0
24896: ST_TO_ADDR
// sBunker := false ;
24897: LD_ADDR_EXP 88
24901: PUSH
24902: LD_INT 0
24904: ST_TO_ADDR
// sHack := false ;
24905: LD_ADDR_EXP 89
24909: PUSH
24910: LD_INT 0
24912: ST_TO_ADDR
// sFire := false ;
24913: LD_ADDR_EXP 90
24917: PUSH
24918: LD_INT 0
24920: ST_TO_ADDR
// sRefresh := false ;
24921: LD_ADDR_EXP 91
24925: PUSH
24926: LD_INT 0
24928: ST_TO_ADDR
// sExp := false ;
24929: LD_ADDR_EXP 92
24933: PUSH
24934: LD_INT 0
24936: ST_TO_ADDR
// sDepot := false ;
24937: LD_ADDR_EXP 93
24941: PUSH
24942: LD_INT 0
24944: ST_TO_ADDR
// sFlag := false ;
24945: LD_ADDR_EXP 94
24949: PUSH
24950: LD_INT 0
24952: ST_TO_ADDR
// sKamikadze := false ;
24953: LD_ADDR_EXP 102
24957: PUSH
24958: LD_INT 0
24960: ST_TO_ADDR
// sTroll := false ;
24961: LD_ADDR_EXP 103
24965: PUSH
24966: LD_INT 0
24968: ST_TO_ADDR
// sSlow := false ;
24969: LD_ADDR_EXP 104
24973: PUSH
24974: LD_INT 0
24976: ST_TO_ADDR
// sLack := false ;
24977: LD_ADDR_EXP 105
24981: PUSH
24982: LD_INT 0
24984: ST_TO_ADDR
// sTank := false ;
24985: LD_ADDR_EXP 107
24989: PUSH
24990: LD_INT 0
24992: ST_TO_ADDR
// sRemote := false ;
24993: LD_ADDR_EXP 108
24997: PUSH
24998: LD_INT 0
25000: ST_TO_ADDR
// sPowell := false ;
25001: LD_ADDR_EXP 109
25005: PUSH
25006: LD_INT 0
25008: ST_TO_ADDR
// sTeleport := false ;
25009: LD_ADDR_EXP 112
25013: PUSH
25014: LD_INT 0
25016: ST_TO_ADDR
// sOilTower := false ;
25017: LD_ADDR_EXP 114
25021: PUSH
25022: LD_INT 0
25024: ST_TO_ADDR
// sShovel := false ;
25025: LD_ADDR_EXP 115
25029: PUSH
25030: LD_INT 0
25032: ST_TO_ADDR
// sSheik := false ;
25033: LD_ADDR_EXP 116
25037: PUSH
25038: LD_INT 0
25040: ST_TO_ADDR
// sEarthquake := false ;
25041: LD_ADDR_EXP 118
25045: PUSH
25046: LD_INT 0
25048: ST_TO_ADDR
// sAI := false ;
25049: LD_ADDR_EXP 119
25053: PUSH
25054: LD_INT 0
25056: ST_TO_ADDR
// sCargo := false ;
25057: LD_ADDR_EXP 122
25061: PUSH
25062: LD_INT 0
25064: ST_TO_ADDR
// sDLaser := false ;
25065: LD_ADDR_EXP 123
25069: PUSH
25070: LD_INT 0
25072: ST_TO_ADDR
// sExchange := false ;
25073: LD_ADDR_EXP 124
25077: PUSH
25078: LD_INT 0
25080: ST_TO_ADDR
// sFac := false ;
25081: LD_ADDR_EXP 125
25085: PUSH
25086: LD_INT 0
25088: ST_TO_ADDR
// sPower := false ;
25089: LD_ADDR_EXP 126
25093: PUSH
25094: LD_INT 0
25096: ST_TO_ADDR
// sRandom := false ;
25097: LD_ADDR_EXP 127
25101: PUSH
25102: LD_INT 0
25104: ST_TO_ADDR
// sShield := false ;
25105: LD_ADDR_EXP 128
25109: PUSH
25110: LD_INT 0
25112: ST_TO_ADDR
// sTime := false ;
25113: LD_ADDR_EXP 129
25117: PUSH
25118: LD_INT 0
25120: ST_TO_ADDR
// sTools := false ;
25121: LD_ADDR_EXP 130
25125: PUSH
25126: LD_INT 0
25128: ST_TO_ADDR
// sSold := false ;
25129: LD_ADDR_EXP 95
25133: PUSH
25134: LD_INT 0
25136: ST_TO_ADDR
// sDiff := false ;
25137: LD_ADDR_EXP 96
25141: PUSH
25142: LD_INT 0
25144: ST_TO_ADDR
// sFog := false ;
25145: LD_ADDR_EXP 99
25149: PUSH
25150: LD_INT 0
25152: ST_TO_ADDR
// sReset := false ;
25153: LD_ADDR_EXP 100
25157: PUSH
25158: LD_INT 0
25160: ST_TO_ADDR
// sSun := false ;
25161: LD_ADDR_EXP 101
25165: PUSH
25166: LD_INT 0
25168: ST_TO_ADDR
// sTiger := false ;
25169: LD_ADDR_EXP 97
25173: PUSH
25174: LD_INT 0
25176: ST_TO_ADDR
// sBomb := false ;
25177: LD_ADDR_EXP 98
25181: PUSH
25182: LD_INT 0
25184: ST_TO_ADDR
// sWound := false ;
25185: LD_ADDR_EXP 106
25189: PUSH
25190: LD_INT 0
25192: ST_TO_ADDR
// sBetray := false ;
25193: LD_ADDR_EXP 110
25197: PUSH
25198: LD_INT 0
25200: ST_TO_ADDR
// sContamin := false ;
25201: LD_ADDR_EXP 111
25205: PUSH
25206: LD_INT 0
25208: ST_TO_ADDR
// sOil := false ;
25209: LD_ADDR_EXP 113
25213: PUSH
25214: LD_INT 0
25216: ST_TO_ADDR
// sStu := false ;
25217: LD_ADDR_EXP 117
25221: PUSH
25222: LD_INT 0
25224: ST_TO_ADDR
// sBazooka := false ;
25225: LD_ADDR_EXP 120
25229: PUSH
25230: LD_INT 0
25232: ST_TO_ADDR
// sMortar := false ;
25233: LD_ADDR_EXP 121
25237: PUSH
25238: LD_INT 0
25240: ST_TO_ADDR
// sRanger := false ;
25241: LD_ADDR_EXP 131
25245: PUSH
25246: LD_INT 0
25248: ST_TO_ADDR
// end ;
25249: LD_VAR 0 1
25253: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
25254: LD_INT 0
25256: PPUSH
25257: PPUSH
25258: PPUSH
25259: PPUSH
25260: PPUSH
// result := [ ] ;
25261: LD_ADDR_VAR 0 1
25265: PUSH
25266: EMPTY
25267: ST_TO_ADDR
// if campaign_id = 1 then
25268: LD_OWVAR 69
25272: PUSH
25273: LD_INT 1
25275: EQUAL
25276: IFFALSE 28214
// begin case mission_number of 1 :
25278: LD_OWVAR 70
25282: PUSH
25283: LD_INT 1
25285: DOUBLE
25286: EQUAL
25287: IFTRUE 25291
25289: GO 25355
25291: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
25292: LD_ADDR_VAR 0 1
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 4
25302: PUSH
25303: LD_INT 11
25305: PUSH
25306: LD_INT 12
25308: PUSH
25309: LD_INT 15
25311: PUSH
25312: LD_INT 16
25314: PUSH
25315: LD_INT 22
25317: PUSH
25318: LD_INT 23
25320: PUSH
25321: LD_INT 26
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 101
25337: PUSH
25338: LD_INT 102
25340: PUSH
25341: LD_INT 106
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: ST_TO_ADDR
25353: GO 28212
25355: LD_INT 2
25357: DOUBLE
25358: EQUAL
25359: IFTRUE 25363
25361: GO 25435
25363: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
25364: LD_ADDR_VAR 0 1
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: LD_INT 4
25374: PUSH
25375: LD_INT 11
25377: PUSH
25378: LD_INT 12
25380: PUSH
25381: LD_INT 15
25383: PUSH
25384: LD_INT 16
25386: PUSH
25387: LD_INT 22
25389: PUSH
25390: LD_INT 23
25392: PUSH
25393: LD_INT 26
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 101
25409: PUSH
25410: LD_INT 102
25412: PUSH
25413: LD_INT 105
25415: PUSH
25416: LD_INT 106
25418: PUSH
25419: LD_INT 108
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: ST_TO_ADDR
25433: GO 28212
25435: LD_INT 3
25437: DOUBLE
25438: EQUAL
25439: IFTRUE 25443
25441: GO 25519
25443: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
25444: LD_ADDR_VAR 0 1
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: LD_INT 4
25454: PUSH
25455: LD_INT 5
25457: PUSH
25458: LD_INT 11
25460: PUSH
25461: LD_INT 12
25463: PUSH
25464: LD_INT 15
25466: PUSH
25467: LD_INT 16
25469: PUSH
25470: LD_INT 22
25472: PUSH
25473: LD_INT 26
25475: PUSH
25476: LD_INT 36
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 101
25493: PUSH
25494: LD_INT 102
25496: PUSH
25497: LD_INT 105
25499: PUSH
25500: LD_INT 106
25502: PUSH
25503: LD_INT 108
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: ST_TO_ADDR
25517: GO 28212
25519: LD_INT 4
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25527
25525: GO 25611
25527: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
25528: LD_ADDR_VAR 0 1
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: LD_INT 4
25538: PUSH
25539: LD_INT 5
25541: PUSH
25542: LD_INT 8
25544: PUSH
25545: LD_INT 11
25547: PUSH
25548: LD_INT 12
25550: PUSH
25551: LD_INT 15
25553: PUSH
25554: LD_INT 16
25556: PUSH
25557: LD_INT 22
25559: PUSH
25560: LD_INT 23
25562: PUSH
25563: LD_INT 26
25565: PUSH
25566: LD_INT 36
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 101
25585: PUSH
25586: LD_INT 102
25588: PUSH
25589: LD_INT 105
25591: PUSH
25592: LD_INT 106
25594: PUSH
25595: LD_INT 108
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: ST_TO_ADDR
25609: GO 28212
25611: LD_INT 5
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25719
25619: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
25620: LD_ADDR_VAR 0 1
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 4
25630: PUSH
25631: LD_INT 5
25633: PUSH
25634: LD_INT 6
25636: PUSH
25637: LD_INT 8
25639: PUSH
25640: LD_INT 11
25642: PUSH
25643: LD_INT 12
25645: PUSH
25646: LD_INT 15
25648: PUSH
25649: LD_INT 16
25651: PUSH
25652: LD_INT 22
25654: PUSH
25655: LD_INT 23
25657: PUSH
25658: LD_INT 25
25660: PUSH
25661: LD_INT 26
25663: PUSH
25664: LD_INT 36
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 101
25685: PUSH
25686: LD_INT 102
25688: PUSH
25689: LD_INT 105
25691: PUSH
25692: LD_INT 106
25694: PUSH
25695: LD_INT 108
25697: PUSH
25698: LD_INT 109
25700: PUSH
25701: LD_INT 112
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: ST_TO_ADDR
25717: GO 28212
25719: LD_INT 6
25721: DOUBLE
25722: EQUAL
25723: IFTRUE 25727
25725: GO 25847
25727: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
25728: LD_ADDR_VAR 0 1
25732: PUSH
25733: LD_INT 2
25735: PUSH
25736: LD_INT 4
25738: PUSH
25739: LD_INT 5
25741: PUSH
25742: LD_INT 6
25744: PUSH
25745: LD_INT 8
25747: PUSH
25748: LD_INT 11
25750: PUSH
25751: LD_INT 12
25753: PUSH
25754: LD_INT 15
25756: PUSH
25757: LD_INT 16
25759: PUSH
25760: LD_INT 20
25762: PUSH
25763: LD_INT 21
25765: PUSH
25766: LD_INT 22
25768: PUSH
25769: LD_INT 23
25771: PUSH
25772: LD_INT 25
25774: PUSH
25775: LD_INT 26
25777: PUSH
25778: LD_INT 30
25780: PUSH
25781: LD_INT 31
25783: PUSH
25784: LD_INT 32
25786: PUSH
25787: LD_INT 36
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 101
25813: PUSH
25814: LD_INT 102
25816: PUSH
25817: LD_INT 105
25819: PUSH
25820: LD_INT 106
25822: PUSH
25823: LD_INT 108
25825: PUSH
25826: LD_INT 109
25828: PUSH
25829: LD_INT 112
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: ST_TO_ADDR
25845: GO 28212
25847: LD_INT 7
25849: DOUBLE
25850: EQUAL
25851: IFTRUE 25855
25853: GO 25955
25855: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
25856: LD_ADDR_VAR 0 1
25860: PUSH
25861: LD_INT 2
25863: PUSH
25864: LD_INT 4
25866: PUSH
25867: LD_INT 5
25869: PUSH
25870: LD_INT 7
25872: PUSH
25873: LD_INT 11
25875: PUSH
25876: LD_INT 12
25878: PUSH
25879: LD_INT 15
25881: PUSH
25882: LD_INT 16
25884: PUSH
25885: LD_INT 20
25887: PUSH
25888: LD_INT 21
25890: PUSH
25891: LD_INT 22
25893: PUSH
25894: LD_INT 23
25896: PUSH
25897: LD_INT 25
25899: PUSH
25900: LD_INT 26
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 101
25921: PUSH
25922: LD_INT 102
25924: PUSH
25925: LD_INT 103
25927: PUSH
25928: LD_INT 105
25930: PUSH
25931: LD_INT 106
25933: PUSH
25934: LD_INT 108
25936: PUSH
25937: LD_INT 112
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: ST_TO_ADDR
25953: GO 28212
25955: LD_INT 8
25957: DOUBLE
25958: EQUAL
25959: IFTRUE 25963
25961: GO 26091
25963: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25964: LD_ADDR_VAR 0 1
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: LD_INT 4
25974: PUSH
25975: LD_INT 5
25977: PUSH
25978: LD_INT 6
25980: PUSH
25981: LD_INT 7
25983: PUSH
25984: LD_INT 8
25986: PUSH
25987: LD_INT 11
25989: PUSH
25990: LD_INT 12
25992: PUSH
25993: LD_INT 15
25995: PUSH
25996: LD_INT 16
25998: PUSH
25999: LD_INT 20
26001: PUSH
26002: LD_INT 21
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_INT 23
26010: PUSH
26011: LD_INT 25
26013: PUSH
26014: LD_INT 26
26016: PUSH
26017: LD_INT 30
26019: PUSH
26020: LD_INT 31
26022: PUSH
26023: LD_INT 32
26025: PUSH
26026: LD_INT 36
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 101
26053: PUSH
26054: LD_INT 102
26056: PUSH
26057: LD_INT 103
26059: PUSH
26060: LD_INT 105
26062: PUSH
26063: LD_INT 106
26065: PUSH
26066: LD_INT 108
26068: PUSH
26069: LD_INT 109
26071: PUSH
26072: LD_INT 112
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: ST_TO_ADDR
26089: GO 28212
26091: LD_INT 9
26093: DOUBLE
26094: EQUAL
26095: IFTRUE 26099
26097: GO 26235
26099: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
26100: LD_ADDR_VAR 0 1
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: LD_INT 4
26110: PUSH
26111: LD_INT 5
26113: PUSH
26114: LD_INT 6
26116: PUSH
26117: LD_INT 7
26119: PUSH
26120: LD_INT 8
26122: PUSH
26123: LD_INT 11
26125: PUSH
26126: LD_INT 12
26128: PUSH
26129: LD_INT 15
26131: PUSH
26132: LD_INT 16
26134: PUSH
26135: LD_INT 20
26137: PUSH
26138: LD_INT 21
26140: PUSH
26141: LD_INT 22
26143: PUSH
26144: LD_INT 23
26146: PUSH
26147: LD_INT 25
26149: PUSH
26150: LD_INT 26
26152: PUSH
26153: LD_INT 28
26155: PUSH
26156: LD_INT 30
26158: PUSH
26159: LD_INT 31
26161: PUSH
26162: LD_INT 32
26164: PUSH
26165: LD_INT 36
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 101
26193: PUSH
26194: LD_INT 102
26196: PUSH
26197: LD_INT 103
26199: PUSH
26200: LD_INT 105
26202: PUSH
26203: LD_INT 106
26205: PUSH
26206: LD_INT 108
26208: PUSH
26209: LD_INT 109
26211: PUSH
26212: LD_INT 112
26214: PUSH
26215: LD_INT 114
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: ST_TO_ADDR
26233: GO 28212
26235: LD_INT 10
26237: DOUBLE
26238: EQUAL
26239: IFTRUE 26243
26241: GO 26427
26243: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
26244: LD_ADDR_VAR 0 1
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: LD_INT 4
26254: PUSH
26255: LD_INT 5
26257: PUSH
26258: LD_INT 6
26260: PUSH
26261: LD_INT 7
26263: PUSH
26264: LD_INT 8
26266: PUSH
26267: LD_INT 9
26269: PUSH
26270: LD_INT 10
26272: PUSH
26273: LD_INT 11
26275: PUSH
26276: LD_INT 12
26278: PUSH
26279: LD_INT 13
26281: PUSH
26282: LD_INT 14
26284: PUSH
26285: LD_INT 15
26287: PUSH
26288: LD_INT 16
26290: PUSH
26291: LD_INT 17
26293: PUSH
26294: LD_INT 18
26296: PUSH
26297: LD_INT 19
26299: PUSH
26300: LD_INT 20
26302: PUSH
26303: LD_INT 21
26305: PUSH
26306: LD_INT 22
26308: PUSH
26309: LD_INT 23
26311: PUSH
26312: LD_INT 24
26314: PUSH
26315: LD_INT 25
26317: PUSH
26318: LD_INT 26
26320: PUSH
26321: LD_INT 28
26323: PUSH
26324: LD_INT 30
26326: PUSH
26327: LD_INT 31
26329: PUSH
26330: LD_INT 32
26332: PUSH
26333: LD_INT 36
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 101
26369: PUSH
26370: LD_INT 102
26372: PUSH
26373: LD_INT 103
26375: PUSH
26376: LD_INT 104
26378: PUSH
26379: LD_INT 105
26381: PUSH
26382: LD_INT 106
26384: PUSH
26385: LD_INT 107
26387: PUSH
26388: LD_INT 108
26390: PUSH
26391: LD_INT 109
26393: PUSH
26394: LD_INT 110
26396: PUSH
26397: LD_INT 111
26399: PUSH
26400: LD_INT 112
26402: PUSH
26403: LD_INT 114
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: ST_TO_ADDR
26425: GO 28212
26427: LD_INT 11
26429: DOUBLE
26430: EQUAL
26431: IFTRUE 26435
26433: GO 26627
26435: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
26436: LD_ADDR_VAR 0 1
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 3
26446: PUSH
26447: LD_INT 4
26449: PUSH
26450: LD_INT 5
26452: PUSH
26453: LD_INT 6
26455: PUSH
26456: LD_INT 7
26458: PUSH
26459: LD_INT 8
26461: PUSH
26462: LD_INT 9
26464: PUSH
26465: LD_INT 10
26467: PUSH
26468: LD_INT 11
26470: PUSH
26471: LD_INT 12
26473: PUSH
26474: LD_INT 13
26476: PUSH
26477: LD_INT 14
26479: PUSH
26480: LD_INT 15
26482: PUSH
26483: LD_INT 16
26485: PUSH
26486: LD_INT 17
26488: PUSH
26489: LD_INT 18
26491: PUSH
26492: LD_INT 19
26494: PUSH
26495: LD_INT 20
26497: PUSH
26498: LD_INT 21
26500: PUSH
26501: LD_INT 22
26503: PUSH
26504: LD_INT 23
26506: PUSH
26507: LD_INT 24
26509: PUSH
26510: LD_INT 25
26512: PUSH
26513: LD_INT 26
26515: PUSH
26516: LD_INT 28
26518: PUSH
26519: LD_INT 30
26521: PUSH
26522: LD_INT 31
26524: PUSH
26525: LD_INT 32
26527: PUSH
26528: LD_INT 34
26530: PUSH
26531: LD_INT 36
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 101
26569: PUSH
26570: LD_INT 102
26572: PUSH
26573: LD_INT 103
26575: PUSH
26576: LD_INT 104
26578: PUSH
26579: LD_INT 105
26581: PUSH
26582: LD_INT 106
26584: PUSH
26585: LD_INT 107
26587: PUSH
26588: LD_INT 108
26590: PUSH
26591: LD_INT 109
26593: PUSH
26594: LD_INT 110
26596: PUSH
26597: LD_INT 111
26599: PUSH
26600: LD_INT 112
26602: PUSH
26603: LD_INT 114
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: ST_TO_ADDR
26625: GO 28212
26627: LD_INT 12
26629: DOUBLE
26630: EQUAL
26631: IFTRUE 26635
26633: GO 26843
26635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
26636: LD_ADDR_VAR 0 1
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: LD_INT 2
26646: PUSH
26647: LD_INT 3
26649: PUSH
26650: LD_INT 4
26652: PUSH
26653: LD_INT 5
26655: PUSH
26656: LD_INT 6
26658: PUSH
26659: LD_INT 7
26661: PUSH
26662: LD_INT 8
26664: PUSH
26665: LD_INT 9
26667: PUSH
26668: LD_INT 10
26670: PUSH
26671: LD_INT 11
26673: PUSH
26674: LD_INT 12
26676: PUSH
26677: LD_INT 13
26679: PUSH
26680: LD_INT 14
26682: PUSH
26683: LD_INT 15
26685: PUSH
26686: LD_INT 16
26688: PUSH
26689: LD_INT 17
26691: PUSH
26692: LD_INT 18
26694: PUSH
26695: LD_INT 19
26697: PUSH
26698: LD_INT 20
26700: PUSH
26701: LD_INT 21
26703: PUSH
26704: LD_INT 22
26706: PUSH
26707: LD_INT 23
26709: PUSH
26710: LD_INT 24
26712: PUSH
26713: LD_INT 25
26715: PUSH
26716: LD_INT 26
26718: PUSH
26719: LD_INT 27
26721: PUSH
26722: LD_INT 28
26724: PUSH
26725: LD_INT 30
26727: PUSH
26728: LD_INT 31
26730: PUSH
26731: LD_INT 32
26733: PUSH
26734: LD_INT 33
26736: PUSH
26737: LD_INT 34
26739: PUSH
26740: LD_INT 36
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 101
26781: PUSH
26782: LD_INT 102
26784: PUSH
26785: LD_INT 103
26787: PUSH
26788: LD_INT 104
26790: PUSH
26791: LD_INT 105
26793: PUSH
26794: LD_INT 106
26796: PUSH
26797: LD_INT 107
26799: PUSH
26800: LD_INT 108
26802: PUSH
26803: LD_INT 109
26805: PUSH
26806: LD_INT 110
26808: PUSH
26809: LD_INT 111
26811: PUSH
26812: LD_INT 112
26814: PUSH
26815: LD_INT 113
26817: PUSH
26818: LD_INT 114
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: ST_TO_ADDR
26841: GO 28212
26843: LD_INT 13
26845: DOUBLE
26846: EQUAL
26847: IFTRUE 26851
26849: GO 27047
26851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
26852: LD_ADDR_VAR 0 1
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: LD_INT 2
26862: PUSH
26863: LD_INT 3
26865: PUSH
26866: LD_INT 4
26868: PUSH
26869: LD_INT 5
26871: PUSH
26872: LD_INT 8
26874: PUSH
26875: LD_INT 9
26877: PUSH
26878: LD_INT 10
26880: PUSH
26881: LD_INT 11
26883: PUSH
26884: LD_INT 12
26886: PUSH
26887: LD_INT 14
26889: PUSH
26890: LD_INT 15
26892: PUSH
26893: LD_INT 16
26895: PUSH
26896: LD_INT 17
26898: PUSH
26899: LD_INT 18
26901: PUSH
26902: LD_INT 19
26904: PUSH
26905: LD_INT 20
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 22
26913: PUSH
26914: LD_INT 23
26916: PUSH
26917: LD_INT 24
26919: PUSH
26920: LD_INT 25
26922: PUSH
26923: LD_INT 26
26925: PUSH
26926: LD_INT 27
26928: PUSH
26929: LD_INT 28
26931: PUSH
26932: LD_INT 30
26934: PUSH
26935: LD_INT 31
26937: PUSH
26938: LD_INT 32
26940: PUSH
26941: LD_INT 33
26943: PUSH
26944: LD_INT 34
26946: PUSH
26947: LD_INT 36
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 101
26985: PUSH
26986: LD_INT 102
26988: PUSH
26989: LD_INT 103
26991: PUSH
26992: LD_INT 104
26994: PUSH
26995: LD_INT 105
26997: PUSH
26998: LD_INT 106
27000: PUSH
27001: LD_INT 107
27003: PUSH
27004: LD_INT 108
27006: PUSH
27007: LD_INT 109
27009: PUSH
27010: LD_INT 110
27012: PUSH
27013: LD_INT 111
27015: PUSH
27016: LD_INT 112
27018: PUSH
27019: LD_INT 113
27021: PUSH
27022: LD_INT 114
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: ST_TO_ADDR
27045: GO 28212
27047: LD_INT 14
27049: DOUBLE
27050: EQUAL
27051: IFTRUE 27055
27053: GO 27267
27055: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
27056: LD_ADDR_VAR 0 1
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: LD_INT 2
27066: PUSH
27067: LD_INT 3
27069: PUSH
27070: LD_INT 4
27072: PUSH
27073: LD_INT 5
27075: PUSH
27076: LD_INT 6
27078: PUSH
27079: LD_INT 7
27081: PUSH
27082: LD_INT 8
27084: PUSH
27085: LD_INT 9
27087: PUSH
27088: LD_INT 10
27090: PUSH
27091: LD_INT 11
27093: PUSH
27094: LD_INT 12
27096: PUSH
27097: LD_INT 13
27099: PUSH
27100: LD_INT 14
27102: PUSH
27103: LD_INT 15
27105: PUSH
27106: LD_INT 16
27108: PUSH
27109: LD_INT 17
27111: PUSH
27112: LD_INT 18
27114: PUSH
27115: LD_INT 19
27117: PUSH
27118: LD_INT 20
27120: PUSH
27121: LD_INT 21
27123: PUSH
27124: LD_INT 22
27126: PUSH
27127: LD_INT 23
27129: PUSH
27130: LD_INT 24
27132: PUSH
27133: LD_INT 25
27135: PUSH
27136: LD_INT 26
27138: PUSH
27139: LD_INT 27
27141: PUSH
27142: LD_INT 28
27144: PUSH
27145: LD_INT 29
27147: PUSH
27148: LD_INT 30
27150: PUSH
27151: LD_INT 31
27153: PUSH
27154: LD_INT 32
27156: PUSH
27157: LD_INT 33
27159: PUSH
27160: LD_INT 34
27162: PUSH
27163: LD_INT 36
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 101
27205: PUSH
27206: LD_INT 102
27208: PUSH
27209: LD_INT 103
27211: PUSH
27212: LD_INT 104
27214: PUSH
27215: LD_INT 105
27217: PUSH
27218: LD_INT 106
27220: PUSH
27221: LD_INT 107
27223: PUSH
27224: LD_INT 108
27226: PUSH
27227: LD_INT 109
27229: PUSH
27230: LD_INT 110
27232: PUSH
27233: LD_INT 111
27235: PUSH
27236: LD_INT 112
27238: PUSH
27239: LD_INT 113
27241: PUSH
27242: LD_INT 114
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: ST_TO_ADDR
27265: GO 28212
27267: LD_INT 15
27269: DOUBLE
27270: EQUAL
27271: IFTRUE 27275
27273: GO 27487
27275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
27276: LD_ADDR_VAR 0 1
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: LD_INT 2
27286: PUSH
27287: LD_INT 3
27289: PUSH
27290: LD_INT 4
27292: PUSH
27293: LD_INT 5
27295: PUSH
27296: LD_INT 6
27298: PUSH
27299: LD_INT 7
27301: PUSH
27302: LD_INT 8
27304: PUSH
27305: LD_INT 9
27307: PUSH
27308: LD_INT 10
27310: PUSH
27311: LD_INT 11
27313: PUSH
27314: LD_INT 12
27316: PUSH
27317: LD_INT 13
27319: PUSH
27320: LD_INT 14
27322: PUSH
27323: LD_INT 15
27325: PUSH
27326: LD_INT 16
27328: PUSH
27329: LD_INT 17
27331: PUSH
27332: LD_INT 18
27334: PUSH
27335: LD_INT 19
27337: PUSH
27338: LD_INT 20
27340: PUSH
27341: LD_INT 21
27343: PUSH
27344: LD_INT 22
27346: PUSH
27347: LD_INT 23
27349: PUSH
27350: LD_INT 24
27352: PUSH
27353: LD_INT 25
27355: PUSH
27356: LD_INT 26
27358: PUSH
27359: LD_INT 27
27361: PUSH
27362: LD_INT 28
27364: PUSH
27365: LD_INT 29
27367: PUSH
27368: LD_INT 30
27370: PUSH
27371: LD_INT 31
27373: PUSH
27374: LD_INT 32
27376: PUSH
27377: LD_INT 33
27379: PUSH
27380: LD_INT 34
27382: PUSH
27383: LD_INT 36
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 101
27425: PUSH
27426: LD_INT 102
27428: PUSH
27429: LD_INT 103
27431: PUSH
27432: LD_INT 104
27434: PUSH
27435: LD_INT 105
27437: PUSH
27438: LD_INT 106
27440: PUSH
27441: LD_INT 107
27443: PUSH
27444: LD_INT 108
27446: PUSH
27447: LD_INT 109
27449: PUSH
27450: LD_INT 110
27452: PUSH
27453: LD_INT 111
27455: PUSH
27456: LD_INT 112
27458: PUSH
27459: LD_INT 113
27461: PUSH
27462: LD_INT 114
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: ST_TO_ADDR
27485: GO 28212
27487: LD_INT 16
27489: DOUBLE
27490: EQUAL
27491: IFTRUE 27495
27493: GO 27619
27495: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
27496: LD_ADDR_VAR 0 1
27500: PUSH
27501: LD_INT 2
27503: PUSH
27504: LD_INT 4
27506: PUSH
27507: LD_INT 5
27509: PUSH
27510: LD_INT 7
27512: PUSH
27513: LD_INT 11
27515: PUSH
27516: LD_INT 12
27518: PUSH
27519: LD_INT 15
27521: PUSH
27522: LD_INT 16
27524: PUSH
27525: LD_INT 20
27527: PUSH
27528: LD_INT 21
27530: PUSH
27531: LD_INT 22
27533: PUSH
27534: LD_INT 23
27536: PUSH
27537: LD_INT 25
27539: PUSH
27540: LD_INT 26
27542: PUSH
27543: LD_INT 30
27545: PUSH
27546: LD_INT 31
27548: PUSH
27549: LD_INT 32
27551: PUSH
27552: LD_INT 33
27554: PUSH
27555: LD_INT 34
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 101
27581: PUSH
27582: LD_INT 102
27584: PUSH
27585: LD_INT 103
27587: PUSH
27588: LD_INT 106
27590: PUSH
27591: LD_INT 108
27593: PUSH
27594: LD_INT 112
27596: PUSH
27597: LD_INT 113
27599: PUSH
27600: LD_INT 114
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: ST_TO_ADDR
27617: GO 28212
27619: LD_INT 17
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27627
27625: GO 27839
27627: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
27628: LD_ADDR_VAR 0 1
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: LD_INT 3
27641: PUSH
27642: LD_INT 4
27644: PUSH
27645: LD_INT 5
27647: PUSH
27648: LD_INT 6
27650: PUSH
27651: LD_INT 7
27653: PUSH
27654: LD_INT 8
27656: PUSH
27657: LD_INT 9
27659: PUSH
27660: LD_INT 10
27662: PUSH
27663: LD_INT 11
27665: PUSH
27666: LD_INT 12
27668: PUSH
27669: LD_INT 13
27671: PUSH
27672: LD_INT 14
27674: PUSH
27675: LD_INT 15
27677: PUSH
27678: LD_INT 16
27680: PUSH
27681: LD_INT 17
27683: PUSH
27684: LD_INT 18
27686: PUSH
27687: LD_INT 19
27689: PUSH
27690: LD_INT 20
27692: PUSH
27693: LD_INT 21
27695: PUSH
27696: LD_INT 22
27698: PUSH
27699: LD_INT 23
27701: PUSH
27702: LD_INT 24
27704: PUSH
27705: LD_INT 25
27707: PUSH
27708: LD_INT 26
27710: PUSH
27711: LD_INT 27
27713: PUSH
27714: LD_INT 28
27716: PUSH
27717: LD_INT 29
27719: PUSH
27720: LD_INT 30
27722: PUSH
27723: LD_INT 31
27725: PUSH
27726: LD_INT 32
27728: PUSH
27729: LD_INT 33
27731: PUSH
27732: LD_INT 34
27734: PUSH
27735: LD_INT 36
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 101
27777: PUSH
27778: LD_INT 102
27780: PUSH
27781: LD_INT 103
27783: PUSH
27784: LD_INT 104
27786: PUSH
27787: LD_INT 105
27789: PUSH
27790: LD_INT 106
27792: PUSH
27793: LD_INT 107
27795: PUSH
27796: LD_INT 108
27798: PUSH
27799: LD_INT 109
27801: PUSH
27802: LD_INT 110
27804: PUSH
27805: LD_INT 111
27807: PUSH
27808: LD_INT 112
27810: PUSH
27811: LD_INT 113
27813: PUSH
27814: LD_INT 114
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: ST_TO_ADDR
27837: GO 28212
27839: LD_INT 18
27841: DOUBLE
27842: EQUAL
27843: IFTRUE 27847
27845: GO 27983
27847: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
27848: LD_ADDR_VAR 0 1
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 4
27858: PUSH
27859: LD_INT 5
27861: PUSH
27862: LD_INT 7
27864: PUSH
27865: LD_INT 11
27867: PUSH
27868: LD_INT 12
27870: PUSH
27871: LD_INT 15
27873: PUSH
27874: LD_INT 16
27876: PUSH
27877: LD_INT 20
27879: PUSH
27880: LD_INT 21
27882: PUSH
27883: LD_INT 22
27885: PUSH
27886: LD_INT 23
27888: PUSH
27889: LD_INT 25
27891: PUSH
27892: LD_INT 26
27894: PUSH
27895: LD_INT 30
27897: PUSH
27898: LD_INT 31
27900: PUSH
27901: LD_INT 32
27903: PUSH
27904: LD_INT 33
27906: PUSH
27907: LD_INT 34
27909: PUSH
27910: LD_INT 35
27912: PUSH
27913: LD_INT 36
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 101
27941: PUSH
27942: LD_INT 102
27944: PUSH
27945: LD_INT 103
27947: PUSH
27948: LD_INT 106
27950: PUSH
27951: LD_INT 108
27953: PUSH
27954: LD_INT 112
27956: PUSH
27957: LD_INT 113
27959: PUSH
27960: LD_INT 114
27962: PUSH
27963: LD_INT 115
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: ST_TO_ADDR
27981: GO 28212
27983: LD_INT 19
27985: DOUBLE
27986: EQUAL
27987: IFTRUE 27991
27989: GO 28211
27991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27992: LD_ADDR_VAR 0 1
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: LD_INT 2
28002: PUSH
28003: LD_INT 3
28005: PUSH
28006: LD_INT 4
28008: PUSH
28009: LD_INT 5
28011: PUSH
28012: LD_INT 6
28014: PUSH
28015: LD_INT 7
28017: PUSH
28018: LD_INT 8
28020: PUSH
28021: LD_INT 9
28023: PUSH
28024: LD_INT 10
28026: PUSH
28027: LD_INT 11
28029: PUSH
28030: LD_INT 12
28032: PUSH
28033: LD_INT 13
28035: PUSH
28036: LD_INT 14
28038: PUSH
28039: LD_INT 15
28041: PUSH
28042: LD_INT 16
28044: PUSH
28045: LD_INT 17
28047: PUSH
28048: LD_INT 18
28050: PUSH
28051: LD_INT 19
28053: PUSH
28054: LD_INT 20
28056: PUSH
28057: LD_INT 21
28059: PUSH
28060: LD_INT 22
28062: PUSH
28063: LD_INT 23
28065: PUSH
28066: LD_INT 24
28068: PUSH
28069: LD_INT 25
28071: PUSH
28072: LD_INT 26
28074: PUSH
28075: LD_INT 27
28077: PUSH
28078: LD_INT 28
28080: PUSH
28081: LD_INT 29
28083: PUSH
28084: LD_INT 30
28086: PUSH
28087: LD_INT 31
28089: PUSH
28090: LD_INT 32
28092: PUSH
28093: LD_INT 33
28095: PUSH
28096: LD_INT 34
28098: PUSH
28099: LD_INT 35
28101: PUSH
28102: LD_INT 36
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 101
28145: PUSH
28146: LD_INT 102
28148: PUSH
28149: LD_INT 103
28151: PUSH
28152: LD_INT 104
28154: PUSH
28155: LD_INT 105
28157: PUSH
28158: LD_INT 106
28160: PUSH
28161: LD_INT 107
28163: PUSH
28164: LD_INT 108
28166: PUSH
28167: LD_INT 109
28169: PUSH
28170: LD_INT 110
28172: PUSH
28173: LD_INT 111
28175: PUSH
28176: LD_INT 112
28178: PUSH
28179: LD_INT 113
28181: PUSH
28182: LD_INT 114
28184: PUSH
28185: LD_INT 115
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: ST_TO_ADDR
28209: GO 28212
28211: POP
// end else
28212: GO 28431
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
28214: LD_ADDR_VAR 0 1
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: LD_INT 3
28227: PUSH
28228: LD_INT 4
28230: PUSH
28231: LD_INT 5
28233: PUSH
28234: LD_INT 6
28236: PUSH
28237: LD_INT 7
28239: PUSH
28240: LD_INT 8
28242: PUSH
28243: LD_INT 9
28245: PUSH
28246: LD_INT 10
28248: PUSH
28249: LD_INT 11
28251: PUSH
28252: LD_INT 12
28254: PUSH
28255: LD_INT 13
28257: PUSH
28258: LD_INT 14
28260: PUSH
28261: LD_INT 15
28263: PUSH
28264: LD_INT 16
28266: PUSH
28267: LD_INT 17
28269: PUSH
28270: LD_INT 18
28272: PUSH
28273: LD_INT 19
28275: PUSH
28276: LD_INT 20
28278: PUSH
28279: LD_INT 21
28281: PUSH
28282: LD_INT 22
28284: PUSH
28285: LD_INT 23
28287: PUSH
28288: LD_INT 24
28290: PUSH
28291: LD_INT 25
28293: PUSH
28294: LD_INT 26
28296: PUSH
28297: LD_INT 27
28299: PUSH
28300: LD_INT 28
28302: PUSH
28303: LD_INT 29
28305: PUSH
28306: LD_INT 30
28308: PUSH
28309: LD_INT 31
28311: PUSH
28312: LD_INT 32
28314: PUSH
28315: LD_INT 33
28317: PUSH
28318: LD_INT 34
28320: PUSH
28321: LD_INT 35
28323: PUSH
28324: LD_INT 36
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 101
28367: PUSH
28368: LD_INT 102
28370: PUSH
28371: LD_INT 103
28373: PUSH
28374: LD_INT 104
28376: PUSH
28377: LD_INT 105
28379: PUSH
28380: LD_INT 106
28382: PUSH
28383: LD_INT 107
28385: PUSH
28386: LD_INT 108
28388: PUSH
28389: LD_INT 109
28391: PUSH
28392: LD_INT 110
28394: PUSH
28395: LD_INT 111
28397: PUSH
28398: LD_INT 112
28400: PUSH
28401: LD_INT 113
28403: PUSH
28404: LD_INT 114
28406: PUSH
28407: LD_INT 115
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: ST_TO_ADDR
// if result then
28431: LD_VAR 0 1
28435: IFFALSE 28724
// begin normal :=  ;
28437: LD_ADDR_VAR 0 3
28441: PUSH
28442: LD_STRING 
28444: ST_TO_ADDR
// hardcore :=  ;
28445: LD_ADDR_VAR 0 4
28449: PUSH
28450: LD_STRING 
28452: ST_TO_ADDR
// for i = 1 to normalCounter do
28453: LD_ADDR_VAR 0 5
28457: PUSH
28458: DOUBLE
28459: LD_INT 1
28461: DEC
28462: ST_TO_ADDR
28463: LD_EXP 79
28467: PUSH
28468: FOR_TO
28469: IFFALSE 28570
// begin tmp := 0 ;
28471: LD_ADDR_VAR 0 2
28475: PUSH
28476: LD_STRING 0
28478: ST_TO_ADDR
// if result [ 1 ] then
28479: LD_VAR 0 1
28483: PUSH
28484: LD_INT 1
28486: ARRAY
28487: IFFALSE 28552
// if result [ 1 ] [ 1 ] = i then
28489: LD_VAR 0 1
28493: PUSH
28494: LD_INT 1
28496: ARRAY
28497: PUSH
28498: LD_INT 1
28500: ARRAY
28501: PUSH
28502: LD_VAR 0 5
28506: EQUAL
28507: IFFALSE 28552
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
28509: LD_ADDR_VAR 0 1
28513: PUSH
28514: LD_VAR 0 1
28518: PPUSH
28519: LD_INT 1
28521: PPUSH
28522: LD_VAR 0 1
28526: PUSH
28527: LD_INT 1
28529: ARRAY
28530: PPUSH
28531: LD_INT 1
28533: PPUSH
28534: CALL_OW 3
28538: PPUSH
28539: CALL_OW 1
28543: ST_TO_ADDR
// tmp := 1 ;
28544: LD_ADDR_VAR 0 2
28548: PUSH
28549: LD_STRING 1
28551: ST_TO_ADDR
// end ; normal := normal & tmp ;
28552: LD_ADDR_VAR 0 3
28556: PUSH
28557: LD_VAR 0 3
28561: PUSH
28562: LD_VAR 0 2
28566: STR
28567: ST_TO_ADDR
// end ;
28568: GO 28468
28570: POP
28571: POP
// for i = 1 to hardcoreCounter do
28572: LD_ADDR_VAR 0 5
28576: PUSH
28577: DOUBLE
28578: LD_INT 1
28580: DEC
28581: ST_TO_ADDR
28582: LD_EXP 80
28586: PUSH
28587: FOR_TO
28588: IFFALSE 28693
// begin tmp := 0 ;
28590: LD_ADDR_VAR 0 2
28594: PUSH
28595: LD_STRING 0
28597: ST_TO_ADDR
// if result [ 2 ] then
28598: LD_VAR 0 1
28602: PUSH
28603: LD_INT 2
28605: ARRAY
28606: IFFALSE 28675
// if result [ 2 ] [ 1 ] = 100 + i then
28608: LD_VAR 0 1
28612: PUSH
28613: LD_INT 2
28615: ARRAY
28616: PUSH
28617: LD_INT 1
28619: ARRAY
28620: PUSH
28621: LD_INT 100
28623: PUSH
28624: LD_VAR 0 5
28628: PLUS
28629: EQUAL
28630: IFFALSE 28675
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
28632: LD_ADDR_VAR 0 1
28636: PUSH
28637: LD_VAR 0 1
28641: PPUSH
28642: LD_INT 2
28644: PPUSH
28645: LD_VAR 0 1
28649: PUSH
28650: LD_INT 2
28652: ARRAY
28653: PPUSH
28654: LD_INT 1
28656: PPUSH
28657: CALL_OW 3
28661: PPUSH
28662: CALL_OW 1
28666: ST_TO_ADDR
// tmp := 1 ;
28667: LD_ADDR_VAR 0 2
28671: PUSH
28672: LD_STRING 1
28674: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
28675: LD_ADDR_VAR 0 4
28679: PUSH
28680: LD_VAR 0 4
28684: PUSH
28685: LD_VAR 0 2
28689: STR
28690: ST_TO_ADDR
// end ;
28691: GO 28587
28693: POP
28694: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
28695: LD_STRING getStreamItemsFromMission("
28697: PUSH
28698: LD_VAR 0 3
28702: STR
28703: PUSH
28704: LD_STRING ","
28706: STR
28707: PUSH
28708: LD_VAR 0 4
28712: STR
28713: PUSH
28714: LD_STRING ")
28716: STR
28717: PPUSH
28718: CALL_OW 559
// end else
28722: GO 28731
// ToLua ( getStreamItemsFromMission("","") ) ;
28724: LD_STRING getStreamItemsFromMission("","")
28726: PPUSH
28727: CALL_OW 559
// end ;
28731: LD_VAR 0 1
28735: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28736: LD_EXP 78
28740: PUSH
28741: LD_EXP 83
28745: AND
28746: IFFALSE 28870
28748: GO 28750
28750: DISABLE
28751: LD_INT 0
28753: PPUSH
28754: PPUSH
// begin enable ;
28755: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28756: LD_ADDR_VAR 0 2
28760: PUSH
28761: LD_INT 22
28763: PUSH
28764: LD_OWVAR 2
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: LD_INT 34
28778: PUSH
28779: LD_INT 7
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 34
28788: PUSH
28789: LD_INT 45
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 34
28798: PUSH
28799: LD_INT 28
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 34
28808: PUSH
28809: LD_INT 47
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PPUSH
28827: CALL_OW 69
28831: ST_TO_ADDR
// if not tmp then
28832: LD_VAR 0 2
28836: NOT
28837: IFFALSE 28841
// exit ;
28839: GO 28870
// for i in tmp do
28841: LD_ADDR_VAR 0 1
28845: PUSH
28846: LD_VAR 0 2
28850: PUSH
28851: FOR_IN
28852: IFFALSE 28868
// begin SetLives ( i , 0 ) ;
28854: LD_VAR 0 1
28858: PPUSH
28859: LD_INT 0
28861: PPUSH
28862: CALL_OW 234
// end ;
28866: GO 28851
28868: POP
28869: POP
// end ;
28870: PPOPN 2
28872: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28873: LD_EXP 78
28877: PUSH
28878: LD_EXP 84
28882: AND
28883: IFFALSE 28967
28885: GO 28887
28887: DISABLE
28888: LD_INT 0
28890: PPUSH
28891: PPUSH
// begin enable ;
28892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28893: LD_ADDR_VAR 0 2
28897: PUSH
28898: LD_INT 22
28900: PUSH
28901: LD_OWVAR 2
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 32
28912: PUSH
28913: LD_INT 3
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PPUSH
28924: CALL_OW 69
28928: ST_TO_ADDR
// if not tmp then
28929: LD_VAR 0 2
28933: NOT
28934: IFFALSE 28938
// exit ;
28936: GO 28967
// for i in tmp do
28938: LD_ADDR_VAR 0 1
28942: PUSH
28943: LD_VAR 0 2
28947: PUSH
28948: FOR_IN
28949: IFFALSE 28965
// begin SetLives ( i , 0 ) ;
28951: LD_VAR 0 1
28955: PPUSH
28956: LD_INT 0
28958: PPUSH
28959: CALL_OW 234
// end ;
28963: GO 28948
28965: POP
28966: POP
// end ;
28967: PPOPN 2
28969: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28970: LD_EXP 78
28974: PUSH
28975: LD_EXP 81
28979: AND
28980: IFFALSE 29073
28982: GO 28984
28984: DISABLE
28985: LD_INT 0
28987: PPUSH
// begin enable ;
28988: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28989: LD_ADDR_VAR 0 1
28993: PUSH
28994: LD_INT 22
28996: PUSH
28997: LD_OWVAR 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: LD_INT 25
29011: PUSH
29012: LD_INT 5
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 25
29021: PUSH
29022: LD_INT 9
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 25
29031: PUSH
29032: LD_INT 8
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PPUSH
29049: CALL_OW 69
29053: PUSH
29054: FOR_IN
29055: IFFALSE 29071
// begin SetClass ( i , 1 ) ;
29057: LD_VAR 0 1
29061: PPUSH
29062: LD_INT 1
29064: PPUSH
29065: CALL_OW 336
// end ;
29069: GO 29054
29071: POP
29072: POP
// end ;
29073: PPOPN 1
29075: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
29076: LD_EXP 78
29080: PUSH
29081: LD_EXP 82
29085: AND
29086: PUSH
29087: LD_OWVAR 65
29091: PUSH
29092: LD_INT 7
29094: LESS
29095: AND
29096: IFFALSE 29110
29098: GO 29100
29100: DISABLE
// begin enable ;
29101: ENABLE
// game_speed := 7 ;
29102: LD_ADDR_OWVAR 65
29106: PUSH
29107: LD_INT 7
29109: ST_TO_ADDR
// end ;
29110: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
29111: LD_EXP 78
29115: PUSH
29116: LD_EXP 85
29120: AND
29121: IFFALSE 29323
29123: GO 29125
29125: DISABLE
29126: LD_INT 0
29128: PPUSH
29129: PPUSH
29130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29131: LD_ADDR_VAR 0 3
29135: PUSH
29136: LD_INT 81
29138: PUSH
29139: LD_OWVAR 2
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 21
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PPUSH
29162: CALL_OW 69
29166: ST_TO_ADDR
// if not tmp then
29167: LD_VAR 0 3
29171: NOT
29172: IFFALSE 29176
// exit ;
29174: GO 29323
// if tmp > 5 then
29176: LD_VAR 0 3
29180: PUSH
29181: LD_INT 5
29183: GREATER
29184: IFFALSE 29196
// k := 5 else
29186: LD_ADDR_VAR 0 2
29190: PUSH
29191: LD_INT 5
29193: ST_TO_ADDR
29194: GO 29206
// k := tmp ;
29196: LD_ADDR_VAR 0 2
29200: PUSH
29201: LD_VAR 0 3
29205: ST_TO_ADDR
// for i := 1 to k do
29206: LD_ADDR_VAR 0 1
29210: PUSH
29211: DOUBLE
29212: LD_INT 1
29214: DEC
29215: ST_TO_ADDR
29216: LD_VAR 0 2
29220: PUSH
29221: FOR_TO
29222: IFFALSE 29321
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
29224: LD_VAR 0 3
29228: PUSH
29229: LD_VAR 0 1
29233: ARRAY
29234: PPUSH
29235: LD_VAR 0 1
29239: PUSH
29240: LD_INT 4
29242: MOD
29243: PUSH
29244: LD_INT 1
29246: PLUS
29247: PPUSH
29248: CALL_OW 259
29252: PUSH
29253: LD_INT 10
29255: LESS
29256: IFFALSE 29319
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
29258: LD_VAR 0 3
29262: PUSH
29263: LD_VAR 0 1
29267: ARRAY
29268: PPUSH
29269: LD_VAR 0 1
29273: PUSH
29274: LD_INT 4
29276: MOD
29277: PUSH
29278: LD_INT 1
29280: PLUS
29281: PPUSH
29282: LD_VAR 0 3
29286: PUSH
29287: LD_VAR 0 1
29291: ARRAY
29292: PPUSH
29293: LD_VAR 0 1
29297: PUSH
29298: LD_INT 4
29300: MOD
29301: PUSH
29302: LD_INT 1
29304: PLUS
29305: PPUSH
29306: CALL_OW 259
29310: PUSH
29311: LD_INT 1
29313: PLUS
29314: PPUSH
29315: CALL_OW 237
29319: GO 29221
29321: POP
29322: POP
// end ;
29323: PPOPN 3
29325: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
29326: LD_EXP 78
29330: PUSH
29331: LD_EXP 86
29335: AND
29336: IFFALSE 29356
29338: GO 29340
29340: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
29341: LD_INT 4
29343: PPUSH
29344: LD_OWVAR 2
29348: PPUSH
29349: LD_INT 0
29351: PPUSH
29352: CALL_OW 324
29356: END
// every 0 0$1 trigger StreamModeActive and sShovel do
29357: LD_EXP 78
29361: PUSH
29362: LD_EXP 115
29366: AND
29367: IFFALSE 29387
29369: GO 29371
29371: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
29372: LD_INT 19
29374: PPUSH
29375: LD_OWVAR 2
29379: PPUSH
29380: LD_INT 0
29382: PPUSH
29383: CALL_OW 324
29387: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
29388: LD_EXP 78
29392: PUSH
29393: LD_EXP 87
29397: AND
29398: IFFALSE 29500
29400: GO 29402
29402: DISABLE
29403: LD_INT 0
29405: PPUSH
29406: PPUSH
// begin enable ;
29407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
29408: LD_ADDR_VAR 0 2
29412: PUSH
29413: LD_INT 22
29415: PUSH
29416: LD_OWVAR 2
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 2
29427: PUSH
29428: LD_INT 34
29430: PUSH
29431: LD_INT 11
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 34
29440: PUSH
29441: LD_INT 30
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PPUSH
29457: CALL_OW 69
29461: ST_TO_ADDR
// if not tmp then
29462: LD_VAR 0 2
29466: NOT
29467: IFFALSE 29471
// exit ;
29469: GO 29500
// for i in tmp do
29471: LD_ADDR_VAR 0 1
29475: PUSH
29476: LD_VAR 0 2
29480: PUSH
29481: FOR_IN
29482: IFFALSE 29498
// begin SetLives ( i , 0 ) ;
29484: LD_VAR 0 1
29488: PPUSH
29489: LD_INT 0
29491: PPUSH
29492: CALL_OW 234
// end ;
29496: GO 29481
29498: POP
29499: POP
// end ;
29500: PPOPN 2
29502: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29503: LD_EXP 78
29507: PUSH
29508: LD_EXP 88
29512: AND
29513: IFFALSE 29533
29515: GO 29517
29517: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29518: LD_INT 32
29520: PPUSH
29521: LD_OWVAR 2
29525: PPUSH
29526: LD_INT 0
29528: PPUSH
29529: CALL_OW 324
29533: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
29534: LD_EXP 78
29538: PUSH
29539: LD_EXP 89
29543: AND
29544: IFFALSE 29725
29546: GO 29548
29548: DISABLE
29549: LD_INT 0
29551: PPUSH
29552: PPUSH
29553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
29554: LD_ADDR_VAR 0 2
29558: PUSH
29559: LD_INT 22
29561: PUSH
29562: LD_OWVAR 2
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 33
29573: PUSH
29574: LD_INT 3
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PPUSH
29585: CALL_OW 69
29589: ST_TO_ADDR
// if not tmp then
29590: LD_VAR 0 2
29594: NOT
29595: IFFALSE 29599
// exit ;
29597: GO 29725
// side := 0 ;
29599: LD_ADDR_VAR 0 3
29603: PUSH
29604: LD_INT 0
29606: ST_TO_ADDR
// for i := 1 to 8 do
29607: LD_ADDR_VAR 0 1
29611: PUSH
29612: DOUBLE
29613: LD_INT 1
29615: DEC
29616: ST_TO_ADDR
29617: LD_INT 8
29619: PUSH
29620: FOR_TO
29621: IFFALSE 29669
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
29623: LD_OWVAR 2
29627: PUSH
29628: LD_VAR 0 1
29632: NONEQUAL
29633: PUSH
29634: LD_OWVAR 2
29638: PPUSH
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 81
29648: PUSH
29649: LD_INT 2
29651: EQUAL
29652: AND
29653: IFFALSE 29667
// begin side := i ;
29655: LD_ADDR_VAR 0 3
29659: PUSH
29660: LD_VAR 0 1
29664: ST_TO_ADDR
// break ;
29665: GO 29669
// end ;
29667: GO 29620
29669: POP
29670: POP
// if not side then
29671: LD_VAR 0 3
29675: NOT
29676: IFFALSE 29680
// exit ;
29678: GO 29725
// for i := 1 to tmp do
29680: LD_ADDR_VAR 0 1
29684: PUSH
29685: DOUBLE
29686: LD_INT 1
29688: DEC
29689: ST_TO_ADDR
29690: LD_VAR 0 2
29694: PUSH
29695: FOR_TO
29696: IFFALSE 29723
// if Prob ( 60 ) then
29698: LD_INT 60
29700: PPUSH
29701: CALL_OW 13
29705: IFFALSE 29721
// SetSide ( i , side ) ;
29707: LD_VAR 0 1
29711: PPUSH
29712: LD_VAR 0 3
29716: PPUSH
29717: CALL_OW 235
29721: GO 29695
29723: POP
29724: POP
// end ;
29725: PPOPN 3
29727: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29728: LD_EXP 78
29732: PUSH
29733: LD_EXP 91
29737: AND
29738: IFFALSE 29857
29740: GO 29742
29742: DISABLE
29743: LD_INT 0
29745: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29746: LD_ADDR_VAR 0 1
29750: PUSH
29751: LD_INT 22
29753: PUSH
29754: LD_OWVAR 2
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 21
29765: PUSH
29766: LD_INT 1
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: LD_INT 23
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: PPUSH
29795: CALL_OW 69
29799: PUSH
29800: FOR_IN
29801: IFFALSE 29855
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29803: LD_VAR 0 1
29807: PPUSH
29808: CALL_OW 257
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: LD_INT 2
29818: PUSH
29819: LD_INT 3
29821: PUSH
29822: LD_INT 4
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: IN
29831: IFFALSE 29853
// SetClass ( un , rand ( 1 , 4 ) ) ;
29833: LD_VAR 0 1
29837: PPUSH
29838: LD_INT 1
29840: PPUSH
29841: LD_INT 4
29843: PPUSH
29844: CALL_OW 12
29848: PPUSH
29849: CALL_OW 336
29853: GO 29800
29855: POP
29856: POP
// end ;
29857: PPOPN 1
29859: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29860: LD_EXP 78
29864: PUSH
29865: LD_EXP 90
29869: AND
29870: IFFALSE 29949
29872: GO 29874
29874: DISABLE
29875: LD_INT 0
29877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29878: LD_ADDR_VAR 0 1
29882: PUSH
29883: LD_INT 22
29885: PUSH
29886: LD_OWVAR 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 21
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PPUSH
29909: CALL_OW 69
29913: ST_TO_ADDR
// if not tmp then
29914: LD_VAR 0 1
29918: NOT
29919: IFFALSE 29923
// exit ;
29921: GO 29949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29923: LD_VAR 0 1
29927: PUSH
29928: LD_INT 1
29930: PPUSH
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL_OW 12
29940: ARRAY
29941: PPUSH
29942: LD_INT 100
29944: PPUSH
29945: CALL_OW 234
// end ;
29949: PPOPN 1
29951: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29952: LD_EXP 78
29956: PUSH
29957: LD_EXP 92
29961: AND
29962: IFFALSE 30060
29964: GO 29966
29966: DISABLE
29967: LD_INT 0
29969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29970: LD_ADDR_VAR 0 1
29974: PUSH
29975: LD_INT 22
29977: PUSH
29978: LD_OWVAR 2
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 21
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PPUSH
30001: CALL_OW 69
30005: ST_TO_ADDR
// if not tmp then
30006: LD_VAR 0 1
30010: NOT
30011: IFFALSE 30015
// exit ;
30013: GO 30060
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
30015: LD_VAR 0 1
30019: PUSH
30020: LD_INT 1
30022: PPUSH
30023: LD_VAR 0 1
30027: PPUSH
30028: CALL_OW 12
30032: ARRAY
30033: PPUSH
30034: LD_INT 1
30036: PPUSH
30037: LD_INT 4
30039: PPUSH
30040: CALL_OW 12
30044: PPUSH
30045: LD_INT 3000
30047: PPUSH
30048: LD_INT 9000
30050: PPUSH
30051: CALL_OW 12
30055: PPUSH
30056: CALL_OW 492
// end ;
30060: PPOPN 1
30062: END
// every 0 0$1 trigger StreamModeActive and sDepot do
30063: LD_EXP 78
30067: PUSH
30068: LD_EXP 93
30072: AND
30073: IFFALSE 30093
30075: GO 30077
30077: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
30078: LD_INT 1
30080: PPUSH
30081: LD_OWVAR 2
30085: PPUSH
30086: LD_INT 0
30088: PPUSH
30089: CALL_OW 324
30093: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
30094: LD_EXP 78
30098: PUSH
30099: LD_EXP 94
30103: AND
30104: IFFALSE 30187
30106: GO 30108
30108: DISABLE
30109: LD_INT 0
30111: PPUSH
30112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
30113: LD_ADDR_VAR 0 2
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_OWVAR 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 21
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PPUSH
30144: CALL_OW 69
30148: ST_TO_ADDR
// if not tmp then
30149: LD_VAR 0 2
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30187
// for i in tmp do
30158: LD_ADDR_VAR 0 1
30162: PUSH
30163: LD_VAR 0 2
30167: PUSH
30168: FOR_IN
30169: IFFALSE 30185
// SetBLevel ( i , 10 ) ;
30171: LD_VAR 0 1
30175: PPUSH
30176: LD_INT 10
30178: PPUSH
30179: CALL_OW 241
30183: GO 30168
30185: POP
30186: POP
// end ;
30187: PPOPN 2
30189: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
30190: LD_EXP 78
30194: PUSH
30195: LD_EXP 95
30199: AND
30200: IFFALSE 30311
30202: GO 30204
30204: DISABLE
30205: LD_INT 0
30207: PPUSH
30208: PPUSH
30209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30210: LD_ADDR_VAR 0 3
30214: PUSH
30215: LD_INT 22
30217: PUSH
30218: LD_OWVAR 2
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 25
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PPUSH
30241: CALL_OW 69
30245: ST_TO_ADDR
// if not tmp then
30246: LD_VAR 0 3
30250: NOT
30251: IFFALSE 30255
// exit ;
30253: GO 30311
// un := tmp [ rand ( 1 , tmp ) ] ;
30255: LD_ADDR_VAR 0 2
30259: PUSH
30260: LD_VAR 0 3
30264: PUSH
30265: LD_INT 1
30267: PPUSH
30268: LD_VAR 0 3
30272: PPUSH
30273: CALL_OW 12
30277: ARRAY
30278: ST_TO_ADDR
// if Crawls ( un ) then
30279: LD_VAR 0 2
30283: PPUSH
30284: CALL_OW 318
30288: IFFALSE 30299
// ComWalk ( un ) ;
30290: LD_VAR 0 2
30294: PPUSH
30295: CALL_OW 138
// SetClass ( un , class_sniper ) ;
30299: LD_VAR 0 2
30303: PPUSH
30304: LD_INT 5
30306: PPUSH
30307: CALL_OW 336
// end ;
30311: PPOPN 3
30313: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
30314: LD_EXP 78
30318: PUSH
30319: LD_EXP 96
30323: AND
30324: PUSH
30325: LD_OWVAR 67
30329: PUSH
30330: LD_INT 3
30332: LESS
30333: AND
30334: IFFALSE 30353
30336: GO 30338
30338: DISABLE
// Difficulty := Difficulty + 1 ;
30339: LD_ADDR_OWVAR 67
30343: PUSH
30344: LD_OWVAR 67
30348: PUSH
30349: LD_INT 1
30351: PLUS
30352: ST_TO_ADDR
30353: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
30354: LD_EXP 78
30358: PUSH
30359: LD_EXP 97
30363: AND
30364: IFFALSE 30467
30366: GO 30368
30368: DISABLE
30369: LD_INT 0
30371: PPUSH
// begin for i := 1 to 5 do
30372: LD_ADDR_VAR 0 1
30376: PUSH
30377: DOUBLE
30378: LD_INT 1
30380: DEC
30381: ST_TO_ADDR
30382: LD_INT 5
30384: PUSH
30385: FOR_TO
30386: IFFALSE 30465
// begin uc_nation := nation_nature ;
30388: LD_ADDR_OWVAR 21
30392: PUSH
30393: LD_INT 0
30395: ST_TO_ADDR
// uc_side := 0 ;
30396: LD_ADDR_OWVAR 20
30400: PUSH
30401: LD_INT 0
30403: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30404: LD_ADDR_OWVAR 29
30408: PUSH
30409: LD_INT 12
30411: PUSH
30412: LD_INT 12
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: ST_TO_ADDR
// hc_agressivity := 20 ;
30419: LD_ADDR_OWVAR 35
30423: PUSH
30424: LD_INT 20
30426: ST_TO_ADDR
// hc_class := class_tiger ;
30427: LD_ADDR_OWVAR 28
30431: PUSH
30432: LD_INT 14
30434: ST_TO_ADDR
// hc_gallery :=  ;
30435: LD_ADDR_OWVAR 33
30439: PUSH
30440: LD_STRING 
30442: ST_TO_ADDR
// hc_name :=  ;
30443: LD_ADDR_OWVAR 26
30447: PUSH
30448: LD_STRING 
30450: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30451: CALL_OW 44
30455: PPUSH
30456: LD_INT 0
30458: PPUSH
30459: CALL_OW 51
// end ;
30463: GO 30385
30465: POP
30466: POP
// end ;
30467: PPOPN 1
30469: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30470: LD_EXP 78
30474: PUSH
30475: LD_EXP 98
30479: AND
30480: IFFALSE 30489
30482: GO 30484
30484: DISABLE
// StreamSibBomb ;
30485: CALL 30490 0 0
30489: END
// export function StreamSibBomb ; var i , x , y ; begin
30490: LD_INT 0
30492: PPUSH
30493: PPUSH
30494: PPUSH
30495: PPUSH
// result := false ;
30496: LD_ADDR_VAR 0 1
30500: PUSH
30501: LD_INT 0
30503: ST_TO_ADDR
// for i := 1 to 16 do
30504: LD_ADDR_VAR 0 2
30508: PUSH
30509: DOUBLE
30510: LD_INT 1
30512: DEC
30513: ST_TO_ADDR
30514: LD_INT 16
30516: PUSH
30517: FOR_TO
30518: IFFALSE 30717
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30520: LD_ADDR_VAR 0 3
30524: PUSH
30525: LD_INT 10
30527: PUSH
30528: LD_INT 20
30530: PUSH
30531: LD_INT 30
30533: PUSH
30534: LD_INT 40
30536: PUSH
30537: LD_INT 50
30539: PUSH
30540: LD_INT 60
30542: PUSH
30543: LD_INT 70
30545: PUSH
30546: LD_INT 80
30548: PUSH
30549: LD_INT 90
30551: PUSH
30552: LD_INT 100
30554: PUSH
30555: LD_INT 110
30557: PUSH
30558: LD_INT 120
30560: PUSH
30561: LD_INT 130
30563: PUSH
30564: LD_INT 140
30566: PUSH
30567: LD_INT 150
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: PPUSH
30590: LD_INT 15
30592: PPUSH
30593: CALL_OW 12
30597: ARRAY
30598: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30599: LD_ADDR_VAR 0 4
30603: PUSH
30604: LD_INT 10
30606: PUSH
30607: LD_INT 20
30609: PUSH
30610: LD_INT 30
30612: PUSH
30613: LD_INT 40
30615: PUSH
30616: LD_INT 50
30618: PUSH
30619: LD_INT 60
30621: PUSH
30622: LD_INT 70
30624: PUSH
30625: LD_INT 80
30627: PUSH
30628: LD_INT 90
30630: PUSH
30631: LD_INT 100
30633: PUSH
30634: LD_INT 110
30636: PUSH
30637: LD_INT 120
30639: PUSH
30640: LD_INT 130
30642: PUSH
30643: LD_INT 140
30645: PUSH
30646: LD_INT 150
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 1
30668: PPUSH
30669: LD_INT 15
30671: PPUSH
30672: CALL_OW 12
30676: ARRAY
30677: ST_TO_ADDR
// if ValidHex ( x , y ) then
30678: LD_VAR 0 3
30682: PPUSH
30683: LD_VAR 0 4
30687: PPUSH
30688: CALL_OW 488
30692: IFFALSE 30715
// begin result := [ x , y ] ;
30694: LD_ADDR_VAR 0 1
30698: PUSH
30699: LD_VAR 0 3
30703: PUSH
30704: LD_VAR 0 4
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: ST_TO_ADDR
// break ;
30713: GO 30717
// end ; end ;
30715: GO 30517
30717: POP
30718: POP
// if result then
30719: LD_VAR 0 1
30723: IFFALSE 30783
// begin ToLua ( playSibBomb() ) ;
30725: LD_STRING playSibBomb()
30727: PPUSH
30728: CALL_OW 559
// wait ( 0 0$14 ) ;
30732: LD_INT 490
30734: PPUSH
30735: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30739: LD_VAR 0 1
30743: PUSH
30744: LD_INT 1
30746: ARRAY
30747: PPUSH
30748: LD_VAR 0 1
30752: PUSH
30753: LD_INT 2
30755: ARRAY
30756: PPUSH
30757: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30761: LD_VAR 0 1
30765: PUSH
30766: LD_INT 1
30768: ARRAY
30769: PPUSH
30770: LD_VAR 0 1
30774: PUSH
30775: LD_INT 2
30777: ARRAY
30778: PPUSH
30779: CALL_OW 429
// end ; end ;
30783: LD_VAR 0 1
30787: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30788: LD_EXP 78
30792: PUSH
30793: LD_EXP 100
30797: AND
30798: IFFALSE 30810
30800: GO 30802
30802: DISABLE
// YouLost (  ) ;
30803: LD_STRING 
30805: PPUSH
30806: CALL_OW 104
30810: END
// every 0 0$1 trigger StreamModeActive and sFog do
30811: LD_EXP 78
30815: PUSH
30816: LD_EXP 99
30820: AND
30821: IFFALSE 30835
30823: GO 30825
30825: DISABLE
// FogOff ( your_side ) ;
30826: LD_OWVAR 2
30830: PPUSH
30831: CALL_OW 344
30835: END
// every 0 0$1 trigger StreamModeActive and sSun do
30836: LD_EXP 78
30840: PUSH
30841: LD_EXP 101
30845: AND
30846: IFFALSE 30874
30848: GO 30850
30850: DISABLE
// begin solar_recharge_percent := 0 ;
30851: LD_ADDR_OWVAR 79
30855: PUSH
30856: LD_INT 0
30858: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30859: LD_INT 10500
30861: PPUSH
30862: CALL_OW 67
// solar_recharge_percent := 100 ;
30866: LD_ADDR_OWVAR 79
30870: PUSH
30871: LD_INT 100
30873: ST_TO_ADDR
// end ;
30874: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30875: LD_EXP 78
30879: PUSH
30880: LD_EXP 102
30884: AND
30885: IFFALSE 31124
30887: GO 30889
30889: DISABLE
30890: LD_INT 0
30892: PPUSH
30893: PPUSH
30894: PPUSH
// begin tmp := [ ] ;
30895: LD_ADDR_VAR 0 3
30899: PUSH
30900: EMPTY
30901: ST_TO_ADDR
// for i := 1 to 6 do
30902: LD_ADDR_VAR 0 1
30906: PUSH
30907: DOUBLE
30908: LD_INT 1
30910: DEC
30911: ST_TO_ADDR
30912: LD_INT 6
30914: PUSH
30915: FOR_TO
30916: IFFALSE 31021
// begin uc_nation := nation_nature ;
30918: LD_ADDR_OWVAR 21
30922: PUSH
30923: LD_INT 0
30925: ST_TO_ADDR
// uc_side := 0 ;
30926: LD_ADDR_OWVAR 20
30930: PUSH
30931: LD_INT 0
30933: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30934: LD_ADDR_OWVAR 29
30938: PUSH
30939: LD_INT 12
30941: PUSH
30942: LD_INT 12
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: ST_TO_ADDR
// hc_agressivity := 20 ;
30949: LD_ADDR_OWVAR 35
30953: PUSH
30954: LD_INT 20
30956: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30957: LD_ADDR_OWVAR 28
30961: PUSH
30962: LD_INT 17
30964: ST_TO_ADDR
// hc_gallery :=  ;
30965: LD_ADDR_OWVAR 33
30969: PUSH
30970: LD_STRING 
30972: ST_TO_ADDR
// hc_name :=  ;
30973: LD_ADDR_OWVAR 26
30977: PUSH
30978: LD_STRING 
30980: ST_TO_ADDR
// un := CreateHuman ;
30981: LD_ADDR_VAR 0 2
30985: PUSH
30986: CALL_OW 44
30990: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30991: LD_VAR 0 2
30995: PPUSH
30996: LD_INT 1
30998: PPUSH
30999: CALL_OW 51
// tmp := tmp ^ un ;
31003: LD_ADDR_VAR 0 3
31007: PUSH
31008: LD_VAR 0 3
31012: PUSH
31013: LD_VAR 0 2
31017: ADD
31018: ST_TO_ADDR
// end ;
31019: GO 30915
31021: POP
31022: POP
// repeat wait ( 0 0$1 ) ;
31023: LD_INT 35
31025: PPUSH
31026: CALL_OW 67
// for un in tmp do
31030: LD_ADDR_VAR 0 2
31034: PUSH
31035: LD_VAR 0 3
31039: PUSH
31040: FOR_IN
31041: IFFALSE 31115
// begin if IsDead ( un ) then
31043: LD_VAR 0 2
31047: PPUSH
31048: CALL_OW 301
31052: IFFALSE 31072
// begin tmp := tmp diff un ;
31054: LD_ADDR_VAR 0 3
31058: PUSH
31059: LD_VAR 0 3
31063: PUSH
31064: LD_VAR 0 2
31068: DIFF
31069: ST_TO_ADDR
// continue ;
31070: GO 31040
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
31072: LD_VAR 0 2
31076: PPUSH
31077: LD_INT 3
31079: PUSH
31080: LD_INT 22
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PPUSH
31094: CALL_OW 69
31098: PPUSH
31099: LD_VAR 0 2
31103: PPUSH
31104: CALL_OW 74
31108: PPUSH
31109: CALL_OW 115
// end ;
31113: GO 31040
31115: POP
31116: POP
// until not tmp ;
31117: LD_VAR 0 3
31121: NOT
31122: IFFALSE 31023
// end ;
31124: PPOPN 3
31126: END
// every 0 0$1 trigger StreamModeActive and sTroll do
31127: LD_EXP 78
31131: PUSH
31132: LD_EXP 103
31136: AND
31137: IFFALSE 31191
31139: GO 31141
31141: DISABLE
// begin ToLua ( displayTroll(); ) ;
31142: LD_STRING displayTroll();
31144: PPUSH
31145: CALL_OW 559
// wait ( 3 3$00 ) ;
31149: LD_INT 6300
31151: PPUSH
31152: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31156: LD_STRING hideTroll();
31158: PPUSH
31159: CALL_OW 559
// wait ( 1 1$00 ) ;
31163: LD_INT 2100
31165: PPUSH
31166: CALL_OW 67
// ToLua ( displayTroll(); ) ;
31170: LD_STRING displayTroll();
31172: PPUSH
31173: CALL_OW 559
// wait ( 1 1$00 ) ;
31177: LD_INT 2100
31179: PPUSH
31180: CALL_OW 67
// ToLua ( hideTroll(); ) ;
31184: LD_STRING hideTroll();
31186: PPUSH
31187: CALL_OW 559
// end ;
31191: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
31192: LD_EXP 78
31196: PUSH
31197: LD_EXP 104
31201: AND
31202: IFFALSE 31265
31204: GO 31206
31206: DISABLE
31207: LD_INT 0
31209: PPUSH
// begin p := 0 ;
31210: LD_ADDR_VAR 0 1
31214: PUSH
31215: LD_INT 0
31217: ST_TO_ADDR
// repeat game_speed := 1 ;
31218: LD_ADDR_OWVAR 65
31222: PUSH
31223: LD_INT 1
31225: ST_TO_ADDR
// wait ( 0 0$1 ) ;
31226: LD_INT 35
31228: PPUSH
31229: CALL_OW 67
// p := p + 1 ;
31233: LD_ADDR_VAR 0 1
31237: PUSH
31238: LD_VAR 0 1
31242: PUSH
31243: LD_INT 1
31245: PLUS
31246: ST_TO_ADDR
// until p >= 60 ;
31247: LD_VAR 0 1
31251: PUSH
31252: LD_INT 60
31254: GREATEREQUAL
31255: IFFALSE 31218
// game_speed := 4 ;
31257: LD_ADDR_OWVAR 65
31261: PUSH
31262: LD_INT 4
31264: ST_TO_ADDR
// end ;
31265: PPOPN 1
31267: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
31268: LD_EXP 78
31272: PUSH
31273: LD_EXP 105
31277: AND
31278: IFFALSE 31424
31280: GO 31282
31282: DISABLE
31283: LD_INT 0
31285: PPUSH
31286: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31287: LD_ADDR_VAR 0 1
31291: PUSH
31292: LD_INT 22
31294: PUSH
31295: LD_OWVAR 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: LD_INT 30
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 30
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PPUSH
31336: CALL_OW 69
31340: ST_TO_ADDR
// if not depot then
31341: LD_VAR 0 1
31345: NOT
31346: IFFALSE 31350
// exit ;
31348: GO 31424
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
31350: LD_ADDR_VAR 0 2
31354: PUSH
31355: LD_VAR 0 1
31359: PUSH
31360: LD_INT 1
31362: PPUSH
31363: LD_VAR 0 1
31367: PPUSH
31368: CALL_OW 12
31372: ARRAY
31373: PPUSH
31374: CALL_OW 274
31378: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
31379: LD_VAR 0 2
31383: PPUSH
31384: LD_INT 1
31386: PPUSH
31387: LD_INT 0
31389: PPUSH
31390: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31394: LD_VAR 0 2
31398: PPUSH
31399: LD_INT 2
31401: PPUSH
31402: LD_INT 0
31404: PPUSH
31405: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31409: LD_VAR 0 2
31413: PPUSH
31414: LD_INT 3
31416: PPUSH
31417: LD_INT 0
31419: PPUSH
31420: CALL_OW 277
// end ;
31424: PPOPN 2
31426: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31427: LD_EXP 78
31431: PUSH
31432: LD_EXP 106
31436: AND
31437: IFFALSE 31534
31439: GO 31441
31441: DISABLE
31442: LD_INT 0
31444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31445: LD_ADDR_VAR 0 1
31449: PUSH
31450: LD_INT 22
31452: PUSH
31453: LD_OWVAR 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 21
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 3
31474: PUSH
31475: LD_INT 23
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: PPUSH
31494: CALL_OW 69
31498: ST_TO_ADDR
// if not tmp then
31499: LD_VAR 0 1
31503: NOT
31504: IFFALSE 31508
// exit ;
31506: GO 31534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31508: LD_VAR 0 1
31512: PUSH
31513: LD_INT 1
31515: PPUSH
31516: LD_VAR 0 1
31520: PPUSH
31521: CALL_OW 12
31525: ARRAY
31526: PPUSH
31527: LD_INT 200
31529: PPUSH
31530: CALL_OW 234
// end ;
31534: PPOPN 1
31536: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
31537: LD_EXP 78
31541: PUSH
31542: LD_EXP 107
31546: AND
31547: IFFALSE 31626
31549: GO 31551
31551: DISABLE
31552: LD_INT 0
31554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
31555: LD_ADDR_VAR 0 1
31559: PUSH
31560: LD_INT 22
31562: PUSH
31563: LD_OWVAR 2
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 21
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PPUSH
31586: CALL_OW 69
31590: ST_TO_ADDR
// if not tmp then
31591: LD_VAR 0 1
31595: NOT
31596: IFFALSE 31600
// exit ;
31598: GO 31626
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
31600: LD_VAR 0 1
31604: PUSH
31605: LD_INT 1
31607: PPUSH
31608: LD_VAR 0 1
31612: PPUSH
31613: CALL_OW 12
31617: ARRAY
31618: PPUSH
31619: LD_INT 60
31621: PPUSH
31622: CALL_OW 234
// end ;
31626: PPOPN 1
31628: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
31629: LD_EXP 78
31633: PUSH
31634: LD_EXP 108
31638: AND
31639: IFFALSE 31738
31641: GO 31643
31643: DISABLE
31644: LD_INT 0
31646: PPUSH
31647: PPUSH
// begin enable ;
31648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
31649: LD_ADDR_VAR 0 1
31653: PUSH
31654: LD_INT 22
31656: PUSH
31657: LD_OWVAR 2
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 61
31668: PUSH
31669: EMPTY
31670: LIST
31671: PUSH
31672: LD_INT 33
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: PPUSH
31687: CALL_OW 69
31691: ST_TO_ADDR
// if not tmp then
31692: LD_VAR 0 1
31696: NOT
31697: IFFALSE 31701
// exit ;
31699: GO 31738
// for i in tmp do
31701: LD_ADDR_VAR 0 2
31705: PUSH
31706: LD_VAR 0 1
31710: PUSH
31711: FOR_IN
31712: IFFALSE 31736
// if IsControledBy ( i ) then
31714: LD_VAR 0 2
31718: PPUSH
31719: CALL_OW 312
31723: IFFALSE 31734
// ComUnlink ( i ) ;
31725: LD_VAR 0 2
31729: PPUSH
31730: CALL_OW 136
31734: GO 31711
31736: POP
31737: POP
// end ;
31738: PPOPN 2
31740: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31741: LD_EXP 78
31745: PUSH
31746: LD_EXP 109
31750: AND
31751: IFFALSE 31891
31753: GO 31755
31755: DISABLE
31756: LD_INT 0
31758: PPUSH
31759: PPUSH
// begin ToLua ( displayPowell(); ) ;
31760: LD_STRING displayPowell();
31762: PPUSH
31763: CALL_OW 559
// uc_side := 0 ;
31767: LD_ADDR_OWVAR 20
31771: PUSH
31772: LD_INT 0
31774: ST_TO_ADDR
// uc_nation := 2 ;
31775: LD_ADDR_OWVAR 21
31779: PUSH
31780: LD_INT 2
31782: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31783: LD_ADDR_OWVAR 37
31787: PUSH
31788: LD_INT 14
31790: ST_TO_ADDR
// vc_engine := engine_siberite ;
31791: LD_ADDR_OWVAR 39
31795: PUSH
31796: LD_INT 3
31798: ST_TO_ADDR
// vc_control := control_apeman ;
31799: LD_ADDR_OWVAR 38
31803: PUSH
31804: LD_INT 5
31806: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31807: LD_ADDR_OWVAR 40
31811: PUSH
31812: LD_INT 29
31814: ST_TO_ADDR
// un := CreateVehicle ;
31815: LD_ADDR_VAR 0 2
31819: PUSH
31820: CALL_OW 45
31824: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31825: LD_VAR 0 2
31829: PPUSH
31830: LD_INT 1
31832: PPUSH
31833: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31837: LD_INT 35
31839: PPUSH
31840: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31844: LD_VAR 0 2
31848: PPUSH
31849: LD_INT 22
31851: PUSH
31852: LD_OWVAR 2
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PPUSH
31861: CALL_OW 69
31865: PPUSH
31866: LD_VAR 0 2
31870: PPUSH
31871: CALL_OW 74
31875: PPUSH
31876: CALL_OW 115
// until IsDead ( un ) ;
31880: LD_VAR 0 2
31884: PPUSH
31885: CALL_OW 301
31889: IFFALSE 31837
// end ;
31891: PPOPN 2
31893: END
// every 0 0$1 trigger StreamModeActive and sStu do
31894: LD_EXP 78
31898: PUSH
31899: LD_EXP 117
31903: AND
31904: IFFALSE 31920
31906: GO 31908
31908: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31909: LD_STRING displayStucuk();
31911: PPUSH
31912: CALL_OW 559
// ResetFog ;
31916: CALL_OW 335
// end ;
31920: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31921: LD_EXP 78
31925: PUSH
31926: LD_EXP 110
31930: AND
31931: IFFALSE 32072
31933: GO 31935
31935: DISABLE
31936: LD_INT 0
31938: PPUSH
31939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31940: LD_ADDR_VAR 0 2
31944: PUSH
31945: LD_INT 22
31947: PUSH
31948: LD_OWVAR 2
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 21
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PPUSH
31971: CALL_OW 69
31975: ST_TO_ADDR
// if not tmp then
31976: LD_VAR 0 2
31980: NOT
31981: IFFALSE 31985
// exit ;
31983: GO 32072
// un := tmp [ rand ( 1 , tmp ) ] ;
31985: LD_ADDR_VAR 0 1
31989: PUSH
31990: LD_VAR 0 2
31994: PUSH
31995: LD_INT 1
31997: PPUSH
31998: LD_VAR 0 2
32002: PPUSH
32003: CALL_OW 12
32007: ARRAY
32008: ST_TO_ADDR
// SetSide ( un , 0 ) ;
32009: LD_VAR 0 1
32013: PPUSH
32014: LD_INT 0
32016: PPUSH
32017: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
32021: LD_VAR 0 1
32025: PPUSH
32026: LD_OWVAR 3
32030: PUSH
32031: LD_VAR 0 1
32035: DIFF
32036: PPUSH
32037: LD_VAR 0 1
32041: PPUSH
32042: CALL_OW 74
32046: PPUSH
32047: CALL_OW 115
// wait ( 0 0$20 ) ;
32051: LD_INT 700
32053: PPUSH
32054: CALL_OW 67
// SetSide ( un , your_side ) ;
32058: LD_VAR 0 1
32062: PPUSH
32063: LD_OWVAR 2
32067: PPUSH
32068: CALL_OW 235
// end ;
32072: PPOPN 2
32074: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
32075: LD_EXP 78
32079: PUSH
32080: LD_EXP 111
32084: AND
32085: IFFALSE 32191
32087: GO 32089
32089: DISABLE
32090: LD_INT 0
32092: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32093: LD_ADDR_VAR 0 1
32097: PUSH
32098: LD_INT 22
32100: PUSH
32101: LD_OWVAR 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: LD_INT 30
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 30
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PPUSH
32142: CALL_OW 69
32146: ST_TO_ADDR
// if not depot then
32147: LD_VAR 0 1
32151: NOT
32152: IFFALSE 32156
// exit ;
32154: GO 32191
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
32156: LD_VAR 0 1
32160: PUSH
32161: LD_INT 1
32163: ARRAY
32164: PPUSH
32165: CALL_OW 250
32169: PPUSH
32170: LD_VAR 0 1
32174: PUSH
32175: LD_INT 1
32177: ARRAY
32178: PPUSH
32179: CALL_OW 251
32183: PPUSH
32184: LD_INT 70
32186: PPUSH
32187: CALL_OW 495
// end ;
32191: PPOPN 1
32193: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
32194: LD_EXP 78
32198: PUSH
32199: LD_EXP 112
32203: AND
32204: IFFALSE 32415
32206: GO 32208
32208: DISABLE
32209: LD_INT 0
32211: PPUSH
32212: PPUSH
32213: PPUSH
32214: PPUSH
32215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
32216: LD_ADDR_VAR 0 5
32220: PUSH
32221: LD_INT 22
32223: PUSH
32224: LD_OWVAR 2
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 21
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PPUSH
32247: CALL_OW 69
32251: ST_TO_ADDR
// if not tmp then
32252: LD_VAR 0 5
32256: NOT
32257: IFFALSE 32261
// exit ;
32259: GO 32415
// for i in tmp do
32261: LD_ADDR_VAR 0 1
32265: PUSH
32266: LD_VAR 0 5
32270: PUSH
32271: FOR_IN
32272: IFFALSE 32413
// begin d := rand ( 0 , 5 ) ;
32274: LD_ADDR_VAR 0 4
32278: PUSH
32279: LD_INT 0
32281: PPUSH
32282: LD_INT 5
32284: PPUSH
32285: CALL_OW 12
32289: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
32290: LD_ADDR_VAR 0 2
32294: PUSH
32295: LD_VAR 0 1
32299: PPUSH
32300: CALL_OW 250
32304: PPUSH
32305: LD_VAR 0 4
32309: PPUSH
32310: LD_INT 3
32312: PPUSH
32313: LD_INT 12
32315: PPUSH
32316: CALL_OW 12
32320: PPUSH
32321: CALL_OW 272
32325: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
32326: LD_ADDR_VAR 0 3
32330: PUSH
32331: LD_VAR 0 1
32335: PPUSH
32336: CALL_OW 251
32340: PPUSH
32341: LD_VAR 0 4
32345: PPUSH
32346: LD_INT 3
32348: PPUSH
32349: LD_INT 12
32351: PPUSH
32352: CALL_OW 12
32356: PPUSH
32357: CALL_OW 273
32361: ST_TO_ADDR
// if ValidHex ( x , y ) then
32362: LD_VAR 0 2
32366: PPUSH
32367: LD_VAR 0 3
32371: PPUSH
32372: CALL_OW 488
32376: IFFALSE 32411
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32378: LD_VAR 0 1
32382: PPUSH
32383: LD_VAR 0 2
32387: PPUSH
32388: LD_VAR 0 3
32392: PPUSH
32393: LD_INT 3
32395: PPUSH
32396: LD_INT 6
32398: PPUSH
32399: CALL_OW 12
32403: PPUSH
32404: LD_INT 1
32406: PPUSH
32407: CALL_OW 483
// end ;
32411: GO 32271
32413: POP
32414: POP
// end ;
32415: PPOPN 5
32417: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32418: LD_EXP 78
32422: PUSH
32423: LD_EXP 113
32427: AND
32428: IFFALSE 32522
32430: GO 32432
32432: DISABLE
32433: LD_INT 0
32435: PPUSH
32436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32437: LD_ADDR_VAR 0 2
32441: PUSH
32442: LD_INT 22
32444: PUSH
32445: LD_OWVAR 2
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 32
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 21
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: LIST
32478: PPUSH
32479: CALL_OW 69
32483: ST_TO_ADDR
// if not tmp then
32484: LD_VAR 0 2
32488: NOT
32489: IFFALSE 32493
// exit ;
32491: GO 32522
// for i in tmp do
32493: LD_ADDR_VAR 0 1
32497: PUSH
32498: LD_VAR 0 2
32502: PUSH
32503: FOR_IN
32504: IFFALSE 32520
// SetFuel ( i , 0 ) ;
32506: LD_VAR 0 1
32510: PPUSH
32511: LD_INT 0
32513: PPUSH
32514: CALL_OW 240
32518: GO 32503
32520: POP
32521: POP
// end ;
32522: PPOPN 2
32524: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32525: LD_EXP 78
32529: PUSH
32530: LD_EXP 114
32534: AND
32535: IFFALSE 32601
32537: GO 32539
32539: DISABLE
32540: LD_INT 0
32542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32543: LD_ADDR_VAR 0 1
32547: PUSH
32548: LD_INT 22
32550: PUSH
32551: LD_OWVAR 2
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 30
32562: PUSH
32563: LD_INT 29
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PPUSH
32574: CALL_OW 69
32578: ST_TO_ADDR
// if not tmp then
32579: LD_VAR 0 1
32583: NOT
32584: IFFALSE 32588
// exit ;
32586: GO 32601
// DestroyUnit ( tmp [ 1 ] ) ;
32588: LD_VAR 0 1
32592: PUSH
32593: LD_INT 1
32595: ARRAY
32596: PPUSH
32597: CALL_OW 65
// end ;
32601: PPOPN 1
32603: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
32604: LD_EXP 78
32608: PUSH
32609: LD_EXP 116
32613: AND
32614: IFFALSE 32743
32616: GO 32618
32618: DISABLE
32619: LD_INT 0
32621: PPUSH
// begin uc_side := 0 ;
32622: LD_ADDR_OWVAR 20
32626: PUSH
32627: LD_INT 0
32629: ST_TO_ADDR
// uc_nation := nation_arabian ;
32630: LD_ADDR_OWVAR 21
32634: PUSH
32635: LD_INT 2
32637: ST_TO_ADDR
// hc_gallery :=  ;
32638: LD_ADDR_OWVAR 33
32642: PUSH
32643: LD_STRING 
32645: ST_TO_ADDR
// hc_name :=  ;
32646: LD_ADDR_OWVAR 26
32650: PUSH
32651: LD_STRING 
32653: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
32654: LD_INT 1
32656: PPUSH
32657: LD_INT 11
32659: PPUSH
32660: LD_INT 10
32662: PPUSH
32663: CALL_OW 380
// un := CreateHuman ;
32667: LD_ADDR_VAR 0 1
32671: PUSH
32672: CALL_OW 44
32676: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32677: LD_VAR 0 1
32681: PPUSH
32682: LD_INT 1
32684: PPUSH
32685: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32689: LD_INT 35
32691: PPUSH
32692: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32696: LD_VAR 0 1
32700: PPUSH
32701: LD_INT 22
32703: PUSH
32704: LD_OWVAR 2
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PPUSH
32713: CALL_OW 69
32717: PPUSH
32718: LD_VAR 0 1
32722: PPUSH
32723: CALL_OW 74
32727: PPUSH
32728: CALL_OW 115
// until IsDead ( un ) ;
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 301
32741: IFFALSE 32689
// end ;
32743: PPOPN 1
32745: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32746: LD_EXP 78
32750: PUSH
32751: LD_EXP 118
32755: AND
32756: IFFALSE 32768
32758: GO 32760
32760: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32761: LD_STRING earthquake(getX(game), 0, 32)
32763: PPUSH
32764: CALL_OW 559
32768: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32769: LD_EXP 78
32773: PUSH
32774: LD_EXP 119
32778: AND
32779: IFFALSE 32870
32781: GO 32783
32783: DISABLE
32784: LD_INT 0
32786: PPUSH
// begin enable ;
32787: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32788: LD_ADDR_VAR 0 1
32792: PUSH
32793: LD_INT 22
32795: PUSH
32796: LD_OWVAR 2
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 21
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 33
32817: PUSH
32818: LD_INT 3
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: PPUSH
32830: CALL_OW 69
32834: ST_TO_ADDR
// if not tmp then
32835: LD_VAR 0 1
32839: NOT
32840: IFFALSE 32844
// exit ;
32842: GO 32870
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32844: LD_VAR 0 1
32848: PUSH
32849: LD_INT 1
32851: PPUSH
32852: LD_VAR 0 1
32856: PPUSH
32857: CALL_OW 12
32861: ARRAY
32862: PPUSH
32863: LD_INT 1
32865: PPUSH
32866: CALL_OW 234
// end ;
32870: PPOPN 1
32872: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32873: LD_EXP 78
32877: PUSH
32878: LD_EXP 120
32882: AND
32883: IFFALSE 33024
32885: GO 32887
32887: DISABLE
32888: LD_INT 0
32890: PPUSH
32891: PPUSH
32892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32893: LD_ADDR_VAR 0 3
32897: PUSH
32898: LD_INT 22
32900: PUSH
32901: LD_OWVAR 2
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 25
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PPUSH
32924: CALL_OW 69
32928: ST_TO_ADDR
// if not tmp then
32929: LD_VAR 0 3
32933: NOT
32934: IFFALSE 32938
// exit ;
32936: GO 33024
// un := tmp [ rand ( 1 , tmp ) ] ;
32938: LD_ADDR_VAR 0 2
32942: PUSH
32943: LD_VAR 0 3
32947: PUSH
32948: LD_INT 1
32950: PPUSH
32951: LD_VAR 0 3
32955: PPUSH
32956: CALL_OW 12
32960: ARRAY
32961: ST_TO_ADDR
// if Crawls ( un ) then
32962: LD_VAR 0 2
32966: PPUSH
32967: CALL_OW 318
32971: IFFALSE 32982
// ComWalk ( un ) ;
32973: LD_VAR 0 2
32977: PPUSH
32978: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32982: LD_VAR 0 2
32986: PPUSH
32987: LD_INT 9
32989: PPUSH
32990: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32994: LD_INT 28
32996: PPUSH
32997: LD_OWVAR 2
33001: PPUSH
33002: LD_INT 2
33004: PPUSH
33005: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
33009: LD_INT 29
33011: PPUSH
33012: LD_OWVAR 2
33016: PPUSH
33017: LD_INT 2
33019: PPUSH
33020: CALL_OW 322
// end ;
33024: PPOPN 3
33026: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
33027: LD_EXP 78
33031: PUSH
33032: LD_EXP 121
33036: AND
33037: IFFALSE 33148
33039: GO 33041
33041: DISABLE
33042: LD_INT 0
33044: PPUSH
33045: PPUSH
33046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33047: LD_ADDR_VAR 0 3
33051: PUSH
33052: LD_INT 22
33054: PUSH
33055: LD_OWVAR 2
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 25
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PPUSH
33078: CALL_OW 69
33082: ST_TO_ADDR
// if not tmp then
33083: LD_VAR 0 3
33087: NOT
33088: IFFALSE 33092
// exit ;
33090: GO 33148
// un := tmp [ rand ( 1 , tmp ) ] ;
33092: LD_ADDR_VAR 0 2
33096: PUSH
33097: LD_VAR 0 3
33101: PUSH
33102: LD_INT 1
33104: PPUSH
33105: LD_VAR 0 3
33109: PPUSH
33110: CALL_OW 12
33114: ARRAY
33115: ST_TO_ADDR
// if Crawls ( un ) then
33116: LD_VAR 0 2
33120: PPUSH
33121: CALL_OW 318
33125: IFFALSE 33136
// ComWalk ( un ) ;
33127: LD_VAR 0 2
33131: PPUSH
33132: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33136: LD_VAR 0 2
33140: PPUSH
33141: LD_INT 8
33143: PPUSH
33144: CALL_OW 336
// end ;
33148: PPOPN 3
33150: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
33151: LD_EXP 78
33155: PUSH
33156: LD_EXP 122
33160: AND
33161: IFFALSE 33305
33163: GO 33165
33165: DISABLE
33166: LD_INT 0
33168: PPUSH
33169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
33170: LD_ADDR_VAR 0 2
33174: PUSH
33175: LD_INT 22
33177: PUSH
33178: LD_OWVAR 2
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 21
33189: PUSH
33190: LD_INT 2
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: LD_INT 34
33202: PUSH
33203: LD_INT 12
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 34
33212: PUSH
33213: LD_INT 51
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 34
33222: PUSH
33223: LD_INT 32
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: LIST
33240: PPUSH
33241: CALL_OW 69
33245: ST_TO_ADDR
// if not tmp then
33246: LD_VAR 0 2
33250: NOT
33251: IFFALSE 33255
// exit ;
33253: GO 33305
// for i in tmp do
33255: LD_ADDR_VAR 0 1
33259: PUSH
33260: LD_VAR 0 2
33264: PUSH
33265: FOR_IN
33266: IFFALSE 33303
// if GetCargo ( i , mat_artifact ) = 0 then
33268: LD_VAR 0 1
33272: PPUSH
33273: LD_INT 4
33275: PPUSH
33276: CALL_OW 289
33280: PUSH
33281: LD_INT 0
33283: EQUAL
33284: IFFALSE 33301
// SetCargo ( i , mat_siberit , 100 ) ;
33286: LD_VAR 0 1
33290: PPUSH
33291: LD_INT 3
33293: PPUSH
33294: LD_INT 100
33296: PPUSH
33297: CALL_OW 290
33301: GO 33265
33303: POP
33304: POP
// end ;
33305: PPOPN 2
33307: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
33308: LD_EXP 78
33312: PUSH
33313: LD_EXP 123
33317: AND
33318: IFFALSE 33501
33320: GO 33322
33322: DISABLE
33323: LD_INT 0
33325: PPUSH
33326: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33327: LD_ADDR_VAR 0 2
33331: PUSH
33332: LD_INT 22
33334: PUSH
33335: LD_OWVAR 2
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PPUSH
33344: CALL_OW 69
33348: ST_TO_ADDR
// if not tmp then
33349: LD_VAR 0 2
33353: NOT
33354: IFFALSE 33358
// exit ;
33356: GO 33501
// for i := 1 to 2 do
33358: LD_ADDR_VAR 0 1
33362: PUSH
33363: DOUBLE
33364: LD_INT 1
33366: DEC
33367: ST_TO_ADDR
33368: LD_INT 2
33370: PUSH
33371: FOR_TO
33372: IFFALSE 33499
// begin uc_side := your_side ;
33374: LD_ADDR_OWVAR 20
33378: PUSH
33379: LD_OWVAR 2
33383: ST_TO_ADDR
// uc_nation := nation_american ;
33384: LD_ADDR_OWVAR 21
33388: PUSH
33389: LD_INT 1
33391: ST_TO_ADDR
// vc_chassis := us_morphling ;
33392: LD_ADDR_OWVAR 37
33396: PUSH
33397: LD_INT 5
33399: ST_TO_ADDR
// vc_engine := engine_siberite ;
33400: LD_ADDR_OWVAR 39
33404: PUSH
33405: LD_INT 3
33407: ST_TO_ADDR
// vc_control := control_computer ;
33408: LD_ADDR_OWVAR 38
33412: PUSH
33413: LD_INT 3
33415: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33416: LD_ADDR_OWVAR 40
33420: PUSH
33421: LD_INT 10
33423: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
33424: LD_VAR 0 2
33428: PUSH
33429: LD_INT 1
33431: ARRAY
33432: PPUSH
33433: CALL_OW 310
33437: NOT
33438: IFFALSE 33485
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
33440: CALL_OW 45
33444: PPUSH
33445: LD_VAR 0 2
33449: PUSH
33450: LD_INT 1
33452: ARRAY
33453: PPUSH
33454: CALL_OW 250
33458: PPUSH
33459: LD_VAR 0 2
33463: PUSH
33464: LD_INT 1
33466: ARRAY
33467: PPUSH
33468: CALL_OW 251
33472: PPUSH
33473: LD_INT 12
33475: PPUSH
33476: LD_INT 1
33478: PPUSH
33479: CALL_OW 50
33483: GO 33497
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
33485: CALL_OW 45
33489: PPUSH
33490: LD_INT 1
33492: PPUSH
33493: CALL_OW 51
// end ;
33497: GO 33371
33499: POP
33500: POP
// end ;
33501: PPOPN 2
33503: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33504: LD_EXP 78
33508: PUSH
33509: LD_EXP 124
33513: AND
33514: IFFALSE 33736
33516: GO 33518
33518: DISABLE
33519: LD_INT 0
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33527: LD_ADDR_VAR 0 6
33531: PUSH
33532: LD_INT 22
33534: PUSH
33535: LD_OWVAR 2
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 21
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: PUSH
33557: LD_INT 23
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: PPUSH
33576: CALL_OW 69
33580: ST_TO_ADDR
// if not tmp then
33581: LD_VAR 0 6
33585: NOT
33586: IFFALSE 33590
// exit ;
33588: GO 33736
// s1 := rand ( 1 , 4 ) ;
33590: LD_ADDR_VAR 0 2
33594: PUSH
33595: LD_INT 1
33597: PPUSH
33598: LD_INT 4
33600: PPUSH
33601: CALL_OW 12
33605: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
33606: LD_ADDR_VAR 0 4
33610: PUSH
33611: LD_VAR 0 6
33615: PUSH
33616: LD_INT 1
33618: ARRAY
33619: PPUSH
33620: LD_VAR 0 2
33624: PPUSH
33625: CALL_OW 259
33629: ST_TO_ADDR
// if s1 = 1 then
33630: LD_VAR 0 2
33634: PUSH
33635: LD_INT 1
33637: EQUAL
33638: IFFALSE 33658
// s2 := rand ( 2 , 4 ) else
33640: LD_ADDR_VAR 0 3
33644: PUSH
33645: LD_INT 2
33647: PPUSH
33648: LD_INT 4
33650: PPUSH
33651: CALL_OW 12
33655: ST_TO_ADDR
33656: GO 33666
// s2 := 1 ;
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: LD_INT 1
33665: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
33666: LD_ADDR_VAR 0 5
33670: PUSH
33671: LD_VAR 0 6
33675: PUSH
33676: LD_INT 1
33678: ARRAY
33679: PPUSH
33680: LD_VAR 0 3
33684: PPUSH
33685: CALL_OW 259
33689: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33690: LD_VAR 0 6
33694: PUSH
33695: LD_INT 1
33697: ARRAY
33698: PPUSH
33699: LD_VAR 0 2
33703: PPUSH
33704: LD_VAR 0 5
33708: PPUSH
33709: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33713: LD_VAR 0 6
33717: PUSH
33718: LD_INT 1
33720: ARRAY
33721: PPUSH
33722: LD_VAR 0 3
33726: PPUSH
33727: LD_VAR 0 4
33731: PPUSH
33732: CALL_OW 237
// end ;
33736: PPOPN 6
33738: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33739: LD_EXP 78
33743: PUSH
33744: LD_EXP 125
33748: AND
33749: IFFALSE 33828
33751: GO 33753
33753: DISABLE
33754: LD_INT 0
33756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33757: LD_ADDR_VAR 0 1
33761: PUSH
33762: LD_INT 22
33764: PUSH
33765: LD_OWVAR 2
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 30
33776: PUSH
33777: LD_INT 3
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PPUSH
33788: CALL_OW 69
33792: ST_TO_ADDR
// if not tmp then
33793: LD_VAR 0 1
33797: NOT
33798: IFFALSE 33802
// exit ;
33800: GO 33828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33802: LD_VAR 0 1
33806: PUSH
33807: LD_INT 1
33809: PPUSH
33810: LD_VAR 0 1
33814: PPUSH
33815: CALL_OW 12
33819: ARRAY
33820: PPUSH
33821: LD_INT 1
33823: PPUSH
33824: CALL_OW 234
// end ;
33828: PPOPN 1
33830: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33831: LD_EXP 78
33835: PUSH
33836: LD_EXP 126
33840: AND
33841: IFFALSE 33953
33843: GO 33845
33845: DISABLE
33846: LD_INT 0
33848: PPUSH
33849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33850: LD_ADDR_VAR 0 2
33854: PUSH
33855: LD_INT 22
33857: PUSH
33858: LD_OWVAR 2
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: LD_INT 30
33872: PUSH
33873: LD_INT 27
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 30
33882: PUSH
33883: LD_INT 26
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 30
33892: PUSH
33893: LD_INT 28
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PPUSH
33910: CALL_OW 69
33914: ST_TO_ADDR
// if not tmp then
33915: LD_VAR 0 2
33919: NOT
33920: IFFALSE 33924
// exit ;
33922: GO 33953
// for i in tmp do
33924: LD_ADDR_VAR 0 1
33928: PUSH
33929: LD_VAR 0 2
33933: PUSH
33934: FOR_IN
33935: IFFALSE 33951
// SetLives ( i , 1 ) ;
33937: LD_VAR 0 1
33941: PPUSH
33942: LD_INT 1
33944: PPUSH
33945: CALL_OW 234
33949: GO 33934
33951: POP
33952: POP
// end ;
33953: PPOPN 2
33955: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33956: LD_EXP 78
33960: PUSH
33961: LD_EXP 127
33965: AND
33966: IFFALSE 34240
33968: GO 33970
33970: DISABLE
33971: LD_INT 0
33973: PPUSH
33974: PPUSH
33975: PPUSH
// begin i := rand ( 1 , 7 ) ;
33976: LD_ADDR_VAR 0 1
33980: PUSH
33981: LD_INT 1
33983: PPUSH
33984: LD_INT 7
33986: PPUSH
33987: CALL_OW 12
33991: ST_TO_ADDR
// case i of 1 :
33992: LD_VAR 0 1
33996: PUSH
33997: LD_INT 1
33999: DOUBLE
34000: EQUAL
34001: IFTRUE 34005
34003: GO 34015
34005: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
34006: LD_STRING earthquake(getX(game), 0, 32)
34008: PPUSH
34009: CALL_OW 559
34013: GO 34240
34015: LD_INT 2
34017: DOUBLE
34018: EQUAL
34019: IFTRUE 34023
34021: GO 34037
34023: POP
// begin ToLua ( displayStucuk(); ) ;
34024: LD_STRING displayStucuk();
34026: PPUSH
34027: CALL_OW 559
// ResetFog ;
34031: CALL_OW 335
// end ; 3 :
34035: GO 34240
34037: LD_INT 3
34039: DOUBLE
34040: EQUAL
34041: IFTRUE 34045
34043: GO 34149
34045: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34046: LD_ADDR_VAR 0 2
34050: PUSH
34051: LD_INT 22
34053: PUSH
34054: LD_OWVAR 2
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 25
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PPUSH
34077: CALL_OW 69
34081: ST_TO_ADDR
// if not tmp then
34082: LD_VAR 0 2
34086: NOT
34087: IFFALSE 34091
// exit ;
34089: GO 34240
// un := tmp [ rand ( 1 , tmp ) ] ;
34091: LD_ADDR_VAR 0 3
34095: PUSH
34096: LD_VAR 0 2
34100: PUSH
34101: LD_INT 1
34103: PPUSH
34104: LD_VAR 0 2
34108: PPUSH
34109: CALL_OW 12
34113: ARRAY
34114: ST_TO_ADDR
// if Crawls ( un ) then
34115: LD_VAR 0 3
34119: PPUSH
34120: CALL_OW 318
34124: IFFALSE 34135
// ComWalk ( un ) ;
34126: LD_VAR 0 3
34130: PPUSH
34131: CALL_OW 138
// SetClass ( un , class_mortar ) ;
34135: LD_VAR 0 3
34139: PPUSH
34140: LD_INT 8
34142: PPUSH
34143: CALL_OW 336
// end ; 4 :
34147: GO 34240
34149: LD_INT 4
34151: DOUBLE
34152: EQUAL
34153: IFTRUE 34157
34155: GO 34218
34157: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
34158: LD_ADDR_VAR 0 2
34162: PUSH
34163: LD_INT 22
34165: PUSH
34166: LD_OWVAR 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 30
34177: PUSH
34178: LD_INT 29
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PPUSH
34189: CALL_OW 69
34193: ST_TO_ADDR
// if not tmp then
34194: LD_VAR 0 2
34198: NOT
34199: IFFALSE 34203
// exit ;
34201: GO 34240
// DestroyUnit ( tmp [ 1 ] ) ;
34203: LD_VAR 0 2
34207: PUSH
34208: LD_INT 1
34210: ARRAY
34211: PPUSH
34212: CALL_OW 65
// end ; 5 .. 7 :
34216: GO 34240
34218: LD_INT 5
34220: DOUBLE
34221: GREATEREQUAL
34222: IFFALSE 34230
34224: LD_INT 7
34226: DOUBLE
34227: LESSEQUAL
34228: IFTRUE 34232
34230: GO 34239
34232: POP
// StreamSibBomb ; end ;
34233: CALL 30490 0 0
34237: GO 34240
34239: POP
// end ;
34240: PPOPN 3
34242: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
34243: LD_EXP 78
34247: PUSH
34248: LD_EXP 128
34252: AND
34253: IFFALSE 34409
34255: GO 34257
34257: DISABLE
34258: LD_INT 0
34260: PPUSH
34261: PPUSH
34262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
34263: LD_ADDR_VAR 0 2
34267: PUSH
34268: LD_INT 81
34270: PUSH
34271: LD_OWVAR 2
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: LD_INT 21
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 21
34295: PUSH
34296: LD_INT 2
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PPUSH
34312: CALL_OW 69
34316: ST_TO_ADDR
// if not tmp then
34317: LD_VAR 0 2
34321: NOT
34322: IFFALSE 34326
// exit ;
34324: GO 34409
// p := 0 ;
34326: LD_ADDR_VAR 0 3
34330: PUSH
34331: LD_INT 0
34333: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34334: LD_INT 35
34336: PPUSH
34337: CALL_OW 67
// p := p + 1 ;
34341: LD_ADDR_VAR 0 3
34345: PUSH
34346: LD_VAR 0 3
34350: PUSH
34351: LD_INT 1
34353: PLUS
34354: ST_TO_ADDR
// for i in tmp do
34355: LD_ADDR_VAR 0 1
34359: PUSH
34360: LD_VAR 0 2
34364: PUSH
34365: FOR_IN
34366: IFFALSE 34397
// if GetLives ( i ) < 1000 then
34368: LD_VAR 0 1
34372: PPUSH
34373: CALL_OW 256
34377: PUSH
34378: LD_INT 1000
34380: LESS
34381: IFFALSE 34395
// SetLives ( i , 1000 ) ;
34383: LD_VAR 0 1
34387: PPUSH
34388: LD_INT 1000
34390: PPUSH
34391: CALL_OW 234
34395: GO 34365
34397: POP
34398: POP
// until p > 20 ;
34399: LD_VAR 0 3
34403: PUSH
34404: LD_INT 20
34406: GREATER
34407: IFFALSE 34334
// end ;
34409: PPOPN 3
34411: END
// every 0 0$1 trigger StreamModeActive and sTime do
34412: LD_EXP 78
34416: PUSH
34417: LD_EXP 129
34421: AND
34422: IFFALSE 34457
34424: GO 34426
34426: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34427: LD_INT 28
34429: PPUSH
34430: LD_OWVAR 2
34434: PPUSH
34435: LD_INT 2
34437: PPUSH
34438: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34442: LD_INT 30
34444: PPUSH
34445: LD_OWVAR 2
34449: PPUSH
34450: LD_INT 2
34452: PPUSH
34453: CALL_OW 322
// end ;
34457: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34458: LD_EXP 78
34462: PUSH
34463: LD_EXP 130
34467: AND
34468: IFFALSE 34589
34470: GO 34472
34472: DISABLE
34473: LD_INT 0
34475: PPUSH
34476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34477: LD_ADDR_VAR 0 2
34481: PUSH
34482: LD_INT 22
34484: PUSH
34485: LD_OWVAR 2
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 21
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: LD_INT 23
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: LIST
34525: PPUSH
34526: CALL_OW 69
34530: ST_TO_ADDR
// if not tmp then
34531: LD_VAR 0 2
34535: NOT
34536: IFFALSE 34540
// exit ;
34538: GO 34589
// for i in tmp do
34540: LD_ADDR_VAR 0 1
34544: PUSH
34545: LD_VAR 0 2
34549: PUSH
34550: FOR_IN
34551: IFFALSE 34587
// begin if Crawls ( i ) then
34553: LD_VAR 0 1
34557: PPUSH
34558: CALL_OW 318
34562: IFFALSE 34573
// ComWalk ( i ) ;
34564: LD_VAR 0 1
34568: PPUSH
34569: CALL_OW 138
// SetClass ( i , 2 ) ;
34573: LD_VAR 0 1
34577: PPUSH
34578: LD_INT 2
34580: PPUSH
34581: CALL_OW 336
// end ;
34585: GO 34550
34587: POP
34588: POP
// end ;
34589: PPOPN 2
34591: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
34592: LD_EXP 78
34596: PUSH
34597: LD_EXP 131
34601: AND
34602: IFFALSE 34883
34604: GO 34606
34606: DISABLE
34607: LD_INT 0
34609: PPUSH
34610: PPUSH
34611: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
34612: LD_OWVAR 2
34616: PPUSH
34617: LD_INT 9
34619: PPUSH
34620: LD_INT 1
34622: PPUSH
34623: LD_INT 1
34625: PPUSH
34626: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
34630: LD_INT 9
34632: PPUSH
34633: LD_OWVAR 2
34637: PPUSH
34638: CALL_OW 343
// uc_side := 9 ;
34642: LD_ADDR_OWVAR 20
34646: PUSH
34647: LD_INT 9
34649: ST_TO_ADDR
// uc_nation := 2 ;
34650: LD_ADDR_OWVAR 21
34654: PUSH
34655: LD_INT 2
34657: ST_TO_ADDR
// hc_name := Dark Warrior ;
34658: LD_ADDR_OWVAR 26
34662: PUSH
34663: LD_STRING Dark Warrior
34665: ST_TO_ADDR
// hc_gallery :=  ;
34666: LD_ADDR_OWVAR 33
34670: PUSH
34671: LD_STRING 
34673: ST_TO_ADDR
// hc_noskilllimit := true ;
34674: LD_ADDR_OWVAR 76
34678: PUSH
34679: LD_INT 1
34681: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34682: LD_ADDR_OWVAR 31
34686: PUSH
34687: LD_INT 30
34689: PUSH
34690: LD_INT 30
34692: PUSH
34693: LD_INT 30
34695: PUSH
34696: LD_INT 30
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// un := CreateHuman ;
34705: LD_ADDR_VAR 0 3
34709: PUSH
34710: CALL_OW 44
34714: ST_TO_ADDR
// hc_noskilllimit := false ;
34715: LD_ADDR_OWVAR 76
34719: PUSH
34720: LD_INT 0
34722: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34723: LD_VAR 0 3
34727: PPUSH
34728: LD_INT 1
34730: PPUSH
34731: CALL_OW 51
// p := 0 ;
34735: LD_ADDR_VAR 0 2
34739: PUSH
34740: LD_INT 0
34742: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34743: LD_INT 35
34745: PPUSH
34746: CALL_OW 67
// p := p + 1 ;
34750: LD_ADDR_VAR 0 2
34754: PUSH
34755: LD_VAR 0 2
34759: PUSH
34760: LD_INT 1
34762: PLUS
34763: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34764: LD_VAR 0 3
34768: PPUSH
34769: CALL_OW 256
34773: PUSH
34774: LD_INT 1000
34776: LESS
34777: IFFALSE 34791
// SetLives ( un , 1000 ) ;
34779: LD_VAR 0 3
34783: PPUSH
34784: LD_INT 1000
34786: PPUSH
34787: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34791: LD_VAR 0 3
34795: PPUSH
34796: LD_INT 81
34798: PUSH
34799: LD_OWVAR 2
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 91
34810: PUSH
34811: LD_VAR 0 3
34815: PUSH
34816: LD_INT 30
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: LIST
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PPUSH
34828: CALL_OW 69
34832: PPUSH
34833: LD_VAR 0 3
34837: PPUSH
34838: CALL_OW 74
34842: PPUSH
34843: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
34847: LD_VAR 0 2
34851: PUSH
34852: LD_INT 60
34854: GREATER
34855: PUSH
34856: LD_VAR 0 3
34860: PPUSH
34861: CALL_OW 301
34865: OR
34866: IFFALSE 34743
// if un then
34868: LD_VAR 0 3
34872: IFFALSE 34883
// RemoveUnit ( un ) ;
34874: LD_VAR 0 3
34878: PPUSH
34879: CALL_OW 64
// end ;
34883: PPOPN 3
34885: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34886: LD_INT 0
34888: PPUSH
// case cmd of 301 :
34889: LD_VAR 0 1
34893: PUSH
34894: LD_INT 301
34896: DOUBLE
34897: EQUAL
34898: IFTRUE 34902
34900: GO 34934
34902: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34903: LD_VAR 0 6
34907: PPUSH
34908: LD_VAR 0 7
34912: PPUSH
34913: LD_VAR 0 8
34917: PPUSH
34918: LD_VAR 0 4
34922: PPUSH
34923: LD_VAR 0 5
34927: PPUSH
34928: CALL 36135 0 5
34932: GO 35055
34934: LD_INT 302
34936: DOUBLE
34937: EQUAL
34938: IFTRUE 34942
34940: GO 34979
34942: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34943: LD_VAR 0 6
34947: PPUSH
34948: LD_VAR 0 7
34952: PPUSH
34953: LD_VAR 0 8
34957: PPUSH
34958: LD_VAR 0 9
34962: PPUSH
34963: LD_VAR 0 4
34967: PPUSH
34968: LD_VAR 0 5
34972: PPUSH
34973: CALL 36226 0 6
34977: GO 35055
34979: LD_INT 303
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 34987
34985: GO 35024
34987: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34988: LD_VAR 0 6
34992: PPUSH
34993: LD_VAR 0 7
34997: PPUSH
34998: LD_VAR 0 8
35002: PPUSH
35003: LD_VAR 0 9
35007: PPUSH
35008: LD_VAR 0 4
35012: PPUSH
35013: LD_VAR 0 5
35017: PPUSH
35018: CALL 35060 0 6
35022: GO 35055
35024: LD_INT 304
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35032
35030: GO 35054
35032: POP
// hHackTeleport ( unit , x , y ) ; end ;
35033: LD_VAR 0 2
35037: PPUSH
35038: LD_VAR 0 4
35042: PPUSH
35043: LD_VAR 0 5
35047: PPUSH
35048: CALL 36819 0 3
35052: GO 35055
35054: POP
// end ;
35055: LD_VAR 0 12
35059: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
35060: LD_INT 0
35062: PPUSH
35063: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
35064: LD_VAR 0 1
35068: PUSH
35069: LD_INT 1
35071: LESS
35072: PUSH
35073: LD_VAR 0 1
35077: PUSH
35078: LD_INT 3
35080: GREATER
35081: OR
35082: PUSH
35083: LD_VAR 0 5
35087: PPUSH
35088: LD_VAR 0 6
35092: PPUSH
35093: CALL_OW 428
35097: OR
35098: IFFALSE 35102
// exit ;
35100: GO 35822
// uc_side := your_side ;
35102: LD_ADDR_OWVAR 20
35106: PUSH
35107: LD_OWVAR 2
35111: ST_TO_ADDR
// uc_nation := nation ;
35112: LD_ADDR_OWVAR 21
35116: PUSH
35117: LD_VAR 0 1
35121: ST_TO_ADDR
// bc_level = 1 ;
35122: LD_ADDR_OWVAR 43
35126: PUSH
35127: LD_INT 1
35129: ST_TO_ADDR
// case btype of 1 :
35130: LD_VAR 0 2
35134: PUSH
35135: LD_INT 1
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35143
35141: GO 35154
35143: POP
// bc_type := b_depot ; 2 :
35144: LD_ADDR_OWVAR 42
35148: PUSH
35149: LD_INT 0
35151: ST_TO_ADDR
35152: GO 35766
35154: LD_INT 2
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 35173
35162: POP
// bc_type := b_warehouse ; 3 :
35163: LD_ADDR_OWVAR 42
35167: PUSH
35168: LD_INT 1
35170: ST_TO_ADDR
35171: GO 35766
35173: LD_INT 3
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35181
35179: GO 35192
35181: POP
// bc_type := b_lab ; 4 .. 9 :
35182: LD_ADDR_OWVAR 42
35186: PUSH
35187: LD_INT 6
35189: ST_TO_ADDR
35190: GO 35766
35192: LD_INT 4
35194: DOUBLE
35195: GREATEREQUAL
35196: IFFALSE 35204
35198: LD_INT 9
35200: DOUBLE
35201: LESSEQUAL
35202: IFTRUE 35206
35204: GO 35258
35206: POP
// begin bc_type := b_lab_half ;
35207: LD_ADDR_OWVAR 42
35211: PUSH
35212: LD_INT 7
35214: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
35215: LD_ADDR_OWVAR 44
35219: PUSH
35220: LD_INT 10
35222: PUSH
35223: LD_INT 11
35225: PUSH
35226: LD_INT 12
35228: PUSH
35229: LD_INT 15
35231: PUSH
35232: LD_INT 14
35234: PUSH
35235: LD_INT 13
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: PUSH
35246: LD_VAR 0 2
35250: PUSH
35251: LD_INT 3
35253: MINUS
35254: ARRAY
35255: ST_TO_ADDR
// end ; 10 .. 13 :
35256: GO 35766
35258: LD_INT 10
35260: DOUBLE
35261: GREATEREQUAL
35262: IFFALSE 35270
35264: LD_INT 13
35266: DOUBLE
35267: LESSEQUAL
35268: IFTRUE 35272
35270: GO 35349
35272: POP
// begin bc_type := b_lab_full ;
35273: LD_ADDR_OWVAR 42
35277: PUSH
35278: LD_INT 8
35280: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
35281: LD_ADDR_OWVAR 44
35285: PUSH
35286: LD_INT 10
35288: PUSH
35289: LD_INT 12
35291: PUSH
35292: LD_INT 14
35294: PUSH
35295: LD_INT 13
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: PUSH
35304: LD_VAR 0 2
35308: PUSH
35309: LD_INT 9
35311: MINUS
35312: ARRAY
35313: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
35314: LD_ADDR_OWVAR 45
35318: PUSH
35319: LD_INT 11
35321: PUSH
35322: LD_INT 15
35324: PUSH
35325: LD_INT 12
35327: PUSH
35328: LD_INT 15
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: PUSH
35337: LD_VAR 0 2
35341: PUSH
35342: LD_INT 9
35344: MINUS
35345: ARRAY
35346: ST_TO_ADDR
// end ; 14 :
35347: GO 35766
35349: LD_INT 14
35351: DOUBLE
35352: EQUAL
35353: IFTRUE 35357
35355: GO 35368
35357: POP
// bc_type := b_workshop ; 15 :
35358: LD_ADDR_OWVAR 42
35362: PUSH
35363: LD_INT 2
35365: ST_TO_ADDR
35366: GO 35766
35368: LD_INT 15
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35376
35374: GO 35387
35376: POP
// bc_type := b_factory ; 16 :
35377: LD_ADDR_OWVAR 42
35381: PUSH
35382: LD_INT 3
35384: ST_TO_ADDR
35385: GO 35766
35387: LD_INT 16
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35395
35393: GO 35406
35395: POP
// bc_type := b_ext_gun ; 17 :
35396: LD_ADDR_OWVAR 42
35400: PUSH
35401: LD_INT 17
35403: ST_TO_ADDR
35404: GO 35766
35406: LD_INT 17
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35442
35414: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35415: LD_ADDR_OWVAR 42
35419: PUSH
35420: LD_INT 19
35422: PUSH
35423: LD_INT 23
35425: PUSH
35426: LD_INT 19
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: PUSH
35434: LD_VAR 0 1
35438: ARRAY
35439: ST_TO_ADDR
35440: GO 35766
35442: LD_INT 18
35444: DOUBLE
35445: EQUAL
35446: IFTRUE 35450
35448: GO 35461
35450: POP
// bc_type := b_ext_radar ; 19 :
35451: LD_ADDR_OWVAR 42
35455: PUSH
35456: LD_INT 20
35458: ST_TO_ADDR
35459: GO 35766
35461: LD_INT 19
35463: DOUBLE
35464: EQUAL
35465: IFTRUE 35469
35467: GO 35480
35469: POP
// bc_type := b_ext_radio ; 20 :
35470: LD_ADDR_OWVAR 42
35474: PUSH
35475: LD_INT 22
35477: ST_TO_ADDR
35478: GO 35766
35480: LD_INT 20
35482: DOUBLE
35483: EQUAL
35484: IFTRUE 35488
35486: GO 35499
35488: POP
// bc_type := b_ext_siberium ; 21 :
35489: LD_ADDR_OWVAR 42
35493: PUSH
35494: LD_INT 21
35496: ST_TO_ADDR
35497: GO 35766
35499: LD_INT 21
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35507
35505: GO 35518
35507: POP
// bc_type := b_ext_computer ; 22 :
35508: LD_ADDR_OWVAR 42
35512: PUSH
35513: LD_INT 24
35515: ST_TO_ADDR
35516: GO 35766
35518: LD_INT 22
35520: DOUBLE
35521: EQUAL
35522: IFTRUE 35526
35524: GO 35537
35526: POP
// bc_type := b_ext_track ; 23 :
35527: LD_ADDR_OWVAR 42
35531: PUSH
35532: LD_INT 16
35534: ST_TO_ADDR
35535: GO 35766
35537: LD_INT 23
35539: DOUBLE
35540: EQUAL
35541: IFTRUE 35545
35543: GO 35556
35545: POP
// bc_type := b_ext_laser ; 24 :
35546: LD_ADDR_OWVAR 42
35550: PUSH
35551: LD_INT 25
35553: ST_TO_ADDR
35554: GO 35766
35556: LD_INT 24
35558: DOUBLE
35559: EQUAL
35560: IFTRUE 35564
35562: GO 35575
35564: POP
// bc_type := b_control_tower ; 25 :
35565: LD_ADDR_OWVAR 42
35569: PUSH
35570: LD_INT 36
35572: ST_TO_ADDR
35573: GO 35766
35575: LD_INT 25
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35583
35581: GO 35594
35583: POP
// bc_type := b_breastwork ; 26 :
35584: LD_ADDR_OWVAR 42
35588: PUSH
35589: LD_INT 31
35591: ST_TO_ADDR
35592: GO 35766
35594: LD_INT 26
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35602
35600: GO 35613
35602: POP
// bc_type := b_bunker ; 27 :
35603: LD_ADDR_OWVAR 42
35607: PUSH
35608: LD_INT 32
35610: ST_TO_ADDR
35611: GO 35766
35613: LD_INT 27
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35621
35619: GO 35632
35621: POP
// bc_type := b_turret ; 28 :
35622: LD_ADDR_OWVAR 42
35626: PUSH
35627: LD_INT 33
35629: ST_TO_ADDR
35630: GO 35766
35632: LD_INT 28
35634: DOUBLE
35635: EQUAL
35636: IFTRUE 35640
35638: GO 35651
35640: POP
// bc_type := b_armoury ; 29 :
35641: LD_ADDR_OWVAR 42
35645: PUSH
35646: LD_INT 4
35648: ST_TO_ADDR
35649: GO 35766
35651: LD_INT 29
35653: DOUBLE
35654: EQUAL
35655: IFTRUE 35659
35657: GO 35670
35659: POP
// bc_type := b_barracks ; 30 :
35660: LD_ADDR_OWVAR 42
35664: PUSH
35665: LD_INT 5
35667: ST_TO_ADDR
35668: GO 35766
35670: LD_INT 30
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35678
35676: GO 35689
35678: POP
// bc_type := b_solar_power ; 31 :
35679: LD_ADDR_OWVAR 42
35683: PUSH
35684: LD_INT 27
35686: ST_TO_ADDR
35687: GO 35766
35689: LD_INT 31
35691: DOUBLE
35692: EQUAL
35693: IFTRUE 35697
35695: GO 35708
35697: POP
// bc_type := b_oil_power ; 32 :
35698: LD_ADDR_OWVAR 42
35702: PUSH
35703: LD_INT 26
35705: ST_TO_ADDR
35706: GO 35766
35708: LD_INT 32
35710: DOUBLE
35711: EQUAL
35712: IFTRUE 35716
35714: GO 35727
35716: POP
// bc_type := b_siberite_power ; 33 :
35717: LD_ADDR_OWVAR 42
35721: PUSH
35722: LD_INT 28
35724: ST_TO_ADDR
35725: GO 35766
35727: LD_INT 33
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35735
35733: GO 35746
35735: POP
// bc_type := b_oil_mine ; 34 :
35736: LD_ADDR_OWVAR 42
35740: PUSH
35741: LD_INT 29
35743: ST_TO_ADDR
35744: GO 35766
35746: LD_INT 34
35748: DOUBLE
35749: EQUAL
35750: IFTRUE 35754
35752: GO 35765
35754: POP
// bc_type := b_siberite_mine ; end ;
35755: LD_ADDR_OWVAR 42
35759: PUSH
35760: LD_INT 30
35762: ST_TO_ADDR
35763: GO 35766
35765: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35766: LD_ADDR_VAR 0 8
35770: PUSH
35771: LD_VAR 0 5
35775: PPUSH
35776: LD_VAR 0 6
35780: PPUSH
35781: LD_VAR 0 3
35785: PPUSH
35786: CALL_OW 47
35790: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35791: LD_OWVAR 42
35795: PUSH
35796: LD_INT 32
35798: PUSH
35799: LD_INT 33
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: IN
35806: IFFALSE 35822
// PlaceWeaponTurret ( b , weapon ) ;
35808: LD_VAR 0 8
35812: PPUSH
35813: LD_VAR 0 4
35817: PPUSH
35818: CALL_OW 431
// end ;
35822: LD_VAR 0 7
35826: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35827: LD_INT 0
35829: PPUSH
35830: PPUSH
35831: PPUSH
35832: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35833: LD_ADDR_VAR 0 4
35837: PUSH
35838: LD_INT 22
35840: PUSH
35841: LD_OWVAR 2
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: LD_INT 30
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 30
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PPUSH
35882: CALL_OW 69
35886: ST_TO_ADDR
// if not tmp then
35887: LD_VAR 0 4
35891: NOT
35892: IFFALSE 35896
// exit ;
35894: GO 35955
// for i in tmp do
35896: LD_ADDR_VAR 0 2
35900: PUSH
35901: LD_VAR 0 4
35905: PUSH
35906: FOR_IN
35907: IFFALSE 35953
// for j = 1 to 3 do
35909: LD_ADDR_VAR 0 3
35913: PUSH
35914: DOUBLE
35915: LD_INT 1
35917: DEC
35918: ST_TO_ADDR
35919: LD_INT 3
35921: PUSH
35922: FOR_TO
35923: IFFALSE 35949
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35925: LD_VAR 0 2
35929: PPUSH
35930: CALL_OW 274
35934: PPUSH
35935: LD_VAR 0 3
35939: PPUSH
35940: LD_INT 99999
35942: PPUSH
35943: CALL_OW 277
35947: GO 35922
35949: POP
35950: POP
35951: GO 35906
35953: POP
35954: POP
// end ;
35955: LD_VAR 0 1
35959: RET
// export function hHackSetLevel10 ; var i , j ; begin
35960: LD_INT 0
35962: PPUSH
35963: PPUSH
35964: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35965: LD_ADDR_VAR 0 2
35969: PUSH
35970: LD_INT 21
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PPUSH
35980: CALL_OW 69
35984: PUSH
35985: FOR_IN
35986: IFFALSE 36038
// if IsSelected ( i ) then
35988: LD_VAR 0 2
35992: PPUSH
35993: CALL_OW 306
35997: IFFALSE 36036
// begin for j := 1 to 4 do
35999: LD_ADDR_VAR 0 3
36003: PUSH
36004: DOUBLE
36005: LD_INT 1
36007: DEC
36008: ST_TO_ADDR
36009: LD_INT 4
36011: PUSH
36012: FOR_TO
36013: IFFALSE 36034
// SetSkill ( i , j , 10 ) ;
36015: LD_VAR 0 2
36019: PPUSH
36020: LD_VAR 0 3
36024: PPUSH
36025: LD_INT 10
36027: PPUSH
36028: CALL_OW 237
36032: GO 36012
36034: POP
36035: POP
// end ;
36036: GO 35985
36038: POP
36039: POP
// end ;
36040: LD_VAR 0 1
36044: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36045: LD_INT 0
36047: PPUSH
36048: PPUSH
36049: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36050: LD_ADDR_VAR 0 2
36054: PUSH
36055: LD_INT 22
36057: PUSH
36058: LD_OWVAR 2
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 21
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PPUSH
36081: CALL_OW 69
36085: PUSH
36086: FOR_IN
36087: IFFALSE 36128
// begin for j := 1 to 4 do
36089: LD_ADDR_VAR 0 3
36093: PUSH
36094: DOUBLE
36095: LD_INT 1
36097: DEC
36098: ST_TO_ADDR
36099: LD_INT 4
36101: PUSH
36102: FOR_TO
36103: IFFALSE 36124
// SetSkill ( i , j , 10 ) ;
36105: LD_VAR 0 2
36109: PPUSH
36110: LD_VAR 0 3
36114: PPUSH
36115: LD_INT 10
36117: PPUSH
36118: CALL_OW 237
36122: GO 36102
36124: POP
36125: POP
// end ;
36126: GO 36086
36128: POP
36129: POP
// end ;
36130: LD_VAR 0 1
36134: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
36135: LD_INT 0
36137: PPUSH
// uc_side := your_side ;
36138: LD_ADDR_OWVAR 20
36142: PUSH
36143: LD_OWVAR 2
36147: ST_TO_ADDR
// uc_nation := nation ;
36148: LD_ADDR_OWVAR 21
36152: PUSH
36153: LD_VAR 0 1
36157: ST_TO_ADDR
// InitHc ;
36158: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36162: LD_INT 0
36164: PPUSH
36165: LD_VAR 0 2
36169: PPUSH
36170: LD_VAR 0 3
36174: PPUSH
36175: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
36179: LD_VAR 0 4
36183: PPUSH
36184: LD_VAR 0 5
36188: PPUSH
36189: CALL_OW 428
36193: PUSH
36194: LD_INT 0
36196: EQUAL
36197: IFFALSE 36221
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
36199: CALL_OW 44
36203: PPUSH
36204: LD_VAR 0 4
36208: PPUSH
36209: LD_VAR 0 5
36213: PPUSH
36214: LD_INT 1
36216: PPUSH
36217: CALL_OW 48
// end ;
36221: LD_VAR 0 6
36225: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
36226: LD_INT 0
36228: PPUSH
36229: PPUSH
// uc_side := your_side ;
36230: LD_ADDR_OWVAR 20
36234: PUSH
36235: LD_OWVAR 2
36239: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
36240: LD_VAR 0 1
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: LD_INT 3
36253: PUSH
36254: LD_INT 4
36256: PUSH
36257: LD_INT 5
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: IN
36267: IFFALSE 36279
// uc_nation := nation_american else
36269: LD_ADDR_OWVAR 21
36273: PUSH
36274: LD_INT 1
36276: ST_TO_ADDR
36277: GO 36322
// if chassis in [ 11 , 12 , 13 , 14 ] then
36279: LD_VAR 0 1
36283: PUSH
36284: LD_INT 11
36286: PUSH
36287: LD_INT 12
36289: PUSH
36290: LD_INT 13
36292: PUSH
36293: LD_INT 14
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: IN
36302: IFFALSE 36314
// uc_nation := nation_arabian else
36304: LD_ADDR_OWVAR 21
36308: PUSH
36309: LD_INT 2
36311: ST_TO_ADDR
36312: GO 36322
// uc_nation := nation_russian ;
36314: LD_ADDR_OWVAR 21
36318: PUSH
36319: LD_INT 3
36321: ST_TO_ADDR
// vc_chassis := chassis ;
36322: LD_ADDR_OWVAR 37
36326: PUSH
36327: LD_VAR 0 1
36331: ST_TO_ADDR
// vc_engine := engine ;
36332: LD_ADDR_OWVAR 39
36336: PUSH
36337: LD_VAR 0 2
36341: ST_TO_ADDR
// vc_control := control ;
36342: LD_ADDR_OWVAR 38
36346: PUSH
36347: LD_VAR 0 3
36351: ST_TO_ADDR
// vc_weapon := weapon ;
36352: LD_ADDR_OWVAR 40
36356: PUSH
36357: LD_VAR 0 4
36361: ST_TO_ADDR
// un := CreateVehicle ;
36362: LD_ADDR_VAR 0 8
36366: PUSH
36367: CALL_OW 45
36371: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36372: LD_VAR 0 8
36376: PPUSH
36377: LD_INT 0
36379: PPUSH
36380: LD_INT 5
36382: PPUSH
36383: CALL_OW 12
36387: PPUSH
36388: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36392: LD_VAR 0 8
36396: PPUSH
36397: LD_VAR 0 5
36401: PPUSH
36402: LD_VAR 0 6
36406: PPUSH
36407: LD_INT 1
36409: PPUSH
36410: CALL_OW 48
// end ;
36414: LD_VAR 0 7
36418: RET
// export hInvincible ; every 1 do
36419: GO 36421
36421: DISABLE
// hInvincible := [ ] ;
36422: LD_ADDR_EXP 132
36426: PUSH
36427: EMPTY
36428: ST_TO_ADDR
36429: END
// every 10 do var i ;
36430: GO 36432
36432: DISABLE
36433: LD_INT 0
36435: PPUSH
// begin enable ;
36436: ENABLE
// if not hInvincible then
36437: LD_EXP 132
36441: NOT
36442: IFFALSE 36446
// exit ;
36444: GO 36490
// for i in hInvincible do
36446: LD_ADDR_VAR 0 1
36450: PUSH
36451: LD_EXP 132
36455: PUSH
36456: FOR_IN
36457: IFFALSE 36488
// if GetLives ( i ) < 1000 then
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 256
36468: PUSH
36469: LD_INT 1000
36471: LESS
36472: IFFALSE 36486
// SetLives ( i , 1000 ) ;
36474: LD_VAR 0 1
36478: PPUSH
36479: LD_INT 1000
36481: PPUSH
36482: CALL_OW 234
36486: GO 36456
36488: POP
36489: POP
// end ;
36490: PPOPN 1
36492: END
// export function hHackInvincible ; var i ; begin
36493: LD_INT 0
36495: PPUSH
36496: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36497: LD_ADDR_VAR 0 2
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: LD_INT 21
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 21
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: PPUSH
36530: CALL_OW 69
36534: PUSH
36535: FOR_IN
36536: IFFALSE 36597
// if IsSelected ( i ) then
36538: LD_VAR 0 2
36542: PPUSH
36543: CALL_OW 306
36547: IFFALSE 36595
// begin if i in hInvincible then
36549: LD_VAR 0 2
36553: PUSH
36554: LD_EXP 132
36558: IN
36559: IFFALSE 36579
// hInvincible := hInvincible diff i else
36561: LD_ADDR_EXP 132
36565: PUSH
36566: LD_EXP 132
36570: PUSH
36571: LD_VAR 0 2
36575: DIFF
36576: ST_TO_ADDR
36577: GO 36595
// hInvincible := hInvincible union i ;
36579: LD_ADDR_EXP 132
36583: PUSH
36584: LD_EXP 132
36588: PUSH
36589: LD_VAR 0 2
36593: UNION
36594: ST_TO_ADDR
// end ;
36595: GO 36535
36597: POP
36598: POP
// end ;
36599: LD_VAR 0 1
36603: RET
// export function hHackInvisible ; var i , j ; begin
36604: LD_INT 0
36606: PPUSH
36607: PPUSH
36608: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36609: LD_ADDR_VAR 0 2
36613: PUSH
36614: LD_INT 21
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PPUSH
36624: CALL_OW 69
36628: PUSH
36629: FOR_IN
36630: IFFALSE 36654
// if IsSelected ( i ) then
36632: LD_VAR 0 2
36636: PPUSH
36637: CALL_OW 306
36641: IFFALSE 36652
// ComForceInvisible ( i ) ;
36643: LD_VAR 0 2
36647: PPUSH
36648: CALL_OW 496
36652: GO 36629
36654: POP
36655: POP
// end ;
36656: LD_VAR 0 1
36660: RET
// export function hHackChangeYourSide ; begin
36661: LD_INT 0
36663: PPUSH
// if your_side = 8 then
36664: LD_OWVAR 2
36668: PUSH
36669: LD_INT 8
36671: EQUAL
36672: IFFALSE 36684
// your_side := 0 else
36674: LD_ADDR_OWVAR 2
36678: PUSH
36679: LD_INT 0
36681: ST_TO_ADDR
36682: GO 36698
// your_side := your_side + 1 ;
36684: LD_ADDR_OWVAR 2
36688: PUSH
36689: LD_OWVAR 2
36693: PUSH
36694: LD_INT 1
36696: PLUS
36697: ST_TO_ADDR
// end ;
36698: LD_VAR 0 1
36702: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36703: LD_INT 0
36705: PPUSH
36706: PPUSH
36707: PPUSH
// for i in all_units do
36708: LD_ADDR_VAR 0 2
36712: PUSH
36713: LD_OWVAR 3
36717: PUSH
36718: FOR_IN
36719: IFFALSE 36797
// if IsSelected ( i ) then
36721: LD_VAR 0 2
36725: PPUSH
36726: CALL_OW 306
36730: IFFALSE 36795
// begin j := GetSide ( i ) ;
36732: LD_ADDR_VAR 0 3
36736: PUSH
36737: LD_VAR 0 2
36741: PPUSH
36742: CALL_OW 255
36746: ST_TO_ADDR
// if j = 8 then
36747: LD_VAR 0 3
36751: PUSH
36752: LD_INT 8
36754: EQUAL
36755: IFFALSE 36767
// j := 0 else
36757: LD_ADDR_VAR 0 3
36761: PUSH
36762: LD_INT 0
36764: ST_TO_ADDR
36765: GO 36781
// j := j + 1 ;
36767: LD_ADDR_VAR 0 3
36771: PUSH
36772: LD_VAR 0 3
36776: PUSH
36777: LD_INT 1
36779: PLUS
36780: ST_TO_ADDR
// SetSide ( i , j ) ;
36781: LD_VAR 0 2
36785: PPUSH
36786: LD_VAR 0 3
36790: PPUSH
36791: CALL_OW 235
// end ;
36795: GO 36718
36797: POP
36798: POP
// end ;
36799: LD_VAR 0 1
36803: RET
// export function hHackFog ; begin
36804: LD_INT 0
36806: PPUSH
// FogOff ( true ) ;
36807: LD_INT 1
36809: PPUSH
36810: CALL_OW 344
// end ;
36814: LD_VAR 0 1
36818: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36819: LD_INT 0
36821: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36822: LD_VAR 0 1
36826: PPUSH
36827: LD_VAR 0 2
36831: PPUSH
36832: LD_VAR 0 3
36836: PPUSH
36837: LD_INT 1
36839: PPUSH
36840: LD_INT 1
36842: PPUSH
36843: CALL_OW 483
// CenterOnXY ( x , y ) ;
36847: LD_VAR 0 2
36851: PPUSH
36852: LD_VAR 0 3
36856: PPUSH
36857: CALL_OW 84
// end ; end_of_file
36861: LD_VAR 0 4
36865: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36866: LD_INT 0
36868: PPUSH
36869: PPUSH
36870: PPUSH
36871: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 264
36881: PUSH
36882: LD_EXP 66
36886: EQUAL
36887: IFFALSE 36959
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36889: LD_INT 68
36891: PPUSH
36892: LD_VAR 0 1
36896: PPUSH
36897: CALL_OW 255
36901: PPUSH
36902: CALL_OW 321
36906: PUSH
36907: LD_INT 2
36909: EQUAL
36910: IFFALSE 36922
// eff := 70 else
36912: LD_ADDR_VAR 0 4
36916: PUSH
36917: LD_INT 70
36919: ST_TO_ADDR
36920: GO 36930
// eff := 30 ;
36922: LD_ADDR_VAR 0 4
36926: PUSH
36927: LD_INT 30
36929: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL_OW 250
36939: PPUSH
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL_OW 251
36949: PPUSH
36950: LD_VAR 0 4
36954: PPUSH
36955: CALL_OW 495
// end ; end ;
36959: LD_VAR 0 2
36963: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36964: LD_INT 0
36966: PPUSH
// end ;
36967: LD_VAR 0 4
36971: RET
// export function SOS_Command ( cmd ) ; begin
36972: LD_INT 0
36974: PPUSH
// end ;
36975: LD_VAR 0 2
36979: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36980: LD_INT 0
36982: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36983: LD_VAR 0 1
36987: PUSH
36988: LD_INT 250
36990: EQUAL
36991: PUSH
36992: LD_VAR 0 2
36996: PPUSH
36997: CALL_OW 264
37001: PUSH
37002: LD_EXP 69
37006: EQUAL
37007: AND
37008: IFFALSE 37029
// MinerPlaceMine ( unit , x , y ) ;
37010: LD_VAR 0 2
37014: PPUSH
37015: LD_VAR 0 4
37019: PPUSH
37020: LD_VAR 0 5
37024: PPUSH
37025: CALL 39370 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37029: LD_VAR 0 1
37033: PUSH
37034: LD_INT 251
37036: EQUAL
37037: PUSH
37038: LD_VAR 0 2
37042: PPUSH
37043: CALL_OW 264
37047: PUSH
37048: LD_EXP 69
37052: EQUAL
37053: AND
37054: IFFALSE 37075
// MinerDetonateMine ( unit , x , y ) ;
37056: LD_VAR 0 2
37060: PPUSH
37061: LD_VAR 0 4
37065: PPUSH
37066: LD_VAR 0 5
37070: PPUSH
37071: CALL 39647 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37075: LD_VAR 0 1
37079: PUSH
37080: LD_INT 252
37082: EQUAL
37083: PUSH
37084: LD_VAR 0 2
37088: PPUSH
37089: CALL_OW 264
37093: PUSH
37094: LD_EXP 69
37098: EQUAL
37099: AND
37100: IFFALSE 37121
// MinerCreateMinefield ( unit , x , y ) ;
37102: LD_VAR 0 2
37106: PPUSH
37107: LD_VAR 0 4
37111: PPUSH
37112: LD_VAR 0 5
37116: PPUSH
37117: CALL 40064 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37121: LD_VAR 0 1
37125: PUSH
37126: LD_INT 253
37128: EQUAL
37129: PUSH
37130: LD_VAR 0 2
37134: PPUSH
37135: CALL_OW 257
37139: PUSH
37140: LD_INT 5
37142: EQUAL
37143: AND
37144: IFFALSE 37165
// ComBinocular ( unit , x , y ) ;
37146: LD_VAR 0 2
37150: PPUSH
37151: LD_VAR 0 4
37155: PPUSH
37156: LD_VAR 0 5
37160: PPUSH
37161: CALL 40435 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37165: LD_VAR 0 1
37169: PUSH
37170: LD_INT 254
37172: EQUAL
37173: PUSH
37174: LD_VAR 0 2
37178: PPUSH
37179: CALL_OW 264
37183: PUSH
37184: LD_EXP 64
37188: EQUAL
37189: AND
37190: PUSH
37191: LD_VAR 0 3
37195: PPUSH
37196: CALL_OW 263
37200: PUSH
37201: LD_INT 3
37203: EQUAL
37204: AND
37205: IFFALSE 37221
// HackDestroyVehicle ( unit , selectedUnit ) ;
37207: LD_VAR 0 2
37211: PPUSH
37212: LD_VAR 0 3
37216: PPUSH
37217: CALL 38730 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37221: LD_VAR 0 1
37225: PUSH
37226: LD_INT 255
37228: EQUAL
37229: PUSH
37230: LD_VAR 0 2
37234: PPUSH
37235: CALL_OW 264
37239: PUSH
37240: LD_INT 14
37242: PUSH
37243: LD_INT 53
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: IN
37250: AND
37251: PUSH
37252: LD_VAR 0 4
37256: PPUSH
37257: LD_VAR 0 5
37261: PPUSH
37262: CALL_OW 488
37266: AND
37267: IFFALSE 37291
// CutTreeXYR ( unit , x , y , 12 ) ;
37269: LD_VAR 0 2
37273: PPUSH
37274: LD_VAR 0 4
37278: PPUSH
37279: LD_VAR 0 5
37283: PPUSH
37284: LD_INT 12
37286: PPUSH
37287: CALL 37296 0 4
// end ;
37291: LD_VAR 0 6
37295: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37296: LD_INT 0
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
37306: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37307: LD_VAR 0 1
37311: NOT
37312: PUSH
37313: LD_VAR 0 2
37317: PPUSH
37318: LD_VAR 0 3
37322: PPUSH
37323: CALL_OW 488
37327: NOT
37328: OR
37329: PUSH
37330: LD_VAR 0 4
37334: NOT
37335: OR
37336: IFFALSE 37340
// exit ;
37338: GO 37680
// list := [ ] ;
37340: LD_ADDR_VAR 0 13
37344: PUSH
37345: EMPTY
37346: ST_TO_ADDR
// if x - r < 0 then
37347: LD_VAR 0 2
37351: PUSH
37352: LD_VAR 0 4
37356: MINUS
37357: PUSH
37358: LD_INT 0
37360: LESS
37361: IFFALSE 37373
// min_x := 0 else
37363: LD_ADDR_VAR 0 7
37367: PUSH
37368: LD_INT 0
37370: ST_TO_ADDR
37371: GO 37389
// min_x := x - r ;
37373: LD_ADDR_VAR 0 7
37377: PUSH
37378: LD_VAR 0 2
37382: PUSH
37383: LD_VAR 0 4
37387: MINUS
37388: ST_TO_ADDR
// if y - r < 0 then
37389: LD_VAR 0 3
37393: PUSH
37394: LD_VAR 0 4
37398: MINUS
37399: PUSH
37400: LD_INT 0
37402: LESS
37403: IFFALSE 37415
// min_y := 0 else
37405: LD_ADDR_VAR 0 8
37409: PUSH
37410: LD_INT 0
37412: ST_TO_ADDR
37413: GO 37431
// min_y := y - r ;
37415: LD_ADDR_VAR 0 8
37419: PUSH
37420: LD_VAR 0 3
37424: PUSH
37425: LD_VAR 0 4
37429: MINUS
37430: ST_TO_ADDR
// max_x := x + r ;
37431: LD_ADDR_VAR 0 9
37435: PUSH
37436: LD_VAR 0 2
37440: PUSH
37441: LD_VAR 0 4
37445: PLUS
37446: ST_TO_ADDR
// max_y := y + r ;
37447: LD_ADDR_VAR 0 10
37451: PUSH
37452: LD_VAR 0 3
37456: PUSH
37457: LD_VAR 0 4
37461: PLUS
37462: ST_TO_ADDR
// for _x = min_x to max_x do
37463: LD_ADDR_VAR 0 11
37467: PUSH
37468: DOUBLE
37469: LD_VAR 0 7
37473: DEC
37474: ST_TO_ADDR
37475: LD_VAR 0 9
37479: PUSH
37480: FOR_TO
37481: IFFALSE 37598
// for _y = min_y to max_y do
37483: LD_ADDR_VAR 0 12
37487: PUSH
37488: DOUBLE
37489: LD_VAR 0 8
37493: DEC
37494: ST_TO_ADDR
37495: LD_VAR 0 10
37499: PUSH
37500: FOR_TO
37501: IFFALSE 37594
// begin if not ValidHex ( _x , _y ) then
37503: LD_VAR 0 11
37507: PPUSH
37508: LD_VAR 0 12
37512: PPUSH
37513: CALL_OW 488
37517: NOT
37518: IFFALSE 37522
// continue ;
37520: GO 37500
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37522: LD_VAR 0 11
37526: PPUSH
37527: LD_VAR 0 12
37531: PPUSH
37532: CALL_OW 351
37536: PUSH
37537: LD_VAR 0 11
37541: PPUSH
37542: LD_VAR 0 12
37546: PPUSH
37547: CALL_OW 554
37551: AND
37552: IFFALSE 37592
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37554: LD_ADDR_VAR 0 13
37558: PUSH
37559: LD_VAR 0 13
37563: PPUSH
37564: LD_VAR 0 13
37568: PUSH
37569: LD_INT 1
37571: PLUS
37572: PPUSH
37573: LD_VAR 0 11
37577: PUSH
37578: LD_VAR 0 12
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PPUSH
37587: CALL_OW 2
37591: ST_TO_ADDR
// end ;
37592: GO 37500
37594: POP
37595: POP
37596: GO 37480
37598: POP
37599: POP
// if not list then
37600: LD_VAR 0 13
37604: NOT
37605: IFFALSE 37609
// exit ;
37607: GO 37680
// for i in list do
37609: LD_ADDR_VAR 0 6
37613: PUSH
37614: LD_VAR 0 13
37618: PUSH
37619: FOR_IN
37620: IFFALSE 37678
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37622: LD_VAR 0 1
37626: PPUSH
37627: LD_STRING M
37629: PUSH
37630: LD_VAR 0 6
37634: PUSH
37635: LD_INT 1
37637: ARRAY
37638: PUSH
37639: LD_VAR 0 6
37643: PUSH
37644: LD_INT 2
37646: ARRAY
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: PPUSH
37672: CALL_OW 447
37676: GO 37619
37678: POP
37679: POP
// end ;
37680: LD_VAR 0 5
37684: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37685: LD_EXP 133
37689: NOT
37690: IFFALSE 37740
37692: GO 37694
37694: DISABLE
// begin initHack := true ;
37695: LD_ADDR_EXP 133
37699: PUSH
37700: LD_INT 1
37702: ST_TO_ADDR
// hackTanks := [ ] ;
37703: LD_ADDR_EXP 134
37707: PUSH
37708: EMPTY
37709: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37710: LD_ADDR_EXP 135
37714: PUSH
37715: EMPTY
37716: ST_TO_ADDR
// hackLimit := 3 ;
37717: LD_ADDR_EXP 136
37721: PUSH
37722: LD_INT 3
37724: ST_TO_ADDR
// hackDist := 12 ;
37725: LD_ADDR_EXP 137
37729: PUSH
37730: LD_INT 12
37732: ST_TO_ADDR
// hackCounter := [ ] ;
37733: LD_ADDR_EXP 138
37737: PUSH
37738: EMPTY
37739: ST_TO_ADDR
// end ;
37740: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37741: LD_EXP 133
37745: PUSH
37746: LD_INT 34
37748: PUSH
37749: LD_EXP 64
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PPUSH
37758: CALL_OW 69
37762: AND
37763: IFFALSE 38018
37765: GO 37767
37767: DISABLE
37768: LD_INT 0
37770: PPUSH
37771: PPUSH
// begin enable ;
37772: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37773: LD_ADDR_VAR 0 1
37777: PUSH
37778: LD_INT 34
37780: PUSH
37781: LD_EXP 64
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PPUSH
37790: CALL_OW 69
37794: PUSH
37795: FOR_IN
37796: IFFALSE 38016
// begin if not i in hackTanks then
37798: LD_VAR 0 1
37802: PUSH
37803: LD_EXP 134
37807: IN
37808: NOT
37809: IFFALSE 37892
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37811: LD_ADDR_EXP 134
37815: PUSH
37816: LD_EXP 134
37820: PPUSH
37821: LD_EXP 134
37825: PUSH
37826: LD_INT 1
37828: PLUS
37829: PPUSH
37830: LD_VAR 0 1
37834: PPUSH
37835: CALL_OW 1
37839: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37840: LD_ADDR_EXP 135
37844: PUSH
37845: LD_EXP 135
37849: PPUSH
37850: LD_EXP 135
37854: PUSH
37855: LD_INT 1
37857: PLUS
37858: PPUSH
37859: EMPTY
37860: PPUSH
37861: CALL_OW 1
37865: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37866: LD_ADDR_EXP 138
37870: PUSH
37871: LD_EXP 138
37875: PPUSH
37876: LD_EXP 138
37880: PUSH
37881: LD_INT 1
37883: PLUS
37884: PPUSH
37885: EMPTY
37886: PPUSH
37887: CALL_OW 1
37891: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37892: LD_VAR 0 1
37896: PPUSH
37897: CALL_OW 302
37901: NOT
37902: IFFALSE 37915
// begin HackUnlinkAll ( i ) ;
37904: LD_VAR 0 1
37908: PPUSH
37909: CALL 38021 0 1
// continue ;
37913: GO 37795
// end ; HackCheckCapturedStatus ( i ) ;
37915: LD_VAR 0 1
37919: PPUSH
37920: CALL 38464 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37924: LD_ADDR_VAR 0 2
37928: PUSH
37929: LD_INT 81
37931: PUSH
37932: LD_VAR 0 1
37936: PPUSH
37937: CALL_OW 255
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 33
37948: PUSH
37949: LD_INT 3
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 91
37958: PUSH
37959: LD_VAR 0 1
37963: PUSH
37964: LD_EXP 137
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 50
37976: PUSH
37977: EMPTY
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: PPUSH
37986: CALL_OW 69
37990: ST_TO_ADDR
// if not tmp then
37991: LD_VAR 0 2
37995: NOT
37996: IFFALSE 38000
// continue ;
37998: GO 37795
// HackLink ( i , tmp ) ;
38000: LD_VAR 0 1
38004: PPUSH
38005: LD_VAR 0 2
38009: PPUSH
38010: CALL 38157 0 2
// end ;
38014: GO 37795
38016: POP
38017: POP
// end ;
38018: PPOPN 2
38020: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38021: LD_INT 0
38023: PPUSH
38024: PPUSH
38025: PPUSH
// if not hack in hackTanks then
38026: LD_VAR 0 1
38030: PUSH
38031: LD_EXP 134
38035: IN
38036: NOT
38037: IFFALSE 38041
// exit ;
38039: GO 38152
// index := GetElementIndex ( hackTanks , hack ) ;
38041: LD_ADDR_VAR 0 4
38045: PUSH
38046: LD_EXP 134
38050: PPUSH
38051: LD_VAR 0 1
38055: PPUSH
38056: CALL 45586 0 2
38060: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38061: LD_EXP 135
38065: PUSH
38066: LD_VAR 0 4
38070: ARRAY
38071: IFFALSE 38152
// begin for i in hackTanksCaptured [ index ] do
38073: LD_ADDR_VAR 0 3
38077: PUSH
38078: LD_EXP 135
38082: PUSH
38083: LD_VAR 0 4
38087: ARRAY
38088: PUSH
38089: FOR_IN
38090: IFFALSE 38116
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38092: LD_VAR 0 3
38096: PUSH
38097: LD_INT 1
38099: ARRAY
38100: PPUSH
38101: LD_VAR 0 3
38105: PUSH
38106: LD_INT 2
38108: ARRAY
38109: PPUSH
38110: CALL_OW 235
38114: GO 38089
38116: POP
38117: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38118: LD_ADDR_EXP 135
38122: PUSH
38123: LD_EXP 135
38127: PPUSH
38128: LD_VAR 0 4
38132: PPUSH
38133: EMPTY
38134: PPUSH
38135: CALL_OW 1
38139: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38140: LD_VAR 0 1
38144: PPUSH
38145: LD_INT 0
38147: PPUSH
38148: CALL_OW 505
// end ; end ;
38152: LD_VAR 0 2
38156: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38157: LD_INT 0
38159: PPUSH
38160: PPUSH
38161: PPUSH
// if not hack in hackTanks or not vehicles then
38162: LD_VAR 0 1
38166: PUSH
38167: LD_EXP 134
38171: IN
38172: NOT
38173: PUSH
38174: LD_VAR 0 2
38178: NOT
38179: OR
38180: IFFALSE 38184
// exit ;
38182: GO 38459
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38184: LD_ADDR_VAR 0 2
38188: PUSH
38189: LD_VAR 0 1
38193: PPUSH
38194: LD_VAR 0 2
38198: PPUSH
38199: LD_INT 1
38201: PPUSH
38202: LD_INT 1
38204: PPUSH
38205: CALL 46236 0 4
38209: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38210: LD_ADDR_VAR 0 5
38214: PUSH
38215: LD_EXP 134
38219: PPUSH
38220: LD_VAR 0 1
38224: PPUSH
38225: CALL 45586 0 2
38229: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38230: LD_EXP 135
38234: PUSH
38235: LD_VAR 0 5
38239: ARRAY
38240: PUSH
38241: LD_EXP 136
38245: LESS
38246: IFFALSE 38435
// begin for i := 1 to vehicles do
38248: LD_ADDR_VAR 0 4
38252: PUSH
38253: DOUBLE
38254: LD_INT 1
38256: DEC
38257: ST_TO_ADDR
38258: LD_VAR 0 2
38262: PUSH
38263: FOR_TO
38264: IFFALSE 38433
// begin if hackTanksCaptured [ index ] = hackLimit then
38266: LD_EXP 135
38270: PUSH
38271: LD_VAR 0 5
38275: ARRAY
38276: PUSH
38277: LD_EXP 136
38281: EQUAL
38282: IFFALSE 38286
// break ;
38284: GO 38433
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38286: LD_ADDR_EXP 138
38290: PUSH
38291: LD_EXP 138
38295: PPUSH
38296: LD_VAR 0 5
38300: PPUSH
38301: LD_EXP 138
38305: PUSH
38306: LD_VAR 0 5
38310: ARRAY
38311: PUSH
38312: LD_INT 1
38314: PLUS
38315: PPUSH
38316: CALL_OW 1
38320: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38321: LD_ADDR_EXP 135
38325: PUSH
38326: LD_EXP 135
38330: PPUSH
38331: LD_VAR 0 5
38335: PUSH
38336: LD_EXP 135
38340: PUSH
38341: LD_VAR 0 5
38345: ARRAY
38346: PUSH
38347: LD_INT 1
38349: PLUS
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PPUSH
38355: LD_VAR 0 2
38359: PUSH
38360: LD_VAR 0 4
38364: ARRAY
38365: PUSH
38366: LD_VAR 0 2
38370: PUSH
38371: LD_VAR 0 4
38375: ARRAY
38376: PPUSH
38377: CALL_OW 255
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PPUSH
38386: CALL 45801 0 3
38390: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38391: LD_VAR 0 2
38395: PUSH
38396: LD_VAR 0 4
38400: ARRAY
38401: PPUSH
38402: LD_VAR 0 1
38406: PPUSH
38407: CALL_OW 255
38411: PPUSH
38412: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38416: LD_VAR 0 2
38420: PUSH
38421: LD_VAR 0 4
38425: ARRAY
38426: PPUSH
38427: CALL_OW 141
// end ;
38431: GO 38263
38433: POP
38434: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38435: LD_VAR 0 1
38439: PPUSH
38440: LD_EXP 135
38444: PUSH
38445: LD_VAR 0 5
38449: ARRAY
38450: PUSH
38451: LD_INT 0
38453: PLUS
38454: PPUSH
38455: CALL_OW 505
// end ;
38459: LD_VAR 0 3
38463: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38464: LD_INT 0
38466: PPUSH
38467: PPUSH
38468: PPUSH
38469: PPUSH
// if not hack in hackTanks then
38470: LD_VAR 0 1
38474: PUSH
38475: LD_EXP 134
38479: IN
38480: NOT
38481: IFFALSE 38485
// exit ;
38483: GO 38725
// index := GetElementIndex ( hackTanks , hack ) ;
38485: LD_ADDR_VAR 0 4
38489: PUSH
38490: LD_EXP 134
38494: PPUSH
38495: LD_VAR 0 1
38499: PPUSH
38500: CALL 45586 0 2
38504: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38505: LD_ADDR_VAR 0 3
38509: PUSH
38510: DOUBLE
38511: LD_EXP 135
38515: PUSH
38516: LD_VAR 0 4
38520: ARRAY
38521: INC
38522: ST_TO_ADDR
38523: LD_INT 1
38525: PUSH
38526: FOR_DOWNTO
38527: IFFALSE 38699
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38529: LD_ADDR_VAR 0 5
38533: PUSH
38534: LD_EXP 135
38538: PUSH
38539: LD_VAR 0 4
38543: ARRAY
38544: PUSH
38545: LD_VAR 0 3
38549: ARRAY
38550: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38551: LD_VAR 0 5
38555: PUSH
38556: LD_INT 1
38558: ARRAY
38559: PPUSH
38560: CALL_OW 302
38564: NOT
38565: PUSH
38566: LD_VAR 0 5
38570: PUSH
38571: LD_INT 1
38573: ARRAY
38574: PPUSH
38575: CALL_OW 255
38579: PUSH
38580: LD_VAR 0 1
38584: PPUSH
38585: CALL_OW 255
38589: NONEQUAL
38590: OR
38591: IFFALSE 38697
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38593: LD_VAR 0 5
38597: PUSH
38598: LD_INT 1
38600: ARRAY
38601: PPUSH
38602: CALL_OW 305
38606: PUSH
38607: LD_VAR 0 5
38611: PUSH
38612: LD_INT 1
38614: ARRAY
38615: PPUSH
38616: CALL_OW 255
38620: PUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 255
38630: EQUAL
38631: AND
38632: IFFALSE 38656
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38634: LD_VAR 0 5
38638: PUSH
38639: LD_INT 1
38641: ARRAY
38642: PPUSH
38643: LD_VAR 0 5
38647: PUSH
38648: LD_INT 2
38650: ARRAY
38651: PPUSH
38652: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38656: LD_ADDR_EXP 135
38660: PUSH
38661: LD_EXP 135
38665: PPUSH
38666: LD_VAR 0 4
38670: PPUSH
38671: LD_EXP 135
38675: PUSH
38676: LD_VAR 0 4
38680: ARRAY
38681: PPUSH
38682: LD_VAR 0 3
38686: PPUSH
38687: CALL_OW 3
38691: PPUSH
38692: CALL_OW 1
38696: ST_TO_ADDR
// end ; end ;
38697: GO 38526
38699: POP
38700: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38701: LD_VAR 0 1
38705: PPUSH
38706: LD_EXP 135
38710: PUSH
38711: LD_VAR 0 4
38715: ARRAY
38716: PUSH
38717: LD_INT 0
38719: PLUS
38720: PPUSH
38721: CALL_OW 505
// end ;
38725: LD_VAR 0 2
38729: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38730: LD_INT 0
38732: PPUSH
38733: PPUSH
38734: PPUSH
38735: PPUSH
// if not hack in hackTanks then
38736: LD_VAR 0 1
38740: PUSH
38741: LD_EXP 134
38745: IN
38746: NOT
38747: IFFALSE 38751
// exit ;
38749: GO 38836
// index := GetElementIndex ( hackTanks , hack ) ;
38751: LD_ADDR_VAR 0 5
38755: PUSH
38756: LD_EXP 134
38760: PPUSH
38761: LD_VAR 0 1
38765: PPUSH
38766: CALL 45586 0 2
38770: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38771: LD_ADDR_VAR 0 4
38775: PUSH
38776: DOUBLE
38777: LD_INT 1
38779: DEC
38780: ST_TO_ADDR
38781: LD_EXP 135
38785: PUSH
38786: LD_VAR 0 5
38790: ARRAY
38791: PUSH
38792: FOR_TO
38793: IFFALSE 38834
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38795: LD_EXP 135
38799: PUSH
38800: LD_VAR 0 5
38804: ARRAY
38805: PUSH
38806: LD_VAR 0 4
38810: ARRAY
38811: PUSH
38812: LD_INT 1
38814: ARRAY
38815: PUSH
38816: LD_VAR 0 2
38820: EQUAL
38821: IFFALSE 38832
// KillUnit ( vehicle ) ;
38823: LD_VAR 0 2
38827: PPUSH
38828: CALL_OW 66
38832: GO 38792
38834: POP
38835: POP
// end ;
38836: LD_VAR 0 3
38840: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38841: LD_EXP 139
38845: NOT
38846: IFFALSE 38881
38848: GO 38850
38850: DISABLE
// begin initMiner := true ;
38851: LD_ADDR_EXP 139
38855: PUSH
38856: LD_INT 1
38858: ST_TO_ADDR
// minersList := [ ] ;
38859: LD_ADDR_EXP 140
38863: PUSH
38864: EMPTY
38865: ST_TO_ADDR
// minerMinesList := [ ] ;
38866: LD_ADDR_EXP 141
38870: PUSH
38871: EMPTY
38872: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38873: LD_ADDR_EXP 142
38877: PUSH
38878: LD_INT 5
38880: ST_TO_ADDR
// end ;
38881: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38882: LD_EXP 139
38886: PUSH
38887: LD_INT 34
38889: PUSH
38890: LD_EXP 69
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PPUSH
38899: CALL_OW 69
38903: AND
38904: IFFALSE 39367
38906: GO 38908
38908: DISABLE
38909: LD_INT 0
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
// begin enable ;
38915: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38916: LD_ADDR_VAR 0 1
38920: PUSH
38921: LD_INT 34
38923: PUSH
38924: LD_EXP 69
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PPUSH
38933: CALL_OW 69
38937: PUSH
38938: FOR_IN
38939: IFFALSE 39011
// begin if not i in minersList then
38941: LD_VAR 0 1
38945: PUSH
38946: LD_EXP 140
38950: IN
38951: NOT
38952: IFFALSE 39009
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38954: LD_ADDR_EXP 140
38958: PUSH
38959: LD_EXP 140
38963: PPUSH
38964: LD_EXP 140
38968: PUSH
38969: LD_INT 1
38971: PLUS
38972: PPUSH
38973: LD_VAR 0 1
38977: PPUSH
38978: CALL_OW 1
38982: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38983: LD_ADDR_EXP 141
38987: PUSH
38988: LD_EXP 141
38992: PPUSH
38993: LD_EXP 141
38997: PUSH
38998: LD_INT 1
39000: PLUS
39001: PPUSH
39002: EMPTY
39003: PPUSH
39004: CALL_OW 1
39008: ST_TO_ADDR
// end end ;
39009: GO 38938
39011: POP
39012: POP
// for i := minerMinesList downto 1 do
39013: LD_ADDR_VAR 0 1
39017: PUSH
39018: DOUBLE
39019: LD_EXP 141
39023: INC
39024: ST_TO_ADDR
39025: LD_INT 1
39027: PUSH
39028: FOR_DOWNTO
39029: IFFALSE 39365
// begin if IsLive ( minersList [ i ] ) then
39031: LD_EXP 140
39035: PUSH
39036: LD_VAR 0 1
39040: ARRAY
39041: PPUSH
39042: CALL_OW 300
39046: IFFALSE 39074
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39048: LD_EXP 140
39052: PUSH
39053: LD_VAR 0 1
39057: ARRAY
39058: PPUSH
39059: LD_EXP 141
39063: PUSH
39064: LD_VAR 0 1
39068: ARRAY
39069: PPUSH
39070: CALL_OW 505
// if not minerMinesList [ i ] then
39074: LD_EXP 141
39078: PUSH
39079: LD_VAR 0 1
39083: ARRAY
39084: NOT
39085: IFFALSE 39089
// continue ;
39087: GO 39028
// for j := minerMinesList [ i ] downto 1 do
39089: LD_ADDR_VAR 0 2
39093: PUSH
39094: DOUBLE
39095: LD_EXP 141
39099: PUSH
39100: LD_VAR 0 1
39104: ARRAY
39105: INC
39106: ST_TO_ADDR
39107: LD_INT 1
39109: PUSH
39110: FOR_DOWNTO
39111: IFFALSE 39361
// begin side := GetSide ( minersList [ i ] ) ;
39113: LD_ADDR_VAR 0 3
39117: PUSH
39118: LD_EXP 140
39122: PUSH
39123: LD_VAR 0 1
39127: ARRAY
39128: PPUSH
39129: CALL_OW 255
39133: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39134: LD_ADDR_VAR 0 4
39138: PUSH
39139: LD_EXP 141
39143: PUSH
39144: LD_VAR 0 1
39148: ARRAY
39149: PUSH
39150: LD_VAR 0 2
39154: ARRAY
39155: PUSH
39156: LD_INT 1
39158: ARRAY
39159: PPUSH
39160: LD_EXP 141
39164: PUSH
39165: LD_VAR 0 1
39169: ARRAY
39170: PUSH
39171: LD_VAR 0 2
39175: ARRAY
39176: PUSH
39177: LD_INT 2
39179: ARRAY
39180: PPUSH
39181: CALL_OW 428
39185: ST_TO_ADDR
// if not tmp then
39186: LD_VAR 0 4
39190: NOT
39191: IFFALSE 39195
// continue ;
39193: GO 39110
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39195: LD_VAR 0 4
39199: PUSH
39200: LD_INT 81
39202: PUSH
39203: LD_VAR 0 3
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PPUSH
39212: CALL_OW 69
39216: IN
39217: PUSH
39218: LD_EXP 141
39222: PUSH
39223: LD_VAR 0 1
39227: ARRAY
39228: PUSH
39229: LD_VAR 0 2
39233: ARRAY
39234: PUSH
39235: LD_INT 1
39237: ARRAY
39238: PPUSH
39239: LD_EXP 141
39243: PUSH
39244: LD_VAR 0 1
39248: ARRAY
39249: PUSH
39250: LD_VAR 0 2
39254: ARRAY
39255: PUSH
39256: LD_INT 2
39258: ARRAY
39259: PPUSH
39260: CALL_OW 458
39264: AND
39265: IFFALSE 39359
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39267: LD_EXP 141
39271: PUSH
39272: LD_VAR 0 1
39276: ARRAY
39277: PUSH
39278: LD_VAR 0 2
39282: ARRAY
39283: PUSH
39284: LD_INT 1
39286: ARRAY
39287: PPUSH
39288: LD_EXP 141
39292: PUSH
39293: LD_VAR 0 1
39297: ARRAY
39298: PUSH
39299: LD_VAR 0 2
39303: ARRAY
39304: PUSH
39305: LD_INT 2
39307: ARRAY
39308: PPUSH
39309: LD_VAR 0 3
39313: PPUSH
39314: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39318: LD_ADDR_EXP 141
39322: PUSH
39323: LD_EXP 141
39327: PPUSH
39328: LD_VAR 0 1
39332: PPUSH
39333: LD_EXP 141
39337: PUSH
39338: LD_VAR 0 1
39342: ARRAY
39343: PPUSH
39344: LD_VAR 0 2
39348: PPUSH
39349: CALL_OW 3
39353: PPUSH
39354: CALL_OW 1
39358: ST_TO_ADDR
// end ; end ;
39359: GO 39110
39361: POP
39362: POP
// end ;
39363: GO 39028
39365: POP
39366: POP
// end ;
39367: PPOPN 4
39369: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39370: LD_INT 0
39372: PPUSH
39373: PPUSH
// result := false ;
39374: LD_ADDR_VAR 0 4
39378: PUSH
39379: LD_INT 0
39381: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39382: LD_VAR 0 1
39386: PPUSH
39387: CALL_OW 264
39391: PUSH
39392: LD_EXP 69
39396: EQUAL
39397: NOT
39398: IFFALSE 39402
// exit ;
39400: GO 39642
// index := GetElementIndex ( minersList , unit ) ;
39402: LD_ADDR_VAR 0 5
39406: PUSH
39407: LD_EXP 140
39411: PPUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL 45586 0 2
39421: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39422: LD_EXP 141
39426: PUSH
39427: LD_VAR 0 5
39431: ARRAY
39432: PUSH
39433: LD_EXP 142
39437: GREATEREQUAL
39438: IFFALSE 39442
// exit ;
39440: GO 39642
// ComMoveXY ( unit , x , y ) ;
39442: LD_VAR 0 1
39446: PPUSH
39447: LD_VAR 0 2
39451: PPUSH
39452: LD_VAR 0 3
39456: PPUSH
39457: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39461: LD_INT 35
39463: PPUSH
39464: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39468: LD_VAR 0 1
39472: PPUSH
39473: LD_VAR 0 2
39477: PPUSH
39478: LD_VAR 0 3
39482: PPUSH
39483: CALL 75650 0 3
39487: NOT
39488: PUSH
39489: LD_VAR 0 1
39493: PPUSH
39494: CALL_OW 314
39498: AND
39499: IFFALSE 39503
// exit ;
39501: GO 39642
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39503: LD_VAR 0 2
39507: PPUSH
39508: LD_VAR 0 3
39512: PPUSH
39513: CALL_OW 428
39517: PUSH
39518: LD_VAR 0 1
39522: EQUAL
39523: PUSH
39524: LD_VAR 0 1
39528: PPUSH
39529: CALL_OW 314
39533: NOT
39534: AND
39535: IFFALSE 39461
// PlaySoundXY ( x , y , PlantMine ) ;
39537: LD_VAR 0 2
39541: PPUSH
39542: LD_VAR 0 3
39546: PPUSH
39547: LD_STRING PlantMine
39549: PPUSH
39550: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39554: LD_VAR 0 2
39558: PPUSH
39559: LD_VAR 0 3
39563: PPUSH
39564: LD_VAR 0 1
39568: PPUSH
39569: CALL_OW 255
39573: PPUSH
39574: LD_INT 0
39576: PPUSH
39577: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39581: LD_ADDR_EXP 141
39585: PUSH
39586: LD_EXP 141
39590: PPUSH
39591: LD_VAR 0 5
39595: PUSH
39596: LD_EXP 141
39600: PUSH
39601: LD_VAR 0 5
39605: ARRAY
39606: PUSH
39607: LD_INT 1
39609: PLUS
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PPUSH
39615: LD_VAR 0 2
39619: PUSH
39620: LD_VAR 0 3
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PPUSH
39629: CALL 45801 0 3
39633: ST_TO_ADDR
// result := true ;
39634: LD_ADDR_VAR 0 4
39638: PUSH
39639: LD_INT 1
39641: ST_TO_ADDR
// end ;
39642: LD_VAR 0 4
39646: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39647: LD_INT 0
39649: PPUSH
39650: PPUSH
39651: PPUSH
// if not unit in minersList then
39652: LD_VAR 0 1
39656: PUSH
39657: LD_EXP 140
39661: IN
39662: NOT
39663: IFFALSE 39667
// exit ;
39665: GO 40059
// index := GetElementIndex ( minersList , unit ) ;
39667: LD_ADDR_VAR 0 6
39671: PUSH
39672: LD_EXP 140
39676: PPUSH
39677: LD_VAR 0 1
39681: PPUSH
39682: CALL 45586 0 2
39686: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39687: LD_ADDR_VAR 0 5
39691: PUSH
39692: DOUBLE
39693: LD_EXP 141
39697: PUSH
39698: LD_VAR 0 6
39702: ARRAY
39703: INC
39704: ST_TO_ADDR
39705: LD_INT 1
39707: PUSH
39708: FOR_DOWNTO
39709: IFFALSE 39870
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39711: LD_EXP 141
39715: PUSH
39716: LD_VAR 0 6
39720: ARRAY
39721: PUSH
39722: LD_VAR 0 5
39726: ARRAY
39727: PUSH
39728: LD_INT 1
39730: ARRAY
39731: PUSH
39732: LD_VAR 0 2
39736: EQUAL
39737: PUSH
39738: LD_EXP 141
39742: PUSH
39743: LD_VAR 0 6
39747: ARRAY
39748: PUSH
39749: LD_VAR 0 5
39753: ARRAY
39754: PUSH
39755: LD_INT 2
39757: ARRAY
39758: PUSH
39759: LD_VAR 0 3
39763: EQUAL
39764: AND
39765: IFFALSE 39868
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39767: LD_EXP 141
39771: PUSH
39772: LD_VAR 0 6
39776: ARRAY
39777: PUSH
39778: LD_VAR 0 5
39782: ARRAY
39783: PUSH
39784: LD_INT 1
39786: ARRAY
39787: PPUSH
39788: LD_EXP 141
39792: PUSH
39793: LD_VAR 0 6
39797: ARRAY
39798: PUSH
39799: LD_VAR 0 5
39803: ARRAY
39804: PUSH
39805: LD_INT 2
39807: ARRAY
39808: PPUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: CALL_OW 255
39818: PPUSH
39819: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39823: LD_ADDR_EXP 141
39827: PUSH
39828: LD_EXP 141
39832: PPUSH
39833: LD_VAR 0 6
39837: PPUSH
39838: LD_EXP 141
39842: PUSH
39843: LD_VAR 0 6
39847: ARRAY
39848: PPUSH
39849: LD_VAR 0 5
39853: PPUSH
39854: CALL_OW 3
39858: PPUSH
39859: CALL_OW 1
39863: ST_TO_ADDR
// exit ;
39864: POP
39865: POP
39866: GO 40059
// end ; end ;
39868: GO 39708
39870: POP
39871: POP
// for i := minerMinesList [ index ] downto 1 do
39872: LD_ADDR_VAR 0 5
39876: PUSH
39877: DOUBLE
39878: LD_EXP 141
39882: PUSH
39883: LD_VAR 0 6
39887: ARRAY
39888: INC
39889: ST_TO_ADDR
39890: LD_INT 1
39892: PUSH
39893: FOR_DOWNTO
39894: IFFALSE 40057
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39896: LD_EXP 141
39900: PUSH
39901: LD_VAR 0 6
39905: ARRAY
39906: PUSH
39907: LD_VAR 0 5
39911: ARRAY
39912: PUSH
39913: LD_INT 1
39915: ARRAY
39916: PPUSH
39917: LD_EXP 141
39921: PUSH
39922: LD_VAR 0 6
39926: ARRAY
39927: PUSH
39928: LD_VAR 0 5
39932: ARRAY
39933: PUSH
39934: LD_INT 2
39936: ARRAY
39937: PPUSH
39938: LD_VAR 0 2
39942: PPUSH
39943: LD_VAR 0 3
39947: PPUSH
39948: CALL_OW 298
39952: PUSH
39953: LD_INT 6
39955: LESS
39956: IFFALSE 40055
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39958: LD_EXP 141
39962: PUSH
39963: LD_VAR 0 6
39967: ARRAY
39968: PUSH
39969: LD_VAR 0 5
39973: ARRAY
39974: PUSH
39975: LD_INT 1
39977: ARRAY
39978: PPUSH
39979: LD_EXP 141
39983: PUSH
39984: LD_VAR 0 6
39988: ARRAY
39989: PUSH
39990: LD_VAR 0 5
39994: ARRAY
39995: PUSH
39996: LD_INT 2
39998: ARRAY
39999: PPUSH
40000: LD_VAR 0 1
40004: PPUSH
40005: CALL_OW 255
40009: PPUSH
40010: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40014: LD_ADDR_EXP 141
40018: PUSH
40019: LD_EXP 141
40023: PPUSH
40024: LD_VAR 0 6
40028: PPUSH
40029: LD_EXP 141
40033: PUSH
40034: LD_VAR 0 6
40038: ARRAY
40039: PPUSH
40040: LD_VAR 0 5
40044: PPUSH
40045: CALL_OW 3
40049: PPUSH
40050: CALL_OW 1
40054: ST_TO_ADDR
// end ; end ;
40055: GO 39893
40057: POP
40058: POP
// end ;
40059: LD_VAR 0 4
40063: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40064: LD_INT 0
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40075: LD_VAR 0 1
40079: PPUSH
40080: CALL_OW 264
40084: PUSH
40085: LD_EXP 69
40089: EQUAL
40090: NOT
40091: PUSH
40092: LD_VAR 0 1
40096: PUSH
40097: LD_EXP 140
40101: IN
40102: NOT
40103: OR
40104: IFFALSE 40108
// exit ;
40106: GO 40430
// index := GetElementIndex ( minersList , unit ) ;
40108: LD_ADDR_VAR 0 6
40112: PUSH
40113: LD_EXP 140
40117: PPUSH
40118: LD_VAR 0 1
40122: PPUSH
40123: CALL 45586 0 2
40127: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40128: LD_ADDR_VAR 0 8
40132: PUSH
40133: LD_EXP 142
40137: PUSH
40138: LD_EXP 141
40142: PUSH
40143: LD_VAR 0 6
40147: ARRAY
40148: MINUS
40149: ST_TO_ADDR
// if not minesFreeAmount then
40150: LD_VAR 0 8
40154: NOT
40155: IFFALSE 40159
// exit ;
40157: GO 40430
// tmp := [ ] ;
40159: LD_ADDR_VAR 0 7
40163: PUSH
40164: EMPTY
40165: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40166: LD_ADDR_VAR 0 5
40170: PUSH
40171: DOUBLE
40172: LD_INT 1
40174: DEC
40175: ST_TO_ADDR
40176: LD_VAR 0 8
40180: PUSH
40181: FOR_TO
40182: IFFALSE 40377
// begin _d := rand ( 0 , 5 ) ;
40184: LD_ADDR_VAR 0 11
40188: PUSH
40189: LD_INT 0
40191: PPUSH
40192: LD_INT 5
40194: PPUSH
40195: CALL_OW 12
40199: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40200: LD_ADDR_VAR 0 12
40204: PUSH
40205: LD_INT 2
40207: PPUSH
40208: LD_INT 6
40210: PPUSH
40211: CALL_OW 12
40215: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40216: LD_ADDR_VAR 0 9
40220: PUSH
40221: LD_VAR 0 2
40225: PPUSH
40226: LD_VAR 0 11
40230: PPUSH
40231: LD_VAR 0 12
40235: PPUSH
40236: CALL_OW 272
40240: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40241: LD_ADDR_VAR 0 10
40245: PUSH
40246: LD_VAR 0 3
40250: PPUSH
40251: LD_VAR 0 11
40255: PPUSH
40256: LD_VAR 0 12
40260: PPUSH
40261: CALL_OW 273
40265: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40266: LD_VAR 0 9
40270: PPUSH
40271: LD_VAR 0 10
40275: PPUSH
40276: CALL_OW 488
40280: PUSH
40281: LD_VAR 0 9
40285: PUSH
40286: LD_VAR 0 10
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_VAR 0 7
40299: IN
40300: NOT
40301: AND
40302: PUSH
40303: LD_VAR 0 9
40307: PPUSH
40308: LD_VAR 0 10
40312: PPUSH
40313: CALL_OW 458
40317: NOT
40318: AND
40319: IFFALSE 40361
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40321: LD_ADDR_VAR 0 7
40325: PUSH
40326: LD_VAR 0 7
40330: PPUSH
40331: LD_VAR 0 7
40335: PUSH
40336: LD_INT 1
40338: PLUS
40339: PPUSH
40340: LD_VAR 0 9
40344: PUSH
40345: LD_VAR 0 10
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PPUSH
40354: CALL_OW 1
40358: ST_TO_ADDR
40359: GO 40375
// i := i - 1 ;
40361: LD_ADDR_VAR 0 5
40365: PUSH
40366: LD_VAR 0 5
40370: PUSH
40371: LD_INT 1
40373: MINUS
40374: ST_TO_ADDR
// end ;
40375: GO 40181
40377: POP
40378: POP
// for i in tmp do
40379: LD_ADDR_VAR 0 5
40383: PUSH
40384: LD_VAR 0 7
40388: PUSH
40389: FOR_IN
40390: IFFALSE 40428
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40392: LD_VAR 0 1
40396: PPUSH
40397: LD_VAR 0 5
40401: PUSH
40402: LD_INT 1
40404: ARRAY
40405: PPUSH
40406: LD_VAR 0 5
40410: PUSH
40411: LD_INT 2
40413: ARRAY
40414: PPUSH
40415: CALL 39370 0 3
40419: NOT
40420: IFFALSE 40426
// exit ;
40422: POP
40423: POP
40424: GO 40430
40426: GO 40389
40428: POP
40429: POP
// end ;
40430: LD_VAR 0 4
40434: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40435: LD_INT 0
40437: PPUSH
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
// if not GetClass ( unit ) = class_sniper then
40444: LD_VAR 0 1
40448: PPUSH
40449: CALL_OW 257
40453: PUSH
40454: LD_INT 5
40456: EQUAL
40457: NOT
40458: IFFALSE 40462
// exit ;
40460: GO 40850
// dist := 8 ;
40462: LD_ADDR_VAR 0 5
40466: PUSH
40467: LD_INT 8
40469: ST_TO_ADDR
// viewRange := 12 ;
40470: LD_ADDR_VAR 0 7
40474: PUSH
40475: LD_INT 12
40477: ST_TO_ADDR
// side := GetSide ( unit ) ;
40478: LD_ADDR_VAR 0 6
40482: PUSH
40483: LD_VAR 0 1
40487: PPUSH
40488: CALL_OW 255
40492: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40493: LD_INT 61
40495: PPUSH
40496: LD_VAR 0 6
40500: PPUSH
40501: CALL_OW 321
40505: PUSH
40506: LD_INT 2
40508: EQUAL
40509: IFFALSE 40519
// viewRange := 16 ;
40511: LD_ADDR_VAR 0 7
40515: PUSH
40516: LD_INT 16
40518: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40519: LD_VAR 0 1
40523: PPUSH
40524: LD_VAR 0 2
40528: PPUSH
40529: LD_VAR 0 3
40533: PPUSH
40534: CALL_OW 297
40538: PUSH
40539: LD_VAR 0 5
40543: GREATER
40544: IFFALSE 40623
// begin ComMoveXY ( unit , x , y ) ;
40546: LD_VAR 0 1
40550: PPUSH
40551: LD_VAR 0 2
40555: PPUSH
40556: LD_VAR 0 3
40560: PPUSH
40561: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40565: LD_INT 35
40567: PPUSH
40568: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40572: LD_VAR 0 1
40576: PPUSH
40577: LD_VAR 0 2
40581: PPUSH
40582: LD_VAR 0 3
40586: PPUSH
40587: CALL 75650 0 3
40591: NOT
40592: IFFALSE 40596
// exit ;
40594: GO 40850
// until GetDistUnitXY ( unit , x , y ) < dist ;
40596: LD_VAR 0 1
40600: PPUSH
40601: LD_VAR 0 2
40605: PPUSH
40606: LD_VAR 0 3
40610: PPUSH
40611: CALL_OW 297
40615: PUSH
40616: LD_VAR 0 5
40620: LESS
40621: IFFALSE 40565
// end ; ComTurnXY ( unit , x , y ) ;
40623: LD_VAR 0 1
40627: PPUSH
40628: LD_VAR 0 2
40632: PPUSH
40633: LD_VAR 0 3
40637: PPUSH
40638: CALL_OW 118
// wait ( 5 ) ;
40642: LD_INT 5
40644: PPUSH
40645: CALL_OW 67
// _d := GetDir ( unit ) ;
40649: LD_ADDR_VAR 0 10
40653: PUSH
40654: LD_VAR 0 1
40658: PPUSH
40659: CALL_OW 254
40663: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40664: LD_ADDR_VAR 0 8
40668: PUSH
40669: LD_VAR 0 1
40673: PPUSH
40674: CALL_OW 250
40678: PPUSH
40679: LD_VAR 0 10
40683: PPUSH
40684: LD_VAR 0 5
40688: PPUSH
40689: CALL_OW 272
40693: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40694: LD_ADDR_VAR 0 9
40698: PUSH
40699: LD_VAR 0 1
40703: PPUSH
40704: CALL_OW 251
40708: PPUSH
40709: LD_VAR 0 10
40713: PPUSH
40714: LD_VAR 0 5
40718: PPUSH
40719: CALL_OW 273
40723: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40724: LD_VAR 0 8
40728: PPUSH
40729: LD_VAR 0 9
40733: PPUSH
40734: CALL_OW 488
40738: NOT
40739: IFFALSE 40743
// exit ;
40741: GO 40850
// ComAnimCustom ( unit , 1 ) ;
40743: LD_VAR 0 1
40747: PPUSH
40748: LD_INT 1
40750: PPUSH
40751: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40755: LD_VAR 0 8
40759: PPUSH
40760: LD_VAR 0 9
40764: PPUSH
40765: LD_VAR 0 6
40769: PPUSH
40770: LD_VAR 0 7
40774: PPUSH
40775: CALL_OW 330
// repeat wait ( 1 ) ;
40779: LD_INT 1
40781: PPUSH
40782: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40786: LD_VAR 0 1
40790: PPUSH
40791: CALL_OW 316
40795: PUSH
40796: LD_VAR 0 1
40800: PPUSH
40801: CALL_OW 314
40805: OR
40806: PUSH
40807: LD_VAR 0 1
40811: PPUSH
40812: CALL_OW 302
40816: NOT
40817: OR
40818: PUSH
40819: LD_VAR 0 1
40823: PPUSH
40824: CALL_OW 301
40828: OR
40829: IFFALSE 40779
// RemoveSeeing ( _x , _y , side ) ;
40831: LD_VAR 0 8
40835: PPUSH
40836: LD_VAR 0 9
40840: PPUSH
40841: LD_VAR 0 6
40845: PPUSH
40846: CALL_OW 331
// end ; end_of_file
40850: LD_VAR 0 4
40854: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40855: LD_INT 0
40857: PPUSH
40858: PPUSH
// if exist_mode then
40859: LD_VAR 0 2
40863: IFFALSE 40888
// unit := CreateCharacter ( prefix & ident ) else
40865: LD_ADDR_VAR 0 5
40869: PUSH
40870: LD_VAR 0 3
40874: PUSH
40875: LD_VAR 0 1
40879: STR
40880: PPUSH
40881: CALL_OW 34
40885: ST_TO_ADDR
40886: GO 40903
// unit := NewCharacter ( ident ) ;
40888: LD_ADDR_VAR 0 5
40892: PUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 25
40902: ST_TO_ADDR
// result := unit ;
40903: LD_ADDR_VAR 0 4
40907: PUSH
40908: LD_VAR 0 5
40912: ST_TO_ADDR
// end ;
40913: LD_VAR 0 4
40917: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40918: LD_INT 0
40920: PPUSH
40921: PPUSH
// if not side or not nation then
40922: LD_VAR 0 1
40926: NOT
40927: PUSH
40928: LD_VAR 0 2
40932: NOT
40933: OR
40934: IFFALSE 40938
// exit ;
40936: GO 41702
// case nation of nation_american :
40938: LD_VAR 0 2
40942: PUSH
40943: LD_INT 1
40945: DOUBLE
40946: EQUAL
40947: IFTRUE 40951
40949: GO 41165
40951: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40952: LD_ADDR_VAR 0 4
40956: PUSH
40957: LD_INT 35
40959: PUSH
40960: LD_INT 45
40962: PUSH
40963: LD_INT 46
40965: PUSH
40966: LD_INT 47
40968: PUSH
40969: LD_INT 82
40971: PUSH
40972: LD_INT 83
40974: PUSH
40975: LD_INT 84
40977: PUSH
40978: LD_INT 85
40980: PUSH
40981: LD_INT 86
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: LD_INT 6
40992: PUSH
40993: LD_INT 15
40995: PUSH
40996: LD_INT 16
40998: PUSH
40999: LD_INT 7
41001: PUSH
41002: LD_INT 12
41004: PUSH
41005: LD_INT 13
41007: PUSH
41008: LD_INT 10
41010: PUSH
41011: LD_INT 14
41013: PUSH
41014: LD_INT 20
41016: PUSH
41017: LD_INT 21
41019: PUSH
41020: LD_INT 22
41022: PUSH
41023: LD_INT 25
41025: PUSH
41026: LD_INT 32
41028: PUSH
41029: LD_INT 27
41031: PUSH
41032: LD_INT 36
41034: PUSH
41035: LD_INT 69
41037: PUSH
41038: LD_INT 39
41040: PUSH
41041: LD_INT 34
41043: PUSH
41044: LD_INT 40
41046: PUSH
41047: LD_INT 48
41049: PUSH
41050: LD_INT 49
41052: PUSH
41053: LD_INT 50
41055: PUSH
41056: LD_INT 51
41058: PUSH
41059: LD_INT 52
41061: PUSH
41062: LD_INT 53
41064: PUSH
41065: LD_INT 54
41067: PUSH
41068: LD_INT 55
41070: PUSH
41071: LD_INT 56
41073: PUSH
41074: LD_INT 57
41076: PUSH
41077: LD_INT 58
41079: PUSH
41080: LD_INT 59
41082: PUSH
41083: LD_INT 60
41085: PUSH
41086: LD_INT 61
41088: PUSH
41089: LD_INT 62
41091: PUSH
41092: LD_INT 80
41094: PUSH
41095: LD_INT 82
41097: PUSH
41098: LD_INT 83
41100: PUSH
41101: LD_INT 84
41103: PUSH
41104: LD_INT 85
41106: PUSH
41107: LD_INT 86
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: ST_TO_ADDR
41163: GO 41626
41165: LD_INT 2
41167: DOUBLE
41168: EQUAL
41169: IFTRUE 41173
41171: GO 41395
41173: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
41174: LD_ADDR_VAR 0 4
41178: PUSH
41179: LD_INT 35
41181: PUSH
41182: LD_INT 45
41184: PUSH
41185: LD_INT 46
41187: PUSH
41188: LD_INT 47
41190: PUSH
41191: LD_INT 82
41193: PUSH
41194: LD_INT 83
41196: PUSH
41197: LD_INT 84
41199: PUSH
41200: LD_INT 85
41202: PUSH
41203: LD_INT 87
41205: PUSH
41206: LD_INT 70
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 11
41214: PUSH
41215: LD_INT 3
41217: PUSH
41218: LD_INT 4
41220: PUSH
41221: LD_INT 5
41223: PUSH
41224: LD_INT 6
41226: PUSH
41227: LD_INT 15
41229: PUSH
41230: LD_INT 18
41232: PUSH
41233: LD_INT 7
41235: PUSH
41236: LD_INT 17
41238: PUSH
41239: LD_INT 8
41241: PUSH
41242: LD_INT 20
41244: PUSH
41245: LD_INT 21
41247: PUSH
41248: LD_INT 22
41250: PUSH
41251: LD_INT 72
41253: PUSH
41254: LD_INT 26
41256: PUSH
41257: LD_INT 69
41259: PUSH
41260: LD_INT 39
41262: PUSH
41263: LD_INT 40
41265: PUSH
41266: LD_INT 41
41268: PUSH
41269: LD_INT 42
41271: PUSH
41272: LD_INT 43
41274: PUSH
41275: LD_INT 48
41277: PUSH
41278: LD_INT 49
41280: PUSH
41281: LD_INT 50
41283: PUSH
41284: LD_INT 51
41286: PUSH
41287: LD_INT 52
41289: PUSH
41290: LD_INT 53
41292: PUSH
41293: LD_INT 54
41295: PUSH
41296: LD_INT 55
41298: PUSH
41299: LD_INT 56
41301: PUSH
41302: LD_INT 60
41304: PUSH
41305: LD_INT 61
41307: PUSH
41308: LD_INT 62
41310: PUSH
41311: LD_INT 66
41313: PUSH
41314: LD_INT 67
41316: PUSH
41317: LD_INT 68
41319: PUSH
41320: LD_INT 81
41322: PUSH
41323: LD_INT 82
41325: PUSH
41326: LD_INT 83
41328: PUSH
41329: LD_INT 84
41331: PUSH
41332: LD_INT 85
41334: PUSH
41335: LD_INT 87
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: ST_TO_ADDR
41393: GO 41626
41395: LD_INT 3
41397: DOUBLE
41398: EQUAL
41399: IFTRUE 41403
41401: GO 41625
41403: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41404: LD_ADDR_VAR 0 4
41408: PUSH
41409: LD_INT 46
41411: PUSH
41412: LD_INT 47
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: LD_INT 82
41423: PUSH
41424: LD_INT 83
41426: PUSH
41427: LD_INT 84
41429: PUSH
41430: LD_INT 85
41432: PUSH
41433: LD_INT 86
41435: PUSH
41436: LD_INT 11
41438: PUSH
41439: LD_INT 9
41441: PUSH
41442: LD_INT 20
41444: PUSH
41445: LD_INT 19
41447: PUSH
41448: LD_INT 21
41450: PUSH
41451: LD_INT 24
41453: PUSH
41454: LD_INT 22
41456: PUSH
41457: LD_INT 25
41459: PUSH
41460: LD_INT 28
41462: PUSH
41463: LD_INT 29
41465: PUSH
41466: LD_INT 30
41468: PUSH
41469: LD_INT 31
41471: PUSH
41472: LD_INT 37
41474: PUSH
41475: LD_INT 38
41477: PUSH
41478: LD_INT 32
41480: PUSH
41481: LD_INT 27
41483: PUSH
41484: LD_INT 33
41486: PUSH
41487: LD_INT 69
41489: PUSH
41490: LD_INT 39
41492: PUSH
41493: LD_INT 34
41495: PUSH
41496: LD_INT 40
41498: PUSH
41499: LD_INT 71
41501: PUSH
41502: LD_INT 23
41504: PUSH
41505: LD_INT 44
41507: PUSH
41508: LD_INT 48
41510: PUSH
41511: LD_INT 49
41513: PUSH
41514: LD_INT 50
41516: PUSH
41517: LD_INT 51
41519: PUSH
41520: LD_INT 52
41522: PUSH
41523: LD_INT 53
41525: PUSH
41526: LD_INT 54
41528: PUSH
41529: LD_INT 55
41531: PUSH
41532: LD_INT 56
41534: PUSH
41535: LD_INT 57
41537: PUSH
41538: LD_INT 58
41540: PUSH
41541: LD_INT 59
41543: PUSH
41544: LD_INT 63
41546: PUSH
41547: LD_INT 64
41549: PUSH
41550: LD_INT 65
41552: PUSH
41553: LD_INT 82
41555: PUSH
41556: LD_INT 83
41558: PUSH
41559: LD_INT 84
41561: PUSH
41562: LD_INT 85
41564: PUSH
41565: LD_INT 86
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: ST_TO_ADDR
41623: GO 41626
41625: POP
// if state > - 1 and state < 3 then
41626: LD_VAR 0 3
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: GREATER
41635: PUSH
41636: LD_VAR 0 3
41640: PUSH
41641: LD_INT 3
41643: LESS
41644: AND
41645: IFFALSE 41702
// for i in result do
41647: LD_ADDR_VAR 0 5
41651: PUSH
41652: LD_VAR 0 4
41656: PUSH
41657: FOR_IN
41658: IFFALSE 41700
// if GetTech ( i , side ) <> state then
41660: LD_VAR 0 5
41664: PPUSH
41665: LD_VAR 0 1
41669: PPUSH
41670: CALL_OW 321
41674: PUSH
41675: LD_VAR 0 3
41679: NONEQUAL
41680: IFFALSE 41698
// result := result diff i ;
41682: LD_ADDR_VAR 0 4
41686: PUSH
41687: LD_VAR 0 4
41691: PUSH
41692: LD_VAR 0 5
41696: DIFF
41697: ST_TO_ADDR
41698: GO 41657
41700: POP
41701: POP
// end ;
41702: LD_VAR 0 4
41706: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41707: LD_INT 0
41709: PPUSH
41710: PPUSH
41711: PPUSH
// result := true ;
41712: LD_ADDR_VAR 0 3
41716: PUSH
41717: LD_INT 1
41719: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41720: LD_ADDR_VAR 0 5
41724: PUSH
41725: LD_VAR 0 2
41729: PPUSH
41730: CALL_OW 480
41734: ST_TO_ADDR
// if not tmp then
41735: LD_VAR 0 5
41739: NOT
41740: IFFALSE 41744
// exit ;
41742: GO 41793
// for i in tmp do
41744: LD_ADDR_VAR 0 4
41748: PUSH
41749: LD_VAR 0 5
41753: PUSH
41754: FOR_IN
41755: IFFALSE 41791
// if GetTech ( i , side ) <> state_researched then
41757: LD_VAR 0 4
41761: PPUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 321
41771: PUSH
41772: LD_INT 2
41774: NONEQUAL
41775: IFFALSE 41789
// begin result := false ;
41777: LD_ADDR_VAR 0 3
41781: PUSH
41782: LD_INT 0
41784: ST_TO_ADDR
// exit ;
41785: POP
41786: POP
41787: GO 41793
// end ;
41789: GO 41754
41791: POP
41792: POP
// end ;
41793: LD_VAR 0 3
41797: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41798: LD_INT 0
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
41808: PPUSH
41809: PPUSH
41810: PPUSH
41811: PPUSH
41812: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41813: LD_VAR 0 1
41817: NOT
41818: PUSH
41819: LD_VAR 0 1
41823: PPUSH
41824: CALL_OW 257
41828: PUSH
41829: LD_INT 9
41831: NONEQUAL
41832: OR
41833: IFFALSE 41837
// exit ;
41835: GO 42410
// side := GetSide ( unit ) ;
41837: LD_ADDR_VAR 0 9
41841: PUSH
41842: LD_VAR 0 1
41846: PPUSH
41847: CALL_OW 255
41851: ST_TO_ADDR
// tech_space := tech_spacanom ;
41852: LD_ADDR_VAR 0 12
41856: PUSH
41857: LD_INT 29
41859: ST_TO_ADDR
// tech_time := tech_taurad ;
41860: LD_ADDR_VAR 0 13
41864: PUSH
41865: LD_INT 28
41867: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41868: LD_ADDR_VAR 0 11
41872: PUSH
41873: LD_VAR 0 1
41877: PPUSH
41878: CALL_OW 310
41882: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41883: LD_VAR 0 11
41887: PPUSH
41888: CALL_OW 247
41892: PUSH
41893: LD_INT 2
41895: EQUAL
41896: IFFALSE 41900
// exit ;
41898: GO 42410
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41900: LD_ADDR_VAR 0 8
41904: PUSH
41905: LD_INT 81
41907: PUSH
41908: LD_VAR 0 9
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 3
41919: PUSH
41920: LD_INT 21
41922: PUSH
41923: LD_INT 3
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PPUSH
41938: CALL_OW 69
41942: ST_TO_ADDR
// if not tmp then
41943: LD_VAR 0 8
41947: NOT
41948: IFFALSE 41952
// exit ;
41950: GO 42410
// if in_unit then
41952: LD_VAR 0 11
41956: IFFALSE 41980
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41958: LD_ADDR_VAR 0 10
41962: PUSH
41963: LD_VAR 0 8
41967: PPUSH
41968: LD_VAR 0 11
41972: PPUSH
41973: CALL_OW 74
41977: ST_TO_ADDR
41978: GO 42000
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41980: LD_ADDR_VAR 0 10
41984: PUSH
41985: LD_VAR 0 8
41989: PPUSH
41990: LD_VAR 0 1
41994: PPUSH
41995: CALL_OW 74
41999: ST_TO_ADDR
// if not enemy then
42000: LD_VAR 0 10
42004: NOT
42005: IFFALSE 42009
// exit ;
42007: GO 42410
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42009: LD_VAR 0 11
42013: PUSH
42014: LD_VAR 0 11
42018: PPUSH
42019: LD_VAR 0 10
42023: PPUSH
42024: CALL_OW 296
42028: PUSH
42029: LD_INT 13
42031: GREATER
42032: AND
42033: PUSH
42034: LD_VAR 0 1
42038: PPUSH
42039: LD_VAR 0 10
42043: PPUSH
42044: CALL_OW 296
42048: PUSH
42049: LD_INT 12
42051: GREATER
42052: OR
42053: IFFALSE 42057
// exit ;
42055: GO 42410
// missile := [ 1 ] ;
42057: LD_ADDR_VAR 0 14
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42068: LD_VAR 0 9
42072: PPUSH
42073: LD_VAR 0 12
42077: PPUSH
42078: CALL_OW 325
42082: IFFALSE 42111
// missile := Insert ( missile , missile + 1 , 2 ) ;
42084: LD_ADDR_VAR 0 14
42088: PUSH
42089: LD_VAR 0 14
42093: PPUSH
42094: LD_VAR 0 14
42098: PUSH
42099: LD_INT 1
42101: PLUS
42102: PPUSH
42103: LD_INT 2
42105: PPUSH
42106: CALL_OW 2
42110: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42111: LD_VAR 0 9
42115: PPUSH
42116: LD_VAR 0 13
42120: PPUSH
42121: CALL_OW 325
42125: PUSH
42126: LD_VAR 0 10
42130: PPUSH
42131: CALL_OW 255
42135: PPUSH
42136: LD_VAR 0 13
42140: PPUSH
42141: CALL_OW 325
42145: NOT
42146: AND
42147: IFFALSE 42176
// missile := Insert ( missile , missile + 1 , 3 ) ;
42149: LD_ADDR_VAR 0 14
42153: PUSH
42154: LD_VAR 0 14
42158: PPUSH
42159: LD_VAR 0 14
42163: PUSH
42164: LD_INT 1
42166: PLUS
42167: PPUSH
42168: LD_INT 3
42170: PPUSH
42171: CALL_OW 2
42175: ST_TO_ADDR
// if missile < 2 then
42176: LD_VAR 0 14
42180: PUSH
42181: LD_INT 2
42183: LESS
42184: IFFALSE 42188
// exit ;
42186: GO 42410
// x := GetX ( enemy ) ;
42188: LD_ADDR_VAR 0 4
42192: PUSH
42193: LD_VAR 0 10
42197: PPUSH
42198: CALL_OW 250
42202: ST_TO_ADDR
// y := GetY ( enemy ) ;
42203: LD_ADDR_VAR 0 5
42207: PUSH
42208: LD_VAR 0 10
42212: PPUSH
42213: CALL_OW 251
42217: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42218: LD_ADDR_VAR 0 6
42222: PUSH
42223: LD_VAR 0 4
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PPUSH
42232: LD_INT 1
42234: PPUSH
42235: CALL_OW 12
42239: PLUS
42240: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42241: LD_ADDR_VAR 0 7
42245: PUSH
42246: LD_VAR 0 5
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PPUSH
42255: LD_INT 1
42257: PPUSH
42258: CALL_OW 12
42262: PLUS
42263: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42264: LD_VAR 0 6
42268: PPUSH
42269: LD_VAR 0 7
42273: PPUSH
42274: CALL_OW 488
42278: NOT
42279: IFFALSE 42301
// begin _x := x ;
42281: LD_ADDR_VAR 0 6
42285: PUSH
42286: LD_VAR 0 4
42290: ST_TO_ADDR
// _y := y ;
42291: LD_ADDR_VAR 0 7
42295: PUSH
42296: LD_VAR 0 5
42300: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42301: LD_ADDR_VAR 0 3
42305: PUSH
42306: LD_INT 1
42308: PPUSH
42309: LD_VAR 0 14
42313: PPUSH
42314: CALL_OW 12
42318: ST_TO_ADDR
// case i of 1 :
42319: LD_VAR 0 3
42323: PUSH
42324: LD_INT 1
42326: DOUBLE
42327: EQUAL
42328: IFTRUE 42332
42330: GO 42349
42332: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42333: LD_VAR 0 1
42337: PPUSH
42338: LD_VAR 0 10
42342: PPUSH
42343: CALL_OW 115
42347: GO 42410
42349: LD_INT 2
42351: DOUBLE
42352: EQUAL
42353: IFTRUE 42357
42355: GO 42379
42357: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42358: LD_VAR 0 1
42362: PPUSH
42363: LD_VAR 0 6
42367: PPUSH
42368: LD_VAR 0 7
42372: PPUSH
42373: CALL_OW 153
42377: GO 42410
42379: LD_INT 3
42381: DOUBLE
42382: EQUAL
42383: IFTRUE 42387
42385: GO 42409
42387: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42388: LD_VAR 0 1
42392: PPUSH
42393: LD_VAR 0 6
42397: PPUSH
42398: LD_VAR 0 7
42402: PPUSH
42403: CALL_OW 154
42407: GO 42410
42409: POP
// end ;
42410: LD_VAR 0 2
42414: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42415: LD_INT 0
42417: PPUSH
42418: PPUSH
42419: PPUSH
42420: PPUSH
42421: PPUSH
42422: PPUSH
// if not unit or not building then
42423: LD_VAR 0 1
42427: NOT
42428: PUSH
42429: LD_VAR 0 2
42433: NOT
42434: OR
42435: IFFALSE 42439
// exit ;
42437: GO 42597
// x := GetX ( building ) ;
42439: LD_ADDR_VAR 0 5
42443: PUSH
42444: LD_VAR 0 2
42448: PPUSH
42449: CALL_OW 250
42453: ST_TO_ADDR
// y := GetY ( building ) ;
42454: LD_ADDR_VAR 0 6
42458: PUSH
42459: LD_VAR 0 2
42463: PPUSH
42464: CALL_OW 251
42468: ST_TO_ADDR
// for i = 0 to 5 do
42469: LD_ADDR_VAR 0 4
42473: PUSH
42474: DOUBLE
42475: LD_INT 0
42477: DEC
42478: ST_TO_ADDR
42479: LD_INT 5
42481: PUSH
42482: FOR_TO
42483: IFFALSE 42595
// begin _x := ShiftX ( x , i , 3 ) ;
42485: LD_ADDR_VAR 0 7
42489: PUSH
42490: LD_VAR 0 5
42494: PPUSH
42495: LD_VAR 0 4
42499: PPUSH
42500: LD_INT 3
42502: PPUSH
42503: CALL_OW 272
42507: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42508: LD_ADDR_VAR 0 8
42512: PUSH
42513: LD_VAR 0 6
42517: PPUSH
42518: LD_VAR 0 4
42522: PPUSH
42523: LD_INT 3
42525: PPUSH
42526: CALL_OW 273
42530: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42531: LD_VAR 0 7
42535: PPUSH
42536: LD_VAR 0 8
42540: PPUSH
42541: CALL_OW 488
42545: NOT
42546: IFFALSE 42550
// continue ;
42548: GO 42482
// if HexInfo ( _x , _y ) = 0 then
42550: LD_VAR 0 7
42554: PPUSH
42555: LD_VAR 0 8
42559: PPUSH
42560: CALL_OW 428
42564: PUSH
42565: LD_INT 0
42567: EQUAL
42568: IFFALSE 42593
// begin ComMoveXY ( unit , _x , _y ) ;
42570: LD_VAR 0 1
42574: PPUSH
42575: LD_VAR 0 7
42579: PPUSH
42580: LD_VAR 0 8
42584: PPUSH
42585: CALL_OW 111
// exit ;
42589: POP
42590: POP
42591: GO 42597
// end ; end ;
42593: GO 42482
42595: POP
42596: POP
// end ;
42597: LD_VAR 0 3
42601: RET
// export function ScanBase ( side , base_area ) ; begin
42602: LD_INT 0
42604: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42605: LD_ADDR_VAR 0 3
42609: PUSH
42610: LD_VAR 0 2
42614: PPUSH
42615: LD_INT 81
42617: PUSH
42618: LD_VAR 0 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PPUSH
42627: CALL_OW 70
42631: ST_TO_ADDR
// end ;
42632: LD_VAR 0 3
42636: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42637: LD_INT 0
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
// result := false ;
42643: LD_ADDR_VAR 0 2
42647: PUSH
42648: LD_INT 0
42650: ST_TO_ADDR
// side := GetSide ( unit ) ;
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_VAR 0 1
42660: PPUSH
42661: CALL_OW 255
42665: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42666: LD_ADDR_VAR 0 4
42670: PUSH
42671: LD_VAR 0 1
42675: PPUSH
42676: CALL_OW 248
42680: ST_TO_ADDR
// case nat of 1 :
42681: LD_VAR 0 4
42685: PUSH
42686: LD_INT 1
42688: DOUBLE
42689: EQUAL
42690: IFTRUE 42694
42692: GO 42705
42694: POP
// tech := tech_lassight ; 2 :
42695: LD_ADDR_VAR 0 5
42699: PUSH
42700: LD_INT 12
42702: ST_TO_ADDR
42703: GO 42744
42705: LD_INT 2
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42713
42711: GO 42724
42713: POP
// tech := tech_mortar ; 3 :
42714: LD_ADDR_VAR 0 5
42718: PUSH
42719: LD_INT 41
42721: ST_TO_ADDR
42722: GO 42744
42724: LD_INT 3
42726: DOUBLE
42727: EQUAL
42728: IFTRUE 42732
42730: GO 42743
42732: POP
// tech := tech_bazooka ; end ;
42733: LD_ADDR_VAR 0 5
42737: PUSH
42738: LD_INT 44
42740: ST_TO_ADDR
42741: GO 42744
42743: POP
// if Researched ( side , tech ) then
42744: LD_VAR 0 3
42748: PPUSH
42749: LD_VAR 0 5
42753: PPUSH
42754: CALL_OW 325
42758: IFFALSE 42785
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42760: LD_ADDR_VAR 0 2
42764: PUSH
42765: LD_INT 5
42767: PUSH
42768: LD_INT 8
42770: PUSH
42771: LD_INT 9
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: PUSH
42779: LD_VAR 0 4
42783: ARRAY
42784: ST_TO_ADDR
// end ;
42785: LD_VAR 0 2
42789: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42790: LD_INT 0
42792: PPUSH
42793: PPUSH
42794: PPUSH
// if not mines then
42795: LD_VAR 0 2
42799: NOT
42800: IFFALSE 42804
// exit ;
42802: GO 42948
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42804: LD_ADDR_VAR 0 5
42808: PUSH
42809: LD_INT 81
42811: PUSH
42812: LD_VAR 0 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: LD_INT 21
42826: PUSH
42827: LD_INT 3
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PPUSH
42842: CALL_OW 69
42846: ST_TO_ADDR
// for i in mines do
42847: LD_ADDR_VAR 0 4
42851: PUSH
42852: LD_VAR 0 2
42856: PUSH
42857: FOR_IN
42858: IFFALSE 42946
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42860: LD_VAR 0 4
42864: PUSH
42865: LD_INT 1
42867: ARRAY
42868: PPUSH
42869: LD_VAR 0 4
42873: PUSH
42874: LD_INT 2
42876: ARRAY
42877: PPUSH
42878: CALL_OW 458
42882: NOT
42883: IFFALSE 42887
// continue ;
42885: GO 42857
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42887: LD_VAR 0 4
42891: PUSH
42892: LD_INT 1
42894: ARRAY
42895: PPUSH
42896: LD_VAR 0 4
42900: PUSH
42901: LD_INT 2
42903: ARRAY
42904: PPUSH
42905: CALL_OW 428
42909: PUSH
42910: LD_VAR 0 5
42914: IN
42915: IFFALSE 42944
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42917: LD_VAR 0 4
42921: PUSH
42922: LD_INT 1
42924: ARRAY
42925: PPUSH
42926: LD_VAR 0 4
42930: PUSH
42931: LD_INT 2
42933: ARRAY
42934: PPUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 456
// end ;
42944: GO 42857
42946: POP
42947: POP
// end ;
42948: LD_VAR 0 3
42952: RET
// export function Count ( array ) ; var i ; begin
42953: LD_INT 0
42955: PPUSH
42956: PPUSH
// result := 0 ;
42957: LD_ADDR_VAR 0 2
42961: PUSH
42962: LD_INT 0
42964: ST_TO_ADDR
// for i in array do
42965: LD_ADDR_VAR 0 3
42969: PUSH
42970: LD_VAR 0 1
42974: PUSH
42975: FOR_IN
42976: IFFALSE 43000
// if i then
42978: LD_VAR 0 3
42982: IFFALSE 42998
// result := result + 1 ;
42984: LD_ADDR_VAR 0 2
42988: PUSH
42989: LD_VAR 0 2
42993: PUSH
42994: LD_INT 1
42996: PLUS
42997: ST_TO_ADDR
42998: GO 42975
43000: POP
43001: POP
// end ;
43002: LD_VAR 0 2
43006: RET
// export function IsEmpty ( building ) ; begin
43007: LD_INT 0
43009: PPUSH
// if not building then
43010: LD_VAR 0 1
43014: NOT
43015: IFFALSE 43019
// exit ;
43017: GO 43062
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43019: LD_ADDR_VAR 0 2
43023: PUSH
43024: LD_VAR 0 1
43028: PUSH
43029: LD_INT 22
43031: PUSH
43032: LD_VAR 0 1
43036: PPUSH
43037: CALL_OW 255
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 58
43048: PUSH
43049: EMPTY
43050: LIST
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PPUSH
43056: CALL_OW 69
43060: IN
43061: ST_TO_ADDR
// end ;
43062: LD_VAR 0 2
43066: RET
// export function IsNotFull ( building ) ; begin
43067: LD_INT 0
43069: PPUSH
// if not building then
43070: LD_VAR 0 1
43074: NOT
43075: IFFALSE 43079
// exit ;
43077: GO 43098
// result := UnitsInside ( building ) < 6 ;
43079: LD_ADDR_VAR 0 2
43083: PUSH
43084: LD_VAR 0 1
43088: PPUSH
43089: CALL_OW 313
43093: PUSH
43094: LD_INT 6
43096: LESS
43097: ST_TO_ADDR
// end ;
43098: LD_VAR 0 2
43102: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43103: LD_INT 0
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
// tmp := [ ] ;
43109: LD_ADDR_VAR 0 3
43113: PUSH
43114: EMPTY
43115: ST_TO_ADDR
// list := [ ] ;
43116: LD_ADDR_VAR 0 5
43120: PUSH
43121: EMPTY
43122: ST_TO_ADDR
// for i = 16 to 25 do
43123: LD_ADDR_VAR 0 4
43127: PUSH
43128: DOUBLE
43129: LD_INT 16
43131: DEC
43132: ST_TO_ADDR
43133: LD_INT 25
43135: PUSH
43136: FOR_TO
43137: IFFALSE 43210
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43139: LD_ADDR_VAR 0 3
43143: PUSH
43144: LD_VAR 0 3
43148: PUSH
43149: LD_INT 22
43151: PUSH
43152: LD_VAR 0 1
43156: PPUSH
43157: CALL_OW 255
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 91
43168: PUSH
43169: LD_VAR 0 1
43173: PUSH
43174: LD_INT 6
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 30
43184: PUSH
43185: LD_VAR 0 4
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: PPUSH
43202: CALL_OW 69
43206: ADD
43207: ST_TO_ADDR
43208: GO 43136
43210: POP
43211: POP
// for i = 1 to tmp do
43212: LD_ADDR_VAR 0 4
43216: PUSH
43217: DOUBLE
43218: LD_INT 1
43220: DEC
43221: ST_TO_ADDR
43222: LD_VAR 0 3
43226: PUSH
43227: FOR_TO
43228: IFFALSE 43316
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43230: LD_ADDR_VAR 0 5
43234: PUSH
43235: LD_VAR 0 5
43239: PUSH
43240: LD_VAR 0 3
43244: PUSH
43245: LD_VAR 0 4
43249: ARRAY
43250: PPUSH
43251: CALL_OW 266
43255: PUSH
43256: LD_VAR 0 3
43260: PUSH
43261: LD_VAR 0 4
43265: ARRAY
43266: PPUSH
43267: CALL_OW 250
43271: PUSH
43272: LD_VAR 0 3
43276: PUSH
43277: LD_VAR 0 4
43281: ARRAY
43282: PPUSH
43283: CALL_OW 251
43287: PUSH
43288: LD_VAR 0 3
43292: PUSH
43293: LD_VAR 0 4
43297: ARRAY
43298: PPUSH
43299: CALL_OW 254
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: ADD
43313: ST_TO_ADDR
43314: GO 43227
43316: POP
43317: POP
// result := list ;
43318: LD_ADDR_VAR 0 2
43322: PUSH
43323: LD_VAR 0 5
43327: ST_TO_ADDR
// end ;
43328: LD_VAR 0 2
43332: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43333: LD_INT 0
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
// if not factory then
43342: LD_VAR 0 1
43346: NOT
43347: IFFALSE 43351
// exit ;
43349: GO 43944
// if control = control_apeman then
43351: LD_VAR 0 4
43355: PUSH
43356: LD_INT 5
43358: EQUAL
43359: IFFALSE 43468
// begin tmp := UnitsInside ( factory ) ;
43361: LD_ADDR_VAR 0 8
43365: PUSH
43366: LD_VAR 0 1
43370: PPUSH
43371: CALL_OW 313
43375: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43376: LD_VAR 0 8
43380: PPUSH
43381: LD_INT 25
43383: PUSH
43384: LD_INT 12
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PPUSH
43391: CALL_OW 72
43395: NOT
43396: IFFALSE 43406
// control := control_manual ;
43398: LD_ADDR_VAR 0 4
43402: PUSH
43403: LD_INT 1
43405: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43406: LD_ADDR_VAR 0 8
43410: PUSH
43411: LD_VAR 0 1
43415: PPUSH
43416: CALL 43103 0 1
43420: ST_TO_ADDR
// if tmp then
43421: LD_VAR 0 8
43425: IFFALSE 43468
// begin for i in tmp do
43427: LD_ADDR_VAR 0 7
43431: PUSH
43432: LD_VAR 0 8
43436: PUSH
43437: FOR_IN
43438: IFFALSE 43466
// if i [ 1 ] = b_ext_radio then
43440: LD_VAR 0 7
43444: PUSH
43445: LD_INT 1
43447: ARRAY
43448: PUSH
43449: LD_INT 22
43451: EQUAL
43452: IFFALSE 43464
// begin control := control_remote ;
43454: LD_ADDR_VAR 0 4
43458: PUSH
43459: LD_INT 2
43461: ST_TO_ADDR
// break ;
43462: GO 43466
// end ;
43464: GO 43437
43466: POP
43467: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43468: LD_VAR 0 1
43472: PPUSH
43473: LD_VAR 0 2
43477: PPUSH
43478: LD_VAR 0 3
43482: PPUSH
43483: LD_VAR 0 4
43487: PPUSH
43488: LD_VAR 0 5
43492: PPUSH
43493: CALL_OW 448
43497: IFFALSE 43532
// begin result := [ chassis , engine , control , weapon ] ;
43499: LD_ADDR_VAR 0 6
43503: PUSH
43504: LD_VAR 0 2
43508: PUSH
43509: LD_VAR 0 3
43513: PUSH
43514: LD_VAR 0 4
43518: PUSH
43519: LD_VAR 0 5
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
// exit ;
43530: GO 43944
// end ; _chassis := AvailableChassisList ( factory ) ;
43532: LD_ADDR_VAR 0 9
43536: PUSH
43537: LD_VAR 0 1
43541: PPUSH
43542: CALL_OW 475
43546: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43547: LD_ADDR_VAR 0 11
43551: PUSH
43552: LD_VAR 0 1
43556: PPUSH
43557: CALL_OW 476
43561: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43562: LD_ADDR_VAR 0 12
43566: PUSH
43567: LD_VAR 0 1
43571: PPUSH
43572: CALL_OW 477
43576: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43577: LD_ADDR_VAR 0 10
43581: PUSH
43582: LD_VAR 0 1
43586: PPUSH
43587: CALL_OW 478
43591: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43592: LD_VAR 0 9
43596: NOT
43597: PUSH
43598: LD_VAR 0 11
43602: NOT
43603: OR
43604: PUSH
43605: LD_VAR 0 12
43609: NOT
43610: OR
43611: PUSH
43612: LD_VAR 0 10
43616: NOT
43617: OR
43618: IFFALSE 43653
// begin result := [ chassis , engine , control , weapon ] ;
43620: LD_ADDR_VAR 0 6
43624: PUSH
43625: LD_VAR 0 2
43629: PUSH
43630: LD_VAR 0 3
43634: PUSH
43635: LD_VAR 0 4
43639: PUSH
43640: LD_VAR 0 5
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: ST_TO_ADDR
// exit ;
43651: GO 43944
// end ; if not chassis in _chassis then
43653: LD_VAR 0 2
43657: PUSH
43658: LD_VAR 0 9
43662: IN
43663: NOT
43664: IFFALSE 43690
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43666: LD_ADDR_VAR 0 2
43670: PUSH
43671: LD_VAR 0 9
43675: PUSH
43676: LD_INT 1
43678: PPUSH
43679: LD_VAR 0 9
43683: PPUSH
43684: CALL_OW 12
43688: ARRAY
43689: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43690: LD_VAR 0 2
43694: PPUSH
43695: LD_VAR 0 3
43699: PPUSH
43700: CALL 43949 0 2
43704: NOT
43705: IFFALSE 43764
// repeat engine := _engine [ 1 ] ;
43707: LD_ADDR_VAR 0 3
43711: PUSH
43712: LD_VAR 0 11
43716: PUSH
43717: LD_INT 1
43719: ARRAY
43720: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43721: LD_ADDR_VAR 0 11
43725: PUSH
43726: LD_VAR 0 11
43730: PPUSH
43731: LD_INT 1
43733: PPUSH
43734: CALL_OW 3
43738: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43739: LD_VAR 0 2
43743: PPUSH
43744: LD_VAR 0 3
43748: PPUSH
43749: CALL 43949 0 2
43753: PUSH
43754: LD_VAR 0 11
43758: PUSH
43759: EMPTY
43760: EQUAL
43761: OR
43762: IFFALSE 43707
// if not control in _control then
43764: LD_VAR 0 4
43768: PUSH
43769: LD_VAR 0 12
43773: IN
43774: NOT
43775: IFFALSE 43801
// control := _control [ rand ( 1 , _control ) ] ;
43777: LD_ADDR_VAR 0 4
43781: PUSH
43782: LD_VAR 0 12
43786: PUSH
43787: LD_INT 1
43789: PPUSH
43790: LD_VAR 0 12
43794: PPUSH
43795: CALL_OW 12
43799: ARRAY
43800: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43801: LD_VAR 0 2
43805: PPUSH
43806: LD_VAR 0 5
43810: PPUSH
43811: CALL 44169 0 2
43815: NOT
43816: IFFALSE 43875
// repeat weapon := _weapon [ 1 ] ;
43818: LD_ADDR_VAR 0 5
43822: PUSH
43823: LD_VAR 0 10
43827: PUSH
43828: LD_INT 1
43830: ARRAY
43831: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43832: LD_ADDR_VAR 0 10
43836: PUSH
43837: LD_VAR 0 10
43841: PPUSH
43842: LD_INT 1
43844: PPUSH
43845: CALL_OW 3
43849: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43850: LD_VAR 0 2
43854: PPUSH
43855: LD_VAR 0 5
43859: PPUSH
43860: CALL 44169 0 2
43864: PUSH
43865: LD_VAR 0 10
43869: PUSH
43870: EMPTY
43871: EQUAL
43872: OR
43873: IFFALSE 43818
// result := [ ] ;
43875: LD_ADDR_VAR 0 6
43879: PUSH
43880: EMPTY
43881: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43882: LD_VAR 0 1
43886: PPUSH
43887: LD_VAR 0 2
43891: PPUSH
43892: LD_VAR 0 3
43896: PPUSH
43897: LD_VAR 0 4
43901: PPUSH
43902: LD_VAR 0 5
43906: PPUSH
43907: CALL_OW 448
43911: IFFALSE 43944
// result := [ chassis , engine , control , weapon ] ;
43913: LD_ADDR_VAR 0 6
43917: PUSH
43918: LD_VAR 0 2
43922: PUSH
43923: LD_VAR 0 3
43927: PUSH
43928: LD_VAR 0 4
43932: PUSH
43933: LD_VAR 0 5
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: ST_TO_ADDR
// end ;
43944: LD_VAR 0 6
43948: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43949: LD_INT 0
43951: PPUSH
// if not chassis or not engine then
43952: LD_VAR 0 1
43956: NOT
43957: PUSH
43958: LD_VAR 0 2
43962: NOT
43963: OR
43964: IFFALSE 43968
// exit ;
43966: GO 44164
// case engine of engine_solar :
43968: LD_VAR 0 2
43972: PUSH
43973: LD_INT 2
43975: DOUBLE
43976: EQUAL
43977: IFTRUE 43981
43979: GO 44019
43981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43982: LD_ADDR_VAR 0 3
43986: PUSH
43987: LD_INT 11
43989: PUSH
43990: LD_INT 12
43992: PUSH
43993: LD_INT 13
43995: PUSH
43996: LD_INT 14
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: LD_INT 3
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: ST_TO_ADDR
44017: GO 44148
44019: LD_INT 1
44021: DOUBLE
44022: EQUAL
44023: IFTRUE 44027
44025: GO 44089
44027: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44028: LD_ADDR_VAR 0 3
44032: PUSH
44033: LD_INT 11
44035: PUSH
44036: LD_INT 12
44038: PUSH
44039: LD_INT 13
44041: PUSH
44042: LD_INT 14
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 3
44053: PUSH
44054: LD_INT 4
44056: PUSH
44057: LD_INT 5
44059: PUSH
44060: LD_INT 21
44062: PUSH
44063: LD_INT 23
44065: PUSH
44066: LD_INT 22
44068: PUSH
44069: LD_INT 24
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: ST_TO_ADDR
44087: GO 44148
44089: LD_INT 3
44091: DOUBLE
44092: EQUAL
44093: IFTRUE 44097
44095: GO 44147
44097: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44098: LD_ADDR_VAR 0 3
44102: PUSH
44103: LD_INT 13
44105: PUSH
44106: LD_INT 14
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: LD_INT 4
44117: PUSH
44118: LD_INT 5
44120: PUSH
44121: LD_INT 21
44123: PUSH
44124: LD_INT 22
44126: PUSH
44127: LD_INT 23
44129: PUSH
44130: LD_INT 24
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: ST_TO_ADDR
44145: GO 44148
44147: POP
// result := ( chassis in result ) ;
44148: LD_ADDR_VAR 0 3
44152: PUSH
44153: LD_VAR 0 1
44157: PUSH
44158: LD_VAR 0 3
44162: IN
44163: ST_TO_ADDR
// end ;
44164: LD_VAR 0 3
44168: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44169: LD_INT 0
44171: PPUSH
// if not chassis or not weapon then
44172: LD_VAR 0 1
44176: NOT
44177: PUSH
44178: LD_VAR 0 2
44182: NOT
44183: OR
44184: IFFALSE 44188
// exit ;
44186: GO 45214
// case weapon of us_machine_gun :
44188: LD_VAR 0 2
44192: PUSH
44193: LD_INT 2
44195: DOUBLE
44196: EQUAL
44197: IFTRUE 44201
44199: GO 44231
44201: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44202: LD_ADDR_VAR 0 3
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: LD_INT 4
44218: PUSH
44219: LD_INT 5
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: ST_TO_ADDR
44229: GO 45198
44231: LD_INT 3
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44239
44237: GO 44269
44239: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44240: LD_ADDR_VAR 0 3
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: LD_INT 4
44256: PUSH
44257: LD_INT 5
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: ST_TO_ADDR
44267: GO 45198
44269: LD_INT 11
44271: DOUBLE
44272: EQUAL
44273: IFTRUE 44277
44275: GO 44307
44277: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44278: LD_ADDR_VAR 0 3
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: LD_INT 3
44291: PUSH
44292: LD_INT 4
44294: PUSH
44295: LD_INT 5
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
44305: GO 45198
44307: LD_INT 4
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44315
44313: GO 44341
44315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: LD_INT 3
44326: PUSH
44327: LD_INT 4
44329: PUSH
44330: LD_INT 5
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: ST_TO_ADDR
44339: GO 45198
44341: LD_INT 5
44343: DOUBLE
44344: EQUAL
44345: IFTRUE 44349
44347: GO 44375
44349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 3
44360: PUSH
44361: LD_INT 4
44363: PUSH
44364: LD_INT 5
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: ST_TO_ADDR
44373: GO 45198
44375: LD_INT 9
44377: DOUBLE
44378: EQUAL
44379: IFTRUE 44383
44381: GO 44409
44383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44384: LD_ADDR_VAR 0 3
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 3
44394: PUSH
44395: LD_INT 4
44397: PUSH
44398: LD_INT 5
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: ST_TO_ADDR
44407: GO 45198
44409: LD_INT 7
44411: DOUBLE
44412: EQUAL
44413: IFTRUE 44417
44415: GO 44443
44417: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44418: LD_ADDR_VAR 0 3
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: LD_INT 4
44431: PUSH
44432: LD_INT 5
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: ST_TO_ADDR
44441: GO 45198
44443: LD_INT 12
44445: DOUBLE
44446: EQUAL
44447: IFTRUE 44451
44449: GO 44477
44451: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44452: LD_ADDR_VAR 0 3
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: LD_INT 4
44465: PUSH
44466: LD_INT 5
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: ST_TO_ADDR
44475: GO 45198
44477: LD_INT 13
44479: DOUBLE
44480: EQUAL
44481: IFTRUE 44485
44483: GO 44511
44485: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44486: LD_ADDR_VAR 0 3
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: LD_INT 4
44499: PUSH
44500: LD_INT 5
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
44509: GO 45198
44511: LD_INT 14
44513: DOUBLE
44514: EQUAL
44515: IFTRUE 44519
44517: GO 44537
44519: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44520: LD_ADDR_VAR 0 3
44524: PUSH
44525: LD_INT 4
44527: PUSH
44528: LD_INT 5
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: ST_TO_ADDR
44535: GO 45198
44537: LD_INT 6
44539: DOUBLE
44540: EQUAL
44541: IFTRUE 44545
44543: GO 44563
44545: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44546: LD_ADDR_VAR 0 3
44550: PUSH
44551: LD_INT 4
44553: PUSH
44554: LD_INT 5
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: ST_TO_ADDR
44561: GO 45198
44563: LD_INT 10
44565: DOUBLE
44566: EQUAL
44567: IFTRUE 44571
44569: GO 44589
44571: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44572: LD_ADDR_VAR 0 3
44576: PUSH
44577: LD_INT 4
44579: PUSH
44580: LD_INT 5
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: ST_TO_ADDR
44587: GO 45198
44589: LD_INT 22
44591: DOUBLE
44592: EQUAL
44593: IFTRUE 44597
44595: GO 44623
44597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44598: LD_ADDR_VAR 0 3
44602: PUSH
44603: LD_INT 11
44605: PUSH
44606: LD_INT 12
44608: PUSH
44609: LD_INT 13
44611: PUSH
44612: LD_INT 14
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: ST_TO_ADDR
44621: GO 45198
44623: LD_INT 23
44625: DOUBLE
44626: EQUAL
44627: IFTRUE 44631
44629: GO 44657
44631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44632: LD_ADDR_VAR 0 3
44636: PUSH
44637: LD_INT 11
44639: PUSH
44640: LD_INT 12
44642: PUSH
44643: LD_INT 13
44645: PUSH
44646: LD_INT 14
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
44655: GO 45198
44657: LD_INT 24
44659: DOUBLE
44660: EQUAL
44661: IFTRUE 44665
44663: GO 44691
44665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44666: LD_ADDR_VAR 0 3
44670: PUSH
44671: LD_INT 11
44673: PUSH
44674: LD_INT 12
44676: PUSH
44677: LD_INT 13
44679: PUSH
44680: LD_INT 14
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: ST_TO_ADDR
44689: GO 45198
44691: LD_INT 30
44693: DOUBLE
44694: EQUAL
44695: IFTRUE 44699
44697: GO 44725
44699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44700: LD_ADDR_VAR 0 3
44704: PUSH
44705: LD_INT 11
44707: PUSH
44708: LD_INT 12
44710: PUSH
44711: LD_INT 13
44713: PUSH
44714: LD_INT 14
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
44723: GO 45198
44725: LD_INT 25
44727: DOUBLE
44728: EQUAL
44729: IFTRUE 44733
44731: GO 44751
44733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44734: LD_ADDR_VAR 0 3
44738: PUSH
44739: LD_INT 13
44741: PUSH
44742: LD_INT 14
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: ST_TO_ADDR
44749: GO 45198
44751: LD_INT 27
44753: DOUBLE
44754: EQUAL
44755: IFTRUE 44759
44757: GO 44777
44759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44760: LD_ADDR_VAR 0 3
44764: PUSH
44765: LD_INT 13
44767: PUSH
44768: LD_INT 14
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: ST_TO_ADDR
44775: GO 45198
44777: LD_INT 28
44779: DOUBLE
44780: EQUAL
44781: IFTRUE 44785
44783: GO 44803
44785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44786: LD_ADDR_VAR 0 3
44790: PUSH
44791: LD_INT 13
44793: PUSH
44794: LD_INT 14
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: ST_TO_ADDR
44801: GO 45198
44803: LD_INT 29
44805: DOUBLE
44806: EQUAL
44807: IFTRUE 44811
44809: GO 44829
44811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44812: LD_ADDR_VAR 0 3
44816: PUSH
44817: LD_INT 13
44819: PUSH
44820: LD_INT 14
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: ST_TO_ADDR
44827: GO 45198
44829: LD_INT 31
44831: DOUBLE
44832: EQUAL
44833: IFTRUE 44837
44835: GO 44855
44837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44838: LD_ADDR_VAR 0 3
44842: PUSH
44843: LD_INT 13
44845: PUSH
44846: LD_INT 14
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: ST_TO_ADDR
44853: GO 45198
44855: LD_INT 26
44857: DOUBLE
44858: EQUAL
44859: IFTRUE 44863
44861: GO 44881
44863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44864: LD_ADDR_VAR 0 3
44868: PUSH
44869: LD_INT 13
44871: PUSH
44872: LD_INT 14
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: ST_TO_ADDR
44879: GO 45198
44881: LD_INT 42
44883: DOUBLE
44884: EQUAL
44885: IFTRUE 44889
44887: GO 44915
44889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44890: LD_ADDR_VAR 0 3
44894: PUSH
44895: LD_INT 21
44897: PUSH
44898: LD_INT 22
44900: PUSH
44901: LD_INT 23
44903: PUSH
44904: LD_INT 24
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: ST_TO_ADDR
44913: GO 45198
44915: LD_INT 43
44917: DOUBLE
44918: EQUAL
44919: IFTRUE 44923
44921: GO 44949
44923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44924: LD_ADDR_VAR 0 3
44928: PUSH
44929: LD_INT 21
44931: PUSH
44932: LD_INT 22
44934: PUSH
44935: LD_INT 23
44937: PUSH
44938: LD_INT 24
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: ST_TO_ADDR
44947: GO 45198
44949: LD_INT 44
44951: DOUBLE
44952: EQUAL
44953: IFTRUE 44957
44955: GO 44983
44957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44958: LD_ADDR_VAR 0 3
44962: PUSH
44963: LD_INT 21
44965: PUSH
44966: LD_INT 22
44968: PUSH
44969: LD_INT 23
44971: PUSH
44972: LD_INT 24
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
44981: GO 45198
44983: LD_INT 45
44985: DOUBLE
44986: EQUAL
44987: IFTRUE 44991
44989: GO 45017
44991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44992: LD_ADDR_VAR 0 3
44996: PUSH
44997: LD_INT 21
44999: PUSH
45000: LD_INT 22
45002: PUSH
45003: LD_INT 23
45005: PUSH
45006: LD_INT 24
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
45015: GO 45198
45017: LD_INT 49
45019: DOUBLE
45020: EQUAL
45021: IFTRUE 45025
45023: GO 45051
45025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45026: LD_ADDR_VAR 0 3
45030: PUSH
45031: LD_INT 21
45033: PUSH
45034: LD_INT 22
45036: PUSH
45037: LD_INT 23
45039: PUSH
45040: LD_INT 24
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: ST_TO_ADDR
45049: GO 45198
45051: LD_INT 51
45053: DOUBLE
45054: EQUAL
45055: IFTRUE 45059
45057: GO 45085
45059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45060: LD_ADDR_VAR 0 3
45064: PUSH
45065: LD_INT 21
45067: PUSH
45068: LD_INT 22
45070: PUSH
45071: LD_INT 23
45073: PUSH
45074: LD_INT 24
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: ST_TO_ADDR
45083: GO 45198
45085: LD_INT 52
45087: DOUBLE
45088: EQUAL
45089: IFTRUE 45093
45091: GO 45119
45093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45094: LD_ADDR_VAR 0 3
45098: PUSH
45099: LD_INT 21
45101: PUSH
45102: LD_INT 22
45104: PUSH
45105: LD_INT 23
45107: PUSH
45108: LD_INT 24
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
45117: GO 45198
45119: LD_INT 53
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45127
45125: GO 45145
45127: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45128: LD_ADDR_VAR 0 3
45132: PUSH
45133: LD_INT 23
45135: PUSH
45136: LD_INT 24
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: ST_TO_ADDR
45143: GO 45198
45145: LD_INT 46
45147: DOUBLE
45148: EQUAL
45149: IFTRUE 45153
45151: GO 45171
45153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45154: LD_ADDR_VAR 0 3
45158: PUSH
45159: LD_INT 23
45161: PUSH
45162: LD_INT 24
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: ST_TO_ADDR
45169: GO 45198
45171: LD_INT 47
45173: DOUBLE
45174: EQUAL
45175: IFTRUE 45179
45177: GO 45197
45179: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45180: LD_ADDR_VAR 0 3
45184: PUSH
45185: LD_INT 23
45187: PUSH
45188: LD_INT 24
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: ST_TO_ADDR
45195: GO 45198
45197: POP
// result := ( chassis in result ) ;
45198: LD_ADDR_VAR 0 3
45202: PUSH
45203: LD_VAR 0 1
45207: PUSH
45208: LD_VAR 0 3
45212: IN
45213: ST_TO_ADDR
// end ;
45214: LD_VAR 0 3
45218: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45219: LD_INT 0
45221: PPUSH
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
45227: PPUSH
// result := array ;
45228: LD_ADDR_VAR 0 5
45232: PUSH
45233: LD_VAR 0 1
45237: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45238: LD_VAR 0 1
45242: NOT
45243: PUSH
45244: LD_VAR 0 2
45248: NOT
45249: OR
45250: PUSH
45251: LD_VAR 0 3
45255: NOT
45256: OR
45257: PUSH
45258: LD_VAR 0 2
45262: PUSH
45263: LD_VAR 0 1
45267: GREATER
45268: OR
45269: PUSH
45270: LD_VAR 0 3
45274: PUSH
45275: LD_VAR 0 1
45279: GREATER
45280: OR
45281: IFFALSE 45285
// exit ;
45283: GO 45581
// if direction then
45285: LD_VAR 0 4
45289: IFFALSE 45353
// begin d := 1 ;
45291: LD_ADDR_VAR 0 9
45295: PUSH
45296: LD_INT 1
45298: ST_TO_ADDR
// if i_from > i_to then
45299: LD_VAR 0 2
45303: PUSH
45304: LD_VAR 0 3
45308: GREATER
45309: IFFALSE 45335
// length := ( array - i_from ) + i_to else
45311: LD_ADDR_VAR 0 11
45315: PUSH
45316: LD_VAR 0 1
45320: PUSH
45321: LD_VAR 0 2
45325: MINUS
45326: PUSH
45327: LD_VAR 0 3
45331: PLUS
45332: ST_TO_ADDR
45333: GO 45351
// length := i_to - i_from ;
45335: LD_ADDR_VAR 0 11
45339: PUSH
45340: LD_VAR 0 3
45344: PUSH
45345: LD_VAR 0 2
45349: MINUS
45350: ST_TO_ADDR
// end else
45351: GO 45414
// begin d := - 1 ;
45353: LD_ADDR_VAR 0 9
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: ST_TO_ADDR
// if i_from > i_to then
45362: LD_VAR 0 2
45366: PUSH
45367: LD_VAR 0 3
45371: GREATER
45372: IFFALSE 45392
// length := i_from - i_to else
45374: LD_ADDR_VAR 0 11
45378: PUSH
45379: LD_VAR 0 2
45383: PUSH
45384: LD_VAR 0 3
45388: MINUS
45389: ST_TO_ADDR
45390: GO 45414
// length := ( array - i_to ) + i_from ;
45392: LD_ADDR_VAR 0 11
45396: PUSH
45397: LD_VAR 0 1
45401: PUSH
45402: LD_VAR 0 3
45406: MINUS
45407: PUSH
45408: LD_VAR 0 2
45412: PLUS
45413: ST_TO_ADDR
// end ; if not length then
45414: LD_VAR 0 11
45418: NOT
45419: IFFALSE 45423
// exit ;
45421: GO 45581
// tmp := array ;
45423: LD_ADDR_VAR 0 10
45427: PUSH
45428: LD_VAR 0 1
45432: ST_TO_ADDR
// for i = 1 to length do
45433: LD_ADDR_VAR 0 6
45437: PUSH
45438: DOUBLE
45439: LD_INT 1
45441: DEC
45442: ST_TO_ADDR
45443: LD_VAR 0 11
45447: PUSH
45448: FOR_TO
45449: IFFALSE 45569
// begin for j = 1 to array do
45451: LD_ADDR_VAR 0 7
45455: PUSH
45456: DOUBLE
45457: LD_INT 1
45459: DEC
45460: ST_TO_ADDR
45461: LD_VAR 0 1
45465: PUSH
45466: FOR_TO
45467: IFFALSE 45555
// begin k := j + d ;
45469: LD_ADDR_VAR 0 8
45473: PUSH
45474: LD_VAR 0 7
45478: PUSH
45479: LD_VAR 0 9
45483: PLUS
45484: ST_TO_ADDR
// if k > array then
45485: LD_VAR 0 8
45489: PUSH
45490: LD_VAR 0 1
45494: GREATER
45495: IFFALSE 45505
// k := 1 ;
45497: LD_ADDR_VAR 0 8
45501: PUSH
45502: LD_INT 1
45504: ST_TO_ADDR
// if not k then
45505: LD_VAR 0 8
45509: NOT
45510: IFFALSE 45522
// k := array ;
45512: LD_ADDR_VAR 0 8
45516: PUSH
45517: LD_VAR 0 1
45521: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45522: LD_ADDR_VAR 0 10
45526: PUSH
45527: LD_VAR 0 10
45531: PPUSH
45532: LD_VAR 0 8
45536: PPUSH
45537: LD_VAR 0 1
45541: PUSH
45542: LD_VAR 0 7
45546: ARRAY
45547: PPUSH
45548: CALL_OW 1
45552: ST_TO_ADDR
// end ;
45553: GO 45466
45555: POP
45556: POP
// array := tmp ;
45557: LD_ADDR_VAR 0 1
45561: PUSH
45562: LD_VAR 0 10
45566: ST_TO_ADDR
// end ;
45567: GO 45448
45569: POP
45570: POP
// result := array ;
45571: LD_ADDR_VAR 0 5
45575: PUSH
45576: LD_VAR 0 1
45580: ST_TO_ADDR
// end ;
45581: LD_VAR 0 5
45585: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45586: LD_INT 0
45588: PPUSH
45589: PPUSH
// result := 0 ;
45590: LD_ADDR_VAR 0 3
45594: PUSH
45595: LD_INT 0
45597: ST_TO_ADDR
// if not array or not value in array then
45598: LD_VAR 0 1
45602: NOT
45603: PUSH
45604: LD_VAR 0 2
45608: PUSH
45609: LD_VAR 0 1
45613: IN
45614: NOT
45615: OR
45616: IFFALSE 45620
// exit ;
45618: GO 45674
// for i = 1 to array do
45620: LD_ADDR_VAR 0 4
45624: PUSH
45625: DOUBLE
45626: LD_INT 1
45628: DEC
45629: ST_TO_ADDR
45630: LD_VAR 0 1
45634: PUSH
45635: FOR_TO
45636: IFFALSE 45672
// if value = array [ i ] then
45638: LD_VAR 0 2
45642: PUSH
45643: LD_VAR 0 1
45647: PUSH
45648: LD_VAR 0 4
45652: ARRAY
45653: EQUAL
45654: IFFALSE 45670
// begin result := i ;
45656: LD_ADDR_VAR 0 3
45660: PUSH
45661: LD_VAR 0 4
45665: ST_TO_ADDR
// exit ;
45666: POP
45667: POP
45668: GO 45674
// end ;
45670: GO 45635
45672: POP
45673: POP
// end ;
45674: LD_VAR 0 3
45678: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45679: LD_INT 0
45681: PPUSH
// vc_chassis := chassis ;
45682: LD_ADDR_OWVAR 37
45686: PUSH
45687: LD_VAR 0 1
45691: ST_TO_ADDR
// vc_engine := engine ;
45692: LD_ADDR_OWVAR 39
45696: PUSH
45697: LD_VAR 0 2
45701: ST_TO_ADDR
// vc_control := control ;
45702: LD_ADDR_OWVAR 38
45706: PUSH
45707: LD_VAR 0 3
45711: ST_TO_ADDR
// vc_weapon := weapon ;
45712: LD_ADDR_OWVAR 40
45716: PUSH
45717: LD_VAR 0 4
45721: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45722: LD_ADDR_OWVAR 41
45726: PUSH
45727: LD_VAR 0 5
45731: ST_TO_ADDR
// end ;
45732: LD_VAR 0 6
45736: RET
// export function WantPlant ( unit ) ; var task ; begin
45737: LD_INT 0
45739: PPUSH
45740: PPUSH
// result := false ;
45741: LD_ADDR_VAR 0 2
45745: PUSH
45746: LD_INT 0
45748: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45749: LD_ADDR_VAR 0 3
45753: PUSH
45754: LD_VAR 0 1
45758: PPUSH
45759: CALL_OW 437
45763: ST_TO_ADDR
// if task then
45764: LD_VAR 0 3
45768: IFFALSE 45796
// if task [ 1 ] [ 1 ] = p then
45770: LD_VAR 0 3
45774: PUSH
45775: LD_INT 1
45777: ARRAY
45778: PUSH
45779: LD_INT 1
45781: ARRAY
45782: PUSH
45783: LD_STRING p
45785: EQUAL
45786: IFFALSE 45796
// result := true ;
45788: LD_ADDR_VAR 0 2
45792: PUSH
45793: LD_INT 1
45795: ST_TO_ADDR
// end ;
45796: LD_VAR 0 2
45800: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45801: LD_INT 0
45803: PPUSH
45804: PPUSH
45805: PPUSH
45806: PPUSH
// if pos < 1 then
45807: LD_VAR 0 2
45811: PUSH
45812: LD_INT 1
45814: LESS
45815: IFFALSE 45819
// exit ;
45817: GO 46122
// if pos = 1 then
45819: LD_VAR 0 2
45823: PUSH
45824: LD_INT 1
45826: EQUAL
45827: IFFALSE 45860
// result := Replace ( arr , pos [ 1 ] , value ) else
45829: LD_ADDR_VAR 0 4
45833: PUSH
45834: LD_VAR 0 1
45838: PPUSH
45839: LD_VAR 0 2
45843: PUSH
45844: LD_INT 1
45846: ARRAY
45847: PPUSH
45848: LD_VAR 0 3
45852: PPUSH
45853: CALL_OW 1
45857: ST_TO_ADDR
45858: GO 46122
// begin tmp := arr ;
45860: LD_ADDR_VAR 0 6
45864: PUSH
45865: LD_VAR 0 1
45869: ST_TO_ADDR
// s_arr := [ tmp ] ;
45870: LD_ADDR_VAR 0 7
45874: PUSH
45875: LD_VAR 0 6
45879: PUSH
45880: EMPTY
45881: LIST
45882: ST_TO_ADDR
// for i = 1 to pos - 1 do
45883: LD_ADDR_VAR 0 5
45887: PUSH
45888: DOUBLE
45889: LD_INT 1
45891: DEC
45892: ST_TO_ADDR
45893: LD_VAR 0 2
45897: PUSH
45898: LD_INT 1
45900: MINUS
45901: PUSH
45902: FOR_TO
45903: IFFALSE 45948
// begin tmp := tmp [ pos [ i ] ] ;
45905: LD_ADDR_VAR 0 6
45909: PUSH
45910: LD_VAR 0 6
45914: PUSH
45915: LD_VAR 0 2
45919: PUSH
45920: LD_VAR 0 5
45924: ARRAY
45925: ARRAY
45926: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45927: LD_ADDR_VAR 0 7
45931: PUSH
45932: LD_VAR 0 7
45936: PUSH
45937: LD_VAR 0 6
45941: PUSH
45942: EMPTY
45943: LIST
45944: ADD
45945: ST_TO_ADDR
// end ;
45946: GO 45902
45948: POP
45949: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45950: LD_ADDR_VAR 0 6
45954: PUSH
45955: LD_VAR 0 6
45959: PPUSH
45960: LD_VAR 0 2
45964: PUSH
45965: LD_VAR 0 2
45969: ARRAY
45970: PPUSH
45971: LD_VAR 0 3
45975: PPUSH
45976: CALL_OW 1
45980: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45981: LD_ADDR_VAR 0 7
45985: PUSH
45986: LD_VAR 0 7
45990: PPUSH
45991: LD_VAR 0 7
45995: PPUSH
45996: LD_VAR 0 6
46000: PPUSH
46001: CALL_OW 1
46005: ST_TO_ADDR
// for i = s_arr downto 2 do
46006: LD_ADDR_VAR 0 5
46010: PUSH
46011: DOUBLE
46012: LD_VAR 0 7
46016: INC
46017: ST_TO_ADDR
46018: LD_INT 2
46020: PUSH
46021: FOR_DOWNTO
46022: IFFALSE 46106
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46024: LD_ADDR_VAR 0 6
46028: PUSH
46029: LD_VAR 0 7
46033: PUSH
46034: LD_VAR 0 5
46038: PUSH
46039: LD_INT 1
46041: MINUS
46042: ARRAY
46043: PPUSH
46044: LD_VAR 0 2
46048: PUSH
46049: LD_VAR 0 5
46053: PUSH
46054: LD_INT 1
46056: MINUS
46057: ARRAY
46058: PPUSH
46059: LD_VAR 0 7
46063: PUSH
46064: LD_VAR 0 5
46068: ARRAY
46069: PPUSH
46070: CALL_OW 1
46074: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46075: LD_ADDR_VAR 0 7
46079: PUSH
46080: LD_VAR 0 7
46084: PPUSH
46085: LD_VAR 0 5
46089: PUSH
46090: LD_INT 1
46092: MINUS
46093: PPUSH
46094: LD_VAR 0 6
46098: PPUSH
46099: CALL_OW 1
46103: ST_TO_ADDR
// end ;
46104: GO 46021
46106: POP
46107: POP
// result := s_arr [ 1 ] ;
46108: LD_ADDR_VAR 0 4
46112: PUSH
46113: LD_VAR 0 7
46117: PUSH
46118: LD_INT 1
46120: ARRAY
46121: ST_TO_ADDR
// end ; end ;
46122: LD_VAR 0 4
46126: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46127: LD_INT 0
46129: PPUSH
46130: PPUSH
// if not list then
46131: LD_VAR 0 1
46135: NOT
46136: IFFALSE 46140
// exit ;
46138: GO 46231
// i := list [ pos1 ] ;
46140: LD_ADDR_VAR 0 5
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_VAR 0 2
46154: ARRAY
46155: ST_TO_ADDR
// if not i then
46156: LD_VAR 0 5
46160: NOT
46161: IFFALSE 46165
// exit ;
46163: GO 46231
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46165: LD_ADDR_VAR 0 1
46169: PUSH
46170: LD_VAR 0 1
46174: PPUSH
46175: LD_VAR 0 2
46179: PPUSH
46180: LD_VAR 0 1
46184: PUSH
46185: LD_VAR 0 3
46189: ARRAY
46190: PPUSH
46191: CALL_OW 1
46195: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46196: LD_ADDR_VAR 0 1
46200: PUSH
46201: LD_VAR 0 1
46205: PPUSH
46206: LD_VAR 0 3
46210: PPUSH
46211: LD_VAR 0 5
46215: PPUSH
46216: CALL_OW 1
46220: ST_TO_ADDR
// result := list ;
46221: LD_ADDR_VAR 0 4
46225: PUSH
46226: LD_VAR 0 1
46230: ST_TO_ADDR
// end ;
46231: LD_VAR 0 4
46235: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46236: LD_INT 0
46238: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46239: LD_ADDR_VAR 0 5
46243: PUSH
46244: LD_VAR 0 1
46248: PPUSH
46249: CALL_OW 250
46253: PPUSH
46254: LD_VAR 0 1
46258: PPUSH
46259: CALL_OW 251
46263: PPUSH
46264: LD_VAR 0 2
46268: PPUSH
46269: LD_VAR 0 3
46273: PPUSH
46274: LD_VAR 0 4
46278: PPUSH
46279: CALL 46289 0 5
46283: ST_TO_ADDR
// end ;
46284: LD_VAR 0 5
46288: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46289: LD_INT 0
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
// if not list then
46295: LD_VAR 0 3
46299: NOT
46300: IFFALSE 46304
// exit ;
46302: GO 46692
// result := [ ] ;
46304: LD_ADDR_VAR 0 6
46308: PUSH
46309: EMPTY
46310: ST_TO_ADDR
// for i in list do
46311: LD_ADDR_VAR 0 7
46315: PUSH
46316: LD_VAR 0 3
46320: PUSH
46321: FOR_IN
46322: IFFALSE 46524
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46324: LD_ADDR_VAR 0 9
46328: PUSH
46329: LD_VAR 0 7
46333: PPUSH
46334: LD_VAR 0 1
46338: PPUSH
46339: LD_VAR 0 2
46343: PPUSH
46344: CALL_OW 297
46348: ST_TO_ADDR
// if not result then
46349: LD_VAR 0 6
46353: NOT
46354: IFFALSE 46380
// result := [ [ i , tmp ] ] else
46356: LD_ADDR_VAR 0 6
46360: PUSH
46361: LD_VAR 0 7
46365: PUSH
46366: LD_VAR 0 9
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: ST_TO_ADDR
46378: GO 46522
// begin if result [ result ] [ 2 ] < tmp then
46380: LD_VAR 0 6
46384: PUSH
46385: LD_VAR 0 6
46389: ARRAY
46390: PUSH
46391: LD_INT 2
46393: ARRAY
46394: PUSH
46395: LD_VAR 0 9
46399: LESS
46400: IFFALSE 46442
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46402: LD_ADDR_VAR 0 6
46406: PUSH
46407: LD_VAR 0 6
46411: PPUSH
46412: LD_VAR 0 6
46416: PUSH
46417: LD_INT 1
46419: PLUS
46420: PPUSH
46421: LD_VAR 0 7
46425: PUSH
46426: LD_VAR 0 9
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PPUSH
46435: CALL_OW 2
46439: ST_TO_ADDR
46440: GO 46522
// for j = 1 to result do
46442: LD_ADDR_VAR 0 8
46446: PUSH
46447: DOUBLE
46448: LD_INT 1
46450: DEC
46451: ST_TO_ADDR
46452: LD_VAR 0 6
46456: PUSH
46457: FOR_TO
46458: IFFALSE 46520
// begin if tmp < result [ j ] [ 2 ] then
46460: LD_VAR 0 9
46464: PUSH
46465: LD_VAR 0 6
46469: PUSH
46470: LD_VAR 0 8
46474: ARRAY
46475: PUSH
46476: LD_INT 2
46478: ARRAY
46479: LESS
46480: IFFALSE 46518
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46482: LD_ADDR_VAR 0 6
46486: PUSH
46487: LD_VAR 0 6
46491: PPUSH
46492: LD_VAR 0 8
46496: PPUSH
46497: LD_VAR 0 7
46501: PUSH
46502: LD_VAR 0 9
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PPUSH
46511: CALL_OW 2
46515: ST_TO_ADDR
// break ;
46516: GO 46520
// end ; end ;
46518: GO 46457
46520: POP
46521: POP
// end ; end ;
46522: GO 46321
46524: POP
46525: POP
// if result and not asc then
46526: LD_VAR 0 6
46530: PUSH
46531: LD_VAR 0 4
46535: NOT
46536: AND
46537: IFFALSE 46612
// begin tmp := result ;
46539: LD_ADDR_VAR 0 9
46543: PUSH
46544: LD_VAR 0 6
46548: ST_TO_ADDR
// for i = tmp downto 1 do
46549: LD_ADDR_VAR 0 7
46553: PUSH
46554: DOUBLE
46555: LD_VAR 0 9
46559: INC
46560: ST_TO_ADDR
46561: LD_INT 1
46563: PUSH
46564: FOR_DOWNTO
46565: IFFALSE 46610
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46567: LD_ADDR_VAR 0 6
46571: PUSH
46572: LD_VAR 0 6
46576: PPUSH
46577: LD_VAR 0 9
46581: PUSH
46582: LD_VAR 0 7
46586: MINUS
46587: PUSH
46588: LD_INT 1
46590: PLUS
46591: PPUSH
46592: LD_VAR 0 9
46596: PUSH
46597: LD_VAR 0 7
46601: ARRAY
46602: PPUSH
46603: CALL_OW 1
46607: ST_TO_ADDR
46608: GO 46564
46610: POP
46611: POP
// end ; tmp := [ ] ;
46612: LD_ADDR_VAR 0 9
46616: PUSH
46617: EMPTY
46618: ST_TO_ADDR
// if mode then
46619: LD_VAR 0 5
46623: IFFALSE 46692
// begin for i = 1 to result do
46625: LD_ADDR_VAR 0 7
46629: PUSH
46630: DOUBLE
46631: LD_INT 1
46633: DEC
46634: ST_TO_ADDR
46635: LD_VAR 0 6
46639: PUSH
46640: FOR_TO
46641: IFFALSE 46680
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46643: LD_ADDR_VAR 0 9
46647: PUSH
46648: LD_VAR 0 9
46652: PPUSH
46653: LD_VAR 0 7
46657: PPUSH
46658: LD_VAR 0 6
46662: PUSH
46663: LD_VAR 0 7
46667: ARRAY
46668: PUSH
46669: LD_INT 1
46671: ARRAY
46672: PPUSH
46673: CALL_OW 1
46677: ST_TO_ADDR
46678: GO 46640
46680: POP
46681: POP
// result := tmp ;
46682: LD_ADDR_VAR 0 6
46686: PUSH
46687: LD_VAR 0 9
46691: ST_TO_ADDR
// end ; end ;
46692: LD_VAR 0 6
46696: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46697: LD_INT 0
46699: PPUSH
46700: PPUSH
46701: PPUSH
46702: PPUSH
46703: PPUSH
46704: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46705: LD_ADDR_VAR 0 5
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: ST_TO_ADDR
// if not x or not y then
46727: LD_VAR 0 2
46731: NOT
46732: PUSH
46733: LD_VAR 0 3
46737: NOT
46738: OR
46739: IFFALSE 46743
// exit ;
46741: GO 48389
// if not range then
46743: LD_VAR 0 4
46747: NOT
46748: IFFALSE 46758
// range := 10 ;
46750: LD_ADDR_VAR 0 4
46754: PUSH
46755: LD_INT 10
46757: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46758: LD_ADDR_VAR 0 8
46762: PUSH
46763: LD_INT 81
46765: PUSH
46766: LD_VAR 0 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 92
46777: PUSH
46778: LD_VAR 0 2
46782: PUSH
46783: LD_VAR 0 3
46787: PUSH
46788: LD_VAR 0 4
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: LD_INT 21
46804: PUSH
46805: LD_INT 3
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: PPUSH
46821: CALL_OW 69
46825: ST_TO_ADDR
// if not tmp then
46826: LD_VAR 0 8
46830: NOT
46831: IFFALSE 46835
// exit ;
46833: GO 48389
// for i in tmp do
46835: LD_ADDR_VAR 0 6
46839: PUSH
46840: LD_VAR 0 8
46844: PUSH
46845: FOR_IN
46846: IFFALSE 48364
// begin points := [ 0 , 0 , 0 ] ;
46848: LD_ADDR_VAR 0 9
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
// bpoints := 1 ;
46867: LD_ADDR_VAR 0 10
46871: PUSH
46872: LD_INT 1
46874: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46875: LD_VAR 0 6
46879: PPUSH
46880: CALL_OW 247
46884: PUSH
46885: LD_INT 1
46887: DOUBLE
46888: EQUAL
46889: IFTRUE 46893
46891: GO 47471
46893: POP
// begin if GetClass ( i ) = 1 then
46894: LD_VAR 0 6
46898: PPUSH
46899: CALL_OW 257
46903: PUSH
46904: LD_INT 1
46906: EQUAL
46907: IFFALSE 46928
// points := [ 10 , 5 , 3 ] ;
46909: LD_ADDR_VAR 0 9
46913: PUSH
46914: LD_INT 10
46916: PUSH
46917: LD_INT 5
46919: PUSH
46920: LD_INT 3
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: LIST
46927: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46928: LD_VAR 0 6
46932: PPUSH
46933: CALL_OW 257
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: LD_INT 4
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: IN
46952: IFFALSE 46973
// points := [ 3 , 2 , 1 ] ;
46954: LD_ADDR_VAR 0 9
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46973: LD_VAR 0 6
46977: PPUSH
46978: CALL_OW 257
46982: PUSH
46983: LD_INT 5
46985: EQUAL
46986: IFFALSE 47007
// points := [ 130 , 5 , 2 ] ;
46988: LD_ADDR_VAR 0 9
46992: PUSH
46993: LD_INT 130
46995: PUSH
46996: LD_INT 5
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47007: LD_VAR 0 6
47011: PPUSH
47012: CALL_OW 257
47016: PUSH
47017: LD_INT 8
47019: EQUAL
47020: IFFALSE 47041
// points := [ 35 , 35 , 30 ] ;
47022: LD_ADDR_VAR 0 9
47026: PUSH
47027: LD_INT 35
47029: PUSH
47030: LD_INT 35
47032: PUSH
47033: LD_INT 30
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: LIST
47040: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47041: LD_VAR 0 6
47045: PPUSH
47046: CALL_OW 257
47050: PUSH
47051: LD_INT 9
47053: EQUAL
47054: IFFALSE 47075
// points := [ 20 , 55 , 40 ] ;
47056: LD_ADDR_VAR 0 9
47060: PUSH
47061: LD_INT 20
47063: PUSH
47064: LD_INT 55
47066: PUSH
47067: LD_INT 40
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47075: LD_VAR 0 6
47079: PPUSH
47080: CALL_OW 257
47084: PUSH
47085: LD_INT 12
47087: PUSH
47088: LD_INT 16
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: IN
47095: IFFALSE 47116
// points := [ 5 , 3 , 2 ] ;
47097: LD_ADDR_VAR 0 9
47101: PUSH
47102: LD_INT 5
47104: PUSH
47105: LD_INT 3
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: LIST
47115: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47116: LD_VAR 0 6
47120: PPUSH
47121: CALL_OW 257
47125: PUSH
47126: LD_INT 17
47128: EQUAL
47129: IFFALSE 47150
// points := [ 100 , 50 , 75 ] ;
47131: LD_ADDR_VAR 0 9
47135: PUSH
47136: LD_INT 100
47138: PUSH
47139: LD_INT 50
47141: PUSH
47142: LD_INT 75
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47150: LD_VAR 0 6
47154: PPUSH
47155: CALL_OW 257
47159: PUSH
47160: LD_INT 15
47162: EQUAL
47163: IFFALSE 47184
// points := [ 10 , 5 , 3 ] ;
47165: LD_ADDR_VAR 0 9
47169: PUSH
47170: LD_INT 10
47172: PUSH
47173: LD_INT 5
47175: PUSH
47176: LD_INT 3
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47184: LD_VAR 0 6
47188: PPUSH
47189: CALL_OW 257
47193: PUSH
47194: LD_INT 14
47196: EQUAL
47197: IFFALSE 47218
// points := [ 10 , 0 , 0 ] ;
47199: LD_ADDR_VAR 0 9
47203: PUSH
47204: LD_INT 10
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47218: LD_VAR 0 6
47222: PPUSH
47223: CALL_OW 257
47227: PUSH
47228: LD_INT 11
47230: EQUAL
47231: IFFALSE 47252
// points := [ 30 , 10 , 5 ] ;
47233: LD_ADDR_VAR 0 9
47237: PUSH
47238: LD_INT 30
47240: PUSH
47241: LD_INT 10
47243: PUSH
47244: LD_INT 5
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47252: LD_VAR 0 1
47256: PPUSH
47257: LD_INT 5
47259: PPUSH
47260: CALL_OW 321
47264: PUSH
47265: LD_INT 2
47267: EQUAL
47268: IFFALSE 47285
// bpoints := bpoints * 1.8 ;
47270: LD_ADDR_VAR 0 10
47274: PUSH
47275: LD_VAR 0 10
47279: PUSH
47280: LD_REAL  1.80000000000000E+0000
47283: MUL
47284: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47285: LD_VAR 0 6
47289: PPUSH
47290: CALL_OW 257
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 3
47303: PUSH
47304: LD_INT 4
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: IN
47313: PUSH
47314: LD_VAR 0 1
47318: PPUSH
47319: LD_INT 51
47321: PPUSH
47322: CALL_OW 321
47326: PUSH
47327: LD_INT 2
47329: EQUAL
47330: AND
47331: IFFALSE 47348
// bpoints := bpoints * 1.2 ;
47333: LD_ADDR_VAR 0 10
47337: PUSH
47338: LD_VAR 0 10
47342: PUSH
47343: LD_REAL  1.20000000000000E+0000
47346: MUL
47347: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47348: LD_VAR 0 6
47352: PPUSH
47353: CALL_OW 257
47357: PUSH
47358: LD_INT 5
47360: PUSH
47361: LD_INT 7
47363: PUSH
47364: LD_INT 9
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: IN
47372: PUSH
47373: LD_VAR 0 1
47377: PPUSH
47378: LD_INT 52
47380: PPUSH
47381: CALL_OW 321
47385: PUSH
47386: LD_INT 2
47388: EQUAL
47389: AND
47390: IFFALSE 47407
// bpoints := bpoints * 1.5 ;
47392: LD_ADDR_VAR 0 10
47396: PUSH
47397: LD_VAR 0 10
47401: PUSH
47402: LD_REAL  1.50000000000000E+0000
47405: MUL
47406: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47407: LD_VAR 0 1
47411: PPUSH
47412: LD_INT 66
47414: PPUSH
47415: CALL_OW 321
47419: PUSH
47420: LD_INT 2
47422: EQUAL
47423: IFFALSE 47440
// bpoints := bpoints * 1.1 ;
47425: LD_ADDR_VAR 0 10
47429: PUSH
47430: LD_VAR 0 10
47434: PUSH
47435: LD_REAL  1.10000000000000E+0000
47438: MUL
47439: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47440: LD_ADDR_VAR 0 10
47444: PUSH
47445: LD_VAR 0 10
47449: PUSH
47450: LD_VAR 0 6
47454: PPUSH
47455: LD_INT 1
47457: PPUSH
47458: CALL_OW 259
47462: PUSH
47463: LD_REAL  1.15000000000000E+0000
47466: MUL
47467: MUL
47468: ST_TO_ADDR
// end ; unit_vehicle :
47469: GO 48293
47471: LD_INT 2
47473: DOUBLE
47474: EQUAL
47475: IFTRUE 47479
47477: GO 48281
47479: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47480: LD_VAR 0 6
47484: PPUSH
47485: CALL_OW 264
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: LD_INT 42
47495: PUSH
47496: LD_INT 24
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: IN
47504: IFFALSE 47525
// points := [ 25 , 5 , 3 ] ;
47506: LD_ADDR_VAR 0 9
47510: PUSH
47511: LD_INT 25
47513: PUSH
47514: LD_INT 5
47516: PUSH
47517: LD_INT 3
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47525: LD_VAR 0 6
47529: PPUSH
47530: CALL_OW 264
47534: PUSH
47535: LD_INT 4
47537: PUSH
47538: LD_INT 43
47540: PUSH
47541: LD_INT 25
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: LIST
47548: IN
47549: IFFALSE 47570
// points := [ 40 , 15 , 5 ] ;
47551: LD_ADDR_VAR 0 9
47555: PUSH
47556: LD_INT 40
47558: PUSH
47559: LD_INT 15
47561: PUSH
47562: LD_INT 5
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47570: LD_VAR 0 6
47574: PPUSH
47575: CALL_OW 264
47579: PUSH
47580: LD_INT 3
47582: PUSH
47583: LD_INT 23
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: IN
47590: IFFALSE 47611
// points := [ 7 , 25 , 8 ] ;
47592: LD_ADDR_VAR 0 9
47596: PUSH
47597: LD_INT 7
47599: PUSH
47600: LD_INT 25
47602: PUSH
47603: LD_INT 8
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47611: LD_VAR 0 6
47615: PPUSH
47616: CALL_OW 264
47620: PUSH
47621: LD_INT 5
47623: PUSH
47624: LD_INT 27
47626: PUSH
47627: LD_INT 44
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: LIST
47634: IN
47635: IFFALSE 47656
// points := [ 14 , 50 , 16 ] ;
47637: LD_ADDR_VAR 0 9
47641: PUSH
47642: LD_INT 14
47644: PUSH
47645: LD_INT 50
47647: PUSH
47648: LD_INT 16
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47656: LD_VAR 0 6
47660: PPUSH
47661: CALL_OW 264
47665: PUSH
47666: LD_INT 6
47668: PUSH
47669: LD_INT 46
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: IN
47676: IFFALSE 47697
// points := [ 32 , 120 , 70 ] ;
47678: LD_ADDR_VAR 0 9
47682: PUSH
47683: LD_INT 32
47685: PUSH
47686: LD_INT 120
47688: PUSH
47689: LD_INT 70
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
47697: LD_VAR 0 6
47701: PPUSH
47702: CALL_OW 264
47706: PUSH
47707: LD_INT 7
47709: PUSH
47710: LD_INT 28
47712: PUSH
47713: LD_INT 45
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: IN
47721: IFFALSE 47742
// points := [ 35 , 20 , 45 ] ;
47723: LD_ADDR_VAR 0 9
47727: PUSH
47728: LD_INT 35
47730: PUSH
47731: LD_INT 20
47733: PUSH
47734: LD_INT 45
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47742: LD_VAR 0 6
47746: PPUSH
47747: CALL_OW 264
47751: PUSH
47752: LD_INT 47
47754: PUSH
47755: EMPTY
47756: LIST
47757: IN
47758: IFFALSE 47779
// points := [ 67 , 45 , 75 ] ;
47760: LD_ADDR_VAR 0 9
47764: PUSH
47765: LD_INT 67
47767: PUSH
47768: LD_INT 45
47770: PUSH
47771: LD_INT 75
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47779: LD_VAR 0 6
47783: PPUSH
47784: CALL_OW 264
47788: PUSH
47789: LD_INT 26
47791: PUSH
47792: EMPTY
47793: LIST
47794: IN
47795: IFFALSE 47816
// points := [ 120 , 30 , 80 ] ;
47797: LD_ADDR_VAR 0 9
47801: PUSH
47802: LD_INT 120
47804: PUSH
47805: LD_INT 30
47807: PUSH
47808: LD_INT 80
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47816: LD_VAR 0 6
47820: PPUSH
47821: CALL_OW 264
47825: PUSH
47826: LD_INT 22
47828: PUSH
47829: EMPTY
47830: LIST
47831: IN
47832: IFFALSE 47853
// points := [ 40 , 1 , 1 ] ;
47834: LD_ADDR_VAR 0 9
47838: PUSH
47839: LD_INT 40
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47853: LD_VAR 0 6
47857: PPUSH
47858: CALL_OW 264
47862: PUSH
47863: LD_INT 29
47865: PUSH
47866: EMPTY
47867: LIST
47868: IN
47869: IFFALSE 47890
// points := [ 70 , 200 , 400 ] ;
47871: LD_ADDR_VAR 0 9
47875: PUSH
47876: LD_INT 70
47878: PUSH
47879: LD_INT 200
47881: PUSH
47882: LD_INT 400
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47890: LD_VAR 0 6
47894: PPUSH
47895: CALL_OW 264
47899: PUSH
47900: LD_INT 14
47902: PUSH
47903: LD_INT 53
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: IN
47910: IFFALSE 47931
// points := [ 40 , 10 , 20 ] ;
47912: LD_ADDR_VAR 0 9
47916: PUSH
47917: LD_INT 40
47919: PUSH
47920: LD_INT 10
47922: PUSH
47923: LD_INT 20
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47931: LD_VAR 0 6
47935: PPUSH
47936: CALL_OW 264
47940: PUSH
47941: LD_INT 9
47943: PUSH
47944: EMPTY
47945: LIST
47946: IN
47947: IFFALSE 47968
// points := [ 5 , 70 , 20 ] ;
47949: LD_ADDR_VAR 0 9
47953: PUSH
47954: LD_INT 5
47956: PUSH
47957: LD_INT 70
47959: PUSH
47960: LD_INT 20
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47968: LD_VAR 0 6
47972: PPUSH
47973: CALL_OW 264
47977: PUSH
47978: LD_INT 10
47980: PUSH
47981: EMPTY
47982: LIST
47983: IN
47984: IFFALSE 48005
// points := [ 35 , 110 , 70 ] ;
47986: LD_ADDR_VAR 0 9
47990: PUSH
47991: LD_INT 35
47993: PUSH
47994: LD_INT 110
47996: PUSH
47997: LD_INT 70
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48005: LD_VAR 0 6
48009: PPUSH
48010: CALL_OW 265
48014: PUSH
48015: LD_INT 25
48017: EQUAL
48018: IFFALSE 48039
// points := [ 80 , 65 , 100 ] ;
48020: LD_ADDR_VAR 0 9
48024: PUSH
48025: LD_INT 80
48027: PUSH
48028: LD_INT 65
48030: PUSH
48031: LD_INT 100
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48039: LD_VAR 0 6
48043: PPUSH
48044: CALL_OW 263
48048: PUSH
48049: LD_INT 1
48051: EQUAL
48052: IFFALSE 48087
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48054: LD_ADDR_VAR 0 10
48058: PUSH
48059: LD_VAR 0 10
48063: PUSH
48064: LD_VAR 0 6
48068: PPUSH
48069: CALL_OW 311
48073: PPUSH
48074: LD_INT 3
48076: PPUSH
48077: CALL_OW 259
48081: PUSH
48082: LD_INT 4
48084: MUL
48085: MUL
48086: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48087: LD_VAR 0 6
48091: PPUSH
48092: CALL_OW 263
48096: PUSH
48097: LD_INT 2
48099: EQUAL
48100: IFFALSE 48151
// begin j := IsControledBy ( i ) ;
48102: LD_ADDR_VAR 0 7
48106: PUSH
48107: LD_VAR 0 6
48111: PPUSH
48112: CALL_OW 312
48116: ST_TO_ADDR
// if j then
48117: LD_VAR 0 7
48121: IFFALSE 48151
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48123: LD_ADDR_VAR 0 10
48127: PUSH
48128: LD_VAR 0 10
48132: PUSH
48133: LD_VAR 0 7
48137: PPUSH
48138: LD_INT 3
48140: PPUSH
48141: CALL_OW 259
48145: PUSH
48146: LD_INT 3
48148: MUL
48149: MUL
48150: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48151: LD_VAR 0 6
48155: PPUSH
48156: CALL_OW 264
48160: PUSH
48161: LD_INT 5
48163: PUSH
48164: LD_INT 6
48166: PUSH
48167: LD_INT 46
48169: PUSH
48170: LD_INT 44
48172: PUSH
48173: LD_INT 47
48175: PUSH
48176: LD_INT 45
48178: PUSH
48179: LD_INT 28
48181: PUSH
48182: LD_INT 7
48184: PUSH
48185: LD_INT 27
48187: PUSH
48188: LD_INT 29
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: IN
48203: PUSH
48204: LD_VAR 0 1
48208: PPUSH
48209: LD_INT 52
48211: PPUSH
48212: CALL_OW 321
48216: PUSH
48217: LD_INT 2
48219: EQUAL
48220: AND
48221: IFFALSE 48238
// bpoints := bpoints * 1.2 ;
48223: LD_ADDR_VAR 0 10
48227: PUSH
48228: LD_VAR 0 10
48232: PUSH
48233: LD_REAL  1.20000000000000E+0000
48236: MUL
48237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48238: LD_VAR 0 6
48242: PPUSH
48243: CALL_OW 264
48247: PUSH
48248: LD_INT 6
48250: PUSH
48251: LD_INT 46
48253: PUSH
48254: LD_INT 47
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: IN
48262: IFFALSE 48279
// bpoints := bpoints * 1.2 ;
48264: LD_ADDR_VAR 0 10
48268: PUSH
48269: LD_VAR 0 10
48273: PUSH
48274: LD_REAL  1.20000000000000E+0000
48277: MUL
48278: ST_TO_ADDR
// end ; unit_building :
48279: GO 48293
48281: LD_INT 3
48283: DOUBLE
48284: EQUAL
48285: IFTRUE 48289
48287: GO 48292
48289: POP
// ; end ;
48290: GO 48293
48292: POP
// for j = 1 to 3 do
48293: LD_ADDR_VAR 0 7
48297: PUSH
48298: DOUBLE
48299: LD_INT 1
48301: DEC
48302: ST_TO_ADDR
48303: LD_INT 3
48305: PUSH
48306: FOR_TO
48307: IFFALSE 48360
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48309: LD_ADDR_VAR 0 5
48313: PUSH
48314: LD_VAR 0 5
48318: PPUSH
48319: LD_VAR 0 7
48323: PPUSH
48324: LD_VAR 0 5
48328: PUSH
48329: LD_VAR 0 7
48333: ARRAY
48334: PUSH
48335: LD_VAR 0 9
48339: PUSH
48340: LD_VAR 0 7
48344: ARRAY
48345: PUSH
48346: LD_VAR 0 10
48350: MUL
48351: PLUS
48352: PPUSH
48353: CALL_OW 1
48357: ST_TO_ADDR
48358: GO 48306
48360: POP
48361: POP
// end ;
48362: GO 46845
48364: POP
48365: POP
// result := Replace ( result , 4 , tmp ) ;
48366: LD_ADDR_VAR 0 5
48370: PUSH
48371: LD_VAR 0 5
48375: PPUSH
48376: LD_INT 4
48378: PPUSH
48379: LD_VAR 0 8
48383: PPUSH
48384: CALL_OW 1
48388: ST_TO_ADDR
// end ;
48389: LD_VAR 0 5
48393: RET
// export function DangerAtRange ( unit , range ) ; begin
48394: LD_INT 0
48396: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48397: LD_ADDR_VAR 0 3
48401: PUSH
48402: LD_VAR 0 1
48406: PPUSH
48407: CALL_OW 255
48411: PPUSH
48412: LD_VAR 0 1
48416: PPUSH
48417: CALL_OW 250
48421: PPUSH
48422: LD_VAR 0 1
48426: PPUSH
48427: CALL_OW 251
48431: PPUSH
48432: LD_VAR 0 2
48436: PPUSH
48437: CALL 46697 0 4
48441: ST_TO_ADDR
// end ;
48442: LD_VAR 0 3
48446: RET
// export function DangerInArea ( side , area ) ; begin
48447: LD_INT 0
48449: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48450: LD_ADDR_VAR 0 3
48454: PUSH
48455: LD_VAR 0 2
48459: PPUSH
48460: LD_INT 81
48462: PUSH
48463: LD_VAR 0 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PPUSH
48472: CALL_OW 70
48476: ST_TO_ADDR
// end ;
48477: LD_VAR 0 3
48481: RET
// export function IsExtension ( b ) ; begin
48482: LD_INT 0
48484: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48485: LD_ADDR_VAR 0 2
48489: PUSH
48490: LD_VAR 0 1
48494: PUSH
48495: LD_INT 23
48497: PUSH
48498: LD_INT 20
48500: PUSH
48501: LD_INT 22
48503: PUSH
48504: LD_INT 17
48506: PUSH
48507: LD_INT 24
48509: PUSH
48510: LD_INT 21
48512: PUSH
48513: LD_INT 19
48515: PUSH
48516: LD_INT 16
48518: PUSH
48519: LD_INT 25
48521: PUSH
48522: LD_INT 18
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: IN
48537: ST_TO_ADDR
// end ;
48538: LD_VAR 0 2
48542: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
48543: LD_INT 0
48545: PPUSH
48546: PPUSH
48547: PPUSH
// result := [ ] ;
48548: LD_ADDR_VAR 0 3
48552: PUSH
48553: EMPTY
48554: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48555: LD_ADDR_VAR 0 4
48559: PUSH
48560: LD_VAR 0 2
48564: PPUSH
48565: LD_INT 21
48567: PUSH
48568: LD_INT 3
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PPUSH
48575: CALL_OW 70
48579: ST_TO_ADDR
// if not tmp then
48580: LD_VAR 0 4
48584: NOT
48585: IFFALSE 48589
// exit ;
48587: GO 48647
// for i in tmp do
48589: LD_ADDR_VAR 0 5
48593: PUSH
48594: LD_VAR 0 4
48598: PUSH
48599: FOR_IN
48600: IFFALSE 48635
// if GetBase ( i ) <> base then
48602: LD_VAR 0 5
48606: PPUSH
48607: CALL_OW 274
48611: PUSH
48612: LD_VAR 0 1
48616: NONEQUAL
48617: IFFALSE 48633
// ComLinkToBase ( base , i ) ;
48619: LD_VAR 0 1
48623: PPUSH
48624: LD_VAR 0 5
48628: PPUSH
48629: CALL_OW 169
48633: GO 48599
48635: POP
48636: POP
// result := tmp ;
48637: LD_ADDR_VAR 0 3
48641: PUSH
48642: LD_VAR 0 4
48646: ST_TO_ADDR
// end ;
48647: LD_VAR 0 3
48651: RET
// export function ComComplete ( unit , b ) ; var i ; begin
48652: LD_INT 0
48654: PPUSH
48655: PPUSH
// if BuildingStatus ( b ) = bs_build then
48656: LD_VAR 0 2
48660: PPUSH
48661: CALL_OW 461
48665: PUSH
48666: LD_INT 1
48668: EQUAL
48669: IFFALSE 48729
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48671: LD_VAR 0 1
48675: PPUSH
48676: LD_STRING h
48678: PUSH
48679: LD_VAR 0 2
48683: PPUSH
48684: CALL_OW 250
48688: PUSH
48689: LD_VAR 0 2
48693: PPUSH
48694: CALL_OW 251
48698: PUSH
48699: LD_VAR 0 2
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: PUSH
48722: EMPTY
48723: LIST
48724: PPUSH
48725: CALL_OW 446
// end ;
48729: LD_VAR 0 3
48733: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48734: LD_INT 0
48736: PPUSH
48737: PPUSH
48738: PPUSH
48739: PPUSH
48740: PPUSH
48741: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
48742: LD_VAR 0 1
48746: NOT
48747: PUSH
48748: LD_VAR 0 1
48752: PPUSH
48753: CALL_OW 263
48757: PUSH
48758: LD_INT 2
48760: EQUAL
48761: NOT
48762: OR
48763: IFFALSE 48767
// exit ;
48765: GO 49083
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48767: LD_ADDR_VAR 0 6
48771: PUSH
48772: LD_INT 22
48774: PUSH
48775: LD_VAR 0 1
48779: PPUSH
48780: CALL_OW 255
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 30
48794: PUSH
48795: LD_INT 36
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 34
48804: PUSH
48805: LD_INT 31
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PPUSH
48821: CALL_OW 69
48825: ST_TO_ADDR
// if not tmp then
48826: LD_VAR 0 6
48830: NOT
48831: IFFALSE 48835
// exit ;
48833: GO 49083
// result := [ ] ;
48835: LD_ADDR_VAR 0 2
48839: PUSH
48840: EMPTY
48841: ST_TO_ADDR
// for i in tmp do
48842: LD_ADDR_VAR 0 3
48846: PUSH
48847: LD_VAR 0 6
48851: PUSH
48852: FOR_IN
48853: IFFALSE 48924
// begin t := UnitsInside ( i ) ;
48855: LD_ADDR_VAR 0 4
48859: PUSH
48860: LD_VAR 0 3
48864: PPUSH
48865: CALL_OW 313
48869: ST_TO_ADDR
// if t then
48870: LD_VAR 0 4
48874: IFFALSE 48922
// for j in t do
48876: LD_ADDR_VAR 0 7
48880: PUSH
48881: LD_VAR 0 4
48885: PUSH
48886: FOR_IN
48887: IFFALSE 48920
// result := Insert ( result , result + 1 , j ) ;
48889: LD_ADDR_VAR 0 2
48893: PUSH
48894: LD_VAR 0 2
48898: PPUSH
48899: LD_VAR 0 2
48903: PUSH
48904: LD_INT 1
48906: PLUS
48907: PPUSH
48908: LD_VAR 0 7
48912: PPUSH
48913: CALL_OW 2
48917: ST_TO_ADDR
48918: GO 48886
48920: POP
48921: POP
// end ;
48922: GO 48852
48924: POP
48925: POP
// if not result then
48926: LD_VAR 0 2
48930: NOT
48931: IFFALSE 48935
// exit ;
48933: GO 49083
// mech := result [ 1 ] ;
48935: LD_ADDR_VAR 0 5
48939: PUSH
48940: LD_VAR 0 2
48944: PUSH
48945: LD_INT 1
48947: ARRAY
48948: ST_TO_ADDR
// if result > 1 then
48949: LD_VAR 0 2
48953: PUSH
48954: LD_INT 1
48956: GREATER
48957: IFFALSE 49069
// for i = 2 to result do
48959: LD_ADDR_VAR 0 3
48963: PUSH
48964: DOUBLE
48965: LD_INT 2
48967: DEC
48968: ST_TO_ADDR
48969: LD_VAR 0 2
48973: PUSH
48974: FOR_TO
48975: IFFALSE 49067
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48977: LD_ADDR_VAR 0 4
48981: PUSH
48982: LD_VAR 0 2
48986: PUSH
48987: LD_VAR 0 3
48991: ARRAY
48992: PPUSH
48993: LD_INT 3
48995: PPUSH
48996: CALL_OW 259
49000: PUSH
49001: LD_VAR 0 2
49005: PUSH
49006: LD_VAR 0 3
49010: ARRAY
49011: PPUSH
49012: CALL_OW 432
49016: MINUS
49017: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49018: LD_VAR 0 4
49022: PUSH
49023: LD_VAR 0 5
49027: PPUSH
49028: LD_INT 3
49030: PPUSH
49031: CALL_OW 259
49035: PUSH
49036: LD_VAR 0 5
49040: PPUSH
49041: CALL_OW 432
49045: MINUS
49046: GREATEREQUAL
49047: IFFALSE 49065
// mech := result [ i ] ;
49049: LD_ADDR_VAR 0 5
49053: PUSH
49054: LD_VAR 0 2
49058: PUSH
49059: LD_VAR 0 3
49063: ARRAY
49064: ST_TO_ADDR
// end ;
49065: GO 48974
49067: POP
49068: POP
// ComLinkTo ( vehicle , mech ) ;
49069: LD_VAR 0 1
49073: PPUSH
49074: LD_VAR 0 5
49078: PPUSH
49079: CALL_OW 135
// end ;
49083: LD_VAR 0 2
49087: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49088: LD_INT 0
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
49094: PPUSH
49095: PPUSH
49096: PPUSH
49097: PPUSH
49098: PPUSH
49099: PPUSH
49100: PPUSH
49101: PPUSH
49102: PPUSH
// result := [ ] ;
49103: LD_ADDR_VAR 0 7
49107: PUSH
49108: EMPTY
49109: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49110: LD_VAR 0 1
49114: PPUSH
49115: CALL_OW 266
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: IN
49130: NOT
49131: IFFALSE 49135
// exit ;
49133: GO 50766
// if name then
49135: LD_VAR 0 3
49139: IFFALSE 49155
// SetBName ( base_dep , name ) ;
49141: LD_VAR 0 1
49145: PPUSH
49146: LD_VAR 0 3
49150: PPUSH
49151: CALL_OW 500
// base := GetBase ( base_dep ) ;
49155: LD_ADDR_VAR 0 15
49159: PUSH
49160: LD_VAR 0 1
49164: PPUSH
49165: CALL_OW 274
49169: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49170: LD_ADDR_VAR 0 16
49174: PUSH
49175: LD_VAR 0 1
49179: PPUSH
49180: CALL_OW 255
49184: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49185: LD_ADDR_VAR 0 17
49189: PUSH
49190: LD_VAR 0 1
49194: PPUSH
49195: CALL_OW 248
49199: ST_TO_ADDR
// if sources then
49200: LD_VAR 0 5
49204: IFFALSE 49251
// for i = 1 to 3 do
49206: LD_ADDR_VAR 0 8
49210: PUSH
49211: DOUBLE
49212: LD_INT 1
49214: DEC
49215: ST_TO_ADDR
49216: LD_INT 3
49218: PUSH
49219: FOR_TO
49220: IFFALSE 49249
// AddResourceType ( base , i , sources [ i ] ) ;
49222: LD_VAR 0 15
49226: PPUSH
49227: LD_VAR 0 8
49231: PPUSH
49232: LD_VAR 0 5
49236: PUSH
49237: LD_VAR 0 8
49241: ARRAY
49242: PPUSH
49243: CALL_OW 276
49247: GO 49219
49249: POP
49250: POP
// buildings := GetBaseBuildings ( base , area ) ;
49251: LD_ADDR_VAR 0 18
49255: PUSH
49256: LD_VAR 0 15
49260: PPUSH
49261: LD_VAR 0 2
49265: PPUSH
49266: CALL 48543 0 2
49270: ST_TO_ADDR
// InitHc ;
49271: CALL_OW 19
// InitUc ;
49275: CALL_OW 18
// uc_side := side ;
49279: LD_ADDR_OWVAR 20
49283: PUSH
49284: LD_VAR 0 16
49288: ST_TO_ADDR
// uc_nation := nation ;
49289: LD_ADDR_OWVAR 21
49293: PUSH
49294: LD_VAR 0 17
49298: ST_TO_ADDR
// if buildings then
49299: LD_VAR 0 18
49303: IFFALSE 50625
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49305: LD_ADDR_VAR 0 19
49309: PUSH
49310: LD_VAR 0 18
49314: PPUSH
49315: LD_INT 2
49317: PUSH
49318: LD_INT 30
49320: PUSH
49321: LD_INT 29
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 30
49330: PUSH
49331: LD_INT 30
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: LIST
49342: PPUSH
49343: CALL_OW 72
49347: ST_TO_ADDR
// if tmp then
49348: LD_VAR 0 19
49352: IFFALSE 49400
// for i in tmp do
49354: LD_ADDR_VAR 0 8
49358: PUSH
49359: LD_VAR 0 19
49363: PUSH
49364: FOR_IN
49365: IFFALSE 49398
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49367: LD_VAR 0 8
49371: PPUSH
49372: CALL_OW 250
49376: PPUSH
49377: LD_VAR 0 8
49381: PPUSH
49382: CALL_OW 251
49386: PPUSH
49387: LD_VAR 0 16
49391: PPUSH
49392: CALL_OW 441
49396: GO 49364
49398: POP
49399: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49400: LD_VAR 0 18
49404: PPUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 30
49410: PUSH
49411: LD_INT 32
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 30
49420: PUSH
49421: LD_INT 33
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: PPUSH
49433: CALL_OW 72
49437: IFFALSE 49525
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49439: LD_ADDR_VAR 0 8
49443: PUSH
49444: LD_VAR 0 18
49448: PPUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 30
49454: PUSH
49455: LD_INT 32
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 30
49464: PUSH
49465: LD_INT 33
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: PPUSH
49477: CALL_OW 72
49481: PUSH
49482: FOR_IN
49483: IFFALSE 49523
// begin if not GetBWeapon ( i ) then
49485: LD_VAR 0 8
49489: PPUSH
49490: CALL_OW 269
49494: NOT
49495: IFFALSE 49521
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49497: LD_VAR 0 8
49501: PPUSH
49502: LD_VAR 0 8
49506: PPUSH
49507: LD_VAR 0 2
49511: PPUSH
49512: CALL 50771 0 2
49516: PPUSH
49517: CALL_OW 431
// end ;
49521: GO 49482
49523: POP
49524: POP
// end ; for i = 1 to personel do
49525: LD_ADDR_VAR 0 8
49529: PUSH
49530: DOUBLE
49531: LD_INT 1
49533: DEC
49534: ST_TO_ADDR
49535: LD_VAR 0 6
49539: PUSH
49540: FOR_TO
49541: IFFALSE 50605
// begin if i > 4 then
49543: LD_VAR 0 8
49547: PUSH
49548: LD_INT 4
49550: GREATER
49551: IFFALSE 49555
// break ;
49553: GO 50605
// case i of 1 :
49555: LD_VAR 0 8
49559: PUSH
49560: LD_INT 1
49562: DOUBLE
49563: EQUAL
49564: IFTRUE 49568
49566: GO 49648
49568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49569: LD_ADDR_VAR 0 12
49573: PUSH
49574: LD_VAR 0 18
49578: PPUSH
49579: LD_INT 22
49581: PUSH
49582: LD_VAR 0 16
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 58
49593: PUSH
49594: EMPTY
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: LD_INT 30
49602: PUSH
49603: LD_INT 32
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 30
49612: PUSH
49613: LD_INT 4
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 30
49622: PUSH
49623: LD_INT 5
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: LIST
49640: PPUSH
49641: CALL_OW 72
49645: ST_TO_ADDR
49646: GO 49870
49648: LD_INT 2
49650: DOUBLE
49651: EQUAL
49652: IFTRUE 49656
49654: GO 49718
49656: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49657: LD_ADDR_VAR 0 12
49661: PUSH
49662: LD_VAR 0 18
49666: PPUSH
49667: LD_INT 22
49669: PUSH
49670: LD_VAR 0 16
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: LD_INT 30
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 30
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PPUSH
49711: CALL_OW 72
49715: ST_TO_ADDR
49716: GO 49870
49718: LD_INT 3
49720: DOUBLE
49721: EQUAL
49722: IFTRUE 49726
49724: GO 49788
49726: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49727: LD_ADDR_VAR 0 12
49731: PUSH
49732: LD_VAR 0 18
49736: PPUSH
49737: LD_INT 22
49739: PUSH
49740: LD_VAR 0 16
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 30
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 30
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PPUSH
49781: CALL_OW 72
49785: ST_TO_ADDR
49786: GO 49870
49788: LD_INT 4
49790: DOUBLE
49791: EQUAL
49792: IFTRUE 49796
49794: GO 49869
49796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49797: LD_ADDR_VAR 0 12
49801: PUSH
49802: LD_VAR 0 18
49806: PPUSH
49807: LD_INT 22
49809: PUSH
49810: LD_VAR 0 16
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 30
49824: PUSH
49825: LD_INT 6
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 30
49834: PUSH
49835: LD_INT 7
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 30
49844: PUSH
49845: LD_INT 8
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PPUSH
49862: CALL_OW 72
49866: ST_TO_ADDR
49867: GO 49870
49869: POP
// if i = 1 then
49870: LD_VAR 0 8
49874: PUSH
49875: LD_INT 1
49877: EQUAL
49878: IFFALSE 49989
// begin tmp := [ ] ;
49880: LD_ADDR_VAR 0 19
49884: PUSH
49885: EMPTY
49886: ST_TO_ADDR
// for j in f do
49887: LD_ADDR_VAR 0 9
49891: PUSH
49892: LD_VAR 0 12
49896: PUSH
49897: FOR_IN
49898: IFFALSE 49971
// if GetBType ( j ) = b_bunker then
49900: LD_VAR 0 9
49904: PPUSH
49905: CALL_OW 266
49909: PUSH
49910: LD_INT 32
49912: EQUAL
49913: IFFALSE 49940
// tmp := Insert ( tmp , 1 , j ) else
49915: LD_ADDR_VAR 0 19
49919: PUSH
49920: LD_VAR 0 19
49924: PPUSH
49925: LD_INT 1
49927: PPUSH
49928: LD_VAR 0 9
49932: PPUSH
49933: CALL_OW 2
49937: ST_TO_ADDR
49938: GO 49969
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49940: LD_ADDR_VAR 0 19
49944: PUSH
49945: LD_VAR 0 19
49949: PPUSH
49950: LD_VAR 0 19
49954: PUSH
49955: LD_INT 1
49957: PLUS
49958: PPUSH
49959: LD_VAR 0 9
49963: PPUSH
49964: CALL_OW 2
49968: ST_TO_ADDR
49969: GO 49897
49971: POP
49972: POP
// if tmp then
49973: LD_VAR 0 19
49977: IFFALSE 49989
// f := tmp ;
49979: LD_ADDR_VAR 0 12
49983: PUSH
49984: LD_VAR 0 19
49988: ST_TO_ADDR
// end ; x := personel [ i ] ;
49989: LD_ADDR_VAR 0 13
49993: PUSH
49994: LD_VAR 0 6
49998: PUSH
49999: LD_VAR 0 8
50003: ARRAY
50004: ST_TO_ADDR
// if x = - 1 then
50005: LD_VAR 0 13
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: EQUAL
50014: IFFALSE 50223
// begin for j in f do
50016: LD_ADDR_VAR 0 9
50020: PUSH
50021: LD_VAR 0 12
50025: PUSH
50026: FOR_IN
50027: IFFALSE 50219
// repeat InitHc ;
50029: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50033: LD_VAR 0 9
50037: PPUSH
50038: CALL_OW 266
50042: PUSH
50043: LD_INT 5
50045: EQUAL
50046: IFFALSE 50116
// begin if UnitsInside ( j ) < 3 then
50048: LD_VAR 0 9
50052: PPUSH
50053: CALL_OW 313
50057: PUSH
50058: LD_INT 3
50060: LESS
50061: IFFALSE 50097
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50063: LD_INT 0
50065: PPUSH
50066: LD_INT 5
50068: PUSH
50069: LD_INT 8
50071: PUSH
50072: LD_INT 9
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: PUSH
50080: LD_VAR 0 17
50084: ARRAY
50085: PPUSH
50086: LD_VAR 0 4
50090: PPUSH
50091: CALL_OW 380
50095: GO 50114
// PrepareHuman ( false , i , skill ) ;
50097: LD_INT 0
50099: PPUSH
50100: LD_VAR 0 8
50104: PPUSH
50105: LD_VAR 0 4
50109: PPUSH
50110: CALL_OW 380
// end else
50114: GO 50133
// PrepareHuman ( false , i , skill ) ;
50116: LD_INT 0
50118: PPUSH
50119: LD_VAR 0 8
50123: PPUSH
50124: LD_VAR 0 4
50128: PPUSH
50129: CALL_OW 380
// un := CreateHuman ;
50133: LD_ADDR_VAR 0 14
50137: PUSH
50138: CALL_OW 44
50142: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50143: LD_ADDR_VAR 0 7
50147: PUSH
50148: LD_VAR 0 7
50152: PPUSH
50153: LD_INT 1
50155: PPUSH
50156: LD_VAR 0 14
50160: PPUSH
50161: CALL_OW 2
50165: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50166: LD_VAR 0 14
50170: PPUSH
50171: LD_VAR 0 9
50175: PPUSH
50176: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50180: LD_VAR 0 9
50184: PPUSH
50185: CALL_OW 313
50189: PUSH
50190: LD_INT 6
50192: EQUAL
50193: PUSH
50194: LD_VAR 0 9
50198: PPUSH
50199: CALL_OW 266
50203: PUSH
50204: LD_INT 32
50206: PUSH
50207: LD_INT 31
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: IN
50214: OR
50215: IFFALSE 50029
50217: GO 50026
50219: POP
50220: POP
// end else
50221: GO 50603
// for j = 1 to x do
50223: LD_ADDR_VAR 0 9
50227: PUSH
50228: DOUBLE
50229: LD_INT 1
50231: DEC
50232: ST_TO_ADDR
50233: LD_VAR 0 13
50237: PUSH
50238: FOR_TO
50239: IFFALSE 50601
// begin InitHc ;
50241: CALL_OW 19
// if not f then
50245: LD_VAR 0 12
50249: NOT
50250: IFFALSE 50339
// begin PrepareHuman ( false , i , skill ) ;
50252: LD_INT 0
50254: PPUSH
50255: LD_VAR 0 8
50259: PPUSH
50260: LD_VAR 0 4
50264: PPUSH
50265: CALL_OW 380
// un := CreateHuman ;
50269: LD_ADDR_VAR 0 14
50273: PUSH
50274: CALL_OW 44
50278: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50279: LD_ADDR_VAR 0 7
50283: PUSH
50284: LD_VAR 0 7
50288: PPUSH
50289: LD_INT 1
50291: PPUSH
50292: LD_VAR 0 14
50296: PPUSH
50297: CALL_OW 2
50301: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50302: LD_VAR 0 14
50306: PPUSH
50307: LD_VAR 0 1
50311: PPUSH
50312: CALL_OW 250
50316: PPUSH
50317: LD_VAR 0 1
50321: PPUSH
50322: CALL_OW 251
50326: PPUSH
50327: LD_INT 10
50329: PPUSH
50330: LD_INT 0
50332: PPUSH
50333: CALL_OW 50
// continue ;
50337: GO 50238
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50339: LD_VAR 0 12
50343: PUSH
50344: LD_INT 1
50346: ARRAY
50347: PPUSH
50348: CALL_OW 313
50352: PUSH
50353: LD_VAR 0 12
50357: PUSH
50358: LD_INT 1
50360: ARRAY
50361: PPUSH
50362: CALL_OW 266
50366: PUSH
50367: LD_INT 32
50369: PUSH
50370: LD_INT 31
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: IN
50377: AND
50378: PUSH
50379: LD_VAR 0 12
50383: PUSH
50384: LD_INT 1
50386: ARRAY
50387: PPUSH
50388: CALL_OW 313
50392: PUSH
50393: LD_INT 6
50395: EQUAL
50396: OR
50397: IFFALSE 50417
// f := Delete ( f , 1 ) ;
50399: LD_ADDR_VAR 0 12
50403: PUSH
50404: LD_VAR 0 12
50408: PPUSH
50409: LD_INT 1
50411: PPUSH
50412: CALL_OW 3
50416: ST_TO_ADDR
// if not f then
50417: LD_VAR 0 12
50421: NOT
50422: IFFALSE 50440
// begin x := x + 2 ;
50424: LD_ADDR_VAR 0 13
50428: PUSH
50429: LD_VAR 0 13
50433: PUSH
50434: LD_INT 2
50436: PLUS
50437: ST_TO_ADDR
// continue ;
50438: GO 50238
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50440: LD_VAR 0 12
50444: PUSH
50445: LD_INT 1
50447: ARRAY
50448: PPUSH
50449: CALL_OW 266
50453: PUSH
50454: LD_INT 5
50456: EQUAL
50457: IFFALSE 50531
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50459: LD_VAR 0 12
50463: PUSH
50464: LD_INT 1
50466: ARRAY
50467: PPUSH
50468: CALL_OW 313
50472: PUSH
50473: LD_INT 3
50475: LESS
50476: IFFALSE 50512
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50478: LD_INT 0
50480: PPUSH
50481: LD_INT 5
50483: PUSH
50484: LD_INT 8
50486: PUSH
50487: LD_INT 9
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: PUSH
50495: LD_VAR 0 17
50499: ARRAY
50500: PPUSH
50501: LD_VAR 0 4
50505: PPUSH
50506: CALL_OW 380
50510: GO 50529
// PrepareHuman ( false , i , skill ) ;
50512: LD_INT 0
50514: PPUSH
50515: LD_VAR 0 8
50519: PPUSH
50520: LD_VAR 0 4
50524: PPUSH
50525: CALL_OW 380
// end else
50529: GO 50548
// PrepareHuman ( false , i , skill ) ;
50531: LD_INT 0
50533: PPUSH
50534: LD_VAR 0 8
50538: PPUSH
50539: LD_VAR 0 4
50543: PPUSH
50544: CALL_OW 380
// un := CreateHuman ;
50548: LD_ADDR_VAR 0 14
50552: PUSH
50553: CALL_OW 44
50557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50558: LD_ADDR_VAR 0 7
50562: PUSH
50563: LD_VAR 0 7
50567: PPUSH
50568: LD_INT 1
50570: PPUSH
50571: LD_VAR 0 14
50575: PPUSH
50576: CALL_OW 2
50580: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50581: LD_VAR 0 14
50585: PPUSH
50586: LD_VAR 0 12
50590: PUSH
50591: LD_INT 1
50593: ARRAY
50594: PPUSH
50595: CALL_OW 52
// end ;
50599: GO 50238
50601: POP
50602: POP
// end ;
50603: GO 49540
50605: POP
50606: POP
// result := result ^ buildings ;
50607: LD_ADDR_VAR 0 7
50611: PUSH
50612: LD_VAR 0 7
50616: PUSH
50617: LD_VAR 0 18
50621: ADD
50622: ST_TO_ADDR
// end else
50623: GO 50766
// begin for i = 1 to personel do
50625: LD_ADDR_VAR 0 8
50629: PUSH
50630: DOUBLE
50631: LD_INT 1
50633: DEC
50634: ST_TO_ADDR
50635: LD_VAR 0 6
50639: PUSH
50640: FOR_TO
50641: IFFALSE 50764
// begin if i > 4 then
50643: LD_VAR 0 8
50647: PUSH
50648: LD_INT 4
50650: GREATER
50651: IFFALSE 50655
// break ;
50653: GO 50764
// x := personel [ i ] ;
50655: LD_ADDR_VAR 0 13
50659: PUSH
50660: LD_VAR 0 6
50664: PUSH
50665: LD_VAR 0 8
50669: ARRAY
50670: ST_TO_ADDR
// if x = - 1 then
50671: LD_VAR 0 13
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: EQUAL
50680: IFFALSE 50684
// continue ;
50682: GO 50640
// PrepareHuman ( false , i , skill ) ;
50684: LD_INT 0
50686: PPUSH
50687: LD_VAR 0 8
50691: PPUSH
50692: LD_VAR 0 4
50696: PPUSH
50697: CALL_OW 380
// un := CreateHuman ;
50701: LD_ADDR_VAR 0 14
50705: PUSH
50706: CALL_OW 44
50710: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50711: LD_VAR 0 14
50715: PPUSH
50716: LD_VAR 0 1
50720: PPUSH
50721: CALL_OW 250
50725: PPUSH
50726: LD_VAR 0 1
50730: PPUSH
50731: CALL_OW 251
50735: PPUSH
50736: LD_INT 10
50738: PPUSH
50739: LD_INT 0
50741: PPUSH
50742: CALL_OW 50
// result := result ^ un ;
50746: LD_ADDR_VAR 0 7
50750: PUSH
50751: LD_VAR 0 7
50755: PUSH
50756: LD_VAR 0 14
50760: ADD
50761: ST_TO_ADDR
// end ;
50762: GO 50640
50764: POP
50765: POP
// end ; end ;
50766: LD_VAR 0 7
50770: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50771: LD_INT 0
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
50778: PPUSH
50779: PPUSH
50780: PPUSH
50781: PPUSH
50782: PPUSH
50783: PPUSH
50784: PPUSH
50785: PPUSH
50786: PPUSH
50787: PPUSH
50788: PPUSH
// result := false ;
50789: LD_ADDR_VAR 0 3
50793: PUSH
50794: LD_INT 0
50796: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50797: LD_VAR 0 1
50801: NOT
50802: PUSH
50803: LD_VAR 0 1
50807: PPUSH
50808: CALL_OW 266
50812: PUSH
50813: LD_INT 32
50815: PUSH
50816: LD_INT 33
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: IN
50823: NOT
50824: OR
50825: IFFALSE 50829
// exit ;
50827: GO 51965
// nat := GetNation ( tower ) ;
50829: LD_ADDR_VAR 0 12
50833: PUSH
50834: LD_VAR 0 1
50838: PPUSH
50839: CALL_OW 248
50843: ST_TO_ADDR
// side := GetSide ( tower ) ;
50844: LD_ADDR_VAR 0 16
50848: PUSH
50849: LD_VAR 0 1
50853: PPUSH
50854: CALL_OW 255
50858: ST_TO_ADDR
// x := GetX ( tower ) ;
50859: LD_ADDR_VAR 0 10
50863: PUSH
50864: LD_VAR 0 1
50868: PPUSH
50869: CALL_OW 250
50873: ST_TO_ADDR
// y := GetY ( tower ) ;
50874: LD_ADDR_VAR 0 11
50878: PUSH
50879: LD_VAR 0 1
50883: PPUSH
50884: CALL_OW 251
50888: ST_TO_ADDR
// if not x or not y then
50889: LD_VAR 0 10
50893: NOT
50894: PUSH
50895: LD_VAR 0 11
50899: NOT
50900: OR
50901: IFFALSE 50905
// exit ;
50903: GO 51965
// weapon := 0 ;
50905: LD_ADDR_VAR 0 18
50909: PUSH
50910: LD_INT 0
50912: ST_TO_ADDR
// fac_list := [ ] ;
50913: LD_ADDR_VAR 0 17
50917: PUSH
50918: EMPTY
50919: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
50920: LD_ADDR_VAR 0 6
50924: PUSH
50925: LD_VAR 0 1
50929: PPUSH
50930: CALL_OW 274
50934: PPUSH
50935: LD_VAR 0 2
50939: PPUSH
50940: CALL 48543 0 2
50944: PPUSH
50945: LD_INT 30
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PPUSH
50955: CALL_OW 72
50959: ST_TO_ADDR
// if not factories then
50960: LD_VAR 0 6
50964: NOT
50965: IFFALSE 50969
// exit ;
50967: GO 51965
// for i in factories do
50969: LD_ADDR_VAR 0 8
50973: PUSH
50974: LD_VAR 0 6
50978: PUSH
50979: FOR_IN
50980: IFFALSE 51005
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50982: LD_ADDR_VAR 0 17
50986: PUSH
50987: LD_VAR 0 17
50991: PUSH
50992: LD_VAR 0 8
50996: PPUSH
50997: CALL_OW 478
51001: UNION
51002: ST_TO_ADDR
51003: GO 50979
51005: POP
51006: POP
// if not fac_list then
51007: LD_VAR 0 17
51011: NOT
51012: IFFALSE 51016
// exit ;
51014: GO 51965
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51016: LD_ADDR_VAR 0 5
51020: PUSH
51021: LD_INT 4
51023: PUSH
51024: LD_INT 5
51026: PUSH
51027: LD_INT 9
51029: PUSH
51030: LD_INT 10
51032: PUSH
51033: LD_INT 6
51035: PUSH
51036: LD_INT 7
51038: PUSH
51039: LD_INT 11
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 27
51053: PUSH
51054: LD_INT 28
51056: PUSH
51057: LD_INT 26
51059: PUSH
51060: LD_INT 30
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 43
51071: PUSH
51072: LD_INT 44
51074: PUSH
51075: LD_INT 46
51077: PUSH
51078: LD_INT 45
51080: PUSH
51081: LD_INT 47
51083: PUSH
51084: LD_INT 49
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: PUSH
51100: LD_VAR 0 12
51104: ARRAY
51105: ST_TO_ADDR
// for i in list do
51106: LD_ADDR_VAR 0 8
51110: PUSH
51111: LD_VAR 0 5
51115: PUSH
51116: FOR_IN
51117: IFFALSE 51150
// if not i in fac_list then
51119: LD_VAR 0 8
51123: PUSH
51124: LD_VAR 0 17
51128: IN
51129: NOT
51130: IFFALSE 51148
// list := list diff i ;
51132: LD_ADDR_VAR 0 5
51136: PUSH
51137: LD_VAR 0 5
51141: PUSH
51142: LD_VAR 0 8
51146: DIFF
51147: ST_TO_ADDR
51148: GO 51116
51150: POP
51151: POP
// if not list then
51152: LD_VAR 0 5
51156: NOT
51157: IFFALSE 51161
// exit ;
51159: GO 51965
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51161: LD_VAR 0 12
51165: PUSH
51166: LD_INT 3
51168: EQUAL
51169: PUSH
51170: LD_INT 49
51172: PUSH
51173: LD_VAR 0 5
51177: IN
51178: AND
51179: PUSH
51180: LD_INT 31
51182: PPUSH
51183: LD_VAR 0 16
51187: PPUSH
51188: CALL_OW 321
51192: PUSH
51193: LD_INT 2
51195: EQUAL
51196: AND
51197: IFFALSE 51257
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51199: LD_INT 22
51201: PUSH
51202: LD_VAR 0 16
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 35
51213: PUSH
51214: LD_INT 49
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 91
51223: PUSH
51224: LD_VAR 0 1
51228: PUSH
51229: LD_INT 10
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: PPUSH
51242: CALL_OW 69
51246: NOT
51247: IFFALSE 51257
// weapon := ru_time_lapser ;
51249: LD_ADDR_VAR 0 18
51253: PUSH
51254: LD_INT 49
51256: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51257: LD_VAR 0 12
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: IN
51272: PUSH
51273: LD_INT 11
51275: PUSH
51276: LD_VAR 0 5
51280: IN
51281: PUSH
51282: LD_INT 30
51284: PUSH
51285: LD_VAR 0 5
51289: IN
51290: OR
51291: AND
51292: PUSH
51293: LD_INT 6
51295: PPUSH
51296: LD_VAR 0 16
51300: PPUSH
51301: CALL_OW 321
51305: PUSH
51306: LD_INT 2
51308: EQUAL
51309: AND
51310: IFFALSE 51475
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51312: LD_INT 22
51314: PUSH
51315: LD_VAR 0 16
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 35
51329: PUSH
51330: LD_INT 11
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 35
51339: PUSH
51340: LD_INT 30
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 91
51354: PUSH
51355: LD_VAR 0 1
51359: PUSH
51360: LD_INT 18
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: PPUSH
51373: CALL_OW 69
51377: NOT
51378: PUSH
51379: LD_INT 22
51381: PUSH
51382: LD_VAR 0 16
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: LD_INT 30
51396: PUSH
51397: LD_INT 32
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 30
51406: PUSH
51407: LD_INT 33
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 91
51421: PUSH
51422: LD_VAR 0 1
51426: PUSH
51427: LD_INT 12
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: PUSH
51440: EMPTY
51441: LIST
51442: PPUSH
51443: CALL_OW 69
51447: PUSH
51448: LD_INT 2
51450: GREATER
51451: AND
51452: IFFALSE 51475
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51454: LD_ADDR_VAR 0 18
51458: PUSH
51459: LD_INT 11
51461: PUSH
51462: LD_INT 30
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_VAR 0 12
51473: ARRAY
51474: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51475: LD_VAR 0 18
51479: NOT
51480: PUSH
51481: LD_INT 40
51483: PPUSH
51484: LD_VAR 0 16
51488: PPUSH
51489: CALL_OW 321
51493: PUSH
51494: LD_INT 2
51496: EQUAL
51497: AND
51498: PUSH
51499: LD_INT 7
51501: PUSH
51502: LD_VAR 0 5
51506: IN
51507: PUSH
51508: LD_INT 28
51510: PUSH
51511: LD_VAR 0 5
51515: IN
51516: OR
51517: PUSH
51518: LD_INT 45
51520: PUSH
51521: LD_VAR 0 5
51525: IN
51526: OR
51527: AND
51528: IFFALSE 51782
// begin hex := GetHexInfo ( x , y ) ;
51530: LD_ADDR_VAR 0 4
51534: PUSH
51535: LD_VAR 0 10
51539: PPUSH
51540: LD_VAR 0 11
51544: PPUSH
51545: CALL_OW 546
51549: ST_TO_ADDR
// if hex [ 1 ] then
51550: LD_VAR 0 4
51554: PUSH
51555: LD_INT 1
51557: ARRAY
51558: IFFALSE 51562
// exit ;
51560: GO 51965
// height := hex [ 2 ] ;
51562: LD_ADDR_VAR 0 15
51566: PUSH
51567: LD_VAR 0 4
51571: PUSH
51572: LD_INT 2
51574: ARRAY
51575: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51576: LD_ADDR_VAR 0 14
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: LD_INT 5
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: ST_TO_ADDR
// for i in tmp do
51599: LD_ADDR_VAR 0 8
51603: PUSH
51604: LD_VAR 0 14
51608: PUSH
51609: FOR_IN
51610: IFFALSE 51780
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51612: LD_ADDR_VAR 0 9
51616: PUSH
51617: LD_VAR 0 10
51621: PPUSH
51622: LD_VAR 0 8
51626: PPUSH
51627: LD_INT 5
51629: PPUSH
51630: CALL_OW 272
51634: PUSH
51635: LD_VAR 0 11
51639: PPUSH
51640: LD_VAR 0 8
51644: PPUSH
51645: LD_INT 5
51647: PPUSH
51648: CALL_OW 273
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51657: LD_VAR 0 9
51661: PUSH
51662: LD_INT 1
51664: ARRAY
51665: PPUSH
51666: LD_VAR 0 9
51670: PUSH
51671: LD_INT 2
51673: ARRAY
51674: PPUSH
51675: CALL_OW 488
51679: IFFALSE 51778
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51681: LD_ADDR_VAR 0 4
51685: PUSH
51686: LD_VAR 0 9
51690: PUSH
51691: LD_INT 1
51693: ARRAY
51694: PPUSH
51695: LD_VAR 0 9
51699: PUSH
51700: LD_INT 2
51702: ARRAY
51703: PPUSH
51704: CALL_OW 546
51708: ST_TO_ADDR
// if hex [ 1 ] then
51709: LD_VAR 0 4
51713: PUSH
51714: LD_INT 1
51716: ARRAY
51717: IFFALSE 51721
// continue ;
51719: GO 51609
// h := hex [ 2 ] ;
51721: LD_ADDR_VAR 0 13
51725: PUSH
51726: LD_VAR 0 4
51730: PUSH
51731: LD_INT 2
51733: ARRAY
51734: ST_TO_ADDR
// if h + 7 < height then
51735: LD_VAR 0 13
51739: PUSH
51740: LD_INT 7
51742: PLUS
51743: PUSH
51744: LD_VAR 0 15
51748: LESS
51749: IFFALSE 51778
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51751: LD_ADDR_VAR 0 18
51755: PUSH
51756: LD_INT 7
51758: PUSH
51759: LD_INT 28
51761: PUSH
51762: LD_INT 45
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: PUSH
51770: LD_VAR 0 12
51774: ARRAY
51775: ST_TO_ADDR
// break ;
51776: GO 51780
// end ; end ; end ;
51778: GO 51609
51780: POP
51781: POP
// end ; if not weapon then
51782: LD_VAR 0 18
51786: NOT
51787: IFFALSE 51847
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51789: LD_ADDR_VAR 0 5
51793: PUSH
51794: LD_VAR 0 5
51798: PUSH
51799: LD_INT 11
51801: PUSH
51802: LD_INT 30
51804: PUSH
51805: LD_INT 49
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: LIST
51812: DIFF
51813: ST_TO_ADDR
// if not list then
51814: LD_VAR 0 5
51818: NOT
51819: IFFALSE 51823
// exit ;
51821: GO 51965
// weapon := list [ rand ( 1 , list ) ] ;
51823: LD_ADDR_VAR 0 18
51827: PUSH
51828: LD_VAR 0 5
51832: PUSH
51833: LD_INT 1
51835: PPUSH
51836: LD_VAR 0 5
51840: PPUSH
51841: CALL_OW 12
51845: ARRAY
51846: ST_TO_ADDR
// end ; if weapon then
51847: LD_VAR 0 18
51851: IFFALSE 51965
// begin tmp := CostOfWeapon ( weapon ) ;
51853: LD_ADDR_VAR 0 14
51857: PUSH
51858: LD_VAR 0 18
51862: PPUSH
51863: CALL_OW 451
51867: ST_TO_ADDR
// j := GetBase ( tower ) ;
51868: LD_ADDR_VAR 0 9
51872: PUSH
51873: LD_VAR 0 1
51877: PPUSH
51878: CALL_OW 274
51882: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51883: LD_VAR 0 9
51887: PPUSH
51888: LD_INT 1
51890: PPUSH
51891: CALL_OW 275
51895: PUSH
51896: LD_VAR 0 14
51900: PUSH
51901: LD_INT 1
51903: ARRAY
51904: GREATEREQUAL
51905: PUSH
51906: LD_VAR 0 9
51910: PPUSH
51911: LD_INT 2
51913: PPUSH
51914: CALL_OW 275
51918: PUSH
51919: LD_VAR 0 14
51923: PUSH
51924: LD_INT 2
51926: ARRAY
51927: GREATEREQUAL
51928: AND
51929: PUSH
51930: LD_VAR 0 9
51934: PPUSH
51935: LD_INT 3
51937: PPUSH
51938: CALL_OW 275
51942: PUSH
51943: LD_VAR 0 14
51947: PUSH
51948: LD_INT 3
51950: ARRAY
51951: GREATEREQUAL
51952: AND
51953: IFFALSE 51965
// result := weapon ;
51955: LD_ADDR_VAR 0 3
51959: PUSH
51960: LD_VAR 0 18
51964: ST_TO_ADDR
// end ; end ;
51965: LD_VAR 0 3
51969: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51970: LD_INT 0
51972: PPUSH
51973: PPUSH
// result := true ;
51974: LD_ADDR_VAR 0 3
51978: PUSH
51979: LD_INT 1
51981: ST_TO_ADDR
// if array1 = array2 then
51982: LD_VAR 0 1
51986: PUSH
51987: LD_VAR 0 2
51991: EQUAL
51992: IFFALSE 52052
// begin for i = 1 to array1 do
51994: LD_ADDR_VAR 0 4
51998: PUSH
51999: DOUBLE
52000: LD_INT 1
52002: DEC
52003: ST_TO_ADDR
52004: LD_VAR 0 1
52008: PUSH
52009: FOR_TO
52010: IFFALSE 52048
// if array1 [ i ] <> array2 [ i ] then
52012: LD_VAR 0 1
52016: PUSH
52017: LD_VAR 0 4
52021: ARRAY
52022: PUSH
52023: LD_VAR 0 2
52027: PUSH
52028: LD_VAR 0 4
52032: ARRAY
52033: NONEQUAL
52034: IFFALSE 52046
// begin result := false ;
52036: LD_ADDR_VAR 0 3
52040: PUSH
52041: LD_INT 0
52043: ST_TO_ADDR
// break ;
52044: GO 52048
// end ;
52046: GO 52009
52048: POP
52049: POP
// end else
52050: GO 52060
// result := false ;
52052: LD_ADDR_VAR 0 3
52056: PUSH
52057: LD_INT 0
52059: ST_TO_ADDR
// end ;
52060: LD_VAR 0 3
52064: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52065: LD_INT 0
52067: PPUSH
52068: PPUSH
52069: PPUSH
// pom := GetBase ( fac ) ;
52070: LD_ADDR_VAR 0 5
52074: PUSH
52075: LD_VAR 0 1
52079: PPUSH
52080: CALL_OW 274
52084: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52085: LD_ADDR_VAR 0 4
52089: PUSH
52090: LD_VAR 0 2
52094: PUSH
52095: LD_INT 1
52097: ARRAY
52098: PPUSH
52099: LD_VAR 0 2
52103: PUSH
52104: LD_INT 2
52106: ARRAY
52107: PPUSH
52108: LD_VAR 0 2
52112: PUSH
52113: LD_INT 3
52115: ARRAY
52116: PPUSH
52117: LD_VAR 0 2
52121: PUSH
52122: LD_INT 4
52124: ARRAY
52125: PPUSH
52126: CALL_OW 449
52130: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52131: LD_ADDR_VAR 0 3
52135: PUSH
52136: LD_VAR 0 5
52140: PPUSH
52141: LD_INT 1
52143: PPUSH
52144: CALL_OW 275
52148: PUSH
52149: LD_VAR 0 4
52153: PUSH
52154: LD_INT 1
52156: ARRAY
52157: GREATEREQUAL
52158: PUSH
52159: LD_VAR 0 5
52163: PPUSH
52164: LD_INT 2
52166: PPUSH
52167: CALL_OW 275
52171: PUSH
52172: LD_VAR 0 4
52176: PUSH
52177: LD_INT 2
52179: ARRAY
52180: GREATEREQUAL
52181: AND
52182: PUSH
52183: LD_VAR 0 5
52187: PPUSH
52188: LD_INT 3
52190: PPUSH
52191: CALL_OW 275
52195: PUSH
52196: LD_VAR 0 4
52200: PUSH
52201: LD_INT 3
52203: ARRAY
52204: GREATEREQUAL
52205: AND
52206: ST_TO_ADDR
// end ;
52207: LD_VAR 0 3
52211: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52212: LD_INT 0
52214: PPUSH
52215: PPUSH
52216: PPUSH
52217: PPUSH
// pom := GetBase ( building ) ;
52218: LD_ADDR_VAR 0 3
52222: PUSH
52223: LD_VAR 0 1
52227: PPUSH
52228: CALL_OW 274
52232: ST_TO_ADDR
// if not pom then
52233: LD_VAR 0 3
52237: NOT
52238: IFFALSE 52242
// exit ;
52240: GO 52412
// btype := GetBType ( building ) ;
52242: LD_ADDR_VAR 0 5
52246: PUSH
52247: LD_VAR 0 1
52251: PPUSH
52252: CALL_OW 266
52256: ST_TO_ADDR
// if btype = b_armoury then
52257: LD_VAR 0 5
52261: PUSH
52262: LD_INT 4
52264: EQUAL
52265: IFFALSE 52275
// btype := b_barracks ;
52267: LD_ADDR_VAR 0 5
52271: PUSH
52272: LD_INT 5
52274: ST_TO_ADDR
// if btype = b_depot then
52275: LD_VAR 0 5
52279: PUSH
52280: LD_INT 0
52282: EQUAL
52283: IFFALSE 52293
// btype := b_warehouse ;
52285: LD_ADDR_VAR 0 5
52289: PUSH
52290: LD_INT 1
52292: ST_TO_ADDR
// if btype = b_workshop then
52293: LD_VAR 0 5
52297: PUSH
52298: LD_INT 2
52300: EQUAL
52301: IFFALSE 52311
// btype := b_factory ;
52303: LD_ADDR_VAR 0 5
52307: PUSH
52308: LD_INT 3
52310: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52311: LD_ADDR_VAR 0 4
52315: PUSH
52316: LD_VAR 0 5
52320: PPUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: CALL_OW 248
52330: PPUSH
52331: CALL_OW 450
52335: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52336: LD_ADDR_VAR 0 2
52340: PUSH
52341: LD_VAR 0 3
52345: PPUSH
52346: LD_INT 1
52348: PPUSH
52349: CALL_OW 275
52353: PUSH
52354: LD_VAR 0 4
52358: PUSH
52359: LD_INT 1
52361: ARRAY
52362: GREATEREQUAL
52363: PUSH
52364: LD_VAR 0 3
52368: PPUSH
52369: LD_INT 2
52371: PPUSH
52372: CALL_OW 275
52376: PUSH
52377: LD_VAR 0 4
52381: PUSH
52382: LD_INT 2
52384: ARRAY
52385: GREATEREQUAL
52386: AND
52387: PUSH
52388: LD_VAR 0 3
52392: PPUSH
52393: LD_INT 3
52395: PPUSH
52396: CALL_OW 275
52400: PUSH
52401: LD_VAR 0 4
52405: PUSH
52406: LD_INT 3
52408: ARRAY
52409: GREATEREQUAL
52410: AND
52411: ST_TO_ADDR
// end ;
52412: LD_VAR 0 2
52416: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52417: LD_INT 0
52419: PPUSH
52420: PPUSH
52421: PPUSH
// pom := GetBase ( building ) ;
52422: LD_ADDR_VAR 0 4
52426: PUSH
52427: LD_VAR 0 1
52431: PPUSH
52432: CALL_OW 274
52436: ST_TO_ADDR
// if not pom then
52437: LD_VAR 0 4
52441: NOT
52442: IFFALSE 52446
// exit ;
52444: GO 52547
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52446: LD_ADDR_VAR 0 5
52450: PUSH
52451: LD_VAR 0 2
52455: PPUSH
52456: LD_VAR 0 1
52460: PPUSH
52461: CALL_OW 248
52465: PPUSH
52466: CALL_OW 450
52470: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52471: LD_ADDR_VAR 0 3
52475: PUSH
52476: LD_VAR 0 4
52480: PPUSH
52481: LD_INT 1
52483: PPUSH
52484: CALL_OW 275
52488: PUSH
52489: LD_VAR 0 5
52493: PUSH
52494: LD_INT 1
52496: ARRAY
52497: GREATEREQUAL
52498: PUSH
52499: LD_VAR 0 4
52503: PPUSH
52504: LD_INT 2
52506: PPUSH
52507: CALL_OW 275
52511: PUSH
52512: LD_VAR 0 5
52516: PUSH
52517: LD_INT 2
52519: ARRAY
52520: GREATEREQUAL
52521: AND
52522: PUSH
52523: LD_VAR 0 4
52527: PPUSH
52528: LD_INT 3
52530: PPUSH
52531: CALL_OW 275
52535: PUSH
52536: LD_VAR 0 5
52540: PUSH
52541: LD_INT 3
52543: ARRAY
52544: GREATEREQUAL
52545: AND
52546: ST_TO_ADDR
// end ;
52547: LD_VAR 0 3
52551: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
52552: LD_INT 0
52554: PPUSH
52555: PPUSH
52556: PPUSH
52557: PPUSH
52558: PPUSH
52559: PPUSH
52560: PPUSH
52561: PPUSH
52562: PPUSH
52563: PPUSH
// result := false ;
52564: LD_ADDR_VAR 0 6
52568: PUSH
52569: LD_INT 0
52571: ST_TO_ADDR
// if not base or not btype or not x or not y then
52572: LD_VAR 0 1
52576: NOT
52577: PUSH
52578: LD_VAR 0 2
52582: NOT
52583: OR
52584: PUSH
52585: LD_VAR 0 3
52589: NOT
52590: OR
52591: PUSH
52592: LD_VAR 0 4
52596: NOT
52597: OR
52598: IFFALSE 52602
// exit ;
52600: GO 53211
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
52602: LD_ADDR_VAR 0 12
52606: PUSH
52607: LD_VAR 0 2
52611: PPUSH
52612: LD_VAR 0 3
52616: PPUSH
52617: LD_VAR 0 4
52621: PPUSH
52622: LD_VAR 0 5
52626: PPUSH
52627: LD_VAR 0 1
52631: PUSH
52632: LD_INT 1
52634: ARRAY
52635: PPUSH
52636: CALL_OW 248
52640: PPUSH
52641: LD_INT 0
52643: PPUSH
52644: CALL 54048 0 6
52648: ST_TO_ADDR
// if not hexes then
52649: LD_VAR 0 12
52653: NOT
52654: IFFALSE 52658
// exit ;
52656: GO 53211
// for i = 1 to hexes do
52658: LD_ADDR_VAR 0 7
52662: PUSH
52663: DOUBLE
52664: LD_INT 1
52666: DEC
52667: ST_TO_ADDR
52668: LD_VAR 0 12
52672: PUSH
52673: FOR_TO
52674: IFFALSE 53209
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52676: LD_ADDR_VAR 0 11
52680: PUSH
52681: LD_VAR 0 12
52685: PUSH
52686: LD_VAR 0 7
52690: ARRAY
52691: PUSH
52692: LD_INT 1
52694: ARRAY
52695: PPUSH
52696: LD_VAR 0 12
52700: PUSH
52701: LD_VAR 0 7
52705: ARRAY
52706: PUSH
52707: LD_INT 2
52709: ARRAY
52710: PPUSH
52711: CALL_OW 428
52715: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52716: LD_VAR 0 12
52720: PUSH
52721: LD_VAR 0 7
52725: ARRAY
52726: PUSH
52727: LD_INT 1
52729: ARRAY
52730: PPUSH
52731: LD_VAR 0 12
52735: PUSH
52736: LD_VAR 0 7
52740: ARRAY
52741: PUSH
52742: LD_INT 2
52744: ARRAY
52745: PPUSH
52746: CALL_OW 351
52750: PUSH
52751: LD_VAR 0 12
52755: PUSH
52756: LD_VAR 0 7
52760: ARRAY
52761: PUSH
52762: LD_INT 1
52764: ARRAY
52765: PPUSH
52766: LD_VAR 0 12
52770: PUSH
52771: LD_VAR 0 7
52775: ARRAY
52776: PUSH
52777: LD_INT 2
52779: ARRAY
52780: PPUSH
52781: CALL_OW 488
52785: NOT
52786: OR
52787: PUSH
52788: LD_VAR 0 11
52792: PPUSH
52793: CALL_OW 247
52797: PUSH
52798: LD_INT 3
52800: EQUAL
52801: OR
52802: IFFALSE 52808
// exit ;
52804: POP
52805: POP
52806: GO 53211
// if not tmp or not tmp in base then
52808: LD_VAR 0 11
52812: NOT
52813: PUSH
52814: LD_VAR 0 11
52818: PUSH
52819: LD_VAR 0 1
52823: IN
52824: NOT
52825: OR
52826: IFFALSE 52830
// continue ;
52828: GO 52673
// result := true ;
52830: LD_ADDR_VAR 0 6
52834: PUSH
52835: LD_INT 1
52837: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52838: LD_ADDR_VAR 0 15
52842: PUSH
52843: LD_VAR 0 1
52847: PPUSH
52848: LD_INT 22
52850: PUSH
52851: LD_VAR 0 11
52855: PPUSH
52856: CALL_OW 255
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: LD_INT 30
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 30
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PPUSH
52897: CALL_OW 72
52901: ST_TO_ADDR
// if dep then
52902: LD_VAR 0 15
52906: IFFALSE 53042
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52908: LD_ADDR_VAR 0 14
52912: PUSH
52913: LD_VAR 0 15
52917: PUSH
52918: LD_INT 1
52920: ARRAY
52921: PPUSH
52922: CALL_OW 250
52926: PPUSH
52927: LD_VAR 0 15
52931: PUSH
52932: LD_INT 1
52934: ARRAY
52935: PPUSH
52936: CALL_OW 254
52940: PPUSH
52941: LD_INT 5
52943: PPUSH
52944: CALL_OW 272
52948: PUSH
52949: LD_VAR 0 15
52953: PUSH
52954: LD_INT 1
52956: ARRAY
52957: PPUSH
52958: CALL_OW 251
52962: PPUSH
52963: LD_VAR 0 15
52967: PUSH
52968: LD_INT 1
52970: ARRAY
52971: PPUSH
52972: CALL_OW 254
52976: PPUSH
52977: LD_INT 5
52979: PPUSH
52980: CALL_OW 273
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52989: LD_VAR 0 14
52993: PUSH
52994: LD_INT 1
52996: ARRAY
52997: PPUSH
52998: LD_VAR 0 14
53002: PUSH
53003: LD_INT 2
53005: ARRAY
53006: PPUSH
53007: CALL_OW 488
53011: IFFALSE 53042
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53013: LD_VAR 0 11
53017: PPUSH
53018: LD_VAR 0 14
53022: PUSH
53023: LD_INT 1
53025: ARRAY
53026: PPUSH
53027: LD_VAR 0 14
53031: PUSH
53032: LD_INT 2
53034: ARRAY
53035: PPUSH
53036: CALL_OW 111
// continue ;
53040: GO 52673
// end ; end ; r := GetDir ( tmp ) ;
53042: LD_ADDR_VAR 0 13
53046: PUSH
53047: LD_VAR 0 11
53051: PPUSH
53052: CALL_OW 254
53056: ST_TO_ADDR
// if r = 5 then
53057: LD_VAR 0 13
53061: PUSH
53062: LD_INT 5
53064: EQUAL
53065: IFFALSE 53075
// r := 0 ;
53067: LD_ADDR_VAR 0 13
53071: PUSH
53072: LD_INT 0
53074: ST_TO_ADDR
// for j = r to 5 do
53075: LD_ADDR_VAR 0 8
53079: PUSH
53080: DOUBLE
53081: LD_VAR 0 13
53085: DEC
53086: ST_TO_ADDR
53087: LD_INT 5
53089: PUSH
53090: FOR_TO
53091: IFFALSE 53205
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53093: LD_ADDR_VAR 0 9
53097: PUSH
53098: LD_VAR 0 11
53102: PPUSH
53103: CALL_OW 250
53107: PPUSH
53108: LD_VAR 0 8
53112: PPUSH
53113: LD_INT 2
53115: PPUSH
53116: CALL_OW 272
53120: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53121: LD_ADDR_VAR 0 10
53125: PUSH
53126: LD_VAR 0 11
53130: PPUSH
53131: CALL_OW 251
53135: PPUSH
53136: LD_VAR 0 8
53140: PPUSH
53141: LD_INT 2
53143: PPUSH
53144: CALL_OW 273
53148: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53149: LD_VAR 0 9
53153: PPUSH
53154: LD_VAR 0 10
53158: PPUSH
53159: CALL_OW 488
53163: PUSH
53164: LD_VAR 0 9
53168: PPUSH
53169: LD_VAR 0 10
53173: PPUSH
53174: CALL_OW 428
53178: NOT
53179: AND
53180: IFFALSE 53203
// begin ComMoveXY ( tmp , _x , _y ) ;
53182: LD_VAR 0 11
53186: PPUSH
53187: LD_VAR 0 9
53191: PPUSH
53192: LD_VAR 0 10
53196: PPUSH
53197: CALL_OW 111
// break ;
53201: GO 53205
// end ; end ;
53203: GO 53090
53205: POP
53206: POP
// end ;
53207: GO 52673
53209: POP
53210: POP
// end ;
53211: LD_VAR 0 6
53215: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
53216: LD_INT 0
53218: PPUSH
53219: PPUSH
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
// result := false ;
53228: LD_ADDR_VAR 0 6
53232: PUSH
53233: LD_INT 0
53235: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53236: LD_VAR 0 1
53240: NOT
53241: PUSH
53242: LD_VAR 0 1
53246: PPUSH
53247: CALL_OW 266
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: IN
53262: NOT
53263: OR
53264: PUSH
53265: LD_VAR 0 2
53269: NOT
53270: OR
53271: PUSH
53272: LD_VAR 0 5
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 4
53291: PUSH
53292: LD_INT 5
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: IN
53303: NOT
53304: OR
53305: PUSH
53306: LD_VAR 0 3
53310: PPUSH
53311: LD_VAR 0 4
53315: PPUSH
53316: CALL_OW 488
53320: NOT
53321: OR
53322: IFFALSE 53326
// exit ;
53324: GO 54043
// pom := GetBase ( depot ) ;
53326: LD_ADDR_VAR 0 10
53330: PUSH
53331: LD_VAR 0 1
53335: PPUSH
53336: CALL_OW 274
53340: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53341: LD_ADDR_VAR 0 11
53345: PUSH
53346: LD_VAR 0 2
53350: PPUSH
53351: LD_VAR 0 1
53355: PPUSH
53356: CALL_OW 248
53360: PPUSH
53361: CALL_OW 450
53365: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53366: LD_VAR 0 10
53370: PPUSH
53371: LD_INT 1
53373: PPUSH
53374: CALL_OW 275
53378: PUSH
53379: LD_VAR 0 11
53383: PUSH
53384: LD_INT 1
53386: ARRAY
53387: GREATEREQUAL
53388: PUSH
53389: LD_VAR 0 10
53393: PPUSH
53394: LD_INT 2
53396: PPUSH
53397: CALL_OW 275
53401: PUSH
53402: LD_VAR 0 11
53406: PUSH
53407: LD_INT 2
53409: ARRAY
53410: GREATEREQUAL
53411: AND
53412: PUSH
53413: LD_VAR 0 10
53417: PPUSH
53418: LD_INT 3
53420: PPUSH
53421: CALL_OW 275
53425: PUSH
53426: LD_VAR 0 11
53430: PUSH
53431: LD_INT 3
53433: ARRAY
53434: GREATEREQUAL
53435: AND
53436: NOT
53437: IFFALSE 53441
// exit ;
53439: GO 54043
// if GetBType ( depot ) = b_depot then
53441: LD_VAR 0 1
53445: PPUSH
53446: CALL_OW 266
53450: PUSH
53451: LD_INT 0
53453: EQUAL
53454: IFFALSE 53466
// dist := 28 else
53456: LD_ADDR_VAR 0 14
53460: PUSH
53461: LD_INT 28
53463: ST_TO_ADDR
53464: GO 53474
// dist := 36 ;
53466: LD_ADDR_VAR 0 14
53470: PUSH
53471: LD_INT 36
53473: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53474: LD_VAR 0 1
53478: PPUSH
53479: LD_VAR 0 3
53483: PPUSH
53484: LD_VAR 0 4
53488: PPUSH
53489: CALL_OW 297
53493: PUSH
53494: LD_VAR 0 14
53498: GREATER
53499: IFFALSE 53503
// exit ;
53501: GO 54043
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53503: LD_ADDR_VAR 0 12
53507: PUSH
53508: LD_VAR 0 2
53512: PPUSH
53513: LD_VAR 0 3
53517: PPUSH
53518: LD_VAR 0 4
53522: PPUSH
53523: LD_VAR 0 5
53527: PPUSH
53528: LD_VAR 0 1
53532: PPUSH
53533: CALL_OW 248
53537: PPUSH
53538: LD_INT 0
53540: PPUSH
53541: CALL 54048 0 6
53545: ST_TO_ADDR
// if not hexes then
53546: LD_VAR 0 12
53550: NOT
53551: IFFALSE 53555
// exit ;
53553: GO 54043
// hex := GetHexInfo ( x , y ) ;
53555: LD_ADDR_VAR 0 15
53559: PUSH
53560: LD_VAR 0 3
53564: PPUSH
53565: LD_VAR 0 4
53569: PPUSH
53570: CALL_OW 546
53574: ST_TO_ADDR
// if hex [ 1 ] then
53575: LD_VAR 0 15
53579: PUSH
53580: LD_INT 1
53582: ARRAY
53583: IFFALSE 53587
// exit ;
53585: GO 54043
// height := hex [ 2 ] ;
53587: LD_ADDR_VAR 0 13
53591: PUSH
53592: LD_VAR 0 15
53596: PUSH
53597: LD_INT 2
53599: ARRAY
53600: ST_TO_ADDR
// for i = 1 to hexes do
53601: LD_ADDR_VAR 0 7
53605: PUSH
53606: DOUBLE
53607: LD_INT 1
53609: DEC
53610: ST_TO_ADDR
53611: LD_VAR 0 12
53615: PUSH
53616: FOR_TO
53617: IFFALSE 53947
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53619: LD_VAR 0 12
53623: PUSH
53624: LD_VAR 0 7
53628: ARRAY
53629: PUSH
53630: LD_INT 1
53632: ARRAY
53633: PPUSH
53634: LD_VAR 0 12
53638: PUSH
53639: LD_VAR 0 7
53643: ARRAY
53644: PUSH
53645: LD_INT 2
53647: ARRAY
53648: PPUSH
53649: CALL_OW 488
53653: NOT
53654: PUSH
53655: LD_VAR 0 12
53659: PUSH
53660: LD_VAR 0 7
53664: ARRAY
53665: PUSH
53666: LD_INT 1
53668: ARRAY
53669: PPUSH
53670: LD_VAR 0 12
53674: PUSH
53675: LD_VAR 0 7
53679: ARRAY
53680: PUSH
53681: LD_INT 2
53683: ARRAY
53684: PPUSH
53685: CALL_OW 428
53689: PUSH
53690: LD_INT 0
53692: GREATER
53693: OR
53694: PUSH
53695: LD_VAR 0 12
53699: PUSH
53700: LD_VAR 0 7
53704: ARRAY
53705: PUSH
53706: LD_INT 1
53708: ARRAY
53709: PPUSH
53710: LD_VAR 0 12
53714: PUSH
53715: LD_VAR 0 7
53719: ARRAY
53720: PUSH
53721: LD_INT 2
53723: ARRAY
53724: PPUSH
53725: CALL_OW 351
53729: OR
53730: IFFALSE 53736
// exit ;
53732: POP
53733: POP
53734: GO 54043
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53736: LD_ADDR_VAR 0 8
53740: PUSH
53741: LD_VAR 0 12
53745: PUSH
53746: LD_VAR 0 7
53750: ARRAY
53751: PUSH
53752: LD_INT 1
53754: ARRAY
53755: PPUSH
53756: LD_VAR 0 12
53760: PUSH
53761: LD_VAR 0 7
53765: ARRAY
53766: PUSH
53767: LD_INT 2
53769: ARRAY
53770: PPUSH
53771: CALL_OW 546
53775: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53776: LD_VAR 0 8
53780: PUSH
53781: LD_INT 1
53783: ARRAY
53784: PUSH
53785: LD_VAR 0 8
53789: PUSH
53790: LD_INT 2
53792: ARRAY
53793: PUSH
53794: LD_VAR 0 13
53798: PUSH
53799: LD_INT 2
53801: PLUS
53802: GREATER
53803: OR
53804: PUSH
53805: LD_VAR 0 8
53809: PUSH
53810: LD_INT 2
53812: ARRAY
53813: PUSH
53814: LD_VAR 0 13
53818: PUSH
53819: LD_INT 2
53821: MINUS
53822: LESS
53823: OR
53824: PUSH
53825: LD_VAR 0 8
53829: PUSH
53830: LD_INT 3
53832: ARRAY
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 8
53839: PUSH
53840: LD_INT 9
53842: PUSH
53843: LD_INT 10
53845: PUSH
53846: LD_INT 11
53848: PUSH
53849: LD_INT 12
53851: PUSH
53852: LD_INT 13
53854: PUSH
53855: LD_INT 16
53857: PUSH
53858: LD_INT 17
53860: PUSH
53861: LD_INT 18
53863: PUSH
53864: LD_INT 19
53866: PUSH
53867: LD_INT 20
53869: PUSH
53870: LD_INT 21
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: IN
53888: NOT
53889: OR
53890: PUSH
53891: LD_VAR 0 8
53895: PUSH
53896: LD_INT 5
53898: ARRAY
53899: NOT
53900: OR
53901: PUSH
53902: LD_VAR 0 8
53906: PUSH
53907: LD_INT 6
53909: ARRAY
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 7
53919: PUSH
53920: LD_INT 9
53922: PUSH
53923: LD_INT 10
53925: PUSH
53926: LD_INT 11
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: IN
53937: NOT
53938: OR
53939: IFFALSE 53945
// exit ;
53941: POP
53942: POP
53943: GO 54043
// end ;
53945: GO 53616
53947: POP
53948: POP
// side := GetSide ( depot ) ;
53949: LD_ADDR_VAR 0 9
53953: PUSH
53954: LD_VAR 0 1
53958: PPUSH
53959: CALL_OW 255
53963: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53964: LD_VAR 0 9
53968: PPUSH
53969: LD_VAR 0 3
53973: PPUSH
53974: LD_VAR 0 4
53978: PPUSH
53979: LD_INT 20
53981: PPUSH
53982: CALL 46697 0 4
53986: PUSH
53987: LD_INT 4
53989: ARRAY
53990: IFFALSE 53994
// exit ;
53992: GO 54043
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53994: LD_VAR 0 2
53998: PUSH
53999: LD_INT 29
54001: PUSH
54002: LD_INT 30
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: IN
54009: PUSH
54010: LD_VAR 0 3
54014: PPUSH
54015: LD_VAR 0 4
54019: PPUSH
54020: LD_VAR 0 9
54024: PPUSH
54025: CALL_OW 440
54029: NOT
54030: AND
54031: IFFALSE 54035
// exit ;
54033: GO 54043
// result := true ;
54035: LD_ADDR_VAR 0 6
54039: PUSH
54040: LD_INT 1
54042: ST_TO_ADDR
// end ;
54043: LD_VAR 0 6
54047: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54048: LD_INT 0
54050: PPUSH
54051: PPUSH
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
54056: PPUSH
54057: PPUSH
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
54064: PPUSH
54065: PPUSH
54066: PPUSH
54067: PPUSH
54068: PPUSH
54069: PPUSH
54070: PPUSH
54071: PPUSH
54072: PPUSH
54073: PPUSH
54074: PPUSH
54075: PPUSH
54076: PPUSH
54077: PPUSH
54078: PPUSH
54079: PPUSH
54080: PPUSH
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
54085: PPUSH
54086: PPUSH
54087: PPUSH
54088: PPUSH
54089: PPUSH
54090: PPUSH
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
54100: PPUSH
54101: PPUSH
54102: PPUSH
54103: PPUSH
54104: PPUSH
54105: PPUSH
54106: PPUSH
54107: PPUSH
// result = [ ] ;
54108: LD_ADDR_VAR 0 7
54112: PUSH
54113: EMPTY
54114: ST_TO_ADDR
// temp_list = [ ] ;
54115: LD_ADDR_VAR 0 9
54119: PUSH
54120: EMPTY
54121: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54122: LD_VAR 0 4
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: LD_INT 4
54141: PUSH
54142: LD_INT 5
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: IN
54153: NOT
54154: PUSH
54155: LD_VAR 0 1
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: IN
54170: PUSH
54171: LD_VAR 0 5
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: IN
54190: NOT
54191: AND
54192: OR
54193: IFFALSE 54197
// exit ;
54195: GO 72588
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54197: LD_VAR 0 1
54201: PUSH
54202: LD_INT 6
54204: PUSH
54205: LD_INT 7
54207: PUSH
54208: LD_INT 8
54210: PUSH
54211: LD_INT 13
54213: PUSH
54214: LD_INT 12
54216: PUSH
54217: LD_INT 15
54219: PUSH
54220: LD_INT 11
54222: PUSH
54223: LD_INT 14
54225: PUSH
54226: LD_INT 10
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: IN
54240: IFFALSE 54250
// btype = b_lab ;
54242: LD_ADDR_VAR 0 1
54246: PUSH
54247: LD_INT 6
54249: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54250: LD_VAR 0 6
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: LIST
54268: IN
54269: NOT
54270: PUSH
54271: LD_VAR 0 1
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: LD_INT 6
54290: PUSH
54291: LD_INT 36
54293: PUSH
54294: LD_INT 4
54296: PUSH
54297: LD_INT 5
54299: PUSH
54300: LD_INT 31
54302: PUSH
54303: LD_INT 32
54305: PUSH
54306: LD_INT 33
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: IN
54322: NOT
54323: PUSH
54324: LD_VAR 0 6
54328: PUSH
54329: LD_INT 1
54331: EQUAL
54332: AND
54333: OR
54334: PUSH
54335: LD_VAR 0 1
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: IN
54350: NOT
54351: PUSH
54352: LD_VAR 0 6
54356: PUSH
54357: LD_INT 2
54359: EQUAL
54360: AND
54361: OR
54362: IFFALSE 54372
// mode = 0 ;
54364: LD_ADDR_VAR 0 6
54368: PUSH
54369: LD_INT 0
54371: ST_TO_ADDR
// case mode of 0 :
54372: LD_VAR 0 6
54376: PUSH
54377: LD_INT 0
54379: DOUBLE
54380: EQUAL
54381: IFTRUE 54385
54383: GO 65838
54385: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54386: LD_ADDR_VAR 0 11
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 3
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54579: LD_ADDR_VAR 0 12
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 3
54736: NEG
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54775: LD_ADDR_VAR 0 13
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 3
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54974: LD_ADDR_VAR 0 14
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55170: LD_ADDR_VAR 0 15
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 3
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55363: LD_ADDR_VAR 0 16
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: LD_INT 3
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55556: LD_ADDR_VAR 0 17
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55786: LD_ADDR_VAR 0 18
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56016: LD_ADDR_VAR 0 19
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56246: LD_ADDR_VAR 0 20
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56476: LD_ADDR_VAR 0 21
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56706: LD_ADDR_VAR 0 22
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56936: LD_ADDR_VAR 0 23
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57216: LD_ADDR_VAR 0 24
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57492: LD_ADDR_VAR 0 25
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57766: LD_ADDR_VAR 0 26
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: LD_INT 3
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58042: LD_ADDR_VAR 0 27
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: NEG
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: NEG
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58322: LD_ADDR_VAR 0 28
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58604: LD_ADDR_VAR 0 29
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 3
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 3
58848: NEG
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58883: LD_ADDR_VAR 0 30
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 3
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59161: LD_ADDR_VAR 0 31
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 3
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 3
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 3
59404: NEG
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59439: LD_ADDR_VAR 0 32
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 2
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: LD_INT 3
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59717: LD_ADDR_VAR 0 33
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: LD_INT 3
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 3
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59996: LD_ADDR_VAR 0 34
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: LD_INT 2
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: NEG
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 2
60163: NEG
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 3
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60276: LD_ADDR_VAR 0 35
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60388: LD_ADDR_VAR 0 36
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60500: LD_ADDR_VAR 0 37
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: NEG
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60612: LD_ADDR_VAR 0 38
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60724: LD_ADDR_VAR 0 39
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60836: LD_ADDR_VAR 0 40
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60948: LD_ADDR_VAR 0 41
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 2
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 3
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 3
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: NEG
61212: PUSH
61213: LD_INT 1
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: LD_INT 3
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61298: LD_ADDR_VAR 0 42
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: LD_INT 2
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: LD_INT 2
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: LD_INT 3
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 3
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 3
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 3
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: LD_INT 3
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 3
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 3
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 3
61595: NEG
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 3
61607: NEG
61608: PUSH
61609: LD_INT 3
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61648: LD_ADDR_VAR 0 43
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: NEG
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: LD_INT 3
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 2
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 3
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 3
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: LD_INT 3
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 3
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: LD_INT 2
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 3
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 3
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61996: LD_ADDR_VAR 0 44
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: LD_INT 2
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 2
62174: NEG
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: LD_INT 3
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 2
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 3
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 3
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 3
62229: PUSH
62230: LD_INT 2
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: PUSH
62240: LD_INT 3
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: LD_INT 3
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 3
62270: NEG
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 3
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 3
62293: NEG
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: LD_INT 3
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62346: LD_ADDR_VAR 0 45
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: NEG
62525: PUSH
62526: LD_INT 2
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: LD_INT 3
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: LD_INT 3
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 3
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 3
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: LD_INT 3
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: LD_INT 3
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 3
62643: NEG
62644: PUSH
62645: LD_INT 2
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 3
62655: NEG
62656: PUSH
62657: LD_INT 3
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62696: LD_ADDR_VAR 0 46
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: LD_INT 2
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: LD_INT 2
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 2
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 2
62862: NEG
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 2
62873: NEG
62874: PUSH
62875: LD_INT 1
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: LD_INT 3
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 3
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: LD_INT 3
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 2
62981: NEG
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 3
62992: NEG
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 3
63003: NEG
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63044: LD_ADDR_VAR 0 47
63048: PUSH
63049: LD_INT 0
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 2
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: LD_INT 2
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: NEG
63172: PUSH
63173: LD_INT 2
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63195: LD_ADDR_VAR 0 48
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: LD_INT 2
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: LD_INT 2
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 2
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63342: LD_ADDR_VAR 0 49
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63486: LD_ADDR_VAR 0 50
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: LD_INT 2
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: PUSH
63588: LD_INT 2
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63630: LD_ADDR_VAR 0 51
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: NEG
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: LD_INT 2
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63777: LD_ADDR_VAR 0 52
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 2
63881: NEG
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: LD_INT 2
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63928: LD_ADDR_VAR 0 53
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 1
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: LD_INT 2
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: LD_INT 2
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 2
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 2
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 2
64063: PUSH
64064: LD_INT 2
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 1
64073: PUSH
64074: LD_INT 2
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: LD_INT 2
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: NEG
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64158: LD_ADDR_VAR 0 54
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: LD_INT 1
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: LD_INT 2
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_INT 2
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: LD_INT 2
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64388: LD_ADDR_VAR 0 55
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: NEG
64470: PUSH
64471: LD_INT 2
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: LD_INT 2
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: LD_INT 1
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 2
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: PUSH
64524: LD_INT 2
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 2
64564: NEG
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 2
64587: NEG
64588: PUSH
64589: LD_INT 2
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64618: LD_ADDR_VAR 0 56
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 1
64656: PUSH
64657: LD_INT 1
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: LD_INT 2
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: LD_INT 2
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: LD_INT 1
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 2
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 2
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 2
64794: NEG
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: NEG
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: LD_INT 2
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64848: LD_ADDR_VAR 0 57
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 1
64906: NEG
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 2
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 2
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 2
65024: NEG
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 2
65035: NEG
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 2
65047: NEG
65048: PUSH
65049: LD_INT 2
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65078: LD_ADDR_VAR 0 58
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 2
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: LD_INT 2
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 2
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: PUSH
65204: LD_INT 1
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 2
65213: PUSH
65214: LD_INT 2
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: LD_INT 2
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 2
65254: NEG
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: NEG
65266: PUSH
65267: LD_INT 1
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 2
65277: NEG
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65308: LD_ADDR_VAR 0 59
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: LD_INT 1
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65396: LD_ADDR_VAR 0 60
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 1
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: LD_INT 1
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 1
65454: NEG
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: NEG
65466: PUSH
65467: LD_INT 1
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65484: LD_ADDR_VAR 0 61
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: LD_INT 1
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: LD_INT 0
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 1
65553: NEG
65554: PUSH
65555: LD_INT 1
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65572: LD_ADDR_VAR 0 62
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65660: LD_ADDR_VAR 0 63
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 1
65729: NEG
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65748: LD_ADDR_VAR 0 64
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 1
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 1
65817: NEG
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: ST_TO_ADDR
// end ; 1 :
65836: GO 71733
65838: LD_INT 1
65840: DOUBLE
65841: EQUAL
65842: IFTRUE 65846
65844: GO 68469
65846: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65847: LD_ADDR_VAR 0 11
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: LD_INT 3
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 0
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 1
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65891: LD_ADDR_VAR 0 12
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 3
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 3
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: LIST
65931: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65932: LD_ADDR_VAR 0 13
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: LD_INT 2
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 3
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 2
65959: PUSH
65960: LD_INT 3
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65972: LD_ADDR_VAR 0 14
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: LD_INT 3
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 3
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: NEG
66000: PUSH
66001: LD_INT 2
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: LIST
66012: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66013: LD_ADDR_VAR 0 15
66017: PUSH
66018: LD_INT 2
66020: NEG
66021: PUSH
66022: LD_INT 1
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 3
66031: NEG
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 3
66042: NEG
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66057: LD_ADDR_VAR 0 16
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: LD_INT 3
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 3
66076: NEG
66077: PUSH
66078: LD_INT 2
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 3
66088: NEG
66089: PUSH
66090: LD_INT 3
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66103: LD_ADDR_VAR 0 17
66107: PUSH
66108: LD_INT 1
66110: NEG
66111: PUSH
66112: LD_INT 3
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 3
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: LIST
66146: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66147: LD_ADDR_VAR 0 18
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 3
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 3
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66188: LD_ADDR_VAR 0 19
66192: PUSH
66193: LD_INT 3
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 3
66205: PUSH
66206: LD_INT 3
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: LD_INT 3
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66228: LD_ADDR_VAR 0 20
66232: PUSH
66233: LD_INT 1
66235: PUSH
66236: LD_INT 3
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: LD_INT 3
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: NEG
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66269: LD_ADDR_VAR 0 21
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 3
66287: NEG
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66313: LD_ADDR_VAR 0 22
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: LD_INT 3
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 3
66332: NEG
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 3
66344: NEG
66345: PUSH
66346: LD_INT 3
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66359: LD_ADDR_VAR 0 23
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 3
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: LD_INT 4
66381: NEG
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: LD_INT 3
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: LIST
66402: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66403: LD_ADDR_VAR 0 24
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 3
66420: PUSH
66421: LD_INT 1
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 4
66431: PUSH
66432: LD_INT 1
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66444: LD_ADDR_VAR 0 25
66448: PUSH
66449: LD_INT 3
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 4
66461: PUSH
66462: LD_INT 3
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: LD_INT 4
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66484: LD_ADDR_VAR 0 26
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: LD_INT 4
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 1
66511: NEG
66512: PUSH
66513: LD_INT 3
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66525: LD_ADDR_VAR 0 27
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 3
66543: NEG
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 4
66554: NEG
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66569: LD_ADDR_VAR 0 28
66573: PUSH
66574: LD_INT 3
66576: NEG
66577: PUSH
66578: LD_INT 3
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 3
66588: NEG
66589: PUSH
66590: LD_INT 4
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 4
66600: NEG
66601: PUSH
66602: LD_INT 3
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: LIST
66614: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66615: LD_ADDR_VAR 0 29
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: LD_INT 3
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: LD_INT 3
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 1
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: LD_INT 4
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: LD_INT 4
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: LD_INT 3
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: NEG
66691: PUSH
66692: LD_INT 5
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 5
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 4
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: LD_INT 6
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: LD_INT 6
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: LD_INT 5
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66770: LD_ADDR_VAR 0 30
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 3
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 4
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 4
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 4
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 5
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 5
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 5
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 6
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 6
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66913: LD_ADDR_VAR 0 31
66917: PUSH
66918: LD_INT 3
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: LD_INT 3
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: LD_INT 3
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 4
66950: PUSH
66951: LD_INT 3
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 4
66960: PUSH
66961: LD_INT 4
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 3
66970: PUSH
66971: LD_INT 4
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 5
66980: PUSH
66981: LD_INT 4
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 5
66990: PUSH
66991: LD_INT 5
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 4
67000: PUSH
67001: LD_INT 5
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 6
67010: PUSH
67011: LD_INT 5
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 6
67020: PUSH
67021: LD_INT 6
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 5
67030: PUSH
67031: LD_INT 6
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67052: LD_ADDR_VAR 0 32
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: LD_INT 3
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: LD_INT 3
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 1
67090: PUSH
67091: LD_INT 4
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: LD_INT 4
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: LD_INT 3
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 1
67121: PUSH
67122: LD_INT 5
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: LD_INT 5
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 1
67141: NEG
67142: PUSH
67143: LD_INT 4
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: LD_INT 6
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 6
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: LD_INT 5
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67195: LD_ADDR_VAR 0 33
67199: PUSH
67200: LD_INT 2
67202: NEG
67203: PUSH
67204: LD_INT 1
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 3
67213: NEG
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 3
67224: NEG
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 3
67236: NEG
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 4
67247: NEG
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 4
67258: NEG
67259: PUSH
67260: LD_INT 1
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 4
67270: NEG
67271: PUSH
67272: LD_INT 1
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 5
67281: NEG
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 5
67292: NEG
67293: PUSH
67294: LD_INT 1
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 5
67304: NEG
67305: PUSH
67306: LD_INT 1
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 6
67315: NEG
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 6
67326: NEG
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67350: LD_ADDR_VAR 0 34
67354: PUSH
67355: LD_INT 2
67357: NEG
67358: PUSH
67359: LD_INT 3
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 3
67369: NEG
67370: PUSH
67371: LD_INT 2
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: LD_INT 3
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: NEG
67394: PUSH
67395: LD_INT 4
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 4
67405: NEG
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 4
67417: NEG
67418: PUSH
67419: LD_INT 4
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 4
67429: NEG
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 5
67441: NEG
67442: PUSH
67443: LD_INT 4
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: NEG
67454: PUSH
67455: LD_INT 5
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 5
67465: NEG
67466: PUSH
67467: LD_INT 6
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 6
67477: NEG
67478: PUSH
67479: LD_INT 5
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 6
67489: NEG
67490: PUSH
67491: LD_INT 6
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67513: LD_ADDR_VAR 0 41
67517: PUSH
67518: LD_INT 0
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 1
67531: NEG
67532: PUSH
67533: LD_INT 3
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67557: LD_ADDR_VAR 0 42
67561: PUSH
67562: LD_INT 2
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 2
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 3
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: LIST
67597: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67598: LD_ADDR_VAR 0 43
67602: PUSH
67603: LD_INT 2
67605: PUSH
67606: LD_INT 2
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 3
67615: PUSH
67616: LD_INT 2
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: LIST
67637: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67638: LD_ADDR_VAR 0 44
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: PUSH
67656: LD_INT 3
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 1
67665: NEG
67666: PUSH
67667: LD_INT 2
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: LIST
67678: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67679: LD_ADDR_VAR 0 45
67683: PUSH
67684: LD_INT 2
67686: NEG
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 2
67697: NEG
67698: PUSH
67699: LD_INT 1
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 3
67708: NEG
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: LIST
67722: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67723: LD_ADDR_VAR 0 46
67727: PUSH
67728: LD_INT 2
67730: NEG
67731: PUSH
67732: LD_INT 2
67734: NEG
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 2
67742: NEG
67743: PUSH
67744: LD_INT 3
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 3
67754: NEG
67755: PUSH
67756: LD_INT 2
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: LIST
67768: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67769: LD_ADDR_VAR 0 47
67773: PUSH
67774: LD_INT 2
67776: NEG
67777: PUSH
67778: LD_INT 3
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: LD_INT 3
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67802: LD_ADDR_VAR 0 48
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: LD_INT 2
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 2
67820: PUSH
67821: LD_INT 1
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67833: LD_ADDR_VAR 0 49
67837: PUSH
67838: LD_INT 3
67840: PUSH
67841: LD_INT 1
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 3
67850: PUSH
67851: LD_INT 2
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67862: LD_ADDR_VAR 0 50
67866: PUSH
67867: LD_INT 2
67869: PUSH
67870: LD_INT 3
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: LD_INT 3
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67891: LD_ADDR_VAR 0 51
67895: PUSH
67896: LD_INT 1
67898: NEG
67899: PUSH
67900: LD_INT 2
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67922: LD_ADDR_VAR 0 52
67926: PUSH
67927: LD_INT 3
67929: NEG
67930: PUSH
67931: LD_INT 1
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 3
67941: NEG
67942: PUSH
67943: LD_INT 2
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67955: LD_ADDR_VAR 0 53
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: LD_INT 3
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 1
67985: PUSH
67986: LD_INT 2
67988: NEG
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: LIST
67998: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67999: LD_ADDR_VAR 0 54
68003: PUSH
68004: LD_INT 2
68006: PUSH
68007: LD_INT 1
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 3
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 3
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68040: LD_ADDR_VAR 0 55
68044: PUSH
68045: LD_INT 3
68047: PUSH
68048: LD_INT 2
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: LD_INT 3
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: LIST
68079: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68080: LD_ADDR_VAR 0 56
68084: PUSH
68085: LD_INT 1
68087: PUSH
68088: LD_INT 3
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 3
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 1
68107: NEG
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68121: LD_ADDR_VAR 0 57
68125: PUSH
68126: LD_INT 2
68128: NEG
68129: PUSH
68130: LD_INT 1
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 3
68139: NEG
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: NEG
68151: PUSH
68152: LD_INT 1
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: LIST
68164: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68165: LD_ADDR_VAR 0 58
68169: PUSH
68170: LD_INT 2
68172: NEG
68173: PUSH
68174: LD_INT 3
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 3
68184: NEG
68185: PUSH
68186: LD_INT 2
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 3
68196: NEG
68197: PUSH
68198: LD_INT 3
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: LIST
68210: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68211: LD_ADDR_VAR 0 59
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: LD_INT 2
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: LD_INT 2
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 1
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: LIST
68254: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68255: LD_ADDR_VAR 0 60
68259: PUSH
68260: LD_INT 1
68262: PUSH
68263: LD_INT 1
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 2
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 2
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: LIST
68295: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68296: LD_ADDR_VAR 0 61
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: LD_INT 1
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 2
68313: PUSH
68314: LD_INT 2
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 1
68323: PUSH
68324: LD_INT 2
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: LIST
68335: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68336: LD_ADDR_VAR 0 62
68340: PUSH
68341: LD_INT 1
68343: PUSH
68344: LD_INT 2
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 0
68353: PUSH
68354: LD_INT 2
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 1
68363: NEG
68364: PUSH
68365: LD_INT 1
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: LIST
68376: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68377: LD_ADDR_VAR 0 63
68381: PUSH
68382: LD_INT 1
68384: NEG
68385: PUSH
68386: LD_INT 1
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 2
68395: NEG
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 2
68406: NEG
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: LIST
68420: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68421: LD_ADDR_VAR 0 64
68425: PUSH
68426: LD_INT 1
68428: NEG
68429: PUSH
68430: LD_INT 2
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 2
68440: NEG
68441: PUSH
68442: LD_INT 1
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 2
68452: NEG
68453: PUSH
68454: LD_INT 2
68456: NEG
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: LIST
68466: ST_TO_ADDR
// end ; 2 :
68467: GO 71733
68469: LD_INT 2
68471: DOUBLE
68472: EQUAL
68473: IFTRUE 68477
68475: GO 71732
68477: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68478: LD_ADDR_VAR 0 29
68482: PUSH
68483: LD_INT 4
68485: PUSH
68486: LD_INT 0
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 4
68495: PUSH
68496: LD_INT 1
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 5
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 5
68516: PUSH
68517: LD_INT 1
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 4
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 3
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: PUSH
68547: LD_INT 1
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 3
68557: PUSH
68558: LD_INT 2
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 5
68568: PUSH
68569: LD_INT 2
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 3
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 3
68588: PUSH
68589: LD_INT 2
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 4
68598: PUSH
68599: LD_INT 3
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 4
68608: PUSH
68609: LD_INT 4
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 3
68618: PUSH
68619: LD_INT 4
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 2
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: LD_INT 2
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 4
68648: PUSH
68649: LD_INT 2
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 2
68658: PUSH
68659: LD_INT 4
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 4
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 0
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 1
68688: PUSH
68689: LD_INT 4
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 1
68698: PUSH
68699: LD_INT 5
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: LD_INT 5
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 1
68718: NEG
68719: PUSH
68720: LD_INT 4
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 1
68729: NEG
68730: PUSH
68731: LD_INT 3
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 2
68740: PUSH
68741: LD_INT 5
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 2
68750: NEG
68751: PUSH
68752: LD_INT 3
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 3
68761: NEG
68762: PUSH
68763: LD_INT 0
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 3
68772: NEG
68773: PUSH
68774: LD_INT 1
68776: NEG
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 2
68784: NEG
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 2
68795: NEG
68796: PUSH
68797: LD_INT 1
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: LD_INT 1
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 4
68817: NEG
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 4
68828: NEG
68829: PUSH
68830: LD_INT 1
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 4
68840: NEG
68841: PUSH
68842: LD_INT 2
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 2
68852: NEG
68853: PUSH
68854: LD_INT 2
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 4
68863: NEG
68864: PUSH
68865: LD_INT 4
68867: NEG
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 4
68875: NEG
68876: PUSH
68877: LD_INT 5
68879: NEG
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 3
68887: NEG
68888: PUSH
68889: LD_INT 4
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 3
68899: NEG
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 4
68911: NEG
68912: PUSH
68913: LD_INT 3
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 5
68923: NEG
68924: PUSH
68925: LD_INT 4
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 5
68935: NEG
68936: PUSH
68937: LD_INT 5
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 3
68947: NEG
68948: PUSH
68949: LD_INT 5
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 5
68959: NEG
68960: PUSH
68961: LD_INT 3
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69016: LD_ADDR_VAR 0 30
69020: PUSH
69021: LD_INT 4
69023: PUSH
69024: LD_INT 4
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 4
69033: PUSH
69034: LD_INT 3
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 5
69043: PUSH
69044: LD_INT 4
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 5
69053: PUSH
69054: LD_INT 5
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 4
69063: PUSH
69064: LD_INT 5
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: LD_INT 4
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 3
69083: PUSH
69084: LD_INT 3
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 5
69093: PUSH
69094: LD_INT 3
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 3
69103: PUSH
69104: LD_INT 5
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 0
69113: PUSH
69114: LD_INT 3
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 0
69123: PUSH
69124: LD_INT 2
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: LD_INT 3
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 1
69143: PUSH
69144: LD_INT 4
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: LD_INT 4
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 1
69163: NEG
69164: PUSH
69165: LD_INT 3
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 1
69174: NEG
69175: PUSH
69176: LD_INT 2
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 2
69185: PUSH
69186: LD_INT 4
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 2
69195: NEG
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 4
69206: NEG
69207: PUSH
69208: LD_INT 0
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 4
69217: NEG
69218: PUSH
69219: LD_INT 1
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 3
69229: NEG
69230: PUSH
69231: LD_INT 0
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 3
69240: NEG
69241: PUSH
69242: LD_INT 1
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 4
69251: NEG
69252: PUSH
69253: LD_INT 1
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 5
69262: NEG
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 5
69273: NEG
69274: PUSH
69275: LD_INT 1
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 5
69285: NEG
69286: PUSH
69287: LD_INT 2
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 3
69297: NEG
69298: PUSH
69299: LD_INT 2
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 3
69308: NEG
69309: PUSH
69310: LD_INT 3
69312: NEG
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 3
69320: NEG
69321: PUSH
69322: LD_INT 4
69324: NEG
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 2
69332: NEG
69333: PUSH
69334: LD_INT 3
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 2
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 3
69356: NEG
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 4
69368: NEG
69369: PUSH
69370: LD_INT 3
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: NEG
69381: PUSH
69382: LD_INT 4
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 2
69392: NEG
69393: PUSH
69394: LD_INT 4
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 4
69404: NEG
69405: PUSH
69406: LD_INT 2
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 0
69416: PUSH
69417: LD_INT 4
69419: NEG
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 0
69427: PUSH
69428: LD_INT 5
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 1
69438: PUSH
69439: LD_INT 4
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 1
69449: PUSH
69450: LD_INT 3
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 0
69460: PUSH
69461: LD_INT 3
69463: NEG
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 1
69471: NEG
69472: PUSH
69473: LD_INT 4
69475: NEG
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 1
69483: NEG
69484: PUSH
69485: LD_INT 5
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 2
69495: PUSH
69496: LD_INT 3
69498: NEG
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 2
69506: NEG
69507: PUSH
69508: LD_INT 5
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69563: LD_ADDR_VAR 0 31
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: LD_INT 4
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: LD_INT 3
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: LD_INT 4
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 1
69600: PUSH
69601: LD_INT 5
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 0
69610: PUSH
69611: LD_INT 5
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 1
69620: NEG
69621: PUSH
69622: LD_INT 4
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 1
69631: NEG
69632: PUSH
69633: LD_INT 3
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 2
69642: PUSH
69643: LD_INT 5
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 2
69652: NEG
69653: PUSH
69654: LD_INT 3
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 3
69663: NEG
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 3
69674: NEG
69675: PUSH
69676: LD_INT 1
69678: NEG
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 2
69686: NEG
69687: PUSH
69688: LD_INT 0
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 2
69697: NEG
69698: PUSH
69699: LD_INT 1
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 3
69708: NEG
69709: PUSH
69710: LD_INT 1
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 4
69719: NEG
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 4
69730: NEG
69731: PUSH
69732: LD_INT 1
69734: NEG
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 4
69742: NEG
69743: PUSH
69744: LD_INT 2
69746: NEG
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 2
69754: NEG
69755: PUSH
69756: LD_INT 2
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 4
69765: NEG
69766: PUSH
69767: LD_INT 4
69769: NEG
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 4
69777: NEG
69778: PUSH
69779: LD_INT 5
69781: NEG
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 3
69789: NEG
69790: PUSH
69791: LD_INT 4
69793: NEG
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 3
69801: NEG
69802: PUSH
69803: LD_INT 3
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 4
69813: NEG
69814: PUSH
69815: LD_INT 3
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 5
69825: NEG
69826: PUSH
69827: LD_INT 4
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 5
69837: NEG
69838: PUSH
69839: LD_INT 5
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 3
69849: NEG
69850: PUSH
69851: LD_INT 5
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 5
69861: NEG
69862: PUSH
69863: LD_INT 3
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: LD_INT 3
69876: NEG
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: LD_INT 4
69887: NEG
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 1
69895: PUSH
69896: LD_INT 3
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 1
69906: PUSH
69907: LD_INT 2
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 0
69917: PUSH
69918: LD_INT 2
69920: NEG
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 1
69928: NEG
69929: PUSH
69930: LD_INT 3
69932: NEG
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 1
69940: NEG
69941: PUSH
69942: LD_INT 4
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 2
69952: PUSH
69953: LD_INT 2
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 2
69963: NEG
69964: PUSH
69965: LD_INT 4
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 4
69975: PUSH
69976: LD_INT 0
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 4
69985: PUSH
69986: LD_INT 1
69988: NEG
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 5
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 5
70006: PUSH
70007: LD_INT 1
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 4
70016: PUSH
70017: LD_INT 1
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 3
70026: PUSH
70027: LD_INT 0
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 3
70036: PUSH
70037: LD_INT 1
70039: NEG
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 3
70047: PUSH
70048: LD_INT 2
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 5
70058: PUSH
70059: LD_INT 2
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70113: LD_ADDR_VAR 0 32
70117: PUSH
70118: LD_INT 4
70120: NEG
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 4
70131: NEG
70132: PUSH
70133: LD_INT 1
70135: NEG
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 3
70143: NEG
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 3
70154: NEG
70155: PUSH
70156: LD_INT 1
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 4
70165: NEG
70166: PUSH
70167: LD_INT 1
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 5
70176: NEG
70177: PUSH
70178: LD_INT 0
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 5
70187: NEG
70188: PUSH
70189: LD_INT 1
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 5
70199: NEG
70200: PUSH
70201: LD_INT 2
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 3
70211: NEG
70212: PUSH
70213: LD_INT 2
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 3
70222: NEG
70223: PUSH
70224: LD_INT 3
70226: NEG
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 3
70234: NEG
70235: PUSH
70236: LD_INT 4
70238: NEG
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 2
70246: NEG
70247: PUSH
70248: LD_INT 3
70250: NEG
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 2
70258: NEG
70259: PUSH
70260: LD_INT 2
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 3
70270: NEG
70271: PUSH
70272: LD_INT 2
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 4
70282: NEG
70283: PUSH
70284: LD_INT 3
70286: NEG
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 4
70294: NEG
70295: PUSH
70296: LD_INT 4
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 2
70306: NEG
70307: PUSH
70308: LD_INT 4
70310: NEG
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 4
70318: NEG
70319: PUSH
70320: LD_INT 2
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 4
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_INT 5
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 1
70352: PUSH
70353: LD_INT 4
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: LD_INT 3
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 3
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: LD_INT 4
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 1
70397: NEG
70398: PUSH
70399: LD_INT 5
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 2
70409: PUSH
70410: LD_INT 3
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 2
70420: NEG
70421: PUSH
70422: LD_INT 5
70424: NEG
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 3
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 3
70442: PUSH
70443: LD_INT 1
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: PUSH
70454: LD_INT 0
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: LD_INT 1
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: LD_INT 1
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 2
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 2
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 2
70504: PUSH
70505: LD_INT 2
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 4
70515: PUSH
70516: LD_INT 2
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 4
70525: PUSH
70526: LD_INT 4
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: LD_INT 3
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 5
70545: PUSH
70546: LD_INT 4
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 5
70555: PUSH
70556: LD_INT 5
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: LD_INT 5
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 3
70575: PUSH
70576: LD_INT 4
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 3
70585: PUSH
70586: LD_INT 3
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 5
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 3
70605: PUSH
70606: LD_INT 5
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70660: LD_ADDR_VAR 0 33
70664: PUSH
70665: LD_INT 4
70667: NEG
70668: PUSH
70669: LD_INT 4
70671: NEG
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 4
70679: NEG
70680: PUSH
70681: LD_INT 5
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 3
70691: NEG
70692: PUSH
70693: LD_INT 4
70695: NEG
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 3
70703: NEG
70704: PUSH
70705: LD_INT 3
70707: NEG
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 4
70715: NEG
70716: PUSH
70717: LD_INT 3
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 5
70727: NEG
70728: PUSH
70729: LD_INT 4
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 5
70739: NEG
70740: PUSH
70741: LD_INT 5
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 3
70751: NEG
70752: PUSH
70753: LD_INT 5
70755: NEG
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 5
70763: NEG
70764: PUSH
70765: LD_INT 3
70767: NEG
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 0
70775: PUSH
70776: LD_INT 3
70778: NEG
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: LD_INT 4
70789: NEG
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 1
70797: PUSH
70798: LD_INT 3
70800: NEG
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 1
70808: PUSH
70809: LD_INT 2
70811: NEG
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 0
70819: PUSH
70820: LD_INT 2
70822: NEG
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 1
70830: NEG
70831: PUSH
70832: LD_INT 3
70834: NEG
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 1
70842: NEG
70843: PUSH
70844: LD_INT 4
70846: NEG
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 2
70854: PUSH
70855: LD_INT 2
70857: NEG
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 2
70865: NEG
70866: PUSH
70867: LD_INT 4
70869: NEG
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 4
70877: PUSH
70878: LD_INT 0
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 4
70887: PUSH
70888: LD_INT 1
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 5
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 5
70908: PUSH
70909: LD_INT 1
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 4
70918: PUSH
70919: LD_INT 1
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: LD_INT 0
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 3
70938: PUSH
70939: LD_INT 1
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 3
70949: PUSH
70950: LD_INT 2
70952: NEG
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 5
70960: PUSH
70961: LD_INT 2
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 3
70970: PUSH
70971: LD_INT 3
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 3
70980: PUSH
70981: LD_INT 2
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 4
70990: PUSH
70991: LD_INT 3
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 4
71000: PUSH
71001: LD_INT 4
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 3
71010: PUSH
71011: LD_INT 4
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 2
71020: PUSH
71021: LD_INT 3
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 2
71030: PUSH
71031: LD_INT 2
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 4
71040: PUSH
71041: LD_INT 2
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 2
71050: PUSH
71051: LD_INT 4
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 0
71060: PUSH
71061: LD_INT 4
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 0
71070: PUSH
71071: LD_INT 3
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: LD_INT 4
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 1
71090: PUSH
71091: LD_INT 5
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 0
71100: PUSH
71101: LD_INT 5
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 1
71110: NEG
71111: PUSH
71112: LD_INT 4
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 1
71121: NEG
71122: PUSH
71123: LD_INT 3
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 2
71132: PUSH
71133: LD_INT 5
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 2
71142: NEG
71143: PUSH
71144: LD_INT 3
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71198: LD_ADDR_VAR 0 34
71202: PUSH
71203: LD_INT 0
71205: PUSH
71206: LD_INT 4
71208: NEG
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: LD_INT 5
71219: NEG
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 1
71227: PUSH
71228: LD_INT 4
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: LD_INT 3
71241: NEG
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: LD_INT 3
71252: NEG
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 1
71260: NEG
71261: PUSH
71262: LD_INT 4
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 1
71272: NEG
71273: PUSH
71274: LD_INT 5
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 2
71284: PUSH
71285: LD_INT 3
71287: NEG
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 2
71295: NEG
71296: PUSH
71297: LD_INT 5
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 3
71307: PUSH
71308: LD_INT 0
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 3
71317: PUSH
71318: LD_INT 1
71320: NEG
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 4
71328: PUSH
71329: LD_INT 0
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 4
71338: PUSH
71339: LD_INT 1
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 3
71348: PUSH
71349: LD_INT 1
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 2
71358: PUSH
71359: LD_INT 0
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 2
71368: PUSH
71369: LD_INT 1
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: PUSH
71380: LD_INT 2
71382: NEG
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 4
71390: PUSH
71391: LD_INT 2
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 4
71400: PUSH
71401: LD_INT 4
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 4
71410: PUSH
71411: LD_INT 3
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 5
71420: PUSH
71421: LD_INT 4
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 5
71430: PUSH
71431: LD_INT 5
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 4
71440: PUSH
71441: LD_INT 5
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 3
71450: PUSH
71451: LD_INT 4
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 3
71460: PUSH
71461: LD_INT 3
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 5
71470: PUSH
71471: LD_INT 3
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 3
71480: PUSH
71481: LD_INT 5
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 0
71490: PUSH
71491: LD_INT 3
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 0
71500: PUSH
71501: LD_INT 2
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 1
71510: PUSH
71511: LD_INT 3
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 1
71520: PUSH
71521: LD_INT 4
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 0
71530: PUSH
71531: LD_INT 4
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 1
71540: NEG
71541: PUSH
71542: LD_INT 3
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 1
71551: NEG
71552: PUSH
71553: LD_INT 2
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 2
71562: PUSH
71563: LD_INT 4
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 2
71572: NEG
71573: PUSH
71574: LD_INT 2
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 4
71583: NEG
71584: PUSH
71585: LD_INT 0
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 4
71594: NEG
71595: PUSH
71596: LD_INT 1
71598: NEG
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 3
71606: NEG
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 3
71617: NEG
71618: PUSH
71619: LD_INT 1
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 4
71628: NEG
71629: PUSH
71630: LD_INT 1
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 5
71639: NEG
71640: PUSH
71641: LD_INT 0
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 5
71650: NEG
71651: PUSH
71652: LD_INT 1
71654: NEG
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 5
71662: NEG
71663: PUSH
71664: LD_INT 2
71666: NEG
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 3
71674: NEG
71675: PUSH
71676: LD_INT 2
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: ST_TO_ADDR
// end ; end ;
71730: GO 71733
71732: POP
// case btype of b_depot , b_warehouse :
71733: LD_VAR 0 1
71737: PUSH
71738: LD_INT 0
71740: DOUBLE
71741: EQUAL
71742: IFTRUE 71752
71744: LD_INT 1
71746: DOUBLE
71747: EQUAL
71748: IFTRUE 71752
71750: GO 71953
71752: POP
// case nation of nation_american :
71753: LD_VAR 0 5
71757: PUSH
71758: LD_INT 1
71760: DOUBLE
71761: EQUAL
71762: IFTRUE 71766
71764: GO 71822
71766: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71767: LD_ADDR_VAR 0 9
71771: PUSH
71772: LD_VAR 0 11
71776: PUSH
71777: LD_VAR 0 12
71781: PUSH
71782: LD_VAR 0 13
71786: PUSH
71787: LD_VAR 0 14
71791: PUSH
71792: LD_VAR 0 15
71796: PUSH
71797: LD_VAR 0 16
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: PUSH
71810: LD_VAR 0 4
71814: PUSH
71815: LD_INT 1
71817: PLUS
71818: ARRAY
71819: ST_TO_ADDR
71820: GO 71951
71822: LD_INT 2
71824: DOUBLE
71825: EQUAL
71826: IFTRUE 71830
71828: GO 71886
71830: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71831: LD_ADDR_VAR 0 9
71835: PUSH
71836: LD_VAR 0 17
71840: PUSH
71841: LD_VAR 0 18
71845: PUSH
71846: LD_VAR 0 19
71850: PUSH
71851: LD_VAR 0 20
71855: PUSH
71856: LD_VAR 0 21
71860: PUSH
71861: LD_VAR 0 22
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: PUSH
71874: LD_VAR 0 4
71878: PUSH
71879: LD_INT 1
71881: PLUS
71882: ARRAY
71883: ST_TO_ADDR
71884: GO 71951
71886: LD_INT 3
71888: DOUBLE
71889: EQUAL
71890: IFTRUE 71894
71892: GO 71950
71894: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71895: LD_ADDR_VAR 0 9
71899: PUSH
71900: LD_VAR 0 23
71904: PUSH
71905: LD_VAR 0 24
71909: PUSH
71910: LD_VAR 0 25
71914: PUSH
71915: LD_VAR 0 26
71919: PUSH
71920: LD_VAR 0 27
71924: PUSH
71925: LD_VAR 0 28
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: PUSH
71938: LD_VAR 0 4
71942: PUSH
71943: LD_INT 1
71945: PLUS
71946: ARRAY
71947: ST_TO_ADDR
71948: GO 71951
71950: POP
71951: GO 72506
71953: LD_INT 2
71955: DOUBLE
71956: EQUAL
71957: IFTRUE 71967
71959: LD_INT 3
71961: DOUBLE
71962: EQUAL
71963: IFTRUE 71967
71965: GO 72023
71967: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71968: LD_ADDR_VAR 0 9
71972: PUSH
71973: LD_VAR 0 29
71977: PUSH
71978: LD_VAR 0 30
71982: PUSH
71983: LD_VAR 0 31
71987: PUSH
71988: LD_VAR 0 32
71992: PUSH
71993: LD_VAR 0 33
71997: PUSH
71998: LD_VAR 0 34
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: PUSH
72011: LD_VAR 0 4
72015: PUSH
72016: LD_INT 1
72018: PLUS
72019: ARRAY
72020: ST_TO_ADDR
72021: GO 72506
72023: LD_INT 16
72025: DOUBLE
72026: EQUAL
72027: IFTRUE 72085
72029: LD_INT 17
72031: DOUBLE
72032: EQUAL
72033: IFTRUE 72085
72035: LD_INT 18
72037: DOUBLE
72038: EQUAL
72039: IFTRUE 72085
72041: LD_INT 19
72043: DOUBLE
72044: EQUAL
72045: IFTRUE 72085
72047: LD_INT 22
72049: DOUBLE
72050: EQUAL
72051: IFTRUE 72085
72053: LD_INT 20
72055: DOUBLE
72056: EQUAL
72057: IFTRUE 72085
72059: LD_INT 21
72061: DOUBLE
72062: EQUAL
72063: IFTRUE 72085
72065: LD_INT 23
72067: DOUBLE
72068: EQUAL
72069: IFTRUE 72085
72071: LD_INT 24
72073: DOUBLE
72074: EQUAL
72075: IFTRUE 72085
72077: LD_INT 25
72079: DOUBLE
72080: EQUAL
72081: IFTRUE 72085
72083: GO 72141
72085: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72086: LD_ADDR_VAR 0 9
72090: PUSH
72091: LD_VAR 0 35
72095: PUSH
72096: LD_VAR 0 36
72100: PUSH
72101: LD_VAR 0 37
72105: PUSH
72106: LD_VAR 0 38
72110: PUSH
72111: LD_VAR 0 39
72115: PUSH
72116: LD_VAR 0 40
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: PUSH
72129: LD_VAR 0 4
72133: PUSH
72134: LD_INT 1
72136: PLUS
72137: ARRAY
72138: ST_TO_ADDR
72139: GO 72506
72141: LD_INT 6
72143: DOUBLE
72144: EQUAL
72145: IFTRUE 72197
72147: LD_INT 7
72149: DOUBLE
72150: EQUAL
72151: IFTRUE 72197
72153: LD_INT 8
72155: DOUBLE
72156: EQUAL
72157: IFTRUE 72197
72159: LD_INT 13
72161: DOUBLE
72162: EQUAL
72163: IFTRUE 72197
72165: LD_INT 12
72167: DOUBLE
72168: EQUAL
72169: IFTRUE 72197
72171: LD_INT 15
72173: DOUBLE
72174: EQUAL
72175: IFTRUE 72197
72177: LD_INT 11
72179: DOUBLE
72180: EQUAL
72181: IFTRUE 72197
72183: LD_INT 14
72185: DOUBLE
72186: EQUAL
72187: IFTRUE 72197
72189: LD_INT 10
72191: DOUBLE
72192: EQUAL
72193: IFTRUE 72197
72195: GO 72253
72197: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72198: LD_ADDR_VAR 0 9
72202: PUSH
72203: LD_VAR 0 41
72207: PUSH
72208: LD_VAR 0 42
72212: PUSH
72213: LD_VAR 0 43
72217: PUSH
72218: LD_VAR 0 44
72222: PUSH
72223: LD_VAR 0 45
72227: PUSH
72228: LD_VAR 0 46
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: PUSH
72241: LD_VAR 0 4
72245: PUSH
72246: LD_INT 1
72248: PLUS
72249: ARRAY
72250: ST_TO_ADDR
72251: GO 72506
72253: LD_INT 36
72255: DOUBLE
72256: EQUAL
72257: IFTRUE 72261
72259: GO 72317
72261: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72262: LD_ADDR_VAR 0 9
72266: PUSH
72267: LD_VAR 0 47
72271: PUSH
72272: LD_VAR 0 48
72276: PUSH
72277: LD_VAR 0 49
72281: PUSH
72282: LD_VAR 0 50
72286: PUSH
72287: LD_VAR 0 51
72291: PUSH
72292: LD_VAR 0 52
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: PUSH
72305: LD_VAR 0 4
72309: PUSH
72310: LD_INT 1
72312: PLUS
72313: ARRAY
72314: ST_TO_ADDR
72315: GO 72506
72317: LD_INT 4
72319: DOUBLE
72320: EQUAL
72321: IFTRUE 72343
72323: LD_INT 5
72325: DOUBLE
72326: EQUAL
72327: IFTRUE 72343
72329: LD_INT 34
72331: DOUBLE
72332: EQUAL
72333: IFTRUE 72343
72335: LD_INT 37
72337: DOUBLE
72338: EQUAL
72339: IFTRUE 72343
72341: GO 72399
72343: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72344: LD_ADDR_VAR 0 9
72348: PUSH
72349: LD_VAR 0 53
72353: PUSH
72354: LD_VAR 0 54
72358: PUSH
72359: LD_VAR 0 55
72363: PUSH
72364: LD_VAR 0 56
72368: PUSH
72369: LD_VAR 0 57
72373: PUSH
72374: LD_VAR 0 58
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: PUSH
72387: LD_VAR 0 4
72391: PUSH
72392: LD_INT 1
72394: PLUS
72395: ARRAY
72396: ST_TO_ADDR
72397: GO 72506
72399: LD_INT 31
72401: DOUBLE
72402: EQUAL
72403: IFTRUE 72449
72405: LD_INT 32
72407: DOUBLE
72408: EQUAL
72409: IFTRUE 72449
72411: LD_INT 33
72413: DOUBLE
72414: EQUAL
72415: IFTRUE 72449
72417: LD_INT 27
72419: DOUBLE
72420: EQUAL
72421: IFTRUE 72449
72423: LD_INT 26
72425: DOUBLE
72426: EQUAL
72427: IFTRUE 72449
72429: LD_INT 28
72431: DOUBLE
72432: EQUAL
72433: IFTRUE 72449
72435: LD_INT 29
72437: DOUBLE
72438: EQUAL
72439: IFTRUE 72449
72441: LD_INT 30
72443: DOUBLE
72444: EQUAL
72445: IFTRUE 72449
72447: GO 72505
72449: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72450: LD_ADDR_VAR 0 9
72454: PUSH
72455: LD_VAR 0 59
72459: PUSH
72460: LD_VAR 0 60
72464: PUSH
72465: LD_VAR 0 61
72469: PUSH
72470: LD_VAR 0 62
72474: PUSH
72475: LD_VAR 0 63
72479: PUSH
72480: LD_VAR 0 64
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: PUSH
72493: LD_VAR 0 4
72497: PUSH
72498: LD_INT 1
72500: PLUS
72501: ARRAY
72502: ST_TO_ADDR
72503: GO 72506
72505: POP
// temp_list2 = [ ] ;
72506: LD_ADDR_VAR 0 10
72510: PUSH
72511: EMPTY
72512: ST_TO_ADDR
// for i in temp_list do
72513: LD_ADDR_VAR 0 8
72517: PUSH
72518: LD_VAR 0 9
72522: PUSH
72523: FOR_IN
72524: IFFALSE 72576
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72526: LD_ADDR_VAR 0 10
72530: PUSH
72531: LD_VAR 0 10
72535: PUSH
72536: LD_VAR 0 8
72540: PUSH
72541: LD_INT 1
72543: ARRAY
72544: PUSH
72545: LD_VAR 0 2
72549: PLUS
72550: PUSH
72551: LD_VAR 0 8
72555: PUSH
72556: LD_INT 2
72558: ARRAY
72559: PUSH
72560: LD_VAR 0 3
72564: PLUS
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: EMPTY
72571: LIST
72572: ADD
72573: ST_TO_ADDR
72574: GO 72523
72576: POP
72577: POP
// result = temp_list2 ;
72578: LD_ADDR_VAR 0 7
72582: PUSH
72583: LD_VAR 0 10
72587: ST_TO_ADDR
// end ;
72588: LD_VAR 0 7
72592: RET
// export function EnemyInRange ( unit , dist ) ; begin
72593: LD_INT 0
72595: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72596: LD_ADDR_VAR 0 3
72600: PUSH
72601: LD_VAR 0 1
72605: PPUSH
72606: CALL_OW 255
72610: PPUSH
72611: LD_VAR 0 1
72615: PPUSH
72616: CALL_OW 250
72620: PPUSH
72621: LD_VAR 0 1
72625: PPUSH
72626: CALL_OW 251
72630: PPUSH
72631: LD_VAR 0 2
72635: PPUSH
72636: CALL 46697 0 4
72640: PUSH
72641: LD_INT 4
72643: ARRAY
72644: ST_TO_ADDR
// end ;
72645: LD_VAR 0 3
72649: RET
// export function PlayerSeeMe ( unit ) ; begin
72650: LD_INT 0
72652: PPUSH
// result := See ( your_side , unit ) ;
72653: LD_ADDR_VAR 0 2
72657: PUSH
72658: LD_OWVAR 2
72662: PPUSH
72663: LD_VAR 0 1
72667: PPUSH
72668: CALL_OW 292
72672: ST_TO_ADDR
// end ;
72673: LD_VAR 0 2
72677: RET
// export function ReverseDir ( unit ) ; begin
72678: LD_INT 0
72680: PPUSH
// if not unit then
72681: LD_VAR 0 1
72685: NOT
72686: IFFALSE 72690
// exit ;
72688: GO 72713
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72690: LD_ADDR_VAR 0 2
72694: PUSH
72695: LD_VAR 0 1
72699: PPUSH
72700: CALL_OW 254
72704: PUSH
72705: LD_INT 3
72707: PLUS
72708: PUSH
72709: LD_INT 6
72711: MOD
72712: ST_TO_ADDR
// end ;
72713: LD_VAR 0 2
72717: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72718: LD_INT 0
72720: PPUSH
72721: PPUSH
72722: PPUSH
72723: PPUSH
72724: PPUSH
// if not hexes then
72725: LD_VAR 0 2
72729: NOT
72730: IFFALSE 72734
// exit ;
72732: GO 72882
// dist := 9999 ;
72734: LD_ADDR_VAR 0 5
72738: PUSH
72739: LD_INT 9999
72741: ST_TO_ADDR
// for i = 1 to hexes do
72742: LD_ADDR_VAR 0 4
72746: PUSH
72747: DOUBLE
72748: LD_INT 1
72750: DEC
72751: ST_TO_ADDR
72752: LD_VAR 0 2
72756: PUSH
72757: FOR_TO
72758: IFFALSE 72870
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72760: LD_VAR 0 1
72764: PPUSH
72765: LD_VAR 0 2
72769: PUSH
72770: LD_VAR 0 4
72774: ARRAY
72775: PUSH
72776: LD_INT 1
72778: ARRAY
72779: PPUSH
72780: LD_VAR 0 2
72784: PUSH
72785: LD_VAR 0 4
72789: ARRAY
72790: PUSH
72791: LD_INT 2
72793: ARRAY
72794: PPUSH
72795: CALL_OW 297
72799: PUSH
72800: LD_VAR 0 5
72804: LESS
72805: IFFALSE 72868
// begin hex := hexes [ i ] ;
72807: LD_ADDR_VAR 0 7
72811: PUSH
72812: LD_VAR 0 2
72816: PUSH
72817: LD_VAR 0 4
72821: ARRAY
72822: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72823: LD_ADDR_VAR 0 5
72827: PUSH
72828: LD_VAR 0 1
72832: PPUSH
72833: LD_VAR 0 2
72837: PUSH
72838: LD_VAR 0 4
72842: ARRAY
72843: PUSH
72844: LD_INT 1
72846: ARRAY
72847: PPUSH
72848: LD_VAR 0 2
72852: PUSH
72853: LD_VAR 0 4
72857: ARRAY
72858: PUSH
72859: LD_INT 2
72861: ARRAY
72862: PPUSH
72863: CALL_OW 297
72867: ST_TO_ADDR
// end ; end ;
72868: GO 72757
72870: POP
72871: POP
// result := hex ;
72872: LD_ADDR_VAR 0 3
72876: PUSH
72877: LD_VAR 0 7
72881: ST_TO_ADDR
// end ;
72882: LD_VAR 0 3
72886: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72887: LD_INT 0
72889: PPUSH
72890: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72891: LD_VAR 0 1
72895: NOT
72896: PUSH
72897: LD_VAR 0 1
72901: PUSH
72902: LD_INT 21
72904: PUSH
72905: LD_INT 2
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 23
72914: PUSH
72915: LD_INT 2
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PPUSH
72926: CALL_OW 69
72930: IN
72931: NOT
72932: OR
72933: IFFALSE 72937
// exit ;
72935: GO 72984
// for i = 1 to 3 do
72937: LD_ADDR_VAR 0 3
72941: PUSH
72942: DOUBLE
72943: LD_INT 1
72945: DEC
72946: ST_TO_ADDR
72947: LD_INT 3
72949: PUSH
72950: FOR_TO
72951: IFFALSE 72982
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72953: LD_VAR 0 1
72957: PPUSH
72958: CALL_OW 250
72962: PPUSH
72963: LD_VAR 0 1
72967: PPUSH
72968: CALL_OW 251
72972: PPUSH
72973: LD_INT 1
72975: PPUSH
72976: CALL_OW 453
72980: GO 72950
72982: POP
72983: POP
// end ;
72984: LD_VAR 0 2
72988: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72989: LD_INT 0
72991: PPUSH
72992: PPUSH
72993: PPUSH
72994: PPUSH
72995: PPUSH
72996: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72997: LD_VAR 0 1
73001: NOT
73002: PUSH
73003: LD_VAR 0 2
73007: NOT
73008: OR
73009: PUSH
73010: LD_VAR 0 1
73014: PPUSH
73015: CALL_OW 314
73019: OR
73020: IFFALSE 73024
// exit ;
73022: GO 73465
// x := GetX ( enemy_unit ) ;
73024: LD_ADDR_VAR 0 7
73028: PUSH
73029: LD_VAR 0 2
73033: PPUSH
73034: CALL_OW 250
73038: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73039: LD_ADDR_VAR 0 8
73043: PUSH
73044: LD_VAR 0 2
73048: PPUSH
73049: CALL_OW 251
73053: ST_TO_ADDR
// if not x or not y then
73054: LD_VAR 0 7
73058: NOT
73059: PUSH
73060: LD_VAR 0 8
73064: NOT
73065: OR
73066: IFFALSE 73070
// exit ;
73068: GO 73465
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73070: LD_ADDR_VAR 0 6
73074: PUSH
73075: LD_VAR 0 7
73079: PPUSH
73080: LD_INT 0
73082: PPUSH
73083: LD_INT 4
73085: PPUSH
73086: CALL_OW 272
73090: PUSH
73091: LD_VAR 0 8
73095: PPUSH
73096: LD_INT 0
73098: PPUSH
73099: LD_INT 4
73101: PPUSH
73102: CALL_OW 273
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_VAR 0 7
73115: PPUSH
73116: LD_INT 1
73118: PPUSH
73119: LD_INT 4
73121: PPUSH
73122: CALL_OW 272
73126: PUSH
73127: LD_VAR 0 8
73131: PPUSH
73132: LD_INT 1
73134: PPUSH
73135: LD_INT 4
73137: PPUSH
73138: CALL_OW 273
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_VAR 0 7
73151: PPUSH
73152: LD_INT 2
73154: PPUSH
73155: LD_INT 4
73157: PPUSH
73158: CALL_OW 272
73162: PUSH
73163: LD_VAR 0 8
73167: PPUSH
73168: LD_INT 2
73170: PPUSH
73171: LD_INT 4
73173: PPUSH
73174: CALL_OW 273
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: LD_VAR 0 7
73187: PPUSH
73188: LD_INT 3
73190: PPUSH
73191: LD_INT 4
73193: PPUSH
73194: CALL_OW 272
73198: PUSH
73199: LD_VAR 0 8
73203: PPUSH
73204: LD_INT 3
73206: PPUSH
73207: LD_INT 4
73209: PPUSH
73210: CALL_OW 273
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: LD_VAR 0 7
73223: PPUSH
73224: LD_INT 4
73226: PPUSH
73227: LD_INT 4
73229: PPUSH
73230: CALL_OW 272
73234: PUSH
73235: LD_VAR 0 8
73239: PPUSH
73240: LD_INT 4
73242: PPUSH
73243: LD_INT 4
73245: PPUSH
73246: CALL_OW 273
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_VAR 0 7
73259: PPUSH
73260: LD_INT 5
73262: PPUSH
73263: LD_INT 4
73265: PPUSH
73266: CALL_OW 272
73270: PUSH
73271: LD_VAR 0 8
73275: PPUSH
73276: LD_INT 5
73278: PPUSH
73279: LD_INT 4
73281: PPUSH
73282: CALL_OW 273
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: ST_TO_ADDR
// for i = tmp downto 1 do
73299: LD_ADDR_VAR 0 4
73303: PUSH
73304: DOUBLE
73305: LD_VAR 0 6
73309: INC
73310: ST_TO_ADDR
73311: LD_INT 1
73313: PUSH
73314: FOR_DOWNTO
73315: IFFALSE 73416
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73317: LD_VAR 0 6
73321: PUSH
73322: LD_VAR 0 4
73326: ARRAY
73327: PUSH
73328: LD_INT 1
73330: ARRAY
73331: PPUSH
73332: LD_VAR 0 6
73336: PUSH
73337: LD_VAR 0 4
73341: ARRAY
73342: PUSH
73343: LD_INT 2
73345: ARRAY
73346: PPUSH
73347: CALL_OW 488
73351: NOT
73352: PUSH
73353: LD_VAR 0 6
73357: PUSH
73358: LD_VAR 0 4
73362: ARRAY
73363: PUSH
73364: LD_INT 1
73366: ARRAY
73367: PPUSH
73368: LD_VAR 0 6
73372: PUSH
73373: LD_VAR 0 4
73377: ARRAY
73378: PUSH
73379: LD_INT 2
73381: ARRAY
73382: PPUSH
73383: CALL_OW 428
73387: PUSH
73388: LD_INT 0
73390: NONEQUAL
73391: OR
73392: IFFALSE 73414
// tmp := Delete ( tmp , i ) ;
73394: LD_ADDR_VAR 0 6
73398: PUSH
73399: LD_VAR 0 6
73403: PPUSH
73404: LD_VAR 0 4
73408: PPUSH
73409: CALL_OW 3
73413: ST_TO_ADDR
73414: GO 73314
73416: POP
73417: POP
// j := GetClosestHex ( unit , tmp ) ;
73418: LD_ADDR_VAR 0 5
73422: PUSH
73423: LD_VAR 0 1
73427: PPUSH
73428: LD_VAR 0 6
73432: PPUSH
73433: CALL 72718 0 2
73437: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73438: LD_VAR 0 1
73442: PPUSH
73443: LD_VAR 0 5
73447: PUSH
73448: LD_INT 1
73450: ARRAY
73451: PPUSH
73452: LD_VAR 0 5
73456: PUSH
73457: LD_INT 2
73459: ARRAY
73460: PPUSH
73461: CALL_OW 111
// end ;
73465: LD_VAR 0 3
73469: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73470: LD_INT 0
73472: PPUSH
73473: PPUSH
73474: PPUSH
// uc_side = 0 ;
73475: LD_ADDR_OWVAR 20
73479: PUSH
73480: LD_INT 0
73482: ST_TO_ADDR
// uc_nation = 0 ;
73483: LD_ADDR_OWVAR 21
73487: PUSH
73488: LD_INT 0
73490: ST_TO_ADDR
// InitHc_All ( ) ;
73491: CALL_OW 584
// InitVc ;
73495: CALL_OW 20
// if mastodonts then
73499: LD_VAR 0 6
73503: IFFALSE 73570
// for i = 1 to mastodonts do
73505: LD_ADDR_VAR 0 11
73509: PUSH
73510: DOUBLE
73511: LD_INT 1
73513: DEC
73514: ST_TO_ADDR
73515: LD_VAR 0 6
73519: PUSH
73520: FOR_TO
73521: IFFALSE 73568
// begin vc_chassis := 31 ;
73523: LD_ADDR_OWVAR 37
73527: PUSH
73528: LD_INT 31
73530: ST_TO_ADDR
// vc_control := control_rider ;
73531: LD_ADDR_OWVAR 38
73535: PUSH
73536: LD_INT 4
73538: ST_TO_ADDR
// animal := CreateVehicle ;
73539: LD_ADDR_VAR 0 12
73543: PUSH
73544: CALL_OW 45
73548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73549: LD_VAR 0 12
73553: PPUSH
73554: LD_VAR 0 8
73558: PPUSH
73559: LD_INT 0
73561: PPUSH
73562: CALL 75758 0 3
// end ;
73566: GO 73520
73568: POP
73569: POP
// if horses then
73570: LD_VAR 0 5
73574: IFFALSE 73641
// for i = 1 to horses do
73576: LD_ADDR_VAR 0 11
73580: PUSH
73581: DOUBLE
73582: LD_INT 1
73584: DEC
73585: ST_TO_ADDR
73586: LD_VAR 0 5
73590: PUSH
73591: FOR_TO
73592: IFFALSE 73639
// begin hc_class := 21 ;
73594: LD_ADDR_OWVAR 28
73598: PUSH
73599: LD_INT 21
73601: ST_TO_ADDR
// hc_gallery :=  ;
73602: LD_ADDR_OWVAR 33
73606: PUSH
73607: LD_STRING 
73609: ST_TO_ADDR
// animal := CreateHuman ;
73610: LD_ADDR_VAR 0 12
73614: PUSH
73615: CALL_OW 44
73619: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73620: LD_VAR 0 12
73624: PPUSH
73625: LD_VAR 0 8
73629: PPUSH
73630: LD_INT 0
73632: PPUSH
73633: CALL 75758 0 3
// end ;
73637: GO 73591
73639: POP
73640: POP
// if birds then
73641: LD_VAR 0 1
73645: IFFALSE 73712
// for i = 1 to birds do
73647: LD_ADDR_VAR 0 11
73651: PUSH
73652: DOUBLE
73653: LD_INT 1
73655: DEC
73656: ST_TO_ADDR
73657: LD_VAR 0 1
73661: PUSH
73662: FOR_TO
73663: IFFALSE 73710
// begin hc_class = 18 ;
73665: LD_ADDR_OWVAR 28
73669: PUSH
73670: LD_INT 18
73672: ST_TO_ADDR
// hc_gallery =  ;
73673: LD_ADDR_OWVAR 33
73677: PUSH
73678: LD_STRING 
73680: ST_TO_ADDR
// animal := CreateHuman ;
73681: LD_ADDR_VAR 0 12
73685: PUSH
73686: CALL_OW 44
73690: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73691: LD_VAR 0 12
73695: PPUSH
73696: LD_VAR 0 8
73700: PPUSH
73701: LD_INT 0
73703: PPUSH
73704: CALL 75758 0 3
// end ;
73708: GO 73662
73710: POP
73711: POP
// if tigers then
73712: LD_VAR 0 2
73716: IFFALSE 73800
// for i = 1 to tigers do
73718: LD_ADDR_VAR 0 11
73722: PUSH
73723: DOUBLE
73724: LD_INT 1
73726: DEC
73727: ST_TO_ADDR
73728: LD_VAR 0 2
73732: PUSH
73733: FOR_TO
73734: IFFALSE 73798
// begin hc_class = class_tiger ;
73736: LD_ADDR_OWVAR 28
73740: PUSH
73741: LD_INT 14
73743: ST_TO_ADDR
// hc_gallery =  ;
73744: LD_ADDR_OWVAR 33
73748: PUSH
73749: LD_STRING 
73751: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73752: LD_ADDR_OWVAR 35
73756: PUSH
73757: LD_INT 7
73759: NEG
73760: PPUSH
73761: LD_INT 7
73763: PPUSH
73764: CALL_OW 12
73768: ST_TO_ADDR
// animal := CreateHuman ;
73769: LD_ADDR_VAR 0 12
73773: PUSH
73774: CALL_OW 44
73778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73779: LD_VAR 0 12
73783: PPUSH
73784: LD_VAR 0 8
73788: PPUSH
73789: LD_INT 0
73791: PPUSH
73792: CALL 75758 0 3
// end ;
73796: GO 73733
73798: POP
73799: POP
// if apemans then
73800: LD_VAR 0 3
73804: IFFALSE 73927
// for i = 1 to apemans do
73806: LD_ADDR_VAR 0 11
73810: PUSH
73811: DOUBLE
73812: LD_INT 1
73814: DEC
73815: ST_TO_ADDR
73816: LD_VAR 0 3
73820: PUSH
73821: FOR_TO
73822: IFFALSE 73925
// begin hc_class = class_apeman ;
73824: LD_ADDR_OWVAR 28
73828: PUSH
73829: LD_INT 12
73831: ST_TO_ADDR
// hc_gallery =  ;
73832: LD_ADDR_OWVAR 33
73836: PUSH
73837: LD_STRING 
73839: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
73840: LD_ADDR_OWVAR 35
73844: PUSH
73845: LD_INT 5
73847: NEG
73848: PPUSH
73849: LD_INT 5
73851: PPUSH
73852: CALL_OW 12
73856: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73857: LD_ADDR_OWVAR 31
73861: PUSH
73862: LD_INT 1
73864: PPUSH
73865: LD_INT 3
73867: PPUSH
73868: CALL_OW 12
73872: PUSH
73873: LD_INT 1
73875: PPUSH
73876: LD_INT 3
73878: PPUSH
73879: CALL_OW 12
73883: PUSH
73884: LD_INT 0
73886: PUSH
73887: LD_INT 0
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: ST_TO_ADDR
// animal := CreateHuman ;
73896: LD_ADDR_VAR 0 12
73900: PUSH
73901: CALL_OW 44
73905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73906: LD_VAR 0 12
73910: PPUSH
73911: LD_VAR 0 8
73915: PPUSH
73916: LD_INT 0
73918: PPUSH
73919: CALL 75758 0 3
// end ;
73923: GO 73821
73925: POP
73926: POP
// if enchidnas then
73927: LD_VAR 0 4
73931: IFFALSE 73998
// for i = 1 to enchidnas do
73933: LD_ADDR_VAR 0 11
73937: PUSH
73938: DOUBLE
73939: LD_INT 1
73941: DEC
73942: ST_TO_ADDR
73943: LD_VAR 0 4
73947: PUSH
73948: FOR_TO
73949: IFFALSE 73996
// begin hc_class = 13 ;
73951: LD_ADDR_OWVAR 28
73955: PUSH
73956: LD_INT 13
73958: ST_TO_ADDR
// hc_gallery =  ;
73959: LD_ADDR_OWVAR 33
73963: PUSH
73964: LD_STRING 
73966: ST_TO_ADDR
// animal := CreateHuman ;
73967: LD_ADDR_VAR 0 12
73971: PUSH
73972: CALL_OW 44
73976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73977: LD_VAR 0 12
73981: PPUSH
73982: LD_VAR 0 8
73986: PPUSH
73987: LD_INT 0
73989: PPUSH
73990: CALL 75758 0 3
// end ;
73994: GO 73948
73996: POP
73997: POP
// if fishes then
73998: LD_VAR 0 7
74002: IFFALSE 74069
// for i = 1 to fishes do
74004: LD_ADDR_VAR 0 11
74008: PUSH
74009: DOUBLE
74010: LD_INT 1
74012: DEC
74013: ST_TO_ADDR
74014: LD_VAR 0 7
74018: PUSH
74019: FOR_TO
74020: IFFALSE 74067
// begin hc_class = 20 ;
74022: LD_ADDR_OWVAR 28
74026: PUSH
74027: LD_INT 20
74029: ST_TO_ADDR
// hc_gallery =  ;
74030: LD_ADDR_OWVAR 33
74034: PUSH
74035: LD_STRING 
74037: ST_TO_ADDR
// animal := CreateHuman ;
74038: LD_ADDR_VAR 0 12
74042: PUSH
74043: CALL_OW 44
74047: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74048: LD_VAR 0 12
74052: PPUSH
74053: LD_VAR 0 9
74057: PPUSH
74058: LD_INT 0
74060: PPUSH
74061: CALL 75758 0 3
// end ;
74065: GO 74019
74067: POP
74068: POP
// end ;
74069: LD_VAR 0 10
74073: RET
// export function WantHeal ( sci , unit ) ; begin
74074: LD_INT 0
74076: PPUSH
// if GetTaskList ( sci ) > 0 then
74077: LD_VAR 0 1
74081: PPUSH
74082: CALL_OW 437
74086: PUSH
74087: LD_INT 0
74089: GREATER
74090: IFFALSE 74160
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74092: LD_VAR 0 1
74096: PPUSH
74097: CALL_OW 437
74101: PUSH
74102: LD_INT 1
74104: ARRAY
74105: PUSH
74106: LD_INT 1
74108: ARRAY
74109: PUSH
74110: LD_STRING l
74112: EQUAL
74113: PUSH
74114: LD_VAR 0 1
74118: PPUSH
74119: CALL_OW 437
74123: PUSH
74124: LD_INT 1
74126: ARRAY
74127: PUSH
74128: LD_INT 4
74130: ARRAY
74131: PUSH
74132: LD_VAR 0 2
74136: EQUAL
74137: AND
74138: IFFALSE 74150
// result := true else
74140: LD_ADDR_VAR 0 3
74144: PUSH
74145: LD_INT 1
74147: ST_TO_ADDR
74148: GO 74158
// result := false ;
74150: LD_ADDR_VAR 0 3
74154: PUSH
74155: LD_INT 0
74157: ST_TO_ADDR
// end else
74158: GO 74168
// result := false ;
74160: LD_ADDR_VAR 0 3
74164: PUSH
74165: LD_INT 0
74167: ST_TO_ADDR
// end ;
74168: LD_VAR 0 3
74172: RET
// export function HealTarget ( sci ) ; begin
74173: LD_INT 0
74175: PPUSH
// if not sci then
74176: LD_VAR 0 1
74180: NOT
74181: IFFALSE 74185
// exit ;
74183: GO 74250
// result := 0 ;
74185: LD_ADDR_VAR 0 2
74189: PUSH
74190: LD_INT 0
74192: ST_TO_ADDR
// if GetTaskList ( sci ) then
74193: LD_VAR 0 1
74197: PPUSH
74198: CALL_OW 437
74202: IFFALSE 74250
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74204: LD_VAR 0 1
74208: PPUSH
74209: CALL_OW 437
74213: PUSH
74214: LD_INT 1
74216: ARRAY
74217: PUSH
74218: LD_INT 1
74220: ARRAY
74221: PUSH
74222: LD_STRING l
74224: EQUAL
74225: IFFALSE 74250
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74227: LD_ADDR_VAR 0 2
74231: PUSH
74232: LD_VAR 0 1
74236: PPUSH
74237: CALL_OW 437
74241: PUSH
74242: LD_INT 1
74244: ARRAY
74245: PUSH
74246: LD_INT 4
74248: ARRAY
74249: ST_TO_ADDR
// end ;
74250: LD_VAR 0 2
74254: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74255: LD_INT 0
74257: PPUSH
74258: PPUSH
74259: PPUSH
74260: PPUSH
// if not base_units then
74261: LD_VAR 0 1
74265: NOT
74266: IFFALSE 74270
// exit ;
74268: GO 74357
// result := false ;
74270: LD_ADDR_VAR 0 2
74274: PUSH
74275: LD_INT 0
74277: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74278: LD_ADDR_VAR 0 5
74282: PUSH
74283: LD_VAR 0 1
74287: PPUSH
74288: LD_INT 21
74290: PUSH
74291: LD_INT 3
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PPUSH
74298: CALL_OW 72
74302: ST_TO_ADDR
// if not tmp then
74303: LD_VAR 0 5
74307: NOT
74308: IFFALSE 74312
// exit ;
74310: GO 74357
// for i in tmp do
74312: LD_ADDR_VAR 0 3
74316: PUSH
74317: LD_VAR 0 5
74321: PUSH
74322: FOR_IN
74323: IFFALSE 74355
// begin result := EnemyInRange ( i , 22 ) ;
74325: LD_ADDR_VAR 0 2
74329: PUSH
74330: LD_VAR 0 3
74334: PPUSH
74335: LD_INT 22
74337: PPUSH
74338: CALL 72593 0 2
74342: ST_TO_ADDR
// if result then
74343: LD_VAR 0 2
74347: IFFALSE 74353
// exit ;
74349: POP
74350: POP
74351: GO 74357
// end ;
74353: GO 74322
74355: POP
74356: POP
// end ;
74357: LD_VAR 0 2
74361: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
74362: LD_INT 0
74364: PPUSH
74365: PPUSH
// if not units then
74366: LD_VAR 0 1
74370: NOT
74371: IFFALSE 74375
// exit ;
74373: GO 74445
// result := [ ] ;
74375: LD_ADDR_VAR 0 3
74379: PUSH
74380: EMPTY
74381: ST_TO_ADDR
// for i in units do
74382: LD_ADDR_VAR 0 4
74386: PUSH
74387: LD_VAR 0 1
74391: PUSH
74392: FOR_IN
74393: IFFALSE 74443
// if GetTag ( i ) = tag then
74395: LD_VAR 0 4
74399: PPUSH
74400: CALL_OW 110
74404: PUSH
74405: LD_VAR 0 2
74409: EQUAL
74410: IFFALSE 74441
// result := Insert ( result , result + 1 , i ) ;
74412: LD_ADDR_VAR 0 3
74416: PUSH
74417: LD_VAR 0 3
74421: PPUSH
74422: LD_VAR 0 3
74426: PUSH
74427: LD_INT 1
74429: PLUS
74430: PPUSH
74431: LD_VAR 0 4
74435: PPUSH
74436: CALL_OW 2
74440: ST_TO_ADDR
74441: GO 74392
74443: POP
74444: POP
// end ;
74445: LD_VAR 0 3
74449: RET
// export function IsDriver ( un ) ; begin
74450: LD_INT 0
74452: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74453: LD_ADDR_VAR 0 2
74457: PUSH
74458: LD_VAR 0 1
74462: PUSH
74463: LD_INT 55
74465: PUSH
74466: EMPTY
74467: LIST
74468: PPUSH
74469: CALL_OW 69
74473: IN
74474: ST_TO_ADDR
// end ;
74475: LD_VAR 0 2
74479: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74480: LD_INT 0
74482: PPUSH
74483: PPUSH
// list := [ ] ;
74484: LD_ADDR_VAR 0 5
74488: PUSH
74489: EMPTY
74490: ST_TO_ADDR
// case d of 0 :
74491: LD_VAR 0 3
74495: PUSH
74496: LD_INT 0
74498: DOUBLE
74499: EQUAL
74500: IFTRUE 74504
74502: GO 74637
74504: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74505: LD_ADDR_VAR 0 5
74509: PUSH
74510: LD_VAR 0 1
74514: PUSH
74515: LD_INT 4
74517: MINUS
74518: PUSH
74519: LD_VAR 0 2
74523: PUSH
74524: LD_INT 4
74526: MINUS
74527: PUSH
74528: LD_INT 2
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: LIST
74535: PUSH
74536: LD_VAR 0 1
74540: PUSH
74541: LD_INT 3
74543: MINUS
74544: PUSH
74545: LD_VAR 0 2
74549: PUSH
74550: LD_INT 1
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: LIST
74557: PUSH
74558: LD_VAR 0 1
74562: PUSH
74563: LD_INT 4
74565: PLUS
74566: PUSH
74567: LD_VAR 0 2
74571: PUSH
74572: LD_INT 4
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: LIST
74579: PUSH
74580: LD_VAR 0 1
74584: PUSH
74585: LD_INT 3
74587: PLUS
74588: PUSH
74589: LD_VAR 0 2
74593: PUSH
74594: LD_INT 3
74596: PLUS
74597: PUSH
74598: LD_INT 5
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: LIST
74605: PUSH
74606: LD_VAR 0 1
74610: PUSH
74611: LD_VAR 0 2
74615: PUSH
74616: LD_INT 4
74618: PLUS
74619: PUSH
74620: LD_INT 0
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: LIST
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: ST_TO_ADDR
// end ; 1 :
74635: GO 75335
74637: LD_INT 1
74639: DOUBLE
74640: EQUAL
74641: IFTRUE 74645
74643: GO 74778
74645: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74646: LD_ADDR_VAR 0 5
74650: PUSH
74651: LD_VAR 0 1
74655: PUSH
74656: LD_VAR 0 2
74660: PUSH
74661: LD_INT 4
74663: MINUS
74664: PUSH
74665: LD_INT 3
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: LIST
74672: PUSH
74673: LD_VAR 0 1
74677: PUSH
74678: LD_INT 3
74680: MINUS
74681: PUSH
74682: LD_VAR 0 2
74686: PUSH
74687: LD_INT 3
74689: MINUS
74690: PUSH
74691: LD_INT 2
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: LIST
74698: PUSH
74699: LD_VAR 0 1
74703: PUSH
74704: LD_INT 4
74706: MINUS
74707: PUSH
74708: LD_VAR 0 2
74712: PUSH
74713: LD_INT 1
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: LIST
74720: PUSH
74721: LD_VAR 0 1
74725: PUSH
74726: LD_VAR 0 2
74730: PUSH
74731: LD_INT 3
74733: PLUS
74734: PUSH
74735: LD_INT 0
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: LIST
74742: PUSH
74743: LD_VAR 0 1
74747: PUSH
74748: LD_INT 4
74750: PLUS
74751: PUSH
74752: LD_VAR 0 2
74756: PUSH
74757: LD_INT 4
74759: PLUS
74760: PUSH
74761: LD_INT 5
74763: PUSH
74764: EMPTY
74765: LIST
74766: LIST
74767: LIST
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: LIST
74775: ST_TO_ADDR
// end ; 2 :
74776: GO 75335
74778: LD_INT 2
74780: DOUBLE
74781: EQUAL
74782: IFTRUE 74786
74784: GO 74915
74786: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74787: LD_ADDR_VAR 0 5
74791: PUSH
74792: LD_VAR 0 1
74796: PUSH
74797: LD_VAR 0 2
74801: PUSH
74802: LD_INT 3
74804: MINUS
74805: PUSH
74806: LD_INT 3
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: LIST
74813: PUSH
74814: LD_VAR 0 1
74818: PUSH
74819: LD_INT 4
74821: PLUS
74822: PUSH
74823: LD_VAR 0 2
74827: PUSH
74828: LD_INT 4
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: LIST
74835: PUSH
74836: LD_VAR 0 1
74840: PUSH
74841: LD_VAR 0 2
74845: PUSH
74846: LD_INT 4
74848: PLUS
74849: PUSH
74850: LD_INT 0
74852: PUSH
74853: EMPTY
74854: LIST
74855: LIST
74856: LIST
74857: PUSH
74858: LD_VAR 0 1
74862: PUSH
74863: LD_INT 3
74865: MINUS
74866: PUSH
74867: LD_VAR 0 2
74871: PUSH
74872: LD_INT 1
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: LIST
74879: PUSH
74880: LD_VAR 0 1
74884: PUSH
74885: LD_INT 4
74887: MINUS
74888: PUSH
74889: LD_VAR 0 2
74893: PUSH
74894: LD_INT 4
74896: MINUS
74897: PUSH
74898: LD_INT 2
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: LIST
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: ST_TO_ADDR
// end ; 3 :
74913: GO 75335
74915: LD_INT 3
74917: DOUBLE
74918: EQUAL
74919: IFTRUE 74923
74921: GO 75056
74923: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74924: LD_ADDR_VAR 0 5
74928: PUSH
74929: LD_VAR 0 1
74933: PUSH
74934: LD_INT 3
74936: PLUS
74937: PUSH
74938: LD_VAR 0 2
74942: PUSH
74943: LD_INT 4
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: LIST
74950: PUSH
74951: LD_VAR 0 1
74955: PUSH
74956: LD_INT 4
74958: PLUS
74959: PUSH
74960: LD_VAR 0 2
74964: PUSH
74965: LD_INT 4
74967: PLUS
74968: PUSH
74969: LD_INT 5
74971: PUSH
74972: EMPTY
74973: LIST
74974: LIST
74975: LIST
74976: PUSH
74977: LD_VAR 0 1
74981: PUSH
74982: LD_INT 4
74984: MINUS
74985: PUSH
74986: LD_VAR 0 2
74990: PUSH
74991: LD_INT 1
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: LIST
74998: PUSH
74999: LD_VAR 0 1
75003: PUSH
75004: LD_VAR 0 2
75008: PUSH
75009: LD_INT 4
75011: MINUS
75012: PUSH
75013: LD_INT 3
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: LIST
75020: PUSH
75021: LD_VAR 0 1
75025: PUSH
75026: LD_INT 3
75028: MINUS
75029: PUSH
75030: LD_VAR 0 2
75034: PUSH
75035: LD_INT 3
75037: MINUS
75038: PUSH
75039: LD_INT 2
75041: PUSH
75042: EMPTY
75043: LIST
75044: LIST
75045: LIST
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: ST_TO_ADDR
// end ; 4 :
75054: GO 75335
75056: LD_INT 4
75058: DOUBLE
75059: EQUAL
75060: IFTRUE 75064
75062: GO 75197
75064: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75065: LD_ADDR_VAR 0 5
75069: PUSH
75070: LD_VAR 0 1
75074: PUSH
75075: LD_VAR 0 2
75079: PUSH
75080: LD_INT 4
75082: PLUS
75083: PUSH
75084: LD_INT 0
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: LIST
75091: PUSH
75092: LD_VAR 0 1
75096: PUSH
75097: LD_INT 3
75099: PLUS
75100: PUSH
75101: LD_VAR 0 2
75105: PUSH
75106: LD_INT 3
75108: PLUS
75109: PUSH
75110: LD_INT 5
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: LIST
75117: PUSH
75118: LD_VAR 0 1
75122: PUSH
75123: LD_INT 4
75125: PLUS
75126: PUSH
75127: LD_VAR 0 2
75131: PUSH
75132: LD_INT 4
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: LIST
75139: PUSH
75140: LD_VAR 0 1
75144: PUSH
75145: LD_VAR 0 2
75149: PUSH
75150: LD_INT 3
75152: MINUS
75153: PUSH
75154: LD_INT 3
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: LIST
75161: PUSH
75162: LD_VAR 0 1
75166: PUSH
75167: LD_INT 4
75169: MINUS
75170: PUSH
75171: LD_VAR 0 2
75175: PUSH
75176: LD_INT 4
75178: MINUS
75179: PUSH
75180: LD_INT 2
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: LIST
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: ST_TO_ADDR
// end ; 5 :
75195: GO 75335
75197: LD_INT 5
75199: DOUBLE
75200: EQUAL
75201: IFTRUE 75205
75203: GO 75334
75205: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75206: LD_ADDR_VAR 0 5
75210: PUSH
75211: LD_VAR 0 1
75215: PUSH
75216: LD_INT 4
75218: MINUS
75219: PUSH
75220: LD_VAR 0 2
75224: PUSH
75225: LD_INT 1
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: LIST
75232: PUSH
75233: LD_VAR 0 1
75237: PUSH
75238: LD_VAR 0 2
75242: PUSH
75243: LD_INT 4
75245: MINUS
75246: PUSH
75247: LD_INT 3
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: LIST
75254: PUSH
75255: LD_VAR 0 1
75259: PUSH
75260: LD_INT 4
75262: PLUS
75263: PUSH
75264: LD_VAR 0 2
75268: PUSH
75269: LD_INT 4
75271: PLUS
75272: PUSH
75273: LD_INT 5
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: LIST
75280: PUSH
75281: LD_VAR 0 1
75285: PUSH
75286: LD_INT 3
75288: PLUS
75289: PUSH
75290: LD_VAR 0 2
75294: PUSH
75295: LD_INT 4
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: LIST
75302: PUSH
75303: LD_VAR 0 1
75307: PUSH
75308: LD_VAR 0 2
75312: PUSH
75313: LD_INT 3
75315: PLUS
75316: PUSH
75317: LD_INT 0
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: LIST
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: ST_TO_ADDR
// end ; end ;
75332: GO 75335
75334: POP
// result := list ;
75335: LD_ADDR_VAR 0 4
75339: PUSH
75340: LD_VAR 0 5
75344: ST_TO_ADDR
// end ;
75345: LD_VAR 0 4
75349: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75350: LD_INT 0
75352: PPUSH
75353: PPUSH
75354: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75355: LD_VAR 0 1
75359: NOT
75360: PUSH
75361: LD_VAR 0 2
75365: PUSH
75366: LD_INT 1
75368: PUSH
75369: LD_INT 2
75371: PUSH
75372: LD_INT 3
75374: PUSH
75375: LD_INT 4
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: IN
75384: NOT
75385: OR
75386: IFFALSE 75390
// exit ;
75388: GO 75482
// tmp := [ ] ;
75390: LD_ADDR_VAR 0 5
75394: PUSH
75395: EMPTY
75396: ST_TO_ADDR
// for i in units do
75397: LD_ADDR_VAR 0 4
75401: PUSH
75402: LD_VAR 0 1
75406: PUSH
75407: FOR_IN
75408: IFFALSE 75451
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75410: LD_ADDR_VAR 0 5
75414: PUSH
75415: LD_VAR 0 5
75419: PPUSH
75420: LD_VAR 0 5
75424: PUSH
75425: LD_INT 1
75427: PLUS
75428: PPUSH
75429: LD_VAR 0 4
75433: PPUSH
75434: LD_VAR 0 2
75438: PPUSH
75439: CALL_OW 259
75443: PPUSH
75444: CALL_OW 2
75448: ST_TO_ADDR
75449: GO 75407
75451: POP
75452: POP
// if not tmp then
75453: LD_VAR 0 5
75457: NOT
75458: IFFALSE 75462
// exit ;
75460: GO 75482
// result := SortListByListDesc ( units , tmp ) ;
75462: LD_ADDR_VAR 0 3
75466: PUSH
75467: LD_VAR 0 1
75471: PPUSH
75472: LD_VAR 0 5
75476: PPUSH
75477: CALL_OW 77
75481: ST_TO_ADDR
// end ;
75482: LD_VAR 0 3
75486: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75487: LD_INT 0
75489: PPUSH
75490: PPUSH
75491: PPUSH
// result := false ;
75492: LD_ADDR_VAR 0 3
75496: PUSH
75497: LD_INT 0
75499: ST_TO_ADDR
// x := GetX ( building ) ;
75500: LD_ADDR_VAR 0 4
75504: PUSH
75505: LD_VAR 0 2
75509: PPUSH
75510: CALL_OW 250
75514: ST_TO_ADDR
// y := GetY ( building ) ;
75515: LD_ADDR_VAR 0 5
75519: PUSH
75520: LD_VAR 0 2
75524: PPUSH
75525: CALL_OW 251
75529: ST_TO_ADDR
// if not building or not x or not y then
75530: LD_VAR 0 2
75534: NOT
75535: PUSH
75536: LD_VAR 0 4
75540: NOT
75541: OR
75542: PUSH
75543: LD_VAR 0 5
75547: NOT
75548: OR
75549: IFFALSE 75553
// exit ;
75551: GO 75645
// if GetTaskList ( unit ) then
75553: LD_VAR 0 1
75557: PPUSH
75558: CALL_OW 437
75562: IFFALSE 75645
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75564: LD_STRING e
75566: PUSH
75567: LD_VAR 0 1
75571: PPUSH
75572: CALL_OW 437
75576: PUSH
75577: LD_INT 1
75579: ARRAY
75580: PUSH
75581: LD_INT 1
75583: ARRAY
75584: EQUAL
75585: PUSH
75586: LD_VAR 0 4
75590: PUSH
75591: LD_VAR 0 1
75595: PPUSH
75596: CALL_OW 437
75600: PUSH
75601: LD_INT 1
75603: ARRAY
75604: PUSH
75605: LD_INT 2
75607: ARRAY
75608: EQUAL
75609: AND
75610: PUSH
75611: LD_VAR 0 5
75615: PUSH
75616: LD_VAR 0 1
75620: PPUSH
75621: CALL_OW 437
75625: PUSH
75626: LD_INT 1
75628: ARRAY
75629: PUSH
75630: LD_INT 3
75632: ARRAY
75633: EQUAL
75634: AND
75635: IFFALSE 75645
// result := true end ;
75637: LD_ADDR_VAR 0 3
75641: PUSH
75642: LD_INT 1
75644: ST_TO_ADDR
// end ;
75645: LD_VAR 0 3
75649: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75650: LD_INT 0
75652: PPUSH
// result := false ;
75653: LD_ADDR_VAR 0 4
75657: PUSH
75658: LD_INT 0
75660: ST_TO_ADDR
// if GetTaskList ( unit ) then
75661: LD_VAR 0 1
75665: PPUSH
75666: CALL_OW 437
75670: IFFALSE 75753
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75672: LD_STRING M
75674: PUSH
75675: LD_VAR 0 1
75679: PPUSH
75680: CALL_OW 437
75684: PUSH
75685: LD_INT 1
75687: ARRAY
75688: PUSH
75689: LD_INT 1
75691: ARRAY
75692: EQUAL
75693: PUSH
75694: LD_VAR 0 2
75698: PUSH
75699: LD_VAR 0 1
75703: PPUSH
75704: CALL_OW 437
75708: PUSH
75709: LD_INT 1
75711: ARRAY
75712: PUSH
75713: LD_INT 2
75715: ARRAY
75716: EQUAL
75717: AND
75718: PUSH
75719: LD_VAR 0 3
75723: PUSH
75724: LD_VAR 0 1
75728: PPUSH
75729: CALL_OW 437
75733: PUSH
75734: LD_INT 1
75736: ARRAY
75737: PUSH
75738: LD_INT 3
75740: ARRAY
75741: EQUAL
75742: AND
75743: IFFALSE 75753
// result := true ;
75745: LD_ADDR_VAR 0 4
75749: PUSH
75750: LD_INT 1
75752: ST_TO_ADDR
// end ; end ;
75753: LD_VAR 0 4
75757: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75758: LD_INT 0
75760: PPUSH
75761: PPUSH
75762: PPUSH
75763: PPUSH
// if not unit or not area then
75764: LD_VAR 0 1
75768: NOT
75769: PUSH
75770: LD_VAR 0 2
75774: NOT
75775: OR
75776: IFFALSE 75780
// exit ;
75778: GO 75944
// tmp := AreaToList ( area , i ) ;
75780: LD_ADDR_VAR 0 6
75784: PUSH
75785: LD_VAR 0 2
75789: PPUSH
75790: LD_VAR 0 5
75794: PPUSH
75795: CALL_OW 517
75799: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75800: LD_ADDR_VAR 0 5
75804: PUSH
75805: DOUBLE
75806: LD_INT 1
75808: DEC
75809: ST_TO_ADDR
75810: LD_VAR 0 6
75814: PUSH
75815: LD_INT 1
75817: ARRAY
75818: PUSH
75819: FOR_TO
75820: IFFALSE 75942
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75822: LD_ADDR_VAR 0 7
75826: PUSH
75827: LD_VAR 0 6
75831: PUSH
75832: LD_INT 1
75834: ARRAY
75835: PUSH
75836: LD_VAR 0 5
75840: ARRAY
75841: PUSH
75842: LD_VAR 0 6
75846: PUSH
75847: LD_INT 2
75849: ARRAY
75850: PUSH
75851: LD_VAR 0 5
75855: ARRAY
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75861: LD_VAR 0 7
75865: PUSH
75866: LD_INT 1
75868: ARRAY
75869: PPUSH
75870: LD_VAR 0 7
75874: PUSH
75875: LD_INT 2
75877: ARRAY
75878: PPUSH
75879: CALL_OW 428
75883: PUSH
75884: LD_INT 0
75886: EQUAL
75887: IFFALSE 75940
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75889: LD_VAR 0 1
75893: PPUSH
75894: LD_VAR 0 7
75898: PUSH
75899: LD_INT 1
75901: ARRAY
75902: PPUSH
75903: LD_VAR 0 7
75907: PUSH
75908: LD_INT 2
75910: ARRAY
75911: PPUSH
75912: LD_VAR 0 3
75916: PPUSH
75917: CALL_OW 48
// result := IsPlaced ( unit ) ;
75921: LD_ADDR_VAR 0 4
75925: PUSH
75926: LD_VAR 0 1
75930: PPUSH
75931: CALL_OW 305
75935: ST_TO_ADDR
// exit ;
75936: POP
75937: POP
75938: GO 75944
// end ; end ;
75940: GO 75819
75942: POP
75943: POP
// end ;
75944: LD_VAR 0 4
75948: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75949: LD_INT 0
75951: PPUSH
75952: PPUSH
75953: PPUSH
// if not side or side > 8 then
75954: LD_VAR 0 1
75958: NOT
75959: PUSH
75960: LD_VAR 0 1
75964: PUSH
75965: LD_INT 8
75967: GREATER
75968: OR
75969: IFFALSE 75973
// exit ;
75971: GO 76160
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75973: LD_ADDR_VAR 0 4
75977: PUSH
75978: LD_INT 22
75980: PUSH
75981: LD_VAR 0 1
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: PUSH
75990: LD_INT 21
75992: PUSH
75993: LD_INT 3
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: PPUSH
76004: CALL_OW 69
76008: ST_TO_ADDR
// if not tmp then
76009: LD_VAR 0 4
76013: NOT
76014: IFFALSE 76018
// exit ;
76016: GO 76160
// enable_addtolog := true ;
76018: LD_ADDR_OWVAR 81
76022: PUSH
76023: LD_INT 1
76025: ST_TO_ADDR
// AddToLog ( [ ) ;
76026: LD_STRING [
76028: PPUSH
76029: CALL_OW 561
// for i in tmp do
76033: LD_ADDR_VAR 0 3
76037: PUSH
76038: LD_VAR 0 4
76042: PUSH
76043: FOR_IN
76044: IFFALSE 76151
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76046: LD_STRING [
76048: PUSH
76049: LD_VAR 0 3
76053: PPUSH
76054: CALL_OW 266
76058: STR
76059: PUSH
76060: LD_STRING , 
76062: STR
76063: PUSH
76064: LD_VAR 0 3
76068: PPUSH
76069: CALL_OW 250
76073: STR
76074: PUSH
76075: LD_STRING , 
76077: STR
76078: PUSH
76079: LD_VAR 0 3
76083: PPUSH
76084: CALL_OW 251
76088: STR
76089: PUSH
76090: LD_STRING , 
76092: STR
76093: PUSH
76094: LD_VAR 0 3
76098: PPUSH
76099: CALL_OW 254
76103: STR
76104: PUSH
76105: LD_STRING , 
76107: STR
76108: PUSH
76109: LD_VAR 0 3
76113: PPUSH
76114: LD_INT 1
76116: PPUSH
76117: CALL_OW 268
76121: STR
76122: PUSH
76123: LD_STRING , 
76125: STR
76126: PUSH
76127: LD_VAR 0 3
76131: PPUSH
76132: LD_INT 2
76134: PPUSH
76135: CALL_OW 268
76139: STR
76140: PUSH
76141: LD_STRING ],
76143: STR
76144: PPUSH
76145: CALL_OW 561
// end ;
76149: GO 76043
76151: POP
76152: POP
// AddToLog ( ]; ) ;
76153: LD_STRING ];
76155: PPUSH
76156: CALL_OW 561
// end ;
76160: LD_VAR 0 2
76164: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76165: LD_INT 0
76167: PPUSH
76168: PPUSH
76169: PPUSH
76170: PPUSH
76171: PPUSH
// if not area or not rate or not max then
76172: LD_VAR 0 1
76176: NOT
76177: PUSH
76178: LD_VAR 0 2
76182: NOT
76183: OR
76184: PUSH
76185: LD_VAR 0 4
76189: NOT
76190: OR
76191: IFFALSE 76195
// exit ;
76193: GO 76387
// while 1 do
76195: LD_INT 1
76197: IFFALSE 76387
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76199: LD_ADDR_VAR 0 9
76203: PUSH
76204: LD_VAR 0 1
76208: PPUSH
76209: LD_INT 1
76211: PPUSH
76212: CALL_OW 287
76216: PUSH
76217: LD_INT 10
76219: MUL
76220: ST_TO_ADDR
// r := rate / 10 ;
76221: LD_ADDR_VAR 0 7
76225: PUSH
76226: LD_VAR 0 2
76230: PUSH
76231: LD_INT 10
76233: DIVREAL
76234: ST_TO_ADDR
// time := 1 1$00 ;
76235: LD_ADDR_VAR 0 8
76239: PUSH
76240: LD_INT 2100
76242: ST_TO_ADDR
// if amount < min then
76243: LD_VAR 0 9
76247: PUSH
76248: LD_VAR 0 3
76252: LESS
76253: IFFALSE 76271
// r := r * 2 else
76255: LD_ADDR_VAR 0 7
76259: PUSH
76260: LD_VAR 0 7
76264: PUSH
76265: LD_INT 2
76267: MUL
76268: ST_TO_ADDR
76269: GO 76297
// if amount > max then
76271: LD_VAR 0 9
76275: PUSH
76276: LD_VAR 0 4
76280: GREATER
76281: IFFALSE 76297
// r := r / 2 ;
76283: LD_ADDR_VAR 0 7
76287: PUSH
76288: LD_VAR 0 7
76292: PUSH
76293: LD_INT 2
76295: DIVREAL
76296: ST_TO_ADDR
// time := time / r ;
76297: LD_ADDR_VAR 0 8
76301: PUSH
76302: LD_VAR 0 8
76306: PUSH
76307: LD_VAR 0 7
76311: DIVREAL
76312: ST_TO_ADDR
// if time < 0 then
76313: LD_VAR 0 8
76317: PUSH
76318: LD_INT 0
76320: LESS
76321: IFFALSE 76338
// time := time * - 1 ;
76323: LD_ADDR_VAR 0 8
76327: PUSH
76328: LD_VAR 0 8
76332: PUSH
76333: LD_INT 1
76335: NEG
76336: MUL
76337: ST_TO_ADDR
// wait ( time ) ;
76338: LD_VAR 0 8
76342: PPUSH
76343: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
76347: LD_INT 35
76349: PPUSH
76350: LD_INT 875
76352: PPUSH
76353: CALL_OW 12
76357: PPUSH
76358: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76362: LD_INT 1
76364: PPUSH
76365: LD_INT 5
76367: PPUSH
76368: CALL_OW 12
76372: PPUSH
76373: LD_VAR 0 1
76377: PPUSH
76378: LD_INT 1
76380: PPUSH
76381: CALL_OW 55
// end ;
76385: GO 76195
// end ;
76387: LD_VAR 0 5
76391: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76392: LD_INT 0
76394: PPUSH
76395: PPUSH
76396: PPUSH
76397: PPUSH
76398: PPUSH
76399: PPUSH
76400: PPUSH
76401: PPUSH
// if not turrets or not factories then
76402: LD_VAR 0 1
76406: NOT
76407: PUSH
76408: LD_VAR 0 2
76412: NOT
76413: OR
76414: IFFALSE 76418
// exit ;
76416: GO 76725
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76418: LD_ADDR_VAR 0 10
76422: PUSH
76423: LD_INT 5
76425: PUSH
76426: LD_INT 6
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: LD_INT 2
76435: PUSH
76436: LD_INT 4
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PUSH
76443: LD_INT 3
76445: PUSH
76446: LD_INT 5
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: LIST
76457: PUSH
76458: LD_INT 24
76460: PUSH
76461: LD_INT 25
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: PUSH
76468: LD_INT 23
76470: PUSH
76471: LD_INT 27
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 42
76484: PUSH
76485: LD_INT 43
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: LD_INT 44
76494: PUSH
76495: LD_INT 46
76497: PUSH
76498: EMPTY
76499: LIST
76500: LIST
76501: PUSH
76502: LD_INT 45
76504: PUSH
76505: LD_INT 47
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: LIST
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: LIST
76521: ST_TO_ADDR
// result := [ ] ;
76522: LD_ADDR_VAR 0 3
76526: PUSH
76527: EMPTY
76528: ST_TO_ADDR
// for i in turrets do
76529: LD_ADDR_VAR 0 4
76533: PUSH
76534: LD_VAR 0 1
76538: PUSH
76539: FOR_IN
76540: IFFALSE 76723
// begin nat := GetNation ( i ) ;
76542: LD_ADDR_VAR 0 7
76546: PUSH
76547: LD_VAR 0 4
76551: PPUSH
76552: CALL_OW 248
76556: ST_TO_ADDR
// weapon := 0 ;
76557: LD_ADDR_VAR 0 8
76561: PUSH
76562: LD_INT 0
76564: ST_TO_ADDR
// if not nat then
76565: LD_VAR 0 7
76569: NOT
76570: IFFALSE 76574
// continue ;
76572: GO 76539
// for j in list [ nat ] do
76574: LD_ADDR_VAR 0 5
76578: PUSH
76579: LD_VAR 0 10
76583: PUSH
76584: LD_VAR 0 7
76588: ARRAY
76589: PUSH
76590: FOR_IN
76591: IFFALSE 76632
// if GetBWeapon ( i ) = j [ 1 ] then
76593: LD_VAR 0 4
76597: PPUSH
76598: CALL_OW 269
76602: PUSH
76603: LD_VAR 0 5
76607: PUSH
76608: LD_INT 1
76610: ARRAY
76611: EQUAL
76612: IFFALSE 76630
// begin weapon := j [ 2 ] ;
76614: LD_ADDR_VAR 0 8
76618: PUSH
76619: LD_VAR 0 5
76623: PUSH
76624: LD_INT 2
76626: ARRAY
76627: ST_TO_ADDR
// break ;
76628: GO 76632
// end ;
76630: GO 76590
76632: POP
76633: POP
// if not weapon then
76634: LD_VAR 0 8
76638: NOT
76639: IFFALSE 76643
// continue ;
76641: GO 76539
// for k in factories do
76643: LD_ADDR_VAR 0 6
76647: PUSH
76648: LD_VAR 0 2
76652: PUSH
76653: FOR_IN
76654: IFFALSE 76719
// begin weapons := AvailableWeaponList ( k ) ;
76656: LD_ADDR_VAR 0 9
76660: PUSH
76661: LD_VAR 0 6
76665: PPUSH
76666: CALL_OW 478
76670: ST_TO_ADDR
// if not weapons then
76671: LD_VAR 0 9
76675: NOT
76676: IFFALSE 76680
// continue ;
76678: GO 76653
// if weapon in weapons then
76680: LD_VAR 0 8
76684: PUSH
76685: LD_VAR 0 9
76689: IN
76690: IFFALSE 76717
// begin result := [ i , weapon ] ;
76692: LD_ADDR_VAR 0 3
76696: PUSH
76697: LD_VAR 0 4
76701: PUSH
76702: LD_VAR 0 8
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: ST_TO_ADDR
// exit ;
76711: POP
76712: POP
76713: POP
76714: POP
76715: GO 76725
// end ; end ;
76717: GO 76653
76719: POP
76720: POP
// end ;
76721: GO 76539
76723: POP
76724: POP
// end ;
76725: LD_VAR 0 3
76729: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76730: LD_INT 0
76732: PPUSH
// if not side or side > 8 then
76733: LD_VAR 0 3
76737: NOT
76738: PUSH
76739: LD_VAR 0 3
76743: PUSH
76744: LD_INT 8
76746: GREATER
76747: OR
76748: IFFALSE 76752
// exit ;
76750: GO 76811
// if not range then
76752: LD_VAR 0 4
76756: NOT
76757: IFFALSE 76768
// range := - 12 ;
76759: LD_ADDR_VAR 0 4
76763: PUSH
76764: LD_INT 12
76766: NEG
76767: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76768: LD_VAR 0 1
76772: PPUSH
76773: LD_VAR 0 2
76777: PPUSH
76778: LD_VAR 0 3
76782: PPUSH
76783: LD_VAR 0 4
76787: PPUSH
76788: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76792: LD_VAR 0 1
76796: PPUSH
76797: LD_VAR 0 2
76801: PPUSH
76802: LD_VAR 0 3
76806: PPUSH
76807: CALL_OW 331
// end ;
76811: LD_VAR 0 5
76815: RET
// export function Video ( mode ) ; begin
76816: LD_INT 0
76818: PPUSH
// ingame_video = mode ;
76819: LD_ADDR_OWVAR 52
76823: PUSH
76824: LD_VAR 0 1
76828: ST_TO_ADDR
// interface_hidden = mode ;
76829: LD_ADDR_OWVAR 54
76833: PUSH
76834: LD_VAR 0 1
76838: ST_TO_ADDR
// end ;
76839: LD_VAR 0 2
76843: RET
// export function Join ( array , element ) ; begin
76844: LD_INT 0
76846: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76847: LD_ADDR_VAR 0 3
76851: PUSH
76852: LD_VAR 0 1
76856: PPUSH
76857: LD_VAR 0 1
76861: PUSH
76862: LD_INT 1
76864: PLUS
76865: PPUSH
76866: LD_VAR 0 2
76870: PPUSH
76871: CALL_OW 1
76875: ST_TO_ADDR
// end ;
76876: LD_VAR 0 3
76880: RET
// export function JoinUnion ( array , element ) ; begin
76881: LD_INT 0
76883: PPUSH
// result := array union element ;
76884: LD_ADDR_VAR 0 3
76888: PUSH
76889: LD_VAR 0 1
76893: PUSH
76894: LD_VAR 0 2
76898: UNION
76899: ST_TO_ADDR
// end ;
76900: LD_VAR 0 3
76904: RET
// export function GetBehemoths ( side ) ; begin
76905: LD_INT 0
76907: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76908: LD_ADDR_VAR 0 2
76912: PUSH
76913: LD_INT 22
76915: PUSH
76916: LD_VAR 0 1
76920: PUSH
76921: EMPTY
76922: LIST
76923: LIST
76924: PUSH
76925: LD_INT 31
76927: PUSH
76928: LD_INT 25
76930: PUSH
76931: EMPTY
76932: LIST
76933: LIST
76934: PUSH
76935: EMPTY
76936: LIST
76937: LIST
76938: PPUSH
76939: CALL_OW 69
76943: ST_TO_ADDR
// end ;
76944: LD_VAR 0 2
76948: RET
// export function Shuffle ( array ) ; var i , index ; begin
76949: LD_INT 0
76951: PPUSH
76952: PPUSH
76953: PPUSH
// result := [ ] ;
76954: LD_ADDR_VAR 0 2
76958: PUSH
76959: EMPTY
76960: ST_TO_ADDR
// if not array then
76961: LD_VAR 0 1
76965: NOT
76966: IFFALSE 76970
// exit ;
76968: GO 77069
// Randomize ;
76970: CALL_OW 10
// for i = array downto 1 do
76974: LD_ADDR_VAR 0 3
76978: PUSH
76979: DOUBLE
76980: LD_VAR 0 1
76984: INC
76985: ST_TO_ADDR
76986: LD_INT 1
76988: PUSH
76989: FOR_DOWNTO
76990: IFFALSE 77067
// begin index := rand ( 1 , array ) ;
76992: LD_ADDR_VAR 0 4
76996: PUSH
76997: LD_INT 1
76999: PPUSH
77000: LD_VAR 0 1
77004: PPUSH
77005: CALL_OW 12
77009: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77010: LD_ADDR_VAR 0 2
77014: PUSH
77015: LD_VAR 0 2
77019: PPUSH
77020: LD_VAR 0 2
77024: PUSH
77025: LD_INT 1
77027: PLUS
77028: PPUSH
77029: LD_VAR 0 1
77033: PUSH
77034: LD_VAR 0 4
77038: ARRAY
77039: PPUSH
77040: CALL_OW 2
77044: ST_TO_ADDR
// array := Delete ( array , index ) ;
77045: LD_ADDR_VAR 0 1
77049: PUSH
77050: LD_VAR 0 1
77054: PPUSH
77055: LD_VAR 0 4
77059: PPUSH
77060: CALL_OW 3
77064: ST_TO_ADDR
// end ;
77065: GO 76989
77067: POP
77068: POP
// end ;
77069: LD_VAR 0 2
77073: RET
// export function GetBaseMaterials ( base ) ; begin
77074: LD_INT 0
77076: PPUSH
// result := [ 0 , 0 , 0 ] ;
77077: LD_ADDR_VAR 0 2
77081: PUSH
77082: LD_INT 0
77084: PUSH
77085: LD_INT 0
77087: PUSH
77088: LD_INT 0
77090: PUSH
77091: EMPTY
77092: LIST
77093: LIST
77094: LIST
77095: ST_TO_ADDR
// if not base then
77096: LD_VAR 0 1
77100: NOT
77101: IFFALSE 77105
// exit ;
77103: GO 77154
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77105: LD_ADDR_VAR 0 2
77109: PUSH
77110: LD_VAR 0 1
77114: PPUSH
77115: LD_INT 1
77117: PPUSH
77118: CALL_OW 275
77122: PUSH
77123: LD_VAR 0 1
77127: PPUSH
77128: LD_INT 2
77130: PPUSH
77131: CALL_OW 275
77135: PUSH
77136: LD_VAR 0 1
77140: PPUSH
77141: LD_INT 3
77143: PPUSH
77144: CALL_OW 275
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: LIST
77153: ST_TO_ADDR
// end ;
77154: LD_VAR 0 2
77158: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77159: LD_INT 0
77161: PPUSH
77162: PPUSH
// result := array ;
77163: LD_ADDR_VAR 0 3
77167: PUSH
77168: LD_VAR 0 1
77172: ST_TO_ADDR
// if size > 0 then
77173: LD_VAR 0 2
77177: PUSH
77178: LD_INT 0
77180: GREATER
77181: IFFALSE 77227
// for i := array downto size do
77183: LD_ADDR_VAR 0 4
77187: PUSH
77188: DOUBLE
77189: LD_VAR 0 1
77193: INC
77194: ST_TO_ADDR
77195: LD_VAR 0 2
77199: PUSH
77200: FOR_DOWNTO
77201: IFFALSE 77225
// result := Delete ( result , result ) ;
77203: LD_ADDR_VAR 0 3
77207: PUSH
77208: LD_VAR 0 3
77212: PPUSH
77213: LD_VAR 0 3
77217: PPUSH
77218: CALL_OW 3
77222: ST_TO_ADDR
77223: GO 77200
77225: POP
77226: POP
// end ;
77227: LD_VAR 0 3
77231: RET
// export function ComExit ( unit ) ; var tmp ; begin
77232: LD_INT 0
77234: PPUSH
77235: PPUSH
// if not IsInUnit ( unit ) then
77236: LD_VAR 0 1
77240: PPUSH
77241: CALL_OW 310
77245: NOT
77246: IFFALSE 77250
// exit ;
77248: GO 77310
// tmp := IsInUnit ( unit ) ;
77250: LD_ADDR_VAR 0 3
77254: PUSH
77255: LD_VAR 0 1
77259: PPUSH
77260: CALL_OW 310
77264: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77265: LD_VAR 0 3
77269: PPUSH
77270: CALL_OW 247
77274: PUSH
77275: LD_INT 2
77277: EQUAL
77278: IFFALSE 77291
// ComExitVehicle ( unit ) else
77280: LD_VAR 0 1
77284: PPUSH
77285: CALL_OW 121
77289: GO 77300
// ComExitBuilding ( unit ) ;
77291: LD_VAR 0 1
77295: PPUSH
77296: CALL_OW 122
// result := tmp ;
77300: LD_ADDR_VAR 0 2
77304: PUSH
77305: LD_VAR 0 3
77309: ST_TO_ADDR
// end ;
77310: LD_VAR 0 2
77314: RET
// export function ResetHc ; begin
77315: LD_INT 0
77317: PPUSH
// InitHc ;
77318: CALL_OW 19
// hc_importance := 0 ;
77322: LD_ADDR_OWVAR 32
77326: PUSH
77327: LD_INT 0
77329: ST_TO_ADDR
// end ;
77330: LD_VAR 0 1
77334: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77335: LD_INT 0
77337: PPUSH
77338: PPUSH
77339: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77340: LD_ADDR_VAR 0 6
77344: PUSH
77345: LD_VAR 0 1
77349: PUSH
77350: LD_VAR 0 3
77354: PLUS
77355: PUSH
77356: LD_INT 2
77358: DIV
77359: ST_TO_ADDR
// if _x < 0 then
77360: LD_VAR 0 6
77364: PUSH
77365: LD_INT 0
77367: LESS
77368: IFFALSE 77385
// _x := _x * - 1 ;
77370: LD_ADDR_VAR 0 6
77374: PUSH
77375: LD_VAR 0 6
77379: PUSH
77380: LD_INT 1
77382: NEG
77383: MUL
77384: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77385: LD_ADDR_VAR 0 7
77389: PUSH
77390: LD_VAR 0 2
77394: PUSH
77395: LD_VAR 0 4
77399: PLUS
77400: PUSH
77401: LD_INT 2
77403: DIV
77404: ST_TO_ADDR
// if _y < 0 then
77405: LD_VAR 0 7
77409: PUSH
77410: LD_INT 0
77412: LESS
77413: IFFALSE 77430
// _y := _y * - 1 ;
77415: LD_ADDR_VAR 0 7
77419: PUSH
77420: LD_VAR 0 7
77424: PUSH
77425: LD_INT 1
77427: NEG
77428: MUL
77429: ST_TO_ADDR
// result := [ _x , _y ] ;
77430: LD_ADDR_VAR 0 5
77434: PUSH
77435: LD_VAR 0 6
77439: PUSH
77440: LD_VAR 0 7
77444: PUSH
77445: EMPTY
77446: LIST
77447: LIST
77448: ST_TO_ADDR
// end ;
77449: LD_VAR 0 5
77453: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77454: LD_INT 0
77456: PPUSH
77457: PPUSH
77458: PPUSH
77459: PPUSH
// task := GetTaskList ( unit ) ;
77460: LD_ADDR_VAR 0 7
77464: PUSH
77465: LD_VAR 0 1
77469: PPUSH
77470: CALL_OW 437
77474: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77475: LD_VAR 0 7
77479: NOT
77480: PUSH
77481: LD_VAR 0 1
77485: PPUSH
77486: LD_VAR 0 2
77490: PPUSH
77491: CALL_OW 308
77495: NOT
77496: AND
77497: IFFALSE 77501
// exit ;
77499: GO 77619
// if IsInArea ( unit , area ) then
77501: LD_VAR 0 1
77505: PPUSH
77506: LD_VAR 0 2
77510: PPUSH
77511: CALL_OW 308
77515: IFFALSE 77533
// begin ComMoveToArea ( unit , goAway ) ;
77517: LD_VAR 0 1
77521: PPUSH
77522: LD_VAR 0 3
77526: PPUSH
77527: CALL_OW 113
// exit ;
77531: GO 77619
// end ; if task [ 1 ] [ 1 ] <> M then
77533: LD_VAR 0 7
77537: PUSH
77538: LD_INT 1
77540: ARRAY
77541: PUSH
77542: LD_INT 1
77544: ARRAY
77545: PUSH
77546: LD_STRING M
77548: NONEQUAL
77549: IFFALSE 77553
// exit ;
77551: GO 77619
// x := task [ 1 ] [ 2 ] ;
77553: LD_ADDR_VAR 0 5
77557: PUSH
77558: LD_VAR 0 7
77562: PUSH
77563: LD_INT 1
77565: ARRAY
77566: PUSH
77567: LD_INT 2
77569: ARRAY
77570: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77571: LD_ADDR_VAR 0 6
77575: PUSH
77576: LD_VAR 0 7
77580: PUSH
77581: LD_INT 1
77583: ARRAY
77584: PUSH
77585: LD_INT 3
77587: ARRAY
77588: ST_TO_ADDR
// if InArea ( x , y , area ) then
77589: LD_VAR 0 5
77593: PPUSH
77594: LD_VAR 0 6
77598: PPUSH
77599: LD_VAR 0 2
77603: PPUSH
77604: CALL_OW 309
77608: IFFALSE 77619
// ComStop ( unit ) ;
77610: LD_VAR 0 1
77614: PPUSH
77615: CALL_OW 141
// end ;
77619: LD_VAR 0 4
77623: RET
// export function Abs ( value ) ; begin
77624: LD_INT 0
77626: PPUSH
// result := value ;
77627: LD_ADDR_VAR 0 2
77631: PUSH
77632: LD_VAR 0 1
77636: ST_TO_ADDR
// if value < 0 then
77637: LD_VAR 0 1
77641: PUSH
77642: LD_INT 0
77644: LESS
77645: IFFALSE 77662
// result := value * - 1 ;
77647: LD_ADDR_VAR 0 2
77651: PUSH
77652: LD_VAR 0 1
77656: PUSH
77657: LD_INT 1
77659: NEG
77660: MUL
77661: ST_TO_ADDR
// end ;
77662: LD_VAR 0 2
77666: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77667: LD_INT 0
77669: PPUSH
77670: PPUSH
77671: PPUSH
77672: PPUSH
77673: PPUSH
77674: PPUSH
77675: PPUSH
77676: PPUSH
// if not unit or not building then
77677: LD_VAR 0 1
77681: NOT
77682: PUSH
77683: LD_VAR 0 2
77687: NOT
77688: OR
77689: IFFALSE 77693
// exit ;
77691: GO 77919
// x := GetX ( building ) ;
77693: LD_ADDR_VAR 0 4
77697: PUSH
77698: LD_VAR 0 2
77702: PPUSH
77703: CALL_OW 250
77707: ST_TO_ADDR
// y := GetY ( building ) ;
77708: LD_ADDR_VAR 0 6
77712: PUSH
77713: LD_VAR 0 2
77717: PPUSH
77718: CALL_OW 251
77722: ST_TO_ADDR
// d := GetDir ( building ) ;
77723: LD_ADDR_VAR 0 8
77727: PUSH
77728: LD_VAR 0 2
77732: PPUSH
77733: CALL_OW 254
77737: ST_TO_ADDR
// r := 4 ;
77738: LD_ADDR_VAR 0 9
77742: PUSH
77743: LD_INT 4
77745: ST_TO_ADDR
// for i := 1 to 5 do
77746: LD_ADDR_VAR 0 10
77750: PUSH
77751: DOUBLE
77752: LD_INT 1
77754: DEC
77755: ST_TO_ADDR
77756: LD_INT 5
77758: PUSH
77759: FOR_TO
77760: IFFALSE 77917
// begin _x := ShiftX ( x , d , r + i ) ;
77762: LD_ADDR_VAR 0 5
77766: PUSH
77767: LD_VAR 0 4
77771: PPUSH
77772: LD_VAR 0 8
77776: PPUSH
77777: LD_VAR 0 9
77781: PUSH
77782: LD_VAR 0 10
77786: PLUS
77787: PPUSH
77788: CALL_OW 272
77792: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77793: LD_ADDR_VAR 0 7
77797: PUSH
77798: LD_VAR 0 6
77802: PPUSH
77803: LD_VAR 0 8
77807: PPUSH
77808: LD_VAR 0 9
77812: PUSH
77813: LD_VAR 0 10
77817: PLUS
77818: PPUSH
77819: CALL_OW 273
77823: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77824: LD_VAR 0 5
77828: PPUSH
77829: LD_VAR 0 7
77833: PPUSH
77834: CALL_OW 488
77838: PUSH
77839: LD_VAR 0 5
77843: PPUSH
77844: LD_VAR 0 7
77848: PPUSH
77849: CALL_OW 428
77853: PPUSH
77854: CALL_OW 247
77858: PUSH
77859: LD_INT 3
77861: PUSH
77862: LD_INT 2
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: IN
77869: NOT
77870: AND
77871: IFFALSE 77915
// begin ComMoveXY ( unit , _x , _y ) ;
77873: LD_VAR 0 1
77877: PPUSH
77878: LD_VAR 0 5
77882: PPUSH
77883: LD_VAR 0 7
77887: PPUSH
77888: CALL_OW 111
// result := [ _x , _y ] ;
77892: LD_ADDR_VAR 0 3
77896: PUSH
77897: LD_VAR 0 5
77901: PUSH
77902: LD_VAR 0 7
77906: PUSH
77907: EMPTY
77908: LIST
77909: LIST
77910: ST_TO_ADDR
// exit ;
77911: POP
77912: POP
77913: GO 77919
// end ; end ;
77915: GO 77759
77917: POP
77918: POP
// end ;
77919: LD_VAR 0 3
77923: RET
